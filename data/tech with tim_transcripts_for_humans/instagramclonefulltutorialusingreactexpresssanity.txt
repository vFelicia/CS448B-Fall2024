With timestamps:

00:02 - [Music]
00:08 - in this video i'll be showing you how to
00:10 - make a social media slash instagram
00:12 - clone using react on the front end
00:14 - express on the back end and then sanity
00:16 - for our content management system as
00:19 - well as our database now this is going
00:20 - to be a pretty advanced tutorial that's
00:22 - going to walk you through how to do all
00:23 - of this completely from scratch so i'm
00:26 - going to assume that you have some
00:27 - understanding of javascript as well as
00:29 - react and express now with that said let
00:32 - me give you a demo of what we're going
00:33 - to be building out then i'll talk more
00:35 - about exactly how this will work and
00:36 - we'll get into all of the setup steps so
00:39 - here you can see that i kind of have a
00:40 - mock instagram now i know the styling is
00:42 - not quite what we would expect i'm not
00:44 - going to focus on styling in this video
00:46 - it's really just meant on the
00:47 - functionality you guys can go in and
00:49 - change the css and make things look
00:51 - better after you have the functioning
00:52 - website built regardless what i can do
00:55 - here is sign in now i'm not implementing
00:57 - real authentication here and the reason
00:59 - for that is it would make this video
01:00 - extremely long we're just going to focus
01:02 - on the actual content of the website as
01:05 - well as the functionality so adding
01:06 - followers searching for accounts
01:09 - unfollowing and following different
01:10 - users being able to post something right
01:13 - all of that kind of stuff view profiles
01:15 - edit profiles that's what we're focusing
01:17 - on on here as opposed to kind of all the
01:19 - authentication stuff which you can add
01:20 - to this fairly easily anyways what i can
01:23 - do here is make an account so maybe i
01:24 - make an account i just call it hello
01:27 - and then world and then once i make this
01:29 - account it will automatically sign me in
01:31 - now what i can also do is log out and
01:33 - then if i know the username of the
01:34 - account i can just sign in by entering
01:36 - that username nice okay so now i'm going
01:38 - to go to search and i'm just going to
01:40 - look for a few users here and when i
01:42 - press search i'm going to see all of the
01:43 - different users that i have here
01:45 - in my i guess app so what i can do is
01:47 - click on the rock and if i want to i can
01:50 - follow the rock and now that i'm
01:51 - following the rock we should see the
01:53 - follower account update here i can go to
01:55 - my home page or my feed and i'll now see
01:57 - posts from whoever i'm following right
01:59 - so if i go back to search here let's
02:02 - search let's go to timurzika which is
02:04 - this beautiful guy right here
02:06 - let's follow him
02:07 - nice then when i go back home i'll see
02:09 - all of the posts from him as well nice
02:11 - now i can click into different profiles
02:12 - of course i can unfollow people if i
02:14 - want to do that then when i go back to
02:16 - the home page of course those posts are
02:18 - going to be gone then i can go to my
02:20 - profile and i can actually edit this
02:22 - profile so maybe i want to change my
02:23 - first and last name maybe i want to
02:25 - change
02:26 - my bio maybe i want to update a photo so
02:28 - let's actually do that
02:31 - okay
02:32 - let's update
02:33 - and give it a second here and we have
02:36 - now updated our profile so that's really
02:37 - what i'm going to be focusing on in this
02:39 - video i do know this looks a little bit
02:40 - simple but there is a ton of stuff
02:42 - that's going on in the back end and once
02:44 - you understand how to implement these
02:45 - different features here you'll see how
02:47 - you can add a ton of other stuff like
02:48 - likes comments removing posts a bunch of
02:51 - stuff that i just haven't implemented in
02:52 - this app and then of course you can make
02:54 - a post here by choosing a file and then
02:56 - entering a bio or entering a caption for
02:58 - that photo
02:59 - all right so that is the demo of the
03:01 - application now i do want to mention
03:03 - that this video is sponsored by sanity
03:05 - which as i said is what we're going to
03:06 - use for the content management as well
03:08 - as the database aspect of this app now
03:11 - this is an awesome platform and it
03:13 - really just makes it easy to access
03:14 - different data and to do that from
03:16 - really any source so even though we're
03:18 - going to be viewing our data from say a
03:20 - react front end here we could be viewing
03:22 - our data from a mobile app or from
03:24 - really anything else and one of the
03:25 - awesome parts about sandy is they have
03:27 - this uh what's it called sandy studio
03:30 - which allows you to go in and actually
03:32 - view all of the entries in your database
03:34 - so i can go and modify different things
03:36 - view all of the different entries and it
03:38 - makes it really convenient when we're
03:39 - debugging as well as people who aren't
03:41 - developers so just really easily say add
03:43 - a post without having to actually go
03:45 - onto the website you know sign into an
03:47 - account
03:48 - all of that kind of stuff now of course
03:49 - sandy is completely free and it's just
03:51 - an awesome thing to use for the database
03:53 - and i've really enjoyed messing around
03:54 - with it as i've been learning it over
03:56 - the past few days so yep that's what
03:58 - we're going to be using not much more to
03:59 - say about that you will learn about all
04:00 - of the features insanity as we go
04:03 - through this video so i just want to
04:04 - jump in here and mention that for the
04:06 - free version of sanity usually you get a
04:08 - hundred thousand api requests 500 000
04:11 - api cdn requests and then 10 gigabytes
04:13 - of bandwidth but sandy was actually nice
04:15 - enough to double all of that for this
04:17 - tutorial so if you go to the link in the
04:19 - description sandy.com tech with tim
04:22 - you'll see here that you can use this
04:23 - coupon so sandy and nit and then hyphen
04:25 - hyphen coupon tech with tim and that
04:28 - actually gives you double number of api
04:30 - requests cdn requests and bandwidth so
04:32 - usually it's 100k 500 000 and then 10
04:35 - gigabytes and now it's been doubled to
04:36 - 200 000 1 million and 20 gigabytes again
04:39 - completely free you really will not need
04:42 - this many requests but in case you want
04:43 - to run some other type of application
04:45 - using sanity then this is going to be a
04:47 - higher limit and just make it a bit
04:48 - easier for you to do that now the way
04:50 - that you get access to this again is you
04:52 - write this sandy init and then hyphen
04:54 - hyphen coupon tech with tim now i'll
04:56 - leave this link in the description also
04:58 - when we start setting up sanity i will
05:00 - mention that you can use this coupon
05:01 - code to get access to the double limits
05:04 - so as i mentioned we do have a few setup
05:05 - steps here for this application we need
05:08 - to set up our database our backend and
05:10 - then our frontend so for the database go
05:12 - to this website it is sanity.io and all
05:15 - you need to do is actually just make an
05:16 - account so you can click on login and
05:18 - then assuming you don't have an account
05:19 - you can just create a new one once
05:21 - you've created that account we can
05:22 - actually do all of the setup for this
05:24 - from our command line so just install
05:26 - node.js if you don't already have it i'm
05:28 - assuming most of you have that already
05:29 - and then get into vs code or whatever
05:31 - editor you want to use now inside of vs
05:34 - code here and i've opened up a folder
05:35 - called instagram clone this is where i'm
05:37 - going to put all of the code for this
05:38 - project i've made another folder inside
05:40 - of here called database now database is
05:43 - specifically where i'm going to put all
05:44 - of the sanity database related stuff
05:47 - i'll make two new folders one for api
05:49 - and then one for frontend where the api
05:51 - will be our express backend and the
05:53 - front end will be our react application
05:55 - so now that i've cd into this database
05:57 - folder here what i'm going to do is type
05:58 - the following npm install hyphen g and
06:01 - then at sanity
06:03 - cli now this is going to globally
06:05 - install the sandy cli which we're going
06:08 - to use to actually run the sandy studio
06:10 - and create our sandy database kind of
06:12 - starting code right so i'm going to
06:14 - install that i already have it installed
06:15 - so it goes pretty quickly and then once
06:17 - i've done that i'm going to type the
06:19 - command sanity init now this will work
06:21 - assuming that you've installed that the
06:23 - sandy cli and that's going to ask you if
06:25 - you want to select an existing project
06:27 - or create a new one so i'm going to
06:29 - create a new project here that's what i
06:30 - would recommend you do as well and we'll
06:32 - just call this insta
06:34 - clone
06:35 - tutorial and we should probably do like
06:38 - some underscores or something here so
06:39 - it's a little bit easier to see okay
06:41 - insta clone tutorial for my project name
06:44 - then it's going to ask me do i want to
06:45 - use the default data set configuration
06:47 - we're just going to click yes for this
06:50 - we're going to create the data set here
06:51 - which will take a second and we'll be
06:53 - given a few other options here so
06:54 - project output path i'm just going to
06:56 - hit enter meaning it's the current
06:58 - directory if you wanted it to be
06:59 - somewhere else you would just type in
07:00 - the relative path to where you currently
07:02 - are okay and then we can use a project
07:05 - template if we would like so movie
07:07 - project ecommerce blog i've already
07:09 - showed you what the studio looked like
07:11 - but if you want to explore it with some
07:12 - sample data then you can either choose
07:15 - movie project or e-commerce and it will
07:17 - give you some data as well as a schema
07:19 - and you can have a look at kind of what
07:21 - a sample sandy studio may look like and
07:23 - why it's beneficial anyways for now i'm
07:25 - going to go with clean project with no
07:26 - predefined schemas because we don't need
07:28 - those for our project we're going to
07:30 - write our own schemas all right so we'll
07:32 - just wait for this to finish once it is
07:34 - done i will be right back and then we'll
07:36 - move on to the next steps all right so
07:38 - this command has now finished and i've
07:39 - opened up the database folder and you
07:41 - can see that we have a bunch of files
07:43 - and content inside of here now all we
07:45 - really care about is the schemas folder
07:46 - where we have schema.js we'll look at
07:49 - this later but this is where we'll
07:50 - define our database models now i want to
07:52 - mention here that what sandy's actually
07:54 - going to do is it's going to build our
07:56 - different database models for us and
07:58 - then host that in the cloud so we don't
08:00 - actually need to have any local database
08:02 - file here and our database will be in
08:04 - the cloud meaning we can access it from
08:05 - really any application so even though
08:07 - we're building a react app here if we
08:09 - want to access it from python or we want
08:11 - to access it from really any other
08:12 - programming language we could just use
08:14 - the api that sandy provides to access
08:17 - that data that's why it's so nice to
08:19 - actually use sandy because it hosts
08:20 - everything for us and kind of deals with
08:22 - all of the you know database related
08:24 - stuff hence why we're using it in this
08:26 - tutorial regardless i want to mention
08:28 - that just keep in mind we're not
08:29 - actually hosting the data locally we're
08:31 - just defining the schemas then when we
08:33 - start the studio which we can do now by
08:35 - typing in sandy start i will build the
08:38 - schemas for us host that online
08:40 - and you get the point so i'm going to
08:42 - start this with sanity start now i need
08:44 - to be inside of the project where sandy
08:46 - is so inside this database folder and
08:48 - then it'll take a second and what i can
08:50 - do is go to a local host link and i'll
08:52 - be able to actually view all my database
08:54 - models and all of the data that's in my
08:57 - database now in this case we don't have
08:59 - any models so i'm not going to be able
09:00 - to view anything but i just want to show
09:02 - you kind of how this works before we
09:03 - proceed all right so it's successfully
09:05 - compiled so what i can do is go to
09:06 - localhost colon 333 so let's open that
09:09 - up now in google chrome and when i go
09:11 - here it's going to ask me to log in so i
09:13 - had google as my login so let me log
09:15 - into this and then i will show you what
09:17 - it looks like alright so i've logged in
09:19 - now to my google account and of course
09:21 - it's going to say empty schema because
09:22 - well it is empty we haven't put anything
09:24 - here yet but i just want to show you
09:26 - this kind of how the studio works you
09:27 - access it from this local host link all
09:29 - right so we pretty much set up sanity
09:31 - now we'll do the database models later
09:33 - on so i'm just going to end this with
09:35 - ctrl c and now we're going to set up
09:37 - express so i'm going to make a new
09:39 - folder here and i'm just going to call
09:40 - this api and then i'm going to cd into
09:43 - the api folder so cd api all right so
09:46 - i'm now inside of the api folder so i'm
09:48 - just going to run the command npm init
09:49 - to give us a fresh project and then i'm
09:52 - going to run through this setup here so
09:54 - package name api is fine the version 1
09:56 - is fine we don't need a description the
09:58 - entry point of index.js is fine for
10:00 - right now we don't need a test command
10:02 - we don't need a git repository no
10:04 - keywords no author no license is this
10:06 - okay yes it is and hit enter okay so now
10:09 - we have a package.json which is what i
10:11 - want i'm going to install a bunch of
10:12 - modules that we need and then we'll
10:14 - actually just create kind of the
10:16 - boilerplate express application before
10:18 - we start kind of writing all of the
10:20 - different endpoints so what i'm going to
10:21 - do is type npm install and then i'm
10:23 - going to install the sanity client now
10:26 - there is a javascript client that we can
10:27 - use that will allow us to very easily
10:29 - send requests to the sanity api again if
10:32 - you're working with sandy from another
10:33 - programming language they do have some
10:35 - other built-in packages and kind of
10:38 - pre-built i don't even know what you
10:39 - would call them modules
10:41 - that you can use to connect to sandy but
10:43 - you also can just do it manually using
10:44 - the sandy api regardless npm install at
10:47 - sandy client we also want to install the
10:50 - body hyphen parser this is going to
10:52 - allow us to actually get json data in
10:55 - our express api then we are going to
10:58 - install multer we're going to use this
11:00 - for uploading files we're going to
11:02 - install env we're going to use this so
11:04 - we gotta have an environment variable
11:06 - file that stores our api token we're
11:08 - then going to have fs which is file
11:10 - system again this is for uploading files
11:12 - and then we're going to have a nano id
11:14 - to get a unique id so let's spell that
11:16 - correctly
11:17 - okay so i'm going to install all of
11:19 - these right here again if any of this is
11:21 - confusing to you please feel free to
11:22 - check out the code from github again the
11:24 - link will be in the description and you
11:26 - can just take the package.json file
11:28 - download that and then install
11:29 - everything that's inside of it on your
11:31 - own okay so i've now installed all of
11:32 - those packages now what i'm going to do
11:34 - is create a few different files that i
11:35 - need inside of here and then that will
11:37 - conclude the setup so the first file
11:39 - that i want to make here is index.js
11:41 - this is going to be my entry point the
11:43 - next file that i want to make is going
11:45 - to be api calls.js
11:47 - this file will be responsible for
11:48 - holding all of the sanity api calls so
11:51 - interacting with our database
11:52 - essentially
11:54 - next what i'm going to do is make a new
11:55 - file and this is going to be client.js
11:59 - we're going to initialize this in a
12:00 - second this will be our sanity client
12:02 - and then finally we're going to do dot
12:04 - env
12:05 - which is going to store an environment
12:07 - variable with our api token for the
12:09 - sanity project
12:10 - now what's going on here
12:12 - is we're going to have a back end the
12:14 - back end is going to be interacting with
12:15 - the api so the sanity database api
12:18 - and the point of this is so that our
12:20 - front end can hit our back end our back
12:22 - end can be authenticated with the api
12:24 - and then that way we're not exposing our
12:26 - sanity api token and we're only having
12:29 - the back end of our application actually
12:30 - manipulating or dealing with any data i
12:33 - could from my front end hit the api
12:36 - for sanity i don't actually need to
12:38 - build out an entire back end but this
12:40 - will be slightly more secure now i will
12:42 - mention that what we're doing here for
12:43 - the back end is not the most secure
12:45 - you'd have to make some modifications if
12:46 - you're going to put this into production
12:48 - but it's just better practice to have
12:50 - any of your api tokens and interactions
12:52 - with data to be done from the back end
12:54 - as opposed to the front end so hopefully
12:56 - that makes a bit of sense but that's
12:57 - where we're making the api essentially
12:59 - so we forward request from the front end
13:01 - to the back end that we're building the
13:02 - back end will then send the appropriate
13:04 - request to the sanity api which will be
13:07 - hosting the database and giving us any
13:09 - data that we need and then returning
13:10 - that to the front end so you can kind of
13:12 - think of the back end as a proxy between
13:14 - our front end and the database
13:17 - all right so we have dot env client we
13:19 - could really start anywhere here i'll
13:21 - start at index.js and i'm just going to
13:24 - write kind of some boilerplate code to
13:25 - set up our express application so i'm
13:27 - going to say import express from
13:30 - express and then i'm going to say
13:32 - imports the body parser
13:35 - like this
13:37 - from and then this will be just body
13:39 - parser so actually i think
13:42 - it will be like this body hyphen parser
13:45 - now i don't know why did a space here
13:46 - okay we have our two imports
13:49 - then i'm going to say my const app is
13:51 - equal to express this makes my express
13:54 - application i'm going to say app.use and
13:57 - then bodyparser.json
13:59 - and then app.use and this will be body
14:02 - parser dot and then this is going to be
14:04 - url encoded and then inside of here we
14:06 - have to have to pass an object and we're
14:08 - going to say extended and then false
14:11 - now what we're doing here is essentially
14:13 - installing a few things that are going
14:15 - to allow us to actually look at and
14:17 - parse the data that's sent as the data
14:19 - in a post request or in a get request to
14:21 - our server now if you don't have a body
14:23 - parser like this you're not going to be
14:25 - able to actually receive say post data
14:28 - or just data in general json from a
14:30 - request what this will do is actually
14:32 - parse the data for us then return it to
14:34 - us in our request.body i know that might
14:36 - be a little bit confusing but really
14:38 - this just allows us to actually get
14:40 - request data uh from wherever the
14:42 - request is being sent from okay so
14:44 - that's what we're doing for
14:46 - this now we're just going to start the
14:48 - app so i'm going to say app.listen
14:50 - and then i'm going to put this on port
14:51 - 3001
14:53 - and then i'm going to have a function
14:54 - here and this is just going to say
14:56 - console
14:58 - dot log and then we'll just say started
15:00 - just so we know that the server actually
15:02 - ran successfully all right so that's all
15:04 - we need so far for index.js we'll start
15:06 - writing a few different routes like get
15:08 - get roots post routes whatever later on
15:11 - but for now this is kind of our starting
15:12 - code all right now one thing i need to
15:14 - do here is go to package.json and i just
15:17 - need to remove this test script and i
15:20 - want to add a start script here and what
15:23 - the start script is going to be is just
15:25 - node and then index.js
15:28 - okay so that's going to run the file for
15:30 - us and i need to add one other field
15:32 - here and this field is going to be type
15:35 - and then module now what this is going
15:38 - to allow us to do is actually have the
15:40 - import statements here so a lot of times
15:41 - you'll see something like express equals
15:44 - and then something like use or something
15:46 - like require sorry
15:47 - and then express now i don't want to do
15:49 - it that way i'd rather just have regular
15:51 - imports so i'm going to have
15:53 - a module type so i say type equals
15:55 - module and that allows me to have my
15:56 - regular inputs okay so that's what we
15:58 - need for package.json that's good for
16:00 - index.json api calls we don't need
16:02 - anything right now but for our client.js
16:06 - we are going to initialize the sanity
16:07 - client so i'm going to say import and
16:10 - then sanity client from and this is
16:12 - going to be at sanity
16:15 - client and then i'm going to import dot
16:18 - env from and then this is going to
16:20 - simply be dot env remember we installed
16:24 - all of these things
16:25 - okay now that we've done that we're
16:26 - going to say dot env dot config remember
16:29 - what this is going to allow us to do is
16:30 - actually read this dot env file so
16:33 - that's why i'm writing this
16:34 - and then i'm going to say export
16:36 - default and i'm going to create a sanity
16:38 - client so i'm going to say sandy client
16:40 - and i'm going to pass to it an object
16:43 - here that has all of the data that we
16:44 - need to kind of initialize the api
16:46 - connection to our sanity database so i'm
16:49 - going to say project id
16:51 - colon and then this will be something
16:53 - that i will tell you how to get in a
16:54 - second we're going to say data set
16:57 - you're going to make sure you put
16:58 - production here this is just the name of
17:00 - the default data set for a sandy project
17:02 - then we're going to say use cdn now i'm
17:05 - going to set this equal to false and
17:06 - i'll explain what this is in one second
17:08 - we're going to say api version and for
17:11 - the api version what we can actually do
17:12 - is just put today's date now when i'm
17:14 - recording this it is february 22nd and
17:17 - when you do that it's just going to give
17:18 - you the most recent version based on
17:20 - this date so just put the current date
17:22 - you also could just do something like
17:24 - new date but for now we'll just hard
17:26 - code in this string because i know that
17:27 - works then we're going to say token and
17:30 - this is going to be our api token which
17:32 - i'll show you how to get again in a
17:33 - second so what the cdn is going to do
17:35 - here if we enable this to be true is
17:37 - it's going to give us a much faster
17:39 - response from the database but it's
17:41 - going to give us a lot of stale data now
17:43 - the reason for this is going to cache
17:45 - all of our requests so if we send the
17:47 - same request twice it's going to say oh
17:49 - you sent this request before what was
17:51 - the response last time let me just give
17:52 - you the same response as opposed to
17:54 - hitting the database
17:55 - that's what the cdn does so we want to
17:57 - make this false for our application
18:00 - because we're doing a lot of changes
18:01 - that we want to see happen instantly so
18:03 - if we're caching all of our requests
18:05 - we're going to be getting a lot of stale
18:06 - data although that data will be returned
18:09 - to us returned to us very much faster so
18:11 - if you have cached data everything is a
18:13 - lot quicker but you're getting some
18:14 - stale data whereas if you don't cache it
18:16 - it's going to be slower but you're
18:18 - getting fresh data which is what we're
18:19 - going to prefer here so i'm going to
18:21 - turn the cdn off you can make it true
18:23 - and see what happens in your application
18:24 - obviously once we start building out
18:26 - something that's more functional so what
18:27 - we need to find now is the project id
18:30 - for our sanity application now the way
18:32 - we can find that is we can go to
18:33 - database we can go to sandy.json we can
18:36 - just copy the project id and notice here
18:39 - the name of the dataset is production so
18:40 - that's why i put that in the data set
18:42 - field here okay so for the project id
18:45 - i'm going to paste that in that's now
18:46 - going to link it to that project and
18:48 - then we need a token now to get the
18:50 - token we actually have to go to the
18:51 - sandy website so what i'm going to do is
18:53 - go here to sandy
18:54 - i'm going to log in
18:56 - and then i'm going to find my project
18:58 - now my project here you can see i've
19:00 - messed around with a bunch of them
19:01 - before this is insta clone tutorial i'm
19:04 - going to click on api here and then i'm
19:06 - going to go to tokens and i'm going to
19:09 - add an api token now for the name let's
19:11 - just go tutorial
19:13 - and we want to have
19:15 - editor access here so we have read and
19:17 - write access to all data sets but you
19:19 - could just give a viewer access right or
19:21 - the deploy studio token only access to
19:23 - deploy study studio and graphql apis to
19:26 - our hosted service anyways we want the
19:28 - editor so let's go with editor it's
19:30 - going to give us a token this is the
19:31 - only time we can copy it so i'm going to
19:32 - copy that token and i'm going to go now
19:35 - to my env file i'm going to make a
19:38 - variable here called sanity and we'll
19:40 - say api
19:41 - token in all capitals is equal to and
19:44 - then i'm going to paste the token inside
19:45 - of here now i have to check if we need a
19:47 - string or not in this file so bear with
19:50 - me i don't think we do actually yes we
19:52 - do need a string so let me make this
19:55 - stringified here by putting another
19:57 - quotation at the end
19:59 - all right so the point of this is that
20:00 - if we were to upload this project to
20:01 - github for example we would not upload
20:04 - this dot env file and that would mean if
20:06 - someone else wanted to use our
20:07 - application what they would have to do
20:09 - is make their own env file put their
20:12 - sanity api token inside of that file
20:14 - they'd have to change their project id
20:16 - then they'd be able to run this
20:17 - application with their own sandy project
20:19 - so we're putting in an env file because
20:20 - i don't want to hard code this directly
20:22 - into my js file and it's kind of good
20:25 - practice to store things as environment
20:27 - variables that are sensitive data now of
20:28 - course i'm showing you the api token
20:30 - here if any of you are crazy enough to
20:32 - type out the entire token then well you
20:34 - can have it although i'm going to delete
20:35 - it after this video is finished being
20:37 - filmed anyways okay so now that we have
20:39 - this env file what i want to do is
20:40 - access that variable from the env file
20:43 - so since i've used env what i can do
20:45 - here is type
20:46 - process
20:48 - and then this is going to be dot env dot
20:51 - and then this is going to be sanity
20:53 - underscore api
20:55 - underscore token okay i believe that is
20:57 - correct yes that looks good and that
21:00 - will access the variable right here from
21:02 - our environment variable file and allow
21:04 - us to use this sandy api token again
21:07 - without having to hard code it directly
21:09 - into the file okay so now we have set up
21:11 - our client.js we have set up our
21:13 - index.js let's now see if this actually
21:16 - works and then we'll move on to setting
21:17 - up the front so what i'm going to do
21:19 - here is just type npm start from inside
21:21 - of the api folder
21:23 - and let's see if it works notice we get
21:25 - the output of started which is what i
21:26 - wanted to see we're all good we can now
21:28 - quit this with ctrl c
21:30 - all right so we now have our api and we
21:32 - have our database set up the next thing
21:34 - that we need to set up is our react
21:35 - frontend
21:36 - so i'm going to go into the parent level
21:38 - or the top level directory here of my
21:40 - instagram clone and i'm going to run a
21:42 - few npm commands so i'm going to say npx
21:46 - create
21:47 - react app and i'm going to call this
21:50 - frontend this will give us kind of the
21:52 - boilerplate react app code so let's run
21:55 - that
21:56 - and let's see what we get here okay it's
21:58 - going to take us a second to run once
21:59 - this is done then i'll open up that
22:01 - folder and start showing the other stuff
22:02 - we need to do all right so we have now
22:04 - created the front end folder here that
22:07 - actually took a lot longer than i was
22:09 - expecting so what i'm going to do now is
22:10 - cd into front end and i'm going to
22:13 - install the other mpm packages that we
22:14 - need so i'm going to say npm install
22:17 - then this is going to be react
22:19 - router dom i'm also going to install
22:21 - react
22:23 - and then router
22:24 - and then bootstrap
22:26 - and the reason we need that assuming we
22:28 - spell bootstrap correctly is because
22:29 - we're going to install
22:31 - react bootstrap which is going to give
22:33 - us some pre-built components just
22:34 - allowing us to style things a little bit
22:35 - nicer so again react router dom react
22:38 - router bootstrap i spelled bootstrap
22:40 - wrong a second time
22:42 - and then react bootstrap okay so let's
22:44 - run that this will take a second once
22:45 - it's done i will be right back all right
22:47 - so we have now installed all of the
22:48 - packages that we need so i'm just going
22:50 - to go inside a front end and i'm going
22:52 - to start cleaning this up a little bit
22:53 - because we don't need all the files that
22:55 - are inside of src so src is where we're
22:57 - going to write our source code we don't
22:59 - really have to worry about anything else
23:00 - right now inside of here i'm just going
23:02 - to delete a few things that we don't
23:03 - need so i don't need app.test.js i don't
23:06 - need logo i don't need report web vitals
23:08 - and i don't need setup tests so let's
23:10 - delete all of those remove those through
23:12 - recycling bin let's now go to app.js and
23:16 - actually let's remove the import for
23:18 - logo.svg we don't need that for the
23:21 - source for this image in fact for all
23:23 - the stuff inside of here we can just
23:24 - delete this
23:26 - and we can just make it so we have a
23:27 - single div for app
23:29 - we can then go to index.js we can remove
23:32 - the report web vitals remove the import
23:34 - for that and now we are good now we just
23:38 - want to set up this src directory a
23:40 - little bit just so we're ready to start
23:41 - coding in a second so let's make a new
23:43 - folder here i want to call this
23:45 - components this is where we're going to
23:46 - put all our components i want to make
23:48 - another folder here
23:50 - called css
23:52 - and i just want to move my css file
23:53 - inside of here and that's where we'll
23:55 - put all of our custom css so both the
23:57 - css folders or file store are going to
23:59 - go in there and then we'll put app.js
24:02 - inside of components
24:04 - okay
24:05 - and index.js can stay outside of here
24:07 - but we now oh the import automatically
24:09 - changed for us okay that was nice didn't
24:11 - realize it did that i was going to say
24:12 - we have to change the import but doesn't
24:13 - look like we do so for this import here
24:15 - we will actually have to change this so
24:17 - i'm going to say dot slash css slash
24:19 - index.css because we're index and we're
24:22 - trying to get in the css folder and then
24:24 - for app.js here i need to change this
24:26 - import as well so it's going to be dot
24:28 - dot slash and then css slash app.css
24:32 - that is going to bring us to the parent
24:34 - level directory src then into css and
24:36 - then to app.css if that's wrong i'll fix
24:38 - it later but i think right now that is
24:40 - good
24:41 - okay now that we've done that
24:42 - let's go to our package.json and we just
24:44 - need to add one line here at the very
24:46 - bottom
24:47 - and this is proxy
24:49 - and then we're going to proxy localhost
24:52 - colon
24:52 - and then 3001. now we'll also do http
24:56 - before this
24:57 - the reason why we need this here is
24:59 - because we want to forward requests that
25:02 - we're sending from the front end to our
25:04 - back end which is going to run on port
25:05 - 3001 now i believe that our react app is
25:08 - going to run on port 3000 our back end
25:10 - runs on 3001 and then the sani studio
25:13 - will run on three three three three
25:15 - although we don't really care about that
25:17 - url for right now because again all
25:19 - that's hosted in the cloud that's just
25:20 - giving us kind of the nice visual of our
25:23 - sandy database okay so now we have most
25:26 - of the setup complete we have our front
25:28 - end we have our database we have our api
25:31 - so let's just run the front end and make
25:32 - sure that's working so i'm inside a
25:34 - front end so let's type npm start and
25:37 - let's see if this crashes or not or if
25:38 - it actually runs the application for us
25:41 - all right so it looks like everything is
25:42 - good here i'm looking through the
25:44 - terminal doesn't look like i have any
25:45 - errors and you can see that i'm at
25:47 - localhost colon 3000 and i can view my
25:50 - react application so that is good that
25:52 - is what i wanted to test out now ideally
25:54 - we're going to run this at the same time
25:55 - as our back end but for now we don't
25:57 - need to do that i just wanted to make
25:58 - sure that each individual step was
26:00 - working so now we have our front end we
26:02 - have our database and we have our api
26:04 - let's just quickly go to the sandy
26:05 - website for one second and i want to
26:07 - show you here if i go to overview what i
26:09 - can do is view for example the api cdn
26:12 - requests the regular api request the
26:14 - bandwidth the documents and for the free
26:16 - version this is what we're limited at
26:18 - right 100 000 requests 10 gigabytes of
26:20 - bandwidth you are not going to hit that
26:21 - especially because this is just a
26:23 - tutorial and then you can view things
26:25 - like members data sets access usage i
26:27 - won't go through all of it but i just
26:29 - wanted to mention that this does exist
26:30 - here
26:31 - and again because this is hosted on the
26:33 - cloud you can view all of this data and
26:34 - you are rate limited at a certain point
26:37 - because it's the free plan of course you
26:38 - can upgrade and get more limits or
26:40 - higher api requests and all that kind of
26:42 - stuff
26:43 - okay so now that we've done this i want
26:44 - to start setting up the backend database
26:47 - so specifically the schemas so i want to
26:49 - go into the schemas directory here and
26:51 - then into schemas.js and in fact i'm
26:54 - actually not going to do that i'm going
26:55 - to make a new file
26:56 - called user.js and another new file and
26:59 - this is going to be called post.js and
27:01 - inside each of these individual files
27:03 - i'm going to code out schemas for the
27:05 - database models for a user and for a
27:07 - post once i do that i'll add them to the
27:10 - schema folder then i'll show you how we
27:11 - actually build that schema by just
27:13 - running sanity start right and running
27:15 - that that studio alright so i've just
27:17 - taken a quick cut here and opened up a
27:19 - website containing a basic tutorial on
27:21 - how to create schemas in sandy i'll
27:23 - leave this in the description in case
27:25 - you guys want to have a look but let's
27:26 - quickly run through this right here just
27:28 - so we understand basically how to create
27:30 - a schema so we want to focus on this
27:32 - which is an individual schema or
27:34 - actually this which is an individual
27:36 - schema and what we do to create a schema
27:38 - is we have a title a name a type and
27:40 - then the fields that we want on each of
27:42 - these objects so the title is the
27:44 - display name this is what we're going to
27:46 - see when we're printing this out or when
27:48 - we're viewing it in the sandy studio the
27:51 - name is what's going to be used in the
27:52 - apis so make sure the name has lower
27:54 - case letters at least that's the
27:55 - convention then for the type we're only
27:57 - going to go with document for now but as
27:59 - it says you can have some more advanced
28:01 - types we're not going to look at any
28:02 - more advanced ones if you want to see
28:04 - how those work again reference this
28:05 - documentation we then have fields now
28:08 - the fields is going to be all the data
28:09 - we want to store for every object that
28:12 - is of this type and so now they just
28:14 - have one field which is a name so the
28:16 - title is name that's the display name
28:18 - the name which is used in the api is
28:20 - name and then the type is going to be
28:22 - string now of course you can have more
28:23 - advanced types like arrays references
28:25 - booleans i'm going to show you a bunch
28:27 - of those as we write out our user as
28:29 - well as our post okay so just want to
28:31 - quickly run through that now let's
28:32 - create the user schema so i'm going to
28:35 - write the schema in here and then we'll
28:37 - import it from schema.js i just make
28:40 - things a bit cleaner so i'm going to say
28:41 - export default
28:43 - for the title of this it is going to be
28:45 - user okay
28:47 - then we will have a comma let's spell
28:50 - user correctly
28:51 - for the name this will be user with a
28:53 - lowercase and then we want the type this
28:56 - is going to be a document
28:58 - okay and then for the fields this is
29:01 - going to be an array
29:03 - and inside of here we're going to have a
29:04 - bunch of fields so the first field is
29:07 - going to have a title of first name
29:10 - let's get the quotation marks correct
29:12 - here it's going to have a name
29:15 - of this is going to be first
29:18 - underscore name
29:19 - and then we're going to have the type of
29:22 - and then string okay that's all we need
29:24 - for that field for the next field we're
29:26 - going to have last name so we can
29:27 - actually just copy this and just change
29:29 - first to last so this will be
29:32 - last and this will be
29:35 - last
29:36 - all right next we want to have a
29:38 - username so we have first name last name
29:39 - username we're going to have a bunch of
29:41 - other things as well so we're going to
29:42 - say title this will be
29:45 - username
29:47 - the name
29:48 - will be
29:49 - username with a lowercase
29:53 - and then we want the type here to be
29:56 - again a string
29:58 - okay continuing we want to have a photo
30:01 - this is going to be like the profile
30:03 - photo of the user so we're going to say
30:05 - this is title
30:06 - and the title will be photo
30:10 - the name
30:11 - will be photo
30:13 - and then the type
30:16 - will be and this is going to be an image
30:19 - next we are going to put the vial so i'm
30:21 - going to say title this is bio i think
30:24 - we all know what a bio is little
30:25 - description for the user we're going to
30:27 - say the name is the bio
30:30 - and the type here is going to be
30:32 - you guessed it a string actually sorry
30:35 - not a string
30:36 - text because text can store longer piece
30:39 - of data than string since we can
30:41 - potentially have quite a bit of data for
30:42 - the bio we go with text so actually no
30:44 - you didn't guess it we're going with
30:45 - text okay all right so this next field
30:48 - here is going to be following now this
30:50 - is going to be all of the users that
30:51 - this user is following now you also
30:53 - could have say on a user a followers
30:56 - field and then that would contain all of
30:57 - the people that are following them
30:59 - however you only want to have one or the
31:00 - other so pick what you want you can have
31:02 - followers on on the user which contains
31:05 - all the people following them or you can
31:07 - have following which is the people that
31:08 - a user is following i think that makes
31:10 - sense to have what i'm going to put here
31:12 - which is the following field but just
31:14 - want to describe what this is so i'm
31:15 - going to say title this is going to be
31:17 - following
31:19 - the name
31:20 - is going to be following and then this
31:22 - needs to be an array right because we're
31:24 - going to be following multiple users so
31:26 - i'm going to say type
31:27 - array and then this is going to be of
31:30 - and inside of here i'm going to define
31:32 - the type that this array is going to
31:34 - store so i'm going to say type this is
31:36 - going to be a reference type now a
31:39 - reference is something that's going to
31:40 - reference another document so inside
31:41 - here we're going to reference the id of
31:43 - another user so i'm going to say 2
31:46 - because that's what we need for
31:47 - reference and then inside of here i'm
31:49 - going to say type
31:50 - and then user this essentially says okay
31:52 - we're having an array and then this is
31:54 - going to be of references and these
31:56 - references are going to be two users now
31:58 - one thing i can also do here is add
32:00 - what's known as a validation
32:02 - so i can say validation and i can say
32:05 - rule
32:06 - and i can write a function here and this
32:08 - rule can go to rule dot unique and what
32:11 - this will mean is that we need to have
32:13 - unique values inside of this array
32:16 - all right hopefully that makes sense but
32:18 - that is what we're doing for the
32:19 - following field again an array of
32:21 - references to a user and when we
32:23 - reference the user we're just going to
32:24 - need the id to that user and i'll show
32:26 - you how we make that later on all right
32:28 - the next thing that we want here
32:30 - actually where am i going to define this
32:32 - it looks like i'm going to define it
32:34 - right before this square bracket is
32:37 - going to be created at so i'm going to
32:39 - say
32:40 - for the title
32:42 - let's put this down
32:46 - let's have
32:47 - created at okay
32:49 - then we're going to have name
32:52 - this will be of completely messed this
32:54 - up
32:55 - created at
32:57 - and then the type for this
32:59 - is going to be date time
33:01 - all right so thank you autoformatter for
33:03 - fixing that for me we have title created
33:05 - at name creator. type datetime we just
33:07 - want to know when we created this user
33:09 - great so that's really all we need
33:11 - for this schema here for the user i'll
33:14 - slowly scroll through it so you guys can
33:15 - have a look at everything again all this
33:16 - code will be available from the
33:18 - description next we're going to do the
33:19 - schema for the post
33:22 - all right so for post we're going to say
33:24 - export
33:25 - default
33:26 - and then similarly to before we're going
33:28 - to say title
33:30 - this is going to be post
33:32 - we're going to say name
33:34 - this will be post we're going to say
33:36 - type this will be a document
33:40 - and then we are going to have our fields
33:43 - like this which will be an array and we
33:45 - will define the fields so on a post what
33:47 - do we need well we need a photo so we're
33:50 - going to have title
33:52 - photo
33:54 - name
33:55 - photo
33:57 - type
33:58 - and this is going to be an image
34:00 - okay moving on to the next field we're
34:02 - going to have a description for the post
34:04 - so we're going to say title
34:07 - description
34:08 - name description autocomplete is coming
34:11 - in clutch here and the type is going to
34:14 - be type text
34:15 - okay
34:16 - continuing we want the author of the
34:18 - post as well as when the post was
34:19 - created so i'm going to say title
34:22 - created at
34:25 - okay
34:25 - let's go name
34:27 - why did it do that
34:29 - oh name created at let's actually do
34:31 - created underscore at and then for the
34:34 - type this will be date time
34:37 - okay let's make these on new lines
34:38 - though autoformatter can you fix this
34:41 - for me nice
34:42 - and lastly we want the author now the
34:44 - author needs to be a reference type to
34:46 - the user that created this post
34:48 - so we're going to say title
34:50 - author
34:51 - excuse my bad typing here
34:54 - name author and then type is going to be
34:57 - a
34:59 - reference and it is going to reference
35:01 - two
35:02 - and we're gonna put
35:04 - type
35:05 - and then user inside of here
35:07 - all right so we've now created our two
35:08 - schemas we have our post schema as well
35:11 - as our user schema so let's now go to
35:13 - schema.js
35:14 - let's import these two schemas and we'll
35:16 - use them inside of here so what i will
35:18 - do here is simply say
35:21 - import user from and then dot slash
35:23 - user.js
35:25 - and then import and what's the other one
35:28 - that we wanted we wanted a post from and
35:30 - then dot slash post.js nice and then i
35:32 - put my types in here so i'm going to say
35:34 - user
35:35 - and post
35:37 - doesn't matter the order that you place
35:38 - it but now we're going to have these two
35:40 - schemas inside of our data set
35:42 - all right so we have now set up the
35:43 - database we've set up the front end we
35:45 - have set up the back end let's now rerun
35:48 - sanity studio and see if we can view
35:50 - these different uh database models that
35:52 - we've created so let's run a new
35:54 - terminal here
35:55 - okay a new command prompt and let's cd
35:58 - into the database and let's go sanity
36:01 - start
36:02 - and then let's have a look at the sandy
36:04 - studio and view these new models
36:06 - all right so it is now compiled so let's
36:08 - launch this in google chrome
36:11 - let's have a look here at the sandy
36:13 - studio it's logging me in and now notice
36:15 - we have user and post over here we can
36:17 - actually make a user in a post if we
36:19 - want right one of the great things about
36:20 - sandy studio is the fact that i can do
36:22 - this and maybe i give someone who is not
36:24 - very tech savvy in my organization
36:26 - access to this tool and then they can
36:28 - just come in here and they can make a
36:29 - new blog post they can make a new user
36:31 - they can make whatever it is that they
36:32 - want by looking at a graphical user
36:34 - interface right so my first name last
36:35 - name username photo bio following create
36:38 - it out i'm not going to fill this out
36:39 - but of course you can see how easy it is
36:41 - to actually do that
36:42 - okay so we don't need that open anymore
36:45 - let's actually close sandy studio and
36:48 - now what we'll move on to is actually
36:49 - writing some react code now i understand
36:51 - this video has been long so far with all
36:53 - the setup steps
36:54 - but that was anticipated at the
36:55 - beginning there's a lot that we have to
36:57 - do so let's now open up our front end
36:58 - and start writing some react code and
37:00 - first of all i want to make some new
37:02 - components so just kind of template out
37:04 - the components that we want and then
37:05 - we'll fill in those components one at a
37:07 - time so i'm going to say new file the
37:09 - first component that i want is going to
37:10 - be all
37:11 - posts
37:13 - okay
37:13 - not ks this is going to be dot
37:16 - js i also want a component that's going
37:19 - to seem a bit weird right now but this
37:20 - is going to be alert
37:22 - and then dismissable okay i don't know
37:25 - if i spelled that correctly i think i
37:28 - did okay that's fine this is going to be
37:30 - an alert that will show up on the screen
37:31 - you saw that during the demo but we'll
37:33 - need a component for that so let's just
37:34 - write that right now
37:36 - next we're going to say create post dot
37:39 - js that's going to be for well making a
37:41 - post we're then going to have edit
37:43 - profile this is going to be kind of a i
37:45 - think it's called a modal or like a
37:47 - pop-up that will show up on the screen
37:48 - that lets us edit a post as you saw in
37:50 - the demo and then we're going to go
37:52 - login.js
37:55 - then i'm going to make a new file this
37:57 - is going to be profile.js
37:59 - we're going to have another component
38:01 - this is going to be profile item.js
38:04 - now this is actually going to be what
38:05 - shows up in the search bar for each one
38:07 - of our profiles or each one of our users
38:10 - and then we're going to have search.js
38:13 - and we're going to have lastly
38:16 - sign up dot js
38:19 - all right so i think that is pretty good
38:21 - now for all of these components what i
38:22 - want to do is just write the kind of
38:24 - boilerplate function for them just so
38:26 - that i can import them and start setting
38:28 - up my routes for each of these different
38:30 - pages so inside of all posts i'm just
38:32 - going to say export
38:33 - like this default and then this will be
38:36 - a function
38:37 - all posts okay
38:40 - and then inside of here for now i'm just
38:42 - going to return a p tag and this p tag
38:45 - will just say
38:46 - if we do this correctly
38:48 - all posts just so we know what page
38:50 - we're on again this is just for the
38:51 - rooting so let's copy that and let's put
38:54 - this inside of all of these so for alert
38:56 - dismissible this will be
38:59 - alert dismissable
39:01 - okay and then here this is gonna need to
39:03 - be alert dismissable as well let's do a
39:05 - space though
39:06 - for create post you guessed it we're
39:08 - gonna say create
39:11 - and then post and then this is gonna be
39:13 - create post okay
39:15 - continuing we're going to have edit
39:17 - profile so let's make this one edit and
39:20 - then profile
39:21 - see how good the autocomplete here is
39:23 - edit profile
39:24 - we want login
39:27 - okay
39:28 - just trying to come up with words to say
39:30 - here as we go in and fill all these in
39:32 - next we're gonna have profile
39:35 - okay this will be
39:37 - profile we want profile item
39:42 - profile item and
39:45 - inside of here profile item with the
39:46 - space
39:48 - we want search we are almost done here
39:50 - last one coming up
39:52 - and the last one that we want here is
39:55 - going to be sign up
39:56 - okay so let's go
39:58 - sign up
39:59 - and then sign up okay apologize for that
40:02 - we just wanted to write all the basic
40:03 - functions so that now we're able able to
40:05 - see what page we're on when we start
40:06 - handling the routing we now close all of
40:08 - these we no longer need them we want to
40:10 - go inside of app.js and i want to start
40:13 - setting up my react router now my react
40:15 - router is what's going to allow us to
40:17 - route between different pages
40:19 - and that's why i wanted to create all
40:20 - this component so now i can import them
40:22 - and then route between them so let's
40:24 - just go up here and let's start by
40:26 - importing react and let's also import
40:29 - use state
40:30 - okay and we're going to do this from the
40:33 - react module okay
40:36 - then i'm going to import all of the
40:37 - components that i just created so i'm
40:39 - going to say import and then this is
40:41 - going to be all posts from and this is
40:44 - going to be dot slash
40:46 - and then allpost.js now if you're
40:48 - hearing something right now that is my
40:50 - cat running around my keyboard so i
40:51 - apologize for that
40:53 - continuing i'm going to say import
40:55 - and then we're going to import the alert
40:57 - dismissible
40:58 - from
40:59 - alert dismissible
41:02 - okay dot js
41:05 - then we're going to import create post
41:07 - from dot slash create post then i'm
41:11 - going to import edit profile from edit
41:15 - profile i actually don't think we need
41:17 - the dot js here so i think i can remove
41:18 - that then i'm going to import
41:21 - login from dot slash login
41:24 - i'm going to import
41:26 - profile
41:28 - from profile and actually i don't need
41:30 - edit profile sorry i just need profile i
41:32 - will import search
41:35 - okay from dot search and then lastly the
41:38 - sign up page
41:40 - import sign up
41:41 - from dot slash and then sign up okay
41:45 - all right so while we are at our imports
41:47 - here let's import what we need from
41:49 - react router dom as well so i'm going to
41:51 - say import and then this is going to be
41:53 - the browser
41:55 - and then router as well as a route as
41:59 - well as the routes
42:01 - as well as link from and then this is
42:03 - react and then hyphen
42:05 - router dom now if you haven't never used
42:07 - this before again this will allows us to
42:09 - route between the different pages and
42:11 - make it so if we go to say slash signup
42:13 - it actually brings us to the slash sign
42:15 - up page
42:16 - so for our div we can leave the class
42:19 - name actually yeah we'll leave the class
42:21 - name empty for right now and we'll worry
42:23 - about the css later and i'm going to
42:25 - start actually building out the html of
42:27 - the page
42:28 - so the first thing i need to do here is
42:29 - put browser router now anything inside
42:31 - of here will allow us to actually route
42:33 - between it okay so browser router is
42:36 - kind of where we're able to write
42:38 - routes as well as where we're able to
42:39 - have links and a nav bar and all this
42:41 - kind of stuff so that's why i'm writing
42:43 - this out
42:44 - then we're going to set up all of our
42:45 - different routes then i'll make a nav
42:47 - bar
42:48 - so inside of here i need to write this
42:50 - roots tag and then i need to end the
42:53 - roots tag and this is where you're
42:54 - allowed to define roots you can only do
42:56 - that inside of roots so make sure you
42:57 - don't try to make a root outside of it
42:59 - and then i will make my roots so i'm
43:01 - going to say root
43:02 - okay
43:04 - the element for this root is going to be
43:06 - equal to we're going to start with all
43:08 - posts
43:08 - now all posts i really could have called
43:11 - like your feed
43:12 - but that's fine we're going to render
43:13 - the all post component for this route
43:16 - the path to this is just going to be
43:18 - home so when you go to the home page
43:19 - it's going to bring you to your feed
43:21 - which will render all of the posts on
43:22 - the screen
43:24 - or it will show only the posts of the
43:25 - people that you're following uh
43:27 - depending on
43:28 - uh what is it if you're logged in or if
43:30 - you're not logged in so i put exact here
43:32 - now what exact does is just make it so
43:34 - the path has to match this exactly if
43:36 - you don't have that then i could go to
43:37 - slash and then anything else like slash
43:40 - hello slash world it would also match
43:43 - with this path just because it's only a
43:45 - single slash so that's why i have exact
43:47 - okay now continuing we're going to have
43:49 - another route i'm going to say root
43:51 - element equals it doesn't really matter
43:53 - the order that we do this so let's just
43:55 - do login i could render it that way but
43:57 - i want to render it just with a slash
43:59 - for the path for this we'll say this is
44:02 - slash login now we could do exact but it
44:05 - doesn't really matter to me here because
44:06 - if you type slash login and then slash
44:09 - something else um that's fine we used to
44:11 - bring you the login page um i think it's
44:13 - fine to just have login like this
44:15 - okay now continuing
44:17 - not router we want to root
44:20 - the element for this one might as well
44:21 - just do sign up so let's do
44:24 - sign up
44:25 - okay and then the path here is going to
44:28 - be equal to slash sign up uh and then
44:30 - we'll have slash nice okay continuing
44:33 - i'm gonna have root element
44:35 - equals and then the next one that we
44:37 - want is profile so i'm going to say
44:40 - profile like that and then this will be
44:43 - path is equal to profile
44:45 - okay we need another root uh where's my
44:47 - autocomplete here root element equals
44:50 - yeah we want search that's good for the
44:51 - path we'll go with slash search
44:54 - okay
44:55 - and there's any other ones that we need
44:57 - uh we need create post okay let's do
44:59 - create post we'll say root
45:02 - like that and i keep saying router i
45:04 - mean root
45:05 - sorry if you see router that's not what
45:06 - i meant to type i meant to type root
45:08 - okay and then element
45:11 - is equal to and then this is going to be
45:14 - uh what was this
45:16 - we need to create posts so let's have
45:18 - create post the path will be slash
45:20 - create dash post okay
45:23 - and then we can end and for sign up just
45:25 - because my ocd will kill me here let's
45:27 - go with sign and then hyphen up and i
45:30 - realized that i made a small mistake
45:31 - here guys let's just fix this to be root
45:33 - as opposed to router again i don't know
45:35 - why i kept typing that uh it's meant to
45:37 - be root not router and i'm sure i'm
45:39 - mispronouncing that and you guys are
45:40 - making fun of me but that is fine okay
45:42 - so now we have all the different routes
45:44 - that we need so we can go to login sign
45:46 - it profile search create post we'll need
45:49 - to make a few more specifically we need
45:51 - one for logout i'm also going to do
45:52 - something here for profile i will
45:54 - actually have a variable in the name and
45:56 - i go with
45:58 - username now what this means is that i'm
45:59 - going to type slash profile slash and
46:01 - then the name of the user that i want to
46:03 - go to and then this will be passed
46:04 - implicitly to the profile component so
46:07 - i'll be able to know uh what the
46:09 - parameter was essentially to get to this
46:10 - profile page okay so now that we've made
46:13 - those changes let's run our front end so
46:16 - let's go cd dot dot let's cd into the
46:18 - front end let's go npm and then start
46:21 - and we'll go to local host colon 3000
46:25 - and let's just see if we can go to some
46:26 - different routes here alright so i've
46:28 - just opened up my react application here
46:30 - notice i'm on the all post page which is
46:32 - what happens when we go to the default
46:33 - route now let's try sign up okay brings
46:37 - us to sign up let's try login
46:40 - okay brings us to log in let's try
46:43 - profile uh we'll go to profile slash tim
46:46 - actually because we need a variable okay
46:47 - brings us to profile i and i'm sure the
46:49 - other ones are going to work as well
46:50 - there we go we have now set up the react
46:52 - router all right so now that all of that
46:54 - is working i want to build out a nav bar
46:56 - so to do that i'm going to bring in a
46:57 - few things here from bootstrap that i
46:59 - need to use so i'm going to say import
47:01 - we're going to import the nav bar we're
47:03 - going to import the
47:06 - what else do we want here the container
47:09 - we're going to import the nav and we're
47:11 - going to import the button from and then
47:13 - this is going to be react bootstrap so
47:16 - react and then bootstrap like that okay
47:19 - let's start building the nav bar so
47:20 - we're going to use the navbar component
47:23 - okay inside of here i'm going to say
47:25 - collapse on and then this is going to be
47:27 - select
47:28 - and then i'm going to say expand
47:31 - is equal to medium now this says when am
47:34 - i going to start expanding the nav bar
47:36 - from a collapsed nav bar to a larger nav
47:38 - bar that's when the screen size is
47:40 - medium which is a certain pixel amount
47:42 - in bootstrap essentially when i have
47:44 - collapse on select what that allows me
47:46 - to do is make it so that i can collapse
47:48 - the nav bar when it's a smaller version
47:50 - of the navbar you'll see what i mean
47:51 - when i start messing with the screen but
47:53 - this nav bar will be dynamic so on
47:55 - mobile you'll have to actually click on
47:56 - the button to view all the different
47:58 - links then you can click on a button to
48:00 - collapse the nav bar and hide all of the
48:02 - links and it's saying when do i want to
48:04 - expand the bar while i want to expand it
48:06 - into a full size now bar once the screen
48:08 - size is medium okay now for the
48:10 - background i'm going to make this dark
48:12 - and all this stuff you can find from the
48:13 - bootstrap documentation so if i don't
48:15 - explain something then just reference it
48:17 - there and for the variant of the navbar
48:19 - i'm going to go with dark and that's all
48:21 - i need for the navbar definition here
48:24 - now inside of the nav bar i need to put
48:26 - a container so i'm going to say
48:28 - container this container is going to be
48:31 - fluid which means it takes up the entire
48:33 - top of the screen so inside of this
48:35 - container i'm going to put a few
48:36 - different things the first thing i'm
48:38 - going to put is kind of the branding now
48:39 - the branding would be the logo in this
48:41 - case i'm just going to put a name
48:43 - so the way i do this is i say link
48:45 - container
48:47 - i need to import this which i'm going to
48:48 - do now
48:49 - so i'm going to say
48:50 - import and then
48:53 - link container
48:55 - and this is going to be from and this
48:58 - will be react
49:00 - bootstrap or actually react router
49:02 - bootstrap sorry so i'll explain why we
49:05 - need this you need a link container when
49:08 - you are using bootstrap components with
49:10 - a react router seems a little bit weird
49:12 - but when i want to actually navigate
49:15 - between different pages i want to click
49:17 - on a button on the nav bar and usually i
49:19 - would use this link component to allow
49:21 - me to navigate to another page the issue
49:23 - is if i just use this standard link on
49:25 - the navbar it's going to be styled in a
49:27 - really weird way so instead i surround
49:29 - it with this link container and then
49:31 - that's going to make it so that i have
49:33 - the default styling of the navbar and
49:35 - that the styling of this link component
49:37 - doesn't override it hopefully that makes
49:39 - a bit of sense but that's why i needed
49:40 - to install react bootstrap or react
49:43 - route or bootstrap to get this link
49:45 - container component to allow my styling
49:47 - to stay consistent so i'm gonna say link
49:49 - container
49:50 - and i'm gonna say two this is gonna go
49:52 - to slash
49:53 - and then i'm gonna say
49:54 - navbar uh wait what the heck this needs
49:57 - to go inside of here sorry my
49:59 - autocomplete is doing some funky stuff
50:01 - i'm gonna say navbar.link
50:03 - okay and then inside of the link i'm
50:05 - gonna put
50:07 - instagram clone because that's the name
50:09 - of our app
50:10 - okay so that's the first thing that we
50:12 - need in this link container then what
50:14 - i'm going to do is say
50:16 - navbar dot and then toggle
50:19 - now this is going to be the toggler for
50:21 - the nav bar allowing me to expand it or
50:23 - unexpand it or collapse it right
50:25 - collapse on select
50:26 - and then i'm going to put all of the
50:28 - stuff that i want to be collapsible
50:30 - content so i'm going to say navbar
50:32 - dot
50:33 - collapse inside of here so all the stuff
50:36 - that goes inside of if this will be
50:38 - collapsible when i hit this little
50:40 - toggle button for the nav bar
50:42 - so now i want to add a nav so i'm going
50:44 - to say nav okay and then inside of here
50:47 - i'm going to put all of my links and
50:49 - link containers so i'm going to say
50:52 - link container and then this is going to
50:54 - be two
50:56 - and this will be slash
50:58 - okay so inside of this link container
51:00 - i'm going to say nav dot and then link
51:03 - and then we need to end this so nav
51:06 - dot link
51:08 - okay and then here this will be feed
51:11 - i mean i can go with home feed really
51:13 - whatever i want now let's copy this a
51:15 - few times the next thing that we want is
51:18 - search
51:19 - and the last thing that we want is just
51:20 - post now for the two links we got to
51:23 - change this this would be to search and
51:25 - this will be two create and then hyphen
51:27 - post all right so that wraps up most of
51:29 - the nav bar but i want to put something
51:31 - on the right hand side of the screen
51:33 - that allows me to log in to log out to
51:36 - view the profile of the current user and
51:38 - then to sign in if i'm not currently
51:40 - signed in so for now we'll just put a
51:41 - sign in button but then we'll make it so
51:43 - that once you're signed in it shows you
51:44 - the log out button and lets you view
51:46 - your profile so for now i'm just going
51:48 - to say
51:50 - [Music]
51:51 - navbar.text because i don't want this to
51:54 - be kind of a link like you see before i
51:56 - want this just be regular text and then
51:58 - inside of here i'm going to say link
52:00 - and then for the link this link is going
52:02 - to go to
52:03 - and then slash
52:05 - login and then i'm going to say
52:08 - not signed in okay so it's going to
52:10 - allow me to sign in when i click on this
52:11 - it will bring me to the login page so
52:14 - let's have a look at what i did
52:15 - understand i just wrote a ton of code at
52:16 - once to do that we can just refresh the
52:19 - page on slash
52:21 - home here and we should see that we get
52:23 - a navbar uh okay let me just
52:26 - go here and clear the cache
52:28 - and we're still not getting this um
52:31 - all right i'm not sure why we're not
52:32 - getting a navbar here
52:34 - let me have a look and i'll be right
52:35 - back
52:36 - all right so i was running this code and
52:38 - i was having trouble figuring out what
52:39 - the problem was because i wasn't seeing
52:41 - anything being rendered on my screen but
52:43 - then i looked in the console and i
52:45 - realized that i actually named this
52:46 - right here on line 21 link when it needs
52:49 - to be brand
52:51 - so my apologies but this needs to be
52:52 - navbar.brand and then everything else
52:54 - should be fine and now when we come back
52:56 - to the screen we should see that we get
52:58 - a nice navbar here we have feed search
53:00 - post not signed in i'm going to show you
53:02 - how we can move that to the right later
53:04 - on when i click between the different
53:05 - links it brings me to the different
53:07 - pages when i click on the brand here
53:09 - instagram clone it brings me to that
53:11 - page so i just want to jump in here for
53:13 - one second and mention that if when
53:15 - you're looking at the nav bar you're not
53:17 - getting a styled navbar and it looks
53:19 - really strange and kind of default
53:20 - styles what you can try doing is adding
53:23 - this line right here on line 4 to your
53:25 - index.js file so you're gonna have to
53:27 - just type this in dot dot slash node
53:29 - module slash slash bootstrap slash dist
53:33 - css bootstrap.min.css
53:35 - and that will actually import the css
53:37 - file just in case for some reason it's
53:39 - not being imported now this line errors
53:41 - out for you then what you can do is just
53:43 - manually install bootstrap it should
53:45 - already be installed but you can do npm
53:48 - install
53:49 - and then bootstrap
53:50 - like that and then you should be good to
53:52 - go and you should be able to actually
53:53 - run this line again i'm not sure why
53:55 - that would be a problem for you but i've
53:57 - had that in the past so again just
53:58 - import this line right here in your
54:00 - index.js file and it should fix that
54:03 - problem for you also make sure your
54:05 - index.js file is right inside of src and
54:07 - none inside of any other folder
54:09 - otherwise this relative import is going
54:11 - to be different all right so that is all
54:13 - we need for the nav bar and also you can
54:15 - see when i make this small enough
54:17 - it makes it collapsible
54:18 - so now i can open and close it so let's
54:20 - get the css working on the navbar just
54:22 - so that we have
54:24 - this moved over to the right hand side
54:26 - then we'll move on and code out some
54:28 - more stuff so to fix this and make that
54:30 - go over to the right hand side what i'm
54:32 - going to do is add another nav group
54:35 - here so i'm going to say nav i'm going
54:37 - to put my navbar.text inside of here and
54:40 - again all of this you can find from the
54:41 - bootstrap documentation i'm not going to
54:43 - explain how all of it works and what i
54:45 - can do is go to this first nav here i
54:47 - can say classname is equal to and then
54:50 - me.auto
54:52 - now what this will do is make it so that
54:54 - we're going to space these two nav
54:56 - components out and that other nav
54:58 - component is going to go to the right
54:58 - hand side so you can see now it's moved
55:00 - over to the right hand side and if i
55:02 - remove this class here so let's remove
55:04 - that
55:04 - and have a look notice that it kind of
55:06 - comes back over here to the left so me
55:08 - auto just makes it so we're going to
55:10 - take up the entire space that we have so
55:12 - this will take up as much space as
55:14 - possible and then essentially push this
55:15 - over to the right hand side if we want
55:17 - to have a look at that more specifically
55:18 - we can inspect here and when we look at
55:21 - we have our div navbar collapse we have
55:24 - another div notice it's taking up all of
55:26 - the space right this one that has the me
55:28 - auto on it it's pushing all the way the
55:29 - right hand side then since it takes up
55:31 - all the space it pushes this tag over
55:33 - here all the way to the right hand side
55:35 - of the navbar okay so that is the css
55:37 - that we needed for the navbar i think
55:40 - that is all good for right now
55:42 - now we can start looking at login and
55:44 - sign up and then sending some requests
55:46 - to our api for actually creating an
55:48 - account and then signing into an account
55:51 - so let's start by coding out the sign up
55:53 - page which is going to allow us to
55:54 - create a new account so inside of here
55:56 - i'm going to say import and we're going
55:58 - to import use state
56:01 - from and then this is react
56:04 - then i am going to import a form
56:07 - and a button from and then react
56:09 - bootstrap
56:11 - then continuing down here i want to set
56:12 - up some state for the different form
56:14 - entry points or form elements that i'm
56:16 - going to have so i want to ask the user
56:18 - for a first name a last name and a
56:20 - username so i need state to store all
56:22 - three of those pieces of information so
56:23 - i'm going to say const and we'll go with
56:25 - first name and then why is my
56:28 - autocomplete giving me such weird things
56:30 - maybe set first name is equal to use
56:33 - state
56:34 - and this will be a string and then i'm
56:37 - going to say const and then last name
56:40 - and then set last name is equal to use
56:42 - state and then const
56:45 - username set username is equal to use
56:47 - state all right we'll use that state in
56:49 - a minute then we want to write the
56:51 - actual html of the page so we're just
56:53 - going to set up a basic form so i'm
56:55 - going to say form
56:58 - form like that
57:00 - the class name for now will be empty but
57:02 - we are going to add some css to make
57:04 - this centered on the screen and i'll
57:05 - show you how we do that in a minute
57:07 - and then inside of here i'm going to say
57:08 - form dot group i'm going to do a bunch
57:11 - of these groups for each of the
57:12 - different elements that i have or inputs
57:14 - that i have now for the class name of
57:16 - these groups
57:18 - excuse me it's going to be mb4 which
57:20 - stands for margin bottom 4 which just
57:22 - means we're going to space out our
57:23 - different form groups so that we have a
57:25 - margin at the bottom and they're not
57:27 - kind of squished directly together
57:29 - then i'm going to create a label so i'm
57:30 - going to say form.label
57:32 - the first thing we'll ask for is the
57:34 - username and then we need a form dot
57:36 - control element which is equivalent to
57:38 - an input element okay
57:41 - form.control and then for this it's
57:43 - going to be type
57:44 - is equal to text
57:46 - and then the placeholder is going to be
57:49 - username and then the on input function
57:52 - we're going to call a function
57:54 - although let me fix the string here i
57:56 - will write that function in a minute now
57:57 - i also realize i don't need to end the
57:58 - tag like that i can just end it inside
58:00 - of here and i think that's going to be
58:02 - better okay so here we go we have our
58:04 - first input here again we have username
58:06 - that's going to be the label for this
58:08 - here and that's inside of a form group
58:10 - okay let's copy this two times because
58:12 - now we're going to have the same thing
58:13 - for first name and for last name
58:15 - remember we're not going to do a
58:16 - password here we're just going to allow
58:18 - them to create an account without any
58:20 - authentication and then sign in by just
58:21 - using the account name
58:23 - here let's change this to be first name
58:26 - and let's change this to be
58:28 - last name
58:29 - okay i think that is all good now we
58:31 - want to set up the different functions
58:33 - as well as the button to submit the form
58:35 - so outside of this form group here i'm
58:37 - going to make a button
58:39 - okay this button will be our submit
58:40 - button so the variant of the button is
58:43 - going to be primary this is going to
58:44 - make a nice blue button you also can use
58:46 - a variant like secondary you also have
58:49 - danger and warning i believe which will
58:50 - give you kind of a red and yellow color
58:53 - the type of this is going to be a button
58:55 - and then the on click is going to be a
58:58 - function again that we've yet to write
58:59 - and then inside of here we're just going
59:01 - to say create
59:02 - account for this button i'll show you
59:04 - what the page looks like in a second uh
59:06 - but that is pretty much what we have for
59:07 - the html of the page all right so now we
59:09 - can add the different functions which
59:10 - are going to update the state for our
59:12 - respective input fields and again
59:14 - form.control is just equivalent to an
59:16 - input field but it's going to give us a
59:17 - nice styled element so what i'm going to
59:19 - do is make some functions here i'm going
59:21 - to say function we'll go with update
59:23 - username this is going to take in e now
59:26 - e is going to give us what we actually
59:28 - typed into this input field so what
59:30 - we're going to do is say set user name
59:32 - and then this is going to be e
59:33 - dot target
59:35 - dot and then value and that will give us
59:37 - exactly what they typed into this form
59:39 - control element now we can copy this
59:41 - function and just change the name of it
59:43 - to be
59:44 - update and then first name and then
59:47 - rather than set user name this is going
59:48 - to be set
59:50 - first name then copy this one and we'll
59:52 - do the same thing here for last name so
59:55 - this will be update and then just change
59:57 - first here to be last and this to be
60:00 - last
60:02 - okay
60:02 - then i'm going to go inside of here and
60:04 - i'm just going to write the respective
60:05 - functions so this is going to be update
60:08 - and then username this is going to be
60:10 - update
60:12 - and then first name and this is going to
60:14 - be update
60:16 - and you guessed it last name and then we
60:17 - need an on click here for this button so
60:19 - let's just make a function uh and is for
60:22 - some reason it's not showing that i'm
60:23 - calling this function i probably just
60:25 - need to save the file okay that's fine
60:26 - for now yeah okay now it's good but i
60:29 - want to go to function here and say
60:31 - on
60:32 - create or actually let's just call this
60:34 - create
60:36 - account okay we'll take an e here as
60:38 - well for now we're not going to do
60:40 - anything but i'll just call it so we
60:41 - don't get an error in our jsx here which
60:44 - we're writing okay so create account
60:45 - save that should be all good now i'm
60:48 - just going to open up my react
60:49 - application of course i'm running the
60:51 - npm start command in my terminal that's
60:54 - why i'm able to view this right now and
60:55 - let's just go to not signed in okay it
60:57 - brings us to login i want to go to the
60:59 - sign up page actually so sign hyphen up
61:01 - and then notice that we get this nice
61:03 - form now i want to put this in the
61:04 - center of the screen again i'll show you
61:05 - how we do that in a second but for now
61:07 - we have username first name and last
61:09 - name and then the button to create an
61:10 - account excuse me so let's code out the
61:12 - logic to actually press this button and
61:14 - have it make an account for us and then
61:16 - once we do that we can style the
61:17 - elements
61:19 - all right so let's come inside of here
61:21 - and really what we need to do is just
61:23 - start coding out these different
61:24 - functions now the only function we
61:26 - actually need to write here is going to
61:27 - be create account and what we need to do
61:29 - is send a request to our backend which
61:32 - can create the account for us so before
61:34 - i can actually complete this i need to
61:36 - write the corresponding api endpoint in
61:39 - my back end so let's go to api here
61:42 - let's go to index.js and we're going to
61:44 - write our very first route here that's
61:46 - going to be able to create an account
61:47 - for us so what i'm going to do is write
61:50 - a post request here or write a post root
61:53 - i guess because when we're creating
61:54 - something we're going to do that with
61:55 - the post method so i'm going to say
61:57 - app.post and then for the url here this
62:00 - is going to be create and then user i
62:02 - could write this in a different way but
62:04 - i think that's fine for now and then we
62:05 - need to accept a request and a response
62:08 - object and then inside of here we're
62:10 - going to write the function that we want
62:12 - to occur whenever we hit this endpoint
62:14 - okay so the first thing i'm going to do
62:16 - is i'm going to get all of the data from
62:18 - the request body so i'm going to say
62:20 - const and we'll go with body is equal to
62:22 - request.body this is how we can get all
62:24 - of the data the json specifically that's
62:26 - sent to this post request now we're
62:28 - going to expect that we'll be sent a
62:30 - first name a last name and a username
62:32 - and then we'll send that information to
62:34 - actually a separate file to the api
62:36 - calls file where then we will call the
62:38 - sanity api to create a new user so again
62:40 - this is really just a proxy that's going
62:42 - to be calling the appropriate functions
62:44 - that will then make the api calls to our
62:46 - sanity api and database
62:48 - okay
62:49 - so i'm going to write a function that
62:50 - we've yet to define but it's called
62:52 - create user and we're going to pass to
62:54 - this body dot and then first name
62:57 - body.lastname and then body.username and
63:00 - then we're going to say dot then because
63:01 - this will be a promise we're going to
63:03 - take data and we're just going to say
63:05 - res.json
63:07 - and then data now what this does is
63:09 - simply return this data as a json as the
63:12 - response from this right here so
63:14 - hopefully that makes sense but that's
63:15 - all it's doing we're going to call this
63:17 - function it's going to return to us a
63:19 - promise once the promise resolves we're
63:21 - going to get some data from it so a
63:22 - result and then we're going to return
63:24 - that data so now that we've written this
63:25 - create user function let's go to the api
63:27 - calls file this is where we're going to
63:29 - interact with the database so i want to
63:31 - write all of the functions that are
63:32 - using my sanity client inside of here
63:35 - so the first thing i'm going to do is
63:36 - import the sanity client because this is
63:38 - how we're going to interact with the
63:39 - database right using the client that we
63:41 - set up from client.js and this is going
63:43 - to be from and then dot slash client.js
63:47 - then i'm going to say const
63:49 - functions
63:50 - is equal to and then this is going to be
63:52 - an empty object and the reason i'm doing
63:54 - this is because i'm going to put all of
63:56 - the things that i want to export from
63:57 - this file inside of functions and then
64:00 - just export this function's object
64:02 - so to show you what i mean i'm going to
64:04 - say functions
64:05 - dot create user this is going to be
64:07 - equal to an arrow function
64:10 - and this arrow function here is going to
64:11 - take in
64:12 - the first name
64:13 - the last name
64:15 - and the username
64:17 - then inside of here i'm going to use my
64:18 - sandy client uh yes i'm going to use it
64:21 - i'm going to say return
64:23 - sanity client dot create now dot create
64:26 - is how you create a new document you can
64:28 - create any type of document using this
64:30 - command and what you do is you pass an
64:32 - object of the document you want to make
64:34 - so in this type i in this case story i
64:35 - put the type so i'm going to say
64:37 - underscore type and this is going to be
64:39 - user the lowercase version so the name
64:41 - of our database model then we need to
64:43 - put in all of the fields that we want to
64:45 - complete
64:46 - so i'm going to say first name is first
64:48 - name
64:49 - last underscore name is lastname
64:52 - username is username and then created at
64:57 - is going to be new
64:59 - and date okay and that's actually all we
65:01 - need to create a new object in the
65:03 - database or a new document now this is
65:05 - going to be a promise so we're returning
65:07 - the promise which then we can resolve
65:09 - from inside of index.js so once this
65:12 - finishes right i call my dot then i get
65:14 - the data the data is just going to be
65:16 - the resulting object that we created so
65:19 - it's going to give us the json of that
65:21 - object in the database
65:22 - and then we'll return that here as the
65:24 - response from this route so hopefully
65:27 - that makes sense but just to mention
65:28 - here i'm not filling in all of the
65:30 - fields for this user and i don't have to
65:32 - do that and if i go to database and i
65:34 - look at my schemas and i look at user.js
65:37 - you'll notice here that i'm just using
65:39 - the name field that i have right so
65:40 - first name last name username then i
65:42 - didn't fill in photo bio or following
65:45 - and when i don't do that they'll just
65:46 - get the default value of this type so
65:49 - again empty array
65:50 - empty text and then an empty image which
65:52 - is fine we can fill that information in
65:54 - later on we actually edit a user's
65:56 - profile so that's it this is how we
65:58 - create a user now that we've done that
66:00 - let's actually call this from the front
66:02 - end because we've set up really all we
66:04 - need in the back end you're going to
66:05 - notice the back end will be fairly
66:06 - straightforward we just require it kind
66:08 - of for security here so again we're not
66:10 - exposing our sanity api token on the
66:13 - front end so inside of this create
66:15 - account function what i want to do is
66:16 - send a request and i want to send a
66:18 - request to our backend right so what i'm
66:21 - going to do is start by setting up my
66:23 - request options so i'm going to say
66:24 - const and then this is going to be
66:26 - request options
66:28 - and this is going to be equal to and
66:29 - then i need to make my method which is
66:32 - going to be post and then i need to add
66:34 - some headers here so for headers
66:37 - i'm going to say inside of here
66:39 - the content type
66:41 - okay
66:42 - is going to be
66:44 - and then this is going to be application
66:46 - json and this is content hyphen type my
66:49 - apologies that's all we actually need
66:51 - for the headers and then for the body
66:53 - this is going to be the data that we
66:54 - want to send so we're going to pass json
66:57 - dot and then this is going to be
66:59 - stringify
67:00 - okay and we're going to stringify this
67:03 - object here and this object is going to
67:05 - contain the first name as the first name
67:07 - key
67:08 - the last name as the last name key and
67:11 - then the username as the username key
67:14 - okay so that's what we need for our
67:15 - request options we're going to use this
67:17 - inside of our fetch request so now i'm
67:19 - going to say fetch and i'm going to say
67:21 - slash create
67:23 - and then
67:25 - user okay because this is the url that
67:28 - we want to hit and then we're going to
67:29 - pass our request options and for some
67:31 - reason oh i'm putting this inside of my
67:34 - request options oops let's put this down
67:35 - here okay that should be better so fetch
67:38 - create user request options and we're
67:40 - going to say dot then so whenever this
67:42 - response actually comes in we're going
67:44 - to get our response which will be
67:45 - underscore res
67:47 - and all we will do here is write a
67:50 - little arrow function
67:52 - and for the arrow function for right now
67:53 - i'm just going to print out the response
67:55 - so i'm going to say console.log
67:59 - and then underscore res and i'm actually
68:01 - going to do underscore res.json
68:04 - just so we can see what the response was
68:06 - and then we'll do a dot catch here and
68:08 - for the dot catch we'll catch an error
68:10 - and we will just console.error and then
68:13 - whatever that error is okay now we will
68:15 - do something else here in a second so we
68:17 - actually show an alert on the screen
68:18 - saying that you created the account and
68:20 - then we'll navigate you to the home page
68:23 - but i just want to look and see if this
68:24 - is actually working and for right now we
68:26 - can test that by just printing out some
68:27 - stuff to the console so my react app is
68:30 - open so let's go to the console here
68:32 - and let's try to create a new account
68:34 - so console for the username let's just
68:36 - go tim for the first name let's go tim
68:39 - for the last name let's go with my last
68:40 - name which is reseca and okay we got an
68:43 - issue here so it says promise pending
68:45 - rejected
68:46 - 500 internal server error okay so we're
68:49 - getting a few issues here the first
68:51 - problem that i'm realizing is that i
68:52 - forgot to run my backend api
68:54 - so what i'm going to do is open a new
68:57 - console here i'm actually going to split
68:59 - this terminal
69:00 - and inside of here okay let's make that
69:02 - a lot smaller let's go cd and let's cd
69:05 - to our api and then let's go npm start
69:08 - okay that should fix that problem
69:10 - obviously we need the back end running
69:11 - for us to be able to send a request to
69:13 - it
69:13 - and then let's come back here and let's
69:16 - try this again so i'm just going to
69:17 - press create account and okay again we
69:19 - get 500 internal server error so let's
69:22 - refresh this and try one more time tim
69:25 - tim
69:26 - ruseka create account okay still getting
69:28 - there so let me have a look at this and
69:29 - see what the issue is all right so i was
69:31 - just having a look at this error here
69:32 - and there's actually quite a few things
69:34 - that we did wrong so first let's go to
69:35 - the api calls function and let's export
69:39 - the functions which i forgot to do so
69:41 - export default functions okay which is
69:43 - this object right here then we're going
69:44 - to go to index.js and we're actually
69:46 - going to import this because i can't
69:48 - call this create user function when i
69:50 - haven't imported it as i'm sure many of
69:52 - you already noticed so i'm going to say
69:54 - import
69:55 - let's spell import correctly okay
69:58 - functions
70:00 - from and then this is going to be dot
70:02 - slash api calls and then make sure you
70:04 - add the dot js here okay
70:06 - now that we've done this we want to get
70:08 - the individual function object from this
70:10 - functions object or the individual
70:12 - function from the functions object so
70:13 - i'm going to say const and then i'm
70:15 - going to put inside of curly braces here
70:18 - create
70:19 - user
70:21 - is equal to
70:23 - and then functions like that now i
70:24 - forget the exact syntax name for what
70:26 - i'm doing here but i'm going to explain
70:28 - it as i'm breaking down this object into
70:30 - its individual components or individual
70:32 - fields and so i'm able to get the create
70:34 - user function from it by just doing this
70:36 - and if i add other functions later on i
70:38 - can just write them out in this way and
70:40 - yeah that's how we're going to actually
70:41 - get access to the function okay so now
70:43 - we have access to this function here
70:44 - also on my front end i'm going to go to
70:46 - sign up here and i'm sure many of you
70:48 - already realized this for our response
70:50 - what i'm going to do actually is i'm
70:52 - going to return
70:53 - underscore res.json because this is a
70:56 - promise to get the json and then i'm
70:58 - going to say dot then and also we can
71:00 - remove the underscore here and just have
71:02 - it res and then i'm going to say data
71:04 - and i'm going to say console.log
71:07 - and i'm going to log the data
71:09 - and what did i just do actually move
71:10 - pages okay i don't even know how i just
71:12 - did that let's go back into sign up okay
71:15 - let's save that and now we should be
71:17 - printing out the information that we
71:18 - need okay my apologies about that guys
71:20 - let me re-run the api so you are going
71:23 - to have to restart that and now if i
71:25 - come here and i refresh
71:27 - let's go tim
71:29 - tim
71:30 - tim mercica create account and let's see
71:32 - what we get and notice that we actually
71:34 - get this object and we have now created
71:36 - the account awesome so we have created
71:37 - that id
71:38 - rev type we have a bunch of other stuff
71:40 - we can look at all the fields we have
71:42 - username created at type updated out all
71:44 - this stuff now what i'm going to do here
71:46 - is go to sanity studio and just make
71:48 - sure that object was created so let's
71:50 - run one more terminal i don't want to
71:52 - split it again but i guess we'll have to
71:54 - and let's cd into database and let's go
71:57 - sanity start and now once this is
72:00 - compiled i can go to the studio again i
72:02 - can actually look at my uh my new entry
72:04 - in the database all right so it is now
72:06 - compiled so let's go to localhost uh and
72:10 - then i want to go to three three three
72:12 - three okay sandy studio let's wait for
72:15 - this to load and let's see if we've
72:17 - created this new user and we can view it
72:18 - inside of here so i'm gonna go to user
72:20 - and we should see now that we have users
72:22 - now the reason we had two is because i
72:24 - kind of messed up and i was messing
72:26 - around with this while i was trying to
72:27 - fix the error before anyways the point
72:29 - is we now have the users that we created
72:31 - and let's say we want to delete one of
72:32 - them because in this case we have
72:33 - duplicate what i can do is go here i can
72:36 - click on this little down arrow and i
72:37 - can click delete and i can just delete
72:40 - the user like that okay but we do have
72:41 - the user and this is great for debugging
72:43 - we can actually check to make sure
72:44 - everything was created and for this user
72:46 - here we have our first name last name
72:48 - and then username and then we can
72:50 - manually enter some other information if
72:52 - we want great okay so now that we've
72:54 - done that i want to put this in the
72:55 - middle of the screen and i want to start
72:56 - adding some alerts on the screen that
72:58 - tells us hey
72:59 - you created the account successfully
73:01 - because we need some feedback to our
73:03 - user right
73:04 - so let's move this down i'm just going
73:05 - to hide that for now we don't really
73:07 - need to rerun that and let's now put
73:09 - this in the middle of the screen so to
73:11 - do that i'm going to go into css i'm
73:13 - going to make a new file here and i'm
73:15 - going to call this
73:17 - dot signup.css
73:18 - then inside of sign up let's look at
73:20 - what classes we have so for the form i'm
73:23 - going to add a class name and this is
73:24 - going to be sign up
73:26 - and then form so now we'll use this
73:28 - class name inside of our css file but
73:30 - first let's import the css file inside
73:32 - of here so let's say import and then
73:35 - this is going to be dot dot slash and
73:37 - then css slash and then sign up dot css
73:42 - okay then we'll go to signup.css and
73:44 - we'll go dot sign up form and we'll
73:46 - write the custom css here to put it in
73:48 - the middle of the screen so i'm going to
73:50 - use flexbox to do this so i'm going to
73:52 - say display
73:53 - and then flex i'm going to say align
73:57 - items this is going to be center i'm
73:59 - going to say justify
74:02 - content
74:03 - this is going to be center sorry this
74:05 - needs to be a regular colon not a
74:07 - semicolon then we're going to say the
74:10 - flex
74:11 - direction
74:12 - is going to be column which means all of
74:14 - our items will be aligned vertically and
74:16 - then we're going to have height
74:18 - and this will be 100 just so we fill the
74:21 - entire screen okay we may we might have
74:23 - to add some more css as well to make
74:25 - this work up but for now that should do
74:27 - the job so let's open up our app and
74:29 - notice now we are in the middle of the
74:31 - screen awesome now the thing is i want
74:32 - this to actually be dead center in the
74:34 - middle of the screen not just aligned in
74:36 - the center uh horizontally so to get it
74:38 - to be dead center vertically i actually
74:41 - need to extend the size of the root
74:43 - element or the root div of my html so if
74:47 - i go here and look at the html so i go
74:49 - elements
74:50 - you can see that the body is only this
74:52 - high so if i want this to be in the
74:53 - middle of the screen what i need to do
74:55 - is make it so that this root div here
74:57 - takes up as much room as possible and
74:59 - then once that's happening this will
75:00 - automatically be pushed into the middle
75:02 - of the screen because of the elements or
75:05 - because of the css styling that i put
75:07 - here alright so to fix this problem i
75:09 - actually need to write a few pieces of
75:10 - css again just to make it so that the
75:13 - root div is going to extend the entire
75:15 - size of the screen and then all the
75:17 - other divs inside of that that's
75:19 - containing the main content of the page
75:21 - also extends the full size of the screen
75:22 - just so this goes in the middle so i
75:24 - understand this might be a little bit
75:25 - confusing but we're going to go to
75:26 - index.css so inside of index.css i'm
75:30 - just going to write some css here for
75:31 - the root so hashtag root which is the
75:34 - root div i'm just going to make the
75:35 - height 100 percent and then i'm going to
75:38 - make another class here and we'll use
75:40 - this in a second called fill parent and
75:42 - i mean this makes sense what it does but
75:44 - it's going to fill its entire parent and
75:45 - the way it's going to do this is by
75:47 - having a width of 100 percent so let's
75:50 - do that it's going to have a height of
75:52 - 100 percent and let's add a semicolon
75:55 - not a comma i keep messing that up and
75:57 - we're going to say the display here is
75:59 - flex
76:00 - okay and then the flex direction
76:03 - is going to be columns that everything
76:05 - we put in here is going to be aligned
76:07 - vertically because that's fill parent
76:09 - while we're here let's write another
76:10 - class that we're going to use later
76:11 - called center so i'm going to say dot
76:13 - center i'm going to say height this is
76:15 - going to be 100 and then percent we're
76:18 - going to say align items
76:20 - this is going to be
76:22 - center okay we're going to say display
76:26 - and then flex and then we're going to
76:28 - say flex direction
76:30 - and this will be column
76:32 - okay so we're using flexbox
76:34 - for all of this now i'm going to go to
76:37 - myapp.js and here we have an empty class
76:40 - name i'm going to put fill parent now
76:42 - what this is going to do is make it so
76:44 - all of the content inside of here will
76:45 - fill the parent so fill that root div so
76:48 - we should expand it and take up the
76:49 - entire screen we might have to add a
76:51 - little bit more css but i think that
76:52 - should be good for now so let's go here
76:55 - and let's just clear the cache and reset
76:57 - and okay we're not getting it in the
76:59 - middle of the screen so let me have a
77:01 - look here and see what the problem is
77:02 - all right so i've found the problem very
77:04 - simple fix here we just need to go to
77:06 - body and we need to go height and then
77:08 - it's going to be 100 vh which stands for
77:10 - 100 vertical height so just the entire
77:13 - width or sorry the entire height of the
77:15 - screen the viewport specifically uh so
77:18 - this will now make it so the body has
77:19 - the max height then the root will have
77:21 - the max height and then the div that we
77:23 - have will have the maximum height as
77:24 - well and so we should get this centered
77:26 - in the screen fingers crossed let's go
77:28 - here and notice that we now have this
77:30 - right in the middle of the screen which
77:31 - is what i wanted okay now i understand
77:33 - the css is probably not as good as it
77:35 - could be i'm not a css master again i'm
77:37 - not focusing too much on styling but now
77:39 - to get everything in the center of the
77:40 - screen should be pretty straightforward
77:42 - okay so let's try this one more time
77:44 - let's make an account here let's say
77:45 - joey let's go with joe and smith maybe
77:49 - joey123 create account let's go to
77:52 - console and notice it creates it so now
77:54 - what we want to do is we want to
77:55 - navigate to another page and then give
77:57 - some feedback to the user so we can
77:59 - start with kind of an alert for the user
78:01 - and to do that i'm going to go to this
78:03 - alert dismissible component and we're
78:05 - going to start coding this out and then
78:06 - we'll use this inside of our app
78:08 - component and we'll have kind of
78:10 - one simple way to trigger alerts from
78:13 - the main app component and i'll show you
78:15 - how we do that for now though what i
78:16 - want to do is import a few things so i'm
78:18 - going to go and say import and then this
78:21 - is going to be use state
78:23 - and this will be from and then react and
78:27 - then i'm going to import the alert
78:29 - component and this will be from react
78:31 - bootstrap so from react
78:34 - and then bootstrap like that
78:36 - okay now inside of here we need a piece
78:39 - of state so for the state we're going to
78:41 - say const and then this is going to be
78:43 - show set show and this just tells us if
78:46 - we're currently showing the alert
78:48 - because the alert will have a button
78:49 - that allows us to close it so by default
78:51 - this will be true but we could make it
78:52 - false we also want to accept three props
78:55 - here to this component i want to accept
78:57 - a message
78:58 - a variant and a delete alert function
79:02 - so when the alert is deleted we will
79:04 - call this function it's kind of a
79:05 - callback right the message is the
79:07 - message we want to show and then the
79:08 - variance is well the variance for the
79:10 - alerts that's very dynamic and we can
79:12 - show a bunch of different things so here
79:14 - i'm going to say
79:15 - if show
79:17 - then i will return something
79:20 - otherwise though then what i will do is
79:22 - just return no because we're not going
79:24 - to show anything if we're not showing
79:26 - the alert right so if we are showing
79:28 - something then i'm going to return an
79:29 - alert component so i'm going to say
79:31 - alert
79:32 - and then
79:33 - alert like that
79:35 - and yeah we can end it like that that's
79:36 - fine inside of here we're going to put
79:38 - the message for the alert
79:41 - and then for the variant
79:43 - this is going to be equal to
79:46 - the variant okay and then we want to
79:48 - have an on close and the on closes when
79:50 - we click that little button right and
79:52 - what we'll do here
79:53 - is we will have an arrow function
79:57 - and this error function will simply call
80:00 - delete alert but it's also going to call
80:02 - set show
80:04 - and it's going to make this false okay
80:06 - so let's put our curly braces here and
80:09 - then let me explain exactly what we're
80:10 - doing
80:12 - okay come on give me uh some
80:13 - autocomplete what's wrong with this i
80:15 - could not find matching tag oh i need a
80:17 - lowercase on the l okay and then i want
80:20 - to add something to the end here which
80:21 - is dismissible and this will just be
80:24 - true now when we put this in we don't
80:25 - have to manually say true but this makes
80:27 - it so we can dismiss the alert alright
80:29 - so that's actually all we need for this
80:30 - component so we have a piece of state
80:32 - telling us if we are showing the
80:33 - component or not so if we set this to
80:36 - false then we're not going to render the
80:38 - alert but if it's true then we will be
80:40 - rendering the alert right and then for
80:41 - the variance that's whatever variance
80:42 - they pass in there's a few different
80:44 - options like i think we have success
80:46 - warning
80:47 - we may have danger there's a bunch of
80:49 - them i'll go through them later on close
80:51 - means when we click the little
80:52 - dismissible button for the alert then
80:54 - what we're going to do is delete the
80:56 - alert so we're just calling this delete
80:57 - alert callback function and then we're
80:59 - going to call set show and what set show
81:01 - will do is make this false right it's
81:03 - just changing the state so then we'll no
81:05 - longer render the alert and then inside
81:07 - of the alert the message will show as
81:08 - whatever message they pass to this
81:10 - component okay so now that we have alert
81:11 - dismissible i want to go inside of my
81:13 - app component and i'm going to use some
81:15 - state inside of here for the alert so
81:17 - we'll make it so you can have one alert
81:19 - at a time so we're going to say
81:21 - const
81:22 - like this
81:24 - and then this is going to be alert and
81:26 - then set alert and this will be equal to
81:29 - use state and then inside of here this
81:31 - state is actually going to be no and
81:33 - we'll have an object that is stored
81:35 - inside of here that will give us the
81:36 - variance as well as the message for an
81:38 - alert and i'll show you how we trigger
81:40 - that so now what i want to do is
81:42 - dynamically render this alert underneath
81:44 - the nav bar if we do have one so i'm
81:46 - going to write some jsx here and i'm
81:47 - going to say alert
81:49 - question mark and then if we do have an
81:51 - alert then i'm going to say okay i want
81:53 - to
81:54 - render this alert dismissible component
81:57 - okay come on
81:59 - auto complete give it to me alert
82:01 - dismissable nice okay i want to render
82:02 - this component and what i need to pass
82:04 - to it is my alert so i'm going to say
82:06 - dot alert okay and then i want to pass a
82:10 - callback function for delete alert and
82:12 - what the delete alert callback is going
82:14 - to do it's just going to be an arrow
82:16 - function that is simply going to call
82:18 - set alert and it's going to set it
82:20 - equal to no okay i believe that's all we
82:23 - need so if we have an alert we're going
82:25 - to show this otherwise we just won't
82:27 - show anything
82:29 - so we'll have no okay hopefully that
82:30 - makes sense if alert does not know
82:32 - render this component dot dot alert is
82:35 - going to again decompose and kind of
82:36 - break down the alert object the alert
82:39 - object is going to have the variant as
82:40 - well as the message and then we will
82:42 - delete the alert and the delete alert
82:44 - function is just this which is going to
82:46 - set the alert here to be null so we'll
82:48 - no longer render this alert component
82:50 - okay so now how do we actually trigger
82:52 - an alert to be shown well i need to pass
82:55 - the setalert function here
82:57 - to the props of in this case the sign up
82:59 - page and then it can use that function
83:02 - to change the state in the app component
83:04 - which will then show the alert so if i
83:06 - go to sign up and i say
83:08 - set alert
83:09 - is equal to and then set alert like that
83:12 - then we're able to actually now call
83:14 - this function from inside of there so
83:15 - let's now go to sign up and let's see if
83:18 - we can use this so instead of signup in
83:20 - the props i'm going to take set alert
83:22 - okay and i keep typing in uppercase l it
83:25 - needs to be lowercase and then here when
83:27 - we get our data
83:29 - what we will do is we'll say
83:33 - set alert and the alert is going to have
83:36 - a
83:36 - variant of this will be success this is
83:39 - going to be a green alert and then the
83:41 - message is going to be account created
83:44 - so we'll say
83:46 - your account has been created thank you
83:48 - very much autocomplete and what is wrong
83:51 - here am i missing a bracket or something
83:53 - uh okay let's put that there
83:56 - um set alert
83:59 - oh i need to get rid of this semicolon
84:00 - sorry okay and i think that should fix
84:03 - it nice okay so now we are setting an
84:04 - alert once we get the data and just so
84:06 - this doesn't give us an error we'll do
84:07 - underscore data like that
84:10 - all right the next thing we need to do
84:11 - is navigate to the home page so to
84:13 - navigate to the home page i'm going to
84:15 - import a hook here so i'm going to say
84:17 - import and then this is going to be
84:20 - use navigate
84:22 - and this is from and this is going to be
84:24 - react router dom now this is only in
84:26 - react router version 6 and above so if
84:29 - you're using version 5 although i don't
84:30 - know why you would be then this is not
84:32 - going to work i would just make sure
84:33 - you're using version 6. okay then what
84:35 - i'm going to do here is say const
84:37 - navigate is equal to use navigate and
84:40 - what use navigate allows me to do is
84:42 - navigate between different pages and go
84:44 - to a specific root so now what we'll do
84:47 - is after we set the alert
84:49 - we'll say navigate and we'll just
84:51 - navigate to whatever page you want to go
84:53 - to which in this case is just going to
84:54 - be slash although i just need to add
84:56 - some curly braces here so we can have
84:58 - multiple statements being executed at
85:00 - the same time let's add a semicolon and
85:02 - now i believe we are good okay so we're
85:04 - going to set the alert we're going to
85:05 - navigate so now we can test this out by
85:07 - creating another account and see if it
85:08 - navigates us back to the home page so
85:11 - let's go here to react
85:13 - let's refresh
85:14 - let's just go test underscore account
85:18 - let's go test
85:19 - and then account and then create account
85:22 - and let's see okay your account has been
85:23 - created and then navigates us over to
85:25 - the other page and if i hit the x button
85:26 - it closes the alert awesome we now have
85:28 - a way to create alerts we now know how
85:30 - to navigate and now what i want to do is
85:32 - make it so this little banner here tells
85:34 - us if we're signed in or not because
85:36 - after i create a new account i should
85:37 - just automatically be signed into it so
85:40 - how am i going to do that well from my
85:42 - app component here i'm going to make a
85:44 - piece of state i'm going to say const
85:46 - this is going to be user and then i'm
85:48 - going to say
85:49 - set user and this is going to be equal
85:51 - to use state and this is just going to
85:53 - be a string now this is going to be the
85:55 - name of the user that's currently logged
85:57 - in and we're just going to store that in
85:58 - the app component this is not the best
86:00 - way and if you're doing real
86:01 - authentication you do this in a
86:03 - different way but for now we'll just
86:04 - store the user here in the app component
86:06 - as a piece of state and that way we know
86:08 - if we're signed in and then we can check
86:10 - and render something different here
86:13 - for this navbar text so if we are signed
86:15 - in so if we have a user then we're not
86:17 - going to render not signed in we're
86:18 - going to say you know signed in as
86:20 - whatever and then give kind of a link to
86:21 - go to that user's profile so in fact
86:24 - let's do that now so here what i'm going
86:26 - to write is user question mark checking
86:28 - if we're signed in or not and if we are
86:30 - signed in then i'm going to say
86:31 - navbar.txt
86:33 - okay and then for the text i'm gonna say
86:36 - signed
86:37 - in as and then we'll put a link and this
86:40 - link is going to go to
86:43 - so two equals and then this is gonna be
86:46 - slash profile
86:48 - slash but then we're going to add
86:50 - whatever the current user is because to
86:52 - get to the user's profile well it's
86:54 - profile plus and then the user name and
86:56 - then we will have inside of here the
86:58 - name of the user
87:00 - okay
87:01 - uh nice i think that's good for now and
87:04 - then we need to just have an option here
87:06 - where if they're not signed in then
87:07 - we're gonna show this so we're gonna
87:09 - copy that
87:11 - paste that here and now this is what we
87:12 - have so if we're signed in we show this
87:15 - otherwise we show this however if we're
87:17 - signed in we also want to show a button
87:19 - so the button will be inside of the
87:21 - navbar text as well so we'll say
87:24 - button
87:25 - okay
87:25 - the type is going to be button the
87:29 - variant is going to be
87:31 - primary
87:32 - okay and then we'll have an on click
87:36 - and what the on click is going to do is
87:38 - just going to set the user to be false
87:39 - so we're going to say this is an arrow
87:41 - function and this will be set user and
87:44 - we just set this to an empty string and
87:46 - then here the text on the button will be
87:48 - log out
87:49 - and i think that's all we need although
87:51 - we also want to make it so there is an
87:53 - alert that goes on the screen when we
87:55 - are signed up so we'll put our curly
87:58 - braces here and then we will set the
88:00 - user to be an empty string and after we
88:02 - set the user to be an empty string we're
88:03 - going to set an alert and we're going to
88:05 - say set alert we need to pass a variant
88:09 - the variant will be
88:10 - warning which will give us kind of a
88:12 - yellow one and then the message will say
88:15 - you are now signed out okay so
88:17 - you are now
88:19 - signed out exclamation point
88:22 - okay so we can test this out now again
88:24 - feel free to pause the video and copy
88:25 - this or reference the code from the link
88:27 - in the description but when i go here
88:29 - and i refresh the page
88:31 - and i go to sign in
88:33 - let's create an account sorry not signed
88:35 - in is bring me the login page i need to
88:37 - go to the sign up page so sign up page
88:39 - okay so let's make an account let's go
88:42 - with tim one two three four
88:44 - tim
88:46 - is great okay create account and then it
88:48 - says your account has been created
88:49 - brings us here and this is not changing
88:51 - okay i need to check why this is not
88:53 - changing because that should have
88:54 - changed so now we're actually seeing the
88:56 - user that's signed in ah well the reason
88:58 - that is not changing is because i forgot
88:59 - to manually change it from sign up i
89:01 - have not actually set the user which is
89:03 - what i need to do so what we're going to
89:05 - do is in sign up here we're going to
89:07 - take another prop called set user and
89:09 - then after we navigate or actually
89:11 - before we navigate we're going to say
89:13 - set user
89:14 - and we're going to set this equal to
89:15 - whatever the username was so i can look
89:18 - at the data and actually i'll remove the
89:20 - underscore now because we're going to
89:21 - use it and i'll just get data dot and
89:24 - then user name and that's what i'll set
89:26 - the user to because well that's the
89:27 - username that the user just signed up
89:29 - with
89:30 - now though i need to pass the prop to
89:32 - sign up
89:33 - so i'm going to go here to where i'm
89:34 - rendering sign up
89:36 - and i'm going to say set user is equal
89:39 - to set user okay so now this should work
89:42 - again my apologies about that error
89:44 - let's go and fix this okay so open this
89:46 - up let's just give it a refresh
89:49 - let's go to the sign up page
89:51 - okay sign up and we'll make an account
89:53 - tim one two three four five
89:56 - tim
89:57 - is great let's fix the capitalization
90:00 - okay create account
90:01 - and now notice that we get signed in as
90:03 - tim1234 and then we have the option to
90:06 - log out now i'll show you how we can add
90:07 - a little spacer between those we need to
90:09 - make it so we hit the log out button it
90:11 - signs out which is what it did okay i
90:12 - forgot that i actually already
90:13 - implemented that so that is all good
90:15 - that is working okay next we'll do the
90:17 - sign in page however let's just add that
90:19 - little spacer between the log out button
90:22 - just so that it looks a bit nicer so
90:24 - here we have signed in as what i'm going
90:26 - to do is just put some jsx and inside of
90:29 - the jsx i'm just going to put an empty
90:30 - string i'm going to put a little bar
90:32 - here now i know this looks a bit weird
90:34 - but it's going to be a bar and then an
90:35 - empty string so we just have kind of a
90:37 - little spacer as well as this pipe now i
90:40 - don't know if i actually even need the
90:41 - empty string but i think that should
90:42 - make it so it spaces out a little bit
90:43 - more
90:44 - but let's have a look at this now if we
90:46 - create a new account so again i have to
90:48 - make so many accounts it'll be nicer
90:49 - when we can just uh just sign in sorry
90:51 - not create post create user or what am i
90:54 - doing sign up okay let's go
90:58 - to not see sign up just regular sign up
91:01 - okay and let's go joe
91:03 - joey12345
91:06 - very creative
91:07 - joey smith don't really care about the
91:09 - spelling right now we're just trying to
91:10 - test this okay there we go now we have a
91:12 - little spacer between the logout button
91:13 - and between signed and as and when i
91:15 - click on this it brings me to this
91:16 - profile page okay now we log out and it
91:19 - signs us up
91:20 - nice now let's do the sign up page it's
91:22 - gonna be very similar or sorry let's do
91:24 - the login page can be very similar to
91:25 - the sign up page so let's close this
91:27 - let's close this let's go to login and
91:30 - let's start coding this out so similarly
91:33 - to the
91:35 - signup page i need to import use state
91:36 - so i'm going to import
91:38 - use state from
91:41 - and then this will be react and then i
91:43 - need to import a few things here from
91:45 - bootstrap specifically i need to import
91:48 - the form and the button so i'm going to
91:50 - say import form button from and then
91:52 - this will be react and then bootstrap
91:55 - okay so let's go
91:57 - bootstrap like that and i'm going to say
91:59 - import
92:00 - and then we will import
92:02 - use navigate
92:05 - as well as link
92:07 - and then this is going to be from react
92:11 - router and then hyphen dom
92:13 - okay nice
92:14 - now inside of here we can code out our
92:16 - state to start so i'm going to say const
92:18 - and then this is going to be
92:20 - username
92:22 - set username
92:24 - is equal to use state
92:26 - this will simply be a string and then
92:29 - we're going to say const
92:30 - navigate is equal to use navigate we're
92:33 - going to use this though when we sign in
92:34 - we can be redirected to the home page
92:36 - okay now that we have that let's write
92:38 - our login form this will be a little bit
92:40 - simpler than the other one because we
92:41 - only need a username attribute here or
92:44 - username input field so i'm going to say
92:45 - form form
92:47 - the classname is going to be equal to
92:49 - and this actually needs to be the exact
92:51 - same class that we had for sign up so
92:54 - that we go in the middle so really what
92:55 - i can do here is i can just take this
92:57 - class and i can paste this inside of
93:00 - index.css
93:01 - and rather than calling it sign up form
93:03 - i can just call this
93:05 - center form
93:06 - and now i can just use this inside of
93:08 - any of my form tags really i could use
93:10 - it for any div as well and it should
93:11 - just put it in the center of the screen
93:13 - so let's just make a change quickly here
93:15 - let's put this center form
93:17 - and then inside of sign up let's change
93:19 - it so that rather than using the class
93:21 - name of sign up form we're using center
93:23 - form because they're going to be the
93:24 - same and then we can no longer import
93:26 - sign up
93:27 - and i can remove the class from here
93:28 - because i don't need that anymore and if
93:30 - we add any more css in the future we put
93:32 - it in that file
93:34 - okay
93:34 - that should be good let's go to log in
93:36 - so we have our center form now we need
93:39 - our form dot group okay
93:41 - so let's add the group uh for the class
93:43 - name of this we're gonna say class name
93:46 - equals and then margin bottom and then
93:48 - this will be three
93:49 - i believe the other one we did four but
93:51 - let's just go with three let's change it
93:52 - up for this one
93:54 - we'll go form dot label and then we're
93:57 - going to say
93:58 - the label is
94:00 - username and then we want a form dot
94:03 - control which again is equivalent to the
94:05 - input tag
94:06 - okay
94:07 - for the form dot control we're going to
94:09 - say
94:10 - type
94:11 - is equal to text
94:13 - we're going to say the placeholder
94:17 - is equal to username we don't need a
94:19 - class name but we do need an on input so
94:22 - on input here will be equal to an arrow
94:24 - function we could write a custom
94:26 - function as well but this will just take
94:27 - in e and then we can say
94:30 - set username e dot target dot value now
94:33 - we could have done this before and sign
94:35 - up but we've already finished that so we
94:36 - don't need to change now we have type
94:38 - placeholder and then we have our on
94:39 - inputs now we'll get what you type in
94:42 - now that we have this i just want to add
94:43 - something that says
94:45 - how to get to the sign up page because
94:47 - right now we have to manually go to that
94:48 - link so here i'll do something like if
94:50 - you don't have an account then click on
94:52 - this to go to the sign up page right
94:53 - we've seen that before on on sign up
94:55 - forms so i'm going to say small this
94:57 - will just give us some smaller text and
94:59 - then the id actually we don't need an id
95:01 - but the class name of this will be equal
95:04 - to form text and then text muted this
95:07 - just makes it so it's a bit grayed out
95:09 - and it's not as strong as the standard
95:11 - text i'm going to say don't
95:13 - have an account question mark
95:16 - sign up and then we'll put a link inside
95:18 - of here
95:19 - okay and we'll say here
95:22 - now for the link i'm just going to say 2
95:24 - is equal to and then this is going to be
95:26 - sign up and i think that should be good
95:30 - for that
95:31 - okay now that we've done that let's add
95:32 - a button so the button is going to go
95:34 - outside of the form group so it gets
95:36 - spaced out a bit we're going to say
95:37 - variant
95:38 - is equal to primary you get a nice blue
95:40 - button for the type we will just say
95:43 - this is going to be a button and i'm
95:44 - going to say on click
95:46 - is equal to and then the on click
95:48 - function we'll need to write and we'll
95:50 - do that in a second and here i will say
95:52 - sign in or actually let's just go with
95:54 - login all right so now let's write the
95:56 - function for handling the login so i'm
95:58 - going to say function
96:00 - handle login okay inside of here we're
96:03 - going to have a fetch and we need to
96:05 - write that back in endpoint so for right
96:07 - now we can just say console.
96:11 - the username and then we'll finish this
96:13 - later but for the on click we can just
96:14 - write
96:15 - handle login and we do need to take an e
96:17 - even if we don't use it because it will
96:19 - pass e to that function implicitly all
96:22 - right so now we have the login page
96:23 - sorry not export this is e
96:26 - okay uh and what's the issue here is
96:28 - saying export is no okay no it's because
96:30 - it's still reading the previous one it
96:32 - hasn't seen that i changed this to e
96:34 - anyways now we have login so let's just
96:36 - go to the login page and see what it
96:38 - looks like okay so there we go we can
96:39 - see we get our nice login page i just
96:42 - have to refresh this so everything is
96:43 - working fine then if i click on sign up
96:45 - okay that is a bit weird to bring us to
96:47 - login
96:48 - sign up the reason for that is i need to
96:51 - add a slash here
96:52 - okay apologies about that let's refresh
96:55 - the page
96:56 - let's go back to login
96:58 - okay let's click this now and then it
97:00 - brings us to the sign up page now so we
97:02 - can click this to get to login okay
97:04 - awesome so now we actually want to log
97:06 - in which requires that we have an
97:07 - account so now we need to write the back
97:09 - end that actually will check if the
97:11 - account exists for the user we're trying
97:12 - to sign in as and essentially return to
97:14 - us the account data for that so let's go
97:17 - to our back end here so let's close a
97:19 - few of these files that we don't need
97:21 - let's go to index.js and now let's write
97:24 - to the root all right so here i'm going
97:26 - to write app.get because it's going to
97:28 - be a get request and this is going to be
97:30 - i guess get profile
97:32 - and we will say
97:34 - request and then response this will be
97:38 - an arrow function and then inside of
97:40 - here i'm going to accept a query
97:41 - parameter which is going to tell me the
97:43 - user that i want to get the profile for
97:45 - so i'm going to say const user is equal
97:48 - to request dot query which is the query
97:50 - parameters dot and then user and then
97:53 - i'm going to send a request here to get
97:56 - profile so i'm going to say get profile
97:59 - user
98:00 - dot then and then this is going to be
98:03 - inside of here data
98:05 - and we're going to say res.json
98:08 - and we're going to return that data okay
98:10 - so now we need to write this gap profile
98:12 - function from api calls so first of all
98:14 - let's just import it so we don't get the
98:16 - error we got before and let's go to api
98:18 - calls and now write get profile so here
98:20 - i'm going to say functions dot and then
98:23 - this is going to be get profile this is
98:26 - going to be an arrow function this arrow
98:27 - function is going to take in the user
98:29 - and then what we're going to do is say
98:32 - return
98:33 - sanity client and then not get this is
98:35 - going to be dot fetch and what dot fetch
98:38 - actually accepts inside of here is a
98:40 - string which is going to be the query
98:43 - that we want uh to get okay so the query
98:46 - language that we're going to use inside
98:47 - of here is something called grok groq
98:50 - now that is graph relational object
98:52 - queries and i'm just going to write them
98:54 - out here i'll leave some documentation
98:56 - in the description that explains exactly
98:57 - how to write them but it would be a very
98:59 - very long video if i went through
99:01 - explaining every aspect of the query
99:03 - language so you'll start to understand
99:04 - once i give you an example i would just
99:06 - bear with me here because it will look a
99:07 - little bit confusing right now so we're
99:08 - going to put an asterisk we're going to
99:10 - put our square brackets here and the
99:12 - first thing we're going to do is to find
99:13 - the type of the document that we want to
99:14 - query from the database so in this case
99:16 - the type that i want is a user and i
99:18 - just need to single quote this just so
99:20 - that my quotes don't get all messed up
99:22 - here okay so we have our single quotes
99:24 - we have our type which is equal to a
99:25 - user inside of double quotes i'm going
99:27 - to say and and and then
99:29 - username is equal to and then this is
99:32 - going to be
99:34 - the dollar sign
99:36 - and then username because this will be a
99:38 - variable that i input in a second in
99:39 - fact i can just do
99:41 - user like that so what i've just written
99:43 - here is essentially the condition for
99:45 - this query so i'm saying okay i want to
99:47 - get all documents that are of type user
99:49 - and have a username that's equal to the
99:51 - username that i pass right here so
99:53 - that's just going to give me a single
99:55 - document at least that's what i hope for
99:57 - and then what i do after this is i
99:58 - define all of the fields on this
100:00 - document that i'd like to receive
100:02 - so i actually need to put this inside of
100:04 - back ticks just so that we can have this
100:06 - string extend onto multiple lines
100:08 - and inside of here what i'm going to
100:10 - write is all the fields that i want so
100:11 - i'm going to write dot dot dot now what
100:13 - this does is it's going to give me every
100:16 - single field that's that's what dot dot
100:18 - does okay then i can write then what i
100:20 - can do is write my own custom fields in
100:22 - here and kind of modify the fields to
100:25 - get some certain attributes that i'm
100:26 - looking for so a field that i want is
100:29 - following
100:30 - i want to know how many users this
100:32 - person is following so i actually don't
100:33 - care about the following list i don't
100:35 - want to know the individual users i just
100:37 - want to know the count of how many
100:39 - people this person's following because
100:40 - we're going to use this for a few other
100:42 - things as well not just for getting the
100:44 - the username of the user or checking if
100:46 - the user exists right so i'm going to
100:47 - use the account function
100:49 - and i'm going to count how many elements
100:51 - are in the following array of the user's
100:54 - following field okay that's what count
100:56 - is doing just tells us how many are
100:57 - there and then it's going to put it into
100:59 - a field called following so this will
101:00 - essentially override the current
101:02 - following field and give us just the
101:04 - number of people the user's following
101:06 - then i'm going to say followers and this
101:08 - is a bit more difficult
101:10 - what i need to do for this is another
101:12 - query
101:13 - and i'm going to say type is equal to
101:15 - and then this is going to be user
101:17 - and i'm going to say and and
101:19 - references
101:21 - and then i'm going to use the i believe
101:22 - it's called a hat operator or the carrot
101:25 - someone can correct me in the comments
101:26 - on exactly what this symbol is and then
101:28 - dot underscore id
101:30 - now what this references here uh or what
101:33 - this story it's weird because it says
101:35 - references but what this refers to is
101:37 - the id of whatever this user is okay so
101:40 - whatever user i get here from this query
101:42 - or whatever users i get from this query
101:44 - this is referencing that user and so
101:47 - what i'm saying i want to get all the
101:48 - fields i want to get the following and
101:49 - then i want to get followers for the
101:51 - followers i need to find a user
101:54 - that references the current user that
101:56 - i'm on and then add that to a list here
101:59 - again i know this is a little bit weird
102:01 - but that's kind of what this query is
102:02 - doing it's going to give me a list of
102:04 - all of the users that reference the
102:06 - current user that i'm receiving and so
102:08 - that will tell me all of the people that
102:09 - are following this user okay hopefully
102:12 - that is clear and then next i'm going to
102:13 - say photo and since the photo gives us a
102:16 - few different attributes i need to say
102:18 - photo
102:19 - asset
102:20 - arrow
102:21 - like this
102:22 - and then i'm going to break this into an
102:24 - underscore id
102:26 - and a url so a photo insanity is kind of
102:29 - a nested object it gives us an asset it
102:32 - also gives us a few other things as well
102:34 - and this asset what i need to do is kind
102:36 - of break it down into an id into a url
102:39 - so i'm saying okay for the photo the
102:41 - aspect of the photo that i want to get
102:43 - is the asset and then from the asset i
102:45 - want to get the id and i want to get the
102:47 - url and so i have to write that in this
102:49 - way okay that's just how you get the id
102:52 - and the url of the asset of the photo
102:54 - the url is what we use to actually
102:56 - render the photo and it will be hosted
102:57 - by sanity we don't need to download the
102:59 - photo or anything like that
103:01 - okay so that is this first query again i
103:03 - know it's a bit confusing please
103:04 - reference the documentation if you want
103:06 - more explanation but hopefully you can
103:07 - at least understand the basics of what's
103:09 - going on here and i think i can put this
103:11 - on another line it'll make it a little
103:12 - bit easier to read let's just indent all
103:15 - of this
103:16 - by one all right so now that we have
103:17 - this we should actually just be able to
103:19 - use the back end endpoint that we wrote
103:21 - and it should return to us information
103:22 - about the user that we passed here to
103:24 - get the profile from again we're going
103:25 - to use this in multiple places that's
103:27 - why i wrote all of these other aspects
103:29 - of the query if we just wanted to see if
103:30 - a user existed then we really could just
103:33 - have dot dot dot in here and that would
103:34 - just return all of the fields related to
103:36 - the user so index we wrote this as get
103:39 - profile and we're accepting a query
103:40 - parameter so when i go to login now
103:43 - inside of here i'm going to send a fetch
103:45 - request that's going to contain a query
103:47 - parameter so what we'll do is say
103:50 - fetch and then fetch is going to be
103:53 - slash get profile okay and then we're
103:56 - going to say question mark user is equal
103:58 - to and then i can do a concatenation if
104:01 - i want i'll just say plus and then this
104:03 - is going to be
104:05 - username right here okay so whatever
104:07 - they entered into the field
104:08 - then i'm going to say dot then i'm going
104:11 - to get my response i'm going to return
104:14 - myresponse.json then i'm going to say
104:16 - dot then
104:18 - and i'm going to say data
104:20 - and i'm going to look at the data and do
104:22 - something inside of here
104:23 - so for the data what i need to check is
104:26 - if the length of the data is greater
104:27 - than zero now what that means that i
104:29 - actually do have a user because i'm
104:31 - going to be returned a list from sanity
104:34 - of all of the things that match that
104:35 - query so if i go back here this will
104:37 - give me a list of everything that has a
104:39 - username that matches with this so
104:41 - theoretically if i had multiple users
104:43 - with the same username which we're not
104:45 - going to allow but if we did have that i
104:46 - would get all of the users that had that
104:48 - username right because it's giving me a
104:50 - list of all the results so even though
104:52 - this will only give me one result sanity
104:54 - doesn't know that so by default it
104:55 - returns to me a list or an array and so
104:57 - what i have to do is look in that list
104:59 - and see if we have at least one element
105:01 - if we do that means the user exists if
105:03 - we don't that means the user does not
105:05 - exist and then we have to grab the first
105:06 - element out of this array and use that
105:09 - to access the different fields so i'm
105:11 - going to say if the data
105:14 - dot length is greater than zero we need
105:16 - to put this inside of parentheses here
105:19 - then what we can do is say add
105:22 - alert okay we're going to have to take
105:23 - add alert in here so let's say add
105:26 - alert we also want to take in set user
105:29 - so we'll pass that from app in one
105:31 - second but the alert that we want to add
105:33 - is going to have a variant
105:35 - of success
105:37 - okay
105:38 - and it's going to have a
105:40 - message of
105:42 - success fully
105:45 - logged in exclamation point okay so
105:48 - that's what we need for the add alert
105:49 - then we're gonna say set user we're
105:52 - gonna set this sorry let's go to set
105:54 - user to be the data
105:57 - zero
105:59 - dot username and we know we can do this
106:00 - because we'll have at least one element
106:02 - in our data right so data.zero
106:05 - data zero sorry.username and then we are
106:08 - going to navigate to the homepage okay
106:10 - so we're just gonna navigate to
106:12 - slash
106:13 - all right now otherwise
106:16 - what we will do is just set an alert
106:17 - saying that there's no user with that
106:19 - name so we're gonna say add alert
106:22 - okay this is gonna have a variant which
106:25 - is equal to and this will be danger
106:28 - which is going to be red apparently i
106:30 - can't type very well today and then
106:31 - we're going to have a message that says
106:35 - no user
106:37 - with that name
106:39 - exists okay let's fix our capitalization
106:42 - all right we'll do an exclamation point
106:44 - as well okay so that's what we have for
106:46 - handle login and then we'll just have a
106:48 - cache here just in case something goes
106:50 - wrong
106:51 - and we'll have an error and we'll just
106:53 - display that error as an alert so i'm
106:55 - just going to say add
106:56 - alert okay variance danger message will
106:59 - be air and then error.message nice
107:02 - okay so i think that's all we need for
107:05 - the login let's see if this works now
107:08 - and if it actually logs us in and brings
107:09 - us back to the home page so let's go
107:11 - here
107:12 - let's refresh we actually need to rerun
107:14 - our api because we've now changed one of
107:16 - the uh what do you call one of the
107:18 - functions in there so let's end that
107:20 - let's rerun npm start
107:22 - okay it looks like that's working
107:23 - successfully
107:25 - all right so let's attempt this from our
107:26 - front end let's give a refresh let's
107:28 - type in tim and log in
107:31 - and it doesn't seem to be working we're
107:33 - not actually getting anything here and
107:34 - okay so we're getting a crash from our
107:36 - back end and let me go and have a read
107:39 - here and see what it's saying
107:41 - okay param username reference but not
107:44 - provided okay so this is from our sandy
107:46 - client so let's go to our api calls and
107:48 - what i need to do is just fix this so
107:50 - that user is going to go inside of
107:54 - a squiggly bracket sorry kind of forgot
107:56 - that i need to do that since we can pass
107:57 - multiple parameters i need to be inside
107:59 - of a javascript object and so i can just
108:01 - write user like that and i think that
108:02 - will fix the problem for us so let's try
108:04 - this now let's re-run the api so yes you
108:07 - want to end that let's rerun
108:10 - okay and now let's come here
108:13 - let's refresh and let's go tim let's hit
108:16 - login and okay again we got another
108:20 - error so what's the error this time is
108:23 - it saying the same thing uh param
108:25 - username reference but not provided okay
108:28 - so the issue here is that user does not
108:30 - match with username so what i can do is
108:33 - make this username colon and now
108:36 - hopefully that should fix the problem so
108:38 - let's rerun this again
108:40 - my apologies guys whenever you're
108:41 - working on a large project you are going
108:42 - to get tons of errors i like to keep
108:44 - them in just to be real with you that uh
108:46 - not everything is perfect anyways let's
108:48 - restart this so let's refresh
108:50 - let's go here with tim
108:52 - let's hit log in
108:54 - and we got ad alert is not a function
108:56 - okay nice so we can fix that problem now
108:57 - but that means that the sanity uh what
109:00 - is it query that we had didn't fail so
109:02 - at least we're getting an error on the
109:03 - front end here not on the back end we're
109:05 - not seeing anything inside of our
109:06 - index.js or inside of our backend so
109:09 - let's go to login or actually let's go
109:10 - to app and the fix to this is we need to
109:13 - pass
109:14 - our set alert and set user to the login
109:18 - component so if we paste that in here
109:20 - that now should fix the problem because
109:21 - remember in our what is it what do you
109:24 - call these again props we have ad alert
109:26 - and set user but we weren't passing them
109:27 - so of course those were not defined we
109:29 - were getting a problem so let's try this
109:31 - now
109:32 - let's refresh
109:33 - let's go tim let's go login
109:36 - and uncaught at alert is not a function
109:39 - all right so looks like the error is
109:41 - that i have add alert as opposed to set
109:44 - alert my apologies here this needs to be
109:46 - set alert not add alert so let's change
109:49 - all of these to be set
109:51 - and now that should fix the problem
109:53 - again my apologies let's refresh let's
109:56 - go tim
109:57 - let's go log in and there we go
109:59 - successfully logged in signed in as tim
110:02 - nice okay let's log out let's go to sign
110:05 - in let's close that let's try to sign in
110:06 - as an account that doesn't exist like h
110:08 - and then no user with that name exists
110:10 - nice okay so that's working let's go
110:12 - with tim
110:13 - log in and then it signs us in all right
110:15 - so we now have signing in signing out
110:17 - and signing up completed the next thing
110:20 - that i guess we can work on is searching
110:22 - for users then we can start looking at
110:24 - the profile creating posts in fact
110:26 - before we do that let's actually deal
110:28 - with creating posts and uploading files
110:30 - and then once that's done we can kind of
110:32 - move on to some other features doesn't
110:33 - really matter the order that we go in at
110:35 - this point so to create a post we
110:36 - obviously need the html for that page as
110:38 - well as that component so let's start
110:40 - with that we're going to go to create
110:42 - post and we're going to import a few
110:44 - things
110:45 - so i'm going to say import
110:47 - and let's import if we can type here use
110:51 - state
110:53 - and use effect this will be from
110:56 - and then
110:58 - react
110:59 - and then continuing we're going to
111:00 - import just like before in the other
111:02 - pages a button
111:04 - as well as a form
111:06 - from and then this will be react
111:08 - bootstrap and i'm also going to import
111:10 - use navigate so i'm going to say import
111:13 - use navigate
111:15 - from
111:16 - and then this will be
111:18 - react router and then done
111:22 - okay now that we have that let's set up
111:24 - the state that we're going to need so
111:26 - when we create a post we're gonna have a
111:27 - caption for that post as well as a file
111:30 - uh the file will be an image right so
111:32 - we're gonna say const this will be
111:34 - caption is going to be set caption this
111:37 - will be equal to use state
111:41 - and then that's a string then we're
111:43 - going to have const and this will be
111:45 - file and then we'll have sev file really
111:47 - this will just be the image but for now
111:49 - we can call it file and this will be use
111:50 - state we'll just go with an empty string
111:52 - because we're going to store the path to
111:53 - the file and then we're going to have
111:56 - const
111:57 - navigate if we spell it correctly is
112:01 - equal to use navigate okay now i'm going
112:03 - to add a use effect here which is going
112:05 - to run as soon as the component is
112:07 - rendered and what this function is going
112:08 - to do is just make sure that we're
112:10 - currently signed in so i'm going to ask
112:12 - that we're passed here a user as well as
112:15 - the add alert function and it's not
112:17 - going to be ad alert it's going to be
112:19 - set alert i don't want to make that
112:20 - mistake twice and the user we're going
112:22 - to check here and see if we have a user
112:25 - so if we don't have a user if it's an
112:26 - empty string that means we're not signed
112:28 - in and well we can't make a post if
112:29 - we're not signed in so i'm going to add
112:31 - an alert to the screen or set the alert
112:33 - saying hey you can't do this because
112:35 - you're not signed in and then we'll
112:36 - bring you over to the login page so i'm
112:38 - going to say if
112:40 - not
112:41 - user
112:42 - then we will set
112:45 - an alert and for the alerts we're going
112:47 - to have a variant of
112:50 - warning i mean we could do warning we
112:52 - could do danger let's actually do danger
112:54 - i think danger makes more sense and then
112:56 - we'll go with message and we'll say
112:58 - please sign in to make a post
113:02 - exclamation point okay and then what
113:04 - we're going to do is navigate them so
113:06 - i'm going to say
113:08 - navigate and we'll navigate to slash
113:11 - login
113:12 - and i think that's good for that and
113:15 - then here we want to rerun this effect
113:18 - whenever the user changes okay so that's
113:20 - what we need for use effect now let's do
113:22 - the html of the page so i am going to
113:25 - return so let's render a form inside of
113:28 - here so let's go
113:30 - form for the class name right now we can
113:32 - go with center form and then inside of
113:35 - the form we're going to need a file
113:37 - upload so that's what we'll put in our
113:39 - first form group and then we're gonna
113:40 - need a button uh we're gonna need a few
113:42 - other things as well so i'm going to put
113:45 - a form dot group and then slash form dot
113:51 - group a for the class we'll go with
113:53 - margin bottom three so class name is
113:56 - equal to mb
113:58 - and then three
113:59 - okay
114:00 - i think that's fine for now inside of
114:03 - here the first thing that we'll do is
114:04 - have an image tag now the image tag is
114:06 - just going to show us the image that we
114:08 - currently have uploaded so i'll say
114:10 - image src is going to be equal to file
114:14 - question mark if we do have a file then
114:15 - we're going to say url dot and then
114:18 - create
114:20 - object and then url and that's going to
114:23 - be for our file otherwise we're going to
114:25 - say no and then we're going to have
114:27 - class name which is equal to upload
114:30 - image and i'm going to write that class
114:32 - later on
114:33 - okay so that's going to be our image tag
114:35 - again this is going to display the
114:37 - current image that we have uploaded if
114:39 - we've uploaded an image so if we do have
114:40 - a file we're going to get the url for
114:42 - that file you don't have to wonder too
114:44 - much about what this is doing but
114:45 - essentially just allows us to directly
114:47 - reference this file and display it as
114:49 - the source for the image
114:50 - and then we're going to have another
114:51 - form group that we need so let's copy
114:53 - this
114:54 - for this next form group inside of here
114:56 - we will have the file upload so i'm just
114:58 - going to put an input tag
115:00 - let's end it like that and then we'll
115:03 - say type is equal to file
115:06 - we will say accept and then this is
115:09 - going to be equal to and image and then
115:12 - that will be slash and then an asterisk
115:15 - and then
115:16 - let's put our quotation mark and then
115:18 - we're going to say on change
115:20 - and we can make this call a function so
115:23 - for the function let's actually just
115:24 - write it right now
115:25 - let's say function
115:28 - upload file
115:29 - let's take e and then we will take
115:32 - inside of here or we will call sorry the
115:35 - upload file function
115:37 - okay i think that's all we need for the
115:39 - image upload the next thing that we're
115:41 - going to need is the caption so i'm
115:43 - going to say form
115:44 - dot group okay
115:47 - then we're going to have our form dot
115:49 - and this will be control and this will
115:52 - just be the caption so i will say type
115:55 - is equal to text we will do
115:58 - placeholder equal to
116:01 - caption
116:02 - we can actually just do something like
116:04 - enter a caption
116:06 - and then we'll have it on input
116:08 - and the on input
116:10 - will be equal to
116:12 - and we will do an arrow function inside
116:14 - of here that accepts e and then we will
116:16 - simply update our caption so we'll say
116:19 - set
116:20 - caption
116:21 - e
116:22 - dot target
116:24 - dot value
116:26 - and let's fix control so we have the
116:28 - proper capitalization okay other than
116:31 - that we want a button uh why is that
116:33 - highlighting in red okay i think that's
116:36 - fine um yeah that's looks fine to me
116:39 - right now actually let's end the tag
116:42 - like this sorry and then that should
116:44 - hopefully fix our problem for us
116:46 - okay there we go so now we want to have
116:48 - a div i'm going to say div class name is
116:51 - equal to and then this is going to be
116:53 - post
116:54 - button and then wrapper i'll show you
116:56 - why we need this in a second but we're
116:58 - going to add some styling to this div
117:00 - just to put the button in a certain
117:01 - location
117:02 - and i'm going to say button
117:04 - and inside of here we'll say variant
117:07 - is equal to primary and then we will go
117:10 - with type equal to button
117:14 - and then we'll have on
117:16 - not submit but on
117:17 - click
117:18 - is going to be equal to
117:20 - and we will call a function that we've
117:23 - yet to call yet to write sorry so this
117:25 - function will be function and we'll say
117:28 - make post
117:31 - like that
117:32 - okay so let's put
117:34 - make post here
117:37 - and then inside of the button we will
117:40 - just make this say post okay i think
117:43 - that's all we need for now
117:46 - let's have a look at the create post
117:48 - page and just see what we're getting and
117:49 - then we'll complete the rest of this
117:50 - because obviously it's not fully
117:52 - finished okay so we're getting an error
117:54 - here it says set alert is not a function
117:55 - okay i need to remember to pass these
117:57 - two things as props to this from app so
118:00 - let's go to app.js let's go to create
118:02 - post let's say user is equal to user and
118:06 - let's say not add alert but set alert is
118:08 - equal to set alert and then what the
118:10 - heck is this uh the path is fine
118:13 - okay let's just write out because it
118:14 - gave me this weird autocomplete here
118:17 - so this will be set
118:19 - alert
118:20 - is equal to set
118:22 - alert
118:23 - okay
118:24 - now let's try this
118:25 - and please sign in to make a post nice
118:27 - okay so let's sign in as tim let's log
118:29 - in
118:30 - it's gonna take a second okay let's go
118:31 - to post and then we have our file we
118:34 - have our caption and we have our post
118:36 - and i'll have to fix this again because
118:38 - you're noticing that you know the post
118:39 - button is kind of weird the caption
118:40 - should probably be larger the file input
118:42 - isn't lined up so we'll fix all of that
118:44 - in one minute we also want to have kind
118:45 - of a default image
118:47 - for the uh the image right like that we
118:49 - have here so we can see something
118:51 - showing up even if there's not something
118:52 - there let me just refresh again here and
118:54 - see if we're getting any errors okay so
118:56 - let's go tim
118:58 - login
118:59 - and it looks like if we go to post we
119:02 - are all good okay so let's handle the
119:04 - styling and making things look a little
119:06 - bit nicer now all right so i need to add
119:08 - a few classes here as well as a few divs
119:10 - in create post so the first thing for my
119:13 - button here i'm going to say class name
119:15 - is equal to post button okay then i'm
119:19 - going to add a div that's going to
119:20 - surround all of this so we're going to
119:23 - say
119:24 - div
119:25 - class name
119:26 - is equal to and then i guess we'll just
119:29 - go with post or actually let's just go
119:31 - with create post
119:34 - okay let's take that div
119:35 - and let's surround everything inside of
119:37 - here
119:38 - all right again i'll explain all the css
119:40 - in a minute
119:41 - and then we need a few other class names
119:44 - so for our image
119:46 - let's add a class name
119:47 - let's say class name is equal to post
119:50 - image
119:52 - i believe that is fine okay so now that
119:54 - we have all of these classes let's make
119:56 - a custom css file let me just close some
119:58 - of this so it's not clogging up my left
120:00 - hand side so let's make a new css file
120:02 - let's call this
120:04 - createpost.css we can then import it
120:07 - inside of here so we're going to say
120:10 - import and then this will be dot dot
120:12 - css slash
120:13 - create post
120:16 - dot css okay
120:18 - now let's go to create post and let's
120:20 - write the different classes that we need
120:22 - so the first class that i want to write
120:24 - here is going to be create post so let's
120:26 - just write this out and then we can see
120:27 - exactly what's going to happen so i want
120:29 - to set the min width to be 30 percent of
120:32 - the parent i then want to say the
120:34 - display is flex i want to say the flex
120:38 - direction is going to be column okay
120:41 - just so we have a flex box all of the
120:43 - elements inside of that div will now be
120:45 - a flex item and then we're going to have
120:47 - margin hyphen top
120:50 - and this is going to be equal to 2 e m 2
120:54 - e m is going to be whatever the default
120:56 - font size is i believe of the browser
120:58 - multiplied by 2. okay so that's margin
121:01 - top just to give us a bit of spacing
121:02 - from the top of the screen i then i'm
121:04 - going to have my post
121:06 - button
121:07 - and then wrapper so this is the div
121:08 - that's wrapping that button and this is
121:10 - going to allow me to actually center the
121:12 - button so i'm going to say display
121:14 - this is going to be flex and then i'm
121:16 - going to say align
121:18 - items and this is going to be center and
121:20 - i'm going to justify the content
121:23 - in the center as well
121:24 - all right so now that we have that for
121:26 - post button wrapper we're going to do
121:27 - our post button i just want to make it
121:29 - larger so i'm going to say post button
121:31 - width and then 100 so we'll take up 100
121:34 - of its parent and then i want my upload
121:36 - image so let's go upload image or
121:39 - actually it's not upload image it's
121:41 - post image to have a width and a height
121:44 - so i'm going to say width is equal to
121:45 - 300 pixels
121:47 - and height is equal to 300 pixels just
121:49 - so it takes up some room on the screen
121:51 - and we should see something now okay so
121:53 - now that we've added this css let's go
121:55 - here and let's sign in so let's go tim
121:59 - okay
122:00 - let's go to post
122:02 - okay so that looks a little bit weird
122:04 - the issue that's happening here is i'm
122:07 - spacing everything out and taking up the
122:09 - entire height of the screen which i
122:10 - don't necessarily want to do so i'm
122:12 - going to need to fix this slightly and
122:14 - the way i'm going to fix this is by
122:15 - actually creating a new
122:17 - class name here so rather than center
122:19 - form i'm going to have post form and
122:22 - let's now go here and write the post
122:24 - form class so i'm going to say dot post
122:26 - form and we'll do something similar to
122:28 - what we had for center form but we're
122:29 - just not going to take up the entire
122:31 - height so i'm going to say display
122:33 - this will be flex we're then going to go
122:35 - align
122:36 - items and this will be center and then i
122:40 - want to have justify content
122:44 - this will be center and then i want to
122:45 - have the flex direction and this will be
122:48 - column
122:49 - okay so let's see this now and okay i
122:51 - got to sign in so let's go tim log in
122:54 - let's go post and close although the
122:59 - image it's still a little bit weird
123:00 - right it looks like this input tag is
123:02 - going above the image i don't know why
123:04 - that's the case so let me have a quick
123:05 - look here and i'll be right back all
123:07 - right so i'm just having a look here and
123:09 - i made a few kind of silly mistakes so
123:11 - first of all i added a post image class
123:13 - to this input tag which was not expected
123:16 - and i also realized that i named this
123:17 - upload when it should be post to match
123:20 - with what we have here right post image
123:22 - and now post image now we'll have a
123:23 - width and height i also realized that
123:25 - for this form i forgot the class name
123:26 - equal to margin bottom three
123:29 - and i believe now with those fixes we
123:31 - should actually be good so let me have a
123:32 - look at this now and that looks much
123:35 - better okay everything is aligned so
123:36 - just quickly looking at the css
123:38 - uh what we did
123:40 - is we made it so that our post form has
123:42 - a display flex
123:43 - everything is aligned in the center so
123:45 - horizontally and vertically and then the
123:47 - direction is column meaning that we're
123:49 - having everything aligned vertically
123:50 - right
123:51 - then we have create post so for create
123:54 - post i just wanted to make the minimum
123:56 - width of everything 30
123:58 - so that way we're gonna take up a
123:59 - certain amount of size on the screen no
124:01 - matter what then i have display flex
124:03 - flex direction column and the margin top
124:06 - is this right here so it's making it so
124:08 - we're not directly squished to the top
124:09 - of the screen we have some padding
124:11 - between the other diff so that's what
124:12 - we're doing there or i guess a margin
124:14 - padding whatever you know what i mean
124:16 - and then we have post button wrapper
124:18 - display flex align item center and then
124:20 - justify content center this
124:22 - pushes our button into the center of its
124:24 - container because it wouldn't have been
124:25 - directly in the center before and then
124:27 - we have post button with a hundred
124:29 - percent just to make it take up the
124:30 - entire width of its container which will
124:32 - be 30
124:34 - of the width of the div because this div
124:36 - the create post div is going to be 30 of
124:38 - the entire screen so it will be 100 of
124:41 - this div right hopefully that makes
124:43 - sense and then post image we're just
124:44 - giving it a width and height of 300. we
124:46 - could do percentages but i think this is
124:48 - fine and you'll see if we resize the
124:50 - screen everything actually looks all
124:52 - right and we can you know kind of move
124:53 - it around and it's all good in fact
124:55 - maybe we want to just make the image uh
124:58 - have a width equal to 100 and a height
125:00 - equal to 100
125:01 - uh although height i guess i can't
125:03 - really do i can do height 300 with
125:05 - maximum and then that way it will uh
125:07 - expand although i'm not super fussed
125:10 - with the css for now so honestly let's
125:11 - just leave it and you guys can mess
125:12 - around with that if you want okay so
125:14 - that is uh most of the styling for
125:16 - create post now of course we want to
125:18 - actually be able to make a post and we
125:20 - need to be able to upload a file now
125:22 - uploading a file is going to be a bit
125:23 - more complicated but inside of here what
125:25 - i can do for upload file is say set and
125:28 - then file like this and it's going to be
125:30 - e
125:31 - dot target
125:32 - dot and then files and then zero because
125:35 - we're only uploading one file
125:37 - okay so that's what we'll do we could
125:38 - also put this in arrow function but i
125:40 - think it's fine just to leave it here it
125:41 - doesn't really matter
125:43 - and now for make post we want to write
125:45 - this before we can do that we need to be
125:47 - able to handle this on the back end so
125:49 - let's go to index.js and let's start
125:52 - writing it now so that we can actually
125:53 - accept a file upload as well as the
125:56 - caption and the user that's making this
125:58 - post and then we can create a new post
126:00 - now this is fairly complicated uh to
126:02 - actually accept a file upload we have to
126:04 - use a few things that we haven't yet
126:06 - seen but that we installed previously so
126:08 - i'm going to go up here
126:09 - and i'm going to say import and then i'm
126:11 - going to import multi
126:13 - from and then motor now i might be
126:15 - mispronouncing that but that's something
126:17 - that we need to use to actually handle a
126:19 - file upload now after we make our app
126:22 - what we need to set up here is a storage
126:24 - location for all of the files that are
126:25 - going to be uploaded now i'm going to
126:27 - put them in a folder here called public
126:29 - so in api i'm going to make a new folder
126:31 - this folder will be called public and
126:33 - that's where we're going to save all the
126:34 - files that are being uploaded before we
126:36 - then upload them to sanity because we
126:38 - need them stored on our local disk
126:40 - before we can upload them to sanity we
126:42 - can delete them after if we want or we
126:43 - can just keep them here it's really up
126:45 - to us so what i'm going to do is say var
126:48 - storage like that is equal to multer
126:51 - dot and then this is going to be disk
126:54 - storage and we're going to define a
126:55 - location where we want to store this so
126:58 - inside of disk storage i'm going to say
127:00 - the destination
127:02 - is going to be a function and this
127:04 - function is going to accept a request
127:06 - a file and a cb and we're just going to
127:09 - say
127:10 - cb
127:11 - and then
127:12 - inside of here it's going to be no
127:15 - and then public
127:17 - and this is a callback function now i
127:18 - understand this is not going to make any
127:20 - sense right now i'm going to be quite
127:21 - honest with you i just found this code
127:23 - on stack overflow tested a bit and it
127:25 - seemed to work so i don't know exactly
127:27 - what's going on here but i will try my
127:29 - best to explain the parts that i do
127:30 - understand i do know that what this does
127:32 - though is set up a storage location
127:33 - where we're able to save files to so i
127:36 - have the destination which is equal to
127:37 - this and then the file name is going to
127:40 - be the callback function here and it's
127:42 - going to be no
127:43 - and it's going to be date dot now
127:46 - plus and then we're going to put a
127:47 - hyphen and then we're going to put file
127:50 - dot and then original name
127:52 - okay so we're getting the destination uh
127:54 - to get the destination we take in the
127:55 - request the file and a callback function
127:57 - and we just call the callback function
127:58 - with public now callback is going to be
128:01 - essentially our current location so
128:02 - we're going to append public to it which
128:04 - means that the location that we want to
128:06 - save this is in the public folder right
128:07 - so relative to our current path plus the
128:10 - public folder then the file name that we
128:12 - want to save is going to be daytime.now
128:14 - so whatever the current date is plus a
128:16 - string plus the file.original name just
128:19 - so that we have a unique name for our
128:21 - file name okay
128:22 - now that we have that we're going to say
128:24 - var upload is equal to
128:26 - multer and we're going to pass this in
128:28 - object which is storage
128:31 - storage so now it knows where we're
128:32 - going to be saving any uploads now to
128:34 - actually accept and upload we're going
128:37 - to do the following we're going to say
128:38 - app
128:39 - dot and then i'm going to make this a
128:41 - post request because we're going to be
128:42 - adding a a new image and this is going
128:45 - to be slash create post so sorry not
128:48 - just new image but a new post then i'm
128:50 - going to pass your upload dot and then
128:53 - single
128:54 - and then the parameter type is going to
128:56 - be file because we're uploading a file
128:58 - and then we are going to have our
129:00 - regular
129:01 - request
129:03 - and our response
129:05 - and what we're going to do inside of
129:06 - here is get the body so we're going to
129:07 - say const body is equal to request dot
129:11 - body
129:13 - okay and then we're going to call the
129:14 - function create post and we're going to
129:17 - pass through this the body
129:19 - dot user which is going to be the user
129:21 - that we want to make the post for the
129:23 - body dot caption which is going to be
129:25 - the caption of the post and then the
129:26 - request dot file so notice i'm doing a
129:28 - request file not body.file because the
129:31 - file that we want to store will be a
129:32 - part of this request because we have
129:34 - this upload.single here then we're going
129:36 - to say
129:37 - then
129:38 - i'm going to put inside parentheses here
129:40 - data we're going to say res.json and
129:43 - then date now i will explain how we
129:46 - actually upload the file in a second
129:47 - because we're going to have to do that
129:48 - from the create post function what we've
129:50 - just done here is set up a storage
129:52 - location again don't worry too much
129:53 - about this code i don't fully understand
129:55 - all of it i just know that it does work
129:57 - we then have upload now this is the
129:59 - multer object which is going to allow us
130:01 - to actually accept a file upload here on
130:03 - our server so now we pass in here
130:06 - upload.single file which means we're
130:08 - accepting a single file to this post
130:11 - request okay as well as any of the
130:13 - request body that we want and then we're
130:15 - going to take body.user
130:16 - body.captionrequest.file
130:18 - pass that to create post and
130:20 - request.file will be the path to the
130:22 - file which will now be sitting on our
130:23 - server so we're uploading the file from
130:26 - our front end we're then going to be
130:28 - downloading it on the back end saving it
130:29 - locally and then we're going to take
130:31 - that file and use that and upload it to
130:34 - sanity okay the reason we're doing this
130:36 - is because we need to upload to sandy so
130:37 - we first need to get the file here on
130:39 - our back end then once we have it here
130:41 - we can use it and send it to sanity
130:43 - all right so let's go to api calls now
130:46 - and what was the function we want to
130:47 - write the function create post so what
130:50 - we're going to do here is say functions
130:52 - dot create post now this will be an
130:55 - arrow function
130:56 - and what we want to take in here is the
130:58 - user the caption and the image
131:01 - okay
131:02 - and then we're going to say return and
131:05 - this is going to be sanity client and
131:07 - the first thing that we need to do is we
131:08 - need to upload the photo to sanity so to
131:10 - upload a photo to sandy is different
131:12 - than to create a regular document so we
131:15 - first upload the folder or first upload
131:17 - the image story then we're going to link
131:19 - the image as this user's post so you'll
131:22 - see what i mean in a minute but we're
131:23 - going to say sanityclient.assets because
131:25 - we're uploading an asset we're going to
131:26 - say dot upload we're going to upload an
131:29 - image and then we're going to create a
131:32 - read stream
131:34 - and this is going to be of the
131:36 - image.path now i need to import this
131:38 - from our file system so we're going to
131:40 - go up to the top here and we're going to
131:42 - say
131:43 - import
131:45 - create read stream from file system okay
131:48 - and then we also need to import
131:50 - one other thing
131:52 - the base name
131:54 - from and then path and i think path is
131:57 - installed by default but if it's not
131:58 - then we'll have to install it in node.js
132:00 - okay so we're creating a read stream of
132:02 - the image.path this is essentially going
132:04 - to give us a byte stream of this image
132:06 - and then we'll be able to upload that to
132:08 - sanity because well we need to take the
132:10 - image turn it into a format sandy can
132:11 - accept which is this and then upload it
132:14 - now we also need to pass here as an
132:15 - additional argument the name for this
132:17 - file so i'm just going to say file name
132:19 - is equal to base name of image.path and
132:23 - this is going to give me well just the
132:25 - base name so just the image name not the
132:26 - entire path so i'm saying okay i want to
132:28 - create a read stream of the file at this
132:30 - location we want to save it as the file
132:32 - name of this and then we're going to
132:34 - wait for this response to finish
132:36 - we're going to get the data from this
132:38 - and the data is going to include
132:40 - information about this image that we
132:41 - need to link it to a post so now what
132:44 - we're going to do is say functions dot
132:46 - get user id this is a function we're
132:48 - going to write in one second we're going
132:49 - to say dot user we're going to say dot
132:51 - then we're going to say ids inside of
132:55 - here
132:56 - actually did i mess something up here
132:58 - nope i think we're okay for now i'm
133:00 - going to say ids and then i'm going to
133:03 - do something here inside of an arrow
133:04 - function okay let's save this hopefully
133:06 - it gives me some formatting
133:08 - what's the issue with my parentheses
133:09 - expression expected okay that's fine
133:12 - we'll do something inside of here and
133:13 - here we're going to say return sandy
133:15 - client dot and then create and then
133:18 - we're going to create a new post now i
133:19 - know this is really confusing
133:21 - let's first write out this get user id
133:25 - function because what we need to do here
133:27 - when we're making a post is we need to
133:28 - have a reference to the image for the
133:31 - post as well as a reference to the user
133:33 - who made the post now to be able to do
133:35 - that we have to have both the id of the
133:37 - image as well as the id of the user so
133:40 - that's why i'm first doing the upload
133:41 - right i'm uploading the image it's then
133:43 - going to return to me some data this
133:45 - data is now going to contain the id of
133:46 - the image i can then use that id to link
133:49 - the image to the post because the image
133:51 - is stored separately than the post then
133:53 - same with the user
133:54 - i need the id of the user which i don't
133:56 - have i just have the name so i have to
133:58 - get that id so i'm going to say
134:00 - functions
134:01 - dot get
134:03 - user id this will be an arrow function
134:05 - that takes in a user
134:07 - and then what we'll do inside of get
134:08 - user id as well we will get the user id
134:12 - so to get the user id we're going to say
134:14 - return
134:15 - sanity
134:16 - client dot and then this is going to be
134:19 - fetch
134:20 - and then the
134:22 - and then the query that we want here for
134:24 - the fetch it's going to be following
134:25 - we'll put it inside of back ticks just
134:27 - so we can have a multi-line string here
134:29 - we're going to do our asterisks we're
134:30 - going to do our square brackets we're
134:32 - going to say underscore type is equal to
134:35 - our user let's have a space here
134:38 - and then we will add similarity to 4 and
134:41 - user is equal to and then this will be
134:44 - username and then we'll have to pass
134:45 - that username in a minute and then
134:47 - inside of here the only thing that we
134:48 - want is underscore id so rather than
134:50 - putting dot dot or anything else we just
134:52 - put this because we only care about the
134:54 - id of the user and then here we're going
134:56 - to say username colon and then user like
134:59 - that
135:00 - okay nice so that gets user id so we've
135:02 - now ridden that function so now what
135:03 - we're doing right is we're saying okay
135:05 - well once the image is uploaded we're
135:06 - now going to get the id of the user
135:08 - now it's actually going to give us a
135:10 - list of ids because remember it's always
135:11 - going to return to us multiple things so
135:13 - if we want just the id we can say const
135:16 - id is equal to ids at zero and then dot
135:20 - underscore id okay and that will give us
135:22 - the id of the user assuming this user
135:24 - exists and then we're going to return
135:26 - sandyclient.create and then the type
135:28 - that we're going to use here is going to
135:30 - be a post okay so we're going to say
135:32 - type
135:33 - post
135:34 - and then we'll fill in the other fields
135:36 - that we need for creating a post so
135:38 - we'll put the author
135:40 - of the post the author is going to be
135:42 - equal to a reference so we're going to
135:44 - say underscore ref and this is going to
135:46 - reference the id okay that's all we need
135:49 - for that then for our photo
135:53 - this is going to be an asset
135:56 - and this asset is going to have a
135:58 - reference to the data dot underscore id
136:01 - which will be the id of the photo that
136:02 - we just uploaded that we're now getting
136:04 - from data
136:05 - and then after photo we're going to have
136:07 - our description which will really just
136:09 - be the caption i think i called it
136:11 - description in the uh in the database
136:13 - although let's have a look actually
136:14 - let's go here schemas post
136:17 - and yes i did call description so we're
136:19 - gonna have to use description other than
136:20 - caption okay and then the last thing
136:22 - that we want is the created at which is
136:25 - new
136:26 - and then date
136:28 - all right so that is actually all we
136:30 - need to create a post i know very
136:32 - confusing there's a lot of stuff that we
136:34 - have to do took me a long time going
136:35 - through the documentation to figure this
136:37 - out because since we have this on the
136:38 - back end we need to first download the
136:40 - image then we need to get the path to
136:41 - the image then we need to upload it to
136:43 - sanity then we need to link the image
136:45 - with the post as well as the user id
136:46 - with the post and so this is how you do
136:48 - it right if i want to have a reference
136:50 - to a person i do underscore ref for the
136:52 - author and then i'm referencing the id
136:54 - of a person object and then for the
136:55 - photo i put asset inside of here because
136:57 - that's one of the mandatory fields then
136:59 - this asset is referencing an asset that
137:02 - is on sanity already that we just
137:03 - uploaded so that's why we had to do that
137:05 - first and then get the id of it then the
137:07 - description well it's a caption created
137:09 - at new date there we go we have the
137:10 - create post function
137:12 - okay so that actually should be fine now
137:15 - so if we go to index.js that's all we
137:18 - need for slash create post
137:20 - now for make post we're going to send a
137:22 - request here so let's
137:24 - start creating our what do you call it
137:27 - request options as well as our form data
137:30 - so when we want to send a file we need
137:32 - to send this file in form data so what
137:34 - i'm going to do is say const
137:36 - form data is equal to and then this is
137:38 - going to be new form data because
137:40 - remember here we need to upload a file
137:42 - then what i can do is add the fields
137:43 - that i want to the form data so i can
137:45 - say form data dot append i can append
137:47 - for example the user that will be equal
137:49 - to whatever user is passed here to
137:51 - create post all right continuing we're
137:53 - going to say form data dot append and
137:55 - we're going to append a description
137:59 - uh actually let's check here
138:01 - index.js nope we're going to append a
138:04 - caption
138:06 - and the caption will be caption okay and
138:09 - then we're going to say form data dot
138:12 - append and we're going to append a file
138:14 - and the file will be the file all right
138:17 - okay then we're going to say const
138:20 - request options and we're going to say
138:23 - that this is equal to an object
138:25 - and we're going to say the method is
138:27 - equal to and this is going to be post
138:30 - and then the data will be our form data
138:32 - okay we're just doing it this way
138:33 - because we're actually sending a file so
138:35 - we want to add that to our form data so
138:36 - it's handled properly and then i'm going
138:38 - to fetch the slash create post
138:42 - and then we'll pass the request options
138:45 - we're going to say dot then
138:47 - and we're going to get a response so
138:50 - underscore res like that
138:52 - and then we will do the following so
138:55 - assuming that we get a response and we
138:56 - don't get an error we're going to say
138:58 - add alert
139:00 - and we're going to say
139:02 - variant
139:03 - and then this is going to be success and
139:05 - we're going to say message we're going
139:07 - to say post
139:10 - created exclamation point and then we're
139:12 - going to navigate
139:14 - to the home page so navigate home
139:17 - now if we do not get this successfully
139:20 - so if we have an error we're going to
139:21 - need to catch that error so we're going
139:23 - to catch error
139:24 - okay and then we're going to make a new
139:27 - alert so we're going to say add alert or
139:29 - not add alert this is going to be set
139:31 - alert don't tell me i called this one ad
139:33 - alert okay sorry guys set alert so we're
139:36 - setting alerts
139:37 - and then the variant here is going to be
139:39 - danger
139:40 - and the message will just be
139:42 - error.message so whatever that is we'll
139:43 - display that
139:44 - okay so that should actually be it for
139:46 - making a post now so when we hit that
139:48 - post button it should just well make the
139:50 - post and we should be good to go again
139:52 - apologize for all the complexity there
139:54 - but it is required so let's refresh the
139:56 - page okay let's sign in as tim
140:00 - let's go to post let's close that let's
140:03 - choose a file uh i have dwayne the rock
140:06 - johnson nice awesome uploaded and notice
140:09 - it shows up here because again when i go
140:11 - to my image let's have a look at it here
140:13 - you can see that i am displaying the
140:15 - image only if we have a file since i set
140:17 - the file we now have it so i can display
140:19 - it there and then what i'll do for the
140:20 - caption is say
140:22 - this guy is strong okay and hit post and
140:26 - post created although we got an issue it
140:28 - says create post not found ah okay so
140:30 - the reason we got that problem there is
140:32 - because we need to restart our api
140:35 - because we added a new function so let's
140:36 - restart this and let's try this again
140:40 - okay so let's come here
140:41 - let's go to post
140:43 - let's choose a file dwayne the rock
140:45 - johnson
140:46 - this is a
140:48 - strong man okay and then post
140:51 - all right again 500 internal server
140:53 - error what's the error that we got this
140:55 - time
140:56 - it says create post is not defined okay
140:59 - we need to import that so let's go to
141:02 - our index.js and let's add here
141:06 - create post
141:07 - and now hopefully
141:09 - this should work okay let's try this now
141:12 - let's go to post
141:13 - we need to rerun the api
141:16 - because we made a change okay so stop
141:18 - and rerun
141:21 - let's go back here let's upload a file
141:24 - and let's go
141:25 - testing this time and post and another
141:28 - internal server error what is the error
141:30 - this time property path of undefined
141:34 - okay let me have a look here and then i
141:36 - will be right back all right so i've
141:37 - found the problem here i apologize
141:40 - there's a really stupid error here i
141:42 - need to change data to be body so it was
141:44 - saying that i wasn't getting a file
141:46 - because i wasn't really sending any data
141:48 - because i had data rather than body so
141:50 - this needs to be body here and request
141:52 - options and now it should fix the
141:54 - problem for us so let's rerun this
141:57 - let's go to
141:59 - refresh
142:00 - let us sign in okay tim sign in
142:04 - let's go to post and then let's choose a
142:06 - file okay let's go with dwayne again
142:10 - strongman
142:11 - post okay this is a good sign it's
142:13 - taking a second that means it's
142:14 - uploading the file and then post created
142:17 - and if we go to our back end you can see
142:19 - i've just printed something out and we
142:21 - got actually the file that was passed
142:22 - here so let's now go to sandy studio
142:25 - and let's see if we have that image
142:27 - uploaded so when i go to post notice
142:29 - that we have a photo
142:30 - and when i look at the photo we get
142:32 - dwayne with descriptions strongman and
142:34 - that is posted by tim awesome so we've
142:36 - just figured out how to create a post
142:39 - now that we have done that we want to
142:40 - view all the posts then search for users
142:43 - then set up the profiles hopefully at
142:45 - this point in time you are realizing
142:46 - that yes this app does look simple but
142:48 - there is a lot going on in the back end
142:50 - i will continue to show you how to do
142:51 - the rest of the stuff right now all
142:53 - right so now we're going to move on and
142:55 - code out the all posts page which is
142:57 - going to show us all of the posts for a
142:58 - user's feed or if the user is not signed
143:01 - in then it will just show us all of the
143:02 - posts that's how i'm going to implement
143:04 - it here feel free to change it around if
143:05 - you'd like and you just need to import a
143:07 - few things here so we're going to say
143:09 - import and we're going to import react
143:11 - we're going to import use effect
143:14 - we need this we're also going to import
143:16 - use state and then this will all be from
143:19 - react and sorry i don't think i need
143:20 - react i think i just need use effect and
143:22 - use state
143:23 - okay continuing i'm going to import
143:26 - and this is going to be link from and
143:28 - this will be react router dom
143:31 - then i'm going to import a card
143:34 - from bootstrap so from and then this
143:37 - will be react and then bootstrap down
143:40 - here
143:41 - nice now that we have that let's set up
143:42 - the state that we want for our page
143:45 - we're also going to accept a user as a
143:47 - prop so that we know if we're signed in
143:48 - or not and we show the user's feed or we
143:50 - just show all of the pages or all of the
143:52 - posts are so i'm going to say const this
143:55 - is going to be all
143:56 - and then posts and then data and this
143:59 - will be set
144:00 - all posts like that and then this will
144:03 - be equal to use
144:04 - state and for now we will go with no
144:08 - and we'll put an object in there later
144:10 - okay then we're going to write our use
144:12 - effect although actually yeah we'll do
144:14 - the use effect now so i'm going to say
144:16 - use
144:17 - effect
144:18 - okay
144:20 - and then we need to do the arrow
144:22 - function
144:23 - and we want to update this whenever the
144:25 - user changes so if a user signs in then
144:28 - we're going to change it to show their
144:29 - feed as opposed to showing all of the
144:31 - posts so inside of here the first thing
144:33 - i'm going to do is say if and this is
144:35 - going to be not
144:37 - user
144:38 - then what i want to do is i want to
144:40 - fetch all of the posts so i'll just
144:42 - write the fetch but then we'll actually
144:43 - write the back end endpoint later on so
144:45 - i'm going to say get
144:48 - all
144:49 - and then post so that's we do if we
144:51 - don't have a user otherwise if we do
144:53 - have a user then we want to fetch and
144:56 - this is going to be
144:58 - slash get
145:00 - and then
145:01 - posts of
145:03 - and then following and then we're going
145:05 - to do as a query parameter user equals
145:08 - and then plus and then whatever the name
145:10 - of the user is because again we want to
145:11 - get all of the posts of the users that
145:13 - this user is following
145:15 - all right so that's what we need for the
145:16 - use effect we'll have to modify this in
145:18 - a second and actually do something with
145:19 - the different fetch requests but for now
145:21 - we'll just leave it like this and now we
145:23 - can write the html of the page so i'm
145:26 - going to return a div here
145:29 - and for now i'm not actually going to
145:30 - write any classes in a separate file i'm
145:32 - just going to write them all inline css
145:34 - it's definitely not best practice and
145:35 - i'm being a bit inconsistent here but
145:38 - just to show you that i can use some
145:39 - built-in bootstrap classes instead of
145:41 - having to write all the custom classes
145:43 - myself so i'm going to say div class
145:45 - name then this is going to be equal to
145:47 - center and then this will be mt3 so
145:49 - margin top 3. now the center class is
145:51 - one that we already made and if we go to
145:54 - index.css we should see that we have
145:57 - center here and it just puts us in the
145:58 - center of the screen okay going back to
146:00 - all posts
146:01 - what i want to do inside of here is i
146:03 - want to map the all post data so i'm
146:06 - going to say all post data dot map and
146:08 - then for every single element in my all
146:10 - post data which is going to be a list of
146:11 - all the posts that i have i want to
146:13 - display a card for them
146:15 - so i'm going to say
146:17 - post
146:18 - and then index and then this is going to
146:20 - go to an arrow function and actually
146:22 - non-arrow function sorry just a
146:25 - parenthesis well it is an arrow function
146:26 - but we're going to have parentheses as
146:27 - opposed to the curly braces and then
146:29 - inside of here i'm going to have a div
146:31 - so each post will have its own div and
146:34 - the div is going to be class name equal
146:37 - to and this is going to be center as
146:39 - well
146:40 - and we're going to say m and then 2. now
146:42 - this is margin 2 meaning we're going to
146:44 - have a margin of 2 on all sides and then
146:47 - for this i'm going to say style is equal
146:49 - to and i'm going to say that the min
146:51 - underscore width is equal to 30 percent
146:54 - so we're going to go 30 like that and
146:57 - then we're going to say that the max
146:58 - width
146:59 - is equal to and we're going to go with
147:00 - 400 pixels
147:02 - now this will just give us a nice
147:03 - dynamic size so we're going to take up a
147:05 - minimum width of 30 uh 30 on the screen
147:08 - but when the screen is large enough
147:09 - we'll take up up to 400 pixels now you
147:12 - could change this around if you want the
147:13 - post to be slightly larger but i messed
147:15 - around with a bunch of different values
147:16 - and this was pretty good now since we're
147:18 - going to have a bunch of divs that are
147:19 - going to be in kind of a list we're
147:21 - going to say key is equal to and then
147:24 - index whenever you're using map and
147:26 - you're putting multiple elements inside
147:28 - of what's being mapped you're supposed
147:29 - to put a key
147:31 - and the key is just a unique value for
147:33 - the elements on the page so kind of hard
147:35 - to explain it more than that but you'll
147:36 - see that you get errors if you don't
147:38 - have this or you'll get warnings at
147:40 - least that are saying that you need to
147:41 - have a key property in the element
147:43 - because when you're rendering them
147:44 - dynamically like this that's what react
147:46 - expects now inside of this div we're
147:48 - going to display a card so i'm going to
147:51 - say card like this
147:53 - slash card and we're going to put a div
147:55 - inside of the card
147:57 - now this div will have a class name and
148:00 - this will be equal to d flex so display
148:02 - flex
148:03 - and we need another s here for the class
148:05 - name now this is a bootstrap class that
148:07 - you can use that just adds the display
148:09 - being flex for this specific div then
148:11 - i'm going to say align
148:13 - items
148:14 - and then center i think you can guess
148:16 - what that is going to do and then we'll
148:18 - make this a flex column as opposed to a
148:20 - flex row and then let's end our diff
148:22 - okay now inside of this div i'm going to
148:24 - put a card image so i'm going to say
148:26 - card dot and then this will be image and
148:29 - then card dot and then image the variant
148:32 - of this is going to be top which means
148:34 - we're going to put the image at the top
148:36 - of the card that we have for the src
148:39 - this is going to be equal to the post
148:41 - dot and then photo
148:43 - dot and then asset dot url okay that's
148:47 - the source for our photo and then for
148:48 - the style we're going to say that this
148:50 - is equal to and then this will be width
148:54 - and then 100
148:55 - so we'll take up the maximum width of
148:57 - our container
149:00 - okay there we go
149:01 - now we want to do a card body outside of
149:05 - this div so i'm going to say card dot
149:08 - and then this is going to be body this
149:10 - will be card dot body as well
149:13 - inside of the card body i want to have a
149:15 - link to the user's profile so we're
149:16 - going to have kind of an at symbol say
149:18 - the users actually posted this photo
149:20 - then i want to have the description of
149:22 - the post as well as when the post was
149:24 - well posted so the date time that it was
149:26 - uploaded or yeah i posted whatever you
149:27 - want to call it so inside of here i'm
149:29 - going to make a link and i'm going to
149:30 - say 2 is equal to and then
149:33 - we'll actually do inside of curly braces
149:35 - here slash
149:36 - profile slash and then this is going to
149:38 - be plus and then this will be post dot
149:42 - and then this will be user name
149:45 - like that
149:46 - okay that should be fine
149:48 - and then we'll end the link so slash
149:51 - link
149:51 - and here we'll just put the name of the
149:53 - user so i'm going to say card dot
149:56 - and then title and then card dot
149:59 - and then title like that
150:02 - let's fix that and inside of here
150:04 - this will be an at symbol
150:06 - and then we will say
150:08 - post dot
150:10 - and then username now username will be a
150:12 - field that we're going to add to each
150:13 - post each post is going to have all of
150:15 - the elements on it that our posts have
150:17 - from our database and from what our
150:19 - query returns which we're going to write
150:20 - in a second for both of these fetches
150:23 - okay so now we have the card title
150:24 - that's inside the card body
150:26 - next we want to have the description so
150:28 - we're going to say card dot and then
150:30 - text and then card dot text and then we
150:33 - want to put inside of here the post dot
150:36 - and then this is the description okay so
150:38 - that's all we need here for this that's
150:40 - what's going to be the content of our
150:42 - card body now we're going to make a card
150:44 - footer so i'm going to say card dot and
150:46 - then footer like that this will be
150:48 - beneath the card it's kind of muted and
150:50 - it looks a little bit uh
150:52 - what do you call it like kind of lighter
150:53 - so i'm going to say class name equals
150:55 - text and then muted and then inside of
150:58 - here i'm going to post the post dot
151:01 - created at
151:03 - all right now the creator is just gonna
151:04 - be the date time this was posted at we
151:06 - could format this and make it a bit
151:07 - nicer but for now i think that's good
151:09 - enough and that is what we will have for
151:11 - the content of our page so now all we
151:14 - need to do is write the queries for get
151:16 - all posts and get posts of following so
151:18 - we're going to have to go to our api
151:20 - calls or sorry to our index.js and then
151:22 - we'll go to our api calls after that so
151:25 - looking here again in all posts we had
151:28 - get all post and get posts of following
151:31 - so let's copy this one to start and
151:33 - let's go app dot get
151:36 - let's paste that in slash get posts of
151:38 - following we're gonna take in our
151:40 - request our response this will go to an
151:44 - arrow function then we're going to say
151:45 - const body or not const body we're going
151:48 - to say const and then this will be user
151:50 - is equal to request dot query dot user
151:53 - because we want to know the user that
151:54 - we're going to be getting these posts
151:55 - for then once we have that we're going
151:57 - to call the get posts
152:00 - of
152:00 - following function and we're going to
152:03 - take in user or pass user sorry and then
152:05 - say dot then
152:06 - and then we'll have inside of here
152:09 - data
152:10 - and then we will return res.json and
152:13 - data
152:14 - okay now we're going to do the exact
152:15 - same thing here
152:16 - except it is going to be for get all
152:18 - posts so we'll just say get
152:21 - all posts
152:23 - and then we don't need a user because
152:24 - well when we're getting all of the posts
152:25 - we don't care about the user we'll
152:27 - change this function to be get
152:29 - all posts now while we are in here let's
152:32 - import these functions and then we're
152:33 - going to have to actually write them so
152:35 - let's write get
152:36 - all posts and get
152:39 - posts
152:40 - of
152:42 - following like that
152:44 - okay i think that is what they were
152:46 - looks good now let's go inside of api
152:49 - calls and let's write the queries and
152:51 - calls with the sandy client so i'm going
152:53 - to say functions dots we'll start with
152:55 - get all posts this one will be easier so
152:57 - i'll say get all posts
152:59 - this is going to be an arrow function
153:02 - this arrow function actually doesn't
153:03 - take in any parameters and we're going
153:05 - to return sanity client dot and then
153:08 - this will be fetch
153:10 - and we want to fetch
153:12 - a specific query now this query is going
153:15 - to be
153:16 - asterisks
153:17 - followed by our square brackets instead
153:19 - of here we're going to go underscore
153:20 - type
153:21 - is equal to and then this is going to be
153:23 - post
153:24 - now there's nothing else that we care
153:25 - about we just want to get all of the
153:27 - posts and then we want to get some
153:28 - specific information from those posts so
153:31 - we'll start by saying dot dot then we're
153:33 - going to get the username so since this
153:35 - is a custom field i'm quoting this so
153:37 - i'm saying username is going to be the
153:39 - author which is a nested object right
153:41 - because this is a reference to a
153:43 - what you call this to a person or to a
153:45 - user object so we're going to say author
153:47 - and then we're going to get the author's
153:49 - username like that so that's how we're
153:51 - going to have username on all of the
153:53 - values that are returned here from this
153:54 - query
153:55 - then down here i'm going to say photo
153:58 - and then we're going to take the asset
154:01 - and then the asset is going to give us
154:03 - the underscore id
154:05 - as well as the url so in case i didn't
154:07 - mention this before whenever you see the
154:09 - arrow that essentially means that we
154:10 - have a reference type so an asset is a
154:12 - reference type and we are going inside
154:14 - of the reference and grabbing some
154:15 - specific fields so i'm getting the
154:17 - username here and here i'm getting the
154:18 - id as well as the url which is the
154:20 - information that we need okay so that's
154:22 - what we need for get all posts now we're
154:24 - going to have to write a fairly
154:25 - complicated query which is going to get
154:27 - all of the posts for following so the
154:29 - reason why this is a little bit
154:31 - confusing is because we have all the
154:33 - users that we're following on our user
154:36 - but i need to then go and find all of
154:38 - the posts that reference a user that
154:41 - this user is following so you're going
154:42 - to see but it's not the most trivial
154:44 - thing in the world and it took me a good
154:45 - amount of time to actually come up with
154:46 - this query
154:48 - so you're welcome for just typing it out
154:49 - for you here so i'm going to say get
154:51 - posts of following
154:52 - is equal to
154:54 - we'll take in the username
154:56 - okay and then we're going to say
154:59 - uh what is this return
155:01 - sanityclients.fetch
155:03 - and we are going to fetch the following
155:06 - it's going to be underscore type and
155:08 - we're actually going to start with user
155:10 - so what i'm going to do here is start by
155:11 - finding the current user then going
155:14 - through a list of all of the people that
155:15 - this user follows or an array of all the
155:18 - people that this user follows and then
155:19 - adding a post field to all of those
155:22 - people so we're able to get all of their
155:24 - posts and then we can aggregate all of
155:25 - their posts together so i'm going to say
155:27 - underscore type is equal to user and i'm
155:29 - going to say username
155:31 - is equal to and then this is going to be
155:33 - pound username or not pound dollar sign
155:35 - username then let's make sure we pass
155:37 - this variable so i'll just pass username
155:39 - since the name is the same as this
155:41 - variable i can just pass it like that
155:43 - and then i'm going to say following and
155:46 - this is an array and i'm going to
155:48 - essentially map all of the values into
155:50 - in in the array to some certain return
155:52 - values that i want to get so i want to
155:54 - get the posts so i'm going to say post
155:56 - colon and then this is going to be a new
155:59 - query and this query is going to be type
156:01 - and this is going to be underscore post
156:04 - and i'm going to say and and
156:07 - references and we're going to do the hat
156:10 - dot and then underscore id
156:12 - now this is a bit weird but every single
156:15 - one of the entries in this following
156:17 - array here is going to be a person
156:19 - so what this hat is going to reference
156:22 - is the current person that i'm on while
156:24 - i'm looping through this array and then
156:26 - for every single one of those people i'm
156:27 - going to do a query to get all of the
156:28 - posts that they have made so let's make
156:30 - sure this is underscore type and then
156:32 - from all of their posts what i want is
156:35 - dot dot so everything from the post
156:38 - as well as a username field the username
156:40 - again is going to be author
156:43 - and then username and then i'm going to
156:45 - go photo
156:47 - and then i'm going to say asset since
156:49 - this is a reference type i'm going to go
156:50 - with my arrow and then i'm going to get
156:52 - underscore id
156:53 - and then url
156:55 - okay so similar to what we did here
156:56 - except the query is a little bit more
156:58 - advanced so i'm adding a post field to
157:00 - every single entry in my following array
157:03 - then outside of here when i actually
157:05 - return this i'm going to loop through
157:07 - i'm going to grab all of these posts
157:09 - field and i'm going to aggregate them
157:11 - together
157:12 - so that's all we need for now so get
157:14 - posts of following
157:15 - so let's go back to index.js here and
157:19 - let's continue writing some code so for
157:21 - my data here and get posts of following
157:23 - i'm going to change this slightly and
157:25 - i'm going to now loop through my results
157:27 - i'm going to grab all of those posts
157:29 - field and i'm going to combine them into
157:31 - one array and then return that array so
157:33 - i'm going to say var posts is equal to
157:36 - and then this is going to be data 0 dot
157:39 - following okay so this will give us the
157:41 - list of following from the user that we
157:44 - got the post for so i know this is a bit
157:46 - weird but again we looked up the current
157:48 - user so the user that we want to get the
157:50 - feed for we got all of the people they
157:52 - were following and then we added the
157:54 - post field to that following array so
157:56 - now i'm getting this following array and
157:58 - now i'm going to map this so i'm going
158:00 - to say post is equal to and then this is
158:02 - going to be posts
158:04 - dot map and i'm going to map every
158:06 - single post to the post dot post okay
158:10 - now i know i said the word post like a
158:12 - hundred time it's going gonna be post
158:13 - dot post which is the field inside of
158:15 - that object containing all of their
158:17 - posts
158:18 - now that i have that i'm gonna say posts
158:20 - is equal to and then this is gonna be
158:21 - post dot and i'm gonna flatten this to
158:24 - one level now what this will do is just
158:26 - take all of the nested arrays that i'm
158:28 - going to have inside of here and flatten
158:29 - them into one and then what i'm going to
158:31 - do is say res.json
158:35 - with posts okay now also just add a
158:38 - cache here in case something goes wrong
158:39 - so i'll say catch
158:41 - error and then we'll just res.json and
158:44 - we'll just return an empty array so if
158:46 - something does go wrong empty array just
158:48 - saying you know okay there's no post
158:49 - because an error occurred all right so i
158:51 - think that's all i need for now so let's
158:52 - go back to all posts now and let's
158:54 - continue writing these fetches so now
158:56 - we'll actually display some data so for
158:58 - this fetch i'm going to say dot then i'm
159:00 - going to say
159:02 - this will be res we want to return the
159:05 - res.json and then we're going to do
159:07 - another dot then we want to get the data
159:11 - and then we're going to say
159:13 - set
159:14 - all posts and we'll set all posts with
159:16 - the data now we'll do a very similar
159:18 - thing here in fact we'll do the exact
159:20 - same thing so let's do this
159:22 - and let's run that now what i can do is
159:25 - also just add a cache to both of these
159:27 - in case something does go wrong so i can
159:28 - say catch
159:30 - error and then we can just console.error
159:34 - this error i won't show it in a alert
159:37 - although i could do that if i want now
159:38 - let's just take this catch and copy it
159:40 - and put it down here again just so in
159:42 - case anything goes wrong we'll be
159:43 - launching that to the console
159:45 - nice so now that we do that we should
159:46 - actually be able to see all of the posts
159:49 - from a user once they've signed in or
159:50 - when we're not signed in we should just
159:52 - see all of the posts and so let's resize
159:54 - or resize let's rerun our api excuse me
159:58 - i've been recording for a long time now
159:59 - as you guys can probably tell so npm
160:02 - start our api
160:03 - and let's go back to our front end so
160:06 - let's refresh our react app and we're
160:08 - getting an error cannot read property of
160:10 - null reading map okay
160:13 - uh what else any other errors here
160:16 - says can i read property of null reading
160:18 - map okay so let me have a look why
160:21 - that's going wrong
160:22 - what are we mapping so we are mapping
160:25 - our uh what is it all posts okay so the
160:28 - way to fix this is to say all
160:30 - posts data
160:33 - question mark
160:34 - otherwise we'll go down here and we'll
160:36 - just render null
160:38 - now the reason we're going to do this is
160:39 - just to make sure that we have some data
160:41 - because if we have no data then this is
160:44 - no we also could fix that by just making
160:46 - this an empty list but for now i think
160:48 - it's fine to leave a null and say okay
160:49 - well if we uh have no posts then we're
160:52 - not going to do this obviously because
160:54 - that's going to give us an error
160:55 - otherwise we can show no or maybe what
160:57 - we want to show is just something simple
160:58 - like a p tag that just says no post
161:02 - to display okay
161:04 - so let's do that let's go to our front
161:06 - end and then notice we're going to see
161:07 - the one post that we currently have okay
161:09 - so we see this post and if i sign in as
161:12 - tim let's do that when it redirects me
161:14 - to the home page oh it's showing me this
161:16 - post which it actually shouldn't be
161:18 - showing me because i'm not following
161:20 - this person
161:21 - let me just go back to feed here and
161:23 - okay so it's still showing this to me
161:25 - let's sign in as another account i
161:27 - forget if we have an account like
161:28 - joey123
161:30 - let's sign in and it's still showing it
161:32 - to me okay let me have a look here and
161:33 - see what's going wrong because we should
161:34 - not be seeing this post when we are
161:36 - signed in all right so to fix this
161:38 - problem i just realized we need to go to
161:40 - app.js and we need to pass the user to
161:43 - our all post page because i forgot to do
161:46 - that so i'm going to say user
161:48 - user like that
161:49 - now when we go to all posts we'll
161:51 - actually have a prop so now this
161:53 - condition will be correct us when we
161:55 - have a user it will actually give us all
161:57 - of the posts
161:58 - of their following okay
162:00 - so let's now go here
162:02 - and notice that the page is actually
162:04 - refreshed for us because we added that
162:06 - so if i go to say search
162:08 - go back to feed no post to display or
162:11 - actually it's giving me an empty list
162:13 - and since it's giving me an empty list
162:15 - we don't have no and so it's not showing
162:16 - me no post display but we're not
162:18 - displaying any posts because i'm not
162:19 - following the person that made that post
162:21 - so now what i want to do
162:23 - is make it so that we can actually
162:25 - search for uh different users and then
162:27 - once we search for them we'll be able to
162:29 - view their profile and then we can
162:30 - actually start following people right
162:32 - because well we need to follow people to
162:33 - be able to view the different posts so
162:35 - let's start working on that
162:36 - let's close all posts let's close
162:40 - actually let's not close app
162:42 - let's pass
162:43 - do we want to pass something to app
162:45 - sorry do we want to pass something to
162:47 - search
162:47 - i think for now we don't need to let's
162:49 - go to the search component
162:51 - and let's start writing this out so i'm
162:52 - going to start by importing what we need
162:54 - here so i'm going to import
162:57 - use state from
163:00 - and then react and then i'm going to
163:02 - import a form
163:04 - a
163:05 - button
163:06 - a list group
163:08 - and a card from and then this is going
163:11 - to be react bootstrap and then i'm going
163:13 - to import a profile list item from
163:17 - profile
163:18 - listitem.js now i will write this later
163:21 - on but every single item that we're
163:23 - going to have in a list is going to
163:25 - represent a user and it's going to be
163:26 - easier to have a separate component that
163:28 - we can render for each one of those
163:30 - individual users in the list that will
163:32 - do all the styling and formatting for us
163:34 - so we'll use this later on um you can
163:36 - think of this kind of as an li tag
163:38 - within a list that's uh what it will be
163:40 - and it will just show you know the
163:41 - user's following it will have a follow
163:43 - button all that kind of stuff
163:45 - and then i want to import a css
163:48 - sheet which you're going to fill in
163:49 - there's actually quite a bit of styling
163:50 - we need to do here so we'll say
163:52 - css slash and then search dot css
163:56 - okay
163:57 - and what is the error that we're getting
163:59 - here it's saying browser doesn't contain
164:02 - a valid field doesn't contain js can i
164:04 - remove this is that going to fix the
164:06 - problem
164:07 - okay you know what we'll look at the
164:09 - problem later on because right now we
164:11 - just need to finish writing this okay so
164:13 - now we want to add some state here so
164:16 - i'm going to say const this is going to
164:18 - be search text and then update search
164:22 - text
164:23 - okay update
164:24 - search
164:25 - text is equal to use state
164:28 - and the search text is going to be the
164:30 - text that we're searching for when we're
164:31 - searching for a user then we're going to
164:33 - say const search results
164:36 - as well as update search results or set
164:38 - search results or whatever we want to
164:40 - call this update
164:42 - search results i know i'm being
164:43 - inconsistent here uh but that's fine for
164:46 - right now you guys can change that if
164:47 - you want and for the search results
164:48 - we'll have an empty list for now
164:51 - and then uh we will
164:53 - just return the html of the page sorry
164:56 - so return and we're gonna have a div so
165:00 - we're going to say div
165:01 - class name is going to be equal to
165:03 - search i'll fill in all of the classes
165:05 - then we'll just write all of the css at
165:06 - once okay so we have search now let's
165:09 - make another div now this div is going
165:11 - to have a class name of search and then
165:14 - wrapper and then we will end the div tag
165:18 - and then inside of here we're going to
165:19 - have a form which is going to allow the
165:21 - user to enter their search text and then
165:23 - hit the button to search so we'll say
165:24 - form and then for the class name
165:28 - this will be equal to the search
165:31 - and then form
165:33 - okay
165:34 - then we'll go here and we'll say form
165:36 - dot and then control
165:38 - and then to end this tag we'll just end
165:40 - it within itself
165:42 - for the type here
165:44 - we are going to go
165:45 - with text so type equals text
165:48 - we're going to have an on input which
165:50 - will be a function
165:52 - this actually just be a function that
165:53 - updates the search text so we'll take e
165:55 - in here and we'll say
165:57 - update search text e.target.value
166:00 - and then we'll have a placeholder and
166:02 - we'll just type search
166:04 - for
166:05 - a
166:07 - username okay so let's write that
166:09 - username like that
166:11 - okay nice now continuing under the form
166:14 - control uh we actually want a form group
166:17 - to put this form control inside of so my
166:19 - apologies let's write that now form
166:21 - group
166:22 - okay let's copy the ending tag
166:25 - let's wrap it around our form control
166:27 - and then for the form group we'll have a
166:30 - class name and this is going to be equal
166:32 - to the search field just so that i can
166:35 - expand the size of the uh the field
166:37 - inside of here
166:38 - okay now outside of the form group we
166:42 - want to have a button to submit so we'll
166:44 - say button
166:45 - and then button
166:47 - and then here we'll just type
166:49 - search
166:50 - for the variant we are going to have
166:53 - this being equal to
166:55 - primary and then we'll have an on click
166:59 - which we'll call a function that i have
167:02 - yet to write
167:03 - okay i think that's all we need for
167:06 - right now
167:07 - then underneath the form but inside of
167:10 - the search wrapper i'm going to start
167:12 - displaying all of the search results
167:14 - so we're going to go here and say
167:17 - search results dot length and we're
167:19 - going to say if this is greater than
167:21 - zero then what i want to do
167:24 - is i want to
167:26 - render this so let's
167:28 - have this otherwise we're just going to
167:30 - render no or actually rather than
167:33 - rendering no we'll render a p tag and
167:35 - we'll just say no search results so
167:36 - let's say p
167:37 - slash p
167:39 - and then no
167:41 - search results
167:44 - okay and then inside of here we want to
167:47 - render a div
167:49 - so i'm going to say div
167:51 - slash div
167:52 - and then for the class name
167:55 - this is going to be the search
167:57 - results
167:59 - and then wrapper
168:01 - so let's fix wrapper here so that it has
168:03 - a hyphen and then inside of this div
168:05 - we're going to render a bunch of cards
168:07 - so we're going to have
168:09 - card
168:10 - card
168:11 - for the card we're going to have
168:13 - style equals and then we're just going
168:16 - to make the width 100
168:19 - okay
168:20 - and then inside of the card we're going
168:22 - to render a list group i understand this
168:24 - is a lot we'll walk through it after in
168:25 - a second but let's just get it all down
168:27 - i'm going to say the variant of this is
168:29 - going to be flush this is going to be
168:31 - just well a list group that will display
168:33 - all of the different list items that i
168:35 - have
168:36 - and then
168:37 - inside of here we're going to say search
168:39 - results
168:40 - dot map
168:42 - and we're going to map the i guess we'll
168:44 - call it item
168:46 - and idx
168:48 - and we'll map this to a profile list
168:51 - item so i'm going to say profile
168:53 - list item like that
168:55 - and then let's just end the tag here and
168:58 - we'll pass to this
168:59 - dot dot item which is going to contain
169:02 - all of the information
169:03 - about uh what do you call it an
169:05 - individual user that shows up in the
169:07 - search page now let's change width here
169:09 - so that's inside of a string
169:11 - okay profile list item and then we also
169:14 - want to pass an index here so i'm going
169:15 - to say idx is equal to idx just so we
169:18 - can render an index inside of the tag
169:20 - and we don't get a warning
169:22 - okay
169:23 - i understand that was a lot i think
169:25 - that's pretty much all that we need for
169:28 - this
169:29 - now let's write the two functions for
169:31 - the on click for the button
169:33 - as well as did we have another function
169:34 - that we needed to write
169:36 - actually no we already did this one for
169:37 - the on input so let's just write the
169:39 - search function
169:40 - so let's go function
169:42 - search
169:43 - okay and then let's just simply call
169:47 - search right here
169:48 - okay
169:49 - so i think that's good i'm not sure
169:51 - looks like we're getting some errors so
169:52 - let's see what the errors are okay so
169:55 - the error first is saying search.css
169:56 - does not exist
169:58 - so let's create that file
170:00 - search.css
170:02 - okay now that is created
170:04 - it's giving us another error it's saying
170:06 - profile list item does not exist okay
170:08 - that's because it's called profile item
170:10 - so let's change this to a profile item
170:14 - from profile item we don't need to call
170:16 - it list item
170:17 - and we're getting another error here it
170:19 - says profile list item is not defined
170:22 - um
170:23 - okay that would be right here let's
170:25 - change this to profile item
170:27 - save and it looks like all of our errors
170:29 - go away okay so let's open up our front
170:31 - end and this is what the search page
170:33 - looks like a little bit weird but we
170:35 - have the the search field expanding the
170:37 - entire width we have the search button
170:39 - that says no search results if i hit
170:41 - search it's going to say no search
170:42 - results again
170:43 - what we need to do now is add the
170:44 - styling
170:46 - and all of the classes for this so let's
170:48 - do that is going to be quite a bit of
170:49 - css
170:51 - let's start writing it out
170:54 - so we're going to say dot search
170:56 - and this is going to be display
170:59 - and then flex and then we're going to
171:01 - say the flex direction
171:04 - is a column and we're going to say align
171:08 - items
171:09 - and we're going to align them in the
171:10 - center okay we're going to have our
171:12 - search wrapper so i'm going to say
171:14 - search wrapper this is going to be
171:16 - display flex i'm going to say the flex
171:18 - direction
171:20 - is going to be column i'm going to say
171:22 - align items center i'm going to say
171:24 - justify content
171:26 - this will be center as well we're then
171:28 - going to have the min width which is
171:31 - equal to 30
171:33 - so take up a minimum of 30 percent of
171:34 - the screen uh why is that oh it's
171:37 - because i have a comma here so let's fix
171:39 - that then we're going to have a max
171:41 - width and the max width i'm going to
171:43 - make 500 pixels okay
171:46 - so let's see how this looks so far when
171:48 - i make these two changes
171:49 - notice here that the classes i did was
171:51 - this div and this div
171:53 - so let's have a look and notice that now
171:55 - we're taking up kind of the correct
171:56 - amount of size in the screen we do want
171:58 - to be a bit larger so we're going to
171:59 - have to affect some of the the other
172:01 - styles or some of the other classes
172:02 - we're going to have to change them but
172:04 - anyways you get kind of what we're
172:05 - looking at right now
172:07 - okay
172:08 - now that we have that let's do our
172:09 - search field so for the search field
172:12 - this is going to be where we actually
172:13 - have the input i'm just going to say
172:15 - whip is 100
172:17 - okay now after the search field we're
172:19 - going to go search form
172:21 - so let's go search form like that the
172:23 - search form is going to be display flex
172:26 - it's going to be margin and then top and
172:29 - rather than 20 pixels we're just going
172:30 - to go with 2em okay then we're going to
172:33 - go flex direction the flex direction
172:35 - here is going to be the row and then the
172:37 - width is going to be 100
172:39 - now before i do the rest of them let's
172:40 - actually just see what this looks like
172:42 - so far and now notice that we have this
172:44 - beside the search button so that's what
172:46 - i wanted to have and that's what this
172:48 - does right here when i put the flex
172:49 - direction to row it means all the items
172:51 - contained in this div or i guess this is
172:53 - the form are going to be aligned in a
172:55 - row rather than in a column so that's
172:57 - what i was doing to make it look like
172:59 - that okay now that we have that i'm
173:00 - going to go the search and then the
173:02 - results
173:03 - and then wrapper and this is going to be
173:06 - equal to margin top we're going to do
173:08 - 2em as well i'm going to say flex
173:10 - direction this is going to be column and
173:12 - then the width
173:14 - is going to be 100
173:15 - all right so after search results
173:17 - wrapper that should be all good so let's
173:19 - now have a look at what we get okay nice
173:21 - so that's exactly what i was expecting
173:23 - we have the margin from the top we have
173:25 - the text field and the button kind of
173:27 - beside each other we have this in the
173:28 - center
173:29 - now what we need to do is start actually
173:31 - getting the results and then displaying
173:33 - them by using where is it here the
173:36 - profile item so we can actually code out
173:39 - profile item first to display an
173:40 - individual profile item and then that
173:42 - way it's going to be very easy for us to
173:44 - just finish the the fetch commands there
173:46 - and allow us to actually get the
173:48 - different users that we search for so
173:50 - let's start here by importing and let's
173:53 - import a button let's import a list
173:55 - group and then let's do this from and
173:58 - this will be the react and then
174:00 - bootstrap and then we're going to say
174:01 - import and we're going to import use
174:04 - navigate
174:05 - and this will be from
174:07 - react and then router and then dom
174:10 - okay now we're exporting our profile
174:12 - item inside a profile item i want to
174:14 - take a few props i want a username i
174:16 - want a first name i want a last name i
174:19 - want a photo
174:21 - and i want the followers however for the
174:24 - first name i'm going to do it like this
174:26 - for the last name i'm going to do it
174:28 - like this and then the photo will be
174:29 - here now the reason i'm doing it in this
174:30 - way is so that these match exactly what
174:32 - the fields are that are going to be
174:34 - returned from our sanity api
174:36 - and that way i don't need to actually do
174:38 - any modifications or manually look for
174:39 - them okay now i'm going to say const
174:42 - like this is going to be use navigate or
174:45 - const navigate will be use navigate okay
174:48 - so const navigate equals use navigate
174:51 - and then we are just going to return
174:53 - what we want to display so i'm going to
174:55 - go here i'm going to say return we're
174:57 - going to return a list item
175:00 - okay
175:01 - this list item will have a div inside of
175:04 - it so we're going to say div
175:06 - the class name of this div is going to
175:08 - be equal to d flex this is going to be a
175:11 - line item center
175:13 - justify content and actually not center
175:15 - we're going to justify the content
175:16 - between
175:18 - then i'm going to end the div tag
175:20 - and inside of this div i want to have
175:22 - another div
175:25 - this div is going to have a class name
175:29 - which is equal to it's going to be d
175:31 - flex
175:32 - okay and then we're going to going to
175:34 - align the items in the center of this
175:36 - div
175:37 - and then we will put an image now the
175:38 - image here is going to be the profile
175:40 - photo of this user so i'm going to say
175:42 - image
175:43 - we'll end the image tag within itself
175:45 - and then we'll say src is equal to and
175:48 - we'll check if we have a photo now if we
175:50 - don't have a photo or if we do have a
175:52 - photo sorry then i'm going to say photo
175:54 - dot
175:55 - asset so let's do this
175:57 - dot asset dot url otherwise we'll just
176:00 - display a placeholder photo that kind of
176:02 - says okay this user doesn't have a photo
176:04 - but we're going to show something
176:05 - anyways just so it doesn't look empty
176:07 - now this is the url for the placeholder
176:09 - photo so what you can do here is just
176:10 - change this to be any size you want so
176:12 - in this case when i make it 80 it's
176:14 - going to make the size of this image 80
176:16 - pixels right so https colon slash less
176:18 - via dot placeholder dot com slash 80.
176:21 - there you go that's all we need for the
176:23 - source and then for this style here
176:25 - we're just going to say style is equal
176:27 - to and we're going to make the width of
176:28 - this 100
176:30 - and the height of this 100
176:32 - and you'll see that what ends up
176:34 - happening here is the height and width
176:36 - is going to be limited by the size of
176:38 - the container so when we expand the
176:39 - width and the height of 100 the image
176:41 - will just fill the amount of size that
176:43 - we allowed this div to take up
176:45 - okay hopefully that it makes sense now
176:48 - we're going to put another div here
176:51 - and this will just be a div to space out
176:53 - a few items so we'll say slash div
176:56 - and then inside of here we're going to
176:57 - put a p tag
176:59 - the class name
177:01 - is going to be equal to and this is
177:02 - going to be px2 and then m hyphen zero
177:05 - so that's margin zero so the px2 means
177:09 - that we're going to have padding and the
177:10 - on the left and the right hand side now
177:12 - two is just a certain amount of padding
177:15 - it's not two pixels it is more than that
177:17 - it's two multiplied by something i
177:18 - forget exactly what it's multiplied by
177:20 - it might be em but anyways that's what
177:22 - this is and then i'm saying margin 0. so
177:24 - i'm just eliminating the margin on this
177:26 - p tag here but i will have the padding
177:29 - and then inside of here i want to put
177:31 - the username so i'm going to say in a
177:32 - strong tags just so this is
177:35 - uh what do you call it like standing out
177:37 - i'm going to say
177:39 - the username okay
177:42 - then beneath this i want to have the
177:44 - first name and the last name of this
177:46 - user so i'm going to say p
177:48 - p and then we are going to do the same
177:50 - thing here we're gonna have px2 and m0
177:52 - so class name is equal to px2
177:55 - m0
177:57 - and we're going to check if we have a
177:59 - first name so i'm going to say
178:01 - first underscore name question mark if
178:04 - that's the case then we'll render the
178:05 - first name
178:07 - otherwise we're just going to render an
178:08 - empty string and then we're going to add
178:10 - this to a space plus and then the last
178:14 - name if we have a last name so i'm going
178:15 - to say
178:17 - last underscore name question mark and
178:20 - then last underscore name and then if we
178:22 - don't have last name it'll just be an
178:23 - empty string okay so that's what we need
178:25 - for rendering the first and last name
178:26 - again we're just checking if we have a
178:27 - first name if we do we'll show it and
178:29 - checking if we have a last name if we
178:30 - don't then we won't show it and if we do
178:32 - then we'll show it in concatenation with
178:34 - the first name and a space
178:36 - all right now that we have done that
178:38 - we're going to complete the next div so
178:41 - we want to put a div here and we're
178:43 - going to say div
178:45 - div for the class name of this div
178:48 - this is going to be
178:50 - d flex and then flex
178:53 - hyphen column
178:55 - okay and then inside of here we're going
178:57 - to put the number of followers that this
178:58 - user has in a p tag so i'm going to say
179:00 - p
179:02 - p and then we're going to do class name
179:05 - we're going to say px2
179:08 - okay
179:09 - and we don't actually need m0 we just
179:10 - need px2
179:12 - and then in a strong tag again we're
179:14 - going to say strong
179:17 - strong
179:18 - we will have
179:21 - followers which remember is going to be
179:23 - the number of followers not actually a
179:25 - list of followers at least the way that
179:26 - we're going to call this and then here i
179:28 - will put
179:29 - followers like that
179:31 - and then we're going to put a button
179:32 - below this
179:33 - which is going to ask us if we want to
179:35 - view the profile so i'm going to say
179:37 - button like that
179:39 - and we will just have the text be view
179:42 - the
179:43 - variant i will have equal to success so
179:45 - this is a green button and then the
179:47 - class name will be equal to px2 and then
179:51 - margin zero so we move the margin from
179:54 - that and then we're going to have an on
179:55 - click event
179:56 - and the on click is going to be equal to
179:59 - an arrow function and this arrow
180:01 - function is going to navigate us to the
180:03 - user's profile when we click on it so
180:04 - i'm going to say
180:06 - uh yeah i can do it actually without
180:09 - this i'll say
180:10 - navigate
180:11 - and it's going to be slash
180:13 - profile
180:15 - slash plus
180:17 - and then username like that all right i
180:20 - think that is all we need uh that looks
180:23 - good although i think i may have messed
180:25 - up some of the divs here
180:27 - this div i actually believe i need to
180:29 - take out of here and put it one level
180:31 - down okay that makes sense let me just
180:33 - walk through what we did because this
180:34 - was a lot
180:36 - so we created a list item and that is
180:38 - containing everything right then inside
180:40 - of the list item we have one main div
180:42 - and what this div role is is to just
180:44 - make sure everything is centered and to
180:46 - justify the content between now
180:47 - justifying the content between means
180:49 - we're going to push the first item to
180:51 - the left and the second item to the
180:53 - right hand side of the screen so we're
180:55 - justifying the content on the left and
180:57 - the right as opposed to centering that
180:59 - so we're centering it
181:00 - was it vertically but we are not
181:02 - centering it horizontally we're pushing
181:04 - this to the left-hand side and this to
181:05 - the right-hand side okay so the profile
181:07 - image goes to the left as well as the
181:09 - name and the username and then we have
181:10 - the followers in the view button going
181:12 - to the right-hand side so then we have
181:14 - this div right here which is going to
181:16 - align our image with this div so this
181:18 - would be the two flex children of the
181:20 - two flex items
181:22 - for this flex container and you'll see
181:24 - that we'll get an image and then what we
181:26 - will have is this div beside the image
181:29 - where we'll have the username as well as
181:31 - the first name and the last name and the
181:33 - first name and the last name should be
181:34 - stacked on top of each other because we
181:36 - have them as p tags
181:37 - okay then coming inside of here again we
181:39 - have another div
181:41 - now this is a flex column which means
181:43 - we're going to have everything aligned
181:44 - vertically
181:45 - and we're going to have our followers
181:47 - and then beneath that we're going to
181:48 - have the button okay hopefully that
181:50 - makes a bit of sense that's what we have
181:51 - for profile item search.css is finished
181:54 - so now we just need to finish this
181:56 - search field and we need to make a call
181:58 - to our api here so what we'll do inside
182:00 - of search is we'll say fetch
182:03 - and for the fetch we're going to say
182:05 - slash
182:06 - search
182:06 - for and then username we're going to say
182:09 - question mark text is equal to plus and
182:11 - then this will be the search text
182:14 - and then we'll just write uh what we'll
182:15 - do here and then we'll write the backend
182:17 - api call as well as the api endpoint on
182:21 - our node.js server our express server so
182:24 - we'll say res
182:25 - res.json
182:27 - dot then
182:28 - we're going to have data
182:30 - and then what we're going to do with the
182:32 - data is we're just going to update the
182:33 - search results so i can actually just
182:34 - say
182:36 - update and then this will be search
182:38 - results like that with the data
182:41 - and then
182:43 - we will have a dot catch
182:45 - we will catch our error
182:47 - and we'll just say console.error
182:50 - error like that
182:52 - and that should be good now i might have
182:53 - to do message i think it's fine if i
182:55 - just show the error it should actually
182:56 - display it for me and i will actually be
182:57 - able to view the message from that error
182:59 - object okay that's what we have for
183:01 - search so this component is pretty much
183:02 - done we now just need to go to index.js
183:04 - and we need to write
183:06 - this route so what was the route it was
183:07 - search for username with a query
183:09 - parameter of text
183:10 - so let's copy that let's go here
183:13 - let's say app dot get
183:16 - okay slash search for username
183:18 - then we're going to take in
183:20 - our
183:21 - request our response that will be an
183:23 - arrow function we want to get the text
183:26 - query parameter
183:27 - so i'm going to say const text
183:29 - equals and then this will be
183:32 - request dot query dot text
183:36 - and then we're going to call a function
183:38 - so we're going to say
183:40 - search
183:41 - for
183:43 - username
183:44 - we're going to pass text then dot then
183:47 - and then inside of here we're going to
183:49 - have data
183:51 - and we're going to say res.json data
183:53 - okay so now let's import this and then
183:55 - write that
183:56 - you guys should be getting used to doing
183:57 - this by now we've done it a few times
183:59 - let's go to api calls and now let's
184:02 - write the api call for that so we're
184:03 - going to say functions dot and then this
184:06 - is going to be search for username this
184:07 - is equal to an arrow function this is
184:09 - going to take in some text that we want
184:12 - to search for and then we are going to
184:15 - return
184:16 - sandyclient.fetch
184:18 - what is the issue here sorry this is
184:20 - not functions.function so
184:22 - functions.search username we're going to
184:24 - fetch we'll go with our backticks again
184:26 - we're going to do our asterisks and
184:29 - we're going to say underscore type
184:31 - is equal to
184:34 - and then user
184:35 - and what i want to do is match this text
184:38 - against any text for our user names so
184:42 - we're going to search for usernames in
184:43 - that box and essentially any text that i
184:46 - find i'm just going to see if it's
184:47 - contained in the username
184:48 - starting from the beginning and if it is
184:50 - then i will return that user so the way
184:52 - i do this here is i write and and
184:54 - username and then this is going to be
184:57 - match
184:58 - and then we'll write a variable here
184:59 - with the dollar sign and we'll say text
185:01 - and it will just pass text as the object
185:03 - here so we actually get that now what
185:05 - match says is if the start of the
185:08 - username matches with the text that we
185:11 - have right here then it will match i
185:13 - mean hopefully that's clear but if we
185:15 - have a username that's like
185:17 - hello then the text h e would match with
185:20 - that but the text e-l-l-o would not
185:22 - match because we didn't start with an h
185:24 - so maybe you want to search for it in a
185:26 - different way but i think this makes
185:27 - sense you're going to search like a few
185:28 - letters and then if the those letters
185:31 - are contained in the beginning of any
185:32 - username then it will show you all of
185:34 - the usernames that have that result
185:36 - right okay so here
185:38 - now we need to decide what we want to
185:40 - return so i'm going to return
185:42 - dot dot which just means everything and
185:44 - then again i'm going to return my
185:46 - followers
185:47 - and here for followers i'm going to
185:50 - count the number of followers that this
185:51 - user has now to count this again is not
185:53 - trivial because i need to find how many
185:55 - references there are from other users to
185:57 - this user because we're not storing
185:59 - followers on a user we're storing
186:01 - following so now i need to do another
186:04 - query and for this query i'm going to
186:05 - say underscore type is equal to and then
186:08 - this is going to be user
186:10 - okay so we'll go with user like that
186:13 - and then we're going to say and and
186:15 - references and then again we're going to
186:16 - go with the carrots and then dot
186:18 - underscore id so we're looking for how
186:20 - many users reference the current user
186:21 - that we got
186:23 - when we're searching through all of the
186:25 - different users okay
186:27 - then we're going to say photo
186:30 - and then this is going to be asset
186:32 - then we're going to have our arrow and
186:34 - then we're going to say underscore id
186:36 - and then url just like we've always done
186:39 - all right i believe that's it
186:40 - for search for username and now it
186:42 - should actually just be functioning i
186:44 - mean i always say that we've probably
186:45 - done something wrong to be honest but
186:47 - let's give it a shot and let's see and
186:50 - you can see i have the uh the bootstrap
186:51 - page open so i could remember what the x
186:53 - meant for px okay so let's go here it
186:56 - says list item is not defined
186:58 - that is inside of profile item so let's
187:00 - go to profile item
187:02 - and i had list groups sorry this needs
187:03 - to be list item
187:05 - so let's change that import
187:06 - now we should be good
187:08 - okay list item import is listed was not
187:10 - found in react bootstrap
187:12 - all right let's have a look here uh the
187:15 - issue is that i need to actually have
187:17 - this be list group and then rather than
187:19 - list item this is gonna be list group
187:22 - dot item okay so that
187:25 - makes sense list group
187:27 - dot item
187:29 - okay now that we have that let's go back
187:30 - and see if this works and let's hit
187:33 - search and we got an issue it says
187:34 - console.error is not a function where is
187:38 - that that is line 11
187:42 - in search
187:44 - ah this needs to be air
187:46 - okay well that means that we did get an
187:48 - error so that's no good and the reason
187:50 - we got an error is because we need to
187:51 - restart our api so let's restart it
187:54 - because we added some code to it i
187:55 - always forget to do that i always think
187:57 - it automatically restarts now let's try
187:59 - this again so let's refresh
188:02 - let's hit search
188:03 - and we should see some search results
188:05 - popping up here although it's not
188:07 - showing me anything
188:08 - so okay this is a little bit weird why
188:11 - i'm not getting anything at all
188:13 - uh let me have a look here and see what
188:15 - the problem is all right so i realized
188:17 - what the problem here is and it's
188:19 - actually in our api call so the query
188:21 - was working as we wrote it but i wrote
188:24 - it incorrectly because we need to put
188:25 - quotation marks around this text as well
188:28 - as an asterisk at the end that indicates
188:30 - that we're going to be matching using a
188:31 - regular expression pattern so the text
188:34 - and then anything following the text is
188:36 - what we're looking for so hopefully that
188:38 - makes sense but that is why that wasn't
188:40 - working because the query was wrong so
188:42 - we actually had our fetch request going
188:44 - through weren't getting any areas on the
188:46 - back end but we just need to fix this
188:47 - now so that we have the correct regular
188:49 - expression pattern okay so now that we
188:51 - have that let's refresh this and let's
188:54 - hit search and it should show us all of
188:57 - the the different accounts that we have
188:59 - and it's not because i have not
189:00 - restarted my
189:03 - api here so let's restart that
189:05 - now let's give a nice refresh
189:07 - let's hit search
189:09 - and let's see if it gives us any results
189:11 - okay back to the drawing board here not
189:13 - sure what's going wrong now all right so
189:15 - just messing around here because i was
189:16 - really confused why this wasn't working
189:18 - and it looks like the way that we were
189:20 - embedding our text variable in here just
189:22 - wasn't happening properly so what i did
189:24 - here is changed it so now i'm using a
189:26 - dollar sign and just directly embedding
189:28 - text as opposed to using the variable
189:30 - inside of sani client.fetch not exactly
189:32 - sure why this is an issue but i think it
189:34 - has to do with the quotation marks here
189:36 - on how they were being used i think we
189:37 - were having double quotes being placed
189:39 - inside of here for some reason and maybe
189:41 - i didn't need to quote this string
189:43 - anyways i'm just going to go with this
189:44 - because i know this is the solution and
189:46 - now it looks like it's working so i'm
189:48 - going to go back to search here and
189:49 - notice that i've just been printing out
189:50 - the data and the reason i was doing that
189:52 - is because even though now this is
189:53 - working and i restarted my api you'll
189:55 - see that i'm not actually seeing any
189:57 - content here even though i'm being
189:58 - returned all of my different list items
190:00 - which are the the strings that match
190:02 - with this user and if i search again
190:04 - here you'll see that we get even more
190:06 - which is all the users that we created
190:08 - so clearly i'm not rendering this
190:09 - properly so let's have a look here and
190:11 - see why the rendering is incorrect and
190:13 - let me stop actually printing this out
190:15 - because we don't need to do that anymore
190:17 - so this is a very silly issue here but
190:19 - inside of my search results.map i'm not
190:21 - returning anything because of the fact
190:23 - that i have this curly brace here so
190:25 - instead i'm going to remove it and just
190:27 - move this up so it's directly in line
190:29 - with the arrow and now okay it
190:30 - automatically adds a parenthesis but now
190:32 - i'll actually be returning this item
190:34 - before i wasn't returning it i just had
190:36 - it inside of there and so since it
190:38 - wasn't being returned while i wasn't
190:39 - rendering anything on the screen so
190:41 - let's go back now and see and notice
190:43 - that we're actually getting well what we
190:44 - expected now for some reason the images
190:47 - down here are larger than the ones up
190:49 - here
190:50 - that's a little bit strange to me so
190:51 - what i can do is just manually set the
190:53 - width to fix that problem so let's go
190:56 - and do that
190:57 - where is our image our image is in
191:01 - profile item
191:03 - so here rather than making the width 100
191:05 - and the height 100
191:06 - in fact i didn't want to make the height
191:08 - 100 i just want the width to be 100
191:11 - so now let's see if that fixes anything
191:13 - at all uh doesn't look like it so let's
191:16 - just manually set the width let's say
191:18 - width is going to be something like 80
191:19 - pixels
191:20 - okay let's see now
191:22 - and there we go so now it's fixed and
191:24 - all of our images are uniform width and
191:25 - i think 80 pixels is actually a decent
191:27 - width and we can see as i move this it's
191:29 - going to dynamically resize and
191:31 - everything looks good now let's try
191:33 - searching for some other usernames here
191:35 - so i'll go with something like joey when
191:37 - i do that we get a list that just
191:38 - contains the names that have joey and if
191:41 - i search with something like t
191:43 - now we'll get all the ones that start
191:44 - with t if we go with tim we should just
191:47 - get three accounts nice and then if i
191:49 - hit view here it brings me to the
191:51 - profile page which is going to be the
191:52 - next thing that we're tackling in this
191:54 - tutorial okay so searching is done
191:56 - signing in is done signing up is done
191:58 - viewing post is done so now we're going
192:00 - to tackle is the profile page now the
192:03 - profile page is
192:04 - fairly complicated i won't lie to you
192:06 - and the reason why it's complicated is
192:08 - because we need a way to follow a user
192:10 - unfollow a user and to edit our profile
192:13 - so let's start coding out profile i'm
192:15 - going to go to the profile component
192:18 - and there is going to be a lot of
192:19 - styling here as well because we want to
192:20 - display all of the posts that a user has
192:23 - on their profile as well right so i'm
192:25 - going to start by importing everything
192:26 - that i need i'm going to import
192:29 - use state
192:31 - use effect
192:32 - this will be from
192:34 - react i'm then going to import use
192:37 - params so import
192:40 - use
192:42 - params like that now what this will give
192:44 - me access to is the parameters that were
192:46 - coming from my path so when i go to say
192:48 - tim i'll get access to the tim part
192:50 - which then i can then use to grab the
192:52 - information about the current user so
192:54 - i'm going to say import use params from
192:57 - react router dom okay and then i'm going
193:01 - to import the button
193:03 - from react bootstrap so let's do that
193:06 - from
193:07 - and then react and then bootstrap
193:10 - okay
193:11 - then i'm going to import edit profile
193:15 - from edit profile which we'll use later
193:18 - on
193:19 - and then i'm going to import the css for
193:21 - this which i've not yet created so i'll
193:23 - have to make that but it's going to be
193:24 - dot dot css slash and then profile.css
193:29 - let's go here and make the css file so
193:31 - it's going to be profile.css
193:33 - i will write all of our css inside of
193:35 - here okay so going back to profile.js so
193:38 - we can now set up the state here and the
193:40 - pieces of state that i want is going to
193:42 - be the profile data the post that this
193:44 - user has if we're following this user or
193:47 - not because if we're not following it
193:49 - then we need to show a follow button if
193:51 - we are following then we need to show a
193:54 - different button a button that's going
193:55 - to say unfollow right if we are the
193:57 - owner of this profile or not if we own
193:59 - this profile then we need to show an
194:01 - edit button so we can edit the profile
194:03 - and then we need to know if we're in the
194:04 - editing mode or not because i'm going to
194:06 - display i think it's called a modal it's
194:08 - kind of like a pop-up where we'll be
194:10 - able to edit the profile without leaving
194:12 - the page so those are the three pieces
194:14 - of state that i need not three pieces
194:16 - that's more than three i believe it's
194:17 - five pieces but i'm gonna say const
194:19 - profile and then data and then set and
194:23 - then profile data this will be equal to
194:25 - use and then state and we'll just put an
194:28 - empty object inside of here for now
194:30 - and then we're going to say const and
194:31 - the next thing we need is the posts so
194:33 - posts and then
194:35 - set posts like that this will be equal
194:37 - to use state
194:39 - okay
194:40 - nice and then we'll say const and this
194:43 - will be
194:44 - following and then we'll say set
194:46 - following
194:48 - like that and we're going to say is
194:50 - equal to
194:51 - and then use state and for now we'll
194:54 - make it false
194:55 - then we are going to say const and we're
194:58 - going to say owner so are we the owner
195:00 - of this or not
195:01 - and then set owner
195:03 - and then this will be equal to use state
195:05 - false and then we're going to say const
195:08 - editing telling us if we're editing or
195:10 - not and then set editing is equal to use
195:12 - stay false and then finally we're going
195:14 - to say const params is equal to use
195:17 - params
195:18 - like that which will give us access
195:20 - again to the profile that we're
195:22 - currently looking at
195:24 - okay
195:24 - now what i'm going to do is write a few
195:26 - functions just that we have them defined
195:28 - and then we'll fill them in so the first
195:30 - function we want is going to be update
195:31 - following this will tell us if we're
195:33 - following or not so i'm going to say
195:35 - update following
195:36 - i will take in profile here and for now
195:39 - we just won't do anything
195:40 - then i'm going to say function this is
195:42 - going to be update profile so this is
195:44 - just going to grab the profile
195:46 - information for a specific username
195:49 - okay and then we're going to say
195:51 - function and this will be follow click
195:54 - so if we click the follow button what do
195:56 - we do here
195:57 - okay
195:58 - and i think that's all we need for our
196:01 - functions nevermind we need one more and
196:03 - this is going to be hide
196:05 - edit
196:06 - callback
196:08 - and again we'll fill these in later i
196:09 - just wanted to code them out for right
196:10 - now
196:11 - so the first thing i'm going to do is
196:12 - just say if the profile data is equal to
196:16 - an empty object
196:18 - then what i want to do is just return
196:20 - nothing
196:22 - and the reason i'm going to do this is
196:23 - because actually we're going to return
196:25 - no is because if we don't have any
196:27 - profile data then that means that the
196:29 - profile that we went to does not exist
196:31 - so i will show an alert for that but i
196:32 - just don't want to render anything on
196:34 - the screen so we'll just return no
196:36 - otherwise though if that's not the case
196:38 - then we can start actually coding out
196:39 - the content of the profile page now
196:41 - again this is going to be fairly
196:42 - complicated a lot of css just because we
196:44 - need to design kind of like a decent
196:46 - looking profile with everything laid out
196:48 - properly so i'll code out everything and
196:49 - then i will try my best to walk through
196:51 - it but there is some understanding of
196:53 - css you have to have to understand how
196:55 - this works so for now we're going to say
196:57 - class name is equal to profile
197:00 - okay then we're going to do an h4 tag
197:02 - for the name of the profile now you can
197:04 - make this smaller if you want but i
197:05 - think h4 is good and we're going to say
197:07 - at and then this is going to be the
197:09 - profile data dot
197:12 - and then this will be the username of
197:14 - the profile
197:15 - then beneath that i'm going to have a
197:16 - div
197:18 - and for this div we're going to have a
197:20 - class name which is equal to the profile
197:22 - data now the profile data is going to be
197:24 - the number of posts the number of
197:26 - followers and the number of following
197:28 - uh it also actually i'm not sure if in
197:30 - this div we're going to hold the post or
197:32 - not but either way we'll have this div
197:34 - now inside of here we want an image the
197:36 - image is going to be the profile image
197:38 - right of this user we want to see that
197:40 - so i'm going to say image src is equal
197:43 - to and then this will be
197:45 - profile data
197:47 - dot photo
197:49 - question mark so if we do have a photo
197:50 - then we will display it so we'll say
197:52 - profile data dot photo dot asset dot url
197:58 - otherwise though we're gonna
198:00 - show the placeholder image which i'm
198:02 - just gonna grab from profile item right
198:05 - here
198:06 - okay so let's grab that and paste it
198:08 - here
198:09 - then uh we can add an id for this we'll
198:12 - say id is equal to and this will be the
198:14 - profile
198:16 - underscore image
198:17 - we could have made this a class but i
198:19 - think the id is fine
198:20 - and that will allow us to then change
198:22 - the size of this which we'll do later on
198:24 - okay so now that we have the username
198:26 - and we have the image the next thing
198:29 - that we want to display is what i'm
198:30 - going to call some vertical data so i'm
198:32 - going to say
198:33 - div
198:35 - div
198:36 - it's going to be class name equal
198:39 - to vertical
198:40 - and then data like that
198:42 - and then inside of here i'm going to put
198:43 - a p tag
198:45 - and in the first p tag what i want to
198:46 - put is the number of posts that this
198:48 - user has so i'm going to say
198:51 - strong
198:53 - strong
198:54 - and we're going to say posts and then
198:56 - beneath this i want to display the
198:58 - number of posts in an h4 tag so i'm just
199:00 - going to say h4 and then i'm going to go
199:03 - here and say that this will be
199:07 - so here i'm going to say posts
199:09 - question mark and then post dot length
199:12 - so if we do have some posts then i will
199:14 - display what the post doll length is
199:16 - otherwise i will display zero just in
199:19 - case for some reason when we try to get
199:20 - the post we get an error we'll just show
199:21 - zero okay
199:23 - then the next thing that i want to
199:25 - display is some more vertical data so
199:28 - i'm going to copy this because what this
199:30 - vertical data class will do is it will
199:33 - just align both of these so they're
199:34 - going to be on top of each other and be
199:36 - centered so other than posts i want the
199:38 - number of followers
199:41 - so let's go followers
199:43 - let's then say
199:45 - data
199:47 - dot followers and then this is going to
199:49 - be
199:51 - profile data
199:53 - dot followers dot length and otherwise
199:56 - we'll display zero okay copying this
199:58 - again we're going to have one more piece
200:00 - of vertical data which is going to be
200:01 - the following so now rather than
200:03 - followers it's going to be following and
200:06 - then this will be profile data dot
200:09 - and then i think we can just do
200:10 - following because following will already
200:11 - be the count because we'll get that from
200:13 - the query
200:14 - from the back end whereas here
200:16 - the followers will be a list or an array
200:18 - and so we just need to count the number
200:19 - of elements that are inside of that
200:22 - okay
200:23 - now that we have that we want to write
200:25 - the follow button so i'm going to say
200:27 - div
200:28 - class name is equal to and this will be
200:31 - the follow
200:33 - button all right so for the follow
200:35 - button there's a few things i need to do
200:37 - here hence why the logic is going to be
200:38 - kind of long i need to check if we're
200:40 - signed in and if we're signed in then
200:42 - i'm going to allow the user if it's not
200:44 - their profile to follow or unfollow and
200:47 - if it is our current profile so like the
200:49 - profile we're looking at is ours then
200:50 - we'll be able to edit it now if we're
200:52 - not signed in then we won't show any
200:54 - button because you can't interact with
200:55 - the profile if you're not signed into an
200:57 - account
200:58 - so let's do this we're going to say
201:01 - user
201:02 - and and not owner so if we are signed in
201:05 - and we are not the owner
201:07 - then we'll do this
201:08 - sorry this will be a question mark we'll
201:10 - do this otherwise we will not display
201:12 - anything and inside of here we're just
201:13 - going to show a button
201:16 - now the button will say
201:18 - follow or unfollow
201:20 - but the text of the button is going to
201:21 - be variable based on if we're following
201:24 - so i'm going to say following question
201:25 - mark if we are following then it will
201:27 - say unfollow
201:29 - otherwise it will say follow
201:31 - okay and then for the variant again
201:34 - that's going to be determined on if we
201:36 - are following or not so i'm going to say
201:38 - variant
201:39 - and then this is going to be
201:41 - following question mark
201:43 - if we are following then it will be a
201:47 - danger because unfollowing will be red
201:49 - and if we are not following then it will
201:51 - be a success
201:52 - as saying that you know we want to fall
201:54 - so we'll have a green button to follow
201:55 - and a red button to unfollow i think
201:57 - that makes sense
201:58 - uh for the button we need an on click as
202:00 - well so let's have the on click equal to
202:04 - and then this is going to be the follow
202:06 - button pressed what did i call this
202:09 - follow click sorry so let's go follow
202:11 - click like that
202:13 - all right i think that's it for the
202:16 - button
202:17 - that looks good now
202:19 - now beneath here i want to potentially
202:22 - render another button that says edit so
202:24 - i'm going to say
202:25 - if user
202:27 - and and so let's go and and owner here
202:30 - then i want to display a button so
202:32 - question mark otherwise no
202:35 - and this button
202:37 - is going to say the following it's going
202:39 - to say edit
202:41 - the variant is going to be primary so
202:44 - it'll be blue and then the on click will
202:47 - be and i guess we'll just go with
202:50 - set editing here so i'm going to say
202:53 - this is an arrow function
202:55 - and we'll set editing
202:57 - true
202:58 - and when we set this to true then we
203:00 - will dynamically render that editing
203:02 - page
203:03 - and so we'll show the editing page once
203:05 - uh this here this piece of state comes
203:07 - to true
203:08 - okay so i think that's all we need for
203:11 - the edit button that looks good to me
203:14 - now that we have done this we have
203:16 - written a lot let's uh go through what
203:17 - we did so far so we have our profile
203:19 - that's inside of this div we then have
203:22 - an h4 here which is going to be the name
203:23 - of the profile so the username we then
203:25 - have profile data so all of that goes
203:27 - inside of this div right here and we
203:30 - have an image which is the profile image
203:32 - we then have a bunch of vertical data
203:34 - divs which are storing the number of
203:36 - posts number of followers number of
203:37 - following then we're going to have a
203:39 - button so all of these divs here these
203:42 - four divs because they're inside of this
203:44 - profile data div they're going to be
203:46 - aligned in a row beside each other with
203:48 - a certain amount of spacing that's why i
203:50 - put them in here same with the profile
203:52 - image okay so now that we have that we
203:54 - want to go down one and we want to
203:57 - create a profile bio so i'm going to
203:59 - make another div here
204:01 - and i'm going to say div
204:03 - div
204:05 - class name is equal to and this will be
204:09 - profile
204:11 - and then bio like that and the bio is
204:14 - going to be like your first name last
204:15 - name and then the description that you
204:16 - had
204:17 - so we'll make a div
204:19 - div
204:21 - class name is equal to and then the
204:23 - first class that we'll have here is the
204:25 - profile name
204:27 - okay and then inside of the profile name
204:29 - i'm going to have a strong tag i'm going
204:31 - to display the first and last name now i
204:34 - can actually just copy what i had for
204:35 - profile item so let's copy this here
204:38 - first name last name and we'll just
204:39 - modify it a little bit so actually
204:42 - profile data dot first name okay and
204:45 - then if that's the case we'll display
204:47 - oops did not mean to copy that whole
204:49 - line if that's the case we'll display
204:51 - the profile data.firstname now the
204:53 - reason i'm doing this is because you
204:54 - could only have a first name or you
204:55 - could only have a last name well if you
204:57 - don't have one of them i don't want to
204:58 - get an error by trying to access it and
205:00 - then not seeing it there
205:02 - okay so i think that's good for our
205:04 - profile data or for our first and last
205:07 - name sorry now that we've done that
205:09 - let's do our bio so in another div i'm
205:12 - going to say
205:13 - class name is equal to and this will be
205:15 - the profile text
205:18 - and then inside of here we'll go profile
205:21 - data dot and then this will be the bio
205:24 - now
205:26 - i think i might be crazy here because i
205:27 - keep saying bio when i think i mean
205:29 - description but let me go to my database
205:33 - and let's go to user and we have bio
205:37 - okay so it is bio in here
205:40 - so when i'm making a user i guess i
205:42 - didn't enter the bio field have i been
205:44 - looking at the description of a user at
205:46 - all recently no the description would
205:48 - have been of the post okay so my
205:49 - apologies i'm just going a little bit
205:51 - crazy after coding for this long
205:53 - anyways we'll continue here so we have
205:54 - profile attacks we're going to show the
205:56 - profile data dot bio that looks good to
205:59 - me
205:59 - and then that is all good for right now
206:02 - okay the last thing that we want to show
206:04 - here in another div is going to be all
206:06 - of the posts of the user
206:08 - so we're going to have a div i'm going
206:10 - to say that the class name of this div
206:12 - so let's code that out first is going to
206:15 - be equal to profile and then this is
206:17 - going to be posts and then wrapper
206:20 - and then we're going to have another
206:21 - class or another div
206:23 - with a class name of profile posts
206:26 - let's
206:26 - end the div
206:29 - okay and then inside of here i want to
206:31 - map all of the posts so i'm going to say
206:34 - posts and we're going to say and and
206:36 - post dot length
206:38 - so let's go post dot length
206:42 - is greater than zero if that's the case
206:44 - then i want to map all my posts i'm
206:47 - going to say post.map
206:49 - and we're going to map
206:51 - the
206:52 - post
206:53 - and the idx
206:56 - and then here what we want to return
206:59 - is an image for the post so i'm going to
207:01 - say image src is equal to post dot
207:06 - photo dot asset dot url
207:10 - and that should be fine because if we
207:11 - have a post we know we're going to have
207:12 - an image for it and then we need to end
207:15 - the image tag and we need to say key is
207:18 - equal to and then this is going to be
207:19 - idx
207:21 - okay now i've done something wrong here
207:23 - with the brackets
207:25 - let's see how i can fix this okay so
207:28 - we're returning
207:29 - we have our image tag which is closing
207:32 - this should be this closing tag
207:35 - let's see what's wrong alright so the
207:36 - issue here is that i just need to add
207:38 - something
207:39 - where i do colon null just so we have
207:42 - another option so if this is not the
207:44 - case if this condition is not the case
207:46 - then i want to display no now what's the
207:48 - error here expected a colon no i think
207:51 - it's expecting a question mark
207:53 - but when i save it it's auto formatting
207:55 - okay it looks like that's all good
207:56 - okay apologies that was a lot of code to
207:59 - write at once let's remove this final
208:02 - return statement but we've completed the
208:03 - html for this page now really what we
208:06 - need to do is fill in these functions
208:08 - and we also need to write all of the css
208:10 - now we can't really write the css or at
208:12 - least see what it's doing until we have
208:14 - these functions filled in and we're
208:15 - getting some profile data getting some
208:17 - posts and getting all of this so let's
208:20 - start by writing the function which is
208:22 - going to be update profile so i'm going
208:24 - to go to update profile here and what
208:27 - i'm going to do in here is i'm going to
208:29 - fetch
208:29 - and i'm going to fetch from slash and
208:33 - then get profile which we've actually
208:35 - already written
208:36 - and i'm going to say user is equal to
208:38 - plus and then user all right and
208:40 - actually sorry it's going to be user
208:42 - name and we're going to get username
208:43 - from our params we're going to call this
208:45 - function from somewhere else which i'll
208:46 - do in a minute
208:48 - okay so we have fetch slash get profile
208:50 - user username i'm going to say dot then
208:53 - we're going to get our res
208:54 - we're going to return the res.json
208:58 - then we're going to say then again
209:00 - we're going to get data
209:01 - and we're going to return the data so
209:03 - we're going to say actually we're not
209:04 - going to return the data we're going to
209:05 - set the profile data of data
209:08 - okay so that's what we need for there
209:10 - however we need to do a few things just
209:12 - in case any errors occur here so let's
209:14 - add our curly braces
209:16 - and the first thing that i want to check
209:18 - is if we have any profile data so i'm
209:20 - going to say if
209:21 - and this is going to be data
209:22 - and i keep writing the wrong brackets
209:24 - i'm going to say if data
209:26 - dot length
209:28 - is equal to 0 then i'm going to add an
209:30 - alert and i'm going to get the alert
209:32 - from in here so i'm going to take in
209:34 - user and i'm going to take in set
209:37 - alert
209:38 - so i'm going to say set
209:40 - alerts like that and the alert that we
209:42 - want to send is that this user does not
209:44 - exist so if we don't get any length from
209:46 - our data that means there was no user
209:47 - that existed with the username that
209:49 - we're trying to get the profile for
209:51 - so we set the alert with the variant
209:54 - equal to or equal to danger
209:57 - and the message equal to no user
210:03 - no user with this
210:05 - username exists okay or i guess we could
210:08 - say profile does not exist that's
210:10 - probably a bit shorter profile does not
210:12 - exist
210:14 - uh not exist okay nice so that's what we
210:17 - have for set alert and then we can just
210:18 - write return here
210:20 - and then down here we will set the
210:22 - profile data however before we set the
210:24 - profile data i want to fetch all of the
210:26 - posts that this user has and i have to
210:28 - do that in a separate request based on
210:30 - the way that i'm going to write these
210:31 - queries so i'm going to say fetch and
210:33 - this is going to be get so slash
210:36 - get posts and this is going to be
210:38 - question mark user equals plus and then
210:41 - username
210:42 - okay and then here i'm going to say then
210:45 - i'm going to get my response
210:46 - i'm going to return my res.json
210:50 - okay then i'm going to say then
210:52 - i'm going to get my data
210:54 - and i'm going to handle the data
210:56 - so again what we're doing here is we're
210:58 - getting all of the information about a
210:59 - specific user so we're just getting
211:01 - their profile
211:02 - then once we get that assuming that we
211:04 - actually have a user with that name
211:06 - we're going to get all the posts from
211:07 - that user
211:08 - and once we get the post
211:10 - i'm going to change this actually so
211:12 - rather than this saying data this is
211:14 - going to be
211:16 - profile data
211:18 - okay and we'll change this to be
211:20 - profile data just a little bit more
211:22 - clear and actually no we don't want to
211:23 - shadow the above name
211:24 - so let's leave this as data
211:27 - let's leave this as data as well but
211:29 - let's change this to be posts just so
211:31 - it's clear that we have data up here and
211:33 - we have posts here because we're going
211:34 - to have to use them both so i'm going to
211:35 - set the profile data of the data that we
211:37 - got here but then the post i'm going to
211:40 - say set post
211:42 - and that's going to be the post that we
211:43 - got all right so now that we've done
211:45 - this i just need to make a few
211:46 - modifications first i need to make this
211:47 - data 0 because again our data is going
211:49 - to be a list even though it only
211:50 - contains one element so i want to get
211:52 - the first element then i'm going to call
211:54 - this update following function so i'm
211:55 - going to say update
211:57 - following and i'm going to call this
211:58 - with data0
212:00 - and this will update if the current user
212:02 - is following this user so we know if we
212:04 - have to display a follow button or an
212:05 - unfollow button
212:07 - and then lastly
212:08 - i'm going to say set owner and i'm just
212:10 - going to say is the current user which
212:12 - is stored in the variable user
212:14 - equal to data zero and i guess we'll do
212:17 - three equal signs because this is
212:18 - javascript
212:19 - dot
212:20 - and then username so this is saying is
212:22 - the current user the profile that we
212:25 - just got if it is then we want to show
212:27 - the editing button or show the edit
212:29 - button at least and so that's why we're
212:30 - we're setting this here
212:32 - okay
212:33 - now that we've done that we can just add
212:34 - a cache so we'll add actually i guess we
212:37 - can just add one catch right here so we
212:39 - can say dot catch we can say error
212:41 - then we can say console
212:44 - dot
212:45 - error
212:46 - and we will just display this error
212:49 - this here should actually handle almost
212:51 - all of the errors for us so if we get a
212:52 - length of zero then we'll just say
212:54 - profile does not exist otherwise we can
212:56 - just log the error to the console
212:58 - okay
212:59 - now that we've done that i guess we need
213:00 - to write the get post request and then
213:02 - once we write the get post request we're
213:04 - going to have to write this function
213:05 - here for update following and actually i
213:07 - think we can just write update following
213:09 - first because this is pretty
213:10 - straightforward so for the update
213:12 - following all i need to do is just loop
213:14 - through all of the followers of this
213:15 - profile and see if the current user is
213:17 - in this so i'm going to say 4 and this
213:19 - will be let and we'll go with
213:22 - follower of and then this will be
213:25 - profile dot followers
213:28 - then i'm going to say if
213:30 - follower dot username is equal equal
213:33 - equal to the user
213:36 - then what we'll do is say set
213:39 - following and we'll set that equal to
213:41 - true
213:42 - and then we'll break
213:44 - actually not break we're going to return
213:46 - sorry
213:47 - and then otherwise so if we get to the
213:50 - end of the four loop we'll say set
213:52 - following
213:53 - and then false
213:55 - okay so this just sets the state again
213:56 - telling us if we are following or not
213:59 - now what i need to do is add a use
214:00 - effect here so i'm going to say use
214:02 - effect
214:06 - and i'm just going to call this update
214:08 - profile so i'm going to say update
214:10 - profile and then what i need to pass
214:12 - here is the
214:13 - dot and then username like that and then
214:16 - when i want to run this again
214:19 - is whenever the params.username changes
214:22 - or whenever the current user changes so
214:24 - if i log out that i need to refresh the
214:25 - page again
214:26 - so we change the follow button actually
214:29 - we remove the follow button off the
214:30 - screen if the user were to sign out or
214:32 - we show the follow button if the user
214:34 - were to sign in okay so the next thing
214:36 - we're going to do after this is editing
214:37 - but i want to write this get post
214:40 - first which will just give us all the
214:41 - posts of a specific user so let's go to
214:43 - api calls and actually not api calls
214:46 - let's go to index.js and let's start
214:48 - writing out this function so get post is
214:50 - going to be pretty straightforward we're
214:52 - just going to say app dot get it's going
214:55 - to be slash get and then post like that
214:58 - and then we're going to do
214:59 - request
215:01 - response
215:02 - and we're going to get the query
215:03 - parameter which is the username so i'm
215:05 - going to say
215:06 - const
215:08 - user is equal to request.query.user
215:11 - that looks good to me then we're going
215:13 - to say get
215:14 - posts
215:15 - pass the user
215:17 - and then you already know what we're
215:18 - going to do here dot then i'm going to
215:20 - take in our data i'm going to say
215:22 - res.json data okay so now let's import
215:24 - this and then write the function
215:26 - so we're going to go with get posts and
215:28 - then we're going to go to our where is
215:31 - this api calls and start writing this
215:34 - so functions.getposts
215:37 - and not a following just get posts we're
215:39 - going to take in a user equal to user
215:42 - equal to an arrow function we're going
215:45 - to return the sandy client.fetch
215:47 - and we need to fetch again another query
215:50 - here so this is going to be the
215:51 - asterisks square brackets underscore
215:53 - type is equal to and this will be post
215:57 - and then we want to say and and the
216:00 - author of this post
216:02 - and then the username
216:04 - is equal to and then this will be pound
216:08 - or not pound dollar sign user
216:10 - and then we'll pass our username
216:13 - actually i can just change the parameter
216:15 - name to be username and then that will
216:17 - fix the problem for us okay now we just
216:19 - need to write the data that we want to
216:20 - get so for the data here i want to get
216:23 - dot dot so everything as well as the
216:26 - followers or sorry not as well as the
216:28 - followers but as well as the username so
216:30 - i'm going to say username and then this
216:32 - is going to be equal to author
216:35 - and then
216:36 - username and then i want to get the
216:38 - photo so i'm going to say photo
216:40 - and this will be
216:42 - asset
216:44 - and then the asset is going to go to
216:46 - underscore id
216:48 - and url okay that's all we need so what
216:50 - this query is going to do specifically
216:53 - it's going to get all of the posts where
216:54 - the username of the author of that post
216:56 - is equal to our user or our user name
216:59 - sorry
217:00 - and yeah that's all we need and then
217:02 - we're going to get the username of the
217:03 - author just as a field that we've added
217:05 - as well as everything else and then the
217:07 - photo the asset the id the url
217:10 - okay so i think that's all good so let's
217:12 - rerun our api here
217:14 - so let's go and stop this
217:17 - okay let's go npm start
217:19 - and then is there an error here we do
217:21 - have one error uh what is the error that
217:23 - we're getting it's saying the dot css
217:26 - doesn't exist
217:28 - okay uh what is the problem looks like
217:31 - it imported a css file that we don't
217:33 - have
217:34 - so let's go to profile
217:35 - and dots ah this is why i just need a
217:38 - slash here
217:39 - now when i add the slash it should fix
217:41 - the problem and notice our error goes
217:43 - away and we're only having warnings okay
217:45 - let's try this now
217:46 - go to the front end
217:47 - uh let's refresh and notice that we get
217:50 - an empty profile photo we get an at we
217:52 - get post followers zero zero zero and it
217:55 - says uncaught type error
217:56 - res.arraybuffer.js
217:58 - is not a function it looks like i must
218:00 - have messed something up there so let's
218:01 - go to line 40 here and what is the issue
218:04 - i have array buffer why the heck do i
218:05 - have array buffer autocomplete must have
218:07 - did that to me
218:09 - let's save that let's go back here
218:11 - and notice we get ten one two three four
218:13 - five zero post zero followers zero
218:15 - following now let's make a post
218:17 - uh please sign in to make a post okay
218:19 - fair enough let's go tim
218:20 - log in
218:22 - and let's go post let's choose a file uh
218:25 - let's just post this thing i don't know
218:27 - what this is okay hello
218:29 - make a post
218:31 - all right
218:32 - we go to our feed here we're not gonna
218:34 - see it because we're not following
218:35 - ourselves that makes sense
218:37 - now let's go to our profile by clicking
218:39 - on this and notice that it shows us
218:42 - okay so it's actually showing us all of
218:43 - the posts unless maybe i posted the
218:46 - dwayne derock johnson from tim as well
218:48 - although i don't think that i did
218:52 - maybe i did i mean we can check that so
218:53 - let's go here let's go to post
218:56 - let's go to dwayne and i did post it
218:58 - from him okay so that makes sense so
218:59 - it's showing us all of the posts here
219:01 - that we had as well as number posts
219:03 - number followers number following and
219:04 - the only thing i'm not seeing right now
219:06 - is the button
219:07 - and i'm not sure why i'm not seeing that
219:09 - so let's see how we get the button to
219:11 - show up and then let's do the css to fix
219:13 - this
219:14 - and then we will continue
219:16 - okay so where is my button
219:18 - my button is right here i'm saying user
219:21 - and owner and ah the reason for this is
219:23 - i'm not passing user to this uh profile
219:27 - component and i'm also not passing set
219:29 - alert so let's fix that
219:31 - let's go to app
219:32 - let's go here to our profile and let's
219:35 - say user is equal to and let's pass user
219:38 - and then let's go set alert is equal to
219:41 - set alert
219:43 - and we're all good okay now let's go
219:45 - back
219:46 - and now notice we're getting the edit
219:48 - button because this is our profile
219:50 - awesome when i click that it doesn't do
219:51 - anything but that's what we expected now
219:53 - let's go here to search let's search
219:56 - let's go to say joey and now notice it
219:58 - shows the follow button here because we
220:00 - are not following this user obviously we
220:02 - need to make the follow button do
220:03 - something we're making some really good
220:04 - progress so far on the profile page
220:08 - all right so now we need to add
220:09 - following we need to add the styling so
220:11 - let's do the styling first i keep
220:13 - forgetting to do that it's also because
220:15 - i hate styling as i'm sure many of you
220:16 - do as well let's start writing out all
220:18 - these classes
220:20 - the first class that i'm going to write
220:21 - is my vertical data i'm going to say
220:23 - this is display
220:25 - flex i'm going to say this is align
220:28 - items and then we're going to align this
220:30 - in the center uh we need our semicolon
220:33 - here
220:34 - okay we need the justify content so
220:37 - we're going to say justify content
220:39 - center and then we're going to say the
220:41 - flex direction is going to be columns so
220:43 - they go above each other so let's have a
220:44 - look what happened now when we add that
220:46 - notice that now our posts
220:48 - followers and following are all stacked
220:50 - above each other which is what we wanted
220:52 - okay the next thing we want is dot
220:53 - profile
220:55 - so 4. profile
220:56 - i'm going to say display flex
220:58 - we're going to say flex direction here
221:01 - is going to be row
221:03 - okay then we're going to say justify
221:05 - content this is going to be center
221:08 - align items this is going to be center
221:10 - i'm also going to put a flex wrap here
221:12 - where i say flex wrap and this is going
221:14 - to be wrap
221:16 - okay let's have a look now
221:17 - and notice that everything kind of gets
221:19 - pushed in the middle here a little bit
221:20 - strange but we're making some progress
221:22 - all right next i actually need to write
221:24 - a class that i forgot to add so what i'm
221:26 - going to do is go back to profile here
221:28 - and add another div that i forgot to add
221:30 - here so
221:31 - right inside of profile i'm going to say
221:33 - div
221:34 - class name is equal to this is going to
221:37 - be profile hyphen banner
221:40 - okay
221:41 - so this is going to contain everything
221:43 - up to but not including the posts so i'm
221:45 - going to put the ending div tag right
221:47 - here and now we have a profile banner
221:49 - div so now i'm going to go to
221:50 - profile.css and i'm going to code this
221:53 - now the profile banner again just
221:54 - contains kind of the top banner aspect
221:56 - that's everything other than the post
221:58 - for this user
222:00 - okay so we have profile banner what we
222:02 - want for profile banner is the following
222:04 - we're going to have a min width so we're
222:07 - going to say min
222:09 - width is going to be 30
222:11 - of the screen or of the parent we're
222:13 - going to say the max width will be 500
222:17 - pixels again this is not the best way to
222:19 - code all this out but it will make it
222:20 - look decent enough for our our purposes
222:23 - i'm going to say this is display flex
222:25 - i'm going to say flex direction and this
222:27 - is going to be column
222:29 - okay i'm going to go with align items so
222:33 - align item center we're going to go with
222:35 - the justify content center as well and
222:37 - then we're going to go column gap which
222:39 - is how much of a gap there is between
222:40 - each column and this is going to be 2em
222:43 - okay now let's have a look here and
222:45 - notice it brings it all back here over
222:47 - to the left hand side don't worry as i
222:49 - code out the rest of it it will continue
222:50 - to fix it so that is profile banner now
222:53 - we need our profile data so i'm going to
222:55 - say profile data and this is going to be
222:58 - display
222:59 - and this will be flex and then we want
223:02 - to have a flex direction of row and then
223:05 - we want to have a column gap here
223:07 - as well of 2em okay so continuing here
223:11 - let's go dot follow and then button
223:15 - and for the follow button i want to have
223:17 - the display of flex and i want to have a
223:20 - line item center
223:22 - okay then we're going to have our
223:24 - profile image which i'm referencing with
223:26 - id don't really know why i went with id
223:28 - as opposed to class but it's done now
223:30 - we're going to say max width is a
223:32 - hundred percent
223:33 - so let's fix that and then min width is
223:36 - and this is going to be a hundred
223:38 - percent
223:40 - okay
223:41 - apologies if you hear my little kid in
223:43 - here that is meowing sitting right
223:44 - beside me i know you guys can't see her
223:46 - but uh she's meowing and i'm not sure if
223:47 - it's picking up on the mic or not
223:49 - we're going to continue here we're going
223:50 - to have profile bio
223:52 - this is going to be display flex and
223:55 - then we're going to say flex direction
223:57 - this is going to be the column
224:00 - okay and then we're going to go dot
224:02 - profile
224:03 - posts
224:04 - and then this is going to be hyphen
224:06 - wrapper
224:08 - this is going to have a min width and
224:10 - not of none but of 30 percent
224:13 - it is going to have a max width of 500
224:16 - pixels so 500 px and then it's going to
224:19 - have display flex
224:22 - okay and the flex direction is going to
224:25 - be column so let's fix that
224:27 - okay then for our profile posts i want
224:29 - to have a grid to display them so that
224:31 - it's nice and organized so i'm going to
224:33 - have profile posts
224:35 - and then inside of here we're going to
224:36 - have display
224:38 - and this is going to be as a grid and
224:40 - then i'm going to say grid
224:42 - template columns and i'm going to say
224:44 - one fractional unit
224:46 - one fractional unit one fractional unit
224:48 - and what this will do is make it so that
224:50 - we have three posts in every single row
224:52 - of our grid uh that's kind of just what
224:54 - this is doing now if i wanted four i
224:56 - would do one more fractional unit if i
224:57 - wanted to i would remove one i'm not
224:59 - going to explain much more than that
225:01 - that's what that line does though and
225:02 - then finally i'm going to say profile
225:05 - posts and then for all of the image tags
225:07 - inside of there
225:08 - i'm going to say the width can be a
225:10 - hundred percent and the min width will
225:13 - be a hundred percent as well
225:15 - okay min width
225:17 - and then a hundred percent okay again
225:19 - i'm not a master of css i'm sure some
225:21 - things here don't make complete sense
225:23 - and there's probably better ways to do
225:24 - stuff but this is what i got working
225:26 - before and i'm not really down to change
225:28 - it right now okay so let's go here and
225:30 - let's refresh okay so that looks better
225:32 - after i refresh but this image is way
225:34 - too big so i gotta find a way to make
225:36 - the image smaller so let me have a look
225:38 - here and then i'll be right back all
225:40 - right so i realized what the issue is i
225:42 - had this at a hundred percent when i
225:43 - meant to have a hundred pixels for my
225:45 - profile image
225:46 - so let's fix that
225:48 - make it pixels not percent and there we
225:50 - go that is looking much better now
225:52 - it is a little bit offset like it's over
225:54 - to the left when i want it to be in the
225:56 - center
225:57 - so again let me just have a quick peek
225:58 - here and see why we're getting that
226:00 - alright so i see the issue here for my
226:02 - align items in my profile banner i'm
226:05 - actually going to align them at flex
226:06 - start which means i'm going to align
226:08 - them at the beginning of the container
226:10 - and i think that should make the fix so
226:12 - let's have a look at this now and that
226:14 - looks a bit better so these items have
226:16 - now been pushed over to the left we
226:17 - still have this kind of offset to the
226:19 - left when it should be in the middle of
226:20 - the screen
226:21 - so let me continue look for the issue
226:22 - here i'll be right back all right so i
226:24 - found the other issue here had to do
226:26 - with my profile so i had the flex
226:27 - direction as row when it needs to be
226:29 - column uh when we make that column now
226:31 - it should fix this and put it in the
226:33 - center of the screen as you can see it
226:35 - does and when i resize it everything is
226:37 - dynamic and looks okay
226:39 - all right there we go now let's go to
226:40 - tim's profile because there's some
226:42 - images there and let's see if these are
226:44 - laid out nicer now so for tim now we get
226:47 - our two images
226:48 - not perfect but i can live with that for
226:50 - right now it's good enough again we're
226:52 - not focusing a ton on the styling but i
226:54 - can see the different images
226:55 - and actually maybe one thing that i do
226:57 - want to do is add a little bit of a
226:58 - break here between the images as well as
227:02 - the bio here so let's implement that
227:04 - and the way that we can do that is we
227:06 - can go to uh
227:07 - profile here and we can just add in a
227:09 - break div in between here so i can say
227:11 - div
227:12 - i can say class name
227:15 - is equal to break
227:17 - and then if i go to my profile.css let's
227:20 - just write that so i'm going to say dot
227:21 - break
227:22 - and for dot break this will be pretty
227:24 - straightforward we're just going to say
227:26 - flex and then basis is going to be 100
227:31 - okay and then we're going to say that
227:34 - the height of this is going to be 2 em
227:36 - which is how much we want to break by
227:37 - now the flex base is 100 we'll just make
227:39 - it so it takes up 100 of the width of
227:42 - the screen and then the height 2em will
227:44 - just be well the height and so it should
227:45 - break uh okay that is actually not what
227:48 - i was expecting was going to happen
227:51 - uh let's change something here okay so
227:54 - the reason that happened is because my
227:56 - profile flex direction is column i know
227:58 - i just changed that but now that i've
227:59 - added the break in i think it messed
228:01 - some stuff up so let's change this back
228:02 - to row now and when i change this back
228:05 - to row you should see that now we get
228:06 - them aligned in a row and okay there we
228:08 - go so that's better all right now we
228:09 - have our space we have our name we have
228:11 - this let's sign in now let's now go to
228:15 - our profile
228:16 - and now notice it says the edit button
228:18 - shows this shows our name
228:20 - very nice okay everything is working as
228:22 - i expected now we want to be able to
228:24 - edit the profile and then follow and
228:26 - unfollow and then we will be done with
228:27 - this project so let's start by coding
228:30 - out the edit profile now as i said i'm
228:32 - going to put that in a separate
228:33 - component and this is going to pop up a
228:36 - pop-up or a modal that's going to show
228:38 - us all of the different fields so we can
228:40 - edit so we can edit the profile photo we
228:42 - can edit the bio we can edit the first
228:45 - name and the last name so what i want to
228:47 - do for edit profile is start with my
228:49 - imports so i'm going to say import
228:52 - use state and then this will be
228:54 - from and react and then i'm going to
228:58 - import the button
229:01 - the form and the modal from and then
229:04 - this is going to be react and then
229:06 - bootstrap okay
229:08 - nice now that we have that let's take in
229:10 - some props here so the props that i want
229:12 - for the profile is going to be should i
229:14 - show this
229:15 - what's the hide callback
229:17 - so when i hide this modal by clicking
229:20 - out of it what's the callback function
229:21 - for that
229:22 - then we have user
229:24 - we have not add alert but set alert and
229:28 - then we have the profile data because we
229:30 - need to populate the fields
229:32 - with kind of the default data that's
229:34 - already there and then see if we need to
229:35 - update it or not so what i'm going to do
229:37 - now is say my state so i'm going to put
229:40 - a state for the bio so i'm going to say
229:42 - const bio and then set bio is equal to
229:45 - use states we'll say
229:47 - use state and then this will be the
229:49 - profile data dot bio so that's what the
229:53 - default value is going to be for it
229:54 - whatever our current profile data bio is
229:57 - then we'll have const and this will be
229:59 - the first name and this will be set
230:02 - first name equal to use state profile
230:04 - data dot first underscore name okay and
230:07 - then we're going to have const
230:10 - last name set
230:11 - last name is equal to use state
230:15 - so let's do that profile data dot
230:19 - last underscore name
230:21 - okay then we're going to have const and
230:24 - this will be a file this will be set
230:26 - file and this will be use
230:29 - state
230:30 - and this will be an empty string and the
230:32 - file is going to be for our profile
230:33 - picture
230:34 - and i'll show you how we update the
230:36 - profile photo
230:37 - later on okay then we are going to write
230:40 - the html for our page or for this modal
230:43 - for the component so i'm going to return
230:46 - a modal now this is kind of a pop-up on
230:48 - the screen that's what i've been saying
230:49 - a bunch of times now now do i want to
230:51 - show this well i'm going to say show is
230:53 - equal to and then show so if this is
230:55 - false we won't show it if it's true then
230:57 - we will show it i'm going to say on hide
230:59 - so when this is hidden what do we do
231:01 - well we're going to call
231:03 - the hide callback function which will be
231:05 - passed to us from wherever we render
231:07 - this component
231:09 - then inside of here i'm going to say
231:10 - modal
231:11 - dot header and for the header we're
231:14 - going to add a close button which will
231:16 - allow us to close this and i'm going to
231:18 - add a title so i'm going to say
231:20 - modal dot
231:22 - and then title and then this will be
231:25 - edit
231:26 - profile
231:27 - and i think that's all we need for the
231:29 - title okay now outside of the header
231:31 - we're going to add a body i'm going to
231:33 - say modal dot body of course this will
231:35 - be the main body of that
231:38 - and then inside of here we're going to
231:39 - add a form so add form and inside of the
231:42 - form we're going to have a group so form
231:44 - dot group
231:45 - okay and then the class name here
231:48 - is going to be margin bottom three or
231:51 - mb3
231:53 - then we are going to update the profile
231:55 - photo if we have one so i'm going to say
231:58 - profile data
232:00 - dot photo question mark so do we have a
232:03 - photo
232:04 - in sorry and and not file
232:07 - now the reason i need this is because
232:08 - what i want to show for the image is
232:11 - whatever the photo is currently of our
232:13 - profile and if we don't have a photo
232:16 - then i want to show the file that the
232:17 - user uploaded however if we have a photo
232:19 - and we have a file meaning that the user
232:21 - just changed the profile photo then i
232:24 - want to show the file that they uploaded
232:25 - so that's what i'm checking do we have a
232:27 - photo and do we not have a file if we do
232:29 - let's show the photo otherwise if we
232:30 - have a file let's show the file that
232:32 - they upload okay so if that's the case
232:34 - then what i'm going to show here is an
232:36 - image tag and inside the image tag the
232:38 - src is going to be
232:40 - the profile data dot photo dot url sorry
232:45 - dot asset dot url and then the class
232:49 - name is going to be equal to so for the
232:51 - class name let's go with upload image
232:54 - and then we will write the html for that
232:56 - or write the css sorry for that in a
232:57 - minute
232:58 - now otherwise
233:00 - okay so for the else here what i need to
233:02 - do is render a different image so i'm
233:04 - going to say image
233:05 - it's going to be src and this is going
233:08 - to be equal to the following let's just
233:10 - end the tag here so i can
233:12 - save this hopefully oh okay let's do
233:14 - this
233:15 - okay now it's going to be a little bit
233:17 - easier for you guys to see so i'm going
233:18 - to say src
233:19 - is equal to and i'm going to check here
233:21 - if we have a file so i'm going to say
233:23 - file question mark if we do have a file
233:25 - then i'm going to say url dot create
233:27 - object and then this will be url and we
233:30 - will put inside of here the file
233:33 - otherwise we'll just have null here for
233:36 - the source of our image so we won't
233:37 - actually show anything
233:38 - and i'll say class name is equal to and
233:41 - again this will be upload image which
233:42 - we're going to need to write the css for
233:44 - in a minute
233:45 - okay so that is for our image now let's
233:48 - copy this form group and let's put
233:49 - another one and let's copy it a few
233:52 - times because we're going to have three
233:53 - more inputs here so for the next one i
233:56 - just want a regular input which is going
233:57 - to be a file input so i'm going to say
233:59 - input
234:00 - this is going to be type equal to file
234:04 - and then what do i want next i want it
234:06 - on change and the on change is going to
234:09 - be equal to an arrow function
234:11 - and the arrow function is simply going
234:12 - to say set file and this is going to be
234:15 - e but we need to take an e here
234:17 - dot
234:18 - target dot files at index zero which
234:21 - we've already seen so that'll give us
234:22 - the file that we actually uploaded here
234:25 - and then we can say accepts or actually
234:28 - let's go look at our create post
234:30 - and try to remember here what we had
234:33 - okay so it says accept image
234:35 - slash and then asterisks okay so that's
234:37 - what we want for this as well so edit
234:38 - profile let's paste that in
234:41 - okay that's it for that form group now
234:43 - we're also going to have another one
234:44 - which i forgot about in the next form
234:47 - group though we are going to have a form
234:49 - control for the first name i guess so
234:51 - we'll have form control
234:53 - and then we'll just end the tag inside
234:54 - of itself we'll say type is equal to
234:57 - text we'll say
234:59 - placeholder is equal to first name and
235:02 - then we're going to say that the default
235:04 - value
235:05 - is going to be equal to
235:08 - profile
235:09 - data dot first underscore name okay
235:13 - and on input
235:15 - this is going to be equal to an arrow
235:17 - function where we're going to update the
235:18 - first name so we're going to say
235:21 - set
235:22 - first
235:22 - name e
235:24 - dot target
235:26 - dot value
235:27 - okay so let's copy this and let's paste
235:30 - the same thing here but now we're going
235:31 - to do this for the last name
235:33 - so the default value will be last name
235:36 - and then we will do rather than set
235:38 - first name
235:40 - set last name okay lastly we want the
235:42 - bio so we can actually paste this in as
235:44 - well and now we're just going to say bio
235:47 - this will be dot
235:48 - bio and then rather than setting the
235:50 - first name we will set the you guessed
235:53 - it bio
235:54 - okay last thing we need here is a button
235:57 - so inside of the form i'm gonna put a
235:59 - div
236:00 - i'm gonna put another div here
236:04 - and then i'm gonna say that this is a
236:06 - button
236:07 - okay
236:08 - the
236:09 - variant will be equal to
236:11 - uh primary so we have a blue button here
236:14 - the type
236:15 - is a button although i don't actually
236:17 - think i even need that one it's just a
236:18 - default button and i'm going to say on
236:20 - click is equal to and then i'm going to
236:22 - make a function here
236:24 - so i'm going to say function
236:26 - update
236:27 - profile
236:29 - okay and we'll do something inside of
236:30 - here
236:31 - for now though let's
236:33 - just call
236:35 - update profile okay so that should be
236:37 - the html of the entire page i believe
236:39 - that's all good what is the issue here
236:41 - with the return i expecting that uh okay
236:45 - i think this is fine um yeah just give
236:48 - me a warning okay so i guess my vs code
236:50 - is just tripping out now i think that's
236:51 - all good for right now now we need to do
236:53 - is code out this update profile function
236:57 - so inside of this function
236:58 - since i need to actually send a file
237:01 - right if we have a file to update the uh
237:04 - what do you call it the profile image i
237:05 - need to create my form data so i'm going
237:07 - to say const form data is equal to new
237:10 - form
237:11 - and data like that
237:13 - okay then i'm going to say form data
237:17 - dot append and we're going to append the
237:20 - file
237:21 - with the file and the form data
237:25 - dot append and we're going to append the
237:27 - user
237:29 - user and this is actually going to be
237:33 - the
237:34 - user that we want to update the profile
237:36 - for which will just be our current user
237:37 - so actually that makes sense we can just
237:38 - use user inside of here all right so
237:40 - then i'm going to continue and say form
237:42 - data dot append
237:45 - we're going to append the first name so
237:47 - let's do that the first underscore name
237:50 - this will match up with first name which
237:51 - is our state variable and then form data
237:55 - dot append we're going to append the
237:57 - last name
237:59 - and the last name and then we're going
238:01 - to do the bio so form data
238:04 - dot append and then bio
238:07 - bio like that all right that should be
238:10 - all good
238:11 - then we're going to say const
238:14 - request
238:15 - options
238:16 - and we're going to say that this is
238:18 - equal to
238:20 - and this is going to be method
238:22 - and this is going to be post now we also
238:24 - could maybe make this a patch method but
238:26 - i think it's fine just make it a post
238:27 - because we're going to be uploading a
238:28 - file as well and then for the body we're
238:32 - going to have our form data
238:34 - okay then we're going to fetch an
238:36 - endpoint we need to write this endpoint
238:37 - still but we might as well just write
238:38 - the code now and this is going to be
238:40 - update profile we're going to pass to
238:43 - this the request options and we're going
238:45 - to say dot then
238:47 - we're going to get the response and
238:49 - we're going to return the response.json
238:51 - we're going to say dot then
238:53 - we're going to get the data
238:55 - and then we're going to do something
238:57 - with the data
238:58 - now what we're going to do specifically
239:00 - is we're going to add an alert
239:02 - and we're going to say actually is it
239:04 - add alert what did i call this set alert
239:06 - i keep saying add when i mean set okay
239:09 - so we're going to set an alert and we're
239:11 - going to say here
239:13 - the variant
239:15 - and this is going to be equal to success
239:18 - okay and then the message
239:21 - and this is going to be equal to profile
239:24 - updated
239:26 - successfully
239:28 - okay now what i'm about to do here is
239:30 - going to seem a little bit weird but
239:32 - it's going to save us from having to
239:34 - make another request to the api to
239:36 - retrieve the new image
239:38 - for our our profile image if we uploaded
239:41 - one so explain why we need this but i'm
239:43 - going to say if file so if we did
239:46 - actually upload a new file then i'm
239:47 - going to say data dot and i'm going to
239:49 - add a new key here it's going to be
239:51 - image url is equal to url dot object or
239:55 - dot create object
239:57 - so it's going to be create object url
239:59 - and i'm going to pass to a file now the
240:01 - point of this is that i'm going to now
240:03 - call the hide callback function
240:06 - with my data and i've now added this
240:08 - image url field to it and so now from
240:11 - the component that's rendering this
240:13 - which is going to be the profile
240:14 - component i can grab the image that was
240:17 - uploaded here in the modal and without
240:19 - having to wait to get a response from
240:21 - the api
240:22 - at least to send another request get the
240:24 - new profile data get the new image etc
240:27 - what i'll do is just immediately update
240:29 - it on the profile and so it's going to
240:31 - seem like it's a lot faster because what
240:33 - happens here is when i send this request
240:35 - it's going to return to me all of the
240:37 - data that i updated on my object it's
240:40 - also going to return just the data of
240:42 - the object in general the issue is that
240:44 - it's not going to return to me a url for
240:46 - the image that i uploaded it's only
240:48 - returning to me the id and the reference
240:50 - of that image so since i already have
240:52 - the image path here i'm going to say
240:54 - data.imageurl is equal to and i create a
240:56 - url for it and then i display it
240:58 - immediately again this is saving me a
241:00 - request to the api so once we start
241:03 - getting through this it'll make more
241:05 - sense but again we're just adding the
241:07 - url to the image we uploaded to this
241:09 - data so now i can grab that from the
241:11 - profile component and i can just display
241:13 - that instantly and so it looks like we
241:14 - updated very quickly when we don't have
241:17 - to send a second request to the api to
241:20 - get the new image
241:21 - hopefully i'm clear there let's add a
241:23 - cache though just in case something goes
241:24 - wrong so i'm going to say error
241:26 - and then here we will add an alert
241:28 - actually so i'll say
241:30 - set alerts caught myself that time and
241:33 - let's go with
241:35 - variant
241:36 - and this will be
241:38 - danger
241:39 - and then the message will be error
241:43 - dot message and then we also need to
241:45 - call the hide callback function from
241:47 - here as well
241:48 - but this time we're not going to have
241:49 - any data to return so i'm going to do
241:51 - semicolon and then i'm going to call the
241:53 - hide callback
241:54 - and i'm just going to pass to it
241:57 - undefined
241:59 - because we have no data
242:00 - okay so that's it for the update profile
242:04 - function now that's really going to
242:06 - complete this component now what we need
242:08 - to do is write the update profile api
242:11 - endpoint so let's go to actually
242:13 - index.js first and inside of index.js
242:16 - we're going to write this so we're going
242:18 - to say app
242:19 - dot post now this is going to be slash
242:22 - and this will be update
242:24 - profile now here we want to accept a
242:26 - file although we're not sure if we're
242:27 - always going to get a file
242:29 - but we could because when you're
242:30 - updating the profile the idea here is
242:32 - that you can update some aspects of the
242:34 - profile but you don't have to right you
242:36 - might only update the first name you
242:37 - might only update the last name so we
242:38 - have to be careful here how we're
242:40 - updating this and making sure we don't
242:41 - clear any fields
242:43 - if we didn't change those so i'm going
242:45 - to say upload.file
242:46 - and then inside of here actually sorry
242:48 - not upload.file upload.single
242:51 - this will be a file and then we're going
242:53 - to say
242:55 - let's go here
242:56 - request
242:57 - response
242:59 - and then this will be equal to an arrow
243:01 - function
243:02 - inside of here i'm going to get the body
243:03 - so i'm going to say const body is equal
243:06 - to and then request
243:08 - dot body like that all right so now that
243:11 - we've done that i want to call a
243:13 - function
243:14 - called update
243:16 - profile and i need to pass to this
243:18 - mybody.user
243:21 - mybody dot and then this is gonna be the
243:23 - first name
243:25 - my body dot
243:27 - last name okay so let's go last name
243:29 - like that
243:30 - my body dot and then this is gonna be
243:33 - the bio
243:34 - okay
243:35 - and then finally we're going to pass the
243:38 - request
243:40 - dot is it image or is it file
243:43 - i believe it is simply file okay then
243:46 - we're going to have dot then
243:48 - data
243:50 - and then we're going to return
243:53 - res.json like that all right so let me
243:55 - just quickly fix this so that we don't
243:57 - have these uh
243:59 - things here because we don't need those
244:01 - now what i wanted to mention is that
244:03 - throughout this video i haven't really
244:04 - been showing you all the responses from
244:06 - the sandy client now they're just
244:07 - standard json responses that are going
244:09 - to contain all of the fields from our
244:11 - database but now at this point it's
244:13 - going to be a little bit different
244:14 - because we're going to actually be
244:15 - updating an object and when we update an
244:18 - object it's going to return to us kind
244:19 - of a different looking response now from
244:22 - the sandy documentation you can see
244:23 - exactly how all of that works but i just
244:25 - wanted to mention that if you want to
244:27 - look at what the exact response is you
244:29 - can come in here and you can just print
244:30 - out the data before you return res.json
244:33 - and then that way you'll be able to see
244:35 - well exactly what the response is in the
244:36 - console or specifically you'll see it
244:39 - actually from your api
244:40 - like when i was here when i was printing
244:42 - out a file that i was uploading in fact
244:44 - let me remove that i have a console.log
244:46 - somewhere uh where is it yeah right here
244:48 - console.log request.file okay anyways we
244:50 - have update profile we have this
244:53 - function so let's now import the
244:55 - function
244:56 - okay
244:57 - and then i just want to copy this just
245:00 - so i don't forget the different
245:01 - arguments and let's go into api calls
245:04 - and let's start writing this
245:06 - so i'm going to say
245:07 - actually not const
245:09 - functions dot and then this is going to
245:11 - be update
245:14 - profile like that this will be equal to
245:16 - an arrow function and then we're going
245:18 - to take in the first name
245:20 - the last name
245:22 - the bio
245:23 - we also need the user so first we'll
245:25 - take in the user first name last name
245:26 - bio
245:28 - and then this is going to be the file or
245:29 - we'll call it the image
245:32 - this will go to an arrow function and
245:34 - inside of here we need to make what's
245:35 - known as a patch request uh with the
245:37 - sandy api client so that we can update
245:39 - the profile so to update the profile
245:42 - first we're going to check if we have an
245:44 - image because if we have an image we
245:45 - need to upload that image and then use
245:47 - the new id of that image as kind of an
245:49 - update field when we're updating the
245:51 - profile of the user right so i'm going
245:53 - to say if
245:54 - image like that so if we actually have
245:56 - something then we're going to return the
245:58 - sandy client and this is going to be dot
246:01 - assets right and then dot upload
246:05 - and we're going to do exactly what we
246:06 - did before so sandyclient.assets.upload
246:09 - we're going to upload an image we're
246:11 - going to create a read stream this is
246:14 - going to be of the image dot
246:16 - path
246:17 - and in fact uh actually yeah we'll just
246:20 - cut it out because why not we have the
246:22 - file name here
246:25 - and this will be the
246:26 - base name of the image
246:30 - dot path
246:31 - okay and then from here we're gonna say
246:33 - dot then
246:34 - and then we're gonna have some data
246:38 - and then what we're going to do with
246:39 - this data is we're actually going to say
246:42 - functions
246:43 - dot get
246:44 - user
246:46 - id like that we're going to get the user
246:49 - dot then
246:50 - i know this is a lot i'm going to save
246:52 - in a second actually let's save right
246:53 - now just so we can see this a little bit
246:54 - easier okay that's a bit easier to read
246:56 - so i now have dot then
246:58 - now i'm going to get ids
247:00 - and then
247:01 - from the ids
247:02 - excuse me i need to say sanity
247:05 - like this
247:07 - so sanctity sanity
247:09 - client
247:10 - dot and then this is going to be patch
247:13 - and i'm going to patch ids 0 dot
247:15 - underscore id don't worry i'll explain
247:18 - all of this in one minute and i am going
247:20 - to set something specifically i'm going
247:23 - to set all the fields that i want to
247:25 - update
247:26 - so let's write that out but first let me
247:29 - just fix this so i don't have my curly
247:31 - brace because i can't have that here
247:32 - that's going to crash my program
247:34 - okay so dot set and this is the way that
247:37 - we update a field okay so let me just
247:38 - slow down for one second because i'm
247:40 - getting lost a bit myself so we have
247:42 - if image if we do have an image we're
247:44 - gonna start by uploading the image which
247:46 - we already know how to do
247:47 - once we upload the image it's gonna
247:48 - return to us some data that data is
247:50 - going to contain the id of the image
247:52 - which we're going to use to reference it
247:54 - okay so that's where we're first
247:55 - uploading the image then we're saying
247:57 - functions.getuserid
247:58 - we've written this i guess very close to
248:00 - the top yeah it's right here just
248:03 - returns to us information about a user
248:05 - specifically just the id but it's going
248:07 - to give it to us in a list so we want to
248:09 - get id 0 and then dot underscore id
248:12 - which will actually be the id of this
248:14 - user
248:15 - then we're saying dot set
248:17 - because we're patching here so patch
248:18 - says we're going to be updating and then
248:20 - we're setting and when we set a field
248:22 - we're just changing the value of that
248:24 - field to be whatever we want so then i'm
248:26 - going to write an object here and i'm
248:28 - just going to put the names of all my
248:29 - fields so i'm going to say first name
248:31 - last name
248:32 - bio and then for the image we're going
248:35 - to have to set it a little bit
248:36 - differently
248:37 - so we're going to say the image
248:38 - actually not the image sorry the photo
248:40 - because that's the name in our database
248:42 - and this is going to be equal to an
248:44 - asset
248:45 - and the asset is going to be a reference
248:48 - so we're going to say underscore ref and
248:50 - this is going to reference data dot
248:52 - underscore id okay let's save this now
248:54 - it's a little bit easier to read
248:56 - so again we upload the image we get the
248:59 - data associated with the image which
249:00 - will allow us to get the id we get the
249:01 - user id of the current user
249:04 - and then we say sandy client dot patch
249:06 - and we're patching what id or what
249:08 - document we're patching the document
249:10 - with the id of this user so when you use
249:12 - dot patch you pass in an id
249:14 - of the document that you want to patch
249:16 - and set different fields on and then i'm
249:18 - saying dot set
249:19 - so dot set allows me to actually set the
249:21 - values so i pass an object here i pass
249:23 - first name
249:24 - last name bio and then i'm passing photo
249:27 - and this is going to be an asset that's
249:29 - referencing the image that we just
249:31 - uploaded which we're going to be able to
249:32 - get the idea of from data
249:35 - okay and then what we do is we type dot
249:37 - commit and when we do that it's going to
249:39 - commit all of the changes
249:41 - to the sanity database all right now we
249:43 - also have the option to unset i won't
249:46 - show you that again you can reference it
249:47 - from the documentation but setting is
249:49 - how we can make an update to the object
249:50 - and override those fields
249:52 - nice
249:53 - now that we have that
249:54 - we need to write an else because if we
249:56 - don't have an image
249:58 - then we're not going to upload an image
250:00 - in fact if we don't have an image we're
250:01 - just going to do this so i'm going to
250:02 - copy this part right here
250:04 - actually it'll just be this first part
250:07 - and we're going to say
250:10 - return like that this is going to be
250:12 - functions.getuserid
250:14 - dot then and then inside of here what
250:15 - we're returning is sandyclient.patch
250:18 - id0id set first name last name bio but
250:22 - we're not going to set the photo this
250:23 - time
250:24 - because well we don't have a photo so
250:26 - there's no reason for us to set the
250:27 - photo right pretty straightforward okay
250:29 - so i think that's all we need to do
250:30 - inside of here
250:32 - that looks good for update profile
250:33 - definitely the most complicated one that
250:35 - we had to do thus far
250:37 - now we will go back to edit profile
250:39 - and i guess we can actually just give it
250:41 - a test although i need to render this
250:43 - component from inside of profile so i am
250:46 - importing edit profile from edit profile
250:48 - so what i'm going to do now is go here
250:52 - to
250:53 - right before profile and i'm going to
250:56 - reddit the render the edit profile
250:58 - component so i'm going to say edit
250:59 - profile and then what i need to pass to
251:01 - the profile is quite a few things so i'm
251:03 - going to say user is equal to and then
251:06 - user
251:07 - i'm going to pass show which is going to
251:09 - be equal to
251:11 - editing so if we're editing or show it
251:13 - oh we're going to show it if we're not
251:14 - then we are not obviously and then i'm
251:17 - going to pass my hide
251:19 - callback okay so hide callback is gonna
251:22 - be equal to and then what did we call
251:25 - this i think we called this hide edit
251:28 - callback okay that is what we called it
251:30 - and let's just end the component so i
251:32 - don't forget to do that so we have user
251:34 - show hide callback we also need to pass
251:36 - our profile data so i'm going to say
251:37 - profile data is equal to and then
251:40 - profile data
251:42 - let's save that and then lastly we need
251:45 - to pass our ad alert so i'm going to say
251:48 - add alert
251:49 - is equal to
251:51 - and then add alert
251:53 - which would have been passed to us
251:55 - in a prop right here and oh my gosh i
251:57 - keep saying add alert
251:59 - set alert
252:01 - set alert
252:02 - and then let's just go to edit profile
252:03 - make sure i called this set alert okay i
252:05 - did call it alert nice
252:07 - okay so that now will actually allow us
252:09 - to view the edit profile page
252:12 - whenever we click the edit button
252:15 - all right i think that's all we need to
252:16 - do for the profile component i have a
252:19 - feeling a few things are not going to
252:20 - work as expected but that's fine we'll
252:22 - fix them when we get to that point so
252:23 - let's go here
252:25 - let's go to our react app let's refresh
252:29 - okay let's sign in let's sign in as tim
252:33 - let's go to our profile
252:35 - and notice we can click edit so let's
252:36 - hit edit and nice we get this modal now
252:39 - the button oh i forgot to put text for
252:40 - the button so let me do that in a second
252:42 - we also need to make a size for the
252:44 - image so it takes up some room but you
252:45 - can see i have tim rasika and then i
252:47 - don't have a bio now when i press the
252:49 - button it should update but let's first
252:50 - just fix this a little bit so that the
252:52 - button actually has a name so let's go
252:54 - to edit profile
252:56 - our button is down here so let's i don't
252:59 - even know what we should do maybe just
253:01 - submit
253:02 - i think that's fine
253:03 - uh and then our image we want to add a
253:06 - oh we want to add the styling for upload
253:08 - image okay so let's do that first so
253:10 - let's actually do this inside of
253:11 - profile.css
253:13 - and we'll say dot
253:15 - upload
253:16 - image
253:17 - and then the image that we want to
253:18 - upload here is going to be width of 300
253:21 - pixels
253:23 - and height
253:24 - of 300 pixels just give it a static
253:26 - width and height for now doesn't really
253:27 - matter too much okay
253:29 - so let's restart our api actually so now
253:32 - we can test this
253:33 - so let's go yes
253:34 - let's restart
253:36 - okay started all right
253:38 - now let's come here
253:39 - let's sign in as tim
253:41 - so sign in
253:43 - okay now let's go to our profile
253:46 - okay it says edit shows our modal
253:48 - perfect now we could put this in the
253:49 - middle i'm not too worried about that
253:51 - right now let's add a bio so let's say
253:53 - hello world
253:54 - and let's add a new image
253:56 - and actually we don't have any image at
253:57 - all so let's just go with something like
253:59 - this okay nice dog let's press submit
254:03 - and let's see if this is gonna work or
254:05 - not okay so it said profile updated
254:07 - successfully but we have not closed the
254:08 - modal and when i come back here
254:11 - it's actually not even letting me close
254:13 - it because i have not implemented the
254:14 - hide callback function so we need to fix
254:17 - that but it does look like that it was
254:19 - updated we didn't get any errors which
254:20 - is a good sign so let's continue okay so
254:23 - let me close this
254:24 - let's go to edit profile
254:27 - and we need to implement this hide sorry
254:29 - let's go to profile my bad we need to
254:32 - implement this hide edit callback so
254:34 - inside of hide edit callback we're going
254:36 - to say set editing
254:38 - false now that will at least close the
254:40 - modal for us we also need to do a few
254:43 - other things the next thing that we're
254:44 - going to have to do is get the data
254:46 - that's going to be passed here and we're
254:48 - going to use that to make some updates
254:50 - to our profile again so we don't have to
254:51 - send another request so i'm going to say
254:53 - if data so if it's not undefined if this
254:56 - did happen successfully then i'm going
254:58 - to say profile data dot first underscore
255:02 - name is equal to whatever the new
255:04 - data.firstname is and then the
255:06 - profiledata.last underscore name is
255:08 - equal to data. and then last underscore
255:11 - name
255:12 - okay and then i'm going to say if
255:15 - data.image underscore url so if we do
255:18 - have an image url inside of there then
255:20 - we'll update the photo so profile data
255:23 - actually we'll say
255:25 - profiledata.photo is going to be equal
255:27 - to and then this will be an asset
255:30 - and then this will be
255:31 - a url and the new url will just be data
255:34 - dot image url
255:36 - okay and then down here we'll say
255:38 - profile
255:40 - data dot and then bio is equal to data
255:43 - dot bio
255:45 - okay and then we'll say set
255:48 - profile
255:49 - data and we will set it to be profile
255:52 - data just to make sure the state updates
255:54 - okay so just to stop here and explain
255:56 - because i know i'm not explaining
255:58 - exactly the data that's being returned
256:00 - from our api call
256:02 - when we update as i was saying it's
256:03 - going to return to us a new object with
256:05 - all of those new updates however the
256:08 - image that we're going to get is not
256:09 - going to contain a url because we didn't
256:12 - explicitly ask for the url from the
256:14 - asset and so that is why again i was
256:16 - adding that image url aspect to our data
256:19 - from the edit profile here that's why i
256:21 - did this so now when we come back here
256:23 - we just grab the first name grab the
256:25 - last name from the new data right this
256:27 - will be whatever the updated first name
256:28 - is whatever the updated last name is
256:30 - updated image updated bio and we just
256:32 - used that to update our profile data we
256:34 - then set the profile data set editing
256:36 - equal to false and now we have all the
256:38 - updates we just made without having to
256:40 - send an additional request now if we
256:42 - wanted to simplify this we could
256:43 - actually just call the update profile
256:46 - function here and then that would send
256:47 - another request that would then give us
256:49 - all of the new data and then we wouldn't
256:50 - have to worry about any of this so what
256:52 - we could do is not return any data and
256:54 - just call update profile and we just
256:56 - call this with the username right
256:59 - and then that would update it for us
257:00 - however i prefer doing this and it's
257:02 - going to be faster and look faster on
257:04 - our page so let's try this now
257:06 - let's go here
257:08 - let me click this it actually closed and
257:09 - then we have undefined undefined and
257:11 - then hello world
257:12 - okay so this is a bit of an issue uh our
257:15 - first name and last name are not being
257:18 - updated as i hoped they were going to be
257:20 - updated so i will show you how to fix
257:22 - this but i was hoping it wasn't going to
257:23 - happen so let's go back to edit and
257:25 - notice these are both undefined now if i
257:27 - manually change them
257:29 - and i change them say timber seca here
257:31 - and now i submit
257:32 - we should see that this closes and it
257:34 - does actually update for us the issue is
257:36 - if i don't modify them at all and then i
257:39 - hit submit
257:40 - okay uh oh okay it actually looks like
257:43 - it didn't make it go to undefined
257:45 - although let's see if i go post and tim
257:48 - if they're undefined now no okay they're
257:49 - not undefined
257:51 - that's weird why they were undefined
257:52 - before let's
257:55 - let's try this one more time let's
257:56 - submit
257:57 - and there we go so now they're all they
257:59 - all go to undefined so again this is
258:01 - kind of weird but what's actually
258:02 - happening here is that the state for
258:05 - some reason is not going to be holding
258:06 - the correct profile data when we don't
258:09 - make any changes to it so just to kind
258:11 - of debug this a little bit
258:13 - let's print out
258:16 - the first name and the last name so
258:18 - let's print out
258:20 - first name
258:22 - and last name
258:24 - as well as the bio here when we don't
258:26 - make any changes just to see what
258:28 - they're equal to before we add them into
258:29 - our form data
258:31 - and then we can hopefully fix this
258:32 - problem so let's refresh we're going to
258:35 - have to sign in again just because we've
258:36 - refreshed the app so let's sign this tim
258:39 - let's go here
258:40 - okay let's hit edit
258:42 - now let's make a change that's going to
258:44 - persist so tim receica
258:47 - hello okay submit
258:49 - tim or seek hello okay that's what the
258:51 - state is nice it updated now let's just
258:54 - go post and tim just so that we get a
258:56 - fresh api call to get everything here
258:57 - okay now let's go edit and let's not
259:00 - make a change and hit submit now notice
259:02 - they all become undefined now i'm not a
259:04 - react expert and so i don't know why for
259:06 - some reason the state is not getting
259:09 - what the uh what do you call it what the
259:11 - props are because the props where my
259:13 - profile data is is first name last name
259:16 - and bio so i assumed it was going to
259:17 - store that data but for some reason it's
259:19 - not so really there's no point of us
259:21 - even putting that in there because well
259:22 - clearly it's not the correct data
259:24 - so what i'm going to have to do is check
259:27 - if the state is empty and if the state
259:29 - is empty then i'm going to have to
259:30 - replace first name last name and bio
259:33 - with the current profile data from
259:36 - inside of here so really the fix
259:38 - involves this we're going to say if
259:41 - and then we're going to say first name
259:43 - is equal to an empty string or we could
259:45 - just say something like if not first
259:47 - name really up to you how you want to do
259:49 - it then we're going to say set first
259:52 - name
259:53 - and then this is going to be profile
259:54 - data
259:55 - dot first name now this is only going to
259:57 - trigger if we don't manually make a
259:59 - change change to first name
260:01 - so that's fine if we do make a change it
260:03 - won't trigger then this is going to be
260:05 - last name and we're going to say set
260:07 - last name and we're going to say profile
260:09 - data dot and this should be last name
260:12 - and then lastly here we're going to go
260:14 - with bio
260:16 - okay and then we'll say set bio
260:19 - and this can be profile data dot and
260:22 - then bio now alternatively i'm thinking
260:24 - that there's probably a world where we
260:26 - can do this inside of a use effect where
260:28 - we just set the first name set the last
260:29 - name and set the bio equal to this
260:31 - information as soon as this information
260:33 - comes in to us i'm assuming what's
260:35 - happening is that originally when the
260:36 - profile data is passed it's actually
260:39 - empty to the component and then it's not
260:41 - being refreshed and so that's why we're
260:44 - getting kind of the empty state here
260:46 - because if we go to profile actually i
260:48 - think this makes sense i think i've just
260:49 - figured it out here
260:50 - the update profile is not going to be
260:53 - done immediately because we're sending
260:54 - an api request so it takes a second to
260:56 - get this data so immediately when we
260:59 - actually start rendering this edit
261:00 - profile and we pass the profile data
261:03 - we're passing empty profile data and
261:05 - that means when i go to edit profile
261:07 - here and i set the initial state i'm
261:10 - setting it with empty profile data and
261:11 - so i'm getting undefined so now if we
261:14 - just set it as an empty string and then
261:15 - we update it using the profile data once
261:18 - we've hit the update profile button we
261:20 - should be good to go again we could
261:21 - probably do this in a use effect but i
261:22 - think this is fine for now okay so let's
261:24 - save this
261:26 - let's go back here and let's give this a
261:28 - try so let's refresh
261:30 - we're gonna have to resign in so let's
261:31 - sign in as tim
261:33 - login
261:34 - okay let's go to our profile let's go
261:37 - edit
261:38 - let's change this to something that
261:39 - makes sense so tim
261:41 - receica
261:43 - okay
261:44 - hello world okay submit
261:46 - and let's make a change now and let's
261:49 - just submit with no changes okay so
261:51 - submit
261:52 - and that looks good now let's go back to
261:55 - the profile so post tim and it does not
261:58 - show undefined awesome so that's exactly
261:59 - what we're looking for looks like we
262:01 - were able to edit the profile
262:02 - successfully let's try changing the
262:04 - image now so let's go the young man's
262:06 - face
262:07 - okay submit
262:09 - and let's see if it works and there we
262:11 - go we get it uh oh okay so this time
262:14 - the first name last name and bio are
262:16 - gone okay so it looks like we do have an
262:18 - issue uh we're gonna have to fix that so
262:20 - let's try this one more time though just
262:21 - so i can make sure i get the issue
262:23 - correct so tamara sika
262:25 - say bio okay let's submit
262:28 - all right when we submit we get that
262:31 - let's go here let's go back to the
262:32 - profile
262:33 - okay so we're getting all that but now
262:35 - if i choose a file here so let's update
262:38 - the file
262:40 - and let's submit for some reason it
262:42 - cleared my first name last name and bio
262:45 - okay so that's annoying
262:47 - let's just make sure that actually is
262:48 - occurring and it's not from our callback
262:50 - function okay so it is actually
262:51 - persisting in the database let me have a
262:53 - look and i'll be right back all right so
262:55 - i've just fixed the problem but it did
262:56 - require a few major changes so when
262:58 - we're looking at our state here notice
263:00 - that i just have these as empty strings
263:02 - okay then for use effect i've added this
263:05 - in here to edit profile
263:07 - so i imported it first right
263:09 - and then what i'm doing is i'm setting
263:10 - the first name setting the last name and
263:12 - setting the bio whenever the profile
263:14 - data changes so whenever we load the new
263:17 - profile data from our profile component
263:20 - then it will force this to update here
263:22 - and so we'll force update the state
263:24 - then what i'm doing here
263:26 - is i'm just appending all these things
263:27 - in the same way that we had before
263:29 - however when i call the callback
263:31 - function i'm no longer passing the new
263:33 - data
263:34 - now when i go to profile.js here notice
263:37 - that in the callback function i've
263:38 - removed everything and now i'm just
263:40 - calling update profile so yes i did say
263:42 - before that it was going to be faster to
263:44 - get the data back and then make those
263:45 - changes however that was really bug
263:47 - prone and i realized this was going to
263:49 - be a better solution just because
263:51 - there's not going to be all these weird
263:52 - education edge cases sorry and things
263:54 - going on that we need to handle so even
263:56 - though the other way will be faster and
263:57 - we should try to come up with a way to
263:59 - do that for the purpose of this video
264:01 - we're just going to recall the update
264:02 - profile and that's going to force
264:04 - another api request which will now give
264:06 - us all of the new data in the format
264:08 - that we're used to expecting and then we
264:10 - can just update the profile using that
264:12 - and that means we won't have any data
264:14 - inconsistency issues as well so for hide
264:16 - edit callback i'm no longer taking a
264:17 - parameter and i'm just calling update
264:19 - profile so those are really all the
264:20 - changes that i made another change i
264:22 - made is that if you go here notice that
264:25 - i have first underscore name not first
264:27 - name so that was one of the causes of a
264:29 - lot of our issues was i had camel case
264:31 - as opposed to snake case and so
264:33 - hopefully you guys can understand all of
264:35 - those fixes again code will be available
264:36 - from the description in case i lost you
264:38 - here but i think we should be good to go
264:40 - now so let's come back here
264:42 - let's refresh the page
264:44 - and let's give this another test okay so
264:46 - let's go tim
264:47 - let's go here now i have undefined
264:49 - because i was messing with us before
264:51 - anyways let's change this to be tim
264:54 - let's go
264:55 - hey
264:56 - let's submit
264:57 - and now we get the correct stuff okay
265:00 - now let's make another change and
265:01 - actually let's just submit the current
265:03 - data that we have
265:04 - notice we don't get any undefined okay
265:06 - fingers crossed let's upload a new image
265:08 - here
265:09 - okay let's try this
265:12 - and yes awesome everything is working we
265:14 - can now move on to adding followers okay
265:17 - so we've updated the profile a lot of
265:19 - the hard stuff is done now we just want
265:21 - a way to be able to
265:24 - follow and unfollow accounts so actually
265:26 - not overly complicated to do that we're
265:28 - going to do that from the profile page
265:30 - so we can now close the edit profile
265:32 - page we're done with that however i want
265:34 - to go into my api calls and i want to
265:37 - write those and then i want to write the
265:38 - corresponding backend api endpoints
265:41 - that we'll need and then that way we can
265:43 - just work in the profile file for the
265:45 - remainder of the video so let's write
265:47 - some functions that can add and delete a
265:49 - follower so i'm going to say functions
265:51 - dot add follower is equal to we want to
265:54 - take the user that we're going to add
265:56 - the follower for and we want to take the
265:58 - following id so who are we following
266:00 - okay
266:01 - then we're going to come here and we're
266:02 - going to going to return and this is
266:04 - going to be functions dot we need to get
266:07 - the user id of the user that we want to
266:09 - add the follower for we're going to say
266:11 - dot then we've already looked at this
266:13 - before but we're going to get our ids
266:15 - and then inside of here we're going to
266:17 - say sanity client dot and now we're
266:20 - going to patch because we're going to be
266:22 - adding an element to an array which is a
266:25 - patch or update operation for the
266:27 - current user right so that's why we're
266:29 - patching we're going to patch ids 0 dot
266:33 - underscore id okay now we're going to
266:35 - add our dot then we're going to take in
266:37 - our data
266:39 - or sorry we don't need a dot then my
266:41 - apologies we're going to have a dot and
266:43 - then this is going to be set
266:44 - if missing and we're going to set if
266:47 - missing the following field to be an
266:49 - empty array just so when we try to add
266:51 - something into the array if we didn't
266:53 - already have it we don't get any errors
266:55 - now we should have the field there
266:56 - already but again if for some reason we
266:58 - don't have it we're going to set it if
266:59 - it's missing i mean that's pretty
267:01 - intuitive and then we're going to insert
267:04 - something now we're going to insert
267:06 - after and what i can write here is
267:08 - following and then colon negative 1 or
267:11 - sorry just negative one and this is
267:13 - going to reference the very last element
267:15 - in the following array here just like we
267:17 - would in python now it doesn't really
267:19 - matter where we're adding this element
267:21 - in because we don't really care about
267:23 - the order of it but we'll just add it at
267:24 - the end because that kind of makes sense
267:26 - to do and then what we're going to do is
267:29 - we're going to add
267:31 - a
267:31 - underscore reference and this reference
267:34 - is going to be to the following
267:36 - id like that and then we need a unique
267:39 - key inside of this array so the key i'm
267:41 - going to use is nano id and i need to
267:44 - import that so i'm going to come up here
267:45 - and i'm going to say
267:47 - import
267:48 - nano id from and then nano id i believe
267:52 - it's a default import actually no it's
267:54 - not so we're going to have to
267:56 - import it like this and what nano id is
267:58 - going to give us is just a unique id
267:59 - that we can use now the reason we need
268:02 - an id inside of here is because every
268:04 - element in our array we want to be able
268:06 - to have quick index access for it and we
268:08 - can access every element using a unique
268:10 - id so when i have key now if we had say
268:13 - a duplicate reference in here we
268:15 - shouldn't have that but if we did we'd
268:17 - still know which element is which
268:19 - because we have the unique key so this
268:20 - just helps in the database for them to
268:22 - quickly locate different elements
268:24 - hopefully it's making a tiny bit of
268:25 - sense but every element that we have
268:27 - inside of the array we add this key
268:29 - which is a unique id that we get from
268:31 - this nano id function we installed that
268:33 - at the beginning of the video
268:35 - okay now the next thing that we need to
268:37 - do here when we're going to be adding a
268:38 - follower is we just need to add the type
268:41 - so i'm going to say underscore type
268:43 - like this
268:44 - and this is going to be a reference
268:47 - so let's add reference like that and
268:49 - that is literally all we need to do to
268:51 - add a follower other than commits
268:54 - okay so we'll commit like that
268:56 - all right so let's just walk through
268:57 - this one more time we're getting the id
268:59 - of the user we're already going to have
269:01 - the id of the person that we want to
269:03 - follow and i'll talk about how we get
269:04 - that in a second
269:05 - then we're going to well get the id from
269:07 - the user we're going to patch this user
269:10 - because again patch we take an id of a
269:12 - document that we want to make a
269:13 - modification on we're going to set if
269:15 - missing the following field and then
269:16 - we're going to insert after the last
269:18 - element in the following array if it
269:20 - doesn't have any elements it'd just be
269:22 - the first element we insert and then
269:24 - here we pass an array of all elements
269:26 - that we want to insert we're going to
269:27 - insert multiple elements at a time so i
269:29 - could put another object if i want to
269:30 - insert it here in this case i just want
269:32 - to insert one so i'm inserting a
269:34 - reference to the following id because
269:36 - the reference type or the type of this
269:38 - array is referenced right and then i'm
269:40 - saying key nano id the unique id of a
269:42 - key
269:43 - and i'm saying type reference and we're
269:45 - all good to add a follower okay now in a
269:47 - similar way we're going to remove a
269:49 - follower so i'm going to say
269:50 - functions.remove follower
269:53 - this is going to be equal to user and
269:55 - following id as well
269:57 - then inside of here we're going to
269:58 - return the sandy client and then this is
270:01 - going to be dot
270:03 - patch
270:03 - and again we're going to have to get the
270:05 - user id actually so first i'm going to
270:06 - say return
270:08 - functions dot get
270:11 - user
270:12 - id we're going to get the user id of the
270:14 - user i'm going to say then this is going
270:17 - to be ids and then here we're going to
270:19 - say
270:20 - sandyclient.patch this is going to be
270:22 - ids 0 dot underscore id okay let's save
270:26 - that
270:27 - and then after the dot patch we're going
270:29 - to say unset so this is how we actually
270:31 - remove something
270:33 - and we're going to unset the field that
270:35 - we want
270:36 - in this array so i'm going to say
270:38 - inside of here
270:40 - following like that and then this is
270:42 - going to be underscore ref and then the
270:44 - ref is going to be equal to a string and
270:47 - this string i'm actually going to have
270:49 - to sorry make this back text just so
270:51 - that we can insert what i need here so
270:53 - we're going to have a string and i'm
270:55 - going to go with
270:57 - following
270:58 - id like that
270:59 - inside of parentheses
271:02 - or not parenthesis sorry this is going
271:03 - to be squiggly brackets okay so let's
271:05 - save that so it goes down on the next
271:06 - line so what we're doing here is saying
271:08 - okay we are going to get the user id we
271:11 - are going to patch that user so make an
271:12 - update on it and then we are going to
271:14 - unset
271:16 - and we are going to unset following and
271:18 - then at this key so really following is
271:20 - the array and we just want to unset one
271:22 - element from that array which is really
271:24 - removing it from the array the element
271:26 - we want to remove is the one that has a
271:27 - reference which is equal to the
271:29 - following id
271:30 - so that's why we're putting it here and
271:32 - then we need a back tick so we could
271:33 - embed this directly inside of here then
271:35 - of course just like before we need to
271:36 - commit and once we make a commit it will
271:39 - update it in the database and there we
271:40 - go
271:41 - okay so now that we have done that we
271:42 - just need to go to index.js and we need
271:44 - to write the corresponding
271:47 - what do you call it endpoints here for
271:49 - remove follower and add follower so i'm
271:51 - going to say app dot and then when we
271:54 - want to add a follower it's going to be
271:55 - post so i'm going to say post and then
271:57 - this will be slash add follower again
272:00 - you can maybe make this a patch request
272:01 - if you want but we'll just keep it as
272:03 - post it's not really a big deal
272:05 - and i will go here with request
272:07 - and response
272:09 - and then this is going to be const body
272:12 - and i want to say request
272:15 - dot body because i need to get a few
272:17 - things here specifically i need the user
272:19 - as well as the id of the person that i
272:21 - want to follow so now i'm going to call
272:23 - the remove or sorry not remove the add
272:26 - follower function
272:28 - and i'm going to pass this the body.user
272:30 - as well as the body.id and the id is
272:33 - going to be the id of the person i want
272:34 - to follow then i'm going to say dot then
272:37 - data and then i will return
272:40 - what is it yeah res.json and then data
272:42 - okay
272:43 - that's what we need for that let's copy
272:45 - this and do the same
272:47 - except this is going to be
272:49 - the delete method and this will be for
272:52 - remove follower because we're deleting
272:54 - something right and then we're going to
272:56 - have our request.body same thing want
272:58 - body user body id except rather than add
273:00 - follower it's going to be remove now we
273:02 - just need to import those two functions
273:04 - so let's go add
273:05 - follower
273:07 - and remove
273:10 - follower and now we are good from the
273:12 - backend standpoint so let's close this
273:16 - let's rerun our back end
273:18 - and now let's go to our front end and
273:20 - let's actually use these inside of our
273:22 - follow click function because the follow
273:24 - click function is really the last thing
273:25 - that we need to code out here to add and
273:27 - delete the followers
273:29 - so the first thing i need to check here
273:31 - is am i following or am i not following
273:34 - i also want to make sure that i'm not
273:36 - the owner and that i can't somehow click
273:38 - this before the the page fully renders
273:41 - so what i'm going to do is say if
273:43 - owner
273:44 - then return just to make sure that i
273:46 - can't go any further inside inside of
273:48 - the logic here and then i'm going to say
273:49 - if
273:51 - not following so if i'm not following
273:53 - then this means that i'm actually going
273:55 - to add a follower if i am following then
273:57 - i'm going to remove so we'll have an
273:59 - else statement here and we'll do
274:00 - something there okay so i'm going to say
274:02 - const
274:03 - request options this is going to be
274:05 - equal to an object
274:07 - now the method is going to be post okay
274:09 - again you could have made that patch
274:11 - some of you are probably going to argue
274:12 - in the comments that i should have
274:13 - changed some of the methods but that's
274:14 - fine we'll go with post and then i need
274:16 - to add a header here
274:18 - and the header that i want to add is
274:21 - content
274:22 - and then type and this is going to be
274:24 - application json because i'm going to be
274:25 - sending json data and then for the body
274:29 - here i'm going to say that this is
274:31 - json.stringify
274:33 - and i'm going to pass my user
274:35 - equal to my user and my id equal to the
274:38 - profile underscore data or sorry profile
274:41 - data dot underscore id
274:43 - so again we can get the id from our
274:46 - profile data the reason we can do that
274:48 - is because the profile data returns to
274:50 - us all of the data from our database and
274:51 - every single element in our sanity
274:53 - database has an underscore id and the id
274:56 - is going to be completely unique for
274:57 - each document so this is the id of the
275:00 - current person's profile that we're on
275:02 - and the user is the name of our current
275:04 - user that's viewing the profile okay so
275:06 - that's what we're doing there
275:08 - uh that's actually all we need for that
275:10 - and then we're going to fetch a request
275:13 - i mean i don't know if fetcher request
275:14 - is really the proper way to say that but
275:15 - we're going to fetch an endpoint maybe
275:17 - and this will be
275:19 - add follower
275:21 - okay
275:22 - and we want to add the follower with the
275:25 - request options
275:26 - and then we're going to say then
275:28 - we're going to say underscore res
275:30 - and we don't actually care about the
275:32 - response here i mean i will still return
275:33 - the res.json and i will say then
275:37 - data and then i'll do something here but
275:39 - i'm actually just going to update the
275:41 - profile once this occurs
275:44 - to set the new following count so you'll
275:46 - see what i mean here but i'm going to
275:47 - say update profile
275:49 - and then params.username
275:51 - like that okay so what we're doing when
275:53 - we add a follower right is we don't care
275:55 - about the response here uh it just
275:57 - doesn't matter to us what it is because
275:59 - we can just update the profile then that
276:01 - will update the follower count of this
276:03 - user to go up by one when we follow them
276:06 - there's no other updates that we need to
276:07 - make and so again we'll just do update
276:08 - profile okay so add follower request
276:11 - options that's post request application
276:13 - json we're sending the user and the
276:14 - profile data id this will add the
276:16 - follower for us assuming all that works
276:18 - will follow successfully and then we
276:20 - don't actually need to like add an alert
276:22 - onto the screen because when we call
276:24 - update profile it will actually call
276:26 - this
276:27 - update following for us and then you'll
276:29 - see that we'll set the following to be
276:31 - true which means the button is going to
276:32 - change and so that will kind of be
276:34 - the uh what do you call it the response
276:36 - to the user or the information to the
276:38 - user now just so i don't get yelled at i
276:40 - can do underscore data here just to say
276:42 - i'm not using that variable and now
276:44 - that's fine
276:45 - okay so otherwise if i'm not adding a
276:47 - follower i'm deleting a follower so let
276:49 - me copy this here and we're going to
276:51 - change the type to be delete
276:53 - and then rather than add follower i'm
276:55 - going to say remove follower
276:57 - and then we'll do the same thing with
276:58 - update profile here it's saying res is
277:01 - not defined oh sorry so let's fix this
277:03 - so get rid of underscore res get rid of
277:06 - underscore res and now that should be
277:08 - good instead of here so that's actually
277:09 - all we need i think for adding the
277:11 - follower and for removing the follower
277:14 - yeah that should be about it now i could
277:17 - add a catch statement if i want to add
277:19 - an alert saying that there's a problem i
277:21 - think for now though this is fine if you
277:23 - want to add that feel free
277:25 - okay so that really should wrap up this
277:27 - entire application now i'm hesitant to
277:29 - say that because of course we're doing a
277:30 - lot of complex stuff and there's always
277:32 - a possibility that there will be some
277:34 - bugs or some issues here but let's go
277:36 - and test this out
277:37 - and see if this works
277:39 - so let's refresh the page here if we
277:41 - want to follow someone obviously we have
277:42 - to sign in so let's sign in as like
277:44 - joey123
277:46 - and let's now go
277:48 - to our account
277:49 - and for joey okay we see we have joe
277:51 - smith that's the name let's go to search
277:54 - let's search for some users okay so when
277:56 - i'm searching let's go to tim
277:58 - and let's follow tim
278:00 - now okay we got an issue here it says
278:01 - unexpected token in json at position 0.
278:04 - so as i suspected we have an error let
278:07 - me figure out what that is and then i'll
278:08 - be right back all right so i have found
278:10 - the error here it just has to do with
278:12 - when i was unsetting and committing in
278:14 - my remove follower so i'm going to go
278:17 - here and place this like that
278:20 - let me remove my semicolon so what i was
278:23 - doing was i was adding the unset and the
278:25 - commit after uh these sandy clients so i
278:28 - was kind of adding it here as opposed to
278:30 - inside
278:31 - so i just need to fix that and i need to
278:32 - do the same thing here
278:34 - for this patch so let me copy all this
278:36 - and paste this inside of this
278:39 - parentheses so that's what was being
278:41 - messed up again have a look at the new
278:43 - code here i have sandy client.patch then
278:45 - after the dot patch i'm doing this as
278:47 - opposed to after the dot then which is
278:50 - what i had before which was causing me
278:51 - to get an internal server error so let
278:54 - me restart my back end of course we had
278:56 - an error i think this should be good now
278:58 - though uh let's see let's go back let's
279:02 - refresh
279:03 - okay let's sign in as
279:05 - joey123
279:07 - all right let's go to
279:09 - our search let's search for a user let's
279:12 - go to tim
279:13 - and let's press follow
279:15 - and fingers crossed we will see okay
279:17 - nice so the followers go up by one now
279:19 - it says unfollow now the moment of truth
279:21 - is is it going to show my new post now
279:25 - based on who i'm following so if i go to
279:27 - feed
279:28 - now i see the post of tim because i'm
279:29 - following tim so let's click into tim
279:32 - and let's unfollow
279:34 - and let's see now if those posts go away
279:36 - okay so let's go back to feed
279:38 - and there we go now we don't see any
279:40 - posts because well we're not following
279:41 - anyone so let's just do a few more tests
279:43 - here i'm going to sign in as tim so
279:45 - let's log in as tim here
279:47 - let's go and notice that i have one
279:49 - follower that would have been joey from
279:51 - what i was following before
279:53 - let's go to search let's search let's go
279:56 - to tim1234
279:57 - let's follow
279:59 - okay now it has two followers nice now
280:02 - let's make a post so let's just add a
280:05 - random image here and say test okay
280:08 - let's post
280:09 - let's see if that works okay all good
280:11 - let's go to our profile we should see
280:13 - now we have another post here because
280:15 - i've signed in as tim now let's just go
280:17 - to search and see what other accounts we
280:18 - have we have joey12345 okay so let's go
280:21 - log out sign in as
280:23 - joey12345
280:25 - let's go to search
280:28 - let's go to tim
280:31 - let's follow
280:33 - and now he has two followers okay let's
280:35 - go to feed and then i should see all the
280:36 - posts from tim awesome okay everything
280:39 - is working i'm very excited the video is
280:41 - now complete all alright so i'm going to
280:44 - conclude the video here this was an
280:45 - extremely long video so if you made it
280:47 - to this point i'm expecting that you
280:49 - leave a like and you subscribe to the
280:51 - channel maybe even leave a comment
280:52 - because this took a very very long time
280:54 - to film record come up with beforehand
280:57 - and i will give another thank you to
280:59 - sanity for sponsoring this video again
281:01 - completely free i think it was really
281:02 - easy to use and also a great tool
281:04 - because we have this visual uh you know
281:06 - sandy studio that i can go in and
281:08 - actually view all the stuff happening
281:10 - with my database it just makes it way
281:12 - easier especially when it comes to
281:14 - debugging and again for people that
281:16 - aren't kind of tech savvy and aren't
281:17 - going to write the code if they were
281:19 - working on a project with you they could
281:20 - come in here and they could add whatever
281:22 - it is that they needed to again without
281:24 - having to write any code themselves now
281:26 - this is as close to a social media clone
281:28 - as i can realistically make on youtube
281:30 - in a decent amount of time of course we
281:32 - don't have likes we don't have comments
281:33 - we don't have you know dms and stuff
281:35 - like that but with the tools in this
281:37 - video you should be able to add those
281:39 - features and extend this to really
281:40 - create whatever you want of course the
281:42 - styling is not as good as you'd
281:43 - hopefully want it to be but you can mess
281:45 - around with that it's very time
281:47 - consuming to do css styling as you
281:49 - briefly saw in this video anyways if you
281:51 - made it this far please do like the
281:53 - video please do subscribe maybe even
281:55 - leave a comment and i hope to see you in
281:57 - another youtube video
282:00 - [Music]

Cleaned transcript:

in this video i'll be showing you how to make a social media slash instagram clone using react on the front end express on the back end and then sanity for our content management system as well as our database now this is going to be a pretty advanced tutorial that's going to walk you through how to do all of this completely from scratch so i'm going to assume that you have some understanding of javascript as well as react and express now with that said let me give you a demo of what we're going to be building out then i'll talk more about exactly how this will work and we'll get into all of the setup steps so here you can see that i kind of have a mock instagram now i know the styling is not quite what we would expect i'm not going to focus on styling in this video it's really just meant on the functionality you guys can go in and change the css and make things look better after you have the functioning website built regardless what i can do here is sign in now i'm not implementing real authentication here and the reason for that is it would make this video extremely long we're just going to focus on the actual content of the website as well as the functionality so adding followers searching for accounts unfollowing and following different users being able to post something right all of that kind of stuff view profiles edit profiles that's what we're focusing on on here as opposed to kind of all the authentication stuff which you can add to this fairly easily anyways what i can do here is make an account so maybe i make an account i just call it hello and then world and then once i make this account it will automatically sign me in now what i can also do is log out and then if i know the username of the account i can just sign in by entering that username nice okay so now i'm going to go to search and i'm just going to look for a few users here and when i press search i'm going to see all of the different users that i have here in my i guess app so what i can do is click on the rock and if i want to i can follow the rock and now that i'm following the rock we should see the follower account update here i can go to my home page or my feed and i'll now see posts from whoever i'm following right so if i go back to search here let's search let's go to timurzika which is this beautiful guy right here let's follow him nice then when i go back home i'll see all of the posts from him as well nice now i can click into different profiles of course i can unfollow people if i want to do that then when i go back to the home page of course those posts are going to be gone then i can go to my profile and i can actually edit this profile so maybe i want to change my first and last name maybe i want to change my bio maybe i want to update a photo so let's actually do that okay let's update and give it a second here and we have now updated our profile so that's really what i'm going to be focusing on in this video i do know this looks a little bit simple but there is a ton of stuff that's going on in the back end and once you understand how to implement these different features here you'll see how you can add a ton of other stuff like likes comments removing posts a bunch of stuff that i just haven't implemented in this app and then of course you can make a post here by choosing a file and then entering a bio or entering a caption for that photo all right so that is the demo of the application now i do want to mention that this video is sponsored by sanity which as i said is what we're going to use for the content management as well as the database aspect of this app now this is an awesome platform and it really just makes it easy to access different data and to do that from really any source so even though we're going to be viewing our data from say a react front end here we could be viewing our data from a mobile app or from really anything else and one of the awesome parts about sandy is they have this uh what's it called sandy studio which allows you to go in and actually view all of the entries in your database so i can go and modify different things view all of the different entries and it makes it really convenient when we're debugging as well as people who aren't developers so just really easily say add a post without having to actually go onto the website you know sign into an account all of that kind of stuff now of course sandy is completely free and it's just an awesome thing to use for the database and i've really enjoyed messing around with it as i've been learning it over the past few days so yep that's what we're going to be using not much more to say about that you will learn about all of the features insanity as we go through this video so i just want to jump in here and mention that for the free version of sanity usually you get a hundred thousand api requests 500 000 api cdn requests and then 10 gigabytes of bandwidth but sandy was actually nice enough to double all of that for this tutorial so if you go to the link in the description sandy.com tech with tim you'll see here that you can use this coupon so sandy and nit and then hyphen hyphen coupon tech with tim and that actually gives you double number of api requests cdn requests and bandwidth so usually it's 100k 500 000 and then 10 gigabytes and now it's been doubled to 200 000 1 million and 20 gigabytes again completely free you really will not need this many requests but in case you want to run some other type of application using sanity then this is going to be a higher limit and just make it a bit easier for you to do that now the way that you get access to this again is you write this sandy init and then hyphen hyphen coupon tech with tim now i'll leave this link in the description also when we start setting up sanity i will mention that you can use this coupon code to get access to the double limits so as i mentioned we do have a few setup steps here for this application we need to set up our database our backend and then our frontend so for the database go to this website it is sanity.io and all you need to do is actually just make an account so you can click on login and then assuming you don't have an account you can just create a new one once you've created that account we can actually do all of the setup for this from our command line so just install node.js if you don't already have it i'm assuming most of you have that already and then get into vs code or whatever editor you want to use now inside of vs code here and i've opened up a folder called instagram clone this is where i'm going to put all of the code for this project i've made another folder inside of here called database now database is specifically where i'm going to put all of the sanity database related stuff i'll make two new folders one for api and then one for frontend where the api will be our express backend and the front end will be our react application so now that i've cd into this database folder here what i'm going to do is type the following npm install hyphen g and then at sanity cli now this is going to globally install the sandy cli which we're going to use to actually run the sandy studio and create our sandy database kind of starting code right so i'm going to install that i already have it installed so it goes pretty quickly and then once i've done that i'm going to type the command sanity init now this will work assuming that you've installed that the sandy cli and that's going to ask you if you want to select an existing project or create a new one so i'm going to create a new project here that's what i would recommend you do as well and we'll just call this insta clone tutorial and we should probably do like some underscores or something here so it's a little bit easier to see okay insta clone tutorial for my project name then it's going to ask me do i want to use the default data set configuration we're just going to click yes for this we're going to create the data set here which will take a second and we'll be given a few other options here so project output path i'm just going to hit enter meaning it's the current directory if you wanted it to be somewhere else you would just type in the relative path to where you currently are okay and then we can use a project template if we would like so movie project ecommerce blog i've already showed you what the studio looked like but if you want to explore it with some sample data then you can either choose movie project or ecommerce and it will give you some data as well as a schema and you can have a look at kind of what a sample sandy studio may look like and why it's beneficial anyways for now i'm going to go with clean project with no predefined schemas because we don't need those for our project we're going to write our own schemas all right so we'll just wait for this to finish once it is done i will be right back and then we'll move on to the next steps all right so this command has now finished and i've opened up the database folder and you can see that we have a bunch of files and content inside of here now all we really care about is the schemas folder where we have schema.js we'll look at this later but this is where we'll define our database models now i want to mention here that what sandy's actually going to do is it's going to build our different database models for us and then host that in the cloud so we don't actually need to have any local database file here and our database will be in the cloud meaning we can access it from really any application so even though we're building a react app here if we want to access it from python or we want to access it from really any other programming language we could just use the api that sandy provides to access that data that's why it's so nice to actually use sandy because it hosts everything for us and kind of deals with all of the you know database related stuff hence why we're using it in this tutorial regardless i want to mention that just keep in mind we're not actually hosting the data locally we're just defining the schemas then when we start the studio which we can do now by typing in sandy start i will build the schemas for us host that online and you get the point so i'm going to start this with sanity start now i need to be inside of the project where sandy is so inside this database folder and then it'll take a second and what i can do is go to a local host link and i'll be able to actually view all my database models and all of the data that's in my database now in this case we don't have any models so i'm not going to be able to view anything but i just want to show you kind of how this works before we proceed all right so it's successfully compiled so what i can do is go to localhost colon 333 so let's open that up now in google chrome and when i go here it's going to ask me to log in so i had google as my login so let me log into this and then i will show you what it looks like alright so i've logged in now to my google account and of course it's going to say empty schema because well it is empty we haven't put anything here yet but i just want to show you this kind of how the studio works you access it from this local host link all right so we pretty much set up sanity now we'll do the database models later on so i'm just going to end this with ctrl c and now we're going to set up express so i'm going to make a new folder here and i'm just going to call this api and then i'm going to cd into the api folder so cd api all right so i'm now inside of the api folder so i'm just going to run the command npm init to give us a fresh project and then i'm going to run through this setup here so package name api is fine the version 1 is fine we don't need a description the entry point of index.js is fine for right now we don't need a test command we don't need a git repository no keywords no author no license is this okay yes it is and hit enter okay so now we have a package.json which is what i want i'm going to install a bunch of modules that we need and then we'll actually just create kind of the boilerplate express application before we start kind of writing all of the different endpoints so what i'm going to do is type npm install and then i'm going to install the sanity client now there is a javascript client that we can use that will allow us to very easily send requests to the sanity api again if you're working with sandy from another programming language they do have some other builtin packages and kind of prebuilt i don't even know what you would call them modules that you can use to connect to sandy but you also can just do it manually using the sandy api regardless npm install at sandy client we also want to install the body hyphen parser this is going to allow us to actually get json data in our express api then we are going to install multer we're going to use this for uploading files we're going to install env we're going to use this so we gotta have an environment variable file that stores our api token we're then going to have fs which is file system again this is for uploading files and then we're going to have a nano id to get a unique id so let's spell that correctly okay so i'm going to install all of these right here again if any of this is confusing to you please feel free to check out the code from github again the link will be in the description and you can just take the package.json file download that and then install everything that's inside of it on your own okay so i've now installed all of those packages now what i'm going to do is create a few different files that i need inside of here and then that will conclude the setup so the first file that i want to make here is index.js this is going to be my entry point the next file that i want to make is going to be api calls.js this file will be responsible for holding all of the sanity api calls so interacting with our database essentially next what i'm going to do is make a new file and this is going to be client.js we're going to initialize this in a second this will be our sanity client and then finally we're going to do dot env which is going to store an environment variable with our api token for the sanity project now what's going on here is we're going to have a back end the back end is going to be interacting with the api so the sanity database api and the point of this is so that our front end can hit our back end our back end can be authenticated with the api and then that way we're not exposing our sanity api token and we're only having the back end of our application actually manipulating or dealing with any data i could from my front end hit the api for sanity i don't actually need to build out an entire back end but this will be slightly more secure now i will mention that what we're doing here for the back end is not the most secure you'd have to make some modifications if you're going to put this into production but it's just better practice to have any of your api tokens and interactions with data to be done from the back end as opposed to the front end so hopefully that makes a bit of sense but that's where we're making the api essentially so we forward request from the front end to the back end that we're building the back end will then send the appropriate request to the sanity api which will be hosting the database and giving us any data that we need and then returning that to the front end so you can kind of think of the back end as a proxy between our front end and the database all right so we have dot env client we could really start anywhere here i'll start at index.js and i'm just going to write kind of some boilerplate code to set up our express application so i'm going to say import express from express and then i'm going to say imports the body parser like this from and then this will be just body parser so actually i think it will be like this body hyphen parser now i don't know why did a space here okay we have our two imports then i'm going to say my const app is equal to express this makes my express application i'm going to say app.use and then bodyparser.json and then app.use and this will be body parser dot and then this is going to be url encoded and then inside of here we have to have to pass an object and we're going to say extended and then false now what we're doing here is essentially installing a few things that are going to allow us to actually look at and parse the data that's sent as the data in a post request or in a get request to our server now if you don't have a body parser like this you're not going to be able to actually receive say post data or just data in general json from a request what this will do is actually parse the data for us then return it to us in our request.body i know that might be a little bit confusing but really this just allows us to actually get request data uh from wherever the request is being sent from okay so that's what we're doing for this now we're just going to start the app so i'm going to say app.listen and then i'm going to put this on port 3001 and then i'm going to have a function here and this is just going to say console dot log and then we'll just say started just so we know that the server actually ran successfully all right so that's all we need so far for index.js we'll start writing a few different routes like get get roots post routes whatever later on but for now this is kind of our starting code all right now one thing i need to do here is go to package.json and i just need to remove this test script and i want to add a start script here and what the start script is going to be is just node and then index.js okay so that's going to run the file for us and i need to add one other field here and this field is going to be type and then module now what this is going to allow us to do is actually have the import statements here so a lot of times you'll see something like express equals and then something like use or something like require sorry and then express now i don't want to do it that way i'd rather just have regular imports so i'm going to have a module type so i say type equals module and that allows me to have my regular inputs okay so that's what we need for package.json that's good for index.json api calls we don't need anything right now but for our client.js we are going to initialize the sanity client so i'm going to say import and then sanity client from and this is going to be at sanity client and then i'm going to import dot env from and then this is going to simply be dot env remember we installed all of these things okay now that we've done that we're going to say dot env dot config remember what this is going to allow us to do is actually read this dot env file so that's why i'm writing this and then i'm going to say export default and i'm going to create a sanity client so i'm going to say sandy client and i'm going to pass to it an object here that has all of the data that we need to kind of initialize the api connection to our sanity database so i'm going to say project id colon and then this will be something that i will tell you how to get in a second we're going to say data set you're going to make sure you put production here this is just the name of the default data set for a sandy project then we're going to say use cdn now i'm going to set this equal to false and i'll explain what this is in one second we're going to say api version and for the api version what we can actually do is just put today's date now when i'm recording this it is february 22nd and when you do that it's just going to give you the most recent version based on this date so just put the current date you also could just do something like new date but for now we'll just hard code in this string because i know that works then we're going to say token and this is going to be our api token which i'll show you how to get again in a second so what the cdn is going to do here if we enable this to be true is it's going to give us a much faster response from the database but it's going to give us a lot of stale data now the reason for this is going to cache all of our requests so if we send the same request twice it's going to say oh you sent this request before what was the response last time let me just give you the same response as opposed to hitting the database that's what the cdn does so we want to make this false for our application because we're doing a lot of changes that we want to see happen instantly so if we're caching all of our requests we're going to be getting a lot of stale data although that data will be returned to us returned to us very much faster so if you have cached data everything is a lot quicker but you're getting some stale data whereas if you don't cache it it's going to be slower but you're getting fresh data which is what we're going to prefer here so i'm going to turn the cdn off you can make it true and see what happens in your application obviously once we start building out something that's more functional so what we need to find now is the project id for our sanity application now the way we can find that is we can go to database we can go to sandy.json we can just copy the project id and notice here the name of the dataset is production so that's why i put that in the data set field here okay so for the project id i'm going to paste that in that's now going to link it to that project and then we need a token now to get the token we actually have to go to the sandy website so what i'm going to do is go here to sandy i'm going to log in and then i'm going to find my project now my project here you can see i've messed around with a bunch of them before this is insta clone tutorial i'm going to click on api here and then i'm going to go to tokens and i'm going to add an api token now for the name let's just go tutorial and we want to have editor access here so we have read and write access to all data sets but you could just give a viewer access right or the deploy studio token only access to deploy study studio and graphql apis to our hosted service anyways we want the editor so let's go with editor it's going to give us a token this is the only time we can copy it so i'm going to copy that token and i'm going to go now to my env file i'm going to make a variable here called sanity and we'll say api token in all capitals is equal to and then i'm going to paste the token inside of here now i have to check if we need a string or not in this file so bear with me i don't think we do actually yes we do need a string so let me make this stringified here by putting another quotation at the end all right so the point of this is that if we were to upload this project to github for example we would not upload this dot env file and that would mean if someone else wanted to use our application what they would have to do is make their own env file put their sanity api token inside of that file they'd have to change their project id then they'd be able to run this application with their own sandy project so we're putting in an env file because i don't want to hard code this directly into my js file and it's kind of good practice to store things as environment variables that are sensitive data now of course i'm showing you the api token here if any of you are crazy enough to type out the entire token then well you can have it although i'm going to delete it after this video is finished being filmed anyways okay so now that we have this env file what i want to do is access that variable from the env file so since i've used env what i can do here is type process and then this is going to be dot env dot and then this is going to be sanity underscore api underscore token okay i believe that is correct yes that looks good and that will access the variable right here from our environment variable file and allow us to use this sandy api token again without having to hard code it directly into the file okay so now we have set up our client.js we have set up our index.js let's now see if this actually works and then we'll move on to setting up the front so what i'm going to do here is just type npm start from inside of the api folder and let's see if it works notice we get the output of started which is what i wanted to see we're all good we can now quit this with ctrl c all right so we now have our api and we have our database set up the next thing that we need to set up is our react frontend so i'm going to go into the parent level or the top level directory here of my instagram clone and i'm going to run a few npm commands so i'm going to say npx create react app and i'm going to call this frontend this will give us kind of the boilerplate react app code so let's run that and let's see what we get here okay it's going to take us a second to run once this is done then i'll open up that folder and start showing the other stuff we need to do all right so we have now created the front end folder here that actually took a lot longer than i was expecting so what i'm going to do now is cd into front end and i'm going to install the other mpm packages that we need so i'm going to say npm install then this is going to be react router dom i'm also going to install react and then router and then bootstrap and the reason we need that assuming we spell bootstrap correctly is because we're going to install react bootstrap which is going to give us some prebuilt components just allowing us to style things a little bit nicer so again react router dom react router bootstrap i spelled bootstrap wrong a second time and then react bootstrap okay so let's run that this will take a second once it's done i will be right back all right so we have now installed all of the packages that we need so i'm just going to go inside a front end and i'm going to start cleaning this up a little bit because we don't need all the files that are inside of src so src is where we're going to write our source code we don't really have to worry about anything else right now inside of here i'm just going to delete a few things that we don't need so i don't need app.test.js i don't need logo i don't need report web vitals and i don't need setup tests so let's delete all of those remove those through recycling bin let's now go to app.js and actually let's remove the import for logo.svg we don't need that for the source for this image in fact for all the stuff inside of here we can just delete this and we can just make it so we have a single div for app we can then go to index.js we can remove the report web vitals remove the import for that and now we are good now we just want to set up this src directory a little bit just so we're ready to start coding in a second so let's make a new folder here i want to call this components this is where we're going to put all our components i want to make another folder here called css and i just want to move my css file inside of here and that's where we'll put all of our custom css so both the css folders or file store are going to go in there and then we'll put app.js inside of components okay and index.js can stay outside of here but we now oh the import automatically changed for us okay that was nice didn't realize it did that i was going to say we have to change the import but doesn't look like we do so for this import here we will actually have to change this so i'm going to say dot slash css slash index.css because we're index and we're trying to get in the css folder and then for app.js here i need to change this import as well so it's going to be dot dot slash and then css slash app.css that is going to bring us to the parent level directory src then into css and then to app.css if that's wrong i'll fix it later but i think right now that is good okay now that we've done that let's go to our package.json and we just need to add one line here at the very bottom and this is proxy and then we're going to proxy localhost colon and then 3001. now we'll also do http before this the reason why we need this here is because we want to forward requests that we're sending from the front end to our back end which is going to run on port 3001 now i believe that our react app is going to run on port 3000 our back end runs on 3001 and then the sani studio will run on three three three three although we don't really care about that url for right now because again all that's hosted in the cloud that's just giving us kind of the nice visual of our sandy database okay so now we have most of the setup complete we have our front end we have our database we have our api so let's just run the front end and make sure that's working so i'm inside a front end so let's type npm start and let's see if this crashes or not or if it actually runs the application for us all right so it looks like everything is good here i'm looking through the terminal doesn't look like i have any errors and you can see that i'm at localhost colon 3000 and i can view my react application so that is good that is what i wanted to test out now ideally we're going to run this at the same time as our back end but for now we don't need to do that i just wanted to make sure that each individual step was working so now we have our front end we have our database and we have our api let's just quickly go to the sandy website for one second and i want to show you here if i go to overview what i can do is view for example the api cdn requests the regular api request the bandwidth the documents and for the free version this is what we're limited at right 100 000 requests 10 gigabytes of bandwidth you are not going to hit that especially because this is just a tutorial and then you can view things like members data sets access usage i won't go through all of it but i just wanted to mention that this does exist here and again because this is hosted on the cloud you can view all of this data and you are rate limited at a certain point because it's the free plan of course you can upgrade and get more limits or higher api requests and all that kind of stuff okay so now that we've done this i want to start setting up the backend database so specifically the schemas so i want to go into the schemas directory here and then into schemas.js and in fact i'm actually not going to do that i'm going to make a new file called user.js and another new file and this is going to be called post.js and inside each of these individual files i'm going to code out schemas for the database models for a user and for a post once i do that i'll add them to the schema folder then i'll show you how we actually build that schema by just running sanity start right and running that that studio alright so i've just taken a quick cut here and opened up a website containing a basic tutorial on how to create schemas in sandy i'll leave this in the description in case you guys want to have a look but let's quickly run through this right here just so we understand basically how to create a schema so we want to focus on this which is an individual schema or actually this which is an individual schema and what we do to create a schema is we have a title a name a type and then the fields that we want on each of these objects so the title is the display name this is what we're going to see when we're printing this out or when we're viewing it in the sandy studio the name is what's going to be used in the apis so make sure the name has lower case letters at least that's the convention then for the type we're only going to go with document for now but as it says you can have some more advanced types we're not going to look at any more advanced ones if you want to see how those work again reference this documentation we then have fields now the fields is going to be all the data we want to store for every object that is of this type and so now they just have one field which is a name so the title is name that's the display name the name which is used in the api is name and then the type is going to be string now of course you can have more advanced types like arrays references booleans i'm going to show you a bunch of those as we write out our user as well as our post okay so just want to quickly run through that now let's create the user schema so i'm going to write the schema in here and then we'll import it from schema.js i just make things a bit cleaner so i'm going to say export default for the title of this it is going to be user okay then we will have a comma let's spell user correctly for the name this will be user with a lowercase and then we want the type this is going to be a document okay and then for the fields this is going to be an array and inside of here we're going to have a bunch of fields so the first field is going to have a title of first name let's get the quotation marks correct here it's going to have a name of this is going to be first underscore name and then we're going to have the type of and then string okay that's all we need for that field for the next field we're going to have last name so we can actually just copy this and just change first to last so this will be last and this will be last all right next we want to have a username so we have first name last name username we're going to have a bunch of other things as well so we're going to say title this will be username the name will be username with a lowercase and then we want the type here to be again a string okay continuing we want to have a photo this is going to be like the profile photo of the user so we're going to say this is title and the title will be photo the name will be photo and then the type will be and this is going to be an image next we are going to put the vial so i'm going to say title this is bio i think we all know what a bio is little description for the user we're going to say the name is the bio and the type here is going to be you guessed it a string actually sorry not a string text because text can store longer piece of data than string since we can potentially have quite a bit of data for the bio we go with text so actually no you didn't guess it we're going with text okay all right so this next field here is going to be following now this is going to be all of the users that this user is following now you also could have say on a user a followers field and then that would contain all of the people that are following them however you only want to have one or the other so pick what you want you can have followers on on the user which contains all the people following them or you can have following which is the people that a user is following i think that makes sense to have what i'm going to put here which is the following field but just want to describe what this is so i'm going to say title this is going to be following the name is going to be following and then this needs to be an array right because we're going to be following multiple users so i'm going to say type array and then this is going to be of and inside of here i'm going to define the type that this array is going to store so i'm going to say type this is going to be a reference type now a reference is something that's going to reference another document so inside here we're going to reference the id of another user so i'm going to say 2 because that's what we need for reference and then inside of here i'm going to say type and then user this essentially says okay we're having an array and then this is going to be of references and these references are going to be two users now one thing i can also do here is add what's known as a validation so i can say validation and i can say rule and i can write a function here and this rule can go to rule dot unique and what this will mean is that we need to have unique values inside of this array all right hopefully that makes sense but that is what we're doing for the following field again an array of references to a user and when we reference the user we're just going to need the id to that user and i'll show you how we make that later on all right the next thing that we want here actually where am i going to define this it looks like i'm going to define it right before this square bracket is going to be created at so i'm going to say for the title let's put this down let's have created at okay then we're going to have name this will be of completely messed this up created at and then the type for this is going to be date time all right so thank you autoformatter for fixing that for me we have title created at name creator. type datetime we just want to know when we created this user great so that's really all we need for this schema here for the user i'll slowly scroll through it so you guys can have a look at everything again all this code will be available from the description next we're going to do the schema for the post all right so for post we're going to say export default and then similarly to before we're going to say title this is going to be post we're going to say name this will be post we're going to say type this will be a document and then we are going to have our fields like this which will be an array and we will define the fields so on a post what do we need well we need a photo so we're going to have title photo name photo type and this is going to be an image okay moving on to the next field we're going to have a description for the post so we're going to say title description name description autocomplete is coming in clutch here and the type is going to be type text okay continuing we want the author of the post as well as when the post was created so i'm going to say title created at okay let's go name why did it do that oh name created at let's actually do created underscore at and then for the type this will be date time okay let's make these on new lines though autoformatter can you fix this for me nice and lastly we want the author now the author needs to be a reference type to the user that created this post so we're going to say title author excuse my bad typing here name author and then type is going to be a reference and it is going to reference two and we're gonna put type and then user inside of here all right so we've now created our two schemas we have our post schema as well as our user schema so let's now go to schema.js let's import these two schemas and we'll use them inside of here so what i will do here is simply say import user from and then dot slash user.js and then import and what's the other one that we wanted we wanted a post from and then dot slash post.js nice and then i put my types in here so i'm going to say user and post doesn't matter the order that you place it but now we're going to have these two schemas inside of our data set all right so we have now set up the database we've set up the front end we have set up the back end let's now rerun sanity studio and see if we can view these different uh database models that we've created so let's run a new terminal here okay a new command prompt and let's cd into the database and let's go sanity start and then let's have a look at the sandy studio and view these new models all right so it is now compiled so let's launch this in google chrome let's have a look here at the sandy studio it's logging me in and now notice we have user and post over here we can actually make a user in a post if we want right one of the great things about sandy studio is the fact that i can do this and maybe i give someone who is not very tech savvy in my organization access to this tool and then they can just come in here and they can make a new blog post they can make a new user they can make whatever it is that they want by looking at a graphical user interface right so my first name last name username photo bio following create it out i'm not going to fill this out but of course you can see how easy it is to actually do that okay so we don't need that open anymore let's actually close sandy studio and now what we'll move on to is actually writing some react code now i understand this video has been long so far with all the setup steps but that was anticipated at the beginning there's a lot that we have to do so let's now open up our front end and start writing some react code and first of all i want to make some new components so just kind of template out the components that we want and then we'll fill in those components one at a time so i'm going to say new file the first component that i want is going to be all posts okay not ks this is going to be dot js i also want a component that's going to seem a bit weird right now but this is going to be alert and then dismissable okay i don't know if i spelled that correctly i think i did okay that's fine this is going to be an alert that will show up on the screen you saw that during the demo but we'll need a component for that so let's just write that right now next we're going to say create post dot js that's going to be for well making a post we're then going to have edit profile this is going to be kind of a i think it's called a modal or like a popup that will show up on the screen that lets us edit a post as you saw in the demo and then we're going to go login.js then i'm going to make a new file this is going to be profile.js we're going to have another component this is going to be profile item.js now this is actually going to be what shows up in the search bar for each one of our profiles or each one of our users and then we're going to have search.js and we're going to have lastly sign up dot js all right so i think that is pretty good now for all of these components what i want to do is just write the kind of boilerplate function for them just so that i can import them and start setting up my routes for each of these different pages so inside of all posts i'm just going to say export like this default and then this will be a function all posts okay and then inside of here for now i'm just going to return a p tag and this p tag will just say if we do this correctly all posts just so we know what page we're on again this is just for the rooting so let's copy that and let's put this inside of all of these so for alert dismissible this will be alert dismissable okay and then here this is gonna need to be alert dismissable as well let's do a space though for create post you guessed it we're gonna say create and then post and then this is gonna be create post okay continuing we're going to have edit profile so let's make this one edit and then profile see how good the autocomplete here is edit profile we want login okay just trying to come up with words to say here as we go in and fill all these in next we're gonna have profile okay this will be profile we want profile item profile item and inside of here profile item with the space we want search we are almost done here last one coming up and the last one that we want here is going to be sign up okay so let's go sign up and then sign up okay apologize for that we just wanted to write all the basic functions so that now we're able able to see what page we're on when we start handling the routing we now close all of these we no longer need them we want to go inside of app.js and i want to start setting up my react router now my react router is what's going to allow us to route between different pages and that's why i wanted to create all this component so now i can import them and then route between them so let's just go up here and let's start by importing react and let's also import use state okay and we're going to do this from the react module okay then i'm going to import all of the components that i just created so i'm going to say import and then this is going to be all posts from and this is going to be dot slash and then allpost.js now if you're hearing something right now that is my cat running around my keyboard so i apologize for that continuing i'm going to say import and then we're going to import the alert dismissible from alert dismissible okay dot js then we're going to import create post from dot slash create post then i'm going to import edit profile from edit profile i actually don't think we need the dot js here so i think i can remove that then i'm going to import login from dot slash login i'm going to import profile from profile and actually i don't need edit profile sorry i just need profile i will import search okay from dot search and then lastly the sign up page import sign up from dot slash and then sign up okay all right so while we are at our imports here let's import what we need from react router dom as well so i'm going to say import and then this is going to be the browser and then router as well as a route as well as the routes as well as link from and then this is react and then hyphen router dom now if you haven't never used this before again this will allows us to route between the different pages and make it so if we go to say slash signup it actually brings us to the slash sign up page so for our div we can leave the class name actually yeah we'll leave the class name empty for right now and we'll worry about the css later and i'm going to start actually building out the html of the page so the first thing i need to do here is put browser router now anything inside of here will allow us to actually route between it okay so browser router is kind of where we're able to write routes as well as where we're able to have links and a nav bar and all this kind of stuff so that's why i'm writing this out then we're going to set up all of our different routes then i'll make a nav bar so inside of here i need to write this roots tag and then i need to end the roots tag and this is where you're allowed to define roots you can only do that inside of roots so make sure you don't try to make a root outside of it and then i will make my roots so i'm going to say root okay the element for this root is going to be equal to we're going to start with all posts now all posts i really could have called like your feed but that's fine we're going to render the all post component for this route the path to this is just going to be home so when you go to the home page it's going to bring you to your feed which will render all of the posts on the screen or it will show only the posts of the people that you're following uh depending on uh what is it if you're logged in or if you're not logged in so i put exact here now what exact does is just make it so the path has to match this exactly if you don't have that then i could go to slash and then anything else like slash hello slash world it would also match with this path just because it's only a single slash so that's why i have exact okay now continuing we're going to have another route i'm going to say root element equals it doesn't really matter the order that we do this so let's just do login i could render it that way but i want to render it just with a slash for the path for this we'll say this is slash login now we could do exact but it doesn't really matter to me here because if you type slash login and then slash something else um that's fine we used to bring you the login page um i think it's fine to just have login like this okay now continuing not router we want to root the element for this one might as well just do sign up so let's do sign up okay and then the path here is going to be equal to slash sign up uh and then we'll have slash nice okay continuing i'm gonna have root element equals and then the next one that we want is profile so i'm going to say profile like that and then this will be path is equal to profile okay we need another root uh where's my autocomplete here root element equals yeah we want search that's good for the path we'll go with slash search okay and there's any other ones that we need uh we need create post okay let's do create post we'll say root like that and i keep saying router i mean root sorry if you see router that's not what i meant to type i meant to type root okay and then element is equal to and then this is going to be uh what was this we need to create posts so let's have create post the path will be slash create dash post okay and then we can end and for sign up just because my ocd will kill me here let's go with sign and then hyphen up and i realized that i made a small mistake here guys let's just fix this to be root as opposed to router again i don't know why i kept typing that uh it's meant to be root not router and i'm sure i'm mispronouncing that and you guys are making fun of me but that is fine okay so now we have all the different routes that we need so we can go to login sign it profile search create post we'll need to make a few more specifically we need one for logout i'm also going to do something here for profile i will actually have a variable in the name and i go with username now what this means is that i'm going to type slash profile slash and then the name of the user that i want to go to and then this will be passed implicitly to the profile component so i'll be able to know uh what the parameter was essentially to get to this profile page okay so now that we've made those changes let's run our front end so let's go cd dot dot let's cd into the front end let's go npm and then start and we'll go to local host colon 3000 and let's just see if we can go to some different routes here alright so i've just opened up my react application here notice i'm on the all post page which is what happens when we go to the default route now let's try sign up okay brings us to sign up let's try login okay brings us to log in let's try profile uh we'll go to profile slash tim actually because we need a variable okay brings us to profile i and i'm sure the other ones are going to work as well there we go we have now set up the react router all right so now that all of that is working i want to build out a nav bar so to do that i'm going to bring in a few things here from bootstrap that i need to use so i'm going to say import we're going to import the nav bar we're going to import the what else do we want here the container we're going to import the nav and we're going to import the button from and then this is going to be react bootstrap so react and then bootstrap like that okay let's start building the nav bar so we're going to use the navbar component okay inside of here i'm going to say collapse on and then this is going to be select and then i'm going to say expand is equal to medium now this says when am i going to start expanding the nav bar from a collapsed nav bar to a larger nav bar that's when the screen size is medium which is a certain pixel amount in bootstrap essentially when i have collapse on select what that allows me to do is make it so that i can collapse the nav bar when it's a smaller version of the navbar you'll see what i mean when i start messing with the screen but this nav bar will be dynamic so on mobile you'll have to actually click on the button to view all the different links then you can click on a button to collapse the nav bar and hide all of the links and it's saying when do i want to expand the bar while i want to expand it into a full size now bar once the screen size is medium okay now for the background i'm going to make this dark and all this stuff you can find from the bootstrap documentation so if i don't explain something then just reference it there and for the variant of the navbar i'm going to go with dark and that's all i need for the navbar definition here now inside of the nav bar i need to put a container so i'm going to say container this container is going to be fluid which means it takes up the entire top of the screen so inside of this container i'm going to put a few different things the first thing i'm going to put is kind of the branding now the branding would be the logo in this case i'm just going to put a name so the way i do this is i say link container i need to import this which i'm going to do now so i'm going to say import and then link container and this is going to be from and this will be react bootstrap or actually react router bootstrap sorry so i'll explain why we need this you need a link container when you are using bootstrap components with a react router seems a little bit weird but when i want to actually navigate between different pages i want to click on a button on the nav bar and usually i would use this link component to allow me to navigate to another page the issue is if i just use this standard link on the navbar it's going to be styled in a really weird way so instead i surround it with this link container and then that's going to make it so that i have the default styling of the navbar and that the styling of this link component doesn't override it hopefully that makes a bit of sense but that's why i needed to install react bootstrap or react route or bootstrap to get this link container component to allow my styling to stay consistent so i'm gonna say link container and i'm gonna say two this is gonna go to slash and then i'm gonna say navbar uh wait what the heck this needs to go inside of here sorry my autocomplete is doing some funky stuff i'm gonna say navbar.link okay and then inside of the link i'm gonna put instagram clone because that's the name of our app okay so that's the first thing that we need in this link container then what i'm going to do is say navbar dot and then toggle now this is going to be the toggler for the nav bar allowing me to expand it or unexpand it or collapse it right collapse on select and then i'm going to put all of the stuff that i want to be collapsible content so i'm going to say navbar dot collapse inside of here so all the stuff that goes inside of if this will be collapsible when i hit this little toggle button for the nav bar so now i want to add a nav so i'm going to say nav okay and then inside of here i'm going to put all of my links and link containers so i'm going to say link container and then this is going to be two and this will be slash okay so inside of this link container i'm going to say nav dot and then link and then we need to end this so nav dot link okay and then here this will be feed i mean i can go with home feed really whatever i want now let's copy this a few times the next thing that we want is search and the last thing that we want is just post now for the two links we got to change this this would be to search and this will be two create and then hyphen post all right so that wraps up most of the nav bar but i want to put something on the right hand side of the screen that allows me to log in to log out to view the profile of the current user and then to sign in if i'm not currently signed in so for now we'll just put a sign in button but then we'll make it so that once you're signed in it shows you the log out button and lets you view your profile so for now i'm just going to say navbar.text because i don't want this to be kind of a link like you see before i want this just be regular text and then inside of here i'm going to say link and then for the link this link is going to go to and then slash login and then i'm going to say not signed in okay so it's going to allow me to sign in when i click on this it will bring me to the login page so let's have a look at what i did understand i just wrote a ton of code at once to do that we can just refresh the page on slash home here and we should see that we get a navbar uh okay let me just go here and clear the cache and we're still not getting this um all right i'm not sure why we're not getting a navbar here let me have a look and i'll be right back all right so i was running this code and i was having trouble figuring out what the problem was because i wasn't seeing anything being rendered on my screen but then i looked in the console and i realized that i actually named this right here on line 21 link when it needs to be brand so my apologies but this needs to be navbar.brand and then everything else should be fine and now when we come back to the screen we should see that we get a nice navbar here we have feed search post not signed in i'm going to show you how we can move that to the right later on when i click between the different links it brings me to the different pages when i click on the brand here instagram clone it brings me to that page so i just want to jump in here for one second and mention that if when you're looking at the nav bar you're not getting a styled navbar and it looks really strange and kind of default styles what you can try doing is adding this line right here on line 4 to your index.js file so you're gonna have to just type this in dot dot slash node module slash slash bootstrap slash dist css bootstrap.min.css and that will actually import the css file just in case for some reason it's not being imported now this line errors out for you then what you can do is just manually install bootstrap it should already be installed but you can do npm install and then bootstrap like that and then you should be good to go and you should be able to actually run this line again i'm not sure why that would be a problem for you but i've had that in the past so again just import this line right here in your index.js file and it should fix that problem for you also make sure your index.js file is right inside of src and none inside of any other folder otherwise this relative import is going to be different all right so that is all we need for the nav bar and also you can see when i make this small enough it makes it collapsible so now i can open and close it so let's get the css working on the navbar just so that we have this moved over to the right hand side then we'll move on and code out some more stuff so to fix this and make that go over to the right hand side what i'm going to do is add another nav group here so i'm going to say nav i'm going to put my navbar.text inside of here and again all of this you can find from the bootstrap documentation i'm not going to explain how all of it works and what i can do is go to this first nav here i can say classname is equal to and then me.auto now what this will do is make it so that we're going to space these two nav components out and that other nav component is going to go to the right hand side so you can see now it's moved over to the right hand side and if i remove this class here so let's remove that and have a look notice that it kind of comes back over here to the left so me auto just makes it so we're going to take up the entire space that we have so this will take up as much space as possible and then essentially push this over to the right hand side if we want to have a look at that more specifically we can inspect here and when we look at we have our div navbar collapse we have another div notice it's taking up all of the space right this one that has the me auto on it it's pushing all the way the right hand side then since it takes up all the space it pushes this tag over here all the way to the right hand side of the navbar okay so that is the css that we needed for the navbar i think that is all good for right now now we can start looking at login and sign up and then sending some requests to our api for actually creating an account and then signing into an account so let's start by coding out the sign up page which is going to allow us to create a new account so inside of here i'm going to say import and we're going to import use state from and then this is react then i am going to import a form and a button from and then react bootstrap then continuing down here i want to set up some state for the different form entry points or form elements that i'm going to have so i want to ask the user for a first name a last name and a username so i need state to store all three of those pieces of information so i'm going to say const and we'll go with first name and then why is my autocomplete giving me such weird things maybe set first name is equal to use state and this will be a string and then i'm going to say const and then last name and then set last name is equal to use state and then const username set username is equal to use state all right we'll use that state in a minute then we want to write the actual html of the page so we're just going to set up a basic form so i'm going to say form form like that the class name for now will be empty but we are going to add some css to make this centered on the screen and i'll show you how we do that in a minute and then inside of here i'm going to say form dot group i'm going to do a bunch of these groups for each of the different elements that i have or inputs that i have now for the class name of these groups excuse me it's going to be mb4 which stands for margin bottom 4 which just means we're going to space out our different form groups so that we have a margin at the bottom and they're not kind of squished directly together then i'm going to create a label so i'm going to say form.label the first thing we'll ask for is the username and then we need a form dot control element which is equivalent to an input element okay form.control and then for this it's going to be type is equal to text and then the placeholder is going to be username and then the on input function we're going to call a function although let me fix the string here i will write that function in a minute now i also realize i don't need to end the tag like that i can just end it inside of here and i think that's going to be better okay so here we go we have our first input here again we have username that's going to be the label for this here and that's inside of a form group okay let's copy this two times because now we're going to have the same thing for first name and for last name remember we're not going to do a password here we're just going to allow them to create an account without any authentication and then sign in by just using the account name here let's change this to be first name and let's change this to be last name okay i think that is all good now we want to set up the different functions as well as the button to submit the form so outside of this form group here i'm going to make a button okay this button will be our submit button so the variant of the button is going to be primary this is going to make a nice blue button you also can use a variant like secondary you also have danger and warning i believe which will give you kind of a red and yellow color the type of this is going to be a button and then the on click is going to be a function again that we've yet to write and then inside of here we're just going to say create account for this button i'll show you what the page looks like in a second uh but that is pretty much what we have for the html of the page all right so now we can add the different functions which are going to update the state for our respective input fields and again form.control is just equivalent to an input field but it's going to give us a nice styled element so what i'm going to do is make some functions here i'm going to say function we'll go with update username this is going to take in e now e is going to give us what we actually typed into this input field so what we're going to do is say set user name and then this is going to be e dot target dot and then value and that will give us exactly what they typed into this form control element now we can copy this function and just change the name of it to be update and then first name and then rather than set user name this is going to be set first name then copy this one and we'll do the same thing here for last name so this will be update and then just change first here to be last and this to be last okay then i'm going to go inside of here and i'm just going to write the respective functions so this is going to be update and then username this is going to be update and then first name and this is going to be update and you guessed it last name and then we need an on click here for this button so let's just make a function uh and is for some reason it's not showing that i'm calling this function i probably just need to save the file okay that's fine for now yeah okay now it's good but i want to go to function here and say on create or actually let's just call this create account okay we'll take an e here as well for now we're not going to do anything but i'll just call it so we don't get an error in our jsx here which we're writing okay so create account save that should be all good now i'm just going to open up my react application of course i'm running the npm start command in my terminal that's why i'm able to view this right now and let's just go to not signed in okay it brings us to login i want to go to the sign up page actually so sign hyphen up and then notice that we get this nice form now i want to put this in the center of the screen again i'll show you how we do that in a second but for now we have username first name and last name and then the button to create an account excuse me so let's code out the logic to actually press this button and have it make an account for us and then once we do that we can style the elements all right so let's come inside of here and really what we need to do is just start coding out these different functions now the only function we actually need to write here is going to be create account and what we need to do is send a request to our backend which can create the account for us so before i can actually complete this i need to write the corresponding api endpoint in my back end so let's go to api here let's go to index.js and we're going to write our very first route here that's going to be able to create an account for us so what i'm going to do is write a post request here or write a post root i guess because when we're creating something we're going to do that with the post method so i'm going to say app.post and then for the url here this is going to be create and then user i could write this in a different way but i think that's fine for now and then we need to accept a request and a response object and then inside of here we're going to write the function that we want to occur whenever we hit this endpoint okay so the first thing i'm going to do is i'm going to get all of the data from the request body so i'm going to say const and we'll go with body is equal to request.body this is how we can get all of the data the json specifically that's sent to this post request now we're going to expect that we'll be sent a first name a last name and a username and then we'll send that information to actually a separate file to the api calls file where then we will call the sanity api to create a new user so again this is really just a proxy that's going to be calling the appropriate functions that will then make the api calls to our sanity api and database okay so i'm going to write a function that we've yet to define but it's called create user and we're going to pass to this body dot and then first name body.lastname and then body.username and then we're going to say dot then because this will be a promise we're going to take data and we're just going to say res.json and then data now what this does is simply return this data as a json as the response from this right here so hopefully that makes sense but that's all it's doing we're going to call this function it's going to return to us a promise once the promise resolves we're going to get some data from it so a result and then we're going to return that data so now that we've written this create user function let's go to the api calls file this is where we're going to interact with the database so i want to write all of the functions that are using my sanity client inside of here so the first thing i'm going to do is import the sanity client because this is how we're going to interact with the database right using the client that we set up from client.js and this is going to be from and then dot slash client.js then i'm going to say const functions is equal to and then this is going to be an empty object and the reason i'm doing this is because i'm going to put all of the things that i want to export from this file inside of functions and then just export this function's object so to show you what i mean i'm going to say functions dot create user this is going to be equal to an arrow function and this arrow function here is going to take in the first name the last name and the username then inside of here i'm going to use my sandy client uh yes i'm going to use it i'm going to say return sanity client dot create now dot create is how you create a new document you can create any type of document using this command and what you do is you pass an object of the document you want to make so in this type i in this case story i put the type so i'm going to say underscore type and this is going to be user the lowercase version so the name of our database model then we need to put in all of the fields that we want to complete so i'm going to say first name is first name last underscore name is lastname username is username and then created at is going to be new and date okay and that's actually all we need to create a new object in the database or a new document now this is going to be a promise so we're returning the promise which then we can resolve from inside of index.js so once this finishes right i call my dot then i get the data the data is just going to be the resulting object that we created so it's going to give us the json of that object in the database and then we'll return that here as the response from this route so hopefully that makes sense but just to mention here i'm not filling in all of the fields for this user and i don't have to do that and if i go to database and i look at my schemas and i look at user.js you'll notice here that i'm just using the name field that i have right so first name last name username then i didn't fill in photo bio or following and when i don't do that they'll just get the default value of this type so again empty array empty text and then an empty image which is fine we can fill that information in later on we actually edit a user's profile so that's it this is how we create a user now that we've done that let's actually call this from the front end because we've set up really all we need in the back end you're going to notice the back end will be fairly straightforward we just require it kind of for security here so again we're not exposing our sanity api token on the front end so inside of this create account function what i want to do is send a request and i want to send a request to our backend right so what i'm going to do is start by setting up my request options so i'm going to say const and then this is going to be request options and this is going to be equal to and then i need to make my method which is going to be post and then i need to add some headers here so for headers i'm going to say inside of here the content type okay is going to be and then this is going to be application json and this is content hyphen type my apologies that's all we actually need for the headers and then for the body this is going to be the data that we want to send so we're going to pass json dot and then this is going to be stringify okay and we're going to stringify this object here and this object is going to contain the first name as the first name key the last name as the last name key and then the username as the username key okay so that's what we need for our request options we're going to use this inside of our fetch request so now i'm going to say fetch and i'm going to say slash create and then user okay because this is the url that we want to hit and then we're going to pass our request options and for some reason oh i'm putting this inside of my request options oops let's put this down here okay that should be better so fetch create user request options and we're going to say dot then so whenever this response actually comes in we're going to get our response which will be underscore res and all we will do here is write a little arrow function and for the arrow function for right now i'm just going to print out the response so i'm going to say console.log and then underscore res and i'm actually going to do underscore res.json just so we can see what the response was and then we'll do a dot catch here and for the dot catch we'll catch an error and we will just console.error and then whatever that error is okay now we will do something else here in a second so we actually show an alert on the screen saying that you created the account and then we'll navigate you to the home page but i just want to look and see if this is actually working and for right now we can test that by just printing out some stuff to the console so my react app is open so let's go to the console here and let's try to create a new account so console for the username let's just go tim for the first name let's go tim for the last name let's go with my last name which is reseca and okay we got an issue here so it says promise pending rejected 500 internal server error okay so we're getting a few issues here the first problem that i'm realizing is that i forgot to run my backend api so what i'm going to do is open a new console here i'm actually going to split this terminal and inside of here okay let's make that a lot smaller let's go cd and let's cd to our api and then let's go npm start okay that should fix that problem obviously we need the back end running for us to be able to send a request to it and then let's come back here and let's try this again so i'm just going to press create account and okay again we get 500 internal server error so let's refresh this and try one more time tim tim ruseka create account okay still getting there so let me have a look at this and see what the issue is all right so i was just having a look at this error here and there's actually quite a few things that we did wrong so first let's go to the api calls function and let's export the functions which i forgot to do so export default functions okay which is this object right here then we're going to go to index.js and we're actually going to import this because i can't call this create user function when i haven't imported it as i'm sure many of you already noticed so i'm going to say import let's spell import correctly okay functions from and then this is going to be dot slash api calls and then make sure you add the dot js here okay now that we've done this we want to get the individual function object from this functions object or the individual function from the functions object so i'm going to say const and then i'm going to put inside of curly braces here create user is equal to and then functions like that now i forget the exact syntax name for what i'm doing here but i'm going to explain it as i'm breaking down this object into its individual components or individual fields and so i'm able to get the create user function from it by just doing this and if i add other functions later on i can just write them out in this way and yeah that's how we're going to actually get access to the function okay so now we have access to this function here also on my front end i'm going to go to sign up here and i'm sure many of you already realized this for our response what i'm going to do actually is i'm going to return underscore res.json because this is a promise to get the json and then i'm going to say dot then and also we can remove the underscore here and just have it res and then i'm going to say data and i'm going to say console.log and i'm going to log the data and what did i just do actually move pages okay i don't even know how i just did that let's go back into sign up okay let's save that and now we should be printing out the information that we need okay my apologies about that guys let me rerun the api so you are going to have to restart that and now if i come here and i refresh let's go tim tim tim mercica create account and let's see what we get and notice that we actually get this object and we have now created the account awesome so we have created that id rev type we have a bunch of other stuff we can look at all the fields we have username created at type updated out all this stuff now what i'm going to do here is go to sanity studio and just make sure that object was created so let's run one more terminal i don't want to split it again but i guess we'll have to and let's cd into database and let's go sanity start and now once this is compiled i can go to the studio again i can actually look at my uh my new entry in the database all right so it is now compiled so let's go to localhost uh and then i want to go to three three three three okay sandy studio let's wait for this to load and let's see if we've created this new user and we can view it inside of here so i'm gonna go to user and we should see now that we have users now the reason we had two is because i kind of messed up and i was messing around with this while i was trying to fix the error before anyways the point is we now have the users that we created and let's say we want to delete one of them because in this case we have duplicate what i can do is go here i can click on this little down arrow and i can click delete and i can just delete the user like that okay but we do have the user and this is great for debugging we can actually check to make sure everything was created and for this user here we have our first name last name and then username and then we can manually enter some other information if we want great okay so now that we've done that i want to put this in the middle of the screen and i want to start adding some alerts on the screen that tells us hey you created the account successfully because we need some feedback to our user right so let's move this down i'm just going to hide that for now we don't really need to rerun that and let's now put this in the middle of the screen so to do that i'm going to go into css i'm going to make a new file here and i'm going to call this dot signup.css then inside of sign up let's look at what classes we have so for the form i'm going to add a class name and this is going to be sign up and then form so now we'll use this class name inside of our css file but first let's import the css file inside of here so let's say import and then this is going to be dot dot slash and then css slash and then sign up dot css okay then we'll go to signup.css and we'll go dot sign up form and we'll write the custom css here to put it in the middle of the screen so i'm going to use flexbox to do this so i'm going to say display and then flex i'm going to say align items this is going to be center i'm going to say justify content this is going to be center sorry this needs to be a regular colon not a semicolon then we're going to say the flex direction is going to be column which means all of our items will be aligned vertically and then we're going to have height and this will be 100 just so we fill the entire screen okay we may we might have to add some more css as well to make this work up but for now that should do the job so let's open up our app and notice now we are in the middle of the screen awesome now the thing is i want this to actually be dead center in the middle of the screen not just aligned in the center uh horizontally so to get it to be dead center vertically i actually need to extend the size of the root element or the root div of my html so if i go here and look at the html so i go elements you can see that the body is only this high so if i want this to be in the middle of the screen what i need to do is make it so that this root div here takes up as much room as possible and then once that's happening this will automatically be pushed into the middle of the screen because of the elements or because of the css styling that i put here alright so to fix this problem i actually need to write a few pieces of css again just to make it so that the root div is going to extend the entire size of the screen and then all the other divs inside of that that's containing the main content of the page also extends the full size of the screen just so this goes in the middle so i understand this might be a little bit confusing but we're going to go to index.css so inside of index.css i'm just going to write some css here for the root so hashtag root which is the root div i'm just going to make the height 100 percent and then i'm going to make another class here and we'll use this in a second called fill parent and i mean this makes sense what it does but it's going to fill its entire parent and the way it's going to do this is by having a width of 100 percent so let's do that it's going to have a height of 100 percent and let's add a semicolon not a comma i keep messing that up and we're going to say the display here is flex okay and then the flex direction is going to be columns that everything we put in here is going to be aligned vertically because that's fill parent while we're here let's write another class that we're going to use later called center so i'm going to say dot center i'm going to say height this is going to be 100 and then percent we're going to say align items this is going to be center okay we're going to say display and then flex and then we're going to say flex direction and this will be column okay so we're using flexbox for all of this now i'm going to go to myapp.js and here we have an empty class name i'm going to put fill parent now what this is going to do is make it so all of the content inside of here will fill the parent so fill that root div so we should expand it and take up the entire screen we might have to add a little bit more css but i think that should be good for now so let's go here and let's just clear the cache and reset and okay we're not getting it in the middle of the screen so let me have a look here and see what the problem is all right so i've found the problem very simple fix here we just need to go to body and we need to go height and then it's going to be 100 vh which stands for 100 vertical height so just the entire width or sorry the entire height of the screen the viewport specifically uh so this will now make it so the body has the max height then the root will have the max height and then the div that we have will have the maximum height as well and so we should get this centered in the screen fingers crossed let's go here and notice that we now have this right in the middle of the screen which is what i wanted okay now i understand the css is probably not as good as it could be i'm not a css master again i'm not focusing too much on styling but now to get everything in the center of the screen should be pretty straightforward okay so let's try this one more time let's make an account here let's say joey let's go with joe and smith maybe joey123 create account let's go to console and notice it creates it so now what we want to do is we want to navigate to another page and then give some feedback to the user so we can start with kind of an alert for the user and to do that i'm going to go to this alert dismissible component and we're going to start coding this out and then we'll use this inside of our app component and we'll have kind of one simple way to trigger alerts from the main app component and i'll show you how we do that for now though what i want to do is import a few things so i'm going to go and say import and then this is going to be use state and this will be from and then react and then i'm going to import the alert component and this will be from react bootstrap so from react and then bootstrap like that okay now inside of here we need a piece of state so for the state we're going to say const and then this is going to be show set show and this just tells us if we're currently showing the alert because the alert will have a button that allows us to close it so by default this will be true but we could make it false we also want to accept three props here to this component i want to accept a message a variant and a delete alert function so when the alert is deleted we will call this function it's kind of a callback right the message is the message we want to show and then the variance is well the variance for the alerts that's very dynamic and we can show a bunch of different things so here i'm going to say if show then i will return something otherwise though then what i will do is just return no because we're not going to show anything if we're not showing the alert right so if we are showing something then i'm going to return an alert component so i'm going to say alert and then alert like that and yeah we can end it like that that's fine inside of here we're going to put the message for the alert and then for the variant this is going to be equal to the variant okay and then we want to have an on close and the on closes when we click that little button right and what we'll do here is we will have an arrow function and this error function will simply call delete alert but it's also going to call set show and it's going to make this false okay so let's put our curly braces here and then let me explain exactly what we're doing okay come on give me uh some autocomplete what's wrong with this i could not find matching tag oh i need a lowercase on the l okay and then i want to add something to the end here which is dismissible and this will just be true now when we put this in we don't have to manually say true but this makes it so we can dismiss the alert alright so that's actually all we need for this component so we have a piece of state telling us if we are showing the component or not so if we set this to false then we're not going to render the alert but if it's true then we will be rendering the alert right and then for the variance that's whatever variance they pass in there's a few different options like i think we have success warning we may have danger there's a bunch of them i'll go through them later on close means when we click the little dismissible button for the alert then what we're going to do is delete the alert so we're just calling this delete alert callback function and then we're going to call set show and what set show will do is make this false right it's just changing the state so then we'll no longer render the alert and then inside of the alert the message will show as whatever message they pass to this component okay so now that we have alert dismissible i want to go inside of my app component and i'm going to use some state inside of here for the alert so we'll make it so you can have one alert at a time so we're going to say const like this and then this is going to be alert and then set alert and this will be equal to use state and then inside of here this state is actually going to be no and we'll have an object that is stored inside of here that will give us the variance as well as the message for an alert and i'll show you how we trigger that so now what i want to do is dynamically render this alert underneath the nav bar if we do have one so i'm going to write some jsx here and i'm going to say alert question mark and then if we do have an alert then i'm going to say okay i want to render this alert dismissible component okay come on auto complete give it to me alert dismissable nice okay i want to render this component and what i need to pass to it is my alert so i'm going to say dot alert okay and then i want to pass a callback function for delete alert and what the delete alert callback is going to do it's just going to be an arrow function that is simply going to call set alert and it's going to set it equal to no okay i believe that's all we need so if we have an alert we're going to show this otherwise we just won't show anything so we'll have no okay hopefully that makes sense if alert does not know render this component dot dot alert is going to again decompose and kind of break down the alert object the alert object is going to have the variant as well as the message and then we will delete the alert and the delete alert function is just this which is going to set the alert here to be null so we'll no longer render this alert component okay so now how do we actually trigger an alert to be shown well i need to pass the setalert function here to the props of in this case the sign up page and then it can use that function to change the state in the app component which will then show the alert so if i go to sign up and i say set alert is equal to and then set alert like that then we're able to actually now call this function from inside of there so let's now go to sign up and let's see if we can use this so instead of signup in the props i'm going to take set alert okay and i keep typing in uppercase l it needs to be lowercase and then here when we get our data what we will do is we'll say set alert and the alert is going to have a variant of this will be success this is going to be a green alert and then the message is going to be account created so we'll say your account has been created thank you very much autocomplete and what is wrong here am i missing a bracket or something uh okay let's put that there um set alert oh i need to get rid of this semicolon sorry okay and i think that should fix it nice okay so now we are setting an alert once we get the data and just so this doesn't give us an error we'll do underscore data like that all right the next thing we need to do is navigate to the home page so to navigate to the home page i'm going to import a hook here so i'm going to say import and then this is going to be use navigate and this is from and this is going to be react router dom now this is only in react router version 6 and above so if you're using version 5 although i don't know why you would be then this is not going to work i would just make sure you're using version 6. okay then what i'm going to do here is say const navigate is equal to use navigate and what use navigate allows me to do is navigate between different pages and go to a specific root so now what we'll do is after we set the alert we'll say navigate and we'll just navigate to whatever page you want to go to which in this case is just going to be slash although i just need to add some curly braces here so we can have multiple statements being executed at the same time let's add a semicolon and now i believe we are good okay so we're going to set the alert we're going to navigate so now we can test this out by creating another account and see if it navigates us back to the home page so let's go here to react let's refresh let's just go test underscore account let's go test and then account and then create account and let's see okay your account has been created and then navigates us over to the other page and if i hit the x button it closes the alert awesome we now have a way to create alerts we now know how to navigate and now what i want to do is make it so this little banner here tells us if we're signed in or not because after i create a new account i should just automatically be signed into it so how am i going to do that well from my app component here i'm going to make a piece of state i'm going to say const this is going to be user and then i'm going to say set user and this is going to be equal to use state and this is just going to be a string now this is going to be the name of the user that's currently logged in and we're just going to store that in the app component this is not the best way and if you're doing real authentication you do this in a different way but for now we'll just store the user here in the app component as a piece of state and that way we know if we're signed in and then we can check and render something different here for this navbar text so if we are signed in so if we have a user then we're not going to render not signed in we're going to say you know signed in as whatever and then give kind of a link to go to that user's profile so in fact let's do that now so here what i'm going to write is user question mark checking if we're signed in or not and if we are signed in then i'm going to say navbar.txt okay and then for the text i'm gonna say signed in as and then we'll put a link and this link is going to go to so two equals and then this is gonna be slash profile slash but then we're going to add whatever the current user is because to get to the user's profile well it's profile plus and then the user name and then we will have inside of here the name of the user okay uh nice i think that's good for now and then we need to just have an option here where if they're not signed in then we're gonna show this so we're gonna copy that paste that here and now this is what we have so if we're signed in we show this otherwise we show this however if we're signed in we also want to show a button so the button will be inside of the navbar text as well so we'll say button okay the type is going to be button the variant is going to be primary okay and then we'll have an on click and what the on click is going to do is just going to set the user to be false so we're going to say this is an arrow function and this will be set user and we just set this to an empty string and then here the text on the button will be log out and i think that's all we need although we also want to make it so there is an alert that goes on the screen when we are signed up so we'll put our curly braces here and then we will set the user to be an empty string and after we set the user to be an empty string we're going to set an alert and we're going to say set alert we need to pass a variant the variant will be warning which will give us kind of a yellow one and then the message will say you are now signed out okay so you are now signed out exclamation point okay so we can test this out now again feel free to pause the video and copy this or reference the code from the link in the description but when i go here and i refresh the page and i go to sign in let's create an account sorry not signed in is bring me the login page i need to go to the sign up page so sign up page okay so let's make an account let's go with tim one two three four tim is great okay create account and then it says your account has been created brings us here and this is not changing okay i need to check why this is not changing because that should have changed so now we're actually seeing the user that's signed in ah well the reason that is not changing is because i forgot to manually change it from sign up i have not actually set the user which is what i need to do so what we're going to do is in sign up here we're going to take another prop called set user and then after we navigate or actually before we navigate we're going to say set user and we're going to set this equal to whatever the username was so i can look at the data and actually i'll remove the underscore now because we're going to use it and i'll just get data dot and then user name and that's what i'll set the user to because well that's the username that the user just signed up with now though i need to pass the prop to sign up so i'm going to go here to where i'm rendering sign up and i'm going to say set user is equal to set user okay so now this should work again my apologies about that error let's go and fix this okay so open this up let's just give it a refresh let's go to the sign up page okay sign up and we'll make an account tim one two three four five tim is great let's fix the capitalization okay create account and now notice that we get signed in as tim1234 and then we have the option to log out now i'll show you how we can add a little spacer between those we need to make it so we hit the log out button it signs out which is what it did okay i forgot that i actually already implemented that so that is all good that is working okay next we'll do the sign in page however let's just add that little spacer between the log out button just so that it looks a bit nicer so here we have signed in as what i'm going to do is just put some jsx and inside of the jsx i'm just going to put an empty string i'm going to put a little bar here now i know this looks a bit weird but it's going to be a bar and then an empty string so we just have kind of a little spacer as well as this pipe now i don't know if i actually even need the empty string but i think that should make it so it spaces out a little bit more but let's have a look at this now if we create a new account so again i have to make so many accounts it'll be nicer when we can just uh just sign in sorry not create post create user or what am i doing sign up okay let's go to not see sign up just regular sign up okay and let's go joe joey12345 very creative joey smith don't really care about the spelling right now we're just trying to test this okay there we go now we have a little spacer between the logout button and between signed and as and when i click on this it brings me to this profile page okay now we log out and it signs us up nice now let's do the sign up page it's gonna be very similar or sorry let's do the login page can be very similar to the sign up page so let's close this let's close this let's go to login and let's start coding this out so similarly to the signup page i need to import use state so i'm going to import use state from and then this will be react and then i need to import a few things here from bootstrap specifically i need to import the form and the button so i'm going to say import form button from and then this will be react and then bootstrap okay so let's go bootstrap like that and i'm going to say import and then we will import use navigate as well as link and then this is going to be from react router and then hyphen dom okay nice now inside of here we can code out our state to start so i'm going to say const and then this is going to be username set username is equal to use state this will simply be a string and then we're going to say const navigate is equal to use navigate we're going to use this though when we sign in we can be redirected to the home page okay now that we have that let's write our login form this will be a little bit simpler than the other one because we only need a username attribute here or username input field so i'm going to say form form the classname is going to be equal to and this actually needs to be the exact same class that we had for sign up so that we go in the middle so really what i can do here is i can just take this class and i can paste this inside of index.css and rather than calling it sign up form i can just call this center form and now i can just use this inside of any of my form tags really i could use it for any div as well and it should just put it in the center of the screen so let's just make a change quickly here let's put this center form and then inside of sign up let's change it so that rather than using the class name of sign up form we're using center form because they're going to be the same and then we can no longer import sign up and i can remove the class from here because i don't need that anymore and if we add any more css in the future we put it in that file okay that should be good let's go to log in so we have our center form now we need our form dot group okay so let's add the group uh for the class name of this we're gonna say class name equals and then margin bottom and then this will be three i believe the other one we did four but let's just go with three let's change it up for this one we'll go form dot label and then we're going to say the label is username and then we want a form dot control which again is equivalent to the input tag okay for the form dot control we're going to say type is equal to text we're going to say the placeholder is equal to username we don't need a class name but we do need an on input so on input here will be equal to an arrow function we could write a custom function as well but this will just take in e and then we can say set username e dot target dot value now we could have done this before and sign up but we've already finished that so we don't need to change now we have type placeholder and then we have our on inputs now we'll get what you type in now that we have this i just want to add something that says how to get to the sign up page because right now we have to manually go to that link so here i'll do something like if you don't have an account then click on this to go to the sign up page right we've seen that before on on sign up forms so i'm going to say small this will just give us some smaller text and then the id actually we don't need an id but the class name of this will be equal to form text and then text muted this just makes it so it's a bit grayed out and it's not as strong as the standard text i'm going to say don't have an account question mark sign up and then we'll put a link inside of here okay and we'll say here now for the link i'm just going to say 2 is equal to and then this is going to be sign up and i think that should be good for that okay now that we've done that let's add a button so the button is going to go outside of the form group so it gets spaced out a bit we're going to say variant is equal to primary you get a nice blue button for the type we will just say this is going to be a button and i'm going to say on click is equal to and then the on click function we'll need to write and we'll do that in a second and here i will say sign in or actually let's just go with login all right so now let's write the function for handling the login so i'm going to say function handle login okay inside of here we're going to have a fetch and we need to write that back in endpoint so for right now we can just say console. the username and then we'll finish this later but for the on click we can just write handle login and we do need to take an e even if we don't use it because it will pass e to that function implicitly all right so now we have the login page sorry not export this is e okay uh and what's the issue here is saying export is no okay no it's because it's still reading the previous one it hasn't seen that i changed this to e anyways now we have login so let's just go to the login page and see what it looks like okay so there we go we can see we get our nice login page i just have to refresh this so everything is working fine then if i click on sign up okay that is a bit weird to bring us to login sign up the reason for that is i need to add a slash here okay apologies about that let's refresh the page let's go back to login okay let's click this now and then it brings us to the sign up page now so we can click this to get to login okay awesome so now we actually want to log in which requires that we have an account so now we need to write the back end that actually will check if the account exists for the user we're trying to sign in as and essentially return to us the account data for that so let's go to our back end here so let's close a few of these files that we don't need let's go to index.js and now let's write to the root all right so here i'm going to write app.get because it's going to be a get request and this is going to be i guess get profile and we will say request and then response this will be an arrow function and then inside of here i'm going to accept a query parameter which is going to tell me the user that i want to get the profile for so i'm going to say const user is equal to request dot query which is the query parameters dot and then user and then i'm going to send a request here to get profile so i'm going to say get profile user dot then and then this is going to be inside of here data and we're going to say res.json and we're going to return that data okay so now we need to write this gap profile function from api calls so first of all let's just import it so we don't get the error we got before and let's go to api calls and now write get profile so here i'm going to say functions dot and then this is going to be get profile this is going to be an arrow function this arrow function is going to take in the user and then what we're going to do is say return sanity client and then not get this is going to be dot fetch and what dot fetch actually accepts inside of here is a string which is going to be the query that we want uh to get okay so the query language that we're going to use inside of here is something called grok groq now that is graph relational object queries and i'm just going to write them out here i'll leave some documentation in the description that explains exactly how to write them but it would be a very very long video if i went through explaining every aspect of the query language so you'll start to understand once i give you an example i would just bear with me here because it will look a little bit confusing right now so we're going to put an asterisk we're going to put our square brackets here and the first thing we're going to do is to find the type of the document that we want to query from the database so in this case the type that i want is a user and i just need to single quote this just so that my quotes don't get all messed up here okay so we have our single quotes we have our type which is equal to a user inside of double quotes i'm going to say and and and then username is equal to and then this is going to be the dollar sign and then username because this will be a variable that i input in a second in fact i can just do user like that so what i've just written here is essentially the condition for this query so i'm saying okay i want to get all documents that are of type user and have a username that's equal to the username that i pass right here so that's just going to give me a single document at least that's what i hope for and then what i do after this is i define all of the fields on this document that i'd like to receive so i actually need to put this inside of back ticks just so that we can have this string extend onto multiple lines and inside of here what i'm going to write is all the fields that i want so i'm going to write dot dot dot now what this does is it's going to give me every single field that's that's what dot dot does okay then i can write then what i can do is write my own custom fields in here and kind of modify the fields to get some certain attributes that i'm looking for so a field that i want is following i want to know how many users this person is following so i actually don't care about the following list i don't want to know the individual users i just want to know the count of how many people this person's following because we're going to use this for a few other things as well not just for getting the the username of the user or checking if the user exists right so i'm going to use the account function and i'm going to count how many elements are in the following array of the user's following field okay that's what count is doing just tells us how many are there and then it's going to put it into a field called following so this will essentially override the current following field and give us just the number of people the user's following then i'm going to say followers and this is a bit more difficult what i need to do for this is another query and i'm going to say type is equal to and then this is going to be user and i'm going to say and and references and then i'm going to use the i believe it's called a hat operator or the carrot someone can correct me in the comments on exactly what this symbol is and then dot underscore id now what this references here uh or what this story it's weird because it says references but what this refers to is the id of whatever this user is okay so whatever user i get here from this query or whatever users i get from this query this is referencing that user and so what i'm saying i want to get all the fields i want to get the following and then i want to get followers for the followers i need to find a user that references the current user that i'm on and then add that to a list here again i know this is a little bit weird but that's kind of what this query is doing it's going to give me a list of all of the users that reference the current user that i'm receiving and so that will tell me all of the people that are following this user okay hopefully that is clear and then next i'm going to say photo and since the photo gives us a few different attributes i need to say photo asset arrow like this and then i'm going to break this into an underscore id and a url so a photo insanity is kind of a nested object it gives us an asset it also gives us a few other things as well and this asset what i need to do is kind of break it down into an id into a url so i'm saying okay for the photo the aspect of the photo that i want to get is the asset and then from the asset i want to get the id and i want to get the url and so i have to write that in this way okay that's just how you get the id and the url of the asset of the photo the url is what we use to actually render the photo and it will be hosted by sanity we don't need to download the photo or anything like that okay so that is this first query again i know it's a bit confusing please reference the documentation if you want more explanation but hopefully you can at least understand the basics of what's going on here and i think i can put this on another line it'll make it a little bit easier to read let's just indent all of this by one all right so now that we have this we should actually just be able to use the back end endpoint that we wrote and it should return to us information about the user that we passed here to get the profile from again we're going to use this in multiple places that's why i wrote all of these other aspects of the query if we just wanted to see if a user existed then we really could just have dot dot dot in here and that would just return all of the fields related to the user so index we wrote this as get profile and we're accepting a query parameter so when i go to login now inside of here i'm going to send a fetch request that's going to contain a query parameter so what we'll do is say fetch and then fetch is going to be slash get profile okay and then we're going to say question mark user is equal to and then i can do a concatenation if i want i'll just say plus and then this is going to be username right here okay so whatever they entered into the field then i'm going to say dot then i'm going to get my response i'm going to return myresponse.json then i'm going to say dot then and i'm going to say data and i'm going to look at the data and do something inside of here so for the data what i need to check is if the length of the data is greater than zero now what that means that i actually do have a user because i'm going to be returned a list from sanity of all of the things that match that query so if i go back here this will give me a list of everything that has a username that matches with this so theoretically if i had multiple users with the same username which we're not going to allow but if we did have that i would get all of the users that had that username right because it's giving me a list of all the results so even though this will only give me one result sanity doesn't know that so by default it returns to me a list or an array and so what i have to do is look in that list and see if we have at least one element if we do that means the user exists if we don't that means the user does not exist and then we have to grab the first element out of this array and use that to access the different fields so i'm going to say if the data dot length is greater than zero we need to put this inside of parentheses here then what we can do is say add alert okay we're going to have to take add alert in here so let's say add alert we also want to take in set user so we'll pass that from app in one second but the alert that we want to add is going to have a variant of success okay and it's going to have a message of success fully logged in exclamation point okay so that's what we need for the add alert then we're gonna say set user we're gonna set this sorry let's go to set user to be the data zero dot username and we know we can do this because we'll have at least one element in our data right so data.zero data zero sorry.username and then we are going to navigate to the homepage okay so we're just gonna navigate to slash all right now otherwise what we will do is just set an alert saying that there's no user with that name so we're gonna say add alert okay this is gonna have a variant which is equal to and this will be danger which is going to be red apparently i can't type very well today and then we're going to have a message that says no user with that name exists okay let's fix our capitalization all right we'll do an exclamation point as well okay so that's what we have for handle login and then we'll just have a cache here just in case something goes wrong and we'll have an error and we'll just display that error as an alert so i'm just going to say add alert okay variance danger message will be air and then error.message nice okay so i think that's all we need for the login let's see if this works now and if it actually logs us in and brings us back to the home page so let's go here let's refresh we actually need to rerun our api because we've now changed one of the uh what do you call one of the functions in there so let's end that let's rerun npm start okay it looks like that's working successfully all right so let's attempt this from our front end let's give a refresh let's type in tim and log in and it doesn't seem to be working we're not actually getting anything here and okay so we're getting a crash from our back end and let me go and have a read here and see what it's saying okay param username reference but not provided okay so this is from our sandy client so let's go to our api calls and what i need to do is just fix this so that user is going to go inside of a squiggly bracket sorry kind of forgot that i need to do that since we can pass multiple parameters i need to be inside of a javascript object and so i can just write user like that and i think that will fix the problem for us so let's try this now let's rerun the api so yes you want to end that let's rerun okay and now let's come here let's refresh and let's go tim let's hit login and okay again we got another error so what's the error this time is it saying the same thing uh param username reference but not provided okay so the issue here is that user does not match with username so what i can do is make this username colon and now hopefully that should fix the problem so let's rerun this again my apologies guys whenever you're working on a large project you are going to get tons of errors i like to keep them in just to be real with you that uh not everything is perfect anyways let's restart this so let's refresh let's go here with tim let's hit log in and we got ad alert is not a function okay nice so we can fix that problem now but that means that the sanity uh what is it query that we had didn't fail so at least we're getting an error on the front end here not on the back end we're not seeing anything inside of our index.js or inside of our backend so let's go to login or actually let's go to app and the fix to this is we need to pass our set alert and set user to the login component so if we paste that in here that now should fix the problem because remember in our what is it what do you call these again props we have ad alert and set user but we weren't passing them so of course those were not defined we were getting a problem so let's try this now let's refresh let's go tim let's go login and uncaught at alert is not a function all right so looks like the error is that i have add alert as opposed to set alert my apologies here this needs to be set alert not add alert so let's change all of these to be set and now that should fix the problem again my apologies let's refresh let's go tim let's go log in and there we go successfully logged in signed in as tim nice okay let's log out let's go to sign in let's close that let's try to sign in as an account that doesn't exist like h and then no user with that name exists nice okay so that's working let's go with tim log in and then it signs us in all right so we now have signing in signing out and signing up completed the next thing that i guess we can work on is searching for users then we can start looking at the profile creating posts in fact before we do that let's actually deal with creating posts and uploading files and then once that's done we can kind of move on to some other features doesn't really matter the order that we go in at this point so to create a post we obviously need the html for that page as well as that component so let's start with that we're going to go to create post and we're going to import a few things so i'm going to say import and let's import if we can type here use state and use effect this will be from and then react and then continuing we're going to import just like before in the other pages a button as well as a form from and then this will be react bootstrap and i'm also going to import use navigate so i'm going to say import use navigate from and then this will be react router and then done okay now that we have that let's set up the state that we're going to need so when we create a post we're gonna have a caption for that post as well as a file uh the file will be an image right so we're gonna say const this will be caption is going to be set caption this will be equal to use state and then that's a string then we're going to have const and this will be file and then we'll have sev file really this will just be the image but for now we can call it file and this will be use state we'll just go with an empty string because we're going to store the path to the file and then we're going to have const navigate if we spell it correctly is equal to use navigate okay now i'm going to add a use effect here which is going to run as soon as the component is rendered and what this function is going to do is just make sure that we're currently signed in so i'm going to ask that we're passed here a user as well as the add alert function and it's not going to be ad alert it's going to be set alert i don't want to make that mistake twice and the user we're going to check here and see if we have a user so if we don't have a user if it's an empty string that means we're not signed in and well we can't make a post if we're not signed in so i'm going to add an alert to the screen or set the alert saying hey you can't do this because you're not signed in and then we'll bring you over to the login page so i'm going to say if not user then we will set an alert and for the alerts we're going to have a variant of warning i mean we could do warning we could do danger let's actually do danger i think danger makes more sense and then we'll go with message and we'll say please sign in to make a post exclamation point okay and then what we're going to do is navigate them so i'm going to say navigate and we'll navigate to slash login and i think that's good for that and then here we want to rerun this effect whenever the user changes okay so that's what we need for use effect now let's do the html of the page so i am going to return so let's render a form inside of here so let's go form for the class name right now we can go with center form and then inside of the form we're going to need a file upload so that's what we'll put in our first form group and then we're gonna need a button uh we're gonna need a few other things as well so i'm going to put a form dot group and then slash form dot group a for the class we'll go with margin bottom three so class name is equal to mb and then three okay i think that's fine for now inside of here the first thing that we'll do is have an image tag now the image tag is just going to show us the image that we currently have uploaded so i'll say image src is going to be equal to file question mark if we do have a file then we're going to say url dot and then create object and then url and that's going to be for our file otherwise we're going to say no and then we're going to have class name which is equal to upload image and i'm going to write that class later on okay so that's going to be our image tag again this is going to display the current image that we have uploaded if we've uploaded an image so if we do have a file we're going to get the url for that file you don't have to wonder too much about what this is doing but essentially just allows us to directly reference this file and display it as the source for the image and then we're going to have another form group that we need so let's copy this for this next form group inside of here we will have the file upload so i'm just going to put an input tag let's end it like that and then we'll say type is equal to file we will say accept and then this is going to be equal to and image and then that will be slash and then an asterisk and then let's put our quotation mark and then we're going to say on change and we can make this call a function so for the function let's actually just write it right now let's say function upload file let's take e and then we will take inside of here or we will call sorry the upload file function okay i think that's all we need for the image upload the next thing that we're going to need is the caption so i'm going to say form dot group okay then we're going to have our form dot and this will be control and this will just be the caption so i will say type is equal to text we will do placeholder equal to caption we can actually just do something like enter a caption and then we'll have it on input and the on input will be equal to and we will do an arrow function inside of here that accepts e and then we will simply update our caption so we'll say set caption e dot target dot value and let's fix control so we have the proper capitalization okay other than that we want a button uh why is that highlighting in red okay i think that's fine um yeah that's looks fine to me right now actually let's end the tag like this sorry and then that should hopefully fix our problem for us okay there we go so now we want to have a div i'm going to say div class name is equal to and then this is going to be post button and then wrapper i'll show you why we need this in a second but we're going to add some styling to this div just to put the button in a certain location and i'm going to say button and inside of here we'll say variant is equal to primary and then we will go with type equal to button and then we'll have on not submit but on click is going to be equal to and we will call a function that we've yet to call yet to write sorry so this function will be function and we'll say make post like that okay so let's put make post here and then inside of the button we will just make this say post okay i think that's all we need for now let's have a look at the create post page and just see what we're getting and then we'll complete the rest of this because obviously it's not fully finished okay so we're getting an error here it says set alert is not a function okay i need to remember to pass these two things as props to this from app so let's go to app.js let's go to create post let's say user is equal to user and let's say not add alert but set alert is equal to set alert and then what the heck is this uh the path is fine okay let's just write out because it gave me this weird autocomplete here so this will be set alert is equal to set alert okay now let's try this and please sign in to make a post nice okay so let's sign in as tim let's log in it's gonna take a second okay let's go to post and then we have our file we have our caption and we have our post and i'll have to fix this again because you're noticing that you know the post button is kind of weird the caption should probably be larger the file input isn't lined up so we'll fix all of that in one minute we also want to have kind of a default image for the uh the image right like that we have here so we can see something showing up even if there's not something there let me just refresh again here and see if we're getting any errors okay so let's go tim login and it looks like if we go to post we are all good okay so let's handle the styling and making things look a little bit nicer now all right so i need to add a few classes here as well as a few divs in create post so the first thing for my button here i'm going to say class name is equal to post button okay then i'm going to add a div that's going to surround all of this so we're going to say div class name is equal to and then i guess we'll just go with post or actually let's just go with create post okay let's take that div and let's surround everything inside of here all right again i'll explain all the css in a minute and then we need a few other class names so for our image let's add a class name let's say class name is equal to post image i believe that is fine okay so now that we have all of these classes let's make a custom css file let me just close some of this so it's not clogging up my left hand side so let's make a new css file let's call this createpost.css we can then import it inside of here so we're going to say import and then this will be dot dot css slash create post dot css okay now let's go to create post and let's write the different classes that we need so the first class that i want to write here is going to be create post so let's just write this out and then we can see exactly what's going to happen so i want to set the min width to be 30 percent of the parent i then want to say the display is flex i want to say the flex direction is going to be column okay just so we have a flex box all of the elements inside of that div will now be a flex item and then we're going to have margin hyphen top and this is going to be equal to 2 e m 2 e m is going to be whatever the default font size is i believe of the browser multiplied by 2. okay so that's margin top just to give us a bit of spacing from the top of the screen i then i'm going to have my post button and then wrapper so this is the div that's wrapping that button and this is going to allow me to actually center the button so i'm going to say display this is going to be flex and then i'm going to say align items and this is going to be center and i'm going to justify the content in the center as well all right so now that we have that for post button wrapper we're going to do our post button i just want to make it larger so i'm going to say post button width and then 100 so we'll take up 100 of its parent and then i want my upload image so let's go upload image or actually it's not upload image it's post image to have a width and a height so i'm going to say width is equal to 300 pixels and height is equal to 300 pixels just so it takes up some room on the screen and we should see something now okay so now that we've added this css let's go here and let's sign in so let's go tim okay let's go to post okay so that looks a little bit weird the issue that's happening here is i'm spacing everything out and taking up the entire height of the screen which i don't necessarily want to do so i'm going to need to fix this slightly and the way i'm going to fix this is by actually creating a new class name here so rather than center form i'm going to have post form and let's now go here and write the post form class so i'm going to say dot post form and we'll do something similar to what we had for center form but we're just not going to take up the entire height so i'm going to say display this will be flex we're then going to go align items and this will be center and then i want to have justify content this will be center and then i want to have the flex direction and this will be column okay so let's see this now and okay i got to sign in so let's go tim log in let's go post and close although the image it's still a little bit weird right it looks like this input tag is going above the image i don't know why that's the case so let me have a quick look here and i'll be right back all right so i'm just having a look here and i made a few kind of silly mistakes so first of all i added a post image class to this input tag which was not expected and i also realized that i named this upload when it should be post to match with what we have here right post image and now post image now we'll have a width and height i also realized that for this form i forgot the class name equal to margin bottom three and i believe now with those fixes we should actually be good so let me have a look at this now and that looks much better okay everything is aligned so just quickly looking at the css uh what we did is we made it so that our post form has a display flex everything is aligned in the center so horizontally and vertically and then the direction is column meaning that we're having everything aligned vertically right then we have create post so for create post i just wanted to make the minimum width of everything 30 so that way we're gonna take up a certain amount of size on the screen no matter what then i have display flex flex direction column and the margin top is this right here so it's making it so we're not directly squished to the top of the screen we have some padding between the other diff so that's what we're doing there or i guess a margin padding whatever you know what i mean and then we have post button wrapper display flex align item center and then justify content center this pushes our button into the center of its container because it wouldn't have been directly in the center before and then we have post button with a hundred percent just to make it take up the entire width of its container which will be 30 of the width of the div because this div the create post div is going to be 30 of the entire screen so it will be 100 of this div right hopefully that makes sense and then post image we're just giving it a width and height of 300. we could do percentages but i think this is fine and you'll see if we resize the screen everything actually looks all right and we can you know kind of move it around and it's all good in fact maybe we want to just make the image uh have a width equal to 100 and a height equal to 100 uh although height i guess i can't really do i can do height 300 with maximum and then that way it will uh expand although i'm not super fussed with the css for now so honestly let's just leave it and you guys can mess around with that if you want okay so that is uh most of the styling for create post now of course we want to actually be able to make a post and we need to be able to upload a file now uploading a file is going to be a bit more complicated but inside of here what i can do for upload file is say set and then file like this and it's going to be e dot target dot and then files and then zero because we're only uploading one file okay so that's what we'll do we could also put this in arrow function but i think it's fine just to leave it here it doesn't really matter and now for make post we want to write this before we can do that we need to be able to handle this on the back end so let's go to index.js and let's start writing it now so that we can actually accept a file upload as well as the caption and the user that's making this post and then we can create a new post now this is fairly complicated uh to actually accept a file upload we have to use a few things that we haven't yet seen but that we installed previously so i'm going to go up here and i'm going to say import and then i'm going to import multi from and then motor now i might be mispronouncing that but that's something that we need to use to actually handle a file upload now after we make our app what we need to set up here is a storage location for all of the files that are going to be uploaded now i'm going to put them in a folder here called public so in api i'm going to make a new folder this folder will be called public and that's where we're going to save all the files that are being uploaded before we then upload them to sanity because we need them stored on our local disk before we can upload them to sanity we can delete them after if we want or we can just keep them here it's really up to us so what i'm going to do is say var storage like that is equal to multer dot and then this is going to be disk storage and we're going to define a location where we want to store this so inside of disk storage i'm going to say the destination is going to be a function and this function is going to accept a request a file and a cb and we're just going to say cb and then inside of here it's going to be no and then public and this is a callback function now i understand this is not going to make any sense right now i'm going to be quite honest with you i just found this code on stack overflow tested a bit and it seemed to work so i don't know exactly what's going on here but i will try my best to explain the parts that i do understand i do know that what this does though is set up a storage location where we're able to save files to so i have the destination which is equal to this and then the file name is going to be the callback function here and it's going to be no and it's going to be date dot now plus and then we're going to put a hyphen and then we're going to put file dot and then original name okay so we're getting the destination uh to get the destination we take in the request the file and a callback function and we just call the callback function with public now callback is going to be essentially our current location so we're going to append public to it which means that the location that we want to save this is in the public folder right so relative to our current path plus the public folder then the file name that we want to save is going to be daytime.now so whatever the current date is plus a string plus the file.original name just so that we have a unique name for our file name okay now that we have that we're going to say var upload is equal to multer and we're going to pass this in object which is storage storage so now it knows where we're going to be saving any uploads now to actually accept and upload we're going to do the following we're going to say app dot and then i'm going to make this a post request because we're going to be adding a a new image and this is going to be slash create post so sorry not just new image but a new post then i'm going to pass your upload dot and then single and then the parameter type is going to be file because we're uploading a file and then we are going to have our regular request and our response and what we're going to do inside of here is get the body so we're going to say const body is equal to request dot body okay and then we're going to call the function create post and we're going to pass through this the body dot user which is going to be the user that we want to make the post for the body dot caption which is going to be the caption of the post and then the request dot file so notice i'm doing a request file not body.file because the file that we want to store will be a part of this request because we have this upload.single here then we're going to say then i'm going to put inside parentheses here data we're going to say res.json and then date now i will explain how we actually upload the file in a second because we're going to have to do that from the create post function what we've just done here is set up a storage location again don't worry too much about this code i don't fully understand all of it i just know that it does work we then have upload now this is the multer object which is going to allow us to actually accept a file upload here on our server so now we pass in here upload.single file which means we're accepting a single file to this post request okay as well as any of the request body that we want and then we're going to take body.user body.captionrequest.file pass that to create post and request.file will be the path to the file which will now be sitting on our server so we're uploading the file from our front end we're then going to be downloading it on the back end saving it locally and then we're going to take that file and use that and upload it to sanity okay the reason we're doing this is because we need to upload to sandy so we first need to get the file here on our back end then once we have it here we can use it and send it to sanity all right so let's go to api calls now and what was the function we want to write the function create post so what we're going to do here is say functions dot create post now this will be an arrow function and what we want to take in here is the user the caption and the image okay and then we're going to say return and this is going to be sanity client and the first thing that we need to do is we need to upload the photo to sanity so to upload a photo to sandy is different than to create a regular document so we first upload the folder or first upload the image story then we're going to link the image as this user's post so you'll see what i mean in a minute but we're going to say sanityclient.assets because we're uploading an asset we're going to say dot upload we're going to upload an image and then we're going to create a read stream and this is going to be of the image.path now i need to import this from our file system so we're going to go up to the top here and we're going to say import create read stream from file system okay and then we also need to import one other thing the base name from and then path and i think path is installed by default but if it's not then we'll have to install it in node.js okay so we're creating a read stream of the image.path this is essentially going to give us a byte stream of this image and then we'll be able to upload that to sanity because well we need to take the image turn it into a format sandy can accept which is this and then upload it now we also need to pass here as an additional argument the name for this file so i'm just going to say file name is equal to base name of image.path and this is going to give me well just the base name so just the image name not the entire path so i'm saying okay i want to create a read stream of the file at this location we want to save it as the file name of this and then we're going to wait for this response to finish we're going to get the data from this and the data is going to include information about this image that we need to link it to a post so now what we're going to do is say functions dot get user id this is a function we're going to write in one second we're going to say dot user we're going to say dot then we're going to say ids inside of here actually did i mess something up here nope i think we're okay for now i'm going to say ids and then i'm going to do something here inside of an arrow function okay let's save this hopefully it gives me some formatting what's the issue with my parentheses expression expected okay that's fine we'll do something inside of here and here we're going to say return sandy client dot and then create and then we're going to create a new post now i know this is really confusing let's first write out this get user id function because what we need to do here when we're making a post is we need to have a reference to the image for the post as well as a reference to the user who made the post now to be able to do that we have to have both the id of the image as well as the id of the user so that's why i'm first doing the upload right i'm uploading the image it's then going to return to me some data this data is now going to contain the id of the image i can then use that id to link the image to the post because the image is stored separately than the post then same with the user i need the id of the user which i don't have i just have the name so i have to get that id so i'm going to say functions dot get user id this will be an arrow function that takes in a user and then what we'll do inside of get user id as well we will get the user id so to get the user id we're going to say return sanity client dot and then this is going to be fetch and then the and then the query that we want here for the fetch it's going to be following we'll put it inside of back ticks just so we can have a multiline string here we're going to do our asterisks we're going to do our square brackets we're going to say underscore type is equal to our user let's have a space here and then we will add similarity to 4 and user is equal to and then this will be username and then we'll have to pass that username in a minute and then inside of here the only thing that we want is underscore id so rather than putting dot dot or anything else we just put this because we only care about the id of the user and then here we're going to say username colon and then user like that okay nice so that gets user id so we've now ridden that function so now what we're doing right is we're saying okay well once the image is uploaded we're now going to get the id of the user now it's actually going to give us a list of ids because remember it's always going to return to us multiple things so if we want just the id we can say const id is equal to ids at zero and then dot underscore id okay and that will give us the id of the user assuming this user exists and then we're going to return sandyclient.create and then the type that we're going to use here is going to be a post okay so we're going to say type post and then we'll fill in the other fields that we need for creating a post so we'll put the author of the post the author is going to be equal to a reference so we're going to say underscore ref and this is going to reference the id okay that's all we need for that then for our photo this is going to be an asset and this asset is going to have a reference to the data dot underscore id which will be the id of the photo that we just uploaded that we're now getting from data and then after photo we're going to have our description which will really just be the caption i think i called it description in the uh in the database although let's have a look actually let's go here schemas post and yes i did call description so we're gonna have to use description other than caption okay and then the last thing that we want is the created at which is new and then date all right so that is actually all we need to create a post i know very confusing there's a lot of stuff that we have to do took me a long time going through the documentation to figure this out because since we have this on the back end we need to first download the image then we need to get the path to the image then we need to upload it to sanity then we need to link the image with the post as well as the user id with the post and so this is how you do it right if i want to have a reference to a person i do underscore ref for the author and then i'm referencing the id of a person object and then for the photo i put asset inside of here because that's one of the mandatory fields then this asset is referencing an asset that is on sanity already that we just uploaded so that's why we had to do that first and then get the id of it then the description well it's a caption created at new date there we go we have the create post function okay so that actually should be fine now so if we go to index.js that's all we need for slash create post now for make post we're going to send a request here so let's start creating our what do you call it request options as well as our form data so when we want to send a file we need to send this file in form data so what i'm going to do is say const form data is equal to and then this is going to be new form data because remember here we need to upload a file then what i can do is add the fields that i want to the form data so i can say form data dot append i can append for example the user that will be equal to whatever user is passed here to create post all right continuing we're going to say form data dot append and we're going to append a description uh actually let's check here index.js nope we're going to append a caption and the caption will be caption okay and then we're going to say form data dot append and we're going to append a file and the file will be the file all right okay then we're going to say const request options and we're going to say that this is equal to an object and we're going to say the method is equal to and this is going to be post and then the data will be our form data okay we're just doing it this way because we're actually sending a file so we want to add that to our form data so it's handled properly and then i'm going to fetch the slash create post and then we'll pass the request options we're going to say dot then and we're going to get a response so underscore res like that and then we will do the following so assuming that we get a response and we don't get an error we're going to say add alert and we're going to say variant and then this is going to be success and we're going to say message we're going to say post created exclamation point and then we're going to navigate to the home page so navigate home now if we do not get this successfully so if we have an error we're going to need to catch that error so we're going to catch error okay and then we're going to make a new alert so we're going to say add alert or not add alert this is going to be set alert don't tell me i called this one ad alert okay sorry guys set alert so we're setting alerts and then the variant here is going to be danger and the message will just be error.message so whatever that is we'll display that okay so that should actually be it for making a post now so when we hit that post button it should just well make the post and we should be good to go again apologize for all the complexity there but it is required so let's refresh the page okay let's sign in as tim let's go to post let's close that let's choose a file uh i have dwayne the rock johnson nice awesome uploaded and notice it shows up here because again when i go to my image let's have a look at it here you can see that i am displaying the image only if we have a file since i set the file we now have it so i can display it there and then what i'll do for the caption is say this guy is strong okay and hit post and post created although we got an issue it says create post not found ah okay so the reason we got that problem there is because we need to restart our api because we added a new function so let's restart this and let's try this again okay so let's come here let's go to post let's choose a file dwayne the rock johnson this is a strong man okay and then post all right again 500 internal server error what's the error that we got this time it says create post is not defined okay we need to import that so let's go to our index.js and let's add here create post and now hopefully this should work okay let's try this now let's go to post we need to rerun the api because we made a change okay so stop and rerun let's go back here let's upload a file and let's go testing this time and post and another internal server error what is the error this time property path of undefined okay let me have a look here and then i will be right back all right so i've found the problem here i apologize there's a really stupid error here i need to change data to be body so it was saying that i wasn't getting a file because i wasn't really sending any data because i had data rather than body so this needs to be body here and request options and now it should fix the problem for us so let's rerun this let's go to refresh let us sign in okay tim sign in let's go to post and then let's choose a file okay let's go with dwayne again strongman post okay this is a good sign it's taking a second that means it's uploading the file and then post created and if we go to our back end you can see i've just printed something out and we got actually the file that was passed here so let's now go to sandy studio and let's see if we have that image uploaded so when i go to post notice that we have a photo and when i look at the photo we get dwayne with descriptions strongman and that is posted by tim awesome so we've just figured out how to create a post now that we have done that we want to view all the posts then search for users then set up the profiles hopefully at this point in time you are realizing that yes this app does look simple but there is a lot going on in the back end i will continue to show you how to do the rest of the stuff right now all right so now we're going to move on and code out the all posts page which is going to show us all of the posts for a user's feed or if the user is not signed in then it will just show us all of the posts that's how i'm going to implement it here feel free to change it around if you'd like and you just need to import a few things here so we're going to say import and we're going to import react we're going to import use effect we need this we're also going to import use state and then this will all be from react and sorry i don't think i need react i think i just need use effect and use state okay continuing i'm going to import and this is going to be link from and this will be react router dom then i'm going to import a card from bootstrap so from and then this will be react and then bootstrap down here nice now that we have that let's set up the state that we want for our page we're also going to accept a user as a prop so that we know if we're signed in or not and we show the user's feed or we just show all of the pages or all of the posts are so i'm going to say const this is going to be all and then posts and then data and this will be set all posts like that and then this will be equal to use state and for now we will go with no and we'll put an object in there later okay then we're going to write our use effect although actually yeah we'll do the use effect now so i'm going to say use effect okay and then we need to do the arrow function and we want to update this whenever the user changes so if a user signs in then we're going to change it to show their feed as opposed to showing all of the posts so inside of here the first thing i'm going to do is say if and this is going to be not user then what i want to do is i want to fetch all of the posts so i'll just write the fetch but then we'll actually write the back end endpoint later on so i'm going to say get all and then post so that's we do if we don't have a user otherwise if we do have a user then we want to fetch and this is going to be slash get and then posts of and then following and then we're going to do as a query parameter user equals and then plus and then whatever the name of the user is because again we want to get all of the posts of the users that this user is following all right so that's what we need for the use effect we'll have to modify this in a second and actually do something with the different fetch requests but for now we'll just leave it like this and now we can write the html of the page so i'm going to return a div here and for now i'm not actually going to write any classes in a separate file i'm just going to write them all inline css it's definitely not best practice and i'm being a bit inconsistent here but just to show you that i can use some builtin bootstrap classes instead of having to write all the custom classes myself so i'm going to say div class name then this is going to be equal to center and then this will be mt3 so margin top 3. now the center class is one that we already made and if we go to index.css we should see that we have center here and it just puts us in the center of the screen okay going back to all posts what i want to do inside of here is i want to map the all post data so i'm going to say all post data dot map and then for every single element in my all post data which is going to be a list of all the posts that i have i want to display a card for them so i'm going to say post and then index and then this is going to go to an arrow function and actually nonarrow function sorry just a parenthesis well it is an arrow function but we're going to have parentheses as opposed to the curly braces and then inside of here i'm going to have a div so each post will have its own div and the div is going to be class name equal to and this is going to be center as well and we're going to say m and then 2. now this is margin 2 meaning we're going to have a margin of 2 on all sides and then for this i'm going to say style is equal to and i'm going to say that the min underscore width is equal to 30 percent so we're going to go 30 like that and then we're going to say that the max width is equal to and we're going to go with 400 pixels now this will just give us a nice dynamic size so we're going to take up a minimum width of 30 uh 30 on the screen but when the screen is large enough we'll take up up to 400 pixels now you could change this around if you want the post to be slightly larger but i messed around with a bunch of different values and this was pretty good now since we're going to have a bunch of divs that are going to be in kind of a list we're going to say key is equal to and then index whenever you're using map and you're putting multiple elements inside of what's being mapped you're supposed to put a key and the key is just a unique value for the elements on the page so kind of hard to explain it more than that but you'll see that you get errors if you don't have this or you'll get warnings at least that are saying that you need to have a key property in the element because when you're rendering them dynamically like this that's what react expects now inside of this div we're going to display a card so i'm going to say card like this slash card and we're going to put a div inside of the card now this div will have a class name and this will be equal to d flex so display flex and we need another s here for the class name now this is a bootstrap class that you can use that just adds the display being flex for this specific div then i'm going to say align items and then center i think you can guess what that is going to do and then we'll make this a flex column as opposed to a flex row and then let's end our diff okay now inside of this div i'm going to put a card image so i'm going to say card dot and then this will be image and then card dot and then image the variant of this is going to be top which means we're going to put the image at the top of the card that we have for the src this is going to be equal to the post dot and then photo dot and then asset dot url okay that's the source for our photo and then for the style we're going to say that this is equal to and then this will be width and then 100 so we'll take up the maximum width of our container okay there we go now we want to do a card body outside of this div so i'm going to say card dot and then this is going to be body this will be card dot body as well inside of the card body i want to have a link to the user's profile so we're going to have kind of an at symbol say the users actually posted this photo then i want to have the description of the post as well as when the post was well posted so the date time that it was uploaded or yeah i posted whatever you want to call it so inside of here i'm going to make a link and i'm going to say 2 is equal to and then we'll actually do inside of curly braces here slash profile slash and then this is going to be plus and then this will be post dot and then this will be user name like that okay that should be fine and then we'll end the link so slash link and here we'll just put the name of the user so i'm going to say card dot and then title and then card dot and then title like that let's fix that and inside of here this will be an at symbol and then we will say post dot and then username now username will be a field that we're going to add to each post each post is going to have all of the elements on it that our posts have from our database and from what our query returns which we're going to write in a second for both of these fetches okay so now we have the card title that's inside the card body next we want to have the description so we're going to say card dot and then text and then card dot text and then we want to put inside of here the post dot and then this is the description okay so that's all we need here for this that's what's going to be the content of our card body now we're going to make a card footer so i'm going to say card dot and then footer like that this will be beneath the card it's kind of muted and it looks a little bit uh what do you call it like kind of lighter so i'm going to say class name equals text and then muted and then inside of here i'm going to post the post dot created at all right now the creator is just gonna be the date time this was posted at we could format this and make it a bit nicer but for now i think that's good enough and that is what we will have for the content of our page so now all we need to do is write the queries for get all posts and get posts of following so we're going to have to go to our api calls or sorry to our index.js and then we'll go to our api calls after that so looking here again in all posts we had get all post and get posts of following so let's copy this one to start and let's go app dot get let's paste that in slash get posts of following we're gonna take in our request our response this will go to an arrow function then we're going to say const body or not const body we're going to say const and then this will be user is equal to request dot query dot user because we want to know the user that we're going to be getting these posts for then once we have that we're going to call the get posts of following function and we're going to take in user or pass user sorry and then say dot then and then we'll have inside of here data and then we will return res.json and data okay now we're going to do the exact same thing here except it is going to be for get all posts so we'll just say get all posts and then we don't need a user because well when we're getting all of the posts we don't care about the user we'll change this function to be get all posts now while we are in here let's import these functions and then we're going to have to actually write them so let's write get all posts and get posts of following like that okay i think that is what they were looks good now let's go inside of api calls and let's write the queries and calls with the sandy client so i'm going to say functions dots we'll start with get all posts this one will be easier so i'll say get all posts this is going to be an arrow function this arrow function actually doesn't take in any parameters and we're going to return sanity client dot and then this will be fetch and we want to fetch a specific query now this query is going to be asterisks followed by our square brackets instead of here we're going to go underscore type is equal to and then this is going to be post now there's nothing else that we care about we just want to get all of the posts and then we want to get some specific information from those posts so we'll start by saying dot dot then we're going to get the username so since this is a custom field i'm quoting this so i'm saying username is going to be the author which is a nested object right because this is a reference to a what you call this to a person or to a user object so we're going to say author and then we're going to get the author's username like that so that's how we're going to have username on all of the values that are returned here from this query then down here i'm going to say photo and then we're going to take the asset and then the asset is going to give us the underscore id as well as the url so in case i didn't mention this before whenever you see the arrow that essentially means that we have a reference type so an asset is a reference type and we are going inside of the reference and grabbing some specific fields so i'm getting the username here and here i'm getting the id as well as the url which is the information that we need okay so that's what we need for get all posts now we're going to have to write a fairly complicated query which is going to get all of the posts for following so the reason why this is a little bit confusing is because we have all the users that we're following on our user but i need to then go and find all of the posts that reference a user that this user is following so you're going to see but it's not the most trivial thing in the world and it took me a good amount of time to actually come up with this query so you're welcome for just typing it out for you here so i'm going to say get posts of following is equal to we'll take in the username okay and then we're going to say uh what is this return sanityclients.fetch and we are going to fetch the following it's going to be underscore type and we're actually going to start with user so what i'm going to do here is start by finding the current user then going through a list of all of the people that this user follows or an array of all the people that this user follows and then adding a post field to all of those people so we're able to get all of their posts and then we can aggregate all of their posts together so i'm going to say underscore type is equal to user and i'm going to say username is equal to and then this is going to be pound username or not pound dollar sign username then let's make sure we pass this variable so i'll just pass username since the name is the same as this variable i can just pass it like that and then i'm going to say following and this is an array and i'm going to essentially map all of the values into in in the array to some certain return values that i want to get so i want to get the posts so i'm going to say post colon and then this is going to be a new query and this query is going to be type and this is going to be underscore post and i'm going to say and and references and we're going to do the hat dot and then underscore id now this is a bit weird but every single one of the entries in this following array here is going to be a person so what this hat is going to reference is the current person that i'm on while i'm looping through this array and then for every single one of those people i'm going to do a query to get all of the posts that they have made so let's make sure this is underscore type and then from all of their posts what i want is dot dot so everything from the post as well as a username field the username again is going to be author and then username and then i'm going to go photo and then i'm going to say asset since this is a reference type i'm going to go with my arrow and then i'm going to get underscore id and then url okay so similar to what we did here except the query is a little bit more advanced so i'm adding a post field to every single entry in my following array then outside of here when i actually return this i'm going to loop through i'm going to grab all of these posts field and i'm going to aggregate them together so that's all we need for now so get posts of following so let's go back to index.js here and let's continue writing some code so for my data here and get posts of following i'm going to change this slightly and i'm going to now loop through my results i'm going to grab all of those posts field and i'm going to combine them into one array and then return that array so i'm going to say var posts is equal to and then this is going to be data 0 dot following okay so this will give us the list of following from the user that we got the post for so i know this is a bit weird but again we looked up the current user so the user that we want to get the feed for we got all of the people they were following and then we added the post field to that following array so now i'm getting this following array and now i'm going to map this so i'm going to say post is equal to and then this is going to be posts dot map and i'm going to map every single post to the post dot post okay now i know i said the word post like a hundred time it's going gonna be post dot post which is the field inside of that object containing all of their posts now that i have that i'm gonna say posts is equal to and then this is gonna be post dot and i'm gonna flatten this to one level now what this will do is just take all of the nested arrays that i'm going to have inside of here and flatten them into one and then what i'm going to do is say res.json with posts okay now also just add a cache here in case something goes wrong so i'll say catch error and then we'll just res.json and we'll just return an empty array so if something does go wrong empty array just saying you know okay there's no post because an error occurred all right so i think that's all i need for now so let's go back to all posts now and let's continue writing these fetches so now we'll actually display some data so for this fetch i'm going to say dot then i'm going to say this will be res we want to return the res.json and then we're going to do another dot then we want to get the data and then we're going to say set all posts and we'll set all posts with the data now we'll do a very similar thing here in fact we'll do the exact same thing so let's do this and let's run that now what i can do is also just add a cache to both of these in case something does go wrong so i can say catch error and then we can just console.error this error i won't show it in a alert although i could do that if i want now let's just take this catch and copy it and put it down here again just so in case anything goes wrong we'll be launching that to the console nice so now that we do that we should actually be able to see all of the posts from a user once they've signed in or when we're not signed in we should just see all of the posts and so let's resize or resize let's rerun our api excuse me i've been recording for a long time now as you guys can probably tell so npm start our api and let's go back to our front end so let's refresh our react app and we're getting an error cannot read property of null reading map okay uh what else any other errors here says can i read property of null reading map okay so let me have a look why that's going wrong what are we mapping so we are mapping our uh what is it all posts okay so the way to fix this is to say all posts data question mark otherwise we'll go down here and we'll just render null now the reason we're going to do this is just to make sure that we have some data because if we have no data then this is no we also could fix that by just making this an empty list but for now i think it's fine to leave a null and say okay well if we uh have no posts then we're not going to do this obviously because that's going to give us an error otherwise we can show no or maybe what we want to show is just something simple like a p tag that just says no post to display okay so let's do that let's go to our front end and then notice we're going to see the one post that we currently have okay so we see this post and if i sign in as tim let's do that when it redirects me to the home page oh it's showing me this post which it actually shouldn't be showing me because i'm not following this person let me just go back to feed here and okay so it's still showing this to me let's sign in as another account i forget if we have an account like joey123 let's sign in and it's still showing it to me okay let me have a look here and see what's going wrong because we should not be seeing this post when we are signed in all right so to fix this problem i just realized we need to go to app.js and we need to pass the user to our all post page because i forgot to do that so i'm going to say user user like that now when we go to all posts we'll actually have a prop so now this condition will be correct us when we have a user it will actually give us all of the posts of their following okay so let's now go here and notice that the page is actually refreshed for us because we added that so if i go to say search go back to feed no post to display or actually it's giving me an empty list and since it's giving me an empty list we don't have no and so it's not showing me no post display but we're not displaying any posts because i'm not following the person that made that post so now what i want to do is make it so that we can actually search for uh different users and then once we search for them we'll be able to view their profile and then we can actually start following people right because well we need to follow people to be able to view the different posts so let's start working on that let's close all posts let's close actually let's not close app let's pass do we want to pass something to app sorry do we want to pass something to search i think for now we don't need to let's go to the search component and let's start writing this out so i'm going to start by importing what we need here so i'm going to import use state from and then react and then i'm going to import a form a button a list group and a card from and then this is going to be react bootstrap and then i'm going to import a profile list item from profile listitem.js now i will write this later on but every single item that we're going to have in a list is going to represent a user and it's going to be easier to have a separate component that we can render for each one of those individual users in the list that will do all the styling and formatting for us so we'll use this later on um you can think of this kind of as an li tag within a list that's uh what it will be and it will just show you know the user's following it will have a follow button all that kind of stuff and then i want to import a css sheet which you're going to fill in there's actually quite a bit of styling we need to do here so we'll say css slash and then search dot css okay and what is the error that we're getting here it's saying browser doesn't contain a valid field doesn't contain js can i remove this is that going to fix the problem okay you know what we'll look at the problem later on because right now we just need to finish writing this okay so now we want to add some state here so i'm going to say const this is going to be search text and then update search text okay update search text is equal to use state and the search text is going to be the text that we're searching for when we're searching for a user then we're going to say const search results as well as update search results or set search results or whatever we want to call this update search results i know i'm being inconsistent here uh but that's fine for right now you guys can change that if you want and for the search results we'll have an empty list for now and then uh we will just return the html of the page sorry so return and we're gonna have a div so we're going to say div class name is going to be equal to search i'll fill in all of the classes then we'll just write all of the css at once okay so we have search now let's make another div now this div is going to have a class name of search and then wrapper and then we will end the div tag and then inside of here we're going to have a form which is going to allow the user to enter their search text and then hit the button to search so we'll say form and then for the class name this will be equal to the search and then form okay then we'll go here and we'll say form dot and then control and then to end this tag we'll just end it within itself for the type here we are going to go with text so type equals text we're going to have an on input which will be a function this actually just be a function that updates the search text so we'll take e in here and we'll say update search text e.target.value and then we'll have a placeholder and we'll just type search for a username okay so let's write that username like that okay nice now continuing under the form control uh we actually want a form group to put this form control inside of so my apologies let's write that now form group okay let's copy the ending tag let's wrap it around our form control and then for the form group we'll have a class name and this is going to be equal to the search field just so that i can expand the size of the uh the field inside of here okay now outside of the form group we want to have a button to submit so we'll say button and then button and then here we'll just type search for the variant we are going to have this being equal to primary and then we'll have an on click which we'll call a function that i have yet to write okay i think that's all we need for right now then underneath the form but inside of the search wrapper i'm going to start displaying all of the search results so we're going to go here and say search results dot length and we're going to say if this is greater than zero then what i want to do is i want to render this so let's have this otherwise we're just going to render no or actually rather than rendering no we'll render a p tag and we'll just say no search results so let's say p slash p and then no search results okay and then inside of here we want to render a div so i'm going to say div slash div and then for the class name this is going to be the search results and then wrapper so let's fix wrapper here so that it has a hyphen and then inside of this div we're going to render a bunch of cards so we're going to have card card for the card we're going to have style equals and then we're just going to make the width 100 okay and then inside of the card we're going to render a list group i understand this is a lot we'll walk through it after in a second but let's just get it all down i'm going to say the variant of this is going to be flush this is going to be just well a list group that will display all of the different list items that i have and then inside of here we're going to say search results dot map and we're going to map the i guess we'll call it item and idx and we'll map this to a profile list item so i'm going to say profile list item like that and then let's just end the tag here and we'll pass to this dot dot item which is going to contain all of the information about uh what do you call it an individual user that shows up in the search page now let's change width here so that's inside of a string okay profile list item and then we also want to pass an index here so i'm going to say idx is equal to idx just so we can render an index inside of the tag and we don't get a warning okay i understand that was a lot i think that's pretty much all that we need for this now let's write the two functions for the on click for the button as well as did we have another function that we needed to write actually no we already did this one for the on input so let's just write the search function so let's go function search okay and then let's just simply call search right here okay so i think that's good i'm not sure looks like we're getting some errors so let's see what the errors are okay so the error first is saying search.css does not exist so let's create that file search.css okay now that is created it's giving us another error it's saying profile list item does not exist okay that's because it's called profile item so let's change this to a profile item from profile item we don't need to call it list item and we're getting another error here it says profile list item is not defined um okay that would be right here let's change this to profile item save and it looks like all of our errors go away okay so let's open up our front end and this is what the search page looks like a little bit weird but we have the the search field expanding the entire width we have the search button that says no search results if i hit search it's going to say no search results again what we need to do now is add the styling and all of the classes for this so let's do that is going to be quite a bit of css let's start writing it out so we're going to say dot search and this is going to be display and then flex and then we're going to say the flex direction is a column and we're going to say align items and we're going to align them in the center okay we're going to have our search wrapper so i'm going to say search wrapper this is going to be display flex i'm going to say the flex direction is going to be column i'm going to say align items center i'm going to say justify content this will be center as well we're then going to have the min width which is equal to 30 so take up a minimum of 30 percent of the screen uh why is that oh it's because i have a comma here so let's fix that then we're going to have a max width and the max width i'm going to make 500 pixels okay so let's see how this looks so far when i make these two changes notice here that the classes i did was this div and this div so let's have a look and notice that now we're taking up kind of the correct amount of size in the screen we do want to be a bit larger so we're going to have to affect some of the the other styles or some of the other classes we're going to have to change them but anyways you get kind of what we're looking at right now okay now that we have that let's do our search field so for the search field this is going to be where we actually have the input i'm just going to say whip is 100 okay now after the search field we're going to go search form so let's go search form like that the search form is going to be display flex it's going to be margin and then top and rather than 20 pixels we're just going to go with 2em okay then we're going to go flex direction the flex direction here is going to be the row and then the width is going to be 100 now before i do the rest of them let's actually just see what this looks like so far and now notice that we have this beside the search button so that's what i wanted to have and that's what this does right here when i put the flex direction to row it means all the items contained in this div or i guess this is the form are going to be aligned in a row rather than in a column so that's what i was doing to make it look like that okay now that we have that i'm going to go the search and then the results and then wrapper and this is going to be equal to margin top we're going to do 2em as well i'm going to say flex direction this is going to be column and then the width is going to be 100 all right so after search results wrapper that should be all good so let's now have a look at what we get okay nice so that's exactly what i was expecting we have the margin from the top we have the text field and the button kind of beside each other we have this in the center now what we need to do is start actually getting the results and then displaying them by using where is it here the profile item so we can actually code out profile item first to display an individual profile item and then that way it's going to be very easy for us to just finish the the fetch commands there and allow us to actually get the different users that we search for so let's start here by importing and let's import a button let's import a list group and then let's do this from and this will be the react and then bootstrap and then we're going to say import and we're going to import use navigate and this will be from react and then router and then dom okay now we're exporting our profile item inside a profile item i want to take a few props i want a username i want a first name i want a last name i want a photo and i want the followers however for the first name i'm going to do it like this for the last name i'm going to do it like this and then the photo will be here now the reason i'm doing it in this way is so that these match exactly what the fields are that are going to be returned from our sanity api and that way i don't need to actually do any modifications or manually look for them okay now i'm going to say const like this is going to be use navigate or const navigate will be use navigate okay so const navigate equals use navigate and then we are just going to return what we want to display so i'm going to go here i'm going to say return we're going to return a list item okay this list item will have a div inside of it so we're going to say div the class name of this div is going to be equal to d flex this is going to be a line item center justify content and actually not center we're going to justify the content between then i'm going to end the div tag and inside of this div i want to have another div this div is going to have a class name which is equal to it's going to be d flex okay and then we're going to going to align the items in the center of this div and then we will put an image now the image here is going to be the profile photo of this user so i'm going to say image we'll end the image tag within itself and then we'll say src is equal to and we'll check if we have a photo now if we don't have a photo or if we do have a photo sorry then i'm going to say photo dot asset so let's do this dot asset dot url otherwise we'll just display a placeholder photo that kind of says okay this user doesn't have a photo but we're going to show something anyways just so it doesn't look empty now this is the url for the placeholder photo so what you can do here is just change this to be any size you want so in this case when i make it 80 it's going to make the size of this image 80 pixels right so https colon slash less via dot placeholder dot com slash 80. there you go that's all we need for the source and then for this style here we're just going to say style is equal to and we're going to make the width of this 100 and the height of this 100 and you'll see that what ends up happening here is the height and width is going to be limited by the size of the container so when we expand the width and the height of 100 the image will just fill the amount of size that we allowed this div to take up okay hopefully that it makes sense now we're going to put another div here and this will just be a div to space out a few items so we'll say slash div and then inside of here we're going to put a p tag the class name is going to be equal to and this is going to be px2 and then m hyphen zero so that's margin zero so the px2 means that we're going to have padding and the on the left and the right hand side now two is just a certain amount of padding it's not two pixels it is more than that it's two multiplied by something i forget exactly what it's multiplied by it might be em but anyways that's what this is and then i'm saying margin 0. so i'm just eliminating the margin on this p tag here but i will have the padding and then inside of here i want to put the username so i'm going to say in a strong tags just so this is uh what do you call it like standing out i'm going to say the username okay then beneath this i want to have the first name and the last name of this user so i'm going to say p p and then we are going to do the same thing here we're gonna have px2 and m0 so class name is equal to px2 m0 and we're going to check if we have a first name so i'm going to say first underscore name question mark if that's the case then we'll render the first name otherwise we're just going to render an empty string and then we're going to add this to a space plus and then the last name if we have a last name so i'm going to say last underscore name question mark and then last underscore name and then if we don't have last name it'll just be an empty string okay so that's what we need for rendering the first and last name again we're just checking if we have a first name if we do we'll show it and checking if we have a last name if we don't then we won't show it and if we do then we'll show it in concatenation with the first name and a space all right now that we have done that we're going to complete the next div so we want to put a div here and we're going to say div div for the class name of this div this is going to be d flex and then flex hyphen column okay and then inside of here we're going to put the number of followers that this user has in a p tag so i'm going to say p p and then we're going to do class name we're going to say px2 okay and we don't actually need m0 we just need px2 and then in a strong tag again we're going to say strong strong we will have followers which remember is going to be the number of followers not actually a list of followers at least the way that we're going to call this and then here i will put followers like that and then we're going to put a button below this which is going to ask us if we want to view the profile so i'm going to say button like that and we will just have the text be view the variant i will have equal to success so this is a green button and then the class name will be equal to px2 and then margin zero so we move the margin from that and then we're going to have an on click event and the on click is going to be equal to an arrow function and this arrow function is going to navigate us to the user's profile when we click on it so i'm going to say uh yeah i can do it actually without this i'll say navigate and it's going to be slash profile slash plus and then username like that all right i think that is all we need uh that looks good although i think i may have messed up some of the divs here this div i actually believe i need to take out of here and put it one level down okay that makes sense let me just walk through what we did because this was a lot so we created a list item and that is containing everything right then inside of the list item we have one main div and what this div role is is to just make sure everything is centered and to justify the content between now justifying the content between means we're going to push the first item to the left and the second item to the right hand side of the screen so we're justifying the content on the left and the right as opposed to centering that so we're centering it was it vertically but we are not centering it horizontally we're pushing this to the lefthand side and this to the righthand side okay so the profile image goes to the left as well as the name and the username and then we have the followers in the view button going to the righthand side so then we have this div right here which is going to align our image with this div so this would be the two flex children of the two flex items for this flex container and you'll see that we'll get an image and then what we will have is this div beside the image where we'll have the username as well as the first name and the last name and the first name and the last name should be stacked on top of each other because we have them as p tags okay then coming inside of here again we have another div now this is a flex column which means we're going to have everything aligned vertically and we're going to have our followers and then beneath that we're going to have the button okay hopefully that makes a bit of sense that's what we have for profile item search.css is finished so now we just need to finish this search field and we need to make a call to our api here so what we'll do inside of search is we'll say fetch and for the fetch we're going to say slash search for and then username we're going to say question mark text is equal to plus and then this will be the search text and then we'll just write uh what we'll do here and then we'll write the backend api call as well as the api endpoint on our node.js server our express server so we'll say res res.json dot then we're going to have data and then what we're going to do with the data is we're just going to update the search results so i can actually just say update and then this will be search results like that with the data and then we will have a dot catch we will catch our error and we'll just say console.error error like that and that should be good now i might have to do message i think it's fine if i just show the error it should actually display it for me and i will actually be able to view the message from that error object okay that's what we have for search so this component is pretty much done we now just need to go to index.js and we need to write this route so what was the route it was search for username with a query parameter of text so let's copy that let's go here let's say app dot get okay slash search for username then we're going to take in our request our response that will be an arrow function we want to get the text query parameter so i'm going to say const text equals and then this will be request dot query dot text and then we're going to call a function so we're going to say search for username we're going to pass text then dot then and then inside of here we're going to have data and we're going to say res.json data okay so now let's import this and then write that you guys should be getting used to doing this by now we've done it a few times let's go to api calls and now let's write the api call for that so we're going to say functions dot and then this is going to be search for username this is equal to an arrow function this is going to take in some text that we want to search for and then we are going to return sandyclient.fetch what is the issue here sorry this is not functions.function so functions.search username we're going to fetch we'll go with our backticks again we're going to do our asterisks and we're going to say underscore type is equal to and then user and what i want to do is match this text against any text for our user names so we're going to search for usernames in that box and essentially any text that i find i'm just going to see if it's contained in the username starting from the beginning and if it is then i will return that user so the way i do this here is i write and and username and then this is going to be match and then we'll write a variable here with the dollar sign and we'll say text and it will just pass text as the object here so we actually get that now what match says is if the start of the username matches with the text that we have right here then it will match i mean hopefully that's clear but if we have a username that's like hello then the text h e would match with that but the text ello would not match because we didn't start with an h so maybe you want to search for it in a different way but i think this makes sense you're going to search like a few letters and then if the those letters are contained in the beginning of any username then it will show you all of the usernames that have that result right okay so here now we need to decide what we want to return so i'm going to return dot dot which just means everything and then again i'm going to return my followers and here for followers i'm going to count the number of followers that this user has now to count this again is not trivial because i need to find how many references there are from other users to this user because we're not storing followers on a user we're storing following so now i need to do another query and for this query i'm going to say underscore type is equal to and then this is going to be user okay so we'll go with user like that and then we're going to say and and references and then again we're going to go with the carrots and then dot underscore id so we're looking for how many users reference the current user that we got when we're searching through all of the different users okay then we're going to say photo and then this is going to be asset then we're going to have our arrow and then we're going to say underscore id and then url just like we've always done all right i believe that's it for search for username and now it should actually just be functioning i mean i always say that we've probably done something wrong to be honest but let's give it a shot and let's see and you can see i have the uh the bootstrap page open so i could remember what the x meant for px okay so let's go here it says list item is not defined that is inside of profile item so let's go to profile item and i had list groups sorry this needs to be list item so let's change that import now we should be good okay list item import is listed was not found in react bootstrap all right let's have a look here uh the issue is that i need to actually have this be list group and then rather than list item this is gonna be list group dot item okay so that makes sense list group dot item okay now that we have that let's go back and see if this works and let's hit search and we got an issue it says console.error is not a function where is that that is line 11 in search ah this needs to be air okay well that means that we did get an error so that's no good and the reason we got an error is because we need to restart our api so let's restart it because we added some code to it i always forget to do that i always think it automatically restarts now let's try this again so let's refresh let's hit search and we should see some search results popping up here although it's not showing me anything so okay this is a little bit weird why i'm not getting anything at all uh let me have a look here and see what the problem is all right so i realized what the problem here is and it's actually in our api call so the query was working as we wrote it but i wrote it incorrectly because we need to put quotation marks around this text as well as an asterisk at the end that indicates that we're going to be matching using a regular expression pattern so the text and then anything following the text is what we're looking for so hopefully that makes sense but that is why that wasn't working because the query was wrong so we actually had our fetch request going through weren't getting any areas on the back end but we just need to fix this now so that we have the correct regular expression pattern okay so now that we have that let's refresh this and let's hit search and it should show us all of the the different accounts that we have and it's not because i have not restarted my api here so let's restart that now let's give a nice refresh let's hit search and let's see if it gives us any results okay back to the drawing board here not sure what's going wrong now all right so just messing around here because i was really confused why this wasn't working and it looks like the way that we were embedding our text variable in here just wasn't happening properly so what i did here is changed it so now i'm using a dollar sign and just directly embedding text as opposed to using the variable inside of sani client.fetch not exactly sure why this is an issue but i think it has to do with the quotation marks here on how they were being used i think we were having double quotes being placed inside of here for some reason and maybe i didn't need to quote this string anyways i'm just going to go with this because i know this is the solution and now it looks like it's working so i'm going to go back to search here and notice that i've just been printing out the data and the reason i was doing that is because even though now this is working and i restarted my api you'll see that i'm not actually seeing any content here even though i'm being returned all of my different list items which are the the strings that match with this user and if i search again here you'll see that we get even more which is all the users that we created so clearly i'm not rendering this properly so let's have a look here and see why the rendering is incorrect and let me stop actually printing this out because we don't need to do that anymore so this is a very silly issue here but inside of my search results.map i'm not returning anything because of the fact that i have this curly brace here so instead i'm going to remove it and just move this up so it's directly in line with the arrow and now okay it automatically adds a parenthesis but now i'll actually be returning this item before i wasn't returning it i just had it inside of there and so since it wasn't being returned while i wasn't rendering anything on the screen so let's go back now and see and notice that we're actually getting well what we expected now for some reason the images down here are larger than the ones up here that's a little bit strange to me so what i can do is just manually set the width to fix that problem so let's go and do that where is our image our image is in profile item so here rather than making the width 100 and the height 100 in fact i didn't want to make the height 100 i just want the width to be 100 so now let's see if that fixes anything at all uh doesn't look like it so let's just manually set the width let's say width is going to be something like 80 pixels okay let's see now and there we go so now it's fixed and all of our images are uniform width and i think 80 pixels is actually a decent width and we can see as i move this it's going to dynamically resize and everything looks good now let's try searching for some other usernames here so i'll go with something like joey when i do that we get a list that just contains the names that have joey and if i search with something like t now we'll get all the ones that start with t if we go with tim we should just get three accounts nice and then if i hit view here it brings me to the profile page which is going to be the next thing that we're tackling in this tutorial okay so searching is done signing in is done signing up is done viewing post is done so now we're going to tackle is the profile page now the profile page is fairly complicated i won't lie to you and the reason why it's complicated is because we need a way to follow a user unfollow a user and to edit our profile so let's start coding out profile i'm going to go to the profile component and there is going to be a lot of styling here as well because we want to display all of the posts that a user has on their profile as well right so i'm going to start by importing everything that i need i'm going to import use state use effect this will be from react i'm then going to import use params so import use params like that now what this will give me access to is the parameters that were coming from my path so when i go to say tim i'll get access to the tim part which then i can then use to grab the information about the current user so i'm going to say import use params from react router dom okay and then i'm going to import the button from react bootstrap so let's do that from and then react and then bootstrap okay then i'm going to import edit profile from edit profile which we'll use later on and then i'm going to import the css for this which i've not yet created so i'll have to make that but it's going to be dot dot css slash and then profile.css let's go here and make the css file so it's going to be profile.css i will write all of our css inside of here okay so going back to profile.js so we can now set up the state here and the pieces of state that i want is going to be the profile data the post that this user has if we're following this user or not because if we're not following it then we need to show a follow button if we are following then we need to show a different button a button that's going to say unfollow right if we are the owner of this profile or not if we own this profile then we need to show an edit button so we can edit the profile and then we need to know if we're in the editing mode or not because i'm going to display i think it's called a modal it's kind of like a popup where we'll be able to edit the profile without leaving the page so those are the three pieces of state that i need not three pieces that's more than three i believe it's five pieces but i'm gonna say const profile and then data and then set and then profile data this will be equal to use and then state and we'll just put an empty object inside of here for now and then we're going to say const and the next thing we need is the posts so posts and then set posts like that this will be equal to use state okay nice and then we'll say const and this will be following and then we'll say set following like that and we're going to say is equal to and then use state and for now we'll make it false then we are going to say const and we're going to say owner so are we the owner of this or not and then set owner and then this will be equal to use state false and then we're going to say const editing telling us if we're editing or not and then set editing is equal to use stay false and then finally we're going to say const params is equal to use params like that which will give us access again to the profile that we're currently looking at okay now what i'm going to do is write a few functions just that we have them defined and then we'll fill them in so the first function we want is going to be update following this will tell us if we're following or not so i'm going to say update following i will take in profile here and for now we just won't do anything then i'm going to say function this is going to be update profile so this is just going to grab the profile information for a specific username okay and then we're going to say function and this will be follow click so if we click the follow button what do we do here okay and i think that's all we need for our functions nevermind we need one more and this is going to be hide edit callback and again we'll fill these in later i just wanted to code them out for right now so the first thing i'm going to do is just say if the profile data is equal to an empty object then what i want to do is just return nothing and the reason i'm going to do this is because actually we're going to return no is because if we don't have any profile data then that means that the profile that we went to does not exist so i will show an alert for that but i just don't want to render anything on the screen so we'll just return no otherwise though if that's not the case then we can start actually coding out the content of the profile page now again this is going to be fairly complicated a lot of css just because we need to design kind of like a decent looking profile with everything laid out properly so i'll code out everything and then i will try my best to walk through it but there is some understanding of css you have to have to understand how this works so for now we're going to say class name is equal to profile okay then we're going to do an h4 tag for the name of the profile now you can make this smaller if you want but i think h4 is good and we're going to say at and then this is going to be the profile data dot and then this will be the username of the profile then beneath that i'm going to have a div and for this div we're going to have a class name which is equal to the profile data now the profile data is going to be the number of posts the number of followers and the number of following uh it also actually i'm not sure if in this div we're going to hold the post or not but either way we'll have this div now inside of here we want an image the image is going to be the profile image right of this user we want to see that so i'm going to say image src is equal to and then this will be profile data dot photo question mark so if we do have a photo then we will display it so we'll say profile data dot photo dot asset dot url otherwise though we're gonna show the placeholder image which i'm just gonna grab from profile item right here okay so let's grab that and paste it here then uh we can add an id for this we'll say id is equal to and this will be the profile underscore image we could have made this a class but i think the id is fine and that will allow us to then change the size of this which we'll do later on okay so now that we have the username and we have the image the next thing that we want to display is what i'm going to call some vertical data so i'm going to say div div it's going to be class name equal to vertical and then data like that and then inside of here i'm going to put a p tag and in the first p tag what i want to put is the number of posts that this user has so i'm going to say strong strong and we're going to say posts and then beneath this i want to display the number of posts in an h4 tag so i'm just going to say h4 and then i'm going to go here and say that this will be so here i'm going to say posts question mark and then post dot length so if we do have some posts then i will display what the post doll length is otherwise i will display zero just in case for some reason when we try to get the post we get an error we'll just show zero okay then the next thing that i want to display is some more vertical data so i'm going to copy this because what this vertical data class will do is it will just align both of these so they're going to be on top of each other and be centered so other than posts i want the number of followers so let's go followers let's then say data dot followers and then this is going to be profile data dot followers dot length and otherwise we'll display zero okay copying this again we're going to have one more piece of vertical data which is going to be the following so now rather than followers it's going to be following and then this will be profile data dot and then i think we can just do following because following will already be the count because we'll get that from the query from the back end whereas here the followers will be a list or an array and so we just need to count the number of elements that are inside of that okay now that we have that we want to write the follow button so i'm going to say div class name is equal to and this will be the follow button all right so for the follow button there's a few things i need to do here hence why the logic is going to be kind of long i need to check if we're signed in and if we're signed in then i'm going to allow the user if it's not their profile to follow or unfollow and if it is our current profile so like the profile we're looking at is ours then we'll be able to edit it now if we're not signed in then we won't show any button because you can't interact with the profile if you're not signed into an account so let's do this we're going to say user and and not owner so if we are signed in and we are not the owner then we'll do this sorry this will be a question mark we'll do this otherwise we will not display anything and inside of here we're just going to show a button now the button will say follow or unfollow but the text of the button is going to be variable based on if we're following so i'm going to say following question mark if we are following then it will say unfollow otherwise it will say follow okay and then for the variant again that's going to be determined on if we are following or not so i'm going to say variant and then this is going to be following question mark if we are following then it will be a danger because unfollowing will be red and if we are not following then it will be a success as saying that you know we want to fall so we'll have a green button to follow and a red button to unfollow i think that makes sense uh for the button we need an on click as well so let's have the on click equal to and then this is going to be the follow button pressed what did i call this follow click sorry so let's go follow click like that all right i think that's it for the button that looks good now now beneath here i want to potentially render another button that says edit so i'm going to say if user and and so let's go and and owner here then i want to display a button so question mark otherwise no and this button is going to say the following it's going to say edit the variant is going to be primary so it'll be blue and then the on click will be and i guess we'll just go with set editing here so i'm going to say this is an arrow function and we'll set editing true and when we set this to true then we will dynamically render that editing page and so we'll show the editing page once uh this here this piece of state comes to true okay so i think that's all we need for the edit button that looks good to me now that we have done this we have written a lot let's uh go through what we did so far so we have our profile that's inside of this div we then have an h4 here which is going to be the name of the profile so the username we then have profile data so all of that goes inside of this div right here and we have an image which is the profile image we then have a bunch of vertical data divs which are storing the number of posts number of followers number of following then we're going to have a button so all of these divs here these four divs because they're inside of this profile data div they're going to be aligned in a row beside each other with a certain amount of spacing that's why i put them in here same with the profile image okay so now that we have that we want to go down one and we want to create a profile bio so i'm going to make another div here and i'm going to say div div class name is equal to and this will be profile and then bio like that and the bio is going to be like your first name last name and then the description that you had so we'll make a div div class name is equal to and then the first class that we'll have here is the profile name okay and then inside of the profile name i'm going to have a strong tag i'm going to display the first and last name now i can actually just copy what i had for profile item so let's copy this here first name last name and we'll just modify it a little bit so actually profile data dot first name okay and then if that's the case we'll display oops did not mean to copy that whole line if that's the case we'll display the profile data.firstname now the reason i'm doing this is because you could only have a first name or you could only have a last name well if you don't have one of them i don't want to get an error by trying to access it and then not seeing it there okay so i think that's good for our profile data or for our first and last name sorry now that we've done that let's do our bio so in another div i'm going to say class name is equal to and this will be the profile text and then inside of here we'll go profile data dot and then this will be the bio now i think i might be crazy here because i keep saying bio when i think i mean description but let me go to my database and let's go to user and we have bio okay so it is bio in here so when i'm making a user i guess i didn't enter the bio field have i been looking at the description of a user at all recently no the description would have been of the post okay so my apologies i'm just going a little bit crazy after coding for this long anyways we'll continue here so we have profile attacks we're going to show the profile data dot bio that looks good to me and then that is all good for right now okay the last thing that we want to show here in another div is going to be all of the posts of the user so we're going to have a div i'm going to say that the class name of this div so let's code that out first is going to be equal to profile and then this is going to be posts and then wrapper and then we're going to have another class or another div with a class name of profile posts let's end the div okay and then inside of here i want to map all of the posts so i'm going to say posts and we're going to say and and post dot length so let's go post dot length is greater than zero if that's the case then i want to map all my posts i'm going to say post.map and we're going to map the post and the idx and then here what we want to return is an image for the post so i'm going to say image src is equal to post dot photo dot asset dot url and that should be fine because if we have a post we know we're going to have an image for it and then we need to end the image tag and we need to say key is equal to and then this is going to be idx okay now i've done something wrong here with the brackets let's see how i can fix this okay so we're returning we have our image tag which is closing this should be this closing tag let's see what's wrong alright so the issue here is that i just need to add something where i do colon null just so we have another option so if this is not the case if this condition is not the case then i want to display no now what's the error here expected a colon no i think it's expecting a question mark but when i save it it's auto formatting okay it looks like that's all good okay apologies that was a lot of code to write at once let's remove this final return statement but we've completed the html for this page now really what we need to do is fill in these functions and we also need to write all of the css now we can't really write the css or at least see what it's doing until we have these functions filled in and we're getting some profile data getting some posts and getting all of this so let's start by writing the function which is going to be update profile so i'm going to go to update profile here and what i'm going to do in here is i'm going to fetch and i'm going to fetch from slash and then get profile which we've actually already written and i'm going to say user is equal to plus and then user all right and actually sorry it's going to be user name and we're going to get username from our params we're going to call this function from somewhere else which i'll do in a minute okay so we have fetch slash get profile user username i'm going to say dot then we're going to get our res we're going to return the res.json then we're going to say then again we're going to get data and we're going to return the data so we're going to say actually we're not going to return the data we're going to set the profile data of data okay so that's what we need for there however we need to do a few things just in case any errors occur here so let's add our curly braces and the first thing that i want to check is if we have any profile data so i'm going to say if and this is going to be data and i keep writing the wrong brackets i'm going to say if data dot length is equal to 0 then i'm going to add an alert and i'm going to get the alert from in here so i'm going to take in user and i'm going to take in set alert so i'm going to say set alerts like that and the alert that we want to send is that this user does not exist so if we don't get any length from our data that means there was no user that existed with the username that we're trying to get the profile for so we set the alert with the variant equal to or equal to danger and the message equal to no user no user with this username exists okay or i guess we could say profile does not exist that's probably a bit shorter profile does not exist uh not exist okay nice so that's what we have for set alert and then we can just write return here and then down here we will set the profile data however before we set the profile data i want to fetch all of the posts that this user has and i have to do that in a separate request based on the way that i'm going to write these queries so i'm going to say fetch and this is going to be get so slash get posts and this is going to be question mark user equals plus and then username okay and then here i'm going to say then i'm going to get my response i'm going to return my res.json okay then i'm going to say then i'm going to get my data and i'm going to handle the data so again what we're doing here is we're getting all of the information about a specific user so we're just getting their profile then once we get that assuming that we actually have a user with that name we're going to get all the posts from that user and once we get the post i'm going to change this actually so rather than this saying data this is going to be profile data okay and we'll change this to be profile data just a little bit more clear and actually no we don't want to shadow the above name so let's leave this as data let's leave this as data as well but let's change this to be posts just so it's clear that we have data up here and we have posts here because we're going to have to use them both so i'm going to set the profile data of the data that we got here but then the post i'm going to say set post and that's going to be the post that we got all right so now that we've done this i just need to make a few modifications first i need to make this data 0 because again our data is going to be a list even though it only contains one element so i want to get the first element then i'm going to call this update following function so i'm going to say update following and i'm going to call this with data0 and this will update if the current user is following this user so we know if we have to display a follow button or an unfollow button and then lastly i'm going to say set owner and i'm just going to say is the current user which is stored in the variable user equal to data zero and i guess we'll do three equal signs because this is javascript dot and then username so this is saying is the current user the profile that we just got if it is then we want to show the editing button or show the edit button at least and so that's why we're we're setting this here okay now that we've done that we can just add a cache so we'll add actually i guess we can just add one catch right here so we can say dot catch we can say error then we can say console dot error and we will just display this error this here should actually handle almost all of the errors for us so if we get a length of zero then we'll just say profile does not exist otherwise we can just log the error to the console okay now that we've done that i guess we need to write the get post request and then once we write the get post request we're going to have to write this function here for update following and actually i think we can just write update following first because this is pretty straightforward so for the update following all i need to do is just loop through all of the followers of this profile and see if the current user is in this so i'm going to say 4 and this will be let and we'll go with follower of and then this will be profile dot followers then i'm going to say if follower dot username is equal equal equal to the user then what we'll do is say set following and we'll set that equal to true and then we'll break actually not break we're going to return sorry and then otherwise so if we get to the end of the four loop we'll say set following and then false okay so this just sets the state again telling us if we are following or not now what i need to do is add a use effect here so i'm going to say use effect and i'm just going to call this update profile so i'm going to say update profile and then what i need to pass here is the dot and then username like that and then when i want to run this again is whenever the params.username changes or whenever the current user changes so if i log out that i need to refresh the page again so we change the follow button actually we remove the follow button off the screen if the user were to sign out or we show the follow button if the user were to sign in okay so the next thing we're going to do after this is editing but i want to write this get post first which will just give us all the posts of a specific user so let's go to api calls and actually not api calls let's go to index.js and let's start writing out this function so get post is going to be pretty straightforward we're just going to say app dot get it's going to be slash get and then post like that and then we're going to do request response and we're going to get the query parameter which is the username so i'm going to say const user is equal to request.query.user that looks good to me then we're going to say get posts pass the user and then you already know what we're going to do here dot then i'm going to take in our data i'm going to say res.json data okay so now let's import this and then write the function so we're going to go with get posts and then we're going to go to our where is this api calls and start writing this so functions.getposts and not a following just get posts we're going to take in a user equal to user equal to an arrow function we're going to return the sandy client.fetch and we need to fetch again another query here so this is going to be the asterisks square brackets underscore type is equal to and this will be post and then we want to say and and the author of this post and then the username is equal to and then this will be pound or not pound dollar sign user and then we'll pass our username actually i can just change the parameter name to be username and then that will fix the problem for us okay now we just need to write the data that we want to get so for the data here i want to get dot dot so everything as well as the followers or sorry not as well as the followers but as well as the username so i'm going to say username and then this is going to be equal to author and then username and then i want to get the photo so i'm going to say photo and this will be asset and then the asset is going to go to underscore id and url okay that's all we need so what this query is going to do specifically it's going to get all of the posts where the username of the author of that post is equal to our user or our user name sorry and yeah that's all we need and then we're going to get the username of the author just as a field that we've added as well as everything else and then the photo the asset the id the url okay so i think that's all good so let's rerun our api here so let's go and stop this okay let's go npm start and then is there an error here we do have one error uh what is the error that we're getting it's saying the dot css doesn't exist okay uh what is the problem looks like it imported a css file that we don't have so let's go to profile and dots ah this is why i just need a slash here now when i add the slash it should fix the problem and notice our error goes away and we're only having warnings okay let's try this now go to the front end uh let's refresh and notice that we get an empty profile photo we get an at we get post followers zero zero zero and it says uncaught type error res.arraybuffer.js is not a function it looks like i must have messed something up there so let's go to line 40 here and what is the issue i have array buffer why the heck do i have array buffer autocomplete must have did that to me let's save that let's go back here and notice we get ten one two three four five zero post zero followers zero following now let's make a post uh please sign in to make a post okay fair enough let's go tim log in and let's go post let's choose a file uh let's just post this thing i don't know what this is okay hello make a post all right we go to our feed here we're not gonna see it because we're not following ourselves that makes sense now let's go to our profile by clicking on this and notice that it shows us okay so it's actually showing us all of the posts unless maybe i posted the dwayne derock johnson from tim as well although i don't think that i did maybe i did i mean we can check that so let's go here let's go to post let's go to dwayne and i did post it from him okay so that makes sense so it's showing us all of the posts here that we had as well as number posts number followers number following and the only thing i'm not seeing right now is the button and i'm not sure why i'm not seeing that so let's see how we get the button to show up and then let's do the css to fix this and then we will continue okay so where is my button my button is right here i'm saying user and owner and ah the reason for this is i'm not passing user to this uh profile component and i'm also not passing set alert so let's fix that let's go to app let's go here to our profile and let's say user is equal to and let's pass user and then let's go set alert is equal to set alert and we're all good okay now let's go back and now notice we're getting the edit button because this is our profile awesome when i click that it doesn't do anything but that's what we expected now let's go here to search let's search let's go to say joey and now notice it shows the follow button here because we are not following this user obviously we need to make the follow button do something we're making some really good progress so far on the profile page all right so now we need to add following we need to add the styling so let's do the styling first i keep forgetting to do that it's also because i hate styling as i'm sure many of you do as well let's start writing out all these classes the first class that i'm going to write is my vertical data i'm going to say this is display flex i'm going to say this is align items and then we're going to align this in the center uh we need our semicolon here okay we need the justify content so we're going to say justify content center and then we're going to say the flex direction is going to be columns so they go above each other so let's have a look what happened now when we add that notice that now our posts followers and following are all stacked above each other which is what we wanted okay the next thing we want is dot profile so 4. profile i'm going to say display flex we're going to say flex direction here is going to be row okay then we're going to say justify content this is going to be center align items this is going to be center i'm also going to put a flex wrap here where i say flex wrap and this is going to be wrap okay let's have a look now and notice that everything kind of gets pushed in the middle here a little bit strange but we're making some progress all right next i actually need to write a class that i forgot to add so what i'm going to do is go back to profile here and add another div that i forgot to add here so right inside of profile i'm going to say div class name is equal to this is going to be profile hyphen banner okay so this is going to contain everything up to but not including the posts so i'm going to put the ending div tag right here and now we have a profile banner div so now i'm going to go to profile.css and i'm going to code this now the profile banner again just contains kind of the top banner aspect that's everything other than the post for this user okay so we have profile banner what we want for profile banner is the following we're going to have a min width so we're going to say min width is going to be 30 of the screen or of the parent we're going to say the max width will be 500 pixels again this is not the best way to code all this out but it will make it look decent enough for our our purposes i'm going to say this is display flex i'm going to say flex direction and this is going to be column okay i'm going to go with align items so align item center we're going to go with the justify content center as well and then we're going to go column gap which is how much of a gap there is between each column and this is going to be 2em okay now let's have a look here and notice it brings it all back here over to the left hand side don't worry as i code out the rest of it it will continue to fix it so that is profile banner now we need our profile data so i'm going to say profile data and this is going to be display and this will be flex and then we want to have a flex direction of row and then we want to have a column gap here as well of 2em okay so continuing here let's go dot follow and then button and for the follow button i want to have the display of flex and i want to have a line item center okay then we're going to have our profile image which i'm referencing with id don't really know why i went with id as opposed to class but it's done now we're going to say max width is a hundred percent so let's fix that and then min width is and this is going to be a hundred percent okay apologies if you hear my little kid in here that is meowing sitting right beside me i know you guys can't see her but uh she's meowing and i'm not sure if it's picking up on the mic or not we're going to continue here we're going to have profile bio this is going to be display flex and then we're going to say flex direction this is going to be the column okay and then we're going to go dot profile posts and then this is going to be hyphen wrapper this is going to have a min width and not of none but of 30 percent it is going to have a max width of 500 pixels so 500 px and then it's going to have display flex okay and the flex direction is going to be column so let's fix that okay then for our profile posts i want to have a grid to display them so that it's nice and organized so i'm going to have profile posts and then inside of here we're going to have display and this is going to be as a grid and then i'm going to say grid template columns and i'm going to say one fractional unit one fractional unit one fractional unit and what this will do is make it so that we have three posts in every single row of our grid uh that's kind of just what this is doing now if i wanted four i would do one more fractional unit if i wanted to i would remove one i'm not going to explain much more than that that's what that line does though and then finally i'm going to say profile posts and then for all of the image tags inside of there i'm going to say the width can be a hundred percent and the min width will be a hundred percent as well okay min width and then a hundred percent okay again i'm not a master of css i'm sure some things here don't make complete sense and there's probably better ways to do stuff but this is what i got working before and i'm not really down to change it right now okay so let's go here and let's refresh okay so that looks better after i refresh but this image is way too big so i gotta find a way to make the image smaller so let me have a look here and then i'll be right back all right so i realized what the issue is i had this at a hundred percent when i meant to have a hundred pixels for my profile image so let's fix that make it pixels not percent and there we go that is looking much better now it is a little bit offset like it's over to the left when i want it to be in the center so again let me just have a quick peek here and see why we're getting that alright so i see the issue here for my align items in my profile banner i'm actually going to align them at flex start which means i'm going to align them at the beginning of the container and i think that should make the fix so let's have a look at this now and that looks a bit better so these items have now been pushed over to the left we still have this kind of offset to the left when it should be in the middle of the screen so let me continue look for the issue here i'll be right back all right so i found the other issue here had to do with my profile so i had the flex direction as row when it needs to be column uh when we make that column now it should fix this and put it in the center of the screen as you can see it does and when i resize it everything is dynamic and looks okay all right there we go now let's go to tim's profile because there's some images there and let's see if these are laid out nicer now so for tim now we get our two images not perfect but i can live with that for right now it's good enough again we're not focusing a ton on the styling but i can see the different images and actually maybe one thing that i do want to do is add a little bit of a break here between the images as well as the bio here so let's implement that and the way that we can do that is we can go to uh profile here and we can just add in a break div in between here so i can say div i can say class name is equal to break and then if i go to my profile.css let's just write that so i'm going to say dot break and for dot break this will be pretty straightforward we're just going to say flex and then basis is going to be 100 okay and then we're going to say that the height of this is going to be 2 em which is how much we want to break by now the flex base is 100 we'll just make it so it takes up 100 of the width of the screen and then the height 2em will just be well the height and so it should break uh okay that is actually not what i was expecting was going to happen uh let's change something here okay so the reason that happened is because my profile flex direction is column i know i just changed that but now that i've added the break in i think it messed some stuff up so let's change this back to row now and when i change this back to row you should see that now we get them aligned in a row and okay there we go so that's better all right now we have our space we have our name we have this let's sign in now let's now go to our profile and now notice it says the edit button shows this shows our name very nice okay everything is working as i expected now we want to be able to edit the profile and then follow and unfollow and then we will be done with this project so let's start by coding out the edit profile now as i said i'm going to put that in a separate component and this is going to pop up a popup or a modal that's going to show us all of the different fields so we can edit so we can edit the profile photo we can edit the bio we can edit the first name and the last name so what i want to do for edit profile is start with my imports so i'm going to say import use state and then this will be from and react and then i'm going to import the button the form and the modal from and then this is going to be react and then bootstrap okay nice now that we have that let's take in some props here so the props that i want for the profile is going to be should i show this what's the hide callback so when i hide this modal by clicking out of it what's the callback function for that then we have user we have not add alert but set alert and then we have the profile data because we need to populate the fields with kind of the default data that's already there and then see if we need to update it or not so what i'm going to do now is say my state so i'm going to put a state for the bio so i'm going to say const bio and then set bio is equal to use states we'll say use state and then this will be the profile data dot bio so that's what the default value is going to be for it whatever our current profile data bio is then we'll have const and this will be the first name and this will be set first name equal to use state profile data dot first underscore name okay and then we're going to have const last name set last name is equal to use state so let's do that profile data dot last underscore name okay then we're going to have const and this will be a file this will be set file and this will be use state and this will be an empty string and the file is going to be for our profile picture and i'll show you how we update the profile photo later on okay then we are going to write the html for our page or for this modal for the component so i'm going to return a modal now this is kind of a popup on the screen that's what i've been saying a bunch of times now now do i want to show this well i'm going to say show is equal to and then show so if this is false we won't show it if it's true then we will show it i'm going to say on hide so when this is hidden what do we do well we're going to call the hide callback function which will be passed to us from wherever we render this component then inside of here i'm going to say modal dot header and for the header we're going to add a close button which will allow us to close this and i'm going to add a title so i'm going to say modal dot and then title and then this will be edit profile and i think that's all we need for the title okay now outside of the header we're going to add a body i'm going to say modal dot body of course this will be the main body of that and then inside of here we're going to add a form so add form and inside of the form we're going to have a group so form dot group okay and then the class name here is going to be margin bottom three or mb3 then we are going to update the profile photo if we have one so i'm going to say profile data dot photo question mark so do we have a photo in sorry and and not file now the reason i need this is because what i want to show for the image is whatever the photo is currently of our profile and if we don't have a photo then i want to show the file that the user uploaded however if we have a photo and we have a file meaning that the user just changed the profile photo then i want to show the file that they uploaded so that's what i'm checking do we have a photo and do we not have a file if we do let's show the photo otherwise if we have a file let's show the file that they upload okay so if that's the case then what i'm going to show here is an image tag and inside the image tag the src is going to be the profile data dot photo dot url sorry dot asset dot url and then the class name is going to be equal to so for the class name let's go with upload image and then we will write the html for that or write the css sorry for that in a minute now otherwise okay so for the else here what i need to do is render a different image so i'm going to say image it's going to be src and this is going to be equal to the following let's just end the tag here so i can save this hopefully oh okay let's do this okay now it's going to be a little bit easier for you guys to see so i'm going to say src is equal to and i'm going to check here if we have a file so i'm going to say file question mark if we do have a file then i'm going to say url dot create object and then this will be url and we will put inside of here the file otherwise we'll just have null here for the source of our image so we won't actually show anything and i'll say class name is equal to and again this will be upload image which we're going to need to write the css for in a minute okay so that is for our image now let's copy this form group and let's put another one and let's copy it a few times because we're going to have three more inputs here so for the next one i just want a regular input which is going to be a file input so i'm going to say input this is going to be type equal to file and then what do i want next i want it on change and the on change is going to be equal to an arrow function and the arrow function is simply going to say set file and this is going to be e but we need to take an e here dot target dot files at index zero which we've already seen so that'll give us the file that we actually uploaded here and then we can say accepts or actually let's go look at our create post and try to remember here what we had okay so it says accept image slash and then asterisks okay so that's what we want for this as well so edit profile let's paste that in okay that's it for that form group now we're also going to have another one which i forgot about in the next form group though we are going to have a form control for the first name i guess so we'll have form control and then we'll just end the tag inside of itself we'll say type is equal to text we'll say placeholder is equal to first name and then we're going to say that the default value is going to be equal to profile data dot first underscore name okay and on input this is going to be equal to an arrow function where we're going to update the first name so we're going to say set first name e dot target dot value okay so let's copy this and let's paste the same thing here but now we're going to do this for the last name so the default value will be last name and then we will do rather than set first name set last name okay lastly we want the bio so we can actually paste this in as well and now we're just going to say bio this will be dot bio and then rather than setting the first name we will set the you guessed it bio okay last thing we need here is a button so inside of the form i'm gonna put a div i'm gonna put another div here and then i'm gonna say that this is a button okay the variant will be equal to uh primary so we have a blue button here the type is a button although i don't actually think i even need that one it's just a default button and i'm going to say on click is equal to and then i'm going to make a function here so i'm going to say function update profile okay and we'll do something inside of here for now though let's just call update profile okay so that should be the html of the entire page i believe that's all good what is the issue here with the return i expecting that uh okay i think this is fine um yeah just give me a warning okay so i guess my vs code is just tripping out now i think that's all good for right now now we need to do is code out this update profile function so inside of this function since i need to actually send a file right if we have a file to update the uh what do you call it the profile image i need to create my form data so i'm going to say const form data is equal to new form and data like that okay then i'm going to say form data dot append and we're going to append the file with the file and the form data dot append and we're going to append the user user and this is actually going to be the user that we want to update the profile for which will just be our current user so actually that makes sense we can just use user inside of here all right so then i'm going to continue and say form data dot append we're going to append the first name so let's do that the first underscore name this will match up with first name which is our state variable and then form data dot append we're going to append the last name and the last name and then we're going to do the bio so form data dot append and then bio bio like that all right that should be all good then we're going to say const request options and we're going to say that this is equal to and this is going to be method and this is going to be post now we also could maybe make this a patch method but i think it's fine just make it a post because we're going to be uploading a file as well and then for the body we're going to have our form data okay then we're going to fetch an endpoint we need to write this endpoint still but we might as well just write the code now and this is going to be update profile we're going to pass to this the request options and we're going to say dot then we're going to get the response and we're going to return the response.json we're going to say dot then we're going to get the data and then we're going to do something with the data now what we're going to do specifically is we're going to add an alert and we're going to say actually is it add alert what did i call this set alert i keep saying add when i mean set okay so we're going to set an alert and we're going to say here the variant and this is going to be equal to success okay and then the message and this is going to be equal to profile updated successfully okay now what i'm about to do here is going to seem a little bit weird but it's going to save us from having to make another request to the api to retrieve the new image for our our profile image if we uploaded one so explain why we need this but i'm going to say if file so if we did actually upload a new file then i'm going to say data dot and i'm going to add a new key here it's going to be image url is equal to url dot object or dot create object so it's going to be create object url and i'm going to pass to a file now the point of this is that i'm going to now call the hide callback function with my data and i've now added this image url field to it and so now from the component that's rendering this which is going to be the profile component i can grab the image that was uploaded here in the modal and without having to wait to get a response from the api at least to send another request get the new profile data get the new image etc what i'll do is just immediately update it on the profile and so it's going to seem like it's a lot faster because what happens here is when i send this request it's going to return to me all of the data that i updated on my object it's also going to return just the data of the object in general the issue is that it's not going to return to me a url for the image that i uploaded it's only returning to me the id and the reference of that image so since i already have the image path here i'm going to say data.imageurl is equal to and i create a url for it and then i display it immediately again this is saving me a request to the api so once we start getting through this it'll make more sense but again we're just adding the url to the image we uploaded to this data so now i can grab that from the profile component and i can just display that instantly and so it looks like we updated very quickly when we don't have to send a second request to the api to get the new image hopefully i'm clear there let's add a cache though just in case something goes wrong so i'm going to say error and then here we will add an alert actually so i'll say set alerts caught myself that time and let's go with variant and this will be danger and then the message will be error dot message and then we also need to call the hide callback function from here as well but this time we're not going to have any data to return so i'm going to do semicolon and then i'm going to call the hide callback and i'm just going to pass to it undefined because we have no data okay so that's it for the update profile function now that's really going to complete this component now what we need to do is write the update profile api endpoint so let's go to actually index.js first and inside of index.js we're going to write this so we're going to say app dot post now this is going to be slash and this will be update profile now here we want to accept a file although we're not sure if we're always going to get a file but we could because when you're updating the profile the idea here is that you can update some aspects of the profile but you don't have to right you might only update the first name you might only update the last name so we have to be careful here how we're updating this and making sure we don't clear any fields if we didn't change those so i'm going to say upload.file and then inside of here actually sorry not upload.file upload.single this will be a file and then we're going to say let's go here request response and then this will be equal to an arrow function inside of here i'm going to get the body so i'm going to say const body is equal to and then request dot body like that all right so now that we've done that i want to call a function called update profile and i need to pass to this mybody.user mybody dot and then this is gonna be the first name my body dot last name okay so let's go last name like that my body dot and then this is gonna be the bio okay and then finally we're going to pass the request dot is it image or is it file i believe it is simply file okay then we're going to have dot then data and then we're going to return res.json like that all right so let me just quickly fix this so that we don't have these uh things here because we don't need those now what i wanted to mention is that throughout this video i haven't really been showing you all the responses from the sandy client now they're just standard json responses that are going to contain all of the fields from our database but now at this point it's going to be a little bit different because we're going to actually be updating an object and when we update an object it's going to return to us kind of a different looking response now from the sandy documentation you can see exactly how all of that works but i just wanted to mention that if you want to look at what the exact response is you can come in here and you can just print out the data before you return res.json and then that way you'll be able to see well exactly what the response is in the console or specifically you'll see it actually from your api like when i was here when i was printing out a file that i was uploading in fact let me remove that i have a console.log somewhere uh where is it yeah right here console.log request.file okay anyways we have update profile we have this function so let's now import the function okay and then i just want to copy this just so i don't forget the different arguments and let's go into api calls and let's start writing this so i'm going to say actually not const functions dot and then this is going to be update profile like that this will be equal to an arrow function and then we're going to take in the first name the last name the bio we also need the user so first we'll take in the user first name last name bio and then this is going to be the file or we'll call it the image this will go to an arrow function and inside of here we need to make what's known as a patch request uh with the sandy api client so that we can update the profile so to update the profile first we're going to check if we have an image because if we have an image we need to upload that image and then use the new id of that image as kind of an update field when we're updating the profile of the user right so i'm going to say if image like that so if we actually have something then we're going to return the sandy client and this is going to be dot assets right and then dot upload and we're going to do exactly what we did before so sandyclient.assets.upload we're going to upload an image we're going to create a read stream this is going to be of the image dot path and in fact uh actually yeah we'll just cut it out because why not we have the file name here and this will be the base name of the image dot path okay and then from here we're gonna say dot then and then we're gonna have some data and then what we're going to do with this data is we're actually going to say functions dot get user id like that we're going to get the user dot then i know this is a lot i'm going to save in a second actually let's save right now just so we can see this a little bit easier okay that's a bit easier to read so i now have dot then now i'm going to get ids and then from the ids excuse me i need to say sanity like this so sanctity sanity client dot and then this is going to be patch and i'm going to patch ids 0 dot underscore id don't worry i'll explain all of this in one minute and i am going to set something specifically i'm going to set all the fields that i want to update so let's write that out but first let me just fix this so i don't have my curly brace because i can't have that here that's going to crash my program okay so dot set and this is the way that we update a field okay so let me just slow down for one second because i'm getting lost a bit myself so we have if image if we do have an image we're gonna start by uploading the image which we already know how to do once we upload the image it's gonna return to us some data that data is going to contain the id of the image which we're going to use to reference it okay so that's where we're first uploading the image then we're saying functions.getuserid we've written this i guess very close to the top yeah it's right here just returns to us information about a user specifically just the id but it's going to give it to us in a list so we want to get id 0 and then dot underscore id which will actually be the id of this user then we're saying dot set because we're patching here so patch says we're going to be updating and then we're setting and when we set a field we're just changing the value of that field to be whatever we want so then i'm going to write an object here and i'm just going to put the names of all my fields so i'm going to say first name last name bio and then for the image we're going to have to set it a little bit differently so we're going to say the image actually not the image sorry the photo because that's the name in our database and this is going to be equal to an asset and the asset is going to be a reference so we're going to say underscore ref and this is going to reference data dot underscore id okay let's save this now it's a little bit easier to read so again we upload the image we get the data associated with the image which will allow us to get the id we get the user id of the current user and then we say sandy client dot patch and we're patching what id or what document we're patching the document with the id of this user so when you use dot patch you pass in an id of the document that you want to patch and set different fields on and then i'm saying dot set so dot set allows me to actually set the values so i pass an object here i pass first name last name bio and then i'm passing photo and this is going to be an asset that's referencing the image that we just uploaded which we're going to be able to get the idea of from data okay and then what we do is we type dot commit and when we do that it's going to commit all of the changes to the sanity database all right now we also have the option to unset i won't show you that again you can reference it from the documentation but setting is how we can make an update to the object and override those fields nice now that we have that we need to write an else because if we don't have an image then we're not going to upload an image in fact if we don't have an image we're just going to do this so i'm going to copy this part right here actually it'll just be this first part and we're going to say return like that this is going to be functions.getuserid dot then and then inside of here what we're returning is sandyclient.patch id0id set first name last name bio but we're not going to set the photo this time because well we don't have a photo so there's no reason for us to set the photo right pretty straightforward okay so i think that's all we need to do inside of here that looks good for update profile definitely the most complicated one that we had to do thus far now we will go back to edit profile and i guess we can actually just give it a test although i need to render this component from inside of profile so i am importing edit profile from edit profile so what i'm going to do now is go here to right before profile and i'm going to reddit the render the edit profile component so i'm going to say edit profile and then what i need to pass to the profile is quite a few things so i'm going to say user is equal to and then user i'm going to pass show which is going to be equal to editing so if we're editing or show it oh we're going to show it if we're not then we are not obviously and then i'm going to pass my hide callback okay so hide callback is gonna be equal to and then what did we call this i think we called this hide edit callback okay that is what we called it and let's just end the component so i don't forget to do that so we have user show hide callback we also need to pass our profile data so i'm going to say profile data is equal to and then profile data let's save that and then lastly we need to pass our ad alert so i'm going to say add alert is equal to and then add alert which would have been passed to us in a prop right here and oh my gosh i keep saying add alert set alert set alert and then let's just go to edit profile make sure i called this set alert okay i did call it alert nice okay so that now will actually allow us to view the edit profile page whenever we click the edit button all right i think that's all we need to do for the profile component i have a feeling a few things are not going to work as expected but that's fine we'll fix them when we get to that point so let's go here let's go to our react app let's refresh okay let's sign in let's sign in as tim let's go to our profile and notice we can click edit so let's hit edit and nice we get this modal now the button oh i forgot to put text for the button so let me do that in a second we also need to make a size for the image so it takes up some room but you can see i have tim rasika and then i don't have a bio now when i press the button it should update but let's first just fix this a little bit so that the button actually has a name so let's go to edit profile our button is down here so let's i don't even know what we should do maybe just submit i think that's fine uh and then our image we want to add a oh we want to add the styling for upload image okay so let's do that first so let's actually do this inside of profile.css and we'll say dot upload image and then the image that we want to upload here is going to be width of 300 pixels and height of 300 pixels just give it a static width and height for now doesn't really matter too much okay so let's restart our api actually so now we can test this so let's go yes let's restart okay started all right now let's come here let's sign in as tim so sign in okay now let's go to our profile okay it says edit shows our modal perfect now we could put this in the middle i'm not too worried about that right now let's add a bio so let's say hello world and let's add a new image and actually we don't have any image at all so let's just go with something like this okay nice dog let's press submit and let's see if this is gonna work or not okay so it said profile updated successfully but we have not closed the modal and when i come back here it's actually not even letting me close it because i have not implemented the hide callback function so we need to fix that but it does look like that it was updated we didn't get any errors which is a good sign so let's continue okay so let me close this let's go to edit profile and we need to implement this hide sorry let's go to profile my bad we need to implement this hide edit callback so inside of hide edit callback we're going to say set editing false now that will at least close the modal for us we also need to do a few other things the next thing that we're going to have to do is get the data that's going to be passed here and we're going to use that to make some updates to our profile again so we don't have to send another request so i'm going to say if data so if it's not undefined if this did happen successfully then i'm going to say profile data dot first underscore name is equal to whatever the new data.firstname is and then the profiledata.last underscore name is equal to data. and then last underscore name okay and then i'm going to say if data.image underscore url so if we do have an image url inside of there then we'll update the photo so profile data actually we'll say profiledata.photo is going to be equal to and then this will be an asset and then this will be a url and the new url will just be data dot image url okay and then down here we'll say profile data dot and then bio is equal to data dot bio okay and then we'll say set profile data and we will set it to be profile data just to make sure the state updates okay so just to stop here and explain because i know i'm not explaining exactly the data that's being returned from our api call when we update as i was saying it's going to return to us a new object with all of those new updates however the image that we're going to get is not going to contain a url because we didn't explicitly ask for the url from the asset and so that is why again i was adding that image url aspect to our data from the edit profile here that's why i did this so now when we come back here we just grab the first name grab the last name from the new data right this will be whatever the updated first name is whatever the updated last name is updated image updated bio and we just used that to update our profile data we then set the profile data set editing equal to false and now we have all the updates we just made without having to send an additional request now if we wanted to simplify this we could actually just call the update profile function here and then that would send another request that would then give us all of the new data and then we wouldn't have to worry about any of this so what we could do is not return any data and just call update profile and we just call this with the username right and then that would update it for us however i prefer doing this and it's going to be faster and look faster on our page so let's try this now let's go here let me click this it actually closed and then we have undefined undefined and then hello world okay so this is a bit of an issue uh our first name and last name are not being updated as i hoped they were going to be updated so i will show you how to fix this but i was hoping it wasn't going to happen so let's go back to edit and notice these are both undefined now if i manually change them and i change them say timber seca here and now i submit we should see that this closes and it does actually update for us the issue is if i don't modify them at all and then i hit submit okay uh oh okay it actually looks like it didn't make it go to undefined although let's see if i go post and tim if they're undefined now no okay they're not undefined that's weird why they were undefined before let's let's try this one more time let's submit and there we go so now they're all they all go to undefined so again this is kind of weird but what's actually happening here is that the state for some reason is not going to be holding the correct profile data when we don't make any changes to it so just to kind of debug this a little bit let's print out the first name and the last name so let's print out first name and last name as well as the bio here when we don't make any changes just to see what they're equal to before we add them into our form data and then we can hopefully fix this problem so let's refresh we're going to have to sign in again just because we've refreshed the app so let's sign this tim let's go here okay let's hit edit now let's make a change that's going to persist so tim receica hello okay submit tim or seek hello okay that's what the state is nice it updated now let's just go post and tim just so that we get a fresh api call to get everything here okay now let's go edit and let's not make a change and hit submit now notice they all become undefined now i'm not a react expert and so i don't know why for some reason the state is not getting what the uh what do you call it what the props are because the props where my profile data is is first name last name and bio so i assumed it was going to store that data but for some reason it's not so really there's no point of us even putting that in there because well clearly it's not the correct data so what i'm going to have to do is check if the state is empty and if the state is empty then i'm going to have to replace first name last name and bio with the current profile data from inside of here so really the fix involves this we're going to say if and then we're going to say first name is equal to an empty string or we could just say something like if not first name really up to you how you want to do it then we're going to say set first name and then this is going to be profile data dot first name now this is only going to trigger if we don't manually make a change change to first name so that's fine if we do make a change it won't trigger then this is going to be last name and we're going to say set last name and we're going to say profile data dot and this should be last name and then lastly here we're going to go with bio okay and then we'll say set bio and this can be profile data dot and then bio now alternatively i'm thinking that there's probably a world where we can do this inside of a use effect where we just set the first name set the last name and set the bio equal to this information as soon as this information comes in to us i'm assuming what's happening is that originally when the profile data is passed it's actually empty to the component and then it's not being refreshed and so that's why we're getting kind of the empty state here because if we go to profile actually i think this makes sense i think i've just figured it out here the update profile is not going to be done immediately because we're sending an api request so it takes a second to get this data so immediately when we actually start rendering this edit profile and we pass the profile data we're passing empty profile data and that means when i go to edit profile here and i set the initial state i'm setting it with empty profile data and so i'm getting undefined so now if we just set it as an empty string and then we update it using the profile data once we've hit the update profile button we should be good to go again we could probably do this in a use effect but i think this is fine for now okay so let's save this let's go back here and let's give this a try so let's refresh we're gonna have to resign in so let's sign in as tim login okay let's go to our profile let's go edit let's change this to something that makes sense so tim receica okay hello world okay submit and let's make a change now and let's just submit with no changes okay so submit and that looks good now let's go back to the profile so post tim and it does not show undefined awesome so that's exactly what we're looking for looks like we were able to edit the profile successfully let's try changing the image now so let's go the young man's face okay submit and let's see if it works and there we go we get it uh oh okay so this time the first name last name and bio are gone okay so it looks like we do have an issue uh we're gonna have to fix that so let's try this one more time though just so i can make sure i get the issue correct so tamara sika say bio okay let's submit all right when we submit we get that let's go here let's go back to the profile okay so we're getting all that but now if i choose a file here so let's update the file and let's submit for some reason it cleared my first name last name and bio okay so that's annoying let's just make sure that actually is occurring and it's not from our callback function okay so it is actually persisting in the database let me have a look and i'll be right back all right so i've just fixed the problem but it did require a few major changes so when we're looking at our state here notice that i just have these as empty strings okay then for use effect i've added this in here to edit profile so i imported it first right and then what i'm doing is i'm setting the first name setting the last name and setting the bio whenever the profile data changes so whenever we load the new profile data from our profile component then it will force this to update here and so we'll force update the state then what i'm doing here is i'm just appending all these things in the same way that we had before however when i call the callback function i'm no longer passing the new data now when i go to profile.js here notice that in the callback function i've removed everything and now i'm just calling update profile so yes i did say before that it was going to be faster to get the data back and then make those changes however that was really bug prone and i realized this was going to be a better solution just because there's not going to be all these weird education edge cases sorry and things going on that we need to handle so even though the other way will be faster and we should try to come up with a way to do that for the purpose of this video we're just going to recall the update profile and that's going to force another api request which will now give us all of the new data in the format that we're used to expecting and then we can just update the profile using that and that means we won't have any data inconsistency issues as well so for hide edit callback i'm no longer taking a parameter and i'm just calling update profile so those are really all the changes that i made another change i made is that if you go here notice that i have first underscore name not first name so that was one of the causes of a lot of our issues was i had camel case as opposed to snake case and so hopefully you guys can understand all of those fixes again code will be available from the description in case i lost you here but i think we should be good to go now so let's come back here let's refresh the page and let's give this another test okay so let's go tim let's go here now i have undefined because i was messing with us before anyways let's change this to be tim let's go hey let's submit and now we get the correct stuff okay now let's make another change and actually let's just submit the current data that we have notice we don't get any undefined okay fingers crossed let's upload a new image here okay let's try this and yes awesome everything is working we can now move on to adding followers okay so we've updated the profile a lot of the hard stuff is done now we just want a way to be able to follow and unfollow accounts so actually not overly complicated to do that we're going to do that from the profile page so we can now close the edit profile page we're done with that however i want to go into my api calls and i want to write those and then i want to write the corresponding backend api endpoints that we'll need and then that way we can just work in the profile file for the remainder of the video so let's write some functions that can add and delete a follower so i'm going to say functions dot add follower is equal to we want to take the user that we're going to add the follower for and we want to take the following id so who are we following okay then we're going to come here and we're going to going to return and this is going to be functions dot we need to get the user id of the user that we want to add the follower for we're going to say dot then we've already looked at this before but we're going to get our ids and then inside of here we're going to say sanity client dot and now we're going to patch because we're going to be adding an element to an array which is a patch or update operation for the current user right so that's why we're patching we're going to patch ids 0 dot underscore id okay now we're going to add our dot then we're going to take in our data or sorry we don't need a dot then my apologies we're going to have a dot and then this is going to be set if missing and we're going to set if missing the following field to be an empty array just so when we try to add something into the array if we didn't already have it we don't get any errors now we should have the field there already but again if for some reason we don't have it we're going to set it if it's missing i mean that's pretty intuitive and then we're going to insert something now we're going to insert after and what i can write here is following and then colon negative 1 or sorry just negative one and this is going to reference the very last element in the following array here just like we would in python now it doesn't really matter where we're adding this element in because we don't really care about the order of it but we'll just add it at the end because that kind of makes sense to do and then what we're going to do is we're going to add a underscore reference and this reference is going to be to the following id like that and then we need a unique key inside of this array so the key i'm going to use is nano id and i need to import that so i'm going to come up here and i'm going to say import nano id from and then nano id i believe it's a default import actually no it's not so we're going to have to import it like this and what nano id is going to give us is just a unique id that we can use now the reason we need an id inside of here is because every element in our array we want to be able to have quick index access for it and we can access every element using a unique id so when i have key now if we had say a duplicate reference in here we shouldn't have that but if we did we'd still know which element is which because we have the unique key so this just helps in the database for them to quickly locate different elements hopefully it's making a tiny bit of sense but every element that we have inside of the array we add this key which is a unique id that we get from this nano id function we installed that at the beginning of the video okay now the next thing that we need to do here when we're going to be adding a follower is we just need to add the type so i'm going to say underscore type like this and this is going to be a reference so let's add reference like that and that is literally all we need to do to add a follower other than commits okay so we'll commit like that all right so let's just walk through this one more time we're getting the id of the user we're already going to have the id of the person that we want to follow and i'll talk about how we get that in a second then we're going to well get the id from the user we're going to patch this user because again patch we take an id of a document that we want to make a modification on we're going to set if missing the following field and then we're going to insert after the last element in the following array if it doesn't have any elements it'd just be the first element we insert and then here we pass an array of all elements that we want to insert we're going to insert multiple elements at a time so i could put another object if i want to insert it here in this case i just want to insert one so i'm inserting a reference to the following id because the reference type or the type of this array is referenced right and then i'm saying key nano id the unique id of a key and i'm saying type reference and we're all good to add a follower okay now in a similar way we're going to remove a follower so i'm going to say functions.remove follower this is going to be equal to user and following id as well then inside of here we're going to return the sandy client and then this is going to be dot patch and again we're going to have to get the user id actually so first i'm going to say return functions dot get user id we're going to get the user id of the user i'm going to say then this is going to be ids and then here we're going to say sandyclient.patch this is going to be ids 0 dot underscore id okay let's save that and then after the dot patch we're going to say unset so this is how we actually remove something and we're going to unset the field that we want in this array so i'm going to say inside of here following like that and then this is going to be underscore ref and then the ref is going to be equal to a string and this string i'm actually going to have to sorry make this back text just so that we can insert what i need here so we're going to have a string and i'm going to go with following id like that inside of parentheses or not parenthesis sorry this is going to be squiggly brackets okay so let's save that so it goes down on the next line so what we're doing here is saying okay we are going to get the user id we are going to patch that user so make an update on it and then we are going to unset and we are going to unset following and then at this key so really following is the array and we just want to unset one element from that array which is really removing it from the array the element we want to remove is the one that has a reference which is equal to the following id so that's why we're putting it here and then we need a back tick so we could embed this directly inside of here then of course just like before we need to commit and once we make a commit it will update it in the database and there we go okay so now that we have done that we just need to go to index.js and we need to write the corresponding what do you call it endpoints here for remove follower and add follower so i'm going to say app dot and then when we want to add a follower it's going to be post so i'm going to say post and then this will be slash add follower again you can maybe make this a patch request if you want but we'll just keep it as post it's not really a big deal and i will go here with request and response and then this is going to be const body and i want to say request dot body because i need to get a few things here specifically i need the user as well as the id of the person that i want to follow so now i'm going to call the remove or sorry not remove the add follower function and i'm going to pass this the body.user as well as the body.id and the id is going to be the id of the person i want to follow then i'm going to say dot then data and then i will return what is it yeah res.json and then data okay that's what we need for that let's copy this and do the same except this is going to be the delete method and this will be for remove follower because we're deleting something right and then we're going to have our request.body same thing want body user body id except rather than add follower it's going to be remove now we just need to import those two functions so let's go add follower and remove follower and now we are good from the backend standpoint so let's close this let's rerun our back end and now let's go to our front end and let's actually use these inside of our follow click function because the follow click function is really the last thing that we need to code out here to add and delete the followers so the first thing i need to check here is am i following or am i not following i also want to make sure that i'm not the owner and that i can't somehow click this before the the page fully renders so what i'm going to do is say if owner then return just to make sure that i can't go any further inside inside of the logic here and then i'm going to say if not following so if i'm not following then this means that i'm actually going to add a follower if i am following then i'm going to remove so we'll have an else statement here and we'll do something there okay so i'm going to say const request options this is going to be equal to an object now the method is going to be post okay again you could have made that patch some of you are probably going to argue in the comments that i should have changed some of the methods but that's fine we'll go with post and then i need to add a header here and the header that i want to add is content and then type and this is going to be application json because i'm going to be sending json data and then for the body here i'm going to say that this is json.stringify and i'm going to pass my user equal to my user and my id equal to the profile underscore data or sorry profile data dot underscore id so again we can get the id from our profile data the reason we can do that is because the profile data returns to us all of the data from our database and every single element in our sanity database has an underscore id and the id is going to be completely unique for each document so this is the id of the current person's profile that we're on and the user is the name of our current user that's viewing the profile okay so that's what we're doing there uh that's actually all we need for that and then we're going to fetch a request i mean i don't know if fetcher request is really the proper way to say that but we're going to fetch an endpoint maybe and this will be add follower okay and we want to add the follower with the request options and then we're going to say then we're going to say underscore res and we don't actually care about the response here i mean i will still return the res.json and i will say then data and then i'll do something here but i'm actually just going to update the profile once this occurs to set the new following count so you'll see what i mean here but i'm going to say update profile and then params.username like that okay so what we're doing when we add a follower right is we don't care about the response here uh it just doesn't matter to us what it is because we can just update the profile then that will update the follower count of this user to go up by one when we follow them there's no other updates that we need to make and so again we'll just do update profile okay so add follower request options that's post request application json we're sending the user and the profile data id this will add the follower for us assuming all that works will follow successfully and then we don't actually need to like add an alert onto the screen because when we call update profile it will actually call this update following for us and then you'll see that we'll set the following to be true which means the button is going to change and so that will kind of be the uh what do you call it the response to the user or the information to the user now just so i don't get yelled at i can do underscore data here just to say i'm not using that variable and now that's fine okay so otherwise if i'm not adding a follower i'm deleting a follower so let me copy this here and we're going to change the type to be delete and then rather than add follower i'm going to say remove follower and then we'll do the same thing with update profile here it's saying res is not defined oh sorry so let's fix this so get rid of underscore res get rid of underscore res and now that should be good instead of here so that's actually all we need i think for adding the follower and for removing the follower yeah that should be about it now i could add a catch statement if i want to add an alert saying that there's a problem i think for now though this is fine if you want to add that feel free okay so that really should wrap up this entire application now i'm hesitant to say that because of course we're doing a lot of complex stuff and there's always a possibility that there will be some bugs or some issues here but let's go and test this out and see if this works so let's refresh the page here if we want to follow someone obviously we have to sign in so let's sign in as like joey123 and let's now go to our account and for joey okay we see we have joe smith that's the name let's go to search let's search for some users okay so when i'm searching let's go to tim and let's follow tim now okay we got an issue here it says unexpected token in json at position 0. so as i suspected we have an error let me figure out what that is and then i'll be right back all right so i have found the error here it just has to do with when i was unsetting and committing in my remove follower so i'm going to go here and place this like that let me remove my semicolon so what i was doing was i was adding the unset and the commit after uh these sandy clients so i was kind of adding it here as opposed to inside so i just need to fix that and i need to do the same thing here for this patch so let me copy all this and paste this inside of this parentheses so that's what was being messed up again have a look at the new code here i have sandy client.patch then after the dot patch i'm doing this as opposed to after the dot then which is what i had before which was causing me to get an internal server error so let me restart my back end of course we had an error i think this should be good now though uh let's see let's go back let's refresh okay let's sign in as joey123 all right let's go to our search let's search for a user let's go to tim and let's press follow and fingers crossed we will see okay nice so the followers go up by one now it says unfollow now the moment of truth is is it going to show my new post now based on who i'm following so if i go to feed now i see the post of tim because i'm following tim so let's click into tim and let's unfollow and let's see now if those posts go away okay so let's go back to feed and there we go now we don't see any posts because well we're not following anyone so let's just do a few more tests here i'm going to sign in as tim so let's log in as tim here let's go and notice that i have one follower that would have been joey from what i was following before let's go to search let's search let's go to tim1234 let's follow okay now it has two followers nice now let's make a post so let's just add a random image here and say test okay let's post let's see if that works okay all good let's go to our profile we should see now we have another post here because i've signed in as tim now let's just go to search and see what other accounts we have we have joey12345 okay so let's go log out sign in as joey12345 let's go to search let's go to tim let's follow and now he has two followers okay let's go to feed and then i should see all the posts from tim awesome okay everything is working i'm very excited the video is now complete all alright so i'm going to conclude the video here this was an extremely long video so if you made it to this point i'm expecting that you leave a like and you subscribe to the channel maybe even leave a comment because this took a very very long time to film record come up with beforehand and i will give another thank you to sanity for sponsoring this video again completely free i think it was really easy to use and also a great tool because we have this visual uh you know sandy studio that i can go in and actually view all the stuff happening with my database it just makes it way easier especially when it comes to debugging and again for people that aren't kind of tech savvy and aren't going to write the code if they were working on a project with you they could come in here and they could add whatever it is that they needed to again without having to write any code themselves now this is as close to a social media clone as i can realistically make on youtube in a decent amount of time of course we don't have likes we don't have comments we don't have you know dms and stuff like that but with the tools in this video you should be able to add those features and extend this to really create whatever you want of course the styling is not as good as you'd hopefully want it to be but you can mess around with that it's very time consuming to do css styling as you briefly saw in this video anyways if you made it this far please do like the video please do subscribe maybe even leave a comment and i hope to see you in another youtube video
