With timestamps:

00:00 - if you're looking to practice your
00:01 - python skills then you are in the right
00:03 - place today I'm going to be walking you
00:05 - through a python project that really
00:07 - will help you master the language not
00:09 - only does it cover a lot of the syntax
00:11 - in Python and some of the advanced
00:12 - features but it utilizes some very
00:14 - popular python modules so you can
00:17 - understand how to use this language to
00:18 - build a real practical project we're
00:20 - going to be building a personal finance
00:22 - tracker with the ability to track and
00:24 - log different transactions organize them
00:27 - get summaries of income and expenses and
00:29 - even view our data in a graph so we can
00:31 - see how much money we're making month
00:33 - over month this is a great project and
00:36 - let me show you a quick demo so you can
00:37 - see exactly what we'll build all right
00:39 - so I'm on the computer now and we'll
00:41 - start with a quick demo of the project
00:43 - so you can see here that we have a few
00:44 - different options we can add a new
00:46 - transaction or we can view transactions
00:48 - in kind of a summary within some range
00:50 - or we can exit so let's add a new
00:53 - transaction to start we're going to
00:54 - enter the date uh let's go with maybe
00:57 - 207 2023
01:00 - let's enter the amount of the
01:01 - transaction $124 and then we have to
01:04 - classify if this is an income or expense
01:07 - so let's say this is an expense and then
01:09 - I can give this a description and maybe
01:11 - I'll say this erir groceries okay
01:14 - perfect now we've entered that
01:16 - transaction now what I can do is view
01:18 - some transactions and a summary within a
01:20 - range so I'm going to go with two now
01:22 - let's enter the start date let's go with
01:24 - maybe 01 07 20 24 and let's go with 20
01:29 - 07
01:30 - 2024 okay when I do that you can see
01:33 - that it gives me all of the different
01:34 - income and expenses that I have within
01:36 - that date range gives me a quick summary
01:38 - with the total income total expenses
01:40 - then the net savings or the net profit
01:42 - then I actually have the option to view
01:44 - this as a plot so I'm going to go ahead
01:45 - and press yes and you can see now that
01:47 - this actually opens up a chart and shows
01:49 - me all of the income and expenses over
01:51 - that date range now let's go back and I
01:54 - just want to show you that all of this
01:55 - data is stored within a CSV file so this
01:58 - could easily be imported into something
02:00 - like Excel or Google Sheets if you
02:02 - wanted to and this is kind of what we're
02:03 - using as the database for the project so
02:05 - you can see we have the date amount
02:07 - category and description obviously you
02:08 - can extend this and make it a lot more
02:10 - complex but this is a really great stter
02:12 - project and you're going to learn a
02:14 - significant amount from it now that is
02:16 - the project that will help you master
02:17 - the Python language just like I've
02:19 - mastered the segue to our sponsor
02:22 - i.net i.net is a decentralized cloud GPU
02:26 - Network that allows dormant gpus to be
02:29 - used by consumers if you have gpus that
02:31 - you're not using i.net provides a
02:34 - marketplace where consumers can utilize
02:36 - that compute and you can get paid i.net
02:39 - is based on the salana network and the
02:41 - io token its aim is to create the
02:43 - largest network of geod distributed gpus
02:46 - this network allows machine learning
02:48 - Engineers to access scalable distributed
02:50 - computer clusters at a fraction of the
02:52 - cost of centralized Services i.net is
02:55 - uniquely capable of creating clusters of
02:57 - tens of thousands of gpus whether they
02:59 - are collocated or Geo distributed
03:02 - whether you need compute power or have
03:03 - unused Hardware you can take advantage
03:05 - of this great Marketplace from i.net
03:08 - anyone can provide compute and at the
03:10 - moment i.net has over 148,000 verified
03:13 - gpus and over 43,000 verified CPUs
03:17 - available to use with the recent hype in
03:19 - the AI field more and more Engineers
03:21 - need this type of compute and i.net is
03:24 - providing it to them check out this
03:25 - great project by clicking the link in
03:27 - the description and now let's get into
03:29 - the video so let's go ahead and get
03:31 - started with this project now what I've
03:33 - done is created a new folder called
03:35 - personal finance tracker tutorial on my
03:37 - desktop and just open this up in Visual
03:39 - Studio code you can work in any editor
03:42 - or IDE that you want and I'm assuming
03:44 - for this project that you have some
03:45 - familiarity with python and you know how
03:47 - to for example open a new project create
03:49 - a folder Etc so just get a folder ready
03:51 - for writing this code now what we're
03:53 - going to do is install the different
03:55 - modules that we'll need for this project
03:57 - specifically we're going to need map
03:58 - plot lib and pandas these are the two
04:00 - modules map plot label will allow us to
04:02 - plot and see the graph and pandas will
04:05 - allow us to more easily kind of
04:06 - categorize and search for data within
04:08 - our CSV file so in order to install
04:11 - these we're going to type the following
04:12 - command that's pip install and then
04:15 - matap plot lib this is going to be in
04:17 - your terminal or your command prompt now
04:19 - if you're on Mac or Linux this will be
04:21 - pip three install map plot lib and after
04:24 - we install that I already have it
04:26 - installed so I'm just going to skip this
04:27 - we're going to install pandas now in
04:29 - case you get lost at any point in this
04:31 - tutorial all of the code will be
04:32 - available from the link in the
04:34 - description as well as a requirements
04:35 - file that specifies the few different
04:37 - modules that you need okay so at this
04:39 - point we should be good to go we have
04:41 - map plot lib and pandas and now we're
04:43 - going to create some files so the first
04:45 - file we're going to create here can just
04:47 - be main.py and I'm going to make another
04:49 - file called dataor entry. piy this is
04:53 - because I want to have one file that's
04:55 - going to kind of collect data from the
04:57 - user so it'll have all of our input
04:59 - statements it'll be validating different
05:01 - data and then a main file which will
05:03 - handle kind of the main flow of the
05:05 - program now for this program we're going
05:07 - to have a CSV file again comma separated
05:10 - values and that's going to act as our
05:12 - database so I want to begin by working
05:14 - with the CSV file so initializing it
05:17 - creating if it creating it s if it
05:18 - doesn't already exist and then looking
05:20 - at how we can add new entries into it
05:22 - and read data from it so let's start
05:24 - there after we work with the CSV file
05:26 - we're then going to have to be able to
05:29 - view different transactions so we can
05:31 - get kind of that summary list that we
05:32 - saw before we're also going to have to
05:34 - give some nice input or kind of a nice
05:37 - view to the user so they have the
05:39 - ability to interact with it from the
05:41 - terminal so a few different steps here
05:42 - but let's start with the CSV file so at
05:44 - the top of our program we're going to
05:46 - say import pandas as PD again pandas is
05:50 - going to allow us to actually load in
05:51 - the CSV file and work with it a lot
05:53 - easier we're then going to import the
05:55 - CSV module pretty straightforward what
05:57 - that will do and I'm going to say from
05:59 - date time import date time this is a
06:03 - module built into python which is going
06:04 - to help us work with dates and times
06:06 - which we're going to need for this
06:07 - project now what I'm going to do is I'm
06:09 - going to start by setting up a class
06:11 - which is going to have a few different
06:12 - methods that allow us to work really
06:13 - easily with our CSV file so I'm going to
06:16 - say class CSV and then inside of the
06:18 - class I'm going to create a variable I'm
06:20 - going to say CSV file is equal to and
06:23 - I'm going to give a name to the file we
06:25 - want to work with so I'm going to call
06:27 - this Finance data.csv V this is what's
06:30 - known as a class variable It's
06:32 - associated with the class and that makes
06:34 - sense because we're going to be using it
06:36 - just within this class which has some
06:37 - functions related to the CSV file now
06:40 - you don't need to make a class for this
06:41 - but I'm just trying to show you some
06:42 - more advanced python features hence why
06:44 - I'm doing this okay so the first thing
06:47 - we need to do is we need to initialize
06:49 - the CSV file that means that we need to
06:51 - read it in if it already exists or we
06:53 - need to create it if it doesn't already
06:55 - exist so we're going to create a method
06:57 - here I'm going to say aish
07:00 - all liore CSV this is actually going to
07:04 - be a class method so what I'm going to
07:06 - do is decorate this with the class
07:07 - method decorator so we're going to say
07:09 - at class method what this means is that
07:11 - this will have access to the class
07:13 - itself but it will not have access to an
07:15 - instance of the class if you're familiar
07:17 - with object-oriented programming when
07:18 - you create a new instance of the class
07:21 - we have some different properties on
07:22 - that instance in this case this class
07:24 - method um that we've defined is just
07:27 - having access to the class itself
07:28 - meaning I can access things like other
07:30 - class methods and the class variable
07:32 - that we defined here okay so I'm going
07:34 - to write CLS as the parameter that this
07:37 - will take and what we're going to do to
07:39 - start is we are going to try to read in
07:41 - the CSV file so we're going to say pd.
07:45 - read CSV and we're going to attempt to
07:49 - read the cs. CSV file okay so we're
07:53 - using this variable right here we're
07:55 - going to try to load this in and if that
07:57 - does not work so we're going to say
07:59 - accept on a file not found error then
08:02 - we're going to create the file so we're
08:05 - going to say data frame or DF is equal
08:07 - to PD this is our pandas module remember
08:10 - dot data frame and then this is going to
08:14 - be columns equal to and we're going to
08:16 - specify the four different columns we
08:18 - want to have inside of our CSV file now
08:21 - the First Column is going to be date the
08:23 - second column is going to be amount
08:25 - third column is going to be category and
08:28 - the last column is is going to be
08:31 - description okay let me zoom out a
08:32 - little bit so we can read this a bit
08:34 - easier now if you're a little bit
08:35 - confused here when we create a comma
08:37 - separated uh values file it kind of
08:39 - looks like this we start by having some
08:41 - headings or some columns so in this case
08:44 - date amount category and description
08:48 - then beneath that we have all of the
08:50 - different entries so maybe we have a
08:51 - dates like
08:53 - 207
08:54 - 2024 we have a category or an amount
08:57 - like 12 125 category income description
09:01 - and whatever this is the salary okay
09:03 - this is what the comma separated value
09:05 - file looks like we just have all of the
09:07 - different entries separated by commas
09:09 - pretty straightforward so that's what
09:10 - we're loading in using pandas so that's
09:13 - why I'm specifying The Columns that I'm
09:15 - going to have uh for this what do you
09:17 - call it data frame so that's why I'm
09:19 - specifying these are the four columns
09:21 - that I want to have and I'm putting this
09:22 - inside of what's known as a data frame
09:24 - now a data frame is an object within
09:26 - pandas that allows us to really easily
09:28 - access different rows and columns from
09:31 - something like a CSV file so what we're
09:33 - going to do is we're going to create
09:34 - this data frame and then we're going to
09:37 - actually export the data frame to a CSV
09:39 - file so we're going to say data frame.
09:41 - 2or CSV we're going to say that the name
09:45 - of the file we want is cs. CSV file and
09:48 - we're just going to say index equals
09:49 - false you don't need to worry about that
09:51 - too much right now but it just means
09:52 - we're not going to be sorting this um
09:54 - data frame or doing anything by indexing
09:56 - it okay so what we've done is created a
09:58 - pandas data frame with these four
10:00 - different columns we then have just
10:02 - converted this to a CSV file and what
10:03 - that's going to do is save a local file
10:05 - with this name in the same directory as
10:08 - this python file now what we can do to
10:10 - test this out is we can run this method
10:12 - so I can say CSV Dot and then initialize
10:15 - CSV so let's go ahead and run our code
10:18 - here so let me bring up my terminal and
10:21 - we will go Python 3 and then main.py and
10:26 - we should see that a new file is created
10:27 - with Finance dat. CS s v and it has our
10:30 - four different columns here now just as
10:32 - a sanity check we'll run this one more
10:34 - time and we should see that nothing new
10:35 - happens because the data frame already
10:37 - existed great so now that we've
10:39 - initialized the CSV file and we know
10:40 - that it does exist the next step is we
10:43 - want to actually add some entries to the
10:45 - file so I'm going to make another method
10:47 - here inside of the class I'm going to
10:49 - say at class method and this is going to
10:51 - say addore entry now to add an entry
10:54 - we're going to take in the class we're
10:56 - going to take in some date and amount a
11:00 - category and a description okay these
11:03 - are the four things that we really need
11:05 - when we're adding a new entry into the
11:06 - file and that lines up with our category
11:09 - names okay so for the add entry what
11:12 - we're going to need to do here is kind
11:14 - of use pandas or actually we're going to
11:16 - use what's known as a CSV writer to
11:18 - write into the file so the first thing
11:20 - we have to do is create the entry that
11:22 - we're going to be adding so I'm going to
11:23 - say my new entry is equal to and I'm
11:26 - going to specify all of the different
11:28 - columns associ ass with their values I'm
11:30 - going to say date is associated with the
11:32 - date I'm going to say the amount is
11:34 - associated with the amount I'm going to
11:37 - say the category and this is going to be
11:40 - with the
11:41 - category if we could spell that
11:43 - correctly and then description with the
11:47 - description let's just make sure we
11:49 - spelled this correctly looks good so
11:51 - we're storing this in a python
11:53 - dictionary and that's because we can use
11:54 - the python dictionary to just write into
11:56 - the correct columns uh when we use this
11:59 - CSV writer so you're going to see how
12:00 - this works I'm going to say with open
12:04 - I'm going to open my file which is CLS
12:06 - do CSV file I am then going to open this
12:09 - in append mode so when you put a this
12:11 - means that we're going to be appending
12:13 - to the end of the file we're not
12:15 - overwriting the file or deleting
12:16 - anything or making a new one we're just
12:18 - opening it and then putting the cursor
12:20 - at the very end of the file so we'll add
12:22 - to the end I'm then going to say new
12:23 - line is equal to and I'm just going to
12:25 - specify an empty string right here the
12:27 - reason for that is I don't want to add a
12:29 - new line character at the end when I
12:31 - open this file okay I'm then going to
12:33 - say as CSV file and inside of here we're
12:37 - going to specify our field names so
12:39 - we're going to say field names are equal
12:41 - to and actually it's going to be the
12:42 - same as our columns so what we should
12:44 - really do is we should store this in a
12:46 - variable I'm going to say
12:47 - columns is equal to this and now for the
12:51 - columns we're going to change this to be
12:53 - CLS do columns and then here we can get
12:58 - rid of this variable
12:59 - and what we'll do instead is use the new
13:01 - variable that we just defined so we're
13:03 - going to say writer is equal to CSV Dot
13:08 - and this is going to be the dictionary
13:10 - writer this means we're going to take a
13:12 - dictionary and write that into the CSV
13:14 - file and inside of here we're going to
13:16 - pass the CSV file that we just opened
13:20 - and what else are we going to pass here
13:21 - we're going to pass the field names so
13:24 - we're going to say field names are equal
13:25 - to and this is going to be the cs.
13:28 - column so what we're doing here is
13:30 - creating a CSV writer what this will do
13:33 - is take a dictionary and write it into
13:35 - the CSV file so now that we've created
13:37 - this object all we need to do is use it
13:38 - so I'm going to say WR
13:41 - er. write and this is going to be row
13:45 - and we're going to write a new row using
13:47 - the new entry okay then we're just going
13:49 - to print down here we're going to say
13:52 - entry added successfully like that so
13:56 - let's just quickly recap what we did we
13:58 - created a new dictionary that contains
14:00 - all of the different data that we want
14:01 - to add into the CSV file we then opened
14:04 - the CSV file we opened it in a pend mode
14:07 - and when we use this with syntax here
14:09 - this is what's known as a context
14:11 - manager that's why we have this as CSV
14:14 - file so it's storing the open file in
14:16 - this variable and pretty much what this
14:18 - means is as soon as we're done with the
14:19 - code inside of here this is
14:21 - automatically going to handle closing
14:22 - the file for us and dealing with any
14:24 - memory leaks or just cleaning everything
14:26 - up really nicely so it's great practice
14:28 - when you're working with files to use
14:30 - this with open syntax because you can do
14:32 - anything you need inside of the indented
14:34 - block and then as soon as you're done
14:36 - python will automatically handle closing
14:38 - the file for you which is exactly what's
14:40 - going to happen here so now what I do is
14:42 - I create a new writer using the CSV
14:44 - dictionary writer we pass the CSV file
14:46 - we want to write to and the different
14:47 - field names that we have so it knows how
14:49 - to take the data from our dictionary and
14:52 - kind of associated with the correct
14:54 - column and then we use writer. WR row
14:56 - and we add this new entry there are
14:58 - various other ways that we can write to
14:59 - the CSV file but this is one of the best
15:01 - practice ways to do that okay so now
15:04 - that we've done that let's test using
15:06 - this method so we're going to say CSV do
15:08 - add entry and what we need to pass here
15:11 - is a date amount category and
15:12 - description so let's give a date of
15:14 - maybe 20 07
15:17 - 2024 let's give an amount of maybe
15:23 - 12565 let's give a category of income
15:26 - let's give a description of Sal
15:29 - okay so let's just test if this works by
15:31 - running our code so I'll bring up my
15:33 - terminal and go Python 3 main.py it says
15:36 - entry added successfully and if I go
15:38 - here to my CSV file you can see that the
15:40 - entry has now been added great that is
15:43 - all working and now we have the two kind
15:45 - of main functions we need for our CSV
15:48 - file we have initializing the CSV file
15:50 - and then adding our entry now the next
15:52 - thing I want to do is make it so that
15:53 - from our command line we can ask the
15:56 - user for these various entries and then
15:58 - add it in into the file that way we
16:00 - don't need to just manually write them
16:02 - here we can actually have a program that
16:04 - will continually ask the user if they
16:05 - want to add more entries and they can
16:07 - add it directly from the command line
16:08 - giving us a nice interface to work with
16:10 - the CSV file so let's go over now to our
16:12 - data entry file and the reason I created
16:15 - this new file is so that I have a place
16:17 - where I can write all of the functions
16:18 - related to getting information from the
16:21 - user so that our main file here stays a
16:23 - little bit cleaner and I'm going to show
16:25 - you how we can import those different
16:26 - functions from this file so that again
16:28 - we can kind of organize our code a
16:30 - little bit better so inside of this file
16:32 - I'm going to say from date time import
16:35 - date time and now we're going to write a
16:37 - few different functions now I like to
16:38 - just stub the functions that means just
16:40 - write the um kind of function definition
16:43 - before i' write them all out so we know
16:44 - exactly what we need so the first
16:46 - function we're going to have is get date
16:49 - now when we get the date I'm going to
16:50 - take in a prompt and I'm also going to
16:52 - take in an allow default equal to false
16:57 - now what we're doing here with these
16:59 - different parameters is we're having a
17:00 - specific prompt this prompt is what
17:02 - we're going to ask the user to input
17:04 - before they give us the date the reason
17:06 - why I'm doing this is that we can be
17:07 - getting the date in multiple different
17:09 - places and we may be asking for the date
17:11 - for a different reason so we want to
17:13 - have a different prompt so that this
17:14 - function is a bit more Dynamic now allow
17:16 - default is going to tell us if we should
17:18 - have the default value of today's date
17:21 - the reason why I'm doing this is I want
17:23 - someone to be able to just hit enter and
17:25 - by default it will just select the
17:26 - current date so they don't need to enter
17:28 - the date if the date is today because
17:30 - that's probably a common uh entry method
17:32 - using today's date so if they set this
17:34 - to true then we will allow um kind of
17:36 - the default to be passed okay so that's
17:39 - get date now as well as getting the date
17:41 - we're going to need to get the amount
17:43 - this is the amount of the transaction so
17:45 - I'm going to say pass here next we're
17:47 - going to say Define getor
17:51 - category again we're just going to write
17:53 - pass and then we're going to say get the
17:55 - description like this and we're going to
17:58 - write pass okay so again this is kind of
18:01 - how I like to start so I know the
18:02 - different functions that I need to write
18:04 - and then I can just write them one by
18:05 - one and sorry let me just fix this so it
18:07 - says get description not just
18:09 - description okay so let's start with get
18:11 - date what I'm going to do is say my date
18:14 - uncore string is equal to the
18:18 - input with the prompt so whatever the
18:21 - prompt is was P this function we're
18:22 - going to use that here and then we're
18:23 - going to get some kind of date string
18:26 - now I'm going to say if allow default
18:29 - and not date string then I'm going to
18:33 - Simply return the date time dot today
18:38 - this is going to give me a datetime
18:39 - object in Python but I actually want to
18:41 - convert this to a string so I'm going to
18:43 - say dot St Str and then F time this
18:47 - stands for string format time and I'm
18:49 - going to do percent D percent M and then
18:53 - percent and capital Y now for some
18:57 - reason this is not highlight
18:59 - I think this is okay though yes this
19:01 - looks fine to me and the reason why I'm
19:03 - writing this is that this is actually a
19:05 - format to specify uh the way we want to
19:07 - get our date so in this case we want to
19:09 - have date month and then year so it's
19:12 - going to take today's date which we're
19:13 - getting here and then format it in this
19:15 - format now we're going to return this in
19:17 - the situation where we are allowed the
19:19 - default and the user didn't type
19:21 - anything in so I'm saying okay if they
19:23 - didn't give us any input so if they just
19:25 - hit enter and moved kind of to the next
19:27 - line and we're allowing the default then
19:30 - it's okay we can simply return this
19:32 - otherwise what we want to do is we want
19:35 - to try to validate the date to make sure
19:37 - that what they gave us is valid because
19:39 - we don't want to obviously allow them to
19:41 - enter something that's invalid so I'm
19:42 - going to say try and I'm going to try to
19:45 - create a valid date so I'm going to say
19:47 - valid date is equal to datetime and this
19:50 - is going to be dot St and then P time
19:55 - and same thing we're going to take in
19:57 - now the date string whatever the user
19:59 - entered and we're going to use this
20:01 - format okay so let's paste this right
20:04 - here so what we're saying is okay let's
20:06 - take in the date string let's use this
20:08 - format and let's try to convert this
20:10 - into a datetime object that's valid
20:13 - that's all we're doing now if this line
20:15 - works we can move on to the next line
20:17 - where we're just going to return the
20:18 - valid date and then we're going to copy
20:20 - this line right here and again we're
20:21 - going to format it using this because
20:23 - what we're kind of doing is we're taking
20:25 - whatever they typed in we're converting
20:27 - this into a date timee object at least
20:29 - we're attempting to do that using this
20:31 - format and then since we now have the
20:33 - daytime object we now need to kind of
20:35 - convert that back into the string
20:37 - representation and this will make sure
20:38 - that it cleans up the date that the user
20:40 - typed in and gives it to us in the
20:42 - format that we need now that's only if
20:45 - this works obviously that's why we're
20:46 - putting it in a TR statement it's
20:48 - possible the user can type something
20:50 - like hello and obviously that's not a
20:51 - valid date and well that's going to
20:52 - crash our code so that's why we now are
20:54 - going to have an accept block so if this
20:57 - TR statement does not work work and it
20:59 - would not work because we have a value
21:01 - error then what I'm going to do is just
21:03 - print out the following I'm going to say
21:05 - invalid
21:07 - date format please enter the date in and
21:12 - then I'm going to tell them it should be
21:13 - day day month month year year year
21:16 - format and that's actually the exact
21:19 - format that we're specifying here when
21:20 - we do day month year great then we're
21:24 - going to return and we're just going to
21:26 - call this function again so we're going
21:28 - to say get this
21:29 - and then we're going to call it with the
21:30 - same thing prompt and allow default now
21:33 - this is what's known as a recursive
21:34 - function which means we're just going to
21:36 - keep doing this we're going to keep
21:37 - calling this get date function until
21:39 - eventually we don't hit this case so
21:41 - they do give us a valid date in which
21:43 - case we're just going to return either
21:44 - today's date or whatever the date is
21:46 - that they entered so again what will
21:48 - happen is if they give us an invalid
21:49 - date we're just going to call the
21:50 - function again and then return that
21:52 - result which means now we go back in
21:54 - here if it doesn't work again same thing
21:56 - we go into the recursive case again and
21:58 - we'll just keep going until eventually
21:59 - they give us a valid date now what I'm
22:02 - realizing here is that we have a bit of
22:03 - repetition with the format so I think
22:05 - I'm just going to create a variable I'm
22:06 - going to say format and we'll just call
22:09 - this date format because I believe
22:11 - format is a reserved word I'm going to
22:13 - paste that right here and we'll just
22:15 - replace here the date format in case we
22:18 - want to change that later now we only
22:20 - need to change one variable rather than
22:22 - changing three strings in three places
22:26 - okay so there we go now we're using our
22:27 - date format great now that we have get
22:30 - date let's go to get amount so for get
22:33 - amount we are going to do a try
22:34 - statement and we're going to say the
22:36 - amount is equal to and we're going to
22:38 - try to convert the input into a float
22:41 - because they could give us a decimal
22:43 - value which is a floating point value so
22:44 - we're going to say enter the amount
22:47 - colon and then make sure you have a
22:48 - space just so that there's some room for
22:49 - the user to type we're going to say if
22:51 - the amount is less than or equal to zero
22:54 - because we don't want them to enter a
22:55 - negative amount then I'm going to raise
22:57 - a value error and I'm going to say
23:00 - amount must be a non negative non zero
23:06 - value okay because we don't want them to
23:08 - enter zero because there's no point of
23:09 - having a zero value transaction and we
23:11 - don't want them to give us a negative
23:12 - value because we're only taking
23:14 - positives now if all of that works we
23:16 - can return the amount otherwise we will
23:18 - accept on the value error as e and then
23:22 - we're going to print e and again we're
23:25 - going to return the get amount okay
23:28 - we're going to keep calling this
23:29 - function until they give us a valid
23:31 - amount hopefully that makes sense we're
23:33 - trying to convert this to a float it's
23:35 - possible that this conversion doesn't
23:36 - work in which case we'll immediately go
23:38 - here otherwise if they do give us a
23:40 - valid number we make sure that is non
23:42 - zero and non- negative and then we can
23:44 - return it okay good next we're moving on
23:47 - to get category now we're going to say
23:51 - category is equal to the input and for
23:54 - the prompt here we can say enter the
23:57 - category and we're going to go I for
24:01 - income let's make this
24:03 - capital and and we'll say or E for
24:09 - expense if we want we can quote these
24:11 - with single quotation marks which is
24:13 - what I'm actually going to do here so
24:14 - it's a little bit more clear and notice
24:16 - I can use the single quotation marks in
24:18 - here because I have double quotation
24:19 - marks surrounding the entire prompt if I
24:21 - tried to put a double quotation mark
24:22 - here notice we're going to get an error
24:24 - because it's closing the string off too
24:25 - early okay then we're going to put a CO
24:27 - in and a space so they have some room
24:29 - and we're going to convert this to
24:30 - uppercase so if they type in a lowercase
24:33 - i or a lowercase e this will still work
24:35 - let's zoom out out a bit sorry so we can
24:37 - read this whole line now what I need to
24:39 - do is I need to make sure that they
24:40 - typed in either I or E so actually to do
24:43 - that I'm going to make a variable up
24:45 - here I'm going to call this categories
24:48 - and this is going to be equal to a
24:50 - dictionary I'm going to have an
24:51 - uppercase i and this is going to be
24:53 - mapped to income and I'm going to have
24:55 - an uppercase E and this is going to be
24:56 - mapped to expense
24:59 - okay now we're going to go here to
25:02 - category and we're going to say if the
25:05 - category so what they typed in is in the
25:09 - categories then this is valid so we can
25:12 - simply return and then we're going to
25:14 - return categories at the Key of category
25:17 - so rather than returning I or E we're
25:19 - going to return income or expense and
25:22 - notice we've set this up so now we can
25:23 - add multiple categories later to this if
25:26 - we want to okay and then then otherwise
25:28 - so if that's not the case we're going to
25:30 - have an lse statement and actually we
25:32 - don't need the else statement we can
25:33 - just write it beneath because we have
25:35 - the return here and we can say print
25:39 - like this
25:41 - invalid category and then please enter
25:45 - and then this will be again in single
25:47 - quotation marks I for income and or not
25:54 - and E for expense
25:58 - perfect and then same thing return get
26:03 - the category okay so we doing this
26:04 - recursively until they give us a valid
26:07 - category now the last one is really
26:09 - really easy for getting the Des
26:10 - description we're just going to return
26:12 - and input and since the description is
26:14 - optional we're just going to say enter a
26:17 - description they can type anything they
26:20 - want here because this will be optional
26:22 - okay so now we have our four functions
26:24 - get date get amount get category and get
26:27 - description now we're going to use them
26:29 - from our main file so to do that we're
26:31 - going to go to Main and we need to
26:32 - import them from the file we just wrote
26:35 - so to do that we're going to say from
26:37 - and then the name of our file is data
26:38 - entry so we say from data entry import
26:42 - and then we write the name of our
26:43 - functions so get amount get category get
26:47 - date and get description doesn't matter
26:49 - the order in which you type them perfect
26:52 - now what we're going to do is write a
26:53 - function here that will call these
26:55 - functions in the order that we want in
26:57 - order to collect our data so we're going
26:59 - to say Define add inside of here we're
27:03 - going to begin by initializing the CSV
27:05 - file so we're going to say CSV do
27:06 - initialize CSV and now we're going to
27:09 - get these values so we're going to say
27:11 - the date is equal to get uncore date
27:15 - we're going to say the
27:16 - amount is equal to and this is going to
27:19 - be get the amount for our date by the
27:22 - way just before I forget we're going to
27:23 - say enter the date of the transaction
27:28 - and we'll just put the format we want so
27:30 - day day month month year year year okay
27:34 - and then we'll
27:36 - say um we want something to say that you
27:39 - have the default value so I'm going to
27:41 - say enter the date of the transaction or
27:44 - enter for today's date okay so we'll go
27:48 - with that that's fine and I think we
27:50 - need this here so let's add that and in
27:52 - terms of allow default we're going to
27:54 - say allow default is equal to true so we
27:56 - will allow the default value of today
27:59 - okay now we're going to get the amount
28:00 - that doesn't need any parameters we're
28:02 - going to get the category that does not
28:04 - need any parameters as well and we're
28:06 - going to get the
28:08 - description that does not need any
28:10 - parameters okay once we get these four
28:12 - values we know they're valid because
28:14 - they will have been validated by the
28:15 - data entry functions so now I can simply
28:18 - say CSV Dot and then add entry and now
28:21 - we just pass the value so date amount we
28:24 - got to spell this correctly category and
28:27 - description
28:29 - okay so now we can test this so rather
28:31 - than having these two lines we can just
28:32 - call the ad function let's run our code
28:35 - and let's make sure that this is working
28:38 - okay so enter the date of the
28:39 - transaction or uh or enter for today's
28:42 - date okay Enter the amount let's go with
28:46 - 125 we're going to go with income and
28:49 - description I will go with side gig okay
28:53 - it says it was entered successfully so
28:55 - let's go to finance data and you can see
28:57 - that now we have this entry and it has
28:59 - been added great that is working well
29:02 - okay so let's clear this and now let's
29:04 - move on to the next step which is to
29:06 - kind of make this a little bit prettier
29:08 - in terms of getting all of the input and
29:10 - also to allow us to view a summary of
29:12 - all the different transactions and
29:13 - eventually to actually plot those on the
29:15 - graph so let's go back to this CSV file
29:19 - here and let's add another method so
29:21 - we're going to say add class method
29:23 - because again this is just going to be
29:24 - associated with the class and this is
29:25 - going to be something that can give us
29:27 - all of the trans actions within a date
29:29 - range so we're going to say Define
29:32 - getor transactions and we're going to
29:35 - take in the class a start date and an
29:39 - end date because in order to get the
29:40 - transaction so we need to know the start
29:41 - and we need to know the end now the
29:43 - first thing we're going to do is read in
29:44 - our CSV file so we're going to say
29:47 - dataframe is equal to pd. read CSV and
29:51 - we're going to read the CSV file which
29:54 - with is the CLS dot CSV file name
29:58 - okay now that we have read this in what
30:01 - we're going to do is we're going to
30:03 - convert all of the dates inside of the
30:05 - date column to a datetime object so that
30:09 - we can actually use them to kind of
30:10 - filter by different transactions bear
30:12 - with me this is going to seem a little
30:14 - bit complicated just trust me it will
30:15 - make sense at the end after I can
30:17 - explain it line by line so we're going
30:19 - to say the data frame at date now notice
30:23 - that I can do this when I work with a
30:24 - panda's data frame I have the ability
30:27 - not just to access the individual rows
30:29 - but to access all of the columns which
30:31 - makes it very useful so when I say DF at
30:34 - date I'm actually accessing all of the
30:36 - different values in the date column okay
30:39 - so I'm saying data frame at date and
30:40 - what I'm going to do is change these
30:42 - values so I'm going to say pd. 2or dat
30:47 - time and I'm going to take in all of the
30:50 - values in the date column again and I'm
30:53 - going to specify that the format we want
30:56 - is and then the format that we had which
30:58 - is percent D percent M and percent y now
31:04 - we're going to use this a lot so again
31:05 - we'll put this in a variable it's a
31:07 - little bit redundant that we have the
31:09 - variable in two places but for this
31:11 - purpose or for this project it's fine so
31:13 - I'm just going to put in the CSV file
31:15 - here format is
31:18 - equal to
31:21 - this okay and we'll remove the date
31:23 - format and now we have that in here so
31:25 - we can just use this so I'm going to say
31:27 - CS
31:28 - v. format so we'll use that okay so now
31:32 - we've just converted all of the dates in
31:33 - this date column to that format again
31:35 - the reason we're doing this is just to
31:37 - ensure that they're going to be in the
31:38 - correct object so that we're able to
31:40 - actually sort by them and to kind of
31:42 - find the correct dates because we don't
31:44 - necessarily know what will be stored in
31:46 - this column even though our code is
31:48 - adding it in the correct format this is
31:50 - kind of converting it to a datetime
31:52 - object which gives us some other
31:53 - properties that allow us to um kind of
31:55 - sort by it and use it okay now we're
31:58 - going to say the
31:59 - startor date is equal to date time.
32:06 - STP time okay and we're going to take in
32:10 - the start date and
32:13 - the CSV do format the reason for this is
32:17 - that the start date that's given to us
32:19 - is going to be a string so since it's a
32:20 - string again we want to convert it into
32:22 - the correct format now let's copy this
32:25 - line and just change this with the end
32:27 - date so that we convert these into
32:29 - datetime objects okay so end date and
32:31 - then end date like this and by the way
32:34 - if you're a bit confused don't worry
32:35 - working with dates and times is always
32:37 - very confusing even for experienced
32:39 - programmers all of the stuff you can
32:40 - find in the documentation you can even
32:42 - read here it says new date time pars
32:44 - from a string so what we're doing is
32:45 - just taking a string and then parsing it
32:46 - as a datetime object again so that we
32:48 - can use the properties of a datetime
32:50 - object that allow us to kind of filter
32:51 - by and search for different dates okay
32:54 - now what we're going to do is create
32:55 - something known as a mask now a mask
32:57 - askk is something that we can apply to
32:59 - the different rows inside of our data
33:01 - frame to see if we should select that
33:03 - row or not so bear with me while I write
33:06 - this I'm going to say mask is equal to
33:09 - and we're going to put inside a
33:10 - parenthesis data frame date okay this is
33:14 - going to be greater than or equal to the
33:17 - start date we're going to use the and
33:19 - symbol so not writing and but actually
33:21 - using the and which stands for bitwise
33:24 - and and we're going to say data frame
33:27 - date
33:28 - less than or equal to the end date now
33:31 - what this is doing is checking if the
33:34 - data in the current Row in the column
33:37 - date is greater than the start date and
33:39 - if the data or the date in the current
33:41 - row that we're looking at is less than
33:42 - or equal to the end date the reason why
33:45 - we can do this comparison is because we
33:47 - have all of the values now as datetime
33:49 - objects and we have the start date and
33:51 - the end date as a datetime object so we
33:53 - can actually compare them using the less
33:55 - than and greater than symbols which we
33:56 - couldn't do before if they were simply
33:58 - strings now this symbol you see right
34:00 - here is known as the bitwise and I don't
34:03 - want to explain it a ton but it's pretty
34:04 - similar to the end right here we just
34:07 - use this when we're working with the
34:08 - panda data frame and The Mask
34:10 - specifically so just make sure you have
34:12 - this here and again what this is going
34:14 - to do is just apply this to every single
34:16 - row inside of our data frame and it's
34:18 - going to kind of filter the different
34:20 - elements so let me show you that I'm
34:21 - going to say filtered data frame is
34:24 - equal to DF dolo okay and inside of here
34:29 - we're going to pass the mask what this
34:31 - is going to do is return to us a new
34:33 - data frame a filter data frame that only
34:36 - contains the rows where this was true
34:40 - where the date was greater than or equal
34:41 - to start date and the date was less than
34:43 - or equal to the end date you don't have
34:44 - to understand exactly how this is
34:46 - working this is kind of a fancy feature
34:47 - of pandas but what it's doing again is
34:50 - kind of locating all of the different
34:51 - rows where this mask matches and you
34:54 - could obviously create a more
34:55 - complicated mask but this is what we
34:56 - want for now okay so now that we have
34:59 - that we're going to go down here and
35:01 - we're going to say if the filtered data
35:04 - frame. empty so just checking if there's
35:07 - nothing in it then what I'm going to do
35:08 - is say print no
35:11 - transactions found in the given date
35:15 - range okay otherwise we're going to go
35:19 - into this block right here where we
35:21 - start printing out all of the different
35:23 - transactions and start creating a
35:24 - summary of those so we're going to start
35:26 - with a print statement here here and
35:28 - we're going to say transactions from
35:31 - we're going to make this an F string
35:33 - available in Python 3.7 and above and we
35:36 - are going to say
35:38 - startor dat do string format time and
35:42 - we're going to do the format that we've
35:44 - used before so CSV do format what this
35:47 - is going to do is take our start date
35:48 - and just convert it into this format
35:50 - when we print it out because now we have
35:52 - the datetime object and we're converting
35:53 - it back to a string we're going to say
35:55 - two and then this is going to be the end
35:58 - dat do string format time and then we're
36:01 - going to take in the CSV do format as
36:06 - well okay let's save that so we're just
36:09 - kind of printing this out at the
36:10 - beginning as a header saying hey we're
36:11 - about to show you the transactions in
36:13 - this range and now we're going to print
36:15 - all of those out so we're going to say
36:16 - print and we're going to use our data
36:18 - frame to do this so we're going to say
36:20 - filtered data frame. 2or string this is
36:24 - a method that will just take the data
36:25 - frame so all of the different entries
36:27 - that are inside of it again these are
36:28 - filtered now just the transactions that
36:30 - we want and convert it into a string
36:32 - that we can print we're going to say
36:33 - index is equal to false and we're going
36:36 - to say formatters and now what we can do
36:38 - is specify if we want to format any
36:41 - specific column and we do we want to
36:43 - format the date column so we're going to
36:44 - say date inside of a python dictionary
36:47 - right here so we put the column name as
36:49 - the key and then we put a function that
36:51 - we want to apply to every single element
36:54 - inside of that column if we want to
36:56 - format it differently so the function
36:58 - here is going to be Lambda X and then x.
37:01 - string format time and then we're going
37:04 - to use our format CSV do
37:08 - format okay let me save that now let's
37:10 - just quickly look at this before we go
37:12 - any further so we're saying filter data
37:13 - frame. twring don't worry about the
37:16 - index and then we're using formatters
37:18 - now we pass a python dictionary and if
37:20 - we want to format all of the values
37:21 - inside of the date column then we pass
37:24 - date as the key and we need to pass a
37:26 - function and this function fun will be
37:28 - called with all of the entries from our
37:30 - date column so for example these two
37:32 - right 207 20 24 0707 20 24 whatever the
37:36 - dates are they're going to be passed to
37:38 - this function this is a oneline
37:40 - Anonymous function known as a Lambda
37:41 - function they'll be passed as the
37:43 - parameter X these are going to be
37:45 - datetime objects because we've converted
37:48 - all of the entries in the date column to
37:49 - a datetime object so we're then going to
37:51 - format them so we're going to say string
37:53 - F time with the format so when we print
37:56 - them out we get a nice pretty string
37:58 - okay that's what that's doing now we can
38:01 - go and we can find the total income and
38:03 - the total expense and print those out so
38:05 - we're going to say total income is equal
38:08 - to the filtered data frame and what
38:10 - we're going to do is we're going to look
38:13 - in the filter data frame and we're going
38:15 - to say category is equal to income so
38:20 - this is kind of similar to how we use
38:22 - the mask before we're saying the filter
38:24 - data frame and then what we want to do
38:26 - is we want to get all of rows where the
38:28 - category is equal to income then once I
38:32 - have those rows I want to get all of the
38:35 - values in the amount column and I want
38:37 - to sum those again a feature of a pandas
38:40 - data frame if you haven't worked with
38:41 - pandas before understand this looks a
38:42 - little bit confusing because this
38:44 - doesn't work like a normal list this is
38:46 - a lot different than a list in fact
38:48 - which looks confusing because the syntax
38:50 - is different but we're saying filter
38:51 - data frame again we're getting all of
38:54 - the rows in this data frame where the
38:56 - category is equal to income
38:58 - then from all of those rows we're
38:59 - looking at all of the values in the
39:01 - amount column and then we're summing
39:03 - those so now we're going to do the same
39:05 - thing for the expense so we're going to
39:07 - say
39:08 - total expense is equal to the filter
39:12 - data frame we're going to have the
39:14 - filter data frame category and then
39:17 - equal to expense and then same thing
39:20 - we're going to take the amount and we're
39:23 - going to sum it now we can print this
39:25 - out so we're going to say print
39:27 - I'm going to print a back sln just that
39:29 - we go down one line so that we have a
39:31 - bit of Separation I'm going to say
39:33 - summary and then I'm going to print the
39:35 - total income and total expense okay so
39:38 - I'm going to say total income and this
39:40 - is going to be an F string so that we
39:43 - can do some formatting we're going to
39:44 - put a dollar sign here and then inside
39:46 - of curly braces we're going to say total
39:48 - uncore income now what I want to do is I
39:51 - want to make sure that this gets
39:53 - formatted to two decimal places so I'm
39:55 - going to put a colon and then do 2 F if
39:58 - you've never seen this before what it
39:59 - will do is just round to two decimal
40:01 - places so that we're going to only show
40:04 - at most something like you know 5 67. 89
40:07 - we won't show that third decimal place
40:09 - we'll just round it off okay so that's
40:11 - what that's doing kind of a useful
40:13 - feature of the FST string next we're
40:15 - going to say print and then we're going
40:16 - to do an FST string again this is going
40:19 - to be the total
40:22 - expense okay we're going to do a dollar
40:25 - sign and then say total expense and then
40:27 - same thing colon.
40:29 - 2f and now we're going to print the net
40:32 - savings so we're going to say print F
40:36 - and then
40:37 - net savings okay now we're going to do a
40:40 - dollar sign and we're going to do a
40:42 - subtraction so we're going to say total
40:44 - uncore income minus total expense now
40:48 - I'm going to put this inside of
40:49 - parenthesis just so that I can format
40:50 - this value and then I'm going to do
40:52 - colon.
40:54 - 2f okay so that's pretty much it and
40:57 - then from here I'm just going to return
40:59 - the filter data frame the reason for
41:02 - that is we then will be able to actually
41:03 - create a plot or a graph using the data
41:06 - frame now that we have it filtered okay
41:08 - so I understand a little bit confusing
41:10 - especially if you haven't worked with
41:11 - pandas before we read this in as a data
41:13 - frame we take the date column and
41:15 - convert it to datetime objects we
41:16 - convert the start date and the end date
41:18 - to datetime objects because they're
41:20 - going to be strings we create a mask
41:22 - which will be used to filter the
41:23 - different rows inside of our data frame
41:25 - we apply that mask using the loc
41:28 - function the lock function we then have
41:30 - a filter data frame if it's empty we
41:32 - just print out that there was no
41:33 - transactions let's add a period here
41:35 - otherwise we print out a transaction
41:37 - summary okay so now we need to actually
41:40 - call this and test it out so let's make
41:43 - a new function call here and we'll say
41:45 - CSV Dot and we're going to go with get
41:49 - transactions now for us to be able to
41:51 - get all of these transactions we just
41:52 - need to put something within this range
41:54 - so let's go with something like like 01
41:58 - 01 2023 is the start date and then we'll
42:02 - just go with a big end date so we can go
42:03 - like 30
42:05 - 07
42:07 - 2024 okay let's see I think that's all
42:10 - we need to pass here so those are our
42:12 - two strings CSV doget transaction okay
42:14 - let's bring this up and let's run our
42:17 - code and you can see that we get all of
42:19 - the different transactions so
42:20 - transactions from these two dates we
42:21 - have date amount category description it
42:23 - prints them out very nicely and then we
42:25 - get a summary total income total expense
42:28 - net savings and it gives us all of those
42:30 - values all right so we're moving along
42:32 - quite nicely now what I'd like to do now
42:34 - is make it so that we have kind of a
42:36 - nice way to input or to work with this
42:39 - program or to work with these different
42:40 - functions where we have kind of a main
42:42 - functions running constantly saying hey
42:44 - do you want to add a new transaction do
42:45 - you want to view transactions what do
42:47 - you want to do and then prompting us for
42:48 - the correct data so rather than having
42:50 - to write these functions here we can
42:52 - just use the command line and interact
42:54 - with our personal finance tracker so to
42:56 - do that I'm going to make a function
42:58 - called Main and we're going to define a
43:00 - while loop so I'm going to say while
43:01 - true and what we're going to do is print
43:03 - out the various options that the user
43:05 - has so we're going to start with just a
43:07 - back sln so there's a little bit of
43:09 - separation and we're going to say one
43:11 - dot add a
43:12 - new transaction okay so that's the first
43:15 - thing that we can do print and then
43:17 - we're going to do two Dot and this is
43:19 - going to say
43:20 - view
43:22 - transactions and a summary within a date
43:26 - right range okay and let's just go and
43:29 - summary then we're going to say print
43:32 - and the third option will just be to
43:34 - exit and then obviously later on if we
43:35 - have more features we can add them here
43:37 - we're going to say choice is equal to
43:40 - input and we're going to say enter your
43:43 - choice and we're going to assume the
43:45 - user is just going to type in a number
43:47 - one through three so we'll give them
43:48 - those options here now we're going to
43:50 - say if the choice is equal to one then
43:53 - they want to add a new transaction so if
43:55 - they want to add a new transaction we
43:57 - can just call the add function that we
43:59 - wrote here so they can add a new
44:01 - transaction okay we're going to say l if
44:03 - the choice is equal to two then what we
44:07 - need to do is we need to get a start
44:08 - date we also need to get an end date uh
44:11 - and then we need to get the transactions
44:13 - so we're going to say startor date is
44:16 - equal to get date now for this we're
44:19 - going to say enter the start date we're
44:22 - not going to allow them to enter the
44:24 - default value so we'll just leave that
44:25 - false but we'll give them the format
44:27 - that we want them to enter it in okay
44:30 - now let's do the same thing for the end
44:32 - date this is equal to get the date and
44:36 - let's copy this prompt and just change
44:38 - this to say the end date okay so here
44:42 - and then this will be the end date great
44:45 - so now we have the start date and the
44:46 - end date now we need to pass it to our
44:49 - file so we're going to say CSV Dot and
44:52 - this is get transactions and we're going
44:54 - to pass the start date and the the end
44:57 - dates okay now we're also just going to
44:59 - say data frame is equal to this because
45:01 - we're going to use the data frame later
45:02 - if we want to plot this on a graph and
45:05 - then otherwise we're going to say l if
45:07 - Choice equals 3 well that means they're
45:10 - going to exit so we're going to say
45:12 - print
45:14 - exiting dot dot dot and then we're going
45:17 - to say break so we're going to break out
45:18 - of the wall Loop and then lastly else we
45:22 - are going to say print we're going to
45:24 - say
45:25 - invalid Choice enter 1 2 or three okay
45:32 - period and that should be it now we just
45:35 - need to call this function so we're
45:36 - going to say if underscore name equals
45:38 - equals uncore uncore maincore uncore
45:41 - then we're going to call Main now the
45:44 - way that this works is that if we run
45:46 - this file directly this line will
45:48 - execute and we'll call the main function
45:50 - whereas if we import this file this will
45:52 - not run because the name is not going to
45:54 - be equal to main pretty much what this
45:56 - line is doing is protecting this code so
45:58 - that we don't run the main function
46:00 - unless we directly execute this file if
46:02 - we were to remove this and just call the
46:04 - main function even if we were to import
46:07 - something from this file then this main
46:09 - function would run which we don't want
46:11 - so just kind of a good practice and
46:12 - that's why I'm putting it here so let's
46:14 - quickly test this out and make sure that
46:15 - this is working and then we can move on
46:17 - to the graph part which is pretty cool
46:19 - so let's run our code and you can see it
46:21 - says add new transaction view
46:22 - transactions exit enter our choice let's
46:25 - go one enter the data of the transaction
46:26 - action so let's go 20 or let's go 19 um
46:30 - maybe
46:31 - 07 2024 the amount let's go with 3,000
46:36 - let's make this income let's just call
46:38 - this salary and then it says entry added
46:40 - successfully now maybe we want to view
46:42 - the transactions let's go with
46:47 - 0707
46:48 - 2024 uh let's go with 30 07
46:53 - 2024 okay you can see that it gives us
46:55 - our different transactions gives net
46:57 - income net expense and then our net
46:59 - savings and that is very good okay now
47:02 - let's try to exit and you can see that
47:04 - we can exit the program obviously we
47:06 - could make this look a little bit nicer
47:08 - but for now I think this is quite good
47:10 - and now we want to move on to actually
47:12 - creating the graph so the idea is after
47:15 - the user gets a list of different
47:17 - transactions we want to ask them uh if
47:20 - they want to plot it and they want to
47:21 - see it on a graph well in order for them
47:23 - to see it on a graph we need to make
47:25 - that graph and to do that we're going to
47:26 - use map plot lip so we're going to make
47:29 - a new function here and this is going to
47:31 - say
47:32 - plot
47:34 - uncore transactions this is going to
47:36 - take in a data frame the data frame is
47:39 - going to contain all of the transactions
47:41 - that we want to plot and we need to do a
47:43 - little bit of configuration here in
47:45 - order for this to work first things
47:46 - first we're going to say DF do setor
47:50 - index and we're going to make this the
47:52 - date now the index is the way in which
47:55 - we locate and manipulate different
47:56 - different rows so we're using the date
47:58 - column because that's how we want to
48:00 - kind of find different information we're
48:01 - also going to want to kind of sort by
48:03 - the date and find the correct
48:04 - information based on the date to create
48:06 - the plot I know seems a bit weird but
48:09 - we're going to say in place equals true
48:11 - which means we are going to modify the
48:13 - data frame in place when we set the
48:15 - index as the date again this allows us
48:17 - to kind of find different rows and
48:19 - entries using the date column and to
48:21 - have more efficient operations when
48:22 - we're working with the date okay now
48:25 - that we've done that what we need to do
48:26 - is create two separate data frames the
48:28 - income data frame and the expense data
48:30 - frame the reason for that is that I want
48:32 - to have income as one line and expenses
48:35 - as another line so I need to just have
48:36 - all my income and all my expenses in two
48:39 - separate kind of data sets or two
48:41 - separate data frames in this case so I'm
48:43 - going to say my income dataframe is
48:46 - equal to and we're going to start with
48:48 - the data frame and like before we're
48:50 - going to say data frame category is
48:54 - equal to income now this is good and
48:57 - right now this is going to give us the
48:59 - uh all of the sorry rows that are income
49:02 - so that's good however we need to do a
49:04 - few different things here in order to
49:06 - kind of shift this data frame into
49:08 - something that's going to be nice to
49:09 - actually plot on the graph the idea is I
49:12 - want to see a nice line where it's
49:13 - showing me even potentially zero income
49:16 - on different days so I might need to
49:18 - actually add more rows in where we have
49:21 - uh kind of missing dates I know this
49:23 - seems weird but if we look at this you
49:25 - can see that we have something on 20 7th
49:27 - and 19th the rest of the days we don't
49:30 - have anything so if we were to plot this
49:32 - we're just going to get three kind of
49:33 - dots or three disconnected lines what I
49:36 - want instead is I want to have all of
49:39 - the empty days be marked as zero so that
49:42 - we actually see the line going in the
49:44 - correct direction you'll see what I mean
49:46 - when we plot this out but it requires a
49:48 - bit of manipulation to this data so the
49:51 - first thing we're going to do is we're
49:52 - going to apply a resample to this and
49:55 - we're going to pass the value D so this
49:57 - stands for daily frequency so we're
49:59 - going to take our filter data frame with
50:01 - all of the transactions that we want
50:03 - we're going to look at them and we're
50:04 - going to make sure that we now have a
50:06 - row for every single day that's what
50:08 - resampling is doing it also allows us to
50:11 - aggregate different values that are on
50:12 - the same day I know a little bit
50:15 - confusing these methods are not super
50:16 - simple to understand but think of it as
50:18 - just kind of filling in all of the
50:19 - missing days that's really what
50:20 - resampling is doing now next what we're
50:23 - going to do is we're going to sum now
50:25 - what we're doing here is we're summing
50:27 - all of the different amounts so that's
50:29 - what sum is going to do is just going to
50:31 - take the values and add them together
50:33 - and now we're going to
50:35 - reindex and this is going to be with the
50:38 - data frame. index and we're going to say
50:40 - the fillore value is equal to zero now
50:43 - what this is doing here is making sure
50:45 - that the index is correct after we've
50:47 - applied these different operations so
50:49 - we've resampled which means we're pretty
50:51 - much filling in all of those additional
50:53 - rows and having our data be stored in
50:55 - Daily frequency we're summing our values
50:57 - when we sum our values we're going to
50:59 - aggregate the rows that have the same
51:01 - date and add their amounts together and
51:03 - then we reindex and when we reindex we
51:06 - just make sure that the data frame is
51:07 - going to conform to this index and we
51:10 - fill in any missing values with zero
51:12 - again I know a little bit confusing just
51:14 - trust me this works okay so let's save
51:17 - this and let's go with the next line
51:20 - here which is going to be the expense
51:22 - data frame which is going to be the
51:23 - exact same thing except the category is
51:26 - simply expense so now we have a data
51:29 - frame for our income and for our
51:31 - expenses and the next thing we need to
51:33 - do is create a plot using map plot lib
51:36 - where we can actually uh put this
51:37 - different data so we're going to go to
51:39 - the top of our program here and we're
51:40 - going to say from actually not from
51:42 - we're going to say import matplot li.
51:45 - pyplot as PLT okay very uh common import
51:50 - here now what we'll do is we'll start
51:52 - creating a plot so we're going to say
51:54 - PLT do figure
51:57 - figure is uh kind of setting up the
51:59 - screen or the canvas where we're going
52:00 - to actually be putting the graph and we
52:02 - can specify the size that we want so
52:04 - we're going to say the figure size is
52:06 - equal to 10 and 5 okay you can change
52:10 - the size later if you want and now we
52:12 - can plot the different lines or in this
52:14 - case the different data frames that we
52:16 - have so we're going to say PLT do plot
52:19 - and we're going to plot the income data
52:22 - frame and we're going to plot the index
52:25 - the index means we're plotting the date
52:27 - pretty much then we're going to say the
52:30 - income undor data frame and the amount
52:34 - so what we're using as the x axis is the
52:36 - index so all of the different dates what
52:38 - we're using for the y- AIS or the value
52:40 - is the amount then we can give this a
52:43 - label and we're going to say that this
52:44 - is income and we can specify the color
52:47 - and if we go with G that just stands for
52:48 - green now we can do the same thing for
52:51 - our expense so we're going to say this
52:52 - is the expense data frame. index which
52:55 - again is the
52:57 - we then are going to say this is the
52:59 - expense data frame and the amount we
53:03 - will give this a label which is equal to
53:06 - expense and we'll give this a color
53:09 - which can be r or red okay now we can
53:13 - just do a few labels so we're going to
53:15 - say PLT dox
53:18 - label and this is going to be the date
53:21 - then we can give this a y label so we're
53:22 - going to say PLT doy label and this is
53:26 - going to be the amount we then will give
53:29 - this a title so PLT do title and we can
53:32 - say income and expenses over time feel
53:37 - free to change this if you want we'll
53:39 - say PLT do Legend when we do this it
53:41 - enables The Legend So we are going to
53:43 - see the labels for our different uh
53:45 - colored lines and then we're going to
53:47 - say pl. grid this enables the grid lines
53:50 - so we're going to specify that as true
53:52 - so we can more easily see where our
53:53 - values line up and then lastly PLT do
53:56 - show this actually takes the plot and
53:58 - shows it on the screen so plot
54:00 - transaction should now work what I'm
54:02 - going to do lastly is I'm going to go
54:04 - here to where I have my choice and I'm
54:06 - just going to say if input do you want
54:09 - to see a plot question mark and we'll
54:12 - say Y no and this is going to be dot
54:16 - lower is equal to Y then we will simply
54:20 - call that function which is plot
54:21 - transactions and we will pass that
54:23 - filter data frame okay so I'm just
54:25 - asking them hey do you want to see this
54:27 - converting it to lowercase if they type
54:29 - in yes or why then we will plot this and
54:32 - it should show the graph okay so let's
54:35 - test this out but actually before we
54:36 - test this out I'm just going to fill
54:38 - this with some sample data so that it
54:40 - looks a little bit more full so I just
54:41 - added a bunch more entries here into my
54:44 - CSV file I actually just used chat GPT
54:46 - to generate a bunch of them for me so it
54:48 - was really really fast and you can see
54:50 - that we're going from kind of the 1st to
54:53 - the 31st of uh what is this July so
54:56 - those are kind of the dates that we can
54:57 - choose from all right so let's run our
54:59 - code now so let's go up here and run and
55:03 - let's view our transactions uh let's
55:05 - start at the 1 of January so 01 or not
55:08 - January sorry of July 2024 let's go
55:11 - maybe up into the middle so 157 2024 and
55:15 - you can see that it gives us a bunch of
55:17 - the different transactions we have total
55:18 - income 3,000 total expenses 9005 net
55:21 - savings 2145 do you want to see a plot
55:23 - yes of course we want to see a plot and
55:25 - then it brings us here and you can see
55:27 - that we get the plot now notice that we
55:29 - have a bunch of days where we have zero
55:31 - the reason again why we have that is
55:33 - because of the resampling that we did to
55:34 - the data frame so that we have this on a
55:37 - daily frequency so whatever the dates
55:38 - are this is giving us everything daily
55:41 - even though it doesn't quite look like
55:42 - it with the legend because it's skipping
55:43 - a few dates it is indeed doing that so
55:46 - there you go that is how this works we
55:47 - can test this out again with a different
55:49 - date range just to make sure so let's go
55:51 - to uh let's go maybe
55:54 - 03 uh 07 2 24 and let's go 30 07 2024 do
56:00 - you want to see a plot yes and when we
56:02 - come here you can see that we get a
56:04 - different plot now that's going from 03
56:06 - to 030 there you go guys that is going
56:10 - to wrap up this video so I know that a
56:13 - lot of this was a little bit confusing
56:14 - because you're learning about some new
56:15 - modules like map plot lib and pandas but
56:18 - I wanted to show you some more advanced
56:20 - features in Python and how you create a
56:21 - real usable application obviously
56:24 - there's a lot of more features that you
56:25 - would want to add this for it to really
56:27 - become super useful but this is a really
56:29 - solid base that you can extend and
56:31 - hopefully will act as a really good
56:32 - starter project and something you can
56:34 - turn into maybe even a resume project
56:37 - all of this code will be available from
56:38 - the link in the description if you need
56:40 - it if you enjoyed the video make sure
56:41 - you leave a like subscribe to the
56:43 - channel and I will see you in the next
56:45 - one
56:47 - [Music]

Cleaned transcript:

if you're looking to practice your python skills then you are in the right place today I'm going to be walking you through a python project that really will help you master the language not only does it cover a lot of the syntax in Python and some of the advanced features but it utilizes some very popular python modules so you can understand how to use this language to build a real practical project we're going to be building a personal finance tracker with the ability to track and log different transactions organize them get summaries of income and expenses and even view our data in a graph so we can see how much money we're making month over month this is a great project and let me show you a quick demo so you can see exactly what we'll build all right so I'm on the computer now and we'll start with a quick demo of the project so you can see here that we have a few different options we can add a new transaction or we can view transactions in kind of a summary within some range or we can exit so let's add a new transaction to start we're going to enter the date uh let's go with maybe 207 2023 let's enter the amount of the transaction $124 and then we have to classify if this is an income or expense so let's say this is an expense and then I can give this a description and maybe I'll say this erir groceries okay perfect now we've entered that transaction now what I can do is view some transactions and a summary within a range so I'm going to go with two now let's enter the start date let's go with maybe 01 07 20 24 and let's go with 20 07 2024 okay when I do that you can see that it gives me all of the different income and expenses that I have within that date range gives me a quick summary with the total income total expenses then the net savings or the net profit then I actually have the option to view this as a plot so I'm going to go ahead and press yes and you can see now that this actually opens up a chart and shows me all of the income and expenses over that date range now let's go back and I just want to show you that all of this data is stored within a CSV file so this could easily be imported into something like Excel or Google Sheets if you wanted to and this is kind of what we're using as the database for the project so you can see we have the date amount category and description obviously you can extend this and make it a lot more complex but this is a really great stter project and you're going to learn a significant amount from it now that is the project that will help you master the Python language just like I've mastered the segue to our sponsor i.net i.net is a decentralized cloud GPU Network that allows dormant gpus to be used by consumers if you have gpus that you're not using i.net provides a marketplace where consumers can utilize that compute and you can get paid i.net is based on the salana network and the io token its aim is to create the largest network of geod distributed gpus this network allows machine learning Engineers to access scalable distributed computer clusters at a fraction of the cost of centralized Services i.net is uniquely capable of creating clusters of tens of thousands of gpus whether they are collocated or Geo distributed whether you need compute power or have unused Hardware you can take advantage of this great Marketplace from i.net anyone can provide compute and at the moment i.net has over 148,000 verified gpus and over 43,000 verified CPUs available to use with the recent hype in the AI field more and more Engineers need this type of compute and i.net is providing it to them check out this great project by clicking the link in the description and now let's get into the video so let's go ahead and get started with this project now what I've done is created a new folder called personal finance tracker tutorial on my desktop and just open this up in Visual Studio code you can work in any editor or IDE that you want and I'm assuming for this project that you have some familiarity with python and you know how to for example open a new project create a folder Etc so just get a folder ready for writing this code now what we're going to do is install the different modules that we'll need for this project specifically we're going to need map plot lib and pandas these are the two modules map plot label will allow us to plot and see the graph and pandas will allow us to more easily kind of categorize and search for data within our CSV file so in order to install these we're going to type the following command that's pip install and then matap plot lib this is going to be in your terminal or your command prompt now if you're on Mac or Linux this will be pip three install map plot lib and after we install that I already have it installed so I'm just going to skip this we're going to install pandas now in case you get lost at any point in this tutorial all of the code will be available from the link in the description as well as a requirements file that specifies the few different modules that you need okay so at this point we should be good to go we have map plot lib and pandas and now we're going to create some files so the first file we're going to create here can just be main.py and I'm going to make another file called dataor entry. piy this is because I want to have one file that's going to kind of collect data from the user so it'll have all of our input statements it'll be validating different data and then a main file which will handle kind of the main flow of the program now for this program we're going to have a CSV file again comma separated values and that's going to act as our database so I want to begin by working with the CSV file so initializing it creating if it creating it s if it doesn't already exist and then looking at how we can add new entries into it and read data from it so let's start there after we work with the CSV file we're then going to have to be able to view different transactions so we can get kind of that summary list that we saw before we're also going to have to give some nice input or kind of a nice view to the user so they have the ability to interact with it from the terminal so a few different steps here but let's start with the CSV file so at the top of our program we're going to say import pandas as PD again pandas is going to allow us to actually load in the CSV file and work with it a lot easier we're then going to import the CSV module pretty straightforward what that will do and I'm going to say from date time import date time this is a module built into python which is going to help us work with dates and times which we're going to need for this project now what I'm going to do is I'm going to start by setting up a class which is going to have a few different methods that allow us to work really easily with our CSV file so I'm going to say class CSV and then inside of the class I'm going to create a variable I'm going to say CSV file is equal to and I'm going to give a name to the file we want to work with so I'm going to call this Finance data.csv V this is what's known as a class variable It's associated with the class and that makes sense because we're going to be using it just within this class which has some functions related to the CSV file now you don't need to make a class for this but I'm just trying to show you some more advanced python features hence why I'm doing this okay so the first thing we need to do is we need to initialize the CSV file that means that we need to read it in if it already exists or we need to create it if it doesn't already exist so we're going to create a method here I'm going to say aish all liore CSV this is actually going to be a class method so what I'm going to do is decorate this with the class method decorator so we're going to say at class method what this means is that this will have access to the class itself but it will not have access to an instance of the class if you're familiar with objectoriented programming when you create a new instance of the class we have some different properties on that instance in this case this class method um that we've defined is just having access to the class itself meaning I can access things like other class methods and the class variable that we defined here okay so I'm going to write CLS as the parameter that this will take and what we're going to do to start is we are going to try to read in the CSV file so we're going to say pd. read CSV and we're going to attempt to read the cs. CSV file okay so we're using this variable right here we're going to try to load this in and if that does not work so we're going to say accept on a file not found error then we're going to create the file so we're going to say data frame or DF is equal to PD this is our pandas module remember dot data frame and then this is going to be columns equal to and we're going to specify the four different columns we want to have inside of our CSV file now the First Column is going to be date the second column is going to be amount third column is going to be category and the last column is is going to be description okay let me zoom out a little bit so we can read this a bit easier now if you're a little bit confused here when we create a comma separated uh values file it kind of looks like this we start by having some headings or some columns so in this case date amount category and description then beneath that we have all of the different entries so maybe we have a dates like 207 2024 we have a category or an amount like 12 125 category income description and whatever this is the salary okay this is what the comma separated value file looks like we just have all of the different entries separated by commas pretty straightforward so that's what we're loading in using pandas so that's why I'm specifying The Columns that I'm going to have uh for this what do you call it data frame so that's why I'm specifying these are the four columns that I want to have and I'm putting this inside of what's known as a data frame now a data frame is an object within pandas that allows us to really easily access different rows and columns from something like a CSV file so what we're going to do is we're going to create this data frame and then we're going to actually export the data frame to a CSV file so we're going to say data frame. 2or CSV we're going to say that the name of the file we want is cs. CSV file and we're just going to say index equals false you don't need to worry about that too much right now but it just means we're not going to be sorting this um data frame or doing anything by indexing it okay so what we've done is created a pandas data frame with these four different columns we then have just converted this to a CSV file and what that's going to do is save a local file with this name in the same directory as this python file now what we can do to test this out is we can run this method so I can say CSV Dot and then initialize CSV so let's go ahead and run our code here so let me bring up my terminal and we will go Python 3 and then main.py and we should see that a new file is created with Finance dat. CS s v and it has our four different columns here now just as a sanity check we'll run this one more time and we should see that nothing new happens because the data frame already existed great so now that we've initialized the CSV file and we know that it does exist the next step is we want to actually add some entries to the file so I'm going to make another method here inside of the class I'm going to say at class method and this is going to say addore entry now to add an entry we're going to take in the class we're going to take in some date and amount a category and a description okay these are the four things that we really need when we're adding a new entry into the file and that lines up with our category names okay so for the add entry what we're going to need to do here is kind of use pandas or actually we're going to use what's known as a CSV writer to write into the file so the first thing we have to do is create the entry that we're going to be adding so I'm going to say my new entry is equal to and I'm going to specify all of the different columns associ ass with their values I'm going to say date is associated with the date I'm going to say the amount is associated with the amount I'm going to say the category and this is going to be with the category if we could spell that correctly and then description with the description let's just make sure we spelled this correctly looks good so we're storing this in a python dictionary and that's because we can use the python dictionary to just write into the correct columns uh when we use this CSV writer so you're going to see how this works I'm going to say with open I'm going to open my file which is CLS do CSV file I am then going to open this in append mode so when you put a this means that we're going to be appending to the end of the file we're not overwriting the file or deleting anything or making a new one we're just opening it and then putting the cursor at the very end of the file so we'll add to the end I'm then going to say new line is equal to and I'm just going to specify an empty string right here the reason for that is I don't want to add a new line character at the end when I open this file okay I'm then going to say as CSV file and inside of here we're going to specify our field names so we're going to say field names are equal to and actually it's going to be the same as our columns so what we should really do is we should store this in a variable I'm going to say columns is equal to this and now for the columns we're going to change this to be CLS do columns and then here we can get rid of this variable and what we'll do instead is use the new variable that we just defined so we're going to say writer is equal to CSV Dot and this is going to be the dictionary writer this means we're going to take a dictionary and write that into the CSV file and inside of here we're going to pass the CSV file that we just opened and what else are we going to pass here we're going to pass the field names so we're going to say field names are equal to and this is going to be the cs. column so what we're doing here is creating a CSV writer what this will do is take a dictionary and write it into the CSV file so now that we've created this object all we need to do is use it so I'm going to say WR er. write and this is going to be row and we're going to write a new row using the new entry okay then we're just going to print down here we're going to say entry added successfully like that so let's just quickly recap what we did we created a new dictionary that contains all of the different data that we want to add into the CSV file we then opened the CSV file we opened it in a pend mode and when we use this with syntax here this is what's known as a context manager that's why we have this as CSV file so it's storing the open file in this variable and pretty much what this means is as soon as we're done with the code inside of here this is automatically going to handle closing the file for us and dealing with any memory leaks or just cleaning everything up really nicely so it's great practice when you're working with files to use this with open syntax because you can do anything you need inside of the indented block and then as soon as you're done python will automatically handle closing the file for you which is exactly what's going to happen here so now what I do is I create a new writer using the CSV dictionary writer we pass the CSV file we want to write to and the different field names that we have so it knows how to take the data from our dictionary and kind of associated with the correct column and then we use writer. WR row and we add this new entry there are various other ways that we can write to the CSV file but this is one of the best practice ways to do that okay so now that we've done that let's test using this method so we're going to say CSV do add entry and what we need to pass here is a date amount category and description so let's give a date of maybe 20 07 2024 let's give an amount of maybe 12565 let's give a category of income let's give a description of Sal okay so let's just test if this works by running our code so I'll bring up my terminal and go Python 3 main.py it says entry added successfully and if I go here to my CSV file you can see that the entry has now been added great that is all working and now we have the two kind of main functions we need for our CSV file we have initializing the CSV file and then adding our entry now the next thing I want to do is make it so that from our command line we can ask the user for these various entries and then add it in into the file that way we don't need to just manually write them here we can actually have a program that will continually ask the user if they want to add more entries and they can add it directly from the command line giving us a nice interface to work with the CSV file so let's go over now to our data entry file and the reason I created this new file is so that I have a place where I can write all of the functions related to getting information from the user so that our main file here stays a little bit cleaner and I'm going to show you how we can import those different functions from this file so that again we can kind of organize our code a little bit better so inside of this file I'm going to say from date time import date time and now we're going to write a few different functions now I like to just stub the functions that means just write the um kind of function definition before i' write them all out so we know exactly what we need so the first function we're going to have is get date now when we get the date I'm going to take in a prompt and I'm also going to take in an allow default equal to false now what we're doing here with these different parameters is we're having a specific prompt this prompt is what we're going to ask the user to input before they give us the date the reason why I'm doing this is that we can be getting the date in multiple different places and we may be asking for the date for a different reason so we want to have a different prompt so that this function is a bit more Dynamic now allow default is going to tell us if we should have the default value of today's date the reason why I'm doing this is I want someone to be able to just hit enter and by default it will just select the current date so they don't need to enter the date if the date is today because that's probably a common uh entry method using today's date so if they set this to true then we will allow um kind of the default to be passed okay so that's get date now as well as getting the date we're going to need to get the amount this is the amount of the transaction so I'm going to say pass here next we're going to say Define getor category again we're just going to write pass and then we're going to say get the description like this and we're going to write pass okay so again this is kind of how I like to start so I know the different functions that I need to write and then I can just write them one by one and sorry let me just fix this so it says get description not just description okay so let's start with get date what I'm going to do is say my date uncore string is equal to the input with the prompt so whatever the prompt is was P this function we're going to use that here and then we're going to get some kind of date string now I'm going to say if allow default and not date string then I'm going to Simply return the date time dot today this is going to give me a datetime object in Python but I actually want to convert this to a string so I'm going to say dot St Str and then F time this stands for string format time and I'm going to do percent D percent M and then percent and capital Y now for some reason this is not highlight I think this is okay though yes this looks fine to me and the reason why I'm writing this is that this is actually a format to specify uh the way we want to get our date so in this case we want to have date month and then year so it's going to take today's date which we're getting here and then format it in this format now we're going to return this in the situation where we are allowed the default and the user didn't type anything in so I'm saying okay if they didn't give us any input so if they just hit enter and moved kind of to the next line and we're allowing the default then it's okay we can simply return this otherwise what we want to do is we want to try to validate the date to make sure that what they gave us is valid because we don't want to obviously allow them to enter something that's invalid so I'm going to say try and I'm going to try to create a valid date so I'm going to say valid date is equal to datetime and this is going to be dot St and then P time and same thing we're going to take in now the date string whatever the user entered and we're going to use this format okay so let's paste this right here so what we're saying is okay let's take in the date string let's use this format and let's try to convert this into a datetime object that's valid that's all we're doing now if this line works we can move on to the next line where we're just going to return the valid date and then we're going to copy this line right here and again we're going to format it using this because what we're kind of doing is we're taking whatever they typed in we're converting this into a date timee object at least we're attempting to do that using this format and then since we now have the daytime object we now need to kind of convert that back into the string representation and this will make sure that it cleans up the date that the user typed in and gives it to us in the format that we need now that's only if this works obviously that's why we're putting it in a TR statement it's possible the user can type something like hello and obviously that's not a valid date and well that's going to crash our code so that's why we now are going to have an accept block so if this TR statement does not work work and it would not work because we have a value error then what I'm going to do is just print out the following I'm going to say invalid date format please enter the date in and then I'm going to tell them it should be day day month month year year year format and that's actually the exact format that we're specifying here when we do day month year great then we're going to return and we're just going to call this function again so we're going to say get this and then we're going to call it with the same thing prompt and allow default now this is what's known as a recursive function which means we're just going to keep doing this we're going to keep calling this get date function until eventually we don't hit this case so they do give us a valid date in which case we're just going to return either today's date or whatever the date is that they entered so again what will happen is if they give us an invalid date we're just going to call the function again and then return that result which means now we go back in here if it doesn't work again same thing we go into the recursive case again and we'll just keep going until eventually they give us a valid date now what I'm realizing here is that we have a bit of repetition with the format so I think I'm just going to create a variable I'm going to say format and we'll just call this date format because I believe format is a reserved word I'm going to paste that right here and we'll just replace here the date format in case we want to change that later now we only need to change one variable rather than changing three strings in three places okay so there we go now we're using our date format great now that we have get date let's go to get amount so for get amount we are going to do a try statement and we're going to say the amount is equal to and we're going to try to convert the input into a float because they could give us a decimal value which is a floating point value so we're going to say enter the amount colon and then make sure you have a space just so that there's some room for the user to type we're going to say if the amount is less than or equal to zero because we don't want them to enter a negative amount then I'm going to raise a value error and I'm going to say amount must be a non negative non zero value okay because we don't want them to enter zero because there's no point of having a zero value transaction and we don't want them to give us a negative value because we're only taking positives now if all of that works we can return the amount otherwise we will accept on the value error as e and then we're going to print e and again we're going to return the get amount okay we're going to keep calling this function until they give us a valid amount hopefully that makes sense we're trying to convert this to a float it's possible that this conversion doesn't work in which case we'll immediately go here otherwise if they do give us a valid number we make sure that is non zero and non negative and then we can return it okay good next we're moving on to get category now we're going to say category is equal to the input and for the prompt here we can say enter the category and we're going to go I for income let's make this capital and and we'll say or E for expense if we want we can quote these with single quotation marks which is what I'm actually going to do here so it's a little bit more clear and notice I can use the single quotation marks in here because I have double quotation marks surrounding the entire prompt if I tried to put a double quotation mark here notice we're going to get an error because it's closing the string off too early okay then we're going to put a CO in and a space so they have some room and we're going to convert this to uppercase so if they type in a lowercase i or a lowercase e this will still work let's zoom out out a bit sorry so we can read this whole line now what I need to do is I need to make sure that they typed in either I or E so actually to do that I'm going to make a variable up here I'm going to call this categories and this is going to be equal to a dictionary I'm going to have an uppercase i and this is going to be mapped to income and I'm going to have an uppercase E and this is going to be mapped to expense okay now we're going to go here to category and we're going to say if the category so what they typed in is in the categories then this is valid so we can simply return and then we're going to return categories at the Key of category so rather than returning I or E we're going to return income or expense and notice we've set this up so now we can add multiple categories later to this if we want to okay and then then otherwise so if that's not the case we're going to have an lse statement and actually we don't need the else statement we can just write it beneath because we have the return here and we can say print like this invalid category and then please enter and then this will be again in single quotation marks I for income and or not and E for expense perfect and then same thing return get the category okay so we doing this recursively until they give us a valid category now the last one is really really easy for getting the Des description we're just going to return and input and since the description is optional we're just going to say enter a description they can type anything they want here because this will be optional okay so now we have our four functions get date get amount get category and get description now we're going to use them from our main file so to do that we're going to go to Main and we need to import them from the file we just wrote so to do that we're going to say from and then the name of our file is data entry so we say from data entry import and then we write the name of our functions so get amount get category get date and get description doesn't matter the order in which you type them perfect now what we're going to do is write a function here that will call these functions in the order that we want in order to collect our data so we're going to say Define add inside of here we're going to begin by initializing the CSV file so we're going to say CSV do initialize CSV and now we're going to get these values so we're going to say the date is equal to get uncore date we're going to say the amount is equal to and this is going to be get the amount for our date by the way just before I forget we're going to say enter the date of the transaction and we'll just put the format we want so day day month month year year year okay and then we'll say um we want something to say that you have the default value so I'm going to say enter the date of the transaction or enter for today's date okay so we'll go with that that's fine and I think we need this here so let's add that and in terms of allow default we're going to say allow default is equal to true so we will allow the default value of today okay now we're going to get the amount that doesn't need any parameters we're going to get the category that does not need any parameters as well and we're going to get the description that does not need any parameters okay once we get these four values we know they're valid because they will have been validated by the data entry functions so now I can simply say CSV Dot and then add entry and now we just pass the value so date amount we got to spell this correctly category and description okay so now we can test this so rather than having these two lines we can just call the ad function let's run our code and let's make sure that this is working okay so enter the date of the transaction or uh or enter for today's date okay Enter the amount let's go with 125 we're going to go with income and description I will go with side gig okay it says it was entered successfully so let's go to finance data and you can see that now we have this entry and it has been added great that is working well okay so let's clear this and now let's move on to the next step which is to kind of make this a little bit prettier in terms of getting all of the input and also to allow us to view a summary of all the different transactions and eventually to actually plot those on the graph so let's go back to this CSV file here and let's add another method so we're going to say add class method because again this is just going to be associated with the class and this is going to be something that can give us all of the trans actions within a date range so we're going to say Define getor transactions and we're going to take in the class a start date and an end date because in order to get the transaction so we need to know the start and we need to know the end now the first thing we're going to do is read in our CSV file so we're going to say dataframe is equal to pd. read CSV and we're going to read the CSV file which with is the CLS dot CSV file name okay now that we have read this in what we're going to do is we're going to convert all of the dates inside of the date column to a datetime object so that we can actually use them to kind of filter by different transactions bear with me this is going to seem a little bit complicated just trust me it will make sense at the end after I can explain it line by line so we're going to say the data frame at date now notice that I can do this when I work with a panda's data frame I have the ability not just to access the individual rows but to access all of the columns which makes it very useful so when I say DF at date I'm actually accessing all of the different values in the date column okay so I'm saying data frame at date and what I'm going to do is change these values so I'm going to say pd. 2or dat time and I'm going to take in all of the values in the date column again and I'm going to specify that the format we want is and then the format that we had which is percent D percent M and percent y now we're going to use this a lot so again we'll put this in a variable it's a little bit redundant that we have the variable in two places but for this purpose or for this project it's fine so I'm just going to put in the CSV file here format is equal to this okay and we'll remove the date format and now we have that in here so we can just use this so I'm going to say CS v. format so we'll use that okay so now we've just converted all of the dates in this date column to that format again the reason we're doing this is just to ensure that they're going to be in the correct object so that we're able to actually sort by them and to kind of find the correct dates because we don't necessarily know what will be stored in this column even though our code is adding it in the correct format this is kind of converting it to a datetime object which gives us some other properties that allow us to um kind of sort by it and use it okay now we're going to say the startor date is equal to date time. STP time okay and we're going to take in the start date and the CSV do format the reason for this is that the start date that's given to us is going to be a string so since it's a string again we want to convert it into the correct format now let's copy this line and just change this with the end date so that we convert these into datetime objects okay so end date and then end date like this and by the way if you're a bit confused don't worry working with dates and times is always very confusing even for experienced programmers all of the stuff you can find in the documentation you can even read here it says new date time pars from a string so what we're doing is just taking a string and then parsing it as a datetime object again so that we can use the properties of a datetime object that allow us to kind of filter by and search for different dates okay now what we're going to do is create something known as a mask now a mask askk is something that we can apply to the different rows inside of our data frame to see if we should select that row or not so bear with me while I write this I'm going to say mask is equal to and we're going to put inside a parenthesis data frame date okay this is going to be greater than or equal to the start date we're going to use the and symbol so not writing and but actually using the and which stands for bitwise and and we're going to say data frame date less than or equal to the end date now what this is doing is checking if the data in the current Row in the column date is greater than the start date and if the data or the date in the current row that we're looking at is less than or equal to the end date the reason why we can do this comparison is because we have all of the values now as datetime objects and we have the start date and the end date as a datetime object so we can actually compare them using the less than and greater than symbols which we couldn't do before if they were simply strings now this symbol you see right here is known as the bitwise and I don't want to explain it a ton but it's pretty similar to the end right here we just use this when we're working with the panda data frame and The Mask specifically so just make sure you have this here and again what this is going to do is just apply this to every single row inside of our data frame and it's going to kind of filter the different elements so let me show you that I'm going to say filtered data frame is equal to DF dolo okay and inside of here we're going to pass the mask what this is going to do is return to us a new data frame a filter data frame that only contains the rows where this was true where the date was greater than or equal to start date and the date was less than or equal to the end date you don't have to understand exactly how this is working this is kind of a fancy feature of pandas but what it's doing again is kind of locating all of the different rows where this mask matches and you could obviously create a more complicated mask but this is what we want for now okay so now that we have that we're going to go down here and we're going to say if the filtered data frame. empty so just checking if there's nothing in it then what I'm going to do is say print no transactions found in the given date range okay otherwise we're going to go into this block right here where we start printing out all of the different transactions and start creating a summary of those so we're going to start with a print statement here here and we're going to say transactions from we're going to make this an F string available in Python 3.7 and above and we are going to say startor dat do string format time and we're going to do the format that we've used before so CSV do format what this is going to do is take our start date and just convert it into this format when we print it out because now we have the datetime object and we're converting it back to a string we're going to say two and then this is going to be the end dat do string format time and then we're going to take in the CSV do format as well okay let's save that so we're just kind of printing this out at the beginning as a header saying hey we're about to show you the transactions in this range and now we're going to print all of those out so we're going to say print and we're going to use our data frame to do this so we're going to say filtered data frame. 2or string this is a method that will just take the data frame so all of the different entries that are inside of it again these are filtered now just the transactions that we want and convert it into a string that we can print we're going to say index is equal to false and we're going to say formatters and now what we can do is specify if we want to format any specific column and we do we want to format the date column so we're going to say date inside of a python dictionary right here so we put the column name as the key and then we put a function that we want to apply to every single element inside of that column if we want to format it differently so the function here is going to be Lambda X and then x. string format time and then we're going to use our format CSV do format okay let me save that now let's just quickly look at this before we go any further so we're saying filter data frame. twring don't worry about the index and then we're using formatters now we pass a python dictionary and if we want to format all of the values inside of the date column then we pass date as the key and we need to pass a function and this function fun will be called with all of the entries from our date column so for example these two right 207 20 24 0707 20 24 whatever the dates are they're going to be passed to this function this is a oneline Anonymous function known as a Lambda function they'll be passed as the parameter X these are going to be datetime objects because we've converted all of the entries in the date column to a datetime object so we're then going to format them so we're going to say string F time with the format so when we print them out we get a nice pretty string okay that's what that's doing now we can go and we can find the total income and the total expense and print those out so we're going to say total income is equal to the filtered data frame and what we're going to do is we're going to look in the filter data frame and we're going to say category is equal to income so this is kind of similar to how we use the mask before we're saying the filter data frame and then what we want to do is we want to get all of rows where the category is equal to income then once I have those rows I want to get all of the values in the amount column and I want to sum those again a feature of a pandas data frame if you haven't worked with pandas before understand this looks a little bit confusing because this doesn't work like a normal list this is a lot different than a list in fact which looks confusing because the syntax is different but we're saying filter data frame again we're getting all of the rows in this data frame where the category is equal to income then from all of those rows we're looking at all of the values in the amount column and then we're summing those so now we're going to do the same thing for the expense so we're going to say total expense is equal to the filter data frame we're going to have the filter data frame category and then equal to expense and then same thing we're going to take the amount and we're going to sum it now we can print this out so we're going to say print I'm going to print a back sln just that we go down one line so that we have a bit of Separation I'm going to say summary and then I'm going to print the total income and total expense okay so I'm going to say total income and this is going to be an F string so that we can do some formatting we're going to put a dollar sign here and then inside of curly braces we're going to say total uncore income now what I want to do is I want to make sure that this gets formatted to two decimal places so I'm going to put a colon and then do 2 F if you've never seen this before what it will do is just round to two decimal places so that we're going to only show at most something like you know 5 67. 89 we won't show that third decimal place we'll just round it off okay so that's what that's doing kind of a useful feature of the FST string next we're going to say print and then we're going to do an FST string again this is going to be the total expense okay we're going to do a dollar sign and then say total expense and then same thing colon. 2f and now we're going to print the net savings so we're going to say print F and then net savings okay now we're going to do a dollar sign and we're going to do a subtraction so we're going to say total uncore income minus total expense now I'm going to put this inside of parenthesis just so that I can format this value and then I'm going to do colon. 2f okay so that's pretty much it and then from here I'm just going to return the filter data frame the reason for that is we then will be able to actually create a plot or a graph using the data frame now that we have it filtered okay so I understand a little bit confusing especially if you haven't worked with pandas before we read this in as a data frame we take the date column and convert it to datetime objects we convert the start date and the end date to datetime objects because they're going to be strings we create a mask which will be used to filter the different rows inside of our data frame we apply that mask using the loc function the lock function we then have a filter data frame if it's empty we just print out that there was no transactions let's add a period here otherwise we print out a transaction summary okay so now we need to actually call this and test it out so let's make a new function call here and we'll say CSV Dot and we're going to go with get transactions now for us to be able to get all of these transactions we just need to put something within this range so let's go with something like like 01 01 2023 is the start date and then we'll just go with a big end date so we can go like 30 07 2024 okay let's see I think that's all we need to pass here so those are our two strings CSV doget transaction okay let's bring this up and let's run our code and you can see that we get all of the different transactions so transactions from these two dates we have date amount category description it prints them out very nicely and then we get a summary total income total expense net savings and it gives us all of those values all right so we're moving along quite nicely now what I'd like to do now is make it so that we have kind of a nice way to input or to work with this program or to work with these different functions where we have kind of a main functions running constantly saying hey do you want to add a new transaction do you want to view transactions what do you want to do and then prompting us for the correct data so rather than having to write these functions here we can just use the command line and interact with our personal finance tracker so to do that I'm going to make a function called Main and we're going to define a while loop so I'm going to say while true and what we're going to do is print out the various options that the user has so we're going to start with just a back sln so there's a little bit of separation and we're going to say one dot add a new transaction okay so that's the first thing that we can do print and then we're going to do two Dot and this is going to say view transactions and a summary within a date right range okay and let's just go and summary then we're going to say print and the third option will just be to exit and then obviously later on if we have more features we can add them here we're going to say choice is equal to input and we're going to say enter your choice and we're going to assume the user is just going to type in a number one through three so we'll give them those options here now we're going to say if the choice is equal to one then they want to add a new transaction so if they want to add a new transaction we can just call the add function that we wrote here so they can add a new transaction okay we're going to say l if the choice is equal to two then what we need to do is we need to get a start date we also need to get an end date uh and then we need to get the transactions so we're going to say startor date is equal to get date now for this we're going to say enter the start date we're not going to allow them to enter the default value so we'll just leave that false but we'll give them the format that we want them to enter it in okay now let's do the same thing for the end date this is equal to get the date and let's copy this prompt and just change this to say the end date okay so here and then this will be the end date great so now we have the start date and the end date now we need to pass it to our file so we're going to say CSV Dot and this is get transactions and we're going to pass the start date and the the end dates okay now we're also just going to say data frame is equal to this because we're going to use the data frame later if we want to plot this on a graph and then otherwise we're going to say l if Choice equals 3 well that means they're going to exit so we're going to say print exiting dot dot dot and then we're going to say break so we're going to break out of the wall Loop and then lastly else we are going to say print we're going to say invalid Choice enter 1 2 or three okay period and that should be it now we just need to call this function so we're going to say if underscore name equals equals uncore uncore maincore uncore then we're going to call Main now the way that this works is that if we run this file directly this line will execute and we'll call the main function whereas if we import this file this will not run because the name is not going to be equal to main pretty much what this line is doing is protecting this code so that we don't run the main function unless we directly execute this file if we were to remove this and just call the main function even if we were to import something from this file then this main function would run which we don't want so just kind of a good practice and that's why I'm putting it here so let's quickly test this out and make sure that this is working and then we can move on to the graph part which is pretty cool so let's run our code and you can see it says add new transaction view transactions exit enter our choice let's go one enter the data of the transaction action so let's go 20 or let's go 19 um maybe 07 2024 the amount let's go with 3,000 let's make this income let's just call this salary and then it says entry added successfully now maybe we want to view the transactions let's go with 0707 2024 uh let's go with 30 07 2024 okay you can see that it gives us our different transactions gives net income net expense and then our net savings and that is very good okay now let's try to exit and you can see that we can exit the program obviously we could make this look a little bit nicer but for now I think this is quite good and now we want to move on to actually creating the graph so the idea is after the user gets a list of different transactions we want to ask them uh if they want to plot it and they want to see it on a graph well in order for them to see it on a graph we need to make that graph and to do that we're going to use map plot lip so we're going to make a new function here and this is going to say plot uncore transactions this is going to take in a data frame the data frame is going to contain all of the transactions that we want to plot and we need to do a little bit of configuration here in order for this to work first things first we're going to say DF do setor index and we're going to make this the date now the index is the way in which we locate and manipulate different different rows so we're using the date column because that's how we want to kind of find different information we're also going to want to kind of sort by the date and find the correct information based on the date to create the plot I know seems a bit weird but we're going to say in place equals true which means we are going to modify the data frame in place when we set the index as the date again this allows us to kind of find different rows and entries using the date column and to have more efficient operations when we're working with the date okay now that we've done that what we need to do is create two separate data frames the income data frame and the expense data frame the reason for that is that I want to have income as one line and expenses as another line so I need to just have all my income and all my expenses in two separate kind of data sets or two separate data frames in this case so I'm going to say my income dataframe is equal to and we're going to start with the data frame and like before we're going to say data frame category is equal to income now this is good and right now this is going to give us the uh all of the sorry rows that are income so that's good however we need to do a few different things here in order to kind of shift this data frame into something that's going to be nice to actually plot on the graph the idea is I want to see a nice line where it's showing me even potentially zero income on different days so I might need to actually add more rows in where we have uh kind of missing dates I know this seems weird but if we look at this you can see that we have something on 20 7th and 19th the rest of the days we don't have anything so if we were to plot this we're just going to get three kind of dots or three disconnected lines what I want instead is I want to have all of the empty days be marked as zero so that we actually see the line going in the correct direction you'll see what I mean when we plot this out but it requires a bit of manipulation to this data so the first thing we're going to do is we're going to apply a resample to this and we're going to pass the value D so this stands for daily frequency so we're going to take our filter data frame with all of the transactions that we want we're going to look at them and we're going to make sure that we now have a row for every single day that's what resampling is doing it also allows us to aggregate different values that are on the same day I know a little bit confusing these methods are not super simple to understand but think of it as just kind of filling in all of the missing days that's really what resampling is doing now next what we're going to do is we're going to sum now what we're doing here is we're summing all of the different amounts so that's what sum is going to do is just going to take the values and add them together and now we're going to reindex and this is going to be with the data frame. index and we're going to say the fillore value is equal to zero now what this is doing here is making sure that the index is correct after we've applied these different operations so we've resampled which means we're pretty much filling in all of those additional rows and having our data be stored in Daily frequency we're summing our values when we sum our values we're going to aggregate the rows that have the same date and add their amounts together and then we reindex and when we reindex we just make sure that the data frame is going to conform to this index and we fill in any missing values with zero again I know a little bit confusing just trust me this works okay so let's save this and let's go with the next line here which is going to be the expense data frame which is going to be the exact same thing except the category is simply expense so now we have a data frame for our income and for our expenses and the next thing we need to do is create a plot using map plot lib where we can actually uh put this different data so we're going to go to the top of our program here and we're going to say from actually not from we're going to say import matplot li. pyplot as PLT okay very uh common import here now what we'll do is we'll start creating a plot so we're going to say PLT do figure figure is uh kind of setting up the screen or the canvas where we're going to actually be putting the graph and we can specify the size that we want so we're going to say the figure size is equal to 10 and 5 okay you can change the size later if you want and now we can plot the different lines or in this case the different data frames that we have so we're going to say PLT do plot and we're going to plot the income data frame and we're going to plot the index the index means we're plotting the date pretty much then we're going to say the income undor data frame and the amount so what we're using as the x axis is the index so all of the different dates what we're using for the y AIS or the value is the amount then we can give this a label and we're going to say that this is income and we can specify the color and if we go with G that just stands for green now we can do the same thing for our expense so we're going to say this is the expense data frame. index which again is the we then are going to say this is the expense data frame and the amount we will give this a label which is equal to expense and we'll give this a color which can be r or red okay now we can just do a few labels so we're going to say PLT dox label and this is going to be the date then we can give this a y label so we're going to say PLT doy label and this is going to be the amount we then will give this a title so PLT do title and we can say income and expenses over time feel free to change this if you want we'll say PLT do Legend when we do this it enables The Legend So we are going to see the labels for our different uh colored lines and then we're going to say pl. grid this enables the grid lines so we're going to specify that as true so we can more easily see where our values line up and then lastly PLT do show this actually takes the plot and shows it on the screen so plot transaction should now work what I'm going to do lastly is I'm going to go here to where I have my choice and I'm just going to say if input do you want to see a plot question mark and we'll say Y no and this is going to be dot lower is equal to Y then we will simply call that function which is plot transactions and we will pass that filter data frame okay so I'm just asking them hey do you want to see this converting it to lowercase if they type in yes or why then we will plot this and it should show the graph okay so let's test this out but actually before we test this out I'm just going to fill this with some sample data so that it looks a little bit more full so I just added a bunch more entries here into my CSV file I actually just used chat GPT to generate a bunch of them for me so it was really really fast and you can see that we're going from kind of the 1st to the 31st of uh what is this July so those are kind of the dates that we can choose from all right so let's run our code now so let's go up here and run and let's view our transactions uh let's start at the 1 of January so 01 or not January sorry of July 2024 let's go maybe up into the middle so 157 2024 and you can see that it gives us a bunch of the different transactions we have total income 3,000 total expenses 9005 net savings 2145 do you want to see a plot yes of course we want to see a plot and then it brings us here and you can see that we get the plot now notice that we have a bunch of days where we have zero the reason again why we have that is because of the resampling that we did to the data frame so that we have this on a daily frequency so whatever the dates are this is giving us everything daily even though it doesn't quite look like it with the legend because it's skipping a few dates it is indeed doing that so there you go that is how this works we can test this out again with a different date range just to make sure so let's go to uh let's go maybe 03 uh 07 2 24 and let's go 30 07 2024 do you want to see a plot yes and when we come here you can see that we get a different plot now that's going from 03 to 030 there you go guys that is going to wrap up this video so I know that a lot of this was a little bit confusing because you're learning about some new modules like map plot lib and pandas but I wanted to show you some more advanced features in Python and how you create a real usable application obviously there's a lot of more features that you would want to add this for it to really become super useful but this is a really solid base that you can extend and hopefully will act as a really good starter project and something you can turn into maybe even a resume project all of this code will be available from the link in the description if you need it if you enjoyed the video make sure you leave a like subscribe to the channel and I will see you in the next one
