With timestamps:

00:00 - hello everybody and welcome back to our
00:01 - expert Python tutorial so in today's
00:03 - video we are going to be talking about
00:05 - decorators which are a pretty cool and
00:06 - useful tool they're not super complex
00:09 - but essentially they allow us to modify
00:11 - the behavior of a function without
00:13 - actually changing any of its code now
00:15 - this is useful because sometimes you
00:17 - want to be able to add and remove
00:19 - decorators while debugging a function or
00:21 - maybe you want to change the behavior of
00:24 - all of your functions and rather than
00:25 - going in and changing all of the code
00:27 - you could create a decorator which will
00:29 - allow you to simply you know use one
00:31 - line of code to change the behavior of
00:33 - all of these different functions so I'll
00:35 - show you how this works and what a
00:36 - decorator actually is to start by just
00:38 - going through a bit of a kind of recap
00:40 - of how Python passes objects around and
00:42 - why we can actually even use decorator a
00:45 - quick reminder before we get started
00:46 - that kite is the sponsor of this series
00:49 - kite is the best AI autocomplete for
00:51 - Python on the market and you can get it
00:52 - for free in the link in the description
00:54 - it integrates with the all the popular
00:56 - IDs and text editors so subline vs code
00:59 - Adam them you name it chances are kite
01:01 - is you know compatible with that again
01:04 - you can download that from the link in
01:05 - the description so the first thing I'm
01:06 - gonna do is we're gonna create a
01:08 - function called func now what I want to
01:10 - do is just show you that if this
01:12 - function takes a string I can actually
01:14 - return another function in here that
01:16 - does something with this argument and
01:18 - we've seen this before in the previous
01:20 - expert Python tutorials but I want to
01:22 - just make this very clear on how this
01:23 - works so I'm gonna call this function a
01:24 - wrapper because it's inside of this
01:26 - function it's not gonna take anything as
01:29 - an argument and what I'm simply gonna do
01:30 - in here is a print started print string
01:38 - and print ended like that on the Bill of
01:43 - capital and I guess actually this string
01:45 - sorry does not need to be in a string
01:47 - needs to be like that so we print the
01:48 - variable and then what I'm going to do
01:49 - here is simply return the wrapper
01:52 - function like that so if I do this now
01:55 - what happens if i say x equals
01:57 - func like that and i put in my string
01:59 - let's say hello and i run this program
02:01 - you can see we get started hello and end
02:05 - it now the reason that happened is
02:08 - because we returned here the wrapper
02:10 - being called write these two brackets
02:12 - but if i remove
02:13 - this and I do this now nothing happens
02:15 - so what we've actually done if I print
02:17 - out the value of x as you see we store a
02:20 - function in here that was returned from
02:23 - this function which is actually equal to
02:25 - this and then if we wanted to call this
02:27 - function we could put our little braces
02:30 - like that and here we go we get started
02:32 - hello and ended so just want to show you
02:33 - that this is possible and the reason
02:35 - this is possible is because functions in
02:37 - Python are objects which means that we
02:39 - can pass them around
02:41 - we can throw them around our program and
02:42 - you can see up here this is the location
02:44 - of the object you know function wrapper
02:47 - from func dot locals okay so now that we
02:50 - understand that let's bring it up a
02:53 - little notch and see what happens if we
02:54 - actually instead of just passing a
02:56 - string in here pass another function so
02:59 - I define a function function I'll call
03:01 - it func - like that and all we'll do in
03:03 - here is just print or something will say
03:06 - I am func - why not I'll get rid of this
03:11 - and now rather than passing a string in
03:13 - here why don't we actually just call
03:16 - some function so let's put f in here
03:18 - let's put I don't want func - I just
03:21 - want F let's call whatever function is
03:23 - called so we'll do print started call
03:25 - whatever function was in here and then
03:27 - print ended and then return this
03:30 - function so let's see how this works so
03:32 - now if I can move this down a bit let's
03:34 - say x equals funk funk - let's print X
03:41 - and then let's call X so what we're
03:44 - doing here for anyone that's confused is
03:46 - we've created this function which
03:47 - accepts a function as an argument writer
03:50 - as a parameter then what we do in here
03:52 - is we define a function that prints
03:54 - started calls whatever function was
03:56 - passed in prints ended and then returns
03:58 - this function so this is not actually
04:01 - gonna do anything until it is called so
04:03 - when we return this we'll store it in a
04:05 - variable X and then when we want to use
04:08 - this interior function here we call it
04:10 - with this write the X and the brackets
04:13 - so let's have a look at how this works
04:14 - control B and you can see started I am
04:17 - func - ended function func wrapper
04:20 - locals right and the idea here is that I
04:23 - can do the same thing with say func 3
04:25 - right if I print
04:27 - let's say I am funk 3 like that now
04:32 - rather than passing funk - I can pass
04:34 - funk 3 and we can see now we get the
04:36 - same thing happening except funk 3 and
04:38 - in fact we could do it you know I would
04:40 - say y equals funk funk - and then we can
04:45 - do the same thing and just call lie down
04:47 - here and now both of them are going to
04:49 - work and they're both going to be
04:50 - different so started I am funk 3 started
04:52 - I'm fun to end so with this in mind we
04:56 - can start looking at kind of what a
04:57 - decorator is now almost but I just want
04:59 - to show you a way that let's say you
05:00 - know this function right here which
05:02 - we're gonna call our decorator we don't
05:04 - want to have to do this weird call right
05:06 - where we use our decorator function to
05:08 - call function 3 we just want to call
05:10 - function 3 and have it do this behavior
05:13 - and you know do whatever function 3 is
05:16 - right how do we get that to work how did
05:18 - we get that to happen where rather than
05:20 - me having to call funk and pass funk 3
05:22 - and call funk and pass funk - how can we
05:26 - do this another way
05:26 - well what I can actually do is kind of a
05:29 - cool sneaky line here Python where I do
05:31 - this I say funk 3 is equal to funk at
05:36 - funk 3 now this seems like a weird line
05:40 - of code but essentially what this is
05:41 - going to allow us to do now is rather
05:43 - than having to call function and pass
05:46 - funk 3 in we can actually use funk 3
05:48 - which is a variable now which stores the
05:51 - function that is returned from the call
05:54 - of funk with function 3 which means that
05:57 - if we call funk 3 like that then what's
06:02 - gonna happen is it's gonna run this
06:03 - function that was created from this call
06:05 - so this is a way that we can kind of
06:07 - change that behavior we can say okay so
06:10 - funk 3 I always brought want this
06:12 - whatever's inside this wrapper function
06:14 - to happen whenever I call it so all I
06:16 - need to do to define that is write this
06:19 - line of code and now every time I call
06:20 - funk 3 from anywhere in my program it'll
06:22 - do this and if we run this we can see
06:24 - that happens and that works fine then we
06:27 - can do the same thing with funk - yeah
06:31 - fun - equals
06:32 - funk funk - and that will call fun -
06:36 - like that's and we can see that it works
06:38 - for both of them so this is where we now
06:41 - get into the concept of a decorator
06:43 - things are gonna get a little bit more
06:44 - complicated but now all I'm gonna show
06:46 - you is what a decorator does versus what
06:48 - we've done so this kind of line of code
06:51 - here is weird right like it's not
06:52 - something you really want to write you
06:54 - don't really know where to put it
06:55 - it's like just not ideal to have to
06:57 - write this line of code so python has
06:59 - thought of this for us and what they've
07:02 - introduced is a syntax that essentially
07:03 - allows us to do this just in a better
07:06 - way and all it is is using this @ sign
07:08 - and putting the name of your decorated
07:10 - function so like that just on top so now
07:12 - this line here pretty much just replaces
07:16 - this line like they're the exact
07:18 - identical copy they do the same thing
07:20 - this just looks a little bit nicer and
07:22 - it's a little bit easier to understand
07:23 - what's happening when you have you know
07:25 - there's a decorator syntax above the
07:27 - function and you can actually decorate
07:29 - your function with more than one
07:30 - decorator if you want we're not going to
07:32 - talk about that right now but that's
07:34 - something to note so pretty much to
07:36 - replace these lines of code all I have
07:37 - to do is put at the name of the function
07:40 - that I want to run before right and then
07:43 - now if I do func 3 and func 2 we can see
07:45 - we get the same thing so we get started
07:47 - I'm func three ended started I'm Fung
07:49 - two ended so this is how this works so
07:52 - whenever you're creating a decorator
07:53 - function you need to kind of implement
07:55 - this wrapper functionality where the
07:57 - first thing takes the function itself
08:00 - and the second function here while this
08:02 - just takes the or what is this this
08:04 - creates the function that's going to be
08:06 - called when this is returned right or
08:08 - when you actually call this function so
08:10 - it's actually you're changing your SEC
08:11 - func to is now gonna be equal to
08:13 - whatever this is and usually inside of
08:16 - here you're gonna use the function now
08:18 - there's a lot of problems that I'm sure
08:19 - some of you can think of here so what
08:21 - happens if I say func to takes an
08:23 - argument X and instead of saying I am
08:26 - func - all it does is just print out X
08:29 - what happens now well if I run this and
08:32 - I even let's give it our email let's get
08:34 - 5 here you can see we're getting an
08:36 - error right and the reason we're getting
08:38 - arond this huge error was a sec wrapper
08:40 - take zero positional arguments but one
08:41 - was given so the issue is that when we
08:45 - actually call func to what we're
08:47 - actually going to be calling from this
08:48 - line of code is this wrapper function so
08:51 - this wrapper function needs to have the
08:52 - same amount of arguments that
08:54 - function2 has so how can we do that how
08:56 - can we fix that well we could just put
08:59 - an X here like this right and then less
09:01 - comments out func 3 let's run this oh
09:05 - sorry my bad we gotta throw an X in here
09:07 - that was what the issue is before so we
09:10 - have our X's there and then this works
09:11 - right so I put an X in the wrapper I put
09:13 - an X here which means that when I call
09:15 - this X will be passed to this wrapper X
09:17 - and then we can use that to call the
09:19 - function and that's totally fine but
09:21 - what happens now when I want to use func
09:23 - 3 and func 3 doesn't take any arguments
09:26 - but this takes arguments the whole point
09:28 - of decorators is to be able to use this
09:30 - on multiple functions and we get missing
09:32 - one required positional argument X func
09:35 - 3 there's an issue you know things are
09:37 - happening so what what do we do here how
09:40 - do we fix this well this is where we use
09:41 - what we call the unpack operator I
09:43 - believe it's splat operator something
09:45 - but essentially you can put star args
09:47 - star star kwargs like this and what this
09:51 - will allow you to do is accept any
09:53 - number of positional or keyword
09:56 - arguments so essentially this says okay
09:58 - we don't know how many arguments are
10:00 - gonna be coming in here there could be
10:01 - an infinite amount so rather than just
10:03 - trying to guess or figure it out or
10:05 - write a different wrapper function for
10:06 - every single amount what we'll do is
10:08 - simply write star args starts our kwargs
10:10 - which tells us accept all the arguments
10:12 - that are passed in accept all the
10:14 - keyword arguments and what we can
10:15 - actually do is simply pass whatever
10:18 - these are to this function so let's do
10:20 - this here star star quacks so now what's
10:24 - gonna happen is any arguments passed in
10:25 - will just automatically pass to F same
10:28 - with kwargs and if there's none we just
10:30 - won't pass anything so this kind of
10:31 - handles any amount of arguments and now
10:34 - we'll see that when we run this we don't
10:36 - get any error and this works fine for
10:37 - any number of arguments so even if I
10:39 - were to add you know X Y in here
10:41 - something like that and then we call
10:43 - this with like 5 6 and run that still
10:47 - same thing this is working doesn't
10:49 - matter how many arguments we have we're
10:51 - perfectly fine okay so that's good but
10:53 - what happens when we return a value from
10:57 - function two well what happens out so
10:59 - let's say x equals
11:02 - print X and right now so we can see that
11:05 - we're returning Y from function to right
11:07 - but if I call this and I print X we
11:10 - don't get Y returned to us so how can we
11:13 - fix this right so what we actually need
11:15 - to do is since we're calling the actual
11:18 - function here inside of the wrapper we
11:20 - need to store the return value going to
11:23 - store that as our V so that I can return
11:26 - it at the end of this wrapper function
11:28 - so since this wrapper function is
11:30 - returned from here this could return a
11:33 - value as well and well we don't want to
11:35 - return immediately so like I could just
11:37 - write the line return F like that and
11:40 - that would work fine but we want to do
11:41 - something after the function is called
11:43 - so to you know solve this we do our B
11:45 - and then we can return our V so store
11:47 - the return value this function return at
11:49 - the end and now if I print this you can
11:51 - see that we get our return value of 6 so
11:54 - that is how we return value so that is
11:56 - how we pass in different amounts of
11:57 - parameters and now I'm just going to
11:59 - show you a few actual useful on
12:02 - decorator functions that you might want
12:03 - to use so you're probably looking at me
12:05 - like well what's the point of this right
12:06 - now like why do we have this well a good
12:08 - example is say you want to validate
12:10 - input say you want to have a bunch of
12:12 - functions that accept some numeric input
12:14 - and that numeric input is always going
12:16 - to be between the value 1 and 10 right
12:18 - rather than checking the parameters
12:20 - every single time inside of your
12:23 - function what you could do is you can
12:25 - use a decorator that checks them for you
12:27 - right and then all you would have to do
12:29 - every single time you want to validate
12:30 - that your input is correct is throw a
12:32 - decorator over top of your function that
12:34 - says validate input or whatever it's
12:35 - called write the appropriate code inside
12:38 - of a decorated function of these kind of
12:40 - functions like this and then you're good
12:42 - to go so that is kind of the idea behind
12:44 - decorators that you can modify the
12:46 - behavior of function add functionality
12:48 - to it without modifying the code and
12:50 - sometimes you don't want to touch the
12:52 - code of a function because you want to
12:53 - make sure that you're not breaking
12:54 - anything you don't know how it's been
12:56 - written but you want to add something on
12:57 - top for example maybe timing how fast
13:00 - the function runs and this is a very
13:01 - common example I'll show you this as
13:03 - kind of our last example to using
13:05 - decorators so yeah we'll do a timing one
13:07 - so essentially if I want a time how long
13:09 - a function takes to run every single
13:12 - time right then I can create a timer
13:13 - decorator so you know actually let's do
13:15 - it from the start
13:15 - let's erase all this and do one from the
13:18 - beginning so I'm gonna say define timer
13:20 - which is the name my decorator it's
13:22 - gonna take in a function will define a
13:24 - wrapper
13:25 - this will take star args star star
13:28 - quarks like that again quark stands for
13:31 - keyword arguments what we're gonna do
13:33 - here is start by importing time we're
13:37 - gonna say let's say start equals time
13:42 - dot time like that and then we'll just
13:45 - print started actually we could do
13:49 - something else let's do this let's say
13:52 - our B equals func like that and then
13:57 - let's say end or will s will say total
14:01 - equals time dot time - start and then
14:06 - we'll print time like that and we can
14:12 - put total and then we will return our V
14:17 - and return wrapper like that oops I did
14:22 - not mean for those okay so now that we
14:24 - have that let's create a function let's
14:25 - just say defiant test and then here
14:29 - we're just gonna say for others who are
14:30 - in range thousand let's just say pass
14:35 - and there we go so now if I want to
14:37 - decorate this function I'd say at timer
14:40 - and what this will allow me to do now is
14:42 - when I run this function have it tell me
14:44 - how long this took to run so let's go
14:46 - ahead and just actually call test like
14:49 - that and see it ran in 0.0 seconds so I
14:52 - guess this rounded for us but I guess
14:54 - and what I be able to do this make it
14:56 - take any longer if I add any more 0s
14:58 - there so we can see that is how much
14:59 - time this function took to run and if I
15:02 - wanted to add timer on another function
15:04 - well then I could do another one to say
15:06 - test two like that and we can even just
15:09 - say time dot sleep or why is my capitals
15:15 - on two seconds and we'll decorate this
15:17 - one with at timer as well and now when
15:19 - we call test two and we run this give it
15:22 - a second and we should see that this
15:24 - takes 2.01 seconds so this is how
15:27 - decorators work again useful when you
15:29 - want
15:29 - modify the behavior of a function
15:31 - without actually touching it without
15:33 - changing it you can add other decorators
15:35 - on top of an existing decorator I had
15:38 - urged you to see you know how that
15:40 - actually works how you'd be able to do
15:41 - that you can test that out for yourself
15:43 - but for now that's pretty much it and a
15:44 - really useful example of decorators is a
15:46 - timer decorator when you're debugging
15:47 - you want to check what is really slowing
15:50 - down or how long something's taking
15:52 - another good example is having a logging
15:54 - decorator so having a decorator that
15:56 - essentially logs the calling of
15:58 - functions or what's happening in the
16:00 - program that's a good one to add here
16:02 - and then obviously validating input and
16:03 - checking return values and stuff like
16:05 - that is always a good example of one you
16:07 - might want to use decorator so with that
16:09 - being said I hope you guys enjoyed if
16:10 - you have any questions as always leave
16:11 - them down below and with that being said
16:13 - I will see you in the next expert Python
16:15 - tutorial series

Cleaned transcript:

hello everybody and welcome back to our expert Python tutorial so in today's video we are going to be talking about decorators which are a pretty cool and useful tool they're not super complex but essentially they allow us to modify the behavior of a function without actually changing any of its code now this is useful because sometimes you want to be able to add and remove decorators while debugging a function or maybe you want to change the behavior of all of your functions and rather than going in and changing all of the code you could create a decorator which will allow you to simply you know use one line of code to change the behavior of all of these different functions so I'll show you how this works and what a decorator actually is to start by just going through a bit of a kind of recap of how Python passes objects around and why we can actually even use decorator a quick reminder before we get started that kite is the sponsor of this series kite is the best AI autocomplete for Python on the market and you can get it for free in the link in the description it integrates with the all the popular IDs and text editors so subline vs code Adam them you name it chances are kite is you know compatible with that again you can download that from the link in the description so the first thing I'm gonna do is we're gonna create a function called func now what I want to do is just show you that if this function takes a string I can actually return another function in here that does something with this argument and we've seen this before in the previous expert Python tutorials but I want to just make this very clear on how this works so I'm gonna call this function a wrapper because it's inside of this function it's not gonna take anything as an argument and what I'm simply gonna do in here is a print started print string and print ended like that on the Bill of capital and I guess actually this string sorry does not need to be in a string needs to be like that so we print the variable and then what I'm going to do here is simply return the wrapper function like that so if I do this now what happens if i say x equals func like that and i put in my string let's say hello and i run this program you can see we get started hello and end it now the reason that happened is because we returned here the wrapper being called write these two brackets but if i remove this and I do this now nothing happens so what we've actually done if I print out the value of x as you see we store a function in here that was returned from this function which is actually equal to this and then if we wanted to call this function we could put our little braces like that and here we go we get started hello and ended so just want to show you that this is possible and the reason this is possible is because functions in Python are objects which means that we can pass them around we can throw them around our program and you can see up here this is the location of the object you know function wrapper from func dot locals okay so now that we understand that let's bring it up a little notch and see what happens if we actually instead of just passing a string in here pass another function so I define a function function I'll call it func like that and all we'll do in here is just print or something will say I am func why not I'll get rid of this and now rather than passing a string in here why don't we actually just call some function so let's put f in here let's put I don't want func I just want F let's call whatever function is called so we'll do print started call whatever function was in here and then print ended and then return this function so let's see how this works so now if I can move this down a bit let's say x equals funk funk let's print X and then let's call X so what we're doing here for anyone that's confused is we've created this function which accepts a function as an argument writer as a parameter then what we do in here is we define a function that prints started calls whatever function was passed in prints ended and then returns this function so this is not actually gonna do anything until it is called so when we return this we'll store it in a variable X and then when we want to use this interior function here we call it with this write the X and the brackets so let's have a look at how this works control B and you can see started I am func ended function func wrapper locals right and the idea here is that I can do the same thing with say func 3 right if I print let's say I am funk 3 like that now rather than passing funk I can pass funk 3 and we can see now we get the same thing happening except funk 3 and in fact we could do it you know I would say y equals funk funk and then we can do the same thing and just call lie down here and now both of them are going to work and they're both going to be different so started I am funk 3 started I'm fun to end so with this in mind we can start looking at kind of what a decorator is now almost but I just want to show you a way that let's say you know this function right here which we're gonna call our decorator we don't want to have to do this weird call right where we use our decorator function to call function 3 we just want to call function 3 and have it do this behavior and you know do whatever function 3 is right how do we get that to work how did we get that to happen where rather than me having to call funk and pass funk 3 and call funk and pass funk how can we do this another way well what I can actually do is kind of a cool sneaky line here Python where I do this I say funk 3 is equal to funk at funk 3 now this seems like a weird line of code but essentially what this is going to allow us to do now is rather than having to call function and pass funk 3 in we can actually use funk 3 which is a variable now which stores the function that is returned from the call of funk with function 3 which means that if we call funk 3 like that then what's gonna happen is it's gonna run this function that was created from this call so this is a way that we can kind of change that behavior we can say okay so funk 3 I always brought want this whatever's inside this wrapper function to happen whenever I call it so all I need to do to define that is write this line of code and now every time I call funk 3 from anywhere in my program it'll do this and if we run this we can see that happens and that works fine then we can do the same thing with funk yeah fun equals funk funk and that will call fun like that's and we can see that it works for both of them so this is where we now get into the concept of a decorator things are gonna get a little bit more complicated but now all I'm gonna show you is what a decorator does versus what we've done so this kind of line of code here is weird right like it's not something you really want to write you don't really know where to put it it's like just not ideal to have to write this line of code so python has thought of this for us and what they've introduced is a syntax that essentially allows us to do this just in a better way and all it is is using this @ sign and putting the name of your decorated function so like that just on top so now this line here pretty much just replaces this line like they're the exact identical copy they do the same thing this just looks a little bit nicer and it's a little bit easier to understand what's happening when you have you know there's a decorator syntax above the function and you can actually decorate your function with more than one decorator if you want we're not going to talk about that right now but that's something to note so pretty much to replace these lines of code all I have to do is put at the name of the function that I want to run before right and then now if I do func 3 and func 2 we can see we get the same thing so we get started I'm func three ended started I'm Fung two ended so this is how this works so whenever you're creating a decorator function you need to kind of implement this wrapper functionality where the first thing takes the function itself and the second function here while this just takes the or what is this this creates the function that's going to be called when this is returned right or when you actually call this function so it's actually you're changing your SEC func to is now gonna be equal to whatever this is and usually inside of here you're gonna use the function now there's a lot of problems that I'm sure some of you can think of here so what happens if I say func to takes an argument X and instead of saying I am func all it does is just print out X what happens now well if I run this and I even let's give it our email let's get 5 here you can see we're getting an error right and the reason we're getting arond this huge error was a sec wrapper take zero positional arguments but one was given so the issue is that when we actually call func to what we're actually going to be calling from this line of code is this wrapper function so this wrapper function needs to have the same amount of arguments that function2 has so how can we do that how can we fix that well we could just put an X here like this right and then less comments out func 3 let's run this oh sorry my bad we gotta throw an X in here that was what the issue is before so we have our X's there and then this works right so I put an X in the wrapper I put an X here which means that when I call this X will be passed to this wrapper X and then we can use that to call the function and that's totally fine but what happens now when I want to use func 3 and func 3 doesn't take any arguments but this takes arguments the whole point of decorators is to be able to use this on multiple functions and we get missing one required positional argument X func 3 there's an issue you know things are happening so what what do we do here how do we fix this well this is where we use what we call the unpack operator I believe it's splat operator something but essentially you can put star args star star kwargs like this and what this will allow you to do is accept any number of positional or keyword arguments so essentially this says okay we don't know how many arguments are gonna be coming in here there could be an infinite amount so rather than just trying to guess or figure it out or write a different wrapper function for every single amount what we'll do is simply write star args starts our kwargs which tells us accept all the arguments that are passed in accept all the keyword arguments and what we can actually do is simply pass whatever these are to this function so let's do this here star star quacks so now what's gonna happen is any arguments passed in will just automatically pass to F same with kwargs and if there's none we just won't pass anything so this kind of handles any amount of arguments and now we'll see that when we run this we don't get any error and this works fine for any number of arguments so even if I were to add you know X Y in here something like that and then we call this with like 5 6 and run that still same thing this is working doesn't matter how many arguments we have we're perfectly fine okay so that's good but what happens when we return a value from function two well what happens out so let's say x equals print X and right now so we can see that we're returning Y from function to right but if I call this and I print X we don't get Y returned to us so how can we fix this right so what we actually need to do is since we're calling the actual function here inside of the wrapper we need to store the return value going to store that as our V so that I can return it at the end of this wrapper function so since this wrapper function is returned from here this could return a value as well and well we don't want to return immediately so like I could just write the line return F like that and that would work fine but we want to do something after the function is called so to you know solve this we do our B and then we can return our V so store the return value this function return at the end and now if I print this you can see that we get our return value of 6 so that is how we return value so that is how we pass in different amounts of parameters and now I'm just going to show you a few actual useful on decorator functions that you might want to use so you're probably looking at me like well what's the point of this right now like why do we have this well a good example is say you want to validate input say you want to have a bunch of functions that accept some numeric input and that numeric input is always going to be between the value 1 and 10 right rather than checking the parameters every single time inside of your function what you could do is you can use a decorator that checks them for you right and then all you would have to do every single time you want to validate that your input is correct is throw a decorator over top of your function that says validate input or whatever it's called write the appropriate code inside of a decorated function of these kind of functions like this and then you're good to go so that is kind of the idea behind decorators that you can modify the behavior of function add functionality to it without modifying the code and sometimes you don't want to touch the code of a function because you want to make sure that you're not breaking anything you don't know how it's been written but you want to add something on top for example maybe timing how fast the function runs and this is a very common example I'll show you this as kind of our last example to using decorators so yeah we'll do a timing one so essentially if I want a time how long a function takes to run every single time right then I can create a timer decorator so you know actually let's do it from the start let's erase all this and do one from the beginning so I'm gonna say define timer which is the name my decorator it's gonna take in a function will define a wrapper this will take star args star star quarks like that again quark stands for keyword arguments what we're gonna do here is start by importing time we're gonna say let's say start equals time dot time like that and then we'll just print started actually we could do something else let's do this let's say our B equals func like that and then let's say end or will s will say total equals time dot time start and then we'll print time like that and we can put total and then we will return our V and return wrapper like that oops I did not mean for those okay so now that we have that let's create a function let's just say defiant test and then here we're just gonna say for others who are in range thousand let's just say pass and there we go so now if I want to decorate this function I'd say at timer and what this will allow me to do now is when I run this function have it tell me how long this took to run so let's go ahead and just actually call test like that and see it ran in 0.0 seconds so I guess this rounded for us but I guess and what I be able to do this make it take any longer if I add any more 0s there so we can see that is how much time this function took to run and if I wanted to add timer on another function well then I could do another one to say test two like that and we can even just say time dot sleep or why is my capitals on two seconds and we'll decorate this one with at timer as well and now when we call test two and we run this give it a second and we should see that this takes 2.01 seconds so this is how decorators work again useful when you want modify the behavior of a function without actually touching it without changing it you can add other decorators on top of an existing decorator I had urged you to see you know how that actually works how you'd be able to do that you can test that out for yourself but for now that's pretty much it and a really useful example of decorators is a timer decorator when you're debugging you want to check what is really slowing down or how long something's taking another good example is having a logging decorator so having a decorator that essentially logs the calling of functions or what's happening in the program that's a good one to add here and then obviously validating input and checking return values and stuff like that is always a good example of one you might want to use decorator so with that being said I hope you guys enjoyed if you have any questions as always leave them down below and with that being said I will see you in the next expert Python tutorial series
