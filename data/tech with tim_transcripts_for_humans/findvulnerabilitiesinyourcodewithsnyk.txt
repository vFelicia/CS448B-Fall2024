With timestamps:

00:00 - hello everybody and welcome to another
00:01 - youtube video so in today's video i'll
00:03 - be covering an important topic which is
00:05 - security in
00:06 - python now oftentimes we're writing code
00:09 - in python we're using packages that come
00:11 - from pi pi so something like flask or
00:13 - django
00:13 - now those are great but there's actually
00:15 - no security review that's required
00:17 - before these packages get uploaded to
00:19 - pipe
00:20 - and that means a lot of times when
00:21 - you're writing code you actually are
00:23 - using packages that have vulnerabilities
00:25 - in them
00:26 - in fact about 48 of python projects have
00:28 - security vulnerabilities
00:30 - and on average of those projects that
00:32 - have vulnerabilities they have over 30
00:34 - vulnerabilities in them
00:35 - now fortunately about 87 of those
00:38 - vulnerabilities have a known
00:39 - fix and in this video i'm going to show
00:41 - you an awesome tool called sneak that
00:43 - can help us detect
00:44 - the vulnerabilities on our code and then
00:46 - fix them so with that said
00:47 - let's dive in
00:52 - [Music]
00:57 - so as i mentioned in this video we're
00:59 - going to be using a tool called sneak
01:01 - now sneak is the sponsor of this video i
01:03 - do need to disclose that
01:05 - however like all sponsored videos on
01:07 - this channel i only do them if i think
01:09 - that the product platform technology
01:11 - whatever it is is genuinely useful
01:13 - and you guys can find some value from it
01:15 - and well this is no exception
01:16 - so i'm just going to spend a minute here
01:18 - talking about what sneak actually does
01:20 - then i'm going to show you the complete
01:21 - setup process which is relatively simple
01:24 - i'll run sneak on a few vulnerable
01:25 - applications then i'll show you some of
01:27 - its integrations related to github
01:29 - related to pycharm and all the other
01:31 - stuff it can really do
01:32 - so you can kind of think of sneak like
01:34 - grammarly for your code
01:36 - what it does is it scans your code reads
01:38 - through it and tells you if you have any
01:39 - vulnerabilities specifically in a lot of
01:41 - your packages right a lot of the
01:42 - dependencies that you're using
01:44 - now it doesn't really check dependencies
01:45 - it can also check docker containers
01:47 - infrastructure code and a few other
01:49 - things and it doesn't just work in
01:50 - python it works in a bunch of other
01:52 - languages as well
01:53 - and one of the great things with sneak
01:54 - is that it integrates with pycharm a few
01:56 - other editors
01:57 - and also has an integration with github
02:00 - so you can actually link and connect
02:01 - your github repositories
02:03 - and sneak can automatically put up pull
02:05 - requests to fix any vulnerabilities that
02:06 - you have
02:07 - so almost all of the vulnerabilities
02:08 - that it will show you it will actually
02:10 - give you recommendations
02:11 - on how to fix those vulnerabilities
02:13 - which is really what makes this product
02:15 - useful if it just told you the
02:16 - vulnerabilities that's not super super
02:18 - helpful but it actually tells you how to
02:19 - go about fixing them
02:20 - so with that said let's get started with
02:22 - sneak again you can click the links in
02:24 - the description to check it out
02:25 - but the first thing i'm going to do here
02:27 - is i'm just going to create an account
02:28 - on the website which is necessary
02:30 - then i'm going to download the cli the
02:32 - command line interface tool
02:33 - and run you through some of the basic
02:34 - commands that it has so as i was saying
02:36 - step one here is to create an account
02:38 - do that from the link in the description
02:40 - i've already created an account and
02:42 - since i've created an account what i'm
02:43 - going to do is press
02:44 - log in and it's going to bring me to the
02:46 - sneak dashboard
02:48 - now you can see here that's already
02:49 - showing me some of the vulnerabilities i
02:51 - have in my different github repositories
02:53 - that i've linked here
02:54 - and also some of the projects i've
02:55 - opened on my computer previously
02:57 - i'm not going to focus on this right now
02:59 - you guys can kind of mess around and
03:00 - just see exactly what it can do and it
03:02 - should
03:02 - walk you through kind of the basic setup
03:04 - process which is relatively simple the
03:06 - only thing i'd recommend you do is
03:08 - connect your github account
03:09 - with sneak that'll just make things a
03:11 - lot easier anyways
03:12 - once we've made our account with sneak
03:14 - what we want to do is install the cli
03:17 - uh i guess it's just called the cli the
03:19 - sneak cli this is kind of the tool
03:21 - that works on the command line interface
03:23 - now i'll leave this link in the
03:25 - description as well this is a different
03:26 - link
03:26 - than the first one but there's multiple
03:28 - ways to install this cli tool
03:30 - so i'm going to install it using npm but
03:32 - you can install it with pre-built
03:34 - binaries with a container with home brew
03:36 - or with the windows scope package
03:38 - manager again the link for this will be
03:40 - in the description
03:41 - so i'm going to use npm this is probably
03:43 - the easiest way at least from what i can
03:45 - read here
03:46 - and to use npm you're going to need
03:48 - nodejs so first if you don't already
03:50 - have it
03:51 - go and install node.js i'll leave this
03:54 - link in the description as well
03:56 - and then what you're going to do is copy
03:58 - this command right here npm install
04:00 - hyphen g
04:01 - hyphen g standing for global and then
04:04 - sneak so if you're on mac or windows it
04:05 - should be the same thing
04:07 - install node.js open up your command
04:09 - prompt or terminal
04:10 - paste in this command run it and that
04:12 - should install
04:13 - the cli tools for sneak all right so i
04:16 - already had sneak installed but you can
04:18 - see that it just updated i guess there
04:19 - was a new version since i last
04:21 - installed it and now that we've
04:22 - installed these sneak cli tools what we
04:25 - need to do is authenticate ourselves
04:26 - with
04:27 - sneak so to do this is quite simple you
04:29 - simply type sneak
04:31 - and then auth and it should bring up a
04:33 - web page
04:34 - that gets you to connect your sneak
04:36 - account with uh your cli tool
04:38 - so here you just press authenticate and
04:40 - then there you go it says
04:42 - it's authenticated and we can create a
04:43 - snapshot of our project by running
04:45 - sneak monitor i'll go through what that
04:47 - command does in a minute okay so when i
04:48 - come back here it says your account has
04:50 - been authenticated
04:51 - so what i'm going to do now is actually
04:52 - open up a vulnerable python project
04:54 - and show you what sneak can do and all
04:56 - of the vulnerabilities it finds
04:58 - all right so i just opened up the
04:59 - application in pycharm that i'm going to
05:01 - be testing sneak with now this is
05:03 - designed by the sneak team and it's an
05:05 - intentionally vulnerable python
05:07 - application
05:08 - called pygo so i've got the github
05:10 - repository open
05:11 - i'll leave this link in the description
05:12 - as well in case you want to mess around
05:14 - with it
05:14 - but essentially this is a django
05:16 - application it has a few different
05:17 - vulnerabilities in it and
05:19 - we're just going to see how well sneak
05:20 - actually identifies them and picks them
05:22 - up
05:22 - when i run the command in pycharm now
05:24 - i've already done all the setup stuff to
05:26 - be able to run this application
05:27 - we don't really need to run it i'm just
05:29 - trying to show you the vulnerabilities
05:30 - so i'm going to skip over those steps if
05:32 - you guys want to run it you can follow
05:33 - the steps here it's pretty
05:34 - straightforward
05:35 - all right so pygo that's what i'm using
05:37 - you can see i have it open here
05:39 - and this actually has a docker file
05:41 - which we'll be testing later on
05:43 - as well as just your standard kind of
05:44 - python environment and so i haven't ran
05:46 - this with docker i've just ran it by
05:48 - installing the python packages that i
05:50 - need
05:50 - or set it up by installing the python
05:52 - packages that i need so the reason i'm
05:53 - using pycharm here is actually because
05:55 - sneak has a plug-in slash extension
05:57 - for pycharm so i'm going to quickly show
05:59 - you how to install that in case you want
06:01 - it
06:01 - and then of course i'll run through the
06:03 - cli commands so you can see i have the
06:05 - sneak extension down here it's kind of
06:07 - highlighted in the bottom bar
06:08 - well if you want to install that in
06:09 - pycharm you go to file you go to
06:12 - settings
06:12 - you go to plugins and then you type in
06:15 - sneak and while you can see it right
06:16 - here i already have it installed
06:19 - there you go that's as easy as that is
06:21 - now i'm just going to quickly pop up the
06:23 - sneak
06:24 - plug-in here and show you kind of how it
06:25 - works so you can see we have critical
06:27 - high medium and low as the kind of
06:29 - filters for the severity of the
06:31 - different vulnerabilities i can find
06:32 - and well if i want to run the scan i can
06:34 - simply press run scan
06:36 - it's going to scan my project and it's
06:37 - going to show me all of the
06:38 - vulnerabilities
06:39 - so let's give this a second to run once
06:41 - it's finished i'll be back and we'll
06:42 - walk through the vulnerabilities all
06:44 - right so there we go we can see we got
06:45 - 10 vulnerabilities here
06:47 - one critical three high three medium and
06:49 - three low
06:50 - i'll press on to a few of them and you
06:51 - can kind of see we have this issue
06:53 - with web cache poisoning we have
06:55 - improper input validation
06:57 - and then it's showing us where these
06:59 - issues are actually fixed so it says
07:00 - okay
07:01 - fixed in django whatever versions these
07:03 - are it was introduced in
07:04 - these versions here and then down here
07:06 - you can see this little overview it
07:07 - gives you a description of
07:09 - django and then a description of the
07:11 - actual vulnerability and kind of how you
07:13 - can
07:13 - fix that vulnerability so you may have
07:15 - noticed as i was doing this scan that
07:16 - the code security and code quality down
07:18 - here
07:19 - say disabled for your organization now
07:21 - i'm going to quickly show you how we can
07:22 - enable those
07:23 - you should be able to enable them when
07:24 - you first set up sneak but in case you
07:26 - didn't and you need to re-enable them
07:28 - later
07:28 - what you can do is open up the plugin
07:30 - window go to the kind of
07:32 - wrench here which is the sneak settings
07:34 - it will bring you to this page
07:35 - and notice you can't even check these
07:37 - two boxes and that's because it's
07:38 - disabled by my organization
07:40 - and the organization is kind of the
07:41 - account i created when i first signed up
07:43 - with sneak so what i'm going to do is
07:45 - press on this hyperlink here
07:46 - it's going to bring me to a web page and
07:48 - notice here there's this little uh kind
07:50 - of window that says enable sneak code
07:52 - so what i'm going to do is enable sneak
07:54 - code save this and it says after being
07:56 - enabled you must
07:58 - import or re-import projects to scan
07:59 - them okay makes sense
08:01 - so let me close this window here and now
08:04 - notice how i can check
08:05 - code security and code quality so i'm
08:07 - going to check both of those
08:09 - press apply and then ok and now i'm
08:11 - going to rescan my project and see if it
08:13 - gives me any security or quality issues
08:15 - so let's scan this once it's done i'll
08:17 - be right back all right so the scan has
08:19 - now finished and notice that i have 18
08:21 - vulnerabilities for code security
08:23 - and i have uh what is it code quality i
08:26 - have two issues right here in app.pi
08:28 - and view stop pi i won't go through all
08:30 - of these but let's just have a look at
08:31 - one and see if it gives me any fixes
08:32 - uh so if i go to something like this
08:35 - sensitive cookie in https session
08:37 - without secure attribute
08:39 - notice it kind of gives me a description
08:40 - right the cookie secure flag is set to
08:42 - false
08:42 - that actually tells me what the fix
08:44 - would be here so it says this issue is
08:46 - fixed in 18 projects
08:47 - here are three example files then i can
08:49 - click through them and kind of see what
08:51 - the change would actually be
08:52 - and how i will fix that security issue
08:55 - now let's just have a look at code
08:56 - quality here and see what we get app.hi
08:58 - missing close for open add close or use
09:01 - a with block
09:02 - okay nice so it's saying i didn't close
09:03 - the file that i had opened so i need to
09:05 - close that that's always a nice thing to
09:06 - have
09:07 - caught for you all right so that's how
09:08 - you enable the code security and code
09:10 - quality checks now what i'm going to do
09:12 - is show you some of the sneak cli
09:14 - commands that don't involve this plugin
09:16 - because we're not always going to be
09:18 - using this plugin when we're working
09:19 - with sneak
09:20 - so i'm going to open up the terminal
09:21 - here i'll zoom in so you guys can read
09:23 - this
09:24 - actually let's see can i make this any
09:26 - larger okay not right now
09:27 - and i'll just show you the sneak cli
09:30 - commands so it's pretty basic we already
09:32 - authenticated with sneak
09:33 - off the next one we can run is sneak and
09:36 - then
09:36 - test and what this will do is again scan
09:39 - the application and show you any
09:40 - vulnerabilities so sneak test
09:42 - let's run that and let's wait for the
09:44 - output all right so there we go the
09:46 - command has finished and you can see it
09:48 - found one issue
09:49 - two vulnerable paths says issues to fix
09:52 - my upgrading dependency so this is one
09:53 - of the issues we can actually fix
09:55 - it says there's an sql injection this is
09:58 - a new
09:58 - high severity vulnerability gives you a
10:01 - link to where you can actually read
10:02 - about it
10:03 - and then it says this is in django
10:05 - 3.1.12
10:06 - it was introduced by that and uh one
10:08 - other path then it tells us the way that
10:10 - we can fix this is by upgrading django
10:12 - to 3.1.13 so let's actually go ahead and
10:16 - try that and see if that removes the
10:17 - vulnerability
10:18 - so i'm going to go to requirements.txt
10:20 - i'm going to go to django
10:22 - i'm just going to change that to 0.3 it
10:24 - says package requirement is not
10:25 - satisfied okay i'll just install the
10:27 - requirement
10:28 - once that's done we'll re rerun the
10:30 - command story and see if this
10:32 - worked all right the package has been
10:33 - installed let me rerun
10:35 - sneak test and let's see what our output
10:37 - is this time
10:38 - ideally we should no longer see that
10:40 - vulnerability because well we fixed it
10:42 - and there you go tested 32 dependencies
10:44 - for known issues
10:44 - no vulnerable paths found and that is
10:47 - obviously because well we fixed
10:49 - the the issue the vulnerability okay now
10:51 - the next command i'm going to show you
10:52 - here is called sneak monitor
10:54 - now this one is a little bit different
10:56 - but when i type this what's actually
10:58 - going to happen
10:59 - is my project that i'm working on here
11:01 - locally is kind of going to get
11:03 - scanned and uploaded to the sneak ui or
11:06 - the sneak platform
11:07 - anyways it's easier for me to show you
11:09 - but when i run sneak monitor if i spell
11:11 - sneak correctly you're going to see that
11:13 - it gives me a url
11:15 - and that url has all of the information
11:17 - related to
11:18 - kind of the current snapshot and time of
11:20 - this project and its vulnerabilities
11:22 - so it says it's going to be monitoring
11:24 - this now on the sneak
11:25 - ui or the sneak platform and if i go
11:28 - here
11:29 - and i open up this url so let's go ahead
11:31 - and open it
11:32 - you can see that i have my pi go project
11:34 - this is locally on my machine it's
11:36 - monitoring it it says the snapshot was
11:38 - taken a few seconds ago
11:39 - i can retest it by actually pressing
11:41 - right here on the ui
11:42 - and that will retest it on my local
11:45 - machine which is pretty cool obviously
11:46 - assuming i have
11:47 - internet connection and then when i go
11:49 - here it's saying okay there's no issues
11:51 - found and then it can actually show me
11:53 - the entire dependency tree of this
11:56 - application
11:57 - so there you go that was just kind of a
11:58 - quick view at what sneak monitor does
12:01 - so the command you're going to be
12:02 - running a lot is probably sneak test and
12:03 - then you run sneak monitor if you want
12:05 - to actually take a snapshot of the
12:06 - project
12:07 - have it uploaded to the ui and then well
12:09 - be monitored by the actual sneak
12:11 - platform
12:12 - alright so now that i've showed you the
12:13 - basic sneak cli commands the ones that
12:15 - are most popular that you're going to be
12:16 - using most of the time i'm going to
12:18 - quickly show you how you can test
12:19 - infrastructure code and your docker
12:22 - images or docker files using
12:24 - sneak so i'm what i'm going to do here
12:25 - is go inside of this infrastructure
12:27 - folder
12:28 - you can see this is application load
12:29 - balancer folder and to give you a quick
12:31 - summary of what this is
12:33 - this project here can be deployed out to
12:35 - aws to a load balancer
12:37 - and there's some python code that's
12:39 - written that actually generates a
12:40 - template that is kind of the
12:42 - configuration for the load balancer on
12:44 - aws
12:45 - so here application load balancer we
12:47 - have this app.pi
12:48 - file and then inside of the cd cdk
12:51 - cdk.out folder this uses aws cdk
12:54 - you can see there's this
12:57 - loadbalancerstack.template.json
12:58 - that's generated from this python code
13:00 - so what sneak allows you to do is
13:02 - test this stuff before you go and deploy
13:04 - it to make sure you don't have any
13:05 - misconfigurations
13:07 - in your templates or yeah your
13:09 - configurations for your load balancer in
13:11 - this case
13:12 - so the way you actually go test this is
13:14 - you go to your terminal
13:16 - you change into the infrastructure
13:18 - directory you go into
13:20 - the application load balancer directory
13:21 - and then you run the following command
13:24 - this is sneak i ac so infrastructure as
13:27 - code then test then followed by the path
13:31 - to the template that you want to test so
13:32 - in this case i want to test this
13:34 - template so this is in cd key
13:36 - cdkstory.out slash and then load
13:39 - balancer stack dot template
13:43 - dot json so let's run this it's going to
13:46 - take a second and it's going to show us
13:47 - if there's any security
13:48 - misconfigurations
13:49 - in this template all right so just ran
13:52 - you can see that we actually found
13:53 - nine issues here and if i go here it
13:56 - shows me all of them right
13:58 - so i believe the ones highlighted in
13:59 - gray are low severity low severity
14:01 - we have mediums medium severity ones
14:03 - here i'm not really going to talk about
14:04 - exactly what these are
14:06 - but i just want to show you in case
14:07 - you're someone who is deploying stuff to
14:09 - aws or wherever it may be that you can
14:12 - test your code before you deploy it
14:13 - obviously to make sure you're not
14:14 - deploying something that potentially has
14:16 - some security issues with it
14:18 - all right one thing i will quickly
14:20 - mention is this also is deployed or
14:22 - uses kubernetes so there's a bunch of
14:24 - kubernetes configuration or yaml files
14:26 - here
14:26 - you can also use sneak to test those
14:28 - i'll refer you the documentation
14:30 - if you would like to do that and the
14:32 - last thing i will now show you is how
14:34 - you can test your docker files and
14:36 - docker images
14:37 - using sneak so i've not actually ran
14:40 - this application with docker i've not
14:42 - pulled a docker container or anything
14:43 - like
14:44 - that so what i'm going to do is actually
14:45 - show you a website
14:47 - this is a part of sneak it's called
14:49 - sneak advisor
14:50 - and what this lets you do i got to find
14:52 - it right here is actually look at
14:53 - different docker images and find any
14:55 - vulnerabilities in them
14:57 - and also gives you recommended
14:59 - alternative docker images that are
15:01 - better for your use case
15:02 - so in this case we can see that we have
15:04 - the python 3.8 docker image
15:07 - well it's telling us that in this image
15:09 - right here we have 30 high severity
15:11 - issues
15:12 - 53 medium and 270 low severity issues
15:15 - the last update was one day ago and it's
15:18 - 339 megabytes
15:20 - obviously not the most ideal thing in
15:22 - the world also shows us the stars and
15:24 - the number of downloads jesus that is
15:25 - that's a lot of downloads
15:27 - but what it does here is it shows us
15:29 - what we can use instead
15:30 - that's going to be more secure and also
15:32 - slimmer right so has
15:34 - less space or less uh yeah less storage
15:36 - less space whatever you want to call it
15:38 - so in this case we can see we have two
15:40 - recommended alternatives
15:41 - python 3.9.6 and then this is 43.5
15:45 - megabytes and
15:46 - then python 3.10.0 before slim
15:50 - which is 43.6 megabytes we can click
15:53 - into these we can see their
15:54 - vulnerabilities as well
15:55 - but they are more secure and smaller so
15:57 - we may consider using that
15:59 - instead of python version 3.8 if we were
16:01 - going to run this with docker but i
16:03 - didn't even run it with docker so
16:05 - there you go that's how you can do this
16:06 - this is sneak advisor everything i show
16:08 - you i will have
16:09 - linked in the description all right so
16:11 - i've now showed you how we can test our
16:13 - sneak application the basic code using
16:15 - sneak test and sneak monitor
16:16 - how we can test the infrastructure i
16:18 - briefly mentioned you can check
16:19 - kubernetes kubernetes related stuff as
16:22 - well and then finally i showed you how
16:24 - we can look at the docker stuff now
16:26 - there is some cli commands that you can
16:27 - use
16:28 - for kubernetes and for docker again i'll
16:31 - refer you the documentation
16:32 - all links in the description if you want
16:33 - to see what those are but of course you
16:35 - can also just use sneak advisor the
16:36 - website that i just showed you
16:38 - to look at you know vulnerabilities in
16:40 - the docker image
16:42 - all right so what i'm going to do now is
16:43 - i'm going to head over to github but
16:45 - first i'll actually go to my sneak
16:47 - dashboard and i'm going to show you how
16:49 - sneak integrates with github so you may
16:51 - recall at the beginning of the video i
16:53 - mentioned that sneak can
16:54 - automatically fix issues for you now the
16:57 - way it actually does that is when you
16:58 - link a github repositories to
17:01 - sneak it can actually put a pull request
17:03 - up that will automatically fix
17:04 - the vulnerability issues so i'm going to
17:06 - show you exactly how that works
17:08 - now the first thing we need to do is
17:09 - connect our sneak account with github
17:11 - i've already done that i assume you
17:12 - would have done that as well
17:14 - then we need to add a github project to
17:16 - sneak so click on add project
17:18 - from the sneak dashboard click on github
17:21 - and then you can look at all of your
17:22 - different repositories so i've already
17:25 - added a few repositories here i'm going
17:26 - to try to find one let's go with flask
17:28 - web app tutorial and let's see if
17:30 - there's any vulnerabilities in here then
17:31 - we can have sneak put a pull request up
17:33 - to fix
17:34 - all right let's give it a second here
17:36 - it's just scanning this once it's done
17:38 - scanning i'll see if we can fix any
17:39 - vulnerabilities
17:40 - all right so fortunately that one didn't
17:42 - have any vulnerabilities kind of failed
17:43 - for my example but let me just connect a
17:46 - different github repository here
17:48 - and see if we can find one that does
17:50 - have some issues with it all right so i
17:52 - finally found a project that has some
17:53 - vulnerabilities in it that sneak can fix
17:55 - it's the coronavirus voice assistant
17:57 - i'll click into it here
17:59 - and notice it says i can fix these
18:00 - vulnerabilities so the vulnerability is
18:02 - in url lib3
18:04 - but if i want to fix this i can press on
18:06 - the fix vulnerabilities button
18:08 - and what this should do is bring up a
18:09 - page that actually opens a new poll
18:11 - request for me
18:12 - that automatically fixes this issue in
18:15 - my github repository
18:16 - so there we are we can see that this is
18:18 - the page right here it says open a fix
18:20 - pr so let me go ahead and press on that
18:22 - and then let's have a look at the pr
18:24 - that sneak actually puts up
18:25 - so it's redirected me here to my github
18:28 - repository we can see in pull requests
18:30 - it has created a new one here
18:31 - so sneak has created this pr to fix one
18:33 - or more vulnerable packages
18:35 - uh in this pip dependencies of this
18:37 - project goes through gives me a warning
18:39 - shows me what is actually happening
18:41 - gives me a ton of detail here
18:43 - and then obviously i'm the owner of this
18:44 - so i could merge this pull request in so
18:46 - let's go ahead and do that
18:48 - and let's see if this now fixes the
18:49 - vulnerabilities i mean it should so if i
18:51 - go to files change we can see all it
18:52 - does is change the version of url lib to
18:55 - make it one that doesn't have those
18:56 - vulnerabilities in it and well i
18:58 - wouldn't have known that was an issue
18:59 - unless i was using
19:00 - sneak so i think with that said i'm
19:02 - going to end
19:03 - the video here there's a lot more that
19:05 - you can do with sneak and i would highly
19:07 - recommend you check it out again you can
19:08 - do that from the link in the description
19:10 - that has kind of been a general overview
19:12 - of how the product slash platform works
19:14 - and really how it can help you find and
19:16 - fix vulnerabilities in
19:18 - your code of course sneak works for
19:20 - other programming languages as well
19:21 - this video is kind of more focused on
19:23 - python because i know that's what a lot
19:24 - of you guys write in and what i write in
19:26 - most of the time so with that said if
19:28 - you guys enjoyed make sure to leave a
19:29 - like
19:29 - subscribe to the channel one last thanks
19:31 - to sneak for sponsoring this video and i
19:33 - will see you
19:34 - in another one
19:43 - you

Cleaned transcript:

hello everybody and welcome to another youtube video so in today's video i'll be covering an important topic which is security in python now oftentimes we're writing code in python we're using packages that come from pi pi so something like flask or django now those are great but there's actually no security review that's required before these packages get uploaded to pipe and that means a lot of times when you're writing code you actually are using packages that have vulnerabilities in them in fact about 48 of python projects have security vulnerabilities and on average of those projects that have vulnerabilities they have over 30 vulnerabilities in them now fortunately about 87 of those vulnerabilities have a known fix and in this video i'm going to show you an awesome tool called sneak that can help us detect the vulnerabilities on our code and then fix them so with that said let's dive in so as i mentioned in this video we're going to be using a tool called sneak now sneak is the sponsor of this video i do need to disclose that however like all sponsored videos on this channel i only do them if i think that the product platform technology whatever it is is genuinely useful and you guys can find some value from it and well this is no exception so i'm just going to spend a minute here talking about what sneak actually does then i'm going to show you the complete setup process which is relatively simple i'll run sneak on a few vulnerable applications then i'll show you some of its integrations related to github related to pycharm and all the other stuff it can really do so you can kind of think of sneak like grammarly for your code what it does is it scans your code reads through it and tells you if you have any vulnerabilities specifically in a lot of your packages right a lot of the dependencies that you're using now it doesn't really check dependencies it can also check docker containers infrastructure code and a few other things and it doesn't just work in python it works in a bunch of other languages as well and one of the great things with sneak is that it integrates with pycharm a few other editors and also has an integration with github so you can actually link and connect your github repositories and sneak can automatically put up pull requests to fix any vulnerabilities that you have so almost all of the vulnerabilities that it will show you it will actually give you recommendations on how to fix those vulnerabilities which is really what makes this product useful if it just told you the vulnerabilities that's not super super helpful but it actually tells you how to go about fixing them so with that said let's get started with sneak again you can click the links in the description to check it out but the first thing i'm going to do here is i'm just going to create an account on the website which is necessary then i'm going to download the cli the command line interface tool and run you through some of the basic commands that it has so as i was saying step one here is to create an account do that from the link in the description i've already created an account and since i've created an account what i'm going to do is press log in and it's going to bring me to the sneak dashboard now you can see here that's already showing me some of the vulnerabilities i have in my different github repositories that i've linked here and also some of the projects i've opened on my computer previously i'm not going to focus on this right now you guys can kind of mess around and just see exactly what it can do and it should walk you through kind of the basic setup process which is relatively simple the only thing i'd recommend you do is connect your github account with sneak that'll just make things a lot easier anyways once we've made our account with sneak what we want to do is install the cli uh i guess it's just called the cli the sneak cli this is kind of the tool that works on the command line interface now i'll leave this link in the description as well this is a different link than the first one but there's multiple ways to install this cli tool so i'm going to install it using npm but you can install it with prebuilt binaries with a container with home brew or with the windows scope package manager again the link for this will be in the description so i'm going to use npm this is probably the easiest way at least from what i can read here and to use npm you're going to need nodejs so first if you don't already have it go and install node.js i'll leave this link in the description as well and then what you're going to do is copy this command right here npm install hyphen g hyphen g standing for global and then sneak so if you're on mac or windows it should be the same thing install node.js open up your command prompt or terminal paste in this command run it and that should install the cli tools for sneak all right so i already had sneak installed but you can see that it just updated i guess there was a new version since i last installed it and now that we've installed these sneak cli tools what we need to do is authenticate ourselves with sneak so to do this is quite simple you simply type sneak and then auth and it should bring up a web page that gets you to connect your sneak account with uh your cli tool so here you just press authenticate and then there you go it says it's authenticated and we can create a snapshot of our project by running sneak monitor i'll go through what that command does in a minute okay so when i come back here it says your account has been authenticated so what i'm going to do now is actually open up a vulnerable python project and show you what sneak can do and all of the vulnerabilities it finds all right so i just opened up the application in pycharm that i'm going to be testing sneak with now this is designed by the sneak team and it's an intentionally vulnerable python application called pygo so i've got the github repository open i'll leave this link in the description as well in case you want to mess around with it but essentially this is a django application it has a few different vulnerabilities in it and we're just going to see how well sneak actually identifies them and picks them up when i run the command in pycharm now i've already done all the setup stuff to be able to run this application we don't really need to run it i'm just trying to show you the vulnerabilities so i'm going to skip over those steps if you guys want to run it you can follow the steps here it's pretty straightforward all right so pygo that's what i'm using you can see i have it open here and this actually has a docker file which we'll be testing later on as well as just your standard kind of python environment and so i haven't ran this with docker i've just ran it by installing the python packages that i need or set it up by installing the python packages that i need so the reason i'm using pycharm here is actually because sneak has a plugin slash extension for pycharm so i'm going to quickly show you how to install that in case you want it and then of course i'll run through the cli commands so you can see i have the sneak extension down here it's kind of highlighted in the bottom bar well if you want to install that in pycharm you go to file you go to settings you go to plugins and then you type in sneak and while you can see it right here i already have it installed there you go that's as easy as that is now i'm just going to quickly pop up the sneak plugin here and show you kind of how it works so you can see we have critical high medium and low as the kind of filters for the severity of the different vulnerabilities i can find and well if i want to run the scan i can simply press run scan it's going to scan my project and it's going to show me all of the vulnerabilities so let's give this a second to run once it's finished i'll be back and we'll walk through the vulnerabilities all right so there we go we can see we got 10 vulnerabilities here one critical three high three medium and three low i'll press on to a few of them and you can kind of see we have this issue with web cache poisoning we have improper input validation and then it's showing us where these issues are actually fixed so it says okay fixed in django whatever versions these are it was introduced in these versions here and then down here you can see this little overview it gives you a description of django and then a description of the actual vulnerability and kind of how you can fix that vulnerability so you may have noticed as i was doing this scan that the code security and code quality down here say disabled for your organization now i'm going to quickly show you how we can enable those you should be able to enable them when you first set up sneak but in case you didn't and you need to reenable them later what you can do is open up the plugin window go to the kind of wrench here which is the sneak settings it will bring you to this page and notice you can't even check these two boxes and that's because it's disabled by my organization and the organization is kind of the account i created when i first signed up with sneak so what i'm going to do is press on this hyperlink here it's going to bring me to a web page and notice here there's this little uh kind of window that says enable sneak code so what i'm going to do is enable sneak code save this and it says after being enabled you must import or reimport projects to scan them okay makes sense so let me close this window here and now notice how i can check code security and code quality so i'm going to check both of those press apply and then ok and now i'm going to rescan my project and see if it gives me any security or quality issues so let's scan this once it's done i'll be right back all right so the scan has now finished and notice that i have 18 vulnerabilities for code security and i have uh what is it code quality i have two issues right here in app.pi and view stop pi i won't go through all of these but let's just have a look at one and see if it gives me any fixes uh so if i go to something like this sensitive cookie in https session without secure attribute notice it kind of gives me a description right the cookie secure flag is set to false that actually tells me what the fix would be here so it says this issue is fixed in 18 projects here are three example files then i can click through them and kind of see what the change would actually be and how i will fix that security issue now let's just have a look at code quality here and see what we get app.hi missing close for open add close or use a with block okay nice so it's saying i didn't close the file that i had opened so i need to close that that's always a nice thing to have caught for you all right so that's how you enable the code security and code quality checks now what i'm going to do is show you some of the sneak cli commands that don't involve this plugin because we're not always going to be using this plugin when we're working with sneak so i'm going to open up the terminal here i'll zoom in so you guys can read this actually let's see can i make this any larger okay not right now and i'll just show you the sneak cli commands so it's pretty basic we already authenticated with sneak off the next one we can run is sneak and then test and what this will do is again scan the application and show you any vulnerabilities so sneak test let's run that and let's wait for the output all right so there we go the command has finished and you can see it found one issue two vulnerable paths says issues to fix my upgrading dependency so this is one of the issues we can actually fix it says there's an sql injection this is a new high severity vulnerability gives you a link to where you can actually read about it and then it says this is in django 3.1.12 it was introduced by that and uh one other path then it tells us the way that we can fix this is by upgrading django to 3.1.13 so let's actually go ahead and try that and see if that removes the vulnerability so i'm going to go to requirements.txt i'm going to go to django i'm just going to change that to 0.3 it says package requirement is not satisfied okay i'll just install the requirement once that's done we'll re rerun the command story and see if this worked all right the package has been installed let me rerun sneak test and let's see what our output is this time ideally we should no longer see that vulnerability because well we fixed it and there you go tested 32 dependencies for known issues no vulnerable paths found and that is obviously because well we fixed the the issue the vulnerability okay now the next command i'm going to show you here is called sneak monitor now this one is a little bit different but when i type this what's actually going to happen is my project that i'm working on here locally is kind of going to get scanned and uploaded to the sneak ui or the sneak platform anyways it's easier for me to show you but when i run sneak monitor if i spell sneak correctly you're going to see that it gives me a url and that url has all of the information related to kind of the current snapshot and time of this project and its vulnerabilities so it says it's going to be monitoring this now on the sneak ui or the sneak platform and if i go here and i open up this url so let's go ahead and open it you can see that i have my pi go project this is locally on my machine it's monitoring it it says the snapshot was taken a few seconds ago i can retest it by actually pressing right here on the ui and that will retest it on my local machine which is pretty cool obviously assuming i have internet connection and then when i go here it's saying okay there's no issues found and then it can actually show me the entire dependency tree of this application so there you go that was just kind of a quick view at what sneak monitor does so the command you're going to be running a lot is probably sneak test and then you run sneak monitor if you want to actually take a snapshot of the project have it uploaded to the ui and then well be monitored by the actual sneak platform alright so now that i've showed you the basic sneak cli commands the ones that are most popular that you're going to be using most of the time i'm going to quickly show you how you can test infrastructure code and your docker images or docker files using sneak so i'm what i'm going to do here is go inside of this infrastructure folder you can see this is application load balancer folder and to give you a quick summary of what this is this project here can be deployed out to aws to a load balancer and there's some python code that's written that actually generates a template that is kind of the configuration for the load balancer on aws so here application load balancer we have this app.pi file and then inside of the cd cdk cdk.out folder this uses aws cdk you can see there's this loadbalancerstack.template.json that's generated from this python code so what sneak allows you to do is test this stuff before you go and deploy it to make sure you don't have any misconfigurations in your templates or yeah your configurations for your load balancer in this case so the way you actually go test this is you go to your terminal you change into the infrastructure directory you go into the application load balancer directory and then you run the following command this is sneak i ac so infrastructure as code then test then followed by the path to the template that you want to test so in this case i want to test this template so this is in cd key cdkstory.out slash and then load balancer stack dot template dot json so let's run this it's going to take a second and it's going to show us if there's any security misconfigurations in this template all right so just ran you can see that we actually found nine issues here and if i go here it shows me all of them right so i believe the ones highlighted in gray are low severity low severity we have mediums medium severity ones here i'm not really going to talk about exactly what these are but i just want to show you in case you're someone who is deploying stuff to aws or wherever it may be that you can test your code before you deploy it obviously to make sure you're not deploying something that potentially has some security issues with it all right one thing i will quickly mention is this also is deployed or uses kubernetes so there's a bunch of kubernetes configuration or yaml files here you can also use sneak to test those i'll refer you the documentation if you would like to do that and the last thing i will now show you is how you can test your docker files and docker images using sneak so i've not actually ran this application with docker i've not pulled a docker container or anything like that so what i'm going to do is actually show you a website this is a part of sneak it's called sneak advisor and what this lets you do i got to find it right here is actually look at different docker images and find any vulnerabilities in them and also gives you recommended alternative docker images that are better for your use case so in this case we can see that we have the python 3.8 docker image well it's telling us that in this image right here we have 30 high severity issues 53 medium and 270 low severity issues the last update was one day ago and it's 339 megabytes obviously not the most ideal thing in the world also shows us the stars and the number of downloads jesus that is that's a lot of downloads but what it does here is it shows us what we can use instead that's going to be more secure and also slimmer right so has less space or less uh yeah less storage less space whatever you want to call it so in this case we can see we have two recommended alternatives python 3.9.6 and then this is 43.5 megabytes and then python 3.10.0 before slim which is 43.6 megabytes we can click into these we can see their vulnerabilities as well but they are more secure and smaller so we may consider using that instead of python version 3.8 if we were going to run this with docker but i didn't even run it with docker so there you go that's how you can do this this is sneak advisor everything i show you i will have linked in the description all right so i've now showed you how we can test our sneak application the basic code using sneak test and sneak monitor how we can test the infrastructure i briefly mentioned you can check kubernetes kubernetes related stuff as well and then finally i showed you how we can look at the docker stuff now there is some cli commands that you can use for kubernetes and for docker again i'll refer you the documentation all links in the description if you want to see what those are but of course you can also just use sneak advisor the website that i just showed you to look at you know vulnerabilities in the docker image all right so what i'm going to do now is i'm going to head over to github but first i'll actually go to my sneak dashboard and i'm going to show you how sneak integrates with github so you may recall at the beginning of the video i mentioned that sneak can automatically fix issues for you now the way it actually does that is when you link a github repositories to sneak it can actually put a pull request up that will automatically fix the vulnerability issues so i'm going to show you exactly how that works now the first thing we need to do is connect our sneak account with github i've already done that i assume you would have done that as well then we need to add a github project to sneak so click on add project from the sneak dashboard click on github and then you can look at all of your different repositories so i've already added a few repositories here i'm going to try to find one let's go with flask web app tutorial and let's see if there's any vulnerabilities in here then we can have sneak put a pull request up to fix all right let's give it a second here it's just scanning this once it's done scanning i'll see if we can fix any vulnerabilities all right so fortunately that one didn't have any vulnerabilities kind of failed for my example but let me just connect a different github repository here and see if we can find one that does have some issues with it all right so i finally found a project that has some vulnerabilities in it that sneak can fix it's the coronavirus voice assistant i'll click into it here and notice it says i can fix these vulnerabilities so the vulnerability is in url lib3 but if i want to fix this i can press on the fix vulnerabilities button and what this should do is bring up a page that actually opens a new poll request for me that automatically fixes this issue in my github repository so there we are we can see that this is the page right here it says open a fix pr so let me go ahead and press on that and then let's have a look at the pr that sneak actually puts up so it's redirected me here to my github repository we can see in pull requests it has created a new one here so sneak has created this pr to fix one or more vulnerable packages uh in this pip dependencies of this project goes through gives me a warning shows me what is actually happening gives me a ton of detail here and then obviously i'm the owner of this so i could merge this pull request in so let's go ahead and do that and let's see if this now fixes the vulnerabilities i mean it should so if i go to files change we can see all it does is change the version of url lib to make it one that doesn't have those vulnerabilities in it and well i wouldn't have known that was an issue unless i was using sneak so i think with that said i'm going to end the video here there's a lot more that you can do with sneak and i would highly recommend you check it out again you can do that from the link in the description that has kind of been a general overview of how the product slash platform works and really how it can help you find and fix vulnerabilities in your code of course sneak works for other programming languages as well this video is kind of more focused on python because i know that's what a lot of you guys write in and what i write in most of the time so with that said if you guys enjoyed make sure to leave a like subscribe to the channel one last thanks to sneak for sponsoring this video and i will see you in another one you
