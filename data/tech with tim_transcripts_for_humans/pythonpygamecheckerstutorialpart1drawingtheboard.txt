With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome to a brand
00:10 - new tutorial series where we're going to
00:12 - be building the checkers game
00:14 - in python with pygame now if you don't
00:16 - know pygame that's totally fine it's a
00:18 - module in python that lets us build 2d
00:21 - games
00:21 - what i'll be doing in this series is
00:23 - walking you through everything that we
00:24 - need to do
00:25 - to build a full-fledged checkers game
00:27 - now i'm actually quite excited about
00:29 - this because this is going to be leading
00:30 - me up to another series i'm going to be
00:32 - doing
00:32 - which is talking about the mini max
00:34 - algorithm to actually make an ai
00:37 - that we can play checkers against so let
00:39 - me give you kind of a demo of what this
00:40 - should look like
00:41 - i've already built the game out and i
00:42 - will be not necessarily copying from my
00:45 - other screen but just having it up as a
00:46 - reference to make sure i don't get too
00:48 - lost
00:48 - you can see this is kind of the game of
00:50 - checkers the human player is red and
00:52 - then the other player obviously is white
00:54 - and you can see that we have an ai so
00:56 - the ai will automatically move
00:58 - based on the move that you do so let's
00:59 - see if i leave myself open here the ai
01:01 - oh
01:02 - decided actually not to capture me
01:03 - because i would capture it back
01:05 - and if we play this for a few minutes i
01:07 - won't go through all of it you'll notice
01:09 - that the ai
01:09 - is actually pretty decent and it
01:11 - actually can play pretty well against us
01:13 - so i'll be talking about how we can
01:15 - build this kind of ai
01:16 - of course after we've built the game in
01:18 - a separate series so stay tuned for that
01:21 - all right so that being said that's
01:23 - pretty much it
01:24 - all i want to say quickly is this is not
01:26 - a beginner tutorial series
01:28 - if you're an intermediate you've worked
01:29 - in python before that's awesome i'm
01:31 - going to try my best to teach you guys
01:33 - some news
01:34 - more advanced stuff in this series so
01:36 - yes we will be going through and just
01:37 - building the game but i'll be kind of
01:39 - throwing in some more advanced
01:40 - techniques and explaining how those work
01:42 - so you're definitely going to learn
01:44 - something other than just
01:45 - how to build checkers if you want to
01:46 - follow along with this all right so
01:48 - let's go ahead and get started
01:50 - the first thing we need to do is just
01:51 - install a package this
01:53 - is called pygame so we need pygame again
01:56 - which is the module that we're going to
01:57 - use to do all of the graphics
01:59 - so what you can do is open up a command
02:00 - prompt or open up a terminal
02:02 - and what you need to do is type pip if
02:04 - you're on windows or
02:05 - pip3 if you're on linux or if you're on
02:07 - mac so pip or pip 3 depending on your
02:10 - operating system
02:11 - and then the word install and then pi
02:14 - game
02:14 - so of course you need to already have
02:15 - python installed on your system for this
02:17 - to work but type pip or pip 3 install
02:19 - pygame that should go through and
02:21 - install this you can see for me it was
02:23 - already installed it says defaulting to
02:25 - user installation blah blah blah we
02:26 - already have it installed
02:28 - anyways if this did not work for you for
02:31 - some reason
02:31 - that probably means that pip is not in
02:33 - your system path
02:34 - so i will link a video in the
02:36 - description as well as i'll put a card
02:38 - in the corner here
02:39 - that will tell you how you can actually
02:41 - install and fix pip
02:43 - so follow along with that it won't be
02:44 - titled like how to fix pip but just
02:46 - trust me in that video it goes through
02:47 - and explains
02:48 - how to actually fix pip okay so once
02:51 - we've done that and we've installed
02:52 - pygame
02:53 - the first thing we're going to do is
02:54 - make a new python file you can see i'm
02:56 - using vs code for this tutorial series
02:59 - which is just the editor that we're
03:00 - going to use
03:01 - and let me just zoom in a bit so you
03:02 - guys can actually read what's going on
03:05 - uh but what we're going to do is make a
03:06 - new python file i've named mine main.pi
03:09 - and i'm putting that inside of this
03:10 - checkers tutorial folder here
03:12 - and i'm simply going to type import
03:14 - pygame like that
03:15 - and just make sure that this works so if
03:18 - you're working in vs code
03:20 - what you can do is install the python
03:21 - extension so if you go to this extension
03:23 - tab right here it's on the left-hand
03:25 - menu bar
03:26 - type python click here and install it
03:28 - then you'll be able to debug python
03:30 - scripts you'll
03:30 - run python scripts and everything should
03:32 - work out well for you
03:34 - so what i'm going to do here is just
03:35 - press this run button and this will
03:37 - simply run the current script that i'm
03:38 - on
03:39 - you can see that it says hello from
03:40 - pygame and that means that everything is
03:42 - working and pygame has been installed
03:44 - properly and we're good to get started
03:46 - so what we're going to do here is we're
03:48 - actually going to try to build kind of a
03:50 - module
03:51 - around the checkers game and then add
03:53 - kind of like an
03:54 - api i don't want to use big words to
03:56 - confuse anyone but an application
03:58 - programming interface on top of the game
04:01 - so that we can use it with an ai
04:03 - later on so you'll see what i mean by
04:05 - that as we go through but what i'm going
04:06 - to do right now is just make a new
04:08 - folder inside of my checkers folder and
04:10 - i'm just going to call this one
04:11 - checkers like this so inside of here
04:14 - what we're going to do is actually make
04:16 - a new file
04:16 - i'm going to call this underscore
04:18 - underscore init underscore
04:20 - underscore dot pi so two underscores and
04:22 - knit two underscores dot pi
04:24 - what this will do is initialize this
04:26 - folder here as a
04:27 - package or a module or whatever you want
04:30 - to call it
04:30 - and that will allow us to actually
04:32 - import stuff directly from this package
04:34 - in kind of a special way
04:36 - which we'll be doing later on now what
04:38 - we're also going to do
04:39 - is do an underscore underscore init
04:41 - underscore underscore dot pi
04:43 - inside of our upper level directory so i
04:45 - have main.pi anita pi and then checkers
04:48 - again that's inside of a folder right
04:50 - here so it's inside of this checkers
04:52 - tutorial folder that i have open and
04:54 - once we've done that we can go back to
04:56 - the main.pi script and now we can start
04:58 - actually writing a little bit of code
05:00 - so the first thing that i'm going to do
05:02 - here is i'm actually going to set up a
05:04 - pygame display
05:05 - this is where we're actually going to be
05:06 - drawing everything onto then we're going
05:08 - to set up like a basic
05:10 - event loop and what that's going to do
05:11 - is check if we press the mouse or if we
05:13 - press a certain key
05:14 - or whatever we're doing it's going to
05:16 - check for that and then once we've set
05:17 - up the main loop we can set up some
05:19 - basic drawing so essentially draw the
05:21 - board for the chessboard draw the pieces
05:23 - all of that
05:24 - and then start getting into the actual
05:26 - logic of the game
05:27 - so the first thing i'm going to do is
05:29 - i'm going to say win in all capitals
05:30 - because this is going to be a constant
05:32 - value
05:33 - is win dot display dot set underscore
05:36 - mode
05:36 - and inside of here i'm going to type
05:38 - width and then comma height
05:41 - now these are going to be two fair two
05:42 - variables that we are going to define
05:45 - and what i'm going to do now is go
05:46 - inside of this checkers folder that
05:48 - we've created
05:49 - i'm going to make another python file
05:51 - and i'm going to call this
05:52 - oops it's lowercase constants.pi
05:56 - so what i'm going to do is i'm going to
05:57 - put all the constant values
06:00 - inside of this file here so if we ever
06:02 - want to change anything we only need to
06:04 - go to one file and we can really quickly
06:06 - see all of the variables
06:07 - and we can change everything that we
06:08 - need to so inside of constant stop pi
06:11 - i'm going to import pi game we'll use
06:13 - that later on
06:14 - and now what i'm going to do is say
06:16 - width comma height
06:18 - equals 800 comma 800.
06:21 - if you haven't seen this type of way of
06:23 - defining variables it just means width
06:25 - is equal to 800 and height is equal to
06:27 - 800.
06:28 - now you can define this to be whatever
06:30 - you want but just keep in mind if you
06:32 - change this value you're going to have
06:33 - to change
06:34 - a few other ones accordingly so just
06:36 - maybe leave it the same but this is 800
06:38 - pixels high by 800 pixels wide
06:41 - next thing i'm going to do is define the
06:42 - amount of rows and columns we're going
06:44 - to have in our chess board
06:46 - so or checkers board sorry so we're
06:47 - gonna have eight by eight that is a
06:49 - standard checkers board so i'm gonna say
06:51 - eight by eight like that
06:52 - and then what i'm gonna do is i'm gonna
06:54 - say square underscore
06:55 - size so essentially how big is one
06:58 - square
06:59 - of our checkerboard and i'm gonna make
07:00 - that equal to the width
07:02 - integer divided by the rows now we could
07:05 - as well do
07:06 - the height divided by the columns or
07:08 - sorry what am i doing with sorry this
07:10 - should be width divided by calls
07:12 - not it's not going to make a difference
07:14 - but it makes more sense to do the width
07:16 - divided by the amount of columns rather
07:18 - than the width divided by the amount of
07:19 - rows
07:20 - so now we have a few constants here
07:21 - width height row calls
07:23 - square size while we're in this i'm just
07:25 - going to define
07:26 - a few variables for some different
07:27 - colors we're going to use so in pi game
07:29 - when we use
07:30 - colors they are red green and blue so
07:33 - rgb color codes so for red obviously
07:35 - we're going to do 255
07:36 - comma 0 comma 0. this means we're going
07:39 - to fill
07:40 - the entire amount of red we're going to
07:42 - have 0
07:43 - green and 0 blue and just so we know
07:47 - red green blue goes up to 255
07:49 - inclusively so you can use any value
07:51 - for these uh between 0 and 255. next
07:55 - we're going to do white
07:56 - white is simply 255 255 255
07:59 - and then we're gonna do black which is
08:01 - equal to
08:02 - zero zero zero
08:06 - and finally we're gonna do blue which
08:07 - we're gonna use to figure out
08:09 - what squares the person can move to that
08:11 - was those little blue dots you were
08:13 - seeing before if you remember when i ran
08:14 - the game
08:15 - it's going to be 0 0 255. so pretty
08:18 - straightforward
08:19 - i'll add a comment here to say rgb just
08:21 - so
08:22 - we understand that's what it's in and
08:24 - now we've kind of filled in the
08:25 - constants we'll do a few other things
08:27 - here later but
08:28 - we can skip that for right now so what i
08:31 - want to do
08:32 - is i actually want to import the
08:33 - constants that i defined here
08:35 - into this main.pi file so to do that is
08:38 - actually pretty simple
08:40 - what i can do is i can say from checkers
08:43 - dot constants import and then i can
08:47 - import the variables that i want which
08:49 - are width and height
08:50 - now the reason i can do this and i can
08:52 - reference checkers directly
08:54 - is because inside of checkers we added
08:56 - this init.pi
08:57 - file this init.pi file tells us that hey
09:00 - this
09:01 - folder is actually a python package and
09:04 - because of that we can import specific
09:05 - things from it
09:07 - so just to show you if i went inside
09:09 - this init.pi file
09:10 - and i said from constants
09:13 - import star so that means import
09:15 - everything from constants
09:17 - what i would actually have to do now if
09:18 - i wanted to import width and height is
09:20 - simply say
09:21 - from checkers import width height the
09:24 - reason for that is because
09:25 - inside of the init up high i
09:28 - import everything from the constants
09:30 - file so what happens is as soon as i
09:32 - import this folder
09:33 - checkers it automatically runs this
09:36 - which means it will automatically import
09:38 - all the stuff inside of constants now
09:40 - we're not i'm not going to do that i'm
09:42 - going to get rid of this just because i
09:43 - don't want to
09:43 - confuse anyone if that doesn't make
09:45 - sense but
09:47 - that's kind of just the explanation
09:48 - there and i figured i'd show that to you
09:50 - guys so let's go back to from
09:51 - checkers.constant
09:53 - import with height okay so now that we
09:56 - have the window we're going to set a
09:57 - caption for it
09:58 - so i'm going to say pygame dot display
10:01 - dot set
10:01 - underscore caption and inside of here
10:03 - i'm just going to call this checkers
10:05 - this is simply the name of our game and
10:07 - it will pop up kind of in the top little
10:09 - bar
10:09 - after that what we're going to do is
10:11 - we're going to define a main function
10:13 - this main function is going to be what
10:15 - we run to actually run the game
10:17 - and in here we're going to create what's
10:18 - known as an event loop that's going to
10:20 - run
10:20 - every you know x times per second that
10:23 - will check if we've pressed on something
10:24 - it will update the display
10:26 - we'll do all that so i'm going to say
10:27 - run equals
10:29 - false like that or sorry what am i
10:30 - saying run equals true
10:32 - my bad i'm going to say wow run
10:36 - and then inside of here i'm going to put
10:37 - the event loop so the idea being that
10:39 - we're going to call the main function
10:41 - from outside
10:42 - it's going to start running all of this
10:43 - and then there's going to be a while
10:44 - loop inside of here which will do all
10:46 - the event handling and drawing
10:47 - everything
10:48 - so while run which is just the variable
10:50 - we defined up here is true we'll do this
10:52 - loop
10:52 - the next thing i'm going to do is i'm
10:54 - going to define a clock so in pi game if
10:56 - we want our game to run at a constant
10:59 - frame rate so like
11:00 - 60fps for example we can define a clock
11:03 - and the clock will make sure
11:04 - that our main event loop doesn't run too
11:06 - fast or too slow
11:08 - this is good because in a game if you
11:10 - have like a really fast computer it
11:11 - would run faster if you didn't have this
11:13 - and a slow computer
11:14 - would run slower obviously so you want
11:16 - everything to be the same
11:18 - so it can at max run at what we're going
11:20 - to put it at so we're going to say clock
11:22 - equals pi game dot time dot clock and
11:24 - then
11:25 - inside of the while loop we're going to
11:26 - say clock clock.tick
11:28 - and i'm going to put all capitals fps
11:30 - like that
11:31 - and actually up here right above win i'm
11:33 - going to say fps
11:35 - equals 60. now some of you may ask why
11:38 - don't you put this in the constants
11:40 - folder
11:40 - the constants folder is going to be
11:42 - specific to the checkers game
11:44 - whereas this is specific to us actually
11:46 - rendering and drawing the game which
11:47 - will make more sense later but
11:49 - that's kind of the idea of why i'm
11:50 - putting it in here rather than in the
11:52 - constants file from
11:54 - checkers okay so now we have well run
11:56 - clock.tick fps okay
11:58 - great and what we're going to do is set
12:00 - up our basic event
12:01 - loop for pi game so for event in
12:05 - pi game dot if i could type this out
12:08 - event event.get what this will do is
12:11 - essentially check to see if any events
12:13 - have happened
12:14 - at the current time if they have they'll
12:16 - be in this list of the events.get
12:19 - and then what we can do is look at the
12:20 - event and see if it is a specific type
12:23 - if it is say we us hitting the quit
12:25 - button
12:26 - we'll quit if it's like pressing a
12:27 - certain key we can do something else so
12:29 - we say if
12:31 - event dot type equals equals pi
12:34 - game dot and then all capitals quit this
12:37 - just means we hit that red button at the
12:39 - top of the screen which we'll see in a
12:40 - second
12:41 - then what we're going to do is say run
12:43 - equals false
12:44 - so that will end this loop right here
12:46 - and then at the very end of our loop
12:48 - we're going to say pi game
12:50 - dot quit so essentially if we make it to
12:53 - this line of code so this while loop
12:55 - ends we will quit the game which just
12:56 - means get rid of the window that we're
12:58 - going to be popping up
12:59 - okay so now that we have that i'm going
13:02 - to say if
13:03 - event dot type equals equals pie game
13:06 - dot
13:06 - mouse button down so this just means we
13:09 - pressed
13:10 - any mouse on our mouse down if we did
13:12 - that or any mouse what am i saying any
13:14 - button on our mouse down
13:16 - excuse me if we do that then we will
13:18 - check to see hey did we press on a red
13:19 - piece
13:20 - are we moving whose turn is it all of
13:22 - that kind of stuff we'll do inside of
13:23 - here
13:24 - but for now i'm just going to simply
13:25 - type pass all right
13:27 - so now that we have that we have a
13:29 - window set up
13:30 - we have the event loop and let's
13:33 - actually go ahead and run this and see
13:34 - what we're getting
13:35 - so when i run this you can see we get
13:36 - just a black box and it says checkers at
13:39 - the top
13:40 - all right so i'm going to quit that and
13:41 - that means that we're doing things
13:43 - properly so far
13:44 - and now what we're going to work on is
13:46 - actually making it so we can draw that
13:47 - checkerboard
13:48 - on the display and we set up a few
13:51 - classes
13:51 - that are going to represent you know all
13:54 - of the stuff that we need to draw on the
13:55 - screen essentially
13:57 - so i'm going to go inside to this of
13:58 - this checkers folder here and i'm going
14:00 - to create a new file and i'm going to
14:01 - call this
14:02 - board dot pi now this if you haven't
14:04 - guessed is where we're going to put a
14:06 - class named
14:07 - board and this board class is going to
14:09 - represent a checkers board
14:11 - so what it will do for us is it will
14:13 - handle say all of the different pieces
14:14 - moving
14:15 - whose turn is it or actually it won't
14:17 - handle that but it will handle moving
14:18 - specific pieces
14:20 - deleting specific pieces drawing itself
14:22 - onto the screen
14:23 - that's what this class is going to do so
14:26 - we're going to say import pi game like
14:27 - this
14:28 - and we're going to say class board like
14:30 - that and define an
14:32 - init method that we will define in just
14:34 - a second
14:36 - okay so let me just go over to my file
14:37 - here so inside of the init we'll
14:39 - actually just leave it with
14:41 - self and we're just going to define a
14:42 - few attributes of this board class
14:45 - so the first thing that we're going to
14:46 - have is an internal representation of
14:48 - the board
14:49 - so what i'm going to do is i'm going to
14:51 - make a bunch of objects which are just
14:53 - like you can think of them as just
14:54 - pieces right like red pieces or white
14:56 - pieces
14:57 - and we're going to store them in a
14:58 - two-dimensional list inside
15:00 - of this class so it would look if i can
15:02 - get
15:03 - get this working properly something like
15:05 - this right we might have like white
15:07 - zero meaning there's no piece there
15:09 - white zero meaning there's no piece
15:11 - there right
15:12 - white and then maybe there's a red one
15:14 - here and there's nothing and there's a
15:15 - red one here and there's nothing and
15:17 - there's a white one here
15:18 - that's kind of what this is going to
15:19 - look like we're not going to use white
15:21 - and red but just to give you an idea
15:23 - we're going to have a two-dimensional
15:24 - list
15:25 - because we have eight rows and eight
15:27 - columns so we'll have
15:28 - eight interior lists and inside of each
15:31 - of those lists we will have eight
15:32 - different elements
15:33 - and those elements will be pieces which
15:36 - will tell us if they're red
15:37 - if they're white if they're a king piece
15:39 - all the other stuff that we need
15:40 - for um what do you call it for checkers
15:44 - all right so now we have the board the
15:46 - next thing that we'll do is we'll say
15:47 - self dot turn equals zero
15:50 - what i'm going to say here is zero will
15:52 - mean that
15:54 - actually do we i don't think i even need
15:56 - to define a turn in here sorry i'm going
15:57 - to not define that
15:59 - we'll do that in another class but we
16:00 - just need to keep track of is it red's
16:02 - turn is it white's turn so we know
16:04 - who can move right next i'm going to say
16:06 - self self.selected
16:08 - underscore piece equals none so this is
16:11 - telling us hey have we selected a piece
16:12 - yet have we not selected a piece
16:14 - let's define that and then i'm going to
16:17 - say self.red underscore left
16:19 - equals self.white underscore left equals
16:23 - 12.
16:24 - so the point of this is saying okay we
16:25 - want to keep track of how many red and
16:27 - how many white pieces we have
16:29 - in checkers we have 12 of each so we'll
16:31 - set a constant value up here
16:33 - or not a constant but we'll just set
16:34 - this equal to 12 and then as soon as we
16:36 - remove a white or red piece we can
16:38 - subtract from that
16:40 - next we're going to say self.red
16:42 - underscore kings
16:43 - equals self.white underscore kings
16:46 - equals zero if you're unfamiliar with
16:49 - the syntax
16:50 - this just means these are both equal to
16:52 - zero like if red kings is equal to white
16:54 - kings and white kings is equal to zero
16:56 - then red kings is equal to zero right
16:57 - so that's what this means and that's all
17:00 - we need for the init
17:01 - the next thing we're gonna do is we're
17:03 - going to define a draw
17:05 - underscore cubes now we could call this
17:08 - something more meaningful maybe
17:10 - but we're going to say self win and what
17:12 - this is going to do is say okay
17:14 - give me some surface which is going to
17:15 - be our window that's what wind stands
17:17 - for
17:18 - to draw the red and black cubes on in a
17:20 - checkerboard
17:21 - pattern so let me just run the other one
17:23 - and we'll have a look at it here
17:25 - to see what we actually need to do okay
17:27 - so we need to draw red first
17:29 - then black then red then black then red
17:31 - the black and so on in a checkerboard
17:33 - pattern
17:33 - so we're going to need to write some
17:34 - code that can do that i will show you
17:36 - how we do that
17:37 - right now okay so what we're going to do
17:40 - to start
17:40 - is we're going to fill the entire window
17:43 - so wind.fill
17:45 - with black now i need to import black
17:48 - remember from my constants file so what
17:50 - i'm going to say is from
17:51 - dot constants import black
17:56 - now i'm using dot because when we are in
17:59 - the same package as something else
18:01 - we need to specify hey this is what's
18:03 - known as a relative import
18:05 - we're going to import from dot constant
18:07 - which just means from something in the
18:09 - same directory as us
18:10 - named constants so we're going to fill
18:12 - the window with black
18:14 - and we're going to say for row in range
18:17 - and in this case we're going to just put
18:19 - up here
18:21 - rows so we know how many rows we have so
18:25 - for row in range rows and then we're
18:27 - going to say
18:28 - for call in range
18:31 - row mod 2 8
18:35 - 2 and not 8 sorry this will be rows
18:38 - now what am i doing here why have i done
18:40 - mod 2 well
18:42 - we want to draw a checkerboard pattern
18:44 - right so
18:45 - when we start the column here we either
18:47 - need to start
18:48 - in column 0 or column 1. so let me just
18:51 - bring this checkerboard pattern back up
18:53 - again so i can explain this
18:54 - essentially what i'm saying is okay if
18:56 - the row is zero
18:58 - then what we'll do is we'll say row mod
18:59 - two which obviously zero mod two is just
19:02 - zero
19:03 - so we will start by drawing a red square
19:05 - in column zero
19:06 - then we will step by two we'll draw a
19:09 - red square
19:10 - in column 2 and then in column 4 and
19:12 - then in column 6.
19:14 - now when row goes to 1 we're going to
19:17 - start drawing
19:18 - the red cube in column 1 because row mod
19:20 - 1
19:21 - if it's or sorry 1 mod two is one so
19:23 - we're gonna start in column one
19:24 - and then we will skip over columns again
19:26 - and we will go
19:28 - one three five seven next where we can
19:31 - start at
19:32 - because it's gonna be two we're gonna go
19:33 - again and we're gonna say zero two
19:35 - four six right that's kind of the idea
19:37 - behind doing this and this is probably
19:38 - the simplest way we can actually write
19:40 - this code
19:41 - so what we'll do is we need to figure
19:43 - out where we're drawing this
19:44 - so we're going to say pie game dot draw
19:47 - dot rectangle
19:49 - we're going to draw it on the window
19:51 - we're going to draw with color
19:52 - red which we'll import from up here
19:56 - and while we're up here we'll actually
19:58 - import the square size as well because
20:00 - we're going to need to use that
20:01 - so what this is saying is okay draw a
20:03 - rectangle draw it on the window
20:06 - draw it with some color in this case
20:07 - which is red then we need to give what's
20:09 - known as a wrecked argument
20:11 - so a x y width and height let me bring
20:14 - back up the pi game window so i can
20:16 - explain this a bit
20:17 - whenever we start drawing something in
20:18 - pie game we draw it from its top
20:21 - left coordinate so top left in pie game
20:24 - right here is zero zero so if you can
20:26 - see where my mouse is kind of right
20:27 - beside this icon
20:28 - this is zero zero as i go far to the
20:31 - right i increase in the x as i go down
20:34 - i increase in the y so technically at
20:36 - the bottom here we'd be at 800 whereas
20:38 - at the top we're at zero
20:40 - so when i start drawing i need to pick
20:42 - where is the top
20:43 - left of the shape i'm about to draw so
20:45 - if i said zero zero it would be here and
20:47 - then i would draw 100 wide and a hundred
20:49 - tall
20:50 - to draw a square that is that dimension
20:52 - at that place so that's
20:54 - how that works so for our x and for our
20:56 - y
20:57 - what we're going to say we're going to
20:58 - say row oops
21:00 - row multiplied by square size and then
21:03 - call multiplied by square size
21:07 - and then for the width and height we're
21:09 - simply going to say square size
21:11 - square size now i know this is cutting
21:13 - off a bit let me zoom out so you can see
21:15 - the whole thing
21:16 - okay so four uh four row and range rows
21:19 - for call in range rows
21:21 - pi game dot draw direct on the window
21:23 - red and then of course this is going to
21:25 - calculate where the top
21:26 - left and right should be and then the
21:28 - width and height okay let's zoom back in
21:31 - all right so there we go that should be
21:34 - it i'm just going to check and make sure
21:36 - that's all we need to do and i think
21:37 - that should be fine for drawing the
21:39 - cubes
21:39 - so now let's test this out and make sure
21:41 - that this is working so what i'm going
21:43 - to do is i'm going to say
21:45 - from checkers dot in this case
21:48 - ford import board
21:51 - so what we'll need to do is create a new
21:53 - board object so we'll have to say
21:55 - board equals board like that inside of
21:58 - here
21:59 - and then at the end of every loop and
22:00 - what is this telling me this error is
22:02 - here pie game has no mouse button down
22:03 - yes it does
22:04 - what i'm going to do at the end of each
22:06 - loop is i'm going to say okay
22:08 - board dot draw cubes and we'll just pass
22:10 - it the window that we want to draw it on
22:12 - and then hopefully this will draw it and
22:14 - we'll say pygame
22:16 - dot display dot update
22:19 - so whenever we want to update the
22:21 - display in pi game we have to call this
22:23 - method
22:23 - the way the drawing works is we'll draw
22:25 - on top of each other
22:26 - so say i draw like a cube and then i
22:29 - draw a square
22:30 - after that so i have like one line that
22:32 - draws a cube and then another one that
22:33 - does this
22:34 - well cube and square i guess could be
22:35 - the same thing what am i saying draw
22:37 - cubes
22:37 - maybe we should call this draw squares
22:39 - yeah let's call this draw squares i
22:41 - realize my geometry is a bit off
22:43 - so if we draw two squares the one that
22:46 - we draw second is the one that we will
22:47 - see that's what i'm trying to say
22:49 - essentially
22:50 - if they were on top of each other but
22:52 - anyways we update the display
22:54 - after we draw the cubes so let's press
22:56 - the run button
22:57 - and what is it saying has no attribute
23:00 - draw
23:01 - squares did i change this squares
23:05 - board object save draw
23:09 - squares am i spelling something wrong
23:11 - it's no attribute draw
23:13 - squares
23:16 - okay let me look at this maybe i'm
23:19 - spelling something wrong i must be let's
23:21 - see
23:21 - define draw squares save
23:26 - really telling me it has no attribute
23:27 - let's see again and there we go okay so
23:30 - i don't know what was going on there but
23:31 - now it seems to be working
23:32 - and we have red black red black so on
23:34 - and so forth and a perfect checkerboard
23:37 - pattern
23:37 - okay so there we go that is a good start
23:40 - next what we need to do is draw all of
23:42 - the pieces
23:42 - so let's go ahead and do that so we have
23:44 - board dot pi
23:46 - and now what i'm going to do inside of
23:47 - here is i'm going to say define
23:49 - create underscore board now this is
23:52 - going to say self
23:53 - and we'll take a pass and what we'll do
23:55 - inside of here is well we will create
23:57 - the actual internal representation of
24:00 - the board
24:00 - and we'll add a bunch of pieces to the
24:02 - list now of course if we're going to add
24:04 - pieces we need pieces so let's make a
24:06 - new class in another file here
24:08 - called piece.pi and let's spell it
24:11 - properly
24:12 - like that so pstop pi i'm going to say
24:15 - class
24:16 - piece like that and then we're going to
24:18 - say define underscore under square in it
24:20 - underscore underscore we're going to say
24:22 - self row
24:25 - call and color so when we make a new
24:28 - piece we need to pass it what row it's
24:30 - in
24:30 - what column it's in and what color it is
24:33 - so we'll say self.row
24:36 - equals row self.call equals call
24:39 - self.color equals color and
24:43 - that should be it we'll add a few more
24:46 - self.king
24:47 - equals false so this is going to tell us
24:49 - are we a
24:50 - king piece if we're a king piece that
24:52 - means we can jump backwards right if
24:54 - you're familiar with checkers
24:55 - so we'll get to that part later but
24:57 - we'll just add that in now let me just
24:59 - check my file and see what else we
25:00 - needed
25:01 - we'll have self. selected
25:04 - that can be equal to false actually i
25:07 - don't think we need this either i have
25:08 - some
25:09 - code that i have written but we don't
25:11 - really need so i'm just
25:12 - filtering it out as we go and what else
25:15 - we need self.direction that is important
25:18 - so self.direction equals
25:22 - we'll have to define this here okay so
25:25 - the dilemma i'm having right now
25:26 - is i need to pick the direction for each
25:28 - piece right are we going positive are we
25:30 - going negative
25:31 - what way are we going essentially so
25:33 - what i can do is i can say okay
25:35 - well if we are and let me just run this
25:37 - look at the checkerboard pattern
25:39 - if we are the white pieces so we're at
25:41 - the top because i believe white is at
25:42 - the top
25:43 - we're going to move down which means the
25:44 - direction we're going to go is positive
25:46 - if we're thinking about the coordinate
25:48 - system of pi game
25:49 - where if we're red we're going to move
25:51 - up so the direction we're going is
25:53 - negative so let's do that inside of
25:56 - piece we'll say
25:58 - if self.color equals equals and now we
26:02 - have to import
26:03 - red and white from the constant so from
26:06 - dot constants
26:09 - import red white so if self.color equals
26:12 - equals red
26:13 - then the direction is actually going to
26:15 - be negative one meaning we're going up
26:18 - otherwise self.direction
26:22 - equals one okay so that handles that and
26:25 - then next we're going to say self.x
26:26 - equals
26:27 - 0 and self.y equals 0.
26:30 - and then what i'm going to actually do
26:32 - is i'm going to make another method that
26:34 - says calculate
26:35 - pause now what this is going to do is
26:38 - calculate our x and y position
26:40 - based on the row and column that we're
26:42 - in so in this case we're going to need
26:44 - to know the square size
26:46 - so that we can simply multiply whatever
26:47 - row and column we're in to figure out
26:49 - what our starting x and y position
26:51 - should be
26:52 - when we draw this piece so that's what
26:54 - i'm going to call calculate position
26:56 - i'm going to say self dot x equals
26:59 - square size multiplied by self dot in
27:02 - this case is going to be call because
27:03 - we're doing x which is the horizontal
27:05 - axis
27:06 - plus square size over over 2.
27:10 - now the reason i'm doing this is because
27:11 - i want to be right in the middle of the
27:14 - square
27:14 - when i talk about my x and y position so
27:17 - we're going to have circular pieces
27:19 - right and circular pieces
27:20 - we draw them from their center so we
27:23 - have a radius around a circle and that's
27:25 - how we draw a circle
27:26 - so our x and y position should be in the
27:28 - middle of the square so we'll just
27:30 - divide
27:30 - the size of the square by 2 that will
27:33 - give us 50 right so in this case this we
27:35 - could literally just put this as 50 if
27:36 - we wanted to
27:38 - and then we would be in the middle of
27:39 - the square all right so self.y
27:42 - equals the same thing square size
27:44 - multiplied by self.row that's the only
27:46 - difference plus
27:47 - square size over over 2. okay so what
27:50 - we'll do is simply call
27:52 - self.calculateposition after this
27:54 - the reason i'm not just writing this
27:55 - code inside of here
27:57 - is because we're going to need to do
27:58 - this a few different times
28:00 - if we change our row and column so it
28:01 - just makes more sense to have a method
28:03 - that can do it for us
28:05 - next i'm going to make another method
28:06 - i'm going to say define make underscore
28:08 - king
28:10 - what this is going to do is simply
28:11 - change the king variable so self.king
28:14 - equals true and that just means
28:18 - we'll literally just make this piece of
28:20 - king if we can
28:22 - next we're going to draw so we're going
28:23 - to say define draw
28:25 - what this will do is pretty
28:26 - straightforward we will draw the actual
28:28 - piece itself
28:29 - this is actually pretty easy to do but
28:31 - let's go ahead and do it so self
28:33 - wind we're going to start by drawing a
28:35 - circle and then we'll draw an
28:37 - outline for that circle so that we can
28:38 - actually see it well enough
28:40 - so we're going to say pie game
28:44 - dot draw dot circle
28:47 - win self dot color which is what we have
28:50 - to put
28:51 - here i believe self.color and then we
28:54 - need to pick
28:55 - our x y position for the center of the
28:57 - circle
28:58 - actually i think this is the right way
29:00 - yeah i think it is we're going to say
29:01 - self.x
29:03 - self.y and then finally we're going to
29:05 - pick a radius
29:06 - so for the radius we need to determine
29:10 - what we want that to be
29:11 - and that is going to be based on how
29:13 - much padding essentially
29:15 - do we want let me just bring this up
29:18 - between the edge of the square in the
29:20 - circle so if you look here we have like
29:22 - maybe 10 pixels of padding on each side
29:24 - so we need to define that and then we
29:26 - can derive what the radius should be
29:28 - based on that so i'm going to define as
29:30 - a class
29:31 - variable here padding equals
29:34 - let's make it say 10 or something like
29:37 - that i'm going to see if that's what i
29:38 - use for the other one
29:39 - yeah we'll make it padding is equal to
29:41 - 10 and we'll define
29:42 - a border which is essentially what do we
29:45 - want the outline to be so we can
29:46 - actually call this outline
29:48 - so outline equals two all right so now
29:51 - when we draw what we're going to do is
29:53 - figure out okay the
29:54 - radius of
29:57 - our circle should be equal to first of
30:00 - all
30:00 - the square size over over 2 right
30:03 - because the radius
30:04 - is not the diameter so we have to divide
30:06 - the square size minus
30:08 - the self dot padding
30:11 - over over two so sorry i've made a bunch
30:13 - of mistakes here this should just say
30:15 - self dot padding not divided by two not
30:18 - multiplied by two whatever i said
30:20 - uh this is the correct math is minus
30:22 - self.padding
30:24 - okay so if that assuming is that's the
30:26 - pattern we want on each side
30:27 - so then i'll just put radius here and
30:30 - yeah i guess that's lowercase variable
30:32 - and then that should draw the circle for
30:34 - us now the next thing we'll do after
30:35 - that
30:36 - is we will draw an outline so we'll
30:38 - simply say
30:40 - pygame dot
30:43 - draw dot circle and we can literally
30:46 - copy
30:47 - the exact same thing we're just going to
30:49 - change the color
30:50 - and the radius so for the radius we're
30:53 - going to say radius plus self
30:54 - dot outline the reason for this is
30:57 - whatever the actual
30:58 - radius of our button is we'll just go
31:01 - two pixels
31:02 - outside of that and actually we'll have
31:04 - to reverse how we draw this but
31:05 - we'll go two pixels outside of that so
31:07 - we draw a slightly larger circle
31:09 - and then on top of that circle we're
31:11 - going to draw the interior one so it
31:12 - will look like it's a border
31:14 - but really what we've done is we've
31:15 - drawn a big circle and then a smaller
31:17 - circle
31:17 - inside of that circle that's covering
31:20 - what
31:20 - that interior circle's color actually is
31:22 - if that makes any sense
31:24 - so i'm going to start by drawing the
31:25 - larger circle which will be radius plus
31:27 - outline and then on top of that i draw
31:30 - the smaller circle so you only see
31:32 - you know the two pixel difference in the
31:34 - radius between these as the outline
31:36 - now for the color we need to pick a
31:38 - color that is not
31:39 - the piece color and is not one of the
31:41 - square colors so we can actually see it
31:44 - so i believe that we can pick something
31:47 - i'm trying to think of like a decent
31:48 - maybe we'll go with a gray or something
31:50 - so let's just define uh
31:54 - gray inside of our constants and we'll
31:56 - use that so inside constants
31:57 - we'll say gray equals and we'll go 128
32:00 - 128 128 that's just a common color code
32:04 - for gray
32:05 - and then instead of color here we will
32:07 - simply do gray and then we'll import
32:09 - that
32:09 - from constants okay great
32:13 - so now we have radius we have the actual
32:16 - circle being drawn for the piece
32:19 - and i think for right now that's all we
32:22 - need to do
32:23 - i'm going to add one more method just to
32:25 - make it easier for us if we need to
32:27 - debug this later
32:28 - and it's just going to be wrapper what
32:30 - this means is what is the internal
32:31 - representation of this object
32:33 - you may have seen before if you print
32:35 - out like an actual object that you've
32:37 - created you get some weird like
32:40 - object at x blah blah blah location
32:43 - to avoid that we can simply make our own
32:46 - representation of the object
32:48 - and that's again just if we print this
32:50 - out or if we look at it it will show us
32:51 - this so i'm simply just going to say
32:53 - that we will use the color so return the
32:56 - string
32:57 - of self dot color so wrapper has to be a
33:00 - string
33:01 - so we'll just take whatever our color is
33:02 - and just turn it into a string so we'll
33:04 - see like 0 0 255 0 2
33:06 - 5 0 whatever the color of our object is
33:10 - okay so now we have peace and if we want
33:12 - to see them well we need to start
33:13 - creating some pieces

Cleaned transcript:

hello everybody and welcome to a brand new tutorial series where we're going to be building the checkers game in python with pygame now if you don't know pygame that's totally fine it's a module in python that lets us build 2d games what i'll be doing in this series is walking you through everything that we need to do to build a fullfledged checkers game now i'm actually quite excited about this because this is going to be leading me up to another series i'm going to be doing which is talking about the mini max algorithm to actually make an ai that we can play checkers against so let me give you kind of a demo of what this should look like i've already built the game out and i will be not necessarily copying from my other screen but just having it up as a reference to make sure i don't get too lost you can see this is kind of the game of checkers the human player is red and then the other player obviously is white and you can see that we have an ai so the ai will automatically move based on the move that you do so let's see if i leave myself open here the ai oh decided actually not to capture me because i would capture it back and if we play this for a few minutes i won't go through all of it you'll notice that the ai is actually pretty decent and it actually can play pretty well against us so i'll be talking about how we can build this kind of ai of course after we've built the game in a separate series so stay tuned for that all right so that being said that's pretty much it all i want to say quickly is this is not a beginner tutorial series if you're an intermediate you've worked in python before that's awesome i'm going to try my best to teach you guys some news more advanced stuff in this series so yes we will be going through and just building the game but i'll be kind of throwing in some more advanced techniques and explaining how those work so you're definitely going to learn something other than just how to build checkers if you want to follow along with this all right so let's go ahead and get started the first thing we need to do is just install a package this is called pygame so we need pygame again which is the module that we're going to use to do all of the graphics so what you can do is open up a command prompt or open up a terminal and what you need to do is type pip if you're on windows or pip3 if you're on linux or if you're on mac so pip or pip 3 depending on your operating system and then the word install and then pi game so of course you need to already have python installed on your system for this to work but type pip or pip 3 install pygame that should go through and install this you can see for me it was already installed it says defaulting to user installation blah blah blah we already have it installed anyways if this did not work for you for some reason that probably means that pip is not in your system path so i will link a video in the description as well as i'll put a card in the corner here that will tell you how you can actually install and fix pip so follow along with that it won't be titled like how to fix pip but just trust me in that video it goes through and explains how to actually fix pip okay so once we've done that and we've installed pygame the first thing we're going to do is make a new python file you can see i'm using vs code for this tutorial series which is just the editor that we're going to use and let me just zoom in a bit so you guys can actually read what's going on uh but what we're going to do is make a new python file i've named mine main.pi and i'm putting that inside of this checkers tutorial folder here and i'm simply going to type import pygame like that and just make sure that this works so if you're working in vs code what you can do is install the python extension so if you go to this extension tab right here it's on the lefthand menu bar type python click here and install it then you'll be able to debug python scripts you'll run python scripts and everything should work out well for you so what i'm going to do here is just press this run button and this will simply run the current script that i'm on you can see that it says hello from pygame and that means that everything is working and pygame has been installed properly and we're good to get started so what we're going to do here is we're actually going to try to build kind of a module around the checkers game and then add kind of like an api i don't want to use big words to confuse anyone but an application programming interface on top of the game so that we can use it with an ai later on so you'll see what i mean by that as we go through but what i'm going to do right now is just make a new folder inside of my checkers folder and i'm just going to call this one checkers like this so inside of here what we're going to do is actually make a new file i'm going to call this underscore underscore init underscore underscore dot pi so two underscores and knit two underscores dot pi what this will do is initialize this folder here as a package or a module or whatever you want to call it and that will allow us to actually import stuff directly from this package in kind of a special way which we'll be doing later on now what we're also going to do is do an underscore underscore init underscore underscore dot pi inside of our upper level directory so i have main.pi anita pi and then checkers again that's inside of a folder right here so it's inside of this checkers tutorial folder that i have open and once we've done that we can go back to the main.pi script and now we can start actually writing a little bit of code so the first thing that i'm going to do here is i'm actually going to set up a pygame display this is where we're actually going to be drawing everything onto then we're going to set up like a basic event loop and what that's going to do is check if we press the mouse or if we press a certain key or whatever we're doing it's going to check for that and then once we've set up the main loop we can set up some basic drawing so essentially draw the board for the chessboard draw the pieces all of that and then start getting into the actual logic of the game so the first thing i'm going to do is i'm going to say win in all capitals because this is going to be a constant value is win dot display dot set underscore mode and inside of here i'm going to type width and then comma height now these are going to be two fair two variables that we are going to define and what i'm going to do now is go inside of this checkers folder that we've created i'm going to make another python file and i'm going to call this oops it's lowercase constants.pi so what i'm going to do is i'm going to put all the constant values inside of this file here so if we ever want to change anything we only need to go to one file and we can really quickly see all of the variables and we can change everything that we need to so inside of constant stop pi i'm going to import pi game we'll use that later on and now what i'm going to do is say width comma height equals 800 comma 800. if you haven't seen this type of way of defining variables it just means width is equal to 800 and height is equal to 800. now you can define this to be whatever you want but just keep in mind if you change this value you're going to have to change a few other ones accordingly so just maybe leave it the same but this is 800 pixels high by 800 pixels wide next thing i'm going to do is define the amount of rows and columns we're going to have in our chess board so or checkers board sorry so we're gonna have eight by eight that is a standard checkers board so i'm gonna say eight by eight like that and then what i'm gonna do is i'm gonna say square underscore size so essentially how big is one square of our checkerboard and i'm gonna make that equal to the width integer divided by the rows now we could as well do the height divided by the columns or sorry what am i doing with sorry this should be width divided by calls not it's not going to make a difference but it makes more sense to do the width divided by the amount of columns rather than the width divided by the amount of rows so now we have a few constants here width height row calls square size while we're in this i'm just going to define a few variables for some different colors we're going to use so in pi game when we use colors they are red green and blue so rgb color codes so for red obviously we're going to do 255 comma 0 comma 0. this means we're going to fill the entire amount of red we're going to have 0 green and 0 blue and just so we know red green blue goes up to 255 inclusively so you can use any value for these uh between 0 and 255. next we're going to do white white is simply 255 255 255 and then we're gonna do black which is equal to zero zero zero and finally we're gonna do blue which we're gonna use to figure out what squares the person can move to that was those little blue dots you were seeing before if you remember when i ran the game it's going to be 0 0 255. so pretty straightforward i'll add a comment here to say rgb just so we understand that's what it's in and now we've kind of filled in the constants we'll do a few other things here later but we can skip that for right now so what i want to do is i actually want to import the constants that i defined here into this main.pi file so to do that is actually pretty simple what i can do is i can say from checkers dot constants import and then i can import the variables that i want which are width and height now the reason i can do this and i can reference checkers directly is because inside of checkers we added this init.pi file this init.pi file tells us that hey this folder is actually a python package and because of that we can import specific things from it so just to show you if i went inside this init.pi file and i said from constants import star so that means import everything from constants what i would actually have to do now if i wanted to import width and height is simply say from checkers import width height the reason for that is because inside of the init up high i import everything from the constants file so what happens is as soon as i import this folder checkers it automatically runs this which means it will automatically import all the stuff inside of constants now we're not i'm not going to do that i'm going to get rid of this just because i don't want to confuse anyone if that doesn't make sense but that's kind of just the explanation there and i figured i'd show that to you guys so let's go back to from checkers.constant import with height okay so now that we have the window we're going to set a caption for it so i'm going to say pygame dot display dot set underscore caption and inside of here i'm just going to call this checkers this is simply the name of our game and it will pop up kind of in the top little bar after that what we're going to do is we're going to define a main function this main function is going to be what we run to actually run the game and in here we're going to create what's known as an event loop that's going to run every you know x times per second that will check if we've pressed on something it will update the display we'll do all that so i'm going to say run equals false like that or sorry what am i saying run equals true my bad i'm going to say wow run and then inside of here i'm going to put the event loop so the idea being that we're going to call the main function from outside it's going to start running all of this and then there's going to be a while loop inside of here which will do all the event handling and drawing everything so while run which is just the variable we defined up here is true we'll do this loop the next thing i'm going to do is i'm going to define a clock so in pi game if we want our game to run at a constant frame rate so like 60fps for example we can define a clock and the clock will make sure that our main event loop doesn't run too fast or too slow this is good because in a game if you have like a really fast computer it would run faster if you didn't have this and a slow computer would run slower obviously so you want everything to be the same so it can at max run at what we're going to put it at so we're going to say clock equals pi game dot time dot clock and then inside of the while loop we're going to say clock clock.tick and i'm going to put all capitals fps like that and actually up here right above win i'm going to say fps equals 60. now some of you may ask why don't you put this in the constants folder the constants folder is going to be specific to the checkers game whereas this is specific to us actually rendering and drawing the game which will make more sense later but that's kind of the idea of why i'm putting it in here rather than in the constants file from checkers okay so now we have well run clock.tick fps okay great and what we're going to do is set up our basic event loop for pi game so for event in pi game dot if i could type this out event event.get what this will do is essentially check to see if any events have happened at the current time if they have they'll be in this list of the events.get and then what we can do is look at the event and see if it is a specific type if it is say we us hitting the quit button we'll quit if it's like pressing a certain key we can do something else so we say if event dot type equals equals pi game dot and then all capitals quit this just means we hit that red button at the top of the screen which we'll see in a second then what we're going to do is say run equals false so that will end this loop right here and then at the very end of our loop we're going to say pi game dot quit so essentially if we make it to this line of code so this while loop ends we will quit the game which just means get rid of the window that we're going to be popping up okay so now that we have that i'm going to say if event dot type equals equals pie game dot mouse button down so this just means we pressed any mouse on our mouse down if we did that or any mouse what am i saying any button on our mouse down excuse me if we do that then we will check to see hey did we press on a red piece are we moving whose turn is it all of that kind of stuff we'll do inside of here but for now i'm just going to simply type pass all right so now that we have that we have a window set up we have the event loop and let's actually go ahead and run this and see what we're getting so when i run this you can see we get just a black box and it says checkers at the top all right so i'm going to quit that and that means that we're doing things properly so far and now what we're going to work on is actually making it so we can draw that checkerboard on the display and we set up a few classes that are going to represent you know all of the stuff that we need to draw on the screen essentially so i'm going to go inside to this of this checkers folder here and i'm going to create a new file and i'm going to call this board dot pi now this if you haven't guessed is where we're going to put a class named board and this board class is going to represent a checkers board so what it will do for us is it will handle say all of the different pieces moving whose turn is it or actually it won't handle that but it will handle moving specific pieces deleting specific pieces drawing itself onto the screen that's what this class is going to do so we're going to say import pi game like this and we're going to say class board like that and define an init method that we will define in just a second okay so let me just go over to my file here so inside of the init we'll actually just leave it with self and we're just going to define a few attributes of this board class so the first thing that we're going to have is an internal representation of the board so what i'm going to do is i'm going to make a bunch of objects which are just like you can think of them as just pieces right like red pieces or white pieces and we're going to store them in a twodimensional list inside of this class so it would look if i can get get this working properly something like this right we might have like white zero meaning there's no piece there white zero meaning there's no piece there right white and then maybe there's a red one here and there's nothing and there's a red one here and there's nothing and there's a white one here that's kind of what this is going to look like we're not going to use white and red but just to give you an idea we're going to have a twodimensional list because we have eight rows and eight columns so we'll have eight interior lists and inside of each of those lists we will have eight different elements and those elements will be pieces which will tell us if they're red if they're white if they're a king piece all the other stuff that we need for um what do you call it for checkers all right so now we have the board the next thing that we'll do is we'll say self dot turn equals zero what i'm going to say here is zero will mean that actually do we i don't think i even need to define a turn in here sorry i'm going to not define that we'll do that in another class but we just need to keep track of is it red's turn is it white's turn so we know who can move right next i'm going to say self self.selected underscore piece equals none so this is telling us hey have we selected a piece yet have we not selected a piece let's define that and then i'm going to say self.red underscore left equals self.white underscore left equals 12. so the point of this is saying okay we want to keep track of how many red and how many white pieces we have in checkers we have 12 of each so we'll set a constant value up here or not a constant but we'll just set this equal to 12 and then as soon as we remove a white or red piece we can subtract from that next we're going to say self.red underscore kings equals self.white underscore kings equals zero if you're unfamiliar with the syntax this just means these are both equal to zero like if red kings is equal to white kings and white kings is equal to zero then red kings is equal to zero right so that's what this means and that's all we need for the init the next thing we're gonna do is we're going to define a draw underscore cubes now we could call this something more meaningful maybe but we're going to say self win and what this is going to do is say okay give me some surface which is going to be our window that's what wind stands for to draw the red and black cubes on in a checkerboard pattern so let me just run the other one and we'll have a look at it here to see what we actually need to do okay so we need to draw red first then black then red then black then red the black and so on in a checkerboard pattern so we're going to need to write some code that can do that i will show you how we do that right now okay so what we're going to do to start is we're going to fill the entire window so wind.fill with black now i need to import black remember from my constants file so what i'm going to say is from dot constants import black now i'm using dot because when we are in the same package as something else we need to specify hey this is what's known as a relative import we're going to import from dot constant which just means from something in the same directory as us named constants so we're going to fill the window with black and we're going to say for row in range and in this case we're going to just put up here rows so we know how many rows we have so for row in range rows and then we're going to say for call in range row mod 2 8 2 and not 8 sorry this will be rows now what am i doing here why have i done mod 2 well we want to draw a checkerboard pattern right so when we start the column here we either need to start in column 0 or column 1. so let me just bring this checkerboard pattern back up again so i can explain this essentially what i'm saying is okay if the row is zero then what we'll do is we'll say row mod two which obviously zero mod two is just zero so we will start by drawing a red square in column zero then we will step by two we'll draw a red square in column 2 and then in column 4 and then in column 6. now when row goes to 1 we're going to start drawing the red cube in column 1 because row mod 1 if it's or sorry 1 mod two is one so we're gonna start in column one and then we will skip over columns again and we will go one three five seven next where we can start at because it's gonna be two we're gonna go again and we're gonna say zero two four six right that's kind of the idea behind doing this and this is probably the simplest way we can actually write this code so what we'll do is we need to figure out where we're drawing this so we're going to say pie game dot draw dot rectangle we're going to draw it on the window we're going to draw with color red which we'll import from up here and while we're up here we'll actually import the square size as well because we're going to need to use that so what this is saying is okay draw a rectangle draw it on the window draw it with some color in this case which is red then we need to give what's known as a wrecked argument so a x y width and height let me bring back up the pi game window so i can explain this a bit whenever we start drawing something in pie game we draw it from its top left coordinate so top left in pie game right here is zero zero so if you can see where my mouse is kind of right beside this icon this is zero zero as i go far to the right i increase in the x as i go down i increase in the y so technically at the bottom here we'd be at 800 whereas at the top we're at zero so when i start drawing i need to pick where is the top left of the shape i'm about to draw so if i said zero zero it would be here and then i would draw 100 wide and a hundred tall to draw a square that is that dimension at that place so that's how that works so for our x and for our y what we're going to say we're going to say row oops row multiplied by square size and then call multiplied by square size and then for the width and height we're simply going to say square size square size now i know this is cutting off a bit let me zoom out so you can see the whole thing okay so four uh four row and range rows for call in range rows pi game dot draw direct on the window red and then of course this is going to calculate where the top left and right should be and then the width and height okay let's zoom back in all right so there we go that should be it i'm just going to check and make sure that's all we need to do and i think that should be fine for drawing the cubes so now let's test this out and make sure that this is working so what i'm going to do is i'm going to say from checkers dot in this case ford import board so what we'll need to do is create a new board object so we'll have to say board equals board like that inside of here and then at the end of every loop and what is this telling me this error is here pie game has no mouse button down yes it does what i'm going to do at the end of each loop is i'm going to say okay board dot draw cubes and we'll just pass it the window that we want to draw it on and then hopefully this will draw it and we'll say pygame dot display dot update so whenever we want to update the display in pi game we have to call this method the way the drawing works is we'll draw on top of each other so say i draw like a cube and then i draw a square after that so i have like one line that draws a cube and then another one that does this well cube and square i guess could be the same thing what am i saying draw cubes maybe we should call this draw squares yeah let's call this draw squares i realize my geometry is a bit off so if we draw two squares the one that we draw second is the one that we will see that's what i'm trying to say essentially if they were on top of each other but anyways we update the display after we draw the cubes so let's press the run button and what is it saying has no attribute draw squares did i change this squares board object save draw squares am i spelling something wrong it's no attribute draw squares okay let me look at this maybe i'm spelling something wrong i must be let's see define draw squares save really telling me it has no attribute let's see again and there we go okay so i don't know what was going on there but now it seems to be working and we have red black red black so on and so forth and a perfect checkerboard pattern okay so there we go that is a good start next what we need to do is draw all of the pieces so let's go ahead and do that so we have board dot pi and now what i'm going to do inside of here is i'm going to say define create underscore board now this is going to say self and we'll take a pass and what we'll do inside of here is well we will create the actual internal representation of the board and we'll add a bunch of pieces to the list now of course if we're going to add pieces we need pieces so let's make a new class in another file here called piece.pi and let's spell it properly like that so pstop pi i'm going to say class piece like that and then we're going to say define underscore under square in it underscore underscore we're going to say self row call and color so when we make a new piece we need to pass it what row it's in what column it's in and what color it is so we'll say self.row equals row self.call equals call self.color equals color and that should be it we'll add a few more self.king equals false so this is going to tell us are we a king piece if we're a king piece that means we can jump backwards right if you're familiar with checkers so we'll get to that part later but we'll just add that in now let me just check my file and see what else we needed we'll have self. selected that can be equal to false actually i don't think we need this either i have some code that i have written but we don't really need so i'm just filtering it out as we go and what else we need self.direction that is important so self.direction equals we'll have to define this here okay so the dilemma i'm having right now is i need to pick the direction for each piece right are we going positive are we going negative what way are we going essentially so what i can do is i can say okay well if we are and let me just run this look at the checkerboard pattern if we are the white pieces so we're at the top because i believe white is at the top we're going to move down which means the direction we're going to go is positive if we're thinking about the coordinate system of pi game where if we're red we're going to move up so the direction we're going is negative so let's do that inside of piece we'll say if self.color equals equals and now we have to import red and white from the constant so from dot constants import red white so if self.color equals equals red then the direction is actually going to be negative one meaning we're going up otherwise self.direction equals one okay so that handles that and then next we're going to say self.x equals 0 and self.y equals 0. and then what i'm going to actually do is i'm going to make another method that says calculate pause now what this is going to do is calculate our x and y position based on the row and column that we're in so in this case we're going to need to know the square size so that we can simply multiply whatever row and column we're in to figure out what our starting x and y position should be when we draw this piece so that's what i'm going to call calculate position i'm going to say self dot x equals square size multiplied by self dot in this case is going to be call because we're doing x which is the horizontal axis plus square size over over 2. now the reason i'm doing this is because i want to be right in the middle of the square when i talk about my x and y position so we're going to have circular pieces right and circular pieces we draw them from their center so we have a radius around a circle and that's how we draw a circle so our x and y position should be in the middle of the square so we'll just divide the size of the square by 2 that will give us 50 right so in this case this we could literally just put this as 50 if we wanted to and then we would be in the middle of the square all right so self.y equals the same thing square size multiplied by self.row that's the only difference plus square size over over 2. okay so what we'll do is simply call self.calculateposition after this the reason i'm not just writing this code inside of here is because we're going to need to do this a few different times if we change our row and column so it just makes more sense to have a method that can do it for us next i'm going to make another method i'm going to say define make underscore king what this is going to do is simply change the king variable so self.king equals true and that just means we'll literally just make this piece of king if we can next we're going to draw so we're going to say define draw what this will do is pretty straightforward we will draw the actual piece itself this is actually pretty easy to do but let's go ahead and do it so self wind we're going to start by drawing a circle and then we'll draw an outline for that circle so that we can actually see it well enough so we're going to say pie game dot draw dot circle win self dot color which is what we have to put here i believe self.color and then we need to pick our x y position for the center of the circle actually i think this is the right way yeah i think it is we're going to say self.x self.y and then finally we're going to pick a radius so for the radius we need to determine what we want that to be and that is going to be based on how much padding essentially do we want let me just bring this up between the edge of the square in the circle so if you look here we have like maybe 10 pixels of padding on each side so we need to define that and then we can derive what the radius should be based on that so i'm going to define as a class variable here padding equals let's make it say 10 or something like that i'm going to see if that's what i use for the other one yeah we'll make it padding is equal to 10 and we'll define a border which is essentially what do we want the outline to be so we can actually call this outline so outline equals two all right so now when we draw what we're going to do is figure out okay the radius of our circle should be equal to first of all the square size over over 2 right because the radius is not the diameter so we have to divide the square size minus the self dot padding over over two so sorry i've made a bunch of mistakes here this should just say self dot padding not divided by two not multiplied by two whatever i said uh this is the correct math is minus self.padding okay so if that assuming is that's the pattern we want on each side so then i'll just put radius here and yeah i guess that's lowercase variable and then that should draw the circle for us now the next thing we'll do after that is we will draw an outline so we'll simply say pygame dot draw dot circle and we can literally copy the exact same thing we're just going to change the color and the radius so for the radius we're going to say radius plus self dot outline the reason for this is whatever the actual radius of our button is we'll just go two pixels outside of that and actually we'll have to reverse how we draw this but we'll go two pixels outside of that so we draw a slightly larger circle and then on top of that circle we're going to draw the interior one so it will look like it's a border but really what we've done is we've drawn a big circle and then a smaller circle inside of that circle that's covering what that interior circle's color actually is if that makes any sense so i'm going to start by drawing the larger circle which will be radius plus outline and then on top of that i draw the smaller circle so you only see you know the two pixel difference in the radius between these as the outline now for the color we need to pick a color that is not the piece color and is not one of the square colors so we can actually see it so i believe that we can pick something i'm trying to think of like a decent maybe we'll go with a gray or something so let's just define uh gray inside of our constants and we'll use that so inside constants we'll say gray equals and we'll go 128 128 128 that's just a common color code for gray and then instead of color here we will simply do gray and then we'll import that from constants okay great so now we have radius we have the actual circle being drawn for the piece and i think for right now that's all we need to do i'm going to add one more method just to make it easier for us if we need to debug this later and it's just going to be wrapper what this means is what is the internal representation of this object you may have seen before if you print out like an actual object that you've created you get some weird like object at x blah blah blah location to avoid that we can simply make our own representation of the object and that's again just if we print this out or if we look at it it will show us this so i'm simply just going to say that we will use the color so return the string of self dot color so wrapper has to be a string so we'll just take whatever our color is and just turn it into a string so we'll see like 0 0 255 0 2 5 0 whatever the color of our object is okay so now we have peace and if we want to see them well we need to start creating some pieces
