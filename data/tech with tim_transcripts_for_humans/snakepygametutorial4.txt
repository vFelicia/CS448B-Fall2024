With timestamps:

00:00 - and then after that what else do we need
00:02 - for cube I don't think we actually need
00:04 - anything else I think that's all we need
00:06 - oh I'm gonna change the color that's
00:07 - what I want to do we change the color
00:09 - equal to green so red green blue 255 for
00:12 - green so that it shows up in this
00:14 - visible on the screen and now what I'm
00:16 - gonna do down here in this while loop is
00:17 - I'm gonna say snack I'm gonna check if
00:20 - our the head of our snake has hit the
00:23 - the stack and if it has we're gonna add
00:25 - another part to the body of the snake
00:28 - otherwise we're not gonna do that right
00:30 - and then we're gonna generate a new
00:31 - snack and so entrence just gonna say if
00:33 - s dot body 0 dot paws and this is gonna
00:39 - be the head right because we have it
00:40 - ordered I don't need those brackets is
00:42 - equal to snack dot pause and remember
00:46 - these are both cube objects that's works
00:47 - fine because we're gonna be tuples then
00:49 - what we're gonna do is we're something
00:51 - to say s dot add cube which is a method
00:54 - that we have there that we haven't
00:55 - actually written yet and we're going to
00:57 - say snack is now equal to well a new
00:59 - cube so I'm just gonna copy this and
01:01 - paste it here so all we're doing is now
01:04 - generating a new cube for snack I'm sure
01:08 - I could put something in that like
01:09 - change it but this is just a way that
01:11 - works ok so now that we've done that we
01:13 - should be able to move around the screen
01:15 - and get the snack but we need to code in
01:17 - the add snack method here which I
01:19 - believe I have here or add Q so the odd
01:22 - cube is pretty straightforward we just
01:24 - have to figure out where we're adding
01:26 - that snack or wherever adding that cube
01:29 - I don't know why I keep calling it snack
01:30 - to the list so what we're going to do
01:32 - the math figure we're the tailless and
01:34 - we want to add it after that tail so
01:38 - tail is equal to self dot body negative
01:41 - one the last element in that list I'm
01:43 - going to say dxdy which again is going
01:45 - to be our direction X Direction Y I'm
01:46 - just sorting it shredding it here it's
01:48 - gonna be tail dot turn X and tail dot
01:53 - turn Y like this now again you can do
01:56 - some two lines I'm just doing it like
01:57 - this because it's faster and now I'm
01:59 - gonna copy something in and just go
02:01 - through exactly what this does
02:05 - okay so pretty much huh this looks
02:08 - complicated but all its gonna be doing
02:10 - is checking what direction that we're
02:12 - currently moving in like the head of the
02:14 - cube or the tail actually of the cube is
02:16 - moving in so that we can then make sure
02:18 - that when we add that cube we know where
02:21 - to add it so if we're adding it like to
02:23 - the right of the cube to the left of the
02:24 - cube above it below it and we can give
02:26 - it the correct direction to be moving in
02:29 - so pretty much what we do here is we
02:34 - just say we're gonna append a new cube
02:36 - to our body and its position if we're
02:39 - moving to the right which in here we are
02:41 - because DX equals 1 is 1 less than the x
02:45 - position of that tail so whatever the
02:48 - last cube is 1 less than that and that's
02:50 - so that we don't add a cube per se to
02:52 - the right when we're moving to the right
02:54 - and then we're just gonna have
02:55 - overlapping cubes and you're not gonna
02:57 - be able to see them right same thing
02:58 - down here if we're moving down that
03:01 - means or not down sorry for moving left
03:03 - that means we need to add the cube to
03:05 - the right side so one plus that tail the
03:09 - exposition of the tail of the cube of
03:11 - the snake sorry so that we can have it
03:15 - in the proper position right and the
03:16 - same thing here with x and y or with y
03:18 - so that when we're moving up or we're
03:20 - moving down then we add it above
03:22 - otherwise to be move we put it below
03:24 - sorry I just stumbled through that
03:26 - because there was a lot of different
03:28 - words they're very similar
03:29 - anyways what we need to do now is simply
03:32 - set the direction for that cube so that
03:35 - we added it in if we just left it like
03:36 - that it wouldn't be moving anywhere so
03:38 - we're using to change that to the
03:40 - current direction of that tail so
03:42 - whatever the tail is moving that's where
03:44 - this new cube is gonna be moving in that
03:45 - direction so were just gonna say self
03:46 - dot body negative 1 dot turn x equals DX
03:52 - and then same thing down here except
03:54 - we're gonna change this with y during y
03:58 - equals dy and that again it's just the
04:01 - where our tail is moving at that current
04:04 - moment okay so now that we've got all
04:06 - that done it's time to see what syntax
04:09 - error we get next name Rose is parameter
04:12 - and global hmm one second
04:15 - I've actually never even ran into that
04:17 - error Oh global rose as okay so let's
04:19 - just make this our and let's change this
04:22 - to be mmm one second yeah we can just
04:27 - get rid of this and this should work
04:29 - there you so now you can move around
04:31 - like this the only issue is our snack is
04:33 - not being generated on the screen and I
04:36 - don't know why that is exactly happening
04:38 - oh it's because we're not drawing the
04:39 - snack that's why so now I'm just a
04:42 - global snack up here believe that's what
04:44 - I called it and I'm simply just gonna
04:46 - say snack dot draw like that and I got
04:51 - to give it a surface so let's give a
04:53 - surface let's run and error named snack
04:56 - is not defined it's cuz I didn't global
04:59 - it down here so it's global bat okay so
05:03 - now we have the snack it's on the screen
05:05 - and you can see that when we collect it
05:07 - we have that cube added to the end of
05:10 - our snake and that pretty much is almost
05:13 - the game done so all we need to do now
05:15 - is write that reset method and then we
05:19 - need to just simply check like when we
05:21 - loop so great now the snake can go
05:22 - through each other through itself and
05:23 - you can see we have a huge error when
05:25 - the snake can code through itself so we
05:27 - need to make sure that when we hit
05:28 - ourselves we like end the game and we
05:31 - need to write that message well so
05:33 - method as well so to do this again I'm
05:36 - just gonna copy in this for loop and
05:40 - then we'll kind of go through from there
05:41 - so it's moving here okay so for X and
05:46 - range the length of s dot body we're
05:48 - gonna say s stop body X which is gonna
05:50 - be we're just looping through every cube
05:52 - in our snake body we're checking that if
05:55 - the position is in a list of all the
05:59 - positions after that works that's how
06:02 - we're checking the collision if you want
06:03 - to do it your own way
06:04 - go ahead but this is the way that I like
06:06 - to do okay so now what I'm gonna do is I
06:09 - just want to print the console like
06:11 - there's score just so that I know this
06:13 - versus score oops and then we'll just
06:18 - say plus is the length of s dot body but
06:22 - this is gonna have to be converted to a
06:24 - string unless I put a comma like that so
06:25 - let's just do it like that
06:27 - and then I am going to simply display a
06:29 - message box a message box like this
06:32 - message underscore box we can have a
06:35 - subject and we have content and we will
06:37 - do that in just a second because I
06:38 - haven't yet actually coded that and then
06:41 - we're gonna reset our snake by just
06:42 - doing s dot reset and this is gonna take
06:44 - a position which is gonna be our
06:45 - starting position again 10 10 and then
06:47 - we're gonna break out of this for loop
06:48 - because if we collided once we don't
06:51 - really care if we collide it again and
06:52 - go back and we continue the game with a
06:55 - snake that has length 1 now okay so our
06:59 - reset this is pretty straightforward all
07:02 - I'm doing in this reset is I am just
07:04 - gonna get rid of our turns I'm gonna get
07:07 - rid of our body and I'm just gonna
07:10 - change like the direction X and the
07:11 - direction Y so maybe it's faster I just
07:13 - copied in and you guys can just copy
07:15 - this out so pretty much all I'm doing is
07:18 - I'm setting a new head which is going to
07:20 - be equal to again like whatever position
07:23 - we give in because we can move it at a
07:24 - different position if we wanted to I'm
07:25 - clearing self dot body which is an ax
07:28 - class variable here and then I'm adding
07:31 - head I'm setting turns equal to blank
07:33 - Direction x is 0 Direction Y is set to 1
07:37 - against that we start moving and you can
07:39 - see it's pretty much exactly what I have
07:41 - typed out here except I'm just resetting
07:42 - the turn system okay so now that we've
07:45 - done that all we need to code is message
07:47 - box so this one's pretty easy um you can
07:50 - see up here just in case you haven't
07:52 - looked yet I import tkinter SDK and then
07:55 - from deacon cherry import message box
07:56 - now this is how you create a message box
07:59 - in a PI game and this is how you create
08:01 - one that actually shows up on top of the
08:03 - screen and that doesn't like float kind
08:05 - of below it or doesn't show up right
08:07 - away if you want to say that so just
08:09 - watch this is extremely useful to use in
08:11 - other programs too if you if you copy
08:13 - out this function and then you just drag
08:15 - it into other one so attributes topmost
08:22 - column true what this simply does is
08:25 - we're creating a route oops
08:27 - which is not route EK its route equal to
08:30 - TK TK which is gonna be a new tkinter
08:32 - window we're making sure that this
08:34 - window is going to be on top of anything
08:36 - so if we have like a bunch of different
08:38 - windows open it just comes up on
08:40 - witches will be not I'm just gonna
08:41 - simply make this window now invisible
08:44 - and I'll explain how this works in a
08:45 - second and then from this message box
08:48 - what do you call it method class
08:50 - whatever guess a message box let's show
08:52 - info and we're gonna do subject and
08:56 - content and this just takes it takes a
08:58 - few more parameters as well if you want
09:00 - but pretty much this just shows info
09:01 - given whatever subject we type in and
09:03 - whatever content we have and now I'm
09:05 - gonna say try root destroy like that
09:13 - except oops pops and don't ask me what
09:18 - this does because honestly I don't know
09:19 - but it just works so pretty much it
09:21 - shows his message books and I'm actually
09:23 - pretty sure the way that this works is
09:25 - it constantly keeps trying to destroy
09:27 - the message books until eventually you
09:30 - click the X button and then it actually
09:31 - can I think it's like something like
09:33 - that so anyways not secret message books
09:34 - and with that we all we need to do is
09:37 - add a subject and contents or insight
09:39 - you lost and our message will be play
09:44 - again doctored up let's run the program
09:48 - for the last time and make sure
09:50 - everything is working so there we go I
09:53 - just need to get my snake to a length
09:54 - that is a large enough to the point
09:56 - where I can actually hit myself oh okay
10:01 - and there so pretty much we ran into an
10:03 - air hmm what is the air I spelled
10:06 - attributes wrong that is lovely I run
10:08 - into let's run back up here attributes
10:13 - attributes out routes where do I even
10:14 - make this function I must have scrolled
10:15 - path it alright here we go
10:19 - and I believe that's correct
10:21 - let's try this now so I'm actually just
10:25 - gonna go see if I can there we go okay
10:29 - so we get a message says you lost play
10:31 - again and the reason I died there by the
10:32 - way is because while I was moving right
10:33 - I moved left so technically the head of
10:37 - my snake actually ran into another part
10:38 - of it so it says you lost play again and
10:41 - you can make that say exactly you want
10:43 - and then we can see that our guy just
10:45 - continues to move so on so anyways I
10:48 - know that a lot of this has been kind of
10:50 - confusing some of the stuffs been all
10:52 - over the place
10:53 - but this was coding snake in Python I
10:56 - tried to explain everything as best I
10:57 - could if there's anything that you want
10:58 - further clarification on it's maybe
11:00 - something that's confusing
11:01 - leave a comment down below and I'll be
11:03 - sure to get back to you with an answer
11:05 - other than that if you guys enjoyed the
11:07 - video please make sure you leave a like
11:09 - and subscribe and I will see you again
11:10 - in the next one
11:13 - [Music]

Cleaned transcript:

and then after that what else do we need for cube I don't think we actually need anything else I think that's all we need oh I'm gonna change the color that's what I want to do we change the color equal to green so red green blue 255 for green so that it shows up in this visible on the screen and now what I'm gonna do down here in this while loop is I'm gonna say snack I'm gonna check if our the head of our snake has hit the the stack and if it has we're gonna add another part to the body of the snake otherwise we're not gonna do that right and then we're gonna generate a new snack and so entrence just gonna say if s dot body 0 dot paws and this is gonna be the head right because we have it ordered I don't need those brackets is equal to snack dot pause and remember these are both cube objects that's works fine because we're gonna be tuples then what we're gonna do is we're something to say s dot add cube which is a method that we have there that we haven't actually written yet and we're going to say snack is now equal to well a new cube so I'm just gonna copy this and paste it here so all we're doing is now generating a new cube for snack I'm sure I could put something in that like change it but this is just a way that works ok so now that we've done that we should be able to move around the screen and get the snack but we need to code in the add snack method here which I believe I have here or add Q so the odd cube is pretty straightforward we just have to figure out where we're adding that snack or wherever adding that cube I don't know why I keep calling it snack to the list so what we're going to do the math figure we're the tailless and we want to add it after that tail so tail is equal to self dot body negative one the last element in that list I'm going to say dxdy which again is going to be our direction X Direction Y I'm just sorting it shredding it here it's gonna be tail dot turn X and tail dot turn Y like this now again you can do some two lines I'm just doing it like this because it's faster and now I'm gonna copy something in and just go through exactly what this does okay so pretty much huh this looks complicated but all its gonna be doing is checking what direction that we're currently moving in like the head of the cube or the tail actually of the cube is moving in so that we can then make sure that when we add that cube we know where to add it so if we're adding it like to the right of the cube to the left of the cube above it below it and we can give it the correct direction to be moving in so pretty much what we do here is we just say we're gonna append a new cube to our body and its position if we're moving to the right which in here we are because DX equals 1 is 1 less than the x position of that tail so whatever the last cube is 1 less than that and that's so that we don't add a cube per se to the right when we're moving to the right and then we're just gonna have overlapping cubes and you're not gonna be able to see them right same thing down here if we're moving down that means or not down sorry for moving left that means we need to add the cube to the right side so one plus that tail the exposition of the tail of the cube of the snake sorry so that we can have it in the proper position right and the same thing here with x and y or with y so that when we're moving up or we're moving down then we add it above otherwise to be move we put it below sorry I just stumbled through that because there was a lot of different words they're very similar anyways what we need to do now is simply set the direction for that cube so that we added it in if we just left it like that it wouldn't be moving anywhere so we're using to change that to the current direction of that tail so whatever the tail is moving that's where this new cube is gonna be moving in that direction so were just gonna say self dot body negative 1 dot turn x equals DX and then same thing down here except we're gonna change this with y during y equals dy and that again it's just the where our tail is moving at that current moment okay so now that we've got all that done it's time to see what syntax error we get next name Rose is parameter and global hmm one second I've actually never even ran into that error Oh global rose as okay so let's just make this our and let's change this to be mmm one second yeah we can just get rid of this and this should work there you so now you can move around like this the only issue is our snack is not being generated on the screen and I don't know why that is exactly happening oh it's because we're not drawing the snack that's why so now I'm just a global snack up here believe that's what I called it and I'm simply just gonna say snack dot draw like that and I got to give it a surface so let's give a surface let's run and error named snack is not defined it's cuz I didn't global it down here so it's global bat okay so now we have the snack it's on the screen and you can see that when we collect it we have that cube added to the end of our snake and that pretty much is almost the game done so all we need to do now is write that reset method and then we need to just simply check like when we loop so great now the snake can go through each other through itself and you can see we have a huge error when the snake can code through itself so we need to make sure that when we hit ourselves we like end the game and we need to write that message well so method as well so to do this again I'm just gonna copy in this for loop and then we'll kind of go through from there so it's moving here okay so for X and range the length of s dot body we're gonna say s stop body X which is gonna be we're just looping through every cube in our snake body we're checking that if the position is in a list of all the positions after that works that's how we're checking the collision if you want to do it your own way go ahead but this is the way that I like to do okay so now what I'm gonna do is I just want to print the console like there's score just so that I know this versus score oops and then we'll just say plus is the length of s dot body but this is gonna have to be converted to a string unless I put a comma like that so let's just do it like that and then I am going to simply display a message box a message box like this message underscore box we can have a subject and we have content and we will do that in just a second because I haven't yet actually coded that and then we're gonna reset our snake by just doing s dot reset and this is gonna take a position which is gonna be our starting position again 10 10 and then we're gonna break out of this for loop because if we collided once we don't really care if we collide it again and go back and we continue the game with a snake that has length 1 now okay so our reset this is pretty straightforward all I'm doing in this reset is I am just gonna get rid of our turns I'm gonna get rid of our body and I'm just gonna change like the direction X and the direction Y so maybe it's faster I just copied in and you guys can just copy this out so pretty much all I'm doing is I'm setting a new head which is going to be equal to again like whatever position we give in because we can move it at a different position if we wanted to I'm clearing self dot body which is an ax class variable here and then I'm adding head I'm setting turns equal to blank Direction x is 0 Direction Y is set to 1 against that we start moving and you can see it's pretty much exactly what I have typed out here except I'm just resetting the turn system okay so now that we've done that all we need to code is message box so this one's pretty easy um you can see up here just in case you haven't looked yet I import tkinter SDK and then from deacon cherry import message box now this is how you create a message box in a PI game and this is how you create one that actually shows up on top of the screen and that doesn't like float kind of below it or doesn't show up right away if you want to say that so just watch this is extremely useful to use in other programs too if you if you copy out this function and then you just drag it into other one so attributes topmost column true what this simply does is we're creating a route oops which is not route EK its route equal to TK TK which is gonna be a new tkinter window we're making sure that this window is going to be on top of anything so if we have like a bunch of different windows open it just comes up on witches will be not I'm just gonna simply make this window now invisible and I'll explain how this works in a second and then from this message box what do you call it method class whatever guess a message box let's show info and we're gonna do subject and content and this just takes it takes a few more parameters as well if you want but pretty much this just shows info given whatever subject we type in and whatever content we have and now I'm gonna say try root destroy like that except oops pops and don't ask me what this does because honestly I don't know but it just works so pretty much it shows his message books and I'm actually pretty sure the way that this works is it constantly keeps trying to destroy the message books until eventually you click the X button and then it actually can I think it's like something like that so anyways not secret message books and with that we all we need to do is add a subject and contents or insight you lost and our message will be play again doctored up let's run the program for the last time and make sure everything is working so there we go I just need to get my snake to a length that is a large enough to the point where I can actually hit myself oh okay and there so pretty much we ran into an air hmm what is the air I spelled attributes wrong that is lovely I run into let's run back up here attributes attributes out routes where do I even make this function I must have scrolled path it alright here we go and I believe that's correct let's try this now so I'm actually just gonna go see if I can there we go okay so we get a message says you lost play again and the reason I died there by the way is because while I was moving right I moved left so technically the head of my snake actually ran into another part of it so it says you lost play again and you can make that say exactly you want and then we can see that our guy just continues to move so on so anyways I know that a lot of this has been kind of confusing some of the stuffs been all over the place but this was coding snake in Python I tried to explain everything as best I could if there's anything that you want further clarification on it's maybe something that's confusing leave a comment down below and I'll be sure to get back to you with an answer other than that if you guys enjoyed the video please make sure you leave a like and subscribe and I will see you again in the next one
