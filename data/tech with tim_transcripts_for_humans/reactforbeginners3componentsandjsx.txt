With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome to the third
00:10 - video in this react tutorial for
00:12 - beginners
00:13 - in this video i'm going to be covering
00:14 - components and jsx so let's go ahead and
00:17 - dive
00:18 - in so the first thing we need to discuss
00:19 - is what a component is
00:21 - well component is really an aspect of
00:24 - your user interface
00:25 - now components in react are reusable
00:27 - this is one of the reasons why people
00:29 - love react
00:30 - because you have these really nice kind
00:31 - of streamlined uh components that are
00:34 - flexible
00:34 - dynamic and are reusable in many
00:36 - different areas of your application
00:38 - there's actually an entire component
00:40 - library or sorry entire component
00:42 - libraries that are built by people that
00:44 - contain just
00:45 - nice components that look nice on the
00:47 - screen have some good functionality
00:49 - and that you can use with your react
00:51 - application for example if you ever went
00:53 - and worked at you know shopify or
00:54 - spotify or facebook or whatever some
00:56 - place where they use
00:58 - react you would see that they probably
00:59 - have their own component library of all
01:01 - these different reusable components
01:03 - and you can use those to build different
01:05 - parts of whatever new user interface it
01:06 - is that you're going to go ahead and
01:07 - build
01:08 - regardless how do we create a component
01:10 - what does a component look like
01:11 - let's go through all of that so here i'm
01:13 - in my app.js file
01:15 - and this is our first component if you
01:16 - hover over this here you can see it's a
01:18 - jsx
01:19 - element that's what it returns and
01:21 - whenever you have something returning a
01:22 - jsx element
01:24 - in react by default that's going to be
01:25 - known as a functional component
01:27 - now there's two ways to create
01:29 - components one way is using functions
01:31 - like this
01:32 - another way is using classes i will show
01:34 - you the class way in a minute
01:36 - regardless since we are returning a div
01:38 - here inside the div we have some content
01:40 - whatever this is considered a component
01:42 - however if i go ahead and make a
01:44 - function and i say function
01:46 - and we just call this you know foo this
01:48 - is not a component
01:49 - i could return some string hello and
01:52 - this would work just like any other
01:54 - normal function would work uh this is
01:56 - not a component because well i'm not
01:57 - returning a jsx element
01:59 - which is uh this kind of div here we'll
02:02 - get into jsx at the end
02:03 - because there's some special syntax that
02:05 - i can show you but for now kind of
02:06 - assume that jsx is just your vanilla
02:08 - html with a few additions all right so
02:11 - anyways let me show you how we can make
02:13 - our own component and then hopefully
02:14 - this will
02:15 - kind of illustrate how they work so i'm
02:16 - going to say function and let's just
02:18 - make a
02:19 - let's say info component these are all
02:22 - going to be kind of silly examples for
02:23 - now
02:24 - just to illustrate what a component
02:26 - actually is now from this component what
02:28 - i'm going to do is
02:29 - return and actually i will return in
02:31 - parentheses here a
02:33 - div and then what i will do is have an
02:36 - h1 tag inside of this div so i'll say h1
02:40 - and the h1 tab and i will say inventory
02:45 - system whatever okay and then after this
02:48 - i'm going to put a p
02:49 - tag here and for the p tag i am going
02:52 - to say um manage
02:56 - your stuff okay really straightforward
02:59 - we don't need to do anything much more
03:01 - than that
03:01 - now we have created an info component
03:04 - now
03:04 - just note here that whenever you are
03:05 - trying to return kind of html or jsx
03:08 - from a component it needs to have one
03:10 - parent element
03:11 - so here if i remove this div and i try
03:13 - to just return my h1 mip
03:15 - we're going to get an issue the reason
03:16 - for this is these are two separate
03:17 - components
03:18 - uh they're not one so now if i do the
03:20 - div i'm kind of returning this one
03:22 - div component if you want to call it
03:24 - that uh that has two children inside of
03:26 - it so i'm kind of wrapping the two
03:28 - children
03:28 - so that this actually works so just keep
03:30 - that in mind if you're getting errors
03:31 - with that make sure you have kind of one
03:33 - top level or parent element for all of
03:34 - the stuff that's being returned
03:36 - all right so now i'll show you how we
03:38 - use this info component so if i go
03:39 - inside of app now
03:41 - what i can do is i can actually just
03:42 - render info
03:44 - like that this is how you use a
03:46 - component you just write out the name of
03:48 - it
03:48 - put it in angle brackets and then close
03:50 - the component like that you also can
03:52 - just do it like that with a slash you
03:53 - don't need to have two separate tags
03:55 - and so now you can see we get inventory
03:56 - management or inventory system and it
03:58 - says manage your stuff
04:00 - now the great thing about components is
04:01 - you can use them multiple times right so
04:03 - i can just put another one here and then
04:05 - shows up again and then i can put
04:07 - another one and it shows up again
04:09 - i'm going to show you how we can make it
04:11 - so when we use a component multiple
04:12 - times
04:13 - we can pass different properties to it
04:15 - that'll be in the next video
04:16 - so that it looks different based on kind
04:18 - of the arguments that we give it
04:20 - anyways for now we'll leave just this
04:21 - kind of one info component like this
04:24 - and there you go you have now created
04:26 - your first react component now what i'm
04:28 - going to do is make
04:29 - another component and this component
04:31 - will kind of make like maybe an input
04:33 - field or something
04:34 - so we'll say function and we'll say
04:36 - maybe
04:37 - add item whatever you can call them
04:39 - whatever you want obviously
04:40 - and from here what i'm going to do is
04:42 - return an input field
04:44 - so i will return a div and
04:47 - then inside of this div what i'm going
04:49 - to do is make an
04:50 - input i'm going to say type
04:54 - equals and this will be button or
04:56 - actually let's make it
04:58 - text and i think that's pretty much all
05:00 - we really need for that
05:02 - and then what we can do is what is it
05:04 - saying here uh oh
05:06 - sorry the input tag doesn't have an
05:07 - ending tag it just ends like that
05:09 - and then is there a value we can give it
05:11 - a default value or we can give it
05:13 - um so actually what i'm going to do here
05:15 - is change this div to be a
05:17 - form so let's make this a form instead
05:19 - so i can use my label tag
05:20 - so let's remove form let's now give this
05:23 - an id
05:24 - let's say id is equal to i don't know
05:27 - input or input's probably not going to
05:29 - be a good thing to make it uh let's just
05:31 - make this
05:32 - text text form
05:36 - okay and then we can do a label so i'll
05:38 - say label
05:39 - for equals and then a text hyphen
05:42 - form and then inside of here we will say
05:47 - type something like that all right so
05:50 - now we've created our ad
05:51 - item component now i'm going to use that
05:54 - inside of my app so now after
05:56 - info i'm going to say add
05:59 - item like that now actually let's just
06:02 - end it this way
06:03 - and now notice we have our type
06:04 - something we can type something in here
06:07 - that's all working
06:08 - and if i wanted to use this multiple
06:10 - times well i could do that right
06:12 - and there you go now if we wait we
06:14 - should see that we have three input
06:16 - fields popping up
06:17 - that i'll say type something then of
06:20 - course inside of our components we could
06:21 - render other components
06:22 - so inside of our add item what we could
06:25 - do is maybe we could render the info
06:26 - component right so we could say
06:27 - info like that then if we run this
06:30 - notice that every single time that we
06:33 - generate an add item component it's
06:35 - going to also render an info component
06:36 - and start showing up afterwards
06:38 - all right so now that we've seen how to
06:39 - render the add item three times onto the
06:42 - screen we've looked at some basics of
06:43 - components i'm going to talk to you
06:45 - about jsx
06:46 - now jsx stands for javascript xml and
06:49 - there's a few different things that you
06:50 - can do with it but the most valuable is
06:52 - being able to evaluate
06:53 - javascript expressions right inside of
06:56 - your kind of output html here this makes
06:58 - it really really useful to generate
06:59 - dynamic pages
07:00 - especially if you have a ton of data
07:02 - that you want to render obviously you
07:04 - don't want to manually write all of that
07:05 - out you're going to want to write some
07:06 - code that can do it more efficiently for
07:08 - you
07:08 - so i'm going to go inside of my info
07:10 - component here and what i'm going to do
07:11 - is i'm going to define a variable
07:13 - so i'm going to say const and we'll just
07:14 - make this maybe title
07:16 - i'll set this equal to this is my title
07:19 - okay like that now i want to show the
07:22 - value of this variable
07:24 - inside of my html here how do i do that
07:27 - well you might be tempted just to write
07:29 - something like
07:30 - title right and you might think that
07:32 - that's going to work but when i do that
07:33 - you see that it just shows me the actual
07:35 - string title
07:36 - if i wanted to show the value of this
07:38 - variable not just the string title what
07:40 - i would do
07:41 - is surround this in single curly braces
07:44 - so when i do this notice now it's
07:45 - showing me this is my title because when
07:47 - i've surrounded in curly braces
07:49 - it tells react hey this is a variable
07:51 - this is an expression of some sort
07:52 - so you need to evaluate it and then
07:54 - display whatever the evaluation is
07:56 - and so in the same way i can take title
07:58 - and i can put that inside of my h1 tag
08:00 - here
08:01 - and now you're going to see that it says
08:03 - this is my title now we can do some
08:05 - other cool things as well i can make
08:06 - another variable here and i could say
08:07 - const
08:09 - show underscore or show title
08:12 - is equal to and then maybe we make this
08:14 - equal to false
08:15 - and now maybe we're only going to show
08:17 - the title and i'm
08:18 - typing in python right now it needs to
08:20 - be lowercase we're only going to show
08:21 - the title if show title is equal to true
08:24 - now what i can do is i could say all
08:26 - right show
08:27 - title question mark title otherwise
08:30 - nothing now if i do this notice that
08:33 - when show title is equal to false
08:35 - nothing's showing up but
08:36 - if i make this equal to true then you're
08:39 - going to see that
08:40 - if i type true with a lowercase i'm so
08:42 - used to the uppercase
08:43 - it shows my title so this right here is
08:45 - what's known as a ternary expression
08:47 - actually i believe that's what it's
08:48 - called i always butcher the name someone
08:50 - can correct me in the comments if i'm
08:51 - mispronouncing that
08:52 - but what this allows you to do is write
08:54 - a condition and then you put question
08:55 - mark and this says okay i'm going to
08:57 - check if this is true
08:58 - if this is true do this otherwise do
09:01 - this and so we're evaluating this
09:02 - expression
09:03 - and what we see is that we're going to
09:04 - get title whenever this is true
09:06 - and we're going to get an empty string
09:08 - whenever this is false now i could
09:09 - change this to say
09:11 - no title and then if i make this to
09:14 - false you see that it goes to no title
09:16 - so just an example of something
09:18 - interesting that you can do
09:19 - inside of jsx now sometimes you actually
09:22 - want to return completely different
09:23 - stuff
09:24 - based on the value of a variable or
09:26 - based on some condition
09:27 - in that case you could do an if
09:28 - statement inside of this function right
09:30 - and i can say if
09:31 - and this isn't jsx this is just vanilla
09:33 - javascript but i can say
09:35 - if show title then i'm going to do
09:38 - this and maybe we'll just go here and
09:42 - say title
09:43 - otherwise though what i'm going to do is
09:46 - return something else and maybe i'm just
09:48 - going to return
09:48 - a p tag and say you know
09:52 - empty okay so now if i do this and i
09:55 - save notice it's showing me empty
09:56 - because show title's false
09:58 - but if i change show title to true then
10:00 - it's going to show me this is my title
10:01 - and manage your stuff
10:03 - so just showing you kind of how you can
10:05 - dynamically render different things here
10:07 - you can use these uh single curly braces
10:10 - to embed
10:10 - an expression and the expression can be
10:12 - like whatever you want right like i
10:14 - could do something like
10:15 - let's go inside of here and go 2 plus 4.
10:18 - if i do
10:19 - 2 plus 4 notice we're going to get 6
10:21 - right so we'll evaluate the expression
10:23 - and you also can do stuff like map
10:25 - filter you can use all kinds of
10:27 - different javascript functions inside of
10:28 - here
10:29 - and we'll see more and more of this as
10:30 - we go through this tutorial but that is
10:32 - the basics of kind of embedding
10:34 - variables or values
10:35 - inside of your output html here so we
10:39 - will continue in one second we need to
10:40 - quickly thank the sponsor of this video
10:42 - and this series which is algo expert
10:44 - as you know algo expert is the best
10:46 - platform to use when preparing for your
10:48 - software engineering coding interviews
10:49 - i actually work at algo expert as an
10:51 - algorithms instructor
10:53 - and you can find right now about 45 to
10:55 - 50 questions that were created by me on
10:57 - the platform
10:58 - check them out from the link in the
11:00 - description and use the code tech with
11:01 - tim for a discount on the algo expert
11:03 - platform
11:04 - now another thing to note here is how
11:06 - you use this kind of
11:08 - syntax i guess when you want this to be
11:10 - an argument to one of your
11:12 - components or one of the kind of html
11:14 - tags so for example
11:16 - maybe we want the four or maybe we want
11:19 - something related to let's let's go for
11:20 - input and let's say value
11:22 - maybe we want this to be equal to a
11:23 - variable we have maybe we have
11:25 - const value is equal to
11:28 - default or something like that and we
11:30 - want the value of this variable to be
11:32 - the value of this input box well in this
11:34 - case what you would do
11:36 - is the same thing you would just say
11:37 - value is equal to and then inside of
11:41 - these curly braces you would put value
11:43 - and now notice it's going to be equal to
11:44 - default
11:44 - if i change this and i say tim is great
11:48 - and we save notice it's going to give us
11:50 - tim is great now for the value so just
11:52 - another way that you can do that you can
11:54 - use the curly braces here
11:56 - okay so i think that was probably a good
11:57 - introduction to components
11:59 - and jsx syntax so using these kind of
12:01 - individual curly braces here and how it
12:03 - evaluates the expression
12:05 - the last thing i'm going to show you
12:06 - here is how we can create a class based
12:07 - component and how we can
12:08 - put these into different files because
12:10 - oftentimes we want to do that
12:12 - so in fact what i'm going to do is copy
12:13 - this info component right here
12:15 - you'll notice we'll get an error right
12:16 - now because we're trying to use info and
12:18 - while it's not defined
12:19 - what i'm going to do though is put it
12:20 - inside of its own file so i'm going to
12:21 - go to src
12:22 - i'm going to make a new file i'm going
12:23 - to call it info.js
12:25 - and then inside of here i'm just going
12:27 - to paste this now what i'm going to try
12:29 - to do is
12:29 - import this info function here from
12:33 - app.js now what you would do normally is
12:36 - you would say
12:37 - import and then you do the name of the
12:40 - component you want to import so info
12:42 - and then from and then dot slash
12:45 - and then info.js the reason you're doing
12:47 - dot slash is you're defining a relative
12:49 - path
12:50 - what that means is you're saying okay
12:51 - relative from where i am currently
12:53 - i want to look for info.js if you wanted
12:56 - to look in the public folder then you
12:58 - would have to type in obviously a
12:59 - different path then
13:00 - just dot slash info.js regardless you
13:02 - can see this isn't working it's saying
13:04 - attempting to import
13:05 - info.js does not contain default export
13:08 - and the reason for that is that
13:10 - when you are trying to import something
13:11 - from a function it must be
13:13 - export so what you can say here is right
13:15 - on the same line as the function
13:16 - export default function info
13:20 - and now this should work notice that
13:22 - everything is all good because we're
13:24 - exporting this function which means it's
13:25 - now allowed to be imported
13:27 - from here now if i didn't export this
13:30 - with default
13:31 - and i just said export what this will
13:33 - mean is i now need to surround
13:35 - info in these kind of curly parentheses
13:38 - here
13:38 - curly brackets and the reason for that
13:40 - this should work now um
13:42 - what's going on here unexpected token
13:44 - comma okay so i don't know why i was
13:46 - getting that error i just refreshed and
13:47 - everything's working now
13:48 - but regardless you can see that when i
13:49 - don't export this as the default export
13:51 - i need to surround it in
13:53 - parentheses or in these curly braces so
13:55 - when you exported default what that
13:57 - means is you can import it without
13:59 - these curly braces but when you do not
14:01 - export it default you just
14:02 - export it that means that you then need
14:04 - to surround it
14:06 - in these things right here and you can
14:08 - only have one default export
14:10 - so you say x4 default this is the
14:11 - default thing being exported but you can
14:13 - have as many other things being exported
14:15 - that are not the default if that makes
14:17 - sense
14:17 - so anyways we'll leave it as export
14:18 - default but what you can actually do is
14:20 - rather than writing it on the same line
14:22 - if you want to clean this up you can say
14:23 - export default
14:25 - and then info like that and now the same
14:27 - thing should work
14:28 - if we go over here and we
14:31 - run failed to compile i cannot import
14:35 - oh that's because we still have it in
14:36 - the curly braces let's remove the curly
14:38 - braces
14:39 - now you can see that this is if i
14:41 - refresh here
14:42 - still working awesome so that is good
14:44 - and here you can see we were exporting
14:46 - default app
14:47 - that's the reason why from index.js we
14:49 - could just import app
14:50 - if it wasn't the default export we would
14:52 - need to surround it
14:53 - in our curly braces okay so that is how
14:56 - you put stuff in different files
14:57 - it's usually a good idea to put your
14:58 - components in different files just to
15:00 - keep things nice and clean
15:01 - although sometimes you might have some
15:03 - small components in the same file and
15:04 - you export all of them out
15:06 - okay so now the last thing i'm going to
15:07 - show us is just how we can actually
15:09 - convert this info component that is a
15:11 - functional component to a class based
15:12 - component
15:13 - won't take us very long i just want to
15:14 - show you what a class based component
15:16 - looks like
15:16 - so what i'm going to do is say class and
15:19 - i will name this
15:20 - info and then this is going to extend
15:23 - react
15:23 - dot component now since we're extending
15:26 - react what we need to do is import react
15:28 - so we're going to say import
15:30 - react from and then this is going to be
15:33 - in all lower cases react
15:35 - make sure you don't import it from react
15:36 - dom if you do that you're going to get
15:37 - an error
15:38 - you want to import it just from react
15:41 - now this is the default export and so
15:43 - that means we can import it this way if
15:44 - it wasn't we would need to surround it
15:46 - in our kind of curly braces anyways now
15:49 - this should be working what i'm going to
15:50 - do is define a render method
15:52 - and inside of this render method you're
15:54 - going to write what you want to be
15:56 - returned
15:57 - to render on the screen so by default
15:59 - the return statement from a functional
16:02 - component
16:02 - is just kind of this render method
16:04 - whereas when you create a class you need
16:06 - to define manually the
16:07 - render method and so i'm going to copy
16:09 - this right here
16:11 - and paste it inside of there and i'll
16:13 - just delete it from inside here so we
16:14 - know that we've already got that
16:15 - now what i'm going to do is save you can
16:17 - see my stuff's auto formatting i'm going
16:19 - to show you in one second how you can
16:20 - set up the auto formatter if yours isn't
16:21 - doing that
16:22 - and then what i'm going to do is just
16:23 - copy my two variables here so const
16:25 - title and const
16:26 - show title and i'm just going to paste
16:28 - them for now inside of this render
16:29 - method
16:30 - we could put them as class variables if
16:32 - we wanted to but for now it's fine we'll
16:33 - just put them inside of rend
16:35 - then what i'm going to do is delete this
16:36 - so delete info
16:38 - save and you should see that now
16:39 - everything is working the way that it
16:40 - was before
16:41 - so all i've done is just now made a
16:43 - class-based component you can see that
16:45 - it works the exact same as a functional
16:46 - component
16:47 - except we kind of have to write more so
16:48 - we say class info extends
16:50 - react.component
16:51 - we have to define a render method and
16:53 - then it's just like a little bit
16:54 - different syntax that's really the main
16:56 - differences between a functional and
16:58 - class-based component
16:59 - just a little bit of a different syntax
17:01 - there is some performance differences
17:02 - but for our purposes they're not really
17:04 - worth maybe talking about if you're
17:06 - getting into you know professional react
17:07 - development then you can make the
17:08 - argument you know which is better
17:10 - functional or class-based components
17:12 - i believe right now react is
17:13 - recommending using functional components
17:15 - unless you have a ton of state in which
17:17 - they are saying you should use
17:19 - class-based components anyways we'll
17:20 - talk about that later when we actually
17:22 - discuss state
17:23 - but with that that's going to wrap up
17:24 - the video okay so i realized i totally
17:26 - forgot to show you guys with the auto
17:28 - formatter so i'll do that quickly right
17:29 - now there's an extension called prettier
17:32 - this is a really popular extension it
17:33 - has 12.35 million downloads
17:36 - anyways to find it go to the extensions
17:38 - pane in vs code
17:39 - search prettier and install it now that
17:41 - should auto format the code for you
17:44 - however you may have to configure this
17:45 - so what you can do is press ctrl shift p
17:48 - what this will do is open up the command
17:50 - palette and then if you type format
17:52 - you'll see format document with you'll
17:54 - see file save without formatting all of
17:56 - these different options
17:57 - and what you can press format document
17:59 - with and then for me i have multiple
18:00 - formatters but for you you'll probably
18:02 - just have one
18:02 - you can press prettier and then it will
18:04 - automatically format the document that
18:06 - you're on
18:06 - now if you want to format when you save
18:08 - i believe that's a default behavior
18:10 - but you can go to the vs code settings
18:12 - so if you go to settings
18:14 - and then i think you could probably look
18:15 - at format and here you go see editor
18:18 - format on paste format on save
18:19 - you can check these boxes based on the
18:21 - behavior that you would like
18:23 - and here's the let you guys figure that
18:24 - out that is the auto formatter again
18:26 - it's an extension called prettier and
18:28 - with that that's going to end the video
18:30 - i hope you guys enjoyed if you did make
18:31 - sure to leave a like subscribe to the
18:33 - channel and i will see you in
18:34 - another one

Cleaned transcript:

hello everybody and welcome to the third video in this react tutorial for beginners in this video i'm going to be covering components and jsx so let's go ahead and dive in so the first thing we need to discuss is what a component is well component is really an aspect of your user interface now components in react are reusable this is one of the reasons why people love react because you have these really nice kind of streamlined uh components that are flexible dynamic and are reusable in many different areas of your application there's actually an entire component library or sorry entire component libraries that are built by people that contain just nice components that look nice on the screen have some good functionality and that you can use with your react application for example if you ever went and worked at you know shopify or spotify or facebook or whatever some place where they use react you would see that they probably have their own component library of all these different reusable components and you can use those to build different parts of whatever new user interface it is that you're going to go ahead and build regardless how do we create a component what does a component look like let's go through all of that so here i'm in my app.js file and this is our first component if you hover over this here you can see it's a jsx element that's what it returns and whenever you have something returning a jsx element in react by default that's going to be known as a functional component now there's two ways to create components one way is using functions like this another way is using classes i will show you the class way in a minute regardless since we are returning a div here inside the div we have some content whatever this is considered a component however if i go ahead and make a function and i say function and we just call this you know foo this is not a component i could return some string hello and this would work just like any other normal function would work uh this is not a component because well i'm not returning a jsx element which is uh this kind of div here we'll get into jsx at the end because there's some special syntax that i can show you but for now kind of assume that jsx is just your vanilla html with a few additions all right so anyways let me show you how we can make our own component and then hopefully this will kind of illustrate how they work so i'm going to say function and let's just make a let's say info component these are all going to be kind of silly examples for now just to illustrate what a component actually is now from this component what i'm going to do is return and actually i will return in parentheses here a div and then what i will do is have an h1 tag inside of this div so i'll say h1 and the h1 tab and i will say inventory system whatever okay and then after this i'm going to put a p tag here and for the p tag i am going to say um manage your stuff okay really straightforward we don't need to do anything much more than that now we have created an info component now just note here that whenever you are trying to return kind of html or jsx from a component it needs to have one parent element so here if i remove this div and i try to just return my h1 mip we're going to get an issue the reason for this is these are two separate components uh they're not one so now if i do the div i'm kind of returning this one div component if you want to call it that uh that has two children inside of it so i'm kind of wrapping the two children so that this actually works so just keep that in mind if you're getting errors with that make sure you have kind of one top level or parent element for all of the stuff that's being returned all right so now i'll show you how we use this info component so if i go inside of app now what i can do is i can actually just render info like that this is how you use a component you just write out the name of it put it in angle brackets and then close the component like that you also can just do it like that with a slash you don't need to have two separate tags and so now you can see we get inventory management or inventory system and it says manage your stuff now the great thing about components is you can use them multiple times right so i can just put another one here and then shows up again and then i can put another one and it shows up again i'm going to show you how we can make it so when we use a component multiple times we can pass different properties to it that'll be in the next video so that it looks different based on kind of the arguments that we give it anyways for now we'll leave just this kind of one info component like this and there you go you have now created your first react component now what i'm going to do is make another component and this component will kind of make like maybe an input field or something so we'll say function and we'll say maybe add item whatever you can call them whatever you want obviously and from here what i'm going to do is return an input field so i will return a div and then inside of this div what i'm going to do is make an input i'm going to say type equals and this will be button or actually let's make it text and i think that's pretty much all we really need for that and then what we can do is what is it saying here uh oh sorry the input tag doesn't have an ending tag it just ends like that and then is there a value we can give it a default value or we can give it um so actually what i'm going to do here is change this div to be a form so let's make this a form instead so i can use my label tag so let's remove form let's now give this an id let's say id is equal to i don't know input or input's probably not going to be a good thing to make it uh let's just make this text text form okay and then we can do a label so i'll say label for equals and then a text hyphen form and then inside of here we will say type something like that all right so now we've created our ad item component now i'm going to use that inside of my app so now after info i'm going to say add item like that now actually let's just end it this way and now notice we have our type something we can type something in here that's all working and if i wanted to use this multiple times well i could do that right and there you go now if we wait we should see that we have three input fields popping up that i'll say type something then of course inside of our components we could render other components so inside of our add item what we could do is maybe we could render the info component right so we could say info like that then if we run this notice that every single time that we generate an add item component it's going to also render an info component and start showing up afterwards all right so now that we've seen how to render the add item three times onto the screen we've looked at some basics of components i'm going to talk to you about jsx now jsx stands for javascript xml and there's a few different things that you can do with it but the most valuable is being able to evaluate javascript expressions right inside of your kind of output html here this makes it really really useful to generate dynamic pages especially if you have a ton of data that you want to render obviously you don't want to manually write all of that out you're going to want to write some code that can do it more efficiently for you so i'm going to go inside of my info component here and what i'm going to do is i'm going to define a variable so i'm going to say const and we'll just make this maybe title i'll set this equal to this is my title okay like that now i want to show the value of this variable inside of my html here how do i do that well you might be tempted just to write something like title right and you might think that that's going to work but when i do that you see that it just shows me the actual string title if i wanted to show the value of this variable not just the string title what i would do is surround this in single curly braces so when i do this notice now it's showing me this is my title because when i've surrounded in curly braces it tells react hey this is a variable this is an expression of some sort so you need to evaluate it and then display whatever the evaluation is and so in the same way i can take title and i can put that inside of my h1 tag here and now you're going to see that it says this is my title now we can do some other cool things as well i can make another variable here and i could say const show underscore or show title is equal to and then maybe we make this equal to false and now maybe we're only going to show the title and i'm typing in python right now it needs to be lowercase we're only going to show the title if show title is equal to true now what i can do is i could say all right show title question mark title otherwise nothing now if i do this notice that when show title is equal to false nothing's showing up but if i make this equal to true then you're going to see that if i type true with a lowercase i'm so used to the uppercase it shows my title so this right here is what's known as a ternary expression actually i believe that's what it's called i always butcher the name someone can correct me in the comments if i'm mispronouncing that but what this allows you to do is write a condition and then you put question mark and this says okay i'm going to check if this is true if this is true do this otherwise do this and so we're evaluating this expression and what we see is that we're going to get title whenever this is true and we're going to get an empty string whenever this is false now i could change this to say no title and then if i make this to false you see that it goes to no title so just an example of something interesting that you can do inside of jsx now sometimes you actually want to return completely different stuff based on the value of a variable or based on some condition in that case you could do an if statement inside of this function right and i can say if and this isn't jsx this is just vanilla javascript but i can say if show title then i'm going to do this and maybe we'll just go here and say title otherwise though what i'm going to do is return something else and maybe i'm just going to return a p tag and say you know empty okay so now if i do this and i save notice it's showing me empty because show title's false but if i change show title to true then it's going to show me this is my title and manage your stuff so just showing you kind of how you can dynamically render different things here you can use these uh single curly braces to embed an expression and the expression can be like whatever you want right like i could do something like let's go inside of here and go 2 plus 4. if i do 2 plus 4 notice we're going to get 6 right so we'll evaluate the expression and you also can do stuff like map filter you can use all kinds of different javascript functions inside of here and we'll see more and more of this as we go through this tutorial but that is the basics of kind of embedding variables or values inside of your output html here so we will continue in one second we need to quickly thank the sponsor of this video and this series which is algo expert as you know algo expert is the best platform to use when preparing for your software engineering coding interviews i actually work at algo expert as an algorithms instructor and you can find right now about 45 to 50 questions that were created by me on the platform check them out from the link in the description and use the code tech with tim for a discount on the algo expert platform now another thing to note here is how you use this kind of syntax i guess when you want this to be an argument to one of your components or one of the kind of html tags so for example maybe we want the four or maybe we want something related to let's let's go for input and let's say value maybe we want this to be equal to a variable we have maybe we have const value is equal to default or something like that and we want the value of this variable to be the value of this input box well in this case what you would do is the same thing you would just say value is equal to and then inside of these curly braces you would put value and now notice it's going to be equal to default if i change this and i say tim is great and we save notice it's going to give us tim is great now for the value so just another way that you can do that you can use the curly braces here okay so i think that was probably a good introduction to components and jsx syntax so using these kind of individual curly braces here and how it evaluates the expression the last thing i'm going to show you here is how we can create a class based component and how we can put these into different files because oftentimes we want to do that so in fact what i'm going to do is copy this info component right here you'll notice we'll get an error right now because we're trying to use info and while it's not defined what i'm going to do though is put it inside of its own file so i'm going to go to src i'm going to make a new file i'm going to call it info.js and then inside of here i'm just going to paste this now what i'm going to try to do is import this info function here from app.js now what you would do normally is you would say import and then you do the name of the component you want to import so info and then from and then dot slash and then info.js the reason you're doing dot slash is you're defining a relative path what that means is you're saying okay relative from where i am currently i want to look for info.js if you wanted to look in the public folder then you would have to type in obviously a different path then just dot slash info.js regardless you can see this isn't working it's saying attempting to import info.js does not contain default export and the reason for that is that when you are trying to import something from a function it must be export so what you can say here is right on the same line as the function export default function info and now this should work notice that everything is all good because we're exporting this function which means it's now allowed to be imported from here now if i didn't export this with default and i just said export what this will mean is i now need to surround info in these kind of curly parentheses here curly brackets and the reason for that this should work now um what's going on here unexpected token comma okay so i don't know why i was getting that error i just refreshed and everything's working now but regardless you can see that when i don't export this as the default export i need to surround it in parentheses or in these curly braces so when you exported default what that means is you can import it without these curly braces but when you do not export it default you just export it that means that you then need to surround it in these things right here and you can only have one default export so you say x4 default this is the default thing being exported but you can have as many other things being exported that are not the default if that makes sense so anyways we'll leave it as export default but what you can actually do is rather than writing it on the same line if you want to clean this up you can say export default and then info like that and now the same thing should work if we go over here and we run failed to compile i cannot import oh that's because we still have it in the curly braces let's remove the curly braces now you can see that this is if i refresh here still working awesome so that is good and here you can see we were exporting default app that's the reason why from index.js we could just import app if it wasn't the default export we would need to surround it in our curly braces okay so that is how you put stuff in different files it's usually a good idea to put your components in different files just to keep things nice and clean although sometimes you might have some small components in the same file and you export all of them out okay so now the last thing i'm going to show us is just how we can actually convert this info component that is a functional component to a class based component won't take us very long i just want to show you what a class based component looks like so what i'm going to do is say class and i will name this info and then this is going to extend react dot component now since we're extending react what we need to do is import react so we're going to say import react from and then this is going to be in all lower cases react make sure you don't import it from react dom if you do that you're going to get an error you want to import it just from react now this is the default export and so that means we can import it this way if it wasn't we would need to surround it in our kind of curly braces anyways now this should be working what i'm going to do is define a render method and inside of this render method you're going to write what you want to be returned to render on the screen so by default the return statement from a functional component is just kind of this render method whereas when you create a class you need to define manually the render method and so i'm going to copy this right here and paste it inside of there and i'll just delete it from inside here so we know that we've already got that now what i'm going to do is save you can see my stuff's auto formatting i'm going to show you in one second how you can set up the auto formatter if yours isn't doing that and then what i'm going to do is just copy my two variables here so const title and const show title and i'm just going to paste them for now inside of this render method we could put them as class variables if we wanted to but for now it's fine we'll just put them inside of rend then what i'm going to do is delete this so delete info save and you should see that now everything is working the way that it was before so all i've done is just now made a classbased component you can see that it works the exact same as a functional component except we kind of have to write more so we say class info extends react.component we have to define a render method and then it's just like a little bit different syntax that's really the main differences between a functional and classbased component just a little bit of a different syntax there is some performance differences but for our purposes they're not really worth maybe talking about if you're getting into you know professional react development then you can make the argument you know which is better functional or classbased components i believe right now react is recommending using functional components unless you have a ton of state in which they are saying you should use classbased components anyways we'll talk about that later when we actually discuss state but with that that's going to wrap up the video okay so i realized i totally forgot to show you guys with the auto formatter so i'll do that quickly right now there's an extension called prettier this is a really popular extension it has 12.35 million downloads anyways to find it go to the extensions pane in vs code search prettier and install it now that should auto format the code for you however you may have to configure this so what you can do is press ctrl shift p what this will do is open up the command palette and then if you type format you'll see format document with you'll see file save without formatting all of these different options and what you can press format document with and then for me i have multiple formatters but for you you'll probably just have one you can press prettier and then it will automatically format the document that you're on now if you want to format when you save i believe that's a default behavior but you can go to the vs code settings so if you go to settings and then i think you could probably look at format and here you go see editor format on paste format on save you can check these boxes based on the behavior that you would like and here's the let you guys figure that out that is the auto formatter again it's an extension called prettier and with that that's going to end the video i hope you guys enjoyed if you did make sure to leave a like subscribe to the channel and i will see you in another one
