With timestamps:

00:00 - hey guys and welcome back to another
00:02 - YouTube video so I apologize as I've
00:05 - been pretty late getting up this
00:06 - tutorial I've been doing a lot of school
00:07 - work and making other videos so this
00:09 - hasn't been my top priority I also have
00:12 - been working on this for about two or
00:14 - three days trying to make sure that it's
00:15 - perfect and that I'm know where exactly
00:17 - where I'm gonna go with this series in
00:19 - terms of the future so I'm not going to
00:21 - make a video that's useless to say so in
00:24 - this tutorial what we're gonna be doing
00:25 - is we're gonna be doing some I called
00:27 - projectiles so we have our little
00:30 - character here right he walks around the
00:31 - screen I can jump up and down and that's
00:35 - great but we need to add some more to
00:38 - this game so what we're gonna be adding
00:40 - is projectiles so pretty much that means
00:42 - we're gonna change the key to jump to be
00:44 - up arrow key and then we're gonna make
00:46 - it so that when you click the spacebar
00:48 - he shoots bullets out of him now these
00:51 - bullets we're not gonna have a fancy
00:52 - animation anything cut for him ik coming
00:54 - out of his hands that's for another
00:55 - video that's a little bit more advanced
00:57 - but we are just gonna have hit bullets
01:00 - kind of coming out of his body and then
01:02 - we're gonna have them if they collide
01:03 - with the wall they're gonna disappear
01:04 - now this sounds pretty simple
01:06 - but I assure you it is not and there's a
01:09 - lot of things we have to take into
01:10 - account with this tutorial so let's just
01:12 - start with some of the issues we're
01:13 - gonna have with this so the way that
01:14 - we've coded this so far is if we'd run
01:17 - it again you can see when he walks and
01:19 - he stops he faces us now what if we were
01:22 - to shoot a bullet now I'm trying to
01:24 - shoot a bullet what direction is gonna
01:27 - is it gonna go well we don't know that
01:28 - because he's facing us right so we can't
01:31 - come out of the screen it has to either
01:33 - go left or right so we now need to make
01:35 - it so that when he stops he no longer
01:37 - looks at us he just stops and stays
01:39 - facing the way that he was going so we
01:41 - know when the bullets going left or when
01:43 - it's going right now we also have to
01:45 - address the problem what if we have
01:46 - multiple bullets so if we have multiple
01:48 - bullets we need to have a velocity for
01:49 - those bullets each bullet needs to have
01:51 - its own velocity so we know if that
01:53 - bullet is traveling left or if it's
01:54 - traveling right because for example if
01:56 - our character's looking left he shoots a
01:57 - bullet then he looks right and he shoots
01:59 - a bullet the other bullet needs to
02:01 - continue even left well the next bullet
02:03 - is moving right and you'll see what I
02:05 - mean as we get into the tutorial so the
02:07 - first thing we're gonna do because now
02:09 - we are writing our game and we're using
02:11 - objects and classes is we're going to
02:13 - a new class and this one is just gonna
02:15 - call he called or she let's call it
02:18 - mm-hm
02:19 - let's see projectile like that and then
02:24 - inside here you can just write objects
02:26 - you don't have to do that and then we
02:28 - write our knit function like so now
02:32 - inside here we're gonna give it the same
02:33 - characteristics as our players we're
02:35 - gonna give it X Y and that actually
02:37 - instead of width and height since this
02:39 - bullet is gonna be circular we're gonna
02:40 - give X Y radius color and then we're
02:43 - gonna do something called facing now
02:45 - what this is gonna do is gonna tell us
02:47 - whether the bullets moving left or
02:49 - moving right and that is extremely
02:51 - important so we have that next thing
02:54 - we're just gonna scroll down here we
02:56 - induce again it's kind of tedious but
02:58 - self-taught x equals x self dot y equals
03:02 - y and so on software radius equals
03:05 - radius self duck call their equals color
03:10 - and self tell facing equals facing now
03:14 - we're also gonna add one more in here
03:16 - that's gonna call itself the velocity or
03:18 - bell you can set this equal to whatever
03:20 - you want I'm gonna give it a positive
03:21 - value of eight for right now and this is
03:24 - just gonna be equal to 8 times facing
03:27 - and facing is either gonna be one or
03:28 - negative one so that's gonna determine
03:30 - whether it's moving left or whether it's
03:32 - moving right we're gonna give another
03:35 - method here we're just gonna call it
03:37 - draw I'm gonna put in the window and
03:40 - then we're just something you're just
03:41 - gonna draw a circle and pygame
03:43 - which is the following line pie game
03:47 - draw dot circle and then window call
03:53 - there so it's one me self that color
03:55 - we need our tuples so self that x self
03:59 - don't why I cannot type and then self
04:03 - theories and that's how you draw a
04:06 - circle in pining
04:07 - now if you didn't want your circle be
04:08 - filled in you would just do that comma
04:10 - one and that would make it so your
04:12 - circle is simply the outline of a circle
04:14 - so I'm actually filled in but we're
04:15 - gonna have our filled in for today like
04:17 - that and that's all we need for that
04:19 - class pretty straightforward and now we
04:21 - move into the more complex stuff so the
04:24 - first issue we're gonna have to address
04:25 - is our
04:26 - character moving so we need to build a
04:28 - track what direction he's facing right
04:30 - so if you doing left if he's moving
04:32 - right and what direction when he
04:34 - stationary that he's facing so I've
04:37 - already done this on another script so
04:39 - I'm just gonna kind of copy off what
04:40 - I've done here and explain to you guys
04:42 - as we go so here what we end up doing is
04:47 - we say well if he's not moving left if
04:48 - he's not moving right
04:49 - he must be standing still so we're just
04:52 - gonna blitt the image for him standing
04:53 - still no we don't want to do that we
04:56 - want to keep track of the last position
04:58 - where he is so either he was right or
04:59 - either he was left and then in not
05:01 - instance just draw him either looking
05:04 - left or looking right so to do this you
05:07 - know a little else statement here we're
05:09 - just gonna go we're gonna write if self
05:13 - thought right and then don't worry you
05:16 - guys are gonna think this isn't gonna
05:17 - work but I'm gonna change something in a
05:18 - second so just follow along I'm do walk
05:22 - write equals zero so this is just the
05:23 - first image pretty much of the walk
05:26 - right kind of animation we have so just
05:28 - like it looks like he's a he's looking
05:30 - in the right direction and that's all we
05:32 - need and then self though why and then
05:36 - else because if he's not right he must
05:38 - be been left because we're not gonna
05:40 - have a stationary position anymore we're
05:42 - just gonna do wind up lit we're gonna do
05:44 - walk left zero because again the first
05:47 - image and then the same thing so self
05:50 - the X and self thought why like that
05:53 - alright now we also need to add one more
05:56 - thing to our character so another
05:57 - attribute here we're just gonna do self
05:59 - thought standing and this is what's
06:01 - gonna track if our character is standing
06:03 - still or not now I know I'm going kind
06:05 - of fast here guys just because I want to
06:06 - get through some of this stuff and we've
06:07 - already gone over kind of how classes
06:09 - work and how some of the easier stuff
06:10 - works so I'm gonna go fast through this
06:13 - part and I'm gonna explain the more
06:14 - in-depth stuff yeah pretty much
06:16 - so now inside of our draw function we
06:18 - need to add something here so we need to
06:20 - see whether he's fate or whether he's
06:22 - standing still or whether he's moving
06:23 - now the way we did that before was by
06:25 - simply saying well if he's not moving he
06:27 - must be standing still but that would
06:29 - eliminate if he was looking left or
06:31 - right we wouldn't know in that instance
06:32 - cuz we're just drawing something that
06:34 - it's making him look straight at us
06:35 - either if he stopped left or if he
06:37 - stopped right so here we care what
06:39 - actually facing but we still need to
06:42 - know if he is standing still or not so
06:46 - we're gonna set this variable here
06:47 - self-thought standing equal to true or
06:49 - this attribute whatever you want to call
06:51 - it inside of the initial initializer and
06:54 - then up here we're gonna do if not
06:58 - standing and we'll make sure we add that
07:01 - self there so we don't get crash and
07:03 - what this is gonna do is it's just gonna
07:05 - check to make sure that well he's not
07:07 - standing pretty straightforward just tab
07:10 - this in here or format indent region if
07:13 - that seems not to work for you and then
07:15 - pretty much what's gonna happen now is
07:16 - if he's not standing still meeting he's
07:18 - moving we're gonna walk we're gonna run
07:19 - through our animation of him walking to
07:22 - the right or walking to the left and
07:23 - then if he is standing still we're gonna
07:25 - either blit him looking to the right or
07:27 - looking to the left and I hope I hope
07:29 - that makes sense so now we need to again
07:32 - go down into our main loop here and we
07:34 - need to change a few things
07:35 - so in our key dot left here we're gonna
07:37 - do man standing equals false because
07:41 - this means that he is indeed walking
07:43 - same thing here man duck standing equals
07:47 - false and then in this little else
07:49 - statement here we need to change a few
07:51 - things so we want to get rid of
07:52 - resetting knees because if we reset
07:55 - these we're not gonna know what way he
07:56 - was looking previously and we're just
07:59 - gonna do man dot standing is equal to
08:02 - true like so so this way we're gonna
08:05 - know if he's moving loud or if he's
08:07 - looking left if he's looking right so
08:09 - let's just test this out quickly make
08:11 - sure everything's working and we have a
08:14 - slight issue oh it's because I have a
08:16 - comma instead of a dot that's great okay
08:19 - so let's go back up there into window
08:21 - Blitz
08:22 - where's a comma there we go slight typo
08:25 - and here we go so that we can see when
08:30 - he stops he is still looking the way
08:32 - that he's trying to go like that so yeah
08:36 - that's all good now we can go to the
08:38 - projectile section so now that we've got
08:40 - our character he's walking properly he's
08:42 - facing the correct direction we have to
08:44 - make sure that he can shoot the bullets
08:47 - properly so we've already set up this
08:49 - projectile class here and what we have
08:52 - to do here and this is
08:53 - useful if you guys want to learn how to
08:55 - draw multiple objects at the same time
08:57 - or how to keep track of different
08:58 - objects on the screen so even if you're
09:01 - not that interested in including a
09:03 - projectile on your game I do recommend
09:04 - you do this so what we're gonna do now
09:06 - is we're going to introduce a new for
09:08 - loop into our wild and we're gonna
09:11 - create a new list so the first thing we
09:12 - need to do is actually create your list
09:13 - I'm going to call this bullets you're
09:15 - gonna set it to a blank list and this is
09:17 - what's gonna contain all of our bullets
09:19 - so we're we are gonna have multiple
09:21 - bullets if I only made it so what you
09:23 - have one bullet at a time that'd be much
09:25 - easier but I want to give you guys a bit
09:27 - of a challenge so we're gonna do this so
09:29 - we're gonna do four bullets and bullets
09:32 - like this so for every bullet that we
09:34 - have inside of that list and we're just
09:37 - gonna say if bullet is less than 500 so
09:43 - actually let's do bullet dot X because
09:46 - we already know that our bullet is gonna
09:47 - have a property of X because we're just
09:49 - gonna create some projectile objects in
09:52 - this in this list which I'm going to do
09:54 - later but I want to do this right now
09:56 - if bullet dot X is less than 500 meaning
09:59 - that we are not going to be going off
10:01 - the screen and bullet dot X is greater
10:06 - than 0 then we're gonna allow our bullet
10:10 - to be shot we're gonna ignore these
10:11 - slight pixels that might happen in terms
10:15 - like the width and stuff the reading
10:16 - with the character because it's so small
10:18 - the radius we're gonna be using that
10:19 - doesn't really matter that much and then
10:21 - we're gonna say pretty much move our
10:24 - bullet so we're gonna say bullet don't X
10:27 - plus equal bullet don't why all right
10:31 - pull it not not y thought bell so now
10:34 - this means that our bullet is gonna move
10:35 - in whatever direction we have it set to
10:38 - move in so maybe negative 8 or positive
10:41 - 8 and I'll show you how we're gonna set
10:43 - that direction
10:43 - again down below I'm kind of going in a
10:45 - reverse order that's fine just just try
10:47 - to follow along so now if our bullet is
10:50 - not less than 500 and it is not greater
10:52 - than 0 it must be off the screen so to
10:56 - fix this we don't want to have our
10:57 - bullet just floating on the edge of the
10:58 - screen over here we're gonna delete that
11:01 - bullet so we're gonna do is kind of a
11:03 - weird way to delete it but just follow
11:05 - along bullets start pop
11:07 - all right so this is the list pop just
11:09 - means remove an element and then we're
11:11 - gonna index so we're gonna do
11:14 - bullets dot index and then bullet so
11:20 - this is gonna find the index of the
11:22 - bullet in the list and then remove it
11:24 - from work wherever location that it's in
11:26 - pretty straightforward so now we're
11:29 - checking all these bullets but we need
11:30 - to shoot the bullet so again I mentioned
11:33 - that we're just gonna make it so that
11:34 - now to jump we're gonna use the up key
11:36 - so instead of having space we're gonna
11:38 - change that to up and then we're gonna
11:40 - add a new if statement in here now it's
11:42 - important that this is an if and not a
11:44 - and Elif if we were to add an elephant
11:47 - here if you're trying to move right or
11:48 - left it's not going to allow you to
11:50 - shoot as well so we're just gonna do a
11:52 - nice new if up here we knew it keys and
11:54 - then we're following the same thing
11:56 - we've done before pygame dot k
11:59 - underscore space like so and then we're
12:04 - gonna do down here
12:05 - if you Len of bullets so the length of
12:09 - our list bullets is less than and you
12:11 - guys can pick a number this is how many
12:12 - have many bullets you want to have on
12:14 - the screen at once I'm gonna do five I
12:16 - feel like that's probably good just to
12:18 - make sure my character maybe isn't
12:19 - spamming bullets all over the place is
12:21 - less than five then I'm gonna create a
12:24 - new bullet object now once you create
12:27 - this bullet object we're gonna draw the
12:28 - boat object and that's gonna be the next
12:30 - step but we just first need to create it
12:31 - like we created the man object we're
12:33 - gonna create a bold object so we're just
12:35 - gonna do bullets which is the list that
12:37 - we're gonna contain the object in dot a
12:39 - pen means adding to the end and then
12:42 - we're gonna create a new project uh like
12:45 - so now our projectile we have to
12:49 - remember what what we need to protect
12:50 - those who need an x and y so that's this
12:53 - x and y is gonna be the man dot x plus
12:57 - the man dot with integer division too
13:02 - and the reason we do this is just to
13:05 - make sure that our bullet is not coming
13:07 - for from the left side of the man or the
13:09 - right side the men it's coming from the
13:10 - middle of the man and the reason I'm
13:11 - rounding this is because I don't want to
13:13 - get a decimal number as that's gonna
13:14 - mess up when we're drawing the the
13:17 - object onto the screen now we're going
13:19 - to use our Y
13:20 - so same thing here so let's start with
13:22 - around this time a new man del y plus
13:26 - man dot height and then again integer
13:31 - division 2 so we have our X and our Y
13:34 - and now we need our what was it again
13:37 - radius or color so let's go up and check
13:39 - quickly cuz I forget ductile radius
13:41 - color and then facing so our radius I'm
13:44 - gonna set this to six you guys can set
13:46 - that to whatever you like and then after
13:48 - a radius we have our color so I'm gonna
13:51 - set this to black again feel free to
13:53 - change that to whatever you like
13:54 - and now our facing so now this is where
13:57 - we're gonna come out of the loop for a
13:58 - second and we're gonna do something that
14:00 - I forgot to do here it's gonna say if
14:01 - man don't left then we're gonna have our
14:06 - facing as negative one like that and
14:10 - then else facing equals zero all right
14:14 - not to you one like that then simply in
14:17 - here we can just put facing and we're
14:20 - ready to go now the reason I did this
14:22 - here is because if we are looking left
14:24 - then we want to make sure that our
14:25 - bullet is moving left now to move left
14:27 - we have to move negative direction
14:28 - because if you remember in PI game our X
14:31 - starts at zero here and it goes to 500
14:34 - on our screen this way to the right so
14:36 - if we're here and we want to move
14:37 - backwards we have to subtract pretty
14:40 - straightforward and yeah so that's gonna
14:42 - allow us to shoot our bullets now now
14:44 - the thing is right now all our bullets
14:46 - are gonna work all the collisions gonna
14:48 - work with the walls but what about
14:51 - drawing the bullets we're not gonna see
14:53 - them right now so we have to make sure
14:54 - that we draw them so inside of our
14:56 - redraw game window function here where
14:59 - we draw everything remember I told you
15:00 - guys we're not gonna be drawing it down
15:02 - here we're gonna be drawing it up in the
15:03 - redraw game window function we're gonna
15:06 - do another for loop so you can do for
15:07 - again pull it in bullets like that we're
15:13 - just gonna do bullet dot draw easy
15:15 - enough now let's test the program and we
15:19 - have an issue self thought colors up
15:22 - that exile thought why self that radius
15:24 - named self is not defined
15:26 - now what issue could we have here oh and
15:30 - it's because I forgot to put itself
15:32 - there so again just go ahead and fix
15:35 - this I forgot to put self in the draw
15:37 - thing again easily avoidable errors but
15:39 - I just forget to fix them and while
15:40 - we're at it let's go to the draw
15:41 - function here that is the draw method
15:44 - and just let's add win in the brackets
15:46 - there sorry about that guys and we'll
15:48 - run the program and you see we have a
15:50 - guy and he shoots bullets like this and
15:54 - you can see they travel across the
15:56 - screen and again if I shoot them too
15:57 - right you'll see that they hit the wall
15:59 - and then they disappear like so and
16:03 - again if I try to shoot too many at once
16:05 - you hear me hitting my spacebar
16:06 - it's not gonna let me continue to shoot
16:08 - them until five of them until we have
16:12 - room in the list pretty much so again if
16:14 - I go here I'm spamming my spacebar right
16:16 - now it's not working until those other
16:18 - bullets get deleted from the list now
16:20 - you obviously are probably noticing the
16:22 - fact that I'm shooting multiple bullets
16:23 - at once when I hit the spacebar
16:25 - now this is not ideal this is not what
16:27 - we want and in the next video I'm gonna
16:29 - go over to how to fix this cuz I'm
16:30 - already at 60 minutes so I don't want to
16:32 - push this too much further but pretty
16:34 - much this is a pretty easy fix and in
16:36 - the next video we're gonna be
16:37 - incorporating enemies into our game and
16:38 - allowing these bullets if they hit the
16:40 - enemies to make them disappear to make
16:42 - them lose health and so on so again I
16:45 - apologize guys for this video coming out
16:47 - pretty late but I was working pretty
16:48 - hard on trying to get this and focus on
16:51 - what I really wanted to do with the
16:52 - series and again I've been working on
16:54 - other videos as well so if you guys like
16:56 - the video and you want to see the next
16:57 - one please leave a like and subscribe to
16:59 - the channel to help me out and I will
17:01 - see you again in another video
17:02 - [Music]

Cleaned transcript:

hey guys and welcome back to another YouTube video so I apologize as I've been pretty late getting up this tutorial I've been doing a lot of school work and making other videos so this hasn't been my top priority I also have been working on this for about two or three days trying to make sure that it's perfect and that I'm know where exactly where I'm gonna go with this series in terms of the future so I'm not going to make a video that's useless to say so in this tutorial what we're gonna be doing is we're gonna be doing some I called projectiles so we have our little character here right he walks around the screen I can jump up and down and that's great but we need to add some more to this game so what we're gonna be adding is projectiles so pretty much that means we're gonna change the key to jump to be up arrow key and then we're gonna make it so that when you click the spacebar he shoots bullets out of him now these bullets we're not gonna have a fancy animation anything cut for him ik coming out of his hands that's for another video that's a little bit more advanced but we are just gonna have hit bullets kind of coming out of his body and then we're gonna have them if they collide with the wall they're gonna disappear now this sounds pretty simple but I assure you it is not and there's a lot of things we have to take into account with this tutorial so let's just start with some of the issues we're gonna have with this so the way that we've coded this so far is if we'd run it again you can see when he walks and he stops he faces us now what if we were to shoot a bullet now I'm trying to shoot a bullet what direction is gonna is it gonna go well we don't know that because he's facing us right so we can't come out of the screen it has to either go left or right so we now need to make it so that when he stops he no longer looks at us he just stops and stays facing the way that he was going so we know when the bullets going left or when it's going right now we also have to address the problem what if we have multiple bullets so if we have multiple bullets we need to have a velocity for those bullets each bullet needs to have its own velocity so we know if that bullet is traveling left or if it's traveling right because for example if our character's looking left he shoots a bullet then he looks right and he shoots a bullet the other bullet needs to continue even left well the next bullet is moving right and you'll see what I mean as we get into the tutorial so the first thing we're gonna do because now we are writing our game and we're using objects and classes is we're going to a new class and this one is just gonna call he called or she let's call it mmhm let's see projectile like that and then inside here you can just write objects you don't have to do that and then we write our knit function like so now inside here we're gonna give it the same characteristics as our players we're gonna give it X Y and that actually instead of width and height since this bullet is gonna be circular we're gonna give X Y radius color and then we're gonna do something called facing now what this is gonna do is gonna tell us whether the bullets moving left or moving right and that is extremely important so we have that next thing we're just gonna scroll down here we induce again it's kind of tedious but selftaught x equals x self dot y equals y and so on software radius equals radius self duck call their equals color and self tell facing equals facing now we're also gonna add one more in here that's gonna call itself the velocity or bell you can set this equal to whatever you want I'm gonna give it a positive value of eight for right now and this is just gonna be equal to 8 times facing and facing is either gonna be one or negative one so that's gonna determine whether it's moving left or whether it's moving right we're gonna give another method here we're just gonna call it draw I'm gonna put in the window and then we're just something you're just gonna draw a circle and pygame which is the following line pie game draw dot circle and then window call there so it's one me self that color we need our tuples so self that x self don't why I cannot type and then self theories and that's how you draw a circle in pining now if you didn't want your circle be filled in you would just do that comma one and that would make it so your circle is simply the outline of a circle so I'm actually filled in but we're gonna have our filled in for today like that and that's all we need for that class pretty straightforward and now we move into the more complex stuff so the first issue we're gonna have to address is our character moving so we need to build a track what direction he's facing right so if you doing left if he's moving right and what direction when he stationary that he's facing so I've already done this on another script so I'm just gonna kind of copy off what I've done here and explain to you guys as we go so here what we end up doing is we say well if he's not moving left if he's not moving right he must be standing still so we're just gonna blitt the image for him standing still no we don't want to do that we want to keep track of the last position where he is so either he was right or either he was left and then in not instance just draw him either looking left or looking right so to do this you know a little else statement here we're just gonna go we're gonna write if self thought right and then don't worry you guys are gonna think this isn't gonna work but I'm gonna change something in a second so just follow along I'm do walk write equals zero so this is just the first image pretty much of the walk right kind of animation we have so just like it looks like he's a he's looking in the right direction and that's all we need and then self though why and then else because if he's not right he must be been left because we're not gonna have a stationary position anymore we're just gonna do wind up lit we're gonna do walk left zero because again the first image and then the same thing so self the X and self thought why like that alright now we also need to add one more thing to our character so another attribute here we're just gonna do self thought standing and this is what's gonna track if our character is standing still or not now I know I'm going kind of fast here guys just because I want to get through some of this stuff and we've already gone over kind of how classes work and how some of the easier stuff works so I'm gonna go fast through this part and I'm gonna explain the more indepth stuff yeah pretty much so now inside of our draw function we need to add something here so we need to see whether he's fate or whether he's standing still or whether he's moving now the way we did that before was by simply saying well if he's not moving he must be standing still but that would eliminate if he was looking left or right we wouldn't know in that instance cuz we're just drawing something that it's making him look straight at us either if he stopped left or if he stopped right so here we care what actually facing but we still need to know if he is standing still or not so we're gonna set this variable here selfthought standing equal to true or this attribute whatever you want to call it inside of the initial initializer and then up here we're gonna do if not standing and we'll make sure we add that self there so we don't get crash and what this is gonna do is it's just gonna check to make sure that well he's not standing pretty straightforward just tab this in here or format indent region if that seems not to work for you and then pretty much what's gonna happen now is if he's not standing still meeting he's moving we're gonna walk we're gonna run through our animation of him walking to the right or walking to the left and then if he is standing still we're gonna either blit him looking to the right or looking to the left and I hope I hope that makes sense so now we need to again go down into our main loop here and we need to change a few things so in our key dot left here we're gonna do man standing equals false because this means that he is indeed walking same thing here man duck standing equals false and then in this little else statement here we need to change a few things so we want to get rid of resetting knees because if we reset these we're not gonna know what way he was looking previously and we're just gonna do man dot standing is equal to true like so so this way we're gonna know if he's moving loud or if he's looking left if he's looking right so let's just test this out quickly make sure everything's working and we have a slight issue oh it's because I have a comma instead of a dot that's great okay so let's go back up there into window Blitz where's a comma there we go slight typo and here we go so that we can see when he stops he is still looking the way that he's trying to go like that so yeah that's all good now we can go to the projectile section so now that we've got our character he's walking properly he's facing the correct direction we have to make sure that he can shoot the bullets properly so we've already set up this projectile class here and what we have to do here and this is useful if you guys want to learn how to draw multiple objects at the same time or how to keep track of different objects on the screen so even if you're not that interested in including a projectile on your game I do recommend you do this so what we're gonna do now is we're going to introduce a new for loop into our wild and we're gonna create a new list so the first thing we need to do is actually create your list I'm going to call this bullets you're gonna set it to a blank list and this is what's gonna contain all of our bullets so we're we are gonna have multiple bullets if I only made it so what you have one bullet at a time that'd be much easier but I want to give you guys a bit of a challenge so we're gonna do this so we're gonna do four bullets and bullets like this so for every bullet that we have inside of that list and we're just gonna say if bullet is less than 500 so actually let's do bullet dot X because we already know that our bullet is gonna have a property of X because we're just gonna create some projectile objects in this in this list which I'm going to do later but I want to do this right now if bullet dot X is less than 500 meaning that we are not going to be going off the screen and bullet dot X is greater than 0 then we're gonna allow our bullet to be shot we're gonna ignore these slight pixels that might happen in terms like the width and stuff the reading with the character because it's so small the radius we're gonna be using that doesn't really matter that much and then we're gonna say pretty much move our bullet so we're gonna say bullet don't X plus equal bullet don't why all right pull it not not y thought bell so now this means that our bullet is gonna move in whatever direction we have it set to move in so maybe negative 8 or positive 8 and I'll show you how we're gonna set that direction again down below I'm kind of going in a reverse order that's fine just just try to follow along so now if our bullet is not less than 500 and it is not greater than 0 it must be off the screen so to fix this we don't want to have our bullet just floating on the edge of the screen over here we're gonna delete that bullet so we're gonna do is kind of a weird way to delete it but just follow along bullets start pop all right so this is the list pop just means remove an element and then we're gonna index so we're gonna do bullets dot index and then bullet so this is gonna find the index of the bullet in the list and then remove it from work wherever location that it's in pretty straightforward so now we're checking all these bullets but we need to shoot the bullet so again I mentioned that we're just gonna make it so that now to jump we're gonna use the up key so instead of having space we're gonna change that to up and then we're gonna add a new if statement in here now it's important that this is an if and not a and Elif if we were to add an elephant here if you're trying to move right or left it's not going to allow you to shoot as well so we're just gonna do a nice new if up here we knew it keys and then we're following the same thing we've done before pygame dot k underscore space like so and then we're gonna do down here if you Len of bullets so the length of our list bullets is less than and you guys can pick a number this is how many have many bullets you want to have on the screen at once I'm gonna do five I feel like that's probably good just to make sure my character maybe isn't spamming bullets all over the place is less than five then I'm gonna create a new bullet object now once you create this bullet object we're gonna draw the boat object and that's gonna be the next step but we just first need to create it like we created the man object we're gonna create a bold object so we're just gonna do bullets which is the list that we're gonna contain the object in dot a pen means adding to the end and then we're gonna create a new project uh like so now our projectile we have to remember what what we need to protect those who need an x and y so that's this x and y is gonna be the man dot x plus the man dot with integer division too and the reason we do this is just to make sure that our bullet is not coming for from the left side of the man or the right side the men it's coming from the middle of the man and the reason I'm rounding this is because I don't want to get a decimal number as that's gonna mess up when we're drawing the the object onto the screen now we're going to use our Y so same thing here so let's start with around this time a new man del y plus man dot height and then again integer division 2 so we have our X and our Y and now we need our what was it again radius or color so let's go up and check quickly cuz I forget ductile radius color and then facing so our radius I'm gonna set this to six you guys can set that to whatever you like and then after a radius we have our color so I'm gonna set this to black again feel free to change that to whatever you like and now our facing so now this is where we're gonna come out of the loop for a second and we're gonna do something that I forgot to do here it's gonna say if man don't left then we're gonna have our facing as negative one like that and then else facing equals zero all right not to you one like that then simply in here we can just put facing and we're ready to go now the reason I did this here is because if we are looking left then we want to make sure that our bullet is moving left now to move left we have to move negative direction because if you remember in PI game our X starts at zero here and it goes to 500 on our screen this way to the right so if we're here and we want to move backwards we have to subtract pretty straightforward and yeah so that's gonna allow us to shoot our bullets now now the thing is right now all our bullets are gonna work all the collisions gonna work with the walls but what about drawing the bullets we're not gonna see them right now so we have to make sure that we draw them so inside of our redraw game window function here where we draw everything remember I told you guys we're not gonna be drawing it down here we're gonna be drawing it up in the redraw game window function we're gonna do another for loop so you can do for again pull it in bullets like that we're just gonna do bullet dot draw easy enough now let's test the program and we have an issue self thought colors up that exile thought why self that radius named self is not defined now what issue could we have here oh and it's because I forgot to put itself there so again just go ahead and fix this I forgot to put self in the draw thing again easily avoidable errors but I just forget to fix them and while we're at it let's go to the draw function here that is the draw method and just let's add win in the brackets there sorry about that guys and we'll run the program and you see we have a guy and he shoots bullets like this and you can see they travel across the screen and again if I shoot them too right you'll see that they hit the wall and then they disappear like so and again if I try to shoot too many at once you hear me hitting my spacebar it's not gonna let me continue to shoot them until five of them until we have room in the list pretty much so again if I go here I'm spamming my spacebar right now it's not working until those other bullets get deleted from the list now you obviously are probably noticing the fact that I'm shooting multiple bullets at once when I hit the spacebar now this is not ideal this is not what we want and in the next video I'm gonna go over to how to fix this cuz I'm already at 60 minutes so I don't want to push this too much further but pretty much this is a pretty easy fix and in the next video we're gonna be incorporating enemies into our game and allowing these bullets if they hit the enemies to make them disappear to make them lose health and so on so again I apologize guys for this video coming out pretty late but I was working pretty hard on trying to get this and focus on what I really wanted to do with the series and again I've been working on other videos as well so if you guys like the video and you want to see the next one please leave a like and subscribe to the channel to help me out and I will see you again in another video
