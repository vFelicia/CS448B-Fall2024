With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome back to
00:10 - another flutter tutorial
00:11 - so in today's video we're going to be
00:13 - actually getting started on our kind of
00:14 - belong app and building the first
00:16 - feature or the first kind of widget that
00:18 - we're going to have there now we want
00:20 - this to actually be a text
00:21 - input box so if you think about this
00:23 - blog app that i've been talking about a
00:25 - little bit of course what we're going to
00:26 - need to do
00:27 - is actually give the user some area
00:29 - where they can type right
00:30 - and then when they press enter or they
00:32 - press post or send or whatever it is
00:34 - then they can see their thing and it
00:35 - will you know appear but we need to give
00:37 - them a way to actually type first
00:39 - so that's what we're going to be
00:40 - focusing on here and that's going to
00:41 - going to involve the use of something
00:43 - called a stateful widget so we're going
00:45 - to learn about stateful widgets then
00:46 - we're actually going to get into the
00:48 - text box itself
00:49 - and a whole bunch of other stuff within
00:52 - flutter
00:52 - so that being said let's get started the
00:55 - first thing i want to do is
00:56 - delete this test widget right here i'm
00:59 - not going to use that anymore
01:00 - i'm actually going to go ahead and scrap
01:02 - all this stuff in the body
01:03 - and just leave it blank for right now
01:05 - we'll add something there after
01:07 - because the first thing i want to do is
01:09 - actually make this stateful widget which
01:11 - is going to
01:12 - hold that text input box or that text
01:14 - field or whatever you want to call it
01:15 - so to make a stateful widget we can code
01:18 - it out like we did with all of these
01:19 - just from scratch
01:20 - or we can actually use a shortcut from
01:22 - vs code so if you're not using vs code
01:25 - then whatever pops up here you're just
01:26 - going to have to type in manually but if
01:28 - you are using vs code then type stful
01:31 - like that once it gets to the l press
01:34 - enter
01:35 - and you should see a template that pops
01:37 - up so again stful
01:40 - stateful is kind of the short form there
01:42 - and then all of a sudden when you press
01:43 - enter you should see your cursor is
01:45 - blinking right where the name of the
01:48 - class
01:48 - should go so here what we can do is just
01:50 - name our class or name our stateful
01:52 - widget
01:53 - in this case i'm going to name it text
01:55 - input
01:56 - widget like that and there we go
01:59 - so now we have text input widget and
02:01 - we've created a stateful widget
02:04 - so this looks a little weird this is a
02:05 - strange syntax thing we have two
02:08 - classes for one widget how does that
02:10 - work so rather than the state list
02:12 - widget where we just had one class
02:14 - with the state full widget we have two
02:16 - we have one class that is responsible
02:18 - for handling all of the state and the
02:19 - rendering
02:20 - and another class that is responsible
02:22 - for taking any constructor arguments for
02:24 - actually setting up the override for the
02:26 - state
02:27 - and doing a few other things as well so
02:29 - you can see this one extends
02:30 - stateful widget and this one extends
02:33 - state of
02:34 - text input widget so that doesn't have
02:36 - to mean anything to you that's totally
02:37 - fine but just notice that we do the
02:39 - build method inside of this
02:40 - underscore text input widget state the
02:43 - underscore is convention
02:44 - you're supposed to have an underscore
02:46 - whenever you have a state class which is
02:48 - what this one is
02:49 - so we're going to do the build inside of
02:50 - here and then anything else we need to
02:52 - set up we'll probably do inside of here
02:54 - anyways the way these are linked
02:55 - together is we have this create state
02:57 - method
02:58 - this method says that an underscore text
03:00 - input widget state
03:01 - will be returned and what it does is use
03:03 - this arrow function syntax which is just
03:06 - an equal sign
03:07 - and then a greater or less than sign
03:08 - whatever way you decide to read that
03:10 - and that returns an instance of the text
03:12 - input widget state
03:14 - seems kind of confusing that's totally
03:16 - fine we're going to keep going through
03:18 - it but this is the format for a stateful
03:20 - widget so you do
03:21 - two classes like that now if you
03:23 - actually want to use the stateful widget
03:24 - like we will be doing you just simply do
03:27 - text input widget like you would any
03:29 - other widgets
03:30 - you can see i have that right here i'm
03:31 - just going to save so it automatically
03:32 - formats for me
03:34 - and now we will create a text input
03:36 - widget so we will use this but we will
03:38 - actually run the build method from here
03:40 - to see what this widget is
03:42 - so the first thing that i'm going to do
03:43 - inside of here is actually define our
03:44 - text field so the text field is what we
03:47 - type in
03:47 - so we're just going to go text field
03:49 - like this and there's a few different
03:50 - parameters we can pass in here
03:52 - so the first thing i want to do is pass
03:53 - in decoration so what we can do is use
03:56 - decoration and then type
03:57 - input decoration and inside of here we
04:00 - can decide what colors we want this to
04:01 - be if we want there to be any icons
04:03 - if we want there to be some text that
04:05 - shows up behind all that kind of stuff
04:07 - so what i'm going to do to start is i'm
04:08 - actually going to add an icon
04:10 - so i'm going to add a prefix icon which
04:12 - just means this icon will go
04:14 - at the beginning right so the prefix
04:16 - icon
04:17 - this is a widget we can see that because
04:19 - if we hover over top of prefix icon
04:22 - it shows us right here that this should
04:23 - be a widget and if we look at
04:25 - input decoration we can see that all of
04:28 - the different options we have available
04:29 - here
04:30 - for um for this decoration so that's
04:33 - just a kind of a quick trick if you
04:34 - don't know you don't want to look
04:35 - something up
04:36 - you can just hover over whatever class
04:38 - you're looking at
04:39 - or whatever widget you're looking at and
04:41 - have an instant look at all of the
04:42 - parameters which is really nice
04:44 - so we do that input decoration prefix
04:47 - icon
04:47 - and now we're going to say icon which is
04:49 - actually a widget
04:51 - and inside of icon we're going to pass
04:53 - an enum which represents
04:55 - what icon we want to display so icon
04:58 - itself
04:59 - is an actual widget and it takes a
05:01 - string or it takes an enum
05:03 - of a icons edom this seems kind of
05:06 - confusing
05:07 - that will display on that icon or that
05:10 - denotes what icon it should display
05:12 - so if i type icons that gives me a list
05:15 - of all of the icons
05:16 - and you can see when i put the period
05:18 - there it shows me all of them here and i
05:20 - can scroll through them
05:21 - and have a look at what all of them are
05:23 - in this kind of right hand thing right
05:25 - here which i assume you guys can see
05:26 - so i actually want to add one that is
05:28 - like a message one so i think they have
05:30 - a message run oh perfect they have
05:31 - message right there
05:32 - so i'm gonna say icons dot message so if
05:35 - i hover over that you can see that's
05:36 - what that icon looks like and now we're
05:38 - going to have an icon that goes before
05:40 - any of the message that we're typing or
05:42 - any of the text that we're typing
05:43 - and it is simply a message icon so i
05:45 - think that will look nice
05:47 - next what we're going to do for input
05:48 - decoration is we're going to add a like
05:50 - helper
05:51 - text so let's just say text here there
05:53 - should be helper text i think that's the
05:56 - right one
05:57 - where are the other ones sorry we're not
05:58 - going to use help helper text we're
05:59 - going to
06:00 - use label text so here we can see what
06:02 - this does when the input field is empty
06:04 - and unfocused the label is displayed
06:06 - on top of the input field okay so that's
06:08 - exactly what we want that's what i want
06:10 - so i'm going to click
06:10 - label text and then here what i'm going
06:13 - to do is just simply write out the text
06:14 - that i want to show
06:15 - so in this case i want to say type a
06:18 - message
06:19 - colon like that and we'll just add i
06:22 - guess we don't need a space that's fine
06:23 - so we'll leave that like that
06:25 - and for right now that's all we need for
06:27 - our text field so hopefully if we did
06:29 - this right if we look at our
06:30 - phone now you can press the hot refresh
06:32 - button or build it if you haven't yet
06:34 - now we have this widget and you can see
06:36 - it says type a message and i can go
06:38 - ahead and say
06:39 - hello world like that awesome
06:42 - now to unfocus it you can just press i
06:44 - believe the done button like that and
06:46 - notice that it changes colors so this is
06:48 - what i really like about flutter a lot
06:49 - of the style stuff is just kind of
06:51 - pre-handled for you
06:52 - like right here this just looks pretty
06:54 - good already and all i did was add a
06:56 - really basic input decoration
06:58 - that has an icon and some label text so
07:00 - now that we have that
07:02 - that's working now we need some way that
07:04 - we can actually figure out what
07:06 - is inside of this text box right so
07:08 - we're not going to get into buttons
07:09 - today but i'm going to show you how we
07:10 - can clear the text box
07:12 - and how we can actually control what's
07:13 - inside of it so if we want to control
07:16 - what's inside of this text field what we
07:18 - need to do is we need to actually make a
07:20 - text
07:20 - controller now this seems a little
07:22 - confusing
07:24 - but we will try our best to figure this
07:26 - one out so the first thing we need to do
07:28 - is we need to say final
07:30 - controller equals and then i think this
07:33 - is going to be
07:33 - text input controller or text controller
07:37 - i'm going to have to just type here and
07:39 - try to figure out what it is
07:41 - all right so i was close but i had to go
07:42 - look it up it's text editing controller
07:45 - so we're going to say final controller
07:47 - equals text editing controller
07:49 - this is simply an object that's going to
07:50 - allow us to attach it to this text field
07:53 - and then we can use
07:54 - controller to actually modify the
07:56 - contents and figure out the contents of
07:58 - what's typed in here
07:59 - so if you go inside of the text field
08:01 - there's a field called controller or
08:03 - parameter called controller
08:04 - and here all we're going to do is say
08:05 - controller equals this
08:07 - dot controller like that so this is just
08:10 - a noting that this controller parameter
08:12 - here
08:12 - is going to be equal to our controller
08:14 - so now we can use this controller to
08:16 - actually access the values of this field
08:19 - but how are we actually going to go
08:21 - ahead and do that well we need some way
08:23 - to
08:24 - like actually trigger getting the
08:27 - information from this field right
08:28 - or we need somewhere that we can display
08:30 - it or something like that so the first
08:31 - thing that i'm going to do
08:33 - is i'm actually going to go inside of
08:34 - here and i'm going to
08:36 - make now a row or a column actually
08:39 - that has another text field inside of it
08:41 - so that whenever we type in the text
08:43 - field
08:44 - it will actually show sorry not text
08:46 - field we'll just have text it will show
08:47 - in this text
08:48 - what we've typed this might seem you
08:51 - know i might not be explaining that very
08:52 - well right now but
08:53 - it will make sense let's go column and
08:57 - let's put that inside of here so if we
08:59 - remember for
09:00 - column we have children as the actual
09:03 - parameter here and then what we need to
09:05 - do is we need to make a list of the
09:06 - children so we're going to say widget
09:08 - like that and we're going to go ahead
09:10 - and add the list
09:12 - and finish the list right there now
09:14 - after some saving that formats it nicely
09:16 - for us and we can see we have a column
09:18 - with the children of first text field
09:20 - that's the first child and now what
09:21 - we're going to do
09:22 - is we're going to add another child
09:24 - which is simply text so we're going to
09:25 - say text
09:27 - and inside of here what we need to do is
09:29 - we need to actually put the text that we
09:30 - want to display
09:31 - so in this case i'm going to display
09:34 - controller.txt
09:35 - so what this is going to do is it's
09:37 - going to get the text from this text
09:39 - field
09:40 - and it's going to display that inside of
09:42 - this text right here
09:44 - now let's actually go ahead and have a
09:45 - look at what this does now
09:47 - is this look okay so let's just type
09:50 - hello
09:51 - and what the heck nothing's showing up
09:52 - why isn't that working we technically
09:54 - should have some text right
09:55 - i don't even see the text so let's just
09:57 - try this first of all
09:58 - let's go and let's put
10:02 - hello like that just to see if the text
10:04 - actually is displaying
10:05 - and it is so hello is displaying there
10:07 - but when i'm typing here it wasn't
10:09 - changing
10:10 - so why is that happening well the reason
10:12 - that's happening is because of the way
10:14 - that uh what do you call it the way that
10:16 - flutter actually redraws and re-renders
10:18 - itself
10:19 - so by just simply putting
10:20 - controller.text here what's going to
10:22 - happen
10:22 - is this widget is going to get drawn so
10:25 - we're going to draw the text input
10:26 - widget
10:27 - and then as soon as we end up typing
10:28 - some stuff
10:30 - nothing is actually going to be updated
10:31 - and nothing is changing the reason
10:33 - nothing is changing
10:34 - other than the text field itself when
10:36 - we're typing is because
10:37 - we're not telling flutter that we need
10:39 - to refresh this widget we're not telling
10:41 - it to redraw it
10:42 - and if we're not changing the state
10:44 - we're not doing anything to tell flutter
10:46 - to redraw this widget
10:47 - it's not going to redraw so even though
10:50 - controller.text is
10:51 - changing as the time is going on and as
10:53 - we're adding stuff to this text field
10:55 - we're never actually redrawing this text
10:57 - because we're not updating the widget so
11:00 - what we need to do is figure out a way
11:01 - that we can force flutter to refresh
11:04 - whenever we type something here so how
11:06 - can we actually go about doing that
11:08 - well what we can do first of all is i'm
11:09 - going to add a method that we need which
11:11 - is called dispose so i'm going to say i
11:13 - believe it's at
11:14 - overwrite or maybe it's not i think it's
11:16 - void
11:18 - dispose and then inside of here what
11:20 - we're going to do is we're just going to
11:21 - make sure
11:22 - that when we dispose of this widget we
11:25 - dispose of this controller so the first
11:26 - thing i'm going to do i'm going to say
11:28 - super dot dispose to make sure we call
11:30 - our parents dispose
11:32 - the reason for that is because what
11:34 - dispose does essentially say okay
11:36 - when this widget is done when we're
11:38 - finished using it we need to clean it up
11:40 - we need to get rid of any of the stuff
11:42 - that's kind of sitting there
11:43 - we just need to delete it and get rid of
11:45 - it so it's not just loose sitting there
11:46 - in memory
11:47 - that is what this dispose method does
11:49 - it's just cleaning up the object
11:51 - so this already has an implementation in
11:54 - the parent class
11:55 - state text widget there's already an
11:57 - implementation that cleans up the state
11:59 - whenever this widget is disposed of so
12:01 - we need to make sure that we call that
12:02 - first
12:03 - and then we can add what we want to do
12:05 - which is controller.dispose
12:07 - now just to make this a little bit more
12:08 - verbose what we're going to do is add
12:10 - the at override because this is an
12:12 - override from the parent class we're
12:14 - going to say add override like that just
12:16 - like we have for build
12:17 - and now we can make sure that when this
12:19 - widget is gone we're disposing of
12:21 - whatever the parent needs to dispose of
12:23 - and our controller
12:24 - so we have that now let's get back to
12:26 - what i was talking about before which is
12:27 - how can we actually refresh and update
12:29 - this
12:30 - well the first thing that i'm going to
12:32 - do is i'm actually going to add a string
12:34 - text inside of here now what this is
12:36 - going to do is just store the text that
12:38 - i actually want to display
12:40 - inside of my text field so now rather
12:42 - than having controller.text what i'm
12:44 - going to say
12:44 - is this dot text
12:48 - now note that you don't need this that's
12:50 - not necessary most of the times you can
12:52 - just write
12:53 - text like that but i like to add this
12:55 - just so i know that this is coming from
12:57 - the actual
12:58 - um uh what do you call it properties or
13:00 - whatever it's called
13:01 - of this class uh attributes whatever you
13:04 - might call it so anyways let's add that
13:06 - so now what i'm going to do is i'm
13:07 - actually going to add a
13:09 - method on this text field here which is
13:12 - going to say okay
13:13 - when we change this text field i want to
13:15 - call a function or i want to do
13:17 - something that's what i'm going to do
13:18 - here so what i'm going to do now is i'm
13:19 - going to add an
13:20 - unchanged event to this widget so
13:22 - essentially what's going to happen is
13:24 - when this text field is changed
13:25 - whenever we interact with it and do
13:27 - something we're going to update the text
13:29 - and the way we're going to update that
13:30 - is by calling a method
13:32 - whenever this is modified so what i'm
13:34 - going to do is i'm going to add the on
13:36 - change parameter select that on change
13:38 - if we hover over that you can read what
13:40 - it does
13:41 - and you can see what's going on and what
13:42 - i'm going to do is i'm going to write
13:44 - bracket bracket
13:46 - text like that colon oops not colon
13:49 - sorry
13:50 - uh equal sign greater than sign now what
13:53 - this is doing
13:54 - is this is making an arrow function so
13:56 - essentially what we're saying is that
13:58 - we're going to make a function that has
13:59 - the parameter text and text is going to
14:01 - be
14:02 - passed from this field right here so
14:04 - we'll take whatever text is in the field
14:07 - and we're going to pass that to another
14:09 - function now what this function is going
14:11 - to do
14:11 - so i'm going to just make one up here
14:12 - i'm just going to call this void
14:14 - and we'll call it change text is going
14:17 - to
14:18 - take text like that and it's going to
14:21 - modify this text right here so it's
14:24 - going to say
14:26 - this dot text equals text like that
14:30 - with a semicolon so what we're going to
14:32 - do is we're going to call this
14:33 - so we're going to say that's an arrow
14:34 - function to change text
14:36 - like this which is going to be this dot
14:39 - change
14:40 - text and that's going to take text so
14:42 - what that means again
14:43 - is we're going to have the parameter
14:44 - text this is an arrow function which
14:46 - means this whole thing can be called
14:49 - so this is going to seem weird but let
14:50 - me just illustrate this to you down here
14:52 - say i have this right here i say like x
14:55 - equals that obviously this isn't valid
14:58 - but just
14:59 - imagine this is x is equal to all of
15:01 - this what happens if i call
15:03 - x is we're going to call this function
15:06 - right here
15:06 - so i would have to pass it something i
15:08 - would say x hello
15:09 - and then text would be equal to hello
15:12 - because i'm calling
15:13 - x with hello and then that would
15:14 - actually call this.changetext
15:17 - with hello which is the parameter there
15:19 - so i hope that kind of makes sense on
15:21 - how the arrow functions work
15:22 - but this is the parameter and this is
15:24 - the body of the function so we're saying
15:26 - okay
15:26 - text and this is what we do when this
15:28 - function is called so when i call x
15:30 - which is equal to this arrow function
15:32 - and i give it hello
15:34 - then it's going to pass hello as the
15:35 - parameter and it's going to call
15:36 - this.changetext with hello
15:38 - so that is the basics on how we're going
15:40 - to do that so now we're saying change
15:42 - text this dot text equals text now i'm
15:44 - going to show you what happens when we
15:45 - do this
15:46 - but we're going to have the same problem
15:47 - that we had before so if i go here and i
15:49 - can start typing
15:50 - this is reloaded i've refreshed the
15:52 - thing but it's not working it's not
15:53 - updating the text
15:54 - the reason for that is again because i
15:56 - haven't told flutter to refresh the
15:58 - display
15:59 - so to do that any change i make that's
16:01 - actually changing the state of this
16:03 - object i need to wrap inside of set
16:06 - state
16:06 - so i'm going to say set state like this
16:08 - this is a special method from flutter
16:10 - and inside of here we're going to say
16:12 - this dot text equals text
16:14 - so whenever you're making a change to
16:16 - the state and you want this to be forced
16:18 - refresh so you want it to refresh and
16:20 - redraw the widget you need to wrap set
16:22 - states use a set state
16:24 - you put the brackets like that and then
16:25 - you put in open curly close curly
16:28 - and you put inside of it any of the
16:30 - variables you want to change
16:31 - you can do whatever you want inside of
16:32 - here you can change many different
16:34 - things
16:34 - but this is going to force this to
16:37 - refresh and to rebuild the widget
16:39 - so now when this happens what will
16:41 - happen is we will automatically refresh
16:43 - the text
16:44 - then we will redraw the widget with
16:46 - whatever the text is that we're storing
16:47 - inside
16:48 - of this object so let's go ahead and
16:50 - refresh this here
16:52 - and let's look at this and let's start
16:54 - typing and now we can see that the text
16:56 - down here is actually changing
16:58 - as we change whatever's inside of here
17:00 - so that is a quick way to actually get
17:02 - the
17:03 - value of the text we can do something
17:05 - like this and we can add an unchanged
17:07 - event
17:07 - now this all we this isn't necessarily
17:09 - perfect though the reason for that is
17:11 - because
17:11 - by just having this on changed event i
17:13 - can't necessarily manipulate
17:15 - what's inside of this text field like
17:17 - let's say that
17:18 - when they type a specific thing i
17:21 - actually want to modify the text field i
17:23 - want to clear it
17:23 - so in this case let's actually write
17:25 - some code that makes it so if they type
17:27 - hello world
17:28 - it automatically deletes whatever they
17:30 - typed so to do that we're going to go
17:32 - inside of change text here
17:33 - we're just going to add an if statement
17:35 - we're going to say if in this case
17:38 - text equals equals equals it might
17:40 - actually only be one equal sign
17:42 - i'm going to say hello world like that
17:44 - so we're going to delete one of these
17:45 - equal signs because i'm used to writing
17:46 - in javascript now
17:48 - but we say if text equals equals hello
17:50 - world so if the value of text is equal
17:52 - to hello world
17:53 - then what we're going to do is we're
17:54 - going to actually clear the text field
17:57 - so to do that we're going to say
17:58 - controller dot and i think there's
18:00 - something called clear so
18:01 - controller.clear
18:02 - perfect and that's all we need to do
18:04 - then what we're going to do
18:06 - is we're going to make sure that we
18:07 - change the value of this dot text so we
18:09 - change the parameter text to be blank
18:11 - so we'll say text equals blank like that
18:14 - and now when we change this state we'll
18:17 - be changing it to
18:18 - uh empty so that should hopefully work
18:22 - let's have a look at how this works and
18:23 - then we'll recap what we've done
18:26 - so if we go we type hello world that's
18:28 - not going to work the reason it's not
18:29 - working is because we don't have a
18:30 - capital w
18:31 - and h but when i type h you can see
18:35 - that as soon as we get to hello world so
18:38 - exclamation point
18:39 - it clears the text field and it removes
18:41 - whatever was here in that text as well
18:43 - so that is how you can manipulate the
18:45 - value of a text field that's how you can
18:47 - change the state of things in the
18:48 - objects
18:49 - and force a refresh in flutter so with
18:51 - that i think i'm going to end the
18:53 - tutorial here
18:54 - this was a lot of information at once i
18:56 - don't want to go on too far and really
18:58 - confuse anyone
18:59 - in the next video we're going to talk
19:00 - about button presses and then we will
19:02 - make something so when you press the
19:04 - button
19:04 - it will take whatever you've typed in
19:06 - and it will display that onto the screen
19:08 - and then we'll be well on our way with
19:10 - this blog application and hopefully in a
19:12 - few more videos we'll have something
19:13 - that's fully functioning and we can hook
19:14 - it up to a database
19:16 - so if you guys enjoyed make sure you
19:17 - leave a like subscribe and i will see
19:19 - you in the next
19:19 - flutter tutorial

Cleaned transcript:

hello everybody and welcome back to another flutter tutorial so in today's video we're going to be actually getting started on our kind of belong app and building the first feature or the first kind of widget that we're going to have there now we want this to actually be a text input box so if you think about this blog app that i've been talking about a little bit of course what we're going to need to do is actually give the user some area where they can type right and then when they press enter or they press post or send or whatever it is then they can see their thing and it will you know appear but we need to give them a way to actually type first so that's what we're going to be focusing on here and that's going to going to involve the use of something called a stateful widget so we're going to learn about stateful widgets then we're actually going to get into the text box itself and a whole bunch of other stuff within flutter so that being said let's get started the first thing i want to do is delete this test widget right here i'm not going to use that anymore i'm actually going to go ahead and scrap all this stuff in the body and just leave it blank for right now we'll add something there after because the first thing i want to do is actually make this stateful widget which is going to hold that text input box or that text field or whatever you want to call it so to make a stateful widget we can code it out like we did with all of these just from scratch or we can actually use a shortcut from vs code so if you're not using vs code then whatever pops up here you're just going to have to type in manually but if you are using vs code then type stful like that once it gets to the l press enter and you should see a template that pops up so again stful stateful is kind of the short form there and then all of a sudden when you press enter you should see your cursor is blinking right where the name of the class should go so here what we can do is just name our class or name our stateful widget in this case i'm going to name it text input widget like that and there we go so now we have text input widget and we've created a stateful widget so this looks a little weird this is a strange syntax thing we have two classes for one widget how does that work so rather than the state list widget where we just had one class with the state full widget we have two we have one class that is responsible for handling all of the state and the rendering and another class that is responsible for taking any constructor arguments for actually setting up the override for the state and doing a few other things as well so you can see this one extends stateful widget and this one extends state of text input widget so that doesn't have to mean anything to you that's totally fine but just notice that we do the build method inside of this underscore text input widget state the underscore is convention you're supposed to have an underscore whenever you have a state class which is what this one is so we're going to do the build inside of here and then anything else we need to set up we'll probably do inside of here anyways the way these are linked together is we have this create state method this method says that an underscore text input widget state will be returned and what it does is use this arrow function syntax which is just an equal sign and then a greater or less than sign whatever way you decide to read that and that returns an instance of the text input widget state seems kind of confusing that's totally fine we're going to keep going through it but this is the format for a stateful widget so you do two classes like that now if you actually want to use the stateful widget like we will be doing you just simply do text input widget like you would any other widgets you can see i have that right here i'm just going to save so it automatically formats for me and now we will create a text input widget so we will use this but we will actually run the build method from here to see what this widget is so the first thing that i'm going to do inside of here is actually define our text field so the text field is what we type in so we're just going to go text field like this and there's a few different parameters we can pass in here so the first thing i want to do is pass in decoration so what we can do is use decoration and then type input decoration and inside of here we can decide what colors we want this to be if we want there to be any icons if we want there to be some text that shows up behind all that kind of stuff so what i'm going to do to start is i'm actually going to add an icon so i'm going to add a prefix icon which just means this icon will go at the beginning right so the prefix icon this is a widget we can see that because if we hover over top of prefix icon it shows us right here that this should be a widget and if we look at input decoration we can see that all of the different options we have available here for um for this decoration so that's just a kind of a quick trick if you don't know you don't want to look something up you can just hover over whatever class you're looking at or whatever widget you're looking at and have an instant look at all of the parameters which is really nice so we do that input decoration prefix icon and now we're going to say icon which is actually a widget and inside of icon we're going to pass an enum which represents what icon we want to display so icon itself is an actual widget and it takes a string or it takes an enum of a icons edom this seems kind of confusing that will display on that icon or that denotes what icon it should display so if i type icons that gives me a list of all of the icons and you can see when i put the period there it shows me all of them here and i can scroll through them and have a look at what all of them are in this kind of right hand thing right here which i assume you guys can see so i actually want to add one that is like a message one so i think they have a message run oh perfect they have message right there so i'm gonna say icons dot message so if i hover over that you can see that's what that icon looks like and now we're going to have an icon that goes before any of the message that we're typing or any of the text that we're typing and it is simply a message icon so i think that will look nice next what we're going to do for input decoration is we're going to add a like helper text so let's just say text here there should be helper text i think that's the right one where are the other ones sorry we're not going to use help helper text we're going to use label text so here we can see what this does when the input field is empty and unfocused the label is displayed on top of the input field okay so that's exactly what we want that's what i want so i'm going to click label text and then here what i'm going to do is just simply write out the text that i want to show so in this case i want to say type a message colon like that and we'll just add i guess we don't need a space that's fine so we'll leave that like that and for right now that's all we need for our text field so hopefully if we did this right if we look at our phone now you can press the hot refresh button or build it if you haven't yet now we have this widget and you can see it says type a message and i can go ahead and say hello world like that awesome now to unfocus it you can just press i believe the done button like that and notice that it changes colors so this is what i really like about flutter a lot of the style stuff is just kind of prehandled for you like right here this just looks pretty good already and all i did was add a really basic input decoration that has an icon and some label text so now that we have that that's working now we need some way that we can actually figure out what is inside of this text box right so we're not going to get into buttons today but i'm going to show you how we can clear the text box and how we can actually control what's inside of it so if we want to control what's inside of this text field what we need to do is we need to actually make a text controller now this seems a little confusing but we will try our best to figure this one out so the first thing we need to do is we need to say final controller equals and then i think this is going to be text input controller or text controller i'm going to have to just type here and try to figure out what it is all right so i was close but i had to go look it up it's text editing controller so we're going to say final controller equals text editing controller this is simply an object that's going to allow us to attach it to this text field and then we can use controller to actually modify the contents and figure out the contents of what's typed in here so if you go inside of the text field there's a field called controller or parameter called controller and here all we're going to do is say controller equals this dot controller like that so this is just a noting that this controller parameter here is going to be equal to our controller so now we can use this controller to actually access the values of this field but how are we actually going to go ahead and do that well we need some way to like actually trigger getting the information from this field right or we need somewhere that we can display it or something like that so the first thing that i'm going to do is i'm actually going to go inside of here and i'm going to make now a row or a column actually that has another text field inside of it so that whenever we type in the text field it will actually show sorry not text field we'll just have text it will show in this text what we've typed this might seem you know i might not be explaining that very well right now but it will make sense let's go column and let's put that inside of here so if we remember for column we have children as the actual parameter here and then what we need to do is we need to make a list of the children so we're going to say widget like that and we're going to go ahead and add the list and finish the list right there now after some saving that formats it nicely for us and we can see we have a column with the children of first text field that's the first child and now what we're going to do is we're going to add another child which is simply text so we're going to say text and inside of here what we need to do is we need to actually put the text that we want to display so in this case i'm going to display controller.txt so what this is going to do is it's going to get the text from this text field and it's going to display that inside of this text right here now let's actually go ahead and have a look at what this does now is this look okay so let's just type hello and what the heck nothing's showing up why isn't that working we technically should have some text right i don't even see the text so let's just try this first of all let's go and let's put hello like that just to see if the text actually is displaying and it is so hello is displaying there but when i'm typing here it wasn't changing so why is that happening well the reason that's happening is because of the way that uh what do you call it the way that flutter actually redraws and rerenders itself so by just simply putting controller.text here what's going to happen is this widget is going to get drawn so we're going to draw the text input widget and then as soon as we end up typing some stuff nothing is actually going to be updated and nothing is changing the reason nothing is changing other than the text field itself when we're typing is because we're not telling flutter that we need to refresh this widget we're not telling it to redraw it and if we're not changing the state we're not doing anything to tell flutter to redraw this widget it's not going to redraw so even though controller.text is changing as the time is going on and as we're adding stuff to this text field we're never actually redrawing this text because we're not updating the widget so what we need to do is figure out a way that we can force flutter to refresh whenever we type something here so how can we actually go about doing that well what we can do first of all is i'm going to add a method that we need which is called dispose so i'm going to say i believe it's at overwrite or maybe it's not i think it's void dispose and then inside of here what we're going to do is we're just going to make sure that when we dispose of this widget we dispose of this controller so the first thing i'm going to do i'm going to say super dot dispose to make sure we call our parents dispose the reason for that is because what dispose does essentially say okay when this widget is done when we're finished using it we need to clean it up we need to get rid of any of the stuff that's kind of sitting there we just need to delete it and get rid of it so it's not just loose sitting there in memory that is what this dispose method does it's just cleaning up the object so this already has an implementation in the parent class state text widget there's already an implementation that cleans up the state whenever this widget is disposed of so we need to make sure that we call that first and then we can add what we want to do which is controller.dispose now just to make this a little bit more verbose what we're going to do is add the at override because this is an override from the parent class we're going to say add override like that just like we have for build and now we can make sure that when this widget is gone we're disposing of whatever the parent needs to dispose of and our controller so we have that now let's get back to what i was talking about before which is how can we actually refresh and update this well the first thing that i'm going to do is i'm actually going to add a string text inside of here now what this is going to do is just store the text that i actually want to display inside of my text field so now rather than having controller.text what i'm going to say is this dot text now note that you don't need this that's not necessary most of the times you can just write text like that but i like to add this just so i know that this is coming from the actual um uh what do you call it properties or whatever it's called of this class uh attributes whatever you might call it so anyways let's add that so now what i'm going to do is i'm actually going to add a method on this text field here which is going to say okay when we change this text field i want to call a function or i want to do something that's what i'm going to do here so what i'm going to do now is i'm going to add an unchanged event to this widget so essentially what's going to happen is when this text field is changed whenever we interact with it and do something we're going to update the text and the way we're going to update that is by calling a method whenever this is modified so what i'm going to do is i'm going to add the on change parameter select that on change if we hover over that you can read what it does and you can see what's going on and what i'm going to do is i'm going to write bracket bracket text like that colon oops not colon sorry uh equal sign greater than sign now what this is doing is this is making an arrow function so essentially what we're saying is that we're going to make a function that has the parameter text and text is going to be passed from this field right here so we'll take whatever text is in the field and we're going to pass that to another function now what this function is going to do so i'm going to just make one up here i'm just going to call this void and we'll call it change text is going to take text like that and it's going to modify this text right here so it's going to say this dot text equals text like that with a semicolon so what we're going to do is we're going to call this so we're going to say that's an arrow function to change text like this which is going to be this dot change text and that's going to take text so what that means again is we're going to have the parameter text this is an arrow function which means this whole thing can be called so this is going to seem weird but let me just illustrate this to you down here say i have this right here i say like x equals that obviously this isn't valid but just imagine this is x is equal to all of this what happens if i call x is we're going to call this function right here so i would have to pass it something i would say x hello and then text would be equal to hello because i'm calling x with hello and then that would actually call this.changetext with hello which is the parameter there so i hope that kind of makes sense on how the arrow functions work but this is the parameter and this is the body of the function so we're saying okay text and this is what we do when this function is called so when i call x which is equal to this arrow function and i give it hello then it's going to pass hello as the parameter and it's going to call this.changetext with hello so that is the basics on how we're going to do that so now we're saying change text this dot text equals text now i'm going to show you what happens when we do this but we're going to have the same problem that we had before so if i go here and i can start typing this is reloaded i've refreshed the thing but it's not working it's not updating the text the reason for that is again because i haven't told flutter to refresh the display so to do that any change i make that's actually changing the state of this object i need to wrap inside of set state so i'm going to say set state like this this is a special method from flutter and inside of here we're going to say this dot text equals text so whenever you're making a change to the state and you want this to be forced refresh so you want it to refresh and redraw the widget you need to wrap set states use a set state you put the brackets like that and then you put in open curly close curly and you put inside of it any of the variables you want to change you can do whatever you want inside of here you can change many different things but this is going to force this to refresh and to rebuild the widget so now when this happens what will happen is we will automatically refresh the text then we will redraw the widget with whatever the text is that we're storing inside of this object so let's go ahead and refresh this here and let's look at this and let's start typing and now we can see that the text down here is actually changing as we change whatever's inside of here so that is a quick way to actually get the value of the text we can do something like this and we can add an unchanged event now this all we this isn't necessarily perfect though the reason for that is because by just having this on changed event i can't necessarily manipulate what's inside of this text field like let's say that when they type a specific thing i actually want to modify the text field i want to clear it so in this case let's actually write some code that makes it so if they type hello world it automatically deletes whatever they typed so to do that we're going to go inside of change text here we're just going to add an if statement we're going to say if in this case text equals equals equals it might actually only be one equal sign i'm going to say hello world like that so we're going to delete one of these equal signs because i'm used to writing in javascript now but we say if text equals equals hello world so if the value of text is equal to hello world then what we're going to do is we're going to actually clear the text field so to do that we're going to say controller dot and i think there's something called clear so controller.clear perfect and that's all we need to do then what we're going to do is we're going to make sure that we change the value of this dot text so we change the parameter text to be blank so we'll say text equals blank like that and now when we change this state we'll be changing it to uh empty so that should hopefully work let's have a look at how this works and then we'll recap what we've done so if we go we type hello world that's not going to work the reason it's not working is because we don't have a capital w and h but when i type h you can see that as soon as we get to hello world so exclamation point it clears the text field and it removes whatever was here in that text as well so that is how you can manipulate the value of a text field that's how you can change the state of things in the objects and force a refresh in flutter so with that i think i'm going to end the tutorial here this was a lot of information at once i don't want to go on too far and really confuse anyone in the next video we're going to talk about button presses and then we will make something so when you press the button it will take whatever you've typed in and it will display that onto the screen and then we'll be well on our way with this blog application and hopefully in a few more videos we'll have something that's fully functioning and we can hook it up to a database so if you guys enjoyed make sure you leave a like subscribe and i will see you in the next flutter tutorial
