With timestamps:

00:01 - [Music]
00:06 - welcome back to another YouTube video so
00:09 - in today's video I'm going to be talking
00:10 - about the binary search algorithm now in
00:13 - the last video we talked about the
00:14 - linear search algorithm a very simple
00:16 - algorithm pretty much if this was our
00:18 - list it looks around the beginning to
00:19 - the end of the list until it found the
00:21 - element that we were looking for this
00:23 - search algorithm is much faster
00:25 - especially on large data sets and it has
00:28 - log n Big O notation meaning that it
00:31 - gets exponentially faster as the data
00:33 - set gets larger so this is extremely
00:36 - useful and it's a lot more useful than
00:38 - the linear search has more applications
00:40 - so let's get right into how it works so
00:43 - this is gonna be a list up here just for
00:46 - example purposes I know it's extremely
00:47 - simple but it's just easy to illustrate
00:49 - how things work with a small list now
00:51 - binary meaning 2 means that we're gonna
00:54 - have two main comparisons in this in
00:57 - this search it's gonna be greater than
00:59 - and less than so what we're gonna do is
01:01 - we're gonna find the middle indicee this
01:03 - what the algorithm does finds the middle
01:04 - indicee or index of the list which in
01:06 - this case would be 5
01:08 - now it's gonna compare the element where
01:10 - that we're looking for and right now
01:12 - we're gonna be looking for one to this
01:14 - element it's gonna say is 1 greater than
01:16 - 5 no it's not is 1 lesson 5 yes it is
01:20 - now once we know this information we
01:22 - then split up the list or the algorithm
01:24 - splits up the list so if we know that 1
01:26 - is less than 5 why would we continue to
01:28 - look this way if we know it's gonna be
01:31 - in the bottom half of the list so now we
01:33 - have a list of 1 2 3 4 and the same
01:37 - process repeats itself so now we have
01:39 - this list and we're gonna look at the
01:41 - middle indices now notice this is not an
01:43 - odd numbered list so because of this the
01:45 - industry we're going to be checking is
01:47 - here it doesn't really matter which one
01:50 - you check if you check this one or this
01:52 - one we're just gonna be checking this
01:54 - one and then we're gonna say well is 1
01:56 - less than 2 yes it is so now we create a
01:58 - list that only has 1 in it and then we
02:01 - find that since there's only one element
02:03 - in it and that's the element we're
02:05 - checking that is 1 all right so I know I
02:08 - went kind of fast a little bit confusing
02:09 - but as I go through the code of this
02:11 - algorithm you'll understand hopefully
02:13 - how this works so this is my function
02:16 - here it's not too complex and it is
02:19 - fairly simple to code so we're gonna
02:22 - start off by sorting our list so I
02:23 - mentioned that this algorithm only works
02:25 - if the list is sorted and obviously
02:27 - that's because if we have these in
02:28 - different orders we wouldn't be able to
02:29 - do the same comparisons that we're doing
02:32 - in the algorithm now we start by setting
02:35 - two variables a top and a bottom
02:36 - variable so our top is gonna be the top
02:40 - section of the list and the bottom is
02:42 - gonna be the bottom of a section list
02:43 - and rather than recreating a bunch of
02:45 - different lists every time we we split
02:48 - it up or we do a comparison we're just
02:50 - gonna be looking at a different part of
02:52 - the list so rather than recreating a
02:53 - list which gonna take more time and more
02:55 - memory we're just looking at a different
02:57 - section of the original list that makes
02:59 - sense so we have our top our bottom this
03:02 - is gonna be the whole list because we
03:04 - start at 0 and we go to the last in the
03:06 - scene and then here I just print this
03:08 - out just so we can see we'll be able to
03:11 - see when we run the program and now we
03:13 - find our middle indicee in this while
03:16 - loop so this middle indicee is gonna be
03:18 - the top plus the bottom
03:19 - / - just how you find example midpoint
03:22 - of a line or the middle of a list and
03:25 - this integer division is very important
03:27 - because if we get something like we have
03:29 - 5 for example and we divide by 2 then
03:33 - we're gonna be getting in decimal number
03:35 - which we don't want all right and then
03:37 - we do our comparisons so we start by
03:40 - checking well is the element that we're
03:43 - looking for right here equal to the
03:46 - element in the list that we're comparing
03:48 - it to so pretty much the 1 step here so
03:50 - once we check the middle indicee we're
03:52 - gonna first see well if the element that
03:55 - we're looking for is equal to that
03:56 - middle indicee we've now found it we
03:58 - don't need to continue to look through
03:59 - the list if it's not equal to that then
04:02 - we move down and we say well is it less
04:04 - than the middle indices or whatever that
04:07 - element is if it is then we're gonna be
04:10 - setting our top to our middle and what
04:12 - that does is it moves pretty much at the
04:14 - top is here at 9 it moves it down to 5
04:17 - so that we can then look through the
04:19 - next section of the list like that and
04:21 - then the next part here so we say if
04:24 - element is greater than
04:26 - and then same thing so we're gonna move
04:28 - our bottom to the middle so what we do
04:31 - is we have this is our bottom we would
04:32 - then move it up here so now the next
04:34 - section of our list is this and you can
04:37 - see how this continues to go on now it
04:40 - is to be noted here I could just put an
04:42 - else statement the reason I put Elif is
04:43 - just to illustrate more clearly exactly
04:45 - how this works because obviously if it's
04:47 - not equal to it's not less than it's
04:49 - gonna be greater than if it's a number
04:50 - and this does work for strings in Python
04:53 - so in Python you can actually I'll show
04:55 - you down here you could actually do for
04:58 - example something like this like that
05:03 - and that would actually work as a
05:04 - comparison
05:05 - it's really weird compared to other
05:06 - languages but it does work so you can
05:09 - compare strings like that so this will
05:10 - work for Strings if you're using Python
05:12 - and then down here this is just where I
05:14 - create a random list of integers and
05:16 - then I just select a random integer to
05:18 - look for it in the list so if we go
05:19 - ahead and run the program here save it
05:22 - then you can see I just simply am
05:24 - printing out the length of the list to
05:26 - show you how many comparisons were
05:27 - actually doing so we start with ten
05:29 - thousand five thousand 2500 1250 so on
05:34 - having each time now as we get down to
05:37 - the end here we have ten elements left
05:39 - and at this point we've now found the
05:41 - element we're looking for which is at
05:44 - the twelve hundred and fifteenth index
05:46 - now this is extremely efficient and you
05:50 - can see already that if I had tried to
05:51 - do ten thousand items in a linear search
05:53 - and say maybe we got unlucky and the
05:55 - item we were looking for was at the very
05:57 - end we would still be waiting for that
05:58 - search to go on so you can see how much
06:00 - faster this actually gets now if I just
06:03 - add another zero here tour at the length
06:04 - of our list a hundred thousand we can
06:06 - run it again and you see we're going
06:07 - it's extremely fast considering the
06:10 - amount of items in our list if I'm not
06:13 - if I don't print this it should pop up
06:15 - almost instantly oops
06:18 - comment that out and yeah you can see we
06:22 - get that almost instantly now again if
06:25 - we go to 1 million there we go
06:29 - we're getting hit again almost instantly
06:30 - 10 million let's see how fast this one
06:32 - goes and we're taking a little bit
06:35 - longer on this one which is to be
06:36 - expected so yeah you can see that the
06:40 - binary search is extremely efficient and
06:43 - it's obviously better to use a linear
06:46 - search if you're using longer or larger
06:48 - data sets the reason we would use linear
06:51 - search over this is only because of this
06:53 - aspect right here if you look if you're
06:55 - looking at a small data set and you
06:57 - don't want to sort it first then you
06:59 - just use a linear search so yeah this
07:01 - has been the video on the binary sorry
07:03 - not sort search algorithm I've just been
07:05 - saying sort for a long time now haven't
07:07 - I I hope you guys enjoyed if you did
07:09 - please leave a like and subscribe and I
07:11 - will see you again
07:15 - [Music]

Cleaned transcript:

welcome back to another YouTube video so in today's video I'm going to be talking about the binary search algorithm now in the last video we talked about the linear search algorithm a very simple algorithm pretty much if this was our list it looks around the beginning to the end of the list until it found the element that we were looking for this search algorithm is much faster especially on large data sets and it has log n Big O notation meaning that it gets exponentially faster as the data set gets larger so this is extremely useful and it's a lot more useful than the linear search has more applications so let's get right into how it works so this is gonna be a list up here just for example purposes I know it's extremely simple but it's just easy to illustrate how things work with a small list now binary meaning 2 means that we're gonna have two main comparisons in this in this search it's gonna be greater than and less than so what we're gonna do is we're gonna find the middle indicee this what the algorithm does finds the middle indicee or index of the list which in this case would be 5 now it's gonna compare the element where that we're looking for and right now we're gonna be looking for one to this element it's gonna say is 1 greater than 5 no it's not is 1 lesson 5 yes it is now once we know this information we then split up the list or the algorithm splits up the list so if we know that 1 is less than 5 why would we continue to look this way if we know it's gonna be in the bottom half of the list so now we have a list of 1 2 3 4 and the same process repeats itself so now we have this list and we're gonna look at the middle indices now notice this is not an odd numbered list so because of this the industry we're going to be checking is here it doesn't really matter which one you check if you check this one or this one we're just gonna be checking this one and then we're gonna say well is 1 less than 2 yes it is so now we create a list that only has 1 in it and then we find that since there's only one element in it and that's the element we're checking that is 1 all right so I know I went kind of fast a little bit confusing but as I go through the code of this algorithm you'll understand hopefully how this works so this is my function here it's not too complex and it is fairly simple to code so we're gonna start off by sorting our list so I mentioned that this algorithm only works if the list is sorted and obviously that's because if we have these in different orders we wouldn't be able to do the same comparisons that we're doing in the algorithm now we start by setting two variables a top and a bottom variable so our top is gonna be the top section of the list and the bottom is gonna be the bottom of a section list and rather than recreating a bunch of different lists every time we we split it up or we do a comparison we're just gonna be looking at a different part of the list so rather than recreating a list which gonna take more time and more memory we're just looking at a different section of the original list that makes sense so we have our top our bottom this is gonna be the whole list because we start at 0 and we go to the last in the scene and then here I just print this out just so we can see we'll be able to see when we run the program and now we find our middle indicee in this while loop so this middle indicee is gonna be the top plus the bottom / just how you find example midpoint of a line or the middle of a list and this integer division is very important because if we get something like we have 5 for example and we divide by 2 then we're gonna be getting in decimal number which we don't want all right and then we do our comparisons so we start by checking well is the element that we're looking for right here equal to the element in the list that we're comparing it to so pretty much the 1 step here so once we check the middle indicee we're gonna first see well if the element that we're looking for is equal to that middle indicee we've now found it we don't need to continue to look through the list if it's not equal to that then we move down and we say well is it less than the middle indices or whatever that element is if it is then we're gonna be setting our top to our middle and what that does is it moves pretty much at the top is here at 9 it moves it down to 5 so that we can then look through the next section of the list like that and then the next part here so we say if element is greater than and then same thing so we're gonna move our bottom to the middle so what we do is we have this is our bottom we would then move it up here so now the next section of our list is this and you can see how this continues to go on now it is to be noted here I could just put an else statement the reason I put Elif is just to illustrate more clearly exactly how this works because obviously if it's not equal to it's not less than it's gonna be greater than if it's a number and this does work for strings in Python so in Python you can actually I'll show you down here you could actually do for example something like this like that and that would actually work as a comparison it's really weird compared to other languages but it does work so you can compare strings like that so this will work for Strings if you're using Python and then down here this is just where I create a random list of integers and then I just select a random integer to look for it in the list so if we go ahead and run the program here save it then you can see I just simply am printing out the length of the list to show you how many comparisons were actually doing so we start with ten thousand five thousand 2500 1250 so on having each time now as we get down to the end here we have ten elements left and at this point we've now found the element we're looking for which is at the twelve hundred and fifteenth index now this is extremely efficient and you can see already that if I had tried to do ten thousand items in a linear search and say maybe we got unlucky and the item we were looking for was at the very end we would still be waiting for that search to go on so you can see how much faster this actually gets now if I just add another zero here tour at the length of our list a hundred thousand we can run it again and you see we're going it's extremely fast considering the amount of items in our list if I'm not if I don't print this it should pop up almost instantly oops comment that out and yeah you can see we get that almost instantly now again if we go to 1 million there we go we're getting hit again almost instantly 10 million let's see how fast this one goes and we're taking a little bit longer on this one which is to be expected so yeah you can see that the binary search is extremely efficient and it's obviously better to use a linear search if you're using longer or larger data sets the reason we would use linear search over this is only because of this aspect right here if you look if you're looking at a small data set and you don't want to sort it first then you just use a linear search so yeah this has been the video on the binary sorry not sort search algorithm I've just been saying sort for a long time now haven't I I hope you guys enjoyed if you did please leave a like and subscribe and I will see you again
