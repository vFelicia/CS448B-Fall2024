With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - youtube video
00:11 - so in today's video i'm going to be
00:13 - sharing with you some very advanced and
00:14 - interesting programming
00:16 - concepts in the python programming
00:18 - language now the point of this video is
00:20 - not to give you a full tutorial on all
00:22 - the stuff that i'm showing you
00:23 - but just to expose you to what you can
00:25 - do when you really do have a mastery or
00:27 - kind of expert level understanding of a
00:29 - language
00:30 - now i don't claim to be a python expert
00:32 - but the stuff i'm showing you here is
00:34 - definitely
00:35 - expert or advanced level features in
00:37 - python and obviously you don't need to
00:38 - understand
00:39 - every single aspect of python to
00:41 - understand this one kind of cool thing
00:43 - i'm going to show you here
00:44 - again this is not meant to be a full
00:45 - tutorial just to expose you to what's
00:48 - possible
00:48 - when you really have a deep
00:50 - understanding of a language and how you
00:51 - can implement some very advanced
00:53 - and interesting behavior that you may
00:54 - not have anticipated before
00:56 - so i'll kind of leave the intro at that
00:58 - but i will mention that if you're
00:59 - interested
01:00 - in this type of stuff you were able to
01:02 - follow along with this video
01:03 - i do have an expert python tutorial
01:05 - series that goes through more things
01:07 - like this in the python programming
01:08 - language i believe there's six videos in
01:10 - that series
01:11 - and we'll leave a link to that in the
01:12 - description and a card in the top right
01:14 - hand corner of the screen
01:16 - so with that said let's look at the
01:17 - magic of python but what is also magic
01:19 - is the sponsor of this video
01:21 - before we get started i need to thank
01:23 - the sponsor of this video which is
01:24 - sublime merch
01:26 - sublime merge is a git client that makes
01:27 - managing your code repository simple
01:30 - without hiding the power of git it was
01:32 - created by the same team that made
01:33 - sublime text and was designed to write a
01:35 - fast and simple to use tool
01:37 - that still provides all the powerful
01:39 - gate features with line by line staging
01:41 - powerful search and easy customization
01:44 - sublime merge offers a better and faster
01:46 - way to interact with your git
01:48 - repositories
01:49 - one of my favorite features in this tool
01:51 - is the sublime highlighting that allows
01:53 - me to quickly see
01:54 - the changes in commits and provides
01:55 - proper syntax highlighting for over 40
01:57 - supported languages
01:59 - out of the box another useful feature is
02:01 - that sublime merge uses actual git
02:03 - and allows you to see all the commands
02:05 - it's running for you and even add your
02:07 - own custom
02:08 - commands now just like sublime text
02:10 - sublime merge is fully customizable
02:12 - you can change the layout theme and more
02:15 - sublime merge is free to evaluate with
02:17 - no time limits or restrictions and if
02:19 - you're a sublime text user already you
02:21 - can bundle
02:22 - it with the newly released sublime text
02:24 - 4 and save
02:25 - get started with sublime merge today by
02:27 - clicking the link in the description
02:29 - all right so let's go ahead and get into
02:31 - the video here now the first thing i'm
02:32 - going to mention is why i called this
02:34 - video the magic of python what is magic
02:37 - about python
02:38 - well in any programming language and
02:40 - python especially there's a lot of
02:41 - high level syntax and great features
02:44 - that you can use without having any
02:46 - understanding of how they actually work
02:48 - on the back end right and great example
02:50 - of of these sorry is functions like say
02:52 - len right this len function we just take
02:54 - for granted that this can give us the
02:56 - length of any object
02:57 - we have functions like int this can
02:59 - convert something to an entry create a
03:01 - new
03:01 - int for us we have a bunch of other
03:03 - functions right we have the map function
03:05 - we have the filter function we have a
03:07 - ton of things that we can just use and
03:09 - we can kind of take for granted we don't
03:10 - have to understand
03:12 - how they're implemented and when we use
03:13 - these things some magic occurs in the
03:15 - backend and then we get some result or
03:17 - some behavior
03:18 - and so what i'm going to do here is kind
03:19 - of peel back you know some of that back
03:21 - end code
03:22 - and show you what it is that's actually
03:24 - going on in the back end
03:26 - specifically when you create a class
03:29 - now you'll see why i'm going to show
03:30 - this to you in a second but i want to
03:32 - start by kind of
03:32 - introducing the concept of objects in
03:35 - python to everyone now i'm sure many of
03:37 - you are familiar with objects if you're
03:38 - watching this video you're probably
03:39 - familiar with object oriented
03:41 - programming
03:42 - but one thing you have to realize about
03:43 - python is that pretty much everything is
03:45 - an object
03:46 - so something like x equals one you know
03:48 - this is an int data type
03:49 - but if actually go ahead and print the
03:51 - type of x
03:53 - we can see this is from class int so
03:55 - what this really means
03:56 - is x is an instance of the class int
04:00 - it just happens to have the value 1. now
04:02 - since this is an instance of class
04:04 - int this means i can add other integers
04:06 - to it right i can say print
04:08 - x plus 2 and that's all good we get the
04:11 - value 3.
04:12 - and if i am actually to print the type
04:15 - of x plus two so if i do that
04:17 - you see again we get class int the
04:18 - result here which is three
04:20 - is of type in so it's an instance of the
04:22 - class it
04:23 - so these classes are kind of like
04:25 - blueprints that define the behavior of
04:27 - the different
04:28 - objects in python if i create another
04:30 - variable here and we make this equal to
04:32 - a string
04:32 - and i print the type of it well you're
04:34 - going to see that it is just simply
04:36 - going to be string
04:37 - now what happens though when i try to
04:39 - actually print say x
04:40 - plus y well when i do this notice we get
04:43 - an error
04:43 - it says unsupported operand types for
04:46 - int and string
04:47 - so since one of these variables is type
04:49 - string and the other is type ins
04:51 - i cannot add them together because that
04:53 - operation is not defined
04:55 - and so just keep that in mind there that
04:57 - these classes or these
04:59 - types really are blueprints defining how
05:02 - objects can behave in our program what
05:05 - methods we can use on them
05:06 - what operations or operators we can use
05:08 - with them it's a blueprint defining the
05:10 - behavior that's really the key thing to
05:11 - think about
05:12 - classes are just blueprints that define
05:14 - how objects behave and you can obviously
05:16 - have many objects
05:17 - of the same type or of the same class so
05:20 - now though
05:21 - let's create a class let's go ahead and
05:23 - say class we can just do a really simple
05:25 - class maybe like person
05:27 - and we'll define in a nit in here we
05:28 - don't need to do that
05:30 - say define underscore underscore in it
05:32 - underscore underscore
05:33 - and quite simply we'll just take a name
05:35 - right and then we'll say
05:37 - dot name is equal to name
05:40 - okay so we've created this person class
05:43 - this is great and we now know that we
05:44 - can do something like
05:45 - x is equal to person and then we can
05:48 - give it a name
05:49 - say like tim if we run our program no
05:51 - problem this works
05:52 - totally fine however why is it that we
05:56 - can write this syntax
05:57 - how does python actually create a new
06:00 - class
06:01 - that is a person class well one thing i
06:04 - want to show you here
06:05 - is that if i type or sorry print the
06:07 - type of x
06:09 - we get main.person so the reason it's
06:11 - saying main is because the module in
06:13 - which you run the python code in
06:15 - is called main so whatever module is
06:17 - executed its name is kind of main
06:19 - and then we say dot person just to kind
06:21 - of signify that the person class is
06:22 - inside of the main module
06:24 - that's great that's pretty
06:25 - straightforward i'm sure that's not
06:26 - confusing everyone however
06:28 - what happens when i look at the type of
06:31 - the class right so now notice i've not
06:33 - created an
06:34 - instance of this class i'll delete that
06:36 - i'm looking at what the type
06:37 - of the actual class itself is and when i
06:41 - do this
06:41 - notice we get class type now that's kind
06:44 - of strange because
06:45 - when we think of creating a class we
06:47 - think of creating a new type
06:49 - right we're creating this person type
06:51 - and we can create objects
06:52 - of type person but it turns out the
06:55 - classes themselves
06:57 - are objects that are of the type type
07:00 - so i understand that that's confusing
07:01 - but there is actually a blueprint
07:04 - above our object or above our class
07:06 - story that defines
07:07 - how we can create a class so just like
07:10 - this is a blueprint for the person
07:12 - objects there is actually a blueprint
07:14 - for creating classes
07:16 - just like there is a blueprint for
07:18 - creating functions right if i define
07:19 - foo maybe we take an x here and then we
07:22 - print
07:23 - x i think many of you have probably seen
07:25 - this before but i can print the type
07:27 - of foo oops and i see
07:30 - that this is class function so there is
07:32 - a blueprint that allows me to define
07:34 - functions
07:35 - and there is a blueprint that allows me
07:37 - to define classes
07:38 - now since there is this other type this
07:40 - type type and notice we're using this
07:42 - type function right here this
07:44 - means that this is not actually the only
07:46 - way that we need to create
07:48 - a class and i'm going to show you now
07:49 - kind of the advanced behavior of classes
07:52 - and what you can do when you understand
07:54 - the fact that a class
07:55 - is of type type so let me erase all of
07:59 - this
07:59 - and what i'm going to show you here is
08:01 - how i can create this exact same class
08:03 - without using this high level fancy
08:06 - syntax
08:06 - and the way we do this is we use
08:08 - something called type
08:10 - so what i'm going to do is create some
08:11 - variable let's just call this
08:13 - new underscore class okay and this is
08:15 - going to be equal to
08:16 - type we've used this function before but
08:19 - it turns out that this function can not
08:20 - only give you the type of something
08:22 - it can allow you to create a new class
08:25 - of type type or a new object of type
08:28 - type which would be a class
08:29 - so the three arguments that go to this
08:32 - function here
08:33 - are the following they are the class
08:36 - name
08:36 - so in this case my class name is going
08:38 - to be person
08:40 - any of the what is a base class is sorry
08:43 - for this class so anything this class is
08:44 - going to inherit from would go right
08:46 - inside of here
08:47 - and then all of the attributes on this
08:49 - class so attributes of a class are
08:51 - things like methods
08:53 - class methods static methods so on and
08:55 - so forth class variables
08:56 - those are all attributes of a class and
08:59 - so what i'm going to do here
09:01 - is i'm going to create a function i'm
09:03 - going to call this function
09:04 - person underscore a net what this
09:07 - function is going to do is take in
09:09 - self and it's going to say actually
09:10 - sorry it's going to take itself and it's
09:12 - going to take a name
09:13 - and it's going to say self.name is equal
09:16 - to name
09:17 - notice this is the same as the init
09:18 - function right here
09:20 - okay so we have this init function what
09:22 - i'm going to do now is create an
09:24 - attribute of this class which is the
09:27 - init
09:28 - method okay so i'm going to say init and
09:30 - then this is going to point to the
09:31 - person init
09:33 - now walk through this slowly in a minute
09:34 - but what i've actually just done here
09:36 - with new class
09:38 - this line right here has created this
09:40 - exact same person class
09:42 - so sorry it would be these three lines
09:43 - here but these three lines are
09:45 - equivalent
09:46 - to this right here and i'll show you
09:47 - what i mean in a second so what this is
09:49 - actually
09:50 - done is it's created a class called
09:51 - person it has no base classes
09:54 - and it has one attribute which is the
09:56 - init method so double underscore init
09:58 - double underscore
09:59 - and that is equal to this function right
10:01 - here so you can imagine this is me kind
10:03 - of mapping this init method
10:05 - to this function that we've defined and
10:07 - now what i can do is i can actually use
10:09 - this new class variable
10:11 - to create an object of a type person
10:14 - so let me actually just comment this out
10:18 - uh what do i want to do here oops i'm in
10:20 - the wrong programming language for that
10:22 - okay so let's just comment this out
10:23 - and what i'm going to do is say that x
10:26 - is
10:26 - equal to new class and then i'm going to
10:30 - type in the name of my person
10:32 - i'm going to say 10 and then i'm just
10:33 - going to simply go here and print
10:35 - and this will be x dot name okay so when
10:38 - i do this
10:39 - you're going to see that this works and
10:41 - this is very strange don't get me wrong
10:43 - what we've done is we've stored the
10:45 - class person
10:47 - in the variable new class and then we've
10:49 - created an
10:50 - object of type person which we do by
10:53 - initializing new class
10:55 - and then we've looked at the name of
10:57 - that person
10:58 - there you go now if i want to actually
11:00 - look at the name
11:01 - of this new class what i can do is i can
11:04 - print
11:04 - new underscore class dot underscore
11:07 - underscore name
11:08 - underscore underscore oops and if i do
11:11 - this
11:12 - oops new class or any one more s here
11:14 - you're going to see that this new class
11:16 - variable
11:17 - is actually the person class so
11:20 - hopefully this isn't confusing you too
11:22 - badly
11:23 - but this is how you can actually create
11:25 - a class using this type
11:27 - function and that is because again there
11:29 - is a blueprint
11:30 - above our kind of pre-built in classes
11:33 - here
11:34 - that tells you how to define a class now
11:36 - since
11:37 - that is the case since there is this
11:39 - blueprint we can do these very advanced
11:41 - things like this where we dynamically
11:42 - create a class we can use this type
11:44 - function
11:45 - we can make a class name we can give any
11:47 - parent classes and then we can give all
11:49 - of these attributes now let me show you
11:50 - how you would add a method to this class
11:53 - so we'll leave these lines here what i'm
11:56 - going to do is say define
11:57 - say name this is going to take in self
12:00 - and what this is going to do is print
12:03 - self.name
12:05 - okay so now what i'm going to do is i'm
12:06 - going to hook up this method here so i'm
12:08 - going to say ok the method
12:10 - say underscore name is equal to a
12:12 - function and this is
12:13 - say underscore name now what i've done
12:16 - is i've allowed myself
12:18 - to use this say name method whenever i
12:20 - call dot say name
12:22 - what that's going to do is called this
12:23 - function right here because i've kind of
12:24 - hooked them up in this way
12:26 - so now rather than just printing x dot
12:28 - name what i can do is i don't even need
12:30 - to say print actually i can just say
12:32 - x dot say underscore name
12:35 - and then notice it says tim so that is
12:38 - how you would go about creating a method
12:40 - now we've already seen how you can add
12:42 - actual attributes or properties to this
12:44 - class
12:45 - which is by simply uh creating the
12:47 - initialization sorry
12:49 - so in the initialization right i have
12:50 - myself i have my name
12:52 - and then what i could do after here is i
12:53 - could take other attributes as well
12:55 - maybe like age
12:56 - and i could say self dot age equals age
12:58 - and these are kind of the instance
12:59 - variables
13:00 - associated with the class defined in
13:02 - this way but the whole point of me
13:04 - showing this to you
13:04 - is that this is exactly equivalent to me
13:07 - doing this
13:08 - in this class syntax and what happens in
13:10 - this class syntax
13:11 - is the python interpreter actually goes
13:13 - through parses all of these methods
13:15 - which are really just functions inside
13:17 - of the class right
13:18 - and then uses this type function to
13:20 - create the class in the way in which
13:21 - we're manually doing it down here
13:23 - so here it's just kind of the you know
13:25 - short form syntax essentially this is
13:27 - the nice way the pretty way of doing
13:28 - things
13:29 - but you can go right down to kind of the
13:31 - the bare bones level
13:33 - and create the class on your own so if i
13:34 - wanted to make these classes equivalent
13:36 - then i would need to do my method say
13:37 - name
13:38 - again this would need to take self and
13:40 - then i would need to just print
13:42 - self.name and now my person class here
13:45 - and my person class here are the exact
13:47 - same
13:48 - so you might be asking me now why would
13:50 - i ever want to do that
13:52 - why did you just spend 10 minutes
13:54 - showing this to me this seems cool but
13:55 - it's like relatively useless i'm never
13:57 - going to do this
13:58 - now chances are you probably never will
14:00 - do this right this is something that's
14:01 - very very specific
14:03 - and that is not a common thing to be
14:04 - doing in python programming and only
14:06 - very very advanced people actually kind
14:07 - of mess with this type of stuff
14:09 - but the idea here is that this now
14:11 - allows you with this knowledge
14:13 - to actually implement much more advanced
14:15 - behavior in python
14:16 - and where this would lead to if i were
14:18 - to continue going with this explanation
14:19 - is something called metaclasses
14:21 - now i'm not going to explain metaclasses
14:23 - in this video because i have an entire
14:24 - video going through metaclasses
14:26 - again you can find that in the expert
14:28 - python tutorial series
14:30 - but since we now know that the class
14:33 - person
14:33 - is of type type what that means is that
14:37 - i can create
14:38 - a class that actually is a subclass of
14:41 - class
14:42 - type and use that class to create
14:45 - new classes so this is kind of weird but
14:47 - i can make a class like class
14:49 - create class and i can just put type
14:52 - here
14:53 - now what i'm doing is i'm actually
14:55 - subclassing type right
14:56 - i'm creating a class that inherits from
14:59 - type and now what i can do is i can
15:01 - change the behavior of the type
15:03 - class some of it at least i can hook
15:06 - into and modify and overload different
15:08 - behavior
15:08 - and i can actually change the way in
15:10 - which classes
15:12 - are created and this means that now when
15:14 - i want to create a new class
15:16 - rather than using type i would use this
15:18 - create class thing so if i just put a
15:20 - pass here
15:20 - and i use create class
15:24 - like that you're going to see that this
15:26 - all works the exact same
15:27 - because what i've done is i've created
15:29 - the blueprint for
15:31 - my class right i've said okay i'm going
15:33 - to have a new blueprint now
15:34 - it is a subclass of type so whatever
15:36 - type does this will do
15:38 - and then in here i could go in and i
15:39 - could change how type
15:41 - actually works and i can then put
15:43 - constraints on the modification of
15:45 - classes or the creation of classes
15:47 - and i could change how a class was
15:49 - actually constructed
15:50 - what methods are called first is the
15:52 - init method called first
15:53 - is the call method called first is the
15:55 - new method called first if you know what
15:57 - those are if you don't know what those
15:58 - are
15:58 - don't worry but it allows you to do very
16:00 - very advanced and interesting things
16:02 - so i think i'm going to leave the video
16:03 - at that i'm sure this last part was
16:05 - maybe a little bit of a brain
16:07 - explosion for some of you guys because
16:09 - this is some pretty advanced stuff
16:11 - let me know what you guys think of this
16:12 - if you want to see more advanced syntax
16:14 - and concepts in python
16:16 - do let me know i usually stay away from
16:18 - them just because i know a lot of you
16:19 - guys are beginners or intermediate
16:21 - programmers but if there's a demand
16:22 - of course i'm happy to make some more
16:24 - videos about this topic regardless i
16:26 - hope you guys enjoyed if you did make
16:27 - sure to leave a like
16:28 - subscribe to the channel and again you
16:29 - can check out that expert python
16:31 - tutorial series learn more about this
16:34 - stuff
16:37 - [Music]
16:41 - you

Cleaned transcript:

hello everybody and welcome to another youtube video so in today's video i'm going to be sharing with you some very advanced and interesting programming concepts in the python programming language now the point of this video is not to give you a full tutorial on all the stuff that i'm showing you but just to expose you to what you can do when you really do have a mastery or kind of expert level understanding of a language now i don't claim to be a python expert but the stuff i'm showing you here is definitely expert or advanced level features in python and obviously you don't need to understand every single aspect of python to understand this one kind of cool thing i'm going to show you here again this is not meant to be a full tutorial just to expose you to what's possible when you really have a deep understanding of a language and how you can implement some very advanced and interesting behavior that you may not have anticipated before so i'll kind of leave the intro at that but i will mention that if you're interested in this type of stuff you were able to follow along with this video i do have an expert python tutorial series that goes through more things like this in the python programming language i believe there's six videos in that series and we'll leave a link to that in the description and a card in the top right hand corner of the screen so with that said let's look at the magic of python but what is also magic is the sponsor of this video before we get started i need to thank the sponsor of this video which is sublime merch sublime merge is a git client that makes managing your code repository simple without hiding the power of git it was created by the same team that made sublime text and was designed to write a fast and simple to use tool that still provides all the powerful gate features with line by line staging powerful search and easy customization sublime merge offers a better and faster way to interact with your git repositories one of my favorite features in this tool is the sublime highlighting that allows me to quickly see the changes in commits and provides proper syntax highlighting for over 40 supported languages out of the box another useful feature is that sublime merge uses actual git and allows you to see all the commands it's running for you and even add your own custom commands now just like sublime text sublime merge is fully customizable you can change the layout theme and more sublime merge is free to evaluate with no time limits or restrictions and if you're a sublime text user already you can bundle it with the newly released sublime text 4 and save get started with sublime merge today by clicking the link in the description all right so let's go ahead and get into the video here now the first thing i'm going to mention is why i called this video the magic of python what is magic about python well in any programming language and python especially there's a lot of high level syntax and great features that you can use without having any understanding of how they actually work on the back end right and great example of of these sorry is functions like say len right this len function we just take for granted that this can give us the length of any object we have functions like int this can convert something to an entry create a new int for us we have a bunch of other functions right we have the map function we have the filter function we have a ton of things that we can just use and we can kind of take for granted we don't have to understand how they're implemented and when we use these things some magic occurs in the backend and then we get some result or some behavior and so what i'm going to do here is kind of peel back you know some of that back end code and show you what it is that's actually going on in the back end specifically when you create a class now you'll see why i'm going to show this to you in a second but i want to start by kind of introducing the concept of objects in python to everyone now i'm sure many of you are familiar with objects if you're watching this video you're probably familiar with object oriented programming but one thing you have to realize about python is that pretty much everything is an object so something like x equals one you know this is an int data type but if actually go ahead and print the type of x we can see this is from class int so what this really means is x is an instance of the class int it just happens to have the value 1. now since this is an instance of class int this means i can add other integers to it right i can say print x plus 2 and that's all good we get the value 3. and if i am actually to print the type of x plus two so if i do that you see again we get class int the result here which is three is of type in so it's an instance of the class it so these classes are kind of like blueprints that define the behavior of the different objects in python if i create another variable here and we make this equal to a string and i print the type of it well you're going to see that it is just simply going to be string now what happens though when i try to actually print say x plus y well when i do this notice we get an error it says unsupported operand types for int and string so since one of these variables is type string and the other is type ins i cannot add them together because that operation is not defined and so just keep that in mind there that these classes or these types really are blueprints defining how objects can behave in our program what methods we can use on them what operations or operators we can use with them it's a blueprint defining the behavior that's really the key thing to think about classes are just blueprints that define how objects behave and you can obviously have many objects of the same type or of the same class so now though let's create a class let's go ahead and say class we can just do a really simple class maybe like person and we'll define in a nit in here we don't need to do that say define underscore underscore in it underscore underscore and quite simply we'll just take a name right and then we'll say dot name is equal to name okay so we've created this person class this is great and we now know that we can do something like x is equal to person and then we can give it a name say like tim if we run our program no problem this works totally fine however why is it that we can write this syntax how does python actually create a new class that is a person class well one thing i want to show you here is that if i type or sorry print the type of x we get main.person so the reason it's saying main is because the module in which you run the python code in is called main so whatever module is executed its name is kind of main and then we say dot person just to kind of signify that the person class is inside of the main module that's great that's pretty straightforward i'm sure that's not confusing everyone however what happens when i look at the type of the class right so now notice i've not created an instance of this class i'll delete that i'm looking at what the type of the actual class itself is and when i do this notice we get class type now that's kind of strange because when we think of creating a class we think of creating a new type right we're creating this person type and we can create objects of type person but it turns out the classes themselves are objects that are of the type type so i understand that that's confusing but there is actually a blueprint above our object or above our class story that defines how we can create a class so just like this is a blueprint for the person objects there is actually a blueprint for creating classes just like there is a blueprint for creating functions right if i define foo maybe we take an x here and then we print x i think many of you have probably seen this before but i can print the type of foo oops and i see that this is class function so there is a blueprint that allows me to define functions and there is a blueprint that allows me to define classes now since there is this other type this type type and notice we're using this type function right here this means that this is not actually the only way that we need to create a class and i'm going to show you now kind of the advanced behavior of classes and what you can do when you understand the fact that a class is of type type so let me erase all of this and what i'm going to show you here is how i can create this exact same class without using this high level fancy syntax and the way we do this is we use something called type so what i'm going to do is create some variable let's just call this new underscore class okay and this is going to be equal to type we've used this function before but it turns out that this function can not only give you the type of something it can allow you to create a new class of type type or a new object of type type which would be a class so the three arguments that go to this function here are the following they are the class name so in this case my class name is going to be person any of the what is a base class is sorry for this class so anything this class is going to inherit from would go right inside of here and then all of the attributes on this class so attributes of a class are things like methods class methods static methods so on and so forth class variables those are all attributes of a class and so what i'm going to do here is i'm going to create a function i'm going to call this function person underscore a net what this function is going to do is take in self and it's going to say actually sorry it's going to take itself and it's going to take a name and it's going to say self.name is equal to name notice this is the same as the init function right here okay so we have this init function what i'm going to do now is create an attribute of this class which is the init method okay so i'm going to say init and then this is going to point to the person init now walk through this slowly in a minute but what i've actually just done here with new class this line right here has created this exact same person class so sorry it would be these three lines here but these three lines are equivalent to this right here and i'll show you what i mean in a second so what this is actually done is it's created a class called person it has no base classes and it has one attribute which is the init method so double underscore init double underscore and that is equal to this function right here so you can imagine this is me kind of mapping this init method to this function that we've defined and now what i can do is i can actually use this new class variable to create an object of a type person so let me actually just comment this out uh what do i want to do here oops i'm in the wrong programming language for that okay so let's just comment this out and what i'm going to do is say that x is equal to new class and then i'm going to type in the name of my person i'm going to say 10 and then i'm just going to simply go here and print and this will be x dot name okay so when i do this you're going to see that this works and this is very strange don't get me wrong what we've done is we've stored the class person in the variable new class and then we've created an object of type person which we do by initializing new class and then we've looked at the name of that person there you go now if i want to actually look at the name of this new class what i can do is i can print new underscore class dot underscore underscore name underscore underscore oops and if i do this oops new class or any one more s here you're going to see that this new class variable is actually the person class so hopefully this isn't confusing you too badly but this is how you can actually create a class using this type function and that is because again there is a blueprint above our kind of prebuilt in classes here that tells you how to define a class now since that is the case since there is this blueprint we can do these very advanced things like this where we dynamically create a class we can use this type function we can make a class name we can give any parent classes and then we can give all of these attributes now let me show you how you would add a method to this class so we'll leave these lines here what i'm going to do is say define say name this is going to take in self and what this is going to do is print self.name okay so now what i'm going to do is i'm going to hook up this method here so i'm going to say ok the method say underscore name is equal to a function and this is say underscore name now what i've done is i've allowed myself to use this say name method whenever i call dot say name what that's going to do is called this function right here because i've kind of hooked them up in this way so now rather than just printing x dot name what i can do is i don't even need to say print actually i can just say x dot say underscore name and then notice it says tim so that is how you would go about creating a method now we've already seen how you can add actual attributes or properties to this class which is by simply uh creating the initialization sorry so in the initialization right i have myself i have my name and then what i could do after here is i could take other attributes as well maybe like age and i could say self dot age equals age and these are kind of the instance variables associated with the class defined in this way but the whole point of me showing this to you is that this is exactly equivalent to me doing this in this class syntax and what happens in this class syntax is the python interpreter actually goes through parses all of these methods which are really just functions inside of the class right and then uses this type function to create the class in the way in which we're manually doing it down here so here it's just kind of the you know short form syntax essentially this is the nice way the pretty way of doing things but you can go right down to kind of the the bare bones level and create the class on your own so if i wanted to make these classes equivalent then i would need to do my method say name again this would need to take self and then i would need to just print self.name and now my person class here and my person class here are the exact same so you might be asking me now why would i ever want to do that why did you just spend 10 minutes showing this to me this seems cool but it's like relatively useless i'm never going to do this now chances are you probably never will do this right this is something that's very very specific and that is not a common thing to be doing in python programming and only very very advanced people actually kind of mess with this type of stuff but the idea here is that this now allows you with this knowledge to actually implement much more advanced behavior in python and where this would lead to if i were to continue going with this explanation is something called metaclasses now i'm not going to explain metaclasses in this video because i have an entire video going through metaclasses again you can find that in the expert python tutorial series but since we now know that the class person is of type type what that means is that i can create a class that actually is a subclass of class type and use that class to create new classes so this is kind of weird but i can make a class like class create class and i can just put type here now what i'm doing is i'm actually subclassing type right i'm creating a class that inherits from type and now what i can do is i can change the behavior of the type class some of it at least i can hook into and modify and overload different behavior and i can actually change the way in which classes are created and this means that now when i want to create a new class rather than using type i would use this create class thing so if i just put a pass here and i use create class like that you're going to see that this all works the exact same because what i've done is i've created the blueprint for my class right i've said okay i'm going to have a new blueprint now it is a subclass of type so whatever type does this will do and then in here i could go in and i could change how type actually works and i can then put constraints on the modification of classes or the creation of classes and i could change how a class was actually constructed what methods are called first is the init method called first is the call method called first is the new method called first if you know what those are if you don't know what those are don't worry but it allows you to do very very advanced and interesting things so i think i'm going to leave the video at that i'm sure this last part was maybe a little bit of a brain explosion for some of you guys because this is some pretty advanced stuff let me know what you guys think of this if you want to see more advanced syntax and concepts in python do let me know i usually stay away from them just because i know a lot of you guys are beginners or intermediate programmers but if there's a demand of course i'm happy to make some more videos about this topic regardless i hope you guys enjoyed if you did make sure to leave a like subscribe to the channel and again you can check out that expert python tutorial series learn more about this stuff you
