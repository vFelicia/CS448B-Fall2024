With timestamps:

00:08 - hello everybody and welcome back to the
00:10 - flutter tutorial
00:11 - so in today's video what we're going to
00:13 - be doing is actually adding google
00:15 - authentication and google sign-in to our
00:17 - flutter application
00:18 - so we're going to replace our current
00:20 - login screen which is just you know
00:22 - enter a name
00:23 - with an actual button that says sign in
00:24 - with google that will bring up the
00:26 - google sign-in
00:27 - someone can then sign in from there and
00:29 - they will stay signed in until they sign
00:31 - out or they reinstall the app or
00:32 - whatever it is
00:33 - but regardless that's what we're going
00:35 - to be working on so let's go ahead and
00:36 - get started
00:38 - so we had a bunch of setup we did in the
00:40 - last video related to getting firebase
00:42 - working with our app
00:43 - assuming that you guys have done that
00:45 - we're pretty much ready to go there's a
00:47 - few small steps we need to follow
00:49 - one thing on the firebase website but it
00:51 - shouldn't take us more than a few
00:52 - minutes
00:53 - so we just need to go to this
00:54 - pubspec.yaml file and there's two
00:56 - packages that we need to add that we're
00:58 - going to be using here
00:59 - so this is firebase authentication
01:02 - and google sign in so just simply add
01:05 - these two lines
01:06 - into the dependencies section of your
01:08 - pubspec.yaml file
01:10 - these are just packages or plugins or
01:12 - whatever you want to call them that need
01:13 - to be downloaded so that we can use
01:15 - um use them within our file right sorry
01:18 - within our
01:19 - project so we can have you know firebase
01:21 - auth create a firebase instance
01:23 - actually sign in with google we just
01:24 - need these two things so put them in
01:26 - here
01:26 - save the file it should automatically
01:29 - run a flutter pub
01:30 - get if for some reason it doesn't run
01:32 - that in your nvs code you can type pub
01:34 - and then get packages
01:36 - otherwise just run that command in your
01:39 - actual
01:39 - terminal or in your command line so
01:41 - flutter pub get
01:42 - and that should get all the packages
01:44 - that you need okay now that we're in
01:46 - here what we're actually going to do is
01:47 - preemptively add something i'll talk
01:49 - about
01:50 - or i just show you how to add that after
01:52 - but we're going to comment out where it
01:54 - says
01:54 - assets right here and we're just going
01:56 - to go tab in once
01:58 - put a hyphen and simply type assets with
02:01 - a forward slash
02:02 - the reason we're doing this is because
02:03 - we're going to add a folder actually you
02:05 - can see that i already have it added but
02:07 - i'll go through the steps again
02:09 - into our root directory here that says
02:11 - assets and that's going to store an
02:12 - image that we're going to need to use
02:14 - which is actually a
02:15 - logo for google so if i click on this
02:17 - assets folder here
02:19 - i added this so if you guys don't have
02:20 - that then just make a new folder
02:22 - so assets like that and then you're
02:24 - going to download a logo from the link
02:26 - in the description which i'll show you
02:28 - in just one second
02:29 - and throw that inside of the assets
02:31 - folder so let me just go here
02:32 - you can see i actually have the page
02:34 - open oops this link will be in the
02:36 - description
02:37 - simply download this just click the
02:38 - download button then grab that and drag
02:41 - that into the assets folder here and
02:43 - just make sure you name it google logo
02:45 - and it doesn't have you know like a
02:47 - bracket 1 or bracket 2 or whatever on
02:49 - the end of it well it can have that but
02:51 - if it does just remember that you have
02:52 - that
02:52 - because we're going to need to reference
02:54 - this name later on but anyways we've
02:56 - just linked the assets folder up so
02:57 - we're all good here
02:58 - now we need to do a few other things in
03:00 - our android folder
03:01 - so we're going to go into our android
03:03 - folder we're going to go to
03:04 - settings.gradle
03:05 - and we actually need to modify this file
03:07 - just to fix a bug that's happening with
03:09 - the current version of these two
03:10 - packages
03:11 - so i don't actually know why this bug
03:13 - has occurred or exactly what's going
03:14 - wrong
03:15 - all i know is that we're not going to be
03:17 - able to run this app unless we make the
03:18 - following edition
03:19 - so we just need to copy some code which
03:22 - again i will have in the description or
03:23 - some way for you to access it in the
03:25 - description
03:26 - into this file so you can see that from
03:28 - line 17 to 29 this is new code i've just
03:31 - copied this in from my other screen
03:33 - again this will be in the description
03:34 - but grab it and paste it in here
03:36 - this will just fix a bug hopefully that
03:38 - will actually make this work properly
03:40 - for us
03:40 - i will also leave a link to the github
03:42 - issue if you have you know questions
03:44 - about why we need to add this
03:45 - again i'm not sure all i know is when i
03:47 - added this project worked
03:49 - so that's good all right next what we're
03:52 - gonna do is we're going to go to the app
03:54 - level build.gradle file so within
03:56 - android app
03:57 - build.gradle and we're simply going to
03:59 - go here to the min sdk version and
04:01 - change this to 21.
04:03 - the reason for this is again the
04:05 - packages we're using don't work properly
04:07 - under
04:07 - the sdk version of 21 so just to avoid
04:10 - any errors we're going to change the
04:12 - minimum
04:12 - version to 21. just note that this will
04:15 - mean that your app will not be able to
04:17 - run
04:17 - on any sdk version lower than 21 that's
04:21 - fine because i'm pretty sure probably
04:22 - like 99 of devices are above
04:25 - sdk version 21 already but if you do
04:28 - care about that few percent
04:29 - then you're gonna have to find another
04:30 - workaround this was my work around for
04:32 - the issue that i was having
04:34 - uh so looking through my kind of
04:35 - instruction sheet on my other screen i
04:37 - think
04:38 - that's all we need to do and now what we
04:40 - should be able to do is
04:42 - actually go ahead and start working with
04:44 - um the google sign-in
04:46 - so we're going to go actually to our
04:47 - firebase console
04:49 - so just go to firebase console like that
04:53 - firebase console and we're going to go
04:55 - to our project
04:56 - so i'm going to get to my project i'm in
04:58 - the wrong account right now and then
04:59 - i'll show you how we can actually set up
05:00 - the different sign in methods
05:02 - okay so i'm in my message app right here
05:04 - i'm in the firebase console
05:06 - once you're inside of your app you're
05:07 - going to go to the authentication tab
05:09 - and then you're going to go to sign in
05:11 - method so here
05:13 - you can see i've actually already
05:14 - enabled a sign-in method
05:16 - i just clicked on the one that i wanted
05:17 - so in this case it was google
05:19 - it asked me a few different things here
05:20 - it asks you to put in your support email
05:22 - which i'm going to blur for myself
05:24 - and a few other things as well but just
05:26 - fill this in we've already done the sh1
05:29 - fingerprint thing that's what we did in
05:30 - the last video simply just click save
05:33 - after you select your support email
05:35 - and then the supported signup method
05:37 - which is google
05:38 - will be working so that's all we
05:39 - actually need to do is just click on
05:41 - google and just
05:42 - follow through the steps so that it's
05:43 - set up and working if you do care to add
05:46 - some other things like twitter facebook
05:48 - you can do that
05:49 - but again i'm not going to really be
05:50 - showing us how we set that up
05:52 - now let's go back to authentication here
05:54 - you can see it says
05:56 - what my current user is so right now in
05:58 - this app we have one user
05:59 - which is just me i was just testing this
06:01 - out previously so that's why i have that
06:03 - you won't have any users here
06:05 - and then you can see my unique user id
06:08 - so just
06:08 - a note here whenever you're looking at
06:10 - users and you're trying to identify
06:12 - unique users you're going to use this
06:13 - uid
06:14 - which is just their unique identifier
06:16 - and yeah that's just
06:18 - a good note so if you need to identify
06:20 - users for some reason just in case i
06:21 - don't say this later
06:22 - use their uid all right so now we've
06:25 - have that all set up within firebase
06:27 - again all i'm asking you to do is just
06:28 - go to sign in
06:30 - click on google follow through these
06:31 - steps and just say that that is
06:33 - enabled and then we should be good to go
06:35 - okay so i'm going to close that out now
06:37 - and i'm going to go back into my files
06:39 - here so i'm going to go into lib
06:40 - and i'm going to make a new file called
06:43 - auth.dart
06:44 - now this is going to be the file that
06:46 - handles all of our authentication
06:48 - related stuff
06:49 - this is actually going to be a fairly
06:51 - large file with just two methods
06:53 - pretty much google sign in and google
06:55 - sign out so when we want to sign in we
06:57 - will call the google sign in method
06:59 - that will prompt and bring up the google
07:01 - sign in page then the user will sign in
07:03 - and it will return to us what user
07:06 - actually signed it
07:07 - then we have a sign out all that we'll
07:08 - do is just simply sign out the current
07:10 - user
07:11 - now google handles all of the hashes all
07:13 - of the password stuff
07:14 - which is really nice which means we
07:16 - don't have to have like you know a sign
07:17 - up here page or anything like that
07:19 - we can just say sign in with google if
07:21 - you don't have a google account just
07:22 - make a google account and then you can
07:24 - sign it get started
07:25 - so the first thing we're going to do is
07:27 - we're going to import package
07:29 - colon slash and then firebase
07:32 - and this is going to be firebase auth
07:34 - slash firebase auth.dart
07:37 - so we need this package you can guess
07:39 - what this is it's simply just all the
07:41 - stuff related to firebase and
07:42 - authentication next we need to import
07:44 - the google sign
07:45 - in which is going to handle actually uh
07:47 - you know popping up that google sign in
07:49 - window and everything
07:50 - so we're gonna go package colon google
07:52 - sign and then i believe that's google
07:54 - sign in
07:55 - slash google sign in dot dart
07:58 - so you should get those auto completions
08:00 - um because this is really annoying to
08:02 - type if you don't have those but
08:03 - these are the two packages we need next
08:06 - we're going to set up a firebase
08:07 - instance and a google sign-in instance
08:09 - so these are what we're going to use
08:11 - as the main instances to handle all the
08:14 - stuff related to firebase and then
08:15 - obviously all the stuff related to
08:16 - google
08:17 - kind of hard to give a better
08:18 - explanation than that but i'm just going
08:20 - to say final
08:21 - firebase off and i'm just going to go
08:23 - underscore auth
08:25 - equals firebaseauth.instance
08:29 - so getting an instance of firebase and
08:31 - then we're going to say
08:32 - final google sign in we're going to just
08:35 - call this
08:37 - google sign in equals google sign in and
08:40 - this is a class
08:41 - so we can simply instantiate it like
08:44 - that okay so now we have two instances
08:46 - let's see what this is telling us
08:48 - the declaration underscore auth isn't
08:49 - referenced okay that's fine
08:51 - we will use that in just a second all
08:53 - right so next we're going to make a
08:54 - function
08:55 - this is going to be a future if you're
08:57 - familiar with asynchronous programming
08:58 - essentially what this means
09:00 - is this is going to be an async function
09:02 - that will
09:03 - not immediately execute so just a really
09:06 - basic explanation for anyone that
09:07 - doesn't understand
09:08 - what async means asynchronous just means
09:11 - that this operation will not
09:12 - block or stop the other operations going
09:15 - on in the app so let's say i'm like
09:17 - waiting for someone to sign in my app
09:20 - won't freeze while we wait for it to
09:21 - sign in
09:22 - my app will be able to run and then as
09:24 - soon as the sign in happens an event
09:25 - will be called and something will happen
09:27 - so you will kind of see how this works
09:29 - but a future is just telling us that hey
09:31 - you might not immediately have this
09:32 - value you might have to wait a few
09:34 - seconds and handle when this feature is
09:36 - done or it's been resolved
09:38 - you'll get it as we go through but
09:40 - that's just kind of my basic explanation
09:42 - here of async there's
09:43 - a lot more to talk about when it comes
09:44 - to that so we're going to say future
09:46 - firebase user this means we are going to
09:49 - return
09:50 - a promise if you're familiar with kind
09:51 - of javascript related lingo
09:53 - that is going to resolve and give us a
09:55 - firebase user
09:57 - once it is done so future firebase user
09:59 - we're going to say sign in
10:01 - with user like that and this is going to
10:04 - be an async function so we're going to
10:05 - write async
10:07 - and then we'll open and close the
10:08 - brackets now what we're going to do
10:10 - inside of here
10:11 - is get our google sign in account so
10:13 - just so you know all the stuff i'm
10:15 - showing here is just from this blog post
10:17 - i found that
10:18 - really illustrated this stuff well so
10:19 - i'll link that in the description in
10:20 - case you care
10:21 - just copy all the code out but i'll
10:23 - write out with you guys and try to give
10:24 - kind of basic explanations as we go
10:27 - so final google sign in account is going
10:30 - to be
10:31 - google sign in account like that that's
10:34 - going to be the name of the variable
10:36 - and we're going to await google sign in
10:39 - dot sign in awesome
10:42 - okay for the id token what we're going
10:45 - to use is what we've already
10:46 - defined so google sign in
10:49 - authentication dot and then can you
10:51 - guess it's going to be id token
10:53 - this is taking up a lot of space here
10:55 - sorry guys so let's add our semicolon
10:57 - that's better
10:58 - and then for the access token we're
10:59 - going to say this is google sign in
11:02 - authentication
11:04 - dot access token awesome so that's what
11:07 - we need for our auth credential
11:09 - next what we're going to do is we're
11:10 - going to add an auth result which is
11:12 - essentially us authenticating against
11:15 - firebase so now what we've done is we
11:17 - have all the google stuff
11:18 - ready so we've you know got our
11:20 - credential we've got our sign in
11:21 - authentication
11:22 - the users signed in from that ui page
11:25 - and now we're going to take the auth
11:26 - result which we'll get in a second and
11:28 - we're going to use that against firebase
11:30 - in the next few lines of code to
11:31 - actually authenticate the user with our
11:33 - application
11:34 - so final auth result this is going to be
11:37 - called auth
11:38 - result this equals underscore auth which
11:41 - is
11:41 - firebase right so we have auth right
11:43 - here which is the firebase instance
11:45 - and then we're going to say dot sign in
11:47 - with credential
11:48 - and then we use that user credential so
11:51 - now we have credential
11:52 - and is that right uh this needs to be in
11:55 - a way to sorry
11:56 - let's add that right there because this
11:58 - is an asynchronous value
12:00 - so just to kind of clarify this part
12:02 - right here
12:03 - is all the google related stuff so let
12:06 - the user sign in
12:07 - get their authentication get a
12:09 - credential based on that authentication
12:11 - pass that to firebase sign in with that
12:13 - and then authenticate against firebase
12:16 - next we're going to say final firebase
12:19 - user which is the user
12:21 - that we actually want we're going to say
12:22 - that's equal to user underscore auth
12:25 - dot user and sorry this is not off this
12:28 - is
12:28 - auth result okay so i think
12:33 - not underscore just auth result okay so
12:35 - i think we're almost done now so now we
12:37 - actually have a
12:38 - user from this credential now what we're
12:40 - going to do is just make sure that this
12:41 - worked properly
12:43 - so we're going to have an assertion
12:44 - we're going to say assert
12:46 - that not user dot is anonymous
12:50 - so essentially making sure that they
12:51 - actually have a username they actually
12:53 - have a real account they're not an
12:55 - anonymous user
12:56 - and then we're going to say wait that
12:59 - user.getidtoken
13:00 - does not equal null
13:05 - okay and then after this we're gonna say
13:07 - final
13:09 - firebase user current
13:12 - user equals await
13:15 - underscore auth dot get
13:18 - oops is this not why is that not working
13:21 - this should be dot
13:22 - current user there we go okay and then
13:24 - finally we're going to return
13:27 - the user after we go up here and we make
13:31 - sure that this is right so we're going
13:32 - to say assert
13:34 - that current user dot and i think this
13:37 - is i
13:38 - should be uid uh yeah
13:42 - currentuser.uid equals so equals equals
13:46 - user.you
13:49 - okay so the reason i'm doing this is to
13:51 - make sure that
13:52 - our signed in user with firebase is
13:54 - actually the same one that we tried to
13:56 - sign in with so just to summarize here
13:58 - we do all the google related stuff sign
14:00 - in get our authentication result from
14:02 - here
14:02 - then we use firebase to actually sign in
14:04 - with that credential
14:05 - and then we have a user which is the
14:07 - auth result.user so we just want to make
14:10 - sure
14:10 - that this sign in actually leads to the
14:14 - fact that we get
14:15 - authenticated against firebase so then
14:16 - when we call auth.currentuser we want to
14:19 - make sure that we're getting the user
14:21 - that we just signed in with
14:23 - if we're not then something went wrong
14:24 - with this sign in and we'll get an error
14:26 - message because we're doing this
14:27 - assertion so that's
14:28 - kind of just what we're doing here
14:30 - that's like the basics of it
14:31 - again i didn't write all of this this is
14:33 - from the blog post which i'll link in
14:35 - the description but i just wanted to
14:36 - kind of walk through and at least give
14:37 - some basic explanation
14:38 - okay so now that we have that most of
14:40 - the auth stuff is done
14:42 - we just need to change our login page so
14:43 - that it looks a little bit better
14:45 - so we have um this like build thing
14:48 - right here that just allows us
14:50 - essentially to type in our name right
14:51 - and actually if i go to this app
14:53 - it's not even open right now so i can't
14:55 - show you but you remember it was just a
14:57 - little text box and you just say
14:58 - you know what is my name and press enter
15:00 - we don't want that anymore obviously
15:02 - we want it to be the google sign in
15:04 - button so we're gonna need to change
15:05 - this so i'll leave the alignment
15:08 - um yeah should we leave the alignment
15:10 - yeah i'll leave the alignment for now
15:12 - within the body
15:13 - but let me just get rid of all the stuff
15:15 - within the child here
15:18 - so i think that should be it for child
15:21 - and now what we're actually going to do
15:22 - is make another function inside of here
15:25 - that's going to return just the login
15:27 - button and then we'll add a few things
15:28 - to the actual body page itself
15:30 - so we're going to start by inside of our
15:32 - login here inside of the body state
15:35 - we're going to go widget and then we're
15:36 - going to call this one login button or
15:40 - i'll say like google login button
15:42 - like that to be more specific that's
15:45 - going to return a widget that's why i'm
15:46 - defining a widget right there
15:48 - and now what we're going to do is we're
15:50 - going to return
15:51 - and we're going to return a border
15:53 - button
15:54 - or is it a border button sorry it's an
15:56 - outline button is what it's called
15:58 - and within the outline button we're
16:00 - going to define the on press method and
16:01 - all that other stuff so first we'll say
16:03 - on pressed
16:04 - and what this is going to do is actually
16:06 - be this dot click
16:07 - so obviously remove the other button so
16:09 - now we will call this one
16:10 - but we don't need this controller text
16:12 - stuff so we're going to get rid of all
16:14 - this text editing controller
16:15 - and instead of having a string name what
16:18 - i'm going to do is i'm actually going to
16:19 - define a firebase
16:21 - user of user so what's going to happen
16:24 - is we're going to get the user back in
16:26 - here
16:26 - and then from there we can access the
16:27 - user's name we can access their email
16:29 - like anything about them we can access
16:32 - if we actually have that user so inside
16:34 - of the click function
16:36 - what we're going to do is actually
16:37 - handle the google sign in
16:39 - so we need to first import that sign in
16:41 - or sorry this auth
16:43 - from the top here so we're going to say
16:45 - import and then auth.dart
16:48 - so now we should be able to use uh this
16:51 - sign in with user function that we've
16:53 - defined
16:54 - okay so now that we have that we're
16:56 - gonna go sign
16:57 - in with user dot dot dot and then now
17:00 - we're gonna say dot
17:01 - then and inside of here we're going to
17:04 - say user because this is going to return
17:06 - to us a user and then we'll do something
17:08 - inside of here when we get that user and
17:10 - i've just realized that i've called this
17:12 - method sign in with user
17:13 - i actually wanted to call this sign in
17:15 - with google i don't know what i was
17:16 - doing when i was typing this
17:18 - out but let's change this back to say
17:20 - sign in with google because that makes a
17:21 - lot more sense than sign in with user
17:24 - and then we can come back here and
17:24 - modify this so now we have sign in with
17:27 - google
17:27 - dot then what this is saying is when
17:30 - this is done
17:31 - when we've finished all the stuff
17:32 - related to this then we're going to say
17:34 - let's get the result which is going to
17:36 - be user so whatever is returned is
17:38 - what's coming in as user here
17:40 - and then we have an arrow function and
17:41 - we'll define what we want to do so what
17:43 - i actually want to do
17:45 - is i want to push to the next page
17:48 - and instead of going this dot name what
17:50 - i'm going to do is i'm going to say
17:51 - user dot display name so we're going to
17:55 - pass them the display name of the user
17:57 - we'll get rid of that semicolon and
17:58 - we'll actually say this dot
18:00 - user equals user just to store it in the
18:03 - state
18:04 - and we don't need a semicolon we need a
18:06 - comma
18:07 - all right so now we have the click
18:09 - method handled and we're just going to
18:10 - sign in with google
18:12 - you'll see all of that stuff work when
18:14 - it's working in just a second
18:15 - we'll get the user and then we'll
18:16 - actually go call my home page with
18:19 - user.displayname
18:20 - which means instead of just passing a
18:22 - string or sorry instead of passing the
18:23 - string that we would have typed in
18:25 - before
18:25 - now we'll just pass the display name of
18:27 - the user now for the google login button
18:30 - uh what we need to do is add a bunch of
18:32 - styling and add the image and all of
18:34 - that so let me just go over to my other
18:35 - screen here because this is going to be
18:37 - a bit of a long thing to type out we're
18:40 - going to start by defining the shape so
18:42 - the shape is going to be a rounded
18:44 - rectangular border so let's find that
18:47 - rounded rectangular border and then what
18:49 - we're going to do is say border radius
18:51 - is going to be equal to
18:53 - border circular this is going to make it
18:57 - a kind of rounded edge button
18:59 - and i'm going to go with 45 for the
19:00 - radius so this is just telling us how
19:02 - much do you want the corner of this
19:04 - button
19:04 - to actually be rounded i want it to be
19:06 - rounded 45 degrees
19:07 - so now that we have the shape what else
19:09 - do we need
19:10 - let's see we're gonna add a splash color
19:13 - so what color should this button splash
19:15 - when we press it
19:16 - uh let's go with colors dot gray
19:20 - okay and next we're gonna add our border
19:23 - side so essentially what do we want the
19:25 - border of this button to look like
19:26 - because it is an outline button in here
19:29 - what i'm going to do is say
19:30 - border side and then we're going to say
19:33 - color
19:34 - and this is going to be colors
19:37 - colors dot gray again so we're going to
19:40 - go with that gray style
19:41 - and then we're going to say the child of
19:43 - this outline button
19:44 - is actually going to be that google
19:46 - image as well as some text that says
19:48 - sign in with google
19:49 - so for the child we're going to say
19:51 - padding to start
19:53 - and padding inside of here we're going
19:55 - to say
19:57 - padding edge insets dot
20:00 - and then from left left top right
20:03 - bottom that's what this stands for we're
20:05 - going to say 0
20:07 - 10 0
20:12 - and 10. so just padding off the top and
20:13 - the bottom we don't actually want to pad
20:15 - on the left and right hand side
20:17 - next what we'll do is inside of
20:20 - padding we need to put child so let's
20:23 - add that
20:24 - here uh am i doing this properly i think
20:27 - so yeah okay so child
20:29 - and what do we want for the child well
20:31 - we want a row and this row is going to
20:33 - have the google icon as well as the text
20:35 - beside it so inside of the row
20:37 - what we're going to do is start by
20:38 - saying min axis alignment and i
20:41 - think what is this this is main axis
20:44 - alignment
20:45 - dot no not alignment sorry yeah main
20:48 - access
20:48 - alignment dot center and then we're
20:51 - going to say
20:52 - min axis or what is this one main axis
20:55 - size sorry
20:56 - main axis size and this is going to be
20:59 - main access
21:01 - size dot min okay so what i just did
21:04 - here is i'm pretty much saying that i
21:05 - want this to all be aligned in the
21:07 - center
21:08 - and then i want it to be as small as
21:09 - possible so rather than filling the
21:11 - entire container
21:12 - be as small as you possibly can and just
21:14 - fit everything
21:15 - in that size that's also why i've added
21:17 - the padding here so we're going to pad
21:18 - on the top and on the bottom
21:20 - so that this will fill up a little bit
21:22 - more room because this is going to take
21:23 - up
21:24 - you know the minimum amount of space
21:25 - that it possibly can so now that we have
21:27 - that we're going to say
21:28 - children this obviously needs to be a
21:31 - widget list
21:32 - and inside of this list we're going to
21:33 - add all the stuff that we want okay so
21:35 - now we're going to add the google logo
21:37 - and that text so we need an image here
21:39 - so we're going to say image
21:40 - and then inside of image we're going to
21:42 - say image again
21:43 - and then asset image which means look in
21:46 - that asset folder
21:48 - and we're going to say this is asset or
21:50 - assets sorry slash and then google
21:52 - underscore
21:53 - logo dot and i'm pretty sure that was
21:55 - png
21:56 - so that's all we need there and then we
21:57 - can define the height that we want this
21:59 - to be
21:59 - i want this to be 35 pixels high but
22:02 - sorry that's not inside of image
22:05 - or sorry that's one side of asset image
22:06 - that's inside of image
22:08 - so we're going to say height 35 so just
22:10 - make that 35 pixels high
22:12 - next we'll add the text so we're going
22:14 - to add some padding first of all so we
22:16 - don't squish it directly beside
22:18 - the um the image there and we'll say
22:20 - padding
22:22 - and then we'll go edge insets dot
22:26 - only and only means okay we only want
22:28 - one side of padding and we'll go padding
22:31 - on the left side
22:32 - we'll pad that by 10 pixels and then
22:35 - we'll add the child of the padding
22:36 - which is going to be the text that we
22:38 - want to add so we'll simply say text
22:40 - and we'll say sign in with
22:44 - google and actually i'll make this a
22:45 - lowercase w and within the text i
22:48 - think can i add a style i'm pretty sure
22:51 - i can
22:51 - we're gonna go style and then we're
22:53 - gonna go text
22:55 - style like that and for the text style
22:58 - i'm just gonna simply make this
23:00 - uh the color gray so we'll say color
23:03 - and then this is gonna be colors.gray
23:06 - and then sorry last thing we'll do is
23:07 - change
23:08 - the font size just so that it aligns
23:09 - with everything else so for the font
23:11 - size we're going to go
23:12 - font size and i think i'm going to go
23:14 - with 25
23:15 - for that that might be a little bit too
23:17 - big but we will see
23:19 - okay so now we've pretty much done the
23:21 - google login button it's inside of its
23:23 - own function but to use this now
23:24 - all we have to do is just simply add it
23:26 - as a child so let's just say google
23:28 - login button like that i'm going to add
23:30 - that to our build
23:31 - so now the child of our center alignment
23:34 - will be this button
23:35 - and let's see how this looks when we
23:36 - actually load up our app so i'm going to
23:38 - press f5
23:40 - see if i broke anything or not which is
23:43 - likely based on how much we just did
23:44 - without testing
23:45 - but let's see what this is looking like
23:48 - all right so there we go we have sign in
23:49 - with
23:50 - google we can see this button is popping
23:52 - up right in the middle of the screen
23:53 - and we have that google logo some nice
23:55 - padding and then the text
23:57 - so let's see what happens when i press
23:59 - this
24:00 - so i press that and what happens
24:03 - it immediately actually just brings me
24:05 - in now the reason it did that is because
24:07 - i've already
24:08 - signed in with google before i'm going
24:10 - to show us how we can actually
24:12 - sign out in just a second but if that's
24:14 - your first time pressing that
24:16 - assuming that worked you should have
24:18 - actually been brought to a google sign
24:20 - in page where you would have put your
24:21 - email and password and all of that stuff
24:23 - and you would have actually signed it
24:24 - but just to prove this to you watch what
24:26 - happens when i type hello
24:28 - you see it actually shows my name from
24:31 - my google
24:32 - account that i'm signed in with so i can
24:34 - tell that i'm signed in because it's
24:35 - showing the correct name
24:36 - when i'm actually making one of these
24:37 - messages so again sign in with google
24:40 - if that works you're good to go and
24:42 - that's why we use this as well it can
24:44 - remember who's been signed in or not
24:46 - you don't need to constantly put in your
24:47 - username or password
24:49 - now last thing we'll do is simply write
24:51 - a function that will actually let us
24:53 - sign out
24:53 - so we can test to see if this is working
24:55 - properly so i'm just going to add one
24:57 - here
24:57 - and wow dart analyzer has been
24:59 - terminated sure we can restart that
25:01 - that's fine
25:02 - and i'm just going to say this is a void
25:04 - i'm going to say sign out to google
25:06 - and we'll make this an async function
25:08 - like that and all we're going to do is
25:10 - say await
25:12 - and this should be google sign in dot
25:14 - sign
25:15 - out that's all we need to do and that's
25:18 - going to sign our user out so wait
25:20 - save changes okay great okay so now
25:23 - we've made the sign
25:24 - out method and i want to actually use
25:25 - the sign out just to make sure that that
25:27 - is working so i'm actually just going to
25:28 - go into this login page
25:30 - i'm going to go inside of my body here
25:33 - and i'm going to make
25:34 - it's called a life cycle method that
25:36 - just essentially means as soon as this
25:38 - is loaded
25:38 - we always do this so it's called a knit
25:41 - state so sorry we're going to say
25:42 - at override we're going to say void
25:45 - init state like that okay so what this
25:49 - method will actually do
25:50 - is automatically run as soon as this is
25:53 - initialized so as soon as this page gets
25:54 - loaded or this body gets loaded
25:56 - this will run so this is a great
25:58 - opportunity to put anything we want to
26:00 - happen before the app
26:01 - actually renders inside of here which in
26:03 - this case i want them to be logged out
26:05 - before we actually even render this page
26:07 - so what i need to do though is i do need
26:09 - to call super dot init state
26:11 - there's just a rule here with this init
26:14 - state method that you have to call the
26:15 - super init state method which means
26:17 - that comes from the inherited class here
26:19 - we have to call that already
26:21 - so we'll call super dot init state and
26:23 - then what we'll do is simply log out so
26:25 - we can just say auth
26:27 - dot or sorry not we don't have to call
26:29 - auth we can just say
26:30 - log out google or what did i call this
26:33 - this method sign out google sorry so
26:35 - let's go
26:37 - sign out google
26:41 - like that okay so that should work sign
26:44 - out google so when we initialize the
26:46 - state we will sign out and then that
26:47 - will force us to sign back
26:49 - in so we saved that but let me just hot
26:51 - reload this to make sure
26:53 - and let's go here to sign in with google
26:55 - and now
26:56 - it did not sign us out so this is
26:59 - interesting let me reload this app
27:01 - actually
27:02 - and see if anything's going on here okay
27:05 - so there we go
27:06 - so now it actually did sign us out i
27:08 - just had to reload the app i think for
27:09 - that to actually take place
27:11 - this is saying choose an account because
27:13 - it automatically signed us out but this
27:14 - is saving the account that i had signed
27:16 - in with
27:17 - so we can make this kind of the standard
27:18 - that whatever this app gets reloaded we
27:21 - sign the user out and then they have to
27:22 - choose what account they want to use to
27:24 - sign back in
27:24 - so let me pick this account which i'm
27:26 - going to have blurred just you guys
27:27 - don't see my email
27:28 - but i'll do that and now that signs us
27:31 - in
27:32 - and let's go ahead and type hello and we
27:34 - can see my name is popping up and
27:35 - everything is working properly
27:37 - now if i go back here and click sign in
27:39 - it's automatically signing me back in
27:41 - because sorry i think i might have made
27:42 - a mistake here the init state will
27:44 - only run when this app restarts so the
27:47 - first
27:48 - time that this login page actually gets
27:50 - loaded will be when we initialize the
27:52 - state
27:53 - we can manually call this if we want to
27:54 - or manually call sign out
27:56 - but for now i think the method that we
27:57 - currently have is fine and we're going
27:59 - to go with that
28:00 - so that being said this has been a long
28:02 - video but i hope this at least helps you
28:03 - get authentication set up and working
28:06 - again i'm no pro at all this stuff but
28:07 - i'm just learning along with you guys
28:09 - and
28:09 - i think this is cool and we have a lot
28:11 - to do now uh with having our
28:13 - authentication in fact in the next video
28:15 - we'll probably try to store those
28:16 - messages in a database
28:18 - and i'm looking forward to that so if
28:19 - you guys enjoyed the video make sure you
28:20 - leave a like
28:21 - subscribe to the channel and of course i
28:23 - will see you again in another flutter
28:28 - tutorial
28:32 - you

Cleaned transcript:

hello everybody and welcome back to the flutter tutorial so in today's video what we're going to be doing is actually adding google authentication and google signin to our flutter application so we're going to replace our current login screen which is just you know enter a name with an actual button that says sign in with google that will bring up the google signin someone can then sign in from there and they will stay signed in until they sign out or they reinstall the app or whatever it is but regardless that's what we're going to be working on so let's go ahead and get started so we had a bunch of setup we did in the last video related to getting firebase working with our app assuming that you guys have done that we're pretty much ready to go there's a few small steps we need to follow one thing on the firebase website but it shouldn't take us more than a few minutes so we just need to go to this pubspec.yaml file and there's two packages that we need to add that we're going to be using here so this is firebase authentication and google sign in so just simply add these two lines into the dependencies section of your pubspec.yaml file these are just packages or plugins or whatever you want to call them that need to be downloaded so that we can use um use them within our file right sorry within our project so we can have you know firebase auth create a firebase instance actually sign in with google we just need these two things so put them in here save the file it should automatically run a flutter pub get if for some reason it doesn't run that in your nvs code you can type pub and then get packages otherwise just run that command in your actual terminal or in your command line so flutter pub get and that should get all the packages that you need okay now that we're in here what we're actually going to do is preemptively add something i'll talk about or i just show you how to add that after but we're going to comment out where it says assets right here and we're just going to go tab in once put a hyphen and simply type assets with a forward slash the reason we're doing this is because we're going to add a folder actually you can see that i already have it added but i'll go through the steps again into our root directory here that says assets and that's going to store an image that we're going to need to use which is actually a logo for google so if i click on this assets folder here i added this so if you guys don't have that then just make a new folder so assets like that and then you're going to download a logo from the link in the description which i'll show you in just one second and throw that inside of the assets folder so let me just go here you can see i actually have the page open oops this link will be in the description simply download this just click the download button then grab that and drag that into the assets folder here and just make sure you name it google logo and it doesn't have you know like a bracket 1 or bracket 2 or whatever on the end of it well it can have that but if it does just remember that you have that because we're going to need to reference this name later on but anyways we've just linked the assets folder up so we're all good here now we need to do a few other things in our android folder so we're going to go into our android folder we're going to go to settings.gradle and we actually need to modify this file just to fix a bug that's happening with the current version of these two packages so i don't actually know why this bug has occurred or exactly what's going wrong all i know is that we're not going to be able to run this app unless we make the following edition so we just need to copy some code which again i will have in the description or some way for you to access it in the description into this file so you can see that from line 17 to 29 this is new code i've just copied this in from my other screen again this will be in the description but grab it and paste it in here this will just fix a bug hopefully that will actually make this work properly for us i will also leave a link to the github issue if you have you know questions about why we need to add this again i'm not sure all i know is when i added this project worked so that's good all right next what we're gonna do is we're going to go to the app level build.gradle file so within android app build.gradle and we're simply going to go here to the min sdk version and change this to 21. the reason for this is again the packages we're using don't work properly under the sdk version of 21 so just to avoid any errors we're going to change the minimum version to 21. just note that this will mean that your app will not be able to run on any sdk version lower than 21 that's fine because i'm pretty sure probably like 99 of devices are above sdk version 21 already but if you do care about that few percent then you're gonna have to find another workaround this was my work around for the issue that i was having uh so looking through my kind of instruction sheet on my other screen i think that's all we need to do and now what we should be able to do is actually go ahead and start working with um the google signin so we're going to go actually to our firebase console so just go to firebase console like that firebase console and we're going to go to our project so i'm going to get to my project i'm in the wrong account right now and then i'll show you how we can actually set up the different sign in methods okay so i'm in my message app right here i'm in the firebase console once you're inside of your app you're going to go to the authentication tab and then you're going to go to sign in method so here you can see i've actually already enabled a signin method i just clicked on the one that i wanted so in this case it was google it asked me a few different things here it asks you to put in your support email which i'm going to blur for myself and a few other things as well but just fill this in we've already done the sh1 fingerprint thing that's what we did in the last video simply just click save after you select your support email and then the supported signup method which is google will be working so that's all we actually need to do is just click on google and just follow through the steps so that it's set up and working if you do care to add some other things like twitter facebook you can do that but again i'm not going to really be showing us how we set that up now let's go back to authentication here you can see it says what my current user is so right now in this app we have one user which is just me i was just testing this out previously so that's why i have that you won't have any users here and then you can see my unique user id so just a note here whenever you're looking at users and you're trying to identify unique users you're going to use this uid which is just their unique identifier and yeah that's just a good note so if you need to identify users for some reason just in case i don't say this later use their uid all right so now we've have that all set up within firebase again all i'm asking you to do is just go to sign in click on google follow through these steps and just say that that is enabled and then we should be good to go okay so i'm going to close that out now and i'm going to go back into my files here so i'm going to go into lib and i'm going to make a new file called auth.dart now this is going to be the file that handles all of our authentication related stuff this is actually going to be a fairly large file with just two methods pretty much google sign in and google sign out so when we want to sign in we will call the google sign in method that will prompt and bring up the google sign in page then the user will sign in and it will return to us what user actually signed it then we have a sign out all that we'll do is just simply sign out the current user now google handles all of the hashes all of the password stuff which is really nice which means we don't have to have like you know a sign up here page or anything like that we can just say sign in with google if you don't have a google account just make a google account and then you can sign it get started so the first thing we're going to do is we're going to import package colon slash and then firebase and this is going to be firebase auth slash firebase auth.dart so we need this package you can guess what this is it's simply just all the stuff related to firebase and authentication next we need to import the google sign in which is going to handle actually uh you know popping up that google sign in window and everything so we're gonna go package colon google sign and then i believe that's google sign in slash google sign in dot dart so you should get those auto completions um because this is really annoying to type if you don't have those but these are the two packages we need next we're going to set up a firebase instance and a google signin instance so these are what we're going to use as the main instances to handle all the stuff related to firebase and then obviously all the stuff related to google kind of hard to give a better explanation than that but i'm just going to say final firebase off and i'm just going to go underscore auth equals firebaseauth.instance so getting an instance of firebase and then we're going to say final google sign in we're going to just call this google sign in equals google sign in and this is a class so we can simply instantiate it like that okay so now we have two instances let's see what this is telling us the declaration underscore auth isn't referenced okay that's fine we will use that in just a second all right so next we're going to make a function this is going to be a future if you're familiar with asynchronous programming essentially what this means is this is going to be an async function that will not immediately execute so just a really basic explanation for anyone that doesn't understand what async means asynchronous just means that this operation will not block or stop the other operations going on in the app so let's say i'm like waiting for someone to sign in my app won't freeze while we wait for it to sign in my app will be able to run and then as soon as the sign in happens an event will be called and something will happen so you will kind of see how this works but a future is just telling us that hey you might not immediately have this value you might have to wait a few seconds and handle when this feature is done or it's been resolved you'll get it as we go through but that's just kind of my basic explanation here of async there's a lot more to talk about when it comes to that so we're going to say future firebase user this means we are going to return a promise if you're familiar with kind of javascript related lingo that is going to resolve and give us a firebase user once it is done so future firebase user we're going to say sign in with user like that and this is going to be an async function so we're going to write async and then we'll open and close the brackets now what we're going to do inside of here is get our google sign in account so just so you know all the stuff i'm showing here is just from this blog post i found that really illustrated this stuff well so i'll link that in the description in case you care just copy all the code out but i'll write out with you guys and try to give kind of basic explanations as we go so final google sign in account is going to be google sign in account like that that's going to be the name of the variable and we're going to await google sign in dot sign in awesome okay for the id token what we're going to use is what we've already defined so google sign in authentication dot and then can you guess it's going to be id token this is taking up a lot of space here sorry guys so let's add our semicolon that's better and then for the access token we're going to say this is google sign in authentication dot access token awesome so that's what we need for our auth credential next what we're going to do is we're going to add an auth result which is essentially us authenticating against firebase so now what we've done is we have all the google stuff ready so we've you know got our credential we've got our sign in authentication the users signed in from that ui page and now we're going to take the auth result which we'll get in a second and we're going to use that against firebase in the next few lines of code to actually authenticate the user with our application so final auth result this is going to be called auth result this equals underscore auth which is firebase right so we have auth right here which is the firebase instance and then we're going to say dot sign in with credential and then we use that user credential so now we have credential and is that right uh this needs to be in a way to sorry let's add that right there because this is an asynchronous value so just to kind of clarify this part right here is all the google related stuff so let the user sign in get their authentication get a credential based on that authentication pass that to firebase sign in with that and then authenticate against firebase next we're going to say final firebase user which is the user that we actually want we're going to say that's equal to user underscore auth dot user and sorry this is not off this is auth result okay so i think not underscore just auth result okay so i think we're almost done now so now we actually have a user from this credential now what we're going to do is just make sure that this worked properly so we're going to have an assertion we're going to say assert that not user dot is anonymous so essentially making sure that they actually have a username they actually have a real account they're not an anonymous user and then we're going to say wait that user.getidtoken does not equal null okay and then after this we're gonna say final firebase user current user equals await underscore auth dot get oops is this not why is that not working this should be dot current user there we go okay and then finally we're going to return the user after we go up here and we make sure that this is right so we're going to say assert that current user dot and i think this is i should be uid uh yeah currentuser.uid equals so equals equals user.you okay so the reason i'm doing this is to make sure that our signed in user with firebase is actually the same one that we tried to sign in with so just to summarize here we do all the google related stuff sign in get our authentication result from here then we use firebase to actually sign in with that credential and then we have a user which is the auth result.user so we just want to make sure that this sign in actually leads to the fact that we get authenticated against firebase so then when we call auth.currentuser we want to make sure that we're getting the user that we just signed in with if we're not then something went wrong with this sign in and we'll get an error message because we're doing this assertion so that's kind of just what we're doing here that's like the basics of it again i didn't write all of this this is from the blog post which i'll link in the description but i just wanted to kind of walk through and at least give some basic explanation okay so now that we have that most of the auth stuff is done we just need to change our login page so that it looks a little bit better so we have um this like build thing right here that just allows us essentially to type in our name right and actually if i go to this app it's not even open right now so i can't show you but you remember it was just a little text box and you just say you know what is my name and press enter we don't want that anymore obviously we want it to be the google sign in button so we're gonna need to change this so i'll leave the alignment um yeah should we leave the alignment yeah i'll leave the alignment for now within the body but let me just get rid of all the stuff within the child here so i think that should be it for child and now what we're actually going to do is make another function inside of here that's going to return just the login button and then we'll add a few things to the actual body page itself so we're going to start by inside of our login here inside of the body state we're going to go widget and then we're going to call this one login button or i'll say like google login button like that to be more specific that's going to return a widget that's why i'm defining a widget right there and now what we're going to do is we're going to return and we're going to return a border button or is it a border button sorry it's an outline button is what it's called and within the outline button we're going to define the on press method and all that other stuff so first we'll say on pressed and what this is going to do is actually be this dot click so obviously remove the other button so now we will call this one but we don't need this controller text stuff so we're going to get rid of all this text editing controller and instead of having a string name what i'm going to do is i'm actually going to define a firebase user of user so what's going to happen is we're going to get the user back in here and then from there we can access the user's name we can access their email like anything about them we can access if we actually have that user so inside of the click function what we're going to do is actually handle the google sign in so we need to first import that sign in or sorry this auth from the top here so we're going to say import and then auth.dart so now we should be able to use uh this sign in with user function that we've defined okay so now that we have that we're gonna go sign in with user dot dot dot and then now we're gonna say dot then and inside of here we're going to say user because this is going to return to us a user and then we'll do something inside of here when we get that user and i've just realized that i've called this method sign in with user i actually wanted to call this sign in with google i don't know what i was doing when i was typing this out but let's change this back to say sign in with google because that makes a lot more sense than sign in with user and then we can come back here and modify this so now we have sign in with google dot then what this is saying is when this is done when we've finished all the stuff related to this then we're going to say let's get the result which is going to be user so whatever is returned is what's coming in as user here and then we have an arrow function and we'll define what we want to do so what i actually want to do is i want to push to the next page and instead of going this dot name what i'm going to do is i'm going to say user dot display name so we're going to pass them the display name of the user we'll get rid of that semicolon and we'll actually say this dot user equals user just to store it in the state and we don't need a semicolon we need a comma all right so now we have the click method handled and we're just going to sign in with google you'll see all of that stuff work when it's working in just a second we'll get the user and then we'll actually go call my home page with user.displayname which means instead of just passing a string or sorry instead of passing the string that we would have typed in before now we'll just pass the display name of the user now for the google login button uh what we need to do is add a bunch of styling and add the image and all of that so let me just go over to my other screen here because this is going to be a bit of a long thing to type out we're going to start by defining the shape so the shape is going to be a rounded rectangular border so let's find that rounded rectangular border and then what we're going to do is say border radius is going to be equal to border circular this is going to make it a kind of rounded edge button and i'm going to go with 45 for the radius so this is just telling us how much do you want the corner of this button to actually be rounded i want it to be rounded 45 degrees so now that we have the shape what else do we need let's see we're gonna add a splash color so what color should this button splash when we press it uh let's go with colors dot gray okay and next we're gonna add our border side so essentially what do we want the border of this button to look like because it is an outline button in here what i'm going to do is say border side and then we're going to say color and this is going to be colors colors dot gray again so we're going to go with that gray style and then we're going to say the child of this outline button is actually going to be that google image as well as some text that says sign in with google so for the child we're going to say padding to start and padding inside of here we're going to say padding edge insets dot and then from left left top right bottom that's what this stands for we're going to say 0 10 0 and 10. so just padding off the top and the bottom we don't actually want to pad on the left and right hand side next what we'll do is inside of padding we need to put child so let's add that here uh am i doing this properly i think so yeah okay so child and what do we want for the child well we want a row and this row is going to have the google icon as well as the text beside it so inside of the row what we're going to do is start by saying min axis alignment and i think what is this this is main axis alignment dot no not alignment sorry yeah main access alignment dot center and then we're going to say min axis or what is this one main axis size sorry main axis size and this is going to be main access size dot min okay so what i just did here is i'm pretty much saying that i want this to all be aligned in the center and then i want it to be as small as possible so rather than filling the entire container be as small as you possibly can and just fit everything in that size that's also why i've added the padding here so we're going to pad on the top and on the bottom so that this will fill up a little bit more room because this is going to take up you know the minimum amount of space that it possibly can so now that we have that we're going to say children this obviously needs to be a widget list and inside of this list we're going to add all the stuff that we want okay so now we're going to add the google logo and that text so we need an image here so we're going to say image and then inside of image we're going to say image again and then asset image which means look in that asset folder and we're going to say this is asset or assets sorry slash and then google underscore logo dot and i'm pretty sure that was png so that's all we need there and then we can define the height that we want this to be i want this to be 35 pixels high but sorry that's not inside of image or sorry that's one side of asset image that's inside of image so we're going to say height 35 so just make that 35 pixels high next we'll add the text so we're going to add some padding first of all so we don't squish it directly beside the um the image there and we'll say padding and then we'll go edge insets dot only and only means okay we only want one side of padding and we'll go padding on the left side we'll pad that by 10 pixels and then we'll add the child of the padding which is going to be the text that we want to add so we'll simply say text and we'll say sign in with google and actually i'll make this a lowercase w and within the text i think can i add a style i'm pretty sure i can we're gonna go style and then we're gonna go text style like that and for the text style i'm just gonna simply make this uh the color gray so we'll say color and then this is gonna be colors.gray and then sorry last thing we'll do is change the font size just so that it aligns with everything else so for the font size we're going to go font size and i think i'm going to go with 25 for that that might be a little bit too big but we will see okay so now we've pretty much done the google login button it's inside of its own function but to use this now all we have to do is just simply add it as a child so let's just say google login button like that i'm going to add that to our build so now the child of our center alignment will be this button and let's see how this looks when we actually load up our app so i'm going to press f5 see if i broke anything or not which is likely based on how much we just did without testing but let's see what this is looking like all right so there we go we have sign in with google we can see this button is popping up right in the middle of the screen and we have that google logo some nice padding and then the text so let's see what happens when i press this so i press that and what happens it immediately actually just brings me in now the reason it did that is because i've already signed in with google before i'm going to show us how we can actually sign out in just a second but if that's your first time pressing that assuming that worked you should have actually been brought to a google sign in page where you would have put your email and password and all of that stuff and you would have actually signed it but just to prove this to you watch what happens when i type hello you see it actually shows my name from my google account that i'm signed in with so i can tell that i'm signed in because it's showing the correct name when i'm actually making one of these messages so again sign in with google if that works you're good to go and that's why we use this as well it can remember who's been signed in or not you don't need to constantly put in your username or password now last thing we'll do is simply write a function that will actually let us sign out so we can test to see if this is working properly so i'm just going to add one here and wow dart analyzer has been terminated sure we can restart that that's fine and i'm just going to say this is a void i'm going to say sign out to google and we'll make this an async function like that and all we're going to do is say await and this should be google sign in dot sign out that's all we need to do and that's going to sign our user out so wait save changes okay great okay so now we've made the sign out method and i want to actually use the sign out just to make sure that that is working so i'm actually just going to go into this login page i'm going to go inside of my body here and i'm going to make it's called a life cycle method that just essentially means as soon as this is loaded we always do this so it's called a knit state so sorry we're going to say at override we're going to say void init state like that okay so what this method will actually do is automatically run as soon as this is initialized so as soon as this page gets loaded or this body gets loaded this will run so this is a great opportunity to put anything we want to happen before the app actually renders inside of here which in this case i want them to be logged out before we actually even render this page so what i need to do though is i do need to call super dot init state there's just a rule here with this init state method that you have to call the super init state method which means that comes from the inherited class here we have to call that already so we'll call super dot init state and then what we'll do is simply log out so we can just say auth dot or sorry not we don't have to call auth we can just say log out google or what did i call this this method sign out google sorry so let's go sign out google like that okay so that should work sign out google so when we initialize the state we will sign out and then that will force us to sign back in so we saved that but let me just hot reload this to make sure and let's go here to sign in with google and now it did not sign us out so this is interesting let me reload this app actually and see if anything's going on here okay so there we go so now it actually did sign us out i just had to reload the app i think for that to actually take place this is saying choose an account because it automatically signed us out but this is saving the account that i had signed in with so we can make this kind of the standard that whatever this app gets reloaded we sign the user out and then they have to choose what account they want to use to sign back in so let me pick this account which i'm going to have blurred just you guys don't see my email but i'll do that and now that signs us in and let's go ahead and type hello and we can see my name is popping up and everything is working properly now if i go back here and click sign in it's automatically signing me back in because sorry i think i might have made a mistake here the init state will only run when this app restarts so the first time that this login page actually gets loaded will be when we initialize the state we can manually call this if we want to or manually call sign out but for now i think the method that we currently have is fine and we're going to go with that so that being said this has been a long video but i hope this at least helps you get authentication set up and working again i'm no pro at all this stuff but i'm just learning along with you guys and i think this is cool and we have a lot to do now uh with having our authentication in fact in the next video we'll probably try to store those messages in a database and i'm looking forward to that so if you guys enjoyed the video make sure you leave a like subscribe to the channel and of course i will see you again in another flutter tutorial you
