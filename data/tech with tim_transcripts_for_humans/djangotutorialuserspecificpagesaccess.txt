With timestamps:

00:00 - hey guys and welcome back from their
00:01 - django tutorial now I know I said I was
00:04 - gonna be doing that custom user models
00:05 - here but the thing is to do what I
00:07 - wanted to do I actually don't need to
00:09 - use those and they're way like they're
00:11 - they kind of over complicated so I
00:13 - figured we'll just do it the prop is the
00:15 - proper way or the way you're supposed to
00:17 - do it and then if you guys need to look
00:18 - up how to do custom user models it's not
00:21 - like super hard but just go online
00:23 - there's a few decent tutorials for that
00:25 - because I don't think I'm gonna cover
00:26 - that in that series unless you guys
00:27 - really want that and you leave that as a
00:29 - comment down below but anyways the goal
00:31 - of this video is to make specific to-do
00:34 - lists for specific users so that when
00:36 - different users log into the website
00:38 - they see different to-do lists just like
00:40 - you know if you're on Facebook you're
00:41 - gonna see different posts like stuff
00:42 - like that right so it's gonna be a
00:43 - little bit more custom to each user and
00:45 - obviously they can save their own to-do
00:47 - lists and I'll be saved just for them
00:49 - and other people shouldn't be able to
00:50 - view that so what I'm gonna do and I
00:53 - need to do this is inside of our model
00:55 - stop pie file inside of our main
00:57 - application I'm going to just add a
00:59 - foreign key to to-do list which is user
01:02 - and then that way our users will have a
01:04 - to-do list set where we can view all of
01:08 - the the different to-do list with that
01:10 - user so to do this I need to start by
01:12 - importing our user model so to get that
01:14 - I'm gonna say from Django
01:16 - dot contrib dot off dot models import
01:22 - user with a capital u now what I'll do
01:26 - is just add a foreign key I'm just gonna
01:28 - copy this and just change the names here
01:30 - instead of to-do-list we'll say user and
01:33 - we'll do user right here so have user
01:37 - model stop foreign key so now we're just
01:39 - saying that essentially every two ulis
01:41 - we create will be linked to some kind of
01:43 - user awesome so now what we need to do
01:47 - is actually make some migrations in our
01:50 - file so that we're gonna update our
01:53 - database accordingly to that now you
01:55 - shouldn't run into any issues doing this
01:57 - it should just like create the
02:00 - migrations for you but if for some
02:02 - reason this doesn't work what you need
02:04 - to do is delete all of your database
02:07 - files so delete your database file
02:08 - delete all of the everything inside of
02:12 - your migrations folder in
02:13 - including the pie cache but not being
02:16 - knit top pythons and that goes for all
02:18 - of your migration folders so any
02:20 - migration folder delete everything
02:21 - except this in knit pie and then
02:24 - anywhere you see a pie cache folder
02:25 - delete that and that'll allow you to do
02:28 - the migrations after that so now that
02:31 - we've done that so what do we need to do
02:33 - next
02:34 - well now when we created to-do lists
02:36 - things are a little bit different so
02:38 - this is where we're creating a to-do
02:39 - list and what we're doing to do that is
02:42 - just creating new to do this and saving
02:44 - in the database
02:44 - but now we need to save the to-do list
02:47 - to a specific user so to do that what
02:49 - we're gonna do is we're gonna say
02:51 - response dot user dot to-do-list
02:57 - underscore set now I don't know if this
03:00 - is gonna have to be capital or not so
03:01 - I'll have to play with that in a second
03:03 - but I think it should just be like that
03:04 - dot create and in this case we'll give a
03:07 - name to our to-do list and we'll say the
03:09 - name is gonna be equal to n now I
03:11 - believe this is how you created I'm
03:14 - gonna look to see how we created the
03:16 - item yeah so that is it's a similar way
03:18 - so we'll test this to see if that's
03:19 - working but this should now be saving
03:22 - our to-do list to a specific user now we
03:24 - can still access our to-do list by doing
03:27 - the slash ID of those to-do lists but
03:30 - we're gonna probably modify this a
03:32 - little bit so that you're only able to
03:34 - access to-do lists that are yours so
03:36 - that'll mean we'll look at the ID and
03:38 - we'll see if that's in the user set and
03:40 - if it is then we'll show that otherwise
03:42 - we'll say like you don't have access to
03:44 - this to-do list or something but let's
03:45 - first just make sure that we can create
03:46 - them ok so another thing that I'm gonna
03:48 - do actually is we've created this if I
03:52 - go to templates we've created no we have
03:58 - not created but in our based on HTML
04:00 - sorry guys we have this slash view here
04:03 - right and this originally I think I have
04:04 - it linking to to just a test stuff but
04:07 - what I want to do is actually make this
04:08 - go to a list of all of our different
04:10 - to-do lists so I've created this slash
04:13 - you so now what I'm gonna do is I'm
04:15 - going to add a URL inside of our URLs
04:19 - here that it's gonna be slash view and
04:21 - what slash you will do is it'll bring us
04:23 - to a list of all of our to-do lists so
04:25 - I'm just gonna say
04:26 - the function name will be view the link
04:28 - will be viewed and the name will be view
04:31 - and then what we'll do is we'll create a
04:34 - new I guess function inside of you stop
04:36 - hi and we'll say define view response
04:42 - and then what we're gonna do is we're
04:43 - gonna return a render of in this case
04:45 - we'll say response view and main /
04:53 - review dot HTML and then we'll pass in
04:57 - nothing as the context so now we've done
04:59 - all that we actually need to create a
05:00 - view template so I'm just gonna make a
05:02 - new file and I'm gonna save this as view
05:05 - dot HTML and I'm just gonna extend this
05:08 - from the base template so extend space
05:11 - dot main / paste HTML and then we will
05:17 - add our blocks so we need that block for
05:19 - the title so I'll say block title like
05:23 - that and then and the block so % % and
05:28 - block and then inside here I guess we'll
05:31 - just do like view and then we can copy
05:34 - this and just change the name to two
05:37 - content so con content like that and
05:43 - then inside of here what I'm gonna do is
05:46 - I'm just gonna create a for loop that's
05:48 - gonna loop through all of the different
05:50 - to-do lists for our user and display
05:52 - them it'll be very very basic but we can
05:54 - obviously modify it later
05:55 - so let's add a for loop so say for and
05:58 - in this case TD which is stanford to do
06:00 - list in this case user dot to do list
06:07 - underscore set then what we'll do is
06:09 - we'll end the for loop and and for and
06:14 - then in here we're gonna create some
06:15 - links to all of our to-do lists and
06:17 - display them into some little paragraph
06:19 - tags so I'm just gonna say P and in this
06:21 - case we'll add the name of our to-do
06:23 - list
06:23 - nice we'll add a link here so we'll say
06:27 - a will say href equals in this case
06:30 - slash and we'll say TD dot ID and then
06:36 - we will end not a tag so slash a
06:39 - and then and the P tag / P and here
06:42 - we'll just put the name of our to-do
06:43 - list which in this case is simply going
06:45 - to be TD dot name alright so that should
06:50 - display all of our to-do lists and just
06:52 - like a standard on an home like list
06:54 - kind of form we could make it look nicer
06:55 - but for now we're just gonna go with
06:57 - that and yeah and then we should be able
06:59 - to click on them to access those to-do
07:01 - lists so let me see if this is actually
07:04 - working so let's run server any errors
07:07 - let's see no errors so let's now go back
07:11 - to here and say I'm going to create
07:12 - let's just go to the home page and let's
07:15 - go to view okay so if you are not
07:17 - writing issues wherever it's not see
07:19 - anything so now let's try to create a
07:20 - to-do list so if I say Tim create new
07:23 - and we run into an area you know
07:25 - attribute to-do list underscore scent I
07:28 - thought that was gonna happen so let me
07:30 - see now if we need to add the Capitol's
07:32 - to that or not so inside views to-do
07:38 - list underscore set maybe that's the
07:41 - issue I don't know we'll see though and
07:44 - then I guess we're gonna have to change
07:45 - inside of our view dot HTML file to be
07:49 - capitals as well now if this doesn't
07:52 - work I'll quickly do a little bit of
07:53 - research and figure this out
07:54 - but let's try it now and let's go back
07:57 - to slash create can continue has no
08:01 - attribute to do list underscore sets all
08:03 - right I'll be back in one second guys
08:04 - with the proper attribute name for that
08:06 - alright I am back and with a ton of
08:09 - errors that I had to fix so essentially
08:12 - one of the first errors is we need to go
08:15 - here and change this to be user dot to
08:17 - do list dot all because I was trying to
08:20 - loop through something that's not
08:21 - iterable cuz this is a different object
08:23 - so just to put this all here you don't
08:24 - need the brackets after and leave this
08:26 - as lowercase to do list and then we need
08:29 - to do is go to models and we need to add
08:32 - these two fields to our for a key so
08:36 - we've to say related name we're gonna
08:37 - find this as to do list and then no
08:40 - equals true now essentially the related
08:43 - name is gonna be the way we access this
08:44 - from the related object which is user so
08:47 - we just change that to do list we say no
08:50 - equals true and then what we're gonna
08:52 - have to do
08:53 - save that is make migrations you know
08:55 - python man shop I make migrations Python
08:58 - managed up hi migrate you do that you
09:01 - should be set and then the last thing we
09:03 - have to change is inside view stop hi is
09:06 - what I've done here is I've created a
09:08 - new to-do list so I said T equals to-do
09:10 - list name equals n exactly what we had
09:12 - before same thing with saving the to-do
09:14 - list except now I said response dot user
09:17 - dot to-do list dot add T and then we can
09:21 - still link back to that ID because that
09:23 - ID is perfectly valid it still exists so
09:25 - we can see that and everything works
09:27 - fine so that is the fixes that's what we
09:30 - need to do remember that once you change
09:33 - these this models file by adding the
09:34 - related name and the nil equals true
09:37 - you need to make migrations to save
09:39 - those changes and then rerun the server
09:41 - so I'll show you now what it looks like
09:43 - so essentially you can see I have two
09:44 - to-do lists say hello when I go I can
09:47 - add items to the to-do list so let's say
09:49 - like item one add item there you go we
09:51 - can check it we can save it all that fun
09:53 - stuff if I go to view um it should be
09:57 - showing me this but for some reason
09:59 - that's not happening um let's see here
10:03 - let me try logging out and log you back
10:05 - in so let's say slash logout let's say
10:07 - slash login let's go Tim password sign
10:11 - in you and there we go we can see that
10:13 - we have now these popping up so we have
10:16 - to be logged in to be seeing these if we
10:18 - are not logged in we are obviously not
10:20 - gonna see anything because we don't have
10:22 - any of these so now let's try to create
10:25 - another account and add some of our
10:27 - to-do lists to that account and then see
10:29 - if it's different than what we have
10:31 - before so let's say we'll be making a
10:33 - let's say the email is Bob detect with
10:37 - Tim net let's say the password is the
10:41 - password I've been using consistently
10:43 - and there we go let's hit register
10:46 - alright so we don't need to save that
10:48 - but now let's go to view and we're still
10:51 - seeing hello twice which is interesting
10:54 - to me obits because we're not logged in
10:55 - to that account so let's do slash login
10:59 - and then what we'll do here is we'll say
11:02 - Bob and password and login and go to
11:05 - view and obviously there
11:06 - nothing there so let's create a new
11:08 - to-do list let's go new list create
11:10 - lists let's go to view and now we can
11:13 - see that we have new list showing up and
11:14 - that is working now I'm sure this is
11:16 - fairly buggy but this gives you an idea
11:18 - of how you can add things to specific
11:20 - users so you can see them on the webpage
11:22 - now obviously we can make it so that you
11:25 - can't view other people's to-do list cuz
11:28 - for example if I go / - I can view the
11:31 - hello to-do list even though that's not
11:33 - mine
11:34 - so we'll quickly do that and then I
11:35 - guess we'll probably wrap up after that
11:37 - so let's go to index here now and let's
11:39 - quickly say we'll get the to-do list
11:43 - objects will get so we get the to-do
11:45 - list as an object and we'll just see if
11:46 - that to-do list is in the users list if
11:49 - it's not then we'll just you know get
11:52 - out of that we won't let this happen
11:53 - otherwise we'll do whatever we already
11:56 - have so we'll simply just say if in this
11:58 - case response dot user dots
12:02 - I guess to-do list all like that but
12:07 - we'll say if LS in that then this is
12:11 - valid otherwise so we'll tap all of this
12:14 - and otherwise we'll simply just return
12:17 - we can either give an error or we could
12:20 - just like not let them go to this page
12:21 - and to do that we can just link maybe to
12:24 - the home page or something if they try
12:25 - to do that so I mean you guys can pick
12:27 - what you want to do there but I guess
12:28 - I'll just gonna ring link to our home
12:30 - page here so we'll just link to home dot
12:33 - HTML and we'll just say in this case
12:36 - where she maybe that's instead of going
12:38 - to home let's go to view dot HTML
12:40 - because then that way they can view
12:42 - their to-do list so maybe that makes
12:43 - more sense so now let's try this so
12:47 - let's try to go to to now refresh and
12:50 - you can see that now it's simply
12:51 - bringing us a new list because well
12:52 - that's not our to-do list so if I go to
12:54 - three you can see new list is valid
12:56 - because that's our to-do list so we're
12:58 - able to view that now this is probably
12:59 - not the most secure way to actually like
13:01 - hide information just would like this if
13:03 - statement and all that but I mean you
13:06 - guys can mess with that if you want and
13:07 - this is a very very basic example so
13:10 - anyways that is kind of an int for how
13:12 - to add the to-do list to specific users
13:16 - how to see that I know the login and
13:18 - logout system isn't super
13:19 - smoothly right now but you can obviously
13:20 - add that on the side my main goal with
13:22 - these tutorials was to give you guys
13:24 - kind of the starting blocks on how to do
13:26 - things ideas on how to go about stuff I
13:28 - really can't show you possibly
13:30 - everything because it's an infinite
13:31 - amount of stuff but you can do with
13:32 - Django and with that being said I will
13:34 - hopefully be doing a deployment tutorial
13:36 - soon it probably won't be for the next
13:39 - few days but at some point I definitely
13:41 - will do one and I encourage you guys to
13:42 - remind me and get on me if I'm not doing
13:45 - a deployment one because I will do that
13:46 - at some point and that has kind of been
13:48 - it for the actual writing code and all
13:51 - of this of the Django tutorial so I hope
13:53 - you guys enjoyed if you have any
13:54 - questions or future videos you'd like to
13:56 - see please let me know in the comments
13:57 - down below and I guess I'll see you in
13:59 - the next video
14:00 - [Music]

Cleaned transcript:

hey guys and welcome back from their django tutorial now I know I said I was gonna be doing that custom user models here but the thing is to do what I wanted to do I actually don't need to use those and they're way like they're they kind of over complicated so I figured we'll just do it the prop is the proper way or the way you're supposed to do it and then if you guys need to look up how to do custom user models it's not like super hard but just go online there's a few decent tutorials for that because I don't think I'm gonna cover that in that series unless you guys really want that and you leave that as a comment down below but anyways the goal of this video is to make specific todo lists for specific users so that when different users log into the website they see different todo lists just like you know if you're on Facebook you're gonna see different posts like stuff like that right so it's gonna be a little bit more custom to each user and obviously they can save their own todo lists and I'll be saved just for them and other people shouldn't be able to view that so what I'm gonna do and I need to do this is inside of our model stop pie file inside of our main application I'm going to just add a foreign key to todo list which is user and then that way our users will have a todo list set where we can view all of the the different todo list with that user so to do this I need to start by importing our user model so to get that I'm gonna say from Django dot contrib dot off dot models import user with a capital u now what I'll do is just add a foreign key I'm just gonna copy this and just change the names here instead of todolist we'll say user and we'll do user right here so have user model stop foreign key so now we're just saying that essentially every two ulis we create will be linked to some kind of user awesome so now what we need to do is actually make some migrations in our file so that we're gonna update our database accordingly to that now you shouldn't run into any issues doing this it should just like create the migrations for you but if for some reason this doesn't work what you need to do is delete all of your database files so delete your database file delete all of the everything inside of your migrations folder in including the pie cache but not being knit top pythons and that goes for all of your migration folders so any migration folder delete everything except this in knit pie and then anywhere you see a pie cache folder delete that and that'll allow you to do the migrations after that so now that we've done that so what do we need to do next well now when we created todo lists things are a little bit different so this is where we're creating a todo list and what we're doing to do that is just creating new to do this and saving in the database but now we need to save the todo list to a specific user so to do that what we're gonna do is we're gonna say response dot user dot todolist underscore set now I don't know if this is gonna have to be capital or not so I'll have to play with that in a second but I think it should just be like that dot create and in this case we'll give a name to our todo list and we'll say the name is gonna be equal to n now I believe this is how you created I'm gonna look to see how we created the item yeah so that is it's a similar way so we'll test this to see if that's working but this should now be saving our todo list to a specific user now we can still access our todo list by doing the slash ID of those todo lists but we're gonna probably modify this a little bit so that you're only able to access todo lists that are yours so that'll mean we'll look at the ID and we'll see if that's in the user set and if it is then we'll show that otherwise we'll say like you don't have access to this todo list or something but let's first just make sure that we can create them ok so another thing that I'm gonna do actually is we've created this if I go to templates we've created no we have not created but in our based on HTML sorry guys we have this slash view here right and this originally I think I have it linking to to just a test stuff but what I want to do is actually make this go to a list of all of our different todo lists so I've created this slash you so now what I'm gonna do is I'm going to add a URL inside of our URLs here that it's gonna be slash view and what slash you will do is it'll bring us to a list of all of our todo lists so I'm just gonna say the function name will be view the link will be viewed and the name will be view and then what we'll do is we'll create a new I guess function inside of you stop hi and we'll say define view response and then what we're gonna do is we're gonna return a render of in this case we'll say response view and main / review dot HTML and then we'll pass in nothing as the context so now we've done all that we actually need to create a view template so I'm just gonna make a new file and I'm gonna save this as view dot HTML and I'm just gonna extend this from the base template so extend space dot main / paste HTML and then we will add our blocks so we need that block for the title so I'll say block title like that and then and the block so % % and block and then inside here I guess we'll just do like view and then we can copy this and just change the name to two content so con content like that and then inside of here what I'm gonna do is I'm just gonna create a for loop that's gonna loop through all of the different todo lists for our user and display them it'll be very very basic but we can obviously modify it later so let's add a for loop so say for and in this case TD which is stanford to do list in this case user dot to do list underscore set then what we'll do is we'll end the for loop and and for and then in here we're gonna create some links to all of our todo lists and display them into some little paragraph tags so I'm just gonna say P and in this case we'll add the name of our todo list nice we'll add a link here so we'll say a will say href equals in this case slash and we'll say TD dot ID and then we will end not a tag so slash a and then and the P tag / P and here we'll just put the name of our todo list which in this case is simply going to be TD dot name alright so that should display all of our todo lists and just like a standard on an home like list kind of form we could make it look nicer but for now we're just gonna go with that and yeah and then we should be able to click on them to access those todo lists so let me see if this is actually working so let's run server any errors let's see no errors so let's now go back to here and say I'm going to create let's just go to the home page and let's go to view okay so if you are not writing issues wherever it's not see anything so now let's try to create a todo list so if I say Tim create new and we run into an area you know attribute todo list underscore scent I thought that was gonna happen so let me see now if we need to add the Capitol's to that or not so inside views todo list underscore set maybe that's the issue I don't know we'll see though and then I guess we're gonna have to change inside of our view dot HTML file to be capitals as well now if this doesn't work I'll quickly do a little bit of research and figure this out but let's try it now and let's go back to slash create can continue has no attribute to do list underscore sets all right I'll be back in one second guys with the proper attribute name for that alright I am back and with a ton of errors that I had to fix so essentially one of the first errors is we need to go here and change this to be user dot to do list dot all because I was trying to loop through something that's not iterable cuz this is a different object so just to put this all here you don't need the brackets after and leave this as lowercase to do list and then we need to do is go to models and we need to add these two fields to our for a key so we've to say related name we're gonna find this as to do list and then no equals true now essentially the related name is gonna be the way we access this from the related object which is user so we just change that to do list we say no equals true and then what we're gonna have to do save that is make migrations you know python man shop I make migrations Python managed up hi migrate you do that you should be set and then the last thing we have to change is inside view stop hi is what I've done here is I've created a new todo list so I said T equals todo list name equals n exactly what we had before same thing with saving the todo list except now I said response dot user dot todo list dot add T and then we can still link back to that ID because that ID is perfectly valid it still exists so we can see that and everything works fine so that is the fixes that's what we need to do remember that once you change these this models file by adding the related name and the nil equals true you need to make migrations to save those changes and then rerun the server so I'll show you now what it looks like so essentially you can see I have two todo lists say hello when I go I can add items to the todo list so let's say like item one add item there you go we can check it we can save it all that fun stuff if I go to view um it should be showing me this but for some reason that's not happening um let's see here let me try logging out and log you back in so let's say slash logout let's say slash login let's go Tim password sign in you and there we go we can see that we have now these popping up so we have to be logged in to be seeing these if we are not logged in we are obviously not gonna see anything because we don't have any of these so now let's try to create another account and add some of our todo lists to that account and then see if it's different than what we have before so let's say we'll be making a let's say the email is Bob detect with Tim net let's say the password is the password I've been using consistently and there we go let's hit register alright so we don't need to save that but now let's go to view and we're still seeing hello twice which is interesting to me obits because we're not logged in to that account so let's do slash login and then what we'll do here is we'll say Bob and password and login and go to view and obviously there nothing there so let's create a new todo list let's go new list create lists let's go to view and now we can see that we have new list showing up and that is working now I'm sure this is fairly buggy but this gives you an idea of how you can add things to specific users so you can see them on the webpage now obviously we can make it so that you can't view other people's todo list cuz for example if I go / I can view the hello todo list even though that's not mine so we'll quickly do that and then I guess we'll probably wrap up after that so let's go to index here now and let's quickly say we'll get the todo list objects will get so we get the todo list as an object and we'll just see if that todo list is in the users list if it's not then we'll just you know get out of that we won't let this happen otherwise we'll do whatever we already have so we'll simply just say if in this case response dot user dots I guess todo list all like that but we'll say if LS in that then this is valid otherwise so we'll tap all of this and otherwise we'll simply just return we can either give an error or we could just like not let them go to this page and to do that we can just link maybe to the home page or something if they try to do that so I mean you guys can pick what you want to do there but I guess I'll just gonna ring link to our home page here so we'll just link to home dot HTML and we'll just say in this case where she maybe that's instead of going to home let's go to view dot HTML because then that way they can view their todo list so maybe that makes more sense so now let's try this so let's try to go to to now refresh and you can see that now it's simply bringing us a new list because well that's not our todo list so if I go to three you can see new list is valid because that's our todo list so we're able to view that now this is probably not the most secure way to actually like hide information just would like this if statement and all that but I mean you guys can mess with that if you want and this is a very very basic example so anyways that is kind of an int for how to add the todo list to specific users how to see that I know the login and logout system isn't super smoothly right now but you can obviously add that on the side my main goal with these tutorials was to give you guys kind of the starting blocks on how to do things ideas on how to go about stuff I really can't show you possibly everything because it's an infinite amount of stuff but you can do with Django and with that being said I will hopefully be doing a deployment tutorial soon it probably won't be for the next few days but at some point I definitely will do one and I encourage you guys to remind me and get on me if I'm not doing a deployment one because I will do that at some point and that has kind of been it for the actual writing code and all of this of the Django tutorial so I hope you guys enjoyed if you have any questions or future videos you'd like to see please let me know in the comments down below and I guess I'll see you in the next video
