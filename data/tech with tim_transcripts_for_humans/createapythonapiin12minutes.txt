With timestamps:

00:00 - what is an API well API stands for
00:02 - application programming interface and
00:04 - really this is a set of rules that allow
00:06 - different software systems to
00:08 - communicate with each other an API
00:10 - typically lives on some type of server
00:11 - and will manipulate some kind of
00:13 - database it can handle different
00:15 - requests so if I'm a user utilizing the
00:17 - API I send a request to it my request
00:20 - may contain some different data then the
00:22 - API is going to process this request and
00:24 - return to me a response that response
00:27 - will typically contain data that I was
00:28 - requesting from the API typically your
00:31 - API will manipulate some type of
00:33 - database and allow different access to
00:35 - the database values depending on the set
00:37 - of rules that you set up in this video
00:39 - I'll show you how to set up a simple API
00:41 - using Python and flask in under 10
00:43 - minutes so that said let's go ahead and
00:46 - get started after a quick word from our
00:48 - sponsor if you're interested in rapidly
00:50 - creating apis then today's sponsored
00:52 - Dream Factory has you covered with Dream
00:55 - Factory you can create fully featured
00:57 - apis in seconds by simply connecting to
00:59 - an a data source Let Me Show You Begin
01:02 - by starting your dream Factory instance
01:04 - logging in and then connecting to a data
01:06 - source for this demo I'll use mongodb
01:09 - I'll fill in my connection details press
01:11 - save and in seconds Dream Factory has
01:13 - created a fully customizable and fully
01:16 - documented rest API that I can now use
01:18 - to access my data look I can query my
01:21 - reviews collection and view a result in
01:23 - a matter of seconds now that my API is
01:26 - created I can go ahead and add
01:27 - authentication by making a new rule
01:29 - connecting that rule to a new
01:31 - application and generating a unique API
01:34 - token now that I have this token I can
01:36 - access my API securely from anywhere
01:39 - look at me doing it here right in
01:41 - Postman now best of all Dream Factory
01:43 - apis are fully customizable can run
01:46 - anywhere and connect to your existing
01:48 - authentication systems like oauth spend
01:50 - less time writing back ends and more
01:52 - time developing beautiful applications
01:53 - by clicking the link in the description
01:55 - and getting started with Dream Factory
01:57 - today thanks again to Dream Factory for
01:59 - sponsor during this video alright so
02:01 - let's begin with our project setup for
02:03 - this video we're going to use flask this
02:05 - is a micro web framework for python
02:07 - that's very popular for doing web
02:09 - development and for creating apis to set
02:11 - up flask we first need to open some kind
02:13 - of terminal window in this case I'm in
02:15 - command prompt if you're on Mac or Linux
02:17 - open your terminal and we're going to
02:18 - type the following command which is PIP
02:20 - install and then flask now this should
02:23 - install the flask framework for you if
02:25 - you're on Mac or Linux you may want to
02:27 - try the PIP 3 command if pip was not
02:29 - working for you and if neither of those
02:31 - commands work I'll leave two videos on
02:33 - the screen that will show you how to fix
02:34 - that pip command now that we have flask
02:36 - installed we're just going to open a
02:38 - python file which I already have here in
02:40 - some kind of directory and we're going
02:41 - to create a basic flask application
02:43 - flask will be the server that's running
02:45 - our API we're going to begin by
02:47 - importing our dependencies we'll say
02:49 - from flask import and then we're going
02:51 - to import flask with a capital request
02:54 - and then the function jsonify which
02:57 - we're going to use to create a Json
02:58 - response now we need to create our flask
03:01 - application so we're going to say app is
03:03 - equal to flask and then underscore
03:06 - underscore name underscore underscore
03:07 - like that and then we're going to run
03:09 - our flask application by saying if
03:11 - underscore underscore name
03:13 - is equal to underscore and square Main
03:16 - app dot run and then debug equal true
03:20 - this will run our flask server now that
03:23 - our flask server is set up and we have
03:25 - the basic initialization what we need to
03:27 - do is create something known as a root
03:28 - now a root is essentially an endpoint
03:30 - this is kind of a location on our API
03:33 - that we can go to to get some kind of
03:35 - data we have different kinds of routes
03:37 - which I'll talk about in a second but
03:38 - for now let's create a simple one and
03:40 - test this out so you can see how it
03:41 - works so to create a root we're going to
03:43 - define a python function we're going to
03:45 - say Define in this case we'll go with
03:46 - something like home inside of our
03:48 - function we'll just return some data
03:50 - that we want the user to have access to
03:52 - when they reach this route so we'll say
03:54 - return and then in this case go with
03:56 - something like home now to make this
03:58 - accessible what we need to do is add a
04:00 - decorators we're going to use an at
04:01 - symbol and say app which is the name of
04:04 - our flask application here so use the
04:06 - same variable name dot root and then
04:08 - we're going to put the path that we want
04:09 - to access in this case we're just going
04:11 - to do slash which will be the default
04:13 - route now the root is really what comes
04:15 - after the slash in your URL address bar
04:18 - so that's what we're setting up here
04:19 - okay let's save our code and let's go
04:21 - ahead and run this to run this we're
04:23 - going to type Python and then main.pi
04:26 - which is the name of my python file if
04:28 - you're on Mac or Linux you're going to
04:29 - use Python 3. okay so let's run that you
04:32 - can see that it's now created a
04:33 - development server for us and I can open
04:35 - this URL by just right clicking on it
04:37 - here in Visual Studio code when I do
04:39 - that you can see that I get home
04:40 - appearing on my screen there you go you
04:43 - just created your first root inside of
04:44 - flask so now that we've created this
04:46 - demo route let's have a look at some
04:48 - other routes that we can create with
04:50 - different HTTP methods now whenever
04:52 - we're writing an API we're working with
04:53 - something known as HTTP which is
04:55 - essentially the way we communicate data
04:57 - over the internet now when we create
04:59 - different API routes we can mark them
05:00 - with different methods now the methods
05:02 - we can use are get post put and delete
05:06 - we have access to a bunch of other ones
05:08 - as well but these are the most common
05:09 - ones now get is used when we want to
05:12 - retrieve some value from the server post
05:14 - is used when we want to create something
05:16 - something new put is used when we want
05:18 - to alter or modify some existing data
05:21 - and delete is used we want to remove or
05:23 - delete data from a database or from
05:25 - whatever resource it is that we're
05:26 - accessing so let's create a more
05:28 - complicated get route here and see how
05:30 - that works so we're going to say at app
05:32 - dot root for this we're going to say
05:34 - slash get Dash user and then I'm going
05:38 - to implement something known as a path
05:39 - parameter now a path parameter is a
05:42 - dynamic value that you can pass in the
05:44 - path of a URL that will be able to
05:46 - access inside of our root so in this
05:48 - case I'm going to say user underscore ID
05:50 - then I'm going to make my function get
05:53 - underscore user and I'm going to accept
05:55 - a variable inside of my function
05:57 - parameters here that's the same as the
05:59 - path parameter I put here now when we do
06:02 - this this essentially means that I can
06:03 - do something like get user slash and
06:06 - then any value I want and this value
06:08 - will be the ID of the user that we're
06:10 - attempting to retrieve right so if I
06:12 - have something like 6226 then that's
06:14 - indicating that I want to retrieve the
06:16 - user with the AI with the ID story of
06:18 - 6226 okay that's a path parameter so how
06:21 - do we access the path parameter well we
06:23 - can just access it directly from here so
06:25 - what I'm going to do is essentially mock
06:26 - some data that we want to return to our
06:28 - user so I can paste this in user data is
06:30 - equal to the following and now I want to
06:33 - talk to you about something known as a
06:34 - query parameter now whenever we are
06:35 - accessing a root we have the ability to
06:37 - pass something known as a query
06:39 - parameter which is essentially an extra
06:40 - value that is included after the main
06:43 - path so if I have my path get Dash user
06:46 - slash one two three if I put a question
06:49 - mark here now I can pass different query
06:51 - parameters so something like extra is
06:54 - equal to hello world okay this is an
06:56 - additional variable that I can pass
06:58 - along to my root so how do I access that
07:00 - from flask well I can do the following I
07:03 - can say extra is equal to request
07:05 - request is the variable I imported up
07:07 - here dot orgs which stores all of my
07:10 - query parameters in a dictionary and
07:12 - then I can use dot get and try to access
07:13 - a parameter or sorry a value like extra
07:16 - okay now that I have extra I can check
07:19 - if this exists so I can say something
07:20 - like if extra then user data add to the
07:25 - extra key is equal
07:28 - 2 extra then I can return my data so I
07:31 - can say return jsonify and then this
07:34 - will be my user underscore data
07:37 - I'll pass the Response Code of 200. so
07:40 - whenever we are returning data from an
07:42 - API we're going to use Json now Json
07:44 - stands for JavaScript object notation
07:46 - which is essentially a collection of key
07:48 - value pairs very similar to a python
07:50 - dictionary so in flask we create a
07:53 - dictionary and then we jsonify that
07:55 - dictionary and that's what we can return
07:57 - to the user this allows flask to
07:59 - actually parse this value and return it
08:01 - as Json data the next value that we pass
08:04 - here is the status code 200 is the
08:07 - default status code of success you can
08:09 - pass other HTTP status codes here as
08:11 - well I won't go through all of them so
08:13 - now that we have this get root let's
08:15 - make sure our server is running so let
08:17 - me just bring up my terminal here and
08:18 - run my server and now we can actually
08:20 - test our get route from the browser by
08:23 - default when you actually type in a URL
08:26 - here in your browser you're going to be
08:27 - sending a get request so notice here
08:30 - that I have the URL of get user and then
08:32 - slash 123 question mark extra equals
08:35 - hello and then it returns to me the Json
08:37 - data of this which has my user ID and
08:39 - then what I passed here inside of the
08:41 - query parameter now that we've had a
08:42 - look at how to make a get root let's
08:44 - have a look at making a post root so to
08:46 - create a post request we'll do a very
08:47 - similar thing to what we did before
08:48 - we'll have an at app dot root we'll go
08:52 - here and we'll say slash and then this
08:54 - can be something like create Dash user
08:57 - however this time since we're not using
08:59 - the default get request we have to
09:01 - actually specify the accepted method for
09:03 - this root so in this case I'm going to
09:05 - put inside of an array here post now
09:07 - this means that I can accept a post
09:09 - request if I wanted to accept both a
09:11 - post request and a get request that I
09:13 - would put both of them inside of here
09:14 - for now all I want to accept is post
09:17 - that will Define my function create
09:18 - underscore user and if I wanted to check
09:21 - inside of this function what the method
09:23 - was that was being used I could do the
09:24 - following I could say if request dot
09:27 - method is equal to post and I would only
09:31 - do this if I had multiple methods but I
09:33 - just wanted to show you you can use
09:34 - request.method which is from this
09:36 - variable right here and it tells you if
09:38 - you're using post get Etc regardless we
09:40 - know it's going to be post what we want
09:42 - to do here is actually receive some data
09:44 - from the request that's in Json format
09:47 - so the user is going to submit us some
09:49 - Json which is kind of the user that want
09:51 - to create so how do we get that well I'm
09:53 - going to say data is equal to
09:56 - request.get underscore Json this is
09:58 - going to give me all the Json data that
10:00 - was passed in the body of the request
10:02 - I'm going to show you how we look at
10:03 - this in a second and what I can do is
10:05 - simply return this back to the user to
10:07 - indicate that this was created
10:09 - successfully so I can say return
10:11 - and then I need to jsonify the data and
10:15 - then I can return the status request of
10:17 - 201 and now we have successfully
10:19 - implemented a post request where we are
10:21 - receiving some Json data from the user
10:23 - obviously I'd probably do something more
10:24 - here like add this to a database but
10:26 - this is just a simple demo okay so now
10:29 - we've created this post request however
10:30 - I can't demo the post request for you in
10:32 - the browser so now we're going to
10:34 - quickly talk about how we can test our
10:35 - apis now there's a variety of different
10:37 - ways we can test our apis but I'm going
10:39 - to recommend we use a tool called
10:40 - Postman so please download this from the
10:42 - link in the description and then open up
10:44 - that software and let's look at how we
10:46 - can call this API alright so my python
10:48 - server is running so I'm going to copy
10:50 - the URL that it's running on right here
10:52 - which is localhost Port 5000 I'm going
10:55 - to open up my Postman software I'm going
10:57 - to click plus here to create a new
10:58 - request I'm going to paste this in
11:00 - change the url to create Dash user
11:03 - change the method here to be post and
11:06 - then I'm going to go to where it says
11:07 - body because this is where I'm going to
11:08 - include my Json data I'm going to change
11:11 - this to say raw data I'm going to go
11:13 - here to text and change this to not
11:15 - JavaScript but Json I'm going to pass a
11:17 - Json object so the way I do that is have
11:19 - a set of curly braces just like my
11:21 - python dictionary I'm then going to go
11:23 - and make a key my key will be username
11:25 - and I'll have this associated with the
11:27 - key or with the value sorry Tim now if I
11:30 - hit send you can see that we get this
11:32 - exact same data back with the status
11:33 - code of 201 and that means that this is
11:36 - working successfully so this is a great
11:38 - tool that you can use to test out your
11:39 - apis as you continue to do more
11:41 - development so with that said that will
11:43 - wrap up this video but I will encourage
11:45 - you to learn more by checking out this
11:46 - video here which is on Fast API or this
11:49 - video here which is creating a more
11:51 - advanced API in flask that uses
11:53 - authentication really The Next Step here
11:55 - is to authenticate your apis and connect
11:57 - them to a database obviously I didn't
11:59 - have time here with that said I hope you
12:01 - enjoyed and I look forward to seeing you
12:03 - in another one

Cleaned transcript:

what is an API well API stands for application programming interface and really this is a set of rules that allow different software systems to communicate with each other an API typically lives on some type of server and will manipulate some kind of database it can handle different requests so if I'm a user utilizing the API I send a request to it my request may contain some different data then the API is going to process this request and return to me a response that response will typically contain data that I was requesting from the API typically your API will manipulate some type of database and allow different access to the database values depending on the set of rules that you set up in this video I'll show you how to set up a simple API using Python and flask in under 10 minutes so that said let's go ahead and get started after a quick word from our sponsor if you're interested in rapidly creating apis then today's sponsored Dream Factory has you covered with Dream Factory you can create fully featured apis in seconds by simply connecting to an a data source Let Me Show You Begin by starting your dream Factory instance logging in and then connecting to a data source for this demo I'll use mongodb I'll fill in my connection details press save and in seconds Dream Factory has created a fully customizable and fully documented rest API that I can now use to access my data look I can query my reviews collection and view a result in a matter of seconds now that my API is created I can go ahead and add authentication by making a new rule connecting that rule to a new application and generating a unique API token now that I have this token I can access my API securely from anywhere look at me doing it here right in Postman now best of all Dream Factory apis are fully customizable can run anywhere and connect to your existing authentication systems like oauth spend less time writing back ends and more time developing beautiful applications by clicking the link in the description and getting started with Dream Factory today thanks again to Dream Factory for sponsor during this video alright so let's begin with our project setup for this video we're going to use flask this is a micro web framework for python that's very popular for doing web development and for creating apis to set up flask we first need to open some kind of terminal window in this case I'm in command prompt if you're on Mac or Linux open your terminal and we're going to type the following command which is PIP install and then flask now this should install the flask framework for you if you're on Mac or Linux you may want to try the PIP 3 command if pip was not working for you and if neither of those commands work I'll leave two videos on the screen that will show you how to fix that pip command now that we have flask installed we're just going to open a python file which I already have here in some kind of directory and we're going to create a basic flask application flask will be the server that's running our API we're going to begin by importing our dependencies we'll say from flask import and then we're going to import flask with a capital request and then the function jsonify which we're going to use to create a Json response now we need to create our flask application so we're going to say app is equal to flask and then underscore underscore name underscore underscore like that and then we're going to run our flask application by saying if underscore underscore name is equal to underscore and square Main app dot run and then debug equal true this will run our flask server now that our flask server is set up and we have the basic initialization what we need to do is create something known as a root now a root is essentially an endpoint this is kind of a location on our API that we can go to to get some kind of data we have different kinds of routes which I'll talk about in a second but for now let's create a simple one and test this out so you can see how it works so to create a root we're going to define a python function we're going to say Define in this case we'll go with something like home inside of our function we'll just return some data that we want the user to have access to when they reach this route so we'll say return and then in this case go with something like home now to make this accessible what we need to do is add a decorators we're going to use an at symbol and say app which is the name of our flask application here so use the same variable name dot root and then we're going to put the path that we want to access in this case we're just going to do slash which will be the default route now the root is really what comes after the slash in your URL address bar so that's what we're setting up here okay let's save our code and let's go ahead and run this to run this we're going to type Python and then main.pi which is the name of my python file if you're on Mac or Linux you're going to use Python 3. okay so let's run that you can see that it's now created a development server for us and I can open this URL by just right clicking on it here in Visual Studio code when I do that you can see that I get home appearing on my screen there you go you just created your first root inside of flask so now that we've created this demo route let's have a look at some other routes that we can create with different HTTP methods now whenever we're writing an API we're working with something known as HTTP which is essentially the way we communicate data over the internet now when we create different API routes we can mark them with different methods now the methods we can use are get post put and delete we have access to a bunch of other ones as well but these are the most common ones now get is used when we want to retrieve some value from the server post is used when we want to create something something new put is used when we want to alter or modify some existing data and delete is used we want to remove or delete data from a database or from whatever resource it is that we're accessing so let's create a more complicated get route here and see how that works so we're going to say at app dot root for this we're going to say slash get Dash user and then I'm going to implement something known as a path parameter now a path parameter is a dynamic value that you can pass in the path of a URL that will be able to access inside of our root so in this case I'm going to say user underscore ID then I'm going to make my function get underscore user and I'm going to accept a variable inside of my function parameters here that's the same as the path parameter I put here now when we do this this essentially means that I can do something like get user slash and then any value I want and this value will be the ID of the user that we're attempting to retrieve right so if I have something like 6226 then that's indicating that I want to retrieve the user with the AI with the ID story of 6226 okay that's a path parameter so how do we access the path parameter well we can just access it directly from here so what I'm going to do is essentially mock some data that we want to return to our user so I can paste this in user data is equal to the following and now I want to talk to you about something known as a query parameter now whenever we are accessing a root we have the ability to pass something known as a query parameter which is essentially an extra value that is included after the main path so if I have my path get Dash user slash one two three if I put a question mark here now I can pass different query parameters so something like extra is equal to hello world okay this is an additional variable that I can pass along to my root so how do I access that from flask well I can do the following I can say extra is equal to request request is the variable I imported up here dot orgs which stores all of my query parameters in a dictionary and then I can use dot get and try to access a parameter or sorry a value like extra okay now that I have extra I can check if this exists so I can say something like if extra then user data add to the extra key is equal 2 extra then I can return my data so I can say return jsonify and then this will be my user underscore data I'll pass the Response Code of 200. so whenever we are returning data from an API we're going to use Json now Json stands for JavaScript object notation which is essentially a collection of key value pairs very similar to a python dictionary so in flask we create a dictionary and then we jsonify that dictionary and that's what we can return to the user this allows flask to actually parse this value and return it as Json data the next value that we pass here is the status code 200 is the default status code of success you can pass other HTTP status codes here as well I won't go through all of them so now that we have this get root let's make sure our server is running so let me just bring up my terminal here and run my server and now we can actually test our get route from the browser by default when you actually type in a URL here in your browser you're going to be sending a get request so notice here that I have the URL of get user and then slash 123 question mark extra equals hello and then it returns to me the Json data of this which has my user ID and then what I passed here inside of the query parameter now that we've had a look at how to make a get root let's have a look at making a post root so to create a post request we'll do a very similar thing to what we did before we'll have an at app dot root we'll go here and we'll say slash and then this can be something like create Dash user however this time since we're not using the default get request we have to actually specify the accepted method for this root so in this case I'm going to put inside of an array here post now this means that I can accept a post request if I wanted to accept both a post request and a get request that I would put both of them inside of here for now all I want to accept is post that will Define my function create underscore user and if I wanted to check inside of this function what the method was that was being used I could do the following I could say if request dot method is equal to post and I would only do this if I had multiple methods but I just wanted to show you you can use request.method which is from this variable right here and it tells you if you're using post get Etc regardless we know it's going to be post what we want to do here is actually receive some data from the request that's in Json format so the user is going to submit us some Json which is kind of the user that want to create so how do we get that well I'm going to say data is equal to request.get underscore Json this is going to give me all the Json data that was passed in the body of the request I'm going to show you how we look at this in a second and what I can do is simply return this back to the user to indicate that this was created successfully so I can say return and then I need to jsonify the data and then I can return the status request of 201 and now we have successfully implemented a post request where we are receiving some Json data from the user obviously I'd probably do something more here like add this to a database but this is just a simple demo okay so now we've created this post request however I can't demo the post request for you in the browser so now we're going to quickly talk about how we can test our apis now there's a variety of different ways we can test our apis but I'm going to recommend we use a tool called Postman so please download this from the link in the description and then open up that software and let's look at how we can call this API alright so my python server is running so I'm going to copy the URL that it's running on right here which is localhost Port 5000 I'm going to open up my Postman software I'm going to click plus here to create a new request I'm going to paste this in change the url to create Dash user change the method here to be post and then I'm going to go to where it says body because this is where I'm going to include my Json data I'm going to change this to say raw data I'm going to go here to text and change this to not JavaScript but Json I'm going to pass a Json object so the way I do that is have a set of curly braces just like my python dictionary I'm then going to go and make a key my key will be username and I'll have this associated with the key or with the value sorry Tim now if I hit send you can see that we get this exact same data back with the status code of 201 and that means that this is working successfully so this is a great tool that you can use to test out your apis as you continue to do more development so with that said that will wrap up this video but I will encourage you to learn more by checking out this video here which is on Fast API or this video here which is creating a more advanced API in flask that uses authentication really The Next Step here is to authenticate your apis and connect them to a database obviously I didn't have time here with that said I hope you enjoyed and I look forward to seeing you in another one
