With timestamps:

00:00 - hello everybody and welcome to another
00:02 - youtube video
00:03 - so in today's video i'm going to be
00:04 - covering while loops now while loops are
00:07 - more general type of loop in c plus plus
00:09 - in just any programming language in
00:11 - general
00:11 - anything you can do with the for loop
00:13 - you can actually replicate with a while
00:15 - loop but a wallop is more powerful can
00:17 - do other things
00:18 - as well so with that said let me talk to
00:20 - you about while loops in
00:21 - this video
00:30 - so before we dive in i'm just going to
00:32 - quickly mention why i haven't covered
00:33 - something called
00:34 - for each loops if you don't know what a
00:36 - 4-h loop is don't worry about it uh
00:38 - it's just something that allows you to
00:40 - iterate by item in an array or some data
00:42 - structure that's
00:43 - iterable again don't worry about that if
00:45 - you don't know what that means the
00:46 - reason i haven't covered that yet is
00:47 - because it uses some more advanced
00:49 - syntax and symbols that we haven't yet
00:51 - seen
00:51 - and so in the interest of not confusing
00:53 - anyone and actually being able to
00:54 - explain the syntax fully
00:56 - i'm going to show that in some later
00:58 - videos anyways in this video we're
01:00 - talking about while loops
01:01 - so let's compare a while loop to a for
01:03 - loop and let's do a quick kind of
01:04 - refresher on for loops
01:06 - so i'm going to type out a for loop here
01:08 - i'm going to say while int i
01:10 - is equal to zero i is less than 10 and
01:13 - then
01:14 - i plus plus and then i'm going to c out
01:17 - and we'll just see out i and then end l
01:20 - all right so this is a basic for loop
01:22 - we're going to print the numbers from 0
01:24 - to 9. we're not going to do 10 because
01:26 - it's i is less than 10 and well that is
01:28 - the fourth we defined our iterator
01:30 - variable
01:30 - we defined our condition this loop runs
01:32 - while this condition is true
01:34 - and then we do something to the variable
01:35 - at the end of the loop so a while loop
01:38 - is actually very similar to a for loop
01:40 - except we're not constrained to the fact
01:42 - of having to use some iterator variable
01:45 - so here we have to decide define some
01:47 - variable right
01:48 - and this variable is what tells us how
01:50 - many times we're looping
01:51 - and if you remember back to the previous
01:53 - video i said you would use a for loop
01:55 - when you know how many times you want to
01:58 - loop so that's great but here we have to
02:00 - know how many times we want to loop like
02:01 - we have to loop 10 times 20 times 30
02:03 - times
02:04 - some number of times we have to define
02:06 - that and even if we're looping through
02:07 - an array we're looping through the
02:08 - number of elements in the array right or
02:10 - some variation of that
02:12 - so now we talk about a well now a wallop
02:15 - is the exact same as this
02:17 - except we don't have this iterator
02:18 - variable that we need to define
02:21 - so what you say when you define a while
02:22 - loop is while you do your open and
02:24 - clothing parentheses
02:25 - and then you have your curly braces like
02:27 - this and while this condition is true
02:30 - whatever is inside of these parentheses
02:32 - right here
02:33 - this loop is going to run so a little
02:36 - bit different than the for loop
02:37 - and then in that you don't have to
02:39 - define these two things right here
02:41 - but you do need some condition now this
02:43 - condition can literally be whatever you
02:45 - want like in this case i'm using true
02:47 - that means i'm going to have an infinite
02:49 - loop here because this while loop will
02:50 - just continually run forever
02:52 - this condition true is always going to
02:54 - be true
02:55 - but if i were to put say false here then
02:58 - well
02:58 - this is going to never run right because
03:01 - this condition is false and it's never
03:02 - going to change to true
03:04 - so the idea behind this while loop is
03:05 - that we don't need to use a condition
03:07 - that depends on some iterator variable
03:10 - we can use some condition
03:12 - that kind of says we don't know how many
03:14 - times we're going to be running
03:16 - now to give you an idea of what i mean
03:18 - by that when you would use a while loop
03:20 - a really classic example is when you're
03:21 - asking user for valid
03:23 - input so you want the user to type a
03:25 - number maybe you want them to type
03:26 - either the number one or the number two
03:28 - those are the only two valid options for
03:30 - whatever program you're writing well you
03:32 - want them to keep or you want them to
03:34 - type in the number one or two like they
03:36 - have to type in that number
03:37 - for your program to continue so you're
03:39 - going to keep asking them to type in the
03:41 - number one or two
03:42 - until eventually they type it in you
03:44 - don't know how many times they're going
03:45 - to give you invalid input you don't know
03:47 - how many times they're not going to give
03:48 - you any input at all
03:49 - so you're going to use a while loop
03:51 - because well you don't know
03:52 - when that condition they typed one or
03:54 - two is going to be true
03:56 - so i'll show you what i mean but i want
03:58 - to show you how we can simulate a for
04:00 - loop
04:00 - with a while loop because again anything
04:02 - you can do with the for loop you can do
04:04 - with
04:04 - a while loop so let me define some
04:06 - iterator i'm going to say int i
04:08 - and then here uh sorry let's make this
04:10 - equal to zero and then as the condition
04:12 - i'm going to say i
04:14 - is less than 10 and then i'm going to
04:16 - say i plus plus
04:18 - and before i do the plus plus i'm just
04:19 - going to see out this exact same thing
04:22 - so let me just run this code here when i
04:25 - do this you're going to see
04:26 - that what we get is 0 to 9 and then we
04:30 - get 0
04:31 - to 9. so the exact same thing happened
04:33 - from both of these statements right here
04:35 - this while loop does the exact same
04:37 - thing that this for loop does
04:39 - now hopefully you can see why i may
04:40 - maybe preferred to use the for loop
04:42 - this is just a bit of a cleaner syntax
04:45 - you don't have to
04:46 - write as many lines of code all of the
04:48 - stuff related to your iterator variables
04:50 - in
04:50 - one line this is kind of the preferred
04:52 - style you should really never write a
04:53 - while loop that's exactly like this it
04:55 - would make
04:56 - much more sense to write a for loop but
04:58 - the idea behind a wallop is it's much
05:00 - more general whereas the for loop is
05:01 - kind of a specific type of loop and just
05:03 - makes things a little bit cleaner
05:04 - when you need this type of functionality
05:07 - so now let's erase this for loop
05:08 - and let me show you a real practical use
05:10 - of a well
05:12 - so we want to get some valid input from
05:14 - the user
05:15 - so we're going to ask the user to type
05:16 - in some number we're going to store
05:18 - whatever number they type in
05:19 - and we're going to check if that number
05:21 - is equal to whatever options we have so
05:23 - in this case let's say
05:24 - one or two so let's do this i'm going to
05:27 - clear out the swallow
05:29 - and i'm just going to set the condition
05:30 - for my wallet to be equal to true to
05:32 - start
05:32 - i'm going to make a variable here i'm
05:34 - going to say int input we'll just leave
05:36 - it undefined for right now
05:38 - and then i'm gonna ask the user to type
05:39 - something in so i'm gonna say co
05:41 - i'm gonna say type the number
05:44 - one or two colon okay then i'm gonna say
05:48 - c in
05:49 - and i'm gonna see in to the variable
05:52 - input so what i'm gonna do now is i want
05:54 - to check
05:55 - if this input is equal to one or two if
05:58 - it's equal to one or two i can stop my
06:00 - loop because they've typed in valid
06:01 - input
06:02 - if it's not equal to one or two then we
06:03 - need to keep looping keep asking them to
06:05 - type in
06:06 - something valid now for this example
06:08 - here i'm going to kind of ignore the
06:09 - fact that the user could type in a
06:10 - string
06:11 - or something that's not a number we're
06:12 - just not going to deal with handling
06:14 - that right now
06:14 - we're going to assume they give us some
06:16 - number and we're just going to check if
06:17 - that number is equal to 1 or 2.
06:19 - so i'm going to say wow and in this case
06:21 - the input
06:23 - is not equal to 1 and
06:26 - the input is not equal to 2. so what
06:29 - we're pretty much saying here is
06:30 - while the input is not equal to 1 and
06:33 - not equal to two
06:34 - keep looping so if at any point in time
06:35 - they type in one or they type in two
06:37 - then we're gonna stop
06:39 - and just to show you a little trick here
06:40 - if you wanna see what needs to be true
06:42 - for the loop to stop so like the
06:44 - opposite of this like you wanna know the
06:46 - condition that has to be true
06:48 - for the loop to stop running then what
06:50 - you can do is apply a not
06:51 - to this condition so if i copy all this
06:54 - and i put this down here
06:55 - and apply a knot to it then what this
06:57 - gives me if i have the knot
06:58 - is i take the knot apply it to the left
07:00 - apply to the right and then swap the
07:02 - logical operator
07:03 - so that's going to give me input is
07:06 - equal to 1
07:07 - or input is equal to 2 so this means if
07:10 - the input's equal to 1 or the input's
07:12 - equal to 2 this while loop stops and
07:14 - that's because when you apply the not to
07:16 - this condition
07:17 - well that's what it tells you right
07:18 - because if this is not true
07:20 - then that means the loop stops running
07:22 - so if this is true this condition right
07:23 - here the loop will stop right
07:25 - so hopefully that makes it clear but
07:26 - just a little trick in case you have
07:27 - difficulty reading some of these
07:29 - conditions
07:30 - but anyways that's what it means now as
07:32 - i said here when we start out input
07:34 - it doesn't really have a value so we
07:36 - actually don't know what the value of
07:37 - input will be
07:38 - so just to kind of safeguard us a little
07:39 - bit i'm going to set input equal to
07:41 - negative 1 to start
07:42 - and we're just going to keep asking the
07:44 - user to type something in so
07:46 - this is not necessarily the best
07:47 - practice to do this but for the purpose
07:49 - of this example
07:50 - i'm just going to do it this way anyways
07:52 - let me go to my terminal now
07:54 - the reason i have to go to my terminal
07:56 - and i can't run this in sublime text
07:58 - is because sublime text is not capable
08:00 - of actually capturing user input at
08:02 - least in c
08:02 - plus plus uh it will kind of work but
08:05 - then it will break halfway through
08:07 - anyways i have to go here and do it so
08:08 - i'm going to compile my program
08:11 - i'm going to say tutorial 11 and then
08:13 - ask me to type the number one or two
08:15 - so if i type three asked me to type
08:17 - another one type four
08:19 - asked me to keep typing i type one boom
08:22 - we're done
08:23 - run this again i type two we're done run
08:25 - this again i type a number another
08:26 - number type two
08:28 - we're done so you can see in every
08:29 - single one of these programs i typed a
08:31 - different number of numbers right
08:33 - like the loop ran a different number of
08:35 - times and that is where a while loop is
08:37 - helpful because we don't know at the
08:38 - beginning of the program how many times
08:40 - i'm going to make a mistake or not give
08:41 - something valid
08:42 - and so that's why we use a while loop so
08:45 - hopefully that kind of clears it up
08:46 - but now i'm going to show you another
08:48 - way that we can end a while loop
08:50 - or a for loop so the next two things i'm
08:52 - going to show you here
08:53 - are called the break and continue
08:55 - keyword very important i probably should
08:57 - have shown them in the previous video
08:58 - and they apply to both a while loop and
09:00 - a for loop
09:02 - so i'm going to change this now to be
09:03 - while true i'm going to show you
09:05 - how even though we have a true here we
09:07 - can actually end
09:08 - this while loop from inside of it this
09:11 - is kind of just a different pattern or
09:12 - paradigm
09:13 - of doing things sometimes there's like
09:16 - reasons why you would want to do this so
09:18 - it is
09:18 - very important that you understand the
09:20 - break and continue keyword
09:22 - anyways let me show it to you so i want
09:24 - to end this
09:25 - while now there's this keyword it's
09:27 - called break you can see how it's
09:28 - highlighting kind of here in red
09:30 - whenever your program hits a break
09:32 - keyword it's going to break out of the
09:34 - closest loop that
09:36 - that it's inside of what i mean by this
09:38 - is that when you see break it's going to
09:40 - look kind of
09:40 - outside of the break keyword and find
09:42 - whatever loop it's
09:44 - inside of the closest loop it finds
09:46 - because you can nest
09:47 - loops inside of each other it's going to
09:49 - break and by break just immediately end
09:52 - so anything after the break keyword say
09:55 - i see out like hi
09:56 - will not run because immediately when
09:58 - you hit this keyword as soon as the
10:00 - program sees this
10:01 - boom loop is done anything after is not
10:04 - going to continue running
10:05 - even if you're in a for loop the entire
10:06 - for loop is finished running doesn't
10:08 - matter what the i variable was at
10:10 - that is what the break keyword does so
10:12 - to use the break keyword well i only
10:14 - want to break
10:15 - when something happens right when a
10:17 - condition is true so i'm going to say
10:18 - if now and we're going to change this
10:20 - we're going to say if
10:22 - input is equal to 1 or
10:25 - input is equal to 2
10:28 - then break so now notice how this
10:31 - condition here
10:32 - is different than the condition i put up
10:34 - here it's the negation of it right now
10:36 - if i apply a not to this that's going to
10:38 - give me the while of condition i should
10:40 - have
10:41 - so here we're typing in the condition
10:42 - that needs to occur for us to end the
10:45 - loop
10:46 - not the condition that needs to occur
10:47 - for us to continue running the loop
10:49 - so in a lot of cases it's much simpler
10:51 - to write this condition
10:53 - the one that just uses the or doesn't
10:55 - have the and and the not equal to
10:57 - than it is to write the other version
10:59 - right so that is sometimes why use a
11:01 - break keyword to
11:02 - simplify the expression or simplify the
11:05 - condition
11:06 - that you're using to kind of control the
11:07 - flow of the wallet hopefully that makes
11:09 - sense but that's one of the reasons why
11:11 - you'd use a break keyword
11:12 - because oftentimes it's easier just to
11:14 - break out when something happens
11:16 - than it is to write all of the things
11:17 - that need to be true to continue running
11:19 - the loop
11:20 - anyways let's just see if this works so
11:22 - let's go here
11:24 - let's run this or compile and then run
11:27 - i'm gonna type
11:27 - a number four three two boom we're done
11:31 - type a number one we're done so it is
11:32 - working again does the exact same thing
11:34 - as the previous loop
11:36 - instead now we are using brick so that's
11:38 - how the break keyword works
11:40 - now you can use multiple instances of
11:42 - the break keyword right maybe i have
11:43 - another condition
11:44 - if the input is equal to four then maybe
11:48 - i want to see out
11:50 - cool and then i want to break that's
11:53 - totally fine
11:53 - now i have two break conditions so if
11:55 - either of these things are true
11:57 - i want to break and really we can change
11:59 - this to an else if right
12:01 - uh and the reason we could change that
12:02 - to an elsif is because if this is true
12:04 - well we're just going to break so
12:06 - we can change it to an l-sit now it
12:07 - doesn't matter if it's an if or if it's
12:09 - elsif
12:09 - but we could change it just showing you
12:11 - that there so let's run this
12:13 - let's go tutorial 11. let's type a
12:15 - number five let's type four
12:17 - says cool and we end so you go this
12:20 - indeed works so that's the break keyword
12:23 - and just like you can use this in a for
12:24 - loop you can use this or sorry just like
12:26 - you can use this in a while loop you can
12:27 - use this in a for loop
12:28 - so we will continue in one second but i
12:30 - need to quickly thank the sponsor of
12:31 - this video and this series which is algo
12:34 - expert algo expert is the best platform
12:36 - to use to prepare for your software
12:37 - engineering coding interviews
12:38 - they have over 140 coding interview
12:40 - questions and more are constantly being
12:42 - added to the platform
12:44 - check out algo expert from the link in
12:45 - the description and use the code tech
12:47 - with tim for a discount on
12:48 - the platform so let me delete all this
12:51 - let me quickly show it to you in a for
12:53 - loop
12:53 - so i say int i equals 0 i
12:57 - less than 5 i plus plus i'll say if
13:02 - and let's just go i equals
13:05 - equals two then c out
13:09 - done and then break
13:12 - and we will just c out i
13:15 - and and l okay so
13:18 - let's just run this for loop and i'll
13:20 - just show you that this works i can run
13:21 - this in sublime text
13:22 - so notice that we break as soon as we
13:24 - get to 2 the reason we broke at 2
13:26 - is because while this condition was true
13:28 - we saw the break keyword and
13:30 - we ended now it's important to note that
13:32 - again you're breaking out of the most
13:33 - recent loop so if i wrap
13:35 - a while loop so i say like while true
13:39 - and then i wrap the for loop inside of
13:42 - this well
13:42 - totally valid to do this by the way you
13:45 - can put a for loop in a while loop
13:46 - there's there's nothing wrong with that
13:48 - if i do this now when i hit this break
13:50 - keyword i'm just breaking out of this
13:52 - for loop
13:52 - and so what will continue to happen here
13:55 - is i will keep printing
13:56 - 0 1 2 0 1 2 0 1 2 because this for loop
14:00 - will keep running because we're in an
14:02 - infinite while loop
14:03 - and then what's going to happen is well
14:05 - it's going to run until it gets to 2
14:06 - it's going to break at 2 and then
14:07 - continue running again continue running
14:09 - again
14:09 - so let's make this non-infinite loop
14:12 - let's say
14:15 - and j equals zero oops i keep typing
14:18 - nine
14:19 - uh we'll say while j is less than three
14:23 - and then at the bottom of the loop we'll
14:25 - say j plus plus
14:26 - and there we go so now let's run this
14:29 - and let's see what our output actually
14:31 - is so let me just move this up
14:33 - let's run we get zero one two done zero
14:35 - on two
14:36 - done zero one two right and there you go
14:38 - because we're printing done whenever we
14:40 - break this
14:41 - loop and well this for loop runs three
14:44 - times
14:44 - so hopefully that's kind of clear but
14:46 - that's how the break keyword works
14:48 - now we can talk about the continue
14:50 - keyword so the continue keyword is kind
14:52 - of a way of continuing
14:54 - looping but skipping the rest of the
14:56 - stuff for the current iteration
14:58 - so i'm going to clear this kind of
15:00 - wrapped stuff because it's a little bit
15:01 - hard to read
15:03 - i'm going to make another for loop so
15:05 - we're going to say 4
15:06 - and i equals 0. we'll say i is less than
15:09 - 10
15:10 - and we'll say i plus plus now for this
15:13 - right
15:14 - i want to say skip every even number or
15:16 - every odd number or maybe
15:18 - when it's a certain number i want to do
15:20 - something when it's another number i
15:21 - don't want to do something maybe for the
15:23 - number like 8 and 9 i don't want to
15:24 - print it out but all the other numbers i
15:26 - want to print it out
15:27 - now you could try to change this kind of
15:29 - iterator to do that for you
15:30 - but i'm going to show you how the
15:31 - continue keyword works regardless
15:33 - because there's a lot of use cases where
15:34 - you do want to use it
15:36 - so what i'm going to do now is i'm going
15:37 - to say if and here i'll say if
15:40 - i is equal to 9 or i is equal to 7
15:45 - then continue now whenever you see the
15:48 - continue keyword
15:50 - what this will do is immediately bring
15:51 - you to the next iteration of the loop so
15:54 - as soon as you see this the loop doesn't
15:56 - necessarily
15:56 - end but it just goes to the next step so
15:59 - if we're
16:00 - at nine or sorry let's seven is a better
16:02 - example if we're at seven we're just
16:03 - immediately going to go to iteration
16:05 - eight and start the for loop from the
16:06 - very beginning
16:07 - that means anything underneath here
16:10 - so say c outing i is not going to happen
16:13 - so
16:13 - if this condition is true and we
16:16 - continue
16:16 - we don't print out the number so let me
16:18 - show you what i mean
16:20 - let's run this here you're gonna get
16:21 - zero one two three four five
16:24 - and notice we skip seven and we skip
16:27 - nine that is because we have the
16:29 - continue so as soon as you hit the
16:30 - continue
16:31 - you skip anything afterwards hopefully
16:34 - that's clear but very useful because a
16:35 - lot of times
16:36 - when you're looping you want to check
16:38 - some type of condition or do something
16:40 - but if that is true maybe there's a
16:41 - bunch of operations you can skip
16:43 - and so rather than say wrapping the
16:46 - opposite condition
16:47 - which i'm going to show you one second
16:49 - you can use this continue keyword
16:51 - so if you didn't have this continue
16:52 - keyword and you wanted to do what i just
16:55 - showed you
16:55 - you would have to do this in kind of a
16:56 - very backwards way you'd have to say
16:59 - if i equals equals 9 or i equals equals
17:02 - 7 then you could like do nothing inside
17:04 - of here
17:05 - and then you could write an else
17:07 - statement here
17:08 - and then in the else you could print
17:10 - this out so only if i is not equal to 9
17:12 - or not equal to 7 are you doing this
17:15 - right that would work but that just
17:17 - doesn't really make much sense so what a
17:18 - lot of people would do
17:20 - is they would say okay well instead of
17:21 - doing that i'm going to remove this
17:22 - continue because imagine we don't have
17:24 - this continue keyword
17:26 - i'm going to put this inside of here i'm
17:29 - going to change this now to say if i
17:31 - is not equal to 9 and i
17:34 - is not equal to 7 right so now what
17:37 - you're saying is okay
17:38 - only if i is not equal to 9 or not equal
17:40 - to 7 am i doing this
17:42 - but again this is kind of like a
17:43 - backwards way of doing this because
17:45 - really you should do it in the opposite
17:46 - order you should have your condition be
17:48 - simpler so you say if i is equal to 9 or
17:50 - i is equal to 7
17:51 - we're just going to continue the loop as
17:53 - opposed to here while
17:55 - where you're checking every single time
17:57 - if i is equal to 9
17:59 - where i is equal to seven and only if
18:00 - it's not equal to those two values are
18:02 - you printing these f
18:03 - so you can make an argument for why one
18:05 - or the other is better let's just run
18:06 - this and make sure it does indeed work
18:08 - but continue is very useful and you'll
18:10 - see why it becomes useful because now
18:13 - if i wanted to do like a ton of
18:14 - different things right say i wanted to
18:15 - do this like i wanted to print this out
18:18 - a bunch of times now again we would just
18:20 - use a loop to do this but imagine we had
18:22 - like
18:22 - you know 200 lines of code or something
18:24 - inside of this for loop
18:25 - i don't really want to have all of these
18:27 - lines of code indented
18:29 - as soon as i add layers of indentation
18:31 - my code just becomes a little bit more
18:32 - difficult to read
18:33 - it's not kind of clean and nice and so
18:36 - all of the stuff that i want to happen
18:37 - i'm putting inside of this
18:38 - if statement when really it would be
18:40 - better if i could flip this around
18:43 - so i could put all of my code not
18:45 - indented although i am going to have to
18:47 - unindent this
18:48 - so if i can move it all unindented
18:51 - and then i can change this here so the
18:54 - only thing that's indented
18:56 - is that continue right that's just like
18:58 - a little bit cleaner and a better style
19:00 - when it comes to coding now i'm getting
19:01 - a bit of my
19:02 - a bit ahead of myself here because you
19:03 - know we don't really care about industry
19:04 - standards and that kind of stuff when
19:06 - we're learning a programming language
19:07 - but just something to keep in mind when
19:09 - this continue word will actually be
19:10 - useful
19:11 - because a lot of people i think see
19:12 - these types of syntax or words and are
19:14 - like well why are you showing this to me
19:15 - i'm like never going to use that
19:17 - okay so sorry for the abrupt cut here
19:19 - but now i want to talk to you about
19:20 - something called the do
19:21 - while loop now the do while loop allows
19:25 - you to make sure that whatever's in your
19:26 - while loop
19:27 - runs at least one time to show you why
19:30 - this is useful
19:31 - let's consider the following example
19:33 - let's say i have some variable i'm going
19:35 - to say
19:35 - int x is equal to 10. okay so into x is
19:39 - equal to 10
19:40 - and then what i want to do is i'm going
19:41 - to say while x is
19:43 - less than 10 i want the user to type in
19:46 - a number so the idea behind my program
19:48 - here is i'm going to ask the user to add
19:50 - some numbers to
19:50 - x and while the value of x is less than
19:54 - what it started at so it's less than 10
19:55 - i want them to keep adding numbers
19:57 - essentially i want them to make x
19:58 - greater than 10 right however we're
20:01 - sorry greater than or equal to 10. so
20:03 - they need to type in anything that's
20:04 - zero or above
20:06 - however if i run this while loop right
20:08 - now like let's put something inside of
20:10 - here
20:11 - this isn't going to run the reason it
20:12 - won't run is because well 10 is not less
20:14 - than 10.
20:14 - and so the initial condition is false
20:16 - which means i'm never going to enter
20:17 - this wallet
20:18 - anyways let's just say int add uh like
20:21 - that
20:21 - and then we can say c out
20:24 - we'll say type a number and then to add
20:29 - to x colon okay and then we'll say c
20:32 - in and we will see in to add
20:36 - and then we will say x plus equals add
20:39 - and then we will just c out
20:43 - x is colon x
20:46 - and then and l okay so i know i went
20:49 - kind of fast there but the idea is we're
20:50 - asking user type a number they type in a
20:52 - number we store it in add we then add
20:54 - whatever number they typed into
20:56 - x we print out what x is if x is less
20:58 - than 10 we continue running
21:00 - so we want this to run at least one time
21:02 - because what might happen right is if
21:04 - the user types in like negative one
21:06 - then that means that we're going to keep
21:07 - running this while loop so after the
21:09 - initial entry
21:10 - they may be in this while loop many
21:11 - times but they need to enter the while
21:13 - so to do that we need to make sure we
21:15 - can enter inside of here
21:16 - because if i run this go to my terminal
21:19 - and
21:20 - g plus plus and then run tutorial 11
21:23 - nothing happens one way that we can make
21:26 - this run
21:27 - is we could just copy all this code
21:28 - right so we can copy all of this
21:30 - we could put this here and then let me
21:33 - just
21:34 - erase the initialization of add just
21:35 - because i can't re-initialize a variable
21:37 - once i've initialized it
21:39 - and now this will actually run what i've
21:41 - done is i've taken all the code
21:42 - copied outside of here so this will
21:44 - happen one time we'll then check if x is
21:46 - less than 10
21:47 - if it is we'll continue repeating these
21:48 - steps right here so let's try this
21:51 - let's compile let's run it says type a
21:54 - number let's type like negative two
21:56 - and then it's going to keep asking us to
21:57 - type numbers so if i type four boom
21:59 - we're done
21:59 - however this is not very good this is
22:01 - not good practice i don't want to copy
22:02 - all of this code and what if the code
22:04 - inside of here was again like 10
22:05 - 000 lines or something i'm exaggerating
22:07 - but what if it was very large
22:09 - i don't want to copy all of it
22:10 - beforehand so this is where the do
22:12 - while loop comes in so keep in mind this
22:14 - is what we had to do previously
22:16 - now if we use the do while loop what we
22:19 - can do
22:20 - is ensure that our loop will run at
22:22 - least one time so i'm going to copy
22:24 - all of this i'm going to put it inside
22:26 - of the do
22:28 - so let's indent all of this and then i'm
22:30 - going to put my condition i'm going to
22:32 - say while x is less than 10.
22:34 - so this code right here is equivalent to
22:37 - all of this minus the index equals 10
22:40 - that we wrote above
22:41 - and what this does is it says all right
22:42 - we're going to do this no matter what we
22:44 - do this
22:45 - at least one time then after we do this
22:48 - we check
22:48 - if we should do it again while this
22:51 - thing is true
22:52 - do all of this stuff inside of here but
22:54 - it ensures that we do it at least
22:55 - once and intuitively it kind of reads
22:57 - that way right because we do it
22:59 - then we check then we do it then we
23:01 - check whereas up here we're checking
23:03 - then we're doing we're checking that
23:04 - we're doing so it's kind of in that
23:06 - opposite order
23:07 - which allows us to have this happen
23:08 - immediately at least one time
23:10 - so let's erase all of this and let's now
23:12 - see if this works
23:14 - so let's go to our terminal let's
23:16 - compile and
23:17 - what is the problem oh i need a
23:18 - semicolon sorry just add a semicolon to
23:20 - the end of the wall there
23:22 - let's compile let's run and now it asks
23:25 - us to type a number so if i type number
23:28 - like negative six it's gonna say x is
23:30 - four negative two
23:31 - x is two uh that's six and then eleven
23:34 - and we stop
23:35 - running so that is the do while loop
23:38 - really straightforward you just put the
23:39 - do whatever you want to happen and then
23:41 - you add the condition
23:42 - afterwards after the while statement so
23:44 - with that said i think i'm going to end
23:46 - the video here
23:47 - i hope you guys found this helpful if
23:48 - you did make sure to leave a like
23:49 - subscribe
23:50 - i will see you in another youtube video

Cleaned transcript:

hello everybody and welcome to another youtube video so in today's video i'm going to be covering while loops now while loops are more general type of loop in c plus plus in just any programming language in general anything you can do with the for loop you can actually replicate with a while loop but a wallop is more powerful can do other things as well so with that said let me talk to you about while loops in this video so before we dive in i'm just going to quickly mention why i haven't covered something called for each loops if you don't know what a 4h loop is don't worry about it uh it's just something that allows you to iterate by item in an array or some data structure that's iterable again don't worry about that if you don't know what that means the reason i haven't covered that yet is because it uses some more advanced syntax and symbols that we haven't yet seen and so in the interest of not confusing anyone and actually being able to explain the syntax fully i'm going to show that in some later videos anyways in this video we're talking about while loops so let's compare a while loop to a for loop and let's do a quick kind of refresher on for loops so i'm going to type out a for loop here i'm going to say while int i is equal to zero i is less than 10 and then i plus plus and then i'm going to c out and we'll just see out i and then end l all right so this is a basic for loop we're going to print the numbers from 0 to 9. we're not going to do 10 because it's i is less than 10 and well that is the fourth we defined our iterator variable we defined our condition this loop runs while this condition is true and then we do something to the variable at the end of the loop so a while loop is actually very similar to a for loop except we're not constrained to the fact of having to use some iterator variable so here we have to decide define some variable right and this variable is what tells us how many times we're looping and if you remember back to the previous video i said you would use a for loop when you know how many times you want to loop so that's great but here we have to know how many times we want to loop like we have to loop 10 times 20 times 30 times some number of times we have to define that and even if we're looping through an array we're looping through the number of elements in the array right or some variation of that so now we talk about a well now a wallop is the exact same as this except we don't have this iterator variable that we need to define so what you say when you define a while loop is while you do your open and clothing parentheses and then you have your curly braces like this and while this condition is true whatever is inside of these parentheses right here this loop is going to run so a little bit different than the for loop and then in that you don't have to define these two things right here but you do need some condition now this condition can literally be whatever you want like in this case i'm using true that means i'm going to have an infinite loop here because this while loop will just continually run forever this condition true is always going to be true but if i were to put say false here then well this is going to never run right because this condition is false and it's never going to change to true so the idea behind this while loop is that we don't need to use a condition that depends on some iterator variable we can use some condition that kind of says we don't know how many times we're going to be running now to give you an idea of what i mean by that when you would use a while loop a really classic example is when you're asking user for valid input so you want the user to type a number maybe you want them to type either the number one or the number two those are the only two valid options for whatever program you're writing well you want them to keep or you want them to type in the number one or two like they have to type in that number for your program to continue so you're going to keep asking them to type in the number one or two until eventually they type it in you don't know how many times they're going to give you invalid input you don't know how many times they're not going to give you any input at all so you're going to use a while loop because well you don't know when that condition they typed one or two is going to be true so i'll show you what i mean but i want to show you how we can simulate a for loop with a while loop because again anything you can do with the for loop you can do with a while loop so let me define some iterator i'm going to say int i and then here uh sorry let's make this equal to zero and then as the condition i'm going to say i is less than 10 and then i'm going to say i plus plus and before i do the plus plus i'm just going to see out this exact same thing so let me just run this code here when i do this you're going to see that what we get is 0 to 9 and then we get 0 to 9. so the exact same thing happened from both of these statements right here this while loop does the exact same thing that this for loop does now hopefully you can see why i may maybe preferred to use the for loop this is just a bit of a cleaner syntax you don't have to write as many lines of code all of the stuff related to your iterator variables in one line this is kind of the preferred style you should really never write a while loop that's exactly like this it would make much more sense to write a for loop but the idea behind a wallop is it's much more general whereas the for loop is kind of a specific type of loop and just makes things a little bit cleaner when you need this type of functionality so now let's erase this for loop and let me show you a real practical use of a well so we want to get some valid input from the user so we're going to ask the user to type in some number we're going to store whatever number they type in and we're going to check if that number is equal to whatever options we have so in this case let's say one or two so let's do this i'm going to clear out the swallow and i'm just going to set the condition for my wallet to be equal to true to start i'm going to make a variable here i'm going to say int input we'll just leave it undefined for right now and then i'm gonna ask the user to type something in so i'm gonna say co i'm gonna say type the number one or two colon okay then i'm gonna say c in and i'm gonna see in to the variable input so what i'm gonna do now is i want to check if this input is equal to one or two if it's equal to one or two i can stop my loop because they've typed in valid input if it's not equal to one or two then we need to keep looping keep asking them to type in something valid now for this example here i'm going to kind of ignore the fact that the user could type in a string or something that's not a number we're just not going to deal with handling that right now we're going to assume they give us some number and we're just going to check if that number is equal to 1 or 2. so i'm going to say wow and in this case the input is not equal to 1 and the input is not equal to 2. so what we're pretty much saying here is while the input is not equal to 1 and not equal to two keep looping so if at any point in time they type in one or they type in two then we're gonna stop and just to show you a little trick here if you wanna see what needs to be true for the loop to stop so like the opposite of this like you wanna know the condition that has to be true for the loop to stop running then what you can do is apply a not to this condition so if i copy all this and i put this down here and apply a knot to it then what this gives me if i have the knot is i take the knot apply it to the left apply to the right and then swap the logical operator so that's going to give me input is equal to 1 or input is equal to 2 so this means if the input's equal to 1 or the input's equal to 2 this while loop stops and that's because when you apply the not to this condition well that's what it tells you right because if this is not true then that means the loop stops running so if this is true this condition right here the loop will stop right so hopefully that makes it clear but just a little trick in case you have difficulty reading some of these conditions but anyways that's what it means now as i said here when we start out input it doesn't really have a value so we actually don't know what the value of input will be so just to kind of safeguard us a little bit i'm going to set input equal to negative 1 to start and we're just going to keep asking the user to type something in so this is not necessarily the best practice to do this but for the purpose of this example i'm just going to do it this way anyways let me go to my terminal now the reason i have to go to my terminal and i can't run this in sublime text is because sublime text is not capable of actually capturing user input at least in c plus plus uh it will kind of work but then it will break halfway through anyways i have to go here and do it so i'm going to compile my program i'm going to say tutorial 11 and then ask me to type the number one or two so if i type three asked me to type another one type four asked me to keep typing i type one boom we're done run this again i type two we're done run this again i type a number another number type two we're done so you can see in every single one of these programs i typed a different number of numbers right like the loop ran a different number of times and that is where a while loop is helpful because we don't know at the beginning of the program how many times i'm going to make a mistake or not give something valid and so that's why we use a while loop so hopefully that kind of clears it up but now i'm going to show you another way that we can end a while loop or a for loop so the next two things i'm going to show you here are called the break and continue keyword very important i probably should have shown them in the previous video and they apply to both a while loop and a for loop so i'm going to change this now to be while true i'm going to show you how even though we have a true here we can actually end this while loop from inside of it this is kind of just a different pattern or paradigm of doing things sometimes there's like reasons why you would want to do this so it is very important that you understand the break and continue keyword anyways let me show it to you so i want to end this while now there's this keyword it's called break you can see how it's highlighting kind of here in red whenever your program hits a break keyword it's going to break out of the closest loop that that it's inside of what i mean by this is that when you see break it's going to look kind of outside of the break keyword and find whatever loop it's inside of the closest loop it finds because you can nest loops inside of each other it's going to break and by break just immediately end so anything after the break keyword say i see out like hi will not run because immediately when you hit this keyword as soon as the program sees this boom loop is done anything after is not going to continue running even if you're in a for loop the entire for loop is finished running doesn't matter what the i variable was at that is what the break keyword does so to use the break keyword well i only want to break when something happens right when a condition is true so i'm going to say if now and we're going to change this we're going to say if input is equal to 1 or input is equal to 2 then break so now notice how this condition here is different than the condition i put up here it's the negation of it right now if i apply a not to this that's going to give me the while of condition i should have so here we're typing in the condition that needs to occur for us to end the loop not the condition that needs to occur for us to continue running the loop so in a lot of cases it's much simpler to write this condition the one that just uses the or doesn't have the and and the not equal to than it is to write the other version right so that is sometimes why use a break keyword to simplify the expression or simplify the condition that you're using to kind of control the flow of the wallet hopefully that makes sense but that's one of the reasons why you'd use a break keyword because oftentimes it's easier just to break out when something happens than it is to write all of the things that need to be true to continue running the loop anyways let's just see if this works so let's go here let's run this or compile and then run i'm gonna type a number four three two boom we're done type a number one we're done so it is working again does the exact same thing as the previous loop instead now we are using brick so that's how the break keyword works now you can use multiple instances of the break keyword right maybe i have another condition if the input is equal to four then maybe i want to see out cool and then i want to break that's totally fine now i have two break conditions so if either of these things are true i want to break and really we can change this to an else if right uh and the reason we could change that to an elsif is because if this is true well we're just going to break so we can change it to an lsit now it doesn't matter if it's an if or if it's elsif but we could change it just showing you that there so let's run this let's go tutorial 11. let's type a number five let's type four says cool and we end so you go this indeed works so that's the break keyword and just like you can use this in a for loop you can use this or sorry just like you can use this in a while loop you can use this in a for loop so we will continue in one second but i need to quickly thank the sponsor of this video and this series which is algo expert algo expert is the best platform to use to prepare for your software engineering coding interviews they have over 140 coding interview questions and more are constantly being added to the platform check out algo expert from the link in the description and use the code tech with tim for a discount on the platform so let me delete all this let me quickly show it to you in a for loop so i say int i equals 0 i less than 5 i plus plus i'll say if and let's just go i equals equals two then c out done and then break and we will just c out i and and l okay so let's just run this for loop and i'll just show you that this works i can run this in sublime text so notice that we break as soon as we get to 2 the reason we broke at 2 is because while this condition was true we saw the break keyword and we ended now it's important to note that again you're breaking out of the most recent loop so if i wrap a while loop so i say like while true and then i wrap the for loop inside of this well totally valid to do this by the way you can put a for loop in a while loop there's there's nothing wrong with that if i do this now when i hit this break keyword i'm just breaking out of this for loop and so what will continue to happen here is i will keep printing 0 1 2 0 1 2 0 1 2 because this for loop will keep running because we're in an infinite while loop and then what's going to happen is well it's going to run until it gets to 2 it's going to break at 2 and then continue running again continue running again so let's make this noninfinite loop let's say and j equals zero oops i keep typing nine uh we'll say while j is less than three and then at the bottom of the loop we'll say j plus plus and there we go so now let's run this and let's see what our output actually is so let me just move this up let's run we get zero one two done zero on two done zero one two right and there you go because we're printing done whenever we break this loop and well this for loop runs three times so hopefully that's kind of clear but that's how the break keyword works now we can talk about the continue keyword so the continue keyword is kind of a way of continuing looping but skipping the rest of the stuff for the current iteration so i'm going to clear this kind of wrapped stuff because it's a little bit hard to read i'm going to make another for loop so we're going to say 4 and i equals 0. we'll say i is less than 10 and we'll say i plus plus now for this right i want to say skip every even number or every odd number or maybe when it's a certain number i want to do something when it's another number i don't want to do something maybe for the number like 8 and 9 i don't want to print it out but all the other numbers i want to print it out now you could try to change this kind of iterator to do that for you but i'm going to show you how the continue keyword works regardless because there's a lot of use cases where you do want to use it so what i'm going to do now is i'm going to say if and here i'll say if i is equal to 9 or i is equal to 7 then continue now whenever you see the continue keyword what this will do is immediately bring you to the next iteration of the loop so as soon as you see this the loop doesn't necessarily end but it just goes to the next step so if we're at nine or sorry let's seven is a better example if we're at seven we're just immediately going to go to iteration eight and start the for loop from the very beginning that means anything underneath here so say c outing i is not going to happen so if this condition is true and we continue we don't print out the number so let me show you what i mean let's run this here you're gonna get zero one two three four five and notice we skip seven and we skip nine that is because we have the continue so as soon as you hit the continue you skip anything afterwards hopefully that's clear but very useful because a lot of times when you're looping you want to check some type of condition or do something but if that is true maybe there's a bunch of operations you can skip and so rather than say wrapping the opposite condition which i'm going to show you one second you can use this continue keyword so if you didn't have this continue keyword and you wanted to do what i just showed you you would have to do this in kind of a very backwards way you'd have to say if i equals equals 9 or i equals equals 7 then you could like do nothing inside of here and then you could write an else statement here and then in the else you could print this out so only if i is not equal to 9 or not equal to 7 are you doing this right that would work but that just doesn't really make much sense so what a lot of people would do is they would say okay well instead of doing that i'm going to remove this continue because imagine we don't have this continue keyword i'm going to put this inside of here i'm going to change this now to say if i is not equal to 9 and i is not equal to 7 right so now what you're saying is okay only if i is not equal to 9 or not equal to 7 am i doing this but again this is kind of like a backwards way of doing this because really you should do it in the opposite order you should have your condition be simpler so you say if i is equal to 9 or i is equal to 7 we're just going to continue the loop as opposed to here while where you're checking every single time if i is equal to 9 where i is equal to seven and only if it's not equal to those two values are you printing these f so you can make an argument for why one or the other is better let's just run this and make sure it does indeed work but continue is very useful and you'll see why it becomes useful because now if i wanted to do like a ton of different things right say i wanted to do this like i wanted to print this out a bunch of times now again we would just use a loop to do this but imagine we had like you know 200 lines of code or something inside of this for loop i don't really want to have all of these lines of code indented as soon as i add layers of indentation my code just becomes a little bit more difficult to read it's not kind of clean and nice and so all of the stuff that i want to happen i'm putting inside of this if statement when really it would be better if i could flip this around so i could put all of my code not indented although i am going to have to unindent this so if i can move it all unindented and then i can change this here so the only thing that's indented is that continue right that's just like a little bit cleaner and a better style when it comes to coding now i'm getting a bit of my a bit ahead of myself here because you know we don't really care about industry standards and that kind of stuff when we're learning a programming language but just something to keep in mind when this continue word will actually be useful because a lot of people i think see these types of syntax or words and are like well why are you showing this to me i'm like never going to use that okay so sorry for the abrupt cut here but now i want to talk to you about something called the do while loop now the do while loop allows you to make sure that whatever's in your while loop runs at least one time to show you why this is useful let's consider the following example let's say i have some variable i'm going to say int x is equal to 10. okay so into x is equal to 10 and then what i want to do is i'm going to say while x is less than 10 i want the user to type in a number so the idea behind my program here is i'm going to ask the user to add some numbers to x and while the value of x is less than what it started at so it's less than 10 i want them to keep adding numbers essentially i want them to make x greater than 10 right however we're sorry greater than or equal to 10. so they need to type in anything that's zero or above however if i run this while loop right now like let's put something inside of here this isn't going to run the reason it won't run is because well 10 is not less than 10. and so the initial condition is false which means i'm never going to enter this wallet anyways let's just say int add uh like that and then we can say c out we'll say type a number and then to add to x colon okay and then we'll say c in and we will see in to add and then we will say x plus equals add and then we will just c out x is colon x and then and l okay so i know i went kind of fast there but the idea is we're asking user type a number they type in a number we store it in add we then add whatever number they typed into x we print out what x is if x is less than 10 we continue running so we want this to run at least one time because what might happen right is if the user types in like negative one then that means that we're going to keep running this while loop so after the initial entry they may be in this while loop many times but they need to enter the while so to do that we need to make sure we can enter inside of here because if i run this go to my terminal and g plus plus and then run tutorial 11 nothing happens one way that we can make this run is we could just copy all this code right so we can copy all of this we could put this here and then let me just erase the initialization of add just because i can't reinitialize a variable once i've initialized it and now this will actually run what i've done is i've taken all the code copied outside of here so this will happen one time we'll then check if x is less than 10 if it is we'll continue repeating these steps right here so let's try this let's compile let's run it says type a number let's type like negative two and then it's going to keep asking us to type numbers so if i type four boom we're done however this is not very good this is not good practice i don't want to copy all of this code and what if the code inside of here was again like 10 000 lines or something i'm exaggerating but what if it was very large i don't want to copy all of it beforehand so this is where the do while loop comes in so keep in mind this is what we had to do previously now if we use the do while loop what we can do is ensure that our loop will run at least one time so i'm going to copy all of this i'm going to put it inside of the do so let's indent all of this and then i'm going to put my condition i'm going to say while x is less than 10. so this code right here is equivalent to all of this minus the index equals 10 that we wrote above and what this does is it says all right we're going to do this no matter what we do this at least one time then after we do this we check if we should do it again while this thing is true do all of this stuff inside of here but it ensures that we do it at least once and intuitively it kind of reads that way right because we do it then we check then we do it then we check whereas up here we're checking then we're doing we're checking that we're doing so it's kind of in that opposite order which allows us to have this happen immediately at least one time so let's erase all of this and let's now see if this works so let's go to our terminal let's compile and what is the problem oh i need a semicolon sorry just add a semicolon to the end of the wall there let's compile let's run and now it asks us to type a number so if i type number like negative six it's gonna say x is four negative two x is two uh that's six and then eleven and we stop running so that is the do while loop really straightforward you just put the do whatever you want to happen and then you add the condition afterwards after the while statement so with that said i think i'm going to end the video here i hope you guys found this helpful if you did make sure to leave a like subscribe i will see you in another youtube video
