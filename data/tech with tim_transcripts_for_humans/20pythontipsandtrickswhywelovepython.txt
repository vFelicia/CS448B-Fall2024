With timestamps:

00:00 - in this video I'll be showing you 20
00:01 - Python tips and tricks that let you
00:03 - write faster better and cleaner code
00:05 - these are some of the reasons that
00:06 - people love Python and I'm gonna start
00:08 - us off right away with actually what's
00:10 - considered an easter egg in the python
00:11 - language which is what happens when you
00:13 - import the module called this when we
00:15 - run this it actually brings up what's
00:17 - called B's data Python which I would
00:18 - encourage you to read as we get into the
00:20 - next 19 tips and tricks a quick
00:30 - disclaimer that these tips come in no
00:31 - particular order and random more complex
00:34 - tips will be scattered throughout the
00:35 - video also I'm gonna be using Python
00:37 - version 3.7 for this entire video so if
00:40 - anything's not working for you make sure
00:41 - you're on that current version I'll also
00:43 - be going very quickly so don't feel bad
00:44 - if you need to pause or rewind the video
00:46 - to catch up with what I've done and that
00:48 - leads us to the first tip here that I'm
00:49 - gonna show which is actually how to
00:51 - create an enum in Python now this is
00:53 - more of a simulation than an actual enum
00:55 - but what we can do is create a class
00:57 - which is the name of the enum that we
00:58 - want in this case I've called it enum
01:00 - and then we can list three variables
01:02 - beside each other so in this case I may
01:03 - be Oh Tim bill Joe and set that equal to
01:06 - the range function in Python what this
01:08 - will do is allow Tim to be 0 bill to be
01:10 - 1 and Joe to be 2 so range 0 1 2 all the
01:13 - way up to 3 but not including 3 if we
01:15 - want to Tim to start at the number 1
01:17 - then what we could do obviously is
01:18 - change the range function to be 1 for
01:19 - this works just like in a for loop if I
01:22 - want to access the variable in Unum what
01:24 - I can do is do I am Tim like that and
01:26 - obviously we can check their comparison
01:28 - with the value 1 and see that that is
01:30 - equal to true this next trick I like to
01:32 - call multi-line assignment essentially
01:34 - this is a property of Python that allows
01:36 - us to assign multiple variables in the
01:38 - same line with one equal sign what you
01:40 - can do is you can do something like X
01:41 - comma y equals 1 2 comma 4 and obviously
01:44 - now if we go ahead and decide to print
01:46 - out X Y we can see that we get the
01:48 - values 1 4 what we can also do with this
01:51 - obviously is have more variables so
01:53 - something like X Y Z equals 1 4 7 run
01:56 - not there's nothing wrong with that and
01:57 - then what we can actually do is use this
01:59 - to decompose things like tuples and
02:00 - lists so if I have X Y Z so 3 variables
02:03 - and then I have 3 variables inside my
02:05 - topple so 4 5 6 like that we can
02:07 - decompose the tuples so that is 6 Y is 5
02:10 - and X is 4 this works the same with
02:13 - lists
02:13 - if we do it like that and we can see
02:15 - when we run that there's no problem this
02:17 - next trick is called f strings and it
02:19 - personally saved me a lot of time when
02:21 - dealing with strings the program above
02:23 - we can see prints out hello my name is
02:25 - name and I'm 8 years old these are two
02:27 - different ways to do this just to show
02:28 - you the difference between an F string
02:30 - so if we don't want to deal with string
02:31 - concatenation or using the commas inside
02:33 - of a print statement what we can do is
02:35 - use an F string so I'm gonna say st is
02:37 - equal to and simply write the lowercase
02:38 - or uppercase letter letter F in this
02:41 - case it doesn't matter I'll write the
02:42 - lowercase letter F and I'm gonna say
02:43 - hello my name is and then inside of
02:46 - curly braces I can actually embed a
02:48 - variable or an expression directly so in
02:50 - this case if I go ahead and print out
02:52 - the value of st we can see that we get
02:54 - hello my name is Tim and of course if I
02:56 - wanted to embed multiple variables I
02:57 - would do multiple sets of curly braces
02:59 - like this the nice thing is that I can
03:01 - actually add expressions directly inside
03:03 - of here so I could add 10 to Tim's age
03:05 - and then of course what I can do is
03:07 - change this to an uppercase F and it
03:08 - makes no difference so that is f strings
03:10 - note these only work in version Python
03:12 - 3.6 and above they are a more recent
03:15 - addition to the Python language now many
03:17 - times in Python when we're looping
03:18 - through list we want access to not only
03:20 - the index or the position in the list
03:22 - but the element that's at that position
03:24 - as well now the standard way to do that
03:26 - would be something like this for I in
03:27 - range the line of X print I print X I
03:30 - which gives us the index as well as the
03:32 - value at that index now in Python
03:34 - there's a way to avoid this just keep in
03:36 - mind with the output is here so 0 2 1 3
03:38 - 2 4 3 5 what we can actually do is
03:41 - rewrite this loop using what's called
03:42 - the enumerate function which allows us
03:44 - to access the index and the element at
03:46 - the same time so what I can do is
03:48 - actually say for ie where e stands for
03:50 - elements in in this case enumerates X
03:53 - and what I can do now is print I comma E
03:56 - and we'll see we get the exact same
03:58 - output so what innumerate does is
04:00 - essentially pair every element in our
04:02 - list with the corresponding index so we
04:05 - can loop through and have I and E and
04:07 - access both of them directly from the
04:09 - for loop without having to do something
04:10 - ugly like X I and assigning that to a
04:12 - variable this next trick is called the
04:15 - zip function and it's extremely useful
04:16 - when you want to access elements from
04:18 - the same index from multiple lists look
04:21 - at this example here we can see that we
04:22 - have a series of names a series of ages
04:25 - and
04:25 - some different colors obviously tim is
04:27 - 19 his favorite colors blue bills 64
04:30 - favorite color green you get the point
04:31 - that's how they correspond and when we
04:33 - print this out with the for loop that we
04:34 - have we get Tim 19 blue bills 64 red Jo
04:37 - 34 green that's great but I don't like
04:39 - having to write names I ages I fav color
04:42 - I every time I want to access something
04:43 - so what I can do is actually use
04:45 - something called zip what the zip
04:47 - function does and I'll start writing it
04:48 - here is create pairs of elements from
04:50 - lists so we can do the list
04:52 - representation of the zip of names ages
04:56 - and then in this case fav underscore
04:57 - color and have a look at what that is
04:59 - so that's Tim 19 blue bill 64 red Jo 34
05:03 - green so it creates tuples of pairs
05:05 - notice that 76 was omitted because the
05:08 - length of this list is longer than the
05:10 - minimum length of all of the lists that
05:11 - we passed in so in this case it was
05:13 - three so we omitted 76 now of course we
05:16 - can use zip to actually iterate through
05:18 - so we can iterate through zip with a for
05:20 - loop so we can do four in this case top
05:23 - in and not range we'll just do zip then
05:26 - we can print out the top and you'll see
05:28 - we have those same tuples that we had
05:29 - before just on there online so Tim 19
05:31 - blue bill 64 green Jo 34 green I just
05:35 - messed that up but that's alright and of
05:36 - course what I could do as well is do
05:38 - name age color like that since this is a
05:42 - tupple that it's returning and then
05:44 - simply prints out name age color and now
05:46 - we don't get that tupple yet Tim 19 blue
05:48 - bill 64 red Jo 34 green this next trick
05:52 - is called help and it's extremely useful
05:53 - for when you want to look up the
05:55 - documentation for specific modules
05:57 - methods classes anything like that so
05:59 - what I can actually do is go ahead and
06:01 - write the function help simply put in
06:04 - some kind of object or class or
06:05 - something inside of here and run it bat
06:08 - on it now if we go up here and we
06:09 - actually look at what we get we can see
06:11 - we have help on list in module built-ins
06:14 - and then it shows us all the
06:15 - documentation that's relevant to
06:17 - whatever object we put in here some
06:18 - things won't work inside of help but
06:20 - most of them do for example we can even
06:22 - put something like a module inside of
06:24 - help so we can import OS and if we go
06:26 - ahead and get help on OS it's gonna be
06:28 - quite long oops if I don't accidentally
06:31 - create any window but if we scroll to
06:33 - the top we will see that we have help on
06:36 - module OS a name a description and all
06:38 - the documentation
06:39 - comes along with the module OS this next
06:42 - trick is called the dev function and is
06:44 - extremely useful for when you want to
06:45 - look at the attributes or methods of a
06:47 - specific object so let's go ahead here
06:49 - and create a blank string called X and
06:51 - let's run the dirt function on this and
06:52 - see what out will we actually get so
06:54 - note we do need to print the value
06:56 - because it simply returns a string but
06:57 - we can do print dur X and when we look
07:00 - here we actually get sorry not a string
07:02 - but a list of all of the attributes and
07:04 - methods that are associated with this
07:06 - object which is a string so we can see
07:09 - that we have something like index is
07:10 - digit is printable all of those and of
07:13 - course we can run this on other things
07:14 - as well so even like an integer like
07:16 - that we will get abs add and and you can
07:19 - see all the hidden dunder methods of a
07:21 - specific object I find this extremely
07:23 - useful when I want to import modules so
07:25 - something like Q so if I import Q and I
07:27 - want to look at Q dot Q so I can do that
07:31 - and I can see that this has Q sighs
07:33 - empty full gets and now I don't actually
07:35 - go to the Internet to look up with all
07:37 - these attributes and methods are this
07:39 - next trick is called list comprehensions
07:41 - what I'm gonna do to demonstrate them to
07:43 - you is just write some complex list
07:44 - comprehensions and you guys can kind of
07:46 - figure out exactly what they're doing
07:47 - so essentially what a list comprehension
07:48 - allows us to do is populate a list
07:50 - within the definition of the list so I
07:52 - can do something like I for I in range
07:54 - font print the value of X down here and
07:57 - we can see we get 0 1 2 3 4 now this is
07:59 - a simple list comprehension where we
08:01 - simply have one element we have an
08:02 - iterator here or for loop whatever it is
08:04 - and then we have the element that just
08:06 - populates for every loop now of course I
08:08 - can add some if statements here as well
08:10 - so I can do something like I mod 2
08:12 - equals equal to 0 which means now we
08:14 - only get even numbers inside of our list
08:16 - I could actually create nested lists if
08:18 - I wanted to so I could actually do
08:20 - something like a list here and instead
08:22 - of putting high I can just do that and
08:24 - now we get all these empty lists I could
08:25 - populate the list myself like that so is
08:27 - your 1 or I can even put another for
08:30 - loop in here so like for J so we'll just
08:32 - do something J for J and range I this is
08:37 - kind of a cool one oops not high s just
08:39 - I see we get blank 0 0 1 0 1 2 0 1 2 3
08:43 - so we can create some cool kind of
08:45 - iteration patterns like that of course
08:47 - we can use zip as well which is one that
08:48 - I like to showcase so I can do for I in
08:50 - range
08:51 - zip of in here we'll do range five and
08:55 - then the range of actually five ten and
08:58 - then here instead of just I what we'll
09:00 - do is XY and then we can make our own
09:02 - pair here of XY like that when we print
09:05 - this out we get zero five one six two
09:07 - seven three eight four nine of course we
09:09 - could just print X or just print Y if we
09:11 - wanted to there we go we get X we get Y
09:14 - here we could of course add another if
09:16 - statement at the end so that we filtered
09:18 - these out and that is kind of the basis
09:19 - of list comprehension now since this is
09:22 - a good example for it I'll show you the
09:23 - next trick which is simply the anonymous
09:25 - variable so we can see that up here we
09:28 - have X but we're not actually using X in
09:30 - this context so there's no point in
09:32 - really having this variable here in fact
09:34 - anything it's kind of just like why is
09:35 - that there we don't need it it's not
09:37 - actually storing we're not using that
09:39 - so what we can do is replace that with
09:40 - what's called an underscore which is
09:42 - just the anonymous variable what that
09:44 - means is this is just simply a
09:46 - placeholder it does not store anything
09:47 - it doesn't get assigned anything it's
09:49 - just here we can't access it I can't say
09:51 - like print out the value of underscore
09:52 - and get a value it's just here to say
09:54 - hey we don't want to put a value here
09:56 - but I need to so I can access Y so let's
09:58 - put it there now the best example of
10:00 - when we should actually use this as
10:01 - something like this so for underscore
10:03 - and range five print let's say hello the
10:07 - reason we do that is because again this
10:09 - loop does not depend on the iterator
10:11 - variable so we don't actually need to
10:13 - define it here so we can just put in
10:15 - underscore it just kind of common
10:17 - practice doesn't really matter if you
10:18 - put this or not like you can put in I
10:20 - and it doesn't make a difference but the
10:21 - underscore just looks a little bit
10:22 - cleaner and it tells whoever's reading
10:24 - your code that we do not rely on that
10:26 - iterator variable whatsoever this next
10:28 - trick is called dot join it's extremely
10:30 - useful when we have a list of words and
10:32 - we want to concatenate them into one
10:34 - strength essentially let's say we want
10:36 - to separate all these words by commas
10:38 - and add them into a string what we would
10:39 - need to do is concatenate all of them
10:41 - use a for loop something like that but
10:43 - if we have dot join all we need to do is
10:45 - do something like this dot join words
10:49 - now what this does is take all of these
10:51 - words and concatenate them with this
10:53 - string whatever is on the left hand side
10:55 - here before this dot operator as the
10:58 - separator so if I run this we can get
10:59 - hello my name is Tim I decide to put a
11:01 - comment here we get hello comma my
11:03 - common name comma
11:04 - is and you know we can go ahead and keep
11:06 - doing that with any separator that we
11:07 - want we can do two dashes that is how
11:09 - dot join works pretty useful on and a
11:12 - pretty just cool trick to know this next
11:14 - one's a fast one simply a way to reverse
11:16 - a string pretty easy all you have to do
11:18 - is do the name of the string in a switch
11:20 - which is st and then : : negative one
11:22 - what this does is use the slice operator
11:24 - to essentially create a new version of
11:26 - the string that is reversed version of
11:28 - this so just note this doesn't do this
11:30 - in place this makes a new version of the
11:32 - string that's why this works when I
11:34 - print it out so that's cool that's how
11:36 - you reverse a string nice fast easy
11:37 - shortcut alright time for another short
11:39 - one this is a cool Easter Egg in Python
11:42 - import underscore underscore hello
11:44 - underscore underscore run that you see
11:45 - we get hello world that was that trick
11:47 - this next trick can be extremely useful
11:49 - it actually tells us the amount of bytes
11:51 - that an object in Python takes up in
11:53 - memory so what we can do is import sys
11:55 - which is a built in module and Python I
11:57 - believe that stands for system and then
11:59 - what we can do is create some variable
12:01 - so let's say something like x equals 100
12:02 - and then print the sys dot gets sizeof
12:06 - and in this case x so here we can see
12:08 - that gives us a size of 14 bytes to
12:10 - represent the integer 100 or just notice
12:12 - something interesting when I type hello
12:14 - we get actually 30 bytes to represent
12:16 - that we want to create something like a
12:17 - list let's do one two three four like
12:20 - that that takes 52 bytes so this is cool
12:22 - you can check how many bytes any object
12:24 - in python takes up in your program okay
12:26 - so this next trick is pretty cool it
12:28 - actually allows us to get the most
12:30 - frequent element from a list in one line
12:32 - using a few built-in things in Python so
12:34 - we can actually do is print the max of
12:37 - the set of in this case X with the key
12:41 - equal to X dot count now what this does
12:43 - is say okay we'll pick the max element
12:46 - from this set but we're gonna do is
12:48 - count that element from this list X
12:50 - every single time so what you do for the
12:52 - key here is put a function note this is
12:54 - a function typically X dot count has two
12:56 - brackets but we just want to put the
12:58 - actual function itself we don't want to
13:00 - put the two brackets and what this will
13:02 - do is simply call X dot count with the
13:04 - value X which is from the set of X and
13:06 - will return to us the maximum element
13:09 - based on that key so with the max you
13:11 - can actually make a key of whatever you
13:12 - want let's say you have pairs right so
13:14 - you have something like x equals in this
13:16 - case like one two
13:18 - three four and you want to pick the
13:21 - maximum pair based on the second element
13:22 - well then what you would have to do is
13:24 - use something called lambdas as the key
13:26 - and I'm gonna show that in the next
13:27 - example so let's just run this right now
13:29 - we'll get rid of X and show you what
13:30 - this looks like so if we can just
13:32 - comment this one out we'll use it for
13:33 - the next one we can run this and see
13:35 - that it gives us the most frequent
13:36 - element is one if I delete a few of
13:38 - these ones here
13:39 - let's go like that we see the most
13:40 - frequent element is two again if I get
13:42 - rid of some of the twos we can see that
13:44 - this broke because there's an S but now
13:46 - we get four okay now what I'm gonna do
13:48 - is show you how we can use something
13:50 - called lambdas to essentially accomplish
13:51 - the same thing pick the largest element
13:53 - from this list when these are pairs
13:56 - right so to do this we're gonna print
13:57 - out the max of X so the maximum element
14:01 - from the list X by using the key that is
14:05 - equal to lambda Y :
14:08 - so not Y u : y1 what this says is let's
14:12 - pick the maximum element from the list X
14:14 - what we'll do is pass each element which
14:16 - are gonna be these pairs rights of one
14:18 - two three four one nine so these pairs
14:19 - to this function which is lambda Y which
14:22 - says okay this is an anonymous function
14:23 - that takes a parameter Y and then we'll
14:26 - return the Y value at index one which
14:29 - means we will sort these these pairs and
14:32 - pick the maximum one based on the
14:34 - farthest right element now if we wanted
14:36 - to do it based on the first element in
14:38 - this case we get the middle pair right
14:39 - we could do zero so if we look at this
14:41 - now we get 3 4 because 3 is the largest
14:43 - first element if we change this to 1 we
14:46 - get 1 9 because we're looking at the
14:48 - furthest right element of course this
14:50 - works if you have other pairs as well so
14:52 - you have like 8 10 we can do too and now
14:55 - we'll pick this pair like that and that
14:57 - is how you use lambda as a key inside of
15:00 - the max function this works for things
15:01 - like sorts and many other things as well
15:03 - alright so this next one is another
15:05 - Easter egg this is actually what happens
15:07 - when you import the module called
15:08 - anti-gravity like that now this one is
15:11 - kind of cool if you run this it actually
15:13 - redirects you to a page you saw my web
15:15 - browser pop up there that has a comic
15:17 - about Python so you can go ahead and
15:18 - read through the comic I'm not going to
15:20 - do that but again a cool easter egg and
15:21 - some nice things to see in the Python
15:23 - language alright so this next one is a
15:25 - little bit more practical this is called
15:26 - string multiplication essentially what
15:28 - we can do is multiply strings by
15:29 - integers in Python so
15:31 - do that all we do is write something
15:33 - like a print statement some string a
15:35 - multiplication sign and then multiplied
15:37 - by some integer run and we can see that
15:39 - what this does is simply concatenate
15:40 - that string to itself that many times so
15:43 - if we go ahead and put a separator like
15:45 - a hyphen there we can see we get all of
15:46 - these things being concatenate together
15:49 - separated by hyphens because obviously
15:50 - that is what's at the end we can add to
15:53 - this because this is gonna be string so
15:54 - we could do something like why you times
15:57 - where's the asterisks 800 and now we get
16:01 - this massive string in the console and
16:03 - we can see that that works and this is
16:04 - string multiplication all right so this
16:07 - last tip and trick is called the splat
16:08 - and unpack operator a little bit complex
16:11 - to explain in the time frame that I'm
16:12 - gonna go for but I will show you a few
16:13 - examples and at least introduce you to
16:15 - it so you can go look it up and learn
16:16 - more about it so essentially the way
16:18 - that these splats and unpack operator
16:20 - works is it essentially takes a list
16:22 - tupple some collection and unpacks it
16:25 - into keyword or regular arguments now
16:28 - the way that we can do this at a common
16:29 - example is doing something like star x
16:31 - in a print statement what this does is
16:33 - simply print out each element of the
16:35 - list beside each other separated by
16:37 - space because what this unpack does when
16:40 - it precedes a list like this is it takes
16:43 - all the elements in the list and passes
16:44 - them as a parameter so the translation
16:47 - of this code would literally look like
16:48 - this print 1 2 3 4 5 because it just
16:51 - removes kind of the list and passes
16:53 - these each separated by commas now this
16:55 - is why you'll see this used quite often
16:56 - in functions something like which is
16:58 - called func
16:59 - and we'll do star args like that and
17:02 - then simply just print out the arguments
17:05 - now essentially what this means is we
17:07 - will take an unlimited amount of keyword
17:09 - arguments that's what star args stands
17:11 - for so if I go ahead and go funk and I
17:14 - do like you know 2 3 and then I print
17:17 - funk they're not prints right just write
17:20 - the funk of 8 7 6 if I could type
17:24 - properly like that and we run this we
17:27 - can see that we get 2 tuples this will
17:29 - take an unlimited amount of arcs now
17:32 - this operator actually works on
17:33 - dictionaries as well so what I can do is
17:35 - use 2 stars and this will now mean that
17:39 - we will take an unlimited amount of what
17:40 - we call keyword arguments so 2 stars
17:43 - means we are actually going to take a
17:45 - dick
17:45 - Neri we're going to decompose the key as
17:47 - the keyword and then we are going to
17:49 - take the value as the actual value
17:51 - that's passed for that keyword so that's
17:53 - the same thing as writing something like
17:54 - defined func have a few positional
17:57 - arguments like that like imagine those
17:58 - are X 1 2 3 and then we have something
18:00 - like y equals 6 right so it's actually
18:02 - defining the name of the argument itself
18:05 - and passing it in now I'll show you what
18:07 - I mean by that cuz I assume all of you
18:09 - are probably confused I can do something
18:10 - like func 2 3 and then I can actually
18:12 - say K equals 0 x equals 8 hey equals 10
18:18 - and if I go ahead and now not just print
18:20 - arts but print kwargs like that we can
18:23 - see that it tells us this is K equals 0
18:25 - x equals 8
18:26 - hey equals 10 and it treats this like a
18:28 - dictionary says the way the args and
18:31 - kwargs work again I know I'm sure most
18:33 - you confused by what I just showed here
18:35 - so go ahead and look that up I do have a
18:36 - video on my channel but with that being
18:38 - said this has been MIDI 20 Python tips
18:40 - and tricks you guys learned something if
18:42 - you enjoyed make sure to leave a like
18:43 - subscribe to the channel and let me know
18:44 - what your favorite tip and trick was any
18:46 - comments down below

Cleaned transcript:

in this video I'll be showing you 20 Python tips and tricks that let you write faster better and cleaner code these are some of the reasons that people love Python and I'm gonna start us off right away with actually what's considered an easter egg in the python language which is what happens when you import the module called this when we run this it actually brings up what's called B's data Python which I would encourage you to read as we get into the next 19 tips and tricks a quick disclaimer that these tips come in no particular order and random more complex tips will be scattered throughout the video also I'm gonna be using Python version 3.7 for this entire video so if anything's not working for you make sure you're on that current version I'll also be going very quickly so don't feel bad if you need to pause or rewind the video to catch up with what I've done and that leads us to the first tip here that I'm gonna show which is actually how to create an enum in Python now this is more of a simulation than an actual enum but what we can do is create a class which is the name of the enum that we want in this case I've called it enum and then we can list three variables beside each other so in this case I may be Oh Tim bill Joe and set that equal to the range function in Python what this will do is allow Tim to be 0 bill to be 1 and Joe to be 2 so range 0 1 2 all the way up to 3 but not including 3 if we want to Tim to start at the number 1 then what we could do obviously is change the range function to be 1 for this works just like in a for loop if I want to access the variable in Unum what I can do is do I am Tim like that and obviously we can check their comparison with the value 1 and see that that is equal to true this next trick I like to call multiline assignment essentially this is a property of Python that allows us to assign multiple variables in the same line with one equal sign what you can do is you can do something like X comma y equals 1 2 comma 4 and obviously now if we go ahead and decide to print out X Y we can see that we get the values 1 4 what we can also do with this obviously is have more variables so something like X Y Z equals 1 4 7 run not there's nothing wrong with that and then what we can actually do is use this to decompose things like tuples and lists so if I have X Y Z so 3 variables and then I have 3 variables inside my topple so 4 5 6 like that we can decompose the tuples so that is 6 Y is 5 and X is 4 this works the same with lists if we do it like that and we can see when we run that there's no problem this next trick is called f strings and it personally saved me a lot of time when dealing with strings the program above we can see prints out hello my name is name and I'm 8 years old these are two different ways to do this just to show you the difference between an F string so if we don't want to deal with string concatenation or using the commas inside of a print statement what we can do is use an F string so I'm gonna say st is equal to and simply write the lowercase or uppercase letter letter F in this case it doesn't matter I'll write the lowercase letter F and I'm gonna say hello my name is and then inside of curly braces I can actually embed a variable or an expression directly so in this case if I go ahead and print out the value of st we can see that we get hello my name is Tim and of course if I wanted to embed multiple variables I would do multiple sets of curly braces like this the nice thing is that I can actually add expressions directly inside of here so I could add 10 to Tim's age and then of course what I can do is change this to an uppercase F and it makes no difference so that is f strings note these only work in version Python 3.6 and above they are a more recent addition to the Python language now many times in Python when we're looping through list we want access to not only the index or the position in the list but the element that's at that position as well now the standard way to do that would be something like this for I in range the line of X print I print X I which gives us the index as well as the value at that index now in Python there's a way to avoid this just keep in mind with the output is here so 0 2 1 3 2 4 3 5 what we can actually do is rewrite this loop using what's called the enumerate function which allows us to access the index and the element at the same time so what I can do is actually say for ie where e stands for elements in in this case enumerates X and what I can do now is print I comma E and we'll see we get the exact same output so what innumerate does is essentially pair every element in our list with the corresponding index so we can loop through and have I and E and access both of them directly from the for loop without having to do something ugly like X I and assigning that to a variable this next trick is called the zip function and it's extremely useful when you want to access elements from the same index from multiple lists look at this example here we can see that we have a series of names a series of ages and some different colors obviously tim is 19 his favorite colors blue bills 64 favorite color green you get the point that's how they correspond and when we print this out with the for loop that we have we get Tim 19 blue bills 64 red Jo 34 green that's great but I don't like having to write names I ages I fav color I every time I want to access something so what I can do is actually use something called zip what the zip function does and I'll start writing it here is create pairs of elements from lists so we can do the list representation of the zip of names ages and then in this case fav underscore color and have a look at what that is so that's Tim 19 blue bill 64 red Jo 34 green so it creates tuples of pairs notice that 76 was omitted because the length of this list is longer than the minimum length of all of the lists that we passed in so in this case it was three so we omitted 76 now of course we can use zip to actually iterate through so we can iterate through zip with a for loop so we can do four in this case top in and not range we'll just do zip then we can print out the top and you'll see we have those same tuples that we had before just on there online so Tim 19 blue bill 64 green Jo 34 green I just messed that up but that's alright and of course what I could do as well is do name age color like that since this is a tupple that it's returning and then simply prints out name age color and now we don't get that tupple yet Tim 19 blue bill 64 red Jo 34 green this next trick is called help and it's extremely useful for when you want to look up the documentation for specific modules methods classes anything like that so what I can actually do is go ahead and write the function help simply put in some kind of object or class or something inside of here and run it bat on it now if we go up here and we actually look at what we get we can see we have help on list in module builtins and then it shows us all the documentation that's relevant to whatever object we put in here some things won't work inside of help but most of them do for example we can even put something like a module inside of help so we can import OS and if we go ahead and get help on OS it's gonna be quite long oops if I don't accidentally create any window but if we scroll to the top we will see that we have help on module OS a name a description and all the documentation comes along with the module OS this next trick is called the dev function and is extremely useful for when you want to look at the attributes or methods of a specific object so let's go ahead here and create a blank string called X and let's run the dirt function on this and see what out will we actually get so note we do need to print the value because it simply returns a string but we can do print dur X and when we look here we actually get sorry not a string but a list of all of the attributes and methods that are associated with this object which is a string so we can see that we have something like index is digit is printable all of those and of course we can run this on other things as well so even like an integer like that we will get abs add and and you can see all the hidden dunder methods of a specific object I find this extremely useful when I want to import modules so something like Q so if I import Q and I want to look at Q dot Q so I can do that and I can see that this has Q sighs empty full gets and now I don't actually go to the Internet to look up with all these attributes and methods are this next trick is called list comprehensions what I'm gonna do to demonstrate them to you is just write some complex list comprehensions and you guys can kind of figure out exactly what they're doing so essentially what a list comprehension allows us to do is populate a list within the definition of the list so I can do something like I for I in range font print the value of X down here and we can see we get 0 1 2 3 4 now this is a simple list comprehension where we simply have one element we have an iterator here or for loop whatever it is and then we have the element that just populates for every loop now of course I can add some if statements here as well so I can do something like I mod 2 equals equal to 0 which means now we only get even numbers inside of our list I could actually create nested lists if I wanted to so I could actually do something like a list here and instead of putting high I can just do that and now we get all these empty lists I could populate the list myself like that so is your 1 or I can even put another for loop in here so like for J so we'll just do something J for J and range I this is kind of a cool one oops not high s just I see we get blank 0 0 1 0 1 2 0 1 2 3 so we can create some cool kind of iteration patterns like that of course we can use zip as well which is one that I like to showcase so I can do for I in range zip of in here we'll do range five and then the range of actually five ten and then here instead of just I what we'll do is XY and then we can make our own pair here of XY like that when we print this out we get zero five one six two seven three eight four nine of course we could just print X or just print Y if we wanted to there we go we get X we get Y here we could of course add another if statement at the end so that we filtered these out and that is kind of the basis of list comprehension now since this is a good example for it I'll show you the next trick which is simply the anonymous variable so we can see that up here we have X but we're not actually using X in this context so there's no point in really having this variable here in fact anything it's kind of just like why is that there we don't need it it's not actually storing we're not using that so what we can do is replace that with what's called an underscore which is just the anonymous variable what that means is this is just simply a placeholder it does not store anything it doesn't get assigned anything it's just here we can't access it I can't say like print out the value of underscore and get a value it's just here to say hey we don't want to put a value here but I need to so I can access Y so let's put it there now the best example of when we should actually use this as something like this so for underscore and range five print let's say hello the reason we do that is because again this loop does not depend on the iterator variable so we don't actually need to define it here so we can just put in underscore it just kind of common practice doesn't really matter if you put this or not like you can put in I and it doesn't make a difference but the underscore just looks a little bit cleaner and it tells whoever's reading your code that we do not rely on that iterator variable whatsoever this next trick is called dot join it's extremely useful when we have a list of words and we want to concatenate them into one strength essentially let's say we want to separate all these words by commas and add them into a string what we would need to do is concatenate all of them use a for loop something like that but if we have dot join all we need to do is do something like this dot join words now what this does is take all of these words and concatenate them with this string whatever is on the left hand side here before this dot operator as the separator so if I run this we can get hello my name is Tim I decide to put a comment here we get hello comma my common name comma is and you know we can go ahead and keep doing that with any separator that we want we can do two dashes that is how dot join works pretty useful on and a pretty just cool trick to know this next one's a fast one simply a way to reverse a string pretty easy all you have to do is do the name of the string in a switch which is st and then negative one what this does is use the slice operator to essentially create a new version of the string that is reversed version of this so just note this doesn't do this in place this makes a new version of the string that's why this works when I print it out so that's cool that's how you reverse a string nice fast easy shortcut alright time for another short one this is a cool Easter Egg in Python import underscore underscore hello underscore underscore run that you see we get hello world that was that trick this next trick can be extremely useful it actually tells us the amount of bytes that an object in Python takes up in memory so what we can do is import sys which is a built in module and Python I believe that stands for system and then what we can do is create some variable so let's say something like x equals 100 and then print the sys dot gets sizeof and in this case x so here we can see that gives us a size of 14 bytes to represent the integer 100 or just notice something interesting when I type hello we get actually 30 bytes to represent that we want to create something like a list let's do one two three four like that that takes 52 bytes so this is cool you can check how many bytes any object in python takes up in your program okay so this next trick is pretty cool it actually allows us to get the most frequent element from a list in one line using a few builtin things in Python so we can actually do is print the max of the set of in this case X with the key equal to X dot count now what this does is say okay we'll pick the max element from this set but we're gonna do is count that element from this list X every single time so what you do for the key here is put a function note this is a function typically X dot count has two brackets but we just want to put the actual function itself we don't want to put the two brackets and what this will do is simply call X dot count with the value X which is from the set of X and will return to us the maximum element based on that key so with the max you can actually make a key of whatever you want let's say you have pairs right so you have something like x equals in this case like one two three four and you want to pick the maximum pair based on the second element well then what you would have to do is use something called lambdas as the key and I'm gonna show that in the next example so let's just run this right now we'll get rid of X and show you what this looks like so if we can just comment this one out we'll use it for the next one we can run this and see that it gives us the most frequent element is one if I delete a few of these ones here let's go like that we see the most frequent element is two again if I get rid of some of the twos we can see that this broke because there's an S but now we get four okay now what I'm gonna do is show you how we can use something called lambdas to essentially accomplish the same thing pick the largest element from this list when these are pairs right so to do this we're gonna print out the max of X so the maximum element from the list X by using the key that is equal to lambda Y so not Y u y1 what this says is let's pick the maximum element from the list X what we'll do is pass each element which are gonna be these pairs rights of one two three four one nine so these pairs to this function which is lambda Y which says okay this is an anonymous function that takes a parameter Y and then we'll return the Y value at index one which means we will sort these these pairs and pick the maximum one based on the farthest right element now if we wanted to do it based on the first element in this case we get the middle pair right we could do zero so if we look at this now we get 3 4 because 3 is the largest first element if we change this to 1 we get 1 9 because we're looking at the furthest right element of course this works if you have other pairs as well so you have like 8 10 we can do too and now we'll pick this pair like that and that is how you use lambda as a key inside of the max function this works for things like sorts and many other things as well alright so this next one is another Easter egg this is actually what happens when you import the module called antigravity like that now this one is kind of cool if you run this it actually redirects you to a page you saw my web browser pop up there that has a comic about Python so you can go ahead and read through the comic I'm not going to do that but again a cool easter egg and some nice things to see in the Python language alright so this next one is a little bit more practical this is called string multiplication essentially what we can do is multiply strings by integers in Python so do that all we do is write something like a print statement some string a multiplication sign and then multiplied by some integer run and we can see that what this does is simply concatenate that string to itself that many times so if we go ahead and put a separator like a hyphen there we can see we get all of these things being concatenate together separated by hyphens because obviously that is what's at the end we can add to this because this is gonna be string so we could do something like why you times where's the asterisks 800 and now we get this massive string in the console and we can see that that works and this is string multiplication all right so this last tip and trick is called the splat and unpack operator a little bit complex to explain in the time frame that I'm gonna go for but I will show you a few examples and at least introduce you to it so you can go look it up and learn more about it so essentially the way that these splats and unpack operator works is it essentially takes a list tupple some collection and unpacks it into keyword or regular arguments now the way that we can do this at a common example is doing something like star x in a print statement what this does is simply print out each element of the list beside each other separated by space because what this unpack does when it precedes a list like this is it takes all the elements in the list and passes them as a parameter so the translation of this code would literally look like this print 1 2 3 4 5 because it just removes kind of the list and passes these each separated by commas now this is why you'll see this used quite often in functions something like which is called func and we'll do star args like that and then simply just print out the arguments now essentially what this means is we will take an unlimited amount of keyword arguments that's what star args stands for so if I go ahead and go funk and I do like you know 2 3 and then I print funk they're not prints right just write the funk of 8 7 6 if I could type properly like that and we run this we can see that we get 2 tuples this will take an unlimited amount of arcs now this operator actually works on dictionaries as well so what I can do is use 2 stars and this will now mean that we will take an unlimited amount of what we call keyword arguments so 2 stars means we are actually going to take a dick Neri we're going to decompose the key as the keyword and then we are going to take the value as the actual value that's passed for that keyword so that's the same thing as writing something like defined func have a few positional arguments like that like imagine those are X 1 2 3 and then we have something like y equals 6 right so it's actually defining the name of the argument itself and passing it in now I'll show you what I mean by that cuz I assume all of you are probably confused I can do something like func 2 3 and then I can actually say K equals 0 x equals 8 hey equals 10 and if I go ahead and now not just print arts but print kwargs like that we can see that it tells us this is K equals 0 x equals 8 hey equals 10 and it treats this like a dictionary says the way the args and kwargs work again I know I'm sure most you confused by what I just showed here so go ahead and look that up I do have a video on my channel but with that being said this has been MIDI 20 Python tips and tricks you guys learned something if you enjoyed make sure to leave a like subscribe to the channel and let me know what your favorite tip and trick was any comments down below
