With timestamps:

00:00 - hey guys and welcome back to video 3 so
00:03 - what we're gonna be doing in this video
00:04 - is we're gonna be coding the kind of
00:06 - client side of this so connecting to the
00:08 - server I know we already coded a client
00:11 - but we're gonna code like the network
00:13 - aspect of the client so that it can
00:15 - connect to the server it's not as much
00:17 - code it's a bit more straightforward and
00:18 - then we're just gonna test out sending
00:21 - very basic information to the server and
00:23 - hopefully getting some back see if
00:25 - that's working ok and then in the next
00:27 - video we're gonna be connecting this so
00:29 - like the little user interface we
00:30 - created with moving that block around in
00:32 - the first video we're gonna be
00:33 - connecting that so that we can have
00:36 - multiple clients running and we can see
00:38 - like different blocks moving on each
00:39 - screen ok so that will involve a bit
00:41 - more work hopefully by video 5 we'll
00:43 - have like a fully working kind of game
00:46 - that's working over the network
00:47 - ok that's the goal so within this video
00:49 - I just want to start by saying on the
00:51 - server class here or sorry server file I
00:53 - did actually forget two lines of code in
00:55 - the last video so after this except
00:57 - break in threaded client just need to
00:59 - add this print loss connection and then
01:01 - connection dot close all this is doing
01:03 - is once we break out of this threaded
01:05 - client we're just letting the we're just
01:07 - gonna print this to the console so we
01:09 - can see what it looks like and then
01:10 - we're gonna close that connection so
01:11 - that we can possibly reopen it in the
01:14 - future okay really straightforward
01:16 - that's all you gotta add so just make
01:17 - sure you add that before moving on oh
01:19 - yeah so next we're gonna do is we're
01:21 - gonna create a new file and I'm gonna
01:23 - call this network okay now you don't
01:25 - have to put what I'm going to in a new
01:26 - file it's just a lot easier so that's
01:28 - why I'm going to do that so let's do
01:30 - network and in here we're gonna import
01:32 - socket now what I'm gonna do is I'm just
01:33 - gonna code a class it's gonna be
01:35 - responsible for connecting to our server
01:37 - this just makes it like so I can reuse
01:39 - this class in the future and you guys
01:41 - could reuse this class in the future and
01:43 - it's just bit cleaner and nicer and
01:44 - that's why I like to do things so I'm
01:46 - gonna say class network again call us
01:49 - whatever you want and in here we're just
01:51 - gonna set an initialization function
01:53 - we'll take actually as Network do we
01:56 - need anything and network now I think
01:57 - we'll just leave like that so we're
01:59 - gonna say self dot clients equals socket
02:02 - socket it's gonna be the exact same
02:05 - arguments as last time so it's a socket
02:06 - dot if' net I think is that what it is i
02:10 - F underscore net
02:12 - af underscore inodes okay and then we'll
02:15 - do socket dot sock stream like that okay
02:20 - now we're going to define the server and
02:22 - the port again so self dot server equals
02:24 - self thought port equals five five five
02:28 - five now for the server this again this
02:30 - number has to be the same as the one you
02:32 - used in the server what do you call it
02:34 - the server file here so no matter what
02:38 - like no matter where you actually are
02:40 - like what client you're using this
02:42 - number is going to stay the same because
02:43 - this is the server you're connecting to
02:45 - it's not the clients address we don't
02:47 - actually have to define the clients
02:49 - address anywhere it'll automatically get
02:50 - that for us okay so what we're gonna do
02:52 - now we have clients server port we need
02:56 - to do this self dot addr
02:59 - equals and then we're gonna say server
03:01 - so self thought server and then self dot
03:07 - port in here okay and then self dot what
03:11 - he called self thought ID is gonna be
03:14 - equal to self dot connect okay now you
03:19 - guys actually let's just do self dot
03:20 - connect right now and we'll talk about
03:22 - why I was gonna have this ID later once
03:24 - we add that functionality the server can
03:26 - essentially I wanted to have an ID that
03:28 - was returned here alike that was stored
03:30 - in this network object just because we
03:33 - are gonna have to like be sending an ID
03:35 - to each of our clients so they know if
03:36 - they're like player one or player to but
03:38 - we'll do that later because we don't
03:39 - really we can't really do that yet
03:41 - okay so we've called this connect method
03:43 - so we need to write that now so let's
03:45 - say define connect okay and in here I
03:48 - believe we should probably be given
03:50 - actually I think it's probably fine just
03:52 - use self right now what we can do is we
03:54 - new self dot clients dot connect okay
03:57 - and then in here we knew self dot addr
03:59 - now we're gonna throw this in a try and
04:03 - except just in case you know this isn't
04:04 - working so we'll say try say accept and
04:08 - is a renew socket air let's say accept
04:12 - and we'll just pass right there okay I
04:14 - just in case this doesn't work so we'll
04:16 - try this we'll try to connect accept
04:18 - pass now once we actually connect what
04:22 - we're going to do is we're return
04:24 - I'm just looking at my other screen
04:26 - right now a self-taught client don't
04:27 - receive and then we'll do 2048 dot
04:32 - decode okay so what this is gonna do
04:34 - I'll talk about this because it might be
04:36 - a little bit confusing is when we
04:38 - connect we want to actually send some
04:41 - kind of information immediately back to
04:43 - the object that connected to us so like
04:45 - for example it's going to I didn't mean
04:47 - to close that what's going to server
04:49 - here and you can see when we initially
04:51 - connect we're not sending any
04:54 - information until we receive something
04:56 - now that's fine
04:57 - but when we connect we should really
05:01 - send some kind of like validation token
05:03 - or like ID back to our network object or
05:07 - back to our client so what I'm gonna do
05:09 - in here I'm just like on dot send okay
05:12 - and then in here what we're gonna type
05:14 - is let's see what should we really type
05:17 - here uhm STR dot in the code then here
05:22 - we'll say connected like that okay
05:25 - just so we know that we did indeed
05:27 - connect if that means if we set this
05:30 - equal to a value so self thought I don't
05:32 - know let's say ID equals self dot
05:35 - connect what'll happen is when we
05:37 - connect will return that string
05:40 - connected so this will get connected and
05:43 - since it's encoded we need to decode it
05:45 - obviously so if we want to print
05:47 - actually in here self dot ID it should
05:50 - say like connected okay let's see if
05:53 - that works okay so now that we actually
05:55 - have that let's see if we can connect to
06:00 - the server and then we'll deal with
06:01 - sending information from the client to
06:03 - the server as opposed to just getting it
06:05 - from the server okay I know it's a bit
06:06 - confusing right now I'm just turn to
06:08 - figure out the best way to do this so
06:10 - let's try this guy so we're gonna say N
06:11 - equals Network I will just type this at
06:14 - the bottom of the script we won't do
06:16 - this after will delete this just for
06:17 - testing purposes and then we're just
06:19 - gonna say actually that's probably all
06:21 - we need to do because it'll just print
06:22 - our ID
06:23 - okay so let's create a configuration for
06:26 - a network so nuke it configuration type
06:32 - network in here and then select that
06:34 - path and then let's test
06:37 - if this is working so remember what I
06:39 - said when we're gonna connect right to
06:41 - our server what we have to do is first
06:43 - run that server script so let's run the
06:45 - server script here waiting for a
06:47 - connection server started okay let's run
06:49 - this network script now invalid argument
06:52 - was supplied s not listened to hmm okay
06:56 - so I had a quick look here I realized
06:57 - the mistake was I was actually running
06:59 - this server two times so obviously
07:01 - that's not gonna work for us so we can
07:02 - put two back in this listen I'm not sure
07:04 - if you guys will see if I left that in
07:05 - the video or not but let's go to network
07:08 - and we also need to change this to AF
07:10 - instead of AF I don't know why typed I
07:13 - fi literally set AF when I was typing it
07:15 - but that's fine and we have server I'm
07:18 - actually running it right now so make
07:19 - sure you guys run that and then they'll
07:20 - run that we can see if this works okay
07:22 - sweet so I know it doesn't seem like
07:24 - much but you can check here if we go to
07:26 - server it says connected to and then
07:29 - gives us that address it's also printing
07:31 - out some other thing that I honestly
07:33 - don't know what that means
07:34 - and then saying disconnected and lost
07:36 - connection sweet that's actually really
07:38 - good and that means that were everything
07:41 - is working and you can also see that we
07:43 - have connected being printed here so
07:45 - that means when we connect to the server
07:47 - we're actually getting the value that is
07:48 - sending so we're getting this connected
07:52 - and we're printing it out decoding it
07:54 - all fine so that's really awesome so now
07:56 - the only next step is to actually send
07:58 - information to the server and keep like
08:00 - a loop going like sending receiving
08:01 - sending receiving sending receiving now
08:03 - let's actually just test um if I run
08:05 - this again you can see again obviously
08:08 - it's working again so this is the server
08:10 - just continually is running I don't
08:12 - actually have to stop this unless I want
08:14 - to make modifications to it so let's
08:16 - just keep that running for now and let's
08:18 - add something to our network class so in
08:21 - our network class we're gonna define a
08:23 - method that's gonna be sent now this
08:25 - method is gonna be very useful later on
08:26 - because it's gonna save us a lot of time
08:28 - so in Santa bridge can take a string
08:31 - which is gonna be data okay and all
08:33 - we're gonna do in here is we're going to
08:35 - try to self dot client dot send and I'm
08:40 - gonna say data STR actually dot in code
08:44 - Donna and then we're gonna get a reply
08:46 - from that server so we're gonna say
08:47 - return so exact same thing that we're
08:49 - doing here self-taught client I receive
08:52 - twenty 48.2 code and will accept and I
08:57 - believe this is a socket error yeah the
08:58 - socket cut error as E and just print e
09:02 - so if we get into some error where you
09:05 - know either we're sending or we're
09:06 - receiving it's not working let's just
09:08 - print that Arab to the screen so we have
09:10 - a look at what that really means so now
09:12 - let's do a test and try to send
09:15 - information to the server and then get
09:17 - something back okay
09:18 - now the information that we're getting
09:19 - back should just be the same information
09:22 - because that's what we have in server
09:23 - we're just gonna send exactly what we
09:26 - got right back right so doesn't make
09:29 - sense right now to do that but we'll
09:30 - talk about like what we can what valid
09:33 - information we can send how to send
09:34 - receive information in the next video
09:36 - when we connect up the client to the
09:38 - thing okay so what we're gonna do is
09:40 - gonna say and not send and we'll print
09:43 - and not send okay and we'll print and
09:46 - not send again and let's just send like
09:48 - a few bits of information and see if
09:50 - everything is indeed working ok so n dot
09:53 - send and then in here let's just type
09:55 - hello and we'll type working okay and
10:00 - see if this works
10:01 - so we have actually you should have yeah
10:03 - server is working well let's run our
10:05 - client and you can see we get connected
10:07 - hello working and if we come here it
10:09 - says received hello sending hello
10:12 - received working sending working so
10:14 - that's awesome that means our network
10:17 - class is working sending information
10:19 - receiving information is working server
10:22 - is working and now the only thing that's
10:24 - left to do essentially is to connect
10:26 - that up to this so use this network
10:29 - class in some meaningful way here and
10:31 - then to actually store information on
10:33 - the server and then send that
10:35 - information to multiple clients which
10:37 - we'll doing in future videos so that's
10:39 - gonna be it for this video we got the
10:41 - network class working hooked up to the
10:43 - server I find this stuff really cool
10:45 - personally like I'm really excited about
10:47 - doing this and showing you guys how to
10:48 - do this I think it's really awesome that
10:50 - within like a few minutes you can just
10:52 - set up a basic server on your local
10:53 - network and send or receive information
10:55 - and it's only like how many lines of
10:57 - code is this like a hundred not very
10:59 - many but anyways let me know what you
11:00 - guys have thought of this video and if
11:02 - you're excited for the next one and I
11:03 - will see you there
11:04 - [Music]

Cleaned transcript:

hey guys and welcome back to video 3 so what we're gonna be doing in this video is we're gonna be coding the kind of client side of this so connecting to the server I know we already coded a client but we're gonna code like the network aspect of the client so that it can connect to the server it's not as much code it's a bit more straightforward and then we're just gonna test out sending very basic information to the server and hopefully getting some back see if that's working ok and then in the next video we're gonna be connecting this so like the little user interface we created with moving that block around in the first video we're gonna be connecting that so that we can have multiple clients running and we can see like different blocks moving on each screen ok so that will involve a bit more work hopefully by video 5 we'll have like a fully working kind of game that's working over the network ok that's the goal so within this video I just want to start by saying on the server class here or sorry server file I did actually forget two lines of code in the last video so after this except break in threaded client just need to add this print loss connection and then connection dot close all this is doing is once we break out of this threaded client we're just letting the we're just gonna print this to the console so we can see what it looks like and then we're gonna close that connection so that we can possibly reopen it in the future okay really straightforward that's all you gotta add so just make sure you add that before moving on oh yeah so next we're gonna do is we're gonna create a new file and I'm gonna call this network okay now you don't have to put what I'm going to in a new file it's just a lot easier so that's why I'm going to do that so let's do network and in here we're gonna import socket now what I'm gonna do is I'm just gonna code a class it's gonna be responsible for connecting to our server this just makes it like so I can reuse this class in the future and you guys could reuse this class in the future and it's just bit cleaner and nicer and that's why I like to do things so I'm gonna say class network again call us whatever you want and in here we're just gonna set an initialization function we'll take actually as Network do we need anything and network now I think we'll just leave like that so we're gonna say self dot clients equals socket socket it's gonna be the exact same arguments as last time so it's a socket dot if' net I think is that what it is i F underscore net af underscore inodes okay and then we'll do socket dot sock stream like that okay now we're going to define the server and the port again so self dot server equals self thought port equals five five five five now for the server this again this number has to be the same as the one you used in the server what do you call it the server file here so no matter what like no matter where you actually are like what client you're using this number is going to stay the same because this is the server you're connecting to it's not the clients address we don't actually have to define the clients address anywhere it'll automatically get that for us okay so what we're gonna do now we have clients server port we need to do this self dot addr equals and then we're gonna say server so self thought server and then self dot port in here okay and then self dot what he called self thought ID is gonna be equal to self dot connect okay now you guys actually let's just do self dot connect right now and we'll talk about why I was gonna have this ID later once we add that functionality the server can essentially I wanted to have an ID that was returned here alike that was stored in this network object just because we are gonna have to like be sending an ID to each of our clients so they know if they're like player one or player to but we'll do that later because we don't really we can't really do that yet okay so we've called this connect method so we need to write that now so let's say define connect okay and in here I believe we should probably be given actually I think it's probably fine just use self right now what we can do is we new self dot clients dot connect okay and then in here we knew self dot addr now we're gonna throw this in a try and except just in case you know this isn't working so we'll say try say accept and is a renew socket air let's say accept and we'll just pass right there okay I just in case this doesn't work so we'll try this we'll try to connect accept pass now once we actually connect what we're going to do is we're return I'm just looking at my other screen right now a selftaught client don't receive and then we'll do 2048 dot decode okay so what this is gonna do I'll talk about this because it might be a little bit confusing is when we connect we want to actually send some kind of information immediately back to the object that connected to us so like for example it's going to I didn't mean to close that what's going to server here and you can see when we initially connect we're not sending any information until we receive something now that's fine but when we connect we should really send some kind of like validation token or like ID back to our network object or back to our client so what I'm gonna do in here I'm just like on dot send okay and then in here what we're gonna type is let's see what should we really type here uhm STR dot in the code then here we'll say connected like that okay just so we know that we did indeed connect if that means if we set this equal to a value so self thought I don't know let's say ID equals self dot connect what'll happen is when we connect will return that string connected so this will get connected and since it's encoded we need to decode it obviously so if we want to print actually in here self dot ID it should say like connected okay let's see if that works okay so now that we actually have that let's see if we can connect to the server and then we'll deal with sending information from the client to the server as opposed to just getting it from the server okay I know it's a bit confusing right now I'm just turn to figure out the best way to do this so let's try this guy so we're gonna say N equals Network I will just type this at the bottom of the script we won't do this after will delete this just for testing purposes and then we're just gonna say actually that's probably all we need to do because it'll just print our ID okay so let's create a configuration for a network so nuke it configuration type network in here and then select that path and then let's test if this is working so remember what I said when we're gonna connect right to our server what we have to do is first run that server script so let's run the server script here waiting for a connection server started okay let's run this network script now invalid argument was supplied s not listened to hmm okay so I had a quick look here I realized the mistake was I was actually running this server two times so obviously that's not gonna work for us so we can put two back in this listen I'm not sure if you guys will see if I left that in the video or not but let's go to network and we also need to change this to AF instead of AF I don't know why typed I fi literally set AF when I was typing it but that's fine and we have server I'm actually running it right now so make sure you guys run that and then they'll run that we can see if this works okay sweet so I know it doesn't seem like much but you can check here if we go to server it says connected to and then gives us that address it's also printing out some other thing that I honestly don't know what that means and then saying disconnected and lost connection sweet that's actually really good and that means that were everything is working and you can also see that we have connected being printed here so that means when we connect to the server we're actually getting the value that is sending so we're getting this connected and we're printing it out decoding it all fine so that's really awesome so now the only next step is to actually send information to the server and keep like a loop going like sending receiving sending receiving sending receiving now let's actually just test um if I run this again you can see again obviously it's working again so this is the server just continually is running I don't actually have to stop this unless I want to make modifications to it so let's just keep that running for now and let's add something to our network class so in our network class we're gonna define a method that's gonna be sent now this method is gonna be very useful later on because it's gonna save us a lot of time so in Santa bridge can take a string which is gonna be data okay and all we're gonna do in here is we're going to try to self dot client dot send and I'm gonna say data STR actually dot in code Donna and then we're gonna get a reply from that server so we're gonna say return so exact same thing that we're doing here selftaught client I receive twenty 48.2 code and will accept and I believe this is a socket error yeah the socket cut error as E and just print e so if we get into some error where you know either we're sending or we're receiving it's not working let's just print that Arab to the screen so we have a look at what that really means so now let's do a test and try to send information to the server and then get something back okay now the information that we're getting back should just be the same information because that's what we have in server we're just gonna send exactly what we got right back right so doesn't make sense right now to do that but we'll talk about like what we can what valid information we can send how to send receive information in the next video when we connect up the client to the thing okay so what we're gonna do is gonna say and not send and we'll print and not send okay and we'll print and not send again and let's just send like a few bits of information and see if everything is indeed working ok so n dot send and then in here let's just type hello and we'll type working okay and see if this works so we have actually you should have yeah server is working well let's run our client and you can see we get connected hello working and if we come here it says received hello sending hello received working sending working so that's awesome that means our network class is working sending information receiving information is working server is working and now the only thing that's left to do essentially is to connect that up to this so use this network class in some meaningful way here and then to actually store information on the server and then send that information to multiple clients which we'll doing in future videos so that's gonna be it for this video we got the network class working hooked up to the server I find this stuff really cool personally like I'm really excited about doing this and showing you guys how to do this I think it's really awesome that within like a few minutes you can just set up a basic server on your local network and send or receive information and it's only like how many lines of code is this like a hundred not very many but anyways let me know what you guys have thought of this video and if you're excited for the next one and I will see you there
