With timestamps:

00:00 - hello everybody and welcome to another c
00:02 - plus plus tutorial for beginners
00:05 - now in this video what i'm going to be
00:06 - doing is showing you arithmetic
00:08 - operators
00:09 - now arithmetic operators are like
00:10 - addition subtraction
00:12 - increment decrement and the things you
00:14 - use on numbers so floats and
00:16 - ins so with that said let's dive into
00:18 - the video
00:22 - [Music]
00:27 - so i've got my starting c plus plus code
00:30 - defined i have my main function
00:32 - and what i'm going to start by doing is
00:33 - just listing out all of the operators
00:35 - that i'm going to show you
00:36 - so i'm going to use a multi-line comment
00:39 - remember that is the forward slash
00:40 - asterisks and then asterisks backward
00:42 - slash
00:43 - and these are the operators i'm going to
00:44 - show you in the order that i'll show
00:45 - them to you so plus
00:47 - minus division multiplication and then
00:50 - increment and decrement so plus plus
00:52 - means increment by one
00:54 - and minus minus means decrement by one i
00:56 - will show you that when we get to that
00:58 - so what i'm going to start by doing is
00:59 - defining two variables i'm going to say
01:01 - index equals 8
01:02 - and i'll say into y equals 9
01:06 - then i will say int sum equals x plus
01:09 - y now when you're using arithmetic
01:12 - operators
01:13 - make sure you understand the types of
01:15 - your operands
01:17 - so the operands are just the things on
01:19 - the left and right hand side of your
01:21 - operator so an operator performs an
01:23 - operation on two
01:24 - operands so in this case x is an operand
01:27 - y is an operand and the addition sign
01:30 - here is the addition
01:31 - operator so when i say in sum equals x
01:33 - plus y my left operand is an int
01:36 - my right operand is an int and so my
01:38 - result is going to be an
01:39 - int so it's very important you
01:41 - understand the types of your operands
01:42 - because when you have different typed
01:44 - operands you may have
01:45 - some type of errors for example you
01:48 - cannot add an integer to a string right
01:49 - that is an
01:50 - undefined operation because the operands
01:52 - are of different types
01:54 - so anyways let's just see out some let's
01:57 - just make sure that this does actually
01:58 - work
01:59 - and i'll go through the other operators
02:00 - of course addition is straightforward it
02:02 - is just
02:03 - addition so let's compile the program i
02:05 - actually want to compile tutorial 5
02:08 - and then let's run our program and we
02:11 - see we get 17
02:12 - the addition operator does work now of
02:15 - course
02:15 - we can chain these operators together as
02:17 - well i could add you know a 3 at the end
02:19 - here so i say x plus y
02:20 - plus three c plus plus it does follow
02:23 - the standard order of operations
02:25 - and i will show you that later in the
02:26 - video but anyways let's uh compile this
02:30 - let's run and now we get two uh wait
02:33 - why is it that we're getting two i keep
02:34 - compiling tutorial 4 sorry i want to
02:36 - compile
02:37 - tutorial 5. okay let's run this there we
02:40 - go so now we get 20.
02:41 - awesome so that is the addition operator
02:44 - now of course we have the subtraction
02:45 - operator the subtraction operator could
02:47 - give you negative numbers negative
02:49 - numbers are valid in programming
02:50 - languages and in c
02:51 - plus plus uh so let's run this we
02:54 - are going to compile okay why do we keep
02:56 - compiling tutorial 4. i want to compile
02:58 - tutorial 5.
02:59 - okay run program and there we go we get
03:01 - negative 1.
03:02 - so addition subtraction pretty
03:03 - straightforward now let's move over
03:06 - to division and sorry what did i say
03:08 - division i meant addition and
03:09 - subtraction
03:10 - okay so anyways we're going to divide
03:11 - two numbers now x divided by y
03:13 - so let's compile this and let's see what
03:15 - we get
03:16 - so notice that what i have here is i
03:18 - have 8 divided by 9.
03:20 - so take a guess of what you think we're
03:21 - going to get i don't expect you're going
03:23 - to give me the exact fractional value
03:25 - but what do you think is going to show
03:26 - up here so let's compile this
03:29 - let's run and notice we actually get 0
03:31 - here
03:32 - that's kind of strange eh because we
03:35 - probably should have gotten a floating
03:36 - point value 8 divided by 9 is not 0. we
03:38 - just know that is not the correct answer
03:40 - so why is it that we are getting 0. so
03:43 - the reason we get this is because our
03:45 - left and
03:46 - our right operands are both integers so
03:49 - whenever you perform an operation
03:51 - and both the operands are the same type
03:54 - whatever your result is is going to be
03:56 - the same type as both of those operands
03:58 - so in this case we have two ins which
03:59 - means our result is going to be an int
04:01 - so even if this division gave us like
04:04 - 0.87 or whatever
04:05 - the result actually is here we're just
04:07 - going to get zero because we're going to
04:09 - remove that entire
04:10 - entire decimal portion sorry because
04:12 - both of our types are
04:13 - ins now even if i change the type of the
04:16 - variable here so i change my sum
04:18 - variable to be equal to float
04:19 - you're going to see that we still get
04:21 - the same thing it doesn't matter if we
04:23 - change the type of this variable
04:24 - we're not all of a sudden going to get
04:25 - the floating point result now we are
04:27 - still going to get
04:28 - the integer 0 because both of our
04:31 - operands
04:31 - are int's now let me show you what
04:33 - happens though when we change only one
04:35 - of these operands to a float
04:37 - so as soon as we change one of these
04:38 - operands to a float and we compile our
04:40 - program so let's compile tutorial 5
04:43 - and let's run it now all of a sudden we
04:45 - get the correct result
04:46 - so as soon as you have one of your
04:47 - operands being equal to a float
04:49 - that means that you are going to get a
04:51 - float returned the reason for that is
04:53 - that the float has a higher level of
04:55 - precision
04:56 - than the int and so to get a valid
04:58 - answer you need to have a floating point
05:00 - result
05:01 - so just keep that in mind whenever you
05:02 - have a float and you're using arithmetic
05:04 - operators
05:05 - the result will be a float if it is a
05:07 - floating point result right so if it's
05:08 - just one or if it's just zero
05:10 - regardless of the float or ins you're
05:12 - still going to get that but
05:13 - if you could get a floating point value
05:15 - like in this case 0.8889 or whatever it
05:18 - was
05:18 - you will get that when you have one of
05:20 - these floats
05:21 - now when we change the other one to
05:23 - float and then we change this one to
05:25 - int i will show you we will get the same
05:27 - thing it doesn't matter which operand is
05:28 - a float
05:29 - as long as one of them is so compile run
05:31 - we get the same thing
05:32 - if both of them are floats this is all
05:34 - good so let's go
05:36 - float now let's run this okay run
05:38 - program
05:39 - but now what happens when i change the
05:40 - sum variable back to an int
05:42 - well take a guess but when i change this
05:44 - back to an int
05:45 - and i compile and i run now we're
05:48 - getting zero
05:49 - so what's happening here is that after
05:52 - we perform this division
05:53 - there is like a 0.8 and sorry this
05:56 - should be a bunch of eight
05:57 - nine answers so this will give us this
06:00 - x divided by y will actually give us the
06:02 - floating point answer
06:04 - and then what happens is since our
06:05 - variable is an int we will need to
06:07 - convert whatever this answer is
06:09 - to an integer which means we remove all
06:11 - of the decimal places
06:12 - and so we get zero so that is why types
06:14 - is very important
06:15 - that's why i stressed them a lot in the
06:17 - previous videos and they're just going
06:18 - to become more and more important as we
06:20 - go through
06:21 - this series so anyways that is division
06:24 - now we'll show you multiplication which
06:26 - is an asterisk
06:27 - so one single asterisk will multiply x
06:29 - by y so let's go ahead and run this
06:32 - we go g plus plus run program 72
06:36 - now let's just make one of these like
06:37 - 9.5 let's
06:39 - run and see what we get we get 76. uh
06:43 - let's make it 9.6 i want to try to get
06:45 - er
06:45 - nine point maybe seven something like
06:48 - that so we get some floating point
06:49 - result
06:50 - so that's g plus plus run program we
06:53 - still get 78 day
06:54 - uh is there oh it's because we have an
06:56 - int as the result so let me change this
06:58 - to a float i was trying to get a
06:59 - floating point result for the
07:00 - multiplication
07:01 - but i had int as the variable so let's
07:03 - do this
07:04 - run program there we go we get our
07:07 - floating point
07:08 - result uh so those are kind of the
07:10 - standard operators plus
07:11 - minus divide and then multiplied by
07:15 - now oftentimes what you will do is you
07:17 - will store the result of a division
07:19 - or a multiplication or whatever in a
07:21 - variable like we've done here
07:23 - now let's say you just wanted to like
07:24 - add some number to a variable right
07:27 - there's multiple ways to do this so in a
07:28 - lot of cases you have some variable x
07:31 - and you want to add 1 to it or you want
07:33 - to add 5 to it you want to add something
07:35 - to x right
07:36 - so there's a bunch of different ways you
07:37 - can add first you can say x is equal to
07:39 - and then x plus whatever you want to add
07:41 - to it in this case we would just add
07:43 - 8 to x you also can use this operator
07:46 - right here which is called plus
07:47 - equals so i say x plus equals 2
07:51 - and then i see out x you're going to see
07:53 - that we will add 2 to x so let's go
07:55 - ahead and run this
07:56 - run program we've added 2. so this is a
07:59 - way to add
08:00 - when you say plus equals this means
08:01 - whatever the value of x is add 2 to it
08:04 - and then assign that new value to x
08:05 - which in this case is
08:07 - 10. now of course you have minus equals
08:09 - as well so minus equals we'll remove
08:11 - two from x so let's run this run program
08:15 - there we go we get six
08:16 - you have multiplied equals which is
08:18 - going to multiply x by two
08:20 - so let's do this and g plus plus run
08:23 - program we get 16
08:25 - you have divide equals gonna divide by
08:27 - two
08:28 - so let's have a look at this g plus plus
08:31 - and then run program
08:32 - you get four and then finally you have
08:35 - increment
08:36 - and you have a decrement now what
08:38 - increment does which is plus plus
08:40 - is adds 1 to x so if you just want to
08:43 - add 1 to x there's kind of a shortcut
08:45 - that c
08:45 - plus has rather than writing plus equals
08:48 - 1 which is totally valid
08:49 - you just write plus plus and this just
08:51 - means add 1.
08:52 - so let's run this in g plus plus run
08:55 - program
08:56 - we get nine so that is increment this is
08:59 - decrement this means remove one so let's
09:01 - try this
09:03 - g plus plus run program you get seven so
09:05 - use whatever option you would like the
09:07 - cleanest ones are usually to use
09:09 - increment if you're adding one to use
09:11 - decrement if you're subtracting one
09:12 - and then any other addition subtraction
09:14 - multiplication you use the
09:16 - corresponding plus equals multiplied
09:19 - equals
09:19 - divide equals so on and so forth so we
09:23 - will continue in one second but i need
09:24 - to quickly thank the sponsor of this
09:26 - video and the series which is algo
09:28 - expert algo expert is the best platform
09:30 - to use when preparing for your software
09:31 - engineering coding interviews
09:33 - they have over 140 coding interview
09:35 - practice questions
09:36 - each of those questions have a detailed
09:38 - conceptual overview and code walkthrough
09:40 - that is in video format so it can help
09:42 - you understand how
09:43 - the question is solved with that said
09:45 - check out algo expert from the link in
09:46 - the description
09:47 - and use the code tech with tim for a
09:49 - discount on the platform
09:51 - now of course you can also use these
09:52 - with variables right so if i have
09:54 - say something like let's go in y equals
09:57 - 4
09:58 - and then i'll say x plus equals y and
10:00 - this will just add y to x
10:03 - so if we do this compile run program we
10:06 - get
10:07 - 12. so those are your standard
10:09 - arithmetic operators
10:11 - now what i will show you is how we can
10:12 - use these operators kind of in
10:14 - combination with each other
10:15 - and the order of operations for these
10:17 - and then we're pretty much done for this
10:18 - video nothing super complex today
10:21 - so there is order of operations in c
10:22 - plus plus order of operations is just
10:24 - like
10:25 - let's let's say i have some crazy
10:26 - equation or something i'll just say
10:28 - int sum equals x plus y minus
10:31 - x multiplied by seven divided by three
10:35 - uh you know let's go times two or
10:37 - something like that
10:38 - so how do we know in which order we
10:40 - should do these operations right
10:42 - because we only ever have two operands
10:44 - for each operator
10:46 - so we're going to have to pick in which
10:47 - order we're going to be performing all
10:48 - of these operations
10:49 - well we perform these operations in the
10:52 - following order
10:53 - some people have different acronyms for
10:54 - this in my school at least in elementary
10:56 - school they called it
10:57 - bed mass like this now what this stands
11:00 - for
11:01 - is brackets exponents division
11:04 - multiplication
11:05 - addition and subtraction this is the
11:07 - order in which you perform
11:09 - all of these operations here so you
11:11 - would start with anything that is inside
11:12 - of parenthesis or anything that is
11:13 - inside of brackets
11:14 - so if you put parentheses like this then
11:17 - you will you know parenthesize that part
11:18 - of the equation or the expression
11:20 - and you will do this first then you have
11:23 - exponents i haven't shown exponents i'm
11:24 - not going to show them here
11:26 - division so then obviously uh division
11:28 - you're gonna have multiplication
11:30 - and then addition and subtraction now
11:31 - division and multiplication
11:33 - have what's known as the same precedence
11:35 - this means that they can be
11:36 - executed in any order and it won't
11:38 - actually change the value of the
11:39 - expression
11:40 - so you can kind of test this for
11:42 - yourself but if you have something like
11:43 - one multiple or maybe not one two
11:46 - multiplied by
11:47 - five divided by two it doesn't matter
11:49 - the order in which you do this you're
11:50 - going to get the same result so if you
11:52 - do 5 divided by 2 first you get 2.5
11:54 - you multiply that by 2 you get 5. if you
11:57 - do 2 times 5 and then you divide by 2
11:59 - you get 10 over 2 you get 5 right
12:00 - so it gets the same thing same when
12:03 - you're doing addition and subtraction
12:05 - so that is kind of the order of
12:06 - operations so if you look at an
12:08 - expression like this i mean we can just
12:10 - see out x or c out sum and see what we
12:12 - get so not in all capitals in lower
12:14 - cases let's see
12:17 - compile run and we get negative 25.
12:21 - there you go so that is the order of
12:23 - operations i will kind of let you guys
12:25 - mess with this on your own because it's
12:26 - not too useful for me to just go through
12:28 - more examples of adding subtracting
12:30 - multiplying numbers i'm not a math
12:32 - teacher
12:33 - but i will show you one more operator
12:34 - that i forgot to show you which is the
12:36 - modulus operator which is something you
12:38 - may not have seen before
12:39 - so the modulus operator is the percent
12:42 - sign
12:42 - and what this does is give you the
12:44 - remainder of a division
12:46 - now this is actually extremely useful in
12:48 - programming and just in mathematics in
12:49 - general
12:50 - and let me just show you what i mean so
12:52 - let's say we have 8 divided by 5
12:54 - what i'm going to do is i'm going to c
12:55 - out x mod
12:57 - y so it's going to take 8 it's going to
13:00 - divide it by
13:00 - y or sorry it's going to take x it's
13:02 - going to divide it by y so 8 divided by
13:04 - 5.
13:05 - then it's going to give me the remainder
13:07 - of that division
13:08 - so what is the remainder when you divide
13:11 - 8 by 5
13:12 - well the remainder is 3. the way you
13:13 - calculate the remainder is you figure
13:15 - out how many times
13:16 - this number right here which is the
13:18 - divisor goes into the numerator
13:20 - evenly then what you do is you multiply
13:23 - this number by the number of times it
13:25 - evenly goes into this number and then
13:27 - you subtract the two so when we have
13:28 - eight times five
13:30 - five goes into eight one time so what we
13:33 - do is we say
13:34 - five times one that gives us five and
13:36 - then we take eight which is our original
13:38 - number
13:38 - we subtract it by five that gives us
13:41 - three so our remainder for this division
13:43 - is three
13:43 - the most basic example is if we do like
13:45 - three divided by two well our remainder
13:47 - here is 1
13:48 - because 2 goes into 3 one time evenly
13:51 - and then we have a remainder of 1 after
13:52 - that
13:53 - so let's do this 3 divided by 2. we're
13:56 - going to see
13:57 - that our remainder here what is this
13:59 - saying
14:00 - invalid operands of type float and int
14:02 - okay so this is interesting it's a good
14:03 - error to run into actually
14:05 - this is telling me that i cannot use the
14:07 - modulus operator
14:08 - on operands that are different types so
14:11 - what i need to do
14:12 - is i need to change this float to an it
14:15 - so let's do this
14:16 - let's compile the program let's run and
14:19 - then we get
14:20 - 1. awesome so now if i change this to 5
14:23 - what is our remainder going to be take a
14:25 - guess
14:26 - well it's actually going to be the same
14:27 - thing the reason it's going to be the
14:29 - same thing is because
14:30 - 2 it goes into 5 evenly twice and then
14:33 - we have a remainder of 1.
14:34 - now if we make this 3 what is our
14:36 - remainder going to be take a guess so
14:38 - it's 5 and then 3.
14:40 - well this is going to be 2. the reason
14:42 - is 2 is because three goes into
14:44 - five evenly one time then we have a
14:46 - remainder of two
14:47 - now let's just see what happens when we
14:48 - change these bolts to floats because i
14:50 - actually forget what's going to happen
14:52 - here if this
14:52 - works or not i think this should work
14:55 - but let's see
14:56 - let's compile and we actually get an
14:58 - error so it seems like we cannot use
15:00 - float with the modulus operator so yeah
15:03 - it seems like we just cannot use
15:05 - floats with the modulus operator i
15:07 - believe that's just something in c
15:09 - plus plus i actually don't know exactly
15:10 - why i'm sure there's some mathematical
15:12 - reason with decimal points and overflows
15:14 - and all that kind of stuff
15:15 - why we cannot use this to get the
15:16 - remainder but anyways
15:18 - that is the idea so hopefully that makes
15:21 - sense this is the modulus operator
15:23 - one small thing for this you must make
15:24 - sure you are using integers with the
15:26 - modulus operator you cannot use floats
15:28 - as either of the operands
15:30 - and yeah that's all i need to show you
15:31 - in this video so if you guys enjoyed
15:33 - make sure to leave a like
15:35 - subscribe to the channel and i will see
15:36 - you in another youtube video
15:40 - [Music]

Cleaned transcript:

hello everybody and welcome to another c plus plus tutorial for beginners now in this video what i'm going to be doing is showing you arithmetic operators now arithmetic operators are like addition subtraction increment decrement and the things you use on numbers so floats and ins so with that said let's dive into the video so i've got my starting c plus plus code defined i have my main function and what i'm going to start by doing is just listing out all of the operators that i'm going to show you so i'm going to use a multiline comment remember that is the forward slash asterisks and then asterisks backward slash and these are the operators i'm going to show you in the order that i'll show them to you so plus minus division multiplication and then increment and decrement so plus plus means increment by one and minus minus means decrement by one i will show you that when we get to that so what i'm going to start by doing is defining two variables i'm going to say index equals 8 and i'll say into y equals 9 then i will say int sum equals x plus y now when you're using arithmetic operators make sure you understand the types of your operands so the operands are just the things on the left and right hand side of your operator so an operator performs an operation on two operands so in this case x is an operand y is an operand and the addition sign here is the addition operator so when i say in sum equals x plus y my left operand is an int my right operand is an int and so my result is going to be an int so it's very important you understand the types of your operands because when you have different typed operands you may have some type of errors for example you cannot add an integer to a string right that is an undefined operation because the operands are of different types so anyways let's just see out some let's just make sure that this does actually work and i'll go through the other operators of course addition is straightforward it is just addition so let's compile the program i actually want to compile tutorial 5 and then let's run our program and we see we get 17 the addition operator does work now of course we can chain these operators together as well i could add you know a 3 at the end here so i say x plus y plus three c plus plus it does follow the standard order of operations and i will show you that later in the video but anyways let's uh compile this let's run and now we get two uh wait why is it that we're getting two i keep compiling tutorial 4 sorry i want to compile tutorial 5. okay let's run this there we go so now we get 20. awesome so that is the addition operator now of course we have the subtraction operator the subtraction operator could give you negative numbers negative numbers are valid in programming languages and in c plus plus uh so let's run this we are going to compile okay why do we keep compiling tutorial 4. i want to compile tutorial 5. okay run program and there we go we get negative 1. so addition subtraction pretty straightforward now let's move over to division and sorry what did i say division i meant addition and subtraction okay so anyways we're going to divide two numbers now x divided by y so let's compile this and let's see what we get so notice that what i have here is i have 8 divided by 9. so take a guess of what you think we're going to get i don't expect you're going to give me the exact fractional value but what do you think is going to show up here so let's compile this let's run and notice we actually get 0 here that's kind of strange eh because we probably should have gotten a floating point value 8 divided by 9 is not 0. we just know that is not the correct answer so why is it that we are getting 0. so the reason we get this is because our left and our right operands are both integers so whenever you perform an operation and both the operands are the same type whatever your result is is going to be the same type as both of those operands so in this case we have two ins which means our result is going to be an int so even if this division gave us like 0.87 or whatever the result actually is here we're just going to get zero because we're going to remove that entire entire decimal portion sorry because both of our types are ins now even if i change the type of the variable here so i change my sum variable to be equal to float you're going to see that we still get the same thing it doesn't matter if we change the type of this variable we're not all of a sudden going to get the floating point result now we are still going to get the integer 0 because both of our operands are int's now let me show you what happens though when we change only one of these operands to a float so as soon as we change one of these operands to a float and we compile our program so let's compile tutorial 5 and let's run it now all of a sudden we get the correct result so as soon as you have one of your operands being equal to a float that means that you are going to get a float returned the reason for that is that the float has a higher level of precision than the int and so to get a valid answer you need to have a floating point result so just keep that in mind whenever you have a float and you're using arithmetic operators the result will be a float if it is a floating point result right so if it's just one or if it's just zero regardless of the float or ins you're still going to get that but if you could get a floating point value like in this case 0.8889 or whatever it was you will get that when you have one of these floats now when we change the other one to float and then we change this one to int i will show you we will get the same thing it doesn't matter which operand is a float as long as one of them is so compile run we get the same thing if both of them are floats this is all good so let's go float now let's run this okay run program but now what happens when i change the sum variable back to an int well take a guess but when i change this back to an int and i compile and i run now we're getting zero so what's happening here is that after we perform this division there is like a 0.8 and sorry this should be a bunch of eight nine answers so this will give us this x divided by y will actually give us the floating point answer and then what happens is since our variable is an int we will need to convert whatever this answer is to an integer which means we remove all of the decimal places and so we get zero so that is why types is very important that's why i stressed them a lot in the previous videos and they're just going to become more and more important as we go through this series so anyways that is division now we'll show you multiplication which is an asterisk so one single asterisk will multiply x by y so let's go ahead and run this we go g plus plus run program 72 now let's just make one of these like 9.5 let's run and see what we get we get 76. uh let's make it 9.6 i want to try to get er nine point maybe seven something like that so we get some floating point result so that's g plus plus run program we still get 78 day uh is there oh it's because we have an int as the result so let me change this to a float i was trying to get a floating point result for the multiplication but i had int as the variable so let's do this run program there we go we get our floating point result uh so those are kind of the standard operators plus minus divide and then multiplied by now oftentimes what you will do is you will store the result of a division or a multiplication or whatever in a variable like we've done here now let's say you just wanted to like add some number to a variable right there's multiple ways to do this so in a lot of cases you have some variable x and you want to add 1 to it or you want to add 5 to it you want to add something to x right so there's a bunch of different ways you can add first you can say x is equal to and then x plus whatever you want to add to it in this case we would just add 8 to x you also can use this operator right here which is called plus equals so i say x plus equals 2 and then i see out x you're going to see that we will add 2 to x so let's go ahead and run this run program we've added 2. so this is a way to add when you say plus equals this means whatever the value of x is add 2 to it and then assign that new value to x which in this case is 10. now of course you have minus equals as well so minus equals we'll remove two from x so let's run this run program there we go we get six you have multiplied equals which is going to multiply x by two so let's do this and g plus plus run program we get 16 you have divide equals gonna divide by two so let's have a look at this g plus plus and then run program you get four and then finally you have increment and you have a decrement now what increment does which is plus plus is adds 1 to x so if you just want to add 1 to x there's kind of a shortcut that c plus has rather than writing plus equals 1 which is totally valid you just write plus plus and this just means add 1. so let's run this in g plus plus run program we get nine so that is increment this is decrement this means remove one so let's try this g plus plus run program you get seven so use whatever option you would like the cleanest ones are usually to use increment if you're adding one to use decrement if you're subtracting one and then any other addition subtraction multiplication you use the corresponding plus equals multiplied equals divide equals so on and so forth so we will continue in one second but i need to quickly thank the sponsor of this video and the series which is algo expert algo expert is the best platform to use when preparing for your software engineering coding interviews they have over 140 coding interview practice questions each of those questions have a detailed conceptual overview and code walkthrough that is in video format so it can help you understand how the question is solved with that said check out algo expert from the link in the description and use the code tech with tim for a discount on the platform now of course you can also use these with variables right so if i have say something like let's go in y equals 4 and then i'll say x plus equals y and this will just add y to x so if we do this compile run program we get 12. so those are your standard arithmetic operators now what i will show you is how we can use these operators kind of in combination with each other and the order of operations for these and then we're pretty much done for this video nothing super complex today so there is order of operations in c plus plus order of operations is just like let's let's say i have some crazy equation or something i'll just say int sum equals x plus y minus x multiplied by seven divided by three uh you know let's go times two or something like that so how do we know in which order we should do these operations right because we only ever have two operands for each operator so we're going to have to pick in which order we're going to be performing all of these operations well we perform these operations in the following order some people have different acronyms for this in my school at least in elementary school they called it bed mass like this now what this stands for is brackets exponents division multiplication addition and subtraction this is the order in which you perform all of these operations here so you would start with anything that is inside of parenthesis or anything that is inside of brackets so if you put parentheses like this then you will you know parenthesize that part of the equation or the expression and you will do this first then you have exponents i haven't shown exponents i'm not going to show them here division so then obviously uh division you're gonna have multiplication and then addition and subtraction now division and multiplication have what's known as the same precedence this means that they can be executed in any order and it won't actually change the value of the expression so you can kind of test this for yourself but if you have something like one multiple or maybe not one two multiplied by five divided by two it doesn't matter the order in which you do this you're going to get the same result so if you do 5 divided by 2 first you get 2.5 you multiply that by 2 you get 5. if you do 2 times 5 and then you divide by 2 you get 10 over 2 you get 5 right so it gets the same thing same when you're doing addition and subtraction so that is kind of the order of operations so if you look at an expression like this i mean we can just see out x or c out sum and see what we get so not in all capitals in lower cases let's see compile run and we get negative 25. there you go so that is the order of operations i will kind of let you guys mess with this on your own because it's not too useful for me to just go through more examples of adding subtracting multiplying numbers i'm not a math teacher but i will show you one more operator that i forgot to show you which is the modulus operator which is something you may not have seen before so the modulus operator is the percent sign and what this does is give you the remainder of a division now this is actually extremely useful in programming and just in mathematics in general and let me just show you what i mean so let's say we have 8 divided by 5 what i'm going to do is i'm going to c out x mod y so it's going to take 8 it's going to divide it by y or sorry it's going to take x it's going to divide it by y so 8 divided by 5. then it's going to give me the remainder of that division so what is the remainder when you divide 8 by 5 well the remainder is 3. the way you calculate the remainder is you figure out how many times this number right here which is the divisor goes into the numerator evenly then what you do is you multiply this number by the number of times it evenly goes into this number and then you subtract the two so when we have eight times five five goes into eight one time so what we do is we say five times one that gives us five and then we take eight which is our original number we subtract it by five that gives us three so our remainder for this division is three the most basic example is if we do like three divided by two well our remainder here is 1 because 2 goes into 3 one time evenly and then we have a remainder of 1 after that so let's do this 3 divided by 2. we're going to see that our remainder here what is this saying invalid operands of type float and int okay so this is interesting it's a good error to run into actually this is telling me that i cannot use the modulus operator on operands that are different types so what i need to do is i need to change this float to an it so let's do this let's compile the program let's run and then we get 1. awesome so now if i change this to 5 what is our remainder going to be take a guess well it's actually going to be the same thing the reason it's going to be the same thing is because 2 it goes into 5 evenly twice and then we have a remainder of 1. now if we make this 3 what is our remainder going to be take a guess so it's 5 and then 3. well this is going to be 2. the reason is 2 is because three goes into five evenly one time then we have a remainder of two now let's just see what happens when we change these bolts to floats because i actually forget what's going to happen here if this works or not i think this should work but let's see let's compile and we actually get an error so it seems like we cannot use float with the modulus operator so yeah it seems like we just cannot use floats with the modulus operator i believe that's just something in c plus plus i actually don't know exactly why i'm sure there's some mathematical reason with decimal points and overflows and all that kind of stuff why we cannot use this to get the remainder but anyways that is the idea so hopefully that makes sense this is the modulus operator one small thing for this you must make sure you are using integers with the modulus operator you cannot use floats as either of the operands and yeah that's all i need to show you in this video so if you guys enjoyed make sure to leave a like subscribe to the channel and i will see you in another youtube video
