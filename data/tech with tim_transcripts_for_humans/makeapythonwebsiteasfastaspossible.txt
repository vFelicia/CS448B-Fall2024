With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - youtube video so in today's video i'm
00:12 - going to show you how to make a website
00:14 - in python as fast as possible now we're
00:17 - going to be using the flask module which
00:19 - is a lightweight web framework for
00:21 - python this will show you pretty much
00:22 - everything you need to know to set up a
00:24 - relatively simple website however if you
00:26 - are looking for something more advanced
00:28 - specifically something that has a
00:30 - database integration i have a ton of
00:32 - other tutorials on this channel i'll
00:33 - throw them up on the screen and link
00:35 - them in the description so if you're
00:37 - feel free to check out those after i am
00:39 - going to talk extremely fast and with
00:41 - that said the first thing that you need
00:43 - to do is head over as fast as possible
00:45 - to check out our sponsor before we dive
00:48 - in i need to thank ltm designer for
00:50 - sponsoring this video
00:52 - ltm designer is the world's most trusted
00:54 - pcb design system that enables engineers
00:56 - to effortlessly connect with every facet
00:58 - of the electronics design process ltm
01:01 - designer has used 35 years of innovation
01:04 - and development to create a truly
01:05 - unifying design environment that makes
01:07 - it the most used pcb design solution on
01:10 - the market ltm designer provides an
01:12 - intuitive and powerful interface that
01:14 - lets you design pcbs rapidly while
01:16 - interacting and collaborating with your
01:18 - mechanical designers the interface
01:20 - provides a photo realistic 3d
01:22 - environment collaboration and
01:24 - synchronization with tools including
01:26 - solidworks ptc creo and autodesk
01:28 - inventor realistic rigid flex designs
01:32 - multi-board assembly and much more ltm
01:35 - designer is the most popular ecad tool
01:37 - and electronics design software and you
01:39 - can get started with it today for free
01:41 - by pressing the link in the description
01:43 - and registering for a free trial thanks
01:46 - again to ltm designer for sponsoring
01:48 - this video and now let's dive in alright
01:50 - so let's get going as i warned you
01:52 - before i'm going to go quite quickly so
01:53 - feel free to slow down the video or
01:55 - pause if i'm going too fast for you
01:57 - anyways i'm here in vs code i have
01:59 - python installed any version of python 3
02:01 - will work for this and the first thing
02:03 - i'm going to do is pip install flask now
02:06 - if this command does not work for you i
02:07 - have two videos on my channel showing
02:09 - you how to fix it quickly though you can
02:11 - try python hyphen m pip install flask or
02:14 - python hyphen m pip3 install flask and
02:17 - then finally if that doesn't work you
02:18 - can try python 3 hyphen m pip install
02:20 - flask regardless i already have flask
02:23 - installed so now we can start setting up
02:24 - our directory structure so as i
02:26 - mentioned flask is a lightweight web
02:28 - framework for python this allows you to
02:31 - very quickly spin up a python website
02:33 - and it's super easy to do this so the
02:35 - first thing that we're going to do is
02:36 - create a file this file is going to be
02:38 - called app.pi let me just zoom in a bit
02:40 - here so you guys can see this we're then
02:42 - going to make another file called
02:43 - views.pi we're then going to make a
02:45 - folder called templates i'm going to
02:48 - make another folder not inside of there
02:50 - called static and then that's all we
02:52 - need for right now now we're going to go
02:54 - inside of our app.pi file this will be
02:56 - the entry point for our python website
02:58 - and we're going to initialize flask so
03:00 - i'm going to say from flask import flask
03:04 - with a capital f and then what i'm going
03:06 - to do is create my flask application
03:08 - whenever you create a flask app you say
03:10 - app equals flask and then underscore
03:12 - underscore name underscore underscore
03:14 - this initializes the application and
03:16 - then what you can do after this is run
03:18 - your app so i can say if underscore
03:20 - underscore name underscore underscore
03:22 - equals main then app.run
03:25 - debug equals true and this is actually
03:27 - all you need to start running your flask
03:30 - website now there is an optional
03:31 - argument here called port you can tell
03:33 - flask what port you want to run the
03:35 - website on by default it is port 8000
03:38 - but you can change it to whatever you
03:39 - want or sorry by default it is port 5000
03:42 - but you can change it to whatever in
03:43 - this case we'll go with 8 thousand now
03:46 - let's just see what happens if we run
03:47 - this so if i run my script notice that
03:50 - if we give it a second here it is
03:52 - running my flask application this is the
03:54 - url that we would go to to access the
03:56 - website we don't have any roots right
03:58 - now so we won't see anything but this is
04:00 - where the website will be live now the
04:02 - reason i put debug equals true here
04:04 - because this will make it so that
04:06 - whenever you change any files inside of
04:08 - your flask application it will
04:10 - automatically refresh the app so you
04:12 - don't have to keep re-running this
04:14 - script unless you have any syntax errors
04:16 - or for some reason the script crashes
04:17 - but regardless if we make any changes
04:19 - like if i just go like this and save
04:21 - notice says detected change restarts and
04:24 - we're good to go alright so now that we
04:25 - have initialized the app we need to
04:27 - start creating some views or some routes
04:29 - now roots are kind of the end point of
04:31 - the url so something like say slash home
04:33 - that we can actually visit on our
04:35 - website so i'm going to go to views.pi
04:37 - i'm going to say from flask import with
04:39 - a capital blueprint and what we need to
04:42 - do is define a view blueprint now we
04:44 - could very easily inside of this script
04:47 - say
04:47 - app.root
04:49 - give the route that we want and then say
04:51 - define and let's just call this home and
04:54 - then inside of here we can return
04:56 - whatever it is that we want so let's
04:57 - just say this is the
04:59 - home page and this needs to be an at
05:02 - sign my bad so it's a decorator so you
05:04 - say at app.root you define the root you
05:07 - return whatever it is you want to return
05:08 - from here usually this is html in this
05:11 - case i'm just returning a string and now
05:13 - if i rerun my script here and i go to
05:16 - slash we will see this so let's go ahead
05:19 - and do that i'm going to go to port
05:22 - 8000
05:24 - and now notice it says this is the home
05:27 - page so that is how you set up a route
05:29 - however i like to set up my routes in a
05:31 - separate file such that it doesn't
05:32 - clutter the kind of main initialization
05:35 - script so what we do instead is we
05:36 - create a blueprint so we can put all of
05:38 - our roots in this file instead of this
05:41 - file anyways the way you do this is the
05:43 - following you say whatever the name of
05:44 - your file is really you can name this
05:46 - whatever you want is equal to blueprint
05:49 - then you're going to put the name of
05:50 - this blueprint i just make it so it
05:52 - matches this variable name it makes it
05:54 - easier and then actually that's all you
05:57 - need to initialize the blueprint then
05:59 - what you can do is say at
06:01 - and this will be views dot root and
06:04 - inside of here you can define your route
06:06 - so i'm gonna do slash and then i'm gonna
06:08 - say define
06:09 - home and here i will just return
06:13 - home page like
06:15 - that
06:16 - okay so now that we have created this
06:18 - blueprint we need to link to the
06:19 - blueprint or register the blueprint from
06:22 - our flask application so i'm going to
06:24 - delete this route right here and now
06:26 - right after i create my flask app i'm
06:28 - going to say app dot register blueprint
06:30 - and i'm going to put the name of my
06:32 - blueprint which is going to be views and
06:34 - then the url underscore prefix which is
06:37 - the prefix to access any of the views in
06:39 - this route i'll explain that in a second
06:41 - first we need to import this views
06:43 - python file so we're going to say from
06:46 - views
06:47 - import views
06:49 - what this will do is import this
06:51 - variable right here from our views file
06:53 - so now we can register this blueprint
06:56 - and we say the url prefix is slash that
06:58 - means we are going to access all of the
07:00 - routes in here from slash now if i did
07:03 - something like
07:04 - slash views this would mean we would
07:07 - access this route here by typing slash
07:10 - views now to make this a bit more
07:13 - intuitive if i said slash home and we'll
07:16 - just go home to here the way i would
07:18 - access this route if the url prefix is
07:21 - views is slash views slash home
07:24 - hopefully that makes sense but that's
07:26 - what the url prefix means let's just
07:28 - delete this for now let's rerun the
07:30 - script and we are missing one required
07:34 - positional argument name all right so
07:35 - the error i was having is i forgot to
07:37 - add an argument here underscore
07:39 - underscore name underscore underscore
07:41 - this is the first argument you have to
07:42 - pass to blueprint and then the name of
07:44 - the blueprint my apologies about this
07:46 - don't worry about exactly how this works
07:48 - but this is just how you define the
07:49 - blueprint anyways now what i'm going to
07:51 - do is run this now remember that our url
07:54 - prefix is slash views so if i want to
07:56 - access this route i have to go to slash
07:58 - views so i'm going to go here and go to
08:01 - slash views and then notice it brings me
08:03 - to the home page so that is the very
08:05 - basics of defining a route now clearly
08:08 - you probably want to return something
08:09 - that looks a little bit nicer than just
08:11 - a string from your roots so i'm going to
08:13 - show you how you can actually return an
08:15 - html document so we need to go inside of
08:17 - our templates folder it's very important
08:19 - you name this folder templates and this
08:21 - is where you put all of your html
08:23 - templates so just the html you want to
08:25 - render onto the screen so go inside of
08:27 - this folder again it has to be named
08:28 - templates and then what you're going to
08:30 - do is make a new file i'm going to call
08:32 - mine index.html you can call yours
08:34 - whatever you want so since i'm in vs
08:36 - code here there's actually a little
08:37 - shortcut i can use to generate a
08:39 - boilerplate html template first i need
08:42 - to make sure my language is changed to
08:44 - html uh not django html i have a django
08:47 - extension sorry so that's why it's doing
08:49 - that so now if i type html colon 5 and
08:52 - hit tab it will actually generate a
08:54 - boilerplate template for me anyways i'm
08:56 - just going to change this to say home
08:58 - inside of the body i'll put a div and
09:01 - inside of the div i'll put an h1 tag
09:03 - that just says
09:05 - home page alright so now let me show you
09:07 - how we actually render this page the way
09:10 - that we do this is we go to views.pi we
09:12 - need to import from flask render
09:15 - template and now instead of returning a
09:17 - string we return the render template and
09:21 - we put the name of our template so i
09:23 - just put index.html
09:25 - and now it will render this html
09:27 - template to the page when we go to this
09:29 - root so if i go here and i refresh
09:31 - notice now our html page is being
09:33 - rendered and we see home page there you
09:36 - go that is the basics of rendering html
09:39 - now while we're talking about render
09:40 - template the reason why this is called a
09:42 - template is because you can actually
09:43 - pass variables and values to the
09:45 - template that can then be rendered by it
09:48 - for example what i can do is the
09:50 - following i can pass a keyword argument
09:52 - let's say name
09:54 - is equal to tim right after i write
09:56 - index.html you can write as many of
09:58 - these as you want and i can actually
10:00 - access this variable inside of my
10:03 - template so if i go to index.html i can
10:06 - do
10:07 - let's go with like a p tag here and i
10:09 - can say hello comma and then if i use
10:12 - two squigglies like this
10:14 - i call them squigglies but you know
10:16 - squiggly brackets and i write name it
10:18 - will actually render name to the screen
10:21 - so whatever the name is that i passed to
10:23 - this template that is what will show up
10:25 - here whenever you're accessing a
10:27 - variable in the template you use
10:29 - double squiggly brackets okay so now
10:31 - let's go here and let's refresh and
10:33 - notice it says hello tim if i go
10:36 - and i change this to say
10:38 - joe and we rerun it says hello joe that
10:42 - is how you pass values you can also pass
10:44 - multiple values so i could say you know
10:46 - age equals 21 and then if i go here and
10:49 - say hello
10:50 - you are
10:52 - and then age we need another set of
10:54 - these
10:56 - years old and now if i run this we get
11:00 - the age as well all right so i showed
11:02 - you how we can pass variables to the
11:04 - templates now again you access them with
11:05 - double squiggly brackets now i'm going
11:07 - to talk to you about a few different
11:08 - things you can do with the routes so a
11:10 - lot of times when you go to a page the
11:12 - page is going to change based on what
11:14 - you type into the actual url for example
11:17 - let's create a new route here let's say
11:19 - at views.root let's call this slash
11:22 - profile and maybe the profile is for a
11:25 - specific person so maybe we actually
11:26 - want to go to slash profile slash then
11:28 - whatever the name or the username of the
11:30 - profile is that we want to access if i
11:32 - want to do that i want to have kind of
11:34 - like a dynamic url i can put inside of
11:37 - angled brackets the parameter for this
11:40 - url so in this case i want this to be a
11:43 - username so i can say profile slash
11:45 - username then i'm going to say define
11:47 - and we'll go profile the parameter is
11:50 - going to be username it needs to match
11:52 - the name that you put here and now what
11:54 - i can do is return render template let's
11:57 - just render
11:59 - index.html
12:00 - instead of username let's just say name
12:02 - is equal to username
12:05 - so now what's going to happen is we will
12:07 - actually just display whatever the
12:08 - person's username is if we go to this
12:11 - root otherwise we will display
12:13 - joe from this now let's go to index.html
12:17 - let me just remove age
12:18 - just so it says hello name now let me
12:21 - rerun this script and i'll explain this
12:22 - again in one second just want to refresh
12:25 - go to slash views slash
12:27 - profile slash tim and now notice this is
12:31 - going to change and show me whatever i
12:32 - type in here so if i change this now to
12:34 - be billy it shows billy so the way you
12:36 - access a parameter that is in the url is
12:39 - use the angle brackets you put it as a
12:42 - parameter for the function that is going
12:44 - to return whatever it is that you want
12:47 - there you go that is how you can access
12:48 - parameters in url now what about query
12:51 - parameters so let's say maybe what we
12:53 - wanted to do is change it so rather than
12:55 - profile slash billy we're going to go
12:57 - profile question mark and then name
12:59 - equals so we're going to pass a query
13:01 - parameter well how do we accept those
13:03 - the way that we accept those is we
13:04 - import something called request from
13:07 - flask and then we say that our arguments
13:10 - are equal to request dot args so now
13:13 - what we can do is use this as a
13:15 - dictionary to access any query
13:17 - parameters so let's say we want to
13:20 - actually get the name i will say name
13:23 - is equal to args.get
13:26 - name like that and this will give me
13:28 - access to the value of that query
13:29 - parameter if it exists so now rather
13:32 - than name equals username i can say name
13:34 - equals name let me just remove this so
13:36 - now it's just slash profile so i don't
13:38 - need to pass a name
13:39 - let's rerun this script and let's
13:42 - refresh okay so now we're going to go to
13:44 - profile question mark name equals tim
13:46 - and now notice it says hello tim again
13:49 - if we change this to billy then we get
13:51 - hello billy so that is how you access
13:53 - query parameters uh if you want to
13:55 - access multiple query parameters you
13:57 - just repeat this with whatever the name
13:58 - of those parameters are all right now
14:01 - i'm going to show you how you can return
14:02 - json from this because returning html is
14:05 - great but a lot of times you want to
14:06 - return json so i'm going to say at views
14:08 - dot root i'm going to say slash json i'm
14:11 - going to say define json i actually
14:14 - probably shouldn't call it that let's
14:15 - call it get json and now if you want to
14:18 - return json you can simply return a
14:20 - python dictionary but first you need to
14:22 - jsonify it so what we need to do is
14:24 - import
14:26 - jsonify like that and i'll kind of show
14:29 - you how this works
14:30 - so we're going to return jsonify and
14:33 - then whatever data you want to return
14:35 - just put inside of a python dictionary
14:36 - as you normally would it will convert it
14:38 - to json and return it so for example i
14:40 - go name
14:41 - tim uh let's go coolness
14:46 - 10
14:46 - okay and now if i rerun this and i
14:50 - access the
14:51 - slash json endpoint we'll see that this
14:53 - is returned to us so let's go here
14:56 - let's go to views slash json and then it
14:59 - actually gives us this json now since
15:00 - we're doing it from the web uh it's
15:02 - going to actually show it to us as json
15:05 - or like show it to us on the page but if
15:07 - we were calling this from say javascript
15:08 - it would give us an actual json object
15:10 - that we could access all right so now we
15:12 - know how to get query parameters we know
15:14 - how to send json we know how to return
15:16 - html finally i will show you how we can
15:18 - actually get data from a request that's
15:20 - incoming and then i will show you how to
15:22 - redirect and a few other small things so
15:24 - let's say at views dot root let's go
15:27 - slash data so someone's going to send us
15:29 - some data in a json format to this root
15:32 - we're going to say define get underscore
15:34 - data and the way that we get this is we
15:36 - say that our data is equal to request
15:39 - dot json so now what i can actually do
15:41 - is just return the jsonify
15:44 - of the data so what's going to happen
15:47 - when you go to this root is whatever you
15:48 - send it it will just return now i'm not
15:50 - going to write anything that will
15:52 - actually send this root json but this is
15:55 - how you access json from a root okay so
15:58 - if json data is sent to a specific root
16:01 - this is how you can access it all right
16:03 - so the last thing i want to show you is
16:05 - how to redirect so a lot of times you
16:06 - want to redirect to a different page the
16:08 - way you can do that is the following so
16:10 - let's set up a new route at views.root
16:13 - let's just go
16:14 - [Music]
16:15 - go
16:17 - to home and let's go slash
16:21 - let's call this function define go to
16:24 - home okay and all we're going to do here
16:27 - is return we need to import two things
16:30 - the first thing is redirect and the next
16:33 - thing is url underscore four so you need
16:35 - to import redirect and url4 for this to
16:37 - work and you're going to return the
16:39 - redirect url for and then you're going
16:42 - to put the name of the route that you
16:44 - want to redirect to so notice i'm
16:46 - prefixing this with views the reason for
16:48 - that is the name of our uh what do you
16:50 - call it
16:51 - uh
16:52 - template sorry is views so i want to put
16:55 - views and then whatever the function
16:56 - name is that i want to redirect to so if
16:58 - i want to redirect to say home i would
17:00 - go views.home if i want to go to profile
17:02 - it would go views.profile whatever the
17:04 - function name is so dot get get
17:06 - underscore json it would bring me there
17:08 - so let's go
17:09 - to
17:10 - get underscore json so now when you go
17:13 - to this url it will actually bring you
17:15 - to get json now i know i said home but
17:18 - whatever let's just see how this works
17:20 - so i'm going to go here and i'm going to
17:22 - go slash view slash go to
17:26 - home and then notice it brings me to the
17:28 - json now if i change this to be views
17:31 - dot home which is what it really should
17:32 - be
17:33 - and we go to
17:36 - go to
17:37 - home
17:38 - if i spell that correctly it brings me
17:40 - to the home page so that is how you can
17:43 - redirect hopefully that helps all right
17:45 - finally last thing i will show you is
17:47 - how to actually add javascript to this
17:50 - so obviously i've just gone through very
17:51 - simple examples but javascript is pretty
17:53 - important so the way that you can add
17:55 - javascript is you can go into your
17:57 - index.html page and you can in the
18:00 - bottom of the body but really anywhere
18:02 - say script
18:04 - slash script like you normally would you
18:07 - can say your type is equal to
18:09 - text slash
18:11 - javascript and then your source is going
18:13 - to be equal to the following you're
18:15 - going to do two squigglys like this
18:17 - you're going to say url underscore four
18:20 - you're going to put static inside of a
18:22 - string although this needs to be a
18:23 - single quoted string and then you're
18:26 - going to say that the file name is equal
18:28 - to whatever the name of your javascript
18:30 - file is which in this case i'm going to
18:32 - say is index.js so hopefully you guys
18:34 - can read that all right this is our
18:36 - source and then i'm going to go in my
18:38 - static folder make sure it's called
18:40 - static create a new file call this
18:42 - index.js
18:44 - and just to prove to you that this is
18:45 - running i will say console.log
18:48 - and run so as soon as this script is
18:50 - loaded it should just say you know
18:53 - i am
18:54 - let's go running
18:56 - okay so now what i need to do if i want
18:58 - the javascript to be loaded is i need to
19:00 - refresh the page and clear the cache so
19:03 - the way you do this on chrome is you
19:04 - right click press inspect then right
19:07 - click on this little button here the
19:08 - refresh button press empty cache and
19:10 - hard reload then you can go look at the
19:12 - console so if you go here to console
19:14 - notice it says i am running the
19:16 - javascript is indeed running not going
19:19 - to explain any more than that you guys
19:20 - can mess around with the javascript as
19:22 - you please okay finally the last thing
19:24 - i'll mention is that the templating
19:26 - engine that is used for flask is called
19:29 - jenga so
19:30 - j-i-n-j-a i'll put it up on the screen
19:32 - so you can see what i'm talking about
19:34 - but it's very powerful and it allows you
19:36 - to do something called template
19:38 - inheritance so a lot of times you create
19:40 - an html page that kind of is the theme
19:42 - of your website and then you want other
19:44 - pages to be slightly different but to
19:46 - keep the same theme so what you can do
19:48 - is inherit all of the html from one page
19:51 - and override certain aspects of it let
19:53 - me show you what i mean so here i'm
19:55 - going to create what's known as a block
19:57 - now you can create as many blocks as you
19:58 - want and you can call them whatever you
20:00 - want but the syntax for creating them is
20:02 - sorry squiggly bracket percent sign and
20:05 - then percent sign
20:07 - squiggly bracket you write block and
20:09 - then you write what the name of the
20:10 - block is then you need to end the block
20:13 - so i'm going to go here and go end block
20:16 - like this so now this is my content
20:19 - block and this can be overridden from
20:21 - any template that inherits from
20:22 - index.html
20:24 - let me show you what i mean if i make a
20:25 - new template and i call this let's just
20:28 - go profile.html
20:31 - now if i want to use
20:33 - this template but override what's in the
20:35 - content block this is how i do it i go
20:38 - percent percent
20:40 - extends and then this is going to be the
20:42 - name of the template i want to extend so
20:44 - index
20:45 - dot html and then i'm going to redefine
20:49 - my block so i'm going to say
20:52 - block content
20:54 - and then i need to end the block oh it
20:56 - already did that for me okay nice and
20:58 - then inside of here i put whatever i
21:00 - want to appear where this block is so
21:02 - we'll override what's inside of this
21:03 - block so for now let's just say
21:06 - h1
21:08 - and slash h1 and we'll say this is the
21:13 - profile page exclamation point okay so
21:16 - now if i go to views let's make a new
21:18 - view
21:19 - actually for profile let's just render
21:22 - the template
21:24 - profile.html we can remove all of these
21:26 - query parameters and stuff we don't need
21:28 - this anymore
21:29 - so now we're just going to render
21:30 - profile.html when we go to this page
21:32 - let's make sure this is running
21:34 - it is
21:36 - so now i'm going to go to slash views
21:37 - slash profile
21:39 - brings me to the profile page all right
21:42 - with that said i think i am done i am
21:45 - officially out of breath i went as fast
21:47 - as i possibly could hopefully this was
21:49 - somewhat helpful and gave you a very
21:51 - quick introduction to flask showed you
21:52 - how to very quickly start up a website
21:55 - again if you want more in-depth
21:56 - explanations for all of these things i
21:58 - went too fast for you i lost you in this
22:00 - video i have many other much slower much
22:03 - more in-depth tutorials on flask again
22:05 - you can find those from the link in the
22:06 - description regardless i hope you
22:08 - enjoyed if you did make sure to leave a
22:09 - like subscribe to the channel and i will
22:11 - see you in another one
22:14 - [Music]

Cleaned transcript:

hello everybody and welcome to another youtube video so in today's video i'm going to show you how to make a website in python as fast as possible now we're going to be using the flask module which is a lightweight web framework for python this will show you pretty much everything you need to know to set up a relatively simple website however if you are looking for something more advanced specifically something that has a database integration i have a ton of other tutorials on this channel i'll throw them up on the screen and link them in the description so if you're feel free to check out those after i am going to talk extremely fast and with that said the first thing that you need to do is head over as fast as possible to check out our sponsor before we dive in i need to thank ltm designer for sponsoring this video ltm designer is the world's most trusted pcb design system that enables engineers to effortlessly connect with every facet of the electronics design process ltm designer has used 35 years of innovation and development to create a truly unifying design environment that makes it the most used pcb design solution on the market ltm designer provides an intuitive and powerful interface that lets you design pcbs rapidly while interacting and collaborating with your mechanical designers the interface provides a photo realistic 3d environment collaboration and synchronization with tools including solidworks ptc creo and autodesk inventor realistic rigid flex designs multiboard assembly and much more ltm designer is the most popular ecad tool and electronics design software and you can get started with it today for free by pressing the link in the description and registering for a free trial thanks again to ltm designer for sponsoring this video and now let's dive in alright so let's get going as i warned you before i'm going to go quite quickly so feel free to slow down the video or pause if i'm going too fast for you anyways i'm here in vs code i have python installed any version of python 3 will work for this and the first thing i'm going to do is pip install flask now if this command does not work for you i have two videos on my channel showing you how to fix it quickly though you can try python hyphen m pip install flask or python hyphen m pip3 install flask and then finally if that doesn't work you can try python 3 hyphen m pip install flask regardless i already have flask installed so now we can start setting up our directory structure so as i mentioned flask is a lightweight web framework for python this allows you to very quickly spin up a python website and it's super easy to do this so the first thing that we're going to do is create a file this file is going to be called app.pi let me just zoom in a bit here so you guys can see this we're then going to make another file called views.pi we're then going to make a folder called templates i'm going to make another folder not inside of there called static and then that's all we need for right now now we're going to go inside of our app.pi file this will be the entry point for our python website and we're going to initialize flask so i'm going to say from flask import flask with a capital f and then what i'm going to do is create my flask application whenever you create a flask app you say app equals flask and then underscore underscore name underscore underscore this initializes the application and then what you can do after this is run your app so i can say if underscore underscore name underscore underscore equals main then app.run debug equals true and this is actually all you need to start running your flask website now there is an optional argument here called port you can tell flask what port you want to run the website on by default it is port 8000 but you can change it to whatever you want or sorry by default it is port 5000 but you can change it to whatever in this case we'll go with 8 thousand now let's just see what happens if we run this so if i run my script notice that if we give it a second here it is running my flask application this is the url that we would go to to access the website we don't have any roots right now so we won't see anything but this is where the website will be live now the reason i put debug equals true here because this will make it so that whenever you change any files inside of your flask application it will automatically refresh the app so you don't have to keep rerunning this script unless you have any syntax errors or for some reason the script crashes but regardless if we make any changes like if i just go like this and save notice says detected change restarts and we're good to go alright so now that we have initialized the app we need to start creating some views or some routes now roots are kind of the end point of the url so something like say slash home that we can actually visit on our website so i'm going to go to views.pi i'm going to say from flask import with a capital blueprint and what we need to do is define a view blueprint now we could very easily inside of this script say app.root give the route that we want and then say define and let's just call this home and then inside of here we can return whatever it is that we want so let's just say this is the home page and this needs to be an at sign my bad so it's a decorator so you say at app.root you define the root you return whatever it is you want to return from here usually this is html in this case i'm just returning a string and now if i rerun my script here and i go to slash we will see this so let's go ahead and do that i'm going to go to port 8000 and now notice it says this is the home page so that is how you set up a route however i like to set up my routes in a separate file such that it doesn't clutter the kind of main initialization script so what we do instead is we create a blueprint so we can put all of our roots in this file instead of this file anyways the way you do this is the following you say whatever the name of your file is really you can name this whatever you want is equal to blueprint then you're going to put the name of this blueprint i just make it so it matches this variable name it makes it easier and then actually that's all you need to initialize the blueprint then what you can do is say at and this will be views dot root and inside of here you can define your route so i'm gonna do slash and then i'm gonna say define home and here i will just return home page like that okay so now that we have created this blueprint we need to link to the blueprint or register the blueprint from our flask application so i'm going to delete this route right here and now right after i create my flask app i'm going to say app dot register blueprint and i'm going to put the name of my blueprint which is going to be views and then the url underscore prefix which is the prefix to access any of the views in this route i'll explain that in a second first we need to import this views python file so we're going to say from views import views what this will do is import this variable right here from our views file so now we can register this blueprint and we say the url prefix is slash that means we are going to access all of the routes in here from slash now if i did something like slash views this would mean we would access this route here by typing slash views now to make this a bit more intuitive if i said slash home and we'll just go home to here the way i would access this route if the url prefix is views is slash views slash home hopefully that makes sense but that's what the url prefix means let's just delete this for now let's rerun the script and we are missing one required positional argument name all right so the error i was having is i forgot to add an argument here underscore underscore name underscore underscore this is the first argument you have to pass to blueprint and then the name of the blueprint my apologies about this don't worry about exactly how this works but this is just how you define the blueprint anyways now what i'm going to do is run this now remember that our url prefix is slash views so if i want to access this route i have to go to slash views so i'm going to go here and go to slash views and then notice it brings me to the home page so that is the very basics of defining a route now clearly you probably want to return something that looks a little bit nicer than just a string from your roots so i'm going to show you how you can actually return an html document so we need to go inside of our templates folder it's very important you name this folder templates and this is where you put all of your html templates so just the html you want to render onto the screen so go inside of this folder again it has to be named templates and then what you're going to do is make a new file i'm going to call mine index.html you can call yours whatever you want so since i'm in vs code here there's actually a little shortcut i can use to generate a boilerplate html template first i need to make sure my language is changed to html uh not django html i have a django extension sorry so that's why it's doing that so now if i type html colon 5 and hit tab it will actually generate a boilerplate template for me anyways i'm just going to change this to say home inside of the body i'll put a div and inside of the div i'll put an h1 tag that just says home page alright so now let me show you how we actually render this page the way that we do this is we go to views.pi we need to import from flask render template and now instead of returning a string we return the render template and we put the name of our template so i just put index.html and now it will render this html template to the page when we go to this root so if i go here and i refresh notice now our html page is being rendered and we see home page there you go that is the basics of rendering html now while we're talking about render template the reason why this is called a template is because you can actually pass variables and values to the template that can then be rendered by it for example what i can do is the following i can pass a keyword argument let's say name is equal to tim right after i write index.html you can write as many of these as you want and i can actually access this variable inside of my template so if i go to index.html i can do let's go with like a p tag here and i can say hello comma and then if i use two squigglies like this i call them squigglies but you know squiggly brackets and i write name it will actually render name to the screen so whatever the name is that i passed to this template that is what will show up here whenever you're accessing a variable in the template you use double squiggly brackets okay so now let's go here and let's refresh and notice it says hello tim if i go and i change this to say joe and we rerun it says hello joe that is how you pass values you can also pass multiple values so i could say you know age equals 21 and then if i go here and say hello you are and then age we need another set of these years old and now if i run this we get the age as well all right so i showed you how we can pass variables to the templates now again you access them with double squiggly brackets now i'm going to talk to you about a few different things you can do with the routes so a lot of times when you go to a page the page is going to change based on what you type into the actual url for example let's create a new route here let's say at views.root let's call this slash profile and maybe the profile is for a specific person so maybe we actually want to go to slash profile slash then whatever the name or the username of the profile is that we want to access if i want to do that i want to have kind of like a dynamic url i can put inside of angled brackets the parameter for this url so in this case i want this to be a username so i can say profile slash username then i'm going to say define and we'll go profile the parameter is going to be username it needs to match the name that you put here and now what i can do is return render template let's just render index.html instead of username let's just say name is equal to username so now what's going to happen is we will actually just display whatever the person's username is if we go to this root otherwise we will display joe from this now let's go to index.html let me just remove age just so it says hello name now let me rerun this script and i'll explain this again in one second just want to refresh go to slash views slash profile slash tim and now notice this is going to change and show me whatever i type in here so if i change this now to be billy it shows billy so the way you access a parameter that is in the url is use the angle brackets you put it as a parameter for the function that is going to return whatever it is that you want there you go that is how you can access parameters in url now what about query parameters so let's say maybe what we wanted to do is change it so rather than profile slash billy we're going to go profile question mark and then name equals so we're going to pass a query parameter well how do we accept those the way that we accept those is we import something called request from flask and then we say that our arguments are equal to request dot args so now what we can do is use this as a dictionary to access any query parameters so let's say we want to actually get the name i will say name is equal to args.get name like that and this will give me access to the value of that query parameter if it exists so now rather than name equals username i can say name equals name let me just remove this so now it's just slash profile so i don't need to pass a name let's rerun this script and let's refresh okay so now we're going to go to profile question mark name equals tim and now notice it says hello tim again if we change this to billy then we get hello billy so that is how you access query parameters uh if you want to access multiple query parameters you just repeat this with whatever the name of those parameters are all right now i'm going to show you how you can return json from this because returning html is great but a lot of times you want to return json so i'm going to say at views dot root i'm going to say slash json i'm going to say define json i actually probably shouldn't call it that let's call it get json and now if you want to return json you can simply return a python dictionary but first you need to jsonify it so what we need to do is import jsonify like that and i'll kind of show you how this works so we're going to return jsonify and then whatever data you want to return just put inside of a python dictionary as you normally would it will convert it to json and return it so for example i go name tim uh let's go coolness 10 okay and now if i rerun this and i access the slash json endpoint we'll see that this is returned to us so let's go here let's go to views slash json and then it actually gives us this json now since we're doing it from the web uh it's going to actually show it to us as json or like show it to us on the page but if we were calling this from say javascript it would give us an actual json object that we could access all right so now we know how to get query parameters we know how to send json we know how to return html finally i will show you how we can actually get data from a request that's incoming and then i will show you how to redirect and a few other small things so let's say at views dot root let's go slash data so someone's going to send us some data in a json format to this root we're going to say define get underscore data and the way that we get this is we say that our data is equal to request dot json so now what i can actually do is just return the jsonify of the data so what's going to happen when you go to this root is whatever you send it it will just return now i'm not going to write anything that will actually send this root json but this is how you access json from a root okay so if json data is sent to a specific root this is how you can access it all right so the last thing i want to show you is how to redirect so a lot of times you want to redirect to a different page the way you can do that is the following so let's set up a new route at views.root let's just go go to home and let's go slash let's call this function define go to home okay and all we're going to do here is return we need to import two things the first thing is redirect and the next thing is url underscore four so you need to import redirect and url4 for this to work and you're going to return the redirect url for and then you're going to put the name of the route that you want to redirect to so notice i'm prefixing this with views the reason for that is the name of our uh what do you call it uh template sorry is views so i want to put views and then whatever the function name is that i want to redirect to so if i want to redirect to say home i would go views.home if i want to go to profile it would go views.profile whatever the function name is so dot get get underscore json it would bring me there so let's go to get underscore json so now when you go to this url it will actually bring you to get json now i know i said home but whatever let's just see how this works so i'm going to go here and i'm going to go slash view slash go to home and then notice it brings me to the json now if i change this to be views dot home which is what it really should be and we go to go to home if i spell that correctly it brings me to the home page so that is how you can redirect hopefully that helps all right finally last thing i will show you is how to actually add javascript to this so obviously i've just gone through very simple examples but javascript is pretty important so the way that you can add javascript is you can go into your index.html page and you can in the bottom of the body but really anywhere say script slash script like you normally would you can say your type is equal to text slash javascript and then your source is going to be equal to the following you're going to do two squigglys like this you're going to say url underscore four you're going to put static inside of a string although this needs to be a single quoted string and then you're going to say that the file name is equal to whatever the name of your javascript file is which in this case i'm going to say is index.js so hopefully you guys can read that all right this is our source and then i'm going to go in my static folder make sure it's called static create a new file call this index.js and just to prove to you that this is running i will say console.log and run so as soon as this script is loaded it should just say you know i am let's go running okay so now what i need to do if i want the javascript to be loaded is i need to refresh the page and clear the cache so the way you do this on chrome is you right click press inspect then right click on this little button here the refresh button press empty cache and hard reload then you can go look at the console so if you go here to console notice it says i am running the javascript is indeed running not going to explain any more than that you guys can mess around with the javascript as you please okay finally the last thing i'll mention is that the templating engine that is used for flask is called jenga so jinja i'll put it up on the screen so you can see what i'm talking about but it's very powerful and it allows you to do something called template inheritance so a lot of times you create an html page that kind of is the theme of your website and then you want other pages to be slightly different but to keep the same theme so what you can do is inherit all of the html from one page and override certain aspects of it let me show you what i mean so here i'm going to create what's known as a block now you can create as many blocks as you want and you can call them whatever you want but the syntax for creating them is sorry squiggly bracket percent sign and then percent sign squiggly bracket you write block and then you write what the name of the block is then you need to end the block so i'm going to go here and go end block like this so now this is my content block and this can be overridden from any template that inherits from index.html let me show you what i mean if i make a new template and i call this let's just go profile.html now if i want to use this template but override what's in the content block this is how i do it i go percent percent extends and then this is going to be the name of the template i want to extend so index dot html and then i'm going to redefine my block so i'm going to say block content and then i need to end the block oh it already did that for me okay nice and then inside of here i put whatever i want to appear where this block is so we'll override what's inside of this block so for now let's just say h1 and slash h1 and we'll say this is the profile page exclamation point okay so now if i go to views let's make a new view actually for profile let's just render the template profile.html we can remove all of these query parameters and stuff we don't need this anymore so now we're just going to render profile.html when we go to this page let's make sure this is running it is so now i'm going to go to slash views slash profile brings me to the profile page all right with that said i think i am done i am officially out of breath i went as fast as i possibly could hopefully this was somewhat helpful and gave you a very quick introduction to flask showed you how to very quickly start up a website again if you want more indepth explanations for all of these things i went too fast for you i lost you in this video i have many other much slower much more indepth tutorials on flask again you can find those from the link in the description regardless i hope you enjoyed if you did make sure to leave a like subscribe to the channel and i will see you in another one
