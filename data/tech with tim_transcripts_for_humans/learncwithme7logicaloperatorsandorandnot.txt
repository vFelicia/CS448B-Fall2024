With timestamps:

00:00 - hello everybody and welcome to another c
00:02 - plus plus tutorial for beginners
00:04 - now in this video i'm going to be
00:06 - showing you the logical operators in c
00:08 - plus those include and or and not so
00:11 - with that said
00:12 - let's dive into the video
00:16 - [Music]
00:22 - so in the previous video i showed you
00:23 - something called comparison
00:25 - operators now when we use these
00:27 - operators in an expression
00:28 - they return to us a boolean value so
00:31 - true or
00:32 - false now what i'm going to show you
00:33 - here is what's called the logical
00:35 - operators
00:35 - now the logical operators are used with
00:38 - combinations of multiple boolean values
00:41 - to determine another boolean value so
00:43 - what i mean by this
00:44 - is we are going to have a logical
00:46 - operator in between
00:47 - two operands that are both boolean
00:49 - values and then that logical operator or
00:52 - the expression that uses that operator
00:54 - will return to us another boolean value
00:56 - now this doesn't seem to make any sense
00:57 - right now because i haven't showed you
00:59 - the operators yet
01:00 - but the three logical operators that are
01:02 - in pretty much every programming
01:03 - language
01:04 - are not and which is represented by two
01:07 - ampersands in c
01:08 - plus and then we have or which is
01:10 - represented by two pipes the pipes are
01:12 - right beside i believe this is the
01:14 - backslash
01:15 - it's either the forward slash or the
01:16 - backslash sorry this is the forward
01:18 - slash here
01:18 - right above the enter key and the
01:20 - ampersands just look at my keyboard
01:22 - that is shift seven that's how you
01:24 - access these right here
01:25 - then obviously the exclamation point
01:26 - everyone knows where that is right above
01:28 - the one so these are the three logical
01:30 - operators
01:31 - now i'm just going to go through them
01:32 - one at a time they're pretty
01:34 - straightforward but what the
01:35 - not operator does is negate a boolean
01:38 - value or negate an
01:39 - expression when i say negate i just mean
01:42 - reverse it
01:42 - so let me just show you what i mean if i
01:44 - say like bool x
01:46 - equals and then i say not true what this
01:48 - is actually going to be equal to is
01:50 - false
01:50 - because the not takes whatever is on the
01:53 - right hand side of it and just
01:54 - flips it so if it's true it makes it
01:55 - false if it's
01:57 - false it makes it true that's all the
01:59 - not does now you may be asking
02:01 - why would i use a naught well the reason
02:03 - you would use a not is because a lot of
02:05 - times you have very complex
02:06 - boolean expressions with a ton of
02:08 - different conditions or a ton of
02:10 - different things that you're checking
02:11 - and it's oftentimes simpler to represent
02:13 - something using a not symbol
02:15 - or to check if something is not true
02:18 - like the entire thing is not true
02:20 - rather than rewrite the expression in
02:21 - another way that doesn't involve not
02:23 - now i'll show you an example of this
02:25 - later on but not is very useful you're
02:27 - going to see this all the time
02:28 - and just understand the exclamation
02:30 - point is not whatever is on the
02:31 - right-hand side of it it just flips it
02:33 - so if i had something like not
02:35 - 1 less than 2 well 1 less than 2 is
02:38 - going to give me a boolean value right
02:39 - it's going to give me true
02:41 - so then i have the not so that would
02:42 - make this whole thing here false
02:44 - so that is not now i'm not going to
02:46 - really compile the program when i show
02:48 - you all of these at least
02:49 - right now because it just wastes time
02:50 - and i don't really need to do that
02:52 - but now let's move over to the and so
02:54 - the and
02:55 - works in the following way you have two
02:57 - operands or you have a left operand and
02:58 - a
02:59 - right operand so i can say something
03:01 - like bool y
03:02 - is equal to and i'll say true and and
03:06 - false now what the and does is it tells
03:08 - you if both the left
03:10 - and the right hand side or the left and
03:12 - right operand
03:13 - are both equal to true so the only
03:16 - situation where and returns
03:18 - true to you is if both the left and the
03:19 - right are true in any other scenario
03:22 - you're going to get false so when you
03:23 - have true and false
03:25 - well these are both not true and so this
03:27 - entire expression here
03:29 - y is going to be equal to false now if
03:31 - you have false and false well neither of
03:33 - these are true
03:33 - both of them are not true and so it
03:35 - returns false if you have false and true
03:38 - this returns false because there's a
03:40 - false right here both of these need to
03:41 - be true to return true
03:42 - but finally when you have true and true
03:45 - this
03:46 - returns true so this is just another
03:48 - logical operator
03:50 - next we have the or so i'll say bool zed
03:53 - is equal to
03:54 - and then true or and then false now what
03:57 - the or does is it tells you if either
03:59 - the left
04:00 - or the right hand side is equal to true
04:02 - these are fairly intuitive their names
04:04 - make a lot of sense
04:05 - but if either the left operand or the
04:07 - right operand
04:08 - or both of them are equal to true then
04:11 - it returns true
04:12 - so we could say true and true that
04:14 - returns true true and false that returns
04:17 - true
04:17 - i will leave a false there and change
04:19 - this to false this is going to return
04:21 - false now because both of these are
04:22 - false but now if we have false or
04:25 - and then true that returns true so those
04:28 - are the three
04:29 - logical operators now let me show you a
04:31 - few examples
04:32 - of kind of using these with each other
04:34 - so let's try an example let me just
04:36 - actually erase all this i'll just say
04:38 - bool
04:39 - test is equal to and just this can be
04:41 - kind of a quiz for yourself you can try
04:43 - to tell me what you think it's going to
04:44 - return
04:45 - so if i have not and then false and and
04:48 - true what is this going to return or
04:51 - what is test going to be equal to
04:52 - after we evaluate this expression so
04:54 - take a second to think about
04:56 - it i'm about to tell you the answer
04:57 - right now well we can walk through this
04:59 - right so if we see
05:00 - false and true we have to figure out
05:02 - what this is going to give us now false
05:04 - and true is going to give us false
05:05 - because we don't have true on both sides
05:07 - of the end and so that returns false
05:09 - but then right here this whole thing
05:11 - becomes false
05:12 - and then we have a not so since we have
05:14 - a not and we are nodding this expression
05:16 - right here which we know to be equal to
05:18 - false
05:18 - test is going to be equal to true
05:20 - because we are kind of reversing this
05:22 - right we're negating whatever the value
05:24 - was so now let's do another example what
05:26 - if i have
05:27 - not false and not true what is this
05:30 - going to give me
05:31 - well this is pretty intuitive and
05:33 - straightforward when you have not false
05:34 - that's going to turn this to a true
05:36 - then you have not true that's going to
05:37 - turn this to a false and so you'll have
05:39 - true
05:39 - and false obviously the and here well
05:42 - they're not both true so it's going to
05:44 - give us false
05:45 - and so test is going to be equal to
05:46 - false how about when i change it to this
05:49 - though i change it to an or sign
05:50 - so not false or not true is this going
05:53 - to return true
05:54 - well it is going to be equal to true the
05:56 - reason it will be equal to true is
05:57 - because this will turn to a true
05:58 - and then we'll have true or and then
06:00 - this will turn to a false
06:02 - since we have at least one of the
06:03 - operands equal to true then this entire
06:05 - expression here
06:06 - returns true so these were kind of some
06:08 - easier examples
06:09 - but now let's combine them together so
06:11 - now let's put a not right here so we
06:13 - have not
06:14 - and then not and then not and then these
06:16 - signs here
06:17 - and then i'll even add in and and we
06:19 - will
06:20 - end a true like that so now what is this
06:23 - going to return well this requires a bit
06:25 - more work but we can go inside of here
06:26 - and see what this is going to return
06:28 - false alright not false sorry what it's
06:30 - going to return first
06:31 - we see that this expression here will be
06:33 - true then we're going to negate it to be
06:35 - equal to false and then we have
06:36 - false and true and obviously well that
06:40 - is going to be equal to false so we're
06:41 - going to get false
06:43 - so we will continue in one second but i
06:44 - need to quickly thank the sponsor of
06:46 - this video and the series which is algo
06:48 - expert algo expert is the best platform
06:50 - to use preparing for your software
06:51 - engineering coding interviews
06:53 - i work at algo expert as an algorithms
06:55 - instructor and is the platform that i
06:57 - use to get a job offer from microsoft
06:59 - and from shopify
07:00 - with that said check out algo expert
07:02 - from the link in the description and use
07:03 - the code techwithsam for a discount on
07:05 - the platform now i want to show you a
07:07 - little trick here because a lot of times
07:09 - you'll see that you're writing these
07:10 - like really complicated boolean
07:11 - expressions
07:12 - these are what they're called boolean
07:13 - expressions when you have logical
07:15 - operators separating different boolean
07:17 - values or
07:18 - conditions or whatever you want to call
07:20 - it and anyways
07:22 - there's a way that we can simplify this
07:24 - so whenever you see a not symbol here
07:26 - what you can actually do if you don't
07:28 - want to kind of do all of the evaluation
07:30 - yourself and you want to simplify the
07:31 - expression potentially depending on what
07:33 - you have
07:33 - is you can apply this knot to both of
07:36 - the operands so both the left
07:38 - and the right operand and you can flip
07:41 - the
07:41 - logical operator here from or to and and
07:44 - from and to or
07:45 - so this is a rule that you would learn
07:46 - in probably first or second year
07:48 - university in boolean algebra i believe
07:50 - that's when they teach this
07:51 - but the idea is that when you have a not
07:53 - and it's surrounding an expression so
07:55 - we're surrounding an expression that has
07:56 - a logical operator in it right
07:58 - and it's being applied to the whole
08:00 - thing what you do is you take this and
08:02 - you apply it to both the left and the
08:03 - right operand and then you
08:04 - swap this sign to the opposite one so
08:07 - what this would look like is we take
08:08 - this knot and we apply it to false
08:10 - so what that means is we're going to get
08:12 - not false then we're going to apply it
08:13 - to true as well and we're going to get
08:14 - not true
08:15 - and then we're going to switch the sign
08:16 - this sign is now going to be equal to an
08:18 - and because we need to flip it and now
08:20 - we can look at this expression right
08:22 - here
08:22 - now two knots well not not false is
08:25 - going to be equal to false right we kind
08:27 - of negate the not so whenever you have 2
08:29 - knots they really just cancel out so
08:30 - we'll cancel them out
08:31 - and then whenever we have 2 knots they
08:33 - cancel out here so this is going to
08:34 - cancel out so now we just get
08:36 - false and true we see that this is equal
08:38 - to false
08:39 - and so we get false now that is the
08:40 - exact same as
08:42 - this right if you go ahead and do this
08:44 - we're going to get true and then we're
08:45 - going to negate it and we're going to
08:46 - get false so whatever you kind of prefer
08:48 - to do
08:49 - but a lot of the times i like to take my
08:51 - knots and kind of bring them inside of
08:53 - the expression
08:54 - just because it can clean it up quite a
08:56 - bit now to show you one more example
08:58 - here
08:58 - let's try something even more
09:00 - complicated so let's say
09:02 - false or not
09:05 - true or and then we'll just have a not
09:08 - true here and then i'll say
09:11 - and true like that okay so now we're
09:13 - looking at this expression
09:14 - a little bit more complicated but i'm
09:16 - going to show you first of all how we
09:17 - can simplify this and then how we can
09:18 - evaluate
09:19 - so this applying the not to the left and
09:22 - right operand still applies even when
09:24 - you have a more complex expression
09:25 - so in this case we have our or right and
09:27 - then we have the left operand which is
09:29 - this entire thing in parenthesis
09:31 - and the right operand which is this
09:33 - right here the not true
09:34 - so we can do the same thing we can now
09:36 - bring our knot in so i'm going to apply
09:38 - the knot to now
09:39 - oops did me to do that this entire left
09:41 - operand and i'm going to apply it
09:43 - to this right operand so we'll start
09:45 - with the right operand we'll see that
09:46 - this is just going to cancel out because
09:47 - 2 knots well
09:48 - those cancel each other out and now we
09:50 - have a not in front of another
09:52 - expression
09:52 - this expression has a boolean operator
09:54 - inside of it what we need to do is bring
09:56 - the knot in also i just remember
09:57 - we need to flip this sign to be an and
09:59 - my apologies i just forgot to do that
10:01 - so now we take this knot and we're going
10:03 - to apply it in here now
10:04 - so now when we apply this knot we're
10:06 - going to get not false and then we're
10:07 - going to switch this sign to an
10:08 - and and we're going to have not not true
10:11 - so not false obviously is equal to true
10:13 - and let me just remove this knot here
10:14 - because we've already kind of brought
10:15 - that in so not false
10:17 - is equal to true not not true is equal
10:20 - to true
10:20 - and so what we get now is true and true
10:23 - so true
10:23 - and true is going to be equal to true
10:25 - and then we have true and true
10:27 - this is going to be equal to true and
10:29 - then we have true and true this is going
10:30 - to be equal to true and so we would get
10:32 - true so i would recommend you guys do a
10:34 - few of these kind of little quizzes or
10:36 - exercises for yourself
10:37 - just write out some expressions that
10:38 - have both and and
10:40 - ors in them and knots as well and see
10:42 - first of all if you can simplify them
10:43 - the way that i just showed you here with
10:44 - that little trick
10:46 - and then if you can determine what the
10:47 - value is actually going to be now i know
10:48 - this seems very theoretical
10:50 - right now but i will show you in the
10:52 - next video when we get into if else and
10:54 - else if statements why this is very
10:56 - important
10:56 - because a lot of times you want to use a
10:59 - combination of kind of conditions or
11:01 - checks to determine if you should do
11:03 - something if your program should do
11:05 - something
11:05 - and actually just to end off here what i
11:08 - want to show you is that you can have
11:10 - comparison operators and use those with
11:13 - logical operators so if i have something
11:15 - like as i showed you before let's say we
11:17 - have
11:18 - int x equals zero and then we have into
11:21 - y
11:21 - equals two well what i can do is
11:23 - something like x less than y
11:25 - or we can say y equal to x right now it
11:29 - doesn't really make sense for us to do
11:30 - something precisely like this but we can
11:32 - write expressions like this now because
11:33 - this is going to return to us true or
11:35 - false
11:35 - and because this is going to return to
11:37 - us true or false it's totally fine to
11:38 - have the or in between
11:40 - it will then look at both of the
11:41 - expressions we've written here and kind
11:43 - of do the or of them right
11:44 - so this is where it gets very
11:46 - interesting that's another reason we
11:47 - have these operators we don't usually
11:49 - use them with just
11:50 - standard true and false written there we
11:52 - usually write something like this which
11:54 - you may refer to as a condition
11:55 - sometimes
11:56 - or just some expression that uses a
11:58 - comparison operator
11:59 - so hopefully that's clear but yes please
12:01 - do mess around with this practice a
12:02 - little bit and in the next few videos
12:04 - this will be a lot more clear
12:05 - so with that said i'm going to conclude
12:07 - video seven in the c
12:08 - plus tutorial series i hope you enjoyed
12:11 - if you did make sure leave a like
12:12 - subscribe to the channel and i will see
12:14 - you in another youtube video

Cleaned transcript:

hello everybody and welcome to another c plus plus tutorial for beginners now in this video i'm going to be showing you the logical operators in c plus those include and or and not so with that said let's dive into the video so in the previous video i showed you something called comparison operators now when we use these operators in an expression they return to us a boolean value so true or false now what i'm going to show you here is what's called the logical operators now the logical operators are used with combinations of multiple boolean values to determine another boolean value so what i mean by this is we are going to have a logical operator in between two operands that are both boolean values and then that logical operator or the expression that uses that operator will return to us another boolean value now this doesn't seem to make any sense right now because i haven't showed you the operators yet but the three logical operators that are in pretty much every programming language are not and which is represented by two ampersands in c plus and then we have or which is represented by two pipes the pipes are right beside i believe this is the backslash it's either the forward slash or the backslash sorry this is the forward slash here right above the enter key and the ampersands just look at my keyboard that is shift seven that's how you access these right here then obviously the exclamation point everyone knows where that is right above the one so these are the three logical operators now i'm just going to go through them one at a time they're pretty straightforward but what the not operator does is negate a boolean value or negate an expression when i say negate i just mean reverse it so let me just show you what i mean if i say like bool x equals and then i say not true what this is actually going to be equal to is false because the not takes whatever is on the right hand side of it and just flips it so if it's true it makes it false if it's false it makes it true that's all the not does now you may be asking why would i use a naught well the reason you would use a not is because a lot of times you have very complex boolean expressions with a ton of different conditions or a ton of different things that you're checking and it's oftentimes simpler to represent something using a not symbol or to check if something is not true like the entire thing is not true rather than rewrite the expression in another way that doesn't involve not now i'll show you an example of this later on but not is very useful you're going to see this all the time and just understand the exclamation point is not whatever is on the righthand side of it it just flips it so if i had something like not 1 less than 2 well 1 less than 2 is going to give me a boolean value right it's going to give me true so then i have the not so that would make this whole thing here false so that is not now i'm not going to really compile the program when i show you all of these at least right now because it just wastes time and i don't really need to do that but now let's move over to the and so the and works in the following way you have two operands or you have a left operand and a right operand so i can say something like bool y is equal to and i'll say true and and false now what the and does is it tells you if both the left and the right hand side or the left and right operand are both equal to true so the only situation where and returns true to you is if both the left and the right are true in any other scenario you're going to get false so when you have true and false well these are both not true and so this entire expression here y is going to be equal to false now if you have false and false well neither of these are true both of them are not true and so it returns false if you have false and true this returns false because there's a false right here both of these need to be true to return true but finally when you have true and true this returns true so this is just another logical operator next we have the or so i'll say bool zed is equal to and then true or and then false now what the or does is it tells you if either the left or the right hand side is equal to true these are fairly intuitive their names make a lot of sense but if either the left operand or the right operand or both of them are equal to true then it returns true so we could say true and true that returns true true and false that returns true i will leave a false there and change this to false this is going to return false now because both of these are false but now if we have false or and then true that returns true so those are the three logical operators now let me show you a few examples of kind of using these with each other so let's try an example let me just actually erase all this i'll just say bool test is equal to and just this can be kind of a quiz for yourself you can try to tell me what you think it's going to return so if i have not and then false and and true what is this going to return or what is test going to be equal to after we evaluate this expression so take a second to think about it i'm about to tell you the answer right now well we can walk through this right so if we see false and true we have to figure out what this is going to give us now false and true is going to give us false because we don't have true on both sides of the end and so that returns false but then right here this whole thing becomes false and then we have a not so since we have a not and we are nodding this expression right here which we know to be equal to false test is going to be equal to true because we are kind of reversing this right we're negating whatever the value was so now let's do another example what if i have not false and not true what is this going to give me well this is pretty intuitive and straightforward when you have not false that's going to turn this to a true then you have not true that's going to turn this to a false and so you'll have true and false obviously the and here well they're not both true so it's going to give us false and so test is going to be equal to false how about when i change it to this though i change it to an or sign so not false or not true is this going to return true well it is going to be equal to true the reason it will be equal to true is because this will turn to a true and then we'll have true or and then this will turn to a false since we have at least one of the operands equal to true then this entire expression here returns true so these were kind of some easier examples but now let's combine them together so now let's put a not right here so we have not and then not and then not and then these signs here and then i'll even add in and and we will end a true like that so now what is this going to return well this requires a bit more work but we can go inside of here and see what this is going to return false alright not false sorry what it's going to return first we see that this expression here will be true then we're going to negate it to be equal to false and then we have false and true and obviously well that is going to be equal to false so we're going to get false so we will continue in one second but i need to quickly thank the sponsor of this video and the series which is algo expert algo expert is the best platform to use preparing for your software engineering coding interviews i work at algo expert as an algorithms instructor and is the platform that i use to get a job offer from microsoft and from shopify with that said check out algo expert from the link in the description and use the code techwithsam for a discount on the platform now i want to show you a little trick here because a lot of times you'll see that you're writing these like really complicated boolean expressions these are what they're called boolean expressions when you have logical operators separating different boolean values or conditions or whatever you want to call it and anyways there's a way that we can simplify this so whenever you see a not symbol here what you can actually do if you don't want to kind of do all of the evaluation yourself and you want to simplify the expression potentially depending on what you have is you can apply this knot to both of the operands so both the left and the right operand and you can flip the logical operator here from or to and and from and to or so this is a rule that you would learn in probably first or second year university in boolean algebra i believe that's when they teach this but the idea is that when you have a not and it's surrounding an expression so we're surrounding an expression that has a logical operator in it right and it's being applied to the whole thing what you do is you take this and you apply it to both the left and the right operand and then you swap this sign to the opposite one so what this would look like is we take this knot and we apply it to false so what that means is we're going to get not false then we're going to apply it to true as well and we're going to get not true and then we're going to switch the sign this sign is now going to be equal to an and because we need to flip it and now we can look at this expression right here now two knots well not not false is going to be equal to false right we kind of negate the not so whenever you have 2 knots they really just cancel out so we'll cancel them out and then whenever we have 2 knots they cancel out here so this is going to cancel out so now we just get false and true we see that this is equal to false and so we get false now that is the exact same as this right if you go ahead and do this we're going to get true and then we're going to negate it and we're going to get false so whatever you kind of prefer to do but a lot of the times i like to take my knots and kind of bring them inside of the expression just because it can clean it up quite a bit now to show you one more example here let's try something even more complicated so let's say false or not true or and then we'll just have a not true here and then i'll say and true like that okay so now we're looking at this expression a little bit more complicated but i'm going to show you first of all how we can simplify this and then how we can evaluate so this applying the not to the left and right operand still applies even when you have a more complex expression so in this case we have our or right and then we have the left operand which is this entire thing in parenthesis and the right operand which is this right here the not true so we can do the same thing we can now bring our knot in so i'm going to apply the knot to now oops did me to do that this entire left operand and i'm going to apply it to this right operand so we'll start with the right operand we'll see that this is just going to cancel out because 2 knots well those cancel each other out and now we have a not in front of another expression this expression has a boolean operator inside of it what we need to do is bring the knot in also i just remember we need to flip this sign to be an and my apologies i just forgot to do that so now we take this knot and we're going to apply it in here now so now when we apply this knot we're going to get not false and then we're going to switch this sign to an and and we're going to have not not true so not false obviously is equal to true and let me just remove this knot here because we've already kind of brought that in so not false is equal to true not not true is equal to true and so what we get now is true and true so true and true is going to be equal to true and then we have true and true this is going to be equal to true and then we have true and true this is going to be equal to true and so we would get true so i would recommend you guys do a few of these kind of little quizzes or exercises for yourself just write out some expressions that have both and and ors in them and knots as well and see first of all if you can simplify them the way that i just showed you here with that little trick and then if you can determine what the value is actually going to be now i know this seems very theoretical right now but i will show you in the next video when we get into if else and else if statements why this is very important because a lot of times you want to use a combination of kind of conditions or checks to determine if you should do something if your program should do something and actually just to end off here what i want to show you is that you can have comparison operators and use those with logical operators so if i have something like as i showed you before let's say we have int x equals zero and then we have into y equals two well what i can do is something like x less than y or we can say y equal to x right now it doesn't really make sense for us to do something precisely like this but we can write expressions like this now because this is going to return to us true or false and because this is going to return to us true or false it's totally fine to have the or in between it will then look at both of the expressions we've written here and kind of do the or of them right so this is where it gets very interesting that's another reason we have these operators we don't usually use them with just standard true and false written there we usually write something like this which you may refer to as a condition sometimes or just some expression that uses a comparison operator so hopefully that's clear but yes please do mess around with this practice a little bit and in the next few videos this will be a lot more clear so with that said i'm going to conclude video seven in the c plus tutorial series i hope you enjoyed if you did make sure leave a like subscribe to the channel and i will see you in another youtube video
