With timestamps:

00:00 - hey guys and welcome to the continuation
00:02 - of a series that I did a long time ago
00:04 - on my channel which essentially
00:06 - programming problems and solutions now
00:08 - some people have been recommending me to
00:10 - do these so I'm hoping to get at least
00:11 - one of these out per week so if you guys
00:13 - are not subscribed to the channel please
00:14 - make sure you do that if you want to see
00:16 - these programming problems now this
00:18 - video is gonna be pretty straightforward
00:20 - pretty basic set of problems I'm on this
00:23 - website coding bat comm and they have a
00:25 - bunch of Java and Python problems so I'm
00:27 - gonna try to work through and the entire
00:29 - warm-up section here of these problems
00:32 - you can see I've already done some of
00:32 - these other ones and once I finish that
00:35 - which hopefully I can get done either in
00:37 - this video or like in two videos then
00:39 - we'll move on to some more difficult
00:40 - problems but I want to make sure that
00:43 - people that are beginners on my channel
00:44 - or maybe even intermediate see kind of
00:47 - how you go about solving a problem like
00:48 - this and then we can work forward into
00:50 - more advanced problems again I recommend
00:52 - you guys just go on coding bat and try
00:54 - these problems for yourself as well
00:55 - I mean I'm giving you the solutions they
00:57 - have the solutions but why you would
00:59 - watch me as opposed to just hit show the
01:00 - solution is I'm actually gonna explain
01:02 - through and talk about why I'm doing
01:03 - what I'm doing and once we get into some
01:06 - more advanced problems I'm not gonna be
01:07 - using this website anymore because they
01:09 - don't really have any crazy difficult
01:11 - stuff which is what I want to get into
01:12 - later on in this channel I want to do
01:14 - some like AP computer science stuff some
01:15 - pathfinding some problems it might take
01:18 - us a while to figure out which I think
01:19 - will be fun and exciting so with that
01:21 - being said let's get right into warm-up
01:24 - I'm gonna do as many of these as I can
01:25 - and like let's say 10 15 minutes and
01:27 - yeah let's get going so this one is
01:31 - called string x and essentially given a
01:33 - string you just have to print it out
01:34 - however many times it tells you so uh I
01:37 - mean this is really straightforward
01:38 - Python as a method that just does this
01:40 - and all we're gonna do is literally just
01:41 - return STR M is multiplied by n and you
01:44 - can see that what that does is just
01:46 - multiply the strings you get hi-hi-hi
01:49 - like it just
01:50 - that's pretty trivial so next one I
01:53 - don't know if this is the pace we're
01:55 - gonna be able keep the whole time okay
01:57 - so this one's straight pretty
01:58 - straightforward as well it says given a
01:59 - string and a non-negative in 10 will say
02:01 - that the front of the string is the
02:02 - first three characters or whatever is
02:04 - there so if there's less than three
02:05 - characters that like whatever's there
02:06 - we're gonna return n copies to the front
02:09 - so this is again really straightforward
02:10 - there's a bit there's another thing we
02:11 - have to add
02:12 - here is a check first of all you just
02:14 - have to say if the land of STR is less
02:18 - than one that are less than one my
02:21 - saying one less than three and we're
02:23 - going to say copy equals mr. G blank
02:25 - like that and we'll say copy equals STR
02:29 - I guess the entire thing so we can just
02:33 - do that we are able to copy equals STR
02:35 - and we'll say else what we'll say this
02:37 - will say copy equals STR 2 3 so it's
02:41 - going to 0 1 2 not include a 3 which
02:43 - means we're gonna get the first 3
02:45 - characters of the string and then we're
02:46 - gonna do is return copy multiplied by n
02:50 - let's try that and there we go so
02:52 - essentially really quickly what I did
02:53 - here was I just create a blank string
02:55 - called copy this is the string that
02:56 - we're going to copy an amount of times
02:58 - and what I did is I said well if the
03:00 - length of this string is less than 3
03:01 - then copy is gonna be the entire string
03:03 - because it could be 1 2 3 or 0
03:04 - characters like you can see the examples
03:06 - here if it's not then what we'll do is
03:09 - we'll get the first 3 characters a copy
03:10 - just using the slice operator which
03:12 - gives us index 0 1 2 and we're just
03:14 - gonna multiply it by n using the
03:15 - built-in Python method and there we go
03:18 - so next problem and what time we got 3
03:21 - minutes
03:22 - sweet okay so given a string return a
03:23 - new string made of every other character
03:25 - starting with the first
03:26 - so hello leads yields a cello all right
03:31 - guys I didn't think these were gonna be
03:32 - that easy but essentially all we're
03:34 - gonna do here is just return STR colon
03:37 - colon 2 and this should give us every
03:39 - other character let's try that and there
03:42 - we go so what this does again slice
03:43 - operator if you don't understand the
03:44 - slice to operator let me know and I'll
03:46 - explain it in like another video but I
03:48 - do have I think some Python tutorials on
03:49 - my channel to explain what this does but
03:51 - essentially this is just gonna step over
03:53 - every other character and give us well
03:55 - all the correct answers all right next
03:57 - question
03:57 - warm-up to string explosion give it a
04:00 - non empty string like code return a
04:02 - string like C ko okay so you get first
04:06 - second third okay so we might actually
04:08 - have to use a loop for this one which
04:10 - will be new so we're gonna do the first
04:11 - character then the second character okay
04:13 - so let's say new STR this is just gonna
04:17 - hold the string that we're gonna return
04:19 - we're gonna loop through the length of I
04:22 - guess I don't need to squiggly brackets
04:24 - or
04:25 - that I've been coding a Java too much
04:27 - I'm going to say 4x in range the length
04:31 - of string what we're gonna do is we're
04:33 - gonna same new string plus plus equals
04:37 - everyone say new string equals new
04:40 - string plus STR : X plus 1 now what this
04:46 - is gonna do is it's gonna start at the
04:48 - first character and go to the X plus 1
04:49 - character so for our first loop it's
04:52 - gonna give us the first character of our
04:53 - string so let's say we're working with
04:54 - code here which is C for the second loop
04:56 - it's going to give us Co like that for
04:59 - the third loop it's gonna give us Co D
05:00 - and then the fourth one is gonna give us
05:02 - Co de which will in turn make our string
05:04 - and then we can just do return new STR
05:07 - let's try that and there we go pretty
05:10 - straightforward on that one just really
05:12 - basic for loop here there's other ways
05:13 - to do this but this is probably the
05:15 - simplest let's actually see what their
05:16 - solution is yeah exactly they did
05:18 - exactly what I did so there you go okay
05:20 - next next problem
05:22 - okay last to give it a string return the
05:25 - count to the number of times that a
05:26 - substring length to appears in that
05:29 - string and L so as the last two
05:31 - characters of the string I don't
05:34 - understand the last part let's see here
05:35 - so hi xxx high yields 1 we won't count
05:40 - the end substring ok so we're saying if
05:42 - that appears at the end in Dec or don't
05:45 - is it don't count the last one or just
05:47 - don't count okay so I just add a second
05:50 - I should read through this quickly one
05:51 - more time I think I understand it now
05:52 - but essentially what we're doing is
05:55 - we're actually just getting the last two
05:56 - characters as a string we're saying
05:57 - that's the substring we're gonna look
05:58 - for and then we see how many times it
06:00 - appears in the rest of the string so
06:02 - that's pretty straightforward to do all
06:04 - we actually have to do is just get well
06:06 - first of all the last two characters if
06:07 - they exist so the first crews gonna say
06:09 - if the length of our string is it's a
06:13 - there's gonna be at least two characters
06:14 - it does not but let's just say if the
06:17 - length of our string is greater than 2
06:19 - greater than or equal to 2 then what
06:24 - we'll do is we'll say last equals and
06:27 - then we'll say STR : and then negative 2
06:33 - to the end and that should give us the
06:35 - last two characters of the string else
06:38 - we're simply just gonna return zero
06:41 - because well they it would only appear
06:42 - zero so actually we'll return zero if
06:45 - it's two as well because that means it
06:46 - couldn't appear actually if it's if it's
06:49 - uh if it's three two will return zero
06:51 - otherwise so like if we don't return
06:54 - zero then what we're gonna do is just
06:55 - look for last
06:56 - so to find last we can literally just
06:58 - count it then subtract one so we'll just
07:01 - say count equals STR dot count last and
07:07 - then minus one and then return count now
07:11 - I don't know if this is gonna work but
07:12 - let's see okay so we run into an issue
07:14 - so maybe I just misunderstood the
07:16 - problem here so this should be two
07:18 - apparently I don't know why that should
07:20 - be two
07:23 - let's OB cuz it appears X X and then X X
07:27 - like that maybe
07:29 - and it's only counting it as like
07:31 - appearing once possibly space we just
07:35 - use a for loop to do this then instead
07:37 - of using the count method that's the
07:39 - only thing I can think is the issue here
07:40 - so let's just do for I in range the
07:45 - length of STR -2 actually because we're
07:50 - not gonna do the last two elements then
07:53 - what we'll simply do is we'll say if I
07:57 - suppose say like check STR equals
08:01 - Str I plus STR I plus 1 which will just
08:06 - give us this one and the next one so
08:08 - this should actually be minus three I
08:10 - believe then what we're gonna do is
08:12 - we're gonna say if check STR equals
08:16 - equals last count plus equals one and
08:21 - we'll put count up here and then we'll
08:24 - just return count and that should be
08:27 - correct
08:27 - let's see still what is the issue with
08:30 - this one should be two we're getting one
08:32 - oh I guess that's because so it's not
08:36 - but don't count the last two characters
08:38 - which okay so let's just do this then
08:39 - maybe that'll work yeah there we go okay
08:42 - so essentially this just needs to be
08:43 - negative two because on a string of
08:46 - length four that was gonna work okay
08:47 - so yes this is how you do it essentially
08:49 - what we're doing is we're first just
08:50 - making sure that
08:51 - Stringer's at least like three cuz if
08:53 - it's not then that means that actually
08:55 - there should be greater than or equal to
08:57 - yeah I think that's so yeah it's still
08:59 - gonna work greater than or equal to
09:01 - because if it's an no out greater than
09:03 - that well then we know that it can't
09:04 - appear more than one time and we're
09:06 - gonna get rid of the last occurrence
09:07 - anyways right that makes sense otherwise
09:09 - we're so if like this is not the case
09:12 - we're just gonna return zero and then
09:14 - what we're gonna do is we're literally
09:15 - just gonna count how many times the
09:17 - substring appears so we'll look through
09:19 - the string we'll get the first letter so
09:22 - like we'll start by looking at H and I
09:24 - so we'll go H I and then we'll look at H
09:27 - and then we'll look at X X and then
09:29 - we'll look at X H and just compare that
09:31 - to the last string which is well hi and
09:33 - see how many times that occurs and then
09:36 - since we're not even bothering to look
09:37 - at the last two characters of our string
09:39 - we don't even have to subtract from the
09:41 - count because we're not gonna end up
09:42 - counting this last substring anyways I
09:44 - hope that makes sense let's go to the
09:46 - next one and depending on how long this
09:48 - takes maybe we'll say this is the last
09:50 - one okay so given an array events
09:52 - actually incorrect that is gonna be a
09:53 - list of intz but uh let's keep going
09:55 - return the number of nines in the array
09:58 - okay I mean that's just alright let's
10:03 - let's return nums count nine and there
10:08 - we go I don't know why that's one we're
10:10 - obviously doing another one as well
10:11 - okay so array front nine given an array
10:15 - of instruments in the array is nine the
10:18 - array may be less than four elements
10:20 - okay so let's just say first of all
10:23 - let's do two cases so one case is the
10:25 - length is at least for another cases
10:27 - length is less than four so the first
10:29 - case is well if the Len of nums is
10:33 - greater than don't know how I mess that
10:37 - up greater than or equal to four then
10:38 - we'll just say check is equal to and
10:42 - then we'll say nums : for now otherwise
10:47 - we'll do is we'll say the check is equal
10:50 - to nums and then what we're gonna do is
10:53 - literally just count one more time so
10:54 - we'll say return num stop count nine and
10:58 - this will count the amount of nines in
10:59 - the first four elements of our array or
11:02 - list okay so let's try that
11:05 - what is it true numbers count 9 how Oh
11:09 - what is it oh sorry the array is if one
11:15 - of the first four elements in the array
11:16 - is not okay so that's right that's just
11:18 - my bad on reading the question
11:20 - incorrectly there I will say we'll get
11:22 - the count so I'll just say like I don't
11:24 - know how that was like count equals and
11:27 - then check dot count 9 and then return
11:32 - count greater than equal to 1 okay do
11:35 - that there you go so now we're getting
11:36 - true and false I was just returning the
11:38 - account I wasn't returning true or false
11:39 - that's what we got that wrong and we
11:41 - might be able to do one more let's keep
11:43 - going I guess array 1 2 3 so given an
11:46 - array of in certain truth the sequence
11:48 - of numbers 1 2 3 appear in the array
11:50 - somewhere ok so if we can find like 1 2
11:55 - 3
11:55 - then that's correct so 1 2 3 all right
11:58 - so to do this is a little bit more
11:59 - complicated but shouldn't be that
12:02 - difficult to do we're just gonna do one
12:04 - for loop and just look through the first
12:07 - three elements and then the next three
12:09 - elements and the next three and to see
12:10 - if they're equal to 1 2 3 so to do this
12:13 - we will say first of all we'll just do a
12:16 - quick check actually we'll see we'll say
12:19 - found equals false and at the end here
12:23 - we'll just return found and then we're
12:25 - gonna do a for loop and I say for I in
12:27 - range and then the length of our array
12:33 - which will be nums
12:34 - minus 2 and the reason we do minus 2 is
12:37 - because we want to get to essentially
12:40 - the third last element which will be
12:41 - here and then check if it's 1 2 3 now
12:44 - there's no point in checking this
12:46 - element because well we can't check like
12:48 - two three and then blank right there's
12:49 - just there's no way it could be 1 2 3
12:51 - cos only two elements left so if we
12:53 - haven't found it by then there's no
12:54 - point in checking the last two elements
12:55 - so that's what we do minus 2 so that'll
12:57 - mean rather than getting to here we'll
12:58 - get just 2 here and then we'll be able
13:00 - to check the last two so now we're gonna
13:01 - say is well I'll just do a little list
13:03 - here this might just be easier to check
13:06 - and we'll literally just say nums i nums
13:10 - I plus 1 and nums I plus 2 and we'll say
13:15 - that's equal to like sequence
13:17 - and I will say if the sequence so if
13:20 - sequence is equal to and we can just
13:22 - type it out 1 2 3 then just return I
13:26 - mean we could return true or we can say
13:29 - like found equals true and then just
13:33 - break this loop that's probably that
13:35 - works as well let's try this and see if
13:37 - that works
13:38 - running code invalid syntax line 7 what
13:42 - did I do wrong numbers items I plus 1 if
13:46 - so that needs to be two equal signs my
13:48 - bad guys let's try that and there we go
13:50 - so essentially the way this one works
13:51 - really easy use again we're just gonna
13:53 - loop through and we're gonna check like
13:54 - 1 2 3 and then we're gonna go 1 2 3 and
13:58 - I'm gonna go 1 2 3 and we do that by
14:00 - going index I index i + 1 index i + 2 +
14:04 - number it's going to compare that to the
14:06 - sequence we're looking for which is 1 2
14:07 - 3 and if that's true we'll say found
14:10 - which is up here is equal to true we'll
14:11 - break out of this loop because if we
14:12 - found it what's the point of continuing
14:13 - to loop return found and there we go so
14:17 - I think we're getting to about the
14:19 - 15-minute mark now so I'm gonna wrap the
14:21 - video up here let me know what you guys
14:22 - thought of this I know I went kind of
14:24 - fast through some of these problems and
14:25 - I weren't expecting them to be that
14:27 - simple in the next videos we will
14:29 - definitely be doing some more
14:30 - complicated problems with a bit more of
14:32 - an explanation behind them but I just
14:33 - want to reintroduce this series please
14:35 - let me know what you guys think that I
14:36 - really want to hear your feedback down
14:38 - below and if that being said I will see
14:39 - you in the next video
14:41 - [Music]

Cleaned transcript:

hey guys and welcome to the continuation of a series that I did a long time ago on my channel which essentially programming problems and solutions now some people have been recommending me to do these so I'm hoping to get at least one of these out per week so if you guys are not subscribed to the channel please make sure you do that if you want to see these programming problems now this video is gonna be pretty straightforward pretty basic set of problems I'm on this website coding bat comm and they have a bunch of Java and Python problems so I'm gonna try to work through and the entire warmup section here of these problems you can see I've already done some of these other ones and once I finish that which hopefully I can get done either in this video or like in two videos then we'll move on to some more difficult problems but I want to make sure that people that are beginners on my channel or maybe even intermediate see kind of how you go about solving a problem like this and then we can work forward into more advanced problems again I recommend you guys just go on coding bat and try these problems for yourself as well I mean I'm giving you the solutions they have the solutions but why you would watch me as opposed to just hit show the solution is I'm actually gonna explain through and talk about why I'm doing what I'm doing and once we get into some more advanced problems I'm not gonna be using this website anymore because they don't really have any crazy difficult stuff which is what I want to get into later on in this channel I want to do some like AP computer science stuff some pathfinding some problems it might take us a while to figure out which I think will be fun and exciting so with that being said let's get right into warmup I'm gonna do as many of these as I can and like let's say 10 15 minutes and yeah let's get going so this one is called string x and essentially given a string you just have to print it out however many times it tells you so uh I mean this is really straightforward Python as a method that just does this and all we're gonna do is literally just return STR M is multiplied by n and you can see that what that does is just multiply the strings you get hihihi like it just that's pretty trivial so next one I don't know if this is the pace we're gonna be able keep the whole time okay so this one's straight pretty straightforward as well it says given a string and a nonnegative in 10 will say that the front of the string is the first three characters or whatever is there so if there's less than three characters that like whatever's there we're gonna return n copies to the front so this is again really straightforward there's a bit there's another thing we have to add here is a check first of all you just have to say if the land of STR is less than one that are less than one my saying one less than three and we're going to say copy equals mr. G blank like that and we'll say copy equals STR I guess the entire thing so we can just do that we are able to copy equals STR and we'll say else what we'll say this will say copy equals STR 2 3 so it's going to 0 1 2 not include a 3 which means we're gonna get the first 3 characters of the string and then we're gonna do is return copy multiplied by n let's try that and there we go so essentially really quickly what I did here was I just create a blank string called copy this is the string that we're going to copy an amount of times and what I did is I said well if the length of this string is less than 3 then copy is gonna be the entire string because it could be 1 2 3 or 0 characters like you can see the examples here if it's not then what we'll do is we'll get the first 3 characters a copy just using the slice operator which gives us index 0 1 2 and we're just gonna multiply it by n using the builtin Python method and there we go so next problem and what time we got 3 minutes sweet okay so given a string return a new string made of every other character starting with the first so hello leads yields a cello all right guys I didn't think these were gonna be that easy but essentially all we're gonna do here is just return STR colon colon 2 and this should give us every other character let's try that and there we go so what this does again slice operator if you don't understand the slice to operator let me know and I'll explain it in like another video but I do have I think some Python tutorials on my channel to explain what this does but essentially this is just gonna step over every other character and give us well all the correct answers all right next question warmup to string explosion give it a non empty string like code return a string like C ko okay so you get first second third okay so we might actually have to use a loop for this one which will be new so we're gonna do the first character then the second character okay so let's say new STR this is just gonna hold the string that we're gonna return we're gonna loop through the length of I guess I don't need to squiggly brackets or that I've been coding a Java too much I'm going to say 4x in range the length of string what we're gonna do is we're gonna same new string plus plus equals everyone say new string equals new string plus STR X plus 1 now what this is gonna do is it's gonna start at the first character and go to the X plus 1 character so for our first loop it's gonna give us the first character of our string so let's say we're working with code here which is C for the second loop it's going to give us Co like that for the third loop it's gonna give us Co D and then the fourth one is gonna give us Co de which will in turn make our string and then we can just do return new STR let's try that and there we go pretty straightforward on that one just really basic for loop here there's other ways to do this but this is probably the simplest let's actually see what their solution is yeah exactly they did exactly what I did so there you go okay next next problem okay last to give it a string return the count to the number of times that a substring length to appears in that string and L so as the last two characters of the string I don't understand the last part let's see here so hi xxx high yields 1 we won't count the end substring ok so we're saying if that appears at the end in Dec or don't is it don't count the last one or just don't count okay so I just add a second I should read through this quickly one more time I think I understand it now but essentially what we're doing is we're actually just getting the last two characters as a string we're saying that's the substring we're gonna look for and then we see how many times it appears in the rest of the string so that's pretty straightforward to do all we actually have to do is just get well first of all the last two characters if they exist so the first crews gonna say if the length of our string is it's a there's gonna be at least two characters it does not but let's just say if the length of our string is greater than 2 greater than or equal to 2 then what we'll do is we'll say last equals and then we'll say STR and then negative 2 to the end and that should give us the last two characters of the string else we're simply just gonna return zero because well they it would only appear zero so actually we'll return zero if it's two as well because that means it couldn't appear actually if it's if it's uh if it's three two will return zero otherwise so like if we don't return zero then what we're gonna do is just look for last so to find last we can literally just count it then subtract one so we'll just say count equals STR dot count last and then minus one and then return count now I don't know if this is gonna work but let's see okay so we run into an issue so maybe I just misunderstood the problem here so this should be two apparently I don't know why that should be two let's OB cuz it appears X X and then X X like that maybe and it's only counting it as like appearing once possibly space we just use a for loop to do this then instead of using the count method that's the only thing I can think is the issue here so let's just do for I in range the length of STR 2 actually because we're not gonna do the last two elements then what we'll simply do is we'll say if I suppose say like check STR equals Str I plus STR I plus 1 which will just give us this one and the next one so this should actually be minus three I believe then what we're gonna do is we're gonna say if check STR equals equals last count plus equals one and we'll put count up here and then we'll just return count and that should be correct let's see still what is the issue with this one should be two we're getting one oh I guess that's because so it's not but don't count the last two characters which okay so let's just do this then maybe that'll work yeah there we go okay so essentially this just needs to be negative two because on a string of length four that was gonna work okay so yes this is how you do it essentially what we're doing is we're first just making sure that Stringer's at least like three cuz if it's not then that means that actually there should be greater than or equal to yeah I think that's so yeah it's still gonna work greater than or equal to because if it's an no out greater than that well then we know that it can't appear more than one time and we're gonna get rid of the last occurrence anyways right that makes sense otherwise we're so if like this is not the case we're just gonna return zero and then what we're gonna do is we're literally just gonna count how many times the substring appears so we'll look through the string we'll get the first letter so like we'll start by looking at H and I so we'll go H I and then we'll look at H and then we'll look at X X and then we'll look at X H and just compare that to the last string which is well hi and see how many times that occurs and then since we're not even bothering to look at the last two characters of our string we don't even have to subtract from the count because we're not gonna end up counting this last substring anyways I hope that makes sense let's go to the next one and depending on how long this takes maybe we'll say this is the last one okay so given an array events actually incorrect that is gonna be a list of intz but uh let's keep going return the number of nines in the array okay I mean that's just alright let's let's return nums count nine and there we go I don't know why that's one we're obviously doing another one as well okay so array front nine given an array of instruments in the array is nine the array may be less than four elements okay so let's just say first of all let's do two cases so one case is the length is at least for another cases length is less than four so the first case is well if the Len of nums is greater than don't know how I mess that up greater than or equal to four then we'll just say check is equal to and then we'll say nums for now otherwise we'll do is we'll say the check is equal to nums and then what we're gonna do is literally just count one more time so we'll say return num stop count nine and this will count the amount of nines in the first four elements of our array or list okay so let's try that what is it true numbers count 9 how Oh what is it oh sorry the array is if one of the first four elements in the array is not okay so that's right that's just my bad on reading the question incorrectly there I will say we'll get the count so I'll just say like I don't know how that was like count equals and then check dot count 9 and then return count greater than equal to 1 okay do that there you go so now we're getting true and false I was just returning the account I wasn't returning true or false that's what we got that wrong and we might be able to do one more let's keep going I guess array 1 2 3 so given an array of in certain truth the sequence of numbers 1 2 3 appear in the array somewhere ok so if we can find like 1 2 3 then that's correct so 1 2 3 all right so to do this is a little bit more complicated but shouldn't be that difficult to do we're just gonna do one for loop and just look through the first three elements and then the next three elements and the next three and to see if they're equal to 1 2 3 so to do this we will say first of all we'll just do a quick check actually we'll see we'll say found equals false and at the end here we'll just return found and then we're gonna do a for loop and I say for I in range and then the length of our array which will be nums minus 2 and the reason we do minus 2 is because we want to get to essentially the third last element which will be here and then check if it's 1 2 3 now there's no point in checking this element because well we can't check like two three and then blank right there's just there's no way it could be 1 2 3 cos only two elements left so if we haven't found it by then there's no point in checking the last two elements so that's what we do minus 2 so that'll mean rather than getting to here we'll get just 2 here and then we'll be able to check the last two so now we're gonna say is well I'll just do a little list here this might just be easier to check and we'll literally just say nums i nums I plus 1 and nums I plus 2 and we'll say that's equal to like sequence and I will say if the sequence so if sequence is equal to and we can just type it out 1 2 3 then just return I mean we could return true or we can say like found equals true and then just break this loop that's probably that works as well let's try this and see if that works running code invalid syntax line 7 what did I do wrong numbers items I plus 1 if so that needs to be two equal signs my bad guys let's try that and there we go so essentially the way this one works really easy use again we're just gonna loop through and we're gonna check like 1 2 3 and then we're gonna go 1 2 3 and I'm gonna go 1 2 3 and we do that by going index I index i + 1 index i + 2 + number it's going to compare that to the sequence we're looking for which is 1 2 3 and if that's true we'll say found which is up here is equal to true we'll break out of this loop because if we found it what's the point of continuing to loop return found and there we go so I think we're getting to about the 15minute mark now so I'm gonna wrap the video up here let me know what you guys thought of this I know I went kind of fast through some of these problems and I weren't expecting them to be that simple in the next videos we will definitely be doing some more complicated problems with a bit more of an explanation behind them but I just want to reintroduce this series please let me know what you guys think that I really want to hear your feedback down below and if that being said I will see you in the next video
