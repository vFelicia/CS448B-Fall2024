With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - video in this linux or programmers
00:12 - tutorial series
00:13 - in this video we're going to be covering
00:15 - shell scripts now shell scripts are a
00:17 - way to
00:18 - actually execute shell commands within a
00:20 - script so you can think of it just like
00:22 - any other script that you might write
00:23 - and say a programming language like
00:24 - python
00:25 - except instead of having python syntax
00:27 - you're having shell syntax
00:29 - so you can still implement things like
00:30 - loops if statements
00:32 - uh conditions you can have statements
00:34 - that execute and expressions that
00:36 - evaluated and i'm going to be showing
00:37 - you most of that in this video
00:40 - regardless shell scripts are good to
00:41 - know and as a programmer you should
00:43 - definitely have an
00:44 - idea of how they work and at minimum be
00:45 - able to read them
00:47 - so with that said let's dive in after a
00:49 - quick word from our sponsor which is
00:51 - lenote
00:51 - lenode is the best company to use to
00:53 - host your website app or service in the
00:55 - cloud
00:56 - if it runs on linux it runs on lenode
00:59 - and leno just makes it really easy for
01:01 - you to get your server up and running as
01:02 - fast as possible
01:03 - so with that said check out lenode from
01:05 - the link in the description and make
01:06 - sure to claim your 100
01:08 - in free credit when signing up with a
01:09 - new lenode account
01:11 - all right so let's dive in here the
01:13 - first thing i want to show you how to do
01:15 - is just make a
01:16 - shell script so when i say shell script
01:18 - all i'm talking about is a file
01:19 - that has shell script syntax inside of
01:22 - it
01:22 - that allows you to actually execute that
01:24 - file and then have these commands run
01:26 - so let's create a really basic one i'm
01:28 - going to use nano as my editor here but
01:30 - feel free to use vim emax whatever you
01:32 - would prefer
01:33 - you just have to make sure you type the
01:34 - same thing that i am so first of all we
01:37 - need to make a shell script file
01:38 - now all shell files are all shell
01:40 - scripts whatever you want to call them
01:42 - end in dot sh so after my nano command
01:45 - i'll just type
01:46 - test.sh and this is going to be our
01:48 - first script uh let's go ahead and press
01:50 - enter
01:50 - all right so now we're in nano and the
01:52 - first thing that we need to do in our
01:53 - shell scripts
01:54 - is we need to add what's actually called
01:56 - a shebang now i think this is a
01:57 - hilarious name
01:58 - but this is actually the name of it and
02:00 - what this is is a pound sign
02:02 - an exclamation point and then the name
02:04 - of the shell that you want to run this
02:06 - file
02:07 - in so you don't really have to
02:08 - understand this but we're just going to
02:09 - do slash bin
02:10 - slash bash and what we're saying is that
02:12 - we want to use
02:13 - bash to run this file so whenever you
02:15 - make a shell script
02:17 - you're usually supposed to at the very
02:18 - top tell the shell script by adding this
02:21 - little comment
02:22 - here what shell you want to run this in
02:24 - now there's multiple shells
02:26 - bash is just the most common one and the
02:27 - one that we've been using and well
02:29 - that's the one that we want to run
02:30 - this script in so again that's called a
02:31 - shebang you always add that at the very
02:33 - top of your file
02:34 - and 99.9 percent of time it's going to
02:36 - be exactly what i have right here
02:39 - now the next thing i'll show you just
02:40 - how you actually write a comment in this
02:42 - shell script so a comment
02:44 - is simply a pound sign like i just did
02:45 - above and then whatever you want
02:47 - anything that is after a pound sign is
02:49 - not going to be executed in your script
02:51 - so think of this like any other comment
02:53 - that you would see in any programming
02:55 - language it's just this is how you do a
02:56 - comment
02:57 - now some people may be confused that our
02:59 - shebang was actually a comment but since
03:01 - we have this exclamation point
03:02 - it kind of differentiates it so that's
03:04 - kind of the main difference
03:05 - all right so now that we have that let's
03:07 - write a really basic script
03:08 - all i want to do here is just echo some
03:10 - things out to the screen so i'm going to
03:12 - say echo
03:12 - and we're going to go with our classic
03:14 - example of hello world
03:16 - exclamation point then i'm going to type
03:18 - echo and
03:19 - just hi now anything that you can write
03:22 - in your regular command line so in the
03:24 - linux terminal in in bash
03:26 - you can write inside of here so i can
03:28 - type ls
03:29 - hyphen l right or ls hyphen a or
03:31 - whatever i can type all these commands
03:33 - here
03:33 - and they will just execute as a script
03:35 - so when i run this file all the commands
03:37 - that i type will
03:38 - execute so let's just start out really
03:39 - basic with some echoes so we're going to
03:41 - have our two echoes there
03:43 - i'm going to exit and now i will show
03:45 - you how to run the shell script so to
03:47 - run the shell script you're going to
03:48 - type
03:48 - dot slash and then the name of the
03:51 - script which in our case is going to be
03:52 - test
03:53 - dot sh now notice that when i try to do
03:55 - this we get permission
03:57 - denied why are we getting permission
03:59 - denied we're the root user we should
04:00 - have permission to do everything
04:02 - well the reason we're getting permission
04:03 - denied is because if we have a look at
04:05 - this file i believe it's ls hyphen l
04:07 - and then we say test dot sh we can see
04:10 - that we do not have execute privileges
04:12 - on this file so what we are trying to do
04:14 - is execute this file
04:15 - so what we need to do is add the
04:17 - permission to execute this file so
04:19 - what we'll do is we'll say chmod plus x
04:23 - and then we will say the file name which
04:24 - is test.sh
04:26 - so now that i do this let's have a look
04:28 - at the permissions and we can see that
04:30 - everybody can now execute this file
04:32 - if we just wanted to make it so that we
04:33 - could execute this file well we know how
04:35 - to do that i showed that in
04:36 - the chmod and permissions video but now
04:39 - notice that test.sh is showing up in
04:41 - green
04:42 - which means that we can execute it so
04:43 - now we can execute it with dot slash
04:45 - test.sh
04:46 - and when we do that notice we get two
04:48 - print lines out here we get hello world
04:50 - and hi
04:50 - which is exactly what we wrote in the
04:53 - shell script
04:54 - so that is the basics of shell scripting
04:55 - but now let's show some more things that
04:57 - we can do inside of here
04:58 - and again this is not going to be an
04:59 - exhaustive tutorial i'm just giving you
05:01 - an idea of how to run a shell script
05:03 - what a shell script is
05:04 - and basic stuff that you can do inside
05:06 - of it but you always need to make sure
05:08 - that after you write your shell script
05:10 - you give yourself permission to actually
05:11 - execute the script by adding the
05:13 - the execute permission to your user or
05:16 - to all users that have access to the
05:17 - file
05:18 - all right so we have our two echoes now
05:19 - what else should we do well let me show
05:21 - you how we actually implement a function
05:23 - inside of a
05:24 - shell script so i'm going to assume that
05:27 - you're familiar with functions
05:28 - uh if you're not they're pretty
05:30 - straightforward you'll probably
05:31 - understand how they work
05:33 - but i'm going to say actually why am i
05:35 - calling this today i don't know
05:36 - let's call this uh print okay we're
05:39 - gonna put two parentheses
05:40 - and then open some squiggly brackets and
05:42 - this is how you make a function in a
05:44 - shell
05:44 - script so you put the name of the
05:46 - function two uh parentheses or
05:48 - brackets whatever you wanna call it and
05:50 - then open up these curly braces here
05:52 - and then inside of this function usually
05:54 - you tab in or one two three
05:56 - four characters uh inwards you don't
05:58 - have to have this indented but
06:00 - usually that's convention then you can
06:01 - write whatever you want to happen inside
06:03 - of this function so i could say echo
06:05 - and then let's just say called
06:09 - function exclamation point and then what
06:11 - i could do is i could call this function
06:13 - so to call this function is how you
06:14 - would assume we just write
06:16 - the function signature like that and
06:18 - while we can use it many times
06:20 - so now we're calling this function four
06:22 - times and yeah let's just give this a
06:24 - shot so now
06:25 - let's escape and let's run this file and
06:27 - we see we get a syntax error and
06:30 - that is totally my bad i just made a
06:31 - small mistake here we actually don't
06:33 - have
06:34 - the parentheses when we call this
06:35 - function sorry this is my bad i don't
06:37 - know why i added these but
06:38 - we can remove these and if we just
06:39 - called a function like this this should
06:41 - work now
06:42 - so now let me escape let's run this and
06:45 - now we can see that we called the
06:47 - function
06:48 - so when you call the function all you
06:49 - have to do is just write the name of the
06:51 - function
06:51 - you don't have to actually put the
06:52 - parentheses afterwards now let me show
06:54 - you
06:55 - how we can pass arguments to our
06:57 - functions or how we can you know
06:58 - handle parameters and stuff so remember
07:01 - that when we were talking about
07:02 - environment variables
07:03 - the way we accessed them when we were
07:05 - say printing them out
07:07 - was we used the dollar sign now inside
07:09 - of the shell script this is the exact
07:11 - same thing
07:11 - whenever we're accessing variables even
07:13 - ones that we've defined
07:14 - inside of this script and i'll show you
07:16 - how to do that in a second we use the
07:18 - dollar sign
07:18 - to access them so let's say i wanted to
07:21 - pass something to my function here
07:23 - what i would do is i would simply write
07:25 - after the print
07:27 - function call whatever value i wanted to
07:29 - pass so i could say print
07:31 - and then tim is great like that now i
07:34 - could pass this as a string
07:35 - if i wanted to pass this as one argument
07:38 - but if i wanted to pass
07:39 - multiple arguments i want to pass tim
07:41 - then is
07:42 - then great i would do it like this so
07:44 - every time you want to pass
07:45 - multiple things you separate them by
07:47 - spaces if you just want to pass
07:48 - one thing and say it's a string for
07:50 - example then you would have to put this
07:52 - inside of quotation marks now i'm kind
07:53 - of assuming you guys have some
07:54 - understanding of programming so that's
07:56 - why i'm skipping over a lot of stuff
07:58 - here but let me show you now how we
07:59 - would actually print this out
08:01 - so we're passing some value to our
08:03 - function now how do we actually get that
08:05 - value from inside of our function now
08:07 - some of you would assume that we do
08:08 - something like this
08:09 - right that's actually not what you do if
08:11 - you want to get the value that is passed
08:13 - to a function
08:14 - you use dollar sign one dollar sign two
08:18 - and all the way up until the number of
08:20 - values that you pass to this function
08:22 - so in this case we're passing one value
08:24 - to this function so the first parameter
08:26 - is going to be identified by dollar sign
08:28 - one now if we wanted to access the
08:30 - second parameter or the second argument
08:32 - that would be dollar sign
08:33 - two right so that's kind of the idea
08:36 - here so let me just show you this
08:38 - i'm going to say echo and then called
08:40 - function and then
08:41 - inside of this string i'm going to put a
08:43 - dollar sign
08:44 - we'll go like that and then we will put
08:47 - number one
08:48 - so now what this should do is print out
08:50 - whatever we pass
08:51 - to it as argument or parameter one so
08:54 - let's run this now
08:55 - and we see that we get called function
08:57 - and then tim is great but for all of the
08:59 - other ones
08:59 - it didn't pass anything or nothing
09:01 - showed up because there was no dollar
09:03 - sign one
09:04 - so that is how we pass parameters or
09:06 - arguments or whatever you want to call
09:08 - it to the function we use dollar sign
09:10 - one and then just to show you an example
09:12 - here
09:13 - let's say we were to print one two now
09:15 - if i say dollar sign one
09:17 - and then dollar sign two i now will be
09:19 - able to access both of those values so
09:20 - let's run this and we see that we get
09:22 - called function
09:23 - 1 2 we passed both values to our
09:27 - to our function all right so let's go
09:29 - back inside of here now that's the
09:30 - basics of
09:31 - functions and how you pass values
09:33 - through now let's describe how you make
09:35 - a variable so making a variable is
09:37 - really easy all you do is you type the
09:39 - name of your variable so let's say
09:41 - x equals sign without a space and then
09:44 - what you want it to be equal to so in
09:45 - this case we can say
09:46 - you know what let's say x equals 6.
09:48 - that's all you do when you want to make
09:50 - a variable
09:50 - now typically when you're making these
09:52 - variables or sorry not typically when
09:54 - you're making these variables
09:55 - you cannot have exclamation points in
09:57 - your variable names you cannot have
09:59 - spaces in your variable names
10:00 - and you usually do not want to start
10:02 - your variable names with numbers now i'm
10:04 - actually not sure if you can or cannot
10:05 - start your variable names with numbers
10:07 - but the convention is just to use text
10:09 - you can
10:10 - end the variable name and number if you
10:12 - wanted to and if you needed to use a
10:13 - space you would use an underscore
10:14 - instead so say i wanted my variable tim
10:16 - is great then i would go tim underscore
10:19 - is
10:20 - underscore great just like you would in
10:21 - most programming languages
10:23 - so let's say x equals six and now after
10:25 - we do all our calls to the print
10:27 - function what we can do
10:28 - is we can say echo and then dollar sign
10:31 - and then
10:32 - x now this is going to access the x
10:33 - variable and print that out
10:36 - now i might have made a small mistake
10:37 - here but let's just run this and see
10:39 - because if i made a mistake well that'll
10:40 - be a good learning opportunity but let's
10:42 - get out
10:43 - let's run this and notice that now it
10:45 - does indeed print
10:46 - six now the reason i thought i made a
10:48 - mistake was because i thought you might
10:50 - have to put that dollar sign inside of a
10:51 - string
10:52 - but it turns out that you do not you can
10:54 - just access the variable directly and it
10:56 - will print it out
10:57 - so let's go back in there so now what
10:59 - i'm going to show you is how to
11:00 - implement control flow so if else
11:02 - lf all that and then i'm going to talk
11:04 - about something called exit
11:06 - i'm actually going to start with exit
11:07 - because this is pretty important
11:09 - every time you have a linux process or a
11:11 - linux script or whatever it may be
11:13 - when it finishes running it has an exit
11:16 - code
11:16 - now by default that exit code is just
11:19 - going to be 0 which means you know this
11:20 - was
11:21 - successful but it is good practice in
11:23 - your shell scripts to implement your own
11:25 - exit codes just to make sure it's very
11:27 - clear that hey
11:28 - this script finished successfully or no
11:30 - this script
11:31 - failed now there's a bunch more exit
11:33 - codes as well i'm not going to really go
11:35 - through all of them
11:36 - but all of this is to say that when you
11:38 - end your script and all was good
11:40 - you exit with the code zero now whenever
11:43 - your shell script hits this line
11:44 - hits exit zero it immediately stops the
11:47 - script
11:48 - stops processing everything and then
11:50 - returns this code to whatever called it
11:52 - now
11:52 - is it's a bit more advanced than that
11:53 - but that's kind of the basics and if you
11:55 - exit with code 0 that means that
11:57 - everything was successful
11:58 - script went well if you exit with code 1
12:01 - that meant that there's a failure in the
12:03 - script so you're telling whatever called
12:05 - this
12:05 - hey this script failed so just keep that
12:07 - in mind exit code 0 success exit code
12:10 - one failure
12:11 - so say you have some exception that gets
12:13 - raised in your program
12:14 - or you just want to all of a sudden exit
12:17 - out of the program and tell them hey you
12:18 - know this failed
12:19 - you would just write exit 0. now in fact
12:22 - i can kind of prove this to you
12:24 - even we can do exit 1 as well but inside
12:26 - of this print statement
12:27 - if i type exit and then let's just go
12:29 - with 0 which means success
12:31 - after i call this print statement the
12:32 - first time the script is going to end
12:34 - it's going to stop running so we won't
12:35 - see the output afterwards all right so
12:37 - let's run this script and notice that we
12:39 - call this function
12:40 - one time and then all of a sudden it
12:42 - exits so now let's just see what happens
12:44 - when we go with exit one instead of exit
12:46 - zero just to show you
12:48 - so we'll change the exit code and then
12:49 - rerun this and you know
12:51 - same thing happens we don't see that the
12:52 - exit code was one or
12:54 - zero but if you were running this from
12:55 - another script you would be able to
12:57 - check what that exit code is
12:59 - and there's some other more advanced
13:00 - things but anyways when you see exit or
13:02 - when you write exit it will just stop
13:04 - the script immediately
13:05 - and that's good to know so we will
13:06 - continue in one second but i need to
13:08 - quickly thank the other sponsor of this
13:10 - video which is algo expert
13:12 - algo expert is the best platform to use
13:14 - when preparing for your software
13:15 - engineering coding interviews
13:16 - and they feature a data structures crash
13:18 - course over 120
13:20 - coding interview questions mock
13:22 - interviews and behavioral interview prep
13:24 - and a ton of other
13:25 - really valuable things check out algo
13:27 - expert from the link in the description
13:29 - and use the code tech with tim for a
13:30 - discount on the platform
13:32 - alright so i'm back something went wrong
13:34 - with my screen recording software so i
13:35 - had to restart but notice that i've
13:37 - emptied my bash script
13:39 - now what i'm going to show you is if l
13:41 - if and else statements
13:42 - so these are pretty straightforward and
13:44 - i just want to make it clear that i'm
13:46 - not going into a ton of depth here i'm
13:48 - just showing you kind of some working
13:49 - knowledge this is not discussing how
13:51 - everything works on a low level again i
13:54 - i could spend a whole
13:55 - tutorial series talking about bash so
13:57 - this is just a high level overview
13:59 - anyways let's write a function here i'm
14:02 - going to show you how we can implement
14:03 - if and else statement so i'm going to
14:04 - say control
14:05 - and then i will open my parentheses and
14:08 - inside of here i'm going to write my
14:09 - first
14:10 - if statement so i'm going to say if and
14:12 - then i'm just going to first of all end
14:14 - this if statement with
14:15 - fi so whenever you write an if statement
14:18 - you need to end it with
14:19 - fi now fi will go at the very end of
14:22 - your entire conditional block or
14:24 - entire control statement block so in
14:27 - this case we just have an if statement
14:28 - but we also could implement and l if so
14:31 - let's go here we could say alif like
14:33 - that
14:34 - and then we could say else as well so
14:36 - just keep that in mind you can have if
14:37 - else and l if i will show all of them in
14:40 - one second
14:41 - but you do need to end the entire
14:43 - conditional block with f
14:44 - i alright so we have if now if we want
14:46 - to write an expression or a condition to
14:48 - be evaluated here
14:50 - what we do is we use a double set of
14:53 - square brackets like this now
14:55 - i'm not going to explain why we're using
14:56 - these square brackets
14:58 - but what this does is evaluate an
15:00 - expression now there is also another way
15:02 - where you use single brackets
15:04 - but double brackets are kind of the
15:05 - standard right now and for our purpose
15:07 - they just make more sense so you can
15:08 - look that up on your own i don't want to
15:10 - talk
15:10 - about it anymore but we'll use the
15:12 - double set of brackets now
15:14 - inside of the double set of brackets
15:15 - what we can write is an expression now
15:17 - there's a ton of different expressions
15:19 - in bash
15:19 - and you can do things like check if file
15:21 - exists you can compare strings for
15:23 - equality
15:24 - you can perform arithmetic operations
15:26 - and check if two numbers equal each
15:28 - other
15:28 - it's a lot of stuff that you can do but
15:30 - i will show you the most basic
15:31 - comparison which is just comparing two
15:33 - strings
15:34 - so what i'm going to do is say number
15:35 - one which is going to be our first
15:37 - parameter
15:38 - is equal to notice that i have a space
15:40 - here and that i have a space between my
15:42 - first bracket
15:43 - and then whatever string i want to check
15:45 - if this is equal to so in this case i'll
15:46 - say
15:46 - tim so what i'm doing is i'm checking if
15:49 - the first parameter past this function
15:51 - is equal to tim
15:52 - then the syntax here is a semicolon to
15:54 - end your condition or end your
15:56 - expression
15:57 - and then you type then and then
16:00 - underneath here
16:01 - usually indented but doesn't matter you
16:02 - type what you want to happen
16:04 - if this is the case so i'm going to say
16:06 - echo and i will just say
16:08 - tim is great exclamation point
16:12 - okay so that is our first if statement
16:14 - let's show how this works i'm going to
16:16 - call control and i'm going to pass tim
16:19 - and then i'm going to call control and
16:22 - i'm going to pass
16:23 - bill all right so i saved the file i'm
16:25 - going to exit and i'm going to
16:27 - run this and then notice we get tim is
16:29 - great but it only happened
16:30 - once because of course the second call
16:33 - to control that we did
16:35 - was false right the if statement didn't
16:36 - run okay so let's clear that let's go
16:38 - back in
16:39 - and now let me show you how we do else
16:41 - so this is pretty intuitive but to add
16:43 - an else you quite literally just type
16:45 - else
16:45 - and then underneath the else you type
16:47 - what you want to happen if the condition
16:48 - is not true so i'll say
16:50 - echo tim is not
16:53 - great exclamation point all right so
16:55 - let's run this now
16:57 - and notice that we get tim is great then
16:58 - tim is not great so the if ran
17:00 - and then the else ran okay so now let's
17:03 - do this again i will show you the
17:04 - l if again very straightforward and just
17:07 - like in other programming languages you
17:08 - can have as many lifts as you want
17:10 - so you can say elif then you write your
17:12 - condition put your semicolon and then
17:14 - put the then
17:15 - so now let's actually check a second
17:17 - parameter so let's say number two
17:19 - is equal to and let's go with joe
17:22 - and now let's call control so let's say
17:25 - control
17:26 - and we'll go with bill and then
17:29 - joe so now we should hit our l if in
17:32 - this
17:32 - last control call all right so let's
17:34 - escape and let's run this
17:36 - and oh we got an issue here syntax error
17:39 - unexpected token else let's go back in
17:42 - here
17:42 - what was incorrect ah well i forgot to
17:44 - add something
17:46 - to do in our laf so let me just add
17:48 - something the reason we were getting an
17:49 - issue is because we didn't have anything
17:51 - after the then and well we did we had
17:54 - else but that's just the incorrect
17:55 - format we need to have something to do
17:57 - in the alif case right so now what i'm
17:59 - going to do is say echo
18:01 - and then we'll just say geo all right so
18:04 - now let's run this
18:05 - and just yeah all is good we get tim is
18:07 - great tim is not great and then
18:09 - joe okay so that is if l if and else
18:12 - again you could have many more elifs as
18:14 - you want
18:14 - just make sure that you start with an if
18:17 - and that you end with
18:18 - f i okay so that was pretty much all i
18:21 - want to show you
18:21 - one last thing is how you get console
18:24 - input now this is actually pretty
18:25 - straightforward the command
18:26 - is very intuitive it's actually called
18:28 - read so what i'm going to do is show you
18:30 - how you can get
18:30 - input from the user and then how you can
18:33 - print out that input
18:34 - so let's say you want to get the user's
18:37 - name or something
18:38 - what you can do is you can type read now
18:40 - read pretty much means like let the user
18:42 - start typing and then you can do hyphen
18:45 - p
18:46 - now hyphen p stands for prompt so this
18:48 - means if you don't want to just have an
18:50 - empty line that the user starts typing
18:52 - on
18:52 - instead you want to put something on
18:54 - that line so say like name
18:55 - colon and then the user gets to start
18:56 - typing you would do hyphen p
18:59 - you would do your prompt so like name
19:00 - colon like that and then lastly you
19:02 - would put the variable name that you
19:04 - want to
19:05 - store the uh the value that's typed in
19:08 - in
19:08 - so i would say the following i would say
19:10 - read hyphen p the prompt
19:12 - and then text now what this will do is
19:15 - store whatever i type in the variable
19:17 - text
19:17 - so what i could do now is say echo and
19:19 - then dollar sign
19:21 - text and this will simply print out
19:23 - whatever the user typed in on this read
19:25 - line now i understand this is maybe
19:27 - going a bit fast but let's just run this
19:29 - and see how this works
19:31 - so when i run this notice it says name i
19:33 - can type let's type hello
19:34 - and then it prints out hello because
19:36 - well that's what we typed in
19:38 - so really straightforward you can add
19:40 - the prompt you don't have to add the
19:41 - prompt if you don't want to add the
19:42 - prompt then you just remove that hyphen
19:44 - p
19:44 - and the prompt you put the variable that
19:47 - you want to store this
19:48 - in notice that i didn't have to define
19:49 - this anywhere else i just typed the name
19:51 - of the variable
19:52 - then you can access the variable later
19:54 - on using the dollar sign
19:55 - like we've done so anyways i hope this
19:58 - was helpful if it was make sure you
19:59 - leave a like and subscribe and i will
20:01 - see you in another linux for programmers
20:03 - tutorial
20:04 - video
20:07 - [Music]

Cleaned transcript:

hello everybody and welcome to another video in this linux or programmers tutorial series in this video we're going to be covering shell scripts now shell scripts are a way to actually execute shell commands within a script so you can think of it just like any other script that you might write and say a programming language like python except instead of having python syntax you're having shell syntax so you can still implement things like loops if statements uh conditions you can have statements that execute and expressions that evaluated and i'm going to be showing you most of that in this video regardless shell scripts are good to know and as a programmer you should definitely have an idea of how they work and at minimum be able to read them so with that said let's dive in after a quick word from our sponsor which is lenote lenode is the best company to use to host your website app or service in the cloud if it runs on linux it runs on lenode and leno just makes it really easy for you to get your server up and running as fast as possible so with that said check out lenode from the link in the description and make sure to claim your 100 in free credit when signing up with a new lenode account all right so let's dive in here the first thing i want to show you how to do is just make a shell script so when i say shell script all i'm talking about is a file that has shell script syntax inside of it that allows you to actually execute that file and then have these commands run so let's create a really basic one i'm going to use nano as my editor here but feel free to use vim emax whatever you would prefer you just have to make sure you type the same thing that i am so first of all we need to make a shell script file now all shell files are all shell scripts whatever you want to call them end in dot sh so after my nano command i'll just type test.sh and this is going to be our first script uh let's go ahead and press enter all right so now we're in nano and the first thing that we need to do in our shell scripts is we need to add what's actually called a shebang now i think this is a hilarious name but this is actually the name of it and what this is is a pound sign an exclamation point and then the name of the shell that you want to run this file in so you don't really have to understand this but we're just going to do slash bin slash bash and what we're saying is that we want to use bash to run this file so whenever you make a shell script you're usually supposed to at the very top tell the shell script by adding this little comment here what shell you want to run this in now there's multiple shells bash is just the most common one and the one that we've been using and well that's the one that we want to run this script in so again that's called a shebang you always add that at the very top of your file and 99.9 percent of time it's going to be exactly what i have right here now the next thing i'll show you just how you actually write a comment in this shell script so a comment is simply a pound sign like i just did above and then whatever you want anything that is after a pound sign is not going to be executed in your script so think of this like any other comment that you would see in any programming language it's just this is how you do a comment now some people may be confused that our shebang was actually a comment but since we have this exclamation point it kind of differentiates it so that's kind of the main difference all right so now that we have that let's write a really basic script all i want to do here is just echo some things out to the screen so i'm going to say echo and we're going to go with our classic example of hello world exclamation point then i'm going to type echo and just hi now anything that you can write in your regular command line so in the linux terminal in in bash you can write inside of here so i can type ls hyphen l right or ls hyphen a or whatever i can type all these commands here and they will just execute as a script so when i run this file all the commands that i type will execute so let's just start out really basic with some echoes so we're going to have our two echoes there i'm going to exit and now i will show you how to run the shell script so to run the shell script you're going to type dot slash and then the name of the script which in our case is going to be test dot sh now notice that when i try to do this we get permission denied why are we getting permission denied we're the root user we should have permission to do everything well the reason we're getting permission denied is because if we have a look at this file i believe it's ls hyphen l and then we say test dot sh we can see that we do not have execute privileges on this file so what we are trying to do is execute this file so what we need to do is add the permission to execute this file so what we'll do is we'll say chmod plus x and then we will say the file name which is test.sh so now that i do this let's have a look at the permissions and we can see that everybody can now execute this file if we just wanted to make it so that we could execute this file well we know how to do that i showed that in the chmod and permissions video but now notice that test.sh is showing up in green which means that we can execute it so now we can execute it with dot slash test.sh and when we do that notice we get two print lines out here we get hello world and hi which is exactly what we wrote in the shell script so that is the basics of shell scripting but now let's show some more things that we can do inside of here and again this is not going to be an exhaustive tutorial i'm just giving you an idea of how to run a shell script what a shell script is and basic stuff that you can do inside of it but you always need to make sure that after you write your shell script you give yourself permission to actually execute the script by adding the the execute permission to your user or to all users that have access to the file all right so we have our two echoes now what else should we do well let me show you how we actually implement a function inside of a shell script so i'm going to assume that you're familiar with functions uh if you're not they're pretty straightforward you'll probably understand how they work but i'm going to say actually why am i calling this today i don't know let's call this uh print okay we're gonna put two parentheses and then open some squiggly brackets and this is how you make a function in a shell script so you put the name of the function two uh parentheses or brackets whatever you wanna call it and then open up these curly braces here and then inside of this function usually you tab in or one two three four characters uh inwards you don't have to have this indented but usually that's convention then you can write whatever you want to happen inside of this function so i could say echo and then let's just say called function exclamation point and then what i could do is i could call this function so to call this function is how you would assume we just write the function signature like that and while we can use it many times so now we're calling this function four times and yeah let's just give this a shot so now let's escape and let's run this file and we see we get a syntax error and that is totally my bad i just made a small mistake here we actually don't have the parentheses when we call this function sorry this is my bad i don't know why i added these but we can remove these and if we just called a function like this this should work now so now let me escape let's run this and now we can see that we called the function so when you call the function all you have to do is just write the name of the function you don't have to actually put the parentheses afterwards now let me show you how we can pass arguments to our functions or how we can you know handle parameters and stuff so remember that when we were talking about environment variables the way we accessed them when we were say printing them out was we used the dollar sign now inside of the shell script this is the exact same thing whenever we're accessing variables even ones that we've defined inside of this script and i'll show you how to do that in a second we use the dollar sign to access them so let's say i wanted to pass something to my function here what i would do is i would simply write after the print function call whatever value i wanted to pass so i could say print and then tim is great like that now i could pass this as a string if i wanted to pass this as one argument but if i wanted to pass multiple arguments i want to pass tim then is then great i would do it like this so every time you want to pass multiple things you separate them by spaces if you just want to pass one thing and say it's a string for example then you would have to put this inside of quotation marks now i'm kind of assuming you guys have some understanding of programming so that's why i'm skipping over a lot of stuff here but let me show you now how we would actually print this out so we're passing some value to our function now how do we actually get that value from inside of our function now some of you would assume that we do something like this right that's actually not what you do if you want to get the value that is passed to a function you use dollar sign one dollar sign two and all the way up until the number of values that you pass to this function so in this case we're passing one value to this function so the first parameter is going to be identified by dollar sign one now if we wanted to access the second parameter or the second argument that would be dollar sign two right so that's kind of the idea here so let me just show you this i'm going to say echo and then called function and then inside of this string i'm going to put a dollar sign we'll go like that and then we will put number one so now what this should do is print out whatever we pass to it as argument or parameter one so let's run this now and we see that we get called function and then tim is great but for all of the other ones it didn't pass anything or nothing showed up because there was no dollar sign one so that is how we pass parameters or arguments or whatever you want to call it to the function we use dollar sign one and then just to show you an example here let's say we were to print one two now if i say dollar sign one and then dollar sign two i now will be able to access both of those values so let's run this and we see that we get called function 1 2 we passed both values to our to our function all right so let's go back inside of here now that's the basics of functions and how you pass values through now let's describe how you make a variable so making a variable is really easy all you do is you type the name of your variable so let's say x equals sign without a space and then what you want it to be equal to so in this case we can say you know what let's say x equals 6. that's all you do when you want to make a variable now typically when you're making these variables or sorry not typically when you're making these variables you cannot have exclamation points in your variable names you cannot have spaces in your variable names and you usually do not want to start your variable names with numbers now i'm actually not sure if you can or cannot start your variable names with numbers but the convention is just to use text you can end the variable name and number if you wanted to and if you needed to use a space you would use an underscore instead so say i wanted my variable tim is great then i would go tim underscore is underscore great just like you would in most programming languages so let's say x equals six and now after we do all our calls to the print function what we can do is we can say echo and then dollar sign and then x now this is going to access the x variable and print that out now i might have made a small mistake here but let's just run this and see because if i made a mistake well that'll be a good learning opportunity but let's get out let's run this and notice that now it does indeed print six now the reason i thought i made a mistake was because i thought you might have to put that dollar sign inside of a string but it turns out that you do not you can just access the variable directly and it will print it out so let's go back in there so now what i'm going to show you is how to implement control flow so if else lf all that and then i'm going to talk about something called exit i'm actually going to start with exit because this is pretty important every time you have a linux process or a linux script or whatever it may be when it finishes running it has an exit code now by default that exit code is just going to be 0 which means you know this was successful but it is good practice in your shell scripts to implement your own exit codes just to make sure it's very clear that hey this script finished successfully or no this script failed now there's a bunch more exit codes as well i'm not going to really go through all of them but all of this is to say that when you end your script and all was good you exit with the code zero now whenever your shell script hits this line hits exit zero it immediately stops the script stops processing everything and then returns this code to whatever called it now is it's a bit more advanced than that but that's kind of the basics and if you exit with code 0 that means that everything was successful script went well if you exit with code 1 that meant that there's a failure in the script so you're telling whatever called this hey this script failed so just keep that in mind exit code 0 success exit code one failure so say you have some exception that gets raised in your program or you just want to all of a sudden exit out of the program and tell them hey you know this failed you would just write exit 0. now in fact i can kind of prove this to you even we can do exit 1 as well but inside of this print statement if i type exit and then let's just go with 0 which means success after i call this print statement the first time the script is going to end it's going to stop running so we won't see the output afterwards all right so let's run this script and notice that we call this function one time and then all of a sudden it exits so now let's just see what happens when we go with exit one instead of exit zero just to show you so we'll change the exit code and then rerun this and you know same thing happens we don't see that the exit code was one or zero but if you were running this from another script you would be able to check what that exit code is and there's some other more advanced things but anyways when you see exit or when you write exit it will just stop the script immediately and that's good to know so we will continue in one second but i need to quickly thank the other sponsor of this video which is algo expert algo expert is the best platform to use when preparing for your software engineering coding interviews and they feature a data structures crash course over 120 coding interview questions mock interviews and behavioral interview prep and a ton of other really valuable things check out algo expert from the link in the description and use the code tech with tim for a discount on the platform alright so i'm back something went wrong with my screen recording software so i had to restart but notice that i've emptied my bash script now what i'm going to show you is if l if and else statements so these are pretty straightforward and i just want to make it clear that i'm not going into a ton of depth here i'm just showing you kind of some working knowledge this is not discussing how everything works on a low level again i i could spend a whole tutorial series talking about bash so this is just a high level overview anyways let's write a function here i'm going to show you how we can implement if and else statement so i'm going to say control and then i will open my parentheses and inside of here i'm going to write my first if statement so i'm going to say if and then i'm just going to first of all end this if statement with fi so whenever you write an if statement you need to end it with fi now fi will go at the very end of your entire conditional block or entire control statement block so in this case we just have an if statement but we also could implement and l if so let's go here we could say alif like that and then we could say else as well so just keep that in mind you can have if else and l if i will show all of them in one second but you do need to end the entire conditional block with f i alright so we have if now if we want to write an expression or a condition to be evaluated here what we do is we use a double set of square brackets like this now i'm not going to explain why we're using these square brackets but what this does is evaluate an expression now there is also another way where you use single brackets but double brackets are kind of the standard right now and for our purpose they just make more sense so you can look that up on your own i don't want to talk about it anymore but we'll use the double set of brackets now inside of the double set of brackets what we can write is an expression now there's a ton of different expressions in bash and you can do things like check if file exists you can compare strings for equality you can perform arithmetic operations and check if two numbers equal each other it's a lot of stuff that you can do but i will show you the most basic comparison which is just comparing two strings so what i'm going to do is say number one which is going to be our first parameter is equal to notice that i have a space here and that i have a space between my first bracket and then whatever string i want to check if this is equal to so in this case i'll say tim so what i'm doing is i'm checking if the first parameter past this function is equal to tim then the syntax here is a semicolon to end your condition or end your expression and then you type then and then underneath here usually indented but doesn't matter you type what you want to happen if this is the case so i'm going to say echo and i will just say tim is great exclamation point okay so that is our first if statement let's show how this works i'm going to call control and i'm going to pass tim and then i'm going to call control and i'm going to pass bill all right so i saved the file i'm going to exit and i'm going to run this and then notice we get tim is great but it only happened once because of course the second call to control that we did was false right the if statement didn't run okay so let's clear that let's go back in and now let me show you how we do else so this is pretty intuitive but to add an else you quite literally just type else and then underneath the else you type what you want to happen if the condition is not true so i'll say echo tim is not great exclamation point all right so let's run this now and notice that we get tim is great then tim is not great so the if ran and then the else ran okay so now let's do this again i will show you the l if again very straightforward and just like in other programming languages you can have as many lifts as you want so you can say elif then you write your condition put your semicolon and then put the then so now let's actually check a second parameter so let's say number two is equal to and let's go with joe and now let's call control so let's say control and we'll go with bill and then joe so now we should hit our l if in this last control call all right so let's escape and let's run this and oh we got an issue here syntax error unexpected token else let's go back in here what was incorrect ah well i forgot to add something to do in our laf so let me just add something the reason we were getting an issue is because we didn't have anything after the then and well we did we had else but that's just the incorrect format we need to have something to do in the alif case right so now what i'm going to do is say echo and then we'll just say geo all right so now let's run this and just yeah all is good we get tim is great tim is not great and then joe okay so that is if l if and else again you could have many more elifs as you want just make sure that you start with an if and that you end with f i okay so that was pretty much all i want to show you one last thing is how you get console input now this is actually pretty straightforward the command is very intuitive it's actually called read so what i'm going to do is show you how you can get input from the user and then how you can print out that input so let's say you want to get the user's name or something what you can do is you can type read now read pretty much means like let the user start typing and then you can do hyphen p now hyphen p stands for prompt so this means if you don't want to just have an empty line that the user starts typing on instead you want to put something on that line so say like name colon and then the user gets to start typing you would do hyphen p you would do your prompt so like name colon like that and then lastly you would put the variable name that you want to store the uh the value that's typed in in so i would say the following i would say read hyphen p the prompt and then text now what this will do is store whatever i type in the variable text so what i could do now is say echo and then dollar sign text and this will simply print out whatever the user typed in on this read line now i understand this is maybe going a bit fast but let's just run this and see how this works so when i run this notice it says name i can type let's type hello and then it prints out hello because well that's what we typed in so really straightforward you can add the prompt you don't have to add the prompt if you don't want to add the prompt then you just remove that hyphen p and the prompt you put the variable that you want to store this in notice that i didn't have to define this anywhere else i just typed the name of the variable then you can access the variable later on using the dollar sign like we've done so anyways i hope this was helpful if it was make sure you leave a like and subscribe and i will see you in another linux for programmers tutorial video
