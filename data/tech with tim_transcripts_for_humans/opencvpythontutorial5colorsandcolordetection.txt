With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome to the fifth
00:10 - video
00:11 - in this opencv python tutorial series in
00:14 - this video we're going to be talking
00:15 - about colors how to convert between
00:17 - different colors
00:18 - and then also how we can extract just
00:20 - one color from our image
00:22 - so i actually have a rubik's cube here
00:24 - that has a bunch of different colors on
00:25 - it so i'm going to show you
00:26 - using this in our webcam here how we can
00:29 - only display
00:30 - say the blue face of this rubik's cube
00:32 - now of course this would work with
00:34 - orange yellow green uh red all of that
00:37 - but we're just going to do with blue for
00:38 - this so what we need to do actually let
00:40 - me change this this shouldn't say hsv
00:42 - it's a little bit of a spoiler of what
00:44 - we're going to need to do here but
00:46 - i have some code here tutorial 5. we've
00:48 - already seen what this code looks like
00:49 - and what it does
00:50 - it just displays the basic webcam image
00:52 - onto the screen
00:54 - what i want to do now though is i want
00:55 - to actually convert
00:57 - this frame into an hsv
01:00 - color scheme so we have a bunch of
01:02 - different colors so there's a bunch of
01:03 - different ways to represent colors we
01:04 - have rgb
01:05 - we have bgr and we have hsb now hsv
01:08 - stands for hue
01:10 - saturation and lightness don't ask me
01:12 - why they put a v
01:13 - there so lightness and brightness kind
01:15 - of same thing i believe that stands for
01:17 - visibility maybe but i don't know the
01:19 - acronym
01:20 - really means um what do you call it hue
01:22 - saturation and
01:23 - lightness slash brightness so we want to
01:26 - convert
01:26 - our bgr image into hsv now the reason we
01:30 - need to do that
01:31 - is because the method we're going to use
01:32 - here to extract an image
01:34 - uh or to extract a color sorry from the
01:36 - image requires an hsv image
01:39 - so that means that all of our colors
01:40 - need to be in hsv and
01:42 - we need to convert the image to hsv
01:43 - cover so to do that we're going to say
01:45 - hsv
01:45 - is equal to and then we're going to say
01:48 - cv2
01:49 - dot cvt color inside of here i'm going
01:52 - to pass the image i want to convert
01:54 - which is frame and then i'm going to say
01:55 - cv2 dot
01:57 - and then color underscore and then what
01:59 - the conversion is that i want to do
02:01 - so in this case i want to go from bgr to
02:04 - and then not gray but to hsv
02:08 - so this will now take our image it will
02:10 - take those rgb or sorry bgr pixel values
02:13 - and convert them into hue saturation and
02:15 - lightness so all of our pixels will now
02:17 - be represented like that
02:18 - so just to show you what this actually
02:20 - does let's display
02:22 - this hsv image and you're going to
02:23 - notice it looks a lot different than our
02:25 - standard bgr image
02:26 - so let's display this and i will be back
02:28 - as it shows up so you can see this looks
02:30 - a little bit different than our standard
02:32 - image
02:32 - the reason it looks like this is because
02:34 - we are trying to display
02:36 - our hsv colored image as a bgr image so
02:40 - the pixels are being read kind of in a
02:41 - weird fashion
02:42 - where it's not interpreting them as hsv
02:44 - values it's interpreting them as
02:46 - bgr values and so it's showing us all
02:48 - these weird colors
02:49 - but anyways that is what the hsv image
02:51 - looks like let's quit
02:52 - all right let me reactivate the webcam
02:54 - here
02:56 - and now what we need to do is we need to
02:57 - define the colors that we actually want
02:59 - to extract
03:00 - from this image so we now have the hsv
03:02 - image
03:03 - we now need to pick a lower bound and an
03:05 - upper bound for the color
03:07 - or the pixels that we want to extract so
03:10 - we need to define
03:11 - two hsv color values one for the lower
03:14 - one for the upper and then any pixels in
03:16 - that
03:16 - range of colors will be displayed so i'm
03:18 - going to say lower underscore blue
03:21 - is equal to and then here we're going to
03:23 - say np
03:24 - dot array we need to use a numpy array
03:27 - because
03:27 - that's just what we need to pass for
03:29 - these cv2
03:31 - functions and then inside of here we're
03:33 - going to put some values that is an hsv
03:35 - color
03:36 - now we're also going to say upper
03:37 - underscore blue
03:39 - equals np dot array and then again we're
03:42 - going to put an hsv color value
03:44 - now i understand that you probably don't
03:46 - know how to pick an hsv color value i
03:48 - don't know how off the top of my head to
03:49 - just pick the hue saturation and
03:51 - lightness to make say the color light
03:52 - blue and the color dark blue i have no
03:54 - idea how to do that
03:55 - so how do you do that well you can just
03:57 - go to the internet and search up hsv
03:59 - color picker and you can kind of mess
04:00 - with the wheel and it will just give you
04:01 - the values
04:02 - or you can use what we just used here so
04:05 - cb cb2 dot cb2 color and you can convert
04:08 - one individual pixel to an hsv color
04:12 - so let's say i want to have you know
04:14 - like a dark blue or something
04:15 - well what i can do is the font i can
04:18 - take my cv2.cv2 color function i'm just
04:20 - going to write it at the bottom of
04:22 - my code here so i'm not actually going
04:23 - to use this and what i would do is
04:25 - instead of passing a
04:26 - frame i would pass one pixel but the
04:29 - catch here is that cv2.cv2 color
04:32 - expects an image that has a specific
04:35 - shape
04:35 - it wants a shape where you have rows
04:37 - columns and channels
04:39 - so instead of passing just one color
04:41 - here instead of passing a bgr color say
04:43 - like
04:44 - 255 0 0 which would be blue because we
04:46 - have completely blue here
04:48 - we can't just pass this we actually need
04:50 - to pass a numpy array
04:52 - that looks like this so essentially an
04:54 - image that is one by one
04:56 - has one pixel inside of it and then what
04:58 - we can do is well we can just you know
05:00 - extract that one pixel
05:02 - so hopefully that makes sense but this
05:03 - does not accept just a list
05:05 - just one list it needs an image so you
05:08 - have to kind of create an image that has
05:10 - a one pixel
05:11 - you do that by just pretty much having
05:12 - three sets of
05:14 - brackets or braces whatever you want to
05:15 - call them like that so i'm gonna say
05:17 - that my color and we'll say the bgr
05:20 - underscore color is equal to and then a
05:23 - np
05:24 - dot array and inside of here we'll just
05:27 - have
05:27 - three set of brackets and whatever color
05:29 - so 255 0
05:30 - 0. so now what i can do is i can pass my
05:34 - bgr underscore color
05:35 - and then if i were to print out this
05:37 - value here
05:39 - and i won't do this but if i were to
05:40 - print this out it would then give me
05:42 - another array
05:43 - that looks something like this we would
05:45 - have three brackets then we would have
05:47 - whatever the hsv values are inside of
05:49 - these brackets
05:50 - so if you wanted to access just the one
05:52 - pixel or just the one color
05:53 - then you could do let's just call this x
05:56 - so we'll say x is equal to that you want
05:59 - to access again just that one pixel
06:01 - you would say x at 0 0 and that would
06:04 - give you the one
06:05 - pixel anyways that's all you need to
06:08 - know to convert a color
06:09 - i won't show you this because i've
06:10 - already picked the colors that we need
06:12 - but if you do want to convert your own
06:13 - colors this is kind of the way to do it
06:15 - just follow these three lines of code
06:16 - right here
06:17 - okay so now that we have that let's pick
06:19 - our lower blue and upper blue now i got
06:21 - these values actually from the tutorial
06:23 - from opencv which i will link in the
06:25 - description
06:26 - but these are like kind of a lighter
06:27 - blue and a darker blue so i'm going to
06:28 - say
06:29 - 110 then this is going to be 50
06:32 - and then 50. so that will be our lighter
06:34 - blue and then we'll have
06:35 - 130 255 255 and that will be our
06:40 - eye darker blue i believe yeah that
06:42 - should be our darker blue
06:43 - anyways again you just look at the color
06:45 - picker to see what these colors actually
06:46 - look like
06:47 - now that we have our lower blue and our
06:48 - upper blue what i'm going to do is
06:50 - create what's called a mask
06:52 - so a mask is kind of a portion of an
06:54 - image or a part of an image or a part of
06:56 - a frame so i'm going to say mask is
06:58 - equal to
06:58 - and then cv2 dot in range
07:02 - like that we're going to pass the image
07:05 - so this image
07:06 - that we want to perform this on is our
07:08 - hsv image like that
07:09 - then we're going to pass our lower blue
07:12 - and our upper blue
07:13 - now what this is going to do is return
07:15 - to us a new image or a new
07:17 - mask of an image that essentially has
07:20 - only the blue pixels existing
07:22 - so all of the pixels that are not blue
07:23 - are just going to be blacked out so
07:25 - they're going to be 0
07:25 - 0 0 but any pixels that are in this
07:28 - range of blue that we had here
07:30 - will stay as they were before so we will
07:32 - continue in one second but need to
07:33 - quickly thank the sponsor of this video
07:35 - and this series which is algo
07:36 - expert algo expert is the best platform
07:39 - to use when preparing for your software
07:40 - engineering coding interviews
07:41 - they have over 125 coding interview
07:43 - questions on the platform which are
07:45 - specifically picked to make sure that
07:47 - you are studying the best questions and
07:49 - not wasting your time
07:50 - so with that said check out algo expert
07:52 - from the link in the description
07:53 - and use the code tech with tim for a
07:55 - discount on the platform
07:57 - all right so now that we have our mask
07:58 - what we need to do is actually use this
08:00 - mask
08:01 - so i'm actually going to apply this mask
08:03 - to our original image
08:05 - so the way a mask typically works is it
08:07 - tells you
08:08 - which areas of the image you should keep
08:10 - so if you were to draw a mask over top
08:12 - like a rectangular mask you may see this
08:14 - in editing software for example
08:16 - over top of a video over top of an image
08:19 - it's only going to keep the part of that
08:21 - image that the mask
08:22 - covers so this is the exact same thing
08:24 - here this mask
08:26 - that's returned from cb2.inrange is just
08:29 - going to tell us
08:30 - which pixels we should keep and which
08:32 - ones we should it's as simple as that it
08:34 - tells us
08:35 - which pixels are in the range of this
08:36 - lower blue and upper blue
08:38 - so we're going to take this mask we're
08:40 - kind of going to imaginarily
08:42 - apply it to our image and we're going to
08:45 - only keep the pixels in our original
08:47 - image
08:47 - that match with this mask so we'll
08:50 - compare pixel by pixel
08:51 - and if the mask tells us hey this pixel
08:54 - was actually blue
08:55 - then we're going to keep it if it's not
08:57 - blue we're going to turn it to black
08:58 - so that's what this next line that i'm
09:00 - about to write is going to do we're
09:01 - going to say
09:02 - result is equal to then cb2 dot
09:05 - and then bit wise and
09:08 - we'll discuss what this means in a
09:09 - second we're going to pass our frame
09:12 - our frame and our mask equal to mask
09:16 - now the reason we have we're using
09:18 - bitwise and here there's other ways to
09:20 - do this but this
09:20 - logically makes sense is a bit wise and
09:23 - is the following if i have a one and a
09:26 - one the and returns a one
09:27 - if i have a zero and a one it returns a
09:29 - zero if i have a one and a zero it
09:31 - returns a zero
09:32 - if i have a zero and a zero it returns a
09:34 - 0. so the only
09:36 - situation where you're going to get a 1
09:38 - is if you have
09:39 - 1 and 1. now this is confusing to
09:42 - understand because we're dealing with
09:43 - bits and we're dealing with pixels and
09:44 - all this stuff
09:45 - but essentially this bit wise and
09:47 - typically will take two images it will
09:49 - take a source image and a
09:51 - second source image and it will blend
09:53 - them together
09:54 - using this mask so it will bit-wise and
09:57 - these two images together and then it
09:59 - will use this mask as kind of
10:01 - a function to determine whether or not
10:03 - it should keep this pixel
10:04 - now in our case we only have one image
10:06 - we don't want to blend two images
10:08 - together we just want one image where
10:09 - we're just going to remove all of the
10:11 - pixels that are not blue
10:13 - so we're going to pass the same image
10:15 - twice
10:16 - i know it's confusing you just pass the
10:17 - same image twice because you need source
10:19 - one and source two
10:20 - and well they're equal to the same thing
10:22 - and then we pass our mask which is gonna
10:23 - do what i discussed
10:25 - now i would recommend you look this up
10:26 - if you wanna learn about this more in
10:27 - depth
10:28 - but you can imagine that all we're doing
10:30 - is we're comparing the bits from our
10:31 - mask
10:32 - to the bits in our image and if this
10:34 - returns a one so if the mask told us hey
10:36 - there is a blue pixel here then we keep
10:38 - that pixel if it doesn't then we don't
10:40 - keep it
10:41 - so now all we have to do that we have
10:42 - that bitwise and is we just need to show
10:45 - our result all right so you can see it's
10:47 - kind of this granular weird
10:49 - whatever image we don't really see
10:50 - anything and now as soon as i pop this
10:52 - up uh it's kind of showing it you can
10:54 - kind of see the blue popping up even on
10:56 - my shirt
10:57 - but not quite so let me change the uh
10:59 - the filter here for this blue
11:01 - and let me see if i can actually get
11:02 - this to appear okay so i just messed
11:04 - with the uh the values here for the
11:06 - upper and lower bound i look hilarious
11:08 - in this you can see this
11:09 - uh we have 90 50 50 130 255 255. now
11:13 - clearly this isn't just showing blue but
11:14 - i just want to show you that
11:15 - is you know it's picking up this blue if
11:17 - i change this to the other side this
11:19 - side is actually yellow it's not showing
11:20 - it
11:21 - if i change this to the turquoise side
11:23 - we're getting that because that's in the
11:24 - color range
11:25 - and turquoise sorry this is green i
11:26 - don't know why this is showing up kind
11:28 - of turquoisey
11:29 - anyways you get the idea and then this
11:31 - is the black side of the rubik's cube
11:33 - this is the red side of the rubik's cube
11:35 - which you obviously can't see
11:37 - and then we'll go back to blue here and
11:38 - you can see that this is the blue
11:40 - so this isn't working precisely in fact
11:43 - it's showing us the white and it's
11:44 - showing us the black you can see like
11:45 - the whites of my eyes which
11:47 - again looks hilarious but you just have
11:49 - to mess with these color values and
11:50 - whatever pixels are in this range again
11:52 - it's going to show you those
11:53 - so again i don't really know why it's
11:55 - showing the gray and the black i think
11:56 - i just have this range wrong we just
11:58 - have to mess with it but that is how you
12:00 - extract a color
12:01 - from an image i thought this was cool
12:04 - maybe that you guys don't find this that
12:05 - interesting
12:06 - uh but if you do this correctly then you
12:08 - actually can extract the right color
12:10 - from an image so let me reactivate this
12:12 - here i don't have enough time to go
12:14 - through and you know fine tune all of
12:15 - these values but you just have to go to
12:17 - an hsv color picker and pick kind of a
12:19 - light blue and then a darker blue
12:21 - create this proper range and then it
12:22 - should hopefully show you that
12:24 - so anyways that's actually all i wanted
12:26 - to show you i know this wasn't a ton
12:27 - but this kind of went over what a mask
12:29 - is right it showed us
12:31 - how we can actually do a bit wise and
12:33 - and extract
12:34 - parts of the image and now let me just
12:36 - show you actually what the mask looks
12:38 - like itself
12:39 - and what our hsv image looks like well
12:41 - we actually already looked at the hsv
12:43 - image but let's look at just the mask
12:45 - so i'm going to pop up uh oh let's go
12:47 - call this mask here
12:49 - and we'll pop up the result as well as
12:52 - the mask okay so let me deactivate this
12:55 - let's rerun this and let's see what we
12:57 - get so you can see
12:59 - we have our mask this is on the left
13:01 - hand side of the screen
13:02 - we have our frame or we have our actual
13:05 - uh
13:05 - resulting image on the right hand side
13:06 - of the screen and notice our mask is
13:09 - all zeros and ones right so all of the
13:11 - white in our mask is what's showing up
13:14 - on our resulting image on the right hand
13:16 - side here
13:17 - so that's kind of the way this mask
13:18 - works it's either zero or one
13:20 - any of the pixels that are in the range
13:22 - get a one any of the pixels that are not
13:24 - in the range get a zero
13:25 - so that is why here like you can see the
13:27 - black like my hand for example
13:29 - is not showing up because obviously my
13:31 - hand is white and then all of the blue
13:33 - including all these other colors and you
13:35 - know the rubik's cube here now
13:37 - shows up as white on the mask and then
13:39 - in the actual frame it shows us the real
13:41 - color
13:41 - so that's how the bit wise and worked
13:43 - and that's what i was trying to explain
13:46 - so anyways let's close these by hitting
13:48 - q let me reactivate this webcam
13:50 - just to say that if you enjoyed this
13:52 - video make sure to leave a like
13:53 - subscribe to the channel and i will see
13:55 - you in another opencv
13:58 - [Music]
14:00 - tutorial
14:05 - you

Cleaned transcript:

hello everybody and welcome to the fifth video in this opencv python tutorial series in this video we're going to be talking about colors how to convert between different colors and then also how we can extract just one color from our image so i actually have a rubik's cube here that has a bunch of different colors on it so i'm going to show you using this in our webcam here how we can only display say the blue face of this rubik's cube now of course this would work with orange yellow green uh red all of that but we're just going to do with blue for this so what we need to do actually let me change this this shouldn't say hsv it's a little bit of a spoiler of what we're going to need to do here but i have some code here tutorial 5. we've already seen what this code looks like and what it does it just displays the basic webcam image onto the screen what i want to do now though is i want to actually convert this frame into an hsv color scheme so we have a bunch of different colors so there's a bunch of different ways to represent colors we have rgb we have bgr and we have hsb now hsv stands for hue saturation and lightness don't ask me why they put a v there so lightness and brightness kind of same thing i believe that stands for visibility maybe but i don't know the acronym really means um what do you call it hue saturation and lightness slash brightness so we want to convert our bgr image into hsv now the reason we need to do that is because the method we're going to use here to extract an image uh or to extract a color sorry from the image requires an hsv image so that means that all of our colors need to be in hsv and we need to convert the image to hsv cover so to do that we're going to say hsv is equal to and then we're going to say cv2 dot cvt color inside of here i'm going to pass the image i want to convert which is frame and then i'm going to say cv2 dot and then color underscore and then what the conversion is that i want to do so in this case i want to go from bgr to and then not gray but to hsv so this will now take our image it will take those rgb or sorry bgr pixel values and convert them into hue saturation and lightness so all of our pixels will now be represented like that so just to show you what this actually does let's display this hsv image and you're going to notice it looks a lot different than our standard bgr image so let's display this and i will be back as it shows up so you can see this looks a little bit different than our standard image the reason it looks like this is because we are trying to display our hsv colored image as a bgr image so the pixels are being read kind of in a weird fashion where it's not interpreting them as hsv values it's interpreting them as bgr values and so it's showing us all these weird colors but anyways that is what the hsv image looks like let's quit all right let me reactivate the webcam here and now what we need to do is we need to define the colors that we actually want to extract from this image so we now have the hsv image we now need to pick a lower bound and an upper bound for the color or the pixels that we want to extract so we need to define two hsv color values one for the lower one for the upper and then any pixels in that range of colors will be displayed so i'm going to say lower underscore blue is equal to and then here we're going to say np dot array we need to use a numpy array because that's just what we need to pass for these cv2 functions and then inside of here we're going to put some values that is an hsv color now we're also going to say upper underscore blue equals np dot array and then again we're going to put an hsv color value now i understand that you probably don't know how to pick an hsv color value i don't know how off the top of my head to just pick the hue saturation and lightness to make say the color light blue and the color dark blue i have no idea how to do that so how do you do that well you can just go to the internet and search up hsv color picker and you can kind of mess with the wheel and it will just give you the values or you can use what we just used here so cb cb2 dot cb2 color and you can convert one individual pixel to an hsv color so let's say i want to have you know like a dark blue or something well what i can do is the font i can take my cv2.cv2 color function i'm just going to write it at the bottom of my code here so i'm not actually going to use this and what i would do is instead of passing a frame i would pass one pixel but the catch here is that cv2.cv2 color expects an image that has a specific shape it wants a shape where you have rows columns and channels so instead of passing just one color here instead of passing a bgr color say like 255 0 0 which would be blue because we have completely blue here we can't just pass this we actually need to pass a numpy array that looks like this so essentially an image that is one by one has one pixel inside of it and then what we can do is well we can just you know extract that one pixel so hopefully that makes sense but this does not accept just a list just one list it needs an image so you have to kind of create an image that has a one pixel you do that by just pretty much having three sets of brackets or braces whatever you want to call them like that so i'm gonna say that my color and we'll say the bgr underscore color is equal to and then a np dot array and inside of here we'll just have three set of brackets and whatever color so 255 0 0. so now what i can do is i can pass my bgr underscore color and then if i were to print out this value here and i won't do this but if i were to print this out it would then give me another array that looks something like this we would have three brackets then we would have whatever the hsv values are inside of these brackets so if you wanted to access just the one pixel or just the one color then you could do let's just call this x so we'll say x is equal to that you want to access again just that one pixel you would say x at 0 0 and that would give you the one pixel anyways that's all you need to know to convert a color i won't show you this because i've already picked the colors that we need but if you do want to convert your own colors this is kind of the way to do it just follow these three lines of code right here okay so now that we have that let's pick our lower blue and upper blue now i got these values actually from the tutorial from opencv which i will link in the description but these are like kind of a lighter blue and a darker blue so i'm going to say 110 then this is going to be 50 and then 50. so that will be our lighter blue and then we'll have 130 255 255 and that will be our eye darker blue i believe yeah that should be our darker blue anyways again you just look at the color picker to see what these colors actually look like now that we have our lower blue and our upper blue what i'm going to do is create what's called a mask so a mask is kind of a portion of an image or a part of an image or a part of a frame so i'm going to say mask is equal to and then cv2 dot in range like that we're going to pass the image so this image that we want to perform this on is our hsv image like that then we're going to pass our lower blue and our upper blue now what this is going to do is return to us a new image or a new mask of an image that essentially has only the blue pixels existing so all of the pixels that are not blue are just going to be blacked out so they're going to be 0 0 0 but any pixels that are in this range of blue that we had here will stay as they were before so we will continue in one second but need to quickly thank the sponsor of this video and this series which is algo expert algo expert is the best platform to use when preparing for your software engineering coding interviews they have over 125 coding interview questions on the platform which are specifically picked to make sure that you are studying the best questions and not wasting your time so with that said check out algo expert from the link in the description and use the code tech with tim for a discount on the platform all right so now that we have our mask what we need to do is actually use this mask so i'm actually going to apply this mask to our original image so the way a mask typically works is it tells you which areas of the image you should keep so if you were to draw a mask over top like a rectangular mask you may see this in editing software for example over top of a video over top of an image it's only going to keep the part of that image that the mask covers so this is the exact same thing here this mask that's returned from cb2.inrange is just going to tell us which pixels we should keep and which ones we should it's as simple as that it tells us which pixels are in the range of this lower blue and upper blue so we're going to take this mask we're kind of going to imaginarily apply it to our image and we're going to only keep the pixels in our original image that match with this mask so we'll compare pixel by pixel and if the mask tells us hey this pixel was actually blue then we're going to keep it if it's not blue we're going to turn it to black so that's what this next line that i'm about to write is going to do we're going to say result is equal to then cb2 dot and then bit wise and we'll discuss what this means in a second we're going to pass our frame our frame and our mask equal to mask now the reason we have we're using bitwise and here there's other ways to do this but this logically makes sense is a bit wise and is the following if i have a one and a one the and returns a one if i have a zero and a one it returns a zero if i have a one and a zero it returns a zero if i have a zero and a zero it returns a 0. so the only situation where you're going to get a 1 is if you have 1 and 1. now this is confusing to understand because we're dealing with bits and we're dealing with pixels and all this stuff but essentially this bit wise and typically will take two images it will take a source image and a second source image and it will blend them together using this mask so it will bitwise and these two images together and then it will use this mask as kind of a function to determine whether or not it should keep this pixel now in our case we only have one image we don't want to blend two images together we just want one image where we're just going to remove all of the pixels that are not blue so we're going to pass the same image twice i know it's confusing you just pass the same image twice because you need source one and source two and well they're equal to the same thing and then we pass our mask which is gonna do what i discussed now i would recommend you look this up if you wanna learn about this more in depth but you can imagine that all we're doing is we're comparing the bits from our mask to the bits in our image and if this returns a one so if the mask told us hey there is a blue pixel here then we keep that pixel if it doesn't then we don't keep it so now all we have to do that we have that bitwise and is we just need to show our result all right so you can see it's kind of this granular weird whatever image we don't really see anything and now as soon as i pop this up uh it's kind of showing it you can kind of see the blue popping up even on my shirt but not quite so let me change the uh the filter here for this blue and let me see if i can actually get this to appear okay so i just messed with the uh the values here for the upper and lower bound i look hilarious in this you can see this uh we have 90 50 50 130 255 255. now clearly this isn't just showing blue but i just want to show you that is you know it's picking up this blue if i change this to the other side this side is actually yellow it's not showing it if i change this to the turquoise side we're getting that because that's in the color range and turquoise sorry this is green i don't know why this is showing up kind of turquoisey anyways you get the idea and then this is the black side of the rubik's cube this is the red side of the rubik's cube which you obviously can't see and then we'll go back to blue here and you can see that this is the blue so this isn't working precisely in fact it's showing us the white and it's showing us the black you can see like the whites of my eyes which again looks hilarious but you just have to mess with these color values and whatever pixels are in this range again it's going to show you those so again i don't really know why it's showing the gray and the black i think i just have this range wrong we just have to mess with it but that is how you extract a color from an image i thought this was cool maybe that you guys don't find this that interesting uh but if you do this correctly then you actually can extract the right color from an image so let me reactivate this here i don't have enough time to go through and you know fine tune all of these values but you just have to go to an hsv color picker and pick kind of a light blue and then a darker blue create this proper range and then it should hopefully show you that so anyways that's actually all i wanted to show you i know this wasn't a ton but this kind of went over what a mask is right it showed us how we can actually do a bit wise and and extract parts of the image and now let me just show you actually what the mask looks like itself and what our hsv image looks like well we actually already looked at the hsv image but let's look at just the mask so i'm going to pop up uh oh let's go call this mask here and we'll pop up the result as well as the mask okay so let me deactivate this let's rerun this and let's see what we get so you can see we have our mask this is on the left hand side of the screen we have our frame or we have our actual uh resulting image on the right hand side of the screen and notice our mask is all zeros and ones right so all of the white in our mask is what's showing up on our resulting image on the right hand side here so that's kind of the way this mask works it's either zero or one any of the pixels that are in the range get a one any of the pixels that are not in the range get a zero so that is why here like you can see the black like my hand for example is not showing up because obviously my hand is white and then all of the blue including all these other colors and you know the rubik's cube here now shows up as white on the mask and then in the actual frame it shows us the real color so that's how the bit wise and worked and that's what i was trying to explain so anyways let's close these by hitting q let me reactivate this webcam just to say that if you enjoyed this video make sure to leave a like subscribe to the channel and i will see you in another opencv tutorial you
