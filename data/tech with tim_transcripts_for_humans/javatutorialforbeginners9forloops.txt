With timestamps:

00:00 - hello and welcome back so in this video
00:02 - I'm going to be talking about for loops
00:04 - now for loops our fundamental aspect of
00:07 - every programming language and they're
00:09 - very important to understand I can
00:10 - almost guarantee you that any program
00:12 - you write will use multiple for loops so
00:15 - pretty much where for loop is it allows
00:17 - us to kind of automate a task do
00:18 - something a set amount of times and
00:21 - typically when you use a for loop you're
00:23 - using that because you know how many
00:25 - times you want to do something or like a
00:27 - condition is gonna tell you how many
00:28 - times to do something as opposed to what
00:30 - we're gonna talk about in future videos
00:31 - which is a while loop well you're not
00:33 - really sure how long it's gonna go for
00:35 - so you do something based on a condition
00:36 - but we'll talk about that when we get to
00:38 - it so let's start and just do it an
00:41 - example of what if we're loop can really
00:43 - like solve for us for example okay so
00:45 - say this is a pretty simple example and
00:48 - you guys will see in a second I create
00:50 - an integer C into x equals zero and say
00:53 - that I want to add 1 and then I want to
00:56 - add 2 to it and then I want to add 3 to
00:57 - it and four and five and six and like an
00:59 - infinite amount of times I want to add
01:01 - to that variable well we could do like X
01:03 - plus equals one we could do X plus
01:06 - equals two like and keep going and
01:08 - adding things to X and we could just
01:10 - keep copying and pasting this down our
01:12 - program but obviously that's terribly
01:14 - inefficient in terms of a typing
01:16 - standpoint and what if we wanted to
01:18 - change this what if every time we were
01:20 - on the program we want to ask the user
01:21 - how many times they want to add like a
01:23 - pattern like this to X well then we
01:25 - would have to constantly keep changing
01:27 - the numbers here right so this is where
01:30 - for loop can kind of come in handy so
01:32 - the syntax for for I'm just gonna type
01:34 - it out and then we will talk about
01:36 - exactly what it does so it has these
01:38 - brackets here and in here we're gonna
01:39 - put three things typically okay so what
01:43 - you're gonna do is you're gonna first
01:44 - start off by declaring a variable so in
01:47 - this case I'm gonna say int X is equal
01:49 - to zero okay now this can be called
01:51 - whatever you want typically people call
01:53 - it I I like to use X but you know what
01:55 - let's just use I and then what you're
01:57 - gonna do for this next so you're gonna
02:00 - put a semicolon and then the next thing
02:02 - you're gonna do is you're gonna set a
02:03 - condition so I'm just gonna do this and
02:05 - then talk about it cuz it's hard to kind
02:07 - of do them step-by-step because they all
02:08 - work together less than equal to 10 and
02:11 - I
02:13 - plus plus okay so what I've just done
02:16 - here actually is I first started by
02:19 - declaring a variable I it's equal to
02:20 - zero and then I've said we're gonna do
02:23 - this while I is less than or equal to
02:24 - ten and we're gonna add one to I so
02:27 - pretty much the way this works is every
02:29 - time we execute what's in these little
02:31 - square brackets here I is gonna have one
02:34 - added to it so this is what's known as
02:36 - the increment and this comes at the end
02:38 - of your for loop so this is what you're
02:40 - adding to the variable I which you're
02:42 - declaring here every time you run the
02:44 - loop now this here is your condition and
02:47 - this is going to state how many times
02:50 - the loop is going to run so in our case
02:51 - we're gonna run the loop and while I is
02:54 - less than or equal to the value 10
02:56 - meaning we're gonna start at the value 0
02:59 - because I equals 0 we're gonna run this
03:01 - loop then we're gonna come back up here
03:03 - we're gonna say okay what are we doing
03:05 - we're adding 1 to I then we're gonna
03:06 - check this condition so I is not equal
03:08 - to 1 we're gonna say well as 1 less than
03:09 - or equal to 10 no it's not and then
03:11 - we're gonna loop through and we're gonna
03:12 - continue looping through until
03:14 - eventually we get to the point where we
03:15 - add 2 I it's equal to 11 11 well that's
03:19 - greater than 10 so we break out of this
03:21 - loop and you guys will see when I start
03:24 - printing stuff to the screen exactly how
03:26 - this works but I hope that was a decent
03:28 - explanation of the way to do this so
03:31 - what I'm gonna do is I'm just gonna
03:32 - print I here and I'm gonna tell you
03:33 - right now what's gonna happen right so
03:34 - we're starting I at 0 so the first loop
03:37 - here we're gonna come through I is equal
03:39 - to 0 we're gonna print 0 next loop we
03:41 - come up we add 1 2 I check the condition
03:43 - we're okay we can keep going we're at 1
03:45 - and we're gonna print from 0 to 10 so
03:48 - watch when I run here we get 0 all the
03:51 - way up to 10 okay
03:53 - that's how the for loop works so we
03:55 - execute whatever is in between these
03:57 - little curly braces 10 times or 11 times
04:00 - in this case because a 0 to 10 is 11
04:02 - alright now we can change this increment
04:05 - we can change this condition there's a
04:06 - lot of things that we can do in this for
04:08 - loop so here we say for int I equals 0 I
04:12 - could do for int I equals 5 and I can
04:14 - start at the value 5 and now we're gonna
04:16 - start we're gonna go from 5 to 10
04:18 - looping 1 2 3 4 5 6 times right we're
04:21 - printing 6 different values ok so that's
04:24 - if you can do that if I try to do
04:26 - something like
04:27 - I equals 11 well watch what happens
04:29 - nothing prints to the screen and that's
04:31 - because 11 well that's greater than or
04:33 - equal to 10 so the loop doesn't even run
04:35 - one time right so let's go back and I'll
04:38 - start at zero and now let's show what we
04:40 - can do in terms of incrementing so to
04:43 - increment here we can do I plus equals
04:46 - and then any value you want so in this
04:48 - case if I do five we're going to start
04:50 - at zero we're gonna add five we're gonna
04:51 - add five again so we get zero five and
04:53 - ten and you can change this to whatever
04:55 - value that you want okay same thing here
04:58 - with the condition these cals will be
05:00 - variables I feel like I don't need to
05:01 - tell you that but if I do something like
05:03 - int x equals 5 then i can do i plus
05:06 - equals x right and we can add that
05:08 - integer to it we can add X as the bound
05:11 - here so less than or equal to this could
05:13 - be greater than this could be greater
05:14 - than or equal to so I'm just gonna
05:16 - quickly go over one thing that a lot of
05:18 - people get confused with for with for
05:21 - loops and it's when we're gonna stop and
05:23 - when we're gonna start so when we say
05:24 - less than or equal to 10 this means
05:27 - we're gonna start at this value and now
05:28 - assuming we're adding 1 okay we are
05:31 - going to stop but include 10 meaning
05:33 - that I will hit the value 10 we will
05:37 - print 10 to the screen now if I remove
05:39 - this equal sign this is only gonna
05:41 - happen while I is less than 10 which
05:43 - means that if I is 10 well 10 is not
05:46 - less than 10 so we are not going to
05:47 - print 10 so if I run this you can see we
05:50 - only get up to the value 9 now the
05:52 - reason I'm talking about this is because
05:54 - what we typically want to do with loops
05:55 - is we want to loop through something or
05:57 - look at some data and typically that
06:00 - data is in the form of an array so now
06:02 - and this is why I talked about arrays
06:03 - before I'm gonna create an array so an
06:04 - integer array let's call it a RR is
06:06 - equal to and let's just give it some
06:10 - values here so like 1 5 7 3 4 5 okay
06:13 - this is gonna be our integer array now
06:16 - what do I want to do if or how am I
06:18 - going to do this if I want to look
06:19 - through my array and look at look at
06:22 - these values and maybe checking the
06:24 - value is equal to 7 or value is equal to
06:25 - 5 or something like that well the way
06:27 - that I can do this and this is like a
06:30 - dynamic way to do it is I could count
06:33 - the length of the array I'd say 1 2 3 4
06:36 - 5 6 okay 6 elements so I would put I is
06:39 - less than 6 years
06:41 - but a more useful way to do this is to
06:43 - just get the length of the array and the
06:45 - way that I can do that is just to do a
06:47 - RR dot length or I actually don't need
06:50 - this bracket sorry so we'll just do this
06:53 - in this way say the user had typed in a
06:55 - bunch of elements we had put them in an
06:57 - array we don't know how many elements
06:59 - they type in per se so we're gonna use
07:00 - this length so that we can change this
07:03 - loop and this loop will never crash it
07:05 - will always work because we're just
07:07 - simply getting the length of the array
07:09 - now if I were to do equal here I hope
07:11 - you guys realize this would cause us an
07:13 - issue and that's because we have six
07:15 - elements in the array right but it's
07:17 - gonna allow us to get I to the value six
07:20 - cuz that's the length of the array now
07:22 - what happens if I try to do this
07:24 - arr six well we should know from the
07:28 - last video that that will actually crash
07:29 - our program and that's because when we
07:31 - start and we start at zero and our last
07:33 - element in the array is actually going
07:35 - to be index five right because we go
07:36 - zero all the way to the length minus one
07:40 - which is five so race six does not
07:42 - actually exist so what I'm gonna do now
07:44 - is I'm just gonna write a little program
07:47 - inside this for loop and I'm just gonna
07:48 - say if the value is equal to five we're
07:50 - gonna print it out so how do I do this
07:53 - I'm gonna say if ARR at index I is equal
07:57 - to the value five then we're simply
08:00 - gonna do system dot out dot print Ln I
08:05 - just realizes comma there all right
08:07 - semicolon and we're simply going to
08:09 - print the value so in this case we could
08:11 - print a RI which we know is gonna be
08:13 - five or we could just type five because
08:14 - we know that is there so in this case
08:16 - let's just do found a five exclamation
08:20 - point okay that's what we'll print to
08:21 - the screen so again the reason this is
08:24 - going to work is because we're looping
08:25 - through starting at zero and going to
08:28 - but not but not including the length of
08:31 - the array
08:31 - make sure you remove that equal sign
08:32 - otherwise you're gonna get a crash okay
08:34 - so that way we're gonna look at every
08:36 - single element in this array we're gonna
08:37 - check its value and then if we find a 5
08:39 - we're gonna print it so let's see if
08:40 - this works
08:41 - found five and found a 5 now if I wanted
08:44 - to be more precise and say like where I
08:46 - found this 5 I could say found a 5
08:49 - index and we'll just put a plus sign and
08:53 - we can put I and what this is gonna do
08:55 - is it's actually just gonna
08:55 - automatically convert this into a string
08:57 - for us and print it out with this index
09:00 - so we're gonna put a space here just so
09:01 - don't get too smushed together but it
09:03 - says found a 5 at index 1 found a 5 at
09:05 - index 5 and we know this is true index 1
09:08 - is here index 5 is here and that's a
09:10 - really simple way that we can loop
09:12 - through a list and look for a certain
09:14 - value ok now in the next video I'm gonna
09:19 - talk about looping through a raise in a
09:22 - different way that is easier than this
09:24 - and it's called for each okay that'll be
09:27 - in the next video and then after that
09:29 - we're gonna go into while loops and then
09:30 - once we finish while loops will be going
09:31 - into collections like sets and stuff
09:33 - like that and then getting into all the
09:35 - object orientated program anyways if you
09:37 - guys enjoyed the video please make sure
09:38 - you leave a like and subscribe and I
09:40 - will see you again in the next one
09:41 - [Music]

Cleaned transcript:

hello and welcome back so in this video I'm going to be talking about for loops now for loops our fundamental aspect of every programming language and they're very important to understand I can almost guarantee you that any program you write will use multiple for loops so pretty much where for loop is it allows us to kind of automate a task do something a set amount of times and typically when you use a for loop you're using that because you know how many times you want to do something or like a condition is gonna tell you how many times to do something as opposed to what we're gonna talk about in future videos which is a while loop well you're not really sure how long it's gonna go for so you do something based on a condition but we'll talk about that when we get to it so let's start and just do it an example of what if we're loop can really like solve for us for example okay so say this is a pretty simple example and you guys will see in a second I create an integer C into x equals zero and say that I want to add 1 and then I want to add 2 to it and then I want to add 3 to it and four and five and six and like an infinite amount of times I want to add to that variable well we could do like X plus equals one we could do X plus equals two like and keep going and adding things to X and we could just keep copying and pasting this down our program but obviously that's terribly inefficient in terms of a typing standpoint and what if we wanted to change this what if every time we were on the program we want to ask the user how many times they want to add like a pattern like this to X well then we would have to constantly keep changing the numbers here right so this is where for loop can kind of come in handy so the syntax for for I'm just gonna type it out and then we will talk about exactly what it does so it has these brackets here and in here we're gonna put three things typically okay so what you're gonna do is you're gonna first start off by declaring a variable so in this case I'm gonna say int X is equal to zero okay now this can be called whatever you want typically people call it I I like to use X but you know what let's just use I and then what you're gonna do for this next so you're gonna put a semicolon and then the next thing you're gonna do is you're gonna set a condition so I'm just gonna do this and then talk about it cuz it's hard to kind of do them stepbystep because they all work together less than equal to 10 and I plus plus okay so what I've just done here actually is I first started by declaring a variable I it's equal to zero and then I've said we're gonna do this while I is less than or equal to ten and we're gonna add one to I so pretty much the way this works is every time we execute what's in these little square brackets here I is gonna have one added to it so this is what's known as the increment and this comes at the end of your for loop so this is what you're adding to the variable I which you're declaring here every time you run the loop now this here is your condition and this is going to state how many times the loop is going to run so in our case we're gonna run the loop and while I is less than or equal to the value 10 meaning we're gonna start at the value 0 because I equals 0 we're gonna run this loop then we're gonna come back up here we're gonna say okay what are we doing we're adding 1 to I then we're gonna check this condition so I is not equal to 1 we're gonna say well as 1 less than or equal to 10 no it's not and then we're gonna loop through and we're gonna continue looping through until eventually we get to the point where we add 2 I it's equal to 11 11 well that's greater than 10 so we break out of this loop and you guys will see when I start printing stuff to the screen exactly how this works but I hope that was a decent explanation of the way to do this so what I'm gonna do is I'm just gonna print I here and I'm gonna tell you right now what's gonna happen right so we're starting I at 0 so the first loop here we're gonna come through I is equal to 0 we're gonna print 0 next loop we come up we add 1 2 I check the condition we're okay we can keep going we're at 1 and we're gonna print from 0 to 10 so watch when I run here we get 0 all the way up to 10 okay that's how the for loop works so we execute whatever is in between these little curly braces 10 times or 11 times in this case because a 0 to 10 is 11 alright now we can change this increment we can change this condition there's a lot of things that we can do in this for loop so here we say for int I equals 0 I could do for int I equals 5 and I can start at the value 5 and now we're gonna start we're gonna go from 5 to 10 looping 1 2 3 4 5 6 times right we're printing 6 different values ok so that's if you can do that if I try to do something like I equals 11 well watch what happens nothing prints to the screen and that's because 11 well that's greater than or equal to 10 so the loop doesn't even run one time right so let's go back and I'll start at zero and now let's show what we can do in terms of incrementing so to increment here we can do I plus equals and then any value you want so in this case if I do five we're going to start at zero we're gonna add five we're gonna add five again so we get zero five and ten and you can change this to whatever value that you want okay same thing here with the condition these cals will be variables I feel like I don't need to tell you that but if I do something like int x equals 5 then i can do i plus equals x right and we can add that integer to it we can add X as the bound here so less than or equal to this could be greater than this could be greater than or equal to so I'm just gonna quickly go over one thing that a lot of people get confused with for with for loops and it's when we're gonna stop and when we're gonna start so when we say less than or equal to 10 this means we're gonna start at this value and now assuming we're adding 1 okay we are going to stop but include 10 meaning that I will hit the value 10 we will print 10 to the screen now if I remove this equal sign this is only gonna happen while I is less than 10 which means that if I is 10 well 10 is not less than 10 so we are not going to print 10 so if I run this you can see we only get up to the value 9 now the reason I'm talking about this is because what we typically want to do with loops is we want to loop through something or look at some data and typically that data is in the form of an array so now and this is why I talked about arrays before I'm gonna create an array so an integer array let's call it a RR is equal to and let's just give it some values here so like 1 5 7 3 4 5 okay this is gonna be our integer array now what do I want to do if or how am I going to do this if I want to look through my array and look at look at these values and maybe checking the value is equal to 7 or value is equal to 5 or something like that well the way that I can do this and this is like a dynamic way to do it is I could count the length of the array I'd say 1 2 3 4 5 6 okay 6 elements so I would put I is less than 6 years but a more useful way to do this is to just get the length of the array and the way that I can do that is just to do a RR dot length or I actually don't need this bracket sorry so we'll just do this in this way say the user had typed in a bunch of elements we had put them in an array we don't know how many elements they type in per se so we're gonna use this length so that we can change this loop and this loop will never crash it will always work because we're just simply getting the length of the array now if I were to do equal here I hope you guys realize this would cause us an issue and that's because we have six elements in the array right but it's gonna allow us to get I to the value six cuz that's the length of the array now what happens if I try to do this arr six well we should know from the last video that that will actually crash our program and that's because when we start and we start at zero and our last element in the array is actually going to be index five right because we go zero all the way to the length minus one which is five so race six does not actually exist so what I'm gonna do now is I'm just gonna write a little program inside this for loop and I'm just gonna say if the value is equal to five we're gonna print it out so how do I do this I'm gonna say if ARR at index I is equal to the value five then we're simply gonna do system dot out dot print Ln I just realizes comma there all right semicolon and we're simply going to print the value so in this case we could print a RI which we know is gonna be five or we could just type five because we know that is there so in this case let's just do found a five exclamation point okay that's what we'll print to the screen so again the reason this is going to work is because we're looping through starting at zero and going to but not but not including the length of the array make sure you remove that equal sign otherwise you're gonna get a crash okay so that way we're gonna look at every single element in this array we're gonna check its value and then if we find a 5 we're gonna print it so let's see if this works found five and found a 5 now if I wanted to be more precise and say like where I found this 5 I could say found a 5 index and we'll just put a plus sign and we can put I and what this is gonna do is it's actually just gonna automatically convert this into a string for us and print it out with this index so we're gonna put a space here just so don't get too smushed together but it says found a 5 at index 1 found a 5 at index 5 and we know this is true index 1 is here index 5 is here and that's a really simple way that we can loop through a list and look for a certain value ok now in the next video I'm gonna talk about looping through a raise in a different way that is easier than this and it's called for each okay that'll be in the next video and then after that we're gonna go into while loops and then once we finish while loops will be going into collections like sets and stuff like that and then getting into all the object orientated program anyways if you guys enjoyed the video please make sure you leave a like and subscribe and I will see you again in the next one
