With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - youtube video in this video i am going
00:12 - to be showing you how to make a planet
00:14 - simulation using python now the goal of
00:17 - this is going to be to simulate the
00:18 - orbits of different planets around the
00:20 - sun we're going to use real astronomical
00:23 - values so the real mass of the sun the
00:24 - real distance from earth to the sun all
00:27 - of that type of stuff and we're going to
00:28 - apply the force of gravity between all
00:30 - of the different planets so we actually
00:32 - get an accurate elliptical orbit now
00:35 - here it does look like the orbit is
00:36 - circular it is not you can see i'm
00:38 - actually writing the distance of the
00:40 - planet to the sun on each planet so it's
00:43 - changing as we go around the orbit well
00:45 - this is really cool we're kind of mixing
00:46 - a bit of physics with python and looking
00:49 - at a cool simulation now i will mention
00:51 - that this tutorial is not designed for
00:53 - complete beginners you should have some
00:55 - knowledge of python however if you don't
00:57 - know anything about physics don't worry
00:59 - i will teach you the different physics
01:00 - we need to know to actually i guess
01:02 - perform this simulation it's not very
01:04 - complicated i myself am not a physics
01:06 - major or a physics guy and i was able to
01:09 - figure it out pretty quickly anyways
01:10 - with that said let's go ahead and get
01:12 - into the code after a quick word from
01:14 - our sponsor thanks to backtrace for
01:16 - sponsoring this video backtrace provides
01:18 - application monitoring as well as error
01:20 - in crash reporting for games we've all
01:23 - been there excited to launch a brand new
01:25 - video game just to be tormented by
01:27 - crashes bugs and an overall bad user
01:29 - experience backtrace wants to help limit
01:32 - that by providing a platform that gives
01:33 - game developers the best error in crash
01:35 - reporting with the most complete and
01:37 - helpful information backtrace works with
01:40 - any platform any engine and at any scale
01:43 - and provides 24 7 monitoring so you can
01:45 - retain more players and get better
01:47 - ratings backtrace helps you fix issues
01:49 - fast by providing accurate call stacks
01:51 - regression detection querying and
01:53 - analytics and integration with microsoft
01:55 - teams discord slack and more you can get
01:58 - started with backtrace today and manage
02:00 - up to 25 000 monthly errors with one
02:02 - month retention and 10 gigabytes of
02:04 - storage completely for free check it out
02:07 - from the link in the description and
02:09 - thanks again to backtrace for sponsoring
02:11 - this video alright so let's go ahead and
02:13 - get started now i will mention that
02:15 - right here i'm not simulating every
02:17 - single planet you can easily adjust the
02:19 - simulation to add as many planets as you
02:21 - would like you can even put something
02:22 - like stars or satellites whatever you
02:24 - can put any of that here because of the
02:26 - way we're gonna set this up however the
02:28 - planets i'm simulating right now are
02:30 - just the four closest to the sun so we
02:32 - have earth mars venus and mercury we're
02:35 - just doing that so we get a nice visual
02:37 - and we can see everything nice and large
02:39 - if you were to simulate the planets that
02:41 - are much further away from the sun then
02:42 - you're going to see all of these planets
02:44 - kind of smooshed really close to the sun
02:46 - and then the huge orbits around the sun
02:48 - from the larger planets if that makes
02:50 - sense and the planets that are much
02:51 - further away so this is just a nice
02:53 - visualization again you can adjust this
02:55 - however you like and i'll show you how
02:56 - to do that so that said let's dive into
02:59 - this i'm going to close this and just
03:00 - open up a new window here and we'll
03:02 - start writing some code now the first
03:04 - thing we do actually need to do is
03:05 - install pygame so if you don't already
03:07 - have pygame installed then just open up
03:10 - your terminal or command prompt
03:12 - depending on your operating system and
03:14 - type in the following command pip
03:16 - install pi game that doesn't work for
03:18 - you try pip 3 install pi game if that
03:20 - doesn't work for you try python hyphen m
03:23 - and then pip install pi game if that
03:25 - doesn't work try python 3 hyphen m pip
03:28 - install pygame and if none of those
03:29 - commands work i have two videos that
03:31 - i'll put on the screen that show you how
03:32 - to fix your pip command anyways i'm
03:35 - going to assume that you have pygame
03:36 - installed this is just a 2d graphics
03:38 - library that we're going to use for the
03:39 - simulation if you don't know pygame
03:41 - don't worry we're going to use very
03:43 - limited features from it and i'll talk
03:44 - about how all of them work
03:46 - so the first thing i'm going to do here
03:48 - is just import pygame and then i'm going
03:50 - to say pygame
03:52 - dot init just to initialize the module
03:55 - i'm also going to import the math module
03:56 - because we're going to have to use that
03:58 - in this code
03:59 - okay so continuing since i'm using pi
04:01 - game the first thing i want to do is set
04:03 - up my pi game window now to do this we
04:05 - need to pick a width and height in
04:06 - pixels for our window so i'm going to
04:08 - say the width comma the height in all
04:11 - capitals because this is a constant is
04:13 - going to be 800 800. you can make this
04:16 - whatever width and height you want but i
04:17 - recommend you make it square and then
04:19 - we're going to set up a window
04:21 - so i'm going to say win
04:23 - is equal to pi game dot display dot set
04:25 - underscore mode now this is just going
04:28 - to take in the coordinates for the size
04:29 - of our window so we're going to pass as
04:31 - a tuple here the width and the height
04:34 - this is going to give us what's known as
04:35 - a pi game surface we're going to call it
04:37 - the window because it's the main window
04:38 - that we're going to draw onto and we
04:40 - need to have access to this surface to
04:42 - be able to put something on the screen
04:43 - and actually see something moving around
04:45 - now what i'm also going to do is just
04:46 - set a caption for this window so
04:48 - pygame.display.set
04:50 - underscore caption now the caption is
04:52 - just going to be kind of the title of
04:54 - the window i'll show you what it looks
04:55 - like in one second and for this we'll
04:57 - just do planet
04:59 - simulation
05:00 - okay perfect
05:02 - so now that we have this what i want to
05:03 - do is create something known as the pi
05:05 - game event loop now this is essentially
05:07 - an infinite loop that's going to run the
05:08 - entire time that the simulation is going
05:11 - whenever you're working with some type
05:12 - of game you need some type of loop
05:14 - that's constantly running they can keep
05:15 - track of the different events that are
05:17 - occurring in this case the only event is
05:19 - going to be moving the different planets
05:21 - but we need to have some type of loops
05:22 - that the window doesn't just open and
05:24 - instantly close we need something
05:25 - keeping the program running so i'm going
05:27 - to make a function here and i'm going to
05:28 - call this main and inside of here i'm
05:30 - going to make a variable i'm going to
05:31 - say run is equal to true then we're
05:34 - going to say well run like this and this
05:36 - loop will run while this variable run is
05:38 - true now inside of here i'm going to get
05:41 - the different events that are occurring
05:42 - in pi game so i'm going to say for event
05:44 - in
05:45 - pygame.event.get now this is going to
05:47 - give us a list of all of the different
05:49 - events that occur so key presses mouse
05:51 - movements whatever now when you're
05:53 - coding a more complex game you're going
05:54 - to handle those different events however
05:56 - the only event that we want to handle is
05:58 - when the user presses the x button to
06:00 - close the window now that event is the
06:03 - following i'm going to say if event dot
06:05 - type is equal to pygame.quit in all
06:09 - capitals then all we're going to do is
06:10 - say run is equal to false
06:12 - and then outside of our while loop we're
06:14 - going to say pygame.quit
06:16 - so this is literally all we need for the
06:17 - event loop at least for right now what's
06:19 - going to happen is we're going to
06:20 - continually run we're going to get all
06:22 - of the events if one of the events that
06:24 - occurred was we hit the x button in the
06:26 - window then we are going to close the
06:28 - window by making run equal to false
06:30 - since that's going to exit our loop
06:31 - we're going to quit pi game and then
06:33 - we'll be done perfect so all we need to
06:35 - do here is just call this main function
06:37 - and now that we do this we should see a
06:39 - pi game window pop up and then we can
06:40 - close it and get out of the program
06:42 - safely so let's try this
06:45 - and there we go we get planet simulation
06:47 - this is the caption i was talking about
06:48 - you could see it kind of right here
06:49 - beside the little pie game logo then if
06:51 - i click the x button we're going to
06:53 - close and we are all good okay we have
06:54 - set up our event loop nice
06:57 - so now that we have done that i just
06:58 - want to show you how we can draw
07:00 - something onto the screen and kind of
07:02 - update the screen so let's do that so at
07:04 - the top of this loop here i'm actually
07:06 - going to set up something called a clock
07:08 - now a clock is essentially going to make
07:10 - it so the frame rate of our game won't
07:12 - go past a certain value i'll talk about
07:15 - why we need this but the idea here is
07:17 - that if we don't implement some type of
07:19 - clock so some way to synchronize our
07:21 - game essentially you're going to run the
07:23 - simulation at the speed of your computer
07:26 - now some people want that to happen they
07:27 - want it to run super fast if you're on a
07:29 - super fast computer and then super slow
07:31 - if you're on a super slow one but
07:32 - ideally for me i don't care about what
07:34 - type of processor you have i just want
07:36 - you to run the simulation at the same
07:38 - speed so it looks normal
07:40 - hopefully that makes a bit of sense but
07:42 - we can kind of regulate the frame rate
07:43 - and how many times our game is
07:44 - refreshing so the way we do that is we
07:47 - say clock is equal to pi game dot time
07:49 - dot clock and then we go here and we say
07:51 - clock dot tick and then we put in the
07:53 - number of times we want this to update
07:55 - per second now this does not mean you're
07:57 - always going to update at in this case
07:59 - 60 frames per second however this is the
08:02 - maximum that you will be able to update
08:04 - at so we're saying clock.tick 60 that
08:05 - means we're going to update this loop or
08:07 - run this loop a maximum of 60 times per
08:09 - second to ensure our game's not going
08:11 - too fast okay so now we have our clock
08:14 - and as i was saying we want to draw
08:15 - something on the screen so to draw
08:17 - something i'm going to use my window
08:19 - right here and i'm going to say win
08:21 - dot fill and then i need to pass an rgb
08:24 - color here that's going to be the color
08:26 - that i want to fill the entire window
08:28 - with on the screen so i'm just going to
08:29 - define a color let's just go with white
08:31 - for now and white will be equal to 255
08:34 - 255 255
08:36 - okay so that's our rgb value for white
08:39 - and then i'm going to pass white inside
08:41 - of here and we should see in a second
08:43 - that we're going to get the screen
08:44 - actually updating and now it's going to
08:45 - have a white background rather than a
08:47 - black
08:48 - however i will show you if i currently
08:50 - run the code we actually don't get any
08:52 - white on the screen and the reason we
08:54 - don't get any white on the screen is
08:55 - because we're not updating the display
08:57 - so what i need to do is say pygame dot
08:59 - display dot update not clear and what
09:02 - this does is actually take all of the
09:04 - drawing actions that we've done since
09:06 - the last update and then kind of paste
09:08 - them and draws them onto the screen so
09:10 - what i'm doing is every loop i'm going
09:12 - to fill the background with white and
09:14 - then i'm going to update the display
09:15 - okay so now if i run this
09:17 - you're going to see that we get a white
09:19 - background now we don't actually want a
09:20 - white background i want a black one so
09:22 - i'm going to get rid of this i just want
09:23 - to show you how we fill the screen okay
09:25 - so let's comment these out for right now
09:27 - perfect so now that we've done this
09:29 - let's start implementing a planet
09:31 - because obviously we want to put some
09:32 - planets on the screen and to do this i'm
09:34 - going to make a class so i'm going to
09:36 - say class planet
09:38 - and inside of here i'm going to define
09:39 - an initialization
09:41 - i'm going to say define a knit
09:43 - i'm going to say self we need an x and a
09:46 - y now the x and the y is going to be the
09:48 - position that we want this planet to be
09:49 - on the screen
09:50 - we also are going to need a radius we're
09:53 - going to need a color and then let me
09:55 - just check we want to take anything else
09:57 - we're also going to need a mass for the
09:58 - planets
09:59 - okay so these are kind of the
10:00 - initialization values that we have
10:03 - so i'm going to say self.x is equal to x
10:06 - self.y is equal to y
10:08 - self.radius is equal to radius obviously
10:10 - we're going to have circular planets
10:12 - self.color is equal to color
10:14 - we might want to make our planets more
10:16 - detailed and have multiple colors but
10:17 - for now we're just going to go the
10:18 - single color and then the mass is going
10:21 - to be the mass in kilograms of this
10:23 - planet we're going to have to use that
10:24 - mass to calculate the attraction between
10:26 - the different planets then generate the
10:28 - actual circular orbit which we'll get to
10:30 - when we start talking about the physics
10:32 - now there's a few other things that we
10:34 - want our planets to have they're going
10:35 - to have to have an x velocity as well as
10:37 - a y velocity so i'm going to say
10:39 - self.underscore x of l is equal to 0
10:42 - and self.y val is equal to zero now i'll
10:45 - explain how all of these concepts work
10:47 - in a second but the idea is we're going
10:48 - to be moving our planet in a circle and
10:50 - in order to move in a circle we have a
10:52 - velocity in multiple directions so we're
10:55 - going to have it in the x direction
10:57 - which is the horizontal direction and
10:58 - then in the y direction and by moving in
11:01 - two directions at the same time we're
11:02 - able to generate a circle and have kind
11:05 - of i don't want to call it uh
11:07 - centripetal force or some centripetal
11:09 - motion but something along those lines
11:11 - right we're actually moving in a circle
11:13 - around an object at a constant speed
11:16 - okay
11:17 - hopefully this is making sense so far
11:19 - another thing that i want to do here is
11:21 - i want to have something that says
11:22 - self.sun is equal to false now this is
11:25 - going to tell us if the planet is the
11:27 - sun the reason we want that is because
11:29 - we're going to draw the orbit of the
11:31 - planet moving around and i don't want to
11:33 - draw the orbit for the sun so i need to
11:36 - know if it's the sun to either draw it
11:37 - or to not draw it and then i'm going to
11:39 - have the self dot distance to sun i'm
11:42 - just going to make this equal to zero
11:43 - right now and we're going to update this
11:45 - value for every single planet that we
11:48 - have so that we know what its distance
11:50 - is and we can then draw that on the
11:51 - screen and then the last thing that i
11:53 - want is
11:54 - self.orbit is equal to an empty list
11:57 - we're going to use this to keep track of
11:59 - all of the points that this planet has
12:01 - traveled along so we can draw a circular
12:03 - orbit representing well the orbit of the
12:05 - planet
12:06 - okay
12:07 - again all this will start to make sense
12:08 - as we get into more of these concepts
12:10 - i'm just kind of setting up all the
12:11 - initialization values
12:13 - now a few other things that i want to do
12:15 - here
12:16 - is just write out a few constants that
12:17 - we're going to use for our simulation
12:20 - now the first constant we're going to do
12:22 - as a class variable in the planet class
12:24 - and this is going to be au now au is
12:26 - astronomical units and this is
12:28 - approximately equal to the distance of
12:30 - the earth to the sun now i want to use a
12:33 - u because it's going to simplify the
12:34 - math that we need to do to calculate the
12:36 - distance between the current planet and
12:38 - the sun and allow us to initialize our
12:41 - planets at the correct au from the sun
12:43 - so they're kind of the correct distance
12:45 - away hopefully that makes a bit of sense
12:47 - but 1au is equal to and i just have to
12:49 - copy this from my other screen
12:52 - 1.49.6 to the exponent 6 which is what
12:55 - this e6 stands for and then multiplied
12:58 - by a thousand and i don't actually need
13:00 - these in parentheses so i don't know why
13:01 - i had it there
13:02 - okay so what this is saying is we are
13:05 - 149 000 uh i guess this is sorry 149
13:09 - million and then 600 000 kilometers
13:12 - that's what this stands for right here
13:14 - but we want this to be in meters so i'm
13:16 - going to multiply it by a thousand to
13:18 - get the distance from the sun in meters
13:21 - uh 1au that's what this is hopefully
13:23 - that makes sense again when i use the
13:24 - distance from the earth to the sun
13:26 - approximately and here we're converting
13:28 - this from kilometers to meters by
13:30 - multiplying it by a thousand
13:32 - okay now we also want the gravitational
13:35 - constant now this is not negative 9.8
13:38 - that's the acceleration of gravity
13:40 - i actually yeah i think it's the
13:42 - acceleration of gravity i might be
13:43 - messing that up but it's something do
13:45 - with gravity but the gravitational
13:46 - constant is used in finding the force of
13:49 - attraction between objects which is what
13:50 - we want to do and g is different than
13:53 - the regular gravity one it is uh 6.67
13:56 - and actually is 4.28 e to the negative
13:59 - 11. okay that's great my autocomplete is
14:00 - working very well there
14:02 - nice now the last two things we want
14:04 - here is a scale since we're actually
14:06 - going to be simulating the real values
14:08 - here for the orbits we can't draw them
14:12 - at the position that we have them at i
14:14 - know that's probably a confusing line
14:16 - but the idea is if our planet is moving
14:18 - at you know something kilometers per
14:20 - second seven kilometers per second 29
14:22 - kilometers per second i can't draw my
14:24 - planet at a million kilometers in my pi
14:27 - game window i need to draw it in a kind
14:30 - of appropriate scale right so i'm going
14:32 - to have to figure out what one meter
14:34 - represents in terms of pixels in my pi
14:36 - game scale here because i'm only working
14:38 - with 800 pixels high and 800 pixels wide
14:42 - hopefully this is making a little bit of
14:43 - sense what i'm going to do here is say
14:45 - 250 divided by au is the scale now this
14:48 - scale essentially says that one
14:50 - astronomical unit is going to be about
14:52 - 100 pixels in my pi game program you can
14:55 - look at the math to figure out how that
14:56 - works but for now leave a comment we're
14:58 - going to say 1au is equal to 100 pixels
15:02 - okay that's kind of the scale that we're
15:03 - going with here so we can draw things to
15:06 - scale in the window
15:07 - and then the last thing i want is the
15:09 - time step and this is going to represent
15:12 - how much
15:14 - of time i want to represent in my
15:16 - simulation or that i want to simulate is
15:19 - being elapsed
15:20 - so the idea here is every time i update
15:22 - the frame i'm going to pass a certain
15:25 - time step and say okay i want to look at
15:27 - one hour of this planet's movement at a
15:29 - time or one day of this planet's
15:31 - movement at a time because i don't want
15:32 - to look at one second it's going to take
15:33 - a really really long time to simulate
15:35 - instead i want to look at a larger time
15:37 - step so what i'm going to do is say 3
15:39 - 600 which is the number of seconds in a
15:42 - uh what is this in an hour yeah i think
15:44 - this number of seconds in an hour and
15:46 - then i'm going to multiply this by 24
15:49 - and that's going to give me one day okay
15:51 - so this is representing
15:52 - 1
15:54 - day
15:55 - i think that's correct yeah okay i'm
15:56 - pretty sure certain that is correct this
15:58 - would be the number of seconds in an
15:59 - hour right if you go 60 times 60 i think
16:01 - that gives you 3 600 and then multiply
16:03 - that by 24 and that is the time step
16:05 - that we're going to be doing the
16:07 - simulation on so kind of one day at a
16:09 - time we'll be updating the planet
16:11 - all right hopefully i'm not confusing
16:12 - you guys too much i do understand this
16:14 - is a lot we got to go through a bunch of
16:15 - physics and stuff here to make this work
16:17 - but there you go that is a planet now
16:20 - the next thing i want to do is implement
16:21 - a draw method now this draw method just
16:23 - going to draw the planet on the screen
16:25 - so what i'm going to do is say self and
16:27 - then i'm going to take a window that i
16:28 - need to draw this planet on so the x and
16:31 - y for my planet as well as the x
16:33 - velocity and the y velocity for my
16:34 - planet is going to be in meters so the
16:36 - number of meters that i am away from the
16:39 - sun that's what x and y is going to
16:40 - represent so i need to take those values
16:43 - and then draw them to scale right
16:45 - because again i can't draw like
16:47 - something million kilometers or million
16:49 - meters away i need to draw an accurate
16:51 - scale in pi gain so this is where the
16:53 - scale is going to come in i'm going to
16:55 - say that my x is equal to and then this
16:57 - is going to be the self.x multiplied by
17:01 - my scale okay so it's going to be
17:02 - self.scale and self.scale is going to be
17:04 - a really really tiny number that will
17:06 - now take this number and bring it to
17:07 - scale and i'm going to say y is equal to
17:10 - self.y and i'm going to multiply that by
17:12 - self.scale
17:14 - okay nice now one other thing i need to
17:17 - do is make sure that i'm drawing all of
17:18 - this in the center of my screen because
17:21 - i haven't mentioned yet when we're
17:22 - talking about pie game zero zero is
17:25 - actually the top left hand corner so let
17:27 - me just quickly open the window here
17:28 - right here where my mouse is so top left
17:30 - hand corner this is 0 0. if i go all the
17:33 - way to the right this would be 800 0. if
17:36 - i go all the way to the bottom right
17:37 - hand corner this would be 800 800 so
17:40 - rather than having 0 0 in the middle
17:41 - which you might be used to it's the top
17:43 - left so i don't want to draw my stuff in
17:45 - the top left i want to draw it in the
17:46 - center so that means i need to take
17:48 - every single value i have i need to
17:50 - offset it by the center of the screen so
17:53 - that we draw stuff in the middle
17:55 - hopefully that makes a tiny bit of sense
17:57 - but the way we do this is we say plus
18:00 - and then this is going to be width over
18:01 - 2
18:02 - and then this is going to be plus and
18:04 - then this is going to be height over 2
18:06 - and those values are right here okay so
18:07 - the width and the height we could just
18:09 - write 400 but i'm going to do width and
18:11 - height so that if we change the width
18:12 - and the height this is going to update
18:14 - automatically
18:15 - okay so now we have our x and y and now
18:17 - i can actually draw this onto the screen
18:19 - so i'm going to say
18:21 - pygame
18:23 - dot draw
18:24 - dot circle and i'm going to pass the
18:26 - window which is where we want to draw
18:28 - this circle i'm going to pass the color
18:30 - that i want to draw the circle in so
18:32 - this is going to be self.color
18:34 - i'm going to pass the position that i
18:35 - want to draw it in which is going to be
18:36 - x y that's the center of the circle and
18:39 - then lastly i'm going to pass the radius
18:41 - so self.radius
18:43 - okay so now we're actually going to draw
18:44 - the circle on the screen when we call
18:46 - this draw method
18:48 - okay hopefully this is all making a bit
18:50 - of sense let's now go and actually draw
18:52 - a few planets and initialize some of
18:54 - their constants so the first planet we
18:56 - probably want to draw is the sun
18:58 - can you call this on a planet i guess
18:59 - it's a star again not a big physics guy
19:02 - but the first thing we want to draw is
19:03 - the sun okay so i'm going to say sun is
19:05 - equal to planet and we're going to pass
19:08 - 0 0 for its x y okay so 0 0 right here
19:11 - for the radius of the sun we can kind of
19:13 - pick whatever value we want here we're
19:15 - just going to be kind of randomly
19:17 - picking the radiuses based on the
19:18 - relative mass of the planets so we want
19:21 - the sun to be the biggest and what i
19:22 - have in my other program here is 30 for
19:24 - the radius so we'll go with that and for
19:26 - the color i want this to be yellow so
19:28 - just to make this a bit easier to read
19:30 - i'm going to define yellow up here and
19:32 - yellow actually how do you even make
19:34 - yellow let's look at this yellow is
19:36 - going to be 255 255 and 0. okay so
19:40 - that's the rgb value for yellow
19:42 - obviously that's the color we want the
19:43 - sun so let's now put the color as yellow
19:46 - and then the last thing we need to pass
19:48 - is the mass and the mass i need to look
19:50 - at my cheat sheet here because
19:52 - unfortunately i don't have this
19:53 - memorized
19:54 - is going to be the following
19:57 - let me paste this in
19:59 - 1.98892 times 10 to the exponent 30 and
20:03 - in case you're wondering this is in
20:04 - kilograms again we're going to use the
20:06 - accurate masses and astronomical units
20:09 - and stuff for all of these planets okay
20:11 - so that is the sun
20:12 - and for the sun we're just going to say
20:14 - sun.sun
20:16 - is equal to true because remember we
20:17 - have this property here that says sun
20:19 - and we're going to make this true so
20:21 - that we don't draw the distance to the
20:23 - sun from the sun and we don't draw the
20:24 - orbit for the sun which we don't need
20:26 - okay so now that we have this let's just
20:28 - see if we can draw this on the screen
20:30 - so let's go
20:32 - planets is equal to and let's make a
20:35 - list of all of the planets because we're
20:36 - going to add a few more and then inside
20:38 - of our loop here we're going to say for
20:40 - planet
20:42 - in planets and we're going to say planet
20:44 - dot draw
20:45 - and we're going to pass the window that
20:47 - we want to draw it on which is win in
20:49 - all capitals okay
20:51 - nice now we also need to make sure that
20:52 - we're updating the display so let's
20:53 - steal this here
20:55 - and let's put it
20:57 - down there okay nice so we're saying for
20:58 - plan implant plan.draw
21:00 - pygame.display.update let's see if this
21:02 - works fingers crossed let's run the code
21:06 - okay there we go we get a sun in the
21:07 - middle of the screen very nice that is
21:09 - exactly what we want
21:11 - all right now the next thing we want to
21:12 - do is draw a few more plants right so
21:14 - let's create earth mercury all of those
21:16 - okay so we're going to start with earth
21:18 - i'm going to say earth is equal to
21:19 - planet
21:20 - now the earth is actually going to be
21:22 - negative 1 multiplied by
21:25 - planets within all capital
21:27 - dot a u this is going to be the distance
21:30 - from the sun so we're going to put that
21:31 - as the x coordinate and for the y
21:34 - coordinate we're just going to make it 0
21:35 - for right now
21:36 - the color of the earth is going to be
21:38 - blue we'll write that rgb variable in a
21:40 - second and then the mass of the earth
21:44 - actually sorry we need the radius as
21:45 - well let's put the radius first what was
21:47 - the radius of the earth i had 60 in here
21:50 - as the radius
21:52 - and then the mass of the earth is
21:54 - this number
21:56 - let me copy it in 5.9742
22:00 - times 10 to the exponent 24. okay that's
22:02 - the mass of the earth
22:03 - now i will actually mention here before
22:05 - i continue that there isn't a great
22:07 - article i'm going to open it up so i can
22:09 - show it to you guys
22:10 - let me get it on my google chrome here
22:13 - that i'm actually inspired by making
22:14 - this program that has all these values
22:16 - already so this is the article i'll
22:18 - leave it in the description but it
22:19 - essentially implements the same thing
22:21 - we're going to implement here in turtle
22:23 - now i didn't want to do it in turtle
22:24 - because pie game is a lot better and
22:26 - it's a lot faster but if you look here
22:28 - all the values that i'm using are just
22:29 - coming from here right so like the earth
22:31 - mass
22:32 - the earth distance negative 1 times a u
22:35 - the sun mass just want to give credit to
22:37 - this article i'll leave it in the
22:38 - description
22:39 - anyways enough of that we have the
22:41 - distance to the sun which is this we
22:43 - have zero 60 in blue this is the mass
22:47 - and i think that's all we need for the
22:48 - earth right now
22:50 - let's now put earth inside of here and
22:52 - see if when we draw it we get it in an
22:54 - accurate position okay so let's run this
22:58 - and we get blue is not defined okay i
22:59 - forgot to do that let's define the color
23:01 - blue
23:02 - blue is going to be equal to and then i
23:04 - want kind of a nice light blue so i just
23:07 - picked one of these before it's going to
23:08 - be 100 149 237 this is the rgb value for
23:12 - kind of a lighter blue if you just want
23:14 - it to be regular blue then you could go
23:16 - 0 0 and then 255 that gives you a nice
23:19 - dark blue
23:20 - okay
23:21 - so let's run this now
23:22 - and see if this works and there we go we
23:24 - get the uh the earth which is you know
23:27 - 1au away from the sun
23:29 - hopefully uh that makes sense but this
23:31 - is how the scale is working we put it at
23:33 - negative 1au which means we're going to
23:34 - the left if we put at 1au we would have
23:36 - gone to the right it doesn't really
23:38 - matter where we start it and there we go
23:41 - okay
23:42 - so now we have the earth the next planet
23:44 - that i want to do let's look here is
23:46 - going to be mars so let's say mars is
23:49 - equal to a planet
23:50 - now the distance for mars is going to be
23:54 - this let me just copy it in
23:56 - it's going to be negative 1.524 times
23:59 - planet.au
24:00 - again we're going to put its
24:01 - y-coordinate at zero the radius of mars
24:04 - it's much smaller than earth's we're
24:06 - going to go with 12.
24:08 - it's going to be red which i'll define
24:09 - in a second and then the mass of mars is
24:12 - a little bit less than earth as well
24:14 - so it's going to be 6.39 times 10 to the
24:17 - exponent 23.
24:18 - now for red we need to define this now
24:21 - again i wanted kind of a nice looking
24:23 - red so i picked a custom rgb value here
24:26 - and this value is going to be 188
24:29 - 39 and 50. okay and now we have mars so
24:33 - now that we have mars we're going to put
24:35 - mars inside of here
24:36 - and we should now draw mars at the
24:38 - appropriate scale so let's look at this
24:40 - and we see the mars over here so notice
24:42 - that mars is kind of right by the border
24:45 - i'm fine with that but if you wanted to
24:46 - move everything in closer then what you
24:48 - would do
24:49 - is reduce this number right here so
24:52 - rather than doing 250 you would do
24:53 - something like 200 and you're gonna
24:55 - notice this is going to move us in a
24:57 - little bit closer so that's kind of how
24:58 - you can mess with things just make the
25:00 - number here smaller if you want
25:02 - everything to get closer to the sun
25:04 - okay so we'll go 250 au for now
25:07 - all right so now we have mars let's do
25:08 - our other planets so the other planets
25:11 - we have is mercury this is going to be
25:13 - equal to planet uh this distance this is
25:17 - the closest one to the sun
25:20 - my understanding is at least this is
25:22 - going to be zero we're going to have to
25:24 - make this smaller so we're going to go
25:25 - zero
25:26 - the color is going to be dark gray which
25:28 - we'll implement in a second
25:30 - and then the mass let me just copy this
25:32 - in
25:33 - is going to be
25:35 - 0.330 times 10 to the exponent 24. if we
25:38 - wanted to be consistent we could go 3.30
25:41 - times 10 to the exponent 23 that gives
25:43 - us the same thing okay so let's
25:45 - implement dark gray now so let's go up
25:47 - two colors
25:49 - dark gray
25:50 - is equal to and then what did i have
25:53 - dark gray at let me just look here
25:55 - this is going to be
25:56 - 80
25:58 - 71 note 78
26:00 - and 81. again you mess with these colors
26:03 - if you want i'm just picking some custom
26:04 - ones so they look a little bit nicer
26:06 - okay so now we have mercury so let's put
26:08 - mercury in here and we can just go right
26:10 - on to venus which i believe is next
26:13 - planet so we're going to say venus is
26:15 - equal to planet uh its distance is going
26:18 - to be 0.723
26:21 - times
26:23 - a u in case you're wondering planet.au
26:25 - is referencing this right here just
26:27 - because it's inside of the planet class
26:29 - okay so planet.au we're going to have
26:31 - zero uh this is a little bit larger so
26:33 - we're gonna go 14. the color of this
26:35 - will just be a regular white
26:37 - and then the mass is going to be this
26:39 - let me copy it in
26:41 - 4.8685
26:43 - times 10 to the exponent 24. okay let me
26:45 - zoom in so you guys can read that a
26:46 - little bit better let's now put
26:49 - venus in the list
26:51 - and let me go ahead and run this and see
26:53 - if we're getting all of our plants
26:56 - okay nice so there we go and i've just
26:57 - put the plants on different sides again
26:59 - you can kind of put put them wherever
27:00 - you want doesn't really matter we could
27:01 - put them all on the same side and have
27:02 - them move at the same time i'm just
27:04 - staggering them a bit maybe some of you
27:06 - will have issue with that based on your
27:08 - physics knowledge but this is what we're
27:10 - going to do for right now
27:11 - okay there we go we have all of our
27:12 - plants so now that we have all of our
27:14 - planets
27:15 - the next thing we need to do is start
27:17 - moving them now moving them is
27:19 - complicated but again as i mentioned
27:21 - we're going to be moving them by their x
27:22 - velocity and their y velocity but we
27:24 - need to determine what those velocities
27:26 - are and those velocities are determined
27:28 - by the force of attraction
27:30 - so essentially the force of gravity
27:32 - between the different planets all right
27:34 - so i'm going to start explaining the
27:35 - math that's going to go on here to
27:36 - actually move the planets around the sun
27:39 - and before i can do that i just want to
27:40 - give you a general understanding of
27:42 - gravity and how planets actually orbit
27:44 - around the sun in case you're unfamiliar
27:47 - so the reason why when we jump up we
27:49 - fall down and when we throw a ball up it
27:50 - comes down is because of gravity now we
27:52 - all know gravity but gravity is relative
27:55 - to different objects okay so all objects
27:58 - are actually attracting one another and
28:00 - the force of attraction that they have
28:01 - on one another is based on the mass of
28:04 - those objects now this only really
28:05 - becomes relevant when you have very very
28:08 - massive objects like planets so when
28:10 - we're talking about something like earth
28:12 - this is a massive body right is
28:13 - something like you know six to six
28:16 - multiplied by 10 to the exponent 24
28:18 - kilograms or whatever the number is it's
28:20 - a very very massive body so relative to
28:22 - our mass which is maybe 60 kilograms 70
28:24 - kilograms 80 kilograms whatever it is
28:26 - it's way way larger so it actually
28:29 - exerts a massive force on us that pulls
28:31 - us downwards towards the earth now what
28:34 - actually determines the strength of this
28:36 - force is the distance from us to the
28:38 - center of the earth hence why when you
28:40 - go up in space you have zero gravity
28:42 - because you're much further away from
28:44 - the earth now all objects again exert
28:47 - forces on each other and those forces
28:48 - depend on the two masses of the objects
28:50 - as well as the distance of the objects
28:52 - but if you're just naively looking at
28:54 - this equation here which is actually the
28:55 - force of attraction you'll see that the
28:57 - distance between the center of the two
28:59 - objects is the most important when it
29:01 - comes to what type of the force what
29:03 - type of force you're going to get
29:04 - because it's r squared so the further
29:06 - away you go
29:07 - exponentially the less gravity you're
29:09 - going to have the closer you get
29:11 - exponentially the more gravity you're
29:12 - going to get now again i'm not a physics
29:14 - major so take everything with a grain of
29:16 - salt here that's the basic understanding
29:18 - of gravity now when we're talking about
29:20 - planets we're talking about multiple
29:22 - massive objects that are moving around
29:25 - each other so when we talk about an
29:27 - object like earth here right the earth
29:29 - is moving at a constant velocity well
29:31 - not necessarily constant but it's moving
29:33 - at a relatively constant velocity around
29:35 - the sun now what forces it to move
29:37 - around the sun is gravity so the earth
29:40 - is already on a trajectory moving in the
29:43 - x direction okay so it has some speed
29:45 - going in the x direction and then there
29:47 - is a force pulling it towards the sun
29:50 - that force is gravity or the attraction
29:52 - between the earth and the sun now the
29:54 - reason why there's an attraction is
29:56 - because the sun is much much larger than
29:58 - the earth if the earth was larger than
30:00 - the sun then the sun would be orbiting
30:01 - around it great example if you think of
30:03 - the moon right the moon is much smaller
30:05 - than the earth it's very close to the
30:06 - earth and so it orbits around the uh the
30:09 - earth okay hopefully this is making a
30:11 - little bit of sense but the idea is that
30:13 - you have some force and that force
30:16 - essentially is causing the earth to move
30:18 - around the sun and the reason why the
30:20 - earth doesn't just shoot directly
30:22 - towards the sun like we shoot directly
30:23 - down on earth when we jump up is because
30:25 - it already has momentum moving in
30:27 - another direction and so there's
30:29 - multiple forces affecting it causing it
30:31 - to go in an orbit again very simplified
30:33 - explanation of what's going on but
30:35 - hopefully that makes a bit of sense now
30:37 - the reason i'm saying this is because we
30:38 - have multiple planets that are orbiting
30:40 - around the earth right maybe we have
30:42 - another planet i know i probably
30:43 - shouldn't have drawn it in blue but the
30:45 - point is there's a distance between
30:47 - these two planets and they also have a
30:48 - force of attraction on each other and
30:50 - that's why you're going to have
30:51 - different orbits and different speeds
30:54 - based on the location of other planets
30:56 - and kind of their orbital trajectory so
30:58 - if you have two planets here as well as
31:00 - a planet here well this guy's still
31:01 - orbiting around the sun because the sun
31:03 - is much larger than him but he's going
31:05 - to be orbiting slower than the earth is
31:07 - because he's not as close however the
31:09 - earth is going to be attracting or
31:11 - having some force of attraction on this
31:13 - planet and this planet is going to have
31:14 - some force of attraction on the earth
31:16 - and so you need to take that into
31:18 - account when you're actually calculating
31:20 - the different orbits of the planets
31:22 - all right i know this is a lot
31:24 - very very math and physics has heavy
31:26 - here but the idea is every single object
31:28 - exhibits some force on each other and we
31:30 - need to calculate what all of those
31:31 - forces are when we are actually
31:33 - determining the orbit so that we are
31:36 - going to be orbiting appropriate to
31:37 - where the other planets are so we can't
31:39 - just calculate the force to the sun we
31:41 - need to also calculate the force of the
31:42 - other planets and that's going to give
31:44 - us a somewhat elliptical orbit as well
31:46 - okay
31:47 - hopefully this makes a little bit of
31:49 - sense now let's talk about how we
31:50 - actually do this so as i kind of already
31:53 - hinted at if you look to the left of my
31:55 - screen
31:56 - you can see that i have the equation
31:58 - here for the force of attraction between
32:00 - two objects now this force is the
32:03 - straight line force between two objects
32:05 - so let me just move the earth a bit here
32:07 - so i can explain kind of what i mean by
32:09 - that and why we need to do a little bit
32:10 - of trigonometry so let's say we have the
32:12 - earth over here
32:14 - this we'll say is the force of gravity
32:17 - or the force of attraction between the
32:18 - two objects now to calculate this is
32:20 - fairly simple we just need to first
32:21 - calculate the distance between the two
32:23 - objects which we can do
32:25 - we then need to know the masses which we
32:26 - already know and the gravitational
32:28 - constant which we know as well so let's
32:30 - say we know the force well if we know
32:32 - the force the issue is it's giving us
32:33 - the straight line force
32:35 - we want to break this force into two
32:38 - components so that we are able to move
32:41 - the earth in an x direction as well as a
32:44 - y direction so we need to kind of
32:46 - understand this that it's giving us the
32:48 - straight line force we need to break
32:50 - that force into x and y components so we
32:52 - can actually move the earth around the
32:54 - sun in both the x and the y direction
32:57 - now this is the same way that we're
32:58 - going to calculate the distance it's
33:00 - very easy for us to actually find the
33:01 - distance because we're looking for let
33:04 - me just redraw all of this
33:05 - this right here so this is going to be r
33:07 - we don't know what r is but we know what
33:10 - the y distance is and the x
33:13 - distances between these two points
33:14 - because for both these points we have an
33:16 - x and a y right so we have like x 2
33:19 - and y 2. so if we know both of those
33:21 - points we can calculate the difference
33:23 - in x and the difference in y and then to
33:25 - figure out what r is relative to our
33:27 - right triangle here what equation do we
33:29 - use well pythagorean theorem i know i
33:31 - completely butchered that that name but
33:34 - it's going to be x squared plus y
33:35 - squared take the root of that and that's
33:37 - going to give us r okay so we are able
33:39 - to calculate r then obviously we can
33:41 - take the square
33:42 - so once we do that we calculate the
33:43 - distance then we're going to calculate
33:45 - the force and then we need to go in the
33:46 - opposite direction from the force
33:49 - back to the x and y components okay so
33:52 - let's redraw this so now let's say we
33:54 - know the force okay and again we need to
33:57 - split this into x and y so we need to
33:59 - have i guess f x
34:01 - and f y now the way that we do this is
34:04 - we need to calculate the angle here
34:06 - theta because if we have any two aspects
34:08 - of a triangle so if we have one side
34:10 - length and an angle and it's a right
34:11 - angled triangle we can calculate any
34:13 - other angle or any other side length
34:15 - right that's just a property of a right
34:16 - triangle so we know f and we should know
34:18 - this angle and the reason we know this
34:20 - angle is because we know
34:22 - x and we know y so the way we calculate
34:25 - this angle is we take the arc tangent so
34:28 - the tan inverse of
34:30 - y over x now to derive why this is going
34:33 - to give us the angle theta let's look at
34:36 - the equation
34:37 - of tan
34:38 - of theta is equal to and then this is
34:41 - going to be the opposite
34:42 - over the adjacent now i like to remember
34:44 - this as toa okay but this is the
34:47 - equation
34:48 - you know this is a property of a right
34:50 - triangle so if i have tan theta is equal
34:52 - to the opposite over the adjacent and
34:54 - we're talking about this right here the
34:55 - opposite side length is y the adjacent
34:58 - side length is x
34:59 - and so we can kind of sub those values
35:01 - in right and we get y and x if we want
35:04 - to isolate for theta we need to take the
35:06 - inverse tangent so that's what we do we
35:08 - take tan inverse of y over x that gives
35:10 - us theta okay so now that we know theta
35:13 - we can now use theta to calculate what
35:15 - the f force component is or the x force
35:18 - component is as well as the y force
35:20 - component
35:21 - so to do that we need to use some other
35:23 - properties so we have a property it is
35:26 - so oops let me write this property
35:29 - so
35:30 - ka
35:31 - toa this is the way that i always
35:33 - remember these
35:34 - but we can say that the sine of theta is
35:38 - equal to the opposite over the
35:39 - hypotenuse and since we're looking for
35:41 - the opposite which is y we can say
35:44 - sine of the angle theta which we know is
35:47 - equal to the f of y over h h is f we
35:50 - know f and we're able to find what f
35:52 - of y is by just isolating for f of y so
35:55 - multiplying f by sine theta and then
35:57 - same thing if we want to find what fx is
35:59 - we can say fx is equal to this is going
36:02 - to be the cose of theta
36:04 - multiplied by f that will give us the fx
36:07 - component and then once we know the x
36:09 - and y velocity we can very easily move
36:11 - this around the sun
36:13 - all right math lesson is now over
36:16 - hopefully i didn't confuse you too badly
36:18 - again i'm trying to squeeze in what is
36:20 - probably taught in an entire year of
36:21 - grade 12
36:23 - physics in about 10 minutes but that is
36:25 - the math that we need to understand to
36:27 - be able to move these objects around
36:29 - can't really make it much simpler than
36:30 - that if you don't understand basic
36:32 - trigonometry then i'm sure this was a
36:33 - lot but you can kind of just trust the
36:35 - properties that i showed you here and i
36:37 - will show you how to implement them in
36:38 - code if you don't understand totally
36:40 - fine you can still follow along and you
36:42 - will have a working simulation with that
36:44 - said let's go back to the code all right
36:45 - so i'm back in the code and it is time
36:48 - to do some math inside of code now i
36:50 - know we just did a lot of math but now
36:51 - we're doing it in code hopefully that
36:54 - gave you an explanation of what i'm
36:55 - going to write here so i'm on my planet
36:57 - class and i'm going to write a method
36:59 - that will calculate the force of
37:01 - attraction between another object and
37:05 - the current object okay
37:06 - so i'm going to say define
37:08 - attraction like that i'm going to take
37:11 - in self and i'm going to take in another
37:12 - object
37:13 - now the other is going to be another
37:15 - planet okay
37:16 - so the first thing i'm going to do is
37:18 - say that my other underscore x
37:20 - other underscore y is equal to other dot
37:24 - x
37:25 - and
37:26 - other dot y
37:27 - okay
37:28 - now the first thing we need to do here
37:30 - is we need to calculate the distance
37:32 - between the current object and the other
37:34 - object so let's do that we're going to
37:36 - say the distance in x is equal to and
37:39 - this is going to be the other x
37:41 - minus the self.x okay
37:44 - and then the distance in y is going to
37:46 - be equal to the other y
37:49 - minus the self-doubt one now it doesn't
37:51 - matter if you take the self.x and
37:53 - subtract it from other dot x it doesn't
37:55 - matter what way you do it it's going to
37:56 - give us the uh
37:57 - the magnitude which is what we
37:59 - which is what we want sorry
38:00 - because once we take the square of both
38:03 - these values we're going to get a
38:03 - positive value no matter what so i have
38:06 - the distance x and the distance y now
38:08 - i'm going to say distance
38:09 - is equal to
38:11 - and this is going to be
38:13 - the math
38:15 - dot sqrt
38:16 - of the distance x to the exponent 2
38:20 - plus the distance y
38:23 - to the exponent to okay let me just
38:24 - check and make sure i haven't messed
38:26 - this up yet looks good we have found the
38:28 - distance okay
38:29 - now the first thing i'm going to do is
38:30 - i'm going to say if the other dot sun
38:34 - then i'm going to say
38:36 - the self dot distance to sun is equal to
38:39 - distance
38:40 - now the reason i'm doing this is because
38:42 - if the other object that we're
38:43 - calculating the force of attraction with
38:45 - is the sun i just calculate the distance
38:47 - to the sun and i just want to update the
38:49 - distance the sun property here so i can
38:51 - use that when i actually want to draw
38:53 - the distance of the sun on top of the
38:55 - planet again we're just checking is the
38:56 - other object the sun if it is okay we
38:58 - know the distance so let's just plug
38:59 - that in and save that value inside of
39:01 - the class that way we're not
39:03 - recalculating it later on we already
39:04 - have the value okay so now that we've
39:06 - done that we need to calculate the force
39:08 - of attraction so we're going to say the
39:10 - force uh yeah i think it's force is
39:12 - going to be equal to self.g
39:14 - we're going to multiply this by our
39:17 - self.mass
39:18 - multiplied by the other dot mass
39:21 - and then we're going to divide this by
39:23 - the distance
39:25 - to the exponent 2. and why did i write
39:27 - it like that it's going to be distance
39:28 - to the exponent 2
39:29 - and i think that's good
39:32 - okay now we don't need to do any
39:33 - parentheses because these have the same
39:34 - order of operations and exponent to the
39:37 - exponent 2 is going to
39:39 - happen first anyways okay so this is how
39:41 - we calculate the force now remember this
39:42 - is the straight line force we need to
39:45 - break this force down into the x and to
39:47 - the y component which is why we have to
39:49 - do all of that trigonometry so now we
39:51 - need to calculate the angle theta so
39:53 - we're going to say theta
39:55 - is equal to and then this is going to be
39:57 - the math dot arc tangent of and it's
40:00 - actually going to be here the distance y
40:02 - over the distance x now the reason i'm
40:04 - doing a tan 2 is because this is a
40:06 - special function in python that's going
40:08 - to take the y over the x and then give
40:11 - us the angle associated with it so make
40:13 - sure you use a tan 2 from the math
40:15 - library if you just use a tan that's not
40:17 - going to work you need a tan too okay so
40:19 - math.810 distance x distance y now we
40:22 - know the angle theta now that we know
40:24 - the angle theta we can calculate the x
40:26 - velocity and the y velocity so we're
40:28 - going to say or sorry not the x velocity
40:30 - we're going to calculate the x force and
40:31 - the y force so we're going to say the
40:33 - force x
40:35 - is equal to this is going to be
40:37 - dot cosine
40:38 - of theta multiplied
40:41 - by the force
40:42 - okay and then the force underscore y is
40:44 - going to be equal to the math dot sine
40:47 - of the theta
40:50 - multiplied by the force okay and then
40:53 - we're going to return from here the
40:55 - force x and the force y
40:58 - okay let's break down what we did here i
41:00 - understand this is probably a little bit
41:01 - confusing still we first calculate the
41:03 - distance between the two objects there
41:05 - we go we have the distance great
41:07 - then what we're going to do is determine
41:09 - if the other object is the sun if it is
41:10 - we're just going to store that distance
41:12 - in a property here because we want to
41:13 - know what that value is
41:14 - now after that we want to calculate the
41:16 - force of attraction so this is the force
41:17 - of attraction here it's f equals m
41:20 - lowercase m
41:21 - uh
41:22 - over
41:23 - r squared multiplied by the
41:24 - gravitational constant g okay so that's
41:26 - what we're doing so self.g times mass
41:29 - multiplied by other mass over distance
41:31 - squared
41:32 - okay then we want to break this distance
41:34 - down into the two components so the uh
41:36 - sorry the force into the x force and the
41:38 - y force so we first need to calculate
41:40 - the angle so we say the math.arctangent2
41:43 - of the distance y over distance x gives
41:45 - us the angle that we want then we're
41:47 - going to say the force x is equal to the
41:49 - math dot cosine of theta multiplied by
41:51 - force
41:52 - and the force y is equal to the
41:54 - math.sine theta multiplied by the force
41:57 - now remember here that all of these
41:59 - distances and all of these forces are
42:01 - real distances and forces these are
42:03 - actually the distances and the forces
42:05 - that you would see i mean it's an
42:06 - approximation in the real solar system
42:08 - so i'm not using really small pixel
42:10 - values in pi game i'm using massive you
42:13 - know meter per squared kilograms squared
42:15 - values whatever the units are of these
42:17 - forces i'm actually using the correct
42:20 - numbers like the large two scale numbers
42:22 - i just want to make that clear here
42:23 - because like if we were to print out
42:25 - what x were and print out what the force
42:27 - were you would see really really massive
42:29 - numbers because that's actually what
42:31 - they are in the real world because we're
42:32 - trying to do a simulation here okay
42:35 - anyway so we have attraction now that we
42:37 - have the force of attraction what we
42:38 - need to do is actually update the
42:40 - position of each planet based on the
42:42 - force of attraction between every single
42:45 - other planet because we can't just do it
42:47 - from the sun we need to look at all the
42:48 - other planets as i was discussing kind
42:50 - of in the whiteboard section so what i'm
42:52 - going to do is make a method here i'm
42:54 - going to say update position
42:57 - and this is going to take in itself
42:59 - and planets okay
43:01 - so what we're going to do is loop
43:02 - through all of the planets we're going
43:04 - to calculate the force of attraction
43:06 - between the current planet and all of
43:08 - the other planets we're then going to
43:09 - calculate what the velocity needs to be
43:12 - for these planets then we're going to
43:14 - move them by that velocity
43:16 - so we're going to say
43:17 - the total force in the x direction
43:20 - is equal to the total force in the y
43:21 - direction which is currently equal to
43:23 - zero and we're going to sum all of the
43:25 - forces together from all of the planets
43:27 - so we're going to say 4 planet
43:29 - in planets we're going to pass a list of
43:31 - planets here that's what we're taking in
43:33 - we're going to say if self is equal to
43:36 - planet then continue because we don't
43:38 - want to calculate the force with our
43:39 - self in fact that would just give us a
43:41 - zero division error
43:43 - because the distance between ourself and
43:44 - ourself is zero right so we can't
43:47 - do this division with the arc tangent
43:49 - or sorry with the distance squared that
43:51 - would give us an issue anyways
43:52 - continuing now what we're going to do is
43:54 - say that the force x force y is equal to
43:57 - and this is going to be the self dot
43:59 - attraction to
44:02 - this planet okay so again for every
44:04 - single planet we're going to calculate
44:05 - the force x and the force y that's
44:07 - exerting on this planet we're going to
44:09 - say self.attraction is equal to planet
44:11 - that's what's doing the calculation here
44:12 - that gives us the f x and fy then we're
44:14 - just going to sum these two variables or
44:16 - add to these two variables so self.x fx
44:19 - plus equals fx
44:21 - and total fy plus equals fy
44:24 - okay so now that we know what the total
44:26 - forces that's being exerted on us in the
44:28 - x and the y direction we need to use
44:30 - these forces to actually calculate what
44:31 - the velocity of the planet is going to
44:33 - be all right so the way we calculate the
44:35 - velocity here is we're going to say that
44:37 - the self.x underscore val is equal to
44:40 - the total fx divided by the self.mass
44:44 - multiplied by the self dots and then
44:48 - this is going to be time step now i'm
44:50 - going to explain how this works but this
44:52 - is using kind of the famous equation f
44:54 - equals m a okay so we have this equation
44:56 - f equals m a and this stands for the
44:59 - total force is equal to the mass divided
45:01 - by the acceleration
45:03 - now you can use this to solve for the
45:04 - acceleration which is what we're doing
45:06 - here so we're saying
45:07 - the acceleration is equal to
45:10 - f over m so i'm taking my total fx
45:13 - and my total mass right i'm dividing
45:15 - those to get the acceleration now the
45:17 - thing is i'm going to be adding to this
45:18 - i'm saying self.xfl plus equals so the
45:21 - way this works is i'm increasing my
45:24 - velocity by my acceleration multiplied
45:27 - by the time step there's another
45:29 - equation that has to do with time and
45:30 - acceleration to equal velocity and all
45:32 - those kinds of things
45:33 - anyways the point is though since we're
45:35 - simulating this over a period of time
45:38 - we're going to take the time step which
45:39 - is right here which is one day we're
45:42 - going to multiply that by whatever the
45:44 - acceleration is then we're going to take
45:46 - that value and add that to the current
45:49 - velocity now why this is going to give
45:51 - us a perfect elliptical is because as
45:53 - soon as we start going to the left or to
45:56 - the right of the planet and the
45:57 - distances and the angles change our
45:59 - force is going to be either negative or
46:01 - positive saying that we're going kind of
46:03 - right or we're going left or we're going
46:04 - up or we're going down so by doing a
46:06 - total summation of all of these forces
46:08 - what ends up happening is we go in a
46:10 - complete circle because by the time we
46:12 - get to a certain point in the orbit the
46:14 - velocity is going to be changing and
46:16 - either getting more positive or more
46:18 - negative moving us to the left or to the
46:20 - right
46:21 - hopefully that makes a tiny bit of sense
46:23 - but the point is we're going to
46:24 - constantly add this and you'll notice
46:26 - that we're not going to go faster we're
46:28 - just going to change in directions
46:29 - because what's going to happen is x
46:31 - velocity is going to be decreasing while
46:33 - the y velocity is increasing when we're
46:35 - at a certain point in the circle and
46:37 - then that's going to continually change
46:38 - and change directions as we move around
46:41 - so you'll you'll see when we start
46:43 - running this but
46:44 - that's how this works now we do the
46:45 - exact same thing with the y so plus
46:47 - equals the total fy
46:49 - over the self.mass
46:52 - okay and then multiplied by the
46:53 - self.time step
46:55 - okay so now that we have that what we
46:57 - need to do is just increment the x and
46:59 - the y because this is just the velocity
47:01 - so from acceleration you get velocity
47:03 - from velocity you get displacement or
47:05 - distance which is what we're now going
47:06 - to do so we're going to say self.x
47:09 - and then this is going to be plus equals
47:11 - self.x underscore vel and then we need
47:14 - to multiply this by the time step as
47:15 - well and then we're going to say self
47:18 - dot y
47:19 - plus equals this needs to be self.y val
47:22 - multiplied by self dot time step and
47:24 - then let's fix this
47:26 - to be self.expo
47:27 - okay and then lastly here
47:29 - we can actually say the self.orbit
47:33 - and then dot append
47:35 - and i'm going to append
47:37 - just a tuple here which is going to be
47:39 - self.x
47:41 - self.y
47:43 - and yeah i think that's actually good
47:44 - for the orbit okay so let me uh break
47:47 - this down one more time what we're doing
47:49 - is we're getting the total forces
47:50 - exerted on this planet from all other
47:52 - planets that are not itself
47:54 - we are then going to
47:56 - figure out what the x and the y velocity
47:58 - is using the equations i described then
47:59 - we are going to update the x and y
48:01 - position by using the velocity we need
48:03 - to multiply by the time step to make
48:05 - sure we're moving in the accurate amount
48:06 - of time here okay
48:07 - and then we have self.orbit
48:10 - dot append and we're appending the x and
48:11 - y position that we're currently at so
48:13 - that now we can draw the orbit for this
48:16 - planet which i'm going to do in a second
48:18 - okay so there we go we actually have all
48:20 - the hard stuff done now we just need to
48:22 - call the update position
48:24 - method here on all of our planets and
48:26 - you'll see that they'll start moving
48:27 - around the screen so i'm going to go to
48:29 - right before planet.draw and i'm going
48:31 - to say planet dot and then this is going
48:34 - to be
48:35 - update position and i'm just going to
48:37 - pass to it planets
48:40 - okay
48:41 - and that's actually all we need to start
48:42 - moving the planet and let's just run
48:45 - this now and see if it works
48:47 - okay so let's see and we can see that
48:49 - our planets are moving but we're getting
48:51 - a bit of an issue and i'm going to
48:52 - explain why that happens so first of all
48:55 - the reason why we're seeing our planets
48:57 - like thousands of times on the screen is
48:59 - because we need to refresh the screen by
49:02 - kind of redrawing a background on top of
49:04 - it before we draw everything again so
49:06 - what's happening right now is we're
49:07 - continually drawing the planets but
49:09 - we're not drawing anything on top of the
49:11 - old planets and so we keep seeing the
49:12 - old planets so all i need to do here say
49:14 - wind.fill and i'm just going to put
49:16 - inside of here
49:18 - 0 0 0 which is just the color black and
49:21 - now if i run this
49:23 - you're going to see that the planets
49:24 - just zoom towards the sun now the reason
49:27 - they're zooming towards the sun is
49:28 - because they don't have a velocity in
49:30 - the y or sorry in the x
49:32 - is the x no it's in the y direction so
49:35 - currently right if again if i run this
49:37 - you see that they just zoom right
49:39 - towards the sun and then keep going the
49:40 - reason they're doing that is because we
49:42 - don't have another velocity and that's
49:43 - what would happen if they weren't
49:45 - already moving in another direction so
49:47 - we need to apply an existing velocity in
49:50 - the y direction to these planets so that
49:53 - they will be moving around the sun so
49:55 - that the force attracted them to the sun
49:57 - causes this kind of centripetal motion
50:00 - or the circular motion around the planet
50:02 - i know this is like there's a lot of
50:04 - physics i wasn't actually
50:06 - considering how many physics i would
50:07 - need to explain here but the idea is for
50:09 - all of these planets they need some
50:11 - starting velocity in the y direction
50:13 - otherwise the only force being applied
50:15 - is directly x
50:16 - because of kind of where the planets are
50:18 - placed and the fact that we're just
50:19 - going straight down towards the sun
50:22 - that's the only force being applied
50:23 - currently because we don't have another
50:24 - velocity so let's apply the other
50:26 - velocities
50:28 - i'm just going to copy them in for my
50:29 - other screen so this is the earth
50:31 - velocity
50:32 - i'll pause so we can read them all in a
50:34 - second this is the mars velocity
50:37 - this is the mercury velocity
50:40 - and then this is the venous velocity
50:43 - okay
50:44 - so the earth y velocity is 29.783 this
50:47 - is kilometers per second multiplied by a
50:50 - thousand which gives us meters per
50:51 - second because that's what we're using
50:53 - excuse me
50:54 - the mars velocity
50:56 - 24.077 multiplied by a thousand again
50:59 - this is meters per second so kilometers
51:01 - then we convert to meters 47.4 for
51:03 - mercury and then negative 35.02 times a
51:07 - thousand for venus now you'll notice
51:09 - that for some of these we have positive
51:11 - uh and
51:13 - negative or not positive and not
51:14 - negative right like we have a negative
51:16 - planet a u moving us to the left and
51:18 - then we have a positive y velocity
51:20 - then for this one right we have a
51:22 - negative and positive and then here we
51:24 - have a positive and this actually needs
51:26 - to be negative to make sure that it's
51:28 - going to be moving in the correct
51:29 - direction so if you have one that's
51:31 - positive the other one needs to be
51:32 - negative so that they're all moving in
51:34 - the same direction
51:35 - vice versa hopefully that makes sense
51:37 - but you'll see here when this starts
51:38 - running
51:39 - okay so let me actually just run this
51:41 - now and we should see that they orbit so
51:43 - let's have a look
51:45 - okay so there we go now we have an orbit
51:46 - obviously doesn't look as cool we're not
51:48 - drawing the orbits but notice that
51:49 - they're all moving in the same direction
51:51 - and obviously the ones that are closer
51:53 - to the sun are moving faster
51:55 - perfect so the simulation seems to be
51:57 - working
51:58 - okay so let's now draw the orbits around
52:02 - and the way that we're going to do that
52:03 - is we're going to use all of the points
52:04 - that we're storing in this orbit list
52:06 - because every time that we call this
52:07 - we're going to add a point to the orbit
52:09 - list
52:11 - and we're going to draw them so what i'm
52:12 - going to do
52:14 - is add something here
52:15 - and say
52:18 - 4
52:19 - point
52:20 - in self.orbit and i actually want to
52:23 - draw this yeah i'll draw this before i
52:25 - draw the circle
52:26 - i'm going to say xy
52:28 - equals
52:30 - point
52:31 - uh and then i'm going to say x is equal
52:33 - to x multiplied by self.scale
52:37 - and then this is going to be plus
52:39 - width over 2.
52:41 - and then i'm going to say y is equal to
52:44 - y
52:44 - multiplied by self dot scale
52:49 - plus height
52:50 - over two
52:52 - and then we are going to
52:55 - actually store these in an
52:57 - updated points list we're gonna say
52:58 - updated points equal this
53:02 - updated points
53:03 - dot append point
53:06 - and then we're going to draw all these
53:07 - points as a line
53:09 - so we're going to say pi game
53:11 - dot draw
53:12 - dot line
53:14 - and is it lines let me just have a look
53:16 - here to see actually exactly what we
53:17 - need to drew to do
53:19 - so this is actually going to be lines
53:20 - sorry we're going to pass win we're
53:22 - going to pass self dot color we're going
53:25 - to pass false which means this is not an
53:28 - enclosed line so we're not going to draw
53:30 - an ending line essentially and then
53:33 - we're going to pass the updated points
53:35 - and we'll pass a thickness of two okay
53:38 - let me explain what i did i understand i
53:39 - kind of just went through this without
53:40 - any explanation so what i'm doing is i'm
53:42 - getting a list of updated points which
53:44 - are going to be all of the x y
53:45 - coordinates to scale right so i need to
53:47 - get them to scale otherwise i can't draw
53:49 - these properly so i take them i do what
53:52 - i need to do to get them to scale
53:53 - exactly what i did right here and then i
53:55 - update i make a new list here updated
53:57 - points and append
53:59 - sorry not the point
54:01 - the new xy that i made right here okay
54:04 - then i'm going to draw lines now what
54:06 - this does is it takes a list of points
54:08 - which is right here and it essentially
54:10 - just draws
54:12 - a bunch of a bunch of lines between the
54:14 - different points and it doesn't enclose
54:16 - them because i passed false now this is
54:18 - the thickness that i want to draw the
54:20 - lines which is going to be 2 pixels now
54:22 - one thing i do need to do is just put an
54:23 - if statement here and say if
54:25 - the len
54:27 - of self dot points
54:29 - is less than two
54:31 - actually less than or equal to two
54:32 - because i believe we need at least three
54:34 - points then i don't wanna do any of this
54:36 - so we're going to say actually the
54:38 - opposite we're going to say if yeah if a
54:40 - lot of points is greater than 2 so
54:43 - meaning that it is at least 3 then it
54:45 - will do this it's just confusing myself
54:47 - there we need at least 3 points so if
54:48 - the line of point's greater than 2 do
54:50 - all this otherwise don't do it that
54:52 - should give us the orbit so let's see
54:54 - now if we're going to get kind of the
54:55 - orbital ring around
54:57 - let's run this and planet object has no
54:59 - attribute points ah sorry it's not
55:01 - points
55:02 - it is orbit
55:03 - and i think i did this right self.orbit
55:06 - yes okay solve that over nice
55:08 - all right let's see there we go now we
55:10 - get the orbits being drawn as the
55:12 - planets are moving around
55:15 - very nice so i mean you can run the
55:17 - simulation as long as you like and see
55:18 - everything working now what i want to do
55:21 - is implement the distance to the sun
55:23 - just to show you that this is not a
55:25 - perfect circle it is actually elliptical
55:27 - i know it looks like a perfect circle
55:29 - but since the scale is so i guess small
55:33 - here that we're drawing this at you
55:34 - can't really see the ellipticalness of
55:36 - the orbits
55:38 - okay so now what i want to do is also
55:40 - draw that distance on top so to do that
55:42 - i need to initialize a font in pi game
55:44 - so i'm just going to say font is equal
55:46 - to game dot font dot sys font like that
55:51 - and i'm going to pass inside of here
55:53 - comic sans as my font
55:56 - and for the font size we'll just go with
55:57 - something like 16 so this is the font
55:59 - you want and this is the size okay
56:01 - that's how you initialize the font
56:03 - and then what i need to do if i want to
56:04 - draw the distance is i need to say first
56:07 - of all if
56:09 - not
56:10 - self.sun and forgot working in python so
56:13 - let's use the actual not because i don't
56:14 - want to draw the distance between the
56:16 - sun and the sun which is always going to
56:17 - be 0. so i'm going to say if not self
56:19 - dot sun
56:20 - then we'll say distance underscore text
56:24 - is equal to font
56:27 - dot render this is how you actually
56:28 - create a text object that you can draw
56:30 - i'm going to say font.render i'm going
56:32 - to do an f string and this is simply
56:34 - going to be the self.distance to the sun
56:37 - and then this is going to be in meters
56:39 - so what i can do is i can divide this
56:41 - value by a thousand if i want to get
56:42 - kilometers to make it a little bit
56:44 - smaller so let's do that divide by a
56:46 - thousand in kilometers i'm also just
56:48 - going to round this just so that we
56:49 - don't get a massive number here
56:52 - so let's just round this to one decimal
56:54 - point put that in kilometers and then we
56:56 - want anti-aliasing one which is the next
56:58 - argument
57:00 - and then the last argument i believe is
57:02 - the color that i want to draw this in
57:04 - which we can just make
57:06 - i guess it shouldn't be self.color we'll
57:08 - do
57:08 - white
57:10 - okay perfect so that is now the text
57:14 - object created again you have to use a
57:16 - font object to create a text object
57:18 - which then you can render on the screen
57:20 - now i want to draw it on the screen
57:22 - so i'm going to say win
57:24 - dot bullet
57:25 - i'm going to pass the distance text
57:28 - and then the position that i want to
57:29 - draw this at is a little bit complicated
57:32 - uh and also guys sorry i just realized i
57:34 - made a little bit of a mistake here
57:38 - actually no maybe this is okay the way
57:40 - it is
57:41 - when i define xy inside the for loop
57:43 - this might be interfering with this
57:45 - although it didn't seem like it was
57:47 - um so i guess we can just proceed but i
57:49 - don't like having these names shadow
57:50 - each other okay we'll just proceed for
57:52 - now but
57:53 - that's kind of what i was realizing and
57:54 - why i paused there anyways what i'm
57:56 - going to do is draw this
57:58 - at x y and we're referencing this x y
58:01 - here which is going to be the center of
58:02 - the circle now the issue is if i draw
58:04 - this at the center of the circle since i
58:06 - start drawing the text from the top left
58:08 - hand corner you'll see actually let me
58:10 - just run the code and you'll see what
58:11 - happens here when i do this so you'll
58:13 - notice that the actual the text is kind
58:16 - of
58:17 - at the bottom right of the center
58:19 - now that looks really ugly i obviously
58:21 - don't want that to be there so what i'm
58:22 - going to do instead
58:24 - is i'm going to make it so it's drawn
58:26 - directly in the center now to do that i
58:27 - need to take the x i need to subtract
58:29 - this from the distance underscore text
58:32 - dot get underscore width divided by 2.
58:35 - so if i take the width of the text and
58:36 - divide that by 2 and then subtract that
58:38 - from the x that shifts me to the left so
58:40 - i'm exactly in the middle
58:42 - and then same thing with the y so y is
58:44 - distance text i'll get underscore height
58:46 - over 2.
58:47 - okay
58:48 - nice hopefully that is all clear now i'm
58:51 - just going to take all this
58:53 - and we're going to put this below when
58:54 - we're drawing the circle so that it gets
58:56 - drawn on top and we don't have any
58:58 - overlap or we don't have the circle kind
59:00 - of overlapping the text
59:02 - okay so let's close that uh you guys can
59:04 - pause the video if you want to have a
59:05 - look at this let's run the code though
59:07 - and let's see what we get nice okay so
59:08 - now we actually have the uh text being
59:11 - drawn on top and for some of the planets
59:13 - given it is a bit hard to see
59:15 - but that is all working nice so with
59:18 - that said i think i'm going to end this
59:20 - tutorial here this was a lot of stuff to
59:22 - go through i hope you guys appreciated
59:24 - this and all the math and explanations
59:26 - if you did please make sure you leave a
59:27 - like obviously you can extend this as
59:29 - much as you would like you can mess
59:30 - around with the scale you can mess
59:32 - around with the speed you can change the
59:33 - time step this is a really really
59:35 - flexible program and all of the hard
59:37 - physics and math is done so if you want
59:38 - to add more planets you can really
59:40 - easily do that this is a realistic
59:42 - simulation something i haven't done on
59:44 - the channel before and that i hope you
59:45 - guys appreciate all right with that said
59:47 - i am going to end the video again please
59:49 - like the video subscribe to the channel
59:51 - and i will see you in another one
59:54 - [Music]
60:00 - you

Cleaned transcript:

hello everybody and welcome to another youtube video in this video i am going to be showing you how to make a planet simulation using python now the goal of this is going to be to simulate the orbits of different planets around the sun we're going to use real astronomical values so the real mass of the sun the real distance from earth to the sun all of that type of stuff and we're going to apply the force of gravity between all of the different planets so we actually get an accurate elliptical orbit now here it does look like the orbit is circular it is not you can see i'm actually writing the distance of the planet to the sun on each planet so it's changing as we go around the orbit well this is really cool we're kind of mixing a bit of physics with python and looking at a cool simulation now i will mention that this tutorial is not designed for complete beginners you should have some knowledge of python however if you don't know anything about physics don't worry i will teach you the different physics we need to know to actually i guess perform this simulation it's not very complicated i myself am not a physics major or a physics guy and i was able to figure it out pretty quickly anyways with that said let's go ahead and get into the code after a quick word from our sponsor thanks to backtrace for sponsoring this video backtrace provides application monitoring as well as error in crash reporting for games we've all been there excited to launch a brand new video game just to be tormented by crashes bugs and an overall bad user experience backtrace wants to help limit that by providing a platform that gives game developers the best error in crash reporting with the most complete and helpful information backtrace works with any platform any engine and at any scale and provides 24 7 monitoring so you can retain more players and get better ratings backtrace helps you fix issues fast by providing accurate call stacks regression detection querying and analytics and integration with microsoft teams discord slack and more you can get started with backtrace today and manage up to 25 000 monthly errors with one month retention and 10 gigabytes of storage completely for free check it out from the link in the description and thanks again to backtrace for sponsoring this video alright so let's go ahead and get started now i will mention that right here i'm not simulating every single planet you can easily adjust the simulation to add as many planets as you would like you can even put something like stars or satellites whatever you can put any of that here because of the way we're gonna set this up however the planets i'm simulating right now are just the four closest to the sun so we have earth mars venus and mercury we're just doing that so we get a nice visual and we can see everything nice and large if you were to simulate the planets that are much further away from the sun then you're going to see all of these planets kind of smooshed really close to the sun and then the huge orbits around the sun from the larger planets if that makes sense and the planets that are much further away so this is just a nice visualization again you can adjust this however you like and i'll show you how to do that so that said let's dive into this i'm going to close this and just open up a new window here and we'll start writing some code now the first thing we do actually need to do is install pygame so if you don't already have pygame installed then just open up your terminal or command prompt depending on your operating system and type in the following command pip install pi game that doesn't work for you try pip 3 install pi game if that doesn't work for you try python hyphen m and then pip install pi game if that doesn't work try python 3 hyphen m pip install pygame and if none of those commands work i have two videos that i'll put on the screen that show you how to fix your pip command anyways i'm going to assume that you have pygame installed this is just a 2d graphics library that we're going to use for the simulation if you don't know pygame don't worry we're going to use very limited features from it and i'll talk about how all of them work so the first thing i'm going to do here is just import pygame and then i'm going to say pygame dot init just to initialize the module i'm also going to import the math module because we're going to have to use that in this code okay so continuing since i'm using pi game the first thing i want to do is set up my pi game window now to do this we need to pick a width and height in pixels for our window so i'm going to say the width comma the height in all capitals because this is a constant is going to be 800 800. you can make this whatever width and height you want but i recommend you make it square and then we're going to set up a window so i'm going to say win is equal to pi game dot display dot set underscore mode now this is just going to take in the coordinates for the size of our window so we're going to pass as a tuple here the width and the height this is going to give us what's known as a pi game surface we're going to call it the window because it's the main window that we're going to draw onto and we need to have access to this surface to be able to put something on the screen and actually see something moving around now what i'm also going to do is just set a caption for this window so pygame.display.set underscore caption now the caption is just going to be kind of the title of the window i'll show you what it looks like in one second and for this we'll just do planet simulation okay perfect so now that we have this what i want to do is create something known as the pi game event loop now this is essentially an infinite loop that's going to run the entire time that the simulation is going whenever you're working with some type of game you need some type of loop that's constantly running they can keep track of the different events that are occurring in this case the only event is going to be moving the different planets but we need to have some type of loops that the window doesn't just open and instantly close we need something keeping the program running so i'm going to make a function here and i'm going to call this main and inside of here i'm going to make a variable i'm going to say run is equal to true then we're going to say well run like this and this loop will run while this variable run is true now inside of here i'm going to get the different events that are occurring in pi game so i'm going to say for event in pygame.event.get now this is going to give us a list of all of the different events that occur so key presses mouse movements whatever now when you're coding a more complex game you're going to handle those different events however the only event that we want to handle is when the user presses the x button to close the window now that event is the following i'm going to say if event dot type is equal to pygame.quit in all capitals then all we're going to do is say run is equal to false and then outside of our while loop we're going to say pygame.quit so this is literally all we need for the event loop at least for right now what's going to happen is we're going to continually run we're going to get all of the events if one of the events that occurred was we hit the x button in the window then we are going to close the window by making run equal to false since that's going to exit our loop we're going to quit pi game and then we'll be done perfect so all we need to do here is just call this main function and now that we do this we should see a pi game window pop up and then we can close it and get out of the program safely so let's try this and there we go we get planet simulation this is the caption i was talking about you could see it kind of right here beside the little pie game logo then if i click the x button we're going to close and we are all good okay we have set up our event loop nice so now that we have done that i just want to show you how we can draw something onto the screen and kind of update the screen so let's do that so at the top of this loop here i'm actually going to set up something called a clock now a clock is essentially going to make it so the frame rate of our game won't go past a certain value i'll talk about why we need this but the idea here is that if we don't implement some type of clock so some way to synchronize our game essentially you're going to run the simulation at the speed of your computer now some people want that to happen they want it to run super fast if you're on a super fast computer and then super slow if you're on a super slow one but ideally for me i don't care about what type of processor you have i just want you to run the simulation at the same speed so it looks normal hopefully that makes a bit of sense but we can kind of regulate the frame rate and how many times our game is refreshing so the way we do that is we say clock is equal to pi game dot time dot clock and then we go here and we say clock dot tick and then we put in the number of times we want this to update per second now this does not mean you're always going to update at in this case 60 frames per second however this is the maximum that you will be able to update at so we're saying clock.tick 60 that means we're going to update this loop or run this loop a maximum of 60 times per second to ensure our game's not going too fast okay so now we have our clock and as i was saying we want to draw something on the screen so to draw something i'm going to use my window right here and i'm going to say win dot fill and then i need to pass an rgb color here that's going to be the color that i want to fill the entire window with on the screen so i'm just going to define a color let's just go with white for now and white will be equal to 255 255 255 okay so that's our rgb value for white and then i'm going to pass white inside of here and we should see in a second that we're going to get the screen actually updating and now it's going to have a white background rather than a black however i will show you if i currently run the code we actually don't get any white on the screen and the reason we don't get any white on the screen is because we're not updating the display so what i need to do is say pygame dot display dot update not clear and what this does is actually take all of the drawing actions that we've done since the last update and then kind of paste them and draws them onto the screen so what i'm doing is every loop i'm going to fill the background with white and then i'm going to update the display okay so now if i run this you're going to see that we get a white background now we don't actually want a white background i want a black one so i'm going to get rid of this i just want to show you how we fill the screen okay so let's comment these out for right now perfect so now that we've done this let's start implementing a planet because obviously we want to put some planets on the screen and to do this i'm going to make a class so i'm going to say class planet and inside of here i'm going to define an initialization i'm going to say define a knit i'm going to say self we need an x and a y now the x and the y is going to be the position that we want this planet to be on the screen we also are going to need a radius we're going to need a color and then let me just check we want to take anything else we're also going to need a mass for the planets okay so these are kind of the initialization values that we have so i'm going to say self.x is equal to x self.y is equal to y self.radius is equal to radius obviously we're going to have circular planets self.color is equal to color we might want to make our planets more detailed and have multiple colors but for now we're just going to go the single color and then the mass is going to be the mass in kilograms of this planet we're going to have to use that mass to calculate the attraction between the different planets then generate the actual circular orbit which we'll get to when we start talking about the physics now there's a few other things that we want our planets to have they're going to have to have an x velocity as well as a y velocity so i'm going to say self.underscore x of l is equal to 0 and self.y val is equal to zero now i'll explain how all of these concepts work in a second but the idea is we're going to be moving our planet in a circle and in order to move in a circle we have a velocity in multiple directions so we're going to have it in the x direction which is the horizontal direction and then in the y direction and by moving in two directions at the same time we're able to generate a circle and have kind of i don't want to call it uh centripetal force or some centripetal motion but something along those lines right we're actually moving in a circle around an object at a constant speed okay hopefully this is making sense so far another thing that i want to do here is i want to have something that says self.sun is equal to false now this is going to tell us if the planet is the sun the reason we want that is because we're going to draw the orbit of the planet moving around and i don't want to draw the orbit for the sun so i need to know if it's the sun to either draw it or to not draw it and then i'm going to have the self dot distance to sun i'm just going to make this equal to zero right now and we're going to update this value for every single planet that we have so that we know what its distance is and we can then draw that on the screen and then the last thing that i want is self.orbit is equal to an empty list we're going to use this to keep track of all of the points that this planet has traveled along so we can draw a circular orbit representing well the orbit of the planet okay again all this will start to make sense as we get into more of these concepts i'm just kind of setting up all the initialization values now a few other things that i want to do here is just write out a few constants that we're going to use for our simulation now the first constant we're going to do as a class variable in the planet class and this is going to be au now au is astronomical units and this is approximately equal to the distance of the earth to the sun now i want to use a u because it's going to simplify the math that we need to do to calculate the distance between the current planet and the sun and allow us to initialize our planets at the correct au from the sun so they're kind of the correct distance away hopefully that makes a bit of sense but 1au is equal to and i just have to copy this from my other screen 1.49.6 to the exponent 6 which is what this e6 stands for and then multiplied by a thousand and i don't actually need these in parentheses so i don't know why i had it there okay so what this is saying is we are 149 000 uh i guess this is sorry 149 million and then 600 000 kilometers that's what this stands for right here but we want this to be in meters so i'm going to multiply it by a thousand to get the distance from the sun in meters uh 1au that's what this is hopefully that makes sense again when i use the distance from the earth to the sun approximately and here we're converting this from kilometers to meters by multiplying it by a thousand okay now we also want the gravitational constant now this is not negative 9.8 that's the acceleration of gravity i actually yeah i think it's the acceleration of gravity i might be messing that up but it's something do with gravity but the gravitational constant is used in finding the force of attraction between objects which is what we want to do and g is different than the regular gravity one it is uh 6.67 and actually is 4.28 e to the negative 11. okay that's great my autocomplete is working very well there nice now the last two things we want here is a scale since we're actually going to be simulating the real values here for the orbits we can't draw them at the position that we have them at i know that's probably a confusing line but the idea is if our planet is moving at you know something kilometers per second seven kilometers per second 29 kilometers per second i can't draw my planet at a million kilometers in my pi game window i need to draw it in a kind of appropriate scale right so i'm going to have to figure out what one meter represents in terms of pixels in my pi game scale here because i'm only working with 800 pixels high and 800 pixels wide hopefully this is making a little bit of sense what i'm going to do here is say 250 divided by au is the scale now this scale essentially says that one astronomical unit is going to be about 100 pixels in my pi game program you can look at the math to figure out how that works but for now leave a comment we're going to say 1au is equal to 100 pixels okay that's kind of the scale that we're going with here so we can draw things to scale in the window and then the last thing i want is the time step and this is going to represent how much of time i want to represent in my simulation or that i want to simulate is being elapsed so the idea here is every time i update the frame i'm going to pass a certain time step and say okay i want to look at one hour of this planet's movement at a time or one day of this planet's movement at a time because i don't want to look at one second it's going to take a really really long time to simulate instead i want to look at a larger time step so what i'm going to do is say 3 600 which is the number of seconds in a uh what is this in an hour yeah i think this number of seconds in an hour and then i'm going to multiply this by 24 and that's going to give me one day okay so this is representing 1 day i think that's correct yeah okay i'm pretty sure certain that is correct this would be the number of seconds in an hour right if you go 60 times 60 i think that gives you 3 600 and then multiply that by 24 and that is the time step that we're going to be doing the simulation on so kind of one day at a time we'll be updating the planet all right hopefully i'm not confusing you guys too much i do understand this is a lot we got to go through a bunch of physics and stuff here to make this work but there you go that is a planet now the next thing i want to do is implement a draw method now this draw method just going to draw the planet on the screen so what i'm going to do is say self and then i'm going to take a window that i need to draw this planet on so the x and y for my planet as well as the x velocity and the y velocity for my planet is going to be in meters so the number of meters that i am away from the sun that's what x and y is going to represent so i need to take those values and then draw them to scale right because again i can't draw like something million kilometers or million meters away i need to draw an accurate scale in pi gain so this is where the scale is going to come in i'm going to say that my x is equal to and then this is going to be the self.x multiplied by my scale okay so it's going to be self.scale and self.scale is going to be a really really tiny number that will now take this number and bring it to scale and i'm going to say y is equal to self.y and i'm going to multiply that by self.scale okay nice now one other thing i need to do is make sure that i'm drawing all of this in the center of my screen because i haven't mentioned yet when we're talking about pie game zero zero is actually the top left hand corner so let me just quickly open the window here right here where my mouse is so top left hand corner this is 0 0. if i go all the way to the right this would be 800 0. if i go all the way to the bottom right hand corner this would be 800 800 so rather than having 0 0 in the middle which you might be used to it's the top left so i don't want to draw my stuff in the top left i want to draw it in the center so that means i need to take every single value i have i need to offset it by the center of the screen so that we draw stuff in the middle hopefully that makes a tiny bit of sense but the way we do this is we say plus and then this is going to be width over 2 and then this is going to be plus and then this is going to be height over 2 and those values are right here okay so the width and the height we could just write 400 but i'm going to do width and height so that if we change the width and the height this is going to update automatically okay so now we have our x and y and now i can actually draw this onto the screen so i'm going to say pygame dot draw dot circle and i'm going to pass the window which is where we want to draw this circle i'm going to pass the color that i want to draw the circle in so this is going to be self.color i'm going to pass the position that i want to draw it in which is going to be x y that's the center of the circle and then lastly i'm going to pass the radius so self.radius okay so now we're actually going to draw the circle on the screen when we call this draw method okay hopefully this is all making a bit of sense let's now go and actually draw a few planets and initialize some of their constants so the first planet we probably want to draw is the sun can you call this on a planet i guess it's a star again not a big physics guy but the first thing we want to draw is the sun okay so i'm going to say sun is equal to planet and we're going to pass 0 0 for its x y okay so 0 0 right here for the radius of the sun we can kind of pick whatever value we want here we're just going to be kind of randomly picking the radiuses based on the relative mass of the planets so we want the sun to be the biggest and what i have in my other program here is 30 for the radius so we'll go with that and for the color i want this to be yellow so just to make this a bit easier to read i'm going to define yellow up here and yellow actually how do you even make yellow let's look at this yellow is going to be 255 255 and 0. okay so that's the rgb value for yellow obviously that's the color we want the sun so let's now put the color as yellow and then the last thing we need to pass is the mass and the mass i need to look at my cheat sheet here because unfortunately i don't have this memorized is going to be the following let me paste this in 1.98892 times 10 to the exponent 30 and in case you're wondering this is in kilograms again we're going to use the accurate masses and astronomical units and stuff for all of these planets okay so that is the sun and for the sun we're just going to say sun.sun is equal to true because remember we have this property here that says sun and we're going to make this true so that we don't draw the distance to the sun from the sun and we don't draw the orbit for the sun which we don't need okay so now that we have this let's just see if we can draw this on the screen so let's go planets is equal to and let's make a list of all of the planets because we're going to add a few more and then inside of our loop here we're going to say for planet in planets and we're going to say planet dot draw and we're going to pass the window that we want to draw it on which is win in all capitals okay nice now we also need to make sure that we're updating the display so let's steal this here and let's put it down there okay nice so we're saying for plan implant plan.draw pygame.display.update let's see if this works fingers crossed let's run the code okay there we go we get a sun in the middle of the screen very nice that is exactly what we want all right now the next thing we want to do is draw a few more plants right so let's create earth mercury all of those okay so we're going to start with earth i'm going to say earth is equal to planet now the earth is actually going to be negative 1 multiplied by planets within all capital dot a u this is going to be the distance from the sun so we're going to put that as the x coordinate and for the y coordinate we're just going to make it 0 for right now the color of the earth is going to be blue we'll write that rgb variable in a second and then the mass of the earth actually sorry we need the radius as well let's put the radius first what was the radius of the earth i had 60 in here as the radius and then the mass of the earth is this number let me copy it in 5.9742 times 10 to the exponent 24. okay that's the mass of the earth now i will actually mention here before i continue that there isn't a great article i'm going to open it up so i can show it to you guys let me get it on my google chrome here that i'm actually inspired by making this program that has all these values already so this is the article i'll leave it in the description but it essentially implements the same thing we're going to implement here in turtle now i didn't want to do it in turtle because pie game is a lot better and it's a lot faster but if you look here all the values that i'm using are just coming from here right so like the earth mass the earth distance negative 1 times a u the sun mass just want to give credit to this article i'll leave it in the description anyways enough of that we have the distance to the sun which is this we have zero 60 in blue this is the mass and i think that's all we need for the earth right now let's now put earth inside of here and see if when we draw it we get it in an accurate position okay so let's run this and we get blue is not defined okay i forgot to do that let's define the color blue blue is going to be equal to and then i want kind of a nice light blue so i just picked one of these before it's going to be 100 149 237 this is the rgb value for kind of a lighter blue if you just want it to be regular blue then you could go 0 0 and then 255 that gives you a nice dark blue okay so let's run this now and see if this works and there we go we get the uh the earth which is you know 1au away from the sun hopefully uh that makes sense but this is how the scale is working we put it at negative 1au which means we're going to the left if we put at 1au we would have gone to the right it doesn't really matter where we start it and there we go okay so now we have the earth the next planet that i want to do let's look here is going to be mars so let's say mars is equal to a planet now the distance for mars is going to be this let me just copy it in it's going to be negative 1.524 times planet.au again we're going to put its ycoordinate at zero the radius of mars it's much smaller than earth's we're going to go with 12. it's going to be red which i'll define in a second and then the mass of mars is a little bit less than earth as well so it's going to be 6.39 times 10 to the exponent 23. now for red we need to define this now again i wanted kind of a nice looking red so i picked a custom rgb value here and this value is going to be 188 39 and 50. okay and now we have mars so now that we have mars we're going to put mars inside of here and we should now draw mars at the appropriate scale so let's look at this and we see the mars over here so notice that mars is kind of right by the border i'm fine with that but if you wanted to move everything in closer then what you would do is reduce this number right here so rather than doing 250 you would do something like 200 and you're gonna notice this is going to move us in a little bit closer so that's kind of how you can mess with things just make the number here smaller if you want everything to get closer to the sun okay so we'll go 250 au for now all right so now we have mars let's do our other planets so the other planets we have is mercury this is going to be equal to planet uh this distance this is the closest one to the sun my understanding is at least this is going to be zero we're going to have to make this smaller so we're going to go zero the color is going to be dark gray which we'll implement in a second and then the mass let me just copy this in is going to be 0.330 times 10 to the exponent 24. if we wanted to be consistent we could go 3.30 times 10 to the exponent 23 that gives us the same thing okay so let's implement dark gray now so let's go up two colors dark gray is equal to and then what did i have dark gray at let me just look here this is going to be 80 71 note 78 and 81. again you mess with these colors if you want i'm just picking some custom ones so they look a little bit nicer okay so now we have mercury so let's put mercury in here and we can just go right on to venus which i believe is next planet so we're going to say venus is equal to planet uh its distance is going to be 0.723 times a u in case you're wondering planet.au is referencing this right here just because it's inside of the planet class okay so planet.au we're going to have zero uh this is a little bit larger so we're gonna go 14. the color of this will just be a regular white and then the mass is going to be this let me copy it in 4.8685 times 10 to the exponent 24. okay let me zoom in so you guys can read that a little bit better let's now put venus in the list and let me go ahead and run this and see if we're getting all of our plants okay nice so there we go and i've just put the plants on different sides again you can kind of put put them wherever you want doesn't really matter we could put them all on the same side and have them move at the same time i'm just staggering them a bit maybe some of you will have issue with that based on your physics knowledge but this is what we're going to do for right now okay there we go we have all of our plants so now that we have all of our planets the next thing we need to do is start moving them now moving them is complicated but again as i mentioned we're going to be moving them by their x velocity and their y velocity but we need to determine what those velocities are and those velocities are determined by the force of attraction so essentially the force of gravity between the different planets all right so i'm going to start explaining the math that's going to go on here to actually move the planets around the sun and before i can do that i just want to give you a general understanding of gravity and how planets actually orbit around the sun in case you're unfamiliar so the reason why when we jump up we fall down and when we throw a ball up it comes down is because of gravity now we all know gravity but gravity is relative to different objects okay so all objects are actually attracting one another and the force of attraction that they have on one another is based on the mass of those objects now this only really becomes relevant when you have very very massive objects like planets so when we're talking about something like earth this is a massive body right is something like you know six to six multiplied by 10 to the exponent 24 kilograms or whatever the number is it's a very very massive body so relative to our mass which is maybe 60 kilograms 70 kilograms 80 kilograms whatever it is it's way way larger so it actually exerts a massive force on us that pulls us downwards towards the earth now what actually determines the strength of this force is the distance from us to the center of the earth hence why when you go up in space you have zero gravity because you're much further away from the earth now all objects again exert forces on each other and those forces depend on the two masses of the objects as well as the distance of the objects but if you're just naively looking at this equation here which is actually the force of attraction you'll see that the distance between the center of the two objects is the most important when it comes to what type of the force what type of force you're going to get because it's r squared so the further away you go exponentially the less gravity you're going to have the closer you get exponentially the more gravity you're going to get now again i'm not a physics major so take everything with a grain of salt here that's the basic understanding of gravity now when we're talking about planets we're talking about multiple massive objects that are moving around each other so when we talk about an object like earth here right the earth is moving at a constant velocity well not necessarily constant but it's moving at a relatively constant velocity around the sun now what forces it to move around the sun is gravity so the earth is already on a trajectory moving in the x direction okay so it has some speed going in the x direction and then there is a force pulling it towards the sun that force is gravity or the attraction between the earth and the sun now the reason why there's an attraction is because the sun is much much larger than the earth if the earth was larger than the sun then the sun would be orbiting around it great example if you think of the moon right the moon is much smaller than the earth it's very close to the earth and so it orbits around the uh the earth okay hopefully this is making a little bit of sense but the idea is that you have some force and that force essentially is causing the earth to move around the sun and the reason why the earth doesn't just shoot directly towards the sun like we shoot directly down on earth when we jump up is because it already has momentum moving in another direction and so there's multiple forces affecting it causing it to go in an orbit again very simplified explanation of what's going on but hopefully that makes a bit of sense now the reason i'm saying this is because we have multiple planets that are orbiting around the earth right maybe we have another planet i know i probably shouldn't have drawn it in blue but the point is there's a distance between these two planets and they also have a force of attraction on each other and that's why you're going to have different orbits and different speeds based on the location of other planets and kind of their orbital trajectory so if you have two planets here as well as a planet here well this guy's still orbiting around the sun because the sun is much larger than him but he's going to be orbiting slower than the earth is because he's not as close however the earth is going to be attracting or having some force of attraction on this planet and this planet is going to have some force of attraction on the earth and so you need to take that into account when you're actually calculating the different orbits of the planets all right i know this is a lot very very math and physics has heavy here but the idea is every single object exhibits some force on each other and we need to calculate what all of those forces are when we are actually determining the orbit so that we are going to be orbiting appropriate to where the other planets are so we can't just calculate the force to the sun we need to also calculate the force of the other planets and that's going to give us a somewhat elliptical orbit as well okay hopefully this makes a little bit of sense now let's talk about how we actually do this so as i kind of already hinted at if you look to the left of my screen you can see that i have the equation here for the force of attraction between two objects now this force is the straight line force between two objects so let me just move the earth a bit here so i can explain kind of what i mean by that and why we need to do a little bit of trigonometry so let's say we have the earth over here this we'll say is the force of gravity or the force of attraction between the two objects now to calculate this is fairly simple we just need to first calculate the distance between the two objects which we can do we then need to know the masses which we already know and the gravitational constant which we know as well so let's say we know the force well if we know the force the issue is it's giving us the straight line force we want to break this force into two components so that we are able to move the earth in an x direction as well as a y direction so we need to kind of understand this that it's giving us the straight line force we need to break that force into x and y components so we can actually move the earth around the sun in both the x and the y direction now this is the same way that we're going to calculate the distance it's very easy for us to actually find the distance because we're looking for let me just redraw all of this this right here so this is going to be r we don't know what r is but we know what the y distance is and the x distances between these two points because for both these points we have an x and a y right so we have like x 2 and y 2. so if we know both of those points we can calculate the difference in x and the difference in y and then to figure out what r is relative to our right triangle here what equation do we use well pythagorean theorem i know i completely butchered that that name but it's going to be x squared plus y squared take the root of that and that's going to give us r okay so we are able to calculate r then obviously we can take the square so once we do that we calculate the distance then we're going to calculate the force and then we need to go in the opposite direction from the force back to the x and y components okay so let's redraw this so now let's say we know the force okay and again we need to split this into x and y so we need to have i guess f x and f y now the way that we do this is we need to calculate the angle here theta because if we have any two aspects of a triangle so if we have one side length and an angle and it's a right angled triangle we can calculate any other angle or any other side length right that's just a property of a right triangle so we know f and we should know this angle and the reason we know this angle is because we know x and we know y so the way we calculate this angle is we take the arc tangent so the tan inverse of y over x now to derive why this is going to give us the angle theta let's look at the equation of tan of theta is equal to and then this is going to be the opposite over the adjacent now i like to remember this as toa okay but this is the equation you know this is a property of a right triangle so if i have tan theta is equal to the opposite over the adjacent and we're talking about this right here the opposite side length is y the adjacent side length is x and so we can kind of sub those values in right and we get y and x if we want to isolate for theta we need to take the inverse tangent so that's what we do we take tan inverse of y over x that gives us theta okay so now that we know theta we can now use theta to calculate what the f force component is or the x force component is as well as the y force component so to do that we need to use some other properties so we have a property it is so oops let me write this property so ka toa this is the way that i always remember these but we can say that the sine of theta is equal to the opposite over the hypotenuse and since we're looking for the opposite which is y we can say sine of the angle theta which we know is equal to the f of y over h h is f we know f and we're able to find what f of y is by just isolating for f of y so multiplying f by sine theta and then same thing if we want to find what fx is we can say fx is equal to this is going to be the cose of theta multiplied by f that will give us the fx component and then once we know the x and y velocity we can very easily move this around the sun all right math lesson is now over hopefully i didn't confuse you too badly again i'm trying to squeeze in what is probably taught in an entire year of grade 12 physics in about 10 minutes but that is the math that we need to understand to be able to move these objects around can't really make it much simpler than that if you don't understand basic trigonometry then i'm sure this was a lot but you can kind of just trust the properties that i showed you here and i will show you how to implement them in code if you don't understand totally fine you can still follow along and you will have a working simulation with that said let's go back to the code all right so i'm back in the code and it is time to do some math inside of code now i know we just did a lot of math but now we're doing it in code hopefully that gave you an explanation of what i'm going to write here so i'm on my planet class and i'm going to write a method that will calculate the force of attraction between another object and the current object okay so i'm going to say define attraction like that i'm going to take in self and i'm going to take in another object now the other is going to be another planet okay so the first thing i'm going to do is say that my other underscore x other underscore y is equal to other dot x and other dot y okay now the first thing we need to do here is we need to calculate the distance between the current object and the other object so let's do that we're going to say the distance in x is equal to and this is going to be the other x minus the self.x okay and then the distance in y is going to be equal to the other y minus the selfdoubt one now it doesn't matter if you take the self.x and subtract it from other dot x it doesn't matter what way you do it it's going to give us the uh the magnitude which is what we which is what we want sorry because once we take the square of both these values we're going to get a positive value no matter what so i have the distance x and the distance y now i'm going to say distance is equal to and this is going to be the math dot sqrt of the distance x to the exponent 2 plus the distance y to the exponent to okay let me just check and make sure i haven't messed this up yet looks good we have found the distance okay now the first thing i'm going to do is i'm going to say if the other dot sun then i'm going to say the self dot distance to sun is equal to distance now the reason i'm doing this is because if the other object that we're calculating the force of attraction with is the sun i just calculate the distance to the sun and i just want to update the distance the sun property here so i can use that when i actually want to draw the distance of the sun on top of the planet again we're just checking is the other object the sun if it is okay we know the distance so let's just plug that in and save that value inside of the class that way we're not recalculating it later on we already have the value okay so now that we've done that we need to calculate the force of attraction so we're going to say the force uh yeah i think it's force is going to be equal to self.g we're going to multiply this by our self.mass multiplied by the other dot mass and then we're going to divide this by the distance to the exponent 2. and why did i write it like that it's going to be distance to the exponent 2 and i think that's good okay now we don't need to do any parentheses because these have the same order of operations and exponent to the exponent 2 is going to happen first anyways okay so this is how we calculate the force now remember this is the straight line force we need to break this force down into the x and to the y component which is why we have to do all of that trigonometry so now we need to calculate the angle theta so we're going to say theta is equal to and then this is going to be the math dot arc tangent of and it's actually going to be here the distance y over the distance x now the reason i'm doing a tan 2 is because this is a special function in python that's going to take the y over the x and then give us the angle associated with it so make sure you use a tan 2 from the math library if you just use a tan that's not going to work you need a tan too okay so math.810 distance x distance y now we know the angle theta now that we know the angle theta we can calculate the x velocity and the y velocity so we're going to say or sorry not the x velocity we're going to calculate the x force and the y force so we're going to say the force x is equal to this is going to be dot cosine of theta multiplied by the force okay and then the force underscore y is going to be equal to the math dot sine of the theta multiplied by the force okay and then we're going to return from here the force x and the force y okay let's break down what we did here i understand this is probably a little bit confusing still we first calculate the distance between the two objects there we go we have the distance great then what we're going to do is determine if the other object is the sun if it is we're just going to store that distance in a property here because we want to know what that value is now after that we want to calculate the force of attraction so this is the force of attraction here it's f equals m lowercase m uh over r squared multiplied by the gravitational constant g okay so that's what we're doing so self.g times mass multiplied by other mass over distance squared okay then we want to break this distance down into the two components so the uh sorry the force into the x force and the y force so we first need to calculate the angle so we say the math.arctangent2 of the distance y over distance x gives us the angle that we want then we're going to say the force x is equal to the math dot cosine of theta multiplied by force and the force y is equal to the math.sine theta multiplied by the force now remember here that all of these distances and all of these forces are real distances and forces these are actually the distances and the forces that you would see i mean it's an approximation in the real solar system so i'm not using really small pixel values in pi game i'm using massive you know meter per squared kilograms squared values whatever the units are of these forces i'm actually using the correct numbers like the large two scale numbers i just want to make that clear here because like if we were to print out what x were and print out what the force were you would see really really massive numbers because that's actually what they are in the real world because we're trying to do a simulation here okay anyway so we have attraction now that we have the force of attraction what we need to do is actually update the position of each planet based on the force of attraction between every single other planet because we can't just do it from the sun we need to look at all the other planets as i was discussing kind of in the whiteboard section so what i'm going to do is make a method here i'm going to say update position and this is going to take in itself and planets okay so what we're going to do is loop through all of the planets we're going to calculate the force of attraction between the current planet and all of the other planets we're then going to calculate what the velocity needs to be for these planets then we're going to move them by that velocity so we're going to say the total force in the x direction is equal to the total force in the y direction which is currently equal to zero and we're going to sum all of the forces together from all of the planets so we're going to say 4 planet in planets we're going to pass a list of planets here that's what we're taking in we're going to say if self is equal to planet then continue because we don't want to calculate the force with our self in fact that would just give us a zero division error because the distance between ourself and ourself is zero right so we can't do this division with the arc tangent or sorry with the distance squared that would give us an issue anyways continuing now what we're going to do is say that the force x force y is equal to and this is going to be the self dot attraction to this planet okay so again for every single planet we're going to calculate the force x and the force y that's exerting on this planet we're going to say self.attraction is equal to planet that's what's doing the calculation here that gives us the f x and fy then we're just going to sum these two variables or add to these two variables so self.x fx plus equals fx and total fy plus equals fy okay so now that we know what the total forces that's being exerted on us in the x and the y direction we need to use these forces to actually calculate what the velocity of the planet is going to be all right so the way we calculate the velocity here is we're going to say that the self.x underscore val is equal to the total fx divided by the self.mass multiplied by the self dots and then this is going to be time step now i'm going to explain how this works but this is using kind of the famous equation f equals m a okay so we have this equation f equals m a and this stands for the total force is equal to the mass divided by the acceleration now you can use this to solve for the acceleration which is what we're doing here so we're saying the acceleration is equal to f over m so i'm taking my total fx and my total mass right i'm dividing those to get the acceleration now the thing is i'm going to be adding to this i'm saying self.xfl plus equals so the way this works is i'm increasing my velocity by my acceleration multiplied by the time step there's another equation that has to do with time and acceleration to equal velocity and all those kinds of things anyways the point is though since we're simulating this over a period of time we're going to take the time step which is right here which is one day we're going to multiply that by whatever the acceleration is then we're going to take that value and add that to the current velocity now why this is going to give us a perfect elliptical is because as soon as we start going to the left or to the right of the planet and the distances and the angles change our force is going to be either negative or positive saying that we're going kind of right or we're going left or we're going up or we're going down so by doing a total summation of all of these forces what ends up happening is we go in a complete circle because by the time we get to a certain point in the orbit the velocity is going to be changing and either getting more positive or more negative moving us to the left or to the right hopefully that makes a tiny bit of sense but the point is we're going to constantly add this and you'll notice that we're not going to go faster we're just going to change in directions because what's going to happen is x velocity is going to be decreasing while the y velocity is increasing when we're at a certain point in the circle and then that's going to continually change and change directions as we move around so you'll you'll see when we start running this but that's how this works now we do the exact same thing with the y so plus equals the total fy over the self.mass okay and then multiplied by the self.time step okay so now that we have that what we need to do is just increment the x and the y because this is just the velocity so from acceleration you get velocity from velocity you get displacement or distance which is what we're now going to do so we're going to say self.x and then this is going to be plus equals self.x underscore vel and then we need to multiply this by the time step as well and then we're going to say self dot y plus equals this needs to be self.y val multiplied by self dot time step and then let's fix this to be self.expo okay and then lastly here we can actually say the self.orbit and then dot append and i'm going to append just a tuple here which is going to be self.x self.y and yeah i think that's actually good for the orbit okay so let me uh break this down one more time what we're doing is we're getting the total forces exerted on this planet from all other planets that are not itself we are then going to figure out what the x and the y velocity is using the equations i described then we are going to update the x and y position by using the velocity we need to multiply by the time step to make sure we're moving in the accurate amount of time here okay and then we have self.orbit dot append and we're appending the x and y position that we're currently at so that now we can draw the orbit for this planet which i'm going to do in a second okay so there we go we actually have all the hard stuff done now we just need to call the update position method here on all of our planets and you'll see that they'll start moving around the screen so i'm going to go to right before planet.draw and i'm going to say planet dot and then this is going to be update position and i'm just going to pass to it planets okay and that's actually all we need to start moving the planet and let's just run this now and see if it works okay so let's see and we can see that our planets are moving but we're getting a bit of an issue and i'm going to explain why that happens so first of all the reason why we're seeing our planets like thousands of times on the screen is because we need to refresh the screen by kind of redrawing a background on top of it before we draw everything again so what's happening right now is we're continually drawing the planets but we're not drawing anything on top of the old planets and so we keep seeing the old planets so all i need to do here say wind.fill and i'm just going to put inside of here 0 0 0 which is just the color black and now if i run this you're going to see that the planets just zoom towards the sun now the reason they're zooming towards the sun is because they don't have a velocity in the y or sorry in the x is the x no it's in the y direction so currently right if again if i run this you see that they just zoom right towards the sun and then keep going the reason they're doing that is because we don't have another velocity and that's what would happen if they weren't already moving in another direction so we need to apply an existing velocity in the y direction to these planets so that they will be moving around the sun so that the force attracted them to the sun causes this kind of centripetal motion or the circular motion around the planet i know this is like there's a lot of physics i wasn't actually considering how many physics i would need to explain here but the idea is for all of these planets they need some starting velocity in the y direction otherwise the only force being applied is directly x because of kind of where the planets are placed and the fact that we're just going straight down towards the sun that's the only force being applied currently because we don't have another velocity so let's apply the other velocities i'm just going to copy them in for my other screen so this is the earth velocity i'll pause so we can read them all in a second this is the mars velocity this is the mercury velocity and then this is the venous velocity okay so the earth y velocity is 29.783 this is kilometers per second multiplied by a thousand which gives us meters per second because that's what we're using excuse me the mars velocity 24.077 multiplied by a thousand again this is meters per second so kilometers then we convert to meters 47.4 for mercury and then negative 35.02 times a thousand for venus now you'll notice that for some of these we have positive uh and negative or not positive and not negative right like we have a negative planet a u moving us to the left and then we have a positive y velocity then for this one right we have a negative and positive and then here we have a positive and this actually needs to be negative to make sure that it's going to be moving in the correct direction so if you have one that's positive the other one needs to be negative so that they're all moving in the same direction vice versa hopefully that makes sense but you'll see here when this starts running okay so let me actually just run this now and we should see that they orbit so let's have a look okay so there we go now we have an orbit obviously doesn't look as cool we're not drawing the orbits but notice that they're all moving in the same direction and obviously the ones that are closer to the sun are moving faster perfect so the simulation seems to be working okay so let's now draw the orbits around and the way that we're going to do that is we're going to use all of the points that we're storing in this orbit list because every time that we call this we're going to add a point to the orbit list and we're going to draw them so what i'm going to do is add something here and say 4 point in self.orbit and i actually want to draw this yeah i'll draw this before i draw the circle i'm going to say xy equals point uh and then i'm going to say x is equal to x multiplied by self.scale and then this is going to be plus width over 2. and then i'm going to say y is equal to y multiplied by self dot scale plus height over two and then we are going to actually store these in an updated points list we're gonna say updated points equal this updated points dot append point and then we're going to draw all these points as a line so we're going to say pi game dot draw dot line and is it lines let me just have a look here to see actually exactly what we need to drew to do so this is actually going to be lines sorry we're going to pass win we're going to pass self dot color we're going to pass false which means this is not an enclosed line so we're not going to draw an ending line essentially and then we're going to pass the updated points and we'll pass a thickness of two okay let me explain what i did i understand i kind of just went through this without any explanation so what i'm doing is i'm getting a list of updated points which are going to be all of the x y coordinates to scale right so i need to get them to scale otherwise i can't draw these properly so i take them i do what i need to do to get them to scale exactly what i did right here and then i update i make a new list here updated points and append sorry not the point the new xy that i made right here okay then i'm going to draw lines now what this does is it takes a list of points which is right here and it essentially just draws a bunch of a bunch of lines between the different points and it doesn't enclose them because i passed false now this is the thickness that i want to draw the lines which is going to be 2 pixels now one thing i do need to do is just put an if statement here and say if the len of self dot points is less than two actually less than or equal to two because i believe we need at least three points then i don't wanna do any of this so we're going to say actually the opposite we're going to say if yeah if a lot of points is greater than 2 so meaning that it is at least 3 then it will do this it's just confusing myself there we need at least 3 points so if the line of point's greater than 2 do all this otherwise don't do it that should give us the orbit so let's see now if we're going to get kind of the orbital ring around let's run this and planet object has no attribute points ah sorry it's not points it is orbit and i think i did this right self.orbit yes okay solve that over nice all right let's see there we go now we get the orbits being drawn as the planets are moving around very nice so i mean you can run the simulation as long as you like and see everything working now what i want to do is implement the distance to the sun just to show you that this is not a perfect circle it is actually elliptical i know it looks like a perfect circle but since the scale is so i guess small here that we're drawing this at you can't really see the ellipticalness of the orbits okay so now what i want to do is also draw that distance on top so to do that i need to initialize a font in pi game so i'm just going to say font is equal to game dot font dot sys font like that and i'm going to pass inside of here comic sans as my font and for the font size we'll just go with something like 16 so this is the font you want and this is the size okay that's how you initialize the font and then what i need to do if i want to draw the distance is i need to say first of all if not self.sun and forgot working in python so let's use the actual not because i don't want to draw the distance between the sun and the sun which is always going to be 0. so i'm going to say if not self dot sun then we'll say distance underscore text is equal to font dot render this is how you actually create a text object that you can draw i'm going to say font.render i'm going to do an f string and this is simply going to be the self.distance to the sun and then this is going to be in meters so what i can do is i can divide this value by a thousand if i want to get kilometers to make it a little bit smaller so let's do that divide by a thousand in kilometers i'm also just going to round this just so that we don't get a massive number here so let's just round this to one decimal point put that in kilometers and then we want antialiasing one which is the next argument and then the last argument i believe is the color that i want to draw this in which we can just make i guess it shouldn't be self.color we'll do white okay perfect so that is now the text object created again you have to use a font object to create a text object which then you can render on the screen now i want to draw it on the screen so i'm going to say win dot bullet i'm going to pass the distance text and then the position that i want to draw this at is a little bit complicated uh and also guys sorry i just realized i made a little bit of a mistake here actually no maybe this is okay the way it is when i define xy inside the for loop this might be interfering with this although it didn't seem like it was um so i guess we can just proceed but i don't like having these names shadow each other okay we'll just proceed for now but that's kind of what i was realizing and why i paused there anyways what i'm going to do is draw this at x y and we're referencing this x y here which is going to be the center of the circle now the issue is if i draw this at the center of the circle since i start drawing the text from the top left hand corner you'll see actually let me just run the code and you'll see what happens here when i do this so you'll notice that the actual the text is kind of at the bottom right of the center now that looks really ugly i obviously don't want that to be there so what i'm going to do instead is i'm going to make it so it's drawn directly in the center now to do that i need to take the x i need to subtract this from the distance underscore text dot get underscore width divided by 2. so if i take the width of the text and divide that by 2 and then subtract that from the x that shifts me to the left so i'm exactly in the middle and then same thing with the y so y is distance text i'll get underscore height over 2. okay nice hopefully that is all clear now i'm just going to take all this and we're going to put this below when we're drawing the circle so that it gets drawn on top and we don't have any overlap or we don't have the circle kind of overlapping the text okay so let's close that uh you guys can pause the video if you want to have a look at this let's run the code though and let's see what we get nice okay so now we actually have the uh text being drawn on top and for some of the planets given it is a bit hard to see but that is all working nice so with that said i think i'm going to end this tutorial here this was a lot of stuff to go through i hope you guys appreciated this and all the math and explanations if you did please make sure you leave a like obviously you can extend this as much as you would like you can mess around with the scale you can mess around with the speed you can change the time step this is a really really flexible program and all of the hard physics and math is done so if you want to add more planets you can really easily do that this is a realistic simulation something i haven't done on the channel before and that i hope you guys appreciate all right with that said i am going to end the video again please like the video subscribe to the channel and i will see you in another one you
