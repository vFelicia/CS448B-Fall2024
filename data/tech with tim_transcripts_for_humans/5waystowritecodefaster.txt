With timestamps:

00:00 - so in my opinion one of the worst parts
00:02 - about coding is how time-consuming and
00:04 - mentally exhausting it can be
00:06 - often times you spend entire days
00:08 - multiple hours in a day
00:10 - just trying to find bugs just trying to
00:12 - solve problems and well it's really
00:13 - frustrating when you put a whole day's
00:15 - worth of work into writing some type of
00:16 - code
00:17 - and really have nothing to show for it
00:19 - so in this video
00:20 - i wanted to share with you five tips
00:22 - strategies that you can use to
00:24 - write code faster now what i mean by
00:26 - this is not just typing faster on the
00:29 - keyboard or getting more lines out into
00:31 - the ide
00:32 - i'm really talking about how you can
00:33 - write code in a better way
00:35 - such that you're going to have less bugs
00:37 - and you're just going to be more
00:38 - efficient when you're actually going
00:39 - through the programming and coding
00:41 - process
00:42 - this is something that i really didn't
00:43 - figure out until i got into university
00:45 - and started working my first job
00:47 - and while a lot of these tips and
00:48 - strategies are super simple and they're
00:50 - just things to keep in the back of your
00:51 - mind while you're actually writing your
00:53 - code
00:53 - so with that said let's go ahead and get
00:55 - started and talk about five tips
00:57 - strategies you can use to write code
01:00 - faster
01:03 - [Music]
01:09 - now before we dive in i need to thank
01:10 - yubico for sponsoring this video and
01:12 - talk to you about how you can secure
01:14 - your online accounts
01:15 - using their signature product the ubik
01:17 - key the yubikey is a physical security
01:20 - key that provides the strongest form of
01:21 - two-factor authentication
01:23 - and prevents against common phishing
01:24 - attacks and sms hacks
01:26 - the yubikey is extremely easy to use can
01:28 - secure multiple accounts on a single
01:30 - device
01:31 - is portable watering crush resistant and
01:33 - a cost-effective option
01:35 - to secure your online accounts there are
01:37 - multiple versions of the yubikey and
01:38 - personally i use the yubikey 5c
01:41 - which provides usb-c support the yubikey
01:44 - 5ci which works with my ipad and
01:46 - iphone and the yubikey 5 nfc which has a
01:49 - standard usb
01:50 - interface for my main computer other
01:52 - forms of two-factor
01:54 - authentication are great but nothing can
01:55 - protect you better than a physical
01:57 - device
01:58 - start securing your online accounts
01:59 - today by checking out yubico and their
02:01 - different yuba keys from the link in the
02:03 - description
02:04 - so the first and most important tip on
02:06 - my list is to write a plan before you
02:09 - write any kind of code
02:11 - when i say plan this can be whatever you
02:13 - want it to be it doesn't even have to be
02:14 - written down
02:15 - but the idea here is that you really
02:17 - should think about your project or think
02:18 - about the problem you're solving
02:20 - pretty deeply before you go into the
02:22 - code and start writing anything
02:24 - this is going to save you a lot of lines
02:26 - of code in general it's going to save
02:27 - you a lot of time
02:29 - and it's going to force you to really
02:30 - make sure that the solution you're
02:31 - coming up with is accurate
02:33 - and works for your entire project it's
02:35 - very easy when you jump right into the
02:37 - code immediately without thinking about
02:39 - anything
02:39 - to forget about different aspects or to
02:41 - you know forget a feature that you need
02:43 - to implement or something like that
02:44 - and then all of a sudden be halfway
02:46 - through your project and realize that oh
02:47 - crap
02:48 - what i just wrote is no longer going to
02:50 - work this is not compatible with the
02:52 - other thing that i need to implement
02:54 - where
02:54 - i've made a critical error now i'm going
02:55 - to have to redo this because it just
02:57 - doesn't work the way it needs to
02:59 - this is what a plan helps you avoid and
03:01 - it also just makes it so that
03:03 - when you get into the coding environment
03:04 - you really know exactly what you're
03:06 - doing you don't have to stop and think
03:08 - about all these small little things that
03:10 - should have been thought about
03:11 - beforehand
03:12 - you have a little sheet or you have some
03:14 - steps that you're going to follow along
03:15 - with
03:15 - you just take those steps and you
03:17 - transcribe them into code
03:19 - it's much easier to do these two things
03:21 - separately and not have to come up with
03:23 - a solution
03:24 - while coding it out at the exact same
03:25 - time so hopefully this was persuasive
03:28 - enough to get you to write a little bit
03:29 - of a plan
03:30 - again this does not need to be very
03:32 - detailed what i do for myself is usually
03:34 - just write bullet points of kind of the
03:36 - main things that i need to complete
03:38 - and then maybe within those main things
03:39 - i have some sub problems and that just
03:41 - gives me a good place to start it makes
03:43 - me have a very kind of structured
03:44 - approach to my coding and genuinely
03:46 - saves me a ton
03:48 - of time so my second tip is
03:50 - straightforward i'm going to keep it
03:51 - short
03:52 - this is to keep it simple that is the
03:55 - tip
03:55 - keep it simple whenever you are faced
03:57 - with a decision
03:58 - and you have different routes that you
04:00 - can go down or different paths that you
04:01 - can take
04:02 - almost always is going to be preferred
04:04 - to take this simple approach
04:06 - the reason for this is that the simple
04:08 - approach is easier to understand
04:10 - easier to read and write and easier to
04:12 - debug
04:13 - and that is going to save you a
04:14 - tremendous amount of time
04:16 - if you decide to try to implement
04:18 - something using like the most
04:19 - complicated
04:20 - convoluted way you can think of doing it
04:23 - that is just going to be more difficult
04:24 - to do
04:24 - naturally right it's going to be harder
04:26 - to think about doing that it's going to
04:28 - be
04:28 - much harder to debug especially if
04:30 - something goes wrong you're going to
04:31 - have to try to understand what you were
04:33 - thinking
04:33 - when you went through this approach and
04:35 - if anyone else has to read your code
04:37 - well good luck to them because it's
04:38 - going to take them a tremendous amount
04:40 - of time
04:41 - even yourself let's say a month or even
04:43 - a week in the future you go back and
04:44 - you're looking at this code you wrote
04:46 - all of a sudden you have no idea what's
04:48 - going on and it spends you at least the
04:49 - same amount of time it took to write it
04:51 - to even just
04:51 - understand what is going on in this code
04:55 - so hopefully those are enough of a
04:56 - reason but really it's just much better
04:58 - to do things simple
04:59 - and oftentimes i see this especially
05:01 - with a lot of beginner programmers you
05:03 - know they learn some new tool or they
05:04 - learn some new i don't know like a
05:06 - language feature
05:07 - and they just want to use it they want
05:09 - to show off they want to be like yeah i
05:10 - understand how to use lambdas oh i can
05:12 - write this function that
05:13 - solves this problem in one line of code
05:15 - only look at this
05:16 - that's great that's cool good for you
05:18 - but it doesn't help you
05:19 - at all right it solves the exact same
05:21 - problem it's just much more complicated
05:23 - and if anything it's going to cost you
05:25 - time in the future so hopefully that's
05:27 - enough of the reason but let's move on
05:29 - to
05:29 - tip three so my tip number three to
05:32 - write code
05:33 - faster is simply to use a debugger now
05:36 - there's not really much more i can say
05:37 - about this a debugger is just
05:39 - a superior tool when it comes to finding
05:41 - bugs in your program
05:42 - if you've never used one before i
05:44 - promise you it's not a difficult tool to
05:46 - learn how to use
05:47 - a lot of people for some reason are
05:48 - intimidated by it but what it lets you
05:50 - do is pause the execution of code
05:52 - at any point in time in your program so
05:55 - let's say you want to look at the state
05:57 - of a bunch of variables
05:58 - well you would place a breakpoint right
06:00 - before or right after say a variable
06:02 - gets changed to something
06:03 - and then at that point in time once you
06:05 - hit the breakpoint you can view
06:07 - all of the variables in the current
06:08 - scope you can see all the methods on
06:10 - them you can see what type they are you
06:11 - can see all of the internal information
06:13 - and just anything that you would print
06:15 - out you can see and it's just in a
06:16 - better interface
06:18 - it's better to look at you can then step
06:19 - through code slowly and see how
06:21 - variables are changing
06:22 - it just helps you a ton saves you a ton
06:24 - of time and is really necessary if
06:26 - you're working in a large project
06:28 - so that's my tip number three learn and
06:30 - use a debugger
06:31 - so tip number four to write code faster
06:34 - is to write
06:35 - tests now when i say test this could be
06:37 - anything that you could imagine this
06:39 - could be a unit test a functional test
06:41 - this could be a full test suite of a
06:43 - bunch of different things
06:44 - you can go as crazy as you want with
06:46 - tests but just writing
06:48 - really basic tests that will test out
06:50 - things that you
06:51 - manually are going through constantly
06:53 - will save you a ton of time
06:55 - and usually i'm very guilty of this i
06:57 - get stubborn i really don't want to
06:59 - write the test
06:59 - and then i end up manually testing the
07:02 - exact same thing
07:03 - like 20 30 40 times until eventually it
07:06 - starts working
07:07 - whereas what i could have done is spent
07:08 - two minutes write a really basic test
07:10 - script
07:11 - and then just ran that script whenever i
07:12 - wanted to see the output it would tell
07:14 - me hey
07:15 - your test passed hey your test failed
07:17 - and then i could continually use that
07:18 - test throughout the entire project
07:20 - to make sure i didn't break something
07:22 - that i wrote previously
07:24 - so tests are super valuable they are
07:26 - your friends yes they are a pain to
07:28 - write
07:28 - but really they're definitely worth it
07:30 - and if you find yourself spending more
07:32 - than a few minutes testing out something
07:34 - manually
07:34 - it's probably a good idea to just bite
07:36 - the bullet and write
07:37 - a damn test for it so my tip number five
07:41 - may seem counterintuitive but i promise
07:43 - it is not and this is
07:44 - to take frequent breaks now this is
07:47 - fairly well known in the programming
07:49 - community and there's a lot of jokes
07:50 - about this you know you see the jokes of
07:52 - like programmers solve a lot of their
07:53 - problems on the toilet things like that
07:55 - but it honestly could not be more true i
07:57 - cannot tell you
07:58 - how many times i've been looking at a
08:00 - bug for you know hours at a time
08:02 - i get up i walk around i go talk to my
08:04 - friends something like that then all of
08:05 - a sudden i just have this kind of you
08:06 - know epiphany or light bulb in my head
08:09 - and i've just solved the problem out of
08:11 - nowhere i have no idea how it came to me
08:12 - but as soon as i got up from that screen
08:14 - walked around had the blood pumping i
08:16 - was able to fix the problem
08:18 - or even other times where maybe i don't
08:20 - fix it in that small break
08:22 - i come back to the computer i look at
08:24 - the screen and within two minutes i'm
08:26 - like oh
08:26 - this was a stupid issue this is where
08:28 - the bug is it was just something that i
08:29 - never would have thought to look at
08:31 - i was so kind of dived into my
08:33 - perspective i was you know have this
08:34 - tunnel vision on where i thought the
08:36 - problem was
08:37 - and it wasn't until i took kind of a
08:38 - step back took a small break and came
08:40 - back to the computer
08:41 - that i was able to solve that problem so
08:44 - especially
08:45 - if you're stuck on a bug if you're
08:46 - really frustrated take a break relax
08:48 - and come back to it that's going to be a
08:50 - lot more productive than just sitting
08:51 - there banging your head on the table and
08:53 - trying to find
08:54 - where it is so with that said i hope you
08:56 - all enjoyed the video and just one last
08:58 - quick word
08:58 - from our sponsor now one last thank you
09:00 - to yubico for sponsoring this video and
09:02 - a reminder that physical security keys
09:04 - are the best way to protect yourself
09:06 - online
09:07 - and are far superior to sms
09:09 - authentication check out yubico's
09:11 - different yuba keys and start securing
09:12 - your online accounts today by heading to
09:14 - the link
09:15 - in the description
09:24 - you

Cleaned transcript:

so in my opinion one of the worst parts about coding is how timeconsuming and mentally exhausting it can be often times you spend entire days multiple hours in a day just trying to find bugs just trying to solve problems and well it's really frustrating when you put a whole day's worth of work into writing some type of code and really have nothing to show for it so in this video i wanted to share with you five tips strategies that you can use to write code faster now what i mean by this is not just typing faster on the keyboard or getting more lines out into the ide i'm really talking about how you can write code in a better way such that you're going to have less bugs and you're just going to be more efficient when you're actually going through the programming and coding process this is something that i really didn't figure out until i got into university and started working my first job and while a lot of these tips and strategies are super simple and they're just things to keep in the back of your mind while you're actually writing your code so with that said let's go ahead and get started and talk about five tips strategies you can use to write code faster now before we dive in i need to thank yubico for sponsoring this video and talk to you about how you can secure your online accounts using their signature product the ubik key the yubikey is a physical security key that provides the strongest form of twofactor authentication and prevents against common phishing attacks and sms hacks the yubikey is extremely easy to use can secure multiple accounts on a single device is portable watering crush resistant and a costeffective option to secure your online accounts there are multiple versions of the yubikey and personally i use the yubikey 5c which provides usbc support the yubikey 5ci which works with my ipad and iphone and the yubikey 5 nfc which has a standard usb interface for my main computer other forms of twofactor authentication are great but nothing can protect you better than a physical device start securing your online accounts today by checking out yubico and their different yuba keys from the link in the description so the first and most important tip on my list is to write a plan before you write any kind of code when i say plan this can be whatever you want it to be it doesn't even have to be written down but the idea here is that you really should think about your project or think about the problem you're solving pretty deeply before you go into the code and start writing anything this is going to save you a lot of lines of code in general it's going to save you a lot of time and it's going to force you to really make sure that the solution you're coming up with is accurate and works for your entire project it's very easy when you jump right into the code immediately without thinking about anything to forget about different aspects or to you know forget a feature that you need to implement or something like that and then all of a sudden be halfway through your project and realize that oh crap what i just wrote is no longer going to work this is not compatible with the other thing that i need to implement where i've made a critical error now i'm going to have to redo this because it just doesn't work the way it needs to this is what a plan helps you avoid and it also just makes it so that when you get into the coding environment you really know exactly what you're doing you don't have to stop and think about all these small little things that should have been thought about beforehand you have a little sheet or you have some steps that you're going to follow along with you just take those steps and you transcribe them into code it's much easier to do these two things separately and not have to come up with a solution while coding it out at the exact same time so hopefully this was persuasive enough to get you to write a little bit of a plan again this does not need to be very detailed what i do for myself is usually just write bullet points of kind of the main things that i need to complete and then maybe within those main things i have some sub problems and that just gives me a good place to start it makes me have a very kind of structured approach to my coding and genuinely saves me a ton of time so my second tip is straightforward i'm going to keep it short this is to keep it simple that is the tip keep it simple whenever you are faced with a decision and you have different routes that you can go down or different paths that you can take almost always is going to be preferred to take this simple approach the reason for this is that the simple approach is easier to understand easier to read and write and easier to debug and that is going to save you a tremendous amount of time if you decide to try to implement something using like the most complicated convoluted way you can think of doing it that is just going to be more difficult to do naturally right it's going to be harder to think about doing that it's going to be much harder to debug especially if something goes wrong you're going to have to try to understand what you were thinking when you went through this approach and if anyone else has to read your code well good luck to them because it's going to take them a tremendous amount of time even yourself let's say a month or even a week in the future you go back and you're looking at this code you wrote all of a sudden you have no idea what's going on and it spends you at least the same amount of time it took to write it to even just understand what is going on in this code so hopefully those are enough of a reason but really it's just much better to do things simple and oftentimes i see this especially with a lot of beginner programmers you know they learn some new tool or they learn some new i don't know like a language feature and they just want to use it they want to show off they want to be like yeah i understand how to use lambdas oh i can write this function that solves this problem in one line of code only look at this that's great that's cool good for you but it doesn't help you at all right it solves the exact same problem it's just much more complicated and if anything it's going to cost you time in the future so hopefully that's enough of the reason but let's move on to tip three so my tip number three to write code faster is simply to use a debugger now there's not really much more i can say about this a debugger is just a superior tool when it comes to finding bugs in your program if you've never used one before i promise you it's not a difficult tool to learn how to use a lot of people for some reason are intimidated by it but what it lets you do is pause the execution of code at any point in time in your program so let's say you want to look at the state of a bunch of variables well you would place a breakpoint right before or right after say a variable gets changed to something and then at that point in time once you hit the breakpoint you can view all of the variables in the current scope you can see all the methods on them you can see what type they are you can see all of the internal information and just anything that you would print out you can see and it's just in a better interface it's better to look at you can then step through code slowly and see how variables are changing it just helps you a ton saves you a ton of time and is really necessary if you're working in a large project so that's my tip number three learn and use a debugger so tip number four to write code faster is to write tests now when i say test this could be anything that you could imagine this could be a unit test a functional test this could be a full test suite of a bunch of different things you can go as crazy as you want with tests but just writing really basic tests that will test out things that you manually are going through constantly will save you a ton of time and usually i'm very guilty of this i get stubborn i really don't want to write the test and then i end up manually testing the exact same thing like 20 30 40 times until eventually it starts working whereas what i could have done is spent two minutes write a really basic test script and then just ran that script whenever i wanted to see the output it would tell me hey your test passed hey your test failed and then i could continually use that test throughout the entire project to make sure i didn't break something that i wrote previously so tests are super valuable they are your friends yes they are a pain to write but really they're definitely worth it and if you find yourself spending more than a few minutes testing out something manually it's probably a good idea to just bite the bullet and write a damn test for it so my tip number five may seem counterintuitive but i promise it is not and this is to take frequent breaks now this is fairly well known in the programming community and there's a lot of jokes about this you know you see the jokes of like programmers solve a lot of their problems on the toilet things like that but it honestly could not be more true i cannot tell you how many times i've been looking at a bug for you know hours at a time i get up i walk around i go talk to my friends something like that then all of a sudden i just have this kind of you know epiphany or light bulb in my head and i've just solved the problem out of nowhere i have no idea how it came to me but as soon as i got up from that screen walked around had the blood pumping i was able to fix the problem or even other times where maybe i don't fix it in that small break i come back to the computer i look at the screen and within two minutes i'm like oh this was a stupid issue this is where the bug is it was just something that i never would have thought to look at i was so kind of dived into my perspective i was you know have this tunnel vision on where i thought the problem was and it wasn't until i took kind of a step back took a small break and came back to the computer that i was able to solve that problem so especially if you're stuck on a bug if you're really frustrated take a break relax and come back to it that's going to be a lot more productive than just sitting there banging your head on the table and trying to find where it is so with that said i hope you all enjoyed the video and just one last quick word from our sponsor now one last thank you to yubico for sponsoring this video and a reminder that physical security keys are the best way to protect yourself online and are far superior to sms authentication check out yubico's different yuba keys and start securing your online accounts today by heading to the link in the description you
