With timestamps:

00:00 - how do you practice programming so that
00:01 - you actually get good this video is
00:04 - going to give you a detailed guide on
00:06 - exactly what you need to focus on and
00:08 - resources you can use to improve your
00:10 - programming skills quickly it's great to
00:13 - follow along with courses or tutorials
00:15 - online but a lot of people get stuck in
00:17 - what I like to call tutorial hell that's
00:20 - because they don't know what to focus on
00:21 - and how to effectively practice and this
00:23 - video is going to help you escape that
00:25 - horrible place so with that said let's
00:28 - get into it let's begin with a few
00:30 - different goals that you should keep in
00:31 - mind when you are practicing your
00:33 - programming skills now the first thing
00:35 - you'll want to focus on is really
00:36 - mastering the synta tacts of a language
00:39 - once you get that down you're going to
00:40 - want to develop a bit of pattern
00:42 - recognition which means you've seen a
00:44 - lot of basic problems and you
00:45 - immediately know the way in which you
00:47 - should go about solving them after that
00:49 - you really want to focus on
00:51 - understanding the various tools you have
00:52 - available to you to solve different
00:54 - problems and then you're going to move
00:55 - into more advanced problem solving
00:57 - techniques so again syntax pattern
01:00 - recognition the tools that you have
01:02 - available to you and then really how to
01:04 - solve problems and the different
01:05 - approaches you can use to do that I'm
01:07 - going to talk about all of these more in
01:08 - depth in this video but those are the
01:10 - four different Milestones you're going
01:12 - to have and keep those in mind when
01:13 - you're practicing your programming
01:15 - skills if you get good at all of those
01:17 - different things you're quickly going to
01:18 - see your programming skills improve and
01:20 - you'll be able to solve a lot more
01:21 - complicated problems than you can right
01:23 - now with that said let's dive into
01:25 - syntax and talk about how to master that
01:28 - and what resources you can use to
01:29 - practice so when I talk about syntax
01:31 - what I'm really referring to here is
01:33 - getting really comfortable with the way
01:35 - in which you write code in a language so
01:37 - you don't need to constantly look up
01:39 - some of the more basic features a lot of
01:41 - beginners really struggle because they
01:42 - find it difficult to memorize the syntax
01:45 - of a language and they constantly need
01:46 - to go and look up how to use a for Loop
01:48 - or an if statement or a variable or
01:50 - whatever the feature may be now it's
01:52 - fine to go and reference resources but
01:54 - you want to get to a point where you do
01:56 - have these basic concepts memorized or
01:58 - at least you can use them very quick Qui
02:00 - L and you just need to do a really fast
02:01 - search to figure out what you need once
02:03 - you get to that point you'll see that
02:05 - it's a lot easier to move and solve more
02:07 - advanced problems and to progress as a
02:09 - programmer but if you never get to that
02:11 - stage you're constantly going to be
02:12 - stuck searching things looking them up
02:14 - and you're going to find it really
02:16 - difficult to advance so with that in
02:17 - mind how do you master the syntax of a
02:19 - language and how do you start memorizing
02:21 - those more basic concepts things like
02:23 - for Loops while Loops if statements
02:25 - variables Etc that you really just have
02:27 - them in the back of your head and you
02:28 - don't need to keep referencing material
02:30 - well the answer here is to really just
02:32 - put a ton of volume into your practice
02:34 - especially when you're just starting out
02:36 - now I understand it's really
02:37 - overwhelming to go and start solving
02:39 - problems immediately when you're just
02:41 - learning how to code so what I recommend
02:43 - is you start with the smallest problems
02:44 - you possibly can and you do things like
02:47 - multiple choice questions where the
02:48 - syntax is shown to you and you're
02:50 - selecting what the correct syntax is
02:53 - this way you don't need to memorize
02:54 - everything and be able to write it
02:55 - completely on your own but you can start
02:57 - to get really familiar with what certain
02:59 - code looks like and what the correct way
03:01 - of writing something is now that's right
03:04 - when you're starting out you want to be
03:05 - doing all kinds of multiple choice
03:07 - questions checking for understanding and
03:09 - making sure that again you get really
03:10 - comfortable reading code and seeing it
03:13 - and then you want to start moving into
03:14 - really really basic problems what I mean
03:16 - by basic problems is things that might
03:18 - take you a minute to solve or two
03:19 - minutes to solve where you're not
03:21 - writing tens or hundreds of lines of
03:23 - code maybe you're writing three lines of
03:24 - code or four lines of code again you
03:26 - want to start really really basic and
03:29 - work your way up now you may be asking
03:30 - yourself where do I get these type of
03:32 - problems how do I find them well there
03:34 - is all kinds of resources online and I'm
03:36 - going to share with you a few free ones
03:37 - here that are really really good that
03:39 - have these various types of exercises so
03:41 - on my list here I have free code Camp Le
03:44 - code code academy hacker Rank and Geeks
03:47 - for geeks now there's all kinds of other
03:49 - resources online and if you go through a
03:51 - really good course A lot of times
03:52 - they'll have these type of questions for
03:54 - example my course with course careers
03:56 - has multiple choice questions for pretty
03:58 - much every single lesson but regard list
04:00 - on these sites that I listed you'll get
04:01 - all types of different exercises at
04:03 - varying different difficulties now if
04:05 - you're looking at something like hacker
04:07 - rank or leak code there'll be a lot of
04:09 - really Advanced problems what I
04:10 - recommend is just stick with the easy or
04:13 - super easy problems that they have
04:14 - listed there these are good exercises
04:16 - when you're just getting started out and
04:18 - usually they only require a few lines of
04:20 - code to solve the problem and they also
04:22 - have an official solution so if you are
04:24 - stuck you can go reference and see
04:25 - exactly what they did to solve it and
04:27 - the type of syntax that they used now
04:29 - just as a note here when you do start to
04:31 - get better at programming what you're
04:33 - really going to realize is that each
04:34 - programming language is really just a
04:36 - tool that helps you to solve problems
04:39 - and within each language we have
04:40 - Frameworks libraries modules apis you
04:43 - name it which you can utilize to make
04:45 - some kind of project or again solve an
04:47 - overall problem now a really notable
04:49 - tool that you can take advantage of is
04:59 - Finance by providing Fair access to
05:01 - financial markets via modern apis for
05:04 - everyone not just the big players on
05:06 - Wall Street whether you're looking for
05:08 - stocks indices options Forex or crypto
05:11 - Market data
05:15 - polygon.com trading routines back
05:18 - testing data science apps or fully
05:20 - featured Financial displays they provide
05:23 - restful and websocket apis as well as
05:25 - entire sdks for popular programming
05:27 - languages like python go and JavaScript
05:30 - so that you can Access Financial Market
05:32 - data easily now the best part of polygon
05:34 - is that it doesn't use a middleman and
05:36 - it's actually connected directly to the
05:38 - exchanges this means you can rely on it
05:40 - for the most accurate and upto-date
05:42 - information polygon is completely
05:44 - democratizing access to this valuable
05:46 - financial data and allowing all of us to
05:48 - access it like we never could before you
05:51 - can get started for free from the link
05:53 - below and they provide great easy to
05:55 - follow along with tutorials and code
05:57 - samples to get you going and when you're
05:59 - ready to upgrade your plan you can use
06:01 - the code Tech with Tim 20 for 20% off
06:04 - any individual paid subscriptions so now
06:06 - that you've mastered the syntax it's
06:08 - time to start developing that pattern
06:10 - recognition and the only way to do that
06:12 - is by working on a ton of different
06:14 - problems now it's great to go through
06:16 - tutorials and to watch other people code
06:18 - you can learn a lot of valuable
06:19 - information but you need to spend most
06:21 - of your time practicing especially at
06:23 - this stage in attempting different
06:25 - problems and actually writing code the
06:27 - only way to learn and the only way to
06:29 - get good is to have your hand on the
06:31 - keyboard and to have that for hundreds
06:33 - upon hundreds of hours that's how anyone
06:35 - who's good at programming gets good is
06:37 - by actually writing code so I want to
06:39 - place a really strong emphasis on
06:41 - finding as many practice problems as you
06:43 - possibly can starting with the super
06:45 - easy basic ones and then slowly working
06:48 - your way up what's going to end up
06:49 - happening when you do hundreds upon
06:51 - hundreds of problems is you're going to
06:53 - start to get really familiar with the
06:54 - types of problems you're given and
06:56 - immediately have an idea of how to solve
06:58 - them this will mean that a problem that
07:00 - maybe took you 20 or 30 minutes to solve
07:02 - when you were just starting out you can
07:03 - do in 2 or 3 minutes because you already
07:05 - have a really clear idea of the type of
07:07 - solution to implement you still need to
07:09 - think you may still need to plan out the
07:11 - solution but you already know that
07:12 - you're immediately going to go with a
07:13 - for Loop and this is the type of way
07:15 - that you should write it once you
07:17 - develop that skill you'll start to get a
07:18 - lot more confident as a programmer and
07:20 - again you can move and work on more
07:22 - advanced projects and problems now how
07:25 - do you actually develop this skill as I
07:27 - said you need to do a ton of different
07:28 - problems and you can get those problems
07:30 - from the sites that I listed above
07:32 - another tip you can use is to utilize
07:34 - chat GPT to ask you specific problems
07:37 - and areas that you want to work on now I
07:39 - recommend focusing on functions storage
07:42 - and looping looping is probably the most
07:44 - important skill here because almost
07:46 - everything you do in programming
07:47 - involves some kind of iterations and
07:49 - it's a skill that a lot of people
07:50 - struggle with but then understanding how
07:52 - to separate your code into functions how
07:54 - to return values how to pass values to
07:57 - functions and then data storage what
07:59 - data structures should you use how do
08:01 - you access data how do you store it if
08:03 - you can get those main Concepts down
08:05 - you're going to have a really strong
08:07 - foundation and start to get good very
08:09 - quickly so once we're really comfortable
08:11 - writing code we know all the basics
08:13 - we've solved some easy and medium
08:14 - problems and they're becoming a lot
08:16 - simpler for us what we want to start
08:17 - doing is moving into more advanced
08:19 - features in a language and understanding
08:21 - all of the tools available to us to
08:23 - solve various problems now this is going
08:25 - to differ depending on the language that
08:27 - you're working in but if we take python
08:29 - for for example this is where you would
08:30 - want to start learning about something
08:32 - like objectoriented programming maybe
08:34 - you're going to learn about decorators
08:35 - generators more advanced features and
08:38 - all of the different tools you have at
08:39 - your disposal to solve various problems
08:42 - I'm going to walk you through how to
08:43 - learn these more advanced topics because
08:45 - it will be a little bit more challenging
08:47 - than some of the more basic concepts
08:49 - where it's more defined on how to
08:50 - practice them and how to actually
08:52 - Implement them so what I always like to
08:54 - do when I'm trying to learn a more
08:55 - advanced topic is start by just
08:57 - understanding a bit about it now this
08:59 - this will be me going to YouTube and
09:01 - watching maybe a 15minute tutorial or
09:03 - something from a credible expert where I
09:05 - can get a decent understanding of what
09:07 - this topic is or what the feature is but
09:09 - I know I'm not going to fully understand
09:11 - it yet I want to just understand a bit I
09:13 - want to get a little bit information on
09:15 - it and that'll give me enough guidance
09:16 - that I can then go and work on something
09:18 - more concrete and implement it on my own
09:21 - now what I'll typically do after I watch
09:23 - more of a theoretical video is I'll try
09:25 - to immediately wrap this into some kind
09:27 - of project I really like project based
09:29 - learning and this is typically how I do
09:31 - it or how I used to do it when I was
09:32 - just starting out I would find a really
09:34 - good project on YouTube that's taught by
09:36 - someone who's walking through it step by
09:38 - step rather than watching them code out
09:40 - the entire project I would pause the
09:42 - video at various points and try to solve
09:45 - small parts of the project on my own
09:47 - whether I fail or succeed at solving
09:49 - that I'm then going to watch the
09:50 - instructor go through and attempt it and
09:52 - I'm going to compare my solution to
09:54 - theirs this way I'm not just looking at
09:56 - what they're doing and copying it in my
09:58 - editor I'm thinking critically they're
10:00 - giving me a bit of help and tips on how
10:01 - to solve it but I am doing it by myself
10:04 - and then immediately getting feedback on
10:06 - that and seeing how I could do it
10:07 - differently compared to them you learn a
10:10 - lot this way and going through a project
10:11 - on YouTube maybe it's 45 minutes long it
10:13 - might take you one or two hours to
10:15 - actually get through that because you're
10:16 - pausing attempting going through it's
10:19 - kind of a whole day thing at least for
10:20 - me when I would work on those projects
10:22 - and gives me a bunch of small problems
10:24 - to practice that will eventually build
10:25 - this larger project after you do a few
10:28 - of those you'll start to really get a
10:29 - sense of how to build larger scale
10:31 - projects how to implement more of these
10:33 - Advanced features and then what you can
10:35 - start doing is looking at projects Maybe
10:38 - on YouTube or on any kind of site
10:39 - attempting them completely by yourself
10:42 - and then again referencing what someone
10:43 - who's more experienced has done
10:45 - eventually you'll get to the point where
10:47 - you just want to try your own projects
10:48 - where it's not actually something
10:50 - defined and that's where we'll move into
10:51 - the next section overall in this section
10:53 - though what you're really focusing on is
10:55 - being able to take a more abstract
10:57 - concept something that's theoretical and
10:59 - then bring that into a project it can be
11:01 - really difficult to do that when you're
11:02 - just starting out that's why I like to
11:04 - look at some kind of theory and then
11:05 - find some kind of project that fits that
11:08 - difficulty level that implements a
11:09 - feature like that that way I'm able to
11:12 - learn the theory implement it see how
11:14 - someone else is implemented it get that
11:16 - feedback and correct myself and then
11:18 - keep going and keep getting more and
11:19 - more in advance until I'm really
11:21 - comfortable with those new Advanced
11:23 - features another thing you can do here
11:24 - if you're willing to search through a
11:26 - few different code bases is actually go
11:28 - and read open source repositories if you
11:30 - want you can go look at open source
11:32 - python repository JavaScript whatever
11:34 - the language is just read through some
11:36 - of the code and see how people have done
11:37 - things and even though it'll be pretty
11:39 - complicated you'll be able to learn a
11:41 - lot just by reading other people's code
11:43 - so overall that's how I would practice
11:45 - these more advanced features again I
11:47 - know it's easier said than done but I'm
11:48 - trying to give you some ideas on ways
11:50 - that you can make things more
11:51 - challenging for yourself rather than
11:53 - just watching through something like a
11:55 - tutorial project you want to actually do
11:57 - it and make sure you're constantly
11:58 - thinking and and challenging yourself so
12:00 - now we reached the point where most
12:02 - likely you understand the syntax you
12:03 - know how to solve basic problems and you
12:05 - even understand some of the more
12:06 - advanced features and the tools that are
12:09 - available to you what you really need to
12:10 - get good at next is just figuring things
12:13 - out getting really good at problem
12:15 - solving and building the confidence to
12:17 - know that no matter what problem you're
12:18 - presented with you can solve it it's
12:20 - just a matter of how and how long it's
12:22 - going to take you the best programmers
12:25 - in the world are not necessarily just
12:27 - experts in a specific framework or
12:29 - language they're people that are really
12:30 - good at figuring things out they have
12:33 - that perseverance they know how to
12:35 - problem solve and they know how to break
12:36 - down a really daunting task into smaller
12:39 - subtasks they can tackle one at a time
12:41 - that's what you need to get good at here
12:43 - understanding how to take a big problem
12:45 - split it into smaller problems and then
12:47 - going out of your way to use the
12:49 - resources available to you to solve each
12:51 - of those problems figuring something out
12:53 - that you've never done before building a
12:55 - project that seemed impossible those are
12:57 - the type of Milestones you need to reach
12:59 - to really get good as a developer so how
13:01 - do you start mastering this skill well
13:03 - really the only thing that's important
13:05 - is that you work on something on your
13:07 - own and you struggle through working on
13:09 - it it's important that you have bugs
13:11 - that take you days to solve you have
13:13 - problems that seem impossible but
13:15 - eventually you persevere and you solve
13:17 - them the moments when I've learned the
13:19 - most and built my most confidence as a
13:21 - programmer is when I've had some
13:23 - challenge that seemed so incredibly
13:25 - difficult that I had no idea how to
13:26 - solve or some bug that took me hours or
13:29 - days to get through and eventually I
13:31 - found the solution those are the moments
13:33 - that you need to really get good as a
13:35 - programmer so how do you find those
13:37 - moments well I recommend starting by
13:39 - trying to clone existing applications
13:41 - that you've used before could be simple
13:43 - ones could be complicated ones doesn't
13:44 - matter pick something that you use every
13:46 - single day and see if you can build
13:48 - exactly that or something that's a small
13:50 - version of that that way you at least
13:52 - have all of the requirements you know
13:54 - what it should look like you know how it
13:55 - should work what it should feel like and
13:57 - you can try to figure out those small
13:58 - problems in terms of how to actually
14:00 - build the project once you've done that
14:03 - I recommend trying to build something
14:04 - completely from scratch that you've
14:06 - never seen or done before pick some kind
14:08 - of problem you have in your everyday
14:09 - life or something that would just be
14:11 - interesting to you or that you want to
14:12 - show to your friends or maybe other
14:14 - people you know would use this way you
14:16 - can now start by actually defining what
14:18 - it is you want to build you can create a
14:20 - full step plan say these are the various
14:22 - features I have this is how I want it to
14:23 - function which is another skill you
14:25 - should have as a programmer and then you
14:27 - can go and build the entire project
14:29 - you're going to struggle through this
14:30 - it's going to be really difficult
14:31 - there's going to be a lot of things you
14:32 - didn't consider and you're going to have
14:34 - to change the way you code things and go
14:36 - back and recode that's all part of the
14:38 - process you need to struggle it needs to
14:40 - be really difficult and it needs to take
14:41 - you a lot longer than you expected to
14:43 - solve these various problems really all
14:46 - that you need to do to be a really good
14:47 - programmer is persevere and figure
14:50 - things out and the only way you can get
14:51 - good at doing that is just by constantly
14:53 - doing it it's going to be really
14:55 - challenging at the beginning but as you
14:57 - do this more and more and more and more
14:59 - you're going to start to develop that
15:00 - skill which again you can only learn
15:02 - from doing I wish I could give you more
15:04 - practical advice but you need to do as
15:05 - many projects as many problems and have
15:08 - as many challenges as possible to really
15:10 - get good I can say firsthand the only
15:12 - reason I got good at programming is just
15:14 - because I did it so much I struggled
15:17 - with it it was so difficult it took me
15:18 - so long to build even the most basic
15:20 - things but then I started to develop
15:22 - that confidence and just get better and
15:24 - better and better you need to put the
15:25 - volume in you need to put the work in
15:27 - and this is the section where you do do
15:29 - that until you really really get good so
15:31 - with that said I'm going to wrap up the
15:32 - video here if you enjoyed leave a like
15:34 - subscribe to the channel and I will see
15:36 - you in the next one
15:39 - [Music]

Cleaned transcript:

how do you practice programming so that you actually get good this video is going to give you a detailed guide on exactly what you need to focus on and resources you can use to improve your programming skills quickly it's great to follow along with courses or tutorials online but a lot of people get stuck in what I like to call tutorial hell that's because they don't know what to focus on and how to effectively practice and this video is going to help you escape that horrible place so with that said let's get into it let's begin with a few different goals that you should keep in mind when you are practicing your programming skills now the first thing you'll want to focus on is really mastering the synta tacts of a language once you get that down you're going to want to develop a bit of pattern recognition which means you've seen a lot of basic problems and you immediately know the way in which you should go about solving them after that you really want to focus on understanding the various tools you have available to you to solve different problems and then you're going to move into more advanced problem solving techniques so again syntax pattern recognition the tools that you have available to you and then really how to solve problems and the different approaches you can use to do that I'm going to talk about all of these more in depth in this video but those are the four different Milestones you're going to have and keep those in mind when you're practicing your programming skills if you get good at all of those different things you're quickly going to see your programming skills improve and you'll be able to solve a lot more complicated problems than you can right now with that said let's dive into syntax and talk about how to master that and what resources you can use to practice so when I talk about syntax what I'm really referring to here is getting really comfortable with the way in which you write code in a language so you don't need to constantly look up some of the more basic features a lot of beginners really struggle because they find it difficult to memorize the syntax of a language and they constantly need to go and look up how to use a for Loop or an if statement or a variable or whatever the feature may be now it's fine to go and reference resources but you want to get to a point where you do have these basic concepts memorized or at least you can use them very quick Qui L and you just need to do a really fast search to figure out what you need once you get to that point you'll see that it's a lot easier to move and solve more advanced problems and to progress as a programmer but if you never get to that stage you're constantly going to be stuck searching things looking them up and you're going to find it really difficult to advance so with that in mind how do you master the syntax of a language and how do you start memorizing those more basic concepts things like for Loops while Loops if statements variables Etc that you really just have them in the back of your head and you don't need to keep referencing material well the answer here is to really just put a ton of volume into your practice especially when you're just starting out now I understand it's really overwhelming to go and start solving problems immediately when you're just learning how to code so what I recommend is you start with the smallest problems you possibly can and you do things like multiple choice questions where the syntax is shown to you and you're selecting what the correct syntax is this way you don't need to memorize everything and be able to write it completely on your own but you can start to get really familiar with what certain code looks like and what the correct way of writing something is now that's right when you're starting out you want to be doing all kinds of multiple choice questions checking for understanding and making sure that again you get really comfortable reading code and seeing it and then you want to start moving into really really basic problems what I mean by basic problems is things that might take you a minute to solve or two minutes to solve where you're not writing tens or hundreds of lines of code maybe you're writing three lines of code or four lines of code again you want to start really really basic and work your way up now you may be asking yourself where do I get these type of problems how do I find them well there is all kinds of resources online and I'm going to share with you a few free ones here that are really really good that have these various types of exercises so on my list here I have free code Camp Le code code academy hacker Rank and Geeks for geeks now there's all kinds of other resources online and if you go through a really good course A lot of times they'll have these type of questions for example my course with course careers has multiple choice questions for pretty much every single lesson but regard list on these sites that I listed you'll get all types of different exercises at varying different difficulties now if you're looking at something like hacker rank or leak code there'll be a lot of really Advanced problems what I recommend is just stick with the easy or super easy problems that they have listed there these are good exercises when you're just getting started out and usually they only require a few lines of code to solve the problem and they also have an official solution so if you are stuck you can go reference and see exactly what they did to solve it and the type of syntax that they used now just as a note here when you do start to get better at programming what you're really going to realize is that each programming language is really just a tool that helps you to solve problems and within each language we have Frameworks libraries modules apis you name it which you can utilize to make some kind of project or again solve an overall problem now a really notable tool that you can take advantage of is Finance by providing Fair access to financial markets via modern apis for everyone not just the big players on Wall Street whether you're looking for stocks indices options Forex or crypto Market data polygon.com trading routines back testing data science apps or fully featured Financial displays they provide restful and websocket apis as well as entire sdks for popular programming languages like python go and JavaScript so that you can Access Financial Market data easily now the best part of polygon is that it doesn't use a middleman and it's actually connected directly to the exchanges this means you can rely on it for the most accurate and uptodate information polygon is completely democratizing access to this valuable financial data and allowing all of us to access it like we never could before you can get started for free from the link below and they provide great easy to follow along with tutorials and code samples to get you going and when you're ready to upgrade your plan you can use the code Tech with Tim 20 for 20% off any individual paid subscriptions so now that you've mastered the syntax it's time to start developing that pattern recognition and the only way to do that is by working on a ton of different problems now it's great to go through tutorials and to watch other people code you can learn a lot of valuable information but you need to spend most of your time practicing especially at this stage in attempting different problems and actually writing code the only way to learn and the only way to get good is to have your hand on the keyboard and to have that for hundreds upon hundreds of hours that's how anyone who's good at programming gets good is by actually writing code so I want to place a really strong emphasis on finding as many practice problems as you possibly can starting with the super easy basic ones and then slowly working your way up what's going to end up happening when you do hundreds upon hundreds of problems is you're going to start to get really familiar with the types of problems you're given and immediately have an idea of how to solve them this will mean that a problem that maybe took you 20 or 30 minutes to solve when you were just starting out you can do in 2 or 3 minutes because you already have a really clear idea of the type of solution to implement you still need to think you may still need to plan out the solution but you already know that you're immediately going to go with a for Loop and this is the type of way that you should write it once you develop that skill you'll start to get a lot more confident as a programmer and again you can move and work on more advanced projects and problems now how do you actually develop this skill as I said you need to do a ton of different problems and you can get those problems from the sites that I listed above another tip you can use is to utilize chat GPT to ask you specific problems and areas that you want to work on now I recommend focusing on functions storage and looping looping is probably the most important skill here because almost everything you do in programming involves some kind of iterations and it's a skill that a lot of people struggle with but then understanding how to separate your code into functions how to return values how to pass values to functions and then data storage what data structures should you use how do you access data how do you store it if you can get those main Concepts down you're going to have a really strong foundation and start to get good very quickly so once we're really comfortable writing code we know all the basics we've solved some easy and medium problems and they're becoming a lot simpler for us what we want to start doing is moving into more advanced features in a language and understanding all of the tools available to us to solve various problems now this is going to differ depending on the language that you're working in but if we take python for for example this is where you would want to start learning about something like objectoriented programming maybe you're going to learn about decorators generators more advanced features and all of the different tools you have at your disposal to solve various problems I'm going to walk you through how to learn these more advanced topics because it will be a little bit more challenging than some of the more basic concepts where it's more defined on how to practice them and how to actually Implement them so what I always like to do when I'm trying to learn a more advanced topic is start by just understanding a bit about it now this this will be me going to YouTube and watching maybe a 15minute tutorial or something from a credible expert where I can get a decent understanding of what this topic is or what the feature is but I know I'm not going to fully understand it yet I want to just understand a bit I want to get a little bit information on it and that'll give me enough guidance that I can then go and work on something more concrete and implement it on my own now what I'll typically do after I watch more of a theoretical video is I'll try to immediately wrap this into some kind of project I really like project based learning and this is typically how I do it or how I used to do it when I was just starting out I would find a really good project on YouTube that's taught by someone who's walking through it step by step rather than watching them code out the entire project I would pause the video at various points and try to solve small parts of the project on my own whether I fail or succeed at solving that I'm then going to watch the instructor go through and attempt it and I'm going to compare my solution to theirs this way I'm not just looking at what they're doing and copying it in my editor I'm thinking critically they're giving me a bit of help and tips on how to solve it but I am doing it by myself and then immediately getting feedback on that and seeing how I could do it differently compared to them you learn a lot this way and going through a project on YouTube maybe it's 45 minutes long it might take you one or two hours to actually get through that because you're pausing attempting going through it's kind of a whole day thing at least for me when I would work on those projects and gives me a bunch of small problems to practice that will eventually build this larger project after you do a few of those you'll start to really get a sense of how to build larger scale projects how to implement more of these Advanced features and then what you can start doing is looking at projects Maybe on YouTube or on any kind of site attempting them completely by yourself and then again referencing what someone who's more experienced has done eventually you'll get to the point where you just want to try your own projects where it's not actually something defined and that's where we'll move into the next section overall in this section though what you're really focusing on is being able to take a more abstract concept something that's theoretical and then bring that into a project it can be really difficult to do that when you're just starting out that's why I like to look at some kind of theory and then find some kind of project that fits that difficulty level that implements a feature like that that way I'm able to learn the theory implement it see how someone else is implemented it get that feedback and correct myself and then keep going and keep getting more and more in advance until I'm really comfortable with those new Advanced features another thing you can do here if you're willing to search through a few different code bases is actually go and read open source repositories if you want you can go look at open source python repository JavaScript whatever the language is just read through some of the code and see how people have done things and even though it'll be pretty complicated you'll be able to learn a lot just by reading other people's code so overall that's how I would practice these more advanced features again I know it's easier said than done but I'm trying to give you some ideas on ways that you can make things more challenging for yourself rather than just watching through something like a tutorial project you want to actually do it and make sure you're constantly thinking and and challenging yourself so now we reached the point where most likely you understand the syntax you know how to solve basic problems and you even understand some of the more advanced features and the tools that are available to you what you really need to get good at next is just figuring things out getting really good at problem solving and building the confidence to know that no matter what problem you're presented with you can solve it it's just a matter of how and how long it's going to take you the best programmers in the world are not necessarily just experts in a specific framework or language they're people that are really good at figuring things out they have that perseverance they know how to problem solve and they know how to break down a really daunting task into smaller subtasks they can tackle one at a time that's what you need to get good at here understanding how to take a big problem split it into smaller problems and then going out of your way to use the resources available to you to solve each of those problems figuring something out that you've never done before building a project that seemed impossible those are the type of Milestones you need to reach to really get good as a developer so how do you start mastering this skill well really the only thing that's important is that you work on something on your own and you struggle through working on it it's important that you have bugs that take you days to solve you have problems that seem impossible but eventually you persevere and you solve them the moments when I've learned the most and built my most confidence as a programmer is when I've had some challenge that seemed so incredibly difficult that I had no idea how to solve or some bug that took me hours or days to get through and eventually I found the solution those are the moments that you need to really get good as a programmer so how do you find those moments well I recommend starting by trying to clone existing applications that you've used before could be simple ones could be complicated ones doesn't matter pick something that you use every single day and see if you can build exactly that or something that's a small version of that that way you at least have all of the requirements you know what it should look like you know how it should work what it should feel like and you can try to figure out those small problems in terms of how to actually build the project once you've done that I recommend trying to build something completely from scratch that you've never seen or done before pick some kind of problem you have in your everyday life or something that would just be interesting to you or that you want to show to your friends or maybe other people you know would use this way you can now start by actually defining what it is you want to build you can create a full step plan say these are the various features I have this is how I want it to function which is another skill you should have as a programmer and then you can go and build the entire project you're going to struggle through this it's going to be really difficult there's going to be a lot of things you didn't consider and you're going to have to change the way you code things and go back and recode that's all part of the process you need to struggle it needs to be really difficult and it needs to take you a lot longer than you expected to solve these various problems really all that you need to do to be a really good programmer is persevere and figure things out and the only way you can get good at doing that is just by constantly doing it it's going to be really challenging at the beginning but as you do this more and more and more and more you're going to start to develop that skill which again you can only learn from doing I wish I could give you more practical advice but you need to do as many projects as many problems and have as many challenges as possible to really get good I can say firsthand the only reason I got good at programming is just because I did it so much I struggled with it it was so difficult it took me so long to build even the most basic things but then I started to develop that confidence and just get better and better and better you need to put the volume in you need to put the work in and this is the section where you do do that until you really really get good so with that said I'm going to wrap up the video here if you enjoyed leave a like subscribe to the channel and I will see you in the next one
