With timestamps:

00:00 - all right so we now covered
00:01 - singly-linked list as well as circular
00:03 - lists now this is gonna be an important
00:05 - prerequisite for this videos we're gonna
00:07 - talk about doubly linked lists which
00:09 - build on all of the concepts we
00:10 - previously learned so I recommend if you
00:13 - haven't yet learned that or you haven't
00:14 - seen the videos that I posted on my
00:15 - channel you check those out first before
00:17 - continuing with this video so with that
00:19 - being said let's get started with doubly
00:21 - linked lists now doubly linked lists are
00:23 - very similar to singly linked lists
00:25 - except they just have one more added
00:27 - kind of property to them and that
00:29 - property is known as a previous
00:31 - attribute so before we had our node
00:34 - object which is what's gonna be
00:36 - represented here and it had a value and
00:38 - it had a next attribute and this next
00:41 - attribute was a pointer and it pointed
00:43 - to the next note now that's great but we
00:47 - ran into some issues and some things
00:48 - that we couldn't quite do as fast as we
00:50 - want and that's what a doubly linked
00:52 - list is gonna help us do by adding a new
00:54 - attribute called previous I'm just gonna
00:57 - call it preb previous is the actual name
01:00 - now this means that we're actually gonna
01:02 - have each node pointing not just to the
01:05 - next node in the list so that way but
01:07 - also pointing to the last node in the
01:09 - list and this is why it's called doubly
01:11 - linked because it's linked to a node in
01:13 - two ways so anyways let's erase that for
01:16 - now and now what we're gonna do is we're
01:19 - gonna change our dll class or our SSL
01:22 - class to be DLL which stands for doubly
01:24 - linked list and this is still gonna hold
01:27 - either a head or tail attribute whatever
01:29 - one we want so maybe we'll just say tail
01:31 - in this case and will implement a
01:32 - circular doubly linked list and then it
01:34 - will have all those other methods that
01:35 - we want you know like add remove find
01:41 - you know whatever it is right that's
01:43 - what it'll have so anyways let's now
01:46 - draw a doubly linked list and look at
01:48 - how this actually works so we're
01:50 - obviously gonna start with a head node
01:52 - this will be my head node let's give it
01:53 - a value of seven and then we're gonna
01:55 - have another node let's give this one a
01:57 - value of three and another node and this
02:01 - one can have a value of negative two now
02:04 - let's do the pointers so each node is
02:07 - gonna point to the next node as well as
02:09 - the previous node so I'm just going to
02:10 - do that kind of in line here so that it
02:13 - makes a little bit
02:13 - so this one is gonna point there and
02:15 - this one is actually going to point back
02:17 - as well so this is gonna be our next and
02:20 - this is gonna be our previous and then
02:23 - the same here so next and previous and
02:26 - I'll just do like an N and a P here just
02:29 - to represent that and now what happens
02:31 - for the previous on seven and the next
02:34 - on two well this is where we implement
02:37 - the circular structure that we talked
02:39 - about before
02:40 - so remember this is our head and this is
02:44 - our tail so these will be the only ones
02:46 - that don't have a link to something else
02:47 - as of now but what we'll do is we'll
02:50 - change this and we're gonna implement a
02:51 - circular structure which means that this
02:54 - tail is actually gonna have its next
02:57 - attribute pointing back to the head and
02:59 - this head is gonna have its previous
03:01 - attribute pointing back to the tail like
03:04 - this now this way we're able to access
03:07 - the list in two ways so we can actually
03:09 - go forward through the doubly linked
03:11 - list as well as backwards and having
03:13 - referenced either the tail or the head
03:15 - will give us access to both the head or
03:18 - the tail so whether I put tail here or I
03:21 - put head and that's what we store as our
03:23 - main kind of pointer object for the list
03:25 - it doesn't matter because head points to
03:28 - tail and tail points to head so
03:29 - conversely we have them both either way
03:31 - that we decide to do it and that is
03:33 - another massive advantage of a doubly
03:35 - linked list so just look at this
03:37 - structure that we've made right here and
03:39 - think about why we might want to do this
03:41 - why did this why would this give us a
03:43 - speed advantage over a singly linked
03:45 - list and maybe what some disadvantages
03:47 - of it just think about that for one
03:49 - second and hopefully you guys can come
03:51 - up with some kind of answers I'm gonna
03:52 - explain right now
03:53 - so the main advantage of a doubly linked
03:55 - list is the ability to go through the
03:57 - list forwards as well as backwards and
04:00 - let me explain kind of where this issue
04:02 - comes from
04:03 - so in our singly linked list which I'll
04:05 - just draw count like a tiny little one
04:06 - down here looks like one two three all
04:09 - we had was one link between each one and
04:12 - then we had that certainly circular
04:14 - structure the one like that now this
04:16 - meant that say we want to remove this
04:18 - tail node here so let's do tail well we
04:21 - have to actually traverse through the
04:23 - entire list until we reached the second
04:26 - last element to be able to remove this
04:28 - tail node now with this doubly-linked
04:30 - structure we no longer run into that
04:32 - issue now the reason we had to do that
04:34 - is because if we want to remove this
04:36 - node here that means we need to change
04:38 - the pointer on this node to go back and
04:41 - circle to the head right now because of
04:45 - the way we did that we had to reverse
04:46 - the entire list and that's the issue
04:48 - with a singly linked list that also
04:50 - means you know if we have a pointer to
04:51 - any node in this list and we want to
04:54 - know the node that comes before it
04:55 - we need to traverse the entire list to
04:58 - be able to check that which again is
04:59 - gonna happen in om time complexity
05:02 - whereas with this doubly linked list
05:04 - having a pointer to any node so let's
05:06 - say we have a pointer here will allow us
05:08 - to access the node before and after it
05:10 - which means that we can actually
05:12 - traverse the list much faster in certain
05:14 - applications and if we know the location
05:16 - of an element we can quickly go
05:17 - backwards from it or forwards from it
05:19 - however we like which we can't do with a
05:21 - singly linked list so anyways let's try
05:23 - to remove all this and clean some stuff
05:26 - up as we now talk more about the doubly
05:28 - linked list so anyways that is kind of
05:30 - the main advantage of it now this also
05:32 - allows us to do things like add and
05:34 - remove the first and last element in
05:36 - constant time so insertions and
05:39 - deletions are faster and because we can
05:42 - go forward and backward in the list
05:43 - that's how we do that so let's kind of
05:45 - do a simulation of removing this tail
05:47 - element now compared to how we would
05:49 - have had to do it before so if we want
05:51 - to remove this tail element what we need
05:53 - to do is simply find the tail so right
05:56 - now we have the tail and we have a
05:58 - pointer that comes to it so what we do
06:00 - is we're gonna go back to the node
06:01 - before it and we're going to start by
06:03 - setting this pointer to the node that
06:05 - the tail points do so what we'll do is
06:07 - instead of having this end come here - -
06:09 - we'll change this and we'll point here
06:11 - and actually you know what let me change
06:12 - the color to be green so that you can
06:14 - see kind of the modifications that are
06:15 - made here so anyways this now is gonna
06:17 - point here right that's the first change
06:19 - that we need to make now what we need to
06:21 - do is we need to change the previous
06:23 - pointer of this node here to be our next
06:27 - node so what we do is we say tail dot
06:30 - next so which is this one dot previous
06:33 - actually equals tail dot previous so
06:36 - that means that this previous which is
06:38 - right here
06:39 - rather than pointing to the tail is
06:42 - going to point here to three now that
06:44 - we've successfully eliminated both
06:46 - pointers to this tail element what we
06:49 - can do is we can change the tail now to
06:50 - be equal to this so we say the tail is
06:53 - now this and then this tail element is
06:55 - actually removed and that's kind of just
06:57 - taken out of memory because we have no
06:58 - pointers to it so anyways that is kind
07:00 - of how that works now I know it's messy
07:02 - because there's so many lines and stuff
07:03 - going on but I'll write some pseudocode
07:05 - that hopefully should explain to you
07:07 - guys how to do this now before I get
07:10 - into this too much I just want to
07:11 - explain one disadvantage of this
07:13 - structure the first is that it's very
07:15 - complex as you can see with this next in
07:17 - this previous adding and removing things
07:19 - becomes more difficult as well as takes
07:22 - up more memory because now rather than
07:23 - having each node point to simply one
07:25 - item we're pointing to two which
07:27 - obviously is gonna take up well double
07:29 - the memory so that could be kind of
07:31 - inefficient if you're worrying about
07:33 - memory space now these pointers don't
07:35 - take up very much memory at all and you
07:37 - probably won't notice them in a program
07:38 - that has less than like millions of
07:40 - elements in kind of a list but you know
07:42 - if you're worried about memory then that
07:44 - is something to consider so anyways
07:46 - let's read some pseudocode and I'll
07:48 - write it down here on how we traverse
07:50 - this doubly linked list which is
07:51 - actually the same as singly and how we
07:54 - can remove a certain element so let's
07:55 - say we want to remove this tail element
07:57 - well how do I do that so I actually
07:59 - don't need to traverse it because we
08:00 - have the tail element already set so if
08:02 - I want to remove that well what I can do
08:05 - is simply just do the process I talked
08:08 - about before so we'll start by setting
08:10 - the tail or the node before the tails
08:13 - next property so this one here to be
08:15 - equal to the head
08:16 - so we'll say tail dot and I guess this
08:20 - would be previous and then we'll say
08:24 - tail dot previous dot next is actually
08:28 - equal to tail dot next so again what
08:32 - that's changing here is this attribute
08:34 - and this is making this now go up here
08:37 - to the head all right sweet that's how
08:39 - that works
08:40 - okay now what we need to do is change
08:42 - the pointer on the head to go to our new
08:44 - element so we'll do that so to do that
08:47 - we simply say tail dot previous because
08:52 - that is going to be
08:53 - what am I saying tell the previous tale
08:56 - dot next to previous which now is
08:59 - pointing to this head node here is gonna
09:02 - be equal to in this case tail dot
09:04 - previous you can kind of see how this
09:06 - works they look a little bit reverse
09:08 - here you just kind of reverse the next
09:09 - in the previous swap those around and
09:12 - that's kind of how that works and now we
09:13 - just say is tail equals and in this case
09:16 - I guess it would be equal to tail dot
09:19 - previous so I'll say tail dot previous
09:23 - and I think that's actually all we need
09:26 - to do so we've changed the pointer on
09:27 - this we've changed the pointer on this
09:29 - and now we just set this as our new tail
09:31 - and because this will successfully
09:33 - eliminate that element now let's show
09:35 - one more example just how we add
09:36 - something I don't want to go through
09:37 - every method but I want to give you guys
09:39 - enough kind of examples to where you can
09:41 - play with it and you know make mistakes
09:42 - but have an idea on what you're doing so
09:44 - let's think about how we can add an
09:46 - element now to the beginning of our list
09:49 - so again we have our tail attribute so
09:52 - what we need to do now if we want to add
09:53 - a new element is we need to change a few
09:55 - pointers so we need to add a pointer
09:57 - that goes to head we need to change this
10:00 - previous pointer from head to go back to
10:02 - our new node and then we need to add the
10:04 - tails pointer so that it goes to now our
10:06 - new head node and we need to change this
10:09 - new head node to go to the tail node so
10:12 - there's actually four things that we
10:13 - need to do so it's a little bit more
10:15 - complicated but it shouldn't be that
10:16 - crazy so I'm just going to erase this
10:18 - pointer here just because it kind of
10:21 - takes up a lot of room as well as this
10:23 - pointer text and now let's start writing
10:25 - so what we're going to do if we want to
10:27 - add that new node is we'll say N equals
10:29 - node all right sweet now we can start by
10:33 - setting the value previous and next I'm
10:35 - just gonna do a little semicolon to save
10:36 - some space here and just say and don't
10:38 - value equals I don't know let's make it
10:41 - equal to nine and I will start by saying
10:43 - n dot next is actually gonna be equal to
10:46 - tail dot previous and remember we could
10:49 - be keeping track of the head here but
10:51 - I've just decided to keep track of the
10:52 - tail since we're not circular structure
10:54 - it doesn't matter so we have n dot next
10:56 - equals tail dot previous ok great so
10:58 - that means now our new one is pointing
10:59 - to head alright so what do we need to do
11:01 - now set the previous value to be equal
11:03 - to tail so now we'll say n dot previous
11:06 - equals
11:08 - okay great so now our new head node
11:10 - which we're putting right here is
11:12 - pointing here as well as its previous
11:14 - value is pointing here to our tail sweet
11:17 - so let's remove that and now we need to
11:20 - change the pointers on our head and our
11:22 - tail so we're gonna say head previous
11:25 - which would be tail dot next previous
11:29 - okay so tail dot next dot previous is
11:34 - equal to n so again that's gonna point
11:37 - to this because the next node goes here
11:39 - and then we get that previous pointer
11:40 - which will go back to whatever no do you
11:43 - want so there we go is equal to N and
11:44 - then we'll say tail dot previous dot
11:49 - next is that right oops sorry
11:54 - no that's not correct we have to do tail
11:56 - dot next is equal to head yeah sweet
11:58 - that's how we do it so then tail dot
11:59 - next is equal to n because this next
12:03 - node was originally pointing to the head
12:04 - but now we need to set it equal to N and
12:06 - now that we've done that everything
12:07 - should be good so let's do a quick
12:08 - simulation here on what we've done and
12:10 - just make sure that this actually makes
12:12 - sense since erase that erase that just
12:15 - get rid of some of this junk and run
12:17 - through it one last time okay so let's
12:20 - be just pretend these don't currently
12:21 - have a pointer and let's add that new
12:23 - node so let's add it here says value of
12:26 - nine okay so we started by setting its
12:28 - next value here and its previous value
12:30 - to the tail so we know that that's
12:32 - correct and then what we did is we
12:34 - changed the first thing which was this
12:36 - new node so that his previous value goes
12:38 - to here okay awesome good to go and then
12:41 - what we did is we set the next value of
12:44 - our tail which is this so that it goes
12:46 - to our new head node so the next
12:48 - attribute I guess we'll just put here
12:50 - and it points back to here and that is
12:53 - good to go it's awesome so now when we
12:55 - do tail dot previous or starting tail
12:57 - the previous tail dot next that points
12:59 - to our new head node our new head node
13:02 - now points to the next node in our list
13:03 - and this previous pointer is going here
13:05 - as well as the previous pointer from our
13:07 - head now goes back to our tail node very
13:09 - good we are good to go and that is how
13:11 - you implement a doubly linked list all
13:14 - right so just watching back this video
13:16 - and I want to add something really
13:17 - quickly and just to explain to anyone
13:18 - that might be confused for all these
13:21 - examples
13:21 - I've been using an already existed list
13:23 - which means you know we've already had
13:25 - elements in the list now what happens if
13:27 - you're starting with a blank list which
13:28 - inevitably you will be starting with in
13:30 - some cases well if you are what's gonna
13:33 - happen is you're gonna start by having
13:35 - your tail attribute which will be here
13:37 - pointing to null so you're gonna have no
13:39 - nodes in a blank list so the way that
13:42 - you know this is blank is one tail
13:44 - points to know if it points to null or
13:46 - points to non or points to nothing
13:47 - whatever it is then you know you don't
13:49 - have any elements so when you initially
13:51 - you know say you have this add method
13:53 - here when you initially call this add
13:55 - method the first thing you're checking
13:56 - is if tail equals equals null now if it
14:01 - does you need to create a new note in
14:03 - point tail to that note but how does
14:05 - this work well what's gonna happen is
14:08 - you're gonna create a new node and this
14:10 - is gonna be your tail but how does the
14:12 - previous and next attribute of this
14:14 - first node work well we've talked about
14:17 - this circular structure so let's
14:18 - implement it the exact same except with
14:21 - one node so let's say the value seven
14:24 - here now what is the next in previous
14:26 - well next actually points to itself and
14:31 - previous actually points to itself now I
14:34 - know I just butchered those line so I
14:36 - can redraw them but anyways like
14:38 - previous here goes there and next goes
14:42 - back to itself so what actually happens
14:44 - here is we still have a circular
14:46 - structure just with one node now I know
14:48 - this is weird to think about but when
14:51 - you're adding a new node at the end what
14:53 - you'll do is you'll just say tail dot
14:55 - next equals whatever this is and you'll
14:58 - say tail dot previous equals whatever
15:00 - this is and it just works the same so as
15:03 - if you had one or two different nodes
15:05 - when you add a new node in here it
15:07 - doesn't make a difference because all
15:08 - you're doing is just changing the
15:09 - pointers and regardless of if you had
15:11 - ten nodes or one node since you can keep
15:13 - this consistent circular structure let's
15:16 - see like when I add a new node all I
15:17 - need to do is say if I add one here is
15:20 - I'll change the next pointer of this
15:22 - node to go here and I'll change the
15:24 - previous pointer to go here and then I
15:26 - change this pointer which is previous to
15:29 - go to our new tail node right and I
15:31 - change the next one to go to our new
15:33 - node
15:34 - and that's all I need to do to add
15:35 - something in so anyways that's what I
15:36 - just want to quickly cover here to make
15:38 - sure that no one's super confused and
15:39 - obviously when you're adding nodes the
15:41 - first condition you check is if you
15:43 - haven't like if your list is empty to
15:45 - start because then you need to create
15:46 - that first initial node and set those
15:48 - pointers to be itself and that's just
15:50 - what I wanted to make sure everyone was
15:51 - clear so anyways
15:52 - continue with video now again just quick
15:55 - recap here this is faster at inserting
15:57 - and deleting things in most cases
15:59 - because we don't have to loop through
16:00 - the entire list especially if we already
16:02 - have a pointer to our head node and our
16:04 - tail node but the disadvantage of this
16:06 - is it takes up more room in memory so
16:08 - that's something to be aware of but
16:10 - being able to go forward and backward
16:11 - through the list is actually a massive
16:13 - advantage and with the singly linked
16:14 - list you run into a lot of issues where
16:16 - sometimes you know you have a node and
16:18 - you just want to get the node before it
16:20 - so you can remove that node or do
16:21 - something and you have to end up
16:23 - traversing the entire list which takes
16:24 - again o n time which is a lot of time
16:26 - especially when you're trying to do
16:28 - things very quickly so anyways that has
16:30 - been it for doubly linked lists I hope
16:32 - you guys enjoyed if you did learn
16:33 - something make sure you hit that like
16:35 - button and subscribe to the channel for
16:36 - more data structures and more Python
16:38 - videos

Cleaned transcript:

all right so we now covered singlylinked list as well as circular lists now this is gonna be an important prerequisite for this videos we're gonna talk about doubly linked lists which build on all of the concepts we previously learned so I recommend if you haven't yet learned that or you haven't seen the videos that I posted on my channel you check those out first before continuing with this video so with that being said let's get started with doubly linked lists now doubly linked lists are very similar to singly linked lists except they just have one more added kind of property to them and that property is known as a previous attribute so before we had our node object which is what's gonna be represented here and it had a value and it had a next attribute and this next attribute was a pointer and it pointed to the next note now that's great but we ran into some issues and some things that we couldn't quite do as fast as we want and that's what a doubly linked list is gonna help us do by adding a new attribute called previous I'm just gonna call it preb previous is the actual name now this means that we're actually gonna have each node pointing not just to the next node in the list so that way but also pointing to the last node in the list and this is why it's called doubly linked because it's linked to a node in two ways so anyways let's erase that for now and now what we're gonna do is we're gonna change our dll class or our SSL class to be DLL which stands for doubly linked list and this is still gonna hold either a head or tail attribute whatever one we want so maybe we'll just say tail in this case and will implement a circular doubly linked list and then it will have all those other methods that we want you know like add remove find you know whatever it is right that's what it'll have so anyways let's now draw a doubly linked list and look at how this actually works so we're obviously gonna start with a head node this will be my head node let's give it a value of seven and then we're gonna have another node let's give this one a value of three and another node and this one can have a value of negative two now let's do the pointers so each node is gonna point to the next node as well as the previous node so I'm just going to do that kind of in line here so that it makes a little bit so this one is gonna point there and this one is actually going to point back as well so this is gonna be our next and this is gonna be our previous and then the same here so next and previous and I'll just do like an N and a P here just to represent that and now what happens for the previous on seven and the next on two well this is where we implement the circular structure that we talked about before so remember this is our head and this is our tail so these will be the only ones that don't have a link to something else as of now but what we'll do is we'll change this and we're gonna implement a circular structure which means that this tail is actually gonna have its next attribute pointing back to the head and this head is gonna have its previous attribute pointing back to the tail like this now this way we're able to access the list in two ways so we can actually go forward through the doubly linked list as well as backwards and having referenced either the tail or the head will give us access to both the head or the tail so whether I put tail here or I put head and that's what we store as our main kind of pointer object for the list it doesn't matter because head points to tail and tail points to head so conversely we have them both either way that we decide to do it and that is another massive advantage of a doubly linked list so just look at this structure that we've made right here and think about why we might want to do this why did this why would this give us a speed advantage over a singly linked list and maybe what some disadvantages of it just think about that for one second and hopefully you guys can come up with some kind of answers I'm gonna explain right now so the main advantage of a doubly linked list is the ability to go through the list forwards as well as backwards and let me explain kind of where this issue comes from so in our singly linked list which I'll just draw count like a tiny little one down here looks like one two three all we had was one link between each one and then we had that certainly circular structure the one like that now this meant that say we want to remove this tail node here so let's do tail well we have to actually traverse through the entire list until we reached the second last element to be able to remove this tail node now with this doublylinked structure we no longer run into that issue now the reason we had to do that is because if we want to remove this node here that means we need to change the pointer on this node to go back and circle to the head right now because of the way we did that we had to reverse the entire list and that's the issue with a singly linked list that also means you know if we have a pointer to any node in this list and we want to know the node that comes before it we need to traverse the entire list to be able to check that which again is gonna happen in om time complexity whereas with this doubly linked list having a pointer to any node so let's say we have a pointer here will allow us to access the node before and after it which means that we can actually traverse the list much faster in certain applications and if we know the location of an element we can quickly go backwards from it or forwards from it however we like which we can't do with a singly linked list so anyways let's try to remove all this and clean some stuff up as we now talk more about the doubly linked list so anyways that is kind of the main advantage of it now this also allows us to do things like add and remove the first and last element in constant time so insertions and deletions are faster and because we can go forward and backward in the list that's how we do that so let's kind of do a simulation of removing this tail element now compared to how we would have had to do it before so if we want to remove this tail element what we need to do is simply find the tail so right now we have the tail and we have a pointer that comes to it so what we do is we're gonna go back to the node before it and we're going to start by setting this pointer to the node that the tail points do so what we'll do is instead of having this end come here we'll change this and we'll point here and actually you know what let me change the color to be green so that you can see kind of the modifications that are made here so anyways this now is gonna point here right that's the first change that we need to make now what we need to do is we need to change the previous pointer of this node here to be our next node so what we do is we say tail dot next so which is this one dot previous actually equals tail dot previous so that means that this previous which is right here rather than pointing to the tail is going to point here to three now that we've successfully eliminated both pointers to this tail element what we can do is we can change the tail now to be equal to this so we say the tail is now this and then this tail element is actually removed and that's kind of just taken out of memory because we have no pointers to it so anyways that is kind of how that works now I know it's messy because there's so many lines and stuff going on but I'll write some pseudocode that hopefully should explain to you guys how to do this now before I get into this too much I just want to explain one disadvantage of this structure the first is that it's very complex as you can see with this next in this previous adding and removing things becomes more difficult as well as takes up more memory because now rather than having each node point to simply one item we're pointing to two which obviously is gonna take up well double the memory so that could be kind of inefficient if you're worrying about memory space now these pointers don't take up very much memory at all and you probably won't notice them in a program that has less than like millions of elements in kind of a list but you know if you're worried about memory then that is something to consider so anyways let's read some pseudocode and I'll write it down here on how we traverse this doubly linked list which is actually the same as singly and how we can remove a certain element so let's say we want to remove this tail element well how do I do that so I actually don't need to traverse it because we have the tail element already set so if I want to remove that well what I can do is simply just do the process I talked about before so we'll start by setting the tail or the node before the tails next property so this one here to be equal to the head so we'll say tail dot and I guess this would be previous and then we'll say tail dot previous dot next is actually equal to tail dot next so again what that's changing here is this attribute and this is making this now go up here to the head all right sweet that's how that works okay now what we need to do is change the pointer on the head to go to our new element so we'll do that so to do that we simply say tail dot previous because that is going to be what am I saying tell the previous tale dot next to previous which now is pointing to this head node here is gonna be equal to in this case tail dot previous you can kind of see how this works they look a little bit reverse here you just kind of reverse the next in the previous swap those around and that's kind of how that works and now we just say is tail equals and in this case I guess it would be equal to tail dot previous so I'll say tail dot previous and I think that's actually all we need to do so we've changed the pointer on this we've changed the pointer on this and now we just set this as our new tail and because this will successfully eliminate that element now let's show one more example just how we add something I don't want to go through every method but I want to give you guys enough kind of examples to where you can play with it and you know make mistakes but have an idea on what you're doing so let's think about how we can add an element now to the beginning of our list so again we have our tail attribute so what we need to do now if we want to add a new element is we need to change a few pointers so we need to add a pointer that goes to head we need to change this previous pointer from head to go back to our new node and then we need to add the tails pointer so that it goes to now our new head node and we need to change this new head node to go to the tail node so there's actually four things that we need to do so it's a little bit more complicated but it shouldn't be that crazy so I'm just going to erase this pointer here just because it kind of takes up a lot of room as well as this pointer text and now let's start writing so what we're going to do if we want to add that new node is we'll say N equals node all right sweet now we can start by setting the value previous and next I'm just gonna do a little semicolon to save some space here and just say and don't value equals I don't know let's make it equal to nine and I will start by saying n dot next is actually gonna be equal to tail dot previous and remember we could be keeping track of the head here but I've just decided to keep track of the tail since we're not circular structure it doesn't matter so we have n dot next equals tail dot previous ok great so that means now our new one is pointing to head alright so what do we need to do now set the previous value to be equal to tail so now we'll say n dot previous equals okay great so now our new head node which we're putting right here is pointing here as well as its previous value is pointing here to our tail sweet so let's remove that and now we need to change the pointers on our head and our tail so we're gonna say head previous which would be tail dot next previous okay so tail dot next dot previous is equal to n so again that's gonna point to this because the next node goes here and then we get that previous pointer which will go back to whatever no do you want so there we go is equal to N and then we'll say tail dot previous dot next is that right oops sorry no that's not correct we have to do tail dot next is equal to head yeah sweet that's how we do it so then tail dot next is equal to n because this next node was originally pointing to the head but now we need to set it equal to N and now that we've done that everything should be good so let's do a quick simulation here on what we've done and just make sure that this actually makes sense since erase that erase that just get rid of some of this junk and run through it one last time okay so let's be just pretend these don't currently have a pointer and let's add that new node so let's add it here says value of nine okay so we started by setting its next value here and its previous value to the tail so we know that that's correct and then what we did is we changed the first thing which was this new node so that his previous value goes to here okay awesome good to go and then what we did is we set the next value of our tail which is this so that it goes to our new head node so the next attribute I guess we'll just put here and it points back to here and that is good to go it's awesome so now when we do tail dot previous or starting tail the previous tail dot next that points to our new head node our new head node now points to the next node in our list and this previous pointer is going here as well as the previous pointer from our head now goes back to our tail node very good we are good to go and that is how you implement a doubly linked list all right so just watching back this video and I want to add something really quickly and just to explain to anyone that might be confused for all these examples I've been using an already existed list which means you know we've already had elements in the list now what happens if you're starting with a blank list which inevitably you will be starting with in some cases well if you are what's gonna happen is you're gonna start by having your tail attribute which will be here pointing to null so you're gonna have no nodes in a blank list so the way that you know this is blank is one tail points to know if it points to null or points to non or points to nothing whatever it is then you know you don't have any elements so when you initially you know say you have this add method here when you initially call this add method the first thing you're checking is if tail equals equals null now if it does you need to create a new note in point tail to that note but how does this work well what's gonna happen is you're gonna create a new node and this is gonna be your tail but how does the previous and next attribute of this first node work well we've talked about this circular structure so let's implement it the exact same except with one node so let's say the value seven here now what is the next in previous well next actually points to itself and previous actually points to itself now I know I just butchered those line so I can redraw them but anyways like previous here goes there and next goes back to itself so what actually happens here is we still have a circular structure just with one node now I know this is weird to think about but when you're adding a new node at the end what you'll do is you'll just say tail dot next equals whatever this is and you'll say tail dot previous equals whatever this is and it just works the same so as if you had one or two different nodes when you add a new node in here it doesn't make a difference because all you're doing is just changing the pointers and regardless of if you had ten nodes or one node since you can keep this consistent circular structure let's see like when I add a new node all I need to do is say if I add one here is I'll change the next pointer of this node to go here and I'll change the previous pointer to go here and then I change this pointer which is previous to go to our new tail node right and I change the next one to go to our new node and that's all I need to do to add something in so anyways that's what I just want to quickly cover here to make sure that no one's super confused and obviously when you're adding nodes the first condition you check is if you haven't like if your list is empty to start because then you need to create that first initial node and set those pointers to be itself and that's just what I wanted to make sure everyone was clear so anyways continue with video now again just quick recap here this is faster at inserting and deleting things in most cases because we don't have to loop through the entire list especially if we already have a pointer to our head node and our tail node but the disadvantage of this is it takes up more room in memory so that's something to be aware of but being able to go forward and backward through the list is actually a massive advantage and with the singly linked list you run into a lot of issues where sometimes you know you have a node and you just want to get the node before it so you can remove that node or do something and you have to end up traversing the entire list which takes again o n time which is a lot of time especially when you're trying to do things very quickly so anyways that has been it for doubly linked lists I hope you guys enjoyed if you did learn something make sure you hit that like button and subscribe to the channel for more data structures and more Python videos
