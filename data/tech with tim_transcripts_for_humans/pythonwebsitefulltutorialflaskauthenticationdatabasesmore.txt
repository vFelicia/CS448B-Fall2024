With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - youtube video
00:11 - so in this video i'm going to be showing
00:13 - you how to make a website with python
00:15 - now the goal of this video is going to
00:17 - be to give you a finished product
00:19 - that you can tweak and turn into
00:20 - whatever website you'd like so i want to
00:22 - show you all of the fundamental and
00:24 - important things you need to know about
00:26 - web development with the module that
00:27 - we're going to use
00:28 - so that way you can kind of take this
00:30 - starter or template website
00:32 - and turn it into whatever you want so
00:34 - specifically we're going to cover how
00:36 - you sign up users so how you create new
00:38 - users account
00:39 - how you store those in a database how
00:41 - you log into those user accounts how you
00:43 - log out
00:44 - of them and then how you associate
00:45 - information with a specific user
00:47 - so the example application that we're
00:49 - going to build here is just a very
00:50 - simple notes app
00:52 - so we're going to have it so you create
00:53 - an account and then once you're signed
00:55 - in you're able to add notes or
00:56 - make new notes you can then delete those
00:58 - notes and obviously you can sign out
01:01 - you can log back in on whatever computer
01:02 - you want and you can have access to
01:04 - those notes
01:05 - now this is really simple this isn't
01:06 - super exciting but the point is to give
01:09 - you the knowledge to be able to make
01:10 - something that is more exciting right so
01:12 - this is just very
01:13 - fundamental most apps that you make are
01:15 - going to use like 90
01:16 - of the code that we're going to right
01:18 - here so it's a really great starter
01:20 - project
01:20 - it's going to teach you a lot about web
01:22 - development and again that's kind of the
01:23 - goal here now keep in mind
01:25 - that we're not really going to be
01:26 - focusing on front end too much i have
01:28 - styled this slightly using something
01:30 - called bootstrap just so that it does
01:32 - look
01:32 - somewhat decent but this is not a
01:34 - front-end tutorial at all
01:36 - you don't need to know javascript for
01:38 - this you don't even really need to know
01:39 - html
01:40 - although i will go over a little bit of
01:42 - html uh and kind of the only
01:43 - prerequisite is you have some
01:45 - fundamental knowledge of python because
01:47 - that's what we're going to be using for
01:48 - the back end of the website
01:50 - so anyways let me give you a quick demo
01:52 - of what we're going to be building here
01:53 - and then we'll actually jump into the
01:54 - code
01:55 - so my website running you can see that
01:57 - we can sign up for a new account or we
01:58 - can log
01:59 - in so let's actually just make a new
02:00 - account i'm going to say tim3
02:02 - at you know gmail.com is my email
02:05 - my name is tim let me set up a password
02:09 - and a password awesome so i'm going to
02:11 - submit that i've created an account
02:13 - it says my account was created
02:14 - successfully i'm brought to this page
02:16 - that says notes
02:17 - and i can add a new note so i'm going to
02:18 - say hey there you go that's my note
02:21 - i'm going to say you know second note
02:23 - exclamation point add my note
02:25 - now i can delete a note and notice that
02:27 - it gets deleted the other one is still
02:28 - there
02:29 - so now i can log out if i try to go back
02:31 - to the slash home page
02:32 - it's not going to let me because i'm not
02:33 - signed in but now if i sign in so tim3
02:37 - gmail.com and i type in my password
02:40 - we come back and we can see our notes
02:42 - now of course if we create another
02:43 - account or in fact i think i have
02:45 - another account let's say tim at
02:48 - gmail.com
02:50 - uh you should see that we have different
02:52 - notes showing up here
02:53 - uh okay i i don't have any notes for
02:55 - this account but you can see that there
02:56 - is no notes here so it's showing
02:58 - differently
02:58 - uh yeah that's the basic idea and that's
03:00 - what i'm going to be showing you how to
03:01 - do so again
03:02 - nothing super exciting or super crazy
03:04 - but really important stuff and once you
03:06 - know this again you can go and make
03:07 - whatever you want
03:08 - so hopefully you guys are excited let's
03:10 - go ahead and get started after a quick
03:12 - word
03:12 - from our sponsor before we get started i
03:14 - need to thank typingdna for sponsoring
03:16 - this video
03:17 - typing dna is a developer's first typing
03:20 - biometrics company that provides a low
03:22 - code authentication api
03:23 - that can authenticate users based on the
03:25 - way that they type
03:26 - their authentication api is available
03:29 - for free from their developer plan which
03:31 - provides you with
03:32 - unlimited authentications and end users
03:34 - typing dna works by recording typing
03:36 - biometrics data which consists of
03:38 - timings and durations of various
03:40 - keypress events
03:42 - all new users will provide some baseline
03:44 - typing data when creating their account
03:45 - and then that data can be used to verify
03:47 - their identity in the future
03:49 - this allows users to authenticate their
03:51 - accounts without having to whip out
03:52 - their phone or mobile devices
03:54 - typing dna is built for developers
03:57 - provides seamless identity verification
03:59 - and can help catch fraudsters instantly
04:01 - it works great as two-factor or
04:03 - multi-factor authentication
04:05 - now to illustrate this better let's try
04:07 - typing dna's demo
04:08 - i'm first asked to create a dummy
04:10 - account by typing my email in a made-up
04:12 - password
04:13 - as i type typing dna records my typing
04:16 - biometrics
04:17 - the next time i go to log in it uses
04:18 - this data to authenticate my login
04:21 - as well as typing dna's great api they
04:23 - also have a chrome extension that you
04:25 - can use as an extra security layer
04:27 - get started with typing dna today by
04:29 - signing up for a free developer account
04:32 - from the link in the description all
04:34 - right so let's dive in here
04:35 - the first thing that we need to do is we
04:37 - need to make a folder that's going to
04:38 - store our application
04:40 - so i've just made one on my desktop i've
04:41 - called it flask web app tutorial
04:44 - and i've opened it up here in vs code
04:46 - now feel free to use whatever editor you
04:47 - want
04:48 - i am using visual studio code it's just
04:50 - my preferred one right now for this type
04:52 - of project
04:52 - but you can use subline you can use adam
04:54 - you can use pycharm whatever you want
04:56 - doesn't matter i'm just you know follow
04:57 - along with the steps that i'm doing here
04:59 - so create a folder and then the first
05:01 - thing we're going to do is just kind of
05:02 - set up a little bit of a project
05:04 - directory or kind of some structure here
05:06 - just so that we have all the files
05:08 - defined already so the first thing i'm
05:09 - going to do is i'm going to make a
05:10 - folder inside of this folder
05:12 - i'm going to call it website this folder
05:14 - is going to store all of the code
05:15 - for our website right then i'm going to
05:17 - make a new file i'm going to call this
05:19 - file
05:19 - main.pi and this is the file that we are
05:22 - going to run
05:22 - when we want to start our web server or
05:25 - start our website
05:26 - now inside of website i'm just going to
05:28 - make a few folders we'll talk about
05:29 - these as we get to them
05:30 - the first one is going to be called
05:32 - static and then the next folder inside
05:34 - of website is going to be called
05:36 - templates and then we make a few python
05:39 - files
05:39 - and again we will jump into what all
05:41 - these mean in a second so we're going to
05:42 - say underscore underscore
05:44 - init on your scroll underscore dot pi
05:46 - now this file right here has two
05:48 - underscores before the init and two
05:50 - underscores after make sure you don't
05:51 - only
05:52 - have one and what this is going to do is
05:54 - it's going to make this website folder
05:55 - here a python package
05:57 - you'll see what that means as soon as we
05:59 - use the package parts of it
06:01 - but it essentially means that we can
06:02 - import this folder here
06:05 - and whatever's inside of this init.pi
06:07 - file will run automatically once we
06:09 - import this folder
06:10 - anyways we're going to make a few more
06:11 - files and then we'll be done with kind
06:13 - of the basic setup
06:14 - the first one we're going to do here is
06:15 - we're going to say auth.pi
06:17 - we're going to make another file here
06:19 - we're going to call this one models.pi
06:21 - we're going to use this to store our
06:22 - database models
06:23 - and then lastly we're going to have a
06:24 - file called views.pi this is going to
06:26 - store all of the main views or the url
06:29 - endpoints for the actual
06:31 - functioning kind of front-end aspect of
06:33 - our website
06:34 - anyways that's the basic kind of
06:36 - structure set up here so make sure
06:37 - yours look something like this and then
06:39 - what we're going to do is install some
06:41 - packages
06:41 - so what we're going to do here is we're
06:43 - going to use a module called flask
06:45 - this module called flask is just a super
06:47 - lightweight python
06:48 - framework essentially that allows you to
06:50 - make websites really quickly and really
06:52 - easily
06:53 - if you're comparing it to something like
06:54 - django it's not necessarily as
06:56 - powerful and it's not used as much in
06:58 - production applications
07:00 - but it's really good to know it teaches
07:01 - you the fundamentals of web development
07:03 - and for working on something like that
07:05 - we're doing here building an mvp or even
07:07 - just building kind of a small website
07:09 - flask is great and well that's what i'm
07:10 - going to show it to you because it's
07:11 - just way more simple than django
07:13 - and you can do things a lot faster with
07:15 - it anyways to use flask we need to
07:17 - install the python packages related to
07:20 - it
07:20 - so the first thing we're going to do is
07:21 - we're going to use pip i'm just in a
07:23 - command line here in vs code but if you
07:24 - opened up cmd on windows or terminal on
07:26 - mac you could follow along with this
07:28 - we're going to install flask so we're
07:29 - going to say pip install flask
07:32 - now run this command i already have this
07:34 - installed so you'll see that all these
07:35 - requirements already satisfied
07:37 - but what pip will do is just install a
07:39 - python package for us now if pip doesn't
07:41 - work for you for some reason you're
07:42 - getting pip is not recognized as a
07:44 - command
07:44 - then what you need to do is go to the
07:46 - description i have two videos
07:48 - one for mac and one for windows that
07:49 - will show you how to fix pip
07:51 - now they're not exactly called how to
07:52 - fix pip but they will go through the
07:54 - steps in each video
07:55 - so watch either of those depending on
07:57 - your operating system and it should show
07:59 - you how to fix this command
08:00 - anyways once we've done that and your
08:01 - pip's working now we're going to install
08:03 - another module this is called flask
08:05 - login
08:06 - so flask hyphen login going to install
08:08 - that
08:09 - and there we go now we need one more
08:11 - module as well the last one
08:13 - is called flask and then hyphen sql
08:16 - alchemy i think i spelt that correctly
08:19 - now yeah there we go so pip install
08:20 - flask sql alchemy hit enter and we're
08:23 - going to install that
08:24 - now the modules we just installed or are
08:27 - for logging users in
08:28 - as it said and then sql alchemy is
08:30 - actually a database thing that we can
08:32 - use so it's kind of a wrapper for
08:33 - sql that just makes it much easier for
08:36 - us to create database models delete
08:38 - models
08:38 - um ad models whatever it may be you'll
08:41 - see as we go through the video but
08:42 - install those three things
08:43 - and in case you guys get lost through
08:44 - this video anything's not working there
08:46 - is going to be all of the code
08:47 - linked in the description down below uh
08:49 - so you can check that out on github and
08:51 - and you can copy all that code and
08:52 - everything
08:53 - all right so the first thing we're going
08:54 - to do is we're going to head into our
08:56 - init.pi file
08:57 - we're going to set up our flask
08:59 - application you're going to see how easy
09:00 - it is to do this
09:01 - so we're going to start by saying from
09:02 - flask import flask with a capital f like
09:05 - that
09:06 - then we're going to define a function
09:08 - we're going to call this function create
09:09 - app so we're going to say define
09:10 - create app like that now inside of here
09:14 - we're going to initialize our app so
09:15 - we're going to say app is equal to
09:17 - and then flask and then inside of the
09:19 - brackets here underscore underscore name
09:21 - underscore underscore underscore
09:22 - underscore name just represents the name
09:24 - of the file or i believe it was actually
09:26 - the name of the file that was ran
09:29 - so you'll see but regardless this is
09:31 - just how you initialize flask
09:33 - doesn't really matter what this means
09:34 - just type it in the brackets okay so app
09:36 - equals flask underscore underscore name
09:38 - underscore underscore
09:39 - then what we're going to do after this
09:40 - is we're going to set up one thing that
09:42 - we need for our app so for all of our
09:44 - flask applications
09:45 - we have this config variable called
09:48 - secret underscore
09:49 - key and what this is going to do is this
09:51 - is going to kind of encrypt or
09:53 - secure the cookies and session data
09:55 - related to our website now if you don't
09:57 - know what those mean
09:58 - don't worry about it you don't have to
10:00 - but the idea here is that we just need
10:01 - to type some random string it can be
10:03 - whatever
10:04 - we want it could be a sentence it could
10:05 - be one character that is going to be the
10:07 - secret key for our app
10:09 - now in production you would never want
10:11 - to share this secret key with anybody
10:13 - but since we're just working on kind of
10:14 - the developer side here
10:15 - doesn't matter make the secret key
10:17 - whatever you want obviously i'm showing
10:18 - you mine it's not that important
10:20 - all right so now that we have that what
10:22 - we're going to do is we're going to
10:23 - return this app so we're going to say
10:25 - return
10:25 - app so we have now created a flask
10:28 - application
10:29 - we've initialized its secret key then
10:31 - we've returned it
10:32 - from this function all right so now that
10:34 - we have that what we're going to do is
10:35 - we're going to go to our main dot pi
10:36 - file which is outside of this website
10:38 - folder
10:39 - and we're going to import this website
10:41 - package grab that create app function
10:43 - that we just defined
10:44 - and then use that to actually well
10:46 - create an application and run it so
10:48 - we're going to start by saying
10:49 - uh from website import
10:53 - and then create underscore app the
10:56 - reason we can do this
10:57 - is because website is a python package
11:00 - so whenever you put this init.pi file
11:02 - inside of a folder
11:03 - it becomes a python package which means
11:05 - when you import the name
11:06 - of the folder it will by default run all
11:09 - of the stuff
11:10 - in the init.pi file which means we can
11:12 - import
11:13 - anything that's defined in this init.pi
11:15 - file like our create
11:16 - app so from main.pi we can use create
11:20 - app so we're going to say app
11:21 - equals create app and then we're going
11:23 - to say if underscore underscore name
11:25 - underscore underscore equals underscore
11:27 - underscore main underscore underscore
11:28 - and then we're going to say app dot run
11:31 - debug
11:32 - equals true now this is as easy as it is
11:35 - to run a flask application this will
11:38 - work we will now have a running web
11:39 - server and i'll show you in one second
11:41 - but what this line says is that only if
11:44 - we
11:44 - run this file not if we import this file
11:47 - so main.pi
11:48 - are we going to execute this line the
11:50 - reason you want this is because if for
11:51 - some reason you were to import main.pi
11:54 - from another file
11:55 - and you didn't have this line right here
11:57 - it would run the web server and
11:58 - you don't want that to happen you only
12:00 - want it to run the web server
12:01 - if you actually run this file directly
12:04 - so that's what this line
12:05 - means now what app.run is going to do is
12:08 - it's going to
12:08 - run our flask application it's going to
12:10 - start up a web server
12:12 - and it's going to say debug equals true
12:14 - which means every time we make a change
12:15 - to any of our python code
12:17 - it's going to automatically rerun the
12:19 - web server
12:21 - that's all the debug equals true means
12:22 - obviously you're going to turn that off
12:24 - when you're running in production
12:25 - but for our cases we want that on
12:27 - because that means we don't have to keep
12:28 - manually rerunning
12:29 - the flask web server awesome so this is
12:32 - like the entry point for our app so what
12:34 - we can actually do is i need to fix my
12:36 - python interpreter first
12:37 - in fact i'll show you how to do this in
12:39 - case you're in vs code and you're having
12:40 - some issues with flask
12:42 - if for some reason you know it's saying
12:43 - flask module is not found or you just
12:46 - you can't use flask in fact i'll show
12:47 - you if i run this file
12:49 - notice i get this error no module named
12:51 - flask your python interpreter is
12:53 - probably just wrong now it shows you the
12:54 - interpreter in the bottom left hand
12:56 - corner
12:56 - if you want to change this interpreter
12:58 - which is probably what you want to do
12:59 - you're going to hit control shift and p
13:02 - on your keyboard
13:02 - that's going to open up the vs code
13:04 - command palette and then
13:06 - inside of here you're going to type
13:07 - python and then select
13:09 - interpreter and you can select your
13:11 - python interpreter
13:12 - so the one that i want to use is 3.8.3
13:15 - again this can be specific to your local
13:17 - machine and the python interpreters you
13:18 - have
13:19 - but now that i select the correct
13:20 - interpreter notice it changed down there
13:22 - and i can run this file so now that i
13:24 - run this file
13:25 - we get some output down here which is
13:27 - saying this is a development server
13:29 - do not use this in production blah blah
13:31 - blah and yeah
13:32 - it pretty much says hey your website is
13:34 - running so now if we want to access our
13:36 - website we need to go to this url right
13:38 - here
13:39 - so 127.0.0.1 port 5000.
13:42 - so what i'm going to do is i'm going to
13:43 - control and click on that that's
13:45 - specific to vs code
13:46 - and it's going to open up this so it
13:48 - says the requested url was not found on
13:50 - the server
13:50 - if you entered the url manually please
13:52 - check your spelling that's fine that's
13:54 - actually good that means our web server
13:55 - is working
13:56 - it just means that we don't have any
13:57 - roots or a home page or anything for our
13:59 - website so that's what we need to add
14:00 - next so what we're going to do
14:02 - now is we're going to create our first
14:04 - website root or
14:05 - yeah i guess our first website root so
14:07 - we're going to go to this views.pi file
14:09 - and inside of this file what we're going
14:11 - to do is we're going to store
14:12 - the kind of standard routes for our
14:14 - website so where users can
14:16 - actually go to so say the login page say
14:18 - the home page all of that kind of stuff
14:20 - actually the login page story is going
14:21 - to go in auth because that's related to
14:23 - authentication
14:24 - but anything that's not related to
14:26 - authentication that the user can
14:27 - navigate to we're going to put in this
14:29 - file
14:29 - so what i'm going to do is i'm going to
14:31 - start by importing flask so i'm going to
14:33 - say from
14:34 - flask import and then blueprint
14:37 - like that and then i'm going to import
14:40 - one more thing as well actually uh we'll
14:44 - import it later i don't need it right
14:45 - now so we're going to say from flask
14:46 - import blueprint
14:47 - now what we're going to do in here is
14:48 - we're going to define that this file is
14:51 - a
14:51 - blueprint of our application which
14:53 - simply means it has a bunch of roots
14:56 - inside of it it has a bunch of urls
14:57 - defined in here that's literally all
14:59 - that a blueprint means
15:00 - it's just a way to kind of separate our
15:02 - app out so we don't have to have all of
15:03 - our views defined in one file we can
15:05 - have them defined in multiple files
15:07 - split up and nicely organized that's
15:09 - what blueprints allow us to do
15:10 - so inside of this file we're going to
15:12 - start by defining the name of our
15:13 - blueprint so i'm going to say views
15:15 - is equal to blueprint now you don't need
15:18 - to name this the same thing as your file
15:20 - but it's usually easier it just
15:21 - keeps it really simple so i would
15:22 - recommend you do that so i'm saying my
15:24 - views blueprint well
15:26 - it's called views now inside of
15:28 - blueprint i'm going to define the name
15:29 - of my blueprint which i'm going to call
15:31 - the same thing as my variable again you
15:32 - don't have to call it this but it's much
15:34 - easier just to call it the same thing so
15:36 - i'd recommend that
15:37 - and then after that you're going to say
15:38 - i'm just going to screen name underscore
15:40 - underscore
15:41 - that's all you need to do we've now set
15:42 - up a blueprint for our flask application
15:45 - so you can ignore the name thing here if
15:47 - you don't understand what that means
15:48 - but that is how you define the blueprint
15:50 - so now what we'll do is i'm actually
15:51 - going to copy all of this
15:53 - i'm going to go inside of my off.pi file
15:55 - i'm going to do the exact same thing
15:57 - except inside instead of views i'm going
15:59 - to call this auth
16:00 - so now i've defined a views blueprint
16:02 - and an auth blueprint
16:04 - and both of these will have different
16:05 - views or different url story defined
16:07 - inside of them
16:08 - so let's go back to views and let's
16:10 - define our first view so to define a
16:12 - view or a route or whatever you want to
16:14 - call it
16:14 - in flask what you're going to do is
16:15 - you're going to say at and then the name
16:17 - of your blueprint
16:18 - so in this case it's called views if we
16:20 - were an auth we would say at
16:21 - auth and then we're going to say dot
16:24 - root
16:25 - and inside of the function here or
16:27 - inside of the uh the brackets
16:28 - we're going to put the url to get to
16:31 - this
16:32 - uh this endpoint or i guess yeah like
16:34 - whatever the root is going to be
16:36 - so in this case we want to define for
16:38 - the home page
16:39 - uh this is the root so slash and then
16:42 - we're going to define a function under
16:43 - here so we're going to say define home
16:45 - now i should have done this before but
16:46 - the point of this function is that this
16:48 - function will run
16:49 - whenever we go to the slash root so
16:52 - whenever we go in our url and we just
16:53 - type in slash so we go to the main page
16:55 - of our website
16:56 - whatever is inside of home is what's
16:58 - going to run so that's the way that you
17:00 - can make this work you define a function
17:02 - you put what's called a decorator above
17:03 - it
17:04 - you define the root and then whenever
17:06 - you hit this root it will call this
17:07 - function
17:08 - so inside of here we're going to do
17:09 - something really basic and we're just
17:10 - going to return some html so we're going
17:12 - to return
17:14 - the h1 tag we're going to say test and
17:16 - then slash
17:17 - h1 what this will do is just return test
17:20 - as an h1 tag
17:21 - it will render this on the website when
17:23 - we go to the slash
17:24 - root so it's as simple as it is of
17:26 - course it will get more complicated this
17:28 - is how you make your first route
17:29 - so now we have these blueprints defined
17:31 - but what we need to do is
17:33 - register these blueprints in our knit.pi
17:36 - so
17:36 - from our app now we need to tell flask
17:38 - that hey we have some blueprints that
17:40 - are containing some different views for
17:41 - our application or some different urls
17:43 - for our application
17:44 - here's where they are so we're going to
17:46 - start by importing these files
17:48 - so we're going to say from dot views
17:51 - import
17:52 - and then we're going to import the name
17:53 - of the blueprint which is views so if i
17:54 - go to views
17:55 - you can see this is what we're importing
17:57 - this variable right here
17:59 - okay so let's go back now we'll do the
18:00 - same thing from auth so we'll say from
18:02 - dot off
18:03 - import off all right so we've got our
18:06 - blueprints imported
18:07 - now what we're going to do is register
18:09 - them with our flask applications we're
18:10 - going to say app
18:11 - dot register blueprint and then we're
18:13 - going to put the blueprint like that and
18:15 - we're going to say url prefix
18:17 - is equal to we're just going to leave
18:19 - this at slash so let me copy this and
18:21 - i'll do the same thing with auth
18:24 - and there we go we've registered our
18:25 - blueprints now the url prefix
18:27 - is saying all of the urls that are
18:29 - stored
18:30 - inside of these blueprints file how do i
18:32 - access them
18:33 - do i have to go to a prefix specifically
18:36 - so i'll just show you with an example
18:37 - because this is the easiest to explain
18:38 - it if i'd put slash
18:40 - auth and then say slash here or auth
18:43 - slash doesn't really matter
18:45 - then what would happen is i would have
18:46 - to go to auth
18:48 - and then slash and then whatever the
18:50 - name of my views inside of here were so
18:52 - if i defined
18:53 - auth dot view like that and or sorry not
18:57 - view
18:57 - dot route like that and then i put
18:59 - inside of here
19:01 - let's say hello if i wanted to access
19:03 - this route
19:04 - since i defined the url prefix as auth i
19:07 - would have to go to slash auth slash
19:09 - hello so anything inside of here will be
19:11 - prefixed now
19:12 - by whatever i define as the url prefix
19:15 - so i don't want anything for the prefix
19:16 - so i just leave it as slash which means
19:18 - no prefix
19:19 - anyways uh hopefully we got that so
19:21 - those that is how you register the
19:23 - blueprints
19:24 - obviously if you had more you would
19:25 - register all of them and you can change
19:26 - the prefix according to what you have
19:28 - but now i'm going to rerun the web
19:29 - server so you can do that by just
19:30 - running this main.pi file
19:33 - i just did it in vs code with a shortcut
19:35 - but not important
19:36 - and now if i run this notice that i get
19:39 - test
19:40 - so i'm getting tests because i went to
19:42 - the slash root so i just went to the
19:43 - home page of my website
19:45 - and what happened was we hit this
19:47 - function right here
19:48 - and we returned this html which was test
19:50 - and we showed that on the web page
19:52 - so that is the most basic way to make a
19:54 - route now i'll show you how to make a
19:56 - few other routes and we'll do it inside
19:57 - of auth.pi
19:59 - so inside of auth.pi we're going to
20:01 - define our login
20:02 - uh log out and our what was the other
20:05 - one we need
20:06 - sign up so we're gonna say off dot
20:09 - root we're gonna say slash login like
20:12 - that
20:12 - and then we're gonna define a function
20:14 - call it whatever you want but i usually
20:15 - just call it the same thing as the root
20:17 - so log
20:17 - in and then here we'll just return some
20:20 - let's go
20:20 - p tag and this is going to say log in
20:24 - like that now we'll define another root
20:26 - so say auth.root
20:28 - we're going to call this one slash log
20:30 - out
20:31 - i'm going to say define log out and then
20:34 - what are we going to return
20:35 - well whatever we want but i'll just
20:37 - return a p tag that says
20:39 - log out okay and then lastly we'll
20:43 - define our sign up
20:44 - so auth.root and then slash
20:48 - sign hyphen up and then define
20:52 - sign underscore up and inside of here we
20:54 - will
20:56 - return p tag that says
21:00 - sign up all right so there we go we have
21:02 - now defined our three routes
21:04 - so now if i rerun the server just you'll
21:07 - notice that the server will crash if you
21:08 - have syntax errors in here so sometimes
21:10 - you do need to rerun it
21:11 - even though you have debug equals true
21:13 - and in fact to show you if i save this
21:15 - notice how the server
21:16 - automatically reruns that's what debug
21:18 - equals true does
21:19 - but yeah sometimes you have syntax
21:21 - errors you just have to restart the
21:22 - server manually
21:23 - so now that we have this if i refresh
21:25 - test is working i can now go to slash
21:27 - sign did i do sign hyphen up uh yep sign
21:30 - hyphen up so that brings me there
21:32 - i can go to log in we see we're at the
21:35 - login page
21:36 - and i can go to log out and we see we're
21:38 - at the log out page
21:39 - so clearly our roots are working it's
21:41 - the most basic part of flask
21:42 - how you set up your roots and your urls
21:45 - all right so now that we have our urls
21:47 - set up
21:47 - what we want to do is we want to start
21:48 - making our pages look a little bit nicer
21:50 - right so i don't really want to just
21:52 - show
21:52 - log in log out sign up i want to show an
21:54 - actual page so how do i render some real
21:57 - html
21:58 - from an html file because it doesn't
21:59 - really make sense for me to be
22:01 - you know putting all the html in a
22:03 - string in python we're not going to do
22:04 - that that's not scalable for our app
22:06 - so now what we're going to do is we're
22:08 - going to go inside of this templates
22:09 - folder
22:10 - and this is where we're going to put
22:11 - what we call our html templates
22:13 - so in flask you could call them html
22:15 - documents doesn't really matter
22:16 - when you render html you call it a
22:19 - template and the reason you called a
22:20 - template is because there's a special
22:22 - templating language
22:24 - that you can use with flask which is
22:25 - called jinga so j-i-n-j-a i believe
22:28 - that's how you spell it
22:30 - this templating language allows you to
22:32 - write a little bit of python
22:34 - inside of your html documents now this
22:36 - is really useful because this means
22:38 - that you don't need to know javascript
22:40 - and you can say render all of a user's
22:42 - notes
22:43 - without using javascript you can display
22:45 - user information without using
22:47 - javascript you can do a bunch of stuff
22:48 - without using javascript based on this
22:50 - templating language
22:51 - now you will see how this works as we
22:54 - really get into this
22:55 - but let me start by defining a new file
22:57 - i'm going to call this base.html
22:59 - so typically when you make templates
23:02 - what you do is you define a base
23:04 - template
23:04 - you can think of the base template as
23:06 - like the theme of your website
23:08 - so whatever you have in this base
23:09 - template is what your entire website's
23:11 - going to look like so usually a nav bar
23:13 - maybe a footer or a header or something
23:15 - like that
23:15 - and then what you will do is you will
23:18 - override parts of the base
23:19 - template with more specific templates
23:22 - now
23:23 - i know this is confusing because i
23:24 - haven't shown anything yet but the idea
23:26 - is that we have
23:26 - one section of the base template which
23:28 - is usually the main content on the page
23:30 - and what we'll do is we'll let our other
23:32 - html documents
23:34 - override that main content so everything
23:36 - else stays the exact same
23:37 - except the main content of the page will
23:40 - change based on what page we're on
23:42 - so anyways let's just start typing out
23:43 - our html document and this is a lot of
23:46 - stuff that you're going to probably have
23:48 - to copy especially the
23:50 - style sheet and the javascript and all
23:52 - of that so do go to the description
23:55 - and open up the github you can type
23:57 - along with me if you want of course but
23:58 - it might be a little bit easier
24:00 - just to uh what do you call it just to
24:02 - copy some of this stuff because i can't
24:04 - really type all of it out
24:06 - anyways we're going to set up our html
24:07 - tags here after our doctype html
24:10 - i'm going to start by setting up a head
24:11 - tag and then we'll set up a body tag so
24:14 - we'll say
24:14 - body and body if you're unfamiliar with
24:17 - html this is just standard practice you
24:19 - need a head tag which has like metadata
24:21 - related to the website
24:23 - and then you have a body tag which
24:24 - actually has the html for the body of
24:26 - the website
24:26 - so the first thing we're going to do
24:27 - inside of our head tag is we're going to
24:29 - define a meta so we're going to say meta
24:31 - and then char
24:32 - set equals utf-8 so just defining the
24:35 - character set that's used for this
24:36 - document
24:37 - then what we're going to do is have
24:39 - another meta we're going to say meta
24:40 - and then name equals viewport
24:44 - and we're going to say that the content
24:47 - is equal to and then width equals device
24:51 - hyphen width so pretty much just saying
24:53 - take up the entire width of the screen
24:55 - and then after this we're going to have
24:56 - a comma
24:56 - we're going to say initial hyphen scale
24:59 - equals 1.
25:00 - now i'm not going to explain this
25:01 - because this is not a tutorial on html
25:03 - you're welcome to look that up if you
25:04 - want but these are just standard things
25:06 - that you almost always have
25:08 - in your head tag then what i'm going to
25:09 - do is i'm going to import what's known
25:11 - as bootstrap now
25:12 - bootstrap is a css framework
25:15 - that has some built-in classes that just
25:17 - make it a lot nicer to style your
25:19 - website
25:20 - again this is not a tutorial on front
25:21 - end or bootstrap so i don't want to get
25:22 - into it too much
25:23 - but what this is right here is a link to
25:26 - what's called a cdn now a cdn
25:28 - is a content delivery network and what
25:30 - that will do
25:31 - is it will allow you to actually load
25:33 - without downloading the file
25:35 - a bunch of custom css and javascript now
25:37 - in this case we're just loading css
25:39 - and we can tell that because this is
25:41 - defined as a style sheet and this style
25:43 - sheet will contain a bunch of classes
25:44 - that we can use for our html elements
25:47 - just to make them look a lot nicer so
25:48 - what you need to do is just copy this
25:50 - again you can get that from the code
25:51 - link in the description you're also
25:53 - welcome to not use this everything will
25:55 - still work if you don't have this css
25:56 - it's just not going to look as nice
25:58 - so we have the two css things to find
26:00 - now
26:01 - so we've loaded our style sheet and
26:02 - we've loaded bootstrap now what we're
26:04 - going to do
26:05 - is we're going to have a title tag and
26:07 - inside of this title tag i'm going to
26:08 - show you the first thing that you can
26:10 - do with jinga which is the templating
26:11 - engine so i'm going to define two
26:13 - brackets like this
26:15 - and then two percent signs now whenever
26:17 - you're using jenga you have a few
26:19 - different kind of syntax
26:20 - options so when you're writing a block
26:22 - where you're writing some pythonic
26:24 - syntax like a for loop or an if
26:26 - statement
26:27 - you usually put them inside of this so
26:29 - you have
26:30 - open squiggly or whatever you want to
26:32 - call it squiggly bracket brace then
26:34 - percent sign
26:35 - and then percent sign and then close
26:36 - squiggly brace now
26:38 - inside of here you can define a bunch of
26:40 - different things you can actually write
26:41 - an if statement in here
26:42 - you could write what else a for loop
26:45 - you can write an expression that you
26:47 - want to evaluate or you can write what's
26:49 - called a block
26:50 - so i'm going to say block title and what
26:53 - this means
26:54 - is i'm defining a block in this base
26:57 - template that can be overridden in a
27:00 - child template so what's kind of going
27:02 - to happen is our children template are
27:04 - going to inherit this base
27:06 - template and any blocks that we've
27:08 - defined inside of this base template
27:10 - they'll be able to change so for example
27:12 - the title of our website
27:14 - we obviously want them to be able to
27:15 - change this so we'll say block title and
27:17 - then we'll say end block inside of this
27:19 - title tag
27:20 - and what this means is now in my child
27:22 - template i can define this same block
27:24 - and when i define this block anything
27:27 - that i write inside of it say like
27:29 - home right there will override
27:32 - whatever is inside of here so if in my
27:34 - child template i wrote say sign up or
27:36 - log in as
27:37 - as the block title it would override
27:40 - what is inside of here so it would
27:41 - remove home and then it would put
27:43 - whatever i typed
27:44 - will make sense as we actually get into
27:46 - the template
27:48 - but this is kind of how you define
27:49 - blocks and what i mean by
27:51 - having templates that you can reuse and
27:53 - defining a base template
27:55 - all right so now that we have finished
27:56 - the head
27:58 - let's go to the body we're going to
27:59 - define a nav bar
28:01 - and then what we're going to do after
28:02 - that is load a bunch of scripts and in
28:03 - fact i'm going to load all of the
28:05 - scripts
28:05 - first so let's load all of
28:09 - these you're going to have to copy these
28:11 - because i can't type them all out
28:13 - and what this is going to load is the
28:15 - javascript
28:16 - related to what do you call it here
28:19 - bootstrap
28:20 - the css framework so bootstrap has some
28:22 - like fancy animations and some just like
28:24 - cool button presses and stuff
28:26 - that use javascript so what you need to
28:28 - do is load in these scripts again just
28:30 - take that
28:31 - from the description from the code so
28:33 - this we load at the bottom of our body
28:35 - tag so make sure it's at the very bottom
28:37 - all other html you're gonna put above it
28:39 - now let's say you're someone who wanted
28:41 - to write your own javascript
28:42 - first of all what you would do if you
28:44 - want to integrate your own javascript
28:46 - into this and i'll just cover this
28:47 - quickly because i know some of you will
28:48 - want to do this
28:50 - is you will put a javascript file inside
28:52 - of this static folder
28:53 - so any assets like images or javascript
28:56 - files
28:57 - or css things that are static that do
29:00 - not change
29:01 - you put inside of this static folder so
29:03 - again images javascript or css files
29:05 - you have to put inside of the static
29:07 - folder now once you put them inside of
29:08 - the static folder
29:09 - you can load them in your html by doing
29:12 - something like this
29:13 - so this is the script that you would
29:15 - write to load in
29:17 - a file called index.js from this static
29:20 - folder
29:21 - so what you do is you write these two
29:23 - squiggly brackets which is another thing
29:25 - in jenga and i'm going to cover this in
29:26 - one second
29:27 - you write url4 then you put the name of
29:29 - the folder which in this case is static
29:31 - and then the file name that you want to
29:33 - load which is index.js
29:35 - now what this url4 function does this is
29:37 - actually a python function okay
29:39 - we'll see it in a minute is it loads the
29:41 - url for the static folder so it just
29:43 - finds that on our website that's what it
29:45 - does now these two squigglies
29:48 - or squiggly brackets i keep calling them
29:49 - squigglies what this means
29:51 - is that we are going to write a python
29:54 - expression
29:54 - so whenever i have two squigglies like
29:58 - this
29:58 - this pretty much means we can write a
30:00 - variable we can write a function we can
30:01 - write some kind of python expression
30:04 - that will be evaluated now there's some
30:05 - rules for the type of python expression
30:07 - you can write in here
30:08 - but that's the idea behind these two
30:11 - squiggly brackets
30:12 - whenever you have them is you can write
30:13 - some python expression that will be
30:15 - evaluated
30:16 - so when i put that inside of here it
30:17 - will evaluate this and there will be
30:19 - some string that is actually
30:20 - source and that's a string will
30:22 - represent the file name
30:24 - index.js so if i made index.js here
30:27 - it would load this file so i put any js
30:30 - that i want inside of here
30:31 - anyways enough on that i apologize about
30:33 - talking that for a long time okay so now
30:35 - that we've done that what we're going to
30:36 - do is go inside of the body and we're
30:37 - going to decide we're going to define a
30:39 - nav bar so we're going to create a nav
30:41 - bar so we're going to say
30:42 - nav we're going to say class
30:46 - is equal to and then nav bar and then
30:49 - navbar hyphen expand hyphen
30:52 - lg now these are all bootstrap classes
30:55 - if you want to see how exactly these
30:57 - work
30:58 - and why i've picked them you can go to
30:59 - the bootstrap website and you can look
31:01 - up
31:01 - navbar you can look up a bunch of
31:03 - different things and it shows you a
31:04 - bunch of really detailed examples
31:06 - of how to create this stuff so i haven't
31:07 - come up with this i've just taken this
31:09 - from the bootstrap website
31:10 - and this will create a nice kind of gray
31:12 - navbar as you saw so now we'll say
31:14 - nav bar hyphen dark so change the color
31:16 - of the nav bar and then bg hyphen dark
31:18 - to make it dark
31:20 - all right so now we have a navbar
31:22 - defined uh
31:23 - that's as easy as it is to make one and
31:25 - now we have to put some buttons on our
31:27 - nav bar
31:28 - so the first thing that i want to put is
31:30 - actually a button that will allow us to
31:32 - expand the nav bar if we're on a mobile
31:34 - device
31:35 - so let's say that our screen is really
31:37 - small and we can't fit all of the
31:40 - navbar items on the navbar then what we
31:42 - need to do is have a button that can
31:44 - expand the nav bar so we actually see
31:46 - all of the different buttons so that's
31:48 - what this is going to do
31:49 - that i'm going to define here so i'm
31:50 - going to say button and then i'm going
31:52 - to say the class
31:53 - is equal to toggle sorry
31:56 - nav bar hyphen toggle so pretty
31:59 - straightforward it's going to toggle the
32:01 - navbar we're going to say the type
32:02 - is equal to a button we're going to say
32:04 - that the data hyphen
32:06 - toggle is equal to and then
32:09 - in a string we're going to say collapse
32:12 - we're going to say
32:12 - that the data hyphen target is equal to
32:16 - and then we're going to put a pound sign
32:18 - which stands for the id
32:20 - of something and then we're going to say
32:21 - navbar because the id of our navbar
32:24 - which we will define in one second is
32:26 - going to be called navbar
32:28 - anyways we have navvar like that then
32:31 - there's some other things that we could
32:32 - add but actually i think this is fine
32:34 - for now okay so data toggle data target
32:37 - okay now that we have that what we're
32:38 - going to do is we're going to close the
32:40 - button tag so slash
32:42 - button and inside of here we're actually
32:44 - going to put the icon that we want to
32:45 - use for this button so we're going to
32:47 - say
32:47 - span class equals and then
32:51 - nav bar hyphen toggler
32:54 - hyphen icon and then we'll just end the
32:57 - span
32:57 - i guess we can just do like that and the
33:00 - span tag so what this will do is this is
33:02 - just going to load an icon for us and
33:03 - then since it ends it's inside of the
33:05 - button tag that's what will show up
33:07 - when we press on this icon it will
33:09 - toggle the button so when you save
33:10 - you should see that it auto formats for
33:12 - you if you're not getting auto
33:13 - formatting in vs code
33:15 - go to the vs code marketplace which is
33:17 - just this thing little cubes here
33:19 - install an extension called prettier if
33:21 - you install this
33:22 - you won't even i think you just need to
33:23 - reload vs code after you install it and
33:25 - then when you save it should
33:26 - automatically format the document for
33:28 - you
33:28 - so that you don't have to deal with all
33:29 - the indentation and all that stuff
33:31 - okay so now that we have that let's
33:33 - define the navigation items in our
33:35 - navbar so we're going to make a div
33:37 - and we're going to say div class is
33:39 - equal to and then
33:41 - collapse and then navbar hyphen
33:44 - collapse then we're going to say the id
33:46 - is equal to
33:47 - navbar so what this is saying is that
33:50 - we're going to have a collapsible nav
33:51 - bar which i will show you
33:52 - once we actually build it and then we'll
33:54 - define the items that we want
33:56 - in this collapsible navbar so
33:59 - let's define another div inside of here
34:02 - so i'm going to say
34:03 - div class equals and then nav
34:06 - bar hyphen nav so this is the actual
34:09 - navigation items
34:10 - we'll end the div and then inside of
34:12 - here we'll define the items that we want
34:14 - so i'm going to say a
34:16 - which is just a link i'm going to say
34:18 - class
34:19 - is equal to and then nav hyphen item
34:22 - and then nav hyphen link meaning that
34:24 - this actually links to something
34:26 - i'm going to say the id of this is login
34:29 - and then you can guess the href so where
34:31 - this is actually going to redirect us to
34:33 - is slash login so that's it for a
34:36 - and then we'll say log in and we will
34:38 - close the a tag
34:40 - all right so now let's copy this and
34:42 - let's put this a few times
34:44 - so we have login the next one we want is
34:47 - sign up so we'll just say the id of this
34:49 - is sign up or maybe we'll just do
34:51 - camel case there and then the page we
34:54 - want to redirect to is sign hyphen
34:56 - up this is going to be called sign up
34:59 - okay after that we want home and we want
35:01 - log out so let's put log out here
35:04 - let's just change this to log out and
35:08 - log out and then lastly we will do home
35:11 - so home
35:14 - home and then we can simply just put
35:16 - slash because that is our home page
35:18 - all right so now we should have a navbar
35:21 - so our server is still running so make
35:22 - sure yours is running you may have to
35:24 - rerun it
35:24 - and if we go and we refresh the page
35:26 - well we don't see anything for logout
35:28 - and we don't see anything for slash
35:30 - right that's because well we've defined
35:32 - this html document but we haven't
35:33 - actually used it
35:34 - so now that we've defined this we want
35:36 - to use this document
35:38 - so this is a template remember we
35:41 - defined
35:41 - this as a template and what we need to
35:44 - do now is actually define some html
35:45 - documents that can use this template
35:47 - because yes we can actually render this
35:49 - template
35:50 - which i will show you in a second but i
35:52 - want to show you how we use this
35:53 - template because the whole idea was this
35:55 - is going to be the base template of our
35:56 - entire website so i'm going to define
35:58 - another template here or another html
36:00 - document i'm going to call this
36:01 - home.html
36:03 - now inside of here what i'm going to do
36:05 - is show you how we extend
36:07 - this template so remember we have this
36:09 - block here this this title block
36:11 - and inside of home what i need to do is
36:14 - i need to extend
36:15 - this base template so i'm going to write
36:18 - the two squiggly brackets and then
36:20 - percent percent and inside of here i'm
36:21 - going to say extends
36:23 - and then base dot html as a string
36:27 - what this means is that this template
36:29 - right here is going to be the exact same
36:31 - as base.html
36:32 - and i can override any blocks that were
36:35 - defined inside of base.html
36:37 - so i can take this block title and i can
36:40 - put this
36:40 - right here and now if i define instead
36:43 - of home
36:44 - well actually sorry this this should be
36:46 - home but let's just make it
36:47 - change so we can see that this did
36:49 - actually work if i make this changed
36:51 - now this is simply going to override the
36:53 - title block from base.html but
36:56 - everything else will stay the exact same
36:57 - so now let's go into views.pi and let's
37:01 - actually render this template so we can
37:02 - see it on the screen
37:03 - so whenever we want to render a template
37:05 - what we do is we need to import the
37:07 - render underscore template function
37:09 - and from our views function we're going
37:11 - to return
37:13 - render template and then just the name
37:15 - of our template so we don't need to do
37:16 - template slash or anything like that
37:18 - we just do home dot html which is the
37:21 - name of our html template
37:23 - and now when we go to this page it's
37:25 - going to render the html inside of
37:26 - home.html
37:28 - now there's a few more things that you
37:29 - can do with templates which we will get
37:31 - to in a minute but that's the basics so
37:33 - let's run this
37:34 - and let's refresh and notice we get some
37:36 - navbar
37:37 - that is collapsible now this icon does
37:39 - not look exactly how i want it to look
37:41 - but notice that when i press this icon
37:43 - all of the the roots are popping up so
37:45 - i'm going to have a look and see what
37:46 - i've
37:46 - messed up here because this should not
37:49 - be uh looking like this right now
37:51 - so there's definitely a change or
37:53 - something that we made a mistake with so
37:54 - i'll be back after i look at that
37:55 - all right so i was able to fix it there
37:56 - was just a few typos you guys probably
37:58 - saw them when i did them but
38:00 - first on line 23 here in the in the html
38:02 - i had navbar
38:03 - toggle this should be navbar toggler
38:06 - that's the class that's why this was
38:07 - looking all weird
38:08 - and then inside of here on line 30 i had
38:10 - spelled collapse wrong
38:12 - so just make sure you spell everything
38:13 - correctly i had collapse and then navbar
38:15 - and then i had
38:16 - the a and the p mixed up so they were
38:18 - like that so obviously it wasn't working
38:20 - because well
38:21 - everything was spelled incorrectly so i
38:23 - spelt collapse correctly now
38:25 - spelt toggler correct and now we should
38:27 - be good to go
38:28 - so now let's load the website here and
38:30 - you can see that as soon as my page gets
38:32 - really small it shows me this button
38:34 - and then i can expand the nav bar to see
38:36 - everything
38:38 - and then if i make it large enough i can
38:39 - see all the items on the nav bar
38:41 - now also look at the title of our
38:42 - website up here it says changed
38:44 - the reason it says change is because we
38:46 - loaded not the base.html template but
38:49 - the home.html template
38:50 - and we over overrode this block here
38:54 - and we called it changed instead of home
38:57 - so that's it that's how you render the
38:59 - template now let's add a block into our
39:01 - base.html template i want to add it
39:03 - right under the nav bar
39:05 - that we can override to actually put
39:07 - content on the screen so what i'm going
39:08 - to do here is i'm going to make a div
39:10 - i'm going to say div and i'm going to
39:12 - say class equals and i'm going to make
39:13 - this a container
39:14 - now the container will just make it such
39:16 - that the content is kind of floating off
39:18 - of the border of the screen it's just
39:20 - it doesn't center it but it just makes
39:22 - it so there's a little bit of padding
39:23 - between it and the nav bar and
39:25 - the edge of the screen and then inside
39:27 - of this container class what i'm going
39:28 - to do is i'm going to define a block
39:30 - i'm going to say block content
39:33 - you can call these blocks whatever you
39:34 - want so name them whatever you want
39:36 - doesn't have to be content
39:37 - and then here i'm going to end the block
39:39 - so now anything that i put inside of
39:41 - here
39:42 - would show up on the screen if i
39:43 - rendered bass.html
39:45 - but it also allows me to override
39:47 - anything in here so now if i take this
39:49 - block
39:50 - and i go to and i just saved and you can
39:52 - see that where'd that put that oh it's
39:53 - just all in line here
39:54 - if i go to h base.html or sorry
39:57 - home.html what am i saying
39:59 - inside of here now i can add an h1 tag
40:01 - and i can just say
40:03 - this is the home page
40:06 - so now that i do this you'll see as soon
40:08 - as i refresh here
40:10 - that we get this is the home page
40:11 - showing up on the home page
40:13 - so now if i go to logout notice that the
40:16 - template's not here because we still are
40:18 - just rendering the html for logout
40:20 - but that's how this works so that's how
40:22 - you deal with templates
40:24 - and hopefully that was somewhat
40:25 - informative all right so now let's
40:27 - show how we can actually render the
40:28 - template for all of our views
40:30 - so we have our homepage but if we go to
40:32 - auth.pi we don't want to show
40:34 - all this boring html we want to show the
40:36 - template for
40:37 - login for log out and for sign up so
40:40 - let's create
40:40 - two more templates let's make one called
40:43 - login.html
40:44 - and let's make one called signup.html
40:47 - assign underscore
40:49 - dot html now we're not going to make one
40:50 - for log out because when you actually
40:52 - press that button it's just going to
40:53 - redirect you somewhere else there's not
40:54 - going to be like a page that it shows
40:56 - i was just doing that for example but
40:59 - you get the idea so let's
41:00 - go to our home.html it wants to
41:02 - literally just copy all of this
41:04 - first of all let's make the title
41:05 - correct in home.html
41:07 - and now for sign up and for login i'm
41:10 - going to paste these in so we'll start
41:11 - in login
41:12 - we'll just change the name to say login
41:15 - and we'll say this is the login page
41:19 - very good now we go to sign up we can
41:22 - change this
41:22 - to sign up and change this to this is
41:25 - the
41:26 - sign up page great so now that we have
41:29 - that let's render these templates so
41:30 - let's go to auth.pi
41:32 - let's import render template and let's
41:35 - use it so
41:35 - now let's say render underscore template
41:38 - and what template are we going to render
41:40 - the login
41:41 - dot html we can copy this and do the
41:44 - same thing
41:45 - for sign up and now we will
41:48 - render sign underscore up dot html
41:51 - all right so now that we've done that
41:53 - let's load so let's refresh
41:55 - let's go to sign up this is the sign up
41:57 - page let's go to login
41:58 - this is the login page and there you go
42:00 - and that is the basics
42:02 - so now that we've talked about that we
42:03 - understand how to use templates
42:05 - let's now discuss how we can actually
42:06 - pass values to
42:08 - templates so one of the great things
42:09 - about this jenga templating language is
42:11 - that we can pass
42:12 - variables or values right to all of
42:15 - these templates
42:16 - and then what that will do is we can
42:17 - actually use those values inside of the
42:19 - templates
42:20 - so let's say i want to pass like it's
42:23 - hard to give a good example right now
42:24 - because we don't have anything
42:25 - meaningful to pass
42:26 - but i'm just going to show you how we
42:27 - can pass a variable to say login.html
42:31 - from our backend right here and how we
42:33 - can display it on the page so on
42:34 - login.html
42:36 - what you can do here is you can quite
42:38 - simply
42:39 - write any variable name that you want so
42:41 - doesn't matter hello
42:43 - could be arg could be string whatever as
42:46 - long as it's a valid variable name type
42:48 - whatever you want
42:49 - so let's just go with text and then i'm
42:51 - going to say that's equal to
42:53 - set it equal to whatever you want so i'm
42:54 - going to set this equal to
42:56 - testing and now that i've done this
42:59 - inside of my login.html template
43:02 - i can access the variable text so if i
43:05 - go to login.html
43:07 - what i can do is i can use my fancy
43:09 - squiggly brackets that denote
43:10 - i'm having a python expression inside of
43:13 - here
43:14 - and i can type the name of the variable
43:15 - that i'm expecting to be passed which is
43:18 - text
43:18 - so if i do this what's going to happen
43:21 - now is whatever is passed to this
43:23 - template
43:23 - with the value text so again text equals
43:26 - testing
43:27 - will show up here uh oops in the
43:30 - squiggly brackets or where they're
43:31 - located so if i
43:32 - run this now and we
43:35 - refresh we see testing shows up so this
43:38 - is how you pass values
43:40 - to your templates you simply define them
43:43 - as some variable
43:44 - and and literally just type it out like
43:46 - this so text equals testing
43:48 - there's a few other ways to do this i'm
43:50 - not really going to go
43:52 - through all of them at least right now
43:53 - but we can also pass multiple variables
43:55 - so i can pass
43:56 - text and i could pass um you know user
43:58 - is equal to
44:00 - and then i'll pass tim so now that i've
44:02 - passed this i can go to
44:03 - my login template and after this i can
44:06 - just say user
44:08 - now that i have user there if i run this
44:11 - we get testing and then we get tim
44:13 - right so i can just show the user now i
44:15 - also could do something like user plus
44:17 - and then s now what this will do is it
44:19 - will interpret whatever the user
44:20 - variable is
44:21 - plus the string s and it will display
44:23 - that so now we get tim's right
44:25 - so there is a limitation to what you can
44:27 - do inside of here you can't do
44:29 - everything you would do in regular
44:30 - python
44:30 - but for the most part you can do like
44:32 - some basic expressions display variables
44:34 - and that's what makes this templating
44:35 - language really useful
44:37 - so that is the basic for that now
44:40 - let's show one more thing with templates
44:42 - while we're at it i want to
44:44 - pass a variable here and we'll just call
44:45 - this boolean
44:47 - and we'll make this equal to true now
44:49 - i'll show you how we can actually write
44:50 - an
44:51 - if statement inside of our template so
44:53 - if we want to write an if statement
44:55 - uh which we'll do here let me just move
44:58 - the block down
44:59 - uh to write an if statement we do the
45:01 - percent type of block and then we say if
45:04 - and then whatever variable we want to
45:05 - check or whatever expression we want to
45:06 - check so in this case i want to see if
45:07 - the boolean variable
45:09 - is equal to true so if boolean is equal
45:11 - to true
45:12 - then what i can do is underneath this
45:14 - block i can write out what i want to do
45:16 - i'll just say
45:17 - yes it is true
45:20 - and then to end my block i can say end
45:23 - block like that or sorry not end block
45:25 - but and if
45:26 - so this is how you write an if statement
45:27 - you do the percent kind of thing you say
45:29 - if whatever the expression is you want
45:30 - to check then end the percent thing
45:33 - and then you write whatever inside of
45:34 - here you want to display
45:36 - if this is true or whatever you want to
45:37 - do if this is true and then you have the
45:40 - end if to signify hey i'm ending this if
45:42 - statement because obviously we can't use
45:44 - indentation to do that
45:45 - so now if i refresh we'll see that yes
45:48 - it is true
45:49 - but if i change is boolean equal to
45:51 - false
45:52 - so let's do that you'll notice that when
45:55 - i run this
45:56 - nothing shows up because that condition
45:58 - was not true so that is how you write an
46:00 - if statement
46:01 - if you want to do an if else then you
46:03 - can do this
46:04 - you can say else and then you can say no
46:07 - it is
46:07 - not true and you don't need to write
46:10 - like end else or anything like that you
46:11 - just have an end if at the very end of
46:13 - all of the statements
46:14 - and now let's run this we have yes it is
46:17 - true
46:18 - and if we change this to false just to
46:20 - get into the else statement here
46:22 - we see no it is not true right so that
46:24 - is how that works that's how the if and
46:26 - else
46:27 - works now i hate the formatting by
46:29 - default for
46:30 - jinga in here like it is kind of
46:31 - difficult to read but hopefully you get
46:33 - the idea that's how you write if
46:34 - and else i'll show you for loops later
46:37 - and then you can do an
46:38 - else if as well i may be incorrect on
46:41 - this i should probably look this up but
46:42 - it's percent percent
46:43 - and i think it's either l if or else if
46:46 - all right so it looks like it actually
46:47 - is just
46:48 - l if so if you say l if and then
46:50 - whatever the other condition is you want
46:51 - to check
46:52 - uh then this works and then if you
46:53 - didn't have an else you would just have
46:54 - the end if at the end
46:56 - but the end if just goes at the very end
46:57 - of all the statements and this works
46:59 - just like regular python so you have if
47:00 - l if else or as many lifts as you want
47:03 - again you don't need the l if you don't
47:04 - need the else and end if goes at the
47:05 - very end
47:06 - anyways let's get rid of these because i
47:08 - don't actually want these and
47:10 - that's just what i want to show you how
47:11 - you pass values to the template
47:13 - all right so now we've learned about
47:14 - templates we know how to pass values to
47:16 - templates we know how to do template
47:18 - inheritance we know how to
47:19 - you know use expressions and all of that
47:21 - inside of the templates
47:22 - let's now create our actual sign
47:26 - up template so i want to actually make
47:28 - the form here because
47:30 - if we design this then we can start
47:31 - working on the back end and we can
47:33 - actually you know
47:33 - create the user account and work with
47:35 - databases and all that interesting stuff
47:37 - so we need to build this form out so
47:39 - first of all we have our blocks defined
47:41 - now inside of our block
47:42 - content we're just going to build an
47:44 - html form so we're going to say form
47:46 - we're going to say method equals post
47:48 - which means when we submit this form
47:50 - send a post request to the back end you
47:53 - don't have to know
47:54 - what that means yet but i will discuss
47:55 - post get and all of that
47:57 - and anyways inside of here let's start
47:59 - by having an h3 tag so let's say h3
48:02 - let's say a line equals center we want
48:05 - this to be in the middle of the screen
48:06 - and let's end our h3 tag and then let's
48:08 - say sign
48:09 - up so now we have a header for our form
48:12 - that says sign
48:12 - up now i want to have a div so i'm going
48:15 - to say div
48:16 - the class of this is going to be equal
48:19 - to
48:20 - form hyphen group this is just a
48:22 - bootstrap class that we can use
48:24 - i'm going to end the div and inside of
48:26 - this div i'm going to start putting my
48:28 - fields so i want an email address
48:30 - a first name a password and a password
48:33 - too so like your password confirmation
48:35 - and that's what i want for my sign up
48:36 - form so email first name two passwords
48:38 - so let's start by defining a label
48:40 - let's say label this is going to be for
48:42 - our email
48:44 - you just would set this equal to the
48:46 - class that you're going to use for
48:48 - the input field which you'll see in a
48:49 - second let's end our label and let's
48:51 - call this one
48:52 - email address all right
48:56 - now inside of here i'm going to define
48:57 - input field so i'm going to say input
48:59 - i'm going to say
49:00 - type equals email i'm going to say class
49:03 - equals and then form hyphen control
49:05 - again this is another bootstrap class
49:07 - you can look up all these classes from
49:08 - the bootstrap website
49:10 - i'm going to say the id equals email i'm
49:13 - going to say the name
49:14 - equals email notice there's a lot of
49:16 - stuff to type here and the
49:17 - placeholder is equal to enter email
49:22 - uh like that okay and actually let's go
49:24 - lowercase
49:25 - enter email how many times did i spell
49:27 - it incorrectly all right
49:28 - so now we have our input field now what
49:30 - you need to make sure you do here
49:32 - is you need to define a name the reason
49:35 - you need to define a name
49:36 - as well as an id and in fact the id is
49:38 - optional but you should add it because
49:40 - then you have your label
49:41 - linking with your input field which is
49:43 - what you want but what the name will do
49:45 - for us
49:46 - is this is actually what the attribute
49:48 - is going to be called when we pass
49:50 - the information in this field to our
49:52 - back end
49:53 - now that might be confusing but when we
49:55 - submit this form it's going to bundle up
49:57 - all of the information in here
49:59 - it's going to use all of the names of
50:01 - these fields
50:02 - to represent them when it actually sends
50:04 - this information to the backend so we
50:06 - will be able to access
50:07 - the email address by whatever its name
50:10 - is defined as so make sure you define
50:12 - these names and then that you know what
50:14 - these names are
50:15 - so now that we have our first form group
50:17 - defined we're going to copy this
50:19 - and let's do the next one so we have the
50:21 - same div called form group except now we
50:23 - don't have an email
50:24 - we have a first name so we'll just say
50:29 - first name like that change the type to
50:31 - not be email but just to be
50:33 - text and then the class will stay the
50:35 - same the id will go to
50:38 - first name the name should always be the
50:40 - same as the id for our purposes we're
50:42 - going to say first name
50:44 - and then we'll just say enter first name
50:47 - all right awesome let's copy this one
50:48 - and now let's do the passwords
50:51 - okay so we i just copied it twice
50:52 - because we're going to do two passwords
50:54 - so we'll say 4 password one
50:58 - the label is going to be password the
51:01 - type is going to be
51:03 - password the id is going to be
51:06 - password1 and then the name is going to
51:09 - be password one
51:11 - okay and then for here we'll just say
51:13 - enter
51:15 - password and then actually we should
51:17 - probably just copy this one because all
51:18 - we'll have to do is change password one
51:20 - to password two
51:21 - so now uh password i'll just say
51:25 - confirm as the label we'll say instead
51:27 - of password one
51:28 - this will just all be password two
51:31 - and we'll just say instead of maybe
51:34 - instead of enter password
51:36 - maybe we should say
51:39 - confirm password awesome so now we have
51:41 - our sign up
51:42 - form created so now the last thing we
51:44 - need to add is a button
51:45 - so after this div i'm going to add a
51:47 - break line just to separate the button
51:49 - and then what i'm going to do is i'm
51:50 - going to say button
51:52 - type equals submit class
51:55 - equals and then btn btn hyphen primary
51:58 - this is going to make kind of a nice
52:00 - blue button
52:01 - and again these are bootstrap classes
52:02 - that i'm using i'm going to say submit
52:05 - and then slash button so there we go now
52:07 - we have that defined
52:08 - if we go to our website and i was just
52:10 - looking up the the jenga syntax before
52:12 - you can see that
52:13 - and i go to sign up notice this is the
52:15 - form that we get so it looks
52:17 - pretty nice if i press submit you'll see
52:19 - we get something popping up don't worry
52:21 - about that right now but
52:22 - this does indeed work and we have our
52:24 - form now just to be really clear here
52:26 - the reason why i can use all these
52:28 - bootstrap classes is because
52:30 - my base template which i'm inheriting
52:31 - from has all these links right so i'm
52:34 - linking to bootstrap
52:35 - that's what we did in those first steps
52:37 - when we added all these links and we
52:38 - added all these scripts
52:39 - that's why i'm able to use all this nice
52:41 - fancy stuff so i just want to make sure
52:43 - that's clear
52:44 - in case i skimmed over then you guys are
52:45 - wondering you know how it looks this
52:46 - nice
52:47 - it's because we're using a css framework
52:48 - called bootstrap again this is not
52:50 - focused on front end
52:51 - um i just wanted to show you or just
52:54 - talk about what bootstrap is for a
52:55 - second
52:56 - okay now we have sign up so you know
52:59 - what while we're in our html and we're
53:01 - going through and doing all this
53:03 - let's just do the login because it's
53:04 - going to be very similar to sign up
53:06 - in fact let's actually copy this entire
53:09 - sign
53:09 - up form and we'll just modify it
53:11 - slightly in
53:12 - login so for login let's replace all of
53:15 - our content here
53:16 - with this form and now let's remove one
53:19 - of these passwords because we don't need
53:20 - two passwords obviously and let's remove
53:23 - first name
53:24 - and we should be good so now we have
53:26 - email and we have
53:28 - password we'll change the name instead
53:30 - of password1 to just be password
53:33 - and there we go and then we will change
53:36 - the the sign up field here to be login
53:40 - there we go and email that should be all
53:42 - good so i think that's actually all we
53:44 - need
53:44 - for the log in field i'm trying to think
53:47 - if there's anything else we should
53:48 - change maybe we'll change submit to
53:50 - login and that should be our login page
53:53 - so now that we have that let's load the
53:56 - login page
53:57 - and we can see this is what our login
53:58 - page looks like so looking nice
54:01 - awesome that is great okay so now that
54:03 - we have that
54:04 - we've done most of the html that we need
54:06 - to write i hate writing html but we just
54:08 - we do have to do it
54:09 - now we can actually go to python and we
54:11 - can start handling
54:13 - this form so notice actually let me go
54:15 - back to the website here
54:16 - when i press login or i go to sign up
54:20 - and i press submit we get method not
54:22 - allowed this method is not allowed for
54:24 - the requested url
54:25 - so this is a great point in time to talk
54:26 - about http requests
54:29 - so when we're talking about websites uh
54:31 - we use something called http right which
54:33 - i believe is hyper tax
54:34 - transfer protocol i think that's what it
54:36 - stands for something like that
54:37 - and anyways http there's a bunch of
54:39 - different methods that you have with
54:41 - them so you have a get request or a get
54:43 - method
54:43 - a post request or a post method a put
54:46 - request or a put method
54:48 - and then delete and there's a few other
54:49 - ones as well there's an update method
54:51 - and some more
54:52 - now all of these methods can be used for
54:54 - whatever you want but the point of these
54:56 - methods is so that you can clearly
54:57 - distinguish
54:58 - between what type of requests are being
55:00 - sent to your website
55:02 - because what really happens here right
55:04 - is when we go to something in our url
55:06 - address bar
55:07 - we hit some endpoint or some function or
55:10 - some route
55:11 - on our server right and in this case our
55:12 - routes are login login
55:14 - logout sign up you know home all of that
55:18 - now these routes need to know whether we
55:20 - sent them a
55:21 - get request or whether we sent them a
55:23 - post request or whatever it was
55:24 - because based on the type of request
55:26 - they're going to do something
55:27 - differently
55:28 - now typically a get request is when
55:31 - you're just loading a website so when
55:32 - you're loading a web page or you're
55:34 - retrieving information now in our case
55:36 - when we go to this webpage we're
55:37 - retrieving the html that represents this
55:40 - page
55:41 - now a post request usually means that
55:43 - you're making some kind of
55:44 - change to a database or some kind of
55:47 - change to the
55:48 - state of your website or the state of
55:50 - the system or whatever it may be
55:51 - so we would post the fact that we are
55:54 - signing in
55:55 - or that we are signing up and when we
55:57 - post that means we are sending a post
55:59 - request
55:59 - with all of the information in our form
56:02 - so
56:02 - if i go here and let's go to sign up
56:06 - the reason why we were getting that
56:07 - error message is because when we
56:09 - hit this button we are actually by
56:11 - default because we defined
56:14 - method equals post let me find this
56:16 - inside of our form
56:17 - we're going to be sending a request to
56:19 - the url that we're currently on
56:20 - so to sign up that is a post request
56:23 - that has all of the information here
56:25 - so the email address the first name and
56:27 - the two passwords that we typed in it's
56:29 - going to send that to our server
56:30 - so our server needs to interpret that
56:32 - and then respond to us or do something
56:34 - based on that post request
56:36 - so hopefully that's clear but those are
56:38 - some of the main http methods
56:40 - and that's kind of how they work a get
56:42 - request is retrieving information
56:44 - a post request is updating or creating
56:46 - something then you have update delete
56:48 - put a bunch of other http requests which
56:50 - we're not going to use in this video but
56:52 - you're welcome to look up and are pretty
56:53 - straightforward in how they work
56:55 - so let's go now and let's make sure that
56:57 - we can actually accept this post request
56:59 - so if i go to
57:01 - views.pi or sorry opt.pi mybad
57:04 - now what we want to do is we want to
57:06 - make sure that login and signup are able
57:08 - to accept post requests
57:09 - so to do that we need to define
57:11 - something inside of our root that says
57:12 - methods and is equal to a list and
57:15 - inside of here we're going to write the
57:16 - strings for the type of requests that
57:18 - this
57:19 - route can accept now by default we can
57:22 - only accept get requests
57:23 - but now when we add get and we add post
57:26 - here
57:26 - we are able to accept get and post
57:28 - requests so let's copy this
57:31 - let's put this to sign up and now
57:34 - what this means is we are able to accept
57:36 - get and post requests from both of these
57:38 - routes
57:38 - so if i go and i refresh and i press
57:42 - submit now
57:43 - notice that it just reloads the page
57:45 - right because we sent a post request
57:47 - and it simply returned to us the
57:49 - rendered template again right
57:51 - that's all that happened when we sent
57:52 - the post or we sent the get request so
57:54 - to be clear
57:55 - when i go to this url from the url bar
57:57 - this is a get request
57:58 - when i press this submit button this is
58:00 - a post request because i'm sending the
58:02 - information
58:02 - to the server all right so now let me
58:05 - show you
58:06 - how we get the information from this
58:08 - form on the server
58:10 - now what we do is we need to start by
58:12 - importing something called request
58:15 - at the top of our flask application so
58:17 - if we want to get the information that
58:19 - was sent
58:19 - in this form we can do the following we
58:21 - can say
58:22 - that data is equal to request.form
58:26 - so this request variable is whenever you
58:29 - access it inside of a root
58:31 - it will have information about the
58:32 - request that was sent to access this
58:35 - route
58:35 - so it will say the url it will say the
58:38 - method
58:38 - it will say all of the information that
58:40 - was sent and in this case we can access
58:42 - the form attribute of our request
58:44 - which has all of the data that was sent
58:47 - as a part of a form
58:48 - so here i can say data equals
58:50 - request.form
58:51 - and then i can print data now you're
58:54 - going to notice
58:56 - that we may get an issue here because
58:59 - i'm doing this regardless of the fact if
59:01 - i'm sending a get request or i'm sending
59:03 - a post request
59:04 - if a get request or post request comes
59:06 - in we're not differentiating between
59:07 - them we just do the same thing
59:08 - all right so now that i have this line
59:09 - sorry i got a little confused there i'm
59:11 - going to go to login
59:13 - and what i'm going to do is i'm going to
59:15 - send some information so i'm going to
59:16 - say tim at gmail
59:18 - i'm just going to say 1 2 3 4 and i'm
59:20 - going to press log in now notice it
59:21 - should print
59:23 - the data here so if i log in then notice
59:25 - here
59:26 - we get printing out an immutable dict
59:28 - object
59:30 - or mutable multi-dict that has the email
59:32 - which is tim
59:33 - gmail one or tim gmail and then
59:35 - password1234
59:37 - so that is how we access information
59:39 - from the server here
59:40 - we can look at the request.form
59:42 - attribute and if we sent any data or
59:44 - there was a form attribute then we print
59:46 - it out
59:47 - now the one thing to keep in mind here
59:49 - is that this is only going to work it's
59:51 - only going to give us data
59:52 - if we actually send a form right so if i
59:55 - if i go here
59:56 - and i just refresh this and i look at my
59:59 - immutable
60:00 - dictionary we don't have any data inside
60:02 - of it the reason we don't have any data
60:03 - inside of it is because we sent a get
60:05 - request
60:06 - and while there was no form attribute in
60:08 - that get request we didn't we didn't
60:10 - have any data we sent with the get
60:11 - request
60:12 - but when i send the post request and i
60:13 - press log in we get our email
60:15 - and we get our password so hopefully
60:17 - that's clear
60:18 - but now let's look at how we can do this
60:20 - on the sign up page how we can get
60:22 - user's information and store that in a
60:23 - database
60:24 - and create their user account so the
60:26 - first thing we want to do i'm going to
60:27 - delete this from login i'm going to go
60:29 - to sign up
60:30 - i want to differentiate between my get
60:32 - request and my post request so to do
60:33 - that i'm going to say if request.method
60:36 - is equal to an all capitals post then i
60:39 - want to do something specific
60:40 - so if it's a post request do something
60:42 - if it's a get request do something else
60:44 - that's what i'm checking
60:45 - so inside of here the first thing i want
60:47 - to do is get all of the information from
60:49 - my form so i want the email first name
60:51 - and the two passwords
60:52 - i'm going to say email equals and then
60:54 - request dot
60:55 - form and then you use this method called
60:57 - dot get to get a specific
60:59 - attribute or specific value so we're
61:01 - gonna get email we're then gonna say
61:04 - first name equals request.form
61:07 - dot get and we're gonna get first name
61:10 - then i want password so i'm going to say
61:12 - password is equal to request.form.get
61:15 - and i want password1 so let's call this
61:18 - password1
61:19 - and then we want password2 so we'll do
61:21 - the same thing
61:23 - password2 equals request.form.get and
61:26 - then
61:27 - password2 awesome so now we're going to
61:29 - get
61:30 - all this information so we will get the
61:32 - email first name password1 and password2
61:34 - from our sign in form then what i want
61:37 - to do is i want to start by making sure
61:39 - that this information is valid so if
61:40 - this information is not valid
61:43 - then i don't want to create a new user
61:44 - account but if it is valid then i do so
61:46 - let's just do
61:47 - a few very basic python checks here
61:48 - let's say if
61:50 - the len of email is greater than let's
61:54 - say four characters
61:55 - then we're all good to go right we'll
61:56 - say if it's less than four characters
61:59 - then we will kind of tell the uh the
62:01 - user that there's an issue
62:02 - i'm not going to do that this second but
62:03 - i'll show you how we do that then we'll
62:05 - say l if
62:06 - the the len of first name
62:11 - is less than two so if it's only one
62:13 - character or it's zero characters that's
62:15 - no good but
62:16 - we'll do something else if that's the
62:17 - case and then we'll say l if
62:19 - password1 does not equal password2
62:23 - then we want to tell the user there's an
62:25 - issue and then maybe we want to have
62:27 - like a length on the password we'll say
62:29 - l
62:29 - if the len of password1
62:32 - is less than seven characters then
62:35 - there's an issue
62:36 - otherwise we'll say add
62:39 - user to database so if all is good
62:42 - we can add the user to the database so
62:45 - what i want to show you now
62:46 - before we actually go ahead and do this
62:48 - is how we can kind of alert the user if
62:50 - something went wrong so they're sending
62:52 - us this request and saying hey i want to
62:53 - make a new account
62:54 - and we want to check to make sure all
62:56 - this information is valid and if this
62:57 - information is not valid well we should
62:59 - pop something up on the screen and
63:01 - tell them hey no that's no good you
63:03 - can't do that now this is where we get
63:04 - into something called
63:05 - message flashing which is a really cool
63:07 - part of flask i think you can do it in
63:09 - django too although i'm not sure
63:10 - so what you're allowed to do or i guess
63:12 - what you can do is you can flash a
63:14 - message
63:15 - on the screen using flask it has like
63:18 - some built-in functionality for it
63:20 - so to flash a message what you do is you
63:22 - import
63:23 - something called flash and then you use
63:25 - this function whenever you want to flash
63:27 - a message so on 25
63:28 - if i want to flash a message that says
63:31 - hey you know your email is too short
63:33 - then all i do is i say flash and i say
63:36 - email must be greater than
63:41 - four characters okay and then i can
63:44 - define a category
63:45 - for this flash so if this is like a
63:47 - successful message then what i would do
63:49 - is the category equal to
63:51 - success and if this is a failure message
63:54 - or a message where there's an error
63:56 - then i would use the category error now
63:58 - you can name these categories
63:59 - whatever you want like they're up to you
64:01 - you can name them e you can name them
64:03 - one you can name them two
64:04 - so long as you know what they mean
64:06 - because we're going to use these
64:06 - categories to display these messages in
64:08 - a different color
64:10 - anyways let's flash a bunch of messages
64:12 - here so we'll flash here
64:14 - and now we'll say first name
64:17 - must be greater than two characters uh
64:20 - or must be greater than one character
64:22 - story and this one really should be
64:24 - three that's
64:25 - correct then after this for password
64:27 - we'll flash hey your passwords don't
64:29 - match
64:29 - so let's say uh
64:33 - passwords don't match and i need to
64:36 - escape this
64:37 - so just use an escape character like
64:39 - that then we'll do another flash
64:41 - and we will say that password is too
64:44 - short
64:44 - password must be at least
64:48 - seven characters and all these are error
64:51 - messages right
64:52 - and then otherwise uh let's flash a
64:54 - successful message uh now we will
64:56 - actually have to do something else here
64:57 - we'll say account created
65:01 - exclamation point category equals and
65:04 - then
65:05 - success all right so there we go we
65:07 - flash a bunch of messages now if this
65:09 - does work
65:09 - i'm just going to remove this pass and
65:11 - this is only if there's a post request
65:13 - right and then regardless at the end we
65:14 - return the signup.html template
65:17 - so now let me show you how we actually
65:19 - see these flashed messages because if
65:21 - i just run this right now these aren't
65:22 - going to do anything nothing's going to
65:24 - happen because we haven't displayed
65:25 - these messages
65:26 - so i'm just going to rerun the server
65:28 - i'm going to go into my
65:30 - base.html template so let's find that
65:32 - here
65:33 - i'm going to write a kind of block of
65:35 - code
65:36 - uh where it's based i meant to load this
65:38 - up here that is going to actually let me
65:40 - show these flashed messages so
65:42 - underneath the nav bar
65:44 - but above my main content is where i
65:47 - want to show these messages
65:48 - so i'm going to write a for loop and i'm
65:50 - going to do the following or sorry i'm
65:51 - going to write
65:53 - you'll kind of see i just have to write
65:54 - it out and then i can discuss i'm going
65:56 - to say with
65:57 - messages equal to get underscore
66:01 - flashed underscore messages and then
66:04 - we're going to say
66:04 - with underscore categories
66:08 - is equal to and then a lowercase true
66:10 - notice this is lowercase not capital
66:12 - this is a
66:13 - a difference in jenga you use lowercase
66:15 - capitals right all right
66:16 - lowercase capitals use lowercase uh for
66:19 - the first letter for true and false
66:21 - so we're going to say get flash messages
66:23 - with categories equals true
66:25 - and then we're going to end the with
66:26 - statements we're going to say like that
66:28 - and with now what this is going to do is
66:30 - just going to define a variable called
66:32 - messages
66:33 - which is equal to get flash messages
66:35 - this is a function that we can just
66:36 - write out because it's built into flask
66:38 - and this is going to get all of the
66:40 - messages that we have flashed sometimes
66:41 - there may be multiple
66:43 - and then we will display or we will get
66:45 - those messages with their categories
66:46 - sorry
66:47 - now what we will do is we will loop
66:49 - through all of the messages because we
66:51 - could again have multiple messages
66:53 - and we will display them on the screen
66:55 - so i'm going to start by saying
66:57 - first of all we need to make sure we
66:58 - actually have some messages right so if
67:00 - messages and then i'm going to end
67:02 - this if so if we do actually have
67:05 - messages if it's not just empty
67:07 - then what we're going to do is we're
67:08 - going to loop through them so we're
67:09 - going to say for
67:10 - message in messages just like
67:14 - in regular python except we don't need
67:15 - the colon at the end
67:17 - and then we're going to end the for
67:18 - statement we're going to say n4 like
67:20 - that
67:21 - now what we'll do inside of here is we
67:24 - will write some html that will just
67:25 - display whatever the message is so i'm
67:28 - going to write a div
67:29 - i'm going to say div and then class is
67:32 - equal to
67:33 - this is an alert so in bootstrap we have
67:35 - something called alerts i'm going to say
67:36 - alert
67:37 - and then alert hyphen danger
67:40 - so this is an error message and then
67:42 - this is going to be a dismissible alert
67:43 - so alert hyphen
67:45 - dis misable like that and then we're
67:48 - going to say
67:48 - fade and then show now what this will do
67:51 - is it will fade in the alert it will
67:53 - allow us to
67:54 - dismiss the alerts and then it will be
67:56 - shown by default then we will say
67:58 - slash div and one more thing we need to
68:01 - have the role of this
68:02 - equal to an alert okay so that's our div
68:06 - for the alert
68:06 - now inside of here we need to actually
68:08 - show the message so we're going to use
68:09 - two braces
68:10 - we're going to say message the reason
68:12 - we're doing that is because we're
68:13 - accessing this message variable right
68:14 - here
68:15 - then we're going to add a button that
68:17 - will allow us to dismiss this alert so
68:18 - we're going to say
68:19 - button we're going to say type is equal
68:22 - to button and we're going to say class
68:25 - equals close we're going to say data
68:29 - hyphen dismiss is equal to
68:32 - and then you guessed it alert then we're
68:35 - going to end the button
68:36 - and inside of here we're going to put a
68:38 - little icon that will allow us to
68:40 - actually uh
68:41 - like show something nice for this button
68:43 - so we're going to say seban
68:45 - area hyphen hidden equals true
68:49 - and then we're going to say this thing
68:50 - so the ampersand sign
68:52 - uh which is right here and then times
68:55 - semicolon and then slash span now this
68:58 - is just a special character
69:00 - that is gonna be like kind of a fancy x
69:02 - uh and it's just gonna show it
69:04 - in this button uh i can't really talk
69:06 - about it much more than that that's
69:07 - that's just what it's going to do
69:09 - now this however though is what we want
69:11 - to show if we have
69:13 - the category that is equal to error so
69:15 - we have two types of alerts right we
69:17 - have an error alert and a successful
69:18 - alert
69:19 - so if we want to show that we had an
69:21 - error then we probably want to show it
69:22 - in red right which is what alert danger
69:24 - means
69:25 - and then if we had one that was
69:26 - successful well we want to show it
69:28 - successfully we want to show it in green
69:29 - so i'm going to copy this exact thing
69:31 - i'm going to paste it again
69:32 - but i'm going to change alert danger to
69:35 - alert success
69:36 - now what this means is literally change
69:38 - the background color to green
69:39 - that's the only difference between this
69:40 - and the other one but now what i will do
69:42 - is i'm going to have some if statements
69:44 - inside of here that say okay well if the
69:46 - category
69:47 - of this message was what do you call it
69:50 - error
69:51 - then what do we want to do well we want
69:52 - to show the error if it is
69:54 - success we want to show the successful
69:56 - message so i actually need to change
69:57 - this to say
69:58 - for category comma message in messages
70:02 - so we'll loop through both of the things
70:04 - that we need and then we'll do an if
70:05 - statement right here
70:07 - so we'll say if category is equal to
70:10 - and then the string which is uh not
70:13 - danger but
70:14 - error then we will show this so now we
70:16 - need to put our else statement right
70:18 - here
70:18 - so percent l so pretty much if you don't
70:20 - have error we'll just show the success
70:22 - one
70:22 - and then we need to end our four so we
70:25 - can do that right here
70:26 - and four so i know this is a lot of code
70:28 - but this is how you show the flashed
70:30 - messages so we start with the with
70:31 - messages equals flashed
70:32 - with categories equals true we say if we
70:35 - have any messages so if
70:36 - this is not equal to none then let's
70:38 - loop through all of them
70:39 - let's check if the category of our
70:41 - message is error
70:43 - if it is then let's display an error
70:45 - message box so alert danger
70:47 - otherwise let's display the success
70:50 - message box
70:51 - and we'll throw whatever the message
70:53 - actually is in that message box and then
70:55 - why do i have two and fours sorry one of
70:57 - this should be and if
70:59 - my about on that uh and there we go that
71:01 - that's all we need to actually show the
71:02 - flash messages now since i put this in
71:04 - the base template
71:05 - this will now work on any of our pages
71:07 - so if we flash
71:08 - flash messages it doesn't matter where
71:10 - we flash them they will always show up
71:12 - because this is on the base template so
71:14 - if i save this it does this you know
71:16 - crazy formatting which i hate
71:18 - that makes it way harder to read but you
71:20 - get the idea that is how you do this and
71:22 - if you missed any of this you can just
71:24 - go to the code in the description all
71:26 - right so now
71:26 - let's try this let's refresh and let's
71:29 - submit
71:30 - now notice that when we submit the first
71:31 - thing it tells us is email must be
71:33 - greater than three characters so let's
71:35 - go back to the code
71:36 - alright so we're here and we can see in
71:37 - sign up the first thing we check is if
71:39 - the email is greater than three
71:40 - characters or not
71:41 - no it obviously wasn't uh so that's why
71:43 - we got that message so now let's
71:45 - enter an email let's say tim at gmail
71:47 - let's press submit
71:49 - and then says first name must be greater
71:50 - than one characters or i guess
71:52 - i should just say one character let's
71:54 - actually change that
71:55 - we get the idea now it's showing us
71:57 - these flash messages now let's
71:59 - uh input some valid stuff so tim
72:01 - [Music]
72:02 - gmail.com
72:04 - tim one two three four five six seven
72:07 - just so that we get past that limit and
72:09 - now it says account created now
72:10 - obviously we didn't actually create the
72:12 - account but that's the message that's
72:13 - flashed
72:14 - if you press the x button it closes the
72:16 - message so there you go that is how you
72:18 - flash
72:18 - messages now at any point in time in
72:20 - your program now that we've implemented
72:22 - that code in base.html if you ever want
72:24 - to notify the user of something just
72:26 - flash a message and then choose whatever
72:28 - category you want to show so error
72:29 - success
72:30 - and you're welcome to implement more
72:31 - categories as well if you wanted to show
72:32 - like a gray message or stuff like that
72:35 - you just have to write some more html
72:36 - for that okay so now that we have that
72:39 - let's talk about the database aspect so
72:41 - we know what a flash message is we know
72:42 - to get information from the form
72:44 - let's do something with this this info
72:46 - so this is where it gets a little bit
72:48 - more complicated but still
72:49 - nothing crazy by any means we're going
72:51 - to go into our init.pi
72:53 - file actually we're going to start
72:54 - setting up our database so the first
72:56 - thing that we need to do
72:57 - is need to import sql alchemy so we're
72:59 - going to say from flask underscore sql
73:01 - alchemy
73:02 - import and then all capitals sql or sql
73:05 - and then alchemy
73:07 - now this is what we're using for the
73:08 - database and the first thing we need to
73:10 - do
73:10 - is define a new database we're going to
73:12 - say db equals sql alchemy
73:14 - and just initialize it like that
73:16 - underneath we're now going to pick our
73:18 - database name it's going to say
73:19 - database our db name is equal to
73:23 - database.db
73:24 - all right so now we have the name and we
73:26 - have the database object
73:28 - this is the object we're going to use
73:29 - whenever we want to add something to the
73:31 - database
73:32 - create a new user whatever we're going
73:34 - to use this object you'll see how this
73:35 - works
73:36 - so once we've done this we now need to
73:38 - tell flask
73:39 - that we are in fact using this database
73:42 - and
73:42 - where the database is going to be
73:44 - located because we actually need a file
73:45 - to store all of this in
73:46 - we're going to be using sqlite 3 to do
73:49 - this so we need to say app.config
73:52 - and then we're going to say this is sql
73:55 - alchemy i always spell this incorrectly
73:58 - underscore database underscore uri
74:02 - is equal to and then we're going to do
74:04 - an f string this is only going to work
74:06 - in python 3.6 above by the way if you
74:08 - this f string if you don't understand
74:10 - the f string i'll explain it in one
74:12 - second but we're going to say sqlite
74:14 - and then colon three slashes and then
74:18 - inside of brackets db underscore name
74:20 - so what i've just done here is i've said
74:22 - okay my
74:23 - sqlite or my sql alchemy database
74:27 - is stored or located at this location so
74:30 - sqlite3 our sqlite colon slash slash and
74:33 - then whatever the
74:34 - database name is which in this case
74:35 - we're calling database.db you can call
74:37 - it whatever you want
74:38 - but what this will do is it will store
74:40 - this database in
74:41 - the website folder so inside of the
74:43 - directory that this init.pi file is in
74:46 - so we're just telling flask where this
74:48 - is located now what we're going to do
74:49 - after this
74:50 - is we're going to initialize our
74:51 - database by giving it our flask app so
74:54 - we're going to say db
74:55 - dot init underscore app
74:59 - like that now again what this is going
75:01 - to do is just going to take this
75:03 - database that we defined here and and
75:04 - pretty much tell it hey
75:05 - this is the app we're going to use with
75:07 - this database this flask app that we
75:08 - just created
75:10 - so now that we've done that what we need
75:12 - to do is define some database models
75:15 - or tables right if you've worked with a
75:16 - database before then this is probably
75:17 - familiar to you
75:19 - but if we want to store something in our
75:20 - database we need to kind of define the
75:22 - schema of what that object is going to
75:24 - look like
75:25 - so anyways hopefully this is clear uh
75:26 - yeah the f string if i didn't explain
75:28 - when you put the f beforehand
75:30 - you can use these squiggly brackets and
75:32 - whenever you write inside of the
75:33 - squiggly brackets
75:34 - it can be like python code and it will
75:35 - be evaluated as a string
75:37 - so this is just going to evaluate to
75:38 - sqlite colon
75:40 - slash database.db because that's our db
75:42 - name all right so now
75:44 - let's actually go into our models.pi
75:47 - file
75:47 - and this is where we're going to create
75:48 - our database models i'm going to do them
75:50 - both right now just to make things
75:52 - simple
75:52 - but we want to have a database model for
75:54 - our users and we want to have a database
75:56 - model for our notes because we're going
75:57 - to be storing notes for this app right
75:59 - so i'm going to say import dot or sorry
76:02 - not import dot
76:04 - from dot import db
76:07 - now what i'm doing is i'm importing from
76:09 - the current
76:10 - package which is this website folder the
76:13 - db
76:14 - object now not db name just db notice
76:17 - that when i go to init.pi
76:18 - i have db defined this is what i'm
76:20 - importing because this is in a net dot
76:22 - pi
76:23 - if i say import from dot where even was
76:26 - i
76:27 - from dot import db that means from this
76:29 - package and i can access anything in the
76:31 - nit top pi
76:32 - import db so that's what we're doing
76:34 - when i say from dot that would be
76:35 - equivalent if we were outside of this
76:36 - directory
76:37 - directory from saying from website
76:39 - import db okay
76:41 - so now that we have that what we're
76:42 - going to do is we're going to say from
76:45 - flask underscore login module we've yet
76:47 - to use yet
76:48 - import like that user
76:52 - mixin now this is just a custom class
76:54 - that we can inherit
76:56 - that will give our user object some
76:59 - things specific for our flask login now
77:01 - you don't really need to worry about
77:03 - what this is but flask login is just a
77:05 - module that
77:06 - kind of helps us log users in and well
77:08 - our user object needs to inherit from
77:10 - user mix in which is what i'm importing
77:12 - right here
77:13 - anyway so we're going to do is we're
77:14 - going to define a class and whenever you
77:16 - want to make a new database model
77:17 - so you want to store a different type of
77:19 - object you're going to define the name
77:22 - of the object usually this is not plural
77:24 - you're just going to make it
77:26 - singular and then you're going to have
77:27 - it inherit from db.m
77:30 - so db again was that sql alchemy object
77:33 - that we created
77:34 - now for our user object in particular
77:37 - this is
77:38 - not for any other objects just for the
77:39 - user object what we're going to do
77:41 - is also inherit from user mixin
77:45 - so now inside of here what we will do is
77:47 - we will define
77:48 - all of the columns that we want to have
77:50 - stored
77:52 - in this table so we're essentially
77:53 - defining a schema or a layout
77:55 - for some object that can be stored in
77:57 - our database we're saying okay this
77:58 - object is going to have what
78:00 - well it's going to have an id it's going
78:01 - to have an email it's going to have a
78:02 - password what else do we want to store
78:04 - on it
78:04 - now it's just easier for me to do this
78:06 - all at once but let's jump in so i'm
78:08 - going to say id
78:09 - is equal to db dot
78:12 - column and then i'm going to define the
78:14 - type
78:15 - of column so for all of our objects we
78:18 - need to have what's known as a primary
78:20 - key
78:21 - whenever you create an object in a
78:22 - database we need some way
78:24 - to uniquely identify this object so
78:27 - for all of my users you know they could
78:29 - potentially have the same email now
78:31 - we're going to make it so you can't have
78:32 - that
78:33 - but let's say they have the same first
78:34 - name we need some way to differentiate
78:36 - them so we have something called a
78:38 - primary key
78:39 - which is a unique identifier typically
78:41 - an integer
78:42 - that represents our object and it's
78:44 - completely unique no other object in
78:46 - this database table
78:47 - in this database table sorry will have
78:49 - the same id so i'm going to say db
78:52 - dot integer this is the type of column
78:55 - and then i'm going to say primary key
78:56 - equals true so our id
78:58 - is our primary key which again is the
79:00 - unique identifier
79:01 - now for all of our objects we will have
79:03 - an id sometimes you call it something
79:05 - else but
79:05 - id is what we're going to use next what
79:07 - else do we want our user to store well
79:09 - we want to have
79:10 - an email for our user we want to have a
79:12 - password for our user and then we want
79:13 - to store their first name
79:14 - so i'm going to say email is equal to
79:16 - db.column
79:18 - you're almost always going to have
79:19 - db.column except for some specific cases
79:22 - and then you're going to define the type
79:23 - of the column so for our email well this
79:25 - is going to be a
79:26 - string the maximum length of this string
79:29 - we're going to say is 150. so whenever
79:30 - you define the string you need to pick a
79:32 - maximum length for it
79:34 - we're just going to go with 150 you can
79:35 - make it larger if you want doesn't
79:37 - matter
79:37 - then we're going to say unique equals
79:39 - true when we define this
79:41 - this means no user can have the same
79:44 - email as another user so it is invalid
79:46 - to create a user
79:47 - that has an email that already exists
79:50 - then we're going to say password is
79:51 - equal to db.column
79:53 - and inside of here we're going to say
79:55 - db.string
79:57 - and we're going to again define how long
79:59 - we want this to be and i'll make max
80:00 - 150. then we'll say our first name
80:04 - like that and honestly this should be
80:06 - camel case sorry
80:07 - is equal to and then db dot column
80:11 - and then we'll say db.string and make
80:14 - this 150 characters
80:17 - okay so now that we've done that we've
80:18 - set up our user model
80:20 - so we are going to store all of our
80:22 - users in a schema that looks like this
80:24 - so we can have multiple users obviously
80:26 - and all of them are going to have an id
80:28 - an email a password and a first name
80:30 - that's what this defines right here
80:32 - next what we're going to do is we're
80:35 - going to set up a
80:36 - an object called note so i'm going to
80:38 - say class note or sorry class called
80:40 - non-object this is going to inherit from
80:43 - db.model
80:44 - and this is going to be a much more
80:45 - general schema or much more general
80:48 - database model
80:49 - now in case you're confused a database
80:51 - model is just like a layout or a
80:53 - blueprint
80:54 - for an object that's going to be stored
80:56 - in your database so when i
80:57 - say user that means all my users have to
80:59 - conform to this
81:00 - right here when i say note this means
81:02 - all of my notes need to conform to what
81:04 - i have right here you're just telling
81:06 - the database software that like all
81:08 - notes need to look like this all users
81:10 - need to look like this
81:11 - so you know all your information is
81:12 - always going to be consistent anyways
81:15 - this user one was a bit different right
81:16 - because we inherited from user mixin
81:18 - i'm not going to really i don't want to
81:20 - go in too much depth on what this means
81:22 - but it's just to do with the fact that
81:23 - we're using this flask login module
81:25 - if we weren't using flask login we were
81:27 - doing this completely from scratch by
81:29 - ourself we wouldn't inherit from this
81:30 - class
81:31 - anyways now we have class note inherits
81:34 - from db.model this is a much more
81:36 - general class
81:37 - what we're going to do is define very
81:38 - similar things to what we defined in
81:39 - users so first we're going to say id
81:41 - all our notes need to have unique id is
81:44 - db.column
81:46 - db.integer and then primary key
81:49 - equals true now it's worth noting that
81:51 - by default
81:52 - when you add a new object you do not
81:54 - need to define its id
81:56 - it will automatically be set for you so
81:57 - the database software is smart enough to
81:59 - just increment the ids
82:00 - so that they're always unique and the
82:03 - next id inserted will simply be
82:04 - id plus one of the last id that was
82:07 - inserted in the database
82:08 - all right now for our note what do we
82:11 - want to store
82:12 - well we want to store the data
82:13 - associated with the note now you could
82:14 - call this text too doesn't matter
82:16 - and i'm going to say this is db.com
82:19 - db.string
82:20 - and our notes will be at most let's go
82:23 - 10 000 characters long now
82:25 - you know someone could make a note
82:26 - longer than that but let's just go with
82:27 - 10 000 characters
82:29 - and then we want the date that this note
82:32 - was created at so db.column
82:34 - db dot and then date time
82:37 - and inside of date time i'm going to say
82:39 - time zone equals true so it's going to
82:41 - store time zone information as well
82:43 - and then lastly i'm going to say the
82:46 - default value of this field
82:48 - is going to be equal to and i need to
82:50 - import something now i'm going to say
82:51 - from
82:52 - sql alchemy dot sql you will already
82:55 - have this if you imported or sorry if
82:57 - you installed flask sql alchemy
82:59 - and i'm going to import funk now this is
83:01 - very strange but essentially
83:02 - what i'm doing here is i'm making it so
83:04 - that we don't need to
83:06 - specify the date field ourself we just
83:08 - let sql alchemy take care of this
83:10 - whenever we create a new note it will
83:12 - automatically
83:13 - add the the date for us now we do that
83:16 - by saying the default is equal to
83:18 - func.now
83:19 - what funk does is it just gets
83:22 - the current date and time and it will
83:24 - just you know store that as a default
83:25 - value for our date
83:27 - so whenever we create a new note object
83:29 - it will just call func it will get
83:30 - whatever time it is and then it will use
83:32 - that to store in the date time field
83:34 - and it will store the time zone
83:35 - information of this date time object as
83:38 - well
83:38 - alright great so we have that next we
83:41 - are going to
83:42 - actually allow us to associate this a
83:43 - note with our user so
83:46 - all of our notes must belong to a user
83:49 - right
83:49 - now this is the point where i'm showing
83:50 - you how you associate
83:52 - different information with with
83:54 - different users if we have notes
83:56 - and we want to have notes that are being
83:58 - stored for each user like each user has
84:00 - multiple notes
84:01 - we need to set up a relationship between
84:03 - this note object right here
84:05 - and our user object now we do this in
84:08 - the form of a foreign key
84:09 - so a foreign key essentially is a key on
84:12 - one of your database tables
84:14 - tables that references an id to another
84:17 - database
84:18 - uh column so a foreign key
84:21 - is essentially a column in your database
84:24 - that always references a column of
84:27 - another database
84:28 - so in this instance for every single
84:30 - note
84:31 - we want to store the id of the user who
84:34 - created this note
84:35 - so i'm going to say user underscore id
84:38 - is equal to db
84:40 - dot column and then inside of here i'm
84:42 - going to say well
84:43 - what is the id field for my user well
84:46 - it's an integer so i need to match this
84:48 - because this user id column here or
84:51 - field is always going to store
84:53 - an id of one of the users so i'm going
84:55 - to say db.integer
84:57 - and i'm going to say db dot foreign key
85:01 - did i spell foreign incorrectly i did
85:03 - foreign key
85:04 - and then here we're going to say user
85:06 - dot id now
85:08 - this is where i need to kind of go into
85:09 - some more depth here we're saying that
85:12 - the type of column
85:12 - is integer and by specifying foreign key
85:15 - what this means is we must
85:17 - pass a valid id of an existing user
85:21 - to this uh field or to this column when
85:23 - we create a node
85:24 - note object this is what we call a one
85:27 - to many
85:27 - relationship where we have one user that
85:30 - has many notes
85:31 - now i don't really want to get too much
85:33 - into databases this is something that
85:34 - you you kind of need to look up on your
85:36 - own and learn about that's not the
85:37 - purpose of this tutorial here
85:39 - but when you have a one-to-many
85:41 - relationship
85:42 - you have one object that has many
85:45 - children now in this case we have one
85:46 - user that has
85:47 - many notes so what we do is we store a
85:49 - foreign key
85:50 - on the child objects that reference the
85:53 - parent object
85:54 - so now every time we have a note we can
85:58 - figure out
85:58 - which user created it by looking at the
86:01 - user id
86:02 - and again this db.foreign key enforces
86:04 - that we must give a valid user id
86:07 - to this object otherwise we cannot
86:09 - create it because we have a relationship
86:11 - between the user and the note
86:12 - now user.id where am i getting this from
86:15 - well the name of our tables by default
86:17 - are underscore so in python we use
86:20 - capitals for the classes because that's
86:21 - the convention
86:22 - but in sql this user class here will
86:25 - actually be represent
86:26 - represented by user so that's why i'm
86:29 - putting user here
86:30 - with a lowercase u now id that's the
86:32 - field
86:33 - of this user object so i'm referencing
86:35 - the id field
86:36 - if the primary key was represented by
86:38 - say like name or email then i would do
86:40 - email
86:41 - but you just put the the primary key of
86:44 - the other object that you're referencing
86:46 - where other table you're referencing in
86:47 - this case user.id
86:49 - great so now we have that and now what
86:51 - this means is that from each note
86:53 - we can reference who created it but we
86:55 - don't just want that
86:56 - we want from all users to be able to
86:59 - find all of their notes
87:00 - so what we need to do now is we need to
87:02 - set up a field on our user
87:04 - that says notes and is equal to a db dot
87:07 - relationship with what well with the
87:11 - note
87:11 - table now what this will do is
87:15 - it will pretty much tell flask and tell
87:16 - sql alchemy
87:18 - do your magic and every time we create a
87:20 - note
87:21 - add into this user's notes relationship
87:25 - that note id so this relationship field
87:28 - will really be a list
87:29 - and it will store all of the different
87:31 - notes now that's not exactly how it's
87:33 - going to be represented
87:34 - but we will be able to access all of the
87:36 - notes that a user owns or has created
87:38 - from this notes field by denoting this
87:40 - db.relationship and then putting the
87:42 - name
87:42 - of the the other table that we're
87:45 - referencing now notice that here it's
87:46 - capital
87:47 - so you know it's not very consistent but
87:49 - you do need capital for this one
87:51 - don't ask me why it's just the way that
87:53 - sql alchemy works when you do the
87:55 - foreign key you have lower case
87:56 - and when you do the relationship you're
87:58 - referencing the name of the class
88:00 - which is obviously capital so hopefully
88:02 - that's clear i know i just went through
88:03 - a lot there
88:04 - um there's just so much to talk about
88:06 - when it comes to making websites
88:08 - so uh you know it is difficult to go
88:10 - through everything in absolute depth
88:11 - but this is the two database models that
88:13 - we're going to have now if we wanted to
88:15 - have another one
88:16 - we would just do the same thing so we
88:18 - wanted to have say you know maybe you
88:19 - could store videos on the platform or
88:21 - maybe you store
88:22 - reminders or whatever we would just set
88:24 - up another class so it's a class
88:26 - reminder it would inherit from db.model
88:29 - we would define all of the fields that
88:31 - we want to store for this reminder class
88:33 - and you can look these up on flask sql
88:35 - alchemy
88:36 - and then we would add the foreign key to
88:39 - our user
88:39 - now this foreign key that i showed you
88:41 - is only when you have a one-to-many
88:44 - relationship
88:45 - so one user having many notes now if you
88:47 - had a many to one
88:48 - that means you can have like one note
88:50 - belonging to many users right
88:52 - so there's different relationships
88:56 - you have between objects i just showed
88:57 - you one to many which is the most common
89:00 - you can also have one-to-one and many to
89:03 - one so you will have to look up how
89:04 - those work but there's lots of
89:05 - documentation online
89:07 - anyways we should finish that now we did
89:09 - the database
89:11 - now what we need to do is we need to
89:12 - actually create this
89:14 - database so we've set it up we've
89:16 - defined what it will look like
89:17 - but we need to create it so we're going
89:19 - to go inside of a nit.pi
89:21 - we're going to write a little script
89:23 - that's going to check
89:24 - before we run this server every time if
89:26 - we have created the database yet
89:28 - so the first thing we're going to do is
89:30 - after we register our blueprints here
89:33 - we're going to say from dot models
89:36 - and we're going to import our user and
89:39 - we're going to import
89:40 - our note now you could just import
89:43 - models like you could just just say
89:45 - import models like that like either
89:47 - works doesn't matter um
89:49 - and sorry it's not going to be models
89:50 - it's going to be dot models just like
89:52 - dot views and dot auth because we're
89:53 - doing the relative import
89:55 - the reason we import this is not because
89:56 - we're actually going to use anything
89:59 - it is because we need to make sure that
90:02 - we
90:02 - load this file and that this file runs
90:04 - this models.pi file runs and defines
90:06 - these classes
90:07 - before we initialize or create our
90:09 - database so we
90:11 - import the models file so that it
90:12 - defines
90:14 - these classes for us and then we can go
90:17 - ahead and create our database so i'm
90:18 - going to write a function
90:20 - i'm going to say define create database
90:23 - and this is going to take app now what
90:25 - this is going to do
90:26 - is it's going to check if the database
90:29 - already exists
90:30 - and if it does not it is going to create
90:32 - it because if it does exist we don't
90:33 - want to override it because it has data
90:35 - in it already
90:36 - so we're going to go to the top of our
90:37 - program and we're going to say from os
90:40 - which stands for operating system import
90:42 - path
90:44 - and then what we will do is we will use
90:45 - this path module to determine whether
90:48 - or not the path to our database exists
90:49 - we'll say if not
90:51 - path and then inside of here we're going
90:53 - to say website assuming you called your
90:55 - folder here website if you change the
90:56 - name you'd have to change that
90:58 - and then plus db underscore name
91:01 - uh and sorry this is path dot exists
91:04 - so if path dot exists website plus db
91:07 - underscore name
91:08 - then db dot create underscore all
91:11 - app equals app and then we will just
91:14 - print
91:16 - created database exclamation point then
91:18 - we'll run this function
91:20 - so we'll just do it here create no
91:23 - not create app create database and then
91:26 - pass app
91:27 - so the way this works we use the path
91:29 - module
91:30 - check if the database exists if it
91:32 - doesn't exist we create it that's what
91:34 - db.createall does
91:35 - the reason we need to pass app is
91:37 - because we need to tell flask sql
91:38 - alchemy
91:39 - which app we're creating the database
91:40 - for because obviously if it's a
91:42 - different app then things are going to
91:43 - change
91:44 - and this app also has the sql alchemy
91:47 - database uri on it which tells us where
91:49 - to create the database
91:51 - so i'm going to save that and now we
91:53 - will have actually set up this flask sql
91:56 - alchemy
91:57 - all right yeah whatever database
91:58 - whatever you want to call it so now
91:59 - let's run this
92:01 - uh and from import.models what's wrong
92:03 - with import.models
92:05 - i might have to do from.models
92:09 - import sorry and then
92:12 - user actually it's not that it's
92:15 - import dot models as models
92:19 - okay so the reason i got this error it
92:21 - was saying i couldn't import dot models
92:22 - is because
92:23 - we need to if we have a relative import
92:26 - rename what we've imported this as is
92:29 - something that doesn't start with a
92:30 - period because i can't reference
92:32 - like i can't do dot models dot user i
92:35 - can't reference the user class like that
92:36 - because i can't
92:37 - start a variable with a dot so we just
92:40 - need to change the name that we import
92:42 - this as to something that doesn't start
92:43 - with a dot so models
92:45 - and now this should work so import dot
92:47 - models as models because it's a relative
92:49 - import
92:50 - so let's try this and still an error
92:52 - right we might need to actually just do
92:53 - this
92:54 - from dot models import user
92:58 - and import what do you call it so i
93:00 - always get we have note
93:02 - so i guess i can't even do what i just
93:04 - did i thought that was going to fix the
93:05 - issue i don't often run into this but i
93:07 - believe
93:08 - if we're having a relative import i
93:09 - guess we just have to use
93:11 - from and then import all of the classes
93:14 - or whatever we want from that we also i
93:15 - could
93:15 - get guests could import star which just
93:18 - means import everything
93:19 - let's in fact let's do that so let's run
93:21 - this and now
93:22 - define create app uh there's an issue
93:25 - with this what's it saying
93:27 - line nine star only allowed at module
93:29 - level great okay so let's not import
93:31 - star
93:32 - i can't get past the damn import
93:33 - statement let's import user and
93:35 - let's import what else was it note
93:40 - okay i apologize about that guys but
93:41 - issues do happen
93:43 - yeah anyways let's run this down okay so
93:45 - all is working looks like this is the
93:47 - way we're going to have to import it if
93:48 - any
93:48 - python experts are there in the in the
93:50 - comments please let me know why that
93:51 - wasn't working
93:52 - and now let's go and refresh okay
93:56 - uh okay well that was the post request
93:58 - that refreshed anyways
93:59 - all is working on the website login log
94:02 - out
94:04 - sign up home and now look we have a
94:06 - database.db
94:08 - created in our directory awesome so
94:10 - we've now created these tables
94:12 - now that we've done this we can actually
94:14 - do some more interesting coding we can
94:15 - get out of this init.pi file
94:17 - and we can start using our our sign up
94:20 - method right here our signup function to
94:22 - actually create an account
94:24 - so in our else statement so assuming all
94:26 - of this stuff is correct what we're
94:27 - going to do is create a new user
94:30 - so this is actually super simple uh what
94:32 - we're going to do
94:33 - is we're simply going to say user or
94:37 - new underscore user is equal to user
94:41 - like that we're going to say the email
94:43 - for this user is equal to email
94:46 - we're going to say that the first name
94:48 - of this user
94:49 - is equal to the first name and then
94:51 - we're going to say that the password
94:53 - is equal to and then we're going to hold
94:55 - off for a sec because i need to import a
94:57 - few things
94:57 - so what i'm doing is i'm creating a new
94:59 - user this user is
95:01 - the user that i defined in my models.pi
95:03 - file right so user right here so what i
95:05 - need to do now
95:06 - inside of auth.pi is need to import that
95:08 - so i'm going to say from
95:09 - dot models
95:12 - imports user so now i have the user
95:15 - imported
95:16 - so now i can actually you know use this
95:18 - right here
95:19 - but what i also need to do is i need to
95:21 - import a few things from flask login
95:23 - that are going to allow me to hash a
95:25 - password so i'm going to say
95:27 - from and then this is work zuberg
95:30 - or work zug i don't know how you say
95:32 - this dot
95:33 - security import generate password hash
95:38 - and check password hash so if you're
95:40 - unfamiliar with the hash
95:42 - essentially it is a way to secure a
95:43 - password such that you are never storing
95:45 - a password in plain text
95:47 - so you never want to store a password as
95:50 - what the actual password is you want to
95:53 - somehow kind of change that password or
95:55 - convert that password
95:56 - into something that is just much more
95:59 - secure now
96:00 - we call that a hash now i need to
96:02 - discuss what a hashing function is to
96:04 - explain a hash but a hashing function is
96:06 - a one way function
96:07 - such that it does not have an inverse
96:09 - now what does that mean well
96:10 - if we have a function x maps to y
96:13 - let's say we have a function f of x
96:15 - equals x plus one okay
96:17 - this is a function that does have an
96:19 - inverse now the inverse of this function
96:21 - or what is an inverse well inverse means
96:24 - given y
96:25 - which is x plus one like x plus one
96:27 - would be y you are able to get back to
96:30 - x so the inverse of f of x is
96:33 - f of y is equal to
96:36 - y minus 1. now what this function does
96:39 - is it takes y
96:40 - and it maps it to x the way this works
96:43 - is that if i know
96:44 - x plus 1 is what gave me y then i know i
96:47 - can find what the original x was by just
96:49 - subtracting 1 from whatever this
96:51 - function gives me
96:52 - right so if f of x if i call f of 2
96:55 - and that gives me 3 then i can say f of
96:58 - 3
96:58 - and that gives me 2 then this function
97:01 - here let's just let's just call this g
97:03 - sorry or f prime then f prime
97:06 - at 3 giving me 2 is the inverse of f
97:09 - x now there's a lot of math going on
97:12 - here
97:12 - but hopefully you get the idea
97:14 - essentially if you're given the output
97:15 - you can find the input
97:16 - that's when inverses now a hashing
97:18 - function is a function that has
97:20 - no inverse that means that you can
97:22 - generate
97:23 - a hash with it so given some x it will
97:26 - always generate the same value y
97:29 - but given a y you cannot find
97:32 - what the x was now the reason this is
97:34 - important is because when you generate a
97:36 - hash
97:36 - what you do is you pass the password to
97:39 - this hashing function
97:40 - as x and it spits out some y but with
97:43 - that y
97:44 - you can never find what the original
97:46 - password was
97:47 - you can only check if the password you
97:49 - type in
97:50 - is the correct password by running it
97:52 - through the same hashing function
97:54 - so if i run my password that i'm you
97:56 - know typing in to try to sign into
97:58 - account through a hashing function
97:59 - and it equals the hash that means the
98:02 - password was correct
98:03 - but if i'm just given the hash there's
98:05 - no way for me to check
98:06 - what the password is so hopefully that's
98:09 - clear
98:10 - it's hard to explain without like
98:11 - writing anything out i'm just you know
98:12 - typing in this editor
98:14 - but the idea is that you're never
98:15 - storing the password in plain text and
98:16 - if you hash the password you can never
98:18 - return to the original password you can
98:20 - only check if the password you type in
98:23 - equals the hash that's stored that's how
98:26 - it works so when we store our password
98:27 - the whole point of this was to say
98:28 - we're going to store it with a hash
98:30 - we're going to generate password hash
98:32 - and we're going to pass the password 1
98:35 - here
98:36 - we know that password 1 and password 2
98:37 - will be the same so it doesn't matter
98:38 - what we pass
98:39 - then we'll say the method is equal to
98:42 - and then
98:43 - shot 256 which is just a hashing
98:45 - algorithm
98:46 - uh you can pick a different hashing
98:47 - algorithm if you want but just go with
98:49 - shot 256 if you don't know
98:51 - which one to choose there's all kinds of
98:52 - videos online if you're more interested
98:54 - in hashing it's actually a
98:55 - pretty interesting thing so anyways now
98:57 - that we have that password
98:59 - defined what we need to do is we need to
99:02 - add
99:02 - this this account to our database so
99:05 - we've defined the user
99:06 - but if we want to actually add this to
99:08 - the database what we need to type is the
99:09 - following
99:10 - db.session dot add
99:13 - new user what this means is add the new
99:16 - user
99:17 - to the database then what we need to do
99:19 - is we need to make a commit
99:21 - to the database so we need to pretty
99:22 - much say hey we've made some changes in
99:24 - the database
99:25 - update it we do that by saying
99:28 - db.session.commit
99:30 - so now that we've done that we're all
99:32 - good and this will actually create a new
99:34 - user for us
99:35 - so after we create the new user we will
99:37 - flash the message saying hey
99:39 - account was created awesome success and
99:41 - then we are going to
99:42 - redirect the user to the home page of
99:45 - the website because after they create
99:46 - their account
99:47 - we should sign them in and then they
99:48 - should be redirected to the homepage so
99:50 - what i'm going to do now
99:51 - is i'm going to import from flask
99:53 - something called redirect
99:55 - and something called url4 so i think
99:58 - these are pretty intuitive
99:59 - to understand what i'm going to do with
100:00 - them but what we're going to do after we
100:02 - flash this message
100:03 - in the the else statement here is we're
100:05 - going to return
100:07 - a redirect to the url for the home page
100:10 - that's what we're going to write so
100:11 - we're going to say return
100:13 - redirect which means redirect us to
100:15 - another page and then we're going to say
100:16 - where do we want to redirect well we
100:18 - want to redirect to the url
100:20 - for views.home now the reason i'm doing
100:22 - this is because
100:23 - views is the name of my blueprint so we
100:26 - go here we have views
100:27 - home is the name of my function so i'm
100:29 - finding what url
100:31 - maps to this function now i could just
100:34 - put in a slash
100:35 - like i could redirect uh to just a slash
100:38 - here and this would work the same
100:39 - but that means if i ever changed the url
100:42 - uh and oops
100:43 - this sorry this should not be in a
100:45 - string this url for
100:47 - sorry that means if i ever were to
100:48 - change the url
100:50 - for that home function i would need to
100:52 - come in here and change this so it's
100:53 - better to use url for
100:55 - and just do the blueprint name and the
100:56 - function name that you want to go to
100:58 - that way if the root for that ever
100:59 - changes this will pick it up
101:01 - so that's what this do this is doing is
101:03 - just finding the url associated with
101:04 - this function
101:05 - all right so now that we have this
101:07 - what's going to happen is we're going to
101:08 - actually create the account
101:10 - and then it's going to redirect us to
101:11 - the home page after we send the post
101:12 - request
101:14 - from signing up so let's create an
101:15 - account let's actually i need to rerun
101:17 - the web server here so let's
101:19 - do that and now if i go here
101:22 - i will refresh i will go to sign up and
101:25 - let's make an account so let's say tim
101:27 - gmail.com let's go tim make our password
101:31 - pretty basic does need to be at least
101:32 - seven characters and we'll press submit
101:35 - and it says first name is an invalid
101:37 - keyword argument
101:38 - for user okay interesting so that means
101:40 - that we must invest something up in our
101:41 - models file
101:42 - so let's go to models up high and what
101:45 - does it say here
101:46 - uh first underscored name that's why
101:48 - okay so now let's go to views.pi or
101:51 - auth.pi
101:52 - and i realize that i've just i've just
101:53 - named this argument wrong so i need to
101:55 - say first underscore name
101:57 - equals first underscore name
102:00 - uh and did i ah so let's go over here
102:03 - okay
102:03 - so i just changed this to be first
102:05 - underscore name instead of the camel
102:06 - case first name which i should have done
102:08 - anyways
102:08 - that was just a habit i guess to do it
102:10 - the other way uh but yeah we have first
102:12 - underscore name
102:12 - equals first underscore name and in case
102:14 - i wasn't clear here you just define
102:16 - all of the fields that you have in
102:17 - models.pi and then you set them equal to
102:20 - whatever they're equal to right which is
102:22 - what we did anyways let's
102:23 - run this now uh let's just refresh
102:26 - because this should just resubmit the
102:27 - post request
102:28 - and then first name is not defined where
102:31 - is this uh oh l if len of first name
102:33 - of course we we need to change this so
102:35 - let's go first
102:36 - underscore name okay
102:39 - and let's refresh continue and now it's
102:43 - the issue db is not defined
102:44 - of course db is not defined we didn't
102:46 - import db so these are the kind of
102:47 - issues you run into all right so now we
102:49 - have to import db
102:50 - so we're going to say from dot import db
102:54 - great and that's again from the init.pi
102:56 - file we already showed that previously
102:58 - okay so now we have everything imported
102:59 - that we needed uh hopefully this should
103:01 - work let's refresh and send again
103:03 - and there we go account created that
103:05 - means we actually did create this
103:06 - account and it redirected us
103:08 - to the home page so now what we need to
103:11 - do
103:11 - is we need to actually kind of signify
103:13 - the fact that a user is signed in
103:15 - and has created an account we need to
103:16 - let a user log in right or
103:18 - sign in now that they have the account
103:20 - so let's do that
103:21 - let's handle the sign in form now or the
103:24 - login form
103:25 - so inside of here i'm just going to
103:26 - start kind of coding some stuff out
103:28 - i'm going to say if request.method
103:31 - equals equals post so if we are actually
103:34 - signing in and we're not just getting
103:35 - the page
103:35 - we want to get the email and the
103:37 - password from the form so we're going to
103:38 - say email
103:39 - equals request.form.get
103:43 - and then we want the email and then
103:45 - we're going to say
103:46 - password equals and then
103:48 - request.form.get
103:50 - and then of course we want the password
103:53 - all right now what i'm going to do is
103:55 - i'm going to check
103:56 - if the user email that we've typed in
103:58 - here or that was sent to us in this form
104:01 - is valid if we actually have a user that
104:03 - has that email in the database
104:05 - now this is going to show you how you
104:07 - actually kind of query the database and
104:09 - look for specific entries so i'm going
104:10 - to say user
104:12 - is equal to user which is the database
104:14 - name right and then dot query
104:16 - dot filter by this is what you do when
104:19 - you are looking
104:20 - for a specific entry in your database or
104:23 - a specific user whatever it is
104:25 - and you want to look by a specific
104:26 - column or by specific field so i'm going
104:28 - to say
104:29 - email equals email now this means filter
104:32 - all of the users that have this email
104:35 - right here that's what i'm saying if i
104:37 - was looking by id
104:38 - i'd say id equals and then whatever the
104:40 - id was
104:41 - okay so email equals email and i'm going
104:43 - to say dot first
104:44 - what this will do is return the first
104:46 - result now there should only be one
104:48 - result
104:49 - if there is any results because we might
104:51 - not have a user that has this email
104:53 - but if we do we should only have one
104:55 - because each user must have a unique
104:57 - email
104:57 - so what we'll do now is we'll say if
104:59 - user so if we did
105:01 - actually find a user then we need to
105:03 - check if
105:04 - the password they typed in is equal to
105:07 - the hash that we have stored on the
105:08 - server so we're going to say
105:09 - if check underscore password hash we're
105:12 - going to
105:13 - pass the user.password
105:16 - which is whatever user we found here
105:18 - whatever their password is we access
105:20 - with dot password
105:21 - if i wanted to access their email i
105:23 - would say dot email if i want to access
105:25 - their name i would say first underscore
105:26 - name
105:27 - so we say user.password and then
105:29 - password which is the password that we
105:31 - got from the form
105:32 - so if this is the case if these hashes
105:35 - are the same which is what this function
105:36 - will do is just compare
105:37 - it with it will hash this password and
105:39 - then check it against this password
105:41 - essentially
105:42 - if that's the case we logged in
105:43 - successfully so let's say flash
105:45 - and then we'll say logged in
105:49 - and then successfully like that okay and
105:53 - let's do an exclamation point
105:55 - category equals
105:58 - success okay now if that's not the case
106:01 - then we need to make sure that we tell
106:02 - the user hey no you didn't log in that
106:04 - was incorrect wrong password whatever
106:06 - so if the password is wrong then let's
106:08 - flash a message and let's say
106:10 - incorrect uh password like that
106:13 - maybe try again okay
106:16 - and then category is going to be equal
106:19 - to
106:20 - error and then if the user doesn't exist
106:24 - then we need to tell them that hey there
106:25 - was no user with that email so we're
106:27 - going to say flash
106:28 - and then email does not exist
106:32 - and then category equals
106:36 - error okay and that's
106:39 - all we need for this but before i do
106:42 - this it just reminds me one thing
106:43 - when i was writing this we need to make
106:45 - sure that when we sign up a user
106:47 - that that user does not already exist
106:49 - right we need to make sure that the
106:50 - email they're using
106:51 - doesn't already exist or a user doesn't
106:53 - already have that email so the first
106:54 - thing we're going to do inside of here
106:56 - is the exact same thing we just did here
106:57 - we're going to say user equals
106:59 - user.query.filterby
107:00 - email equals email.first i'm going to
107:02 - copy that it's going to be our first
107:04 - line
107:05 - and now we'll change this to an alif and
107:08 - we'll go
107:10 - actually we'll just go user and then
107:12 - we'll say if
107:14 - user so if there actually is a user then
107:16 - we'll just tell them
107:17 - hey no this email already exists
107:23 - okay so now we will say the category
107:26 - equals and then error great so that's
107:29 - going to make sure
107:30 - uh query the user make sure that we're
107:32 - not signing up users with the same yield
107:35 - okay sweet so now we have that so the
107:37 - login and signup forms are pretty much
107:39 - done let's go back to the website after
107:41 - i rerun this here i guess it crashed for
107:43 - some reason
107:44 - and let's give this a refresh so now
107:46 - let's let's just us
107:47 - log out doesn't do anything but we can
107:49 - go to login and let's see if we can
107:52 - create a new account with another email
107:54 - and then sign it so let's try with tim
107:56 - gmail.com which i think is an email that
107:58 - already exists
107:59 - in fact let me just submit this and
108:00 - notice it tells me already email already
108:02 - exists so great that's working all is
108:03 - good so actually let's sign in as that
108:05 - user
108:06 - so tim gmail.com i'm going to type an
108:10 - incorrect password
108:11 - and incorrect password try again awesome
108:13 - so now let's try again
108:15 - team gmail.com one two three four five
108:17 - six seven which is the password and
108:19 - logged in successfully so that did
108:21 - actually work now again i know this
108:22 - isn't really bringing us anywhere but
108:24 - that's the next step
108:25 - so now that login and sign up is working
108:28 - first of all from login if we log in
108:30 - successfully we need to redirect the
108:33 - user
108:33 - to the home page we're going to say
108:35 - return redirect
108:37 - url for views.home just like we did in
108:40 - the signup page
108:42 - all right awesome so we're getting very
108:43 - close to being done here um i mean we
108:45 - have to add the notes and stuff but like
108:46 - we've done most of the hard stuff
108:47 - already
108:48 - now that we can log in and we can sign
108:50 - up we need to be able to log out
108:53 - we also need to make it so that you
108:54 - can't access the home page unless you're
108:56 - signed in right
108:57 - we want to prompt you to log in or to
108:59 - sign up for an account
109:00 - if you haven't done so already so now we
109:03 - need to make it so that
109:04 - first of all you don't see this home
109:05 - button if you're not logged in you can't
109:07 - access this home page if you're not
109:08 - logged in
109:09 - and if you're logged in it probably
109:10 - shouldn't say log in or sign up at the
109:12 - top it should probably only show you
109:13 - home and log
109:14 - out so how are we going to do that well
109:16 - this is where we're going to use flask
109:17 - login
109:18 - so this is makes life super easy i love
109:21 - the fact that this module exists
109:23 - we're going to start by just importing
109:24 - flask logins we're going to say from
109:26 - flask underscore login
109:28 - imports login user import
109:31 - actually login required yeah import
109:33 - login required
109:34 - and import log out user
109:37 - awesome so these are the functions we're
109:39 - going to use to log in our user we're
109:41 - also going to import
109:42 - something called current user which is
109:43 - going to represent or hold the current
109:46 - user
109:46 - now this is the reason why we needed to
109:48 - in our models file have this user mix in
109:51 - so that we can use this current user
109:54 - object here to access all of the
109:56 - information about the currently logged
109:58 - in user
109:59 - so anyways what we're going to do now is
110:01 - inside of login
110:02 - after we log in we're going to say login
110:06 - user
110:07 - we're just going to pass our user like
110:08 - that so the user that we found here that
110:10 - we have the correct password for
110:12 - this is the user we're logging in that's
110:14 - all we need to do this is going to log
110:16 - in the user
110:16 - last thing we'll say remember equals
110:19 - true
110:20 - now what this does is this remembers the
110:22 - fact
110:23 - that this user is logged in until the
110:25 - user i guess
110:26 - clears their browsing history or their
110:28 - session
110:30 - this is going to store in the flask
110:31 - session so after you restart the flask
110:34 - web server
110:34 - this will no longer be true but if the
110:36 - web server is running
110:38 - it's hard to describe when this is is
110:40 - not going to remember the user but
110:41 - essentially just think of it as
110:43 - unless some circumstance occurs where
110:45 - the user like clears their
110:46 - browsing history or the web server
110:48 - restarts
110:49 - flask going to remember that this user
110:51 - was already logged in so they don't need
110:52 - to log in
110:53 - every single time they go on the website
110:55 - anyways login user user remember equals
110:57 - true
110:58 - now we're going to do the same thing so
110:59 - just copy this line in sign up
111:01 - so after we successfully sign up user
111:04 - we're going to log them in as well
111:05 - because
111:06 - well they should be logged in after they
111:07 - create their account and then
111:09 - we'll now do the log out function or the
111:11 - log out
111:12 - route here so in logout what we want to
111:15 - do first of all is we want to return
111:17 - the redirect for the for
111:20 - and then we're going to just redirect uh
111:22 - to auth.login
111:24 - which is uh just going to be this right
111:26 - here we're doing that because after they
111:28 - log out usually just bring them back to
111:30 - the sign in page right
111:31 - and then all we're going to do inside of
111:32 - here is we're going to say log out user
111:35 - and we don't need to pass a user we just
111:36 - say log out user and it will log out the
111:38 - current user
111:39 - now lastly we're going to add a
111:41 - decorator to this
111:43 - this function here that says login
111:45 - underscore required
111:46 - now all this does is this makes sure
111:49 - that we cannot
111:50 - access this page or this route unless
111:52 - the user is logged in and this makes
111:54 - sense right we don't want to be able to
111:56 - log out
111:56 - if we're not logged in now that's not
111:58 - going to cause an issue but it just
111:59 - makes sense to add this decorator so we
112:01 - will
112:02 - so we have that for log out now and now
112:04 - i'm going to copy
112:06 - this line i'm going to go to views.pi
112:09 - i'm going to show you how we can do this
112:10 - in here so now all we need we don't need
112:12 - login or
112:14 - log out user we'll get rid of those
112:15 - we're going to keep login required in
112:17 - current user though
112:18 - and we're going to add a login required
112:20 - decorator to our home page
112:21 - so now you cannot get to the home page
112:24 - unless
112:25 - you log in and there you go now the last
112:28 - thing we need to do here when we're
112:29 - using flask login
112:31 - is we need to tell our flask in general
112:34 - how we actually log in a user how we
112:36 - find a user so we need to go to our
112:38 - nit.pi file
112:40 - and inside of here we're going to say at
112:42 - the very top
112:43 - from flask underscore login
112:46 - import login manager
112:50 - login manager is what it says it's going
112:52 - to help us manage all of the
112:53 - logging in related things so at the top
112:56 - here
112:56 - under db.net app we're going to say the
112:59 - following we're going to say
113:00 - log in underscore manager equals
113:03 - login manager just like that we're then
113:06 - going to say
113:07 - login underscore manager dot login view
113:10 - so where do we need to go if we're not
113:12 - logged in so essentially where should
113:14 - flask redirect us if the user's not
113:16 - logged in and there's a login required
113:18 - well we want to redirect to auth.login
113:21 - name of our template
113:22 - name of our function right and then
113:24 - we're going to say login underscore
113:26 - manager dot init underscore app
113:29 - and then pass it the app so telling the
113:31 - login manager which app we are using
113:33 - then lastly we're going to define a
113:35 - function here we're going to say at
113:37 - login manager underscore manager dot
113:40 - user loader and we're going to say
113:43 - define
113:44 - load underscore user is going to take an
113:46 - id
113:47 - and inside of here we're going to return
113:49 - the user
113:50 - dot query dot get
113:53 - int id now i'm going to describe this in
113:55 - a second but sorry take
113:57 - all this code we need to put it below
114:00 - when we import this model here so
114:02 - actually below the database after we
114:04 - create the database
114:05 - then we're going to do this now i'll go
114:08 - through this but i think these three
114:09 - lines are straightforward
114:10 - what this is doing is this is telling
114:13 - flask
114:14 - how we load a user now user.query.get
114:18 - this works very similar to filter by
114:20 - except by default it's going to look for
114:22 - the primary key
114:23 - so when you use get you don't have to
114:25 - specify like id
114:26 - equals id it just knows that it's going
114:28 - to look for the primary key
114:29 - and check if it's equal to whatever we
114:31 - pass which is the int version
114:33 - of whatever id is passed to this load
114:35 - user
114:36 - now you don't really need to know much
114:38 - more about this but we're just
114:40 - pretty much telling telling flask here
114:42 - what user we're looking for we're
114:44 - looking for the user model and we're
114:45 - going to reference them by their id
114:47 - and that's what this decorator here is
114:49 - doing it's saying you know use this
114:51 - function to load the user
114:52 - if you had more advanced loading of
114:54 - users and obviously you would have to
114:55 - change this function but
114:56 - hopefully that's clear again it doesn't
114:58 - matter too much if you understand that
115:00 - or not just we have to use for login
115:01 - manager and for
115:02 - for flask lock-in okay so now that we
115:04 - have that
115:06 - i think that's pretty much all we need
115:08 - so let's re-run this here and let's
115:10 - check if this is working
115:11 - so let's refresh uh please log in to
115:14 - access this page
115:14 - notice we're getting that popping up so
115:16 - to access this page
115:18 - that's i i don't know why it's showing
115:20 - me this message because i don't think we
115:21 - um
115:22 - we implement this anywhere but if i go
115:23 - to home it keeps saying that
115:25 - log out i mean it's not doing anything
115:27 - because login is required right
115:29 - if i go to sign up i can sign up go to
115:31 - in i can log in so let's log in
115:32 - tim gmail.com and let's go with
115:36 - my password and boom logged in now we
115:39 - can access the home page awesome
115:41 - so now if i go to login i mean it brings
115:43 - me there i can go back to the home page
115:44 - because i'm currently logged in
115:46 - if i log out it redirects me to the
115:48 - login page and i can no longer access
115:50 - the home page
115:52 - so that is how that works that's what
115:54 - flask login does for us it kind of
115:56 - manages what pages we can access and
115:58 - what ones we can't
115:59 - and stores the fact that users logged in
116:01 - or not so now i want to show you how we
116:03 - can change this nav bar so it only
116:04 - displays the correct icons
116:06 - so this current user thing that i had
116:09 - imported in
116:10 - views.pi this is what we're going to use
116:12 - to detect whether a user is logged in or
116:15 - not
116:15 - so this current user has a bunch of
116:17 - attributes if the user is logged in it
116:19 - will give us all the information about
116:20 - the user so their name their notes their
116:22 - email
116:23 - anything on the user model we can access
116:25 - from current user
116:27 - if the user is not logged in then it
116:29 - will tell us that this user
116:30 - is i believe what's known as an
116:32 - anonymous user and it is not currently
116:34 - authenticated because we've not signed
116:35 - in
116:36 - so what we're going to do is we're going
116:38 - to pass to our home
116:40 - template user equals
116:43 - and then current user now what this
116:46 - means is that we will be able to in our
116:48 - template
116:49 - reference this current user and check if
116:52 - it's authenticated so let's go to our
116:53 - home.html template
116:56 - and inside of here actually not home
116:59 - sorry let's go to base.html
117:01 - and inside of base.html what i'm going
117:03 - to do is i'm going to go to my nav bar
117:05 - and i'm going to do some if statements
117:06 - and only show some of these links if the
117:08 - user is signed in so i'm going to do
117:11 - if like this so if
117:14 - and then user dot is underscore
117:18 - authenticated like that did i spell
117:20 - authenticated correctly i think i did so
117:22 - if they're authenticated
117:23 - then all we're going to show is log out
117:25 - in home right
117:26 - so let's do that here we will show
117:30 - home first probably and then log out
117:32 - after
117:33 - so put home above then otherwise
117:37 - so inside of here we'll go percent
117:39 - percent
117:40 - else and then percent percent
117:43 - and if okay so otherwise so if they're
117:45 - not logged in then we'll show the login
117:47 - and sign up buttons
117:48 - if they are then we only show those so
117:50 - now that we have that
117:51 - that's all we need to do to handle the
117:53 - navbar we just need to make sure that
117:54 - whenever we render this base template
117:56 - which is in all the templates
117:57 - we pass the current user i'm going to
117:59 - save that i'm going to go to auth now
118:02 - i'm going to do the same thing for my
118:04 - render template so i'm going to get rid
118:05 - of boolean here
118:06 - and for login i'm now going to pass user
118:08 - equals current user
118:10 - same thing for my log out although
118:13 - actually no i don't need to do for
118:15 - logout sorry just for sign up
118:17 - now i'm going to pass user equals
118:18 - current user so now
118:20 - if we have access to the current user we
118:23 - can use it in our template and then
118:24 - we'll display the correct thing for the
118:25 - navbar so let's rerun this
118:27 - and let's go to our website
118:30 - and let's refresh so now notice that
118:32 - those two things went away we're not
118:34 - uh logged in so we only have log in and
118:36 - sign up but if we log in
118:37 - so tim gmail.com and
118:40 - uh what was the password okay then
118:43 - we get home and we get log out and now i
118:46 - can go to the homepage obviously or i
118:47 - can log out and it redirects me here
118:49 - so that is how you do that awesome so
118:52 - now that we have that
118:53 - what i want to do is i want to talk
118:55 - about adding notes
118:56 - and yeah and then at that point we're
118:58 - going to be pretty much done
118:59 - so let's go to our home page and we're
119:02 - just going to add kind of that little
119:03 - form
119:03 - or the little ui aspect to allow a user
119:06 - to add notes and we'll also have to
119:07 - display all the notes as well
119:09 - so let's start by allowing user to
119:11 - create a note so we're going to make a
119:13 - form
119:14 - so we're going to say form and then
119:16 - method
119:17 - equals post like that
119:20 - and then here we'll say slash form now
119:22 - we need to make a text area for the
119:24 - notes we're going to say text area
119:26 - we'll say name is equal to note id is
119:30 - equal to note and the class will be
119:32 - equal to form
119:33 - hyphen control then we will end the text
119:37 - area
119:37 - and then we'll do we will create a
119:39 - button so we're going to say div
119:41 - we're going to say align equals center
119:43 - just to put this button in the middle of
119:44 - the screen
119:45 - i'm going to end the div we're going to
119:47 - add a button i'm going to say
119:49 - button type equals submit
119:54 - class equals btn btn hyphen primary
119:58 - we're going to say add note and then
120:00 - we're going to end the button
120:01 - all right so now we have a form and when
120:03 - we press this it will send a post
120:04 - request
120:05 - to our url with the note
120:08 - okay so now we have the form let's write
120:10 - some code that can actually generate or
120:12 - show all of the notes
120:13 - so first i'm going to make an h1 tag and
120:16 - i'm going to say
120:16 - align equals center
120:20 - i'm going to end the h1 and then i'm
120:22 - going to say that this
120:23 - is notes and then under here i'm going
120:27 - to write
120:27 - a list group that's going to allow me to
120:30 - show all of the different notes so first
120:31 - i'm going to make ul
120:33 - which is like what you do for list i'm
120:35 - going to say class this is a bootstrap
120:37 - class
120:38 - list hyphen group list hyphen
120:42 - group hyphen flush uh and then we're
120:45 - gonna say id
120:46 - equals notes then we will end the ul
120:50 - and we're gonna do a for loop to loop
120:52 - through all of the notes so i'm going to
120:54 - say
120:54 - percent percent for user dot
120:58 - notes now remember we're always passing
121:00 - user right
121:01 - and since we're passing user what we can
121:03 - do is we can access all of the notes
121:05 - associated with the user because they
121:07 - have that
121:08 - if we go to model sub pi here they have
121:10 - a notes field that is actually going to
121:12 - store all of our notes
121:13 - so we're going to say for note in
121:16 - user.notes we're going to end the four
121:18 - so we don't forget
121:20 - and then what we'll do is we'll just
121:21 - display the node.data so we'll say
121:23 - note dot data like that and the data
121:26 - again is just the text associated with
121:28 - the note we also could
121:29 - display the date of the note but i'm not
121:31 - going to do that for right now okay so
121:32 - now that we have that
121:34 - let's just put this inside of an li tag
121:36 - sorry just so it shows up nicer
121:38 - and i will change the li tag so we have
121:41 - a class here
121:42 - so for li i am going to say class
121:46 - equals list hyphen group
121:50 - hyphen item sweet okay so now that we
121:53 - have that we should actually display
121:54 - all of the notes um
121:58 - i'm trying to find a word here just in a
122:00 - list and that should be good okay so now
122:02 - we'll dispel the notes
122:03 - then we have this form so let's go to
122:05 - the homepage and see how this looks
122:06 - so let's sign in i guess tim gmail.com
122:11 - and there we go and now notice we have
122:13 - add note
122:15 - method's not allowed that makes sense
122:16 - and then we have the note field like
122:18 - this
122:19 - now for some reason my cl oh well it
122:22 - would be helpful if i spelled class
122:23 - correctly i was like my
122:24 - that looks really bad anyways now we
122:26 - have the button that's proper but what i
122:27 - want to do is in between the text area
122:29 - and the div
122:30 - i'm just going to add a break line just
122:31 - there's a bit of space so br
122:33 - and then slash and now let's refresh
122:35 - this
122:36 - and notice we okay that's much better
122:38 - that looks a lot better so moving on
122:40 - let's make it so we can actually add a
122:42 - note now we kind of already know how to
122:44 - do this
122:44 - we're at the point where you guys you
122:46 - know you could probably go off on your
122:47 - own now
122:47 - let's go to uh views.pie and we're on
122:50 - the home page
122:51 - we now need to make it so that the the
122:54 - post method is allowed for this route so
122:56 - i'm going to say
122:57 - methods equals and then get
123:01 - and then post all right so now we'll
123:03 - check if the request dot method and we
123:05 - need to import requests so let's import
123:08 - requests like that is equal to post so
123:10 - if request.method
123:13 - equals equals post then what we need to
123:15 - do is get the notes we're going to say
123:16 - note is equal to
123:18 - request.form dot get note
123:21 - i'm going to go a bit faster because
123:22 - we've done this a few times now and
123:24 - we're going to get the note and we're
123:25 - just going to make sure that this note
123:26 - is at least length one so we're gonna
123:27 - say if
123:28 - the len of note is greater than or equal
123:32 - to one
123:33 - or sorry is less than one
123:36 - then we will flash uh
123:40 - note is too short and then
123:43 - i guess we'll just go with category
123:45 - equals
123:47 - air okay otherwise
123:50 - what we will do is we'll flash
123:54 - note added category equals
123:57 - success and then obviously we're going
123:59 - to have to actually add the note so how
124:01 - do we add the note
124:02 - so to add the note what we need to do is
124:04 - we need to say new underscore note
124:06 - is equal to note which means we need to
124:08 - import that so we're going to say from
124:11 - dot models import
124:15 - note and then we're going to say for
124:17 - this well the
124:18 - data of our note is equal to note so
124:21 - whatever the text is that was passed for
124:23 - the form
124:24 - and then the user id of our note is
124:27 - equal to current user
124:29 - dot id because with the current user we
124:32 - can access any of the fields on it
124:34 - like the id so that will create our note
124:36 - there's nothing more we need to pass
124:38 - this then we will say db
124:42 - dot session dot add new underscore note
124:46 - and then lastly db.session.commit
124:50 - and then i guess we actually don't need
124:52 - to add anything we just do that
124:53 - then we will flash node added we will
124:55 - return back to the home page
124:56 - and we will render that note so i
124:58 - believe that's all we need uh to
125:00 - actually add the note
125:01 - i think that should be good and then
125:04 - yeah you'll see it and it will show up
125:05 - on the page
125:06 - awesome now that we have that one more
125:08 - thing that we need to do
125:10 - is we need to import db so we're going
125:12 - to say from
125:14 - dot import db i knew i was missing
125:16 - something
125:17 - and let's rerun the web server so now
125:19 - let's see if we can create
125:21 - a new note so let's go and let's refresh
125:24 - and let's say hi
125:26 - add note and name flash is not defined
125:28 - okay we need to import that so from
125:30 - flask let's import
125:32 - flash now let's refresh
125:35 - continue and notice that we added now we
125:37 - added it twice just because the post
125:39 - request was sent twice
125:40 - but there we go so we added it on now
125:42 - what i want to do is show you how to
125:43 - delete the note so let's just go
125:45 - low and make sure this one works notice
125:47 - hello is now added
125:48 - and now i'll show you how to delete them
125:50 - so let's go
125:51 - to home.html and i'm going to add a
125:54 - button
125:55 - for all of our notes that allow us to
125:57 - delete it so
125:58 - underneath note.data but still inside of
126:01 - our li here
126:02 - we're going to say button type equals
126:05 - and then this will just be button class
126:09 - equals close and then on
126:12 - click equals we're going to call a
126:14 - javascript method which
126:16 - we'll write in one second our javascript
126:17 - function
126:19 - then we will end our button so slash
126:22 - button
126:22 - and we will add that little icon that's
126:24 - the x that we used previously so we're
126:26 - going to say
126:27 - span and then area oops
126:31 - hyphen hidden which means like just
126:32 - don't show this uh
126:34 - equals and then true and then
126:37 - end the spin and then we're gonna do
126:39 - that little fancy symbol again so
126:41 - ampersand
126:41 - times semicolon save that and now we
126:45 - need to write the javascript function
126:46 - we're going to call uh
126:48 - you'll see why we need to do this but
126:50 - this is kind of the way
126:52 - that we would delete something i'm
126:55 - trying to find the words to describe
126:56 - this
126:56 - i'm just going to do this and then
126:57 - you'll see kind of why we need to do it
126:59 - but since we're not submitting form data
127:01 - and instead when we press the button we
127:03 - want to send a request to the back end
127:05 - this is kind of a standard way to do
127:06 - this there's of course other ways to do
127:08 - this but we just write a little bit of
127:09 - javascript that will send a request to
127:11 - the back end for us
127:13 - that will delete the the note so we're
127:15 - going to say delete
127:16 - note is the name of the function we're
127:18 - going to write and then inside of here
127:20 - we're going to do two squigglies
127:22 - and we're going to write note dot id so
127:25 - the reason for this
127:25 - is that we need to be able to figure out
127:28 - which note we're deleting
127:29 - and of course we want to delete the note
127:31 - with whatever id
127:32 - is in this field so we need a way to
127:35 - figure out which
127:36 - note we pressed on and the way we do
127:38 - that is since we're in the for loop
127:40 - we're going to say that on click we call
127:42 - the delete
127:43 - note with note id so i feel like i'm
127:47 - explaining this very poorly but we will
127:48 - have a function in javascript called
127:50 - delete note
127:50 - that will take in a note id we are
127:53 - specifying that we want to pass the id
127:55 - of the note that we're showing
127:56 - in this list column or this list row
128:00 - and then that way when we press on the
128:01 - close button in this row
128:03 - it will send the note id associated with
128:05 - this note and we will delete that note
128:07 - from the database
128:08 - so let's save that for some reason it's
128:10 - giving me some some red squiggly lines
128:12 - here i think
128:13 - this should be good i'm just double
128:14 - checking to make sure i did everything
128:16 - successfully or correctly i think i did
128:18 - let's go now to our index.js now
128:21 - remember i showed you how to add this
128:23 - in the beginning part of the series in
128:25 - case you're or serious
128:27 - beginning part of the video in case
128:28 - you're forgetting how to do that if you
128:29 - go to base.html
128:31 - this script tag right here is
128:34 - referencing this index.js
128:36 - file which we have stored in the static
128:37 - folder so make sure you have this line
128:39 - in your base template
128:40 - at the very bottom and that it looks
128:42 - like this and that you name your file
128:44 - index.js unless you modify that line
128:46 - anyways inside of here let's write what
128:48 - we need so we're going to say
128:50 - function delete note we're going to take
128:53 - a
128:53 - note id and we're going to send a
128:55 - request so to send a request in vanilla
128:57 - javascript you use fetch
128:59 - and then we're going to send it to an
129:00 - endpoint we've not yet created called
129:02 - delete note
129:03 - and inside of here we're going to pass
129:06 - the methods we're going to say
129:08 - method equals post we want to send a
129:10 - post request
129:12 - and the body is json.stringify
129:16 - and we're going to send note
129:20 - id and then being note id
129:23 - now i'm just going to type this out then
129:25 - i will explain it don't worry we're just
129:26 - going to say underscore res
129:28 - and then we're going to make an arrow
129:30 - function let's say window
129:32 - dot location equals sorry
129:36 - dot href equals and then
129:40 - slash okay so what this is going to do
129:43 - is it's going to take the note id that
129:45 - we passed and it's going to send a post
129:47 - request to the delete
129:48 - note endpoint which we've yet to write
129:51 - which we'll write in a second
129:52 - and then after it gets a response from
129:55 - this delete note
129:56 - endpoint it's going to reload the window
129:58 - this is how you reload the window with
130:00 - the get request specifically
130:01 - so window.location.href equals slash
130:04 - just means
130:05 - redirect us to the home page which in
130:07 - turn will just redirect the page
130:09 - all right sorry refresh the page so
130:12 - that's what this is doing
130:13 - uh don't worry if you don't understand
130:14 - the javascript this is all we need to
130:16 - delete the
130:16 - the note and this is just how you send a
130:18 - really basic
130:19 - request to the backend from javascript
130:22 - we're not using ajax or anything like
130:23 - that
130:24 - so let's go now to views.pi we need to
130:27 - make another view
130:28 - so we're going to say at views dot and
130:31 - then
130:32 - root and we're going to call this one we
130:34 - do need methods actually
130:35 - we're going to call this one delete note
130:38 - now methods
130:39 - is going to be equal to post and it's
130:41 - only going to be post there's no get
130:43 - requests we can send here
130:44 - just post we're going to say define
130:46 - delete
130:47 - and then underscore note and what we're
130:50 - going to do
130:50 - is we're going to look for the note id
130:53 - that was sent to us
130:55 - now it's interesting how we have to do
130:57 - this because we're sending the request
130:58 - not as a form so the request is actually
131:01 - going to come in
131:02 - in the data parameter of our request
131:04 - object which you will see in a second
131:06 - which means we need to load it as json
131:09 - so i need to import json which is built
131:11 - into python
131:12 - so import json up top and we're going to
131:15 - say that
131:16 - the note is equal to
131:20 - json.loads and then we're going to load
131:24 - the request dot data
131:27 - then what we're going to do is we're
131:29 - going to say note
131:31 - id sorry is equal to
131:35 - and then this is going to be data
131:38 - at note so what this is going to do is
131:41 - it's going to take
131:42 - this request data which is a string this
131:44 - string is what we just sent
131:46 - from here so it's going to be note id
131:48 - and then node id
131:49 - and and what this dot what this does
131:51 - json.stringify is it turns this into a
131:53 - string
131:53 - so we need to now take the string from
131:55 - views.pi turn it into a python
131:57 - dictionary object
131:59 - so we can then access the node id which
132:01 - is going to come in as the field
132:02 - node id and then what we're going to do
132:05 - is find this node so we're going to say
132:06 - note is equal to and then note
132:09 - dot query dot get and then
132:13 - note id so again when you use get it
132:16 - accesses the primary key
132:17 - which is what we're what we have here
132:20 - anyways so
132:21 - if we found a note so if note does exist
132:24 - then what we will do is we'll say if
132:26 - note dot
132:27 - user underscore id equals current user
132:30 - dot id
132:31 - then db.session dot
132:35 - note this is how you delete an object
132:36 - you query it and then you just put it
132:38 - inside of the delete there i don't know
132:39 - i added a semicolon
132:40 - and that will delete it then you say
132:43 - db.session.commit
132:44 - and then we can just return something so
132:47 - i'm just going to return
132:48 - jsonify which i'll import in a second
132:51 - with an empty response now i'm going to
132:53 - talk about all this don't worry i know
132:54 - i'm going fast but at the top just
132:55 - import jsonify
132:57 - and let's discuss this so this that i
133:00 - just wrote here
133:01 - what this is doing is it is going to
133:02 - take in some data from a post request
133:04 - it's going to load it as a json object
133:06 - or a python dictionary
133:07 - we're then going to access the note id
133:09 - attribute which again is
133:11 - right here what we'll do then is we'll
133:13 - say note.query.gets we'll look for the
133:15 - note that has that id
133:17 - check if it exists first of all if it
133:18 - does exist then of course we can delete
133:20 - it if it doesn't we don't need to delete
133:22 - it
133:22 - and then what we'll do is we'll say well
133:24 - if we own this note so if the user who
133:26 - is signed in
133:27 - does actually own this note because we
133:29 - don't want to let users who are signed
133:31 - in delete other people's notes right
133:33 - then we will delete the note so just a
133:34 - little security check
133:36 - and then what we'll do is we'll return
133:38 - an empty response now we just need to do
133:39 - this because we do need to return
133:41 - something from these views
133:42 - we're not returning html here we're just
133:44 - returning an empty response that is
133:46 - either saying hey you know it was
133:47 - successful or it didn't work or whatever
133:50 - and in fact at the very bottom here we
133:51 - can just return jsonify no matter what
133:54 - and we're just jsonifying an empty
133:56 - python dictionary which essentially
133:58 - means turn this into a json object that
134:00 - we can return
134:02 - and well we're not returning anything
134:04 - but we just need to return something
134:06 - it's just like a requirement from flask
134:08 - so anyways that's what we need to do
134:09 - that should now delete our notes
134:11 - so now let me get out of this let me run
134:13 - the server
134:14 - and what's the issue here if note ah i
134:17 - used one equal sign this should be two
134:18 - equal signs
134:19 - okay let's rerun this so i just had one
134:22 - equals that needs to change to two
134:24 - now if we refresh uh i don't want to do
134:27 - that let's just do this
134:28 - notice that we have our x's now and if i
134:30 - press my x
134:32 - no the requested url was not found on
134:34 - the server
134:36 - interesting so looks like we must have
134:37 - sent the wrong url
134:39 - uh name data is not defined
134:42 - oh oops sorry guys this should be note
134:45 - uh first of all that should be note
134:46 - so that will fix one of the errors and
134:49 - let's see what other error we had
134:50 - delete note was not found on the server
134:53 - it should have been found on the server
134:54 - we have delete note here
134:56 - interesting okay i'm just going to try
134:57 - this again and see what's wrong let's
134:59 - refresh let's go back to slash home
135:01 - oh that's why we don't want to go to
135:03 - slash home we just want to go to slash
135:06 - and i think the issue is in index.js
135:09 - no i'm just looking around for the
135:12 - problem here for some reason we got
135:13 - redirected to slash home
135:15 - i don't know why that happened
135:19 - um anyway sorry let's let's just try
135:21 - this again okay so let's
135:23 - refresh let's try to delete a note it
135:25 - says it was not found on the server
135:26 - okay i'll be right back after i look for
135:28 - this all right so i fixed the error it
135:30 - was actually just a caching issue with
135:31 - my like previous version of this project
135:33 - before i
135:34 - started the tutorial uh so you guys
135:35 - shouldn't run into that issue there's
135:36 - nothing that you need to fix i just
135:38 - cleared my browser cache by going up
135:39 - here and pressing empty cache and hard
135:41 - reload
135:42 - when my console was open anyways uh now
135:44 - we can delete nodes so if i go
135:46 - test and i add it i can press the x and
135:50 - it deletes the note
135:51 - so that is actually it that's all i
135:53 - wanted to show you
135:54 - that has been this tutorial now this
135:56 - took us almost two and a half hours
135:58 - i do apologize that this was a long time
136:00 - but i hope you guys can appreciate the
136:02 - effort here the amount of time i just
136:03 - sat in front of the camera and talked to
136:05 - you
136:06 - and this gives you a really good start
136:07 - on your project this again is how you
136:09 - create user accounts how you actually
136:11 - associate information with users
136:13 - and i'm really hoping that now you're
136:14 - going to have you know some strong
136:16 - fundamentals in flask and have a nice
136:18 - template project
136:19 - and you can get you guys can go out and
136:20 - build your own interesting
136:22 - website so anyways that is it i'm going
136:24 - to leave it here if you guys enjoyed
136:25 - please do make sure to leave a like
136:27 - subscribe to the channel and of course i
136:28 - will see you in another youtube video
136:33 - [Music]

Cleaned transcript:

hello everybody and welcome to another youtube video so in this video i'm going to be showing you how to make a website with python now the goal of this video is going to be to give you a finished product that you can tweak and turn into whatever website you'd like so i want to show you all of the fundamental and important things you need to know about web development with the module that we're going to use so that way you can kind of take this starter or template website and turn it into whatever you want so specifically we're going to cover how you sign up users so how you create new users account how you store those in a database how you log into those user accounts how you log out of them and then how you associate information with a specific user so the example application that we're going to build here is just a very simple notes app so we're going to have it so you create an account and then once you're signed in you're able to add notes or make new notes you can then delete those notes and obviously you can sign out you can log back in on whatever computer you want and you can have access to those notes now this is really simple this isn't super exciting but the point is to give you the knowledge to be able to make something that is more exciting right so this is just very fundamental most apps that you make are going to use like 90 of the code that we're going to right here so it's a really great starter project it's going to teach you a lot about web development and again that's kind of the goal here now keep in mind that we're not really going to be focusing on front end too much i have styled this slightly using something called bootstrap just so that it does look somewhat decent but this is not a frontend tutorial at all you don't need to know javascript for this you don't even really need to know html although i will go over a little bit of html uh and kind of the only prerequisite is you have some fundamental knowledge of python because that's what we're going to be using for the back end of the website so anyways let me give you a quick demo of what we're going to be building here and then we'll actually jump into the code so my website running you can see that we can sign up for a new account or we can log in so let's actually just make a new account i'm going to say tim3 at you know gmail.com is my email my name is tim let me set up a password and a password awesome so i'm going to submit that i've created an account it says my account was created successfully i'm brought to this page that says notes and i can add a new note so i'm going to say hey there you go that's my note i'm going to say you know second note exclamation point add my note now i can delete a note and notice that it gets deleted the other one is still there so now i can log out if i try to go back to the slash home page it's not going to let me because i'm not signed in but now if i sign in so tim3 gmail.com and i type in my password we come back and we can see our notes now of course if we create another account or in fact i think i have another account let's say tim at gmail.com uh you should see that we have different notes showing up here uh okay i i don't have any notes for this account but you can see that there is no notes here so it's showing differently uh yeah that's the basic idea and that's what i'm going to be showing you how to do so again nothing super exciting or super crazy but really important stuff and once you know this again you can go and make whatever you want so hopefully you guys are excited let's go ahead and get started after a quick word from our sponsor before we get started i need to thank typingdna for sponsoring this video typing dna is a developer's first typing biometrics company that provides a low code authentication api that can authenticate users based on the way that they type their authentication api is available for free from their developer plan which provides you with unlimited authentications and end users typing dna works by recording typing biometrics data which consists of timings and durations of various keypress events all new users will provide some baseline typing data when creating their account and then that data can be used to verify their identity in the future this allows users to authenticate their accounts without having to whip out their phone or mobile devices typing dna is built for developers provides seamless identity verification and can help catch fraudsters instantly it works great as twofactor or multifactor authentication now to illustrate this better let's try typing dna's demo i'm first asked to create a dummy account by typing my email in a madeup password as i type typing dna records my typing biometrics the next time i go to log in it uses this data to authenticate my login as well as typing dna's great api they also have a chrome extension that you can use as an extra security layer get started with typing dna today by signing up for a free developer account from the link in the description all right so let's dive in here the first thing that we need to do is we need to make a folder that's going to store our application so i've just made one on my desktop i've called it flask web app tutorial and i've opened it up here in vs code now feel free to use whatever editor you want i am using visual studio code it's just my preferred one right now for this type of project but you can use subline you can use adam you can use pycharm whatever you want doesn't matter i'm just you know follow along with the steps that i'm doing here so create a folder and then the first thing we're going to do is just kind of set up a little bit of a project directory or kind of some structure here just so that we have all the files defined already so the first thing i'm going to do is i'm going to make a folder inside of this folder i'm going to call it website this folder is going to store all of the code for our website right then i'm going to make a new file i'm going to call this file main.pi and this is the file that we are going to run when we want to start our web server or start our website now inside of website i'm just going to make a few folders we'll talk about these as we get to them the first one is going to be called static and then the next folder inside of website is going to be called templates and then we make a few python files and again we will jump into what all these mean in a second so we're going to say underscore underscore init on your scroll underscore dot pi now this file right here has two underscores before the init and two underscores after make sure you don't only have one and what this is going to do is it's going to make this website folder here a python package you'll see what that means as soon as we use the package parts of it but it essentially means that we can import this folder here and whatever's inside of this init.pi file will run automatically once we import this folder anyways we're going to make a few more files and then we'll be done with kind of the basic setup the first one we're going to do here is we're going to say auth.pi we're going to make another file here we're going to call this one models.pi we're going to use this to store our database models and then lastly we're going to have a file called views.pi this is going to store all of the main views or the url endpoints for the actual functioning kind of frontend aspect of our website anyways that's the basic kind of structure set up here so make sure yours look something like this and then what we're going to do is install some packages so what we're going to do here is we're going to use a module called flask this module called flask is just a super lightweight python framework essentially that allows you to make websites really quickly and really easily if you're comparing it to something like django it's not necessarily as powerful and it's not used as much in production applications but it's really good to know it teaches you the fundamentals of web development and for working on something like that we're doing here building an mvp or even just building kind of a small website flask is great and well that's what i'm going to show it to you because it's just way more simple than django and you can do things a lot faster with it anyways to use flask we need to install the python packages related to it so the first thing we're going to do is we're going to use pip i'm just in a command line here in vs code but if you opened up cmd on windows or terminal on mac you could follow along with this we're going to install flask so we're going to say pip install flask now run this command i already have this installed so you'll see that all these requirements already satisfied but what pip will do is just install a python package for us now if pip doesn't work for you for some reason you're getting pip is not recognized as a command then what you need to do is go to the description i have two videos one for mac and one for windows that will show you how to fix pip now they're not exactly called how to fix pip but they will go through the steps in each video so watch either of those depending on your operating system and it should show you how to fix this command anyways once we've done that and your pip's working now we're going to install another module this is called flask login so flask hyphen login going to install that and there we go now we need one more module as well the last one is called flask and then hyphen sql alchemy i think i spelt that correctly now yeah there we go so pip install flask sql alchemy hit enter and we're going to install that now the modules we just installed or are for logging users in as it said and then sql alchemy is actually a database thing that we can use so it's kind of a wrapper for sql that just makes it much easier for us to create database models delete models um ad models whatever it may be you'll see as we go through the video but install those three things and in case you guys get lost through this video anything's not working there is going to be all of the code linked in the description down below uh so you can check that out on github and and you can copy all that code and everything all right so the first thing we're going to do is we're going to head into our init.pi file we're going to set up our flask application you're going to see how easy it is to do this so we're going to start by saying from flask import flask with a capital f like that then we're going to define a function we're going to call this function create app so we're going to say define create app like that now inside of here we're going to initialize our app so we're going to say app is equal to and then flask and then inside of the brackets here underscore underscore name underscore underscore underscore underscore name just represents the name of the file or i believe it was actually the name of the file that was ran so you'll see but regardless this is just how you initialize flask doesn't really matter what this means just type it in the brackets okay so app equals flask underscore underscore name underscore underscore then what we're going to do after this is we're going to set up one thing that we need for our app so for all of our flask applications we have this config variable called secret underscore key and what this is going to do is this is going to kind of encrypt or secure the cookies and session data related to our website now if you don't know what those mean don't worry about it you don't have to but the idea here is that we just need to type some random string it can be whatever we want it could be a sentence it could be one character that is going to be the secret key for our app now in production you would never want to share this secret key with anybody but since we're just working on kind of the developer side here doesn't matter make the secret key whatever you want obviously i'm showing you mine it's not that important all right so now that we have that what we're going to do is we're going to return this app so we're going to say return app so we have now created a flask application we've initialized its secret key then we've returned it from this function all right so now that we have that what we're going to do is we're going to go to our main dot pi file which is outside of this website folder and we're going to import this website package grab that create app function that we just defined and then use that to actually well create an application and run it so we're going to start by saying uh from website import and then create underscore app the reason we can do this is because website is a python package so whenever you put this init.pi file inside of a folder it becomes a python package which means when you import the name of the folder it will by default run all of the stuff in the init.pi file which means we can import anything that's defined in this init.pi file like our create app so from main.pi we can use create app so we're going to say app equals create app and then we're going to say if underscore underscore name underscore underscore equals underscore underscore main underscore underscore and then we're going to say app dot run debug equals true now this is as easy as it is to run a flask application this will work we will now have a running web server and i'll show you in one second but what this line says is that only if we run this file not if we import this file so main.pi are we going to execute this line the reason you want this is because if for some reason you were to import main.pi from another file and you didn't have this line right here it would run the web server and you don't want that to happen you only want it to run the web server if you actually run this file directly so that's what this line means now what app.run is going to do is it's going to run our flask application it's going to start up a web server and it's going to say debug equals true which means every time we make a change to any of our python code it's going to automatically rerun the web server that's all the debug equals true means obviously you're going to turn that off when you're running in production but for our cases we want that on because that means we don't have to keep manually rerunning the flask web server awesome so this is like the entry point for our app so what we can actually do is i need to fix my python interpreter first in fact i'll show you how to do this in case you're in vs code and you're having some issues with flask if for some reason you know it's saying flask module is not found or you just you can't use flask in fact i'll show you if i run this file notice i get this error no module named flask your python interpreter is probably just wrong now it shows you the interpreter in the bottom left hand corner if you want to change this interpreter which is probably what you want to do you're going to hit control shift and p on your keyboard that's going to open up the vs code command palette and then inside of here you're going to type python and then select interpreter and you can select your python interpreter so the one that i want to use is 3.8.3 again this can be specific to your local machine and the python interpreters you have but now that i select the correct interpreter notice it changed down there and i can run this file so now that i run this file we get some output down here which is saying this is a development server do not use this in production blah blah blah and yeah it pretty much says hey your website is running so now if we want to access our website we need to go to this url right here so 127.0.0.1 port 5000. so what i'm going to do is i'm going to control and click on that that's specific to vs code and it's going to open up this so it says the requested url was not found on the server if you entered the url manually please check your spelling that's fine that's actually good that means our web server is working it just means that we don't have any roots or a home page or anything for our website so that's what we need to add next so what we're going to do now is we're going to create our first website root or yeah i guess our first website root so we're going to go to this views.pi file and inside of this file what we're going to do is we're going to store the kind of standard routes for our website so where users can actually go to so say the login page say the home page all of that kind of stuff actually the login page story is going to go in auth because that's related to authentication but anything that's not related to authentication that the user can navigate to we're going to put in this file so what i'm going to do is i'm going to start by importing flask so i'm going to say from flask import and then blueprint like that and then i'm going to import one more thing as well actually uh we'll import it later i don't need it right now so we're going to say from flask import blueprint now what we're going to do in here is we're going to define that this file is a blueprint of our application which simply means it has a bunch of roots inside of it it has a bunch of urls defined in here that's literally all that a blueprint means it's just a way to kind of separate our app out so we don't have to have all of our views defined in one file we can have them defined in multiple files split up and nicely organized that's what blueprints allow us to do so inside of this file we're going to start by defining the name of our blueprint so i'm going to say views is equal to blueprint now you don't need to name this the same thing as your file but it's usually easier it just keeps it really simple so i would recommend you do that so i'm saying my views blueprint well it's called views now inside of blueprint i'm going to define the name of my blueprint which i'm going to call the same thing as my variable again you don't have to call it this but it's much easier just to call it the same thing so i'd recommend that and then after that you're going to say i'm just going to screen name underscore underscore that's all you need to do we've now set up a blueprint for our flask application so you can ignore the name thing here if you don't understand what that means but that is how you define the blueprint so now what we'll do is i'm actually going to copy all of this i'm going to go inside of my off.pi file i'm going to do the exact same thing except inside instead of views i'm going to call this auth so now i've defined a views blueprint and an auth blueprint and both of these will have different views or different url story defined inside of them so let's go back to views and let's define our first view so to define a view or a route or whatever you want to call it in flask what you're going to do is you're going to say at and then the name of your blueprint so in this case it's called views if we were an auth we would say at auth and then we're going to say dot root and inside of the function here or inside of the uh the brackets we're going to put the url to get to this uh this endpoint or i guess yeah like whatever the root is going to be so in this case we want to define for the home page uh this is the root so slash and then we're going to define a function under here so we're going to say define home now i should have done this before but the point of this function is that this function will run whenever we go to the slash root so whenever we go in our url and we just type in slash so we go to the main page of our website whatever is inside of home is what's going to run so that's the way that you can make this work you define a function you put what's called a decorator above it you define the root and then whenever you hit this root it will call this function so inside of here we're going to do something really basic and we're just going to return some html so we're going to return the h1 tag we're going to say test and then slash h1 what this will do is just return test as an h1 tag it will render this on the website when we go to the slash root so it's as simple as it is of course it will get more complicated this is how you make your first route so now we have these blueprints defined but what we need to do is register these blueprints in our knit.pi so from our app now we need to tell flask that hey we have some blueprints that are containing some different views for our application or some different urls for our application here's where they are so we're going to start by importing these files so we're going to say from dot views import and then we're going to import the name of the blueprint which is views so if i go to views you can see this is what we're importing this variable right here okay so let's go back now we'll do the same thing from auth so we'll say from dot off import off all right so we've got our blueprints imported now what we're going to do is register them with our flask applications we're going to say app dot register blueprint and then we're going to put the blueprint like that and we're going to say url prefix is equal to we're just going to leave this at slash so let me copy this and i'll do the same thing with auth and there we go we've registered our blueprints now the url prefix is saying all of the urls that are stored inside of these blueprints file how do i access them do i have to go to a prefix specifically so i'll just show you with an example because this is the easiest to explain it if i'd put slash auth and then say slash here or auth slash doesn't really matter then what would happen is i would have to go to auth and then slash and then whatever the name of my views inside of here were so if i defined auth dot view like that and or sorry not view dot route like that and then i put inside of here let's say hello if i wanted to access this route since i defined the url prefix as auth i would have to go to slash auth slash hello so anything inside of here will be prefixed now by whatever i define as the url prefix so i don't want anything for the prefix so i just leave it as slash which means no prefix anyways uh hopefully we got that so those that is how you register the blueprints obviously if you had more you would register all of them and you can change the prefix according to what you have but now i'm going to rerun the web server so you can do that by just running this main.pi file i just did it in vs code with a shortcut but not important and now if i run this notice that i get test so i'm getting tests because i went to the slash root so i just went to the home page of my website and what happened was we hit this function right here and we returned this html which was test and we showed that on the web page so that is the most basic way to make a route now i'll show you how to make a few other routes and we'll do it inside of auth.pi so inside of auth.pi we're going to define our login uh log out and our what was the other one we need sign up so we're gonna say off dot root we're gonna say slash login like that and then we're gonna define a function call it whatever you want but i usually just call it the same thing as the root so log in and then here we'll just return some let's go p tag and this is going to say log in like that now we'll define another root so say auth.root we're going to call this one slash log out i'm going to say define log out and then what are we going to return well whatever we want but i'll just return a p tag that says log out okay and then lastly we'll define our sign up so auth.root and then slash sign hyphen up and then define sign underscore up and inside of here we will return p tag that says sign up all right so there we go we have now defined our three routes so now if i rerun the server just you'll notice that the server will crash if you have syntax errors in here so sometimes you do need to rerun it even though you have debug equals true and in fact to show you if i save this notice how the server automatically reruns that's what debug equals true does but yeah sometimes you have syntax errors you just have to restart the server manually so now that we have this if i refresh test is working i can now go to slash sign did i do sign hyphen up uh yep sign hyphen up so that brings me there i can go to log in we see we're at the login page and i can go to log out and we see we're at the log out page so clearly our roots are working it's the most basic part of flask how you set up your roots and your urls all right so now that we have our urls set up what we want to do is we want to start making our pages look a little bit nicer right so i don't really want to just show log in log out sign up i want to show an actual page so how do i render some real html from an html file because it doesn't really make sense for me to be you know putting all the html in a string in python we're not going to do that that's not scalable for our app so now what we're going to do is we're going to go inside of this templates folder and this is where we're going to put what we call our html templates so in flask you could call them html documents doesn't really matter when you render html you call it a template and the reason you called a template is because there's a special templating language that you can use with flask which is called jinga so jinja i believe that's how you spell it this templating language allows you to write a little bit of python inside of your html documents now this is really useful because this means that you don't need to know javascript and you can say render all of a user's notes without using javascript you can display user information without using javascript you can do a bunch of stuff without using javascript based on this templating language now you will see how this works as we really get into this but let me start by defining a new file i'm going to call this base.html so typically when you make templates what you do is you define a base template you can think of the base template as like the theme of your website so whatever you have in this base template is what your entire website's going to look like so usually a nav bar maybe a footer or a header or something like that and then what you will do is you will override parts of the base template with more specific templates now i know this is confusing because i haven't shown anything yet but the idea is that we have one section of the base template which is usually the main content on the page and what we'll do is we'll let our other html documents override that main content so everything else stays the exact same except the main content of the page will change based on what page we're on so anyways let's just start typing out our html document and this is a lot of stuff that you're going to probably have to copy especially the style sheet and the javascript and all of that so do go to the description and open up the github you can type along with me if you want of course but it might be a little bit easier just to uh what do you call it just to copy some of this stuff because i can't really type all of it out anyways we're going to set up our html tags here after our doctype html i'm going to start by setting up a head tag and then we'll set up a body tag so we'll say body and body if you're unfamiliar with html this is just standard practice you need a head tag which has like metadata related to the website and then you have a body tag which actually has the html for the body of the website so the first thing we're going to do inside of our head tag is we're going to define a meta so we're going to say meta and then char set equals utf8 so just defining the character set that's used for this document then what we're going to do is have another meta we're going to say meta and then name equals viewport and we're going to say that the content is equal to and then width equals device hyphen width so pretty much just saying take up the entire width of the screen and then after this we're going to have a comma we're going to say initial hyphen scale equals 1. now i'm not going to explain this because this is not a tutorial on html you're welcome to look that up if you want but these are just standard things that you almost always have in your head tag then what i'm going to do is i'm going to import what's known as bootstrap now bootstrap is a css framework that has some builtin classes that just make it a lot nicer to style your website again this is not a tutorial on front end or bootstrap so i don't want to get into it too much but what this is right here is a link to what's called a cdn now a cdn is a content delivery network and what that will do is it will allow you to actually load without downloading the file a bunch of custom css and javascript now in this case we're just loading css and we can tell that because this is defined as a style sheet and this style sheet will contain a bunch of classes that we can use for our html elements just to make them look a lot nicer so what you need to do is just copy this again you can get that from the code link in the description you're also welcome to not use this everything will still work if you don't have this css it's just not going to look as nice so we have the two css things to find now so we've loaded our style sheet and we've loaded bootstrap now what we're going to do is we're going to have a title tag and inside of this title tag i'm going to show you the first thing that you can do with jinga which is the templating engine so i'm going to define two brackets like this and then two percent signs now whenever you're using jenga you have a few different kind of syntax options so when you're writing a block where you're writing some pythonic syntax like a for loop or an if statement you usually put them inside of this so you have open squiggly or whatever you want to call it squiggly bracket brace then percent sign and then percent sign and then close squiggly brace now inside of here you can define a bunch of different things you can actually write an if statement in here you could write what else a for loop you can write an expression that you want to evaluate or you can write what's called a block so i'm going to say block title and what this means is i'm defining a block in this base template that can be overridden in a child template so what's kind of going to happen is our children template are going to inherit this base template and any blocks that we've defined inside of this base template they'll be able to change so for example the title of our website we obviously want them to be able to change this so we'll say block title and then we'll say end block inside of this title tag and what this means is now in my child template i can define this same block and when i define this block anything that i write inside of it say like home right there will override whatever is inside of here so if in my child template i wrote say sign up or log in as as the block title it would override what is inside of here so it would remove home and then it would put whatever i typed will make sense as we actually get into the template but this is kind of how you define blocks and what i mean by having templates that you can reuse and defining a base template all right so now that we have finished the head let's go to the body we're going to define a nav bar and then what we're going to do after that is load a bunch of scripts and in fact i'm going to load all of the scripts first so let's load all of these you're going to have to copy these because i can't type them all out and what this is going to load is the javascript related to what do you call it here bootstrap the css framework so bootstrap has some like fancy animations and some just like cool button presses and stuff that use javascript so what you need to do is load in these scripts again just take that from the description from the code so this we load at the bottom of our body tag so make sure it's at the very bottom all other html you're gonna put above it now let's say you're someone who wanted to write your own javascript first of all what you would do if you want to integrate your own javascript into this and i'll just cover this quickly because i know some of you will want to do this is you will put a javascript file inside of this static folder so any assets like images or javascript files or css things that are static that do not change you put inside of this static folder so again images javascript or css files you have to put inside of the static folder now once you put them inside of the static folder you can load them in your html by doing something like this so this is the script that you would write to load in a file called index.js from this static folder so what you do is you write these two squiggly brackets which is another thing in jenga and i'm going to cover this in one second you write url4 then you put the name of the folder which in this case is static and then the file name that you want to load which is index.js now what this url4 function does this is actually a python function okay we'll see it in a minute is it loads the url for the static folder so it just finds that on our website that's what it does now these two squigglies or squiggly brackets i keep calling them squigglies what this means is that we are going to write a python expression so whenever i have two squigglies like this this pretty much means we can write a variable we can write a function we can write some kind of python expression that will be evaluated now there's some rules for the type of python expression you can write in here but that's the idea behind these two squiggly brackets whenever you have them is you can write some python expression that will be evaluated so when i put that inside of here it will evaluate this and there will be some string that is actually source and that's a string will represent the file name index.js so if i made index.js here it would load this file so i put any js that i want inside of here anyways enough on that i apologize about talking that for a long time okay so now that we've done that what we're going to do is go inside of the body and we're going to decide we're going to define a nav bar so we're going to create a nav bar so we're going to say nav we're going to say class is equal to and then nav bar and then navbar hyphen expand hyphen lg now these are all bootstrap classes if you want to see how exactly these work and why i've picked them you can go to the bootstrap website and you can look up navbar you can look up a bunch of different things and it shows you a bunch of really detailed examples of how to create this stuff so i haven't come up with this i've just taken this from the bootstrap website and this will create a nice kind of gray navbar as you saw so now we'll say nav bar hyphen dark so change the color of the nav bar and then bg hyphen dark to make it dark all right so now we have a navbar defined uh that's as easy as it is to make one and now we have to put some buttons on our nav bar so the first thing that i want to put is actually a button that will allow us to expand the nav bar if we're on a mobile device so let's say that our screen is really small and we can't fit all of the navbar items on the navbar then what we need to do is have a button that can expand the nav bar so we actually see all of the different buttons so that's what this is going to do that i'm going to define here so i'm going to say button and then i'm going to say the class is equal to toggle sorry nav bar hyphen toggle so pretty straightforward it's going to toggle the navbar we're going to say the type is equal to a button we're going to say that the data hyphen toggle is equal to and then in a string we're going to say collapse we're going to say that the data hyphen target is equal to and then we're going to put a pound sign which stands for the id of something and then we're going to say navbar because the id of our navbar which we will define in one second is going to be called navbar anyways we have navvar like that then there's some other things that we could add but actually i think this is fine for now okay so data toggle data target okay now that we have that what we're going to do is we're going to close the button tag so slash button and inside of here we're actually going to put the icon that we want to use for this button so we're going to say span class equals and then nav bar hyphen toggler hyphen icon and then we'll just end the span i guess we can just do like that and the span tag so what this will do is this is just going to load an icon for us and then since it ends it's inside of the button tag that's what will show up when we press on this icon it will toggle the button so when you save you should see that it auto formats for you if you're not getting auto formatting in vs code go to the vs code marketplace which is just this thing little cubes here install an extension called prettier if you install this you won't even i think you just need to reload vs code after you install it and then when you save it should automatically format the document for you so that you don't have to deal with all the indentation and all that stuff okay so now that we have that let's define the navigation items in our navbar so we're going to make a div and we're going to say div class is equal to and then collapse and then navbar hyphen collapse then we're going to say the id is equal to navbar so what this is saying is that we're going to have a collapsible nav bar which i will show you once we actually build it and then we'll define the items that we want in this collapsible navbar so let's define another div inside of here so i'm going to say div class equals and then nav bar hyphen nav so this is the actual navigation items we'll end the div and then inside of here we'll define the items that we want so i'm going to say a which is just a link i'm going to say class is equal to and then nav hyphen item and then nav hyphen link meaning that this actually links to something i'm going to say the id of this is login and then you can guess the href so where this is actually going to redirect us to is slash login so that's it for a and then we'll say log in and we will close the a tag all right so now let's copy this and let's put this a few times so we have login the next one we want is sign up so we'll just say the id of this is sign up or maybe we'll just do camel case there and then the page we want to redirect to is sign hyphen up this is going to be called sign up okay after that we want home and we want log out so let's put log out here let's just change this to log out and log out and then lastly we will do home so home home and then we can simply just put slash because that is our home page all right so now we should have a navbar so our server is still running so make sure yours is running you may have to rerun it and if we go and we refresh the page well we don't see anything for logout and we don't see anything for slash right that's because well we've defined this html document but we haven't actually used it so now that we've defined this we want to use this document so this is a template remember we defined this as a template and what we need to do now is actually define some html documents that can use this template because yes we can actually render this template which i will show you in a second but i want to show you how we use this template because the whole idea was this is going to be the base template of our entire website so i'm going to define another template here or another html document i'm going to call this home.html now inside of here what i'm going to do is show you how we extend this template so remember we have this block here this this title block and inside of home what i need to do is i need to extend this base template so i'm going to write the two squiggly brackets and then percent percent and inside of here i'm going to say extends and then base dot html as a string what this means is that this template right here is going to be the exact same as base.html and i can override any blocks that were defined inside of base.html so i can take this block title and i can put this right here and now if i define instead of home well actually sorry this this should be home but let's just make it change so we can see that this did actually work if i make this changed now this is simply going to override the title block from base.html but everything else will stay the exact same so now let's go into views.pi and let's actually render this template so we can see it on the screen so whenever we want to render a template what we do is we need to import the render underscore template function and from our views function we're going to return render template and then just the name of our template so we don't need to do template slash or anything like that we just do home dot html which is the name of our html template and now when we go to this page it's going to render the html inside of home.html now there's a few more things that you can do with templates which we will get to in a minute but that's the basics so let's run this and let's refresh and notice we get some navbar that is collapsible now this icon does not look exactly how i want it to look but notice that when i press this icon all of the the roots are popping up so i'm going to have a look and see what i've messed up here because this should not be uh looking like this right now so there's definitely a change or something that we made a mistake with so i'll be back after i look at that all right so i was able to fix it there was just a few typos you guys probably saw them when i did them but first on line 23 here in the in the html i had navbar toggle this should be navbar toggler that's the class that's why this was looking all weird and then inside of here on line 30 i had spelled collapse wrong so just make sure you spell everything correctly i had collapse and then navbar and then i had the a and the p mixed up so they were like that so obviously it wasn't working because well everything was spelled incorrectly so i spelt collapse correctly now spelt toggler correct and now we should be good to go so now let's load the website here and you can see that as soon as my page gets really small it shows me this button and then i can expand the nav bar to see everything and then if i make it large enough i can see all the items on the nav bar now also look at the title of our website up here it says changed the reason it says change is because we loaded not the base.html template but the home.html template and we over overrode this block here and we called it changed instead of home so that's it that's how you render the template now let's add a block into our base.html template i want to add it right under the nav bar that we can override to actually put content on the screen so what i'm going to do here is i'm going to make a div i'm going to say div and i'm going to say class equals and i'm going to make this a container now the container will just make it such that the content is kind of floating off of the border of the screen it's just it doesn't center it but it just makes it so there's a little bit of padding between it and the nav bar and the edge of the screen and then inside of this container class what i'm going to do is i'm going to define a block i'm going to say block content you can call these blocks whatever you want so name them whatever you want doesn't have to be content and then here i'm going to end the block so now anything that i put inside of here would show up on the screen if i rendered bass.html but it also allows me to override anything in here so now if i take this block and i go to and i just saved and you can see that where'd that put that oh it's just all in line here if i go to h base.html or sorry home.html what am i saying inside of here now i can add an h1 tag and i can just say this is the home page so now that i do this you'll see as soon as i refresh here that we get this is the home page showing up on the home page so now if i go to logout notice that the template's not here because we still are just rendering the html for logout but that's how this works so that's how you deal with templates and hopefully that was somewhat informative all right so now let's show how we can actually render the template for all of our views so we have our homepage but if we go to auth.pi we don't want to show all this boring html we want to show the template for login for log out and for sign up so let's create two more templates let's make one called login.html and let's make one called signup.html assign underscore dot html now we're not going to make one for log out because when you actually press that button it's just going to redirect you somewhere else there's not going to be like a page that it shows i was just doing that for example but you get the idea so let's go to our home.html it wants to literally just copy all of this first of all let's make the title correct in home.html and now for sign up and for login i'm going to paste these in so we'll start in login we'll just change the name to say login and we'll say this is the login page very good now we go to sign up we can change this to sign up and change this to this is the sign up page great so now that we have that let's render these templates so let's go to auth.pi let's import render template and let's use it so now let's say render underscore template and what template are we going to render the login dot html we can copy this and do the same thing for sign up and now we will render sign underscore up dot html all right so now that we've done that let's load so let's refresh let's go to sign up this is the sign up page let's go to login this is the login page and there you go and that is the basics so now that we've talked about that we understand how to use templates let's now discuss how we can actually pass values to templates so one of the great things about this jenga templating language is that we can pass variables or values right to all of these templates and then what that will do is we can actually use those values inside of the templates so let's say i want to pass like it's hard to give a good example right now because we don't have anything meaningful to pass but i'm just going to show you how we can pass a variable to say login.html from our backend right here and how we can display it on the page so on login.html what you can do here is you can quite simply write any variable name that you want so doesn't matter hello could be arg could be string whatever as long as it's a valid variable name type whatever you want so let's just go with text and then i'm going to say that's equal to set it equal to whatever you want so i'm going to set this equal to testing and now that i've done this inside of my login.html template i can access the variable text so if i go to login.html what i can do is i can use my fancy squiggly brackets that denote i'm having a python expression inside of here and i can type the name of the variable that i'm expecting to be passed which is text so if i do this what's going to happen now is whatever is passed to this template with the value text so again text equals testing will show up here uh oops in the squiggly brackets or where they're located so if i run this now and we refresh we see testing shows up so this is how you pass values to your templates you simply define them as some variable and and literally just type it out like this so text equals testing there's a few other ways to do this i'm not really going to go through all of them at least right now but we can also pass multiple variables so i can pass text and i could pass um you know user is equal to and then i'll pass tim so now that i've passed this i can go to my login template and after this i can just say user now that i have user there if i run this we get testing and then we get tim right so i can just show the user now i also could do something like user plus and then s now what this will do is it will interpret whatever the user variable is plus the string s and it will display that so now we get tim's right so there is a limitation to what you can do inside of here you can't do everything you would do in regular python but for the most part you can do like some basic expressions display variables and that's what makes this templating language really useful so that is the basic for that now let's show one more thing with templates while we're at it i want to pass a variable here and we'll just call this boolean and we'll make this equal to true now i'll show you how we can actually write an if statement inside of our template so if we want to write an if statement uh which we'll do here let me just move the block down uh to write an if statement we do the percent type of block and then we say if and then whatever variable we want to check or whatever expression we want to check so in this case i want to see if the boolean variable is equal to true so if boolean is equal to true then what i can do is underneath this block i can write out what i want to do i'll just say yes it is true and then to end my block i can say end block like that or sorry not end block but and if so this is how you write an if statement you do the percent kind of thing you say if whatever the expression is you want to check then end the percent thing and then you write whatever inside of here you want to display if this is true or whatever you want to do if this is true and then you have the end if to signify hey i'm ending this if statement because obviously we can't use indentation to do that so now if i refresh we'll see that yes it is true but if i change is boolean equal to false so let's do that you'll notice that when i run this nothing shows up because that condition was not true so that is how you write an if statement if you want to do an if else then you can do this you can say else and then you can say no it is not true and you don't need to write like end else or anything like that you just have an end if at the very end of all of the statements and now let's run this we have yes it is true and if we change this to false just to get into the else statement here we see no it is not true right so that is how that works that's how the if and else works now i hate the formatting by default for jinga in here like it is kind of difficult to read but hopefully you get the idea that's how you write if and else i'll show you for loops later and then you can do an else if as well i may be incorrect on this i should probably look this up but it's percent percent and i think it's either l if or else if all right so it looks like it actually is just l if so if you say l if and then whatever the other condition is you want to check uh then this works and then if you didn't have an else you would just have the end if at the end but the end if just goes at the very end of all the statements and this works just like regular python so you have if l if else or as many lifts as you want again you don't need the l if you don't need the else and end if goes at the very end anyways let's get rid of these because i don't actually want these and that's just what i want to show you how you pass values to the template all right so now we've learned about templates we know how to pass values to templates we know how to do template inheritance we know how to you know use expressions and all of that inside of the templates let's now create our actual sign up template so i want to actually make the form here because if we design this then we can start working on the back end and we can actually you know create the user account and work with databases and all that interesting stuff so we need to build this form out so first of all we have our blocks defined now inside of our block content we're just going to build an html form so we're going to say form we're going to say method equals post which means when we submit this form send a post request to the back end you don't have to know what that means yet but i will discuss post get and all of that and anyways inside of here let's start by having an h3 tag so let's say h3 let's say a line equals center we want this to be in the middle of the screen and let's end our h3 tag and then let's say sign up so now we have a header for our form that says sign up now i want to have a div so i'm going to say div the class of this is going to be equal to form hyphen group this is just a bootstrap class that we can use i'm going to end the div and inside of this div i'm going to start putting my fields so i want an email address a first name a password and a password too so like your password confirmation and that's what i want for my sign up form so email first name two passwords so let's start by defining a label let's say label this is going to be for our email you just would set this equal to the class that you're going to use for the input field which you'll see in a second let's end our label and let's call this one email address all right now inside of here i'm going to define input field so i'm going to say input i'm going to say type equals email i'm going to say class equals and then form hyphen control again this is another bootstrap class you can look up all these classes from the bootstrap website i'm going to say the id equals email i'm going to say the name equals email notice there's a lot of stuff to type here and the placeholder is equal to enter email uh like that okay and actually let's go lowercase enter email how many times did i spell it incorrectly all right so now we have our input field now what you need to make sure you do here is you need to define a name the reason you need to define a name as well as an id and in fact the id is optional but you should add it because then you have your label linking with your input field which is what you want but what the name will do for us is this is actually what the attribute is going to be called when we pass the information in this field to our back end now that might be confusing but when we submit this form it's going to bundle up all of the information in here it's going to use all of the names of these fields to represent them when it actually sends this information to the backend so we will be able to access the email address by whatever its name is defined as so make sure you define these names and then that you know what these names are so now that we have our first form group defined we're going to copy this and let's do the next one so we have the same div called form group except now we don't have an email we have a first name so we'll just say first name like that change the type to not be email but just to be text and then the class will stay the same the id will go to first name the name should always be the same as the id for our purposes we're going to say first name and then we'll just say enter first name all right awesome let's copy this one and now let's do the passwords okay so we i just copied it twice because we're going to do two passwords so we'll say 4 password one the label is going to be password the type is going to be password the id is going to be password1 and then the name is going to be password one okay and then for here we'll just say enter password and then actually we should probably just copy this one because all we'll have to do is change password one to password two so now uh password i'll just say confirm as the label we'll say instead of password one this will just all be password two and we'll just say instead of maybe instead of enter password maybe we should say confirm password awesome so now we have our sign up form created so now the last thing we need to add is a button so after this div i'm going to add a break line just to separate the button and then what i'm going to do is i'm going to say button type equals submit class equals and then btn btn hyphen primary this is going to make kind of a nice blue button and again these are bootstrap classes that i'm using i'm going to say submit and then slash button so there we go now we have that defined if we go to our website and i was just looking up the the jenga syntax before you can see that and i go to sign up notice this is the form that we get so it looks pretty nice if i press submit you'll see we get something popping up don't worry about that right now but this does indeed work and we have our form now just to be really clear here the reason why i can use all these bootstrap classes is because my base template which i'm inheriting from has all these links right so i'm linking to bootstrap that's what we did in those first steps when we added all these links and we added all these scripts that's why i'm able to use all this nice fancy stuff so i just want to make sure that's clear in case i skimmed over then you guys are wondering you know how it looks this nice it's because we're using a css framework called bootstrap again this is not focused on front end um i just wanted to show you or just talk about what bootstrap is for a second okay now we have sign up so you know what while we're in our html and we're going through and doing all this let's just do the login because it's going to be very similar to sign up in fact let's actually copy this entire sign up form and we'll just modify it slightly in login so for login let's replace all of our content here with this form and now let's remove one of these passwords because we don't need two passwords obviously and let's remove first name and we should be good so now we have email and we have password we'll change the name instead of password1 to just be password and there we go and then we will change the the sign up field here to be login there we go and email that should be all good so i think that's actually all we need for the log in field i'm trying to think if there's anything else we should change maybe we'll change submit to login and that should be our login page so now that we have that let's load the login page and we can see this is what our login page looks like so looking nice awesome that is great okay so now that we have that we've done most of the html that we need to write i hate writing html but we just we do have to do it now we can actually go to python and we can start handling this form so notice actually let me go back to the website here when i press login or i go to sign up and i press submit we get method not allowed this method is not allowed for the requested url so this is a great point in time to talk about http requests so when we're talking about websites uh we use something called http right which i believe is hyper tax transfer protocol i think that's what it stands for something like that and anyways http there's a bunch of different methods that you have with them so you have a get request or a get method a post request or a post method a put request or a put method and then delete and there's a few other ones as well there's an update method and some more now all of these methods can be used for whatever you want but the point of these methods is so that you can clearly distinguish between what type of requests are being sent to your website because what really happens here right is when we go to something in our url address bar we hit some endpoint or some function or some route on our server right and in this case our routes are login login logout sign up you know home all of that now these routes need to know whether we sent them a get request or whether we sent them a post request or whatever it was because based on the type of request they're going to do something differently now typically a get request is when you're just loading a website so when you're loading a web page or you're retrieving information now in our case when we go to this webpage we're retrieving the html that represents this page now a post request usually means that you're making some kind of change to a database or some kind of change to the state of your website or the state of the system or whatever it may be so we would post the fact that we are signing in or that we are signing up and when we post that means we are sending a post request with all of the information in our form so if i go here and let's go to sign up the reason why we were getting that error message is because when we hit this button we are actually by default because we defined method equals post let me find this inside of our form we're going to be sending a request to the url that we're currently on so to sign up that is a post request that has all of the information here so the email address the first name and the two passwords that we typed in it's going to send that to our server so our server needs to interpret that and then respond to us or do something based on that post request so hopefully that's clear but those are some of the main http methods and that's kind of how they work a get request is retrieving information a post request is updating or creating something then you have update delete put a bunch of other http requests which we're not going to use in this video but you're welcome to look up and are pretty straightforward in how they work so let's go now and let's make sure that we can actually accept this post request so if i go to views.pi or sorry opt.pi mybad now what we want to do is we want to make sure that login and signup are able to accept post requests so to do that we need to define something inside of our root that says methods and is equal to a list and inside of here we're going to write the strings for the type of requests that this route can accept now by default we can only accept get requests but now when we add get and we add post here we are able to accept get and post requests so let's copy this let's put this to sign up and now what this means is we are able to accept get and post requests from both of these routes so if i go and i refresh and i press submit now notice that it just reloads the page right because we sent a post request and it simply returned to us the rendered template again right that's all that happened when we sent the post or we sent the get request so to be clear when i go to this url from the url bar this is a get request when i press this submit button this is a post request because i'm sending the information to the server all right so now let me show you how we get the information from this form on the server now what we do is we need to start by importing something called request at the top of our flask application so if we want to get the information that was sent in this form we can do the following we can say that data is equal to request.form so this request variable is whenever you access it inside of a root it will have information about the request that was sent to access this route so it will say the url it will say the method it will say all of the information that was sent and in this case we can access the form attribute of our request which has all of the data that was sent as a part of a form so here i can say data equals request.form and then i can print data now you're going to notice that we may get an issue here because i'm doing this regardless of the fact if i'm sending a get request or i'm sending a post request if a get request or post request comes in we're not differentiating between them we just do the same thing all right so now that i have this line sorry i got a little confused there i'm going to go to login and what i'm going to do is i'm going to send some information so i'm going to say tim at gmail i'm just going to say 1 2 3 4 and i'm going to press log in now notice it should print the data here so if i log in then notice here we get printing out an immutable dict object or mutable multidict that has the email which is tim gmail one or tim gmail and then password1234 so that is how we access information from the server here we can look at the request.form attribute and if we sent any data or there was a form attribute then we print it out now the one thing to keep in mind here is that this is only going to work it's only going to give us data if we actually send a form right so if i if i go here and i just refresh this and i look at my immutable dictionary we don't have any data inside of it the reason we don't have any data inside of it is because we sent a get request and while there was no form attribute in that get request we didn't we didn't have any data we sent with the get request but when i send the post request and i press log in we get our email and we get our password so hopefully that's clear but now let's look at how we can do this on the sign up page how we can get user's information and store that in a database and create their user account so the first thing we want to do i'm going to delete this from login i'm going to go to sign up i want to differentiate between my get request and my post request so to do that i'm going to say if request.method is equal to an all capitals post then i want to do something specific so if it's a post request do something if it's a get request do something else that's what i'm checking so inside of here the first thing i want to do is get all of the information from my form so i want the email first name and the two passwords i'm going to say email equals and then request dot form and then you use this method called dot get to get a specific attribute or specific value so we're gonna get email we're then gonna say first name equals request.form dot get and we're gonna get first name then i want password so i'm going to say password is equal to request.form.get and i want password1 so let's call this password1 and then we want password2 so we'll do the same thing password2 equals request.form.get and then password2 awesome so now we're going to get all this information so we will get the email first name password1 and password2 from our sign in form then what i want to do is i want to start by making sure that this information is valid so if this information is not valid then i don't want to create a new user account but if it is valid then i do so let's just do a few very basic python checks here let's say if the len of email is greater than let's say four characters then we're all good to go right we'll say if it's less than four characters then we will kind of tell the uh the user that there's an issue i'm not going to do that this second but i'll show you how we do that then we'll say l if the the len of first name is less than two so if it's only one character or it's zero characters that's no good but we'll do something else if that's the case and then we'll say l if password1 does not equal password2 then we want to tell the user there's an issue and then maybe we want to have like a length on the password we'll say l if the len of password1 is less than seven characters then there's an issue otherwise we'll say add user to database so if all is good we can add the user to the database so what i want to show you now before we actually go ahead and do this is how we can kind of alert the user if something went wrong so they're sending us this request and saying hey i want to make a new account and we want to check to make sure all this information is valid and if this information is not valid well we should pop something up on the screen and tell them hey no that's no good you can't do that now this is where we get into something called message flashing which is a really cool part of flask i think you can do it in django too although i'm not sure so what you're allowed to do or i guess what you can do is you can flash a message on the screen using flask it has like some builtin functionality for it so to flash a message what you do is you import something called flash and then you use this function whenever you want to flash a message so on 25 if i want to flash a message that says hey you know your email is too short then all i do is i say flash and i say email must be greater than four characters okay and then i can define a category for this flash so if this is like a successful message then what i would do is the category equal to success and if this is a failure message or a message where there's an error then i would use the category error now you can name these categories whatever you want like they're up to you you can name them e you can name them one you can name them two so long as you know what they mean because we're going to use these categories to display these messages in a different color anyways let's flash a bunch of messages here so we'll flash here and now we'll say first name must be greater than two characters uh or must be greater than one character story and this one really should be three that's correct then after this for password we'll flash hey your passwords don't match so let's say uh passwords don't match and i need to escape this so just use an escape character like that then we'll do another flash and we will say that password is too short password must be at least seven characters and all these are error messages right and then otherwise uh let's flash a successful message uh now we will actually have to do something else here we'll say account created exclamation point category equals and then success all right so there we go we flash a bunch of messages now if this does work i'm just going to remove this pass and this is only if there's a post request right and then regardless at the end we return the signup.html template so now let me show you how we actually see these flashed messages because if i just run this right now these aren't going to do anything nothing's going to happen because we haven't displayed these messages so i'm just going to rerun the server i'm going to go into my base.html template so let's find that here i'm going to write a kind of block of code uh where it's based i meant to load this up here that is going to actually let me show these flashed messages so underneath the nav bar but above my main content is where i want to show these messages so i'm going to write a for loop and i'm going to do the following or sorry i'm going to write you'll kind of see i just have to write it out and then i can discuss i'm going to say with messages equal to get underscore flashed underscore messages and then we're going to say with underscore categories is equal to and then a lowercase true notice this is lowercase not capital this is a a difference in jenga you use lowercase capitals right all right lowercase capitals use lowercase uh for the first letter for true and false so we're going to say get flash messages with categories equals true and then we're going to end the with statements we're going to say like that and with now what this is going to do is just going to define a variable called messages which is equal to get flash messages this is a function that we can just write out because it's built into flask and this is going to get all of the messages that we have flashed sometimes there may be multiple and then we will display or we will get those messages with their categories sorry now what we will do is we will loop through all of the messages because we could again have multiple messages and we will display them on the screen so i'm going to start by saying first of all we need to make sure we actually have some messages right so if messages and then i'm going to end this if so if we do actually have messages if it's not just empty then what we're going to do is we're going to loop through them so we're going to say for message in messages just like in regular python except we don't need the colon at the end and then we're going to end the for statement we're going to say n4 like that now what we'll do inside of here is we will write some html that will just display whatever the message is so i'm going to write a div i'm going to say div and then class is equal to this is an alert so in bootstrap we have something called alerts i'm going to say alert and then alert hyphen danger so this is an error message and then this is going to be a dismissible alert so alert hyphen dis misable like that and then we're going to say fade and then show now what this will do is it will fade in the alert it will allow us to dismiss the alerts and then it will be shown by default then we will say slash div and one more thing we need to have the role of this equal to an alert okay so that's our div for the alert now inside of here we need to actually show the message so we're going to use two braces we're going to say message the reason we're doing that is because we're accessing this message variable right here then we're going to add a button that will allow us to dismiss this alert so we're going to say button we're going to say type is equal to button and we're going to say class equals close we're going to say data hyphen dismiss is equal to and then you guessed it alert then we're going to end the button and inside of here we're going to put a little icon that will allow us to actually uh like show something nice for this button so we're going to say seban area hyphen hidden equals true and then we're going to say this thing so the ampersand sign uh which is right here and then times semicolon and then slash span now this is just a special character that is gonna be like kind of a fancy x uh and it's just gonna show it in this button uh i can't really talk about it much more than that that's that's just what it's going to do now this however though is what we want to show if we have the category that is equal to error so we have two types of alerts right we have an error alert and a successful alert so if we want to show that we had an error then we probably want to show it in red right which is what alert danger means and then if we had one that was successful well we want to show it successfully we want to show it in green so i'm going to copy this exact thing i'm going to paste it again but i'm going to change alert danger to alert success now what this means is literally change the background color to green that's the only difference between this and the other one but now what i will do is i'm going to have some if statements inside of here that say okay well if the category of this message was what do you call it error then what do we want to do well we want to show the error if it is success we want to show the successful message so i actually need to change this to say for category comma message in messages so we'll loop through both of the things that we need and then we'll do an if statement right here so we'll say if category is equal to and then the string which is uh not danger but error then we will show this so now we need to put our else statement right here so percent l so pretty much if you don't have error we'll just show the success one and then we need to end our four so we can do that right here and four so i know this is a lot of code but this is how you show the flashed messages so we start with the with messages equals flashed with categories equals true we say if we have any messages so if this is not equal to none then let's loop through all of them let's check if the category of our message is error if it is then let's display an error message box so alert danger otherwise let's display the success message box and we'll throw whatever the message actually is in that message box and then why do i have two and fours sorry one of this should be and if my about on that uh and there we go that that's all we need to actually show the flash messages now since i put this in the base template this will now work on any of our pages so if we flash flash messages it doesn't matter where we flash them they will always show up because this is on the base template so if i save this it does this you know crazy formatting which i hate that makes it way harder to read but you get the idea that is how you do this and if you missed any of this you can just go to the code in the description all right so now let's try this let's refresh and let's submit now notice that when we submit the first thing it tells us is email must be greater than three characters so let's go back to the code alright so we're here and we can see in sign up the first thing we check is if the email is greater than three characters or not no it obviously wasn't uh so that's why we got that message so now let's enter an email let's say tim at gmail let's press submit and then says first name must be greater than one characters or i guess i should just say one character let's actually change that we get the idea now it's showing us these flash messages now let's uh input some valid stuff so tim gmail.com tim one two three four five six seven just so that we get past that limit and now it says account created now obviously we didn't actually create the account but that's the message that's flashed if you press the x button it closes the message so there you go that is how you flash messages now at any point in time in your program now that we've implemented that code in base.html if you ever want to notify the user of something just flash a message and then choose whatever category you want to show so error success and you're welcome to implement more categories as well if you wanted to show like a gray message or stuff like that you just have to write some more html for that okay so now that we have that let's talk about the database aspect so we know what a flash message is we know to get information from the form let's do something with this this info so this is where it gets a little bit more complicated but still nothing crazy by any means we're going to go into our init.pi file actually we're going to start setting up our database so the first thing that we need to do is need to import sql alchemy so we're going to say from flask underscore sql alchemy import and then all capitals sql or sql and then alchemy now this is what we're using for the database and the first thing we need to do is define a new database we're going to say db equals sql alchemy and just initialize it like that underneath we're now going to pick our database name it's going to say database our db name is equal to database.db all right so now we have the name and we have the database object this is the object we're going to use whenever we want to add something to the database create a new user whatever we're going to use this object you'll see how this works so once we've done this we now need to tell flask that we are in fact using this database and where the database is going to be located because we actually need a file to store all of this in we're going to be using sqlite 3 to do this so we need to say app.config and then we're going to say this is sql alchemy i always spell this incorrectly underscore database underscore uri is equal to and then we're going to do an f string this is only going to work in python 3.6 above by the way if you this f string if you don't understand the f string i'll explain it in one second but we're going to say sqlite and then colon three slashes and then inside of brackets db underscore name so what i've just done here is i've said okay my sqlite or my sql alchemy database is stored or located at this location so sqlite3 our sqlite colon slash slash and then whatever the database name is which in this case we're calling database.db you can call it whatever you want but what this will do is it will store this database in the website folder so inside of the directory that this init.pi file is in so we're just telling flask where this is located now what we're going to do after this is we're going to initialize our database by giving it our flask app so we're going to say db dot init underscore app like that now again what this is going to do is just going to take this database that we defined here and and pretty much tell it hey this is the app we're going to use with this database this flask app that we just created so now that we've done that what we need to do is define some database models or tables right if you've worked with a database before then this is probably familiar to you but if we want to store something in our database we need to kind of define the schema of what that object is going to look like so anyways hopefully this is clear uh yeah the f string if i didn't explain when you put the f beforehand you can use these squiggly brackets and whenever you write inside of the squiggly brackets it can be like python code and it will be evaluated as a string so this is just going to evaluate to sqlite colon slash database.db because that's our db name all right so now let's actually go into our models.pi file and this is where we're going to create our database models i'm going to do them both right now just to make things simple but we want to have a database model for our users and we want to have a database model for our notes because we're going to be storing notes for this app right so i'm going to say import dot or sorry not import dot from dot import db now what i'm doing is i'm importing from the current package which is this website folder the db object now not db name just db notice that when i go to init.pi i have db defined this is what i'm importing because this is in a net dot pi if i say import from dot where even was i from dot import db that means from this package and i can access anything in the nit top pi import db so that's what we're doing when i say from dot that would be equivalent if we were outside of this directory directory from saying from website import db okay so now that we have that what we're going to do is we're going to say from flask underscore login module we've yet to use yet import like that user mixin now this is just a custom class that we can inherit that will give our user object some things specific for our flask login now you don't really need to worry about what this is but flask login is just a module that kind of helps us log users in and well our user object needs to inherit from user mix in which is what i'm importing right here anyway so we're going to do is we're going to define a class and whenever you want to make a new database model so you want to store a different type of object you're going to define the name of the object usually this is not plural you're just going to make it singular and then you're going to have it inherit from db.m so db again was that sql alchemy object that we created now for our user object in particular this is not for any other objects just for the user object what we're going to do is also inherit from user mixin so now inside of here what we will do is we will define all of the columns that we want to have stored in this table so we're essentially defining a schema or a layout for some object that can be stored in our database we're saying okay this object is going to have what well it's going to have an id it's going to have an email it's going to have a password what else do we want to store on it now it's just easier for me to do this all at once but let's jump in so i'm going to say id is equal to db dot column and then i'm going to define the type of column so for all of our objects we need to have what's known as a primary key whenever you create an object in a database we need some way to uniquely identify this object so for all of my users you know they could potentially have the same email now we're going to make it so you can't have that but let's say they have the same first name we need some way to differentiate them so we have something called a primary key which is a unique identifier typically an integer that represents our object and it's completely unique no other object in this database table in this database table sorry will have the same id so i'm going to say db dot integer this is the type of column and then i'm going to say primary key equals true so our id is our primary key which again is the unique identifier now for all of our objects we will have an id sometimes you call it something else but id is what we're going to use next what else do we want our user to store well we want to have an email for our user we want to have a password for our user and then we want to store their first name so i'm going to say email is equal to db.column you're almost always going to have db.column except for some specific cases and then you're going to define the type of the column so for our email well this is going to be a string the maximum length of this string we're going to say is 150. so whenever you define the string you need to pick a maximum length for it we're just going to go with 150 you can make it larger if you want doesn't matter then we're going to say unique equals true when we define this this means no user can have the same email as another user so it is invalid to create a user that has an email that already exists then we're going to say password is equal to db.column and inside of here we're going to say db.string and we're going to again define how long we want this to be and i'll make max 150. then we'll say our first name like that and honestly this should be camel case sorry is equal to and then db dot column and then we'll say db.string and make this 150 characters okay so now that we've done that we've set up our user model so we are going to store all of our users in a schema that looks like this so we can have multiple users obviously and all of them are going to have an id an email a password and a first name that's what this defines right here next what we're going to do is we're going to set up a an object called note so i'm going to say class note or sorry class called nonobject this is going to inherit from db.model and this is going to be a much more general schema or much more general database model now in case you're confused a database model is just like a layout or a blueprint for an object that's going to be stored in your database so when i say user that means all my users have to conform to this right here when i say note this means all of my notes need to conform to what i have right here you're just telling the database software that like all notes need to look like this all users need to look like this so you know all your information is always going to be consistent anyways this user one was a bit different right because we inherited from user mixin i'm not going to really i don't want to go in too much depth on what this means but it's just to do with the fact that we're using this flask login module if we weren't using flask login we were doing this completely from scratch by ourself we wouldn't inherit from this class anyways now we have class note inherits from db.model this is a much more general class what we're going to do is define very similar things to what we defined in users so first we're going to say id all our notes need to have unique id is db.column db.integer and then primary key equals true now it's worth noting that by default when you add a new object you do not need to define its id it will automatically be set for you so the database software is smart enough to just increment the ids so that they're always unique and the next id inserted will simply be id plus one of the last id that was inserted in the database all right now for our note what do we want to store well we want to store the data associated with the note now you could call this text too doesn't matter and i'm going to say this is db.com db.string and our notes will be at most let's go 10 000 characters long now you know someone could make a note longer than that but let's just go with 10 000 characters and then we want the date that this note was created at so db.column db dot and then date time and inside of date time i'm going to say time zone equals true so it's going to store time zone information as well and then lastly i'm going to say the default value of this field is going to be equal to and i need to import something now i'm going to say from sql alchemy dot sql you will already have this if you imported or sorry if you installed flask sql alchemy and i'm going to import funk now this is very strange but essentially what i'm doing here is i'm making it so that we don't need to specify the date field ourself we just let sql alchemy take care of this whenever we create a new note it will automatically add the the date for us now we do that by saying the default is equal to func.now what funk does is it just gets the current date and time and it will just you know store that as a default value for our date so whenever we create a new note object it will just call func it will get whatever time it is and then it will use that to store in the date time field and it will store the time zone information of this date time object as well alright great so we have that next we are going to actually allow us to associate this a note with our user so all of our notes must belong to a user right now this is the point where i'm showing you how you associate different information with with different users if we have notes and we want to have notes that are being stored for each user like each user has multiple notes we need to set up a relationship between this note object right here and our user object now we do this in the form of a foreign key so a foreign key essentially is a key on one of your database tables tables that references an id to another database uh column so a foreign key is essentially a column in your database that always references a column of another database so in this instance for every single note we want to store the id of the user who created this note so i'm going to say user underscore id is equal to db dot column and then inside of here i'm going to say well what is the id field for my user well it's an integer so i need to match this because this user id column here or field is always going to store an id of one of the users so i'm going to say db.integer and i'm going to say db dot foreign key did i spell foreign incorrectly i did foreign key and then here we're going to say user dot id now this is where i need to kind of go into some more depth here we're saying that the type of column is integer and by specifying foreign key what this means is we must pass a valid id of an existing user to this uh field or to this column when we create a node note object this is what we call a one to many relationship where we have one user that has many notes now i don't really want to get too much into databases this is something that you you kind of need to look up on your own and learn about that's not the purpose of this tutorial here but when you have a onetomany relationship you have one object that has many children now in this case we have one user that has many notes so what we do is we store a foreign key on the child objects that reference the parent object so now every time we have a note we can figure out which user created it by looking at the user id and again this db.foreign key enforces that we must give a valid user id to this object otherwise we cannot create it because we have a relationship between the user and the note now user.id where am i getting this from well the name of our tables by default are underscore so in python we use capitals for the classes because that's the convention but in sql this user class here will actually be represent represented by user so that's why i'm putting user here with a lowercase u now id that's the field of this user object so i'm referencing the id field if the primary key was represented by say like name or email then i would do email but you just put the the primary key of the other object that you're referencing where other table you're referencing in this case user.id great so now we have that and now what this means is that from each note we can reference who created it but we don't just want that we want from all users to be able to find all of their notes so what we need to do now is we need to set up a field on our user that says notes and is equal to a db dot relationship with what well with the note table now what this will do is it will pretty much tell flask and tell sql alchemy do your magic and every time we create a note add into this user's notes relationship that note id so this relationship field will really be a list and it will store all of the different notes now that's not exactly how it's going to be represented but we will be able to access all of the notes that a user owns or has created from this notes field by denoting this db.relationship and then putting the name of the the other table that we're referencing now notice that here it's capital so you know it's not very consistent but you do need capital for this one don't ask me why it's just the way that sql alchemy works when you do the foreign key you have lower case and when you do the relationship you're referencing the name of the class which is obviously capital so hopefully that's clear i know i just went through a lot there um there's just so much to talk about when it comes to making websites so uh you know it is difficult to go through everything in absolute depth but this is the two database models that we're going to have now if we wanted to have another one we would just do the same thing so we wanted to have say you know maybe you could store videos on the platform or maybe you store reminders or whatever we would just set up another class so it's a class reminder it would inherit from db.model we would define all of the fields that we want to store for this reminder class and you can look these up on flask sql alchemy and then we would add the foreign key to our user now this foreign key that i showed you is only when you have a onetomany relationship so one user having many notes now if you had a many to one that means you can have like one note belonging to many users right so there's different relationships you have between objects i just showed you one to many which is the most common you can also have onetoone and many to one so you will have to look up how those work but there's lots of documentation online anyways we should finish that now we did the database now what we need to do is we need to actually create this database so we've set it up we've defined what it will look like but we need to create it so we're going to go inside of a nit.pi we're going to write a little script that's going to check before we run this server every time if we have created the database yet so the first thing we're going to do is after we register our blueprints here we're going to say from dot models and we're going to import our user and we're going to import our note now you could just import models like you could just just say import models like that like either works doesn't matter um and sorry it's not going to be models it's going to be dot models just like dot views and dot auth because we're doing the relative import the reason we import this is not because we're actually going to use anything it is because we need to make sure that we load this file and that this file runs this models.pi file runs and defines these classes before we initialize or create our database so we import the models file so that it defines these classes for us and then we can go ahead and create our database so i'm going to write a function i'm going to say define create database and this is going to take app now what this is going to do is it's going to check if the database already exists and if it does not it is going to create it because if it does exist we don't want to override it because it has data in it already so we're going to go to the top of our program and we're going to say from os which stands for operating system import path and then what we will do is we will use this path module to determine whether or not the path to our database exists we'll say if not path and then inside of here we're going to say website assuming you called your folder here website if you change the name you'd have to change that and then plus db underscore name uh and sorry this is path dot exists so if path dot exists website plus db underscore name then db dot create underscore all app equals app and then we will just print created database exclamation point then we'll run this function so we'll just do it here create no not create app create database and then pass app so the way this works we use the path module check if the database exists if it doesn't exist we create it that's what db.createall does the reason we need to pass app is because we need to tell flask sql alchemy which app we're creating the database for because obviously if it's a different app then things are going to change and this app also has the sql alchemy database uri on it which tells us where to create the database so i'm going to save that and now we will have actually set up this flask sql alchemy all right yeah whatever database whatever you want to call it so now let's run this uh and from import.models what's wrong with import.models i might have to do from.models import sorry and then user actually it's not that it's import dot models as models okay so the reason i got this error it was saying i couldn't import dot models is because we need to if we have a relative import rename what we've imported this as is something that doesn't start with a period because i can't reference like i can't do dot models dot user i can't reference the user class like that because i can't start a variable with a dot so we just need to change the name that we import this as to something that doesn't start with a dot so models and now this should work so import dot models as models because it's a relative import so let's try this and still an error right we might need to actually just do this from dot models import user and import what do you call it so i always get we have note so i guess i can't even do what i just did i thought that was going to fix the issue i don't often run into this but i believe if we're having a relative import i guess we just have to use from and then import all of the classes or whatever we want from that we also i could get guests could import star which just means import everything let's in fact let's do that so let's run this and now define create app uh there's an issue with this what's it saying line nine star only allowed at module level great okay so let's not import star i can't get past the damn import statement let's import user and let's import what else was it note okay i apologize about that guys but issues do happen yeah anyways let's run this down okay so all is working looks like this is the way we're going to have to import it if any python experts are there in the in the comments please let me know why that wasn't working and now let's go and refresh okay uh okay well that was the post request that refreshed anyways all is working on the website login log out sign up home and now look we have a database.db created in our directory awesome so we've now created these tables now that we've done this we can actually do some more interesting coding we can get out of this init.pi file and we can start using our our sign up method right here our signup function to actually create an account so in our else statement so assuming all of this stuff is correct what we're going to do is create a new user so this is actually super simple uh what we're going to do is we're simply going to say user or new underscore user is equal to user like that we're going to say the email for this user is equal to email we're going to say that the first name of this user is equal to the first name and then we're going to say that the password is equal to and then we're going to hold off for a sec because i need to import a few things so what i'm doing is i'm creating a new user this user is the user that i defined in my models.pi file right so user right here so what i need to do now inside of auth.pi is need to import that so i'm going to say from dot models imports user so now i have the user imported so now i can actually you know use this right here but what i also need to do is i need to import a few things from flask login that are going to allow me to hash a password so i'm going to say from and then this is work zuberg or work zug i don't know how you say this dot security import generate password hash and check password hash so if you're unfamiliar with the hash essentially it is a way to secure a password such that you are never storing a password in plain text so you never want to store a password as what the actual password is you want to somehow kind of change that password or convert that password into something that is just much more secure now we call that a hash now i need to discuss what a hashing function is to explain a hash but a hashing function is a one way function such that it does not have an inverse now what does that mean well if we have a function x maps to y let's say we have a function f of x equals x plus one okay this is a function that does have an inverse now the inverse of this function or what is an inverse well inverse means given y which is x plus one like x plus one would be y you are able to get back to x so the inverse of f of x is f of y is equal to y minus 1. now what this function does is it takes y and it maps it to x the way this works is that if i know x plus 1 is what gave me y then i know i can find what the original x was by just subtracting 1 from whatever this function gives me right so if f of x if i call f of 2 and that gives me 3 then i can say f of 3 and that gives me 2 then this function here let's just let's just call this g sorry or f prime then f prime at 3 giving me 2 is the inverse of f x now there's a lot of math going on here but hopefully you get the idea essentially if you're given the output you can find the input that's when inverses now a hashing function is a function that has no inverse that means that you can generate a hash with it so given some x it will always generate the same value y but given a y you cannot find what the x was now the reason this is important is because when you generate a hash what you do is you pass the password to this hashing function as x and it spits out some y but with that y you can never find what the original password was you can only check if the password you type in is the correct password by running it through the same hashing function so if i run my password that i'm you know typing in to try to sign into account through a hashing function and it equals the hash that means the password was correct but if i'm just given the hash there's no way for me to check what the password is so hopefully that's clear it's hard to explain without like writing anything out i'm just you know typing in this editor but the idea is that you're never storing the password in plain text and if you hash the password you can never return to the original password you can only check if the password you type in equals the hash that's stored that's how it works so when we store our password the whole point of this was to say we're going to store it with a hash we're going to generate password hash and we're going to pass the password 1 here we know that password 1 and password 2 will be the same so it doesn't matter what we pass then we'll say the method is equal to and then shot 256 which is just a hashing algorithm uh you can pick a different hashing algorithm if you want but just go with shot 256 if you don't know which one to choose there's all kinds of videos online if you're more interested in hashing it's actually a pretty interesting thing so anyways now that we have that password defined what we need to do is we need to add this this account to our database so we've defined the user but if we want to actually add this to the database what we need to type is the following db.session dot add new user what this means is add the new user to the database then what we need to do is we need to make a commit to the database so we need to pretty much say hey we've made some changes in the database update it we do that by saying db.session.commit so now that we've done that we're all good and this will actually create a new user for us so after we create the new user we will flash the message saying hey account was created awesome success and then we are going to redirect the user to the home page of the website because after they create their account we should sign them in and then they should be redirected to the homepage so what i'm going to do now is i'm going to import from flask something called redirect and something called url4 so i think these are pretty intuitive to understand what i'm going to do with them but what we're going to do after we flash this message in the the else statement here is we're going to return a redirect to the url for the home page that's what we're going to write so we're going to say return redirect which means redirect us to another page and then we're going to say where do we want to redirect well we want to redirect to the url for views.home now the reason i'm doing this is because views is the name of my blueprint so we go here we have views home is the name of my function so i'm finding what url maps to this function now i could just put in a slash like i could redirect uh to just a slash here and this would work the same but that means if i ever changed the url uh and oops this sorry this should not be in a string this url for sorry that means if i ever were to change the url for that home function i would need to come in here and change this so it's better to use url for and just do the blueprint name and the function name that you want to go to that way if the root for that ever changes this will pick it up so that's what this do this is doing is just finding the url associated with this function all right so now that we have this what's going to happen is we're going to actually create the account and then it's going to redirect us to the home page after we send the post request from signing up so let's create an account let's actually i need to rerun the web server here so let's do that and now if i go here i will refresh i will go to sign up and let's make an account so let's say tim gmail.com let's go tim make our password pretty basic does need to be at least seven characters and we'll press submit and it says first name is an invalid keyword argument for user okay interesting so that means that we must invest something up in our models file so let's go to models up high and what does it say here uh first underscored name that's why okay so now let's go to views.pi or auth.pi and i realize that i've just i've just named this argument wrong so i need to say first underscore name equals first underscore name uh and did i ah so let's go over here okay so i just changed this to be first underscore name instead of the camel case first name which i should have done anyways that was just a habit i guess to do it the other way uh but yeah we have first underscore name equals first underscore name and in case i wasn't clear here you just define all of the fields that you have in models.pi and then you set them equal to whatever they're equal to right which is what we did anyways let's run this now uh let's just refresh because this should just resubmit the post request and then first name is not defined where is this uh oh l if len of first name of course we we need to change this so let's go first underscore name okay and let's refresh continue and now it's the issue db is not defined of course db is not defined we didn't import db so these are the kind of issues you run into all right so now we have to import db so we're going to say from dot import db great and that's again from the init.pi file we already showed that previously okay so now we have everything imported that we needed uh hopefully this should work let's refresh and send again and there we go account created that means we actually did create this account and it redirected us to the home page so now what we need to do is we need to actually kind of signify the fact that a user is signed in and has created an account we need to let a user log in right or sign in now that they have the account so let's do that let's handle the sign in form now or the login form so inside of here i'm just going to start kind of coding some stuff out i'm going to say if request.method equals equals post so if we are actually signing in and we're not just getting the page we want to get the email and the password from the form so we're going to say email equals request.form.get and then we want the email and then we're going to say password equals and then request.form.get and then of course we want the password all right now what i'm going to do is i'm going to check if the user email that we've typed in here or that was sent to us in this form is valid if we actually have a user that has that email in the database now this is going to show you how you actually kind of query the database and look for specific entries so i'm going to say user is equal to user which is the database name right and then dot query dot filter by this is what you do when you are looking for a specific entry in your database or a specific user whatever it is and you want to look by a specific column or by specific field so i'm going to say email equals email now this means filter all of the users that have this email right here that's what i'm saying if i was looking by id i'd say id equals and then whatever the id was okay so email equals email and i'm going to say dot first what this will do is return the first result now there should only be one result if there is any results because we might not have a user that has this email but if we do we should only have one because each user must have a unique email so what we'll do now is we'll say if user so if we did actually find a user then we need to check if the password they typed in is equal to the hash that we have stored on the server so we're going to say if check underscore password hash we're going to pass the user.password which is whatever user we found here whatever their password is we access with dot password if i wanted to access their email i would say dot email if i want to access their name i would say first underscore name so we say user.password and then password which is the password that we got from the form so if this is the case if these hashes are the same which is what this function will do is just compare it with it will hash this password and then check it against this password essentially if that's the case we logged in successfully so let's say flash and then we'll say logged in and then successfully like that okay and let's do an exclamation point category equals success okay now if that's not the case then we need to make sure that we tell the user hey no you didn't log in that was incorrect wrong password whatever so if the password is wrong then let's flash a message and let's say incorrect uh password like that maybe try again okay and then category is going to be equal to error and then if the user doesn't exist then we need to tell them that hey there was no user with that email so we're going to say flash and then email does not exist and then category equals error okay and that's all we need for this but before i do this it just reminds me one thing when i was writing this we need to make sure that when we sign up a user that that user does not already exist right we need to make sure that the email they're using doesn't already exist or a user doesn't already have that email so the first thing we're going to do inside of here is the exact same thing we just did here we're going to say user equals user.query.filterby email equals email.first i'm going to copy that it's going to be our first line and now we'll change this to an alif and we'll go actually we'll just go user and then we'll say if user so if there actually is a user then we'll just tell them hey no this email already exists okay so now we will say the category equals and then error great so that's going to make sure uh query the user make sure that we're not signing up users with the same yield okay sweet so now we have that so the login and signup forms are pretty much done let's go back to the website after i rerun this here i guess it crashed for some reason and let's give this a refresh so now let's let's just us log out doesn't do anything but we can go to login and let's see if we can create a new account with another email and then sign it so let's try with tim gmail.com which i think is an email that already exists in fact let me just submit this and notice it tells me already email already exists so great that's working all is good so actually let's sign in as that user so tim gmail.com i'm going to type an incorrect password and incorrect password try again awesome so now let's try again team gmail.com one two three four five six seven which is the password and logged in successfully so that did actually work now again i know this isn't really bringing us anywhere but that's the next step so now that login and sign up is working first of all from login if we log in successfully we need to redirect the user to the home page we're going to say return redirect url for views.home just like we did in the signup page all right awesome so we're getting very close to being done here um i mean we have to add the notes and stuff but like we've done most of the hard stuff already now that we can log in and we can sign up we need to be able to log out we also need to make it so that you can't access the home page unless you're signed in right we want to prompt you to log in or to sign up for an account if you haven't done so already so now we need to make it so that first of all you don't see this home button if you're not logged in you can't access this home page if you're not logged in and if you're logged in it probably shouldn't say log in or sign up at the top it should probably only show you home and log out so how are we going to do that well this is where we're going to use flask login so this is makes life super easy i love the fact that this module exists we're going to start by just importing flask logins we're going to say from flask underscore login imports login user import actually login required yeah import login required and import log out user awesome so these are the functions we're going to use to log in our user we're also going to import something called current user which is going to represent or hold the current user now this is the reason why we needed to in our models file have this user mix in so that we can use this current user object here to access all of the information about the currently logged in user so anyways what we're going to do now is inside of login after we log in we're going to say login user we're just going to pass our user like that so the user that we found here that we have the correct password for this is the user we're logging in that's all we need to do this is going to log in the user last thing we'll say remember equals true now what this does is this remembers the fact that this user is logged in until the user i guess clears their browsing history or their session this is going to store in the flask session so after you restart the flask web server this will no longer be true but if the web server is running it's hard to describe when this is is not going to remember the user but essentially just think of it as unless some circumstance occurs where the user like clears their browsing history or the web server restarts flask going to remember that this user was already logged in so they don't need to log in every single time they go on the website anyways login user user remember equals true now we're going to do the same thing so just copy this line in sign up so after we successfully sign up user we're going to log them in as well because well they should be logged in after they create their account and then we'll now do the log out function or the log out route here so in logout what we want to do first of all is we want to return the redirect for the for and then we're going to just redirect uh to auth.login which is uh just going to be this right here we're doing that because after they log out usually just bring them back to the sign in page right and then all we're going to do inside of here is we're going to say log out user and we don't need to pass a user we just say log out user and it will log out the current user now lastly we're going to add a decorator to this this function here that says login underscore required now all this does is this makes sure that we cannot access this page or this route unless the user is logged in and this makes sense right we don't want to be able to log out if we're not logged in now that's not going to cause an issue but it just makes sense to add this decorator so we will so we have that for log out now and now i'm going to copy this line i'm going to go to views.pi i'm going to show you how we can do this in here so now all we need we don't need login or log out user we'll get rid of those we're going to keep login required in current user though and we're going to add a login required decorator to our home page so now you cannot get to the home page unless you log in and there you go now the last thing we need to do here when we're using flask login is we need to tell our flask in general how we actually log in a user how we find a user so we need to go to our nit.pi file and inside of here we're going to say at the very top from flask underscore login import login manager login manager is what it says it's going to help us manage all of the logging in related things so at the top here under db.net app we're going to say the following we're going to say log in underscore manager equals login manager just like that we're then going to say login underscore manager dot login view so where do we need to go if we're not logged in so essentially where should flask redirect us if the user's not logged in and there's a login required well we want to redirect to auth.login name of our template name of our function right and then we're going to say login underscore manager dot init underscore app and then pass it the app so telling the login manager which app we are using then lastly we're going to define a function here we're going to say at login manager underscore manager dot user loader and we're going to say define load underscore user is going to take an id and inside of here we're going to return the user dot query dot get int id now i'm going to describe this in a second but sorry take all this code we need to put it below when we import this model here so actually below the database after we create the database then we're going to do this now i'll go through this but i think these three lines are straightforward what this is doing is this is telling flask how we load a user now user.query.get this works very similar to filter by except by default it's going to look for the primary key so when you use get you don't have to specify like id equals id it just knows that it's going to look for the primary key and check if it's equal to whatever we pass which is the int version of whatever id is passed to this load user now you don't really need to know much more about this but we're just pretty much telling telling flask here what user we're looking for we're looking for the user model and we're going to reference them by their id and that's what this decorator here is doing it's saying you know use this function to load the user if you had more advanced loading of users and obviously you would have to change this function but hopefully that's clear again it doesn't matter too much if you understand that or not just we have to use for login manager and for for flask lockin okay so now that we have that i think that's pretty much all we need so let's rerun this here and let's check if this is working so let's refresh uh please log in to access this page notice we're getting that popping up so to access this page that's i i don't know why it's showing me this message because i don't think we um we implement this anywhere but if i go to home it keeps saying that log out i mean it's not doing anything because login is required right if i go to sign up i can sign up go to in i can log in so let's log in tim gmail.com and let's go with my password and boom logged in now we can access the home page awesome so now if i go to login i mean it brings me there i can go back to the home page because i'm currently logged in if i log out it redirects me to the login page and i can no longer access the home page so that is how that works that's what flask login does for us it kind of manages what pages we can access and what ones we can't and stores the fact that users logged in or not so now i want to show you how we can change this nav bar so it only displays the correct icons so this current user thing that i had imported in views.pi this is what we're going to use to detect whether a user is logged in or not so this current user has a bunch of attributes if the user is logged in it will give us all the information about the user so their name their notes their email anything on the user model we can access from current user if the user is not logged in then it will tell us that this user is i believe what's known as an anonymous user and it is not currently authenticated because we've not signed in so what we're going to do is we're going to pass to our home template user equals and then current user now what this means is that we will be able to in our template reference this current user and check if it's authenticated so let's go to our home.html template and inside of here actually not home sorry let's go to base.html and inside of base.html what i'm going to do is i'm going to go to my nav bar and i'm going to do some if statements and only show some of these links if the user is signed in so i'm going to do if like this so if and then user dot is underscore authenticated like that did i spell authenticated correctly i think i did so if they're authenticated then all we're going to show is log out in home right so let's do that here we will show home first probably and then log out after so put home above then otherwise so inside of here we'll go percent percent else and then percent percent and if okay so otherwise so if they're not logged in then we'll show the login and sign up buttons if they are then we only show those so now that we have that that's all we need to do to handle the navbar we just need to make sure that whenever we render this base template which is in all the templates we pass the current user i'm going to save that i'm going to go to auth now i'm going to do the same thing for my render template so i'm going to get rid of boolean here and for login i'm now going to pass user equals current user same thing for my log out although actually no i don't need to do for logout sorry just for sign up now i'm going to pass user equals current user so now if we have access to the current user we can use it in our template and then we'll display the correct thing for the navbar so let's rerun this and let's go to our website and let's refresh so now notice that those two things went away we're not uh logged in so we only have log in and sign up but if we log in so tim gmail.com and uh what was the password okay then we get home and we get log out and now i can go to the homepage obviously or i can log out and it redirects me here so that is how you do that awesome so now that we have that what i want to do is i want to talk about adding notes and yeah and then at that point we're going to be pretty much done so let's go to our home page and we're just going to add kind of that little form or the little ui aspect to allow a user to add notes and we'll also have to display all the notes as well so let's start by allowing user to create a note so we're going to make a form so we're going to say form and then method equals post like that and then here we'll say slash form now we need to make a text area for the notes we're going to say text area we'll say name is equal to note id is equal to note and the class will be equal to form hyphen control then we will end the text area and then we'll do we will create a button so we're going to say div we're going to say align equals center just to put this button in the middle of the screen i'm going to end the div we're going to add a button i'm going to say button type equals submit class equals btn btn hyphen primary we're going to say add note and then we're going to end the button all right so now we have a form and when we press this it will send a post request to our url with the note okay so now we have the form let's write some code that can actually generate or show all of the notes so first i'm going to make an h1 tag and i'm going to say align equals center i'm going to end the h1 and then i'm going to say that this is notes and then under here i'm going to write a list group that's going to allow me to show all of the different notes so first i'm going to make ul which is like what you do for list i'm going to say class this is a bootstrap class list hyphen group list hyphen group hyphen flush uh and then we're gonna say id equals notes then we will end the ul and we're gonna do a for loop to loop through all of the notes so i'm going to say percent percent for user dot notes now remember we're always passing user right and since we're passing user what we can do is we can access all of the notes associated with the user because they have that if we go to model sub pi here they have a notes field that is actually going to store all of our notes so we're going to say for note in user.notes we're going to end the four so we don't forget and then what we'll do is we'll just display the node.data so we'll say note dot data like that and the data again is just the text associated with the note we also could display the date of the note but i'm not going to do that for right now okay so now that we have that let's just put this inside of an li tag sorry just so it shows up nicer and i will change the li tag so we have a class here so for li i am going to say class equals list hyphen group hyphen item sweet okay so now that we have that we should actually display all of the notes um i'm trying to find a word here just in a list and that should be good okay so now we'll dispel the notes then we have this form so let's go to the homepage and see how this looks so let's sign in i guess tim gmail.com and there we go and now notice we have add note method's not allowed that makes sense and then we have the note field like this now for some reason my cl oh well it would be helpful if i spelled class correctly i was like my that looks really bad anyways now we have the button that's proper but what i want to do is in between the text area and the div i'm just going to add a break line just there's a bit of space so br and then slash and now let's refresh this and notice we okay that's much better that looks a lot better so moving on let's make it so we can actually add a note now we kind of already know how to do this we're at the point where you guys you know you could probably go off on your own now let's go to uh views.pie and we're on the home page we now need to make it so that the the post method is allowed for this route so i'm going to say methods equals and then get and then post all right so now we'll check if the request dot method and we need to import requests so let's import requests like that is equal to post so if request.method equals equals post then what we need to do is get the notes we're going to say note is equal to request.form dot get note i'm going to go a bit faster because we've done this a few times now and we're going to get the note and we're just going to make sure that this note is at least length one so we're gonna say if the len of note is greater than or equal to one or sorry is less than one then we will flash uh note is too short and then i guess we'll just go with category equals air okay otherwise what we will do is we'll flash note added category equals success and then obviously we're going to have to actually add the note so how do we add the note so to add the note what we need to do is we need to say new underscore note is equal to note which means we need to import that so we're going to say from dot models import note and then we're going to say for this well the data of our note is equal to note so whatever the text is that was passed for the form and then the user id of our note is equal to current user dot id because with the current user we can access any of the fields on it like the id so that will create our note there's nothing more we need to pass this then we will say db dot session dot add new underscore note and then lastly db.session.commit and then i guess we actually don't need to add anything we just do that then we will flash node added we will return back to the home page and we will render that note so i believe that's all we need uh to actually add the note i think that should be good and then yeah you'll see it and it will show up on the page awesome now that we have that one more thing that we need to do is we need to import db so we're going to say from dot import db i knew i was missing something and let's rerun the web server so now let's see if we can create a new note so let's go and let's refresh and let's say hi add note and name flash is not defined okay we need to import that so from flask let's import flash now let's refresh continue and notice that we added now we added it twice just because the post request was sent twice but there we go so we added it on now what i want to do is show you how to delete the note so let's just go low and make sure this one works notice hello is now added and now i'll show you how to delete them so let's go to home.html and i'm going to add a button for all of our notes that allow us to delete it so underneath note.data but still inside of our li here we're going to say button type equals and then this will just be button class equals close and then on click equals we're going to call a javascript method which we'll write in one second our javascript function then we will end our button so slash button and we will add that little icon that's the x that we used previously so we're going to say span and then area oops hyphen hidden which means like just don't show this uh equals and then true and then end the spin and then we're gonna do that little fancy symbol again so ampersand times semicolon save that and now we need to write the javascript function we're going to call uh you'll see why we need to do this but this is kind of the way that we would delete something i'm trying to find the words to describe this i'm just going to do this and then you'll see kind of why we need to do it but since we're not submitting form data and instead when we press the button we want to send a request to the back end this is kind of a standard way to do this there's of course other ways to do this but we just write a little bit of javascript that will send a request to the back end for us that will delete the the note so we're going to say delete note is the name of the function we're going to write and then inside of here we're going to do two squigglies and we're going to write note dot id so the reason for this is that we need to be able to figure out which note we're deleting and of course we want to delete the note with whatever id is in this field so we need a way to figure out which note we pressed on and the way we do that is since we're in the for loop we're going to say that on click we call the delete note with note id so i feel like i'm explaining this very poorly but we will have a function in javascript called delete note that will take in a note id we are specifying that we want to pass the id of the note that we're showing in this list column or this list row and then that way when we press on the close button in this row it will send the note id associated with this note and we will delete that note from the database so let's save that for some reason it's giving me some some red squiggly lines here i think this should be good i'm just double checking to make sure i did everything successfully or correctly i think i did let's go now to our index.js now remember i showed you how to add this in the beginning part of the series in case you're or serious beginning part of the video in case you're forgetting how to do that if you go to base.html this script tag right here is referencing this index.js file which we have stored in the static folder so make sure you have this line in your base template at the very bottom and that it looks like this and that you name your file index.js unless you modify that line anyways inside of here let's write what we need so we're going to say function delete note we're going to take a note id and we're going to send a request so to send a request in vanilla javascript you use fetch and then we're going to send it to an endpoint we've not yet created called delete note and inside of here we're going to pass the methods we're going to say method equals post we want to send a post request and the body is json.stringify and we're going to send note id and then being note id now i'm just going to type this out then i will explain it don't worry we're just going to say underscore res and then we're going to make an arrow function let's say window dot location equals sorry dot href equals and then slash okay so what this is going to do is it's going to take the note id that we passed and it's going to send a post request to the delete note endpoint which we've yet to write which we'll write in a second and then after it gets a response from this delete note endpoint it's going to reload the window this is how you reload the window with the get request specifically so window.location.href equals slash just means redirect us to the home page which in turn will just redirect the page all right sorry refresh the page so that's what this is doing uh don't worry if you don't understand the javascript this is all we need to delete the the note and this is just how you send a really basic request to the backend from javascript we're not using ajax or anything like that so let's go now to views.pi we need to make another view so we're going to say at views dot and then root and we're going to call this one we do need methods actually we're going to call this one delete note now methods is going to be equal to post and it's only going to be post there's no get requests we can send here just post we're going to say define delete and then underscore note and what we're going to do is we're going to look for the note id that was sent to us now it's interesting how we have to do this because we're sending the request not as a form so the request is actually going to come in in the data parameter of our request object which you will see in a second which means we need to load it as json so i need to import json which is built into python so import json up top and we're going to say that the note is equal to json.loads and then we're going to load the request dot data then what we're going to do is we're going to say note id sorry is equal to and then this is going to be data at note so what this is going to do is it's going to take this request data which is a string this string is what we just sent from here so it's going to be note id and then node id and and what this dot what this does json.stringify is it turns this into a string so we need to now take the string from views.pi turn it into a python dictionary object so we can then access the node id which is going to come in as the field node id and then what we're going to do is find this node so we're going to say note is equal to and then note dot query dot get and then note id so again when you use get it accesses the primary key which is what we're what we have here anyways so if we found a note so if note does exist then what we will do is we'll say if note dot user underscore id equals current user dot id then db.session dot note this is how you delete an object you query it and then you just put it inside of the delete there i don't know i added a semicolon and that will delete it then you say db.session.commit and then we can just return something so i'm just going to return jsonify which i'll import in a second with an empty response now i'm going to talk about all this don't worry i know i'm going fast but at the top just import jsonify and let's discuss this so this that i just wrote here what this is doing is it is going to take in some data from a post request it's going to load it as a json object or a python dictionary we're then going to access the note id attribute which again is right here what we'll do then is we'll say note.query.gets we'll look for the note that has that id check if it exists first of all if it does exist then of course we can delete it if it doesn't we don't need to delete it and then what we'll do is we'll say well if we own this note so if the user who is signed in does actually own this note because we don't want to let users who are signed in delete other people's notes right then we will delete the note so just a little security check and then what we'll do is we'll return an empty response now we just need to do this because we do need to return something from these views we're not returning html here we're just returning an empty response that is either saying hey you know it was successful or it didn't work or whatever and in fact at the very bottom here we can just return jsonify no matter what and we're just jsonifying an empty python dictionary which essentially means turn this into a json object that we can return and well we're not returning anything but we just need to return something it's just like a requirement from flask so anyways that's what we need to do that should now delete our notes so now let me get out of this let me run the server and what's the issue here if note ah i used one equal sign this should be two equal signs okay let's rerun this so i just had one equals that needs to change to two now if we refresh uh i don't want to do that let's just do this notice that we have our x's now and if i press my x no the requested url was not found on the server interesting so looks like we must have sent the wrong url uh name data is not defined oh oops sorry guys this should be note uh first of all that should be note so that will fix one of the errors and let's see what other error we had delete note was not found on the server it should have been found on the server we have delete note here interesting okay i'm just going to try this again and see what's wrong let's refresh let's go back to slash home oh that's why we don't want to go to slash home we just want to go to slash and i think the issue is in index.js no i'm just looking around for the problem here for some reason we got redirected to slash home i don't know why that happened um anyway sorry let's let's just try this again okay so let's refresh let's try to delete a note it says it was not found on the server okay i'll be right back after i look for this all right so i fixed the error it was actually just a caching issue with my like previous version of this project before i started the tutorial uh so you guys shouldn't run into that issue there's nothing that you need to fix i just cleared my browser cache by going up here and pressing empty cache and hard reload when my console was open anyways uh now we can delete nodes so if i go test and i add it i can press the x and it deletes the note so that is actually it that's all i wanted to show you that has been this tutorial now this took us almost two and a half hours i do apologize that this was a long time but i hope you guys can appreciate the effort here the amount of time i just sat in front of the camera and talked to you and this gives you a really good start on your project this again is how you create user accounts how you actually associate information with users and i'm really hoping that now you're going to have you know some strong fundamentals in flask and have a nice template project and you can get you guys can go out and build your own interesting website so anyways that is it i'm going to leave it here if you guys enjoyed please do make sure to leave a like subscribe to the channel and of course i will see you in another youtube video
