With timestamps:

00:00 - if you want to make a lot of money in
00:01 - software development one of the best
00:03 - ways to do that is to build a SAS that's
00:05 - a software as a service business some of
00:07 - the largest companies in the world that
00:09 - you probably use every day are SAS
00:11 - businesses and make millions if not
00:13 - billions of dollars think of companies
00:16 - like Shopify Salesforce HubSpot and tons
00:19 - of others they make a massive amount of
00:21 - money usually because they were able to
00:23 - build a scalable software if the people
00:25 - actually wanted now I won't tell you
00:27 - that's easy but if you can do it
00:29 - successfully and you have a great idea
00:31 - you are well on your way to making a ton
00:33 - of money in software development with
00:35 - that said how do you build a SAS well
00:37 - first you need a good idea which I'll
00:38 - leave to you second you need software
00:40 - you need to build the software in a way
00:42 - such that it's scalable you're getting
00:44 - the correct analytics and you're able to
00:45 - deliver value to your customers so in
00:48 - this video I'm going to share with you
00:49 - one of the best Stacks to go with if
00:51 - you're looking to build a SAS as fast as
00:53 - possible now keep in mind there are so
00:55 - many different Technologies millions of
00:57 - ways to go about building software this
00:59 - stack I'm going to share with you is
01:01 - something that I use personally that
01:02 - I've had a lot of success with and that
01:04 - I know many other people are using that
01:06 - are raising millions of dollars and
01:08 - building SAS companies right now as you
01:10 - get more complicated your Tech stack may
01:12 - change but if you're looking to get up
01:14 - into running off the ground as fast as
01:16 - possible this is something you probably
01:17 - want to consider with that said let's
01:19 - dive in and let me share with you the
01:21 - ultimate SAS toolkit so let me start by
01:24 - mentioning that I am no SAS God I do not
01:26 - hold all of the answers so take what I
01:28 - say with a grain of salt and obviously
01:29 - do your own research there's so many
01:31 - different ways to build a successful
01:33 - company so many different technology
01:34 - Stacks you can use and just because I
01:36 - recommend one doesn't necessarily mean
01:38 - it's the best it's just from my personal
01:40 - experience and what I've heard from a
01:42 - lot of other people in this space
01:43 - regardless for a lot of these services
01:45 - or whatever you're purchasing you're
01:47 - going to need to buy it from somewhere
01:49 - now in that case I'd recommend you check
01:50 - out the sponsor of this video which is
01:52 - lenode Akamai now it was formerly called
01:54 - Leno the new name is kind of Akamai but
01:56 - they're kind of mixing and matching so
01:58 - akamala node pretty much the same same
02:00 - thing anyways I've worked with them for
02:02 - over four years they're personally what
02:03 - I use for all of my cloud service needs
02:05 - I have kubernetes clusters with them
02:07 - virtual private servers storage volumes
02:09 - uh got terraform stuff going I got all
02:12 - kinds of stuff with them I use databases
02:14 - on lenode I have my domains hosted there
02:16 - literally everything is with them
02:18 - because they're so easy they're so nice
02:20 - to use super fast and they have a real
02:23 - support team that I've actually reached
02:24 - out to many times that are super helpful
02:26 - so I don't have to wait in line I don't
02:28 - have to talk to robots I just reach out
02:30 - and talk to a legitimate human being
02:31 - which is a massive benefit now lenode
02:34 - has pretty much everything you can
02:35 - imagine from Storage volumes storage
02:37 - buckets they can do serverless
02:39 - architecture they have one-click
02:40 - installs for all the databases you might
02:42 - want and since they're partnered with me
02:44 - you guys can get a 100 free 60-day
02:47 - credit by clicking the link in the
02:48 - description and signing up for a new
02:50 - account as I go through the different
02:51 - services in this video pretty much every
02:54 - one of them that I mentioned is
02:55 - available through lenode so feel free to
02:57 - check that out and use it for free with
02:59 - that cred edit that I just mentioned so
03:01 - the first thing you'll likely consider
03:03 - when you're building your SAS business
03:04 - is what is your back end going to be
03:06 - specifically what type of architecture
03:08 - are you going to have now I like to
03:10 - recommend that people go with a
03:11 - serverless architecture this is great
03:13 - because it means you don't really need
03:15 - to worry about the infrastructure that
03:17 - your code is running on you simply worry
03:19 - about writing correct and scalable code
03:21 - and then you allow Cloud providers like
03:23 - lenode Google Amazon Microsoft Etc to
03:26 - handle that deployment in the
03:27 - orchestration for you now with a
03:30 - serverless architecture that means that
03:31 - your different Cloud functions which
03:33 - we'll get into in a second are going to
03:34 - automatically scale up and down and
03:36 - you're only going to pay for what you
03:38 - use for now there are some disadvantages
03:40 - to this which I'll get into later on but
03:42 - typically if you're trying to get up and
03:43 - running as fast as possible go with a
03:45 - serverless architecture where you're
03:47 - working in some type of environment like
03:48 - node.js go or python you can write
03:51 - something known as Cloud functions these
03:53 - Cloud functions can respond to different
03:55 - events you can schedule them to run you
03:57 - can make them run when things change in
03:58 - a database or storage bucket and it's
04:01 - very useful for writing a back end
04:02 - that's very scalable and easily
04:04 - maintainable because of the small size
04:06 - of the functions that you're writing now
04:07 - a practical example of something that
04:09 - would use serverless architecture is
04:10 - something like YouTube to MP3 or any of
04:13 - those converters you see online
04:14 - typically what they'll have is a cloud
04:16 - function running on the back end and
04:18 - this Cloud function will duplicate
04:20 - itself and expand or scale as more
04:22 - demand is required and it will shrink
04:24 - down and stop being ran when no one's
04:26 - using the servers that means if a
04:27 - hundred people go to YouTube to MP3 it
04:30 - can handle that Demand by just spinning
04:31 - up more instances of the cloud function
04:33 - so it can do this in parallel and if no
04:35 - one's using it it just tears all of them
04:37 - down so you're not paying for usage that
04:39 - you don't have lastly the major
04:41 - advantage to Cloud functions and
04:43 - serverless architecture is that
04:44 - deployment is typically very simple and
04:46 - it's handled for you by the cloud
04:48 - providers you don't need to worry about
04:49 - setting up an automated Pipeline and all
04:52 - of this crazy stuff or packaging and
04:53 - deploying your code you simply run a few
04:55 - commands make sure your code is set up
04:57 - in the correct manner where there's all
04:58 - kinds of guide for and you can just
05:00 - deploy your code to whatever the
05:02 - infrastructure is and not worry about
05:03 - where your code is running just worrying
05:05 - about writing the code itself alright so
05:07 - now that we've talked about our backend
05:09 - architecture Let's Talk About Storage
05:11 - specifically storage for things like
05:12 - videos files images large pieces of data
05:16 - that you're not going to store in a
05:17 - traditional database now you could store
05:19 - this on say a hard drive right you could
05:21 - store this on some remote server the
05:24 - issue with doing that is you don't
05:25 - really get a lot of flexibility and as
05:27 - soon as you reach the maximum storage
05:28 - capacity it's very difficult to scale
05:30 - that up and to increase it so imagine
05:32 - you have like a two terabyte hard drive
05:33 - right you're going to pay for that hard
05:35 - drive maybe it's 70 bucks 100 bucks
05:37 - whatever it costs now even if you're not
05:39 - using all of those two terabytes you're
05:41 - still paying for the entire hard drive
05:42 - and as soon as you fill it you now need
05:44 - to add another one not very flexible a
05:46 - lot of issues with that you're going to
05:48 - have some redundancy concerns what if
05:49 - the hard drive fails so instead you want
05:51 - to use something like a storage bucket
05:53 - now a storage bucket is a redundant
05:55 - globally accessible and essentially
05:57 - infinite size bucket where you can store
05:59 - info Nation it's provided by companies
06:01 - like lenode Amazon Microsoft all of the
06:04 - large Cloud providers have it and what
06:06 - you can do is only pay for what you use
06:08 - and continue to increase the size of the
06:10 - bucket as your data needs increase right
06:13 - so if I only have one user I pay a few
06:15 - cents if I have millions of users I pay
06:17 - tens maybe hundreds of thousands of
06:19 - dollars for my storage bucket but again
06:21 - the point of the storage bucket it's
06:23 - backed up it's redundant it's in
06:25 - multiple different locations you can
06:26 - access it from anywhere around the world
06:28 - you have some URL that just links to
06:30 - that file or to that media and it has
06:33 - all kinds of permissions and typically
06:34 - will hook in with your backend
06:36 - architecture that means you could
06:38 - actually check to see if something
06:39 - changed in your storage bucket and if it
06:41 - changed you could trigger a cloud
06:42 - function to run for example so you can
06:44 - look into that more I won't kind of make
06:45 - a whole video about storage buckets here
06:47 - but I'd highly recommend that you use
06:49 - that for all of your user generated
06:50 - content especially if it's going to be
06:52 - very large files anyways that is storage
06:54 - let's move on alright so now that we've
06:56 - talked about storage let's get into
06:57 - databases now databases and store
06:59 - storage are different Right storage is
07:01 - going to be those larger files where you
07:03 - have typically videos photos Etc and
07:05 - your database is going to be for that
07:07 - more granular smaller information think
07:09 - usernames passwords comments likes small
07:13 - relations tracking stats okay that's the
07:15 - type of stuff you're going to put in a
07:16 - database now for database you have
07:18 - really one main big decision to make and
07:21 - that is do you want to go with a
07:22 - relational database or a non-relational
07:24 - database now both of them have pros and
07:26 - cons I could make probably an entire
07:27 - series talking about this but what I
07:30 - recommend for most SAS businesses is to
07:32 - go with a non-relational database
07:33 - something like mongodb firestore
07:36 - something that is nosql okay now people
07:39 - will have a lot of issues with this
07:40 - there may be many people in the comments
07:42 - that say no you should go with a SQL
07:43 - database the reason why I'm recommending
07:45 - this is that a nosql database is
07:47 - typically easier to scale horizontally
07:49 - meaning you can actually Shard it out
07:51 - onto multiple different machines if you
07:53 - go look at something like mongodb you
07:55 - can see how they do all of their scaling
07:56 - there and it's good when you're working
07:58 - really quickly and when your data schema
08:00 - is changing very fast and frequently so
08:03 - that means that maybe you have four
08:05 - columns right now or four fields in your
08:06 - data but in a week you're going to have
08:08 - 20 fields or 20 columns in that case is
08:10 - going to be a lot easier for you to work
08:11 - with an unstructured database which is a
08:13 - nosql database rather than working with
08:16 - a SQL database or a structured database
08:19 - now I will say the advantage of using a
08:21 - structured database is your data is much
08:23 - more consistent it's cleaner you have a
08:25 - lot less issues in terms of checking the
08:26 - Integrity of that data and dealing with
08:28 - it in the future and you can run much
08:31 - more complex queries much faster and
08:33 - more efficiently however nosql again in
08:36 - a very Dynamic fast changing environment
08:38 - is typically preferred and that's
08:39 - usually what I like to use especially
08:41 - when it comes to setup and deployment
08:43 - nosql databases are going to be easier
08:45 - than your SQL databases the only time I
08:48 - really recommend the SQL database is
08:50 - when you kind of know exactly what
08:51 - you're doing you're going to have a more
08:52 - mature data structure you have
08:54 - experience with databases you understand
08:56 - SQL you can write those more complex
08:58 - queries for most people the that aren't
09:00 - database Engineers or back-end
09:01 - developers nosql will probably be your
09:04 - go-to now I'd love to hear your thoughts
09:05 - on that in the comments by the way so
09:07 - let me know down below typically I
09:09 - recommend you just go with something
09:10 - like mongodb or Firebase that's what I
09:12 - have experience using if you do want to
09:14 - go with the SQL database you have a
09:15 - bunch of options sorry postgres my
09:18 - sequel all kinds of other add-ons and
09:20 - extensions you can use again don't want
09:22 - to get too into the weeds here but
09:23 - something you should do a bit of
09:24 - research on and look into SQL or nosql
09:27 - all right so now we move on to talk
09:28 - about the front end now before I get
09:30 - into any specific Tech Stacks or what
09:32 - I'd recommend I'll say that for the
09:34 - front end really the important part is
09:35 - that it loads really quickly it looks
09:38 - good and that it's responsive whenever
09:40 - you're building a SAS those are the
09:41 - three main things you're going to want
09:42 - that's just immediately going to make
09:44 - your company look professional and give
09:45 - a great user experience if your page
09:48 - speeds or your load speed story are
09:49 - really slow that's going to immediately
09:51 - turn people off I know for me personally
09:53 - if I ever go to a website and it takes
09:54 - more than two or three seconds to load I
09:56 - usually don't continue navigating to
09:58 - that website or I I only go there if I
10:00 - really need to be in that place there's
10:02 - actually a lot of stats online that kind
10:04 - of talk about user retention and Page
10:06 - speeds but you want to make sure
10:07 - whatever you're doing you load it
10:09 - quickly and you keep that in mind right
10:10 - speed is very very important same with
10:12 - responsiveness if I press a button and I
10:14 - don't get any feedback or I don't know
10:15 - what's happening that's really going to
10:17 - turn me off as a user so you want to
10:18 - make sure that everything is responsive
10:20 - it's clean it's simple to use you know
10:22 - that's a lot of user experience and UI
10:24 - stuff don't need to dive into that but
10:26 - that's the main consideration here so
10:27 - whatever you pick for your front end
10:28 - make sure you hit those different boxes
10:30 - with that said what I'd recommend to
10:33 - create kind of an efficient front end
10:34 - and what's popular now is to use server
10:37 - side render it now server side rendering
10:39 - means that a lot of the load is being
10:40 - handled by the server so it's actually
10:43 - kind of generating the entire completed
10:45 - HTML document and then sending that to
10:48 - the client where very minimal work is
10:49 - done to render that page now that's the
10:51 - opposite of what will typically happen
10:53 - with a dynamically loaded website where
10:55 - what you're doing is downloading the
10:56 - HTML from the server and then you're
10:59 - downloading all of the additional
11:00 - resources like the JavaScript the CSS
11:03 - and then your client is compiling that
11:05 - all together and rendering the website
11:07 - for you so server side rendering means
11:09 - you're taking a lot of the load that's
11:10 - typically done by your client and you're
11:12 - putting that onto the server that way
11:14 - you can load the page faster immediately
11:16 - once it hits your browser now there's a
11:18 - lot more complexity to that you guys can
11:20 - kind of add to it in the comments or let
11:21 - me know what you think but I'd recommend
11:23 - you go with server-side rendering and if
11:25 - you wanted to do that you could use
11:26 - something like nexjs and react or I
11:28 - believe the other alternative is
11:29 - something like nuxt.js
11:32 - n-u-x-t.js and view.js there's a bunch
11:34 - of other front-end Frameworks obviously
11:36 - but those are the two popular ones
11:37 - personally I use nexjs and react so now
11:40 - let's move on to some of the more
11:42 - complex but very important things you
11:44 - want to consider as your application or
11:46 - your SAS grows first continuous
11:48 - integration now this really refers to
11:50 - continually integrating changes into
11:52 - your repository or into your code base
11:54 - and ensuring that any change that you
11:56 - make is stable and working so you have a
11:59 - hiding degree of confidence that the
12:00 - code on your main or Master branch is
12:03 - always stable and up to date now this is
12:05 - a lot easier said than done and I am
12:07 - grossly simplifying what needs to be
12:09 - done for this but at a minimum you're
12:10 - going to want to be writing tests for
12:12 - all of the important aspects of your
12:13 - code so for me personally if I'm trying
12:16 - to go quickly I make sure I test all of
12:18 - my back ends so every single backend
12:20 - function I have has a set of unit tests
12:22 - so I know that all of those back-end
12:24 - functions are working as they should be
12:25 - then I will set up some minimal
12:27 - integration tests so I know that my
12:29 - front end calling my back end is working
12:31 - properly any systems that are
12:33 - interconnected are kind of communicating
12:35 - in the correct way going a step further
12:37 - you could set up end-to-end tests where
12:39 - you're testing the application really
12:41 - from a user's perspective and going
12:43 - through everything from the front end to
12:44 - the back end to making profiles to
12:46 - signing up Etc that's a lot more work
12:48 - not something I typically do at the
12:50 - beginning stage but you want to set up
12:52 - all of this automated testing and you
12:54 - want to write in kind of a test driven
12:56 - development way now a lot of people have
12:58 - different opinions on this I'm not going
13:00 - to say that I'm the best at testing code
13:01 - in the world but I definitely try to do
13:04 - that at least for the integral and data
13:06 - kind of aspects of my application so I
13:08 - know that at minimum the entire back end
13:10 - is working and then I can deal with the
13:12 - front end test which are a bit more
13:13 - annoying to write so you want to write
13:14 - all of these tests and then set up
13:16 - automations so that they're
13:17 - automatically going to be ran before you
13:19 - make any change or commit anything to
13:21 - your main or Master Branch the simplest
13:24 - way to do this is to use a tool like
13:25 - GitHub actions this can automatically
13:27 - invoke testing scripts that will run
13:29 - against your code when you make a pull
13:31 - request you could go a bit more
13:33 - complicated and get into things like
13:34 - gitlab or Jenkins not going to talk
13:36 - about those too much in this video at
13:38 - minimum though have some automated
13:40 - testing and if you're getting a bit more
13:41 - complex you may actually want to build
13:43 - the entire application push that to some
13:45 - kind of environment and have it be
13:47 - tested on say multiple different devices
13:48 - or in multiple different environments
13:50 - alright moving on very closely to
13:52 - continuous integration we have
13:54 - continuous deployment now this means
13:56 - that anytime you are making a change
13:58 - that is going to stable and should be
14:00 - deployed to something like the main or
14:01 - Master Branch it's automatically going
14:03 - to be deployed in all of the
14:04 - environments that need to be configured
14:06 - will be kind of done automatically right
14:08 - so let's imagine again you kind of have
14:10 - a pull request maybe you merge that's
14:12 - the main branch maybe you have some
14:13 - production branch and all of a sudden
14:14 - you know you Fork off at the main branch
14:16 - to the production branch and you're now
14:18 - ready to push something into production
14:19 - well rather than having to do this
14:21 - manually every single time you'd want to
14:23 - set up a continuous deployment so some
14:25 - kind of automation where it would
14:26 - automatically say push or Cloud
14:28 - functions or update your Cloud functions
14:29 - it would automatically make a new build
14:31 - and upload that to the app store or the
14:33 - Google Play store or push it to a
14:35 - website or whatever it is that you're
14:36 - doing that's really what's referred to
14:38 - here in continuous deployment that you
14:40 - are continually deploying changes as
14:42 - they are made now that could be to
14:43 - production that could be to a staging
14:45 - environment that could be to a Dev
14:46 - environment where you have some maybe
14:48 - public URL that people can use doesn't
14:50 - matter what you're doing you want to set
14:52 - up all of these automations now it's
14:53 - hard for me to get into a ton of detail
14:55 - here without making this video super
14:56 - long if you want more on this topic then
14:58 - let me know in the comment comments down
14:59 - below alright so we've gone through some
15:01 - of the main Concepts here but I just
15:03 - want to mention that as you start
15:04 - scaling and getting bigger and bigger
15:06 - and maybe your team grows and you're
15:08 - into some more complex and advanced
15:10 - tools or use cases you may want to
15:12 - consider looking at things like
15:13 - kubernetes and Nomad and slightly
15:16 - changing or adding different
15:17 - architecture that's not purely
15:19 - serverless so for example serverless
15:21 - architecture is really good however when
15:23 - you get into long-running tasks High
15:25 - computation and you're doing things like
15:27 - image processing machine learning model
15:30 - training whatever it may be there's a
15:32 - lot of compute power required that's
15:34 - probably not going to lend itself well
15:35 - to serverless instead you're going to be
15:37 - setting up your own environments your
15:39 - own type of deployments your own
15:40 - configurations which are much more
15:42 - complicated but are definitely worth it
15:44 - when you need that type of environment
15:46 - and that type of compute power so really
15:48 - in summary here I just want to mention
15:49 - that once you start getting into bigger
15:51 - use cases you have multiple micro
15:53 - Services communicating with each other
15:55 - you have long running tasks you're doing
15:57 - a lot of compute you have some back end
15:59 - heavy operations need to perform you may
16:01 - want to stray away from regular Cloud
16:03 - functions and move into something like
16:05 - kubernetes Nomad Docker all of those
16:08 - things that are really helpful for
16:10 - setting up those more complex
16:11 - environments that need some more fine
16:13 - grain control alright so now we have the
16:15 - core building blocks for our SAS
16:17 - application the one thing we are missing
16:20 - is analytics right we need data we need
16:22 - user data we need back-end data we need
16:24 - performance data we need all of this
16:26 - stuff to make decisions as a business
16:28 - and to understand where our software is
16:30 - lacking where we can improve and yeah
16:32 - how we can get better right so whether
16:34 - that's Google analytics whether that's
16:35 - more advanced platforms or tools I won't
16:38 - get into those in this video you want to
16:40 - make sure that you are tracking things
16:41 - like crashes bug reports page load
16:44 - speeds
16:45 - um you know back-end function calls
16:47 - anything that has high latency that's
16:49 - all of the stuff that you're going to
16:50 - get into once your SAS is successful you
16:52 - have some users people are actually on
16:54 - the the website or application now
16:56 - you're going to start analyzing all of
16:58 - that data and seeing where you can
16:59 - improve now the type of analytics you're
17:01 - going to use is really going to vary
17:02 - depending on the project that you're
17:04 - using I can get away with using
17:06 - something like Google analytics for some
17:07 - of you you may need some more advanced
17:09 - platforms you might get into something
17:10 - like bigquery where you're Now using
17:13 - Google analytics but in a much more
17:14 - advanced way all kinds of tools here I
17:16 - don't really feel qualified to talk
17:18 - about them so I'll meet mentioning any
17:19 - specific ones and with that said I think
17:21 - I'm going to wrap up the video here now
17:23 - I know this wasn't extremely detailed or
17:26 - specific but I wanted to give you a high
17:27 - level overview of the different tools
17:29 - and Technologies you will need if you
17:31 - are building a SAS hopefully this got
17:33 - the wheels turning got you thinking
17:34 - about different things and considering
17:36 - different options obviously you need to
17:38 - do your research take everything I said
17:40 - with a grain of salt and pick the best
17:42 - stack and language for you and for the
17:44 - application you're building with that
17:45 - said thanks very much for watching leave
17:47 - a like if you enjoyed subscribe the
17:48 - channel and I will see you in the next
17:50 - one
17:51 - [Music]
17:57 - foreign

Cleaned transcript:

if you want to make a lot of money in software development one of the best ways to do that is to build a SAS that's a software as a service business some of the largest companies in the world that you probably use every day are SAS businesses and make millions if not billions of dollars think of companies like Shopify Salesforce HubSpot and tons of others they make a massive amount of money usually because they were able to build a scalable software if the people actually wanted now I won't tell you that's easy but if you can do it successfully and you have a great idea you are well on your way to making a ton of money in software development with that said how do you build a SAS well first you need a good idea which I'll leave to you second you need software you need to build the software in a way such that it's scalable you're getting the correct analytics and you're able to deliver value to your customers so in this video I'm going to share with you one of the best Stacks to go with if you're looking to build a SAS as fast as possible now keep in mind there are so many different Technologies millions of ways to go about building software this stack I'm going to share with you is something that I use personally that I've had a lot of success with and that I know many other people are using that are raising millions of dollars and building SAS companies right now as you get more complicated your Tech stack may change but if you're looking to get up into running off the ground as fast as possible this is something you probably want to consider with that said let's dive in and let me share with you the ultimate SAS toolkit so let me start by mentioning that I am no SAS God I do not hold all of the answers so take what I say with a grain of salt and obviously do your own research there's so many different ways to build a successful company so many different technology Stacks you can use and just because I recommend one doesn't necessarily mean it's the best it's just from my personal experience and what I've heard from a lot of other people in this space regardless for a lot of these services or whatever you're purchasing you're going to need to buy it from somewhere now in that case I'd recommend you check out the sponsor of this video which is lenode Akamai now it was formerly called Leno the new name is kind of Akamai but they're kind of mixing and matching so akamala node pretty much the same same thing anyways I've worked with them for over four years they're personally what I use for all of my cloud service needs I have kubernetes clusters with them virtual private servers storage volumes uh got terraform stuff going I got all kinds of stuff with them I use databases on lenode I have my domains hosted there literally everything is with them because they're so easy they're so nice to use super fast and they have a real support team that I've actually reached out to many times that are super helpful so I don't have to wait in line I don't have to talk to robots I just reach out and talk to a legitimate human being which is a massive benefit now lenode has pretty much everything you can imagine from Storage volumes storage buckets they can do serverless architecture they have oneclick installs for all the databases you might want and since they're partnered with me you guys can get a 100 free 60day credit by clicking the link in the description and signing up for a new account as I go through the different services in this video pretty much every one of them that I mentioned is available through lenode so feel free to check that out and use it for free with that cred edit that I just mentioned so the first thing you'll likely consider when you're building your SAS business is what is your back end going to be specifically what type of architecture are you going to have now I like to recommend that people go with a serverless architecture this is great because it means you don't really need to worry about the infrastructure that your code is running on you simply worry about writing correct and scalable code and then you allow Cloud providers like lenode Google Amazon Microsoft Etc to handle that deployment in the orchestration for you now with a serverless architecture that means that your different Cloud functions which we'll get into in a second are going to automatically scale up and down and you're only going to pay for what you use for now there are some disadvantages to this which I'll get into later on but typically if you're trying to get up and running as fast as possible go with a serverless architecture where you're working in some type of environment like node.js go or python you can write something known as Cloud functions these Cloud functions can respond to different events you can schedule them to run you can make them run when things change in a database or storage bucket and it's very useful for writing a back end that's very scalable and easily maintainable because of the small size of the functions that you're writing now a practical example of something that would use serverless architecture is something like YouTube to MP3 or any of those converters you see online typically what they'll have is a cloud function running on the back end and this Cloud function will duplicate itself and expand or scale as more demand is required and it will shrink down and stop being ran when no one's using the servers that means if a hundred people go to YouTube to MP3 it can handle that Demand by just spinning up more instances of the cloud function so it can do this in parallel and if no one's using it it just tears all of them down so you're not paying for usage that you don't have lastly the major advantage to Cloud functions and serverless architecture is that deployment is typically very simple and it's handled for you by the cloud providers you don't need to worry about setting up an automated Pipeline and all of this crazy stuff or packaging and deploying your code you simply run a few commands make sure your code is set up in the correct manner where there's all kinds of guide for and you can just deploy your code to whatever the infrastructure is and not worry about where your code is running just worrying about writing the code itself alright so now that we've talked about our backend architecture Let's Talk About Storage specifically storage for things like videos files images large pieces of data that you're not going to store in a traditional database now you could store this on say a hard drive right you could store this on some remote server the issue with doing that is you don't really get a lot of flexibility and as soon as you reach the maximum storage capacity it's very difficult to scale that up and to increase it so imagine you have like a two terabyte hard drive right you're going to pay for that hard drive maybe it's 70 bucks 100 bucks whatever it costs now even if you're not using all of those two terabytes you're still paying for the entire hard drive and as soon as you fill it you now need to add another one not very flexible a lot of issues with that you're going to have some redundancy concerns what if the hard drive fails so instead you want to use something like a storage bucket now a storage bucket is a redundant globally accessible and essentially infinite size bucket where you can store info Nation it's provided by companies like lenode Amazon Microsoft all of the large Cloud providers have it and what you can do is only pay for what you use and continue to increase the size of the bucket as your data needs increase right so if I only have one user I pay a few cents if I have millions of users I pay tens maybe hundreds of thousands of dollars for my storage bucket but again the point of the storage bucket it's backed up it's redundant it's in multiple different locations you can access it from anywhere around the world you have some URL that just links to that file or to that media and it has all kinds of permissions and typically will hook in with your backend architecture that means you could actually check to see if something changed in your storage bucket and if it changed you could trigger a cloud function to run for example so you can look into that more I won't kind of make a whole video about storage buckets here but I'd highly recommend that you use that for all of your user generated content especially if it's going to be very large files anyways that is storage let's move on alright so now that we've talked about storage let's get into databases now databases and store storage are different Right storage is going to be those larger files where you have typically videos photos Etc and your database is going to be for that more granular smaller information think usernames passwords comments likes small relations tracking stats okay that's the type of stuff you're going to put in a database now for database you have really one main big decision to make and that is do you want to go with a relational database or a nonrelational database now both of them have pros and cons I could make probably an entire series talking about this but what I recommend for most SAS businesses is to go with a nonrelational database something like mongodb firestore something that is nosql okay now people will have a lot of issues with this there may be many people in the comments that say no you should go with a SQL database the reason why I'm recommending this is that a nosql database is typically easier to scale horizontally meaning you can actually Shard it out onto multiple different machines if you go look at something like mongodb you can see how they do all of their scaling there and it's good when you're working really quickly and when your data schema is changing very fast and frequently so that means that maybe you have four columns right now or four fields in your data but in a week you're going to have 20 fields or 20 columns in that case is going to be a lot easier for you to work with an unstructured database which is a nosql database rather than working with a SQL database or a structured database now I will say the advantage of using a structured database is your data is much more consistent it's cleaner you have a lot less issues in terms of checking the Integrity of that data and dealing with it in the future and you can run much more complex queries much faster and more efficiently however nosql again in a very Dynamic fast changing environment is typically preferred and that's usually what I like to use especially when it comes to setup and deployment nosql databases are going to be easier than your SQL databases the only time I really recommend the SQL database is when you kind of know exactly what you're doing you're going to have a more mature data structure you have experience with databases you understand SQL you can write those more complex queries for most people the that aren't database Engineers or backend developers nosql will probably be your goto now I'd love to hear your thoughts on that in the comments by the way so let me know down below typically I recommend you just go with something like mongodb or Firebase that's what I have experience using if you do want to go with the SQL database you have a bunch of options sorry postgres my sequel all kinds of other addons and extensions you can use again don't want to get too into the weeds here but something you should do a bit of research on and look into SQL or nosql all right so now we move on to talk about the front end now before I get into any specific Tech Stacks or what I'd recommend I'll say that for the front end really the important part is that it loads really quickly it looks good and that it's responsive whenever you're building a SAS those are the three main things you're going to want that's just immediately going to make your company look professional and give a great user experience if your page speeds or your load speed story are really slow that's going to immediately turn people off I know for me personally if I ever go to a website and it takes more than two or three seconds to load I usually don't continue navigating to that website or I I only go there if I really need to be in that place there's actually a lot of stats online that kind of talk about user retention and Page speeds but you want to make sure whatever you're doing you load it quickly and you keep that in mind right speed is very very important same with responsiveness if I press a button and I don't get any feedback or I don't know what's happening that's really going to turn me off as a user so you want to make sure that everything is responsive it's clean it's simple to use you know that's a lot of user experience and UI stuff don't need to dive into that but that's the main consideration here so whatever you pick for your front end make sure you hit those different boxes with that said what I'd recommend to create kind of an efficient front end and what's popular now is to use server side render it now server side rendering means that a lot of the load is being handled by the server so it's actually kind of generating the entire completed HTML document and then sending that to the client where very minimal work is done to render that page now that's the opposite of what will typically happen with a dynamically loaded website where what you're doing is downloading the HTML from the server and then you're downloading all of the additional resources like the JavaScript the CSS and then your client is compiling that all together and rendering the website for you so server side rendering means you're taking a lot of the load that's typically done by your client and you're putting that onto the server that way you can load the page faster immediately once it hits your browser now there's a lot more complexity to that you guys can kind of add to it in the comments or let me know what you think but I'd recommend you go with serverside rendering and if you wanted to do that you could use something like nexjs and react or I believe the other alternative is something like nuxt.js nuxt.js and view.js there's a bunch of other frontend Frameworks obviously but those are the two popular ones personally I use nexjs and react so now let's move on to some of the more complex but very important things you want to consider as your application or your SAS grows first continuous integration now this really refers to continually integrating changes into your repository or into your code base and ensuring that any change that you make is stable and working so you have a hiding degree of confidence that the code on your main or Master branch is always stable and up to date now this is a lot easier said than done and I am grossly simplifying what needs to be done for this but at a minimum you're going to want to be writing tests for all of the important aspects of your code so for me personally if I'm trying to go quickly I make sure I test all of my back ends so every single backend function I have has a set of unit tests so I know that all of those backend functions are working as they should be then I will set up some minimal integration tests so I know that my front end calling my back end is working properly any systems that are interconnected are kind of communicating in the correct way going a step further you could set up endtoend tests where you're testing the application really from a user's perspective and going through everything from the front end to the back end to making profiles to signing up Etc that's a lot more work not something I typically do at the beginning stage but you want to set up all of this automated testing and you want to write in kind of a test driven development way now a lot of people have different opinions on this I'm not going to say that I'm the best at testing code in the world but I definitely try to do that at least for the integral and data kind of aspects of my application so I know that at minimum the entire back end is working and then I can deal with the front end test which are a bit more annoying to write so you want to write all of these tests and then set up automations so that they're automatically going to be ran before you make any change or commit anything to your main or Master Branch the simplest way to do this is to use a tool like GitHub actions this can automatically invoke testing scripts that will run against your code when you make a pull request you could go a bit more complicated and get into things like gitlab or Jenkins not going to talk about those too much in this video at minimum though have some automated testing and if you're getting a bit more complex you may actually want to build the entire application push that to some kind of environment and have it be tested on say multiple different devices or in multiple different environments alright moving on very closely to continuous integration we have continuous deployment now this means that anytime you are making a change that is going to stable and should be deployed to something like the main or Master Branch it's automatically going to be deployed in all of the environments that need to be configured will be kind of done automatically right so let's imagine again you kind of have a pull request maybe you merge that's the main branch maybe you have some production branch and all of a sudden you know you Fork off at the main branch to the production branch and you're now ready to push something into production well rather than having to do this manually every single time you'd want to set up a continuous deployment so some kind of automation where it would automatically say push or Cloud functions or update your Cloud functions it would automatically make a new build and upload that to the app store or the Google Play store or push it to a website or whatever it is that you're doing that's really what's referred to here in continuous deployment that you are continually deploying changes as they are made now that could be to production that could be to a staging environment that could be to a Dev environment where you have some maybe public URL that people can use doesn't matter what you're doing you want to set up all of these automations now it's hard for me to get into a ton of detail here without making this video super long if you want more on this topic then let me know in the comment comments down below alright so we've gone through some of the main Concepts here but I just want to mention that as you start scaling and getting bigger and bigger and maybe your team grows and you're into some more complex and advanced tools or use cases you may want to consider looking at things like kubernetes and Nomad and slightly changing or adding different architecture that's not purely serverless so for example serverless architecture is really good however when you get into longrunning tasks High computation and you're doing things like image processing machine learning model training whatever it may be there's a lot of compute power required that's probably not going to lend itself well to serverless instead you're going to be setting up your own environments your own type of deployments your own configurations which are much more complicated but are definitely worth it when you need that type of environment and that type of compute power so really in summary here I just want to mention that once you start getting into bigger use cases you have multiple micro Services communicating with each other you have long running tasks you're doing a lot of compute you have some back end heavy operations need to perform you may want to stray away from regular Cloud functions and move into something like kubernetes Nomad Docker all of those things that are really helpful for setting up those more complex environments that need some more fine grain control alright so now we have the core building blocks for our SAS application the one thing we are missing is analytics right we need data we need user data we need backend data we need performance data we need all of this stuff to make decisions as a business and to understand where our software is lacking where we can improve and yeah how we can get better right so whether that's Google analytics whether that's more advanced platforms or tools I won't get into those in this video you want to make sure that you are tracking things like crashes bug reports page load speeds um you know backend function calls anything that has high latency that's all of the stuff that you're going to get into once your SAS is successful you have some users people are actually on the the website or application now you're going to start analyzing all of that data and seeing where you can improve now the type of analytics you're going to use is really going to vary depending on the project that you're using I can get away with using something like Google analytics for some of you you may need some more advanced platforms you might get into something like bigquery where you're Now using Google analytics but in a much more advanced way all kinds of tools here I don't really feel qualified to talk about them so I'll meet mentioning any specific ones and with that said I think I'm going to wrap up the video here now I know this wasn't extremely detailed or specific but I wanted to give you a high level overview of the different tools and Technologies you will need if you are building a SAS hopefully this got the wheels turning got you thinking about different things and considering different options obviously you need to do your research take everything I said with a grain of salt and pick the best stack and language for you and for the application you're building with that said thanks very much for watching leave a like if you enjoyed subscribe the channel and I will see you in the next one foreign
