With timestamps:

00:00 - hello everyone and welcome back to their
00:01 - flats tutorial so in today's video what
00:03 - I'm gonna be doing is talking about
00:05 - sessions now to try to explain you guys
00:07 - what sessions are I'm gonna give you an
00:09 - example of what we did in the previous
00:10 - video and talk about a way in which we
00:12 - could do this better so essentially we
00:14 - had this login page and once we logged
00:16 - in we get got the users name and then we
00:19 - redirected them to a page that showed
00:21 - them their name just pretty much pop
00:23 - that up on the screen now this is great
00:25 - that's fine but every time that we want
00:27 - to see the users name we need to log in
00:29 - again and again and again and if we ever
00:32 - want to keep seeing the user's name we
00:33 - need to continue to log in now what if
00:35 - we want to direct to another page and
00:37 - that page wants the users name as well
00:39 - well that means we have to set up a way
00:41 - to pass to that page the users name we
00:44 - got to use a parameter we have to set up
00:46 - this link it's just really not the best
00:48 - way to do things and sometimes you know
00:50 - you don't want to redirect to a page it
00:51 - says slash Tim or slash Jo or slash bill
00:55 - so what we're gonna do to actually pass
00:57 - around information through our you know
00:59 - back-end here and through our different
01:01 - web pages is use something called
01:02 - sessions now sessions are great because
01:05 - they're temporary they're stored on the
01:07 - web server and they're just simply there
01:08 - for quick access of information between
01:10 - all the different pages of your website
01:12 - think of a session as something that
01:14 - you're gonna load in your going to use
01:16 - while the user is on your website so
01:18 - while they're browsing on the website
01:20 - and then as soon as they leave it's
01:21 - gonna disappear so essentially if we're
01:23 - doing an example let's say you know of
01:24 - Instagram or Facebook when someone logs
01:26 - in there's gonna be a new session
01:28 - created it's gonna store their username
01:30 - probably some other information as well
01:32 - about what they're doing on the website
01:33 - at the current time and then as they can
01:36 - go between different pages those pages
01:38 - can access that session data so it can
01:40 - say okay so I moved to you know my
01:42 - profile page this is the profile of Tim
01:45 - I know that because I stored that in a
01:46 - session so let's show all this different
01:48 - information that I have stored in the
01:49 - session as well or whatever it is right
01:51 - and then as soon as that usually leaves
01:53 - the web page or logs out of the web page
01:56 - all of that session data is erased it
01:58 - disappears and the next time they log in
02:00 - that session data will be reloaded into
02:02 - the session where it can be used for the
02:03 - rest of the pages now this is very
02:05 - useful I'm gonna show you guys kind of
02:07 - how this works it should start to make a
02:08 - bit more sense but that is kind of the
02:10 - basics of sessions just for my
02:12 - they're temporary they're stored on the
02:15 - server they're actually not stored on
02:16 - the client side and they're kind of
02:18 - designed for just quick access of
02:19 - information and a way to pass stuff
02:22 - around our server okay so what I want to
02:25 - do essentially is I want to do an
02:26 - example where the user logs in we create
02:29 - a session for them that stores the name
02:31 - and then we can redirect to another page
02:33 - that doesn't have this you know slash
02:35 - user so I'm actually just gonna get rid
02:37 - of this and make this slash user here we
02:40 - don't have any parameters here and we
02:41 - can still access that person's name and
02:43 - display that on the screen so let's
02:46 - start with that what we need to do is
02:47 - actually start by importing session here
02:50 - I'm going to show you how easy this is
02:51 - to actually do so what we can do is
02:54 - inside a request stop post so when the
02:56 - user presses login or submit or whatever
02:58 - on that login page what we're going to
03:00 - do is set up some session data based on
03:02 - whatever information they typed in so
03:05 - I'm going to say session and in this
03:07 - case user equals user and this is
03:11 - actually as easy as it is to set up some
03:13 - data for our session so this session
03:15 - stores data as a dictionary just like
03:18 - we've seen this requests top form
03:19 - working so if I want to create a new you
03:22 - know piece of information information in
03:23 - my session what I can do is simply type
03:25 - session the name of whatever I want that
03:28 - dictionary key to be and then set it
03:29 - equal to some specific value in this
03:31 - case this is the user that click Submit
03:33 - and you know submitted their name to
03:35 - this form so that's it that's literally
03:38 - how we store information in the session
03:39 - now how do we get that information so
03:42 - what I want to do is I'm going to change
03:43 - this redirect here to redirect to user
03:45 - but I'm not gonna pass the user as an
03:47 - argument I'm actually just gonna
03:48 - redirect that I'm not gonna pass any
03:50 - information and from this user function
03:52 - I'm gonna get the session information
03:54 - now the way that I do this is I first
03:56 - check if there's any information in the
03:59 - session so I want to make sure that
04:00 - before I reference that dictionary key
04:02 - that we've actually you know logged in
04:04 - because technically someone could just
04:05 - type slash user and access this page
04:07 - without being logged in right so what
04:09 - I'm gonna do is say if user which is the
04:13 - name of that session key right in
04:16 - session then what I'll do is return an F
04:20 - string and I'm actually going to get
04:21 - this user so I set user equals session
04:24 - user and we know this is
04:26 - valid because we just checked if user
04:28 - was in session and then I'll simply
04:30 - display the user like that and put this
04:32 - inside the brackets so it shows up so
04:35 - that is as easy as it is to store and
04:37 - retrieve session data just remember all
04:40 - you do is literally make a dictionary
04:41 - key put it aside session I've imported
04:43 - session up here set it equal to a value
04:45 - and then you can access it after you've
04:47 - checked if it exists now what I'm gonna
04:49 - do if this session does not exist so if
04:51 - there's no user in my session that means
04:54 - that I haven't logged in yet or I've
04:55 - left the browser and I need to log in
04:57 - again so what I'm gonna do is actually
04:59 - redirect back to the login page and say
05:01 - hey you need to login or whatever it is
05:03 - so I'm just gonna say return redirect
05:06 - URL for in this case login and then
05:10 - since we have a get method when we're
05:11 - returning over here we will return this
05:14 - render template for login dot HTML they
05:16 - can hit submit and they can redirect
05:18 - back to the user page so let's start
05:20 - with that and then we'll get into some
05:20 - other more complicated things so to run
05:23 - this I'm just gonna go python tutorial v
05:27 - dot pi okay so let's go copy this link
05:31 - here and we'll head to the slash login
05:33 - page and see what we get okay so this is
05:36 - our home page so sorry slash login name
05:39 - let's try Tim if I hit submit and if I
05:43 - hit submit we get an error because I
05:45 - just remember that I need to add
05:46 - something to my file here so essentially
05:50 - all of this session data that we store
05:52 - is actually encrypted on the server and
05:54 - that means we actually need to define
05:55 - something called a secret key which will
05:57 - be the way that we decrypt and encrypt
05:59 - this data so to do that I'm gonna type
06:02 - at the beginning of my program app dot
06:04 - secret key equals and then you can
06:07 - literally just type any string in here
06:08 - that you want I mean it would be wise to
06:10 - make this something somewhat complicated
06:12 - but I'm just gonna make mine hello as my
06:15 - secret key but we do just need to set a
06:16 - secret key I completely forgot that that
06:18 - was actually a necessary step in doing
06:20 - this okay so let me refresh this page
06:22 - now and see what we get actually I got
06:25 - to go back to slash login so let's go to
06:27 - slash login this hopefully should be
06:29 - good now I'm gonna type Tim hit submit
06:31 - and then you can see we're redirected to
06:33 - a page that says Tim and notice again
06:35 - right that I don't pass any information
06:37 - to here about the user we're getting it
06:39 - this session variable so let's go back
06:41 - and let's do something else now so if I
06:44 - close this browser and I open it back up
06:46 - and I go to whatever that link is and
06:50 - then I go to slash user you'll see that
06:53 - it redirects me back to logging well why
06:55 - does it do that
06:56 - because when I close the web browser my
06:58 - session data is actually deleted from
07:00 - the server which means that if I want to
07:02 - go back to the user page I need to
07:04 - create a new session and logging again
07:05 - in this case we'll login with Joe and we
07:08 - see we are redirected to Joe I can go
07:11 - you know to slash home and that will
07:13 - slash home isn't a page but if I go to
07:15 - slash and then I go back to slash user
07:18 - you'll see that it brings me back to Joe
07:20 - because it stored that information in
07:22 - the session so again very useful that is
07:25 - how that works now it's talking about
07:27 - actually clearing a session and logging
07:30 - out so we'll leave that up for now but
07:32 - what I want to do is actually create a
07:33 - login page and show you how you can
07:35 - manually clear session DAP because
07:37 - essentially if someone logs out you
07:39 - probably want to delete all the
07:40 - information associated with their
07:42 - session or at least some of that
07:43 - information so what I'm going to do is
07:45 - set up a new function here so a new page
07:47 - we'll just call this one slash logout
07:50 - like that it's defined logout and all
07:54 - we're gonna do in here is actually
07:56 - remove some data from our session what
07:58 - I'm going to do is say session dot pop
08:01 - and then I'm gonna say user none now
08:05 - what this is gonna do is actually remove
08:07 - the user data from my sessions this is
08:10 - just how you remove it from the
08:11 - dictionary and then this none is just a
08:13 - message that's associated with removing
08:15 - that data I'm not really gonna talk
08:17 - about that because I don't fully
08:18 - understand why we have none here but
08:19 - that's anyways it's not that important
08:21 - so once we log out we will actually
08:23 - return a your redirect to the login page
08:27 - so we'll say URL for in this case login
08:31 - ok awesome now what I want to do is add
08:34 - one more thing to login here we're
08:36 - essentially I check if when we redirect
08:39 - to login here if we're already logged in
08:41 - I just redirect us to the user page
08:43 - otherwise I'm gonna actually redirect us
08:45 - to this login dot HTML form so to do
08:48 - that is pretty easy all I'm gonna say is
08:49 - if
08:51 - user in session which essentially means
08:55 - you know we've signed in then all I need
08:56 - to do is return a redirect to the URL
09:00 - for in this case user and that is as
09:03 - easy as it says
09:04 - so essentially what I've done here is
09:06 - set up a way that we can log in using a
09:08 - session and then we can be redirected to
09:11 - a specific page without sending that
09:12 - information directly to it through a
09:14 - parameter we can display that
09:15 - information we can log out now by
09:17 - popping that session data and then if we
09:19 - go to the login page of our already
09:20 - logged in it's actually going to
09:22 - redirect us to this user page and just
09:23 - show us that information so let's do
09:26 - that now um if I go to slash long out
09:30 - you can see that it redirects us to the
09:32 - login page
09:33 - and now if I were to try to go to back
09:35 - back to slash user we get redirected
09:38 - immediately back to the login page
09:39 - because we're not signed in yet
09:41 - so if we sign in with say Tim there we
09:43 - go we're on the user page and now if I
09:45 - go to slash login you can see it
09:48 - actually just redirects us back to this
09:50 - same page because we're already logged
09:51 - in and then again we can log out brings
09:55 - us the login page and if I go to slash
09:56 - user that's not going to work and that
09:58 - is kind of how we do that now remember
10:00 - that this session dad is actually
10:02 - deleted when I close my browser so I'm
10:04 - gonna show you quickly a way that we can
10:05 - store our session data for longer
10:07 - because what actually happens is this
10:08 - session data is stored in a temporary
10:10 - directory on the server and we can set
10:13 - how long we want that information to be
10:14 - stored for by using something called
10:16 - permanent sessions now what I'm gonna do
10:19 - to set up the permanent session here is
10:21 - define first of all how long I want a
10:23 - permanent session to last so you may
10:25 - have noticed sometimes you know you
10:26 - revisit a website a few days later and
10:28 - you just log in immediately you don't
10:30 - actually have to you know go through the
10:31 - process or maybe your informations
10:33 - already typed in and you just hit login
10:34 - we're gonna some of this information is
10:37 - stored in permanent sessions which means
10:38 - it's storing it for longer than you know
10:40 - however long you're in the web browser
10:42 - so that every time you go back to that
10:43 - web page you can quickly access
10:45 - information that you need and you don't
10:47 - need to log back in so what I'm gonna do
10:49 - is actually just import something here
10:52 - so I'm gonna say from date time import
10:55 - time Delta now the reason I'm doing this
10:58 - is because I want to set up the max time
11:00 - that our session could last for and the
11:02 - way that I do that is app dot and I
11:04 - gotta look up my other screen because I
11:05 - forget what it is permanent session
11:07 - lifetime like that and then it's gonna
11:10 - be equal to time Delta and then you can
11:13 - say days equals and how many days you
11:15 - want this to actually last for let me
11:17 - make sure this is correct so I could say
11:19 - days and I could say five days and if I
11:21 - do this what this means is we're gonna
11:23 - store our permanent session data for
11:26 - five days I can also do something like
11:28 - minutes equals five and if I do that
11:31 - that means we're gonna store our
11:33 - permanent session data for five minutes
11:35 - and then delete it after that now how do
11:37 - we make a session permanent well this is
11:40 - actually pretty easy all we're gonna do
11:42 - is when we log in and we actually have
11:45 - we've got this information we've logged
11:47 - in everything's valid say we've checked
11:49 - this against the database then we can
11:50 - make the session permanent by saying
11:52 - session dot permanent if I could spell
11:56 - this correctly equals true I don't know
11:59 - why that was such a struggle okay so
12:01 - session dot permanent equals true and
12:03 - now this is going to define this
12:04 - specific session as a permanent session
12:06 - which means it's gonna last as long as
12:08 - we've defined up here by default don't
12:11 - do this it sets our session to not
12:13 - permanent so false here and that means
12:15 - it's gonna last for as long as you're
12:16 - actually on the webpage or sorry in your
12:18 - browser so let's see if this is working
12:21 - now believe it is so let's go back to
12:24 - that web page um give it a second here
12:28 - what's our air I guess got a hit enter
12:30 - in the command prompt okay so let's go
12:32 - slash login let's do our name so Tim and
12:36 - then let's actually close this and let's
12:38 - go back to it so paste that in here why
12:43 - is this not working okay and then we'll
12:46 - go to slash login and you can see we are
12:48 - redirected back to this user page
12:50 - because our session data was actually
12:52 - saved permanently so when I actually
12:54 - closed this window it didn't do anything
12:56 - so now let's say logout we've logged out
12:59 - and then obviously now our session data
13:01 - has been removed because we had this
13:03 - session being removed from the logout so
13:05 - that is kind of everything about
13:06 - sessions there's obviously some more
13:08 - stuff that you guys can do with this but
13:09 - this is the basics and just remember
13:11 - sessions are something that you're using
13:12 - temporarily you should never be storing
13:14 - perm
13:14 - data in a session and typically what
13:17 - ends up happening is you'll log in
13:18 - you'll validate some stuff with the
13:19 - database you'll actually grab some
13:21 - information from the database and store
13:23 - that in a session and then whenever you
13:25 - log out you'll remove that information
13:27 - and when you log in again you can load
13:28 - it back in so this is information that
13:29 - you don't really care about but it's
13:31 - just there for quick retrieval and for
13:33 - easy access from different web pages so
13:35 - you don't have to continually read from
13:37 - the database and you also just know some
13:39 - of this information passing between the
13:41 - pages you don't have to send them
13:42 - through you know the URL which is not a
13:44 - secure way to send information so that
13:46 - has been it for this video if you guys
13:47 - enjoyed make sure you leave a like and
13:48 - subscribe and I will see you guys in
13:49 - another one

Cleaned transcript:

hello everyone and welcome back to their flats tutorial so in today's video what I'm gonna be doing is talking about sessions now to try to explain you guys what sessions are I'm gonna give you an example of what we did in the previous video and talk about a way in which we could do this better so essentially we had this login page and once we logged in we get got the users name and then we redirected them to a page that showed them their name just pretty much pop that up on the screen now this is great that's fine but every time that we want to see the users name we need to log in again and again and again and if we ever want to keep seeing the user's name we need to continue to log in now what if we want to direct to another page and that page wants the users name as well well that means we have to set up a way to pass to that page the users name we got to use a parameter we have to set up this link it's just really not the best way to do things and sometimes you know you don't want to redirect to a page it says slash Tim or slash Jo or slash bill so what we're gonna do to actually pass around information through our you know backend here and through our different web pages is use something called sessions now sessions are great because they're temporary they're stored on the web server and they're just simply there for quick access of information between all the different pages of your website think of a session as something that you're gonna load in your going to use while the user is on your website so while they're browsing on the website and then as soon as they leave it's gonna disappear so essentially if we're doing an example let's say you know of Instagram or Facebook when someone logs in there's gonna be a new session created it's gonna store their username probably some other information as well about what they're doing on the website at the current time and then as they can go between different pages those pages can access that session data so it can say okay so I moved to you know my profile page this is the profile of Tim I know that because I stored that in a session so let's show all this different information that I have stored in the session as well or whatever it is right and then as soon as that usually leaves the web page or logs out of the web page all of that session data is erased it disappears and the next time they log in that session data will be reloaded into the session where it can be used for the rest of the pages now this is very useful I'm gonna show you guys kind of how this works it should start to make a bit more sense but that is kind of the basics of sessions just for my they're temporary they're stored on the server they're actually not stored on the client side and they're kind of designed for just quick access of information and a way to pass stuff around our server okay so what I want to do essentially is I want to do an example where the user logs in we create a session for them that stores the name and then we can redirect to another page that doesn't have this you know slash user so I'm actually just gonna get rid of this and make this slash user here we don't have any parameters here and we can still access that person's name and display that on the screen so let's start with that what we need to do is actually start by importing session here I'm going to show you how easy this is to actually do so what we can do is inside a request stop post so when the user presses login or submit or whatever on that login page what we're going to do is set up some session data based on whatever information they typed in so I'm going to say session and in this case user equals user and this is actually as easy as it is to set up some data for our session so this session stores data as a dictionary just like we've seen this requests top form working so if I want to create a new you know piece of information information in my session what I can do is simply type session the name of whatever I want that dictionary key to be and then set it equal to some specific value in this case this is the user that click Submit and you know submitted their name to this form so that's it that's literally how we store information in the session now how do we get that information so what I want to do is I'm going to change this redirect here to redirect to user but I'm not gonna pass the user as an argument I'm actually just gonna redirect that I'm not gonna pass any information and from this user function I'm gonna get the session information now the way that I do this is I first check if there's any information in the session so I want to make sure that before I reference that dictionary key that we've actually you know logged in because technically someone could just type slash user and access this page without being logged in right so what I'm gonna do is say if user which is the name of that session key right in session then what I'll do is return an F string and I'm actually going to get this user so I set user equals session user and we know this is valid because we just checked if user was in session and then I'll simply display the user like that and put this inside the brackets so it shows up so that is as easy as it is to store and retrieve session data just remember all you do is literally make a dictionary key put it aside session I've imported session up here set it equal to a value and then you can access it after you've checked if it exists now what I'm gonna do if this session does not exist so if there's no user in my session that means that I haven't logged in yet or I've left the browser and I need to log in again so what I'm gonna do is actually redirect back to the login page and say hey you need to login or whatever it is so I'm just gonna say return redirect URL for in this case login and then since we have a get method when we're returning over here we will return this render template for login dot HTML they can hit submit and they can redirect back to the user page so let's start with that and then we'll get into some other more complicated things so to run this I'm just gonna go python tutorial v dot pi okay so let's go copy this link here and we'll head to the slash login page and see what we get okay so this is our home page so sorry slash login name let's try Tim if I hit submit and if I hit submit we get an error because I just remember that I need to add something to my file here so essentially all of this session data that we store is actually encrypted on the server and that means we actually need to define something called a secret key which will be the way that we decrypt and encrypt this data so to do that I'm gonna type at the beginning of my program app dot secret key equals and then you can literally just type any string in here that you want I mean it would be wise to make this something somewhat complicated but I'm just gonna make mine hello as my secret key but we do just need to set a secret key I completely forgot that that was actually a necessary step in doing this okay so let me refresh this page now and see what we get actually I got to go back to slash login so let's go to slash login this hopefully should be good now I'm gonna type Tim hit submit and then you can see we're redirected to a page that says Tim and notice again right that I don't pass any information to here about the user we're getting it this session variable so let's go back and let's do something else now so if I close this browser and I open it back up and I go to whatever that link is and then I go to slash user you'll see that it redirects me back to logging well why does it do that because when I close the web browser my session data is actually deleted from the server which means that if I want to go back to the user page I need to create a new session and logging again in this case we'll login with Joe and we see we are redirected to Joe I can go you know to slash home and that will slash home isn't a page but if I go to slash and then I go back to slash user you'll see that it brings me back to Joe because it stored that information in the session so again very useful that is how that works now it's talking about actually clearing a session and logging out so we'll leave that up for now but what I want to do is actually create a login page and show you how you can manually clear session DAP because essentially if someone logs out you probably want to delete all the information associated with their session or at least some of that information so what I'm going to do is set up a new function here so a new page we'll just call this one slash logout like that it's defined logout and all we're gonna do in here is actually remove some data from our session what I'm going to do is say session dot pop and then I'm gonna say user none now what this is gonna do is actually remove the user data from my sessions this is just how you remove it from the dictionary and then this none is just a message that's associated with removing that data I'm not really gonna talk about that because I don't fully understand why we have none here but that's anyways it's not that important so once we log out we will actually return a your redirect to the login page so we'll say URL for in this case login ok awesome now what I want to do is add one more thing to login here we're essentially I check if when we redirect to login here if we're already logged in I just redirect us to the user page otherwise I'm gonna actually redirect us to this login dot HTML form so to do that is pretty easy all I'm gonna say is if user in session which essentially means you know we've signed in then all I need to do is return a redirect to the URL for in this case user and that is as easy as it says so essentially what I've done here is set up a way that we can log in using a session and then we can be redirected to a specific page without sending that information directly to it through a parameter we can display that information we can log out now by popping that session data and then if we go to the login page of our already logged in it's actually going to redirect us to this user page and just show us that information so let's do that now um if I go to slash long out you can see that it redirects us to the login page and now if I were to try to go to back back to slash user we get redirected immediately back to the login page because we're not signed in yet so if we sign in with say Tim there we go we're on the user page and now if I go to slash login you can see it actually just redirects us back to this same page because we're already logged in and then again we can log out brings us the login page and if I go to slash user that's not going to work and that is kind of how we do that now remember that this session dad is actually deleted when I close my browser so I'm gonna show you quickly a way that we can store our session data for longer because what actually happens is this session data is stored in a temporary directory on the server and we can set how long we want that information to be stored for by using something called permanent sessions now what I'm gonna do to set up the permanent session here is define first of all how long I want a permanent session to last so you may have noticed sometimes you know you revisit a website a few days later and you just log in immediately you don't actually have to you know go through the process or maybe your informations already typed in and you just hit login we're gonna some of this information is stored in permanent sessions which means it's storing it for longer than you know however long you're in the web browser so that every time you go back to that web page you can quickly access information that you need and you don't need to log back in so what I'm gonna do is actually just import something here so I'm gonna say from date time import time Delta now the reason I'm doing this is because I want to set up the max time that our session could last for and the way that I do that is app dot and I gotta look up my other screen because I forget what it is permanent session lifetime like that and then it's gonna be equal to time Delta and then you can say days equals and how many days you want this to actually last for let me make sure this is correct so I could say days and I could say five days and if I do this what this means is we're gonna store our permanent session data for five days I can also do something like minutes equals five and if I do that that means we're gonna store our permanent session data for five minutes and then delete it after that now how do we make a session permanent well this is actually pretty easy all we're gonna do is when we log in and we actually have we've got this information we've logged in everything's valid say we've checked this against the database then we can make the session permanent by saying session dot permanent if I could spell this correctly equals true I don't know why that was such a struggle okay so session dot permanent equals true and now this is going to define this specific session as a permanent session which means it's gonna last as long as we've defined up here by default don't do this it sets our session to not permanent so false here and that means it's gonna last for as long as you're actually on the webpage or sorry in your browser so let's see if this is working now believe it is so let's go back to that web page um give it a second here what's our air I guess got a hit enter in the command prompt okay so let's go slash login let's do our name so Tim and then let's actually close this and let's go back to it so paste that in here why is this not working okay and then we'll go to slash login and you can see we are redirected back to this user page because our session data was actually saved permanently so when I actually closed this window it didn't do anything so now let's say logout we've logged out and then obviously now our session data has been removed because we had this session being removed from the logout so that is kind of everything about sessions there's obviously some more stuff that you guys can do with this but this is the basics and just remember sessions are something that you're using temporarily you should never be storing perm data in a session and typically what ends up happening is you'll log in you'll validate some stuff with the database you'll actually grab some information from the database and store that in a session and then whenever you log out you'll remove that information and when you log in again you can load it back in so this is information that you don't really care about but it's just there for quick retrieval and for easy access from different web pages so you don't have to continually read from the database and you also just know some of this information passing between the pages you don't have to send them through you know the URL which is not a secure way to send information so that has been it for this video if you guys enjoyed make sure you leave a like and subscribe and I will see you guys in another one
