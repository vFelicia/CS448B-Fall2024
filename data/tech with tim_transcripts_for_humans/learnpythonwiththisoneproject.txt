With timestamps:

00:02 - [Music]
00:07 - in this video i'm gonna teach you python
00:09 - by working through a project now this
00:11 - project i'm gonna write completely from
00:13 - scratch which means i don't have it up
00:15 - on my other screen i've not ridden this
00:16 - before it's a completely new project to
00:18 - me now the point of this is not only am
00:20 - i going to teach you basic python syntax
00:22 - and some different language features i'm
00:24 - also going to explain to you how you
00:26 - structure a program how you've decide
00:28 - where you're going to start what
00:30 - different components you need to build
00:31 - out and kind of how you go about the
00:33 - different tasks this is going to be
00:34 - perfect for people that have a little
00:36 - bit of experience with python they've
00:38 - written some code before but they're not
00:40 - yet comfortable and confident to go and
00:42 - write their own project where they don't
00:43 - know where to start when they're kind of
00:45 - diving into a task on their own
00:46 - hopefully this is going to make you a
00:47 - lot more confident you're going to learn
00:49 - a bunch about python and you're going to
00:50 - have a good project that you can show
00:52 - after this video so i encourage you to
00:54 - follow along type this project out with
00:56 - me with that said let's dive in after a
00:58 - quick word from our spots here before we
01:01 - get started i need to thank octo ml for
01:03 - sponsoring this video as we know
01:05 - building and training the perfect deep
01:07 - learning model for your application is
01:08 - just the first step after that it's time
01:11 - to push it to production now rather than
01:13 - learning completely new tools for model
01:15 - acceleration and containerization you
01:17 - need a bridge that gets you from model
01:18 - building and training to deployment as
01:21 - fast as possible now that's where octoml
01:24 - cli comes in using octo ml is very
01:27 - similar to working with docker and
01:28 - kubernetes you start with a trained
01:30 - model and ingest it into octo ml next
01:33 - octo ml packages the model into a docker
01:35 - container with nvidia's trident
01:37 - inference server which you can deploy to
01:39 - your local docker desktop any cloud
01:41 - kubernetes service like amazon eks azure
01:44 - aks or even managed ml services like
01:47 - amazon sage maker when you're ready you
01:49 - can then use octo ml to accelerate your
01:51 - model peak performance on your cpu or
01:54 - gpu hardware target get started today by
01:56 - clicking the link in the description and
01:58 - downloading the octo ml cli for free
02:01 - make sure to be one of the first 20 tech
02:03 - with tim subscribers to try octo ml to
02:05 - receive a special welcome gift so you're
02:08 - probably wondering now what kind of
02:09 - project are we going to work on now i
02:11 - wanted to pick something that was unique
02:12 - and that i haven't done before so we're
02:14 - actually going to build a text based
02:16 - slot machine now the way this will work
02:18 - is the user will deposit a certain
02:19 - amount of money we're then going to
02:20 - allow them to bet on either one two or
02:23 - three lines of the slot machine just to
02:25 - keep it pretty simple i know in real
02:26 - slot machines they have a lot more lines
02:28 - than that and then we are going to
02:30 - determine if they want so if they got
02:32 - any lines we're gonna multiply their bet
02:33 - by the value of the line add that to
02:36 - their balance and then allow them to
02:37 - keep playing until they want to cash out
02:39 - or until they run out of money so this
02:41 - is actually a fairly complex project
02:43 - because we need to do a lot of things we
02:45 - need to collect the user's deposit we
02:47 - need to add that to their balance we
02:49 - need to allow them to bet on a line or
02:51 - on multiple lines we then need to see if
02:54 - they actually got any of those lines we
02:56 - then need to spin the slot machine or we
02:58 - would have done that before right we
02:59 - need to generate the different items
03:01 - that are going to be in the slot machine
03:02 - on the different reels
03:04 - and then we need to add whatever they
03:05 - want back to their balance so there's
03:07 - quite a bit of stuff going on here and
03:09 - this should be a challenging enough
03:10 - project to make it interesting for you
03:12 - guys so before we even get into this i
03:14 - just want to mention i obviously am not
03:15 - supporting gambling here this is just
03:17 - kind of a cool thing that we can do
03:18 - we're not using any real money and i
03:20 - think it's a good project so just keep
03:22 - that in mind do not gamble i'm not
03:23 - supporting that by making this video and
03:26 - before i write any code what i like to
03:27 - do here is just think of the different
03:29 - things that we need to do in this
03:30 - project and kind of pick a good starting
03:33 - point the place where i like to start
03:34 - usually is collecting some user input
03:37 - and for this project we need to get the
03:38 - deposit that the user is entering as
03:40 - well as their bet right those are kind
03:42 - of the two things we need before we can
03:44 - start actually using the slot machine
03:46 - and generating you know whatever the
03:48 - slot machine spun so to do this i'm
03:51 - going to make a function here called
03:53 - deposit
03:54 - now i'm just inside of visual studio
03:55 - code you can work in any any editor you
03:57 - want sorry and i have this main.pie
03:59 - function open i assume you guys can open
04:01 - your own python file and kind of work in
04:03 - your
04:04 - preferred environment so this function
04:06 - here is going to be responsible for
04:08 - collecting user input that gets the
04:10 - deposit from the user now a function if
04:12 - you're unfamiliar is just something that
04:13 - we can call that's going to execute a
04:15 - certain block of code and then can
04:17 - potentially return us a value and you'll
04:18 - see how this works in a second so what
04:20 - i'm going to do here set up a while loop
04:22 - and the reason i need a while loop is
04:23 - because i'm going to continually ask the
04:25 - user to enter a deposit amount until
04:27 - they give me a valid amount so if they
04:29 - don't give me a valid amount then they
04:30 - need to keep typing in until eventually
04:32 - we get one so to do this i'm going to
04:34 - say my amount is equal to input
04:37 - and then inside of input i'm going to
04:38 - pass a prompt which is some text that
04:40 - will happen before we allow the user to
04:42 - start typing so for the prompt i can say
04:46 - what would you like to
04:49 - deposit question mark
04:51 - and then i can put something like a
04:52 - dollar sign and then allow them to start
04:54 - typing after the dollar sign
04:56 - okay
04:57 - now what i need to do
04:58 - is check if this amount is actually a
05:01 - number because they could type in
05:02 - anything here right they could type in
05:04 - hello world
05:05 - they could type in nothing and just hit
05:06 - enter they can do whatever they want so
05:08 - i need to make sure that the amount
05:09 - actually is a number before i get out of
05:11 - this while loop so i'm going to say if
05:14 - the amount
05:16 - dot is and then
05:18 - digit like this then we can do something
05:20 - inside of here now is digit is just
05:22 - going to tell us if this is a valid
05:24 - whole number so if it's something like a
05:26 - thousand you know 10 whatever if they
05:29 - type in a negative number it actually
05:30 - won't be true so if they do something
05:32 - like negative 9 then it's not going to
05:34 - be true and we call is digit
05:36 - anyways this is a method you can use on
05:38 - strings to determine if this is a valid
05:40 - number so if this is a digit then what
05:42 - i'm going to do is i'm going to convert
05:43 - this into
05:45 - an init so i'm going to say amount is
05:48 - equal to int amount and that's because
05:49 - by default this comes as a string and we
05:52 - want to have a numeric value for our
05:54 - balance or for our deposit so we need to
05:56 - convert this to an it
05:58 - however i can't do this before i make
06:00 - this check because if i do that then
06:02 - this could potentially fail because if
06:03 - they try to type in something like hello
06:05 - world then this here is invalid i can't
06:08 - convert hello world into an integer so
06:10 - that's why i'm first checking if they
06:11 - did actually enter a valid number if
06:14 - they did i then convert it to a number
06:16 - now what i need to do is check if this
06:17 - number is greater than zero so i'm going
06:19 - to say if
06:20 - the amount is greater than not equal to
06:23 - but is greater than zero then i'm going
06:25 - to break out of this wall
06:27 - if it's not greater than zero then i'm
06:28 - going to put an l statement here and i'm
06:30 - going to say print
06:32 - amount must be
06:36 - greater than zero dot okay there we go
06:39 - now i'm just gonna add one more else
06:40 - statement down here and i'm gonna say
06:42 - print
06:44 - uh
06:45 - please if we could type this correctly
06:47 - enter a number
06:49 - okay then finally here
06:51 - we are going to return
06:53 - our amount
06:55 - all right so let me go through what we
06:56 - just did here so we wrote a function
06:57 - deposit this is a while loop so we're
06:59 - going to continue to do this until
07:01 - eventually we break out and this break
07:03 - keyword just ends the while loop and
07:04 - then we'll bring us down to this line
07:06 - i ask what is the amount you want to
07:07 - deposit they enter something if this is
07:10 - a digit then i'm going to convert this
07:12 - to an integer and i'm going to check if
07:14 - this is greater than zero if it is it's
07:16 - a valid amount we can work with this
07:18 - we'll break out and then we'll return
07:19 - that amount and we can use that later on
07:21 - okay otherwise i'm going to print this
07:23 - amount must be greater than zero because
07:25 - if it's not greater than zero well we
07:26 - need to tell them that then get them to
07:28 - try again all right so that handled this
07:29 - first if statement now if the amount is
07:32 - not a digit then what we're going to do
07:33 - is uh print sorry please enter a number
07:36 - and we're going to continue this until
07:37 - we get a number and until we break all
07:39 - right so that's that function now to
07:41 - call the function
07:42 - if we spell uh deposit correctly here i
07:45 - don't even know how i messed that up so
07:47 - badly okay deposit uh to call the
07:49 - function we simply write the name of the
07:50 - function and we put our two parentheses
07:52 - and now as soon as i run my code this
07:54 - function will run and we'll be able to
07:56 - actually enter a number so let's do this
07:58 - you can see in my terminal that it's
07:59 - asking me what would you like to deposit
08:01 - let's go with something like ten dollars
08:03 - and all is good now if i run this again
08:05 - and i enter something like hello world
08:07 - it tells me please enter a number okay
08:09 - let's enter zero all right amount must
08:12 - be greater than zero enter one i'm good
08:14 - to go so there we go we've written our
08:15 - first deposit function and i've tested
08:17 - it it's working good we're all good to
08:19 - go
08:20 - all right so now what i'm going to do is
08:21 - i'm going to say my amount
08:23 - is equal to my deposit and actually
08:25 - we're going to call this
08:27 - balance and this is kind of the start of
08:29 - our program here and in fact i'm going
08:30 - to put our program in this function main
08:33 - so that if we end our program we can
08:35 - just call this function again and then
08:37 - it will rerun the program right so i can
08:38 - say do you want to play again and then
08:40 - we can rerun the main function and we'll
08:41 - be good to go so we've done that now i
08:44 - need to call the main function so that
08:46 - we start running main and then it's
08:47 - going to do everything inside of here
08:49 - okay so now inside of made the next
08:51 - thing that i want to do is i want to
08:53 - collect the bet from the user so there's
08:55 - actually a few ways i can do this but i
08:57 - need to determine how much they want to
08:58 - bet and then how many lines they want to
09:01 - bet on and then i would multiply their
09:03 - bet amount by the number of lines so it
09:05 - probably makes sense to ask the number
09:06 - of lines first and then ask them how
09:08 - much they want to bet on each line so
09:10 - it's not confusing if i say how much do
09:12 - you want to bet they put ten dollars and
09:13 - then they say three lines and ends up
09:15 - being thirty dollars see what i mean so
09:17 - let's say define and we'll say get
09:19 - number
09:20 - of lines like this
09:23 - and inside of here we're going to ask
09:25 - them to pick a number between 1 and 3
09:27 - because that'll be the number of lines
09:29 - that we have
09:30 - and to keep this program nice and
09:31 - dynamic i'm going to add what's known as
09:33 - a global constant at the top of my
09:35 - program and i'm going to say max
09:38 - underscore lines is equal to 3.
09:40 - now i'm doing this in all capitals
09:42 - because this is a constant value
09:44 - something that's not going to change and
09:46 - this is a convention in python you do it
09:47 - in all capitals and i'm making it equal
09:49 - to three
09:50 - okay so now anywhere in my program where
09:51 - i'm referencing the number of maximum
09:53 - lines in my slot machine rather than
09:55 - writing three i'll just write this and
09:56 - then later on i can easily change this
09:58 - to be five and the whole program will
09:59 - update based on that right so let's make
10:01 - this three for now okay so get number of
10:03 - lines
10:04 - obviously the minimum lines will be one
10:05 - we don't need to write that in okay so
10:07 - we need to ask them to enter this so we
10:09 - can actually just copy everything we
10:10 - have in the deposit function
10:12 - and just change a few values here so
10:14 - we're going to say while true rather
10:15 - than amount we're going to say lines and
10:17 - we'll say
10:19 - enter
10:20 - the number
10:22 - of
10:23 - lines to bet on okay and then i want to
10:27 - put inside of here kind of the option so
10:29 - like one to three so i'm going to write
10:30 - 1 dash and then i'm actually going to do
10:33 - a concatenation here plus and then i'm
10:35 - going to convert my number of lines or
10:38 - my max number of lines to a string and
10:41 - then i'm going to say plus and then i'm
10:43 - going to put a ending bracket here
10:45 - question mark and then a space
10:47 - okay i know seems a little bit confusing
10:48 - but what i've just done here is i have
10:50 - now added max lines inside of this
10:53 - string there's a few other ways to do
10:54 - this but this is the most basic so
10:55 - that's how i'm doing it and i need to
10:57 - convert this to a string because if i
10:59 - add two strings together they get
11:00 - squished together but if this was a
11:02 - number and i tried to add it to the
11:03 - string then this would cause an
11:05 - exception in my program so enter the
11:06 - number of lines to bet on one dash and
11:09 - then i'm going to put in whatever the
11:10 - string version is of the maximum number
11:12 - of lines end my bracket put a question
11:14 - mark and then i'm putting a space so
11:16 - that when they start typing they're not
11:18 - like connected to the question mark
11:20 - they're off by one space and it looks
11:22 - easier for them to read right
11:24 - okay so now same thing i need to make
11:26 - sure that they actually did enter a
11:27 - number so i'm going to say if lines dot
11:29 - is digit then i'm going to say that my
11:31 - lines is equal to int
11:34 - lines like this and i'm going to check
11:36 - now if the lines is within the bound
11:38 - that i had so within 1 and 3. so the way
11:41 - to do this is i'm going to say if and
11:43 - i'm actually going to say 0
11:45 - actually we'll say 1 less than or equal
11:47 - to lines
11:49 - less than or equal to and then this will
11:52 - be the max lines
11:55 - all right so this is something you can
11:56 - do in python you may not have seen
11:57 - before if i want to check if a value is
11:59 - in between two values i can write it
12:00 - like this so what i'm saying here is if
12:02 - my lines is greater than or equal to one
12:04 - and is less than or equal to the maximum
12:06 - lines then i'm okay i can break
12:08 - otherwise i need to tell them to enter a
12:10 - valid number of lines so i'm going to
12:11 - say enter
12:12 - a valid number of lines okay otherwise
12:15 - same thing we'll say enter a number and
12:17 - then rather than returning the amount
12:19 - we'll return the lines okay perfect so
12:21 - now we have a function that gets the
12:22 - deposit amount and the number of lines
12:24 - so now in our main function we'll say
12:26 - lines is equal to get number of lines
12:28 - like that and now what we can do is
12:30 - print out
12:31 - the balance
12:32 - and the lines just so we can see what
12:34 - this is when we run the program
12:36 - okay so now let's go here let's run and
12:38 - how much would you like to deposit let's
12:40 - go with a hundred dollars okay enter the
12:41 - number of lines let's try four okay it
12:44 - doesn't work let's try zero doesn't work
12:46 - let's try h e doesn't work let's try two
12:49 - valid and notice i now have a balance of
12:51 - 100 and the number of lines is 2. the
12:53 - next thing i need to get for my user
12:54 - input is the amount that i want to bet
12:56 - on each line so let's do this
12:59 - and we'll have a maximum bet as well so
13:01 - we'll say max bet
13:03 - is equal to let's go with something like
13:04 - 100
13:05 - and let's say the minimum bet
13:07 - is equal to one dollar and again we're
13:09 - putting these as constants so that we
13:10 - can use them kind of anywhere in our
13:11 - program so now let's just write this
13:13 - function from scratch
13:15 - and say define get bet so we can add our
13:17 - colon and continue and forget bet we'll
13:19 - just ask them how much they want to bet
13:21 - uh and honestly actually now that i
13:22 - think of it let's just copy the same
13:24 - thing from deposit i don't like
13:25 - repeating all of this code but they are
13:27 - slightly different so it's fine to do
13:28 - something like this so for the amount we
13:30 - can actually use the same value and
13:31 - rather than what would you like to
13:32 - deposit we'll say what would you like to
13:34 - bet question mark again we're going to
13:36 - check if the amount is a digit we're
13:38 - going to convert this now to an integer
13:40 - and now we need to check if the amount
13:41 - is between the minimum and the maximum
13:43 - bet so i'm going to say the min bet less
13:46 - than or equal to the amount less than or
13:48 - equal to the max bet
13:50 - okay
13:51 - and then break
13:52 - and here i'm going to say the amount not
13:54 - must be greater than zero amount must be
13:58 - between and now i'm going to show you a
13:59 - second way that we can actually
14:02 - kind of put variables in our string so
14:04 - i'm going to use an f string here only
14:05 - available in python 3.6 and above i'm
14:08 - going to say amount must be between i'm
14:10 - going to put
14:11 - my sorry squiggly brackets like this and
14:14 - i'm going to say min bet
14:16 - and then max bet so this is actually a
14:18 - very easy way to
14:20 - embed values inside of your strings you
14:24 - put f before the string and then you put
14:26 - your curly braces like this and inside
14:28 - of the curly braces you can write any
14:30 - variable and it will automatically be
14:32 - converted to a string for you if it can
14:34 - be converted so in this case i don't
14:36 - need to convert min bet to a string or
14:38 - max bet it's automatically going to get
14:40 - converted by python and i've just put my
14:42 - dollar signs here to make it look a
14:43 - little bit better when i say you know
14:44 - between the mid and the maximum bet
14:46 - okay uh otherwise please enter a number
14:48 - that's fine and then return amount okay
14:49 - perfect so now
14:51 - i'm going to say bet is equal to
14:53 - and then this is going to be
14:56 - the
14:57 - get underscore effect
14:59 - all right
15:00 - uh now we should actually make this a
15:01 - bit more clear what would you like to
15:03 - bet on each line
15:05 - okay so now that we've done this and
15:07 - we've gotten the deposit gone the number
15:10 - of lines and gotten the bet we probably
15:12 - want to print out here in our main
15:14 - function kind of what they've said so
15:16 - far right
15:17 - so we'll say you are betting
15:19 - you know five dollars on three lines
15:21 - your total bet is 15 something like that
15:24 - right so we're going to say print
15:27 - you are betting and let's do an f string
15:29 - here as well
15:30 - and then let's do a dollar sign and
15:32 - we're going to say whatever the bet is
15:34 - we're going to say you are betting
15:35 - whatever the bet amount is on
15:38 - and then this is going to be
15:41 - lines like this and then we'll write
15:43 - lines and we'll say total bet
15:46 - is
15:48 - equal
15:49 - to
15:50 - and then we'll put a dollar sign and
15:52 - we're going to put inside of here a
15:53 - variable i'm going to say total bet is
15:55 - equal to bet multiplied by the lines
15:57 - okay
15:58 - and we'll say this is the total bet
16:01 - all right so let's run this now and
16:03 - let's see what we get we no longer need
16:04 - to print out the balance in the lines by
16:06 - the way
16:07 - all right so let's
16:09 - run this
16:10 - how much would you like to deposit let's
16:11 - say a hundred dollars enter the number
16:13 - of lines to bet on let's go with two
16:15 - would you like to bet how much would you
16:16 - like to bet on each line or what would
16:18 - you like to bet on each line let's go
16:19 - with ten dollars
16:20 - and now it says our total bet is 20
16:23 - great so this is okay but i just
16:24 - realized that we actually need to check
16:26 - if the amount that they're betting is
16:27 - within their balance
16:29 - because they can't bet more than
16:30 - whatever their current balance is
16:32 - so we need to check that and we could
16:34 - check this in a few different places
16:36 - but since i've called this get bet i'm
16:38 - not going to put it inside of here i'm
16:40 - just going to do the check here and then
16:41 - i'm going to recall get bet if they
16:44 - entered an invalid bat
16:46 - so i'm actually going to put now this
16:47 - inside of a wallet but i'm going to say
16:48 - well true i'm going to say bet is equal
16:51 - to get bat
16:52 - and i'm going to then say total bet like
16:54 - this inside of here so we put total bit
16:58 - okay
16:58 - now i'm going to say
17:00 - if my total bet is greater than my
17:04 - balance then we'll say print
17:08 - you
17:10 - do not have enough
17:14 - to bet
17:16 - that amount
17:17 - and then we'll say what their current
17:18 - balance is your
17:20 - current
17:21 - balance is and then we'll put dollar
17:24 - sign
17:25 - we're going to put our f string here and
17:27 - this is going to be
17:29 - their balance all right and then
17:32 - otherwise
17:33 - we will simply break out okay so
17:36 - hopefully that makes sense i also could
17:38 - just put a condition here for the wallop
17:40 - but i think this is okay for right now
17:42 - all right so let's try this now
17:44 - let's run our code how much would you
17:46 - like to deposit okay a hundred dollars
17:48 - uh let's bet on three lines let's try to
17:50 - bet forty dollars and says you do not
17:52 - have enough to bet that amount your
17:53 - current balance is a hundred dollars
17:55 - okay uh how much you like to bet on each
17:56 - line let's go with twenty dollars you're
17:58 - betting twenty dollars on three lines
18:00 - the bet is equal to sixty dollars okay
18:02 - so we have now successfully got the
18:04 - number of lines the betting amount b
18:07 - deposited about
18:08 - now what we need to do is we need to
18:10 - actually run the slot machine now this
18:12 - is where it gets a little bit more
18:13 - complicated and i'm going to start
18:15 - importing some modules so the first
18:17 - module i'm going to import is the random
18:19 - module because we need to generate um
18:22 - the slot machine values kind of randomly
18:24 - right
18:25 - so how are we going to do this well the
18:26 - first thing we need to figure out
18:28 - is how many items we want to have in
18:30 - each reel and how long we want the lines
18:33 - to be
18:34 - now slot machines can get a bit
18:36 - complicated in terms of how the lines
18:38 - work i'm going to keep this really
18:40 - simple and we're gonna imagine that we
18:41 - have a three by three slot machine and
18:43 - that you only get a line if you get
18:45 - three in a row okay
18:47 - if you had three in a row then you win
18:48 - this might not be the most balanced slot
18:50 - machine it might not be one you want to
18:51 - play on but for this project is fine so
18:54 - again i'm going to set some values here
18:56 - that specify the number of rows and
18:58 - columns we're going to have in our slot
19:00 - machine
19:01 - so i'm going to say rows is equal to 3
19:04 - and calls is equal to 3 and if we wanted
19:06 - to make this a little bit better we
19:08 - could say i guess
19:10 - actually you know what row and call is
19:11 - fine for right now i don't know exactly
19:13 - what they would call uh like i guess
19:15 - it'd be like real count and number of
19:16 - reels or something like that for now
19:18 - though this is fine
19:20 - all right now what we need to specify is
19:23 - how many symbols are in each of our
19:25 - reals now it should be the same at least
19:28 - from what i know it should be the same
19:29 - number of symbols in every single real
19:31 - we're not doing anything really
19:32 - complicated when i say real i'm talking
19:34 - about kind of one column right so how
19:36 - many symbols are in that column because
19:38 - we're going to have to randomly select
19:39 - out of those symbols and then we need
19:41 - values for our different symbols so we
19:44 - need to pick kind of first of all how
19:45 - many symbols do we want to have in total
19:47 - and what do we want those symbols to be
19:49 - now to keep this easy we can do
19:51 - something just like you know a b c d
19:54 - like those are probably fine as the
19:56 - symbols um
19:57 - yeah we can do something like that so
19:59 - let's say
20:00 - symbol
20:02 - underscore count
20:03 - is equal to and let's make a dictionary
20:06 - here now for our dictionary i'm going to
20:08 - have the symbol be a string and i'm
20:10 - going to have the count of this symbol
20:12 - in each reel so i guess what we can have
20:13 - is characters that are like at the
20:15 - beginning of the alphabet like a be the
20:17 - most valuable so maybe we only have i
20:19 - don't know something like two a's in
20:21 - every single reel
20:22 - and then for b's we could have something
20:24 - like four of those
20:26 - for c's we could have six
20:29 - and for d's we could have eight
20:31 - now again i don't think this is going to
20:33 - be very balanced slot machine i'm not
20:34 - going for the best odds here i'm just
20:35 - trying to kind of make something work so
20:37 - let's see if this actually works for us
20:39 - if every single reel we have two a's
20:41 - four b's six c's and um what do you call
20:44 - it eight ds to choose from now the thing
20:47 - that i think is going to happen here is
20:48 - we're going to get a lot of situations
20:50 - where it's just d's that are being in
20:52 - the reels but
20:53 - let's see if this works at all in terms
20:56 - of randomly selecting okay so that's
20:57 - what we've done here now what we need is
20:59 - something that's essentially going to
21:01 - generate what the outcome of the slot
21:03 - machine was using these values here
21:06 - so to do this i'm going to say define
21:08 - and we'll say get underscore
21:11 - slot machine underscore spin okay
21:15 - and inside of here what we're going to
21:17 - take is we're going to take the rows
21:19 - calls
21:20 - and symbols
21:22 - and this will be the symbols that we
21:24 - pass so these are three parameters that
21:26 - we're going to pass to this function and
21:27 - then inside of here we can use these
21:29 - parameters so inside of this function
21:31 - again what we need to do is generate
21:33 - what symbols are going to be in each
21:35 - column
21:36 - based on the frequency of symbols that
21:38 - we have here so we essentially need to
21:40 - randomly pick the number of rows inside
21:44 - of each column so if we have three rows
21:46 - we need to pick three symbols that go
21:48 - inside of each of the columns that we
21:49 - have and for each column we're doing
21:51 - kind of a new random pick right a new
21:53 - random generation of the symbols now
21:56 - this can be a bit complicated now the
21:57 - easiest way to randomly select um values
22:01 - here for each of our columns is going to
22:04 - be to create a list that contains all of
22:06 - the different values we possibly could
22:08 - select from and then to randomly choose
22:11 - three of those values
22:12 - and when we choose a value we'll remove
22:14 - it from the list and then we'll choose
22:16 - again now what i'm going to do here is
22:18 - not going to be the most efficient
22:19 - algorithm but since we're dealing with
22:20 - small values this is fine
22:22 - so let's see how we work with this
22:24 - okay so what we're going to define here
22:27 - is all underscore symbols
22:30 - okay now this is going to be a list
22:31 - and what we're going to do is write a
22:33 - for loop that's going to add
22:35 - however many symbols we have here into
22:37 - the all symbols list
22:39 - so i'm going to say 4 and since we're
22:41 - iterating through a dictionary
22:44 - i can do the following i can say 4
22:47 - symbol comma symbol underscore count
22:50 - and then this is going to be in symbols
22:53 - dot items now when you use dot items
22:55 - what this does is give you both the key
22:58 - and the value associated with a
23:00 - dictionary so i can get the key here and
23:03 - the value and i can just use both of
23:04 - them rather than looping through the
23:06 - dictionary only getting the keys and
23:07 - having to manually reference the values
23:10 - okay so now that i have the symbol and
23:11 - the symbol count i want to add this many
23:13 - symbols to the um what do you call it
23:16 - symbols list now there's a few different
23:18 - ways to go about doing this i think the
23:20 - easiest way to do this is going to be to
23:21 - run another for loop so that i don't
23:23 - confuse anyone so we're going to say 4
23:25 - and then this is going to be
23:27 - let's do this
23:28 - i in range and then symbol underscore
23:33 - count
23:34 - and actually we don't even need i we're
23:35 - going to put underscore now this is an
23:37 - anonymous variable in python so whenever
23:39 - you need to say loop through something
23:41 - but you don't actually care about the
23:42 - count or the iteration value then you
23:44 - just put an underscore and then you
23:45 - don't have an unused variable anymore so
23:47 - i'm going to say for underscore and
23:48 - range symbol count i'm gonna say all
23:51 - underscore symbols dot and then this is
23:54 - gonna be append and i'm going to append
23:56 - whatever the symbol is so what's gonna
23:58 - happen here is i'm gonna loop through
23:59 - this dictionary let's imagine on the
24:01 - first key value pair my symbol is going
24:03 - to be a and my symbol count is going to
24:05 - be 2. all right so then i have another
24:07 - for loop inside of here
24:09 - where i'm looping through the symbol
24:10 - count so the symbol count is 2 and what
24:13 - i'm doing is doing this two times so i'm
24:14 - going to add this symbol twice into my
24:17 - all symbols list
24:19 - all right now that we have the all
24:20 - symbols list we need to select what
24:22 - values are going to go in every single
24:25 - column
24:26 - so how do we do this well let's make a
24:28 - for loop that is going to do this for
24:31 - every column so i'm going to say my
24:33 - columns is equal to a list
24:36 - and inside of here i'm going to place a
24:38 - bunch of lists which are going to
24:39 - contain all of the values inside of my
24:41 - columns now this may seem a little weird
24:43 - to any of you that have used a nested
24:44 - list before because typically when you
24:46 - write a nested list you kind of have all
24:49 - of the interior lists here that are
24:51 - representing your rows so if i had like
24:53 - 0 0 then these this would be the values
24:55 - that are in row 0 right or in the first
24:58 - row and then this would be the second
24:59 - row and etc however here we're doing it
25:02 - the other way around where each of these
25:04 - nested lists is going to represent the
25:05 - values in our column so keep that in
25:08 - mind i'll explain how this works in case
25:10 - any of you are a bit confused later on
25:11 - but i just want you to know that we're
25:13 - storing the columns not the rows inside
25:15 - of here okay so we have all of the
25:16 - symbols and now for each of the columns
25:19 - that we have uh we need to generate
25:22 - what is it the values inside of the
25:24 - columns and how many values do we need
25:26 - to generate well however many rows we
25:28 - have that's how many values we need so
25:29 - we're going to say 4 and this is going
25:31 - to be call in range and then calls like
25:34 - that
25:35 - and then we need to say 4
25:38 - and this will be row in range
25:40 - rows okay so for every column we need to
25:44 - generate a certain number of symbols so
25:47 - inside of here i'm going to say that my
25:50 - column
25:51 - is equal to an empty list this is
25:53 - actually not going to have our columns
25:54 - inside of it i'm just was putting that
25:55 - there for an example
25:57 - and now i need to select
25:59 - a certain number number of values sorry
26:01 - from our all symbols list
26:04 - so let's see how we do this so we're
26:05 - going to say
26:07 - value is equal to random dot choice and
26:11 - i'm going to choose from all symbols now
26:14 - i can use random because i imported
26:16 - random here
26:18 - now what we're actually going to do
26:19 - though is we're not going to use the all
26:20 - symbols list we're going to use a copy
26:22 - of this and you'll see why but what we
26:24 - need to do is once we pick a value we
26:27 - need to remove it from this list so we
26:29 - can't choose that value again right so
26:31 - if there's only two a's we shouldn't be
26:33 - able to select three a's we should only
26:35 - be able to select at most two so if we
26:36 - select 1a we need to remove it so then
26:38 - the next selection doesn't have that as
26:40 - a chance
26:41 - so that means we need to make a copy of
26:43 - this all symbols list because if i start
26:45 - removing from this all symbols list then
26:47 - when i try to do the next column it's
26:49 - going to have values removed so that's
26:51 - what we need to do we need to make a
26:52 - copy so i'm going to say
26:54 - current underscore symbols is equal to
26:56 - all underscore symbols and the way you
26:58 - copy a list
27:00 - is you do this you put a colon here this
27:03 - operator here is referred to as the
27:04 - slice operator because if i just did
27:06 - this and made it equal to all symbols
27:09 - what happens is current symbols stores
27:11 - the same object as all symbols now that
27:14 - means anything i do to all symbols
27:16 - affects current symbols and anything i
27:18 - do to current symbols affects all
27:20 - symbols so this is not what we want we
27:22 - don't want what's referred to as a
27:23 - reference we want a copy so the way you
27:25 - do the copy is you put a colon here make
27:28 - sure you add this otherwise it's not
27:29 - going to work
27:30 - okay continuing here now what we're
27:32 - going to do is select from our current
27:35 - symbols and then we're going to remove
27:37 - whatever this value is from our current
27:39 - symbols list so we're going to set
27:40 - current underscore symbols dot remove
27:43 - and then value now when you do dot
27:45 - remove it's just going to find the first
27:47 - instance of this value in the list and
27:48 - get rid of it
27:50 - okay
27:51 - now that we've done that we want to add
27:53 - this value to our column so we're going
27:56 - to say
27:57 - column dot push
28:00 - and sorry not push i'm not in javascript
28:02 - right now i'm in python dot append the
28:04 - value all right and i just realized here
28:07 - we don't actually need the column and we
28:09 - don't need the row
28:10 - so we can just put underscores there
28:13 - now what we're going to do after this is
28:14 - we're going to say columns
28:16 - dot append and we are going to append
28:18 - our current column
28:20 - now let me run through this because i
28:21 - understand it's a little bit confusing
28:23 - we start by defining our columns list
28:25 - then we are going to generate a column
28:28 - for every single column that we have so
28:29 - if we have three columns we need to do
28:31 - everything inside of here three times
28:32 - that's why we have this first for loop
28:34 - then inside of here what all this code
28:36 - is doing is it's picking random values
28:38 - for each i guess row in our column right
28:41 - for each value that we're going to have
28:43 - so we say column is equal to an empty
28:45 - list we see our current symbols which
28:47 - are the ones we can currently select
28:48 - from is equal to a copy of all symbols
28:51 - then we loop through the number of
28:53 - values that we need to generate which is
28:55 - equal to the number of rows that we have
28:56 - in our slot machine then we say the
28:58 - first value we're going to get here or a
29:00 - value we're picking is random not choice
29:03 - current symbols this picks a random
29:05 - value from this list
29:07 - okay we then say current symbols dot
29:09 - remove the value so we don't pick it
29:10 - again and then we add the value to our
29:12 - column
29:13 - okay once all of that's done so this
29:14 - four loop is finished we now should have
29:16 - however many rows there are symbols
29:19 - inside of our column we now add our
29:21 - column to our columns list
29:23 - then finally we can go here
29:25 - and we can return
29:27 - our columns okay and remember that when
29:30 - we're looking at this list here every
29:32 - interior list gives us the value of the
29:34 - items inside of our column
29:36 - i know a little bit confusing this was
29:38 - quite a bit of logic especially if
29:39 - you're a beginner programmer but i told
29:41 - you i wanted to make this challenging
29:43 - enough to be interesting for you and
29:44 - show you some new stuff so don't worry
29:46 - if this doesn't make complete entire
29:48 - sense maybe read through this a few
29:50 - times pause the video go back and listen
29:51 - to the explanation again but this is
29:54 - you know how we generate the items that
29:56 - are going to be in our slot machine
29:58 - now that we have this we want a way to
30:01 - print this out we want to look at this
30:02 - because i can't even really test this
30:04 - yet until i can print out what's inside
30:06 - of all of my columns and i want to print
30:07 - this in like a nice way so i'm going to
30:09 - make a function here and say define
30:12 - print
30:13 - underscore slot machine
30:15 - and what we're going to take here is our
30:16 - columns
30:18 - now when we have our columns it's not
30:21 - really in a format that's easy for us to
30:23 - print because we have
30:25 - all of our columns kind of laid out as
30:27 - rows almost right like we have maybe
30:29 - actually this isn't going to be good but
30:30 - we would have like a b
30:33 - c and one maybe we have like a a a
30:36 - and again these are our columns not our
30:39 - rows so what i need to do is kind of
30:40 - flip these around so rather than having
30:42 - like a b c a a it would go a
30:46 - b
30:48 - c right in the first column and then
30:50 - this would say a
30:52 - a
30:53 - and then a like that i know that i kind
30:55 - of butchered this example the way that i
30:56 - wrote it out we need to change it from
30:58 - being this way to be this way right
31:00 - that's how we need to print it out so
31:02 - how are we going to do that well this
31:04 - operation is actually referred to as
31:05 - transposing because we have what's known
31:07 - as a matrix we don't need to get into
31:10 - all the fancy words but understand this
31:12 - is known as transposing so the way we're
31:14 - going to do this is we're going to write
31:15 - a for loop and we're going to say 4 and
31:17 - then this is going to be
31:19 - row
31:20 - in
31:21 - range and then we need to determine the
31:23 - number of rows that we have based on our
31:25 - columns now the number of rows that we
31:27 - have is the number of elements in each
31:29 - of our columns right so that's the
31:30 - number of vertical spaces we have so we
31:33 - need to look at a column and get the
31:34 - length of that so we're going to say the
31:35 - length
31:37 - of columns
31:38 - 0.
31:39 - now this assumes that we have at least
31:41 - one column and we should always have one
31:43 - column so it's fine to put this here but
31:44 - understand that if we did pass something
31:46 - that had no columns this would crash
31:48 - because there'd be no column at index 0
31:50 - to access so i'm saying four row in
31:52 - range the line of columns 0.
31:55 - then what i'm going to do is i'm going
31:57 - to loop through all of my columns and
31:59 - only print the first value in it or
32:01 - whatever the index of my current row is
32:04 - again i'll explain this a second i know
32:05 - this is a bit confusing so i'm going to
32:07 - say 4 and this is going to be column in
32:10 - and then columns like that and when i do
32:12 - this
32:13 - now i'm looping through all of the items
32:15 - inside of columns so it's giving me
32:17 - every individual column so now that i
32:20 - have a column i'm just going to print
32:22 - the value that's at the first row of
32:25 - that column so i'm going to say
32:26 - print and then i'm going to print
32:29 - column at row
32:31 - and i'm just going to put a comma here
32:33 - and put a pipe operator and the reason
32:35 - i'm going to put a pipe operator is so
32:36 - we have some separation between the
32:39 - different items right now i just want to
32:40 - make sure though that i only put this
32:42 - pipe operator here if we're not printing
32:45 - the last column because if we're
32:47 - printing the last column then we don't
32:49 - want to have the pipe like off right we
32:51 - only want to have two pipes in the
32:52 - middle not one at the very end so the
32:55 - way i need to check this i need to say
32:56 - 4i comma column in
32:58 - enumerate columns
33:01 - now when you enumerate what this does is
33:02 - give you the index so 0 1 2 3 as you
33:06 - loop through as well as the item so now
33:09 - that i have i what i can actually do
33:11 - here
33:12 - is i can say
33:14 - there's a few ways to do this let's
33:16 - actually go back to this we'll say if i
33:19 - does not equal and then this is going to
33:21 - be the len of
33:22 - columns minus one
33:25 - we'll do this
33:27 - otherwise we'll print the same thing we
33:28 - just won't print the pipe
33:30 - now there's a bunch of different ways we
33:32 - could have done this but this is just
33:33 - the way that i think is going to be
33:34 - easiest so that's how we'll do it so the
33:36 - reason i'm checking if i is not equal to
33:38 - len of columns minus one is because the
33:40 - length of columns minus one is the
33:42 - maximum index we have to access an
33:44 - element in the columns list right if we
33:47 - have a columns list with three items the
33:49 - length is three the maximum index is 2.
33:51 - so if i is not equal to the maximum
33:53 - index print the pipe otherwise don't
33:55 - print the pipe that's how it's going to
33:56 - work okay so now we have print slot
33:58 - machine and get slot machine spin that's
34:00 - all this is all we need for printing the
34:02 - slot machine so we loop through every
34:04 - single row that we have
34:06 - for every single row we loop through
34:08 - every column and for every column we
34:11 - only print the current row that we're on
34:13 - so we're going to print um
34:15 - what is it row zero so all of the
34:17 - elements in row zero first then row one
34:19 - then row two and this essentially
34:21 - transposes or flips our columns from
34:23 - being this way to be vertical this way
34:25 - all right so let's try this now
34:27 - and then we'll kind of finish the
34:28 - program because we're actually getting
34:29 - quite close though
34:31 - all right so once we determine what
34:32 - they're betting down here what we need
34:35 - to do is generate the slot machine
34:37 - so we're going to say slot
34:39 - we'll save just slots is equal to and
34:41 - then this is
34:42 - what do we call this function we called
34:44 - it get slot machine spin
34:47 - okay so get
34:48 - underscore
34:50 - slot machine spin and then it auto
34:52 - filled this for me we're passing the
34:53 - rows columns and symbols so
34:56 - rows is all capitals actually
34:58 - calls is like this
34:59 - and the symbols i believe we called this
35:01 - the symbols count
35:03 - or we call it symbol count so let's go
35:04 - here
35:06 - and make that symbol count okay so now
35:08 - we should have all of the columns in our
35:10 - slot spin right that's what that did for
35:12 - us
35:12 - now what we need to do is we need to
35:15 - print this so we're going to say print
35:16 - slot machine and we're going to pass to
35:18 - this our slots and really this is the
35:21 - columns but i'm just calling them slots
35:22 - because each one is like what's in the
35:24 - slot right
35:26 - okay
35:27 - let's give this a shot guys there
35:28 - probably will be an error because that's
35:30 - usually what happens when you write this
35:31 - much code from scratch but let's see if
35:33 - this works
35:34 - okay so we are depositing let's deposit
35:36 - a hundred dollars enter the number of
35:38 - lines to bet on uh let's bet on
35:41 - two and then how much we like to bet on
35:43 - each line let's do ten dollars okay
35:46 - now already we got a bit of an error
35:48 - here because i forgot to do something
35:49 - which i'll add in a second but if i
35:51 - scroll here you can see that what's
35:53 - happening is we're printing everything
35:55 - correctly we're just not printing it
35:58 - on the same line which is what we need
36:00 - to do so ideally we want d a and d on
36:02 - the same line c b and c on the same line
36:04 - and b c and a on the same line so the
36:06 - way that we fix that my apologies here
36:08 - guys
36:09 - is we go
36:11 - back to print slot machine and here we
36:14 - add this thing called end equals and we
36:16 - just make this a um what do you call an
36:18 - empty string
36:20 - and in fact let's actually do this
36:23 - end
36:24 - is equal to a pipe with spaces all right
36:27 - so what end does is it tells the print
36:30 - statement what to end the line with now
36:32 - by default end is equal to what's known
36:34 - as the new line character or the return
36:37 - character or whatever you want to call
36:39 - this carriage return there's different
36:41 - names for it i call it the new line
36:42 - character now backslash n if you ever
36:44 - print this out it's what tells the
36:47 - console to go to the next line so we
36:49 - don't want to print that because if we
36:50 - print that at the end then that means
36:52 - that we move to the next line after
36:54 - every single row we only want to do this
36:56 - sorry after every single column we only
36:58 - want to do this after every single row
36:59 - so i'm going to change this to be a pipe
37:01 - so now we'll just print this pipe at the
37:03 - end of our print statement so after we
37:05 - print this here we're just not going to
37:07 - print anything and now we need one more
37:09 - check to see if we should go to the next
37:12 - line or not because every row we want to
37:14 - go down to the next line
37:16 - so i'm actually going to say here
37:18 - print and we can just do an empty print
37:21 - statement now by doing an empty print
37:23 - statement it just brings us down to the
37:24 - next line because it prints a new line
37:26 - character by default at the end of the
37:28 - empty print statement
37:30 - seems a bit weird that's kind of how
37:31 - this works we're going to print the
37:33 - first row this will go on the same line
37:36 - then we're going to print a new line
37:37 - character so it brings us down to the
37:38 - next line print the next row new line
37:40 - character next row new line character
37:42 - next row etc right
37:44 - so let's have a look at this now okay
37:46 - let's go here let's run how much you
37:49 - like to deposit a hundred dollars uh
37:51 - let's bet on two lines how much would
37:52 - you like to bet ten dollars and there we
37:55 - go now we have our slot machine
37:57 - excuse me and this is correct right so
37:59 - we have all of our columns uh and then
38:01 - all of our rows and what we'd now be
38:03 - checking is if we have three in a row
38:07 - right that's what we're going to have to
38:08 - check
38:09 - okay so we have our slot machine we've
38:10 - spun it we probably should have some
38:12 - input that asks like do you want to spin
38:14 - the slot machine and then they can hit
38:15 - spin
38:16 - blah blah be a bit more interactive but
38:18 - that's how it works and just be clear
38:20 - here we're going to check if we have
38:21 - three in a row
38:23 - and if we do based on the value of the
38:25 - symbol we're going to multiply their bet
38:27 - and then give them that amount all right
38:29 - so let's write a function that can do
38:30 - this now when we're checking if they won
38:33 - or not we need to know what their bet is
38:36 - which lines they bet on right
38:39 - and then we can actually check
38:40 - now
38:42 - the way the lines works again i know
38:44 - this is not exactly how like a real
38:45 - casino slot machine will work we're
38:47 - going to make it so that if you bet on
38:48 - one line you just bet on the top line if
38:50 - you bet on two lines you put on the top
38:52 - in the middle if you bet on three lines
38:53 - you bet on all three i'm not going to
38:55 - let the user pick like where the one
38:56 - line is they want to bet on we'll just
38:58 - say one is top two is both the top two
39:01 - three is all of them and that's how
39:03 - it'll work
39:04 - okay so let's do this let's go define
39:07 - check winnings
39:09 - okay now to do this
39:11 - we need the slot machine itself we need
39:13 - the lines so we're gonna say lines and
39:15 - we need the bet
39:17 - okay
39:18 - so how are we gonna do this well we just
39:20 - need to look at the rows that the user
39:22 - bet on so let's start with that and then
39:24 - we can check each row and determine a
39:26 - value also for the symbol so we're
39:28 - actually going to take one more thing
39:29 - we're going to say values now i'm also
39:31 - going to make the values here so i'm
39:32 - going to say symbol underscore value
39:35 - and i don't know what actually makes
39:37 - sense again to do for this but we're
39:39 - going to say that d is going to be a two
39:41 - times multiplier c is gonna be a
39:45 - three times multiplier this will be four
39:47 - and then this will be five so you know
39:49 - the more rare the symbol is the higher
39:50 - your bet gets multiplied again i don't
39:52 - think this is a fair slot machine but
39:53 - that's fine okay so check winnings now
39:56 - we have columns lines bet and value now
39:58 - let's look through only the rows that
39:59 - they bet on so the lines that they bet
40:01 - on
40:02 - so to do this we're going to say 4
40:04 - and we'll say
40:06 - line
40:07 - in range then this is going to be lines
40:10 - like this
40:11 - now the reason this will work is because
40:13 - if they bet on one line then we're going
40:16 - to go up to one line but not include it
40:18 - so that means the line will be equal to
40:20 - zero right
40:21 - so if i bet one line then this is one
40:24 - and that means this is only ever going
40:25 - to be zero if they bet on two lines then
40:27 - line will go to zero and one so we'll
40:29 - check the zeroth row which is line one
40:32 - and the first row which is line two
40:34 - if they bet on all three lines then line
40:36 - will be zero then one then two so we'll
40:39 - check all three of those rows right and
40:40 - this will work dynamically even if there
40:42 - was more lines to bet on
40:43 - so inside this for loop we need to check
40:46 - that every single symbol in the line or
40:48 - row that we're checking is the same so
40:50 - we can get the first symbol that's in
40:53 - this row and then just make sure it's
40:54 - the same for the rest of the symbols so
40:56 - to do that we're going to say symbol is
40:58 - equal to columns 0 at the current line
41:01 - now the reason we're using columns 0 is
41:04 - because
41:04 - we have all of the columns not all of
41:07 - the rows it makes it a bit more
41:08 - complicated so we need to look at the
41:10 - first column because that's where the
41:11 - first symbol is always going to be for
41:13 - each row and then get whatever line
41:15 - we're on so first column and then either
41:17 - you know line 0 line one line two etc
41:20 - going down that first column gives us
41:22 - the first symbol and we're going to
41:24 - assume that we always have at least you
41:25 - know one reel right so at least one
41:27 - column so now that we have the symbol
41:28 - we're gonna loop through all of our
41:30 - columns so we're gonna say four
41:32 - column
41:33 - in columns like that
41:35 - now what we want to check so the symbol
41:38 - to
41:39 - underscore check is equal to the column
41:42 - at whatever row we're looking at so if
41:45 - we're looking at row 0 we're checking
41:47 - the first symbol in the column if we're
41:48 - looking at row one checking the second
41:50 - symbol in the column etc symbol to check
41:53 - we're then going to say if
41:55 - the symbol
41:56 - is equal
41:58 - to the symbol to check and actually
41:59 - we'll say if it is
42:01 - not equal to the symbol to check
42:03 - then
42:04 - we are going to break okay and the
42:06 - reason we're breaking is because if we
42:08 - found one of the symbols is not equal to
42:11 - the previous symbol uh or equal to all
42:13 - of the symbols that should be in this
42:16 - row then we just break out of the for
42:18 - loop and what we'll do is we'll put an
42:20 - else statement here
42:22 - and what this else statement will do is
42:23 - it will tell us if we didn't break out
42:25 - of the for loop so i'm sure you probably
42:27 - haven't seen this before but you can do
42:28 - a four else where if you break this else
42:32 - statement does not run but if no break
42:34 - occurs within the for loop then this
42:36 - else statement executes so in the else
42:39 - statement here what we'll do is we'll
42:41 - figure out how much they won so we'll
42:42 - say winnings is equal to zero okay and
42:46 - then here we're going to say
42:48 - winnings plus equals and then this is
42:51 - going to be the values
42:54 - at the symbol
42:56 - multiplied by the bet and then we can go
42:58 - here and return
43:01 - the winnings
43:02 - okay so let's look at this because i'm
43:03 - sure this is confusing
43:05 - we have every line in the lines which
43:07 - means we're looping through every row
43:09 - essentially that we're going to be
43:10 - checking that the user bet on we then
43:12 - say the symbol that we want to check is
43:14 - whatever symbol is in the first column
43:17 - of the current row because all of the
43:18 - symbols need to be the same right
43:21 - we then say
43:22 - 4 column in column so we now know the
43:23 - symbol that we're going to check now we
43:25 - need to loop through every single column
43:27 - and check for that symbol so we go to
43:29 - each column and we say the symbol to
43:31 - check is equal to the column at the
43:34 - current row that we are looking at so if
43:36 - it's row zero we're doing row zero if
43:37 - it's row one row one et cetera we then
43:39 - check if these symbols are not the same
43:42 - if they are not the same we break out
43:44 - which means that we're going to go check
43:46 - the next line because they didn't win
43:47 - because symbols were not the same
43:49 - if they are the same then we don't break
43:51 - and if we get to the end of this for
43:52 - loop and we've not broke out which means
43:54 - all of the symbols were the same then
43:56 - that means that the user won and what
43:58 - they won is whatever the multiplier is
44:00 - for that symbol times their bet right
44:03 - and this bet is the bet on each line not
44:07 - the total bet right
44:08 - so they could win on one line but lose
44:10 - on the other line that's how it works
44:12 - okay hopefully that's clear i can't
44:14 - explain it much more than that just
44:17 - understand symbol values here right uh
44:19 - gives us you know five four three two so
44:21 - that's what i'm using i'm saying values
44:23 - at whatever the symbol is multiplied by
44:24 - the bet that's how we're adding to the
44:26 - wings
44:27 - okay so that's it for determining how
44:29 - much they won so let's run the game one
44:32 - full time now and then we'll figure out
44:33 - how we can run it multiple times and
44:35 - reduce the balance and all that which is
44:37 - easier than what we just did okay so we
44:38 - print the slot machine
44:40 - and now we're going to say
44:42 - winnings is equal to
44:44 - and what did i call this
44:47 - check winnings okay
44:50 - check winnings
44:51 - we need to pass this our slots
44:55 - the number of lines so i think we called
44:57 - that lines right
44:59 - the bet which we have right here
45:01 - and
45:02 - the values which
45:04 - is called symbol values so let's go
45:06 - symbol underscore value
45:08 - all right then we're going to print
45:13 - u 1
45:15 - and then whatever the amount is that
45:16 - they want so let's make this an f string
45:19 - okay and then you won and then this is
45:21 - going to be
45:23 - winnings like this
45:27 - and this could potentially be zero
45:28 - dollars right
45:30 - okay so i think that's good i'm thinking
45:32 - that we might want to also tell them how
45:34 - many lines they want on or what lines
45:36 - they want on so let's actually return
45:38 - that as well from this function so get
45:41 - uh check winnings we're going to do one
45:43 - more thing here we're going to say
45:44 - winning underscore lines is equal to an
45:47 - empty list and if they win we're going
45:49 - to say winning lines plus equals
45:53 - uh actually not plus equals dot append
45:56 - and then this is going to be whatever
45:57 - the current line number is but we're
45:59 - gonna have to add one to it because this
46:01 - is an index and we want like line one
46:03 - two three not zero one two so we say
46:05 - winning lines dot append line plus one
46:07 - then we go here and we put winning lines
46:09 - and now we're returning two values the
46:11 - total amount they won as well as what
46:12 - lines they want on
46:14 - okay now let's go here to winning lines
46:17 - and now we're going to say winnings and
46:20 - winning underscore lines
46:22 - you won these winnings and then we'll
46:24 - say
46:26 - u1 we'll print another line
46:29 - like this f
46:31 - u 1 on and then this is going to seem a
46:34 - little bit weird but i'm going to do
46:35 - asterisks and then i'm going to pass my
46:37 - winning lines
46:39 - now again i promised i was going to show
46:40 - you guys some new stuff so i'm showing
46:41 - you some advanced syntax here but what
46:43 - this does is actually called the splat
46:46 - operator or the unpack operator and it's
46:48 - going to pass every single line from
46:51 - this winning lines list
46:54 - to
46:55 - this print function so what that means
46:57 - is if we have lines like one and two
46:59 - it's going to pass both one and two so
47:01 - it's going to say u1 on and then one two
47:03 - so i'm going to say you want on
47:05 - lines like this and then it would say
47:06 - one space two we want on all three lines
47:08 - say one space two space three if we
47:10 - didn't want any lines then it's not
47:12 - going to say anything
47:13 - okay you'll see when when we print this
47:15 - out how this works so let's
47:17 - run this here let's make this full
47:19 - screen now and let's go through an
47:20 - example so deposit 100
47:23 - how many lines four invalid okay let's
47:25 - bet on two lines how much would you like
47:27 - to bet on each line ten dollars all
47:29 - right so we won zero dollars because
47:31 - none of the symbols are the same so
47:32 - let's try again
47:33 - all right pause it hundred dollars uh
47:35 - two uh two lines sorry how much would
47:38 - you like to bet ten dollars you won zero
47:41 - dollars okay so this is going to happen
47:43 - a few times so rather than continuing to
47:45 - do this and hoping that we're going to
47:46 - win
47:47 - let's make it so we can run this
47:49 - multiple times without having to
47:50 - constantly rerun the program
47:52 - so we have this main function we have
47:54 - the balance and we have the lines now
47:56 - the balance is going to stay the same
47:57 - but all of this stuff here needs to
47:59 - happen multiple times right and we'll
48:01 - reduce from the balance and all that
48:02 - stuff
48:03 - so let's
48:05 - copy all of this
48:07 - into a function and let's say define
48:10 - let's say game okay
48:12 - we'll put this inside of here so this
48:14 - kind of executes one game
48:17 - now
48:17 - what we can do is write a while loop
48:19 - here
48:21 - and this while loop can kind of handle
48:23 - running the game all right so i'm just
48:24 - thinking here if we do this we need some
48:26 - way to determine like from this instance
48:29 - of the games like per spin so actually
48:31 - let's just say this is maybe spin we
48:33 - need to know how much they won or they
48:34 - lost so i'm just going to return here
48:36 - the winnings minus the total bet and
48:39 - that will tell us how much they won or
48:41 - lost from this spin because if they want
48:44 - 100 but they bet 15 then they only won
48:47 - 85 so then here we would update and we
48:49 - would add 85 right but if they didn't
48:52 - win anything then it's going to be
48:53 - negative whatever the total bet is so
48:54 - like 15 bucks so we'd subtract 15 from
48:56 - the balance okay so here i'm going to
48:58 - say well true
48:59 - and we'll print
49:02 - um
49:03 - current
49:05 - balance is and then we can just put
49:07 - comma actually let's do this as an f
49:09 - string so we can put a dollar sign
49:11 - current balance is and then we'll do
49:13 - dollar sign and then balance okay and
49:17 - then we'll play games we'll say
49:19 - spin
49:20 - equals
49:22 - input
49:23 - say
49:25 - press
49:26 - enter
49:28 - to spin
49:29 - okay so they'll press enter to spin so
49:30 - actually we don't even need to put a
49:32 - value here because we don't care what
49:33 - they type in
49:34 - or actually we can say this spin
49:37 - is equal to press enter to spin and
49:39 - we'll say q
49:41 - to quit so if they type in q then we'll
49:42 - quit so we can say if
49:45 - spin
49:47 - is equal to q then we will break the
49:50 - while loop which will just end the game
49:52 - okay otherwise we'll spin so we can say
49:55 - spin like that and we'll say balance
49:58 - plus equals spin
50:00 - so the way this works now is that spin
50:02 - is going to return to us however much
50:03 - they won or lost it will tell them like
50:05 - what they want or lost so then we'll
50:07 - just update the balance based on the
50:08 - result of that spin and then we'll run
50:10 - this again and say okay current balance
50:11 - is this press enter to spin blah blah
50:13 - and then when they spin they're going to
50:14 - have to enter this info and actually
50:17 - press enter to spin
50:19 - probably doesn't make sense to go here
50:21 - right because you only want to spin
50:23 - after you enter
50:24 - your information although
50:26 - we can just have this works we'll say
50:28 - press enter to to play that's fine and
50:30 - then they can do it inside of there
50:32 - uh okay now that we have that i think
50:34 - that's actually all that we need i'll
50:37 - just make one last print statement here
50:38 - that says
50:39 - u
50:41 - left with
50:43 - and then we'll put inside dollars and
50:46 - then this will be the balance and we'll
50:48 - put an f string here
50:49 - all right
50:50 - let's run this and give it a shot okay
50:52 - so run
50:54 - go here how much do you like to deposit
50:56 - let's suppose it a thousand dollars okay
50:58 - current balance is a thousand dollars
50:59 - press enter to play q to quit okay enter
51:02 - uh and we got an object here balance
51:03 - plus equals spin
51:05 - all right looks like we need to fix this
51:06 - so balance is equal to deposit balance
51:09 - plus equals spin we have winning lines
51:11 - subtracted by total bet
51:14 - and what is the problem all right so the
51:16 - issue here is that i accidentally have
51:18 - the name my function
51:20 - spin
51:21 - the same name as this right here so
51:23 - we're just going to change this to be
51:24 - answer
51:25 - so now this will work properly okay so
51:28 - my apologies guys
51:29 - let's go here and fix this and let's say
51:32 - thousand dollars current balance is a
51:34 - thousand press enter play okay enter the
51:36 - number of lines to bet on let's bet on
51:37 - two lines let's bet 10 bucks
51:40 - okay balance is not defined
51:42 - looks like we need to fix another error
51:44 - so what we need to pass here
51:46 - is balance to the spin function so that
51:48 - it can actually check this when we make
51:50 - a bet so of course that makes sense just
51:51 - forgot to do that so let's pass
51:53 - balance here and now we'll actually be
51:55 - able to check that all right so let's
51:57 - try it again third time's a charm
52:00 - hundred dollars current balance hundred
52:02 - dollars press enter to play okay number
52:03 - of lines let's go three let's go ten
52:06 - dollars
52:07 - and you are betting on ten dollars
52:09 - you're betting ten dollars on three
52:10 - lines total is equal to thirty dollars
52:12 - okay you want zero dollars you won
52:14 - onlines and it has an issue here on
52:16 - sport operands for list and int
52:19 - okay
52:20 - my apologies that's because i put
52:22 - winning lines this needs to be
52:24 - winnings
52:25 - all right fourth time's a charm so let's
52:27 - make sure our variable names are correct
52:28 - that was just a silly mistake let's
52:30 - clear and run
52:33 - hundred dollars
52:34 - enter
52:35 - three lines
52:36 - ten dollars okay you won zero dollars
52:38 - you won on lines your current balance is
52:40 - 70 okay let's play again
52:43 - three lines
52:44 - five dollars okay did we win anything no
52:47 - we did not all right let's play again
52:48 - i'd really like to try to win something
52:50 - but as we can see the slot machine is
52:52 - not in our favor today ten dollars you
52:54 - won zero dollars okay current balance is
52:57 - 25 all right three lines two dollars you
53:00 - won four dollars okay nice so how did we
53:03 - end up winning uh four dollars we bet
53:05 - two dollars
53:07 - and we got a line here of ds so that
53:09 - gave us uh times two multipliers so two
53:11 - times two four so we won four bucks
53:13 - there you go and then our balance get up
53:14 - gets updated sorry to 23 dollars because
53:18 - we were at 25
53:19 - uh subtracted six add four yes okay so
53:22 - that makes sense all right so let's play
53:23 - again let's go three lines one dollar
53:26 - okay you won nothing let's play again
53:28 - three lines one dollar you want nothing
53:30 - three lines one dollar uh oops uh this
53:34 - is let's go three dollars you won
53:36 - nothing okay play again
53:37 - one line three dollars you won nothing
53:41 - all right well i won't continue to play
53:42 - but
53:43 - you get the point we've just created a
53:44 - slot machine and now if i hit q and
53:46 - enter we leave with 11 dollars all right
53:50 - so i think i'm gonna wrap it up there
53:52 - i'm gonna zoom out a bit so you guys can
53:54 - read more of this code i'll just kind of
53:56 - scroll through it i'll also put it in
53:57 - the description in case you want to
53:58 - reference it on github
54:00 - but you can see this is what we wrote so
54:02 - we did about 150 lines of code in i
54:05 - guess about an hour now i walked you
54:07 - through my thought process i showed you
54:08 - a bunch of different python features
54:10 - we did actually some fairly advanced
54:12 - logic in terms of looking through rows
54:14 - and columns and looking at nested lists
54:16 - i showed you about functions i showed
54:18 - you about the anonymous variable you saw
54:20 - this
54:21 - splat operator here and when we went on
54:23 - a line you saw it said we won on
54:25 - whatever the line number was
54:27 - so hopefully this was helpful to you
54:29 - guys hopefully this showed you kind of
54:31 - how to structure a program notice that
54:33 - we put everything in separate functions
54:35 - we've kind of spread our code out we've
54:36 - made it very readable and now we know if
54:38 - there's a bug anywhere it's really easy
54:39 - for us to go and kind of figure out
54:41 - where that is because we've separated
54:42 - everything into different units right
54:44 - different blocks of code anyways i will
54:46 - wrap it up here i hope you guys enjoyed
54:48 - this video if you like this style of
54:49 - teaching then make sure you check out
54:50 - programmingexpert.io and i look forward
54:52 - to seeing you in another youtube video
54:57 - [Music]

Cleaned transcript:

in this video i'm gonna teach you python by working through a project now this project i'm gonna write completely from scratch which means i don't have it up on my other screen i've not ridden this before it's a completely new project to me now the point of this is not only am i going to teach you basic python syntax and some different language features i'm also going to explain to you how you structure a program how you've decide where you're going to start what different components you need to build out and kind of how you go about the different tasks this is going to be perfect for people that have a little bit of experience with python they've written some code before but they're not yet comfortable and confident to go and write their own project where they don't know where to start when they're kind of diving into a task on their own hopefully this is going to make you a lot more confident you're going to learn a bunch about python and you're going to have a good project that you can show after this video so i encourage you to follow along type this project out with me with that said let's dive in after a quick word from our spots here before we get started i need to thank octo ml for sponsoring this video as we know building and training the perfect deep learning model for your application is just the first step after that it's time to push it to production now rather than learning completely new tools for model acceleration and containerization you need a bridge that gets you from model building and training to deployment as fast as possible now that's where octoml cli comes in using octo ml is very similar to working with docker and kubernetes you start with a trained model and ingest it into octo ml next octo ml packages the model into a docker container with nvidia's trident inference server which you can deploy to your local docker desktop any cloud kubernetes service like amazon eks azure aks or even managed ml services like amazon sage maker when you're ready you can then use octo ml to accelerate your model peak performance on your cpu or gpu hardware target get started today by clicking the link in the description and downloading the octo ml cli for free make sure to be one of the first 20 tech with tim subscribers to try octo ml to receive a special welcome gift so you're probably wondering now what kind of project are we going to work on now i wanted to pick something that was unique and that i haven't done before so we're actually going to build a text based slot machine now the way this will work is the user will deposit a certain amount of money we're then going to allow them to bet on either one two or three lines of the slot machine just to keep it pretty simple i know in real slot machines they have a lot more lines than that and then we are going to determine if they want so if they got any lines we're gonna multiply their bet by the value of the line add that to their balance and then allow them to keep playing until they want to cash out or until they run out of money so this is actually a fairly complex project because we need to do a lot of things we need to collect the user's deposit we need to add that to their balance we need to allow them to bet on a line or on multiple lines we then need to see if they actually got any of those lines we then need to spin the slot machine or we would have done that before right we need to generate the different items that are going to be in the slot machine on the different reels and then we need to add whatever they want back to their balance so there's quite a bit of stuff going on here and this should be a challenging enough project to make it interesting for you guys so before we even get into this i just want to mention i obviously am not supporting gambling here this is just kind of a cool thing that we can do we're not using any real money and i think it's a good project so just keep that in mind do not gamble i'm not supporting that by making this video and before i write any code what i like to do here is just think of the different things that we need to do in this project and kind of pick a good starting point the place where i like to start usually is collecting some user input and for this project we need to get the deposit that the user is entering as well as their bet right those are kind of the two things we need before we can start actually using the slot machine and generating you know whatever the slot machine spun so to do this i'm going to make a function here called deposit now i'm just inside of visual studio code you can work in any any editor you want sorry and i have this main.pie function open i assume you guys can open your own python file and kind of work in your preferred environment so this function here is going to be responsible for collecting user input that gets the deposit from the user now a function if you're unfamiliar is just something that we can call that's going to execute a certain block of code and then can potentially return us a value and you'll see how this works in a second so what i'm going to do here set up a while loop and the reason i need a while loop is because i'm going to continually ask the user to enter a deposit amount until they give me a valid amount so if they don't give me a valid amount then they need to keep typing in until eventually we get one so to do this i'm going to say my amount is equal to input and then inside of input i'm going to pass a prompt which is some text that will happen before we allow the user to start typing so for the prompt i can say what would you like to deposit question mark and then i can put something like a dollar sign and then allow them to start typing after the dollar sign okay now what i need to do is check if this amount is actually a number because they could type in anything here right they could type in hello world they could type in nothing and just hit enter they can do whatever they want so i need to make sure that the amount actually is a number before i get out of this while loop so i'm going to say if the amount dot is and then digit like this then we can do something inside of here now is digit is just going to tell us if this is a valid whole number so if it's something like a thousand you know 10 whatever if they type in a negative number it actually won't be true so if they do something like negative 9 then it's not going to be true and we call is digit anyways this is a method you can use on strings to determine if this is a valid number so if this is a digit then what i'm going to do is i'm going to convert this into an init so i'm going to say amount is equal to int amount and that's because by default this comes as a string and we want to have a numeric value for our balance or for our deposit so we need to convert this to an it however i can't do this before i make this check because if i do that then this could potentially fail because if they try to type in something like hello world then this here is invalid i can't convert hello world into an integer so that's why i'm first checking if they did actually enter a valid number if they did i then convert it to a number now what i need to do is check if this number is greater than zero so i'm going to say if the amount is greater than not equal to but is greater than zero then i'm going to break out of this wall if it's not greater than zero then i'm going to put an l statement here and i'm going to say print amount must be greater than zero dot okay there we go now i'm just gonna add one more else statement down here and i'm gonna say print uh please if we could type this correctly enter a number okay then finally here we are going to return our amount all right so let me go through what we just did here so we wrote a function deposit this is a while loop so we're going to continue to do this until eventually we break out and this break keyword just ends the while loop and then we'll bring us down to this line i ask what is the amount you want to deposit they enter something if this is a digit then i'm going to convert this to an integer and i'm going to check if this is greater than zero if it is it's a valid amount we can work with this we'll break out and then we'll return that amount and we can use that later on okay otherwise i'm going to print this amount must be greater than zero because if it's not greater than zero well we need to tell them that then get them to try again all right so that handled this first if statement now if the amount is not a digit then what we're going to do is uh print sorry please enter a number and we're going to continue this until we get a number and until we break all right so that's that function now to call the function if we spell uh deposit correctly here i don't even know how i messed that up so badly okay deposit uh to call the function we simply write the name of the function and we put our two parentheses and now as soon as i run my code this function will run and we'll be able to actually enter a number so let's do this you can see in my terminal that it's asking me what would you like to deposit let's go with something like ten dollars and all is good now if i run this again and i enter something like hello world it tells me please enter a number okay let's enter zero all right amount must be greater than zero enter one i'm good to go so there we go we've written our first deposit function and i've tested it it's working good we're all good to go all right so now what i'm going to do is i'm going to say my amount is equal to my deposit and actually we're going to call this balance and this is kind of the start of our program here and in fact i'm going to put our program in this function main so that if we end our program we can just call this function again and then it will rerun the program right so i can say do you want to play again and then we can rerun the main function and we'll be good to go so we've done that now i need to call the main function so that we start running main and then it's going to do everything inside of here okay so now inside of made the next thing that i want to do is i want to collect the bet from the user so there's actually a few ways i can do this but i need to determine how much they want to bet and then how many lines they want to bet on and then i would multiply their bet amount by the number of lines so it probably makes sense to ask the number of lines first and then ask them how much they want to bet on each line so it's not confusing if i say how much do you want to bet they put ten dollars and then they say three lines and ends up being thirty dollars see what i mean so let's say define and we'll say get number of lines like this and inside of here we're going to ask them to pick a number between 1 and 3 because that'll be the number of lines that we have and to keep this program nice and dynamic i'm going to add what's known as a global constant at the top of my program and i'm going to say max underscore lines is equal to 3. now i'm doing this in all capitals because this is a constant value something that's not going to change and this is a convention in python you do it in all capitals and i'm making it equal to three okay so now anywhere in my program where i'm referencing the number of maximum lines in my slot machine rather than writing three i'll just write this and then later on i can easily change this to be five and the whole program will update based on that right so let's make this three for now okay so get number of lines obviously the minimum lines will be one we don't need to write that in okay so we need to ask them to enter this so we can actually just copy everything we have in the deposit function and just change a few values here so we're going to say while true rather than amount we're going to say lines and we'll say enter the number of lines to bet on okay and then i want to put inside of here kind of the option so like one to three so i'm going to write 1 dash and then i'm actually going to do a concatenation here plus and then i'm going to convert my number of lines or my max number of lines to a string and then i'm going to say plus and then i'm going to put a ending bracket here question mark and then a space okay i know seems a little bit confusing but what i've just done here is i have now added max lines inside of this string there's a few other ways to do this but this is the most basic so that's how i'm doing it and i need to convert this to a string because if i add two strings together they get squished together but if this was a number and i tried to add it to the string then this would cause an exception in my program so enter the number of lines to bet on one dash and then i'm going to put in whatever the string version is of the maximum number of lines end my bracket put a question mark and then i'm putting a space so that when they start typing they're not like connected to the question mark they're off by one space and it looks easier for them to read right okay so now same thing i need to make sure that they actually did enter a number so i'm going to say if lines dot is digit then i'm going to say that my lines is equal to int lines like this and i'm going to check now if the lines is within the bound that i had so within 1 and 3. so the way to do this is i'm going to say if and i'm actually going to say 0 actually we'll say 1 less than or equal to lines less than or equal to and then this will be the max lines all right so this is something you can do in python you may not have seen before if i want to check if a value is in between two values i can write it like this so what i'm saying here is if my lines is greater than or equal to one and is less than or equal to the maximum lines then i'm okay i can break otherwise i need to tell them to enter a valid number of lines so i'm going to say enter a valid number of lines okay otherwise same thing we'll say enter a number and then rather than returning the amount we'll return the lines okay perfect so now we have a function that gets the deposit amount and the number of lines so now in our main function we'll say lines is equal to get number of lines like that and now what we can do is print out the balance and the lines just so we can see what this is when we run the program okay so now let's go here let's run and how much would you like to deposit let's go with a hundred dollars okay enter the number of lines let's try four okay it doesn't work let's try zero doesn't work let's try h e doesn't work let's try two valid and notice i now have a balance of 100 and the number of lines is 2. the next thing i need to get for my user input is the amount that i want to bet on each line so let's do this and we'll have a maximum bet as well so we'll say max bet is equal to let's go with something like 100 and let's say the minimum bet is equal to one dollar and again we're putting these as constants so that we can use them kind of anywhere in our program so now let's just write this function from scratch and say define get bet so we can add our colon and continue and forget bet we'll just ask them how much they want to bet uh and honestly actually now that i think of it let's just copy the same thing from deposit i don't like repeating all of this code but they are slightly different so it's fine to do something like this so for the amount we can actually use the same value and rather than what would you like to deposit we'll say what would you like to bet question mark again we're going to check if the amount is a digit we're going to convert this now to an integer and now we need to check if the amount is between the minimum and the maximum bet so i'm going to say the min bet less than or equal to the amount less than or equal to the max bet okay and then break and here i'm going to say the amount not must be greater than zero amount must be between and now i'm going to show you a second way that we can actually kind of put variables in our string so i'm going to use an f string here only available in python 3.6 and above i'm going to say amount must be between i'm going to put my sorry squiggly brackets like this and i'm going to say min bet and then max bet so this is actually a very easy way to embed values inside of your strings you put f before the string and then you put your curly braces like this and inside of the curly braces you can write any variable and it will automatically be converted to a string for you if it can be converted so in this case i don't need to convert min bet to a string or max bet it's automatically going to get converted by python and i've just put my dollar signs here to make it look a little bit better when i say you know between the mid and the maximum bet okay uh otherwise please enter a number that's fine and then return amount okay perfect so now i'm going to say bet is equal to and then this is going to be the get underscore effect all right uh now we should actually make this a bit more clear what would you like to bet on each line okay so now that we've done this and we've gotten the deposit gone the number of lines and gotten the bet we probably want to print out here in our main function kind of what they've said so far right so we'll say you are betting you know five dollars on three lines your total bet is 15 something like that right so we're going to say print you are betting and let's do an f string here as well and then let's do a dollar sign and we're going to say whatever the bet is we're going to say you are betting whatever the bet amount is on and then this is going to be lines like this and then we'll write lines and we'll say total bet is equal to and then we'll put a dollar sign and we're going to put inside of here a variable i'm going to say total bet is equal to bet multiplied by the lines okay and we'll say this is the total bet all right so let's run this now and let's see what we get we no longer need to print out the balance in the lines by the way all right so let's run this how much would you like to deposit let's say a hundred dollars enter the number of lines to bet on let's go with two would you like to bet how much would you like to bet on each line or what would you like to bet on each line let's go with ten dollars and now it says our total bet is 20 great so this is okay but i just realized that we actually need to check if the amount that they're betting is within their balance because they can't bet more than whatever their current balance is so we need to check that and we could check this in a few different places but since i've called this get bet i'm not going to put it inside of here i'm just going to do the check here and then i'm going to recall get bet if they entered an invalid bat so i'm actually going to put now this inside of a wallet but i'm going to say well true i'm going to say bet is equal to get bat and i'm going to then say total bet like this inside of here so we put total bit okay now i'm going to say if my total bet is greater than my balance then we'll say print you do not have enough to bet that amount and then we'll say what their current balance is your current balance is and then we'll put dollar sign we're going to put our f string here and this is going to be their balance all right and then otherwise we will simply break out okay so hopefully that makes sense i also could just put a condition here for the wallop but i think this is okay for right now all right so let's try this now let's run our code how much would you like to deposit okay a hundred dollars uh let's bet on three lines let's try to bet forty dollars and says you do not have enough to bet that amount your current balance is a hundred dollars okay uh how much you like to bet on each line let's go with twenty dollars you're betting twenty dollars on three lines the bet is equal to sixty dollars okay so we have now successfully got the number of lines the betting amount b deposited about now what we need to do is we need to actually run the slot machine now this is where it gets a little bit more complicated and i'm going to start importing some modules so the first module i'm going to import is the random module because we need to generate um the slot machine values kind of randomly right so how are we going to do this well the first thing we need to figure out is how many items we want to have in each reel and how long we want the lines to be now slot machines can get a bit complicated in terms of how the lines work i'm going to keep this really simple and we're gonna imagine that we have a three by three slot machine and that you only get a line if you get three in a row okay if you had three in a row then you win this might not be the most balanced slot machine it might not be one you want to play on but for this project is fine so again i'm going to set some values here that specify the number of rows and columns we're going to have in our slot machine so i'm going to say rows is equal to 3 and calls is equal to 3 and if we wanted to make this a little bit better we could say i guess actually you know what row and call is fine for right now i don't know exactly what they would call uh like i guess it'd be like real count and number of reels or something like that for now though this is fine all right now what we need to specify is how many symbols are in each of our reals now it should be the same at least from what i know it should be the same number of symbols in every single real we're not doing anything really complicated when i say real i'm talking about kind of one column right so how many symbols are in that column because we're going to have to randomly select out of those symbols and then we need values for our different symbols so we need to pick kind of first of all how many symbols do we want to have in total and what do we want those symbols to be now to keep this easy we can do something just like you know a b c d like those are probably fine as the symbols um yeah we can do something like that so let's say symbol underscore count is equal to and let's make a dictionary here now for our dictionary i'm going to have the symbol be a string and i'm going to have the count of this symbol in each reel so i guess what we can have is characters that are like at the beginning of the alphabet like a be the most valuable so maybe we only have i don't know something like two a's in every single reel and then for b's we could have something like four of those for c's we could have six and for d's we could have eight now again i don't think this is going to be very balanced slot machine i'm not going for the best odds here i'm just trying to kind of make something work so let's see if this actually works for us if every single reel we have two a's four b's six c's and um what do you call it eight ds to choose from now the thing that i think is going to happen here is we're going to get a lot of situations where it's just d's that are being in the reels but let's see if this works at all in terms of randomly selecting okay so that's what we've done here now what we need is something that's essentially going to generate what the outcome of the slot machine was using these values here so to do this i'm going to say define and we'll say get underscore slot machine underscore spin okay and inside of here what we're going to take is we're going to take the rows calls and symbols and this will be the symbols that we pass so these are three parameters that we're going to pass to this function and then inside of here we can use these parameters so inside of this function again what we need to do is generate what symbols are going to be in each column based on the frequency of symbols that we have here so we essentially need to randomly pick the number of rows inside of each column so if we have three rows we need to pick three symbols that go inside of each of the columns that we have and for each column we're doing kind of a new random pick right a new random generation of the symbols now this can be a bit complicated now the easiest way to randomly select um values here for each of our columns is going to be to create a list that contains all of the different values we possibly could select from and then to randomly choose three of those values and when we choose a value we'll remove it from the list and then we'll choose again now what i'm going to do here is not going to be the most efficient algorithm but since we're dealing with small values this is fine so let's see how we work with this okay so what we're going to define here is all underscore symbols okay now this is going to be a list and what we're going to do is write a for loop that's going to add however many symbols we have here into the all symbols list so i'm going to say 4 and since we're iterating through a dictionary i can do the following i can say 4 symbol comma symbol underscore count and then this is going to be in symbols dot items now when you use dot items what this does is give you both the key and the value associated with a dictionary so i can get the key here and the value and i can just use both of them rather than looping through the dictionary only getting the keys and having to manually reference the values okay so now that i have the symbol and the symbol count i want to add this many symbols to the um what do you call it symbols list now there's a few different ways to go about doing this i think the easiest way to do this is going to be to run another for loop so that i don't confuse anyone so we're going to say 4 and then this is going to be let's do this i in range and then symbol underscore count and actually we don't even need i we're going to put underscore now this is an anonymous variable in python so whenever you need to say loop through something but you don't actually care about the count or the iteration value then you just put an underscore and then you don't have an unused variable anymore so i'm going to say for underscore and range symbol count i'm gonna say all underscore symbols dot and then this is gonna be append and i'm going to append whatever the symbol is so what's gonna happen here is i'm gonna loop through this dictionary let's imagine on the first key value pair my symbol is going to be a and my symbol count is going to be 2. all right so then i have another for loop inside of here where i'm looping through the symbol count so the symbol count is 2 and what i'm doing is doing this two times so i'm going to add this symbol twice into my all symbols list all right now that we have the all symbols list we need to select what values are going to go in every single column so how do we do this well let's make a for loop that is going to do this for every column so i'm going to say my columns is equal to a list and inside of here i'm going to place a bunch of lists which are going to contain all of the values inside of my columns now this may seem a little weird to any of you that have used a nested list before because typically when you write a nested list you kind of have all of the interior lists here that are representing your rows so if i had like 0 0 then these this would be the values that are in row 0 right or in the first row and then this would be the second row and etc however here we're doing it the other way around where each of these nested lists is going to represent the values in our column so keep that in mind i'll explain how this works in case any of you are a bit confused later on but i just want you to know that we're storing the columns not the rows inside of here okay so we have all of the symbols and now for each of the columns that we have uh we need to generate what is it the values inside of the columns and how many values do we need to generate well however many rows we have that's how many values we need so we're going to say 4 and this is going to be call in range and then calls like that and then we need to say 4 and this will be row in range rows okay so for every column we need to generate a certain number of symbols so inside of here i'm going to say that my column is equal to an empty list this is actually not going to have our columns inside of it i'm just was putting that there for an example and now i need to select a certain number number of values sorry from our all symbols list so let's see how we do this so we're going to say value is equal to random dot choice and i'm going to choose from all symbols now i can use random because i imported random here now what we're actually going to do though is we're not going to use the all symbols list we're going to use a copy of this and you'll see why but what we need to do is once we pick a value we need to remove it from this list so we can't choose that value again right so if there's only two a's we shouldn't be able to select three a's we should only be able to select at most two so if we select 1a we need to remove it so then the next selection doesn't have that as a chance so that means we need to make a copy of this all symbols list because if i start removing from this all symbols list then when i try to do the next column it's going to have values removed so that's what we need to do we need to make a copy so i'm going to say current underscore symbols is equal to all underscore symbols and the way you copy a list is you do this you put a colon here this operator here is referred to as the slice operator because if i just did this and made it equal to all symbols what happens is current symbols stores the same object as all symbols now that means anything i do to all symbols affects current symbols and anything i do to current symbols affects all symbols so this is not what we want we don't want what's referred to as a reference we want a copy so the way you do the copy is you put a colon here make sure you add this otherwise it's not going to work okay continuing here now what we're going to do is select from our current symbols and then we're going to remove whatever this value is from our current symbols list so we're going to set current underscore symbols dot remove and then value now when you do dot remove it's just going to find the first instance of this value in the list and get rid of it okay now that we've done that we want to add this value to our column so we're going to say column dot push and sorry not push i'm not in javascript right now i'm in python dot append the value all right and i just realized here we don't actually need the column and we don't need the row so we can just put underscores there now what we're going to do after this is we're going to say columns dot append and we are going to append our current column now let me run through this because i understand it's a little bit confusing we start by defining our columns list then we are going to generate a column for every single column that we have so if we have three columns we need to do everything inside of here three times that's why we have this first for loop then inside of here what all this code is doing is it's picking random values for each i guess row in our column right for each value that we're going to have so we say column is equal to an empty list we see our current symbols which are the ones we can currently select from is equal to a copy of all symbols then we loop through the number of values that we need to generate which is equal to the number of rows that we have in our slot machine then we say the first value we're going to get here or a value we're picking is random not choice current symbols this picks a random value from this list okay we then say current symbols dot remove the value so we don't pick it again and then we add the value to our column okay once all of that's done so this four loop is finished we now should have however many rows there are symbols inside of our column we now add our column to our columns list then finally we can go here and we can return our columns okay and remember that when we're looking at this list here every interior list gives us the value of the items inside of our column i know a little bit confusing this was quite a bit of logic especially if you're a beginner programmer but i told you i wanted to make this challenging enough to be interesting for you and show you some new stuff so don't worry if this doesn't make complete entire sense maybe read through this a few times pause the video go back and listen to the explanation again but this is you know how we generate the items that are going to be in our slot machine now that we have this we want a way to print this out we want to look at this because i can't even really test this yet until i can print out what's inside of all of my columns and i want to print this in like a nice way so i'm going to make a function here and say define print underscore slot machine and what we're going to take here is our columns now when we have our columns it's not really in a format that's easy for us to print because we have all of our columns kind of laid out as rows almost right like we have maybe actually this isn't going to be good but we would have like a b c and one maybe we have like a a a and again these are our columns not our rows so what i need to do is kind of flip these around so rather than having like a b c a a it would go a b c right in the first column and then this would say a a and then a like that i know that i kind of butchered this example the way that i wrote it out we need to change it from being this way to be this way right that's how we need to print it out so how are we going to do that well this operation is actually referred to as transposing because we have what's known as a matrix we don't need to get into all the fancy words but understand this is known as transposing so the way we're going to do this is we're going to write a for loop and we're going to say 4 and then this is going to be row in range and then we need to determine the number of rows that we have based on our columns now the number of rows that we have is the number of elements in each of our columns right so that's the number of vertical spaces we have so we need to look at a column and get the length of that so we're going to say the length of columns 0. now this assumes that we have at least one column and we should always have one column so it's fine to put this here but understand that if we did pass something that had no columns this would crash because there'd be no column at index 0 to access so i'm saying four row in range the line of columns 0. then what i'm going to do is i'm going to loop through all of my columns and only print the first value in it or whatever the index of my current row is again i'll explain this a second i know this is a bit confusing so i'm going to say 4 and this is going to be column in and then columns like that and when i do this now i'm looping through all of the items inside of columns so it's giving me every individual column so now that i have a column i'm just going to print the value that's at the first row of that column so i'm going to say print and then i'm going to print column at row and i'm just going to put a comma here and put a pipe operator and the reason i'm going to put a pipe operator is so we have some separation between the different items right now i just want to make sure though that i only put this pipe operator here if we're not printing the last column because if we're printing the last column then we don't want to have the pipe like off right we only want to have two pipes in the middle not one at the very end so the way i need to check this i need to say 4i comma column in enumerate columns now when you enumerate what this does is give you the index so 0 1 2 3 as you loop through as well as the item so now that i have i what i can actually do here is i can say there's a few ways to do this let's actually go back to this we'll say if i does not equal and then this is going to be the len of columns minus one we'll do this otherwise we'll print the same thing we just won't print the pipe now there's a bunch of different ways we could have done this but this is just the way that i think is going to be easiest so that's how we'll do it so the reason i'm checking if i is not equal to len of columns minus one is because the length of columns minus one is the maximum index we have to access an element in the columns list right if we have a columns list with three items the length is three the maximum index is 2. so if i is not equal to the maximum index print the pipe otherwise don't print the pipe that's how it's going to work okay so now we have print slot machine and get slot machine spin that's all this is all we need for printing the slot machine so we loop through every single row that we have for every single row we loop through every column and for every column we only print the current row that we're on so we're going to print um what is it row zero so all of the elements in row zero first then row one then row two and this essentially transposes or flips our columns from being this way to be vertical this way all right so let's try this now and then we'll kind of finish the program because we're actually getting quite close though all right so once we determine what they're betting down here what we need to do is generate the slot machine so we're going to say slot we'll save just slots is equal to and then this is what do we call this function we called it get slot machine spin okay so get underscore slot machine spin and then it auto filled this for me we're passing the rows columns and symbols so rows is all capitals actually calls is like this and the symbols i believe we called this the symbols count or we call it symbol count so let's go here and make that symbol count okay so now we should have all of the columns in our slot spin right that's what that did for us now what we need to do is we need to print this so we're going to say print slot machine and we're going to pass to this our slots and really this is the columns but i'm just calling them slots because each one is like what's in the slot right okay let's give this a shot guys there probably will be an error because that's usually what happens when you write this much code from scratch but let's see if this works okay so we are depositing let's deposit a hundred dollars enter the number of lines to bet on uh let's bet on two and then how much we like to bet on each line let's do ten dollars okay now already we got a bit of an error here because i forgot to do something which i'll add in a second but if i scroll here you can see that what's happening is we're printing everything correctly we're just not printing it on the same line which is what we need to do so ideally we want d a and d on the same line c b and c on the same line and b c and a on the same line so the way that we fix that my apologies here guys is we go back to print slot machine and here we add this thing called end equals and we just make this a um what do you call an empty string and in fact let's actually do this end is equal to a pipe with spaces all right so what end does is it tells the print statement what to end the line with now by default end is equal to what's known as the new line character or the return character or whatever you want to call this carriage return there's different names for it i call it the new line character now backslash n if you ever print this out it's what tells the console to go to the next line so we don't want to print that because if we print that at the end then that means that we move to the next line after every single row we only want to do this sorry after every single column we only want to do this after every single row so i'm going to change this to be a pipe so now we'll just print this pipe at the end of our print statement so after we print this here we're just not going to print anything and now we need one more check to see if we should go to the next line or not because every row we want to go down to the next line so i'm actually going to say here print and we can just do an empty print statement now by doing an empty print statement it just brings us down to the next line because it prints a new line character by default at the end of the empty print statement seems a bit weird that's kind of how this works we're going to print the first row this will go on the same line then we're going to print a new line character so it brings us down to the next line print the next row new line character next row new line character next row etc right so let's have a look at this now okay let's go here let's run how much you like to deposit a hundred dollars uh let's bet on two lines how much would you like to bet ten dollars and there we go now we have our slot machine excuse me and this is correct right so we have all of our columns uh and then all of our rows and what we'd now be checking is if we have three in a row right that's what we're going to have to check okay so we have our slot machine we've spun it we probably should have some input that asks like do you want to spin the slot machine and then they can hit spin blah blah be a bit more interactive but that's how it works and just be clear here we're going to check if we have three in a row and if we do based on the value of the symbol we're going to multiply their bet and then give them that amount all right so let's write a function that can do this now when we're checking if they won or not we need to know what their bet is which lines they bet on right and then we can actually check now the way the lines works again i know this is not exactly how like a real casino slot machine will work we're going to make it so that if you bet on one line you just bet on the top line if you bet on two lines you put on the top in the middle if you bet on three lines you bet on all three i'm not going to let the user pick like where the one line is they want to bet on we'll just say one is top two is both the top two three is all of them and that's how it'll work okay so let's do this let's go define check winnings okay now to do this we need the slot machine itself we need the lines so we're gonna say lines and we need the bet okay so how are we gonna do this well we just need to look at the rows that the user bet on so let's start with that and then we can check each row and determine a value also for the symbol so we're actually going to take one more thing we're going to say values now i'm also going to make the values here so i'm going to say symbol underscore value and i don't know what actually makes sense again to do for this but we're going to say that d is going to be a two times multiplier c is gonna be a three times multiplier this will be four and then this will be five so you know the more rare the symbol is the higher your bet gets multiplied again i don't think this is a fair slot machine but that's fine okay so check winnings now we have columns lines bet and value now let's look through only the rows that they bet on so the lines that they bet on so to do this we're going to say 4 and we'll say line in range then this is going to be lines like this now the reason this will work is because if they bet on one line then we're going to go up to one line but not include it so that means the line will be equal to zero right so if i bet one line then this is one and that means this is only ever going to be zero if they bet on two lines then line will go to zero and one so we'll check the zeroth row which is line one and the first row which is line two if they bet on all three lines then line will be zero then one then two so we'll check all three of those rows right and this will work dynamically even if there was more lines to bet on so inside this for loop we need to check that every single symbol in the line or row that we're checking is the same so we can get the first symbol that's in this row and then just make sure it's the same for the rest of the symbols so to do that we're going to say symbol is equal to columns 0 at the current line now the reason we're using columns 0 is because we have all of the columns not all of the rows it makes it a bit more complicated so we need to look at the first column because that's where the first symbol is always going to be for each row and then get whatever line we're on so first column and then either you know line 0 line one line two etc going down that first column gives us the first symbol and we're going to assume that we always have at least you know one reel right so at least one column so now that we have the symbol we're gonna loop through all of our columns so we're gonna say four column in columns like that now what we want to check so the symbol to underscore check is equal to the column at whatever row we're looking at so if we're looking at row 0 we're checking the first symbol in the column if we're looking at row one checking the second symbol in the column etc symbol to check we're then going to say if the symbol is equal to the symbol to check and actually we'll say if it is not equal to the symbol to check then we are going to break okay and the reason we're breaking is because if we found one of the symbols is not equal to the previous symbol uh or equal to all of the symbols that should be in this row then we just break out of the for loop and what we'll do is we'll put an else statement here and what this else statement will do is it will tell us if we didn't break out of the for loop so i'm sure you probably haven't seen this before but you can do a four else where if you break this else statement does not run but if no break occurs within the for loop then this else statement executes so in the else statement here what we'll do is we'll figure out how much they won so we'll say winnings is equal to zero okay and then here we're going to say winnings plus equals and then this is going to be the values at the symbol multiplied by the bet and then we can go here and return the winnings okay so let's look at this because i'm sure this is confusing we have every line in the lines which means we're looping through every row essentially that we're going to be checking that the user bet on we then say the symbol that we want to check is whatever symbol is in the first column of the current row because all of the symbols need to be the same right we then say 4 column in column so we now know the symbol that we're going to check now we need to loop through every single column and check for that symbol so we go to each column and we say the symbol to check is equal to the column at the current row that we are looking at so if it's row zero we're doing row zero if it's row one row one et cetera we then check if these symbols are not the same if they are not the same we break out which means that we're going to go check the next line because they didn't win because symbols were not the same if they are the same then we don't break and if we get to the end of this for loop and we've not broke out which means all of the symbols were the same then that means that the user won and what they won is whatever the multiplier is for that symbol times their bet right and this bet is the bet on each line not the total bet right so they could win on one line but lose on the other line that's how it works okay hopefully that's clear i can't explain it much more than that just understand symbol values here right uh gives us you know five four three two so that's what i'm using i'm saying values at whatever the symbol is multiplied by the bet that's how we're adding to the wings okay so that's it for determining how much they won so let's run the game one full time now and then we'll figure out how we can run it multiple times and reduce the balance and all that which is easier than what we just did okay so we print the slot machine and now we're going to say winnings is equal to and what did i call this check winnings okay check winnings we need to pass this our slots the number of lines so i think we called that lines right the bet which we have right here and the values which is called symbol values so let's go symbol underscore value all right then we're going to print u 1 and then whatever the amount is that they want so let's make this an f string okay and then you won and then this is going to be winnings like this and this could potentially be zero dollars right okay so i think that's good i'm thinking that we might want to also tell them how many lines they want on or what lines they want on so let's actually return that as well from this function so get uh check winnings we're going to do one more thing here we're going to say winning underscore lines is equal to an empty list and if they win we're going to say winning lines plus equals uh actually not plus equals dot append and then this is going to be whatever the current line number is but we're gonna have to add one to it because this is an index and we want like line one two three not zero one two so we say winning lines dot append line plus one then we go here and we put winning lines and now we're returning two values the total amount they won as well as what lines they want on okay now let's go here to winning lines and now we're going to say winnings and winning underscore lines you won these winnings and then we'll say u1 we'll print another line like this f u 1 on and then this is going to seem a little bit weird but i'm going to do asterisks and then i'm going to pass my winning lines now again i promised i was going to show you guys some new stuff so i'm showing you some advanced syntax here but what this does is actually called the splat operator or the unpack operator and it's going to pass every single line from this winning lines list to this print function so what that means is if we have lines like one and two it's going to pass both one and two so it's going to say u1 on and then one two so i'm going to say you want on lines like this and then it would say one space two we want on all three lines say one space two space three if we didn't want any lines then it's not going to say anything okay you'll see when when we print this out how this works so let's run this here let's make this full screen now and let's go through an example so deposit 100 how many lines four invalid okay let's bet on two lines how much would you like to bet on each line ten dollars all right so we won zero dollars because none of the symbols are the same so let's try again all right pause it hundred dollars uh two uh two lines sorry how much would you like to bet ten dollars you won zero dollars okay so this is going to happen a few times so rather than continuing to do this and hoping that we're going to win let's make it so we can run this multiple times without having to constantly rerun the program so we have this main function we have the balance and we have the lines now the balance is going to stay the same but all of this stuff here needs to happen multiple times right and we'll reduce from the balance and all that stuff so let's copy all of this into a function and let's say define let's say game okay we'll put this inside of here so this kind of executes one game now what we can do is write a while loop here and this while loop can kind of handle running the game all right so i'm just thinking here if we do this we need some way to determine like from this instance of the games like per spin so actually let's just say this is maybe spin we need to know how much they won or they lost so i'm just going to return here the winnings minus the total bet and that will tell us how much they won or lost from this spin because if they want 100 but they bet 15 then they only won 85 so then here we would update and we would add 85 right but if they didn't win anything then it's going to be negative whatever the total bet is so like 15 bucks so we'd subtract 15 from the balance okay so here i'm going to say well true and we'll print um current balance is and then we can just put comma actually let's do this as an f string so we can put a dollar sign current balance is and then we'll do dollar sign and then balance okay and then we'll play games we'll say spin equals input say press enter to spin okay so they'll press enter to spin so actually we don't even need to put a value here because we don't care what they type in or actually we can say this spin is equal to press enter to spin and we'll say q to quit so if they type in q then we'll quit so we can say if spin is equal to q then we will break the while loop which will just end the game okay otherwise we'll spin so we can say spin like that and we'll say balance plus equals spin so the way this works now is that spin is going to return to us however much they won or lost it will tell them like what they want or lost so then we'll just update the balance based on the result of that spin and then we'll run this again and say okay current balance is this press enter to spin blah blah and then when they spin they're going to have to enter this info and actually press enter to spin probably doesn't make sense to go here right because you only want to spin after you enter your information although we can just have this works we'll say press enter to to play that's fine and then they can do it inside of there uh okay now that we have that i think that's actually all that we need i'll just make one last print statement here that says u left with and then we'll put inside dollars and then this will be the balance and we'll put an f string here all right let's run this and give it a shot okay so run go here how much do you like to deposit let's suppose it a thousand dollars okay current balance is a thousand dollars press enter to play q to quit okay enter uh and we got an object here balance plus equals spin all right looks like we need to fix this so balance is equal to deposit balance plus equals spin we have winning lines subtracted by total bet and what is the problem all right so the issue here is that i accidentally have the name my function spin the same name as this right here so we're just going to change this to be answer so now this will work properly okay so my apologies guys let's go here and fix this and let's say thousand dollars current balance is a thousand press enter play okay enter the number of lines to bet on let's bet on two lines let's bet 10 bucks okay balance is not defined looks like we need to fix another error so what we need to pass here is balance to the spin function so that it can actually check this when we make a bet so of course that makes sense just forgot to do that so let's pass balance here and now we'll actually be able to check that all right so let's try it again third time's a charm hundred dollars current balance hundred dollars press enter to play okay number of lines let's go three let's go ten dollars and you are betting on ten dollars you're betting ten dollars on three lines total is equal to thirty dollars okay you want zero dollars you won onlines and it has an issue here on sport operands for list and int okay my apologies that's because i put winning lines this needs to be winnings all right fourth time's a charm so let's make sure our variable names are correct that was just a silly mistake let's clear and run hundred dollars enter three lines ten dollars okay you won zero dollars you won on lines your current balance is 70 okay let's play again three lines five dollars okay did we win anything no we did not all right let's play again i'd really like to try to win something but as we can see the slot machine is not in our favor today ten dollars you won zero dollars okay current balance is 25 all right three lines two dollars you won four dollars okay nice so how did we end up winning uh four dollars we bet two dollars and we got a line here of ds so that gave us uh times two multipliers so two times two four so we won four bucks there you go and then our balance get up gets updated sorry to 23 dollars because we were at 25 uh subtracted six add four yes okay so that makes sense all right so let's play again let's go three lines one dollar okay you won nothing let's play again three lines one dollar you want nothing three lines one dollar uh oops uh this is let's go three dollars you won nothing okay play again one line three dollars you won nothing all right well i won't continue to play but you get the point we've just created a slot machine and now if i hit q and enter we leave with 11 dollars all right so i think i'm gonna wrap it up there i'm gonna zoom out a bit so you guys can read more of this code i'll just kind of scroll through it i'll also put it in the description in case you want to reference it on github but you can see this is what we wrote so we did about 150 lines of code in i guess about an hour now i walked you through my thought process i showed you a bunch of different python features we did actually some fairly advanced logic in terms of looking through rows and columns and looking at nested lists i showed you about functions i showed you about the anonymous variable you saw this splat operator here and when we went on a line you saw it said we won on whatever the line number was so hopefully this was helpful to you guys hopefully this showed you kind of how to structure a program notice that we put everything in separate functions we've kind of spread our code out we've made it very readable and now we know if there's a bug anywhere it's really easy for us to go and kind of figure out where that is because we've separated everything into different units right different blocks of code anyways i will wrap it up here i hope you guys enjoyed this video if you like this style of teaching then make sure you check out programmingexpert.io and i look forward to seeing you in another youtube video
