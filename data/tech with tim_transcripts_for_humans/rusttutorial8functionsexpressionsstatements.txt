With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome to video 8
00:10 - in this rust programming tutorial series
00:13 - in this video i'll be going over
00:15 - functions specifically i'll be covering
00:17 - basic functions how you create them how
00:19 - you call them how you use them then i'm
00:21 - going to talk to you about statements
00:22 - versus expressions and then i'm going to
00:24 - describe how you return values from
00:26 - functions which is a little bit
00:27 - different in rust than it is in other
00:29 - programming languages with that said
00:32 - let's dive in here after i tell you to
00:33 - check out programmingexpert.io from the
00:36 - link in the description which is the
00:37 - best platform to use if you want to
00:38 - become a software engineer if you're
00:40 - already at this point in the tutorial
00:42 - series just go have a look at it let me
00:44 - know what you think and with that said
00:45 - let's dive in here to functions so we
00:48 - already have a function created in our
00:50 - program and this is the main function
00:52 - now this is a special function and we
00:54 - know it's going to be the entry point to
00:55 - our program and that's why we need to
00:57 - call it main and we need to have this in
00:59 - our main kind of source file here right
01:02 - however we can make our own functions in
01:04 - a similar way to how the main function
01:06 - is defined by using this fn keyword
01:08 - which stands for function so i'm going
01:10 - to do fn here and then i'm just going to
01:12 - do a test function so for now we can
01:14 - just do something basic like test but i
01:16 - do want to mention here that the naming
01:18 - convention for functions in rust is to
01:20 - use snake case so let's say i wanted to
01:22 - have something like test one this is how
01:24 - i would write it as opposed to using
01:26 - camel case which would be something like
01:28 - test one so use snake case like you
01:30 - would in python uh not camel case like
01:32 - you use in most other programming
01:34 - languages okay so with that said we have
01:36 - function test one or we can just go
01:38 - function test we're going to open up our
01:40 - curly braces like this and anything
01:42 - inside of the curly braces here will be
01:43 - executed when we call this function so
01:46 - this is the name of the function inside
01:48 - of the brackets we'd actually put any
01:49 - parameters which i'll talk about in a
01:51 - second and then inside of our curly
01:52 - braces we put the body of the function
01:54 - or what we want to execute when we run
01:56 - it so for now we can do something very
01:58 - basic where we say print line and we can
02:00 - just say test has
02:03 - been
02:04 - called
02:05 - dot dot
02:06 - okay so this is our test function now to
02:09 - use our test function we simply write
02:11 - the name of the function followed by our
02:13 - parentheses and then we're going to put
02:15 - a semicolon here and this will call the
02:17 - function calling a function just means
02:19 - we're going to execute the body of the
02:21 - function so we'll just print this now we
02:23 - can call function as many times as we'd
02:25 - like so we can call it twice like this
02:27 - we could call it before we print hello
02:28 - world and then this function will just
02:30 - run three times so that's kind of the
02:32 - benefit of functions we can reuse them
02:34 - and that's why we would make something
02:35 - into a function okay so let's go here
02:38 - and let's just run the code and make
02:40 - sure this works and notice i get test
02:42 - has been called hello world and then
02:43 - test has been called two times now one
02:46 - thing to note here is that it doesn't
02:47 - matter where you define this function
02:49 - russ does not care if you put it above
02:51 - or below the main function you can put
02:53 - it pretty well anywhere in the program
02:55 - and just to prove this to you here when
02:56 - i run the code it will still work even
02:58 - if it's above the main function and
03:00 - again as we saw when it's below the main
03:02 - function of course it works as well
03:04 - okay so that is the basics on creating a
03:06 - function this is a very very simple
03:08 - function right all we're doing is
03:10 - printing something out and a lot of
03:12 - times when we create a function we're
03:13 - doing this because we want to reuse some
03:15 - code and oftentimes we want to pass
03:18 - parameters or values to the function
03:20 - that it can then process and do
03:22 - something with so let's now delete this
03:24 - function here let's get rid of these
03:25 - calls and let's make a function that
03:27 - does something a little bit more useful
03:28 - maybe like adding a few numbers
03:30 - multiplying something hopefully you get
03:32 - the idea so for now i'm going to do
03:34 - something called add numbers okay
03:37 - and for this function i want to take in
03:38 - two parameters now parameters are just
03:40 - values that need to be passed to the
03:42 - function when we call it so in this case
03:45 - let's take in a number x and whenever we
03:47 - define a parameter here we need to
03:49 - specify the type of this parameter and
03:51 - in this case i'm going to say this is a
03:53 - not in 32 but an i-32 i also want to
03:56 - take in y and this will be an i-32 as
03:59 - well and then inside of here i'm going
04:00 - to say print line exclamation point i'm
04:03 - going to say the sum
04:06 - is and then i'm going to put my
04:07 - formatting in here and then i'm just
04:09 - going to put here x plus y
04:12 - okay so now we have a function that
04:14 - takes in two parameters and notice that
04:16 - i had to specify the type of these
04:18 - parameters right so that's mandatory
04:20 - when you are writing parameters for your
04:21 - function and you separate them with
04:24 - commas as well if you're going to have
04:25 - multiple parameters so i have x i 32 y i
04:28 - 32 and then i'm printing the sum is and
04:30 - then x plus one okay so let's call this
04:32 - function let's say add numbers now we
04:34 - know we need to pass two i-32 values so
04:37 - let's pass away like 20 and 30. and
04:40 - let's go here and let's clear and run
04:42 - the code and let's see what we get and
04:44 - notice we get the sum is 50. so it just
04:46 - adds those two numbers together and then
04:48 - prints that out there you go that is the
04:50 - basics on writing functions that accept
04:52 - parameters now of course we can pass
04:55 - more parameters as well so we could pass
04:56 - a parameter that isn't an i32 type as
04:58 - well so maybe zed and maybe this is
05:00 - something like f32 we'd have to deal
05:02 - with that f32 value we get the point we
05:05 - just have to write the name of the
05:06 - parameter followed by its type all right
05:08 - so now that i've discussed the basic
05:10 - function usage i want to walk you
05:12 - through something called statements and
05:13 - then compare that to something called an
05:15 - expression or expressions now you've
05:17 - probably heard these terms already but
05:19 - it's important to understand the
05:20 - difference here because rust functions
05:23 - can return an expression but they cannot
05:25 - return a statement we need to know what
05:27 - the difference between those two things
05:29 - are so a statement in rust is pretty
05:32 - much one of two things there's a few
05:33 - other things as well but for now we can
05:35 - just imagine the statement is going to
05:36 - be something like a variable declaration
05:39 - where i do something like let x equals
05:41 - 20. this is a statement this whole thing
05:44 - right here it ends in a semicolon and it
05:46 - doesn't evaluate to anything it doesn't
05:48 - return a value what i mean by that is i
05:50 - can't do something like let y equal and
05:53 - then if i put this in parenthesis here
05:55 - let x equals 20. in other programming
05:57 - languages you can actually do this for
05:59 - example in python you can do something
06:00 - like y equals x equals 20 but in rust
06:03 - you cannot and the reason for that is a
06:05 - let statement is a statement right it's
06:08 - not an expression and that means that
06:10 - this here doesn't return anything it's
06:12 - not equal to anything and i can't assign
06:15 - it to what so let y equals this will
06:17 - give me an error because this just
06:19 - doesn't make any sense in rust this
06:21 - itself doesn't return anything even
06:23 - though yes x is equal to 20.
06:25 - okay hopefully that makes a little bit
06:26 - of sense but that is what a statement is
06:29 - so let's hear these are statements they
06:31 - don't return anything we then have
06:33 - function declarations so when we
06:35 - actually write fn and then the name of
06:37 - the function and the parameters and all
06:38 - of that
06:39 - this is a statement this doesn't return
06:42 - something i can't do something like let
06:44 - x equals and then the function here
06:46 - whereas in other programming languages
06:48 - you could actually do that so keep that
06:49 - in mind if i try to do this
06:51 - that's not going to work because this is
06:53 - a statement not an expression
06:56 - okay so we have kind of the two basic
06:57 - things here that are statements so what
06:59 - is an expression well an expression is
07:01 - pretty much anything else that you write
07:03 - in rust that actually evaluates to
07:05 - something or returns a value so in this
07:07 - case a macro is actually an expression a
07:10 - function call is an expression 20 is an
07:13 - expression because 20 returned something
07:15 - it evaluates to something which allows
07:18 - me to store it in the variable x
07:20 - something like 2 less than 3
07:22 - this is an expression and this is an
07:24 - expression because it evaluates to true
07:26 - or false something like 2 plus 3 that's
07:28 - an expression pretty much anything else
07:30 - in rust that's actually going to return
07:32 - or give you a value is an expression and
07:34 - yes again for now all of our macros and
07:36 - our function calls we are going to
07:38 - imagine they are expressions
07:40 - okay now one other thing i'm going to
07:42 - show you that is also an expression that
07:44 - looks a bit weird is the following so
07:46 - let's actually just delete this and
07:47 - let's say let number equal to and then
07:51 - i'm just going to put kind of a block
07:53 - like this
07:55 - now this is actually an expression but
07:56 - i'll describe how this works in a second
07:58 - i'm going to say let x equals 3 and then
08:01 - i'm going to say x plus 1. so this here
08:04 - is an expression uh that will evaluate
08:06 - to x plus 1 which is actually 4 and then
08:09 - we will put 4 inside of number now i
08:11 - need to prove this to you because it
08:12 - looks a bit complicated but let's print
08:14 - line
08:16 - let's go here and let's print number and
08:18 - let me describe why this works
08:20 - let's also just get rid of add numbers
08:21 - for them so we know that let number here
08:23 - is a statement and actually let me just
08:25 - add my semicolons here so i don't forget
08:27 - and anyways this is a statement so let
08:28 - number this whole thing is a statement
08:30 - but inside of the statement we can have
08:32 - an expression and in this case we are
08:34 - assigning this expression to the value
08:38 - number to the variable number now the
08:40 - reason why this is an expression here is
08:42 - because it returns a value we start by
08:44 - having a statement inside of this
08:46 - expression we say let x equals three but
08:49 - then we have x plus one and x plus one
08:51 - returns the value four so it's kind of
08:53 - the same thing as just having a four
08:55 - here now notice i don't actually have a
08:57 - semicolon here it's important you don't
08:59 - have a semicolon i know this seems weird
09:00 - and you would intuitively want to put
09:02 - one there but i'm intentionally not
09:04 - putting a semicolon here and what that
09:06 - means is that i'm actually kind of
09:07 - returning the value 4 from this block
09:11 - right here which makes this whole thing
09:13 - an expression which i'm assigning to the
09:15 - variable number so i understand this is
09:17 - a bit weird if you've never seen
09:18 - anything like this before this is a
09:20 - pretty specific thing to rust at least
09:22 - from what i know but let me just go here
09:24 - to my my terminal and run the code and
09:26 - notice that we get hello world and we
09:28 - get four
09:29 - so this right is an expression because
09:31 - we have an expression at the end of it
09:33 - and that means whatever this value is is
09:35 - kind of being returned to this whole
09:37 - thing so let number is going to be equal
09:39 - to 4 right as we just saw
09:42 - so now i want to show you what happens
09:44 - when i add a semicolon to this last line
09:46 - now it's kind of unintuitive i wouldn't
09:48 - imagine this would change anything but
09:50 - it actually does and when i go here and
09:52 - i clear the screen and i rerun notice
09:54 - that we actually get an error and it
09:56 - says that this which is the default
09:58 - return value does not implement std fmt
10:01 - display you don't have to worry too much
10:03 - about what that means but essentially
10:05 - it's saying that this here didn't return
10:07 - anything it didn't actually give us a
10:09 - value and so we can't print that out
10:11 - whereas again if we change this to not
10:13 - have the semicolon now this is an
10:16 - expression as opposed to a statement if
10:18 - we added the semicolon and we're kind of
10:20 - returning this
10:21 - and able to use it
10:24 - as the value 4 number
10:26 - all right
10:27 - hopefully this makes a tiny tiny bit of
10:29 - sense now that we've looked at that
10:31 - though let's see how we actually return
10:33 - values from functions because we do it
10:35 - in a similar way to this
10:37 - so i'm going to clear all this
10:39 - i'm going to say function and let's just
10:40 - go with add numbers again
10:42 - let's take an x
10:44 - which is our i32
10:47 - and y which is going to be our i 32 as
10:50 - well
10:51 - and now what we need to do is specify
10:53 - what we're going to be returning from
10:54 - this function so this time rather than
10:56 - printing out what x plus y is i want to
10:59 - return it so to return it i can simply
11:01 - do x not quotation marks but plus y like
11:05 - that and this now turns this into an
11:08 - expression which is going to be returned
11:10 - from this function when it's called
11:12 - however i need to specify the return
11:14 - type just like i'm specifying the
11:16 - different types for the parameters here
11:18 - so to do that i'm going to put an arrow
11:20 - where i'm going to put this operator
11:22 - here which i believe is just like the
11:23 - return operator in rust and then i'm
11:25 - going to put the type that's going to be
11:27 - returned from this function which is i32
11:30 - so i'm specifying that i'm taking in x
11:31 - and y which are both i32 values and then
11:34 - returning an i32 value and the way that
11:36 - i'm returning this here is that i have
11:38 - an expression as the last statement of
11:40 - my function body and now what i can do
11:42 - is something like let
11:44 - result equal add not address
11:48 - add numbers i'll pass maybe two and
11:50 - three and then i can say print line and
11:54 - we can just print this out here
11:56 - and print result
11:58 - okay so let's go to our terminal here
12:00 - let's clear and run and we got an issue
12:03 - here oh we need a semicolon my apologies
12:06 - guys i always forget the damn semicolon
12:10 - let's run
12:11 - and notice we get hello world and we get
12:13 - five okay so that's how you return a
12:15 - value from a function you simply write
12:17 - an expression that you want to return at
12:19 - the very end of the function without a
12:21 - semicolon if you have a semicolon it's
12:23 - not going to work so make sure you don't
12:25 - have the semicolon
12:26 - now if i just want to return say the
12:28 - value 5 or the value 10 i could just
12:30 - literally write the value 10 right
12:32 - because this is an expression so if i
12:33 - write this now notice that i'm going to
12:35 - get these errors because i'm not using x
12:37 - or y but i still get 10 returned here uh
12:40 - the program doesn't crash it's just
12:41 - giving me sorry the warnings
12:44 - okay
12:44 - now just like we can do that so we can
12:46 - have you know x plus y right we can
12:48 - write an expression we can also
12:50 - explicitly use the return keyword in
12:53 - rust so i can say return x plus y and if
12:56 - i do this now i'm allowed to add the
12:58 - semicolon and i'll be returning whatever
13:00 - the result of this expression is so
13:02 - let's go here cargo run and then notice
13:05 - i get hello world n5 now i believe it
13:07 - doesn't matter if i add the semicolon or
13:09 - not so if i remove it here i should
13:10 - still get the same thing but when you
13:12 - explicitly use the return statement it's
13:14 - fine to uh to have the semicolon and in
13:17 - fact this is a statement that's going to
13:19 - return an expression from the function i
13:22 - know a lot of terminology here but it is
13:24 - important to understand before we go too
13:26 - much further okay so let's continue here
13:28 - and look at some more advanced examples
13:30 - so inside this function i can do
13:32 - something like let result equal x plus y
13:34 - this is a statement it's fine if i put
13:36 - that inside of the function but if i'm
13:38 - going to be returning a value i need to
13:40 - have an expression as the last line of
13:42 - the function so i'll just do here result
13:46 - and now this is the exact same thing
13:48 - that i had before so if i go and i run
13:51 - notice that i still get five this is the
13:53 - expression that's being returned at the
13:54 - end
13:55 - however i can get a little more
13:57 - complicated here and maybe we'll throw
13:58 - it in if statement and i'll do something
14:00 - like if result is greater than 10 then
14:03 - i'm just going to return
14:05 - the result
14:07 - like this
14:08 - minus 10 okay and we can put a semicolon
14:10 - there and i won't even put an else
14:12 - statement i'll just put result right
14:14 - here so now what i'm doing is i'm
14:15 - returning early from the function which
14:17 - i'm able to do by explicitly using the
14:19 - return statement and if the result is
14:21 - not greater than 10 then i'm just
14:23 - returning whatever the result is so
14:25 - let's make this greater than 10 now so
14:26 - let's go 12 and 3 so 15 so we should get
14:29 - five so if we go
14:31 - we clear
14:32 - and we run notice i get five now
14:35 - actually wasn't the best example because
14:36 - we got five last time but now if i
14:38 - change this to one and three
14:40 - and i clear and i run i get four
14:43 - hopefully this makes a tiny bit of sense
14:45 - but when you want to return early so not
14:47 - returning from the very last line of the
14:48 - function you use the return keyword
14:50 - otherwise you can just write an
14:52 - expression that you want to be returned
14:54 - from the function and then of course you
14:56 - can grab the value by saying something
14:57 - like let result is equal to and then the
14:59 - function call the function call is an
15:01 - expression so it evaluates to something
15:03 - or gives us a value and as you saw
15:05 - previously the default return value from
15:07 - a function is going to be just these
15:09 - kind of empty parentheses here so if you
15:12 - don't return anything from the function
15:14 - and you tried to say get the result of
15:16 - it then it would just give you these
15:17 - empty parentheses and you'll get all
15:19 - kinds of errors when you're trying to
15:20 - use those
15:21 - last thing let's see what happens if we
15:23 - don't manually specify the return type
15:25 - so we get rid of that we go cargo run
15:28 - notice we get an error here it says
15:29 - expected this found i32
15:32 - whatever it's just giving us you know an
15:34 - error because it's saying the expected
15:35 - default return value is nothing yet
15:37 - you're returning something from the
15:39 - function which you can't do unless you
15:41 - explicitly specify what it is that you'd
15:43 - like to return
15:45 - okay so with that said i think that's
15:47 - pretty much everything that i need to
15:48 - cover for functions
15:51 - there is some more advanced use cases of
15:52 - course but for now this is really all
15:54 - you need to know just remember that
15:56 - function declarations uh stuff like
15:58 - return statements and let statements are
16:00 - statements they are not expressions and
16:02 - when you want to return something from a
16:04 - function you can simply write an
16:06 - expression without a semicolon
16:08 - or you can manually use the return
16:10 - statement you also need to specify the
16:12 - types for the parameters as well as for
16:15 - the return value of the function
16:17 - with that said if you guys enjoyed make
16:19 - sure to leave a like subscribe to the
16:21 - channel and i will see you in another
16:22 - rust programming tutorial
16:24 - [Music]

Cleaned transcript:

hello everybody and welcome to video 8 in this rust programming tutorial series in this video i'll be going over functions specifically i'll be covering basic functions how you create them how you call them how you use them then i'm going to talk to you about statements versus expressions and then i'm going to describe how you return values from functions which is a little bit different in rust than it is in other programming languages with that said let's dive in here after i tell you to check out programmingexpert.io from the link in the description which is the best platform to use if you want to become a software engineer if you're already at this point in the tutorial series just go have a look at it let me know what you think and with that said let's dive in here to functions so we already have a function created in our program and this is the main function now this is a special function and we know it's going to be the entry point to our program and that's why we need to call it main and we need to have this in our main kind of source file here right however we can make our own functions in a similar way to how the main function is defined by using this fn keyword which stands for function so i'm going to do fn here and then i'm just going to do a test function so for now we can just do something basic like test but i do want to mention here that the naming convention for functions in rust is to use snake case so let's say i wanted to have something like test one this is how i would write it as opposed to using camel case which would be something like test one so use snake case like you would in python uh not camel case like you use in most other programming languages okay so with that said we have function test one or we can just go function test we're going to open up our curly braces like this and anything inside of the curly braces here will be executed when we call this function so this is the name of the function inside of the brackets we'd actually put any parameters which i'll talk about in a second and then inside of our curly braces we put the body of the function or what we want to execute when we run it so for now we can do something very basic where we say print line and we can just say test has been called dot dot okay so this is our test function now to use our test function we simply write the name of the function followed by our parentheses and then we're going to put a semicolon here and this will call the function calling a function just means we're going to execute the body of the function so we'll just print this now we can call function as many times as we'd like so we can call it twice like this we could call it before we print hello world and then this function will just run three times so that's kind of the benefit of functions we can reuse them and that's why we would make something into a function okay so let's go here and let's just run the code and make sure this works and notice i get test has been called hello world and then test has been called two times now one thing to note here is that it doesn't matter where you define this function russ does not care if you put it above or below the main function you can put it pretty well anywhere in the program and just to prove this to you here when i run the code it will still work even if it's above the main function and again as we saw when it's below the main function of course it works as well okay so that is the basics on creating a function this is a very very simple function right all we're doing is printing something out and a lot of times when we create a function we're doing this because we want to reuse some code and oftentimes we want to pass parameters or values to the function that it can then process and do something with so let's now delete this function here let's get rid of these calls and let's make a function that does something a little bit more useful maybe like adding a few numbers multiplying something hopefully you get the idea so for now i'm going to do something called add numbers okay and for this function i want to take in two parameters now parameters are just values that need to be passed to the function when we call it so in this case let's take in a number x and whenever we define a parameter here we need to specify the type of this parameter and in this case i'm going to say this is a not in 32 but an i32 i also want to take in y and this will be an i32 as well and then inside of here i'm going to say print line exclamation point i'm going to say the sum is and then i'm going to put my formatting in here and then i'm just going to put here x plus y okay so now we have a function that takes in two parameters and notice that i had to specify the type of these parameters right so that's mandatory when you are writing parameters for your function and you separate them with commas as well if you're going to have multiple parameters so i have x i 32 y i 32 and then i'm printing the sum is and then x plus one okay so let's call this function let's say add numbers now we know we need to pass two i32 values so let's pass away like 20 and 30. and let's go here and let's clear and run the code and let's see what we get and notice we get the sum is 50. so it just adds those two numbers together and then prints that out there you go that is the basics on writing functions that accept parameters now of course we can pass more parameters as well so we could pass a parameter that isn't an i32 type as well so maybe zed and maybe this is something like f32 we'd have to deal with that f32 value we get the point we just have to write the name of the parameter followed by its type all right so now that i've discussed the basic function usage i want to walk you through something called statements and then compare that to something called an expression or expressions now you've probably heard these terms already but it's important to understand the difference here because rust functions can return an expression but they cannot return a statement we need to know what the difference between those two things are so a statement in rust is pretty much one of two things there's a few other things as well but for now we can just imagine the statement is going to be something like a variable declaration where i do something like let x equals 20. this is a statement this whole thing right here it ends in a semicolon and it doesn't evaluate to anything it doesn't return a value what i mean by that is i can't do something like let y equal and then if i put this in parenthesis here let x equals 20. in other programming languages you can actually do this for example in python you can do something like y equals x equals 20 but in rust you cannot and the reason for that is a let statement is a statement right it's not an expression and that means that this here doesn't return anything it's not equal to anything and i can't assign it to what so let y equals this will give me an error because this just doesn't make any sense in rust this itself doesn't return anything even though yes x is equal to 20. okay hopefully that makes a little bit of sense but that is what a statement is so let's hear these are statements they don't return anything we then have function declarations so when we actually write fn and then the name of the function and the parameters and all of that this is a statement this doesn't return something i can't do something like let x equals and then the function here whereas in other programming languages you could actually do that so keep that in mind if i try to do this that's not going to work because this is a statement not an expression okay so we have kind of the two basic things here that are statements so what is an expression well an expression is pretty much anything else that you write in rust that actually evaluates to something or returns a value so in this case a macro is actually an expression a function call is an expression 20 is an expression because 20 returned something it evaluates to something which allows me to store it in the variable x something like 2 less than 3 this is an expression and this is an expression because it evaluates to true or false something like 2 plus 3 that's an expression pretty much anything else in rust that's actually going to return or give you a value is an expression and yes again for now all of our macros and our function calls we are going to imagine they are expressions okay now one other thing i'm going to show you that is also an expression that looks a bit weird is the following so let's actually just delete this and let's say let number equal to and then i'm just going to put kind of a block like this now this is actually an expression but i'll describe how this works in a second i'm going to say let x equals 3 and then i'm going to say x plus 1. so this here is an expression uh that will evaluate to x plus 1 which is actually 4 and then we will put 4 inside of number now i need to prove this to you because it looks a bit complicated but let's print line let's go here and let's print number and let me describe why this works let's also just get rid of add numbers for them so we know that let number here is a statement and actually let me just add my semicolons here so i don't forget and anyways this is a statement so let number this whole thing is a statement but inside of the statement we can have an expression and in this case we are assigning this expression to the value number to the variable number now the reason why this is an expression here is because it returns a value we start by having a statement inside of this expression we say let x equals three but then we have x plus one and x plus one returns the value four so it's kind of the same thing as just having a four here now notice i don't actually have a semicolon here it's important you don't have a semicolon i know this seems weird and you would intuitively want to put one there but i'm intentionally not putting a semicolon here and what that means is that i'm actually kind of returning the value 4 from this block right here which makes this whole thing an expression which i'm assigning to the variable number so i understand this is a bit weird if you've never seen anything like this before this is a pretty specific thing to rust at least from what i know but let me just go here to my my terminal and run the code and notice that we get hello world and we get four so this right is an expression because we have an expression at the end of it and that means whatever this value is is kind of being returned to this whole thing so let number is going to be equal to 4 right as we just saw so now i want to show you what happens when i add a semicolon to this last line now it's kind of unintuitive i wouldn't imagine this would change anything but it actually does and when i go here and i clear the screen and i rerun notice that we actually get an error and it says that this which is the default return value does not implement std fmt display you don't have to worry too much about what that means but essentially it's saying that this here didn't return anything it didn't actually give us a value and so we can't print that out whereas again if we change this to not have the semicolon now this is an expression as opposed to a statement if we added the semicolon and we're kind of returning this and able to use it as the value 4 number all right hopefully this makes a tiny tiny bit of sense now that we've looked at that though let's see how we actually return values from functions because we do it in a similar way to this so i'm going to clear all this i'm going to say function and let's just go with add numbers again let's take an x which is our i32 and y which is going to be our i 32 as well and now what we need to do is specify what we're going to be returning from this function so this time rather than printing out what x plus y is i want to return it so to return it i can simply do x not quotation marks but plus y like that and this now turns this into an expression which is going to be returned from this function when it's called however i need to specify the return type just like i'm specifying the different types for the parameters here so to do that i'm going to put an arrow where i'm going to put this operator here which i believe is just like the return operator in rust and then i'm going to put the type that's going to be returned from this function which is i32 so i'm specifying that i'm taking in x and y which are both i32 values and then returning an i32 value and the way that i'm returning this here is that i have an expression as the last statement of my function body and now what i can do is something like let result equal add not address add numbers i'll pass maybe two and three and then i can say print line and we can just print this out here and print result okay so let's go to our terminal here let's clear and run and we got an issue here oh we need a semicolon my apologies guys i always forget the damn semicolon let's run and notice we get hello world and we get five okay so that's how you return a value from a function you simply write an expression that you want to return at the very end of the function without a semicolon if you have a semicolon it's not going to work so make sure you don't have the semicolon now if i just want to return say the value 5 or the value 10 i could just literally write the value 10 right because this is an expression so if i write this now notice that i'm going to get these errors because i'm not using x or y but i still get 10 returned here uh the program doesn't crash it's just giving me sorry the warnings okay now just like we can do that so we can have you know x plus y right we can write an expression we can also explicitly use the return keyword in rust so i can say return x plus y and if i do this now i'm allowed to add the semicolon and i'll be returning whatever the result of this expression is so let's go here cargo run and then notice i get hello world n5 now i believe it doesn't matter if i add the semicolon or not so if i remove it here i should still get the same thing but when you explicitly use the return statement it's fine to uh to have the semicolon and in fact this is a statement that's going to return an expression from the function i know a lot of terminology here but it is important to understand before we go too much further okay so let's continue here and look at some more advanced examples so inside this function i can do something like let result equal x plus y this is a statement it's fine if i put that inside of the function but if i'm going to be returning a value i need to have an expression as the last line of the function so i'll just do here result and now this is the exact same thing that i had before so if i go and i run notice that i still get five this is the expression that's being returned at the end however i can get a little more complicated here and maybe we'll throw it in if statement and i'll do something like if result is greater than 10 then i'm just going to return the result like this minus 10 okay and we can put a semicolon there and i won't even put an else statement i'll just put result right here so now what i'm doing is i'm returning early from the function which i'm able to do by explicitly using the return statement and if the result is not greater than 10 then i'm just returning whatever the result is so let's make this greater than 10 now so let's go 12 and 3 so 15 so we should get five so if we go we clear and we run notice i get five now actually wasn't the best example because we got five last time but now if i change this to one and three and i clear and i run i get four hopefully this makes a tiny bit of sense but when you want to return early so not returning from the very last line of the function you use the return keyword otherwise you can just write an expression that you want to be returned from the function and then of course you can grab the value by saying something like let result is equal to and then the function call the function call is an expression so it evaluates to something or gives us a value and as you saw previously the default return value from a function is going to be just these kind of empty parentheses here so if you don't return anything from the function and you tried to say get the result of it then it would just give you these empty parentheses and you'll get all kinds of errors when you're trying to use those last thing let's see what happens if we don't manually specify the return type so we get rid of that we go cargo run notice we get an error here it says expected this found i32 whatever it's just giving us you know an error because it's saying the expected default return value is nothing yet you're returning something from the function which you can't do unless you explicitly specify what it is that you'd like to return okay so with that said i think that's pretty much everything that i need to cover for functions there is some more advanced use cases of course but for now this is really all you need to know just remember that function declarations uh stuff like return statements and let statements are statements they are not expressions and when you want to return something from a function you can simply write an expression without a semicolon or you can manually use the return statement you also need to specify the types for the parameters as well as for the return value of the function with that said if you guys enjoyed make sure to leave a like subscribe to the channel and i will see you in another rust programming tutorial
