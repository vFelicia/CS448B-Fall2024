With timestamps:

00:00 - hello everybody and welcome back to the
00:01 - JavaScript tutorials so in this video
00:03 - we're gonna be talking about operators
00:05 - and we're mostly gonna be focusing on
00:07 - logical and assignment operators but
00:09 - there is another kind of operator called
00:10 - a compared comparison operator and
00:12 - bitwise operator which we may touch on
00:15 - in later videos now what is an operator
00:18 - well essentially an operator is
00:19 - something that allows us to perform some
00:22 - operation on data or on operands now to
00:25 - demonstrate this to you I'm just gonna
00:27 - start by declaring two variables I'm
00:29 - gonna set X equal to 10 I'm gonna set
00:31 - VAR y equal to 5 now someone was
00:35 - mentioning to me in previous tutorials
00:37 - that I do not need these semicolons so
00:39 - apparently you don't need those while
00:40 - you're actually writing your JavaScript
00:42 - code I'm just so used to the other
00:43 - languages I write in that need the
00:45 - semicolon so anyways not something to
00:47 - note you don't need to add those but by
00:49 - habit I probably will the benefit of
00:51 - adding these though is that if you do
00:52 - that you can actually assign or do more
00:54 - than one thing in the same line so for
00:56 - example if I want to define another
00:57 - variable Zed and I didn't want to do it
00:59 - on a new line as long as I'm separating
01:01 - these statements by semicolons I'm
01:02 - actually able to do that okay so anyways
01:05 - let's continue now all right so let's
01:08 - just get in and talk about what the
01:09 - operators are and what they do they're
01:12 - pretty straightforward I'm certain most
01:13 - of you will understand so what I'm gonna
01:15 - do is create a variable called Z and
01:17 - what I want to do is I want to store the
01:19 - result of the addition between x and y
01:21 - now I'm sure you guys can guess how you
01:22 - do this X plus 1 in this instance our
01:25 - operator is called plus or the addition
01:28 - operator which is right here and our
01:29 - operands are x and y and that is you
01:33 - know the basics of doing this of what
01:35 - operators are anyways what I'm gonna do
01:38 - is just log my results to the console
01:40 - here so you guys can see it so let's
01:42 - refresh that we get the value 15 and you
01:45 - know we're certain now that this
01:46 - addition operator is working now I'll go
01:48 - through a few other operators pretty
01:50 - quickly just because it says fairly
01:51 - straightforward so we obviously have our
01:53 - subtraction operator which is gonna do a
01:55 - subtraction between x and y so our
01:57 - values 5 here we also have our
01:59 - multiplication operator which is an
02:00 - asterisk so that's above the 8 on your
02:02 - keyboard that's obviously going to do
02:04 - multiplication so 50s our answer there
02:06 - we have our division operator which is
02:08 - simply 1 slash this will do our division
02:11 - give us a value of 2
02:12 - and we have one more operator that I'm
02:15 - sure a lot of you may have seen before
02:17 - which is called modulus now I'm gonna
02:20 - stick on this one for a second just
02:21 - because a lot of people get confused
02:23 - with this operator what this operator
02:25 - does is give you the remainder of a
02:27 - division so if you remember back to
02:29 - elementary school when you didn't really
02:31 - deal with decimal numbers when you used
02:33 - to divide two numbers what you would do
02:35 - is figure out how many times the divisor
02:37 - or whatever I guess the thing is that's
02:39 - going into the number can go into it and
02:41 - then you would calculate a remainder so
02:42 - to give you an example let me just
02:44 - change our values here so we do
02:46 - something like ten divided by four and
02:47 - we say we're not allowed to use decimals
02:49 - we're only allowed to use whole numbers
02:50 - for finding the answer this one our
02:52 - answer is gonna be is okay how many
02:54 - times can 4 go into ten before can go in
02:56 - twice so that means we're gonna have
02:58 - automatically we know we're gonna have
02:59 - two as our starting number and now we
03:01 - know it's gonna be like two point four
03:03 - two or something like that but the thing
03:05 - is we can't use decimal numbers so we
03:07 - say well we can divide it by two and we
03:09 - have a remainder of two and that is our
03:12 - answer to this question so what this
03:13 - modulus operator does is give you the
03:15 - remainder aspect of any division so in
03:18 - this case we know the remainder is gonna
03:19 - be two so let's actually run this and
03:21 - see our remainder is two I'm know it
03:23 - didn't change but anyways let's change
03:25 - this to three now and I'll show you so
03:27 - if I can do ten divided by three what's
03:29 - my answer gonna be well how many times
03:30 - can 3 go into 10 it can go in three
03:32 - times that's a value of 9 10 minus 9 is
03:35 - 1 remainder is 1 and there we go our
03:37 - remainder is 1 so that's what this
03:39 - operator does if you're confused by it
03:41 - literally just think ok let's you know
03:44 - figure out how many times this number
03:46 - can go into it and then what's left over
03:48 - after that it's actually very useful and
03:49 - there's a lot of instances where you may
03:50 - want to use it ok so that is sweet so
03:54 - now let me show you though and I'm
03:56 - actually gonna ask the question here
03:58 - since I've done you know X modulus wire
04:01 - I've done X plus y or whatever like this
04:02 - and stored it in the value Z do the
04:04 - values of x and y change here are they
04:07 - changing as we do this now think about
04:09 - your answer I'm gonna print them out and
04:10 - I will show you guys and explain why
04:12 - they don't change okay so let's run this
04:14 - there we go so we have 13 10 and 3 Oh
04:18 - zoom out a little bit and obviously we
04:20 - can see that the value of x and the
04:21 - value of y did not change after we
04:23 - perform this Opera
04:25 - and the reason they did not change is
04:27 - because I am actually not changing the
04:28 - values of x and y here I'm simply
04:31 - getting them by writing them and storing
04:33 - the results of their addition in the
04:35 - variable Z so the only variable that's
04:36 - gonna be changed or declared is gonna be
04:39 - the variable Z even if I decide to do
04:42 - something like X plus y here you know
04:44 - we'll add our semicolon and we run this
04:45 - again we can see that those values still
04:47 - aren't changing because we haven't told
04:49 - X&Y to change we've simply got the
04:51 - result of their addition so what if we
04:54 - want to change x and y and perform some
04:56 - kind of operation on them so let's get
04:58 - rid of all this and let's talk about how
05:00 - we can do this now so actually there's
05:02 - another kind of kind of assignment
05:04 - operator that we have that has to deal
05:06 - with these logical operators too which
05:08 - is something called plus equals now what
05:11 - X plus equals is gonna do is say X is
05:14 - going to be equal to X plus whatever
05:17 - value I put on this right side here so
05:19 - in this case if I put five and I got
05:21 - console.log and we put X now X is going
05:25 - to be changed to be 15 the reason again
05:27 - is because what this is doing is when I
05:29 - say plus equals rather than just plus
05:31 - it's gonna say alright X is gonna be
05:33 - equal to whatever it was before plus
05:35 - five let's run this there we go we can
05:38 - see now we are printing out 15 now this
05:40 - works the same for all our other logical
05:42 - operators so minus equals obviously
05:44 - works as well we get our value of five
05:46 - we can do x equals that's going to give
05:48 - us 50 we can do divide it equally and we
05:55 - can do modulus equals which is actually
05:57 - just gonna give us zero and the reason
05:59 - that's giving us zero is again because
06:01 - five can evenly divide ten so there is
06:02 - no remainder to that division awesome so
06:05 - that is how those work now
06:07 - I'll do the next example with why just
06:09 - because why not and essentially what we
06:12 - can do here is increment or decrement Y
06:14 - so as another operator called increment
06:16 - and another one called decrement
06:18 - increment is plus plus and decrement is
06:21 - - - now increment simply means add 1
06:25 - very easy really straightforward and if
06:27 - I run this now we can see that Y gives
06:29 - us a value of 4 rather than 3 because
06:31 - this plus plus simply adds 1 and stores
06:34 - that in the value Y rather than if I
06:36 - were to do y
06:37 - one like this you can see the value of Y
06:41 - actually doesn't change all right
06:43 - so y plus plus we know how that works
06:44 - what about y minus - well this is a
06:46 - decrementing so simply subtracting one
06:49 - that gives us the value of two and those
06:51 - are our logical operators
06:54 - now these operators only work on numbers
06:58 - or at least most of them only work on
07:00 - numbers and I'm going to talk about the
07:01 - specifics now all right so let's define
07:03 - a variable which is a string let's just
07:05 - call it STR is why not and let's call
07:08 - this string hello now what do you think
07:10 - I'm gonna get if I try to do STR plus X
07:14 - well actually in this instance that'll
07:16 - work but let's do something like this
07:19 - var Z equals and STR plus X let's see
07:24 - what happens when I print is that what
07:28 - do you guys think we're gonna get here
07:29 - all right so let's run this and you can
07:31 - see we get hello 10 now whenever we have
07:34 - a string and a number and we're adding
07:37 - them together what ends up happening is
07:39 - we simply convert the number to a string
07:41 - and just mush it together with whatever
07:44 - that string is so what we've done here
07:45 - is we said okay we're gonna have hello
07:47 - we're gonna add that to 10 well
07:50 - obviously these are not both numbers so
07:52 - we can't get some logical answer that
07:54 - makes sense so what we'll do is we'll
07:55 - convert 10 to a string and we'll just
07:57 - kind of append it and put it on the end
07:59 - of hello and that's exactly how that
08:01 - works and this is another thing that we
08:03 - call string can cap concatenation now
08:06 - concatenation is typically done between
08:07 - two strings but I guess it works here
08:09 - with a number because we just convert
08:10 - them into numbers now let me show you
08:12 - what happens if I do something like STR
08:13 - 2 equals hello world and let's now
08:18 - actually get rid of this value Z and
08:20 - let's simply do STR plus STR 2
08:23 - well you can guess based on what
08:25 - happened when we added 10 to this string
08:27 - what our result is gonna be well in this
08:29 - case what we're gonna do is simply have
08:31 - hello and then we're just gonna mush
08:32 - world right beside it we're gonna
08:34 - concatenate them join them together and
08:36 - that's gonna be a result which is gonna
08:38 - be hello world and this obviously is
08:40 - gonna be on one line let me zoom out and
08:43 - with no spaces if we wanted a space all
08:45 - we'd have to do is add a space there or
08:46 - out of space there so if I run this we
08:49 - can see we get hello world so that's
08:51 - useful to know
08:51 - especially when you're printing
08:52 - different things out but it also means
08:54 - you know you can mush two strings
08:55 - together and all that's gonna happen is
08:57 - you can take the one string that your
08:59 - bass string and you're just gonna add
09:00 - the other string directly to the end of
09:02 - it again spaces you have to add them
09:04 - yourself if you'd like them to exist and
09:06 - that is called string concatenation okay
09:08 - so that is cool it's not exactly what I
09:12 - wanted to show but I also want to talk
09:14 - about you know what happens if I try to
09:15 - do something like hello minus three well
09:18 - what is this gonna give us so this is
09:21 - not a concatenation because we're not
09:22 - joining two strings we're not combining
09:24 - them together with that plus sign so
09:26 - what is this gonna give us well let's
09:28 - refresh this and we get an error str2 is
09:31 - not the phone okay well let's just get
09:34 - rid of str two for a second and let's
09:36 - run this okay run nan what is that
09:41 - well this essentially means that we
09:42 - cannot do this operation whenever we try
09:45 - to do an operation like this in
09:46 - JavaScript rather than actually just
09:48 - crashing which is nice
09:49 - we're just gonna get this nan which
09:51 - simply stand for you know this we don't
09:52 - have there's no answer this we don't
09:54 - know what the answer this is you can't
09:55 - do that same thing if I try actually
09:58 - multiplication might work let's see
09:59 - I know multiplication doesn't work in
10:01 - this so when we do the multiplication we
10:03 - get nan as well which is saying you know
10:05 - I don't know how to multiply a string by
10:07 - three so I can't give you an answer to
10:09 - that state same thing obviously if we
10:11 - try to do something like dividing a
10:13 - string we can't do that
10:14 - this division operator only works
10:16 - between numbers so we're getting that
10:18 - nan value all right so that is kind of
10:20 - how that works I wanted to show that
10:23 - obviously you know if you try to use an
10:24 - operator that can't be used on a string
10:26 - you're going to get an issue in this
10:28 - case you're not getting an error we're
10:29 - not crashing the program but it's simply
10:30 - saying that we can't evaluate this
10:32 - statement we don't know the answer to it
10:34 - so we get that nan value awesome now
10:36 - let's just show a few other examples
10:38 - here and how we can kind of add multiple
10:40 - things together all right so when using
10:42 - operations the order of operations is
10:45 - important and that's something I want to
10:46 - talk about so what I'm gonna do is I
10:48 - should will clear these out and we'll
10:50 - just save our result equals and now
10:54 - we're just gonna start typing actually
10:56 - an expression that we can evaluate so
10:58 - what I'm gonna do is simply do something
11:00 - like four times five over three plus
11:03 - nine
11:04 - - now obviously you know this isn't the
11:06 - easiest thing to compute in your head so
11:08 - we'll log the result but what I want to
11:12 - demonstrate is the fact that order of
11:14 - operations apply in computers just like
11:16 - they apply when you're doing regular
11:17 - mathematics so essentially we start
11:19 - reading from left to right and we apply
11:22 - bed bass which is the rule that I kind
11:24 - of learned the acronym for this so we
11:26 - have B and I hope this doesn't keep Otto
11:29 - completing D mas now with this stands
11:33 - for is brackets exponents division
11:39 - multiplication addition and subtraction
11:42 - I won't actually area why not
11:44 - multiplication addition and subtraction
11:50 - and we'll just add the M there okay so
11:52 - this is the order of operations that we
11:54 - need to follow not sure if I spelled all
11:55 - these right but regardless and let's
11:57 - actually put these in a multi-line
11:58 - comment to make sure that we can leave
12:00 - those here this essentially means we're
12:02 - going to follow this order of operation
12:04 - we're going to look if there's any
12:05 - brackets if there is we're going to
12:06 - evaluate what's in the brackets then
12:08 - we're gonna do any exponents that we
12:09 - have then any division than any
12:11 - multiplication then any addition then
12:13 - subtraction which means that this part
12:15 - of our statement is gonna happen first
12:17 - so I mean we can look at this and see
12:19 - what we get is our answer
12:20 - we're getting 13 Wow okay some crazy
12:23 - number like that but what if I want to
12:26 - change the result of this what if I want
12:28 - to you know do all of this addition and
12:31 - subtraction before I decide to divide
12:33 - you know 20 by whatever this result is
12:35 - well if I want to do that I can just add
12:37 - some brackets around this and now since
12:40 - these are in brackets we're gonna follow
12:41 - our order for operations and do that
12:43 - first and notice that our answer should
12:45 - change and it does it changes to two so
12:48 - that is you know exactly how this works
12:50 - we can put things in brackets if we want
12:52 - to define when they're gonna be operated
12:54 - on so this needs to happen before this
12:56 - is divided by that and we can do the
12:58 - same thing here where if we wanted to do
12:59 - you know five divided by all of this and
13:02 - then multiplied by four let's have a
13:04 - look at what that answer is gonna be and
13:05 - that answer is still gonna be cheap
13:07 - because obviously that's not gonna
13:08 - change whether what order we put that in
13:10 - so yeah that is kind of how this works
13:12 - that is how operations work that's how
13:14 - operators work obviously you can do
13:16 - string operators and I guess
13:17 - last thing to show is just like don't
13:20 - say hi like this I did something you
13:22 - know like X plus plus or X plus equal
13:25 - sorry I can do string plus equals in
13:27 - this case let's just go hi again
13:30 - let's go console.log STR will add my
13:35 - semicolon there to be consistent and
13:36 - let's run this and you can see we get
13:38 - high hot so strings you can use the plus
13:41 - operator on you can use plus equals you
13:43 - can concatenate and join those strings
13:45 - together and then numbers the other
13:46 - series of operations like subtraction
13:48 - division multiplication addition modulus
13:51 - all of those anyways that has been it
13:52 - for logical operators in the next video
13:54 - we get into comparison operators and I
13:55 - will see you guys there

Cleaned transcript:

hello everybody and welcome back to the JavaScript tutorials so in this video we're gonna be talking about operators and we're mostly gonna be focusing on logical and assignment operators but there is another kind of operator called a compared comparison operator and bitwise operator which we may touch on in later videos now what is an operator well essentially an operator is something that allows us to perform some operation on data or on operands now to demonstrate this to you I'm just gonna start by declaring two variables I'm gonna set X equal to 10 I'm gonna set VAR y equal to 5 now someone was mentioning to me in previous tutorials that I do not need these semicolons so apparently you don't need those while you're actually writing your JavaScript code I'm just so used to the other languages I write in that need the semicolon so anyways not something to note you don't need to add those but by habit I probably will the benefit of adding these though is that if you do that you can actually assign or do more than one thing in the same line so for example if I want to define another variable Zed and I didn't want to do it on a new line as long as I'm separating these statements by semicolons I'm actually able to do that okay so anyways let's continue now all right so let's just get in and talk about what the operators are and what they do they're pretty straightforward I'm certain most of you will understand so what I'm gonna do is create a variable called Z and what I want to do is I want to store the result of the addition between x and y now I'm sure you guys can guess how you do this X plus 1 in this instance our operator is called plus or the addition operator which is right here and our operands are x and y and that is you know the basics of doing this of what operators are anyways what I'm gonna do is just log my results to the console here so you guys can see it so let's refresh that we get the value 15 and you know we're certain now that this addition operator is working now I'll go through a few other operators pretty quickly just because it says fairly straightforward so we obviously have our subtraction operator which is gonna do a subtraction between x and y so our values 5 here we also have our multiplication operator which is an asterisk so that's above the 8 on your keyboard that's obviously going to do multiplication so 50s our answer there we have our division operator which is simply 1 slash this will do our division give us a value of 2 and we have one more operator that I'm sure a lot of you may have seen before which is called modulus now I'm gonna stick on this one for a second just because a lot of people get confused with this operator what this operator does is give you the remainder of a division so if you remember back to elementary school when you didn't really deal with decimal numbers when you used to divide two numbers what you would do is figure out how many times the divisor or whatever I guess the thing is that's going into the number can go into it and then you would calculate a remainder so to give you an example let me just change our values here so we do something like ten divided by four and we say we're not allowed to use decimals we're only allowed to use whole numbers for finding the answer this one our answer is gonna be is okay how many times can 4 go into ten before can go in twice so that means we're gonna have automatically we know we're gonna have two as our starting number and now we know it's gonna be like two point four two or something like that but the thing is we can't use decimal numbers so we say well we can divide it by two and we have a remainder of two and that is our answer to this question so what this modulus operator does is give you the remainder aspect of any division so in this case we know the remainder is gonna be two so let's actually run this and see our remainder is two I'm know it didn't change but anyways let's change this to three now and I'll show you so if I can do ten divided by three what's my answer gonna be well how many times can 3 go into 10 it can go in three times that's a value of 9 10 minus 9 is 1 remainder is 1 and there we go our remainder is 1 so that's what this operator does if you're confused by it literally just think ok let's you know figure out how many times this number can go into it and then what's left over after that it's actually very useful and there's a lot of instances where you may want to use it ok so that is sweet so now let me show you though and I'm actually gonna ask the question here since I've done you know X modulus wire I've done X plus y or whatever like this and stored it in the value Z do the values of x and y change here are they changing as we do this now think about your answer I'm gonna print them out and I will show you guys and explain why they don't change okay so let's run this there we go so we have 13 10 and 3 Oh zoom out a little bit and obviously we can see that the value of x and the value of y did not change after we perform this Opera and the reason they did not change is because I am actually not changing the values of x and y here I'm simply getting them by writing them and storing the results of their addition in the variable Z so the only variable that's gonna be changed or declared is gonna be the variable Z even if I decide to do something like X plus y here you know we'll add our semicolon and we run this again we can see that those values still aren't changing because we haven't told X&Y to change we've simply got the result of their addition so what if we want to change x and y and perform some kind of operation on them so let's get rid of all this and let's talk about how we can do this now so actually there's another kind of kind of assignment operator that we have that has to deal with these logical operators too which is something called plus equals now what X plus equals is gonna do is say X is going to be equal to X plus whatever value I put on this right side here so in this case if I put five and I got console.log and we put X now X is going to be changed to be 15 the reason again is because what this is doing is when I say plus equals rather than just plus it's gonna say alright X is gonna be equal to whatever it was before plus five let's run this there we go we can see now we are printing out 15 now this works the same for all our other logical operators so minus equals obviously works as well we get our value of five we can do x equals that's going to give us 50 we can do divide it equally and we can do modulus equals which is actually just gonna give us zero and the reason that's giving us zero is again because five can evenly divide ten so there is no remainder to that division awesome so that is how those work now I'll do the next example with why just because why not and essentially what we can do here is increment or decrement Y so as another operator called increment and another one called decrement increment is plus plus and decrement is now increment simply means add 1 very easy really straightforward and if I run this now we can see that Y gives us a value of 4 rather than 3 because this plus plus simply adds 1 and stores that in the value Y rather than if I were to do y one like this you can see the value of Y actually doesn't change all right so y plus plus we know how that works what about y minus well this is a decrementing so simply subtracting one that gives us the value of two and those are our logical operators now these operators only work on numbers or at least most of them only work on numbers and I'm going to talk about the specifics now all right so let's define a variable which is a string let's just call it STR is why not and let's call this string hello now what do you think I'm gonna get if I try to do STR plus X well actually in this instance that'll work but let's do something like this var Z equals and STR plus X let's see what happens when I print is that what do you guys think we're gonna get here all right so let's run this and you can see we get hello 10 now whenever we have a string and a number and we're adding them together what ends up happening is we simply convert the number to a string and just mush it together with whatever that string is so what we've done here is we said okay we're gonna have hello we're gonna add that to 10 well obviously these are not both numbers so we can't get some logical answer that makes sense so what we'll do is we'll convert 10 to a string and we'll just kind of append it and put it on the end of hello and that's exactly how that works and this is another thing that we call string can cap concatenation now concatenation is typically done between two strings but I guess it works here with a number because we just convert them into numbers now let me show you what happens if I do something like STR 2 equals hello world and let's now actually get rid of this value Z and let's simply do STR plus STR 2 well you can guess based on what happened when we added 10 to this string what our result is gonna be well in this case what we're gonna do is simply have hello and then we're just gonna mush world right beside it we're gonna concatenate them join them together and that's gonna be a result which is gonna be hello world and this obviously is gonna be on one line let me zoom out and with no spaces if we wanted a space all we'd have to do is add a space there or out of space there so if I run this we can see we get hello world so that's useful to know especially when you're printing different things out but it also means you know you can mush two strings together and all that's gonna happen is you can take the one string that your bass string and you're just gonna add the other string directly to the end of it again spaces you have to add them yourself if you'd like them to exist and that is called string concatenation okay so that is cool it's not exactly what I wanted to show but I also want to talk about you know what happens if I try to do something like hello minus three well what is this gonna give us so this is not a concatenation because we're not joining two strings we're not combining them together with that plus sign so what is this gonna give us well let's refresh this and we get an error str2 is not the phone okay well let's just get rid of str two for a second and let's run this okay run nan what is that well this essentially means that we cannot do this operation whenever we try to do an operation like this in JavaScript rather than actually just crashing which is nice we're just gonna get this nan which simply stand for you know this we don't have there's no answer this we don't know what the answer this is you can't do that same thing if I try actually multiplication might work let's see I know multiplication doesn't work in this so when we do the multiplication we get nan as well which is saying you know I don't know how to multiply a string by three so I can't give you an answer to that state same thing obviously if we try to do something like dividing a string we can't do that this division operator only works between numbers so we're getting that nan value all right so that is kind of how that works I wanted to show that obviously you know if you try to use an operator that can't be used on a string you're going to get an issue in this case you're not getting an error we're not crashing the program but it's simply saying that we can't evaluate this statement we don't know the answer to it so we get that nan value awesome now let's just show a few other examples here and how we can kind of add multiple things together all right so when using operations the order of operations is important and that's something I want to talk about so what I'm gonna do is I should will clear these out and we'll just save our result equals and now we're just gonna start typing actually an expression that we can evaluate so what I'm gonna do is simply do something like four times five over three plus nine now obviously you know this isn't the easiest thing to compute in your head so we'll log the result but what I want to demonstrate is the fact that order of operations apply in computers just like they apply when you're doing regular mathematics so essentially we start reading from left to right and we apply bed bass which is the rule that I kind of learned the acronym for this so we have B and I hope this doesn't keep Otto completing D mas now with this stands for is brackets exponents division multiplication addition and subtraction I won't actually area why not multiplication addition and subtraction and we'll just add the M there okay so this is the order of operations that we need to follow not sure if I spelled all these right but regardless and let's actually put these in a multiline comment to make sure that we can leave those here this essentially means we're going to follow this order of operation we're going to look if there's any brackets if there is we're going to evaluate what's in the brackets then we're gonna do any exponents that we have then any division than any multiplication then any addition then subtraction which means that this part of our statement is gonna happen first so I mean we can look at this and see what we get is our answer we're getting 13 Wow okay some crazy number like that but what if I want to change the result of this what if I want to you know do all of this addition and subtraction before I decide to divide you know 20 by whatever this result is well if I want to do that I can just add some brackets around this and now since these are in brackets we're gonna follow our order for operations and do that first and notice that our answer should change and it does it changes to two so that is you know exactly how this works we can put things in brackets if we want to define when they're gonna be operated on so this needs to happen before this is divided by that and we can do the same thing here where if we wanted to do you know five divided by all of this and then multiplied by four let's have a look at what that answer is gonna be and that answer is still gonna be cheap because obviously that's not gonna change whether what order we put that in so yeah that is kind of how this works that is how operations work that's how operators work obviously you can do string operators and I guess last thing to show is just like don't say hi like this I did something you know like X plus plus or X plus equal sorry I can do string plus equals in this case let's just go hi again let's go console.log STR will add my semicolon there to be consistent and let's run this and you can see we get high hot so strings you can use the plus operator on you can use plus equals you can concatenate and join those strings together and then numbers the other series of operations like subtraction division multiplication addition modulus all of those anyways that has been it for logical operators in the next video we get into comparison operators and I will see you guys there
