With timestamps:

00:00 - hello everyone and welcome back to their
00:01 - MySQL tutorial what we're gonna be doing
00:03 - today is actually writing SQL code that
00:06 - will allow us to create databases insert
00:08 - items into them delete them do all of
00:10 - that we're gonna start with some basics
00:12 - so don't worry worry if I don't cover
00:14 - everything here I'm just gonna get into
00:15 - kind of the fundamental stuff that you
00:16 - need to understand we're gonna talk
00:18 - about how a database actually works how
00:20 - tables work all of that to make sure
00:22 - that you guys understand what's going on
00:24 - here and don't just see me writing a
00:25 - bunch of random gibberish and SQL
00:27 - queries and then in future videos we're
00:29 - gonna get into some more advanced stuff
00:30 - like linking tables together talking
00:32 - about database design which is a huge
00:34 - part of this and you guys is gonna see
00:35 - and then we'll go into kind of like a
00:37 - maybe final project is kind of thing or
00:39 - an example illustrating how we can link
00:41 - maybe a larger database system together
00:44 - and what the design for that should be
00:45 - so anyways let's go ahead and get
00:46 - started what I want to do to start is
00:48 - actually just discuss what how our
00:51 - database works and what it is so first
00:53 - of all we need to kind of understand
00:54 - what a databases and then tables rows
00:57 - columns because those gonna be the words
00:58 - that I'm using throughout this series
01:00 - here so in MySQL we have something
01:03 - called a database now this is gonna be
01:05 - my database we'll just call it data base
01:08 - now excuse my handwriting it's hard to
01:10 - write on this tablet and I also just
01:11 - have really messy handwriting so inside
01:13 - of a database we have something called
01:14 - tables now tables are kind of like a
01:17 - specific piece of information or like
01:20 - some kind of objects um you can almost
01:22 - think of them as like classes per se if
01:23 - you're thinking about it in a code sense
01:25 - and I'm gonna you know do some examples
01:27 - to help you guys understand here so in
01:29 - our database we can have multiple tables
01:30 - there's no limit to the amount of tables
01:32 - we have so we have this database it
01:33 - contains tables in inside our tables we
01:35 - have something called rows and something
01:37 - called columns the first one I want to
01:39 - talk about is columns so the columns
01:42 - have what we call headers and these
01:44 - headers are kind of the pieces of
01:46 - information that's stored in this
01:47 - specific table so let's say we have two
01:49 - tables and maybe this table we call it
01:51 - person and maybe this table we call it
01:54 - food or something along the lines of
01:56 - that okay what we'd have in the person
01:58 - table is a bunch of headers that
01:59 - describe the person so we might have a
02:02 - header for a column that is name we
02:04 - might have another one that is age and
02:07 - we might have another one that is the
02:09 - person's favorite food so maybe we call
02:10 - that something like fave underscore
02:13 - food okay so these go all the way down
02:15 - and every time we insert a new row which
02:18 - we'll talk about in a second we're gonna
02:19 - have these properties associated with
02:22 - that row so these are columns and now we
02:24 - talk about rows so what is a row well we
02:26 - know what a row looks like but in terms
02:28 - of like actual sense but what it does is
02:30 - it actually holds information associated
02:33 - with each person so in a row we might
02:35 - have you know the information associated
02:36 - with the person named Tim who is 19
02:39 - years old
02:39 - whose fav food is you know let's just
02:41 - say pizza so that's how these rows work
02:45 - so every row is kind of a different
02:47 - entry or just different information
02:48 - being stored and this information gets
02:50 - stored in its column so we have you know
02:52 - the name the age and the favorite food
02:54 - and we're gonna have specific columns
02:57 - we'll talk about later and kind of how
02:58 - they work but this is the basic
03:00 - underlying principle now food is another
03:02 - table so maybe in the food table you
03:04 - know we'll have three columns as well
03:06 - like this the first is probably gonna be
03:08 - you know the name of the food maybe
03:10 - we'll have like the class like if it's a
03:12 - fruit if it's a vegetable if it's like a
03:14 - fast food or snack or something and then
03:16 - maybe we have like calories or like
03:18 - something along the lines of that in
03:19 - terms of the health facts of it so you
03:21 - know same thing in here we could have an
03:22 - entry for food maybe the entry is pizza
03:25 - like this the class I'm gonna say like
03:28 - junk food maybe that's not accurate but
03:32 - that's okay in calories I don't know how
03:33 - many calories is a pizza like 400 or
03:35 - something so we'll do that now when we
03:37 - have these databases and we have these
03:38 - different tables what we usually end up
03:40 - doing is linking tables together so for
03:42 - example here I've just put kind of like
03:44 - pizza in my fav food but what I would
03:46 - actually probably want to do is link
03:48 - this favorite food to the column food
03:50 - and the entry or not call the table food
03:53 - that has you know the entry pizza so
03:56 - what I can do is I can have like this
03:58 - entry here linked inside of favorite
04:01 - food so that way when I want to access
04:03 - information about Tim's favorite food I
04:05 - simply go to this column here go to this
04:08 - row in this table I find you know the
04:10 - name is pizza the class is junk and it's
04:12 - 400 calories and these are kind of the
04:14 - way that we link tables together we're
04:15 - gonna get more advanced later but the
04:17 - basic principle here is we have a
04:18 - database there's tables inside of a
04:19 - database each table has rows and columns
04:22 - and we can link those rows and columns
04:23 - together in a specific way okay so now
04:25 - that we understand that let's
04:27 - start writing some queries and talk
04:29 - about how we can create tables create
04:30 - databases and all of that all right so
04:32 - this is where we left off in the last
04:33 - video where we created a connection to
04:35 - our database and we created this cursor
04:38 - object now I forget if we did any SQL
04:40 - queries but I'm gonna go through them
04:41 - again here what I'm gonna do now is show
04:43 - you some basic queries and some basic
04:45 - commands to do kind of what I've just
04:46 - been showing you in that drawing example
04:49 - creating a table creating some columns
04:51 - and then adding some entries in we'll
04:52 - start basic we'll stick with that and in
04:54 - the next videos we'll go to altering the
04:56 - tables talking about some more advanced
04:58 - properties of the database linking
04:59 - tables together and all the crazy stuff
05:01 - that you can do with MySQL so let's go
05:03 - ahead and get started here the first
05:05 - query we need to do is something that
05:06 - can create a table for us so what I'm
05:08 - gonna do is say my cursor dot execute an
05:11 - inside here I'm gonna put a string and
05:13 - this is where I'm gonna create my first
05:15 - table now to create a table is pretty
05:17 - straightforward we type create table the
05:20 - name of the table and in this case we'll
05:22 - stick with the previous example of just
05:23 - having like a person view one of the
05:25 - tables and then what we do is we put
05:28 - brackets and we list the name of the
05:30 - columns and the type that they're gonna
05:31 - represent or that they're gonna hold so
05:33 - similar to Python now we have variables
05:35 - that can hold integers boolean x' bits
05:38 - strings we have similar types here
05:40 - inside of MySQL but they do have
05:43 - different names so I'll go through some
05:44 - of them so the first thing we're gonna
05:46 - need for our person is a name so what
05:48 - I'm gonna do is I'm gonna say name and
05:49 - then I'm gonna write the type that the
05:52 - name is gonna be so the type of
05:53 - information we're gonna store now in
05:55 - this case this is actually var char and
05:57 - inside of here you put the length of the
06:00 - variable length characters that you
06:02 - could possibly have I'll explain this in
06:04 - a second so we have a person name and
06:06 - the type is variable characters which
06:09 - essentially means string up to the
06:12 - length of 50 so that's what this means
06:14 - when you do variable character that's
06:15 - probably one of the most used types in
06:17 - MySQL so we'll do that we'll say name of
06:20 - our chair 50 which means we're gonna
06:21 - have a column you know 50 length is the
06:23 - max the next thing we need is an age so
06:25 - we're gonna have an age and you could
06:26 - probably guess what type this is gonna
06:28 - be it's gonna be an int now inside of
06:31 - MySQL we have all different kinds of
06:33 - data types that we can use we can use
06:34 - small int we can use tiny int we can use
06:36 - the big int we can use into we can use
06:39 - like
06:40 - and so what I'm gonna do is actually use
06:42 - something called small ends which means
06:44 - that our values will be represented by a
06:46 - smaller amount of bytes uh I guess yeah
06:49 - bytes or bits in memory which is good
06:52 - because if age is typically not gonna be
06:54 - you know more than a hundred especially
06:55 - if we're talking about I mean people in
06:57 - this century so we can use a small
06:59 - uncomfortably and know that within the
07:01 - range of whatever we're in a store here
07:03 - that's fine because small int allows us
07:05 - I believe to save things that are
07:06 - between negative thirty two thousand and
07:08 - thirty-two thousand now this brings me
07:10 - to my next point we have small int but
07:12 - we're never gonna store negative numbers
07:14 - so what I can actually write here is on
07:16 - signed like that which means that this
07:19 - number here is unsigned so we don't need
07:21 - to carry a bit to store the sign because
07:24 - we know that it's always gonna be a
07:25 - positive number so we'll do that okay
07:27 - the next thing that I'm gonna add here
07:28 - to my person we had food I'm gonna leave
07:31 - that out for now but I'm gonna add
07:32 - something called person ID and we're
07:34 - gonna talk about in detail what this is
07:35 - so person ID and the type of this is
07:38 - gonna be an int we're gonna make it
07:39 - regular int and this is gonna be what we
07:41 - call our primary key now you probably
07:44 - haven't heard a primary key before
07:45 - unless you've worked with databases what
07:47 - a primary key is is a unique value
07:49 - associated with each row in the table so
07:52 - for example we might have two people
07:53 - that you know are coincidentally have
07:55 - the same name and the same age so how
07:57 - can we differentiate between them well
07:59 - we need something called a primary key
08:00 - which will be different for every single
08:02 - person and we'll call that it's the
08:04 - person ID just like you know maybe we
08:06 - have a sin card or I think that's what
08:08 - they call it in the States in social
08:10 - insurance maybe that's Canada I don't
08:11 - know whatever it is we're gonna have you
08:14 - know that so we need to have some unique
08:16 - number to identify each person and
08:18 - that's what this is gonna be our person
08:20 - ID so when you make it a primary key
08:22 - that essentially means that every time
08:24 - you add an entry in this key will be
08:26 - generated and will be different and that
08:28 - brings me to my next point which is
08:30 - something called Auto underscore
08:32 - increment so what this is gonna do is
08:35 - ensure that every time we add a new
08:38 - element into you know this person table
08:40 - here and we give it a name and we give
08:42 - it an age it will automatically generate
08:44 - a primary key that will be greater than
08:46 - or will be different from the last
08:48 - primary key that we had in the
08:50 - so that means that we can access any
08:51 - person uniquely just by knowing their
08:53 - primary key otherwise known as their
08:55 - person ID I hope that makes sense with
08:57 - that explanation if you have any
08:58 - questions leave them below be happy to
09:00 - answer okay so now that we've done that
09:02 - all we need to do is actually run this
09:03 - code by hitting control B and we will
09:06 - see no output but we've also not see any
09:07 - errors which is good so we've ran this
09:10 - my SQL statement now and we've actually
09:11 - successfully created a table called
09:13 - person inside of our database now if we
09:16 - want to actually have a look at what
09:18 - this person table is you know what maybe
09:19 - I'll leave these queries commented out
09:20 - so that you guys can look at them what
09:22 - I'm gonna do is I am going to run a new
09:25 - command so we can actually look at the
09:26 - table we just created so I'm gonna say
09:28 - my cursor dot execute describe person
09:35 - now what this is gonna do is describe
09:36 - the person table for us so what I need
09:39 - to do if I actually want to see some
09:40 - output from this and print some things
09:42 - out is loop through my cursor so I'm
09:44 - gonna say for X in my cursor print X and
09:48 - what this is gonna do is give me all the
09:50 - output that my cursor got from this SQL
09:52 - query and just print it line by line
09:54 - because this is actually iterable object
09:56 - which allows us to do that so let's run
09:58 - this and we can see that we get this
10:00 - output so we get named var chair 50-page
10:03 - person ID and all that and you can see
10:06 - that all the properties we assigned with
10:08 - these different attributes are here so
10:10 - it says name variable character length
10:12 - we have age which is a small int which
10:14 - is unsigned and we have a person ID
10:16 - which is an int 11 which just means it's
10:18 - a larger integer that is a primary key
10:20 - with an auto increment so that is kind
10:23 - of how that works now what I'm gonna do
10:26 - is show you now how we can actually add
10:28 - elements into this table and how we can
10:30 - retrieve them afterwards so if we want
10:32 - to add something into this table we've
10:33 - just created what we need to do is run
10:36 - another command which is going to be
10:37 - insert we're going to say insert into
10:39 - our table name which in this case is
10:42 - person we're gonna put the name of the
10:44 - columns that we are going to insert so
10:46 - on the same name and age and note I
10:48 - actually don't put person ID because I'm
10:51 - not gonna define the person ID
10:52 - explicitly it's gonna be automatically
10:54 - generated for me and then what I'm gonna
10:55 - do is say values now what I could do is
10:59 - I could actually directly type the
11:01 - values in here and
11:02 - could if I did single quotation marks I
11:05 - could type Tim and I could type 45 but
11:08 - we usually don't do this what we usually
11:10 - do is something called string formatting
11:12 - which allows us to actually pass the
11:14 - values in kind of a safer way and a
11:16 - better practice way to do this and it
11:18 - also allows us to pass in variables
11:20 - which you're probably going to be doing
11:21 - rather than hard coding in strings and
11:23 - adding into elements so what I'm gonna
11:25 - do rather than actually typing the
11:26 - values directly right here is I'm gonna
11:28 - do % s comma % s will close that bracket
11:33 - and then inside of this execute
11:35 - statement here so this is not a part of
11:37 - the string now this is separated by a
11:38 - comma I'm gonna put a tupple and inside
11:40 - this tuple I'm gonna put my values so in
11:42 - this case I'm gonna put Tim and then
11:44 - I'll put an age you know 19 like that
11:46 - and we can make this T okay so now that
11:49 - we have that what will happen is when we
11:51 - execute this command we'll add that into
11:53 - the tail now the thing that we need to
11:55 - add here though is we need to actually
11:57 - commit these changes to our database
11:58 - otherwise nothing is gonna happen so
12:00 - what I'm gonna do is I'm gonna type DB
12:02 - dot commit which stands for database
12:04 - commit changes so when we insert this in
12:06 - it will commit those changes and those
12:08 - will actually be saved permanently now
12:09 - I'm gonna add one more command here just
12:12 - we actually can see some output here so
12:13 - I'm gonna say my cursor dot X you don't
12:16 - actually I don't want to get into that
12:17 - yet because that's gonna be a whole new
12:18 - explanation so let's just comment this
12:20 - out and get rid of that for now okay so
12:22 - let's run this we can see that we don't
12:24 - get any errors this worked fine and now
12:26 - let's see how we can actually look at
12:28 - the different values that are inside of
12:29 - our table so we've ran this SQL query so
12:32 - let's comment this out we don't need
12:33 - this commit anymore and now what I want
12:36 - to do is show you how we can actually
12:37 - get all of the rows and all of the items
12:39 - that are inside of our database so we
12:42 - know our table is named person we know
12:43 - we've insert an item how can we get that
12:45 - alright so the command for this is
12:47 - called select star from and then the
12:51 - name of your table which in this case is
12:53 - person now I'm gonna get into more
12:55 - detail on this in later videos and a
12:56 - little bit in this video but essentially
12:58 - what this will do is select everything
13:00 - from the table person and give it to us
13:02 - so now I need to loop through my cursor
13:05 - so for X in my cursor we will print X so
13:09 - let's run this and we see we get Tim
13:11 - 19:1 so notice that the primary key
13:14 - starts off out
13:15 - and if I actually add another element in
13:17 - that primary key will be too and let's
13:19 - show you what happens when I add another
13:20 - element so lets you know uncomment this
13:22 - let's change this person's name to be
13:25 - Joe
13:26 - let's make his age 22 and let's run this
13:29 - and now you can see that we first
13:32 - started off by inserting the person into
13:34 - our table so we have you know Joe 22 and
13:37 - notice that when we do select star from
13:39 - person to get both of our people so we
13:41 - get Tim 19 1 we get Joe 22 2 and notice
13:44 - this primary key has automatically been
13:46 - incremented to 2 because we added a new
13:48 - person so that is kind of how that works
13:50 - now I'm gonna cut the video here because
13:52 - there's a lot more to talk about with
13:53 - these SQL queries and I don't want to go
13:55 - on for half an hour in the first video
13:57 - but in later videos and the next video
13:59 - we will talk more specifically about the
14:00 - Select statement and some other things
14:02 - that we can do in some queries we can
14:04 - use on our tables

Cleaned transcript:

hello everyone and welcome back to their MySQL tutorial what we're gonna be doing today is actually writing SQL code that will allow us to create databases insert items into them delete them do all of that we're gonna start with some basics so don't worry worry if I don't cover everything here I'm just gonna get into kind of the fundamental stuff that you need to understand we're gonna talk about how a database actually works how tables work all of that to make sure that you guys understand what's going on here and don't just see me writing a bunch of random gibberish and SQL queries and then in future videos we're gonna get into some more advanced stuff like linking tables together talking about database design which is a huge part of this and you guys is gonna see and then we'll go into kind of like a maybe final project is kind of thing or an example illustrating how we can link maybe a larger database system together and what the design for that should be so anyways let's go ahead and get started what I want to do to start is actually just discuss what how our database works and what it is so first of all we need to kind of understand what a databases and then tables rows columns because those gonna be the words that I'm using throughout this series here so in MySQL we have something called a database now this is gonna be my database we'll just call it data base now excuse my handwriting it's hard to write on this tablet and I also just have really messy handwriting so inside of a database we have something called tables now tables are kind of like a specific piece of information or like some kind of objects um you can almost think of them as like classes per se if you're thinking about it in a code sense and I'm gonna you know do some examples to help you guys understand here so in our database we can have multiple tables there's no limit to the amount of tables we have so we have this database it contains tables in inside our tables we have something called rows and something called columns the first one I want to talk about is columns so the columns have what we call headers and these headers are kind of the pieces of information that's stored in this specific table so let's say we have two tables and maybe this table we call it person and maybe this table we call it food or something along the lines of that okay what we'd have in the person table is a bunch of headers that describe the person so we might have a header for a column that is name we might have another one that is age and we might have another one that is the person's favorite food so maybe we call that something like fave underscore food okay so these go all the way down and every time we insert a new row which we'll talk about in a second we're gonna have these properties associated with that row so these are columns and now we talk about rows so what is a row well we know what a row looks like but in terms of like actual sense but what it does is it actually holds information associated with each person so in a row we might have you know the information associated with the person named Tim who is 19 years old whose fav food is you know let's just say pizza so that's how these rows work so every row is kind of a different entry or just different information being stored and this information gets stored in its column so we have you know the name the age and the favorite food and we're gonna have specific columns we'll talk about later and kind of how they work but this is the basic underlying principle now food is another table so maybe in the food table you know we'll have three columns as well like this the first is probably gonna be you know the name of the food maybe we'll have like the class like if it's a fruit if it's a vegetable if it's like a fast food or snack or something and then maybe we have like calories or like something along the lines of that in terms of the health facts of it so you know same thing in here we could have an entry for food maybe the entry is pizza like this the class I'm gonna say like junk food maybe that's not accurate but that's okay in calories I don't know how many calories is a pizza like 400 or something so we'll do that now when we have these databases and we have these different tables what we usually end up doing is linking tables together so for example here I've just put kind of like pizza in my fav food but what I would actually probably want to do is link this favorite food to the column food and the entry or not call the table food that has you know the entry pizza so what I can do is I can have like this entry here linked inside of favorite food so that way when I want to access information about Tim's favorite food I simply go to this column here go to this row in this table I find you know the name is pizza the class is junk and it's 400 calories and these are kind of the way that we link tables together we're gonna get more advanced later but the basic principle here is we have a database there's tables inside of a database each table has rows and columns and we can link those rows and columns together in a specific way okay so now that we understand that let's start writing some queries and talk about how we can create tables create databases and all of that all right so this is where we left off in the last video where we created a connection to our database and we created this cursor object now I forget if we did any SQL queries but I'm gonna go through them again here what I'm gonna do now is show you some basic queries and some basic commands to do kind of what I've just been showing you in that drawing example creating a table creating some columns and then adding some entries in we'll start basic we'll stick with that and in the next videos we'll go to altering the tables talking about some more advanced properties of the database linking tables together and all the crazy stuff that you can do with MySQL so let's go ahead and get started here the first query we need to do is something that can create a table for us so what I'm gonna do is say my cursor dot execute an inside here I'm gonna put a string and this is where I'm gonna create my first table now to create a table is pretty straightforward we type create table the name of the table and in this case we'll stick with the previous example of just having like a person view one of the tables and then what we do is we put brackets and we list the name of the columns and the type that they're gonna represent or that they're gonna hold so similar to Python now we have variables that can hold integers boolean x' bits strings we have similar types here inside of MySQL but they do have different names so I'll go through some of them so the first thing we're gonna need for our person is a name so what I'm gonna do is I'm gonna say name and then I'm gonna write the type that the name is gonna be so the type of information we're gonna store now in this case this is actually var char and inside of here you put the length of the variable length characters that you could possibly have I'll explain this in a second so we have a person name and the type is variable characters which essentially means string up to the length of 50 so that's what this means when you do variable character that's probably one of the most used types in MySQL so we'll do that we'll say name of our chair 50 which means we're gonna have a column you know 50 length is the max the next thing we need is an age so we're gonna have an age and you could probably guess what type this is gonna be it's gonna be an int now inside of MySQL we have all different kinds of data types that we can use we can use small int we can use tiny int we can use the big int we can use into we can use like and so what I'm gonna do is actually use something called small ends which means that our values will be represented by a smaller amount of bytes uh I guess yeah bytes or bits in memory which is good because if age is typically not gonna be you know more than a hundred especially if we're talking about I mean people in this century so we can use a small uncomfortably and know that within the range of whatever we're in a store here that's fine because small int allows us I believe to save things that are between negative thirty two thousand and thirtytwo thousand now this brings me to my next point we have small int but we're never gonna store negative numbers so what I can actually write here is on signed like that which means that this number here is unsigned so we don't need to carry a bit to store the sign because we know that it's always gonna be a positive number so we'll do that okay the next thing that I'm gonna add here to my person we had food I'm gonna leave that out for now but I'm gonna add something called person ID and we're gonna talk about in detail what this is so person ID and the type of this is gonna be an int we're gonna make it regular int and this is gonna be what we call our primary key now you probably haven't heard a primary key before unless you've worked with databases what a primary key is is a unique value associated with each row in the table so for example we might have two people that you know are coincidentally have the same name and the same age so how can we differentiate between them well we need something called a primary key which will be different for every single person and we'll call that it's the person ID just like you know maybe we have a sin card or I think that's what they call it in the States in social insurance maybe that's Canada I don't know whatever it is we're gonna have you know that so we need to have some unique number to identify each person and that's what this is gonna be our person ID so when you make it a primary key that essentially means that every time you add an entry in this key will be generated and will be different and that brings me to my next point which is something called Auto underscore increment so what this is gonna do is ensure that every time we add a new element into you know this person table here and we give it a name and we give it an age it will automatically generate a primary key that will be greater than or will be different from the last primary key that we had in the so that means that we can access any person uniquely just by knowing their primary key otherwise known as their person ID I hope that makes sense with that explanation if you have any questions leave them below be happy to answer okay so now that we've done that all we need to do is actually run this code by hitting control B and we will see no output but we've also not see any errors which is good so we've ran this my SQL statement now and we've actually successfully created a table called person inside of our database now if we want to actually have a look at what this person table is you know what maybe I'll leave these queries commented out so that you guys can look at them what I'm gonna do is I am going to run a new command so we can actually look at the table we just created so I'm gonna say my cursor dot execute describe person now what this is gonna do is describe the person table for us so what I need to do if I actually want to see some output from this and print some things out is loop through my cursor so I'm gonna say for X in my cursor print X and what this is gonna do is give me all the output that my cursor got from this SQL query and just print it line by line because this is actually iterable object which allows us to do that so let's run this and we can see that we get this output so we get named var chair 50page person ID and all that and you can see that all the properties we assigned with these different attributes are here so it says name variable character length we have age which is a small int which is unsigned and we have a person ID which is an int 11 which just means it's a larger integer that is a primary key with an auto increment so that is kind of how that works now what I'm gonna do is show you now how we can actually add elements into this table and how we can retrieve them afterwards so if we want to add something into this table we've just created what we need to do is run another command which is going to be insert we're going to say insert into our table name which in this case is person we're gonna put the name of the columns that we are going to insert so on the same name and age and note I actually don't put person ID because I'm not gonna define the person ID explicitly it's gonna be automatically generated for me and then what I'm gonna do is say values now what I could do is I could actually directly type the values in here and could if I did single quotation marks I could type Tim and I could type 45 but we usually don't do this what we usually do is something called string formatting which allows us to actually pass the values in kind of a safer way and a better practice way to do this and it also allows us to pass in variables which you're probably going to be doing rather than hard coding in strings and adding into elements so what I'm gonna do rather than actually typing the values directly right here is I'm gonna do % s comma % s will close that bracket and then inside of this execute statement here so this is not a part of the string now this is separated by a comma I'm gonna put a tupple and inside this tuple I'm gonna put my values so in this case I'm gonna put Tim and then I'll put an age you know 19 like that and we can make this T okay so now that we have that what will happen is when we execute this command we'll add that into the tail now the thing that we need to add here though is we need to actually commit these changes to our database otherwise nothing is gonna happen so what I'm gonna do is I'm gonna type DB dot commit which stands for database commit changes so when we insert this in it will commit those changes and those will actually be saved permanently now I'm gonna add one more command here just we actually can see some output here so I'm gonna say my cursor dot X you don't actually I don't want to get into that yet because that's gonna be a whole new explanation so let's just comment this out and get rid of that for now okay so let's run this we can see that we don't get any errors this worked fine and now let's see how we can actually look at the different values that are inside of our table so we've ran this SQL query so let's comment this out we don't need this commit anymore and now what I want to do is show you how we can actually get all of the rows and all of the items that are inside of our database so we know our table is named person we know we've insert an item how can we get that alright so the command for this is called select star from and then the name of your table which in this case is person now I'm gonna get into more detail on this in later videos and a little bit in this video but essentially what this will do is select everything from the table person and give it to us so now I need to loop through my cursor so for X in my cursor we will print X so let's run this and we see we get Tim 191 so notice that the primary key starts off out and if I actually add another element in that primary key will be too and let's show you what happens when I add another element so lets you know uncomment this let's change this person's name to be Joe let's make his age 22 and let's run this and now you can see that we first started off by inserting the person into our table so we have you know Joe 22 and notice that when we do select star from person to get both of our people so we get Tim 19 1 we get Joe 22 2 and notice this primary key has automatically been incremented to 2 because we added a new person so that is kind of how that works now I'm gonna cut the video here because there's a lot more to talk about with these SQL queries and I don't want to go on for half an hour in the first video but in later videos and the next video we will talk more specifically about the Select statement and some other things that we can do in some queries we can use on our tables
