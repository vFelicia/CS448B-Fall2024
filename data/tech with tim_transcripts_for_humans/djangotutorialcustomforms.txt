With timestamps:

00:00 - hey guys and welcome back to another
00:01 - django tutorial so in today's video
00:03 - we're gonna be going a bit more advanced
00:05 - with forums be showing you how to create
00:07 - your own custom forms that are a bit
00:09 - more dynamic than typical django forms
00:12 - that we were using in the last video
00:13 - using that forms class and whatnot so
00:16 - yeah I guess let's get into it so the
00:18 - goal today kind of is to allow the user
00:21 - to add an item from their to-do list so
00:24 - right now we don't actually have any way
00:25 - for them to add items we only have ways
00:27 - for them to add new to-do lists so we're
00:30 - gonna do that we're also gonna add some
00:31 - check buttons beside the to-do list
00:33 - items so we can show whether or not they
00:36 - are complete or incomplete without
00:37 - having to do this in complete complete
00:39 - kind of thing so right off the bat I'm
00:41 - actually just gonna delete this
00:43 - incomplete and complete for now and I'm
00:46 - gonna start setting up a form inside of
00:49 - my HTML file here now the reason we need
00:51 - a form is because we need to pass the
00:54 - information like whether the user click
00:56 - the check button or whether they what
00:58 - item for example they typed in to add to
01:00 - the list we need to pass that back to
01:02 - our view using a post request so we need
01:05 - a form to do that so I'm going to start
01:07 - by creating a form I'm going to say
01:09 - method equals and in this case post and
01:11 - I'm going to say action what he call it
01:14 - equals pound like this okay we're number
01:18 - son whatever you want to call it now I
01:19 - will simply close my form by doing that
01:22 - and now I'm going to start by just
01:24 - setting up some buttons at the bottom of
01:26 - my form that say save and that say add
01:28 - item so what I'm gonna have is I'm gonna
01:30 - have two buttons save add item save is
01:33 - gonna save you the changes to your
01:34 - checks and add item is gonna add item
01:37 - that we will get from a text field that
01:39 - I'm also gonna add so the first button
01:41 - that I would create will be that Save
01:42 - button so to do that I'm just gonna say
01:44 - button I will say type equals and in
01:47 - this case what do we need type for a
01:49 - button yeah we do will say type equals
01:51 - submit we'll say name equals and in this
01:53 - case but it'll just be saved and I'll
01:56 - say value equals and I can say save it
01:59 - here as well now when I close my button
02:02 - I'll put whatever I want to display on
02:03 - it here so in this case I'm gonna say
02:05 - save and I'll copy this actually and I'm
02:08 - gonna just use the same thing except
02:10 - instead of name I'm gonna say
02:12 - new item I don't know why at that tabbed
02:15 - there and will give that value of new
02:17 - item as well and obviously now I'm just
02:21 - gonna make this add item I mean I could
02:23 - make a new item too it doesn't really
02:24 - matter and even between here I'm going
02:26 - to add an input field which is my text
02:29 - that you're gonna type in for when you
02:31 - create a new button so I'm gonna say
02:32 - input will say type equals text and
02:35 - we'll say name equals I so could say
02:40 - item why not I know stroyed not the best
02:43 - name actually let's just say new alright
02:46 - news probably not a good name either but
02:48 - whatever that's fine okay so type equals
02:50 - text name equals new and sweet now what
02:53 - I'm gonna do now is add those check
02:55 - buttons in beside all of our items so
02:58 - obviously if our item is complete we
03:00 - want that check button to start off as
03:01 - checked and if it's not we want it to
03:03 - not be checked so to do this it's
03:05 - similar to the text we're just gonna say
03:07 - input I'm gonna say type equals and in
03:09 - this case checkbox will say value equals
03:13 - clicked and you can call this whatever
03:16 - you want but just remember this name
03:17 - because we're gonna need to use this I'm
03:19 - gonna say name is equal to and this is a
03:22 - little bit weird but we're gonna set the
03:23 - name equal to the ID of our item so to
03:27 - do this what I'm gonna do is just go in
03:28 - here and say item dot ID and before that
03:32 - I'm gonna put a C so that what we're
03:34 - gonna do now is we're gonna say all of
03:35 - our check buttons because this is gonna
03:37 - create a bunch of different check
03:38 - buttons right they're gonna be given the
03:39 - name C and then whatever the ID of that
03:42 - button is this will just make it way
03:44 - easier for us to determine which check
03:46 - button was checked and what item that
03:48 - corresponds to and you'll see how we do
03:50 - that later so let's copy this now and
03:52 - I'm going to put it right here as well
03:55 - so inside these Li tags now the only
03:57 - difference is up here where it says is
03:59 - completely if item dot complete equals
04:01 - true I'm just gonna type checked like
04:03 - this which will default it to start off
04:06 - checked that's all that's gonna do for
04:08 - us okay so now we've actually set up
04:11 - this form the last thing to add is our
04:12 - CSRF token that we always need to add
04:15 - whenever we create a token or a forms
04:17 - are so CSRF underscore token like that
04:20 - and then hit save so now that we've done
04:22 - that our HTML will be showing up all
04:24 - night
04:25 - and now we just need to handle this from
04:27 - our view so remember our view is called
04:29 - index so what I want to do in here now
04:31 - very similar to create is I want to
04:34 - first off start by checking whether or
04:36 - not we have posted something or we're
04:38 - getting something so for posting
04:40 - something we're gonna say if and then
04:41 - this case response dot post or not post
04:45 - Seraph dot method equals equals post
04:48 - like that then we will start doing all
04:51 - the stuff in terms of saving and adding
04:52 - items now I want to quickly go back here
04:55 - and talk about something for a second so
04:57 - right now we have two buttons we have
04:58 - save and we have new item and these
05:00 - buttons might have different functions
05:03 - and they do in this instance so for
05:05 - example save well we only want save to
05:08 - look at and update the check buttons
05:10 - right that's what it's gonna do it's
05:11 - just gonna update your check buttons if
05:12 - you've completed an item or if you
05:13 - haven't completed it whereas our new
05:15 - item button or add item button is going
05:18 - to take the text from this text field
05:20 - and add it as a new item on our list so
05:23 - we need a way to determine which button
05:25 - we clicked so we can determine what
05:26 - function we're going to perform
05:28 - so to do this what you can do actually
05:30 - is gonna say if response dot post dot
05:36 - gets and then here you can put the name
05:39 - of your button so in this case I'm gonna
05:41 - say we'll start off by doing save save
05:44 - like this okay now what this does
05:47 - actually is whenever you get a post
05:49 - request from the server what's gonna
05:53 - happen is all the information in this
05:55 - form here is gonna be passed in what's
05:57 - known as a dictionary to our view so
06:01 - what's gonna happen is we're gonna get a
06:02 - dictionary that looks something like
06:03 - this
06:03 - so we'll have save and it will either
06:05 - have no value or it will have a value of
06:09 - whatever we typed ears value so for
06:11 - example save if we click this button
06:13 - what's gonna happen is it's gonna be
06:15 - added to a dictionary which is all of
06:17 - the information from this form and it's
06:19 - gonna be given this value only if we
06:21 - click it so what's gonna happen is we're
06:23 - gonna get the name save points to the
06:25 - value save and it's gonna look like this
06:27 - precisely okay we're also gonna get all
06:30 - of the information for our check buttons
06:32 - so what will happen is we'll get
06:33 - something like C 1 which will be that ID
06:36 - right C 1 and that'll point to you
06:38 - in here it'll say and I'll print this
06:40 - out after you so you guys can have a
06:41 - look at it it'll say clicked if we
06:44 - clicked the check button if we didn't
06:46 - click the check button we're just gonna
06:47 - get a blank string or c1 might not even
06:49 - show up in the dictionary okay so and
06:53 - then we can also try what do you call it
06:55 - for example like add item we can do the
06:57 - same thing with add item now the thing
06:59 - is if we click add item then it will
07:02 - come in and it will give the value of
07:03 - add item
07:05 - otherwise it won't give us any value
07:07 - just give us a blank string and you guys
07:08 - will see how this works in a second I'm
07:09 - gonna print it out for you so you can
07:10 - have a look so let's actually if we are
07:12 - posting let's print response dot post
07:18 - like that so you guys can have a look
07:19 - okay so anyways so we're gonna see if we
07:21 - are saving so if we're saving then this
07:24 - will evaluate to true because there'll
07:26 - be some value so that will just work
07:27 - otherwise we'll say what do you call it
07:30 - Elif response dot post and dot get and
07:35 - in this case instead of saying say if
07:37 - we're gonna say new I think was a new
07:40 - item I keep forgetting what I call this
07:42 - yes new item awesome new item okay so
07:45 - we'll just pass down here for now and
07:46 - let's work inside of this first one up
07:49 - here so what we want to do up here is we
07:51 - want to look at all the different check
07:52 - buttons and determine whether or not
07:53 - they were clicked or not and then update
07:55 - our item accordingly so to do this what
07:57 - I'm gonna do is I'm going to loop
07:58 - through all of the items in our current
08:01 - to-do list because we still have this
08:02 - value up here and we're gonna check the
08:05 - IDS of that with the check buttons and
08:07 - see if it was clicked or not so to do
08:08 - this I'm gonna say for I guess we'll say
08:10 - item in in this case LS dot item
08:15 - underscore set dot all with lowercase LS
08:20 - okay then what we will do is we'll say
08:22 - if and in this case response dot post
08:26 - dot get and in here what we're going to
08:29 - do is we're going to say c plus str and
08:33 - then item dot ID now what this is doing
08:35 - is getting the item ID converting it to
08:37 - a string and adding ascii to the
08:39 - beginning of it so we will get the exact
08:41 - same kind of pattern of what do you call
08:43 - it names or ids as we were setting up
08:46 - here right so we have seen that item ID
08:47 - that's just what we're doing here so if
08:49 - we get that and that is equal to the
08:52 - you have clicked then what we need to do
08:54 - is well we need to update that item
08:57 - so we'll say item dot complete is equal
09:01 - to and in this case true now otherwise
09:04 - so if we didn't get that it wasn't equal
09:06 - to clicked we'll take this but we're
09:08 - gonna set it equal to false so this is
09:10 - the same as like if you unclick the
09:12 - check button and it doesn't it's not
09:14 - checkmark then this will run right here
09:16 - what I'm doing now and then all we can
09:18 - simply do down here and just say is
09:20 - actually inside the for-loop will say
09:22 - item dot save and there we are sweet so
09:26 - that's how that works and that's
09:28 - actually it for this saving the check
09:30 - buttons now what's left to do is to add
09:32 - a new item this is it's similar in terms
09:35 - of how we knew this but we're going to
09:36 - start by doing is getting the text that
09:39 - was in that text input field here so the
09:41 - name was new so say text is equal to and
09:44 - in this case response dot post dog yet
09:48 - and here we're saying new and now what
09:51 - I'm gonna do is before I add this new
09:53 - item because this will give us the text
09:55 - I want to validate that this is valid
09:57 - input now you can do whatever checks you
10:00 - want on this input and usually Django
10:02 - will do it for you but since we're not
10:03 - using Django forms using our own custom
10:06 - form we don't have that option of using
10:08 - is valid like we used here so what I'm
10:11 - gonna do is just say if text now you
10:13 - select you say the Len of text is
10:15 - greater than two so it's at least three
10:17 - characters then I will simply add that
10:20 - item to the to-do list so to do that I'm
10:22 - gonna say LS dot item underscore set
10:24 - dark create and in this case we'll say
10:26 - text equals and I'm actually gonna have
10:28 - to rename this to txt here I will say
10:31 - txt and then we will say complete equals
10:35 - false like so otherwise I'm just gonna
10:39 - print out a message it just says like
10:41 - invalid input just so that we can have a
10:43 - look at this in the console and that
10:44 - should actually be about it now I'd be
10:47 - surprised if I didn't make any mistakes
10:49 - but let's give this a run I already have
10:51 - the server actually I'm gonna have to
10:52 - run the server again here run the server
10:54 - so let's now attempt to go to like ID
10:57 - two so now we can see we have first item
11:00 - second item third item not showing now
11:02 - if I decide to check an item or uncheck
11:05 - hit save what is your issue here name
11:08 - respond uh well it would help if I spell
11:10 - to response correctly where did i
11:12 - misspelled that recourse in the print
11:14 - statement anyways
11:15 - let's see if this will update now python
11:19 - managed up hi run server did i make
11:22 - another mistake let's see - okay now
11:24 - let's try it safe there we go so then
11:26 - you can see that the item saves now if I
11:28 - go to maybe let's say page three and I
11:31 - want to add an item
11:32 - let's try hello and we click add item
11:33 - and now you can see that we get hello
11:35 - popping up and I can check I can save
11:37 - that I can unsaved it and if I go back
11:39 - to two you can see that obviously the
11:41 - same checking pattern is still there I
11:43 - could add a new item so let us say new
11:47 - item here add that and you can see that
11:49 - it's popping up and I can save that so
11:51 - that is how you make a custom form this
11:53 - is very useful what I've just shown you
11:55 - will allow you to do pretty well
11:58 - anything with forms because now you know
11:59 - how to get information from forms now I
12:02 - will show you actually what our post
12:03 - requests are looking like just so you
12:05 - can see or sorry was it requests like
12:08 - what I'm printing here I'll show you
12:09 - what that looks like and talked a little
12:10 - bit about that before we wrap up here so
12:13 - you can see that if I go here we have
12:17 - check button see - and that is given a
12:20 - value of clicked you can see C 5 is
12:22 - given a value clicked and C 7 is given a
12:24 - value clicked
12:24 - so those IDs for our check buttons we
12:27 - see that save is given the value of save
12:29 - because we hit that Save button but we
12:32 - see that we're not seeing any other
12:34 - values here right so if we don't click
12:37 - an item or if we're not giving a value
12:40 - to it we're not gonna see it here so for
12:42 - example like if we have C 2 and we don't
12:45 - check that button you're just simply not
12:47 - gonna show up in the information that it
12:49 - passed to us which means that we can
12:51 - check if it's not there and then do
12:53 - something accordingly so the way that
12:55 - this get request works when we say get
12:58 - like this or this gap method is since
13:01 - this is it's like this is kind of a
13:02 - dictionary but this gap method is
13:04 - specific to this type of data structure
13:06 - and essentially if the item doesn't
13:09 - exist I believe it just returns none
13:11 - which means that if we ever put
13:13 - something like this so for example if
13:15 - save isn't there we simply won't run the
13:17 - block because if
13:18 - none obviously it's not gonna run so
13:20 - that's the way that that kind of works
13:22 - you can see I mean I brewed highly
13:24 - encourage you guys to kind of mess with
13:26 - this and do some requests print them out
13:29 - and see what it looks like that's really
13:30 - the best way to understand how this
13:32 - works you can see it's a type query
13:35 - dictionary and when you try to get
13:36 - something if it doesn't exist it just
13:38 - says none if it does exist it'll give
13:40 - you the value that corresponds with it
13:42 - and in some instances you can actually
13:44 - have multiple values pointing to the
13:46 - same name so that's just something to
13:47 - keep in mind that you guys might notice
13:49 - when you go through this so anyways that
13:52 - is essentially how that works we've
13:53 - create a custom form now we know to add
13:55 - things and with this information we can
13:58 - go into creating some more complex stuff
14:00 - so in the next video I think I'm gonna
14:01 - be adding bootstrap onto the website
14:03 - making things look a little bit nicer
14:04 - maybe adding a sidebar will do some
14:06 - stuff like that and then later on we're
14:08 - gonna get into user registration and all
14:10 - that kind of stuff so that you can
14:11 - actually have all of your to-do lists
14:13 - stored under a certain user so anyway so
14:15 - that has been it for this video if you
14:16 - guys enjoyed please make sure you leave
14:17 - a like and subscribe and I'll see you in
14:19 - another video
14:20 - [Music]

Cleaned transcript:

hey guys and welcome back to another django tutorial so in today's video we're gonna be going a bit more advanced with forums be showing you how to create your own custom forms that are a bit more dynamic than typical django forms that we were using in the last video using that forms class and whatnot so yeah I guess let's get into it so the goal today kind of is to allow the user to add an item from their todo list so right now we don't actually have any way for them to add items we only have ways for them to add new todo lists so we're gonna do that we're also gonna add some check buttons beside the todo list items so we can show whether or not they are complete or incomplete without having to do this in complete complete kind of thing so right off the bat I'm actually just gonna delete this incomplete and complete for now and I'm gonna start setting up a form inside of my HTML file here now the reason we need a form is because we need to pass the information like whether the user click the check button or whether they what item for example they typed in to add to the list we need to pass that back to our view using a post request so we need a form to do that so I'm going to start by creating a form I'm going to say method equals and in this case post and I'm going to say action what he call it equals pound like this okay we're number son whatever you want to call it now I will simply close my form by doing that and now I'm going to start by just setting up some buttons at the bottom of my form that say save and that say add item so what I'm gonna have is I'm gonna have two buttons save add item save is gonna save you the changes to your checks and add item is gonna add item that we will get from a text field that I'm also gonna add so the first button that I would create will be that Save button so to do that I'm just gonna say button I will say type equals and in this case what do we need type for a button yeah we do will say type equals submit we'll say name equals and in this case but it'll just be saved and I'll say value equals and I can say save it here as well now when I close my button I'll put whatever I want to display on it here so in this case I'm gonna say save and I'll copy this actually and I'm gonna just use the same thing except instead of name I'm gonna say new item I don't know why at that tabbed there and will give that value of new item as well and obviously now I'm just gonna make this add item I mean I could make a new item too it doesn't really matter and even between here I'm going to add an input field which is my text that you're gonna type in for when you create a new button so I'm gonna say input will say type equals text and we'll say name equals I so could say item why not I know stroyed not the best name actually let's just say new alright news probably not a good name either but whatever that's fine okay so type equals text name equals new and sweet now what I'm gonna do now is add those check buttons in beside all of our items so obviously if our item is complete we want that check button to start off as checked and if it's not we want it to not be checked so to do this it's similar to the text we're just gonna say input I'm gonna say type equals and in this case checkbox will say value equals clicked and you can call this whatever you want but just remember this name because we're gonna need to use this I'm gonna say name is equal to and this is a little bit weird but we're gonna set the name equal to the ID of our item so to do this what I'm gonna do is just go in here and say item dot ID and before that I'm gonna put a C so that what we're gonna do now is we're gonna say all of our check buttons because this is gonna create a bunch of different check buttons right they're gonna be given the name C and then whatever the ID of that button is this will just make it way easier for us to determine which check button was checked and what item that corresponds to and you'll see how we do that later so let's copy this now and I'm going to put it right here as well so inside these Li tags now the only difference is up here where it says is completely if item dot complete equals true I'm just gonna type checked like this which will default it to start off checked that's all that's gonna do for us okay so now we've actually set up this form the last thing to add is our CSRF token that we always need to add whenever we create a token or a forms are so CSRF underscore token like that and then hit save so now that we've done that our HTML will be showing up all night and now we just need to handle this from our view so remember our view is called index so what I want to do in here now very similar to create is I want to first off start by checking whether or not we have posted something or we're getting something so for posting something we're gonna say if and then this case response dot post or not post Seraph dot method equals equals post like that then we will start doing all the stuff in terms of saving and adding items now I want to quickly go back here and talk about something for a second so right now we have two buttons we have save and we have new item and these buttons might have different functions and they do in this instance so for example save well we only want save to look at and update the check buttons right that's what it's gonna do it's just gonna update your check buttons if you've completed an item or if you haven't completed it whereas our new item button or add item button is going to take the text from this text field and add it as a new item on our list so we need a way to determine which button we clicked so we can determine what function we're going to perform so to do this what you can do actually is gonna say if response dot post dot gets and then here you can put the name of your button so in this case I'm gonna say we'll start off by doing save save like this okay now what this does actually is whenever you get a post request from the server what's gonna happen is all the information in this form here is gonna be passed in what's known as a dictionary to our view so what's gonna happen is we're gonna get a dictionary that looks something like this so we'll have save and it will either have no value or it will have a value of whatever we typed ears value so for example save if we click this button what's gonna happen is it's gonna be added to a dictionary which is all of the information from this form and it's gonna be given this value only if we click it so what's gonna happen is we're gonna get the name save points to the value save and it's gonna look like this precisely okay we're also gonna get all of the information for our check buttons so what will happen is we'll get something like C 1 which will be that ID right C 1 and that'll point to you in here it'll say and I'll print this out after you so you guys can have a look at it it'll say clicked if we clicked the check button if we didn't click the check button we're just gonna get a blank string or c1 might not even show up in the dictionary okay so and then we can also try what do you call it for example like add item we can do the same thing with add item now the thing is if we click add item then it will come in and it will give the value of add item otherwise it won't give us any value just give us a blank string and you guys will see how this works in a second I'm gonna print it out for you so you can have a look so let's actually if we are posting let's print response dot post like that so you guys can have a look okay so anyways so we're gonna see if we are saving so if we're saving then this will evaluate to true because there'll be some value so that will just work otherwise we'll say what do you call it Elif response dot post and dot get and in this case instead of saying say if we're gonna say new I think was a new item I keep forgetting what I call this yes new item awesome new item okay so we'll just pass down here for now and let's work inside of this first one up here so what we want to do up here is we want to look at all the different check buttons and determine whether or not they were clicked or not and then update our item accordingly so to do this what I'm gonna do is I'm going to loop through all of the items in our current todo list because we still have this value up here and we're gonna check the IDS of that with the check buttons and see if it was clicked or not so to do this I'm gonna say for I guess we'll say item in in this case LS dot item underscore set dot all with lowercase LS okay then what we will do is we'll say if and in this case response dot post dot get and in here what we're going to do is we're going to say c plus str and then item dot ID now what this is doing is getting the item ID converting it to a string and adding ascii to the beginning of it so we will get the exact same kind of pattern of what do you call it names or ids as we were setting up here right so we have seen that item ID that's just what we're doing here so if we get that and that is equal to the you have clicked then what we need to do is well we need to update that item so we'll say item dot complete is equal to and in this case true now otherwise so if we didn't get that it wasn't equal to clicked we'll take this but we're gonna set it equal to false so this is the same as like if you unclick the check button and it doesn't it's not checkmark then this will run right here what I'm doing now and then all we can simply do down here and just say is actually inside the forloop will say item dot save and there we are sweet so that's how that works and that's actually it for this saving the check buttons now what's left to do is to add a new item this is it's similar in terms of how we knew this but we're going to start by doing is getting the text that was in that text input field here so the name was new so say text is equal to and in this case response dot post dog yet and here we're saying new and now what I'm gonna do is before I add this new item because this will give us the text I want to validate that this is valid input now you can do whatever checks you want on this input and usually Django will do it for you but since we're not using Django forms using our own custom form we don't have that option of using is valid like we used here so what I'm gonna do is just say if text now you select you say the Len of text is greater than two so it's at least three characters then I will simply add that item to the todo list so to do that I'm gonna say LS dot item underscore set dark create and in this case we'll say text equals and I'm actually gonna have to rename this to txt here I will say txt and then we will say complete equals false like so otherwise I'm just gonna print out a message it just says like invalid input just so that we can have a look at this in the console and that should actually be about it now I'd be surprised if I didn't make any mistakes but let's give this a run I already have the server actually I'm gonna have to run the server again here run the server so let's now attempt to go to like ID two so now we can see we have first item second item third item not showing now if I decide to check an item or uncheck hit save what is your issue here name respond uh well it would help if I spell to response correctly where did i misspelled that recourse in the print statement anyways let's see if this will update now python managed up hi run server did i make another mistake let's see okay now let's try it safe there we go so then you can see that the item saves now if I go to maybe let's say page three and I want to add an item let's try hello and we click add item and now you can see that we get hello popping up and I can check I can save that I can unsaved it and if I go back to two you can see that obviously the same checking pattern is still there I could add a new item so let us say new item here add that and you can see that it's popping up and I can save that so that is how you make a custom form this is very useful what I've just shown you will allow you to do pretty well anything with forms because now you know how to get information from forms now I will show you actually what our post requests are looking like just so you can see or sorry was it requests like what I'm printing here I'll show you what that looks like and talked a little bit about that before we wrap up here so you can see that if I go here we have check button see and that is given a value of clicked you can see C 5 is given a value clicked and C 7 is given a value clicked so those IDs for our check buttons we see that save is given the value of save because we hit that Save button but we see that we're not seeing any other values here right so if we don't click an item or if we're not giving a value to it we're not gonna see it here so for example like if we have C 2 and we don't check that button you're just simply not gonna show up in the information that it passed to us which means that we can check if it's not there and then do something accordingly so the way that this get request works when we say get like this or this gap method is since this is it's like this is kind of a dictionary but this gap method is specific to this type of data structure and essentially if the item doesn't exist I believe it just returns none which means that if we ever put something like this so for example if save isn't there we simply won't run the block because if none obviously it's not gonna run so that's the way that that kind of works you can see I mean I brewed highly encourage you guys to kind of mess with this and do some requests print them out and see what it looks like that's really the best way to understand how this works you can see it's a type query dictionary and when you try to get something if it doesn't exist it just says none if it does exist it'll give you the value that corresponds with it and in some instances you can actually have multiple values pointing to the same name so that's just something to keep in mind that you guys might notice when you go through this so anyways that is essentially how that works we've create a custom form now we know to add things and with this information we can go into creating some more complex stuff so in the next video I think I'm gonna be adding bootstrap onto the website making things look a little bit nicer maybe adding a sidebar will do some stuff like that and then later on we're gonna get into user registration and all that kind of stuff so that you can actually have all of your todo lists stored under a certain user so anyway so that has been it for this video if you guys enjoyed please make sure you leave a like and subscribe and I'll see you in another video
