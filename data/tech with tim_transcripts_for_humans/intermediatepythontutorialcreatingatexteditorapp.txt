With timestamps:

00:02 - [Music]
00:04 - foreign
00:15 - I'll be walking you through a mini
00:17 - python project where we will create a
00:20 - basic text editor if you enjoy this
00:22 - project feel free to extend it and add
00:24 - more features here I'm just going to
00:26 - give you the basics show you how to set
00:27 - everything up and introduce you to a
00:29 - graphics Library that's built into
00:31 - python called tkinter This is fairly
00:33 - basic but for beginner or intermediate
00:35 - programmers this is a great project and
00:38 - kind of a great starting place where you
00:39 - can go and extend learn more and add to
00:42 - this project with that said if you want
00:44 - to learn more about python you want some
00:46 - more advanced projects or just to become
00:48 - a better software engineer check out my
00:50 - course programmingexpert.io there'll be
00:52 - a link in the description if you're
00:54 - interested in web3 or blockchain
00:56 - development I have a course for that
00:57 - called blockchain expert same thing Link
01:00 - in the description with that said let's
01:02 - get into the project
01:05 - thank you
01:08 - all right so we're going to get started
01:10 - but I quickly want to give credit to
01:12 - this blog where I've actually taken this
01:14 - idea and quite a bit of this code from
01:16 - I've altered it slightly just to make it
01:18 - a bit better for the video but if you're
01:19 - looking for some other python project
01:21 - ideas check out the blog has a bunch of
01:23 - them and I'm probably going to be
01:24 - converting a lot of the ideas they have
01:26 - there into full videos where I really
01:28 - explain everything that's going on which
01:30 - is kind of what's missing from that kind
01:32 - of basic blog post regardless let's dive
01:34 - into it here the first thing we need to
01:36 - do is import the graphics Library we're
01:39 - going to use which is known as tkinter
01:40 - so we're going to say import TK enter
01:43 - uh and then this is not from we're going
01:45 - to say as TK now TK is just the Alias
01:49 - that we're going to use for the tkinter
01:51 - library just so we don't have to
01:52 - continually write out T kincher now the
01:55 - way that tkinder works is it allows us
01:57 - to have a grid layout and place
01:59 - different widgets on a screen so we can
02:02 - create like a tkinter window and then
02:04 - within that window we can put buttons we
02:05 - can put like a text editing component we
02:08 - can put images we can put all kinds of
02:10 - different stuff and you can actually
02:11 - create some pretty interesting and
02:13 - complex user interfaces we're going to
02:15 - do a pretty basic one here but to get
02:17 - started I'm going to create a main
02:18 - function and inside of this main
02:20 - function is where I'm going to write a
02:22 - bulk of the tkinter code so the first
02:24 - thing that we need to do here is create
02:26 - a tkinter window that's where we're
02:28 - going to place all of our different
02:29 - widgets on so I'm going to say my window
02:32 - is equal to TK Dot and then capital t k
02:35 - like that now what I'm going to do is
02:37 - set the title of the window so I'm going
02:39 - to say window dot title and then we'll
02:42 - just call this text editor and then I'm
02:45 - going to go down here and say window dot
02:48 - main Loop now main Loop is essentially
02:52 - going to continually run the window and
02:53 - keep it alive for us until the user hits
02:56 - the x button on the window or Force
02:58 - quits it so I just want to demonstrate
03:00 - this to you so you can see what the
03:01 - window looks like then we'll start
03:03 - placing some widgets onto it so I've
03:05 - created this main function I've set my
03:07 - window or created the window set the
03:09 - title did window.main loop it's
03:11 - important that you have that so it keeps
03:12 - running and then I've called the main
03:14 - function and now if I run my code you
03:16 - see we get a little tkinter window here
03:18 - we can kind of change the size of it
03:19 - okay perfect now that we've done that
03:22 - what I want to do is kind of set the
03:24 - size of the window and explain to you
03:26 - what we're going to put on it so since
03:28 - we're going to have a text editor we're
03:30 - going to have a few different kind of
03:31 - components or what we call widgets on
03:33 - the screen we're going to have the text
03:35 - editing component and then we're going
03:37 - to have two buttons one button that says
03:39 - open and one button that says save so
03:41 - when you hit save it's going to allow
03:42 - you to save at your computer open
03:43 - obviously you're going to open it and
03:45 - then you're able to edit the text so the
03:47 - first widget we're going to build is the
03:49 - text edit widget now out to do that
03:51 - we're going to make a variable called
03:52 - text underscore edit and this is going
03:54 - to be equal to TK dot text text is just
03:58 - the text editing component widget
03:59 - whatever you want to call it now inside
04:01 - of here the first mandatory argument we
04:03 - have to pass is the window that we want
04:05 - to place this on I want to place this on
04:07 - my TK window so that's why I'm placing
04:09 - it next we have the option to pass for
04:11 - example a font we don't have to do this
04:13 - but I'm going to and then you could pass
04:15 - a background color foreground color
04:17 - border there's all kinds of different
04:18 - arguments I'm not going to get into all
04:20 - of them because that would be an entire
04:21 - video on its own but for now we'll do a
04:24 - font and then we'll set the size of this
04:26 - to be 18. now if you wanted it to be
04:28 - bold for example you would type bold
04:30 - afterwards you could do italic there's a
04:32 - lot of different options again I'm not
04:33 - going to get into all of them so now
04:35 - that we have our text edit component I
04:37 - want to render this onto the screen now
04:39 - remember I said that TK enter uses a
04:41 - grid system so this allows you to lay
04:43 - things out based on a row and column
04:46 - position now row 0 and column 0 is going
04:49 - to be the top left hand and corner of
04:51 - your window so if you were to place at
04:53 - column one then you'd be moving over to
04:54 - the right if you place that Row one
04:56 - you'd be going down by one because again
04:58 - column zero row zero is top left hand
05:00 - corner now the row and column system
05:03 - depends on how many elements you have
05:05 - inside of it but for now I'm gonna say
05:08 - text edit and then I have to use this
05:10 - method called dot grid and Dot grid is
05:13 - going to place this element onto the
05:15 - grid of the parent so I'm going to say
05:17 - row
05:19 - is equal to zero and column is equal to
05:22 - one and that's because I want the text
05:23 - edit component to be on the right hand
05:25 - side and then my buttons are going to be
05:27 - on the left hand side now there's a lot
05:29 - of other arguments you can pass here as
05:30 - well but for now we can just do row 0
05:32 - column zero and just see what this looks
05:34 - like
05:34 - okay so when I open this up see that I
05:37 - now have my text editing component and
05:39 - even though I've placed this at column
05:41 - one it's taking up the entire screen
05:43 - because I don't have anything in column
05:45 - zero so just automatically going to fill
05:47 - the entire screen now if you wanted to
05:50 - set the size of this component what you
05:52 - actually would have to do is set the
05:54 - size of the row and column that you're
05:56 - placing this component into I know it
05:59 - seems a little bit strange but what we
06:00 - can do is the following we can say
06:01 - window dot configure and then row and
06:05 - then we're going to pass row 0 and then
06:07 - we can say the minimum size is equal to
06:10 - and then something like 400. if we do
06:13 - that now we're going to be setting the
06:14 - size of our row to 400 and we can do the
06:17 - same thing
06:18 - for our column we can set this to a size
06:20 - of say 500. so now when I run this I get
06:23 - an error and that's because sorry this
06:25 - is not configure row it is row configure
06:28 - and it's not configured column it is
06:30 - column configure okay so let's try this
06:33 - now and notice that everything is a
06:35 - little bit larger so we've manually set
06:37 - the size there of the column and of the
06:39 - row now we'll fix this layout in a
06:41 - second but for now you can see kind of
06:43 - how I've adjusted the size using this
06:45 - row configure and column configure and I
06:48 - see the issue here I need to configure
06:49 - column one to be this size not column
06:52 - zero so now if I go back and change it
06:54 - notice we're all good because we didn't
06:56 - set the size of column 0 which right now
06:59 - has a size of 0 because nothing's inside
07:01 - of it
07:02 - okay so now that we've done that we have
07:03 - the text edit component the next thing
07:06 - we want to do is create the buttons and
07:07 - then place the buttons onto the screen
07:09 - so how do we create the buttons well I
07:11 - want to have a frame and the frame is
07:13 - going to be just like a kind of vertical
07:15 - column that is going to store my
07:18 - different buttons so I'm going to say
07:20 - frame is equal to TK dot frame now
07:24 - inside of the frame same thing I need to
07:26 - specify what window I want this to be on
07:28 - and I'm going to pass a few other
07:29 - arguments so I'm going to pass relief
07:32 - relief is essentially the 3D appearance
07:34 - of the element and for this I'm going to
07:37 - say TK which remember is my tkinter
07:39 - library here Dot and then raised and
07:42 - that's going to raise the element up a
07:44 - bit so it looks three-dimensional then
07:46 - I'm going to do BD which stands for
07:47 - border and I'm going to set that to 2 so
07:50 - we have a 2 pixel border around our
07:52 - frame okay so let's just place the frame
07:55 - into the window so we can see what it
07:57 - looks like then we can place the buttons
07:58 - onto the frame so I'm going to say frame
08:00 - dot grid and remember I want the frame
08:03 - to be on the left side so I'm going to
08:04 - go row equals zero and I'm going to say
08:07 - column equals zero as well so now if we
08:11 - run we should have our frame on the left
08:12 - hand side of the screen and it is there
08:14 - but the issue is we haven't set the size
08:16 - of the frame so it's there but we're
08:19 - just not seeing it so if I want to have
08:21 - the frame have a size I need to put
08:23 - something inside of it or I need to
08:24 - manually set the width and the height so
08:26 - what we can do now is just put some
08:28 - things inside of our frame and then we
08:31 - can kind of render the frame afterwards
08:33 - so underneath my frame I'm going to
08:35 - create my buttons now to do that I'm
08:36 - going to say save button is equal to TK
08:40 - dot button again I'm going to place this
08:43 - actually on my frame I don't want it on
08:45 - the window I want it on the frame the
08:47 - frames that I'm going to go on the
08:48 - window and then I'm going to specify the
08:51 - text and I believe the text is just text
08:53 - like this we'll call this save there's a
08:56 - few other things we can do but for now
08:57 - we're just going to do that next we're
08:59 - going to have the open Button I'm going
09:01 - to say this equal to T okay dot button
09:03 - again this will go on the frame and the
09:07 - text will be equal to open now we need
09:10 - to render these onto the frame just like
09:12 - we rendered the frame onto the window so
09:14 - I'm going to say
09:16 - button
09:18 - dot grid and just like our window has a
09:21 - grid our frame has a grid as well
09:23 - so I'm going to say row is equal to zero
09:27 - column is equal to zero for my save
09:28 - button I want that at the top then I'm
09:31 - going to say open Button
09:33 - dot grid and then row is equal to one
09:36 - this is going to place it below and then
09:39 - column is equal to zero okay so now if I
09:43 - do that we should be seeing these
09:45 - buttons appear although it says call
09:47 - this needs to be column sorry so let's
09:49 - fix that and if we rerun we can see our
09:53 - two buttons now they're looking a little
09:55 - bit weird
09:56 - so if we want to fix this what we need
09:58 - to do is we need to make our frame be at
10:01 - the top right now it's kind of centered
10:03 - uh vertically in the middle of the
10:05 - screen you want to push the frame
10:06 - upwards and then we want to make the
10:08 - buttons kind of expand a bit and be a
10:10 - little larger so we're going to start by
10:12 - making our frame go to the top of the
10:13 - screen to do that I'm going to go to
10:15 - frame dot grid here I'm going to pass
10:17 - another argument called sticky now
10:19 - sticky allows us to stick the frame to a
10:22 - certain side of the screen so I'm going
10:24 - to stick this to NS now when you write
10:27 - NS what that actually means is we are
10:29 - going to expand the frame so that it
10:30 - sticks to the north which is the top and
10:32 - to the south side of whatever it's
10:35 - inside of so in this case just the
10:37 - window so if you were to do es like that
10:39 - or east west sorry then you'd be
10:41 - expanding and sticking to either side on
10:43 - the East and the west of the window so
10:46 - if I do at s then it's just the opposite
10:47 - we're doing this vertically hopefully
10:49 - that makes a bit of sense but that's
10:50 - going to make the frame fill the entire
10:52 - screen so let's have a look at that now
10:54 - and notice now we fill the entire screen
10:57 - in our buttons by defaults are going to
10:58 - be at the top because we haven't
11:00 - specified like a sticky argument for the
11:02 - buttons okay perfect next what we're
11:05 - going to do is add a little bit of
11:06 - padding between the frame and between
11:08 - our different buttons so for my save
11:11 - button for example when I put this in
11:13 - the grid I'm going to say pad underscore
11:15 - actually I'm not sure if it's pad
11:17 - underscore just pad I think it's pad X
11:19 - like this is going to be equal to 5
11:21 - pixels so pad 5 pixels on both the right
11:24 - and left hand side and then I'm going to
11:26 - say pad and I think this is y and we'll
11:29 - Pat it by five pixels there as well
11:32 - now coming here we can just pad this one
11:34 - by five pixels and now we should see
11:36 - that it's a little bit separated from
11:37 - the frame so let's do that and notice
11:39 - now that we are separated from the frame
11:41 - we can press on our buttons and see how
11:43 - the frame is kind of elevated it's
11:44 - raised up a little bit that's because we
11:46 - specified that argument okay next what
11:49 - we can do is we can make our buttons be
11:52 - the same width so you saw there that
11:54 - they were smaller just because one of
11:56 - them has I guess larger text than the
11:57 - other one so the way that we can make
11:59 - our buttons be the same width is we can
12:01 - use this sticky property so I can say
12:04 - sticky
12:05 - is equal to and then I can go ew so East
12:09 - West again that's going to allow me to
12:11 - expand outwards in the east and west
12:14 - Direction so in the uh what do you call
12:16 - it horizontal direction if you just did
12:18 - East then you would stick to the east
12:19 - side if you did West you'd go to the
12:21 - West Side
12:22 - Etc there's a bunch of different
12:22 - arguments here okay and then for this
12:24 - one same thing East West and now we
12:27 - should see it expanding so let's run
12:28 - this and notice now our buttons are the
12:31 - same width we expand to the full size of
12:33 - our frame okay fantastic and if we go
12:36 - here we can write in our text editor so
12:39 - we're getting somewhere next what we
12:40 - need to do is make the buttons actually
12:42 - do something and then allow us to uh
12:45 - like save and open the file all right so
12:48 - let's go with that
12:49 - so for our buttons here there is an
12:52 - argument that we can pass which is
12:54 - command Now command is going to be a
12:57 - function that we want to call whenever
12:59 - we press the button so let's do a very
13:01 - basic one we're going to say Define test
13:05 - okay print run and I'm just going to
13:08 - show you that if I I write the name of
13:10 - this function here then uh what do you
13:12 - call it tkinter is going to call this
13:14 - test function anytime this button is
13:17 - pressed so if I go here and I click on
13:19 - Save notice that Ron is printing out in
13:21 - my terminal okay
13:23 - perfect so what we want to do
13:26 - is we want to have a function that is
13:28 - open file
13:30 - okay we want to have another function
13:32 - that is
13:34 - save file
13:36 - like this now in these functions what
13:38 - we're going to do is either open a file
13:40 - which means we're going to replace the
13:41 - current contents of our text editor with
13:43 - the contents of a new text file or we're
13:46 - going to save the existing contents to a
13:48 - file and then I guess we could continue
13:49 - editing it so we can start here in our
13:51 - open file function where we're going to
13:53 - take two parameters window and text edit
13:56 - these are the two things that we need
13:58 - from the main function to be able to
14:00 - kind of modify the screen and change
14:02 - what's showing up in our text editing
14:04 - what do you call it widget now before we
14:06 - do that we're going to say from
14:08 - tkinter Dot and I believe this is file
14:11 - dialog let me just check my cheat sheet
14:14 - that is correct we are going to import
14:16 - the ask open file name and if we spell
14:21 - this correctly the ask save as file name
14:26 - like that
14:28 - okay so these are two dialogues or kind
14:30 - of things that we can use to pop open
14:31 - that you know save as open as Etc okay
14:34 - so first open file well the first thing
14:36 - we need to do when we're opening a file
14:38 - is Select that file so to do that we're
14:40 - going to say the file path is equal to
14:43 - ask
14:44 - open file name and here we need to pass
14:48 - all of the different file types we could
14:51 - potentially be opening so file types are
14:54 - going to be like a text file a python
14:56 - file Etc in our case we probably just
14:58 - want to accept text files so to do that
15:00 - we're going to pass inside of here a
15:02 - tuple and we're going to say
15:04 - text files and then we're going to say
15:06 - the extension which is
15:08 - asterisks.txt so you just give a name
15:11 - this is like the options of things you
15:13 - can select and then a pattern that you
15:15 - want to match files against in our case
15:17 - we're only looking at anything that
15:19 - starts with whatever and ends in Dot txt
15:22 - okay
15:23 - so that's the first thing now that we
15:25 - have the file path we just want to make
15:27 - sure the user actually did select a file
15:29 - so I'm going to say if not file path
15:31 - meaning they didn't select something
15:33 - then return because we can't open
15:35 - anything if they haven't selected a file
15:37 - otherwise we're going to open this file
15:40 - and then put it inside of our kind of
15:43 - like text editor component so the first
15:45 - thing we're going to do is get rid of
15:46 - everything that's currently inside of
15:48 - our text editor so to do that we're
15:50 - going to say text edit dot delete and
15:53 - we're going to delete from 1.0 Now 1 0
15:56 - here is a little bit weird but this is
15:58 - saying line and then position or
16:00 - character So when you say one you're
16:02 - saying line one which is the first line
16:04 - and then zero which is the first
16:06 - character so this is the very start of
16:08 - the file it's a little bit weird because
16:09 - you think it'd be 0.0 but they've done
16:12 - 1.0 so the first line is line one where
16:14 - the first character is zero I know it's
16:16 - a little bit backwards but that's what
16:17 - they have then we're going to say TK dot
16:20 - end and Dot end is going to represent
16:22 - the very end of the file however many uh
16:24 - like lines are in it just going to be
16:26 - the ending index so kind of a global
16:27 - variable we can use there okay now that
16:30 - we have that deleted we are going to
16:32 - open the file so we're going to say with
16:34 - open file path and then we're going to
16:37 - open this in read mode and we're going
16:39 - to say open this as F okay now we're
16:42 - going to read in the contents of the
16:43 - file to do that we're going to say
16:45 - content
16:46 - is equal to F dot read
16:49 - okay so this allows us to open the file
16:52 - we have the file object as F we're
16:54 - reading the contents of the file now
16:55 - we're going to take the contents and put
16:57 - that inside of our text editing
16:59 - component so we're going to say here
17:00 - text edit dot insert and we're going to
17:04 - insert at TK dot end
17:07 - the content now since we've deleted
17:10 - everything inside of the text edit
17:12 - component end is now going to be the
17:13 - very beginning of the file so at the
17:15 - beginning of the file insert all of the
17:17 - content there you go we've just placed
17:19 - that inside then last thing we can do is
17:22 - change the name of our window so that
17:23 - it's the name of this file like you
17:25 - would have in something like Microsoft
17:26 - Word or text edit so we're going to say
17:28 - window Dot and I think this is just
17:31 - title then we can use an F string and
17:34 - we're going to say this is
17:37 - text actually not text we're going to
17:39 - say
17:40 - file path and then we can do something
17:43 - like open file colon and then whatever
17:47 - the name of the file is you can choose
17:49 - what you want to put here I'm just kind
17:51 - of doing this so we can see that we're
17:52 - changing the window title all right
17:54 - before we go much further let's try to
17:56 - use this function and see if it actually
17:57 - works so the way that we can do that is
17:59 - we can go to R not save button but to
18:02 - our open button and we can set the
18:04 - command now remember that we need to
18:07 - write the name of the function as our
18:10 - Command the issue is we have to accept
18:12 - two arguments here in the function the
18:14 - window and text edit and I can't just do
18:16 - this I can't say command is equal to
18:18 - open file and then write the two
18:20 - arguments in if I do that I'm
18:22 - immediately going to call this function
18:24 - it's not going to be called when I press
18:26 - the button because what happens when you
18:28 - press the button is it takes the
18:29 - function name and then it calls it this
18:31 - is different this is actually calling
18:33 - the function right away so what we
18:35 - actually need to do is use something
18:36 - called a Lambda which essentially is
18:39 - like a Anonymous function it's a way to
18:41 - write a function in one line so we're
18:44 - going to write Lambda colon and then
18:46 - open file and we're going to pass window
18:48 - and then our text edit component like
18:51 - that so really what this means is now we
18:53 - have a function that calls this function
18:55 - with the arguments that we need so open
18:58 - Button will use this function it will
19:00 - call it which will then call this
19:02 - function with the required arguments a
19:04 - little bit Advanced syntax there but
19:05 - hopefully that makes a tiny bit of sense
19:07 - okay let's try to run this now and see
19:09 - if we can open a file so I'm going to go
19:11 - to open and I guess we need a file that
19:14 - I can potentially open I don't think I
19:16 - have any text files on here uh so let me
19:18 - create create a new text file story and
19:20 - then once we do that we can try to open
19:22 - it all right so let's try to open this
19:23 - file I just created one here on my
19:26 - desktop and we have test when I opened
19:29 - up notice it loads the contents of that
19:31 - file perfect okay now that we know how
19:34 - to open a file let's try to save a file
19:37 - so saving a file is going going to be
19:38 - very similar here same thing we want to
19:40 - take file path is equal to ask save as
19:44 - file name and then same thing we're
19:47 - going to take our file types here we can
19:49 - just copy this and paste it inside of
19:52 - here
19:53 - okay next we're going to say if not file
19:56 - path
19:57 - then return and now we are going to open
20:00 - a new file and then take the content of
20:02 - our text edit component or widget and
20:04 - put it inside of that file so to do this
20:06 - we're going to say with open
20:09 - file path this time we're going to open
20:11 - in W mode which stands for write mode
20:13 - keep in mind this will override a file
20:15 - if it already exists I'm then going to
20:17 - say as F then I'm going to say my
20:19 - content is equal to and now we need to
20:22 - take our window and text edit as
20:24 - parameters again so let's paste those in
20:26 - here I'm going to say text edit dot get
20:30 - and I'm going to get from the beginning
20:31 - of the file to the end of the file okay
20:34 - so similar to deleting this is just
20:36 - going to give us whatever text is in
20:38 - these positions and now I can say F dot
20:42 - right
20:43 - and I can write my content
20:46 - and then same thing I can change my
20:49 - title here so I say window.title and
20:51 - then this is the file path feel free to
20:54 - change that if you want but that's what
20:55 - I'll have it for now
20:57 - okay so now that we have that let's do
20:59 - the same thing to call our save file so
21:02 - I'm going to copy this command
21:04 - and paste it here and just change this
21:06 - to say save file so let's try this out
21:09 - I'm going to go run
21:11 - save actually let's go
21:14 - hello world okay save this as
21:18 - helloworld.txt we'll just save this onto
21:21 - my desktop okay now let's shut this down
21:24 - rerun it open and if I go here to hello
21:28 - world and open it up I get Hello World
21:31 - perfect so our text editor is now
21:33 - functional the very last thing I want to
21:35 - show you how to do is add keyboard
21:36 - shortcuts so now you can hit Ctrl s and
21:39 - Ctrl o uh to run those same commands
21:42 - Okay so to do that we're going to go
21:43 - down to the bottom of our program here
21:45 - and we're going to bind a command to a
21:48 - key press so the way to do this is Type
21:50 - window dot bind now the command for
21:54 - control s is control dash s like this so
21:59 - make sure you type it exactly as I have
22:00 - it with the kind of angle brackets
22:02 - control fully typed out dash s and then
22:05 - you combine this to the same command you
22:07 - have here
22:08 - so just copy it and paste it
22:12 - but very important make sure you put an
22:15 - X here or some parameter because for
22:18 - this it actually passes one argument I
22:21 - know it seems a bit weird but
22:22 - essentially calls whatever function you
22:24 - have here with a single argument
22:26 - so you need to make sure you have an
22:28 - argument here otherwise it's going to
22:30 - fail if you haven't kind of figured out
22:32 - how this works this is a function
22:34 - essentially the same as saying Define
22:35 - function whatever and then X is an
22:38 - argument that you can pass to the
22:39 - function you could have multiple
22:40 - arguments like that in our case we're
22:42 - just going to have one okay now I'm
22:44 - going to copy the same thing and we're
22:46 - going to do control o for open and then
22:48 - we're going to go here
22:50 - to open file and again just make sure
22:52 - you have at least one argument here or
22:53 - that you have one argument here
22:55 - otherwise it's not going to work
22:57 - so now if I re-run and I use my keyboard
23:00 - I can do control o and Ctrl s and I can
23:04 - toggle those commands
23:06 - all right so let me zoom out here just
23:07 - so you can read all of the code at once
23:09 - or most of the code at once and with
23:12 - that I think I'm going to wrap up the
23:14 - video here so this was just a mini
23:16 - python project wanted to give you a
23:18 - quick introduction to tkinter show you
23:20 - how you can do things like open files
23:22 - save files and just get you know a cool
23:24 - kind of text editor under your belt
23:26 - obviously this is very very basic
23:28 - there's a lot more stuff you would want
23:29 - to do like setting something to bold
23:31 - maybe italicizing having headers all
23:35 - kinds of different stuff you can go out
23:36 - and create using tkinter hopefully this
23:38 - gave you a bit of inspiration and you
23:40 - enjoyed the video so with that said I'm
23:42 - going to wrap it up here remember to
23:44 - check out programming expert and
23:45 - blockchain expert from the link in the
23:47 - description I look forward to seeing you
23:48 - in another mini python project tutorial
23:53 - foreign
23:58 - [Music]

Cleaned transcript:

foreign I'll be walking you through a mini python project where we will create a basic text editor if you enjoy this project feel free to extend it and add more features here I'm just going to give you the basics show you how to set everything up and introduce you to a graphics Library that's built into python called tkinter This is fairly basic but for beginner or intermediate programmers this is a great project and kind of a great starting place where you can go and extend learn more and add to this project with that said if you want to learn more about python you want some more advanced projects or just to become a better software engineer check out my course programmingexpert.io there'll be a link in the description if you're interested in web3 or blockchain development I have a course for that called blockchain expert same thing Link in the description with that said let's get into the project thank you all right so we're going to get started but I quickly want to give credit to this blog where I've actually taken this idea and quite a bit of this code from I've altered it slightly just to make it a bit better for the video but if you're looking for some other python project ideas check out the blog has a bunch of them and I'm probably going to be converting a lot of the ideas they have there into full videos where I really explain everything that's going on which is kind of what's missing from that kind of basic blog post regardless let's dive into it here the first thing we need to do is import the graphics Library we're going to use which is known as tkinter so we're going to say import TK enter uh and then this is not from we're going to say as TK now TK is just the Alias that we're going to use for the tkinter library just so we don't have to continually write out T kincher now the way that tkinder works is it allows us to have a grid layout and place different widgets on a screen so we can create like a tkinter window and then within that window we can put buttons we can put like a text editing component we can put images we can put all kinds of different stuff and you can actually create some pretty interesting and complex user interfaces we're going to do a pretty basic one here but to get started I'm going to create a main function and inside of this main function is where I'm going to write a bulk of the tkinter code so the first thing that we need to do here is create a tkinter window that's where we're going to place all of our different widgets on so I'm going to say my window is equal to TK Dot and then capital t k like that now what I'm going to do is set the title of the window so I'm going to say window dot title and then we'll just call this text editor and then I'm going to go down here and say window dot main Loop now main Loop is essentially going to continually run the window and keep it alive for us until the user hits the x button on the window or Force quits it so I just want to demonstrate this to you so you can see what the window looks like then we'll start placing some widgets onto it so I've created this main function I've set my window or created the window set the title did window.main loop it's important that you have that so it keeps running and then I've called the main function and now if I run my code you see we get a little tkinter window here we can kind of change the size of it okay perfect now that we've done that what I want to do is kind of set the size of the window and explain to you what we're going to put on it so since we're going to have a text editor we're going to have a few different kind of components or what we call widgets on the screen we're going to have the text editing component and then we're going to have two buttons one button that says open and one button that says save so when you hit save it's going to allow you to save at your computer open obviously you're going to open it and then you're able to edit the text so the first widget we're going to build is the text edit widget now out to do that we're going to make a variable called text underscore edit and this is going to be equal to TK dot text text is just the text editing component widget whatever you want to call it now inside of here the first mandatory argument we have to pass is the window that we want to place this on I want to place this on my TK window so that's why I'm placing it next we have the option to pass for example a font we don't have to do this but I'm going to and then you could pass a background color foreground color border there's all kinds of different arguments I'm not going to get into all of them because that would be an entire video on its own but for now we'll do a font and then we'll set the size of this to be 18. now if you wanted it to be bold for example you would type bold afterwards you could do italic there's a lot of different options again I'm not going to get into all of them so now that we have our text edit component I want to render this onto the screen now remember I said that TK enter uses a grid system so this allows you to lay things out based on a row and column position now row 0 and column 0 is going to be the top left hand and corner of your window so if you were to place at column one then you'd be moving over to the right if you place that Row one you'd be going down by one because again column zero row zero is top left hand corner now the row and column system depends on how many elements you have inside of it but for now I'm gonna say text edit and then I have to use this method called dot grid and Dot grid is going to place this element onto the grid of the parent so I'm going to say row is equal to zero and column is equal to one and that's because I want the text edit component to be on the right hand side and then my buttons are going to be on the left hand side now there's a lot of other arguments you can pass here as well but for now we can just do row 0 column zero and just see what this looks like okay so when I open this up see that I now have my text editing component and even though I've placed this at column one it's taking up the entire screen because I don't have anything in column zero so just automatically going to fill the entire screen now if you wanted to set the size of this component what you actually would have to do is set the size of the row and column that you're placing this component into I know it seems a little bit strange but what we can do is the following we can say window dot configure and then row and then we're going to pass row 0 and then we can say the minimum size is equal to and then something like 400. if we do that now we're going to be setting the size of our row to 400 and we can do the same thing for our column we can set this to a size of say 500. so now when I run this I get an error and that's because sorry this is not configure row it is row configure and it's not configured column it is column configure okay so let's try this now and notice that everything is a little bit larger so we've manually set the size there of the column and of the row now we'll fix this layout in a second but for now you can see kind of how I've adjusted the size using this row configure and column configure and I see the issue here I need to configure column one to be this size not column zero so now if I go back and change it notice we're all good because we didn't set the size of column 0 which right now has a size of 0 because nothing's inside of it okay so now that we've done that we have the text edit component the next thing we want to do is create the buttons and then place the buttons onto the screen so how do we create the buttons well I want to have a frame and the frame is going to be just like a kind of vertical column that is going to store my different buttons so I'm going to say frame is equal to TK dot frame now inside of the frame same thing I need to specify what window I want this to be on and I'm going to pass a few other arguments so I'm going to pass relief relief is essentially the 3D appearance of the element and for this I'm going to say TK which remember is my tkinter library here Dot and then raised and that's going to raise the element up a bit so it looks threedimensional then I'm going to do BD which stands for border and I'm going to set that to 2 so we have a 2 pixel border around our frame okay so let's just place the frame into the window so we can see what it looks like then we can place the buttons onto the frame so I'm going to say frame dot grid and remember I want the frame to be on the left side so I'm going to go row equals zero and I'm going to say column equals zero as well so now if we run we should have our frame on the left hand side of the screen and it is there but the issue is we haven't set the size of the frame so it's there but we're just not seeing it so if I want to have the frame have a size I need to put something inside of it or I need to manually set the width and the height so what we can do now is just put some things inside of our frame and then we can kind of render the frame afterwards so underneath my frame I'm going to create my buttons now to do that I'm going to say save button is equal to TK dot button again I'm going to place this actually on my frame I don't want it on the window I want it on the frame the frames that I'm going to go on the window and then I'm going to specify the text and I believe the text is just text like this we'll call this save there's a few other things we can do but for now we're just going to do that next we're going to have the open Button I'm going to say this equal to T okay dot button again this will go on the frame and the text will be equal to open now we need to render these onto the frame just like we rendered the frame onto the window so I'm going to say button dot grid and just like our window has a grid our frame has a grid as well so I'm going to say row is equal to zero column is equal to zero for my save button I want that at the top then I'm going to say open Button dot grid and then row is equal to one this is going to place it below and then column is equal to zero okay so now if I do that we should be seeing these buttons appear although it says call this needs to be column sorry so let's fix that and if we rerun we can see our two buttons now they're looking a little bit weird so if we want to fix this what we need to do is we need to make our frame be at the top right now it's kind of centered uh vertically in the middle of the screen you want to push the frame upwards and then we want to make the buttons kind of expand a bit and be a little larger so we're going to start by making our frame go to the top of the screen to do that I'm going to go to frame dot grid here I'm going to pass another argument called sticky now sticky allows us to stick the frame to a certain side of the screen so I'm going to stick this to NS now when you write NS what that actually means is we are going to expand the frame so that it sticks to the north which is the top and to the south side of whatever it's inside of so in this case just the window so if you were to do es like that or east west sorry then you'd be expanding and sticking to either side on the East and the west of the window so if I do at s then it's just the opposite we're doing this vertically hopefully that makes a bit of sense but that's going to make the frame fill the entire screen so let's have a look at that now and notice now we fill the entire screen in our buttons by defaults are going to be at the top because we haven't specified like a sticky argument for the buttons okay perfect next what we're going to do is add a little bit of padding between the frame and between our different buttons so for my save button for example when I put this in the grid I'm going to say pad underscore actually I'm not sure if it's pad underscore just pad I think it's pad X like this is going to be equal to 5 pixels so pad 5 pixels on both the right and left hand side and then I'm going to say pad and I think this is y and we'll Pat it by five pixels there as well now coming here we can just pad this one by five pixels and now we should see that it's a little bit separated from the frame so let's do that and notice now that we are separated from the frame we can press on our buttons and see how the frame is kind of elevated it's raised up a little bit that's because we specified that argument okay next what we can do is we can make our buttons be the same width so you saw there that they were smaller just because one of them has I guess larger text than the other one so the way that we can make our buttons be the same width is we can use this sticky property so I can say sticky is equal to and then I can go ew so East West again that's going to allow me to expand outwards in the east and west Direction so in the uh what do you call it horizontal direction if you just did East then you would stick to the east side if you did West you'd go to the West Side Etc there's a bunch of different arguments here okay and then for this one same thing East West and now we should see it expanding so let's run this and notice now our buttons are the same width we expand to the full size of our frame okay fantastic and if we go here we can write in our text editor so we're getting somewhere next what we need to do is make the buttons actually do something and then allow us to uh like save and open the file all right so let's go with that so for our buttons here there is an argument that we can pass which is command Now command is going to be a function that we want to call whenever we press the button so let's do a very basic one we're going to say Define test okay print run and I'm just going to show you that if I I write the name of this function here then uh what do you call it tkinter is going to call this test function anytime this button is pressed so if I go here and I click on Save notice that Ron is printing out in my terminal okay perfect so what we want to do is we want to have a function that is open file okay we want to have another function that is save file like this now in these functions what we're going to do is either open a file which means we're going to replace the current contents of our text editor with the contents of a new text file or we're going to save the existing contents to a file and then I guess we could continue editing it so we can start here in our open file function where we're going to take two parameters window and text edit these are the two things that we need from the main function to be able to kind of modify the screen and change what's showing up in our text editing what do you call it widget now before we do that we're going to say from tkinter Dot and I believe this is file dialog let me just check my cheat sheet that is correct we are going to import the ask open file name and if we spell this correctly the ask save as file name like that okay so these are two dialogues or kind of things that we can use to pop open that you know save as open as Etc okay so first open file well the first thing we need to do when we're opening a file is Select that file so to do that we're going to say the file path is equal to ask open file name and here we need to pass all of the different file types we could potentially be opening so file types are going to be like a text file a python file Etc in our case we probably just want to accept text files so to do that we're going to pass inside of here a tuple and we're going to say text files and then we're going to say the extension which is asterisks.txt so you just give a name this is like the options of things you can select and then a pattern that you want to match files against in our case we're only looking at anything that starts with whatever and ends in Dot txt okay so that's the first thing now that we have the file path we just want to make sure the user actually did select a file so I'm going to say if not file path meaning they didn't select something then return because we can't open anything if they haven't selected a file otherwise we're going to open this file and then put it inside of our kind of like text editor component so the first thing we're going to do is get rid of everything that's currently inside of our text editor so to do that we're going to say text edit dot delete and we're going to delete from 1.0 Now 1 0 here is a little bit weird but this is saying line and then position or character So when you say one you're saying line one which is the first line and then zero which is the first character so this is the very start of the file it's a little bit weird because you think it'd be 0.0 but they've done 1.0 so the first line is line one where the first character is zero I know it's a little bit backwards but that's what they have then we're going to say TK dot end and Dot end is going to represent the very end of the file however many uh like lines are in it just going to be the ending index so kind of a global variable we can use there okay now that we have that deleted we are going to open the file so we're going to say with open file path and then we're going to open this in read mode and we're going to say open this as F okay now we're going to read in the contents of the file to do that we're going to say content is equal to F dot read okay so this allows us to open the file we have the file object as F we're reading the contents of the file now we're going to take the contents and put that inside of our text editing component so we're going to say here text edit dot insert and we're going to insert at TK dot end the content now since we've deleted everything inside of the text edit component end is now going to be the very beginning of the file so at the beginning of the file insert all of the content there you go we've just placed that inside then last thing we can do is change the name of our window so that it's the name of this file like you would have in something like Microsoft Word or text edit so we're going to say window Dot and I think this is just title then we can use an F string and we're going to say this is text actually not text we're going to say file path and then we can do something like open file colon and then whatever the name of the file is you can choose what you want to put here I'm just kind of doing this so we can see that we're changing the window title all right before we go much further let's try to use this function and see if it actually works so the way that we can do that is we can go to R not save button but to our open button and we can set the command now remember that we need to write the name of the function as our Command the issue is we have to accept two arguments here in the function the window and text edit and I can't just do this I can't say command is equal to open file and then write the two arguments in if I do that I'm immediately going to call this function it's not going to be called when I press the button because what happens when you press the button is it takes the function name and then it calls it this is different this is actually calling the function right away so what we actually need to do is use something called a Lambda which essentially is like a Anonymous function it's a way to write a function in one line so we're going to write Lambda colon and then open file and we're going to pass window and then our text edit component like that so really what this means is now we have a function that calls this function with the arguments that we need so open Button will use this function it will call it which will then call this function with the required arguments a little bit Advanced syntax there but hopefully that makes a tiny bit of sense okay let's try to run this now and see if we can open a file so I'm going to go to open and I guess we need a file that I can potentially open I don't think I have any text files on here uh so let me create create a new text file story and then once we do that we can try to open it all right so let's try to open this file I just created one here on my desktop and we have test when I opened up notice it loads the contents of that file perfect okay now that we know how to open a file let's try to save a file so saving a file is going going to be very similar here same thing we want to take file path is equal to ask save as file name and then same thing we're going to take our file types here we can just copy this and paste it inside of here okay next we're going to say if not file path then return and now we are going to open a new file and then take the content of our text edit component or widget and put it inside of that file so to do this we're going to say with open file path this time we're going to open in W mode which stands for write mode keep in mind this will override a file if it already exists I'm then going to say as F then I'm going to say my content is equal to and now we need to take our window and text edit as parameters again so let's paste those in here I'm going to say text edit dot get and I'm going to get from the beginning of the file to the end of the file okay so similar to deleting this is just going to give us whatever text is in these positions and now I can say F dot right and I can write my content and then same thing I can change my title here so I say window.title and then this is the file path feel free to change that if you want but that's what I'll have it for now okay so now that we have that let's do the same thing to call our save file so I'm going to copy this command and paste it here and just change this to say save file so let's try this out I'm going to go run save actually let's go hello world okay save this as helloworld.txt we'll just save this onto my desktop okay now let's shut this down rerun it open and if I go here to hello world and open it up I get Hello World perfect so our text editor is now functional the very last thing I want to show you how to do is add keyboard shortcuts so now you can hit Ctrl s and Ctrl o uh to run those same commands Okay so to do that we're going to go down to the bottom of our program here and we're going to bind a command to a key press so the way to do this is Type window dot bind now the command for control s is control dash s like this so make sure you type it exactly as I have it with the kind of angle brackets control fully typed out dash s and then you combine this to the same command you have here so just copy it and paste it but very important make sure you put an X here or some parameter because for this it actually passes one argument I know it seems a bit weird but essentially calls whatever function you have here with a single argument so you need to make sure you have an argument here otherwise it's going to fail if you haven't kind of figured out how this works this is a function essentially the same as saying Define function whatever and then X is an argument that you can pass to the function you could have multiple arguments like that in our case we're just going to have one okay now I'm going to copy the same thing and we're going to do control o for open and then we're going to go here to open file and again just make sure you have at least one argument here or that you have one argument here otherwise it's not going to work so now if I rerun and I use my keyboard I can do control o and Ctrl s and I can toggle those commands all right so let me zoom out here just so you can read all of the code at once or most of the code at once and with that I think I'm going to wrap up the video here so this was just a mini python project wanted to give you a quick introduction to tkinter show you how you can do things like open files save files and just get you know a cool kind of text editor under your belt obviously this is very very basic there's a lot more stuff you would want to do like setting something to bold maybe italicizing having headers all kinds of different stuff you can go out and create using tkinter hopefully this gave you a bit of inspiration and you enjoyed the video so with that said I'm going to wrap it up here remember to check out programming expert and blockchain expert from the link in the description I look forward to seeing you in another mini python project tutorial foreign
