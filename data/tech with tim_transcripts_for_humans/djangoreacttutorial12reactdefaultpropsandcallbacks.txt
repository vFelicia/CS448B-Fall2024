With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome to video 12
00:11 - in the django and react
00:13 - tutorial series now what we're going to
00:14 - be doing in this video is just
00:15 - continuing from where we left off in the
00:17 - last
00:18 - we're gonna be making it so that the
00:19 - settings page is actually proper and
00:21 - does what we want it to do
00:23 - now as i discussed what's involved with
00:25 - that is changing this title
00:26 - changing this create a room button title
00:28 - to be update room
00:30 - and then having this back button being
00:31 - removed so we're going to make the
00:33 - actual create a room component to be
00:36 - reusable
00:37 - and that's kind of the point of this
00:38 - this video i guess it's going to show
00:40 - you how we can make a component be used
00:41 - in multiple scenarios
00:43 - now i'll first just start by saying that
00:44 - once again this tutorial series is not
00:47 - following all the best practices all the
00:49 - industry standards
00:50 - this isn't something that you would
00:51 - probably see at you know like google or
00:53 - facebook like they would be doing things
00:54 - probably a lot different than the way
00:55 - i'm doing it right here
00:57 - the point of this series as i've said
00:58 - from the beginning is just to teach you
01:00 - how this stuff works
01:01 - to give you kind of a cool fun project
01:03 - to work on and this is exactly what i
01:05 - would do if i was just kind of building
01:06 - a hobby project
01:07 - i didn't really care a ton about the
01:09 - code quality and i just wanted to learn
01:11 - a new framework and kind of learn a
01:12 - backend thing like django as well
01:14 - and just see how they work and get some
01:16 - experience with it
01:17 - so keep that in mind you guys are
01:19 - welcome to be as critical as you want as
01:20 - the coding here
01:21 - but as i've said many times it's not
01:23 - meant to be industry standard and all of
01:25 - that
01:26 - so anyways let's continue so let's go to
01:28 - the create room page and actually before
01:30 - i do that let's
01:31 - kind of get a better introduction into
01:32 - this so if we have a look at render
01:34 - settings here which is what we did in
01:36 - the last video
01:37 - you can see we're calling create a room
01:39 - or we're using the create
01:40 - room page component now we pass all this
01:43 - information through right
01:44 - we pass the votes to skip this is stored
01:46 - in this current state of the room page
01:48 - we pass the guest can pause again stored
01:51 - in the state
01:52 - we pass the room code this dot room code
01:54 - is defined in the constructor so this
01:56 - dot room code is equal to this dot props
01:58 - dot match dot params.room code and then
02:01 - we pass
02:02 - this update true so that we know what we
02:04 - need to do
02:05 - in the create room page whether it's
02:06 - going to be creating or updating or
02:08 - whatever
02:09 - we also pass a callback that we should
02:11 - be calling whenever the room actually
02:13 - updates so we'll use that later but
02:15 - that's the information we're passing
02:17 - through
02:18 - so now what i want to do is in the
02:19 - create room page i want to take these
02:21 - props and actually use them right
02:23 - so here you can see that by default we
02:25 - have this dot state is equal to you know
02:27 - guess can pause we have votes to skip is
02:29 - equal to this.defaultvotes
02:31 - but i don't want it to be equal to these
02:33 - hard-coded values i want it to be equal
02:35 - to what we
02:36 - pass in through the props but the issue
02:38 - is that we're not always passing this
02:40 - information through
02:41 - through the props right if i go to home
02:42 - page and we have a look at
02:45 - create room page we're not passing any
02:47 - information through the props
02:48 - so we need a way to set the default
02:50 - value for the props right and again
02:52 - those props are just the piece of
02:53 - information we're passing in
02:55 - so this is where we're actually going to
02:56 - use something which is called default
02:58 - props
02:59 - we're going to define what the default
03:01 - value for our property should be
03:03 - so there's multiple ways to do this but
03:05 - this is the easiest way in my opinion
03:06 - we're going to define a static
03:08 - variable and it's going to be called
03:10 - default props
03:12 - and then it's going to be equal to the
03:13 - name of all of the props that we expect
03:15 - to be passed in
03:16 - as well as their value so what we're
03:18 - going to say is
03:19 - votes to skip and then we're going to
03:22 - set this equal to whatever we want the
03:23 - default to be
03:24 - which is 2 right then next we're going
03:27 - to say
03:27 - guest can pause this is going to be
03:30 - equal to whatever we want the default
03:32 - to be which is in this case true then we
03:34 - need
03:35 - update update the default for this i'm
03:37 - going to say is false
03:38 - then we need the room code the update
03:41 - for this i'm just going to say is null
03:42 - or sorry the update the default for this
03:44 - i'm going to say is null
03:45 - and then we need the update callback so
03:47 - i'm going to say update callback
03:49 - and that's going to be equal to just a
03:50 - default arrow function
03:52 - all right so that's all we need for our
03:54 - default props and pretty much this means
03:56 - if we don't pass
03:58 - any of these props through if any of the
03:59 - ones that are in here are not passed
04:01 - by default they will have these values
04:03 - just like a default parameter in python
04:05 - or some other languages
04:07 - all right so now that we have that let's
04:08 - actually start using them so inside of
04:10 - the state now
04:11 - rather than having the state be equal to
04:13 - true and this dot default votes which i
04:15 - just deleted
04:16 - we're going to say guess can pause is
04:18 - equal to this dot props
04:20 - dot guest can pause because that's the
04:22 - information we're passing through to
04:23 - the create room page same thing for
04:25 - default votes it's going to be this
04:27 - dot props dot votes to skip that way
04:31 - this state will be at whatever we pass
04:33 - through and by default it will be true
04:35 - and it will be
04:36 - 2. all right so now that we have that
04:38 - let's go change anywhere else in this
04:40 - code that was using
04:41 - hard-coded values like 2 or whatever
04:44 - else we may have had
04:45 - so if we go to right here
04:48 - inside of the text field this text field
04:51 - just a reminder is the votes required to
04:53 - skip the song
04:54 - you can see we're using this dot default
04:56 - votes we don't want that we want to
04:58 - change this
04:59 - to this dot state dot and votes to skip
05:03 - so this way this will get updated based
05:05 - on the state or the default value will
05:07 - be equal to whatever the state is right
05:09 - and that's what we need for that all
05:11 - right now that we have that let's see if
05:13 - there's anything else that's hard coded
05:15 - doesn't look like there is so before we
05:17 - continue i need to quickly thank the
05:19 - sponsor of this video
05:20 - and this series which is algo expert
05:22 - algo expert is the best platform to use
05:24 - to prepare for your software engineering
05:26 - coding
05:26 - interviews has over 110 coding interview
05:29 - questions
05:30 - and has great instructors on the
05:31 - platform like myself
05:33 - if you want to get better at data
05:34 - structures and algorithms and prepare to
05:36 - ace your software engineering coding
05:38 - interviews then check out algo expert
05:40 - from the link in the description
05:41 - and use the code tech with tim for a
05:43 - discount on the platform
05:45 - so now let's start doing what we were
05:46 - discussing and changing say like the
05:48 - label of this from create a room to
05:50 - update a room
05:51 - in the specific scenario so the first
05:53 - thing i'm going to do is inside of
05:54 - render i'm going to define a
05:56 - variable here i'm going to say const
05:58 - we'll just say title
06:00 - and this is going to be equal to the
06:01 - following condition so i'm going to say
06:03 - pretty much if this dot props
06:07 - dot update so if that is true then the
06:10 - title should be equal to
06:12 - update room otherwise it's going to be
06:15 - equal to
06:16 - create a room like that so now where i
06:19 - have create a room
06:20 - all i have to do is replace this with
06:23 - title and
06:24 - now we'll perform this logic we'll see
06:26 - if we actually are in the update state
06:28 - or if we're in the create state so if
06:29 - update's false it will be create a room
06:31 - and then this will automatically change
06:32 - the title for us pretty straightforward
06:34 - and well pretty easy to do
06:36 - so in fact let's just test this out
06:38 - before we go too far make sure we
06:39 - haven't made any mistakes yet
06:40 - let me refresh this let's go to settings
06:43 - and notice already it changes to update
06:45 - room
06:45 - so the next thing we want to do is we
06:47 - want to remove this create a room button
06:49 - and this back button or we want to
06:50 - change them right so they look a little
06:51 - bit different
06:52 - so this is a little bit more complex to
06:54 - do but still not super difficult
06:56 - we're going to do a very similar thing
06:57 - to what we did in the previous component
06:59 - where we kind of have
07:00 - multiple options and then we render each
07:02 - of them so the first thing i'm going to
07:03 - do is i'm going to steal this
07:05 - or not steel but you know copy this
07:08 - these two grid items right here so the
07:10 - create a room button and the back button
07:11 - i'm going to copy both of those
07:13 - and i'm going to put them into their own
07:15 - method so i'm just going to go here
07:16 - i'm going to call this one render create
07:20 - buttons now the reason i'm calling it
07:23 - this is because we're going to have two
07:24 - methods
07:25 - one that renders the buttons to create a
07:26 - new room and one that renders the
07:28 - buttons to update a rip
07:30 - so inside of here what we'll do is we'll
07:33 - return
07:34 - all of this code we will have to make a
07:35 - modification but we will return this now
07:38 - notice that this isn't working right
07:39 - it's giving me all these red highlights
07:41 - that's because all of this is not
07:43 - contained in one
07:44 - upper level parent right it says jsx
07:46 - expressions must have
07:47 - one parent element so all i have to do
07:49 - is wrap this in a grid container so i'm
07:52 - going to say
07:52 - grid container like that i'm going to
07:55 - say
07:56 - the spacing is equal to one and then i'm
07:59 - just going to close the grid so we'll
08:00 - take that closing tag and put it at the
08:02 - very end
08:03 - save and then we're all good so some of
08:05 - you may be saying well you're going to
08:06 - have a grid
08:07 - container inside of another grid
08:09 - container right because what i'm going
08:10 - to do
08:11 - is i'm going to render that at the
08:12 - bottom of this grid you'll see in a
08:14 - second it's hard to
08:15 - go through everything until the code's
08:17 - actually on the page but pretty much
08:18 - it's totally fine we're just going to
08:20 - render
08:20 - this grid inside of this grid here
08:23 - and nothing's going to look any
08:24 - different it's totally okay we can
08:26 - definitely do that
08:27 - so now we have render create buttons
08:29 - that's good and now
08:30 - what we want to do is we want to say
08:32 - render update buttons
08:35 - so pretty much changing what buttons
08:36 - we're going to be using based on we're
08:38 - updating or we're creating
08:39 - so for this one it's really
08:40 - straightforward i don't want the back
08:42 - button right
08:43 - i just want a button that says update
08:45 - room so all i'll do is just copy the
08:47 - grid item here for create a room
08:49 - and just return it from here so i'll
08:50 - return grid
08:52 - it can just be a regular grid item since
08:54 - there's only one element it's not two
08:56 - grid items like we had here
08:57 - i'll change create a room to say update
09:00 - room
09:01 - and then we'll change this on press
09:02 - method to be something that actually is
09:04 - going to call the right endpoint
09:06 - uh but for now we'll leave it at this
09:08 - just because we don't have another thing
09:09 - to put here right now
09:10 - so anyways now we have render create
09:12 - buttons and we have render update
09:14 - buttons or we could say render update
09:15 - button i mean
09:16 - just to keep it simple we'll keep them
09:18 - both at plural and now
09:20 - let's go to the bottom of our grid let's
09:22 - go inside of here where these buttons
09:24 - were before
09:25 - and let's just write another condition
09:27 - so let's say this
09:29 - dot state dot update question mark
09:32 - so if we are updating then let's return
09:34 - this dot
09:35 - render update buttons otherwise let's
09:39 - return
09:39 - this dot render create buttons
09:43 - there we go so this way we'll show one
09:45 - of the two
09:46 - depending on what our update state is
09:49 - now sorry this should not be state i
09:50 - don't think i'm pretty sure this should
09:51 - be props this dot props dot update
09:54 - i think that is the correct one and yeah
09:57 - it is just checking in my other code
09:59 - here
09:59 - all right so now that we have that let's
10:01 - have a look at how this works
10:03 - uh so let's refresh let's go to settings
10:06 - and we're getting an
10:07 - error it's saying this dot render update
10:09 - button is not
10:10 - a function oh render update button
10:13 - i think that needs to be render update
10:15 - buttons let's see yeah it needs to be
10:17 - buttons with a plural my bad so i just
10:18 - forgot the s there
10:20 - all right let's refresh and there we go
10:22 - settings and now you can see it says
10:23 - update room
10:24 - update room and then we have our close
10:26 - button when we close it
10:28 - that works properly just to make sure
10:29 - this is still working uh in the other
10:31 - side or
10:32 - on the other side in the create room
10:33 - page let's leave the room
10:35 - let's press create a room and notice
10:37 - create a room looks exactly like it did
10:38 - before
10:39 - let's press the button boom creates room
10:41 - for us we are all good
10:43 - settings shows us a similar looking
10:44 - thing except it says update room
10:46 - all right so there we go the cosmetics
10:48 - are pretty much done now
10:50 - and what we need to do next now is make
10:52 - this settings button actually work right
10:53 - so when i press
10:54 - update room you can see we got this
10:56 - uncaught error whatever is happening
10:58 - here
10:58 - we need to make this do something
11:00 - different rather than having it create a
11:02 - room we need to make it update the root
11:03 - so what i'm going to do is make another
11:05 - method inside of here so notice we have
11:07 - the method for handle
11:08 - room button press now let's make a
11:10 - method for handle update button pressed
11:12 - so let's say handle update
11:16 - button oops pressed
11:19 - like that and then inside of here i'm
11:21 - literally just going to copy all of this
11:23 - and i'll just change this slightly to
11:25 - what we actually need
11:26 - so for update we need votes to skip
11:29 - we need guests can pause and we also
11:32 - need what we need the room code so i'm
11:34 - going to say code
11:35 - is equal to this dot props
11:38 - dot room code so there we go that should
11:41 - be all good
11:42 - we're going to change the method now
11:43 - from post to patch
11:45 - because what we're going to do here
11:46 - right is we're going to hit the endpoint
11:47 - we created in the last video let's just
11:49 - go there and have a look at it quickly
11:50 - which is update room now update room
11:52 - takes a patch request so we're going to
11:54 - send patch instead of post
11:56 - all right so let's head back to the
11:57 - create room page here we have the method
12:00 - as
12:00 - patch and then what we're fetching well
12:02 - we're not actually going to be fetching
12:03 - create room we're going to be fetching
12:04 - update rooms let's change that
12:07 - to be update room we'll send all of this
12:09 - information as we defined here
12:11 - and then we're just going to have to
12:12 - change what happens here so we don't
12:14 - want to redirect
12:16 - to room slash and then whatever the code
12:18 - is because we're already on that page
12:20 - so i'm going to remove this here and
12:22 - what i actually want to do is check and
12:23 - see if this was valid right
12:25 - so i want to see if we got an okay
12:27 - response and what i'm actually going to
12:29 - do is have a message pop up on the
12:31 - screen
12:31 - this will be kind of a nice like
12:32 - learning thing to show you how to uh put
12:34 - alerts on the screen
12:35 - uh they will say hey you know room was
12:37 - updated or room wasn't updated so we'll
12:39 - have an error message or we'll have a
12:40 - success message
12:41 - and then to get back to the other page
12:43 - they can simply just press that close
12:45 - button that we have
12:46 - so that'll be the last thing that we
12:47 - need to do this will take a few seconds
12:49 - to finish but anyways let's go ahead and
12:51 - try it so dot then
12:53 - we have a response and then what we want
12:55 - to check inside of here is if this
12:56 - response is okay
12:58 - so if response dot okay we want to do
13:01 - something
13:02 - otherwise we want to do something else
13:04 - now what i'm actually going to do is i'm
13:05 - going to add two things to the state
13:07 - here
13:08 - one that's going to store an error
13:09 - message and one that's going to store a
13:10 - success message
13:12 - now depending on if we have an error
13:13 - message or a success message
13:15 - we'll pop that up on the screen and
13:16 - we'll show the user hey
13:18 - you updated the room or hey that didn't
13:20 - work and then whatever the error message
13:21 - is
13:22 - uh so we'll actually we can do it in
13:24 - here and then we'll
13:25 - actually set the state uh above after
13:28 - we'll say this dot set state
13:29 - and then if response is okay then it's a
13:31 - success message so we'll say success
13:33 - msg add another s there
13:37 - is equal to and then what do we want to
13:39 - say we'd say
13:40 - room updated successfully
13:44 - exclamation point all right so that's
13:46 - what we'll do for the success message we
13:47 - can
13:48 - copy this and then we'll change success
13:50 - message to be error message
13:52 - and we'll just say error updating room
13:55 - error updating room dot dot dot
13:59 - uh now you could use whatever was
14:01 - actually returned here as the error
14:03 - message
14:04 - i'm not going to do that just because we
14:05 - don't really need to but anyways
14:07 - that's what you can do and what am i
14:08 - doing with an equal sign sorry this has
14:10 - to be a colon
14:11 - non-equal sign that was going to give us
14:12 - some issues so success message colon
14:14 - whatever it is error message colon and
14:16 - then whatever we want
14:17 - all right so now let's go to the top of
14:20 - our file in the constructor
14:21 - and we have to add the default state for
14:24 - error message
14:25 - and for success message so we'll say
14:27 - error message empty string
14:29 - and then success msg
14:32 - and that as well is an empty string all
14:35 - right so now what we have to do
14:37 - is we need to bind this handle update
14:40 - button press method
14:41 - so let's do that we'll bind it up here
14:43 - say this
14:44 - dot no not theme this
14:48 - dot handle update button pressed equals
14:51 - this
14:52 - dot handle update button pressed dot
14:55 - bind
14:56 - we need to bind that to this then we
14:58 - need to change
14:59 - what the on click event is for the
15:02 - render update button so if we go here
15:04 - and we see that we have the button for
15:06 - update room
15:06 - uh oh handle room button pressed yeah
15:09 - that needs to change this needs to be
15:10 - changed to this
15:12 - dot handle update button press so now
15:14 - we're going to actually call the correct
15:16 - method
15:17 - from the update button all right so that
15:20 - should be all good the next thing that i
15:22 - want to do is i want to make it
15:24 - so that we actually show those error
15:26 - messages right so we show
15:28 - some pop-ups saying hey this was
15:30 - successful or hey this wasn't successful
15:32 - now to do that we're going to need to
15:33 - import some new things here and we're
15:35 - actually going to have to install one
15:36 - new library
15:37 - so i can remove theme provider because
15:39 - that was a mistake i'm going to import
15:41 - something called collapse so i'm going
15:42 - to import
15:43 - collapse like that from
15:47 - and then at material ui
15:51 - core what collapse will allow us to do
15:54 - is show something or
15:55 - collapse it on the screen right so
15:56 - pretty straightforward but just lets it
15:58 - appear or
15:59 - disappear all right so now we're going
16:02 - to go inside
16:03 - of here and we're going to add a new
16:06 - grid item
16:07 - inside of here which will be used to
16:09 - store our messages so error message or
16:11 - success message so let's just copy one
16:13 - of those grid items
16:14 - now inside of here i'm going to make a
16:16 - collapse tag
16:17 - i'm going to say collapse like that
16:19 - we'll end the collapse and then there's
16:21 - a few things that we need so the first
16:22 - thing inside of collapse that we define
16:24 - is
16:24 - in now in is pretty much a boolean value
16:27 - that tells us whether or not
16:28 - this collapse should be shown or it
16:30 - should not be shown so
16:32 - if the condition that i put inside of
16:33 - these squiggly brackets is true we'll
16:35 - show whatever is inside of this collapse
16:37 - tag
16:37 - otherwise we won't show it so it's
16:39 - actually pretty useful but what we'll do
16:40 - is we'll just say
16:41 - this dot state dot
16:44 - error msg right
16:48 - does not equal and then we'll make a
16:49 - blank string
16:51 - or this dot state
16:54 - dot success message does not equal
16:57 - and we'll do an empty string this is
16:59 - just going to tell us if we actually
17:01 - have
17:01 - any message to show right so if we have
17:03 - an error message or we have a success
17:04 - message
17:05 - then we will show the collapse if we
17:07 - don't we're not going to show it
17:08 - then based on the message we have we're
17:11 - going to show a different alert so we're
17:12 - going to show a different like pop up on
17:14 - the screen
17:15 - one that's green if it's successful run
17:16 - one that's red if it's not
17:18 - but to default or to start here i'm just
17:21 - going to say this dot state
17:23 - dot success message just because we're
17:25 - probably not going to have an error
17:26 - message
17:27 - based on the way that we're doing this
17:28 - but i just want to put this here so you
17:30 - can see kind of what it looks like and
17:31 - how it pops
17:32 - up in the collapse window then we'll
17:33 - change it to look a little bit look a
17:34 - little bit nicer
17:36 - anyways let's refresh now let's go to
17:39 - settings
17:39 - and let's update the room and notice we
17:41 - get a little pop-up room
17:43 - updated successfully now let's see if
17:45 - this actually is the case if
17:46 - it's actually working so let's first
17:48 - like go and make a new room
17:50 - we'll make a new room we'll make the
17:51 - votes like 10 and we'll say no control
17:54 - so we create the room we can see that
17:55 - guest can pause is false votes is 10.
17:58 - let's press settings notice that we get
18:00 - 10 but this one isn't updating
18:02 - so update room didn't change it was on
18:04 - play pause but they should have said no
18:06 - control
18:07 - right so if you go back here it says
18:08 - guess compose is false if i go to
18:10 - settings
18:11 - it says play pause which isn't right so
18:12 - first of all we need to change
18:14 - this that's one bug but at least 10 is
18:16 - showing properly
18:17 - but anyways let's just update this so
18:18 - let's update it to 15
18:20 - and play pause create room okay
18:23 - or sorry create room update room room
18:26 - updated successfully
18:27 - let's close this but now notice here it
18:30 - shows 10
18:30 - and it shows false it's not showing the
18:32 - updated values but if i refresh this
18:34 - then we get 15 and then we get false now
18:37 - the reason that happened
18:38 - is because this component isn't being
18:40 - told to update right
18:42 - when i go to settings and i actually
18:43 - change this and then i come back here
18:45 - there's nothing that tells this
18:47 - component hey you have to update your
18:48 - values
18:49 - so we need a way to tell it to update
18:50 - its value so that's the next thing we'll
18:52 - have to do as well
18:53 - but anyways this is working just not as
18:55 - perfect as we'd like it to
18:57 - so let's fix that first bug which is
18:59 - that we aren't actually showing the
19:01 - proper value for
19:02 - guests can pause so guest control of
19:04 - playback state
19:05 - that's going to be somewhere here and
19:07 - there we go we say the default value is
19:09 - true the default value should not be
19:11 - true the default value should be equal
19:13 - to whatever we passed in from the prop
19:15 - right
19:15 - so inside of here we're going to say
19:17 - this not state
19:19 - this dot props dot and then
19:22 - guest can pause and then i actually need
19:26 - to put this
19:27 - dot to string the reason for that is
19:29 - that default value takes a string so
19:31 - we're just going to convert this boolean
19:32 - value to string so that all is good
19:34 - but let's try this out now and see if
19:35 - that's working so let's refresh
19:38 - we have false and we have 18 we go to
19:39 - settings and now you see it's showing
19:41 - the correct one
19:42 - okay so bug one has been fixed now we
19:45 - need to fix the next bug which is that
19:46 - when we press
19:47 - update room we actually want it to
19:48 - update over here so how do we do that
19:50 - well this is where we get into that
19:52 - callback function that i was talking
19:53 - about before
19:54 - so if i go to room.js notice that we
19:56 - have a callback
19:57 - we pretty much want to call this
19:59 - callback after we
20:01 - update the room so what should the
20:03 - callback function be
20:05 - we need a way to update the room so that
20:07 - it has the the correct state
20:09 - and it shows the correct values so
20:11 - really all we actually need to call
20:13 - is get room details right because this
20:15 - is what we did in a way earlier
20:17 - uh tutorial video but this updates the
20:19 - state to be equal to whatever the
20:21 - current values are
20:22 - for the room so all we do is we pass
20:26 - as the update callback this
20:29 - dot get room details reminder we don't
20:32 - call the function
20:34 - we just pass it in or the method
20:35 - whatever you want to call it and then
20:37 - inside of create room we need to call
20:39 - this callback
20:40 - so what i'm going to do is i'm going to
20:42 - go into the
20:44 - handle update button pressed and after
20:47 - all of this
20:47 - is done so after the dot then i'm going
20:50 - to call this callback function so i'm
20:52 - going to say this
20:53 - dot and then i guess what is it
20:57 - update callback like that and we'll
20:59 - simply call it
21:00 - but notice there might be a slight
21:01 - problem here because this fetch
21:03 - might not be finished executing before
21:05 - we call this because of the way that we
21:07 - have the dot
21:08 - then set up so what i really need to do
21:10 - is just at the bottom so i'm going to
21:11 - say this dot update callback
21:14 - inside of the dot then i'm just going to
21:16 - put it at the very bottom
21:17 - so that way we wait until we actually do
21:20 - the update message and this endpoint has
21:22 - actually been reached and called and
21:23 - we've got a response
21:24 - and then we call this.updatecallback so
21:27 - just kind of an important detail there
21:29 - want to make sure we do this after this
21:31 - is finished
21:32 - so we put it inside of the dot that all
21:35 - right
21:35 - so now that we have that what we need to
21:37 - do is simply make it so that we actually
21:40 - show the correct error messages
21:42 - and we'll see if this is working so
21:43 - let's before we show the error messages
21:45 - uh make sure this is working when
21:46 - refresh gonna go to settings
21:48 - let's change this to say 10 and play
21:51 - pause
21:52 - update room we go back and this hasn't
21:55 - updated and it's saying
21:57 - this.updatecallback is not a function
22:00 - okay so the reason why this isn't
22:01 - working and i just realized already
22:03 - is because i called this.updatecallback
22:05 - but it should be
22:07 - this.props.updatecallback
22:09 - because we pass this through the props
22:10 - we don't actually have a function
22:11 - defined called
22:12 - update callback inside of here so if we
22:14 - go to props we can see we have update
22:16 - callback
22:17 - so that's what we need to call it so
22:18 - let's try this now
22:20 - let's refresh let's go to settings
22:23 - let's just change this to six no control
22:26 - update
22:26 - go back and this hasn't happened again
22:29 - and it's saying this.setstate is not a
22:31 - function
22:32 - at room.jsline39 so let's have a look
22:35 - there
22:35 - room and line 39 oh right here
22:39 - so i guess the reason why this isn't
22:40 - working is because we haven't bound
22:43 - get room details uh to the actual
22:46 - this keyword so just to go through what
22:48 - happened here i pass
22:50 - get room details as the callback
22:52 - function to my create room
22:54 - page but since we didn't bind this
22:56 - callback function to
22:57 - this keyword of this class there's no
23:00 - this dot set state available when we
23:02 - call it
23:03 - from the other class hopefully it's
23:05 - clear so far but the solution to this
23:06 - whenever you see something like
23:08 - this.setstate isn't available is to
23:10 - simply bind this function
23:12 - or bind this method to the clasp and
23:14 - this keyword
23:15 - so all i have to do is say this
23:17 - getroomdetails
23:18 - equals this.getroomdetails dot
23:22 - bind to the this keyboard then i'm
23:25 - actually just gonna take uh this.getroom
23:27 - details the function call i have in my
23:28 - constructor
23:29 - and put it at the bottom uh just because
23:31 - that makes a bit more sense for uh to me
23:33 - to do
23:33 - but yeah okay so i think that should be
23:35 - good let's refresh now
23:37 - and have a look let's go to settings
23:39 - let's change this to 10 and go play
23:41 - pause
23:42 - true update room go back and notice this
23:45 - is updated we didn't have to refresh it
23:47 - just updated again to prove it to you
23:49 - i'll change it to 11
23:50 - go back and see this is 11 we didn't
23:52 - have to refresh it's just
23:54 - there all right so that's good
23:55 - everything seems to be working
23:57 - now the last thing we need to do is make
23:58 - it so that these error messages or
24:00 - success messages look a little bit nicer
24:02 - so let's go ahead and do
24:04 - that so actually for this part right
24:06 - here what i need to do is use a new
24:08 - component that we actually need to
24:09 - install
24:10 - uh so right now we have a material ui
24:12 - installed but we don't have all of like
24:14 - the sub
24:14 - libraries of material ui installed and
24:16 - the component i want to use is called
24:18 - alert but it comes from the material ui
24:21 - lab component library so what i need to
24:23 - do is cd into my front end i'm just in a
24:25 - blank terminal here in bs code
24:27 - and then i'm going to use mpm to install
24:29 - the package that i need so npm
24:32 - install and then we're going to say at
24:35 - material if i spell it correctly hyphen
24:37 - ui
24:38 - and then slash lab like that so this is
24:41 - the library we need
24:42 - npm install app material ui lab
24:45 - make sure you're in the front end folder
24:47 - so you can access npm
24:48 - all right we're going to press enter
24:50 - give it a second to load here and
24:52 - install
24:52 - you should see that it added one package
24:54 - from one contributor
24:56 - it doesn't matter if it's the alpha or
24:57 - whatever it will still work
24:59 - and now what we're going to do is import
25:01 - alert from material ui
25:03 - lab so let's go to create room let's go
25:05 - to the top
25:06 - and let's go import alert like that
25:10 - from and then act material
25:13 - hyphen ui lab
25:16 - slash alert now we could import it uh
25:20 - just using the squiggly braces from
25:22 - material ui
25:24 - lab but since it's the only one that we
25:26 - need we'll just take it from the actual
25:28 - alert package itself or alert file
25:30 - itself
25:31 - all right so now we have alert and we're
25:33 - almost done this tutorial
25:35 - what we need to do now is show our alert
25:38 - so let's go
25:39 - into collapse and rather than just
25:41 - showing the success message
25:43 - we're going to show a specific alert
25:45 - based on if we have a success message or
25:47 - if we have an
25:48 - error message so the first thing that
25:50 - we'll do is we'll pretty much say
25:52 - this dot state dot success message
25:56 - does not equal empty and if it does not
25:58 - equal empty
25:59 - then we'll show something specific so
26:01 - we'll do the question mark and what
26:02 - we'll show
26:03 - is inside of parentheses and alert so
26:06 - we'll say alert
26:07 - like that uh we can end the tag um
26:10 - yeah and then inside of here we can say
26:14 - this.state.successmessage
26:16 - what this is saying is if we have a
26:18 - success message if it's not empty
26:20 - then show this alert that has the
26:22 - success message
26:23 - now in the other case we'll show another
26:25 - alert so i'll literally just copy this
26:27 - line and we will make these look a
26:28 - little bit nicer in a second
26:30 - and instead of success message we will
26:32 - show
26:33 - error message all right so the reason
26:35 - this works is because if we have a
26:37 - success message we're not going to have
26:38 - an error message if we have an error
26:39 - message we're not going to have a
26:40 - success message
26:41 - so we show one of the two based on if we
26:43 - have a success message or not
26:46 - now for the alert for the success
26:48 - message i want to define
26:49 - what type of alert this is so if we want
26:52 - the alert to be success
26:53 - then we say severity is equal to
26:57 - success like that it's going to make it
26:58 - green similarly for
27:00 - the error we can say severity is equal
27:03 - to
27:04 - error like that and then i also i also
27:06 - want us to be able to press a button to
27:08 - actually close
27:09 - this alert so to do that i need to add
27:12 - an on
27:12 - close like that i'm going to say on
27:14 - close is equal to
27:16 - i'm actually going to make an arrow
27:18 - function here so we'll say
27:20 - arrow like that then inside of this
27:23 - arrow function since i'm closing the
27:25 - alert and you'll see how this works once
27:26 - the alert comes up
27:28 - i'm going to set the state to clear the
27:30 - error message or clear the success
27:31 - message whatever one we're in so
27:33 - i'll just say this dot set state
27:37 - and then inside of here we'll say
27:40 - success message
27:41 - and we'll just make that equal to a
27:42 - blank string now i'm going to copy this
27:44 - and we'll do the exact same thing
27:46 - for error except instead of success
27:48 - message we're just going to say
27:51 - error message like that now i know this
27:53 - looks all
27:54 - complicated and fancy it's really not
27:57 - and
27:57 - also yeah i think we're all good here
27:59 - but pretty much all this is doing is
28:01 - it's going to show a little
28:02 - x icon on our alert when we add this on
28:05 - close prop here
28:06 - and then it's going to call this
28:07 - function which will just change the
28:09 - state
28:10 - when we press that x so by pressing the
28:12 - x button
28:13 - it will clear the success message state
28:15 - or it will clear the error message state
28:17 - and then that way will stop showing this
28:19 - collapsed content
28:21 - all right so hopefully that's clear but
28:23 - let's just refresh and have a look at
28:24 - how this works now
28:25 - so refresh settings update and we get
28:28 - room updated successfully
28:30 - has its nice default success icon when i
28:32 - press x
28:33 - it closes right now we can go and update
28:36 - room
28:36 - press x it closes i don't know why it's
28:38 - showing the error message for a second
28:40 - there
28:41 - that's actually interesting to me but
28:42 - let's update room closes and
28:44 - we're good now i will look into why it's
28:46 - showing that little like red error
28:48 - message
28:48 - after we update it because you can see
28:50 - it kind of goes red before it collapses
28:52 - all the way down
28:53 - but that's something that we can tackle
28:54 - in the next video so anyways that was
28:56 - all i wanted to show we're getting
28:58 - really close to integrating with uh
29:00 - spotify now in fact in the next video
29:01 - we'll probably start doing that
29:03 - because most of the ui stuff that i
29:04 - wanted to do is pretty much done at this
29:06 - point in time
29:07 - so anyways i hope you guys enjoyed if
29:08 - you did make sure you like subscribe to
29:10 - the channel and of course i will see you
29:12 - in another react and django tutorial

Cleaned transcript:

hello everybody and welcome to video 12 in the django and react tutorial series now what we're going to be doing in this video is just continuing from where we left off in the last we're gonna be making it so that the settings page is actually proper and does what we want it to do now as i discussed what's involved with that is changing this title changing this create a room button title to be update room and then having this back button being removed so we're going to make the actual create a room component to be reusable and that's kind of the point of this this video i guess it's going to show you how we can make a component be used in multiple scenarios now i'll first just start by saying that once again this tutorial series is not following all the best practices all the industry standards this isn't something that you would probably see at you know like google or facebook like they would be doing things probably a lot different than the way i'm doing it right here the point of this series as i've said from the beginning is just to teach you how this stuff works to give you kind of a cool fun project to work on and this is exactly what i would do if i was just kind of building a hobby project i didn't really care a ton about the code quality and i just wanted to learn a new framework and kind of learn a backend thing like django as well and just see how they work and get some experience with it so keep that in mind you guys are welcome to be as critical as you want as the coding here but as i've said many times it's not meant to be industry standard and all of that so anyways let's continue so let's go to the create room page and actually before i do that let's kind of get a better introduction into this so if we have a look at render settings here which is what we did in the last video you can see we're calling create a room or we're using the create room page component now we pass all this information through right we pass the votes to skip this is stored in this current state of the room page we pass the guest can pause again stored in the state we pass the room code this dot room code is defined in the constructor so this dot room code is equal to this dot props dot match dot params.room code and then we pass this update true so that we know what we need to do in the create room page whether it's going to be creating or updating or whatever we also pass a callback that we should be calling whenever the room actually updates so we'll use that later but that's the information we're passing through so now what i want to do is in the create room page i want to take these props and actually use them right so here you can see that by default we have this dot state is equal to you know guess can pause we have votes to skip is equal to this.defaultvotes but i don't want it to be equal to these hardcoded values i want it to be equal to what we pass in through the props but the issue is that we're not always passing this information through through the props right if i go to home page and we have a look at create room page we're not passing any information through the props so we need a way to set the default value for the props right and again those props are just the piece of information we're passing in so this is where we're actually going to use something which is called default props we're going to define what the default value for our property should be so there's multiple ways to do this but this is the easiest way in my opinion we're going to define a static variable and it's going to be called default props and then it's going to be equal to the name of all of the props that we expect to be passed in as well as their value so what we're going to say is votes to skip and then we're going to set this equal to whatever we want the default to be which is 2 right then next we're going to say guest can pause this is going to be equal to whatever we want the default to be which is in this case true then we need update update the default for this i'm going to say is false then we need the room code the update for this i'm just going to say is null or sorry the update the default for this i'm going to say is null and then we need the update callback so i'm going to say update callback and that's going to be equal to just a default arrow function all right so that's all we need for our default props and pretty much this means if we don't pass any of these props through if any of the ones that are in here are not passed by default they will have these values just like a default parameter in python or some other languages all right so now that we have that let's actually start using them so inside of the state now rather than having the state be equal to true and this dot default votes which i just deleted we're going to say guess can pause is equal to this dot props dot guest can pause because that's the information we're passing through to the create room page same thing for default votes it's going to be this dot props dot votes to skip that way this state will be at whatever we pass through and by default it will be true and it will be 2. all right so now that we have that let's go change anywhere else in this code that was using hardcoded values like 2 or whatever else we may have had so if we go to right here inside of the text field this text field just a reminder is the votes required to skip the song you can see we're using this dot default votes we don't want that we want to change this to this dot state dot and votes to skip so this way this will get updated based on the state or the default value will be equal to whatever the state is right and that's what we need for that all right now that we have that let's see if there's anything else that's hard coded doesn't look like there is so before we continue i need to quickly thank the sponsor of this video and this series which is algo expert algo expert is the best platform to use to prepare for your software engineering coding interviews has over 110 coding interview questions and has great instructors on the platform like myself if you want to get better at data structures and algorithms and prepare to ace your software engineering coding interviews then check out algo expert from the link in the description and use the code tech with tim for a discount on the platform so now let's start doing what we were discussing and changing say like the label of this from create a room to update a room in the specific scenario so the first thing i'm going to do is inside of render i'm going to define a variable here i'm going to say const we'll just say title and this is going to be equal to the following condition so i'm going to say pretty much if this dot props dot update so if that is true then the title should be equal to update room otherwise it's going to be equal to create a room like that so now where i have create a room all i have to do is replace this with title and now we'll perform this logic we'll see if we actually are in the update state or if we're in the create state so if update's false it will be create a room and then this will automatically change the title for us pretty straightforward and well pretty easy to do so in fact let's just test this out before we go too far make sure we haven't made any mistakes yet let me refresh this let's go to settings and notice already it changes to update room so the next thing we want to do is we want to remove this create a room button and this back button or we want to change them right so they look a little bit different so this is a little bit more complex to do but still not super difficult we're going to do a very similar thing to what we did in the previous component where we kind of have multiple options and then we render each of them so the first thing i'm going to do is i'm going to steal this or not steel but you know copy this these two grid items right here so the create a room button and the back button i'm going to copy both of those and i'm going to put them into their own method so i'm just going to go here i'm going to call this one render create buttons now the reason i'm calling it this is because we're going to have two methods one that renders the buttons to create a new room and one that renders the buttons to update a rip so inside of here what we'll do is we'll return all of this code we will have to make a modification but we will return this now notice that this isn't working right it's giving me all these red highlights that's because all of this is not contained in one upper level parent right it says jsx expressions must have one parent element so all i have to do is wrap this in a grid container so i'm going to say grid container like that i'm going to say the spacing is equal to one and then i'm just going to close the grid so we'll take that closing tag and put it at the very end save and then we're all good so some of you may be saying well you're going to have a grid container inside of another grid container right because what i'm going to do is i'm going to render that at the bottom of this grid you'll see in a second it's hard to go through everything until the code's actually on the page but pretty much it's totally fine we're just going to render this grid inside of this grid here and nothing's going to look any different it's totally okay we can definitely do that so now we have render create buttons that's good and now what we want to do is we want to say render update buttons so pretty much changing what buttons we're going to be using based on we're updating or we're creating so for this one it's really straightforward i don't want the back button right i just want a button that says update room so all i'll do is just copy the grid item here for create a room and just return it from here so i'll return grid it can just be a regular grid item since there's only one element it's not two grid items like we had here i'll change create a room to say update room and then we'll change this on press method to be something that actually is going to call the right endpoint uh but for now we'll leave it at this just because we don't have another thing to put here right now so anyways now we have render create buttons and we have render update buttons or we could say render update button i mean just to keep it simple we'll keep them both at plural and now let's go to the bottom of our grid let's go inside of here where these buttons were before and let's just write another condition so let's say this dot state dot update question mark so if we are updating then let's return this dot render update buttons otherwise let's return this dot render create buttons there we go so this way we'll show one of the two depending on what our update state is now sorry this should not be state i don't think i'm pretty sure this should be props this dot props dot update i think that is the correct one and yeah it is just checking in my other code here all right so now that we have that let's have a look at how this works uh so let's refresh let's go to settings and we're getting an error it's saying this dot render update button is not a function oh render update button i think that needs to be render update buttons let's see yeah it needs to be buttons with a plural my bad so i just forgot the s there all right let's refresh and there we go settings and now you can see it says update room update room and then we have our close button when we close it that works properly just to make sure this is still working uh in the other side or on the other side in the create room page let's leave the room let's press create a room and notice create a room looks exactly like it did before let's press the button boom creates room for us we are all good settings shows us a similar looking thing except it says update room all right so there we go the cosmetics are pretty much done now and what we need to do next now is make this settings button actually work right so when i press update room you can see we got this uncaught error whatever is happening here we need to make this do something different rather than having it create a room we need to make it update the root so what i'm going to do is make another method inside of here so notice we have the method for handle room button press now let's make a method for handle update button pressed so let's say handle update button oops pressed like that and then inside of here i'm literally just going to copy all of this and i'll just change this slightly to what we actually need so for update we need votes to skip we need guests can pause and we also need what we need the room code so i'm going to say code is equal to this dot props dot room code so there we go that should be all good we're going to change the method now from post to patch because what we're going to do here right is we're going to hit the endpoint we created in the last video let's just go there and have a look at it quickly which is update room now update room takes a patch request so we're going to send patch instead of post all right so let's head back to the create room page here we have the method as patch and then what we're fetching well we're not actually going to be fetching create room we're going to be fetching update rooms let's change that to be update room we'll send all of this information as we defined here and then we're just going to have to change what happens here so we don't want to redirect to room slash and then whatever the code is because we're already on that page so i'm going to remove this here and what i actually want to do is check and see if this was valid right so i want to see if we got an okay response and what i'm actually going to do is have a message pop up on the screen this will be kind of a nice like learning thing to show you how to uh put alerts on the screen uh they will say hey you know room was updated or room wasn't updated so we'll have an error message or we'll have a success message and then to get back to the other page they can simply just press that close button that we have so that'll be the last thing that we need to do this will take a few seconds to finish but anyways let's go ahead and try it so dot then we have a response and then what we want to check inside of here is if this response is okay so if response dot okay we want to do something otherwise we want to do something else now what i'm actually going to do is i'm going to add two things to the state here one that's going to store an error message and one that's going to store a success message now depending on if we have an error message or a success message we'll pop that up on the screen and we'll show the user hey you updated the room or hey that didn't work and then whatever the error message is uh so we'll actually we can do it in here and then we'll actually set the state uh above after we'll say this dot set state and then if response is okay then it's a success message so we'll say success msg add another s there is equal to and then what do we want to say we'd say room updated successfully exclamation point all right so that's what we'll do for the success message we can copy this and then we'll change success message to be error message and we'll just say error updating room error updating room dot dot dot uh now you could use whatever was actually returned here as the error message i'm not going to do that just because we don't really need to but anyways that's what you can do and what am i doing with an equal sign sorry this has to be a colon nonequal sign that was going to give us some issues so success message colon whatever it is error message colon and then whatever we want all right so now let's go to the top of our file in the constructor and we have to add the default state for error message and for success message so we'll say error message empty string and then success msg and that as well is an empty string all right so now what we have to do is we need to bind this handle update button press method so let's do that we'll bind it up here say this dot no not theme this dot handle update button pressed equals this dot handle update button pressed dot bind we need to bind that to this then we need to change what the on click event is for the render update button so if we go here and we see that we have the button for update room uh oh handle room button pressed yeah that needs to change this needs to be changed to this dot handle update button press so now we're going to actually call the correct method from the update button all right so that should be all good the next thing that i want to do is i want to make it so that we actually show those error messages right so we show some popups saying hey this was successful or hey this wasn't successful now to do that we're going to need to import some new things here and we're actually going to have to install one new library so i can remove theme provider because that was a mistake i'm going to import something called collapse so i'm going to import collapse like that from and then at material ui core what collapse will allow us to do is show something or collapse it on the screen right so pretty straightforward but just lets it appear or disappear all right so now we're going to go inside of here and we're going to add a new grid item inside of here which will be used to store our messages so error message or success message so let's just copy one of those grid items now inside of here i'm going to make a collapse tag i'm going to say collapse like that we'll end the collapse and then there's a few things that we need so the first thing inside of collapse that we define is in now in is pretty much a boolean value that tells us whether or not this collapse should be shown or it should not be shown so if the condition that i put inside of these squiggly brackets is true we'll show whatever is inside of this collapse tag otherwise we won't show it so it's actually pretty useful but what we'll do is we'll just say this dot state dot error msg right does not equal and then we'll make a blank string or this dot state dot success message does not equal and we'll do an empty string this is just going to tell us if we actually have any message to show right so if we have an error message or we have a success message then we will show the collapse if we don't we're not going to show it then based on the message we have we're going to show a different alert so we're going to show a different like pop up on the screen one that's green if it's successful run one that's red if it's not but to default or to start here i'm just going to say this dot state dot success message just because we're probably not going to have an error message based on the way that we're doing this but i just want to put this here so you can see kind of what it looks like and how it pops up in the collapse window then we'll change it to look a little bit look a little bit nicer anyways let's refresh now let's go to settings and let's update the room and notice we get a little popup room updated successfully now let's see if this actually is the case if it's actually working so let's first like go and make a new room we'll make a new room we'll make the votes like 10 and we'll say no control so we create the room we can see that guest can pause is false votes is 10. let's press settings notice that we get 10 but this one isn't updating so update room didn't change it was on play pause but they should have said no control right so if you go back here it says guess compose is false if i go to settings it says play pause which isn't right so first of all we need to change this that's one bug but at least 10 is showing properly but anyways let's just update this so let's update it to 15 and play pause create room okay or sorry create room update room room updated successfully let's close this but now notice here it shows 10 and it shows false it's not showing the updated values but if i refresh this then we get 15 and then we get false now the reason that happened is because this component isn't being told to update right when i go to settings and i actually change this and then i come back here there's nothing that tells this component hey you have to update your values so we need a way to tell it to update its value so that's the next thing we'll have to do as well but anyways this is working just not as perfect as we'd like it to so let's fix that first bug which is that we aren't actually showing the proper value for guests can pause so guest control of playback state that's going to be somewhere here and there we go we say the default value is true the default value should not be true the default value should be equal to whatever we passed in from the prop right so inside of here we're going to say this not state this dot props dot and then guest can pause and then i actually need to put this dot to string the reason for that is that default value takes a string so we're just going to convert this boolean value to string so that all is good but let's try this out now and see if that's working so let's refresh we have false and we have 18 we go to settings and now you see it's showing the correct one okay so bug one has been fixed now we need to fix the next bug which is that when we press update room we actually want it to update over here so how do we do that well this is where we get into that callback function that i was talking about before so if i go to room.js notice that we have a callback we pretty much want to call this callback after we update the room so what should the callback function be we need a way to update the room so that it has the the correct state and it shows the correct values so really all we actually need to call is get room details right because this is what we did in a way earlier uh tutorial video but this updates the state to be equal to whatever the current values are for the room so all we do is we pass as the update callback this dot get room details reminder we don't call the function we just pass it in or the method whatever you want to call it and then inside of create room we need to call this callback so what i'm going to do is i'm going to go into the handle update button pressed and after all of this is done so after the dot then i'm going to call this callback function so i'm going to say this dot and then i guess what is it update callback like that and we'll simply call it but notice there might be a slight problem here because this fetch might not be finished executing before we call this because of the way that we have the dot then set up so what i really need to do is just at the bottom so i'm going to say this dot update callback inside of the dot then i'm just going to put it at the very bottom so that way we wait until we actually do the update message and this endpoint has actually been reached and called and we've got a response and then we call this.updatecallback so just kind of an important detail there want to make sure we do this after this is finished so we put it inside of the dot that all right so now that we have that what we need to do is simply make it so that we actually show the correct error messages and we'll see if this is working so let's before we show the error messages uh make sure this is working when refresh gonna go to settings let's change this to say 10 and play pause update room we go back and this hasn't updated and it's saying this.updatecallback is not a function okay so the reason why this isn't working and i just realized already is because i called this.updatecallback but it should be this.props.updatecallback because we pass this through the props we don't actually have a function defined called update callback inside of here so if we go to props we can see we have update callback so that's what we need to call it so let's try this now let's refresh let's go to settings let's just change this to six no control update go back and this hasn't happened again and it's saying this.setstate is not a function at room.jsline39 so let's have a look there room and line 39 oh right here so i guess the reason why this isn't working is because we haven't bound get room details uh to the actual this keyword so just to go through what happened here i pass get room details as the callback function to my create room page but since we didn't bind this callback function to this keyword of this class there's no this dot set state available when we call it from the other class hopefully it's clear so far but the solution to this whenever you see something like this.setstate isn't available is to simply bind this function or bind this method to the clasp and this keyword so all i have to do is say this getroomdetails equals this.getroomdetails dot bind to the this keyboard then i'm actually just gonna take uh this.getroom details the function call i have in my constructor and put it at the bottom uh just because that makes a bit more sense for uh to me to do but yeah okay so i think that should be good let's refresh now and have a look let's go to settings let's change this to 10 and go play pause true update room go back and notice this is updated we didn't have to refresh it just updated again to prove it to you i'll change it to 11 go back and see this is 11 we didn't have to refresh it's just there all right so that's good everything seems to be working now the last thing we need to do is make it so that these error messages or success messages look a little bit nicer so let's go ahead and do that so actually for this part right here what i need to do is use a new component that we actually need to install uh so right now we have a material ui installed but we don't have all of like the sub libraries of material ui installed and the component i want to use is called alert but it comes from the material ui lab component library so what i need to do is cd into my front end i'm just in a blank terminal here in bs code and then i'm going to use mpm to install the package that i need so npm install and then we're going to say at material if i spell it correctly hyphen ui and then slash lab like that so this is the library we need npm install app material ui lab make sure you're in the front end folder so you can access npm all right we're going to press enter give it a second to load here and install you should see that it added one package from one contributor it doesn't matter if it's the alpha or whatever it will still work and now what we're going to do is import alert from material ui lab so let's go to create room let's go to the top and let's go import alert like that from and then act material hyphen ui lab slash alert now we could import it uh just using the squiggly braces from material ui lab but since it's the only one that we need we'll just take it from the actual alert package itself or alert file itself all right so now we have alert and we're almost done this tutorial what we need to do now is show our alert so let's go into collapse and rather than just showing the success message we're going to show a specific alert based on if we have a success message or if we have an error message so the first thing that we'll do is we'll pretty much say this dot state dot success message does not equal empty and if it does not equal empty then we'll show something specific so we'll do the question mark and what we'll show is inside of parentheses and alert so we'll say alert like that uh we can end the tag um yeah and then inside of here we can say this.state.successmessage what this is saying is if we have a success message if it's not empty then show this alert that has the success message now in the other case we'll show another alert so i'll literally just copy this line and we will make these look a little bit nicer in a second and instead of success message we will show error message all right so the reason this works is because if we have a success message we're not going to have an error message if we have an error message we're not going to have a success message so we show one of the two based on if we have a success message or not now for the alert for the success message i want to define what type of alert this is so if we want the alert to be success then we say severity is equal to success like that it's going to make it green similarly for the error we can say severity is equal to error like that and then i also i also want us to be able to press a button to actually close this alert so to do that i need to add an on close like that i'm going to say on close is equal to i'm actually going to make an arrow function here so we'll say arrow like that then inside of this arrow function since i'm closing the alert and you'll see how this works once the alert comes up i'm going to set the state to clear the error message or clear the success message whatever one we're in so i'll just say this dot set state and then inside of here we'll say success message and we'll just make that equal to a blank string now i'm going to copy this and we'll do the exact same thing for error except instead of success message we're just going to say error message like that now i know this looks all complicated and fancy it's really not and also yeah i think we're all good here but pretty much all this is doing is it's going to show a little x icon on our alert when we add this on close prop here and then it's going to call this function which will just change the state when we press that x so by pressing the x button it will clear the success message state or it will clear the error message state and then that way will stop showing this collapsed content all right so hopefully that's clear but let's just refresh and have a look at how this works now so refresh settings update and we get room updated successfully has its nice default success icon when i press x it closes right now we can go and update room press x it closes i don't know why it's showing the error message for a second there that's actually interesting to me but let's update room closes and we're good now i will look into why it's showing that little like red error message after we update it because you can see it kind of goes red before it collapses all the way down but that's something that we can tackle in the next video so anyways that was all i wanted to show we're getting really close to integrating with uh spotify now in fact in the next video we'll probably start doing that because most of the ui stuff that i wanted to do is pretty much done at this point in time so anyways i hope you guys enjoyed if you did make sure you like subscribe to the channel and of course i will see you in another react and django tutorial
