With timestamps:

00:00 - hello everybody and welcome to this
00:01 - django complete
00:03 - course now in this video i'm going to be
00:05 - covering all of the important aspects of
00:07 - django then as
00:08 - a beginner you need to know so from
00:10 - setting up a simple django application
00:12 - to creating a database
00:14 - to having users log in sign up and sign
00:17 - out
00:17 - to having user specific pages that is
00:19 - what is going to be covered in
00:21 - this video now just to make something
00:22 - really clear here this video is a
00:24 - combination of 11 previous videos that i
00:26 - have on my channel currently
00:28 - i decided to re-edit these videos just
00:30 - to have them be a little bit nicer
00:32 - and combine them all into one video
00:33 - because when i posted this series it was
00:35 - probably about a year and a half ago
00:37 - and i have a lot of new subscribers now
00:38 - that probably don't even know i have a
00:40 - django tutorial series
00:41 - so with that said i hope you guys enjoy
00:43 - if you do make sure you leave
00:45 - a like and with that said let's dive in
00:47 - after a quick word
00:48 - from our sponsor
00:58 - we get started i need to thank the
00:59 - sponsor of this video which is alco
01:01 - expert algo expert is the best platform
01:04 - to use from preparing for your software
01:05 - engineering coding interviews
01:07 - and has the highest quality coding
01:08 - interview practice questions
01:10 - with over 140 practice questions
01:13 - detailed solutions in nine of the most
01:14 - popular programming languages
01:16 - a feature-packed browser-based coding
01:18 - environment extensive test suites and
01:20 - conceptual overviews and code
01:22 - walk-throughs for each and every problem
01:24 - algo expert is the best resource to use
01:26 - to ace your coding interviews
01:28 - algo expert also has a data structures
01:30 - crash course coding interview
01:31 - assessments and a mock
01:33 - interviews feature i can highly
01:34 - recommend algoexpert as a former
01:36 - customer myself
01:37 - and now an official instructor on the
01:39 - platform get started using algo expert
01:42 - today by clicking the link in the
01:43 - description and using the code tech with
01:45 - tim for a discount on the platform
01:47 - hey guys and welcome to a new series
01:49 - which is django web development with
01:52 - python
01:53 - now if you haven't heard of django
01:54 - before essentially it's a full stack
01:56 - web framework which allows you to create
01:59 - websites using purely python and a
02:01 - little bit of html
02:03 - now this is really awesome because
02:04 - typically when you want to create
02:05 - websites you got to use a
02:07 - combination of languages you got to use
02:09 - javascript html css all this kind of
02:12 - stuff php
02:13 - but if you already know python this is a
02:15 - really nice and fairly simple way to
02:17 - actually create
02:17 - fully functioning websites and that's
02:19 - what i'm going to be showing you
02:20 - throughout this series
02:21 - now this first video is going to be
02:23 - dedicated to setting up our project
02:24 - understanding a bit about how django
02:26 - works
02:27 - and getting the server kind of running
02:28 - on our local machine
02:30 - and then later in other videos you're
02:32 - going to be working with databases
02:33 - templates making fully functioning
02:35 - websites and hopefully near the end i
02:37 - will work on a large project and show
02:39 - you guys how we can get everything set
02:41 - up
02:41 - to create an actual website that you
02:43 - might be able to use
02:44 - uh so without further ado let's get
02:46 - started now the first thing that we're
02:48 - going to need to do
02:49 - when we're working with django is we
02:51 - need to install it so i'm assuming you
02:52 - already have python installed
02:54 - if you don't you're going to have to go
02:55 - ahead and do that but from there
02:57 - we need to install django to do this
02:59 - we're simply just going to open up our
03:00 - command prompt we can just type cmd
03:02 - in little thing here and you pip
03:05 - uh install and then django like so
03:09 - now i already have this installed so i'm
03:11 - not going to do this
03:12 - but if for some reason when you hit
03:14 - enter and this doesn't work it means
03:16 - it says like pip is not in your path or
03:17 - something like that
03:19 - click on the video that i'm going to
03:20 - have a link there's going to be a card
03:21 - to it and a link in the description it's
03:23 - called how to install
03:24 - pygame but this goes through how to fix
03:27 - this pip
03:28 - issue so just watch through that video
03:29 - and it will explain to you how to fix
03:31 - this issue and when it
03:33 - you type pie game when it says like type
03:35 - pie game just type django instead
03:37 - and that should hopefully fix your
03:38 - problem now for me
03:40 - i'm actually working in a virtual
03:42 - environment uh for django
03:45 - this doesn't really mean anything to you
03:46 - don't worry about it so i'm just going
03:48 - to activate that now
03:49 - but what we're going to do to start our
03:51 - project is we're going to create a
03:52 - directory somewhere accessible
03:54 - that we're going to install all of our
03:56 - kind of django stuff into
03:57 - so i've created one in this kind of
04:00 - directory system here so desktop python
04:02 - youtube django tutorial
04:04 - so i'm just going to change into that
04:05 - directory by using cd so we'll cd into
04:08 - desktop
04:09 - cd python cdut tube
04:12 - and cd django
04:15 - django like that so now i'm in this
04:17 - directory but if you guys don't want to
04:18 - do that or it's a complex path
04:20 - all you can do is open it up your folder
04:22 - here and then type cmd
04:23 - and it'll open up a python or a cmd
04:26 - window that is in this
04:27 - directory like that for you okay so now
04:30 - that we've done that what we need to do
04:31 - is we need to create a brand new
04:33 - django project now to do this what we're
04:36 - going to do is type django
04:37 - hyphen admin and then start project
04:41 - i believe that is and the name of our
04:43 - project which in this case i'm going to
04:45 - call
04:45 - my site now you can name this whatever
04:47 - you want however if you try to name it
04:50 - the name of a python package so maybe
04:52 - like numpy or site or something like
04:55 - that
04:55 - it won't work so if you get that error
04:57 - just try changing the name to something
04:58 - else
04:59 - so i'm going to do that and now you
05:01 - should see inside of my django tutorial
05:03 - folder i have this new directory called
05:05 - my site
05:06 - now if i go in here we'll look through
05:08 - some of the
05:09 - files that we have so we have this
05:11 - manage.pi file inside the root directory
05:13 - of my site
05:15 - and this is what we're going to be using
05:17 - to create applications to run our server
05:19 - to do all kinds of stuff so this is an
05:21 - important file to use and then inside of
05:23 - my site so the other directory
05:26 - we have a few of these files like this
05:28 - i'm not going to go through what all of
05:29 - them do
05:29 - but we will be modifying this url's file
05:32 - later in the video
05:33 - okay so that's a brief overview of what
05:35 - that is so now that we've done that
05:38 - we've actually created a django uh
05:40 - project and we can test to make sure
05:42 - that this
05:42 - project is working uh by just running a
05:45 - uh
05:45 - a server on our local machine that's
05:47 - gonna allow us to connect
05:49 - to our website so right now when all the
05:52 - stuff we're going to be doing
05:53 - is known as development so essentially
05:55 - we're just working on our local machine
05:58 - our website is not live on the internet
05:59 - like not anyone can go to it
06:01 - but when you run this it's going to
06:03 - allow you to connect to it and view it
06:04 - as
06:04 - if it was live on the internet but it's
06:06 - just running off our local machine
06:08 - to do this what we're going to do is
06:09 - we're going to type python
06:11 - or sorry actually one step before that
06:13 - we need to change into this
06:15 - my site directory so right here we're in
06:17 - this directory now
06:18 - we need to go into my site so to do that
06:20 - we're going to go cd
06:21 - my site and now what we're going to do
06:24 - is we're going to run this
06:25 - manage python file with a few arguments
06:28 - so to do this we're going to do python
06:30 - manage if i do space here manage dot
06:34 - pi and then we're going to say run
06:37 - server like that so let's hit enter here
06:40 - and what we're going to do is now we're
06:41 - going to start running a server on our
06:44 - local port which is actually 8080 which
06:46 - is going to allow us to connect
06:48 - and view our website we don't have
06:50 - anything on the website yet
06:52 - but i will show you connecting to it so
06:53 - to connect to this what we're going to
06:55 - do is just copy this http link here
06:57 - looks like a little ip address and we're
06:59 - going to go to google and simply paste
07:01 - that
07:02 - in the uh bar up here so when we do that
07:04 - you should see a page that looks like
07:06 - this
07:07 - if you don't see this page re-watch uh
07:09 - the last few minutes of the video and
07:11 - make sure you follow the steps correctly
07:12 - because you should see this popping up
07:15 - all right so now that we have that we'll
07:16 - leave that open
07:18 - and i'll quickly mention that right now
07:19 - this is running on port 8080.
07:21 - if you for some reason port 8080 is
07:24 - blocked or you want to run it on a
07:25 - different port
07:26 - what you can do is simply when you type
07:29 - that
07:29 - run server command after run server just
07:32 - type the port you want to run it on
07:34 - so for example if i want to run it on
07:35 - port 5050
07:37 - i don't even know if that's a port but
07:38 - you could just hit enter
07:40 - and then it would run on that port and
07:42 - it would give you a different address to
07:43 - connect
07:44 - to uh the website okay and also if you
07:47 - want to stop the server from running
07:48 - which is what i did i just hit control
07:50 - and c on the keyboard okay so now we've
07:53 - got this
07:54 - uh we'll close this up for now and we'll
07:55 - look at that after
07:57 - what we're going to do now is create
07:59 - what's known as an app
08:00 - now right now we haven't actually
08:02 - created an application or any views or
08:04 - any web pages for our
08:06 - site we've just kind of set up the
08:08 - environment that's going to be
08:10 - hosting that site for us that's kind of
08:11 - a way to think of it so if we want to
08:13 - create an
08:14 - application which is what we're going to
08:16 - run from our
08:18 - kind of environment to do this we need
08:20 - to
08:21 - what do you call it so we're already in
08:22 - this directory we need to use this
08:24 - manage file once again
08:25 - to create that so to do this i'm going
08:27 - to do python
08:29 - and then i'm going to go to manage
08:32 - manage dot pi and then type the name of
08:35 - or sorry
08:36 - start app after this and now type the
08:38 - name of whatever app
08:40 - i want to uh to create so in this case
08:43 - i am just going to type test as my app
08:46 - name but you guys can type whatever you
08:47 - want actually you know what let's change
08:48 - this to main
08:49 - so now that i do this i have python
08:51 - manage.pi start
08:52 - app and then i hit enter like this now
08:54 - you can see that it should create a new
08:57 - directory inside of our my site
09:00 - directory called main
09:01 - now it's very important that it's in
09:03 - this directory if it's not
09:05 - there is other ways to access it but
09:07 - it's not going to work for what i'm
09:08 - going to be showing you
09:09 - so now we should have a directory system
09:11 - that looks like this django tutorial
09:13 - you have a folder called my site you go
09:15 - in there you should have main which has
09:17 - a few files in here which we'll talk
09:18 - about after
09:19 - and then it has my site and this manage
09:22 - dot pipe manage python file okay
09:25 - so now that we've done this let's rerun
09:27 - our server
09:28 - and connect to uh that page so to rerun
09:31 - our server same thing python manage.pi
09:34 - run server
09:35 - and we'll do that we'll copy this link
09:37 - once once more
09:38 - and just run this up here all right so
09:42 - there we go so now everything is is
09:43 - working fine
09:44 - so what we're going to do now is we're
09:46 - going to start modifying some of these
09:47 - python files
09:48 - and actually displaying our own html
09:51 - code
09:51 - on the website now it's a bit of a
09:53 - process make sure you guys are following
09:55 - along for this because there is quite a
09:57 - few steps and if you mess up one
09:58 - slightly uh it will result in a few
10:01 - issues happening in your
10:03 - with your website and connecting and all
10:04 - that so what i'm going to do is i'm
10:05 - going to open up a text editor in this
10:07 - case
10:08 - it's subline you guys can use whatever
10:10 - you want as long as you can edit these
10:12 - files and just understand what i'm doing
10:13 - so i like this just because as the
10:15 - directory system on the left here so i
10:16 - can easily
10:17 - navigate between stuff so what i'm going
10:20 - to do we'll close these up
10:21 - for right now is i'm going to start by
10:24 - going into my main folder
10:26 - and going into this views.pi file
10:29 - so this views file is what's going to
10:31 - actually store the different views
10:33 - for our application now a view you can
10:36 - kind of think of as a web page and this
10:37 - is where we're going to write
10:39 - essentially the code that's going to
10:40 - serve what's known as http requests
10:43 - and show some stuff up on our website
10:46 - now to do this
10:47 - the first step is to just import
10:49 - something which i'm going to say from
10:51 - uh jenggu dot
10:54 - dot http and then response
10:58 - we're going to import uh http response
11:03 - now i believe i probably butchered this
11:05 - yes sorry so it's actually just
11:07 - django.http
11:08 - um is that correct lowercase h
11:11 - my bad guys so drango.htdp import http
11:15 - response
11:16 - now down here we're going to create a
11:18 - function and this function is going to
11:20 - represent
11:21 - a view now we can create multiple views
11:23 - here but for now we're just going to
11:24 - stick with one
11:25 - and i'll be showing later on how we can
11:27 - connect different views
11:28 - and link to those and all that so we're
11:30 - inside define
11:31 - index we're going to put in here
11:34 - response
11:35 - and then what we're going to do is we're
11:37 - simply going to return
11:38 - http response and in here we're
11:42 - just going to type some text now you can
11:44 - type whatever you want i'm just going to
11:45 - say
11:45 - tech with tim in here
11:48 - and this is actually our first view now
11:51 - what goes in here
11:52 - is html code if you don't put any tags
11:56 - so for example like i don't put
11:58 - h1 um slash h1
12:01 - it'll just show up as like standard text
12:03 - but if you want to create a header or
12:04 - something
12:04 - you can just do h1 and i'll be talking
12:07 - about how to do more complex html stuff
12:09 - later
12:10 - so that should be it for this file right
12:13 - now and what we're going to do
12:14 - next is we actually need to create a new
12:16 - file inside
12:17 - of this main application that's going to
12:21 - represent our urls and we'll talk about
12:23 - how all this works in a second
12:24 - so i'm just going to create create a new
12:26 - file here so file new file
12:28 - and what i'm going to do is just make
12:30 - sure i save this and i'm going to call
12:32 - it urls.pi
12:34 - but it has to be inside of this main
12:36 - folder so it should be in here
12:39 - okay so urls.pi now in here is where
12:42 - we're going to define
12:43 - the paths to our different web pages
12:47 - and once we do the other there's another
12:49 - url file we have to modify as well
12:51 - but this one is going to represent the
12:52 - urls that go to the different views
12:55 - that we have in this file so for example
12:57 - right now we have one view
12:58 - but if we had another view so like if i
13:00 - copy this and paste this down here
13:02 - then we would have to define that inside
13:04 - of the urls file with a certain path
13:06 - so we can determine which view we're
13:08 - going to go to uh
13:10 - based on whatever path the user types in
13:13 - uh
13:13 - in the search bar at the top okay so
13:16 - we'll go urls.pi and what we're going to
13:17 - do in here is we're going to say from
13:19 - django dot urls
13:22 - import path like that okay and then in
13:26 - here we're going to say from
13:27 - dot views or sorry from
13:30 - dot import views now this essentially
13:34 - means just
13:34 - import views from the current like
13:36 - directory that we're in
13:37 - uh so that's how we'll do that and then
13:39 - in here we're gonna type url
13:41 - and here what we'll do is simply say
13:43 - path and then we'll put a comma after
13:45 - that and we're just gonna type
13:47 - um a blank string and we're going to
13:50 - type views
13:51 - dot index and then name
13:54 - equals index like that now what this is
13:57 - going to do
13:58 - uh we'll talk about this more later
13:59 - because we have to do some other stuff
14:01 - first is essentially say
14:02 - if we get into this application and
14:05 - we're just
14:05 - on the home page so we don't type like
14:07 - slash home or just
14:08 - the home directory we're going to go to
14:10 - the views.index page and that has the
14:13 - name of index
14:14 - and what that means here is we're gonna
14:16 - serve this http response
14:18 - which means that once we go to that page
14:20 - it should show uh
14:22 - tech with tim in a header one on the
14:25 - page
14:25 - now this will make more sense once we do
14:27 - the other url file and i can show you
14:29 - how we kind of navigate through it
14:30 - but for now uh just just have this typed
14:33 - in
14:34 - so that's actually all we have to do
14:35 - from inside of this main folder
14:38 - now what we have to do is we have to
14:40 - link this application
14:42 - to our project now remember this
14:45 - this django tutorial folder right is the
14:47 - project
14:48 - for our website and this main folder
14:52 - inside here is the application that
14:54 - we're going to link to our project
14:56 - it's a little bit confusing but you guys
14:58 - should understand in a second so what we
14:59 - need to do is we need to essentially set
15:02 - the url that's going to link to this
15:04 - application because we can have more
15:06 - than one application inside of our
15:08 - project
15:09 - so to do this what i'm going to do is go
15:11 - to the url files inside my site
15:13 - and this should actually already be
15:15 - created for you you should already have
15:16 - this code
15:17 - and i'm simply going to modify this
15:19 - right here so from django.urls
15:22 - import path and import include
15:25 - now after this path here i'm going to
15:28 - copy this
15:29 - and paste this directly below it now
15:31 - what i'm going to do
15:33 - is i'm going to say that i want to
15:35 - navigate
15:36 - to this application when the user types
15:39 - in a certain
15:40 - path and what i mean by path is let's go
15:42 - up here right now we have this okay
15:44 - but when i say path i mean like if you
15:46 - type slash home
15:47 - the path would be slash home right and
15:50 - we would have to know where to go
15:51 - if you type slash home just like if you
15:53 - go on a website and you do slash login
15:55 - or slash
15:56 - sign up you get directed to different
15:57 - pages so that's what we're doing right
15:59 - now
15:59 - so maybe we have another page it's
16:01 - called sign up or something like that so
16:02 - we have to define
16:04 - when we type certain paths where we're
16:06 - going to go and that's what we're doing
16:07 - right now
16:08 - so we already have one path which is
16:10 - known as admin now
16:11 - admin gives you like an admin dashboard
16:13 - and we'll look at that in later videos
16:15 - right now it's not super important
16:17 - but we want to define the path that we
16:18 - should go to automatically
16:21 - when we type something so right now i'm
16:23 - actually just going to leave this
16:24 - as blank and what this means is if we
16:26 - don't type anything
16:28 - so we just put in this main url bring us
16:31 - to whatever page i'm about to define
16:33 - here
16:34 - so in here i'm going to type include
16:37 - like this
16:37 - and then what i'm going to do is in
16:39 - strings here i'm going to go to
16:41 - main dot views
16:44 - i believe actually sorry main dot urls
16:47 - is the correct page there so what this
16:49 - means now is if we don't type anything
16:51 - for our path we will automatically
16:54 - direct ourselves to the main.urls file
16:57 - now the main.urls file is this one right
16:59 - here and what it's doing here is it's
17:01 - going to look at
17:03 - what path we've been given we'll talk
17:05 - about that in a second and then go to
17:06 - the appropriate
17:08 - view from this views file here okay so
17:11 - it's
17:11 - we're linking from multiple different
17:13 - files we're sending paths
17:14 - and all that stuff okay but if we look
17:16 - at the urls.pi
17:18 - file here under my site what this
17:20 - include actually does
17:21 - is it means okay we're going to look for
17:23 - a path that specifies whatever's in this
17:26 - string so in this case it'd be admin in
17:27 - this case it's nothing it's just the
17:29 - default path
17:30 - and what we're going to do is we're
17:31 - going to take everything after that path
17:33 - and we're going to send it to the
17:35 - main.urls page so for example
17:37 - if our path and i'll type it down here
17:39 - looks like
17:40 - whatever the ip address is and then like
17:42 - slash home
17:44 - slash start and we had slash home here
17:47 - okay
17:47 - what we would do or we'll do home slash
17:50 - like that sorry
17:51 - is we're gonna look for the this home
17:54 - path here so we find this we find home
17:55 - okay
17:56 - and once we find this what we're gonna
17:58 - do is we're gonna say okay so we'll get
17:59 - rid of this
18:00 - because we found that and we'll take
18:02 - start like that
18:04 - and we'll pass it over to this urls.pi
18:07 - file inside of our main application
18:08 - because it says go to main urls right
18:11 - and now what main urls is going to do is
18:13 - it's going to look for
18:14 - a path that's called start because it
18:16 - gets past start
18:18 - like this and it's going to see okay do
18:20 - i have any path that says start
18:22 - now if it does it's going to direct us
18:24 - to whatever function
18:25 - inside the views file that we've defined
18:28 - so if i add another path here
18:29 - okay and i define this and i say this is
18:33 - start with a forward slash so let's say
18:35 - that has a forward slash two
18:36 - then what will happen is we will go to
18:38 - the views.index
18:39 - view because that's the path that we
18:42 - typed in
18:43 - now in this case uh we're just going to
18:44 - leave it as a blank path which means
18:46 - that
18:47 - if you had nothing just like that it'll
18:50 - just automatically go to
18:52 - this path you guys should understand
18:53 - this in a second once we start actually
18:55 - doing it
18:56 - okay so we've done this now so actually
18:59 - i don't know if we're going to have to
19:00 - restart the server or not
19:02 - but let's just hit enter one more time
19:03 - in the search bar and see what we get
19:05 - okay so we get now tech with tim in the
19:08 - header one tags
19:10 - now i know i kind of went a little bit
19:12 - faster this and it might be a little bit
19:13 - hard to understand
19:14 - but we'll create another page now and
19:16 - i'll show you how this actually is
19:18 - working
19:19 - so um we've done that let's leave this
19:21 - open
19:22 - so essentially right this is what was
19:24 - shown we had inside this views.pi file
19:27 - we had this index function and it
19:28 - returned h1 tags
19:30 - tech with tim now what i'm going to do
19:31 - is just create another function i'm
19:33 - going to copy this
19:34 - and i'm just going to call this let's
19:36 - say v1 okay
19:38 - and then here instead of tech with tim
19:40 - we'll just say
19:42 - view one exclamation point okay so now
19:45 - let's show
19:46 - how we could possibly navigate into a
19:48 - different view
19:49 - using this kind of url structure that
19:51 - we've set up so remember
19:53 - this urls inside of my site defines
19:55 - what's going to happen
19:57 - when we go to a certain link
20:00 - what page we're going to direct into so
20:03 - i had this as blank before so what
20:05 - happens is if you don't type anything
20:07 - after the main url which is like that
20:08 - https it's just going to direct us to
20:11 - the main.urls
20:12 - and it's going to include whatever comes
20:14 - after
20:15 - this blank tag essentially okay
20:19 - so if we want to make it so we could
20:21 - possibly go into another uh
20:23 - what do you call it file folder whatever
20:25 - another view what we can do is add
20:27 - another url inside of this urls.pi so
20:30 - i'll copy this path
20:31 - and instead of having a blank this time
20:34 - i'm going to say slash
20:35 - v1 or i'm going to say sorry v1 forward
20:38 - slash
20:39 - and now instead of going to the
20:41 - views.index view
20:42 - i'm going to go to views.v1 remember the
20:45 - name of our function
20:46 - and again i'll call this a different
20:48 - name which will be view1
20:50 - all right so that hopefully this will
20:53 - make sense
20:53 - if we don't type anything so meaning we
20:55 - like we don't type admin
20:56 - what's going to happen is whatever the
20:58 - path that we've given is going to be
21:00 - passed over to this urls.pi file
21:02 - if it's blank meaning we haven't typed
21:04 - anything at all other than the main url
21:06 - it's going to bring us to the index page
21:08 - if we type v1 it's going to bring us to
21:10 - the v1 page
21:11 - so let's try this on our web browser if
21:14 - i change this now and i say
21:15 - slash v1 you can see that it brings me
21:18 - to the page
21:18 - v1 now remember if i get rid of v1 and i
21:21 - hit enter it brings me back to the page
21:23 - tech with tim so we successfully set up
21:26 - two pages that we can see
21:28 - and we kind of understand now how this
21:30 - url directory system works
21:32 - so that's all it is um to setting up our
21:35 - basic
21:36 - django pages uh in the next video we'll
21:39 - do a bit more on some multiple pages
21:41 - we'll talk about
21:42 - creating some actual like real html
21:44 - stuff on the website
21:45 - uh and just keep going further and
21:47 - further with django if you guys enjoyed
21:49 - the video please make sure you leave a
21:50 - like
21:51 - and subscribe if you need any help uh
21:53 - don't hesitate to join my discord server
21:55 - follow me on twitter or my instagram i'm
21:57 - always answering people's questions
21:58 - there
21:59 - and with that being said i will see you
22:00 - in the next so in today's video what
22:02 - we're going to be doing is going through
22:03 - databases so how to set up databases add
22:05 - entries retrieve entries
22:07 - all that kind of stuff this will be kind
22:09 - of a beginner-ish tutorial on databases
22:11 - i'm not going to be going through
22:13 - absolutely everything as there's a ton
22:14 - of stuff to cover but i will give you
22:16 - guys a very good foundation and pretty
22:18 - much everything you actually need to be
22:19 - able to use the database
22:21 - then obviously you could probably look
22:23 - up some more stuff if you need that in
22:24 - the future
22:25 - now the database that we will be using
22:27 - is sqlite3
22:29 - now there is other kinds of databases
22:30 - that you can use but if you're a
22:32 - beginner and for our purposes sqlite is
22:34 - just the best and easiest to use it
22:37 - doesn't really make a massive difference
22:38 - if you use the other ones
22:40 - however if you'd like to use those go
22:41 - ahead and i will be showing you
22:43 - briefly how you can actually change your
22:44 - database now
22:46 - the reason i'm not going into templates
22:48 - and more advanced html right now is
22:50 - because
22:51 - likely the information that we're
22:52 - storing in our database is actually what
22:54 - we're going to be
22:55 - wanting to show within our models uh or
22:57 - sorry not models within our templates
22:59 - and html so it kind of makes sense to
23:01 - make the information first
23:03 - and then display it afterwards within
23:06 - templates and all that so we're not uh
23:08 - kind of redundantly typing things and
23:10 - modifying things later
23:12 - so with that being said let's get
23:13 - started now our first step when we're
23:16 - gonna be working with the database is we
23:17 - actually need to modify uh
23:19 - our settings.pi file inside of our
23:21 - interior
23:22 - my site directory now to do this
23:24 - obviously we're going to go to
23:25 - settings.pi
23:26 - what we need to do is need to scroll
23:28 - down to install
23:30 - apps we need to add our application in
23:32 - this case called main for me
23:34 - to our installed apps and the reason we
23:36 - need to do this is because we're going
23:37 - to be working with databases
23:39 - and just some things in the future we
23:41 - need to tell django that we have another
23:43 - application
23:44 - that has some dependencies and things
23:46 - that need to be set up
23:48 - inside of our project so to do this what
23:50 - we're going to do is just go single
23:52 - quotes right at the end of this
23:53 - uh what do you call it wherever the
23:55 - comma is and we're just going to type
23:56 - the name of our application in this case
23:58 - mine's called main yours this might be
24:00 - called something else
24:00 - and then we're going to type dot apps
24:03 - dot
24:04 - and then main config
24:07 - and then add a comma after that now
24:09 - obviously if yours is named something
24:10 - else you're going to change this so
24:12 - you'd add a capital letter for whatever
24:14 - the name is and then
24:15 - yeah just put it there and that'll work
24:17 - for you okay so we've done that and now
24:19 - we've told django that we actually have
24:21 - this application main
24:22 - and we need it to be configured and set
24:25 - up when we uh
24:26 - make some modifications to our project
24:28 - and stuff like that so
24:29 - our next the next thing that we actually
24:31 - have to do is we need to get into our my
24:33 - site directory so the same directory
24:35 - that has
24:36 - that manage.pi file in it and we have to
24:38 - run the following command
24:40 - which is python manage.pi
24:43 - and then migrate now
24:46 - when you type this uh what do you call
24:48 - it yours might
24:50 - yours should likely pop up like a bunch
24:52 - of text that says making migrations
24:53 - making changes
24:55 - now since i've already done this because
24:57 - i was testing it before
24:58 - it's not showing up for me but you
24:59 - should do that what i've just done here
25:01 - essentially is that we've updated the
25:03 - settings.pi file
25:04 - so let's run manage.pi and get it to
25:06 - make any
25:07 - changes to the project that it might
25:09 - need to do and that's as far as i'm kind
25:10 - of going to explain that
25:12 - all right so we've done that and now
25:14 - we're actually ready to start defining
25:16 - some of our models
25:17 - for our database so if you don't know
25:19 - how to a database works essentially it's
25:21 - just a collection
25:22 - of information and what we're going to
25:23 - be doing is defining some models
25:25 - and some attributes that kind of go with
25:28 - each of the models and the model is just
25:30 - a way of
25:31 - well modeling information and it makes
25:33 - it just easier for us to grab
25:35 - information and we can add attributes to
25:37 - those models we can add some methods to
25:38 - them
25:39 - you guys will see how it works in just a
25:41 - second but essentially if we want to
25:43 - create a model what we're going to do is
25:44 - we're just going to create a class with
25:45 - the name of our model and we're going to
25:47 - inherit it
25:48 - from models.model which is like a
25:51 - database
25:52 - model class set up from django already
25:55 - now for this
25:56 - application that i'm going to write i
25:57 - want to create a to-do list
25:59 - so to do this i'm going to create two
26:01 - models one which is a to-do list
26:03 - and then the other one which is items
26:05 - that go on our to-do list and you guys
26:06 - will see how this works in a second so
26:08 - i'm just going to say class to-do list
26:11 - like this and it is going to inherit
26:13 - from models
26:14 - dot model now this essentially means
26:17 - that we're creating a database
26:19 - object uh which is called to-do list and
26:22 - now we're going to define
26:23 - some of the attributes and entries that
26:25 - each
26:26 - model to-do list is going to have so uh
26:29 - for our to-do list i want to have a name
26:31 - so i'm going to say name is
26:33 - equal to and in this case models
26:36 - dot chart field and i'm going to say
26:39 - max underscore length equals 200.
26:43 - now whenever we create a new attribute
26:45 - or uh
26:46 - yeah i guess just attribute of our
26:49 - information of our model
26:50 - what we do is we create it as a class
26:52 - variable and we simply
26:54 - do the name of the attribute and then we
26:56 - have to do the type of
26:58 - field that we want to be stored in our
26:59 - database all right guys i'm back
27:01 - so i'll take a quick cut there because
27:02 - it's getting a phone call but what i'm
27:03 - going to do now is just define a method
27:06 - uh we'll just call this str and i'm just
27:08 - going to put self in here and simply
27:10 - return
27:11 - self.name just so that if we ever want
27:13 - to print this out or see what it
27:15 - actually looks like
27:16 - we can get some meaningful text by using
27:18 - the string method on that
27:20 - so next what we're going to do is define
27:22 - our other model which is
27:23 - item so same as before this will inherit
27:25 - from model stop model
27:27 - and this is going to have some
27:28 - attributes as well now item is a little
27:31 - bit different
27:32 - just because it's actually related to
27:34 - to-do list and we're going to have items
27:36 - as a part of our to-do list
27:38 - so to do this again right what we're
27:40 - going to do
27:41 - is simply say to do list
27:44 - equals and in this case we'll say models
27:47 - dot
27:49 - foreign key and then in here we're going
27:52 - to type
27:52 - to do list like that
27:56 - and we're going to say on delete equals
27:59 - models dot cascade
28:03 - now the reason we're doing this is
28:05 - because
28:06 - remember how like up here we have
28:08 - character field right which is a type of
28:10 - field that we could store
28:12 - uh information in well we don't actually
28:14 - know the type of fielder django doesn't
28:16 - know the type of field that
28:17 - to-do list is because it's an object
28:19 - that's not defined within django
28:21 - so we have to define the fact that we're
28:23 - going to use a foreign key
28:24 - in this case a to-do list object when we
28:27 - create an item okay and that's
28:29 - what we're doing now on delete is just
28:31 - saying well if we delete to-do list
28:33 - since all items exist on a to-do list
28:36 - we're gonna have to delete these as well
28:38 - and i believe that's what on cascade is
28:39 - doing is just defining the fact that
28:41 - this has a special way of being removed
28:44 - okay so our next attribute is going to
28:45 - be name so i'm going to say
28:47 - sorry not name it'll be text and text is
28:50 - going to be equal to a character field
28:51 - as well
28:52 - and a character field is essentially
28:53 - just a string note that you do need this
28:56 - max length whenever you create a
28:57 - character string
28:58 - so make sure you add that in this case
28:59 - let's just make that 300
29:01 - and now we will add one more field which
29:04 - will be a boolean field so models
29:07 - dot boolean field and it'll just
29:09 - represent whether or not we've completed
29:11 - the item on our to-do list
29:13 - same thing here for string so self
29:16 - and we'll just return the text so return
29:19 - self dot text now remember in the future
29:22 - we can add to these models and modify
29:24 - them
29:24 - so for now i'm just keeping it simple we
29:26 - don't need anything too complex
29:28 - all right so now that we've done that
29:29 - we've modified our models we actually
29:31 - have to tell django that we've
29:33 - modified our models and to do that what
29:35 - we're going to do is we're going to make
29:36 - sure we're in that same directory so my
29:38 - site
29:38 - i'm going to say python manage dot pi
29:43 - make migrations in this case we'll put
29:47 - the name of our app which is
29:48 - main now uh yes that's okay so this
29:52 - should work
29:53 - and let's hit enter here and see what we
29:54 - get all right so there we go
29:56 - so now when you do that you should see
29:58 - something that says migrations4 and then
30:00 - the name of your app
30:01 - which should be main it says we created
30:03 - a model to do list and we create a model
30:05 - item
30:05 - now making migrations is similar to like
30:08 - adding something to the staging area and
30:09 - git if you don't know what this is don't
30:11 - worry but
30:11 - it's similar to version control in that
30:14 - we make a change
30:16 - it'll save the change and then we can
30:18 - actually apply that change to our
30:20 - project
30:21 - so if i want to apply this change right
30:23 - now i've only made it i haven't actually
30:25 - applied it what i have to do is go
30:26 - python manage.pi
30:30 - and then migrate and there we go it says
30:33 - applying migrations and
30:35 - it has applied the migrations you should
30:37 - see if you go inside of your migrations
30:39 - folder
30:40 - inside of your app you should get
30:41 - something that looks like this and you
30:43 - can see if you actually open it up
30:44 - it tells you the exact migrations or
30:46 - changes that were made
30:47 - in case we have id uh id is
30:50 - automatically added
30:52 - for all of the different models that you
30:54 - create as a field
30:55 - we have the name which is a character
30:57 - field we have text complete and to-do
31:00 - list
31:01 - there we go so um that's kind of how
31:03 - that works
31:04 - it's nice because you can go back and
31:06 - view previous changes
31:08 - and then obviously revert to other
31:10 - changes by just using those files
31:12 - uh so yeah all right so now that we've
31:14 - done that what's actually next is to add
31:16 - some things into our database so right
31:18 - now we have a fully functioning database
31:20 - and i'm going to show you how we can add
31:21 - stuff to it now
31:23 - the easiest way to show you is just from
31:24 - the command line because we'll just mess
31:26 - around with a few different commands get
31:27 - the syntax down
31:28 - and then start doing stuff from code so
31:31 - to get into a
31:32 - command line what i'm going to do is
31:34 - just go
31:35 - python manage.pi and then shell this
31:38 - will open up
31:39 - our python shell for us which will allow
31:41 - me to add some things into the database
31:43 - now our first step is we're just going
31:45 - to
31:45 - import our models so we can use some of
31:47 - the methods and we can actually use
31:48 - those models to create objects and store
31:50 - them in the database
31:51 - so i'm going to say from and in this
31:53 - case main.models because we're not in
31:55 - that main directory
31:56 - we'll import what's the name of our
31:59 - models
32:00 - we have item and we have to do
32:03 - list like this there we are so from
32:06 - main.models import item and to-do list
32:08 - and now what we're going to do is we're
32:10 - going to create a to-do list and
32:11 - add it to the database and this is
32:13 - really easy to do so i'm just going to
32:14 - say t
32:15 - which is going to be our to-do list will
32:16 - be to do list
32:18 - and then in here i'm just going to give
32:19 - it a name and i'll say name
32:22 - equals in this case let's just say tim's
32:25 - like that list suite so tim's list
32:29 - and hit enter now if we want to save
32:31 - this into the database
32:32 - watch how easy this is t.save
32:35 - and we have actually now saved this into
32:38 - the database and if i want to
32:40 - see all of the different objects what i
32:42 - can do is i can say
32:44 - to do list
32:47 - if i can get the capitalization correct
32:50 - dot objects
32:51 - dot all and if i do that you can see we
32:54 - get a query set and it says to-do list
32:57 - tim's list and there we go we've
32:59 - successfully stored one to-do list
33:01 - in our database so to get all of the
33:04 - to-do lists that we have i just did
33:06 - objects.all
33:07 - and obviously dot objects is giving
33:09 - other objects and dot all is actually
33:11 - going to give me
33:12 - like a query set which will allow me to
33:14 - access objects
33:15 - now each of our objects have ids
33:18 - associated with them
33:19 - and they have that name attribute
33:20 - associated with them so if i want to see
33:22 - the id
33:23 - of some of my objects what i can do is
33:25 - say to do
33:26 - list and i believe i can say dot get
33:30 - and then in here i'm going to say id
33:32 - equals and then in this case the id is
33:34 - going to start at 1 and it's going to
33:35 - increment
33:36 - as you add more objects but if i do that
33:38 - type object to the list has no attribute
33:40 - get
33:41 - oh i believe we might have to do
33:43 - objects.get
33:44 - dot objects.get ah there we go so if i
33:47 - do objects.get and i put the id which is
33:50 - the thing that i'm looking for id1
33:52 - you see we get a to-do list and it says
33:54 - tim's list now if we didn't put that
33:56 - string
33:57 - thing here string method inside of to-do
34:00 - list it wouldn't be saying tim's list it
34:02 - would be giving us like a memory address
34:04 - awesome so we have that now if we want
34:06 - to query by like names what this is
34:08 - doing querying just means like getting
34:09 - all of the objects
34:11 - that contain the key you're putting what
34:13 - i can do is just say name
34:14 - equals in this case and say tim's
34:18 - list like that and obviously it's going
34:20 - to give me tim's list
34:21 - now if i try to query for something
34:23 - that's not that doesn't exist like i say
34:25 - id equals two
34:26 - you see we get an issue because there's
34:28 - no query that exists for id2
34:30 - if i wanted that to work i would have to
34:32 - add another item into
34:34 - the database suite so that's kind of how
34:37 - you do some of that now if we want to
34:39 - create an item what we can do for items
34:41 - is actually really nice
34:42 - is we can just let's see the best way to
34:45 - actually
34:46 - make an item is let's see this we're
34:49 - going to do
34:50 - t dot and in this case we're going to
34:52 - say item
34:53 - underscore set and if i print this out
34:56 - dot all like this you're going to see we
34:58 - get an empty query set
35:00 - now notice i did item underscore set
35:03 - right which would be um an attribute of
35:06 - our to-do list
35:07 - uh t right because we created two lists
35:09 - here we saved it
35:11 - and so the t object is still there but i
35:13 - said item underscore set but i haven't
35:15 - defined item underscore set in here
35:17 - what this is is because i've added this
35:20 - relation between items and to-do list
35:23 - each to-do list
35:24 - automatically is going to have a set
35:27 - that stores a bunch of different items
35:29 - okay so now the way that we add items
35:31 - into our database
35:32 - is a little bit different than how we
35:34 - create the to-do list now because
35:37 - our items are related to our to-do list
35:40 - there's a special way that we can create
35:42 - them and create them within our to-do
35:44 - list
35:44 - so essentially remember we have that
35:46 - to-do list t i just tab down just a bit
35:48 - more space and it's cleaner
35:50 - but uh we have that object t and if i
35:52 - printed that
35:53 - you can see that's our to-do list tim's
35:55 - list now because of the relationship
35:56 - we've created here
35:58 - what i can actually do is say tim
36:00 - underscore
36:01 - and then item underscore set
36:05 - dot all and it actually gives me a set
36:08 - of items
36:10 - which are exactly these items and you
36:12 - just reference all of this with
36:13 - automatically with a lowercase it's what
36:15 - it defaults to
36:16 - and yeah so essentially there is like a
36:19 - blank placeholder
36:20 - for our to-do list to hold a bunch of
36:22 - items because of what we did here
36:24 - so if we want to create an item inside
36:26 - of this item set
36:28 - what we do is we say t dot item
36:31 - underscore set
36:32 - dot create and then here we give the
36:35 - parameters that we need for our item so
36:37 - we need a text and we need complete
36:39 - so what we'll do is we'll say text
36:41 - equals
36:42 - and in this case we'll just say like
36:44 - maybe go to the mall
36:46 - something you have to do and complete
36:48 - obviously will be equal to false
36:51 - okay so we do that and now we see we
36:53 - have an item that says
36:54 - go to the mall so we've done that now
36:56 - we've created an item
36:57 - inside of our item set now if i do t dot
37:02 - item underscore set and then dot
37:05 - all you can see that we get all of the
37:08 - items
37:08 - and obviously if i want to get one of
37:10 - the items and i can say
37:12 - dot get and in this case it'll be id1
37:15 - so i say id1 go to the mall again if i
37:18 - try to do id2 we're going to run into an
37:20 - issue because id2 does not
37:22 - exist all right so now that we've
37:23 - created uh one item or
37:25 - we've created an item in a to-do list
37:27 - inside of our database
37:29 - what we can do is we can actually
37:30 - display that information from some of
37:32 - our views and start using the web
37:34 - browser to see this information so the
37:36 - reason i did that from the command line
37:37 - is just because it was a lot it's gonna
37:39 - be a lot faster just to run that
37:40 - and actually add items to our database
37:42 - obviously if we're adding things into
37:44 - our database in future videos we're
37:46 - probably just gonna use our web browser
37:47 - and we'll have like a form where we can
37:49 - input stuff and it'll automatically be
37:50 - added and that's obviously what we'll be
37:52 - doing later
37:53 - so what i'm going to do is i'm going to
37:54 - go to my views now and i'm actually just
37:56 - going to get rid of u1 which means that
37:58 - if i go to urls i should remove the path
38:00 - v1 now what i want to do is i want
38:04 - you to be able to type the id of a
38:06 - certain to-do list
38:08 - in the address bar and it pop-up the
38:10 - name of the to-do list and the items
38:12 - that exist
38:12 - in that so to do that uh
38:15 - i will briefly show a
38:18 - cool thing that we can do with paths and
38:21 - we'll elaborate on it in future videos
38:23 - but essentially i can actually put
38:25 - these two tags in here and say int and
38:27 - in this case i'll just say ind
38:29 - or id standing for id and what this
38:32 - means now
38:32 - is what's going to happen is we're going
38:34 - to look for some
38:36 - integer in our path and we're going to
38:38 - pass that to the function
38:40 - views.index so that means that index
38:44 - now needs a variable called id in it and
38:47 - what i can do
38:47 - is i'll show you basically without the
38:49 - database actually is if i just put
38:51 - like percent id and then or percent s
38:55 - sorry
38:56 - and then outside here i do percent sign
38:58 - id
38:59 - it will actually what do you call it
39:01 - show me whatever number i type in
39:04 - in my what do you call it like on my web
39:07 - browser
39:07 - uh so i closed the command prompt i
39:09 - shouldn't have done that wow one second
39:11 - i just got a
39:12 - cd into my correct directories here
39:18 - django cd my site and then we will just
39:22 - simply run our server so we can test
39:24 - this and i can show you what i mean
39:25 - so let's do python manage.pi
39:28 - run server i gotta activate my virtual
39:32 - environment
39:32 - apologize about this guys okay so there
39:34 - we go so we've got this running now so
39:36 - let's go to our web browser and
39:38 - let me show you what i mean by this so
39:40 - if i
39:41 - hit this now you can see we get an issue
39:43 - because it says that
39:44 - it didn't find admin or it didn't find
39:46 - some integer which was an id
39:48 - so now if i type one in here it's like
39:50 - slash one
39:51 - you can see it actually brings me to a
39:52 - page that says one and if i type
39:55 - 3 in here brings it to a page says 3 if
39:58 - i type 4 we get 4
39:59 - and actually anything that we type in
40:01 - that's a number will just show up in
40:02 - here so we do like 4 8
40:04 - like it shows up there okay that's like
40:06 - the first kind of way that we can do
40:08 - dynamic pages in terms of the linking
40:10 - all right
40:11 - so what i'm going to do now is i have
40:13 - this id obviously so i don't want to
40:15 - just show the id but i want to get the
40:17 - id
40:17 - of that object as a to-do list from our
40:20 - database
40:20 - so to do that what i'm going to do is
40:22 - similar to what i've shown you in the
40:23 - command line is i'm start i'm going to
40:24 - start by importing
40:25 - our models so in this case i can just
40:27 - say from dot models
40:28 - import and in this case we'll just
40:30 - import to do list because
40:32 - actually we might need item as well so
40:34 - we'll import item as well
40:35 - so we'll do to-do list and item and what
40:37 - i'm going to do is get
40:38 - that to-do list based on the id so i'm
40:41 - going to say
40:42 - that i'll say ls is equal to
40:46 - to do lists dot
40:49 - objects dot get and then in this case
40:52 - we'll say id
40:53 - equals id right so now we have that
40:56 - to-do list object
40:57 - and now instead of printing the id
41:00 - let's print uh what he called the name
41:03 - of our to-do list so i can just say ls
41:05 - dot name so now we should have made a
41:09 - modification and it should have just
41:10 - our server is running it should just
41:11 - automatically changed let me just copy
41:13 - this link again
41:15 - and if i bring up my tab uh oh it's
41:18 - already there
41:19 - so if we do this and just change this id
41:20 - to 1 now you can see that we actually
41:22 - get
41:23 - tim's list because again the way this
41:25 - works is
41:26 - we go to urls we type some number it
41:29 - gets that number it passes it through
41:32 - this function as the value id
41:35 - we're just going to say we're going to
41:36 - go the similar thing we did in the
41:37 - command line
41:38 - well to-do list we'll get all the
41:39 - objects of type to-do list
41:41 - we'll get the one that has id1 and then
41:44 - we will simply
41:45 - take the name of that and print it to
41:46 - the screen or show it on the screen
41:49 - now again i can change this from id and
41:51 - i can make it name
41:52 - and i can make the name like tim's list
41:54 - so you'd have to type that in to get it
41:56 - so i mean we can show that as well so in
41:59 - this case
41:59 - let's just do string and then we'll do
42:02 - name
42:03 - and now we'll just have to make sure
42:04 - that when we type it in our link bar
42:06 - here that we actually type everything
42:08 - correctly and make sure i save all this
42:09 - too
42:10 - we type the name exactly like this so if
42:12 - i copy that
42:13 - and i put this here you can see that
42:16 - again it's showing up
42:17 - tim's list and we're not running into
42:18 - any issues but if i try to do
42:21 - like two here you can see that we're
42:23 - getting an issue because there's nothing
42:24 - with the name
42:25 - two in our database awesome so that's
42:28 - pretty straightforward that's how we get
42:29 - items
42:30 - and show them on the screen in the next
42:31 - video we'll do way more advanced stuff
42:33 - with this
42:33 - but if i want to get the items that are
42:35 - associated with the to-do list and show
42:36 - those as well
42:38 - well what i can do is uh well let's go
42:40 - back to uh no we'll just leave it as
42:41 - name so we don't need to change it now
42:43 - we'll get the items so to get the items
42:45 - we're going to say items equals and then
42:47 - in this case
42:48 - to-do list or actually ls because we've
42:50 - already got the to-do list
42:52 - dot item underscore set
42:55 - and then dot all and then what we can do
42:58 - is we well we know we only have one item
43:00 - so let's just get the first item so yes
43:03 - we just do dot
43:04 - get and then id equals one and we'll do
43:07 - is
43:08 - change this percent we'll add another
43:10 - one and we'll simply say
43:13 - item dot name or items not name i guess
43:17 - ah this should probably just be item
43:18 - let's say item.name
43:19 - or dot text my apologies
43:22 - okay so now that we have item.txt here
43:24 - we to add another percent in here
43:26 - so i'm just going to put another tag i'm
43:28 - just going to say br
43:30 - and then what do you call it br just
43:32 - standing for go to the next line
43:33 - and we'll add another tag this case is
43:36 - just going to be
43:36 - a p tag and we'll just put
43:40 - percent s like that so now if i go
43:43 - back to my bar here and instead of doing
43:46 - t
43:46 - i do tim's list and i hit enter
43:51 - what's the issue all right so i just
43:53 - realized we actually have to just put
43:54 - this string around item.txt
43:56 - don't know why that is but apparently
43:58 - that was the issue so anyways now if i
44:00 - go
44:00 - back to my web browser and refresh you
44:01 - can see we say we get
44:03 - go to them all now obviously it's a very
44:05 - basic example i'm going to make this
44:06 - look a lot better in next videos and
44:08 - we're not going to have to do like this
44:10 - kind of weird
44:11 - html tagging and whatnot but that's kind
44:14 - of been it for this video i hope you
44:15 - guys have an idea on how to use
44:17 - databases
44:18 - we'll be continually using them adding
44:20 - things and removing things and all that
44:22 - kind of stuff so if you
44:23 - are still confused we will be going
44:25 - through that in future videos
44:27 - but i just want to make sure we get
44:28 - everything set up and working for right
44:29 - now
44:30 - and with that being said i will see you
44:31 - guys in the next video now today's video
44:33 - is going to be a bit shorter and all i'm
44:34 - going to be doing is showing you guys
44:35 - how to use the django
44:37 - admin dashboard this relates directly to
44:40 - databases and how you can see all of
44:42 - your different tables and entries and
44:44 - all of that i'm going to be quickly
44:45 - showing you a few more things you can do
44:47 - with databases in terms of how to delete
44:49 - stuff
44:49 - and how to get um like lists of entries
44:52 - so for example say you wanted to sort
44:54 - all of the entries or say you wanted to
44:55 - get all of the entries that started with
44:57 - a certain letter or something
44:58 - i'll show you how to do that this is
45:00 - known as querying and
45:01 - there's a ton of different commands for
45:03 - querying so i'm not going to be showing
45:04 - you all of them
45:05 - but i'm sure you guys can look them up
45:07 - or we'll probably be using them
45:08 - throughout the series so you will learn
45:10 - them
45:10 - now i'm in my main directory right now
45:12 - my my site directory
45:13 - the first thing i'm going to do is just
45:14 - quickly extend what i did in the last
45:16 - video and show you
45:18 - how you can get a list of different
45:19 - entries and add more than one because
45:21 - this will be good when we go in the
45:22 - admin dashboard
45:23 - to see more than one entry so i'm just
45:26 - going to do python
45:27 - manage dot pi and then shell and what
45:30 - i'm going to do in here is again
45:32 - import uh what he called our model so
45:35 - from main.models
45:37 - import and then here we'll do item and
45:40 - we'll do two
45:42 - to do list like that
45:45 - and now what we're going to do is i'm
45:47 - going to get all of the items in to do
45:49 - list
45:50 - and show you how we can kind of search
45:52 - for certain items
45:53 - so i'm just going to say t equals to
45:56 - do list dot objects objects.all
46:00 - like that or actually let's just do dot
46:01 - objects so now we don't have to keep
46:03 - typing that we can just type t when we
46:05 - want to say for example get all of the
46:06 - objects we can just do t.all
46:10 - like that and then we get a query set
46:12 - that gives us all the objects
46:14 - but let's say we want to search for an
46:16 - object and before we knew how to get one
46:18 - using like the id
46:19 - equal to one but what if we want to get
46:21 - all of the objects in our set that start
46:23 - with the letter t
46:24 - or that start with tim or something like
46:26 - that well there's a way to do that and
46:28 - it's known as
46:29 - filtering so if we want to filter our
46:31 - query set and get
46:32 - all of the objects or all the data that
46:36 - fits a specific criteria we can say t
46:40 - dot filter and then we can name the
46:42 - criteria
46:42 - so in this case i could say name and
46:45 - then
46:45 - i believe you can just do under
46:47 - underscore starts with
46:49 - equals and in this case tim so
46:52 - there's a ton like there's a ton of
46:54 - these double underscore things that you
46:55 - can use
46:56 - i don't know all of them you'd have to
46:58 - look them up to get them all but if i do
46:59 - this
47:00 - and i hit enter you can see that we get
47:02 - the same set
47:03 - because obviously this starts with tim
47:05 - now if i do this again and i say like
47:07 - maybe
47:07 - bob you see we get an empty query set
47:10 - and this is a way that you can check
47:12 - if a specific element you're looking for
47:14 - is in
47:15 - the set rather than trying to get it and
47:17 - raising an exception
47:18 - so for example if i want to get
47:20 - something that has id
47:21 - equal to 2 and i filter that rather than
47:24 - getting an error we just get an empty
47:25 - query set because none of the ids are
47:27 - equal to 2 right
47:28 - so that's how we can kind of check if uh
47:32 - what we're looking for actually exists
47:34 - in the database so that's how you get
47:36 - stuff now to delete stuff
47:38 - is pretty straightforward you just have
47:39 - to actually get that database object
47:42 - first
47:42 - so i'm going to say dell underscore
47:45 - object is equal to and in this case
47:47 - we'll say t dot get
47:49 - id equals one now if i want to delete
47:52 - this
47:53 - very simple we'll just do dell
47:54 - underscore object
47:56 - dot delete like that and if you hit
47:59 - enter
47:59 - we will delete this object so now if i
48:02 - type t
48:03 - again um sorry t.all you can see that we
48:06 - have an empty query set because we've
48:08 - obviously deleted the
48:09 - to-do list that we've added so let's
48:11 - just create two more to-do lists
48:13 - really simply and we'll just say t t1
48:17 - equals to do list
48:20 - like this and we'll just say name equals
48:24 - first list and then we'll do t1.save
48:29 - and then we'll do the same thing here
48:30 - with uh what do you call it
48:32 - t2 and we'll just call it second list
48:34 - just so this way when i start doing the
48:36 - admin dashboard stuff which will be in
48:37 - one
48:38 - second then we'll be able to see more
48:40 - than one entry
48:42 - so we'll say second list and then
48:45 - t2 dot save like so won't bother any
48:48 - adding any items that's actually it if
48:50 - you need to get out of this you can just
48:51 - type quit
48:52 - like that and there we go all right so
48:55 - now we've added some things into our
48:56 - database
48:57 - so let's go to our admin dashboard now
48:59 - so how do we do that
49:00 - well our first step to accessing the
49:02 - admin dashboard
49:04 - is to create a login account so right
49:06 - now if we actually run our server and we
49:08 - say python
49:09 - manage.pi run server
49:13 - server will start running we can copy
49:15 - this domain here
49:17 - and we can go to it now remember we
49:19 - actually have this
49:20 - directory or link which is slash admin
49:23 - and when i do this it actually brings me
49:25 - to this
49:26 - django admin dashboard the thing is
49:28 - though what username and what password
49:30 - should we use
49:30 - well we don't have any so we need to
49:32 - actually create one so i'm going to stop
49:34 - running this for a second
49:36 - and what i'm going to do is create a
49:38 - login so i'm going to say
49:40 - python manage.pi and then i believe it
49:43 - is
49:43 - create super user yeah it is so there we
49:47 - go create super user
49:48 - and then in this case what we'll do is
49:50 - just give a username
49:52 - email and password so i'm going to put
49:53 - tim as my username
49:55 - i'll say tim at tech with tim.net
49:59 - and then for a password i'll just do one
50:00 - two three four for now
50:02 - all right uh password is too short okay
50:05 - okay so i'll just use another password
50:06 - then
50:07 - um what is it what is it saying here
50:10 - bypass password okay so it just said
50:12 - that's fine i can use that as a password
50:14 - anyways
50:15 - let's uh now try to sign into our admin
50:17 - dashboard and actually see what we're
50:19 - getting so let's say tim
50:20 - and then my password and click log in
50:23 - and you oh well it would help if i ran
50:26 - the server
50:27 - my apologies on that let's run that and
50:29 - now let's refresh this
50:31 - continue and there we go we are now
50:34 - inside of our admin dashboard
50:36 - now we have these groups in this users
50:38 - database
50:39 - which is actually storing if i go to
50:41 - users and the users that we just created
50:44 - so tim for example right and that's one
50:46 - database that's there
50:48 - same for groups this this is a bit
50:49 - different we don't need anything for
50:51 - that
50:51 - now the thing is where's our other
50:52 - database we created that database and
50:54 - we've been using it that has our to-do
50:56 - list in it well
50:57 - we actually need to give the dashboard
51:00 - kind of access to that database
51:02 - this is really easy to do but i'm just
51:04 - going to open up my subline text again
51:05 - here
51:06 - and what we need to do to do this is go
51:08 - to
51:09 - what do you call it our i believe it is
51:12 - admin dot pi
51:14 - inside of what do you call it the main
51:17 - application
51:18 - folder here all right so we just have to
51:20 - start start by importing
51:22 - our models so from models import and in
51:25 - this case we can just import
51:26 - the model that we care about in this
51:28 - case which is to-do list because items
51:30 - are going to be stored within a to-do
51:31 - list
51:32 - and then we just do admin dot site dot
51:36 - register and then in this case we do to
51:39 - do
51:40 - list which means that now we will
51:42 - actually be able to see the to-do list
51:44 - on our admin site uh so that's that's
51:46 - all we have to do for that
51:47 - so now this should actually
51:49 - automatically have updated
51:50 - but it may not have yeah it did not
51:54 - so let's just rerun our server quickly
51:56 - oh there we go it says reloading okay so
51:58 - now this should hopefully be updated
51:59 - if i refresh this work work work
52:03 - uh i guess not okay so let's just try
52:05 - this again
52:09 - slash admin okay so there we go sorry
52:12 - i've just i've been messed around so now
52:13 - i'm back
52:14 - slash admin and now you can see that
52:16 - under main which is our application main
52:18 - we have the database and model to-do
52:20 - list
52:21 - so if i open this you can see that we
52:22 - have first list and
52:24 - second list now this is a quick way as
52:26 - well if you want to change elements or
52:28 - delete stuff you can go in here
52:29 - and obviously you can just click delete
52:31 - or you could save stuff you can see the
52:33 - history of it
52:35 - and all that kind of stuff so that's
52:37 - kind of how the admin dashboard
52:38 - works in terms of viewing your databases
52:41 - i figured i would just quickly show this
52:42 - to you guys because it's a really useful
52:44 - tool to make sure that what you're doing
52:45 - is actually
52:46 - working properly but remember if you
52:48 - create a new application or you're
52:49 - creating a new model
52:50 - you have to actually add that and
52:52 - register it from within your admin.pi
52:54 - file inside of your application
52:56 - so if i wanted to add the items for
52:58 - example then i would have to do
53:00 - item the item model and i would have to
53:02 - import item
53:03 - so let's just try that quickly and make
53:05 - sure everything's working with that
53:06 - wait for this to uh refresh here
53:10 - if i do this let's go refresh all right
53:14 - maybe we'll just end it and then reload
53:15 - oh
53:16 - and all right it says reloaded so let's
53:18 - try this
53:19 - i go here and i refresh this now you can
53:21 - see we have items
53:23 - and if i go to items obviously there's
53:24 - nothing because we don't have any items
53:26 - so anyways that's been the admin
53:27 - dashboard in the next video we're going
53:29 - to go into templates which will be a
53:30 - much longer video
53:31 - on dynamically showing these kind of
53:33 - this information on our website so
53:35 - today's video what we're going to be
53:37 - doing is covering
53:38 - templates so templates are essentially a
53:40 - way to
53:41 - make your html actually look good and
53:43 - display it on the screen
53:45 - they're really nice in django because
53:46 - you can actually put your own python
53:49 - code and you can pass
53:50 - variables through to your templates
53:52 - which means that you can make
53:53 - dynamic html which will change based
53:56 - upon
53:57 - whatever you pass to it which is really
53:58 - nice so it's a really easy way to
54:00 - connect your kind of back end with your
54:02 - front end
54:03 - and that's one of the reasons why a lot
54:04 - of people obviously love django is
54:05 - because of the fact that you can do
54:07 - stuff like this
54:08 - now i just want to quickly go over what
54:10 - i'm going to be doing in the rest of the
54:11 - series for some of you that were asking
54:13 - i have plans to make a video on how to
54:15 - add a proper
54:16 - sidebar to your website how to do forms
54:19 - because forms are actually their own
54:20 - thing that are kind of complicated in
54:22 - django but i want to do a whole tutorial
54:23 - on that
54:24 - i want to do user registrations like
54:26 - login register
54:28 - sending emails all that kind of stuff
54:30 - and then obviously near the end of the
54:31 - series we'll get into more videos
54:33 - longer videos where i'm not just doing
54:35 - features but i'm kind of
54:36 - working on development of the website
54:38 - and actually
54:39 - probably hosting it using heroku or
54:42 - something like that and showing you guys
54:43 - how to actually deploy this
54:45 - and hopefully for free online so if you
54:47 - guys are excited about that please make
54:49 - sure you're leaving a like on the video
54:50 - and letting me know in the comments and
54:52 - with that being said
54:52 - let's get started with templates now if
54:55 - you remember where we left off we had it
54:57 - so essentially we could view different
54:59 - parts
55:00 - or different to-do lists from our
55:01 - database by typing the integer into our
55:04 - bar and that's really all that we had
55:06 - now what i'm going to do in this video
55:08 - is create
55:09 - templates which will allow us to see our
55:12 - to-do list
55:13 - on the screen in somewhat of a nice form
55:15 - and in future videos i'll add bootstrap
55:17 - onto the website
55:18 - and start doing some custom css classes
55:20 - and stuff
55:21 - but for now we're just going to use
55:22 - plain html and then we'll design and
55:25 - style it all after
55:26 - because styling is really a pain and it
55:28 - takes a long time
55:29 - so the first thing i'm going to do is i
55:31 - want to create a home page for my
55:32 - website
55:33 - so right now we have this um this page
55:36 - where you type a number you can see it
55:37 - but we don't have any home page so let's
55:38 - do that first
55:39 - so i'm going to add a link here which is
55:42 - just a blank string
55:43 - and i'm going to do views dot home
55:46 - and name equals home
55:49 - like this and then inside of our views
55:52 - file here so views.pi
55:54 - i'll create a new function called home
55:55 - so define home
55:57 - and then we'll have response and we
56:00 - don't have any variables so that's fine
56:02 - and in here i'm just going to pass for
56:03 - right now as we're not finished coding
56:04 - that yet
56:06 - okay so templates so right now what
56:08 - we've been doing is we've been uh
56:09 - passing http response
56:12 - to our views so that's the way that
56:14 - we're literally putting the html in here
56:16 - like you can see the tags right now
56:18 - this is obviously not an efficient and
56:20 - not scalable way to make a website
56:22 - so what we're going to do is write our
56:24 - own html files and then we're going to
56:26 - load them up from here
56:27 - actually render them and display them to
56:30 - the screen so that's what we have to do
56:31 - first so the
56:32 - first step to do that is actually create
56:34 - a directory called
56:35 - templates inside of our application
56:37 - directory so inside of main here i'm
56:39 - going to go
56:40 - to new folder and call this templates
56:43 - like so so if we go in main now i got
56:45 - this folder called templates
56:46 - and now inside of this folder templates
56:48 - i'm going to create a new folder
56:50 - called main okay now this might seem
56:54 - kind of weird how we have main and we
56:55 - have templates and we have main
56:57 - but it just the way the jangle works
56:59 - it's really weird i don't really want to
57:00 - explain it is you just need
57:02 - a folder inside here with the same name
57:04 - as your application to load the
57:06 - templates so that's what we're going to
57:07 - do
57:08 - so now inside of this folder is where
57:10 - we're going to put our actual html files
57:12 - so let's create a new file and let's
57:14 - just start coding some html
57:16 - and i'll talk about what this is going
57:18 - to be compared to our other templates so
57:20 - let's just
57:21 - set up an html document here
57:24 - html and you know let's save this as
57:27 - base dot html and we'll talk about why
57:30 - i'm calling this base in just a minute
57:32 - so in here now i'm going to add some
57:34 - head tags
57:36 - uh like that and then we add some body
57:38 - tags
57:40 - like that so inside of our head we'll
57:42 - simply just start by adding a title
57:44 - we will be adding a lot of other stuff
57:45 - into this later in the video but for now
57:48 - we're just going to keep it nice and
57:49 - simple for demonstration purposes
57:51 - so i'm just going to call this tim's
57:52 - website and then inside of my body tags
57:55 - i'm just going to create a paragraph tag
57:57 - and we'll just call this base
58:02 - template okay so that's all we're going
58:04 - to do for now
58:05 - inside of that template and let's create
58:07 - one more template
58:09 - inside of here and this one we're going
58:10 - to call home okay
58:12 - so if i save this and i say home dot
58:15 - html
58:16 - like that and hit enter then in here i'm
58:19 - going to talk now about
58:20 - template inheritance so a really nice
58:23 - thing with django that makes building
58:25 - websites
58:25 - super scalable is they have something
58:28 - called template inheritance
58:30 - now right now i've created this template
58:31 - and i've called it base.html
58:34 - and what i want this template to be is
58:36 - well the base or the standard layout of
58:39 - every single one of my web pages so for
58:41 - example okay so let's just go to uh
58:43 - instagram or something and i can show
58:45 - you what i mean by a base
58:47 - template uh in terms of this so for
58:49 - example a base template for instagram
58:52 - is this like bar up at the top like
58:54 - every page you go to has this
58:56 - at least on the website right it has
58:57 - this instagram it has a search bar and
58:59 - then it has these icons
59:00 - and then obviously it's going to be
59:01 - different depending on what page you are
59:03 - or what account you're on what it's
59:04 - going to show
59:05 - but the base template would be like this
59:07 - top aspect okay
59:08 - so what i want to do is create a base
59:10 - template which will have something that
59:12 - will be on all of my web page so for
59:13 - example on my actual website
59:15 - if i go to techwithtim.net you can see
59:18 - that this
59:19 - up at the top here this bar would be and
59:22 - actually what do you call it
59:23 - this logo thing as well is the base
59:25 - template it's on
59:26 - every single page so what i want to do
59:28 - is make sure that
59:29 - i don't have to actually code that in to
59:32 - each html file that i make because think
59:33 - about it if you have like hundreds of
59:35 - html files
59:36 - i don't want to have to code in that
59:37 - menu bar every time so what we're going
59:39 - to do is we're going to code all the
59:41 - stuff we want
59:42 - in always on the website in what's known
59:44 - as a base
59:45 - template and then we're going to inherit
59:47 - that template with just one line of code
59:49 - from all of our other templates
59:51 - this one's our base and this is going to
59:52 - show up on all of the pages unless we
59:54 - override it from the child templates
59:57 - so to actually inherit this base
60:00 - template
60:00 - what we do is we use the kind of the
60:02 - django syntax here
60:04 - which is we open and close a curly brace
60:06 - it and then we put two percent signs
60:08 - like this and inside of here
60:10 - we type extends and then we're going to
60:13 - actually put in single quotes
60:15 - main slash and then in this case base
60:19 - dot html now we just need to include
60:21 - main here because inside the main folder
60:24 - and what this means is just like in java
60:26 - extending a class
60:27 - you're going to extend this template
60:29 - essentially take everything from this
60:30 - template and use it here
60:32 - now you're going to say well how do i
60:34 - change stuff
60:35 - in here well we're going to get to that
60:37 - in a second but let's demonstrate this
60:38 - first
60:39 - so now that we've done that what we need
60:42 - to do is actually
60:43 - render and use these templates so i've
60:45 - got to go back into views here
60:47 - and right now you can see that all we're
60:48 - doing is returning this http response
60:51 - so what i need to actually do is render
60:53 - my templates so to do that i'm going to
60:55 - remove http response we're actually not
60:57 - going to use that anymore
60:58 - we're going to use the keyword render
61:01 - and then here we're going to put
61:03 - response which lines up with this
61:05 - parameter here
61:06 - we're going to put the template location
61:08 - so in this case
61:09 - main slash and we'll do base.html for
61:13 - this one okay and then we'll do a comma
61:16 - and we're going to put a open dictionary
61:19 - okay
61:20 - now i'll talk about this dictionary more
61:21 - later but for now it's
61:23 - uh we're just going to leave it blank
61:24 - now we're going to copy this return i'm
61:26 - going to do the same thing in home
61:27 - except instead of base i'm going to do
61:29 - home.html
61:31 - and that's actually going to be all we
61:32 - need to do to
61:34 - show these html templates that i've
61:36 - created it's pretty straightforward to
61:37 - do this
61:38 - so now obviously i'm going to have to
61:40 - run my site so let's
61:43 - i got to activate my virtual environment
61:45 - one second here
61:46 - and we'll just do python manage dot pi
61:51 - run server okay so i didn't make any
61:54 - mistakes
61:54 - it doesn't seem like so let's load up
61:57 - google here and
61:58 - let's hit enter and now you can see that
62:00 - we've directed to the home page and we
62:02 - get
62:03 - base template okay now
62:06 - so let's see how this worked so when we
62:09 - went in urls
62:10 - we didn't type any number so we were
62:12 - past just that empty string
62:14 - so what we did is we navigated to the
62:16 - home page so the home page is right here
62:17 - this is the function
62:18 - and what it does is it renders this
62:20 - home.html file
62:22 - so now we go to home.html and in here we
62:24 - can see that we're extending
62:26 - the base.html file which means we're
62:28 - going to use everything from that
62:30 - so what we do is we go to base.html we
62:32 - say okay this is what base.html looks
62:34 - like
62:34 - let's use that and then it uses that and
62:37 - we get base.html
62:38 - so now let's try using for example
62:42 - one now before when we used one what
62:44 - happened was we saw the to-do list and
62:47 - the item
62:48 - now we're not going to see that because
62:49 - we haven't programmed that into our html
62:52 - but just notice what happens when i type
62:53 - slash one
62:55 - uh query does not exist okay of course
62:58 - it doesn't exist
62:59 - anyways just pretend like that popped up
63:03 - i'm now i'm frustrated why that didn't
63:05 - work because we the to-do list there's
63:06 - no to-do list that has id1 apparently
63:09 - um that's interesting
63:13 - let's try two or something and see if
63:15 - that works or zero
63:16 - because this should really be giving us
63:18 - something two
63:19 - there we go okay two so apparently the
63:22 - object we have in there has id2
63:24 - so anyways now that we have some object
63:26 - we have id2
63:27 - you can see that again it's showing this
63:29 - base template because we're rendering
63:31 - the base.html template
63:33 - from our index view and when we went to
63:35 - urls we typed some number so we went to
63:37 - index and we passed in the id
63:39 - as that number that we typed into the
63:41 - address bar
63:42 - perfect that is literally how templates
63:45 - work in terms of rendering them
63:46 - now it's time to show how we can make
63:48 - some dynamic templates that i'll
63:50 - actually change
63:51 - based on what you're typing so
63:54 - obviously right now so this one's
63:57 - rendering our base.html this one's
63:59 - rendering home.html
64:00 - in previously we had passed through some
64:04 - value which was
64:05 - our to-do list name and we displayed
64:07 - that on the screen so how can we do that
64:09 - now using templates
64:11 - well inside of our templates so this is
64:13 - base.html
64:15 - what we can actually do is we can
64:19 - use some variables that are passed from
64:22 - views and we can display those in our
64:24 - html so for example
64:26 - rather than putting base template here
64:28 - say i wanted the base template
64:30 - to show uh all of our
64:33 - what do you call it sorry our different
64:35 - to-do list then what we can actually do
64:37 - in here
64:38 - is we can put two so we can of these so
64:40 - open and close
64:41 - curly braces to them and inside here we
64:44 - can type a
64:45 - variable name and then we will pass that
64:47 - variable in
64:48 - from our views so for example if i want
64:50 - the to-do list name
64:51 - maybe i'll pass that in as the variable
64:53 - name
64:55 - so i'm going to put name here now what
64:57 - this means is we're going to be using a
64:58 - variable
64:59 - called name now what i need to do
65:02 - is i go inside views.pi and i say okay
65:05 - so we're using a variable name we need
65:07 - to give that variable
65:08 - to our view to do that we use these
65:11 - right here this dictionary
65:13 - so we are going to type the
65:14 - corresponding name so name here
65:16 - to what we've typed in our html and then
65:19 - we're going to do a colon
65:20 - and put the value that we want to pass
65:23 - whoa what just happened with my lights
65:25 - one second guys
65:26 - sorry something just happened okay
65:27 - anyways um now what we're gonna do is
65:29 - we're gonna do ls.name so we're gonna
65:32 - say the variable name
65:33 - inside of our base.html corresponds to
65:36 - ls name now because we've done that
65:40 - there
65:41 - we're going to run into an issue in our
65:42 - home one because
65:44 - we're looking for some variable name
65:46 - inside our base html
65:48 - but inside our home html file we're
65:50 - extending
65:51 - base which means we need to pass that
65:53 - variable as well so for right now
65:55 - this obviously is not ideal we're going
65:56 - to change this in a second i'm just
65:58 - going to put
65:58 - name and then in this case i'll just say
66:01 - test
66:01 - just so that we actually get something
66:03 - that's working but let's try this out
66:05 - now and see
66:06 - if everything is the same so if i run
66:07 - this now you can see that
66:09 - instead of showing me nothing or showing
66:12 - the base template it's showing me first
66:14 - list
66:14 - which is the name of our first list and
66:16 - if i go to the home page
66:18 - you can see that we just get tests
66:19 - because that's what we've passed in as a
66:22 - variable
66:22 - so that's really the easy way to pass
66:25 - variables is through this
66:26 - dictionary here and it's nice because
66:28 - you don't actually have to type the
66:29 - dictionary here
66:30 - like you can make like my underscore
66:33 - dict
66:34 - equals and then you can update it with a
66:36 - for loop or you can pass a ton of
66:37 - different stuff
66:38 - into this dictionary and then just put
66:40 - for example
66:42 - my underscore dict here and it'll work
66:44 - the exact same way
66:46 - okay so now we've done that we've kind
66:48 - of understood how this works now
66:50 - let's go back in templates and talk
66:52 - about some more advanced stuff that we
66:53 - can do
66:54 - so for example ideally we've kind of
66:57 - messed this up a little bit because
66:59 - inside of our base html we're displaying
67:02 - um what do you call it the name of our
67:04 - to-do list we probably don't want to do
67:07 - that because on our home page we
67:08 - probably want to say
67:09 - something else right or we just our base
67:11 - page probably shouldn't do that so what
67:14 - i'm actually going to do inside here
67:16 - is i'm going to set up what's known as a
67:17 - content block
67:19 - which can be over overrode from
67:22 - other templates and you'll see how this
67:24 - works in a second so if i just do my two
67:26 - percent signs here i'm going
67:28 - to type the word block and then give it
67:30 - a name so in this case i well i won't do
67:32 - name i'll do block
67:34 - content and then what i'm going to do
67:36 - under here is i'm going to do
67:38 - two signs like this and i'm going to say
67:41 - block uh or sorry
67:42 - end block okay now just for good
67:46 - practice i will put this inside of a div
67:48 - so i'm just going to say div and i'll
67:49 - say id equals
67:51 - in this case uh content
67:54 - and then name equals content just in
67:56 - case i want to reference this later
67:58 - we'll do that and we'll just end the div
68:00 - here
68:01 - so tab that in and now what i'm able to
68:04 - do actually
68:05 - is from inside my other templates that
68:08 - extend this template i can pick what's
68:11 - going to go inside of this block
68:12 - so for example the web title is always
68:15 - going to be the same
68:16 - but if i want to put something specific
68:18 - inside here depending on what web page
68:19 - you're on
68:20 - i can do that from other templates so on
68:22 - home for example i probably want to say
68:24 - like home page or something like that
68:26 - so to do this i'm going to do a very
68:28 - similar thing to what i've done
68:30 - here i'm literally just going to type
68:32 - the same thing i'm going to say block
68:34 - content okay and then i'm going to close
68:36 - the block
68:37 - like this by saying end block and inside
68:41 - here i'm going to put a parrot or
68:42 - actually i'll put an h1 tag
68:44 - and i'll just simply say uh we call it
68:47 - home
68:48 - page like this okay so now i'm just
68:50 - going to go in views and i'm going to
68:51 - remove this
68:52 - these uh variables from here because we
68:54 - don't need them anymore
68:55 - and let's run this now and see what
68:57 - we're getting so on the home page
68:59 - if i hit enter you can see now we're
69:01 - getting home page
69:02 - so what we've done is we've said okay so
69:05 - this is our base
69:06 - template the content for each of the
69:08 - pages that inherit this is going to go
69:10 - inside of this block
69:11 - content so if i go here and i type block
69:14 - content i can put whatever i want here
69:17 - and it's just going to paste it inside
69:19 - of here for me now this works the same
69:21 - with other kind of blocks you can create
69:23 - more than one block
69:24 - and you can choose whether you want to
69:26 - use them or not so for example if i want
69:28 - the title to be different
69:30 - what i can do is inside of here and
69:32 - there's no really limit on how you use
69:34 - the blocks you can use them however you
69:35 - want
69:36 - i can say block title and then
69:39 - here i can end this block again and you
69:41 - always have to end your blocks you can't
69:43 - just leave them open otherwise you're
69:44 - going to run into some issues
69:45 - do end block and then i can set a
69:48 - default title in here if i wanted to for
69:50 - example
69:51 - tim's site like that and then here
69:54 - i can make this block again so if i i'll
69:57 - just copy this actually
69:58 - and paste it up here and name this
70:02 - title and then here i can just name it
70:04 - whatever i want so in this case i'll
70:05 - just say home
70:06 - okay so now what's going to happen is
70:08 - this block title
70:10 - is going to be again overridden by this
70:12 - and it's going to put that as the title
70:13 - of our webpage let's try this out
70:16 - and you can see that now up here at the
70:17 - top it's changed to home as opposed to
70:19 - tim's site
70:20 - now if i go to like slash two you can
70:23 - see there's nothing here just because
70:25 - i haven't set any base stuff to show up
70:28 - inside of my
70:29 - base content if i wanted something
70:31 - default to show up
70:32 - what i would do is just type like hello
70:34 - or something in here and then that would
70:36 - show up
70:37 - but that's how the blocks work and
70:38 - that's the first step to kind of
70:40 - template inheritance
70:42 - now i'm going to show you how we can
70:44 - actually write code inside of our
70:46 - templates to do things more dynamically
70:49 - so this base.html file is fine this home
70:51 - file's fine
70:52 - but i actually don't want to be using
70:55 - this base.html file
70:57 - inside of my as one of my views i just
71:00 - want to inherit from it
71:01 - and then customize it from each
71:03 - individual view so what i'm going to do
71:04 - is create another view
71:06 - or another template my badge sorry and
71:08 - i'm going to call this file
71:09 - new file and we will call this one um
71:13 - is should we call it view i want to view
71:16 - the to-do list so maybe we'll just call
71:18 - it like
71:18 - list like that okay list.html and what
71:22 - this is going to do
71:23 - is display our to-do list for us so the
71:25 - name of this to-do list and then each
71:27 - item on the do list
71:28 - it's going to display that in a list
71:29 - form that's what i want to do so i have
71:31 - to start by extending
71:33 - from my base.html so really simple again
71:36 - extends in quotes i don't think it
71:39 - matters if it's singular double quotes
71:41 - and then we'll say main or base.html
71:44 - like that we'll set up our blocks so our
71:47 - first block
71:48 - is going to be uh the title block so
71:51 - my percent signs so block title
71:55 - and then here we'll go and block
71:59 - like that then inside here which our
72:01 - title be maybe we'll just say like
72:03 - view view list or something we could
72:06 - change that later if we want and we'll
72:08 - set up our content block which will be
72:10 - actually displaying the list for us so
72:13 - block content and then inside here we
72:17 - will obviously end the block
72:20 - and then inside of the content what i'm
72:22 - going to do now
72:23 - is start working with some variables
72:25 - that we pass in
72:27 - from views so actually the only thing we
72:30 - really need i guess is we can say
72:31 - ls is ls
72:35 - and then from there we can determine if
72:37 - we want the name here
72:38 - if we want the items we can do all that
72:40 - kind of stuff so let's start by just
72:43 - doing an h1 tag which is the name of the
72:45 - list so to do this i'm going to do h1
72:48 - and then in here we'll put remember our
72:51 - two
72:51 - curly brace sets and we're going to say
72:53 - ls dot name okay
72:55 - because we're passing that ls object so
72:57 - we can call any methods on it that we
72:59 - want inside here
73:00 - so we have the name now but we also want
73:02 - all of the items and here's where things
73:04 - get a bit
73:06 - tricky kind of tricky but actually just
73:08 - really cool and how they work
73:10 - so we could technically have infinite
73:12 - items we don't know how many items we're
73:13 - going to have
73:14 - so we need to loop through all of the
73:16 - items and then display them in kind of a
73:18 - list
73:18 - form so to do this we're now going to
73:21 - start
73:22 - actually writing some code some python
73:24 - code
73:25 - python ish code inside of our html file
73:27 - so i'm going to write a for loop i'm
73:29 - going to show you how to do this for
73:30 - loop inside of your
73:32 - templates you're gonna start by
73:34 - literally just typing
73:36 - the four so you could say four and in
73:38 - this case i'm gonna say
73:39 - item in ls dot and then item underscore
73:43 - set dot all now some of you might think
73:47 - you need brackets here
73:48 - for some reason when you put the
73:50 - brackets you run into an issue so if
73:52 - you're going to be looping through
73:53 - something
73:54 - don't put the brackets like that just
73:56 - leave it like this and it should work so
73:57 - if you're running into an issue that
73:58 - says
73:59 - something like it can't decipher these
74:01 - brackets just get rid of them and that
74:02 - should work for you that's an issue that
74:04 - i was running into
74:06 - we need to also end this for loop so i'm
74:08 - just going to type n4 here
74:10 - and now inside of here i'm going to show
74:12 - you what we do to display a ton of
74:14 - different
74:14 - items using a loop so
74:17 - essentially i mean maybe just a little
74:19 - indent this to be a bit nicer
74:21 - inside this for loop i want every time
74:24 - this for loops runs
74:25 - to get the name of my item and display
74:27 - it on the screen
74:29 - so to do that i'm going to set up a list
74:32 - so i think what i do is i do ul i
74:34 - haven't done html for a while so
74:36 - this could be a little bit rusty do ul
74:39 - which stands for our list okay and then
74:41 - inside here what i'm going to do is i'm
74:43 - going to say
74:43 - li like this we'll
74:47 - end that li tag and then in here we're
74:49 - going to use a variable but our variable
74:51 - this time is going to be item
74:53 - dot text okay because we're gonna get
74:56 - the item
74:57 - which is that item object in our
74:58 - database from the item set of our list
75:01 - and then we'll display that as a list
75:03 - item
75:04 - now i don't even know if i have any um
75:07 - items in my list so we might have to add
75:09 - those in a second
75:11 - but that's fine we can deal with that
75:12 - when we get to it so now that we've
75:13 - saved this
75:15 - let's make sure that we're actually
75:16 - going to return list.html from our views
75:19 - so instead of returning base let's
75:21 - change this to list
75:23 - and then let's run our site here quickly
75:27 - okay so we get first list and we don't
75:29 - we're not running into any issues
75:30 - but i'm pretty sure the reason we're not
75:32 - seeing all of the different items is
75:34 - because we don't have any
75:35 - so if i want to add some let's end this
75:37 - and let's add some items to that list
75:39 - so i guess to do this now i got to
75:41 - refresh my memory
75:43 - is we're going to go python manage.pi
75:46 - shell and then i need to import
75:49 - from my database so from import main
75:53 - dot models alright it's from
75:56 - main dot models
76:00 - from main dot models we'll import
76:04 - to do list like that and then what we're
76:07 - gonna do
76:07 - is we're gonna say i guess we'll say ls
76:11 - equals to do list dot
76:14 - objects dot get id
76:18 - equals two we'll print ls out we see we
76:20 - get first list so let's look at the item
76:22 - set quickly so item underscore set
76:25 - dot all we don't have any so let's add
76:27 - some in there so item set
76:29 - dot create and in this case i guess what
76:32 - do we just need we need a text for that
76:33 - right
76:34 - so we'll say text equals and then in
76:35 - this case we'll say first item
76:37 - and i guess we'll do complete equals
76:40 - false okay so we added that let's
76:43 - actually add another item
76:44 - and we'll call this one second item
76:48 - and while we're at it let's do a third
76:50 - one
76:52 - okay so now we've done that we can get
76:54 - out of this by just typing quit
76:56 - and then run the server again and then
76:58 - see
76:59 - if we've updated our list let's cross
77:01 - the fingers
77:03 - there we go and now all of our list
77:05 - items are showing up so first item
77:06 - second item third item and that's how
77:09 - you use a for loop
77:10 - inside of your templates and that's
77:12 - really like look how cool that is we
77:14 - don't have to
77:15 - we don't have to type a ton of html we
77:17 - just do a for loop like we would in
77:19 - python we're very familiar with
77:20 - and then we can just type whatever we
77:22 - want inside of the for loop
77:23 - in terms of html and that will show up
77:25 - on the screen for us
77:26 - that's how that works and that's really
77:28 - cool now we can
77:30 - also do if statements and else
77:32 - statements and stuff like that
77:33 - so i will now show if statements um it's
77:36 - gonna be
77:37 - this is a hard example actually what i
77:39 - can do is say
77:41 - we'll do another blocking here and in
77:43 - this case what we'll do is we will only
77:45 - show the item if it's not if it's
77:48 - complete
77:49 - right or if it's not complete because if
77:50 - we're going to have it complete we
77:52 - probably shouldn't show it
77:53 - so first of all i don't know why this is
77:55 - trailing here and get rid of that
77:57 - and then here i'm now i'm just going to
77:58 - do my percent signs again
78:00 - and i'll say if and in this case item
78:03 - dot
78:06 - complete equals equals false
78:09 - and then i will simply end if here so do
78:12 - percent percent
78:14 - and if like that so we always have to
78:16 - end our statements i know it's annoying
78:18 - but
78:18 - if you think about it we're not really
78:20 - working with indentation in these files
78:22 - so it's not going to be able to tell
78:23 - what's in which statement unless we do
78:24 - an end if or we let our we end our
78:27 - statements
78:27 - so we need to do that okay so we've done
78:29 - that
78:30 - and now i will actually just go back
78:33 - into the shell again i know it seems
78:34 - pretty counterproductive
78:36 - and make an item that is actually
78:37 - complete otherwise we're not gonna
78:39 - see that so i guess we're gonna have to
78:42 - import this again
78:43 - so from main dot models
78:48 - uh import to
78:51 - do list we'll say ls equals
78:55 - to do list dot
78:58 - objects dot gets id equals two
79:02 - okay ls dot item underscore set
79:05 - dot create and in this case we'll say
79:08 - text equals
79:12 - not showing and then complete equals
79:14 - true
79:16 - okay so true like that hit enter
79:19 - not showing quit that and rerun the
79:23 - server
79:24 - probably should have done this before
79:25 - guys but you know that's fine so if i
79:27 - run this now
79:28 - you can see that we're not seeing that
79:31 - item that i just created
79:32 - but if i change this to be true okay and
79:36 - save this now
79:37 - and hopefully this updates quickly
79:41 - now you can see that we're only seeing
79:43 - the item that is complete
79:44 - so these if statements work just the way
79:46 - they work in python
79:47 - you can see only the complete items only
79:49 - the not complete items
79:51 - and yeah that's really how you do that
79:53 - we can also do um
79:55 - like an else and an elsif and stuff so
79:58 - if i want to do an else statement in
79:59 - here
80:00 - i can just type else and then put
80:02 - whatever i want
80:03 - underneath the else and we don't need to
80:05 - type end else
80:07 - because ending the if will tell us that
80:09 - we're done the entire kind of chain
80:11 - statement so what we'll do actually and
80:14 - this is kind of
80:14 - interesting as well is inside of here
80:18 - we'll do the item.text if it's complete
80:20 - but we'll do an all capitals complete
80:22 - after it
80:22 - just so we know that it's finished
80:25 - otherwise we will say
80:27 - incomplete like that so let's try
80:29 - running this now and see if i made any
80:31 - mistakes or not
80:32 - okay so there we go so we can see first
80:33 - item incomplete second item incomplete
80:35 - third item incomplete
80:37 - not showing complete awesome
80:40 - so that is essentially the basics of
80:42 - templates
80:43 - how we do the kind of inheritance for
80:45 - them you can obviously
80:47 - have a template inheriting a template
80:48 - that inherits another template
80:50 - and in future videos we're going to be
80:51 - making these look a lot nicer
80:54 - i just want to give you guys the basics
80:55 - here and make sure everything is working
80:57 - in fact let me make sure the homepage
80:58 - works i forget if i showed that
81:00 - okay it does so anyways that has been it
81:03 - for this video if you guys enjoyed
81:04 - please make sure you leave a like
81:05 - and subscribe if you need any help or
81:07 - anything feel free to leave a comment
81:08 - down below i'm always answering those
81:09 - and i love to chat with you guys
81:11 - so in today's video what we're going to
81:12 - be doing is talking a bit about forms
81:14 - now forms are essential to any website
81:17 - an example of a form of something like a
81:18 - login form or a create new account form
81:20 - or maybe a create new to-do list for our
81:22 - example here
81:23 - so we're going to be doing today is just
81:25 - making a form that will allow us to
81:26 - create a new to-do list
81:28 - and then in the next video we will
81:29 - create a more advanced form
81:31 - that will allow us to add items to our
81:33 - existing to-do list
81:35 - so i want to make a way essentially
81:37 - right now that we can
81:39 - create a new to-do list without having
81:40 - to use the command prompt
81:42 - i just want to create a web page that'll
81:44 - allow us to do that so what i'm going to
81:46 - do
81:47 - is create a new page on our website
81:49 - called create
81:50 - that will allow us when we go there to
81:52 - create a new page
81:53 - using a form so what i'm going to do is
81:55 - start by setting up
81:57 - a path to that page creating a new
81:59 - template
82:00 - and then we will work on the actual form
82:02 - itself so in this case i'm just going to
82:04 - say that create will be where we want to
82:06 - go
82:08 - and then we'll say views dot create and
82:11 - we'll name it
82:12 - create like that i think i can just
82:15 - probably just put create like that too
82:16 - but whatever that's fine okay so now
82:18 - that we've done that
82:18 - let's go into our views file let's
82:20 - create a new function we'll say define
82:23 - create we'll say response
82:27 - like that and then in here we're just
82:29 - going to return the same thing
82:31 - but we'll just change the file name to
82:32 - be create.html and we'll create that
82:34 - file right now
82:35 - so we go inside of our main file here
82:37 - i'm just going through this quickly
82:38 - because we've already essentially done
82:40 - this
82:41 - a bunch of times i'm going to extend so
82:43 - this extends and in this case
82:45 - main slash base.html
82:48 - and then we will have to do those blocks
82:51 - or we don't
82:52 - have to but we will do those blocks so
82:54 - in this case
82:56 - uh block title and we'll just call this
83:00 - create new list
83:04 - and then we will end the block
83:07 - like that and i'm just going to copy
83:09 - this and put it down here but just
83:11 - change the name of the block to be
83:12 - um what do you call it content like that
83:16 - okay so now i'll save this as what if we
83:18 - want to create dot
83:20 - html and we have created the template
83:24 - for our uh what do you call it create
83:26 - page so in here i'll just say
83:29 - create page and we will add the form
83:31 - content into here afterwards
83:33 - so now that we've done that we should
83:34 - have a page on our website
83:36 - uh essentially that when we go to create
83:37 - it'll bring us to this html page which
83:40 - extends obviously our base.html
83:42 - uh and to give you a reminder this is
83:44 - what our base.html file looks like
83:46 - okay so what we need to do now is
83:48 - actually create a form
83:49 - that will show up on our create page
83:53 - now when you create forms most of you
83:55 - are probably used to doing something
83:57 - like this where you go in the html and
83:59 - you actually code the form yourself
84:00 - so for example you do form you're going
84:02 - to say method
84:03 - equals maybe we're going to say post in
84:05 - this case and i'll talk about the
84:06 - different methods in a second
84:08 - you're going to say action
84:11 - equals and in this case we're going to
84:13 - go back to the same page
84:15 - and then maybe you make a button and
84:18 - that button is
84:19 - type equals submit
84:22 - maybe it has a name uh equals like
84:25 - save or something and then you end the
84:28 - button and maybe you do something like
84:29 - that so
84:30 - like this is an example i'm just doing
84:31 - this because we're actually going to
84:32 - need to do this
84:33 - but you guys get the idea that this is
84:36 - typically how you create a form
84:38 - and then above all of this you're going
84:39 - to do all of the different fields in
84:41 - your form so for example you've got a
84:42 - username and password
84:44 - you do an input field for username input
84:46 - field for password you give them some
84:48 - labels
84:49 - some names all that kind of fun stuff
84:51 - now django makes this a lot easier
84:53 - because all we actually have to do
84:55 - is pass in a variable called form
84:58 - and django will actually generate the
85:00 - html for the form that we create
85:02 - for us now this makes no sense right now
85:05 - because we haven't created a form yet
85:07 - but what we're going to be doing
85:09 - is passing a form object so we'll create
85:11 - our own
85:12 - form class and we'll create an instance
85:13 - of that and pass it into
85:15 - our html and it'll generate the html for
85:18 - those forum fields for us
85:20 - so for example if we had username and
85:23 - password this is all
85:24 - like whatever form we pass in here will
85:26 - automatically be generated for us
85:29 - you guys will see how that works in a
85:30 - second the only thing that we need to do
85:32 - when we're creating a form is make these
85:35 - form tags like this
85:36 - and then add a submit button that will
85:39 - um well submit the form for us
85:41 - that's all we have to do so now we
85:44 - actually need to create the form
85:45 - so this will start making sense now what
85:47 - we're going to do is make a new file
85:49 - inside of our main application directory
85:52 - and we're going to call it forms.pi
85:54 - so let's save this as forms.pi make sure
85:57 - we're in the right directory
85:58 - and what we're going to do uh at the top
86:00 - here we're going to say from
86:02 - django import forms
86:05 - and now we're going to create a class
86:06 - and this class is going to be called
86:08 - whatever we want our form to be called
86:10 - and it will define the attributes and
86:13 - the fields in our form
86:14 - so i'm going to call mine create new
86:16 - list and in here
86:18 - we're going to inherit from forms dot
86:22 - form which will allow us essentially to
86:25 - have the form automatically generated
86:27 - for us and to do a lot of cool stuff
86:28 - which we'll talk about later
86:30 - so i'm gonna set now the fields for my
86:32 - form now these fields are the exact same
86:34 - as the fields in your database so for
86:36 - example like boolean field integer field
86:39 - anything like that but what we'll so
86:42 - the way we do it essentially is we say
86:44 - forms dot
86:46 - in this case i want a character field
86:48 - for my name so i'll say character field
86:50 - or char
86:51 - field and then in here i need to give it
86:53 - an optional argument or
86:55 - i don't need to then but i can give it
86:56 - an optional argument of label
86:58 - which will be what shows up before the
87:00 - little box so that it um
87:03 - you know we know what we're typing in
87:04 - here and then we can give it a
87:07 - max underscore length as well which i
87:09 - believe is required
87:10 - and i'm just going to set this equal to
87:11 - 200 characters because that's probably
87:13 - all we need
87:14 - so essentially all we're doing when we
87:16 - create a forum is we're just going to
87:17 - list all the different attributes that
87:19 - we want
87:20 - for our forum as class variables
87:22 - underneath
87:23 - the the class so if i wanted another
87:25 - attribute
87:26 - that maybe was like a check button or
87:28 - something like that what i can do is i
87:30 - could say like
87:30 - check equals forms dot boolean fields
87:34 - like this
87:35 - and that's all i have to do and now when
87:39 - i pass this form into django it'll
87:41 - automatically create not only a name
87:43 - uh what do you call it a name character
87:46 - fields like text input it'll also create
87:48 - a boolean field which would be like a
87:49 - check button
87:50 - and then we could do other kinds of
87:51 - fields as well and if you want to know
87:53 - all the different types i'll leave a
87:54 - link here
87:55 - in the description to all these
87:57 - different kind of fields that you can
87:59 - use
87:59 - okay so that's how we create a form if
88:01 - you wanted to create another form
88:03 - same thing you would make another class
88:04 - and do all of the different attributes
88:06 - you want in that form
88:07 - and we'll get a bit more advanced with
88:09 - it actually in the next video as well
88:12 - so anyways now we've created a form so
88:14 - let's go back to this views.pi file
88:17 - and let's now actually pass this form
88:19 - into
88:20 - our create.html so we're obviously going
88:22 - to need a variable
88:23 - called form here and we're going to have
88:25 - to pass that in
88:27 - so what i need to do now is essentially
88:29 - i need to create an instance
88:30 - of this form and pass it to my html so
88:33 - to do that i have to start by importing
88:35 - that
88:35 - so oh i already imported it here but
88:38 - anyways just do from
88:39 - dot forms import and then the name of
88:41 - your form so my case
88:43 - create new list and then what we're
88:44 - going to do is we're going to say form
88:45 - equals
88:47 - create new lists like this now what this
88:50 - will do is create a blank form
88:52 - and we will pass that into our html and
88:55 - it will know what to do with it and
88:56 - generate the form for us on that create
88:58 - page
88:59 - so let me show you this working in
89:00 - action now
89:02 - so i'm just going to run my server i'm
89:04 - sure you guys know to do this by now
89:05 - and if i go to this link here actually
89:10 - when i go to slash create you can see
89:12 - that now we get to
89:14 - create new page you can see that we have
89:16 - a name we have a check button
89:18 - and we have this create new button so
89:21 - that button was the button that i
89:22 - created
89:23 - but this name field we didn't make this
89:25 - check button we didn't make
89:27 - django automatically generated that for
89:29 - us
89:30 - now notice that obviously these don't
89:32 - look great
89:34 - we want to add some html to them we want
89:36 - to add some css we want to do all kinds
89:38 - of stuff i'm going to show you how we
89:39 - can do that
89:40 - later but just know that django is
89:42 - capable of automatically generating
89:45 - all of the html for your forms so so
89:48 - before we go any further into
89:49 - how we're actually going to get
89:51 - information from this form because right
89:52 - now we have we're not actually doing
89:54 - that
89:54 - and it's not going to work if we
89:55 - actually try to submit this form i will
89:58 - show you
89:58 - how we can look at the form in a
90:00 - different way so for example if we go to
90:02 - create.html here there's a few
90:04 - default layouts for our form so we have
90:07 - as underscore
90:08 - table which is what is actually showing
90:10 - for us right now
90:11 - we also have dot as underscore p
90:15 - which will mean that the form will go
90:16 - like vertically down so all the items
90:19 - will keep going down
90:20 - and then we have as underscore ul which
90:23 - means the form is going to show up
90:25 - on little dots like as a list item so
90:28 - these are a few different ways that we
90:29 - can show the form
90:30 - um just looking like a little bit
90:32 - different so if i do as p for example i
90:34 - believe we're running the server right
90:36 - now
90:36 - and i go here and refresh you can see
90:38 - that now it looks a little bit nicer in
90:40 - terms of we have the name
90:41 - and we have the checkbox and they're
90:43 - just right after each other in new
90:44 - paragraphs
90:45 - now i just want to show you that if i
90:47 - try to hit this button
90:48 - notice that we get this little police
90:50 - fill out this field nice looking
90:52 - javascript actually pops up now
90:56 - the reason this does this is because
90:57 - django is generating the form and html
91:00 - for us if we had created our own form
91:02 - we wouldn't have we wouldn't see this
91:04 - this nice pop-up text right
91:06 - um so that's one of the advantages of
91:08 - using the django built-in forms although
91:10 - i will show you kind of the limit some
91:11 - of the limitations you may have with
91:13 - that
91:13 - now if i go to if i hit this um check
91:15 - box same thing you can see even when i'm
91:17 - hovering over it we get like please
91:19 - check this box if you want to proceed
91:21 - like stuff like that right now notice
91:23 - that if i type something in here and i
91:25 - hit create new
91:26 - it says please check this box well this
91:28 - box might be an
91:29 - optional checkbox if we want to make
91:31 - this not a required field
91:33 - then what we can simply do to do that is
91:36 - go into our forms and inside boolean
91:38 - field here we can say required
91:40 - equals false and now if i refresh
91:44 - um the website here it
91:47 - you see when i hovered it's not saying
91:48 - anything and if i type like
91:51 - something in here and hit sub hit create
91:53 - new it will work now i'll show you what
91:55 - happens right now when i do this
91:56 - and how we can fix this so when i do
92:00 - this it says we
92:01 - get a csrf verification failed
92:04 - now that is because whenever we're
92:05 - creating a form inside of our html
92:09 - we need to actually add these tags and
92:12 - i'm about to show you
92:13 - so essentially we need to just do crsf
92:16 - underscore
92:17 - token every time that we create a new
92:19 - form inside of django
92:21 - this just needs to go inside of our form
92:23 - tags don't ask me why
92:25 - because i honestly don't really know
92:27 - it's something to do with security
92:29 - in terms of like verification and
92:31 - validation and stuff
92:32 - so just put that in here whenever you
92:34 - create a form so when you try to submit
92:36 - it
92:37 - you don't run into any issues okay so
92:39 - now that we've done that
92:40 - it's time to actually start creating new
92:42 - to-do lists based on
92:44 - what the user types in so now it's time
92:46 - to talk about the difference between
92:48 - post and get requests
92:49 - so if i'm going to go to i'll go to
92:51 - views.pi for right now
92:53 - and we need to talk about post and get
92:56 - so there's two different ways to send
92:58 - information to the server and that's
93:00 - essentially what our form is doing
93:01 - when we hit submit submit what's going
93:03 - to happen is going to save all that
93:05 - information that was in our form
93:06 - it's going to bundle it up in some kind
93:08 - of way and send it to the server
93:10 - now there's two main ways of doing this
93:12 - post and get
93:13 - now the reason this like the reason they
93:17 - have two different ways
93:18 - is because there's two different
93:19 - functions for each of them typically
93:21 - technically you can do anything with get
93:23 - that you can do with post but they have
93:25 - different security reasons behind them
93:28 - so for post is you're going to want to
93:30 - use post essentially whenever you're
93:32 - doing something that's kind of secret
93:33 - so for example getting a user's password
93:36 - if you're
93:37 - sending that to the server it needs to
93:39 - be encrypted because otherwise if it's
93:41 - not
93:41 - then other people can very easily see
93:44 - the password
93:45 - and change it and do all kinds of stuff
93:47 - so you're going to use post whenever
93:49 - you're essentially doing anything that's
93:50 - kind of secret or the information needs
93:52 - to be encrypted when it's sended
93:54 - sent to the server now you also use post
93:57 - whenever you're making any modifications
93:59 - to like the database or anything like
94:01 - that
94:02 - you use get when you're just trying to
94:05 - simply like retrieve
94:06 - information so for example say i type in
94:09 - um
94:10 - like the id of the what do you call it
94:13 - the to-do list i want to get well we
94:15 - could get that using a get request
94:17 - not a post request because we don't
94:20 - like everyone can see what the id of the
94:22 - to-do list is that's fine we don't care
94:24 - about that information
94:25 - what actually happens when you use get
94:27 - is all of the information that you
94:29 - type in the form gets pasted in the url
94:32 - so when it goes to the next page it just
94:34 - simply reads the url and gets that
94:36 - information whereas post
94:38 - actually hides the information encrypts
94:40 - it and sends it to the server
94:41 - now i'm oversimplifying exactly how
94:43 - these work but i want to make sure you
94:45 - guys understand that you're saying post
94:46 - and get
94:47 - if you're unsure just use post but the
94:50 - reason you would use get over post is
94:52 - for example say you want to
94:53 - bookmark like a search result or
94:55 - something or you want to save some
94:57 - information which is a specific url
95:00 - then you would use get because i don't
95:03 - know like i'm trying to think of a good
95:04 - example if you ever go
95:05 - you ever go to any links like let's go
95:07 - to youtube for example
95:08 - and then youtube.com
95:12 - in this case i say like search equals
95:14 - tech with tim
95:15 - you ever see something that looks like
95:17 - this this is what's known as a get
95:18 - request where the information that the
95:20 - user typed in in this case it would have
95:21 - been in the search bar for
95:23 - youtube gets pasted in the url and then
95:26 - if you hit this
95:27 - i don't think this is going to work
95:28 - because this is obviously not the way
95:30 - you search for something on youtube
95:31 - um but it just gives you that page right
95:34 - whereas if i'm going to be typing in my
95:36 - password it's not going to save the
95:37 - password up in this bar because it's
95:39 - going to use a post request
95:40 - and obviously the reason we use this get
95:43 - request is because maybe we want to save
95:44 - these search results and bookmark them
95:46 - and we wouldn't be able to do that if
95:48 - we're using a post request
95:50 - so anyways that is how posting get works
95:52 - i'm sure you guys are already confused
95:54 - if you have any questions let me know
95:55 - but i'm trying to explain it as best as
95:57 - i can
95:58 - so anyways when we use this um
96:01 - what do you call it this create window
96:03 - or this create page we are going to use
96:04 - a post request
96:05 - because we want to encrypt the name of
96:08 - the what he called the to-do list that
96:11 - you are creating and because we're going
96:12 - to be modifying the database we need to
96:14 - use
96:14 - a post request so anyways all we have to
96:17 - do
96:17 - we don't to touch anything in here
96:19 - because we've already set that the
96:20 - method is going to be post
96:22 - but what happens when we have post and
96:24 - get requests
96:25 - is they are actually passed through this
96:27 - variable to our view
96:29 - so our view knows or can tell based on
96:32 - this variable here
96:33 - whether or not we are trying to post
96:35 - something or we're trying to get
96:36 - something when we access this page
96:39 - so to check this if we've passed a post
96:41 - request or a get request
96:43 - what we do is we say if response
96:47 - dot method equals equals and in this
96:50 - case
96:51 - post and this will tell us if we are
96:54 - trying to
96:55 - make changes we're passing information
96:57 - from the form
96:58 - back to this page so if we're posting
97:02 - we're going to be doing something
97:03 - different than if we are getting
97:05 - so those are the two requests right post
97:07 - or get by default it's always get
97:09 - but whenever you're changing something
97:11 - you're going to use post
97:12 - so anyways we're using post now so if
97:14 - we're using post
97:15 - what we need to do is the following we
97:18 - have to say
97:19 - form equals create new list
97:23 - but in here what we're going to do is
97:24 - we're going to say response
97:26 - dot post now what this does and what
97:29 - this
97:29 - is holding is all of the information
97:32 - from our
97:34 - what do you call it from our form so
97:36 - essentially when we get this
97:37 - response.post it's going to contain a
97:39 - dictionary
97:40 - that has all of the ids of all of our
97:42 - different attributes all of our
97:44 - different inputs and it's going to save
97:45 - the values that you typed in them
97:47 - so when you pass this to create new list
97:50 - what it's going to do
97:50 - is create a new form that has those
97:53 - values populated in them
97:55 - so by default right if we go to forms
97:57 - you can see that
97:58 - we don't have any default value for the
98:00 - character field or for the boolean field
98:03 - so what's going to happen is it's going
98:05 - to automatically set those values to
98:07 - what
98:07 - is received here and then we can start
98:10 - doing things with this form
98:11 - and validating it and creating a new
98:13 - to-do list so now that we've created
98:14 - this form
98:15 - what we'll do is we'll say um what do
98:18 - you call it here we're going to say
98:21 - if form dodge is underscore
98:24 - valid what we'll do in here is now we
98:28 - will create a new to-do list and add
98:29 - that
98:30 - with the name that was given to us so
98:32 - we're going to say t equals
98:33 - and then to-do list and we'll say name
98:37 - equals in this case we'll say n up here
98:40 - say n equals form dot clean
98:44 - underscore data name
98:47 - now i'll talk about what this is doing
98:49 - so essentially
98:51 - our form is going to take this post
98:54 - it's going to get all the data from the
98:55 - form and then we're able to access that
98:58 - data by just using it like a dictionary
98:59 - so you do cleaned underscore data
99:02 - you're just going to clean up the data
99:03 - for you unencrypt it and then what you
99:05 - do is you type the name of whatever
99:07 - the field that you want so in this case
99:09 - we named our name so we use name
99:12 - and then we can get that data and we can
99:14 - use it to create a new to-do list
99:16 - and then save that to-do list like that
99:18 - and that is all we need to do now
99:20 - so that when we use this form every time
99:23 - we type in a name that's valid
99:25 - it creates a new to-do list
99:28 - now this might be a little bit confusing
99:30 - but i hope you guys
99:32 - kind of understand it this is valid
99:33 - method is automatically created and
99:36 - exists
99:37 - because of the fact that we're
99:39 - inheriting from forms.form
99:41 - and this thing is amazing and what it
99:43 - does is just automatically checks all of
99:45 - the fields that you've defined
99:47 - to make sure that they have valid input
99:50 - if they do
99:50 - then this is valid will return true if
99:53 - they don't it will return false
99:55 - and obviously you were seeing that it
99:56 - was telling us what was wrong with uh
99:59 - all of the different fields when it was
100:01 - incorrect so let's go back to create now
100:04 - let's click uh i might have to rerun the
100:06 - server here we'll see
100:08 - i've saved this save all this stuff
100:12 - and i think that updated anyways we'll
100:15 - check here quickly
100:16 - so i go back to create you can see now
100:18 - we have create page we have name and we
100:20 - have a checkbox
100:21 - so let's now do like create a new to-do
100:23 - list called tim
100:24 - let's say create new and what will
100:27 - happen now is
100:28 - essentially we have created a new to-do
100:29 - list called tim now you might not
100:31 - actually be able
100:32 - you can't tell that we've done that but
100:34 - that is precisely what we've done
100:37 - now we can create more to-do lists i'm
100:38 - gonna say like uh
100:40 - new to-do list tim we could say like joe
100:43 - create that
100:44 - uh and that has created a new to-do list
100:46 - for us
100:47 - so now let's actually show that to-do
100:49 - list right after we
100:50 - create it so for right now all we're
100:53 - doing is just returning the form with
100:54 - whatever information we passed in it
100:56 - but what we can do is we can say that
100:58 - all right if we're saying
101:00 - response is post instead of returning
101:02 - that form
101:03 - that has the name of the to-do list we
101:05 - just created let's
101:07 - redirect to that to-do list so you can
101:09 - see what it looks like
101:10 - so to do that what we can say is we can
101:12 - say return
101:13 - http and instead of saying response this
101:16 - time
101:17 - we'll say http and then response
101:20 - redirect if i can get my capitals
101:23 - working here
101:24 - redirect like that and then in here all
101:26 - we have to do is put the page we want to
101:28 - go to
101:28 - so in this case i'm going to say slash
101:30 - and then i like a percent i
101:32 - i'm going to say percent and in this
101:36 - case i'm going to say t dot id
101:38 - which will be the id of the to-do list
101:39 - we want to go to now i also just have to
101:42 - import this http response um so i'll do
101:44 - it up here
101:45 - so from django.http import http response
101:48 - redirect
101:49 - and now what will happen is instead of
101:50 - returning this form
101:52 - and returning the main dot create html
101:55 - page we will redirect to the page that
101:56 - we've defined here
101:57 - which will be the id of the to-do list
101:59 - we just created so now
102:01 - this should have updated it did so let's
102:03 - try this again with joe
102:04 - and say create new and we are redirected
102:08 - to the page that displays
102:09 - joe to us right uh and that is
102:11 - essentially how that works so that is
102:14 - the way that you create a form
102:16 - if we wanted to um let's say get more
102:19 - information from the form
102:20 - what we could do is print out um like if
102:23 - the checkbox was hit or not
102:25 - we can do all kinds of stuff you can
102:27 - obviously create more than one form by
102:28 - doing
102:29 - multiple forms in here you can have more
102:30 - than one form on each page with
102:32 - different submit buttons
102:33 - all that kind of stuff in the next video
102:35 - i'll talk about
102:36 - creating custom forms so modifying some
102:38 - stuff maybe making
102:39 - some things look better and then in
102:41 - future videos we're going to be adding
102:42 - bootstrap to our website
102:43 - and we're doing login forms all this
102:45 - kind of stuff so if you guys don't get
102:46 - it now
102:47 - we will be going over more of it in the
102:48 - future but these are just kind of the
102:50 - basics of django forms so today's video
102:52 - we're going to be going a bit more
102:53 - advanced with forms
102:55 - i'll be showing you how to create your
102:56 - own custom forms that are a bit more
102:58 - dynamic than typical django forms that
103:00 - we were using in the last video using
103:02 - that forms class and whatnot
103:05 - so yeah i guess let's get into it so the
103:07 - goal today kind of is to allow the user
103:10 - to add an item from their to-do list so
103:13 - right now we don't actually have any way
103:14 - for them to add items we only have ways
103:16 - for them to add new to-do lists
103:18 - so we're going to do that we're also
103:19 - going to add some check buttons beside
103:21 - the to-do list items
103:23 - so we can show whether or not they are
103:24 - complete or incomplete without having to
103:27 - do this
103:27 - incomplete complete kind of thing so
103:29 - right off the bat i'm actually just
103:30 - going to delete this incomplete and
103:32 - complete
103:33 - for now and i'm going to start setting
103:36 - up a form
103:37 - inside of my html file here now the
103:39 - reason we need a form
103:41 - is because we need to pass the
103:42 - information like whether the user
103:44 - clicked a check button or whether they
103:46 - what item for example they typed in to
103:48 - add to the list we need to pass that
103:50 - back to our view using a post request
103:53 - so we need a form to do that so i'm
103:55 - going to start by creating a form i'm
103:57 - going to say
103:57 - method equals and in this case post and
104:00 - i'm going to say
104:01 - action uh what do you call it equals
104:04 - pound like this okay
104:06 - or number sign whatever you want to call
104:07 - it now i will simply close my form by
104:10 - doing that
104:11 - and now i'm going to start by just
104:12 - setting up some buttons at the bottom of
104:15 - my form that says save
104:16 - and let's say add item so what i'm going
104:18 - to have is i'm going to have two buttons
104:20 - save add item save is going to save you
104:22 - the changes to your checks and add item
104:24 - is going to add the item
104:26 - that we will get from a text field that
104:27 - i'm also going to add so the first
104:29 - button that i'll create will be that
104:31 - save button so to do that i'm just going
104:32 - to say
104:33 - button i will say type equals and in
104:36 - this case
104:37 - what do we need type for a button yeah
104:38 - we do we'll say type equals submit
104:40 - we'll say name equals and in this case
104:43 - it'll just be
104:43 - save and i'll say value equals
104:47 - and i can say save here as well now when
104:49 - i close my button i'll put whatever i
104:51 - want to display on it here so in this
104:53 - case i'm going to say
104:54 - save and i'll copy this actually and i'm
104:56 - going to just
104:57 - use the same thing except instead of
104:59 - name i'm going to say
105:01 - new item i don't know why that tabbed
105:04 - there
105:04 - and we'll give that value of new item as
105:06 - well
105:08 - and obviously now i'm just going to make
105:10 - this add item i mean i could make a new
105:12 - item too it doesn't really matter
105:13 - and in between here i'm going to add an
105:16 - input field which is my
105:17 - text that you're going to type in for
105:19 - when you create a new button so i'm
105:20 - going to say input
105:21 - we'll say type equals text and we'll say
105:25 - name equals i guess we could say
105:29 - item why not uh i know it's probably not
105:31 - the best name actually let's just say
105:33 - new all right news probably not a good
105:36 - name either but whatever that's fine
105:37 - okay so type equals text name equals new
105:40 - and sweet now what i'm going to do now
105:42 - is add those check buttons in
105:45 - beside all of our items so obviously if
105:47 - our item is complete we want that check
105:49 - button to start off as
105:50 - checked and if it's not we want it to
105:52 - not be checked so to do this
105:53 - it's similar to the text we're just
105:55 - going to say input we're going to say
105:57 - type equals and in this case check box
106:00 - we'll say value equals clicked and you
106:04 - can
106:04 - call this whatever you want but just
106:05 - remember this name because we're going
106:06 - to need to use this
106:07 - i'm going to say name is equal to and
106:10 - this is a little bit weird but we're
106:11 - going to set the name
106:13 - equal to the id of our item so to do
106:15 - this what i'm going to do is just go in
106:17 - here and say item
106:18 - dot id and before that i'm going to put
106:21 - a c
106:22 - so that what we're going to do now is
106:23 - we're going to say all of our check
106:24 - buttons because this is going to create
106:26 - a bunch of different check buttons right
106:27 - they're going to be given the name c and
106:30 - then whatever the id of that button is
106:31 - this will just make it way
106:33 - easier for us to determine which check
106:35 - button was checked
106:36 - and what item that corresponds to and
106:38 - you'll see how we do that later so let's
106:40 - copy this
106:41 - now and i'm going to put it right here
106:43 - as well so inside these li tags
106:45 - now the only difference is up here where
106:47 - it says is complete if
106:49 - item.complete equals true i'm just going
106:51 - to type checked like this which will
106:53 - default it to
106:54 - start off checked that's all that's
106:56 - going to do for us
106:57 - okay so now we've actually set up this
106:59 - form the last thing to add is our csrf
107:02 - token
107:03 - that we always need to add whenever we
107:04 - create a token or a form sorry so csrf
107:07 - underscore token
107:08 - like that and then hit save so now that
107:11 - we've done that our html will be showing
107:13 - up all nice
107:14 - and now we just need to handle this from
107:16 - our
107:17 - view so remember our view is called
107:18 - index so what i want to do in here now
107:20 - very similar to create is i want to
107:22 - first off start by checking whether or
107:24 - not we have
107:26 - posted something or we're getting
107:27 - something so if we're posting something
107:29 - we're going to say
107:29 - if and then this case response dot post
107:33 - or not post sorry dot method equals
107:35 - equals
107:37 - post like that then we will start doing
107:39 - all the stuff in terms of saving and
107:41 - adding items
107:42 - now i want to quickly go back here and
107:43 - talk about something for a second so
107:45 - right now we have two buttons we have
107:47 - save
107:47 - and we have new item and these buttons
107:49 - might have
107:50 - different functions and they do in this
107:52 - instance so for example
107:54 - save well we only want save to look at
107:57 - and
107:57 - update the check buttons right that's
107:59 - what it's going to do it's just going to
108:00 - update your check buttons if you've
108:01 - completed an item or if you haven't
108:02 - completed it
108:03 - whereas our new item button or add item
108:05 - button is going to
108:07 - take the text from this text field and
108:09 - add it as a new item on our list
108:11 - so we need a way to determine which
108:13 - button we clicked so we can determine
108:15 - what function we're going to perform
108:17 - so to do this what you can do actually
108:20 - is you can say if
108:22 - response dot post
108:25 - dot get and then here you can put the
108:27 - name of your button
108:28 - so in this case i'm going to say we'll
108:30 - start off by doing save
108:32 - save like this okay now what this does
108:36 - actually
108:36 - is whenever you get a post request
108:40 - from the server what's going to happen
108:42 - is all the information
108:44 - in this form here is going to be passed
108:46 - in what's known as a dictionary
108:47 - to our view so what's going to happen is
108:50 - we're going to get a dictionary that
108:51 - looks something like this
108:52 - so we'll have save and it will either
108:54 - have no value or
108:56 - it will have a value of whatever we
108:58 - typed here's value so for example
109:00 - save if we click this button what's
109:03 - going to happen is it's going to be
109:04 - added to a dictionary
109:05 - which is all of the information from
109:07 - this form and it's going to be given
109:09 - this value only if we click it so what's
109:11 - going to happen is we're going to get
109:12 - the name
109:12 - save points to the value save and it's
109:15 - going to look
109:16 - like this precisely okay we're also
109:18 - going to get all of the information for
109:20 - our check buttons
109:21 - so what will happen is we'll get
109:22 - something like c1 which will be that id
109:25 - right
109:25 - c1 and that'll point to in here it'll
109:28 - say and i'll print this out after you
109:30 - guys can have a look at it it'll say
109:31 - clicked if we clicked the check button
109:34 - if we didn't click the check button
109:35 - we're just going to get a blank string
109:37 - or c1 might not even show up in the uh
109:39 - the dictionary okay
109:41 - so and then we can also try what do you
109:44 - call it for example like add item we can
109:46 - do the same thing with add item
109:47 - now the thing is if we clicked add item
109:50 - then it will come
109:50 - in and it will give the value of add
109:53 - item
109:54 - otherwise it won't give us any value
109:55 - just give us a blank string and you guys
109:57 - will see how this works in a second i'm
109:58 - going to print it out for you so you can
109:59 - have a look so let's actually if we
110:01 - are posting let's print
110:04 - response dot post like that so you guys
110:07 - can have a look
110:08 - okay so anyways so we're going to see if
110:10 - we are saving so if we're saving
110:12 - then this will evaluate to true because
110:14 - there'll be some value so that'll just
110:15 - work
110:16 - otherwise we'll say what do you call it
110:18 - l if
110:20 - response dot post and
110:23 - dot get and in this case instead of
110:25 - saying save we're going to say
110:27 - new i think was it new item i keep
110:30 - forgetting what i call this yes new item
110:31 - awesome
110:32 - new item okay so we'll just pass down
110:34 - here for now and let's work inside of
110:36 - this first
110:37 - one up here so what we want to do up
110:39 - here is we want to look at all the
110:40 - different check buttons and determine
110:41 - whether or not they were clicked or not
110:43 - and then update our item accordingly so
110:45 - to do this what i'm going to do is i'm
110:47 - going to loop through all of the items
110:48 - in our current to-do list because we
110:50 - still have this value up here
110:52 - and we're going to check the ids of that
110:54 - with the check buttons and see if it was
110:56 - clicked or not so to do this i'm going
110:57 - to say
110:58 - 4 i guess we'll say item in in this case
111:02 - ls dot item underscore set
111:05 - dot all with lowercase l's
111:09 - okay then what we will do is we'll say
111:11 - if and in this case
111:13 - response dot post dot
111:16 - get and here what we're going to do is
111:18 - we're going to say c
111:20 - plus str and then item.id
111:23 - now what this is doing is getting the
111:25 - item id converting it to a string and
111:27 - adding a c to the beginning of it so we
111:28 - will get
111:29 - the exact same kind of pattern of what
111:32 - do you call it
111:32 - names or ids as we're setting up here
111:35 - right so we have c in that item id
111:36 - that's just what we're doing here so if
111:38 - we get that and that is equal to the
111:40 - value of
111:41 - clicked then what we need to do is well
111:44 - we need to update that item so we'll say
111:47 - dot complete is equal to and in this
111:50 - case
111:51 - true now otherwise so if we didn't get
111:54 - that or it wasn't equal to clicked
111:55 - we'll take this but we're going to set
111:56 - it equal to false
111:58 - so this is the same as like if you
112:00 - unclick the check button and it doesn't
112:02 - um
112:03 - it's not check mark then this will run
112:05 - right here what i'm doing now
112:06 - and then all we can simply do down here
112:08 - is just say is actually inside the for
112:10 - loop
112:10 - we'll say item.save and there we are
112:14 - sweet so that's how that works and
112:16 - that's actually it for this uh
112:18 - saving the check buttons now what's left
112:20 - to do is to add a new item this is
112:22 - uh it's similar in terms of how we do
112:24 - this but what we're going to start by
112:26 - doing is
112:26 - getting the text that was in that text
112:28 - input field here so the name was new so
112:31 - say text is equal to and in this case
112:33 - response
112:34 - dot post dot get
112:37 - and here we'll say new and now what i'm
112:40 - going to do
112:41 - is before i add this new item because
112:42 - this will give us the text
112:44 - i want to validate that this is valid
112:46 - input
112:47 - now you can do whatever checks you want
112:49 - on this input and usually
112:50 - django will do it for you but since
112:52 - we're not using django forms
112:54 - using our own custom form we don't have
112:56 - that option of using
112:57 - is valid like we used here so what i'm
112:59 - going to do is just say if text
113:01 - and this will actually say len of text
113:04 - is greater than two so it's at least
113:06 - three characters
113:07 - then i will simply add that item to the
113:09 - to-do list so to do that i'm going to
113:10 - say
113:11 - ls.item underscore set dot create and in
113:14 - this case we'll say text equals and i'm
113:16 - actually going to have to
113:17 - rename this to txt here i will say
113:20 - txt and then we'll say complete
113:24 - equals false like so uh
113:27 - otherwise i'm just going to print out a
113:29 - message that just says like invalid
113:30 - input just so that we can have a look at
113:32 - this in the console
113:33 - and that should actually be about it now
113:35 - i'd be surprised if i didn't make any
113:37 - mistakes but let's give this a run i
113:39 - already have the
113:40 - server actually i'm gonna have to run
113:41 - the server again here run the server
113:43 - so let's now attempt to go to like id2
113:47 - so now we can see we have first item
113:49 - second item third item not showing
113:51 - now if i decide to check an item or
113:53 - uncheck an item and hit save
113:54 - uh um what is your issue here name
113:57 - respawn oh well it would help if i
113:59 - spelled
113:59 - response correctly where did i misspell
114:01 - that re of course in the print statement
114:03 - anyways
114:05 - let's see if this will update now python
114:08 - managed up high run
114:09 - server did i make another mistake let's
114:11 - see two
114:12 - okay now let's try it save there we go
114:14 - so then you can see that the item saves
114:16 - now if i go to maybe let's say page
114:18 - three
114:19 - and i want to add an item let's try
114:21 - hello and we click add item and now you
114:23 - can see that we get hello popping up and
114:25 - i can check
114:25 - i can save that i can unsave it and if i
114:28 - go back to 2
114:29 - you can see that obviously the same
114:30 - checking pattern is still there i could
114:32 - add
114:33 - a new item so i'll just say new item
114:36 - here
114:36 - add that and you can see that it's
114:38 - popping up and i can save that so that
114:40 - is how you make a custom form
114:42 - this is very useful what i've just shown
114:44 - you will allow you to
114:45 - do pretty well anything with forms
114:47 - because now you know how to get
114:49 - information from forms
114:50 - now i will show you actually what our
114:52 - post requests are looking like
114:53 - just so you can see or sorry uh what is
114:56 - it requests like what i'm printing here
114:57 - i'll show you what that looks like and
114:58 - talk a little bit about that before we
115:00 - wrap up here
115:01 - so you can see that uh if i go here
115:05 - we have check button c2 and that is
115:08 - given a value of clicked we can see
115:10 - c5 is given a value clicked and c7 is
115:12 - given a value clicked
115:13 - so those ids for our check buttons we
115:16 - see that save is given the value of save
115:18 - because we hit
115:19 - that save button but we see that we're
115:21 - not seeing any other
115:22 - um values here right so if we don't
115:25 - click an item
115:26 - or if we're not giving a value to it
115:29 - we're not going to see it here
115:30 - so for example like if we have c2 and we
115:34 - don't check that button
115:35 - it's just simply not going to show up in
115:37 - the information that it passed to us
115:38 - which means that we can check if it's
115:40 - not there and then do something
115:42 - accordingly so the way that this
115:44 - get request works when we say get like
115:46 - this or this get method
115:48 - is since this is it's like this is kind
115:51 - of a dictionary
115:52 - but this get method is specific to this
115:54 - type of data structure and essentially
115:56 - if the item doesn't exist i believe it
115:59 - just returns
116:00 - none which means that if we ever put
116:02 - something like this so for example if
116:03 - save isn't there
116:04 - we simply won't run the block because if
116:07 - none obviously it's not going to run
116:09 - so that's the way that that kind of
116:10 - works you can see i mean
116:12 - i wrote highly encourage you guys to
116:14 - kind of mess with this
116:15 - and do some requests print them out and
116:18 - see what it looks like that's really the
116:19 - best way to understand
116:21 - how this works um you can see it's a
116:23 - type query dictionary and when you try
116:25 - to get something if it doesn't exist it
116:26 - just says none if it does exist it'll
116:28 - give you the value that corresponds with
116:31 - it
116:31 - and in some instances you can actually
116:33 - have multiple values pointing to the
116:34 - same name
116:35 - so that's just something to keep in mind
116:36 - that you guys might notice when you
116:38 - go through this so anyways that is
116:41 - essentially how that works we create a
116:42 - custom form now we know to add things
116:44 - and with this information we can go into
116:47 - creating some more complex stuff so in
116:49 - the next video i think i'm going to be
116:50 - adding bootstrap onto the website making
116:52 - things look a little bit nicer
116:53 - maybe adding a sidebar we'll do some
116:55 - stuff like that and then later on we're
116:56 - gonna get into user registration and all
116:58 - that kind of stuff
116:59 - so that you can actually have all of
117:01 - your to-do lists stored under a certain
117:02 - user
117:03 - so anyways that has been it for this
117:04 - video if you guys enjoyed please make
117:05 - sure you leave a like and subscribe and
117:07 - i will see you in another video so in
117:08 - today's video it's going to be a little
117:10 - bit shorter and what we're going to be
117:11 - doing is simply adding a sidebar to our
117:13 - website
117:14 - and making things look just a little bit
117:15 - nicer now in the next video we're going
117:17 - to go on to add bootstrap to our website
117:20 - and then be able to make something that
117:21 - looks pretty well like this
117:23 - and i'll show you guys some more of this
117:25 - example in a second
117:26 - but for right now we're just going to be
117:27 - adding this nice sidebar with some
117:29 - hovers
117:29 - and kind of showing you how to go about
117:31 - doing that so anyways let me give you a
117:33 - quick preview on what our website is
117:35 - going to look like in the next two
117:36 - maybe three tutorials so for example we
117:39 - have these links on the side here we can
117:41 - view all of our different to-do lists
117:43 - so if i go to new lists you can see that
117:44 - we go there we can go to create which
117:46 - will allow us to create a new to-do list
117:48 - and then obviously if we go inside of a
117:49 - to-do list we can see all these nice
117:51 - check buttons
117:52 - we can hit save we can add a new item
117:54 - for example by doing that
117:56 - and this is just kind of the basics i
117:58 - haven't gone crazy with this i could
117:59 - obviously make this look a lot better be
118:01 - a lot more
118:02 - dynamic but this only took me about 15
118:04 - 15-20 minutes just to style
118:06 - and make everything look decent so
118:08 - anyways that is kind of what we're going
118:10 - to be working towards in terms of using
118:12 - bootstrap which is just some css that's
118:15 - pretty much already made for us
118:16 - and adding a sidebar today okay so let's
118:20 - get out of this and let's go into our
118:24 - what do you call it file here and all
118:25 - we're going to be doing to add this
118:26 - sidebar is working inside of this
118:28 - base.html file
118:30 - now because all of these files inherit
118:32 - from base.html
118:33 - this makes it really easy to add stuff
118:35 - like a sidebar to our website because
118:37 - all we have to do is add it into the
118:39 - base template it will automatically be
118:41 - added to all of the other ones
118:42 - now what i'm going to start by doing is
118:44 - just setting up a div here that's going
118:45 - to represent
118:46 - our sidebar and if you're not familiar
118:48 - with html and css and all this stuff
118:50 - i'll try to explain how some of this
118:51 - stuff works
118:52 - but it is pretty straightforward you
118:54 - should get it pretty quickly so i'm just
118:55 - going to say the class is equal to and
118:57 - in this case
118:58 - side nav like that and then we will end
119:02 - that div
119:03 - and inside here i'm just going to put a
119:05 - few links which will be our sidebar
119:07 - items
119:07 - so in this case i'm going to say slash
119:09 - home and
119:10 - this link name will be home like that
119:14 - and copy these a few times okay so home
119:18 - will have create and then we can add
119:21 - one more link if we want to uh but we
119:24 - don't actually have anywhere for this to
119:25 - really
119:26 - go to yet let's just do like slash two
119:29 - and just call this
119:30 - uh view okay so anyways what i'm doing
119:33 - right now guys uh in case some of you
119:35 - are confused essentially
119:36 - is this href just stands for where this
119:38 - link is gonna go when we click on it
119:40 - a stands for link tag and this div is
119:42 - just a way that we can style a bunch of
119:44 - different elements at once
119:46 - by doing for example class equals side
119:48 - nav and now what we're going to do is up
119:50 - here in our head tags is we're going to
119:52 - create
119:53 - a css kind of script or style sheet
119:56 - within our html file here
119:58 - and define what our side nav is going to
120:00 - look like now we also need to add
120:02 - a class here to our main div because i'm
120:04 - going to add some stuff in here
120:06 - and this class will just be called what
120:08 - was it me
120:09 - like that okay so anyways what i'm going
120:11 - to do now is go up top here
120:14 - and i'm just going to add a bit of
120:16 - styling stuff to make
120:17 - this div here that we've added of links
120:19 - appear on the side of the screen a
120:21 - certain color and then add some hover
120:22 - effects and stuff to it as well so this
120:24 - is really just going to be
120:25 - adding some css at this point so i'm
120:27 - just going to add some style tags here
120:29 - i will close that style there and in
120:32 - here i'm going to do
120:33 - type equals and in this case text css
120:38 - like that and now i'm actually just
120:39 - going to copy off my other monitor
120:40 - because i can't
120:42 - remember all of the styling i've done on
120:44 - this but essentially if we want to
120:46 - access or change the side nav class what
120:48 - we do is we use a period representing a
120:50 - class
120:51 - and then we type the name of our class
120:53 - which is sidenav we can add
120:54 - these brackets like this and then inside
120:57 - here is all of the styling we want to
120:59 - apply to our side nav
121:00 - so for example we want the height to be
121:02 - equal to 100
121:03 - pixels which are sorry not 100 pixels
121:06 - 100 percent
121:07 - which means that it's going to take up
121:08 - the entire height of the screen so you
121:10 - saw that on my left side it took up the
121:11 - entire height
121:12 - we're going to say width and in this
121:14 - case we'll just give it a pixel value so
121:16 - 160 pixels and you can modify this value
121:19 - if you want
121:20 - we're going to say position and in this
121:22 - case it's going to be
121:23 - fixed we could make this a dynamic
121:25 - sidebar but i'm not going to do that in
121:26 - this part
121:27 - we're going to say z index and in this
121:29 - case 1
121:30 - which means that it's going to stay all
121:32 - the way at the top of our screen
121:34 - we're going to add top which is zero
121:36 - we're going to say
121:37 - left zero like that which just means
121:40 - again stay in the top left hand corner
121:42 - of our screen
121:42 - we're gonna say background and in this
121:44 - case is it even there
121:46 - uh it's not background i believe color
121:50 - and we're gonna say this is pound one
121:52 - one one which will give us that kind of
121:53 - dark
121:54 - blackish gray color you guys saw before
121:57 - we'll say overflow x
122:00 - and this is hidden and i don't even
122:02 - remember what this one does oh it just
122:04 - makes sure that we don't go horizontal
122:06 - uh with our sidebar
122:07 - and then we'll do padding from the top
122:10 - uh
122:10 - of 20 pixels now just to as a disclaimer
122:13 - here
122:14 - i did not create the sidebar i just
122:16 - found this on some like css website
122:18 - and modified some of the attributes so
122:20 - that's what i'm going off of here
122:21 - if you guys want to create a different
122:22 - kind of sidebar you can feel free to
122:24 - modify these kind of properties change
122:26 - the color like they're pretty
122:27 - straightforward on how they work
122:28 - or you can just look up like nice
122:30 - sidebar a nice title bar online
122:32 - and we'll probably give you the css and
122:34 - even the html on how to do that
122:36 - so now i'm going to set up what my links
122:38 - inside of my sidebar are going to look
122:40 - like so whenever you want to specify
122:42 - a certain tag from within a class you do
122:45 - the class name and then the actual tag
122:47 - itself
122:47 - so in this case side nav a which means
122:49 - if i highlight this you can see it's
122:51 - actually highlighting all of these a
122:52 - tags here that are inside
122:54 - of my sidenav so what i'm going to do
122:56 - here is say padding
122:57 - and in this case we're going to say 6
122:59 - pixels
123:01 - no 8 pixels 6 pixels and
123:05 - 16 pixels and again feel free to mess
123:08 - with these numbers
123:08 - we're going to say text and in this case
123:10 - decoration
123:12 - and this will just be none for now and
123:14 - then down here we're going to say
123:16 - font and you guys can mess with this as
123:18 - well you have to look up the fonts if
123:19 - you want to know what these mean
123:20 - is eight one eight one eight one and
123:23 - display in this case is gonna be block
123:26 - style
123:27 - so is that all uh oh sorry what am i
123:30 - saying this is color
123:31 - and the font i must have misread this
123:34 - here the font is going to be
123:36 - just we're going to do the font size
123:38 - which is 25 pixels like that okay
123:40 - so that's it for the sidenav a tag and
123:43 - now all that's left to add is actually
123:45 - what happens when we hover over our aid
123:48 - tags so for example if we hover on these
123:50 - we want to change the color
123:52 - so we can do that from within css so to
123:54 - do that what we're going to do is
123:55 - literally just copy this
123:57 - except we'll add this what we call a
123:59 - property here called
124:00 - hover and then all we're going to do is
124:02 - just simply change the color when we
124:03 - hover so to do this we'll just change
124:05 - this color to
124:06 - f1 f1 f1 and yeah
124:10 - there we go okay so we've done that now
124:12 - and the only thing left to do
124:14 - actually is move this uh what do you
124:16 - call it this main
124:17 - content here over to the right because
124:20 - right now what we
124:20 - are actually gonna have is we're gonna
124:21 - have the sidebar and then this content
124:23 - will go below the sidebar
124:25 - we don't want that so to move this
124:27 - content block or i guess this class main
124:29 - over
124:30 - it's pretty straightforward we'll do dot
124:31 - main like that and then in here we'll
124:33 - just say
124:34 - margin hyphen left and in this case is
124:37 - 160 pixels
124:39 - did i spell margin correctly no i did
124:41 - not and we'll just add a bit of padding
124:43 - here
124:43 - so say padding and then in this case
124:46 - we'll do 0 pixels and
124:48 - 10 pixels like that now that should be
124:51 - about it actually for our sidebar and by
124:54 - applying this to our
124:56 - base.html file this will apply to our
124:59 - entire website so let me actually
125:01 - get back into my uh what do you call it
125:03 - file here so i can run this for you guys
125:05 - so cd django tutorial cd my site
125:08 - and in this case we'll just do python
125:11 - manage.pi
125:12 - run server and let's grab this link here
125:16 - go to google chrome and let's see how
125:19 - this looks
125:20 - okay so there we go so we've created a
125:22 - nice home page here you can see we have
125:24 - home
125:24 - create view if i go to home uh so slash
125:28 - home doesn't exist that's just my bad i
125:29 - don't have a slash home page here
125:32 - and if i go to create you can see we
125:33 - have this nice little create now
125:35 - and if i go to view it brings me to uh
125:38 - list item
125:39 - number two or whatever it is or to-do
125:41 - list number two
125:42 - so that is precisely how we add a
125:44 - sidebar and you can see that this is a
125:46 - really nice
125:47 - thing that we have essentially is the
125:48 - fact that we have this base.html file
125:51 - because look i just applied the sidebar
125:52 - to my entire
125:54 - website really easily so now i actually
125:57 - i feel like i must have forgotten some
125:59 - kind of font size here
126:01 - because on my other website the font
126:03 - looks better
126:04 - but um you know what for now that's just
126:06 - fine
126:07 - so anyways uh that is actually going to
126:09 - be it for this tutorial i know this was
126:10 - a bit shorter
126:12 - but this shows you how to add a sidebar
126:14 - it also kind of shows you how you can
126:15 - style
126:16 - some of your different items if you want
126:17 - to add some more content blocks or you
126:19 - want to add classes to specific things
126:21 - you can do exactly what i've just done
126:23 - here inside of your other files as well
126:26 - you can add some style tags or you can
126:28 - add the style tags here and then add the
126:30 - classes on stuff like this
126:32 - and yeah so in the next video we're
126:33 - gonna be adding bootstrap to our website
126:35 - which is a nice css styling
126:37 - and we'll make it look a little bit
126:38 - nicer change some of the fonts
126:40 - and just make everything look a bit
126:42 - cleaner so anyways that has been it for
126:44 - this video if you guys enjoyed please
126:45 - make sure you leave a like and subscribe
126:46 - and i will see you again
126:47 - in the next so in today's video what
126:48 - we're going to be doing is just adding
126:50 - bootstrap to our website and doing a
126:51 - little bit of styling
126:52 - i'm going to show you guys how we can
126:54 - add some just nice looking classes
126:57 - and how you can kind of look through the
126:58 - bootstrap documentation to find what
127:00 - you're looking for
127:01 - so all we'll do is really just style a
127:03 - few different elements and make things
127:04 - look a bit nicer and then i'm kind of
127:06 - going to leave the rest to you guys
127:08 - so with that being said let's get
127:10 - started so i'm going to head over to the
127:12 - bootstrap website and it actually gives
127:13 - you a really
127:14 - easy and quick way to get bootstrap on
127:17 - your website
127:18 - and all we're going to do to do this is
127:20 - just kind of follow this page
127:21 - so first let's talk a little bit about
127:23 - what bootstrap is
127:25 - so bootstrap essentially is a css
127:28 - javascript jquery framework which allows
127:31 - for you to add some custom built styling
127:33 - to your website
127:35 - now this actual framework is built on
127:37 - what's known as a mobile first
127:39 - site framework or like so it's meant for
127:42 - building responsive
127:43 - mobile websites that and then they will
127:46 - expand to desktop applications so
127:48 - apparently that is kind of the best way
127:49 - to do it now
127:50 - is to build stuff ideally for mobile
127:52 - because that is where most of the web
127:54 - traffic is nowadays
127:55 - i believe i could be incorrect um so you
127:58 - build it first for mobile
128:00 - and then you kind of expand it out into
128:02 - desktop
128:03 - so anyways let's get started and
128:06 - use bootstrap so what we're going to do
128:08 - is just follow this page so the first
128:09 - thing we need to do is copy this
128:11 - link here so css and i'll leave the link
128:13 - to this page in the description if you
128:15 - want to do this as well
128:16 - so i'm going to copy this style sheet
128:18 - here and all this
128:19 - uh all this is essentially is this kind
128:21 - of style sheet
128:22 - but just online that we're going to
128:24 - access and be able to use so it's served
128:26 - on what's known as a content delivery
128:28 - network which means we don't actually
128:29 - have to download the style sheet
128:32 - we can just copy this link in here at
128:34 - the bottom of our
128:36 - head tags but just above the title and
128:38 - we will start using
128:39 - this uh this style sheet on our website
128:43 - now that we've done that there's a few
128:44 - other things we need to add so let me go
128:46 - down here
128:47 - to the starter template and just copy a
128:48 - few things we're missing
128:50 - the first thing i'm going to add is just
128:51 - these meta tags and these meta tags
128:53 - apparently are important they just set
128:55 - up some properties for your website
128:57 - so we'll put them below this link like
128:59 - that
129:00 - just to finding the type of characters
129:02 - you're going to be using and then
129:04 - i believe this is something to do with
129:05 - the mobile friendly kind of
129:07 - look or whatnot so now that we've added
129:09 - that they might have to go above
129:11 - that we'll add those above we'll add
129:13 - this doctype html so just exclamation
129:15 - point doctype html we'll add that
129:18 - at the top of our file like that hit
129:20 - save and i'm just going to move these
129:22 - meta tags to go
129:23 - above our link here so our style sheet
129:27 - like that sweet so now that we've added
129:29 - that there's only one more thing is
129:31 - three more things
129:32 - actually that we need to add and those
129:33 - would be these scripts and these scripts
129:35 - are used by some of the css classes
129:38 - and to do a little bit of animation and
129:40 - just make things look a bit nicer maybe
129:42 - move some components around the page
129:44 - so we're going to add these at the
129:46 - bottom of our body tag so underneath all
129:48 - of the content here
129:49 - now you don't necessarily need to add
129:52 - these scripts
129:53 - but in some cases when you use certain
129:55 - css classes
129:56 - they will require these and then things
129:58 - might look a little bit funkier things
130:00 - might be off
130:01 - so anyways now that we've added that
130:03 - we're actually ready to start using
130:04 - bootstrap
130:05 - so the first thing i'm going to do is
130:06 - kind of add some divs and some different
130:08 - classes
130:09 - into my main content block here and i'll
130:11 - talk briefly about what they do but
130:13 - really the way to understand this stuff
130:15 - is just to go to the bootstrap
130:17 - documentation so
130:18 - for example if i go here and just look
130:21 - at all the different components and kind
130:23 - of copy the stuff that you like
130:25 - that what it looks like and then
130:26 - customize it so for example if you
130:28 - wanted a large button you would go to
130:30 - the buttons tab here for components this
130:31 - link will be in the description as well
130:33 - look at a button you like and then
130:35 - literally just copy the tag
130:37 - or the class for it and then you can
130:38 - customize it accordingly
130:40 - so that's what i'm going to be doing for
130:42 - this kind of and i'm just going to be
130:43 - copying some code that i've already
130:44 - written to style my website in a way
130:46 - that i think looks i mean
130:48 - decent okay i haven't gone too far i
130:49 - didn't take too long to do this
130:51 - so anyways let's add some dibs here so
130:53 - the first div i'm going to add is class
130:55 - equals in this case
130:56 - row and then justify
130:59 - in this case content
131:02 - content and center like that
131:05 - which just is going to mean that we're
131:07 - going to put this in the middle of our
131:08 - web page
131:10 - so yeah so add that and now what we'll
131:12 - do
131:13 - is we'll add another div and this div
131:16 - we're going to say
131:16 - class equals and in this case column 8
131:20 - which is going to define what column
131:21 - space we're going to be in
131:23 - we will end this div here and we'll add
131:25 - a few other things as well so now i'm
131:27 - going to add an h1 tag and this h1 tag
131:30 - is actually going to be the
131:31 - header of my website so inside of this
131:34 - tag you're going to call
131:35 - whatever your header you want so i'm
131:36 - just going to say mine is my site
131:38 - and i'm going to give this a class of in
131:41 - this case
131:41 - we will say mt hyphen 2.
131:45 - again i'm just taking these from the
131:46 - bootstrap website if you don't know what
131:48 - this stuff means
131:49 - you can either just look up the class
131:50 - and it'll show you the styling for it
131:52 - or you can just go to the bootstrap
131:53 - website and look for ones that you like
131:56 - so in this case i'm going to do mt0 mv
131:59 - hyphen 4 and what this is going to do is
132:01 - draw a little line for us
132:02 - underneath our header just make things
132:05 - look a little bit nicer
132:06 - so that's all i'm actually going to add
132:07 - here for this main
132:09 - base template now let's go to our
132:11 - website
132:12 - and let's see how it looks so this is
132:14 - what it looked like before and just with
132:16 - those few adjustments when i refresh the
132:17 - page let's see how it looks now
132:19 - okay so there we go um so actually so
132:22 - these little check buttons here
132:24 - shouldn't be here one second guys just
132:26 - because i might not have saved a page
132:28 - because i was messing around with it
132:29 - before let me refresh this now
132:31 - ah there we go so that's uh now what
132:33 - we're getting
132:34 - now it should be in the middle of the
132:35 - page which is kind of throwing me off
132:37 - just a little bit
132:38 - uh i spelt justify incorrectly that
132:40 - would be why so row
132:42 - justify content center i knew i was
132:44 - doing something wrong there so now let's
132:46 - refresh this
132:46 - and there we go now we can see that it's
132:48 - moved to the middle of the page
132:50 - and we have this line here obviously as
132:52 - well still
132:53 - sweet so that's it for just styling the
132:56 - base template so now that's going to
132:58 - apply to all the web pages that we have
133:01 - if i go to create for example you can
133:02 - see that it applies to this as well
133:04 - so now it is time to style some of the
133:06 - other pages that we have
133:08 - so the first one i'm going to style is
133:09 - this create page so notice this is what
133:11 - it looks like now
133:12 - let's mess around with this now what i'm
133:14 - going to do is change
133:16 - some aspects of this form so i'm going
133:18 - to add a class here and i'm going to say
133:20 - this class
133:20 - is form hyphen group i'm just going to
133:23 - put this create page into
133:25 - let's say like an h3 tag for right now
133:29 - just because i want it to be a little
133:30 - bit bigger on the page it won't add any
133:32 - uh
133:33 - any styling to that so now we'll add
133:35 - some divs
133:36 - inside of this so the first div that i'm
133:38 - gonna have is just gonna be an input
133:40 - group
133:40 - so i'm gonna say div and in this case
133:43 - class
133:44 - equals input hyphen
133:47 - group in this case mv hyphen 3 and then
133:50 - i will end
133:51 - this uh like this i believe this might
133:54 - be the correct place for it i'm probably
133:56 - gonna have to mess around with these a
133:57 - little bit but we'll see
133:58 - i'm also just gonna put this form
134:00 - instead of doing form dot as p
134:02 - i'm just gonna get the name attribute
134:03 - from our form so the way i do that is
134:05 - just by saying form dot name
134:07 - so rather than showing the entire form
134:09 - because we have a little check button
134:10 - i'm just going to show the name text box
134:12 - because that's all i actually want for
134:14 - right now
134:15 - so now what i'm going to do is actually
134:16 - i'm going to move this underneath here
134:18 - my apologies
134:20 - and i'm going to add another div and
134:22 - this one is going to be
134:23 - class equals and in this case
134:26 - input hyphen group hyphen prepend
134:30 - now this is a really nice um div that
134:33 - they have here the class that they've
134:34 - made and what this does
134:35 - is well you guys will see in a second is
134:37 - it makes this button kind of mesh
134:39 - with this text input so they go they
134:42 - look at like in one line where it has
134:43 - the button
134:44 - and then it has the text input field
134:46 - right beside it but they're like
134:47 - combined together and it looks really
134:49 - nice you guys will see
134:50 - in a second how that looks now the last
134:52 - thing i'm going to do is just add a
134:54 - class to my actual button itself so i'm
134:56 - going to say class equals in this case
134:57 - btn
134:58 - and then btn hyphen uh what was it
135:02 - success i believe yes btn hyphen success
135:06 - and that might actually be it for all of
135:08 - my styling for this page
135:10 - so let's go ahead and have a look now
135:12 - and see how this looks if i run this
135:14 - there we go we get create page and now
135:16 - you can see what this pre-pen did
135:17 - it took this button and it put it on the
135:20 - left side of my text input and notice
135:22 - that
135:22 - we get this little these little things
135:24 - coming up this happens obviously because
135:26 - of
135:27 - uh some of the javascript and stuff we
135:30 - have please fill out this field you can
135:31 - see that's there if we go to create new
135:33 - uh we can see that pops up with there's
135:35 - a hover for it it's just all this nice
135:37 - stuff that bootstrap does for us
135:38 - some of it's done by django but most of
135:40 - it's done by bootstrap
135:41 - now let me go to view so now it's time
135:44 - to make this one look a little bit nicer
135:45 - so let's go ahead and do that and then
135:47 - we'll wrap up the video here
135:49 - so this will be a little bit more
135:52 - tedious
135:52 - but let's actually get rid of this kind
135:54 - of ul view
135:55 - and tags and stuff because i don't think
135:57 - we're going to need to use these
135:59 - yeah so let's get rid of these uls and
136:02 - let's get rid of these lis because right
136:04 - last time
136:05 - we're just using lis to make them show
136:06 - up in a nice kind of group but we'll use
136:08 - some uh some
136:09 - classes here from bootstrap to do that
136:11 - for us so we can
136:12 - uh tab this back so let me do that
136:15 - actually i probably should just left it
136:16 - cause i'm gonna have to put this inside
136:17 - a div
136:18 - but anyways inside of our for loop now
136:20 - i'm gonna create a div
136:21 - i'm gonna say this class is equal to and
136:24 - in this case
136:25 - input hyphen group and then
136:29 - we'll do mb hyphen three and then i'm
136:32 - going to add
136:33 - a prepend in here as well because i want
136:35 - to combine these
136:36 - check boxes with um what you call it the
136:39 - text which we'll add
136:41 - in a cool way in a second so i'm going
136:42 - to delete these text right now
136:44 - and what i'm going to do is add a
136:46 - prepend here so i'm going to say
136:48 - div and in this case class equals
136:52 - and in this case what was it it was
136:53 - something like prepend
136:55 - input group hyphen prepend
136:59 - input group hyphen prepend let's tab
137:01 - these in we will
137:02 - end this div and we will end the other
137:05 - div
137:05 - as well just make sure we don't forget
137:08 - like that
137:09 - so now what i'm going to do is outside
137:11 - of this this div but inside of the other
137:13 - one
137:14 - i'm going to add that text that i have
137:16 - back in so i need to actually get the
137:18 - item
137:18 - text i'm going to add this though in a
137:20 - weird way i'm going to add this in
137:22 - an input box so the way i'm going to do
137:24 - this i'm going to say input
137:25 - and in this case we'll say type equals
137:28 - text and then we'll simply just say
137:32 - value equals and in this case
137:36 - we'll say was it item
137:39 - dot text like that now we'll add a class
137:42 - to this as well we'll say
137:44 - class here equals and in this case
137:47 - form hyphen control
137:50 - and there we go now that's it for
137:54 - the kind of displaying the items let's
137:56 - actually have a sneak peek of
137:57 - how this looks and see if i made any
137:58 - mistakes or not um
138:00 - okay so it's not ideally what we wanted
138:03 - to look like but you can see we have
138:04 - these text box and we have the check
138:07 - buttons let me make sure i didn't make
138:08 - any
138:09 - critical errors here before i might have
138:11 - either misspelled something or forgot to
138:13 - add something ah so i've forgotten
138:15 - one class which was probably pretty
138:17 - important here
138:18 - so we're going to add another div and in
138:20 - this case we'll say div class
138:22 - and in this case equals input hyphen
138:25 - group hyphen text we'll end that div
138:29 - where is this div ending i believe right
138:32 - here
138:33 - and that should be good for that
138:36 - i don't want to say for sure but let's
138:38 - see there we go so
138:40 - that's better this is what i wanted now
138:42 - you can see we have the check buttons
138:43 - kind of showing up on a nice little
138:44 - color here
138:45 - and then all of our items show up in
138:46 - text boxes and i mean you can actually
138:48 - edit the items
138:50 - but when you save them it's not gonna
138:51 - it'll just go back to whatever you had
138:52 - but i just wanted to do them in this way
138:54 - because it looks really nice
138:56 - and now what's left to do is just modify
138:57 - these buttons here so let's go ahead and
138:59 - do that
139:00 - so what i'll start by doing is adding a
139:02 - class or a div here
139:04 - so i say div class equals in this case
139:08 - we'll say input hyphen group
139:11 - in this case mb hyphen three i will tab
139:15 - all of these i guess except for
139:18 - let's see which ones i actually want i'm
139:20 - going to put the save button
139:21 - i think on a different side so let me
139:23 - put this save button down here
139:25 - and i'll tab these two in these add
139:28 - items and i'm actually going to do the
139:29 - same thing that i did with
139:31 - the creating a new to-do list in terms
139:32 - of that pre-pen thing with these items
139:34 - so to do that i'm going to add another
139:36 - div in here and in this case i'll say
139:37 - div
139:38 - and then class equals
139:41 - in this case input group hyphen prepend
139:44 - you guys can tell i like this
139:45 - this pre-pend thing that you can do here
139:48 - uh prepend
139:49 - we will tab these in and then we will
139:52 - close these div so slash
139:53 - div and slash div but i believe that i
139:57 - have to put this
139:58 - input actually right
140:02 - here and that i think is correct there
140:04 - we go sweet
140:05 - so now all i need to do is add some
140:07 - classes to the button so i'll add the
140:09 - same classes that i used on the other
140:10 - one so i'll just say class
140:12 - equals in this case btn btn hyphen
140:15 - success and i'll just copy this and
140:17 - we'll use this class down here as well
140:19 - just to be consistent
140:21 - so anyways that should be it for styling
140:23 - let's have a look now
140:24 - if i refresh uh continue there we go so
140:28 - now we get add item and we get save and
140:29 - things are just looking a lot nicer on
140:32 - our website
140:32 - obviously there's a lot of work to be
140:34 - done but take in i did this
140:36 - in 13 minutes in a video or however long
140:39 - this video is
140:39 - and i've been kind of explaining things
140:41 - as i go but i'll quickly show you that
140:43 - if you want to look at the different
140:45 - components and see all this different
140:47 - kind of stuff
140:47 - just go to the bootstrap documentation
140:49 - this is the link i'll put in the
140:50 - description
140:51 - go to components here and for example if
140:53 - you want to look at a nav bar and how
140:55 - this works
140:56 - that it'll explain to you how to create
140:58 - one and you can just really copy kind of
141:00 - however
141:01 - whatever you want from here if i go to
141:03 - for example buttons
141:04 - you can see all the different kind of
141:06 - buttons and how to make them
141:08 - and it just tells you what classes to
141:10 - use you use those glasses and then it
141:12 - looks nice
141:13 - on your web page so anyways that has
141:14 - been it for this tutorial if you guys
141:16 - enjoyed please make sure you leave a
141:17 - like and subscribe and i will see you
141:18 - again in the next one so in today's
141:20 - video what we're going to be doing is
141:21 - talking about user registration and how
141:24 - to create an account on django
141:26 - now fortunately for us django actually
141:28 - does quite a bit of the
141:29 - hard work at least for us so all we have
141:32 - to do really is format
141:33 - a form and then just add a few things to
141:35 - our project
141:36 - it is a bit of a tedious process but
141:38 - it's much easier because
141:40 - of django and another reason why a lot
141:41 - of people love django because it does
141:43 - stuff like this for you
141:44 - you can see right now i have open uh the
141:47 - thing we're gonna be creating
141:48 - now this is just in a copy of the
141:50 - project that i'm working on and i just
141:52 - made this to make sure it was gonna work
141:54 - uh create account page and we're gonna
141:55 - be making this to start we'll be adding
141:57 - an email field to this as well or like
141:59 - an
142:00 - ad name or something like that field to
142:01 - this as well and
142:03 - yeah that's kind of all we're gonna be
142:04 - doing today in the next video we'll talk
142:06 - about how to log in and how to log out
142:08 - and then how to restrict access to
142:10 - certain parts of the website
142:12 - to certain users so for example the
142:14 - admin user can access the admin
142:16 - dashboard and they can see
142:17 - all of the different databases and all
142:19 - that whereas a regular user won't be
142:21 - able to do that
142:22 - so let's get started now the first step
142:25 - and what we're going to have to do to do
142:27 - this actually is create a new
142:28 - application
142:29 - so what i want to do is right now we
142:31 - already have an application
142:32 - called main but i want to create an
142:34 - application now called like users or
142:36 - called register or something like that
142:38 - that is going to handle the login logout
142:41 - and registration for
142:43 - our website now this is the reason i'm
142:46 - doing this is also so that you can just
142:47 - copy this application
142:49 - and put it into any other django project
142:51 - and because it just kind of makes sense
142:53 - to separate things out
142:54 - so to do that we're going to go to our
142:56 - command line and we're going to create a
142:57 - new app
142:58 - using that python manage.pi file so
143:00 - we're going to say python manage.pi
143:03 - and we're going to say start app and in
143:04 - this case i'll just call mine register
143:07 - like this you can name yours whatever
143:09 - you want but i'm just going to say
143:10 - register
143:12 - so there we go it has successfully
143:14 - executed and now if we go to our
143:16 - directory
143:16 - we can see that we have register popping
143:19 - up here
143:20 - now what i'm going to do to start is i'm
143:22 - just going to uh what do you call it
143:24 - modify some urls so we're going to add a
143:26 - page that we'll be able to use to
143:28 - register because we need a register page
143:31 - so let's open up subline text here um
143:33 - let me just open up a new window
143:36 - why is this not working uh one second
143:39 - guys
143:40 - file uh open folder
143:43 - here we are okay so django
143:46 - right there okay so there we go now
143:48 - we're in django and what i'm going to do
143:49 - is i'm going to modify the urls from
143:52 - within my main file here
143:53 - so that we're going to link to a view
143:55 - that we're going to create inside of our
143:56 - new application called register
143:58 - so if i go to urls here you can see that
144:00 - right now these are our main urls that
144:02 - we have
144:03 - inside of our main application but what
144:05 - i want to do is go to the urls inside of
144:07 - my site so let's do that here
144:09 - and what i want to do is just add a new
144:11 - path that's going to direct to a new
144:13 - page
144:14 - and in this case i'm just going to call
144:15 - this one slash
144:17 - uh create i guess or actually not create
144:20 - let's do
144:21 - uh register so like registering for a
144:23 - new account we'll call it that
144:25 - and what i'm going to do is i'm going to
144:28 - link this directly to the function
144:30 - that's going to render this
144:31 - from our register application so
144:35 - what i'm going to do inside of register
144:36 - now and i'll come back to this in a
144:37 - second is inside of views.pi
144:39 - i'm simply going to create a function in
144:41 - this case i'm just going to say define
144:43 - we'll call it register as well it'll
144:45 - take response
144:47 - and then in here all we'll do is just
144:49 - return render
144:51 - and then we will render something in
144:52 - here in a second but we'll just fill
144:54 - that in for right now
144:55 - so we go back to urls what i'm going to
144:57 - do now
144:58 - is i'm going to import this file
145:01 - in this function so that we can use it
145:03 - from in here to link directly to that
145:06 - view so to do that i'm going to say from
145:08 - and in this case we'll do
145:09 - register because that's the name of our
145:11 - folder uh
145:12 - register import in this case views
145:16 - as and i'm just gonna say v now the
145:18 - reason i'm saying views as v
145:20 - is because we could possibly be
145:22 - importing some more views into here and
145:24 - all of them are going to be called views
145:26 - right
145:26 - like the views for this application is
145:28 - the same as the name of the views for
145:30 - the main application so just by doing it
145:31 - as
145:32 - something that way we're going to
145:34 - differentiate them so we don't
145:35 - run into any mistakes essentially so now
145:37 - i'm going to say
145:38 - what we'll go to is we'll go to v dot in
145:41 - this case
145:42 - um actually from register import views
145:45 - we'll go to v
145:46 - dot register like that and we'll say
145:49 - name
145:49 - equals in this case register now add
145:52 - that comma
145:54 - and we should be good in terms of
145:56 - linking to that
145:57 - okay so now that we've done that what i
145:59 - want to do first of all is create an
146:01 - actual page that will be our register
146:03 - page
146:04 - which involves creating a template for
146:06 - that so
146:07 - i need to do the same process i did to
146:09 - create templates within my
146:10 - main application and that is starting
146:12 - off by creating a new folder inside of
146:14 - our register application
146:15 - and in this case i'm just going to call
146:17 - it templates uh
146:19 - templates like that and then inside of
146:22 - templates i'm going to create another
146:23 - new folder
146:24 - and if we remember we call this register
146:27 - now inside of register i can create my
146:30 - file which will be my
146:31 - register.html file which will display
146:34 - the form that we're going to see
146:36 - so i'm just going to start by extending
146:38 - my base template and the way that we do
146:39 - this now because this is in
146:42 - what he called a different directory is
146:43 - the exact same as before we just have to
146:45 - specify where we're getting it from so
146:46 - we're going to say main
146:48 - slash based.html and then what we're
146:50 - going to do in here is we'll do our
146:52 - blocks so we'll have the block title and
146:54 - we'll have the
146:55 - block content so block
146:58 - title and in this case we'll just say
147:01 - create
147:02 - an account or something like that and
147:04 - then we can end that block
147:08 - and block and then now we'll do our
147:10 - block content
147:12 - and then we will keep going from there
147:15 - so say block
147:16 - content and then here we'll say
147:20 - percent percent and block
147:23 - now we'll save this as register.html
147:27 - inside that template file
147:29 - and there we go we have now created the
147:30 - file that we can render and display on
147:32 - the screen
147:33 - now while we're in here i'm just going
147:35 - to fill this in and populate it
147:36 - and all i'm going to do essentially to
147:39 - do this
147:39 - is i'll use a little bit of style a
147:42 - little bit of bootstrap styling and then
147:44 - just display the form
147:45 - inside of here using the way that we can
147:47 - just display
147:48 - django forms and then you guys will see
147:50 - how it works in a second anyways
147:51 - so let's start by creating some form
147:53 - tags we'll say form in this case we're
147:54 - gonna say method
147:56 - equals post because this is going to be
147:58 - the form to create a new account so
148:00 - obviously it's going to have to be post
148:01 - method
148:01 - because we need to make sure that
148:02 - information is secure when we're sending
148:04 - it to the back end
148:05 - say 4 method equals post i'm going to
148:07 - say class is equal to in this case
148:09 - form hyphen group and then we'll end
148:12 - that form tag
148:13 - and in here we will simply do um what do
148:16 - you call its
148:18 - form like this now the only other thing
148:20 - we need to add is a button
148:22 - and this button will be the submit
148:23 - button because by default django doesn't
148:25 - generate
148:26 - that for us so what we can do to do this
148:28 - is just say button
148:30 - we can say type equals if i didn't hit
148:33 - insert there we do type
148:34 - equals submit submit
148:38 - like that and what else do we even need
148:40 - for this we say class
148:42 - equals in this case btn and then btn
148:44 - hyphen
148:45 - success i believe that's the class name
148:48 - and then we can end that button tag
148:49 - and inside here we'll just say um what
148:52 - do you call it join or
148:54 - like register like that
148:57 - and that's what we're gonna do for now
148:58 - we'll make this look a little bit better
148:59 - after but that's all we really need for
149:01 - right now
149:02 - okay so now that we've done that we've
149:04 - said well we're gonna pass a form to
149:05 - this view
149:06 - so that means from inside here we're
149:08 - gonna have to be passing a form
149:10 - now what's really nice is django
149:12 - actually automates the form
149:14 - uh for what you call it logging in and
149:16 - creating a new account it makes one for
149:18 - you that you can just use
149:20 - so what i'm gonna do is simply import
149:22 - the built-in django form and then we're
149:24 - just going to use it inside of here to
149:26 - pass to
149:26 - our register template so the way that we
149:29 - do this is we have to
149:30 - i'm actually just going to copy these in
149:32 - because they're a bit long and i don't
149:33 - want to mess up the uh
149:34 - the spelling we're gonna say from
149:36 - django.contrib
149:38 - dot auth import login import
149:40 - authenticate
149:41 - and then we're also gonna import uh from
149:44 - django.contrib.auth.forms
149:45 - we're gonna import user creation form
149:47 - now this user creation form is what
149:49 - we're going to use
149:50 - to create a new user and this a
149:53 - pre-built form just like when we went
149:55 - into our application and we created our
149:56 - own form
149:57 - using the django built-in forms this one
149:59 - just already made for us
150:00 - and we can go ahead and start using it
150:02 - right away so to use this
150:04 - i'm going to say form equals and in this
150:06 - case user creation form
150:08 - and then when i render my template i'll
150:10 - pass response
150:11 - we'll do in this case register and in
150:14 - this case slash
150:16 - register.html and for the context here
150:18 - we'll pass in
150:19 - form colon form so assuming i spelled
150:23 - everything correctly
150:25 - now if we actually run our server and go
150:27 - to this we should see a form
150:29 - showing up uh actually one step
150:32 - for that that i should not have
150:34 - forgotten but i almost did we need to
150:36 - add our application
150:37 - in this case which is register into our
150:39 - settings.pi file
150:41 - because if you remember when we
150:43 - initially created a new application
150:45 - you can see that we added this
150:47 - main.apps.mainconfig
150:48 - well we need to repeat this process now
150:49 - with our new application which is
150:51 - register so let's just copy this
150:53 - and paste it down here and instead of
150:55 - having main we're going to change this
150:56 - to just be register and here register as
150:59 - well remember that capital at the
151:01 - beginning
151:02 - okay so now that we've done that
151:04 - assuming i didn't make any mistakes if
151:06 - we run
151:06 - the server we should be all good at we
151:09 - should be able to see all this stuff
151:10 - so let's do this now we'll say python
151:14 - manage dot pi
151:17 - and in this case run server okay no
151:21 - issues so let's grab that
151:23 - let's go actually i'm just going to
151:24 - refresh this and it should pop up
151:26 - and now you can see that we are actually
151:27 - getting this beautiful register window
151:30 - now i'm saying that sarcastically
151:32 - because obviously this does not look
151:33 - amazing and we're going to work on
151:35 - styling this and making it look a little
151:36 - bit better in a second but you can see
151:38 - that we actually have a
151:40 - somewhat functional user registration
151:42 - window already created for us and you
151:44 - can see it says required 150 characters
151:46 - uh this is the thing that you need for
151:47 - passwords and then it asks you for
151:49 - username
151:50 - password and all this stuff and then
151:52 - there is a register button that we
151:53 - created
151:54 - so that's awesome and that works well
151:57 - now all we
151:58 - the thing is though if we actually type
152:00 - anything in here so for example i say
152:02 - tim and make my password one two it says
152:04 - oh your password cannot be
152:05 - entirely new numeric it must be at least
152:07 - eight characters okay let's just type
152:10 - let's save a bunch of letters for
152:12 - example and if i type a bunch of other
152:14 - letters and hit register
152:17 - we run into an error that crsf csrf
152:20 - token is missing so i'll have to add
152:21 - that
152:22 - but my point here was going to be that
152:23 - this register button doesn't actually do
152:25 - anything
152:26 - just like when we created a form before
152:27 - we actually need to add the
152:28 - functionality to save the form and
152:30 - create the new user
152:31 - which is what we will do now after we
152:33 - add that token that we need so let's add
152:35 - that token first of all
152:37 - inside of here cs csrf
152:41 - underscore token and now let's go into
152:43 - view stop pi
152:44 - and let's check how we can validate this
152:47 - form and how we can actually save things
152:49 - using it first of all before we start
152:50 - styling it too much so we're going to do
152:52 - is what we've done before so we're going
152:54 - to say if response dot method
152:56 - equals equals and in this case post then
152:58 - that means that we are going to be
153:00 - creating a new user
153:02 - so what we'll do in here is we'll start
153:03 - by saying actually we'll take this
153:06 - form we'll put it up here and inside of
153:09 - here we'll populate this with response
153:12 - dot post now it will say say if
153:15 - form dot is and i believe it's
153:18 - underscore valid
153:19 - what we can do to save the form which is
153:22 - very easy
153:22 - is literally just say form dot save and
153:25 - what this is going to do is actually
153:27 - save our new user in the users database
153:30 - for us and i'll show you how this works
153:32 - in just a second
153:33 - but let's add this else here so that we
153:35 - create a blank form if
153:36 - uh for some reason we're not getting
153:38 - that post request right so this is all
153:40 - we need to do
153:41 - actually to handle and make this form
153:43 - work obviously we're going to be doing a
153:44 - lot more here
153:45 - before we're finished but this will
153:47 - actually allow us to have a valid form
153:50 - so let us try to get this working now so
153:53 - let me go back here
153:54 - and let me refresh the page and now
153:56 - let's try to create an account
153:58 - and let's say let's make an account tech
154:00 - with tim
154:01 - uh we can just make the password check
154:03 - with tim123
154:06 - okay and let's hit register all right
154:10 - um what was the issue the password the
154:12 - two password fields did not match
154:13 - okay so you can see actually as well
154:15 - maybe that was good that i messed this
154:16 - up
154:17 - uh it even gives you messages when
154:19 - things are wrong with the form so it
154:21 - says the two password fields didn't
154:22 - match so that obviously means i spelled
154:24 - something wrong so let's try that again
154:28 - and hit register the password is too
154:31 - similar to the username oh man see
154:33 - this is this is why we use django forms
154:36 - because they do all this wonderful
154:37 - stuff for us okay let's try this now tim
154:40 - with
154:41 - tech how about that uh tim with
154:44 - tech123 tim with tech123
154:48 - register the password is too similar to
154:50 - the username okay i'm just going to use
154:52 - one of my own passwords and hopefully it
154:53 - doesn't show it anywhere on the screen
154:56 - okay so now we've registered and i
154:59 - actually create an account
155:00 - um called tech with tim and i've i've
155:02 - done that i know it doesn't look like
155:04 - anything happened
155:05 - but that's what we're gonna add as well
155:06 - next when we create an account we'll
155:08 - redirect to a new page but let's try
155:10 - going to the admin dashboard
155:12 - here quickly and see if we can see this
155:13 - new user in our database
155:16 - so let me sign in here and if i go to
155:18 - users
155:19 - you can see that now we actually have
155:21 - two users we have tim which is the admin
155:23 - user which is me
155:24 - and we have tech with tim which is the
155:25 - new user that was just created
155:27 - so if i go into tech with tim that's
155:29 - like the password hashing and stuff
155:31 - and then you can see that it has the
155:32 - name and that's all that we have for
155:35 - right now
155:36 - so the next things that i want to add to
155:38 - this now is how we can get like an email
155:40 - or how we can get a first name and a
155:41 - last name for example
155:42 - and how to redirect to a new page once
155:45 - we've
155:46 - created an account so once we've created
155:49 - an account what i'd like to do is
155:50 - redirect to a new page
155:51 - so to do that what i'm going to do is
155:53 - from django.shortcuts import render
155:55 - import redirect
155:57 - and all we'll do in here is just instead
156:00 - of returning
156:01 - this response we'll simply just return a
156:03 - redirect
156:04 - so we'll return redirect and in this
156:06 - case where will we go
156:08 - we will just go to slash home so now if
156:10 - i
156:11 - create a new user we would go to the
156:12 - home page uh and the user would be
156:15 - created so that's great for that but
156:18 - what i want to do now
156:19 - is have the ability to add a new field
156:22 - to our form so for right now all we had
156:25 - was those three fields but what if when
156:27 - you create a new user you want to ask a
156:28 - ton of different questions like a phone
156:29 - number you want to get all that kind of
156:30 - stuff
156:31 - how can we do that well to do that what
156:34 - we need to do is inside of our
156:35 - application here i believe we need to
156:38 - create a new file called
156:40 - forms.pi so what we're going to do is
156:42 - inside of register we're going to do
156:44 - new file we're going to save this as
156:47 - forms.pi
156:48 - and we're just going to modify our form
156:50 - slightly so
156:52 - save that as is there an issue this
156:54 - reason why this isn't working
156:56 - forms dot p y um hit enter
157:00 - okay i'm very confused right now why
157:03 - this is not working
157:06 - forms okay uh
157:09 - anyways let's try this one more time
157:13 - okay so for some reason i was just
157:14 - messing up but anyways forms.pi
157:16 - what we're going to do for this now is
157:18 - actually import these same things that
157:20 - we had before so this login authenticate
157:22 - user creation form
157:23 - so let's copy those and paste those in
157:24 - here and what i'm going to do now is
157:26 - just create a class
157:28 - that is that inherits from user creation
157:30 - form and add a few new
157:32 - fields to it so to do that i'm going to
157:33 - say class and in this case i'll just do
157:36 - register form and we'll inherit from
157:40 - user creation form
157:41 - and that means we're going to get all of
157:43 - the same properties as user creation
157:44 - form so we're going to have that nice
157:46 - layout as well but instead now we'll add
157:48 - a few new attributes so for example if i
157:50 - wanted to add an
157:51 - email here what i could do is i could
157:53 - say email equals and in this case
157:55 - uh models which i need to import as well
158:00 - so let me import this we're going to say
158:02 - from
158:02 - [Music]
158:03 - django dot models i believe
158:07 - import model it's either models or
158:09 - models any
158:10 - anyways so let's do that email equals
158:12 - models dot and in this case we'll say
158:14 - email field like that
158:17 - and this might be lowercase i'm not sure
158:20 - okay so we'll do email field there and
158:23 - now what we're gonna do is add something
158:24 - that we haven't done before
158:26 - which will allow us to change some of
158:28 - the parent properties of this class
158:31 - so i'm going to create a new class
158:32 - inside of this class which is called
158:35 - meta now it needs to be named this and
158:37 - what i'm going to do in here
158:38 - is define the fact that this register
158:41 - form is
158:42 - going to save into the user's database
158:45 - so you know how when we did a user
158:47 - creation form.save
158:49 - it save the form well we need to say
158:51 - that when we're using this
158:52 - form we need to save in the user
158:54 - database so to do that
158:56 - i need to import a few other things so
158:59 - one second here
159:00 - what i'm going to do is just go to i'm
159:02 - going to say from
159:04 - django dot contrib.off
159:09 - dot models and in this case import user
159:12 - and actually i need to change this
159:14 - django.models thing up here because
159:16 - this is incorrect i'm going to say from
159:18 - django import
159:20 - forms and instead of models this is
159:21 - going to be forms my bad on that
159:23 - so we'll say email use forms dot email
159:25 - field
159:26 - and then inside of this meta class what
159:28 - i'm going to do is say model
159:29 - is equal to in this case user so i'm
159:32 - defining that we are going to
159:34 - change the user model whenever we save
159:36 - something in this
159:37 - this form so now i'm also going to
159:39 - define one more property which is going
159:41 - to be fields
159:42 - now what this fields property is going
159:43 - to do is pretty much
159:45 - lay out where i want my fields to be so
159:48 - typically when you sign up you ask to do
159:51 - a username
159:52 - and email a password and the other
159:53 - password well right now if i were to
159:55 - actually use this form
159:57 - this email field wouldn't be showing up
159:59 - and that's because
160:00 - inside of the parent class it doesn't
160:02 - know that we have this email field
160:04 - so i have to define that so to do this
160:06 - what i do is i simply type the name of
160:08 - the fields
160:09 - inside of this list in the order that i
160:11 - want them to appear in my form
160:13 - so if i wanted email to show up first i
160:15 - would type email
160:16 - if i wanted a username to type up first
160:18 - i would type username so in this case
160:20 - let's do username
160:22 - email and then we'll do password1
160:26 - and password2 now these three field
160:29 - names username password1 and password2
160:31 - are already built into the
160:32 - form so this user creation form that's
160:34 - why i'm using them
160:36 - if we were to per se create another
160:39 - field here maybe we
160:40 - created a field that was like your
160:41 - gender or something like that then we
160:43 - would have to put that field in here as
160:45 - well
160:45 - if we wanted to show up on the form and
160:47 - this will specify
160:48 - in what order we want things to show up
160:50 - so that's how you can change that as
160:51 - well
160:52 - so now that we've done that we need to
160:55 - now start using this register form
160:57 - rather than using this user creation
160:59 - form so
161:00 - if i go in my views.pi file now i can
161:02 - actually remove this
161:04 - what i'm going to say is from and in
161:06 - this case we can just import it directly
161:08 - from forms so we'll say from
161:10 - forms import and in this case we'll do
161:14 - iso is register register form like that
161:18 - and now rather than using user creation
161:20 - form we'll use register form
161:24 - like this and this should be working for
161:26 - us assuming i did not make any mistakes
161:29 - so register form so now let's try to
161:32 - reload the page and see what we're
161:33 - getting
161:34 - on um what do you call it let me make
161:36 - sure that this actually
161:37 - is running quickly is it seeing that we
161:39 - changed anything
161:40 - uh one second guys uh
161:44 - no module named forms interesting i have
161:48 - forms.pi right here let's try from dot
161:50 - forms
161:51 - and see if this works there we go so i
161:54 - just need to add that dot before form
161:56 - before forms okay so let's go now back
161:59 - to
162:00 - uh what was it register like this and
162:03 - see what we get now
162:04 - okay so now we have username email
162:07 - password and password confirmation
162:09 - now i know this is still very messy but
162:11 - we have successfully added an
162:13 - email field so now it's time to actually
162:16 - make this look a little bit nicer using
162:17 - a little bit of bootstrap
162:18 - and what's known as crispy forms so
162:21 - crispy forms is a really popular
162:23 - form kind of framework used in django
162:26 - and you just have to install it using
162:27 - pip so what i'm going to do is
162:29 - simply go into my command line here and
162:31 - do pip install and we're going to say
162:33 - django
162:34 - hyphen crispy hyphen forms like that
162:38 - so not equal sign that needs to be a
162:40 - hyphen
162:42 - and what this does is it has some
162:44 - automatic styling for
162:45 - our forms it's really easy to use so
162:48 - that's what this module is essentially
162:49 - so we're just going to pip
162:50 - install that same way that we installed
162:52 - django and just make sure that it's in
162:54 - your virtual environment now you can see
162:55 - i already have it installed
162:56 - but once you have it installed there's a
162:59 - few steps we have
163:00 - to actually use this so to use crispy
163:03 - forms what we need to do first of all is
163:05 - go into our
163:06 - my site settings file so we need to find
163:09 - my site my site and go to settings.pi
163:12 - and we have to add crispy forms into
163:14 - this settings.pi file
163:16 - so to do this what we're going to do is
163:17 - we're going to say crispy
163:20 - i think it's just crispy underscore
163:23 - forms we
163:23 - i'm pretty sure that's all we have to do
163:25 - but i will double check here
163:27 - because i'm likely incorrect um
163:30 - let's see here nope that's actually
163:32 - correct so crispy underscore forms
163:34 - and what we also have to do is go down
163:36 - to the bottom of our settings.pi file
163:38 - and we have to define what um css
163:41 - layout or i don't know framework that
163:44 - our crispy forms is actually going to
163:45 - use
163:46 - so to do this i'm going to say crispy
163:48 - and in this case
163:49 - underscore template
163:52 - underscore pack and in this case i'm
163:55 - going to say
163:56 - boot strap 4. now if you want your
163:59 - crispy forms to use a different kind
164:01 - of framework css framework you can just
164:04 - look up how to do that online it's very
164:06 - simple but you just change this the
164:07 - reason i'm setting this to bootstrap 4
164:09 - is because by default it uses bootstrap
164:11 - 2
164:12 - and on our website we're already using
164:13 - bootstrap for so we might as well just
164:15 - use it now
164:16 - okay so now that we've done that we're
164:18 - actually have to start using these
164:20 - crispy forms that's what they're called
164:22 - so since we've had them uh imported into
164:24 - the project
164:25 - and we have everything set up all we
164:27 - have to do to use our crispy forms
164:29 - is at the beginning of our what do you
164:31 - call it file here it actually doesn't
164:32 - have to be at the beginning but it just
164:33 - has to be before where we use it
164:35 - what we're going to do is we're going to
164:37 - use our crispy forms
164:38 - so i believe to do this we have to say
164:42 - include something i have to have a look
164:46 - because i forget how to do it ah it's
164:47 - not included it's load
164:49 - so load crispy uh underscore
164:53 - forms like this and in this case
164:56 - underscore tags now all we're gonna do
164:59 - to use this crispy form
165:01 - very straightforward is we're just going
165:02 - to put this little up uh
165:04 - what is it straight line here bar i
165:06 - don't know what it's actually called if
165:07 - someone knows
165:08 - comment down below and beside it we're
165:10 - just going to do crispy like that
165:12 - now what this does is it's actually a
165:14 - filter
165:15 - and i'm not really going to talk about
165:17 - exactly what filters are but if you know
165:19 - phil what a filter is then that's what
165:20 - this is doing it's just going to modify
165:22 - our form to make it look a little bit
165:23 - nicer
165:24 - and add a bit of styling to it so let's
165:27 - try this now
165:28 - and see if everything is actually
165:29 - working so let me run the server
165:31 - see if we get any issues or not no we
165:32 - don't so now let's refresh this and
165:34 - let's see the drastic change that is
165:36 - about to happen
165:38 - there we go how much nicer does that
165:40 - look than our other form right
165:42 - we have username email password and
165:44 - password confirmation that is just much
165:46 - better and you can see if i go register
165:48 - it's still doing this
165:49 - so that is essentially how we create a
165:52 - register form for our users to create
165:55 - new users
165:56 - now right now it'd probably be a good
165:57 - idea to add like a bar on the side to do
165:59 - register
166:00 - and all whatnot uh but for now we're
166:03 - just going to leave it at this
166:04 - in the next video what we'll do is talk
166:05 - about logging in using
166:07 - these users and all that kind of stuff
166:09 - we might add a little bit more to this
166:11 - register page but for now i think that's
166:14 - fine
166:14 - and with that being said that's going to
166:16 - be the video i hope you guys enjoyed if
166:18 - you did please make sure you leave a
166:19 - like and subscribe and i'll see you
166:20 - again in another one
166:21 - so in today's video what we'll be doing
166:23 - is talking about logging in and
166:24 - authenticating users
166:26 - i will also show you how we can only
166:28 - restrict uh
166:29 - pages so that users that are logged in
166:31 - can see them so for example we maybe
166:33 - don't want a user that's not logged in
166:35 - to be able to create a new to-do list or
166:37 - because that probably won't work so how
166:39 - we can do stuff like that
166:41 - and then in the next video i'm going to
166:43 - be doing is talking about creating a
166:44 - custom
166:45 - user model which means that we can add
166:47 - things like
166:48 - all of our to-do lists to a specific
166:50 - user so that each user
166:52 - has their own to-do list and when they
166:53 - go on the website they're going to see
166:55 - different to-do lists not just
166:56 - all the ones that have been created by
166:58 - any user that's we'll be doing the next
166:59 - one but this one will just be logging in
167:01 - validating and logging out as well so
167:04 - what we actually need to do
167:05 - first of all when we're going to be
167:06 - logging in and logging out is we need to
167:08 - create those login and log out pages
167:11 - now luckily for us django actually does
167:13 - a lot of this work for us
167:15 - they have a built-in application if i
167:17 - show you in settings.pi here
167:19 - that is django.contrib.off and what this
167:23 - does is it authenticates users so we've
167:26 - done all the hard work of
167:27 - creating new users but now since we've
167:30 - done that django can actually
167:31 - authenticate those for us so we can use
167:34 - some of the built-in things in this
167:35 - application to do that for us
167:37 - so the first step in what we want to do
167:39 - is we actually want to use
167:41 - some built-in pages that django's made
167:43 - so they actually have made
167:44 - log out login um what is it change
167:47 - password like a ton of different pages
167:49 - like that
167:50 - that we can access uh simply by linking
167:53 - to them in our url patterns from our
167:55 - main url's file inside of my site
167:57 - so what i'm gonna do just like i've done
167:58 - to get into my other applications
168:00 - i'm just gonna say path in this case
168:02 - include
168:03 - but in here i'm going to say django dot
168:07 - contrib dot auth dot
168:10 - urls and i believe that's correct but i
168:13 - will check that
168:14 - quickly to make sure i didn't mess that
168:15 - up uh yes so that's correct so what this
168:17 - will do now
168:18 - is it'll go to this application it'll
168:21 - look in the url's file there
168:23 - and we'll see if we have a valid url so
168:25 - if we have login log out
168:26 - change password create password a bunch
168:29 - of those
168:29 - different pages right now we're just
168:30 - going to work with login and log out but
168:32 - you know what i mean so that's what
168:33 - that'll do for us
168:34 - but the thing is these uh views
168:38 - if we try to go to them now they
168:40 - actually don't exist
168:41 - so what those templates attempt to do or
168:43 - what the views attempt to do is render a
168:45 - template
168:46 - called login.html logout.html
168:50 - from a specific folder that we need to
168:52 - create so what we actually need to do
168:54 - and
168:54 - it doesn't really matter where we do
168:56 - this but i'm going to do it from inside
168:57 - of my register application so
168:59 - inside of templates i'm going to create
169:01 - a new folder and in here i'm going to
169:03 - call this
169:04 - registration like that now it's
169:07 - important you spell registration
169:08 - correctly like i just misspelt it
169:10 - registration because it's going to look
169:13 - for this specific folder
169:14 - so we're going to create a registration
169:16 - folder inside one of our templates
169:17 - folder and then in here
169:19 - we're going to create a new html file
169:22 - and we're going to call this
169:24 - login.html now this is gonna be
169:26 - where django will look uh and what
169:29 - template it will use to render our login
169:31 - form
169:32 - so what we'll do is we'll simply just do
169:34 - what we've done before so we'll start by
169:35 - extends
169:37 - um and then in this case main slash
169:41 - base.html and then we'll add our blocks
169:43 - for our title and for our content so
169:45 - let's do that now
169:46 - uh block title
169:50 - and then we're gonna say end block
169:54 - like that and then i guess we can do the
169:56 - title we'll just do a log
169:58 - in here or something like that and then
170:01 - you know
170:01 - i can just copy this and we'll just
170:03 - change the name to content
170:07 - and now we're just going to create a
170:08 - nice form in here that will display our
170:10 - form just like we've done
170:11 - probably four or five times by now so
170:13 - we'll say form we're going to say
170:15 - method equals in this case post and then
170:17 - we're going to say class
170:19 - equals in this case form hyphen group
170:22 - now we can end our form like that
170:25 - and then inside here we'll add our csf
170:28 - our token or whatever that
170:29 - is csrf underscore token
170:33 - and we will simply display our form now
170:36 - i want to add this to be a crispy form
170:38 - so it looks a bit nicer so to do that
170:40 - we'll have to load in our crispy tags
170:42 - so we'll say load and in this case
170:45 - crispy underscore forms
170:47 - underscore tags i believe that's the
170:50 - correct way to do that
170:51 - if you don't have crispy forms installed
170:53 - go back and watch the last video because
170:54 - we did that there
170:56 - and then what we'll do is we'll add a
170:57 - filter here and we'll say as the filter
170:59 - will just say
171:00 - crispy and this will display a nice form
171:04 - for us now we also need to add a button
171:06 - into our form because that doesn't come
171:08 - with it
171:09 - so to do that we'll say button we'll say
171:11 - type equals in this case
171:13 - submit and then i guess we'll say
171:16 - class equals btn vtn hyphen
171:20 - success and and our button
171:24 - and just say login as the name
171:27 - sweet so that should be it for this
171:29 - login form now we actually may want to
171:31 - add one more thing because sometimes you
171:32 - go to a login page that says well
171:34 - rather than logging in like create an
171:36 - account if you don't have one so maybe
171:37 - we'll add that in here quickly just
171:39 - make things look a bit nicer so we'll
171:41 - just add i guess some p
171:43 - tags and i'll just say slash p and i'm
171:45 - gonna say
171:47 - don't have an account
171:50 - question mark create one and then i'll
171:54 - add
171:54 - an a tag which will just link to our
171:57 - create so i believe it was slash
172:00 - register we did was it slash register
172:02 - create that was that url
172:04 - let's check inside of where is it here
172:08 - uh register register is the name awesome
172:10 - so let's go back here register and
172:12 - we'll say here and then slashing
172:15 - sweet so that should actually be it for
172:17 - the login page and
172:19 - now we can actually go ahead and run our
172:21 - server which i already have running and
172:23 - we will see that the login page is
172:24 - actually working so this is the logout
172:26 - page
172:26 - let's go to log in and see what we get
172:29 - slash login um
172:31 - oh well if you spell extends incorrectly
172:36 - extends there you go then it won't work
172:38 - now let's try it
172:40 - if i refresh this here there we go so
172:42 - now you can see that we actually have a
172:44 - nice
172:44 - login page and this took us all of what
172:47 - uh
172:47 - six minutes to create so it's pretty
172:49 - straightforward and what will actually
172:50 - happen here
172:51 - is this will properly do our logins
172:54 - and validate users for us so let's try
172:56 - to log in this is a valid login right
172:58 - now password1234
173:00 - when i click log in you can see that
173:02 - it's actually
173:03 - directing me back to the homepage now
173:04 - the reason that this is happening is
173:06 - because
173:06 - i actually have something added down
173:09 - here in my settings.pi file that i
173:10 - forgot to like re-save
173:12 - that was telling us to redirect that
173:14 - page but let me just
173:16 - refresh this let me go back to login and
173:18 - do this again because i want to show you
173:19 - what happens if you don't have that
173:22 - you can see that it brings us to this
173:24 - note page not found
173:26 - which is probably what you guys are
173:27 - getting when you're running this now
173:28 - that's because what happens is when we
173:30 - try to log
173:31 - in it's going to automatically attempt
173:33 - to redirect us to a page called accounts
173:36 - profile now we obviously haven't created
173:38 - a page or
173:39 - a url for accounts profile so what we
173:41 - need to do is we need to
173:43 - modify where we're going to go once we
173:45 - log in now the reason was happening for
173:47 - me is because i
173:48 - had done that previously and forgot to
173:50 - save removing it
173:51 - but let's go inside our settings.pi file
173:53 - inside of our my site
173:55 - and let's add a redirect to let's say
173:58 - the home page whenever we log in
174:00 - so to do this i'm going to say in this
174:02 - case log
174:03 - in underscore redirect underscore
174:06 - url equals and in this case you can pick
174:09 - wherever you'd like to go but i'm just
174:11 - going to do slash
174:12 - standing for obviously the home page so
174:15 - let's do that now let's rerun and try to
174:18 - log in
174:19 - and well we will see that we should be
174:20 - directed directly to the home page
174:22 - once we log in let's do that and you can
174:24 - see we are brought to the home page
174:26 - so that's awesome now i'm just going to
174:27 - quickly move this up uh
174:29 - one because i don't like how that looks
174:31 - let's put this p tag
174:33 - just above here and now i want to
174:35 - refresh this
174:37 - and that looks a little bit better to me
174:38 - so sweet that's how we log in
174:40 - now let me show you what's actually
174:42 - happening in the back end when
174:43 - or how we can validate if we're logged
174:45 - in or not because right now
174:47 - there's not really any way for us to
174:48 - tell whether or not we're logged in
174:50 - or we're logged out so what i'm going to
174:52 - do is i'm going to go actually
174:54 - all the way back into my main
174:55 - application into templates
174:58 - and base.html and i'm going to create a
175:01 - thing that essentially
175:02 - only shows our main content uh body so
175:06 - like this block content
175:08 - if we are logged in otherwise it will
175:11 - tell us to log in and i'll leave a link
175:13 - that says login
175:15 - so a way that you can actually tell if a
175:16 - user is logged in or not
175:19 - is by using what's known as user dot is
175:21 - authenticated so i can actually create a
175:23 - code block here
175:24 - and i'm gonna make this an if statement
175:26 - i'm gonna say if user
175:29 - dot is underscore authenticated
175:33 - authenticated i think i spelt that
175:35 - correctly
175:36 - so what this does is by default whenever
175:39 - you go to a web page in django it has a
175:41 - user attribute
175:42 - which stands for the current user now if
175:45 - there's no user
175:46 - signed in i believe it defaults to
175:48 - what's known as an anonymous user
175:50 - so if you call user dot is authenticated
175:53 - on the user
175:54 - if it is a valid user that's properly
175:56 - signed into the webpage
175:58 - then this will return true if it does
176:00 - not return true then
176:01 - the person is not signed in so
176:03 - essentially i only want to show
176:04 - this content block for all the different
176:06 - pages that i have
176:08 - if we're logged in otherwise i want to
176:10 - ask the user to log in
176:12 - or even maybe redirect them to login so
176:15 - what i'll do here is now i'm going to
176:17 - put an else statement
176:19 - that'll say essentially else
176:22 - so if you're not logged in what we'll do
176:24 - is we'll literally just put an a tag and
176:25 - you guys can obviously make this look a
176:27 - lot nicer than i'm going to do
176:28 - and we'll just link it to the login page
176:31 - and we'll say
176:32 - uh log in
176:35 - here and you can just click this whole
176:37 - thing and that'll you know
176:39 - actually let's put this in a p tag make
176:40 - it look a little bit nicer
176:42 - slash p and instead of having
176:45 - the whole thing be a link we'll just do
176:48 - log in
176:50 - here all right so now we will hopefully
176:52 - redirect to the login page and the last
176:54 - thing i need to do before i forget is
176:56 - just end this if block so we'll say end
176:58 - if and there we go so let's now go back
177:01 - and let me go to home and i don't think
177:03 - i'm currently logged in but we'll see
177:06 - and okay so it is i am currently logged
177:08 - in so what i want to do actually is just
177:10 - log out so log out brings us to this
177:14 - logout page
177:15 - right that just says thank you for
177:16 - logging out this is the default logout
177:18 - page i'm going to show you we can change
177:19 - that in just a second
177:20 - so now let's go back to the web page and
177:22 - let's just go to the home page
177:24 - and you can see that now that i'm not
177:25 - logged in it says log in
177:27 - here if i click this um
177:31 - oh okay so that is actually an issue so
177:33 - what's happening essentially is when i
177:35 - go to the login page
177:36 - since we're not logged in it's not
177:37 - showing the login page because that's
177:39 - the block content
177:41 - so this is probably not the best way to
177:43 - do it but this is how you can tell if
177:44 - someone is authenticated
177:46 - so maybe actually let me remove this um
177:51 - yeah because it won't let us log
177:54 - in if that is there so we'll remove this
177:57 - for now and just leave it as block
177:58 - content but that shows you guys how you
178:00 - can restrict kind of page access
178:03 - to people that are logged in so
178:04 - obviously on certain pages you might
178:06 - want to add that if statement
178:08 - so that's showing different stuff based
178:10 - on if you're login or if you're not
178:11 - logged in
178:12 - but that is essentially kind of how you
178:14 - do login and log out
178:15 - i'll really quickly show you how to
178:16 - change the logout page if you'd like to
178:18 - do that
178:19 - so same thing as kind of changing the
178:21 - redirect here for login so what we'll do
178:23 - is we'll just
178:24 - literally copy this and change this to
178:26 - log out
178:27 - underscore redirect.url and then here we
178:30 - can just define whatever page we want to
178:31 - go to
178:32 - when we log out so if you had created a
178:34 - logout template
178:35 - you could go to that you could go to
178:38 - essentially whatever you want but just
178:39 - by doing that i'll just leave it as a
178:40 - homepage for now
178:42 - but you know you get the idea so i guess
178:45 - the last thing i'll show you is
178:47 - let's say that you create some urls
178:49 - inside of your new application so maybe
178:50 - we go
178:52 - we have a url we have to create so let's
178:54 - go to the create page for a second
178:56 - i actually want to go to views my
178:58 - apologies if we want to get the user
179:01 - from with
179:02 - within code we don't want it just inside
179:04 - of the html file
179:05 - what we can actually do is we can type
179:08 - response
179:09 - dot user now when you do response.user
179:12 - that will give you the user and you can
179:14 - run dot is authenticated you can get all
179:16 - the attributes of the user like the name
179:18 - the password the email all that stuff
179:20 - directly from the code
179:22 - and then obviously you could pass that
179:23 - into the
179:25 - context of the page or you could do
179:27 - whatever you need to do with it from the
179:28 - back end so i just figured i'd show you
179:30 - how to do that quickly
179:31 - so anyways that has kind of been it for
179:32 - logging in and logging out pretty
179:34 - straightforward in the next video we'll
179:35 - create a custom user model
179:37 - and we'll talk about how we can modify
179:39 - that model to add attributes like all
179:40 - the to-do list to a specific user
179:42 - so anyways that has been it for this
179:44 - video i hope you guys enjoyed if you did
179:45 - please make sure you leave a like and
179:47 - subscribe and i will see you again in
179:48 - the next one now i know i said i was
179:50 - going to be doing like custom user
179:51 - models here but the thing is to do what
179:53 - i wanted to do i actually don't need to
179:55 - use those and they're way
179:56 - like they're they kind of over
179:58 - complicated so i figured we'll just do
180:00 - it the pro like i guess the proper way
180:02 - or the way you're supposed to do it
180:03 - and then if you guys need to look up how
180:05 - to do custom user models it's not like
180:07 - super hard
180:08 - but just go online there's a few decent
180:10 - tutorials for that because i don't think
180:11 - i'm going to cover that in that series
180:13 - unless you guys really want that and you
180:14 - leave that as a comment down below
180:16 - but anyways the goal of this video is to
180:18 - make specific to-do lists for specific
180:21 - users
180:21 - so that when different users log into
180:23 - the website they see different to-do
180:25 - lists
180:25 - just like you know if you're on facebook
180:27 - you're gonna see different posts like
180:28 - stuff like that right so it's gonna be a
180:29 - little bit more custom to each user
180:31 - and obviously they can save their own
180:33 - to-do list and that'll be saved just for
180:34 - them and other people
180:36 - shouldn't be able to view that so what
180:37 - i'm going to do and
180:39 - i need to do this is inside of our model
180:41 - stop pi file
180:42 - inside of our main application i'm going
180:44 - to just add a foreign key to to-do list
180:47 - which is user and then that way our
180:49 - users will have a to-do list set where
180:52 - we can view
180:53 - all of the uh the different to-do lists
180:55 - with that user
180:57 - so to do this i need to start by
180:58 - importing our user model so to get that
181:00 - i'm going to say from
181:05 - off django.contrib.off. models
181:08 - import user with a capital u
181:11 - now what i'll do is just add a foreign
181:13 - key i'm just going to copy this
181:14 - and just change the names here instead
181:16 - of to do list we'll say
181:18 - user and we'll do user right here
181:22 - so we'll have user models.foreign key so
181:25 - now we're saying that essentially every
181:26 - to-do list we create will be linked to
181:28 - some kind of user
181:30 - awesome so now uh what we need to do is
181:33 - actually make some migrations in our
181:36 - file
181:36 - so that uh we're gonna update our
181:39 - database accordingly to that now
181:41 - you shouldn't run into any issues doing
181:43 - this uh it should just
181:45 - like create the migrations for you but
181:48 - if for some reason this doesn't work
181:50 - what you need to do is delete all of
181:52 - your database files so delete your
181:54 - database file
181:55 - delete all of the um everything inside
181:58 - of your migrations folder including the
182:00 - pi
182:00 - cache but not the init.pi files
182:03 - and that goes for all of your migration
182:05 - folders so any migration folder delete
182:07 - everything except this init.pi
182:09 - and then anywhere you see a pi cache
182:11 - folder delete that
182:13 - and that'll allow you to do the
182:14 - migrations after that
182:16 - so now that we've done that what do we
182:19 - need to do next
182:20 - well now when we create a to-do list
182:22 - things are a little bit different so
182:24 - this is where we're creating a to-do
182:25 - list
182:26 - and what we're doing to do that is just
182:28 - creating a new to do this and saving in
182:30 - the database
182:31 - but now we need to save the to-do list
182:33 - to a specific user
182:34 - so to do that what we're going to do is
182:36 - we're going to say
182:37 - response dot user
182:41 - dot to do list underscore
182:44 - set now i don't know if this is going to
182:46 - have to be capital or not so we'll have
182:47 - to play with that in a second but i
182:49 - think it should just be like that
182:51 - dot create and in this case we'll give a
182:53 - name to our to-do list
182:54 - and we'll say the name is going to be
182:56 - equal to n now i believe this is how you
182:59 - create it i'm gonna go look to see how
183:01 - we created the item yeah so that is it's
183:03 - a similar way
183:04 - so we'll test this to see if that's
183:05 - working but this should now
183:07 - be saving our to-do list to a specific
183:09 - user
183:10 - now we can still access our to-do list
183:13 - by doing the slash id
183:15 - of those to-do lists but we're going to
183:17 - probably modify this a little bit so
183:18 - that you're only able to
183:20 - access uh to-do lists that are yours so
183:22 - that'll mean we'll look at the id
183:24 - and then we'll see if that's in the user
183:26 - set and if it is then we'll show that
183:28 - otherwise we'll say like you don't have
183:29 - access to this to-do list or something
183:30 - but let's first just make sure that we
183:32 - can create them okay
183:33 - so another thing that i'm going to do
183:35 - actually is we've created this uh
183:38 - if i go to templates we've created
183:41 - um no we have not created but in our
183:45 - base.html sorry guys
183:46 - we have this slash view here right and
183:49 - this originally i think i had it linking
183:51 - to two just to test stuff
183:52 - but what i want to do is actually make
183:54 - this go to a list of all of our
183:56 - different to-do lists
183:57 - so i've created this slash view so now
184:00 - what i'm going to do
184:00 - is i'm going to add a url inside of our
184:04 - urls here that is going to be slash view
184:06 - and what slash view
184:08 - will do is it'll bring us to a list of
184:10 - all of our to-do lists
184:11 - so i'm just going to say the function
184:13 - name will be view the
184:14 - link will be view and the name will be
184:17 - view
184:18 - and then what we'll do is we'll create a
184:20 - new i guess function
184:21 - inside of views.pi and we'll say define
184:25 - view response and then what we're going
184:28 - to do is we're going to return a render
184:31 - of in this case we'll say response view
184:36 - and main slash
184:40 - view dot html and then we'll pass in
184:43 - nothing as the context
184:44 - so now we've done all that we actually
184:46 - need to create a view template so i'm
184:48 - just going to make a new file
184:49 - and i'm going to save this as view.html
184:52 - and i'm just going to extend this from
184:54 - the base template
184:56 - so extends base dot
184:59 - main slash base dot html
185:02 - and then we will add our blocks so we
185:05 - need that block for the title so we'll
185:06 - say block
185:07 - title like that and then
185:10 - end the block so percent percent
185:14 - and block and then inside here i guess
185:17 - we'll just do like
185:19 - view and then we can copy this and just
185:21 - change the name
185:22 - to uh to content so con
185:27 - content like that and then inside of
185:30 - here what i'm going to do is i'm just
185:32 - going to create
185:33 - a for loop that's going to loop through
185:35 - all of the different to-do lists for our
185:37 - user and display them it'll be very very
185:39 - basic but we can obviously modify it
185:41 - later
185:42 - so let's add a for loop so say 4 and in
185:44 - this case
185:45 - td which is stanford to do list in this
185:48 - case
185:49 - user dot to do list
185:53 - underscore set then what we'll do is
185:55 - we'll end the for loop
185:57 - and n4 and then in here we're going to
186:01 - create some links to all of our to-do
186:02 - lists
186:03 - and display them just in little
186:04 - paragraph tags so i'm just going to say
186:06 - p
186:06 - and in this case we'll add the name of
186:08 - our to-do list
186:09 - uh yes we'll add a link here so we'll
186:12 - say
186:14 - a we'll say href equals in this case
186:17 - slash and we'll say td dot
186:20 - id and then we'll end that a tag so
186:24 - slash a
186:25 - and then and the p tag slash p and here
186:28 - we'll just put the name of our to-do
186:29 - list
186:30 - which in this case is simply going to be
186:32 - td.name
186:35 - all right so that should display all of
186:37 - our to-do lists in just like a
186:38 - standard i don't know like list kind of
186:40 - form we could make it look nicer but
186:42 - for now we're just going to go with that
186:43 - and yeah and then we should be able to
186:45 - click on them to access those to-do
186:47 - lists
186:48 - so let me see if this is actually
186:50 - working so let's run the server
186:52 - any errors let's see uh no errors so
186:56 - let's now go
186:56 - back to here and say i'm going to create
186:58 - let's just go to the home page
187:00 - and let's go to view okay so if you are
187:03 - not running into any issues we're
187:04 - obviously not seeing anything so now
187:05 - let's try to create a to-do list so if i
187:07 - say
187:08 - tim create new and we run into an area
187:11 - no attribute to do list underscore set
187:14 - i thought that was going to happen so
187:16 - let me see now if we need to add the
187:18 - capitals to that or not so
187:20 - inside views to
187:24 - do list underscore set maybe that's the
187:27 - issue
187:28 - i don't know we'll see though and then i
187:30 - guess we're gonna have to change inside
187:32 - of our
187:33 - vue.html file to be capitals as well
187:37 - now if this doesn't work i'll quickly do
187:38 - a little bit of research and figure this
187:40 - out but let's
187:41 - try it now and let's go back to slash
187:44 - create
187:45 - can continue has no attribute to-do list
187:48 - underscore set sorry i'll be back in one
187:49 - second guys with the proper attribute
187:51 - name
187:52 - for that all right i am back and with a
187:55 - ton of errors that i had to fix
187:57 - so essentially one of the first errors
188:00 - is we need to go here and
188:01 - change this to be user.to-do list.all
188:05 - because i was trying to loop through
188:06 - something that's not iterable because
188:08 - this is a different object so just to
188:09 - put this all here you don't need the
188:10 - brackets after
188:11 - and leave this as lowercase to-do list
188:14 - and then we need to do is go to models
188:17 - and we need to add these two fields to
188:20 - our
188:21 - foreign key so we have to say related
188:22 - name we're going to find this as to-do
188:24 - list
188:25 - and then null equals true now
188:28 - essentially the related name is going to
188:29 - be the way we access this
188:30 - from the related object which is user so
188:34 - we just change that to to-do list we say
188:35 - no equals true
188:37 - and then what we're going to have to do
188:39 - to save that is make migrations
188:41 - you know python manage up high make
188:43 - migrations python managed up high
188:45 - migrate
188:46 - you do that you should be set and then
188:48 - the last thing we have to change is
188:50 - inside views.pi
188:52 - is what i've done here is i've created a
188:54 - new to-do list so i said
188:55 - t equals to-do list name equals n
188:57 - exactly what we had before
188:58 - same thing with saving the to-do list
189:00 - except now i said response.user.to do
189:04 - list
189:04 - dot add t and then we can still link
189:07 - back to that id because that id is
189:09 - perfectly valid it still exists so we
189:11 - can see that
189:12 - and everything works fine so that is the
189:16 - fixes that's what we need to do remember
189:18 - that once you change these
189:19 - this models file by adding the related
189:21 - name and the nil equals true
189:23 - you need to make migrations to save
189:25 - those changes and then rerun the server
189:27 - so i'll show you now what it looks like
189:29 - so essentially you can see i have two
189:30 - to-do lists that say hello
189:32 - when i go i can add items to the to-do
189:34 - list so let's say like item one add item
189:36 - there you go we can check it we can save
189:38 - it
189:38 - all that fun stuff if i go to view um
189:42 - it should be showing me this but for
189:44 - some reason that's
189:46 - not happening um let's see here let me
189:49 - try
189:50 - logging out and logging back in so let's
189:51 - say slash logout and let's say slash
189:54 - login let's go tim password sign in view
189:58 - and there we go we can see that we have
190:00 - now these
190:01 - popping up so we have to be logged in to
190:03 - be seeing these if we are not logged in
190:05 - we are obviously not going to see
190:06 - anything because
190:08 - we don't have any of these so now let's
190:10 - try to create another account
190:12 - and add some of our to-do list to that
190:14 - account and then see if
190:16 - it's different than what we have before
190:18 - so let's say we're making a
190:20 - let's say the email is bob
190:23 - techwithtim.net
190:25 - let's say the password is the password
190:28 - i've been using consistently
190:30 - and there we go let's hit register all
190:33 - right so we don't need to save that but
190:35 - now let's go to view
190:36 - and we're still seeing hello twice which
190:39 - is interesting to me oh it's because
190:41 - we're not logged into uh
190:42 - that account so let's do slash login and
190:46 - then what we'll do here is we'll say bob
190:49 - and
190:49 - password and log in and go to view and
190:52 - obviously there's nothing there so let's
190:53 - create
190:54 - a new to-do list let's go new list
190:56 - create list
190:57 - let's go to view and now we can see that
190:59 - we have new list showing up and that is
191:01 - working
191:01 - now i'm sure this is fairly buggy but
191:03 - this gives you an idea of how you can
191:05 - add things to specific users so you can
191:07 - see them on the web page
191:09 - now obviously we can make it so that you
191:11 - can't
191:12 - view other people's to-do lists because
191:14 - for example if i go
191:15 - slash 2 i can view the hello to-do list
191:18 - even though that's not mine
191:20 - so we'll quickly do that and then i
191:21 - guess we'll probably wrap up after that
191:23 - so let's go to index here now and let's
191:25 - quickly say we'll get the to-do list
191:28 - um objects we'll gets we'll get the
191:31 - to-do list as an object and we'll just
191:32 - see if that to-do list
191:33 - is in the users list if it's not
191:36 - then we'll just you know get out of that
191:39 - we won't let this happen
191:40 - otherwise we'll do whatever we already
191:42 - have so we'll simply just say if
191:44 - in this case response dot user
191:48 - dots i guess to do list
191:51 - dot all like that but we'll say if
191:54 - ls in that then this is valid
191:57 - otherwise so we'll tab all of this in
192:01 - otherwise we'll simply just return we
192:04 - can either give an
192:05 - error or we could just like not let them
192:07 - go to this page and to do that we can
192:09 - just
192:09 - link maybe to the home page or something
192:11 - if they try to do that so i mean you
192:12 - guys can pick what you want to do there
192:13 - but i guess i'll just going to ring
192:15 - a link to our home page here so we'll
192:17 - just link to
192:18 - home dot html and we'll just say
192:22 - in this case or actually maybe let's
192:23 - instead of going to home let's go to
192:25 - view
192:25 - dot html because then that way they can
192:28 - view their to-do list so maybe that
192:29 - makes more sense
192:30 - so now let's try this so let's try to go
192:34 - to two now
192:35 - refresh and you can see that now it's
192:36 - simply bringing us a new list because
192:38 - well that's not our to-do list so if i
192:40 - go to three
192:41 - you can see new list is valid because
192:42 - that's our to-do list so we're able to
192:44 - view that
192:45 - now this is probably not the most secure
192:46 - way to actually like hide information
192:48 - just with like this if statement and all
192:50 - that
192:51 - but i mean you guys can mess with that
192:53 - if you want and this is a very very
192:54 - basic example
192:56 - so anyways that is kind of been it for
192:58 - how to add the
193:00 - to-do list to specific users how to see
193:02 - that
193:03 - i know the login and logout system isn't
193:05 - super smooth right now but you can
193:06 - obviously add that on the side
193:07 - my main goal with these tutorials was to
193:09 - give you guys kind of the starting
193:11 - blocks on how to do things
193:12 - ideas on how to go about stuff i really
193:15 - can't show you possibly everything
193:16 - because it's an infinite amount of stuff
193:18 - that you can do with django
193:19 - and with that being said i will
193:21 - hopefully be doing a deployment tutorial
193:23 - soon it probably won't be for the next
193:25 - few days
193:26 - but at some point i definitely will do
193:27 - one and i encourage you guys to remind
193:29 - me and get on me if i'm not doing a
193:31 - deployment one because i will do that at
193:32 - some point
193:33 - and that has kind of been it for the
193:35 - actual writing code and all of this of
193:37 - the django tutorial
193:38 - so i hope you guys enjoyed if you have
193:40 - any questions or future videos you'd
193:41 - like to see please let me know in the
193:43 - comments down below
193:44 - and i guess i'll see you in the next
193:46 - [Music]
193:52 - video

Cleaned transcript:

hello everybody and welcome to this django complete course now in this video i'm going to be covering all of the important aspects of django then as a beginner you need to know so from setting up a simple django application to creating a database to having users log in sign up and sign out to having user specific pages that is what is going to be covered in this video now just to make something really clear here this video is a combination of 11 previous videos that i have on my channel currently i decided to reedit these videos just to have them be a little bit nicer and combine them all into one video because when i posted this series it was probably about a year and a half ago and i have a lot of new subscribers now that probably don't even know i have a django tutorial series so with that said i hope you guys enjoy if you do make sure you leave a like and with that said let's dive in after a quick word from our sponsor we get started i need to thank the sponsor of this video which is alco expert algo expert is the best platform to use from preparing for your software engineering coding interviews and has the highest quality coding interview practice questions with over 140 practice questions detailed solutions in nine of the most popular programming languages a featurepacked browserbased coding environment extensive test suites and conceptual overviews and code walkthroughs for each and every problem algo expert is the best resource to use to ace your coding interviews algo expert also has a data structures crash course coding interview assessments and a mock interviews feature i can highly recommend algoexpert as a former customer myself and now an official instructor on the platform get started using algo expert today by clicking the link in the description and using the code tech with tim for a discount on the platform hey guys and welcome to a new series which is django web development with python now if you haven't heard of django before essentially it's a full stack web framework which allows you to create websites using purely python and a little bit of html now this is really awesome because typically when you want to create websites you got to use a combination of languages you got to use javascript html css all this kind of stuff php but if you already know python this is a really nice and fairly simple way to actually create fully functioning websites and that's what i'm going to be showing you throughout this series now this first video is going to be dedicated to setting up our project understanding a bit about how django works and getting the server kind of running on our local machine and then later in other videos you're going to be working with databases templates making fully functioning websites and hopefully near the end i will work on a large project and show you guys how we can get everything set up to create an actual website that you might be able to use uh so without further ado let's get started now the first thing that we're going to need to do when we're working with django is we need to install it so i'm assuming you already have python installed if you don't you're going to have to go ahead and do that but from there we need to install django to do this we're simply just going to open up our command prompt we can just type cmd in little thing here and you pip uh install and then django like so now i already have this installed so i'm not going to do this but if for some reason when you hit enter and this doesn't work it means it says like pip is not in your path or something like that click on the video that i'm going to have a link there's going to be a card to it and a link in the description it's called how to install pygame but this goes through how to fix this pip issue so just watch through that video and it will explain to you how to fix this issue and when it you type pie game when it says like type pie game just type django instead and that should hopefully fix your problem now for me i'm actually working in a virtual environment uh for django this doesn't really mean anything to you don't worry about it so i'm just going to activate that now but what we're going to do to start our project is we're going to create a directory somewhere accessible that we're going to install all of our kind of django stuff into so i've created one in this kind of directory system here so desktop python youtube django tutorial so i'm just going to change into that directory by using cd so we'll cd into desktop cd python cdut tube and cd django django like that so now i'm in this directory but if you guys don't want to do that or it's a complex path all you can do is open it up your folder here and then type cmd and it'll open up a python or a cmd window that is in this directory like that for you okay so now that we've done that what we need to do is we need to create a brand new django project now to do this what we're going to do is type django hyphen admin and then start project i believe that is and the name of our project which in this case i'm going to call my site now you can name this whatever you want however if you try to name it the name of a python package so maybe like numpy or site or something like that it won't work so if you get that error just try changing the name to something else so i'm going to do that and now you should see inside of my django tutorial folder i have this new directory called my site now if i go in here we'll look through some of the files that we have so we have this manage.pi file inside the root directory of my site and this is what we're going to be using to create applications to run our server to do all kinds of stuff so this is an important file to use and then inside of my site so the other directory we have a few of these files like this i'm not going to go through what all of them do but we will be modifying this url's file later in the video okay so that's a brief overview of what that is so now that we've done that we've actually created a django uh project and we can test to make sure that this project is working uh by just running a uh a server on our local machine that's gonna allow us to connect to our website so right now when all the stuff we're going to be doing is known as development so essentially we're just working on our local machine our website is not live on the internet like not anyone can go to it but when you run this it's going to allow you to connect to it and view it as if it was live on the internet but it's just running off our local machine to do this what we're going to do is we're going to type python or sorry actually one step before that we need to change into this my site directory so right here we're in this directory now we need to go into my site so to do that we're going to go cd my site and now what we're going to do is we're going to run this manage python file with a few arguments so to do this we're going to do python manage if i do space here manage dot pi and then we're going to say run server like that so let's hit enter here and what we're going to do is now we're going to start running a server on our local port which is actually 8080 which is going to allow us to connect and view our website we don't have anything on the website yet but i will show you connecting to it so to connect to this what we're going to do is just copy this http link here looks like a little ip address and we're going to go to google and simply paste that in the uh bar up here so when we do that you should see a page that looks like this if you don't see this page rewatch uh the last few minutes of the video and make sure you follow the steps correctly because you should see this popping up all right so now that we have that we'll leave that open and i'll quickly mention that right now this is running on port 8080. if you for some reason port 8080 is blocked or you want to run it on a different port what you can do is simply when you type that run server command after run server just type the port you want to run it on so for example if i want to run it on port 5050 i don't even know if that's a port but you could just hit enter and then it would run on that port and it would give you a different address to connect to uh the website okay and also if you want to stop the server from running which is what i did i just hit control and c on the keyboard okay so now we've got this uh we'll close this up for now and we'll look at that after what we're going to do now is create what's known as an app now right now we haven't actually created an application or any views or any web pages for our site we've just kind of set up the environment that's going to be hosting that site for us that's kind of a way to think of it so if we want to create an application which is what we're going to run from our kind of environment to do this we need to what do you call it so we're already in this directory we need to use this manage file once again to create that so to do this i'm going to do python and then i'm going to go to manage manage dot pi and then type the name of or sorry start app after this and now type the name of whatever app i want to uh to create so in this case i am just going to type test as my app name but you guys can type whatever you want actually you know what let's change this to main so now that i do this i have python manage.pi start app and then i hit enter like this now you can see that it should create a new directory inside of our my site directory called main now it's very important that it's in this directory if it's not there is other ways to access it but it's not going to work for what i'm going to be showing you so now we should have a directory system that looks like this django tutorial you have a folder called my site you go in there you should have main which has a few files in here which we'll talk about after and then it has my site and this manage dot pipe manage python file okay so now that we've done this let's rerun our server and connect to uh that page so to rerun our server same thing python manage.pi run server and we'll do that we'll copy this link once once more and just run this up here all right so there we go so now everything is is working fine so what we're going to do now is we're going to start modifying some of these python files and actually displaying our own html code on the website now it's a bit of a process make sure you guys are following along for this because there is quite a few steps and if you mess up one slightly uh it will result in a few issues happening in your with your website and connecting and all that so what i'm going to do is i'm going to open up a text editor in this case it's subline you guys can use whatever you want as long as you can edit these files and just understand what i'm doing so i like this just because as the directory system on the left here so i can easily navigate between stuff so what i'm going to do we'll close these up for right now is i'm going to start by going into my main folder and going into this views.pi file so this views file is what's going to actually store the different views for our application now a view you can kind of think of as a web page and this is where we're going to write essentially the code that's going to serve what's known as http requests and show some stuff up on our website now to do this the first step is to just import something which i'm going to say from uh jenggu dot dot http and then response we're going to import uh http response now i believe i probably butchered this yes sorry so it's actually just django.http um is that correct lowercase h my bad guys so drango.htdp import http response now down here we're going to create a function and this function is going to represent a view now we can create multiple views here but for now we're just going to stick with one and i'll be showing later on how we can connect different views and link to those and all that so we're inside define index we're going to put in here response and then what we're going to do is we're simply going to return http response and in here we're just going to type some text now you can type whatever you want i'm just going to say tech with tim in here and this is actually our first view now what goes in here is html code if you don't put any tags so for example like i don't put h1 um slash h1 it'll just show up as like standard text but if you want to create a header or something you can just do h1 and i'll be talking about how to do more complex html stuff later so that should be it for this file right now and what we're going to do next is we actually need to create a new file inside of this main application that's going to represent our urls and we'll talk about how all this works in a second so i'm just going to create create a new file here so file new file and what i'm going to do is just make sure i save this and i'm going to call it urls.pi but it has to be inside of this main folder so it should be in here okay so urls.pi now in here is where we're going to define the paths to our different web pages and once we do the other there's another url file we have to modify as well but this one is going to represent the urls that go to the different views that we have in this file so for example right now we have one view but if we had another view so like if i copy this and paste this down here then we would have to define that inside of the urls file with a certain path so we can determine which view we're going to go to uh based on whatever path the user types in uh in the search bar at the top okay so we'll go urls.pi and what we're going to do in here is we're going to say from django dot urls import path like that okay and then in here we're going to say from dot views or sorry from dot import views now this essentially means just import views from the current like directory that we're in uh so that's how we'll do that and then in here we're gonna type url and here what we'll do is simply say path and then we'll put a comma after that and we're just gonna type um a blank string and we're going to type views dot index and then name equals index like that now what this is going to do uh we'll talk about this more later because we have to do some other stuff first is essentially say if we get into this application and we're just on the home page so we don't type like slash home or just the home directory we're going to go to the views.index page and that has the name of index and what that means here is we're gonna serve this http response which means that once we go to that page it should show uh tech with tim in a header one on the page now this will make more sense once we do the other url file and i can show you how we kind of navigate through it but for now uh just just have this typed in so that's actually all we have to do from inside of this main folder now what we have to do is we have to link this application to our project now remember this this django tutorial folder right is the project for our website and this main folder inside here is the application that we're going to link to our project it's a little bit confusing but you guys should understand in a second so what we need to do is we need to essentially set the url that's going to link to this application because we can have more than one application inside of our project so to do this what i'm going to do is go to the url files inside my site and this should actually already be created for you you should already have this code and i'm simply going to modify this right here so from django.urls import path and import include now after this path here i'm going to copy this and paste this directly below it now what i'm going to do is i'm going to say that i want to navigate to this application when the user types in a certain path and what i mean by path is let's go up here right now we have this okay but when i say path i mean like if you type slash home the path would be slash home right and we would have to know where to go if you type slash home just like if you go on a website and you do slash login or slash sign up you get directed to different pages so that's what we're doing right now so maybe we have another page it's called sign up or something like that so we have to define when we type certain paths where we're going to go and that's what we're doing right now so we already have one path which is known as admin now admin gives you like an admin dashboard and we'll look at that in later videos right now it's not super important but we want to define the path that we should go to automatically when we type something so right now i'm actually just going to leave this as blank and what this means is if we don't type anything so we just put in this main url bring us to whatever page i'm about to define here so in here i'm going to type include like this and then what i'm going to do is in strings here i'm going to go to main dot views i believe actually sorry main dot urls is the correct page there so what this means now is if we don't type anything for our path we will automatically direct ourselves to the main.urls file now the main.urls file is this one right here and what it's doing here is it's going to look at what path we've been given we'll talk about that in a second and then go to the appropriate view from this views file here okay so it's we're linking from multiple different files we're sending paths and all that stuff okay but if we look at the urls.pi file here under my site what this include actually does is it means okay we're going to look for a path that specifies whatever's in this string so in this case it'd be admin in this case it's nothing it's just the default path and what we're going to do is we're going to take everything after that path and we're going to send it to the main.urls page so for example if our path and i'll type it down here looks like whatever the ip address is and then like slash home slash start and we had slash home here okay what we would do or we'll do home slash like that sorry is we're gonna look for the this home path here so we find this we find home okay and once we find this what we're gonna do is we're gonna say okay so we'll get rid of this because we found that and we'll take start like that and we'll pass it over to this urls.pi file inside of our main application because it says go to main urls right and now what main urls is going to do is it's going to look for a path that's called start because it gets past start like this and it's going to see okay do i have any path that says start now if it does it's going to direct us to whatever function inside the views file that we've defined so if i add another path here okay and i define this and i say this is start with a forward slash so let's say that has a forward slash two then what will happen is we will go to the views.index view because that's the path that we typed in now in this case uh we're just going to leave it as a blank path which means that if you had nothing just like that it'll just automatically go to this path you guys should understand this in a second once we start actually doing it okay so we've done this now so actually i don't know if we're going to have to restart the server or not but let's just hit enter one more time in the search bar and see what we get okay so we get now tech with tim in the header one tags now i know i kind of went a little bit faster this and it might be a little bit hard to understand but we'll create another page now and i'll show you how this actually is working so um we've done that let's leave this open so essentially right this is what was shown we had inside this views.pi file we had this index function and it returned h1 tags tech with tim now what i'm going to do is just create another function i'm going to copy this and i'm just going to call this let's say v1 okay and then here instead of tech with tim we'll just say view one exclamation point okay so now let's show how we could possibly navigate into a different view using this kind of url structure that we've set up so remember this urls inside of my site defines what's going to happen when we go to a certain link what page we're going to direct into so i had this as blank before so what happens is if you don't type anything after the main url which is like that https it's just going to direct us to the main.urls and it's going to include whatever comes after this blank tag essentially okay so if we want to make it so we could possibly go into another uh what do you call it file folder whatever another view what we can do is add another url inside of this urls.pi so i'll copy this path and instead of having a blank this time i'm going to say slash v1 or i'm going to say sorry v1 forward slash and now instead of going to the views.index view i'm going to go to views.v1 remember the name of our function and again i'll call this a different name which will be view1 all right so that hopefully this will make sense if we don't type anything so meaning we like we don't type admin what's going to happen is whatever the path that we've given is going to be passed over to this urls.pi file if it's blank meaning we haven't typed anything at all other than the main url it's going to bring us to the index page if we type v1 it's going to bring us to the v1 page so let's try this on our web browser if i change this now and i say slash v1 you can see that it brings me to the page v1 now remember if i get rid of v1 and i hit enter it brings me back to the page tech with tim so we successfully set up two pages that we can see and we kind of understand now how this url directory system works so that's all it is um to setting up our basic django pages uh in the next video we'll do a bit more on some multiple pages we'll talk about creating some actual like real html stuff on the website uh and just keep going further and further with django if you guys enjoyed the video please make sure you leave a like and subscribe if you need any help uh don't hesitate to join my discord server follow me on twitter or my instagram i'm always answering people's questions there and with that being said i will see you in the next so in today's video what we're going to be doing is going through databases so how to set up databases add entries retrieve entries all that kind of stuff this will be kind of a beginnerish tutorial on databases i'm not going to be going through absolutely everything as there's a ton of stuff to cover but i will give you guys a very good foundation and pretty much everything you actually need to be able to use the database then obviously you could probably look up some more stuff if you need that in the future now the database that we will be using is sqlite3 now there is other kinds of databases that you can use but if you're a beginner and for our purposes sqlite is just the best and easiest to use it doesn't really make a massive difference if you use the other ones however if you'd like to use those go ahead and i will be showing you briefly how you can actually change your database now the reason i'm not going into templates and more advanced html right now is because likely the information that we're storing in our database is actually what we're going to be wanting to show within our models uh or sorry not models within our templates and html so it kind of makes sense to make the information first and then display it afterwards within templates and all that so we're not uh kind of redundantly typing things and modifying things later so with that being said let's get started now our first step when we're gonna be working with the database is we actually need to modify uh our settings.pi file inside of our interior my site directory now to do this obviously we're going to go to settings.pi what we need to do is need to scroll down to install apps we need to add our application in this case called main for me to our installed apps and the reason we need to do this is because we're going to be working with databases and just some things in the future we need to tell django that we have another application that has some dependencies and things that need to be set up inside of our project so to do this what we're going to do is just go single quotes right at the end of this uh what do you call it wherever the comma is and we're just going to type the name of our application in this case mine's called main yours this might be called something else and then we're going to type dot apps dot and then main config and then add a comma after that now obviously if yours is named something else you're going to change this so you'd add a capital letter for whatever the name is and then yeah just put it there and that'll work for you okay so we've done that and now we've told django that we actually have this application main and we need it to be configured and set up when we uh make some modifications to our project and stuff like that so our next the next thing that we actually have to do is we need to get into our my site directory so the same directory that has that manage.pi file in it and we have to run the following command which is python manage.pi and then migrate now when you type this uh what do you call it yours might yours should likely pop up like a bunch of text that says making migrations making changes now since i've already done this because i was testing it before it's not showing up for me but you should do that what i've just done here essentially is that we've updated the settings.pi file so let's run manage.pi and get it to make any changes to the project that it might need to do and that's as far as i'm kind of going to explain that all right so we've done that and now we're actually ready to start defining some of our models for our database so if you don't know how to a database works essentially it's just a collection of information and what we're going to be doing is defining some models and some attributes that kind of go with each of the models and the model is just a way of well modeling information and it makes it just easier for us to grab information and we can add attributes to those models we can add some methods to them you guys will see how it works in just a second but essentially if we want to create a model what we're going to do is we're just going to create a class with the name of our model and we're going to inherit it from models.model which is like a database model class set up from django already now for this application that i'm going to write i want to create a todo list so to do this i'm going to create two models one which is a todo list and then the other one which is items that go on our todo list and you guys will see how this works in a second so i'm just going to say class todo list like this and it is going to inherit from models dot model now this essentially means that we're creating a database object uh which is called todo list and now we're going to define some of the attributes and entries that each model todo list is going to have so uh for our todo list i want to have a name so i'm going to say name is equal to and in this case models dot chart field and i'm going to say max underscore length equals 200. now whenever we create a new attribute or uh yeah i guess just attribute of our information of our model what we do is we create it as a class variable and we simply do the name of the attribute and then we have to do the type of field that we want to be stored in our database all right guys i'm back so i'll take a quick cut there because it's getting a phone call but what i'm going to do now is just define a method uh we'll just call this str and i'm just going to put self in here and simply return self.name just so that if we ever want to print this out or see what it actually looks like we can get some meaningful text by using the string method on that so next what we're going to do is define our other model which is item so same as before this will inherit from model stop model and this is going to have some attributes as well now item is a little bit different just because it's actually related to todo list and we're going to have items as a part of our todo list so to do this again right what we're going to do is simply say to do list equals and in this case we'll say models dot foreign key and then in here we're going to type to do list like that and we're going to say on delete equals models dot cascade now the reason we're doing this is because remember how like up here we have character field right which is a type of field that we could store uh information in well we don't actually know the type of fielder django doesn't know the type of field that todo list is because it's an object that's not defined within django so we have to define the fact that we're going to use a foreign key in this case a todo list object when we create an item okay and that's what we're doing now on delete is just saying well if we delete todo list since all items exist on a todo list we're gonna have to delete these as well and i believe that's what on cascade is doing is just defining the fact that this has a special way of being removed okay so our next attribute is going to be name so i'm going to say sorry not name it'll be text and text is going to be equal to a character field as well and a character field is essentially just a string note that you do need this max length whenever you create a character string so make sure you add that in this case let's just make that 300 and now we will add one more field which will be a boolean field so models dot boolean field and it'll just represent whether or not we've completed the item on our todo list same thing here for string so self and we'll just return the text so return self dot text now remember in the future we can add to these models and modify them so for now i'm just keeping it simple we don't need anything too complex all right so now that we've done that we've modified our models we actually have to tell django that we've modified our models and to do that what we're going to do is we're going to make sure we're in that same directory so my site i'm going to say python manage dot pi make migrations in this case we'll put the name of our app which is main now uh yes that's okay so this should work and let's hit enter here and see what we get all right so there we go so now when you do that you should see something that says migrations4 and then the name of your app which should be main it says we created a model to do list and we create a model item now making migrations is similar to like adding something to the staging area and git if you don't know what this is don't worry but it's similar to version control in that we make a change it'll save the change and then we can actually apply that change to our project so if i want to apply this change right now i've only made it i haven't actually applied it what i have to do is go python manage.pi and then migrate and there we go it says applying migrations and it has applied the migrations you should see if you go inside of your migrations folder inside of your app you should get something that looks like this and you can see if you actually open it up it tells you the exact migrations or changes that were made in case we have id uh id is automatically added for all of the different models that you create as a field we have the name which is a character field we have text complete and todo list there we go so um that's kind of how that works it's nice because you can go back and view previous changes and then obviously revert to other changes by just using those files uh so yeah all right so now that we've done that what's actually next is to add some things into our database so right now we have a fully functioning database and i'm going to show you how we can add stuff to it now the easiest way to show you is just from the command line because we'll just mess around with a few different commands get the syntax down and then start doing stuff from code so to get into a command line what i'm going to do is just go python manage.pi and then shell this will open up our python shell for us which will allow me to add some things into the database now our first step is we're just going to import our models so we can use some of the methods and we can actually use those models to create objects and store them in the database so i'm going to say from and in this case main.models because we're not in that main directory we'll import what's the name of our models we have item and we have to do list like this there we are so from main.models import item and todo list and now what we're going to do is we're going to create a todo list and add it to the database and this is really easy to do so i'm just going to say t which is going to be our todo list will be to do list and then in here i'm just going to give it a name and i'll say name equals in this case let's just say tim's like that list suite so tim's list and hit enter now if we want to save this into the database watch how easy this is t.save and we have actually now saved this into the database and if i want to see all of the different objects what i can do is i can say to do list if i can get the capitalization correct dot objects dot all and if i do that you can see we get a query set and it says todo list tim's list and there we go we've successfully stored one todo list in our database so to get all of the todo lists that we have i just did objects.all and obviously dot objects is giving other objects and dot all is actually going to give me like a query set which will allow me to access objects now each of our objects have ids associated with them and they have that name attribute associated with them so if i want to see the id of some of my objects what i can do is say to do list and i believe i can say dot get and then in here i'm going to say id equals and then in this case the id is going to start at 1 and it's going to increment as you add more objects but if i do that type object to the list has no attribute get oh i believe we might have to do objects.get dot objects.get ah there we go so if i do objects.get and i put the id which is the thing that i'm looking for id1 you see we get a todo list and it says tim's list now if we didn't put that string thing here string method inside of todo list it wouldn't be saying tim's list it would be giving us like a memory address awesome so we have that now if we want to query by like names what this is doing querying just means like getting all of the objects that contain the key you're putting what i can do is just say name equals in this case and say tim's list like that and obviously it's going to give me tim's list now if i try to query for something that's not that doesn't exist like i say id equals two you see we get an issue because there's no query that exists for id2 if i wanted that to work i would have to add another item into the database suite so that's kind of how you do some of that now if we want to create an item what we can do for items is actually really nice is we can just let's see the best way to actually make an item is let's see this we're going to do t dot and in this case we're going to say item underscore set and if i print this out dot all like this you're going to see we get an empty query set now notice i did item underscore set right which would be um an attribute of our todo list uh t right because we created two lists here we saved it and so the t object is still there but i said item underscore set but i haven't defined item underscore set in here what this is is because i've added this relation between items and todo list each todo list automatically is going to have a set that stores a bunch of different items okay so now the way that we add items into our database is a little bit different than how we create the todo list now because our items are related to our todo list there's a special way that we can create them and create them within our todo list so essentially remember we have that todo list t i just tab down just a bit more space and it's cleaner but uh we have that object t and if i printed that you can see that's our todo list tim's list now because of the relationship we've created here what i can actually do is say tim underscore and then item underscore set dot all and it actually gives me a set of items which are exactly these items and you just reference all of this with automatically with a lowercase it's what it defaults to and yeah so essentially there is like a blank placeholder for our todo list to hold a bunch of items because of what we did here so if we want to create an item inside of this item set what we do is we say t dot item underscore set dot create and then here we give the parameters that we need for our item so we need a text and we need complete so what we'll do is we'll say text equals and in this case we'll just say like maybe go to the mall something you have to do and complete obviously will be equal to false okay so we do that and now we see we have an item that says go to the mall so we've done that now we've created an item inside of our item set now if i do t dot item underscore set and then dot all you can see that we get all of the items and obviously if i want to get one of the items and i can say dot get and in this case it'll be id1 so i say id1 go to the mall again if i try to do id2 we're going to run into an issue because id2 does not exist all right so now that we've created uh one item or we've created an item in a todo list inside of our database what we can do is we can actually display that information from some of our views and start using the web browser to see this information so the reason i did that from the command line is just because it was a lot it's gonna be a lot faster just to run that and actually add items to our database obviously if we're adding things into our database in future videos we're probably just gonna use our web browser and we'll have like a form where we can input stuff and it'll automatically be added and that's obviously what we'll be doing later so what i'm going to do is i'm going to go to my views now and i'm actually just going to get rid of u1 which means that if i go to urls i should remove the path v1 now what i want to do is i want you to be able to type the id of a certain todo list in the address bar and it popup the name of the todo list and the items that exist in that so to do that uh i will briefly show a cool thing that we can do with paths and we'll elaborate on it in future videos but essentially i can actually put these two tags in here and say int and in this case i'll just say ind or id standing for id and what this means now is what's going to happen is we're going to look for some integer in our path and we're going to pass that to the function views.index so that means that index now needs a variable called id in it and what i can do is i'll show you basically without the database actually is if i just put like percent id and then or percent s sorry and then outside here i do percent sign id it will actually what do you call it show me whatever number i type in in my what do you call it like on my web browser uh so i closed the command prompt i shouldn't have done that wow one second i just got a cd into my correct directories here django cd my site and then we will just simply run our server so we can test this and i can show you what i mean so let's do python manage.pi run server i gotta activate my virtual environment apologize about this guys okay so there we go so we've got this running now so let's go to our web browser and let me show you what i mean by this so if i hit this now you can see we get an issue because it says that it didn't find admin or it didn't find some integer which was an id so now if i type one in here it's like slash one you can see it actually brings me to a page that says one and if i type 3 in here brings it to a page says 3 if i type 4 we get 4 and actually anything that we type in that's a number will just show up in here so we do like 4 8 like it shows up there okay that's like the first kind of way that we can do dynamic pages in terms of the linking all right so what i'm going to do now is i have this id obviously so i don't want to just show the id but i want to get the id of that object as a todo list from our database so to do that what i'm going to do is similar to what i've shown you in the command line is i'm start i'm going to start by importing our models so in this case i can just say from dot models import and in this case we'll just import to do list because actually we might need item as well so we'll import item as well so we'll do todo list and item and what i'm going to do is get that todo list based on the id so i'm going to say that i'll say ls is equal to to do lists dot objects dot get and then in this case we'll say id equals id right so now we have that todo list object and now instead of printing the id let's print uh what he called the name of our todo list so i can just say ls dot name so now we should have made a modification and it should have just our server is running it should just automatically changed let me just copy this link again and if i bring up my tab uh oh it's already there so if we do this and just change this id to 1 now you can see that we actually get tim's list because again the way this works is we go to urls we type some number it gets that number it passes it through this function as the value id we're just going to say we're going to go the similar thing we did in the command line well todo list we'll get all the objects of type todo list we'll get the one that has id1 and then we will simply take the name of that and print it to the screen or show it on the screen now again i can change this from id and i can make it name and i can make the name like tim's list so you'd have to type that in to get it so i mean we can show that as well so in this case let's just do string and then we'll do name and now we'll just have to make sure that when we type it in our link bar here that we actually type everything correctly and make sure i save all this too we type the name exactly like this so if i copy that and i put this here you can see that again it's showing up tim's list and we're not running into any issues but if i try to do like two here you can see that we're getting an issue because there's nothing with the name two in our database awesome so that's pretty straightforward that's how we get items and show them on the screen in the next video we'll do way more advanced stuff with this but if i want to get the items that are associated with the todo list and show those as well well what i can do is uh well let's go back to uh no we'll just leave it as name so we don't need to change it now we'll get the items so to get the items we're going to say items equals and then in this case todo list or actually ls because we've already got the todo list dot item underscore set and then dot all and then what we can do is we well we know we only have one item so let's just get the first item so yes we just do dot get and then id equals one and we'll do is change this percent we'll add another one and we'll simply say item dot name or items not name i guess ah this should probably just be item let's say item.name or dot text my apologies okay so now that we have item.txt here we to add another percent in here so i'm just going to put another tag i'm just going to say br and then what do you call it br just standing for go to the next line and we'll add another tag this case is just going to be a p tag and we'll just put percent s like that so now if i go back to my bar here and instead of doing t i do tim's list and i hit enter what's the issue all right so i just realized we actually have to just put this string around item.txt don't know why that is but apparently that was the issue so anyways now if i go back to my web browser and refresh you can see we say we get go to them all now obviously it's a very basic example i'm going to make this look a lot better in next videos and we're not going to have to do like this kind of weird html tagging and whatnot but that's kind of been it for this video i hope you guys have an idea on how to use databases we'll be continually using them adding things and removing things and all that kind of stuff so if you are still confused we will be going through that in future videos but i just want to make sure we get everything set up and working for right now and with that being said i will see you guys in the next video now today's video is going to be a bit shorter and all i'm going to be doing is showing you guys how to use the django admin dashboard this relates directly to databases and how you can see all of your different tables and entries and all of that i'm going to be quickly showing you a few more things you can do with databases in terms of how to delete stuff and how to get um like lists of entries so for example say you wanted to sort all of the entries or say you wanted to get all of the entries that started with a certain letter or something i'll show you how to do that this is known as querying and there's a ton of different commands for querying so i'm not going to be showing you all of them but i'm sure you guys can look them up or we'll probably be using them throughout the series so you will learn them now i'm in my main directory right now my my site directory the first thing i'm going to do is just quickly extend what i did in the last video and show you how you can get a list of different entries and add more than one because this will be good when we go in the admin dashboard to see more than one entry so i'm just going to do python manage dot pi and then shell and what i'm going to do in here is again import uh what he called our model so from main.models import and then here we'll do item and we'll do two to do list like that and now what we're going to do is i'm going to get all of the items in to do list and show you how we can kind of search for certain items so i'm just going to say t equals to do list dot objects objects.all like that or actually let's just do dot objects so now we don't have to keep typing that we can just type t when we want to say for example get all of the objects we can just do t.all like that and then we get a query set that gives us all the objects but let's say we want to search for an object and before we knew how to get one using like the id equal to one but what if we want to get all of the objects in our set that start with the letter t or that start with tim or something like that well there's a way to do that and it's known as filtering so if we want to filter our query set and get all of the objects or all the data that fits a specific criteria we can say t dot filter and then we can name the criteria so in this case i could say name and then i believe you can just do under underscore starts with equals and in this case tim so there's a ton like there's a ton of these double underscore things that you can use i don't know all of them you'd have to look them up to get them all but if i do this and i hit enter you can see that we get the same set because obviously this starts with tim now if i do this again and i say like maybe bob you see we get an empty query set and this is a way that you can check if a specific element you're looking for is in the set rather than trying to get it and raising an exception so for example if i want to get something that has id equal to 2 and i filter that rather than getting an error we just get an empty query set because none of the ids are equal to 2 right so that's how we can kind of check if uh what we're looking for actually exists in the database so that's how you get stuff now to delete stuff is pretty straightforward you just have to actually get that database object first so i'm going to say dell underscore object is equal to and in this case we'll say t dot get id equals one now if i want to delete this very simple we'll just do dell underscore object dot delete like that and if you hit enter we will delete this object so now if i type t again um sorry t.all you can see that we have an empty query set because we've obviously deleted the todo list that we've added so let's just create two more todo lists really simply and we'll just say t t1 equals to do list like this and we'll just say name equals first list and then we'll do t1.save and then we'll do the same thing here with uh what do you call it t2 and we'll just call it second list just so this way when i start doing the admin dashboard stuff which will be in one second then we'll be able to see more than one entry so we'll say second list and then t2 dot save like so won't bother any adding any items that's actually it if you need to get out of this you can just type quit like that and there we go all right so now we've added some things into our database so let's go to our admin dashboard now so how do we do that well our first step to accessing the admin dashboard is to create a login account so right now if we actually run our server and we say python manage.pi run server server will start running we can copy this domain here and we can go to it now remember we actually have this directory or link which is slash admin and when i do this it actually brings me to this django admin dashboard the thing is though what username and what password should we use well we don't have any so we need to actually create one so i'm going to stop running this for a second and what i'm going to do is create a login so i'm going to say python manage.pi and then i believe it is create super user yeah it is so there we go create super user and then in this case what we'll do is just give a username email and password so i'm going to put tim as my username i'll say tim at tech with tim.net and then for a password i'll just do one two three four for now all right uh password is too short okay okay so i'll just use another password then um what is it what is it saying here bypass password okay so it just said that's fine i can use that as a password anyways let's uh now try to sign into our admin dashboard and actually see what we're getting so let's say tim and then my password and click log in and you oh well it would help if i ran the server my apologies on that let's run that and now let's refresh this continue and there we go we are now inside of our admin dashboard now we have these groups in this users database which is actually storing if i go to users and the users that we just created so tim for example right and that's one database that's there same for groups this this is a bit different we don't need anything for that now the thing is where's our other database we created that database and we've been using it that has our todo list in it well we actually need to give the dashboard kind of access to that database this is really easy to do but i'm just going to open up my subline text again here and what we need to do to do this is go to what do you call it our i believe it is admin dot pi inside of what do you call it the main application folder here all right so we just have to start start by importing our models so from models import and in this case we can just import the model that we care about in this case which is todo list because items are going to be stored within a todo list and then we just do admin dot site dot register and then in this case we do to do list which means that now we will actually be able to see the todo list on our admin site uh so that's that's all we have to do for that so now this should actually automatically have updated but it may not have yeah it did not so let's just rerun our server quickly oh there we go it says reloading okay so now this should hopefully be updated if i refresh this work work work uh i guess not okay so let's just try this again slash admin okay so there we go sorry i've just i've been messed around so now i'm back slash admin and now you can see that under main which is our application main we have the database and model todo list so if i open this you can see that we have first list and second list now this is a quick way as well if you want to change elements or delete stuff you can go in here and obviously you can just click delete or you could save stuff you can see the history of it and all that kind of stuff so that's kind of how the admin dashboard works in terms of viewing your databases i figured i would just quickly show this to you guys because it's a really useful tool to make sure that what you're doing is actually working properly but remember if you create a new application or you're creating a new model you have to actually add that and register it from within your admin.pi file inside of your application so if i wanted to add the items for example then i would have to do item the item model and i would have to import item so let's just try that quickly and make sure everything's working with that wait for this to uh refresh here if i do this let's go refresh all right maybe we'll just end it and then reload oh and all right it says reloaded so let's try this i go here and i refresh this now you can see we have items and if i go to items obviously there's nothing because we don't have any items so anyways that's been the admin dashboard in the next video we're going to go into templates which will be a much longer video on dynamically showing these kind of this information on our website so today's video what we're going to be doing is covering templates so templates are essentially a way to make your html actually look good and display it on the screen they're really nice in django because you can actually put your own python code and you can pass variables through to your templates which means that you can make dynamic html which will change based upon whatever you pass to it which is really nice so it's a really easy way to connect your kind of back end with your front end and that's one of the reasons why a lot of people obviously love django is because of the fact that you can do stuff like this now i just want to quickly go over what i'm going to be doing in the rest of the series for some of you that were asking i have plans to make a video on how to add a proper sidebar to your website how to do forms because forms are actually their own thing that are kind of complicated in django but i want to do a whole tutorial on that i want to do user registrations like login register sending emails all that kind of stuff and then obviously near the end of the series we'll get into more videos longer videos where i'm not just doing features but i'm kind of working on development of the website and actually probably hosting it using heroku or something like that and showing you guys how to actually deploy this and hopefully for free online so if you guys are excited about that please make sure you're leaving a like on the video and letting me know in the comments and with that being said let's get started with templates now if you remember where we left off we had it so essentially we could view different parts or different todo lists from our database by typing the integer into our bar and that's really all that we had now what i'm going to do in this video is create templates which will allow us to see our todo list on the screen in somewhat of a nice form and in future videos i'll add bootstrap onto the website and start doing some custom css classes and stuff but for now we're just going to use plain html and then we'll design and style it all after because styling is really a pain and it takes a long time so the first thing i'm going to do is i want to create a home page for my website so right now we have this um this page where you type a number you can see it but we don't have any home page so let's do that first so i'm going to add a link here which is just a blank string and i'm going to do views dot home and name equals home like this and then inside of our views file here so views.pi i'll create a new function called home so define home and then we'll have response and we don't have any variables so that's fine and in here i'm just going to pass for right now as we're not finished coding that yet okay so templates so right now what we've been doing is we've been uh passing http response to our views so that's the way that we're literally putting the html in here like you can see the tags right now this is obviously not an efficient and not scalable way to make a website so what we're going to do is write our own html files and then we're going to load them up from here actually render them and display them to the screen so that's what we have to do first so the first step to do that is actually create a directory called templates inside of our application directory so inside of main here i'm going to go to new folder and call this templates like so so if we go in main now i got this folder called templates and now inside of this folder templates i'm going to create a new folder called main okay now this might seem kind of weird how we have main and we have templates and we have main but it just the way the jangle works it's really weird i don't really want to explain it is you just need a folder inside here with the same name as your application to load the templates so that's what we're going to do so now inside of this folder is where we're going to put our actual html files so let's create a new file and let's just start coding some html and i'll talk about what this is going to be compared to our other templates so let's just set up an html document here html and you know let's save this as base dot html and we'll talk about why i'm calling this base in just a minute so in here now i'm going to add some head tags uh like that and then we add some body tags like that so inside of our head we'll simply just start by adding a title we will be adding a lot of other stuff into this later in the video but for now we're just going to keep it nice and simple for demonstration purposes so i'm just going to call this tim's website and then inside of my body tags i'm just going to create a paragraph tag and we'll just call this base template okay so that's all we're going to do for now inside of that template and let's create one more template inside of here and this one we're going to call home okay so if i save this and i say home dot html like that and hit enter then in here i'm going to talk now about template inheritance so a really nice thing with django that makes building websites super scalable is they have something called template inheritance now right now i've created this template and i've called it base.html and what i want this template to be is well the base or the standard layout of every single one of my web pages so for example okay so let's just go to uh instagram or something and i can show you what i mean by a base template uh in terms of this so for example a base template for instagram is this like bar up at the top like every page you go to has this at least on the website right it has this instagram it has a search bar and then it has these icons and then obviously it's going to be different depending on what page you are or what account you're on what it's going to show but the base template would be like this top aspect okay so what i want to do is create a base template which will have something that will be on all of my web page so for example on my actual website if i go to techwithtim.net you can see that this up at the top here this bar would be and actually what do you call it this logo thing as well is the base template it's on every single page so what i want to do is make sure that i don't have to actually code that in to each html file that i make because think about it if you have like hundreds of html files i don't want to have to code in that menu bar every time so what we're going to do is we're going to code all the stuff we want in always on the website in what's known as a base template and then we're going to inherit that template with just one line of code from all of our other templates this one's our base and this is going to show up on all of the pages unless we override it from the child templates so to actually inherit this base template what we do is we use the kind of the django syntax here which is we open and close a curly brace it and then we put two percent signs like this and inside of here we type extends and then we're going to actually put in single quotes main slash and then in this case base dot html now we just need to include main here because inside the main folder and what this means is just like in java extending a class you're going to extend this template essentially take everything from this template and use it here now you're going to say well how do i change stuff in here well we're going to get to that in a second but let's demonstrate this first so now that we've done that what we need to do is actually render and use these templates so i've got to go back into views here and right now you can see that all we're doing is returning this http response so what i need to actually do is render my templates so to do that i'm going to remove http response we're actually not going to use that anymore we're going to use the keyword render and then here we're going to put response which lines up with this parameter here we're going to put the template location so in this case main slash and we'll do base.html for this one okay and then we'll do a comma and we're going to put a open dictionary okay now i'll talk about this dictionary more later but for now it's uh we're just going to leave it blank now we're going to copy this return i'm going to do the same thing in home except instead of base i'm going to do home.html and that's actually going to be all we need to do to show these html templates that i've created it's pretty straightforward to do this so now obviously i'm going to have to run my site so let's i got to activate my virtual environment one second here and we'll just do python manage dot pi run server okay so i didn't make any mistakes it doesn't seem like so let's load up google here and let's hit enter and now you can see that we've directed to the home page and we get base template okay now so let's see how this worked so when we went in urls we didn't type any number so we were past just that empty string so what we did is we navigated to the home page so the home page is right here this is the function and what it does is it renders this home.html file so now we go to home.html and in here we can see that we're extending the base.html file which means we're going to use everything from that so what we do is we go to base.html we say okay this is what base.html looks like let's use that and then it uses that and we get base.html so now let's try using for example one now before when we used one what happened was we saw the todo list and the item now we're not going to see that because we haven't programmed that into our html but just notice what happens when i type slash one uh query does not exist okay of course it doesn't exist anyways just pretend like that popped up i'm now i'm frustrated why that didn't work because we the todo list there's no todo list that has id1 apparently um that's interesting let's try two or something and see if that works or zero because this should really be giving us something two there we go okay two so apparently the object we have in there has id2 so anyways now that we have some object we have id2 you can see that again it's showing this base template because we're rendering the base.html template from our index view and when we went to urls we typed some number so we went to index and we passed in the id as that number that we typed into the address bar perfect that is literally how templates work in terms of rendering them now it's time to show how we can make some dynamic templates that i'll actually change based on what you're typing so obviously right now so this one's rendering our base.html this one's rendering home.html in previously we had passed through some value which was our todo list name and we displayed that on the screen so how can we do that now using templates well inside of our templates so this is base.html what we can actually do is we can use some variables that are passed from views and we can display those in our html so for example rather than putting base template here say i wanted the base template to show uh all of our what do you call it sorry our different todo list then what we can actually do in here is we can put two so we can of these so open and close curly braces to them and inside here we can type a variable name and then we will pass that variable in from our views so for example if i want the todo list name maybe i'll pass that in as the variable name so i'm going to put name here now what this means is we're going to be using a variable called name now what i need to do is i go inside views.pi and i say okay so we're using a variable name we need to give that variable to our view to do that we use these right here this dictionary so we are going to type the corresponding name so name here to what we've typed in our html and then we're going to do a colon and put the value that we want to pass whoa what just happened with my lights one second guys sorry something just happened okay anyways um now what we're gonna do is we're gonna do ls.name so we're gonna say the variable name inside of our base.html corresponds to ls name now because we've done that there we're going to run into an issue in our home one because we're looking for some variable name inside our base html but inside our home html file we're extending base which means we need to pass that variable as well so for right now this obviously is not ideal we're going to change this in a second i'm just going to put name and then in this case i'll just say test just so that we actually get something that's working but let's try this out now and see if everything is the same so if i run this now you can see that instead of showing me nothing or showing the base template it's showing me first list which is the name of our first list and if i go to the home page you can see that we just get tests because that's what we've passed in as a variable so that's really the easy way to pass variables is through this dictionary here and it's nice because you don't actually have to type the dictionary here like you can make like my underscore dict equals and then you can update it with a for loop or you can pass a ton of different stuff into this dictionary and then just put for example my underscore dict here and it'll work the exact same way okay so now we've done that we've kind of understood how this works now let's go back in templates and talk about some more advanced stuff that we can do so for example ideally we've kind of messed this up a little bit because inside of our base html we're displaying um what do you call it the name of our todo list we probably don't want to do that because on our home page we probably want to say something else right or we just our base page probably shouldn't do that so what i'm actually going to do inside here is i'm going to set up what's known as a content block which can be over overrode from other templates and you'll see how this works in a second so if i just do my two percent signs here i'm going to type the word block and then give it a name so in this case i well i won't do name i'll do block content and then what i'm going to do under here is i'm going to do two signs like this and i'm going to say block uh or sorry end block okay now just for good practice i will put this inside of a div so i'm just going to say div and i'll say id equals in this case uh content and then name equals content just in case i want to reference this later we'll do that and we'll just end the div here so tab that in and now what i'm able to do actually is from inside my other templates that extend this template i can pick what's going to go inside of this block so for example the web title is always going to be the same but if i want to put something specific inside here depending on what web page you're on i can do that from other templates so on home for example i probably want to say like home page or something like that so to do this i'm going to do a very similar thing to what i've done here i'm literally just going to type the same thing i'm going to say block content okay and then i'm going to close the block like this by saying end block and inside here i'm going to put a parrot or actually i'll put an h1 tag and i'll just simply say uh we call it home page like this okay so now i'm just going to go in views and i'm going to remove this these uh variables from here because we don't need them anymore and let's run this now and see what we're getting so on the home page if i hit enter you can see now we're getting home page so what we've done is we've said okay so this is our base template the content for each of the pages that inherit this is going to go inside of this block content so if i go here and i type block content i can put whatever i want here and it's just going to paste it inside of here for me now this works the same with other kind of blocks you can create more than one block and you can choose whether you want to use them or not so for example if i want the title to be different what i can do is inside of here and there's no really limit on how you use the blocks you can use them however you want i can say block title and then here i can end this block again and you always have to end your blocks you can't just leave them open otherwise you're going to run into some issues do end block and then i can set a default title in here if i wanted to for example tim's site like that and then here i can make this block again so if i i'll just copy this actually and paste it up here and name this title and then here i can just name it whatever i want so in this case i'll just say home okay so now what's going to happen is this block title is going to be again overridden by this and it's going to put that as the title of our webpage let's try this out and you can see that now up here at the top it's changed to home as opposed to tim's site now if i go to like slash two you can see there's nothing here just because i haven't set any base stuff to show up inside of my base content if i wanted something default to show up what i would do is just type like hello or something in here and then that would show up but that's how the blocks work and that's the first step to kind of template inheritance now i'm going to show you how we can actually write code inside of our templates to do things more dynamically so this base.html file is fine this home file's fine but i actually don't want to be using this base.html file inside of my as one of my views i just want to inherit from it and then customize it from each individual view so what i'm going to do is create another view or another template my badge sorry and i'm going to call this file new file and we will call this one um is should we call it view i want to view the todo list so maybe we'll just call it like list like that okay list.html and what this is going to do is display our todo list for us so the name of this todo list and then each item on the do list it's going to display that in a list form that's what i want to do so i have to start by extending from my base.html so really simple again extends in quotes i don't think it matters if it's singular double quotes and then we'll say main or base.html like that we'll set up our blocks so our first block is going to be uh the title block so my percent signs so block title and then here we'll go and block like that then inside here which our title be maybe we'll just say like view view list or something we could change that later if we want and we'll set up our content block which will be actually displaying the list for us so block content and then inside here we will obviously end the block and then inside of the content what i'm going to do now is start working with some variables that we pass in from views so actually the only thing we really need i guess is we can say ls is ls and then from there we can determine if we want the name here if we want the items we can do all that kind of stuff so let's start by just doing an h1 tag which is the name of the list so to do this i'm going to do h1 and then in here we'll put remember our two curly brace sets and we're going to say ls dot name okay because we're passing that ls object so we can call any methods on it that we want inside here so we have the name now but we also want all of the items and here's where things get a bit tricky kind of tricky but actually just really cool and how they work so we could technically have infinite items we don't know how many items we're going to have so we need to loop through all of the items and then display them in kind of a list form so to do this we're now going to start actually writing some code some python code python ish code inside of our html file so i'm going to write a for loop i'm going to show you how to do this for loop inside of your templates you're gonna start by literally just typing the four so you could say four and in this case i'm gonna say item in ls dot and then item underscore set dot all now some of you might think you need brackets here for some reason when you put the brackets you run into an issue so if you're going to be looping through something don't put the brackets like that just leave it like this and it should work so if you're running into an issue that says something like it can't decipher these brackets just get rid of them and that should work for you that's an issue that i was running into we need to also end this for loop so i'm just going to type n4 here and now inside of here i'm going to show you what we do to display a ton of different items using a loop so essentially i mean maybe just a little indent this to be a bit nicer inside this for loop i want every time this for loops runs to get the name of my item and display it on the screen so to do that i'm going to set up a list so i think what i do is i do ul i haven't done html for a while so this could be a little bit rusty do ul which stands for our list okay and then inside here what i'm going to do is i'm going to say li like this we'll end that li tag and then in here we're going to use a variable but our variable this time is going to be item dot text okay because we're gonna get the item which is that item object in our database from the item set of our list and then we'll display that as a list item now i don't even know if i have any um items in my list so we might have to add those in a second but that's fine we can deal with that when we get to it so now that we've saved this let's make sure that we're actually going to return list.html from our views so instead of returning base let's change this to list and then let's run our site here quickly okay so we get first list and we don't we're not running into any issues but i'm pretty sure the reason we're not seeing all of the different items is because we don't have any so if i want to add some let's end this and let's add some items to that list so i guess to do this now i got to refresh my memory is we're going to go python manage.pi shell and then i need to import from my database so from import main dot models alright it's from main dot models from main dot models we'll import to do list like that and then what we're gonna do is we're gonna say i guess we'll say ls equals to do list dot objects dot get id equals two we'll print ls out we see we get first list so let's look at the item set quickly so item underscore set dot all we don't have any so let's add some in there so item set dot create and in this case i guess what do we just need we need a text for that right so we'll say text equals and then in this case we'll say first item and i guess we'll do complete equals false okay so we added that let's actually add another item and we'll call this one second item and while we're at it let's do a third one okay so now we've done that we can get out of this by just typing quit and then run the server again and then see if we've updated our list let's cross the fingers there we go and now all of our list items are showing up so first item second item third item and that's how you use a for loop inside of your templates and that's really like look how cool that is we don't have to we don't have to type a ton of html we just do a for loop like we would in python we're very familiar with and then we can just type whatever we want inside of the for loop in terms of html and that will show up on the screen for us that's how that works and that's really cool now we can also do if statements and else statements and stuff like that so i will now show if statements um it's gonna be this is a hard example actually what i can do is say we'll do another blocking here and in this case what we'll do is we will only show the item if it's not if it's complete right or if it's not complete because if we're going to have it complete we probably shouldn't show it so first of all i don't know why this is trailing here and get rid of that and then here i'm now i'm just going to do my percent signs again and i'll say if and in this case item dot complete equals equals false and then i will simply end if here so do percent percent and if like that so we always have to end our statements i know it's annoying but if you think about it we're not really working with indentation in these files so it's not going to be able to tell what's in which statement unless we do an end if or we let our we end our statements so we need to do that okay so we've done that and now i will actually just go back into the shell again i know it seems pretty counterproductive and make an item that is actually complete otherwise we're not gonna see that so i guess we're gonna have to import this again so from main dot models uh import to do list we'll say ls equals to do list dot objects dot gets id equals two okay ls dot item underscore set dot create and in this case we'll say text equals not showing and then complete equals true okay so true like that hit enter not showing quit that and rerun the server probably should have done this before guys but you know that's fine so if i run this now you can see that we're not seeing that item that i just created but if i change this to be true okay and save this now and hopefully this updates quickly now you can see that we're only seeing the item that is complete so these if statements work just the way they work in python you can see only the complete items only the not complete items and yeah that's really how you do that we can also do um like an else and an elsif and stuff so if i want to do an else statement in here i can just type else and then put whatever i want underneath the else and we don't need to type end else because ending the if will tell us that we're done the entire kind of chain statement so what we'll do actually and this is kind of interesting as well is inside of here we'll do the item.text if it's complete but we'll do an all capitals complete after it just so we know that it's finished otherwise we will say incomplete like that so let's try running this now and see if i made any mistakes or not okay so there we go so we can see first item incomplete second item incomplete third item incomplete not showing complete awesome so that is essentially the basics of templates how we do the kind of inheritance for them you can obviously have a template inheriting a template that inherits another template and in future videos we're going to be making these look a lot nicer i just want to give you guys the basics here and make sure everything is working in fact let me make sure the homepage works i forget if i showed that okay it does so anyways that has been it for this video if you guys enjoyed please make sure you leave a like and subscribe if you need any help or anything feel free to leave a comment down below i'm always answering those and i love to chat with you guys so in today's video what we're going to be doing is talking a bit about forms now forms are essential to any website an example of a form of something like a login form or a create new account form or maybe a create new todo list for our example here so we're going to be doing today is just making a form that will allow us to create a new todo list and then in the next video we will create a more advanced form that will allow us to add items to our existing todo list so i want to make a way essentially right now that we can create a new todo list without having to use the command prompt i just want to create a web page that'll allow us to do that so what i'm going to do is create a new page on our website called create that will allow us when we go there to create a new page using a form so what i'm going to do is start by setting up a path to that page creating a new template and then we will work on the actual form itself so in this case i'm just going to say that create will be where we want to go and then we'll say views dot create and we'll name it create like that i think i can just probably just put create like that too but whatever that's fine okay so now that we've done that let's go into our views file let's create a new function we'll say define create we'll say response like that and then in here we're just going to return the same thing but we'll just change the file name to be create.html and we'll create that file right now so we go inside of our main file here i'm just going through this quickly because we've already essentially done this a bunch of times i'm going to extend so this extends and in this case main slash base.html and then we will have to do those blocks or we don't have to but we will do those blocks so in this case uh block title and we'll just call this create new list and then we will end the block like that and i'm just going to copy this and put it down here but just change the name of the block to be um what do you call it content like that okay so now i'll save this as what if we want to create dot html and we have created the template for our uh what do you call it create page so in here i'll just say create page and we will add the form content into here afterwards so now that we've done that we should have a page on our website uh essentially that when we go to create it'll bring us to this html page which extends obviously our base.html uh and to give you a reminder this is what our base.html file looks like okay so what we need to do now is actually create a form that will show up on our create page now when you create forms most of you are probably used to doing something like this where you go in the html and you actually code the form yourself so for example you do form you're going to say method equals maybe we're going to say post in this case and i'll talk about the different methods in a second you're going to say action equals and in this case we're going to go back to the same page and then maybe you make a button and that button is type equals submit maybe it has a name uh equals like save or something and then you end the button and maybe you do something like that so like this is an example i'm just doing this because we're actually going to need to do this but you guys get the idea that this is typically how you create a form and then above all of this you're going to do all of the different fields in your form so for example you've got a username and password you do an input field for username input field for password you give them some labels some names all that kind of fun stuff now django makes this a lot easier because all we actually have to do is pass in a variable called form and django will actually generate the html for the form that we create for us now this makes no sense right now because we haven't created a form yet but what we're going to be doing is passing a form object so we'll create our own form class and we'll create an instance of that and pass it into our html and it'll generate the html for those forum fields for us so for example if we had username and password this is all like whatever form we pass in here will automatically be generated for us you guys will see how that works in a second the only thing that we need to do when we're creating a form is make these form tags like this and then add a submit button that will um well submit the form for us that's all we have to do so now we actually need to create the form so this will start making sense now what we're going to do is make a new file inside of our main application directory and we're going to call it forms.pi so let's save this as forms.pi make sure we're in the right directory and what we're going to do uh at the top here we're going to say from django import forms and now we're going to create a class and this class is going to be called whatever we want our form to be called and it will define the attributes and the fields in our form so i'm going to call mine create new list and in here we're going to inherit from forms dot form which will allow us essentially to have the form automatically generated for us and to do a lot of cool stuff which we'll talk about later so i'm gonna set now the fields for my form now these fields are the exact same as the fields in your database so for example like boolean field integer field anything like that but what we'll so the way we do it essentially is we say forms dot in this case i want a character field for my name so i'll say character field or char field and then in here i need to give it an optional argument or i don't need to then but i can give it an optional argument of label which will be what shows up before the little box so that it um you know we know what we're typing in here and then we can give it a max underscore length as well which i believe is required and i'm just going to set this equal to 200 characters because that's probably all we need so essentially all we're doing when we create a forum is we're just going to list all the different attributes that we want for our forum as class variables underneath the the class so if i wanted another attribute that maybe was like a check button or something like that what i can do is i could say like check equals forms dot boolean fields like this and that's all i have to do and now when i pass this form into django it'll automatically create not only a name uh what do you call it a name character fields like text input it'll also create a boolean field which would be like a check button and then we could do other kinds of fields as well and if you want to know all the different types i'll leave a link here in the description to all these different kind of fields that you can use okay so that's how we create a form if you wanted to create another form same thing you would make another class and do all of the different attributes you want in that form and we'll get a bit more advanced with it actually in the next video as well so anyways now we've created a form so let's go back to this views.pi file and let's now actually pass this form into our create.html so we're obviously going to need a variable called form here and we're going to have to pass that in so what i need to do now is essentially i need to create an instance of this form and pass it to my html so to do that i have to start by importing that so oh i already imported it here but anyways just do from dot forms import and then the name of your form so my case create new list and then what we're going to do is we're going to say form equals create new lists like this now what this will do is create a blank form and we will pass that into our html and it will know what to do with it and generate the form for us on that create page so let me show you this working in action now so i'm just going to run my server i'm sure you guys know to do this by now and if i go to this link here actually when i go to slash create you can see that now we get to create new page you can see that we have a name we have a check button and we have this create new button so that button was the button that i created but this name field we didn't make this check button we didn't make django automatically generated that for us now notice that obviously these don't look great we want to add some html to them we want to add some css we want to do all kinds of stuff i'm going to show you how we can do that later but just know that django is capable of automatically generating all of the html for your forms so so before we go any further into how we're actually going to get information from this form because right now we have we're not actually doing that and it's not going to work if we actually try to submit this form i will show you how we can look at the form in a different way so for example if we go to create.html here there's a few default layouts for our form so we have as underscore table which is what is actually showing for us right now we also have dot as underscore p which will mean that the form will go like vertically down so all the items will keep going down and then we have as underscore ul which means the form is going to show up on little dots like as a list item so these are a few different ways that we can show the form um just looking like a little bit different so if i do as p for example i believe we're running the server right now and i go here and refresh you can see that now it looks a little bit nicer in terms of we have the name and we have the checkbox and they're just right after each other in new paragraphs now i just want to show you that if i try to hit this button notice that we get this little police fill out this field nice looking javascript actually pops up now the reason this does this is because django is generating the form and html for us if we had created our own form we wouldn't have we wouldn't see this this nice popup text right um so that's one of the advantages of using the django builtin forms although i will show you kind of the limit some of the limitations you may have with that now if i go to if i hit this um check box same thing you can see even when i'm hovering over it we get like please check this box if you want to proceed like stuff like that right now notice that if i type something in here and i hit create new it says please check this box well this box might be an optional checkbox if we want to make this not a required field then what we can simply do to do that is go into our forms and inside boolean field here we can say required equals false and now if i refresh um the website here it you see when i hovered it's not saying anything and if i type like something in here and hit sub hit create new it will work now i'll show you what happens right now when i do this and how we can fix this so when i do this it says we get a csrf verification failed now that is because whenever we're creating a form inside of our html we need to actually add these tags and i'm about to show you so essentially we need to just do crsf underscore token every time that we create a new form inside of django this just needs to go inside of our form tags don't ask me why because i honestly don't really know it's something to do with security in terms of like verification and validation and stuff so just put that in here whenever you create a form so when you try to submit it you don't run into any issues okay so now that we've done that it's time to actually start creating new todo lists based on what the user types in so now it's time to talk about the difference between post and get requests so if i'm going to go to i'll go to views.pi for right now and we need to talk about post and get so there's two different ways to send information to the server and that's essentially what our form is doing when we hit submit submit what's going to happen is going to save all that information that was in our form it's going to bundle it up in some kind of way and send it to the server now there's two main ways of doing this post and get now the reason this like the reason they have two different ways is because there's two different functions for each of them typically technically you can do anything with get that you can do with post but they have different security reasons behind them so for post is you're going to want to use post essentially whenever you're doing something that's kind of secret so for example getting a user's password if you're sending that to the server it needs to be encrypted because otherwise if it's not then other people can very easily see the password and change it and do all kinds of stuff so you're going to use post whenever you're essentially doing anything that's kind of secret or the information needs to be encrypted when it's sended sent to the server now you also use post whenever you're making any modifications to like the database or anything like that you use get when you're just trying to simply like retrieve information so for example say i type in um like the id of the what do you call it the todo list i want to get well we could get that using a get request not a post request because we don't like everyone can see what the id of the todo list is that's fine we don't care about that information what actually happens when you use get is all of the information that you type in the form gets pasted in the url so when it goes to the next page it just simply reads the url and gets that information whereas post actually hides the information encrypts it and sends it to the server now i'm oversimplifying exactly how these work but i want to make sure you guys understand that you're saying post and get if you're unsure just use post but the reason you would use get over post is for example say you want to bookmark like a search result or something or you want to save some information which is a specific url then you would use get because i don't know like i'm trying to think of a good example if you ever go you ever go to any links like let's go to youtube for example and then youtube.com in this case i say like search equals tech with tim you ever see something that looks like this this is what's known as a get request where the information that the user typed in in this case it would have been in the search bar for youtube gets pasted in the url and then if you hit this i don't think this is going to work because this is obviously not the way you search for something on youtube um but it just gives you that page right whereas if i'm going to be typing in my password it's not going to save the password up in this bar because it's going to use a post request and obviously the reason we use this get request is because maybe we want to save these search results and bookmark them and we wouldn't be able to do that if we're using a post request so anyways that is how posting get works i'm sure you guys are already confused if you have any questions let me know but i'm trying to explain it as best as i can so anyways when we use this um what do you call it this create window or this create page we are going to use a post request because we want to encrypt the name of the what he called the todo list that you are creating and because we're going to be modifying the database we need to use a post request so anyways all we have to do we don't to touch anything in here because we've already set that the method is going to be post but what happens when we have post and get requests is they are actually passed through this variable to our view so our view knows or can tell based on this variable here whether or not we are trying to post something or we're trying to get something when we access this page so to check this if we've passed a post request or a get request what we do is we say if response dot method equals equals and in this case post and this will tell us if we are trying to make changes we're passing information from the form back to this page so if we're posting we're going to be doing something different than if we are getting so those are the two requests right post or get by default it's always get but whenever you're changing something you're going to use post so anyways we're using post now so if we're using post what we need to do is the following we have to say form equals create new list but in here what we're going to do is we're going to say response dot post now what this does and what this is holding is all of the information from our what do you call it from our form so essentially when we get this response.post it's going to contain a dictionary that has all of the ids of all of our different attributes all of our different inputs and it's going to save the values that you typed in them so when you pass this to create new list what it's going to do is create a new form that has those values populated in them so by default right if we go to forms you can see that we don't have any default value for the character field or for the boolean field so what's going to happen is it's going to automatically set those values to what is received here and then we can start doing things with this form and validating it and creating a new todo list so now that we've created this form what we'll do is we'll say um what do you call it here we're going to say if form dodge is underscore valid what we'll do in here is now we will create a new todo list and add that with the name that was given to us so we're going to say t equals and then todo list and we'll say name equals in this case we'll say n up here say n equals form dot clean underscore data name now i'll talk about what this is doing so essentially our form is going to take this post it's going to get all the data from the form and then we're able to access that data by just using it like a dictionary so you do cleaned underscore data you're just going to clean up the data for you unencrypt it and then what you do is you type the name of whatever the field that you want so in this case we named our name so we use name and then we can get that data and we can use it to create a new todo list and then save that todo list like that and that is all we need to do now so that when we use this form every time we type in a name that's valid it creates a new todo list now this might be a little bit confusing but i hope you guys kind of understand it this is valid method is automatically created and exists because of the fact that we're inheriting from forms.form and this thing is amazing and what it does is just automatically checks all of the fields that you've defined to make sure that they have valid input if they do then this is valid will return true if they don't it will return false and obviously you were seeing that it was telling us what was wrong with uh all of the different fields when it was incorrect so let's go back to create now let's click uh i might have to rerun the server here we'll see i've saved this save all this stuff and i think that updated anyways we'll check here quickly so i go back to create you can see now we have create page we have name and we have a checkbox so let's now do like create a new todo list called tim let's say create new and what will happen now is essentially we have created a new todo list called tim now you might not actually be able you can't tell that we've done that but that is precisely what we've done now we can create more todo lists i'm gonna say like uh new todo list tim we could say like joe create that uh and that has created a new todo list for us so now let's actually show that todo list right after we create it so for right now all we're doing is just returning the form with whatever information we passed in it but what we can do is we can say that all right if we're saying response is post instead of returning that form that has the name of the todo list we just created let's redirect to that todo list so you can see what it looks like so to do that what we can say is we can say return http and instead of saying response this time we'll say http and then response redirect if i can get my capitals working here redirect like that and then in here all we have to do is put the page we want to go to so in this case i'm going to say slash and then i like a percent i i'm going to say percent and in this case i'm going to say t dot id which will be the id of the todo list we want to go to now i also just have to import this http response um so i'll do it up here so from django.http import http response redirect and now what will happen is instead of returning this form and returning the main dot create html page we will redirect to the page that we've defined here which will be the id of the todo list we just created so now this should have updated it did so let's try this again with joe and say create new and we are redirected to the page that displays joe to us right uh and that is essentially how that works so that is the way that you create a form if we wanted to um let's say get more information from the form what we could do is print out um like if the checkbox was hit or not we can do all kinds of stuff you can obviously create more than one form by doing multiple forms in here you can have more than one form on each page with different submit buttons all that kind of stuff in the next video i'll talk about creating custom forms so modifying some stuff maybe making some things look better and then in future videos we're going to be adding bootstrap to our website and we're doing login forms all this kind of stuff so if you guys don't get it now we will be going over more of it in the future but these are just kind of the basics of django forms so today's video we're going to be going a bit more advanced with forms i'll be showing you how to create your own custom forms that are a bit more dynamic than typical django forms that we were using in the last video using that forms class and whatnot so yeah i guess let's get into it so the goal today kind of is to allow the user to add an item from their todo list so right now we don't actually have any way for them to add items we only have ways for them to add new todo lists so we're going to do that we're also going to add some check buttons beside the todo list items so we can show whether or not they are complete or incomplete without having to do this incomplete complete kind of thing so right off the bat i'm actually just going to delete this incomplete and complete for now and i'm going to start setting up a form inside of my html file here now the reason we need a form is because we need to pass the information like whether the user clicked a check button or whether they what item for example they typed in to add to the list we need to pass that back to our view using a post request so we need a form to do that so i'm going to start by creating a form i'm going to say method equals and in this case post and i'm going to say action uh what do you call it equals pound like this okay or number sign whatever you want to call it now i will simply close my form by doing that and now i'm going to start by just setting up some buttons at the bottom of my form that says save and let's say add item so what i'm going to have is i'm going to have two buttons save add item save is going to save you the changes to your checks and add item is going to add the item that we will get from a text field that i'm also going to add so the first button that i'll create will be that save button so to do that i'm just going to say button i will say type equals and in this case what do we need type for a button yeah we do we'll say type equals submit we'll say name equals and in this case it'll just be save and i'll say value equals and i can say save here as well now when i close my button i'll put whatever i want to display on it here so in this case i'm going to say save and i'll copy this actually and i'm going to just use the same thing except instead of name i'm going to say new item i don't know why that tabbed there and we'll give that value of new item as well and obviously now i'm just going to make this add item i mean i could make a new item too it doesn't really matter and in between here i'm going to add an input field which is my text that you're going to type in for when you create a new button so i'm going to say input we'll say type equals text and we'll say name equals i guess we could say item why not uh i know it's probably not the best name actually let's just say new all right news probably not a good name either but whatever that's fine okay so type equals text name equals new and sweet now what i'm going to do now is add those check buttons in beside all of our items so obviously if our item is complete we want that check button to start off as checked and if it's not we want it to not be checked so to do this it's similar to the text we're just going to say input we're going to say type equals and in this case check box we'll say value equals clicked and you can call this whatever you want but just remember this name because we're going to need to use this i'm going to say name is equal to and this is a little bit weird but we're going to set the name equal to the id of our item so to do this what i'm going to do is just go in here and say item dot id and before that i'm going to put a c so that what we're going to do now is we're going to say all of our check buttons because this is going to create a bunch of different check buttons right they're going to be given the name c and then whatever the id of that button is this will just make it way easier for us to determine which check button was checked and what item that corresponds to and you'll see how we do that later so let's copy this now and i'm going to put it right here as well so inside these li tags now the only difference is up here where it says is complete if item.complete equals true i'm just going to type checked like this which will default it to start off checked that's all that's going to do for us okay so now we've actually set up this form the last thing to add is our csrf token that we always need to add whenever we create a token or a form sorry so csrf underscore token like that and then hit save so now that we've done that our html will be showing up all nice and now we just need to handle this from our view so remember our view is called index so what i want to do in here now very similar to create is i want to first off start by checking whether or not we have posted something or we're getting something so if we're posting something we're going to say if and then this case response dot post or not post sorry dot method equals equals post like that then we will start doing all the stuff in terms of saving and adding items now i want to quickly go back here and talk about something for a second so right now we have two buttons we have save and we have new item and these buttons might have different functions and they do in this instance so for example save well we only want save to look at and update the check buttons right that's what it's going to do it's just going to update your check buttons if you've completed an item or if you haven't completed it whereas our new item button or add item button is going to take the text from this text field and add it as a new item on our list so we need a way to determine which button we clicked so we can determine what function we're going to perform so to do this what you can do actually is you can say if response dot post dot get and then here you can put the name of your button so in this case i'm going to say we'll start off by doing save save like this okay now what this does actually is whenever you get a post request from the server what's going to happen is all the information in this form here is going to be passed in what's known as a dictionary to our view so what's going to happen is we're going to get a dictionary that looks something like this so we'll have save and it will either have no value or it will have a value of whatever we typed here's value so for example save if we click this button what's going to happen is it's going to be added to a dictionary which is all of the information from this form and it's going to be given this value only if we click it so what's going to happen is we're going to get the name save points to the value save and it's going to look like this precisely okay we're also going to get all of the information for our check buttons so what will happen is we'll get something like c1 which will be that id right c1 and that'll point to in here it'll say and i'll print this out after you guys can have a look at it it'll say clicked if we clicked the check button if we didn't click the check button we're just going to get a blank string or c1 might not even show up in the uh the dictionary okay so and then we can also try what do you call it for example like add item we can do the same thing with add item now the thing is if we clicked add item then it will come in and it will give the value of add item otherwise it won't give us any value just give us a blank string and you guys will see how this works in a second i'm going to print it out for you so you can have a look so let's actually if we are posting let's print response dot post like that so you guys can have a look okay so anyways so we're going to see if we are saving so if we're saving then this will evaluate to true because there'll be some value so that'll just work otherwise we'll say what do you call it l if response dot post and dot get and in this case instead of saying save we're going to say new i think was it new item i keep forgetting what i call this yes new item awesome new item okay so we'll just pass down here for now and let's work inside of this first one up here so what we want to do up here is we want to look at all the different check buttons and determine whether or not they were clicked or not and then update our item accordingly so to do this what i'm going to do is i'm going to loop through all of the items in our current todo list because we still have this value up here and we're going to check the ids of that with the check buttons and see if it was clicked or not so to do this i'm going to say 4 i guess we'll say item in in this case ls dot item underscore set dot all with lowercase l's okay then what we will do is we'll say if and in this case response dot post dot get and here what we're going to do is we're going to say c plus str and then item.id now what this is doing is getting the item id converting it to a string and adding a c to the beginning of it so we will get the exact same kind of pattern of what do you call it names or ids as we're setting up here right so we have c in that item id that's just what we're doing here so if we get that and that is equal to the value of clicked then what we need to do is well we need to update that item so we'll say dot complete is equal to and in this case true now otherwise so if we didn't get that or it wasn't equal to clicked we'll take this but we're going to set it equal to false so this is the same as like if you unclick the check button and it doesn't um it's not check mark then this will run right here what i'm doing now and then all we can simply do down here is just say is actually inside the for loop we'll say item.save and there we are sweet so that's how that works and that's actually it for this uh saving the check buttons now what's left to do is to add a new item this is uh it's similar in terms of how we do this but what we're going to start by doing is getting the text that was in that text input field here so the name was new so say text is equal to and in this case response dot post dot get and here we'll say new and now what i'm going to do is before i add this new item because this will give us the text i want to validate that this is valid input now you can do whatever checks you want on this input and usually django will do it for you but since we're not using django forms using our own custom form we don't have that option of using is valid like we used here so what i'm going to do is just say if text and this will actually say len of text is greater than two so it's at least three characters then i will simply add that item to the todo list so to do that i'm going to say ls.item underscore set dot create and in this case we'll say text equals and i'm actually going to have to rename this to txt here i will say txt and then we'll say complete equals false like so uh otherwise i'm just going to print out a message that just says like invalid input just so that we can have a look at this in the console and that should actually be about it now i'd be surprised if i didn't make any mistakes but let's give this a run i already have the server actually i'm gonna have to run the server again here run the server so let's now attempt to go to like id2 so now we can see we have first item second item third item not showing now if i decide to check an item or uncheck an item and hit save uh um what is your issue here name respawn oh well it would help if i spelled response correctly where did i misspell that re of course in the print statement anyways let's see if this will update now python managed up high run server did i make another mistake let's see two okay now let's try it save there we go so then you can see that the item saves now if i go to maybe let's say page three and i want to add an item let's try hello and we click add item and now you can see that we get hello popping up and i can check i can save that i can unsave it and if i go back to 2 you can see that obviously the same checking pattern is still there i could add a new item so i'll just say new item here add that and you can see that it's popping up and i can save that so that is how you make a custom form this is very useful what i've just shown you will allow you to do pretty well anything with forms because now you know how to get information from forms now i will show you actually what our post requests are looking like just so you can see or sorry uh what is it requests like what i'm printing here i'll show you what that looks like and talk a little bit about that before we wrap up here so you can see that uh if i go here we have check button c2 and that is given a value of clicked we can see c5 is given a value clicked and c7 is given a value clicked so those ids for our check buttons we see that save is given the value of save because we hit that save button but we see that we're not seeing any other um values here right so if we don't click an item or if we're not giving a value to it we're not going to see it here so for example like if we have c2 and we don't check that button it's just simply not going to show up in the information that it passed to us which means that we can check if it's not there and then do something accordingly so the way that this get request works when we say get like this or this get method is since this is it's like this is kind of a dictionary but this get method is specific to this type of data structure and essentially if the item doesn't exist i believe it just returns none which means that if we ever put something like this so for example if save isn't there we simply won't run the block because if none obviously it's not going to run so that's the way that that kind of works you can see i mean i wrote highly encourage you guys to kind of mess with this and do some requests print them out and see what it looks like that's really the best way to understand how this works um you can see it's a type query dictionary and when you try to get something if it doesn't exist it just says none if it does exist it'll give you the value that corresponds with it and in some instances you can actually have multiple values pointing to the same name so that's just something to keep in mind that you guys might notice when you go through this so anyways that is essentially how that works we create a custom form now we know to add things and with this information we can go into creating some more complex stuff so in the next video i think i'm going to be adding bootstrap onto the website making things look a little bit nicer maybe adding a sidebar we'll do some stuff like that and then later on we're gonna get into user registration and all that kind of stuff so that you can actually have all of your todo lists stored under a certain user so anyways that has been it for this video if you guys enjoyed please make sure you leave a like and subscribe and i will see you in another video so in today's video it's going to be a little bit shorter and what we're going to be doing is simply adding a sidebar to our website and making things look just a little bit nicer now in the next video we're going to go on to add bootstrap to our website and then be able to make something that looks pretty well like this and i'll show you guys some more of this example in a second but for right now we're just going to be adding this nice sidebar with some hovers and kind of showing you how to go about doing that so anyways let me give you a quick preview on what our website is going to look like in the next two maybe three tutorials so for example we have these links on the side here we can view all of our different todo lists so if i go to new lists you can see that we go there we can go to create which will allow us to create a new todo list and then obviously if we go inside of a todo list we can see all these nice check buttons we can hit save we can add a new item for example by doing that and this is just kind of the basics i haven't gone crazy with this i could obviously make this look a lot better be a lot more dynamic but this only took me about 15 1520 minutes just to style and make everything look decent so anyways that is kind of what we're going to be working towards in terms of using bootstrap which is just some css that's pretty much already made for us and adding a sidebar today okay so let's get out of this and let's go into our what do you call it file here and all we're going to be doing to add this sidebar is working inside of this base.html file now because all of these files inherit from base.html this makes it really easy to add stuff like a sidebar to our website because all we have to do is add it into the base template it will automatically be added to all of the other ones now what i'm going to start by doing is just setting up a div here that's going to represent our sidebar and if you're not familiar with html and css and all this stuff i'll try to explain how some of this stuff works but it is pretty straightforward you should get it pretty quickly so i'm just going to say the class is equal to and in this case side nav like that and then we will end that div and inside here i'm just going to put a few links which will be our sidebar items so in this case i'm going to say slash home and this link name will be home like that and copy these a few times okay so home will have create and then we can add one more link if we want to uh but we don't actually have anywhere for this to really go to yet let's just do like slash two and just call this uh view okay so anyways what i'm doing right now guys uh in case some of you are confused essentially is this href just stands for where this link is gonna go when we click on it a stands for link tag and this div is just a way that we can style a bunch of different elements at once by doing for example class equals side nav and now what we're going to do is up here in our head tags is we're going to create a css kind of script or style sheet within our html file here and define what our side nav is going to look like now we also need to add a class here to our main div because i'm going to add some stuff in here and this class will just be called what was it me like that okay so anyways what i'm going to do now is go up top here and i'm just going to add a bit of styling stuff to make this div here that we've added of links appear on the side of the screen a certain color and then add some hover effects and stuff to it as well so this is really just going to be adding some css at this point so i'm just going to add some style tags here i will close that style there and in here i'm going to do type equals and in this case text css like that and now i'm actually just going to copy off my other monitor because i can't remember all of the styling i've done on this but essentially if we want to access or change the side nav class what we do is we use a period representing a class and then we type the name of our class which is sidenav we can add these brackets like this and then inside here is all of the styling we want to apply to our side nav so for example we want the height to be equal to 100 pixels which are sorry not 100 pixels 100 percent which means that it's going to take up the entire height of the screen so you saw that on my left side it took up the entire height we're going to say width and in this case we'll just give it a pixel value so 160 pixels and you can modify this value if you want we're going to say position and in this case it's going to be fixed we could make this a dynamic sidebar but i'm not going to do that in this part we're going to say z index and in this case 1 which means that it's going to stay all the way at the top of our screen we're going to add top which is zero we're going to say left zero like that which just means again stay in the top left hand corner of our screen we're gonna say background and in this case is it even there uh it's not background i believe color and we're gonna say this is pound one one one which will give us that kind of dark blackish gray color you guys saw before we'll say overflow x and this is hidden and i don't even remember what this one does oh it just makes sure that we don't go horizontal uh with our sidebar and then we'll do padding from the top uh of 20 pixels now just to as a disclaimer here i did not create the sidebar i just found this on some like css website and modified some of the attributes so that's what i'm going off of here if you guys want to create a different kind of sidebar you can feel free to modify these kind of properties change the color like they're pretty straightforward on how they work or you can just look up like nice sidebar a nice title bar online and we'll probably give you the css and even the html on how to do that so now i'm going to set up what my links inside of my sidebar are going to look like so whenever you want to specify a certain tag from within a class you do the class name and then the actual tag itself so in this case side nav a which means if i highlight this you can see it's actually highlighting all of these a tags here that are inside of my sidenav so what i'm going to do here is say padding and in this case we're going to say 6 pixels no 8 pixels 6 pixels and 16 pixels and again feel free to mess with these numbers we're going to say text and in this case decoration and this will just be none for now and then down here we're going to say font and you guys can mess with this as well you have to look up the fonts if you want to know what these mean is eight one eight one eight one and display in this case is gonna be block style so is that all uh oh sorry what am i saying this is color and the font i must have misread this here the font is going to be just we're going to do the font size which is 25 pixels like that okay so that's it for the sidenav a tag and now all that's left to add is actually what happens when we hover over our aid tags so for example if we hover on these we want to change the color so we can do that from within css so to do that what we're going to do is literally just copy this except we'll add this what we call a property here called hover and then all we're going to do is just simply change the color when we hover so to do this we'll just change this color to f1 f1 f1 and yeah there we go okay so we've done that now and the only thing left to do actually is move this uh what do you call it this main content here over to the right because right now what we are actually gonna have is we're gonna have the sidebar and then this content will go below the sidebar we don't want that so to move this content block or i guess this class main over it's pretty straightforward we'll do dot main like that and then in here we'll just say margin hyphen left and in this case is 160 pixels did i spell margin correctly no i did not and we'll just add a bit of padding here so say padding and then in this case we'll do 0 pixels and 10 pixels like that now that should be about it actually for our sidebar and by applying this to our base.html file this will apply to our entire website so let me actually get back into my uh what do you call it file here so i can run this for you guys so cd django tutorial cd my site and in this case we'll just do python manage.pi run server and let's grab this link here go to google chrome and let's see how this looks okay so there we go so we've created a nice home page here you can see we have home create view if i go to home uh so slash home doesn't exist that's just my bad i don't have a slash home page here and if i go to create you can see we have this nice little create now and if i go to view it brings me to uh list item number two or whatever it is or todo list number two so that is precisely how we add a sidebar and you can see that this is a really nice thing that we have essentially is the fact that we have this base.html file because look i just applied the sidebar to my entire website really easily so now i actually i feel like i must have forgotten some kind of font size here because on my other website the font looks better but um you know what for now that's just fine so anyways uh that is actually going to be it for this tutorial i know this was a bit shorter but this shows you how to add a sidebar it also kind of shows you how you can style some of your different items if you want to add some more content blocks or you want to add classes to specific things you can do exactly what i've just done here inside of your other files as well you can add some style tags or you can add the style tags here and then add the classes on stuff like this and yeah so in the next video we're gonna be adding bootstrap to our website which is a nice css styling and we'll make it look a little bit nicer change some of the fonts and just make everything look a bit cleaner so anyways that has been it for this video if you guys enjoyed please make sure you leave a like and subscribe and i will see you again in the next so in today's video what we're going to be doing is just adding bootstrap to our website and doing a little bit of styling i'm going to show you guys how we can add some just nice looking classes and how you can kind of look through the bootstrap documentation to find what you're looking for so all we'll do is really just style a few different elements and make things look a bit nicer and then i'm kind of going to leave the rest to you guys so with that being said let's get started so i'm going to head over to the bootstrap website and it actually gives you a really easy and quick way to get bootstrap on your website and all we're going to do to do this is just kind of follow this page so first let's talk a little bit about what bootstrap is so bootstrap essentially is a css javascript jquery framework which allows for you to add some custom built styling to your website now this actual framework is built on what's known as a mobile first site framework or like so it's meant for building responsive mobile websites that and then they will expand to desktop applications so apparently that is kind of the best way to do it now is to build stuff ideally for mobile because that is where most of the web traffic is nowadays i believe i could be incorrect um so you build it first for mobile and then you kind of expand it out into desktop so anyways let's get started and use bootstrap so what we're going to do is just follow this page so the first thing we need to do is copy this link here so css and i'll leave the link to this page in the description if you want to do this as well so i'm going to copy this style sheet here and all this uh all this is essentially is this kind of style sheet but just online that we're going to access and be able to use so it's served on what's known as a content delivery network which means we don't actually have to download the style sheet we can just copy this link in here at the bottom of our head tags but just above the title and we will start using this uh this style sheet on our website now that we've done that there's a few other things we need to add so let me go down here to the starter template and just copy a few things we're missing the first thing i'm going to add is just these meta tags and these meta tags apparently are important they just set up some properties for your website so we'll put them below this link like that just to finding the type of characters you're going to be using and then i believe this is something to do with the mobile friendly kind of look or whatnot so now that we've added that they might have to go above that we'll add those above we'll add this doctype html so just exclamation point doctype html we'll add that at the top of our file like that hit save and i'm just going to move these meta tags to go above our link here so our style sheet like that sweet so now that we've added that there's only one more thing is three more things actually that we need to add and those would be these scripts and these scripts are used by some of the css classes and to do a little bit of animation and just make things look a bit nicer maybe move some components around the page so we're going to add these at the bottom of our body tag so underneath all of the content here now you don't necessarily need to add these scripts but in some cases when you use certain css classes they will require these and then things might look a little bit funkier things might be off so anyways now that we've added that we're actually ready to start using bootstrap so the first thing i'm going to do is kind of add some divs and some different classes into my main content block here and i'll talk briefly about what they do but really the way to understand this stuff is just to go to the bootstrap documentation so for example if i go here and just look at all the different components and kind of copy the stuff that you like that what it looks like and then customize it so for example if you wanted a large button you would go to the buttons tab here for components this link will be in the description as well look at a button you like and then literally just copy the tag or the class for it and then you can customize it accordingly so that's what i'm going to be doing for this kind of and i'm just going to be copying some code that i've already written to style my website in a way that i think looks i mean decent okay i haven't gone too far i didn't take too long to do this so anyways let's add some dibs here so the first div i'm going to add is class equals in this case row and then justify in this case content content and center like that which just is going to mean that we're going to put this in the middle of our web page so yeah so add that and now what we'll do is we'll add another div and this div we're going to say class equals and in this case column 8 which is going to define what column space we're going to be in we will end this div here and we'll add a few other things as well so now i'm going to add an h1 tag and this h1 tag is actually going to be the header of my website so inside of this tag you're going to call whatever your header you want so i'm just going to say mine is my site and i'm going to give this a class of in this case we will say mt hyphen 2. again i'm just taking these from the bootstrap website if you don't know what this stuff means you can either just look up the class and it'll show you the styling for it or you can just go to the bootstrap website and look for ones that you like so in this case i'm going to do mt0 mv hyphen 4 and what this is going to do is draw a little line for us underneath our header just make things look a little bit nicer so that's all i'm actually going to add here for this main base template now let's go to our website and let's see how it looks so this is what it looked like before and just with those few adjustments when i refresh the page let's see how it looks now okay so there we go um so actually so these little check buttons here shouldn't be here one second guys just because i might not have saved a page because i was messing around with it before let me refresh this now ah there we go so that's uh now what we're getting now it should be in the middle of the page which is kind of throwing me off just a little bit uh i spelt justify incorrectly that would be why so row justify content center i knew i was doing something wrong there so now let's refresh this and there we go now we can see that it's moved to the middle of the page and we have this line here obviously as well still sweet so that's it for just styling the base template so now that's going to apply to all the web pages that we have if i go to create for example you can see that it applies to this as well so now it is time to style some of the other pages that we have so the first one i'm going to style is this create page so notice this is what it looks like now let's mess around with this now what i'm going to do is change some aspects of this form so i'm going to add a class here and i'm going to say this class is form hyphen group i'm just going to put this create page into let's say like an h3 tag for right now just because i want it to be a little bit bigger on the page it won't add any uh any styling to that so now we'll add some divs inside of this so the first div that i'm gonna have is just gonna be an input group so i'm gonna say div and in this case class equals input hyphen group in this case mv hyphen 3 and then i will end this uh like this i believe this might be the correct place for it i'm probably gonna have to mess around with these a little bit but we'll see i'm also just gonna put this form instead of doing form dot as p i'm just gonna get the name attribute from our form so the way i do that is just by saying form dot name so rather than showing the entire form because we have a little check button i'm just going to show the name text box because that's all i actually want for right now so now what i'm going to do is actually i'm going to move this underneath here my apologies and i'm going to add another div and this one is going to be class equals and in this case input hyphen group hyphen prepend now this is a really nice um div that they have here the class that they've made and what this does is well you guys will see in a second is it makes this button kind of mesh with this text input so they go they look at like in one line where it has the button and then it has the text input field right beside it but they're like combined together and it looks really nice you guys will see in a second how that looks now the last thing i'm going to do is just add a class to my actual button itself so i'm going to say class equals in this case btn and then btn hyphen uh what was it success i believe yes btn hyphen success and that might actually be it for all of my styling for this page so let's go ahead and have a look now and see how this looks if i run this there we go we get create page and now you can see what this prepen did it took this button and it put it on the left side of my text input and notice that we get this little these little things coming up this happens obviously because of uh some of the javascript and stuff we have please fill out this field you can see that's there if we go to create new uh we can see that pops up with there's a hover for it it's just all this nice stuff that bootstrap does for us some of it's done by django but most of it's done by bootstrap now let me go to view so now it's time to make this one look a little bit nicer so let's go ahead and do that and then we'll wrap up the video here so this will be a little bit more tedious but let's actually get rid of this kind of ul view and tags and stuff because i don't think we're going to need to use these yeah so let's get rid of these uls and let's get rid of these lis because right last time we're just using lis to make them show up in a nice kind of group but we'll use some uh some classes here from bootstrap to do that for us so we can uh tab this back so let me do that actually i probably should just left it cause i'm gonna have to put this inside a div but anyways inside of our for loop now i'm gonna create a div i'm gonna say this class is equal to and in this case input hyphen group and then we'll do mb hyphen three and then i'm going to add a prepend in here as well because i want to combine these check boxes with um what you call it the text which we'll add in a cool way in a second so i'm going to delete these text right now and what i'm going to do is add a prepend here so i'm going to say div and in this case class equals and in this case what was it it was something like prepend input group hyphen prepend input group hyphen prepend let's tab these in we will end this div and we will end the other div as well just make sure we don't forget like that so now what i'm going to do is outside of this this div but inside of the other one i'm going to add that text that i have back in so i need to actually get the item text i'm going to add this though in a weird way i'm going to add this in an input box so the way i'm going to do this i'm going to say input and in this case we'll say type equals text and then we'll simply just say value equals and in this case we'll say was it item dot text like that now we'll add a class to this as well we'll say class here equals and in this case form hyphen control and there we go now that's it for the kind of displaying the items let's actually have a sneak peek of how this looks and see if i made any mistakes or not um okay so it's not ideally what we wanted to look like but you can see we have these text box and we have the check buttons let me make sure i didn't make any critical errors here before i might have either misspelled something or forgot to add something ah so i've forgotten one class which was probably pretty important here so we're going to add another div and in this case we'll say div class and in this case equals input hyphen group hyphen text we'll end that div where is this div ending i believe right here and that should be good for that i don't want to say for sure but let's see there we go so that's better this is what i wanted now you can see we have the check buttons kind of showing up on a nice little color here and then all of our items show up in text boxes and i mean you can actually edit the items but when you save them it's not gonna it'll just go back to whatever you had but i just wanted to do them in this way because it looks really nice and now what's left to do is just modify these buttons here so let's go ahead and do that so what i'll start by doing is adding a class or a div here so i say div class equals in this case we'll say input hyphen group in this case mb hyphen three i will tab all of these i guess except for let's see which ones i actually want i'm going to put the save button i think on a different side so let me put this save button down here and i'll tab these two in these add items and i'm actually going to do the same thing that i did with the creating a new todo list in terms of that prepen thing with these items so to do that i'm going to add another div in here and in this case i'll say div and then class equals in this case input group hyphen prepend you guys can tell i like this this prepend thing that you can do here uh prepend we will tab these in and then we will close these div so slash div and slash div but i believe that i have to put this input actually right here and that i think is correct there we go sweet so now all i need to do is add some classes to the button so i'll add the same classes that i used on the other one so i'll just say class equals in this case btn btn hyphen success and i'll just copy this and we'll use this class down here as well just to be consistent so anyways that should be it for styling let's have a look now if i refresh uh continue there we go so now we get add item and we get save and things are just looking a lot nicer on our website obviously there's a lot of work to be done but take in i did this in 13 minutes in a video or however long this video is and i've been kind of explaining things as i go but i'll quickly show you that if you want to look at the different components and see all this different kind of stuff just go to the bootstrap documentation this is the link i'll put in the description go to components here and for example if you want to look at a nav bar and how this works that it'll explain to you how to create one and you can just really copy kind of however whatever you want from here if i go to for example buttons you can see all the different kind of buttons and how to make them and it just tells you what classes to use you use those glasses and then it looks nice on your web page so anyways that has been it for this tutorial if you guys enjoyed please make sure you leave a like and subscribe and i will see you again in the next one so in today's video what we're going to be doing is talking about user registration and how to create an account on django now fortunately for us django actually does quite a bit of the hard work at least for us so all we have to do really is format a form and then just add a few things to our project it is a bit of a tedious process but it's much easier because of django and another reason why a lot of people love django because it does stuff like this for you you can see right now i have open uh the thing we're gonna be creating now this is just in a copy of the project that i'm working on and i just made this to make sure it was gonna work uh create account page and we're gonna be making this to start we'll be adding an email field to this as well or like an ad name or something like that field to this as well and yeah that's kind of all we're gonna be doing today in the next video we'll talk about how to log in and how to log out and then how to restrict access to certain parts of the website to certain users so for example the admin user can access the admin dashboard and they can see all of the different databases and all that whereas a regular user won't be able to do that so let's get started now the first step and what we're going to have to do to do this actually is create a new application so what i want to do is right now we already have an application called main but i want to create an application now called like users or called register or something like that that is going to handle the login logout and registration for our website now this is the reason i'm doing this is also so that you can just copy this application and put it into any other django project and because it just kind of makes sense to separate things out so to do that we're going to go to our command line and we're going to create a new app using that python manage.pi file so we're going to say python manage.pi and we're going to say start app and in this case i'll just call mine register like this you can name yours whatever you want but i'm just going to say register so there we go it has successfully executed and now if we go to our directory we can see that we have register popping up here now what i'm going to do to start is i'm just going to uh what do you call it modify some urls so we're going to add a page that we'll be able to use to register because we need a register page so let's open up subline text here um let me just open up a new window why is this not working uh one second guys file uh open folder here we are okay so django right there okay so there we go now we're in django and what i'm going to do is i'm going to modify the urls from within my main file here so that we're going to link to a view that we're going to create inside of our new application called register so if i go to urls here you can see that right now these are our main urls that we have inside of our main application but what i want to do is go to the urls inside of my site so let's do that here and what i want to do is just add a new path that's going to direct to a new page and in this case i'm just going to call this one slash uh create i guess or actually not create let's do uh register so like registering for a new account we'll call it that and what i'm going to do is i'm going to link this directly to the function that's going to render this from our register application so what i'm going to do inside of register now and i'll come back to this in a second is inside of views.pi i'm simply going to create a function in this case i'm just going to say define we'll call it register as well it'll take response and then in here all we'll do is just return render and then we will render something in here in a second but we'll just fill that in for right now so we go back to urls what i'm going to do now is i'm going to import this file in this function so that we can use it from in here to link directly to that view so to do that i'm going to say from and in this case we'll do register because that's the name of our folder uh register import in this case views as and i'm just gonna say v now the reason i'm saying views as v is because we could possibly be importing some more views into here and all of them are going to be called views right like the views for this application is the same as the name of the views for the main application so just by doing it as something that way we're going to differentiate them so we don't run into any mistakes essentially so now i'm going to say what we'll go to is we'll go to v dot in this case um actually from register import views we'll go to v dot register like that and we'll say name equals in this case register now add that comma and we should be good in terms of linking to that okay so now that we've done that what i want to do first of all is create an actual page that will be our register page which involves creating a template for that so i need to do the same process i did to create templates within my main application and that is starting off by creating a new folder inside of our register application and in this case i'm just going to call it templates uh templates like that and then inside of templates i'm going to create another new folder and if we remember we call this register now inside of register i can create my file which will be my register.html file which will display the form that we're going to see so i'm just going to start by extending my base template and the way that we do this now because this is in what he called a different directory is the exact same as before we just have to specify where we're getting it from so we're going to say main slash based.html and then what we're going to do in here is we'll do our blocks so we'll have the block title and we'll have the block content so block title and in this case we'll just say create an account or something like that and then we can end that block and block and then now we'll do our block content and then we will keep going from there so say block content and then here we'll say percent percent and block now we'll save this as register.html inside that template file and there we go we have now created the file that we can render and display on the screen now while we're in here i'm just going to fill this in and populate it and all i'm going to do essentially to do this is i'll use a little bit of style a little bit of bootstrap styling and then just display the form inside of here using the way that we can just display django forms and then you guys will see how it works in a second anyways so let's start by creating some form tags we'll say form in this case we're gonna say method equals post because this is going to be the form to create a new account so obviously it's going to have to be post method because we need to make sure that information is secure when we're sending it to the back end say 4 method equals post i'm going to say class is equal to in this case form hyphen group and then we'll end that form tag and in here we will simply do um what do you call its form like this now the only other thing we need to add is a button and this button will be the submit button because by default django doesn't generate that for us so what we can do to do this is just say button we can say type equals if i didn't hit insert there we do type equals submit submit like that and what else do we even need for this we say class equals in this case btn and then btn hyphen success i believe that's the class name and then we can end that button tag and inside here we'll just say um what do you call it join or like register like that and that's what we're gonna do for now we'll make this look a little bit better after but that's all we really need for right now okay so now that we've done that we've said well we're gonna pass a form to this view so that means from inside here we're gonna have to be passing a form now what's really nice is django actually automates the form uh for what you call it logging in and creating a new account it makes one for you that you can just use so what i'm gonna do is simply import the builtin django form and then we're just going to use it inside of here to pass to our register template so the way that we do this is we have to i'm actually just going to copy these in because they're a bit long and i don't want to mess up the uh the spelling we're gonna say from django.contrib dot auth import login import authenticate and then we're also gonna import uh from django.contrib.auth.forms we're gonna import user creation form now this user creation form is what we're going to use to create a new user and this a prebuilt form just like when we went into our application and we created our own form using the django builtin forms this one just already made for us and we can go ahead and start using it right away so to use this i'm going to say form equals and in this case user creation form and then when i render my template i'll pass response we'll do in this case register and in this case slash register.html and for the context here we'll pass in form colon form so assuming i spelled everything correctly now if we actually run our server and go to this we should see a form showing up uh actually one step for that that i should not have forgotten but i almost did we need to add our application in this case which is register into our settings.pi file because if you remember when we initially created a new application you can see that we added this main.apps.mainconfig well we need to repeat this process now with our new application which is register so let's just copy this and paste it down here and instead of having main we're going to change this to just be register and here register as well remember that capital at the beginning okay so now that we've done that assuming i didn't make any mistakes if we run the server we should be all good at we should be able to see all this stuff so let's do this now we'll say python manage dot pi and in this case run server okay no issues so let's grab that let's go actually i'm just going to refresh this and it should pop up and now you can see that we are actually getting this beautiful register window now i'm saying that sarcastically because obviously this does not look amazing and we're going to work on styling this and making it look a little bit better in a second but you can see that we actually have a somewhat functional user registration window already created for us and you can see it says required 150 characters uh this is the thing that you need for passwords and then it asks you for username password and all this stuff and then there is a register button that we created so that's awesome and that works well now all we the thing is though if we actually type anything in here so for example i say tim and make my password one two it says oh your password cannot be entirely new numeric it must be at least eight characters okay let's just type let's save a bunch of letters for example and if i type a bunch of other letters and hit register we run into an error that crsf csrf token is missing so i'll have to add that but my point here was going to be that this register button doesn't actually do anything just like when we created a form before we actually need to add the functionality to save the form and create the new user which is what we will do now after we add that token that we need so let's add that token first of all inside of here cs csrf underscore token and now let's go into view stop pi and let's check how we can validate this form and how we can actually save things using it first of all before we start styling it too much so we're going to do is what we've done before so we're going to say if response dot method equals equals and in this case post then that means that we are going to be creating a new user so what we'll do in here is we'll start by saying actually we'll take this form we'll put it up here and inside of here we'll populate this with response dot post now it will say say if form dot is and i believe it's underscore valid what we can do to save the form which is very easy is literally just say form dot save and what this is going to do is actually save our new user in the users database for us and i'll show you how this works in just a second but let's add this else here so that we create a blank form if uh for some reason we're not getting that post request right so this is all we need to do actually to handle and make this form work obviously we're going to be doing a lot more here before we're finished but this will actually allow us to have a valid form so let us try to get this working now so let me go back here and let me refresh the page and now let's try to create an account and let's say let's make an account tech with tim uh we can just make the password check with tim123 okay and let's hit register all right um what was the issue the password the two password fields did not match okay so you can see actually as well maybe that was good that i messed this up uh it even gives you messages when things are wrong with the form so it says the two password fields didn't match so that obviously means i spelled something wrong so let's try that again and hit register the password is too similar to the username oh man see this is this is why we use django forms because they do all this wonderful stuff for us okay let's try this now tim with tech how about that uh tim with tech123 tim with tech123 register the password is too similar to the username okay i'm just going to use one of my own passwords and hopefully it doesn't show it anywhere on the screen okay so now we've registered and i actually create an account um called tech with tim and i've i've done that i know it doesn't look like anything happened but that's what we're gonna add as well next when we create an account we'll redirect to a new page but let's try going to the admin dashboard here quickly and see if we can see this new user in our database so let me sign in here and if i go to users you can see that now we actually have two users we have tim which is the admin user which is me and we have tech with tim which is the new user that was just created so if i go into tech with tim that's like the password hashing and stuff and then you can see that it has the name and that's all that we have for right now so the next things that i want to add to this now is how we can get like an email or how we can get a first name and a last name for example and how to redirect to a new page once we've created an account so once we've created an account what i'd like to do is redirect to a new page so to do that what i'm going to do is from django.shortcuts import render import redirect and all we'll do in here is just instead of returning this response we'll simply just return a redirect so we'll return redirect and in this case where will we go we will just go to slash home so now if i create a new user we would go to the home page uh and the user would be created so that's great for that but what i want to do now is have the ability to add a new field to our form so for right now all we had was those three fields but what if when you create a new user you want to ask a ton of different questions like a phone number you want to get all that kind of stuff how can we do that well to do that what we need to do is inside of our application here i believe we need to create a new file called forms.pi so what we're going to do is inside of register we're going to do new file we're going to save this as forms.pi and we're just going to modify our form slightly so save that as is there an issue this reason why this isn't working forms dot p y um hit enter okay i'm very confused right now why this is not working forms okay uh anyways let's try this one more time okay so for some reason i was just messing up but anyways forms.pi what we're going to do for this now is actually import these same things that we had before so this login authenticate user creation form so let's copy those and paste those in here and what i'm going to do now is just create a class that is that inherits from user creation form and add a few new fields to it so to do that i'm going to say class and in this case i'll just do register form and we'll inherit from user creation form and that means we're going to get all of the same properties as user creation form so we're going to have that nice layout as well but instead now we'll add a few new attributes so for example if i wanted to add an email here what i could do is i could say email equals and in this case uh models which i need to import as well so let me import this we're going to say from django dot models i believe import model it's either models or models any anyways so let's do that email equals models dot and in this case we'll say email field like that and this might be lowercase i'm not sure okay so we'll do email field there and now what we're gonna do is add something that we haven't done before which will allow us to change some of the parent properties of this class so i'm going to create a new class inside of this class which is called meta now it needs to be named this and what i'm going to do in here is define the fact that this register form is going to save into the user's database so you know how when we did a user creation form.save it save the form well we need to say that when we're using this form we need to save in the user database so to do that i need to import a few other things so one second here what i'm going to do is just go to i'm going to say from django dot contrib.off dot models and in this case import user and actually i need to change this django.models thing up here because this is incorrect i'm going to say from django import forms and instead of models this is going to be forms my bad on that so we'll say email use forms dot email field and then inside of this meta class what i'm going to do is say model is equal to in this case user so i'm defining that we are going to change the user model whenever we save something in this this form so now i'm also going to define one more property which is going to be fields now what this fields property is going to do is pretty much lay out where i want my fields to be so typically when you sign up you ask to do a username and email a password and the other password well right now if i were to actually use this form this email field wouldn't be showing up and that's because inside of the parent class it doesn't know that we have this email field so i have to define that so to do this what i do is i simply type the name of the fields inside of this list in the order that i want them to appear in my form so if i wanted email to show up first i would type email if i wanted a username to type up first i would type username so in this case let's do username email and then we'll do password1 and password2 now these three field names username password1 and password2 are already built into the form so this user creation form that's why i'm using them if we were to per se create another field here maybe we created a field that was like your gender or something like that then we would have to put that field in here as well if we wanted to show up on the form and this will specify in what order we want things to show up so that's how you can change that as well so now that we've done that we need to now start using this register form rather than using this user creation form so if i go in my views.pi file now i can actually remove this what i'm going to say is from and in this case we can just import it directly from forms so we'll say from forms import and in this case we'll do iso is register register form like that and now rather than using user creation form we'll use register form like this and this should be working for us assuming i did not make any mistakes so register form so now let's try to reload the page and see what we're getting on um what do you call it let me make sure that this actually is running quickly is it seeing that we changed anything uh one second guys uh no module named forms interesting i have forms.pi right here let's try from dot forms and see if this works there we go so i just need to add that dot before form before forms okay so let's go now back to uh what was it register like this and see what we get now okay so now we have username email password and password confirmation now i know this is still very messy but we have successfully added an email field so now it's time to actually make this look a little bit nicer using a little bit of bootstrap and what's known as crispy forms so crispy forms is a really popular form kind of framework used in django and you just have to install it using pip so what i'm going to do is simply go into my command line here and do pip install and we're going to say django hyphen crispy hyphen forms like that so not equal sign that needs to be a hyphen and what this does is it has some automatic styling for our forms it's really easy to use so that's what this module is essentially so we're just going to pip install that same way that we installed django and just make sure that it's in your virtual environment now you can see i already have it installed but once you have it installed there's a few steps we have to actually use this so to use crispy forms what we need to do first of all is go into our my site settings file so we need to find my site my site and go to settings.pi and we have to add crispy forms into this settings.pi file so to do this what we're going to do is we're going to say crispy i think it's just crispy underscore forms we i'm pretty sure that's all we have to do but i will double check here because i'm likely incorrect um let's see here nope that's actually correct so crispy underscore forms and what we also have to do is go down to the bottom of our settings.pi file and we have to define what um css layout or i don't know framework that our crispy forms is actually going to use so to do this i'm going to say crispy and in this case underscore template underscore pack and in this case i'm going to say boot strap 4. now if you want your crispy forms to use a different kind of framework css framework you can just look up how to do that online it's very simple but you just change this the reason i'm setting this to bootstrap 4 is because by default it uses bootstrap 2 and on our website we're already using bootstrap for so we might as well just use it now okay so now that we've done that we're actually have to start using these crispy forms that's what they're called so since we've had them uh imported into the project and we have everything set up all we have to do to use our crispy forms is at the beginning of our what do you call it file here it actually doesn't have to be at the beginning but it just has to be before where we use it what we're going to do is we're going to use our crispy forms so i believe to do this we have to say include something i have to have a look because i forget how to do it ah it's not included it's load so load crispy uh underscore forms like this and in this case underscore tags now all we're gonna do to use this crispy form very straightforward is we're just going to put this little up uh what is it straight line here bar i don't know what it's actually called if someone knows comment down below and beside it we're just going to do crispy like that now what this does is it's actually a filter and i'm not really going to talk about exactly what filters are but if you know phil what a filter is then that's what this is doing it's just going to modify our form to make it look a little bit nicer and add a bit of styling to it so let's try this now and see if everything is actually working so let me run the server see if we get any issues or not no we don't so now let's refresh this and let's see the drastic change that is about to happen there we go how much nicer does that look than our other form right we have username email password and password confirmation that is just much better and you can see if i go register it's still doing this so that is essentially how we create a register form for our users to create new users now right now it'd probably be a good idea to add like a bar on the side to do register and all whatnot uh but for now we're just going to leave it at this in the next video what we'll do is talk about logging in using these users and all that kind of stuff we might add a little bit more to this register page but for now i think that's fine and with that being said that's going to be the video i hope you guys enjoyed if you did please make sure you leave a like and subscribe and i'll see you again in another one so in today's video what we'll be doing is talking about logging in and authenticating users i will also show you how we can only restrict uh pages so that users that are logged in can see them so for example we maybe don't want a user that's not logged in to be able to create a new todo list or because that probably won't work so how we can do stuff like that and then in the next video i'm going to be doing is talking about creating a custom user model which means that we can add things like all of our todo lists to a specific user so that each user has their own todo list and when they go on the website they're going to see different todo lists not just all the ones that have been created by any user that's we'll be doing the next one but this one will just be logging in validating and logging out as well so what we actually need to do first of all when we're going to be logging in and logging out is we need to create those login and log out pages now luckily for us django actually does a lot of this work for us they have a builtin application if i show you in settings.pi here that is django.contrib.off and what this does is it authenticates users so we've done all the hard work of creating new users but now since we've done that django can actually authenticate those for us so we can use some of the builtin things in this application to do that for us so the first step in what we want to do is we actually want to use some builtin pages that django's made so they actually have made log out login um what is it change password like a ton of different pages like that that we can access uh simply by linking to them in our url patterns from our main url's file inside of my site so what i'm gonna do just like i've done to get into my other applications i'm just gonna say path in this case include but in here i'm going to say django dot contrib dot auth dot urls and i believe that's correct but i will check that quickly to make sure i didn't mess that up uh yes so that's correct so what this will do now is it'll go to this application it'll look in the url's file there and we'll see if we have a valid url so if we have login log out change password create password a bunch of those different pages right now we're just going to work with login and log out but you know what i mean so that's what that'll do for us but the thing is these uh views if we try to go to them now they actually don't exist so what those templates attempt to do or what the views attempt to do is render a template called login.html logout.html from a specific folder that we need to create so what we actually need to do and it doesn't really matter where we do this but i'm going to do it from inside of my register application so inside of templates i'm going to create a new folder and in here i'm going to call this registration like that now it's important you spell registration correctly like i just misspelt it registration because it's going to look for this specific folder so we're going to create a registration folder inside one of our templates folder and then in here we're going to create a new html file and we're going to call this login.html now this is gonna be where django will look uh and what template it will use to render our login form so what we'll do is we'll simply just do what we've done before so we'll start by extends um and then in this case main slash base.html and then we'll add our blocks for our title and for our content so let's do that now uh block title and then we're gonna say end block like that and then i guess we can do the title we'll just do a log in here or something like that and then you know i can just copy this and we'll just change the name to content and now we're just going to create a nice form in here that will display our form just like we've done probably four or five times by now so we'll say form we're going to say method equals in this case post and then we're going to say class equals in this case form hyphen group now we can end our form like that and then inside here we'll add our csf our token or whatever that is csrf underscore token and we will simply display our form now i want to add this to be a crispy form so it looks a bit nicer so to do that we'll have to load in our crispy tags so we'll say load and in this case crispy underscore forms underscore tags i believe that's the correct way to do that if you don't have crispy forms installed go back and watch the last video because we did that there and then what we'll do is we'll add a filter here and we'll say as the filter will just say crispy and this will display a nice form for us now we also need to add a button into our form because that doesn't come with it so to do that we'll say button we'll say type equals in this case submit and then i guess we'll say class equals btn vtn hyphen success and and our button and just say login as the name sweet so that should be it for this login form now we actually may want to add one more thing because sometimes you go to a login page that says well rather than logging in like create an account if you don't have one so maybe we'll add that in here quickly just make things look a bit nicer so we'll just add i guess some p tags and i'll just say slash p and i'm gonna say don't have an account question mark create one and then i'll add an a tag which will just link to our create so i believe it was slash register we did was it slash register create that was that url let's check inside of where is it here uh register register is the name awesome so let's go back here register and we'll say here and then slashing sweet so that should actually be it for the login page and now we can actually go ahead and run our server which i already have running and we will see that the login page is actually working so this is the logout page let's go to log in and see what we get slash login um oh well if you spell extends incorrectly extends there you go then it won't work now let's try it if i refresh this here there we go so now you can see that we actually have a nice login page and this took us all of what uh six minutes to create so it's pretty straightforward and what will actually happen here is this will properly do our logins and validate users for us so let's try to log in this is a valid login right now password1234 when i click log in you can see that it's actually directing me back to the homepage now the reason that this is happening is because i actually have something added down here in my settings.pi file that i forgot to like resave that was telling us to redirect that page but let me just refresh this let me go back to login and do this again because i want to show you what happens if you don't have that you can see that it brings us to this note page not found which is probably what you guys are getting when you're running this now that's because what happens is when we try to log in it's going to automatically attempt to redirect us to a page called accounts profile now we obviously haven't created a page or a url for accounts profile so what we need to do is we need to modify where we're going to go once we log in now the reason was happening for me is because i had done that previously and forgot to save removing it but let's go inside our settings.pi file inside of our my site and let's add a redirect to let's say the home page whenever we log in so to do this i'm going to say in this case log in underscore redirect underscore url equals and in this case you can pick wherever you'd like to go but i'm just going to do slash standing for obviously the home page so let's do that now let's rerun and try to log in and well we will see that we should be directed directly to the home page once we log in let's do that and you can see we are brought to the home page so that's awesome now i'm just going to quickly move this up uh one because i don't like how that looks let's put this p tag just above here and now i want to refresh this and that looks a little bit better to me so sweet that's how we log in now let me show you what's actually happening in the back end when or how we can validate if we're logged in or not because right now there's not really any way for us to tell whether or not we're logged in or we're logged out so what i'm going to do is i'm going to go actually all the way back into my main application into templates and base.html and i'm going to create a thing that essentially only shows our main content uh body so like this block content if we are logged in otherwise it will tell us to log in and i'll leave a link that says login so a way that you can actually tell if a user is logged in or not is by using what's known as user dot is authenticated so i can actually create a code block here and i'm gonna make this an if statement i'm gonna say if user dot is underscore authenticated authenticated i think i spelt that correctly so what this does is by default whenever you go to a web page in django it has a user attribute which stands for the current user now if there's no user signed in i believe it defaults to what's known as an anonymous user so if you call user dot is authenticated on the user if it is a valid user that's properly signed into the webpage then this will return true if it does not return true then the person is not signed in so essentially i only want to show this content block for all the different pages that i have if we're logged in otherwise i want to ask the user to log in or even maybe redirect them to login so what i'll do here is now i'm going to put an else statement that'll say essentially else so if you're not logged in what we'll do is we'll literally just put an a tag and you guys can obviously make this look a lot nicer than i'm going to do and we'll just link it to the login page and we'll say uh log in here and you can just click this whole thing and that'll you know actually let's put this in a p tag make it look a little bit nicer slash p and instead of having the whole thing be a link we'll just do log in here all right so now we will hopefully redirect to the login page and the last thing i need to do before i forget is just end this if block so we'll say end if and there we go so let's now go back and let me go to home and i don't think i'm currently logged in but we'll see and okay so it is i am currently logged in so what i want to do actually is just log out so log out brings us to this logout page right that just says thank you for logging out this is the default logout page i'm going to show you we can change that in just a second so now let's go back to the web page and let's just go to the home page and you can see that now that i'm not logged in it says log in here if i click this um oh okay so that is actually an issue so what's happening essentially is when i go to the login page since we're not logged in it's not showing the login page because that's the block content so this is probably not the best way to do it but this is how you can tell if someone is authenticated so maybe actually let me remove this um yeah because it won't let us log in if that is there so we'll remove this for now and just leave it as block content but that shows you guys how you can restrict kind of page access to people that are logged in so obviously on certain pages you might want to add that if statement so that's showing different stuff based on if you're login or if you're not logged in but that is essentially kind of how you do login and log out i'll really quickly show you how to change the logout page if you'd like to do that so same thing as kind of changing the redirect here for login so what we'll do is we'll just literally copy this and change this to log out underscore redirect.url and then here we can just define whatever page we want to go to when we log out so if you had created a logout template you could go to that you could go to essentially whatever you want but just by doing that i'll just leave it as a homepage for now but you know you get the idea so i guess the last thing i'll show you is let's say that you create some urls inside of your new application so maybe we go we have a url we have to create so let's go to the create page for a second i actually want to go to views my apologies if we want to get the user from with within code we don't want it just inside of the html file what we can actually do is we can type response dot user now when you do response.user that will give you the user and you can run dot is authenticated you can get all the attributes of the user like the name the password the email all that stuff directly from the code and then obviously you could pass that into the context of the page or you could do whatever you need to do with it from the back end so i just figured i'd show you how to do that quickly so anyways that has kind of been it for logging in and logging out pretty straightforward in the next video we'll create a custom user model and we'll talk about how we can modify that model to add attributes like all the todo list to a specific user so anyways that has been it for this video i hope you guys enjoyed if you did please make sure you leave a like and subscribe and i will see you again in the next one now i know i said i was going to be doing like custom user models here but the thing is to do what i wanted to do i actually don't need to use those and they're way like they're they kind of over complicated so i figured we'll just do it the pro like i guess the proper way or the way you're supposed to do it and then if you guys need to look up how to do custom user models it's not like super hard but just go online there's a few decent tutorials for that because i don't think i'm going to cover that in that series unless you guys really want that and you leave that as a comment down below but anyways the goal of this video is to make specific todo lists for specific users so that when different users log into the website they see different todo lists just like you know if you're on facebook you're gonna see different posts like stuff like that right so it's gonna be a little bit more custom to each user and obviously they can save their own todo list and that'll be saved just for them and other people shouldn't be able to view that so what i'm going to do and i need to do this is inside of our model stop pi file inside of our main application i'm going to just add a foreign key to todo list which is user and then that way our users will have a todo list set where we can view all of the uh the different todo lists with that user so to do this i need to start by importing our user model so to get that i'm going to say from off django.contrib.off. models import user with a capital u now what i'll do is just add a foreign key i'm just going to copy this and just change the names here instead of to do list we'll say user and we'll do user right here so we'll have user models.foreign key so now we're saying that essentially every todo list we create will be linked to some kind of user awesome so now uh what we need to do is actually make some migrations in our file so that uh we're gonna update our database accordingly to that now you shouldn't run into any issues doing this uh it should just like create the migrations for you but if for some reason this doesn't work what you need to do is delete all of your database files so delete your database file delete all of the um everything inside of your migrations folder including the pi cache but not the init.pi files and that goes for all of your migration folders so any migration folder delete everything except this init.pi and then anywhere you see a pi cache folder delete that and that'll allow you to do the migrations after that so now that we've done that what do we need to do next well now when we create a todo list things are a little bit different so this is where we're creating a todo list and what we're doing to do that is just creating a new to do this and saving in the database but now we need to save the todo list to a specific user so to do that what we're going to do is we're going to say response dot user dot to do list underscore set now i don't know if this is going to have to be capital or not so we'll have to play with that in a second but i think it should just be like that dot create and in this case we'll give a name to our todo list and we'll say the name is going to be equal to n now i believe this is how you create it i'm gonna go look to see how we created the item yeah so that is it's a similar way so we'll test this to see if that's working but this should now be saving our todo list to a specific user now we can still access our todo list by doing the slash id of those todo lists but we're going to probably modify this a little bit so that you're only able to access uh todo lists that are yours so that'll mean we'll look at the id and then we'll see if that's in the user set and if it is then we'll show that otherwise we'll say like you don't have access to this todo list or something but let's first just make sure that we can create them okay so another thing that i'm going to do actually is we've created this uh if i go to templates we've created um no we have not created but in our base.html sorry guys we have this slash view here right and this originally i think i had it linking to two just to test stuff but what i want to do is actually make this go to a list of all of our different todo lists so i've created this slash view so now what i'm going to do is i'm going to add a url inside of our urls here that is going to be slash view and what slash view will do is it'll bring us to a list of all of our todo lists so i'm just going to say the function name will be view the link will be view and the name will be view and then what we'll do is we'll create a new i guess function inside of views.pi and we'll say define view response and then what we're going to do is we're going to return a render of in this case we'll say response view and main slash view dot html and then we'll pass in nothing as the context so now we've done all that we actually need to create a view template so i'm just going to make a new file and i'm going to save this as view.html and i'm just going to extend this from the base template so extends base dot main slash base dot html and then we will add our blocks so we need that block for the title so we'll say block title like that and then end the block so percent percent and block and then inside here i guess we'll just do like view and then we can copy this and just change the name to uh to content so con content like that and then inside of here what i'm going to do is i'm just going to create a for loop that's going to loop through all of the different todo lists for our user and display them it'll be very very basic but we can obviously modify it later so let's add a for loop so say 4 and in this case td which is stanford to do list in this case user dot to do list underscore set then what we'll do is we'll end the for loop and n4 and then in here we're going to create some links to all of our todo lists and display them just in little paragraph tags so i'm just going to say p and in this case we'll add the name of our todo list uh yes we'll add a link here so we'll say a we'll say href equals in this case slash and we'll say td dot id and then we'll end that a tag so slash a and then and the p tag slash p and here we'll just put the name of our todo list which in this case is simply going to be td.name all right so that should display all of our todo lists in just like a standard i don't know like list kind of form we could make it look nicer but for now we're just going to go with that and yeah and then we should be able to click on them to access those todo lists so let me see if this is actually working so let's run the server any errors let's see uh no errors so let's now go back to here and say i'm going to create let's just go to the home page and let's go to view okay so if you are not running into any issues we're obviously not seeing anything so now let's try to create a todo list so if i say tim create new and we run into an area no attribute to do list underscore set i thought that was going to happen so let me see now if we need to add the capitals to that or not so inside views to do list underscore set maybe that's the issue i don't know we'll see though and then i guess we're gonna have to change inside of our vue.html file to be capitals as well now if this doesn't work i'll quickly do a little bit of research and figure this out but let's try it now and let's go back to slash create can continue has no attribute todo list underscore set sorry i'll be back in one second guys with the proper attribute name for that all right i am back and with a ton of errors that i had to fix so essentially one of the first errors is we need to go here and change this to be user.todo list.all because i was trying to loop through something that's not iterable because this is a different object so just to put this all here you don't need the brackets after and leave this as lowercase todo list and then we need to do is go to models and we need to add these two fields to our foreign key so we have to say related name we're going to find this as todo list and then null equals true now essentially the related name is going to be the way we access this from the related object which is user so we just change that to todo list we say no equals true and then what we're going to have to do to save that is make migrations you know python manage up high make migrations python managed up high migrate you do that you should be set and then the last thing we have to change is inside views.pi is what i've done here is i've created a new todo list so i said t equals todo list name equals n exactly what we had before same thing with saving the todo list except now i said response.user.to do list dot add t and then we can still link back to that id because that id is perfectly valid it still exists so we can see that and everything works fine so that is the fixes that's what we need to do remember that once you change these this models file by adding the related name and the nil equals true you need to make migrations to save those changes and then rerun the server so i'll show you now what it looks like so essentially you can see i have two todo lists that say hello when i go i can add items to the todo list so let's say like item one add item there you go we can check it we can save it all that fun stuff if i go to view um it should be showing me this but for some reason that's not happening um let's see here let me try logging out and logging back in so let's say slash logout and let's say slash login let's go tim password sign in view and there we go we can see that we have now these popping up so we have to be logged in to be seeing these if we are not logged in we are obviously not going to see anything because we don't have any of these so now let's try to create another account and add some of our todo list to that account and then see if it's different than what we have before so let's say we're making a let's say the email is bob techwithtim.net let's say the password is the password i've been using consistently and there we go let's hit register all right so we don't need to save that but now let's go to view and we're still seeing hello twice which is interesting to me oh it's because we're not logged into uh that account so let's do slash login and then what we'll do here is we'll say bob and password and log in and go to view and obviously there's nothing there so let's create a new todo list let's go new list create list let's go to view and now we can see that we have new list showing up and that is working now i'm sure this is fairly buggy but this gives you an idea of how you can add things to specific users so you can see them on the web page now obviously we can make it so that you can't view other people's todo lists because for example if i go slash 2 i can view the hello todo list even though that's not mine so we'll quickly do that and then i guess we'll probably wrap up after that so let's go to index here now and let's quickly say we'll get the todo list um objects we'll gets we'll get the todo list as an object and we'll just see if that todo list is in the users list if it's not then we'll just you know get out of that we won't let this happen otherwise we'll do whatever we already have so we'll simply just say if in this case response dot user dots i guess to do list dot all like that but we'll say if ls in that then this is valid otherwise so we'll tab all of this in otherwise we'll simply just return we can either give an error or we could just like not let them go to this page and to do that we can just link maybe to the home page or something if they try to do that so i mean you guys can pick what you want to do there but i guess i'll just going to ring a link to our home page here so we'll just link to home dot html and we'll just say in this case or actually maybe let's instead of going to home let's go to view dot html because then that way they can view their todo list so maybe that makes more sense so now let's try this so let's try to go to two now refresh and you can see that now it's simply bringing us a new list because well that's not our todo list so if i go to three you can see new list is valid because that's our todo list so we're able to view that now this is probably not the most secure way to actually like hide information just with like this if statement and all that but i mean you guys can mess with that if you want and this is a very very basic example so anyways that is kind of been it for how to add the todo list to specific users how to see that i know the login and logout system isn't super smooth right now but you can obviously add that on the side my main goal with these tutorials was to give you guys kind of the starting blocks on how to do things ideas on how to go about stuff i really can't show you possibly everything because it's an infinite amount of stuff that you can do with django and with that being said i will hopefully be doing a deployment tutorial soon it probably won't be for the next few days but at some point i definitely will do one and i encourage you guys to remind me and get on me if i'm not doing a deployment one because i will do that at some point and that has kind of been it for the actual writing code and all of this of the django tutorial so i hope you guys enjoyed if you have any questions or future videos you'd like to see please let me know in the comments down below and i guess i'll see you in the next video
