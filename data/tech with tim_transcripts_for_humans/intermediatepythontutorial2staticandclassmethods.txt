With timestamps:

00:00 - hey guys and welcome back to another
00:02 - YouTube video in today's video the
00:05 - second video in my intermediate Python
00:07 - tutorials I'm gonna be going over static
00:09 - and class methods so pretty much these
00:13 - are just different things you can use
00:15 - within a class and I'm gonna explain
00:18 - what they do and why they're useful so
00:20 - without further ado let's go ahead and
00:21 - get started so because these two things
00:24 - methods obviously a part of a class use
00:27 - the class we need to first create a
00:28 - class so in this instance I'm just gonna
00:29 - make a class I'm gonna call it person it
00:32 - is a class object and then I just start
00:36 - off by making my initialization method
00:39 - here give itself I'm also gonna give it
00:42 - name and age and we move to the next
00:45 - time so let's just assign our variable
00:47 - skillet here self done name is name and
00:50 - self dot H is equal to H okay the next
00:54 - method I'm gonna make this one is going
00:56 - to be called get population this type
01:02 - self actually here I'm gonna type CLS
01:05 - and I'm gonna get into what this does in
01:08 - a little bit and I'm gonna return CLS
01:10 - dot population and now I just remembered
01:14 - that I actually forgot to make this up
01:16 - here I'm gonna make a class variable
01:18 - where I'm going to say population is
01:21 - equal to 50 like so gain one more method
01:25 - this one I'm gonna call define and then
01:27 - is adult and then in here I'm just gonna
01:31 - put age I'm gonna say return age greater
01:36 - than you go up to 18 okay I'm also gonna
01:39 - make one more method down here just to
01:41 - show you the difference between a bunch
01:43 - of these and I'm just gonna call define
01:45 - display okay and so it's gonna take self
01:50 - and that's actually all we need we're
01:54 - just gonna print to the screen in this
01:55 - one we're gonna say self dot name and
01:58 - then comma is and then comma self dot
02:08 - age
02:09 - , years old so this should if I did this
02:13 - right it's gonna say wherever the
02:15 - person's name is is and then their age
02:17 - years old so for me 18 years old so now
02:21 - let's create a new instance of this
02:22 - class down here so I'm just gonna call
02:25 - this one a new person
02:27 - I set it equal to a person whose name is
02:31 - Tim and whose age is 18 like so and now
02:36 - I'm just gonna go through this class and
02:38 - kind of go through what we've actually
02:40 - done here so pretty much what I've
02:42 - started off by doing is I've created a
02:43 - class variable population goes 50 I've
02:45 - done my constructor method which is just
02:48 - gonna initialize my variables name and
02:50 - age and I've created two methods in here
02:51 - which actually aren't done in the called
02:54 - gap population and is adult now the name
02:58 - of this video is class methods and
02:59 - static methods so one of this is a class
03:01 - is a class method and the other one is a
03:04 - static method go ahead and guess which
03:06 - one you think is which so I'm gonna tell
03:11 - you right now the first one is actually
03:12 - a class method and the next this one
03:15 - here is a static method and the way that
03:18 - we denote these in Python is by putting
03:20 - something called a decorator above these
03:23 - methods so just an @ sign and then the
03:26 - name
03:27 - so in that case static method a class
03:29 - method in this case static method now
03:31 - what is a cloth class method and what is
03:34 - a static method and the best way to
03:35 - explain these is to use an example so
03:38 - pretty much a class method means that
03:40 - you can call it on any instance of a
03:44 - class so you don't need to have for
03:47 - example I don't know what to say you
03:50 - don't have to have an object already
03:51 - created of that class you can just call
03:53 - it on the class so for here for example
03:56 - I've done something like a new person in
03:57 - it typically if I didn't have any other
03:59 - any static methods your class method I
04:02 - would just say like new person display
04:04 - or new person get population with this
04:06 - class method allows us to do is do
04:08 - something like this so we can do person
04:10 - doc get population now person is simply
04:15 - the name of our class it's not the name
04:17 - of an object of that class so a new
04:20 - person is an object of class person
04:23 - whereas
04:23 - it's just the name of the class and if I
04:25 - do that and I print this to the screen
04:27 - so I print person dog cat population
04:29 - assuming I have no errors here oh it
04:32 - says it's because I haven't put little
04:34 - brackets here my back
04:36 - dog cat population it pops up to the
04:38 - screen and it gives us the value of 50
04:40 - and again we didn't have to create an
04:42 - object to use that method because it is
04:45 - a class method I hope that makes sense
04:48 - I'll try to explain it maybe one more
04:49 - time really quickly
04:50 - pretty much you don't need to create an
04:52 - object of the class to use any methods
04:55 - that are decorated as class method now
04:57 - also in class method old it's passed to
05:00 - the class method is well the class
05:03 - because it's not actually an object we
05:05 - don't need this self parameter here like
05:07 - we need in our initialization method and
05:10 - in any other regular methods that we
05:12 - have we just need one variable we can
05:15 - call whatever we want in this case I
05:16 - call it CLS which is gonna store well
05:18 - what class you're getting pretty well
05:20 - and then we can add any other parameter
05:22 - so if you want so I get out X okay y
05:26 - infinitely many after that we just need
05:28 - to make sure that we have at least one
05:30 - in there because for example if I remove
05:32 - this CLS like that
05:34 - it's gonna say take zero positional
05:37 - argument but one was given because the
05:38 - class name is automatically sent into
05:42 - this method when we call it
05:44 - okay the next type of method is static
05:47 - method and this one is similar to class
05:50 - method except it can be called without
05:53 - using that class I want to say so it
05:56 - doesn't take a self parameter it doesn't
05:58 - take a class parameter so you don't
06:01 - actually need anything in here in this
06:02 - case I have age just because I want to
06:03 - be able to compare age but it doesn't
06:07 - need any parameters if I did something
06:08 - like this it would work fine so the way
06:10 - we denote that again is with the @ sign
06:12 - static method just above where the
06:14 - method is defined and to use this method
06:17 - I can do something like person dot is
06:21 - adult and then in here if I put
06:23 - something like five we're gonna get back
06:26 - the value of false which you can see
06:28 - here if I do a value like 21 we get a
06:31 - value of true now why is this useful
06:34 - what's different than class method
06:36 - static man
06:37 - it is just used when you don't need self
06:39 - and you don't again need the actual
06:41 - object and it's just a good
06:43 - organizational way of storing a bunch of
06:45 - method so for example if you had like I
06:47 - don't know maybe a math class that you
06:49 - created and you wanted to have a few
06:51 - math objects and then you wanted a bunch
06:54 - of static methods that we're all stored
06:56 - under that math so for example when you
06:58 - use the math module in Python and use
07:00 - math dot round or math dot so on that's
07:03 - an example of possibly a static method
07:05 - or just a function within the math class
07:08 - you want to organize all your static
07:10 - methods which int within that class so
07:12 - you would call like whatever the class
07:14 - name is math and then dot the method and
07:16 - then you give it an argument and it will
07:17 - return that and work fine I hope that
07:20 - kind of makes sense it is hard to
07:21 - explain if you don't have like a lot of
07:24 - good use cases for it class method it
07:27 - just takes the actual class and then it
07:30 - can access anything within the class
07:32 - that's public to the class so here you
07:35 - see I do CLS population and population
07:38 - is a variable defined up here this
07:40 - static method it can't access this
07:42 - population variable because it doesn't
07:46 - have access to the class name right it
07:48 - doesn't it's not passed that information
07:50 - so it can only use the parameters that
07:53 - you pass it it can't use any better
07:54 - defined within the class and that's
07:58 - really the best way I can kind of
07:59 - explain it to you guys and a good way to
08:01 - understand how to use this and why
08:04 - they're useful is to use them in your
08:05 - own use cases so again static method you
08:09 - can call just by calling the person the
08:11 - name of the class and then that method
08:12 - given whatever parameters it doesn't
08:15 - need any parameters if I do something
08:16 - like this and I just put like five
08:19 - greater than or equal to eighteen this
08:21 - still works you don't need any
08:23 - parameters whereas a class method you
08:26 - need one parameter at least a minimum
08:28 - which is going to be that class name and
08:30 - it has access to anything within the
08:32 - class so any variables you define for
08:34 - other static methods within like within
08:37 - this class method you could call another
08:38 - static method and so on so yeah I hope
08:43 - that makes sense to you guys it is kind
08:44 - of hard to explain the static in class
08:46 - methods but they are really useful
08:47 - especially if you're trying to organize
08:49 - things
08:50 - and when you get further on with
08:52 - object-orientated programming and python
08:54 - you definitely notice that you will use
08:55 - these a lot
08:56 - anyways that's been it for this video
08:57 - please make sure you guys leave a like
08:59 - on the video and subscribe and I will
09:01 - see you again in the next one
09:03 - [Music]

Cleaned transcript:

hey guys and welcome back to another YouTube video in today's video the second video in my intermediate Python tutorials I'm gonna be going over static and class methods so pretty much these are just different things you can use within a class and I'm gonna explain what they do and why they're useful so without further ado let's go ahead and get started so because these two things methods obviously a part of a class use the class we need to first create a class so in this instance I'm just gonna make a class I'm gonna call it person it is a class object and then I just start off by making my initialization method here give itself I'm also gonna give it name and age and we move to the next time so let's just assign our variable skillet here self done name is name and self dot H is equal to H okay the next method I'm gonna make this one is going to be called get population this type self actually here I'm gonna type CLS and I'm gonna get into what this does in a little bit and I'm gonna return CLS dot population and now I just remembered that I actually forgot to make this up here I'm gonna make a class variable where I'm going to say population is equal to 50 like so gain one more method this one I'm gonna call define and then is adult and then in here I'm just gonna put age I'm gonna say return age greater than you go up to 18 okay I'm also gonna make one more method down here just to show you the difference between a bunch of these and I'm just gonna call define display okay and so it's gonna take self and that's actually all we need we're just gonna print to the screen in this one we're gonna say self dot name and then comma is and then comma self dot age , years old so this should if I did this right it's gonna say wherever the person's name is is and then their age years old so for me 18 years old so now let's create a new instance of this class down here so I'm just gonna call this one a new person I set it equal to a person whose name is Tim and whose age is 18 like so and now I'm just gonna go through this class and kind of go through what we've actually done here so pretty much what I've started off by doing is I've created a class variable population goes 50 I've done my constructor method which is just gonna initialize my variables name and age and I've created two methods in here which actually aren't done in the called gap population and is adult now the name of this video is class methods and static methods so one of this is a class is a class method and the other one is a static method go ahead and guess which one you think is which so I'm gonna tell you right now the first one is actually a class method and the next this one here is a static method and the way that we denote these in Python is by putting something called a decorator above these methods so just an @ sign and then the name so in that case static method a class method in this case static method now what is a cloth class method and what is a static method and the best way to explain these is to use an example so pretty much a class method means that you can call it on any instance of a class so you don't need to have for example I don't know what to say you don't have to have an object already created of that class you can just call it on the class so for here for example I've done something like a new person in it typically if I didn't have any other any static methods your class method I would just say like new person display or new person get population with this class method allows us to do is do something like this so we can do person doc get population now person is simply the name of our class it's not the name of an object of that class so a new person is an object of class person whereas it's just the name of the class and if I do that and I print this to the screen so I print person dog cat population assuming I have no errors here oh it says it's because I haven't put little brackets here my back dog cat population it pops up to the screen and it gives us the value of 50 and again we didn't have to create an object to use that method because it is a class method I hope that makes sense I'll try to explain it maybe one more time really quickly pretty much you don't need to create an object of the class to use any methods that are decorated as class method now also in class method old it's passed to the class method is well the class because it's not actually an object we don't need this self parameter here like we need in our initialization method and in any other regular methods that we have we just need one variable we can call whatever we want in this case I call it CLS which is gonna store well what class you're getting pretty well and then we can add any other parameter so if you want so I get out X okay y infinitely many after that we just need to make sure that we have at least one in there because for example if I remove this CLS like that it's gonna say take zero positional argument but one was given because the class name is automatically sent into this method when we call it okay the next type of method is static method and this one is similar to class method except it can be called without using that class I want to say so it doesn't take a self parameter it doesn't take a class parameter so you don't actually need anything in here in this case I have age just because I want to be able to compare age but it doesn't need any parameters if I did something like this it would work fine so the way we denote that again is with the @ sign static method just above where the method is defined and to use this method I can do something like person dot is adult and then in here if I put something like five we're gonna get back the value of false which you can see here if I do a value like 21 we get a value of true now why is this useful what's different than class method static man it is just used when you don't need self and you don't again need the actual object and it's just a good organizational way of storing a bunch of method so for example if you had like I don't know maybe a math class that you created and you wanted to have a few math objects and then you wanted a bunch of static methods that we're all stored under that math so for example when you use the math module in Python and use math dot round or math dot so on that's an example of possibly a static method or just a function within the math class you want to organize all your static methods which int within that class so you would call like whatever the class name is math and then dot the method and then you give it an argument and it will return that and work fine I hope that kind of makes sense it is hard to explain if you don't have like a lot of good use cases for it class method it just takes the actual class and then it can access anything within the class that's public to the class so here you see I do CLS population and population is a variable defined up here this static method it can't access this population variable because it doesn't have access to the class name right it doesn't it's not passed that information so it can only use the parameters that you pass it it can't use any better defined within the class and that's really the best way I can kind of explain it to you guys and a good way to understand how to use this and why they're useful is to use them in your own use cases so again static method you can call just by calling the person the name of the class and then that method given whatever parameters it doesn't need any parameters if I do something like this and I just put like five greater than or equal to eighteen this still works you don't need any parameters whereas a class method you need one parameter at least a minimum which is going to be that class name and it has access to anything within the class so any variables you define for other static methods within like within this class method you could call another static method and so on so yeah I hope that makes sense to you guys it is kind of hard to explain the static in class methods but they are really useful especially if you're trying to organize things and when you get further on with objectorientated programming and python you definitely notice that you will use these a lot anyways that's been it for this video please make sure you guys leave a like on the video and subscribe and I will see you again in the next one
