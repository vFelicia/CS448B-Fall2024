With timestamps:

00:00 - so welcome back to another Java
00:02 - programming tutorial so in today's video
00:04 - we're going to be going over classes
00:06 - when we talk about creating classes
00:07 - creating some methods constructor
00:09 - methods all that fun stuff creating
00:11 - instances and objects and yeah so this
00:14 - is going to be kind of an advanced video
00:16 - don't if you've been following along so
00:18 - far you'll definitely be able to follow
00:19 - along with it but just know that now
00:21 - we're kind of getting into some harder
00:22 - aspects of Java so if you guys don't
00:24 - understand this please don't hesitate to
00:26 - join my discord server ask me some
00:27 - questions leave a comment down below
00:29 - because this is absolutely fundamental
00:31 - and you have to understand this before
00:32 - you can really start doing any serious
00:34 - programming and that goes for kind of
00:36 - all languages but Java especially since
00:38 - it is an object-oriented language we
00:40 - need to understand classes and how to
00:42 - create classes so without further ado
00:44 - let's get started so so far we've been
00:46 - working in this class called main now
00:48 - this is not really a true class because
00:50 - this class all it's doing for us is just
00:53 - running some code right away when we run
00:56 - the program and that's why we have this
00:57 - public static void main function that
00:59 - automatically triggers whenever we click
01:01 - this little green Run button okay so
01:04 - what I'm gonna do now and you can see
01:06 - that I have some methods that I've added
01:07 - in here that we just kind of use within
01:09 - here earlier okay what I'm gonna do now
01:12 - is I'm going to create my own class from
01:14 - scripts from scratch and we're gonna
01:16 - start coding so to do this we're gonna
01:18 - go to whatever our package is so in this
01:20 - case tutorial 1 for me and I'm gonna go
01:21 - new and class and I just did that by
01:23 - right clicking and now I'm gonna give my
01:25 - class a name now for this example I'm
01:27 - going to create a dog class and yeah you
01:30 - guys can create whatever you want but I
01:32 - would recommend you follow along with me
01:33 - since you guys are most likely new to
01:35 - classes ok so now we have this thing and
01:38 - this says public class dog you can see
01:40 - we open up in a new file so whenever we
01:42 - create a new class in Java we have to
01:44 - actually create a new file for that now
01:46 - it's actually good because it makes it
01:47 - really easy to navigate between
01:49 - different classes
01:50 - whereas in something like Python you can
01:52 - just have all your classes on one file
01:54 - ok so what we're gonna do now is we have
01:56 - this public class dog so what does this
01:58 - what does this mean like what is a class
02:00 - well a class is pretty much a data type
02:03 - and whenever we create an instance of a
02:05 - class like an object of a certain type
02:07 - all we're doing is we're just using all
02:09 - the information within the class to like
02:11 - create an object so it you can almost
02:12 - think of it as like a blooper
02:13 - for an object now what problems do
02:16 - classes solve for us like why are they
02:18 - useful so I'm gonna introduce kind of a
02:20 - very simple problem alright so I want to
02:22 - create five dogs okay I want to have
02:25 - five dogs I want each dog to have a name
02:27 - I want each dog to have an age and I
02:29 - want to at some point be able to like
02:32 - call something and print out the each
02:34 - dog's name and age in like a nice form
02:36 - okay now we could do that we know how to
02:39 - do that if we went back into main here
02:41 - what we could do in this little
02:43 - what-do-you-call-it method here is we
02:45 - could just type a bunch of hints we can
02:46 - say int like dog 1 and this is equal to
02:49 - 4 and that's dog ones age and you say
02:50 - int dog 2 and that's it good to 5 we
02:53 - could go on and we could create 10
02:54 - variables 5 for the age and 5 for the
02:57 - the names right and then we could go and
02:59 - we could print out each one each time
03:00 - but that is incredibly inefficient and
03:03 - what if I wanted to have like 10,000
03:05 - dogs well what would I do then well we
03:08 - could use like lists to create or lists
03:10 - or arrays to create names and ages
03:12 - that's just not efficient it doesn't
03:14 - look as good in our actual coding so
03:17 - what we're going to do is going to use a
03:18 - class and you'll see how we can kind of
03:19 - accomplish this problem so within
03:21 - classes we have methods and we have
03:24 - attributes
03:25 - okay now attributes are kind of like
03:27 - variables that hold information for us
03:29 - so in this case we want to have two
03:31 - attributes in our dog class and these
03:33 - are going to be the name and the age to
03:35 - create our attributes that's the first
03:37 - thing we typically do when we create a
03:38 - class is right at the top of our class
03:40 - we're gonna type the keyword private and
03:42 - then we're gonna give a data types in
03:44 - this case me to say string and then the
03:46 - name of our attributes in this case name
03:48 - okay and this is all we have to do we're
03:50 - just declaring that at some point in
03:51 - time we're gonna have the attribute name
03:54 - and it's going to be storing some
03:55 - information later on in our program okay
03:57 - we can also do private int and in this
04:01 - case we'll do age and this is gonna
04:03 - obviously represent the dog's age now if
04:06 - you want to have some other attributes
04:07 - we've it again type private and we can
04:10 - keep going and type a bunch of
04:11 - attributes now what is this private
04:14 - keyword and why do we have public up
04:16 - here and private here well what this
04:19 - private keyword does is it ensures that
04:21 - this name and this age are only
04:23 - accessible within this class meaning
04:26 - that if I
04:26 - tried to do something over here and I
04:28 - wanted to use this age and this name
04:30 - from this class I wouldn't be allowed to
04:32 - do that and the program would say no
04:34 - this is a private attribute you can't
04:35 - access that why do we do that well you'd
04:38 - find out in larger programs but we can
04:40 - also create public attributes as well
04:41 - that are accessible to the other classes
04:44 - okay so if I wanted my things to be
04:46 - public I can put public for now whenever
04:48 - we're using attributes we're gonna use
04:50 - private and it's best practice to use
04:52 - more private things okay and the same
04:54 - goes for methods which you'll see in a
04:56 - minute okay so now I need to create
04:58 - something called a constructor method
05:00 - now this you typically only create one
05:02 - of these although you can create
05:04 - multiple and what this is going to do is
05:07 - it is gonna run automatically whenever
05:08 - we call this dog class and the way we
05:11 - create this constructor and we typically
05:13 - need one of these when we have a class
05:14 - is we're gonna do public and we're just
05:18 - going to type the name of our class once
05:20 - again so that's giving us a public dog
05:21 - like this okay and you can see that now
05:25 - we're getting no errors everything's
05:26 - fine and in here we are going to type
05:28 - the parameters or the information that
05:30 - we need to be passed in whenever we're
05:32 - creating a dog object now in some
05:35 - instances you may have nothing in here
05:36 - when you create a dog object all you
05:38 - need to do is just say you're creating a
05:40 - dog object you don't need to give any
05:41 - information and that's fine but in our
05:43 - case we want to be able to create an age
05:44 - and a name with our dog so what I need
05:47 - to do here is I need to type string name
05:49 - and int age okay just meaning that
05:53 - whenever we create a dog object we need
05:55 - to give it a name and we need to give it
05:56 - an age now what I'm gonna do is I'm
05:59 - gonna set these values so these
06:01 - attributes equal to whatever we pass in
06:04 - okay so what I'm gonna do is I'm
06:05 - actually just gonna use a keyword and
06:07 - it's the keyword is this it's kind of
06:09 - hard if you weren't watching you'd think
06:11 - I'm just like saying this is the keyword
06:12 - in pointing something but this like
06:14 - actually typed out and then I'm doing
06:16 - this dot name is gonna be equal to name
06:18 - and this dot age is going to be equal to
06:21 - H so what is this this this keyword
06:25 - actually doing well it is referencing
06:28 - the attributes of the class okay so when
06:31 - we type this it is going to be looking
06:34 - up here to find all of our like private
06:37 - attributes and in this case we have an
06:38 - age and we have a
06:39 - name all right and that's how we
06:40 - reference things that are a part of the
06:43 - specific instance we have this name and
06:45 - this age okay and I'm gonna explain more
06:47 - and more of this as we keep going
06:48 - it's hard to do it in like small steps
06:51 - okay so now that I have this constructor
06:53 - method created we can go on to create
06:56 - one more method and then we can actually
06:58 - start using this class really simply
07:00 - okay so what I'm gonna do now is I'm
07:01 - gonna create another method and this
07:02 - case I'm going to type a public I'm not
07:04 - gonna return anything so I'm gonna use
07:06 - void okay and the name is gonna be speak
07:08 - and what this is gonna do is it is
07:10 - simply going to say something or prints
07:12 - me up to the screens let me say system
07:14 - dot out dot print LM why did that okay
07:20 - println and all we're gonna do is gonna
07:22 - say I am and I want to say that the
07:24 - dog's name so in this case we'll say
07:26 - this dot name okay and we'll say plus
07:30 - and I am you know a plus we'll say this
07:36 - dot age plus years old okay
07:42 - so it's simply gonna say like I am
07:44 - whatever the name is and I am however
07:47 - many years old not great grammar but
07:48 - that's fine so now how do we actually
07:51 - create a instance of this or how do we
07:53 - use this dog class well from our main
07:56 - class here which we should still have
07:57 - open and you know we can delete all
07:59 - these we don't need all that so we'll
08:00 - get rid of all this stuff here we can
08:02 - actually create a object and to do that
08:04 - of type dog what we're simply gonna do
08:06 - is you can type dog and we're gonna give
08:08 - it a name in this case I'm going to say
08:09 - Tim is equal to new dog okay and then
08:14 - remember that we have to give dog some
08:18 - parameters right so or arguments because
08:20 - we have the name and we have the age so
08:22 - what we need to do is we need to give it
08:23 - a name in an age in this case we tighten
08:25 - up Tim and I'm gonna type for and now
08:28 - you can see no red line we're looking
08:30 - good
08:30 - so our dog's name is Tim and it's age as
08:33 - for okay so that's great let's run the
08:35 - program make sure this is working
08:36 - everything's fine now what I want to do
08:39 - is I want to use that speak method so
08:42 - how can I use that
08:43 - well what I'm gonna do is I'm gonna type
08:45 - Tim which is the name my dog or like the
08:47 - variable for it dot speak like this okay
08:50 - semicolon
08:52 - and let's see what happens we get I am
08:54 - Tim and excuse me I am four years old so
08:59 - the way that this worked right is we
09:01 - created a instance of the dog class and
09:03 - the instance was named Tim and it
09:06 - referenced a dog object okay so now when
09:09 - we created that instance we said okay so
09:10 - this instance this specific one is gonna
09:13 - have an age of four and a name of Tim
09:15 - all right so it's stored that
09:17 - information up here in our private
09:18 - string and our private int and then
09:20 - later on when we decided we wanted to
09:22 - call this well it said okay we'll give
09:24 - me the instance you're calling it on so
09:26 - in this case we're calling it on Tim
09:27 - we're gonna say okay so Tim what's Tim's
09:29 - name well it's name is well it's Tim
09:31 - okay so we'll say Tim what's its age
09:33 - it's H that's four so we'll print four
09:35 - to the screen now we can obviously
09:37 - create multiple dog objects so what's
09:39 - copyist and let's create a few more
09:41 - he'll create three dog objects and I say
09:43 - this is Bill and he is seven and we'll
09:47 - say this is Bob and he is 11
09:51 - okay let's copy this and I'll keep
09:54 - naming the same thing let's go Bob and
09:56 - let's go bill and then we can simply
10:00 - call the speak methods on them
10:01 - okay so we'll say Bill and we'll say Bob
10:04 - all right and just to prove something
10:06 - I'm gonna say Tim not speak again and
10:08 - we'll talk about why I do that in just a
10:10 - second okay
10:10 - so let's run this let me say I am Tim
10:13 - and I'm four years old I'm Bill I'm
10:14 - seven then go on and you can read
10:16 - through them okay now notice when we
10:19 - call it Tim again it still retains its
10:21 - age and its name when we do this we're
10:23 - not actually changing like this is not
10:26 - one variable we actually now have three
10:29 - different names right we have Tim we
10:31 - have Bill we have Bob and they're
10:32 - specific to each of these variables that
10:34 - are storing that dog object okay so that
10:37 - means that we can hold like unique
10:39 - values for each of our different
10:41 - instances and we can have like infinite
10:43 - amount of instances of a class okay all
10:46 - right so that is about it I think I'm
10:49 - gonna talk about quickly I already
10:52 - talked to a private versus public
10:53 - well let's create some more methods in
10:55 - here and see what they can do and I'll
10:57 - talk about a bit more about constructors
10:58 - because we're only at like 11 minutes so
11:00 - what I'm gonna do now is I'm going to
11:01 - create another method I'm going to call
11:04 - this
11:05 - get age okay so I'm gonna say public and
11:07 - in this case we'll say int gets age all
11:11 - right and all we're gonna do in here is
11:13 - simply return the age to let's see a
11:17 - return statement to wherever we're
11:18 - calling it from so this case I'm going
11:20 - to say is I'm gonna return this dot H
11:23 - now the reason I need to do this is
11:25 - because say I want to get the age of one
11:26 - of my dogs right like say I created it I
11:28 - changed it around I don't know what it
11:29 - is I want the age well we can't simply
11:31 - do something like in other languages
11:33 - we'd be able to do like Tim age right
11:36 - now you see when we do this we get these
11:38 - old red lines and it says the field dog
11:41 - age is not visible and that is because
11:43 - again it's private so it's not letting
11:45 - us see it from over here in this main
11:47 - function only within this muttering
11:50 - method only within this class can we
11:52 - actually reference this variable right
11:54 - so to get the age what we can do is we
11:56 - can call Tim dot get aged like that okay
12:00 - and we can print that to the screen we
12:01 - say like int x equals gonna say
12:07 - system.out.println and o x is already
12:10 - there great so now if we run this we can
12:13 - see that we get four down here excuse me
12:15 - at the at the bottom of the screen now
12:18 - we can actually do the same thing with
12:20 - like setting the age so say we wanted to
12:21 - change the age at some point maybe Tim
12:23 - got a year older well what we would do
12:25 - is we have to create another method in
12:26 - here in this case we're gonna make it
12:28 - public again we're gonna say public and
12:29 - we don't need into this time because
12:31 - we're just gonna change something we're
12:32 - not gonna return something to say public
12:34 - void and we'll say set age okay and then
12:38 - we're gonna take an age because we need
12:39 - to know what we're gonna set it to and
12:41 - we'll just say this dot age equals age
12:44 - so just like we've done up here it's the
12:46 - exact same thing except we're just going
12:48 - to do it within the method set age so
12:50 - now if I want to change the age so let's
12:52 - say instead of that will say set age and
12:56 - we'll give it a value of ten then we
12:59 - print out let's just say Tim not speak
13:01 - again what's gonna happen now sorry guys
13:06 - I'm a bit sick if I keep coughing all
13:07 - over the place what I'm gonna do is Oh
13:10 - what's her air Tim not set age ten
13:13 - return type of set age two int
13:17 - mmm one second here sorry public let's
13:20 - try this in set H public void I know I'm
13:26 - making a mistake over here oh okay
13:27 - that's why I can't do I can't set equal
13:29 - to a variable I have to call like Tim
13:31 - dots at age by bad on that guy's we do
13:33 - speak we can see now it says I am Tim
13:35 - and I am 10 years old and we've changed
13:37 - from the age of four so that's how we
13:39 - would go about changing these attributes
13:41 - later on within the the class okay now I
13:45 - want to do one last one I want to create
13:47 - a private method and show you what this
13:49 - is okay so I'm gonna create a privates
13:51 - Boyd actually now let's do it okay and
13:55 - we're gonna call this ad - it's not
13:58 - gonna make any sense with the dog class
13:59 - but just it's just for an example okay
14:01 - and in here we're gonna take actually we
14:03 - won't take anything but we will get a
14:04 - return we're gonna return this start age
14:08 - plus two okay now this is a private
14:12 - method meaning that it can only be used
14:15 - and seen within this dog class so say I
14:18 - wanted to use this ad - maybe I could do
14:21 - this I can do ad - here okay and just do
14:25 - a little semicolon and there we go I
14:27 - could use add to and that that works
14:30 - fine there's no issues for that okay and
14:31 - that's how you use methods with inside
14:33 - of the class so like speak I can easily
14:36 - every time we initiate the dog call the
14:39 - speak method as well and to do it within
14:41 - the class you don't need to do like
14:42 - something dot you just call the actual
14:44 - name because it's really visible within
14:46 - here right now watch what happens if I
14:48 - go over here and I try to use that so
14:51 - add - so I'll say Tim dot add - like
14:54 - this and you can see that again we're
14:57 - getting a red line and says this is not
14:59 - visible you can't use it because it's a
15:01 - private method okay so I think that's
15:05 - gonna wrap it up for this video on
15:07 - classes hopefully you guys now
15:09 - understand kind of how you can create
15:10 - classes how to create methods somewhat
15:12 - and in the next video we're going to go
15:13 - more in advance we're gonna talk about
15:15 - inheritance we're gonna talk about
15:16 - multiple constructors and then we're
15:19 - just gonna keep on going again more and
15:20 - more advanced as we go so as always if
15:22 - you guys enjoyed the video please make
15:23 - sure you leave a like and subscribe and
15:25 - I will see you again in another word
15:27 - [Music]

Cleaned transcript:

so welcome back to another Java programming tutorial so in today's video we're going to be going over classes when we talk about creating classes creating some methods constructor methods all that fun stuff creating instances and objects and yeah so this is going to be kind of an advanced video don't if you've been following along so far you'll definitely be able to follow along with it but just know that now we're kind of getting into some harder aspects of Java so if you guys don't understand this please don't hesitate to join my discord server ask me some questions leave a comment down below because this is absolutely fundamental and you have to understand this before you can really start doing any serious programming and that goes for kind of all languages but Java especially since it is an objectoriented language we need to understand classes and how to create classes so without further ado let's get started so so far we've been working in this class called main now this is not really a true class because this class all it's doing for us is just running some code right away when we run the program and that's why we have this public static void main function that automatically triggers whenever we click this little green Run button okay so what I'm gonna do now and you can see that I have some methods that I've added in here that we just kind of use within here earlier okay what I'm gonna do now is I'm going to create my own class from scripts from scratch and we're gonna start coding so to do this we're gonna go to whatever our package is so in this case tutorial 1 for me and I'm gonna go new and class and I just did that by right clicking and now I'm gonna give my class a name now for this example I'm going to create a dog class and yeah you guys can create whatever you want but I would recommend you follow along with me since you guys are most likely new to classes ok so now we have this thing and this says public class dog you can see we open up in a new file so whenever we create a new class in Java we have to actually create a new file for that now it's actually good because it makes it really easy to navigate between different classes whereas in something like Python you can just have all your classes on one file ok so what we're gonna do now is we have this public class dog so what does this what does this mean like what is a class well a class is pretty much a data type and whenever we create an instance of a class like an object of a certain type all we're doing is we're just using all the information within the class to like create an object so it you can almost think of it as like a blooper for an object now what problems do classes solve for us like why are they useful so I'm gonna introduce kind of a very simple problem alright so I want to create five dogs okay I want to have five dogs I want each dog to have a name I want each dog to have an age and I want to at some point be able to like call something and print out the each dog's name and age in like a nice form okay now we could do that we know how to do that if we went back into main here what we could do in this little whatdoyoucallit method here is we could just type a bunch of hints we can say int like dog 1 and this is equal to 4 and that's dog ones age and you say int dog 2 and that's it good to 5 we could go on and we could create 10 variables 5 for the age and 5 for the the names right and then we could go and we could print out each one each time but that is incredibly inefficient and what if I wanted to have like 10,000 dogs well what would I do then well we could use like lists to create or lists or arrays to create names and ages that's just not efficient it doesn't look as good in our actual coding so what we're going to do is going to use a class and you'll see how we can kind of accomplish this problem so within classes we have methods and we have attributes okay now attributes are kind of like variables that hold information for us so in this case we want to have two attributes in our dog class and these are going to be the name and the age to create our attributes that's the first thing we typically do when we create a class is right at the top of our class we're gonna type the keyword private and then we're gonna give a data types in this case me to say string and then the name of our attributes in this case name okay and this is all we have to do we're just declaring that at some point in time we're gonna have the attribute name and it's going to be storing some information later on in our program okay we can also do private int and in this case we'll do age and this is gonna obviously represent the dog's age now if you want to have some other attributes we've it again type private and we can keep going and type a bunch of attributes now what is this private keyword and why do we have public up here and private here well what this private keyword does is it ensures that this name and this age are only accessible within this class meaning that if I tried to do something over here and I wanted to use this age and this name from this class I wouldn't be allowed to do that and the program would say no this is a private attribute you can't access that why do we do that well you'd find out in larger programs but we can also create public attributes as well that are accessible to the other classes okay so if I wanted my things to be public I can put public for now whenever we're using attributes we're gonna use private and it's best practice to use more private things okay and the same goes for methods which you'll see in a minute okay so now I need to create something called a constructor method now this you typically only create one of these although you can create multiple and what this is going to do is it is gonna run automatically whenever we call this dog class and the way we create this constructor and we typically need one of these when we have a class is we're gonna do public and we're just going to type the name of our class once again so that's giving us a public dog like this okay and you can see that now we're getting no errors everything's fine and in here we are going to type the parameters or the information that we need to be passed in whenever we're creating a dog object now in some instances you may have nothing in here when you create a dog object all you need to do is just say you're creating a dog object you don't need to give any information and that's fine but in our case we want to be able to create an age and a name with our dog so what I need to do here is I need to type string name and int age okay just meaning that whenever we create a dog object we need to give it a name and we need to give it an age now what I'm gonna do is I'm gonna set these values so these attributes equal to whatever we pass in okay so what I'm gonna do is I'm actually just gonna use a keyword and it's the keyword is this it's kind of hard if you weren't watching you'd think I'm just like saying this is the keyword in pointing something but this like actually typed out and then I'm doing this dot name is gonna be equal to name and this dot age is going to be equal to H so what is this this this keyword actually doing well it is referencing the attributes of the class okay so when we type this it is going to be looking up here to find all of our like private attributes and in this case we have an age and we have a name all right and that's how we reference things that are a part of the specific instance we have this name and this age okay and I'm gonna explain more and more of this as we keep going it's hard to do it in like small steps okay so now that I have this constructor method created we can go on to create one more method and then we can actually start using this class really simply okay so what I'm gonna do now is I'm gonna create another method and this case I'm going to type a public I'm not gonna return anything so I'm gonna use void okay and the name is gonna be speak and what this is gonna do is it is simply going to say something or prints me up to the screens let me say system dot out dot print LM why did that okay println and all we're gonna do is gonna say I am and I want to say that the dog's name so in this case we'll say this dot name okay and we'll say plus and I am you know a plus we'll say this dot age plus years old okay so it's simply gonna say like I am whatever the name is and I am however many years old not great grammar but that's fine so now how do we actually create a instance of this or how do we use this dog class well from our main class here which we should still have open and you know we can delete all these we don't need all that so we'll get rid of all this stuff here we can actually create a object and to do that of type dog what we're simply gonna do is you can type dog and we're gonna give it a name in this case I'm going to say Tim is equal to new dog okay and then remember that we have to give dog some parameters right so or arguments because we have the name and we have the age so what we need to do is we need to give it a name in an age in this case we tighten up Tim and I'm gonna type for and now you can see no red line we're looking good so our dog's name is Tim and it's age as for okay so that's great let's run the program make sure this is working everything's fine now what I want to do is I want to use that speak method so how can I use that well what I'm gonna do is I'm gonna type Tim which is the name my dog or like the variable for it dot speak like this okay semicolon and let's see what happens we get I am Tim and excuse me I am four years old so the way that this worked right is we created a instance of the dog class and the instance was named Tim and it referenced a dog object okay so now when we created that instance we said okay so this instance this specific one is gonna have an age of four and a name of Tim all right so it's stored that information up here in our private string and our private int and then later on when we decided we wanted to call this well it said okay we'll give me the instance you're calling it on so in this case we're calling it on Tim we're gonna say okay so Tim what's Tim's name well it's name is well it's Tim okay so we'll say Tim what's its age it's H that's four so we'll print four to the screen now we can obviously create multiple dog objects so what's copyist and let's create a few more he'll create three dog objects and I say this is Bill and he is seven and we'll say this is Bob and he is 11 okay let's copy this and I'll keep naming the same thing let's go Bob and let's go bill and then we can simply call the speak methods on them okay so we'll say Bill and we'll say Bob all right and just to prove something I'm gonna say Tim not speak again and we'll talk about why I do that in just a second okay so let's run this let me say I am Tim and I'm four years old I'm Bill I'm seven then go on and you can read through them okay now notice when we call it Tim again it still retains its age and its name when we do this we're not actually changing like this is not one variable we actually now have three different names right we have Tim we have Bill we have Bob and they're specific to each of these variables that are storing that dog object okay so that means that we can hold like unique values for each of our different instances and we can have like infinite amount of instances of a class okay all right so that is about it I think I'm gonna talk about quickly I already talked to a private versus public well let's create some more methods in here and see what they can do and I'll talk about a bit more about constructors because we're only at like 11 minutes so what I'm gonna do now is I'm going to create another method I'm going to call this get age okay so I'm gonna say public and in this case we'll say int gets age all right and all we're gonna do in here is simply return the age to let's see a return statement to wherever we're calling it from so this case I'm going to say is I'm gonna return this dot H now the reason I need to do this is because say I want to get the age of one of my dogs right like say I created it I changed it around I don't know what it is I want the age well we can't simply do something like in other languages we'd be able to do like Tim age right now you see when we do this we get these old red lines and it says the field dog age is not visible and that is because again it's private so it's not letting us see it from over here in this main function only within this muttering method only within this class can we actually reference this variable right so to get the age what we can do is we can call Tim dot get aged like that okay and we can print that to the screen we say like int x equals gonna say system.out.println and o x is already there great so now if we run this we can see that we get four down here excuse me at the at the bottom of the screen now we can actually do the same thing with like setting the age so say we wanted to change the age at some point maybe Tim got a year older well what we would do is we have to create another method in here in this case we're gonna make it public again we're gonna say public and we don't need into this time because we're just gonna change something we're not gonna return something to say public void and we'll say set age okay and then we're gonna take an age because we need to know what we're gonna set it to and we'll just say this dot age equals age so just like we've done up here it's the exact same thing except we're just going to do it within the method set age so now if I want to change the age so let's say instead of that will say set age and we'll give it a value of ten then we print out let's just say Tim not speak again what's gonna happen now sorry guys I'm a bit sick if I keep coughing all over the place what I'm gonna do is Oh what's her air Tim not set age ten return type of set age two int mmm one second here sorry public let's try this in set H public void I know I'm making a mistake over here oh okay that's why I can't do I can't set equal to a variable I have to call like Tim dots at age by bad on that guy's we do speak we can see now it says I am Tim and I am 10 years old and we've changed from the age of four so that's how we would go about changing these attributes later on within the the class okay now I want to do one last one I want to create a private method and show you what this is okay so I'm gonna create a privates Boyd actually now let's do it okay and we're gonna call this ad it's not gonna make any sense with the dog class but just it's just for an example okay and in here we're gonna take actually we won't take anything but we will get a return we're gonna return this start age plus two okay now this is a private method meaning that it can only be used and seen within this dog class so say I wanted to use this ad maybe I could do this I can do ad here okay and just do a little semicolon and there we go I could use add to and that that works fine there's no issues for that okay and that's how you use methods with inside of the class so like speak I can easily every time we initiate the dog call the speak method as well and to do it within the class you don't need to do like something dot you just call the actual name because it's really visible within here right now watch what happens if I go over here and I try to use that so add so I'll say Tim dot add like this and you can see that again we're getting a red line and says this is not visible you can't use it because it's a private method okay so I think that's gonna wrap it up for this video on classes hopefully you guys now understand kind of how you can create classes how to create methods somewhat and in the next video we're going to go more in advance we're gonna talk about inheritance we're gonna talk about multiple constructors and then we're just gonna keep on going again more and more advanced as we go so as always if you guys enjoyed the video please make sure you leave a like and subscribe and I will see you again in another word
