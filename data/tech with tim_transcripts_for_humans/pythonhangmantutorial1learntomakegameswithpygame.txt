With timestamps:

00:02 - [Music]
00:06 - hello everybody and welcome back to
00:09 - another brand new Python tutorial series
00:11 - in this next three videos what we're
00:13 - gonna be doing is working towards
00:15 - creating our very own version of hangman
00:17 - so you can see hangman on the screen and
00:19 - what we're gonna be doing here is
00:20 - learning more about Python learning
00:22 - about a popular module called a PI game
00:24 - which allows you to create 2d games and
00:27 - then of course applying all of those
00:28 - skills to our own project I find that
00:31 - the best way to learn is actually
00:32 - working towards an end goal which is a
00:34 - project and learning a little bit about
00:37 - the theoretical concepts about why and
00:39 - how things work and then immediately
00:40 - applying them into some kind of project
00:42 - like we're gonna be doing here so this
00:45 - series is gonna be well-suited for
00:46 - people that have a little bit of
00:47 - experience in Python but then maybe
00:49 - aren't too confident maybe they don't
00:51 - know how to set up a large program yet
00:53 - and I think there's gonna be a lot of
00:54 - lessons and things that people can learn
00:56 - just by seeing the way that I'm actually
00:58 - gonna go about setting up this program
01:00 - so this is gonna be about a hundred and
01:02 - fifteen lines of code it might be a
01:03 - little bit longer a little bit shorter
01:05 - but in that range and I think that if
01:07 - you're a beginner being able to see how
01:09 - you can actually set up a program of
01:10 - this length how you can declare things
01:13 - like constant value some best practices
01:15 - it's a really valuable skill and of
01:17 - course I'm gonna be trying my best to
01:18 - teach that to you as we apply these
01:20 - skills to our own hangman game so with
01:22 - that being said let me give a quick demo
01:24 - of this game and then we're gonna talk
01:26 - about the online coding platform I'm
01:28 - actually using and then of course we
01:30 - will get into the code and talk about
01:31 - everything you need to download and
01:33 - anything you need to do to get set up so
01:35 - the first thing we'll do is actually
01:36 - look at this game hangman so I've made
01:39 - this this is a demo version our final
01:41 - version may look a little bit different
01:43 - depending on if we change anything and
01:44 - of course as we go through this series
01:46 - you're welcome to modify anything you
01:48 - like and I would encourage you to do so
01:50 - so you can see hangman I assume all of
01:52 - you know how hangman works but
01:54 - essentially we have a bunch of letters
01:55 - here this is the word that we're trying
01:57 - to guess and we can pick these letters
01:59 - and if we get them corrected we'll fill
02:01 - in these blanks otherwise another part
02:03 - of the man on this whatever we want to
02:05 - call it will pop up so let's have a look
02:08 - here if I type C we can see that that
02:10 - apparently was not in the word so we got
02:13 - if I type B we get the torso and now
02:16 - let's put a letter that is their D okay
02:18 - can you guys guess what the word is
02:20 - I'm gonna go V that one was there J
02:23 - that's not there okay no e okay let's go
02:28 - with an R alright G let's go with an L
02:32 - let's go with an O and I know what this
02:35 - word is I'm gonna go with a P so the
02:38 - word was developer we got that correct
02:40 - and then the game adds so that is the
02:43 - basics of this hangman game of course we
02:45 - may or may not add more things to it and
02:47 - I will be showing you near the very end
02:49 - of this series how you can kind of
02:50 - customize this make new words and all of
02:53 - that fun stuff so with that being said
02:54 - let me talk about this online coding
02:56 - platform that we're actually going to be
02:58 - using which is called repla so for this
03:01 - series I wanted to use a platform that
03:03 - requires pretty much no setup for us and
03:05 - that anyone will be able to use
03:07 - regardless if if you're on a phone if
03:09 - you're on an iPad if you're on a laptop
03:10 - doesn't matter what machine you're using
03:12 - so long as you have internet access and
03:14 - a browser you will be able to follow
03:16 - along with this tutorial series and
03:18 - that's because we're gonna be using a
03:20 - website called repple dot I T otherwise
03:22 - known as repli'd so the URL is repl dot
03:26 - I T you can see I'm on it right here and
03:29 - this is an online collaborative coding
03:31 - environment now what this means is that
03:34 - you can hop into your browser you can
03:36 - type in this URL and immediately you can
03:38 - get brought into this coding environment
03:40 - and start writing code so you don't need
03:42 - to download anything you don't need to
03:44 - set anything up and it's a bunch of
03:45 - really cool features on this website
03:47 - that I'm just gonna walk you through
03:48 - slowly because I think they're really
03:50 - valuable and that you guys will find a
03:52 - lot of value from them so repli'd has
03:54 - sponsored this tutorial series I'll be
03:56 - clear here but these are some of the
03:58 - features of repli'd that I want to
04:00 - discuss so there's an in-browser
04:02 - IDE this means that's kind of the online
04:05 - coding environment you were looking at
04:06 - before it has real-time collaboration
04:09 - which actually means if you wanted to
04:10 - you can invite your friends you could
04:12 - invite other people to modify your code
04:14 - in real time that's actually a really
04:16 - cool feature that I don't see on many
04:17 - other platforms and as github
04:19 - integration which will become important
04:21 - as you work on larger projects in the
04:22 - future 50-plus languages including
04:25 - support for Pi game
04:26 - which is the module we're going to be
04:27 - using you can host and deploy your code
04:29 - there's a bunch of learning resources
04:31 - and tutorials right on the website that
04:33 - you can follow along with there's team
04:35 - plans and then there's API and plugins
04:37 - which probably aren't that relevant to
04:39 - all of you but this is the platform
04:40 - we're gonna be using so the first step
04:42 - for us in this series is going to be to
04:43 - head over to rappelled 80 again
04:46 - otherwise known as repli'd URL is repl
04:49 - IT and of course that link will be in
04:51 - the description so once we head over
04:53 - there what you're gonna need to do is
04:55 - start create an account or log in I
04:57 - believe you can sign in with your Google
04:58 - account that's what I've done and once
05:00 - you do that you should be asked to enter
05:02 - your favorite programming languages and
05:04 - then you'll be brought to a page that
05:06 - looks like this
05:07 - so I would recommend selecting a Python
05:09 - as one of your favorite programming
05:10 - languages not a huge deal if you don't
05:12 - but just wait until we get to a page
05:14 - like this once we're here we're pretty
05:16 - much ready to go
05:17 - so I'm just gonna give you a quick
05:18 - walkthrough of this website the first
05:20 - thing I want to talk about is actually
05:21 - this tutorials pane which i think is
05:23 - really cool so here on the sidebar is
05:26 - kind of all of the main menu features
05:28 - that you can look at you can see if we
05:29 - click on tutorials there's a bunch of
05:31 - different tutorials we can scroll
05:32 - through for example there's one here in
05:33 - C++
05:34 - we can look at the new ones that have
05:36 - been posted there's one that was posted
05:37 - two hours ago and then there's all these
05:39 - other options we can look at as well so
05:41 - we can look at challenges we can ask
05:42 - questions
05:43 - there's announcements and all of that
05:45 - fun stuff and then if we go over here to
05:47 - templates if this loads what we can see
05:50 - is there's actually a bunch of templates
05:52 - that are already created for us if we
05:54 - wanted to do something like make a
05:55 - website if we wanted to let's see here
05:58 - make a game so they have this p5.js
06:01 - thing really cool and just makes it
06:03 - really easy to kind of hop on here and
06:05 - quickly experiment with things and start
06:06 - working on code next we can go over here
06:09 - which is actually to our profile section
06:11 - so if you click on your little icon or
06:13 - you little person and what you'll see
06:15 - here is you can actually have all of
06:16 - your games that you've created on a
06:18 - public profile this means if you want to
06:21 - share your work with someone all you
06:22 - have to do is have your repple be
06:24 - created on your public profile you can
06:27 - share the link with someone and that
06:28 - means you don't need to send them a zip
06:29 - file they don't need to download it
06:30 - anything anything on their computer they
06:33 - can just come to this website press run
06:35 - on your code and be able to see what
06:36 - you've actually worked on which i think
06:38 - is a really cool feature so
06:40 - not there's the my repla section this is
06:42 - where you can organize all of your code
06:44 - when you make a new project we're gonna
06:46 - call that a repple and that's what the
06:47 - website is calling it and then you can
06:49 - see all of the projects here you can
06:51 - organize them into folders and that is
06:53 - pretty much the basic walk-through of
06:54 - this website now to actually get started
06:57 - here what we need to do is click on new
06:59 - rap at the top and we need to select PI
07:02 - games so go ahead and search for PI game
07:04 - here and you'll see that that's popping
07:06 - up again this is a module in Python that
07:09 - is supported on repli'd so we select PI
07:11 - game and that's gonna automatically set
07:13 - up our environment so we're ready to
07:15 - start using this module whereas if we
07:17 - were doing this on our local machine we
07:19 - need to install a bunch of things and
07:20 - get some stuff set up so I'm gonna go
07:22 - ahead and put PI game here and I'm going
07:24 - to name my project hangman feel free to
07:26 - name yours whatever you'd like notice
07:28 - that it says your apples will appear on
07:30 - your profile if you didn't want that to
07:31 - happen you could upgrade your account
07:33 - and you would have access to private
07:35 - rebels so let's go ahead here and click
07:38 - create rattle and again keep in mind all
07:40 - of this is free I haven't paid for any
07:42 - of this only if you want the upgraded
07:44 - features what you need to do that so
07:46 - we're gonna give this a second to boot
07:47 - up here you'll see that it's starting to
07:49 - install some things on the sidebar here
07:51 - and while this is happening I'm just
07:53 - gonna go through the different panes on
07:54 - this website so we're all clear on the
07:56 - different things when I discuss them so
07:58 - here on the bottom right-hand side of my
08:00 - screen my FaceCam might be covering some
08:02 - of it we have what's known as the
08:03 - console now the console is where we're
08:06 - actually gonna be running our Python
08:07 - code so this will kind of automatically
08:10 - be working and updating for us and what
08:12 - we do is when we're ready to actually
08:14 - run our PI game project when we set that
08:16 - up is there's a button up here and we'll
08:18 - press run and then the actual PI game
08:20 - window will pop up here where right now
08:22 - it's just a gray square because we have
08:24 - we haven't yet put any code in this
08:26 - middle pane here this is actually where
08:28 - we're gonna be writing all of our code
08:29 - and this is what's going to be rendered
08:32 - and showed on this right-hand side here
08:34 - in the console when we go ahead and
08:36 - click that Run button next we have the
08:38 - finals pane here this is where we can
08:39 - make new files add images all of that
08:42 - and then we have the version control tab
08:44 - packages tab and settings you may want
08:46 - to go in here to the Settings tab and
08:48 - modify for example your theme from light
08:50 - to dark I do like working in the dark
08:53 - theme so I'm
08:54 - leave it like that and then of course
08:55 - there's a bunch of other things you can
08:56 - change like the font size which I'll
08:58 - make mine a bit larger so it's easier
08:59 - for you guys to read and I've made my
09:01 - indent size four instead of two so with
09:04 - that being said we're pretty much ready
09:06 - to go the next thing we need to do is
09:07 - actually download some images that we're
09:09 - going to be using in this project so if
09:11 - you click on these three dots right here
09:13 - there's something that says upload
09:14 - folder we're gonna do that in one second
09:17 - but I need to tell you how we can
09:18 - actually download the images for this
09:21 - project so there's actually gonna be a
09:23 - URL that I'm leaving in the description
09:25 - so go down there and look right now and
09:27 - it says image download you're gonna
09:29 - click on that and it should immediately
09:30 - download a bunch of images from my
09:32 - website which are gonna be the six
09:34 - hangman images we're actually going to
09:36 - be using so let me go ahead and open
09:37 - these up I just need to find them let's
09:40 - go here and I'll just show you what one
09:42 - of them looks like you can see it looks
09:44 - something like this so that's hangman
09:46 - image one this is hangman image two it
09:48 - has the torso and what we'll be doing is
09:50 - actually drawing these images on the
09:52 - screen when we want to show the
09:55 - different hangman States so download
09:57 - those images that will actually be in a
09:59 - zip folder let me go here so you can see
10:01 - if I go here it says images it's all
10:03 - zipped up what you'll need to do is
10:04 - right-click on that and click extract
10:06 - all there might be something called
10:08 - decompress I don't know what operating
10:10 - system you're on but either way you can
10:12 - also click in you can grab this image
10:14 - folder and you can cut it and you can
10:17 - paste it somewhere else so you can see
10:18 - that I can I'm just gonna replace
10:19 - because there's already this image
10:21 - folder and then what we're gonna do is
10:23 - we're gonna go to these three dots on
10:24 - this website once you have your images
10:26 - folder extracted and somewhere on your
10:28 - computer and we're gonna upload those
10:30 - images so we're gonna click here we're
10:32 - gonna go upload folder we're gonna go
10:34 - ahead and find where that is so for me I
10:37 - believe that's on my desktop I have
10:39 - hangman and I have images so I'm gonna
10:42 - upload all of these images it's gonna
10:44 - say well you allow this I'll say yes I
10:46 - will allow all these images to be
10:47 - uploaded and now we have six images
10:50 - right beside our main dog pie file and
10:52 - we're actually ready to start drawing
10:54 - and loading these into our program so
10:56 - hopefully that made sense but download
10:59 - the images extract the images so extract
11:01 - that folder upload all of the images
11:04 - here to rebel they will stay here they
11:06 - will be saved and
11:07 - we're pretty much ready to actually
11:08 - start writing some code so now after
11:11 - that long introduction which I do
11:12 - apologize for we are ready to start
11:15 - writing some code so the first thing
11:17 - we're actually going to do in here is
11:18 - we're gonna import two modules that we
11:20 - need to use which is PI game and OS so
11:23 - whatever we're using something that's
11:24 - not built into Python by default so for
11:27 - example we're not using a for loop or an
11:28 - if statement or something like that then
11:30 - we need to import these modules because
11:32 - they're gonna have some new syntax and
11:34 - features that now we're able to access
11:36 - so we're getting these green lines
11:38 - because we have not used these modules
11:40 - yet don't worry about that that's not an
11:41 - error that's just a warning trying to
11:43 - tell us hey you might not need this
11:45 - module because you haven't used it but
11:46 - we are going to use them so the first
11:48 - thing we do after we int sorry import PI
11:51 - game is we need to initialize it so this
11:54 - is kind of a necessary step just to make
11:55 - sure we don't have any errors or any
11:57 - bugs or anything that happened
11:58 - immediately this just sets up PI games
12:00 - that we're ready to go and actually
12:01 - start using the PI a module so import PI
12:04 - game import OS PI game in it and next
12:07 - what we need to do is define the
12:09 - dimensions of our script so we need to
12:12 - pick a width and a height in pixels that
12:14 - we want our game to be now this is gonna
12:17 - be a little bit different than we might
12:18 - usually decide because we're gonna be
12:20 - working on this website and maybe a
12:22 - little bit of a smaller box here but
12:24 - I've determined that a good width and
12:26 - height for our project is gonna be 800
12:28 - by 500 so I'm gonna say width comma
12:31 - height if I can type this equals 800 by
12:35 - 500 so notice if you haven't seen the
12:38 - syntax before we can define multiple
12:41 - variables in the same line simply by
12:43 - separating them by a comma and then just
12:45 - making that many items on the other side
12:47 - of the equal sign separated by commas so
12:50 - with obviously as 800 and height is
12:52 - going to be 500 now to actually tell
12:55 - pygame that we want our width and height
12:57 - to be this what we need to do is go high
13:00 - game dot display dot set underscore mode
13:07 - and then inside of a set of brackets
13:09 - we're gonna put width and height this is
13:13 - because a PI game accepts a topple for
13:15 - the width and the height so we put
13:17 - inside a brackets when we want the width
13:18 - and the height
13:19 - be now the reason I've defined these as
13:21 - capitals is because these are constant
13:23 - values these are values that do not
13:25 - change and since there's no notion of a
13:27 - constant in Python what we do just to
13:30 - have some kind of good practices and
13:31 - understand that these should be treated
13:33 - as constants is we make the variable
13:35 - name all capitals so that's a good habit
13:37 - to get into whenever you declare
13:38 - something that you don't plan on
13:40 - changing anywhere in the program make it
13:42 - in all capital letters so that people
13:44 - know and yourself knows that hey this is
13:46 - a constant I should not change this and
13:48 - it's not going to be changing anywhere
13:50 - so now that we have this we have pygame
13:52 - display dot set underscore mode we have
13:54 - actually created the dimensions for our
13:56 - pi game screen i can't run it yet for
13:59 - you because if I do it'll just open and
14:00 - immediately close and we won't see it
14:02 - but the next thing we're gonna do is
14:04 - actually um was it define what we want
14:07 - the name of our game to be so pi game
14:10 - dot display dot set underscore caption
14:13 - and then inside of here we're gonna put
14:15 - a string that defines what our caption
14:17 - should be in this case I'm just gonna
14:19 - make this hangman game hangman man
14:22 - hangman game like that and now you'll
14:25 - see when our screen pops up and this
14:27 - will happen in a minute or two when I
14:28 - run this that we actually have hangman
14:30 - game as kind of a little label on the
14:32 - top bar for our game so we've set the
14:34 - mode which is pretty much just defining
14:36 - the dimensions and then we've set the
14:38 - caption the next thing we need to do is
14:40 - actually create what's known as our game
14:42 - loop so whenever we make a PI game
14:44 - program we need a loop so some kind of
14:47 - looping mechanism that's gonna
14:49 - constantly runs gonna be doing things
14:51 - like checking for collision checking if
14:53 - we clicked something I'm checking if
14:55 - time has ran out doing anything that you
14:58 - would normally do in a regular game
15:00 - that's what our game loop does so we
15:02 - need that so that we make sure that
15:04 - we're constantly running the game and we
15:06 - don't just open it once and then close
15:08 - it so what we're gonna do is we're gonna
15:10 - set up what's known as a while loop but
15:12 - the first thing we need to do is define
15:13 - actually the speed at which our game is
15:16 - gonna go out so this is also known as
15:18 - FPS right frames per second if you
15:20 - played a game like fortnight if you've
15:22 - played any shooter game you've probably
15:23 - seen that you have some kind of FPS now
15:26 - in PI game it's not really FPS but it's
15:29 - a very similar thing we're gonna define
15:31 - what we want the max
15:33 - FPS to be so that we don't have games
15:35 - that are running way faster than other
15:37 - games they're all running at a very
15:38 - similar speed so we're gonna say FPS and
15:41 - all capitals is gonna be 60 so I want
15:43 - this to be 60 frames per second that
15:45 - will be what the maximum FPS will be
15:48 - then what we're gonna do is actually
15:49 - create a clock object in PI game that
15:52 - will make sure that our loop is gonna
15:54 - run at this speed so what I'm gonna do
15:56 - is I'm gonna say clock equals PI game
16:00 - time and then dot clock with a capital C
16:04 - and inside of here I'm gonna put FBS so
16:07 - I'm pretty much saying I want to set up
16:08 - a clock object that's going to count at
16:10 - 60 frames per second so we're just gonna
16:12 - keep track of the time for me
16:14 - essentially using this fps and again I
16:16 - define the FPS up here all right now I'm
16:20 - gonna make a variable I'm gonna call
16:21 - this run and I'm gonna set this equal to
16:23 - true and this is gonna be what controls
16:25 - our while loop so I'm gonna put a while
16:27 - loop right here and what this
16:28 - essentially says is Wow whatever is on
16:31 - the right-hand side of this so while the
16:34 - variable run is equal to true do
16:37 - whatever is indented inside this well
16:39 - very simple while this variable stays
16:41 - true keep running this loop so
16:44 - essentially we will run this loop until
16:46 - we set this variable to false and we'll
16:48 - only set that variable to false
16:50 - once we've lost the game or once we've
16:52 - quit or we're exiting the game
16:53 - essentially inside of here what I'm
16:56 - gonna do is I'm gonna write clock
16:58 - dot tick now this is necessary just to
17:02 - make sure that our while loop runs at
17:04 - that speed that we set up here so we
17:06 - made the clock object we're gonna have
17:08 - the clock object tick and then that's
17:10 - pretty much saying hey tick at this
17:12 - speed and that's pretty much all we need
17:15 - to do and in fact I've realized I've
17:16 - made a mistake
17:17 - this FPS that's inside of line 10 here
17:19 - on the clock we need to actually put
17:21 - that inside of the tick method here so
17:23 - clock tick and that will make it run at
17:26 - the proper speed my apologies about that
17:27 - now inside of this while loop what we
17:30 - actually need to do and the first thing
17:32 - we always set up is we check for events
17:35 - so in PI game whenever something happens
17:37 - like pressing the mouse pressing a
17:39 - keyboard button pretty much doing
17:41 - anything an event is triggered and to be
17:43 - able to look through all those events
17:44 - which we're gonna want to do B
17:46 - we want to see for example when the user
17:48 - presses the mouse when they click the
17:50 - exit button there's a few events we want
17:52 - to check we need to grab them and we
17:54 - need to look at them so we're gonna use
17:55 - a for loop we're gonna say for event in
18:00 - PI game dot event dot yet like that
18:04 - we're gonna put a colon and then we're
18:06 - gonna go inside of here and we're gonna
18:07 - actually start looking for the events so
18:10 - essentially what this will do is any
18:12 - event that's happened will be stored
18:14 - inside of here you can think of it
18:16 - almost like a list you can think of it
18:18 - as some whatever data structure you want
18:20 - that just has a bunch of events we're
18:22 - gonna loop through all of the events and
18:24 - every loop one of those events is gonna
18:26 - get thrown into the variable event so
18:29 - what we can do inside of here is we can
18:31 - say something like if event dot type
18:34 - equals equals so we're checking if the
18:36 - type of the event is equal to and then
18:39 - whatever we want to check so in this
18:40 - case the first event I want to check is
18:42 - actually pi game and then in all
18:44 - capitals dot quit what this means and
18:48 - what this event is is when we click that
18:50 - red X button on our window so you know
18:54 - you can kind of see even here right
18:55 - there's an X at the top that's gonna be
18:57 - the same thing that's gonna show up for
18:58 - our PI game window to be able to close
19:00 - it and well this is the event that
19:02 - happens when we press that button so
19:04 - inside of here what we should do is we
19:07 - should stop running this while loop and
19:09 - we should quit Pi game so what I'm gonna
19:11 - do is I'm gonna say run equals false and
19:15 - what that does know is mean but the next
19:17 - time we hit the top of this wanna loop
19:19 - we are no longer gonna run we're gonna
19:22 - stop and we're gonna quit hiking and in
19:24 - fact what I need to do at the very
19:26 - bottom of my program is say pi game dot
19:29 - quit like that and what this will do now
19:32 - is essentially say ok as soon as we pass
19:35 - this while loop and we get out here
19:37 - we're gonna quit high game which just
19:38 - means close the window and that is as
19:41 - easy as it is
19:42 - so let's actually move this over here
19:43 - now let's do run and let's see if this
19:46 - works properly sometimes it does take a
19:48 - second to boot up so I will be back when
19:50 - this boots up alright so how'd any small
19:53 - trouble running this program and maybe
19:56 - that's actually good because I can tell
19:57 - you guys what I did to fix it so if for
19:59 - some reason you
20:00 - can't seem to press run and get this to
20:02 - work it's probably just because pygame
20:03 - is quite difficult to run from the web
20:05 - what you need to do is just change the
20:07 - name of your project you can change your
20:09 - back after but I just changed it and not
20:11 - forced to refresh and then that way I
20:13 - was actually able to see this project so
20:15 - anyways you can see that I just press
20:16 - run and now we get hangman game popping
20:19 - up and well you can move this window
20:21 - around a little bit and if we press the
20:23 - X button it quits the game so that is
20:25 - pretty much what we were trying to go
20:26 - for here you can see that now it's no
20:28 - longer running anymore because I pressed
20:29 - quit and now we're pretty much good to
20:31 - continue coding so that's kind of the
20:34 - first run and I'd also added this line
20:35 - of code here you don't need that so let
20:37 - me get rid of that I was just
20:38 - troubleshooting but that is how you get
20:40 - your first kind of initial Windows setup
20:42 - and the first event which is pressing on
20:44 - that X button to actually register and
20:46 - work so the next thing I want to show
20:49 - you is how we can actually register
20:50 - Mouse events so since we're already
20:52 - doing this let's see how we can actually
20:54 - get the position of our mouse when we're
20:56 - pressing it on the screen and this
20:58 - should hopefully tell us actually how
21:01 - the coordinate system works in PI game
21:03 - which is going to be an important thing
21:04 - to understand for the next step which is
21:06 - going to be to start loading in some
21:07 - images and getting those displayed on
21:09 - the screen so let's go ahead and do that
21:12 - what I want to do is I want to check
21:14 - what my mouse is out when I actually
21:17 - move my mouse and when I click down so
21:19 - the event to check for a mouse press is
21:21 - if event dot type equals equals and then
21:26 - we're gonna save my game dot and in all
21:28 - capitals mouse button down like that
21:32 - if that happens let me zoom out a tiny
21:34 - bit so that we can zoom like that okay
21:38 - so we can see this whole thing so if a
21:39 - vente type equals equals pi game down
21:41 - mouse button down then what we're gonna
21:43 - do is just print to the console pi game
21:46 - dot mouse and dot pause with brackets
21:51 - like this so in fact let me throw this
21:53 - into a variable let's go
21:55 - pause equals PI game mouse table pause
21:58 - and let's print out pause so pause just
22:01 - stands for a position and what I'm
22:02 - trying to do is just get the XY position
22:05 - of my mouse in the window the reason
22:08 - this is important is because later when
22:10 - we start adding those buttons to the
22:11 - screen we want to check if they were
22:13 - pressed
22:13 - and will to be able to do that I'm gonna
22:15 - have to compare the mouse position of my
22:18 - mouse to the position of where those
22:20 - buttons are to check I've actually hit
22:21 - one of them then if I hit one of those
22:23 - buttons we're gonna do something on the
22:25 - screen right so this is how you get the
22:27 - position of the mouse you say pawns POS
22:29 - equals PI game mouse stop pause and then
22:32 - if you want to check to only get that
22:34 - when you press the mouse button down you
22:36 - use this event right here so let's go
22:38 - over here let's make our console a bit
22:40 - bigger hopefully you guys can see all
22:41 - this and let's run this one more time
22:43 - alright so it comes up and now let me
22:47 - start pressing down on the mouse and
22:49 - what does it say here PI game mouse has
22:51 - no attribute pause ah my apologies guys
22:54 - I do make mistakes as well this should
22:55 - be get underscore pause okay that makes
22:59 - more sense
22:59 - get underscore pause this is essentially
23:01 - get position so let me run this one more
23:03 - time you notice I did get an error there
23:05 - because I had some wrong code so let's
23:07 - run this and now let's press down and
23:10 - notice that we get the position of the
23:11 - mouse showing up down here in the
23:13 - console now let's actually see what the
23:16 - position of my mouse is so really we
23:18 - would imagine that based on our kind of
23:20 - understanding of a coordinate system the
23:22 - middle of this window should be zero
23:24 - zero right but when I click on this I'm
23:26 - getting 397 to 46 that's not zero zero
23:30 - in fact what happens when I come down
23:32 - here I'm getting 386 496 so it seems as
23:36 - though as I go up the Y position
23:38 - decreases and as I go down the Y
23:40 - position increases this is actually the
23:43 - first thing to understand about PI game
23:44 - is that the top coordinate so zero zero
23:47 - coordinate is actually in the top
23:49 - left-hand corner of the screen so notice
23:51 - I'm clicking here and I'm at one one
23:53 - pretty much right at the top left-hand
23:55 - corner if I go to the right hand corner
23:57 - I'm actually at 796 3 which is pretty
24:00 - much the maximum width and the minimum
24:02 - height so just note that when we talk
24:05 - about coordinate systems in PI game when
24:07 - we increase the X we move further to the
24:10 - right and when we increase the Y we move
24:12 - further down and this is actually really
24:15 - good to understand as well
24:16 - because when we start drawing things on
24:18 - the screen we actually draw them from
24:20 - the top left hand corner which means
24:23 - that say we're drawing some image that's
24:25 - like you know 50 by 50
24:27 - well when we start drawing that we start
24:30 - drawing it from the top left-hand corner
24:32 - which means the far right edge of that
24:34 - image will be 50 pixels further than
24:37 - where we decided to draw it and will be
24:39 - 50 pics or pixels lower than where we
24:42 - decide to draw it as well so if I click
24:43 - here really it will be like a box like
24:46 - that it's hard to show you with my mouse
24:48 - but hopefully that makes kind of sense
24:49 - just understand the top left is zero
24:52 - zero that's very important to understand
24:53 - impacting alright so now that we have
24:56 - that the next thing I want to do is
24:58 - actually load in these hangman images
24:59 - and show you how we can start drawing
25:01 - and putting some things on the screen
25:02 - because right now it's kind of boring
25:03 - right we don't like what are we doing
25:05 - with just you know clicking the mouse
25:07 - that's not very fun so what we're gonna
25:09 - do is first of all actually I'm gonna go
25:11 - up to line six here and I'm gonna put a
25:13 - variable to store my display so I'm
25:16 - gonna say win so WI n equals PI game
25:19 - display dot set underscore mode I forgot
25:22 - to do this earlier this is just because
25:23 - we are gonna need to use this variable
25:25 - to draw some things on the screen so
25:27 - we'll just set it up and say win equals
25:28 - bats alright next we're gonna load in a
25:32 - bunch images so I'm gonna do something
25:33 - here I'm gonna put a comment and I'm
25:35 - gonna say load images a lot of the times
25:37 - what I like to do is kind of separate my
25:39 - program into a few small blocks so up
25:42 - here I would say something like set up
25:43 - display I'm gonna say load images and I
25:47 - would say set up game loop here just so
25:51 - that if I come back to this later I kind
25:52 - of have a really easy way to see the
25:54 - clear separation between the different
25:56 - parts so that's what I like to do but
25:58 - anyways let's load in the images so what
26:00 - I'm gonna do is I'm actually gonna make
26:01 - a list of images and a list is
26:04 - essentially just a structure that can
26:05 - hold multiple items so a list could look
26:08 - something like this I'm gonna have five
26:11 - six seven eight you could have a string
26:13 - in here like this it's just a collection
26:14 - of elements that we can store inside of
26:17 - this kind of structure and a few small
26:19 - things you need to know about lists I'll
26:21 - go through them quickly cuz I assume
26:22 - many of you have probably seen this
26:23 - before is that to be able to access an
26:26 - element from a list so say here all of
26:28 - these different things like five hello
26:30 - eight these are all what we call
26:31 - elements and they're a part of the list
26:33 - and inside the list they have an order
26:36 - right five comes first hello is last
26:38 - well if I want to access the first
26:41 - in the list what I do is I type images 0
26:44 - like this so I use these square brackets
26:46 - I put what's known as the index or the
26:48 - position of the element in the list and
26:50 - the first position of all of our list is
26:52 - always 0 so 0 would access 5 and then 1
26:56 - 2 3 4 4 would access hello so that's
27:01 - kind of the basics of lists and what we
27:03 - need to know and then if we want to add
27:05 - something to the end of the list what we
27:07 - do is we do dot append like that and
27:10 - what this will do is take whatever we
27:12 - put in these brackets and simply add it
27:14 - to the end of the list those are the
27:16 - basic operations and I just wanted to
27:18 - show you those because we're gonna be
27:19 - using them a lot in this series so what
27:22 - I'm gonna do is I'm gonna say for I in
27:24 - range and here I'm actually gonna put 6
27:28 - now what this is gonna do is essentially
27:31 - loop starting at 0 going up to but not
27:34 - including 6 and give me the value I on
27:38 - every loop so this is gonna say ok we
27:40 - want to loop 6 times and we want to have
27:43 - this counter variable I that starts at 0
27:46 - and counts up to 6 but doesn't include 6
27:48 - so essentially this loop will run
27:50 - whatever is inside of these indented
27:53 - blocks here so whatever would be where
27:54 - pass would be this will happen 6 times
27:57 - and I every time this happens will
27:59 - increment by 1 so we'll start the first
28:01 - loop will be 0 then it will be 1 then it
28:03 - will be 2 and so on and you're gonna see
28:05 - why that's important because look at the
28:07 - numbers that I have for my images
28:10 - because what I'm gonna do in Surrey
28:11 - actually this should be 7 my apologies
28:14 - what I'm gonna do is I'm gonna loop
28:17 - through all of these the numbers from up
28:20 - to 7 but not including 7 I'm gonna load
28:23 - all of these images because we go
28:24 - hangman 0 hangman 1 hangman 2 hangman 3
28:27 - and so on and add them into this images
28:30 - list it'll make more sense in a second
28:32 - but essentially what I'm gonna say is
28:33 - images dot append and I'm gonna say hi
28:36 - game dot image dot load and in fact I'm
28:41 - gonna split this up into some variables
28:42 - just so that it's a little bit easier to
28:44 - see so I'm gonna say image equals PI
28:48 - game image dot load this is how we load
28:50 - an image we write this and then inside
28:53 - the brackets here what I do is I
28:55 - actually put the name of the image that
28:58 - I want to load so I have to put the
28:59 - exact name so hangman zero dot PNG but
29:02 - since I don't want to just write this
29:04 - seven times for each of these images I'm
29:07 - gonna use this for loop to help me out
29:08 - so what I'm gonna do is I'm gonna say
29:11 - hangman like that plus the string
29:15 - equivalent of the value I which keep in
29:18 - mind is this variable right here which
29:21 - will be going from zero and then it will
29:22 - be one and then it will be two and so on
29:24 - and so forth and then I'm gonna go plus
29:28 - dot PNG so essentially what I'm saying
29:32 - is let's make a string that is hangman
29:34 - whatever this number is which will be in
29:36 - the range of zero to seven so it won't
29:39 - be seven but it'll be zero up to six
29:41 - including six and then plus the PNG so
29:44 - it will go hangman zero hangman one on
29:45 - hangman - so on and then we'll add that
29:47 - into images so I'm gonna say images dot
29:49 - append image like that
29:52 - now I actually don't need this OS module
29:55 - here I was gonna use that but we're not
29:56 - gonna use it anymore and now let me
29:58 - actually go ahead and just print out
30:00 - what images looks like for you so that
30:03 - when we run this you can see that what
30:04 - happens is we immediately load all of
30:06 - these images into this list so let's go
30:08 - ahead and run this let me move this up
30:10 - here and let's go run let's give it a
30:13 - second to boot up here and we can see
30:16 - that right down here hopefully my
30:18 - FaceCam isn't covering it we get all
30:20 - these different surfaces so this is
30:22 - telling us the width height and color
30:25 - depth of this image believe that's
30:28 - correct and it's telling us that we've
30:30 - loaded in a surface the reason for that
30:32 - is because all of these images that
30:35 - we've loaded get turned into a bunch of
30:37 - pixels that we call a surface and then
30:39 - we can actually draw that surface onto
30:42 - our PI game window so everything in PI
30:44 - game kind of works with surfaces so if
30:46 - you see the word surface or you hear me
30:48 - say surface that's what I'm talking
30:49 - about just some collection of pixels
30:52 - that I want to put onto the screen
30:53 - alright so now that we have all that let
30:56 - me close this here let's actually show
30:58 - how we can draw some images and refresh
31:01 - the display and I think that will be a
31:03 - good place to leave off this first
31:04 - tutorial so we have all these
31:06 - images right and when I print out images
31:08 - I get a list of all of the images all
31:10 - these different surfaces well how can I
31:13 - actually go about printing or sorry
31:16 - displaying one of these images the first
31:18 - thing I'm gonna do is I'm actually gonna
31:20 - make another comment here and I'm gonna
31:21 - say game variables because I have all
31:25 - these images right so you know hangman
31:27 - zero which is this one hangman six which
31:29 - is the final guy he's fully hung up
31:31 - right and I need to know which one I
31:33 - want to display when this game starts
31:35 - right because I want to show that image
31:36 - and then as soon as we press a button
31:38 - that is wrong so there's a letter in the
31:40 - word that we press a letter that's not
31:42 - in the word we're gonna you know make
31:43 - the next body part appear so I actually
31:46 - need a variable that I'm gonna call
31:48 - hangman status like that I'm gonna set
31:53 - this equal to zero so this is pretty
31:55 - much gonna tell me what image that I
31:57 - want to draw at each point in the game
31:59 - so I'll start it at zero and that means
32:02 - I'm gonna draw hangman image 0 and then
32:04 - hangman image 1 well that will happen if
32:06 - I make this one and of course if I make
32:08 - this six then we'll draw the sixth one
32:09 - so we're gonna say hangman status but
32:12 - that's not all we need to do inside of
32:14 - this while loop here what I'm actually
32:15 - gonna do is I'm going to update and
32:18 - refresh the display and then draw the
32:21 - current hangman image so to actually put
32:25 - some kind of background for our display
32:27 - because right now we can see that it's
32:28 - just black right maybe I need to
32:30 - actually make this Y you know maybe I
32:32 - want to make an another color
32:33 - what I do is I type win which is the
32:35 - name of my window which I defined right
32:37 - here and I'm gonna say win dot fill and
32:41 - inside of here I'm gonna put a color
32:43 - that I want to fill the window with so
32:47 - when we define colors inside of Pi game
32:49 - what we do is we pick an RGB value so
32:52 - red green blue essentially how much red
32:55 - how much green and how much blue do we
32:56 - want this color to have and the way we
32:59 - define that is by putting brackets like
33:01 - this and then we just set three numbers
33:04 - now these numbers have to be in the
33:05 - range of 0 and 255 where 0 is none of
33:08 - that color and 255 is as much of that
33:11 - color as possible so using red green
33:13 - blue we can create any color we want to
33:15 - actually do white which is what I want
33:18 - to use we knew 255 255 255
33:20 - b5 because that's a combination of all
33:22 - of the colors so let's see what happens
33:25 - when we actually type wind fill 255 255
33:29 - 255 and we put that right inside of the
33:32 - while loop
33:33 - cuz that will happen every frame right
33:36 - every time this while loop runs this
33:38 - will fill so let's actually go ahead and
33:40 - run let's see what we get
33:42 - well it seems as though it's not going
33:46 - white why isn't it going way we're
33:48 - filling the screen every second with
33:50 - white right what's happening well that's
33:52 - because we forgot an important step
33:53 - which is to actually update the display
33:55 - in PI game we need to manually tell it
33:58 - when we want to update so whenever we
34:00 - draw something what we need to do is say
34:02 - hey update the display with all this
34:04 - stuff we've drawn so we're gonna go
34:06 - ahead and go PI game dot display dot
34:09 - update and this will update the display
34:12 - with any of the most recent things that
34:15 - we've drawn on it so we can draw a bunch
34:17 - of different things and then all of a
34:18 - sudden when we want to actually display
34:20 - them we do PI game display update so
34:23 - let's run this now and let's see if our
34:24 - background color changes and there we go
34:26 - now our background color is white
34:28 - awesome perfect great now the next thing
34:32 - I want to do is draw that hangman image
34:34 - and in fact I'm actually gonna clean
34:35 - this code up a little bit I'm gonna take
34:37 - this color white and I'm gonna put this
34:39 - into a variable because I think I might
34:41 - want to use this later on so up here I'm
34:43 - gonna go and I'm gonna say colors like
34:46 - that oops not compile colors and then
34:49 - down here I'm gonna say white and all
34:51 - capitals because it's gonna be a
34:52 - constant is equal to 255 255 255 and now
34:56 - I'm gonna put white inside of here in
34:58 - case I ever want to use this color again
35:00 - I have it defined it and now it's way
35:02 - easier to read that hey this is white
35:04 - I'm drawing white and sorry that doesn't
35:07 - go in there that goes in there and that
35:10 - goes like that okay what awesome next
35:13 - thing I want to do is actually draw the
35:15 - hangman image so what I'm gonna do is
35:18 - I'm going to go and I'm gonna say win da
35:21 - blitz blitz stands for draw image
35:24 - essentially draw some kind of surface
35:26 - that's what it's saying whereas fill is
35:28 - just filling the entire screen with a
35:29 - color so I start by filling the entire
35:32 - screen with a color this will in fact
35:34 - to actually override anything that was
35:36 - previously on the screen so we don't see
35:38 - multiple images being drawn then I'm
35:40 - gonna blitz the image that I want to
35:43 - draw in this case it's gonna be images
35:45 - hangman status because remember that to
35:48 - access the different images inside of
35:50 - this list we use numbers from 0 up to 6
35:53 - right where six is the last image in the
35:56 - list and 0 is the first image so
35:58 - whatever hangman status is that's the
36:00 - image that we'll get so if we put
36:02 - hangman status here then that will
36:04 - automatically index the correct image
36:06 - from the list and then all we need to do
36:08 - here is tell it where we want to draw
36:11 - the image so we need to give an XY
36:13 - position for the top left-hand corner of
36:16 - this image now I'm gonna look on my
36:18 - other screen here to figure out where we
36:19 - want to draw this and I think where we
36:21 - want to actually put this is gonna be
36:24 - 150 100 so this is where I want to draw
36:28 - it this is the top left hand corner of
36:30 - where I want to start drawing this image
36:31 - and then of course it will be wider and
36:33 - it will be longer so it will fill up
36:35 - more of the screen let's actually have a
36:37 - look at what happens when I blit this
36:40 - image to the screen so let's run this
36:41 - and we see that now we're getting this
36:44 - hangman pop-up and let's actually see
36:47 - what happens if I change this hangman
36:48 - status to say 4 and I go ahead and run
36:51 - this now well there we go now we're
36:54 - getting a different hangman image
36:55 - popping up on the screen so I think with
36:58 - that I'm gonna wrap up tutorial one here
37:01 - of course there's a lot more to cover
37:02 - but I think we did a decent job and we
37:04 - went through enough and we've covered
37:06 - kind of the core concepts on how pygame
37:08 - works how to display images and in the
37:10 - next videos of course we'll get into
37:12 - some more complicated logic and start
37:13 - doing some more fun things so with that
37:15 - being said if you enjoyed make sure you
37:17 - leave a like subscribe and hopefully I
37:19 - will see you in the next hangman
37:20 - tutorial

Cleaned transcript:

hello everybody and welcome back to another brand new Python tutorial series in this next three videos what we're gonna be doing is working towards creating our very own version of hangman so you can see hangman on the screen and what we're gonna be doing here is learning more about Python learning about a popular module called a PI game which allows you to create 2d games and then of course applying all of those skills to our own project I find that the best way to learn is actually working towards an end goal which is a project and learning a little bit about the theoretical concepts about why and how things work and then immediately applying them into some kind of project like we're gonna be doing here so this series is gonna be wellsuited for people that have a little bit of experience in Python but then maybe aren't too confident maybe they don't know how to set up a large program yet and I think there's gonna be a lot of lessons and things that people can learn just by seeing the way that I'm actually gonna go about setting up this program so this is gonna be about a hundred and fifteen lines of code it might be a little bit longer a little bit shorter but in that range and I think that if you're a beginner being able to see how you can actually set up a program of this length how you can declare things like constant value some best practices it's a really valuable skill and of course I'm gonna be trying my best to teach that to you as we apply these skills to our own hangman game so with that being said let me give a quick demo of this game and then we're gonna talk about the online coding platform I'm actually using and then of course we will get into the code and talk about everything you need to download and anything you need to do to get set up so the first thing we'll do is actually look at this game hangman so I've made this this is a demo version our final version may look a little bit different depending on if we change anything and of course as we go through this series you're welcome to modify anything you like and I would encourage you to do so so you can see hangman I assume all of you know how hangman works but essentially we have a bunch of letters here this is the word that we're trying to guess and we can pick these letters and if we get them corrected we'll fill in these blanks otherwise another part of the man on this whatever we want to call it will pop up so let's have a look here if I type C we can see that that apparently was not in the word so we got if I type B we get the torso and now let's put a letter that is their D okay can you guys guess what the word is I'm gonna go V that one was there J that's not there okay no e okay let's go with an R alright G let's go with an L let's go with an O and I know what this word is I'm gonna go with a P so the word was developer we got that correct and then the game adds so that is the basics of this hangman game of course we may or may not add more things to it and I will be showing you near the very end of this series how you can kind of customize this make new words and all of that fun stuff so with that being said let me talk about this online coding platform that we're actually going to be using which is called repla so for this series I wanted to use a platform that requires pretty much no setup for us and that anyone will be able to use regardless if if you're on a phone if you're on an iPad if you're on a laptop doesn't matter what machine you're using so long as you have internet access and a browser you will be able to follow along with this tutorial series and that's because we're gonna be using a website called repple dot I T otherwise known as repli'd so the URL is repl dot I T you can see I'm on it right here and this is an online collaborative coding environment now what this means is that you can hop into your browser you can type in this URL and immediately you can get brought into this coding environment and start writing code so you don't need to download anything you don't need to set anything up and it's a bunch of really cool features on this website that I'm just gonna walk you through slowly because I think they're really valuable and that you guys will find a lot of value from them so repli'd has sponsored this tutorial series I'll be clear here but these are some of the features of repli'd that I want to discuss so there's an inbrowser IDE this means that's kind of the online coding environment you were looking at before it has realtime collaboration which actually means if you wanted to you can invite your friends you could invite other people to modify your code in real time that's actually a really cool feature that I don't see on many other platforms and as github integration which will become important as you work on larger projects in the future 50plus languages including support for Pi game which is the module we're going to be using you can host and deploy your code there's a bunch of learning resources and tutorials right on the website that you can follow along with there's team plans and then there's API and plugins which probably aren't that relevant to all of you but this is the platform we're gonna be using so the first step for us in this series is going to be to head over to rappelled 80 again otherwise known as repli'd URL is repl IT and of course that link will be in the description so once we head over there what you're gonna need to do is start create an account or log in I believe you can sign in with your Google account that's what I've done and once you do that you should be asked to enter your favorite programming languages and then you'll be brought to a page that looks like this so I would recommend selecting a Python as one of your favorite programming languages not a huge deal if you don't but just wait until we get to a page like this once we're here we're pretty much ready to go so I'm just gonna give you a quick walkthrough of this website the first thing I want to talk about is actually this tutorials pane which i think is really cool so here on the sidebar is kind of all of the main menu features that you can look at you can see if we click on tutorials there's a bunch of different tutorials we can scroll through for example there's one here in C++ we can look at the new ones that have been posted there's one that was posted two hours ago and then there's all these other options we can look at as well so we can look at challenges we can ask questions there's announcements and all of that fun stuff and then if we go over here to templates if this loads what we can see is there's actually a bunch of templates that are already created for us if we wanted to do something like make a website if we wanted to let's see here make a game so they have this p5.js thing really cool and just makes it really easy to kind of hop on here and quickly experiment with things and start working on code next we can go over here which is actually to our profile section so if you click on your little icon or you little person and what you'll see here is you can actually have all of your games that you've created on a public profile this means if you want to share your work with someone all you have to do is have your repple be created on your public profile you can share the link with someone and that means you don't need to send them a zip file they don't need to download it anything anything on their computer they can just come to this website press run on your code and be able to see what you've actually worked on which i think is a really cool feature so not there's the my repla section this is where you can organize all of your code when you make a new project we're gonna call that a repple and that's what the website is calling it and then you can see all of the projects here you can organize them into folders and that is pretty much the basic walkthrough of this website now to actually get started here what we need to do is click on new rap at the top and we need to select PI games so go ahead and search for PI game here and you'll see that that's popping up again this is a module in Python that is supported on repli'd so we select PI game and that's gonna automatically set up our environment so we're ready to start using this module whereas if we were doing this on our local machine we need to install a bunch of things and get some stuff set up so I'm gonna go ahead and put PI game here and I'm going to name my project hangman feel free to name yours whatever you'd like notice that it says your apples will appear on your profile if you didn't want that to happen you could upgrade your account and you would have access to private rebels so let's go ahead here and click create rattle and again keep in mind all of this is free I haven't paid for any of this only if you want the upgraded features what you need to do that so we're gonna give this a second to boot up here you'll see that it's starting to install some things on the sidebar here and while this is happening I'm just gonna go through the different panes on this website so we're all clear on the different things when I discuss them so here on the bottom righthand side of my screen my FaceCam might be covering some of it we have what's known as the console now the console is where we're actually gonna be running our Python code so this will kind of automatically be working and updating for us and what we do is when we're ready to actually run our PI game project when we set that up is there's a button up here and we'll press run and then the actual PI game window will pop up here where right now it's just a gray square because we have we haven't yet put any code in this middle pane here this is actually where we're gonna be writing all of our code and this is what's going to be rendered and showed on this righthand side here in the console when we go ahead and click that Run button next we have the finals pane here this is where we can make new files add images all of that and then we have the version control tab packages tab and settings you may want to go in here to the Settings tab and modify for example your theme from light to dark I do like working in the dark theme so I'm leave it like that and then of course there's a bunch of other things you can change like the font size which I'll make mine a bit larger so it's easier for you guys to read and I've made my indent size four instead of two so with that being said we're pretty much ready to go the next thing we need to do is actually download some images that we're going to be using in this project so if you click on these three dots right here there's something that says upload folder we're gonna do that in one second but I need to tell you how we can actually download the images for this project so there's actually gonna be a URL that I'm leaving in the description so go down there and look right now and it says image download you're gonna click on that and it should immediately download a bunch of images from my website which are gonna be the six hangman images we're actually going to be using so let me go ahead and open these up I just need to find them let's go here and I'll just show you what one of them looks like you can see it looks something like this so that's hangman image one this is hangman image two it has the torso and what we'll be doing is actually drawing these images on the screen when we want to show the different hangman States so download those images that will actually be in a zip folder let me go here so you can see if I go here it says images it's all zipped up what you'll need to do is rightclick on that and click extract all there might be something called decompress I don't know what operating system you're on but either way you can also click in you can grab this image folder and you can cut it and you can paste it somewhere else so you can see that I can I'm just gonna replace because there's already this image folder and then what we're gonna do is we're gonna go to these three dots on this website once you have your images folder extracted and somewhere on your computer and we're gonna upload those images so we're gonna click here we're gonna go upload folder we're gonna go ahead and find where that is so for me I believe that's on my desktop I have hangman and I have images so I'm gonna upload all of these images it's gonna say well you allow this I'll say yes I will allow all these images to be uploaded and now we have six images right beside our main dog pie file and we're actually ready to start drawing and loading these into our program so hopefully that made sense but download the images extract the images so extract that folder upload all of the images here to rebel they will stay here they will be saved and we're pretty much ready to actually start writing some code so now after that long introduction which I do apologize for we are ready to start writing some code so the first thing we're actually going to do in here is we're gonna import two modules that we need to use which is PI game and OS so whatever we're using something that's not built into Python by default so for example we're not using a for loop or an if statement or something like that then we need to import these modules because they're gonna have some new syntax and features that now we're able to access so we're getting these green lines because we have not used these modules yet don't worry about that that's not an error that's just a warning trying to tell us hey you might not need this module because you haven't used it but we are going to use them so the first thing we do after we int sorry import PI game is we need to initialize it so this is kind of a necessary step just to make sure we don't have any errors or any bugs or anything that happened immediately this just sets up PI games that we're ready to go and actually start using the PI a module so import PI game import OS PI game in it and next what we need to do is define the dimensions of our script so we need to pick a width and a height in pixels that we want our game to be now this is gonna be a little bit different than we might usually decide because we're gonna be working on this website and maybe a little bit of a smaller box here but I've determined that a good width and height for our project is gonna be 800 by 500 so I'm gonna say width comma height if I can type this equals 800 by 500 so notice if you haven't seen the syntax before we can define multiple variables in the same line simply by separating them by a comma and then just making that many items on the other side of the equal sign separated by commas so with obviously as 800 and height is going to be 500 now to actually tell pygame that we want our width and height to be this what we need to do is go high game dot display dot set underscore mode and then inside of a set of brackets we're gonna put width and height this is because a PI game accepts a topple for the width and the height so we put inside a brackets when we want the width and the height be now the reason I've defined these as capitals is because these are constant values these are values that do not change and since there's no notion of a constant in Python what we do just to have some kind of good practices and understand that these should be treated as constants is we make the variable name all capitals so that's a good habit to get into whenever you declare something that you don't plan on changing anywhere in the program make it in all capital letters so that people know and yourself knows that hey this is a constant I should not change this and it's not going to be changing anywhere so now that we have this we have pygame display dot set underscore mode we have actually created the dimensions for our pi game screen i can't run it yet for you because if I do it'll just open and immediately close and we won't see it but the next thing we're gonna do is actually um was it define what we want the name of our game to be so pi game dot display dot set underscore caption and then inside of here we're gonna put a string that defines what our caption should be in this case I'm just gonna make this hangman game hangman man hangman game like that and now you'll see when our screen pops up and this will happen in a minute or two when I run this that we actually have hangman game as kind of a little label on the top bar for our game so we've set the mode which is pretty much just defining the dimensions and then we've set the caption the next thing we need to do is actually create what's known as our game loop so whenever we make a PI game program we need a loop so some kind of looping mechanism that's gonna constantly runs gonna be doing things like checking for collision checking if we clicked something I'm checking if time has ran out doing anything that you would normally do in a regular game that's what our game loop does so we need that so that we make sure that we're constantly running the game and we don't just open it once and then close it so what we're gonna do is we're gonna set up what's known as a while loop but the first thing we need to do is define actually the speed at which our game is gonna go out so this is also known as FPS right frames per second if you played a game like fortnight if you've played any shooter game you've probably seen that you have some kind of FPS now in PI game it's not really FPS but it's a very similar thing we're gonna define what we want the max FPS to be so that we don't have games that are running way faster than other games they're all running at a very similar speed so we're gonna say FPS and all capitals is gonna be 60 so I want this to be 60 frames per second that will be what the maximum FPS will be then what we're gonna do is actually create a clock object in PI game that will make sure that our loop is gonna run at this speed so what I'm gonna do is I'm gonna say clock equals PI game time and then dot clock with a capital C and inside of here I'm gonna put FBS so I'm pretty much saying I want to set up a clock object that's going to count at 60 frames per second so we're just gonna keep track of the time for me essentially using this fps and again I define the FPS up here all right now I'm gonna make a variable I'm gonna call this run and I'm gonna set this equal to true and this is gonna be what controls our while loop so I'm gonna put a while loop right here and what this essentially says is Wow whatever is on the righthand side of this so while the variable run is equal to true do whatever is indented inside this well very simple while this variable stays true keep running this loop so essentially we will run this loop until we set this variable to false and we'll only set that variable to false once we've lost the game or once we've quit or we're exiting the game essentially inside of here what I'm gonna do is I'm gonna write clock dot tick now this is necessary just to make sure that our while loop runs at that speed that we set up here so we made the clock object we're gonna have the clock object tick and then that's pretty much saying hey tick at this speed and that's pretty much all we need to do and in fact I've realized I've made a mistake this FPS that's inside of line 10 here on the clock we need to actually put that inside of the tick method here so clock tick and that will make it run at the proper speed my apologies about that now inside of this while loop what we actually need to do and the first thing we always set up is we check for events so in PI game whenever something happens like pressing the mouse pressing a keyboard button pretty much doing anything an event is triggered and to be able to look through all those events which we're gonna want to do B we want to see for example when the user presses the mouse when they click the exit button there's a few events we want to check we need to grab them and we need to look at them so we're gonna use a for loop we're gonna say for event in PI game dot event dot yet like that we're gonna put a colon and then we're gonna go inside of here and we're gonna actually start looking for the events so essentially what this will do is any event that's happened will be stored inside of here you can think of it almost like a list you can think of it as some whatever data structure you want that just has a bunch of events we're gonna loop through all of the events and every loop one of those events is gonna get thrown into the variable event so what we can do inside of here is we can say something like if event dot type equals equals so we're checking if the type of the event is equal to and then whatever we want to check so in this case the first event I want to check is actually pi game and then in all capitals dot quit what this means and what this event is is when we click that red X button on our window so you know you can kind of see even here right there's an X at the top that's gonna be the same thing that's gonna show up for our PI game window to be able to close it and well this is the event that happens when we press that button so inside of here what we should do is we should stop running this while loop and we should quit Pi game so what I'm gonna do is I'm gonna say run equals false and what that does know is mean but the next time we hit the top of this wanna loop we are no longer gonna run we're gonna stop and we're gonna quit hiking and in fact what I need to do at the very bottom of my program is say pi game dot quit like that and what this will do now is essentially say ok as soon as we pass this while loop and we get out here we're gonna quit high game which just means close the window and that is as easy as it is so let's actually move this over here now let's do run and let's see if this works properly sometimes it does take a second to boot up so I will be back when this boots up alright so how'd any small trouble running this program and maybe that's actually good because I can tell you guys what I did to fix it so if for some reason you can't seem to press run and get this to work it's probably just because pygame is quite difficult to run from the web what you need to do is just change the name of your project you can change your back after but I just changed it and not forced to refresh and then that way I was actually able to see this project so anyways you can see that I just press run and now we get hangman game popping up and well you can move this window around a little bit and if we press the X button it quits the game so that is pretty much what we were trying to go for here you can see that now it's no longer running anymore because I pressed quit and now we're pretty much good to continue coding so that's kind of the first run and I'd also added this line of code here you don't need that so let me get rid of that I was just troubleshooting but that is how you get your first kind of initial Windows setup and the first event which is pressing on that X button to actually register and work so the next thing I want to show you is how we can actually register Mouse events so since we're already doing this let's see how we can actually get the position of our mouse when we're pressing it on the screen and this should hopefully tell us actually how the coordinate system works in PI game which is going to be an important thing to understand for the next step which is going to be to start loading in some images and getting those displayed on the screen so let's go ahead and do that what I want to do is I want to check what my mouse is out when I actually move my mouse and when I click down so the event to check for a mouse press is if event dot type equals equals and then we're gonna save my game dot and in all capitals mouse button down like that if that happens let me zoom out a tiny bit so that we can zoom like that okay so we can see this whole thing so if a vente type equals equals pi game down mouse button down then what we're gonna do is just print to the console pi game dot mouse and dot pause with brackets like this so in fact let me throw this into a variable let's go pause equals PI game mouse table pause and let's print out pause so pause just stands for a position and what I'm trying to do is just get the XY position of my mouse in the window the reason this is important is because later when we start adding those buttons to the screen we want to check if they were pressed and will to be able to do that I'm gonna have to compare the mouse position of my mouse to the position of where those buttons are to check I've actually hit one of them then if I hit one of those buttons we're gonna do something on the screen right so this is how you get the position of the mouse you say pawns POS equals PI game mouse stop pause and then if you want to check to only get that when you press the mouse button down you use this event right here so let's go over here let's make our console a bit bigger hopefully you guys can see all this and let's run this one more time alright so it comes up and now let me start pressing down on the mouse and what does it say here PI game mouse has no attribute pause ah my apologies guys I do make mistakes as well this should be get underscore pause okay that makes more sense get underscore pause this is essentially get position so let me run this one more time you notice I did get an error there because I had some wrong code so let's run this and now let's press down and notice that we get the position of the mouse showing up down here in the console now let's actually see what the position of my mouse is so really we would imagine that based on our kind of understanding of a coordinate system the middle of this window should be zero zero right but when I click on this I'm getting 397 to 46 that's not zero zero in fact what happens when I come down here I'm getting 386 496 so it seems as though as I go up the Y position decreases and as I go down the Y position increases this is actually the first thing to understand about PI game is that the top coordinate so zero zero coordinate is actually in the top lefthand corner of the screen so notice I'm clicking here and I'm at one one pretty much right at the top lefthand corner if I go to the right hand corner I'm actually at 796 3 which is pretty much the maximum width and the minimum height so just note that when we talk about coordinate systems in PI game when we increase the X we move further to the right and when we increase the Y we move further down and this is actually really good to understand as well because when we start drawing things on the screen we actually draw them from the top left hand corner which means that say we're drawing some image that's like you know 50 by 50 well when we start drawing that we start drawing it from the top lefthand corner which means the far right edge of that image will be 50 pixels further than where we decided to draw it and will be 50 pics or pixels lower than where we decide to draw it as well so if I click here really it will be like a box like that it's hard to show you with my mouse but hopefully that makes kind of sense just understand the top left is zero zero that's very important to understand impacting alright so now that we have that the next thing I want to do is actually load in these hangman images and show you how we can start drawing and putting some things on the screen because right now it's kind of boring right we don't like what are we doing with just you know clicking the mouse that's not very fun so what we're gonna do is first of all actually I'm gonna go up to line six here and I'm gonna put a variable to store my display so I'm gonna say win so WI n equals PI game display dot set underscore mode I forgot to do this earlier this is just because we are gonna need to use this variable to draw some things on the screen so we'll just set it up and say win equals bats alright next we're gonna load in a bunch images so I'm gonna do something here I'm gonna put a comment and I'm gonna say load images a lot of the times what I like to do is kind of separate my program into a few small blocks so up here I would say something like set up display I'm gonna say load images and I would say set up game loop here just so that if I come back to this later I kind of have a really easy way to see the clear separation between the different parts so that's what I like to do but anyways let's load in the images so what I'm gonna do is I'm actually gonna make a list of images and a list is essentially just a structure that can hold multiple items so a list could look something like this I'm gonna have five six seven eight you could have a string in here like this it's just a collection of elements that we can store inside of this kind of structure and a few small things you need to know about lists I'll go through them quickly cuz I assume many of you have probably seen this before is that to be able to access an element from a list so say here all of these different things like five hello eight these are all what we call elements and they're a part of the list and inside the list they have an order right five comes first hello is last well if I want to access the first in the list what I do is I type images 0 like this so I use these square brackets I put what's known as the index or the position of the element in the list and the first position of all of our list is always 0 so 0 would access 5 and then 1 2 3 4 4 would access hello so that's kind of the basics of lists and what we need to know and then if we want to add something to the end of the list what we do is we do dot append like that and what this will do is take whatever we put in these brackets and simply add it to the end of the list those are the basic operations and I just wanted to show you those because we're gonna be using them a lot in this series so what I'm gonna do is I'm gonna say for I in range and here I'm actually gonna put 6 now what this is gonna do is essentially loop starting at 0 going up to but not including 6 and give me the value I on every loop so this is gonna say ok we want to loop 6 times and we want to have this counter variable I that starts at 0 and counts up to 6 but doesn't include 6 so essentially this loop will run whatever is inside of these indented blocks here so whatever would be where pass would be this will happen 6 times and I every time this happens will increment by 1 so we'll start the first loop will be 0 then it will be 1 then it will be 2 and so on and you're gonna see why that's important because look at the numbers that I have for my images because what I'm gonna do in Surrey actually this should be 7 my apologies what I'm gonna do is I'm gonna loop through all of these the numbers from up to 7 but not including 7 I'm gonna load all of these images because we go hangman 0 hangman 1 hangman 2 hangman 3 and so on and add them into this images list it'll make more sense in a second but essentially what I'm gonna say is images dot append and I'm gonna say hi game dot image dot load and in fact I'm gonna split this up into some variables just so that it's a little bit easier to see so I'm gonna say image equals PI game image dot load this is how we load an image we write this and then inside the brackets here what I do is I actually put the name of the image that I want to load so I have to put the exact name so hangman zero dot PNG but since I don't want to just write this seven times for each of these images I'm gonna use this for loop to help me out so what I'm gonna do is I'm gonna say hangman like that plus the string equivalent of the value I which keep in mind is this variable right here which will be going from zero and then it will be one and then it will be two and so on and so forth and then I'm gonna go plus dot PNG so essentially what I'm saying is let's make a string that is hangman whatever this number is which will be in the range of zero to seven so it won't be seven but it'll be zero up to six including six and then plus the PNG so it will go hangman zero hangman one on hangman so on and then we'll add that into images so I'm gonna say images dot append image like that now I actually don't need this OS module here I was gonna use that but we're not gonna use it anymore and now let me actually go ahead and just print out what images looks like for you so that when we run this you can see that what happens is we immediately load all of these images into this list so let's go ahead and run this let me move this up here and let's go run let's give it a second to boot up here and we can see that right down here hopefully my FaceCam isn't covering it we get all these different surfaces so this is telling us the width height and color depth of this image believe that's correct and it's telling us that we've loaded in a surface the reason for that is because all of these images that we've loaded get turned into a bunch of pixels that we call a surface and then we can actually draw that surface onto our PI game window so everything in PI game kind of works with surfaces so if you see the word surface or you hear me say surface that's what I'm talking about just some collection of pixels that I want to put onto the screen alright so now that we have all that let me close this here let's actually show how we can draw some images and refresh the display and I think that will be a good place to leave off this first tutorial so we have all these images right and when I print out images I get a list of all of the images all these different surfaces well how can I actually go about printing or sorry displaying one of these images the first thing I'm gonna do is I'm actually gonna make another comment here and I'm gonna say game variables because I have all these images right so you know hangman zero which is this one hangman six which is the final guy he's fully hung up right and I need to know which one I want to display when this game starts right because I want to show that image and then as soon as we press a button that is wrong so there's a letter in the word that we press a letter that's not in the word we're gonna you know make the next body part appear so I actually need a variable that I'm gonna call hangman status like that I'm gonna set this equal to zero so this is pretty much gonna tell me what image that I want to draw at each point in the game so I'll start it at zero and that means I'm gonna draw hangman image 0 and then hangman image 1 well that will happen if I make this one and of course if I make this six then we'll draw the sixth one so we're gonna say hangman status but that's not all we need to do inside of this while loop here what I'm actually gonna do is I'm going to update and refresh the display and then draw the current hangman image so to actually put some kind of background for our display because right now we can see that it's just black right maybe I need to actually make this Y you know maybe I want to make an another color what I do is I type win which is the name of my window which I defined right here and I'm gonna say win dot fill and inside of here I'm gonna put a color that I want to fill the window with so when we define colors inside of Pi game what we do is we pick an RGB value so red green blue essentially how much red how much green and how much blue do we want this color to have and the way we define that is by putting brackets like this and then we just set three numbers now these numbers have to be in the range of 0 and 255 where 0 is none of that color and 255 is as much of that color as possible so using red green blue we can create any color we want to actually do white which is what I want to use we knew 255 255 255 b5 because that's a combination of all of the colors so let's see what happens when we actually type wind fill 255 255 255 and we put that right inside of the while loop cuz that will happen every frame right every time this while loop runs this will fill so let's actually go ahead and run let's see what we get well it seems as though it's not going white why isn't it going way we're filling the screen every second with white right what's happening well that's because we forgot an important step which is to actually update the display in PI game we need to manually tell it when we want to update so whenever we draw something what we need to do is say hey update the display with all this stuff we've drawn so we're gonna go ahead and go PI game dot display dot update and this will update the display with any of the most recent things that we've drawn on it so we can draw a bunch of different things and then all of a sudden when we want to actually display them we do PI game display update so let's run this now and let's see if our background color changes and there we go now our background color is white awesome perfect great now the next thing I want to do is draw that hangman image and in fact I'm actually gonna clean this code up a little bit I'm gonna take this color white and I'm gonna put this into a variable because I think I might want to use this later on so up here I'm gonna go and I'm gonna say colors like that oops not compile colors and then down here I'm gonna say white and all capitals because it's gonna be a constant is equal to 255 255 255 and now I'm gonna put white inside of here in case I ever want to use this color again I have it defined it and now it's way easier to read that hey this is white I'm drawing white and sorry that doesn't go in there that goes in there and that goes like that okay what awesome next thing I want to do is actually draw the hangman image so what I'm gonna do is I'm going to go and I'm gonna say win da blitz blitz stands for draw image essentially draw some kind of surface that's what it's saying whereas fill is just filling the entire screen with a color so I start by filling the entire screen with a color this will in fact to actually override anything that was previously on the screen so we don't see multiple images being drawn then I'm gonna blitz the image that I want to draw in this case it's gonna be images hangman status because remember that to access the different images inside of this list we use numbers from 0 up to 6 right where six is the last image in the list and 0 is the first image so whatever hangman status is that's the image that we'll get so if we put hangman status here then that will automatically index the correct image from the list and then all we need to do here is tell it where we want to draw the image so we need to give an XY position for the top lefthand corner of this image now I'm gonna look on my other screen here to figure out where we want to draw this and I think where we want to actually put this is gonna be 150 100 so this is where I want to draw it this is the top left hand corner of where I want to start drawing this image and then of course it will be wider and it will be longer so it will fill up more of the screen let's actually have a look at what happens when I blit this image to the screen so let's run this and we see that now we're getting this hangman popup and let's actually see what happens if I change this hangman status to say 4 and I go ahead and run this now well there we go now we're getting a different hangman image popping up on the screen so I think with that I'm gonna wrap up tutorial one here of course there's a lot more to cover but I think we did a decent job and we went through enough and we've covered kind of the core concepts on how pygame works how to display images and in the next videos of course we'll get into some more complicated logic and start doing some more fun things so with that being said if you enjoyed make sure you leave a like subscribe and hopefully I will see you in the next hangman tutorial
