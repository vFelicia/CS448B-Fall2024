With timestamps:

00:00 - hey guys and welcome to the fourth video
00:02 - in the AI Champa series now in today's
00:05 - video we're actually gonna get into more
00:06 - of the fun stuff and get working with
00:08 - our model and getting it talking back
00:10 - and forth with us now this is not super
00:12 - difficult to do we've already trained
00:14 - the model there just a few things that
00:15 - we kind of need to set up here to get
00:17 - the model running now the first thing
00:19 - that we're gonna talk about is the fact
00:21 - that we don't really want to have to do
00:23 - all of this code every time that we want
00:26 - to use the model so every time we want
00:28 - to make one prediction in our current
00:29 - state we need to run all this code so
00:32 - we're gonna clean that up first we're
00:34 - gonna save the model in kind of a better
00:36 - form than this or just a different way
00:38 - and we're gonna make sure that we don't
00:39 - do all the pre-processing of this data
00:41 - multiple times now right now it only
00:43 - takes a few seconds to train the model
00:45 - but if you have a lot more data in this
00:47 - JSON file or more complex models then
00:50 - you definitely don't want to be re
00:52 - running this code if you don't have to
00:54 - so the first thing that I'm actually
00:55 - gonna do here is just set up a try
00:57 - except Clause and what we're gonna do is
00:59 - we're gonna try to open up some saved
01:01 - data which will save in just a second
01:03 - and if that doesn't work then we will
01:06 - generate the trick the data so we're
01:08 - gonna do try and then underneath the
01:09 - arena that put you accept and notice
01:12 - that I put if I spell accept correctly
01:16 - notice that I just put all of this code
01:19 - here so all the way up until training
01:21 - equals numpy dot array output equals
01:24 - numpy dot array in the except that's
01:26 - because we're not gonna do any of this
01:27 - if what's in the try works successfully
01:31 - now what we're gonna do is actually
01:32 - start by just importing Pikul up here
01:35 - and what we're gonna do is try to load
01:36 - in some pickled data and that data is
01:39 - gonna be our words our labels our
01:41 - training and our output data now that's
01:44 - because we need that data for the model
01:47 - so if we can have that model already or
01:49 - have that data already saved we've
01:51 - already processed it and used it before
01:53 - then there's no point in running all
01:54 - this into stemming the words and doing
01:56 - all that against what we're gonna do is
01:57 - just say with and and then in this case
02:00 - we're gonna say open and we're gonna put
02:02 - the name of where we're gonna save our
02:04 - information we haven't yet saved it I'm
02:06 - just gonna say data dot pickle and I
02:09 - believe you do have to end this in a
02:10 - pickle like dot pickle so do that and
02:12 - then we're gonna put
02:13 - eub or sorry not w BRB and that stands
02:16 - for read bytes because we're gonna save
02:18 - this data as bytes we're gonna do that
02:20 - as f and what we're gonna say is open
02:23 - data duck
02:24 - Pikul RB as f and we're gonna say what
02:28 - is it model or not model I gotta figure
02:31 - out how we're gonna do this we're gonna
02:32 - do words labels training output equals
02:39 - and then pickle load F now I know this
02:44 - probably doesn't really make much sense
02:45 - to you but what we're gonna do is we're
02:46 - gonna save all of these four variables
02:48 - into our pickle file and then when if it
02:51 - is saved and we open this correctly and
02:54 - it works fine we're gonna load in these
02:56 - lists because those are the only lists
02:58 - we actually need for our models so well
02:59 - pickle dot load that file it should load
03:01 - that up now obviously we haven't yet
03:04 - saved this so to save this what we're
03:05 - gonna do is at the end of this except
03:08 - here so right after training and output
03:09 - we're gonna save all of those in the
03:11 - same form so I'm actually just gonna
03:12 - copy this we're just gonna change a few
03:15 - things around right under here so let's
03:17 - forget the indentation correct we'll say
03:19 - with opened out pick 'l in this case
03:22 - we're gonna put it in WB mode and now
03:25 - what we're gonna do is instead of having
03:26 - we call it pickle dot load we're gonna
03:29 - say pickled dot dump we're gonna put all
03:33 - of these in brackets like this so it
03:35 - should be all of these in brackets like
03:37 - a tupple we're gonna do comma F and then
03:40 - close that bracket which means write all
03:42 - of these variables into a pickle file so
03:44 - we can save it now so this way when we
03:46 - run this code it's gonna try to open up
03:48 - this first if it can't open it it'll do
03:50 - all this and then it'll save it and then
03:52 - the next time that we run this it'll
03:53 - just simply open it up for us and we
03:55 - won't have to do that so now we have the
03:57 - model here we actually have to keep this
04:00 - model code like this but what we can do
04:03 - is just modify one thing so we're not
04:04 - training the model if we already have a
04:06 - model that exists so to do that what
04:08 - we're gonna do is say try and we're just
04:10 - gonna try to load the model and to load
04:12 - the models really easy which can do
04:14 - model dot load and then model dot TF
04:17 - learn just like that and now otherwise
04:19 - we'll say accept and we'll do all this
04:23 - so that's it for saving our model so now
04:26 - what's actually going to happen
04:27 - is when we run this script if a model
04:29 - already exists then we won't retrain the
04:32 - model and if this data that we've
04:34 - already pre processed exists and we've
04:36 - saved it as we already as data dot
04:37 - pickle we won't bother doing that as
04:40 - well now if you change anything in your
04:42 - intense JSON file just throw like like
04:45 - an X in here or something
04:46 - so that it doesn't open up your old
04:48 - pickle data it actually runs through all
04:51 - of this or you can just delete that
04:53 - we'll pick a file and delete the old
04:55 - model because you'll need to retrain it
04:56 - on that new information that you put in
04:58 - this intense JSON file so anyways that's
05:01 - it for that and now time to actually
05:02 - start making predictions now remember
05:05 - that when we trained our model we fed it
05:07 - bags of words so that is actually the
05:10 - same information we have to give our
05:11 - model if we want to make a prediction so
05:13 - the first step in kind of classifying
05:16 - any sentences or getting any kind of
05:17 - output from the model is to turn a
05:19 - sentence input from the user into a bag
05:22 - of words so I'm gonna write a function
05:24 - and this is called bag of words like
05:26 - this it's gonna take a let's just call
05:29 - it s and it's gonna take a list of words
05:31 - now this list of words is important
05:33 - because it needs to know how we're gonna
05:35 - create this bag of words which is going
05:37 - to be dependent on this words list now
05:39 - fortunately for us we have this words
05:40 - list we've loaded it in either with the
05:42 - pickle file where we've created it here
05:44 - so what we can do is just start writing
05:47 - this to create a bag of words so I'm
05:48 - gonna say bag equals a blank list that's
05:51 - where we're gonna store all the words
05:53 - obviously and then let me just go and
05:55 - write the rest I just gotta look at my
05:57 - other screen here so I'm gonna say s
05:59 - underscore words equals in this case NLT
06:02 - k dot word underscore tokenize and then
06:06 - we're just gonna put s in there so now
06:08 - we're gonna get a list of tokenized
06:09 - words and now we're gonna stem these
06:11 - words the same way we did before we're
06:12 - gonna say s underscore words equals and
06:15 - in this case we'll do a list and we'll
06:17 - say stemmer dot stem word lower or word
06:23 - in s underscore words that's gonna stem
06:27 - all of our words and now what we're
06:29 - gonna do actually is just modify this
06:30 - bag and then write a little bit more
06:32 - code so I'm gonna say bag actually in
06:34 - this case is gonna be 0 for underscore
06:36 - in range
06:39 - blend of words now what this is gonna do
06:42 - is just create a blank bag of words list
06:44 - and then we'll actually change the
06:46 - elements in here to represent if a word
06:48 - exists or if it doesn't such as setting
06:50 - up a list that has a bunch of zeros for
06:52 - however many words we have and now it's
06:54 - time to write a little for loop that
06:56 - will simply generate this bag list
06:59 - properly so now we're gonna say for s
07:01 - and I shouldn't can't do s we'll say for
07:04 - s II does that make sense to do that
07:06 - mmm not really well whatever will do for
07:09 - s e and s underscore words and now we're
07:12 - gonna say if we're sorry not F for I
07:15 - comma W in enumerate in enumerates and
07:22 - then words well we'll do now is say if W
07:27 - equals equals SP which means that the
07:30 - current word that we're looking at in
07:32 - this words list is equal to the word in
07:35 - our sentence what we will do is you will
07:37 - say bag I dot append and then we will
07:42 - simply append a 1 representing that the
07:44 - word exists otherwise we will do bag
07:46 - actually we don't need an else statement
07:48 - because we already filled them all with
07:50 - zeros so that's all we need to do to
07:52 - actually generate our bag of words I
07:54 - don't really want to go through this
07:55 - code it's pretty straightforward I hope
07:56 - you guys can understand that and then
07:58 - we're just gonna return a numpy don't
08:02 - array that has our bag like that now
08:06 - what this is gonna do is just exactly
08:08 - what it says here essentially take this
08:09 - bag of words convert it into a numpy ray
08:11 - and return it to well wherever we need
08:13 - that so now while we have this bag of
08:16 - words functions working fine and the
08:18 - next thing we're gonna do is write the
08:20 - code that will ask the user for some
08:21 - kind of sentence and then spit out a
08:24 - response so to do this will actually
08:26 - have to start using the model and I'm
08:28 - just gonna create a function called chat
08:29 - and we'll simply call chat at the end of
08:32 - our file if we want to start chatting
08:34 - with them all as opposed to just
08:35 - training it so now I'm gonna say print
08:39 - and this will just be like the first
08:41 - print statement like start talking with
08:44 - the bot just giving the user some input
08:47 - saying like the bots ready to go
08:48 - whatever something like that and now
08:50 - we're gonna say
08:51 - true let's say iymp which stands for
08:55 - input is equal to input and i'm just
08:57 - gonna put you : meaning like this is
09:00 - what you are saying like you type to the
09:02 - bot and then what I'm gonna do is I'm
09:04 - gonna say if I MP dot lower equals
09:11 - equals quits we'll put this in brackets
09:13 - then break so this is just a way that
09:16 - you can get out of the program if you
09:17 - type quit then it will simply break this
09:20 - while loop so that you can end because
09:22 - otherwise you would just keep going
09:23 - continuously or you'd have to close the
09:25 - program which we don't want so maybe
09:27 - let's add a thing here like type quit to
09:31 - stop so make that okay now after that
09:35 - what we're gonna do is say if they
09:36 - didn't type quit now we're gonna turn
09:39 - this input whatever words they typed in
09:42 - into a bag of words feed it to the model
09:45 - and get what the models response should
09:47 - be so to do this what we're gonna do is
09:50 - say what is it model dot predict and
09:57 - then in here we're gonna pass a list so
10:00 - just create a blank list like this and
10:01 - inside the list we're gonna say bag of
10:04 - words IM p : words now the reason we do
10:09 - this is because model dot predicts
10:11 - actually makes predictions on multiple
10:13 - things at once so it expects you to give
10:15 - it a bunch of different entries and then
10:17 - it gives you a bunch of different
10:18 - predictions but in our case we only want
10:19 - to predict for one thing but we still
10:21 - have to feed it in a list so we just put
10:23 - it in a blank list we say bag of words
10:25 - input words and that's our function bag
10:28 - of words will create a bag of words with
10:30 - the input that we gave it so we're gonna
10:33 - do that we're gonna save that as like
10:35 - results okay and we'll say results
10:40 - equals model dot predict like that now
10:42 - the issue that is when we get our
10:44 - results we're not gonna get any like
10:46 - real good output to give to the user all
10:49 - it's gonna give us is a probability and
10:51 - I'll show you what it looks like here so
10:53 - that you guys can get an idea if we want
10:56 - decide to print it out so let's run this
10:58 - now because I think this is important to
10:59 - show
11:00 - let's go Python me and go
11:04 - see if I rinse any errors by the way for
11:07 - now um hmm let's see it's run this one
11:09 - more time oh well I haven't called the
11:11 - chat function so that would probably be
11:12 - why that wasn't running let's see this
11:14 - now Python made up hi and it says u so
11:19 - let's type something let's type hello
11:21 - and int object has no attribute append
11:23 - hmm oh sorry my bad guys let's fix this
11:27 - first of all before I show that so bag I
11:29 - instead of dot append one is just gonna
11:31 - be equal to one so change that line
11:33 - right there
11:34 - we're gonna run Python main dot PI again
11:36 - and now if I type something like Hello
11:40 - you can see that this is our output for
11:42 - the models prediction now this doesn't
11:44 - really mean anything to us this is
11:46 - actually just a bunch of different
11:47 - probabilities and this is how probable
11:50 - the model thinks each of our different
11:52 - little neurons that are there is a what
11:56 - do you call it like how probable it
11:58 - thinks each neuron is that class
12:00 - essentially so we type hello it tries to
12:03 - classify hello and what it does says
12:06 - well I think it's this much this much
12:08 - this neuron I think it's this much this
12:11 - neuron it's this much this neuron
12:13 - telling you how likely it thinks it is
12:15 - each specific class because remember
12:17 - each neuron represents a specific class
12:19 - so what we need to do is actually pick
12:20 - out the greatest number in here and say
12:23 - that is the classification from our
12:25 - model so to do that there's a few little
12:29 - tricks we can use I'm just gonna use
12:30 - what's known as our max from numpy so to
12:33 - do that I'm going to say results
12:36 - underscore index equals numpy
12:41 - Arg max and we're gonna put results and
12:45 - what this will do is give us the index
12:46 - of the greatest value in our list so
12:49 - just like our list represents all of the
12:52 - different probabilities of classes or
12:54 - tags or intense or whatever we want to
12:56 - call them all of these things like
12:57 - greeting goodbye age whatever it'll give
13:00 - us the index of the greatest number then
13:02 - we can use that index to figure out
13:04 - which responds to actually display so
13:08 - now what we're gonna say is we'll say
13:11 - tag equals in this case labels and
13:16 - here what we'll just put is results
13:18 - underscore index now label stores all of
13:22 - the different labels so when we do this
13:24 - it'll give us the label that it thinks
13:26 - our message is so now let's try just
13:28 - printing the tag first of all and see
13:30 - what what we're getting from our model
13:32 - so let's finish running that
13:34 - let's go python maned up high and let's
13:38 - go hello and now we can see that it
13:40 - thinks it is a greeting if I say goodbye
13:43 - it thinks it is goodbye if I say like
13:45 - what are the hours it says hours right
13:50 - so it's giving us the tag that it thinks
13:51 - this intent is now so far it's worked
13:54 - fairly well let's actually start getting
13:57 - some responses though now we're just
13:59 - showing the tag but if we want to show a
14:01 - response we simply need to look through
14:02 - this JSON file and pick one of the
14:05 - responses that match with these tags so
14:07 - this will be the last part of the video
14:08 - I know this is a bit long but let's just
14:10 - power through and finish this real quick
14:11 - so to do this we're gonna open up the
14:14 - JSON file find that specific tag and
14:17 - then just pick a random response for it
14:19 - so JSON should be imported up here we're
14:23 - just gonna copy this open from the JSON
14:25 - file
14:25 - we're actually data is already there so
14:27 - we don't need to open it because it's
14:28 - already loaded in
14:29 - so we'll say for in this case tag in
14:34 - data intense now I mean I called the
14:39 - intense and the other one doesn't really
14:40 - matter
14:40 - actually let's change it to TG because
14:42 - we already have tag here so we'll say
14:45 - for TG and data intense and then we'll
14:48 - say if TD tag equals equals tag we'll
14:56 - say it responses equals and in this case
15:00 - it'll be TG and should be just responses
15:03 - and then what we can do is just say well
15:06 - now that we have responses like this for
15:09 - or we'll just randomly choose one of the
15:12 - responses and display them so to do that
15:13 - we'll say print random got choice
15:19 - responses now I believe I did this
15:21 - correctly I could have messed up a
15:23 - little bit we will see
15:25 - so for TG in data
15:28 - in tents that should loop through all of
15:31 - these dictionaries then we're gonna say
15:32 - for responses TG yeah that should work
15:35 - properly let's run this and let's try
15:37 - our chat bot and see if this is working
15:39 - now so Python maned up high let's go Tim
15:43 - or let's go hello and now you see good
15:45 - to see you good to see you again
15:47 - let's do goodbye we get hi there how can
15:50 - I help you obviously it didn't really
15:51 - understand what we were saying there
15:53 - maybe let's say what do you sell says we
15:59 - sell chocolate chip cookies for two
16:00 - dollars so you can see that clearly the
16:02 - chat pod is working and everything is
16:04 - going well so in the next video I'm just
16:07 - gonna show you a few little tweaks with
16:08 - the chat bot how we can change the
16:10 - intense file modify it I'm just some
16:12 - extra things but honestly this is how
16:14 - you use the chat bot if this is all you
16:17 - wanted here you go I hope you guys
16:19 - enjoyed the series if you're not gonna
16:20 - be watching the next video where I'm
16:21 - just gonna be showing you some
16:22 - fine-tuning and fixing and modifying and
16:25 - all of that stuff if you did please make
16:27 - sure you leave a like and subscribe to
16:28 - the channel and I will see you again in
16:30 - another video

Cleaned transcript:

hey guys and welcome to the fourth video in the AI Champa series now in today's video we're actually gonna get into more of the fun stuff and get working with our model and getting it talking back and forth with us now this is not super difficult to do we've already trained the model there just a few things that we kind of need to set up here to get the model running now the first thing that we're gonna talk about is the fact that we don't really want to have to do all of this code every time that we want to use the model so every time we want to make one prediction in our current state we need to run all this code so we're gonna clean that up first we're gonna save the model in kind of a better form than this or just a different way and we're gonna make sure that we don't do all the preprocessing of this data multiple times now right now it only takes a few seconds to train the model but if you have a lot more data in this JSON file or more complex models then you definitely don't want to be re running this code if you don't have to so the first thing that I'm actually gonna do here is just set up a try except Clause and what we're gonna do is we're gonna try to open up some saved data which will save in just a second and if that doesn't work then we will generate the trick the data so we're gonna do try and then underneath the arena that put you accept and notice that I put if I spell accept correctly notice that I just put all of this code here so all the way up until training equals numpy dot array output equals numpy dot array in the except that's because we're not gonna do any of this if what's in the try works successfully now what we're gonna do is actually start by just importing Pikul up here and what we're gonna do is try to load in some pickled data and that data is gonna be our words our labels our training and our output data now that's because we need that data for the model so if we can have that model already or have that data already saved we've already processed it and used it before then there's no point in running all this into stemming the words and doing all that against what we're gonna do is just say with and and then in this case we're gonna say open and we're gonna put the name of where we're gonna save our information we haven't yet saved it I'm just gonna say data dot pickle and I believe you do have to end this in a pickle like dot pickle so do that and then we're gonna put eub or sorry not w BRB and that stands for read bytes because we're gonna save this data as bytes we're gonna do that as f and what we're gonna say is open data duck Pikul RB as f and we're gonna say what is it model or not model I gotta figure out how we're gonna do this we're gonna do words labels training output equals and then pickle load F now I know this probably doesn't really make much sense to you but what we're gonna do is we're gonna save all of these four variables into our pickle file and then when if it is saved and we open this correctly and it works fine we're gonna load in these lists because those are the only lists we actually need for our models so well pickle dot load that file it should load that up now obviously we haven't yet saved this so to save this what we're gonna do is at the end of this except here so right after training and output we're gonna save all of those in the same form so I'm actually just gonna copy this we're just gonna change a few things around right under here so let's forget the indentation correct we'll say with opened out pick 'l in this case we're gonna put it in WB mode and now what we're gonna do is instead of having we call it pickle dot load we're gonna say pickled dot dump we're gonna put all of these in brackets like this so it should be all of these in brackets like a tupple we're gonna do comma F and then close that bracket which means write all of these variables into a pickle file so we can save it now so this way when we run this code it's gonna try to open up this first if it can't open it it'll do all this and then it'll save it and then the next time that we run this it'll just simply open it up for us and we won't have to do that so now we have the model here we actually have to keep this model code like this but what we can do is just modify one thing so we're not training the model if we already have a model that exists so to do that what we're gonna do is say try and we're just gonna try to load the model and to load the models really easy which can do model dot load and then model dot TF learn just like that and now otherwise we'll say accept and we'll do all this so that's it for saving our model so now what's actually going to happen is when we run this script if a model already exists then we won't retrain the model and if this data that we've already pre processed exists and we've saved it as we already as data dot pickle we won't bother doing that as well now if you change anything in your intense JSON file just throw like like an X in here or something so that it doesn't open up your old pickle data it actually runs through all of this or you can just delete that we'll pick a file and delete the old model because you'll need to retrain it on that new information that you put in this intense JSON file so anyways that's it for that and now time to actually start making predictions now remember that when we trained our model we fed it bags of words so that is actually the same information we have to give our model if we want to make a prediction so the first step in kind of classifying any sentences or getting any kind of output from the model is to turn a sentence input from the user into a bag of words so I'm gonna write a function and this is called bag of words like this it's gonna take a let's just call it s and it's gonna take a list of words now this list of words is important because it needs to know how we're gonna create this bag of words which is going to be dependent on this words list now fortunately for us we have this words list we've loaded it in either with the pickle file where we've created it here so what we can do is just start writing this to create a bag of words so I'm gonna say bag equals a blank list that's where we're gonna store all the words obviously and then let me just go and write the rest I just gotta look at my other screen here so I'm gonna say s underscore words equals in this case NLT k dot word underscore tokenize and then we're just gonna put s in there so now we're gonna get a list of tokenized words and now we're gonna stem these words the same way we did before we're gonna say s underscore words equals and in this case we'll do a list and we'll say stemmer dot stem word lower or word in s underscore words that's gonna stem all of our words and now what we're gonna do actually is just modify this bag and then write a little bit more code so I'm gonna say bag actually in this case is gonna be 0 for underscore in range blend of words now what this is gonna do is just create a blank bag of words list and then we'll actually change the elements in here to represent if a word exists or if it doesn't such as setting up a list that has a bunch of zeros for however many words we have and now it's time to write a little for loop that will simply generate this bag list properly so now we're gonna say for s and I shouldn't can't do s we'll say for s II does that make sense to do that mmm not really well whatever will do for s e and s underscore words and now we're gonna say if we're sorry not F for I comma W in enumerate in enumerates and then words well we'll do now is say if W equals equals SP which means that the current word that we're looking at in this words list is equal to the word in our sentence what we will do is you will say bag I dot append and then we will simply append a 1 representing that the word exists otherwise we will do bag actually we don't need an else statement because we already filled them all with zeros so that's all we need to do to actually generate our bag of words I don't really want to go through this code it's pretty straightforward I hope you guys can understand that and then we're just gonna return a numpy don't array that has our bag like that now what this is gonna do is just exactly what it says here essentially take this bag of words convert it into a numpy ray and return it to well wherever we need that so now while we have this bag of words functions working fine and the next thing we're gonna do is write the code that will ask the user for some kind of sentence and then spit out a response so to do this will actually have to start using the model and I'm just gonna create a function called chat and we'll simply call chat at the end of our file if we want to start chatting with them all as opposed to just training it so now I'm gonna say print and this will just be like the first print statement like start talking with the bot just giving the user some input saying like the bots ready to go whatever something like that and now we're gonna say true let's say iymp which stands for input is equal to input and i'm just gonna put you meaning like this is what you are saying like you type to the bot and then what I'm gonna do is I'm gonna say if I MP dot lower equals equals quits we'll put this in brackets then break so this is just a way that you can get out of the program if you type quit then it will simply break this while loop so that you can end because otherwise you would just keep going continuously or you'd have to close the program which we don't want so maybe let's add a thing here like type quit to stop so make that okay now after that what we're gonna do is say if they didn't type quit now we're gonna turn this input whatever words they typed in into a bag of words feed it to the model and get what the models response should be so to do this what we're gonna do is say what is it model dot predict and then in here we're gonna pass a list so just create a blank list like this and inside the list we're gonna say bag of words IM p words now the reason we do this is because model dot predicts actually makes predictions on multiple things at once so it expects you to give it a bunch of different entries and then it gives you a bunch of different predictions but in our case we only want to predict for one thing but we still have to feed it in a list so we just put it in a blank list we say bag of words input words and that's our function bag of words will create a bag of words with the input that we gave it so we're gonna do that we're gonna save that as like results okay and we'll say results equals model dot predict like that now the issue that is when we get our results we're not gonna get any like real good output to give to the user all it's gonna give us is a probability and I'll show you what it looks like here so that you guys can get an idea if we want decide to print it out so let's run this now because I think this is important to show let's go Python me and go see if I rinse any errors by the way for now um hmm let's see it's run this one more time oh well I haven't called the chat function so that would probably be why that wasn't running let's see this now Python made up hi and it says u so let's type something let's type hello and int object has no attribute append hmm oh sorry my bad guys let's fix this first of all before I show that so bag I instead of dot append one is just gonna be equal to one so change that line right there we're gonna run Python main dot PI again and now if I type something like Hello you can see that this is our output for the models prediction now this doesn't really mean anything to us this is actually just a bunch of different probabilities and this is how probable the model thinks each of our different little neurons that are there is a what do you call it like how probable it thinks each neuron is that class essentially so we type hello it tries to classify hello and what it does says well I think it's this much this much this neuron I think it's this much this neuron it's this much this neuron telling you how likely it thinks it is each specific class because remember each neuron represents a specific class so what we need to do is actually pick out the greatest number in here and say that is the classification from our model so to do that there's a few little tricks we can use I'm just gonna use what's known as our max from numpy so to do that I'm going to say results underscore index equals numpy Arg max and we're gonna put results and what this will do is give us the index of the greatest value in our list so just like our list represents all of the different probabilities of classes or tags or intense or whatever we want to call them all of these things like greeting goodbye age whatever it'll give us the index of the greatest number then we can use that index to figure out which responds to actually display so now what we're gonna say is we'll say tag equals in this case labels and here what we'll just put is results underscore index now label stores all of the different labels so when we do this it'll give us the label that it thinks our message is so now let's try just printing the tag first of all and see what what we're getting from our model so let's finish running that let's go python maned up high and let's go hello and now we can see that it thinks it is a greeting if I say goodbye it thinks it is goodbye if I say like what are the hours it says hours right so it's giving us the tag that it thinks this intent is now so far it's worked fairly well let's actually start getting some responses though now we're just showing the tag but if we want to show a response we simply need to look through this JSON file and pick one of the responses that match with these tags so this will be the last part of the video I know this is a bit long but let's just power through and finish this real quick so to do this we're gonna open up the JSON file find that specific tag and then just pick a random response for it so JSON should be imported up here we're just gonna copy this open from the JSON file we're actually data is already there so we don't need to open it because it's already loaded in so we'll say for in this case tag in data intense now I mean I called the intense and the other one doesn't really matter actually let's change it to TG because we already have tag here so we'll say for TG and data intense and then we'll say if TD tag equals equals tag we'll say it responses equals and in this case it'll be TG and should be just responses and then what we can do is just say well now that we have responses like this for or we'll just randomly choose one of the responses and display them so to do that we'll say print random got choice responses now I believe I did this correctly I could have messed up a little bit we will see so for TG in data in tents that should loop through all of these dictionaries then we're gonna say for responses TG yeah that should work properly let's run this and let's try our chat bot and see if this is working now so Python maned up high let's go Tim or let's go hello and now you see good to see you good to see you again let's do goodbye we get hi there how can I help you obviously it didn't really understand what we were saying there maybe let's say what do you sell says we sell chocolate chip cookies for two dollars so you can see that clearly the chat pod is working and everything is going well so in the next video I'm just gonna show you a few little tweaks with the chat bot how we can change the intense file modify it I'm just some extra things but honestly this is how you use the chat bot if this is all you wanted here you go I hope you guys enjoyed the series if you're not gonna be watching the next video where I'm just gonna be showing you some finetuning and fixing and modifying and all of that stuff if you did please make sure you leave a like and subscribe to the channel and I will see you again in another video
