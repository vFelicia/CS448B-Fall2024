With timestamps:

00:00 - hey guys welcome back to another youtube
00:02 - video in today's video I am going to be
00:04 - talking about a programming technique
00:06 - called recursion
00:07 - now recursion is used to simplify a
00:10 - problem sorry into a base case where it
00:13 - can then be solved now this is extremely
00:15 - useful for solving a lot of problems
00:17 - like the one I'm going to be
00:18 - demonstrating here which is the
00:19 - Fibonacci sequence so calculating the
00:21 - nth Fibonacci sequence or number in that
00:24 - sequence based on just a given input
00:27 - okay so let's get started right now so
00:30 - before I actually talk about recursion
00:32 - let's just understand Fibonacci because
00:34 - that's what I'm going to be doing an
00:35 - example on right now so pretty much a
00:37 - Fibonacci sequence is the nth term is
00:40 - equal to the nth minus one term plus the
00:43 - nth minus two term so to put it simply
00:45 - eight right here which is the sixth term
00:48 - would be equal to the fifth term which
00:49 - would be 5 plus the fourth term which
00:51 - would be 3 so 5 plus 3 equals 8
00:54 - same thing ok move up here to the eighth
00:56 - term that is equal to the seventh term
00:59 - plus the sixth term which equals again
01:00 - 21 ok fairly simple so now what is
01:04 - recursion and how are we gonna use it to
01:06 - solve this problem so given the nth term
01:09 - what is that value okay
01:12 - so we're gonna be using a function and
01:14 - what recursion is is pretty much calling
01:17 - a function inside of its own function so
01:20 - if you name a function if you call a
01:22 - function num then that means you're
01:23 - calling them inside of num and I'm gonna
01:26 - show an example so that'll be a lot more
01:28 - clear so let's start off by defining a
01:31 - function in this case I'm gonna call it
01:33 - fib and now in the brackets I'm gonna
01:36 - give it one parameter called n which is
01:39 - gonna be the term number now we have to
01:42 - start off by using a base case now this
01:45 - is important for all recursion problems
01:47 - is that you have a base case which is
01:49 - going to return a constant value so our
01:53 - base case here is if n is less than or
01:56 - equal to 2 we need to return return
02:00 - sorry a value of 1 like so now if it's
02:07 - not less than or equal to 2
02:09 - well what do we need to do exactly what
02:11 - I've stated above and
02:13 - the sequence states so we need to return
02:16 - then the Fibonacci sequence of n minus 1
02:21 - plus the Fibonacci sequence of n minus 2
02:26 - like so now this looks extremely simple
02:29 - and that's because it is so if I call
02:32 - try calling now the Fibonacci sequence
02:34 - of 8 what's gonna happen is we're gonna
02:37 - go up here or actually let's use 4
02:39 - because it's easier to explain we're
02:41 - gonna go up here we're gonna sub n for 4
02:44 - we're gonna say is 4 less than or equal
02:46 - to no it's not so now we're gonna move
02:48 - here and we're looking for the Fibonacci
02:50 - of 3 plus the Fibonacci of 2 now the
02:54 - Fibonacci of 3 we're gonna call this
02:57 - function again we're gonna move up here
02:59 - the Fibonacci of 3 is that less than or
03:01 - equal to 2 no it's not so we moved down
03:03 - here and we say that's the Fibonacci of
03:05 - 2 plus the Fibonacci of 1 and then with
03:09 - that applies to our base case so it'll
03:11 - be 1 here plus 1 here which will be 2
03:16 - and now that's just calculated the 3
03:18 - parts that's only done this first call
03:20 - on the 4 now we move to the Fibonacci of
03:23 - what will be 2 because 4 minus 2 is 2
03:25 - that applies to our base case so that'll
03:28 - be 1 we have already calculated this
03:30 - value which is 2 2 plus 1 equals 3 and
03:32 - that is the value here for the fourth
03:34 - term so I'll show you it working when I
03:36 - run the program like this and I forgot
03:39 - to print it to the screen ok so now I
03:42 - will print it to the screen like so
03:46 - there we go we get a value of 3 now this
03:48 - is all great but I want to show you a
03:50 - problem that happens so we're gonna run
03:51 - the Fibonacci of 10 you'll see it runs
03:54 - pretty quickly and up to about 20
03:57 - everything's running pretty smoothly now
03:59 - what happens if I try to put in a larger
04:01 - number like maybe 35 well the program
04:05 - takes forever so I know that one wasn't
04:09 - not extremely long but think about that
04:11 - timing so that took about maybe five
04:13 - seconds to get us that number what if I
04:15 - go to 38 well now we are continually
04:20 - loading as the time to calculate has got
04:23 - exponentially longer
04:25 - and this is the problem with recursion
04:28 - on a basic level so you can see we just
04:30 - got our answer now which is kind of
04:31 - unacceptable on for this program so how
04:35 - can we fix this and how can we make this
04:37 - run a lot faster and why is it running
04:39 - so slow well the reason it's running so
04:41 - slow is because we are constantly
04:43 - recalculating answers and every time we
04:47 - have to do addition that uses up our
04:49 - processor and makes it take a lot longer
04:52 - to calculate the answer so for example
04:55 - if we're calculating the fibonacci of 38
04:57 - that means we're gonna calculate the
04:59 - fibonacci of 37 here which is then gonna
05:02 - ask us for 36 and then we're gonna go
05:04 - over here we're gonna do the 36 again
05:05 - and same thing with all the other
05:07 - numbers below that now that is extremely
05:10 - inefficient and that is why we're gonna
05:13 - learn how to write a recursion statement
05:16 - which is a lot more efficient and takes
05:20 - constant time rather than exponential
05:22 - time meaning that every single term we
05:25 - add is gonna take an extra say 0.1
05:28 - seconds rather than exponentially
05:30 - increasing per term so let's start off
05:33 - this is new so we have to make something
05:35 - called a what do you call it I'm sorry a
05:39 - hash table or a dictionary in Python so
05:42 - in Python it's called a dictionary so
05:43 - let's just say nums is equal to and then
05:47 - our little squiggly brackets like that
05:49 - curly braces whatever you want to call
05:51 - them now we're gonna make a new function
05:52 - in this case I'm gonna call it fit one
05:54 - same thing same parameters here with N
05:58 - and then we're going to start off the
06:00 - exact same with our with our base case
06:02 - so we're going to take if n is less than
06:05 - or equal to two and it's less than or
06:10 - equal to two we are going to return a
06:13 - value of one now here is where things
06:16 - change just a little bit so like I
06:18 - mentioned before we don't want to
06:20 - recalculate an answer if we've already
06:22 - calculated it so what we need to do here
06:24 - is we need to check if we've already
06:25 - calculated that answer so if N in nums
06:31 - meaning is that inside of our table or
06:34 - inside of our dictionary then we're
06:36 - simply gonna return the value that's in
06:39 - which is a lot faster than recalculating
06:42 - that value so then we're gonna return
06:44 - nums of n like that and now here this
06:48 - means we have not already calculated the
06:50 - value so we do have to go ahead and do
06:52 - the recursion to calculate that so
06:54 - otherwise we need to in this case we're
06:56 - gonna set a number I'm just we're gonna
06:57 - set a variable say num is equal to and
07:00 - then the same thing that we typed here
07:02 - so this our recursive call Fibonacci of
07:05 - n minus 1 plus n minus 2 we're going to
07:09 - add this to our table so nums n is equal
07:14 - to num and then we are going to return
07:18 - none just like that now I went a little
07:22 - fast so we'll just recap it really
07:24 - quickly what we do is we first check for
07:26 - our base case if we have that base case
07:28 - we return 1 otherwise we see have we
07:31 - already calculated that value so if we
07:33 - already calculated the 7th term yes we
07:35 - have okay so let's return it now let's
07:38 - say we have not calculated that value we
07:40 - go down here we do the same thing we did
07:41 - up here and we do our recursive call to
07:44 - calculate that value we store that value
07:47 - under the key N and then we return that
07:51 - value so now let's try running this so
07:55 - again sorry I just need to change this
07:57 - to fib one so we're not referencing this
07:59 - function up here which would defeat the
08:01 - whole purpose of doing this and now I
08:02 - need to print out fib 1 of let's do a
08:08 - hundred and let's see how long that
08:09 - takes and there you go almost instantly
08:13 - we have that printed to our screen
08:15 - whereas if I tried to do fib 100 running
08:18 - this function up here well this would be
08:20 - an hour long video so let's go and go to
08:24 - 200 now see if we can handle that there
08:27 - we go obviously we have tons of digits
08:28 - and let's keep going up to maybe 300
08:34 - yep 300 works as well now I want to show
08:37 - you when we get capped off so I'm gonna
08:40 - try a thousand and there we go so we
08:43 - actually do run into an error here now
08:45 - this is more specifically with Python
08:47 - but in other programming languages too
08:49 - you can see this error here so maximum
08:51 - recursion
08:52 - exceeded in comparison so when you try
08:55 - to compare too much and the calculation
08:57 - gets extremely large because of the
08:59 - Fibonacci sequence that's the way it
09:01 - works it actually stops us from doing
09:03 - that but otherwise you can see why this
09:06 - is a lot faster than this by simply
09:10 - adding an extra three or four lines of
09:12 - code now all that being said I hope you
09:16 - learned what recursion is and how to use
09:18 - that if you want me to do another
09:19 - example or another problem leave a
09:21 - comment below we can do some more
09:23 - advanced recursion with something with
09:25 - more than one base case just like this
09:27 - so yeah if you liked the video please
09:29 - like and subscribe and I will see you
09:31 - again in another

Cleaned transcript:

hey guys welcome back to another youtube video in today's video I am going to be talking about a programming technique called recursion now recursion is used to simplify a problem sorry into a base case where it can then be solved now this is extremely useful for solving a lot of problems like the one I'm going to be demonstrating here which is the Fibonacci sequence so calculating the nth Fibonacci sequence or number in that sequence based on just a given input okay so let's get started right now so before I actually talk about recursion let's just understand Fibonacci because that's what I'm going to be doing an example on right now so pretty much a Fibonacci sequence is the nth term is equal to the nth minus one term plus the nth minus two term so to put it simply eight right here which is the sixth term would be equal to the fifth term which would be 5 plus the fourth term which would be 3 so 5 plus 3 equals 8 same thing ok move up here to the eighth term that is equal to the seventh term plus the sixth term which equals again 21 ok fairly simple so now what is recursion and how are we gonna use it to solve this problem so given the nth term what is that value okay so we're gonna be using a function and what recursion is is pretty much calling a function inside of its own function so if you name a function if you call a function num then that means you're calling them inside of num and I'm gonna show an example so that'll be a lot more clear so let's start off by defining a function in this case I'm gonna call it fib and now in the brackets I'm gonna give it one parameter called n which is gonna be the term number now we have to start off by using a base case now this is important for all recursion problems is that you have a base case which is going to return a constant value so our base case here is if n is less than or equal to 2 we need to return return sorry a value of 1 like so now if it's not less than or equal to 2 well what do we need to do exactly what I've stated above and the sequence states so we need to return then the Fibonacci sequence of n minus 1 plus the Fibonacci sequence of n minus 2 like so now this looks extremely simple and that's because it is so if I call try calling now the Fibonacci sequence of 8 what's gonna happen is we're gonna go up here or actually let's use 4 because it's easier to explain we're gonna go up here we're gonna sub n for 4 we're gonna say is 4 less than or equal to no it's not so now we're gonna move here and we're looking for the Fibonacci of 3 plus the Fibonacci of 2 now the Fibonacci of 3 we're gonna call this function again we're gonna move up here the Fibonacci of 3 is that less than or equal to 2 no it's not so we moved down here and we say that's the Fibonacci of 2 plus the Fibonacci of 1 and then with that applies to our base case so it'll be 1 here plus 1 here which will be 2 and now that's just calculated the 3 parts that's only done this first call on the 4 now we move to the Fibonacci of what will be 2 because 4 minus 2 is 2 that applies to our base case so that'll be 1 we have already calculated this value which is 2 2 plus 1 equals 3 and that is the value here for the fourth term so I'll show you it working when I run the program like this and I forgot to print it to the screen ok so now I will print it to the screen like so there we go we get a value of 3 now this is all great but I want to show you a problem that happens so we're gonna run the Fibonacci of 10 you'll see it runs pretty quickly and up to about 20 everything's running pretty smoothly now what happens if I try to put in a larger number like maybe 35 well the program takes forever so I know that one wasn't not extremely long but think about that timing so that took about maybe five seconds to get us that number what if I go to 38 well now we are continually loading as the time to calculate has got exponentially longer and this is the problem with recursion on a basic level so you can see we just got our answer now which is kind of unacceptable on for this program so how can we fix this and how can we make this run a lot faster and why is it running so slow well the reason it's running so slow is because we are constantly recalculating answers and every time we have to do addition that uses up our processor and makes it take a lot longer to calculate the answer so for example if we're calculating the fibonacci of 38 that means we're gonna calculate the fibonacci of 37 here which is then gonna ask us for 36 and then we're gonna go over here we're gonna do the 36 again and same thing with all the other numbers below that now that is extremely inefficient and that is why we're gonna learn how to write a recursion statement which is a lot more efficient and takes constant time rather than exponential time meaning that every single term we add is gonna take an extra say 0.1 seconds rather than exponentially increasing per term so let's start off this is new so we have to make something called a what do you call it I'm sorry a hash table or a dictionary in Python so in Python it's called a dictionary so let's just say nums is equal to and then our little squiggly brackets like that curly braces whatever you want to call them now we're gonna make a new function in this case I'm gonna call it fit one same thing same parameters here with N and then we're going to start off the exact same with our with our base case so we're going to take if n is less than or equal to two and it's less than or equal to two we are going to return a value of one now here is where things change just a little bit so like I mentioned before we don't want to recalculate an answer if we've already calculated it so what we need to do here is we need to check if we've already calculated that answer so if N in nums meaning is that inside of our table or inside of our dictionary then we're simply gonna return the value that's in which is a lot faster than recalculating that value so then we're gonna return nums of n like that and now here this means we have not already calculated the value so we do have to go ahead and do the recursion to calculate that so otherwise we need to in this case we're gonna set a number I'm just we're gonna set a variable say num is equal to and then the same thing that we typed here so this our recursive call Fibonacci of n minus 1 plus n minus 2 we're going to add this to our table so nums n is equal to num and then we are going to return none just like that now I went a little fast so we'll just recap it really quickly what we do is we first check for our base case if we have that base case we return 1 otherwise we see have we already calculated that value so if we already calculated the 7th term yes we have okay so let's return it now let's say we have not calculated that value we go down here we do the same thing we did up here and we do our recursive call to calculate that value we store that value under the key N and then we return that value so now let's try running this so again sorry I just need to change this to fib one so we're not referencing this function up here which would defeat the whole purpose of doing this and now I need to print out fib 1 of let's do a hundred and let's see how long that takes and there you go almost instantly we have that printed to our screen whereas if I tried to do fib 100 running this function up here well this would be an hour long video so let's go and go to 200 now see if we can handle that there we go obviously we have tons of digits and let's keep going up to maybe 300 yep 300 works as well now I want to show you when we get capped off so I'm gonna try a thousand and there we go so we actually do run into an error here now this is more specifically with Python but in other programming languages too you can see this error here so maximum recursion exceeded in comparison so when you try to compare too much and the calculation gets extremely large because of the Fibonacci sequence that's the way it works it actually stops us from doing that but otherwise you can see why this is a lot faster than this by simply adding an extra three or four lines of code now all that being said I hope you learned what recursion is and how to use that if you want me to do another example or another problem leave a comment below we can do some more advanced recursion with something with more than one base case just like this so yeah if you liked the video please like and subscribe and I will see you again in another
