With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome back to
00:10 - another video in this django and react
00:12 - tutorial series
00:13 - in this video what we're going to be
00:14 - doing is creating the create room
00:16 - page so we'll actually be filling out
00:18 - all of the annoying html that we need
00:20 - and all the components to make this look
00:22 - half decent
00:23 - we'll then be hooking this up to the
00:24 - back end and making it so that the user
00:26 - can actually you know press a button
00:27 - deal with some nice
00:28 - front-end ui and form and then have a
00:30 - room created based on the information
00:32 - they give
00:33 - to the form so that's about it i will
00:35 - mention that i'm gonna go
00:36 - slightly fast through the actual kind of
00:38 - html creation process
00:40 - because that just takes a really long
00:42 - time and it's really annoying to explain
00:44 - every single possible kind of attribute
00:46 - and thing that we can pass
00:47 - to all of these components i will note
00:50 - right now we are using material ui for
00:52 - pretty much
00:52 - all of this creation so if you have a
00:54 - question about something that i'm using
00:56 - or why i did something
00:57 - you can probably find it online really
00:59 - easily just google material ui
01:01 - plus whatever the question is that you
01:03 - have or whatever the i guess component
01:05 - is that i'm using
01:06 - but to start we're going to import all
01:07 - of the components that we need to use so
01:08 - we're going to say
01:09 - import button from and then we're going
01:11 - to say at material ui slash poor slash
01:14 - button there's quite a few here so i
01:16 - will just type them all out but let's go
01:18 - import grid
01:19 - from and then at material ui core
01:22 - slash grid we also need typography so
01:25 - we're going to import
01:26 - typography from and then at material ui
01:30 - slash core slash typography next we're
01:33 - going to import text fields we're going
01:34 - to say import
01:35 - text field from
01:39 - at material ui core slash text field
01:42 - we then need form helper text we're
01:44 - going to say import
01:46 - form helper text from apps material ui
01:50 - core slash you guessed it form helper
01:53 - text
01:54 - and we have to keep going we're going to
01:56 - import form
01:58 - control from at material ui
02:01 - core form control and then we're going
02:04 - to import
02:05 - link from react router dom
02:09 - this one is different make sure you
02:10 - catch that we've used that before
02:12 - and then three more left we're gonna
02:14 - import radio from
02:16 - at material ui slash core slash
02:19 - radio and two more imports
02:23 - radio group from
02:27 - at material ui slash core slash
02:30 - radio group and finally we are going to
02:33 - import
02:34 - form control label
02:38 - if you spell label correctly from
02:41 - ats material ui core
02:44 - slash form control label okay so now we
02:48 - have all of our imports
02:49 - those are always annoying to type out
02:50 - but usually you don't do them all at
02:51 - once like i just did
02:53 - either way now let's actually go ahead
02:54 - and just start creating this web page
02:56 - uh the reason for that is we'll just
02:58 - make all of the actual like html dom
03:00 - components i'll kind of show you halfway
03:02 - through like refreshing the web page and
03:03 - all of that
03:04 - and then we'll hook up all the logic in
03:05 - the back end because it will make more
03:06 - sense to do that once everything is
03:08 - created
03:08 - although the first thing i am going to
03:09 - define and we'll use this in just one
03:11 - second
03:11 - is default votes equals two the reason
03:15 - for that is we're going to need a value
03:17 - for the default amount of votes to show
03:19 - on the ui and it just makes sense to
03:20 - make a variable for that so
03:22 - now we're going to return from our
03:24 - render a grid
03:26 - and i'll discuss how the grid works once
03:28 - i finish typing this out i'm going to
03:29 - say that's a container
03:31 - and spacing equals one
03:34 - so a grid is kind of the standard thing
03:37 - used in material ui to actually align
03:39 - items either horizontally or vertically
03:41 - if you know anything about css it uses
03:43 - the css flexbox
03:45 - and essentially by default when we
03:47 - define a grid like this
03:48 - it's a container and it will hold and
03:50 - align things vertically in a kind of
03:52 - column structure
03:53 - the spacing says how much space should
03:56 - we put between the items in the grid
03:58 - 1 means 8 pixels 2 means 16 3 means 24.
04:02 - the formula is you multiply this number
04:04 - by 8 and well that is how many pixels of
04:06 - spacing you're going to have in the grid
04:07 - so you'll see how it works when we start
04:09 - going through but that's the basics of
04:10 - the grid
04:11 - now the upper level grid is always a
04:13 - container and then you have grid items
04:15 - within which will be aligned based on
04:17 - what kind of properties you give them so
04:19 - now we're going to make a grid item
04:20 - so i'm going to say grid item xs equals
04:23 - 12 which i'll describe in a second
04:25 - and i'm going to say align equals center
04:28 - and then we end the grid like that so
04:30 - there we go we just created our first
04:31 - grid
04:32 - with an item now this item is actually
04:34 - something that will be inside of the
04:35 - contained grid right or the
04:37 - grid container xs equals 12 essentially
04:40 - there's a bunch of break points on our
04:42 - grid so there's extra small
04:43 - small medium large and extra large what
04:46 - that defines is the width
04:48 - of the screen so when we take an html
04:51 - window i guess or take like a web
04:53 - browser and you shrink it and make it
04:54 - bigger notice the elements on the page
04:56 - move around
04:57 - this is pretty much just telling us what
04:59 - the width of this grid should be
05:01 - when the size of it is extra small now
05:03 - since we're not going to define
05:05 - a small which we could with i think sm
05:07 - and a large and all these other ones
05:09 - that we could
05:10 - do this just means that at all points in
05:12 - time we're going to make
05:13 - this grid item as wide as possible so if
05:16 - you wanted to fill
05:17 - the entire width of the grid you make
05:19 - this 12. 12 is just the maximum number
05:22 - that you can put for these values i know
05:24 - this is probably not totally clear for
05:25 - you guys
05:26 - but just experiment and make this value
05:28 - six and you will see the difference
05:29 - versus twelve
05:30 - six will make this half of the width of
05:32 - the grid where we want it to be twelve
05:34 - so it fills the entire thing
05:36 - uh this is useful if you're trying to
05:37 - align multiple things on the same
05:39 - kind of row i guess you can have you
05:42 - know say xs equals three and then you
05:43 - have four items that will be perfectly
05:45 - aligned together because they only take
05:47 - up
05:47 - three grid spaces where 12 is the
05:49 - maximum that you can have
05:50 - so anyways you'll see that as we go
05:52 - through but that's the first thing
05:54 - next we're going to make a title so
05:55 - we're going to say typography
05:57 - it's not going to be component i don't
05:59 - think actually sorry yeah it is going to
06:01 - be component
06:02 - component is going to be equal to h4 and
06:05 - the variant is going to be equal to h4
06:07 - typography is just like a nicely styled
06:09 - header essentially from material ui
06:11 - then inside of here we'll simply type
06:13 - our header which is going to be create
06:14 - a room like so there we go that's our
06:17 - first
06:18 - grid item let me go to the web browser i
06:20 - will refresh and show you what it looks
06:21 - like
06:22 - so i am in my web browser but what i'm
06:24 - showing you is not the website we just
06:25 - created instead i am talking to you
06:27 - about the sponsor of this video and this
06:29 - series
06:30 - which is algo expert now as i've
06:32 - mentioned many times algo expert is the
06:33 - platform that i use to ace my technical
06:36 - coding interviews
06:37 - at the time of filming this it has a
06:38 - hundred coding interview questions
06:40 - and you can see i have completed 56 of
06:42 - them most of them being in the medium
06:44 - and easy category but some of them in
06:45 - the hard and some in
06:47 - the very heart algo expert is a great
06:49 - platform to just brush up on your coding
06:51 - skills or again prepare for the coding
06:53 - interviews
06:54 - and if you want to get a discount on the
06:55 - platform then check it out and use the
06:57 - discount code
06:58 - tech with tim from the link in the
06:59 - description so there we go we have
07:01 - create a room that is what the
07:03 - typography header looks like that we
07:05 - just created
07:05 - notice it's not centered or anything
07:07 - like that don't worry about that i'll
07:08 - show you how we can get that to work in
07:10 - one second so actually that reminds me i
07:12 - forgot oh no i did add it here align
07:14 - center we do need a line center i forget
07:16 - if i mentioned that but this is pretty
07:17 - much just telling us hey
07:18 - take all of our grid items and align
07:20 - them in the center pretty
07:22 - straightforward
07:22 - so now we're going to copy this grid
07:24 - item and we're going to make another one
07:25 - so that we'll have something that goes
07:26 - below it
07:27 - so grid we're going to leave item xs
07:29 - equals 12 and align center we're not
07:31 - going to use typography though
07:32 - what we're going to have here is radio
07:34 - buttons that will allow us to select
07:36 - the control of the playback state for
07:39 - our guest so whether they can play the
07:40 - music or whether they cannot play it
07:42 - right or so is play pause or no control
07:45 - so to start we're going to say form
07:47 - control
07:48 - and we're going to say component and no
07:51 - it shouldn't be equal to h4 it should be
07:53 - equal to
07:54 - field set like that and then we're going
07:56 - to close the form control tag
07:59 - this is where we're actually going to
08:00 - put the form funny enough and then we're
08:02 - going to start with some form helper
08:03 - text
08:04 - so we're going to say form helper text
08:06 - we will close the form helper text
08:08 - we'll then make a div in the div we're
08:11 - going to say
08:11 - align equals center and now we're going
08:14 - to put some text
08:15 - which will be kind of the heading of
08:17 - this section so i'm going to say guest
08:20 - control of playback state
08:24 - let's save that and now let's just do a
08:26 - quick refresh and see what we're getting
08:28 - we get create a room and then guest
08:29 - control playback state and notice this
08:31 - is like kind of nicely
08:32 - it's more centered now than it was
08:34 - before essentially and this is centered
08:35 - within the grid so is this all right so
08:38 - now that we have that
08:39 - uh let's make some more things inside of
08:41 - this form control so that's obviously
08:42 - the header
08:43 - now we want the radio buttons so to make
08:46 - the radio buttons we're going to make a
08:47 - radio group
08:49 - so we're going to say radio group we're
08:50 - going to say row meaning we want our
08:52 - radio buttons to be aligned in a row
08:54 - i'm going to say the default value is
08:57 - going to be equal to
08:59 - and we'll make that equal to true there
09:01 - we go we'll close the radio group
09:03 - and now we're going to define two radio
09:05 - buttons inside of this group
09:07 - so to define a radio button what we're
09:09 - going to do is we're actually going to
09:10 - say
09:10 - form label control
09:13 - and the reason we're doing this is
09:15 - because we actually want to have a label
09:17 - for our radio buttons and by default
09:18 - they don't have a label
09:20 - so we're using this kind of wrapper
09:21 - almost uh for our radio button but
09:23 - anyways we're going to say form
09:25 - label control and then we're going to
09:26 - say value equals
09:28 - and we're going to set the default value
09:30 - or the first value to be equal to true
09:32 - now what i'm going to do here is have
09:33 - two radio buttons one with the value of
09:35 - true one with the value false
09:36 - true denoting yes the users will have
09:38 - control and false denoting no they don't
09:40 - have control
09:41 - then i'm going to say control funny
09:43 - enough is equal to and this is going to
09:44 - be equal to a radio button tag so i'm
09:46 - going to say radio
09:48 - color and color will be equal to
09:51 - primary like that so let's save that and
09:54 - this is pretty much saying okay we're
09:55 - gonna have a form label control
09:57 - this is actually what the component is
09:58 - that we're gonna render and then we'll
09:59 - have a label
10:00 - either below or some orientation around
10:02 - that so now we need to define
10:04 - the label we're going to say label
10:05 - equals and this will be play
10:07 - slash pause so that's the level of
10:08 - control the guest will have and then
10:10 - we'll say label
10:12 - i believe it's uh placement yeah label
10:14 - placement is going to be equal to
10:16 - bottom like that alright so now that we
10:19 - have that
10:20 - let's simply copy this radio button and
10:21 - paste it below
10:23 - so now we have another form control this
10:25 - is going to be a value
10:26 - false like that instead of play slash
10:29 - pause we'll say this is
10:31 - no control and we can even change the
10:32 - color of our radio button to be the
10:34 - secondary color not the primary color
10:36 - primary is kind of like a nice blue
10:38 - secondary is almost like a red
10:40 - you'll see it when we actually render
10:42 - this so now let's just refresh the
10:43 - browser
10:44 - and uh what is happening here form label
10:47 - control is not defined
10:49 - so i probably just typed it wrong uh
10:51 - form label control
10:53 - form control label oh well that would be
10:55 - why so i guess it is form control label
10:57 - not
10:57 - form label control so form control
11:02 - label i bet some of you guys probably
11:04 - caught that when i was typing it out
11:06 - and form control label okay so let's
11:08 - refresh now
11:09 - and there we go we got our two radio
11:11 - buttons notice that we can only select
11:12 - one of them at a time and those are the
11:14 - two colors this is primary
11:15 - this is secondary okay now that we have
11:18 - that
11:18 - what we're going to add is a text field
11:20 - and the text field will be where we can
11:22 - actually insert the amount of votes that
11:23 - we need
11:24 - to move on to the next song so let's
11:25 - copy this header of the grid tag
11:28 - or the beginning of the grid tag i guess
11:30 - should automatically close it for us
11:31 - nice now inside of here we'll add that
11:34 - text field
11:35 - so we'll start with form control
11:38 - then inside of here we'll create a text
11:40 - field so we'll say text field like that
11:43 - and text field is as it states just what
11:45 - we can use to
11:46 - type in text now i don't need to
11:48 - actually have like a separate closing
11:49 - tag i can just do it like that
11:50 - i'm going to say required equals true so
11:53 - yes we do
11:54 - need to type something here we will
11:56 - define an onchange event for this but
11:58 - we're not going to do that right now
11:59 - we're going to say type equals the type
12:02 - of this field is a number field
12:04 - the default value is going to be equal
12:07 - to
12:07 - this dot votes our default votes like
12:11 - that we already defined that above
12:13 - and then i'm going to pass something
12:14 - else in here which is kind of unique but
12:17 - i guess it's good to show
12:18 - and say input props and input props is
12:20 - going to be equal to
12:22 - min colon one what this pretty much says
12:25 - is that the minimum value
12:27 - for this text field is one uh the reason
12:29 - for that is again we don't want votes
12:31 - that are negative right or votes that
12:32 - are zero we only want to have that you
12:33 - want to have a minimum one vote to skip
12:35 - so we put min like that this is just
12:37 - sending in extra props where i i can't
12:39 - just type
12:40 - like min equals one that does not work i
12:42 - need to pass it in the input props
12:44 - uh the reason for two squiggly brackets
12:46 - here is that this accepts an object so
12:48 - we need to pass
12:48 - an actual javascript object all right so
12:51 - now that we have the text field
12:52 - uh let's just add some i guess like a
12:54 - label for it cause we don't have any
12:56 - label
12:57 - so we'll say form helper text like that
13:00 - and then inside of here we'll do a very
13:01 - similar thing we did before we'll say
13:02 - div
13:04 - we'll say a line equals center
13:07 - we'll close the div and then here we'll
13:08 - simply type
13:10 - votes required to
13:14 - skip song all right looking good let's
13:17 - refresh and there we go we get a text
13:19 - field
13:20 - we have these two things here we have
13:22 - you know our labels and all looks nice
13:24 - i do want to align this to though in the
13:26 - middle of the text field so let me show
13:28 - you how we do
13:29 - that inside of input props we're also
13:31 - going to pass a style tag we're going to
13:33 - say style
13:34 - colon that's going to be equal to an
13:36 - object and then inside of here
13:38 - i think i can say text align colon
13:40 - center
13:42 - so let's refresh and let's see and there
13:45 - we go there it is nice and centered so
13:46 - just to remind you
13:47 - that's what i typed right there and that
13:49 - aligned the text in the middle
13:51 - all right now we have that we are
13:52 - getting very close to being done at
13:54 - least for the styling aspect
13:55 - let's copy another grid tag and inside
13:58 - of here let's create some buttons
13:59 - so we want a button to actually you know
14:01 - submit this form then we want a button
14:03 - to go back to the previous page at least
14:05 - i would like that button
14:06 - so we're going to use that button that
14:08 - we already imported above
14:09 - i will say button for this one we'll say
14:12 - create a room
14:14 - for the color of this button uh we'll
14:16 - make this one equal to the secondary
14:17 - color that kind of nice red you'll see
14:19 - that in a second
14:20 - we're going to say the variant of this
14:22 - button is equal to
14:24 - contained and then we will have an on
14:26 - click event
14:27 - uh but we're not going to implement that
14:28 - quite yet so now let's just simply copy
14:31 - that whole grid thing that we did
14:33 - and let's make another one for our back
14:35 - button so now we will simply say
14:36 - back and for this one we can actually
14:39 - implement the logic right now to make
14:40 - this go back to the previous page
14:42 - or go back to the home page so rather
14:44 - than having the color be secondary i'm
14:46 - going to make this color be
14:47 - primary i think that's the color i want
14:50 - at least yeah let's go with primary
14:53 - and then we have variant equals
14:55 - contained yep that's fine
14:56 - then we're going to say 2 and this is
14:58 - going to be the url we want to redirect
14:59 - to when we press this button so i'll say
15:01 - that's equal to forward slash
15:03 - and then i'm going to say that the
15:05 - component for this button
15:07 - and i'll discuss this in a second is
15:08 - actually no come on
15:10 - give me the autocomplete component
15:12 - equals and that's going to be equal to
15:13 - link that's why we imported link from
15:15 - react router above
15:17 - pretty much what this is saying is that
15:18 - this button will act like a link that's
15:20 - why the component is equal to link and
15:21 - we will redirect to slash
15:23 - if we press this button so let's have a
15:25 - quick look at our webpage and see if we
15:26 - messed anything up and there we go we
15:28 - have create a room and back
15:30 - now that i'm looking at it i kind of
15:31 - want to switch the back and create a
15:32 - room color because
15:33 - i just like the created room to be the
15:35 - other color so
15:36 - let's go ahead and do that let's make
15:38 - that primary
15:40 - and let's make that secondary like that
15:44 - okay so there we go now those are
15:45 - switched up my opinion that looks better
15:47 - let's press the back button
15:48 - notice it brings us back to the home
15:50 - page all right so that is it
15:52 - for actually styling and creating kind
15:53 - of the ui we will make it look better
15:56 - later but that's like all i wanted to do
15:57 - for right now
15:58 - and now we will implement kind of the
16:00 - back end logic and all the on click
16:01 - events and all of that
16:03 - so there's many different ways in react
16:04 - that we can pretty much
16:06 - press the create room button grab all of
16:08 - the information from our form and then
16:09 - send it to the back end
16:11 - the way that i'm using is pretty
16:12 - conventional we're going to use react
16:13 - state
16:14 - to keep track of pretty much what is in
16:16 - our form
16:17 - and then whenever we press that button
16:18 - we'll look at the current state that we
16:20 - have up here which we'll define in a
16:22 - second
16:22 - and we'll send that information to the
16:24 - backend so to start i'm going to say
16:26 - this
16:27 - dot state and we're going to set some
16:29 - default state so to start we're going to
16:30 - say guest
16:31 - can pause that's going to be equal to
16:34 - true
16:34 - and then we're going to say votes to
16:37 - skip
16:38 - and that's going to be equal to this dot
16:40 - default votes
16:41 - all right so that is our default state i
16:43 - think i've used state before in this
16:45 - series i might not have though so i will
16:46 - kind of explain as we go
16:48 - pretty much we have this state in react
16:50 - uh if we ever
16:51 - change this state or update the state it
16:53 - automatically refreshes and forces the
16:55 - component to
16:56 - update so what we're gonna do is pretty
16:58 - much say okay
16:59 - when you you know change the radio
17:00 - button or you change what's in that text
17:02 - button
17:03 - we will update the state and then we
17:05 - will show whatever the state is
17:07 - in that text button or sorry in that
17:09 - text field or in that radio button and
17:11 - then when you press create button we'll
17:12 - just
17:13 - create room sorry we have miss speaking
17:14 - all over the place here when you press
17:16 - create room
17:16 - we will look at the current state and we
17:18 - will send that information to the back
17:19 - end to create
17:20 - the room so we need a few methods the
17:23 - first one that i'm going to do is this
17:24 - one is going to be called handle votes
17:26 - change so i'm going to say
17:27 - handle votes
17:31 - votes changed or yeah i guess change
17:33 - changed i don't know what we want to do
17:35 - let's go handle votes change and then
17:37 - this will simply take e
17:39 - which will actually be the object that
17:41 - called this function
17:43 - and then inside of here we're going to
17:44 - say this dot set state this is the
17:46 - method we use when we want to modify the
17:48 - state and react
17:49 - inside of here we open up these curly
17:51 - braces and then we simply just type the
17:53 - i guess
17:54 - key of what we want to update so here
17:56 - we'll simply say votes to skip
17:58 - and that will be equal to this or sorry
18:00 - not this
18:01 - e dot target dot value
18:05 - now in short what this will do is get
18:07 - the object that called this
18:09 - function which should be in our case the
18:11 - text field
18:12 - it will then get the value from that
18:13 - text field and just put that here for
18:15 - votes to skip
18:16 - okay so that's pretty straightforward
18:17 - hopefully that makes sense now let's
18:19 - have another method
18:20 - and this one is going to be called
18:22 - handle guest can pause change
18:25 - so kind of a mouthful but handle guest
18:28 - can pause change and we're going to do
18:31 - literally the same thing inside of here
18:32 - we're going to take e
18:34 - and we're going to say this dot set
18:37 - state and inside of here we're going to
18:39 - say
18:40 - guest can pause and this is actually
18:42 - going to be equal to a little bit of a
18:44 - different one that we just wrote where
18:45 - we say e
18:46 - dot target.value equals equals equals
18:48 - true because remember the default values
18:50 - are strings
18:51 - and we're going to say question mark if
18:52 - that is the case we'll make that true
18:54 - otherwise colon will make that false so
18:58 - pretty much this is saying
18:59 - hey if this value is equal to the string
19:01 - true then
19:02 - make what is here true otherwise make it
19:05 - false so this is just
19:06 - i actually don't know the official name
19:07 - of this but it's like an inline if
19:09 - statement in javascript
19:10 - so now that we have these two things
19:12 - let's hook those up
19:14 - to actually our appropriate things
19:15 - inside of here so let's go to
19:18 - our radio group and on radio group let's
19:22 - go on change and that's going to be
19:24 - equal to
19:25 - this dot handle and i believe this
19:28 - should be guess can pause change
19:30 - i don't need to add the brackets because
19:32 - it will just call that function
19:34 - when an on change event occurs an on
19:36 - change event will just be you press
19:38 - the other radio button essentially all
19:39 - right so we have the on change there now
19:41 - let's go to text field
19:42 - and let's say on change is equal to
19:46 - and you can probably guess what this one
19:47 - is going to be it's going to be this dot
19:49 - votes
19:50 - handle votes change so i even typed
19:52 - around but this dot handle votes change
19:53 - so whenever we modify this text field we
19:55 - will update the state
19:57 - and now what we're going to do since
19:58 - that should be good is add
20:00 - actually an event for when we press this
20:02 - create a room button or add a function i
20:04 - guess that we can call so now
20:06 - another one we'll say handle room
20:09 - button pressed in this one we're
20:12 - actually not going to take e and i'll
20:14 - show you why
20:14 - in one second and we're going to go here
20:17 - and actually bind this method to the
20:18 - class now you don't have to really know
20:20 - what that means i will explain it though
20:21 - we're going to say this dot handle
20:24 - or is it what did i even type here
20:27 - handle room button change
20:29 - handle room button
20:32 - clicked or was it pressed pressed come
20:35 - on i can't even remember
20:36 - two seconds ago so handle room button
20:38 - pressed is equal to
20:40 - this dot handle room button pressed
20:43 - and that's going to be dot bind to this
20:47 - now this seems strange but all this is
20:49 - doing is simply binding this method to
20:51 - the class
20:52 - so that inside of this method we have
20:54 - access to this keyword
20:56 - if you don't do this and you have a
20:58 - method that you're calling from inside
20:59 - of your dom elements here
21:01 - it won't have access to this keyword so
21:03 - if you ever want to have access to
21:04 - this keyword from any of these methods
21:06 - you're using as like on like event
21:08 - changes essentially
21:09 - i need to bind them like that so anyways
21:12 - now we have handle
21:13 - room button pressed it is binded to the
21:15 - class with this so i'll have access to
21:16 - that from inside
21:17 - and now we're going to need to call that
21:19 - method from the on click of that button
21:21 - so let's go
21:22 - here to our button and let's go
21:26 - on click and that's going to be equal to
21:29 - this dot handle room button clicked
21:33 - or why does it keep giving me the clicks
21:35 - i just assume that that is correct but
21:36 - no it should be handle room button
21:38 - pressed
21:39 - all right now for now inside of here
21:41 - just make sure this is working we can
21:42 - just console.log
21:44 - this dot state and that should just show
21:46 - us our current state and then we can see
21:48 - if everything's working fine so let's go
21:49 - to the browser
21:50 - let's refresh all looks good let's so
21:52 - create a room and we get
21:54 - guest can pause is true votes to skip is
21:56 - 2. let's modify this
21:57 - and oh we got something wrong cannot
21:59 - read property set state of
22:01 - undefined interesting so what does that
22:04 - mean
22:05 - oh so this is an interesting one so
22:07 - inside of handle guess pause can change
22:09 - and handle votes change i'm trying to
22:10 - use
22:11 - this keyword now notice what i just said
22:13 - we're not going to be able to use
22:14 - this keyword unless we bind the method
22:15 - to the class and guess what i didn't do
22:17 - bind these two methods to the class so
22:19 - actually a good error to run into a
22:20 - rookie mistake
22:21 - so let's fix this i'm going to say this
22:23 - dot handle votes
22:24 - change equals this dot handle votes
22:28 - change
22:28 - dot bind this okay and then we'll do the
22:32 - same thing
22:32 - this dot handle
22:35 - that equals this dot handle guess pause
22:38 - change
22:40 - dot bind to this
22:43 - okay so let's go to the browser now
22:44 - let's refresh all right let's go to
22:47 - four create a room and notice votes to
22:49 - skip is four
22:50 - and the value is true now let's go and
22:52 - do this to be seven
22:53 - boom that's true let's make that there
22:55 - there we go we get false
22:56 - so our state is updating fine all seems
22:59 - to be working well
23:00 - uh and now what we need to do is just
23:01 - hook this up to the back end
23:03 - so now let's go inside of handle room
23:05 - button pressed instead of
23:06 - console.logging
23:08 - let's actually send a request to the
23:10 - endpoint we created previously
23:12 - that will allow us to actually create
23:14 - the new room with the information from
23:16 - this form
23:17 - so this is going to be a little bit of
23:19 - stuff just follow along with here
23:20 - we're going to say const request options
23:24 - is equal to and then inside of here
23:26 - we're going to say the method is equal
23:28 - to
23:28 - what is it well it's going to be equal
23:29 - to a post method we're going to say
23:31 - headers and that's going to be first of
23:34 - all as a string
23:36 - content i think i had that spelled right
23:38 - actually
23:39 - content hyphen type and that will be
23:42 - colon and equal to application slash
23:46 - json so this is pretty much just telling
23:48 - us what type of content is coming in
23:50 - this isn't always required but in a post
23:52 - request usually it's a good idea to add
23:53 - it so we're going to say we're sending
23:55 - application json content and then we're
23:57 - going to say the body of our request
23:59 - is going to be equal to json dot
24:02 - stringify like that and inside of here
24:05 - we're simply going to put a javascript
24:07 - object that will be converted into a
24:08 - json string that we can send
24:10 - so first we'll say votes to skip
24:13 - and that will be equal to this dot state
24:16 - dot votes to skip and then we'll say
24:21 - guest can pause and that's going to be
24:24 - equal to
24:24 - this dot state dot
24:28 - guest can pause all right so now that we
24:30 - have that this will pretty much just
24:31 - take
24:32 - from our state whatever the value is and
24:34 - send that uh we'll it'll be part of the
24:36 - request option so we'll send it when we
24:37 - send the actual request
24:39 - okay so hopefully that's all good uh now
24:41 - what we're gonna do is first of all add
24:42 - a semicolon there
24:44 - and we're gonna make a fetch request so
24:45 - we're going to say fetch
24:47 - and we're going to fetch this to where
24:48 - well it should be to slash api
24:51 - slash create room i believe that's the
24:53 - end point i set up
24:54 - we're also going to pass the request
24:56 - options in this fetch request
24:58 - and then we're going to set a dot then
24:59 - i'll discuss what this does in a second
25:01 - we're going to say
25:02 - response and that's equal to response
25:06 - dot json so pretty much what i just did
25:09 - here is i said okay i want to send a
25:11 - request
25:12 - to localhost right or whatever this
25:15 - is running on whatever react is running
25:16 - on to api
25:18 - create room i'm gonna send it with the
25:20 - request options which is gonna have the
25:21 - payload which is my body it's gonna have
25:23 - the type being post
25:24 - and the headers of the content type and
25:26 - then i'm going to say okay
25:28 - once we get a response that's what this
25:30 - dot then is saying so once we get a
25:32 - response essentially
25:33 - let's take that response let's convert
25:35 - that response into json
25:37 - and then after that we're going to say
25:39 - okay
25:40 - now let's take the data and let's do
25:42 - something with the data
25:44 - well what are we going to do with the
25:45 - data for now i'm just going to simply
25:47 - console.log
25:48 - it just so we can see what it looks like
25:50 - but pretty much we're saying
25:52 - take the response convert it into a json
25:54 - object and then take the data
25:56 - which will be this response.json object
25:58 - and print it out but you'll see that
25:59 - we'll get all of the
26:01 - things relating to the room in this
26:03 - response and then well we can do
26:04 - something with it but that's probably
26:05 - going to be in the next video
26:06 - anyways let's have a look here let's go
26:09 - ahead and refresh this
26:10 - and let's just send a create room right
26:12 - now so we send that and 500
26:15 - internal server errors let's see what
26:16 - the error is here let's go have a look
26:19 - at our server all right so having a look
26:22 - at this error here i've just poking
26:23 - around to make sure
26:24 - i wasn't getting too lost on the video
26:25 - um it's saying not no constraint failed
26:28 - uh
26:28 - room guest can pause so pretty much what
26:31 - this is saying
26:31 - is that we didn't get the information
26:33 - that we needed in the request
26:35 - and so not null constraint is not
26:36 - satisfied because well it was null when
26:38 - we tried to create the object
26:39 - uh what that means is that we just have
26:41 - to rename this
26:42 - these fields right here to actually have
26:44 - underscore so i'm going to say votes
26:45 - underscore 2 underscore skip
26:49 - and then i'm going to say guest
26:50 - underscore can
26:52 - underscore pause the reason for this is
26:55 - that these field names
26:56 - need to match what i'm looking for from
26:58 - my server so here
27:00 - if i go to views.pi oh it actually it
27:02 - should be getting yeah just getting the
27:03 - underscore version so guess can pause in
27:05 - votes to skip
27:06 - so i need to make sure that my data is
27:07 - is matching that essentially
27:09 - before remember i had the camel case
27:11 - instead of the snake case so i just
27:12 - switched it to snake case now hopefully
27:13 - this should work
27:14 - i haven't tested this but let's give it
27:16 - a shot let's refresh
27:18 - and let's go create a room and notice
27:20 - that works so we actually get a room now
27:22 - and says okay the code is this that's
27:24 - the host and guest composite is true
27:26 - votes to skip is 2 dot dot
27:28 - all right now let's try to do it again
27:30 - with 4 votes when we do that have a look
27:32 - we actually end up if
27:34 - i can make this full screen we have the
27:35 - same code same host
27:37 - votes the skip has changed and guess to
27:39 - pause is what it was
27:40 - before all right so that is pretty much
27:42 - it for
27:43 - this video so that will show you how to
27:45 - send a post request
27:46 - from the front end so now we're going to
27:48 - communicate with the back end doing
27:49 - something similar to this
27:51 - how we actually make kind of a nice
27:52 - looking ui in the next video we'll clean
27:55 - this up a bit
27:55 - i will actually talk about what to do
27:57 - next so now that we have that room
27:58 - created
27:59 - kind of how we can redirect the user
28:00 - around and yeah that will be
28:02 - what we're doing in the next video so
28:04 - hopefully you guys enjoyed if you did
28:05 - make sure you leave a like
28:06 - subscribe to the channel and of course i
28:07 - will see you again in another video

Cleaned transcript:

hello everybody and welcome back to another video in this django and react tutorial series in this video what we're going to be doing is creating the create room page so we'll actually be filling out all of the annoying html that we need and all the components to make this look half decent we'll then be hooking this up to the back end and making it so that the user can actually you know press a button deal with some nice frontend ui and form and then have a room created based on the information they give to the form so that's about it i will mention that i'm gonna go slightly fast through the actual kind of html creation process because that just takes a really long time and it's really annoying to explain every single possible kind of attribute and thing that we can pass to all of these components i will note right now we are using material ui for pretty much all of this creation so if you have a question about something that i'm using or why i did something you can probably find it online really easily just google material ui plus whatever the question is that you have or whatever the i guess component is that i'm using but to start we're going to import all of the components that we need to use so we're going to say import button from and then we're going to say at material ui slash poor slash button there's quite a few here so i will just type them all out but let's go import grid from and then at material ui core slash grid we also need typography so we're going to import typography from and then at material ui slash core slash typography next we're going to import text fields we're going to say import text field from at material ui core slash text field we then need form helper text we're going to say import form helper text from apps material ui core slash you guessed it form helper text and we have to keep going we're going to import form control from at material ui core form control and then we're going to import link from react router dom this one is different make sure you catch that we've used that before and then three more left we're gonna import radio from at material ui slash core slash radio and two more imports radio group from at material ui slash core slash radio group and finally we are going to import form control label if you spell label correctly from ats material ui core slash form control label okay so now we have all of our imports those are always annoying to type out but usually you don't do them all at once like i just did either way now let's actually go ahead and just start creating this web page uh the reason for that is we'll just make all of the actual like html dom components i'll kind of show you halfway through like refreshing the web page and all of that and then we'll hook up all the logic in the back end because it will make more sense to do that once everything is created although the first thing i am going to define and we'll use this in just one second is default votes equals two the reason for that is we're going to need a value for the default amount of votes to show on the ui and it just makes sense to make a variable for that so now we're going to return from our render a grid and i'll discuss how the grid works once i finish typing this out i'm going to say that's a container and spacing equals one so a grid is kind of the standard thing used in material ui to actually align items either horizontally or vertically if you know anything about css it uses the css flexbox and essentially by default when we define a grid like this it's a container and it will hold and align things vertically in a kind of column structure the spacing says how much space should we put between the items in the grid 1 means 8 pixels 2 means 16 3 means 24. the formula is you multiply this number by 8 and well that is how many pixels of spacing you're going to have in the grid so you'll see how it works when we start going through but that's the basics of the grid now the upper level grid is always a container and then you have grid items within which will be aligned based on what kind of properties you give them so now we're going to make a grid item so i'm going to say grid item xs equals 12 which i'll describe in a second and i'm going to say align equals center and then we end the grid like that so there we go we just created our first grid with an item now this item is actually something that will be inside of the contained grid right or the grid container xs equals 12 essentially there's a bunch of break points on our grid so there's extra small small medium large and extra large what that defines is the width of the screen so when we take an html window i guess or take like a web browser and you shrink it and make it bigger notice the elements on the page move around this is pretty much just telling us what the width of this grid should be when the size of it is extra small now since we're not going to define a small which we could with i think sm and a large and all these other ones that we could do this just means that at all points in time we're going to make this grid item as wide as possible so if you wanted to fill the entire width of the grid you make this 12. 12 is just the maximum number that you can put for these values i know this is probably not totally clear for you guys but just experiment and make this value six and you will see the difference versus twelve six will make this half of the width of the grid where we want it to be twelve so it fills the entire thing uh this is useful if you're trying to align multiple things on the same kind of row i guess you can have you know say xs equals three and then you have four items that will be perfectly aligned together because they only take up three grid spaces where 12 is the maximum that you can have so anyways you'll see that as we go through but that's the first thing next we're going to make a title so we're going to say typography it's not going to be component i don't think actually sorry yeah it is going to be component component is going to be equal to h4 and the variant is going to be equal to h4 typography is just like a nicely styled header essentially from material ui then inside of here we'll simply type our header which is going to be create a room like so there we go that's our first grid item let me go to the web browser i will refresh and show you what it looks like so i am in my web browser but what i'm showing you is not the website we just created instead i am talking to you about the sponsor of this video and this series which is algo expert now as i've mentioned many times algo expert is the platform that i use to ace my technical coding interviews at the time of filming this it has a hundred coding interview questions and you can see i have completed 56 of them most of them being in the medium and easy category but some of them in the hard and some in the very heart algo expert is a great platform to just brush up on your coding skills or again prepare for the coding interviews and if you want to get a discount on the platform then check it out and use the discount code tech with tim from the link in the description so there we go we have create a room that is what the typography header looks like that we just created notice it's not centered or anything like that don't worry about that i'll show you how we can get that to work in one second so actually that reminds me i forgot oh no i did add it here align center we do need a line center i forget if i mentioned that but this is pretty much just telling us hey take all of our grid items and align them in the center pretty straightforward so now we're going to copy this grid item and we're going to make another one so that we'll have something that goes below it so grid we're going to leave item xs equals 12 and align center we're not going to use typography though what we're going to have here is radio buttons that will allow us to select the control of the playback state for our guest so whether they can play the music or whether they cannot play it right or so is play pause or no control so to start we're going to say form control and we're going to say component and no it shouldn't be equal to h4 it should be equal to field set like that and then we're going to close the form control tag this is where we're actually going to put the form funny enough and then we're going to start with some form helper text so we're going to say form helper text we will close the form helper text we'll then make a div in the div we're going to say align equals center and now we're going to put some text which will be kind of the heading of this section so i'm going to say guest control of playback state let's save that and now let's just do a quick refresh and see what we're getting we get create a room and then guest control playback state and notice this is like kind of nicely it's more centered now than it was before essentially and this is centered within the grid so is this all right so now that we have that uh let's make some more things inside of this form control so that's obviously the header now we want the radio buttons so to make the radio buttons we're going to make a radio group so we're going to say radio group we're going to say row meaning we want our radio buttons to be aligned in a row i'm going to say the default value is going to be equal to and we'll make that equal to true there we go we'll close the radio group and now we're going to define two radio buttons inside of this group so to define a radio button what we're going to do is we're actually going to say form label control and the reason we're doing this is because we actually want to have a label for our radio buttons and by default they don't have a label so we're using this kind of wrapper almost uh for our radio button but anyways we're going to say form label control and then we're going to say value equals and we're going to set the default value or the first value to be equal to true now what i'm going to do here is have two radio buttons one with the value of true one with the value false true denoting yes the users will have control and false denoting no they don't have control then i'm going to say control funny enough is equal to and this is going to be equal to a radio button tag so i'm going to say radio color and color will be equal to primary like that so let's save that and this is pretty much saying okay we're gonna have a form label control this is actually what the component is that we're gonna render and then we'll have a label either below or some orientation around that so now we need to define the label we're going to say label equals and this will be play slash pause so that's the level of control the guest will have and then we'll say label i believe it's uh placement yeah label placement is going to be equal to bottom like that alright so now that we have that let's simply copy this radio button and paste it below so now we have another form control this is going to be a value false like that instead of play slash pause we'll say this is no control and we can even change the color of our radio button to be the secondary color not the primary color primary is kind of like a nice blue secondary is almost like a red you'll see it when we actually render this so now let's just refresh the browser and uh what is happening here form label control is not defined so i probably just typed it wrong uh form label control form control label oh well that would be why so i guess it is form control label not form label control so form control label i bet some of you guys probably caught that when i was typing it out and form control label okay so let's refresh now and there we go we got our two radio buttons notice that we can only select one of them at a time and those are the two colors this is primary this is secondary okay now that we have that what we're going to add is a text field and the text field will be where we can actually insert the amount of votes that we need to move on to the next song so let's copy this header of the grid tag or the beginning of the grid tag i guess should automatically close it for us nice now inside of here we'll add that text field so we'll start with form control then inside of here we'll create a text field so we'll say text field like that and text field is as it states just what we can use to type in text now i don't need to actually have like a separate closing tag i can just do it like that i'm going to say required equals true so yes we do need to type something here we will define an onchange event for this but we're not going to do that right now we're going to say type equals the type of this field is a number field the default value is going to be equal to this dot votes our default votes like that we already defined that above and then i'm going to pass something else in here which is kind of unique but i guess it's good to show and say input props and input props is going to be equal to min colon one what this pretty much says is that the minimum value for this text field is one uh the reason for that is again we don't want votes that are negative right or votes that are zero we only want to have that you want to have a minimum one vote to skip so we put min like that this is just sending in extra props where i i can't just type like min equals one that does not work i need to pass it in the input props uh the reason for two squiggly brackets here is that this accepts an object so we need to pass an actual javascript object all right so now that we have the text field uh let's just add some i guess like a label for it cause we don't have any label so we'll say form helper text like that and then inside of here we'll do a very similar thing we did before we'll say div we'll say a line equals center we'll close the div and then here we'll simply type votes required to skip song all right looking good let's refresh and there we go we get a text field we have these two things here we have you know our labels and all looks nice i do want to align this to though in the middle of the text field so let me show you how we do that inside of input props we're also going to pass a style tag we're going to say style colon that's going to be equal to an object and then inside of here i think i can say text align colon center so let's refresh and let's see and there we go there it is nice and centered so just to remind you that's what i typed right there and that aligned the text in the middle all right now we have that we are getting very close to being done at least for the styling aspect let's copy another grid tag and inside of here let's create some buttons so we want a button to actually you know submit this form then we want a button to go back to the previous page at least i would like that button so we're going to use that button that we already imported above i will say button for this one we'll say create a room for the color of this button uh we'll make this one equal to the secondary color that kind of nice red you'll see that in a second we're going to say the variant of this button is equal to contained and then we will have an on click event uh but we're not going to implement that quite yet so now let's just simply copy that whole grid thing that we did and let's make another one for our back button so now we will simply say back and for this one we can actually implement the logic right now to make this go back to the previous page or go back to the home page so rather than having the color be secondary i'm going to make this color be primary i think that's the color i want at least yeah let's go with primary and then we have variant equals contained yep that's fine then we're going to say 2 and this is going to be the url we want to redirect to when we press this button so i'll say that's equal to forward slash and then i'm going to say that the component for this button and i'll discuss this in a second is actually no come on give me the autocomplete component equals and that's going to be equal to link that's why we imported link from react router above pretty much what this is saying is that this button will act like a link that's why the component is equal to link and we will redirect to slash if we press this button so let's have a quick look at our webpage and see if we messed anything up and there we go we have create a room and back now that i'm looking at it i kind of want to switch the back and create a room color because i just like the created room to be the other color so let's go ahead and do that let's make that primary and let's make that secondary like that okay so there we go now those are switched up my opinion that looks better let's press the back button notice it brings us back to the home page all right so that is it for actually styling and creating kind of the ui we will make it look better later but that's like all i wanted to do for right now and now we will implement kind of the back end logic and all the on click events and all of that so there's many different ways in react that we can pretty much press the create room button grab all of the information from our form and then send it to the back end the way that i'm using is pretty conventional we're going to use react state to keep track of pretty much what is in our form and then whenever we press that button we'll look at the current state that we have up here which we'll define in a second and we'll send that information to the backend so to start i'm going to say this dot state and we're going to set some default state so to start we're going to say guest can pause that's going to be equal to true and then we're going to say votes to skip and that's going to be equal to this dot default votes all right so that is our default state i think i've used state before in this series i might not have though so i will kind of explain as we go pretty much we have this state in react uh if we ever change this state or update the state it automatically refreshes and forces the component to update so what we're gonna do is pretty much say okay when you you know change the radio button or you change what's in that text button we will update the state and then we will show whatever the state is in that text button or sorry in that text field or in that radio button and then when you press create button we'll just create room sorry we have miss speaking all over the place here when you press create room we will look at the current state and we will send that information to the back end to create the room so we need a few methods the first one that i'm going to do is this one is going to be called handle votes change so i'm going to say handle votes votes changed or yeah i guess change changed i don't know what we want to do let's go handle votes change and then this will simply take e which will actually be the object that called this function and then inside of here we're going to say this dot set state this is the method we use when we want to modify the state and react inside of here we open up these curly braces and then we simply just type the i guess key of what we want to update so here we'll simply say votes to skip and that will be equal to this or sorry not this e dot target dot value now in short what this will do is get the object that called this function which should be in our case the text field it will then get the value from that text field and just put that here for votes to skip okay so that's pretty straightforward hopefully that makes sense now let's have another method and this one is going to be called handle guest can pause change so kind of a mouthful but handle guest can pause change and we're going to do literally the same thing inside of here we're going to take e and we're going to say this dot set state and inside of here we're going to say guest can pause and this is actually going to be equal to a little bit of a different one that we just wrote where we say e dot target.value equals equals equals true because remember the default values are strings and we're going to say question mark if that is the case we'll make that true otherwise colon will make that false so pretty much this is saying hey if this value is equal to the string true then make what is here true otherwise make it false so this is just i actually don't know the official name of this but it's like an inline if statement in javascript so now that we have these two things let's hook those up to actually our appropriate things inside of here so let's go to our radio group and on radio group let's go on change and that's going to be equal to this dot handle and i believe this should be guess can pause change i don't need to add the brackets because it will just call that function when an on change event occurs an on change event will just be you press the other radio button essentially all right so we have the on change there now let's go to text field and let's say on change is equal to and you can probably guess what this one is going to be it's going to be this dot votes handle votes change so i even typed around but this dot handle votes change so whenever we modify this text field we will update the state and now what we're going to do since that should be good is add actually an event for when we press this create a room button or add a function i guess that we can call so now another one we'll say handle room button pressed in this one we're actually not going to take e and i'll show you why in one second and we're going to go here and actually bind this method to the class now you don't have to really know what that means i will explain it though we're going to say this dot handle or is it what did i even type here handle room button change handle room button clicked or was it pressed pressed come on i can't even remember two seconds ago so handle room button pressed is equal to this dot handle room button pressed and that's going to be dot bind to this now this seems strange but all this is doing is simply binding this method to the class so that inside of this method we have access to this keyword if you don't do this and you have a method that you're calling from inside of your dom elements here it won't have access to this keyword so if you ever want to have access to this keyword from any of these methods you're using as like on like event changes essentially i need to bind them like that so anyways now we have handle room button pressed it is binded to the class with this so i'll have access to that from inside and now we're going to need to call that method from the on click of that button so let's go here to our button and let's go on click and that's going to be equal to this dot handle room button clicked or why does it keep giving me the clicks i just assume that that is correct but no it should be handle room button pressed all right now for now inside of here just make sure this is working we can just console.log this dot state and that should just show us our current state and then we can see if everything's working fine so let's go to the browser let's refresh all looks good let's so create a room and we get guest can pause is true votes to skip is 2. let's modify this and oh we got something wrong cannot read property set state of undefined interesting so what does that mean oh so this is an interesting one so inside of handle guess pause can change and handle votes change i'm trying to use this keyword now notice what i just said we're not going to be able to use this keyword unless we bind the method to the class and guess what i didn't do bind these two methods to the class so actually a good error to run into a rookie mistake so let's fix this i'm going to say this dot handle votes change equals this dot handle votes change dot bind this okay and then we'll do the same thing this dot handle that equals this dot handle guess pause change dot bind to this okay so let's go to the browser now let's refresh all right let's go to four create a room and notice votes to skip is four and the value is true now let's go and do this to be seven boom that's true let's make that there there we go we get false so our state is updating fine all seems to be working well uh and now what we need to do is just hook this up to the back end so now let's go inside of handle room button pressed instead of console.logging let's actually send a request to the endpoint we created previously that will allow us to actually create the new room with the information from this form so this is going to be a little bit of stuff just follow along with here we're going to say const request options is equal to and then inside of here we're going to say the method is equal to what is it well it's going to be equal to a post method we're going to say headers and that's going to be first of all as a string content i think i had that spelled right actually content hyphen type and that will be colon and equal to application slash json so this is pretty much just telling us what type of content is coming in this isn't always required but in a post request usually it's a good idea to add it so we're going to say we're sending application json content and then we're going to say the body of our request is going to be equal to json dot stringify like that and inside of here we're simply going to put a javascript object that will be converted into a json string that we can send so first we'll say votes to skip and that will be equal to this dot state dot votes to skip and then we'll say guest can pause and that's going to be equal to this dot state dot guest can pause all right so now that we have that this will pretty much just take from our state whatever the value is and send that uh we'll it'll be part of the request option so we'll send it when we send the actual request okay so hopefully that's all good uh now what we're gonna do is first of all add a semicolon there and we're gonna make a fetch request so we're going to say fetch and we're going to fetch this to where well it should be to slash api slash create room i believe that's the end point i set up we're also going to pass the request options in this fetch request and then we're going to set a dot then i'll discuss what this does in a second we're going to say response and that's equal to response dot json so pretty much what i just did here is i said okay i want to send a request to localhost right or whatever this is running on whatever react is running on to api create room i'm gonna send it with the request options which is gonna have the payload which is my body it's gonna have the type being post and the headers of the content type and then i'm going to say okay once we get a response that's what this dot then is saying so once we get a response essentially let's take that response let's convert that response into json and then after that we're going to say okay now let's take the data and let's do something with the data well what are we going to do with the data for now i'm just going to simply console.log it just so we can see what it looks like but pretty much we're saying take the response convert it into a json object and then take the data which will be this response.json object and print it out but you'll see that we'll get all of the things relating to the room in this response and then well we can do something with it but that's probably going to be in the next video anyways let's have a look here let's go ahead and refresh this and let's just send a create room right now so we send that and 500 internal server errors let's see what the error is here let's go have a look at our server all right so having a look at this error here i've just poking around to make sure i wasn't getting too lost on the video um it's saying not no constraint failed uh room guest can pause so pretty much what this is saying is that we didn't get the information that we needed in the request and so not null constraint is not satisfied because well it was null when we tried to create the object uh what that means is that we just have to rename this these fields right here to actually have underscore so i'm going to say votes underscore 2 underscore skip and then i'm going to say guest underscore can underscore pause the reason for this is that these field names need to match what i'm looking for from my server so here if i go to views.pi oh it actually it should be getting yeah just getting the underscore version so guess can pause in votes to skip so i need to make sure that my data is is matching that essentially before remember i had the camel case instead of the snake case so i just switched it to snake case now hopefully this should work i haven't tested this but let's give it a shot let's refresh and let's go create a room and notice that works so we actually get a room now and says okay the code is this that's the host and guest composite is true votes to skip is 2 dot dot all right now let's try to do it again with 4 votes when we do that have a look we actually end up if i can make this full screen we have the same code same host votes the skip has changed and guess to pause is what it was before all right so that is pretty much it for this video so that will show you how to send a post request from the front end so now we're going to communicate with the back end doing something similar to this how we actually make kind of a nice looking ui in the next video we'll clean this up a bit i will actually talk about what to do next so now that we have that room created kind of how we can redirect the user around and yeah that will be what we're doing in the next video so hopefully you guys enjoyed if you did make sure you leave a like subscribe to the channel and of course i will see you again in another video
