With timestamps:

00:02 - [Music]
00:08 - in this video i am going to share with
00:10 - you the ultimate self-taught developer
00:12 - curriculum which will be a long list of
00:14 - topics that you need to master to become
00:16 - a software engineer now not only will i
00:18 - give you this list i will tell you the
00:20 - order in which you should learn these
00:21 - topics and approximately how much time i
00:23 - would spend on each assuming you had
00:25 - between 15 to 20 hours per week to learn
00:28 - this stuff so what i've kind of done is
00:30 - broken this into a 12 month schedule
00:32 - saying in month one learned this and
00:34 - month two learned this etc etc again
00:36 - assuming that you have between 15 to 20
00:38 - hours per week obviously this will
00:40 - widely vary depending on your skill
00:42 - level how naturally this comes to you if
00:44 - you have more time less time i just
00:46 - figured it'd be nice to kind of put it
00:47 - in a
00:48 - one-year schedule and give you you know
00:50 - where i would hope to be by each month
00:53 - with 15 to 20 hours per week so just add
00:56 - a bit of credibility here i've been
00:57 - teaching programming for about six years
00:59 - i've been programming myself for about
01:01 - ten i have a very good understanding of
01:03 - what it takes to get good at programming
01:05 - in the order in which you should learn
01:06 - specific topics in fact i have a
01:08 - programming course programmingexpert.io
01:10 - you can check it out from the link in
01:11 - the description that teaches this exact
01:13 - curriculum pretty much and lastly if you
01:15 - already know how to code you already
01:17 - know a lot of the topics on this list
01:18 - then what i would recommend you do is
01:20 - check out the sponsor of this video so
01:23 - what makes a great programmer now you
01:24 - may have thought about this often but
01:26 - there really is no definitive answer now
01:28 - if you ask me i'd say good problem
01:30 - solving skills lots of practice and
01:32 - likely some other guidance now
01:34 - fortunately for us scalar the sponsor of
01:36 - today's video has a solution that can
01:38 - make you a great programmer and help you
01:40 - crack pretty much any tech interview
01:42 - that you can think of and yes by that i
01:44 - mean at companies like microsoft meta
01:47 - and google now scalar is a tech school
01:49 - that was founded by industry veterans
01:50 - that worked at top tier tech companies
01:53 - one of them actually worked directly
01:54 - with mark zuckerberg in the early days
01:56 - of facebook and helped to build the
01:58 - messenger app and other parts of the
01:59 - facebook platform scalar's curriculum is
02:02 - built keeping in mind the needs of tech
02:04 - companies vetted by those who work there
02:06 - currently and with scalar you get
02:08 - mentorship as well as dedicated
02:09 - interview career support to help you
02:11 - along your journey
02:13 - last year they helped two thousand plus
02:14 - engineers get into top product based
02:16 - companies now mastering problem solving
02:19 - data structures and system design is now
02:21 - only one step away give scalar a try by
02:24 - clicking the link in the description and
02:25 - enrolling in a free masterclass where
02:27 - you can learn how to master technical
02:29 - coding rounds at main companies thanks
02:31 - to scaler for sponsoring this video so
02:34 - with all that said let's dive into the
02:35 - beginning of the curriculum here we'll
02:37 - start at kind of month one so in month
02:39 - one the very first thing you need to do
02:41 - is determine what type of programming
02:43 - you actually want to do now this may be
02:45 - hard if you've never programmed before
02:46 - but you need to spend at least a day or
02:48 - two research researching kind of
02:49 - different areas within programming and
02:52 - figuring out what interests you and what
02:53 - you want to build you can always change
02:55 - later on if you find that you're really
02:56 - bored with what you originally chose but
02:58 - you need a starting point you need a
02:59 - programming language that you're going
03:01 - to be learning so you need to pick you
03:03 - know do i want to do ai do i want to do
03:04 - research do i want to do data science
03:06 - why am i learning to code first of all
03:08 - what interests me what do i want to
03:10 - build once you know those things it's
03:11 - very easy to find languages in the
03:13 - specific domain for example if you
03:15 - wanted to be a front-end web developer
03:17 - you'd probably want to learn javascript
03:18 - if you want to do more back-end stuff
03:20 - maybe python maybe go maybe java c plus
03:23 - right there's a bunch of different
03:24 - options so that's kind of what you need
03:25 - to figure out first now once you find a
03:28 - programming language that you want to
03:29 - learn you need to immediately go right
03:31 - to the fundamentals no building stuff no
03:33 - creating complex applications you need
03:35 - to understand what is an if statement
03:37 - what is a for loop what is a while loop
03:39 - how do i add numbers together what are
03:40 - different data types how do i print
03:42 - something how do i collect console input
03:44 - all of the fundamental programming
03:46 - concepts if you want a full list you can
03:48 - check out the curriculum on programming
03:49 - expert it's free you don't have to pay
03:51 - to view the curriculum you can go
03:52 - through and view kind of what i would
03:54 - teach in terms of programming
03:55 - fundamentals
03:56 - moving on from there i would imagine
03:58 - that learning just the fundamentals of
04:00 - programming setting up your development
04:02 - environment kind of getting comfortable
04:04 - writing basic code would take you about
04:06 - a month if you were putting again 15-20
04:08 - hours per week to really get good at it
04:10 - to really understand what's going on
04:12 - that's how long i think it would take
04:14 - the average person again some people may
04:16 - be much faster than that so once you've
04:18 - done that what i would recommend is
04:20 - trying to do some type of exercises
04:21 - trying to do some type of problems going
04:23 - through assessments going through
04:24 - practice questions whatever is going to
04:26 - help you practice and actually be
04:28 - writing code and learning this skill you
04:30 - need to do that because it's not enough
04:31 - to just watch the video you have to
04:33 - really understand the fundamentals
04:35 - before you can go any further so after
04:36 - you nail down the fundamentals here the
04:38 - next topic which is still kind of
04:40 - considered fundamentals in my book would
04:42 - be object oriented programming so you're
04:44 - kind of starting month two here the next
04:46 - thing i would focus on learning is
04:47 - object oriented programming now this is
04:49 - definitely more complicated than the
04:50 - fundamentals and it may not even be
04:52 - necessarily offered in the programming
04:54 - language that you're working in but you
04:55 - still need to learn kind of the
04:56 - paradigms of that and all the different
04:58 - topics within it for example you need to
05:00 - learn about classes and objects you need
05:02 - to learn about attributes you need to
05:04 - learn about methods you're going to have
05:05 - to learn about inheritance about
05:07 - abstract classes interfaces
05:09 - based classes you know all these
05:11 - different things right there's a lot of
05:12 - topics within object oriented
05:14 - programming again if you want a full
05:15 - list you can go to something like
05:16 - programming expert and you can see kind
05:18 - of the curriculum again that's free you
05:19 - don't have to pay to see that so that's
05:21 - what i would do in kind of month two
05:23 - learn object-oriented programming and
05:24 - then really start working on maybe some
05:26 - larger projects when i say large nothing
05:28 - massive but where you're writing a few
05:30 - classes you're having classes and
05:32 - objects interact with each other you
05:34 - need to practice all of this stuff and
05:36 - do it in some type of format where
05:38 - you're actually writing a program you
05:39 - know you're doing stuff on your own
05:40 - maybe you're referencing solutions or
05:42 - stack overflow that's fine but you still
05:44 - need to be trying to create a majority
05:46 - of this program by yourself and kind of
05:48 - struggling before you just dive in to
05:50 - the answer book so that is what i would
05:52 - do in kind of a month or two now moving
05:54 - on to month three here at this point in
05:55 - time you should be very comfortable with
05:57 - programming you should know how to solve
05:58 - basic problems you should have the
05:59 - fundamentals down and hopefully you've
06:02 - memorized a lot of the basic syntax like
06:04 - you don't need to refer to maybe some
06:06 - base code or something like that all the
06:08 - time to actually get anything down at
06:10 - this point i would really really start
06:12 - working on some type of project some
06:14 - type of exercises and just continuing to
06:16 - practice these skills these are things
06:18 - that it doesn't matter what programming
06:20 - language you work in you're gonna have
06:21 - to know and you're gonna have to be very
06:22 - very good at so personally i would
06:24 - commit probably a month to just going
06:26 - through different exercises going
06:28 - through different problems and really
06:29 - testing myself and making sure i
06:31 - understood all of the concepts very very
06:33 - well before going any further because if
06:35 - you try to jump further without knowing
06:37 - it it's going to be very discouraging
06:38 - because stuff gets even more complicated
06:41 - right in kind of the next month that i'm
06:42 - going to go through so that's kind of
06:43 - month one to three make sure you learn
06:46 - the basics the fundamentals of a
06:47 - programming language object-oriented
06:49 - programming and then you do a ton of
06:50 - exercises and a ton of practice then you
06:52 - can move on to month four all right so
06:54 - moving on to month four here again at
06:57 - this point you should have a very solid
06:58 - understanding of the basic programming
07:00 - concepts should be comfortable writing
07:02 - code and ready to kind of move on to a
07:03 - new topic and learn something new now
07:06 - this is where i'm going to recommend
07:07 - that you start diving into advanced
07:08 - programming concepts some people may
07:10 - disagree with me here but i think it's a
07:12 - good idea to really nail everything
07:14 - programming before you dive into stuff
07:15 - like software engineering tools and more
07:17 - kind of
07:18 - you know add-ons to programming that's
07:20 - what i'll call them so in month four i
07:22 - would start looking at advanced
07:23 - programming concepts now some of those
07:25 - concepts would be things like decorators
07:27 - splitting your code into different
07:28 - modules and different packages learning
07:30 - how to run your code from the command
07:32 - line how to compile code manually stuff
07:34 - like that is important
07:35 - next i would learn stuff like iterators
07:37 - generators understand some kind of
07:39 - underlying concepts in the programming
07:41 - language that maybe you've been taking
07:43 - advantage of but you didn't really
07:44 - understand how they worked i would learn
07:47 - about asynchronous programming i would
07:48 - learn about threading and
07:49 - multi-processing i would start looking
07:51 - into memory management understanding
07:53 - stuff like pointers versus references
07:55 - you may have learned that earlier
07:56 - hopefully you did but if you've not
07:58 - already at this point then i would try
08:00 - to learn topics like that especially if
08:02 - you're in a dynamically type programming
08:03 - language you probably want to start
08:05 - looking at some constructs maybe a
08:06 - little bit outside of that and just kind
08:08 - of exploring you know how do other
08:10 - programming languages work
08:12 - not just the main language that i'm in
08:14 - continuing here i would learn about some
08:16 - operating system level concepts which is
08:18 - kind of what i was discussing like how
08:19 - does a cpu actually work what is a cpu
08:22 - what's a core versus what is a thread
08:25 - what does it actually mean to run my
08:27 - program what's happening on the computer
08:29 - how what is binary right stuff like that
08:31 - you don't need to be a master app but i
08:32 - think you should have some perspective
08:34 - on as a programmer or someone who wants
08:36 - to become a software engineer so that's
08:38 - what i would do in kind of month four
08:40 - probably month five and six as well is
08:42 - just get comfortable with these more
08:44 - advanced topics try to dig into how a
08:46 - computer works how do programs actually
08:48 - work how are they being executed what is
08:50 - a file what is source code what is byte
08:52 - code those are things you want to
08:54 - understand uh next once you've done that
08:56 - in this kind of i guess four to six
08:58 - month period here your month four to
09:00 - month six what i would do is work on
09:02 - harder programming problems right maybe
09:04 - at this point you go to something like
09:05 - leak code or algo expert you start just
09:07 - trying maybe some of the easy and medium
09:09 - problems and seeing okay how do i deal
09:11 - with um you know problems i've never
09:13 - seen before stuff that's completely new
09:15 - what is my problem solving skill like uh
09:17 - not just pure kind of coding and i guess
09:20 - regurgitating stuff that you've already
09:21 - learned how do i look at a unique
09:23 - problem and use code to solve it that's
09:25 - a skill set that's always going to be
09:26 - important that at this point i think you
09:28 - start diving into so that's kind of what
09:30 - i have for month four to six learn
09:32 - advanced programming concepts learn
09:34 - operating system level concepts learn
09:36 - threading multiprocessing how a computer
09:38 - works what is a cpu what is a thread
09:40 - what is a core and then work on some
09:42 - more advanced problems some more
09:44 - difficult ones and then move on to month
09:46 - seven all right so at this point here
09:47 - you've been programming for about half a
09:49 - year approximately if you're following
09:50 - the schedule right and you should have
09:52 - learned a lot of stuff right you have a
09:54 - lot of knowledge in your head it's a lot
09:56 - of new stuff hopefully you've been
09:57 - applying it along the way and you've
09:59 - done a lot of practice problems and
10:00 - you're getting good at that
10:02 - now is where i think you need to start
10:04 - looking into
10:05 - what is good program what does it mean
10:07 - to write a good program what are good
10:09 - programming habits what is clean code
10:12 - how do i not just solve the problem but
10:13 - how do i solve it in a more optimal way
10:16 - how do i make my code easier for other
10:17 - people to read
10:19 - easier for other people to add to etc uh
10:22 - this is when i think you start getting
10:23 - into building good programming habits
10:25 - and also reading a lot of other people's
10:27 - code going to github going to stack
10:29 - overflow and just maybe spending an hour
10:31 - or so whenever you want to do this
10:33 - looking through some production level
10:35 - code understanding how code bases are
10:37 - kind of laid out how do they organize
10:39 - code what happens when i have you know
10:41 - 10 000 code files how do those kind of
10:43 - get laid out where do i put those again
10:45 - you're not going to be a master at this
10:46 - you need to probably learn this on a job
10:48 - but this is something that i would start
10:49 - trying to do learn good programming
10:51 - habits
10:52 - learn what is clean code what is good
10:54 - code how do i write this in a more
10:56 - optimal way there's a lot of patterns
10:58 - you can learn that are like that and
10:59 - again reading and kind of reviewing a
11:02 - lot of other people's code now
11:03 - continuing here another thing i would do
11:04 - is i would start learning git and github
11:07 - just the basics nothing crazy but i
11:09 - would start practicing committing
11:11 - everything that i write in terms of code
11:12 - to my github repository i would start
11:15 - seeing okay you know what happens if i
11:16 - have a conflict what is a branch i start
11:18 - learning these basic github kind of
11:20 - terms and getting comfortable using the
11:22 - command line how do i copy a file how do
11:24 - i move a file maybe you don't always
11:27 - have to touch your mouse now you can do
11:28 - a lot of stuff with commands that you
11:30 - know like bash commands windows commands
11:33 - you know mac commands terminal commands
11:34 - whatever you want to learn but i would
11:36 - get you know familiar with some of those
11:38 - commands and understand some of these
11:40 - software engineering tools which is what
11:42 - i'll call them all right so now we're
11:43 - moving on to month eight at this point
11:44 - you should be good at programming you
11:46 - should know the basics of git and github
11:47 - maybe you have some bash commands under
11:49 - your belt you're starting to understand
11:51 - what is clean code what is good code how
11:52 - do i write better code how do i not just
11:54 - solve the problem how do i solve the
11:56 - problem well
11:58 - now this is the point where i think you
12:00 - need to jump into another programming
12:02 - language you don't need to become a
12:03 - master you don't need to be an absolute
12:05 - pro but i think you should study and
12:06 - look at another language and ideally one
12:08 - that is different than the programming
12:10 - language than you currently know what i
12:12 - mean by that is pick something that is
12:14 - fairly different maybe you go from a
12:15 - dynamically typed language to a
12:16 - statically typed language uh you go from
12:18 - something it's a very high level
12:20 - language to maybe a lower level language
12:22 - maybe you try learning something like c
12:24 - plus plus or c something that's
12:25 - considered harder than maybe a python or
12:27 - a javascript this is going to give you a
12:29 - really good perspective for different
12:31 - kind of programming paradigms the way
12:33 - that different programming languages
12:35 - work and the fact that there's always
12:37 - the best tool for the job right when you
12:39 - have two different programming languages
12:41 - one is not better than the other but one
12:43 - is better at something than the other
12:44 - one is just like the other one has its
12:46 - pros and has its cons or
12:48 - places where you would use it in places
12:49 - where you wouldn't use it i think that's
12:51 - an important perspective to build and
12:53 - learning another programming language is
12:54 - always something very very valuable
12:56 - especially because a lot of the stuff
12:58 - you already know is going to carry over
13:00 - then you're going to learn about a
13:01 - little nuances tweaks and you know maybe
13:03 - this one's faster or slower you're going
13:05 - to just discover a lot of things by
13:06 - jumping into another language so that's
13:08 - what i would do here you don't need to
13:10 - be a master but that's what i would
13:11 - focus on another programming language
13:13 - all right so now we're nearing kind of
13:14 - the end of the journey here you've been
13:16 - programming for a long time hopefully
13:17 - you're getting good hopefully the basics
13:19 - are now kind of nailed down you know
13:20 - everything that's totally fine you feel
13:22 - comfortable solving most problems in the
13:24 - programming language that you originally
13:26 - chose you've just learned another one
13:27 - you know you've got some basics in that
13:29 - now unfortunately it's time to learn
13:31 - some of the hard stuff that everyone
13:33 - hates learning now there's a reason i
13:34 - left this till the end because this is a
13:36 - fairly discouraging section for a lot of
13:38 - people but this is when i would start
13:40 - looking into the dreaded data structures
13:42 - and algorithms i would also start
13:43 - potentially looking at mathematics
13:45 - related to programming maybe just
13:48 - getting some perspective of what like a
13:50 - proof looks like for an algorithm
13:52 - looking at something like discrete
13:54 - mathematics or linear algebra you don't
13:56 - have to do that i'm just saying maybe
13:57 - that's something you want to just take a
13:59 - look at to have an appreciation for how
14:01 - complex some computer science proofs and
14:03 - topics can really be i would also maybe
14:06 - start considering looking into computer
14:08 - architecture that's you know what is a
14:09 - transistor what are different gates
14:11 - what's an and gate or gate nor gate how
14:14 - is uh you know
14:15 - a cpu designed stuff like that again you
14:17 - don't need to do this but that's
14:18 - something that i would have learned in
14:19 - my computer science degree and that i'm
14:21 - very thankful that i did learn so i'm
14:22 - kind of just recommending it here but
14:24 - overall you're going to be wanting to
14:25 - look at a lot more theory related to
14:27 - computer science so data structures and
14:29 - algorithms time complexity big o
14:31 - notation big theta big omega
14:34 - how you determine the running time of an
14:36 - algorithm how you write specific
14:38 - algorithms sorting algorithms searching
14:40 - algorithms what is a heap what is a
14:42 - binary tree what is a b tree there's a
14:44 - lot of stuff like that that will come up
14:46 - in an interview scenario so if you're
14:48 - trying to prepare for a technical
14:49 - interview this is something you're going
14:51 - to have to kind of already know before
14:52 - going into that so i would spend
14:55 - two months probably on this type of
14:57 - stuff right so month 9 to 10 i guess
15:00 - and then i would move on to the next
15:01 - step all right so let's say now we're on
15:03 - month 11 or 12 i can't really keep track
15:05 - of exactly what i've said at this point
15:07 - but let's say you're near the end of
15:08 - your journey right you did the data
15:09 - structures and algorithms you have a
15:11 - foundation in that maybe you dabbled in
15:13 - a little bit of math you looked at some
15:14 - computer architecture
15:16 - now is the point where i would start
15:17 - looking at maybe some more fun stuff
15:19 - maybe you would look at some modules and
15:21 - packages like maybe if you're working in
15:22 - python you start creating a website with
15:25 - python or you start kind of applying
15:26 - your knowledge into building something
15:28 - that's fun it's cool a project that you
15:30 - want to work on that you could maybe
15:31 - continue over a month or two months and
15:33 - then maybe you're going to add to your
15:34 - resume or something like that right so
15:36 - dabbling into that kind of stuff so
15:38 - external packages external modules stuff
15:41 - that's been built for you to build with
15:43 - other than that i would also start
15:44 - potentially looking at something like
15:46 - system design now this is something that
15:48 - you would really not do until you're
15:50 - like a senior software engineer but it's
15:52 - never a bad idea to get again a very
15:54 - minimal perspective of all of these
15:55 - different topics just so that if you
15:57 - ever were asked about something like
15:58 - this you'd at least have some idea what
16:01 - the what the question was right so when
16:03 - i say system design maybe you start
16:05 - thinking about hey you know i know how
16:06 - to code now how the heck did they make
16:08 - something like netflix like what is
16:10 - involved in that in terms of like a
16:12 - devops thing how many servers do they
16:14 - have how optimized does their delivery
16:16 - mechanism have to be how are they
16:17 - serving content that quickly maybe
16:19 - that's something you just want to look
16:20 - into for a few days and kind of research
16:22 - a little bit uh other than that you can
16:24 - start learning about some design
16:26 - patterns so you know common ways to kind
16:28 - of structure programs and start looking
16:30 - into maybe some specific things within
16:32 - your programming niche that you're into
16:35 - maybe you're really into artificial
16:36 - intelligence maybe you're really into
16:37 - data science stuff maybe you start
16:39 - learning some specific tools within that
16:41 - area and kind of
16:43 - getting a bit of a specialty if that
16:44 - makes sense
16:45 - that's what i would do here and then of
16:47 - course always be practicing that's
16:49 - really how you're going to get better so
16:51 - i think with that said that's going to
16:52 - wrap up this video again all of this
16:55 - pretty much with the exception of a few
16:57 - topics especially like in the later
16:58 - sections is taught on programming expert
17:01 - i don't want this to just come across as
17:02 - a huge ad for that product but i
17:04 - designed that with pretty much all of
17:05 - what i just described in mind for you to
17:07 - be the best possible place to learn how
17:10 - to cook so if you're interested check it
17:12 - out from the link in the description use
17:13 - discount code tim i hope you enjoyed the
17:15 - video if you did leave a like good luck
17:17 - in your programming journey and i will
17:19 - see you in the next one
17:22 - [Music]

Cleaned transcript:

in this video i am going to share with you the ultimate selftaught developer curriculum which will be a long list of topics that you need to master to become a software engineer now not only will i give you this list i will tell you the order in which you should learn these topics and approximately how much time i would spend on each assuming you had between 15 to 20 hours per week to learn this stuff so what i've kind of done is broken this into a 12 month schedule saying in month one learned this and month two learned this etc etc again assuming that you have between 15 to 20 hours per week obviously this will widely vary depending on your skill level how naturally this comes to you if you have more time less time i just figured it'd be nice to kind of put it in a oneyear schedule and give you you know where i would hope to be by each month with 15 to 20 hours per week so just add a bit of credibility here i've been teaching programming for about six years i've been programming myself for about ten i have a very good understanding of what it takes to get good at programming in the order in which you should learn specific topics in fact i have a programming course programmingexpert.io you can check it out from the link in the description that teaches this exact curriculum pretty much and lastly if you already know how to code you already know a lot of the topics on this list then what i would recommend you do is check out the sponsor of this video so what makes a great programmer now you may have thought about this often but there really is no definitive answer now if you ask me i'd say good problem solving skills lots of practice and likely some other guidance now fortunately for us scalar the sponsor of today's video has a solution that can make you a great programmer and help you crack pretty much any tech interview that you can think of and yes by that i mean at companies like microsoft meta and google now scalar is a tech school that was founded by industry veterans that worked at top tier tech companies one of them actually worked directly with mark zuckerberg in the early days of facebook and helped to build the messenger app and other parts of the facebook platform scalar's curriculum is built keeping in mind the needs of tech companies vetted by those who work there currently and with scalar you get mentorship as well as dedicated interview career support to help you along your journey last year they helped two thousand plus engineers get into top product based companies now mastering problem solving data structures and system design is now only one step away give scalar a try by clicking the link in the description and enrolling in a free masterclass where you can learn how to master technical coding rounds at main companies thanks to scaler for sponsoring this video so with all that said let's dive into the beginning of the curriculum here we'll start at kind of month one so in month one the very first thing you need to do is determine what type of programming you actually want to do now this may be hard if you've never programmed before but you need to spend at least a day or two research researching kind of different areas within programming and figuring out what interests you and what you want to build you can always change later on if you find that you're really bored with what you originally chose but you need a starting point you need a programming language that you're going to be learning so you need to pick you know do i want to do ai do i want to do research do i want to do data science why am i learning to code first of all what interests me what do i want to build once you know those things it's very easy to find languages in the specific domain for example if you wanted to be a frontend web developer you'd probably want to learn javascript if you want to do more backend stuff maybe python maybe go maybe java c plus right there's a bunch of different options so that's kind of what you need to figure out first now once you find a programming language that you want to learn you need to immediately go right to the fundamentals no building stuff no creating complex applications you need to understand what is an if statement what is a for loop what is a while loop how do i add numbers together what are different data types how do i print something how do i collect console input all of the fundamental programming concepts if you want a full list you can check out the curriculum on programming expert it's free you don't have to pay to view the curriculum you can go through and view kind of what i would teach in terms of programming fundamentals moving on from there i would imagine that learning just the fundamentals of programming setting up your development environment kind of getting comfortable writing basic code would take you about a month if you were putting again 1520 hours per week to really get good at it to really understand what's going on that's how long i think it would take the average person again some people may be much faster than that so once you've done that what i would recommend is trying to do some type of exercises trying to do some type of problems going through assessments going through practice questions whatever is going to help you practice and actually be writing code and learning this skill you need to do that because it's not enough to just watch the video you have to really understand the fundamentals before you can go any further so after you nail down the fundamentals here the next topic which is still kind of considered fundamentals in my book would be object oriented programming so you're kind of starting month two here the next thing i would focus on learning is object oriented programming now this is definitely more complicated than the fundamentals and it may not even be necessarily offered in the programming language that you're working in but you still need to learn kind of the paradigms of that and all the different topics within it for example you need to learn about classes and objects you need to learn about attributes you need to learn about methods you're going to have to learn about inheritance about abstract classes interfaces based classes you know all these different things right there's a lot of topics within object oriented programming again if you want a full list you can go to something like programming expert and you can see kind of the curriculum again that's free you don't have to pay to see that so that's what i would do in kind of month two learn objectoriented programming and then really start working on maybe some larger projects when i say large nothing massive but where you're writing a few classes you're having classes and objects interact with each other you need to practice all of this stuff and do it in some type of format where you're actually writing a program you know you're doing stuff on your own maybe you're referencing solutions or stack overflow that's fine but you still need to be trying to create a majority of this program by yourself and kind of struggling before you just dive in to the answer book so that is what i would do in kind of a month or two now moving on to month three here at this point in time you should be very comfortable with programming you should know how to solve basic problems you should have the fundamentals down and hopefully you've memorized a lot of the basic syntax like you don't need to refer to maybe some base code or something like that all the time to actually get anything down at this point i would really really start working on some type of project some type of exercises and just continuing to practice these skills these are things that it doesn't matter what programming language you work in you're gonna have to know and you're gonna have to be very very good at so personally i would commit probably a month to just going through different exercises going through different problems and really testing myself and making sure i understood all of the concepts very very well before going any further because if you try to jump further without knowing it it's going to be very discouraging because stuff gets even more complicated right in kind of the next month that i'm going to go through so that's kind of month one to three make sure you learn the basics the fundamentals of a programming language objectoriented programming and then you do a ton of exercises and a ton of practice then you can move on to month four all right so moving on to month four here again at this point you should have a very solid understanding of the basic programming concepts should be comfortable writing code and ready to kind of move on to a new topic and learn something new now this is where i'm going to recommend that you start diving into advanced programming concepts some people may disagree with me here but i think it's a good idea to really nail everything programming before you dive into stuff like software engineering tools and more kind of you know addons to programming that's what i'll call them so in month four i would start looking at advanced programming concepts now some of those concepts would be things like decorators splitting your code into different modules and different packages learning how to run your code from the command line how to compile code manually stuff like that is important next i would learn stuff like iterators generators understand some kind of underlying concepts in the programming language that maybe you've been taking advantage of but you didn't really understand how they worked i would learn about asynchronous programming i would learn about threading and multiprocessing i would start looking into memory management understanding stuff like pointers versus references you may have learned that earlier hopefully you did but if you've not already at this point then i would try to learn topics like that especially if you're in a dynamically type programming language you probably want to start looking at some constructs maybe a little bit outside of that and just kind of exploring you know how do other programming languages work not just the main language that i'm in continuing here i would learn about some operating system level concepts which is kind of what i was discussing like how does a cpu actually work what is a cpu what's a core versus what is a thread what does it actually mean to run my program what's happening on the computer how what is binary right stuff like that you don't need to be a master app but i think you should have some perspective on as a programmer or someone who wants to become a software engineer so that's what i would do in kind of month four probably month five and six as well is just get comfortable with these more advanced topics try to dig into how a computer works how do programs actually work how are they being executed what is a file what is source code what is byte code those are things you want to understand uh next once you've done that in this kind of i guess four to six month period here your month four to month six what i would do is work on harder programming problems right maybe at this point you go to something like leak code or algo expert you start just trying maybe some of the easy and medium problems and seeing okay how do i deal with um you know problems i've never seen before stuff that's completely new what is my problem solving skill like uh not just pure kind of coding and i guess regurgitating stuff that you've already learned how do i look at a unique problem and use code to solve it that's a skill set that's always going to be important that at this point i think you start diving into so that's kind of what i have for month four to six learn advanced programming concepts learn operating system level concepts learn threading multiprocessing how a computer works what is a cpu what is a thread what is a core and then work on some more advanced problems some more difficult ones and then move on to month seven all right so at this point here you've been programming for about half a year approximately if you're following the schedule right and you should have learned a lot of stuff right you have a lot of knowledge in your head it's a lot of new stuff hopefully you've been applying it along the way and you've done a lot of practice problems and you're getting good at that now is where i think you need to start looking into what is good program what does it mean to write a good program what are good programming habits what is clean code how do i not just solve the problem but how do i solve it in a more optimal way how do i make my code easier for other people to read easier for other people to add to etc uh this is when i think you start getting into building good programming habits and also reading a lot of other people's code going to github going to stack overflow and just maybe spending an hour or so whenever you want to do this looking through some production level code understanding how code bases are kind of laid out how do they organize code what happens when i have you know 10 000 code files how do those kind of get laid out where do i put those again you're not going to be a master at this you need to probably learn this on a job but this is something that i would start trying to do learn good programming habits learn what is clean code what is good code how do i write this in a more optimal way there's a lot of patterns you can learn that are like that and again reading and kind of reviewing a lot of other people's code now continuing here another thing i would do is i would start learning git and github just the basics nothing crazy but i would start practicing committing everything that i write in terms of code to my github repository i would start seeing okay you know what happens if i have a conflict what is a branch i start learning these basic github kind of terms and getting comfortable using the command line how do i copy a file how do i move a file maybe you don't always have to touch your mouse now you can do a lot of stuff with commands that you know like bash commands windows commands you know mac commands terminal commands whatever you want to learn but i would get you know familiar with some of those commands and understand some of these software engineering tools which is what i'll call them all right so now we're moving on to month eight at this point you should be good at programming you should know the basics of git and github maybe you have some bash commands under your belt you're starting to understand what is clean code what is good code how do i write better code how do i not just solve the problem how do i solve the problem well now this is the point where i think you need to jump into another programming language you don't need to become a master you don't need to be an absolute pro but i think you should study and look at another language and ideally one that is different than the programming language than you currently know what i mean by that is pick something that is fairly different maybe you go from a dynamically typed language to a statically typed language uh you go from something it's a very high level language to maybe a lower level language maybe you try learning something like c plus plus or c something that's considered harder than maybe a python or a javascript this is going to give you a really good perspective for different kind of programming paradigms the way that different programming languages work and the fact that there's always the best tool for the job right when you have two different programming languages one is not better than the other but one is better at something than the other one is just like the other one has its pros and has its cons or places where you would use it in places where you wouldn't use it i think that's an important perspective to build and learning another programming language is always something very very valuable especially because a lot of the stuff you already know is going to carry over then you're going to learn about a little nuances tweaks and you know maybe this one's faster or slower you're going to just discover a lot of things by jumping into another language so that's what i would do here you don't need to be a master but that's what i would focus on another programming language all right so now we're nearing kind of the end of the journey here you've been programming for a long time hopefully you're getting good hopefully the basics are now kind of nailed down you know everything that's totally fine you feel comfortable solving most problems in the programming language that you originally chose you've just learned another one you know you've got some basics in that now unfortunately it's time to learn some of the hard stuff that everyone hates learning now there's a reason i left this till the end because this is a fairly discouraging section for a lot of people but this is when i would start looking into the dreaded data structures and algorithms i would also start potentially looking at mathematics related to programming maybe just getting some perspective of what like a proof looks like for an algorithm looking at something like discrete mathematics or linear algebra you don't have to do that i'm just saying maybe that's something you want to just take a look at to have an appreciation for how complex some computer science proofs and topics can really be i would also maybe start considering looking into computer architecture that's you know what is a transistor what are different gates what's an and gate or gate nor gate how is uh you know a cpu designed stuff like that again you don't need to do this but that's something that i would have learned in my computer science degree and that i'm very thankful that i did learn so i'm kind of just recommending it here but overall you're going to be wanting to look at a lot more theory related to computer science so data structures and algorithms time complexity big o notation big theta big omega how you determine the running time of an algorithm how you write specific algorithms sorting algorithms searching algorithms what is a heap what is a binary tree what is a b tree there's a lot of stuff like that that will come up in an interview scenario so if you're trying to prepare for a technical interview this is something you're going to have to kind of already know before going into that so i would spend two months probably on this type of stuff right so month 9 to 10 i guess and then i would move on to the next step all right so let's say now we're on month 11 or 12 i can't really keep track of exactly what i've said at this point but let's say you're near the end of your journey right you did the data structures and algorithms you have a foundation in that maybe you dabbled in a little bit of math you looked at some computer architecture now is the point where i would start looking at maybe some more fun stuff maybe you would look at some modules and packages like maybe if you're working in python you start creating a website with python or you start kind of applying your knowledge into building something that's fun it's cool a project that you want to work on that you could maybe continue over a month or two months and then maybe you're going to add to your resume or something like that right so dabbling into that kind of stuff so external packages external modules stuff that's been built for you to build with other than that i would also start potentially looking at something like system design now this is something that you would really not do until you're like a senior software engineer but it's never a bad idea to get again a very minimal perspective of all of these different topics just so that if you ever were asked about something like this you'd at least have some idea what the what the question was right so when i say system design maybe you start thinking about hey you know i know how to code now how the heck did they make something like netflix like what is involved in that in terms of like a devops thing how many servers do they have how optimized does their delivery mechanism have to be how are they serving content that quickly maybe that's something you just want to look into for a few days and kind of research a little bit uh other than that you can start learning about some design patterns so you know common ways to kind of structure programs and start looking into maybe some specific things within your programming niche that you're into maybe you're really into artificial intelligence maybe you're really into data science stuff maybe you start learning some specific tools within that area and kind of getting a bit of a specialty if that makes sense that's what i would do here and then of course always be practicing that's really how you're going to get better so i think with that said that's going to wrap up this video again all of this pretty much with the exception of a few topics especially like in the later sections is taught on programming expert i don't want this to just come across as a huge ad for that product but i designed that with pretty much all of what i just described in mind for you to be the best possible place to learn how to cook so if you're interested check it out from the link in the description use discount code tim i hope you enjoyed the video if you did leave a like good luck in your programming journey and i will see you in the next one
