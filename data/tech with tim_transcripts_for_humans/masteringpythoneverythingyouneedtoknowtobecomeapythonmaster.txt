With timestamps:

00:00 - Hello everybody. And
00:01 - welcome back to the
00:01 - YouTube video. So in
00:03 - today's video would all
00:04 - be doing is discussing
00:05 - the topics and skills
00:06 - that you need to learn
00:07 - to become a master at
00:08 - the Python programming
00:10 - language. Now I've
00:11 - broken these skills up
00:12 - into four main
00:13 - categories. Those are
00:14 - basic intermediate
00:15 - advanced, and then
00:16 - finally expert slash
00:18 - master level. And if
00:19 - you're someone who's a
00:20 - beginner programmer,
00:21 - you can kind of treat
00:21 - this video as a
00:22 - curriculum or kind of a
00:24 - general guideline on
00:25 - the skills that you
00:26 - should learn. And in
00:27 - what order you should
00:28 - learn them. If you're
00:29 - someone who is more
00:29 - intermediate or we
00:30 - consider yourself
00:31 - advanced, then maybe
00:32 - I'll list some skills
00:33 - and topics you haven't
00:34 - heard of before. And I
00:35 - can give you some ideas
00:36 - for things that you may
00:36 - want to learn to really
00:37 - make your Python skills
00:39 - just that much better.
00:40 - So without further ado,
00:41 - let's go ahead and get
00:42 - started and talk about
00:43 - the skills and topics
00:44 - you need to learn to
00:45 - become a master at the
00:46 - Python programming
00:47 - language.
00:55 - So a quick note here
00:57 - that I have a ton of
00:57 - resources related to
00:59 - the topics I'm going to
01:00 - be mentioning here,
01:00 - especially in the
01:01 - beginner and
01:02 - intermediate sections.
01:03 - So I will link those
01:04 - resources in the
01:05 - description and I'll
01:06 - leave kind of a list of
01:07 - the topics that I've
01:08 - talked about here. So
01:09 - if you're getting lost
01:10 - or if, you know, you
01:10 - think I'm going to
01:11 - quickly just consult
01:12 - the description and it
01:13 - will have kind of like
01:14 - a mini transcript of
01:15 - what we've talked about
01:16 - in this video. So let's
01:18 - get started with the
01:19 - basic section. So this
01:20 - is really focusing on
01:21 - just fundamental
01:22 - programming concepts
01:23 - and really
01:24 - understanding like the
01:25 - basic, basic building
01:27 - blocks of programming.
01:28 - So the core syntax, the
01:29 - way a program actually
01:30 - reads, uh, the way the
01:32 - different lines of
01:33 - codes are going to be
01:33 - executed, conditions,
01:35 - variables, all that
01:36 - kind of stuff. So to
01:37 - give us kind of a
01:37 - formal list of the
01:38 - topics that I would
01:40 - learn in some kind of
01:41 - relative order, some of
01:42 - these will be out of
01:42 - order.
01:43 - I would go with, and I
01:44 - have a list kind of in
01:45 - front of me right here,
01:46 - variables. So you want
01:47 - to understand how
01:48 - variables work. So, you
01:49 - know, X equals one, Y
01:51 - equals two X equals Y
01:52 - what does X equal? You
01:53 - know, just the basics
01:54 - like that and
01:56 - understanding why we
01:57 - even use variables in
01:58 - programming then
01:59 - probably moving forward
02:00 - into conditions. So
02:01 - Boolean conditions, you
02:03 - know, how do we compare
02:04 - two different variables
02:05 - together? How do we
02:06 - check if the user typed
02:07 - something in and it's
02:08 - equal to something
02:09 - else, chaining
02:10 - conditionals together.
02:11 - So, okay. How can we
02:12 - make a chain
02:12 - conditional that has
02:13 - more than one condition
02:15 - in it? How do we
02:16 - evaluate, you know,
02:17 - this condition and that
02:18 - condition at the same
02:19 - time, next that's going
02:21 - to be operators that
02:22 - you want to learn. So
02:23 - how do we add two
02:23 - variables subtract two
02:25 - variables. What is the
02:26 - modulates operator do
02:27 - into your division?
02:28 - Just these basic tools
02:29 - that you're going to
02:30 - need to be using. As
02:31 - soon as you get out of
02:32 - this basic level, then
02:33 - after that, it's
02:34 - probably going to go to
02:35 - control flow. So it's
02:36 - things like if else,
02:37 - else, if you're going
02:38 - to want to master
02:39 - those, then just
02:40 - learning about loops
02:41 - and Iterable. So for
02:42 - loops, while loops, how
02:43 - do we loop through a
02:44 - list? How do we loop
02:45 - through a dictionary
02:46 - that leads me nicely
02:47 - into what else I would
02:48 - recommend learning,
02:49 - which is basic data
02:50 - structures in Python.
02:51 - So understanding lists,
02:53 - understanding, sets,
02:54 - understanding
02:54 - dictionaries, what
02:55 - about strings booleans
02:57 - ins floats. That's all
02:59 - stuff that you really
02:59 - need to master after
03:01 - that. And you've
03:02 - learned kind of the
03:02 - core basic syntax and
03:04 - language features of
03:05 - Python. Then you're
03:06 - probably going to move
03:07 - into functions.
03:08 - Functions are really
03:09 - important, a huge part
03:10 - of Python, and really
03:12 - will teach you a lot if
03:13 - you can understand how
03:14 - those work.
03:15 - And that leads me
03:16 - nicely into the next
03:17 - thing, which is mutable
03:18 - and immutable data
03:19 - types. So it's actually
03:21 - not known to a lot of
03:22 - beginner programmers
03:23 - that a string is
03:24 - treated very
03:25 - differently in Python
03:26 - than say a list. I can
03:27 - actually pass a list to
03:29 - a function and modify
03:30 - that list what's known
03:32 - as kind of in place
03:33 - rather than actually
03:34 - creating a new version
03:35 - of it. Whereas with a
03:36 - string, I cannot modify
03:38 - the original string
03:39 - that I pass into that
03:40 - function. Kind of hard
03:41 - to explain that without
03:42 - a good example, but
03:43 - that's what I'm trying
03:44 - to get at with mutable
03:45 - verse immutable. Then
03:46 - after you've done that,
03:47 - I would learn about
03:48 - some of the common
03:48 - methods in Python. So
03:50 - for example, if you
03:51 - have a string, how do
03:52 - you turn that string
03:53 - into all uppercase or
03:54 - all lowercase? How do
03:56 - you add a new element
03:57 - to a list or add a new
03:58 - element to a set, just
03:59 - kind of these basics,
04:00 - um, operations and
04:01 - methods, which are
04:02 - really easy to learn
04:03 - and find it, but that
04:04 - you kinda need to know
04:05 - before moving much, um,
04:06 - much further, sorry.
04:08 - Okay. And then finally
04:08 - I would recommend
04:09 - having a basic
04:10 - knowledge of IO
04:12 - operations, so input,
04:13 - output operations. And
04:14 - what I mean by that is
04:15 - really just, how do you
04:16 - read from a text file?
04:17 - How do you write to a
04:18 - text file? Can you open
04:19 - a CSV file, things that
04:21 - you may need to do,
04:22 - especially if you want
04:23 - to actually make some
04:23 - kind of real
04:24 - applications or maybe
04:25 - you want to store
04:26 - something or whatever
04:27 - it may be, you should
04:28 - know kind of those
04:28 - basic topics. So that
04:30 - is going to be the
04:30 - basic section for you
04:32 - guys. I know that's a
04:32 - lot and it sounds
04:33 - really overwhelming. I
04:34 - can promise you these
04:35 - topics are not that
04:36 - hard. Just a bunch of
04:37 - things that I would
04:38 - recommend. You know, if
04:39 - you want to get on your
04:39 - way to becoming a
04:40 - master at Python. So
04:42 - now moving out of the
04:42 - basics, we're going to
04:43 - head into these
04:44 - intermediate skills.
04:45 - Now I'll quickly say
04:46 - that it's very
04:47 - important to practice
04:48 - these skills that
04:49 - you're learning. You
04:50 - need to actually
04:51 - implement this. You
04:52 - need to really use this
04:53 - in a coding project.
04:54 - You shouldn't just be
04:55 - watching videos that
04:56 - tell you about these
04:57 - things. You should be
04:58 - at least following
04:59 - along with those
05:00 - videos, making changes,
05:01 - actually writing that
05:02 - code with your hands by
05:03 - yourself. That is how
05:05 - you're going to get
05:05 - better. But anyways,
05:06 - let's go into the
05:07 - intermediate skills. I
05:08 - have my list here as
05:09 - well. The first thing
05:10 - that I'm going to focus
05:11 - on here and
05:11 - intermediate skills is
05:13 - object oriented,
05:14 - programming,
05:15 - understanding classes
05:16 - and understanding
05:17 - objects. So this goes a
05:18 - really long way, and
05:19 - this is something that
05:20 - you're going to want to
05:20 - understand, especially
05:21 - if you're using other
05:22 - languages other than
05:23 - Python, uh, but super
05:24 - important. It's used
05:25 - pretty much everywhere.
05:27 - And if you only get one
05:28 - thing from this
05:28 - intermediate section,
05:29 - understand that you
05:30 - have to have a really
05:31 - good foundation and
05:32 - object oriented
05:33 - programming to really
05:34 - understand anything
05:35 - above this level.
05:37 - So after that, of
05:38 - course, understanding
05:39 - now how to work with
05:40 - classes, make objects a
05:42 - little bit about basic
05:43 - kind of design patterns
05:44 - in good practices when
05:45 - it comes to object
05:46 - oriented programming.
05:47 - And then after you've
05:48 - learned that I would
05:49 - recommend you move into
05:50 - data structures. So
05:51 - once you have a solid
05:52 - foundation of object
05:53 - oriented, you want to
05:54 - learn about data
05:55 - structures. Now this is
05:56 - intimidating for a lot
05:57 - of people. I'll quickly
05:58 - say that. One of the
05:59 - ways I really practice
06:00 - my knowledge and data
06:01 - structures is using a
06:02 - site called algo
06:03 - expert. It is a paid
06:04 - platform. If you guys
06:05 - are interested in it, I
06:06 - do have a 10% discount
06:08 - code, but that is what
06:08 - I use to prepare for my
06:09 - coding interviews. So I
06:10 - usually talk about it
06:11 - just cause people ask
06:12 - kind of what my
06:13 - resources were. So I'll
06:14 - leave that in the
06:14 - description, but moving
06:15 - forward, you do
06:16 - definitely need to
06:17 - understand data
06:18 - structures, whatever
06:19 - way you decide to
06:20 - learn.
06:20 - That is totally fine,
06:21 - but understanding the
06:22 - cues, um, you know,
06:23 - hash maps, the stacks
06:25 - priority cues, whatever
06:26 - it may be, you just
06:27 - need to understand
06:28 - those topics cause they
06:29 - will come up and
06:30 - understanding the
06:30 - efficiency and time
06:32 - complexity in big O
06:33 - notation is actually
06:34 - really important when
06:35 - it comes to becoming a
06:36 - good programmer. Next,
06:39 - after that, you're
06:39 - going to learn more
06:40 - about some specific
06:41 - Python skills in my
06:42 - opinion, and I will
06:43 - learn about
06:43 - comprehensions. So in
06:45 - Python, there's these
06:45 - really cool, fancy
06:46 - looking things called
06:47 - list comprehensions
06:48 - dictionary,
06:49 - comprehensions. I think
06:50 - you can do them for
06:51 - sets and a bunch of
06:52 - other things as well,
06:53 - but they're pretty much
06:54 - ways of doing kind of
06:55 - one liners. Some people
06:56 - don't like them, but
06:57 - it's a very pathetic
06:58 - thing. And Python is
07:00 - just meaning something
07:00 - that's pretty specific
07:01 - to Python. So
07:02 - definitely learn about
07:03 - list comprehensions,
07:04 - dictionary,
07:04 - comprehensions, and
07:05 - just be able to at
07:06 - least read them and
07:07 - understand them.
07:07 - If you see them next, I
07:09 - would recommend you
07:10 - learn about Lambda
07:10 - functions. So these are
07:12 - anonymous functions.
07:13 - They're actually super
07:14 - useful. I can almost
07:15 - guarantee you'll see
07:16 - them in immediately be
07:16 - like, Oh, I could have
07:17 - used that here. And
07:18 - they're going to be
07:19 - used in the next thing
07:20 - I'm going to talk
07:21 - about, which is the
07:22 - collections module as
07:23 - well as map and filter.
07:25 - So what Lambda is just
07:26 - to give it really a
07:27 - basic explanation,
07:28 - essentially, as an
07:29 - anonymous function, it
07:30 - doesn't have a name.
07:31 - You write it on one
07:32 - line, but you can use
07:34 - it like in really
07:35 - specific places. And it
07:36 - makes a lot of sense.
07:37 - So map and filter are
07:39 - methods that you can
07:39 - use on collections
07:41 - where you will use
07:41 - Lambda within them. So
07:43 - you have to look at
07:43 - that to really
07:44 - understand, but that's
07:45 - why I'm talking about
07:45 - Lambda after that. And
07:47 - after you look into the
07:48 - collections module,
07:49 - which has a built in
07:50 - module in Python, which
07:51 - implements some of the
07:52 - data structures that I
07:53 - talked about
07:53 - previously, you're
07:54 - going to want to look
07:55 - into star ARG and star
07:57 - star quarks.
07:58 - So when it comes to
07:59 - passing arguments or
08:00 - parameters, if you
08:01 - don't know how many
08:02 - you're going to be
08:02 - passing out where you
08:03 - want to set up
08:04 - decorators or more
08:05 - advanced things, you
08:06 - need to understand this
08:07 - thing called orgs,
08:08 - which is Astrix arcs
08:09 - and then asterix,
08:11 - asterix, quarks. And
08:13 - that's a mouthful, but
08:13 - you need to know those.
08:15 - Then I would recommend
08:16 - learning about
08:17 - inheritance. This kind
08:18 - of goes with object
08:19 - oriented programming,
08:20 - but I just wanted to
08:20 - list it as a separate
08:21 - thing in case people
08:22 - didn't think of that.
08:24 - But inheritance is very
08:25 - important as well. And
08:26 - just other object
08:27 - oriented principles
08:28 - like polymorphism and
08:29 - all those kinds of
08:30 - things. Next, I would
08:31 - recommend learning
08:32 - about advanced class
08:33 - behavior in Python. So
08:35 - things like Dunder
08:36 - methods, of course,
08:37 - things like medic
08:38 - classes and more
08:39 - advanced stuff we'll
08:39 - talk about later, but
08:41 - there is these things
08:41 - called Dunder methods.
08:42 - If you've ever seen
08:43 - underscore underscore
08:44 - and knit, that's an
08:45 - example of a special
08:46 - method in Python.
08:48 - Dunder stands for
08:49 - double underscore. If
08:50 - you ever see double
08:51 - underscore, EEQ double
08:53 - underscore, that is
08:54 - pretty much
08:54 - implementing a higher
08:55 - level operation on a
08:57 - class. So just
08:58 - understanding how those
08:58 - works is really
08:59 - important. Next, I
09:01 - would recommend you
09:02 - learn about PIP. So
09:03 - Python package manager,
09:04 - or whatever that
09:05 - actually stands for and
09:07 - how you can install
09:07 - modules and use third
09:09 - party modules in your
09:10 - Python programs. That's
09:11 - really important then
09:12 - understanding Python
09:14 - environments. So using
09:15 - like Anaconda
09:16 - environments, for
09:16 - example, environment
09:18 - variables, and finally
09:19 - making your own
09:20 - modules. So actually
09:21 - separating your code
09:22 - out from this kind of
09:23 - one huge, massive
09:24 - Python file into
09:25 - separate modules that
09:26 - make sense. Now those
09:27 - are kind of the basic
09:28 - things for
09:28 - intermediate. One last
09:30 - thing I'll throw in is
09:30 - asynchronous
09:31 - programming. So async
09:33 - IO, which is a built in
09:34 - module in Python that
09:36 - could technically go
09:37 - into kind of the more
09:37 - advanced section, but
09:38 - I'll throw it in here
09:39 - just in case.
09:40 - So anyways is my list
09:41 - for the intermediate
09:42 - section. This
09:43 - definitely have the
09:44 - most amount of stuff.
09:45 - Now we're going to get
09:46 - into some tricky stuff
09:47 - in the advanced and
09:48 - expert level section.
09:49 - All right. So next
09:50 - we're moving into the
09:50 - advanced section. Okay.
09:52 - I want to be clear here
09:53 - that a lot of the
09:53 - topics in this section
09:54 - you don't really need
09:56 - to know to be good at
09:57 - Python, right? To
09:58 - consider yourself a
09:59 - Python developer to go
10:00 - work as a software
10:01 - engineer, you don't
10:02 - need to know most of
10:03 - what I'm going to
10:04 - describe here. These
10:05 - are kind of nuances,
10:06 - specific things in the
10:07 - language. And if you
10:08 - know the basic and
10:09 - intermediate stuff, you
10:10 - can learn this when you
10:12 - need to learn it kind
10:13 - of thing. So yeah, just
10:14 - don't be discouraged if
10:14 - you don't already know
10:15 - these things. I only
10:16 - recently learned them.
10:17 - I do have a tutorial
10:18 - series on my channel
10:19 - though, that goes
10:20 - through them in what I
10:20 - consider to be a pretty
10:21 - kind of digestible
10:22 - form.
10:23 - Anyways, let's go
10:24 - through the list. The
10:25 - first thing I have is
10:26 - decorators. So if you
10:27 - have like a class
10:28 - method, a static method
10:30 - and UCL at static
10:31 - method at class method
10:33 - at login required,
10:34 - those are examples of
10:35 - decorators, things that
10:36 - decorate a function or
10:38 - a method. I think you
10:39 - can decorate a class as
10:40 - well. Although I might
10:41 - be wrong on that. Uh,
10:42 - we also have have a
10:43 - generators. So
10:44 - generators are a way to
10:45 - kind of utilize memory
10:47 - efficiently in Python.
10:48 - Let's say you have a
10:49 - really long collection
10:50 - or you're generating a
10:52 - collection rather than
10:53 - just generating the
10:54 - entire thing. You can
10:55 - generate one item at a
10:56 - time. If you only need
10:58 - access to one item from
11:00 - that collection at a
11:00 - time, or maybe two
11:02 - items or three items or
11:03 - something like that,
11:03 - you can use a generator
11:04 - to do that. Next. We
11:06 - have context managers
11:07 - you've ever seen that
11:08 - with keywords.
11:09 - So like, you know, with
11:10 - open files, this that's
11:12 - an example of a context
11:13 - manager essentially
11:14 - enforcing that there's
11:15 - kind of a cleanup
11:16 - operation that happens
11:18 - when you break out of
11:19 - that context manager.
11:20 - Next we have medic
11:21 - classes. These are too
11:22 - advanced, even really
11:23 - give a basic
11:23 - description, but they
11:24 - are pretty much how
11:26 - Python classes actually
11:27 - operate and allow you
11:28 - to do some really
11:29 - advanced things with
11:30 - classes, hook into some
11:31 - things that you can't
11:32 - usually hook into
11:33 - unless you know about
11:34 - them. And then next
11:35 - after you learn about
11:36 - decorators, generators,
11:38 - context, pantries, and
11:39 - yeah, medic classes, I
11:40 - would recommend
11:41 - learning about
11:41 - concurrency and
11:42 - parallelism. This
11:44 - arguably could go into
11:45 - the intermediate
11:46 - section. This could be
11:47 - in a different order. I
11:48 - wasn't quite sure where
11:49 - to put this, but I
11:50 - definitely would
11:50 - consider this kind of
11:51 - an advanced topic. So
11:53 - say you have a CPU core
11:54 - that has four
11:55 - processing cores on it.
11:56 - So for actual CPU, how
11:58 - can you use Python to
11:59 - utilize all of those
12:00 - cores? Well, that's
12:02 - when you're going to
12:02 - learn about something
12:03 - called a global
12:04 - interpreter lock, and
12:05 - then you can talk about
12:06 - multiprocessing and
12:07 - multithreading so
12:08 - multithreading is
12:09 - essentially how do we
12:10 - let one part of our
12:12 - program kind of wait
12:13 - while the other program
12:14 - is doing something and
12:15 - how do we not block
12:16 - pieces of code, uh,
12:17 - when they don't need to
12:18 - be blocked. So that's a
12:19 - really vague definition
12:20 - of it, but that should
12:21 - hopefully give you a
12:22 - little bit of an idea.
12:22 - It's pretty much
12:23 - revolving around speed
12:25 - within the Python
12:26 - language, then I would
12:27 - get into testing. So
12:28 - once you've learned all
12:29 - of those, I would learn
12:31 - about unit testing and
12:32 - how you can actually do
12:33 - test driven development
12:34 - in Python or in
12:36 - whatever programming
12:37 - language, just
12:37 - understanding testing
12:38 - pipelines. And all of
12:39 - that is very important.
12:40 - Then I would learn
12:41 - about how you actually
12:42 - build and manipulate
12:43 - packages. So packages
12:45 - are different than
12:46 - modules, but I throw
12:47 - this in the advanced
12:47 - section because if
12:49 - you're writing enough
12:49 - code that you could
12:50 - fill a module, you're
12:51 - probably sorry, a
12:52 - package you're probably
12:53 - advanced. And then
12:55 - finally in the advanced
12:56 - section, I added. This
12:58 - could probably go into
12:59 - the export or master
13:00 - level section, but
13:02 - Ethan is essentially
13:03 - how can you write C
13:04 - code that can interact
13:05 - with Python? So say I
13:07 - have a really
13:07 - performance, heavy
13:08 - piece of code or
13:09 - operation that needs to
13:10 - be done super quickly.
13:12 - And I don't trust
13:12 - Python to do that for
13:13 - me, or Python's just
13:14 - not capable. I can
13:16 - actually write that
13:16 - block of code in C and
13:18 - then link it up to
13:19 - Python using a module
13:20 - called the. All right.
13:22 - So that concludes the
13:22 - idea and section. So
13:24 - now we move into the
13:24 - expert slash master
13:26 - section.
13:27 - Now this section was
13:28 - really hard for me to
13:29 - come up with because I
13:29 - figured that if you
13:30 - made it pass basic
13:31 - intermediate and
13:32 - advanced, you can
13:33 - pretty much learn
13:34 - anything you want. And
13:35 - at this point you
13:36 - probably have an idea
13:37 - of what you want to do,
13:38 - and you don't need me
13:39 - to tell you, but I'm
13:40 - just going to go
13:41 - through some of the
13:41 - things that I would
13:42 - imagine, you know, the
13:43 - master and expert level
13:44 - programmers might do.
13:46 - And these are really
13:46 - specific. So I would
13:47 - say with, once you
13:48 - learn kind of all of
13:49 - these general things
13:50 - related to Python, you
13:52 - know, a lot about the
13:53 - Python programming
13:54 - language, maybe you
13:55 - even understand the
13:55 - interpreters and the
13:56 - compilers and lower
13:58 - level features of
13:59 - Python. So
13:59 - understanding how
14:00 - Python is actually
14:01 - built and really like
14:03 - the low level concepts
14:04 - that most people don't
14:05 - care to get into.
14:07 - I'd classify that as
14:08 - something that most
14:08 - experts and master
14:09 - level Python
14:10 - programmers should
14:11 - know, then you're going
14:13 - to be singing, talking
14:14 - about what am I doing
14:15 - with Python? So where
14:16 - am I using these
14:17 - skills? Maybe you're a
14:18 - web developer. Maybe
14:19 - you're making
14:20 - professional websites.
14:21 - Maybe you're doing
14:22 - artificial intelligence
14:23 - and machine learning.
14:24 - Maybe you're a data
14:25 - scientist. Maybe you're
14:26 - working with
14:27 - microcontrollers. Maybe
14:29 - you're scripting, maybe
14:30 - you're doing ethical.
14:30 - Hacking is about a
14:32 - million different
14:32 - things you could do
14:33 - once you get to this
14:34 - level and where you're
14:36 - going to go as a master
14:37 - or expert, is really
14:38 - based on where your
14:39 - expertise is and what
14:40 - you actually want to
14:41 - do. Maybe your writing
14:42 - breasts, API APIs,
14:43 - maybe you're actually
14:45 - creating these
14:45 - artificial intelligence
14:46 - models or analyzing
14:48 - data for a company. And
14:49 - that's why I can't
14:50 - really give any
14:50 - concrete examples for
14:52 - master or expert level
14:53 - things you need to know
14:54 - in Python.
14:55 - But I would say once
14:56 - you get to that level,
14:57 - you kind of need to
14:58 - focus in on one
14:59 - specific area or maybe
15:01 - you're good at all
15:02 - those things, but you
15:02 - need to now learn about
15:03 - modules. You need to
15:04 - learn about TensorFlow
15:05 - or Keras and actually
15:07 - figure out how you can
15:08 - take all of this
15:08 - theoretical knowledge
15:10 - of the language and
15:11 - apply that into some
15:12 - kind of job into some
15:13 - kind of business and
15:14 - actually use those
15:15 - skills. So I'm going to
15:16 - keep this section
15:17 - short. That's all I
15:18 - have for expert or
15:19 - master. I apologize if
15:20 - that may have
15:21 - disappointed you, but I
15:22 - think that's really the
15:23 - reality when you get
15:24 - that good. Now you're
15:25 - doing something with
15:26 - the code, you know,
15:27 - right. Maybe you're
15:28 - teaching it, maybe
15:29 - you're, you know, AI
15:30 - ML, data science, web
15:32 - dev, whatever it may
15:33 - be, you're doing
15:34 - something with it. So
15:35 - anyways, that has
15:36 - pretty much been my
15:37 - video. I wanted to kind
15:38 - of go through and just
15:39 - quickly list off all of
15:40 - the different topics
15:41 - and things. I think you
15:42 - should know if you're
15:43 - working towards
15:44 - becoming a master in
15:45 - Python. So if this
15:46 - video helped you out,
15:47 - please do make sure you
15:48 - leave a, like subscribe
15:49 - to the channel. And of
15:50 - course I will see you
15:51 - all again in another
15:52 - YouTube. Yeah,
15:53 - Yeah.

Cleaned transcript:

Hello everybody. And welcome back to the YouTube video. So in today's video would all be doing is discussing the topics and skills that you need to learn to become a master at the Python programming language. Now I've broken these skills up into four main categories. Those are basic intermediate advanced, and then finally expert slash master level. And if you're someone who's a beginner programmer, you can kind of treat this video as a curriculum or kind of a general guideline on the skills that you should learn. And in what order you should learn them. If you're someone who is more intermediate or we consider yourself advanced, then maybe I'll list some skills and topics you haven't heard of before. And I can give you some ideas for things that you may want to learn to really make your Python skills just that much better. So without further ado, let's go ahead and get started and talk about the skills and topics you need to learn to become a master at the Python programming language. So a quick note here that I have a ton of resources related to the topics I'm going to be mentioning here, especially in the beginner and intermediate sections. So I will link those resources in the description and I'll leave kind of a list of the topics that I've talked about here. So if you're getting lost or if, you know, you think I'm going to quickly just consult the description and it will have kind of like a mini transcript of what we've talked about in this video. So let's get started with the basic section. So this is really focusing on just fundamental programming concepts and really understanding like the basic, basic building blocks of programming. So the core syntax, the way a program actually reads, uh, the way the different lines of codes are going to be executed, conditions, variables, all that kind of stuff. So to give us kind of a formal list of the topics that I would learn in some kind of relative order, some of these will be out of order. I would go with, and I have a list kind of in front of me right here, variables. So you want to understand how variables work. So, you know, X equals one, Y equals two X equals Y what does X equal? You know, just the basics like that and understanding why we even use variables in programming then probably moving forward into conditions. So Boolean conditions, you know, how do we compare two different variables together? How do we check if the user typed something in and it's equal to something else, chaining conditionals together. So, okay. How can we make a chain conditional that has more than one condition in it? How do we evaluate, you know, this condition and that condition at the same time, next that's going to be operators that you want to learn. So how do we add two variables subtract two variables. What is the modulates operator do into your division? Just these basic tools that you're going to need to be using. As soon as you get out of this basic level, then after that, it's probably going to go to control flow. So it's things like if else, else, if you're going to want to master those, then just learning about loops and Iterable. So for loops, while loops, how do we loop through a list? How do we loop through a dictionary that leads me nicely into what else I would recommend learning, which is basic data structures in Python. So understanding lists, understanding, sets, understanding dictionaries, what about strings booleans ins floats. That's all stuff that you really need to master after that. And you've learned kind of the core basic syntax and language features of Python. Then you're probably going to move into functions. Functions are really important, a huge part of Python, and really will teach you a lot if you can understand how those work. And that leads me nicely into the next thing, which is mutable and immutable data types. So it's actually not known to a lot of beginner programmers that a string is treated very differently in Python than say a list. I can actually pass a list to a function and modify that list what's known as kind of in place rather than actually creating a new version of it. Whereas with a string, I cannot modify the original string that I pass into that function. Kind of hard to explain that without a good example, but that's what I'm trying to get at with mutable verse immutable. Then after you've done that, I would learn about some of the common methods in Python. So for example, if you have a string, how do you turn that string into all uppercase or all lowercase? How do you add a new element to a list or add a new element to a set, just kind of these basics, um, operations and methods, which are really easy to learn and find it, but that you kinda need to know before moving much, um, much further, sorry. Okay. And then finally I would recommend having a basic knowledge of IO operations, so input, output operations. And what I mean by that is really just, how do you read from a text file? How do you write to a text file? Can you open a CSV file, things that you may need to do, especially if you want to actually make some kind of real applications or maybe you want to store something or whatever it may be, you should know kind of those basic topics. So that is going to be the basic section for you guys. I know that's a lot and it sounds really overwhelming. I can promise you these topics are not that hard. Just a bunch of things that I would recommend. You know, if you want to get on your way to becoming a master at Python. So now moving out of the basics, we're going to head into these intermediate skills. Now I'll quickly say that it's very important to practice these skills that you're learning. You need to actually implement this. You need to really use this in a coding project. You shouldn't just be watching videos that tell you about these things. You should be at least following along with those videos, making changes, actually writing that code with your hands by yourself. That is how you're going to get better. But anyways, let's go into the intermediate skills. I have my list here as well. The first thing that I'm going to focus on here and intermediate skills is object oriented, programming, understanding classes and understanding objects. So this goes a really long way, and this is something that you're going to want to understand, especially if you're using other languages other than Python, uh, but super important. It's used pretty much everywhere. And if you only get one thing from this intermediate section, understand that you have to have a really good foundation and object oriented programming to really understand anything above this level. So after that, of course, understanding now how to work with classes, make objects a little bit about basic kind of design patterns in good practices when it comes to object oriented programming. And then after you've learned that I would recommend you move into data structures. So once you have a solid foundation of object oriented, you want to learn about data structures. Now this is intimidating for a lot of people. I'll quickly say that. One of the ways I really practice my knowledge and data structures is using a site called algo expert. It is a paid platform. If you guys are interested in it, I do have a 10% discount code, but that is what I use to prepare for my coding interviews. So I usually talk about it just cause people ask kind of what my resources were. So I'll leave that in the description, but moving forward, you do definitely need to understand data structures, whatever way you decide to learn. That is totally fine, but understanding the cues, um, you know, hash maps, the stacks priority cues, whatever it may be, you just need to understand those topics cause they will come up and understanding the efficiency and time complexity in big O notation is actually really important when it comes to becoming a good programmer. Next, after that, you're going to learn more about some specific Python skills in my opinion, and I will learn about comprehensions. So in Python, there's these really cool, fancy looking things called list comprehensions dictionary, comprehensions. I think you can do them for sets and a bunch of other things as well, but they're pretty much ways of doing kind of one liners. Some people don't like them, but it's a very pathetic thing. And Python is just meaning something that's pretty specific to Python. So definitely learn about list comprehensions, dictionary, comprehensions, and just be able to at least read them and understand them. If you see them next, I would recommend you learn about Lambda functions. So these are anonymous functions. They're actually super useful. I can almost guarantee you'll see them in immediately be like, Oh, I could have used that here. And they're going to be used in the next thing I'm going to talk about, which is the collections module as well as map and filter. So what Lambda is just to give it really a basic explanation, essentially, as an anonymous function, it doesn't have a name. You write it on one line, but you can use it like in really specific places. And it makes a lot of sense. So map and filter are methods that you can use on collections where you will use Lambda within them. So you have to look at that to really understand, but that's why I'm talking about Lambda after that. And after you look into the collections module, which has a built in module in Python, which implements some of the data structures that I talked about previously, you're going to want to look into star ARG and star star quarks. So when it comes to passing arguments or parameters, if you don't know how many you're going to be passing out where you want to set up decorators or more advanced things, you need to understand this thing called orgs, which is Astrix arcs and then asterix, asterix, quarks. And that's a mouthful, but you need to know those. Then I would recommend learning about inheritance. This kind of goes with object oriented programming, but I just wanted to list it as a separate thing in case people didn't think of that. But inheritance is very important as well. And just other object oriented principles like polymorphism and all those kinds of things. Next, I would recommend learning about advanced class behavior in Python. So things like Dunder methods, of course, things like medic classes and more advanced stuff we'll talk about later, but there is these things called Dunder methods. If you've ever seen underscore underscore and knit, that's an example of a special method in Python. Dunder stands for double underscore. If you ever see double underscore, EEQ double underscore, that is pretty much implementing a higher level operation on a class. So just understanding how those works is really important. Next, I would recommend you learn about PIP. So Python package manager, or whatever that actually stands for and how you can install modules and use third party modules in your Python programs. That's really important then understanding Python environments. So using like Anaconda environments, for example, environment variables, and finally making your own modules. So actually separating your code out from this kind of one huge, massive Python file into separate modules that make sense. Now those are kind of the basic things for intermediate. One last thing I'll throw in is asynchronous programming. So async IO, which is a built in module in Python that could technically go into kind of the more advanced section, but I'll throw it in here just in case. So anyways is my list for the intermediate section. This definitely have the most amount of stuff. Now we're going to get into some tricky stuff in the advanced and expert level section. All right. So next we're moving into the advanced section. Okay. I want to be clear here that a lot of the topics in this section you don't really need to know to be good at Python, right? To consider yourself a Python developer to go work as a software engineer, you don't need to know most of what I'm going to describe here. These are kind of nuances, specific things in the language. And if you know the basic and intermediate stuff, you can learn this when you need to learn it kind of thing. So yeah, just don't be discouraged if you don't already know these things. I only recently learned them. I do have a tutorial series on my channel though, that goes through them in what I consider to be a pretty kind of digestible form. Anyways, let's go through the list. The first thing I have is decorators. So if you have like a class method, a static method and UCL at static method at class method at login required, those are examples of decorators, things that decorate a function or a method. I think you can decorate a class as well. Although I might be wrong on that. Uh, we also have have a generators. So generators are a way to kind of utilize memory efficiently in Python. Let's say you have a really long collection or you're generating a collection rather than just generating the entire thing. You can generate one item at a time. If you only need access to one item from that collection at a time, or maybe two items or three items or something like that, you can use a generator to do that. Next. We have context managers you've ever seen that with keywords. So like, you know, with open files, this that's an example of a context manager essentially enforcing that there's kind of a cleanup operation that happens when you break out of that context manager. Next we have medic classes. These are too advanced, even really give a basic description, but they are pretty much how Python classes actually operate and allow you to do some really advanced things with classes, hook into some things that you can't usually hook into unless you know about them. And then next after you learn about decorators, generators, context, pantries, and yeah, medic classes, I would recommend learning about concurrency and parallelism. This arguably could go into the intermediate section. This could be in a different order. I wasn't quite sure where to put this, but I definitely would consider this kind of an advanced topic. So say you have a CPU core that has four processing cores on it. So for actual CPU, how can you use Python to utilize all of those cores? Well, that's when you're going to learn about something called a global interpreter lock, and then you can talk about multiprocessing and multithreading so multithreading is essentially how do we let one part of our program kind of wait while the other program is doing something and how do we not block pieces of code, uh, when they don't need to be blocked. So that's a really vague definition of it, but that should hopefully give you a little bit of an idea. It's pretty much revolving around speed within the Python language, then I would get into testing. So once you've learned all of those, I would learn about unit testing and how you can actually do test driven development in Python or in whatever programming language, just understanding testing pipelines. And all of that is very important. Then I would learn about how you actually build and manipulate packages. So packages are different than modules, but I throw this in the advanced section because if you're writing enough code that you could fill a module, you're probably sorry, a package you're probably advanced. And then finally in the advanced section, I added. This could probably go into the export or master level section, but Ethan is essentially how can you write C code that can interact with Python? So say I have a really performance, heavy piece of code or operation that needs to be done super quickly. And I don't trust Python to do that for me, or Python's just not capable. I can actually write that block of code in C and then link it up to Python using a module called the. All right. So that concludes the idea and section. So now we move into the expert slash master section. Now this section was really hard for me to come up with because I figured that if you made it pass basic intermediate and advanced, you can pretty much learn anything you want. And at this point you probably have an idea of what you want to do, and you don't need me to tell you, but I'm just going to go through some of the things that I would imagine, you know, the master and expert level programmers might do. And these are really specific. So I would say with, once you learn kind of all of these general things related to Python, you know, a lot about the Python programming language, maybe you even understand the interpreters and the compilers and lower level features of Python. So understanding how Python is actually built and really like the low level concepts that most people don't care to get into. I'd classify that as something that most experts and master level Python programmers should know, then you're going to be singing, talking about what am I doing with Python? So where am I using these skills? Maybe you're a web developer. Maybe you're making professional websites. Maybe you're doing artificial intelligence and machine learning. Maybe you're a data scientist. Maybe you're working with microcontrollers. Maybe you're scripting, maybe you're doing ethical. Hacking is about a million different things you could do once you get to this level and where you're going to go as a master or expert, is really based on where your expertise is and what you actually want to do. Maybe your writing breasts, API APIs, maybe you're actually creating these artificial intelligence models or analyzing data for a company. And that's why I can't really give any concrete examples for master or expert level things you need to know in Python. But I would say once you get to that level, you kind of need to focus in on one specific area or maybe you're good at all those things, but you need to now learn about modules. You need to learn about TensorFlow or Keras and actually figure out how you can take all of this theoretical knowledge of the language and apply that into some kind of job into some kind of business and actually use those skills. So I'm going to keep this section short. That's all I have for expert or master. I apologize if that may have disappointed you, but I think that's really the reality when you get that good. Now you're doing something with the code, you know, right. Maybe you're teaching it, maybe you're, you know, AI ML, data science, web dev, whatever it may be, you're doing something with it. So anyways, that has pretty much been my video. I wanted to kind of go through and just quickly list off all of the different topics and things. I think you should know if you're working towards becoming a master in Python. So if this video helped you out, please do make sure you leave a, like subscribe to the channel. And of course I will see you all again in another YouTube. Yeah, Yeah.
