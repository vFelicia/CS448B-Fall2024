With timestamps:

00:00 - hey guys and welcome back to the fifth
00:03 - video in my advanced Python programming
00:05 - tutorials in today's video I'm gonna be
00:08 - going over lambda I think that's the way
00:11 - you say it at least excuse me if I'm
00:13 - gonna say around in this whole video
00:14 - which pretty much stands for an
00:15 - anonymous function now these are
00:18 - extremely useful and they don't take up
00:21 - very much space in your program which is
00:22 - really good and I'm going to show you
00:23 - exactly how they work and what they do
00:25 - so I first wanted to start off by
00:27 - defining a regular function again this
00:29 - is one example I've been using a lot I'm
00:31 - just gonna say defined func say like
00:33 - return X plus 5 that's what our function
00:35 - is gonna do it's simply gonna add 5 to
00:38 - the number whatever we give it's alright
00:39 - if I print something like funk of - we
00:42 - should get 7 there we go and we get 7 to
00:46 - the screen now for an extremely basic
00:48 - function like this on oftentimes you
00:51 - don't want to have to write a function
00:53 - definition and take up like two lines of
00:56 - code like this it's easier to write it
00:58 - in a different way and it looks like
01:00 - more smooth maybe more slick in your
01:02 - program and I'm going to show you how to
01:03 - do that so that's one way that we can do
01:05 - it by making a function like that
01:06 - another way and this is using lambda is
01:09 - to do something like this so the name of
01:10 - our function
01:11 - I say func I'll say func - is equal to
01:14 - and then we're going to type our keyword
01:16 - lambda like this you can see it
01:18 - highlights in orange just like our
01:21 - definition key here for our function
01:22 - we're gonna give it a parameter or
01:24 - multiple parameters I think you can use
01:26 - multiple parameters at least and then
01:29 - we're simply gonna state what it returns
01:30 - so the way this works is you type lambda
01:33 - the parameter or multiple parameters
01:36 - which we're gonna try in a second a
01:37 - colon and then whatever value you're
01:40 - gonna return so the thing with lambda is
01:42 - it's used when you have one returned X
01:46 - or one expression in your function so
01:48 - something like this so again I can do
01:50 - return x plus 5 over 4 like I could do a
01:53 - whole expression as long as that
01:54 - expression fits on one line then that's
01:57 - perfectly fine to return and I'll show
01:59 - you how this works so if I say print
02:03 - func - and I just give a number like 9
02:09 - there we go we get 14 and seven so
02:13 - it works just like a regular function
02:14 - and it kind of just looks like a
02:15 - variable so we're saying function two is
02:17 - equal to an anonymous function that's
02:20 - what lambda stands for an anonymous
02:21 - function with the parameter access
02:24 - simply gonna return X plus five now
02:26 - these are really useful for using with
02:28 - the map function and the filter function
02:29 - which I'm gonna show you later so you
02:31 - don't have to constantly create a new
02:32 - function up at the top of your program
02:34 - and you can also use them inside of
02:37 - other functions so let's let's start by
02:39 - doing that
02:40 - okay I guess a func to simply just gonna
02:42 - copy it and paste it into my other
02:45 - function and then I'm a return func two
02:48 - of x plus 85 let's try that and now if I
02:54 - call my function we can see that we get
02:57 - 92 like so now this again is really
03:01 - useful because you want to oftentimes
03:05 - create another function or use something
03:07 - multiple times within a function but you
03:09 - might not want to like write a new one
03:11 - up here like funk too
03:13 - you just want it to be only used within
03:15 - that function and in that case you would
03:16 - use lambda as it keeps it all contained
03:18 - and have to be top your function you can
03:20 - write a bunch of other many functions
03:22 - that you can then use multiple times
03:24 - within your program it's hard to see the
03:26 - use case for it in small examples like
03:27 - this but they are extremely useful
03:29 - especially in like more in-depth code
03:33 - longer code so now I'm going to show you
03:35 - with multiple parameters so I believe
03:37 - and I'm not sure but we'll see if we can
03:39 - do this so we're gonna try I'm going to
03:42 - make func three is equal to lambda X Y
03:47 - and then somebody to get returning X
03:49 - plus y so let's just see if we call fun
03:51 - and let's give it value like five and
03:54 - five and we'll print that to the screen
03:57 - as well see there we go so that does
04:02 - work as well so you can give this
04:04 - infinitely num an infinite amount of
04:06 - parameters just like you'd be able to do
04:08 - something like this in our function and
04:10 - you can also I believe do optional
04:12 - parameter so you do something like y
04:13 - equals four and then if I put five we
04:17 - should be getting a value of nine here
04:18 - and there we are so you can use optional
04:20 - parameters you can do everything that
04:22 - you'd be able to do with a regular
04:24 - function except you can just return one
04:26 - expression like that okay so let's now
04:30 - use this with our map function and our
04:33 - filter function so in earlier videos I
04:37 - used the map function and to recall what
04:39 - that does is going to create a list
04:40 - quickly say a equals one two three four
04:44 - five six seven eight nine
04:45 - oops nine and ten like that and I'm now
04:50 - just gonna say let's say new this equals
04:55 - list map and then we're gonna have a
05:00 - function in this case I'll just write
05:01 - func for now and then we give it a list
05:03 - right like okay so what I want to do now
05:06 - is I actually want to just put a
05:09 - function in here without having to
05:11 - create a new one up here like I don't
05:12 - want to define func so this is a perfect
05:15 - example where we can use the lambda we
05:17 - don't even have to make a variable like
05:19 - equal to the function anymore we can
05:20 - just type lambda right in here so lambda
05:22 - and there was so X and so X plus five so
05:26 - now we again should simply just be
05:28 - adding five to each of the elements in a
05:30 - and then practice over spread new listed
05:32 - screen now and see if this is indeed
05:35 - working and there you go we can see we
05:37 - start at one so six all the way up to 15
05:40 - like so again that saves us now having
05:43 - to make a function at the top of our
05:45 - program that we're only gonna use for
05:46 - one specific case which is this map
05:49 - function
05:49 - I again we also don't have to create
05:52 - like func equals lambda up here what you
05:56 - can if you want if you're gonna use it
05:57 - in a different case you can just type it
05:59 - right in the same line as your map
06:02 - function or as your filled with your
06:03 - filter function so this works the same
06:04 - with the filter function of your filter
06:07 - like so it's gonna be our function I
06:10 - guess yeah I believe this works with the
06:14 - fields for me
06:15 - oh yes it does okay so what this is
06:17 - gonna do now is we're just going to
06:19 - return X modulus two equals equals zero
06:22 - so again now given X we're gonna see if
06:24 - it's divisible by two if it is we return
06:27 - true we add that element to the list
06:28 - otherwise we will not be check now we
06:30 - get two four six eight ten and there we
06:33 - go so you can see why lambda is
06:35 - extremely useful it's really cool
06:37 - especially if you want to create a lot
06:39 - of mini fun
06:39 - you want to create functions within
06:41 - functions and say keep everything nice
06:43 - and organized and it's a nice trick to
06:44 - be able to use in Python so with that
06:47 - being said that's been the end of the
06:48 - video today if you guys get in journey
06:50 - to learn something please make sure you
06:51 - leave a like and subscribe to the
06:53 - channel and I will see you again in the
06:54 - next tutorial
06:56 - [Music]

Cleaned transcript:

hey guys and welcome back to the fifth video in my advanced Python programming tutorials in today's video I'm gonna be going over lambda I think that's the way you say it at least excuse me if I'm gonna say around in this whole video which pretty much stands for an anonymous function now these are extremely useful and they don't take up very much space in your program which is really good and I'm going to show you exactly how they work and what they do so I first wanted to start off by defining a regular function again this is one example I've been using a lot I'm just gonna say defined func say like return X plus 5 that's what our function is gonna do it's simply gonna add 5 to the number whatever we give it's alright if I print something like funk of we should get 7 there we go and we get 7 to the screen now for an extremely basic function like this on oftentimes you don't want to have to write a function definition and take up like two lines of code like this it's easier to write it in a different way and it looks like more smooth maybe more slick in your program and I'm going to show you how to do that so that's one way that we can do it by making a function like that another way and this is using lambda is to do something like this so the name of our function I say func I'll say func is equal to and then we're going to type our keyword lambda like this you can see it highlights in orange just like our definition key here for our function we're gonna give it a parameter or multiple parameters I think you can use multiple parameters at least and then we're simply gonna state what it returns so the way this works is you type lambda the parameter or multiple parameters which we're gonna try in a second a colon and then whatever value you're gonna return so the thing with lambda is it's used when you have one returned X or one expression in your function so something like this so again I can do return x plus 5 over 4 like I could do a whole expression as long as that expression fits on one line then that's perfectly fine to return and I'll show you how this works so if I say print func and I just give a number like 9 there we go we get 14 and seven so it works just like a regular function and it kind of just looks like a variable so we're saying function two is equal to an anonymous function that's what lambda stands for an anonymous function with the parameter access simply gonna return X plus five now these are really useful for using with the map function and the filter function which I'm gonna show you later so you don't have to constantly create a new function up at the top of your program and you can also use them inside of other functions so let's let's start by doing that okay I guess a func to simply just gonna copy it and paste it into my other function and then I'm a return func two of x plus 85 let's try that and now if I call my function we can see that we get 92 like so now this again is really useful because you want to oftentimes create another function or use something multiple times within a function but you might not want to like write a new one up here like funk too you just want it to be only used within that function and in that case you would use lambda as it keeps it all contained and have to be top your function you can write a bunch of other many functions that you can then use multiple times within your program it's hard to see the use case for it in small examples like this but they are extremely useful especially in like more indepth code longer code so now I'm going to show you with multiple parameters so I believe and I'm not sure but we'll see if we can do this so we're gonna try I'm going to make func three is equal to lambda X Y and then somebody to get returning X plus y so let's just see if we call fun and let's give it value like five and five and we'll print that to the screen as well see there we go so that does work as well so you can give this infinitely num an infinite amount of parameters just like you'd be able to do something like this in our function and you can also I believe do optional parameter so you do something like y equals four and then if I put five we should be getting a value of nine here and there we are so you can use optional parameters you can do everything that you'd be able to do with a regular function except you can just return one expression like that okay so let's now use this with our map function and our filter function so in earlier videos I used the map function and to recall what that does is going to create a list quickly say a equals one two three four five six seven eight nine oops nine and ten like that and I'm now just gonna say let's say new this equals list map and then we're gonna have a function in this case I'll just write func for now and then we give it a list right like okay so what I want to do now is I actually want to just put a function in here without having to create a new one up here like I don't want to define func so this is a perfect example where we can use the lambda we don't even have to make a variable like equal to the function anymore we can just type lambda right in here so lambda and there was so X and so X plus five so now we again should simply just be adding five to each of the elements in a and then practice over spread new listed screen now and see if this is indeed working and there you go we can see we start at one so six all the way up to 15 like so again that saves us now having to make a function at the top of our program that we're only gonna use for one specific case which is this map function I again we also don't have to create like func equals lambda up here what you can if you want if you're gonna use it in a different case you can just type it right in the same line as your map function or as your filled with your filter function so this works the same with the filter function of your filter like so it's gonna be our function I guess yeah I believe this works with the fields for me oh yes it does okay so what this is gonna do now is we're just going to return X modulus two equals equals zero so again now given X we're gonna see if it's divisible by two if it is we return true we add that element to the list otherwise we will not be check now we get two four six eight ten and there we go so you can see why lambda is extremely useful it's really cool especially if you want to create a lot of mini fun you want to create functions within functions and say keep everything nice and organized and it's a nice trick to be able to use in Python so with that being said that's been the end of the video today if you guys get in journey to learn something please make sure you leave a like and subscribe to the channel and I will see you again in the next tutorial
