With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - youtube video so in today's video what
00:13 - i'm going to be doing is going over pie
00:15 - game for beginners so as you can already
00:17 - see here i have a little game on my
00:19 - screen the purpose of this video is
00:21 - going to be to introduce you to the
00:23 - module called pygame in python i'm going
00:25 - to cover a lot of stuff in this video
00:28 - including sound effects images moving
00:30 - objects collision most of the
00:32 - fundamental and main things you need to
00:34 - know to actually create a game and we'll
00:36 - give you an idea of what we're going to
00:37 - be building it's nothing complex this
00:39 - isn't meant to be fancy again it's just
00:41 - meant to teach you how to work with this
00:43 - module and i figured we could do this
00:45 - kind of really simple two-player game to
00:47 - give you an idea of how everything works
00:49 - in pi game so you can see we kind of
00:50 - have two spaceships here they can move
00:52 - around the screen and i'm moving these
00:54 - with the same keyboard so i have wasd
00:57 - moving the one on the left and i have
00:58 - the arrow keys moving the one on the
01:00 - right and when i press the left or right
01:02 - control key that is actually firing
01:04 - bullets now there is sound effects i
01:06 - don't know if you guys can hear them
01:07 - i'll stop talking and hit it for a
01:09 - second
01:13 - so you might be able to hear that either
01:14 - way there is sound effects we'll be
01:16 - adding that in there and we'll show you
01:17 - how this works and you can see that once
01:19 - uh one of the enemies loses so they run
01:22 - out of health you can see that at the
01:23 - top it says boom yellow wins and even
01:25 - though i have these on the wrong side
01:28 - we'll fix that in in the original video
01:30 - anyways you get the idea this is the
01:31 - yellow spaceship this is the red
01:33 - spaceship really they should be on
01:35 - opposite sides for the tutorial we'll
01:37 - fix that anyways let's go ahead and get
01:39 - started but before we do i need to
01:40 - quickly thank the sponsor of this video
01:42 - before we get started i need to thank
01:44 - the sponsor of this video which is alco
01:46 - expert oligoexpert is the best platform
01:49 - to use when preparing for your software
01:50 - engineering coding interviews as the
01:52 - highest quality coding interview
01:54 - practice questions with over 115
01:56 - practice questions detailed solutions in
01:59 - nine of the most popular programming
02:01 - languages a feature-packed browser-based
02:03 - coding environment extensive test suites
02:06 - and conceptual overviews and code
02:07 - walkthroughs for each and every problem
02:10 - algo expert is the best resource to use
02:12 - to ace your coding interviews algo
02:14 - expert also has a data structures crash
02:16 - course coding interview assessments and
02:18 - a brand new mock interviews feature i
02:21 - can highly recommend algo expert as a
02:23 - former customer myself and now an
02:25 - official instructor on the platform get
02:27 - started using algo expert today by
02:29 - hitting the link in the description and
02:31 - using the code tech with tim for a
02:32 - discount on the platform
02:35 - all right so big thank you again to that
02:36 - sponsor now let's go ahead and continue
02:38 - so the first thing we need to do when
02:40 - we're going to be working with the
02:41 - module called pi game is we need to
02:43 - install it on our computer now for some
02:45 - people this can be tricky it really
02:47 - shouldn't be that difficult but what you
02:48 - need to do is open your command prompt
02:50 - or open some terminal window depending
02:52 - on what operating system you're on if
02:53 - you're on windows you're going to open
02:54 - command prompt if you're on mac or linux
02:56 - you're going to open your terminal now
02:58 - this command may vary based on your
03:00 - operating system i'll go through all of
03:01 - the different variations but the first
03:03 - thing you want to type inside of your
03:04 - command prompt doesn't matter what
03:06 - directory you're in is pip install and
03:08 - then simply the module pi game go ahead
03:11 - and press enter that should install
03:13 - pygame in your python interpreter and
03:16 - your python environment then you should
03:18 - be good to go now for some reason this
03:19 - isn't working or when we get to the next
03:21 - step which is just testing our code and
03:23 - importing pi game you don't see anything
03:25 - happening try the following command pip3
03:28 - install pi game so just add a three to
03:30 - the end of pip there uh oops i didn't
03:32 - mean to delete the three uh but pip
03:34 - three install pi game hopefully that one
03:36 - should work for you and if neither of
03:37 - those work for you then try the
03:38 - following python hyphen m pip install
03:43 - and then pygame like that and if this
03:45 - one doesn't work either then do the same
03:47 - variation so add python 3 hyphen m pip
03:50 - install pi game if none of those four
03:52 - commands work for you and you can't uh
03:54 - install pygame i'll leave links to
03:55 - videos in the description that show you
03:57 - how to fix your pip they're not directly
03:59 - called that but actually this will be
04:00 - perfect for this because they are how to
04:02 - install pi game on mac and windows
04:04 - respectively anyways let's continue now
04:06 - we have pi game installed we're going to
04:08 - head to some environment that we're
04:09 - going to write code in you can do this
04:11 - in the default idle so the thing that
04:14 - just comes with the basic python
04:16 - installation or you can use something
04:17 - like vs code sublime text whatever you
04:20 - want so i'm going to be using vs code
04:22 - this just makes it easy for me for me to
04:24 - run my code by pressing the run button
04:26 - up here but again feel free to use
04:27 - whatever you want you don't need to use
04:29 - vs code it doesn't matter what you use
04:30 - we're just going to do everything in one
04:31 - file anyways now that reminds me before
04:34 - we actually jump in we need to download
04:35 - some assets for this game so you saw i
04:37 - had a background i had those spaceships
04:39 - all of the stuff including the code for
04:42 - this tutorial is going to be available
04:44 - on github so i will leave a link in the
04:46 - description what you're going to need to
04:47 - do is download this assets folder mainly
04:50 - you can download the code file as well
04:52 - which will be uploaded here with the
04:54 - entire code for this video afterwards
04:56 - but to do that you're just going to
04:57 - press the link to bring you a page that
04:58 - looks like this you're going to press
05:00 - code and then download zip now if you
05:02 - understand how to use github obviously i
05:04 - don't need to tell you how to do this
05:05 - but downloading the zip file so let's
05:07 - actually just do it on here to make sure
05:09 - everything is going to be all good so
05:10 - i'll put that into my downloads then
05:13 - you're going to open up the zip folder
05:14 - you're going to go inside the interior
05:16 - folder you're going to grab the assets
05:18 - folder on windows i usually like to just
05:21 - cut it so ctrl x you can also copy it
05:23 - and you're going to paste it beside
05:25 - wherever your python file is so if you
05:27 - have your python file on your desktop i
05:29 - would recommend first of all you put it
05:30 - in a folder called you know pygame for
05:32 - beginners or whatever then just put this
05:35 - file beside it so that you have the
05:36 - assets folder and then whatever your
05:38 - main python file is is in the same
05:40 - directory that's really important so
05:41 - anyways do that and then we can go ahead
05:43 - and continue alright so apologize for
05:45 - the intro but let's get into this the
05:46 - first thing we're going to do now and
05:48 - notice that i have pi game tutorial and
05:49 - then i have my assets in my main.pi file
05:52 - obviously create a new python file and
05:54 - inside of that file
05:56 - you're going to type import pi game this
05:58 - is just to make sure that this is
05:59 - working so we're going to import pi game
06:01 - then we're going to run the code you can
06:03 - see it kind of pops up a little terminal
06:04 - right here and notice it says module not
06:06 - found no module named pi game now i'll
06:09 - fix that on my end but make sure you
06:10 - guys don't get this message if you get
06:12 - hey welcome to pi game or some little
06:14 - text like that you're good to go and
06:16 - you're ready to continue so i'll be back
06:17 - after i fix this for myself all right so
06:20 - i'm back you can see i'm now getting the
06:21 - message pygame 1.9.6 doesn't matter what
06:24 - version you're using hello from the pi
06:25 - game community and we're all good to go
06:27 - and get started now one last note here
06:30 - i'm just trying to cover all of the
06:31 - issues that happen do not name your
06:33 - python file pi game if you do that it
06:35 - will not work so just name it anything
06:37 - other than pi game very important
06:40 - okay now that we have that let's get
06:41 - started so first of all what is pi game
06:43 - well pi game is a 2d graphics library
06:46 - that lets you make little games it's
06:48 - actually really powerful i've created a
06:49 - ton of awesome projects using pi game
06:51 - and well it's pretty simple to actually
06:53 - set up the first thing that we need to
06:54 - do whenever we kind of start making a
06:57 - game in pi game is we need to make the
06:59 - main surface now i usually just refer to
07:01 - this as the window again you can call it
07:03 - whatever you want but in pi game
07:05 - everything that we're working with is
07:07 - usually referred to as a surface so you
07:09 - might hear me use that term but anyways
07:11 - i'm going to start in all capitals i'll
07:13 - tell you why in a second i'm going to
07:14 - say win equals pi game dot display dot
07:18 - set underscore mode and then inside of
07:21 - here we're going to put a tuple and
07:22 - we're going to put the width and the
07:24 - height that we want the window to be so
07:26 - it's usually good practice to define two
07:28 - variables above this that says width
07:30 - comma height and then is equal to
07:32 - whatever you want the width and the
07:33 - height of this game to be now i'm going
07:35 - to make mine 900 by 500 if you're on a
07:37 - really low resolution display this might
07:40 - take up like a large chunk of the
07:41 - display so feel free to scale these
07:43 - numbers down it doesn't really matter
07:44 - what you make the width and the height
07:46 - but it might affect what you want to
07:47 - make the dimensions of say the
07:49 - background or the images later on
07:51 - anyways we're going to say width height
07:52 - equals 900 500 win equals pi game dot
07:55 - display dot set under square mode and
07:56 - then inside of here i'm going to say
07:58 - in all capitals width height so i'm
08:01 - pretty much telling pi game hey let's
08:03 - make a new window that is of this width
08:05 - and this height and i've defined those
08:07 - both above the reason i'm using all
08:09 - capitals here is usually just good
08:10 - convention to define all of your
08:12 - constant values in capital so our window
08:15 - even though it may potentially change is
08:18 - fine to be in all capitals and our width
08:19 - and height those are constant they're
08:21 - not going to change so i'm making them
08:22 - all capital values all right so now that
08:24 - we have that uh let's actually start
08:26 - creating our first like pie game event
08:28 - loop and and having something pop up on
08:30 - the screen so usually what i like to do
08:32 - is i'd like to define a main function
08:34 - and inside of this function i'm going to
08:35 - put all of the code that kind of handles
08:37 - the main game loop in pi game so usually
08:40 - when you create a game you have a loop
08:42 - and this loop is doing things like
08:43 - redrawing the window checking for
08:45 - collisions updating the score whatever
08:47 - it may be and anyways we're going to put
08:48 - that inside of this main function right
08:51 - here so the first thing that we need to
08:52 - do is set up a while loop this while
08:54 - loop will be the game loop and this will
08:56 - actually let our game not just instantly
08:58 - open and then close so think of it as
09:00 - like an infinite loop and then we'll
09:02 - terminate it whenever the game ends so
09:04 - i'm just going to make a variable i'm
09:05 - going to say this is run it's equal to
09:07 - true then i'm going to say well run so
09:09 - until we set run equal to false or we
09:11 - break out of this loop this loop will
09:13 - keep running the first thing that you
09:15 - always do inside of your event loop in
09:17 - pi game is the following you say 4
09:20 - event in pygame
09:22 - dot event
09:23 - like that and then dot get and inside of
09:26 - here is where you check for the
09:27 - different events that are occurring in
09:29 - pi game so don't worry about the fancy
09:31 - syntax but this is just getting us a
09:32 - list of all of the different events
09:34 - we're looping through them and then we
09:36 - can check what these events were and
09:38 - based on what they were that we can we
09:39 - can do something different so the first
09:41 - event that you usually check for is if
09:43 - the user quit the window so again i'll
09:45 - show you how all this works later and
09:47 - we'll go into more detail but just to
09:48 - get right into it we're going to say if
09:50 - event dot type equals equals and then
09:53 - pie game dot quit in all capitals what
09:56 - we're going to do is we're going to say
09:57 - run equals false like that and what this
10:00 - will do is end this while loop so
10:02 - effectively quit the game now at the
10:04 - very end of this while loop what we're
10:05 - going to do is say pygame.quit
10:08 - and this will quit pygame for us and
10:10 - close the window so hopefully this is
10:12 - clear so far but that's all this is
10:14 - doing we're getting all the events if
10:16 - quit is an event that occurs then we'll
10:18 - exit the while loop and we will quit now
10:20 - i'll show you what that event is in one
10:22 - second but let's continue so now that we
10:24 - have that uh let's actually go down to
10:26 - the bottom of our program and let's say
10:28 - if underscore underscore name underscore
10:30 - underscore equals underscore underscore
10:33 - main underscore underscore then we're
10:35 - going to call the main function now what
10:37 - this is doing for anyone who's confused
10:39 - is just making sure that when we run
10:42 - this file we didn't
10:44 - it's hard to describe this but it's
10:45 - making sure that we're only going to
10:46 - actually run this main function if we
10:49 - ran this file directly so in python if
10:51 - you're not aware you can import modules
10:53 - right so let's say i imported this file
10:55 - from another file well if i did that and
10:58 - i didn't have this if name equals equals
11:00 - main thing and i just had the main
11:01 - function you know in the main line like
11:03 - this then it would automatically call
11:05 - this and start running the game now we
11:07 - might not want that to happen and i only
11:09 - want to run the game if we run this file
11:11 - directly not if this file is imported
11:14 - from somewhere else so that's why i'm
11:15 - doing this
11:17 - you don't have to really understand what
11:18 - this means but the name is simply the
11:20 - name of the file and main is telling us
11:22 - hey this was the main file that was run
11:25 - that's the best way i can explain it
11:26 - they're going into too much depth but
11:28 - anyways enough of this we haven't seen
11:30 - anything yet so let's run it and see if
11:32 - anything pops up so we're gonna run and
11:33 - there we go we get some window like this
11:35 - right black window nothing just says pie
11:37 - game at the top now the quit event is
11:39 - when we press the x on this window so
11:42 - when i press that notice that boom we
11:44 - quit we're all good because we handled
11:47 - this quit event if we didn't do that it
11:49 - wouldn't have quit the window we would
11:50 - have had to force quit this application
11:52 - which obviously we don't really want to
11:54 - have to do so there we go we've got our
11:56 - first pie game window popping up but
11:57 - that was kind of boring now i want to
11:59 - show you how we can draw stuff onto the
12:01 - screen and how we can change the name of
12:03 - that window so usually what i like to do
12:05 - is i like to go up to the top of my
12:06 - program and say
12:08 - pygame.display.set underscore caption
12:10 - and i like to give it some name so here
12:12 - this will set that little name caption
12:14 - that you saw that said pie game window
12:16 - or whatever it was so you can set this
12:18 - to whatever you want for simplicity i'm
12:20 - just gonna say first game like that i'm
12:23 - gonna save i'm gonna go ahead and run
12:25 - this and notice that now it says first
12:27 - game where my mouse is here at the top
12:28 - left hand corner
12:30 - all right so now that we've got that
12:31 - let's start drawing some some stuff onto
12:33 - the screen and doing some more uh
12:34 - advanced stuff
12:36 - so the first thing i'm going to show you
12:38 - is how we can fill the screen with a
12:39 - specific color then we'll start drawing
12:41 - some rectangles and all of that and
12:43 - getting into the game so to fill the
12:44 - screen with a specific color this is
12:46 - pretty straightforward you're going to
12:47 - use the window
12:49 - so you're going to say
12:50 - win like that and then you're going to
12:52 - say dot fill and then you give this a
12:55 - color and it will fill the screen with
12:57 - this color now the question is how do we
12:59 - actually give this a color what do we
13:00 - type in for the color well in pi game
13:02 - all of the colors are rgb meaning red
13:05 - green blue so what you need to pass is a
13:07 - tuple with three values one value for
13:09 - red one value for green one value for
13:11 - blue if you're not aware of rgb the
13:13 - ranges of numbers that you can pass in
13:15 - here are between 0 and 255 inclusive so
13:18 - that means you can include 0 or 255. so
13:21 - i could say something like 255 255 255.
13:24 - funny enough this is actually white when
13:26 - you look at rgb because you have the
13:27 - most red
13:28 - the most green and the most blue so
13:31 - anyways i'm not going to actually pass
13:32 - in a tuple like this because this is
13:34 - kind of hard to understand that this is
13:35 - white i'm going to make a variable at
13:37 - the top of my program here in all
13:39 - capitals i'm going to call it white and
13:41 - i'm going to set that equal to 255 255
13:43 - 255. now instead of passing that i'm
13:46 - simply going to pass white inside of
13:48 - here so this way if someone else is
13:50 - reading my code they know that hey this
13:52 - is the white color that's what we're
13:53 - filling the screen with so let's test
13:55 - this out and run the program and why is
13:57 - it not working well the reason this
13:59 - isn't working right now is because we
14:01 - did not update the display so in pi game
14:04 - the way it works is we can draw a bunch
14:06 - of stuff onto the screen and you'll see
14:08 - that when we start doing that we draw
14:10 - all these different things but the
14:11 - display will not be updated it won't
14:13 - show the most recent things that we drew
14:15 - unless we manually update it so what we
14:17 - need to do is say pi game
14:19 - like this
14:20 - dot display
14:23 - dot update so now when we update the
14:25 - display after we fill the display it
14:28 - will update and will show us the white
14:29 - so let's have a look
14:31 - there we go now we are getting a nice
14:32 - white background you're welcome to mess
14:34 - around with the color and you'll see
14:35 - different colored backgrounds all right
14:37 - so there we go we have white
14:38 - awesome we are making good progress now
14:41 - the thing is i usually don't like to do
14:43 - all of my drawing
14:45 - inside of this kind of main game loop i
14:47 - usually like to have the main game loop
14:49 - handling like all of the collisions all
14:51 - of the logic in the game and then having
14:53 - some functions outside of that that
14:55 - handle specific things that i can easily
14:57 - call so what i'm going to do just to
14:58 - clean this up and make it easier because
15:00 - we're going to be drawing a lot more
15:01 - stuff than than just this is say define
15:04 - draw underscore window now inside of
15:07 - here what i'm going to do is just take
15:09 - as an argument whatever i want to draw
15:11 - now in this case we don't really have
15:13 - anything specific that we want to put on
15:14 - the screen we're just filling it with a
15:15 - background color so i'm not going to
15:17 - take any arguments i'm going to take
15:19 - these two lines of code right here
15:22 - place them inside of this function so
15:24 - let's do that
15:25 - and now right before inside this while
15:28 - loop before the pie game dot quit i'm
15:30 - just going to call this function
15:31 - so now every time i loop through this
15:34 - loop here i'm calling draw window and
15:36 - well this will draw stuff onto the
15:37 - screen so let's run this and there we go
15:39 - we get the same thing it is still indeed
15:41 - working
15:42 - awesome so that is great now the next
15:44 - thing we need to talk about is frame
15:46 - rate or essentially how do we control
15:48 - how much this is refreshing because if
15:50 - we have a look at this right now we have
15:52 - an infinite loop we have some event loop
15:54 - going on right here and then every time
15:56 - in the loop we're just drawing something
15:57 - onto the screen
15:58 - that's fine but right now we are drawing
16:01 - this white background as many times as
16:03 - we possibly can per second onto the
16:05 - screen it's pretty it's solely based on
16:07 - the speed of our computer right on my
16:09 - computer i have a pretty fast machine
16:10 - this is drawing probably hundreds of
16:12 - times per second in fact we could
16:14 - measure it but i would guarantee it's
16:15 - hundreds of times per second or even
16:17 - thousands now we obviously don't want
16:19 - that because that means on different
16:21 - computers our game is going to run at a
16:22 - different speed because it's based on
16:24 - how quickly this while loop is running
16:26 - so to control this we need to implement
16:28 - something called fps or frames per
16:30 - second so i'm going to define a variable
16:32 - up here i'm going to say fps and make it
16:34 - equal to 60 and this pretty much will
16:36 - define how quickly or how many frames
16:38 - per second we want our game to update at
16:41 - now most standard games that are not
16:43 - like your big aaa games are running at
16:45 - 60fps so we're going to go ahead and
16:47 - just implement a hard-coded fps of 60.
16:50 - so now what i'm going to do is i'm going
16:52 - to define a clock object in my main
16:55 - function here i'll discuss what this is
16:56 - in a second but i'm going to say clock
16:58 - is equal to pi game
17:00 - dot time dot clock and inside of my
17:02 - while loop i'm going to say clock.tick
17:05 - and then i'm going to put fps now what
17:08 - this is going to do
17:09 - is control the speed of this while loop
17:12 - so this will make sure that we're going
17:13 - to run this while loop right here 60
17:16 - times per second no matter what unless
17:18 - our computer can't keep up with that
17:19 - speed in which case it will run as fast
17:21 - as it can so clock.tick is just ensuring
17:24 - that we never go over this capped frame
17:26 - rate of 60 which is good that's what we
17:28 - want it makes our game controllable and
17:30 - we know it's consistent on different
17:32 - computers so now if we run this
17:34 - actually let's just go up here
17:36 - you notice that nothing's going to
17:38 - change except just internally it's only
17:40 - running at 60fps okay so that's great
17:42 - but our game is pretty boring right now
17:44 - we have nothing on the screen so let's
17:45 - actually go ahead and implement some
17:47 - characters so i want to have two
17:48 - spaceships one on the left hand side of
17:50 - the screen one on the right hand side of
17:52 - the screen i want them to face each
17:53 - other and i want them to be able to move
17:54 - so let's tackle that next so what i'm
17:56 - going to do is i'm going to start
17:58 - importing the images that i'm going to
17:59 - use for these spaceships so i'm going to
18:02 - start by just saying
18:03 - yellow underscore spaceship underscore
18:06 - image and this is going to be equal to
18:08 - pi game
18:10 - dot image
18:11 - dot load and inside of here we're going
18:13 - to load the yellow spaceship image so if
18:15 - we go inside of assets we can see that
18:17 - we have five things we have spaceship
18:19 - yellow spaceship red space png that's
18:22 - the background and then two sound
18:23 - effects which we'll get to later again
18:25 - you can download this from the link in
18:26 - the description it's the github link so
18:28 - what we need to do is import these
18:30 - images right here so the red spaceship
18:32 - and the yellow spaceship we need to load
18:34 - them into pi games so we can draw them
18:36 - onto the screen so what i'm going to do
18:38 - at the top of my program is going to
18:39 - import os the reason i'm importing os is
18:41 - because i'm going to use os which is
18:43 - operating system to help me define the
18:45 - path to these images so these images are
18:48 - inside of the assets folder the assets
18:50 - folders in the same directory as our
18:51 - python file remember that's very
18:53 - important and then what we're going to
18:55 - do is we're going to look inside the
18:56 - assets folder and then look for these
18:58 - specific images so
18:59 - to do this we're going to say os
19:02 - dot path dot join this is just a thing
19:04 - that you can do in python the reason i'm
19:06 - doing this rather than just separating
19:08 - things with slashes is because depending
19:10 - on what operating system you're on the
19:12 - directory separator might be different
19:14 - so this will handle that for us but
19:16 - os.path.join i'm going to join the path
19:18 - to the folder assets with the path to
19:21 - the image so i'm going to say assets and
19:22 - then spaceship like that underscore and
19:26 - i guess we're doing yellowfirst.png
19:29 - so i apologize that it's hard to read
19:31 - let's actually just zoom out a bit so
19:32 - you can see this
19:34 - we get yellow spaceship image goes
19:35 - pygame.image.load.os.p
19:38 - asset
19:39 - spaceship yellow.png so let's copy that
19:42 - line i'm going to do the same thing now
19:44 - except instead of yellow
19:45 - we're going to do red so red spaceship
19:48 - image and now all we have to do is just
19:50 - change this to red because we have the
19:51 - red image right there so now we have our
19:53 - two spaceship images my formatters help
19:56 - me out here by putting them in a way
19:57 - that we can read them
19:59 - now what we want to do is draw these
20:01 - onto the screen so we can actually see
20:02 - them so before i get too complicated and
20:04 - talk about anything more let's just show
20:06 - these up on the screen or draw them on
20:07 - the screen and see what they look like
20:09 - so we'll say win.fill white remember i'm
20:12 - doing all my drawing from inside of this
20:13 - draw window and now i'm going to say win
20:16 - dot blitz now you use blitz when you
20:18 - want to draw a surface onto the screen
20:21 - so technically these images when they
20:23 - get loaded in by pygame are known as
20:25 - surfaces so we have to use blit to
20:27 - bullet them onto the screen now that's
20:29 - kind of a misleading explanation but you
20:31 - can kind of imagine that anytime you
20:32 - have text or images you're going to use
20:34 - blit to put them onto the screen but
20:36 - i'll go through that later so anyways
20:37 - win.lit
20:39 - we're going to say yellow spaceship
20:40 - image because that's our image right
20:42 - here and then i'm going to define the
20:44 - position on the screen in which i want
20:45 - to draw these images so remember that
20:48 - our screen is 900 by 500 so 900 width
20:52 - 500 height which means that i really
20:54 - should be drawing my spaceship within
20:56 - those dimensions so it shows up on the
20:58 - screen now i can draw it off the screen
21:00 - at like a negative coordinate or
21:02 - something but obviously that doesn't
21:03 - make much sense to do now another thing
21:05 - to note in pi game is that when you draw
21:07 - something onto the screen it draws from
21:09 - the top left hand corner in fact it's
21:12 - probably a good point in time now to
21:13 - talk about the pi game coordinate system
21:15 - so excuse me because i'm on a mouse this
21:17 - is going to be really rough drawing but
21:19 - let's imagine this is our pi game window
21:21 - you know traditionally when we look at
21:23 - like an axis right we look at a graph
21:26 - you would say that 0 0 is right here in
21:28 - the middle of the window now in pi game
21:31 - that is not the case we don't have that
21:33 - because we don't have these kind of
21:35 - coordinate systems so in pi game the top
21:38 - left or zero zero is the top left sorry
21:40 - so zero zero trying to do two zeros here
21:43 - with the mouse is the top left-hand
21:45 - corner which means as you increase your
21:48 - x you're going further to the right and
21:50 - as you increase your y you're going
21:52 - further down of course y being you know
21:54 - vertical and x being horizontal so if i
21:56 - wanted to be at the bottom of the screen
21:58 - and my height was 500 i would draw
22:00 - somewhere like 400 right and maybe that
22:02 - would put me you know like somewhere
22:03 - around here so just keep that in mind uh
22:06 - this is the coordinate system for pi
22:07 - game and when we draw an object in in pi
22:10 - game we draw it from its top left so
22:13 - it's consistent if i draw an image at
22:15 - let's say what would this be reasonably
22:17 - like you know 500 by 200 or something
22:20 - like that we will start drawing it from
22:22 - the top left so the uh the width of the
22:25 - object or the width of the surface will
22:27 - you know be going to the right if that
22:28 - makes sense and then the height will be
22:30 - going down so even though it's at this
22:32 - position we're not drawing it from the
22:33 - center we're drawing it from the top
22:35 - left of the image so keep that in mind
22:37 - okay now we went through that so let's
22:40 - draw this image so we want to draw the
22:41 - top left of the spaceship
22:43 - where we're picking where we want to put
22:44 - the top left of the spaceship so in this
22:46 - case let's just put it at like 300 100
22:49 - just to see what it looks like and in
22:51 - fact for now let's just draw the yellow
22:52 - one
22:53 - so we're going to go ahead and draw this
22:55 - and that's greed okay so it's taking up
22:57 - a good chunk of the screen this is
22:59 - obviously too big we're going to have to
23:00 - shrink this down but there you go you
23:02 - can see the spaceship showing up on the
23:04 - screen
23:05 - awesome now keep in mind though if i
23:07 - were to draw this spaceship before i
23:09 - were to fill the screen so if i do
23:11 - something like this
23:13 - then what do you think is going to
23:14 - happen so i go ahead i draw the
23:16 - spaceship then i fill the screen with
23:17 - white and then i update what do you
23:19 - think is going to happen i'm going to
23:20 - run and we don't see the spaceship the
23:23 - reason we don't see the spaceship is
23:25 - because
23:26 - we drew the spaceship before we filled
23:28 - the screen so the order in which we draw
23:30 - things matters and we can draw over top
23:32 - of something that's totally valid that
23:34 - happens all the time okay so just keep
23:36 - that in mind so now we have the yellow
23:38 - spaceship and what we want to do now is
23:41 - resize this spaceship so it's a bit
23:42 - smaller so we should pick the dimensions
23:44 - we want to resize it to then we also
23:47 - should rotate this spaceship so it's
23:48 - facing the correct direction so i'm
23:50 - actually going to start by
23:52 - resizing this image and then i will
23:54 - rotate it so i'm going to say
23:56 - yellow
23:57 - underscore spaceship like this and this
24:00 - is going to be equal to and then i'm
24:02 - going to
24:03 - resize and rotate this image in the same
24:05 - line i'll show you how to do both of
24:06 - them so in pi game to resize something
24:09 - you're going to say pie game dot not
24:11 - image sorry dot trans nope dot
24:14 - transform like that dot and then scale
24:18 - and inside of here you're going to pass
24:19 - the image that you want to resize so
24:21 - we're going to pass yellow spaceship
24:23 - image like that and then you're going to
24:25 - pass the dimensions that you want to
24:27 - resize this to
24:28 - so our spaceship was pretty wide it
24:30 - wasn't that tall we could look at the
24:32 - aspect ratio to determine what we want
24:34 - to resize this to but i'm going to go
24:35 - with 55 by 40. so 55 width and 40 height
24:40 - if we consider that the dimensions of
24:41 - our screen are or what are they here 900
24:43 - by 500 that seems like a reasonable size
24:46 - to make our spaceship but feel free to
24:48 - make this larger feel free to make it
24:49 - smaller feel free to make it square mess
24:51 - around with it and see what you get but
24:52 - anyways that's going to scale our
24:54 - spaceship now so it'll be much smaller
24:56 - so let's do the same thing for the red
24:58 - spaceship so let's say red underscore
25:01 - spaceship like that is equal to
25:03 - pygame.transform.scale
25:05 - and then red spaceship image we're going
25:08 - to resize to the same thing 55 by 40.
25:12 - now since i'm using these numbers
25:14 - multiple times and i might use them
25:15 - later on make sense just throw them in a
25:17 - variable so i'm just going to say um you
25:20 - know space
25:22 - ship
25:23 - underscore width and then spaceship
25:27 - like that underscore height is equal to
25:30 - and then 55
25:32 - by 40. and now i'll just replace these
25:34 - values just in case we ever want to
25:36 - change this it will work everywhere in
25:37 - the program so spaceship width
25:39 - and then spaceship height like that
25:42 - let's copy this
25:43 - and let's simply put it here
25:46 - okay so now that we have that before we
25:48 - rotate it let me actually just update
25:50 - this so instead of drawing a yellow
25:52 - spaceship image i'm just drawing yellow
25:54 - spaceship because yellow spaceship i
25:56 - know it's kind of messy to see here
25:58 - is now the one that is scaled down so
26:01 - let's go ahead and run this and see what
26:02 - we get and now we get a much smaller
26:04 - spaceship that looks much better to me
26:06 - maybe it needs to be a bit taller but
26:08 - honestly totally fine so let's leave it
26:10 - at that okay so now we need to rotate
26:11 - this image so to rotate it i'm actually
26:14 - going to go and find yellow spaceship
26:16 - and in fact let's separate these to make
26:17 - it easier to see and i'm going to wrap
26:20 - this scale within a
26:23 - a rotate so you'll see how it works but
26:25 - let's go
26:26 - pygame
26:29 - dot image dot rotate
26:32 - oops
26:34 - like that
26:36 - okay and now i know it's confusing with
26:38 - the brackets i'll go through it we're
26:40 - going to pick the angle that we want to
26:41 - rotate this at so i'm pretty much saying
26:43 - pigment.image.rotate
26:44 - this is the ending bracket at the very
26:46 - end there we're plugging in this as the
26:48 - thing that we want to rotate which is
26:50 - the scaled down yellow spaceship and we
26:53 - pick how much we want to rotate it so
26:55 - rotate it i want it to rotate to the
26:57 - right and i want to rotate it 90 degrees
26:59 - now let's see if that's correct we might
27:01 - have to rotate it 270. i forgot which
27:03 - way it was facing originally but let's
27:05 - see if this actually gives us the
27:06 - rotation so let's run
27:08 - uh and there's no
27:10 - pie game oops sorry guys uh this is not
27:13 - pygame.image.rotate i just got an error
27:14 - there this is
27:16 - pygame.transform.rotate so i make that
27:18 - fixed there on line 15. okay
27:20 - so run now and there we go we can see
27:22 - it's facing the correct direction okay
27:25 - so we've done that successfully now with
27:26 - the yellow spaceship now we want to take
27:28 - the red spaceship and rotate it but so
27:30 - it's facing the other way so let's copy
27:33 - game.transform.rotate let's wrap this
27:35 - here again and then
27:37 - let's go comma and let's rotate this one
27:40 - 270 degrees because we want it to face
27:42 - the other way so now we can draw the red
27:45 - spaceship as well so let's go down here
27:47 - and let's say wind.lit oops didn't mean
27:49 - to open that
27:51 - wind.blitz let's split the red spaceship
27:55 - and let's put a little bit further away
27:56 - let's put out 100 100 or actually let's
27:59 - put at 700 100.
28:01 - okay so take a quick look at this make
28:03 - sure your code matches now let's run and
28:06 - there we go we have our two spaceships
28:07 - facing each other all is looking good
28:11 - okay so now we have the spaceships now i
28:13 - want to show us how we can move these
28:14 - spaceships around so to move these
28:16 - spaceships is not actually super
28:19 - complicated but we need a way to keep
28:20 - track of their x and y position i guess
28:23 - as well as their width and height and
28:25 - then to change that position and pretty
28:27 - much just change where we're drawing
28:29 - them to be at their x and y position so
28:31 - what i'm going to do now is i'm going to
28:32 - write a little bit of code i'm going to
28:33 - go a bit faster than i've been going and
28:35 - then of course we'll stop and go over
28:36 - everything to make sure that you guys
28:37 - understand let's go down into our main
28:39 - function and now what i want to do is i
28:41 - want to define two rectangles which are
28:43 - going to represent my yellow spaceship
28:46 - and my red spaceship so i can control
28:48 - where they're moving to so just follow
28:50 - along and then we'll explain what it is
28:52 - so red equals and i'm going to say red
28:55 - this is going to represent our red
28:56 - player is equal to pi game
28:58 - dot
28:59 - rect like that and inside of here what
29:01 - i'm going to do is simply define the
29:03 - position
29:04 - or a rectangle that represents this red
29:07 - spaceship now you'll see why we're doing
29:10 - this but the pos or the arguments sorry
29:12 - for the rectangle are x y width and
29:15 - height so i define the x position the y
29:18 - position and the width and the height
29:19 - that i want my red player to be at so we
29:22 - already know what the width and the
29:22 - height are going to be because that's
29:24 - going to be equal to whatever we scaled
29:26 - our spaceship to right which was
29:28 - spaceship width and spaceship height
29:30 - good thing we stored that in a variable
29:32 - but the x and y we can pick
29:34 - now we want the red spaceship i mean we
29:36 - can decide this but let's say we'll put
29:37 - on the left-hand side of the screen so
29:39 - in that case let's make its x and y
29:41 - something like this so we'll make its x
29:43 - position 100 and let's make its y
29:46 - position 300 and then for its width and
29:50 - height we already know what this should
29:51 - be spaceship width
29:53 - and spaceship height okay so now we're
29:55 - gonna do the exact same thing for the
29:57 - yellow
29:58 - player here so let's instead of red
30:02 - let's change this yellow and then let's
30:03 - just change its x position so it's over
30:05 - near 700 so they're far away all right
30:08 - so now we have red and we have a yellow
30:09 - rectangle
30:11 - all i'm going to do now is i'm going to
30:12 - pass this rectangle so actually both of
30:14 - these rectangles red and yellow over to
30:17 - my draw window function so now inside of
30:20 - draw window i'm simply going to take red
30:22 - and i'm going to take yellow and rather
30:24 - than drawing my yellow spaceship in my
30:26 - red spaceship at a kind of predefined
30:28 - position i'm going to draw it at
30:30 - whatever position my red and yellow
30:32 - argument are at this way i can modify
30:35 - red and yellow and when i pass it to
30:37 - draw window it will change where we're
30:39 - drawing these rectangles so uh let's or
30:42 - these spaceships sorry rectangles just
30:44 - because we're representing them with
30:45 - rectangles but for our yellow spaceship
30:47 - we're going to draw this at yellow.x
30:50 - and yellow.y now the reason we have
30:52 - access to dot x and dot y is because
30:55 - yellow is a pi game rectangle and it
30:57 - defines that the x is this and the y is
30:59 - this so it just makes it really nice for
31:01 - us to use so yellow.x yellow.y now for
31:04 - red we're going to say red.x
31:06 - and red dot y like that so now we draw a
31:09 - red in our yellow spaceship now to show
31:10 - you how this would actually move around
31:13 - let's just do something really simple
31:14 - every single loop i'm going to move my
31:16 - yellow spaceship one pixel just so you
31:18 - guys can see it moving on the screen so
31:20 - i'm going to say yellow dot x plus
31:22 - equals one all this is going to do is
31:24 - add one to the yellow x position and
31:27 - move it in fact let's actually change
31:28 - this to red
31:29 - because red will have more time to move
31:32 - so this will move 60 pixels per second
31:34 - because the clock is ticking at 60fps
31:37 - and we're updating the x position 60
31:40 - times and adding one to it so hopefully
31:42 - that's clear but let's run this and now
31:44 - notice that we have a red spaceship
31:46 - moving in uh the incorrect direction on
31:49 - the screen and i noticed that i actually
31:51 - put these spaceships on the wrong side
31:52 - because of the way that they're facing
31:54 - so we have two options we can change
31:56 - where they are so we can just change 700
31:58 - 100 or we can change their rotation i
32:00 - think it's easier to just change this
32:02 - right here so let's change 700 100 so
32:05 - they are on the right side of the screen
32:08 - let's run this
32:09 - and now you can see it's moving
32:10 - backwards but they are on the correct
32:12 - side of the screen now the reason this
32:14 - is moving again is because we're
32:15 - updating the exposition and we're
32:16 - drawing it at the x position so as we
32:18 - change red here well we're passing that
32:20 - updated red over here and then it's it
32:22 - it's moving right so hopefully that's
32:24 - clear but anyways that is how we would
32:26 - move it so now what we need to do is we
32:27 - need to actually change the x and y
32:29 - position when we press the arrow keys
32:31 - right so that we're moved based on the
32:33 - user input so we have two things that we
32:35 - need to check we need to check whether
32:36 - the red spaceship is moving or whether
32:38 - the yellow spaceship is moving now let
32:40 - me just run this one more time yellow
32:42 - spaceship is on our left red is on our
32:44 - right so we want to use wasd for the
32:46 - left and the arrow keys for the right
32:49 - spaceship because that just intuitively
32:51 - makes sense on the keyboard so let's
32:53 - start doing this i'm going to start
32:54 - doing it for the wasd keys so for the
32:58 - spaceship on the left which
33:00 - i can never remember i think it's the
33:01 - yellow one yeah it is the yellow one and
33:03 - then i will show you how we can do it
33:04 - for the red and how we can kind of clean
33:05 - up the code a bit
33:07 - so there is multiple ways to do this in
33:08 - pi game you may have seen if you've
33:10 - watched other pie game tutorials of mine
33:12 - that i don't use the method i'm going to
33:13 - use here the reason i'm going to show
33:15 - you this method is because this allows
33:17 - you to press multiple keys at the same
33:19 - time whereas the other method i've shown
33:21 - previously which i'm just not even going
33:22 - to bother showing here only lets you
33:24 - press one key at a time
33:26 - actually we'll show it later in the
33:27 - video so i can talk about it then but
33:29 - anyways what we're going to do is say
33:31 - keys underscore pressed is equal to pi
33:34 - game
33:35 - dot keys actually sorry just dot key
33:38 - dot get underscore pressed
33:40 - what this is gonna do is every single
33:42 - time this while loop is running and we
33:44 - reach this line so 60 times a second
33:46 - it's going to tell us what keys are
33:48 - currently being pressed down
33:51 - this way we can just look at all of the
33:53 - keys check if the ones that we're
33:55 - looking for are pressed down and if they
33:56 - are respond to that press this also
33:59 - means that if the key stays pressed down
34:01 - it will still register that it's being
34:03 - pressed
34:04 - so it's super useful and well
34:06 - you'll see as we get into this how this
34:07 - works but all we have to do is say if
34:10 - keys underscore pressed
34:11 - then inside of here pygame dot k
34:14 - underscore
34:16 - and then the name of the key that we're
34:17 - checking for you can kind of see a list
34:19 - is popping up on my screen here on how
34:20 - they work
34:22 - the ones that are special keys are in
34:23 - all capitals and the ones that are just
34:25 - letters or numbers are usually just
34:27 - lowercase although i guess you can't
34:28 - really capitalize a
34:30 - a number
34:31 - but anyways we're going to start by
34:32 - checking up
34:34 - down no we'll go left right up down so
34:36 - the first key is going to be a so this
34:38 - would be left right so let's just leave
34:39 - a little comment here let's say this is
34:42 - left
34:43 - so if we press the left key what should
34:45 - we do
34:46 - well we should move the spaceship to the
34:48 - left how do we do that well if we looked
34:51 - at the top left being 0 0 that means if
34:54 - we're going to the left we're moving
34:55 - closer to 0 0 on the x axis so let's
34:58 - subtract from our x value to move us
35:01 - backwards or to move us to the left
35:03 - right so closer to 0 0.
35:05 - so this since this is for the yellow
35:07 - spaceship we're going to say yellow.x
35:10 - minus equals and then what should we
35:12 - minus here well how much we want them to
35:14 - move when they press down this key now
35:17 - since we're going to use this multiple
35:18 - times it makes sense to go to the top of
35:20 - our program right after fps we can say
35:22 - velocity or vel is equal to and then i'm
35:25 - just going to set this equal to 5 feel
35:27 - free to change that around and make that
35:28 - whatever you want but let's make that
35:30 - five and now let's say yellow dot x
35:33 - minus equals velocity now before we go
35:36 - any further and get into more keys let's
35:38 - test this and see if this is working so
35:40 - keys pressed equal pi game dot key dot
35:42 - get underscore pressed gives us a list
35:44 - of all the keys we check with this
35:46 - expression right here if the a key is
35:48 - being pressed if it is we modify the x
35:51 - so subtract values from it which will
35:53 - move us to the left
35:54 - so let's try this i'm going to press the
35:56 - a key
35:57 - and notice that i can move left
35:59 - obviously i can't go anywhere else
36:01 - there you go and now i'm off the screen
36:03 - so that's something we're going to have
36:04 - to check as well if we're off the screen
36:06 - we're not going to have to let someone
36:07 - or we're going to have to disallow
36:08 - someone from moving or off the screen
36:10 - but for now that's fine we'll do that
36:12 - after
36:13 - so now let's handle the other keys so we
36:15 - can actually copy this line
36:17 - right here
36:19 - let's fix the indentation now instead of
36:21 - the a key let's do the right key which
36:24 - is going to be d
36:25 - so let's change this comment to right
36:28 - i actually just want one space for my
36:30 - comment here now yellow.x
36:32 - since we're moving right rather than
36:34 - subtracting the x we want to add to the
36:36 - x so let's add to it like that and now
36:39 - let's try both these keys
36:41 - so now i can move left and right but i
36:43 - cannot go up and down and keep in mind i
36:45 - can go off the screen in either
36:47 - direction so again something that we're
36:48 - gonna have to check okay so we've done
36:50 - that now now let's do the up and down
36:51 - key so we can copy this again
36:54 - and this modification will be pretty
36:56 - easy so now for up that's going to be w
36:59 - for down that's going to be s so let's
37:02 - change this comment to be up
37:04 - let's change this comment to be down and
37:07 - now instead of the y being modif or
37:09 - sorry so the x being modified i kind of
37:11 - spoiled it the y is going to be modified
37:14 - so that's actually all we have to do but
37:15 - what this is doing now if we're moving
37:17 - up we need to subtract from the y
37:19 - because the top left is 0 0. so when we
37:21 - go down that's adding to the y so when
37:23 - we go down with s we add to the y value
37:25 - and that will move us down so let's save
37:28 - that
37:28 - let's check this i'm going to run
37:30 - and now i can move up down left and
37:33 - right and kind of on diagonals because i
37:35 - can press the same keys at once right so
37:37 - if i press down and left or i press up
37:39 - and right you can see that i'm moving
37:40 - diagonally so that's great
37:43 - now what i want to do is actually take
37:45 - this and i want to put this in a
37:47 - separate function because it's going to
37:48 - get kind of messy if i'm doing this
37:50 - twice inside of this loop right here
37:52 - right so i'm just going to copy all this
37:54 - code that i just wrote i'm going to
37:55 - write a function here i'm going to say
37:57 - define
37:58 - yellow underscore
38:01 - movement like that now actually we could
38:04 - say yellow
38:05 - handle movement or something that makes
38:07 - more sense yeah yellow handle movement
38:09 - inside of here is going to take an
38:10 - argument called keys
38:12 - and all i'm going to do is the exact
38:14 - same thing that i have before and
38:15 - actually this argument is going to be
38:16 - called keys underscore pressed
38:19 - and i'm also going to take in yellow
38:21 - now it may seem that this is over
38:23 - complicating things but trust me it's
38:24 - going to be nicer when we do the other
38:26 - movement for the other character
38:28 - we're taking in that keys press list
38:30 - we're also going to take in the yellow
38:32 - character our code doesn't change
38:33 - whatsoever we've just moved it so that
38:35 - it's kind of separated and it's easier
38:37 - to see so now what i'm going to do
38:39 - inside of this loop is i'm going to call
38:41 - yellow underscore
38:43 - handle movement like that really i
38:46 - probably should have called it handle
38:47 - yellow movement but that's fine we're
38:48 - going to pass keys underscore pressed
38:51 - and then we're going to pass yellow
38:53 - like that
38:54 - now what this will do is it will give
38:57 - the keys press list that we need
38:59 - and it will give our yellow character
39:00 - and then we'll just do everything we
39:01 - were doing before but inside of this
39:03 - function
39:04 - now you can probably guess how we're
39:06 - actually going to handle the right
39:08 - players or what am i saying the right
39:09 - players the red player all we need to do
39:11 - is copy this function
39:14 - we'll just do a paste like that and now
39:16 - we're going to do the exact same thing
39:17 - except instead of yellow it's going to
39:18 - be red instead of a dws it's going to be
39:21 - up down left right or i guess left right
39:24 - up down so let's change this to red
39:27 - let's change the name of this function
39:28 - to red as well and then we can just
39:30 - change all of these yellows uh to be red
39:33 - i'm just going to do them manually but
39:34 - if you're fancy you could use the find
39:36 - and replace
39:38 - all right so exact same thing now we're
39:40 - going to change our left right up and
39:42 - down the arrow keys are really easy it's
39:44 - literally just k underscore left
39:46 - okay underscore right
39:48 - oops
39:49 - okay underscore down
39:52 - and k underscore oops well i did in the
39:55 - wrong order okay underscore down
39:57 - k underscore up
39:59 - all right so that should be good we
40:00 - don't need to change anything else now
40:02 - all we need to do is call this so let's
40:04 - call this function
40:06 - red underscore
40:07 - if we could do it in the right case red
40:09 - underscore handle movement let's pass it
40:11 - the same thing keys underscore press
40:14 - like that and then red
40:16 - now the red movement will be handled
40:19 - let's make sure this is all working so
40:20 - let's run this
40:22 - and you can see that i can move my left
40:23 - guy and now i can move my right guy and
40:26 - they move at the same time with no
40:28 - issues awesome so that is great we're
40:31 - making good progress but now
40:33 - we can move off the screen right so we
40:34 - need to handle this so that we can know
40:36 - because we can no longer move off of the
40:38 - screen but before we do that just
40:41 - because it's going to make this part
40:42 - easier and less repetitive let's handle
40:44 - the fact that in the middle of our
40:46 - screen we want a border right so i don't
40:48 - really want my red and yellow spaceship
40:51 - because you remember the game we made at
40:52 - the beginning to kind of be able to face
40:53 - like right beside each other i want them
40:55 - to have their own halves of the screen
40:57 - and not be able to cross over so let's
40:59 - make a rectangle that's kind of a border
41:01 - and divides the middle and then we'll
41:03 - draw that on the screen and make it so
41:05 - that our characters can't move past that
41:06 - border so let's go to the top of the
41:08 - program
41:09 - and we're just going to define uh
41:11 - wherever we want doesn't matter i'm
41:12 - going to say border in all capitals and
41:15 - this is going to be equal to pi game
41:17 - you guessed it dot rect this is just
41:19 - going to be a rectangle and we'll just
41:20 - draw this rectangle onto the screen so i
41:23 - need to pick where this is going to be
41:24 - so let's be clever about this where
41:26 - should my rectangle be i need the x and
41:28 - y position and then the width and the
41:30 - height well the x position we'll need to
41:33 - figure out the y position is obviously
41:35 - going to be at 0 because we want to
41:36 - start at the top of the screen and go
41:38 - all the way down so we're going to say y
41:39 - is equal to 0 the width and the height
41:42 - so the width we can kind of pick what we
41:43 - want the width to be i'm just going to
41:44 - make it 10. the height needs to be the
41:46 - height of the screen because we're
41:47 - starting at zero so it needs to fill the
41:49 - entire screen
41:51 - and then the x is what we need to figure
41:52 - out so i want this to be exactly in the
41:54 - middle of the screen which means
41:57 - i can say width over two that's going to
42:00 - give me 450 right to be in the middle
42:02 - but then since we have a width of 10
42:06 - let's just
42:07 - go to paint here quickly
42:09 - i'll show you what happens if we do that
42:10 - so let's say we have our screen
42:13 - you know this is width over 2 and this
42:16 - is like right in the middle of the
42:17 - screen okay so this is
42:19 - me trying to do a 5 with my mouse this
42:21 - is 450 okay
42:23 - now if i draw a rectangle here that has
42:26 - a width of 10 what's going to happen is
42:27 - i know this is like a really exaggerated
42:29 - width but we're going to draw it like
42:31 - this right i don't want to draw it like
42:33 - that i want to draw it
42:35 - like this so how do i do that well i
42:37 - need to subtract half of the width so i
42:40 - can figure out where the 0 0 position of
42:42 - my rectangle should be because really
42:44 - i'm not drawing the rectangle from the
42:45 - middle i'm drawing it from 0 0 so i need
42:47 - to draw it such that it will be in the
42:49 - middle of the screen when i draw it if
42:52 - that makes sense so anyways the point of
42:54 - this is saying that if we have a width
42:55 - of 10 i need to subtract 5 from its x
42:58 - position so put it at 445 so that way it
43:01 - draws in the middle
43:02 - so let's do that
43:03 - rather than i guess since our width is
43:05 - hard coded i'll just subtract 5. and now
43:08 - once we draw this on the screen you'll
43:09 - see that it is right smack in the middle
43:11 - so let's draw this
43:13 - let's go here and let's say win
43:15 - dot
43:16 - blitz no it's not going to be
43:19 - actually okay you guys are going to be
43:20 - confused with this but we're going to
43:21 - draw this another way so we're going to
43:23 - say pi game
43:24 - dot draw
43:25 - dot rect so we're taking a rectangle and
43:28 - what i'm going to do is i'm going to say
43:29 - we're drawing this on the window so the
43:31 - arguments for this specific pi game
43:33 - function is the window or the surface
43:35 - that you're drawing this onto in this
43:37 - case just our main window then we need
43:39 - to pass a color that this rectangle is
43:42 - going to be so i actually want this to
43:44 - be black so what i'm going to do is
43:45 - define another color here
43:47 - i'm going to say black is equal to
43:50 - 0 0 0
43:52 - because well that's the color code for
43:53 - black it's just none of red green or
43:56 - blue so anyways we define black
43:58 - so now we're saying we're drawing on the
44:00 - window it's color black what are we
44:02 - drawing well we're drawing a rectangle
44:03 - so i just pass in my rectangle which is
44:06 - border like that
44:08 - because border is equal to a pi game
44:10 - rectangle so that's all we have to do so
44:13 - let's go ahead and try this
44:15 - i'm going to press run and now we get a
44:17 - nice black border right perfectly in the
44:19 - center of the screen now of course i can
44:22 - still go over it and notice that we're
44:24 - drawing actually below the border um
44:28 - are we on top of it no we're on top of
44:30 - the board okay that's fine it doesn't
44:32 - really matter if we're on top of the
44:33 - border or not but now we need to make it
44:34 - so we can't actually cross this border
44:37 - so really all we have to do to make it
44:39 - so we can't go off the screen is not let
44:42 - our player move if they're gonna move
44:43 - off of the screen so we just check if
44:46 - pressing this key would move them off
44:47 - the screen and if it will then we'll
44:49 - just not let them press it so inside of
44:52 - my yellow and red handle movement it's
44:54 - kind of annoying i should have done this
44:55 - before so we could just copy it in we're
44:57 - just going to make sure that we're we
44:59 - can't move off the screen or into the
45:01 - border so for yellow on the left hand
45:04 - side of the screen
45:06 - yes on the left-hand side of the screen
45:08 - what we're going to say is and just in
45:10 - this if statement right here
45:12 - and we're going to check if by moving to
45:14 - the left we would have a position that
45:16 - is in the negatives so that is not equal
45:19 - to at least 0. that would tell us that
45:20 - we're off the screen because the 0 0 of
45:23 - our image would be well not on the
45:25 - screen so i'm just going to say and
45:28 - yellow oops did i mean to press that
45:31 - yellow dot x minus velocity
45:34 - is greater than zero so what this will
45:37 - tell us
45:38 - is if when subtracting the velocity from
45:41 - our current y position that will be
45:44 - greater than zero or not if it is we
45:46 - won't let ourselves move any further to
45:48 - the left so the reason i'm doing minus
45:50 - is because we're obviously gonna
45:51 - subtract to move to the left now we'll
45:53 - do the exact same well actually we're
45:55 - gonna do a different thing for the right
45:56 - we're gonna say and yellow
45:59 - and yellow.x
46:01 - plus velocity the reason it's plus is
46:03 - because now we're moving to the right
46:05 - now in this case we don't want to check
46:06 - if it's greater than something we want
46:08 - to check if it's less than something now
46:10 - what do i want to check if it's less
46:11 - than well i want to check if it's less
46:13 - than the border in the middle of the
46:15 - screen because if we look at the screen
46:16 - right this is on the left hand side we
46:18 - don't want to be able to move past that
46:20 - border which is in the middle of the
46:21 - screen so we'll get the borders x
46:23 - position and we'll put that here so
46:25 - we'll say border dot x so this will not
46:28 - let us move past the borders x position
46:30 - but the issue with this is you have to
46:32 - remember that we're drawing the image
46:33 - from the top left so technically the
46:36 - width of the image can still move over
46:39 - the border because the 0 zero position
46:42 - wouldn't be past that x now
46:45 - hopefully that makes sense but to show
46:46 - this to you again we go back to trusty
46:48 - paint we have our border in the middle
46:51 - of the screen let's say this is our
46:52 - rocket ship like this technically this
46:55 - zero zero is less than this borders x
46:58 - but its width is over top of it so what
47:01 - we need to do is check the width of the
47:04 - the image as well and make sure that
47:05 - the zero zero plus the width of the
47:07 - image isn't going to be over top of that
47:09 - border
47:10 - so a lot of explaining here but all we
47:12 - have to do for that is simply say yellow
47:15 - dot x plus vel plus
47:17 - yellow
47:18 - dot width like that
47:20 - and again this is another property of
47:22 - the rect we can call a dot width and
47:23 - that will make sure that we are not over
47:25 - the border okay
47:27 - now we'll do the same thing for up and
47:28 - down so for up it's really easy we're
47:30 - going to say yellow dot y
47:32 - minus the velocity is greater than zero
47:35 - and we'll do the exact same thing here
47:37 - except instead of the width and the x's
47:39 - we're just going to check the heights so
47:40 - we're going to say yellow dot y
47:43 - yeah plus velocity
47:45 - plus yellow not dot width but dot height
47:48 - is less than
47:50 - and actually in this case it's not going
47:51 - to be border.y
47:53 - this is simply going to be height
47:55 - because it gives us the height of the
47:57 - screen so this is making sure that the
48:00 - height and our image cannot move further
48:01 - down past the screen
48:03 - now let's just test this then i'll do
48:05 - the same thing with red so run and now
48:08 - notice that i can't move any further
48:10 - down the screen okay i can't move left
48:12 - off the screen i can't move right off
48:14 - the screen and in fact this is blocking
48:16 - quite a bit and same thing here now
48:19 - there's a slight problem
48:21 - going down i'm not sure exactly what
48:24 - that is all right so i just pause for a
48:26 - second because for some reason my yellow
48:28 - guy can move further down the screen i'm
48:30 - not actually really sure why that is so
48:33 - a simple fix for this i don't usually
48:34 - recommend this but since it's not that
48:36 - important based on the game we're making
48:38 - i'm just going to add
48:40 - a few pixels
48:42 - to this right here so i'm pretty much
48:44 - going to say and yellow.y plus velocity
48:47 - plus yellow dot height is less than and
48:50 - then height minus five now what this
48:52 - should do ideally is just make it so
48:54 - that we can't move as far down so let's
48:56 - just rerun this
48:57 - and actually sorry it's already running
48:59 - so let's close that and run again okay
49:03 - now we can move okay so five clearly
49:06 - wasn't enough we can't move as far down
49:08 - now but let's just make this ten
49:10 - so let's go height
49:11 - minus ten
49:13 - now
49:14 - let's run the game and
49:17 - same thing okay so let's make this a bit
49:19 - more let's make this 15 pixels
49:22 - let's run
49:24 - let's see it and there we go now we're
49:26 - like perfectly at the bottom of the
49:28 - screen okay so that's what i wanted now
49:30 - you might be wondering why on the other
49:31 - edges we're not like touching them
49:33 - immediately that's because the actual
49:35 - size of this image is a bit bigger than
49:37 - what's showing up on the screen um
49:39 - that's sometimes a problem like if you
49:41 - take an image and it's like really small
49:42 - compared to the actual dimensions of the
49:44 - image then the
49:46 - rectangle around that image is going to
49:49 - be bigger than what the actual image is
49:51 - so that's pretty much why we can't cross
49:54 - this border here because this image
49:55 - actually kind of extends further out you
49:57 - just can't see it because it's a
49:58 - transparent background
50:00 - anyways hopefully that makes sense let's
50:01 - do the same thing for red now and then
50:03 - let's get into firing bullets and some
50:04 - more fun stuff okay so close that oh i
50:07 - launched this game like 12 times
50:09 - okay great okay close it all right so
50:12 - now we're just going to copy this and do
50:14 - the same thing for red
50:16 - so instead of yellow just change this to
50:19 - red we can literally copy everything
50:21 - and just change all the yellows to rent
50:23 - so
50:24 - and
50:26 - red oops not like that and red.x
50:30 - and red
50:31 - copy this one here
50:33 - this one will be red
50:36 - and same for this
50:40 - okay and
50:43 - red
50:45 - and red
50:47 - all right so now we have that let's just
50:48 - test this last time make sure all is
50:51 - good
50:52 - come on run what's happening invalid
50:55 - syntax where did i make a mistake
50:57 - let's see
50:59 - it is saying i can't even see because my
51:01 - window's not big enough at red dot x ah
51:04 - i forgot the and sign on all of these
51:07 - great let's add the and sign back or the
51:10 - and word i guess okay run now and there
51:13 - we go there so now
51:15 - yellow is good red's good
51:17 - ah but red
51:19 - c so red can move crop across the border
51:22 - now the reason red can move across the
51:23 - border is because i forgot that we need
51:25 - to limit how far it can move to the left
51:28 - not to the right so
51:30 - let's go to red and actually we do need
51:32 - to change some of these things so
51:34 - for moving to the left rather than
51:36 - checking if it's greater than 0 we want
51:38 - to check if it's greater than
51:41 - the border
51:42 - dot
51:44 - x
51:45 - plus
51:46 - the border dot width okay so we're going
51:49 - to have that there
51:50 - then if we're moving right this isn't
51:52 - going to be reliant on the border this
51:54 - is going to be reliant on the edge of
51:56 - the screen which is simply going to be
51:58 - the width of the screen so hopefully
52:00 - that's clear why we're doing this but
52:02 - now we're making sure that we can't move
52:03 - further left than the border and going
52:05 - to the right this is different than
52:07 - yellow obviously we can move as far
52:08 - right as we want so long as we don't go
52:10 - off the screen so let's run this now
52:12 - and let's try red and there we go we
52:14 - can't move to the back of the screen
52:17 - and the border yeah we can't move past
52:18 - the border either down is good
52:21 - up is good awesome we are looking good
52:24 - all right so now what i want to do since
52:26 - we've just finished that is i actually
52:28 - want to start talking about bullets so
52:29 - how we can uh actually have projectiles
52:32 - firing around the screen now this is a
52:34 - little bit more difficult than what we
52:35 - just did but of course it's important to
52:37 - cover in this tutorial so to handle
52:39 - bullets what we need to do now is have a
52:41 - separate key that each character each
52:43 - person can press that will fire a bullet
52:46 - or a projectile from their character so
52:49 - to do this we need to maintain a list of
52:51 - all of the bullets so the first thing
52:52 - i'm going to say is bullets is equal to
52:54 - an empty list like that we also need to
52:56 - decide how fast we want these bullets to
52:58 - go so i'm going to make a variable here
53:01 - i'm going to call this bullet underscore
53:03 - velocity and we can either decide to
53:05 - make this slower than the characters or
53:06 - faster than the characters but since i
53:08 - want this to be faster and make it a bit
53:10 - harder we're going to make it 7.
53:12 - again feel free to play with these
53:13 - numbers so we're gonna say bullet val
53:14 - equals seven
53:16 - so now what we need to do is make a way
53:18 - for us to actually create a bullet and
53:20 - have it kind of fired around the screen
53:23 - so i'm gonna show you now how we can
53:24 - handle the presses of the left and right
53:27 - control
53:28 - so usually i would use something like
53:30 - the space key to fire a bullet but since
53:32 - we have multiple people playing on the
53:34 - same keyboard we can't use space because
53:36 - only one person can press that so i
53:38 - think it makes sense to use the left
53:39 - control and the right control to press
53:41 - to fire the bullets this way you don't
53:44 - get sticky keys when you're pressing the
53:45 - shift key which is what i would have
53:46 - done previously and obviously we don't
53:48 - want to use enter and caps lock because
53:50 - what caps lock is not an intuitive key
53:52 - to fire a bullet so we'll go with right
53:54 - and left control now
53:56 - we're going to do that but the thing is
53:58 - i want each player to have a limited
53:59 - number of bullets so i don't want them
54:01 - to just spam bullets as many as they
54:03 - want or fire them like rapid fire on the
54:05 - screen so that also means that i don't
54:07 - want
54:08 - players to be able to hold down the key
54:10 - to shoot bullets i want them to have to
54:11 - press the key each time so they have
54:13 - like a very methodical shot right not
54:15 - like saying call of duty or just holding
54:17 - down the trigger the entire time i want
54:18 - them to have to actually press it each
54:20 - time so let's do that the way we're
54:22 - going to do that is by not handling the
54:23 - key presses this way we're going to
54:25 - handle it this other method there's not
54:27 - really names for them so it's hard for
54:28 - me to describe them that i talked about
54:30 - at the beginning of the video so what
54:31 - we're going to do is say if
54:33 - event dot type equals equals
54:37 - dot key down like that now this is
54:39 - telling us hey we pressed a key
54:41 - downwards then what we're gonna do is
54:43 - fire a bullet so we need to check
54:44 - whether we press the left control or the
54:46 - right control so if
54:48 - event
54:50 - and then oops like that dot key is equal
54:53 - to pi game dot and then this is going to
54:56 - be k underscore
54:58 - left i think it's l c t r l yeah l c t r
55:01 - l is left control and then otherwise
55:03 - we'll say if event dot key is equal to
55:07 - pygame.k underscore r ctrl standing for
55:11 - right control then we will
55:13 - kind of create a bullet for our
55:16 - character
55:17 - so the idea here is i want to have a
55:19 - list of bullets this list is going to
55:21 - store all of the red players bullets and
55:23 - all of the yellows players bullets or in
55:24 - fact to make this easier let's actually
55:26 - just do two lists let's say red
55:28 - underscore bullets equals that and let's
55:30 - say
55:30 - yellow underscore bullets equals that
55:33 - so what we'll do is we'll have the red
55:34 - bullets list or all the red players
55:36 - bullets yellows will store all of the
55:38 - yellow players bullets and then we'll
55:40 - move these bullets around the screen and
55:42 - kind of add them to the list so to
55:44 - create a bullet we'll just add one to
55:45 - the list and then we'll draw these
55:47 - bullets at their x and y position and
55:49 - we'll automatically move them so that
55:51 - they're going kind of in the direction
55:52 - that they were fired so the first thing
55:54 - is to create the bullet obviously so to
55:56 - do this uh for left control we want our
55:59 - bullet to be going to the right so let's
56:02 - do that so we're going to say uh i guess
56:05 - who is on the left i always forget i
56:06 - think it's yellow yeah yellow is on the
56:08 - left we're going to say yellow
56:09 - underscore square bullets
56:11 - dot append and just to make this easier
56:14 - to read i'm going to say bullet and the
56:15 - bullet is just going to be equal to a pi
56:17 - game rectangle i don't have any fancy
56:19 - images for this one
56:20 - so we're just going to say
56:21 - pygame.rect
56:23 - like that we're just going to create a
56:25 - rectangle that is at the position that
56:27 - we want to fire it from so if we think
56:29 - about this where should we place the
56:31 - bullet well the bullets really should be
56:33 - placed at wherever the yellow character
56:35 - is right we want the bullet to come from
56:37 - their body so since the yellow character
56:39 - is facing to the right the bullet should
56:42 - kind of spawn or appear
56:44 - at the edge of their body so at their x
56:47 - position plus their width that way
56:49 - immediately when you press the fire
56:51 - button you you see the bullet kind of
56:52 - coming out of the character
56:54 - so to do this
56:56 - we're going to say that the x position
56:58 - of our bullet and we're just going to
56:59 - make it a rectangle again
57:01 - is going to be
57:02 - at yellow.x plus
57:05 - yellow.width like that now if we think
57:08 - that this is too far away from the
57:10 - character because remember the width of
57:11 - the image is a little bit further than
57:12 - the actual
57:14 - character itself we could subtract a few
57:16 - pixels and it would be like more inside
57:18 - it doesn't really matter but anyways
57:20 - let's say bullet equals pi game.rect
57:22 - yellow.x plus yellow.width now for the
57:24 - height we can say this is going to be
57:26 - yellow
57:27 - dot
57:28 - y
57:29 - now it's going to be weird but we're
57:30 - going to say yellow
57:31 - dot height
57:33 - over 2. so
57:35 - we're taking
57:36 - the yellow dot y position which is the
57:38 - top left-hand corner of the image and
57:40 - then we're adding the height of it over
57:42 - 2. the reason for this is so that it
57:44 - comes directly in the middle of the
57:46 - character because if we did it from
57:48 - yellow.y it would come from the top left
57:51 - of the character which we don't want we
57:52 - want this to come from the middle of the
57:54 - image so we simply add half of the
57:57 - height to put it in the image to put it
57:59 - in the middle and really if we want to
58:01 - be even more precise we should then
58:03 - subtract or we should then add depending
58:05 - on what actually it's going to be
58:07 - subtract in this situation
58:09 - half of the
58:11 - height of the bullet so the height of
58:13 - the bullet i think is going to be 5
58:15 - pixels so i'm just going to subtract 2
58:17 - because i don't want this to be a
58:18 - decimal number
58:20 - but anyways you guys will see i
58:21 - apologize this is a lot to take in at
58:23 - once but i just want to make sure this
58:24 - is perfect so yellow.x plus yellow.width
58:27 - to put that in the middle x position or
58:30 - sorry to put that on the edge of the
58:33 - image then yellow.y plus yellow.height
58:35 - over 2 minus 2. this is so the bullet
58:38 - comes directly from the middle of the
58:39 - character then the width of the bolt is
58:42 - going to be 10 pixels and the height is
58:43 - going to be 5. so that is our bullet and
58:46 - then all we're going to do
58:47 - is append this into the yellow bullets
58:50 - list perfect
58:52 - so let's copy this and let's do the
58:54 - exact same thing except for red
58:56 - for our right control button press so
58:58 - now instead of having yellow.x this is
59:00 - just going to be red and we'll literally
59:02 - copy the same thing except we need to
59:05 - remove this plus red dot width the
59:08 - reason for this is the red character is
59:10 - facing to i guess the left of the screen
59:13 - i know my hand positions are probably
59:15 - wrong but it's facing to the left so its
59:18 - bullets are going to move towards 0 0
59:20 - which means we want the bullet to come
59:22 - out of actually the left side of the
59:25 - character not the right side of the
59:26 - character i would run this but there'll
59:28 - be a crash right now if i do that so
59:30 - let's actually um i'm just going to try
59:32 - to go through this the character is
59:34 - facing to the left so we want to start
59:36 - drawing the bullet at its actual left
59:38 - edge which really is it's just x
59:41 - position so instead of adding the width
59:43 - to it like we did with yellow we're just
59:44 - going to put red dot x now the height
59:46 - will be the same thing because we do
59:48 - want it to be in the middle for the
59:49 - height so red dot y
59:51 - and then red dot height and then
59:53 - literally everything else is the exact
59:54 - same it's just the edge in which this
59:56 - bold is appearing we want to be
59:58 - different
59:59 - okay perfect
60:00 - now last thing and there's actually more
60:02 - before i can show you these bullets
60:04 - firing
60:04 - we want to make sure that each player
60:06 - has a finite number of bullets
60:09 - so to do this we need to define another
60:11 - variable and we're just going to call
60:12 - this num underscore
60:15 - bullets like that or actually to make it
60:17 - more clear we'll say max underscore
60:20 - bullets and we'll set this equal to
60:21 - whatever we want i like three you guys
60:23 - can change that but i like three bullets
60:25 - so now before we actually go ahead and
60:28 - check if we can do the left control or
60:31 - we can do the right control we want to
60:33 - make sure that we don't already have
60:35 - three bullets fired on the screen
60:37 - because if we do we need to wait until
60:39 - those bullets disappear go off the
60:41 - screen whatever
60:42 - before we can fire another one so i'm
60:44 - going to say and
60:45 - the len
60:47 - of right
60:48 - what am i saying right red no this is
60:51 - yellow yellow underscore bullets
60:54 - is less than max underscore bullets
60:57 - so if the amount of yellow bullets that
61:00 - we have which is defined by the length
61:01 - or the number of bullets in this list is
61:03 - less than our maximum bullets we can go
61:05 - ahead and fire another one otherwise no
61:08 - don't add another bullet to the list
61:09 - because we already have the maximum on
61:10 - the screen now same thing here and the
61:13 - len of red underscore bullets
61:16 - is less than max bullets
61:19 - perfect now this will allow us to
61:21 - actually
61:22 - fire bullets on the screen now because
61:25 - it's going to take a second before we
61:26 - actually see these i'm just going to
61:27 - print out red underscore bullets
61:30 - and then yellow underscore bullets so
61:31 - this way when i start pressing the right
61:33 - and left control key in my console down
61:35 - here where all this
61:37 - gibberish is appearing you will see it
61:39 - popping up the bullets list so let's do
61:42 - this you can see that it's empty now
61:43 - when i press ctrl boom there you go we
61:46 - have a a button or
61:48 - a uh bullet inside of the list
61:51 - i press control again i press the other
61:53 - control and you can see that there we go
61:56 - going ahead and adding to the list now i
61:57 - realized
61:58 - as i did that in good job we did that
62:00 - here instead of having yellow bullets
62:02 - this needs to be redbullets dot append
62:05 - because obviously that well that just
62:07 - wasn't working with yellow it was adding
62:08 - all of them to the yellow list which we
62:10 - didn't want
62:11 - so hopefully that's clear but that's how
62:12 - we have the bullets now they're in the
62:14 - list when i press left and right control
62:15 - boom they're getting added and well it
62:17 - will work the maximum it just wasn't
62:19 - working before because we had a bug this
62:21 - was yellow instead of red okay perfect
62:24 - now we have that now we need to move the
62:26 - bullets and we need to see if they hit
62:28 - any of the characters so what i'm going
62:30 - to do is make another function that can
62:31 - handle this for us
62:33 - because it makes sense to kind of
62:34 - separate everything out so what i'm
62:35 - going to do is i'm going to make another
62:37 - function down here i'm just going to
62:38 - start typing it out then i'll define it
62:39 - above and i'm going to say this one is
62:41 - handle
62:43 - bullets like that now we're going to
62:45 - pass the
62:46 - yellow bullets
62:48 - the red bullets and the yellow character
62:51 - oops or the yellow rect as well as the
62:53 - red
62:54 - uh
62:55 - yeah i guess as red as well
62:57 - the reason for this being that we want
62:58 - to check if any of these bullets collide
63:00 - with either of the characters because if
63:02 - we do well we'll need to do something
63:04 - about that right and same thing we need
63:06 - all the bullets so that we can handle
63:08 - moving them around the screen and
63:09 - drawing them and all that all right so
63:10 - now let's code out this handle bullets
63:12 - function
63:13 - so let's go here it doesn't really
63:14 - matter where we put it and let's say
63:16 - define
63:17 - handle underscore bullets
63:20 - let's have this take
63:21 - the yellow
63:25 - bullets the red bullets
63:28 - the yellow character
63:30 - and the red character okay so what this
63:32 - function is going to do is move the
63:35 - bullets handle the collision of the
63:37 - bullets and handle removing bullets when
63:39 - they get off of the screen or collide
63:41 - with a character so what we'll do is
63:43 - we'll loop through all the yellow
63:44 - bullets check if they've collided with
63:46 - the end of the screen or with the red
63:48 - character then we'll loop through all
63:49 - the red bullets and do the same thing
63:51 - except for the other character so let's
63:52 - do this i'm going to say four
63:54 - bullets in
63:56 - yellow underscore bullets like that then
64:00 - i'm going to start by moving the bullet
64:02 - so since it's a yellow bullet it's
64:03 - coming from the left which means we need
64:05 - to move it to the right because it's
64:06 - coming from the character on the left so
64:08 - we're going to say
64:10 - bullet
64:11 - dot x plus equals the bullet velocity to
64:14 - move it to the right so we move it and
64:17 - then after we move it we're going to
64:18 - check for collisions we're going to say
64:20 - if
64:21 - yellow now there's this fancy thing in
64:23 - python or in python in pi game called
64:25 - collide rect and we can pretty much
64:27 - check if the rectangle representing our
64:30 - yellow character has collided with the
64:32 - rectangle representing our bullet this
64:34 - is pretty easy all we do is just pass
64:36 - bullet right here and what this does is
64:38 - tell us that hey yellow did collide with
64:41 - the boulder both did collide with our
64:42 - yellow rectangle or it didn't so this is
64:44 - true or false but this is really easy
64:46 - way to check for collision use collide
64:48 - rect keep in mind this only works if
64:50 - both objects are rectangles which they
64:52 - are and that's why i used the rectangles
64:55 - okay so now that we have that
64:57 - we're going to do something kind of
64:58 - fancy
64:59 - if we collide with the yellow character
65:02 - the first thing we need to do is remove
65:03 - this bullet so we can just say yellow
65:05 - underscore bullet
65:07 - dot remove and we can remove the bullet
65:09 - that's fine we're going to delete the
65:10 - bullet because it's gone it collided but
65:12 - we need to tell our main game loop down
65:15 - here somehow
65:17 - that
65:18 - we collided with the red character right
65:20 - we need something to pop up we need to
65:21 - remove health whatever it is we need to
65:23 - do something
65:24 - but i can't directly modify anything in
65:26 - my main game loop from this function
65:29 - right other than the stuff that was
65:30 - passed to it so what i'm going to do is
65:32 - i'm going to post an event now in pi
65:34 - game there's these things called events
65:36 - right just like event dot quit just like
65:38 - event dot key down right whatever uh
65:40 - you're we're checking the types equal to
65:42 - pi game dot key down pi game dot quit so
65:44 - i'm going to post an event create a new
65:47 - event and then we can check for that
65:49 - event inside of here and do something if
65:51 - that event occurs now this event is
65:53 - going to be red collided or you know
65:55 - bullet hit red or red hit or whatever we
65:58 - want to call it we'll do the same thing
65:59 - for yellow we're going to post an event
66:02 - that we will then check for in this
66:03 - while loop so to do this we need to
66:05 - first create this event so i'm actually
66:08 - going to go up to the top of my program
66:10 - here
66:11 - we'll do like kind of a new section i'm
66:13 - going to say in all capitals
66:15 - yellow
66:16 - underscore hit and then we'll say red
66:18 - underscore hit like that
66:20 - and this is going to be equal to
66:23 - something that's kind of weird but pi
66:24 - game dot user event
66:27 - plus one and for this one pygame
66:30 - dot user event
66:32 - plus two this just represents the code
66:36 - or the number for a custom user event
66:39 - since we're going to have multiple user
66:41 - events we can add one to this one and
66:43 - add two to this one so now we have two
66:46 - separate user events that we can check
66:48 - for and handle i know this is strange
66:49 - but this is how you create a new event
66:51 - you say pi game.uservent plus
66:54 - some number obviously going up in
66:55 - sequence so plus one plus two plus three
66:57 - plus four if these were both plus one
66:59 - they would be the same event because
67:00 - they would have the same underlying
67:02 - number representing them this right here
67:04 - uh to my understanding is really just a
67:06 - number like it's you know 450 it's some
67:08 - number we don't know what it is we just
67:10 - add one to it to make sure we have a
67:11 - unique event id that's pretty much what
67:13 - we're doing so yellow hit and red hit
67:16 - those are my two events
67:17 - so we're going to go down here uh we're
67:19 - going to go into here sorry and up here
67:21 - we're going to say
67:23 - pi game
67:25 - like this dot event dot post and we're
67:29 - going to post a pie game
67:32 - dot event
67:34 - i think it's dot event
67:36 - dot event like that and inside of here
67:39 - we're going to pass the event that we
67:40 - want now actually sorry this should have
67:42 - been red not yellow so red dot collide
67:44 - wrecked because we're checking if the
67:46 - yellow bullet's hitting the red
67:47 - character so you guys probably saw that
67:48 - that should be red and the event we're
67:50 - going to pass is or post is red
67:53 - underscore hit so this is telling us or
67:55 - we're making a new event that's saying
67:57 - that the red player was hit now we'll
67:59 - literally copy all of this and do the
68:01 - exact same thing
68:03 - for not our yellow bullets but for our
68:05 - red bullets so we'll say red like that
68:08 - we'll change red to yellow
68:10 - and then instead of yellow bullets this
68:12 - is going to be red bullets instead of
68:14 - red hit this is going to be yellow hit
68:16 - now this is the exact same thing except
68:18 - now we're checking the red bullets but
68:19 - we need to move the red bullets in the
68:21 - other direction because we're firing
68:23 - from the right of the screen moving to
68:25 - the left closer to zero zero so we
68:27 - subtract the bullet velocity so this
68:29 - handles our yellow bullets this handles
68:31 - our red bullets
68:32 - and that should be it for moving the
68:34 - bullets so let's actually try this out
68:36 - and let's see how many mistakes that
68:38 - i've made assuming we made any so
68:40 - refresh
68:42 - we have our two uh ships now i'm going
68:44 - to press ctrl and ah we got an issue
68:47 - deprecation integer is required but got
68:49 - type float i'll be right back just gonna
68:51 - have a look at what the issue is here
68:53 - alright so i found the error pretty
68:54 - silly one i should have came up with
68:56 - this pretty much we cannot have floating
68:58 - points when we create a new pi game
69:00 - rectangle so for both of our bullets we
69:03 - need to actually put two slashes here
69:05 - for integer division it's fine this is
69:07 - gonna round anyways it'll be okay we
69:10 - just need to do integer division so red
69:11 - dot height integer divided by two yellow
69:13 - dot height integer divided by two uh so
69:16 - that way we don't get any floating point
69:17 - issues now same thing here with this
69:19 - border it's going to go to our border
69:21 - and we have width over two we're going
69:23 - to change this to over over two
69:25 - so that way again we don't have that
69:27 - floating point issue that we're running
69:28 - into before but this was indeed working
69:31 - uh with despite of those two issues so
69:33 - just fix those division signs to be two
69:35 - division signs so slash slash but i
69:37 - realize that we're not drawing any of
69:38 - these bullets so let's draw these
69:40 - bullets onto the screen because it's
69:41 - going to be hard for me to show you that
69:42 - it's working without drawing them so
69:44 - inside of our draw window now
69:46 - i want to take actually just let's just
69:48 - take a list of bullets so what we'll do
69:50 - is we'll combine the you know what i
69:52 - can't do that because it's going to be
69:53 - drawing the wrong color let's take
69:56 - red underscore bullets and let's take
69:58 - yellow underscore bullets doesn't matter
70:00 - what order we take them in and let's
70:01 - draw these bullets onto the screen so
70:03 - after i draw everything else we'll draw
70:05 - our bullets so we're going to say four
70:07 - bullets in red underscore bullets then
70:11 - what we'll do is we'll say pi game dot
70:13 - draw dot rectangle we'll draw these onto
70:16 - the window these are going to be red so
70:17 - this is an opportunity to create another
70:18 - color called red so let's go here we're
70:21 - going to say red is equal to 255
70:24 - 0 0 because red well is
70:27 - all red and nothing else we also need
70:29 - yellow so let's go ahead and do that now
70:31 - can i remember my primary colors i'm
70:34 - just going to look so i don't mess this
70:35 - up i mean i believe this is red
70:38 - and green
70:39 - creates yellow i think that's correct so
70:41 - let's go here with yellow so 255 255 0.
70:44 - okay and now we have red and yellow so
70:46 - we can draw pygame.draw.rect window
70:50 - color red and what are we drawing well
70:52 - we're going to draw the bullet
70:54 - which is really just a rectangle
70:56 - copy this
70:57 - do the same thing
70:58 - and the only thing that we need to
70:59 - change is the color
71:01 - so this is going to be yellow and this
71:03 - is going to be yellow
71:05 - there we go so we have our two colors
71:07 - defined we're now going to draw the red
71:08 - bullets and all the yellow bullets on
71:10 - the screen so we just loop through them
71:11 - and just draw all of them out okay so
71:13 - let's refresh or let's run this
71:15 - and draw a window missing two required
71:17 - positional arguments red bullet and
71:19 - yellow bullets that would make sense
71:20 - because i forgot to pass them so let's
71:22 - go down to our main
71:24 - function here
71:26 - see where we have draw window
71:29 - we're going to pass the red bullets
71:32 - so lowercase red bullets and lowercase
71:34 - yellow bullets awesome quickly just so
71:37 - you guys can see everything i'm going to
71:38 - zoom out i give you an idea this is what
71:40 - the main function looks like in case you
71:42 - guys are on a larger display and you
71:43 - want to see all of it
71:45 - this is what the other functions look
71:47 - like just going to kind of scroll
71:49 - through so you guys can have a look here
71:51 - and pause the video if you need a
71:52 - specific part or if i'm going too fast
71:54 - for you
71:55 - okay so let's zoom back in
71:57 - let's run and let's see if this is
71:59 - working now so i'm here on my left guy i
72:01 - press ctrl
72:03 - boom we fire a yellow bullet kind of
72:04 - hard to see on the white background but
72:06 - also notice let's let's go with the
72:08 - right one because you're able to see the
72:09 - red that this bullet when it hits my
72:11 - player it's disappearing that's awesome
72:14 - this is working
72:15 - and boom
72:16 - we're good to go so now what we need to
72:18 - do and also notice if you try to hit
72:20 - control a bunch of times it only lets
72:22 - you shoot at most three bullets at a
72:24 - time right which is exactly what we
72:25 - wanted if i go up here now i can't shoot
72:28 - any bullets until these go off the
72:30 - screen and in fact i forgot to handle
72:32 - the fact that the bullets go off the
72:34 - screen we need to remove them so let's
72:35 - do that next
72:37 - awesome so much stuff i always forget
72:38 - how much stuff we actually need to do so
72:40 - now
72:41 - after we check this collide rectangle
72:44 - we're going to check if any of these
72:45 - bullets are off the screen so to do this
72:47 - with the
72:49 - yellow bullet all we have to say is if
72:52 - bullet dot x and this one is going to
72:54 - the right
72:55 - is greater than uh and we're not going
72:57 - to bother with the width or the bullet
72:59 - or anything it's fine it will just make
73:00 - it disappear when it gets to the edge
73:02 - we'll say bullet dot x is greater than
73:05 - the width of the screen
73:06 - than yellow bullets
73:09 - dot remove bullet but we'll just do an
73:11 - else here to make sure that we don't
73:13 - so this will be
73:14 - l if so that we don't potentially remove
73:16 - the bullet twice anyway so we'll do that
73:19 - now we'll add an lap here we'll say l if
73:22 - bullet dot x
73:24 - is less than zero because that would be
73:26 - when it's off the screen if we're
73:27 - subtracting the velocity then same thing
73:29 - here red bullets
73:32 - dot remove
73:34 - and bullet so that should be good just
73:35 - checking if it's going off the screen in
73:37 - either direction okay so let's try this
73:39 - now
73:40 - when i press control a bunch of times
73:42 - boom i should be able to press it again
73:43 - awesome they're getting removed all is
73:45 - good
73:46 - all right so before we do anything else
73:48 - let's actually just change the
73:49 - background because my eyes are hurting
73:50 - with that yellow on white so we'll
73:52 - change it to that nice space background
73:54 - that i showed you at the beginning so to
73:55 - do this we need to load in our space
73:57 - background if we go to our assets folder
74:00 - we can see we have space.png so we're
74:02 - just going to say space
74:04 - is equal to
74:05 - pygame
74:07 - dot image
74:09 - dot load and then we're going to load in
74:12 - dot path dot join so os
74:15 - dot path dot join with the
74:18 - assets folder like that and then we want
74:22 - to load in space dot png
74:25 - now
74:26 - that is that's fine we can do that but
74:28 - i'm also going to rescale this image
74:29 - because it's really big to be a lot
74:31 - smaller just so it looks nicer so to do
74:33 - that we'll say pygame
74:36 - dot transform
74:38 - dot scale and then we'll wrap this image
74:41 - around and inside of this we'll put the
74:43 - dimensions now we have perfect
74:45 - dimensions for this we can just make it
74:46 - the width and the height
74:48 - of our window now this might make it a
74:50 - little bit kind of stretched
74:52 - we'll have a look at how it how it looks
74:54 - but i'm just going to make this width
74:55 - height so we're resizing it to that so
74:58 - now rather than filling the screen with
75:00 - white every single iteration and
75:02 - actually let me show you what happens
75:03 - when i don't do that because that's
75:05 - interesting so before i draw the
75:06 - background i'll show you what happens
75:07 - when we don't fill the screen with white
75:10 - look you can see this i'm just moving
75:11 - around all over the place the reason
75:13 - this is happening is because pie game
75:15 - does not remove the last drawing that we
75:18 - made right it just keeps drawing stuff
75:20 - onto the canvas so if i don't draw a
75:22 - white background every single frame i
75:24 - don't draw something that covers the
75:25 - entire screen then you get all this kind
75:27 - of movement stuff because it's not
75:28 - erasing anything that it previously drew
75:31 - so anyways i just thought that was
75:32 - interesting so let's now put that image
75:34 - onto the screen i'm going to say win
75:36 - in all capitals dot blit we're going to
75:39 - blit space and then we're going to put
75:40 - it at 0 0 because this is the background
75:43 - so we can just start at the top left and
75:45 - fill the entire screen because we
75:46 - already know its width and height is
75:47 - that so let's go ahead and run
75:50 - and there we go we get a nice space
75:51 - background actually doesn't look bad at
75:52 - all in fact this looks pretty nice so
75:54 - i'm going to leave it like that awesome
75:56 - then we can go there you go yellow looks
75:57 - a lot nicer on that background
76:00 - awesome so now let's handle those events
76:03 - so when we actually get hit we need to
76:04 - do something we need to have some health
76:06 - or something like that then we're going
76:08 - to add sound effects we've got a bunch
76:09 - of stuff well actually not that much but
76:11 - a few more things to do so now inside of
76:13 - my main event loop remember just a quick
76:16 - refresher we're posting these events
76:17 - right yellow hit and red hit so when we
76:20 - post these events they just get added to
76:22 - this pie
76:24 - game.event.getq that's kind of appearing
76:26 - with all of the events so all we have to
76:27 - do is just inside this for loop check
76:29 - for these events
76:30 - so if event.type equals equals red
76:34 - underscore hit
76:36 - then we'll do something and if event dot
76:38 - type
76:39 - equals equals yellow underscore hit like
76:42 - that then we'll do something else so
76:44 - this is a perfect time to implement a
76:46 - notion of health so we want to have both
76:48 - characters have some number of health
76:50 - and every time they get hit that's
76:52 - obviously going to subtract so to do
76:54 - that pretty straightforward but we're
76:55 - going to make two variables here we're
76:57 - going to say red underscore health is
76:59 - equal to 10 and yellow underscore health
77:02 - is also equal to 10. whenever a player
77:04 - has zero health again feel free to
77:06 - change these numbers then we'll say that
77:08 - the opposite player has one so that'll
77:10 - be kind of the objective or how you win
77:12 - or lose our game
77:13 - so if red is hit what's the obvious
77:15 - thing to do subtract red's health so red
77:18 - health minus equal one
77:20 - if yellow is hit then we'll say yellow
77:22 - underscore health minus equals one
77:25 - then what we want to do is now check
77:27 - actually we don't need to do it inside
77:28 - of this for loop but we can do it
77:29 - outside of this wall if either player
77:32 - has health that is equal to zero and if
77:34 - they do the opposite player will win the
77:37 - way i'm going to do this is interesting
77:38 - but i'm going to say if
77:41 - let's say if red
77:42 - underscore health is less than or equal
77:45 - to zero and then i'll say if
77:47 - yellow underscore health is less than or
77:50 - equal to zero i'm actually going to
77:51 - define this variable i'm going to say
77:53 - winner underscore text equals and i'm
77:56 - going to say
77:59 - yellow wins like that now on the other
78:02 - side i'm going to say winner underscore
78:04 - text is equal to red wins this is the
78:07 - text that i want to appear on the screen
78:09 - when either of these situations happen
78:10 - we'll get into this in a second but i
78:12 - just want to start defining it now above
78:14 - here i'm going to say winner underscore
78:16 - text equals a blank string and i'm going
78:19 - to check in one more if statement if
78:22 - when our underscore text does not equal
78:24 - blank then inside here
78:28 - someone won so the basic logic behind
78:31 - this
78:32 - we have this variable called winner text
78:33 - it's equal to nothing if either the red
78:35 - player or the yellow player has lost so
78:38 - they have zero health then we will set
78:40 - the winner text to be something other
78:42 - than empty string
78:43 - in the situation where winner text after
78:46 - we check both of this
78:47 - is not equal to an empty string someone
78:50 - won
78:51 - we should display that winner so we will
78:54 - get to that in a second but now what we
78:56 - want to do is show both of these scores
78:58 - on the screen and then once we've done
79:00 - that we just have to add sound effects
79:02 - handle someone winning and we're pretty
79:03 - much done we're getting very close
79:05 - so let's do this
79:06 - let's start showing the score
79:08 - to show the score that means i need to
79:10 - pass the score to my draw window and i
79:12 - need to somehow draw that score in the
79:14 - window so i'm just going to pass
79:16 - the i guess it makes sense to pass red
79:17 - first so we'll pass red health
79:20 - and yellow health like that to my draw
79:22 - window
79:23 - now let's go to draw window
79:25 - let's now take inside of draw window
79:29 - the red underscore health
79:32 - and the yellow underscore health like
79:35 - that
79:36 - and now inside of here what we'll do is
79:39 - we'll actually draw these their score or
79:41 - their health on the screen now to do
79:43 - this this involves using fonts we have
79:45 - to actually render some text on the
79:46 - screen so this is where we get into our
79:48 - next step
79:49 - so what we're going to do at the very
79:50 - top of our program
79:52 - is we're going to say pygame dot
79:54 - font.net now i just took a quick pause
79:56 - there because as you guys can see i
79:57 - spilt water on myself so that's great
79:59 - but we'll continue that's fine i will
80:01 - survive anyways you're going to put
80:03 - pygame.font.init
80:05 - at the top of your program and this is
80:07 - going to initialize the pi game font
80:09 - library or whatever it may be then what
80:11 - we need to do is define a font that we
80:13 - are going to use so it's getting kind of
80:15 - messy up here i'm just going to do
80:16 - another kind of little section
80:18 - and i'm going to say that the health
80:20 - underscore font is going to be equal to
80:24 - pygame dot font dot sys font with these
80:29 - specific capitals we're going to define
80:31 - the name of the font which i'm just
80:32 - going to use comic sans and then the
80:34 - size in this case i'm going to pick 40.
80:36 - so what i'm doing here is i'm just
80:38 - defining the font that i want to use
80:39 - comic sans size 40. we're all good we
80:43 - can continue alright so now that we have
80:44 - the font defined we need to use it so
80:46 - we're going to go inside of draw window
80:47 - i'm going to show you how we can
80:48 - actually put font onto the screen uh now
80:51 - draw this wherever you want just
80:52 - obviously after the background's drawn
80:54 - i'm just going to draw it after the
80:55 - spaceships meaning that it will overlap
80:58 - our spaceships actually you know maybe
80:59 - that's not the best idea maybe we want
81:01 - our spaceships to go over top of this
81:03 - font if that situation occurs which it
81:06 - could so let's start by doing this let's
81:08 - say red
81:10 - health underscore text and this is going
81:13 - to be equal to
81:15 - pie game
81:16 - or sorry not pie game we're going to say
81:18 - score not score health underscore font
81:22 - finally got it right third try dot
81:24 - render now we just define this font
81:26 - right we're going to use this font to
81:28 - render some text now the text that i
81:30 - want to render is the following i want
81:32 - to render
81:34 - health
81:35 - colon
81:36 - and then space plus
81:38 - the string of
81:40 - red health so we'll take whatever that
81:42 - number is convert it to a string and
81:44 - concatenate it with help
81:45 - then we need to say 1 for anti-aliasing
81:48 - i'm not really going to talk about that
81:49 - is but you just always put one as the
81:50 - middle argument for our purposes and the
81:53 - color of this text which is going to be
81:54 - white
81:55 - so
81:56 - red health text is health font dot
81:58 - render it's equal to health plus
81:59 - whatever the health is and then one
82:01 - white
82:01 - same thing now for the uh not red text
82:05 - but for the yellow text so we say yellow
82:07 - health text
82:09 - now what we've done is we've created
82:10 - kind of two text objects and we want to
82:12 - draw these on the screen so to draw them
82:14 - on the screen we're going to say win
82:16 - dot blitz we're going to pick well i
82:18 - guess we already know the window we're
82:19 - going to pick what we're blitting which
82:21 - in this case is red health text and we
82:23 - need to pick where red is on the right
82:26 - side of the screen so that means i want
82:28 - to blit it at an x position that is like
82:31 - right at the edge of the screen i'm
82:33 - going to do this dynamically you can
82:35 - hard code a number if you want but the
82:37 - correct way to do this or the way that
82:39 - will look the best is width
82:42 - minus and then red underscore health
82:46 - text dot get underscore width this will
82:50 - get the width of that text and subtract
82:52 - that from the width of the screen so the
82:54 - top left position we're blitting this
82:56 - will be
82:57 - like right at the edge and then i'm also
82:59 - just going to subtract 10 pixels just so
83:01 - this has like a 10 pixel pad from the
83:03 - very edge of the screen where do i want
83:05 - to blend it on the y i'll put it at 10
83:08 - because it's going to be right at the
83:09 - top of the screen we'll just make it 10
83:10 - pixels down by having this negative 10
83:13 - and this 10 we're padding it so it's 10
83:15 - from the right wall intent from the top
83:17 - wall now we'll do the same thing or a
83:20 - very similar thing for uh for our yellow
83:22 - text so wind.blit
83:24 - we're going to say
83:26 - yellow health text and then where do we
83:28 - want it we're actually going to put at
83:29 - 10 10. reason we can do this is because
83:31 - we don't really care about the width of
83:33 - it because it's going to be the left
83:34 - border that we want padded from the left
83:36 - wall and then 10 pixels down as well
83:38 - from the top so that's what blitting it
83:40 - at 10 10 will do anyways
83:42 - this will give us the red health text
83:44 - the yellow hot text it'll be showing up
83:45 - on the screen so let's try this actually
83:47 - uh we handled the events
83:50 - we're passing in the health yeah we're
83:52 - look very close to done so let's run
83:54 - this
83:55 - and now you can see the health is
83:57 - showing up so we have it in the corner
83:59 - boom move that like that and then notice
84:01 - that the health gets updated but for
84:03 - some reason the health is changing for
84:05 - both of them so i think i just have a
84:06 - small bug so let's have a quick look
84:08 - here
84:09 - uh we have
84:10 - that red health so yellow health minus
84:13 - one red health minus one
84:15 - red hit yellow hit okay
84:18 - we're passing red health we're passing
84:20 - yellow health okay for some reason
84:22 - they're both getting updated so i guess
84:24 - that means that this event must be
84:26 - triggering uh for both of them so let's
84:29 - try to see why that's happening so i'm
84:31 - just scrolling around wondering why this
84:32 - isn't working and i'm realizing that
84:34 - well red health is in both positions
84:36 - here so this needs to change to yellow
84:38 - health
84:39 - because i had red health so obviously it
84:41 - was drawing the same thing so anyways
84:42 - let's try this now
84:44 - run and now if i hit someone
84:47 - only the health updates on one side
84:49 - which is what we're looking for so we're
84:51 - very close to done we just need to
84:52 - handle the situation where someone wins
84:54 - and adds sound effects so let's do
84:56 - someone winning first this is actually
84:58 - really straightforward i'm just going to
84:59 - make a function what this function is
85:01 - going to do is just draw text on the
85:03 - screen that says blank person 1 and
85:06 - you'll see how this works i'm going to
85:07 - say define
85:08 - draw winner we're going to take in some
85:10 - text that we want to draw and then we're
85:12 - going to make a new font so let's go to
85:14 - the top let's go with our other font
85:17 - let's say
85:19 - winner underscore font is equal to pie
85:23 - game
85:24 - like that
85:25 - dot font
85:26 - dot sys font this should be comic sans
85:31 - well you can make whatever you want and
85:32 - then i'm going to make this size 100 and
85:34 - i'll make it nice and large
85:35 - so now we'll use the winner font to
85:37 - actually render the text so we'll say
85:40 - winner underscore font
85:42 - dot render we'll render the text
85:44 - anti-aliasing 1 color white
85:46 - and then we'll draw this onto the screen
85:48 - so we'll say win
85:49 - dot blitz will blit the winner font
85:52 - we're going to do this nice and fancy
85:54 - and have it perfectly center in the
85:55 - middle of the screen so i'm going to go
85:57 - inside of here i'm going to say width
85:59 - over 2. now we'll actually double divide
86:01 - it by 2.
86:02 - i did i do that somewhere else i'm not
86:04 - sure just to make sure we don't get any
86:05 - errors although width over two is an
86:07 - even number so i think that's fine if we
86:09 - do that
86:10 - we'll say width over two
86:11 - minus
86:12 - because width over two again is the
86:14 - direct middle of the screen
86:16 - minus the
86:18 - i need to
86:19 - i've made a mistake here okay let's
86:21 - let's go text
86:24 - draw underscore text equals that we need
86:27 - a variable
86:29 - draw underscore text equals that i don't
86:31 - know why i thought blitting winner font
86:33 - was going to work but draw text is equal
86:35 - to winner font dot render that's better
86:37 - so now we'll say width over two minus
86:39 - draw underscore text dot get underscore
86:42 - width this will get the width of the
86:44 - text so how wide it actually will appear
86:46 - on the screen
86:47 - over two this will put it directly in
86:50 - the middle of the screen because it will
86:51 - take whatever half the width of this is
86:53 - and subtract it from the x position so
86:56 - that way when we draw this it will be
86:57 - perfectly in the middle of the screen i
86:58 - kind of went over this before we'll do
87:00 - the exact same thing for heights we'll
87:01 - say height over 2
87:03 - and then minus
87:05 - draw underscore text dot get underscore
87:08 - height
87:09 - over 2. again get height is just going
87:11 - to give you the height
87:12 - might be smart to do integer division
87:14 - here but i think this will be fine
87:16 - then we're going to say pie game dot
87:18 - time dot delay and we're going to delay
87:21 - this for 5 000 milliseconds which is
87:23 - five seconds you'll see why but what
87:25 - this will do and sorry we also want to
87:27 - update the display so before we start
87:29 - delaying i'm going to say pygame.display
87:33 - so what this is doing is we're going to
87:34 - call this function when someone wins so
87:36 - for five seconds we are going to show
87:39 - the the winning text and then we're
87:41 - going to restart the game so the reason
87:43 - i'm doing this and i'm not doing it
87:44 - inside of draw window is because i want
87:46 - to just pause the game whenever someone
87:48 - wins show this text and then just
87:50 - restart it immediately after
87:52 - that's why i have this pause if you want
87:54 - to change the pause to be longer or
87:55 - shorter
87:56 - just a thousand multiplied by whatever
87:58 - seconds you want to pause it for and
88:00 - that's how you pick the delay
88:02 - okay
88:03 - so now inside of wiener text here
88:06 - we're going to say draw underscore no
88:09 - not window
88:10 - draw underscore winner and we're just
88:12 - going to pass it the winner text
88:14 - because what this will do is then give
88:16 - it the winner text it will draw it on
88:18 - the screen we'll pause for five seconds
88:20 - it will appear and then
88:22 - we will break
88:24 - now when we break this will bring us to
88:26 - pi game dot quit which would usually
88:28 - quit the game now we can do that for now
88:30 - so let's actually just do that and i'll
88:32 - change it so it just restarts the game
88:34 - so here let's just spam control a bunch
88:36 - of times
88:39 - and make it so that we
88:41 - actually win so there you go boom we hit
88:43 - it says yellow wins appears on the
88:45 - screen wait it's going to close the game
88:47 - in a second and boom go ahead or the
88:49 - game goes goes ahead and closes now if
88:52 - we don't want the game to quit what we
88:54 - need to do is make it so we don't quit
88:56 - the game here but we just restart it how
88:58 - do we restart it how we started
89:00 - originally just by calling this main
89:02 - function since we define any game
89:04 - specific variables in here when i just
89:07 - recall the main function it will
89:08 - redefine these variables and the game
89:10 - will just restart so instead of having
89:11 - pi game dot quit i'll just say main like
89:14 - that but that means that what i need to
89:15 - do now when we actually do quit the game
89:17 - is say run equals false as well as
89:20 - pygame dot quit right inside of here
89:23 - so hopefully that's clear but this means
89:24 - now whenever we press the x it will
89:26 - actually close because if i removed
89:28 - pygame.quit from here and i didn't quit
89:30 - then we would just stop the while loop
89:32 - but we would restart the game whenever
89:33 - you press the x button which obviously
89:35 - isn't what we want so we have that now
89:37 - we can do one last test then we're
89:39 - adding sound effects and we're done so
89:40 - let's do this
89:42 - uh let's just test this out
89:45 - and let's keep going boom yellow wins
89:48 - give it a few seconds and it should just
89:49 - restart the game okay there we go
89:52 - restarts the game we get put back in our
89:54 - original positions we have 10 health we
89:56 - can fire our bullets and we're all good
89:58 - awesome
89:59 - so let's now add the sound effects which
90:01 - are super simple and then we will be
90:03 - done so the first thing that i need to
90:05 - do is load my sound effects uh actually
90:07 - sorry second thing i need to do is load
90:08 - my sound effects first thing i need to
90:10 - do is initialize kind of the sound
90:12 - effect library in python so i'm gonna go
90:14 - to the top here i'm gonna say pygame dot
90:16 - mixer dot init and this just starts kind
90:19 - of like the sound aspect of pie game so
90:22 - that it will work anyways now that we
90:24 - have that we're going to load in a mixer
90:26 - sound which will allow us to start and
90:28 - stop a sound whenever we want so the
90:30 - first thing i'm going to do is i'm going
90:31 - to make a variable i'm going to call
90:32 - this bullet
90:34 - underscore hit underscore sound and this
90:37 - will be when we actually hit something
90:38 - that'll be the sound and then we'll say
90:40 - bullet underscore
90:43 - fire like that underscore sound
90:45 - and now let's load these in so we're
90:47 - going to say pi game
90:49 - dot and then in this case we're going to
90:50 - say mixer dot load and we're going to
90:53 - load from os dot path dot join
90:56 - the start of the pass path is assets and
90:59 - the end is simply the name of what we
91:01 - want so the gun silencer
91:04 - funny enough these are the sounds i've
91:05 - used right the gun silencer is the one
91:07 - for when someone collides and the sorry
91:09 - the gun silencer is for when someone
91:11 - shoots and the grenade is for when it
91:13 - collides so i'm just gonna say grenade
91:15 - plus one dot mp3
91:18 - and then we'll just copy this line
91:20 - do the same thing but change grenade
91:22 - plus one to be gun
91:24 - plus
91:25 - silencer uh did i spell silence or right
91:28 - yeah dot mp3 so now we have both these
91:31 - sounds and if we want to use them it is
91:33 - really easy to do this all we have to do
91:35 - is go down and i'm just going to make it
91:38 - so that whenever we fire a bullet so
91:39 - whenever this happens
91:41 - we actually make put that sound right so
91:44 - now i'm just gonna say
91:47 - bullet
91:48 - underscore fire underscore sound dot
91:50 - play all right is it dot start or is it
91:53 - dot play i think it might be dot start
91:55 - uh let me look at my other code here
91:57 - so actually no it's i've been lied to it
91:59 - is dot play
92:01 - okay so we're going to play the sound
92:02 - like that so bullet fire sound dot play
92:05 - and the same thing here so whenever we
92:06 - fire the bullets we'll play the sound
92:08 - and then whenever we get hit so whenever
92:10 - we lose health we'll play the collision
92:12 - sound so we'll say
92:14 - bullet
92:15 - underscore hit sound
92:17 - dot play
92:19 - copy that
92:21 - and paste that there so that's it that
92:23 - adds the sound effects this should be
92:24 - our game so let's run and pi game dot
92:27 - mixer has no attribute load okay so let
92:29 - me see what this is actually called um i
92:33 - thought it was called load but i guess
92:34 - it's called something else ah so i've
92:37 - made a mistake this is actually not
92:39 - supposed to be load where is load uh
92:42 - this is supposed to be sound with a
92:44 - capital s so just change that there this
92:47 - happens all the time i just forget the
92:48 - syntax pi game dot mixer dot sound
92:51 - and then this should work so let's run
92:53 - this now with the proper syntax let's
92:55 - run and bullet sound uh unable to open
92:59 - file assets grenade plus one dot mp3 now
93:04 - it looks like i do have grenade plus one
93:05 - dot mp3
93:07 - for some reason that's not working
93:09 - i'm just going to go ahead and i don't
93:10 - usually recommend doing this but since i
93:11 - don't know the mistake i'm going to try
93:13 - assets slash grenade1 and then we'll
93:16 - just do the same thing here so we'll
93:18 - remove the os.path.join
93:20 - i don't think we actually need it for
93:22 - this specific sound
93:23 - or for the way that we're loading these
93:26 - and then
93:27 - we'll just do that so we'll just kind of
93:29 - you know make the path ourself assets
93:31 - slash grenade plus one and so on so
93:33 - let's try this now
93:34 - see if all is good unable to open file
93:36 - okay so give me one second i will be
93:38 - right back okay so it turns out that
93:40 - there's actually a corruption of these
93:42 - mp3 files of course that's going to
93:44 - happen to me at the very end of the
93:45 - tutorial but i promise you that the code
93:47 - i just wrote and i'll zoom out so you
93:49 - guys can can kind of see all of it i'll
93:50 - just slowly scroll through as i conclude
93:52 - here uh the code that i just wrote so
93:54 - the way i loaded that that's totally
93:55 - fine like even the os.path.join that
93:57 - should work and then to play the sound
93:59 - all you do is dot play so just trust me
94:01 - that this does work for you guys uh for
94:03 - some reason when you download the mp3
94:05 - file you like they're corrupted as well
94:08 - then just find your own sound effects
94:09 - and just load them in so throw them in
94:11 - the assets folder name them something
94:12 - and then load them i think it's just an
94:14 - issue with downloading the files from
94:15 - github you can't download mp3 files but
94:18 - do that load them in pick your own sound
94:20 - effects they should work with dot play
94:22 - it's a really minor part of the tutorial
94:23 - so i'm not too worried about it but then
94:25 - you should hear the sound effects when
94:27 - you press those buttons and well it does
94:28 - obviously add a lot to the game now i
94:30 - will quickly mention before i leave off
94:32 - here because this is all we're doing for
94:33 - this tutorial but there's a lot more
94:35 - stuff in pi game that you can do the
94:36 - point of this was really just to get you
94:38 - up to speed nice and fast show you how
94:40 - to create a simple game and show you how
94:41 - to do most of the things that you
94:43 - usually want to do you know projectiles
94:44 - moving characters around handling
94:46 - collision all that kind of stuff loading
94:48 - images loading sound effects although
94:50 - that didn't really work and all that
94:51 - kind of stuff and keep in mind like you
94:53 - know usually you can separate things out
94:54 - into different files this isn't perfect
94:56 - what i did but again just to give you an
94:58 - idea and really get you kind of started
95:00 - in python and pie game so if you guys
95:03 - appreciate this tutorial please do leave
95:04 - a like on the video and subscribe to the
95:06 - channel it definitely helps and i hope
95:08 - that this was helpful to you so with
95:10 - that said i will see you in another
95:12 - youtube video
95:15 - [Music]

Cleaned transcript:

hello everybody and welcome to another youtube video so in today's video what i'm going to be doing is going over pie game for beginners so as you can already see here i have a little game on my screen the purpose of this video is going to be to introduce you to the module called pygame in python i'm going to cover a lot of stuff in this video including sound effects images moving objects collision most of the fundamental and main things you need to know to actually create a game and we'll give you an idea of what we're going to be building it's nothing complex this isn't meant to be fancy again it's just meant to teach you how to work with this module and i figured we could do this kind of really simple twoplayer game to give you an idea of how everything works in pi game so you can see we kind of have two spaceships here they can move around the screen and i'm moving these with the same keyboard so i have wasd moving the one on the left and i have the arrow keys moving the one on the right and when i press the left or right control key that is actually firing bullets now there is sound effects i don't know if you guys can hear them i'll stop talking and hit it for a second so you might be able to hear that either way there is sound effects we'll be adding that in there and we'll show you how this works and you can see that once uh one of the enemies loses so they run out of health you can see that at the top it says boom yellow wins and even though i have these on the wrong side we'll fix that in in the original video anyways you get the idea this is the yellow spaceship this is the red spaceship really they should be on opposite sides for the tutorial we'll fix that anyways let's go ahead and get started but before we do i need to quickly thank the sponsor of this video before we get started i need to thank the sponsor of this video which is alco expert oligoexpert is the best platform to use when preparing for your software engineering coding interviews as the highest quality coding interview practice questions with over 115 practice questions detailed solutions in nine of the most popular programming languages a featurepacked browserbased coding environment extensive test suites and conceptual overviews and code walkthroughs for each and every problem algo expert is the best resource to use to ace your coding interviews algo expert also has a data structures crash course coding interview assessments and a brand new mock interviews feature i can highly recommend algo expert as a former customer myself and now an official instructor on the platform get started using algo expert today by hitting the link in the description and using the code tech with tim for a discount on the platform all right so big thank you again to that sponsor now let's go ahead and continue so the first thing we need to do when we're going to be working with the module called pi game is we need to install it on our computer now for some people this can be tricky it really shouldn't be that difficult but what you need to do is open your command prompt or open some terminal window depending on what operating system you're on if you're on windows you're going to open command prompt if you're on mac or linux you're going to open your terminal now this command may vary based on your operating system i'll go through all of the different variations but the first thing you want to type inside of your command prompt doesn't matter what directory you're in is pip install and then simply the module pi game go ahead and press enter that should install pygame in your python interpreter and your python environment then you should be good to go now for some reason this isn't working or when we get to the next step which is just testing our code and importing pi game you don't see anything happening try the following command pip3 install pi game so just add a three to the end of pip there uh oops i didn't mean to delete the three uh but pip three install pi game hopefully that one should work for you and if neither of those work for you then try the following python hyphen m pip install and then pygame like that and if this one doesn't work either then do the same variation so add python 3 hyphen m pip install pi game if none of those four commands work for you and you can't uh install pygame i'll leave links to videos in the description that show you how to fix your pip they're not directly called that but actually this will be perfect for this because they are how to install pi game on mac and windows respectively anyways let's continue now we have pi game installed we're going to head to some environment that we're going to write code in you can do this in the default idle so the thing that just comes with the basic python installation or you can use something like vs code sublime text whatever you want so i'm going to be using vs code this just makes it easy for me for me to run my code by pressing the run button up here but again feel free to use whatever you want you don't need to use vs code it doesn't matter what you use we're just going to do everything in one file anyways now that reminds me before we actually jump in we need to download some assets for this game so you saw i had a background i had those spaceships all of the stuff including the code for this tutorial is going to be available on github so i will leave a link in the description what you're going to need to do is download this assets folder mainly you can download the code file as well which will be uploaded here with the entire code for this video afterwards but to do that you're just going to press the link to bring you a page that looks like this you're going to press code and then download zip now if you understand how to use github obviously i don't need to tell you how to do this but downloading the zip file so let's actually just do it on here to make sure everything is going to be all good so i'll put that into my downloads then you're going to open up the zip folder you're going to go inside the interior folder you're going to grab the assets folder on windows i usually like to just cut it so ctrl x you can also copy it and you're going to paste it beside wherever your python file is so if you have your python file on your desktop i would recommend first of all you put it in a folder called you know pygame for beginners or whatever then just put this file beside it so that you have the assets folder and then whatever your main python file is is in the same directory that's really important so anyways do that and then we can go ahead and continue alright so apologize for the intro but let's get into this the first thing we're going to do now and notice that i have pi game tutorial and then i have my assets in my main.pi file obviously create a new python file and inside of that file you're going to type import pi game this is just to make sure that this is working so we're going to import pi game then we're going to run the code you can see it kind of pops up a little terminal right here and notice it says module not found no module named pi game now i'll fix that on my end but make sure you guys don't get this message if you get hey welcome to pi game or some little text like that you're good to go and you're ready to continue so i'll be back after i fix this for myself all right so i'm back you can see i'm now getting the message pygame 1.9.6 doesn't matter what version you're using hello from the pi game community and we're all good to go and get started now one last note here i'm just trying to cover all of the issues that happen do not name your python file pi game if you do that it will not work so just name it anything other than pi game very important okay now that we have that let's get started so first of all what is pi game well pi game is a 2d graphics library that lets you make little games it's actually really powerful i've created a ton of awesome projects using pi game and well it's pretty simple to actually set up the first thing that we need to do whenever we kind of start making a game in pi game is we need to make the main surface now i usually just refer to this as the window again you can call it whatever you want but in pi game everything that we're working with is usually referred to as a surface so you might hear me use that term but anyways i'm going to start in all capitals i'll tell you why in a second i'm going to say win equals pi game dot display dot set underscore mode and then inside of here we're going to put a tuple and we're going to put the width and the height that we want the window to be so it's usually good practice to define two variables above this that says width comma height and then is equal to whatever you want the width and the height of this game to be now i'm going to make mine 900 by 500 if you're on a really low resolution display this might take up like a large chunk of the display so feel free to scale these numbers down it doesn't really matter what you make the width and the height but it might affect what you want to make the dimensions of say the background or the images later on anyways we're going to say width height equals 900 500 win equals pi game dot display dot set under square mode and then inside of here i'm going to say in all capitals width height so i'm pretty much telling pi game hey let's make a new window that is of this width and this height and i've defined those both above the reason i'm using all capitals here is usually just good convention to define all of your constant values in capital so our window even though it may potentially change is fine to be in all capitals and our width and height those are constant they're not going to change so i'm making them all capital values all right so now that we have that uh let's actually start creating our first like pie game event loop and and having something pop up on the screen so usually what i like to do is i'd like to define a main function and inside of this function i'm going to put all of the code that kind of handles the main game loop in pi game so usually when you create a game you have a loop and this loop is doing things like redrawing the window checking for collisions updating the score whatever it may be and anyways we're going to put that inside of this main function right here so the first thing that we need to do is set up a while loop this while loop will be the game loop and this will actually let our game not just instantly open and then close so think of it as like an infinite loop and then we'll terminate it whenever the game ends so i'm just going to make a variable i'm going to say this is run it's equal to true then i'm going to say well run so until we set run equal to false or we break out of this loop this loop will keep running the first thing that you always do inside of your event loop in pi game is the following you say 4 event in pygame dot event like that and then dot get and inside of here is where you check for the different events that are occurring in pi game so don't worry about the fancy syntax but this is just getting us a list of all of the different events we're looping through them and then we can check what these events were and based on what they were that we can we can do something different so the first event that you usually check for is if the user quit the window so again i'll show you how all this works later and we'll go into more detail but just to get right into it we're going to say if event dot type equals equals and then pie game dot quit in all capitals what we're going to do is we're going to say run equals false like that and what this will do is end this while loop so effectively quit the game now at the very end of this while loop what we're going to do is say pygame.quit and this will quit pygame for us and close the window so hopefully this is clear so far but that's all this is doing we're getting all the events if quit is an event that occurs then we'll exit the while loop and we will quit now i'll show you what that event is in one second but let's continue so now that we have that uh let's actually go down to the bottom of our program and let's say if underscore underscore name underscore underscore equals underscore underscore main underscore underscore then we're going to call the main function now what this is doing for anyone who's confused is just making sure that when we run this file we didn't it's hard to describe this but it's making sure that we're only going to actually run this main function if we ran this file directly so in python if you're not aware you can import modules right so let's say i imported this file from another file well if i did that and i didn't have this if name equals equals main thing and i just had the main function you know in the main line like this then it would automatically call this and start running the game now we might not want that to happen and i only want to run the game if we run this file directly not if this file is imported from somewhere else so that's why i'm doing this you don't have to really understand what this means but the name is simply the name of the file and main is telling us hey this was the main file that was run that's the best way i can explain it they're going into too much depth but anyways enough of this we haven't seen anything yet so let's run it and see if anything pops up so we're gonna run and there we go we get some window like this right black window nothing just says pie game at the top now the quit event is when we press the x on this window so when i press that notice that boom we quit we're all good because we handled this quit event if we didn't do that it wouldn't have quit the window we would have had to force quit this application which obviously we don't really want to have to do so there we go we've got our first pie game window popping up but that was kind of boring now i want to show you how we can draw stuff onto the screen and how we can change the name of that window so usually what i like to do is i like to go up to the top of my program and say pygame.display.set underscore caption and i like to give it some name so here this will set that little name caption that you saw that said pie game window or whatever it was so you can set this to whatever you want for simplicity i'm just gonna say first game like that i'm gonna save i'm gonna go ahead and run this and notice that now it says first game where my mouse is here at the top left hand corner all right so now that we've got that let's start drawing some some stuff onto the screen and doing some more uh advanced stuff so the first thing i'm going to show you is how we can fill the screen with a specific color then we'll start drawing some rectangles and all of that and getting into the game so to fill the screen with a specific color this is pretty straightforward you're going to use the window so you're going to say win like that and then you're going to say dot fill and then you give this a color and it will fill the screen with this color now the question is how do we actually give this a color what do we type in for the color well in pi game all of the colors are rgb meaning red green blue so what you need to pass is a tuple with three values one value for red one value for green one value for blue if you're not aware of rgb the ranges of numbers that you can pass in here are between 0 and 255 inclusive so that means you can include 0 or 255. so i could say something like 255 255 255. funny enough this is actually white when you look at rgb because you have the most red the most green and the most blue so anyways i'm not going to actually pass in a tuple like this because this is kind of hard to understand that this is white i'm going to make a variable at the top of my program here in all capitals i'm going to call it white and i'm going to set that equal to 255 255 255. now instead of passing that i'm simply going to pass white inside of here so this way if someone else is reading my code they know that hey this is the white color that's what we're filling the screen with so let's test this out and run the program and why is it not working well the reason this isn't working right now is because we did not update the display so in pi game the way it works is we can draw a bunch of stuff onto the screen and you'll see that when we start doing that we draw all these different things but the display will not be updated it won't show the most recent things that we drew unless we manually update it so what we need to do is say pi game like this dot display dot update so now when we update the display after we fill the display it will update and will show us the white so let's have a look there we go now we are getting a nice white background you're welcome to mess around with the color and you'll see different colored backgrounds all right so there we go we have white awesome we are making good progress now the thing is i usually don't like to do all of my drawing inside of this kind of main game loop i usually like to have the main game loop handling like all of the collisions all of the logic in the game and then having some functions outside of that that handle specific things that i can easily call so what i'm going to do just to clean this up and make it easier because we're going to be drawing a lot more stuff than than just this is say define draw underscore window now inside of here what i'm going to do is just take as an argument whatever i want to draw now in this case we don't really have anything specific that we want to put on the screen we're just filling it with a background color so i'm not going to take any arguments i'm going to take these two lines of code right here place them inside of this function so let's do that and now right before inside this while loop before the pie game dot quit i'm just going to call this function so now every time i loop through this loop here i'm calling draw window and well this will draw stuff onto the screen so let's run this and there we go we get the same thing it is still indeed working awesome so that is great now the next thing we need to talk about is frame rate or essentially how do we control how much this is refreshing because if we have a look at this right now we have an infinite loop we have some event loop going on right here and then every time in the loop we're just drawing something onto the screen that's fine but right now we are drawing this white background as many times as we possibly can per second onto the screen it's pretty it's solely based on the speed of our computer right on my computer i have a pretty fast machine this is drawing probably hundreds of times per second in fact we could measure it but i would guarantee it's hundreds of times per second or even thousands now we obviously don't want that because that means on different computers our game is going to run at a different speed because it's based on how quickly this while loop is running so to control this we need to implement something called fps or frames per second so i'm going to define a variable up here i'm going to say fps and make it equal to 60 and this pretty much will define how quickly or how many frames per second we want our game to update at now most standard games that are not like your big aaa games are running at 60fps so we're going to go ahead and just implement a hardcoded fps of 60. so now what i'm going to do is i'm going to define a clock object in my main function here i'll discuss what this is in a second but i'm going to say clock is equal to pi game dot time dot clock and inside of my while loop i'm going to say clock.tick and then i'm going to put fps now what this is going to do is control the speed of this while loop so this will make sure that we're going to run this while loop right here 60 times per second no matter what unless our computer can't keep up with that speed in which case it will run as fast as it can so clock.tick is just ensuring that we never go over this capped frame rate of 60 which is good that's what we want it makes our game controllable and we know it's consistent on different computers so now if we run this actually let's just go up here you notice that nothing's going to change except just internally it's only running at 60fps okay so that's great but our game is pretty boring right now we have nothing on the screen so let's actually go ahead and implement some characters so i want to have two spaceships one on the left hand side of the screen one on the right hand side of the screen i want them to face each other and i want them to be able to move so let's tackle that next so what i'm going to do is i'm going to start importing the images that i'm going to use for these spaceships so i'm going to start by just saying yellow underscore spaceship underscore image and this is going to be equal to pi game dot image dot load and inside of here we're going to load the yellow spaceship image so if we go inside of assets we can see that we have five things we have spaceship yellow spaceship red space png that's the background and then two sound effects which we'll get to later again you can download this from the link in the description it's the github link so what we need to do is import these images right here so the red spaceship and the yellow spaceship we need to load them into pi games so we can draw them onto the screen so what i'm going to do at the top of my program is going to import os the reason i'm importing os is because i'm going to use os which is operating system to help me define the path to these images so these images are inside of the assets folder the assets folders in the same directory as our python file remember that's very important and then what we're going to do is we're going to look inside the assets folder and then look for these specific images so to do this we're going to say os dot path dot join this is just a thing that you can do in python the reason i'm doing this rather than just separating things with slashes is because depending on what operating system you're on the directory separator might be different so this will handle that for us but os.path.join i'm going to join the path to the folder assets with the path to the image so i'm going to say assets and then spaceship like that underscore and i guess we're doing yellowfirst.png so i apologize that it's hard to read let's actually just zoom out a bit so you can see this we get yellow spaceship image goes pygame.image.load.os.p asset spaceship yellow.png so let's copy that line i'm going to do the same thing now except instead of yellow we're going to do red so red spaceship image and now all we have to do is just change this to red because we have the red image right there so now we have our two spaceship images my formatters help me out here by putting them in a way that we can read them now what we want to do is draw these onto the screen so we can actually see them so before i get too complicated and talk about anything more let's just show these up on the screen or draw them on the screen and see what they look like so we'll say win.fill white remember i'm doing all my drawing from inside of this draw window and now i'm going to say win dot blitz now you use blitz when you want to draw a surface onto the screen so technically these images when they get loaded in by pygame are known as surfaces so we have to use blit to bullet them onto the screen now that's kind of a misleading explanation but you can kind of imagine that anytime you have text or images you're going to use blit to put them onto the screen but i'll go through that later so anyways win.lit we're going to say yellow spaceship image because that's our image right here and then i'm going to define the position on the screen in which i want to draw these images so remember that our screen is 900 by 500 so 900 width 500 height which means that i really should be drawing my spaceship within those dimensions so it shows up on the screen now i can draw it off the screen at like a negative coordinate or something but obviously that doesn't make much sense to do now another thing to note in pi game is that when you draw something onto the screen it draws from the top left hand corner in fact it's probably a good point in time now to talk about the pi game coordinate system so excuse me because i'm on a mouse this is going to be really rough drawing but let's imagine this is our pi game window you know traditionally when we look at like an axis right we look at a graph you would say that 0 0 is right here in the middle of the window now in pi game that is not the case we don't have that because we don't have these kind of coordinate systems so in pi game the top left or zero zero is the top left sorry so zero zero trying to do two zeros here with the mouse is the top lefthand corner which means as you increase your x you're going further to the right and as you increase your y you're going further down of course y being you know vertical and x being horizontal so if i wanted to be at the bottom of the screen and my height was 500 i would draw somewhere like 400 right and maybe that would put me you know like somewhere around here so just keep that in mind uh this is the coordinate system for pi game and when we draw an object in in pi game we draw it from its top left so it's consistent if i draw an image at let's say what would this be reasonably like you know 500 by 200 or something like that we will start drawing it from the top left so the uh the width of the object or the width of the surface will you know be going to the right if that makes sense and then the height will be going down so even though it's at this position we're not drawing it from the center we're drawing it from the top left of the image so keep that in mind okay now we went through that so let's draw this image so we want to draw the top left of the spaceship where we're picking where we want to put the top left of the spaceship so in this case let's just put it at like 300 100 just to see what it looks like and in fact for now let's just draw the yellow one so we're going to go ahead and draw this and that's greed okay so it's taking up a good chunk of the screen this is obviously too big we're going to have to shrink this down but there you go you can see the spaceship showing up on the screen awesome now keep in mind though if i were to draw this spaceship before i were to fill the screen so if i do something like this then what do you think is going to happen so i go ahead i draw the spaceship then i fill the screen with white and then i update what do you think is going to happen i'm going to run and we don't see the spaceship the reason we don't see the spaceship is because we drew the spaceship before we filled the screen so the order in which we draw things matters and we can draw over top of something that's totally valid that happens all the time okay so just keep that in mind so now we have the yellow spaceship and what we want to do now is resize this spaceship so it's a bit smaller so we should pick the dimensions we want to resize it to then we also should rotate this spaceship so it's facing the correct direction so i'm actually going to start by resizing this image and then i will rotate it so i'm going to say yellow underscore spaceship like this and this is going to be equal to and then i'm going to resize and rotate this image in the same line i'll show you how to do both of them so in pi game to resize something you're going to say pie game dot not image sorry dot trans nope dot transform like that dot and then scale and inside of here you're going to pass the image that you want to resize so we're going to pass yellow spaceship image like that and then you're going to pass the dimensions that you want to resize this to so our spaceship was pretty wide it wasn't that tall we could look at the aspect ratio to determine what we want to resize this to but i'm going to go with 55 by 40. so 55 width and 40 height if we consider that the dimensions of our screen are or what are they here 900 by 500 that seems like a reasonable size to make our spaceship but feel free to make this larger feel free to make it smaller feel free to make it square mess around with it and see what you get but anyways that's going to scale our spaceship now so it'll be much smaller so let's do the same thing for the red spaceship so let's say red underscore spaceship like that is equal to pygame.transform.scale and then red spaceship image we're going to resize to the same thing 55 by 40. now since i'm using these numbers multiple times and i might use them later on make sense just throw them in a variable so i'm just going to say um you know space ship underscore width and then spaceship like that underscore height is equal to and then 55 by 40. and now i'll just replace these values just in case we ever want to change this it will work everywhere in the program so spaceship width and then spaceship height like that let's copy this and let's simply put it here okay so now that we have that before we rotate it let me actually just update this so instead of drawing a yellow spaceship image i'm just drawing yellow spaceship because yellow spaceship i know it's kind of messy to see here is now the one that is scaled down so let's go ahead and run this and see what we get and now we get a much smaller spaceship that looks much better to me maybe it needs to be a bit taller but honestly totally fine so let's leave it at that okay so now we need to rotate this image so to rotate it i'm actually going to go and find yellow spaceship and in fact let's separate these to make it easier to see and i'm going to wrap this scale within a a rotate so you'll see how it works but let's go pygame dot image dot rotate oops like that okay and now i know it's confusing with the brackets i'll go through it we're going to pick the angle that we want to rotate this at so i'm pretty much saying pigment.image.rotate this is the ending bracket at the very end there we're plugging in this as the thing that we want to rotate which is the scaled down yellow spaceship and we pick how much we want to rotate it so rotate it i want it to rotate to the right and i want to rotate it 90 degrees now let's see if that's correct we might have to rotate it 270. i forgot which way it was facing originally but let's see if this actually gives us the rotation so let's run uh and there's no pie game oops sorry guys uh this is not pygame.image.rotate i just got an error there this is pygame.transform.rotate so i make that fixed there on line 15. okay so run now and there we go we can see it's facing the correct direction okay so we've done that successfully now with the yellow spaceship now we want to take the red spaceship and rotate it but so it's facing the other way so let's copy game.transform.rotate let's wrap this here again and then let's go comma and let's rotate this one 270 degrees because we want it to face the other way so now we can draw the red spaceship as well so let's go down here and let's say wind.lit oops didn't mean to open that wind.blitz let's split the red spaceship and let's put a little bit further away let's put out 100 100 or actually let's put at 700 100. okay so take a quick look at this make sure your code matches now let's run and there we go we have our two spaceships facing each other all is looking good okay so now we have the spaceships now i want to show us how we can move these spaceships around so to move these spaceships is not actually super complicated but we need a way to keep track of their x and y position i guess as well as their width and height and then to change that position and pretty much just change where we're drawing them to be at their x and y position so what i'm going to do now is i'm going to write a little bit of code i'm going to go a bit faster than i've been going and then of course we'll stop and go over everything to make sure that you guys understand let's go down into our main function and now what i want to do is i want to define two rectangles which are going to represent my yellow spaceship and my red spaceship so i can control where they're moving to so just follow along and then we'll explain what it is so red equals and i'm going to say red this is going to represent our red player is equal to pi game dot rect like that and inside of here what i'm going to do is simply define the position or a rectangle that represents this red spaceship now you'll see why we're doing this but the pos or the arguments sorry for the rectangle are x y width and height so i define the x position the y position and the width and the height that i want my red player to be at so we already know what the width and the height are going to be because that's going to be equal to whatever we scaled our spaceship to right which was spaceship width and spaceship height good thing we stored that in a variable but the x and y we can pick now we want the red spaceship i mean we can decide this but let's say we'll put on the lefthand side of the screen so in that case let's make its x and y something like this so we'll make its x position 100 and let's make its y position 300 and then for its width and height we already know what this should be spaceship width and spaceship height okay so now we're gonna do the exact same thing for the yellow player here so let's instead of red let's change this yellow and then let's just change its x position so it's over near 700 so they're far away all right so now we have red and we have a yellow rectangle all i'm going to do now is i'm going to pass this rectangle so actually both of these rectangles red and yellow over to my draw window function so now inside of draw window i'm simply going to take red and i'm going to take yellow and rather than drawing my yellow spaceship in my red spaceship at a kind of predefined position i'm going to draw it at whatever position my red and yellow argument are at this way i can modify red and yellow and when i pass it to draw window it will change where we're drawing these rectangles so uh let's or these spaceships sorry rectangles just because we're representing them with rectangles but for our yellow spaceship we're going to draw this at yellow.x and yellow.y now the reason we have access to dot x and dot y is because yellow is a pi game rectangle and it defines that the x is this and the y is this so it just makes it really nice for us to use so yellow.x yellow.y now for red we're going to say red.x and red dot y like that so now we draw a red in our yellow spaceship now to show you how this would actually move around let's just do something really simple every single loop i'm going to move my yellow spaceship one pixel just so you guys can see it moving on the screen so i'm going to say yellow dot x plus equals one all this is going to do is add one to the yellow x position and move it in fact let's actually change this to red because red will have more time to move so this will move 60 pixels per second because the clock is ticking at 60fps and we're updating the x position 60 times and adding one to it so hopefully that's clear but let's run this and now notice that we have a red spaceship moving in uh the incorrect direction on the screen and i noticed that i actually put these spaceships on the wrong side because of the way that they're facing so we have two options we can change where they are so we can just change 700 100 or we can change their rotation i think it's easier to just change this right here so let's change 700 100 so they are on the right side of the screen let's run this and now you can see it's moving backwards but they are on the correct side of the screen now the reason this is moving again is because we're updating the exposition and we're drawing it at the x position so as we change red here well we're passing that updated red over here and then it's it it's moving right so hopefully that's clear but anyways that is how we would move it so now what we need to do is we need to actually change the x and y position when we press the arrow keys right so that we're moved based on the user input so we have two things that we need to check we need to check whether the red spaceship is moving or whether the yellow spaceship is moving now let me just run this one more time yellow spaceship is on our left red is on our right so we want to use wasd for the left and the arrow keys for the right spaceship because that just intuitively makes sense on the keyboard so let's start doing this i'm going to start doing it for the wasd keys so for the spaceship on the left which i can never remember i think it's the yellow one yeah it is the yellow one and then i will show you how we can do it for the red and how we can kind of clean up the code a bit so there is multiple ways to do this in pi game you may have seen if you've watched other pie game tutorials of mine that i don't use the method i'm going to use here the reason i'm going to show you this method is because this allows you to press multiple keys at the same time whereas the other method i've shown previously which i'm just not even going to bother showing here only lets you press one key at a time actually we'll show it later in the video so i can talk about it then but anyways what we're going to do is say keys underscore pressed is equal to pi game dot keys actually sorry just dot key dot get underscore pressed what this is gonna do is every single time this while loop is running and we reach this line so 60 times a second it's going to tell us what keys are currently being pressed down this way we can just look at all of the keys check if the ones that we're looking for are pressed down and if they are respond to that press this also means that if the key stays pressed down it will still register that it's being pressed so it's super useful and well you'll see as we get into this how this works but all we have to do is say if keys underscore pressed then inside of here pygame dot k underscore and then the name of the key that we're checking for you can kind of see a list is popping up on my screen here on how they work the ones that are special keys are in all capitals and the ones that are just letters or numbers are usually just lowercase although i guess you can't really capitalize a a number but anyways we're going to start by checking up down no we'll go left right up down so the first key is going to be a so this would be left right so let's just leave a little comment here let's say this is left so if we press the left key what should we do well we should move the spaceship to the left how do we do that well if we looked at the top left being 0 0 that means if we're going to the left we're moving closer to 0 0 on the x axis so let's subtract from our x value to move us backwards or to move us to the left right so closer to 0 0. so this since this is for the yellow spaceship we're going to say yellow.x minus equals and then what should we minus here well how much we want them to move when they press down this key now since we're going to use this multiple times it makes sense to go to the top of our program right after fps we can say velocity or vel is equal to and then i'm just going to set this equal to 5 feel free to change that around and make that whatever you want but let's make that five and now let's say yellow dot x minus equals velocity now before we go any further and get into more keys let's test this and see if this is working so keys pressed equal pi game dot key dot get underscore pressed gives us a list of all the keys we check with this expression right here if the a key is being pressed if it is we modify the x so subtract values from it which will move us to the left so let's try this i'm going to press the a key and notice that i can move left obviously i can't go anywhere else there you go and now i'm off the screen so that's something we're going to have to check as well if we're off the screen we're not going to have to let someone or we're going to have to disallow someone from moving or off the screen but for now that's fine we'll do that after so now let's handle the other keys so we can actually copy this line right here let's fix the indentation now instead of the a key let's do the right key which is going to be d so let's change this comment to right i actually just want one space for my comment here now yellow.x since we're moving right rather than subtracting the x we want to add to the x so let's add to it like that and now let's try both these keys so now i can move left and right but i cannot go up and down and keep in mind i can go off the screen in either direction so again something that we're gonna have to check okay so we've done that now now let's do the up and down key so we can copy this again and this modification will be pretty easy so now for up that's going to be w for down that's going to be s so let's change this comment to be up let's change this comment to be down and now instead of the y being modif or sorry so the x being modified i kind of spoiled it the y is going to be modified so that's actually all we have to do but what this is doing now if we're moving up we need to subtract from the y because the top left is 0 0. so when we go down that's adding to the y so when we go down with s we add to the y value and that will move us down so let's save that let's check this i'm going to run and now i can move up down left and right and kind of on diagonals because i can press the same keys at once right so if i press down and left or i press up and right you can see that i'm moving diagonally so that's great now what i want to do is actually take this and i want to put this in a separate function because it's going to get kind of messy if i'm doing this twice inside of this loop right here right so i'm just going to copy all this code that i just wrote i'm going to write a function here i'm going to say define yellow underscore movement like that now actually we could say yellow handle movement or something that makes more sense yeah yellow handle movement inside of here is going to take an argument called keys and all i'm going to do is the exact same thing that i have before and actually this argument is going to be called keys underscore pressed and i'm also going to take in yellow now it may seem that this is over complicating things but trust me it's going to be nicer when we do the other movement for the other character we're taking in that keys press list we're also going to take in the yellow character our code doesn't change whatsoever we've just moved it so that it's kind of separated and it's easier to see so now what i'm going to do inside of this loop is i'm going to call yellow underscore handle movement like that really i probably should have called it handle yellow movement but that's fine we're going to pass keys underscore pressed and then we're going to pass yellow like that now what this will do is it will give the keys press list that we need and it will give our yellow character and then we'll just do everything we were doing before but inside of this function now you can probably guess how we're actually going to handle the right players or what am i saying the right players the red player all we need to do is copy this function we'll just do a paste like that and now we're going to do the exact same thing except instead of yellow it's going to be red instead of a dws it's going to be up down left right or i guess left right up down so let's change this to red let's change the name of this function to red as well and then we can just change all of these yellows uh to be red i'm just going to do them manually but if you're fancy you could use the find and replace all right so exact same thing now we're going to change our left right up and down the arrow keys are really easy it's literally just k underscore left okay underscore right oops okay underscore down and k underscore oops well i did in the wrong order okay underscore down k underscore up all right so that should be good we don't need to change anything else now all we need to do is call this so let's call this function red underscore if we could do it in the right case red underscore handle movement let's pass it the same thing keys underscore press like that and then red now the red movement will be handled let's make sure this is all working so let's run this and you can see that i can move my left guy and now i can move my right guy and they move at the same time with no issues awesome so that is great we're making good progress but now we can move off the screen right so we need to handle this so that we can know because we can no longer move off of the screen but before we do that just because it's going to make this part easier and less repetitive let's handle the fact that in the middle of our screen we want a border right so i don't really want my red and yellow spaceship because you remember the game we made at the beginning to kind of be able to face like right beside each other i want them to have their own halves of the screen and not be able to cross over so let's make a rectangle that's kind of a border and divides the middle and then we'll draw that on the screen and make it so that our characters can't move past that border so let's go to the top of the program and we're just going to define uh wherever we want doesn't matter i'm going to say border in all capitals and this is going to be equal to pi game you guessed it dot rect this is just going to be a rectangle and we'll just draw this rectangle onto the screen so i need to pick where this is going to be so let's be clever about this where should my rectangle be i need the x and y position and then the width and the height well the x position we'll need to figure out the y position is obviously going to be at 0 because we want to start at the top of the screen and go all the way down so we're going to say y is equal to 0 the width and the height so the width we can kind of pick what we want the width to be i'm just going to make it 10. the height needs to be the height of the screen because we're starting at zero so it needs to fill the entire screen and then the x is what we need to figure out so i want this to be exactly in the middle of the screen which means i can say width over two that's going to give me 450 right to be in the middle but then since we have a width of 10 let's just go to paint here quickly i'll show you what happens if we do that so let's say we have our screen you know this is width over 2 and this is like right in the middle of the screen okay so this is me trying to do a 5 with my mouse this is 450 okay now if i draw a rectangle here that has a width of 10 what's going to happen is i know this is like a really exaggerated width but we're going to draw it like this right i don't want to draw it like that i want to draw it like this so how do i do that well i need to subtract half of the width so i can figure out where the 0 0 position of my rectangle should be because really i'm not drawing the rectangle from the middle i'm drawing it from 0 0 so i need to draw it such that it will be in the middle of the screen when i draw it if that makes sense so anyways the point of this is saying that if we have a width of 10 i need to subtract 5 from its x position so put it at 445 so that way it draws in the middle so let's do that rather than i guess since our width is hard coded i'll just subtract 5. and now once we draw this on the screen you'll see that it is right smack in the middle so let's draw this let's go here and let's say win dot blitz no it's not going to be actually okay you guys are going to be confused with this but we're going to draw this another way so we're going to say pi game dot draw dot rect so we're taking a rectangle and what i'm going to do is i'm going to say we're drawing this on the window so the arguments for this specific pi game function is the window or the surface that you're drawing this onto in this case just our main window then we need to pass a color that this rectangle is going to be so i actually want this to be black so what i'm going to do is define another color here i'm going to say black is equal to 0 0 0 because well that's the color code for black it's just none of red green or blue so anyways we define black so now we're saying we're drawing on the window it's color black what are we drawing well we're drawing a rectangle so i just pass in my rectangle which is border like that because border is equal to a pi game rectangle so that's all we have to do so let's go ahead and try this i'm going to press run and now we get a nice black border right perfectly in the center of the screen now of course i can still go over it and notice that we're drawing actually below the border um are we on top of it no we're on top of the board okay that's fine it doesn't really matter if we're on top of the border or not but now we need to make it so we can't actually cross this border so really all we have to do to make it so we can't go off the screen is not let our player move if they're gonna move off of the screen so we just check if pressing this key would move them off the screen and if it will then we'll just not let them press it so inside of my yellow and red handle movement it's kind of annoying i should have done this before so we could just copy it in we're just going to make sure that we're we can't move off the screen or into the border so for yellow on the left hand side of the screen yes on the lefthand side of the screen what we're going to say is and just in this if statement right here and we're going to check if by moving to the left we would have a position that is in the negatives so that is not equal to at least 0. that would tell us that we're off the screen because the 0 0 of our image would be well not on the screen so i'm just going to say and yellow oops did i mean to press that yellow dot x minus velocity is greater than zero so what this will tell us is if when subtracting the velocity from our current y position that will be greater than zero or not if it is we won't let ourselves move any further to the left so the reason i'm doing minus is because we're obviously gonna subtract to move to the left now we'll do the exact same well actually we're gonna do a different thing for the right we're gonna say and yellow and yellow.x plus velocity the reason it's plus is because now we're moving to the right now in this case we don't want to check if it's greater than something we want to check if it's less than something now what do i want to check if it's less than well i want to check if it's less than the border in the middle of the screen because if we look at the screen right this is on the left hand side we don't want to be able to move past that border which is in the middle of the screen so we'll get the borders x position and we'll put that here so we'll say border dot x so this will not let us move past the borders x position but the issue with this is you have to remember that we're drawing the image from the top left so technically the width of the image can still move over the border because the 0 zero position wouldn't be past that x now hopefully that makes sense but to show this to you again we go back to trusty paint we have our border in the middle of the screen let's say this is our rocket ship like this technically this zero zero is less than this borders x but its width is over top of it so what we need to do is check the width of the the image as well and make sure that the zero zero plus the width of the image isn't going to be over top of that border so a lot of explaining here but all we have to do for that is simply say yellow dot x plus vel plus yellow dot width like that and again this is another property of the rect we can call a dot width and that will make sure that we are not over the border okay now we'll do the same thing for up and down so for up it's really easy we're going to say yellow dot y minus the velocity is greater than zero and we'll do the exact same thing here except instead of the width and the x's we're just going to check the heights so we're going to say yellow dot y yeah plus velocity plus yellow not dot width but dot height is less than and actually in this case it's not going to be border.y this is simply going to be height because it gives us the height of the screen so this is making sure that the height and our image cannot move further down past the screen now let's just test this then i'll do the same thing with red so run and now notice that i can't move any further down the screen okay i can't move left off the screen i can't move right off the screen and in fact this is blocking quite a bit and same thing here now there's a slight problem going down i'm not sure exactly what that is all right so i just pause for a second because for some reason my yellow guy can move further down the screen i'm not actually really sure why that is so a simple fix for this i don't usually recommend this but since it's not that important based on the game we're making i'm just going to add a few pixels to this right here so i'm pretty much going to say and yellow.y plus velocity plus yellow dot height is less than and then height minus five now what this should do ideally is just make it so that we can't move as far down so let's just rerun this and actually sorry it's already running so let's close that and run again okay now we can move okay so five clearly wasn't enough we can't move as far down now but let's just make this ten so let's go height minus ten now let's run the game and same thing okay so let's make this a bit more let's make this 15 pixels let's run let's see it and there we go now we're like perfectly at the bottom of the screen okay so that's what i wanted now you might be wondering why on the other edges we're not like touching them immediately that's because the actual size of this image is a bit bigger than what's showing up on the screen um that's sometimes a problem like if you take an image and it's like really small compared to the actual dimensions of the image then the rectangle around that image is going to be bigger than what the actual image is so that's pretty much why we can't cross this border here because this image actually kind of extends further out you just can't see it because it's a transparent background anyways hopefully that makes sense let's do the same thing for red now and then let's get into firing bullets and some more fun stuff okay so close that oh i launched this game like 12 times okay great okay close it all right so now we're just going to copy this and do the same thing for red so instead of yellow just change this to red we can literally copy everything and just change all the yellows to rent so and red oops not like that and red.x and red copy this one here this one will be red and same for this okay and red and red all right so now we have that let's just test this last time make sure all is good come on run what's happening invalid syntax where did i make a mistake let's see it is saying i can't even see because my window's not big enough at red dot x ah i forgot the and sign on all of these great let's add the and sign back or the and word i guess okay run now and there we go there so now yellow is good red's good ah but red c so red can move crop across the border now the reason red can move across the border is because i forgot that we need to limit how far it can move to the left not to the right so let's go to red and actually we do need to change some of these things so for moving to the left rather than checking if it's greater than 0 we want to check if it's greater than the border dot x plus the border dot width okay so we're going to have that there then if we're moving right this isn't going to be reliant on the border this is going to be reliant on the edge of the screen which is simply going to be the width of the screen so hopefully that's clear why we're doing this but now we're making sure that we can't move further left than the border and going to the right this is different than yellow obviously we can move as far right as we want so long as we don't go off the screen so let's run this now and let's try red and there we go we can't move to the back of the screen and the border yeah we can't move past the border either down is good up is good awesome we are looking good all right so now what i want to do since we've just finished that is i actually want to start talking about bullets so how we can uh actually have projectiles firing around the screen now this is a little bit more difficult than what we just did but of course it's important to cover in this tutorial so to handle bullets what we need to do now is have a separate key that each character each person can press that will fire a bullet or a projectile from their character so to do this we need to maintain a list of all of the bullets so the first thing i'm going to say is bullets is equal to an empty list like that we also need to decide how fast we want these bullets to go so i'm going to make a variable here i'm going to call this bullet underscore velocity and we can either decide to make this slower than the characters or faster than the characters but since i want this to be faster and make it a bit harder we're going to make it 7. again feel free to play with these numbers so we're gonna say bullet val equals seven so now what we need to do is make a way for us to actually create a bullet and have it kind of fired around the screen so i'm gonna show you now how we can handle the presses of the left and right control so usually i would use something like the space key to fire a bullet but since we have multiple people playing on the same keyboard we can't use space because only one person can press that so i think it makes sense to use the left control and the right control to press to fire the bullets this way you don't get sticky keys when you're pressing the shift key which is what i would have done previously and obviously we don't want to use enter and caps lock because what caps lock is not an intuitive key to fire a bullet so we'll go with right and left control now we're going to do that but the thing is i want each player to have a limited number of bullets so i don't want them to just spam bullets as many as they want or fire them like rapid fire on the screen so that also means that i don't want players to be able to hold down the key to shoot bullets i want them to have to press the key each time so they have like a very methodical shot right not like saying call of duty or just holding down the trigger the entire time i want them to have to actually press it each time so let's do that the way we're going to do that is by not handling the key presses this way we're going to handle it this other method there's not really names for them so it's hard for me to describe them that i talked about at the beginning of the video so what we're going to do is say if event dot type equals equals dot key down like that now this is telling us hey we pressed a key downwards then what we're gonna do is fire a bullet so we need to check whether we press the left control or the right control so if event and then oops like that dot key is equal to pi game dot and then this is going to be k underscore left i think it's l c t r l yeah l c t r l is left control and then otherwise we'll say if event dot key is equal to pygame.k underscore r ctrl standing for right control then we will kind of create a bullet for our character so the idea here is i want to have a list of bullets this list is going to store all of the red players bullets and all of the yellows players bullets or in fact to make this easier let's actually just do two lists let's say red underscore bullets equals that and let's say yellow underscore bullets equals that so what we'll do is we'll have the red bullets list or all the red players bullets yellows will store all of the yellow players bullets and then we'll move these bullets around the screen and kind of add them to the list so to create a bullet we'll just add one to the list and then we'll draw these bullets at their x and y position and we'll automatically move them so that they're going kind of in the direction that they were fired so the first thing is to create the bullet obviously so to do this uh for left control we want our bullet to be going to the right so let's do that so we're going to say uh i guess who is on the left i always forget i think it's yellow yeah yellow is on the left we're going to say yellow underscore square bullets dot append and just to make this easier to read i'm going to say bullet and the bullet is just going to be equal to a pi game rectangle i don't have any fancy images for this one so we're just going to say pygame.rect like that we're just going to create a rectangle that is at the position that we want to fire it from so if we think about this where should we place the bullet well the bullets really should be placed at wherever the yellow character is right we want the bullet to come from their body so since the yellow character is facing to the right the bullet should kind of spawn or appear at the edge of their body so at their x position plus their width that way immediately when you press the fire button you you see the bullet kind of coming out of the character so to do this we're going to say that the x position of our bullet and we're just going to make it a rectangle again is going to be at yellow.x plus yellow.width like that now if we think that this is too far away from the character because remember the width of the image is a little bit further than the actual character itself we could subtract a few pixels and it would be like more inside it doesn't really matter but anyways let's say bullet equals pi game.rect yellow.x plus yellow.width now for the height we can say this is going to be yellow dot y now it's going to be weird but we're going to say yellow dot height over 2. so we're taking the yellow dot y position which is the top lefthand corner of the image and then we're adding the height of it over 2. the reason for this is so that it comes directly in the middle of the character because if we did it from yellow.y it would come from the top left of the character which we don't want we want this to come from the middle of the image so we simply add half of the height to put it in the image to put it in the middle and really if we want to be even more precise we should then subtract or we should then add depending on what actually it's going to be subtract in this situation half of the height of the bullet so the height of the bullet i think is going to be 5 pixels so i'm just going to subtract 2 because i don't want this to be a decimal number but anyways you guys will see i apologize this is a lot to take in at once but i just want to make sure this is perfect so yellow.x plus yellow.width to put that in the middle x position or sorry to put that on the edge of the image then yellow.y plus yellow.height over 2 minus 2. this is so the bullet comes directly from the middle of the character then the width of the bolt is going to be 10 pixels and the height is going to be 5. so that is our bullet and then all we're going to do is append this into the yellow bullets list perfect so let's copy this and let's do the exact same thing except for red for our right control button press so now instead of having yellow.x this is just going to be red and we'll literally copy the same thing except we need to remove this plus red dot width the reason for this is the red character is facing to i guess the left of the screen i know my hand positions are probably wrong but it's facing to the left so its bullets are going to move towards 0 0 which means we want the bullet to come out of actually the left side of the character not the right side of the character i would run this but there'll be a crash right now if i do that so let's actually um i'm just going to try to go through this the character is facing to the left so we want to start drawing the bullet at its actual left edge which really is it's just x position so instead of adding the width to it like we did with yellow we're just going to put red dot x now the height will be the same thing because we do want it to be in the middle for the height so red dot y and then red dot height and then literally everything else is the exact same it's just the edge in which this bold is appearing we want to be different okay perfect now last thing and there's actually more before i can show you these bullets firing we want to make sure that each player has a finite number of bullets so to do this we need to define another variable and we're just going to call this num underscore bullets like that or actually to make it more clear we'll say max underscore bullets and we'll set this equal to whatever we want i like three you guys can change that but i like three bullets so now before we actually go ahead and check if we can do the left control or we can do the right control we want to make sure that we don't already have three bullets fired on the screen because if we do we need to wait until those bullets disappear go off the screen whatever before we can fire another one so i'm going to say and the len of right what am i saying right red no this is yellow yellow underscore bullets is less than max underscore bullets so if the amount of yellow bullets that we have which is defined by the length or the number of bullets in this list is less than our maximum bullets we can go ahead and fire another one otherwise no don't add another bullet to the list because we already have the maximum on the screen now same thing here and the len of red underscore bullets is less than max bullets perfect now this will allow us to actually fire bullets on the screen now because it's going to take a second before we actually see these i'm just going to print out red underscore bullets and then yellow underscore bullets so this way when i start pressing the right and left control key in my console down here where all this gibberish is appearing you will see it popping up the bullets list so let's do this you can see that it's empty now when i press ctrl boom there you go we have a a button or a uh bullet inside of the list i press control again i press the other control and you can see that there we go going ahead and adding to the list now i realized as i did that in good job we did that here instead of having yellow bullets this needs to be redbullets dot append because obviously that well that just wasn't working with yellow it was adding all of them to the yellow list which we didn't want so hopefully that's clear but that's how we have the bullets now they're in the list when i press left and right control boom they're getting added and well it will work the maximum it just wasn't working before because we had a bug this was yellow instead of red okay perfect now we have that now we need to move the bullets and we need to see if they hit any of the characters so what i'm going to do is make another function that can handle this for us because it makes sense to kind of separate everything out so what i'm going to do is i'm going to make another function down here i'm just going to start typing it out then i'll define it above and i'm going to say this one is handle bullets like that now we're going to pass the yellow bullets the red bullets and the yellow character oops or the yellow rect as well as the red uh yeah i guess as red as well the reason for this being that we want to check if any of these bullets collide with either of the characters because if we do well we'll need to do something about that right and same thing we need all the bullets so that we can handle moving them around the screen and drawing them and all that all right so now let's code out this handle bullets function so let's go here it doesn't really matter where we put it and let's say define handle underscore bullets let's have this take the yellow bullets the red bullets the yellow character and the red character okay so what this function is going to do is move the bullets handle the collision of the bullets and handle removing bullets when they get off of the screen or collide with a character so what we'll do is we'll loop through all the yellow bullets check if they've collided with the end of the screen or with the red character then we'll loop through all the red bullets and do the same thing except for the other character so let's do this i'm going to say four bullets in yellow underscore bullets like that then i'm going to start by moving the bullet so since it's a yellow bullet it's coming from the left which means we need to move it to the right because it's coming from the character on the left so we're going to say bullet dot x plus equals the bullet velocity to move it to the right so we move it and then after we move it we're going to check for collisions we're going to say if yellow now there's this fancy thing in python or in python in pi game called collide rect and we can pretty much check if the rectangle representing our yellow character has collided with the rectangle representing our bullet this is pretty easy all we do is just pass bullet right here and what this does is tell us that hey yellow did collide with the boulder both did collide with our yellow rectangle or it didn't so this is true or false but this is really easy way to check for collision use collide rect keep in mind this only works if both objects are rectangles which they are and that's why i used the rectangles okay so now that we have that we're going to do something kind of fancy if we collide with the yellow character the first thing we need to do is remove this bullet so we can just say yellow underscore bullet dot remove and we can remove the bullet that's fine we're going to delete the bullet because it's gone it collided but we need to tell our main game loop down here somehow that we collided with the red character right we need something to pop up we need to remove health whatever it is we need to do something but i can't directly modify anything in my main game loop from this function right other than the stuff that was passed to it so what i'm going to do is i'm going to post an event now in pi game there's these things called events right just like event dot quit just like event dot key down right whatever uh you're we're checking the types equal to pi game dot key down pi game dot quit so i'm going to post an event create a new event and then we can check for that event inside of here and do something if that event occurs now this event is going to be red collided or you know bullet hit red or red hit or whatever we want to call it we'll do the same thing for yellow we're going to post an event that we will then check for in this while loop so to do this we need to first create this event so i'm actually going to go up to the top of my program here we'll do like kind of a new section i'm going to say in all capitals yellow underscore hit and then we'll say red underscore hit like that and this is going to be equal to something that's kind of weird but pi game dot user event plus one and for this one pygame dot user event plus two this just represents the code or the number for a custom user event since we're going to have multiple user events we can add one to this one and add two to this one so now we have two separate user events that we can check for and handle i know this is strange but this is how you create a new event you say pi game.uservent plus some number obviously going up in sequence so plus one plus two plus three plus four if these were both plus one they would be the same event because they would have the same underlying number representing them this right here uh to my understanding is really just a number like it's you know 450 it's some number we don't know what it is we just add one to it to make sure we have a unique event id that's pretty much what we're doing so yellow hit and red hit those are my two events so we're going to go down here uh we're going to go into here sorry and up here we're going to say pi game like this dot event dot post and we're going to post a pie game dot event i think it's dot event dot event like that and inside of here we're going to pass the event that we want now actually sorry this should have been red not yellow so red dot collide wrecked because we're checking if the yellow bullet's hitting the red character so you guys probably saw that that should be red and the event we're going to pass is or post is red underscore hit so this is telling us or we're making a new event that's saying that the red player was hit now we'll literally copy all of this and do the exact same thing for not our yellow bullets but for our red bullets so we'll say red like that we'll change red to yellow and then instead of yellow bullets this is going to be red bullets instead of red hit this is going to be yellow hit now this is the exact same thing except now we're checking the red bullets but we need to move the red bullets in the other direction because we're firing from the right of the screen moving to the left closer to zero zero so we subtract the bullet velocity so this handles our yellow bullets this handles our red bullets and that should be it for moving the bullets so let's actually try this out and let's see how many mistakes that i've made assuming we made any so refresh we have our two uh ships now i'm going to press ctrl and ah we got an issue deprecation integer is required but got type float i'll be right back just gonna have a look at what the issue is here alright so i found the error pretty silly one i should have came up with this pretty much we cannot have floating points when we create a new pi game rectangle so for both of our bullets we need to actually put two slashes here for integer division it's fine this is gonna round anyways it'll be okay we just need to do integer division so red dot height integer divided by two yellow dot height integer divided by two uh so that way we don't get any floating point issues now same thing here with this border it's going to go to our border and we have width over two we're going to change this to over over two so that way again we don't have that floating point issue that we're running into before but this was indeed working uh with despite of those two issues so just fix those division signs to be two division signs so slash slash but i realize that we're not drawing any of these bullets so let's draw these bullets onto the screen because it's going to be hard for me to show you that it's working without drawing them so inside of our draw window now i want to take actually just let's just take a list of bullets so what we'll do is we'll combine the you know what i can't do that because it's going to be drawing the wrong color let's take red underscore bullets and let's take yellow underscore bullets doesn't matter what order we take them in and let's draw these bullets onto the screen so after i draw everything else we'll draw our bullets so we're going to say four bullets in red underscore bullets then what we'll do is we'll say pi game dot draw dot rectangle we'll draw these onto the window these are going to be red so this is an opportunity to create another color called red so let's go here we're going to say red is equal to 255 0 0 because red well is all red and nothing else we also need yellow so let's go ahead and do that now can i remember my primary colors i'm just going to look so i don't mess this up i mean i believe this is red and green creates yellow i think that's correct so let's go here with yellow so 255 255 0. okay and now we have red and yellow so we can draw pygame.draw.rect window color red and what are we drawing well we're going to draw the bullet which is really just a rectangle copy this do the same thing and the only thing that we need to change is the color so this is going to be yellow and this is going to be yellow there we go so we have our two colors defined we're now going to draw the red bullets and all the yellow bullets on the screen so we just loop through them and just draw all of them out okay so let's refresh or let's run this and draw a window missing two required positional arguments red bullet and yellow bullets that would make sense because i forgot to pass them so let's go down to our main function here see where we have draw window we're going to pass the red bullets so lowercase red bullets and lowercase yellow bullets awesome quickly just so you guys can see everything i'm going to zoom out i give you an idea this is what the main function looks like in case you guys are on a larger display and you want to see all of it this is what the other functions look like just going to kind of scroll through so you guys can have a look here and pause the video if you need a specific part or if i'm going too fast for you okay so let's zoom back in let's run and let's see if this is working now so i'm here on my left guy i press ctrl boom we fire a yellow bullet kind of hard to see on the white background but also notice let's let's go with the right one because you're able to see the red that this bullet when it hits my player it's disappearing that's awesome this is working and boom we're good to go so now what we need to do and also notice if you try to hit control a bunch of times it only lets you shoot at most three bullets at a time right which is exactly what we wanted if i go up here now i can't shoot any bullets until these go off the screen and in fact i forgot to handle the fact that the bullets go off the screen we need to remove them so let's do that next awesome so much stuff i always forget how much stuff we actually need to do so now after we check this collide rectangle we're going to check if any of these bullets are off the screen so to do this with the yellow bullet all we have to say is if bullet dot x and this one is going to the right is greater than uh and we're not going to bother with the width or the bullet or anything it's fine it will just make it disappear when it gets to the edge we'll say bullet dot x is greater than the width of the screen than yellow bullets dot remove bullet but we'll just do an else here to make sure that we don't so this will be l if so that we don't potentially remove the bullet twice anyway so we'll do that now we'll add an lap here we'll say l if bullet dot x is less than zero because that would be when it's off the screen if we're subtracting the velocity then same thing here red bullets dot remove and bullet so that should be good just checking if it's going off the screen in either direction okay so let's try this now when i press control a bunch of times boom i should be able to press it again awesome they're getting removed all is good all right so before we do anything else let's actually just change the background because my eyes are hurting with that yellow on white so we'll change it to that nice space background that i showed you at the beginning so to do this we need to load in our space background if we go to our assets folder we can see we have space.png so we're just going to say space is equal to pygame dot image dot load and then we're going to load in dot path dot join so os dot path dot join with the assets folder like that and then we want to load in space dot png now that is that's fine we can do that but i'm also going to rescale this image because it's really big to be a lot smaller just so it looks nicer so to do that we'll say pygame dot transform dot scale and then we'll wrap this image around and inside of this we'll put the dimensions now we have perfect dimensions for this we can just make it the width and the height of our window now this might make it a little bit kind of stretched we'll have a look at how it how it looks but i'm just going to make this width height so we're resizing it to that so now rather than filling the screen with white every single iteration and actually let me show you what happens when i don't do that because that's interesting so before i draw the background i'll show you what happens when we don't fill the screen with white look you can see this i'm just moving around all over the place the reason this is happening is because pie game does not remove the last drawing that we made right it just keeps drawing stuff onto the canvas so if i don't draw a white background every single frame i don't draw something that covers the entire screen then you get all this kind of movement stuff because it's not erasing anything that it previously drew so anyways i just thought that was interesting so let's now put that image onto the screen i'm going to say win in all capitals dot blit we're going to blit space and then we're going to put it at 0 0 because this is the background so we can just start at the top left and fill the entire screen because we already know its width and height is that so let's go ahead and run and there we go we get a nice space background actually doesn't look bad at all in fact this looks pretty nice so i'm going to leave it like that awesome then we can go there you go yellow looks a lot nicer on that background awesome so now let's handle those events so when we actually get hit we need to do something we need to have some health or something like that then we're going to add sound effects we've got a bunch of stuff well actually not that much but a few more things to do so now inside of my main event loop remember just a quick refresher we're posting these events right yellow hit and red hit so when we post these events they just get added to this pie game.event.getq that's kind of appearing with all of the events so all we have to do is just inside this for loop check for these events so if event.type equals equals red underscore hit then we'll do something and if event dot type equals equals yellow underscore hit like that then we'll do something else so this is a perfect time to implement a notion of health so we want to have both characters have some number of health and every time they get hit that's obviously going to subtract so to do that pretty straightforward but we're going to make two variables here we're going to say red underscore health is equal to 10 and yellow underscore health is also equal to 10. whenever a player has zero health again feel free to change these numbers then we'll say that the opposite player has one so that'll be kind of the objective or how you win or lose our game so if red is hit what's the obvious thing to do subtract red's health so red health minus equal one if yellow is hit then we'll say yellow underscore health minus equals one then what we want to do is now check actually we don't need to do it inside of this for loop but we can do it outside of this wall if either player has health that is equal to zero and if they do the opposite player will win the way i'm going to do this is interesting but i'm going to say if let's say if red underscore health is less than or equal to zero and then i'll say if yellow underscore health is less than or equal to zero i'm actually going to define this variable i'm going to say winner underscore text equals and i'm going to say yellow wins like that now on the other side i'm going to say winner underscore text is equal to red wins this is the text that i want to appear on the screen when either of these situations happen we'll get into this in a second but i just want to start defining it now above here i'm going to say winner underscore text equals a blank string and i'm going to check in one more if statement if when our underscore text does not equal blank then inside here someone won so the basic logic behind this we have this variable called winner text it's equal to nothing if either the red player or the yellow player has lost so they have zero health then we will set the winner text to be something other than empty string in the situation where winner text after we check both of this is not equal to an empty string someone won we should display that winner so we will get to that in a second but now what we want to do is show both of these scores on the screen and then once we've done that we just have to add sound effects handle someone winning and we're pretty much done we're getting very close so let's do this let's start showing the score to show the score that means i need to pass the score to my draw window and i need to somehow draw that score in the window so i'm just going to pass the i guess it makes sense to pass red first so we'll pass red health and yellow health like that to my draw window now let's go to draw window let's now take inside of draw window the red underscore health and the yellow underscore health like that and now inside of here what we'll do is we'll actually draw these their score or their health on the screen now to do this this involves using fonts we have to actually render some text on the screen so this is where we get into our next step so what we're going to do at the very top of our program is we're going to say pygame dot font.net now i just took a quick pause there because as you guys can see i spilt water on myself so that's great but we'll continue that's fine i will survive anyways you're going to put pygame.font.init at the top of your program and this is going to initialize the pi game font library or whatever it may be then what we need to do is define a font that we are going to use so it's getting kind of messy up here i'm just going to do another kind of little section and i'm going to say that the health underscore font is going to be equal to pygame dot font dot sys font with these specific capitals we're going to define the name of the font which i'm just going to use comic sans and then the size in this case i'm going to pick 40. so what i'm doing here is i'm just defining the font that i want to use comic sans size 40. we're all good we can continue alright so now that we have the font defined we need to use it so we're going to go inside of draw window i'm going to show you how we can actually put font onto the screen uh now draw this wherever you want just obviously after the background's drawn i'm just going to draw it after the spaceships meaning that it will overlap our spaceships actually you know maybe that's not the best idea maybe we want our spaceships to go over top of this font if that situation occurs which it could so let's start by doing this let's say red health underscore text and this is going to be equal to pie game or sorry not pie game we're going to say score not score health underscore font finally got it right third try dot render now we just define this font right we're going to use this font to render some text now the text that i want to render is the following i want to render health colon and then space plus the string of red health so we'll take whatever that number is convert it to a string and concatenate it with help then we need to say 1 for antialiasing i'm not really going to talk about that is but you just always put one as the middle argument for our purposes and the color of this text which is going to be white so red health text is health font dot render it's equal to health plus whatever the health is and then one white same thing now for the uh not red text but for the yellow text so we say yellow health text now what we've done is we've created kind of two text objects and we want to draw these on the screen so to draw them on the screen we're going to say win dot blitz we're going to pick well i guess we already know the window we're going to pick what we're blitting which in this case is red health text and we need to pick where red is on the right side of the screen so that means i want to blit it at an x position that is like right at the edge of the screen i'm going to do this dynamically you can hard code a number if you want but the correct way to do this or the way that will look the best is width minus and then red underscore health text dot get underscore width this will get the width of that text and subtract that from the width of the screen so the top left position we're blitting this will be like right at the edge and then i'm also just going to subtract 10 pixels just so this has like a 10 pixel pad from the very edge of the screen where do i want to blend it on the y i'll put it at 10 because it's going to be right at the top of the screen we'll just make it 10 pixels down by having this negative 10 and this 10 we're padding it so it's 10 from the right wall intent from the top wall now we'll do the same thing or a very similar thing for uh for our yellow text so wind.blit we're going to say yellow health text and then where do we want it we're actually going to put at 10 10. reason we can do this is because we don't really care about the width of it because it's going to be the left border that we want padded from the left wall and then 10 pixels down as well from the top so that's what blitting it at 10 10 will do anyways this will give us the red health text the yellow hot text it'll be showing up on the screen so let's try this actually uh we handled the events we're passing in the health yeah we're look very close to done so let's run this and now you can see the health is showing up so we have it in the corner boom move that like that and then notice that the health gets updated but for some reason the health is changing for both of them so i think i just have a small bug so let's have a quick look here uh we have that red health so yellow health minus one red health minus one red hit yellow hit okay we're passing red health we're passing yellow health okay for some reason they're both getting updated so i guess that means that this event must be triggering uh for both of them so let's try to see why that's happening so i'm just scrolling around wondering why this isn't working and i'm realizing that well red health is in both positions here so this needs to change to yellow health because i had red health so obviously it was drawing the same thing so anyways let's try this now run and now if i hit someone only the health updates on one side which is what we're looking for so we're very close to done we just need to handle the situation where someone wins and adds sound effects so let's do someone winning first this is actually really straightforward i'm just going to make a function what this function is going to do is just draw text on the screen that says blank person 1 and you'll see how this works i'm going to say define draw winner we're going to take in some text that we want to draw and then we're going to make a new font so let's go to the top let's go with our other font let's say winner underscore font is equal to pie game like that dot font dot sys font this should be comic sans well you can make whatever you want and then i'm going to make this size 100 and i'll make it nice and large so now we'll use the winner font to actually render the text so we'll say winner underscore font dot render we'll render the text antialiasing 1 color white and then we'll draw this onto the screen so we'll say win dot blitz will blit the winner font we're going to do this nice and fancy and have it perfectly center in the middle of the screen so i'm going to go inside of here i'm going to say width over 2. now we'll actually double divide it by 2. i did i do that somewhere else i'm not sure just to make sure we don't get any errors although width over two is an even number so i think that's fine if we do that we'll say width over two minus because width over two again is the direct middle of the screen minus the i need to i've made a mistake here okay let's let's go text draw underscore text equals that we need a variable draw underscore text equals that i don't know why i thought blitting winner font was going to work but draw text is equal to winner font dot render that's better so now we'll say width over two minus draw underscore text dot get underscore width this will get the width of the text so how wide it actually will appear on the screen over two this will put it directly in the middle of the screen because it will take whatever half the width of this is and subtract it from the x position so that way when we draw this it will be perfectly in the middle of the screen i kind of went over this before we'll do the exact same thing for heights we'll say height over 2 and then minus draw underscore text dot get underscore height over 2. again get height is just going to give you the height might be smart to do integer division here but i think this will be fine then we're going to say pie game dot time dot delay and we're going to delay this for 5 000 milliseconds which is five seconds you'll see why but what this will do and sorry we also want to update the display so before we start delaying i'm going to say pygame.display so what this is doing is we're going to call this function when someone wins so for five seconds we are going to show the the winning text and then we're going to restart the game so the reason i'm doing this and i'm not doing it inside of draw window is because i want to just pause the game whenever someone wins show this text and then just restart it immediately after that's why i have this pause if you want to change the pause to be longer or shorter just a thousand multiplied by whatever seconds you want to pause it for and that's how you pick the delay okay so now inside of wiener text here we're going to say draw underscore no not window draw underscore winner and we're just going to pass it the winner text because what this will do is then give it the winner text it will draw it on the screen we'll pause for five seconds it will appear and then we will break now when we break this will bring us to pi game dot quit which would usually quit the game now we can do that for now so let's actually just do that and i'll change it so it just restarts the game so here let's just spam control a bunch of times and make it so that we actually win so there you go boom we hit it says yellow wins appears on the screen wait it's going to close the game in a second and boom go ahead or the game goes goes ahead and closes now if we don't want the game to quit what we need to do is make it so we don't quit the game here but we just restart it how do we restart it how we started originally just by calling this main function since we define any game specific variables in here when i just recall the main function it will redefine these variables and the game will just restart so instead of having pi game dot quit i'll just say main like that but that means that what i need to do now when we actually do quit the game is say run equals false as well as pygame dot quit right inside of here so hopefully that's clear but this means now whenever we press the x it will actually close because if i removed pygame.quit from here and i didn't quit then we would just stop the while loop but we would restart the game whenever you press the x button which obviously isn't what we want so we have that now we can do one last test then we're adding sound effects and we're done so let's do this uh let's just test this out and let's keep going boom yellow wins give it a few seconds and it should just restart the game okay there we go restarts the game we get put back in our original positions we have 10 health we can fire our bullets and we're all good awesome so let's now add the sound effects which are super simple and then we will be done so the first thing that i need to do is load my sound effects uh actually sorry second thing i need to do is load my sound effects first thing i need to do is initialize kind of the sound effect library in python so i'm gonna go to the top here i'm gonna say pygame dot mixer dot init and this just starts kind of like the sound aspect of pie game so that it will work anyways now that we have that we're going to load in a mixer sound which will allow us to start and stop a sound whenever we want so the first thing i'm going to do is i'm going to make a variable i'm going to call this bullet underscore hit underscore sound and this will be when we actually hit something that'll be the sound and then we'll say bullet underscore fire like that underscore sound and now let's load these in so we're going to say pi game dot and then in this case we're going to say mixer dot load and we're going to load from os dot path dot join the start of the pass path is assets and the end is simply the name of what we want so the gun silencer funny enough these are the sounds i've used right the gun silencer is the one for when someone collides and the sorry the gun silencer is for when someone shoots and the grenade is for when it collides so i'm just gonna say grenade plus one dot mp3 and then we'll just copy this line do the same thing but change grenade plus one to be gun plus silencer uh did i spell silence or right yeah dot mp3 so now we have both these sounds and if we want to use them it is really easy to do this all we have to do is go down and i'm just going to make it so that whenever we fire a bullet so whenever this happens we actually make put that sound right so now i'm just gonna say bullet underscore fire underscore sound dot play all right is it dot start or is it dot play i think it might be dot start uh let me look at my other code here so actually no it's i've been lied to it is dot play okay so we're going to play the sound like that so bullet fire sound dot play and the same thing here so whenever we fire the bullets we'll play the sound and then whenever we get hit so whenever we lose health we'll play the collision sound so we'll say bullet underscore hit sound dot play copy that and paste that there so that's it that adds the sound effects this should be our game so let's run and pi game dot mixer has no attribute load okay so let me see what this is actually called um i thought it was called load but i guess it's called something else ah so i've made a mistake this is actually not supposed to be load where is load uh this is supposed to be sound with a capital s so just change that there this happens all the time i just forget the syntax pi game dot mixer dot sound and then this should work so let's run this now with the proper syntax let's run and bullet sound uh unable to open file assets grenade plus one dot mp3 now it looks like i do have grenade plus one dot mp3 for some reason that's not working i'm just going to go ahead and i don't usually recommend doing this but since i don't know the mistake i'm going to try assets slash grenade1 and then we'll just do the same thing here so we'll remove the os.path.join i don't think we actually need it for this specific sound or for the way that we're loading these and then we'll just do that so we'll just kind of you know make the path ourself assets slash grenade plus one and so on so let's try this now see if all is good unable to open file okay so give me one second i will be right back okay so it turns out that there's actually a corruption of these mp3 files of course that's going to happen to me at the very end of the tutorial but i promise you that the code i just wrote and i'll zoom out so you guys can can kind of see all of it i'll just slowly scroll through as i conclude here uh the code that i just wrote so the way i loaded that that's totally fine like even the os.path.join that should work and then to play the sound all you do is dot play so just trust me that this does work for you guys uh for some reason when you download the mp3 file you like they're corrupted as well then just find your own sound effects and just load them in so throw them in the assets folder name them something and then load them i think it's just an issue with downloading the files from github you can't download mp3 files but do that load them in pick your own sound effects they should work with dot play it's a really minor part of the tutorial so i'm not too worried about it but then you should hear the sound effects when you press those buttons and well it does obviously add a lot to the game now i will quickly mention before i leave off here because this is all we're doing for this tutorial but there's a lot more stuff in pi game that you can do the point of this was really just to get you up to speed nice and fast show you how to create a simple game and show you how to do most of the things that you usually want to do you know projectiles moving characters around handling collision all that kind of stuff loading images loading sound effects although that didn't really work and all that kind of stuff and keep in mind like you know usually you can separate things out into different files this isn't perfect what i did but again just to give you an idea and really get you kind of started in python and pie game so if you guys appreciate this tutorial please do leave a like on the video and subscribe to the channel it definitely helps and i hope that this was helpful to you so with that said i will see you in another youtube video
