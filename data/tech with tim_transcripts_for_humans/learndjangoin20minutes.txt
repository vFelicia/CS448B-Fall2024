With timestamps:

00:00 - in this video I'll show you how to build
00:02 - a simple Django application as fast as
00:04 - possible afterwards you'll know how to
00:06 - set up a Django project how to configure
00:08 - URLs how to create a simple database
00:10 - model and how to display Dynamic data
00:13 - using templates in case you aren't aware
00:15 - Django is a powerful web framework for
00:17 - python that's been used to build
00:18 - websites like Instagram Spotify and
00:21 - Dropbox with that said let's get started
00:24 - after a quick word from the sponsor of
00:26 - this video I've got some great news for
00:28 - you guys recently I've got to know a
00:30 - fantastic team who created a free tool
00:32 - that can supercharge your development
00:34 - Journey especially if you work with
00:35 - Django now this company is called app
00:37 - tension and they've sponsored this video
00:39 - so that I can tell you about their SAS
00:41 - boilerplate picture this you've got a
00:43 - brilliant idea but you're dreading the
00:45 - hours or weeks of coding that lies ahead
00:47 - just to get the project set up now
00:49 - that's where SAS boilerplate comes in
00:51 - this is not just a fancy name this is a
00:53 - tool that literally removes all of that
00:55 - tedious work and lets you dive in right
00:57 - to the heart of your project now this
00:59 - comprehensive of Kit covers everything
01:01 - your SAS application needs front end
01:03 - back end API scalable AWS based
01:06 - architecture an intuitive admin panel
01:08 - workers it's all there it even includes
01:11 - essential ready-to-use features like
01:13 - authentication notifications and yes
01:15 - even payment and subscription systems
01:17 - with a stripe integration and for you
01:19 - content Wizards out there there's a CMS
01:21 - integration with content full what's
01:23 - more the team behind this actually has a
01:25 - dedicated Discord community that you can
01:27 - join to get any assistance that you need
01:29 - so why spend the weeks setting up your
01:31 - code base when you could be working on
01:32 - the core product and building features
01:34 - that provide users real value check out
01:36 - SAS boilerplate from the link in the
01:38 - description and get started today
01:40 - skipping through all of those tedious
01:42 - setup steps alright so let's begin here
01:44 - by setting up Django to do that we're
01:46 - going to open some kind of directory you
01:48 - can see I have this demo directory
01:49 - opened in Visual Studio code and we're
01:52 - going to get into a terminal environment
01:53 - I just opened the terminal in vs code
01:55 - obviously you need python installed and
01:58 - once you've installed python we're going
01:59 - to type pip install and then Django in
02:02 - our terminal to install the Django
02:04 - package now if you're on Mac or Linux
02:05 - you can type pip3 install Django and
02:08 - once Django is installed we can create a
02:09 - Django project now restart your terminal
02:12 - if you're working in the same one and
02:13 - then type the command
02:15 - Django admin start project the name of
02:19 - the project which in this case can be
02:20 - something like demo when you do that
02:22 - you'll see that it will generate a new
02:24 - directory for you that contains a bunch
02:26 - of files that are pre-generated by
02:27 - Django let me walk through what these
02:29 - files do and then we can create a Django
02:31 - application so the first file we have
02:33 - here is a knit.pi now a knit dot Pi is a
02:36 - special file that tells python to treat
02:37 - this directory like a python package
02:39 - next we have asgi and wsgi these are
02:43 - special configuration files that we
02:44 - don't need to deal with these are going
02:46 - to allow Django to actually communicate
02:48 - with the web server we then have a
02:50 - settings.pi file straightforward this
02:52 - contains a bunch of different settings
02:53 - we'll go in here quite often when we
02:55 - need to install different Django
02:56 - applications install plugins change some
02:59 - of our middleware and do things like
03:00 - modify our database engines if you're
03:02 - not aware Django is compatible with many
03:04 - different databases and you can
03:06 - configure all of that type of stuff
03:07 - inside of this settings file we then
03:10 - have a urls.pi file this file will allow
03:12 - us to configure different URL routes
03:14 - that we can then kind of route or direct
03:16 - to different Django applications which
03:18 - I'll get into in one second next we have
03:21 - a manage.pi file this is a special file
03:23 - again that actually acts as a command
03:25 - line tool that allows us to run special
03:27 - commands to do things like make database
03:29 - migrations run our python server and all
03:32 - kinds of other things like creating
03:33 - users for our Django admin panel which
03:35 - we'll get into in one minute alright so
03:37 - now let's quickly talk about Django
03:39 - applications so right now we have
03:40 - something known as a Django project the
03:42 - Django project has these main files that
03:44 - I just discussed but if we actually want
03:46 - to have any executable code or be able
03:48 - to see a kind of website appearing we
03:50 - need to create something known as a
03:51 - Django app now a Django app is meant to
03:54 - be a standalone application that you can
03:56 - plug and play meaning I can take it out
03:58 - of this Django project and put it into
04:00 - another Django project these apps
04:02 - contain things like database models
04:04 - different views or routes templates all
04:07 - kinds of other stuff we can have inside
04:08 - of our applications so what we need to
04:10 - do whenever we're working with Django is
04:12 - create an app so to make an app what
04:14 - we're going to do is go to our terminal
04:15 - we're going to CD into the directory
04:17 - where we have our now Django project
04:19 - which is called demo and we're going to
04:21 - run the command
04:23 - Python
04:24 - manage.pi and then create app and
04:27 - actually that's going to be start app
04:29 - then we're going to put the name of the
04:31 - app in this case I can just do something
04:33 - like my app when I do this is going to
04:35 - create an application inside of here
04:37 - called my app which contains a bunch of
04:39 - different files which we're going to
04:40 - work in in just one second now once
04:42 - we've created this application we
04:44 - actually need to link this to our Django
04:46 - project to do that we need to go into
04:48 - this main folder which is the same name
04:49 - of our project go to settings.pi so
04:52 - scroll down to where we see installed
04:54 - applications and then place a string
04:56 - containing the name of our new app in
04:59 - this case it's going to be my app this
05:01 - will essentially install the application
05:03 - and allow our Django project to now view
05:05 - any of the code we put in this app now
05:07 - just to clarify apps a little bit more
05:09 - we can have different apps for different
05:10 - purposes so we may have an app for
05:12 - authentication we may have an app for
05:14 - specific user types so maybe admins or
05:16 - moderators we may have an app that
05:18 - allows us to view the main content of
05:20 - our website there's all kinds of
05:21 - different applications we can create and
05:23 - we can separate different logic into
05:25 - different applications where it makes
05:27 - sense to do so now that we've created
05:29 - this app what we want to do is go into
05:31 - the app and start creating some simple
05:32 - URLs and some Roots so first of all
05:35 - let's just have a look at some of the
05:36 - files we have inside of here so again a
05:38 - knit.pi we've talked about that admin.pi
05:40 - this allows us to register database
05:42 - models so we can view them on our admin
05:44 - panel we have apps.pi which we don't
05:46 - need to worry about models.pi where
05:48 - we'll place our database models tests
05:50 - where we can write some automated test
05:52 - cases and then views which is mainly
05:54 - where we'll work where we will create
05:55 - different views or routes that we can
05:57 - access on our website for now now though
05:59 - I actually want to create a new file
06:01 - here called urls.pi This is where we'll
06:03 - Place different URL routes and then
06:05 - connect them to our views so let's go
06:07 - into views here and create a simple view
06:09 - just so we can test how things work so
06:11 - to create a view or a route what we're
06:13 - going to do is type Define so we're
06:14 - going to create a function we'll give
06:16 - this a name something like home we're
06:18 - going to take in the request object as a
06:20 - parameter which will allow us to access
06:21 - things like query parameters and the
06:24 - body of different requests that are
06:25 - being sent to this function and then
06:27 - from here we're going to return some
06:28 - type of response now we can render some
06:31 - HTML templates which I'm going to show
06:32 - you in one second or we can actually
06:34 - return an HTTP response so I'm going to
06:37 - import at the top of my program here
06:38 - HTTP response I'm going to go return
06:41 - HTTP response like that and inside of
06:44 - here I'm just going to return a string
06:45 - which is Hello World this just allows us
06:47 - to return some very simple data which we
06:49 - can then display on the website so now
06:51 - that we have this view which is simply a
06:53 - function that returns some kind of
06:54 - response we need to actually connect
06:56 - this to our application through a root
06:58 - or a URL to do that we'll go to this
07:00 - newly created urls.pi file inside of our
07:03 - application notice we have one here and
07:05 - we have one inside of our project now
07:07 - inside of here what we need to do is
07:09 - create some URLs so we're going to say
07:10 - from Django dot URLs import path we're
07:15 - then going to say from dot import views
07:18 - and we're going to import this views.pi
07:20 - file that we have here now we're going
07:22 - to specify a variable which is URL
07:24 - patterns we're going to make this equal
07:25 - to a list and inside of here we're going
07:27 - to specify paths that will connect a URL
07:30 - pattern to a specific path or view so
07:34 - for now I'm going to put an empty path
07:35 - which just means we go to the root kind
07:37 - of URL of our website I shouldn't have
07:39 - said root kind of the base URL of our
07:41 - website we're going to connect this to
07:43 - the Views dot home view or function then
07:46 - we're going to specify that this has a
07:47 - name of Home essentially what this means
07:50 - is when we go to this kind of empty
07:51 - string path here we're going to call the
07:54 - views.home function which is this view
07:56 - which will then return this HTTP
07:58 - response which will allow allow us to
07:59 - view that okay so that's great we've now
08:01 - configured the URL within our
08:03 - application however we also need to
08:05 - configure the URL to our application I
08:08 - know this seems a bit weird but let's go
08:09 - inside of demo now go to urls.pi and
08:12 - we're going to create a URL root that
08:14 - allows us to connect to our application
08:16 - so here inside of demo we have all of
08:19 - the base routes or URLs for our entire
08:22 - project we then need to kind of create a
08:25 - URL here that will link into our
08:27 - specific applications you'll see why
08:30 - this is important in one second but for
08:31 - now let's create that link so we're
08:33 - going to say path we're going to put an
08:35 - empty string here and then we're going
08:37 - to use this function include which we'll
08:39 - import from right here inside of include
08:42 - we're going to specify the name of our
08:44 - application which actually in this case
08:46 - is my app Dot and then URLs now all this
08:50 - is going to say is that whatever I go to
08:52 - this empty string I want to forward all
08:54 - of the different URLs or Roots into
08:57 - myapps.urls where they will then be
09:00 - handled here so to give you a better
09:01 - example let's imagine I did something
09:03 - like my app slash if I did that now what
09:07 - would happen is whenever I go to my app
09:09 - slash in my URL bar or my address bar it
09:12 - would then take the remaining part of
09:14 - this URL and forward that into this root
09:18 - right here meaning if I wanted to access
09:20 - my home page I would now need to go to
09:21 - my website domain and then my app slash
09:25 - like that if I go there then anything
09:27 - after this slash is going to be passed
09:30 - into this URLs file where it will then
09:32 - be handled here meaning if I had
09:34 - something like home here then what I
09:35 - would need to do to access that route is
09:37 - type my app slash home so the home
09:40 - component so then next kind of part of
09:42 - the route will be handled here whereas
09:44 - the main part will be handled by this
09:46 - main application now this is cool
09:48 - because this allows us to have different
09:49 - prefixes for our different applications
09:51 - and have similar URLs within different
09:54 - applications that can still be accessed
09:56 - because we have this main prefix
09:57 - hopefully that makes sense but for now
09:59 - we're just going to make this an empty
10:00 - string we're going to remove this and
10:02 - we'll go back here and make this an
10:03 - empty string as well so we're able to
10:04 - view this root now that we've done this
10:06 - let's run our application and make sure
10:08 - all of this works then move on to some
10:10 - templates and databases so to do this
10:12 - we're going to type python
10:15 - manage.pi and then run server now when
10:18 - we run the server here you can see that
10:19 - we're getting an error don't worry about
10:21 - that we'll fix that in one second for
10:23 - now I'm going to look at the URL here
10:24 - which is the URL that is running our
10:26 - server so localhost Port 8000 I'm going
10:29 - to press on control and then press that
10:31 - I also could just type that into my
10:32 - address bar and you'll see that I get
10:34 - Hello World appearing on my screen okay
10:37 - all of that is great and to stop the
10:39 - server I'm going to hit Ctrl C on my
10:41 - keyboard now what I want to do is show
10:42 - you how we can use something known as a
10:44 - template so a template is essentially a
10:46 - reusable HTML file that allows us to
10:49 - display Dynamic data now we can have
10:51 - templates that inherit from other
10:52 - templates I'm going to quickly show you
10:54 - how that works so to do that what we
10:56 - need to do is create a templates folder
10:58 - inside of our application so I'm going
11:00 - to go to my app I'm going to create a
11:02 - folder called templates very important
11:04 - that you name it templates if you don't
11:05 - name it templates this won't work inside
11:07 - of templates we're going to create a new
11:08 - file called base.html
11:10 - inside of here we can use something
11:12 - known as the Jenga templating engine
11:14 - which allows us to display Dynamic data
11:17 - now I'm just going to paste in the
11:18 - template here because I don't want to
11:19 - write all of it out in this video
11:21 - considering we're trying to go fast now
11:23 - what this is is a simple HTML document
11:25 - that has a bootstrap nav bar and I just
11:28 - want to show you how the template works
11:29 - now inside of these templates we can
11:31 - create things known as blocks these
11:33 - blocks are overrideable pieces of
11:35 - content so I have a block title I'm
11:37 - ending the block here meaning I can then
11:39 - override this title in another template
11:42 - continuing I go down here and I have
11:44 - block content and N block
11:46 - meaning I can inherit from this template
11:48 - get all of the code that's inside of
11:50 - here so I get the nav bar and then I can
11:52 - change whatever's inside of these
11:54 - different blocks to illustrate that
11:55 - let's make another template here called
11:58 - home.html inside of home we're going to
12:00 - paste in some template code here
12:02 - so let me just grab this and finish this
12:06 - off so type end block here we're going
12:09 - to put a paragraph tag saying this is
12:11 - the home page
12:14 - and then end our paragraph tag now what
12:18 - this does is extend the base.html
12:20 - template meaning all of the code that
12:22 - exists inside of base.html we're going
12:24 - to import here so we can have a
12:26 - consistent style for all of the
12:27 - different pages in our website without
12:29 - having to rewrite all of that code we're
12:31 - then going to override the content that
12:33 - exists inside of our blocks so for the
12:35 - block title we're going to put home page
12:37 - for our content block we're simply going
12:39 - to put a paragraph tag that says this is
12:41 - the home page that's great we now have
12:43 - our templates now that we've done that
12:45 - we simply need to render the template to
12:47 - render the template we're going to go to
12:49 - our views file inside of our application
12:51 - and we're going to use this render
12:52 - function for the render function we're
12:54 - going to pass request which is right
12:56 - here as the first argument we're then
12:58 - going to pass the name of our template
12:59 - which is home.html again this only works
13:02 - if you have it inside of the templates
13:04 - directory now that we've done that we
13:06 - can rerun our server and we can view
13:07 - this template so let's run that again
13:10 - ignore the error for now and you can see
13:12 - that when I have a look at my website I
13:14 - get this kind of nav bar appearing and
13:16 - then I get this is the home page inside
13:18 - of my content block now that we've done
13:20 - that let's have a quick look at
13:22 - databases all right so I've opened up
13:24 - this models.pi file inside of my my app
13:27 - application what we're going to do now
13:29 - is create a database model that we can
13:30 - then access and use from Django now
13:33 - Django is great because it provides
13:34 - something known as an orm which is an
13:36 - object relational mapping this means
13:38 - that we can write python code to create
13:40 - different database models and then have
13:42 - whatever models we create be
13:44 - automatically made for us in some kind
13:46 - of structured database schema like
13:48 - sqlite3 so you'll actually see that as
13:50 - we start creating these models what will
13:52 - happen is we'll make something known as
13:53 - a migration this migration is actually
13:56 - automated code that will then go and
13:58 - create the corresponding model in
14:00 - something like SQL mongodb or whatever
14:02 - it is that we're using as our database
14:04 - backend engine you don't need to
14:06 - understand this fully but for now I'm
14:07 - going to paste in a symbol date database
14:09 - model you can see that I have a to do
14:11 - item this is a model and we have
14:13 - different fields on the model which are
14:14 - written as python attributes we have a
14:16 - character field in a Boolean field
14:18 - obviously we can get much more
14:19 - complicated and do things like
14:21 - references but I don't have time for
14:22 - that in this video so we've created a
14:24 - simple database model what I need to do
14:26 - now is register this model with my admin
14:28 - panel which we're going to look at in
14:30 - one minute and then I need to apply
14:31 - something known as a migration so that
14:33 - we actually have this model existing in
14:35 - our SQL Lite 3 database so what I'm
14:37 - going to do here is go to admin.pi
14:39 - admin.pi is the file where we can
14:41 - register different models so that they
14:42 - will appear inside of our admin panel
14:45 - allowing us to modify and view them so
14:47 - what I'm going to do is type from dot
14:49 - models import to do item which is the
14:52 - model that we created you can import
14:54 - other models here as well we're going to
14:55 - type admin Dot site dot register and
14:58 - then we're going to put the to do item
15:00 - here now when we run our application and
15:03 - we go to the admin panel which we're
15:04 - going to do in one second we'll be able
15:05 - to view this model okay now that we've
15:08 - done that what we need to do is make our
15:09 - migrations so anytime you make a change
15:11 - to your database models you need to make
15:14 - something known as a migration now this
15:16 - migration again is some automated code
15:17 - which Django will apply to the database
15:20 - which allows you to change your models
15:22 - and update them while kind of
15:24 - maintaining that data and ensuring that
15:27 - if data already exists in the database
15:28 - you're not going to break that or remove
15:30 - that when you make a change to the
15:31 - database schema the way you do this is
15:33 - you type Python manage.pi and then make
15:36 - migrations you need to run this any
15:38 - single time you make a change to any of
15:40 - your database models after that you're
15:42 - going to type python manage.pi
15:46 - and then migrates if I can spell this
15:49 - correctly now when you type migrate this
15:51 - is going to actually apply the
15:52 - migrations and update the database for
15:55 - you so now you'll see when we rerun our
15:57 - application we'll no longer get that
15:58 - error because we've made the correct
16:00 - migrations here to our database so this
16:03 - is something that a lot of people get
16:04 - confused with pretty much anytime you
16:06 - make a change here so you add another
16:07 - attribute you add another model Etc run
16:09 - make migrations apply the migrations and
16:12 - then Django will automatically handle
16:14 - all of the operations on your database
16:15 - so that you don't need to deal with them
16:17 - yourself alright so now that we have
16:18 - this database model let's see how we can
16:20 - do some operations with it so what I'm
16:22 - going to do now is go in and create a
16:23 - new view now what this view is going to
16:25 - do is render a template that will view
16:27 - all of the different to-do list items
16:29 - that we have so actually let's first go
16:30 - and make a template I'm going to call
16:32 - this to Do's dot HTML inside of here I'm
16:35 - going to paste something feel free to
16:36 - pause the video and have a look at it
16:37 - but I will briefly explain
16:39 - so inside of here you can see that we're
16:41 - extending from the base template we're
16:43 - overriding the block content and we're
16:45 - actually using a for Loop within this
16:47 - template which is something that is
16:48 - valid what we do here is we render
16:50 - different list items for every single
16:52 - entry in our to-do's which is a variable
16:54 - we can pass into this template then we
16:57 - can access an attribute on this variable
16:59 - which is a python dictionary we do that
17:01 - using this double curly braces anything
17:04 - that you embed inside of Double curly
17:05 - braces here will be treated as a
17:07 - variable that you are kind of extracting
17:10 - and viewing as the actual value rather
17:13 - than some HTML content so whenever
17:15 - you're using a variable use two sets of
17:16 - curly braces then what we're doing is
17:19 - running an if statement we're saying if
17:20 - the to-do list item is completed render
17:22 - completed otherwise render not completed
17:25 - then we are ending the for loop block
17:27 - and we are ending the content block
17:29 - there's a lot of other cool stuff you
17:30 - can do here but this is the basics on
17:31 - conditional rendering and doing kind of
17:33 - block rendering or multiple rendering
17:35 - based on some type of variable you pass
17:37 - inside of here so now what we need to do
17:39 - is go reviews and we need to create a
17:40 - view that renders that template so we're
17:42 - going to say Define to Do's we're going
17:45 - to take in our request and we're going
17:46 - to return
17:48 - a render
17:49 - we are going to render the request if we
17:53 - could type this correctly this is going
17:55 - to be to dos.html and now what we need
17:58 - to do is pass a python dictionary that
18:00 - contains the variables or the key
18:01 - mapping pairs that we want to view
18:03 - inside of here so in this case I want to
18:05 - pass to Do's so what I'm going to do is
18:07 - put
18:08 - a dictionary
18:10 - I'm going to say to do's and then I want
18:12 - to view all of my to-do list items now
18:14 - how do I view of my to-do list items
18:16 - well I need to query them from my
18:17 - database fortunately since we have the
18:19 - orm we can do that quite quickly so we
18:21 - can say from dot models Imports to do
18:24 - item and then we can access all of the
18:26 - instances of our to do item so to do
18:29 - that I'll say to Do's or actually I
18:30 - can't do that because that's the
18:31 - variable I'll just say items is equal to
18:35 - to do item dot objects dot all
18:40 - this is going to get all of the
18:42 - different objects that exist inside of
18:43 - this database field then I can simply
18:45 - pass them here as a list object so I'll
18:48 - say to Do's is equal to items now I'm
18:50 - successfully rendering this template now
18:52 - what I need to do is create a URL for
18:54 - this template or for this root to do
18:56 - that I'm going to go to URLs and I'm
18:57 - going to create a path for the path this
19:00 - time we'll put to Do's slash like that
19:02 - then we're going to say views dot to
19:06 - do's and we'll say the name is to Do's
19:09 - okay so now assuming everything is
19:11 - successful we should be able to go to
19:12 - the do's and view all of our different
19:14 - to-do's although we don't currently have
19:15 - any so if I go here
19:17 - two slash to Do's you can see that we
19:21 - get a to-do list header but it doesn't
19:22 - contain any items now we're going to
19:24 - quickly look at the Django admin panel
19:26 - and then you will see how we can view
19:27 - those different items alright so now
19:29 - we're talking about the Django admin
19:31 - panel now this is a special thing that's
19:32 - provided by Django which allows us to
19:34 - manage users and different database
19:36 - models it's quite useful and requires
19:38 - minimal configuration what we need to do
19:40 - if we want to work with the Django admin
19:42 - panel is create a user so we're going to
19:43 - type
19:45 - Python manage.pi and then create super
19:49 - user when we do that it's going to
19:50 - prompt us for a username and password we
19:52 - don't need to do the email I'll just
19:54 - type in a password Here make sure you
19:56 - remember it once you create this user
19:57 - then what you can do is run your
19:59 - application so python manage.pyrun
20:01 - server you can go into your main URL
20:03 - here so we have that open and then type
20:05 - slash admin when you type slash admin it
20:07 - will bring you to a pre-built admin
20:09 - dashboard where you can then sign in
20:10 - with your credentials so I'll type in my
20:13 - password here and be brought to this
20:14 - page now notice it shows me the
20:16 - different database models from my
20:18 - various apps we also have groups and
20:19 - users which we're not looking at now we
20:21 - have access to to do items so I'll go to
20:23 - to do items and I can press add now I
20:25 - can actually modify my different items
20:26 - so I can do something like my item
20:29 - and Mark that as completed let's do one
20:31 - more
20:33 - another item and Mark that as not
20:34 - completed now that we've done that we
20:36 - can go back to slash
20:38 - to do's and you'll see that we have the
20:40 - two different to-do list items appearing
20:41 - and those will be saved persistently
20:43 - inside of our SQL Lite database which is
20:45 - running local locally sorry but we could
20:47 - actually host and kind of have you know
20:49 - a more persistent database that's not
20:51 - just a file on our computer alright so
20:53 - with that said I'm going to wrap up the
20:54 - video here this was the fastest I could
20:56 - possibly show you Django without
20:57 - skipping over a ton of details now
20:59 - obviously there is a bunch more stuff to
21:01 - learn if you'd like to learn that I have
21:03 - entire comprehensive tutorials on this
21:05 - channel and actually an entire Django
21:07 - course that is completely free so feel
21:09 - free to check that out with that said if
21:11 - you enjoyed the video make sure to leave
21:12 - a like subscribe to the channel and I
21:14 - look forward to seeing you in another
21:16 - one
21:23 - [Music]

Cleaned transcript:

in this video I'll show you how to build a simple Django application as fast as possible afterwards you'll know how to set up a Django project how to configure URLs how to create a simple database model and how to display Dynamic data using templates in case you aren't aware Django is a powerful web framework for python that's been used to build websites like Instagram Spotify and Dropbox with that said let's get started after a quick word from the sponsor of this video I've got some great news for you guys recently I've got to know a fantastic team who created a free tool that can supercharge your development Journey especially if you work with Django now this company is called app tension and they've sponsored this video so that I can tell you about their SAS boilerplate picture this you've got a brilliant idea but you're dreading the hours or weeks of coding that lies ahead just to get the project set up now that's where SAS boilerplate comes in this is not just a fancy name this is a tool that literally removes all of that tedious work and lets you dive in right to the heart of your project now this comprehensive of Kit covers everything your SAS application needs front end back end API scalable AWS based architecture an intuitive admin panel workers it's all there it even includes essential readytouse features like authentication notifications and yes even payment and subscription systems with a stripe integration and for you content Wizards out there there's a CMS integration with content full what's more the team behind this actually has a dedicated Discord community that you can join to get any assistance that you need so why spend the weeks setting up your code base when you could be working on the core product and building features that provide users real value check out SAS boilerplate from the link in the description and get started today skipping through all of those tedious setup steps alright so let's begin here by setting up Django to do that we're going to open some kind of directory you can see I have this demo directory opened in Visual Studio code and we're going to get into a terminal environment I just opened the terminal in vs code obviously you need python installed and once you've installed python we're going to type pip install and then Django in our terminal to install the Django package now if you're on Mac or Linux you can type pip3 install Django and once Django is installed we can create a Django project now restart your terminal if you're working in the same one and then type the command Django admin start project the name of the project which in this case can be something like demo when you do that you'll see that it will generate a new directory for you that contains a bunch of files that are pregenerated by Django let me walk through what these files do and then we can create a Django application so the first file we have here is a knit.pi now a knit dot Pi is a special file that tells python to treat this directory like a python package next we have asgi and wsgi these are special configuration files that we don't need to deal with these are going to allow Django to actually communicate with the web server we then have a settings.pi file straightforward this contains a bunch of different settings we'll go in here quite often when we need to install different Django applications install plugins change some of our middleware and do things like modify our database engines if you're not aware Django is compatible with many different databases and you can configure all of that type of stuff inside of this settings file we then have a urls.pi file this file will allow us to configure different URL routes that we can then kind of route or direct to different Django applications which I'll get into in one second next we have a manage.pi file this is a special file again that actually acts as a command line tool that allows us to run special commands to do things like make database migrations run our python server and all kinds of other things like creating users for our Django admin panel which we'll get into in one minute alright so now let's quickly talk about Django applications so right now we have something known as a Django project the Django project has these main files that I just discussed but if we actually want to have any executable code or be able to see a kind of website appearing we need to create something known as a Django app now a Django app is meant to be a standalone application that you can plug and play meaning I can take it out of this Django project and put it into another Django project these apps contain things like database models different views or routes templates all kinds of other stuff we can have inside of our applications so what we need to do whenever we're working with Django is create an app so to make an app what we're going to do is go to our terminal we're going to CD into the directory where we have our now Django project which is called demo and we're going to run the command Python manage.pi and then create app and actually that's going to be start app then we're going to put the name of the app in this case I can just do something like my app when I do this is going to create an application inside of here called my app which contains a bunch of different files which we're going to work in in just one second now once we've created this application we actually need to link this to our Django project to do that we need to go into this main folder which is the same name of our project go to settings.pi so scroll down to where we see installed applications and then place a string containing the name of our new app in this case it's going to be my app this will essentially install the application and allow our Django project to now view any of the code we put in this app now just to clarify apps a little bit more we can have different apps for different purposes so we may have an app for authentication we may have an app for specific user types so maybe admins or moderators we may have an app that allows us to view the main content of our website there's all kinds of different applications we can create and we can separate different logic into different applications where it makes sense to do so now that we've created this app what we want to do is go into the app and start creating some simple URLs and some Roots so first of all let's just have a look at some of the files we have inside of here so again a knit.pi we've talked about that admin.pi this allows us to register database models so we can view them on our admin panel we have apps.pi which we don't need to worry about models.pi where we'll place our database models tests where we can write some automated test cases and then views which is mainly where we'll work where we will create different views or routes that we can access on our website for now now though I actually want to create a new file here called urls.pi This is where we'll Place different URL routes and then connect them to our views so let's go into views here and create a simple view just so we can test how things work so to create a view or a route what we're going to do is type Define so we're going to create a function we'll give this a name something like home we're going to take in the request object as a parameter which will allow us to access things like query parameters and the body of different requests that are being sent to this function and then from here we're going to return some type of response now we can render some HTML templates which I'm going to show you in one second or we can actually return an HTTP response so I'm going to import at the top of my program here HTTP response I'm going to go return HTTP response like that and inside of here I'm just going to return a string which is Hello World this just allows us to return some very simple data which we can then display on the website so now that we have this view which is simply a function that returns some kind of response we need to actually connect this to our application through a root or a URL to do that we'll go to this newly created urls.pi file inside of our application notice we have one here and we have one inside of our project now inside of here what we need to do is create some URLs so we're going to say from Django dot URLs import path we're then going to say from dot import views and we're going to import this views.pi file that we have here now we're going to specify a variable which is URL patterns we're going to make this equal to a list and inside of here we're going to specify paths that will connect a URL pattern to a specific path or view so for now I'm going to put an empty path which just means we go to the root kind of URL of our website I shouldn't have said root kind of the base URL of our website we're going to connect this to the Views dot home view or function then we're going to specify that this has a name of Home essentially what this means is when we go to this kind of empty string path here we're going to call the views.home function which is this view which will then return this HTTP response which will allow allow us to view that okay so that's great we've now configured the URL within our application however we also need to configure the URL to our application I know this seems a bit weird but let's go inside of demo now go to urls.pi and we're going to create a URL root that allows us to connect to our application so here inside of demo we have all of the base routes or URLs for our entire project we then need to kind of create a URL here that will link into our specific applications you'll see why this is important in one second but for now let's create that link so we're going to say path we're going to put an empty string here and then we're going to use this function include which we'll import from right here inside of include we're going to specify the name of our application which actually in this case is my app Dot and then URLs now all this is going to say is that whatever I go to this empty string I want to forward all of the different URLs or Roots into myapps.urls where they will then be handled here so to give you a better example let's imagine I did something like my app slash if I did that now what would happen is whenever I go to my app slash in my URL bar or my address bar it would then take the remaining part of this URL and forward that into this root right here meaning if I wanted to access my home page I would now need to go to my website domain and then my app slash like that if I go there then anything after this slash is going to be passed into this URLs file where it will then be handled here meaning if I had something like home here then what I would need to do to access that route is type my app slash home so the home component so then next kind of part of the route will be handled here whereas the main part will be handled by this main application now this is cool because this allows us to have different prefixes for our different applications and have similar URLs within different applications that can still be accessed because we have this main prefix hopefully that makes sense but for now we're just going to make this an empty string we're going to remove this and we'll go back here and make this an empty string as well so we're able to view this root now that we've done this let's run our application and make sure all of this works then move on to some templates and databases so to do this we're going to type python manage.pi and then run server now when we run the server here you can see that we're getting an error don't worry about that we'll fix that in one second for now I'm going to look at the URL here which is the URL that is running our server so localhost Port 8000 I'm going to press on control and then press that I also could just type that into my address bar and you'll see that I get Hello World appearing on my screen okay all of that is great and to stop the server I'm going to hit Ctrl C on my keyboard now what I want to do is show you how we can use something known as a template so a template is essentially a reusable HTML file that allows us to display Dynamic data now we can have templates that inherit from other templates I'm going to quickly show you how that works so to do that what we need to do is create a templates folder inside of our application so I'm going to go to my app I'm going to create a folder called templates very important that you name it templates if you don't name it templates this won't work inside of templates we're going to create a new file called base.html inside of here we can use something known as the Jenga templating engine which allows us to display Dynamic data now I'm just going to paste in the template here because I don't want to write all of it out in this video considering we're trying to go fast now what this is is a simple HTML document that has a bootstrap nav bar and I just want to show you how the template works now inside of these templates we can create things known as blocks these blocks are overrideable pieces of content so I have a block title I'm ending the block here meaning I can then override this title in another template continuing I go down here and I have block content and N block meaning I can inherit from this template get all of the code that's inside of here so I get the nav bar and then I can change whatever's inside of these different blocks to illustrate that let's make another template here called home.html inside of home we're going to paste in some template code here so let me just grab this and finish this off so type end block here we're going to put a paragraph tag saying this is the home page and then end our paragraph tag now what this does is extend the base.html template meaning all of the code that exists inside of base.html we're going to import here so we can have a consistent style for all of the different pages in our website without having to rewrite all of that code we're then going to override the content that exists inside of our blocks so for the block title we're going to put home page for our content block we're simply going to put a paragraph tag that says this is the home page that's great we now have our templates now that we've done that we simply need to render the template to render the template we're going to go to our views file inside of our application and we're going to use this render function for the render function we're going to pass request which is right here as the first argument we're then going to pass the name of our template which is home.html again this only works if you have it inside of the templates directory now that we've done that we can rerun our server and we can view this template so let's run that again ignore the error for now and you can see that when I have a look at my website I get this kind of nav bar appearing and then I get this is the home page inside of my content block now that we've done that let's have a quick look at databases all right so I've opened up this models.pi file inside of my my app application what we're going to do now is create a database model that we can then access and use from Django now Django is great because it provides something known as an orm which is an object relational mapping this means that we can write python code to create different database models and then have whatever models we create be automatically made for us in some kind of structured database schema like sqlite3 so you'll actually see that as we start creating these models what will happen is we'll make something known as a migration this migration is actually automated code that will then go and create the corresponding model in something like SQL mongodb or whatever it is that we're using as our database backend engine you don't need to understand this fully but for now I'm going to paste in a symbol date database model you can see that I have a to do item this is a model and we have different fields on the model which are written as python attributes we have a character field in a Boolean field obviously we can get much more complicated and do things like references but I don't have time for that in this video so we've created a simple database model what I need to do now is register this model with my admin panel which we're going to look at in one minute and then I need to apply something known as a migration so that we actually have this model existing in our SQL Lite 3 database so what I'm going to do here is go to admin.pi admin.pi is the file where we can register different models so that they will appear inside of our admin panel allowing us to modify and view them so what I'm going to do is type from dot models import to do item which is the model that we created you can import other models here as well we're going to type admin Dot site dot register and then we're going to put the to do item here now when we run our application and we go to the admin panel which we're going to do in one second we'll be able to view this model okay now that we've done that what we need to do is make our migrations so anytime you make a change to your database models you need to make something known as a migration now this migration again is some automated code which Django will apply to the database which allows you to change your models and update them while kind of maintaining that data and ensuring that if data already exists in the database you're not going to break that or remove that when you make a change to the database schema the way you do this is you type Python manage.pi and then make migrations you need to run this any single time you make a change to any of your database models after that you're going to type python manage.pi and then migrates if I can spell this correctly now when you type migrate this is going to actually apply the migrations and update the database for you so now you'll see when we rerun our application we'll no longer get that error because we've made the correct migrations here to our database so this is something that a lot of people get confused with pretty much anytime you make a change here so you add another attribute you add another model Etc run make migrations apply the migrations and then Django will automatically handle all of the operations on your database so that you don't need to deal with them yourself alright so now that we have this database model let's see how we can do some operations with it so what I'm going to do now is go in and create a new view now what this view is going to do is render a template that will view all of the different todo list items that we have so actually let's first go and make a template I'm going to call this to Do's dot HTML inside of here I'm going to paste something feel free to pause the video and have a look at it but I will briefly explain so inside of here you can see that we're extending from the base template we're overriding the block content and we're actually using a for Loop within this template which is something that is valid what we do here is we render different list items for every single entry in our todo's which is a variable we can pass into this template then we can access an attribute on this variable which is a python dictionary we do that using this double curly braces anything that you embed inside of Double curly braces here will be treated as a variable that you are kind of extracting and viewing as the actual value rather than some HTML content so whenever you're using a variable use two sets of curly braces then what we're doing is running an if statement we're saying if the todo list item is completed render completed otherwise render not completed then we are ending the for loop block and we are ending the content block there's a lot of other cool stuff you can do here but this is the basics on conditional rendering and doing kind of block rendering or multiple rendering based on some type of variable you pass inside of here so now what we need to do is go reviews and we need to create a view that renders that template so we're going to say Define to Do's we're going to take in our request and we're going to return a render we are going to render the request if we could type this correctly this is going to be to dos.html and now what we need to do is pass a python dictionary that contains the variables or the key mapping pairs that we want to view inside of here so in this case I want to pass to Do's so what I'm going to do is put a dictionary I'm going to say to do's and then I want to view all of my todo list items now how do I view of my todo list items well I need to query them from my database fortunately since we have the orm we can do that quite quickly so we can say from dot models Imports to do item and then we can access all of the instances of our to do item so to do that I'll say to Do's or actually I can't do that because that's the variable I'll just say items is equal to to do item dot objects dot all this is going to get all of the different objects that exist inside of this database field then I can simply pass them here as a list object so I'll say to Do's is equal to items now I'm successfully rendering this template now what I need to do is create a URL for this template or for this root to do that I'm going to go to URLs and I'm going to create a path for the path this time we'll put to Do's slash like that then we're going to say views dot to do's and we'll say the name is to Do's okay so now assuming everything is successful we should be able to go to the do's and view all of our different todo's although we don't currently have any so if I go here two slash to Do's you can see that we get a todo list header but it doesn't contain any items now we're going to quickly look at the Django admin panel and then you will see how we can view those different items alright so now we're talking about the Django admin panel now this is a special thing that's provided by Django which allows us to manage users and different database models it's quite useful and requires minimal configuration what we need to do if we want to work with the Django admin panel is create a user so we're going to type Python manage.pi and then create super user when we do that it's going to prompt us for a username and password we don't need to do the email I'll just type in a password Here make sure you remember it once you create this user then what you can do is run your application so python manage.pyrun server you can go into your main URL here so we have that open and then type slash admin when you type slash admin it will bring you to a prebuilt admin dashboard where you can then sign in with your credentials so I'll type in my password here and be brought to this page now notice it shows me the different database models from my various apps we also have groups and users which we're not looking at now we have access to to do items so I'll go to to do items and I can press add now I can actually modify my different items so I can do something like my item and Mark that as completed let's do one more another item and Mark that as not completed now that we've done that we can go back to slash to do's and you'll see that we have the two different todo list items appearing and those will be saved persistently inside of our SQL Lite database which is running local locally sorry but we could actually host and kind of have you know a more persistent database that's not just a file on our computer alright so with that said I'm going to wrap up the video here this was the fastest I could possibly show you Django without skipping over a ton of details now obviously there is a bunch more stuff to learn if you'd like to learn that I have entire comprehensive tutorials on this channel and actually an entire Django course that is completely free so feel free to check that out with that said if you enjoyed the video make sure to leave a like subscribe to the channel and I look forward to seeing you in another one
