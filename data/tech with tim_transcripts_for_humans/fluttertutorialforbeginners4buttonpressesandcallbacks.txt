With timestamps:

00:02 - [Music]
00:06 - hello everybody and welcome back to
00:08 - another flutter tutorial
00:09 - so in today's video what we're going to
00:11 - be doing is talking about buttons and
00:13 - button callbacks so the goal of this
00:15 - video is going to be to add a button to
00:17 - this text input field here that we can
00:19 - press
00:19 - when we press that button we will take
00:21 - the text that's in the field
00:22 - we will put it somewhere else on the
00:24 - screen so hopefully in a text widget or
00:25 - something like that
00:26 - and then we will clear the input field
00:28 - so that's what we're going to be aiming
00:29 - to do
00:30 - this is going to kind of be building the
00:31 - component of our app that will allow us
00:33 - to actually get user input
00:35 - so if we're talking about some kind of
00:36 - blog app or messaging app or whatever we
00:38 - end up actually creating
00:39 - we're going to need some way for the
00:40 - user to type something in so that's what
00:42 - we're going to be doing here is just
00:43 - making that widget that we'll be keeping
00:45 - likely for the rest of these videos
00:47 - so with that being said let's get
00:49 - started now the first thing that i'm
00:51 - going to do is i'm going to remove the
00:52 - state from here that has to deal with
00:54 - text
00:55 - so if we see inside of here that's where
00:56 - we left off last time we had this text
00:58 - showing up
00:59 - and essentially when you would type as
01:01 - you type and i mean i can just show you
01:03 - it shows up right underneath now we
01:05 - don't want that anymore we just want it
01:07 - so that when you press a button which
01:08 - we're going to add
01:09 - then it actually pops up that message so
01:12 - we're going to remove this text for
01:13 - right now
01:14 - and we're not actually going to be doing
01:15 - anything with a regular text widget
01:17 - inside of this anymore
01:18 - so that means i can get rid of change
01:20 - text i'm going to get rid of this
01:22 - unchanged event as well
01:24 - we're not going to be using that so i
01:26 - can remove that comma there too
01:28 - and then i'm going to get rid of the
01:29 - text right here
01:31 - and i think that should be about
01:34 - it okay so that's all we need to remove
01:37 - and what i'm going to do now is i'm
01:38 - going to add
01:39 - the button that's actually going to go
01:41 - on the right hand side of where our
01:43 - little message box is here
01:44 - so we could technically um well we have
01:47 - a column here but we could technically
01:48 - have a row
01:49 - and we could have the text input field
01:51 - and then a separate button beside it but
01:53 - i actually want to overlay the button
01:54 - right on top of the text field so it
01:56 - looks nice and it'll have a little logo
01:58 - there so we'll use an icon for it
01:59 - and i'll show you how that looks so
02:01 - anyways what we're going to do is get
02:02 - rid of column here
02:03 - so we don't need the column so i can get
02:04 - rid of these square brackets like that i
02:06 - think i can actually remove
02:08 - one more set of brackets and let's just
02:10 - save so we get a nice format here
02:12 - now i'm going to go inside of the input
02:14 - decoration
02:16 - actually so input decoration sorry is
02:18 - this one
02:19 - and i'm going to add a icon for what is
02:22 - it the suffix so prefix obviously means
02:24 - before
02:25 - suffix is after so what we're going to
02:27 - do is we're going to add a suffix icon
02:28 - which is actually going to be a button
02:30 - so let's go if i could find the u key
02:33 - suffix icon and here we're going to say
02:36 - icon
02:36 - button so let's just save that so we get
02:38 - a nice format here so rather than just
02:40 - an icon this is actually going to be a
02:42 - button this is just the widget used for
02:44 - that
02:44 - we're going to pick the icon that we
02:45 - want so we'll say icons
02:47 - dot and in this case i want to say
02:49 - message or something
02:51 - so let's do message uh actually no we
02:53 - already used that one sorry
02:55 - let's do icon.send and i guess that's
02:58 - going to be
02:59 - the icon uh let's see what's going on
03:02 - here
03:03 - so for the icon i just remembered sorry
03:04 - we need to do icon
03:06 - and then inside of that we can say
03:08 - icons.send so just like we did here we
03:10 - said icon icon.message we need to say
03:13 - icon button icon is equal to icon
03:16 - icons.send i think it's a little
03:18 - bit uh confusing why they do it like
03:19 - this but that's fine we'll do that
03:21 - and then what else do we need here well
03:23 - since we have the icon now we need to
03:25 - add something for when you actually
03:26 - press the icon
03:27 - so what we're going to do is we're going
03:28 - to say on pressed and for now we're just
03:30 - going to leave this blank
03:32 - so i'm just going to make a blank arrow
03:33 - function uh because we don't
03:35 - actually have anything to put here yet
03:37 - so this don't worry about this this is
03:38 - just so it doesn't crash yet
03:39 - and that when i refresh we can actually
03:41 - see what this looks like so now we look
03:43 - at the window and we can see that we
03:44 - actually have this button right
03:46 - here you can see what happens when i
03:47 - press on it like that
03:49 - and we'll add a few other options just
03:50 - to see what we can do with the buttons
03:52 - but that is the button right there you
03:53 - can see i can click on it obviously
03:54 - different
03:55 - than this message icon which is not
03:57 - interactive at all
03:58 - so let me add a few other things to this
04:00 - icon so for the icon button i think we
04:02 - can do something like splash color or
04:04 - some other cool things
04:06 - so splash color essentially is what
04:07 - color does this splash or
04:10 - like what color splashes on it when you
04:11 - press on it so what we can do here is we
04:13 - can say
04:14 - color and then we can pick the color
04:17 - that we want sorry
04:17 - colors and then we can pick the colors
04:19 - so there's a bunch of different colors
04:21 - we can choose from
04:22 - i want to pick something that's going to
04:23 - show up just so we can see it really
04:24 - easily so i'm going to go with blue
04:26 - so colors.blue and now let's have a look
04:28 - at what happens if i save that file
04:30 - and i press on the button we get a nice
04:32 - blue splash so maybe you don't want the
04:34 - blue you can change that to whatever
04:35 - color you want but i just want to show
04:37 - you there's all kinds of options like
04:38 - that
04:39 - and again you can hover over the icon
04:41 - button and you can see all of the
04:42 - different things that we can give so we
04:44 - can give it a
04:44 - hover color highlight color splash color
04:47 - auto focus
04:48 - tool tip all of that and in fact it
04:50 - actually might not be a bad idea to add
04:51 - a tool tip
04:52 - just to tell us what this actually means
04:54 - so let's go ahead and do that
04:55 - we'll say tool tip and then i think we
04:57 - can just actually put a string here and
04:59 - for the string we're just going to say
05:01 - post message now we're going to change
05:04 - some of this text and once we have a
05:05 - better idea of what this is actually
05:07 - going to be the app that we're making
05:09 - we'll leave that there for now okay so
05:11 - let's have a look at it now
05:12 - and if i hover over it does it give me
05:15 - anything the tooltip is not showing up
05:17 - maybe there's something else that gives
05:19 - us like something when we actually hover
05:21 - over top of it
05:22 - disabled tool tip autofocus okay so i
05:26 - just realized just by hovering over
05:27 - tooltip
05:28 - that this actually tells us exactly what
05:30 - this is so this text is displayed when
05:32 - the user long presses on the button and
05:33 - is used for accessibility
05:35 - okay so let's just see if what happens
05:37 - if i long press now
05:38 - there we go we get post message so i
05:40 - wasn't sure how to activate that before
05:41 - but now we can actually see what that is
05:43 - so that's actually pretty useful
05:45 - and someone can just long press and see
05:47 - what it does okay so now that we have
05:49 - that what i want to do is i actually
05:51 - want to modify
05:52 - my home page to be a stateful widget the
05:54 - idea here is that what i want to do is i
05:56 - want to have a text field on my home
05:58 - page
05:59 - and when we press the button in the text
06:01 - input widgets
06:02 - when we press that it actually modifies
06:04 - the home page
06:05 - so i'll show you how we can do that but
06:07 - we need to make this a stateful widget
06:09 - because the text that's going to be
06:10 - displayed on the home page is going to
06:12 - have a state right
06:13 - it will change based on what the user
06:14 - does and them interacting with the
06:16 - program with the application
06:18 - so we'll copy this build method here so
06:21 - copy that
06:22 - and we'll use our shortcuts so just st
06:24 - ful
06:25 - to make a stateful widget press enter
06:28 - and now we'll just name it the same
06:29 - thing so my home page
06:31 - like that okay now we'll override this
06:33 - build method we'll just copy in what we
06:35 - had before
06:36 - and we should be good to go with a
06:37 - stateful widget for my home page
06:39 - so let's have a look here looks like
06:41 - everything is working fine and now what
06:42 - i'm going to do is just add a state
06:44 - to my home page so the first thing i'm
06:46 - going to do is i'm just going to do
06:47 - exactly what we did before and i'm going
06:49 - to say
06:49 - string text like that we'll set it equal
06:52 - to a blank string to start
06:54 - and now inside of the body what i'm
06:56 - going to do is i'm going to make a
06:57 - column and i'm going to add the text
06:59 - input widget
07:00 - as well as a text widget again like we
07:02 - did in the text info widget before we
07:04 - deleted that
07:05 - so let's go column oops like that
07:09 - i believe we need to say children
07:13 - and that's a colon that's going to be
07:15 - widget
07:16 - and a list like that and then inside of
07:18 - the list we're going to take
07:20 - our text input widget and we are going
07:23 - to put a
07:24 - text widget now the text is going to
07:26 - have this dot text as its text
07:28 - and if we save it now we'll get a nice
07:30 - format and this is what we're going to
07:31 - have for our body
07:33 - so really straightforward just have that
07:34 - widget that we already have there then
07:36 - we'll have some text and this will
07:37 - be equal to this.text now how are we
07:40 - actually going to modify
07:41 - this text here when the button is
07:44 - pressed all the way down here because
07:45 - notice that this is in a different class
07:48 - so i can't really actually access this
07:50 - text widget
07:51 - from down here because previously we had
07:54 - some method that method used the
07:56 - controller and it changed the text or
07:58 - cleared it or it did something like that
07:59 - right
08:00 - that was inside this class all of the
08:01 - stuff was in the same class
08:03 - so how can i make it so this button here
08:05 - actually modifies
08:06 - this text up here well this is where we
08:08 - could talk about something called a
08:10 - callback
08:10 - so on our button of course we have a
08:13 - method called on press
08:14 - what that does is it tells us what to do
08:17 - when we press the button
08:18 - so you right now i've just made a blank
08:20 - function this is just like
08:22 - imagine just an empty function that does
08:24 - nothing that's what i've put right here
08:25 - right now
08:26 - just so it doesn't crash but what we
08:28 - could do is we could make a method
08:30 - we could say void uh you know oops
08:33 - void click or something like that and
08:35 - then we could call
08:37 - this.click right so inside of here just
08:39 - like we did previously
08:41 - we'd say this dot click and then what
08:43 - would happen is whenever we press the
08:45 - button
08:45 - it would call this method so we'll
08:48 - actually leave this here for now but the
08:49 - idea is how do i modify
08:51 - this text so what we're actually going
08:53 - to do is use a callback and what a
08:54 - callback is is essentially we pass
08:57 - a function to this text input widget
09:00 - and when the button is pressed it will
09:02 - call the function that we passed it
09:04 - so we can write a function or a method
09:06 - whatever you want to call it
09:07 - right inside of our home page so we'll
09:10 - write one inside of here
09:11 - and then we'll pass it as a constructor
09:13 - argument
09:14 - to text input widget it will save that
09:17 - in here as a callback
09:18 - and then we will call the callback when
09:20 - this is pressed
09:21 - so that means that we can actually call
09:24 - a method that is not on our
09:26 - our class and since that method is in
09:28 - another class it can access
09:29 - say the text attribute right here so i
09:32 - know this is very abstract right now if
09:33 - you haven't seen something like this
09:34 - before
09:35 - but what we're going to start by doing
09:36 - is just making a method on my homepage
09:38 - state that we want to be called when the
09:40 - button is pressed so we'll hook it up
09:42 - after but imagine that this is being
09:43 - called when that button is pressed
09:45 - so i'm going to say change text is what
09:47 - i want this to be called
09:49 - and it needs to take a parameter of text
09:51 - so we'll just say string
09:53 - oops string text like that and then
09:56 - inside of here
09:57 - what i'm going to do is i'm going to say
09:59 - this
10:00 - dot text equals text like that
10:03 - now the important thing to remember
10:05 - though is that we need to wrap this
10:06 - inside of
10:06 - set state because if we don't then it
10:08 - will modify the text but it won't
10:10 - re-render the widget so we won't
10:12 - actually see any of those updates
10:13 - happening
10:14 - so let's say this dot oops
10:17 - dot set state then inside of here we
10:20 - will take this line
10:21 - and we will paste it okay so now we are
10:24 - modifying the text
10:26 - whenever we call this method uh so we'll
10:28 - change this up here and that in turn
10:29 - will change this and since we've wrapped
10:31 - it in set state that will re-render the
10:33 - widget
10:34 - now what we need to do is we need to
10:35 - give this method to
10:37 - the text input widget so what we're
10:39 - going to do is we're going to make a
10:40 - constructor inside of text input widget
10:42 - that takes one parameter
10:44 - which is the method that we want to use
10:47 - as a callback
10:48 - so we're going to start by saying
10:50 - function
10:52 - string callback
10:55 - oops if i can hit the l key call back
10:59 - like that so function string callback
11:01 - what this is saying is that we're going
11:02 - to have
11:03 - a property of this class which is a
11:05 - callback it is a function
11:07 - the function takes a string as one of
11:09 - the arguments so you can see the reason
11:10 - i did that is because we have string
11:12 - text here
11:13 - say i change this to number text or into
11:15 - text or widget text or whatever it is
11:17 - then i would have to change the
11:18 - corresponding type here as well now if
11:20 - you hover over the widget you see it's
11:21 - giving us this blue squiggly
11:23 - it's saying this class or a class that
11:25 - this class inherits from is marked as
11:27 - immutable
11:28 - but one or more of its instant fields
11:29 - are fine are not
11:31 - final so what this means this is an
11:32 - immutable widget or an immutable class
11:35 - so we can't modify any of the properties
11:37 - on it
11:37 - so we just need to change this to be
11:39 - final and what this essentially is
11:41 - saying
11:41 - what is this what am i getting the final
11:43 - variable callback must be initialized
11:45 - okay let's just do function
11:46 - callback okay i think we can fix this
11:50 - later but anyways
11:51 - final function callback uh final
11:53 - function string callback so this is just
11:55 - saying this is going to be final
11:56 - once this is set we are not going to
11:58 - change it that's what this line
12:00 - says right here when we declare
12:01 - something as final so now what we need
12:03 - to do is we need to make a constructor
12:05 - that's actually going to define
12:06 - what callback is so to make a
12:08 - constructor all we do is we type text
12:11 - input widget so the name of our widget
12:14 - like that
12:14 - we put two brackets we can do our
12:17 - semicolon like that
12:18 - and then inside of here we write this
12:21 - dot callback
12:22 - and in fact we're not actually going to
12:23 - put it inside of curly braces
12:25 - what happens when you put curly braces
12:27 - is that saying that this is going to be
12:29 - an
12:29 - optional named parameter so right now
12:32 - this is just like a regular function if
12:34 - we think of a constructor
12:35 - we must pass it one callback to be able
12:38 - to actually create
12:39 - this text input widget we have to give
12:41 - it something and you can see that
12:43 - because if we look at text input widget
12:44 - it's telling us one positional argument
12:46 - expected but zero found
12:48 - that's because we just put this.callback
12:50 - here so we're defining we have one
12:52 - argument or one parameter that needs to
12:53 - be passed
12:54 - now if i change this to be inside of
12:56 - curly braces notice that this squiggly
12:58 - line goes away
12:59 - that's because this now makes this an
13:01 - optional parameter that's
13:02 - named so that means now if i want to
13:04 - pass a callback i
13:06 - can but i don't have to so if i want to
13:08 - pass one then what i have to do is i
13:09 - have to say callback colon
13:11 - and i have to pass the callback there so
13:13 - that is
13:14 - that means this is going to be a named
13:16 - optional parameter so we need to define
13:18 - the name
13:19 - whereas if we don't have the curly
13:20 - braces we don't have to give a name at
13:22 - all
13:23 - we can just pass one argument into the
13:25 - function
13:26 - now if we put this inside of square
13:28 - brackets here this is an
13:30 - unnamed optional parameter so that means
13:32 - that we don't have to do
13:34 - callback like that and in fact notice
13:36 - i'm not getting the autocomplete for it
13:37 - i would just put the function here but i
13:40 - don't have to because it's optional
13:41 - so anyways i hope that makes sense but
13:43 - we will leave this as just a mandatory
13:46 - parameter that we have to pass in so a
13:47 - required parameter
13:49 - and then inside of here what we're going
13:50 - to do is we're actually going to pass
13:53 - this change text function here that we
13:55 - want to give
13:56 - to the constructor so we're going to say
13:58 - this oops this dot change
14:00 - text now it's very important that you
14:02 - don't include the brackets at the end
14:04 - the brackets at the end actually signify
14:06 - a call to the function so if i have a
14:08 - function right
14:09 - and let's just say you know i don't
14:11 - really want to define another one but if
14:13 - we say void
14:14 - test like oops void test
14:18 - for some reason i just cannot type if we
14:20 - have tests we say void test
14:21 - like that if we just type test what this
14:24 - actually is is a reference to what this
14:27 - function is or where this function is
14:29 - you can think of it as like a variable
14:31 - that's holding the reference to this
14:33 - function
14:33 - so if i just type test or i use test i'm
14:36 - not calling the function
14:37 - so i'm not going to execute anything
14:39 - that's inside of it but i will have
14:40 - access to where it is so let's say i do
14:43 - something like
14:44 - x equals test what i can actually do is
14:46 - i can call x
14:48 - because x is equal to test test is a
14:50 - function so i can call the function
14:52 - that's kind of what this is saying right
14:54 - if i have a callback so let's go
14:56 - now back to the original example if i
14:58 - have this function here and i don't call
15:00 - it and i just pass it through
15:02 - then we're going to assign callback
15:04 - equal to this dot change text
15:06 - so now whenever i call callback which we
15:09 - haven't done yet
15:10 - it will call change text so i hope that
15:13 - makes sense but i just want to go into
15:14 - enough detail that no one's super
15:15 - confused
15:16 - so what we're going to do now is we
15:17 - already have on press setup with this
15:19 - dot click
15:20 - so inside of click we are going to call
15:22 - the callback
15:23 - so we define the callback inside of here
15:26 - so how do i actually get that or use
15:28 - that from the other class because notice
15:30 - we have two classes here
15:31 - this one is handling all the constructor
15:33 - stuff and this one is actually handling
15:35 - all the state
15:36 - so if i go inside of here what i can do
15:38 - is i can use this fancy word called
15:39 - widget
15:40 - and what that does is it references this
15:42 - class right here
15:44 - so it has access to anything that's
15:45 - inside of this class when i use widget
15:48 - so i can say widget.callback because
15:51 - callback is right here
15:52 - and i can actually access that and then
15:54 - i can say widget.callback like that
15:56 - and i have to give it one parameter
15:58 - which is going to be text right because
15:59 - if we look at callback
16:01 - we can see it change text has one
16:02 - parameter so what i'm going to do
16:04 - is i'm going to give it controller dot
16:07 - text like that
16:08 - now the last thing i'm going to do here
16:09 - is i'm going to say controller.clear
16:12 - so what's going to happen is we're going
16:14 - to call the callback function and then
16:16 - we're going to clear
16:17 - the text input field because whenever we
16:19 - press the button we've submitted
16:21 - our message our post or whatever it is
16:24 - so
16:24 - let's just do a quick summary and then
16:26 - i'll show you how all this works
16:27 - we have my app which i'm not going to go
16:29 - through we already know how that works
16:30 - we now have a stateful widget for our
16:32 - home page
16:33 - and inside of here we have one state
16:35 - which is text right
16:36 - we have a method called change text this
16:38 - is going to be our callback function it
16:40 - simply changes the text here
16:42 - to be equal to whatever text we pass in
16:44 - we have a method here which is the build
16:46 - method
16:47 - what we do is we use a scaffold which
16:48 - we've talked about before we have an app
16:50 - bar which is that little thing at the
16:51 - top
16:52 - we have a body with a column inside of
16:54 - the column we have the text input widget
16:56 - we pass that callback function that we
16:58 - want to use when the button is pressed
17:00 - and then we have text which is going to
17:01 - be equal to whatever is up here so this
17:03 - dot text
17:04 - next we have our text input widget this
17:06 - is going to take a callback so that's a
17:08 - mandatory parameter we must give
17:10 - whenever we create this
17:12 - and then what we have is the state for
17:14 - all of that so we have this dispose
17:15 - method
17:16 - that gets rid of all the resources once
17:18 - we're done with this we have a
17:19 - controller that handles the text field
17:22 - controlling so clearing and getting the
17:23 - text we have a method called click
17:25 - when this is called we call the widget
17:28 - the widget callback which is what is
17:30 - defined
17:30 - right here then we clear the field and
17:33 - this is drawing all the stuff and we've
17:35 - already gone over how that works
17:36 - so let's have a look at our app now and
17:38 - see if everything is working so let me
17:39 - just type hello
17:40 - and press the button and nothing is
17:43 - happening so let me just
17:45 - refresh this and make sure i've saved
17:48 - and let's try it again
17:49 - and unfortunately nothing is happening
17:53 - okay so i just had to refresh the app
17:54 - seems like it's working now i just had
17:56 - to rebuild it
17:57 - but if i go and i type hello and i press
17:59 - enter
18:00 - we can see that it shows up right
18:01 - underneath and now i can say now or
18:03 - something
18:04 - i can say hi my name is
18:07 - tim and that will show up down there as
18:09 - well so that is kind of what i wanted to
18:10 - accomplish and what the goal of this
18:12 - video was essentially type something in
18:13 - press enter and it shows up
18:15 - underneath uh what we just typed in our
18:18 - i guess underneath this message box and
18:19 - it will change every single time
18:21 - and say if i delete all this stuff
18:23 - doesn't delete anything else let's just
18:24 - hit that again and it is working so in
18:26 - the next video what i think we're going
18:28 - to do is make it so that we can see a
18:29 - list of all these different things and
18:31 - we can scroll through them
18:32 - and then we'll make a widget that's
18:33 - going to hold this text and we'll have
18:35 - it nice and formatted it will have a
18:37 - like button a dislike button
18:38 - whatever we end up doing it'll be
18:39 - something along those lines so anyways
18:42 - that has been it
18:43 - for this video if you guys enjoyed do
18:45 - make sure you leave a like
18:46 - subscribe to the channel and hopefully i
18:48 - will see you again in the next flutter
18:49 - tutorial

Cleaned transcript:

hello everybody and welcome back to another flutter tutorial so in today's video what we're going to be doing is talking about buttons and button callbacks so the goal of this video is going to be to add a button to this text input field here that we can press when we press that button we will take the text that's in the field we will put it somewhere else on the screen so hopefully in a text widget or something like that and then we will clear the input field so that's what we're going to be aiming to do this is going to kind of be building the component of our app that will allow us to actually get user input so if we're talking about some kind of blog app or messaging app or whatever we end up actually creating we're going to need some way for the user to type something in so that's what we're going to be doing here is just making that widget that we'll be keeping likely for the rest of these videos so with that being said let's get started now the first thing that i'm going to do is i'm going to remove the state from here that has to deal with text so if we see inside of here that's where we left off last time we had this text showing up and essentially when you would type as you type and i mean i can just show you it shows up right underneath now we don't want that anymore we just want it so that when you press a button which we're going to add then it actually pops up that message so we're going to remove this text for right now and we're not actually going to be doing anything with a regular text widget inside of this anymore so that means i can get rid of change text i'm going to get rid of this unchanged event as well we're not going to be using that so i can remove that comma there too and then i'm going to get rid of the text right here and i think that should be about it okay so that's all we need to remove and what i'm going to do now is i'm going to add the button that's actually going to go on the right hand side of where our little message box is here so we could technically um well we have a column here but we could technically have a row and we could have the text input field and then a separate button beside it but i actually want to overlay the button right on top of the text field so it looks nice and it'll have a little logo there so we'll use an icon for it and i'll show you how that looks so anyways what we're going to do is get rid of column here so we don't need the column so i can get rid of these square brackets like that i think i can actually remove one more set of brackets and let's just save so we get a nice format here now i'm going to go inside of the input decoration actually so input decoration sorry is this one and i'm going to add a icon for what is it the suffix so prefix obviously means before suffix is after so what we're going to do is we're going to add a suffix icon which is actually going to be a button so let's go if i could find the u key suffix icon and here we're going to say icon button so let's just save that so we get a nice format here so rather than just an icon this is actually going to be a button this is just the widget used for that we're going to pick the icon that we want so we'll say icons dot and in this case i want to say message or something so let's do message uh actually no we already used that one sorry let's do icon.send and i guess that's going to be the icon uh let's see what's going on here so for the icon i just remembered sorry we need to do icon and then inside of that we can say icons.send so just like we did here we said icon icon.message we need to say icon button icon is equal to icon icons.send i think it's a little bit uh confusing why they do it like this but that's fine we'll do that and then what else do we need here well since we have the icon now we need to add something for when you actually press the icon so what we're going to do is we're going to say on pressed and for now we're just going to leave this blank so i'm just going to make a blank arrow function uh because we don't actually have anything to put here yet so this don't worry about this this is just so it doesn't crash yet and that when i refresh we can actually see what this looks like so now we look at the window and we can see that we actually have this button right here you can see what happens when i press on it like that and we'll add a few other options just to see what we can do with the buttons but that is the button right there you can see i can click on it obviously different than this message icon which is not interactive at all so let me add a few other things to this icon so for the icon button i think we can do something like splash color or some other cool things so splash color essentially is what color does this splash or like what color splashes on it when you press on it so what we can do here is we can say color and then we can pick the color that we want sorry colors and then we can pick the colors so there's a bunch of different colors we can choose from i want to pick something that's going to show up just so we can see it really easily so i'm going to go with blue so colors.blue and now let's have a look at what happens if i save that file and i press on the button we get a nice blue splash so maybe you don't want the blue you can change that to whatever color you want but i just want to show you there's all kinds of options like that and again you can hover over the icon button and you can see all of the different things that we can give so we can give it a hover color highlight color splash color auto focus tool tip all of that and in fact it actually might not be a bad idea to add a tool tip just to tell us what this actually means so let's go ahead and do that we'll say tool tip and then i think we can just actually put a string here and for the string we're just going to say post message now we're going to change some of this text and once we have a better idea of what this is actually going to be the app that we're making we'll leave that there for now okay so let's have a look at it now and if i hover over it does it give me anything the tooltip is not showing up maybe there's something else that gives us like something when we actually hover over top of it disabled tool tip autofocus okay so i just realized just by hovering over tooltip that this actually tells us exactly what this is so this text is displayed when the user long presses on the button and is used for accessibility okay so let's just see if what happens if i long press now there we go we get post message so i wasn't sure how to activate that before but now we can actually see what that is so that's actually pretty useful and someone can just long press and see what it does okay so now that we have that what i want to do is i actually want to modify my home page to be a stateful widget the idea here is that what i want to do is i want to have a text field on my home page and when we press the button in the text input widgets when we press that it actually modifies the home page so i'll show you how we can do that but we need to make this a stateful widget because the text that's going to be displayed on the home page is going to have a state right it will change based on what the user does and them interacting with the program with the application so we'll copy this build method here so copy that and we'll use our shortcuts so just st ful to make a stateful widget press enter and now we'll just name it the same thing so my home page like that okay now we'll override this build method we'll just copy in what we had before and we should be good to go with a stateful widget for my home page so let's have a look here looks like everything is working fine and now what i'm going to do is just add a state to my home page so the first thing i'm going to do is i'm just going to do exactly what we did before and i'm going to say string text like that we'll set it equal to a blank string to start and now inside of the body what i'm going to do is i'm going to make a column and i'm going to add the text input widget as well as a text widget again like we did in the text info widget before we deleted that so let's go column oops like that i believe we need to say children and that's a colon that's going to be widget and a list like that and then inside of the list we're going to take our text input widget and we are going to put a text widget now the text is going to have this dot text as its text and if we save it now we'll get a nice format and this is what we're going to have for our body so really straightforward just have that widget that we already have there then we'll have some text and this will be equal to this.text now how are we actually going to modify this text here when the button is pressed all the way down here because notice that this is in a different class so i can't really actually access this text widget from down here because previously we had some method that method used the controller and it changed the text or cleared it or it did something like that right that was inside this class all of the stuff was in the same class so how can i make it so this button here actually modifies this text up here well this is where we could talk about something called a callback so on our button of course we have a method called on press what that does is it tells us what to do when we press the button so you right now i've just made a blank function this is just like imagine just an empty function that does nothing that's what i've put right here right now just so it doesn't crash but what we could do is we could make a method we could say void uh you know oops void click or something like that and then we could call this.click right so inside of here just like we did previously we'd say this dot click and then what would happen is whenever we press the button it would call this method so we'll actually leave this here for now but the idea is how do i modify this text so what we're actually going to do is use a callback and what a callback is is essentially we pass a function to this text input widget and when the button is pressed it will call the function that we passed it so we can write a function or a method whatever you want to call it right inside of our home page so we'll write one inside of here and then we'll pass it as a constructor argument to text input widget it will save that in here as a callback and then we will call the callback when this is pressed so that means that we can actually call a method that is not on our our class and since that method is in another class it can access say the text attribute right here so i know this is very abstract right now if you haven't seen something like this before but what we're going to start by doing is just making a method on my homepage state that we want to be called when the button is pressed so we'll hook it up after but imagine that this is being called when that button is pressed so i'm going to say change text is what i want this to be called and it needs to take a parameter of text so we'll just say string oops string text like that and then inside of here what i'm going to do is i'm going to say this dot text equals text like that now the important thing to remember though is that we need to wrap this inside of set state because if we don't then it will modify the text but it won't rerender the widget so we won't actually see any of those updates happening so let's say this dot oops dot set state then inside of here we will take this line and we will paste it okay so now we are modifying the text whenever we call this method uh so we'll change this up here and that in turn will change this and since we've wrapped it in set state that will rerender the widget now what we need to do is we need to give this method to the text input widget so what we're going to do is we're going to make a constructor inside of text input widget that takes one parameter which is the method that we want to use as a callback so we're going to start by saying function string callback oops if i can hit the l key call back like that so function string callback what this is saying is that we're going to have a property of this class which is a callback it is a function the function takes a string as one of the arguments so you can see the reason i did that is because we have string text here say i change this to number text or into text or widget text or whatever it is then i would have to change the corresponding type here as well now if you hover over the widget you see it's giving us this blue squiggly it's saying this class or a class that this class inherits from is marked as immutable but one or more of its instant fields are fine are not final so what this means this is an immutable widget or an immutable class so we can't modify any of the properties on it so we just need to change this to be final and what this essentially is saying what is this what am i getting the final variable callback must be initialized okay let's just do function callback okay i think we can fix this later but anyways final function callback uh final function string callback so this is just saying this is going to be final once this is set we are not going to change it that's what this line says right here when we declare something as final so now what we need to do is we need to make a constructor that's actually going to define what callback is so to make a constructor all we do is we type text input widget so the name of our widget like that we put two brackets we can do our semicolon like that and then inside of here we write this dot callback and in fact we're not actually going to put it inside of curly braces what happens when you put curly braces is that saying that this is going to be an optional named parameter so right now this is just like a regular function if we think of a constructor we must pass it one callback to be able to actually create this text input widget we have to give it something and you can see that because if we look at text input widget it's telling us one positional argument expected but zero found that's because we just put this.callback here so we're defining we have one argument or one parameter that needs to be passed now if i change this to be inside of curly braces notice that this squiggly line goes away that's because this now makes this an optional parameter that's named so that means now if i want to pass a callback i can but i don't have to so if i want to pass one then what i have to do is i have to say callback colon and i have to pass the callback there so that is that means this is going to be a named optional parameter so we need to define the name whereas if we don't have the curly braces we don't have to give a name at all we can just pass one argument into the function now if we put this inside of square brackets here this is an unnamed optional parameter so that means that we don't have to do callback like that and in fact notice i'm not getting the autocomplete for it i would just put the function here but i don't have to because it's optional so anyways i hope that makes sense but we will leave this as just a mandatory parameter that we have to pass in so a required parameter and then inside of here what we're going to do is we're actually going to pass this change text function here that we want to give to the constructor so we're going to say this oops this dot change text now it's very important that you don't include the brackets at the end the brackets at the end actually signify a call to the function so if i have a function right and let's just say you know i don't really want to define another one but if we say void test like oops void test for some reason i just cannot type if we have tests we say void test like that if we just type test what this actually is is a reference to what this function is or where this function is you can think of it as like a variable that's holding the reference to this function so if i just type test or i use test i'm not calling the function so i'm not going to execute anything that's inside of it but i will have access to where it is so let's say i do something like x equals test what i can actually do is i can call x because x is equal to test test is a function so i can call the function that's kind of what this is saying right if i have a callback so let's go now back to the original example if i have this function here and i don't call it and i just pass it through then we're going to assign callback equal to this dot change text so now whenever i call callback which we haven't done yet it will call change text so i hope that makes sense but i just want to go into enough detail that no one's super confused so what we're going to do now is we already have on press setup with this dot click so inside of click we are going to call the callback so we define the callback inside of here so how do i actually get that or use that from the other class because notice we have two classes here this one is handling all the constructor stuff and this one is actually handling all the state so if i go inside of here what i can do is i can use this fancy word called widget and what that does is it references this class right here so it has access to anything that's inside of this class when i use widget so i can say widget.callback because callback is right here and i can actually access that and then i can say widget.callback like that and i have to give it one parameter which is going to be text right because if we look at callback we can see it change text has one parameter so what i'm going to do is i'm going to give it controller dot text like that now the last thing i'm going to do here is i'm going to say controller.clear so what's going to happen is we're going to call the callback function and then we're going to clear the text input field because whenever we press the button we've submitted our message our post or whatever it is so let's just do a quick summary and then i'll show you how all this works we have my app which i'm not going to go through we already know how that works we now have a stateful widget for our home page and inside of here we have one state which is text right we have a method called change text this is going to be our callback function it simply changes the text here to be equal to whatever text we pass in we have a method here which is the build method what we do is we use a scaffold which we've talked about before we have an app bar which is that little thing at the top we have a body with a column inside of the column we have the text input widget we pass that callback function that we want to use when the button is pressed and then we have text which is going to be equal to whatever is up here so this dot text next we have our text input widget this is going to take a callback so that's a mandatory parameter we must give whenever we create this and then what we have is the state for all of that so we have this dispose method that gets rid of all the resources once we're done with this we have a controller that handles the text field controlling so clearing and getting the text we have a method called click when this is called we call the widget the widget callback which is what is defined right here then we clear the field and this is drawing all the stuff and we've already gone over how that works so let's have a look at our app now and see if everything is working so let me just type hello and press the button and nothing is happening so let me just refresh this and make sure i've saved and let's try it again and unfortunately nothing is happening okay so i just had to refresh the app seems like it's working now i just had to rebuild it but if i go and i type hello and i press enter we can see that it shows up right underneath and now i can say now or something i can say hi my name is tim and that will show up down there as well so that is kind of what i wanted to accomplish and what the goal of this video was essentially type something in press enter and it shows up underneath uh what we just typed in our i guess underneath this message box and it will change every single time and say if i delete all this stuff doesn't delete anything else let's just hit that again and it is working so in the next video what i think we're going to do is make it so that we can see a list of all these different things and we can scroll through them and then we'll make a widget that's going to hold this text and we'll have it nice and formatted it will have a like button a dislike button whatever we end up doing it'll be something along those lines so anyways that has been it for this video if you guys enjoyed do make sure you leave a like subscribe to the channel and hopefully i will see you again in the next flutter tutorial
