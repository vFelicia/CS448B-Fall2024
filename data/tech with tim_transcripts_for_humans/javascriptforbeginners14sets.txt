With timestamps:

00:00 - hello everybody and welcome back to in
00:01 - the JavaScript tutorial so in this video
00:03 - we're gonna be talking about sets now
00:05 - sets are another data type in JavaScript
00:07 - I've left them until now because they
00:08 - are a little bit more advanced and I'd
00:10 - want to show the difference between sets
00:12 - and arrays now what is a set well
00:15 - essentially a set is an unordered
00:17 - collection of unique elements now
00:19 - collection just like array means it
00:21 - holds multiple elements unordered means
00:24 - we don't keep track of the order of the
00:25 - elements so that we kind of do and I'll
00:27 - talk about that in a second and then
00:29 - unique means that no elements can exist
00:31 - more than once so recall when we create
00:33 - an array so I said like var ARR equals
00:36 - and then we made an array and we did
00:37 - something like you know 2 3 4 whatever
00:38 - right these elements I could have
00:41 - multiple of the same and that was
00:43 - totally fine and we keep track of the
00:45 - order in which our elements occur we can
00:46 - index these so I can access element 0 I
00:49 - could access element 4 you know what I
00:51 - mean our element 5 whatever I want and
00:53 - that's an important property of arrays
00:55 - is that we understand the order and we
00:57 - can access each element individually now
01:00 - sex are a little bit different so what
01:01 - I'm gonna do is just call this
01:03 - underscore set because says a keyword
01:04 - what I'm gonna do is create a new set
01:07 - now with a set we cannot actually index
01:11 - elements directly all we can do is see
01:13 - if elements exist in the set we can
01:15 - delete elements and we can add elements
01:17 - from the set there's a few other
01:18 - operations which we'll talk about but
01:20 - there's no way to look at every
01:22 - individual element in the set and see
01:24 - you know like index 0 index 1 there's no
01:27 - way to do that with the sets unless you
01:29 - do some special stuff which isn't really
01:31 - that important so anyways that is kind
01:33 - of what is set is and I'm gonna show you
01:35 - because I know some of you guys are
01:36 - confused it is hard to kind of explain
01:38 - this so what I'm gonna do is add a few
01:39 - elements to my set now I'm actually
01:42 - allowed to chain these add methods
01:44 - together like this it's just a property
01:46 - of the set this works because when this
01:48 - add method is called it actually just
01:51 - returns the original set which allows me
01:53 - to just do this chain if you don't
01:54 - understand that that's fine but if I
01:56 - want to add elements what I can do is do
01:57 - something like set dot add so now I have
01:59 - three I can add five I can add the
02:02 - element seven and now what I'm gonna do
02:03 - is actually add the same element 3 again
02:05 - because I want to show you what this set
02:07 - looks like so keep in mind that a set is
02:09 - an unordered collection of unique
02:11 - elements now try to remember
02:13 - like based off that definition what are
02:15 - we gonna get when I print out this set
02:17 - let's have a look at it here let's
02:19 - refresh we get 3 5 & 7 and notice that
02:22 - although I've added 3 twice 3 only
02:25 - exists in the set once that is because
02:27 - again these are unique so you can add
02:30 - the same element multiple times into the
02:31 - set if you want but it's only going to
02:33 - exist there once and the reason for this
02:35 - is because when we use sets we only care
02:37 - if elements exist we don't care how many
02:40 - elements are the frequency of elements
02:41 - so what I'm gonna do now is actually
02:43 - have a look at the has method for a set
02:46 - so dot has which tells me if the set has
02:49 - a specific element in it so in this case
02:51 - if I do set dot has to you can guess
02:54 - what the results going to be here which
02:56 - is false and if I do set dot has let's
02:58 - say 5 an element that does exist in our
03:00 - set and we refresh we get the value true
03:03 - now the massive advantage of this is
03:06 - that sets actually have what's called an
03:08 - o1 lookup time now I'm not gonna go into
03:11 - time complexities which some of you
03:12 - might have heard of before but what that
03:14 - means is sets are pretty much instant to
03:16 - determine if any item exists in them now
03:18 - you might be like ok well that's the
03:20 - same as a raise right let me explain to
03:22 - you how we look up items and arrays
03:23 - versus sets and the difference between
03:25 - the two because you do need to
03:26 - understand this so you can understand
03:28 - when you would even want to use a set so
03:30 - if we have an array and I'll put the
03:31 - same elements in it so 3 5 7 if I want
03:35 - to look to see if some element exists in
03:37 - the set let's say the element you know
03:39 - negative 5 or something like that or
03:41 - sorry not the set in the array what I
03:42 - need to do is I need to actually look
03:44 - through every single element in my array
03:47 - and check if those elements are equal to
03:49 - what I'm looking for
03:50 - that's do you know the basic principle
03:52 - of an array we have all these different
03:54 - elements we could have multiple of the
03:55 - same elements if I want to find if
03:57 - something exists however though I could
03:58 - potentially have to look through every
04:00 - single item in the array to find it now
04:03 - obviously if an item exists so say 3
04:05 - when I reach that item I can determine
04:07 - that I found it but if the item doesn't
04:09 - exist like negative 5 I have to look
04:11 - through every single element to
04:13 - determine if it's there or not
04:14 - now in an array of size 3 this is
04:16 - totally fine it's not doesn't take very
04:18 - long computationally to determine you
04:20 - know out of three elements if an element
04:22 - exists but imagine we had an array that
04:25 - 10,000 elements inside of it well now
04:27 - what if I'm doing constant lookups on
04:29 - this array and you know every loops per
04:32 - se maybe I'm in a for loop
04:33 - I'm checking whether certain element
04:35 - exists well this is obviously gonna take
04:36 - a very long time I need to loop through
04:38 - the entire array and that is just not
04:40 - very efficient to continually do when
04:42 - all I really care about is if an element
04:44 - exists so this is where we use a set it
04:47 - doesn't matter how many elements are
04:49 - inside of a set it will maintain an
04:51 - average lookup time which is called oh
04:53 - one which is constant time which
04:54 - essentially means it doesn't matter how
04:56 - big the set gets it will continue to
04:58 - take the same amount of time which is a
04:59 - very very small fraction of time to
05:01 - determine if an element is inside of it
05:03 - so that is kind of where sets are useful
05:06 - and why you'd want to use them typically
05:08 - when you're solving programming problems
05:09 - and doing stuff like that sets are very
05:11 - nice data structure to have and to be
05:13 - able to use or datatype whatever you
05:15 - want to call so let's go through a few
05:17 - other methods of the set now hopefully
05:18 - you understand a little bit about why we
05:20 - might want to use it so another method
05:21 - we have for Seth I'm just gonna look at
05:23 - my thing here it's actually a method
05:25 - it's just the attribute is the size so
05:27 - just like arrays and the other ones that
05:29 - we've looked at we can check the size so
05:31 - let's do a refresh here we get a size of
05:34 - 3 so pretty straightforward there we can
05:35 - also delete elements so I can delete say
05:38 - element 5 let's actually have a look at
05:40 - what this dot the delete method returns
05:42 - by refreshing this for us
05:45 - returns true which means this element
05:47 - did exist inside of the set so when we
05:49 - deleted it we got that true value now
05:52 - let me do is console about log this set
05:53 - afterwards you can see the difference
05:55 - when I delete that element so let's look
05:57 - at this here refresh we get set 3 7
06:00 - we've removed 5 from that and now what
06:04 - I'm gonna do is actually set delete 5
06:07 - let's see what happens when we delete an
06:10 - element that doesn't exist in the set so
06:11 - let's try delete 5 again so we delete 5
06:14 - up here remember it exists in the set in
06:17 - this instance and then down here when we
06:18 - delete 5 it doesn't exist because we
06:20 - just removed it so what do we get as the
06:22 - output from that method well we get
06:24 - false because that means when we tried
06:25 - to delete 5 it didn't exist inside of
06:28 - the set ok so those are the basic
06:30 - properties of the set another one that
06:32 - we can use is dot of values this one's
06:34 - kind of useful
06:36 - what this will do is return to us all of
06:38 - the values inside of the set in the
06:41 - order in which they were inserted so we
06:43 - get three five seven that should be your
06:45 - output there and that should give it to
06:46 - us in an array let's have a look oh
06:48 - sorry that's actually a set iterator
06:49 - which I'm not really gonna go into so
06:52 - much but you can see the different
06:53 - values three five and seven and that is
06:57 - giving it to us an order in which it was
06:59 - inserted now the reason I said that sets
07:01 - have an unordered collection is because
07:04 - technically if I did something like dot
07:07 - add three like this our set still only
07:11 - looks like three five seven even though
07:14 - I've added three at the end and I've
07:16 - added three at the beginning and at the
07:17 - second position we only have three five
07:20 - seven so although this does keep track
07:21 - of the order in which it's seen elements
07:23 - it keeps track of the order in which it
07:25 - saw the first element that was inserted
07:27 - into the set if you're confused by that
07:29 - it's fine you don't really have to worry
07:31 - about that too much I just want to
07:32 - explain why I said unordered yet some of
07:34 - you might consider this to be an ordered
07:36 - collection okay so now let me just show
07:38 - you using a for loop to iterate through
07:41 - all the elements in a set so this is
07:42 - pretty straightforward what we're gonna
07:44 - do is say four and we'll just say bar I
07:46 - don't know entry and then of in this
07:49 - case we're gonna say underscore set dot
07:51 - values it's important we add this and
07:54 - this is gonna give us what's called an
07:56 - iterator object which will actually
07:58 - allow us to just look through the
08:00 - different values so now we can just
08:01 - console dot log in here I guess oops
08:04 - console dot log entry let's have a look
08:08 - at this we refresh we get three five
08:11 - seven that is how we iterate through the
08:13 - different values of a set okay so I'm
08:16 - just cleared some of this code and what
08:17 - I'm gonna do now is talk about the set
08:19 - constructor which is something that kind
08:20 - of skimmed over at the beginning so
08:22 - obviously to create a new set what we've
08:23 - done is just typed new set but what we
08:26 - can do is actually give some arguments
08:27 - to what we called the set constructor
08:29 - which is this aspect right here that
08:31 - will create a new set for us now what I
08:33 - can do is actually fill in some things
08:35 - in here I can actually put what's called
08:37 - an iterable object so for our purposes
08:39 - that's gonna be an array or a string for
08:41 - right now and it will create a set using
08:43 - those items so if I decide to do an
08:45 - array maybe that looks something like
08:47 - this well let's just have a look at this
08:50 - when I create the set so console dot log
08:53 - set 1 let's have a look at what this is
08:55 - refresh we get set for 1 3 4 5 so it's
08:59 - taken all these elements converted them
09:00 - into a set and that is what we get now I
09:02 - can also put a string in here so you do
09:05 - something like hello and if we have a
09:07 - look at set 1 again remember I change
09:09 - the name there we get h-e-l-l-o again
09:11 - what we've done is we've separated all
09:12 - the letters added them all into the set
09:14 - since L existed twice we only get it
09:16 - once because that is the property of a
09:18 - set now in terms of some other set
09:21 - operations there is set operations like
09:23 - Union difference and those kind of
09:26 - things in other languages but I could be
09:28 - incorrect as I'm just learning
09:29 - JavaScript but I've tried to use for
09:31 - example the Union method and this does
09:33 - not work I believe you actually have to
09:35 - implement these methods manually which
09:37 - is not that difficult
09:38 - where Union simply means for anyone
09:40 - confused combine two sets together
09:42 - that's what Union means but I don't
09:44 - think we actually have a built-in method
09:46 - for that which is kind of annoying but
09:48 - that's fine we can deal with it now
09:50 - we'll show you one cool method that the
09:52 - sets do have but it's gonna involve me
09:54 - creating a function first let's do that
09:56 - so let's say function tests like this
10:00 - and all we're gonna do is actually let's
10:02 - put an X in here it's just a console dot
10:05 - log X now we're gonna use this function
10:09 - from what's called the for each method
10:11 - of our set now this is kind of cool
10:13 - we'll talk about how this works so set
10:15 - for each and then what I can actually do
10:17 - is just put the name of the function in
10:19 - here now what this is gonna do is for
10:22 - each element in my set call this
10:24 - function on it and pass the value of
10:28 - that into this function so we're
10:30 - actually gonna print every value of our
10:32 - set or everything in our set I'm just by
10:35 - using this so let's have a look at this
10:36 - here refresh what is happening here
10:40 - let's second refresh set is not defined
10:44 - at OOP sorry this needs to be set one my
10:46 - apologies let's refresh this one more
10:48 - time
10:48 - and we get h-e-l-l-o so in my opinion
10:51 - that is pretty cool what's happening is
10:54 - we can pick some function and we will
10:56 - apply all the operations on each element
10:58 - from our set you know using this
11:01 - function right so we're just gonna call
11:02 - this function on every element from
11:03 - in this case we're just consoled all
11:05 - logging but we could obviously do some
11:07 - more advanced things like we could check
11:09 - if this was a certain item I can say if
11:11 - X equals equals let's just say the
11:15 - letter L then we will simply console
11:21 - console.log found it and then we'll
11:25 - otherwise just say else console dot log
11:30 - nope okay so let's have a look at this
11:34 - now and see what we get so fresh we get
11:36 - nope twice found it and then nope so you
11:39 - get the idea we can create whatever we
11:40 - want we can use this for each which is
11:42 - very useful and then apply this function
11:44 - to every element inside of our set so
11:47 - anyways that I think that has been int
11:48 - four sets there's a few other small
11:50 - things I could talk about but I don't
11:51 - find them that important so I'm gonna
11:53 - skip them for now as always if you guys
11:54 - have any questions make sure to leave
11:56 - them down below and let me know what you
11:57 - want to see from the rest of these
11:58 - JavaScript tutorials

Cleaned transcript:

hello everybody and welcome back to in the JavaScript tutorial so in this video we're gonna be talking about sets now sets are another data type in JavaScript I've left them until now because they are a little bit more advanced and I'd want to show the difference between sets and arrays now what is a set well essentially a set is an unordered collection of unique elements now collection just like array means it holds multiple elements unordered means we don't keep track of the order of the elements so that we kind of do and I'll talk about that in a second and then unique means that no elements can exist more than once so recall when we create an array so I said like var ARR equals and then we made an array and we did something like you know 2 3 4 whatever right these elements I could have multiple of the same and that was totally fine and we keep track of the order in which our elements occur we can index these so I can access element 0 I could access element 4 you know what I mean our element 5 whatever I want and that's an important property of arrays is that we understand the order and we can access each element individually now sex are a little bit different so what I'm gonna do is just call this underscore set because says a keyword what I'm gonna do is create a new set now with a set we cannot actually index elements directly all we can do is see if elements exist in the set we can delete elements and we can add elements from the set there's a few other operations which we'll talk about but there's no way to look at every individual element in the set and see you know like index 0 index 1 there's no way to do that with the sets unless you do some special stuff which isn't really that important so anyways that is kind of what is set is and I'm gonna show you because I know some of you guys are confused it is hard to kind of explain this so what I'm gonna do is add a few elements to my set now I'm actually allowed to chain these add methods together like this it's just a property of the set this works because when this add method is called it actually just returns the original set which allows me to just do this chain if you don't understand that that's fine but if I want to add elements what I can do is do something like set dot add so now I have three I can add five I can add the element seven and now what I'm gonna do is actually add the same element 3 again because I want to show you what this set looks like so keep in mind that a set is an unordered collection of unique elements now try to remember like based off that definition what are we gonna get when I print out this set let's have a look at it here let's refresh we get 3 5 & 7 and notice that although I've added 3 twice 3 only exists in the set once that is because again these are unique so you can add the same element multiple times into the set if you want but it's only going to exist there once and the reason for this is because when we use sets we only care if elements exist we don't care how many elements are the frequency of elements so what I'm gonna do now is actually have a look at the has method for a set so dot has which tells me if the set has a specific element in it so in this case if I do set dot has to you can guess what the results going to be here which is false and if I do set dot has let's say 5 an element that does exist in our set and we refresh we get the value true now the massive advantage of this is that sets actually have what's called an o1 lookup time now I'm not gonna go into time complexities which some of you might have heard of before but what that means is sets are pretty much instant to determine if any item exists in them now you might be like ok well that's the same as a raise right let me explain to you how we look up items and arrays versus sets and the difference between the two because you do need to understand this so you can understand when you would even want to use a set so if we have an array and I'll put the same elements in it so 3 5 7 if I want to look to see if some element exists in the set let's say the element you know negative 5 or something like that or sorry not the set in the array what I need to do is I need to actually look through every single element in my array and check if those elements are equal to what I'm looking for that's do you know the basic principle of an array we have all these different elements we could have multiple of the same elements if I want to find if something exists however though I could potentially have to look through every single item in the array to find it now obviously if an item exists so say 3 when I reach that item I can determine that I found it but if the item doesn't exist like negative 5 I have to look through every single element to determine if it's there or not now in an array of size 3 this is totally fine it's not doesn't take very long computationally to determine you know out of three elements if an element exists but imagine we had an array that 10,000 elements inside of it well now what if I'm doing constant lookups on this array and you know every loops per se maybe I'm in a for loop I'm checking whether certain element exists well this is obviously gonna take a very long time I need to loop through the entire array and that is just not very efficient to continually do when all I really care about is if an element exists so this is where we use a set it doesn't matter how many elements are inside of a set it will maintain an average lookup time which is called oh one which is constant time which essentially means it doesn't matter how big the set gets it will continue to take the same amount of time which is a very very small fraction of time to determine if an element is inside of it so that is kind of where sets are useful and why you'd want to use them typically when you're solving programming problems and doing stuff like that sets are very nice data structure to have and to be able to use or datatype whatever you want to call so let's go through a few other methods of the set now hopefully you understand a little bit about why we might want to use it so another method we have for Seth I'm just gonna look at my thing here it's actually a method it's just the attribute is the size so just like arrays and the other ones that we've looked at we can check the size so let's do a refresh here we get a size of 3 so pretty straightforward there we can also delete elements so I can delete say element 5 let's actually have a look at what this dot the delete method returns by refreshing this for us returns true which means this element did exist inside of the set so when we deleted it we got that true value now let me do is console about log this set afterwards you can see the difference when I delete that element so let's look at this here refresh we get set 3 7 we've removed 5 from that and now what I'm gonna do is actually set delete 5 let's see what happens when we delete an element that doesn't exist in the set so let's try delete 5 again so we delete 5 up here remember it exists in the set in this instance and then down here when we delete 5 it doesn't exist because we just removed it so what do we get as the output from that method well we get false because that means when we tried to delete 5 it didn't exist inside of the set ok so those are the basic properties of the set another one that we can use is dot of values this one's kind of useful what this will do is return to us all of the values inside of the set in the order in which they were inserted so we get three five seven that should be your output there and that should give it to us in an array let's have a look oh sorry that's actually a set iterator which I'm not really gonna go into so much but you can see the different values three five and seven and that is giving it to us an order in which it was inserted now the reason I said that sets have an unordered collection is because technically if I did something like dot add three like this our set still only looks like three five seven even though I've added three at the end and I've added three at the beginning and at the second position we only have three five seven so although this does keep track of the order in which it's seen elements it keeps track of the order in which it saw the first element that was inserted into the set if you're confused by that it's fine you don't really have to worry about that too much I just want to explain why I said unordered yet some of you might consider this to be an ordered collection okay so now let me just show you using a for loop to iterate through all the elements in a set so this is pretty straightforward what we're gonna do is say four and we'll just say bar I don't know entry and then of in this case we're gonna say underscore set dot values it's important we add this and this is gonna give us what's called an iterator object which will actually allow us to just look through the different values so now we can just console dot log in here I guess oops console dot log entry let's have a look at this we refresh we get three five seven that is how we iterate through the different values of a set okay so I'm just cleared some of this code and what I'm gonna do now is talk about the set constructor which is something that kind of skimmed over at the beginning so obviously to create a new set what we've done is just typed new set but what we can do is actually give some arguments to what we called the set constructor which is this aspect right here that will create a new set for us now what I can do is actually fill in some things in here I can actually put what's called an iterable object so for our purposes that's gonna be an array or a string for right now and it will create a set using those items so if I decide to do an array maybe that looks something like this well let's just have a look at this when I create the set so console dot log set 1 let's have a look at what this is refresh we get set for 1 3 4 5 so it's taken all these elements converted them into a set and that is what we get now I can also put a string in here so you do something like hello and if we have a look at set 1 again remember I change the name there we get hello again what we've done is we've separated all the letters added them all into the set since L existed twice we only get it once because that is the property of a set now in terms of some other set operations there is set operations like Union difference and those kind of things in other languages but I could be incorrect as I'm just learning JavaScript but I've tried to use for example the Union method and this does not work I believe you actually have to implement these methods manually which is not that difficult where Union simply means for anyone confused combine two sets together that's what Union means but I don't think we actually have a builtin method for that which is kind of annoying but that's fine we can deal with it now we'll show you one cool method that the sets do have but it's gonna involve me creating a function first let's do that so let's say function tests like this and all we're gonna do is actually let's put an X in here it's just a console dot log X now we're gonna use this function from what's called the for each method of our set now this is kind of cool we'll talk about how this works so set for each and then what I can actually do is just put the name of the function in here now what this is gonna do is for each element in my set call this function on it and pass the value of that into this function so we're actually gonna print every value of our set or everything in our set I'm just by using this so let's have a look at this here refresh what is happening here let's second refresh set is not defined at OOP sorry this needs to be set one my apologies let's refresh this one more time and we get hello so in my opinion that is pretty cool what's happening is we can pick some function and we will apply all the operations on each element from our set you know using this function right so we're just gonna call this function on every element from in this case we're just consoled all logging but we could obviously do some more advanced things like we could check if this was a certain item I can say if X equals equals let's just say the letter L then we will simply console console.log found it and then we'll otherwise just say else console dot log nope okay so let's have a look at this now and see what we get so fresh we get nope twice found it and then nope so you get the idea we can create whatever we want we can use this for each which is very useful and then apply this function to every element inside of our set so anyways that I think that has been int four sets there's a few other small things I could talk about but I don't find them that important so I'm gonna skip them for now as always if you guys have any questions make sure to leave them down below and let me know what you want to see from the rest of these JavaScript tutorials
