With timestamps:

00:02 - [Music]
00:07 - hello everybody and welcome back to
00:08 - another flutter tutorial
00:10 - so in today's video we're going to be
00:11 - talking about list views so we're going
00:13 - to be building the part of our app where
00:15 - when we actually type something in here
00:16 - so say i type hello
00:18 - and i press enter rather than just
00:20 - popping up as plain text underneath here
00:22 - and being overridden anytime i
00:24 - type something else here it's going to
00:26 - actually pop up in a list and that list
00:27 - will be scrollable
00:29 - so that it can have infinitely many
00:30 - items so that all of the different posts
00:32 - that we're going to be showing at some
00:34 - point in time especially if we're
00:35 - loading them from a database or
00:36 - something like that
00:37 - can appear and can be rendered
00:39 - efficiently so that's what we're going
00:40 - to be doing we're going to be talking
00:41 - about list view
00:42 - this is going to get a little bit
00:43 - complicated i know i've said that this
00:45 - is a beginner tutorial series but what i
00:47 - mean by that is beginner in terms of the
00:49 - flutter framework
00:50 - as i've been saying i do recommend or
00:53 - kind of
00:54 - hope that you guys have some programming
00:55 - knowledge so i don't have to explain
00:57 - absolutely everything
00:58 - but let's just think about what
00:59 - modifications i'm going to need to make
01:01 - here
01:01 - to actually start setting this up so
01:03 - essentially what i want is i want there
01:05 - to be a bunch of posts
01:07 - every single time you type a message and
01:09 - what is a post gonna can
01:10 - gonna consist of well i want to post to
01:12 - have some kind of body text or main text
01:15 - and then i want to have an author and a
01:17 - number of likes so you can like the post
01:20 - you can unlike the post it's by a
01:22 - certain author
01:23 - and then maybe in the future we'll make
01:24 - it so that if you click into a post
01:26 - you can comment on it or view a photo or
01:28 - something like that we'll see what we
01:30 - can add to this
01:31 - so a post is going to consist of an
01:33 - author a body and the number of likes
01:36 - now a post also has to know whether the
01:38 - user has liked it or has
01:40 - not liked it right if you think about
01:41 - like an instagram post or something like
01:43 - that if you press the like button
01:45 - it shows that you've liked it and if you
01:47 - like it again
01:48 - it unlikes it right so that's what we're
01:50 - gonna have to do for this post system
01:52 - so in order to kind of create some data
01:54 - structure to hold all of our posts and
01:56 - all that information i'm just going to
01:57 - make a new class called post
02:00 - so this is a regular class this isn't
02:01 - going to be a widget or anything like
02:03 - that it's just going to be your standard
02:04 - vanilla class
02:05 - and i'm going to say class post now what
02:07 - i'm going to do is i'm going to set up
02:08 - my attribute so i'm going to say
02:10 - string if we can type this here we're
02:12 - going to say string
02:13 - and what do we want we want that to be
02:15 - the body
02:16 - semicolon and then we will have a string
02:19 - which will be
02:20 - the author like that and finally we
02:23 - will have an int i guess that will be
02:26 - the
02:26 - likes and then we will have a boolean
02:29 - which will say if the user has liked
02:31 - this post
02:32 - okay awesome so we have that and we're
02:36 - going to set this to false by default so
02:38 - just say that's equal to false and i
02:40 - think there's no capital on that there
02:41 - we go
02:42 - and now we'll make a constructor and i'm
02:44 - just going to say post
02:46 - and it is mandatory that when you make a
02:48 - post
02:49 - you pass it the body and the author so
02:53 - we're going to say
02:54 - this oops this dot
02:57 - body and this
03:00 - dot author like that okay awesome so
03:03 - what this is going to do is essentially
03:05 - say
03:05 - oops let's not put those inside of curly
03:07 - braces then this needs to be
03:09 - dispositional arguments
03:10 - whenever we make a new post we must pass
03:12 - it a body and a
03:14 - author this will automatically assign
03:16 - the author to be equal to whatever we
03:18 - passed in and the body to be equal to
03:19 - whatever we passed in
03:21 - we're going to set the likes default 0
03:23 - and we're going to set the fact that the
03:24 - user has liked this equal to false by
03:26 - default because we know that
03:28 - if we just made this post it has no
03:29 - likes and the user has not liked it
03:32 - then we're going to add a method that is
03:34 - going to be run whenever the user likes
03:36 - this post so it will add one to the
03:38 - likes of this post
03:39 - or subtract one based on if the user has
03:41 - already clicked it or not
03:43 - so let's just add a void here we'll say
03:45 - void you know
03:46 - like post or something like that and all
03:49 - we're going to do inside of here is say
03:52 - if oops actually we're going to change
03:54 - this we're going to say this dot
03:56 - user liked equals not which is this
03:58 - exclamation point this
04:00 - dot user liked so this will simply
04:03 - reverse whatever this is
04:05 - so if user liked is false and then we
04:06 - call this it will become true
04:08 - if it's true we call this it will become
04:09 - false now we're going to say okay so if
04:13 - this dot user liked so if that is true
04:15 - if the user did like it then let's add
04:17 - one to the amount of likes
04:18 - so let's say this dot likes
04:21 - plus equals one and we need a semicolon
04:24 - and then
04:25 - otherwise so if they didn't like it then
04:28 - we'll say
04:28 - or if they unliked it this dot likes
04:31 - minus
04:32 - equals one so essentially this is just
04:34 - saying if you press it and it was
04:35 - already pressed subtract one like
04:37 - if you press it and it wasn't pressed
04:38 - add one like and then that way you can
04:40 - just kind of spam it on and off
04:41 - and it will update one like go away one
04:43 - like you know you get the point it's
04:45 - gonna go zero one zero one zero one
04:46 - and now we have our post class so what i
04:49 - need to do now
04:50 - is i need to figure out okay where am i
04:52 - gonna draw this list view and how am i
04:54 - gonna keep track of all of these posts
04:56 - well right now what we have is that when
04:58 - we make a new post or we hit the message
05:01 - and we submit some text
05:02 - it goes to this callback method which is
05:04 - change text
05:05 - what change text does is simply change
05:07 - the text that's showing up on the screen
05:09 - now that's not exactly what i want to
05:11 - happen in fact what i want to happen is
05:13 - i actually want to store a list of all
05:15 - of the posts
05:15 - and i want to take this text that the
05:17 - user wrote inside of that field and i
05:19 - want to make that into a post and store
05:22 - that somewhere
05:23 - so what i'm going to need to do here is
05:25 - i'm going to need to actually
05:26 - make a list up here so we're going to
05:28 - get rid of all this text related stuff
05:30 - so including this text widget here first
05:32 - of all
05:32 - so text we get rid of this.text and i'll
05:35 - change the name of this after but let's
05:37 - make a
05:38 - attribute up here we're just going to
05:40 - say actually i don't even think this
05:41 - needs to be final i think i can just say
05:43 - list in angle brackets post
05:47 - and we'll just call this i guess
05:50 - posts like that and we'll make that
05:51 - equal to an empty list
05:53 - so we're just going to start by having a
05:54 - list of posts
05:56 - we denoting that saying that this is a
05:58 - list it's going to store posts because
05:59 - that's what the angle brackets mean
06:01 - we call that post set it equal to an
06:02 - empty list and now instead of calling
06:04 - change
06:05 - text let's actually change this to new
06:07 - post so that it makes more sense
06:09 - so new post void new post takes some
06:12 - text
06:12 - and what we're going to do here now is
06:14 - make a new post and add it to the post
06:16 - list
06:16 - so we'll say posts dot add and then
06:19 - inside of here we're going to say
06:20 - new post like that and we need a body
06:23 - and an author so for the body that's
06:25 - going to be the text
06:26 - and we don't yet have a notion of an
06:27 - author so i'm just going to leave this
06:29 - as tim for right now so all of our
06:31 - authors will be called tim
06:33 - um doesn't matter for right now we'll
06:35 - just leave it like that but we will
06:36 - probably end up changing this
06:37 - later now we need to change this
06:39 - callback method when we're passing that
06:41 - to body so instead
06:42 - of or not body sorry to text input
06:44 - widget instead of this dot change
06:46 - text i'm going to call this this dot new
06:48 - post right
06:50 - so now we will actually be modifying
06:52 - this list and adding the text to this
06:54 - list whenever a new post is created
06:57 - so that's the basics and that's how we
06:58 - kind of get that set up here and now we
07:00 - need to actually make a list view
07:03 - that will be able to display all of
07:04 - these posts and we're going to have to
07:05 - obviously put that
07:07 - inside of the body so we're going to
07:08 - make a new widget that will be our post
07:10 - list so what we're going to do for that
07:13 - is we're going to make a stateful widget
07:14 - so we're going to say
07:16 - i guess stf and there you go stfl
07:20 - that's going to be statefulwidget we're
07:22 - just going to call this post
07:24 - list like that's pretty basic and now
07:27 - let's just start rendering this list
07:29 - just so we can see how this works so
07:30 - let's
07:31 - go inside of body we can see we have a
07:34 - column and now i let me just make sure
07:37 - that this is the right render i don't
07:39 - want to mess it up for us so let's see
07:40 - how i'm actually
07:42 - deciding to render this uh yep so we'll
07:44 - leave that as column and then
07:46 - after text input widget we're going to
07:48 - put our post
07:49 - list so we'll say post list like that
07:52 - and just make a empty set of brackets
07:55 - now what i'm going to do
07:56 - is i'm actually going to put an expanded
07:58 - widget
07:59 - um that contains all of this so we'll
08:02 - say expanded like that
08:03 - and we'll say child colon explain what
08:06 - that does after i just add the second
08:07 - one here
08:08 - and let's say expanded
08:11 - child colon and we need to scroll over
08:14 - okay let's go and add another bracket
08:18 - oops add another bracket like that okay
08:21 - so now we can actually see this what the
08:22 - expanded does
08:24 - is essentially just make sure that
08:26 - everything that we have as the child
08:28 - actually fills an entire area so right
08:30 - now the post list we're not rendering
08:33 - anything
08:33 - it doesn't have a set size so we want to
08:35 - make sure that this fills
08:37 - as large of a space as possible and same
08:39 - thing with this text input widget
08:41 - so this text input widget does have some
08:43 - kind of size but by wrapping both of
08:45 - these in expanded this means we're going
08:47 - to take up the entire screen
08:49 - so we should have the text input widget
08:50 - first and then the post after
08:52 - but i actually would rather have the
08:54 - list up top and
08:55 - the text input widget at the bottom so
08:57 - i'm just going to reverse the order of
08:59 - these and put this at
09:00 - the top so we'll get rid of the comma
09:02 - there and now we have that
09:04 - so now we should have our post list and
09:06 - the text input widget so let's do a hot
09:08 - reload here
09:09 - and let's just have a look and see what
09:10 - we're getting okay so there we go so we
09:12 - have the list
09:13 - right or whatever is up here and then we
09:15 - have the text input widget
09:17 - now obviously things aren't looking
09:18 - perfect right now this isn't at the very
09:20 - bottom of the screen
09:21 - we'll get there in a second once we once
09:23 - we change what's actually being rendered
09:25 - inside of the text input widget or sorry
09:27 - the post
09:28 - list widget not text input widget but
09:30 - again the expanded just
09:31 - takes whatever child is here and just
09:33 - expands its size so it feels as
09:36 - large as it can so if you ever run into
09:38 - problems where you're seeing like
09:40 - stuff that just isn't taking up the
09:42 - entire screen or you have something
09:43 - that's saying oh
09:44 - this item doesn't have a size you can
09:47 - just wrap it in
09:47 - expanded and that will automatically
09:49 - hopefully fix that for you
09:51 - so you can actually read here it says
09:53 - creates a widget that expands a child of
09:55 - a row column or flex so the child fills
09:57 - the available space
09:58 - along the flex widget's main axis that's
10:01 - the more formal definition of what that
10:02 - does
10:03 - okay so now we're going to go inside of
10:07 - post list state we have post lists up
10:10 - here
10:10 - we start making some modifications so
10:13 - the first thing that we're going to need
10:14 - to do here
10:15 - is we're going to need to
10:18 - actually create a list inside of here
10:20 - that's going to store all of the list
10:22 - items
10:23 - so just like we're going to have all of
10:24 - the items that we're going to be
10:26 - displaying
10:26 - where is it inside of my home page state
10:29 - so inside of this list post
10:31 - we need to store them inside of post
10:32 - list as well because we need to know
10:34 - what items we're actually going to be
10:35 - displaying
10:36 - so inside of here what i'm going to do
10:38 - is i'm going to say final
10:40 - list like that and we're going to say
10:41 - post and then we're going to say
10:43 - list oops like that list items will be
10:47 - our name
10:48 - so we have final post list items now
10:49 - we're going to add our constructor so
10:51 - we'll say post list
10:53 - and inside of here we'll simply say this
10:56 - dot
10:56 - oops list items so the idea is
11:00 - that this post list will simply take a
11:02 - bunch of posts
11:03 - and it will display them for us so that
11:05 - means that we need to pass
11:07 - our post list here a list of
11:10 - posts to display so what we can do is we
11:13 - can simply give it
11:14 - the current posts that are here so it'll
11:15 - say this dot post
11:17 - and now whenever we have the text input
11:20 - widget
11:20 - and it adds a new post it will modify
11:23 - this post here by setting the state so
11:25 - we're saying this dot set state
11:27 - post dot add so we're adding a new post
11:29 - which is saying hey we're changing the
11:30 - state of this widget
11:32 - and then that will automatically update
11:34 - this post list widget right here
11:36 - and we'll send it the new post list that
11:38 - it can display so that's the idea behind
11:40 - this
11:41 - and we'll see how all this is going to
11:42 - work but that that's the basics
11:44 - essentially
11:45 - okay so we have all that we have the
11:48 - list items here we have post list items
11:50 - i don't think i need to do anything more
11:52 - in there and now what we're going to do
11:54 - is we're going to actually start
11:55 - rendering the widget
11:56 - now i might be looking to the left hand
11:57 - side of my screen here because i have
11:58 - the code up it's actually
12:00 - fairly complicated to make this list
12:02 - view so i don't want to mess this up so
12:03 - i will be referencing that as we go
12:05 - so what we're going to do here is we're
12:07 - going to actually render a listview
12:09 - so we're going to say list view and then
12:10 - we're actually going to say dot builder
12:13 - so the list view widget itself actually
12:16 - has
12:16 - four different ways that you can use it
12:19 - now i'm not familiar with a bunch of the
12:20 - other ways they're all really specific
12:22 - you can go to the flutter website and
12:23 - look them up
12:24 - but this listview.builder essentially
12:27 - allows us to define
12:28 - a way to construct items so we pick
12:32 - how many items are in the list and we
12:33 - say okay this is the function that we
12:35 - want to call
12:36 - whenever a new item is added to this
12:38 - list
12:39 - and what that function will do is
12:41 - actually generate what one item in the
12:43 - list will look like
12:44 - so you're going to see how that works as
12:45 - we start going through it but we're just
12:47 - defining a function
12:48 - inside of this listview.builder that
12:51 - will build
12:52 - each individual list item the reason for
12:54 - this in terms of a flutter back end
12:56 - is that we don't want to render every
12:58 - single widget all the time we only want
13:00 - to render widgets that are visible
13:02 - so if we simply have a function that can
13:04 - just take some list item and render it
13:06 - then we don't need to display every
13:08 - single list item at once we can just
13:10 - call that function on the items that are
13:11 - visible
13:12 - and display those specific ones at least
13:14 - i think that's the logic behind this
13:16 - but we'll go through and we'll see how
13:17 - this works so the first thing we need to
13:19 - do is we need to say item count is equal
13:22 - to
13:22 - and we're going to say this dot widget
13:24 - because we're going to reference this
13:25 - stateful widget up top
13:27 - and we're going to say dot i believe
13:29 - it's list items.length
13:31 - so this is just defining how long this
13:34 - or this list view is how many items are
13:36 - inside of it well
13:38 - how many items are going to be inside of
13:39 - it the amount of items we have inside of
13:41 - our list items
13:42 - um list right so that's what that is
13:45 - going to be in there
13:45 - and then we say item builder and what we
13:48 - do here is we define a function
13:50 - that will tell us how we build each
13:53 - individual item
13:54 - so what we're going to do is we're going
13:55 - to say context and then
13:57 - index like that and then we'll put two
13:59 - squiggly brackets like that
14:01 - and this denotes a function so
14:03 - essentially what this is saying
14:05 - is that we have a context we have some
14:08 - index
14:09 - and then inside of here we can use this
14:11 - index to display specific items
14:13 - so the first thing i'm going to do is
14:15 - i'm going to say var post
14:17 - is equal to and in this case this dot
14:19 - widget
14:20 - dot list items and we're going to index
14:23 - the index
14:24 - so the way this will work is essentially
14:27 - we're telling the list view that hey
14:28 - you're gonna have
14:29 - you know eight items you're gonna have
14:31 - five items or how many items are inside
14:33 - of this
14:34 - uh list items widget or not widget this
14:37 - list items variable that we defined up
14:39 - here
14:39 - that's how many items we know we're
14:41 - gonna have so we're kind of defining
14:42 - like okay we're going to have 5
14:43 - 4 whatever it is now listview knows okay
14:46 - you're going to have four items
14:48 - so this index is going to have to rotate
14:50 - from 0 to 3. it's going to go 0 1
14:52 - 2 3. so iterate from 0 to 3 because it
14:55 - needs to render all of those items
14:57 - so here what i'm going to do is i'm
14:58 - going to grab each item that i want to
15:00 - render
15:01 - from wherever it is that i want to
15:02 - render it so in this case i want to grab
15:04 - the post
15:05 - that has the index of whatever index is
15:07 - being put into this function here to
15:09 - build the item
15:10 - so i hope that's making sense but you
15:12 - have the number of items in the list

Cleaned transcript:

hello everybody and welcome back to another flutter tutorial so in today's video we're going to be talking about list views so we're going to be building the part of our app where when we actually type something in here so say i type hello and i press enter rather than just popping up as plain text underneath here and being overridden anytime i type something else here it's going to actually pop up in a list and that list will be scrollable so that it can have infinitely many items so that all of the different posts that we're going to be showing at some point in time especially if we're loading them from a database or something like that can appear and can be rendered efficiently so that's what we're going to be doing we're going to be talking about list view this is going to get a little bit complicated i know i've said that this is a beginner tutorial series but what i mean by that is beginner in terms of the flutter framework as i've been saying i do recommend or kind of hope that you guys have some programming knowledge so i don't have to explain absolutely everything but let's just think about what modifications i'm going to need to make here to actually start setting this up so essentially what i want is i want there to be a bunch of posts every single time you type a message and what is a post gonna can gonna consist of well i want to post to have some kind of body text or main text and then i want to have an author and a number of likes so you can like the post you can unlike the post it's by a certain author and then maybe in the future we'll make it so that if you click into a post you can comment on it or view a photo or something like that we'll see what we can add to this so a post is going to consist of an author a body and the number of likes now a post also has to know whether the user has liked it or has not liked it right if you think about like an instagram post or something like that if you press the like button it shows that you've liked it and if you like it again it unlikes it right so that's what we're gonna have to do for this post system so in order to kind of create some data structure to hold all of our posts and all that information i'm just going to make a new class called post so this is a regular class this isn't going to be a widget or anything like that it's just going to be your standard vanilla class and i'm going to say class post now what i'm going to do is i'm going to set up my attribute so i'm going to say string if we can type this here we're going to say string and what do we want we want that to be the body semicolon and then we will have a string which will be the author like that and finally we will have an int i guess that will be the likes and then we will have a boolean which will say if the user has liked this post okay awesome so we have that and we're going to set this to false by default so just say that's equal to false and i think there's no capital on that there we go and now we'll make a constructor and i'm just going to say post and it is mandatory that when you make a post you pass it the body and the author so we're going to say this oops this dot body and this dot author like that okay awesome so what this is going to do is essentially say oops let's not put those inside of curly braces then this needs to be dispositional arguments whenever we make a new post we must pass it a body and a author this will automatically assign the author to be equal to whatever we passed in and the body to be equal to whatever we passed in we're going to set the likes default 0 and we're going to set the fact that the user has liked this equal to false by default because we know that if we just made this post it has no likes and the user has not liked it then we're going to add a method that is going to be run whenever the user likes this post so it will add one to the likes of this post or subtract one based on if the user has already clicked it or not so let's just add a void here we'll say void you know like post or something like that and all we're going to do inside of here is say if oops actually we're going to change this we're going to say this dot user liked equals not which is this exclamation point this dot user liked so this will simply reverse whatever this is so if user liked is false and then we call this it will become true if it's true we call this it will become false now we're going to say okay so if this dot user liked so if that is true if the user did like it then let's add one to the amount of likes so let's say this dot likes plus equals one and we need a semicolon and then otherwise so if they didn't like it then we'll say or if they unliked it this dot likes minus equals one so essentially this is just saying if you press it and it was already pressed subtract one like if you press it and it wasn't pressed add one like and then that way you can just kind of spam it on and off and it will update one like go away one like you know you get the point it's gonna go zero one zero one zero one and now we have our post class so what i need to do now is i need to figure out okay where am i gonna draw this list view and how am i gonna keep track of all of these posts well right now what we have is that when we make a new post or we hit the message and we submit some text it goes to this callback method which is change text what change text does is simply change the text that's showing up on the screen now that's not exactly what i want to happen in fact what i want to happen is i actually want to store a list of all of the posts and i want to take this text that the user wrote inside of that field and i want to make that into a post and store that somewhere so what i'm going to need to do here is i'm going to need to actually make a list up here so we're going to get rid of all this text related stuff so including this text widget here first of all so text we get rid of this.text and i'll change the name of this after but let's make a attribute up here we're just going to say actually i don't even think this needs to be final i think i can just say list in angle brackets post and we'll just call this i guess posts like that and we'll make that equal to an empty list so we're just going to start by having a list of posts we denoting that saying that this is a list it's going to store posts because that's what the angle brackets mean we call that post set it equal to an empty list and now instead of calling change text let's actually change this to new post so that it makes more sense so new post void new post takes some text and what we're going to do here now is make a new post and add it to the post list so we'll say posts dot add and then inside of here we're going to say new post like that and we need a body and an author so for the body that's going to be the text and we don't yet have a notion of an author so i'm just going to leave this as tim for right now so all of our authors will be called tim um doesn't matter for right now we'll just leave it like that but we will probably end up changing this later now we need to change this callback method when we're passing that to body so instead of or not body sorry to text input widget instead of this dot change text i'm going to call this this dot new post right so now we will actually be modifying this list and adding the text to this list whenever a new post is created so that's the basics and that's how we kind of get that set up here and now we need to actually make a list view that will be able to display all of these posts and we're going to have to obviously put that inside of the body so we're going to make a new widget that will be our post list so what we're going to do for that is we're going to make a stateful widget so we're going to say i guess stf and there you go stfl that's going to be statefulwidget we're just going to call this post list like that's pretty basic and now let's just start rendering this list just so we can see how this works so let's go inside of body we can see we have a column and now i let me just make sure that this is the right render i don't want to mess it up for us so let's see how i'm actually deciding to render this uh yep so we'll leave that as column and then after text input widget we're going to put our post list so we'll say post list like that and just make a empty set of brackets now what i'm going to do is i'm actually going to put an expanded widget um that contains all of this so we'll say expanded like that and we'll say child colon explain what that does after i just add the second one here and let's say expanded child colon and we need to scroll over okay let's go and add another bracket oops add another bracket like that okay so now we can actually see this what the expanded does is essentially just make sure that everything that we have as the child actually fills an entire area so right now the post list we're not rendering anything it doesn't have a set size so we want to make sure that this fills as large of a space as possible and same thing with this text input widget so this text input widget does have some kind of size but by wrapping both of these in expanded this means we're going to take up the entire screen so we should have the text input widget first and then the post after but i actually would rather have the list up top and the text input widget at the bottom so i'm just going to reverse the order of these and put this at the top so we'll get rid of the comma there and now we have that so now we should have our post list and the text input widget so let's do a hot reload here and let's just have a look and see what we're getting okay so there we go so we have the list right or whatever is up here and then we have the text input widget now obviously things aren't looking perfect right now this isn't at the very bottom of the screen we'll get there in a second once we once we change what's actually being rendered inside of the text input widget or sorry the post list widget not text input widget but again the expanded just takes whatever child is here and just expands its size so it feels as large as it can so if you ever run into problems where you're seeing like stuff that just isn't taking up the entire screen or you have something that's saying oh this item doesn't have a size you can just wrap it in expanded and that will automatically hopefully fix that for you so you can actually read here it says creates a widget that expands a child of a row column or flex so the child fills the available space along the flex widget's main axis that's the more formal definition of what that does okay so now we're going to go inside of post list state we have post lists up here we start making some modifications so the first thing that we're going to need to do here is we're going to need to actually create a list inside of here that's going to store all of the list items so just like we're going to have all of the items that we're going to be displaying where is it inside of my home page state so inside of this list post we need to store them inside of post list as well because we need to know what items we're actually going to be displaying so inside of here what i'm going to do is i'm going to say final list like that and we're going to say post and then we're going to say list oops like that list items will be our name so we have final post list items now we're going to add our constructor so we'll say post list and inside of here we'll simply say this dot oops list items so the idea is that this post list will simply take a bunch of posts and it will display them for us so that means that we need to pass our post list here a list of posts to display so what we can do is we can simply give it the current posts that are here so it'll say this dot post and now whenever we have the text input widget and it adds a new post it will modify this post here by setting the state so we're saying this dot set state post dot add so we're adding a new post which is saying hey we're changing the state of this widget and then that will automatically update this post list widget right here and we'll send it the new post list that it can display so that's the idea behind this and we'll see how all this is going to work but that that's the basics essentially okay so we have all that we have the list items here we have post list items i don't think i need to do anything more in there and now what we're going to do is we're going to actually start rendering the widget now i might be looking to the left hand side of my screen here because i have the code up it's actually fairly complicated to make this list view so i don't want to mess this up so i will be referencing that as we go so what we're going to do here is we're going to actually render a listview so we're going to say list view and then we're actually going to say dot builder so the list view widget itself actually has four different ways that you can use it now i'm not familiar with a bunch of the other ways they're all really specific you can go to the flutter website and look them up but this listview.builder essentially allows us to define a way to construct items so we pick how many items are in the list and we say okay this is the function that we want to call whenever a new item is added to this list and what that function will do is actually generate what one item in the list will look like so you're going to see how that works as we start going through it but we're just defining a function inside of this listview.builder that will build each individual list item the reason for this in terms of a flutter back end is that we don't want to render every single widget all the time we only want to render widgets that are visible so if we simply have a function that can just take some list item and render it then we don't need to display every single list item at once we can just call that function on the items that are visible and display those specific ones at least i think that's the logic behind this but we'll go through and we'll see how this works so the first thing we need to do is we need to say item count is equal to and we're going to say this dot widget because we're going to reference this stateful widget up top and we're going to say dot i believe it's list items.length so this is just defining how long this or this list view is how many items are inside of it well how many items are going to be inside of it the amount of items we have inside of our list items um list right so that's what that is going to be in there and then we say item builder and what we do here is we define a function that will tell us how we build each individual item so what we're going to do is we're going to say context and then index like that and then we'll put two squiggly brackets like that and this denotes a function so essentially what this is saying is that we have a context we have some index and then inside of here we can use this index to display specific items so the first thing i'm going to do is i'm going to say var post is equal to and in this case this dot widget dot list items and we're going to index the index so the way this will work is essentially we're telling the list view that hey you're gonna have you know eight items you're gonna have five items or how many items are inside of this uh list items widget or not widget this list items variable that we defined up here that's how many items we know we're gonna have so we're kind of defining like okay we're going to have 5 4 whatever it is now listview knows okay you're going to have four items so this index is going to have to rotate from 0 to 3. it's going to go 0 1 2 3. so iterate from 0 to 3 because it needs to render all of those items so here what i'm going to do is i'm going to grab each item that i want to render from wherever it is that i want to render it so in this case i want to grab the post that has the index of whatever index is being put into this function here to build the item so i hope that's making sense but you have the number of items in the list
