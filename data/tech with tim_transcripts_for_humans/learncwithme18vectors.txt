With timestamps:

00:00 - hello everybody and welcome to another c
00:02 - plus plus tutorial for beginners
00:04 - in today's video i'll be covering
00:06 - vectors now a vector is a dynamically
00:08 - resizable array
00:09 - this means that the vector can change
00:11 - its size so unlike an array that is a
00:13 - set static size that cannot change
00:15 - if you try to add more elements into a
00:17 - vector and it is not large enough it
00:18 - will just
00:19 - increase itself now there's a lot of
00:21 - complexities involved with that but
00:22 - anyways we'll talk about them in this
00:28 - video
00:33 - all right so the first thing we're going
00:34 - to do here is include vector so we're
00:36 - going to say
00:38 - include if i can spell include
00:41 - correctly not happening very well here
00:43 - we will include vector
00:45 - and just a note here if you're ever
00:46 - noticing that for some reason i'm using
00:49 - some data type or object that's not
00:50 - working for you
00:51 - make sure you have the included
00:52 - statement right so previously i think we
00:54 - used maps and you needed to include that
00:56 - we had use some other things you need to
00:58 - include as well and sometimes
00:59 - like stuffs kind of works but then
01:02 - doesn't work
01:02 - and anyways just always check the
01:04 - include statement because that's
01:05 - probably like a pretty easy fix to a lot
01:07 - of problems you guys might be running
01:08 - into
01:09 - anyways what is a vector as i was saying
01:11 - a vector really is just like an array
01:13 - except it has a lot of extra
01:14 - functionality so it is kind of
01:16 - wrapping an array and allowing this
01:18 - array to dynamically change its size and
01:21 - when i say dynamically change its size
01:23 - as i was kind of stating in the
01:24 - introduction this means that we don't
01:26 - need to know how big the vector is when
01:27 - we first create it
01:28 - i don't need to define that it's only
01:30 - going to have five elements in or 20
01:31 - elements or whatever
01:32 - i can do that there's options to specify
01:35 - how big the vector actually is
01:36 - but i don't have to and that also means
01:38 - that if i decide to add something into
01:40 - the vector it's not large enough
01:41 - it will just expand itself i can also
01:43 - have the vector shrink itself so that
01:45 - any of the kind of extra space it's
01:47 - allocating for new elements
01:48 - it no longer is using in our computer's
01:50 - memory anyways it's best if i just show
01:52 - you a few examples
01:53 - so let's say vector we're going to
01:54 - define the type of the vector which in
01:56 - this case is going to be int
01:57 - and then we need the name so in this
01:58 - case say v1 and this is going to be
02:00 - equal to and then just like an array so
02:02 - 1
02:02 - 2 comma 3. so now
02:06 - i've created a vector you can see there
02:08 - are no problems here
02:09 - and well that is how you make a vector
02:11 - so obviously you need to pick one type
02:13 - you put it in the angle brackets then
02:14 - everything in the vector must be
02:16 - that type so there's all kinds of stuff
02:18 - we can do with a vector
02:20 - first thing we can do is we can look at
02:21 - the position of different elements right
02:23 - let's say v1
02:24 - at index 1
02:27 - we can end l here that's going to give
02:29 - us 2 because well that's index 1 of the
02:31 - vector
02:32 - index 2 will give us 3 and there you go
02:35 - now we can also look at the front of the
02:37 - vector
02:38 - so i think i don't know if i need
02:40 - parentheses or not but i believe i can
02:41 - do front
02:42 - and yeah that's gonna give me one and
02:44 - then i think i can do back
02:46 - and that is going to give me the end so
02:48 - to get the start and the end of the
02:49 - vector you can do the front and
02:51 - the back now i have a little cheat sheet
02:53 - on my uh kind of right monitor here
02:55 - because there's so many different ones
02:56 - to go through
02:57 - those are kind of the main ones in terms
02:59 - of accessing elements in the vector so
03:00 - very similar to what you use for an
03:02 - array
03:03 - then we have the size uh this will tell
03:05 - us the number of elements in the vector
03:06 - so three
03:07 - obviously if i change this like four you
03:09 - know now we have four
03:10 - i can also look at what's known as the
03:12 - capacity of the vector
03:13 - now this one i'm going to do some kind
03:15 - of fancy examples to show you how this
03:16 - changes
03:17 - right now the capacity of this vector is
03:19 - four but
03:20 - if i decide to add some elements to this
03:22 - vector which i will show you how to do
03:23 - you'll notice this capacity is not
03:26 - necessarily going to be the same as the
03:27 - size of the vector so the capacity
03:29 - is how many elements it can currently
03:31 - hold and the size is the number of
03:33 - elements it's
03:34 - actually holding so if i decide to add
03:36 - an element to the vector and the way i
03:38 - can do this is v1
03:39 - dot and then push back now what this
03:42 - means
03:43 - is push an element from the back of the
03:45 - vector
03:46 - so this is kind of equivalent to
03:47 - appending an element so adding to the
03:50 - end of the vector is what this really
03:51 - means
03:52 - and i decide to push maybe like nine
03:54 - here let's see if the capacity changes
03:57 - notice that i added one element and my
03:59 - capacity
04:00 - increased not by one it increased
04:02 - actually by what was mapped there by
04:04 - four
04:04 - it doubled the size of the vector so now
04:07 - the capacity is eight so let's actually
04:09 - add a total of eight elements or add
04:11 - a number of elements that we get to
04:13 - eight so if i do this now i push
04:15 - four nines and i push one more then
04:18 - technically our vector
04:19 - should be of size nine right so now if i
04:21 - do this notice that the capacity goes up
04:23 - to sixteen
04:24 - so what's actually happening here is as
04:26 - soon as i add an extra element
04:28 - and let's actually do this here so when
04:30 - we add just eight the capacity stays at
04:32 - eight
04:33 - as soon as i add this ninth element it
04:35 - knows that the vector is not big enough
04:36 - so it doubles the size of the vector
04:38 - right that's kind of the pattern we're
04:39 - running into
04:40 - now we get 16. and so if we print out
04:43 - the capacity
04:44 - and then we print out sorry we don't
04:45 - need two semicolons here we print out
04:48 - the size of the vector
04:50 - you see we're going to get 16 with the
04:51 - size of 9.
04:53 - so hopefully that's clear but that is
04:55 - kind of how the vector works it's just
04:57 - increasing the size of itself as
04:59 - required and it's trying to do it by an
05:01 - amount where
05:02 - it's not going to have to constantly
05:03 - increase the size because increasing the
05:05 - size
05:06 - takes a long time to do there's a few
05:08 - more things that we can do with vectors
05:09 - here so i was pushing from the back
05:11 - but i also can pop from the back or i
05:14 - believe push from the front i'm trying
05:15 - to see if i have that uh there's nothing
05:16 - for push for the front but i'll show you
05:18 - how we can
05:18 - like add something to the front of the
05:20 - vector um
05:22 - let's also see here again just kind of
05:24 - scanning my cheat sheet
05:25 - okay i'll show you pop from back so if i
05:28 - pop from back what i'm doing is removing
05:30 - an element
05:30 - from the back of the vector now when i
05:33 - say
05:34 - pop from back i don't need to give any
05:35 - index or anything and what this will do
05:37 - is
05:38 - return to me the element that was
05:40 - removed and it will remove the very last
05:42 - element from the vector
05:44 - but you'll notice what happens here i'm
05:45 - going to add four elements in
05:48 - and i'm going to pop four elements off
05:50 - and i'm going to print the size and the
05:52 - capacity at kind of each step here
05:54 - so after we add all of the elements on
05:56 - i'm going to look at the capacity and
05:58 - the size
05:59 - i'm then going to pop off four elements
06:01 - and then we'll look at the capacity and
06:02 - the size of the vector
06:03 - so let's do this and notice that we get
06:05 - 8 8 and then we get 8
06:07 - 4. and so the capacity of the vector did
06:10 - not change
06:10 - even though we removed elements from it
06:12 - and so that's something to keep in mind
06:14 - that even if i say pop
06:15 - one more off of here so let's actually
06:16 - copy this line and do this
06:19 - let's see what we get here we get eight
06:21 - eight eight three
06:23 - so the capacity is not going to decrease
06:25 - when you remove elements it's only
06:27 - increasing so if you want to decrease
06:29 - the capacity of a vector
06:31 - and again the reason why you would
06:32 - actually even want to do this is because
06:33 - you don't really want to have a vector
06:35 - that has like one element in it that's
06:36 - using a capacity of
06:37 - say 10 000 or something crazy because in
06:40 - that situation you're just wasting a ton
06:42 - of space your vector is kind of taking
06:43 - up this space in memory
06:45 - and saying okay i have this much room
06:47 - and it's using that space
06:49 - and so if you don't need to be using
06:50 - that space you shouldn't so if you
06:51 - remove a ton of elements
06:53 - from a vector what you can do is shrink
06:55 - that vector and
06:56 - the method to do this is shrink
07:00 - to underscore to underscore fit uh let
07:02 - me make sure that's the correct one i
07:04 - think that's right uh i want to make
07:06 - sure we're not doing this wrong
07:08 - yes uh shrink to fit that is correct so
07:10 - if we run this now
07:11 - uh oops we need a semicolon so let's add
07:13 - that
07:15 - notice that what we get now is 8833 and
07:17 - so it shrank the vector
07:19 - to fit the number of elements that were
07:21 - in it so the capacity of the vector is
07:23 - equal to its size
07:25 - after we say shrink to fit and so those
07:27 - are kind of the core methods for the
07:29 - vector
07:30 - now the few uh the next things i'll show
07:32 - you sorry is to insert and erase
07:34 - elements from the vector
07:35 - so popping from back was pretty
07:36 - straightforward we were removing an
07:38 - element from the end of the vector
07:40 - and so we would have removed these uh
07:41 - four nines and then i guess actually the
07:43 - four after we removed all of that
07:45 - so now how do we insert and kind of
07:47 - erase specific elements so let's erase
07:48 - all of this
07:50 - so we will continue in one second but i
07:51 - need to quickly thank the sponsor of
07:53 - this video and the series which is algo
07:55 - expert
07:56 - algo expert is the best platform to use
07:57 - when preparing for your software
07:59 - engineering coding interviews they have
08:00 - over 150 coding interview questions on
08:02 - the platform
08:03 - which are taught by the best instructors
08:05 - and curated such that you are not
08:07 - wasting your time going through a ton of
08:08 - problems that you will never be asked in
08:10 - a coding interview
08:11 - anyways check out algo expert from the
08:12 - link in the description and use the
08:14 - discount code tech with tim for a
08:15 - discount on the platform
08:17 - okay so the next thing i'm going to show
08:18 - you is how to insert and erase elements
08:21 - now this is not necessarily super
08:23 - intuitive to actually be able to
08:25 - insert an element you need a pointer to
08:27 - the position of the element that you
08:29 - want to insert this element before
08:32 - and so let's kind of look at this here
08:33 - what i can say is
08:35 - v1 dot insert and then if i wanted to
08:38 - insert at the very beginning i would say
08:40 - v1 dot begin and then i would say what i
08:43 - want to insert which is 5
08:45 - and now if i see out v1 at index 0
08:49 - let's just end l here and i run this
08:52 - notice that we get 5.
08:53 - so we inserted at the very beginning
08:55 - right the pointer to the kind of first
08:57 - element here of the element 5. now if we
09:00 - do this again and we do 7
09:01 - this will now insert before 5. so now
09:04 - notice that we get 7 printing out there
09:06 - now if we say v1 dot begin and maybe we
09:08 - add 1 to this well let's just see what's
09:10 - going to happen now
09:12 - and yeah let's see what we get when we
09:14 - print out v1 at index 0.
09:16 - notice that we get 1 but if we print out
09:18 - v1 at index 1
09:19 - we are getting 5 the element that we
09:22 - inserted at
09:23 - position one so before the element at
09:26 - position one
09:27 - which means that this element will be at
09:28 - whatever position we define here
09:30 - and so that's kind of how this works now
09:32 - this is not really the best way to go
09:34 - about doing this like v1.begin
09:36 - plus one i'm actually i haven't tested
09:38 - if what i'm about to do is gonna work
09:40 - but let's try this
09:41 - let's try v1 at position
09:44 - and let's go with position maybe yeah we
09:47 - can actually we can do zero
09:49 - and let's see if that actually works
09:51 - here
09:52 - i don't think that's going to work yet
09:53 - no that doesn't work but if i try an
09:55 - ampersand here and do that yeah okay so
09:58 - it still doesn't work so we need to do a
10:00 - dot begin and then we can kind of add to
10:02 - dot begin
10:03 - to figure out where we actually want to
10:04 - insert this element now unfortunately
10:07 - i don't really like how this works i
10:08 - wish that there was a way that we could
10:10 - do it just based on the index
10:11 - maybe there is a way to do it just based
10:12 - on the index if there is let me know
10:14 - please in the comments
10:16 - but regardless i'm going to show you now
10:17 - how we can erase so to erase is a very
10:19 - similar thing
10:20 - what we're going to do is say b1 dot
10:22 - arrays and then obviously we don't need
10:24 - to like put an element if we're going to
10:26 - erase one we just need to put what
10:27 - element we want to erase so in this case
10:29 - we'll say v1
10:30 - dot begin and then this will erase the
10:33 - element that's at this position to the
10:34 - very first position so if i do this
10:37 - notice that we now get two printing out
10:39 - because we well we erased
10:40 - one okay so that's kind of all the core
10:42 - methods and functions i want to show you
10:44 - relating to the vectors the next thing
10:46 - i'm going to show you is how we iterate
10:47 - through a vector
10:48 - so i'm going to get rid of this erase
10:50 - here and i'm just going to show you how
10:51 - we can do this there's a few different
10:52 - ways the first way is to do something
10:53 - like into i is equal to 0.
10:55 - i is less than v1.size notice i'm using
10:59 - the size not the capacity that's very
11:00 - important
11:01 - plus plus i and then i do something like
11:04 - co
11:05 - to be v1 at index i
11:09 - and then end l okay so if we run this we
11:12 - get one two three four
11:13 - as we would expect now that's fine we
11:15 - can go with that method or
11:16 - what we can do is say auto itr is equal
11:20 - to
11:20 - v1 dot begin we can say itr
11:24 - does not equal v1 dot end and
11:28 - then plus plus itr and let's see what we
11:31 - get here
11:32 - if we say c out and we see out itr
11:36 - now let's give a test here let's run
11:38 - this notice we're getting an error
11:40 - no match for operator blah blah let's
11:41 - see what happens now if we do an
11:43 - asterisk
11:44 - so if we do an asterisk notice how now
11:45 - we're actually getting the proper
11:47 - elements because we had to de-reference
11:49 - this pointer
11:50 - so this actually works all right so
11:52 - that's another way you can do this
11:54 - again this gives us all the elements now
11:55 - let's just see what happens if i decide
11:57 - to insert an element in this vector
11:59 - so i say maybe after we do the first one
12:02 - v1
12:03 - dot insert let's insert at the beginning
12:07 - so v1 dot begin let's insert
12:10 - 10. now let's run this with the iterator
12:13 - we need a semicolon okay now notice we
12:17 - get 10
12:17 - 1 2 3 4 and so all is working all is
12:20 - fine so yeah that's how you iterate
12:22 - through a vector and really there's not
12:24 - much more for me to show you there is a
12:26 - lot of other methods and stuff
12:28 - involved with a vector that you can use
12:30 - with a vector these are kind of the core
12:32 - ones
12:32 - again this is what you would use when
12:34 - you need a kind of dynamically sized
12:35 - structure that can increase or decrease
12:37 - its size
12:38 - just be careful when you're using a
12:39 - vector because if you remove a ton of
12:41 - elements from a vector
12:42 - you could be in a situation where well
12:44 - you have just
12:45 - a ton of space being used by this vector
12:47 - and well it only really needs to soar
12:49 - like two or three elements
12:50 - so anyways with that said i hope you
12:52 - guys enjoyed if you did make sure to
12:53 - leave a like subscribe to the channel i
12:54 - will see you in another youtube video

Cleaned transcript:

hello everybody and welcome to another c plus plus tutorial for beginners in today's video i'll be covering vectors now a vector is a dynamically resizable array this means that the vector can change its size so unlike an array that is a set static size that cannot change if you try to add more elements into a vector and it is not large enough it will just increase itself now there's a lot of complexities involved with that but anyways we'll talk about them in this video all right so the first thing we're going to do here is include vector so we're going to say include if i can spell include correctly not happening very well here we will include vector and just a note here if you're ever noticing that for some reason i'm using some data type or object that's not working for you make sure you have the included statement right so previously i think we used maps and you needed to include that we had use some other things you need to include as well and sometimes like stuffs kind of works but then doesn't work and anyways just always check the include statement because that's probably like a pretty easy fix to a lot of problems you guys might be running into anyways what is a vector as i was saying a vector really is just like an array except it has a lot of extra functionality so it is kind of wrapping an array and allowing this array to dynamically change its size and when i say dynamically change its size as i was kind of stating in the introduction this means that we don't need to know how big the vector is when we first create it i don't need to define that it's only going to have five elements in or 20 elements or whatever i can do that there's options to specify how big the vector actually is but i don't have to and that also means that if i decide to add something into the vector it's not large enough it will just expand itself i can also have the vector shrink itself so that any of the kind of extra space it's allocating for new elements it no longer is using in our computer's memory anyways it's best if i just show you a few examples so let's say vector we're going to define the type of the vector which in this case is going to be int and then we need the name so in this case say v1 and this is going to be equal to and then just like an array so 1 2 comma 3. so now i've created a vector you can see there are no problems here and well that is how you make a vector so obviously you need to pick one type you put it in the angle brackets then everything in the vector must be that type so there's all kinds of stuff we can do with a vector first thing we can do is we can look at the position of different elements right let's say v1 at index 1 we can end l here that's going to give us 2 because well that's index 1 of the vector index 2 will give us 3 and there you go now we can also look at the front of the vector so i think i don't know if i need parentheses or not but i believe i can do front and yeah that's gonna give me one and then i think i can do back and that is going to give me the end so to get the start and the end of the vector you can do the front and the back now i have a little cheat sheet on my uh kind of right monitor here because there's so many different ones to go through those are kind of the main ones in terms of accessing elements in the vector so very similar to what you use for an array then we have the size uh this will tell us the number of elements in the vector so three obviously if i change this like four you know now we have four i can also look at what's known as the capacity of the vector now this one i'm going to do some kind of fancy examples to show you how this changes right now the capacity of this vector is four but if i decide to add some elements to this vector which i will show you how to do you'll notice this capacity is not necessarily going to be the same as the size of the vector so the capacity is how many elements it can currently hold and the size is the number of elements it's actually holding so if i decide to add an element to the vector and the way i can do this is v1 dot and then push back now what this means is push an element from the back of the vector so this is kind of equivalent to appending an element so adding to the end of the vector is what this really means and i decide to push maybe like nine here let's see if the capacity changes notice that i added one element and my capacity increased not by one it increased actually by what was mapped there by four it doubled the size of the vector so now the capacity is eight so let's actually add a total of eight elements or add a number of elements that we get to eight so if i do this now i push four nines and i push one more then technically our vector should be of size nine right so now if i do this notice that the capacity goes up to sixteen so what's actually happening here is as soon as i add an extra element and let's actually do this here so when we add just eight the capacity stays at eight as soon as i add this ninth element it knows that the vector is not big enough so it doubles the size of the vector right that's kind of the pattern we're running into now we get 16. and so if we print out the capacity and then we print out sorry we don't need two semicolons here we print out the size of the vector you see we're going to get 16 with the size of 9. so hopefully that's clear but that is kind of how the vector works it's just increasing the size of itself as required and it's trying to do it by an amount where it's not going to have to constantly increase the size because increasing the size takes a long time to do there's a few more things that we can do with vectors here so i was pushing from the back but i also can pop from the back or i believe push from the front i'm trying to see if i have that uh there's nothing for push for the front but i'll show you how we can like add something to the front of the vector um let's also see here again just kind of scanning my cheat sheet okay i'll show you pop from back so if i pop from back what i'm doing is removing an element from the back of the vector now when i say pop from back i don't need to give any index or anything and what this will do is return to me the element that was removed and it will remove the very last element from the vector but you'll notice what happens here i'm going to add four elements in and i'm going to pop four elements off and i'm going to print the size and the capacity at kind of each step here so after we add all of the elements on i'm going to look at the capacity and the size i'm then going to pop off four elements and then we'll look at the capacity and the size of the vector so let's do this and notice that we get 8 8 and then we get 8 4. and so the capacity of the vector did not change even though we removed elements from it and so that's something to keep in mind that even if i say pop one more off of here so let's actually copy this line and do this let's see what we get here we get eight eight eight three so the capacity is not going to decrease when you remove elements it's only increasing so if you want to decrease the capacity of a vector and again the reason why you would actually even want to do this is because you don't really want to have a vector that has like one element in it that's using a capacity of say 10 000 or something crazy because in that situation you're just wasting a ton of space your vector is kind of taking up this space in memory and saying okay i have this much room and it's using that space and so if you don't need to be using that space you shouldn't so if you remove a ton of elements from a vector what you can do is shrink that vector and the method to do this is shrink to underscore to underscore fit uh let me make sure that's the correct one i think that's right uh i want to make sure we're not doing this wrong yes uh shrink to fit that is correct so if we run this now uh oops we need a semicolon so let's add that notice that what we get now is 8833 and so it shrank the vector to fit the number of elements that were in it so the capacity of the vector is equal to its size after we say shrink to fit and so those are kind of the core methods for the vector now the few uh the next things i'll show you sorry is to insert and erase elements from the vector so popping from back was pretty straightforward we were removing an element from the end of the vector and so we would have removed these uh four nines and then i guess actually the four after we removed all of that so now how do we insert and kind of erase specific elements so let's erase all of this so we will continue in one second but i need to quickly thank the sponsor of this video and the series which is algo expert algo expert is the best platform to use when preparing for your software engineering coding interviews they have over 150 coding interview questions on the platform which are taught by the best instructors and curated such that you are not wasting your time going through a ton of problems that you will never be asked in a coding interview anyways check out algo expert from the link in the description and use the discount code tech with tim for a discount on the platform okay so the next thing i'm going to show you is how to insert and erase elements now this is not necessarily super intuitive to actually be able to insert an element you need a pointer to the position of the element that you want to insert this element before and so let's kind of look at this here what i can say is v1 dot insert and then if i wanted to insert at the very beginning i would say v1 dot begin and then i would say what i want to insert which is 5 and now if i see out v1 at index 0 let's just end l here and i run this notice that we get 5. so we inserted at the very beginning right the pointer to the kind of first element here of the element 5. now if we do this again and we do 7 this will now insert before 5. so now notice that we get 7 printing out there now if we say v1 dot begin and maybe we add 1 to this well let's just see what's going to happen now and yeah let's see what we get when we print out v1 at index 0. notice that we get 1 but if we print out v1 at index 1 we are getting 5 the element that we inserted at position one so before the element at position one which means that this element will be at whatever position we define here and so that's kind of how this works now this is not really the best way to go about doing this like v1.begin plus one i'm actually i haven't tested if what i'm about to do is gonna work but let's try this let's try v1 at position and let's go with position maybe yeah we can actually we can do zero and let's see if that actually works here i don't think that's going to work yet no that doesn't work but if i try an ampersand here and do that yeah okay so it still doesn't work so we need to do a dot begin and then we can kind of add to dot begin to figure out where we actually want to insert this element now unfortunately i don't really like how this works i wish that there was a way that we could do it just based on the index maybe there is a way to do it just based on the index if there is let me know please in the comments but regardless i'm going to show you now how we can erase so to erase is a very similar thing what we're going to do is say b1 dot arrays and then obviously we don't need to like put an element if we're going to erase one we just need to put what element we want to erase so in this case we'll say v1 dot begin and then this will erase the element that's at this position to the very first position so if i do this notice that we now get two printing out because we well we erased one okay so that's kind of all the core methods and functions i want to show you relating to the vectors the next thing i'm going to show you is how we iterate through a vector so i'm going to get rid of this erase here and i'm just going to show you how we can do this there's a few different ways the first way is to do something like into i is equal to 0. i is less than v1.size notice i'm using the size not the capacity that's very important plus plus i and then i do something like co to be v1 at index i and then end l okay so if we run this we get one two three four as we would expect now that's fine we can go with that method or what we can do is say auto itr is equal to v1 dot begin we can say itr does not equal v1 dot end and then plus plus itr and let's see what we get here if we say c out and we see out itr now let's give a test here let's run this notice we're getting an error no match for operator blah blah let's see what happens now if we do an asterisk so if we do an asterisk notice how now we're actually getting the proper elements because we had to dereference this pointer so this actually works all right so that's another way you can do this again this gives us all the elements now let's just see what happens if i decide to insert an element in this vector so i say maybe after we do the first one v1 dot insert let's insert at the beginning so v1 dot begin let's insert 10. now let's run this with the iterator we need a semicolon okay now notice we get 10 1 2 3 4 and so all is working all is fine so yeah that's how you iterate through a vector and really there's not much more for me to show you there is a lot of other methods and stuff involved with a vector that you can use with a vector these are kind of the core ones again this is what you would use when you need a kind of dynamically sized structure that can increase or decrease its size just be careful when you're using a vector because if you remove a ton of elements from a vector you could be in a situation where well you have just a ton of space being used by this vector and well it only really needs to soar like two or three elements so anyways with that said i hope you guys enjoyed if you did make sure to leave a like subscribe to the channel i will see you in another youtube video
