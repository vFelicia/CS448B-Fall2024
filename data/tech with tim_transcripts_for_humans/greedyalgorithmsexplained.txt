With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - youtube video so in today's video i'm
00:12 - going to be explaining greedy algorithms
00:15 - now this is really meant to just be an
00:16 - introduction to this topic so in this
00:18 - video i will explain to you what a
00:20 - greedy algorithm is how you can go about
00:22 - creating a greedy algorithm and then
00:24 - show you a few examples of it but with
00:26 - that said if you want to learn more and
00:28 - practice with greedy algorithms what you
00:30 - can do is check out the sponsor of this
00:32 - video before we get started i need to
00:34 - thank the sponsor of this video which is
00:36 - alcoexpert algo expert is the best
00:39 - platform to use from preparing for your
00:40 - software engineering coding interviews
00:42 - and has the highest quality coding
00:44 - interview practice questions with 160
00:46 - practice questions detailed solutions in
00:49 - nine of the most popular programming
00:50 - languages a feature-packed browser-based
00:53 - coding environment extensive test suites
00:55 - and conceptual overviews and code
00:57 - walkthroughs for each and every problem
00:59 - algo expert is the best resource to use
01:01 - to ace your coding interviews algo
01:03 - expert also has a data structures crash
01:05 - course coding interview assessments and
01:07 - a mock interviews feature i can highly
01:10 - recommend algo expert as a former
01:11 - customer myself and now an official
01:13 - instructor on the platform get started
01:16 - using algo expert today by clicking the
01:18 - link in the description and using the
01:19 - code tech with tim for a discount on the
01:21 - platform so i'm here on my drawing
01:24 - tablet and i'm going to start explaining
01:25 - to you what greedy algorithms are now
01:27 - before i do that i will note that i do
01:29 - have very messy handwriting so please
01:31 - excuse me i'll try my best to make
01:33 - everything as neat as possible in this
01:34 - video with that said what is a greedy
01:37 - algorithm well a greedy algorithm is
01:40 - really an algorithm that makes a greedy
01:42 - choice you can think of this as kind of
01:43 - an optimal choice at every single step
01:46 - in the solution or in the problem now
01:49 - the greedy choice is defined by some
01:51 - rule that rule could be select the
01:53 - largest number select the smallest
01:55 - number select the element that has a
01:57 - certain property whatever you're making
01:59 - some definitive choice some greedy
02:01 - choice at every step in the algorithm
02:04 - now greedy algorithms can be very
02:05 - complicated they can also be quite
02:06 - simple to give you an explanation or
02:09 - kind of an example of a greedy algorithm
02:11 - let me kind of introduce a problem to
02:12 - you right here so let's say for this
02:14 - problem we're given some array and this
02:16 - array is filled with integers so i have
02:18 - 3 4 negative 1 2
02:21 - negative 3
02:22 - and 0 and then maybe we're given some
02:24 - integer n we can say here that n is
02:27 - equal to 4. now what this problem is
02:29 - asking us to do is to find the n numbers
02:32 - in this array that equal the largest sum
02:36 - now if that's the case the greedy
02:38 - algorithm approach to solving this
02:39 - problem is to simply select the largest
02:42 - number at every single step until we've
02:45 - selected n numbers and this should
02:47 - hopefully solve the problem for us so if
02:49 - we apply the greedy algorithm approach
02:51 - we're selecting the largest number at
02:53 - every step until we've hit four numbers
02:56 - so what we do is we start by selecting
02:58 - four because this is the current largest
03:00 - number so we select four then we select
03:03 - 3 because 4 was already selected so now
03:05 - we have 3 and 4.
03:07 - then we select 2
03:10 - and then finally we select 0 and what we
03:13 - get is 4 3 2 and 1 which means that we
03:17 - have an answer of 10.
03:19 - so that's the largest sum that we can
03:21 - create by selecting four numbers and
03:23 - this would actually be our answer here
03:25 - we would return 4 3 2 and 1. so that's
03:28 - an example of a very very simple greedy
03:30 - algorithm where all we did was select
03:32 - the largest number at each step and well
03:34 - that led us to the solution so i know
03:37 - the example i just showed you is
03:38 - relatively trivial but it's the best way
03:40 - that i can show you what a greedy
03:42 - algorithm is without getting into any
03:44 - super formal explanations so as you saw
03:47 - there a greedy algorithm is really just
03:49 - an algorithm that makes an optimal or
03:51 - greedy choice at every single step and
03:54 - eventually all of those choices lead to
03:56 - an optimal solution at the end of the
03:58 - program now before we get into some more
04:00 - advanced examples here i'm going to give
04:02 - you two kind of formal definitions or
04:05 - formal properties of when you can
04:06 - actually use a greedy algorithm to solve
04:08 - a problem so if the following two
04:10 - properties that i'm going to state are
04:11 - true you can use a greedy algorithm and
04:13 - you'll be able to solve the problem so
04:15 - the first property is called the greedy
04:17 - choice property and what this says is
04:19 - that a global optimal solution can be
04:22 - reached by choosing the optimal choice
04:24 - at each step and then the second
04:26 - property that needs to be true as well
04:28 - is the optimal substructure property
04:31 - which says a problem has an optimal
04:33 - substructure if an optimal solution to
04:35 - the entire problem contains the optimal
04:38 - solutions to the subproblems so to kind
04:41 - of break that down a little bit what
04:43 - that means is every time you make a
04:44 - choice you can kind of treat that as a
04:46 - sub problem now an optimal substructure
04:49 - exists if all of those sub problems
04:52 - allow you to solve the larger problem as
04:54 - a whole so really it's saying if all of
04:56 - the solutions to these sub problems
04:59 - combined allow you to have a full
05:01 - optimal solution to the entire problem
05:04 - then you're good you can go ahead and
05:05 - use a greedy algorithm so i'll leave
05:07 - those definitions on the screen so that
05:08 - you can read them i'll give you one more
05:10 - kind of formal definition here before we
05:12 - get into another example this says
05:14 - greedy algorithms work on problems for
05:16 - which it is true that at every step
05:18 - there is a choice that is optimal for
05:20 - the problem up to that step and after
05:23 - the last step the algorithm produces the
05:25 - optimal solution of the complete problem
05:28 - so that makes it seem a little bit more
05:29 - confusing than it really is what i'm
05:31 - going to do now is move on to another
05:32 - example and show you how we apply a
05:34 - greedy algorithm to it so in front of me
05:36 - i have a very famous problem which is
05:38 - known as the knapsack problem now what
05:41 - i'm going to do is introduce a variation
05:43 - of this problem to you and then explain
05:45 - how a greedy algorithm can be used to
05:47 - solve this then i'm going to go back to
05:49 - kind of the original problem and show
05:50 - you how the greedy algorithm fails so
05:53 - let me introduce what this problem is so
05:55 - in this problem you have a backpack that
05:57 - has a specific capacity in this case the
06:00 - capacity is 25. now that denotes kind of
06:02 - the size in total of items that you can
06:05 - hold in the backpack some people call it
06:07 - weight you can call whatever you want
06:09 - but that means that we can only store at
06:11 - most 25 kind of you know units of items
06:14 - in our backpack and what our goal is is
06:17 - to fill the backpack with as much value
06:19 - as possible without going over its
06:21 - capacity so we can see that each item
06:24 - has a size here and has a value so if
06:27 - we're looking at item 0 it has a size of
06:29 - 22 and it has a value of 19.
06:33 - we look at item 1 we have a size of 10
06:36 - and a value of 9. and so if we were to
06:38 - select say item 1 that means that we
06:40 - would then be left with 15 units of
06:43 - capacity in our backpack we would have a
06:45 - total value of 9. so again the goal is
06:48 - to maximize the value without going over
06:50 - the capacity but you can be at the
06:52 - capacity so you could use 25 units of
06:55 - space in the backpack so the question
06:58 - here is how do we use a greedy algorithm
07:00 - to solve this problem and actually i
07:02 - need to introduce the variation of this
07:03 - problem which is you can select a
07:06 - fractional amount of any of these items
07:09 - so what that means is that let's say we
07:11 - want to select item one but we don't
07:13 - have enough room for the entirety of
07:15 - item one we can select half of item one
07:18 - so if we were going to select half of
07:20 - item one then what we would do is you
07:22 - know say 0.5 times 10 that's how much
07:24 - weight we're going to have for half of
07:26 - item 1 and then 0.5
07:29 - times nine that's how much value we're
07:31 - gonna get if we select a fractional
07:32 - amount of item one now you don't have to
07:34 - just select half you could select 99 of
07:37 - it you could select one percent of it
07:39 - you could select ten percent of it
07:40 - whatever you want you can select a
07:42 - fractional amount of an item so my
07:44 - question is how do we use a greedy
07:46 - algorithm to solve this fractional
07:48 - backpack problem well the first thing
07:50 - that we should consider
07:52 - is can we solve this problem by just
07:54 - looking at one of these columns here so
07:56 - just the value or just the size can i
07:59 - select items that just have the largest
08:01 - value can i select items that have the
08:04 - smallest size what is kind of the grady
08:06 - approach so let's just see what happens
08:08 - if we try to select items that have the
08:10 - smallest size first and see if that
08:12 - actually gives us an optimal solution so
08:15 - at each step in our algorithm we're
08:17 - going to select the remaining item that
08:19 - has the smallest size that's kind of our
08:21 - greedy step and so the first item that
08:23 - we're going to select here is going to
08:24 - be item 3 because it has a size of 7.
08:28 - so when we do that we see that our
08:29 - current size is going to be 7 and our
08:32 - current value is going to be 6 and then
08:34 - we can cross this off because we've used
08:35 - it
08:36 - okay the next greedy step is we are
08:38 - going to select the size of nine so we
08:41 - select nine that gives us a total size
08:44 - of 16 and then our value is now 15
08:46 - because well
08:47 - 9 plus 6 is 15
08:50 - okay and then we're going to select our
08:51 - next item the next item has a size of
08:54 - 10. and when we select this item we see
08:56 - that this is going to lead us to go over
08:58 - capacity to 26 so what we need to do is
09:01 - select a fractional amount of this item
09:03 - which means instead of selecting all 10
09:05 - we're going to select 90 of this right
09:07 - so we'll select 9 of 10 which means we
09:10 - are going to get
09:11 - now a capacity of 25 and then what's 90
09:15 - of 9 well let me just use the calculator
09:17 - to get that i probably should have been
09:19 - able to solve that in my head but that's
09:20 - going to give us 8.1 value which means
09:23 - we're going to have a total value of
09:25 - 23.1
09:27 - perfect so there you go we now have a
09:29 - total capacity of 25 a value of 23.1
09:33 - and that's kind of the answer we got
09:35 - when we selected items that had the
09:37 - smallest size that was the greedy choice
09:39 - that we made so let me just kind of move
09:41 - this over to the side here so we
09:42 - remember this value and now let's try it
09:45 - in the other way all right so now we're
09:46 - going to perform the greedy algorithm
09:48 - but this time choosing the largest value
09:50 - instead of the smallest size so if i'm
09:52 - selecting the largest value that means
09:54 - i'm going to select item 0. so we have a
09:57 - size of 22 and a value of 19.
10:02 - then i'm going to be choosing between
10:03 - item one and item two because they have
10:05 - the same largest value since this has a
10:08 - smaller size item two i'm going to
10:10 - select this one and so that means that
10:12 - if i were to select the entire item i
10:14 - would have a weight of 31. obviously i
10:17 - can't do that because that goes over my
10:18 - capacity and so instead i need to select
10:21 - 33
10:22 - of this item so that means that my
10:25 - capacity is going to go to 25. 33 of 9
10:27 - is clearly 3. same thing here that means
10:30 - that i am going to get
10:32 - an additional 2 value here and that is
10:35 - going to lead me to 22. so let's take
10:38 - this and store this down here as well so
10:40 - the two answers we got were 23.1 and 22.
10:43 - now what we can say right now is okay
10:45 - well clearly the other approach
10:46 - selecting the smallest size worked
10:48 - better for this example but is this
10:50 - actually the optimal answer are either
10:52 - of these the optimal answer to this
10:54 - problem and well the answer to that is
10:57 - no there's actually a better way to
10:58 - solve this still using a greedy approach
11:01 - but it requires a little bit of thinking
11:03 - so the purpose of me showing you those
11:04 - two methods there was to illustrate that
11:06 - in a lot of examples you can use a
11:08 - greedy algorithm but you have to make
11:10 - sure you're really thinking about what
11:12 - your greedy criteria is how you're
11:14 - selecting the optimal choice at every
11:17 - single step now for this problem here
11:19 - you have to remember that we can select
11:21 - a fractional amount of all of these
11:23 - items and so really what we should do is
11:26 - find the items that have the best value
11:29 - to size ratio select the largest
11:32 - fractions of those items that we can and
11:34 - then continue on throughout the yellow
11:36 - group so i'll show you what i mean by
11:38 - that but let's just have a look here so
11:39 - what i'm going to do is make another
11:41 - column and i'm going to call this value
11:44 - over size now the point of this is that
11:47 - the items that have the largest value
11:49 - over size ratio are the best items for
11:52 - me to select
11:53 - so quite simply if we're looking at this
11:54 - right here nine size gives me nine value
11:57 - that means my value to size ratio is one
12:00 - so for every extra capacity i add or
12:03 - remove i guess from my backpack i get
12:05 - one value whereas if we're looking at
12:07 - say 22 and 19 i need to pull out my
12:09 - calculator for this but 19 divided by 22
12:12 - is 0.8636
12:16 - if we're looking at
12:18 - 9 and 10 we're going to get 0.9 and if
12:21 - we're looking at 6 and 7 then we're
12:24 - going to get 0.857
12:28 - so here we can see that the best item to
12:30 - select in terms of the value to size
12:32 - ratio is going to be item 2 and then
12:35 - we're going to have item 1 and then it's
12:37 - going to be item 0 followed by item 3.
12:41 - so now what our new greedy algorithm
12:43 - should do here the correct greedy
12:44 - algorithm is at each step in our
12:46 - algorithm we should select the item that
12:48 - has the highest value over size ratio
12:51 - and take as much of that item as we
12:53 - possibly can so in this case we see that
12:56 - this is our best item so we're going to
12:58 - take all of item two so i can just i
13:01 - guess write
13:02 - what our weight and our size is going to
13:04 - be over here so that's item 2 we're
13:06 - going to select all of that
13:08 - then this guy is done so what's the next
13:10 - one well we want to select item one so
13:13 - we're going to select all of item 1
13:14 - which means we're going to get now a
13:15 - capacity of 19 and we're going to have a
13:18 - value of 18 so this guy's done now and
13:21 - then this is slightly better than this
13:24 - so we're going to select as much of
13:26 - item zero as we possibly can so we need
13:28 - to select kind of six size of item zero
13:32 - so let me do some math here so we're
13:33 - gonna select approximately 27
13:36 - of item zero so 27
13:39 - times 19 gives us a value of
13:43 - 5.18 which means that we're going to
13:45 - have here 23. if i can do this correctly
13:50 - 23.18 like that and then we're going to
13:53 - have a capacity of 25. so we did
13:57 - actually end up with marginally more
13:59 - value by using this different greedy
14:02 - approach that i just showed you right
14:04 - here now a lot of you might think that
14:05 - this is a calculation error this is not
14:07 - there is actually slightly more value
14:10 - in doing the method that i just showed
14:12 - you here so selecting a fraction of this
14:15 - specifically 27 of it now in a lot of
14:18 - other examples you'll see that this
14:19 - difference would be much larger the
14:21 - whole point of this was just to
14:22 - illustrate to you that you need to be
14:24 - very careful in what you actually use as
14:26 - your greedy criteria it's not as simple
14:29 - as just looking at one category in this
14:31 - case we combined the categories and
14:33 - intuitively this does make a lot of
14:36 - sense right to select the highest
14:38 - fraction of items that we can that have
14:40 - the largest value over size right or
14:43 - value to size ratio so that's the
14:46 - example that i wanted to show you on how
14:48 - you can actually use a greedy algorithm
14:49 - to solve a problem i'm not going to
14:51 - write the code for this you can figure
14:52 - that out on your own but now what i want
14:54 - to do is change the variation of this
14:56 - problem and show you how a greedy
14:58 - algorithm might actually fail all right
15:00 - so i've cleared the screen and now what
15:01 - i want to do is change the variation of
15:03 - this problem and show you how the greedy
15:05 - algorithm will fail when we change the
15:07 - problem just slightly so now the problem
15:10 - is the exact same you want to maximize
15:12 - the value without going over the
15:13 - capacity however you cannot select a
15:16 - fractional amount of an item so if we
15:19 - try to perform the greedy algorithm we
15:20 - did in the last step where we select the
15:22 - item that has the largest value to size
15:26 - ratio you're going to see that we
15:28 - quickly fail and we do not get the
15:30 - correct amount we do not get the largest
15:32 - value we possibly can so let me prove it
15:34 - to you this was the item that had the
15:36 - best us value to size ratio
15:39 - second best
15:40 - third best and fourth best
15:42 - so if we select this item first
15:44 - we get nine and nine
15:46 - and then we select this item we get a
15:49 - total capacity of 19
15:51 - and then we get a value of 18 and now we
15:53 - try to select the next item and we see
15:55 - we cannot select another item because
15:57 - there is no item that has a size small
15:59 - enough that we can fit in the bag with a
16:02 - capacity of 19 already being used and so
16:05 - our value from the greedy algorithm
16:07 - approach is 18. so obviously this means
16:10 - that the greedy algorithm fails in this
16:11 - example and cannot deliver an optimal
16:14 - solution and one of the reasons it can't
16:16 - do that is because the choice it makes
16:18 - in the current step actually affects
16:20 - what choices it's going to have to make
16:22 - in the future because we have this
16:24 - capacity constraint and so we really
16:27 - would be better off using something like
16:28 - dynamic programming here to solve this
16:30 - problem
16:31 - rather than a greedy algorithm in fact a
16:33 - greedy algorithm just will not give us
16:36 - the correct result unless we're lucky
16:37 - and the greedy algorithm choices end up
16:40 - lining up with what the actual optimal
16:42 - value should be so with that i think i'm
16:44 - going to end the video here hopefully
16:47 - this gave you a quick introduction to
16:48 - what greedy algorithms are again they're
16:50 - pretty straightforward but they're used
16:52 - in all kinds of different algorithms for
16:54 - example if you're talking about
16:55 - dijkstra's algorithm or the minimum
16:57 - spanning tree algorithm where a lot of
16:59 - other graph algorithms actually may use
17:02 - a version of a greedy algorithm they
17:04 - have other types of kind of algorithms
17:06 - in them but they make a greedy choice at
17:08 - every single step to help solve the
17:10 - problem if you're talking about
17:12 - dijkstra's algorithm at every single
17:13 - step it's choosing the node that
17:15 - currently has the shortest distance to
17:17 - get to it and then it's examining from
17:19 - that note now might be butchering that a
17:21 - little bit it's been a while since i
17:22 - looked at dijkstra's but that is an
17:24 - example of an algorithm that implements
17:26 - a greedy choice and kind of is a greedy
17:28 - algorithm based on the definition of
17:30 - greedy algorithms anyways i hope you
17:32 - guys enjoyed i hope you learned
17:33 - something if you did make sure to leave
17:35 - a like subscribe to the channel i will
17:37 - see you in another youtube video
17:39 - [Music]
17:47 - you

Cleaned transcript:

hello everybody and welcome to another youtube video so in today's video i'm going to be explaining greedy algorithms now this is really meant to just be an introduction to this topic so in this video i will explain to you what a greedy algorithm is how you can go about creating a greedy algorithm and then show you a few examples of it but with that said if you want to learn more and practice with greedy algorithms what you can do is check out the sponsor of this video before we get started i need to thank the sponsor of this video which is alcoexpert algo expert is the best platform to use from preparing for your software engineering coding interviews and has the highest quality coding interview practice questions with 160 practice questions detailed solutions in nine of the most popular programming languages a featurepacked browserbased coding environment extensive test suites and conceptual overviews and code walkthroughs for each and every problem algo expert is the best resource to use to ace your coding interviews algo expert also has a data structures crash course coding interview assessments and a mock interviews feature i can highly recommend algo expert as a former customer myself and now an official instructor on the platform get started using algo expert today by clicking the link in the description and using the code tech with tim for a discount on the platform so i'm here on my drawing tablet and i'm going to start explaining to you what greedy algorithms are now before i do that i will note that i do have very messy handwriting so please excuse me i'll try my best to make everything as neat as possible in this video with that said what is a greedy algorithm well a greedy algorithm is really an algorithm that makes a greedy choice you can think of this as kind of an optimal choice at every single step in the solution or in the problem now the greedy choice is defined by some rule that rule could be select the largest number select the smallest number select the element that has a certain property whatever you're making some definitive choice some greedy choice at every step in the algorithm now greedy algorithms can be very complicated they can also be quite simple to give you an explanation or kind of an example of a greedy algorithm let me kind of introduce a problem to you right here so let's say for this problem we're given some array and this array is filled with integers so i have 3 4 negative 1 2 negative 3 and 0 and then maybe we're given some integer n we can say here that n is equal to 4. now what this problem is asking us to do is to find the n numbers in this array that equal the largest sum now if that's the case the greedy algorithm approach to solving this problem is to simply select the largest number at every single step until we've selected n numbers and this should hopefully solve the problem for us so if we apply the greedy algorithm approach we're selecting the largest number at every step until we've hit four numbers so what we do is we start by selecting four because this is the current largest number so we select four then we select 3 because 4 was already selected so now we have 3 and 4. then we select 2 and then finally we select 0 and what we get is 4 3 2 and 1 which means that we have an answer of 10. so that's the largest sum that we can create by selecting four numbers and this would actually be our answer here we would return 4 3 2 and 1. so that's an example of a very very simple greedy algorithm where all we did was select the largest number at each step and well that led us to the solution so i know the example i just showed you is relatively trivial but it's the best way that i can show you what a greedy algorithm is without getting into any super formal explanations so as you saw there a greedy algorithm is really just an algorithm that makes an optimal or greedy choice at every single step and eventually all of those choices lead to an optimal solution at the end of the program now before we get into some more advanced examples here i'm going to give you two kind of formal definitions or formal properties of when you can actually use a greedy algorithm to solve a problem so if the following two properties that i'm going to state are true you can use a greedy algorithm and you'll be able to solve the problem so the first property is called the greedy choice property and what this says is that a global optimal solution can be reached by choosing the optimal choice at each step and then the second property that needs to be true as well is the optimal substructure property which says a problem has an optimal substructure if an optimal solution to the entire problem contains the optimal solutions to the subproblems so to kind of break that down a little bit what that means is every time you make a choice you can kind of treat that as a sub problem now an optimal substructure exists if all of those sub problems allow you to solve the larger problem as a whole so really it's saying if all of the solutions to these sub problems combined allow you to have a full optimal solution to the entire problem then you're good you can go ahead and use a greedy algorithm so i'll leave those definitions on the screen so that you can read them i'll give you one more kind of formal definition here before we get into another example this says greedy algorithms work on problems for which it is true that at every step there is a choice that is optimal for the problem up to that step and after the last step the algorithm produces the optimal solution of the complete problem so that makes it seem a little bit more confusing than it really is what i'm going to do now is move on to another example and show you how we apply a greedy algorithm to it so in front of me i have a very famous problem which is known as the knapsack problem now what i'm going to do is introduce a variation of this problem to you and then explain how a greedy algorithm can be used to solve this then i'm going to go back to kind of the original problem and show you how the greedy algorithm fails so let me introduce what this problem is so in this problem you have a backpack that has a specific capacity in this case the capacity is 25. now that denotes kind of the size in total of items that you can hold in the backpack some people call it weight you can call whatever you want but that means that we can only store at most 25 kind of you know units of items in our backpack and what our goal is is to fill the backpack with as much value as possible without going over its capacity so we can see that each item has a size here and has a value so if we're looking at item 0 it has a size of 22 and it has a value of 19. we look at item 1 we have a size of 10 and a value of 9. and so if we were to select say item 1 that means that we would then be left with 15 units of capacity in our backpack we would have a total value of 9. so again the goal is to maximize the value without going over the capacity but you can be at the capacity so you could use 25 units of space in the backpack so the question here is how do we use a greedy algorithm to solve this problem and actually i need to introduce the variation of this problem which is you can select a fractional amount of any of these items so what that means is that let's say we want to select item one but we don't have enough room for the entirety of item one we can select half of item one so if we were going to select half of item one then what we would do is you know say 0.5 times 10 that's how much weight we're going to have for half of item 1 and then 0.5 times nine that's how much value we're gonna get if we select a fractional amount of item one now you don't have to just select half you could select 99 of it you could select one percent of it you could select ten percent of it whatever you want you can select a fractional amount of an item so my question is how do we use a greedy algorithm to solve this fractional backpack problem well the first thing that we should consider is can we solve this problem by just looking at one of these columns here so just the value or just the size can i select items that just have the largest value can i select items that have the smallest size what is kind of the grady approach so let's just see what happens if we try to select items that have the smallest size first and see if that actually gives us an optimal solution so at each step in our algorithm we're going to select the remaining item that has the smallest size that's kind of our greedy step and so the first item that we're going to select here is going to be item 3 because it has a size of 7. so when we do that we see that our current size is going to be 7 and our current value is going to be 6 and then we can cross this off because we've used it okay the next greedy step is we are going to select the size of nine so we select nine that gives us a total size of 16 and then our value is now 15 because well 9 plus 6 is 15 okay and then we're going to select our next item the next item has a size of 10. and when we select this item we see that this is going to lead us to go over capacity to 26 so what we need to do is select a fractional amount of this item which means instead of selecting all 10 we're going to select 90 of this right so we'll select 9 of 10 which means we are going to get now a capacity of 25 and then what's 90 of 9 well let me just use the calculator to get that i probably should have been able to solve that in my head but that's going to give us 8.1 value which means we're going to have a total value of 23.1 perfect so there you go we now have a total capacity of 25 a value of 23.1 and that's kind of the answer we got when we selected items that had the smallest size that was the greedy choice that we made so let me just kind of move this over to the side here so we remember this value and now let's try it in the other way all right so now we're going to perform the greedy algorithm but this time choosing the largest value instead of the smallest size so if i'm selecting the largest value that means i'm going to select item 0. so we have a size of 22 and a value of 19. then i'm going to be choosing between item one and item two because they have the same largest value since this has a smaller size item two i'm going to select this one and so that means that if i were to select the entire item i would have a weight of 31. obviously i can't do that because that goes over my capacity and so instead i need to select 33 of this item so that means that my capacity is going to go to 25. 33 of 9 is clearly 3. same thing here that means that i am going to get an additional 2 value here and that is going to lead me to 22. so let's take this and store this down here as well so the two answers we got were 23.1 and 22. now what we can say right now is okay well clearly the other approach selecting the smallest size worked better for this example but is this actually the optimal answer are either of these the optimal answer to this problem and well the answer to that is no there's actually a better way to solve this still using a greedy approach but it requires a little bit of thinking so the purpose of me showing you those two methods there was to illustrate that in a lot of examples you can use a greedy algorithm but you have to make sure you're really thinking about what your greedy criteria is how you're selecting the optimal choice at every single step now for this problem here you have to remember that we can select a fractional amount of all of these items and so really what we should do is find the items that have the best value to size ratio select the largest fractions of those items that we can and then continue on throughout the yellow group so i'll show you what i mean by that but let's just have a look here so what i'm going to do is make another column and i'm going to call this value over size now the point of this is that the items that have the largest value over size ratio are the best items for me to select so quite simply if we're looking at this right here nine size gives me nine value that means my value to size ratio is one so for every extra capacity i add or remove i guess from my backpack i get one value whereas if we're looking at say 22 and 19 i need to pull out my calculator for this but 19 divided by 22 is 0.8636 if we're looking at 9 and 10 we're going to get 0.9 and if we're looking at 6 and 7 then we're going to get 0.857 so here we can see that the best item to select in terms of the value to size ratio is going to be item 2 and then we're going to have item 1 and then it's going to be item 0 followed by item 3. so now what our new greedy algorithm should do here the correct greedy algorithm is at each step in our algorithm we should select the item that has the highest value over size ratio and take as much of that item as we possibly can so in this case we see that this is our best item so we're going to take all of item two so i can just i guess write what our weight and our size is going to be over here so that's item 2 we're going to select all of that then this guy is done so what's the next one well we want to select item one so we're going to select all of item 1 which means we're going to get now a capacity of 19 and we're going to have a value of 18 so this guy's done now and then this is slightly better than this so we're going to select as much of item zero as we possibly can so we need to select kind of six size of item zero so let me do some math here so we're gonna select approximately 27 of item zero so 27 times 19 gives us a value of 5.18 which means that we're going to have here 23. if i can do this correctly 23.18 like that and then we're going to have a capacity of 25. so we did actually end up with marginally more value by using this different greedy approach that i just showed you right here now a lot of you might think that this is a calculation error this is not there is actually slightly more value in doing the method that i just showed you here so selecting a fraction of this specifically 27 of it now in a lot of other examples you'll see that this difference would be much larger the whole point of this was just to illustrate to you that you need to be very careful in what you actually use as your greedy criteria it's not as simple as just looking at one category in this case we combined the categories and intuitively this does make a lot of sense right to select the highest fraction of items that we can that have the largest value over size right or value to size ratio so that's the example that i wanted to show you on how you can actually use a greedy algorithm to solve a problem i'm not going to write the code for this you can figure that out on your own but now what i want to do is change the variation of this problem and show you how a greedy algorithm might actually fail all right so i've cleared the screen and now what i want to do is change the variation of this problem and show you how the greedy algorithm will fail when we change the problem just slightly so now the problem is the exact same you want to maximize the value without going over the capacity however you cannot select a fractional amount of an item so if we try to perform the greedy algorithm we did in the last step where we select the item that has the largest value to size ratio you're going to see that we quickly fail and we do not get the correct amount we do not get the largest value we possibly can so let me prove it to you this was the item that had the best us value to size ratio second best third best and fourth best so if we select this item first we get nine and nine and then we select this item we get a total capacity of 19 and then we get a value of 18 and now we try to select the next item and we see we cannot select another item because there is no item that has a size small enough that we can fit in the bag with a capacity of 19 already being used and so our value from the greedy algorithm approach is 18. so obviously this means that the greedy algorithm fails in this example and cannot deliver an optimal solution and one of the reasons it can't do that is because the choice it makes in the current step actually affects what choices it's going to have to make in the future because we have this capacity constraint and so we really would be better off using something like dynamic programming here to solve this problem rather than a greedy algorithm in fact a greedy algorithm just will not give us the correct result unless we're lucky and the greedy algorithm choices end up lining up with what the actual optimal value should be so with that i think i'm going to end the video here hopefully this gave you a quick introduction to what greedy algorithms are again they're pretty straightforward but they're used in all kinds of different algorithms for example if you're talking about dijkstra's algorithm or the minimum spanning tree algorithm where a lot of other graph algorithms actually may use a version of a greedy algorithm they have other types of kind of algorithms in them but they make a greedy choice at every single step to help solve the problem if you're talking about dijkstra's algorithm at every single step it's choosing the node that currently has the shortest distance to get to it and then it's examining from that note now might be butchering that a little bit it's been a while since i looked at dijkstra's but that is an example of an algorithm that implements a greedy choice and kind of is a greedy algorithm based on the definition of greedy algorithms anyways i hope you guys enjoyed i hope you learned something if you did make sure to leave a like subscribe to the channel i will see you in another youtube video you
