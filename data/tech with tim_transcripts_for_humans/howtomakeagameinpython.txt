With timestamps:

00:03 - foreign
00:10 - [Music]
00:14 - I'll give you an introduction to python
00:17 - game development by walking you through
00:18 - creating a simple fun yet extensible
00:21 - game we'll make this game using the pi
00:23 - game module which is a simple 2D
00:25 - Graphics library in Python that allows
00:28 - you to create a variety of games in case
00:30 - you're curious I have tons of different
00:31 - Pi game tutorials on this channel and a
00:34 - recent one I posted actually shows you
00:35 - how to build an entire platformer game
00:37 - here we'll make something much more
00:39 - simple just to get through the basics
00:40 - and get you up and started as fast as
00:43 - possible let me show you a demo of what
00:45 - we're going to build so on the screen
00:46 - here you can see our game again this is
00:48 - fairly straightforward we have a
00:49 - background we have a rectangle that you
00:51 - could change to some kind of sprite or
00:53 - character if you wanted to and then we
00:55 - have projectiles that are falling on the
00:56 - screen as we progress further these
00:58 - projectiles will get faster and more of
01:00 - them will fall and eventually if we are
01:02 - to collide with one of these rectangles
01:04 - and it will tell us that we lost
01:06 - obviously you could go and add lives you
01:08 - can make different levels you can make
01:09 - this game really completely your own but
01:12 - I wanted to show you the basics covering
01:13 - things like movement collisions
01:15 - projectiles backgrounds and all of that
01:18 - kind of fundamental stuff that once you
01:19 - know you can make a ton of different
01:20 - games with so with that said let's get
01:23 - into the video now the first thing I
01:24 - want to tell you is that if you are
01:26 - interested in becoming a software
01:27 - engineer or learning more about python
01:29 - go and other programming topics I do
01:31 - have a course called
01:33 - programmingexpert.io I'll leave a link
01:34 - to that in the description I also just
01:36 - released a blockchain course so anybody
01:38 - interested in web 3 blockchain
01:40 - technology creating smart contracts
01:42 - solidity Etc you can check out my course
01:44 - blockchain expert again from the link in
01:46 - the description so the first thing we
01:48 - need to do when we're going to be
01:49 - working with this Pi game module is we
01:51 - need to install Pi game now to do that
01:53 - you're going to open up a command prompt
01:54 - or a terminal and type the following
01:56 - command which is PIP install Pi game now
02:00 - for some reason this command does not
02:01 - work for you you can try to run the
02:03 - command pip 3 install Pi game and if
02:05 - neither of those work for you I will
02:06 - leave two videos in the description and
02:08 - I'll kind of throw the thumbnails up on
02:10 - the screen that explain to you how to
02:12 - install Pi game
02:13 - all right so now that Pi game is
02:15 - installed we can start using this
02:16 - library now I've used this a ton of
02:18 - times but I'm going to walk you through
02:19 - step by step how we set everything up so
02:21 - the first thing to do is go into a new
02:23 - python file you can see I'm in one here
02:25 - in vs code you can work in any editor
02:27 - that you like and import the pi game
02:29 - module now while we're up here we're
02:31 - going to import a few other modules
02:32 - we're going to use for this game so
02:34 - we're going to import time and we are
02:36 - going to import
02:38 - random like that perfect all right next
02:42 - thing we're going to do here is set up
02:43 - our pygame window now the first thing
02:45 - you need whenever you're working in pi
02:46 - game is some kind of window this is
02:48 - really the place where you can draw
02:50 - different objects and actually have your
02:51 - game running now for your window you
02:54 - need a width and a height so I like to
02:55 - Define my width and height at the top of
02:57 - my program in all capitals just that
02:59 - it's clear that these are constant
03:01 - values and they're not going to change
03:02 - so for the width I'm going to make this
03:04 - 1000 and for the height I'm going to
03:06 - make this 800 and that is in pixels now
03:09 - if you are working on a small display
03:10 - chances are this will be too large for
03:13 - you so you can make these values smaller
03:14 - so the window will actually fit on your
03:16 - screen okay now that we have the width
03:19 - and the height we're going to say win
03:20 - standing for our window is equal to
03:23 - pygame dot display dot set underscore
03:27 - mode and inside of here we're going to
03:29 - pass a tuple with the width and the
03:31 - height make sure you have two sets of
03:33 - parentheses here and inside of this
03:35 - intercept you have your width and then
03:37 - your height and make sure you spell the
03:39 - width correctly okay the next thing we
03:42 - can do is set a caption for our window
03:44 - this is going to be the name at the top
03:45 - of the window to do that we can say
03:47 - pygame dot display dot set
03:51 - underscore caption and then we're going
03:53 - to pass a string here and I'll just call
03:55 - this something like space Dodge but you
03:57 - can call this whatever you want all
03:59 - right before we go any further let's run
04:00 - our code here so I'm going to go and
04:02 - type Python and then main.pi whatever
04:05 - editor you're working in I assume you
04:06 - know how to run your python script in vs
04:08 - code you can also press this button
04:10 - okay so when I do that you'll notice the
04:12 - window kind of popped up and then it
04:13 - disappeared immediately that's because
04:15 - we don't have any Loop kind of running
04:17 - that keeps our program alive you can see
04:19 - again when I run this window pops up and
04:21 - then it closes in a minute we'll make
04:23 - sure that Windows stays live and I'll
04:25 - show you how to do that
04:26 - perfect so now that we have our window
04:29 - here our width and our height we need to
04:31 - set up what's known as the main game
04:32 - Loop now whenever you're working in pi
04:34 - game you need a loop typically a while
04:36 - loop that is going to run while the game
04:38 - runs right so that actually keeps it
04:40 - alive the while loop will do things like
04:42 - check for Collision check for movements
04:44 - or key presses and then adjust what's
04:45 - being displayed on the screen so what
04:48 - we're going to do is create a function
04:49 - called main this is really where the
04:51 - main game logic is going to exist for
04:53 - now we're going to create a variable
04:55 - called run we're going to say this is
04:56 - equal to true and we're going to say
04:58 - while run and then inside of here is
05:01 - going to be our main game Loop so the
05:03 - first thing that I always do inside of
05:05 - my game Loop is I check to see if the
05:07 - user pressed the x button on the window
05:08 - if they did that then I want to close
05:11 - the window it's not automatically
05:12 - programmed in you need to handle that
05:14 - key press yourself so to do that I'm
05:16 - going to say four event in pygame dot
05:20 - event dot get and this is essentially a
05:23 - list that contains all of the different
05:24 - events that have occurred in the last
05:27 - what do you call it kind of iteration of
05:30 - this Loop then what we do is check for
05:32 - the x button event so we're going to say
05:34 - if event DOT type is equal to pygame Dot
05:39 - and then in all capitals quit what we
05:42 - are going to do is say run is equal to
05:43 - false which will then end this while
05:45 - loop and we are going to break out of
05:47 - the for Loop because there's no reason
05:49 - to continue checking the events if
05:51 - you've hit the quit button then at the
05:53 - very end of our function here we're
05:55 - going to say Pi game
05:56 - dot quit and pygame.quit will just close
05:59 - the pi game window for us alright so
06:01 - very quick recap of what we've done here
06:03 - we've said run is equal to True while
06:04 - the variable run is equal to true we're
06:06 - going to check all of the different
06:07 - events that are occurring this again
06:09 - will give us events like key presses
06:11 - Mouse being moved all that kind of stuff
06:13 - as well as if we hit the button in the
06:16 - top right hand corner that x button
06:18 - which is the event.type equal to pygame
06:20 - dot quit that's if that's the case sorry
06:23 - we're going to say run equals to false
06:24 - we're going to break out of this for
06:25 - Loop and then that will force us to have
06:28 - this statement here which will quit the
06:29 - pi game window now what we need to do is
06:32 - call this main function so we can test
06:33 - this out we're going to say if
06:35 - underscore underscore name is equal to
06:37 - underscore underscore main like that
06:40 - then we are going to call the main
06:43 - function now what this statement is
06:45 - doing right here is making sure that we
06:47 - are directly running this python file so
06:49 - we're running the file itself we're not
06:51 - importing it because if we were to
06:53 - import it or if we were to not have this
06:55 - line for example and we were to import
06:57 - this file from another python file it
06:59 - would start running our game when we
07:01 - only want to do that if we directly run
07:03 - this python file so hopefully that makes
07:05 - a bit of sense but this is just checking
07:07 - if you've run this file directly whereas
07:09 - if you were to import it this is going
07:10 - to be false okay so now let's run our
07:13 - code python main.pi notice the window
07:16 - appears and it has space Dodge as the
07:19 - caption then if I press this x button we
07:21 - can close out of it that only works
07:23 - because of the code that we've written
07:24 - here fantastic so the next thing I want
07:26 - to do is have a background image and
07:29 - then I want to have a character that can
07:30 - move around on the screen so let's start
07:32 - with the background image well for our
07:34 - background image we need some image that
07:36 - we're going to display on the screen now
07:37 - notice here that I actually have one BG
07:40 - dot jpeg now this is a larger image
07:43 - which is just a space background all of
07:46 - this code will be available from my
07:47 - GitHub including the image so if you
07:50 - want to download this exact image you
07:51 - can do that by going to the link in the
07:53 - description if you don't want this image
07:55 - and you just want your own background
07:56 - image then just save an image you can
07:58 - call it whatever you want but put it in
07:59 - the same directory as your python script
08:01 - and then I'll show you how we can use
08:03 - that image as a background
08:05 - so at the top of our program here we're
08:07 - going to say BG sending for background
08:09 - is equal to pygame dot image dot load
08:14 - and then we are going to load the name
08:16 - of our file which in my case is
08:18 - bg.jpg like that
08:21 - that's all you need to do to actually
08:22 - load this image into pie game now if you
08:25 - named your something else obviously
08:26 - you're going to change the name to match
08:27 - that and if you had it for example
08:29 - inside of a directory then you would do
08:30 - something like slash Images slash and
08:33 - then vg.jpg there's a few other ways to
08:35 - go about doing that but in this case
08:36 - we're just going to load directly from
08:38 - the same directory that this python
08:41 - script is in okay now that we have our
08:43 - background image we actually need to put
08:45 - that on the screen now I like to do all
08:47 - of my drawing in a separate function
08:49 - just to keep it very clear and kind of
08:51 - organized so I'm going to create a
08:52 - function here called Draw
08:54 - inside of this function for now I'm
08:56 - going to draw this background image onto
08:58 - the screen to do that we're going to use
09:00 - our window which is this Capital wind
09:02 - variable and we're going to say win dot
09:04 - blit now blit is a special method that
09:07 - you use when you want to draw an image
09:09 - or a surface that's what's referred to
09:10 - in Python onto the screen so we are
09:13 - going to BLT the background image and
09:16 - then we need to pass the coordinates of
09:18 - the top left hand corner of this image
09:21 - so in pi game when we're talking about
09:23 - our coordinate system 0 0 is the top
09:26 - left hand corner of the screen so if I
09:28 - run my code here uh this should still be
09:31 - okay
09:32 - oops that's not working let's do this
09:34 - you can see that where my mouse is this
09:36 - is zero zero if I go all the way over to
09:39 - the right here now we are at whatever
09:40 - the width of the screen is which is a
09:42 - thousand and then the y coordinate of
09:44 - zero if I were to go down here now we
09:47 - are at the width of the screen which is
09:48 - a thousand and then the height of 800 or
09:51 - the height of whatever our screen is
09:52 - because that's kind of how the Y is
09:54 - incremented so rather than y going up
09:56 - the Y actually goes down zero is the top
09:58 - and as you go down to the bottom you
10:00 - increase your y value X is the same as
10:02 - normal starts at zero and as you go to
10:04 - the right it increases meaning down here
10:06 - we have an X of 0 and we have a y of the
10:09 - height of the screen
10:10 - okay so that's the coordinate system now
10:13 - I want my background image to fill the
10:15 - entire screen so I'm going to put 0 0 as
10:18 - the coordinate of where the top left
10:20 - hand corner of this background image
10:22 - should be placed then the width and the
10:24 - height will fill the screen
10:26 - lastly we need to say Pi name dot
10:29 - display dot update this is going to
10:32 - refresh the display which means any
10:34 - draws that we've done this is a drawing
10:36 - event will actually be applied and put
10:38 - onto the screen every time you update it
10:40 - takes all the draws and applies it if
10:42 - you don't have an update then nothing's
10:43 - going to happen on the screen fantastic
10:45 - so now before we exit our while loop
10:48 - here we're going to call this draw
10:50 - function so now every single frame we're
10:53 - going to call the draw function and it's
10:54 - going to continue to draw this on the
10:55 - screen let's go ahead and run our code
10:59 - okay so when we run it you can see that
11:01 - we get our space image appearing now in
11:03 - my case my space image is quite large so
11:05 - it actually fills the entire screen for
11:07 - some of you your image might be a little
11:09 - bit smaller and you might want to scale
11:11 - it up or make it larger so that it fills
11:13 - the screen now to scale your image you
11:15 - can do the following you can write High
11:17 - game
11:19 - dot transform if we can spell that
11:22 - correctly dot scale and then you can
11:25 - pass the image which in this case is the
11:27 - image that we want to load and then the
11:29 - size that you want to scale this image
11:31 - to so in my case I want to scale my
11:33 - image to be width height so it's going
11:36 - to be this now when you do this type of
11:38 - scaling it is not going to preserve the
11:40 - aspect ratio but there is different
11:42 - transform functions that'll allow you to
11:44 - look up from the documentation that let
11:46 - you actually scale it based on a factor
11:48 - so you can scale by 2x 3x 4X Etc rather
11:52 - than scaling using kind of this uh what
11:54 - do you call it width height system
11:55 - hopefully that makes a bit of sense but
11:57 - this will not preserve your aspect ratio
11:59 - if you use a different scale function it
12:01 - will there's one that I believe is scale
12:03 - 2x which just takes the image and scales
12:05 - it up two times the size okay so now
12:08 - this should scale our image to be the
12:09 - width and the height let's quickly test
12:11 - this out and let me just select this
12:13 - interpreter so this will keep working
12:14 - now so now you can see our image looks a
12:17 - little bit better we've kind of made it
12:18 - the exact size of our screen rather than
12:21 - having it be too large and overflow the
12:23 - screen
12:24 - okay so now we have our background image
12:27 - and we have our main event Loop we have
12:29 - kind of the screen appearing the next
12:31 - thing we want to do is create a
12:32 - character that can move around so let's
12:34 - do that so for our character we're going
12:37 - to go inside of our main Loop here and
12:39 - we're going to say player is equal to a
12:43 - pie game dot rectangle with a capital R
12:45 - and it's just going to be wrecked and
12:47 - then we're going to pass the X position
12:49 - y position width and height of our
12:52 - player so before I go here I'm going to
12:54 - create two variables one which is the
12:57 - player width which will make equal to 40
12:59 - and another which is the player height
13:02 - which will be equal to 60. I like to
13:04 - declare all of my constant variables in
13:06 - capitals at the top of my program so I
13:08 - can easily change them and update all of
13:10 - my code by just changing one variable
13:12 - here so now I'm going to go to my player
13:15 - which is pygame.rectangle and we're
13:17 - going to pick a starting X and a
13:19 - starting y position for our character
13:21 - now remember that this is going to be
13:23 - the top left hand corner of where we are
13:25 - drawing the player so we can pick any x
13:27 - coordinate we want I'm going to pick 200
13:29 - and then for the y coordinate we want
13:32 - this player to be at the bottom of the
13:33 - screen so to do this dynamically we're
13:36 - going to take the height of the screen
13:37 - and we're going to subtract the height
13:39 - of the player
13:40 - so we take height minus player height
13:42 - that gives us the top left hand corner
13:45 - where we draw this player so that means
13:46 - that since our height is 800 and our
13:48 - player height is 60 we're going to draw
13:50 - this at 740 meaning the bottom of the
13:53 - player will be directly at the bottom of
13:55 - the screen you'll see what I mean when
13:57 - we draw this but that's why I'm using
13:58 - this math here next we're going to pass
14:00 - the player width
14:03 - and the player height
14:04 - so it goes X Y with height whenever
14:08 - you're using a rectangle in pi game
14:10 - okay so now that we have our player we
14:13 - want to draw this player onto the screen
14:15 - so I'm going to pass this player
14:17 - rectangle to my draw function and then
14:20 - I'm going to go to draw and I'm going to
14:21 - accept my player rectangle now I'm going
14:24 - to draw it to draw my rectangle I'm
14:27 - going to say Pi game dot draw Dot rect
14:31 - and then the first thing I'm going to
14:33 - pass is where I want to draw a rectang
14:35 - well I want to draw a rectangle on my
14:37 - window so I pass window the next thing I
14:39 - pass is the color that I want my
14:41 - rectangle to be in this case I'm going
14:43 - to use red now in the newest version of
14:45 - Pi game which most of you will be using
14:47 - you can just use string colors so red
14:49 - white black orange any color you would
14:52 - know or you can use RGB so if I use RGB
14:56 - then that would be something like 255 0
14:58 - 0 where I have 255 red 0 blue and zero
15:03 - green RGB I think I read it in the in
15:04 - the wrong order red green blue yeah
15:06 - sorry so zero green and zero blue but
15:09 - you get the idea you can use an RGB
15:10 - color code or
15:12 - for Simplicity you can just write the
15:14 - color in which in this case is red
15:16 - okay next we are going to put the
15:19 - rectangle that we want to draw and that
15:21 - rectangle is our player so our player is
15:24 - a pi game rectangle which is an accepted
15:26 - argument to this method here so we say
15:28 - we're drawing it on the window it's a
15:30 - red rectangle and this is actually the
15:32 - coordinates of the rectangle right so
15:33 - it's at 200 it's at this height and it
15:36 - has this width and this height
15:38 - perfect
15:39 - now that we have that we should see a
15:41 - red rectangle appearing when we run our
15:43 - code there you go we have our rectangle
15:46 - showing up on this screen fantastic now
15:49 - that we have a rectangle we want to move
15:51 - it around now to move the rectangle is
15:53 - as easy as adjusting the x coordinate of
15:56 - this rectangle
15:58 - so let's have a look at how we do that
16:00 - the first thing we need to do is listen
16:02 - for different key presses so if the user
16:05 - presses the left Arrow key I want to
16:06 - move to the left which would be reducing
16:08 - its x value if they press the right
16:10 - arrow key I want to move to the right so
16:13 - I'm going to say keys is equal to Pi
16:16 - game dot key dot get underscore press
16:20 - now this will give you a list of all of
16:22 - the keys that the user has pressed and
16:24 - tell you well if they press them or not
16:26 - so what I can do here is say the
16:28 - following I can say if keys and sorry I
16:31 - said list I mean dictionary and then I
16:33 - can say Pi game
16:35 - dot k underscore left which is the code
16:38 - for the left Arrow key if that's the
16:40 - case then I can take my player dot X and
16:45 - I can subtract from that the player
16:47 - velocity which is a variable that we're
16:49 - going to Define now at the top of our
16:51 - program so we're going to say player
16:52 - what player Val sorry is equal to five
16:54 - let me just move this down
16:57 - okay so we're saying if Keys pygame dot
16:59 - k underscore left you may be wondering
17:01 - how I found this I just know it because
17:03 - I've used it many many times before but
17:05 - this is the uh kind of what do you call
17:07 - it code for the left Arrow key if you
17:10 - wanted for example the a key then it
17:11 - would be K underscore a or k underscore
17:14 - B or C Etc if you wanted like the shift
17:17 - key it's K underscore shift there's a
17:19 - whole um kind of documentation where you
17:21 - can look up all of the key codes from
17:23 - the pi game website you can also just
17:24 - look up Pi game key codes and you'll
17:26 - probably find a big list that tells you
17:28 - but the common ones are going to be like
17:30 - space
17:31 - shift
17:33 - c a w Etc or left right so on okay so if
17:38 - they are pressing the left Arrow key
17:40 - then we're going to subtract the Y the
17:42 - reason we subtract sorry not the Y the x
17:44 - is because we want to move them left so
17:46 - by subtracting their x coordinate we
17:48 - move them closer to the zero zero
17:50 - position so to the left that's why we're
17:52 - doing this subtraction now we have the
17:55 - player velocity set at 5 which means
17:57 - every time that you press this key we're
17:59 - going to go five pixels backwards you
18:01 - can adjust that velocity if you want the
18:02 - character to move faster or slower
18:05 - now of course we're going to do the same
18:06 - thing for the other Arrow key so
18:07 - pygame.k underscore right and then we
18:11 - say if I can get rid of that crazy
18:13 - autocomplete player
18:15 - dot X plus equals the player velocity
18:19 - one thing to note here when I use dot X
18:22 - that's simply adjusting the first value
18:24 - here so we start at 200 then we go back
18:26 - by the velocity or forward by the
18:28 - velocity right that's how you access
18:29 - that you can also access the width
18:32 - property and the Y property as well as
18:34 - the height property and that corresponds
18:36 - with the values up here
18:39 - okay
18:40 - fantastic so now we should be able to
18:41 - move our player because we have this
18:43 - movement code so let's run and see if we
18:46 - can do that and using my arrow keys you
18:48 - can see that I can move my player
18:49 - however it's moving extremely fast now
18:52 - the reason for this is that we haven't
18:54 - set up a clock or kind of a timer that
18:57 - regulates how fast our PI game Loop is
18:59 - running
19:00 - now for some of you if you're on a
19:02 - slower computer you're going to run that
19:03 - and be like oh the speed is fine it
19:05 - works okay the issue is that the speed
19:07 - that this while loop runs at is what
19:10 - determines how quickly our character is
19:12 - moving if I'm holding down the key and
19:14 - this while loop is running really really
19:15 - fast I'm going to move fast if it's
19:17 - running very slow say you're on a slow
19:18 - computer then this is going to move slow
19:20 - we don't want that we want this Loop to
19:23 - always run at the exact same speed so
19:25 - that no matter what computer you're on
19:27 - it's going to run at the same pace and
19:28 - your character is always going to move
19:30 - at the same speed to do that we need to
19:32 - set up a clock object so we're going to
19:34 - say clock is equal to Pi game dot time
19:38 - dot Capital C clock then we're going to
19:41 - go here we're going to say clock dot
19:43 - tick and then we're going to put 60
19:45 - which is the maximum number of frames
19:47 - per second or number of times that you
19:49 - want want this while loop to be running
19:51 - so you create a clock object here and
19:53 - then inside of your while loop you have
19:54 - clock dot tick this is essentially going
19:57 - to delay the while loop such that it
19:59 - will only run a maximum of 60 times per
20:01 - second if you wanted to run faster
20:03 - obviously you would adjust this value to
20:05 - be whatever the fixed FPS value is that
20:07 - you would like okay now that we have
20:09 - clock.tick you'll notice that when I run
20:11 - my code my character now moves a lot
20:14 - slower
20:15 - so again you could speed this up by
20:17 - increasing the velocity and then no
20:19 - matter what computer you're on it's
20:20 - going to be moving at a similar or the
20:21 - exact same speed
20:23 - okay so we're moving but notice here
20:25 - that I can actually move completely off
20:27 - the screen we obviously don't want that
20:30 - for a game otherwise you can just dodge
20:31 - by going off the screen so we need to
20:33 - make it so you can't move if you're
20:35 - hitting the edges of the screen to do
20:37 - that we just need to come here to our
20:39 - conditions where we're checking if
20:40 - you're pressing the left Arrow key and
20:41 - right arrow key and add a guard Clause
20:44 - that makes it such that you cannot move
20:46 - if you're going to be moving off the
20:48 - screen so the way we do this is we add
20:50 - another condition here with and we say
20:53 - if Keys Pi game.k underscore left
20:55 - and we have the player.y minus the
21:00 - player underscore velocity is greater
21:03 - than or equal to zero now the reason
21:06 - we're putting this here is we're saying
21:07 - okay we're about to subtract the player
21:10 - velocity from the x coordinate so if
21:13 - when we subtract this the player is
21:15 - still above zero or greater than zero so
21:19 - their x coordinate is greater than zero
21:20 - then that's okay we can subtract this
21:22 - but if it's not so if we're going to be
21:24 - like negative 1 negative 2 negative 3
21:25 - Etc don't let them move hopefully that's
21:29 - clear why we're doing that and that's
21:30 - why we have this code here now let's
21:32 - copy this and put the same thing here
21:35 - except now we need to change this a
21:37 - little bit because we're adding to the
21:39 - velocity or we're adding to the x
21:41 - coordinates sorry so we have player What
21:42 - DOT X apologies plus player.vel and then
21:47 - we're going to say plus player dot width
21:50 - and this is actually going to be less
21:52 - than or equal to the width of the screen
21:55 - now this one is a little bit longer
21:57 - because we have to account for the fact
21:59 - that player.x is the top left hand
22:02 - corner of our player so we need to add
22:04 - the velocity kind of like we did here
22:06 - but in the opposite direction because
22:07 - we're increasing it not decreasing it
22:09 - and we also need to account for the
22:12 - width again this is the top left hand
22:14 - corner then we have a width of in this
22:16 - case 40 pixels so we need to make sure
22:18 - the x coordinate plus the width plus the
22:21 - velocity is going to be less than the
22:23 - width of the screen before we allow the
22:25 - character to move to the right
22:27 - okay now let's run this and see if it
22:29 - works
22:30 - and notice when I go to the right here I
22:32 - can't move any further than the very
22:34 - edge of the screen
22:35 - and same with the left hand side okay we
22:38 - now have a character that is moving
22:39 - around the next thing we need to do is
22:41 - keep track of the amount of time that
22:42 - has elapsed we then need to create some
22:44 - projectiles that are coming down on the
22:46 - screen and then check for collision with
22:48 - those projectiles currently we're about
22:49 - halfway done if you're still following
22:51 - along at this point congratulations give
22:53 - yourself a pat on the back believe it or
22:55 - not most people do not make it this far
22:57 - alright so there's a few different kind
22:59 - of directions we can go in here in terms
23:00 - of what we want to write next but I
23:02 - think the easiest is going to be to
23:03 - handle the time so we know how much time
23:05 - has elapsed to do that
23:07 - we are going to create a variable here
23:09 - called start time
23:11 - start time is going to be equal to time
23:13 - dot time time dot time is going to give
23:16 - us the current time so we're going to
23:17 - grab the current time when the game
23:19 - started and then we're going to create
23:21 - another variable here called lapsed
23:23 - underscore time and make this equal to
23:25 - zero then beneath our clock.tick we're
23:28 - going to say elapsed underscore time and
23:31 - this is going to be equal to time dot
23:33 - time
23:35 - minus
23:37 - the start time
23:39 - so we're essentially storing what time
23:41 - we started the wall loop at then every
23:43 - time we iterate we're getting what the
23:45 - current time is and subtracting that
23:47 - from the start time which will give us
23:48 - the number of seconds that have elapsed
23:50 - since we started the while Looper since
23:52 - we started the game now that we have the
23:54 - elapsed time
23:56 - we can pass that to our draw function
23:59 - and we can draw the elapsed time on the
24:01 - screen so we're going to go to our draw
24:02 - function we're going to take elapsed
24:05 - underscore time as another parameter
24:07 - here
24:08 - and then we're going to draw this now to
24:10 - draw this we actually need to use a font
24:12 - because we're going to have text on the
24:14 - screen that says time you know two
24:15 - seconds three seconds Etc so what we
24:17 - need to do is initialize our font module
24:19 - create a font object and then use that
24:22 - font to render some text on the screen
24:24 - so at the top of our code we're going to
24:26 - say Pi game
24:28 - dot font
24:30 - dot init we just need to initialize the
24:33 - font module don't ask me why we need to
24:35 - do this it's a requirement from PI games
24:37 - we just do that at the top of our
24:38 - program
24:39 - then we're going to come down here and
24:41 - we're going to say font
24:43 - is equal to Pi game dot font dot sys
24:47 - font with this capitalization and then
24:50 - we can pass any of our system fonts in
24:52 - this case I like to use Comic Sans and
24:54 - the size of our font which I will choose
24:56 - as 30. you can change this to be
24:59 - whatever you want there's different
25:00 - types of fonts you can put in here no
25:01 - Times New Roman aerial
25:04 - Etc and then whatever the size is I'm
25:06 - just going to make it 30. so again the
25:08 - procedure is initialize the font module
25:10 - create a font object here and then use
25:13 - the font object to create some text
25:14 - which you can render on the screen so to
25:17 - do that I'm going to say my time
25:18 - underscore text inside of my draw
25:20 - function is equal to font dot render and
25:24 - then I'm going to pass the text I want
25:26 - to render now in this case I'm going to
25:27 - say time colon and then inside of my F
25:31 - string here I'm going to say round
25:33 - and then a lapsed underscore time and
25:36 - then I'm going to put an S here
25:38 - then I'm going to put a 1 and I'm going
25:39 - to put the color which is white don't
25:42 - worry I'll go through this slower I know
25:43 - that was pretty fast so we have render
25:45 - the first thing we do is pass the string
25:47 - or the attacks that we want to render on
25:49 - the screen now I'm using an F string
25:51 - available in Python 3.7 and above and
25:54 - this allows me to embed a variable
25:55 - directly inside of the string and have
25:57 - it rendered as a string so I'm saying
25:59 - time colon and then I'm rounding the
26:02 - elapsed time to the nearest second
26:04 - and I put this inside my curly braces so
26:07 - that I can directly use this variable in
26:09 - this round function then I put an S so
26:11 - that I have you know three four five
26:13 - whatever seconds next I put one one
26:16 - stands for anti-aliasing don't worry
26:18 - about this too much but it just looks
26:19 - makes your text look a little bit better
26:21 - and then you pass the color that you
26:23 - want this text to be in this case I want
26:25 - white
26:25 - okay now that we have our text we need
26:28 - to render this on the screen so we're
26:30 - going to say win
26:31 - dot bullet and then we're going to Blitz
26:34 - the time underscore text and the
26:37 - position we're going to BLT it at is 10
26:39 - 10. so just we have a little bit of
26:41 - padding from the top left hand corner of
26:43 - the screen 10 pixels x 10 pixels y just
26:46 - moves us a little bit off the edge of
26:47 - the screen so it looks a little bit
26:49 - better all right now we should be
26:51 - rendering the uh time so let's see if
26:54 - that works by running our code and
26:55 - notice that we have our time it is
26:57 - counting up uh and it will keep
26:59 - displaying whatever the current time is
27:01 - awesome so now that we have our time the
27:04 - next thing we need to do is generate
27:06 - some projectiles now we're going to
27:08 - generate our projectiles on kind of a
27:11 - counting increment where the increment
27:13 - at which we generate them gets shorter
27:15 - and shorter meaning we kind of generate
27:17 - more of them uh more quickly as the time
27:20 - progresses making the game a little bit
27:22 - more difficult obviously you can mess
27:24 - with this mechanic however you'd like
27:25 - but I wanted to show you how we do some
27:27 - kind of dynamic rendering here so we're
27:29 - not just putting one on the screen say
27:30 - every one second it gets a little bit
27:32 - more complicated than that all right so
27:34 - to do this we need to have a few
27:36 - variables we're going to say star I'm
27:37 - going to call those little projectiles
27:39 - stars even though I know they don't
27:40 - really look like them I'm going to say
27:42 - star add increment is equal to 2 000
27:46 - milliseconds which means the first star
27:48 - that we add will be added in 2000
27:50 - milliseconds then we are going to have
27:53 - star underscore count
27:56 - equal to zero and this is actually just
27:59 - going to be a variable that tells us
28:00 - when we should add the next star I know
28:02 - it's a little bit misleading it's not
28:04 - telling us how many stars we have it's
28:06 - going to be counting so that we know
28:08 - when we get to this increment and when
28:10 - we should add another start of the
28:11 - screen okay
28:13 - then we're going to have an array here
28:15 - called stars or a list sorry and this is
28:18 - where we're going to store all of our
28:19 - different stars that are currently on
28:21 - the screen then we'll draw all of them
28:23 - that are inside of this list onto the
28:25 - screen
28:26 - okay so at the top of our code here
28:28 - although it doesn't really matter where
28:30 - you put this we're going to generate
28:32 - some of our stars so we're going to
28:33 - actually say that our star underscore
28:36 - count plus equals clock dot tick now I
28:40 - know this seems a little bit weird but
28:42 - what clock dot tick does is return the
28:45 - number of milliseconds since the last
28:48 - clock tick so you need to actually do it
28:50 - in this way to keep track of the time
28:52 - accurately in my case it's about 16 or
28:54 - 17 milliseconds between every clock tick
28:57 - but for you it could be slightly
28:58 - different so we say star count plus
29:00 - equals clock.tick and what this is doing
29:03 - is essentially counting how many
29:04 - milliseconds have occurred since again
29:06 - the last clock tick you could use this
29:09 - elapsed time variable but it gets a
29:11 - little bit more complicated based on how
29:12 - we're kind of keeping track of the time
29:14 - with this variable I know that I'm
29:16 - probably confusing you a little bit
29:17 - again this just returning number of
29:19 - milliseconds since last tick so you do
29:22 - that um to keep track of kind of the
29:24 - precise time in this variable all right
29:26 - now we're going to say if the star
29:29 - counts
29:30 - is greater than
29:32 - the star add increment
29:37 - then we're going to add stars to the
29:39 - screen so hopefully you see what I'm
29:41 - doing here this is 2000 star count is
29:43 - zero as soon as we have 2 000
29:45 - milliseconds that have elapsed then we
29:47 - trigger this and then we add a star now
29:50 - I'm actually going to add three stars at
29:51 - a time but you could add a random number
29:53 - you could add 20 Stars you could add one
29:54 - start you can add as many as you want to
29:56 - the screen so I'm going to say four
29:57 - underscore in range 3 because I want to
30:00 - add three stars and by the way this say
30:03 - placeholder variable that you use when
30:04 - you don't want to have an increment
30:06 - variable like I I don't actually care
30:08 - about the iteration count I just want to
30:10 - do something three times so I say four
30:12 - underscore in range three okay
30:14 - now I'm going to generate the X position
30:17 - of my star because I want to randomly
30:19 - position them on the screen so I'm going
30:21 - to pick a valid x coordinate and then
30:23 - we'll choose a y coordinate and place
30:25 - the star on the screen
30:26 - so star X
30:28 - is equal to random dot Rand int
30:33 - and then 0 with minus the star
30:37 - underscore width which is a variable
30:39 - that I don't believe we've defined yet
30:41 - so let's add that variable to the top of
30:43 - our screen here and make that equal to
30:45 - let's go with 10.
30:47 - okay
30:48 - so again star underscore X is equal to
30:51 - random.randint0 with minus star width
30:55 - now the reason we're doing this is
30:57 - because we want to pick a random integer
30:59 - in the range of 0 and width again minus
31:02 - star with which is a valid position for
31:04 - the x coordinate of the star that we are
31:06 - generating okay we can do this because
31:08 - we imported the random module at the top
31:10 - of our program we're then going to say
31:12 - star is equal to Pi game Dot rect
31:18 - and we're going to place this at the
31:20 - star underscore X and at the negative
31:23 - star underscore height which is another
31:26 - variable that we need to Define so let's
31:28 - go here
31:30 - and make this equal to 20. okay
31:33 - now the reason I'm doing this is I want
31:36 - my star to start off of the screen and
31:38 - then move down so when I do negative
31:41 - star height that means I'm going to get
31:42 - a negative y coordinate so my star
31:45 - starts not at the top of the screen a
31:48 - little bit above the top of the screen
31:49 - and then as we move it down it looks
31:51 - like it enters the screen if instead you
31:53 - were to put 0 here then you would see
31:55 - the star kind of appear right at the top
31:57 - of the screen and then start moving down
31:59 - instead we want to see it slowly enter
32:01 - the screen so we do that by giving it a
32:04 - negative height to start
32:06 - okay next we pass the star width
32:10 - and the star underscore height
32:13 - and now we add this star to our Stars
32:16 - list so we say Stars dot append star
32:20 - like that
32:21 - okay so this now generates three random
32:23 - stars for us now that we have that we
32:26 - want to adjust our star add increment
32:28 - and we want to set our star count back
32:31 - to zero so we say star count equal to
32:33 - zero and before that we're going to
32:35 - adjust this increment so that it's
32:37 - slightly less than what it currently is
32:39 - so we generate Stars faster to do that
32:42 - we say star add
32:45 - increment is equal to the maximum of 200
32:49 - and the star add
32:52 - increment minus 50. okay so let's just
32:56 - quickly go through what I did here I'm
32:58 - essentially saying with this maximum
32:59 - function pick the maximum value out of
33:01 - this and 200. now this makes it so that
33:05 - the minimum star add increment I ever
33:06 - have is 200 right so if star at
33:10 - increment is equal to 200 rather than
33:12 - setting it equal to 150 then 50 then 0
33:15 - the negative 50 we always keep it at 200
33:18 - okay so this is just the minimum value
33:19 - that's what I'm setting here then in
33:22 - most cases what will happen is since
33:24 - star at increment is going to be much
33:25 - larger than 200 in the starting case is
33:27 - equal to 2000 we're going to subtract 50
33:30 - milliseconds so that every time that
33:32 - this runs 50 milliseconds kind of faster
33:34 - we generate another star
33:37 - hopefully that makes a little bit of
33:39 - sense but we go from 2000 to 1950 to
33:41 - 1900
33:43 - Etc and it gets faster and faster and
33:44 - faster the time in which we're
33:46 - incrementing a star and you can
33:47 - obviously adjust this and change it to
33:49 - be whatever you want
33:50 - okay so that will generate Our Stars for
33:52 - us however if we want to see our stars
33:55 - then we actually need to draw them on
33:57 - the screen and we need to move them
33:59 - downwards so we're going to do both of
34:01 - those steps before unfortunately we can
34:03 - see what's going to happen here so now
34:05 - after we generate Our Stars after we do
34:07 - our events and after we do our movements
34:08 - we're going to move our Stars so we're
34:11 - going to say four star in stars and then
34:15 - we're actually going to make a copy of
34:17 - this star's list the reason I'm making a
34:19 - copy of the Stars list is that I'm going
34:21 - to be removing stars from this list that
34:23 - have hit the bottom of the screen or
34:25 - that have hit our player if that happens
34:28 - if they hit our player hit the bottom of
34:30 - the screen we want to get rid of them
34:31 - because we don't want to be rendering
34:33 - them and uh moving them when they're not
34:36 - on the screen that's a waste of
34:37 - resources so I need to make a copy of
34:39 - this list because if I'm modifying the
34:41 - list while I'm working on it I can get
34:43 - all kinds of weird errors so rather than
34:45 - doing that I make a copy of it so that
34:47 - I'm looping through the copy and then I
34:49 - can adjust or mutate the original list
34:51 - as I go through this for Loop so I'm
34:54 - going to say star.y plus equal the star
34:57 - velocity okay so this moves the star
35:00 - downwards in the y direction by this
35:04 - velocity because we're adding to it
35:05 - meaning it goes down then I'm going to
35:08 - say if the star dot Y is greater than
35:11 - the height of the screen then what I
35:14 - want to do is remove this star so I'm
35:15 - going to say Stars dot remove
35:18 - and then I removed the star which will
35:20 - remove the first instance of this or
35:21 - really the only instance of it from the
35:23 - original Stars list nice next we're
35:27 - going to say l if
35:28 - star dot Y is greater than or equal to
35:33 - the player.y and the star dot collide
35:38 - rect
35:40 - player
35:41 - then we are going to remove the star
35:43 - again so star stock remove
35:46 - star and we're going to say hit is equal
35:49 - to true
35:51 - and we are going to break out of this
35:54 - Loop okay you'll see why I'm doing this
35:57 - in a minute
35:58 - but essentially what we're doing with
35:59 - the second alif statement here is we're
36:01 - saying okay if the star.y was not
36:03 - greater than the height then we're going
36:04 - to check if the start at Y is greater
36:06 - than or equal to the player Del y now
36:08 - the reason we're doing this check here
36:09 - is because I only want to check to see
36:12 - if this star is colliding with the
36:14 - player if the star is at the bottom
36:16 - portion of the screen so if it's in the
36:17 - same y kind of plane as our player if
36:21 - it's not there's no point in me checking
36:23 - uh if the star has collided with the
36:26 - player right it just doesn't make any
36:27 - sense because if it's way above the
36:29 - player I don't need to check for
36:30 - Collision because I know it can't be
36:32 - colliding and in fact I need to add
36:34 - something here start out y plus star dot
36:37 - height because again we need to account
36:38 - for the fact that the star has a height
36:40 - not just a y coordinate okay so we say
36:44 - start a y plus start at height if that
36:45 - is greater than or equal to the player.y
36:47 - then we're going to check if the star
36:49 - has collided with the player so since
36:52 - both of these are Pi game rectangle
36:54 - objects that allows us to use this fancy
36:57 - function called collide which just tells
36:59 - us if two rectangles have collided so if
37:01 - they've collided then I want to remove
37:03 - this star because it hit our player I'm
37:05 - going to set a variable hit equal to
37:06 - true because we'll then look at that
37:08 - variable later on to see if our player
37:10 - has been hit by a star okay now we just
37:14 - want to go up here and say hit is equal
37:16 - to false just so that if we do end up
37:18 - checking this variable later on we don't
37:19 - get an error where it's undefined
37:22 - okay so I know I've done a lot there but
37:24 - we started by generating all of our
37:25 - stars we then moved all of the stars now
37:29 - we need to draw all of the stars so I'm
37:32 - going to pass my stars to this draw
37:33 - function I'm going to go to my draw
37:35 - function
37:37 - and I'm going to start drawing them now
37:39 - it doesn't really matter where you draw
37:40 - them but if you draw them after the
37:42 - player they'll appear on top of them if
37:44 - you draw them before the player they'll
37:46 - appear behind the player so pick where
37:48 - you want to draw them I'm going to do it
37:50 - after so you can see it on top of the
37:52 - player okay so fairly straightforward
37:53 - here we're going to say four star
37:57 - in Stars
37:59 - High game
38:00 - dot draw
38:02 - dot rectangle on the window with the
38:05 - color white r star okay straightforward
38:09 - same as our player we're just doing it
38:10 - for every single start
38:12 - all right so that's going to be a
38:14 - majority of the game done let's run it
38:16 - make sure it works and then we'll handle
38:18 - showing something on the screen when the
38:19 - player gets hit by a star
38:21 - okay so let's run and you should see
38:24 - that we get some stuff appearing on the
38:26 - screen but it looks like we got an error
38:28 - so what is our error here
38:29 - it actually didn't show up for me so let
38:32 - me run this one more time and we'll wait
38:34 - for the error message and it says star
38:36 - velocity is not defined okay so that's a
38:39 - variable that we need to Define so let's
38:41 - say starvel is equal to three again feel
38:44 - free to adjust that to be whatever you
38:45 - want
38:46 - okay now let's try it and see if our
38:48 - Stars start moving and there you go
38:50 - three stars are generated and they start
38:52 - moving on the screen perfect and notice
38:55 - that they kind of disappear when they
38:56 - hit the player or when they hit the
38:58 - bottom of the screen okay fantastic so
39:01 - now the last thing we need to do is just
39:03 - put something on the screen that says
39:04 - hey you collided with a star you lost
39:06 - the game and now we'll be finished okay
39:09 - great so to do that we're going to go
39:12 - down to the bottom of our while loop
39:13 - here and before our draw statement we're
39:16 - going to check if the player was hit by
39:18 - a star so we're going to say if hit then
39:21 - we're going to do something now really
39:23 - all we're going to do is just generate
39:24 - some text that says you lost put it on
39:26 - the screen kind of delay for a few
39:27 - seconds and that'll be it and if you
39:29 - want to adjust this game and kind of
39:30 - make it longer add levels you can do
39:32 - that from here so we're going to say
39:34 - lost underscore text is equal to our
39:37 - font dot render you can make a different
39:39 - font if you want I'm just going to use
39:41 - the same one I'm going to say you lost
39:43 - exclamation point and then one and then
39:45 - the color of white
39:48 - okay now I'm going to draw this on the
39:50 - screen so I'm going to say win dot Blitz
39:53 - the Lost underscore text and I'm going
39:55 - to draw this in the center of the screen
39:57 - to draw this in the center of the screen
39:59 - we do the following we say width divided
40:02 - by 2 minus the Lost underscore text
40:06 - dot get underscore width which is a
40:09 - method you can use to get the width of
40:11 - your text object divided by two and then
40:13 - we do the same for the height so say
40:15 - height divided by 2 minus lost
40:17 - underscore text Dot get underscore
40:20 - height
40:21 - divided by 2. okay so let me just
40:24 - quickly explain why we're doing this we
40:25 - want this in the middle of the screen
40:26 - but we need to pick the top left hand
40:28 - position of the text that puts it in the
40:31 - middle of the screen so you might
40:32 - naively think that you can just do width
40:34 - over 2 because that's the middle
40:35 - position of the screen but you can't you
40:38 - actually have to get the full width of
40:39 - the text object and then divide that by
40:42 - two and subtract that from width over
40:45 - two right so if we have
40:48 - um can I kind of run this let's run this
40:49 - and see so let's say 500 is where my
40:51 - mouse is right if I draw my text it's
40:53 - going to go this direction from my mouse
40:55 - so I need to shift it back half the
40:57 - width of the text and then draw it so
41:00 - that it fills the screen completely in
41:01 - the middle and then obviously the same
41:03 - goes for the height
41:04 - okay
41:05 - hopefully that's clear uh that's why
41:07 - we're doing that all right so now that
41:09 - we've lit this on the screen we need to
41:10 - update the screen
41:12 - so Pi game
41:14 - dot display
41:16 - dot update then we are simply going to
41:19 - pause so we're going to say Pi game
41:22 - dot time
41:23 - dot delay I'm going to delay for 4 000
41:26 - milliseconds which is four seconds and
41:29 - then I'm going to break
41:31 - which will break this while loop and
41:33 - will end the game
41:34 - okay so let me quickly run through we
41:37 - generate the text we draw it onto the
41:39 - screen now since I'm not doing this in
41:41 - the draw function I need to manually
41:42 - update the displace we actually see that
41:44 - appearing then we just freeze the game
41:46 - so this is just delaying everything for
41:48 - four seconds just so you can see the
41:50 - text and then we break and the game ends
41:52 - if you wanted to you could call the main
41:54 - function again or you could have the
41:55 - game Run a second time you can do
41:57 - whatever you want here you could say how
41:58 - long you've lasted whatever you can add
42:01 - a scoreboard but this is where I'm going
42:02 - to leave it for now so just run make
42:04 - sure this is working and then that's
42:06 - pretty much going to wrap up this
42:07 - tutorial okay so let's just see if we
42:09 - can Collide here
42:10 - and we do and notice it says you lost
42:13 - and then the game is going to end and we
42:16 - can run it again okay fantastic so let
42:18 - me zoom out a bit here so you guys can
42:19 - read some more of the code I'll kind of
42:21 - scroll through it slowly obviously all
42:23 - this code will be available from the
42:25 - link in the description at my GitHub but
42:27 - that was an introduction to python game
42:30 - development I hope that this was
42:32 - complicated enough that it taught you
42:33 - some stuff and showed you how to create
42:35 - a game yet simple enough that you could
42:37 - get through without too many headaches
42:38 - please let me know your feedback in the
42:40 - comments down below and I look forward
42:42 - to seeing you in another YouTube video
42:44 - don't forget to check out
42:45 - programmingexpert.io and blockchain
42:47 - expert which will be in the link in the
42:49 - description thanks again for watching
42:51 - and I'll see you in another one
42:54 - [Music]
42:59 - foreign

Cleaned transcript:

foreign I'll give you an introduction to python game development by walking you through creating a simple fun yet extensible game we'll make this game using the pi game module which is a simple 2D Graphics library in Python that allows you to create a variety of games in case you're curious I have tons of different Pi game tutorials on this channel and a recent one I posted actually shows you how to build an entire platformer game here we'll make something much more simple just to get through the basics and get you up and started as fast as possible let me show you a demo of what we're going to build so on the screen here you can see our game again this is fairly straightforward we have a background we have a rectangle that you could change to some kind of sprite or character if you wanted to and then we have projectiles that are falling on the screen as we progress further these projectiles will get faster and more of them will fall and eventually if we are to collide with one of these rectangles and it will tell us that we lost obviously you could go and add lives you can make different levels you can make this game really completely your own but I wanted to show you the basics covering things like movement collisions projectiles backgrounds and all of that kind of fundamental stuff that once you know you can make a ton of different games with so with that said let's get into the video now the first thing I want to tell you is that if you are interested in becoming a software engineer or learning more about python go and other programming topics I do have a course called programmingexpert.io I'll leave a link to that in the description I also just released a blockchain course so anybody interested in web 3 blockchain technology creating smart contracts solidity Etc you can check out my course blockchain expert again from the link in the description so the first thing we need to do when we're going to be working with this Pi game module is we need to install Pi game now to do that you're going to open up a command prompt or a terminal and type the following command which is PIP install Pi game now for some reason this command does not work for you you can try to run the command pip 3 install Pi game and if neither of those work for you I will leave two videos in the description and I'll kind of throw the thumbnails up on the screen that explain to you how to install Pi game all right so now that Pi game is installed we can start using this library now I've used this a ton of times but I'm going to walk you through step by step how we set everything up so the first thing to do is go into a new python file you can see I'm in one here in vs code you can work in any editor that you like and import the pi game module now while we're up here we're going to import a few other modules we're going to use for this game so we're going to import time and we are going to import random like that perfect all right next thing we're going to do here is set up our pygame window now the first thing you need whenever you're working in pi game is some kind of window this is really the place where you can draw different objects and actually have your game running now for your window you need a width and a height so I like to Define my width and height at the top of my program in all capitals just that it's clear that these are constant values and they're not going to change so for the width I'm going to make this 1000 and for the height I'm going to make this 800 and that is in pixels now if you are working on a small display chances are this will be too large for you so you can make these values smaller so the window will actually fit on your screen okay now that we have the width and the height we're going to say win standing for our window is equal to pygame dot display dot set underscore mode and inside of here we're going to pass a tuple with the width and the height make sure you have two sets of parentheses here and inside of this intercept you have your width and then your height and make sure you spell the width correctly okay the next thing we can do is set a caption for our window this is going to be the name at the top of the window to do that we can say pygame dot display dot set underscore caption and then we're going to pass a string here and I'll just call this something like space Dodge but you can call this whatever you want all right before we go any further let's run our code here so I'm going to go and type Python and then main.pi whatever editor you're working in I assume you know how to run your python script in vs code you can also press this button okay so when I do that you'll notice the window kind of popped up and then it disappeared immediately that's because we don't have any Loop kind of running that keeps our program alive you can see again when I run this window pops up and then it closes in a minute we'll make sure that Windows stays live and I'll show you how to do that perfect so now that we have our window here our width and our height we need to set up what's known as the main game Loop now whenever you're working in pi game you need a loop typically a while loop that is going to run while the game runs right so that actually keeps it alive the while loop will do things like check for Collision check for movements or key presses and then adjust what's being displayed on the screen so what we're going to do is create a function called main this is really where the main game logic is going to exist for now we're going to create a variable called run we're going to say this is equal to true and we're going to say while run and then inside of here is going to be our main game Loop so the first thing that I always do inside of my game Loop is I check to see if the user pressed the x button on the window if they did that then I want to close the window it's not automatically programmed in you need to handle that key press yourself so to do that I'm going to say four event in pygame dot event dot get and this is essentially a list that contains all of the different events that have occurred in the last what do you call it kind of iteration of this Loop then what we do is check for the x button event so we're going to say if event DOT type is equal to pygame Dot and then in all capitals quit what we are going to do is say run is equal to false which will then end this while loop and we are going to break out of the for Loop because there's no reason to continue checking the events if you've hit the quit button then at the very end of our function here we're going to say Pi game dot quit and pygame.quit will just close the pi game window for us alright so very quick recap of what we've done here we've said run is equal to True while the variable run is equal to true we're going to check all of the different events that are occurring this again will give us events like key presses Mouse being moved all that kind of stuff as well as if we hit the button in the top right hand corner that x button which is the event.type equal to pygame dot quit that's if that's the case sorry we're going to say run equals to false we're going to break out of this for Loop and then that will force us to have this statement here which will quit the pi game window now what we need to do is call this main function so we can test this out we're going to say if underscore underscore name is equal to underscore underscore main like that then we are going to call the main function now what this statement is doing right here is making sure that we are directly running this python file so we're running the file itself we're not importing it because if we were to import it or if we were to not have this line for example and we were to import this file from another python file it would start running our game when we only want to do that if we directly run this python file so hopefully that makes a bit of sense but this is just checking if you've run this file directly whereas if you were to import it this is going to be false okay so now let's run our code python main.pi notice the window appears and it has space Dodge as the caption then if I press this x button we can close out of it that only works because of the code that we've written here fantastic so the next thing I want to do is have a background image and then I want to have a character that can move around on the screen so let's start with the background image well for our background image we need some image that we're going to display on the screen now notice here that I actually have one BG dot jpeg now this is a larger image which is just a space background all of this code will be available from my GitHub including the image so if you want to download this exact image you can do that by going to the link in the description if you don't want this image and you just want your own background image then just save an image you can call it whatever you want but put it in the same directory as your python script and then I'll show you how we can use that image as a background so at the top of our program here we're going to say BG sending for background is equal to pygame dot image dot load and then we are going to load the name of our file which in my case is bg.jpg like that that's all you need to do to actually load this image into pie game now if you named your something else obviously you're going to change the name to match that and if you had it for example inside of a directory then you would do something like slash Images slash and then vg.jpg there's a few other ways to go about doing that but in this case we're just going to load directly from the same directory that this python script is in okay now that we have our background image we actually need to put that on the screen now I like to do all of my drawing in a separate function just to keep it very clear and kind of organized so I'm going to create a function here called Draw inside of this function for now I'm going to draw this background image onto the screen to do that we're going to use our window which is this Capital wind variable and we're going to say win dot blit now blit is a special method that you use when you want to draw an image or a surface that's what's referred to in Python onto the screen so we are going to BLT the background image and then we need to pass the coordinates of the top left hand corner of this image so in pi game when we're talking about our coordinate system 0 0 is the top left hand corner of the screen so if I run my code here uh this should still be okay oops that's not working let's do this you can see that where my mouse is this is zero zero if I go all the way over to the right here now we are at whatever the width of the screen is which is a thousand and then the y coordinate of zero if I were to go down here now we are at the width of the screen which is a thousand and then the height of 800 or the height of whatever our screen is because that's kind of how the Y is incremented so rather than y going up the Y actually goes down zero is the top and as you go down to the bottom you increase your y value X is the same as normal starts at zero and as you go to the right it increases meaning down here we have an X of 0 and we have a y of the height of the screen okay so that's the coordinate system now I want my background image to fill the entire screen so I'm going to put 0 0 as the coordinate of where the top left hand corner of this background image should be placed then the width and the height will fill the screen lastly we need to say Pi name dot display dot update this is going to refresh the display which means any draws that we've done this is a drawing event will actually be applied and put onto the screen every time you update it takes all the draws and applies it if you don't have an update then nothing's going to happen on the screen fantastic so now before we exit our while loop here we're going to call this draw function so now every single frame we're going to call the draw function and it's going to continue to draw this on the screen let's go ahead and run our code okay so when we run it you can see that we get our space image appearing now in my case my space image is quite large so it actually fills the entire screen for some of you your image might be a little bit smaller and you might want to scale it up or make it larger so that it fills the screen now to scale your image you can do the following you can write High game dot transform if we can spell that correctly dot scale and then you can pass the image which in this case is the image that we want to load and then the size that you want to scale this image to so in my case I want to scale my image to be width height so it's going to be this now when you do this type of scaling it is not going to preserve the aspect ratio but there is different transform functions that'll allow you to look up from the documentation that let you actually scale it based on a factor so you can scale by 2x 3x 4X Etc rather than scaling using kind of this uh what do you call it width height system hopefully that makes a bit of sense but this will not preserve your aspect ratio if you use a different scale function it will there's one that I believe is scale 2x which just takes the image and scales it up two times the size okay so now this should scale our image to be the width and the height let's quickly test this out and let me just select this interpreter so this will keep working now so now you can see our image looks a little bit better we've kind of made it the exact size of our screen rather than having it be too large and overflow the screen okay so now we have our background image and we have our main event Loop we have kind of the screen appearing the next thing we want to do is create a character that can move around so let's do that so for our character we're going to go inside of our main Loop here and we're going to say player is equal to a pie game dot rectangle with a capital R and it's just going to be wrecked and then we're going to pass the X position y position width and height of our player so before I go here I'm going to create two variables one which is the player width which will make equal to 40 and another which is the player height which will be equal to 60. I like to declare all of my constant variables in capitals at the top of my program so I can easily change them and update all of my code by just changing one variable here so now I'm going to go to my player which is pygame.rectangle and we're going to pick a starting X and a starting y position for our character now remember that this is going to be the top left hand corner of where we are drawing the player so we can pick any x coordinate we want I'm going to pick 200 and then for the y coordinate we want this player to be at the bottom of the screen so to do this dynamically we're going to take the height of the screen and we're going to subtract the height of the player so we take height minus player height that gives us the top left hand corner where we draw this player so that means that since our height is 800 and our player height is 60 we're going to draw this at 740 meaning the bottom of the player will be directly at the bottom of the screen you'll see what I mean when we draw this but that's why I'm using this math here next we're going to pass the player width and the player height so it goes X Y with height whenever you're using a rectangle in pi game okay so now that we have our player we want to draw this player onto the screen so I'm going to pass this player rectangle to my draw function and then I'm going to go to draw and I'm going to accept my player rectangle now I'm going to draw it to draw my rectangle I'm going to say Pi game dot draw Dot rect and then the first thing I'm going to pass is where I want to draw a rectang well I want to draw a rectangle on my window so I pass window the next thing I pass is the color that I want my rectangle to be in this case I'm going to use red now in the newest version of Pi game which most of you will be using you can just use string colors so red white black orange any color you would know or you can use RGB so if I use RGB then that would be something like 255 0 0 where I have 255 red 0 blue and zero green RGB I think I read it in the in the wrong order red green blue yeah sorry so zero green and zero blue but you get the idea you can use an RGB color code or for Simplicity you can just write the color in which in this case is red okay next we are going to put the rectangle that we want to draw and that rectangle is our player so our player is a pi game rectangle which is an accepted argument to this method here so we say we're drawing it on the window it's a red rectangle and this is actually the coordinates of the rectangle right so it's at 200 it's at this height and it has this width and this height perfect now that we have that we should see a red rectangle appearing when we run our code there you go we have our rectangle showing up on this screen fantastic now that we have a rectangle we want to move it around now to move the rectangle is as easy as adjusting the x coordinate of this rectangle so let's have a look at how we do that the first thing we need to do is listen for different key presses so if the user presses the left Arrow key I want to move to the left which would be reducing its x value if they press the right arrow key I want to move to the right so I'm going to say keys is equal to Pi game dot key dot get underscore press now this will give you a list of all of the keys that the user has pressed and tell you well if they press them or not so what I can do here is say the following I can say if keys and sorry I said list I mean dictionary and then I can say Pi game dot k underscore left which is the code for the left Arrow key if that's the case then I can take my player dot X and I can subtract from that the player velocity which is a variable that we're going to Define now at the top of our program so we're going to say player what player Val sorry is equal to five let me just move this down okay so we're saying if Keys pygame dot k underscore left you may be wondering how I found this I just know it because I've used it many many times before but this is the uh kind of what do you call it code for the left Arrow key if you wanted for example the a key then it would be K underscore a or k underscore B or C Etc if you wanted like the shift key it's K underscore shift there's a whole um kind of documentation where you can look up all of the key codes from the pi game website you can also just look up Pi game key codes and you'll probably find a big list that tells you but the common ones are going to be like space shift c a w Etc or left right so on okay so if they are pressing the left Arrow key then we're going to subtract the Y the reason we subtract sorry not the Y the x is because we want to move them left so by subtracting their x coordinate we move them closer to the zero zero position so to the left that's why we're doing this subtraction now we have the player velocity set at 5 which means every time that you press this key we're going to go five pixels backwards you can adjust that velocity if you want the character to move faster or slower now of course we're going to do the same thing for the other Arrow key so pygame.k underscore right and then we say if I can get rid of that crazy autocomplete player dot X plus equals the player velocity one thing to note here when I use dot X that's simply adjusting the first value here so we start at 200 then we go back by the velocity or forward by the velocity right that's how you access that you can also access the width property and the Y property as well as the height property and that corresponds with the values up here okay fantastic so now we should be able to move our player because we have this movement code so let's run and see if we can do that and using my arrow keys you can see that I can move my player however it's moving extremely fast now the reason for this is that we haven't set up a clock or kind of a timer that regulates how fast our PI game Loop is running now for some of you if you're on a slower computer you're going to run that and be like oh the speed is fine it works okay the issue is that the speed that this while loop runs at is what determines how quickly our character is moving if I'm holding down the key and this while loop is running really really fast I'm going to move fast if it's running very slow say you're on a slow computer then this is going to move slow we don't want that we want this Loop to always run at the exact same speed so that no matter what computer you're on it's going to run at the same pace and your character is always going to move at the same speed to do that we need to set up a clock object so we're going to say clock is equal to Pi game dot time dot Capital C clock then we're going to go here we're going to say clock dot tick and then we're going to put 60 which is the maximum number of frames per second or number of times that you want want this while loop to be running so you create a clock object here and then inside of your while loop you have clock dot tick this is essentially going to delay the while loop such that it will only run a maximum of 60 times per second if you wanted to run faster obviously you would adjust this value to be whatever the fixed FPS value is that you would like okay now that we have clock.tick you'll notice that when I run my code my character now moves a lot slower so again you could speed this up by increasing the velocity and then no matter what computer you're on it's going to be moving at a similar or the exact same speed okay so we're moving but notice here that I can actually move completely off the screen we obviously don't want that for a game otherwise you can just dodge by going off the screen so we need to make it so you can't move if you're hitting the edges of the screen to do that we just need to come here to our conditions where we're checking if you're pressing the left Arrow key and right arrow key and add a guard Clause that makes it such that you cannot move if you're going to be moving off the screen so the way we do this is we add another condition here with and we say if Keys Pi game.k underscore left and we have the player.y minus the player underscore velocity is greater than or equal to zero now the reason we're putting this here is we're saying okay we're about to subtract the player velocity from the x coordinate so if when we subtract this the player is still above zero or greater than zero so their x coordinate is greater than zero then that's okay we can subtract this but if it's not so if we're going to be like negative 1 negative 2 negative 3 Etc don't let them move hopefully that's clear why we're doing that and that's why we have this code here now let's copy this and put the same thing here except now we need to change this a little bit because we're adding to the velocity or we're adding to the x coordinates sorry so we have player What DOT X apologies plus player.vel and then we're going to say plus player dot width and this is actually going to be less than or equal to the width of the screen now this one is a little bit longer because we have to account for the fact that player.x is the top left hand corner of our player so we need to add the velocity kind of like we did here but in the opposite direction because we're increasing it not decreasing it and we also need to account for the width again this is the top left hand corner then we have a width of in this case 40 pixels so we need to make sure the x coordinate plus the width plus the velocity is going to be less than the width of the screen before we allow the character to move to the right okay now let's run this and see if it works and notice when I go to the right here I can't move any further than the very edge of the screen and same with the left hand side okay we now have a character that is moving around the next thing we need to do is keep track of the amount of time that has elapsed we then need to create some projectiles that are coming down on the screen and then check for collision with those projectiles currently we're about halfway done if you're still following along at this point congratulations give yourself a pat on the back believe it or not most people do not make it this far alright so there's a few different kind of directions we can go in here in terms of what we want to write next but I think the easiest is going to be to handle the time so we know how much time has elapsed to do that we are going to create a variable here called start time start time is going to be equal to time dot time time dot time is going to give us the current time so we're going to grab the current time when the game started and then we're going to create another variable here called lapsed underscore time and make this equal to zero then beneath our clock.tick we're going to say elapsed underscore time and this is going to be equal to time dot time minus the start time so we're essentially storing what time we started the wall loop at then every time we iterate we're getting what the current time is and subtracting that from the start time which will give us the number of seconds that have elapsed since we started the while Looper since we started the game now that we have the elapsed time we can pass that to our draw function and we can draw the elapsed time on the screen so we're going to go to our draw function we're going to take elapsed underscore time as another parameter here and then we're going to draw this now to draw this we actually need to use a font because we're going to have text on the screen that says time you know two seconds three seconds Etc so what we need to do is initialize our font module create a font object and then use that font to render some text on the screen so at the top of our code we're going to say Pi game dot font dot init we just need to initialize the font module don't ask me why we need to do this it's a requirement from PI games we just do that at the top of our program then we're going to come down here and we're going to say font is equal to Pi game dot font dot sys font with this capitalization and then we can pass any of our system fonts in this case I like to use Comic Sans and the size of our font which I will choose as 30. you can change this to be whatever you want there's different types of fonts you can put in here no Times New Roman aerial Etc and then whatever the size is I'm just going to make it 30. so again the procedure is initialize the font module create a font object here and then use the font object to create some text which you can render on the screen so to do that I'm going to say my time underscore text inside of my draw function is equal to font dot render and then I'm going to pass the text I want to render now in this case I'm going to say time colon and then inside of my F string here I'm going to say round and then a lapsed underscore time and then I'm going to put an S here then I'm going to put a 1 and I'm going to put the color which is white don't worry I'll go through this slower I know that was pretty fast so we have render the first thing we do is pass the string or the attacks that we want to render on the screen now I'm using an F string available in Python 3.7 and above and this allows me to embed a variable directly inside of the string and have it rendered as a string so I'm saying time colon and then I'm rounding the elapsed time to the nearest second and I put this inside my curly braces so that I can directly use this variable in this round function then I put an S so that I have you know three four five whatever seconds next I put one one stands for antialiasing don't worry about this too much but it just looks makes your text look a little bit better and then you pass the color that you want this text to be in this case I want white okay now that we have our text we need to render this on the screen so we're going to say win dot bullet and then we're going to Blitz the time underscore text and the position we're going to BLT it at is 10 10. so just we have a little bit of padding from the top left hand corner of the screen 10 pixels x 10 pixels y just moves us a little bit off the edge of the screen so it looks a little bit better all right now we should be rendering the uh time so let's see if that works by running our code and notice that we have our time it is counting up uh and it will keep displaying whatever the current time is awesome so now that we have our time the next thing we need to do is generate some projectiles now we're going to generate our projectiles on kind of a counting increment where the increment at which we generate them gets shorter and shorter meaning we kind of generate more of them uh more quickly as the time progresses making the game a little bit more difficult obviously you can mess with this mechanic however you'd like but I wanted to show you how we do some kind of dynamic rendering here so we're not just putting one on the screen say every one second it gets a little bit more complicated than that all right so to do this we need to have a few variables we're going to say star I'm going to call those little projectiles stars even though I know they don't really look like them I'm going to say star add increment is equal to 2 000 milliseconds which means the first star that we add will be added in 2000 milliseconds then we are going to have star underscore count equal to zero and this is actually just going to be a variable that tells us when we should add the next star I know it's a little bit misleading it's not telling us how many stars we have it's going to be counting so that we know when we get to this increment and when we should add another start of the screen okay then we're going to have an array here called stars or a list sorry and this is where we're going to store all of our different stars that are currently on the screen then we'll draw all of them that are inside of this list onto the screen okay so at the top of our code here although it doesn't really matter where you put this we're going to generate some of our stars so we're going to actually say that our star underscore count plus equals clock dot tick now I know this seems a little bit weird but what clock dot tick does is return the number of milliseconds since the last clock tick so you need to actually do it in this way to keep track of the time accurately in my case it's about 16 or 17 milliseconds between every clock tick but for you it could be slightly different so we say star count plus equals clock.tick and what this is doing is essentially counting how many milliseconds have occurred since again the last clock tick you could use this elapsed time variable but it gets a little bit more complicated based on how we're kind of keeping track of the time with this variable I know that I'm probably confusing you a little bit again this just returning number of milliseconds since last tick so you do that um to keep track of kind of the precise time in this variable all right now we're going to say if the star counts is greater than the star add increment then we're going to add stars to the screen so hopefully you see what I'm doing here this is 2000 star count is zero as soon as we have 2 000 milliseconds that have elapsed then we trigger this and then we add a star now I'm actually going to add three stars at a time but you could add a random number you could add 20 Stars you could add one start you can add as many as you want to the screen so I'm going to say four underscore in range 3 because I want to add three stars and by the way this say placeholder variable that you use when you don't want to have an increment variable like I I don't actually care about the iteration count I just want to do something three times so I say four underscore in range three okay now I'm going to generate the X position of my star because I want to randomly position them on the screen so I'm going to pick a valid x coordinate and then we'll choose a y coordinate and place the star on the screen so star X is equal to random dot Rand int and then 0 with minus the star underscore width which is a variable that I don't believe we've defined yet so let's add that variable to the top of our screen here and make that equal to let's go with 10. okay so again star underscore X is equal to random.randint0 with minus star width now the reason we're doing this is because we want to pick a random integer in the range of 0 and width again minus star with which is a valid position for the x coordinate of the star that we are generating okay we can do this because we imported the random module at the top of our program we're then going to say star is equal to Pi game Dot rect and we're going to place this at the star underscore X and at the negative star underscore height which is another variable that we need to Define so let's go here and make this equal to 20. okay now the reason I'm doing this is I want my star to start off of the screen and then move down so when I do negative star height that means I'm going to get a negative y coordinate so my star starts not at the top of the screen a little bit above the top of the screen and then as we move it down it looks like it enters the screen if instead you were to put 0 here then you would see the star kind of appear right at the top of the screen and then start moving down instead we want to see it slowly enter the screen so we do that by giving it a negative height to start okay next we pass the star width and the star underscore height and now we add this star to our Stars list so we say Stars dot append star like that okay so this now generates three random stars for us now that we have that we want to adjust our star add increment and we want to set our star count back to zero so we say star count equal to zero and before that we're going to adjust this increment so that it's slightly less than what it currently is so we generate Stars faster to do that we say star add increment is equal to the maximum of 200 and the star add increment minus 50. okay so let's just quickly go through what I did here I'm essentially saying with this maximum function pick the maximum value out of this and 200. now this makes it so that the minimum star add increment I ever have is 200 right so if star at increment is equal to 200 rather than setting it equal to 150 then 50 then 0 the negative 50 we always keep it at 200 okay so this is just the minimum value that's what I'm setting here then in most cases what will happen is since star at increment is going to be much larger than 200 in the starting case is equal to 2000 we're going to subtract 50 milliseconds so that every time that this runs 50 milliseconds kind of faster we generate another star hopefully that makes a little bit of sense but we go from 2000 to 1950 to 1900 Etc and it gets faster and faster and faster the time in which we're incrementing a star and you can obviously adjust this and change it to be whatever you want okay so that will generate Our Stars for us however if we want to see our stars then we actually need to draw them on the screen and we need to move them downwards so we're going to do both of those steps before unfortunately we can see what's going to happen here so now after we generate Our Stars after we do our events and after we do our movements we're going to move our Stars so we're going to say four star in stars and then we're actually going to make a copy of this star's list the reason I'm making a copy of the Stars list is that I'm going to be removing stars from this list that have hit the bottom of the screen or that have hit our player if that happens if they hit our player hit the bottom of the screen we want to get rid of them because we don't want to be rendering them and uh moving them when they're not on the screen that's a waste of resources so I need to make a copy of this list because if I'm modifying the list while I'm working on it I can get all kinds of weird errors so rather than doing that I make a copy of it so that I'm looping through the copy and then I can adjust or mutate the original list as I go through this for Loop so I'm going to say star.y plus equal the star velocity okay so this moves the star downwards in the y direction by this velocity because we're adding to it meaning it goes down then I'm going to say if the star dot Y is greater than the height of the screen then what I want to do is remove this star so I'm going to say Stars dot remove and then I removed the star which will remove the first instance of this or really the only instance of it from the original Stars list nice next we're going to say l if star dot Y is greater than or equal to the player.y and the star dot collide rect player then we are going to remove the star again so star stock remove star and we're going to say hit is equal to true and we are going to break out of this Loop okay you'll see why I'm doing this in a minute but essentially what we're doing with the second alif statement here is we're saying okay if the star.y was not greater than the height then we're going to check if the start at Y is greater than or equal to the player Del y now the reason we're doing this check here is because I only want to check to see if this star is colliding with the player if the star is at the bottom portion of the screen so if it's in the same y kind of plane as our player if it's not there's no point in me checking uh if the star has collided with the player right it just doesn't make any sense because if it's way above the player I don't need to check for Collision because I know it can't be colliding and in fact I need to add something here start out y plus star dot height because again we need to account for the fact that the star has a height not just a y coordinate okay so we say start a y plus start at height if that is greater than or equal to the player.y then we're going to check if the star has collided with the player so since both of these are Pi game rectangle objects that allows us to use this fancy function called collide which just tells us if two rectangles have collided so if they've collided then I want to remove this star because it hit our player I'm going to set a variable hit equal to true because we'll then look at that variable later on to see if our player has been hit by a star okay now we just want to go up here and say hit is equal to false just so that if we do end up checking this variable later on we don't get an error where it's undefined okay so I know I've done a lot there but we started by generating all of our stars we then moved all of the stars now we need to draw all of the stars so I'm going to pass my stars to this draw function I'm going to go to my draw function and I'm going to start drawing them now it doesn't really matter where you draw them but if you draw them after the player they'll appear on top of them if you draw them before the player they'll appear behind the player so pick where you want to draw them I'm going to do it after so you can see it on top of the player okay so fairly straightforward here we're going to say four star in Stars High game dot draw dot rectangle on the window with the color white r star okay straightforward same as our player we're just doing it for every single start all right so that's going to be a majority of the game done let's run it make sure it works and then we'll handle showing something on the screen when the player gets hit by a star okay so let's run and you should see that we get some stuff appearing on the screen but it looks like we got an error so what is our error here it actually didn't show up for me so let me run this one more time and we'll wait for the error message and it says star velocity is not defined okay so that's a variable that we need to Define so let's say starvel is equal to three again feel free to adjust that to be whatever you want okay now let's try it and see if our Stars start moving and there you go three stars are generated and they start moving on the screen perfect and notice that they kind of disappear when they hit the player or when they hit the bottom of the screen okay fantastic so now the last thing we need to do is just put something on the screen that says hey you collided with a star you lost the game and now we'll be finished okay great so to do that we're going to go down to the bottom of our while loop here and before our draw statement we're going to check if the player was hit by a star so we're going to say if hit then we're going to do something now really all we're going to do is just generate some text that says you lost put it on the screen kind of delay for a few seconds and that'll be it and if you want to adjust this game and kind of make it longer add levels you can do that from here so we're going to say lost underscore text is equal to our font dot render you can make a different font if you want I'm just going to use the same one I'm going to say you lost exclamation point and then one and then the color of white okay now I'm going to draw this on the screen so I'm going to say win dot Blitz the Lost underscore text and I'm going to draw this in the center of the screen to draw this in the center of the screen we do the following we say width divided by 2 minus the Lost underscore text dot get underscore width which is a method you can use to get the width of your text object divided by two and then we do the same for the height so say height divided by 2 minus lost underscore text Dot get underscore height divided by 2. okay so let me just quickly explain why we're doing this we want this in the middle of the screen but we need to pick the top left hand position of the text that puts it in the middle of the screen so you might naively think that you can just do width over 2 because that's the middle position of the screen but you can't you actually have to get the full width of the text object and then divide that by two and subtract that from width over two right so if we have um can I kind of run this let's run this and see so let's say 500 is where my mouse is right if I draw my text it's going to go this direction from my mouse so I need to shift it back half the width of the text and then draw it so that it fills the screen completely in the middle and then obviously the same goes for the height okay hopefully that's clear uh that's why we're doing that all right so now that we've lit this on the screen we need to update the screen so Pi game dot display dot update then we are simply going to pause so we're going to say Pi game dot time dot delay I'm going to delay for 4 000 milliseconds which is four seconds and then I'm going to break which will break this while loop and will end the game okay so let me quickly run through we generate the text we draw it onto the screen now since I'm not doing this in the draw function I need to manually update the displace we actually see that appearing then we just freeze the game so this is just delaying everything for four seconds just so you can see the text and then we break and the game ends if you wanted to you could call the main function again or you could have the game Run a second time you can do whatever you want here you could say how long you've lasted whatever you can add a scoreboard but this is where I'm going to leave it for now so just run make sure this is working and then that's pretty much going to wrap up this tutorial okay so let's just see if we can Collide here and we do and notice it says you lost and then the game is going to end and we can run it again okay fantastic so let me zoom out a bit here so you guys can read some more of the code I'll kind of scroll through it slowly obviously all this code will be available from the link in the description at my GitHub but that was an introduction to python game development I hope that this was complicated enough that it taught you some stuff and showed you how to create a game yet simple enough that you could get through without too many headaches please let me know your feedback in the comments down below and I look forward to seeing you in another YouTube video don't forget to check out programmingexpert.io and blockchain expert which will be in the link in the description thanks again for watching and I'll see you in another one foreign
