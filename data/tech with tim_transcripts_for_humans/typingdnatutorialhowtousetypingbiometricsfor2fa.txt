With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - youtube video
00:11 - so in today's video i'm going to be
00:13 - showing you how we can implement typing
00:15 - biometrics
00:16 - as a form of two-factor authentication
00:19 - for a website for a sign-in page or some
00:21 - application where you need to
00:22 - authenticate or log in users
00:25 - so for this video i'm teaming up with a
00:27 - company called typing
00:28 - dna and they are providing a completely
00:31 - free api
00:32 - that actually allows you to authenticate
00:34 - users based on the way that they type so
00:36 - this is super cool i had an awesome time
00:38 - building this project i'm really excited
00:40 - to show it to you guys in this video
00:42 - and again just to clarify what we're
00:44 - going to be doing is taking this api
00:46 - here i'll discuss obviously how the api
00:48 - works and kind of the flow and
00:49 - everything like that
00:50 - and we're going to be implementing it
00:52 - into a project so i'm going to show you
00:54 - how you can take a project that has you
00:56 - know kind of a standard sign in and sign
00:58 - up form
00:59 - and then how you can take this api and
01:00 - integrate it with it
01:02 - such that when users sign in it will
01:04 - actually send a request to the api
01:06 - and see if the user who signed in is the
01:08 - user that they say they are
01:09 - based on their typing biometrics now
01:12 - when i say typing biometrics
01:13 - i pretty much mean the typing pattern of
01:16 - users signing in
01:17 - so when they type in their username and
01:18 - password typing dna is going to keep
01:21 - track of their typing pattern
01:22 - so kind of the sequence of keys that
01:24 - they press and the duration
01:26 - of time between those key presses that's
01:28 - going to act as the biometrics
01:30 - it's then going to send that data to the
01:32 - typing dna api
01:33 - the api is going to kind of check that
01:35 - against previous typing patterns it has
01:38 - and then it's going to tell you whether
01:40 - or not this user is validated
01:41 - and whether or not this typing pattern
01:43 - matched so this is super cool
01:44 - i'm really excited to show this to you
01:46 - and specifically what we're going to do
01:48 - is integrate this into an existing
01:50 - project so i have a really simple
01:52 - project i've set up i'm going to demo
01:54 - it to you in just one second this
01:56 - project just has a sign in and sign up
01:58 - form
01:58 - it has a really simple flask web server
02:01 - kind of running the website
02:02 - i'll walk you through the project itself
02:04 - so you have an idea of all of the code
02:06 - that's pre-written
02:07 - and then i'll show you how we can take
02:09 - this and add it in so with that said
02:11 - let's dive in i'll quickly mention that
02:13 - this tutorial is not for beginners
02:15 - you should have some familiarity with
02:17 - javascript and web development
02:19 - you don't have to be an expert you just
02:20 - have to kind of know a little bit about
02:22 - it to be able to follow along
02:23 - so anyways i'm going to get into the
02:24 - demo now and show you what we're going
02:26 - to be building
02:27 - all right so i've got the website up
02:29 - here now this is actually the finished
02:31 - implementation
02:32 - this is not the starter project although
02:34 - the starter project
02:35 - looks almost identical and again in the
02:37 - starter project it has the fully
02:39 - functioning website
02:40 - except the sign in and sign up forms are
02:43 - not kind of
02:44 - coded out yet or they're not hooked up
02:45 - to the back end so we'll have to hook
02:47 - those up to the back end when we
02:48 - actually start working on this
02:50 - now the point of this website was to
02:51 - stay as simple as possible
02:53 - just to make it really easy and really
02:55 - clear on how we do the implementation
02:57 - i don't want to confuse you with you
02:59 - know a really complex website
03:00 - just wanted to spin something up that
03:02 - would be kind of usable
03:04 - and that we could actually test this api
03:06 - with so you can see here i have a
03:07 - website i'm using bootstrap and
03:09 - this is just standard html i have a home
03:11 - page a
03:12 - login page and a sign up page now on
03:15 - the sign up page we'll actually start by
03:17 - just creating an account so to create an
03:18 - account i'm going to say tech with tim
03:20 - let's just go with 12
03:21 - at gmail.com and notice that this little
03:24 - typing dna thing here
03:26 - is going up and down indicating that
03:28 - it's keeping track of my typing pattern
03:30 - now we're not going to have to code this
03:31 - out this is provided by typing dna
03:34 - we just need to add it to the front end
03:36 - of our website so it can keep track of a
03:38 - user's typing pattern
03:40 - all right now that we have that i'm
03:41 - going to type a password so i'll go with
03:43 - tim12345
03:44 - and then i will press submit now when i
03:46 - do that it says we need to collect some
03:48 - typing data from you
03:49 - you may be asked to fill out this form
03:50 - multiple times so the way that this api
03:53 - works is that you need a certain number
03:54 - of entries or typing patterns
03:56 - so that typing dna can actually validate
03:59 - another typing pattern against them so
04:00 - you need i think
04:01 - three typing patterns to start and then
04:03 - as soon as you have three typing
04:05 - patterns
04:05 - you can actually start using the next
04:07 - patterns you send to the api
04:09 - as like authentication patterns rather
04:11 - than
04:12 - let's say enrollment patterns or
04:14 - patterns that are going to be validated
04:16 - against
04:16 - so anyways i'll talk all about this
04:18 - later on just want to give you an idea
04:19 - of why we have to type this multiple
04:21 - times
04:22 - so techwithtim12 at gmail.com
04:25 - and then tim12345 i think it was 12 that
04:28 - i used okay we need to
04:29 - collect some typing data from you you
04:31 - may be asked to fill out this form
04:32 - multiple times
04:33 - all right so tech with tim12 at
04:36 - gmail.com and then tim one two three
04:38 - four five okay
04:40 - let's submit that it's going to ask me
04:41 - one more time and now this time when i
04:43 - type in my username and password it's
04:45 - actually going to tell me
04:47 - if i am validated so if this typing
04:49 - pattern matches the patterns that it's
04:51 - collected previously
04:52 - so techwithtim12 at gmail.com
04:56 - tim oops one two three four five okay so
04:59 - submit
04:59 - and notice we get typing dna indicated
05:02 - that there was high confidence
05:03 - in your login so there we go we are now
05:06 - signed in
05:07 - that validated us and this is what i'm
05:08 - going to be showing you how to build
05:10 - now the reason why this is great is
05:12 - because whenever you sign into a website
05:14 - you're going to have to type in your
05:16 - username and password anyways right so
05:17 - this is an
05:18 - extra layer of security that you can add
05:20 - that's fully automated
05:22 - and that doesn't require the user to do
05:23 - anything else that they wouldn't
05:24 - normally have to do
05:26 - so you no longer need to whip out your
05:27 - phone and typing type in like a
05:29 - two-factor code
05:30 - or go to your email and type in that
05:32 - code or anything like that
05:33 - this is just a really great added
05:35 - security layer that is pretty easy to
05:37 - implement it's kind of like why wouldn't
05:39 - you just add it
05:40 - to your website now that said this
05:42 - should not be used as the primary form
05:44 - of authentication
05:45 - this obviously can fail if you're typing
05:47 - with one hand you're typing really slow
05:49 - or you're trying to you know break the
05:51 - authentication you will break it you
05:53 - have to type the same way
05:54 - most of the time when you're typing in
05:56 - your username and password and if you're
05:57 - like deleting characters and retyping
05:59 - characters this may fail as well
06:01 - but most of the time it's going to work
06:03 - and as i said it's kind of just like
06:04 - why wouldn't you add it in it's super
06:06 - simple automated and i just think it's
06:07 - actually really cool
06:08 - so that is the demo now i'm going to
06:10 - show you the starter project which
06:12 - you're going to need to download to get
06:14 - started
06:14 - we're then going to create an account
06:16 - with typing dna
06:17 - this account is just so we have access
06:19 - to the api and we can get our api key
06:21 - and api secret
06:22 - i will then very briefly discuss the
06:25 - flow of our application so how things
06:27 - are going to be communicating with each
06:28 - other
06:28 - then we will jump into the code and
06:30 - start doing this implementation
06:32 - so there is a github repository down
06:35 - below in the description in fact
06:36 - all of the stuff i show you here will be
06:38 - linked down below as well as timestamps
06:40 - for when i go over
06:41 - certain parts of the implementation
06:43 - anyways what you need to download is
06:45 - this typing dna starter code
06:47 - folder now it's a github repository if
06:50 - you're not familiar with github all you
06:51 - do is press on code and press
06:53 - download zip that will download the
06:54 - entire project and then you will have
06:56 - the finished project
06:58 - which is just the code i wrote before
06:59 - this video that i'm going to be kind of
07:00 - referencing
07:01 - and then i have the actual starter code
07:04 - which just has a very bare bones website
07:06 - that functions but doesn't really do
07:07 - anything we need to kind of hook up some
07:09 - different components
07:10 - so you want to download this folder or
07:12 - you'll download that entire thing and
07:13 - then you want to go into this folder
07:15 - and this is where you can follow along
07:16 - with me as we do the implementation
07:18 - now notice here i also have links to
07:20 - some of the documentation we'll be using
07:22 - but anyways go to the description
07:23 - download this project that is how we get
07:25 - started
07:26 - now once you've done that what you're
07:28 - going to want to do is go to the typing
07:29 - dna
07:30 - website again link in the description
07:32 - and you can read through this and kind
07:33 - of see how it works it's actually
07:34 - interesting we don't have to use typing
07:36 - dna just for logins we could use it for
07:38 - credit card payments
07:39 - uh for just other texts that you may be
07:41 - typing in this is just an example of how
07:43 - you do this specifically for login but
07:45 - you can use typing biometrics for a ton
07:46 - of other stuff
07:47 - so anyways you're gonna go here you're
07:49 - gonna go to check out our api
07:51 - now free you're gonna press on that and
07:53 - it's gonna bring you to a page that
07:55 - looks like this now
07:56 - actually it should probably bring you to
07:57 - a sign up or sign in page
08:00 - on that page you're obviously going to
08:02 - create an account again totally free
08:04 - and then you should be brought to some
08:05 - like dashboard like this once you're
08:07 - here you want to pay attention to this
08:08 - api key
08:10 - and this secret we will be using these
08:12 - later on when we actually communicate
08:14 - with the api
08:15 - so now that's all set up i'm going to
08:17 - walk you through kind of the flow
08:19 - and just a little bit of the
08:20 - documentation for typing dna
08:22 - and then as i said we will discuss the
08:24 - starter project and then do the
08:25 - implementation
08:26 - so the api documentation is linked in
08:28 - the description it's also really easy to
08:29 - find you can find it here from like the
08:31 - tutorials page or
08:32 - the api documentation page and this kind
08:35 - of illustrates how this actually works
08:37 - so the idea is you're going to have a
08:39 - typing biometrics recorder
08:40 - this is a javascript class that's
08:42 - provided by typingdna
08:44 - in fact this is the file right here
08:47 - typingdna.js
08:48 - we're literally going to download this
08:49 - file bring this into our project
08:52 - and this is what's going to be kind of
08:53 - sitting on the front end and actually
08:55 - keeping track of what the user is typing
08:57 - and their
08:58 - typing pattern we're then going to use
09:00 - this class to get the user's typing
09:02 - pattern
09:02 - we're going to send this typing pattern
09:04 - to the back end of
09:05 - our website so from the front end it's
09:07 - going to go to the back end
09:08 - the back end of our website is going to
09:10 - send a request to the typing dna
09:12 - api there's actually only one end point
09:14 - we need to use that automatically knows
09:16 - whether we're
09:17 - verifying or whether we are enrolling
09:19 - new typing patterns
09:21 - it's called the auto api we're going to
09:23 - send that typing pattern and that's
09:24 - going to send back a response to us
09:26 - that will tell us this pattern was
09:28 - registered we validated this user or
09:31 - whatever it is that it needs to tell us
09:33 - so that is the idea
09:34 - then we are going to get that response
09:36 - on our back end
09:37 - we're going to send that response back
09:39 - to the front end and then we're going to
09:41 - display to the user
09:42 - whether or not they were validated now
09:44 - of course you don't have to send this
09:46 - back to the front end
09:47 - the reason we're doing that is just so
09:48 - we have some visual that tells us yes
09:50 - this worked or
09:51 - no this didn't work now the idea is when
09:53 - you actually use this in a real world
09:54 - application
09:55 - you would not allow a user to sign in
09:57 - unless they were validated by typing dna
10:00 - now if they were invalidated you could
10:01 - ask them for another form of two-factor
10:03 - authentication or whatever else you
10:06 - might want to do
10:07 - so that is kind of the idea and the flow
10:09 - and again the api documentation is
10:11 - available in the description
10:13 - now notice that there's a few different
10:14 - ways to use this so there's same text
10:17 - any text and a few other methods that
10:19 - you can use to kind of send
10:20 - typing patterns so in our case we're
10:22 - going to be keeping track of the typing
10:24 - pattern of a user's email and password
10:26 - now this is because we want to have the
10:28 - same text the user is typing in
10:30 - and we're collecting the typing pattern
10:32 - for every single time
10:34 - we're performing like a validation we're
10:35 - sending that text
10:37 - to the typing dna api but you can see
10:39 - here that it's saying like an average
10:40 - email and password contains 30
10:42 - characters
10:43 - and that is enough characters to give us
10:45 - a relatively high accuracy
10:47 - or confidence rate in being able to
10:49 - validate a user so the more text you
10:51 - have the better this is going to be
10:52 - and if we use both the email and the
10:55 - password that should ideally give us
10:57 - enough text
10:58 - now if you're going like under 15
10:59 - characters of text this isn't going to
11:01 - be very accurate
11:02 - so just keep that in mind the more text
11:04 - the better so you want to use as much
11:06 - information as you can
11:07 - but you need to ensure that the user's
11:09 - always going to be typing in the same
11:10 - information and sending the same text
11:12 - pattern otherwise you're going to have
11:14 - stuff that's not super accurate
11:16 - all right so that is kind of the idea
11:19 - now i guess i should just walk you
11:20 - through the starter code i have this
11:22 - open in visual studio code
11:24 - i will show you how to run this project
11:26 - and install the dependencies that you
11:27 - need
11:28 - so you can see here that i have this
11:30 - website folder this again you would have
11:31 - found just from the github
11:33 - and right away there's this
11:34 - requirements.txt file now of course
11:36 - we're going to need python installed
11:38 - we're using flask which is a
11:39 - python backend web framework and what
11:42 - we're going to do is install flask and
11:43 - install flask sql alchemy which we will
11:46 - use for our really simple database that
11:48 - we're going to have
11:49 - that keeps track of track of users
11:51 - emails and passwords
11:52 - so what we need to go do is go to some
11:54 - terminal or command prompt depending on
11:56 - the operating system you're on
11:57 - and we're going to use pip to install
11:59 - these packages
12:00 - so you're going to go to your command
12:01 - prompt and you're going to type pip
12:03 - install
12:04 - and then hyphen r and then this is
12:06 - requirements.txt
12:08 - now make sure you're in the correct
12:09 - directory so you're beside or
12:11 - in the directory where the
12:12 - requirements.txt file is and you run the
12:14 - command
12:15 - pip install hyphen r requirements.txt
12:18 - that should install what you need in
12:20 - your python interpreter if for some
12:21 - reason this doesn't work
12:23 - try pip 3 install hyphen
12:25 - requirements.txt
12:26 - if that doesn't work for you try python3
12:30 - hyphen m pip install hyphen
12:33 - requirements.txt
12:34 - if that doesn't work for you try python
12:36 - hyphen m pip install requirements.txt
12:39 - and if that doesn't work for you i have
12:40 - two videos in the description
12:42 - or linked in the description sorry that
12:43 - will tell you how to fix this command
12:46 - so anyways get flask installed get flask
12:48 - sql alchemy installed
12:50 - and then we're pretty much ready to go
12:51 - so first of all to run this project and
12:53 - let me just close the other instance
12:55 - that i have running on my other screen
12:57 - what we need to do is go to this main.pi
12:59 - file and just run this file that's
13:01 - literally all you need to do
13:02 - so from vs code i will press the run
13:04 - button
13:05 - it's going to say no module called flask
13:08 - okay so i need to just change my python
13:10 - interpreter
13:11 - let me just do this quickly in visual
13:13 - studio code i think this is the one i
13:14 - want to use
13:16 - you guys shouldn't have this problem
13:17 - it's just because i have a ton of python
13:18 - interpreters okay let me change this
13:20 - again
13:21 - what's the one i want to use let's see
13:23 - if this is the right one and okay so
13:24 - when i have the correct python
13:26 - interpreter that has flask installed
13:28 - when you run this it will say that you
13:29 - go to the following url
13:31 - so 127.0.0.1 colon 5000
13:35 - if you go to that url in vs code i can
13:37 - control click
13:38 - it will bring you to the website so
13:40 - that's all you kind of need to know to
13:41 - run
13:42 - the starter code and you can leave this
13:44 - starter code running
13:45 - while you are actually working on the
13:46 - project one quick tip here though
13:49 - if you have this running and you update
13:51 - any javascript what you need to do is
13:53 - right-click if you're in google chrome
13:55 - go to inspect element and then hard
13:57 - reset
13:58 - and clear the cache you just need to
14:00 - clear the cache so that it refreshes the
14:01 - javascript for the website
14:03 - uh just keep that in mind if your
14:04 - javascript's not working clear your
14:06 - browser cache and then that that should
14:07 - work for you
14:08 - okay so that is how you run this project
14:10 - let me just run you through
14:11 - kind of how this is coded out so that
14:14 - you have an idea of what we're actually
14:15 - going to be doing here
14:16 - so this is flask i have a ton of
14:18 - tutorial series on flask if you're
14:19 - unfamiliar with it
14:20 - you're welcome to watch that this is not
14:22 - going to be a tutorial on flask or on
14:24 - python web frameworks
14:25 - it's just going to discuss how you
14:27 - implement typing dna into a project
14:29 - so this main dot pi file says from
14:31 - website import create app
14:33 - it runs that function and then it runs
14:35 - our flask application in debug mode
14:37 - that's all this is doing
14:39 - if you go to this website folder which
14:40 - is in the same directory as main.pi
14:42 - and you go inside of here to the init.pi
14:45 - file this file runs as soon as this
14:47 - folder is imported by another file
14:50 - so whenever you have underscore
14:51 - underscore nit underscore underscore.pi
14:54 - it makes whatever folder it's inside a
14:56 - python package
14:57 - which means when you import that package
14:59 - this file runs
15:01 - so when we import that it runs this file
15:03 - we set up a really basic
15:05 - sql alchemy database this is an sqlite3
15:08 - database
15:08 - that's sitting locally on our computer
15:10 - you can see database.db
15:12 - right here then what we do is we create
15:14 - and configure our flask application
15:17 - so we say the app is equal to a new
15:18 - flask instance that uses the name of the
15:21 - file
15:22 - we then have the configuration variables
15:24 - so our secret key
15:25 - this is for encrypting session data we
15:27 - then have our sql alchemy uri which is
15:30 - the location of our database
15:31 - we're calling this database.db we then
15:34 - initialize the database with our
15:36 - application
15:36 - we then import the two files that are
15:38 - going to contain our endpoints
15:40 - i'll show those to you in one second we
15:42 - register these two files
15:44 - and the way this works is we have
15:45 - endpoints these are like you know slash
15:47 - home
15:47 - slash authenticate slash login in these
15:50 - two files just to keep things organized
15:52 - so we just register them with the app we
15:54 - then import
15:54 - our model our model is just going to be
15:57 - what will actually represent our user in
15:59 - our database
16:00 - we then create the database if it
16:01 - doesn't already exist so we just check
16:03 - if the database exists
16:04 - if it does or sorry if it doesn't we
16:06 - create the database then we print out
16:08 - create a database
16:10 - we then return app and what you have to
16:12 - do is do app.run
16:13 - debug equals true to run this
16:15 - application which happens
16:17 - in main.pi right so that is kind of the
16:19 - basic flow of starting up the
16:21 - application
16:22 - now if you go inside of used up high and
16:24 - you go inside of off.pi
16:25 - you'll see we have a few endpoints so
16:27 - auth.pi we have auth is equal to a flask
16:29 - blueprint
16:30 - a blueprint just means this is a file
16:32 - that stores endpoints it's easy as it is
16:34 - we register to roots so slash login and
16:37 - slash sign
16:38 - up stored in this auth blueprint then if
16:41 - you go to init top hi
16:42 - you can see we're registering this
16:44 - blueprint called off
16:46 - from the auth file same thing with views
16:48 - views is for views that don't have to
16:50 - deal with authentication
16:52 - so i have my home view and my typing
16:54 - patterns view
16:55 - the typing patterns view is the view you
16:57 - see when you need to type
16:58 - in your username and password multiple
17:01 - times to send enough typing data to
17:03 - typing dna
17:04 - so that's what we have there uh models
17:06 - this stores the model
17:08 - for our user so we have user we have an
17:10 - id an email and a password
17:12 - these are just the fields and the
17:13 - database that we need to store
17:15 - and then finally we have our templates
17:18 - folder
17:18 - inside of our templates folder we have a
17:20 - bunch of html
17:22 - i won't really discuss this because
17:23 - again this is not a tutorial on html
17:25 - but what i'm doing is loading bootstrap
17:27 - which is the css framework i'm using
17:30 - i'm also loading jquery which is a
17:31 - javascript framework required for
17:33 - bootstrap
17:34 - and i'm configuring my index.js file
17:37 - which is stored in my static folder
17:40 - inside of this website folder so
17:42 - whenever you have static files
17:43 - javascript being a good example or
17:45 - images or something like that you put
17:47 - them inside of a static folder
17:48 - for your flask project that's just
17:51 - important you have to do that it's just
17:52 - a flask requirement and then i'm
17:54 - loading this javascript file from what
17:56 - i'm calling my base
17:57 - html template so if you're unfamiliar
17:59 - with flask
18:00 - it has a templating language called
18:02 - jinga or it renders templates that use a
18:05 - templating language called
18:06 - jinga j-i-n-j-a i believe and what you
18:10 - can do is you can create html documents
18:13 - that have overrideable parts so notice
18:15 - here i have this block
18:16 - title and then i'm ending this block now
18:18 - this block can be
18:20 - overridden from another html file so i
18:22 - can kind of use
18:23 - all of the html here and just change for
18:26 - example the title or anything that is
18:28 - defined inside of a block
18:30 - so this means i can use this web page
18:32 - right here as the base of my entire
18:34 - website now notice i also have this
18:36 - block called content
18:37 - so if i go to say home.html you can see
18:40 - we override the content block
18:43 - and the title block and we extend from
18:46 - the base template
18:47 - and that means it inserts this html into
18:49 - that block in the base template
18:51 - and then shows that on the actual web
18:54 - page
18:54 - same thing for login we're overriding
18:56 - the content and the title block
18:58 - and i have all the html i want to appear
19:00 - in this block on this website now this
19:02 - is just a really simple login form
19:04 - i have a few names for my fields labels
19:06 - and all that
19:07 - and this uses bootstrap same thing for
19:09 - sign up
19:10 - same thing for typing patterns you're
19:12 - welcome to read through this on your own
19:14 - so that is the idea last thing if i go
19:16 - to views.pi you can see i'm
19:18 - rendering these html templates so when i
19:20 - go to the root slash typing patterns
19:22 - it renders the html template stored in
19:25 - the templates folder that is called
19:28 - typingpatterns.html
19:29 - so that's all i need to walk you through
19:30 - for this starter code i do apologize if
19:32 - you don't understand a lot of this
19:34 - again this is not a flask tutorial you
19:36 - really don't need to understand a ton of
19:37 - this to follow along
19:39 - if you would like to follow along though
19:40 - again on my channel i have a ton of
19:42 - tutorials on
19:43 - flask so with that said let's start
19:45 - implementing typing dna
19:47 - the first thing that i want to do is
19:49 - actually configure my sign
19:50 - up and my sign in pages so that they are
19:53 - going to actually work because
19:55 - right now if i try to sign in or sign up
19:58 - on my website so i go to log in or sign
20:00 - up and i press
20:00 - login nothing happens we haven't
20:02 - configured anything so we need to do
20:04 - that now
20:05 - so as i was saying what we need to do is
20:07 - make it so this email and password field
20:09 - and actually let me just reset
20:11 - this cache here because you can see that
20:12 - typingdna logo was popping up
20:14 - but that was the old javascript that was
20:16 - rendering that i need to reset my cache
20:18 - to see the updated javascript
20:20 - for this starter project because
20:21 - previously i was running the finished
20:23 - project and the javascript is getting
20:24 - all mixed up
20:25 - anyways what we need to do is make it so
20:27 - when we type in an email or password
20:30 - we can create a new user account or we
20:32 - can sign them in or we can confirm
20:33 - whether the username or password was
20:35 - correct
20:35 - so we need to create two endpoints one
20:38 - endpoint for logging in
20:39 - and one endpoint for signing up now
20:41 - based on the way that we're going to be
20:42 - doing things here
20:43 - we need to have an api endpoint so an
20:46 - endpoint that doesn't actually return
20:48 - html but instead returns a response like
20:51 - it tells us you signed in successfully
20:52 - where you couldn't sign in because of
20:54 - this reason so rather than showing html
20:57 - it's just going to send something back
20:58 - to us that tells us whether or not this
21:00 - login was successful so the idea is from
21:03 - our front end from javascript actually
21:05 - we're going to call this api endpoint
21:07 - the api endpoint is going to return some
21:09 - information to us and then we'll show
21:10 - that on the screen
21:11 - so what i'm going to do is i'm going to
21:13 - go into my auth.pi file
21:15 - and i'm going to create two new
21:16 - endpoints here now the first one that
21:18 - i'm going to create
21:19 - is going to be at auth.root
21:23 - and then here i'm going to say slash api
21:25 - slash login
21:27 - now notice this is different from
21:28 - regular login because regular login will
21:30 - actually
21:31 - show the login page this is not going to
21:33 - show the login page it's going to
21:35 - actually
21:35 - you know validate or authenticate the
21:37 - user so what we're going to say is the
21:39 - following
21:39 - define api underscore login
21:43 - and then inside of here what we are
21:45 - going to do is get
21:46 - data that was sent to us from a api
21:49 - request so a request is going to be sent
21:51 - to this endpoint
21:52 - and it's going to send a username and a
21:55 - password so we need to get that
21:56 - information so we're going to say
21:57 - data is equal to and then request which
22:00 - notice is imported up here
22:02 - dot and then this is going to be get
22:05 - underscore
22:06 - json so the way we're going to be
22:08 - sending this data it's going to be in
22:09 - json format
22:10 - so we get the json from this request and
22:13 - then we're going to parse the json to
22:15 - get the email and the password
22:16 - so i'm going to say that the email is
22:18 - equal to and then
22:20 - data dot and this should be get and then
22:23 - email
22:24 - and then i'm going to say that the
22:25 - password is equal to data
22:28 - dot get and this should be password
22:31 - all right so now that we have that what
22:33 - we want to do is we want to check if
22:35 - this password is associated with
22:38 - the correct user with this email so i
22:40 - understand if you haven't used floss
22:42 - before this might seem a little bit
22:43 - confusing
22:44 - but when we define a database model we
22:46 - are using
22:47 - kind of a flask inheritance structure or
22:50 - we're inheriting from
22:51 - flask database model what this allows us
22:54 - to do
22:54 - is use this database model to actually
22:56 - run queries on
22:58 - the user table so what we can do is say
23:00 - user
23:01 - is equal to and then user which i've
23:03 - imported from the models file
23:05 - here dot query dot
23:09 - filter by and then we're going to filter
23:10 - by a column so a column is just a field
23:12 - stored in the database
23:14 - so i'm going to say email equals email
23:16 - so i'm looking for the user
23:18 - object in my database that has the email
23:21 - that this user tried to sign in with
23:24 - because keep in mind
23:24 - this email is what the user typed in
23:26 - this password is what the user
23:28 - uh typed in but this user right here is
23:30 - actually what's stored in the database
23:32 - and what account was created so it's
23:34 - quite possible that the email or sorry
23:36 - the password they typed in
23:38 - is actually not the correct password we
23:39 - need to check that against the password
23:41 - that's stored
23:42 - in this model so now what i'm going to
23:44 - say is if user
23:46 - so if there's no user if this returns
23:48 - nothing to us
23:49 - that means that a user with this email
23:51 - doesn't exist so in that situation we'll
23:53 - say else
23:54 - and what we're going to do is return a
23:56 - response so we're going to say return
23:58 - and then make underscore response and
24:01 - what this response will do or what this
24:03 - function will do is
24:04 - create an http response that will return
24:07 - to the sender whatever sent this request
24:09 - some information now we need to return
24:11 - json here so i'm going to say jsonify
24:14 - what jsonify is is a function
24:16 - that we've imported let me make sure yep
24:18 - from flask
24:20 - it will take a python dictionary and
24:22 - turn it into a json object so we're
24:24 - going to say
24:24 - jsonify and we're going to say message
24:26 - colon
24:27 - and then no user with that
24:30 - email exclamation point and then for the
24:33 - status code whenever you send an http
24:35 - request you send a status code we'll
24:37 - send
24:37 - 401 i believe 401 stands for
24:40 - unauthorized or bad
24:41 - request so we're going to send 401 if
24:44 - the user doesn't exist
24:46 - however if the user does exist we need
24:48 - to check if the password we typed in
24:50 - matches with the password the user typed
24:52 - in so we're going to say if
24:53 - not and then this is going to be check
24:56 - password underscore hash
24:58 - and we're going to need to import this
24:59 - function so the idea here is we're going
25:01 - to store a hash
25:02 - of the user's password in this model you
25:05 - never want to store plain text passwords
25:07 - you want to store hashes of them if
25:09 - you're not familiar with hashes
25:11 - it's pretty much a one-way function so a
25:13 - password goes through a hash function
25:15 - it creates a unique hash every single
25:17 - time the same password goes through that
25:19 - hash function it generates the same hash
25:21 - but from that hash it's nearly
25:23 - impossible at least with our
25:24 - understanding of mathematics and
25:26 - cryptography
25:27 - to get back to the original password so
25:29 - that's what a hash is if you're
25:30 - unfamiliar
25:30 - but i'm going to say from and i can
25:32 - never pronounce this uh this name it's
25:34 - work z workzig some german name or
25:38 - something
25:38 - dot security you'll have this installed
25:40 - if you installed flask
25:42 - and we're going to import two things
25:43 - generate password hash
25:45 - and check password hash so what we're
25:48 - going to do is say
25:48 - if not check password hash and we're
25:51 - going to compare
25:52 - user.password which is a hash of the
25:55 - password
25:56 - to the password that the user typed in
25:58 - when they tried to sign it
26:00 - so what this is going to do is take the
26:01 - password hash which is stored in the
26:03 - user object so user.password
26:05 - so whatever user has that email we get
26:07 - their password and then we pass the
26:09 - actual plain text password
26:11 - it will hash this password for us
26:14 - compare it
26:15 - to this here and tell us if this is true
26:17 - so if not
26:18 - uh check password hash that means that
26:20 - the password was incorrect
26:22 - so we are going to say return make
26:25 - underscore response
26:26 - and we're going to say jsonify again if
26:29 - i spell jsonify correctly
26:31 - and i see why this wasn't working i
26:33 - wasn't spelling it correctly okay so
26:34 - jsonify
26:36 - and then inside of here a python
26:37 - dictionary we're going to say message
26:40 - colon and then the message we're going
26:42 - to say is
26:44 - password incorrect exclamation point and
26:47 - we're going to send again for the status
26:49 - code 401
26:50 - because we know that this was like a bad
26:53 - request or it was unauthorized
26:54 - all right now finally in the situation
26:57 - where the user has the correct password
26:59 - and
26:59 - the email exists we're going to return
27:01 - to them this was successful they
27:02 - actually you know
27:03 - signed in so we're going to say return
27:05 - like this
27:06 - and then make underscore response
27:08 - jsonify
27:10 - inside of here the message is going to
27:12 - be
27:13 - let's just say login
27:16 - successful and then the status code is
27:19 - going to be 200 for ok
27:21 - and we are also going to send some more
27:24 - information we're going to send
27:25 - something here that i'll discuss in a
27:26 - second
27:27 - it's going to be user underscore id
27:29 - colon and then user dot
27:31 - typing underscore id now we haven't i
27:34 - haven't discussed what this is yet just
27:35 - leave it here i'll come back to it when
27:37 - we do this
27:38 - but we need to send the id that's
27:41 - associated with the typing
27:42 - dna user account so we can get the users
27:45 - typing patterns i know this is confusing
27:47 - makes no sense
27:48 - right now just throw it in there and we
27:50 - will work on that in one second
27:52 - so now we have this login function done
27:55 - now what i want to do is code out the
27:57 - sign up function or the sign
27:59 - up api endpoint then once we have that
28:01 - we're done a lot of the kind of annoying
28:03 - grunt work that we need to do and then
28:04 - we can actually implement
28:06 - the typing dna api so what i'm going to
28:08 - do now is make another route i'm going
28:10 - to say at
28:10 - auth dot root this is going to be slash
28:14 - api slash sign up and then what we're
28:17 - going to do here is define
28:19 - api underscore sign underscore up and
28:22 - actually i just realized that when we
28:24 - define these roots here sorry we need to
28:25 - define the method the http method that's
28:28 - accepted
28:29 - which is going to be post so i'm going
28:30 - to say method or sorry
28:32 - methods equals post up in the root
28:35 - what this means is we cannot send a get
28:37 - request to this
28:38 - api or to this endpoint we only can send
28:41 - post requests which is what we want to
28:42 - do because we're posting a sign in
28:44 - or we are posting a sign up so now from
28:48 - sign up
28:48 - i'm actually going to copy the entirety
28:50 - of this log in
28:52 - function or log in root paste it in here
28:54 - and we're just going to make some very
28:55 - minor changes
28:56 - so now what we're going to do rather
28:58 - than checking if the user's password is
29:00 - correct
29:01 - we're going to check if this email is
29:02 - already in use and then if it's not in
29:04 - use we'll actually create an account for
29:05 - them
29:06 - but first i realized i made a small
29:07 - mistake here if you go to user what i
29:09 - need to do is
29:10 - dot first now what dot first will do is
29:13 - just return to
29:14 - the first entry that it finds or i
29:16 - believe none
29:17 - if there was no entry that was found so
29:18 - when we do a query we just need to add
29:20 - dot first
29:21 - if we want only one entry of course you
29:23 - can query a database table
29:25 - table for multiple entries then you
29:27 - wouldn't use this.first function
29:28 - but for our purpose we need to add this
29:30 - so just tack this on to the end of
29:32 - the query all right so now that we have
29:36 - this
29:36 - uh what we're going to do i'm just
29:38 - reading my notes here to make sure this
29:39 - is all good
29:40 - is make sure that the user's email is
29:42 - valid
29:43 - and when i say valid that means it
29:44 - doesn't already exist and it is of
29:46 - adequate length so i'm going to say if
29:48 - user or
29:50 - belen of email is
29:53 - less than four so if there's less for
29:55 - less than four characters in their email
29:57 - we're going to remove this line because
29:58 - we don't need this and we are going to
30:00 - return
30:00 - a response that says that this email is
30:03 - already in use or email is invalid
30:05 - email is invalid exclamation point and
30:08 - again we will send
30:09 - 401 as the response code now if that is
30:12 - not the case
30:13 - so inside of an else statement here let
30:15 - me get rid of this what we want to do is
30:16 - actually create a new user that has this
30:19 - email
30:19 - and has this password and then add it to
30:22 - the database
30:23 - and we actually want to return
30:24 - information about that user to our front
30:26 - end once we create it so i'm going to
30:28 - say new
30:29 - underscore oops new underscore user
30:32 - is equal to user right we're going to
30:35 - use this user object which is
30:37 - modeling our users in the database we're
30:39 - going to say email
30:40 - is equal to email we're going to say
30:42 - password is equal to
30:43 - so here we cannot store the plain text
30:46 - password we need to store a password
30:48 - hash
30:48 - so we're going to generate a password
30:50 - hash so generate password hash
30:52 - and then what i'm going to do is put the
30:54 - password and i'm going to say that the
30:56 - method
30:56 - is equal to and then sha 256 which is a
30:59 - very popular encryption
31:01 - algorithm or method whatever you want to
31:03 - call it so let me just make sure this is
31:04 - good
31:05 - looks good okay password equals that
31:09 - method equals that i think we are good
31:11 - with that okay so now that we've created
31:12 - the new
31:13 - user what we need to do is actually add
31:15 - this user to the database
31:17 - so to do that we have two things that we
31:19 - need to write now notice here that i've
31:21 - imported my database
31:22 - from dot what that means is import from
31:25 - this init.pi file right here
31:27 - i have this variable called db that
31:29 - stores the database instance or like
31:31 - access to the database
31:32 - so i can use db and what i can say is db
31:36 - dot and then i'm going to say session
31:38 - and not commit that's the next line
31:40 - db.session.ad and we're going to add
31:42 - this new
31:43 - user which is the user object to our
31:45 - current database session
31:46 - we're then going to commit this so
31:49 - db.session.commit
31:50 - which will actually write it into the
31:52 - database and save it permanently
31:54 - so now that we have that that's like
31:56 - pretty much all we need
31:58 - but what we're going to do is modify
31:59 - this response here so that we also send
32:01 - back one piece of information
32:03 - this is going to be called user
32:04 - underscore id and again this is going to
32:06 - have
32:06 - new underscore user dot typing
32:09 - underscore id
32:11 - now again i'll discuss what this is in a
32:12 - minute and we're going to send for our
32:14 - response code
32:15 - not 401 but 201 because 201 stands for
32:19 - created i think that's correct at least
32:21 - so we're going to send that
32:22 - all should be good now okay so now what
32:25 - i want to do
32:26 - is very slightly modify our database or
32:29 - modify our user model sorry
32:31 - so that we have now this new field
32:33 - called typing id which i've been
32:35 - discussing so i want to go to models
32:37 - i'm going to create a new field here but
32:38 - let me discuss why we need this
32:40 - by first referencing the typing dna
32:42 - documentation
32:43 - so when you go to typing dna
32:45 - documentation
32:46 - let's go here to where the actual api is
32:50 - here we are so this is the api so what
32:52 - we're going to do is send a request
32:54 - to this url right here now our
32:57 - application will have a
32:59 - client secret or an api secret and api
33:01 - key that we will send along with this
33:03 - request
33:03 - but what we need to send is an id of a
33:07 - user
33:07 - along with their typing information and
33:10 - then typing dna handles literally
33:11 - everything there's only one endpoint we
33:13 - need to send this information to
33:14 - but we need a unique id for our user
33:17 - that is different than the id
33:19 - that is used to represent that user in
33:21 - our system so what i mean by that is our
33:23 - user
33:24 - has an id an email and a password we
33:27 - should not
33:28 - use any of those three pieces of
33:29 - information for the id
33:31 - that we send to typing dna so just to be
33:34 - clear here
33:34 - typing dna kind of stores all of our
33:37 - users right if i go to my dashboard you
33:38 - can see it says i have 15 users
33:40 - these are just ones i was using when i
33:41 - was testing so these users
33:43 - are associated by their id so when we
33:46 - send an id
33:47 - that's how it figures out what user
33:48 - we're talking about but this id
33:50 - must be unique for typing dna this is
33:52 - just for security purposes
33:54 - you do not want to have the same id
33:56 - being used for your internal
33:58 - representation of users
33:59 - and your representation for users for
34:01 - typing dna so what that means is every
34:03 - time we create a new user we need to
34:05 - generate a unique
34:06 - id that is going to be unique for that
34:09 - user different than the id they have in
34:10 - our system
34:11 - and then we use that with typing dna
34:14 - that is what the
34:14 - typing id is that i've been referencing
34:17 - here
34:18 - now notice if you go to python for
34:19 - example this shows you how to actually
34:21 - send the request
34:22 - it literally gives you everything that
34:24 - you need so to send the request to
34:26 - typingdna
34:27 - you just copy and paste this code into a
34:29 - file you have some function that you
34:31 - know runs the request and then you just
34:32 - need to pass it the correct typing id
34:34 - which is i believe tp yeah i think tp is
34:37 - what the typing id is going to be
34:39 - and again we just send this information
34:40 - to the auto endpoint
34:42 - and that's all for the api of course you
34:44 - need to have this account created first
34:45 - of all
34:46 - so there that's why we need the typing
34:48 - uh id or typing
34:50 - whatever yeah typing id so let me go to
34:52 - models
34:53 - what i'm going to do is create a field
34:54 - here i'm going to call this typing
34:56 - underscore id
34:57 - and this is going to be equal to db.com
35:00 - it's going to be db db.string
35:02 - this is the type of the column it's
35:04 - going to be a string id
35:05 - that has at most 100 characters i'm
35:08 - going to say that the default
35:09 - is equal to the string of uuid
35:13 - dot uuid 4. now i'm not going to discuss
35:16 - uuid in depth because this is kind of
35:18 - somewhat complicated topic if you want
35:20 - to understand how this actually works
35:21 - what this line does is generate a
35:23 - completely unique id that will never be
35:25 - the same as something else
35:26 - just know that that's what it does you
35:29 - can look up uuid if you want to see how
35:31 - that works but you import the uuid
35:33 - module
35:34 - and then say string uuid.uuid4
35:37 - and that will generate an id for you
35:39 - that will be used as the id
35:41 - for this column so when you do default
35:43 - this means that it's going to
35:44 - automatically default to this random id
35:47 - so we don't need to actually you know
35:49 - insert an id when we create this model
35:51 - it just
35:51 - generates one for us automatically so
35:54 - that's kind of the idea here
35:55 - same thing with this id here since this
35:57 - is the primary key
35:59 - of our database model it just
36:00 - automatically generates an integer id
36:02 - for this model or for this user so now
36:05 - that we have this
36:06 - in here what we need to do is actually
36:09 - we're done with
36:10 - the off end points i believe let's just
36:13 - see if this
36:14 - actually works now uh so we need to hook
36:16 - this up to our front
36:18 - so i'm kind of getting a bit ahead of
36:20 - myself there's a lot of stuff we need to
36:21 - do
36:22 - so it's hard to discuss or figure out
36:23 - what order we should go in but we have
36:25 - this sign in and we have this log
36:27 - sign up and login page now of course i
36:29 - need to have my server running
36:31 - otherwise this isn't going to work so
36:33 - let's go ahead and run this and refresh
36:36 - but what we want to happen or what we
36:37 - want to happen is when we go to sign up
36:39 - we type in our email and password
36:41 - we press submit we want to collect this
36:43 - data and send it to our backend so we
36:45 - can then create the user account
36:46 - so to do that it's going to require some
36:48 - javascript now while we do this
36:50 - let's also implement the typing dna api
36:53 - and specifically
36:54 - the typing dna pattern recorder so from
36:57 - the api documentation you can find a
37:00 - link
37:00 - to this page right here which is the
37:03 - typing dna recorder
37:05 - javascript file now you can also find
37:07 - this right from my github repository
37:08 - there's a link there will be one in the
37:10 - description too
37:11 - what we need to do is take this file
37:13 - right here from this repository
37:15 - typingdna.js and we need to copy the
37:18 - contents of it
37:19 - and bring it in to our project so what
37:22 - i'm going to do is go to the raw of this
37:24 - i'm going to copy all of this now it's
37:26 - important you go to raw to make sure you
37:28 - don't get any of the github weird
37:29 - indentation
37:30 - so i pressed on raw just copied did you
37:32 - know control a control c
37:34 - and then i'm going to go here i'm going
37:36 - to go to my static folder i'm going to
37:39 - create a new file
37:40 - i'm going to call this typing dna dot js
37:43 - it actually doesn't matter what you call
37:44 - it and then i'm going to paste all of
37:46 - this in
37:47 - and i'm going to save so let's go to the
37:48 - top of the file and we're just going to
37:50 - make
37:51 - one very slight modification to this
37:53 - file
37:54 - and we're going to say export this
37:56 - function
37:57 - the reason we need to export this is
37:59 - because we need to import it from
38:00 - another file
38:01 - i won't discuss all the javascript and
38:03 - how that works but you just need to
38:05 - export this function so you can import
38:06 - it from another file
38:08 - so now we can use this typing dna
38:10 - function
38:11 - this is going to return to us what's
38:12 - called a singleton
38:14 - which is a single instance of a class
38:16 - and this class will be used to keep
38:19 - track of what
38:20 - a user is typing in the input fields and
38:22 - their typing pattern
38:23 - so now what we're going to do is import
38:25 - this javascript class
38:26 - from our javascript file so we're going
38:28 - to say and let me just go to my
38:30 - javascript file to make sure i don't
38:31 - mess this up
38:32 - import typing dna
38:36 - and then this is going to be from and
38:37 - then the name of your file so
38:39 - typingdna.js
38:41 - and now we have this javascript
38:43 - javascript class imported
38:44 - now what we need to do is create an
38:46 - instance of this so i'm going to say
38:47 - const
38:48 - and we'll say typing or you know what
38:51 - let's do t
38:51 - dna is equal to new typing dna
38:55 - like that that's all we need this will
38:58 - create the
38:58 - recorder and then what we have to do is
39:00 - tell this typing recorder
39:03 - what input fields it should be recording
39:05 - information for
39:06 - so i know we're going fairly fast
39:08 - through this but that's kind of what we
39:10 - need so we took this file
39:11 - brought this in to our project and now
39:14 - we're going to actually use this class
39:16 - to record information that users are
39:18 - typing in the input fields
39:20 - but what i was getting to before is that
39:22 - we need a way to send this information
39:24 - to our backend
39:25 - so what we're going to do is run a
39:27 - function whenever this sign
39:28 - up button is pressed it will send a
39:31 - request from javascript
39:32 - to our python backend the python backend
39:35 - will then return
39:36 - a response and that's kind of how this
39:38 - is going to work
39:39 - so what i'm going to do is i'm going to
39:40 - say const
39:42 - and we'll start with login and i'll say
39:44 - login button
39:46 - is equal to and then
39:49 - document.getelementbyid
39:50 - and we're going to get the element
39:51 - called login hyphen button
39:53 - so if you go to the login page you can
39:56 - see that we have a button here
39:57 - and it says login button we are going to
40:00 - check for the on click event of this
40:02 - button
40:02 - and when that button is pressed we are
40:05 - going to run a function so let me go
40:06 - back to index.js
40:07 - so now what i'm going to say is if a
40:09 - login button
40:10 - the reason i need to do this is because
40:13 - this javascript class will run
40:15 - for every single one of our html files
40:18 - so if the html file that's rendered is
40:20 - not the one that has this login button
40:22 - we want to make sure we don't crash or
40:24 - have a problem with that so we just
40:25 - check
40:25 - to see if we actually found the login
40:27 - button first before we do anything
40:29 - if we found the login button on our page
40:32 - then what we do is say login button
40:33 - dot add event listener we're going to
40:35 - add the event listener for
40:37 - click and we're going to use an arrow
40:39 - function
40:40 - what this is is just kind of like a one
40:41 - line function in javascript that's going
40:43 - to call
40:44 - another function which is going to call
40:46 - be called log in
40:47 - or sign up and we're going to pass the
40:50 - boolean variable true
40:52 - now this function here login or sign up
40:54 - is actually going to send the request to
40:56 - our backend so this is just kind of
40:57 - configuring
40:59 - the you know the on press event for the
41:01 - button
41:02 - now what we want to do though is if we
41:04 - are on the login page if we have a login
41:06 - button
41:06 - we want to tell this typing dna recorder
41:09 - which
41:10 - input boxes it should be recording
41:12 - information for so we're going to say
41:14 - t dna dot add
41:17 - target like that this is a method that
41:19 - is a part of this class right here this
41:21 - is from the api documentation i'm
41:23 - getting this information
41:24 - and i'm going to add the id of the
41:27 - fields that i want to collect the typing
41:29 - pattern for so i want the typing pattern
41:31 - for email
41:33 - and i want it for password
41:36 - so we'll say password like that so we've
41:38 - now added our two typing targets
41:40 - we have now uh created the login button
41:42 - on click event listener
41:43 - and now what we need to do is code out
41:45 - this login or sign
41:46 - up function but before we do that i'm
41:49 - going to just code out the event
41:50 - listeners for my other pages
41:52 - so if we go to sign up or you know we'll
41:55 - just do it here
41:56 - sign up also has a button right so we
41:58 - need this button we need to configure
42:00 - that to do something when we press
42:02 - it and then that typing patterns page i
42:04 - have
42:05 - let's go this typing patterns this one
42:08 - has a button as well that we need to
42:09 - configure so that when it's pressed
42:11 - it you know calls this function so what
42:14 - i'm going to do is go to index.js
42:16 - i'm going to copy all of this i'm just
42:18 - going to change a few things so instead
42:19 - of line up
42:19 - or line up log in instead of login we're
42:22 - going to say sign up button
42:24 - and we can just go with a uppercase u2
42:27 - we're going to change this
42:28 - to sign hyphen up button
42:32 - and then we're going to change the
42:33 - variable name here to sign up button
42:36 - and this variable name should be changed
42:37 - as well to sign up button
42:39 - all right so now we have an event
42:40 - listener for this we're going to do the
42:42 - same thing
42:42 - for this function except now we're going
42:44 - to call false the reason we're passing
42:46 - false here is because
42:47 - this is going to tell us whether we're
42:49 - logging in or signing up
42:50 - this function does like the exact same
42:52 - thing it just has a very minor change if
42:54 - we're logging in or signing up
42:56 - so we're telling this function whether
42:57 - we're signing up or logging in with this
42:59 - and then we're going to copy this again
43:01 - and add the same thing for the
43:03 - typing patterns button so we're going to
43:05 - say
43:07 - typing patterns typing
43:10 - patterns like that typing patterns
43:12 - button let me copy
43:14 - this paste this here
43:17 - paste this here and then change this
43:20 - name here
43:21 - uh what did i call this button i think i
43:23 - called this typing
43:25 - hyphen patterns button you can find this
43:28 - id
43:29 - here yep okay it's called typing
43:31 - patterns button
43:32 - so now that we have that we have our
43:33 - three on event
43:35 - click listeners so now what i'm going to
43:38 - do is define a function
43:39 - i'm going to say export function and
43:42 - then the function name is going to be
43:43 - login or sign up we're going to take
43:47 - login equal to true so when we pass
43:51 - false that means we are not logging in
43:53 - we are instead signing up then what i'm
43:55 - going to do inside of here is i'm going
43:57 - to send a request
43:58 - to our backend that has the appropriate
44:00 - information so i'm going to start by
44:02 - getting the user's email
44:03 - and getting the user's password so
44:05 - whenever we call this function that
44:06 - means we press
44:07 - the submit button on one of these pages
44:09 - we then need to collect their email and
44:11 - their password which are named by the
44:12 - same field like the id of the fields are
44:14 - the exact same
44:15 - so what we can say is const email
44:18 - equals document.getelementbyid this
44:22 - is going to be email and then this is
44:24 - going to be value
44:25 - and then we'll say const password
44:28 - is equal to document.getelementbyid
44:31 - we're going to get
44:32 - password field and we're going to get
44:34 - the value that's stored in
44:36 - there and i always forget if we need the
44:38 - semicolons or not i don't think we need
44:39 - them but for good practice we will add
44:41 - our semicolons
44:42 - all right so now that we have these uh
44:44 - these email and password we want to send
44:47 - this
44:47 - information to the backend so we need to
44:49 - first decide
44:50 - what endpoint what url are we sending
44:53 - this information to
44:54 - and we know that we just coded them out
44:56 - in this auth file we have the
44:58 - login endpoint and the signup endpoint
45:02 - and these are the ones that handle the
45:03 - logic of creating a new user
45:06 - or authenticating our user checking if
45:07 - their password is correct
45:09 - so what i'm going to do is go to typing
45:11 - dna or index.js
45:13 - i'm going to say let endpoint
45:17 - and then i'm going to define this
45:19 - endpoint based on if we are logging in
45:21 - or signing up
45:22 - so if login then what we're going to say
45:26 - is endpoint is equal to and then slash
45:30 - api
45:31 - slash login otherwise so else
45:35 - we will say that endpoint
45:38 - is equal to and then this will be slash
45:40 - api
45:42 - sign hyphen up let me just make sure
45:44 - that is the correct name i think
45:46 - it is so now that we have the endpoint
45:49 - the email and the password all we have
45:51 - to do is send this information to the
45:53 - endpoint
45:54 - so in javascript there's a method called
45:56 - fetch so we're going to say
45:58 - fetch and then we're going to send this
45:59 - to the endpoint and then we're going to
46:02 - pass some information with this request
46:04 - namely the method of the request so is
46:06 - it a post request is it get request is
46:08 - it a put request
46:09 - the headers so it's the content type
46:11 - that we're sending
46:12 - and then the body of the request which
46:15 - is going to be the data so the email and
46:16 - the password
46:17 - that we want to send so i'm going to say
46:19 - endpoint method
46:21 - colon post then i'm going to say
46:24 - headers and this is going to be colon
46:27 - and we're going to pass
46:28 - a json object this is going to say
46:31 - content
46:32 - hyphen type and this is going to be
46:34 - application
46:36 - slash json let me just make sure that's
46:39 - right sorry we have a lowercase a
46:42 - so application json i won't really
46:44 - discuss this this is just what we need
46:45 - to do to send this request properly
46:47 - and then finally inside of here we're
46:49 - going to have the body so we're going to
46:50 - say body
46:51 - colon this is going to be equal to json
46:54 - dot
46:54 - stringify and we're going to stringify
46:57 - this object
46:58 - email colon email and password
47:02 - colon password now let me just save and
47:05 - format this
47:06 - uh there we go so now you can actually
47:08 - read this so we have fetch
47:10 - endpoint method post headers content
47:13 - type
47:13 - application json and then sorry this
47:16 - body
47:17 - should not be inside of the headers this
47:20 - should be right there
47:21 - so let's format that okay that looks
47:22 - good all right so now we have all the
47:25 - stuff we need to send for our request
47:26 - we're sending
47:27 - this information to our endpoint and i
47:30 - think
47:31 - that's good so now what's going to
47:32 - happen is we're going to send this
47:34 - request
47:35 - we then want to wait for a response so
47:38 - we're going to say
47:38 - dot then what this is going to do is run
47:40 - whatever function we define in here
47:42 - as soon as a response is returned so
47:44 - we're going to say then
47:46 - res equals and then i guess this is less
47:50 - than sign or greater than sign i don't
47:51 - know which one you call that
47:52 - and what we're going to do is just
47:53 - return the res.json
47:57 - so if you don't sorry if you only have
47:59 - one line in your
48:01 - function like this in javascript it just
48:02 - automatically returns what you write
48:04 - after this line
48:05 - so we are getting the json from the
48:07 - response which is what we want that's
48:09 - going to have the message that we're
48:10 - sending
48:11 - and then after that so after this
48:14 - function runs which will happen
48:15 - immediately what we want to do is get
48:18 - the data which will be contained in the
48:20 - response.json
48:21 - and we're just going to print this out
48:22 - we're going to say console.log
48:26 - data so let's run that okay that's all
48:29 - good
48:29 - so now we have this and now what's going
48:31 - to happen is when we press these buttons
48:33 - it's
48:34 - actually going to send the request to
48:35 - our backend and then our back end if we
48:37 - go to
48:38 - auth here is going to return a response
48:40 - to us we're then going to print out
48:42 - the json or the data of that response to
48:45 - the console now the reason we're doing
48:46 - all of this
48:47 - is because we need to make sure that the
48:48 - user is typing in the correct email and
48:50 - password
48:51 - before we send this information off
48:54 - to the typing dna api so once we get
48:58 - this response back
48:59 - that says hey this was all good you know
49:01 - you're typing data or
49:03 - sorry not your typing data your email
49:04 - and your password was proper and this
49:06 - was successful
49:07 - then we can go ahead and send all of our
49:10 - typing patterns to the api
49:12 - so it's a lot of work to do this
49:13 - beforehand but anyways
49:15 - we do need to do that so let me refresh
49:17 - this page let's actually go to sign
49:19 - up and let's try to create an account so
49:22 - i'm going to say
49:22 - tim gmail.com and for my password let's
49:26 - go tim12345
49:27 - and i will press submit now notice
49:30 - nothing happens here right we don't see
49:31 - anything but if we go to the console
49:33 - nothing's happening either ah i remember
49:36 - we forgot to
49:37 - empty our cache and hard reload for our
49:39 - javascript and what does this say
49:41 - failed to resolve module specifier
49:44 - typingdna.js
49:45 - relative reference must start with
49:46 - either slash or dot slash
49:48 - so i realized i made a small mistake
49:50 - here let's go to index.js
49:53 - and we see that we need to add dot slash
49:56 - here because we're importing this
49:57 - from the same file so sorry am i bad on
49:59 - that
50:00 - let's go back here let's refresh failed
50:03 - to resolve okay
50:04 - let's refresh again and there we go
50:06 - that's good don't worry about this fave
50:08 - icon not found you know
50:09 - it doesn't matter for this but now let's
50:11 - try this so if i just press submit
50:12 - notice it says email is
50:14 - invalid and it tells me i had an
50:15 - unauthorized request
50:17 - because well the email was invalid so
50:19 - now let's type in an email
50:20 - tim gmail.com but let's not put any
50:23 - password
50:24 - when i submit this it says no user with
50:26 - that email
50:27 - oh what the heck do we are we sending
50:28 - this to the right okay i think i'm
50:30 - sending this
50:31 - to the uh the wrong thing or maybe my
50:33 - message is incorrect
50:35 - um okay let's go back to the drawing
50:38 - board here because i think i made a
50:39 - small mistake
50:40 - let's go to off dot pi and
50:44 - let's see what's happening here ah i
50:46 - realize i made a mistake here so first
50:47 - of all we need to make sure that the
50:48 - user actually types in a password
50:50 - in this case we didn't type a password
50:51 - it actually created a user the reason we
50:53 - got
50:54 - this response though is because i forgot
50:55 - to rename this this should have said
50:57 - user created not no user with this email
51:00 - because well there was a user with that
51:02 - email
51:02 - but before we do this we need to make
51:04 - sure that the password is valid as well
51:07 - so i'm just going to do an
51:08 - l if down here um if user yeah we'll say
51:12 - l if uh len of password
51:16 - is less than 7 then what i will do is
51:19 - return a response that just says their
51:20 - password is too short
51:22 - so we'll say password too short
51:26 - okay so glad i caught that issue um that
51:28 - could have been a pretty big deal so
51:29 - we're making sure that their email is
51:31 - long enough
51:32 - and their password is long enough and
51:33 - then only then are we creating an
51:34 - account
51:35 - but anyways that was working let me just
51:36 - rerun this server and we just had the
51:38 - wrong
51:39 - response message okay so let's try this
51:41 - again let's refresh
51:42 - let's create a new email this time so
51:44 - tim1 gmail.com
51:45 - and let's see if this fails when we
51:47 - don't type in a password so when i press
51:48 - submit
51:49 - password too short awesome we'll try
51:51 - again so now i'm going to say
51:53 - tim12345 and there we go user created
51:56 - and it gives me the id
51:58 - of this user now this id is the typing
52:01 - id right the thing that we want to send
52:03 - to typing dna okay so now that we have
52:06 - that
52:06 - that is all good what we want to do now
52:09 - is see if we can sign
52:10 - in so let's go to log in and let's see
52:12 - if we can sign in with this account so
52:14 - tim
52:15 - was it one i think it was at gmail.com
52:17 - and then tim12345
52:19 - log in login successful awesome now
52:21 - let's type the password wrong
52:23 - and this says password in correct suite
52:25 - so this is
52:26 - indeed working uh and yeah that's
52:28 - awesome so now that we have that
52:31 - what we want to do is send this
52:32 - information this typing pattern to
52:34 - typing dna
52:35 - we also want to make sure that after a
52:36 - user signs up it redirects them
52:39 - to a page the page we want to redirect
52:41 - them to is the typing patterns page
52:43 - because we need to collect more typing
52:45 - patterns from them
52:46 - so now what i'm going to do is code out
52:48 - a function this function
52:50 - is going to send the typing data we
52:52 - collected to
52:53 - typing dna but only if the user logged
52:56 - in or signed up successfully so that's
52:57 - why we needed all this stuff right
52:58 - because we're only going to send the
53:00 - data
53:00 - if the sign in or log in was successful
53:02 - to start there's no
53:04 - point in doing a two factor
53:05 - authentication if the first factor was
53:06 - not successful right
53:08 - so now we're going to make a function
53:10 - we're going to say function
53:11 - and this is going to be called send
53:14 - typing data we're going to take in here
53:17 - an
53:17 - id and text now what
53:20 - the id is is the id of our user for
53:24 - typing dna so what i've been returning
53:26 - right if i go back here
53:27 - what i've been returning as the user id
53:29 - this is the id
53:30 - that we want to use for typing dna so
53:34 - that is why i'm sending it back to the
53:35 - front end so that we have access to it
53:37 - and then we can send it to the back end
53:39 - so the backend knows which user
53:42 - it's going to be dealing with anyways
53:44 - we'll get to it when we get to it it's
53:45 - hard to explain stuff without the
53:47 - example but
53:48 - send typing data so what we're going to
53:50 - do here is say
53:51 - const pattern is equal to
53:54 - tdna so typing dna dot get pattern
53:58 - now when we get the pattern we need to
54:00 - pass in an object here
54:02 - and this object defines what type of
54:04 - pattern we're looking for
54:05 - and the text that we want the pattern
54:06 - for so we're going to say type colon 1
54:09 - and text colon text now let's go to the
54:12 - documentation
54:13 - and i'll show you how this works so if i
54:14 - go to the documentation here
54:16 - let's load this up full screen and we go
54:19 - and we look
54:20 - for let's see here get typing pattern
54:23 - okay perfect so here it is
54:25 - typingdna.gettyping pattern i just
54:27 - realized i used the wrong name
54:29 - let's go back good job i referenced that
54:31 - not get pattern we want
54:33 - get typing pattern okay so this is the
54:35 - correct function name or method name so
54:38 - anyways this is the main function
54:39 - outputs the user's typing pattern as a
54:41 - string returns a typing pattern in
54:43 - string form
54:44 - this is the pattern we want to send to
54:45 - typing dna api
54:47 - options object an object of the
54:49 - following form type number
54:50 - text string text id number target id all
54:54 - of that so it shows you all of the
54:55 - potential options you can pass here
54:57 - and it tells you what you should pass
54:59 - based on the application you're using
55:01 - so zero for any text pattern one for
55:03 - same text pattern
55:04 - two for extended pattern so pretty much
55:07 - it with typing dna there's three
55:09 - different ways you can perform
55:10 - authentication you have any text
55:12 - any text means like doesn't matter what
55:14 - text you type it will
55:15 - just be able to validate you so if you
55:17 - typed like a random string the first
55:20 - time you enrolled information with
55:21 - typing data
55:22 - and then later on you typed another
55:24 - random string it can compare those two
55:26 - typing patterns
55:27 - and still validate you now we're not
55:29 - using any text we're using
55:31 - same text so it says recommended in most
55:33 - cases
55:34 - for emails passwords phone numbers
55:36 - credit cards short text
55:37 - this is exactly what we're using shorter
55:39 - text that is identical
55:41 - which allows us to have a better
55:43 - accuracy so this is again
55:45 - for our email and for our password so
55:47 - we're using type one
55:48 - for that reason then two for extended
55:51 - pattern
55:52 - most versatile can replace both any text
55:54 - and same text patterns
55:56 - best accuracy recommended in cases where
55:57 - text is not a secret
55:59 - and is uh as it records the typed
56:01 - characters as well
56:02 - okay so this you don't want to use for
56:04 - usernames or passwords because well the
56:06 - username and password
56:07 - should be kept secret and this is
56:08 - recording the text that is actually
56:10 - typed whereas the other ones are not
56:12 - okay then you have text only for type
56:15 - one
56:16 - and type two a type string that you want
56:18 - the typing pattern for
56:19 - okay awesome so since we're using same
56:21 - text we need to give it the text we want
56:23 - the pattern for
56:24 - and then the other ones here we don't
56:25 - need to specify because they're optional
56:28 - okay great so that's what we have and it
56:30 - shows you kind of an example of how this
56:31 - works
56:32 - so let's do this let's go back here and
56:34 - you see this exactly what we're doing we
56:35 - define
56:36 - type one text is equal to text and we'll
56:39 - pass
56:40 - in here the username plus the password
56:42 - as the text we want the pattern
56:44 - for now that we have this we want to
56:46 - send this information
56:48 - to our backend so what we're going to
56:50 - say is the following fetch
56:52 - and we haven't created this endpoint yet
56:53 - but we will create it and we're going to
56:55 - send to slash
56:56 - and we'll call this typing dna
56:59 - and then we want some options in here as
57:01 - well so for the options we need to
57:02 - define our method so we'll say method
57:04 - colon post we will then say headers
57:08 - colon and this is another object this is
57:11 - going to be content type
57:12 - application slash json let's just format
57:16 - that so it's easier to read
57:17 - okay and then finally we want to send
57:19 - the data or the body so
57:20 - body is equal to and then this is
57:23 - json.stringify
57:25 - and we're going to stringify the pattern
57:27 - that we're sending which is going to be
57:29 - equal to
57:30 - pattern like that and then finally the
57:33 - user underscore id
57:34 - which will be equal to the id which we
57:36 - passed to this function
57:38 - so this is why we need the typing uh id
57:40 - because we're going to send it
57:41 - to our back end again so that we know on
57:44 - our back end
57:44 - how we should send this information to
57:46 - typing dna then of course the pattern is
57:48 - what we're getting
57:49 - from this variable here all right then
57:52 - we're going to say
57:52 - dot then and we will do the same thing
57:55 - so res
57:56 - will return res.json and then dot then
57:59 - again
58:00 - and we will say data and we will
58:04 - console.log
58:07 - oops uh come on what is this what's
58:08 - going on here console
58:11 - dot log data okay
58:14 - awesome so i think that is good now of
58:16 - course we're going to do more than just
58:17 - this we're going to check the data we're
58:18 - going to like you know
58:19 - show something on the screen we're going
58:20 - to redirect the user but for now
58:22 - let's test this so this obviously we
58:25 - haven't created this api yet so we need
58:26 - to create this api
58:28 - we also need to use this function so the
58:30 - idea is that
58:31 - after this after we successfully hit
58:34 - whatever endpoint we send this request
58:35 - to so log in or sign
58:36 - up we take the typing data and we send
58:39 - it
58:40 - to that endpoint so we're going to say
58:42 - send
58:44 - typing data and we're going to send for
58:47 - typing data
58:47 - as the id this is going to be the data
58:51 - dot and then user underscore id and the
58:54 - text that we're going to send
58:55 - is going to be data or sorry not data
58:58 - this is going to be
58:59 - email plus password so we're just going
59:02 - to concatenate the email and the
59:03 - password together
59:05 - that's the text we want the pattern for
59:06 - so we send that as text
59:08 - and then the id is the user id that was
59:10 - returned to us however we can only send
59:12 - that
59:13 - if we got a user id so if our login was
59:15 - successful
59:16 - so what that means is inside of here i
59:18 - need to make this actually the body of a
59:20 - function
59:21 - and i'm going to kind of tab down here
59:22 - and say if
59:25 - and this will be data dot user
59:27 - underscore id
59:28 - so if data.userid that means we signed
59:31 - in successfully because if you go back
59:33 - to auth
59:34 - we only send a user id when we created
59:36 - the user
59:37 - or we signed in as that user so if we
59:40 - have a user id we signed in successfully
59:42 - if we don't have a user id this is not
59:44 - good so we're going to say
59:45 - else if data dot
59:48 - message so if we didn't have an id but
59:50 - we have a message
59:51 - then what we will do now is we will
59:53 - alert that message to the screen so
59:55 - we'll say
59:55 - alert this is just that little you know
59:57 - kind of crappy pop-up that shows up
59:59 - on the screen and we will just show the
60:01 - message
60:02 - so data.message so now rather than
60:04 - printing it out it will actually pop up
60:05 - on the screen so we can see it
60:07 - so now this should actually work except
60:09 - for this request because we haven't code
60:11 - out this endpoint
60:12 - let's quickly code at this endpoint just
60:14 - so it returns like an empty response
60:16 - and then we can go from there so if we
60:18 - go now to
60:20 - views.pi we're going to create a
60:23 - new view here i'm going to say at and
60:26 - we'll say
60:26 - views dot root and actually now that i
60:29 - think about it we should put this in
60:31 - auth because really like the typing dna
60:33 - is going to be a part of authentication
60:34 - so it makes more sense to go in here
60:36 - so let's say at auth.root
60:39 - we're just going to call this uh typing
60:42 - hyphen dna
60:44 - i'm going to say define typing dna
60:47 - let me just go to my notes here to make
60:49 - sure i'm not messing this up
60:51 - too bad uh and in fact just to say
60:54 - consistent i know i keep changing this
60:55 - around we're going to go back to views
60:56 - because in my project that i already
60:59 - have coded out it's on github i did this
61:00 - in views
61:01 - so just to not confuse anyone we'll just
61:03 - do it in views here
61:04 - so we'll say views dot root typing dna
61:07 - this will be slash typing dna and in
61:10 - fact no hyphen just typing dna
61:13 - then typing dna we want to define the
61:15 - method here so we'll say
61:17 - method is equal to post
61:21 - then what we're going to do is collect
61:22 - the data from the response
61:24 - so data equals response dot get json
61:28 - we are then going to get the pattern so
61:29 - pattern equals
61:31 - data dot gets and then the pattern we're
61:34 - then going to get the user id
61:35 - or the typing id so we'll say user
61:38 - underscore id
61:40 - equals data dot get user underscore id
61:44 - and then what we're going to do is now
61:46 - send this information to
61:47 - typing dna but for now i'm just going to
61:50 - return a response i'm going to say
61:51 - return
61:52 - make response jsonify and then we'll
61:54 - just put inside of here
61:56 - message test and we'll just
61:59 - go 200 for ok all right let me make sure
62:02 - i have all of this imported i think i do
62:05 - okay so we should be good now we now
62:06 - have this root let me re-run
62:08 - this nick got an unexpected keyword
62:12 - method
62:12 - ah sorry this should say methods my
62:15 - apologies
62:16 - let's rerun this and now we can actually
62:18 - test this out so again what we've done
62:20 - is just created a root here called
62:21 - typing dna we're going to get the
62:23 - information from
62:24 - the request we're then going to send
62:26 - that to typing dna
62:27 - we've not done that yet we will do that
62:29 - in the next step okay so now
62:31 - let's go to our website let's refresh
62:34 - and
62:34 - let's try this so i'm now on login so
62:37 - i'm going to say tim1
62:39 - at gmail.com and then my password
62:43 - login and login successful user id okay
62:46 - that is good let me refresh my
62:48 - javascript because i have a feeling
62:50 - that was not working let's do this again
62:52 - so i'm going to say tim1
62:54 - gmail.com and then tim12345
62:58 - and now let's see it says message test
63:01 - okay awesome so
63:02 - what happened let's just run through the
63:03 - flow here was
63:05 - we go to our javascript we
63:08 - sent the request to our back end right
63:10 - we then
63:11 - looked at the request from our back end
63:13 - and we saw that we had a user id
63:15 - so since we had a user id we then called
63:18 - the send typingdata function
63:20 - the sendtypingdata function then got the
63:23 - typing pattern
63:24 - it then sent a request to our backend
63:26 - again
63:27 - to slash typingdna and then the response
63:30 - was returned that said
63:31 - test right and then we just printed that
63:33 - out so if you go here to views
63:35 - message test is what showed up in our
63:37 - console which means we called first of
63:39 - all
63:40 - this login api endpoint
63:43 - we then called this typing dna endpoint
63:46 - so that
63:46 - is the idea all right so let's just try
63:48 - this now with an incorrect password
63:51 - just to see if we get this message
63:52 - password incorrect awesome
63:54 - and this should work from sign in as
63:55 - well okay
63:57 - so now that we have this what we want to
64:00 - do is send this data
64:01 - to typing dna so let's go to the api
64:04 - documentation
64:05 - and let's go down to the verification
64:08 - section
64:09 - now i recommend you read through this
64:11 - but i will just read through the first
64:13 - sentence
64:13 - the auto api enrolls all typing patterns
64:15 - it receives for a given typing profile
64:18 - until a minimum initial enrollment value
64:20 - is reached for auto that value is fixed
64:22 - at 3
64:23 - for an optimal balance of usability and
64:25 - accuracy verification
64:26 - results are not performed until a user's
64:28 - typing pro file contains at least
64:30 - three previous enrollments before which
64:32 - the enrollment uh
64:33 - intention is assumed this requirement
64:36 - ensures that we have collected a
64:37 - reasonable baseline of the user's typing
64:38 - behavior before attempting
64:40 - verification in practice this means that
64:41 - the first three typing patterns
64:42 - submitted to the auto api
64:44 - for a given typing profile will be
64:45 - enrolled only and this is a prerequisite
64:47 - to verifying any future patterns for the
64:49 - user
64:50 - so then it says actually i'll just
64:52 - finish reading it why not developers
64:53 - have the choice of recording
64:55 - initial enrollment patterns from their
64:57 - end users over time to reduce friction
64:59 - or collecting all initial enrollments
65:02 - and submitting them at once diluted by
65:04 - a semicolon the enrollment process is
65:05 - the same for a single or multiple
65:07 - submission
65:08 - so we're kind of going to do a
65:09 - combination of what it's saying here
65:11 - when a user creates a new account
65:13 - or more specifically when a user doesn't
65:15 - have enough typing patterns we're just
65:16 - going to ask them to send more typing
65:17 - patterns so we're going to send enough
65:19 - and then this will actually tell us the
65:21 - response from
65:23 - typing dna will tell us if we have
65:24 - enough patterns and as soon as we have
65:26 - enough patterns
65:27 - then we will just start verifying now
65:29 - this endpoint handles all this for us it
65:31 - knows if we have enough patterns
65:33 - it knows if we're in rolling patterns or
65:34 - if we're verifying which is really
65:36 - awesome it means we have to do like
65:37 - very little work so anyways we're going
65:40 - to go here we're going to go to
65:41 - python and we're just going to copy all
65:43 - of this code because this is the code we
65:45 - need to send information
65:47 - to typing dna so we're going to copy all
65:49 - of that we're going to create a new file
65:51 - in our website folder and we're going to
65:53 - call this typing dna
65:56 - we'll go typing dna dot pi
65:59 - and then we'll paste this in and
66:01 - actually let's keep this lower case just
66:03 - for consistency
66:05 - okay so typing dna.pi now we're going to
66:08 - modify some of these things for example
66:09 - where it says id
66:10 - api secret api key tp we need all of
66:13 - those pieces of information
66:15 - but once we have this we'll turn this
66:16 - into a function that can send a request
66:19 - then what we will do is from this
66:22 - function here
66:23 - we will call that other function which
66:25 - will send the information to typing dna
66:27 - it will then get the information from
66:28 - typing dna we'll then send that back to
66:30 - our front end and then our front end can
66:31 - display that information
66:33 - so the first thing that we need to do
66:34 - here is we need to get our api key
66:37 - and our api secret from our typing dna
66:40 - account so where it says api key it's
66:42 - going to copy this
66:43 - and we're going to paste this into our
66:45 - typing dna where it says api key
66:48 - so api key will be equal to that now api
66:51 - secret
66:51 - we're going to copy the secret i'm just
66:53 - going to leak mine here because i don't
66:54 - really care if you guys see it i'm going
66:55 - to close this account after the video
66:57 - anyways
66:57 - so let's copy this i'll create a new
66:59 - account to clarify just because i know
67:01 - you guys
67:02 - some of you are going to go and try and
67:03 - mess with my account but let's take this
67:05 - and paste this here
67:06 - so now we have our key in our secret
67:08 - it's worth noting you should not
67:10 - have your api secret in plain text in a
67:12 - code file
67:13 - usually you'd want to store this in an
67:14 - environment variable i'm not going to
67:16 - show that for this tutorial because it
67:17 - just makes it kind of more complicated
67:19 - than it needs to be for this purpose
67:20 - but just understand you you probably
67:22 - should not have this in plain text
67:24 - now id this is going to be the id of the
67:27 - user
67:28 - that we want to send to typing dna so we
67:30 - can delete that because we're actually
67:31 - going to create a function here
67:33 - we're going to say define send
67:35 - underscore typing underscore data
67:37 - and as a parameter here we're going to
67:39 - take the user id
67:41 - and the pattern that we need to send
67:44 - and this reminds me tp actually stands
67:46 - for typing pattern
67:47 - so tp can be equal to pattern
67:51 - and then let me just have a look at this
67:53 - i think this is
67:54 - really all we need to actually send the
67:56 - information so since we have a user id
67:58 - and we have a typing pattern i just need
68:01 - to go in here and find where it uses the
68:03 - id variable okay so id is right here we
68:05 - need to replace this with
68:06 - user id and this should be all we need
68:09 - to actually
68:10 - send the typing pattern to typing dna
68:13 - yes i think that is good so last thing
68:16 - i'm going to do here as a modification
68:17 - is i'm instead of printing
68:19 - i'm going to return the and that not
68:22 - resbody.dica we will
68:24 - use that but i'm going to return instead
68:26 - json.loads
68:27 - so load s this now
68:30 - let's import json first of all we need
68:32 - that from here
68:34 - so what this is going to do is this is
68:36 - going to take the response body
68:39 - you don't have to understand what all
68:40 - this code does essentially just sends a
68:41 - request to typing dna
68:42 - gets a response we have the response
68:44 - body we need to
68:45 - decode it in the form of utf-8 utf-8 is
68:49 - just like a text
68:50 - coding i i don't even know how you would
68:52 - describe that and we're going to decode
68:54 - it this is going to give us a string so
68:56 - this will give us
68:57 - just a string we want to take this
68:59 - string and convert it into a python
69:01 - dictionary object to do that we use
69:04 - json.load s
69:06 - load is obviously loading json but we're
69:08 - loading a string this
69:10 - that's what the little s stands for is
69:11 - load string and this will parse this
69:13 - string
69:14 - and turn it into a python dictionary
69:16 - object for us
69:17 - so then we can return that dictionary
69:19 - object and then
69:21 - from views.pi we can print it so from
69:24 - views.pi
69:25 - we're going to call this function we're
69:26 - going to pass it the user id and the
69:28 - pattern
69:29 - then this function is going to return to
69:30 - us the response from typingdna
69:32 - after it sends the request and then
69:35 - we'll be all good from there we can then
69:37 - use the information that we get so we're
69:38 - going to say
69:39 - from here first of all let's import this
69:42 - file so we're going to say
69:43 - from dot and this
69:46 - is typing dna import
69:49 - send underscore typing underscore
69:52 - pattern let me make sure i haven't
69:55 - messed this up too badly i think this
69:56 - looks good okay
69:58 - so now we have this function yes and ah
70:01 - send typing
70:02 - data not pattern okay so send typing
70:04 - data
70:05 - now inside of here we're going to say
70:09 - what should we call this response is
70:12 - equal to
70:12 - send typing data and we're going to pass
70:15 - the
70:16 - user underscore id and the pattern
70:19 - then we will print the response
70:24 - and we will also return this response
70:27 - from this function so we're going to say
70:29 - is jsonify and now instead of message
70:31 - test
70:32 - response and now i can show you what
70:33 - this response actually looks like so let
70:35 - me
70:35 - re-run this no module named
70:38 - website.typingdna
70:40 - why why am i getting this did i put this
70:42 - file in the wrong place
70:44 - i think i put this in the correct place
70:46 - from not typing dna
70:48 - ah i've spelt typing dna incorrectly
70:50 - that would be why
70:52 - let's spell that correctly okay so now
70:54 - we should be good let me rerun
70:56 - this server okay so all is working now
70:59 - and let's test this so we're going to
71:01 - print the response here on the back end
71:02 - we're also going to show it on the front
71:04 - end
71:04 - so we can see if this is working so
71:06 - let's go to our website
71:09 - let's go to sign up or actually let's go
71:12 - to login why not
71:13 - and now what we're going to do is sign
71:14 - in so tim gmail.com
71:18 - tim12345 log in now when i press this
71:21 - notice it takes a second and then i get
71:24 - an actual response here
71:25 - this is the response that came from this
71:28 - function that we just coded out
71:30 - so let's have a look at what this says
71:33 - this says action
71:34 - enroll enrollments 1 message patterns
71:37 - enrolled
71:38 - not enough patterns for verification
71:39 - message code 10 status 200 and then it
71:42 - shows you all this information
71:43 - so if you go to the api documentation
71:45 - you can now see
71:47 - uh we should let me go full screen here
71:50 - uh
71:50 - it should show you what all this means
71:52 - so here you can see all the things that
71:53 - are going to be returned in the response
71:55 - so
71:55 - firstly this is the successful response
71:58 - there's also response codes if there's
71:59 - an error right you have like all of
72:01 - these different error codes that could
72:02 - happen
72:03 - i'm not going to go through them you're
72:04 - welcome to read through them on your own
72:06 - but the idea is we're going to have all
72:07 - of these fields so this just kind of
72:08 - describes what they are
72:10 - they're really straightforward i mean
72:11 - you can read through it and just see
72:12 - exactly what it is
72:13 - but when you are not simply enrolling so
72:16 - the first three times you send this for
72:18 - each user
72:18 - it's going to enroll the typing pattern
72:20 - right and then once the typing patterns
72:22 - are enrolled
72:23 - what will happen is it will tell you if
72:24 - there is a high confidence
72:26 - that the pattern you just sent matches
72:29 - the other patterns that were there
72:31 - so it's just pretty much verifying you
72:32 - so if you get one that means that you
72:34 - have high confidence if you get zero you
72:36 - do not
72:37 - so you would want to use one as like a
72:39 - successful two-factor authentication
72:41 - and zero as a failure so we're going to
72:43 - be looking for this high confidence
72:44 - field
72:45 - we're also going to be looking for the
72:46 - message code now let's go to code here
72:49 - you can see all of the different codes
72:51 - if you look at 10
72:52 - it says patterns enrolled not enough
72:54 - patterns for verification
72:56 - so if we see this what we're going to do
72:58 - is ask the user to submit
73:00 - more patterns so whenever the message
73:02 - code is 10 then
73:04 - we are going to redirect them to that
73:05 - other page the typing patterns page
73:07 - and then from there we're going to ask
73:08 - them to sign in again and again
73:11 - and again until they have enough
73:13 - patterns and then we will be good to go
73:15 - so let's go ahead and do this
73:16 - uh again that was like the documentation
73:18 - that i needed to show you
73:19 - so now that we're actually sending the
73:20 - patterns and everything is all good
73:22 - we're going to go to our index.js file
73:24 - and now since we have all of the
73:27 - information from that response
73:29 - from our backend we sent the information
73:31 - to our front end
73:32 - and just at this point it's good to
73:34 - clarify you need to make sure that you
73:36 - send the typing patterns
73:37 - from the back end of your website not
73:40 - from the front end
73:41 - this is just a security issue i think i
73:43 - discussed this at the beginning of the
73:44 - video
73:44 - but make sure you're not sending like a
73:46 - fetch request from the front end of your
73:48 - website
73:49 - to the typing dna api you have to do
73:51 - what i'm doing instead
73:52 - send a request to the back end and then
73:54 - the back end sends it to typing dna
73:56 - just so it can't be intercepted and then
73:58 - we take this information
74:00 - and send it back to the front end all
74:02 - right so
74:03 - that was just important to go through
74:04 - but now in the send typing data function
74:07 - instead of logging this result we
74:10 - actually want to look at this result
74:11 - right and we want to tell them first of
74:12 - all okay
74:13 - did you have high confidence or like was
74:15 - this valid
74:16 - or do we need more typing patterns so
74:19 - we're going to say dot then
74:20 - data we can print out the data still if
74:22 - we want to do that
74:23 - but after that let's put that inside of
74:26 - here
74:27 - we want to check if the message code is
74:29 - 10. so we're going to say if
74:31 - data dot message underscore code
74:35 - and we should always get a message code
74:37 - is equal equal equal to
74:39 - 10 so if it's equal to 10 we don't have
74:41 - enough patterns
74:42 - we need to enroll more patterns so we're
74:43 - going to have an alert
74:45 - and this alert will say we need to
74:48 - collect some typing data
74:52 - from you for two-factor authentication
74:56 - uh you may be asked to fill
74:59 - this out and then multiple
75:03 - times dot dot okay uh you can make this
75:05 - say whatever you want obviously
75:07 - i'm just gonna go with that so now we
75:09 - alert the user of what we're you know
75:10 - redirecting them to
75:12 - and then we're going to redirect them to
75:14 - the typing patterns page where they will
75:16 - be asked to type in more patterns
75:17 - so the way you do this in javascript you
75:19 - say window dot location
75:21 - is equal to and then i'm going to say
75:23 - slash typing hyphen
75:25 - patterns so this is pretty much the
75:27 - equivalent of a redirect
75:28 - we're just redirecting them to this page
75:31 - now if the message code is not 10
75:33 - that means we had enough enrollments so
75:35 - what we need to check is if the pattern
75:37 - we just sent had
75:38 - high confidence so we're going to say
75:39 - else and then we're going to say if
75:42 - data dot and what is this called hi
75:45 - underscore confidence
75:49 - is equal to 1 that should be three equal
75:52 - signs
75:53 - then what we want to do it did i spell
75:55 - confidence correctly let me check i
75:56 - think i did
75:57 - we want to alert them that they had high
75:59 - confidence if it was not we want to
76:01 - alert them that it was
76:02 - low confidence so i'm just going to copy
76:04 - this in to avoid having to type all this
76:05 - out
76:06 - but alert typing dna indicated that
76:08 - there was high confidence in your login
76:10 - otherwise else we're going to say alert
76:13 - typing the
76:14 - dna indicated there was low confidence
76:17 - in
76:17 - your login and now i think that's pretty
76:20 - much all we need there's
76:22 - one or two more things i'm just
76:23 - referencing my notes because there's a
76:24 - lot i want to make sure i don't mess
76:26 - this up
76:26 - uh so after we do this so if the message
76:29 - code was
76:29 - not 10 right then what we want to do is
76:32 - we want to redirect the user
76:34 - back to the home page so i'm going to
76:35 - say window dot location
76:38 - equals slash so this is kind of the
76:39 - equivalent of like them signing in right
76:41 - if they signed in successfully then what
76:44 - we do is we say window.location equals
76:46 - the home page
76:47 - so it redirects them to the home page
76:48 - like as if they had signed it
76:50 - and then finally at the very bottom of
76:52 - this function we're going to say
76:53 - tdna.reset
76:55 - this is going to reset this singleton
76:56 - class so that if we send another request
77:00 - it's going to reset the typing pattern
77:01 - so after we send the typing pattern
77:03 - information
77:04 - and we do all of this stuff here we want
77:06 - to reset
77:07 - this and in fact now that i think about
77:09 - this we should reset this
77:12 - right after we get a response from this
77:15 - request
77:16 - or actually let's think yeah right after
77:18 - we get a response let's do that so
77:20 - inside of data here we'll actually say
77:23 - tdna.reset we could do it in here
77:25 - or up here it doesn't really matter but
77:27 - the reason we're resetting is so that if
77:28 - they send something again from the same
77:30 - page without refreshing
77:32 - the typing pattern gets clear okay so
77:34 - just quickly recap we check
77:36 - if the message code is 10 if the message
77:38 - code is 10 we need more typing
77:39 - information so we redirect them and
77:41 - alert them that we need to collect
77:42 - typing data
77:43 - and then from this page ideally the user
77:45 - will type in or sign in a few more times
77:47 - and rule more typing patterns and
77:50 - otherwise if it's not 10 that means
77:51 - we're all good
77:52 - hopefully at least and we're going to
77:54 - check if the high confidence flying is
77:56 - equal to 1.
77:56 - if it's equal to one that means we're
77:58 - good we validated if it's equal to zero
78:00 - uh we are not good or so if it's not
78:02 - equal to one we're not good and then we
78:03 - tell them
78:04 - low confidence either way after whatever
78:07 - happens here we redirect them to the
78:08 - home page now that i'm thinking about
78:10 - this though
78:10 - we should probably only redirect them if
78:12 - it's high confidence right
78:14 - because if it's low confidence we don't
78:15 - want them to be able to sign in
78:17 - now in theory they can just go to the
78:19 - home page this is not you know a
78:20 - full-fledged website
78:22 - but this is the idea so sorry everyone
78:24 - for the abrupt cut here but i realized
78:25 - while watching this video back when i
78:27 - was editing that i made a pretty big
78:28 - mistake that i definitely need to jump
78:30 - in here and fix
78:31 - so you can see that what i've been
78:32 - talking about is this data.high
78:34 - confidence flac
78:35 - and i've been saying if this high
78:37 - confidence flag gives us a one we're all
78:38 - good to go and it is validated
78:40 - now this is not true this high
78:42 - confidence flag what this actually tells
78:44 - us
78:45 - is how confident the api was in the
78:47 - result that it gave us
78:49 - so this does not actually tell us the
78:50 - result this tells us if it is confident
78:53 - that the result that it returned to us
78:55 - is correct so what we need to do is we
78:58 - need to change this to
78:59 - result because what we actually get back
79:02 - here in this api data which i will show
79:04 - you in a second
79:05 - is we get a result flag as well or a
79:07 - result key whatever you want to call it
79:09 - and if this result key is equal to 1
79:11 - that means it actually was a match and
79:13 - if it was equal to 0 that means it's not
79:14 - a match
79:15 - so if high confidence is equal to 1 that
79:17 - means whatever result
79:18 - is the api is confident that is correct
79:21 - however
79:22 - if high confidence is equal to zero that
79:24 - means whatever the result is it's not
79:25 - quite confident that that is actually
79:27 - correct and that could be based on
79:28 - something like
79:29 - we didn't have enough text or the
79:31 - pattern it just wasn't quite sure if it
79:33 - was actually correct so it's giving you
79:34 - a result
79:35 - but it's saying i'm not very confident
79:36 - in that result or i am very confident in
79:38 - this result
79:39 - so hopefully that's clear throughout the
79:41 - rest of this video you're probably going
79:42 - to see me have high confidence here
79:45 - so just understand that actually what we
79:47 - want is result
79:48 - not high confidence so if you ever see
79:50 - me use high confidence here
79:52 - i just understand that is a mistake it's
79:54 - just because i'm not going to refilm the
79:55 - entire video because of this one thing
79:57 - right here
79:58 - so make sure you understand that we are
79:59 - using result not high confidence and
80:01 - that high confidence is telling us the
80:03 - level of confidence
80:04 - in the result that we're getting and a
80:06 - result as i said if it returned zero
80:08 - that means there was not a match we are
80:10 - not authenticated
80:11 - whereas if it does return one that means
80:14 - there was a match we are
80:15 - authenticated so let me just print out
80:17 - the data here
80:18 - and then i'm going to print out after
80:20 - the data the data.result
80:22 - just to show you so let's remove this
80:25 - copy that paste this down here and then
80:28 - we will show it data.result
80:30 - and then of course here we should
80:32 - probably change this to say rather than
80:33 - indicate there was a high confidence we
80:35 - should just say typing dna indicated
80:37 - there was a match or something like that
80:38 - right because this is not necessarily
80:40 - correct
80:40 - uh because we're not actually checking
80:42 - the high confidence flag
80:43 - so usually you would probably check the
80:45 - high confidence flag in combination with
80:47 - the result flag
80:48 - because if you had low confidence in the
80:50 - result and the result was one
80:52 - maybe you don't want to authenticate the
80:53 - user but that's kind of up to you okay
80:55 - so now i'm just going to load the
80:56 - website up here i've just created a new
80:58 - user account just so that i can go
81:00 - through this quickly
81:00 - and i'll show you now what data returns
81:02 - and what the result actually
81:04 - actually returns versus high confidence
81:06 - so the account i made was techwithtim27
81:10 - gmail.com and then oops my cap box is on
81:13 - my password is the same thing
81:16 - techwithtim27
81:17 - gmail.com let's submit this and let's
81:21 - see what we get okay so there we go
81:22 - typing dna indicated there was high
81:24 - confidence in your login and you can see
81:26 - uh
81:26 - well i closed out of it but it was
81:28 - showing me that the result which is the
81:29 - thing i was printing
81:30 - last was a one which meant we actually
81:32 - had a match
81:33 - now you may notice this website looks a
81:35 - little bit different than what it did
81:36 - before i took the cut in this video
81:38 - that's just because this is after i
81:40 - finished everything i'm now
81:41 - on the website again because this right
81:43 - now is after i've filmed the entire
81:44 - video
81:45 - but anyways hopefully that clears it up
81:47 - use result do not use high confidence
81:49 - although you can of course check high
81:50 - confidence but that is not telling you
81:52 - whether or not there was actually a
81:53 - match
81:54 - so let's refresh now and reset
81:58 - our javascript and let's see if this
82:00 - works so
82:01 - empty cache and hard reload let's go
82:04 - through the whole process so let's
82:05 - create an account
82:06 - i'm going to say tech with tim you know
82:08 - let's go 25
82:10 - at gmail.com and let's go tim one two
82:12 - three four five and let's press
82:14 - submit okay we need to collect some
82:16 - typing data from you for
82:17 - two factor authentication you may be
82:19 - asked to fill this out multiple times
82:21 - all right so now we get redirected to
82:22 - this page right that's exactly what we
82:24 - wanted
82:24 - now we're gonna do this again check with
82:25 - tim25 at gmail.com and then tim12345
82:30 - submit uh email is invalid is it did i
82:33 - what did i type for the other email
82:34 - check with tim 25
82:38 - okay um okay i guess i typed in the
82:41 - email wrong
82:42 - uh i don't know if i mistyped it the
82:44 - first time or if that was actually
82:46 - incorrect or
82:46 - showing me let's try this again
82:49 - techwithtim25
82:50 - at gmail.com and then tim one two three
82:54 - four five
82:54 - submit email is invalid okay so i think
82:57 - we're having
82:58 - a small mistake here uh i have a feeling
83:01 - that what's happening
83:02 - is that from the let's go here
83:06 - uh typing patterns button ah this is the
83:09 - issue sorry so from the typing patterns
83:11 - but we need to change this to true
83:12 - what was happening is that since we were
83:14 - passing false here from the typing
83:16 - patterns button
83:16 - it was trying to create a new account
83:18 - for us not sign us in so obviously the
83:20 - email is invalid because it was already
83:21 - used so that was the issue we were
83:23 - having
83:24 - so now they should fix it when you
83:26 - change it to true now the endpoint it's
83:27 - going to send to is login
83:29 - not sign up okay so let's reset here
83:33 - let's just go to log in and let's do
83:36 - this so
83:36 - tech with tim 25
83:39 - at gmail.com and then tim12345
83:43 - log in and we need to collect some
83:45 - typing data so notice it says we have
83:47 - one enrollment
83:48 - and we need more so let's go ahead and
83:49 - do this tech with tim25 at
83:53 - gmail.com and then tim12345
83:56 - submit okay we need some more typing
83:59 - data
83:59 - let's go ahead and do that techwithtim25
84:03 - at gmail.com and then tim12345
84:08 - and this time there we go it says we had
84:10 - high confidence so now we have enough
84:12 - enrollment and now notice the action is
84:14 - verify enroll
84:15 - not just enroll so it did actually
84:18 - enroll this typing data
84:19 - it's keeping track of all of the typing
84:21 - data from now on but it's also verifying
84:23 - us this time and it told us we have high
84:25 - confidence
84:26 - so that is working that is good and then
84:27 - redirect us to the home
84:29 - page awesome so now let's just go to the
84:31 - login page and let's try this now
84:33 - so now we have enough enrollments so we
84:35 - shouldn't be asked to do this again
84:37 - it should just tell us if we have high
84:38 - or low confidence so let's do this
84:41 - and let's see and we have high
84:43 - confidence
84:44 - awesome and then redirect us to the home
84:46 - page
84:47 - so there we go that is functioning now
84:50 - what i'm going to show you how to do
84:51 - is add those little icons onto the
84:54 - fields here that kind of show that
84:56 - typing dna is keeping track of what
84:58 - you're typing
84:59 - in so this is called the autocomplete
85:02 - disabler
85:03 - as well as what is what is it called in
85:05 - here uh there's like a specific name for
85:07 - it
85:08 - uh typing visualizer sorry that's what
85:09 - it's called so what we want to do now
85:12 - is disable the autocomplete on our
85:14 - website because
85:15 - typing dna doesn't work if it just auto
85:17 - fills in the username and password right
85:19 - so it makes sense to disable
85:21 - autocomplete when you have this typing
85:22 - dna form of authentication
85:24 - so that like a password manager
85:26 - something can't fill in the password
85:28 - and then override the uh the two-factor
85:30 - authentication although it wouldn't
85:31 - override it it would just tell you it
85:33 - failed
85:34 - because you didn't actually type in the
85:35 - pattern and well there was no typing
85:36 - pattern
85:37 - so we're gonna use this autocomplete
85:39 - disabler from typing dna again
85:41 - link in the description and we're going
85:42 - to use the typing visualizer as well
85:44 - so what we want to do is get both the
85:46 - auto complete disabler
85:48 - and typing visualizer file so i'm going
85:50 - to go to raw for both of these
85:52 - i'm going to copy this this one is the
85:54 - autocomplete disabler
85:56 - i'm going to create a new file here
85:57 - inside of static
85:59 - called auto complete and then disabler
86:02 - like that dot js i'm going to paste this
86:05 - inside
86:05 - and go to the very top going to make one
86:07 - change we're going to export this
86:09 - function
86:10 - we'll say export like that that's all we
86:12 - need
86:13 - now we're going to close this i'm going
86:14 - to make a new file i'm going to call
86:16 - this
86:16 - typing visualizer
86:19 - uh i think i spelt that right and well
86:22 - we need the dot js
86:24 - so let's add js now we're gonna go
86:27 - to github i'm gonna go back to this page
86:30 - here
86:31 - we want to go to typing visualizer now
86:34 - and we want to copy this we'll say raw
86:38 - copy and we're going to make one change
86:40 - this file the same one we did before
86:42 - we're just going to export this function
86:43 - so we can access it so export function
86:46 - and now i will show you how we can add
86:48 - the typing visualizer as well
86:50 - as the autocomplete disabler all right
86:51 - so this part is actually super easy it's
86:53 - literally like five lines of code now
86:55 - that we have these uh files
86:57 - go to index.js and at the very top under
86:59 - when we define typing dna
87:01 - uh or sorry we're actually going to go
87:03 - above that we're going to import the
87:04 - auto complete disabler so we're going to
87:06 - say
87:06 - import and then auto
87:09 - what is this actually called auto
87:12 - complete
87:13 - disabler just want to make sure my
87:15 - capitalization is correct
87:16 - we're going to say from then dot slash
87:19 - autocomplete disabler
87:21 - dot js so now we have this class
87:25 - imported now we're going to use this so
87:27 - we're going to say const
87:28 - auto complete disabler is equal to
87:32 - auto complete disabler and then inside
87:34 - of here we're going to pass some options
87:36 - so this auto complete disabler actually
87:38 - also
87:39 - handles the typing visualizer so we need
87:42 - this typing visualizer file because
87:44 - this auto autocomplete disabler is
87:46 - dependent on this file
87:48 - and now that i'm thinking of it this
87:50 - file is probably going to be half
87:52 - it's probably going to have to be named
87:53 - the same thing typing visualizer
87:57 - let's see maybe not we'll see if it
87:59 - works if it doesn't work we're going to
88:00 - have to change this name to whatever it
88:01 - was on the github in fact let's just do
88:03 - it now
88:03 - to be safe say typing hyphen visualizer
88:07 - so the reason i made this change is
88:08 - because i'm pretty sure somewhere in
88:10 - this file
88:11 - it or not in this file in autocomplete
88:13 - disabler it
88:14 - imports the typing visualizer so i just
88:16 - want to make sure the name matches what
88:17 - it would have been on the github
88:18 - repository
88:20 - so that this file doesn't have any
88:21 - mistakes in it all right so now we want
88:22 - to pass
88:23 - two options inside of here we want to
88:25 - pass the following
88:27 - show typing visualizer this is going to
88:29 - be true
88:30 - and then we want to go show typing dna
88:33 - logo
88:34 - this is going to be equal to true as
88:36 - well so this is pretty straightforward
88:38 - this is going to do what it says we're
88:39 - going to show both the visualizer and
88:41 - the logo i'll show you what both of
88:42 - those are if you want to see exactly how
88:44 - this works just go to the github
88:46 - there's not really too much
88:47 - documentation because it's really
88:48 - straightforward and you can read through
88:49 - the usage
88:50 - but it's like really simple then what
88:53 - we're going to do after this
88:54 - is we're going to use the auto complete
88:56 - disabler so auto complete disabler
88:58 - dot disable and then we want to disable
89:01 - auto complete so it's going to be
89:02 - disable
89:04 - auto and then complete
89:07 - like that and then we're also going to
89:10 - disable copy and paste
89:11 - just to make sure that the user cannot
89:13 - copy and paste stuff in
89:14 - to their username and password field so
89:16 - we're going to say auto complete
89:18 - disabler dot disable and then this is
89:20 - going to be
89:21 - copy paste like that
89:25 - and that should be all we need so now
89:28 - after we've initialized this
89:29 - initializing just meaning you know
89:30 - creating it and sorry this should say
89:32 - new before this
89:34 - what will happen is we will say let's
89:36 - show the visualizer let's show the logo
89:38 - let's disable autocomplete let's disable
89:40 - copy and paste if you didn't want to
89:42 - disable either of these you just
89:43 - wouldn't have these two lines
89:45 - and then it would still show the
89:47 - different logos because of the way
89:48 - you've initialized it
89:49 - so that's literally all we need for the
89:51 - autocomplete disabler and the typing dna
89:53 - visualizer
89:54 - now if you go to the website and you
89:57 - reset the cache
89:59 - you should see the typing dna visualizer
90:02 - was not loaded okay so it looks like we
90:03 - got an
90:03 - error i'm going to look at why this
90:05 - isn't loading and i'll be right back
90:07 - all right so i've found the error and
90:09 - it's actually it's not really an error
90:10 - but it's just
90:11 - something that i forgot to tell you to
90:12 - do so the reason why and let me just
90:14 - show you what's happening
90:15 - if you look here we had the typing dna
90:18 - visualizer was not loaded so that meant
90:19 - pretty much that the autocomplete
90:21 - disabler
90:22 - could not find the visualizer so what we
90:24 - need to do is import it in this file now
90:26 - this is a small mistake that they do
90:28 - need to fix i actually talked to them
90:30 - about this hopefully they will fix this
90:32 - we just need to include a line here in
90:33 - this file in auto complete disabler
90:35 - which notice i've renamed it now to the
90:37 - same thing it was on the github
90:39 - we're going to say import and it's going
90:41 - to be
90:42 - typing visualizer
90:46 - and this is going to be from if i can
90:48 - type properly
90:50 - dot slash typing visualizer dot js
90:53 - so now what this will do is load the
90:55 - typing visualizer since we're importing
90:57 - from that file it will actually load the
90:59 - code that we need
91:00 - and then this shouldn't be a problem
91:01 - anymore so again just make sure you have
91:03 - the export in this file
91:04 - as well as in the typing dna visualizer
91:07 - file make sure you have the export
91:09 - then go to auto complete disabler import
91:12 - and again make sure you have the export
91:14 - okay so now let's run this we've got to
91:16 - reset our cache
91:17 - and we should see that we get the logo
91:19 - awesome so there we go some messages
91:20 - have been moved to the issue panel yeah
91:21 - there's no worries
91:22 - so this is the typing dna logo right and
91:25 - i don't think it doesn't do anything if
91:26 - you click on it but it's just showing
91:27 - you that hey
91:28 - if you start typing here we are going to
91:30 - start
91:31 - keeping track of what you're saying so
91:32 - you can disable either the logo
91:35 - or this right so you can pick if you
91:37 - want to have the logo or if you just
91:38 - want to have the visualizer
91:40 - so in fact if i go to index.js
91:44 - and i disable the logo let's see what we
91:47 - get now
91:47 - so let's reset now
91:51 - why the logo is still here eh okay
91:54 - show typing visualizer true but show
91:56 - logo false
91:57 - maybe i have to actually put false here
91:59 - let's try putting false
92:00 - show typing dna logo false let's reset
92:04 - the cache
92:05 - and okay so now it doesn't show the logo
92:06 - but it does show the typing pattern so
92:08 - sorry you do need to include the option
92:10 - you just need to explicitly set it to
92:12 - false anyways i want the logo and the
92:14 - visualizer so i'll leave them both
92:15 - true but of course you know feel free to
92:17 - disable or enable them as you please
92:19 - let's reset our cache and there we go
92:22 - now as i type it kind of shows that it's
92:24 - keeping track of what i am
92:26 - typing okay so that is pretty much all i
92:29 - had to show you for this tutorial
92:31 - now this is obviously not a fully
92:32 - complete website the idea was to give
92:34 - you something that
92:35 - actually works that you could you know
92:36 - test out yourself and to show you
92:38 - how you can use typing biometrics as a
92:40 - form of two-factor authentication
92:43 - now another massive thank you to typing
92:45 - dna
92:46 - they were the ones who sponsored this
92:47 - video as i said at the beginning i had
92:49 - the opportunity to work with some of the
92:51 - developers and some of the people
92:52 - at typing dna there are great people uh
92:55 - super interested in just making the
92:56 - developer community
92:57 - so much better with products like this
93:00 - and
93:00 - they were super open to all of my
93:01 - feedback i had for example you know
93:03 - fixing
93:04 - these files like adding the exports and
93:07 - you know adding the imports and making
93:08 - it work better and all of that
93:10 - but definitely show them some love check
93:11 - them out from the link in the
93:12 - description i assume if you guys fall to
93:14 - this point you have an account already
93:16 - but all the information you need about
93:18 - typing dna will be there
93:20 - again you can find all the information
93:22 - about your application from the typing
93:24 - dna dashboard so typingdna.com
93:27 - clients all of the api documentation and
93:29 - all of the resources i used will be
93:31 - linked in the description
93:32 - and just remember that typing dna does
93:34 - not only work for login and sign
93:36 - up you can use it for all kinds of other
93:38 - applications i would definitely
93:40 - recommend doing a quick read through
93:41 - their website because it's very
93:42 - interesting the kind of applications
93:44 - they've used it for
93:45 - so anyways that is going to conclude
93:47 - this video i hope you guys found this
93:49 - useful if you did make sure to leave a
93:50 - like
93:51 - subscribe to the channel and i will see
93:52 - you in another youtube video

Cleaned transcript:

hello everybody and welcome to another youtube video so in today's video i'm going to be showing you how we can implement typing biometrics as a form of twofactor authentication for a website for a signin page or some application where you need to authenticate or log in users so for this video i'm teaming up with a company called typing dna and they are providing a completely free api that actually allows you to authenticate users based on the way that they type so this is super cool i had an awesome time building this project i'm really excited to show it to you guys in this video and again just to clarify what we're going to be doing is taking this api here i'll discuss obviously how the api works and kind of the flow and everything like that and we're going to be implementing it into a project so i'm going to show you how you can take a project that has you know kind of a standard sign in and sign up form and then how you can take this api and integrate it with it such that when users sign in it will actually send a request to the api and see if the user who signed in is the user that they say they are based on their typing biometrics now when i say typing biometrics i pretty much mean the typing pattern of users signing in so when they type in their username and password typing dna is going to keep track of their typing pattern so kind of the sequence of keys that they press and the duration of time between those key presses that's going to act as the biometrics it's then going to send that data to the typing dna api the api is going to kind of check that against previous typing patterns it has and then it's going to tell you whether or not this user is validated and whether or not this typing pattern matched so this is super cool i'm really excited to show this to you and specifically what we're going to do is integrate this into an existing project so i have a really simple project i've set up i'm going to demo it to you in just one second this project just has a sign in and sign up form it has a really simple flask web server kind of running the website i'll walk you through the project itself so you have an idea of all of the code that's prewritten and then i'll show you how we can take this and add it in so with that said let's dive in i'll quickly mention that this tutorial is not for beginners you should have some familiarity with javascript and web development you don't have to be an expert you just have to kind of know a little bit about it to be able to follow along so anyways i'm going to get into the demo now and show you what we're going to be building all right so i've got the website up here now this is actually the finished implementation this is not the starter project although the starter project looks almost identical and again in the starter project it has the fully functioning website except the sign in and sign up forms are not kind of coded out yet or they're not hooked up to the back end so we'll have to hook those up to the back end when we actually start working on this now the point of this website was to stay as simple as possible just to make it really easy and really clear on how we do the implementation i don't want to confuse you with you know a really complex website just wanted to spin something up that would be kind of usable and that we could actually test this api with so you can see here i have a website i'm using bootstrap and this is just standard html i have a home page a login page and a sign up page now on the sign up page we'll actually start by just creating an account so to create an account i'm going to say tech with tim let's just go with 12 at gmail.com and notice that this little typing dna thing here is going up and down indicating that it's keeping track of my typing pattern now we're not going to have to code this out this is provided by typing dna we just need to add it to the front end of our website so it can keep track of a user's typing pattern all right now that we have that i'm going to type a password so i'll go with tim12345 and then i will press submit now when i do that it says we need to collect some typing data from you you may be asked to fill out this form multiple times so the way that this api works is that you need a certain number of entries or typing patterns so that typing dna can actually validate another typing pattern against them so you need i think three typing patterns to start and then as soon as you have three typing patterns you can actually start using the next patterns you send to the api as like authentication patterns rather than let's say enrollment patterns or patterns that are going to be validated against so anyways i'll talk all about this later on just want to give you an idea of why we have to type this multiple times so techwithtim12 at gmail.com and then tim12345 i think it was 12 that i used okay we need to collect some typing data from you you may be asked to fill out this form multiple times all right so tech with tim12 at gmail.com and then tim one two three four five okay let's submit that it's going to ask me one more time and now this time when i type in my username and password it's actually going to tell me if i am validated so if this typing pattern matches the patterns that it's collected previously so techwithtim12 at gmail.com tim oops one two three four five okay so submit and notice we get typing dna indicated that there was high confidence in your login so there we go we are now signed in that validated us and this is what i'm going to be showing you how to build now the reason why this is great is because whenever you sign into a website you're going to have to type in your username and password anyways right so this is an extra layer of security that you can add that's fully automated and that doesn't require the user to do anything else that they wouldn't normally have to do so you no longer need to whip out your phone and typing type in like a twofactor code or go to your email and type in that code or anything like that this is just a really great added security layer that is pretty easy to implement it's kind of like why wouldn't you just add it to your website now that said this should not be used as the primary form of authentication this obviously can fail if you're typing with one hand you're typing really slow or you're trying to you know break the authentication you will break it you have to type the same way most of the time when you're typing in your username and password and if you're like deleting characters and retyping characters this may fail as well but most of the time it's going to work and as i said it's kind of just like why wouldn't you add it in it's super simple automated and i just think it's actually really cool so that is the demo now i'm going to show you the starter project which you're going to need to download to get started we're then going to create an account with typing dna this account is just so we have access to the api and we can get our api key and api secret i will then very briefly discuss the flow of our application so how things are going to be communicating with each other then we will jump into the code and start doing this implementation so there is a github repository down below in the description in fact all of the stuff i show you here will be linked down below as well as timestamps for when i go over certain parts of the implementation anyways what you need to download is this typing dna starter code folder now it's a github repository if you're not familiar with github all you do is press on code and press download zip that will download the entire project and then you will have the finished project which is just the code i wrote before this video that i'm going to be kind of referencing and then i have the actual starter code which just has a very bare bones website that functions but doesn't really do anything we need to kind of hook up some different components so you want to download this folder or you'll download that entire thing and then you want to go into this folder and this is where you can follow along with me as we do the implementation now notice here i also have links to some of the documentation we'll be using but anyways go to the description download this project that is how we get started now once you've done that what you're going to want to do is go to the typing dna website again link in the description and you can read through this and kind of see how it works it's actually interesting we don't have to use typing dna just for logins we could use it for credit card payments uh for just other texts that you may be typing in this is just an example of how you do this specifically for login but you can use typing biometrics for a ton of other stuff so anyways you're gonna go here you're gonna go to check out our api now free you're gonna press on that and it's gonna bring you to a page that looks like this now actually it should probably bring you to a sign up or sign in page on that page you're obviously going to create an account again totally free and then you should be brought to some like dashboard like this once you're here you want to pay attention to this api key and this secret we will be using these later on when we actually communicate with the api so now that's all set up i'm going to walk you through kind of the flow and just a little bit of the documentation for typing dna and then as i said we will discuss the starter project and then do the implementation so the api documentation is linked in the description it's also really easy to find you can find it here from like the tutorials page or the api documentation page and this kind of illustrates how this actually works so the idea is you're going to have a typing biometrics recorder this is a javascript class that's provided by typingdna in fact this is the file right here typingdna.js we're literally going to download this file bring this into our project and this is what's going to be kind of sitting on the front end and actually keeping track of what the user is typing and their typing pattern we're then going to use this class to get the user's typing pattern we're going to send this typing pattern to the back end of our website so from the front end it's going to go to the back end the back end of our website is going to send a request to the typing dna api there's actually only one end point we need to use that automatically knows whether we're verifying or whether we are enrolling new typing patterns it's called the auto api we're going to send that typing pattern and that's going to send back a response to us that will tell us this pattern was registered we validated this user or whatever it is that it needs to tell us so that is the idea then we are going to get that response on our back end we're going to send that response back to the front end and then we're going to display to the user whether or not they were validated now of course you don't have to send this back to the front end the reason we're doing that is just so we have some visual that tells us yes this worked or no this didn't work now the idea is when you actually use this in a real world application you would not allow a user to sign in unless they were validated by typing dna now if they were invalidated you could ask them for another form of twofactor authentication or whatever else you might want to do so that is kind of the idea and the flow and again the api documentation is available in the description now notice that there's a few different ways to use this so there's same text any text and a few other methods that you can use to kind of send typing patterns so in our case we're going to be keeping track of the typing pattern of a user's email and password now this is because we want to have the same text the user is typing in and we're collecting the typing pattern for every single time we're performing like a validation we're sending that text to the typing dna api but you can see here that it's saying like an average email and password contains 30 characters and that is enough characters to give us a relatively high accuracy or confidence rate in being able to validate a user so the more text you have the better this is going to be and if we use both the email and the password that should ideally give us enough text now if you're going like under 15 characters of text this isn't going to be very accurate so just keep that in mind the more text the better so you want to use as much information as you can but you need to ensure that the user's always going to be typing in the same information and sending the same text pattern otherwise you're going to have stuff that's not super accurate all right so that is kind of the idea now i guess i should just walk you through the starter code i have this open in visual studio code i will show you how to run this project and install the dependencies that you need so you can see here that i have this website folder this again you would have found just from the github and right away there's this requirements.txt file now of course we're going to need python installed we're using flask which is a python backend web framework and what we're going to do is install flask and install flask sql alchemy which we will use for our really simple database that we're going to have that keeps track of track of users emails and passwords so what we need to go do is go to some terminal or command prompt depending on the operating system you're on and we're going to use pip to install these packages so you're going to go to your command prompt and you're going to type pip install and then hyphen r and then this is requirements.txt now make sure you're in the correct directory so you're beside or in the directory where the requirements.txt file is and you run the command pip install hyphen r requirements.txt that should install what you need in your python interpreter if for some reason this doesn't work try pip 3 install hyphen requirements.txt if that doesn't work for you try python3 hyphen m pip install hyphen requirements.txt if that doesn't work for you try python hyphen m pip install requirements.txt and if that doesn't work for you i have two videos in the description or linked in the description sorry that will tell you how to fix this command so anyways get flask installed get flask sql alchemy installed and then we're pretty much ready to go so first of all to run this project and let me just close the other instance that i have running on my other screen what we need to do is go to this main.pi file and just run this file that's literally all you need to do so from vs code i will press the run button it's going to say no module called flask okay so i need to just change my python interpreter let me just do this quickly in visual studio code i think this is the one i want to use you guys shouldn't have this problem it's just because i have a ton of python interpreters okay let me change this again what's the one i want to use let's see if this is the right one and okay so when i have the correct python interpreter that has flask installed when you run this it will say that you go to the following url so 127.0.0.1 colon 5000 if you go to that url in vs code i can control click it will bring you to the website so that's all you kind of need to know to run the starter code and you can leave this starter code running while you are actually working on the project one quick tip here though if you have this running and you update any javascript what you need to do is rightclick if you're in google chrome go to inspect element and then hard reset and clear the cache you just need to clear the cache so that it refreshes the javascript for the website uh just keep that in mind if your javascript's not working clear your browser cache and then that that should work for you okay so that is how you run this project let me just run you through kind of how this is coded out so that you have an idea of what we're actually going to be doing here so this is flask i have a ton of tutorial series on flask if you're unfamiliar with it you're welcome to watch that this is not going to be a tutorial on flask or on python web frameworks it's just going to discuss how you implement typing dna into a project so this main dot pi file says from website import create app it runs that function and then it runs our flask application in debug mode that's all this is doing if you go to this website folder which is in the same directory as main.pi and you go inside of here to the init.pi file this file runs as soon as this folder is imported by another file so whenever you have underscore underscore nit underscore underscore.pi it makes whatever folder it's inside a python package which means when you import that package this file runs so when we import that it runs this file we set up a really basic sql alchemy database this is an sqlite3 database that's sitting locally on our computer you can see database.db right here then what we do is we create and configure our flask application so we say the app is equal to a new flask instance that uses the name of the file we then have the configuration variables so our secret key this is for encrypting session data we then have our sql alchemy uri which is the location of our database we're calling this database.db we then initialize the database with our application we then import the two files that are going to contain our endpoints i'll show those to you in one second we register these two files and the way this works is we have endpoints these are like you know slash home slash authenticate slash login in these two files just to keep things organized so we just register them with the app we then import our model our model is just going to be what will actually represent our user in our database we then create the database if it doesn't already exist so we just check if the database exists if it does or sorry if it doesn't we create the database then we print out create a database we then return app and what you have to do is do app.run debug equals true to run this application which happens in main.pi right so that is kind of the basic flow of starting up the application now if you go inside of used up high and you go inside of off.pi you'll see we have a few endpoints so auth.pi we have auth is equal to a flask blueprint a blueprint just means this is a file that stores endpoints it's easy as it is we register to roots so slash login and slash sign up stored in this auth blueprint then if you go to init top hi you can see we're registering this blueprint called off from the auth file same thing with views views is for views that don't have to deal with authentication so i have my home view and my typing patterns view the typing patterns view is the view you see when you need to type in your username and password multiple times to send enough typing data to typing dna so that's what we have there uh models this stores the model for our user so we have user we have an id an email and a password these are just the fields and the database that we need to store and then finally we have our templates folder inside of our templates folder we have a bunch of html i won't really discuss this because again this is not a tutorial on html but what i'm doing is loading bootstrap which is the css framework i'm using i'm also loading jquery which is a javascript framework required for bootstrap and i'm configuring my index.js file which is stored in my static folder inside of this website folder so whenever you have static files javascript being a good example or images or something like that you put them inside of a static folder for your flask project that's just important you have to do that it's just a flask requirement and then i'm loading this javascript file from what i'm calling my base html template so if you're unfamiliar with flask it has a templating language called jinga or it renders templates that use a templating language called jinga jinja i believe and what you can do is you can create html documents that have overrideable parts so notice here i have this block title and then i'm ending this block now this block can be overridden from another html file so i can kind of use all of the html here and just change for example the title or anything that is defined inside of a block so this means i can use this web page right here as the base of my entire website now notice i also have this block called content so if i go to say home.html you can see we override the content block and the title block and we extend from the base template and that means it inserts this html into that block in the base template and then shows that on the actual web page same thing for login we're overriding the content and the title block and i have all the html i want to appear in this block on this website now this is just a really simple login form i have a few names for my fields labels and all that and this uses bootstrap same thing for sign up same thing for typing patterns you're welcome to read through this on your own so that is the idea last thing if i go to views.pi you can see i'm rendering these html templates so when i go to the root slash typing patterns it renders the html template stored in the templates folder that is called typingpatterns.html so that's all i need to walk you through for this starter code i do apologize if you don't understand a lot of this again this is not a flask tutorial you really don't need to understand a ton of this to follow along if you would like to follow along though again on my channel i have a ton of tutorials on flask so with that said let's start implementing typing dna the first thing that i want to do is actually configure my sign up and my sign in pages so that they are going to actually work because right now if i try to sign in or sign up on my website so i go to log in or sign up and i press login nothing happens we haven't configured anything so we need to do that now so as i was saying what we need to do is make it so this email and password field and actually let me just reset this cache here because you can see that typingdna logo was popping up but that was the old javascript that was rendering that i need to reset my cache to see the updated javascript for this starter project because previously i was running the finished project and the javascript is getting all mixed up anyways what we need to do is make it so when we type in an email or password we can create a new user account or we can sign them in or we can confirm whether the username or password was correct so we need to create two endpoints one endpoint for logging in and one endpoint for signing up now based on the way that we're going to be doing things here we need to have an api endpoint so an endpoint that doesn't actually return html but instead returns a response like it tells us you signed in successfully where you couldn't sign in because of this reason so rather than showing html it's just going to send something back to us that tells us whether or not this login was successful so the idea is from our front end from javascript actually we're going to call this api endpoint the api endpoint is going to return some information to us and then we'll show that on the screen so what i'm going to do is i'm going to go into my auth.pi file and i'm going to create two new endpoints here now the first one that i'm going to create is going to be at auth.root and then here i'm going to say slash api slash login now notice this is different from regular login because regular login will actually show the login page this is not going to show the login page it's going to actually you know validate or authenticate the user so what we're going to say is the following define api underscore login and then inside of here what we are going to do is get data that was sent to us from a api request so a request is going to be sent to this endpoint and it's going to send a username and a password so we need to get that information so we're going to say data is equal to and then request which notice is imported up here dot and then this is going to be get underscore json so the way we're going to be sending this data it's going to be in json format so we get the json from this request and then we're going to parse the json to get the email and the password so i'm going to say that the email is equal to and then data dot and this should be get and then email and then i'm going to say that the password is equal to data dot get and this should be password all right so now that we have that what we want to do is we want to check if this password is associated with the correct user with this email so i understand if you haven't used floss before this might seem a little bit confusing but when we define a database model we are using kind of a flask inheritance structure or we're inheriting from flask database model what this allows us to do is use this database model to actually run queries on the user table so what we can do is say user is equal to and then user which i've imported from the models file here dot query dot filter by and then we're going to filter by a column so a column is just a field stored in the database so i'm going to say email equals email so i'm looking for the user object in my database that has the email that this user tried to sign in with because keep in mind this email is what the user typed in this password is what the user uh typed in but this user right here is actually what's stored in the database and what account was created so it's quite possible that the email or sorry the password they typed in is actually not the correct password we need to check that against the password that's stored in this model so now what i'm going to say is if user so if there's no user if this returns nothing to us that means that a user with this email doesn't exist so in that situation we'll say else and what we're going to do is return a response so we're going to say return and then make underscore response and what this response will do or what this function will do is create an http response that will return to the sender whatever sent this request some information now we need to return json here so i'm going to say jsonify what jsonify is is a function that we've imported let me make sure yep from flask it will take a python dictionary and turn it into a json object so we're going to say jsonify and we're going to say message colon and then no user with that email exclamation point and then for the status code whenever you send an http request you send a status code we'll send 401 i believe 401 stands for unauthorized or bad request so we're going to send 401 if the user doesn't exist however if the user does exist we need to check if the password we typed in matches with the password the user typed in so we're going to say if not and then this is going to be check password underscore hash and we're going to need to import this function so the idea here is we're going to store a hash of the user's password in this model you never want to store plain text passwords you want to store hashes of them if you're not familiar with hashes it's pretty much a oneway function so a password goes through a hash function it creates a unique hash every single time the same password goes through that hash function it generates the same hash but from that hash it's nearly impossible at least with our understanding of mathematics and cryptography to get back to the original password so that's what a hash is if you're unfamiliar but i'm going to say from and i can never pronounce this uh this name it's work z workzig some german name or something dot security you'll have this installed if you installed flask and we're going to import two things generate password hash and check password hash so what we're going to do is say if not check password hash and we're going to compare user.password which is a hash of the password to the password that the user typed in when they tried to sign it so what this is going to do is take the password hash which is stored in the user object so user.password so whatever user has that email we get their password and then we pass the actual plain text password it will hash this password for us compare it to this here and tell us if this is true so if not uh check password hash that means that the password was incorrect so we are going to say return make underscore response and we're going to say jsonify again if i spell jsonify correctly and i see why this wasn't working i wasn't spelling it correctly okay so jsonify and then inside of here a python dictionary we're going to say message colon and then the message we're going to say is password incorrect exclamation point and we're going to send again for the status code 401 because we know that this was like a bad request or it was unauthorized all right now finally in the situation where the user has the correct password and the email exists we're going to return to them this was successful they actually you know signed in so we're going to say return like this and then make underscore response jsonify inside of here the message is going to be let's just say login successful and then the status code is going to be 200 for ok and we are also going to send some more information we're going to send something here that i'll discuss in a second it's going to be user underscore id colon and then user dot typing underscore id now we haven't i haven't discussed what this is yet just leave it here i'll come back to it when we do this but we need to send the id that's associated with the typing dna user account so we can get the users typing patterns i know this is confusing makes no sense right now just throw it in there and we will work on that in one second so now we have this login function done now what i want to do is code out the sign up function or the sign up api endpoint then once we have that we're done a lot of the kind of annoying grunt work that we need to do and then we can actually implement the typing dna api so what i'm going to do now is make another route i'm going to say at auth dot root this is going to be slash api slash sign up and then what we're going to do here is define api underscore sign underscore up and actually i just realized that when we define these roots here sorry we need to define the method the http method that's accepted which is going to be post so i'm going to say method or sorry methods equals post up in the root what this means is we cannot send a get request to this api or to this endpoint we only can send post requests which is what we want to do because we're posting a sign in or we are posting a sign up so now from sign up i'm actually going to copy the entirety of this log in function or log in root paste it in here and we're just going to make some very minor changes so now what we're going to do rather than checking if the user's password is correct we're going to check if this email is already in use and then if it's not in use we'll actually create an account for them but first i realized i made a small mistake here if you go to user what i need to do is dot first now what dot first will do is just return to the first entry that it finds or i believe none if there was no entry that was found so when we do a query we just need to add dot first if we want only one entry of course you can query a database table table for multiple entries then you wouldn't use this.first function but for our purpose we need to add this so just tack this on to the end of the query all right so now that we have this uh what we're going to do i'm just reading my notes here to make sure this is all good is make sure that the user's email is valid and when i say valid that means it doesn't already exist and it is of adequate length so i'm going to say if user or belen of email is less than four so if there's less for less than four characters in their email we're going to remove this line because we don't need this and we are going to return a response that says that this email is already in use or email is invalid email is invalid exclamation point and again we will send 401 as the response code now if that is not the case so inside of an else statement here let me get rid of this what we want to do is actually create a new user that has this email and has this password and then add it to the database and we actually want to return information about that user to our front end once we create it so i'm going to say new underscore oops new underscore user is equal to user right we're going to use this user object which is modeling our users in the database we're going to say email is equal to email we're going to say password is equal to so here we cannot store the plain text password we need to store a password hash so we're going to generate a password hash so generate password hash and then what i'm going to do is put the password and i'm going to say that the method is equal to and then sha 256 which is a very popular encryption algorithm or method whatever you want to call it so let me just make sure this is good looks good okay password equals that method equals that i think we are good with that okay so now that we've created the new user what we need to do is actually add this user to the database so to do that we have two things that we need to write now notice here that i've imported my database from dot what that means is import from this init.pi file right here i have this variable called db that stores the database instance or like access to the database so i can use db and what i can say is db dot and then i'm going to say session and not commit that's the next line db.session.ad and we're going to add this new user which is the user object to our current database session we're then going to commit this so db.session.commit which will actually write it into the database and save it permanently so now that we have that that's like pretty much all we need but what we're going to do is modify this response here so that we also send back one piece of information this is going to be called user underscore id and again this is going to have new underscore user dot typing underscore id now again i'll discuss what this is in a minute and we're going to send for our response code not 401 but 201 because 201 stands for created i think that's correct at least so we're going to send that all should be good now okay so now what i want to do is very slightly modify our database or modify our user model sorry so that we have now this new field called typing id which i've been discussing so i want to go to models i'm going to create a new field here but let me discuss why we need this by first referencing the typing dna documentation so when you go to typing dna documentation let's go here to where the actual api is here we are so this is the api so what we're going to do is send a request to this url right here now our application will have a client secret or an api secret and api key that we will send along with this request but what we need to send is an id of a user along with their typing information and then typing dna handles literally everything there's only one endpoint we need to send this information to but we need a unique id for our user that is different than the id that is used to represent that user in our system so what i mean by that is our user has an id an email and a password we should not use any of those three pieces of information for the id that we send to typing dna so just to be clear here typing dna kind of stores all of our users right if i go to my dashboard you can see it says i have 15 users these are just ones i was using when i was testing so these users are associated by their id so when we send an id that's how it figures out what user we're talking about but this id must be unique for typing dna this is just for security purposes you do not want to have the same id being used for your internal representation of users and your representation for users for typing dna so what that means is every time we create a new user we need to generate a unique id that is going to be unique for that user different than the id they have in our system and then we use that with typing dna that is what the typing id is that i've been referencing here now notice if you go to python for example this shows you how to actually send the request it literally gives you everything that you need so to send the request to typingdna you just copy and paste this code into a file you have some function that you know runs the request and then you just need to pass it the correct typing id which is i believe tp yeah i think tp is what the typing id is going to be and again we just send this information to the auto endpoint and that's all for the api of course you need to have this account created first of all so there that's why we need the typing uh id or typing whatever yeah typing id so let me go to models what i'm going to do is create a field here i'm going to call this typing underscore id and this is going to be equal to db.com it's going to be db db.string this is the type of the column it's going to be a string id that has at most 100 characters i'm going to say that the default is equal to the string of uuid dot uuid 4. now i'm not going to discuss uuid in depth because this is kind of somewhat complicated topic if you want to understand how this actually works what this line does is generate a completely unique id that will never be the same as something else just know that that's what it does you can look up uuid if you want to see how that works but you import the uuid module and then say string uuid.uuid4 and that will generate an id for you that will be used as the id for this column so when you do default this means that it's going to automatically default to this random id so we don't need to actually you know insert an id when we create this model it just generates one for us automatically so that's kind of the idea here same thing with this id here since this is the primary key of our database model it just automatically generates an integer id for this model or for this user so now that we have this in here what we need to do is actually we're done with the off end points i believe let's just see if this actually works now uh so we need to hook this up to our front so i'm kind of getting a bit ahead of myself there's a lot of stuff we need to do so it's hard to discuss or figure out what order we should go in but we have this sign in and we have this log sign up and login page now of course i need to have my server running otherwise this isn't going to work so let's go ahead and run this and refresh but what we want to happen or what we want to happen is when we go to sign up we type in our email and password we press submit we want to collect this data and send it to our backend so we can then create the user account so to do that it's going to require some javascript now while we do this let's also implement the typing dna api and specifically the typing dna pattern recorder so from the api documentation you can find a link to this page right here which is the typing dna recorder javascript file now you can also find this right from my github repository there's a link there will be one in the description too what we need to do is take this file right here from this repository typingdna.js and we need to copy the contents of it and bring it in to our project so what i'm going to do is go to the raw of this i'm going to copy all of this now it's important you go to raw to make sure you don't get any of the github weird indentation so i pressed on raw just copied did you know control a control c and then i'm going to go here i'm going to go to my static folder i'm going to create a new file i'm going to call this typing dna dot js it actually doesn't matter what you call it and then i'm going to paste all of this in and i'm going to save so let's go to the top of the file and we're just going to make one very slight modification to this file and we're going to say export this function the reason we need to export this is because we need to import it from another file i won't discuss all the javascript and how that works but you just need to export this function so you can import it from another file so now we can use this typing dna function this is going to return to us what's called a singleton which is a single instance of a class and this class will be used to keep track of what a user is typing in the input fields and their typing pattern so now what we're going to do is import this javascript class from our javascript file so we're going to say and let me just go to my javascript file to make sure i don't mess this up import typing dna and then this is going to be from and then the name of your file so typingdna.js and now we have this javascript javascript class imported now what we need to do is create an instance of this so i'm going to say const and we'll say typing or you know what let's do t dna is equal to new typing dna like that that's all we need this will create the recorder and then what we have to do is tell this typing recorder what input fields it should be recording information for so i know we're going fairly fast through this but that's kind of what we need so we took this file brought this in to our project and now we're going to actually use this class to record information that users are typing in the input fields but what i was getting to before is that we need a way to send this information to our backend so what we're going to do is run a function whenever this sign up button is pressed it will send a request from javascript to our python backend the python backend will then return a response and that's kind of how this is going to work so what i'm going to do is i'm going to say const and we'll start with login and i'll say login button is equal to and then document.getelementbyid and we're going to get the element called login hyphen button so if you go to the login page you can see that we have a button here and it says login button we are going to check for the on click event of this button and when that button is pressed we are going to run a function so let me go back to index.js so now what i'm going to say is if a login button the reason i need to do this is because this javascript class will run for every single one of our html files so if the html file that's rendered is not the one that has this login button we want to make sure we don't crash or have a problem with that so we just check to see if we actually found the login button first before we do anything if we found the login button on our page then what we do is say login button dot add event listener we're going to add the event listener for click and we're going to use an arrow function what this is is just kind of like a one line function in javascript that's going to call another function which is going to call be called log in or sign up and we're going to pass the boolean variable true now this function here login or sign up is actually going to send the request to our backend so this is just kind of configuring the you know the on press event for the button now what we want to do though is if we are on the login page if we have a login button we want to tell this typing dna recorder which input boxes it should be recording information for so we're going to say t dna dot add target like that this is a method that is a part of this class right here this is from the api documentation i'm getting this information and i'm going to add the id of the fields that i want to collect the typing pattern for so i want the typing pattern for email and i want it for password so we'll say password like that so we've now added our two typing targets we have now uh created the login button on click event listener and now what we need to do is code out this login or sign up function but before we do that i'm going to just code out the event listeners for my other pages so if we go to sign up or you know we'll just do it here sign up also has a button right so we need this button we need to configure that to do something when we press it and then that typing patterns page i have let's go this typing patterns this one has a button as well that we need to configure so that when it's pressed it you know calls this function so what i'm going to do is go to index.js i'm going to copy all of this i'm just going to change a few things so instead of line up or line up log in instead of login we're going to say sign up button and we can just go with a uppercase u2 we're going to change this to sign hyphen up button and then we're going to change the variable name here to sign up button and this variable name should be changed as well to sign up button all right so now we have an event listener for this we're going to do the same thing for this function except now we're going to call false the reason we're passing false here is because this is going to tell us whether we're logging in or signing up this function does like the exact same thing it just has a very minor change if we're logging in or signing up so we're telling this function whether we're signing up or logging in with this and then we're going to copy this again and add the same thing for the typing patterns button so we're going to say typing patterns typing patterns like that typing patterns button let me copy this paste this here paste this here and then change this name here uh what did i call this button i think i called this typing hyphen patterns button you can find this id here yep okay it's called typing patterns button so now that we have that we have our three on event click listeners so now what i'm going to do is define a function i'm going to say export function and then the function name is going to be login or sign up we're going to take login equal to true so when we pass false that means we are not logging in we are instead signing up then what i'm going to do inside of here is i'm going to send a request to our backend that has the appropriate information so i'm going to start by getting the user's email and getting the user's password so whenever we call this function that means we press the submit button on one of these pages we then need to collect their email and their password which are named by the same field like the id of the fields are the exact same so what we can say is const email equals document.getelementbyid this is going to be email and then this is going to be value and then we'll say const password is equal to document.getelementbyid we're going to get password field and we're going to get the value that's stored in there and i always forget if we need the semicolons or not i don't think we need them but for good practice we will add our semicolons all right so now that we have these uh these email and password we want to send this information to the backend so we need to first decide what endpoint what url are we sending this information to and we know that we just coded them out in this auth file we have the login endpoint and the signup endpoint and these are the ones that handle the logic of creating a new user or authenticating our user checking if their password is correct so what i'm going to do is go to typing dna or index.js i'm going to say let endpoint and then i'm going to define this endpoint based on if we are logging in or signing up so if login then what we're going to say is endpoint is equal to and then slash api slash login otherwise so else we will say that endpoint is equal to and then this will be slash api sign hyphen up let me just make sure that is the correct name i think it is so now that we have the endpoint the email and the password all we have to do is send this information to the endpoint so in javascript there's a method called fetch so we're going to say fetch and then we're going to send this to the endpoint and then we're going to pass some information with this request namely the method of the request so is it a post request is it get request is it a put request the headers so it's the content type that we're sending and then the body of the request which is going to be the data so the email and the password that we want to send so i'm going to say endpoint method colon post then i'm going to say headers and this is going to be colon and we're going to pass a json object this is going to say content hyphen type and this is going to be application slash json let me just make sure that's right sorry we have a lowercase a so application json i won't really discuss this this is just what we need to do to send this request properly and then finally inside of here we're going to have the body so we're going to say body colon this is going to be equal to json dot stringify and we're going to stringify this object email colon email and password colon password now let me just save and format this uh there we go so now you can actually read this so we have fetch endpoint method post headers content type application json and then sorry this body should not be inside of the headers this should be right there so let's format that okay that looks good all right so now we have all the stuff we need to send for our request we're sending this information to our endpoint and i think that's good so now what's going to happen is we're going to send this request we then want to wait for a response so we're going to say dot then what this is going to do is run whatever function we define in here as soon as a response is returned so we're going to say then res equals and then i guess this is less than sign or greater than sign i don't know which one you call that and what we're going to do is just return the res.json so if you don't sorry if you only have one line in your function like this in javascript it just automatically returns what you write after this line so we are getting the json from the response which is what we want that's going to have the message that we're sending and then after that so after this function runs which will happen immediately what we want to do is get the data which will be contained in the response.json and we're just going to print this out we're going to say console.log data so let's run that okay that's all good so now we have this and now what's going to happen is when we press these buttons it's actually going to send the request to our backend and then our back end if we go to auth here is going to return a response to us we're then going to print out the json or the data of that response to the console now the reason we're doing all of this is because we need to make sure that the user is typing in the correct email and password before we send this information off to the typing dna api so once we get this response back that says hey this was all good you know you're typing data or sorry not your typing data your email and your password was proper and this was successful then we can go ahead and send all of our typing patterns to the api so it's a lot of work to do this beforehand but anyways we do need to do that so let me refresh this page let's actually go to sign up and let's try to create an account so i'm going to say tim gmail.com and for my password let's go tim12345 and i will press submit now notice nothing happens here right we don't see anything but if we go to the console nothing's happening either ah i remember we forgot to empty our cache and hard reload for our javascript and what does this say failed to resolve module specifier typingdna.js relative reference must start with either slash or dot slash so i realized i made a small mistake here let's go to index.js and we see that we need to add dot slash here because we're importing this from the same file so sorry am i bad on that let's go back here let's refresh failed to resolve okay let's refresh again and there we go that's good don't worry about this fave icon not found you know it doesn't matter for this but now let's try this so if i just press submit notice it says email is invalid and it tells me i had an unauthorized request because well the email was invalid so now let's type in an email tim gmail.com but let's not put any password when i submit this it says no user with that email oh what the heck do we are we sending this to the right okay i think i'm sending this to the uh the wrong thing or maybe my message is incorrect um okay let's go back to the drawing board here because i think i made a small mistake let's go to off dot pi and let's see what's happening here ah i realize i made a mistake here so first of all we need to make sure that the user actually types in a password in this case we didn't type a password it actually created a user the reason we got this response though is because i forgot to rename this this should have said user created not no user with this email because well there was a user with that email but before we do this we need to make sure that the password is valid as well so i'm just going to do an l if down here um if user yeah we'll say l if uh len of password is less than 7 then what i will do is return a response that just says their password is too short so we'll say password too short okay so glad i caught that issue um that could have been a pretty big deal so we're making sure that their email is long enough and their password is long enough and then only then are we creating an account but anyways that was working let me just rerun this server and we just had the wrong response message okay so let's try this again let's refresh let's create a new email this time so tim1 gmail.com and let's see if this fails when we don't type in a password so when i press submit password too short awesome we'll try again so now i'm going to say tim12345 and there we go user created and it gives me the id of this user now this id is the typing id right the thing that we want to send to typing dna okay so now that we have that that is all good what we want to do now is see if we can sign in so let's go to log in and let's see if we can sign in with this account so tim was it one i think it was at gmail.com and then tim12345 log in login successful awesome now let's type the password wrong and this says password in correct suite so this is indeed working uh and yeah that's awesome so now that we have that what we want to do is send this information this typing pattern to typing dna we also want to make sure that after a user signs up it redirects them to a page the page we want to redirect them to is the typing patterns page because we need to collect more typing patterns from them so now what i'm going to do is code out a function this function is going to send the typing data we collected to typing dna but only if the user logged in or signed up successfully so that's why we needed all this stuff right because we're only going to send the data if the sign in or log in was successful to start there's no point in doing a two factor authentication if the first factor was not successful right so now we're going to make a function we're going to say function and this is going to be called send typing data we're going to take in here an id and text now what the id is is the id of our user for typing dna so what i've been returning right if i go back here what i've been returning as the user id this is the id that we want to use for typing dna so that is why i'm sending it back to the front end so that we have access to it and then we can send it to the back end so the backend knows which user it's going to be dealing with anyways we'll get to it when we get to it it's hard to explain stuff without the example but send typing data so what we're going to do here is say const pattern is equal to tdna so typing dna dot get pattern now when we get the pattern we need to pass in an object here and this object defines what type of pattern we're looking for and the text that we want the pattern for so we're going to say type colon 1 and text colon text now let's go to the documentation and i'll show you how this works so if i go to the documentation here let's load this up full screen and we go and we look for let's see here get typing pattern okay perfect so here it is typingdna.gettyping pattern i just realized i used the wrong name let's go back good job i referenced that not get pattern we want get typing pattern okay so this is the correct function name or method name so anyways this is the main function outputs the user's typing pattern as a string returns a typing pattern in string form this is the pattern we want to send to typing dna api options object an object of the following form type number text string text id number target id all of that so it shows you all of the potential options you can pass here and it tells you what you should pass based on the application you're using so zero for any text pattern one for same text pattern two for extended pattern so pretty much it with typing dna there's three different ways you can perform authentication you have any text any text means like doesn't matter what text you type it will just be able to validate you so if you typed like a random string the first time you enrolled information with typing data and then later on you typed another random string it can compare those two typing patterns and still validate you now we're not using any text we're using same text so it says recommended in most cases for emails passwords phone numbers credit cards short text this is exactly what we're using shorter text that is identical which allows us to have a better accuracy so this is again for our email and for our password so we're using type one for that reason then two for extended pattern most versatile can replace both any text and same text patterns best accuracy recommended in cases where text is not a secret and is uh as it records the typed characters as well okay so this you don't want to use for usernames or passwords because well the username and password should be kept secret and this is recording the text that is actually typed whereas the other ones are not okay then you have text only for type one and type two a type string that you want the typing pattern for okay awesome so since we're using same text we need to give it the text we want the pattern for and then the other ones here we don't need to specify because they're optional okay great so that's what we have and it shows you kind of an example of how this works so let's do this let's go back here and you see this exactly what we're doing we define type one text is equal to text and we'll pass in here the username plus the password as the text we want the pattern for now that we have this we want to send this information to our backend so what we're going to say is the following fetch and we haven't created this endpoint yet but we will create it and we're going to send to slash and we'll call this typing dna and then we want some options in here as well so for the options we need to define our method so we'll say method colon post we will then say headers colon and this is another object this is going to be content type application slash json let's just format that so it's easier to read okay and then finally we want to send the data or the body so body is equal to and then this is json.stringify and we're going to stringify the pattern that we're sending which is going to be equal to pattern like that and then finally the user underscore id which will be equal to the id which we passed to this function so this is why we need the typing uh id because we're going to send it to our back end again so that we know on our back end how we should send this information to typing dna then of course the pattern is what we're getting from this variable here all right then we're going to say dot then and we will do the same thing so res will return res.json and then dot then again and we will say data and we will console.log oops uh come on what is this what's going on here console dot log data okay awesome so i think that is good now of course we're going to do more than just this we're going to check the data we're going to like you know show something on the screen we're going to redirect the user but for now let's test this so this obviously we haven't created this api yet so we need to create this api we also need to use this function so the idea is that after this after we successfully hit whatever endpoint we send this request to so log in or sign up we take the typing data and we send it to that endpoint so we're going to say send typing data and we're going to send for typing data as the id this is going to be the data dot and then user underscore id and the text that we're going to send is going to be data or sorry not data this is going to be email plus password so we're just going to concatenate the email and the password together that's the text we want the pattern for so we send that as text and then the id is the user id that was returned to us however we can only send that if we got a user id so if our login was successful so what that means is inside of here i need to make this actually the body of a function and i'm going to kind of tab down here and say if and this will be data dot user underscore id so if data.userid that means we signed in successfully because if you go back to auth we only send a user id when we created the user or we signed in as that user so if we have a user id we signed in successfully if we don't have a user id this is not good so we're going to say else if data dot message so if we didn't have an id but we have a message then what we will do now is we will alert that message to the screen so we'll say alert this is just that little you know kind of crappy popup that shows up on the screen and we will just show the message so data.message so now rather than printing it out it will actually pop up on the screen so we can see it so now this should actually work except for this request because we haven't code out this endpoint let's quickly code at this endpoint just so it returns like an empty response and then we can go from there so if we go now to views.pi we're going to create a new view here i'm going to say at and we'll say views dot root and actually now that i think about it we should put this in auth because really like the typing dna is going to be a part of authentication so it makes more sense to go in here so let's say at auth.root we're just going to call this uh typing hyphen dna i'm going to say define typing dna let me just go to my notes here to make sure i'm not messing this up too bad uh and in fact just to say consistent i know i keep changing this around we're going to go back to views because in my project that i already have coded out it's on github i did this in views so just to not confuse anyone we'll just do it in views here so we'll say views dot root typing dna this will be slash typing dna and in fact no hyphen just typing dna then typing dna we want to define the method here so we'll say method is equal to post then what we're going to do is collect the data from the response so data equals response dot get json we are then going to get the pattern so pattern equals data dot gets and then the pattern we're then going to get the user id or the typing id so we'll say user underscore id equals data dot get user underscore id and then what we're going to do is now send this information to typing dna but for now i'm just going to return a response i'm going to say return make response jsonify and then we'll just put inside of here message test and we'll just go 200 for ok all right let me make sure i have all of this imported i think i do okay so we should be good now we now have this root let me rerun this nick got an unexpected keyword method ah sorry this should say methods my apologies let's rerun this and now we can actually test this out so again what we've done is just created a root here called typing dna we're going to get the information from the request we're then going to send that to typing dna we've not done that yet we will do that in the next step okay so now let's go to our website let's refresh and let's try this so i'm now on login so i'm going to say tim1 at gmail.com and then my password login and login successful user id okay that is good let me refresh my javascript because i have a feeling that was not working let's do this again so i'm going to say tim1 gmail.com and then tim12345 and now let's see it says message test okay awesome so what happened let's just run through the flow here was we go to our javascript we sent the request to our back end right we then looked at the request from our back end and we saw that we had a user id so since we had a user id we then called the send typingdata function the sendtypingdata function then got the typing pattern it then sent a request to our backend again to slash typingdna and then the response was returned that said test right and then we just printed that out so if you go here to views message test is what showed up in our console which means we called first of all this login api endpoint we then called this typing dna endpoint so that is the idea all right so let's just try this now with an incorrect password just to see if we get this message password incorrect awesome and this should work from sign in as well okay so now that we have this what we want to do is send this data to typing dna so let's go to the api documentation and let's go down to the verification section now i recommend you read through this but i will just read through the first sentence the auto api enrolls all typing patterns it receives for a given typing profile until a minimum initial enrollment value is reached for auto that value is fixed at 3 for an optimal balance of usability and accuracy verification results are not performed until a user's typing pro file contains at least three previous enrollments before which the enrollment uh intention is assumed this requirement ensures that we have collected a reasonable baseline of the user's typing behavior before attempting verification in practice this means that the first three typing patterns submitted to the auto api for a given typing profile will be enrolled only and this is a prerequisite to verifying any future patterns for the user so then it says actually i'll just finish reading it why not developers have the choice of recording initial enrollment patterns from their end users over time to reduce friction or collecting all initial enrollments and submitting them at once diluted by a semicolon the enrollment process is the same for a single or multiple submission so we're kind of going to do a combination of what it's saying here when a user creates a new account or more specifically when a user doesn't have enough typing patterns we're just going to ask them to send more typing patterns so we're going to send enough and then this will actually tell us the response from typing dna will tell us if we have enough patterns and as soon as we have enough patterns then we will just start verifying now this endpoint handles all this for us it knows if we have enough patterns it knows if we're in rolling patterns or if we're verifying which is really awesome it means we have to do like very little work so anyways we're going to go here we're going to go to python and we're just going to copy all of this code because this is the code we need to send information to typing dna so we're going to copy all of that we're going to create a new file in our website folder and we're going to call this typing dna we'll go typing dna dot pi and then we'll paste this in and actually let's keep this lower case just for consistency okay so typing dna.pi now we're going to modify some of these things for example where it says id api secret api key tp we need all of those pieces of information but once we have this we'll turn this into a function that can send a request then what we will do is from this function here we will call that other function which will send the information to typing dna it will then get the information from typing dna we'll then send that back to our front end and then our front end can display that information so the first thing that we need to do here is we need to get our api key and our api secret from our typing dna account so where it says api key it's going to copy this and we're going to paste this into our typing dna where it says api key so api key will be equal to that now api secret we're going to copy the secret i'm just going to leak mine here because i don't really care if you guys see it i'm going to close this account after the video anyways so let's copy this i'll create a new account to clarify just because i know you guys some of you are going to go and try and mess with my account but let's take this and paste this here so now we have our key in our secret it's worth noting you should not have your api secret in plain text in a code file usually you'd want to store this in an environment variable i'm not going to show that for this tutorial because it just makes it kind of more complicated than it needs to be for this purpose but just understand you you probably should not have this in plain text now id this is going to be the id of the user that we want to send to typing dna so we can delete that because we're actually going to create a function here we're going to say define send underscore typing underscore data and as a parameter here we're going to take the user id and the pattern that we need to send and this reminds me tp actually stands for typing pattern so tp can be equal to pattern and then let me just have a look at this i think this is really all we need to actually send the information so since we have a user id and we have a typing pattern i just need to go in here and find where it uses the id variable okay so id is right here we need to replace this with user id and this should be all we need to actually send the typing pattern to typing dna yes i think that is good so last thing i'm going to do here as a modification is i'm instead of printing i'm going to return the and that not resbody.dica we will use that but i'm going to return instead json.loads so load s this now let's import json first of all we need that from here so what this is going to do is this is going to take the response body you don't have to understand what all this code does essentially just sends a request to typing dna gets a response we have the response body we need to decode it in the form of utf8 utf8 is just like a text coding i i don't even know how you would describe that and we're going to decode it this is going to give us a string so this will give us just a string we want to take this string and convert it into a python dictionary object to do that we use json.load s load is obviously loading json but we're loading a string this that's what the little s stands for is load string and this will parse this string and turn it into a python dictionary object for us so then we can return that dictionary object and then from views.pi we can print it so from views.pi we're going to call this function we're going to pass it the user id and the pattern then this function is going to return to us the response from typingdna after it sends the request and then we'll be all good from there we can then use the information that we get so we're going to say from here first of all let's import this file so we're going to say from dot and this is typing dna import send underscore typing underscore pattern let me make sure i haven't messed this up too badly i think this looks good okay so now we have this function yes and ah send typing data not pattern okay so send typing data now inside of here we're going to say what should we call this response is equal to send typing data and we're going to pass the user underscore id and the pattern then we will print the response and we will also return this response from this function so we're going to say is jsonify and now instead of message test response and now i can show you what this response actually looks like so let me rerun this no module named website.typingdna why why am i getting this did i put this file in the wrong place i think i put this in the correct place from not typing dna ah i've spelt typing dna incorrectly that would be why let's spell that correctly okay so now we should be good let me rerun this server okay so all is working now and let's test this so we're going to print the response here on the back end we're also going to show it on the front end so we can see if this is working so let's go to our website let's go to sign up or actually let's go to login why not and now what we're going to do is sign in so tim gmail.com tim12345 log in now when i press this notice it takes a second and then i get an actual response here this is the response that came from this function that we just coded out so let's have a look at what this says this says action enroll enrollments 1 message patterns enrolled not enough patterns for verification message code 10 status 200 and then it shows you all this information so if you go to the api documentation you can now see uh we should let me go full screen here uh it should show you what all this means so here you can see all the things that are going to be returned in the response so firstly this is the successful response there's also response codes if there's an error right you have like all of these different error codes that could happen i'm not going to go through them you're welcome to read through them on your own but the idea is we're going to have all of these fields so this just kind of describes what they are they're really straightforward i mean you can read through it and just see exactly what it is but when you are not simply enrolling so the first three times you send this for each user it's going to enroll the typing pattern right and then once the typing patterns are enrolled what will happen is it will tell you if there is a high confidence that the pattern you just sent matches the other patterns that were there so it's just pretty much verifying you so if you get one that means that you have high confidence if you get zero you do not so you would want to use one as like a successful twofactor authentication and zero as a failure so we're going to be looking for this high confidence field we're also going to be looking for the message code now let's go to code here you can see all of the different codes if you look at 10 it says patterns enrolled not enough patterns for verification so if we see this what we're going to do is ask the user to submit more patterns so whenever the message code is 10 then we are going to redirect them to that other page the typing patterns page and then from there we're going to ask them to sign in again and again and again until they have enough patterns and then we will be good to go so let's go ahead and do this uh again that was like the documentation that i needed to show you so now that we're actually sending the patterns and everything is all good we're going to go to our index.js file and now since we have all of the information from that response from our backend we sent the information to our front end and just at this point it's good to clarify you need to make sure that you send the typing patterns from the back end of your website not from the front end this is just a security issue i think i discussed this at the beginning of the video but make sure you're not sending like a fetch request from the front end of your website to the typing dna api you have to do what i'm doing instead send a request to the back end and then the back end sends it to typing dna just so it can't be intercepted and then we take this information and send it back to the front end all right so that was just important to go through but now in the send typing data function instead of logging this result we actually want to look at this result right and we want to tell them first of all okay did you have high confidence or like was this valid or do we need more typing patterns so we're going to say dot then data we can print out the data still if we want to do that but after that let's put that inside of here we want to check if the message code is 10. so we're going to say if data dot message underscore code and we should always get a message code is equal equal equal to 10 so if it's equal to 10 we don't have enough patterns we need to enroll more patterns so we're going to have an alert and this alert will say we need to collect some typing data from you for twofactor authentication uh you may be asked to fill this out and then multiple times dot dot okay uh you can make this say whatever you want obviously i'm just gonna go with that so now we alert the user of what we're you know redirecting them to and then we're going to redirect them to the typing patterns page where they will be asked to type in more patterns so the way you do this in javascript you say window dot location is equal to and then i'm going to say slash typing hyphen patterns so this is pretty much the equivalent of a redirect we're just redirecting them to this page now if the message code is not 10 that means we had enough enrollments so what we need to check is if the pattern we just sent had high confidence so we're going to say else and then we're going to say if data dot and what is this called hi underscore confidence is equal to 1 that should be three equal signs then what we want to do it did i spell confidence correctly let me check i think i did we want to alert them that they had high confidence if it was not we want to alert them that it was low confidence so i'm just going to copy this in to avoid having to type all this out but alert typing dna indicated that there was high confidence in your login otherwise else we're going to say alert typing the dna indicated there was low confidence in your login and now i think that's pretty much all we need there's one or two more things i'm just referencing my notes because there's a lot i want to make sure i don't mess this up uh so after we do this so if the message code was not 10 right then what we want to do is we want to redirect the user back to the home page so i'm going to say window dot location equals slash so this is kind of the equivalent of like them signing in right if they signed in successfully then what we do is we say window.location equals the home page so it redirects them to the home page like as if they had signed it and then finally at the very bottom of this function we're going to say tdna.reset this is going to reset this singleton class so that if we send another request it's going to reset the typing pattern so after we send the typing pattern information and we do all of this stuff here we want to reset this and in fact now that i think about this we should reset this right after we get a response from this request or actually let's think yeah right after we get a response let's do that so inside of data here we'll actually say tdna.reset we could do it in here or up here it doesn't really matter but the reason we're resetting is so that if they send something again from the same page without refreshing the typing pattern gets clear okay so just quickly recap we check if the message code is 10 if the message code is 10 we need more typing information so we redirect them and alert them that we need to collect typing data and then from this page ideally the user will type in or sign in a few more times and rule more typing patterns and otherwise if it's not 10 that means we're all good hopefully at least and we're going to check if the high confidence flying is equal to 1. if it's equal to one that means we're good we validated if it's equal to zero uh we are not good or so if it's not equal to one we're not good and then we tell them low confidence either way after whatever happens here we redirect them to the home page now that i'm thinking about this though we should probably only redirect them if it's high confidence right because if it's low confidence we don't want them to be able to sign in now in theory they can just go to the home page this is not you know a fullfledged website but this is the idea so sorry everyone for the abrupt cut here but i realized while watching this video back when i was editing that i made a pretty big mistake that i definitely need to jump in here and fix so you can see that what i've been talking about is this data.high confidence flac and i've been saying if this high confidence flag gives us a one we're all good to go and it is validated now this is not true this high confidence flag what this actually tells us is how confident the api was in the result that it gave us so this does not actually tell us the result this tells us if it is confident that the result that it returned to us is correct so what we need to do is we need to change this to result because what we actually get back here in this api data which i will show you in a second is we get a result flag as well or a result key whatever you want to call it and if this result key is equal to 1 that means it actually was a match and if it was equal to 0 that means it's not a match so if high confidence is equal to 1 that means whatever result is the api is confident that is correct however if high confidence is equal to zero that means whatever the result is it's not quite confident that that is actually correct and that could be based on something like we didn't have enough text or the pattern it just wasn't quite sure if it was actually correct so it's giving you a result but it's saying i'm not very confident in that result or i am very confident in this result so hopefully that's clear throughout the rest of this video you're probably going to see me have high confidence here so just understand that actually what we want is result not high confidence so if you ever see me use high confidence here i just understand that is a mistake it's just because i'm not going to refilm the entire video because of this one thing right here so make sure you understand that we are using result not high confidence and that high confidence is telling us the level of confidence in the result that we're getting and a result as i said if it returned zero that means there was not a match we are not authenticated whereas if it does return one that means there was a match we are authenticated so let me just print out the data here and then i'm going to print out after the data the data.result just to show you so let's remove this copy that paste this down here and then we will show it data.result and then of course here we should probably change this to say rather than indicate there was a high confidence we should just say typing dna indicated there was a match or something like that right because this is not necessarily correct uh because we're not actually checking the high confidence flag so usually you would probably check the high confidence flag in combination with the result flag because if you had low confidence in the result and the result was one maybe you don't want to authenticate the user but that's kind of up to you okay so now i'm just going to load the website up here i've just created a new user account just so that i can go through this quickly and i'll show you now what data returns and what the result actually actually returns versus high confidence so the account i made was techwithtim27 gmail.com and then oops my cap box is on my password is the same thing techwithtim27 gmail.com let's submit this and let's see what we get okay so there we go typing dna indicated there was high confidence in your login and you can see uh well i closed out of it but it was showing me that the result which is the thing i was printing last was a one which meant we actually had a match now you may notice this website looks a little bit different than what it did before i took the cut in this video that's just because this is after i finished everything i'm now on the website again because this right now is after i've filmed the entire video but anyways hopefully that clears it up use result do not use high confidence although you can of course check high confidence but that is not telling you whether or not there was actually a match so let's refresh now and reset our javascript and let's see if this works so empty cache and hard reload let's go through the whole process so let's create an account i'm going to say tech with tim you know let's go 25 at gmail.com and let's go tim one two three four five and let's press submit okay we need to collect some typing data from you for two factor authentication you may be asked to fill this out multiple times all right so now we get redirected to this page right that's exactly what we wanted now we're gonna do this again check with tim25 at gmail.com and then tim12345 submit uh email is invalid is it did i what did i type for the other email check with tim 25 okay um okay i guess i typed in the email wrong uh i don't know if i mistyped it the first time or if that was actually incorrect or showing me let's try this again techwithtim25 at gmail.com and then tim one two three four five submit email is invalid okay so i think we're having a small mistake here uh i have a feeling that what's happening is that from the let's go here uh typing patterns button ah this is the issue sorry so from the typing patterns but we need to change this to true what was happening is that since we were passing false here from the typing patterns button it was trying to create a new account for us not sign us in so obviously the email is invalid because it was already used so that was the issue we were having so now they should fix it when you change it to true now the endpoint it's going to send to is login not sign up okay so let's reset here let's just go to log in and let's do this so tech with tim 25 at gmail.com and then tim12345 log in and we need to collect some typing data so notice it says we have one enrollment and we need more so let's go ahead and do this tech with tim25 at gmail.com and then tim12345 submit okay we need some more typing data let's go ahead and do that techwithtim25 at gmail.com and then tim12345 and this time there we go it says we had high confidence so now we have enough enrollment and now notice the action is verify enroll not just enroll so it did actually enroll this typing data it's keeping track of all of the typing data from now on but it's also verifying us this time and it told us we have high confidence so that is working that is good and then redirect us to the home page awesome so now let's just go to the login page and let's try this now so now we have enough enrollments so we shouldn't be asked to do this again it should just tell us if we have high or low confidence so let's do this and let's see and we have high confidence awesome and then redirect us to the home page so there we go that is functioning now what i'm going to show you how to do is add those little icons onto the fields here that kind of show that typing dna is keeping track of what you're typing in so this is called the autocomplete disabler as well as what is what is it called in here uh there's like a specific name for it uh typing visualizer sorry that's what it's called so what we want to do now is disable the autocomplete on our website because typing dna doesn't work if it just auto fills in the username and password right so it makes sense to disable autocomplete when you have this typing dna form of authentication so that like a password manager something can't fill in the password and then override the uh the twofactor authentication although it wouldn't override it it would just tell you it failed because you didn't actually type in the pattern and well there was no typing pattern so we're gonna use this autocomplete disabler from typing dna again link in the description and we're going to use the typing visualizer as well so what we want to do is get both the auto complete disabler and typing visualizer file so i'm going to go to raw for both of these i'm going to copy this this one is the autocomplete disabler i'm going to create a new file here inside of static called auto complete and then disabler like that dot js i'm going to paste this inside and go to the very top going to make one change we're going to export this function we'll say export like that that's all we need now we're going to close this i'm going to make a new file i'm going to call this typing visualizer uh i think i spelt that right and well we need the dot js so let's add js now we're gonna go to github i'm gonna go back to this page here we want to go to typing visualizer now and we want to copy this we'll say raw copy and we're going to make one change this file the same one we did before we're just going to export this function so we can access it so export function and now i will show you how we can add the typing visualizer as well as the autocomplete disabler all right so this part is actually super easy it's literally like five lines of code now that we have these uh files go to index.js and at the very top under when we define typing dna uh or sorry we're actually going to go above that we're going to import the auto complete disabler so we're going to say import and then auto what is this actually called auto complete disabler just want to make sure my capitalization is correct we're going to say from then dot slash autocomplete disabler dot js so now we have this class imported now we're going to use this so we're going to say const auto complete disabler is equal to auto complete disabler and then inside of here we're going to pass some options so this auto complete disabler actually also handles the typing visualizer so we need this typing visualizer file because this auto autocomplete disabler is dependent on this file and now that i'm thinking of it this file is probably going to be half it's probably going to have to be named the same thing typing visualizer let's see maybe not we'll see if it works if it doesn't work we're going to have to change this name to whatever it was on the github in fact let's just do it now to be safe say typing hyphen visualizer so the reason i made this change is because i'm pretty sure somewhere in this file it or not in this file in autocomplete disabler it imports the typing visualizer so i just want to make sure the name matches what it would have been on the github repository so that this file doesn't have any mistakes in it all right so now we want to pass two options inside of here we want to pass the following show typing visualizer this is going to be true and then we want to go show typing dna logo this is going to be equal to true as well so this is pretty straightforward this is going to do what it says we're going to show both the visualizer and the logo i'll show you what both of those are if you want to see exactly how this works just go to the github there's not really too much documentation because it's really straightforward and you can read through the usage but it's like really simple then what we're going to do after this is we're going to use the auto complete disabler so auto complete disabler dot disable and then we want to disable auto complete so it's going to be disable auto and then complete like that and then we're also going to disable copy and paste just to make sure that the user cannot copy and paste stuff in to their username and password field so we're going to say auto complete disabler dot disable and then this is going to be copy paste like that and that should be all we need so now after we've initialized this initializing just meaning you know creating it and sorry this should say new before this what will happen is we will say let's show the visualizer let's show the logo let's disable autocomplete let's disable copy and paste if you didn't want to disable either of these you just wouldn't have these two lines and then it would still show the different logos because of the way you've initialized it so that's literally all we need for the autocomplete disabler and the typing dna visualizer now if you go to the website and you reset the cache you should see the typing dna visualizer was not loaded okay so it looks like we got an error i'm going to look at why this isn't loading and i'll be right back all right so i've found the error and it's actually it's not really an error but it's just something that i forgot to tell you to do so the reason why and let me just show you what's happening if you look here we had the typing dna visualizer was not loaded so that meant pretty much that the autocomplete disabler could not find the visualizer so what we need to do is import it in this file now this is a small mistake that they do need to fix i actually talked to them about this hopefully they will fix this we just need to include a line here in this file in auto complete disabler which notice i've renamed it now to the same thing it was on the github we're going to say import and it's going to be typing visualizer and this is going to be from if i can type properly dot slash typing visualizer dot js so now what this will do is load the typing visualizer since we're importing from that file it will actually load the code that we need and then this shouldn't be a problem anymore so again just make sure you have the export in this file as well as in the typing dna visualizer file make sure you have the export then go to auto complete disabler import and again make sure you have the export okay so now let's run this we've got to reset our cache and we should see that we get the logo awesome so there we go some messages have been moved to the issue panel yeah there's no worries so this is the typing dna logo right and i don't think it doesn't do anything if you click on it but it's just showing you that hey if you start typing here we are going to start keeping track of what you're saying so you can disable either the logo or this right so you can pick if you want to have the logo or if you just want to have the visualizer so in fact if i go to index.js and i disable the logo let's see what we get now so let's reset now why the logo is still here eh okay show typing visualizer true but show logo false maybe i have to actually put false here let's try putting false show typing dna logo false let's reset the cache and okay so now it doesn't show the logo but it does show the typing pattern so sorry you do need to include the option you just need to explicitly set it to false anyways i want the logo and the visualizer so i'll leave them both true but of course you know feel free to disable or enable them as you please let's reset our cache and there we go now as i type it kind of shows that it's keeping track of what i am typing okay so that is pretty much all i had to show you for this tutorial now this is obviously not a fully complete website the idea was to give you something that actually works that you could you know test out yourself and to show you how you can use typing biometrics as a form of twofactor authentication now another massive thank you to typing dna they were the ones who sponsored this video as i said at the beginning i had the opportunity to work with some of the developers and some of the people at typing dna there are great people uh super interested in just making the developer community so much better with products like this and they were super open to all of my feedback i had for example you know fixing these files like adding the exports and you know adding the imports and making it work better and all of that but definitely show them some love check them out from the link in the description i assume if you guys fall to this point you have an account already but all the information you need about typing dna will be there again you can find all the information about your application from the typing dna dashboard so typingdna.com clients all of the api documentation and all of the resources i used will be linked in the description and just remember that typing dna does not only work for login and sign up you can use it for all kinds of other applications i would definitely recommend doing a quick read through their website because it's very interesting the kind of applications they've used it for so anyways that is going to conclude this video i hope you guys found this useful if you did make sure to leave a like subscribe to the channel and i will see you in another youtube video
