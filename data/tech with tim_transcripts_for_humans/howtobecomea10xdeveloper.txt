With timestamps:

00:03 - foreign
00:08 - so as you may know there's a big
00:10 - difference between being a good
00:11 - programmer and being a productive
00:13 - programmer a good programmer can meet
00:15 - requirements and write High good quality
00:17 - clean code and a productive programmer
00:19 - can just do that a lot faster now I
00:22 - experienced this when I worked at
00:23 - Microsoft as an intern as an intern I
00:25 - wasn't trusted to write a ton of code I
00:27 - wasn't given a ton of tasks to complete
00:29 - and I didn't end up being very
00:30 - productive meanwhile there was
00:32 - experienced members of my team who had
00:34 - worked there for 20 plus years who would
00:36 - pump out Mass amounts of code in a
00:37 - single afternoon I would go and look at
00:39 - their commits and look at how much code
00:41 - they were actually writing and it was
00:43 - easily 10 20 30X the amount of code I
00:45 - had written in like an entire month so I
00:48 - asked myself how do you become a
00:49 - productive developer and now about two
00:52 - years later the tables have kind of
00:54 - turned and I'm the lead engineer at a
00:55 - startup and I am pumping out Mass
00:57 - amounts of code and I want to share with
00:59 - you how I do that so first let me tell
01:01 - you what is meant by a 10x developer
01:03 - which is what I'm kind of talking about
01:05 - in this video now this is kind of a
01:07 - debated topic it's hard to argue someone
01:09 - actually writes 10 times the amount of
01:11 - code as someone else but the idea behind
01:14 - calling someone a 10x developer is that
01:16 - they write 10 times the amount of code
01:18 - as other members on their team now I'm
01:20 - sure you've all experienced this in any
01:22 - field that you work in there's just
01:23 - people that are way faster and way more
01:25 - productive than other people and they're
01:27 - not necessarily better they just do
01:29 - things a lot quicker so step one on my
01:31 - list here to becoming a 10x developer
01:34 - and writing code much faster and just
01:36 - being much more productive is to really
01:38 - prioritize what it is that you're doing
01:40 - now to give you a great example of that
01:41 - I've prioritized the sponsor of this
01:44 - video this video is sponsored by Intel
01:46 - they've made it a big Focus to save
01:48 - developers time particularly when it
01:50 - comes to cross architecture workloads
01:52 - culminating in their one API tools and
01:55 - libraries for artificial intelligence
01:57 - internet of things and Cloud projects
01:59 - you can transfer code from one platform
02:01 - to the next making for an incredibly
02:03 - efficient development experience click
02:06 - the link in the description to learn
02:07 - more and download it today a for free so
02:09 - hopefully you enjoyed that segue But
02:11 - continuing here with the section on
02:12 - prioritization now this is pretty
02:14 - obvious but really what I mean is to
02:16 - pick tasks that are going to have the
02:17 - highest impact on whatever you're doing
02:19 - now to give you an example right now I'm
02:21 - working for a startup and we're building
02:23 - a mobile app in react native now I've
02:25 - talked about this a few times on the
02:26 - channel but right now we are trying to
02:29 - get this in front of investors we're
02:30 - trying to get this in front of a lot of
02:32 - people so we can get feedback and we
02:33 - just need to have kind of a bare bones
02:35 - version of the app that's functioning so
02:37 - we can start showing it to people and
02:38 - getting feedback and then revising based
02:40 - on that so the last thing I want to be
02:42 - doing right now is working on small
02:44 - polishes or doing a ton of unnecessary
02:46 - tests or working on you know really
02:49 - optimizing all of my CSS or all of this
02:51 - stuff that does eventually need to get
02:53 - done but that right now is not important
02:55 - and that's going to cost me a lot of
02:57 - valuable time because we're trying to do
02:58 - this as fast as possible right so
03:00 - instead what I'm working on is Big
03:02 - features app infrastructure stuff that's
03:04 - going to be here forever and that needs
03:06 - to 100 be correct and done properly and
03:09 - that yeah kind of sucks to work on and
03:11 - is annoying and hard but that needs to
03:13 - get done and all of these features
03:14 - require a large amount of code and just
03:17 - a large amount of work now I'm doing
03:18 - this instead of doing stuff like
03:20 - animating Pages or worrying about a ton
03:22 - of telemetry and analytics or going and
03:25 - refactoring the code a million times to
03:27 - make it look perfect I'm just trying to
03:29 - get as much code out as I possibly can
03:31 - that's correct and that's tested and
03:33 - done properly but I don't want to go
03:34 - overboard and start going into a ton of
03:37 - polishes and kind of nitpicky finishing
03:39 - stuff because it's just going to cost me
03:40 - a lot of time and really kind of delay
03:43 - our development let's say cycle or
03:45 - timeline right so that's what I mean by
03:47 - prioritization now to be able to
03:49 - prioritize you need to have some sort of
03:51 - a plan or at least a minimal idea of the
03:54 - things that you need to get done so what
03:55 - I like to do here is to kind of start
03:57 - each day or maybe each week whatever
03:59 - time increment you want to pick by just
04:02 - writing down a list of things that I
04:03 - need to do and then very quickly
04:05 - deciding on which ones actually need to
04:07 - get done right now and which ones can
04:09 - wait till later on whether they're
04:10 - tedious or time consuming or they're
04:12 - just not important to the app so have a
04:14 - plan you don't need to over plan you
04:16 - don't need to do anything crazy but list
04:18 - out all the tasks prioritize them put
04:20 - them in an order and then start doing
04:21 - those tasks so moving on to the next
04:23 - thing that will help you become a 10x
04:25 - developer and this is to learn multiple
04:27 - programming languages Frameworks and
04:29 - tools and have a diverse knowledge of
04:31 - many different programming Concepts and
04:33 - Technologies now this is very important
04:35 - because as a 10x developer you can't be
04:38 - someone that needs to rely on a bunch of
04:40 - other developers to do something for you
04:42 - because you don't know a language or you
04:43 - don't know a framework or you don't know
04:45 - this specific tool you need to be
04:46 - someone who's confident enough to know
04:48 - that you can figure that out and that
04:49 - you can look at something for a few
04:51 - minutes or do a bit of research and just
04:53 - start working in that technology or
04:54 - start working in that language for
04:56 - example you guys can look at my YouTube
04:58 - channel you'll see that I work in all
04:59 - kinds of different programming languages
05:01 - all kinds of different Frameworks now I
05:03 - don't claim to be an expert in many of
05:05 - the things that I teach there that I
05:07 - show you on the channel but but I know
05:08 - that I'm good enough to figure it out
05:10 - and to teach you guys the basic concepts
05:12 - I know that if there's a Code base
05:14 - that's in say flutter for example I can
05:16 - get in there and very shortly I can get
05:18 - used to it and start writing some good
05:19 - quality code now am I gonna be as good
05:21 - as the flutter Master who's been doing
05:23 - this for 10 years probably not but I'll
05:25 - be good enough to write code that's up
05:27 - to standard and that we could push into
05:29 - production right and that's the idea
05:31 - here yes obviously it is good to be an
05:32 - expert in specific areas and some
05:34 - companies do need that but in a lot of
05:37 - scenarios if you want to get a lot of
05:38 - stuff done you need to be able to work
05:40 - in many different areas of the code base
05:42 - without relying on someone else or
05:43 - without having to ask someone to kind of
05:45 - assist you or help you now of course
05:47 - asking for assistance can be good if
05:49 - it's something or it's going to take you
05:50 - a really long time to figure it out but
05:52 - hopefully you understand what I'm saying
05:53 - here by having a diverse perspective of
05:55 - many different languages many different
05:57 - Technologies and Frameworks you have the
05:59 - confidence to know that you can solve
06:01 - pretty much any problem and even if it's
06:03 - something you're not familiar with
06:04 - you'll go and you'll figure it out
06:05 - because that's what you do as a 10x
06:07 - developer so moving on to the next thing
06:09 - that will help you become a 10x
06:11 - developer and this is to take advantage
06:13 - of Automation and to use your Dev tools
06:15 - now this is a bit boring no one likes to
06:18 - do this but it's something that saves an
06:20 - extreme amount of time in the long run
06:21 - especially if other people are coming
06:23 - into the code base so I'll just go
06:25 - through a few quick examples of what I
06:26 - mean here first obviously it could be
06:28 - writing automated tests now you don't
06:30 - want to get carried away with this
06:31 - because you can over test that's
06:33 - definitely a thing but having solid
06:35 - automated tests that you can rely on
06:36 - gives you confidence you don't need to
06:38 - constantly be manually testing all of
06:40 - these features and saves you a
06:42 - significant amount of time especially if
06:43 - you're working in a code base for a long
06:45 - period of time next adding correct type
06:48 - hints or type annotations now if you're
06:50 - in a language like typescript it's
06:52 - really easy to just add in any right oh
06:54 - you have a complex type you have to
06:55 - write I'm not going to bother with that
06:57 - I'll just put any I'll remember what the
06:58 - type is going to be trust me don't do
07:00 - that in the long run this saves you an
07:02 - extreme amount of time I cannot tell you
07:04 - how many times I've gone and reference
07:05 - my types files or gone and looked at
07:07 - specific types because I couldn't
07:09 - remember what was being accepted by this
07:11 - parameter or variable or whatever it may
07:14 - be continuing setting up continuous
07:16 - integration and deployment very very
07:18 - important you want something that's
07:19 - going to be automatically checking for
07:21 - example all of your commits maybe
07:22 - automatically deploying something to a
07:24 - website or moving it to another code
07:26 - base whatever it is that you're going to
07:27 - need you want to spend the time to set
07:29 - up these things yes they're annoying yes
07:31 - they take you a fair amount of time but
07:33 - again in the long run it saves you a
07:35 - ridiculous amount of time continuing you
07:37 - want to set up stuff like linters that's
07:38 - automatically checking for say unused
07:40 - variables or spelling mistakes or all
07:43 - the other things that linters do that I
07:45 - won't talk about in this video next you
07:47 - want to set up your extensions maybe you
07:48 - want to set up some keyboard shortcuts
07:50 - and you want to learn how to use your
07:52 - IDE and all of the dev tools that you
07:54 - have properly so that you can really
07:56 - spend the most amount of time coding and
07:58 - avoid having to do all these tedious
08:00 - things that can be automated for you
08:01 - lastly I'll say that spending some time
08:03 - writing automation scripts is very
08:06 - useful for example in this app that I'm
08:08 - working on we have a bunch of small
08:10 - games as some of you may know from one
08:11 - of the previous videos that I posted and
08:14 - rather than kind of writing this
08:15 - Advanced documentation that explains how
08:17 - to add a game into the main app I just
08:20 - wrote an automation script that
08:21 - essentially runs you through the steps
08:23 - so it says okay what's the name of the
08:24 - game what's the description what's the
08:26 - uid of the game blah blah goes through
08:28 - all the stuff that's required and you
08:30 - just type it into this kind of command
08:31 - line tool and it generates everything
08:33 - for you now that took me two three hours
08:35 - to write but now that's gonna save
08:37 - myself and everyone else that's working
08:40 - in the code base an extreme amount of
08:41 - time and even better now I don't have to
08:44 - explain to someone how to do something I
08:46 - can just say hey just go use the script
08:47 - it's already been done if if the script
08:49 - works then it's done properly right so
08:51 - spending some time to automate those
08:52 - type of tasks very important and setting
08:55 - up some commands that maybe
08:56 - automatically run every time you do a
08:58 - deployment where every time you push
08:59 - something to GitHub again definitely
09:01 - worth the time and something I would
09:03 - recommend you do alright so moving on to
09:05 - step number four and this is to manage
09:07 - your energy levels or what type of tasks
09:10 - you're doing at certain parts of the day
09:12 - so this is going to be different for
09:13 - everyone but I know for me that I
09:15 - usually have a solid four or five hours
09:17 - of coding until I get fatigued and until
09:20 - I kind of don't want to do complex tasks
09:23 - anymore or at least they take me a lot
09:25 - longer for me right in the morning
09:27 - probably around 9 to 10 a.m after I kind
09:29 - of finish a workout or after I eat
09:30 - breakfast and wake up that's when I'm
09:32 - most productive from the morning up
09:34 - until probably 1 or 2 p.m I write a lot
09:37 - of code I get a lot of stuff done and
09:39 - any complex task doesn't really bother
09:41 - me that much because I'm kind of in my
09:42 - Peak energy Zone however after that as
09:45 - we drift kind of into the afternoon and
09:47 - the evening I'm a more I'm more fatigued
09:49 - I've done a lot of stuff already and I
09:51 - don't want to try to take on anything
09:52 - that's too big or too complex and I know
09:55 - I'm going to kind of lose focus more
09:57 - easily so what I do is I make sure that
09:59 - I handle or I take care of my really
10:01 - complex tasks in the morning and I save
10:03 - all the easy stuff for the end of the
10:04 - day so something like styling for
10:06 - example that can be tedious and annoying
10:08 - Wing but it's pretty easy for me to do
10:09 - so I would do that at the end of the day
10:11 - something like reviewing pull requests
10:13 - again that's something that's pretty
10:15 - easy to do I would save that task for
10:17 - the end of the day anything
10:18 - communication related that's not urgent
10:20 - again I would do that at the end of the
10:22 - day answering emails reading over stuff
10:24 - like that do that at the end of the day
10:26 - anything that's going to be pretty easy
10:28 - that's kind of smaller shorter tasks
10:29 - that are easy to knock off I don't want
10:31 - to do those in the morning I want to
10:33 - save those for a time when I don't have
10:35 - the energy to do something more complex
10:36 - so I can always be working on something
10:39 - the last thing I want is to only have
10:41 - complex tasks left and then just to be
10:43 - too tired or too exhausted to really
10:45 - make any significant progress on them
10:47 - and then to get halfway through it and
10:49 - have to start that in the morning I'd
10:50 - rather finish something to completion
10:52 - and then kind of knock off some smaller
10:54 - tasks in the evening right so that's
10:56 - kind of what I'm talking about here so
10:57 - think about that this is something I
10:59 - always try to do and have done for a
11:00 - very long time I save all my easy stuff
11:02 - for a time when I'm tired and don't want
11:04 - to work I put all my hard stuff at the
11:06 - beginning of the day when I know I have
11:08 - have the energy and I still have the
11:09 - motivation to get it done so moving on
11:11 - to the last tip here and this is
11:13 - probably one of the most important and
11:15 - this is to enter the Flow State now the
11:17 - flow state is really the state in your
11:19 - brain where you are completely focused
11:21 - and completely immersed into what you're
11:22 - doing all of your energy all of your
11:25 - thoughts are revolving around what it is
11:27 - that you're working on and it makes it
11:29 - very easy to kind of have a map at least
11:31 - for me of code in my mind and able be
11:34 - able to write just a lot of code at once
11:36 - really like when I'm in my flow state
11:37 - for maybe two hours per day three hours
11:39 - per day depending on kind of how I'm
11:41 - working and how long I write an extreme
11:44 - amount of code that just completely
11:45 - outpaces anything else I would do when
11:47 - I'm not in the Flow State now for me to
11:49 - enter the Flow State usually takes about
11:51 - an hour in the morning I have a coffee I
11:53 - kind of relax a bit I start working I
11:55 - start reading a few code files and then
11:57 - all of a sudden I start kind of really
11:58 - diving into a feature we're diving into
12:00 - a bug or diving into whatever it may be
12:02 - and as soon as I've been in that for a
12:04 - few minutes now my entire focus is on
12:06 - that I start building kind of a map of
12:08 - the code in my brain and it's very easy
12:10 - for me to switch between different files
12:12 - or switch between different areas
12:13 - without losing focus it's just it's all
12:15 - up here right I'm in the Flow State I'm
12:17 - I'm flowing I don't know how better to
12:18 - describe it and during that time I write
12:21 - a massive amount of code and usually
12:23 - it's even higher quality code than I
12:25 - write when I'm kind of you know in and
12:26 - out I'm checking my phone I'm texting
12:28 - you know I'm doing something else I'm
12:30 - going downstairs and spending you know
12:32 - 10 minutes whatever taking a break
12:34 - during the flow state is really when I'm
12:36 - the most productive and when I get a lot
12:38 - of stuff done especially the difficult
12:40 - stuff
12:41 - so that is what I have for you here now
12:44 - I would love to hear what your tips are
12:45 - for productivity and just getting more
12:47 - code out in the comments down below so
12:49 - please let me know I also want to make
12:51 - it clear here that I'm not at all trying
12:53 - to kind of boast and say that I'm just
12:54 - the best programmer in the world and I'm
12:56 - the most productive but I do notice that
12:58 - over the past few months and years I've
13:00 - really drastically increased my
13:01 - productivity and these are the kind of
13:03 - the ways that I've done that so I wanted
13:05 - to share those with you so if you guys
13:07 - enjoyed make sure to leave a like
13:08 - subscribe the channel and I will see you
13:10 - in the next one
13:13 - foreign
13:18 - [Music]

Cleaned transcript:

foreign so as you may know there's a big difference between being a good programmer and being a productive programmer a good programmer can meet requirements and write High good quality clean code and a productive programmer can just do that a lot faster now I experienced this when I worked at Microsoft as an intern as an intern I wasn't trusted to write a ton of code I wasn't given a ton of tasks to complete and I didn't end up being very productive meanwhile there was experienced members of my team who had worked there for 20 plus years who would pump out Mass amounts of code in a single afternoon I would go and look at their commits and look at how much code they were actually writing and it was easily 10 20 30X the amount of code I had written in like an entire month so I asked myself how do you become a productive developer and now about two years later the tables have kind of turned and I'm the lead engineer at a startup and I am pumping out Mass amounts of code and I want to share with you how I do that so first let me tell you what is meant by a 10x developer which is what I'm kind of talking about in this video now this is kind of a debated topic it's hard to argue someone actually writes 10 times the amount of code as someone else but the idea behind calling someone a 10x developer is that they write 10 times the amount of code as other members on their team now I'm sure you've all experienced this in any field that you work in there's just people that are way faster and way more productive than other people and they're not necessarily better they just do things a lot quicker so step one on my list here to becoming a 10x developer and writing code much faster and just being much more productive is to really prioritize what it is that you're doing now to give you a great example of that I've prioritized the sponsor of this video this video is sponsored by Intel they've made it a big Focus to save developers time particularly when it comes to cross architecture workloads culminating in their one API tools and libraries for artificial intelligence internet of things and Cloud projects you can transfer code from one platform to the next making for an incredibly efficient development experience click the link in the description to learn more and download it today a for free so hopefully you enjoyed that segue But continuing here with the section on prioritization now this is pretty obvious but really what I mean is to pick tasks that are going to have the highest impact on whatever you're doing now to give you an example right now I'm working for a startup and we're building a mobile app in react native now I've talked about this a few times on the channel but right now we are trying to get this in front of investors we're trying to get this in front of a lot of people so we can get feedback and we just need to have kind of a bare bones version of the app that's functioning so we can start showing it to people and getting feedback and then revising based on that so the last thing I want to be doing right now is working on small polishes or doing a ton of unnecessary tests or working on you know really optimizing all of my CSS or all of this stuff that does eventually need to get done but that right now is not important and that's going to cost me a lot of valuable time because we're trying to do this as fast as possible right so instead what I'm working on is Big features app infrastructure stuff that's going to be here forever and that needs to 100 be correct and done properly and that yeah kind of sucks to work on and is annoying and hard but that needs to get done and all of these features require a large amount of code and just a large amount of work now I'm doing this instead of doing stuff like animating Pages or worrying about a ton of telemetry and analytics or going and refactoring the code a million times to make it look perfect I'm just trying to get as much code out as I possibly can that's correct and that's tested and done properly but I don't want to go overboard and start going into a ton of polishes and kind of nitpicky finishing stuff because it's just going to cost me a lot of time and really kind of delay our development let's say cycle or timeline right so that's what I mean by prioritization now to be able to prioritize you need to have some sort of a plan or at least a minimal idea of the things that you need to get done so what I like to do here is to kind of start each day or maybe each week whatever time increment you want to pick by just writing down a list of things that I need to do and then very quickly deciding on which ones actually need to get done right now and which ones can wait till later on whether they're tedious or time consuming or they're just not important to the app so have a plan you don't need to over plan you don't need to do anything crazy but list out all the tasks prioritize them put them in an order and then start doing those tasks so moving on to the next thing that will help you become a 10x developer and this is to learn multiple programming languages Frameworks and tools and have a diverse knowledge of many different programming Concepts and Technologies now this is very important because as a 10x developer you can't be someone that needs to rely on a bunch of other developers to do something for you because you don't know a language or you don't know a framework or you don't know this specific tool you need to be someone who's confident enough to know that you can figure that out and that you can look at something for a few minutes or do a bit of research and just start working in that technology or start working in that language for example you guys can look at my YouTube channel you'll see that I work in all kinds of different programming languages all kinds of different Frameworks now I don't claim to be an expert in many of the things that I teach there that I show you on the channel but but I know that I'm good enough to figure it out and to teach you guys the basic concepts I know that if there's a Code base that's in say flutter for example I can get in there and very shortly I can get used to it and start writing some good quality code now am I gonna be as good as the flutter Master who's been doing this for 10 years probably not but I'll be good enough to write code that's up to standard and that we could push into production right and that's the idea here yes obviously it is good to be an expert in specific areas and some companies do need that but in a lot of scenarios if you want to get a lot of stuff done you need to be able to work in many different areas of the code base without relying on someone else or without having to ask someone to kind of assist you or help you now of course asking for assistance can be good if it's something or it's going to take you a really long time to figure it out but hopefully you understand what I'm saying here by having a diverse perspective of many different languages many different Technologies and Frameworks you have the confidence to know that you can solve pretty much any problem and even if it's something you're not familiar with you'll go and you'll figure it out because that's what you do as a 10x developer so moving on to the next thing that will help you become a 10x developer and this is to take advantage of Automation and to use your Dev tools now this is a bit boring no one likes to do this but it's something that saves an extreme amount of time in the long run especially if other people are coming into the code base so I'll just go through a few quick examples of what I mean here first obviously it could be writing automated tests now you don't want to get carried away with this because you can over test that's definitely a thing but having solid automated tests that you can rely on gives you confidence you don't need to constantly be manually testing all of these features and saves you a significant amount of time especially if you're working in a code base for a long period of time next adding correct type hints or type annotations now if you're in a language like typescript it's really easy to just add in any right oh you have a complex type you have to write I'm not going to bother with that I'll just put any I'll remember what the type is going to be trust me don't do that in the long run this saves you an extreme amount of time I cannot tell you how many times I've gone and reference my types files or gone and looked at specific types because I couldn't remember what was being accepted by this parameter or variable or whatever it may be continuing setting up continuous integration and deployment very very important you want something that's going to be automatically checking for example all of your commits maybe automatically deploying something to a website or moving it to another code base whatever it is that you're going to need you want to spend the time to set up these things yes they're annoying yes they take you a fair amount of time but again in the long run it saves you a ridiculous amount of time continuing you want to set up stuff like linters that's automatically checking for say unused variables or spelling mistakes or all the other things that linters do that I won't talk about in this video next you want to set up your extensions maybe you want to set up some keyboard shortcuts and you want to learn how to use your IDE and all of the dev tools that you have properly so that you can really spend the most amount of time coding and avoid having to do all these tedious things that can be automated for you lastly I'll say that spending some time writing automation scripts is very useful for example in this app that I'm working on we have a bunch of small games as some of you may know from one of the previous videos that I posted and rather than kind of writing this Advanced documentation that explains how to add a game into the main app I just wrote an automation script that essentially runs you through the steps so it says okay what's the name of the game what's the description what's the uid of the game blah blah goes through all the stuff that's required and you just type it into this kind of command line tool and it generates everything for you now that took me two three hours to write but now that's gonna save myself and everyone else that's working in the code base an extreme amount of time and even better now I don't have to explain to someone how to do something I can just say hey just go use the script it's already been done if if the script works then it's done properly right so spending some time to automate those type of tasks very important and setting up some commands that maybe automatically run every time you do a deployment where every time you push something to GitHub again definitely worth the time and something I would recommend you do alright so moving on to step number four and this is to manage your energy levels or what type of tasks you're doing at certain parts of the day so this is going to be different for everyone but I know for me that I usually have a solid four or five hours of coding until I get fatigued and until I kind of don't want to do complex tasks anymore or at least they take me a lot longer for me right in the morning probably around 9 to 10 a.m after I kind of finish a workout or after I eat breakfast and wake up that's when I'm most productive from the morning up until probably 1 or 2 p.m I write a lot of code I get a lot of stuff done and any complex task doesn't really bother me that much because I'm kind of in my Peak energy Zone however after that as we drift kind of into the afternoon and the evening I'm a more I'm more fatigued I've done a lot of stuff already and I don't want to try to take on anything that's too big or too complex and I know I'm going to kind of lose focus more easily so what I do is I make sure that I handle or I take care of my really complex tasks in the morning and I save all the easy stuff for the end of the day so something like styling for example that can be tedious and annoying Wing but it's pretty easy for me to do so I would do that at the end of the day something like reviewing pull requests again that's something that's pretty easy to do I would save that task for the end of the day anything communication related that's not urgent again I would do that at the end of the day answering emails reading over stuff like that do that at the end of the day anything that's going to be pretty easy that's kind of smaller shorter tasks that are easy to knock off I don't want to do those in the morning I want to save those for a time when I don't have the energy to do something more complex so I can always be working on something the last thing I want is to only have complex tasks left and then just to be too tired or too exhausted to really make any significant progress on them and then to get halfway through it and have to start that in the morning I'd rather finish something to completion and then kind of knock off some smaller tasks in the evening right so that's kind of what I'm talking about here so think about that this is something I always try to do and have done for a very long time I save all my easy stuff for a time when I'm tired and don't want to work I put all my hard stuff at the beginning of the day when I know I have have the energy and I still have the motivation to get it done so moving on to the last tip here and this is probably one of the most important and this is to enter the Flow State now the flow state is really the state in your brain where you are completely focused and completely immersed into what you're doing all of your energy all of your thoughts are revolving around what it is that you're working on and it makes it very easy to kind of have a map at least for me of code in my mind and able be able to write just a lot of code at once really like when I'm in my flow state for maybe two hours per day three hours per day depending on kind of how I'm working and how long I write an extreme amount of code that just completely outpaces anything else I would do when I'm not in the Flow State now for me to enter the Flow State usually takes about an hour in the morning I have a coffee I kind of relax a bit I start working I start reading a few code files and then all of a sudden I start kind of really diving into a feature we're diving into a bug or diving into whatever it may be and as soon as I've been in that for a few minutes now my entire focus is on that I start building kind of a map of the code in my brain and it's very easy for me to switch between different files or switch between different areas without losing focus it's just it's all up here right I'm in the Flow State I'm I'm flowing I don't know how better to describe it and during that time I write a massive amount of code and usually it's even higher quality code than I write when I'm kind of you know in and out I'm checking my phone I'm texting you know I'm doing something else I'm going downstairs and spending you know 10 minutes whatever taking a break during the flow state is really when I'm the most productive and when I get a lot of stuff done especially the difficult stuff so that is what I have for you here now I would love to hear what your tips are for productivity and just getting more code out in the comments down below so please let me know I also want to make it clear here that I'm not at all trying to kind of boast and say that I'm just the best programmer in the world and I'm the most productive but I do notice that over the past few months and years I've really drastically increased my productivity and these are the kind of the ways that I've done that so I wanted to share those with you so if you guys enjoyed make sure to leave a like subscribe the channel and I will see you in the next one foreign
