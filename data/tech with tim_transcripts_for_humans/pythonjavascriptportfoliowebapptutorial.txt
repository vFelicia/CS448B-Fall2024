With timestamps:

00:00 - in this video you'll learn how to build
00:01 - an entire portfolio website using D
00:04 - Jango and python I'll walk you through
00:06 - everything step by step and by the end
00:08 - of the video you'll have a great project
00:10 - that you can extend and build into
00:12 - something really unique now we'll
00:13 - combine this project with a little bit
00:15 - of JavaScript and CSS and we'll use some
00:17 - more advanced Jango features to show you
00:20 - how to connect to a database and how you
00:21 - can programmatically add different
00:24 - projects this is a great starting
00:26 - project if you need a portfolio website
00:28 - and something you can definitely
00:29 - consider adding on your resume if you
00:31 - extend it and make it that much better
00:33 - with that said let me give you a quick
00:34 - overview of the project and you can see
00:36 - what it actually looks like and what
00:38 - you'll be building so I have the project
00:40 - in front of me and I'll quickly walk you
00:41 - through it this is a portfolio website
00:43 - that demonstrates a few different
00:45 - projects that you built obviously you
00:47 - can make it look better but the idea is
00:48 - to give you the base and do all of the
00:50 - heavy lifting and then allow you to
00:52 - style it and make it unique so you can
00:54 - see that we have some different projects
00:55 - I can click into AI Place Flappy Bird
00:57 - for example I can see a description a
01:00 - link to the GitHub and then some
01:01 - different images for the project maybe I
01:03 - want to go and view my multiplayer
01:05 - Pictionary same thing I can view some
01:06 - different images of what it looks like
01:08 - and then go back home now another thing
01:10 - that we've added is some filtering so if
01:12 - I click on JavaScript for example it
01:13 - will filter all of the projects that
01:15 - have a JavaScript tag we can go back to
01:17 - Python and you get the idea we can view
01:20 - these filtered projects we can also
01:21 - search for a project so something like
01:23 - Ai and then we see that AI plays Flappy
01:25 - Bird pops up so I know this looks pretty
01:27 - simple but I promise you this is a great
01:29 - project and it's going to teach you a
01:30 - ton about D Jango and python now
01:33 - building a portfolio website is great
01:35 - and all but it only means something if
01:36 - people can actually see it that means
01:38 - that you need to deploy the site and
01:40 - that's actually a great skill that you
01:42 - can demonstrate on your resume and in an
01:44 - interview now one of the best ways to
01:46 - deploy this site is actually by using
01:47 - the sponsor of this video hostinger now
01:50 - hostinger is a super easy to use web
01:52 - hosting platform that offers a ton of
01:54 - different options for any use case now
01:56 - for this type of website we're going to
01:57 - be looking at their virtual private
01:59 - server plans which give you complete
02:01 - control over the server they let you log
02:02 - in with root access and you can do all
02:05 - of the advanced configurations you need
02:06 - for deploying a site like this so if we
02:09 - scroll down you can see that they have
02:10 - really affordable options here and what
02:12 - I'd recommend is checking out their KVM
02:14 - 2 so what I'll do now is Select this
02:16 - plan and just walk you through quickly
02:17 - how you could actually go about hosting
02:19 - this site using hostinger so our first
02:21 - step here is to select our period create
02:23 - or sign into an account and then choose
02:25 - one of the various payment methods and
02:27 - make sure we click on have a coupon code
02:29 - and enter my exclusive code Tech with
02:32 - Tim now once we've done that we'll be
02:33 - brought to a page where we can set up
02:35 - our virtual private server so the first
02:37 - step is to select our location and you
02:39 - can just pick whatever is closest to you
02:40 - for the lowest latency so now we can
02:42 - choose our operating system where we
02:43 - have a lot of different options but what
02:45 - we can actually do is use a template
02:47 - here from hostinger if we go to
02:49 - Applications and we simply search for D
02:50 - Jango you can see that they have a
02:52 - template that will already set
02:53 - everything up for us and now we need to
02:55 - set a strong root password so that we're
02:57 - able to actually sign into our VPS and
02:59 - do the configuration later on so now
03:01 - that our VPS has been set up we can view
03:03 - all of the different details and
03:05 - configuration options from this
03:06 - dashboard right here but the next step
03:09 - is to actually SSH into the VPS and
03:11 - start configuring it for deploying our D
03:13 - Jango site now there's quite a few steps
03:15 - here and I can't show you in just a few
03:17 - minutes so what I'll do is I'll leave a
03:19 - link to a video in the description that
03:20 - will walk you through continuing this
03:22 - deployment regardless you'll need a VPS
03:24 - to do this so first check out hostinger
03:27 - from the link in the description make
03:28 - sure you use my special discount code
03:30 - and once you have the VPS then you're
03:32 - ready to deploy this so people can
03:34 - actually see your portfolio website so
03:37 - let's go ahead and get started here now
03:39 - as a reminder we're going to be using D
03:40 - Jango for this project so the first
03:43 - thing we need to do is install D Jango
03:44 - we also need to install another package
03:46 - that we need then we'll create the D
03:48 - Jango project set up our D Jango
03:50 - application I'll walk you through it
03:52 - step by step so what I've done here is
03:54 - open up visual studio code and I've just
03:56 - opened up a new folder you can do this
03:58 - in any editor that you want but if you
03:59 - want follow along exactly with this
04:01 - video just open up vs code and open some
04:03 - folder in this case I have my Jango
04:06 - portfolio spelled incorrectly opened
04:08 - anyways that's fine so what I'm going to
04:10 - do here is I'm going to start by
04:11 - installing D Jango now to do that I'm
04:13 - going to type pip 3 install and then D
04:16 - Jango now if you're on Windows you can
04:18 - change this to be pip and this should
04:20 - install the D Jango framework for you
04:23 - now if you want you can create a virtual
04:24 - environment to install this inside of
04:26 - but it's not necessary for this video
04:28 - now after we install Jango we need to
04:31 - install pillow so this is with a capital
04:33 - P and this is because we'll be
04:35 - displaying some images for our projects
04:37 - and D Jango needs pillow in order to
04:39 - display those images so pip 3 install
04:41 - pillow you can see I already have this
04:43 - installed in my python installation now
04:46 - for some reason these commands didn't
04:47 - work for you I'll leave two videos on
04:49 - screen that show you how to fix them
04:51 - okay so now that we have pillow and
04:53 - Jango installed it's time to create a
04:55 - new D Jango project now to do that we
04:57 - can type D Jango admin and then we're
04:59 - going to type start project and then
05:02 - we're going to give this a name now I'm
05:03 - just going to call this portfolio and
05:05 - I'm going to spell it correctly this
05:07 - time and when I do that you should see
05:09 - that we get a portfolio directory
05:11 - created inside of the folder that we're
05:13 - in now for some reason that didn't work
05:15 - for you what you can do is type Python
05:19 - 3-m and then Django admin start project
05:22 - portfolio if that doesn't work you can
05:24 - try python hyphen M Django admin start
05:26 - project portfolio and one of those
05:28 - commands should work otherwise leave a
05:30 - comment and I'll try my best to help you
05:32 - out okay so now we have a Jango project
05:35 - and if we look here we'll see that we
05:37 - have a bunch of files already created so
05:39 - we have manage.py we have a portfolio
05:41 - directory we have an init URLs Etc now
05:45 - what we need to do is CD into this
05:47 - directory so we're going to say CD and
05:49 - then we call this portfolio so we're
05:51 - going to do portfolio here and now we're
05:53 - inside of this folder that we just
05:55 - created so now what we need to do is
05:57 - make a new app inside of our D Jango
05:59 - project now the way this works is that
06:00 - we have this kind of starter project
06:02 - right here and this contains the global
06:04 - settings the global files and then we
06:07 - create individual applications where we
06:09 - can separate out different pieces of
06:11 - logic now in our case we only need one
06:13 - application because this is a pretty
06:14 - small project but in larger Django
06:16 - projects you might have an app for
06:18 - authentication an app for projects an
06:21 - app for your career whatever like you
06:23 - can separate the logic out into
06:25 - different applications and those
06:26 - applications are kind of self-maintained
06:28 - and you can typically bring them into
06:30 - other D Jango projects anyways what
06:32 - we're going to do here is type D Jango
06:34 - or actually sorry we're going to type
06:35 - Python 3 manage.py and then start app
06:39 - and then we're going to give this app a
06:40 - name now in my case I'm just going to
06:42 - call this main because it will be the
06:44 - main application now if you're on
06:46 - windows again you can just change this
06:47 - to python you'll notice the main
06:49 - difference here is from Mac to Windows
06:51 - or Linux to Windows you have Python 3 in
06:53 - mac and Linux and you have python on
06:55 - windows so when I do this we'll see that
06:57 - a new folder gets created called Main
06:59 - and it has some files in here for us so
07:01 - you can see it's just kind of templating
07:03 - it out and building out all the
07:04 - different things that we need from here
07:06 - I can clear this and I can close the
07:08 - terminal and now we can actually start
07:09 - writing some code and setting up our D
07:11 - Jango project so now that we've created
07:13 - this main application the next thing we
07:15 - need to do is go and Link it to our
07:17 - Jango project so we're going to go into
07:19 - the portfolio directory we're going to
07:21 - go into our
07:23 - settings.py and we're going to make our
07:25 - write a few settings here uh that we
07:27 - need for our project so the first thing
07:29 - I'm going to do is is I'm going to
07:29 - import OS which stands for operating
07:32 - system we're going to use this in 1
07:33 - second and let's just close this
07:35 - terminal and we're going to scroll down
07:37 - to where it says installed apps now
07:39 - notice we just created an App so what we
07:41 - need to do is actually add the name of
07:43 - this application into installed apps so
07:45 - that we link it to the Jango project so
07:48 - to do that we simply create a new entry
07:50 - here in this list called main because
07:53 - that's the name of the app that we
07:54 - created if you named the app something
07:56 - else then you would change this name
07:58 - okay now we're going to scroll all all
07:59 - the way down to the bottom of settings
08:02 - and just because we're here we're going
08:03 - to write some settings that we'll need
08:05 - uh later in this video now what we're
08:07 - going to be doing is uploading some
08:08 - images and these images will be for our
08:11 - projects now we need a place to store
08:13 - those images on the kind of Jango server
08:16 - so to do that we're going to define the
08:17 - following in all capitals we're going to
08:20 - say
08:20 - mediacore URL and notice I'm doing this
08:23 - at the very end of the file is equal to
08:26 - and then this is going to be slash media
08:28 - this time lower case and then slash now
08:31 - this is a directory where we're going to
08:32 - store all of the different media files
08:34 - in this case we're going to store it on
08:36 - our local computer because that's where
08:37 - we're running the Jango application but
08:39 - if we were running this Jango app on
08:41 - some kind of server and it was deployed
08:42 - it would store in this media location
08:45 - we're then going to say the
08:47 - mediacore root this is where the media
08:50 - folder is actually stored is going to be
08:52 - equal to os. path. jooy sorry for the
08:57 - autocomplete there blocking us and we're
08:58 - going to use the the base directory
09:00 - which is already defined we don't need
09:02 - to Define this it already exists inside
09:03 - of this file and then we're simply going
09:05 - to say media like that so this is the
09:08 - URL so this is where we should go to
09:11 - access the media files and this is the
09:12 - actual location of it uh on our Jango
09:15 - server okay so now that we have the
09:17 - media URL and the media rout and we've
09:20 - added our application here into our
09:22 - installed apps we are done with
09:24 - settings.py now what we can do is go
09:26 - inside of main now I want to quickly
09:28 - walk you through what we actually need
09:30 - to do here what we're going to do is
09:32 - we're going to create some database
09:34 - entries or database models for storing
09:36 - our different projects the idea here is
09:39 - rather than hardcoding the projects in
09:41 - what we'll do is we'll create a database
09:43 - field or a database kind of model and
09:45 - we'll allow ourselves to dynamically add
09:48 - projects or to edit them or modify them
09:50 - later on this way this can be kind of a
09:52 - living website and as you create new
09:54 - projects you can update the site by
09:56 - adding new projects to the database now
09:58 - in order to do that we need to create
10:00 - some models now in Jango I'm going to go
10:03 - in this models.py file by the way we use
10:05 - something called an OM now in orm is an
10:08 - object relational mapping now what this
10:10 - means is that rather than writing all of
10:12 - this custom SQL code or database logic
10:14 - we simply write some python code and
10:17 - then Jango will map that python code to
10:19 - the appropriate database operation so
10:21 - what you're going to see here is we're
10:23 - going to Define in Python what we want
10:25 - the data that we're going to store for
10:26 - our projects to look like and then
10:28 - python will will automatically handle
10:30 - adding that to the database getting it
10:32 - from the database updating it doing all
10:34 - of that tough stuff that we don't want
10:35 - to deal with so what we're going to
10:37 - start by doing is going into models St
10:38 - high and we're going to define a class
10:41 - which is known as a Jango model so I'm
10:43 - going to say class and then I'm going to
10:45 - call this project now we're going to
10:47 - have a few different models here but the
10:49 - first model is going to represent a
10:51 - coding project right so what we're going
10:53 - to do is we're going to say that this is
10:54 - models. model so we're inheriting from
10:57 - that base model and then inside of here
10:59 - we're going to Define all of the fields
11:01 - that we want to have for a project now
11:03 - the first field that we want to have is
11:04 - a title so we're going to say title is
11:06 - equal to models. the character field and
11:09 - then we're going to give this a max
11:10 - length of 200 characters the next field
11:14 - that we want to have is a description
11:16 - now the description is going to be
11:18 - models. text field and this is not going
11:21 - to have any maximum length we'll just
11:22 - write it like this next we're going to
11:24 - have some tags now we'll write this more
11:28 - in a second but for now we're going to
11:29 - say this is models. many to many field
11:33 - and we're just we'll fill this in for
11:35 - now we're going to say tag and then
11:37 - related uncore name is equal to projects
11:41 - I know that we haven't yet defined this
11:43 - tag model we're going to do that in one
11:44 - sec but the idea is for each of our
11:46 - projects we'll have some tags so
11:48 - something like python JavaScript CSS a
11:51 - game a web app and we'll be able to
11:53 - identify our projects based on their
11:55 - tags so we can kind of filter by those
11:57 - tags now a tag will be a different model
12:00 - that we're going to create in a second
12:01 - and we'll make an association or a
12:03 - relationship between the project and
12:05 - between the tag again let's wait a
12:07 - second and we'll look at that next we're
12:09 - going to have a link the link is where
12:11 - we have the GitHub or maybe the live
12:13 - project running so we'll say this is
12:15 - going to be models. URL field because
12:18 - this will be a link and we're going to
12:19 - say the maxcore length will be equal to
12:22 - 200 and we'll say blank equals true
12:25 - which means it's okay if we don't have a
12:27 - link for the project lastly we're going
12:29 - to implement a string method and this is
12:32 - what will happen or this is what we'll
12:34 - show when we print out this model it's
12:36 - going to take in self and we're going to
12:39 - return the self. tile of the project you
12:41 - don't need to write this but it's good
12:43 - practice okay so now that we have the
12:46 - project model written we're going to
12:48 - write the tag model so let's do that and
12:50 - then I can explain better what this line
12:51 - is doing so we're going to say class tag
12:54 - and then inside here this is going to be
12:57 - models. model and then for our tag we're
13:00 - simply going to have a name and this
13:01 - will be the
13:03 - models I think I spelled that correctly
13:05 - do charfield and this will be maximum
13:08 - length of 100 and we'll say unique
13:11 - equals true now when we pass that key it
13:13 - means we can only have unique names so
13:15 - we can't have duplicated tags which is
13:17 - exactly what we want we're then going to
13:19 - have a string again and inside here
13:22 - we're just going to return self. name of
13:25 - the tag okay now we need to make sure
13:28 - that we Define the the tag above our
13:30 - project so let's just copy that and
13:31 - paste so that when we try to reference
13:33 - the tag here it's already been defined
13:36 - okay so let's talk about this many to
13:38 - many field now whenever we create
13:40 - different database models we have the
13:42 - ability to relate them together so in
13:45 - this case we have a project and this
13:47 - project will be related to some kind of
13:49 - tags now the way that we do these
13:51 - relationships or there's kind of three
13:53 - different types of relationships we can
13:54 - have a onetoone relationship so one
13:57 - project is associated with one typ tag
13:59 - we could have a one to many relationship
14:02 - where one project is associated with
14:04 - many tags or we can have a many to many
14:07 - relationship where many projects can be
14:09 - associated with many tags now in this
14:11 - case that's the most appropriate type of
14:13 - relationship which is why we write it
14:14 - this way many to many meaning this tag
14:17 - can exist on many different projects and
14:20 - this project can have many different
14:21 - tags now what we do is we specify the
14:24 - model that we want the relationship to
14:26 - be with and then we have a related name
14:29 - now the related name is the field name
14:32 - on this tag that will contain all of the
14:35 - projects so effectively what's going to
14:36 - happen is for each of our projects we're
14:38 - going to have a linkage to the tag and
14:40 - for each of our tags we're going to have
14:42 - a link to all of the different projects
14:44 - that that tag exists on that's kind of
14:46 - how many to many Field Works uh there's
14:48 - other types of relationships as well and
14:50 - in fact we're going to look at one in
14:51 - just a second okay so hopefully that's
14:53 - clear but that's how we relate these
14:55 - fields together and this allows us to
14:57 - create as many tags as we want that are
14:59 - unique and then associate them with as
15:00 - many projects as we want okay now lastly
15:04 - we need an image so we're going to say
15:06 - Project image and this is going to be
15:09 - models. model and then we're going to
15:12 - specify the project that this image
15:14 - exists for so this is going to be a
15:16 - models. 4 in key and we're going to say
15:19 - that we have a
15:20 - project we have the related name equal
15:24 - to images and then we're going to say
15:26 - onore delete I'm going to explain all of
15:29 - this in one second don't worry we're
15:31 - going to have models. Cascade and then
15:34 - let me save that just so that we get
15:35 - some
15:36 - formatting next we're going to have
15:37 - image is equal to the models. image
15:40 - field now for this we're going to say
15:43 - upload2 and then we're going to give
15:45 - this a directory name so I'm going to
15:46 - call this project images and then slash
15:50 - and then lastly I'm going to say Define
15:52 - uncore uncore string
15:55 - self and then return and we're going to
15:57 - return an F string here and we're going
15:59 - to embed the self. project.
16:02 - tile and then image okay so let's
16:06 - quickly talk about what we just did here
16:08 - the idea is that for each project we're
16:10 - going to have multiple different images
16:12 - now if we just had one image I could
16:14 - have just taken this field and uploaded
16:16 - it or put it right on my project but
16:18 - since we can have multiple images or no
16:20 - images we don't know how many we're
16:21 - going to have we need to make a new
16:23 - model that will store images for our
16:25 - individual project that way we can have
16:28 - multiple of them linked to the project
16:30 - now the first thing we need to do for
16:31 - each of our images is we need to
16:33 - understand what project they're
16:35 - associated with now unlike our tags one
16:38 - project image won't exist for multiple
16:40 - different projects it's just one project
16:43 - image exists for one project right so
16:45 - this project can have multiple images
16:47 - but this image can only be associated
16:48 - with one project so in that case we use
16:50 - the foreign key now what this means is
16:53 - that we always have a single project for
16:56 - our individual images now I know I've
16:58 - repeated that like five times but I'm
16:59 - just trying to be specific here and what
17:01 - we do is we specify that we're going to
17:02 - have a forign key with the project model
17:05 - and then the related name is the field
17:07 - that will exist on this project that
17:10 - stores all of the different images so on
17:13 - my project I'll be able to access images
17:15 - and it will give me all of these
17:16 - different image models now what on
17:18 - delete specifies that if this project
17:21 - that we're linked to were to be deleted
17:23 - we should delete all of the images
17:25 - that's what the Cascade means okay which
17:28 - means delete all of the different images
17:29 - that are associated with the project if
17:31 - that project is to be deleted there's
17:33 - some other options here as well but this
17:34 - is the one that we're going to use
17:36 - lastly we have the image field and this
17:38 - is just specifying where we actually
17:40 - want to store the images within our
17:42 - media directory then we have the string
17:45 - and we're good to go okay so those are
17:48 - all of our models now the next thing
17:50 - that I want to do is I just want to
17:51 - create a directory inside of my
17:54 - portfolio directory so this main one
17:55 - here called media now the reason we need
17:58 - that is because we specified that inside
18:00 - of settings.py as where we're going to
18:02 - store the images so we need to make sure
18:04 - that directory actually exists then
18:06 - inside of media will have a project
18:08 - images directory that will be created
18:10 - when we start uploading images okay so
18:13 - we're going to run the code shortly but
18:14 - the next thing we need to do is make it
18:16 - so that these different models appear in
18:19 - what's known as the admin page now the
18:21 - admin page or the admin portal is
18:23 - something that's provided by D Jango to
18:25 - allow us to automatically manage our
18:27 - different models so we can go in there
18:29 - and we can create different tags we can
18:31 - create different projects Etc the thing
18:33 - is though we do need to manually add
18:35 - these different models to the admin page
18:37 - that we can see them there so how do we
18:39 - do that well we're going to go back
18:41 - inside of Main and we're going to go to
18:43 - admin.py now notice it says that we need
18:45 - to register our models here so what
18:47 - we're going to do is import our models
18:49 - from the models file that we just
18:50 - created so we're going to say from
18:52 - Models import and then we're going to
18:54 - import the tag the project and the
18:58 - project image and we're going to
19:00 - register them now we can just register
19:03 - them like this by default but since we
19:05 - have um some more complex models here we
19:07 - have some links between tags projects
19:10 - Etc let me zoom in here what we're going
19:12 - to do is we're going to write a kind of
19:14 - custom registration now what the custom
19:17 - registration means is that we can
19:18 - specify the different fields that we
19:20 - want to have and how we want to view
19:22 - these different projects so let's start
19:24 - by doing the project uh what do you call
19:27 - it kind of admin view sorry just
19:30 - stumbling here all right class project
19:33 - admin and then we're going to say this
19:34 - is admin. model admin and inside of here
19:38 - we're going to specify a few different
19:39 - fields and these fields again will
19:41 - customize how this looks inside of the
19:44 - admin uh kind of panel so we're going to
19:46 - say listor display is equal to and then
19:50 - notice that this is a tuple here so
19:51 - we're using uh normal parenthesis and
19:53 - then we're going to do title and then
19:55 - link now what this means is that when
19:57 - we're viewing a list of all of the
19:59 - different projects it's going to show us
20:01 - in that list the title and the link for
20:04 - that project we could change the fields
20:05 - that we want but this is what it's going
20:06 - to display next we're going to say
20:08 - inlines is equal to a list we're going
20:11 - to Define that in just one second and
20:12 - then we're going to say search fields
20:15 - are equal to and again in a tupple we're
20:18 - going to do the title and then this time
20:20 - we're going to do the description now
20:23 - this is specifying how we're able to
20:25 - actually search for this project so we
20:27 - can search based on the title or we can
20:29 - search based on the description because
20:30 - there is like a search box in the admin
20:32 - panel and we specify What fields we're
20:34 - going to be searching on lastly we're
20:36 - going to have list filter and this is
20:39 - going to be equal to and then we're
20:41 - going to do tags and then make sure you
20:43 - have this trailing comma the reason you
20:45 - need the trailing comma is because if
20:46 - you just put parentheses like here
20:48 - you'll see when I save they go away so I
20:50 - need this comma to make sure that this
20:52 - is treated it as a tupple because that's
20:54 - the object type that is expected here
20:56 - okay now the list filter this is how we
20:58 - can actually filter different objects so
21:00 - we can filter them based on tags so yes
21:02 - we can search by the title or the
21:03 - description but in this case it will
21:05 - show us all of the tags and allow us to
21:07 - click a tag and any project that
21:09 - contains that tag it will show us so
21:11 - just a nice way for us to be able to
21:12 - filter this okay then we have in lines
21:15 - now what I'm going to do is to find
21:17 - something that will be displayed in line
21:19 - and the reason why we need this is
21:21 - because we're going to have other models
21:23 - that are associated with this project
21:24 - and we want to edit them at the same
21:26 - time rather than editing them separ
21:28 - separately so you'll see what I mean in
21:30 - a second but I'm going to say class and
21:32 - then this is going to be Project image
21:34 - in line and then this is going to be
21:37 - admin. tabular inline and then we're
21:40 - going to say the model is equal to the
21:44 - Project image and we're going to say
21:46 - extra is equal to one now extra equal to
21:49 - one just specifies how many of these
21:51 - we're going to be displaying in line in
21:54 - this case we're going to display one
21:55 - which means by default we're asking the
21:57 - user to upload one image but we could be
21:59 - asking them to upload say four images or
22:01 - five images if we specified it like that
22:04 - okay now inside of inlines we're going
22:06 - to say Project image in line and again
22:11 - what this is going to do for us is it's
22:13 - now going to display this that we've
22:14 - just defined which is really A View to
22:16 - be able to upload an image while we are
22:19 - creating these different
22:21 - projects okay lastly we're going to
22:24 - Define our tag admin and this is going
22:26 - to be admin. model ad admin this one
22:29 - will be a little bit easier we're going
22:30 - to say
22:31 - list display and this is going to be
22:34 - equal to Simply name and then we're
22:37 - going to have our search uncore fields
22:41 - and this will just be equal to name
22:43 - again remember that trailing comma so
22:46 - just how we list it and how we search
22:48 - for it and now that we've created these
22:50 - what we can do is we can register them
22:53 - so to register them here what we're
22:54 - going to do is
22:56 - admin. site. register we're going to
22:59 - start with the tag and then the tag
23:01 - admin so what we're saying is hey for
23:03 - this tag model we want to use this tag
23:05 - admin class as its customization we're
23:08 - then going to say admin. site. register
23:12 - and we're going to register the project
23:14 - and the project admin as its
23:17 - customization and then lastly we're just
23:19 - going to register the Project image so
23:21 - we're going to say admin.
23:23 - site. register and then this one is
23:26 - going to be the Project image and this
23:29 - time we don't need any customization the
23:31 - inline was used to be displayed inside
23:33 - of the project admin but for the Project
23:35 - image itself we don't have any
23:37 - customized class we'll just render this
23:40 - okay we are almost done now what we need
23:42 - to do is start actually running the
23:44 - server we need to make some migrations
23:46 - which I'll talk about in a second and
23:48 - then we can sign into the admin panel
23:50 - and we can see what we actually just
23:51 - coded out so let's go up to our terminal
23:54 - here and what we're going to do is start
23:56 - by applying some migrations now whenever
23:58 - we make changes to our different models
24:01 - what we need to do is we need to make
24:03 - migrations and then we need to apply
24:05 - them now making migrations will create
24:07 - some files inside of D jeno in this
24:09 - migrations directory which you can see
24:11 - here which will specify the changes that
24:13 - need to be applied to the underlying
24:15 - database in order for the changes that
24:17 - we made to actually be applied once that
24:19 - file is created then we need to apply
24:22 - those migrations by running the
24:23 - secondary command so pretty much
24:25 - whenever you make any changes you're
24:26 - going to run both of these commands in
24:28 - sequence if you are affecting your
24:30 - models okay so we're going to type
24:33 - Python 3 manage.py and then make
24:37 - migrations now you're going to see when
24:39 - I do this that it will specify that
24:40 - we've created the following migrations
24:42 - making a new model project tag and
24:44 - Project image now we're going to say
24:48 - migrate okay so you'll notice when I do
24:50 - that that inside of migrations we get
24:52 - those migrations files and now when I
24:54 - click on Migrate what will happen is it
24:55 - will actually apply these different
24:57 - migrations and up the database and
24:59 - you'll see now that we have a db.
25:01 - sqlite3 database that's been created and
25:03 - now it has the provision for those
25:05 - different tables or for those models
25:07 - that we've made okay now what we need to
25:10 - do is create something known as a super
25:12 - user a super user is something that can
25:14 - sign into the admin portal and actually
25:17 - modify these different um what do you
25:19 - call it models that we've created or add
25:21 - new projects for example so to do that
25:23 - we're going to type Python 3 manage.py
25:26 - and then this is going to be create
25:29 - super user uh it's either make super
25:32 - user or create super user I think it's
25:34 - create super user and then we can give
25:35 - this a name I'll just go with Tim and
25:38 - okay never mind let's just run it
25:40 - without a name and you can see okay
25:42 - leave it blank if you want to be Tim Rea
25:44 - I'll just call this Tim you don't need
25:45 - an email address but you do need a
25:47 - password okay so type in some username
25:51 - and some password it's then going to
25:53 - create a super user for you once you've
25:55 - created the super user now we can run
25:57 - the server and sign in to the admin
25:59 - portal so to do that we're going to type
26:01 - Python 3 manage.py run server this will
26:05 - now run the server for us and you'll see
26:07 - that it shows us the URL that it's
26:09 - running on 127.0.0.1 Port 8000 what you
26:13 - can do is hit control on your keyboard
26:15 - and then click on this link you'll see
26:16 - it's underlining when I do that and then
26:18 - it will open this up in a new browser
26:21 - okay so you see it's going to open this
26:22 - up for me and it says the install Works
26:24 - successfully okay no problem uh and now
26:28 - we're going to do is go to the slash
26:30 - admin page perfect so when I do that you
26:33 - see that it brings me here again when
26:34 - you're on this page you're going to go
26:36 - slash admin and now we can sign in with
26:39 - the super user that we just created this
26:42 - is all built by jeno we didn't code any
26:44 - of this we've just added our models to
26:46 - this page okay so I just logged in here
26:48 - and you can see now that we can first
26:49 - manage groups and users we don't need to
26:51 - worry about that at least for this
26:52 - project and then we have project images
26:54 - projects and tags so what we can do is
26:57 - start creating a new project to do that
26:59 - I can go to add and you'll see here that
27:02 - I have all of the different things that
27:03 - I specified so my title description tags
27:06 - link and then the ability to upload an
27:09 - image so let's go ahead and make a
27:11 - sample project just to test this out for
27:13 - me I'm going to say python platformer
27:16 - I'll say this is a python platformer
27:21 - game
27:22 - made in Python with pame exclamation
27:26 - point for the tags if you click on this
27:28 - plus button you can make some new ones
27:30 - so I'm just going to make some new tags
27:32 - I'll say that we have python maybe we
27:34 - have game maybe we have
27:37 - CSS react I'm just making a bunch of
27:39 - random tags you can make whatever ones
27:41 - you want let's have JavaScript obviously
27:44 - ones that are going to be relevant to
27:45 - your projects and then what we need to
27:46 - do is actually select the tags so you
27:48 - can just click on one and it'll be
27:50 - selected but if you want to select
27:52 - multiple then you can hit control or
27:53 - command on your keyboard and select
27:55 - multiple of them so I'm going to do
27:56 - Python and then I'm going to hit on game
28:00 - and you'll see now that two of two of
28:01 - them are selected for the link we could
28:03 - put that in uh actually let's see which
28:05 - one might be here already python
28:07 - platformer okay perfect it already has
28:09 - that for me and then we can upload an
28:11 - image so let me actually go ahead and do
28:13 - that I have one on my desktop and now we
28:16 - can go on click on Save okay so now I've
28:20 - saved it and notice that in my list view
28:22 - here I have my title and I have my link
28:23 - for the project and I could actually
28:25 - filter it by the different tags which is
28:27 - what it's showing me right here and then
28:29 - I could search for a project if I wanted
28:31 - to do that okay so I think that's good
28:33 - for now we've made one project obviously
28:35 - we want to make multiple of them but for
28:37 - now we're just testing out to make sure
28:38 - the site is working now what we want to
28:40 - do is start creating some views so we
28:42 - can actually view these projects on the
28:44 - website and have a nice looking
28:45 - portfolio website so let me get out of
28:48 - that and let's turn off our server for
28:51 - now by just hitting control C on our
28:52 - keyboard and then clearing Okay so we've
28:56 - made the models we have cre cre a new
28:58 - project from the admin dashboard now
29:01 - what we need to do is actually display
29:02 - all of this information on the site now
29:05 - in order to do that there's a few setup
29:06 - steps so the first thing that we're
29:08 - going to do here is we're going to go
29:09 - inside of Main and we're going to make
29:10 - some new folders we're going to create a
29:13 - templates directory and we're going to
29:15 - create another new directory here called
29:17 - Static okay both of these are inside of
29:20 - the main directory now inside of
29:22 - templates this is where we're going to
29:24 - place HTML templates that we can pass
29:27 - data to from from uh dangoor and render
29:30 - kind of dynamic information now this
29:33 - will be kind of where we write all of
29:35 - our HTML and then inside of the static
29:37 - directory is where we're going to have
29:39 - our CSS and our JavaScript so inside of
29:42 - static I'm going to make a new directory
29:43 - called CSS and I'm going to make another
29:46 - new directory called JS and this is
29:48 - where we'll organize our JavaScript code
29:50 - and our CSS code the reason why we put
29:53 - this inside of static is because these
29:55 - are files that don't typically change
29:57 - and what will happen is will render them
29:59 - statically which is different than how
30:00 - we render the HTML you can look that up
30:03 - if you want some more information but
30:04 - for CSS JavaScript and images things
30:06 - that aren't frequently changing on your
30:08 - website you typically have them in some
30:10 - kind of static directory and they're
30:12 - loaded a bit differently than how we
30:13 - would load an HTML file okay now last
30:17 - thing we need to do we're going to make
30:18 - a new file inside of main called urls.py
30:22 - okay and this is where we're going to
30:24 - place some URLs um to kind of Link the
30:27 - different views that we create and
30:29 - inside of here we're going to say URL
30:30 - patterns is equal to an empty list we're
30:33 - going to write in that later but for now
30:35 - we'll just put it there so we don't get
30:36 - any errors okay so what did we just do
30:39 - we created the templates directory the
30:41 - static directory with CSS and JS and
30:43 - then we created the URL stop Pi file
30:45 - with URL patterns with an empty list
30:48 - make sure you've done that now main is
30:50 - set up and what we can start doing is
30:52 - actually rendering some content into our
30:55 - views so what we're going to do now is
30:57 - go to views .p now in Jango when we
31:00 - actually want to display a page we need
31:01 - to create something known as a view now
31:03 - a view is a function that will be called
31:05 - when we go to a specific rout a root is
31:07 - something like slash or slome or slash
31:10 - project with id1 we need to write all of
31:13 - those programmatically so what we're
31:15 - going to do here is we're going to start
31:17 - by importing our models so we're going
31:18 - to say from Models import the project
31:22 - and import the tag and then from render
31:25 - we're also going to import get object or
31:27 - 404 and I did not mean to do that this
31:31 - is what we wanted right here okay I'm
31:33 - going to remove this comment and I'm
31:34 - going to start writing a few different
31:35 - views so the first view we're going to
31:37 - write is the home view now inside of
31:40 - home we're going to take in the request
31:42 - which is what we always take in and
31:43 - we're going to say return render and
31:47 - we're going to render the request and
31:49 - then the
31:50 - home.html template that's it uh that's
31:53 - it for right now sorry what this is
31:55 - going to do is look inside of this
31:56 - templates directory for an HTML file
31:58 - called home.html it's then going to
32:01 - render that template for us which means
32:03 - it's just going to show the HTML on the
32:05 - screen let's define a few other views
32:07 - that we need we're going to have a
32:08 - contact view so this is going to say
32:11 - request and then same thing we're going
32:13 - to return a render of the request and
32:16 - then this is going to be the contact.
32:20 - HTML we're then going to say
32:22 - Define project and then this is going to
32:25 - take in a request and it's also going to
32:27 - take in an ID because we need to know
32:29 - the ID of the project we want to want to
32:31 - render sorry and then we're going to
32:32 - return a render and this case it's going
32:35 - to be
32:36 - request and then project.
32:40 - HTML okay so there's some more things
32:43 - that we need to write here but for now I
32:44 - just want to kind of stub the three
32:46 - different views that we need now what
32:48 - we're going to do is create some HTML
32:49 - templates that will represent these
32:51 - three different pages so it's very
32:53 - important that you put these inside of
32:55 - the templates directory inside of the
32:57 - main directory if you don't do that
32:59 - you're not going to be able to render
33:00 - this code so inside of templates we're
33:02 - going to make some files the first file
33:04 - is going to be base. HTML we're then
33:07 - going to have
33:10 - home.html we're then going to have
33:13 - contact. HTML and then lastly we are
33:16 - going to have project. HTML feel free to
33:20 - pause the video to create all of these
33:22 - different files okay now that we've
33:24 - created these different files we're
33:26 - going to go inside of base. HT ML and
33:28 - I'm going to start talking to you about
33:29 - something known as the Jinga templating
33:31 - engine now Jinga is what's known as a
33:34 - templating engine and what this allows
33:36 - us to do is dynamically render python
33:39 - like code inside of our HTML file so
33:42 - rather than having to write a ton of
33:44 - different JavaScript although we will
33:45 - write a little bit in just a second
33:47 - we're able to actually take variables in
33:49 - Python and display them inside of the
33:52 - HTML now what we can also do is we can
33:55 - create something known as a base
33:56 - template that can contain something like
33:58 - the main styling like the navbar
34:01 - components that are going to exist on
34:02 - all of our different pages and then we
34:04 - can render content inside of that
34:06 - template so we can have all these
34:08 - different HTML files that just have
34:10 - slight modifications to the base
34:12 - template you'll see what I mean in just
34:14 - a second but for now let's write this
34:16 - out now keep in mind all of this code is
34:19 - going to be available on GitHub some
34:21 - people do get lost because there is a
34:23 - lot of HTML that we're going to be
34:24 - writing here so for some reason this is
34:26 - not working for you I'm going too fast
34:29 - you're finding it overwhelming feel free
34:31 - just to go to the GitHub link below go
34:33 - right to this file and then just copy
34:35 - all of the code or at least view it side
34:37 - by side if you do want to write it out
34:39 - line by line okay so don't get too
34:40 - overwhelmed you can always find this
34:41 - from the link in the description so what
34:43 - I'm going to do now is type HTML colon 5
34:46 - now if you have the HTML extension
34:48 - installed in vs code which I do
34:50 - recommend that you get you'll see that
34:51 - it will actually be able to generate a
34:53 - kind of boilerplate HTML document for us
34:56 - so when I hit enter here you'll see that
34:58 - it just creates this for me and now we
35:00 - can start filling in some of this
35:02 - content okay so we have our head we have
35:04 - our body we have our HTML and then we
35:07 - have a title now the first thing that
35:09 - I'm going to do here is create a new
35:11 - block so let's look at how we do this
35:13 - we're going to use our brace here and
35:16 - then we're going to have a percent sign
35:17 - a percent sign and then a closing brace
35:19 - inside of here we're going to call this
35:21 - block and then title and then I'm going
35:24 - to put the name here which is going to
35:26 - say port folio and then home and then
35:30 - I'm going to put a percent percent and
35:32 - then end block now a block is a piece of
35:36 - content that can be overridden from a
35:38 - child template so this is going to act
35:41 - as our base template we're never going
35:42 - to render this page but what we'll do is
35:44 - inherit it from other templates Like
35:46 - Home Project and contact and then these
35:49 - blocks that we've specified here we can
35:51 - override what exists inside of them so
35:54 - from contact home projects Etc we can
35:56 - override the temp template or sorry the
35:58 - title block and we can change what the
36:00 - title of the website will be okay that's
36:03 - the idea next we're going to specify a
36:05 - link and this link is going to be real
36:09 - equal to stylesheet and we're going to
36:12 - say href is equal to and then this is
36:14 - going to be percent percent and then
36:17 - static and then this is going to be
36:19 - inside of single brackets CSS
36:22 - sb.
36:24 - CSS okay so let's just quickly talk
36:26 - about this first of all notice we used
36:28 - double quotation marks here okay very
36:30 - important then what we do is we use this
36:33 - um kind of variable syntax so we have
36:36 - the brace the percent sign and then we
36:38 - say static now when I say static what
36:40 - that means is that I want to look inside
36:42 - of the static directory which is what we
36:43 - have to find and then inside of there
36:45 - I'm looking for the path CSS base. CSS
36:49 - notice that this is inside of single
36:51 - quotes and the reason it's in single
36:53 - quotes is because we use double quotes
36:55 - outside so if we put double quotes here
36:57 - we're going to get actually a linting
36:59 - error or not a linting error but it just
37:00 - it'll be an error when we try to execute
37:02 - this code so we need to use single
37:03 - quotes instead okay so what this is
37:06 - doing is loading the base. CSS
37:08 - stylesheet which I'm going to create now
37:10 - so what we're going to do is go into
37:11 - static CSS and then we're going to make
37:15 - a base. CSS okay this is where we can
37:18 - put any CSS that we want to apply to
37:20 - this page right here which is our base
37:23 - template okay now one more thing
37:26 - whenever you use the this static keyword
37:28 - here and you're loading from the static
37:30 - directory you need to first load the
37:32 - static directory now to do that you're
37:34 - going to go to the very top of your file
37:36 - and you're going to write the following
37:37 - percent percent and then load static
37:41 - okay what that will do is load the
37:42 - contents of the static directory so
37:44 - you're able to actually reference it
37:45 - here and view this base. CSS file okay
37:49 - now next thing we're going to do here is
37:50 - we're going to say percent percent block
37:53 - and then extra head and then we're going
37:55 - to say percent percent block or sorry
37:58 - end block like that and then extra head
38:02 - now I don't know actually if we need to
38:04 - specify that uh or not yes I think we do
38:07 - and then sorry up here where I have n
38:09 - block we're just going to say n block
38:11 - title because if you have multiple
38:12 - blocks you need to write them by name so
38:14 - we have block title and then end block
38:15 - title and then we have block extra head
38:17 - and then end block extra head now the
38:19 - reason I'm specifying a block here is
38:21 - that we may want to add extra
38:23 - stylesheets from our uh base or sorry
38:26 - child templates so we can do that by
38:28 - inheriting and overriding this block so
38:31 - we're just kind of specifying it here so
38:33 - that we're able to inject things into
38:35 - the head from contact home and project
38:38 - okay now we're going to go inside of our
38:39 - body now for body we're going to define
38:42 - a main component and inside of main
38:46 - we're just going to put a block we're
38:48 - going to say block content and then
38:50 - we're going to say percent per and then
38:52 - end block content this is where we're
38:54 - going to be able to put the main content
38:56 - this is where we'll render most of the
38:58 - code or most of the HTML from the child
39:01 - templates then what we're going to do is
39:03 - have another block down here and we're
39:05 - going to say block and this is going to
39:07 - be extraor JavaScript and then we're
39:10 - going to say percent percent and then
39:12 - end block extraor JS this is so we're
39:16 - able to actually throw some JavaScript
39:18 - into our code from our child templates
39:21 - cuz we want to put that at the very end
39:22 - of the body so we're making a special
39:24 - block for that last thing we want to do
39:26 - is we want to create create a header
39:28 - component here and the header is just
39:29 - going to act as a Navar that will exist
39:31 - on all of our different pages inside of
39:34 - the header we're going to put a ul and
39:36 - then we're going to say to end the UR UL
39:39 - sorry this is going to have a class
39:41 - equal to the navigation menu and then
39:44 - we're going to have an Li
39:46 - component or Li element let's make sure
39:49 - we end that properly and this is going
39:51 - to be a link and we're going to say this
39:53 - is href to
39:55 - slome and then we're going to call this
39:57 - home and we're going to say SL a like
40:00 - that and then we're going to copy
40:02 - this and paste it and rather than home
40:05 - we're going to go to
40:07 - contact and we're going to change that
40:09 - to say contact okay so now what we've
40:12 - done is we've created a basic navigation
40:14 - bar right where we have a nav menu and
40:16 - we have two elements home and contact
40:18 - that are links that we can click on and
40:20 - we have this base template that we'll
40:22 - use to kind of show the same content of
40:24 - the same overall styling for our entire
40:26 - website now what we need to do is
40:28 - actually override or implement this
40:30 - template in order to do that we're going
40:32 - to go to
40:33 - home.html now from home.html the first
40:37 - thing that we need to write is what
40:38 - template we're extending from or
40:40 - inheriting from so we're going to say
40:42 - that this extends and then we're going
40:44 - to say
40:45 - base. HTML then similar to before we're
40:49 - going to load static because we're going
40:51 - to need that here and what we can start
40:53 - doing is overriding our different blocks
40:56 - so now rather than writing and what
40:58 - happened here let's fix that so now
41:01 - rather than writing all this HTML again
41:04 - and copying all of it over here what we
41:06 - can do is just override the different
41:07 - blocks that we have so I can take my
41:09 - block content for example and I can
41:11 - paste that here and I can now write
41:13 - something like a paragraph tag and say
41:15 - this is the home
41:19 - page okay and now what I'm doing is I'm
41:22 - essentially injecting this HTML into
41:25 - this part of my template
41:28 - now we can do the same thing for our
41:29 - title so let's just copy that and change
41:32 - this to say block title and then title
41:36 - and we can just call this homepage or
41:39 - something and then if there's any other
41:40 - blocks that we wanted to inherit we
41:42 - could do that in this case I'm just
41:44 - going to leave it like this because I
41:45 - want to show you this actually working
41:48 - okay so now that we have the templates
41:49 - written or at least most of them we have
41:51 - the base template kind of finished and
41:53 - we have our views hooked up to actually
41:55 - render these different templates the
41:56 - last thing we need need to do is write
41:57 - our different URLs so we have the views
42:00 - we know what to render but we don't know
42:01 - how to actually get there so what we're
42:03 - going to do is write what's known as our
42:05 - URL patterns so I'm going to go to
42:07 - urls.py and we're going to start doing
42:09 - that so up here I'm going to say from
42:12 - Jango do
42:14 - URLs and we're going to import path and
42:16 - then we're going to say from dot import
42:19 - and then views and actually now that I
42:22 - look at it I don't even think we need
42:25 - this variable here but we do need to
42:26 - spell views correctly okay so from URL
42:30 - patterns or sorry we do need paths I'm
42:33 - being stupid okay paths and views from
42:36 - URL patterns we're going to write our
42:38 - different URL paths so the first path
42:40 - we're going to have is just the empty
42:42 - path meaning if you just go to slash
42:44 - it's going to go here and what we're
42:46 - going to do is
42:47 - render views. home and then we're going
42:50 - to give this a name we're going to say
42:52 - name is equal to home then we're going
42:55 - to have another path and we're going to
42:56 - say okay if you go to slome or sorry
42:59 - home slash important that you have the
43:01 - slash in the correct order here then
43:03 - we're going to render views. home same
43:06 - thing this will be name home the reason
43:09 - why I'm doing this twice is that if we
43:10 - go to nothing I want to go to the
43:12 - homepage but if we go to home I also
43:14 - want to go to the homepage so I'm just
43:15 - having multiple different paths that go
43:17 - to the same
43:18 - view then we're going to have another
43:20 - path and this is going to be contact
43:22 - slash and this is going to be
43:25 - views. contact and then name equal
43:29 - to contact okay then we're going to have
43:32 - another path and this is going to be
43:34 - project but this time when I go to a
43:36 - project I need to actually know the ID
43:38 - of the project that I want to view
43:40 - because this will view an individual
43:41 - project for me so to do that I'm going
43:43 - to embed what's known as a path variable
43:46 - the path variable looks like this you
43:48 - specify the type then you specify the
43:50 - name and then you put your trailing
43:51 - slash so I'm saying okay I want to go to
43:53 - project and then some Dynamic variable
43:56 - so something like one 2 three whatever
43:58 - the ID of the project is and then I'm
44:01 - going to say this is views. Project name
44:05 - equal to project now you'll notice if we
44:07 - go to views. high that I've actually
44:09 - ridden that here right so when I have
44:11 - this path variable what will happen
44:13 - automatically is D Jango will pass that
44:15 - variable as an argument to the function
44:18 - that's rendering The View so here it
44:20 - will pass the ID and then we could use
44:22 - the ID to fetch that project and then
44:24 - display it which is what we're going to
44:25 - do later so now we have the URL patterns
44:28 - inside of urls.py however what we need
44:31 - to do is link URLs from our main Django
44:33 - project to this URLs file might seem a
44:36 - little bit weird but the idea is that we
44:38 - have this main URLs file let me get rid
44:40 - of this comment so we can actually read
44:42 - what's inside of here this file here
44:44 - specifies the root URLs for our project
44:47 - then what we can do is pass or forward
44:49 - the URL into a different app that we
44:52 - have in our jeno kind of application or
44:55 - project so let's look at how we do this
44:58 - well to do this here we're going to
44:59 - specify another path and I'm just going
45:01 - to put the empty path now this means if
45:04 - you don't go to anything so if you don't
45:05 - specify admin you don't do anything I'm
45:07 - going to take whatever else is included
45:09 - in this path and I'm going to pass it
45:12 - over to my main.
45:15 - URLs okay bear with me here for a second
45:18 - we're going to import
45:20 - include from this so the way that this
45:23 - um kind of works here is what I can do
45:25 - is I can specify something like main now
45:28 - if I do main slash here what this means
45:32 - is that whenever I see main slash
45:34 - whatever comes after the slash I'm going
45:37 - to pass it over to my main. url's file
45:40 - and then it's going to be handled from
45:42 - here so if it looks like this if I went
45:44 - to main slome then what would happen is
45:46 - I would trim off Main because I see that
45:49 - right here and I would take home and I
45:51 - would pass that to this URL patterns
45:54 - where would then be handled by this
45:55 - pattern here in my case since I'm not
45:58 - specifying anything we're just going to
45:59 - take whatever the URL is and we're going
46:01 - to pass it over to main. URLs where it
46:04 - can be handled there the only exception
46:06 - is if you go to admin since this is
46:08 - written first then we're going to go to
46:10 - the admin site URLs which is exactly
46:12 - what we want okay so that's it for that
46:16 - however we do need to write something
46:17 - else in here to be able to access the
46:19 - different images that are going to be on
46:21 - our folder or on our uh server sorry so
46:23 - we're going to say from Jango docon
46:27 - Dot and this is going to be URLs do
46:30 - static we're going to import static and
46:33 - make sure we spell URLs correctly we're
46:35 - then going to say from Jango
46:38 - docon import settings now what we're
46:42 - going to do is we're going to add a plus
46:43 - here to our URL patterns and we're just
46:45 - going to add a pattern that allows us to
46:47 - actually access the images that are
46:49 - stored inside of this media directory so
46:52 - we're going to say plus static and then
46:54 - this is going to be settings dot the
46:57 - mediacore URL which is what we defined
46:59 - previously and we're going to say the
47:01 - documentor root is equal to the
47:04 - settings. medore root okay so what this
47:08 - is pretty much saying is Hey whenever we
47:10 - go to this/ Media URL we're going to go
47:13 - look inside of the media root and that's
47:15 - going to contain the image that we're
47:16 - searching for might seem a bit weird but
47:18 - that's kind of what we've been setting
47:19 - up this whole time so we can add this
47:21 - line right here and have a URL pattern
47:23 - that allows us to view that image and
47:25 - kind of host the image on our server
47:28 - okay so now we have all of our URLs
47:30 - configured it's possible I made a
47:31 - mistake but let's go and run our server
47:33 - again so Python 3 manage.py run server
47:36 - and let's just see if we're able to
47:37 - render the homepage then we can start
47:39 - actually displaying some content on it
47:41 - so I'm going to view this and notice
47:42 - that we have home and contact and says
47:44 - this is the homepage and if I go to
47:46 - contact we just get this because well
47:48 - there's nothing on the contact page and
47:49 - if I go to home it brings us to this
47:51 - same page I know it seems really basic
47:53 - but we're now well on our way to
47:55 - actually writing a goodlooking port
47:56 - portfolio website so we've got the URLs
47:59 - working we are able to go to the
48:00 - homepage we're able to load this static
48:02 - CSS file you can see all of the
48:04 - different URLs that we've gone to down
48:06 - here we can now close this out with
48:08 - contrl C clear close the terminal and
48:11 - start writing some more HTML code to
48:13 - kind of render this content on the
48:15 - screen and start really getting towards
48:17 - the end of the project okay so let's go
48:20 - to
48:21 - home.html and let's start writing some
48:23 - content inside of here to actually
48:25 - render the different project that we
48:27 - have then we can work on the contact and
48:29 - the project page all right so from our
48:32 - home.html let's continue by actually
48:34 - overriding a few other blocks that we're
48:36 - going to need so we have the extending
48:38 - we're loading static and we're
48:40 - overriding title and content but I also
48:42 - want to override my extra head and my
48:44 - extra JS block so I'm going to say block
48:46 - extra head and then percent percent and
48:49 - then end block extra
48:52 - head okay I'm then going to copy this
48:55 - and I'm going to put this down here here
48:56 - and we're going to do the extra
48:59 - underscorejs and extraor JS now what I'm
49:04 - going to do now just to save us a bit of
49:05 - time for later is I'm going to link to
49:07 - the stylesheet that we'll have for this
49:09 - page and I'm going to link to the
49:10 - Javascript file for this page because I
49:13 - did say we're going to have some
49:14 - JavaScript in this project we will we're
49:15 - going to use that to dynamically display
49:18 - different content on the page so let's
49:20 - go to base. HTML and let's just copy the
49:22 - link to this stylesheet and let's take
49:25 - it and paste it here now I'm just going
49:27 - to change from base. HTML to home. CSS
49:32 - sorry and I completely butchered saying
49:34 - that but I mean let's change from base.
49:36 - CSS to home. CSS and now let's make a
49:39 - home. CSS file that we can place some
49:41 - CSS in later okay now we need to uh
49:45 - write the code for our JavaScript link
49:47 - so let's do that so we're going to have
49:49 - a script tag here and for the script we
49:53 - need to make sure we end the script and
49:55 - then this is going to say source is
49:57 - equal to and we are going to have
49:59 - percent percent same thing as before
50:01 - we're going to load static it with
50:02 - single quotes JS and then
50:05 - home.js like that make sure we have our
50:08 - space and now we can make a new file and
50:10 - call this
50:12 - home.js where we'll write the JavaScript
50:14 - to handle the dynamic filtering and uh
50:16 - rendering of different content great now
50:18 - I'm just going to format this so that it
50:20 - looks a little bit better perfect and
50:23 - what I'm going to do is I'm going to
50:24 - take all of this code and I'm going to
50:26 - Cy it into project. HTML and I'm going
50:29 - to copy it into contact. HTML we're just
50:32 - going to make some very slight changes
50:33 - here because for all of these Pages
50:35 - we're also going to need some JavaScript
50:37 - and some CSS so for contact we actually
50:40 - don't need the JavaScript sorry so I'm
50:41 - going to remove that and I'm going to go
50:44 - uh to where it says cssh home. CSS I'm
50:46 - going to change this to contact. CSS and
50:49 - we'll just change this to say contact
50:53 - page and then we'll say this is the
50:56 - contact contact page okay now we'll go
50:58 - to project for project we're just going
51:00 - to say project page we'll change the CSS
51:04 - to say project. CSS and then what else
51:08 - do we need to do we just say this is the
51:12 - project page and then we're going to
51:14 - load the project. JS uh because we are
51:17 - going to need some of that okay so that
51:19 - should be it for these other Pages for
51:21 - project and contact I just figured we
51:22 - might as well do that and then sorry
51:24 - while we're at it let's go to CSS here
51:26 - and let's make those files so
51:28 - project. CSS and we will load the
51:32 - contact do CSS and then we'll have Js
51:37 - and this will be the project. JS just
51:40 - that all our files are linked and
51:42 - created and we're not going to forget
51:43 - those later on okay so great let's close
51:46 - all that and let's go back into home and
51:48 - now let's start writing the code that we
51:50 - need so the idea is in the homepage we
51:53 - want to have all of the different
51:54 - projects and we want to display them
51:57 - now what that means is that we need to
51:58 - pass the projects to this page and then
52:00 - we need to render them dynamically on
52:02 - the screen now we also want to display
52:04 - the different tags on the screen and
52:06 - these tags will allow us to filter the
52:09 - different projects so we need two things
52:10 - here we need the tags and we need the
52:12 - projects so what we need to do is pass
52:14 - them in and to pass them in we're going
52:16 - to have to go to our views.py file now
52:18 - from our views.py file we're going to go
52:21 - to the home View and we're going to
52:22 - write some very simple code that will
52:24 - just get all of the different projects
52:26 - and we we'll get all of the different
52:27 - tags and we'll pass them into the
52:29 - template so that we can access them so
52:31 - to do that we're going to start by
52:32 - saying projects are equal to the project
52:38 - doobs doall now what this does is just
52:41 - give us access to all of the different
52:43 - projects that we've created that's it
52:45 - and that's why using the omm the object
52:47 - relational mapper from D Jango is so
52:49 - nice next we're going to get access to
52:51 - all the tags so we're going to say tags
52:53 - is equal to tag doobs doall okay perfect
52:58 - and now what we can do is pass a
53:00 - dictionary and the dictionary will
53:02 - contain key value pairs that we can pass
53:05 - into the template that we can use to
53:07 - render different Dynamic data so I'm
53:09 - going to have a key for projects and you
53:11 - guessed it that's going to be associated
53:13 - with my projects and then I'll have one
53:14 - for tags and that will be associated
53:17 - with my tags okay so that's how we
53:19 - render this Dynamic data and we pass it
53:22 - into the template now what will happen
53:24 - is in the home.html template we have
53:26 - access to the variable projects which
53:28 - will contain a list of all of our
53:29 - projects and to the variable tags which
53:31 - will contain a list of all of our tags
53:34 - so now let's go into home.html and let's
53:36 - start using these different variables
53:37 - that we've passed in so the first thing
53:39 - we'll do is render our different tags so
53:41 - inside of the block content we're going
53:43 - to create a
53:45 - div let's end the div here and inside
53:48 - the div I'm going to make a class and
53:51 - let's call this equal to
53:53 - filters okay so we'll start by writing
53:56 - the fil filters which will be a kind of
53:57 - search text filter and then all of the
53:59 - different tags that we can click on that
54:01 - will then show a different project so
54:03 - we're going to show an input for the
54:06 - input we're going to say type is equal
54:09 - to text and then we're going to say ID
54:12 - is equal to the name search and then
54:15 - we're going to say the placeholder is
54:17 - equal to and this is going to be search
54:20 - by name dot dot dot you can change this
54:23 - if you want this is what I'll use for
54:24 - now next we're going to have a div and
54:26 - this div will display all of our tags
54:29 - again if you're getting overwhelmed you
54:30 - can copy this from the GitHub I'm going
54:33 - to say the class is equal to the tags
54:36 - list then inside the div I'm going to
54:38 - use a for Loop and I'm going to render
54:40 - all of my different tags so this is
54:42 - where the templating comes in I'm going
54:44 - to say for tag in tags the only reason I
54:48 - can do this is because I've passed this
54:49 - tags variable into the template from My
54:51 - Views file and then I'm going to do a
54:53 - percent percent and I'm going to end my
54:55 - for Loop now inside of the for loop I
54:57 - can put something here that I want to be
54:59 - rendered every iteration of the for Loop
55:01 - and what do I want that to be well I
55:03 - want that to be my tag so I'm going to
55:05 - say button and we'll close the
55:08 - button and then the name of the button
55:11 - is going to be and we're going to have a
55:14 - set of double braces here this is how we
55:17 - actually grab a variable and render it
55:19 - inside of the template and I'm going to
55:21 - say tag. name so whenever I actually
55:23 - want to display one of my python
55:25 - variables in the HTML I can use these
55:27 - two braces like this okay so that's
55:30 - going to be the name of my button and
55:31 - then the class is going to be a tag
55:34 - because we're going to style this later
55:35 - and then we're going to have the data
55:37 - tag so what's actually um sorry what
55:40 - we're actually accessing when we click
55:41 - on this button and then same thing we're
55:43 - going to use our double brace and we're
55:45 - going to say this is tag. name and then
55:47 - we're going to put a pipe and we're
55:49 - going to put lower now what this is is I
55:52 - believe it's called a Content filter uh
55:54 - there might be a more specific name for
55:56 - a but pretty much what this will do is
55:57 - just convert the tag. name to lowercase
56:00 - the reason for that is so that when we
56:01 - do the filtering we don't have any
56:03 - issues with capitalization and any tags
56:05 - that have the same value even if it's
56:07 - different capitalization will show up so
56:09 - that's what we're doing there data tag
56:11 - tag. name and then we're piping it or
56:12 - filtering it to be lower and that's how
56:15 - we're displaying our buttons let me just
56:17 - move this over here so we can see
56:18 - everything okay so you know what before
56:20 - I go too much further let's run this and
56:22 - see if we get all of our different tags
56:24 - appearing on the screen so I'm going to
56:26 - go Python 3 manage.py let's open this up
56:29 - and notice we have python game CSS react
56:31 - and JavaScript so the different tags we
56:33 - added from the admin panel as well as
56:35 - the search bar are appearing on the
56:37 - screen fantastic now we're going to
56:38 - style this at the very end so don't
56:40 - worry about how it looks for now okay so
56:43 - now that we've done that let's just
56:45 - close this we can leave it running for
56:46 - right now and let's make another div
56:49 - this time to display the projects so
56:52 - we're going to make a div we're going to
56:53 - say the class on this one is the project
56:56 - projects list make sure you type all of
56:59 - these classes by the way because I have
57:01 - a bunch of CSS that will perform this
57:03 - styling for you but you need to make
57:05 - sure you have the classes and the IDS
57:07 - correct okay so now same thing as before
57:09 - we're going to write a for Loop to Loop
57:10 - through all of the projects that we have
57:12 - so we're going to say for
57:14 - project in projects and then we're going
57:17 - to say percent percent end
57:20 - for okay and then inside of here what do
57:23 - we want to do we're going to have a div
57:27 - okay the div is going to have a class
57:30 - this is going to be a project it's going
57:33 - to have a data name we're going to need
57:35 - this for the JavaScript filtering so
57:38 - similar to before we're going to do that
57:40 - this is the project. tile and then we're
57:44 - going to pipe this again over into
57:48 - lowercase inside of the div here we're
57:50 - going to have something else sorry so
57:53 - for the data name we're also going to
57:54 - have the data- tag
57:57 - and then here for the tags we're going
58:00 - to have
58:01 - project. tags
58:04 - doall and then again we're going to use
58:07 - one of these filters and we're going to
58:08 - say joyan colon single quotes comma
58:14 - space colon lower okay I know that was a
58:18 - lot let me see if I can format this so
58:20 - that we can read it a little bit easier
58:22 - let's zoom out okay so we have a div
58:25 - class project data name is project. tile
58:28 - and then we're converting that to
58:29 - lowercase then we have our data tags and
58:31 - this is our project. tags. all this
58:35 - gives us all of the different tags
58:36 - notice it's not quite python syntax but
58:38 - it's very similar to what it would be
58:40 - then what we do is we apply the join on
58:42 - this now what we're doing is we're
58:44 - joining these with commas so that we get
58:47 - kind of like the string join of all of
58:49 - these and then we're converting all of
58:51 - those to lowercase okay then inside of
58:54 - the div what I'm going to do is I'm
58:56 - going to display the name of the project
58:58 - so I'm going to say
59:00 - H2 and let's close the H2 and this is
59:03 - going to be a link and we're going to
59:05 - say a href and then inside of here the
59:08 - href is going to be 2% percent and this
59:11 - is the URL and then in single quotes
59:15 - project and then the
59:19 - project. and then what we're going to
59:22 - have is the
59:23 - project. title
59:26 - like that okay that's for our h2 tag we
59:31 - also need to close the a tag so let's do
59:33 - that now beneath that we're going to
59:35 - display the description of the project
59:37 - so we're going to
59:39 - say
59:40 - project.
59:42 - description and then close the P tag if
59:45 - we can type that correctly and then
59:48 - we're going to have the tags so now
59:50 - we're going to say tags colon and what
59:52 - we can do is simply copy what we had up
59:54 - here so project. tags join but we won't
59:57 - apply the lower this
59:59 - time okay and then we need to make sure
60:01 - that we just put this inside of our
60:03 - double
60:05 - braces okay I believe that's going to be
60:08 - it for now I know that this looks fairly
60:12 - messy and it's kind of difficult to
60:13 - follow along with feel free to pause the
60:14 - video and type it out but the reason why
60:16 - we need these data names and data tags
60:18 - is so when we get into the Java script
60:20 - and we apply our filtering it's actually
60:22 - going to work and we can uh view these
60:24 - different divs that have these different
60:26 - tags okay so let's go back here and want
60:30 - to open up my browser okay I guess we're
60:33 - just going to have to do it from down
60:34 - here all right open this up and now you
60:37 - can see that we have our different tags
60:39 - so now working and we have our project
60:42 - so it says python platformer this is a
60:44 - link that I can click on okay we have
60:46 - our tags Python and game and then we
60:49 - have the description and if we had
60:51 - multiple different projects it would
60:53 - display all of the different projects
60:54 - for us perfect
60:56 - okay so now that we've done that what we
60:58 - probably want to do is start writing
60:59 - some JavaScript that can filter these
61:01 - different projects then we'll write the
61:04 - project page so we can view an
61:05 - individual project so let's go into our
61:08 - static JS and home.js where we're going
61:11 - to start writing that JavaScript all
61:13 - right so let's begin by having the
61:15 - following we're going to say documents.
61:17 - addevent listener and then for this
61:19 - we're going to say Dom content loaded
61:22 - we're going to have a function and the
61:24 - function is going to be all of the code
61:26 - that we write here now the point of this
61:29 - is that as soon as the Dom content is
61:30 - loaded and only then will we start
61:32 - executing this code that way we can
61:34 - actually find all of the elements that
61:35 - we're looking for so we're going to
61:37 - begin by looking for a few Target
61:39 - elements the first one is going to be
61:40 - our name search which is that input
61:42 - field where we can actually search for
61:44 - the name of a project now this is going
61:46 - to be document doget element by ID and
61:50 - the ID of this element is the name
61:52 - search field or the name search ID next
61:55 - we want to have all of our tags so we're
61:57 - going to say this is document. query
61:59 - selector all and we want to select all
62:02 - of the elements that have the class. tag
62:05 - and then we want to get all of our
62:06 - projects so it's going to be projects
62:08 - equals document if we spell that
62:11 - correctly do query selector all and
62:14 - again same thing this is going to be
62:17 - project okay so the first filtering we
62:20 - can apply is based on the search field
62:23 - and then we can do the tags so we're
62:24 - going to make a function and we're going
62:26 - to call this filter and then
62:30 - projects now inside of filter projects
62:32 - the first thing we need to do is get the
62:34 - value of the name search field so we're
62:37 - going to say const name query is equal
62:39 - to the name
62:41 - search okay dot value and then this is
62:45 - do two
62:47 - lowercase okay so we're just converting
62:49 - that to lower case now what we're going
62:50 - to do is Loop through all of the
62:52 - projects that we have and we're going to
62:53 - see if the query that we searched for
62:55 - for is in the project name if it is
62:58 - we'll leave it there otherwise we'll
63:00 - remove it so we're going to say
63:02 - projects. for each and then inside of
63:06 - here we're going to have a
63:08 - project okay we're going to have an
63:10 - arrow function and we're going to say
63:12 - the name is equal to
63:16 - project. getet attribute and we're going
63:19 - to get the data name attribute from our
63:22 - project so that is why we had to write
63:25 - the dat name and the data tags attribute
63:27 - so we can actually access it and see if
63:29 - this project matches the filter then
63:31 - we're going to have const name match is
63:34 - equal to name. includes and we're going
63:37 - to see if it includes the name query so
63:39 - we're just searching for a string inside
63:40 - of another string if it does so if name
63:44 - match then what we'll do is say project.
63:49 - style not sure why I did that do display
63:52 - is equal to
63:54 - nothing other otherwise we'll copy
63:58 - this and we'll make it equal to none
64:02 - that's it so all this is doing here and
64:04 - we'll link this up in one second is
64:06 - we're searching through all the
64:07 - different projects we're looking at the
64:09 - name of that project and if the name
64:12 - query that we search for exists inside
64:14 - of that name then we're going to keep
64:15 - this project the way we'll keep it is by
64:17 - making sure the display property is just
64:19 - blank otherwise we set the display to
64:21 - none and that effectively is going to
64:23 - hide this element great now what we need
64:26 - to do though is we need to add an event
64:28 - listener for this uh function so we're
64:30 - going to say name search do add event
64:34 - listener and the event listener is going
64:36 - to be on key up so anytime you finish
64:38 - typing or lift your key up then we are
64:40 - going to uh call this function which is
64:43 - filter projects okay so that should work
64:46 - for now and then we need to do the one
64:47 - for the tags so what we'll do is go back
64:50 - here we will refresh and if I search
64:52 - something like hello world we can see
64:54 - that nothing is happening so what we can
64:56 - do is click on inspect right click on
64:58 - the wheel and click on empty cache and
65:00 - hard reload just to make sure we load
65:02 - the JavaScript and if I type something
65:04 - like hello world or python okay seems
65:07 - like it's still not working which tells
65:09 - me we probably have some kind of error
65:12 - let's go back and try again uh okay guys
65:16 - give me one second I'm going to look at
65:17 - this and see why this is not loading all
65:19 - right so I've made a very silly error
65:21 - here I've typed Sr for my script instead
65:25 - of Sr RC so it was never actually
65:27 - linking my JavaScript file hence why
65:29 - nothing was loading so I've just fixed
65:31 - that here on line 32 uh that was in my
65:33 - home.html file now I had some comments
65:35 - in here just to test this out so let's
65:37 - remove those comments for now and let's
65:40 - go back here and refresh and start
65:43 - typing and we can see now that we get a
65:45 - different error it says HTML input
65:47 - element filter projects uh issue reading
65:50 - to lowercase okay let's have a look at
65:53 - that and see what that issue is okay
65:55 - another silly error here for some reason
65:56 - my autocomplete would have replaced
65:58 - value with area value Max which is not
66:00 - what I wanted so let's make sure that
66:02 - says value I'm sure you guys probably
66:04 - caught that when that happened and let's
66:06 - go back here and refresh and type
66:08 - something like test and you can see now
66:10 - that it goes away because it doesn't
66:11 - match the filter where's if I type
66:14 - python platformer it's still there until
66:16 - I type something that doesn't exist in
66:17 - the string okay so it is correctly
66:20 - filtering through our elements obviously
66:21 - if we had more of them it'd be easier to
66:23 - test it but you can see this is indeed
66:24 - working in the job JavaScript for that
66:26 - is good so next thing we need to do now
66:28 - is filter based on our tags so let's
66:30 - start writing the JavaScript code that
66:32 - can do that so what I can do here is
66:34 - let's just move this down and move this
66:36 - over so we have some more space I can
66:38 - write tags. for each because we need to
66:41 - Loop through all of our tags here we're
66:44 - going to grab the
66:46 - tag and what we're going to do is add an
66:48 - event listener for every single one of
66:50 - our tags so we're going to say tag.
66:52 - addevent
66:53 - listener the event listener will be if
66:55 - we click on the tag if we do we're going
66:58 - to call a function and that function
67:01 - will be the following first we're going
67:03 - to say const selected tag is equal to
67:07 - this.get attribute and we're going to
67:09 - get the attribute data- tag okay that's
67:12 - what we've put on the tag that tells us
67:14 - the name of the tag then after we do
67:17 - that we're going to say projects. for
67:19 - each and we're going to
67:21 - say project and then we'll write our
67:25 - Arrow function and inside of here we're
67:27 - going to say const project tags is equal
67:31 - to
67:33 - project. get attribute and we're going
67:36 - to get the attribute of you guessed it
67:38 - data tags that really annoying one that
67:40 - we wrote out now we need to see if
67:45 - the project tags do
67:49 - includes the selected tag so that's what
67:52 - we're doing if it does include the
67:54 - selected tag then we're going to say
67:56 - project. style. display is equal to an
68:00 - empty string
68:01 - otherwise we will say project. style.
68:05 - display is equal to
68:08 - none okay that's it that's all we need
68:11 - so we're doing the same thing
68:12 - effectively that we did here when we're
68:14 - hiding or showing the element but this
68:16 - time we're just doing it for all of the
68:17 - different tags and that's why we need
68:19 - this tag. event listener for each tag
68:21 - great so let's try this out now go back
68:24 - here refresh let's click on JavaScript
68:27 - you see that goes away because it
68:28 - doesn't match let's click on game you
68:30 - see it shows up because it does match
68:33 - obviously this is a pretty simple filter
68:35 - you might want to actually have multiple
68:37 - selectable tags and have maybe
68:38 - checkboxes or something but for now
68:40 - we're just making it so when you click
68:41 - on one it shows you all the projects
68:42 - that are in that category sweet so
68:46 - that's how that works for our uh kind of
68:48 - project page here filtering the projects
68:50 - now what we want to do is actually
68:52 - display the project on the project p on
68:54 - the project page sorry so let's go ahead
68:57 - and do that we're going to go over to
68:58 - our project. HTML we're going to move or
69:01 - remove all of this and we're going to go
69:03 - to views.py now and we're going to pass
69:05 - the individual project that we need to
69:08 - this project page now in order to do
69:10 - that we're just going to go inside of
69:11 - here we're going to say
69:13 - project is equal to get object or 404
69:19 - and we're going to say that this is
69:21 - project and then primary key is equal to
69:24 - the ID that was pass here now all we'll
69:27 - do is we'll say project colon project
69:33 - and what we're doing is passing a now
69:34 - dictionary that contains this project so
69:36 - this is a helper function you can use in
69:37 - Django all this is going to do is look
69:40 - for a model that contains this key so in
69:42 - this case we're looking for the primary
69:43 - key which will be the ID that we've
69:45 - specified in this project model if it
69:47 - exists it will return it otherwise it
69:49 - will render a 404 page that's exactly
69:52 - what we want and then what we do here is
69:53 - we use this and we pass it to the
69:55 - template so now we have a project
69:56 - variable that contains the project
69:58 - information so now let's go back into
70:00 - project. HTML and let's write the code
70:03 - to display an individual project now
70:06 - first things first let's display the
70:07 - stylesheet which we're already doing
70:09 - okay good check now let's go into
70:11 - content and let's write all of the code
70:13 - that we need so let's write a div let's
70:16 - end the div for the div we're going to
70:19 - have a class and this is going to be the
70:21 - project-
70:23 - cart then we're going to have a div
70:27 - and another div this is going to have a
70:29 - class this is going to be project- info
70:32 - okay inside of the project info we're
70:35 - going to display well the info for the
70:36 - project so we're going to have an H1
70:39 - tag and then for the H1 tag we're going
70:41 - to dynamic or render a dynamic variable
70:43 - which is going to be project.
70:46 - tile okay then we're going to have a
70:49 - paragraph tag let's end the paragraph
70:51 - tag and we're going to have an a tag end
70:54 - the a tag
70:55 - this is going to say the GitHub link or
70:58 - let's actually change this to project
71:01 - link for the
71:03 - href this is going to be equal to the
71:08 - project. link okay because we want to
71:11 - display the link to the project then
71:13 - we're going to have a paragraph tag and
71:14 - we're going to display the project
71:16 - description so project do description
71:20 - and then we're going to display the uh
71:22 - URL that allows us to go back to the
71:24 - homepage so we're going to say a href is
71:28 - equal to and this is going to be percent
71:30 - percent and then URL and then single
71:32 - quotes home so this will bring us back
71:35 - to the homepage and then we're just
71:36 - going to say back to home and then we'll
71:39 - end that link and then we're going to
71:42 - have another div that's going to display
71:44 - all of the different images so what we
71:45 - want to do is actually display these
71:47 - images in a carousel so that we can kind
71:49 - of swipe between them because we could
71:51 - have one image we could have five images
71:52 - right we could have multiple images so
71:54 - that's what I'm going to do here now
71:55 - this is where we'll need the JavaScript
71:57 - so that we can display the images and
71:59 - kind of change which ones we're
72:00 - rendering on the screen so we're going
72:02 - to have a div this is going to say class
72:05 - is equal to
72:08 - Carousel okay now let's go slash div
72:12 - then we're going to have another div and
72:15 - this is going to say class is equal to
72:17 - kousol das
72:20 - images okay let's end the div so I don't
72:22 - forget
72:25 - then we are going to display some images
72:27 - so we're going to say percent percent
72:28 - for image in
72:32 - project. images.
72:35 - all let's end the for Loop okay so
72:38 - percent percent end
72:40 - four now inside of here we're going to
72:43 - display some divs for each of our images
72:46 - so we're going to say class is equal to
72:48 - a carousel Dash and this will be item
72:53 - actually then we're going to do
72:56 - /d then we're going to display the image
72:59 - so we're going to say image and this can
73:00 - be a self-enclosed tag we're going to
73:02 - say the source is equal to the
73:06 - image. image. URL and then we're going
73:10 - to say the alt is equal to and this is
73:13 - actually just say Project
73:16 - image okay so that's almost it let's
73:20 - just format this so that it looks a
73:21 - little bit nicer and then inside of this
73:24 - Carousel div here we're just going to
73:25 - have two links that allow us to control
73:28 - the carousel so that we can go to the
73:29 - left and to the right so we're going to
73:31 - have a and this is going to say class is
73:34 - equal to the Carousel and then control
73:38 - and then this is going to say previous
73:40 - then we're going to say onclick is equal
73:43 - to and we're going to call a JavaScript
73:44 - function called move slide and we're
73:47 - going to move the slide Nega 1 because
73:48 - we're going
73:50 - left okay then we're going to close the
73:53 - a tag and then here we're going to put a
73:55 - special symbol I'm going to copy it in
73:57 - which will give us a carrot that is
73:58 - going to the
73:59 - left okay now we'll copy this and we'll
74:04 - paste it and we'll change this to say
74:05 - next and we'll change the move slide to
74:08 - say one and then rather than 94 this is
74:11 - going to be 95 so we get the carrot
74:13 - going to the right okay so that's all
74:15 - the HTML that we need for now none of
74:18 - this is really going to work because we
74:19 - haven't written the JavaScript but we
74:21 - can at least go to it and see what it
74:22 - looks like with a single image and then
74:24 - I want to create a another project that
74:25 - has multiple images so we can actually
74:27 - test this out when we write the
74:29 - JavaScript code so again let's apply a
74:31 - format here let's go and let's save and
74:34 - let's click on this and notice when I go
74:36 - here it shows me the image now you'll
74:38 - see that we have these carrots to the
74:40 - left and to the right we're going to
74:42 - style them so that they look nicer but
74:44 - when we click on these they should
74:45 - alternate the image but you can see that
74:47 - we have python platformer project link
74:49 - we have the text and then we have the
74:50 - image and if we had multiple images this
74:52 - would work okay so let's now go here
74:56 - let's add another image and then let's
74:58 - write the JavaScript that allows us to
74:59 - actually change the images around all
75:01 - right so let's go into project. JS and
75:04 - let's write the JavaScript code that can
75:05 - handle this for us now the basic idea
75:08 - here is we just want to um only show one
75:11 - of the images at a time so we'll do some
75:13 - CSS styling later that makes it look
75:15 - better but the point here is that we'll
75:16 - only show the image that's at the index
75:19 - that we're currently on so we're going
75:21 - to say let slide index equal 1 we're
75:25 - then going to say show
75:27 - slides with the slide index and we're
75:29 - going to call a function that we're
75:31 - going to write now so we're going to say
75:32 - function and then this is show slides
75:36 - and this is going to take in N which is
75:38 - our index now the point here is that all
75:40 - we're going to do is we're just going to
75:42 - hide all the images that aren't the
75:44 - current index and display the one that
75:45 - is so we're going to say let I we're
75:48 - going to say let slides equal document.
75:52 - getet Elements by class name
75:55 - name and this is going to be a care Soul
75:59 - item so all of our item divs we're going
76:01 - to get those and we're going to say if n
76:04 - is greater than the slides. length so
76:07 - the number of slides that we have then
76:09 - we're going to say that the slide index
76:11 - is equal to one okay this is just to
76:14 - make sure that we're going in a circular
76:15 - motion so as soon as n hits the number
76:17 - of images that we have we just go back
76:19 - to the first index we're now going to
76:22 - say if n is less than one then what we
76:25 - want to do is go circular in the other
76:27 - direction so we're going to say the
76:29 - slide index is equal to the slides.
76:32 - length so we go to the back whereas here
76:36 - we're going to the front all right then
76:39 - we're going to say
76:40 - four and actually we don't need to do
76:42 - the way I did here we'll just say four
76:44 - let I equal 0 I is less than slides.
76:49 - length and then
76:51 - i++ and we're going to say slides I
76:55 - do
76:57 - style. display is equal to none so this
77:00 - is just hiding all of the different
77:02 - slides that we have then we're going to
77:04 - say slides at the slide index
77:07 - minus1 do style. display is equal to
77:12 - flex and that just effectively is going
77:14 - to display this Force okay so that's
77:16 - really all we're doing We're looping
77:18 - through all the so we're getting all the
77:19 - slid story that we have we're checking
77:21 - kind of that circular motion with n to
77:23 - see if we need to go backwards if we
77:25 - need to go forwards then We're looping
77:27 - through all the slides we're making all
77:28 - of them hidden and we're just displaying
77:30 - the one that we're currently on last
77:32 - thing we need to do is make another
77:33 - function and this function will be
77:35 - move slide and this is going to take in
77:38 - n and then what we're going to do is say
77:40 - show slides and we're going to show the
77:44 - slide index plus equals n okay now could
77:50 - actually just do this like this we'll
77:52 - say slide index plus equals n and then
77:55 - we'll just display this so this way we
77:57 - can move by as many um what do you call
78:00 - it kind of elements as we want so we can
78:01 - move by one we can move by negative 1 2
78:03 - 3 whatever so first I'm just going to
78:05 - increment the slide index and then sorry
78:07 - I'm just going to display the slide
78:09 - index here I was going to do it in a
78:10 - fancy way there but I don't want to
78:11 - confuse anyone with that syntax okay so
78:14 - now we have the move slides function and
78:16 - from here you'll see that that's what
78:17 - we're calling right move slide and did I
78:19 - call it slides or slide okay slide good
78:22 - so this way we're going back negative 1
78:23 - this way we're going forward one and
78:25 - then we're calling show slides and the
78:27 - reason we call this immediately is that
78:29 - we only show the starting slide perfect
78:32 - so let's try this out now I did actually
78:34 - add some more images to my python
78:36 - platformer so if I refresh and go here
78:38 - you can see that we're showing two
78:40 - images which actually makes it seem like
78:43 - this is not working so let's go here and
78:46 - refresh and ah we're probably running
78:48 - into the same eror we had before where
78:50 - we have scr this needs to be
78:53 - SRC okay
78:55 - let's refresh and now you see we only
78:57 - have one image and if I go here and
79:00 - click forward it shows the next image
79:02 - forward shows the next image right so I
79:04 - just have two now I remove the other one
79:06 - that we have and you can see that we can
79:08 - cycle between them obviously this looks
79:10 - really really bad though so we should
79:11 - apply some styling which is what I'm
79:13 - going to do now so that it looks a lot
79:15 - better all right so at this point all of
79:17 - the coding that I'm going to do in this
79:18 - video is actually finished and what
79:20 - we're going to do now is some styling
79:22 - now I really don't like just sitting in
79:24 - front of you and writing a bunch of CSS
79:26 - code I find that you're not really going
79:27 - to learn that much from it and I'm not a
79:29 - CSS expert most of the CSS I have I just
79:31 - find online where I kind of toy with
79:33 - quite a bit so what I'm going to do is
79:35 - just copy in all of the relevant CSS and
79:37 - I'll tell you where you can find it now
79:39 - you can feel free to restyle this
79:41 - website if you want you can change it
79:42 - around but again I just don't find a lot
79:44 - of value in me typing it in front of you
79:46 - so I'm just going to copy it in and show
79:48 - you what file it's supposed to go in so
79:50 - let's start by styling the page we just
79:52 - did so we're going to go to CSS and then
79:54 - project CSS now the way you would find
79:56 - the code that I'm about to copy in here
79:58 - is you would simply go and find this
80:00 - file from the GitHub link below so open
80:03 - up GitHub right go into portfolio go
80:05 - into main go into static go into CSS
80:08 - find project. CSS and if you're doing
80:10 - this with me just take the contents of
80:12 - that file and copy it inside of here
80:14 - which is exactly what I'm going to do
80:16 - feel free to read through all the code
80:18 - I'm not going to walk you through it in
80:19 - this video because this is not a CSS
80:21 - tutorial and now once we apply that if
80:24 - we go here and we refresh you might see
80:26 - that nothing happens now if nothing
80:28 - happens that means you should right
80:29 - click up here and click empty cache and
80:31 - hard reload once you do that what you'll
80:34 - see is that the styling will be applied
80:36 - and the reason why you need to do that
80:38 - is because sometimes um it doesn't uh
80:41 - actually load and it caches the previous
80:43 - CSS file so you need to empty the cache
80:45 - and hard reload in order for it to load
80:47 - properly now you're seeing some issue
80:49 - with the carrots here once we apply The
80:50 - Styling for the other Pages this should
80:52 - be fixed so let's go ahead and actually
80:54 - test that out otherwise I will fix this
80:56 - for you in the video Okay so we've done
80:58 - project. CSS now we're going to go into
81:01 - home. CSS and we're going to copy this
81:03 - in so go home. CSS and copy the contents
81:06 - of the home. CSS file and we're going to
81:09 - do base. CSS as well so I'm going to go
81:12 - to base. CSS okay and paste in that and
81:16 - then format it okay so let's go here and
81:20 - let's go empty cache and hard reload
81:23 - still looks like my carrots are not
81:24 - being fixed so I will I guess need to go
81:26 - fix those but you can see now that the
81:27 - nav bar is looking better and if I go to
81:29 - the homepage now everything looks quite
81:32 - a bit better we get these nice pretty
81:34 - cards and if I click here and apply the
81:36 - filtering it does actually work I can
81:38 - click on this and it brings me to this
81:40 - page now what I wanted is these carrots
81:43 - to actually be on the image so let me
81:46 - see if I can fix that for you and then
81:47 - I'll be right back so of course just
81:49 - another silly error here guys on my a
81:51 - tags I forgot to add Carousel control so
81:54 - I need to have the T because I spelled
81:56 - this incorrectly so of course they just
81:58 - weren't being picked up and styled so
82:00 - now if I go back here and I fix this you
82:02 - can see that now my carrots are actually
82:04 - on the image and we can scroll through
82:06 - them okay perfect so we go back to home
82:09 - and then obviously the contact page this
82:11 - is a page I wanted to leave for you guys
82:12 - to write yourself uh I just thought
82:15 - let's have a page let's link it up and
82:16 - then let's let you guys write this
82:18 - however you want and give you kind of
82:19 - some homework and something that you can
82:21 - continue to do okay so with that said I
82:23 - believe I'm going to going to wrap up
82:25 - the video here I hope you guys found
82:27 - this helpful and I hope this gave you a
82:28 - solid template for a portfolio resume or
82:31 - portfolio project in Python I know that
82:34 - this is pretty straightforward however
82:36 - this is a really good base this gets you
82:38 - started and now it's really easy for you
82:40 - to add additional pages to make the
82:42 - projects better to continue to style
82:44 - this obviously I don't really want to do
82:45 - a 10 or 12h hour long video to really
82:47 - build this out to the stage you'd want
82:49 - it to be at and in fact I shouldn't do
82:51 - that because you guys should really
82:53 - build these projects on your own once
82:55 - you get the base set up anyways I hope
82:57 - it helped you with that and I look
82:58 - forward to seeing you in another YouTube
83:01 - video
83:03 - [Music]

Cleaned transcript:

in this video you'll learn how to build an entire portfolio website using D Jango and python I'll walk you through everything step by step and by the end of the video you'll have a great project that you can extend and build into something really unique now we'll combine this project with a little bit of JavaScript and CSS and we'll use some more advanced Jango features to show you how to connect to a database and how you can programmatically add different projects this is a great starting project if you need a portfolio website and something you can definitely consider adding on your resume if you extend it and make it that much better with that said let me give you a quick overview of the project and you can see what it actually looks like and what you'll be building so I have the project in front of me and I'll quickly walk you through it this is a portfolio website that demonstrates a few different projects that you built obviously you can make it look better but the idea is to give you the base and do all of the heavy lifting and then allow you to style it and make it unique so you can see that we have some different projects I can click into AI Place Flappy Bird for example I can see a description a link to the GitHub and then some different images for the project maybe I want to go and view my multiplayer Pictionary same thing I can view some different images of what it looks like and then go back home now another thing that we've added is some filtering so if I click on JavaScript for example it will filter all of the projects that have a JavaScript tag we can go back to Python and you get the idea we can view these filtered projects we can also search for a project so something like Ai and then we see that AI plays Flappy Bird pops up so I know this looks pretty simple but I promise you this is a great project and it's going to teach you a ton about D Jango and python now building a portfolio website is great and all but it only means something if people can actually see it that means that you need to deploy the site and that's actually a great skill that you can demonstrate on your resume and in an interview now one of the best ways to deploy this site is actually by using the sponsor of this video hostinger now hostinger is a super easy to use web hosting platform that offers a ton of different options for any use case now for this type of website we're going to be looking at their virtual private server plans which give you complete control over the server they let you log in with root access and you can do all of the advanced configurations you need for deploying a site like this so if we scroll down you can see that they have really affordable options here and what I'd recommend is checking out their KVM 2 so what I'll do now is Select this plan and just walk you through quickly how you could actually go about hosting this site using hostinger so our first step here is to select our period create or sign into an account and then choose one of the various payment methods and make sure we click on have a coupon code and enter my exclusive code Tech with Tim now once we've done that we'll be brought to a page where we can set up our virtual private server so the first step is to select our location and you can just pick whatever is closest to you for the lowest latency so now we can choose our operating system where we have a lot of different options but what we can actually do is use a template here from hostinger if we go to Applications and we simply search for D Jango you can see that they have a template that will already set everything up for us and now we need to set a strong root password so that we're able to actually sign into our VPS and do the configuration later on so now that our VPS has been set up we can view all of the different details and configuration options from this dashboard right here but the next step is to actually SSH into the VPS and start configuring it for deploying our D Jango site now there's quite a few steps here and I can't show you in just a few minutes so what I'll do is I'll leave a link to a video in the description that will walk you through continuing this deployment regardless you'll need a VPS to do this so first check out hostinger from the link in the description make sure you use my special discount code and once you have the VPS then you're ready to deploy this so people can actually see your portfolio website so let's go ahead and get started here now as a reminder we're going to be using D Jango for this project so the first thing we need to do is install D Jango we also need to install another package that we need then we'll create the D Jango project set up our D Jango application I'll walk you through it step by step so what I've done here is open up visual studio code and I've just opened up a new folder you can do this in any editor that you want but if you want follow along exactly with this video just open up vs code and open some folder in this case I have my Jango portfolio spelled incorrectly opened anyways that's fine so what I'm going to do here is I'm going to start by installing D Jango now to do that I'm going to type pip 3 install and then D Jango now if you're on Windows you can change this to be pip and this should install the D Jango framework for you now if you want you can create a virtual environment to install this inside of but it's not necessary for this video now after we install Jango we need to install pillow so this is with a capital P and this is because we'll be displaying some images for our projects and D Jango needs pillow in order to display those images so pip 3 install pillow you can see I already have this installed in my python installation now for some reason these commands didn't work for you I'll leave two videos on screen that show you how to fix them okay so now that we have pillow and Jango installed it's time to create a new D Jango project now to do that we can type D Jango admin and then we're going to type start project and then we're going to give this a name now I'm just going to call this portfolio and I'm going to spell it correctly this time and when I do that you should see that we get a portfolio directory created inside of the folder that we're in now for some reason that didn't work for you what you can do is type Python 3m and then Django admin start project portfolio if that doesn't work you can try python hyphen M Django admin start project portfolio and one of those commands should work otherwise leave a comment and I'll try my best to help you out okay so now we have a Jango project and if we look here we'll see that we have a bunch of files already created so we have manage.py we have a portfolio directory we have an init URLs Etc now what we need to do is CD into this directory so we're going to say CD and then we call this portfolio so we're going to do portfolio here and now we're inside of this folder that we just created so now what we need to do is make a new app inside of our D Jango project now the way this works is that we have this kind of starter project right here and this contains the global settings the global files and then we create individual applications where we can separate out different pieces of logic now in our case we only need one application because this is a pretty small project but in larger Django projects you might have an app for authentication an app for projects an app for your career whatever like you can separate the logic out into different applications and those applications are kind of selfmaintained and you can typically bring them into other D Jango projects anyways what we're going to do here is type D Jango or actually sorry we're going to type Python 3 manage.py and then start app and then we're going to give this app a name now in my case I'm just going to call this main because it will be the main application now if you're on windows again you can just change this to python you'll notice the main difference here is from Mac to Windows or Linux to Windows you have Python 3 in mac and Linux and you have python on windows so when I do this we'll see that a new folder gets created called Main and it has some files in here for us so you can see it's just kind of templating it out and building out all the different things that we need from here I can clear this and I can close the terminal and now we can actually start writing some code and setting up our D Jango project so now that we've created this main application the next thing we need to do is go and Link it to our Jango project so we're going to go into the portfolio directory we're going to go into our settings.py and we're going to make our write a few settings here uh that we need for our project so the first thing I'm going to do is is I'm going to import OS which stands for operating system we're going to use this in 1 second and let's just close this terminal and we're going to scroll down to where it says installed apps now notice we just created an App so what we need to do is actually add the name of this application into installed apps so that we link it to the Jango project so to do that we simply create a new entry here in this list called main because that's the name of the app that we created if you named the app something else then you would change this name okay now we're going to scroll all all the way down to the bottom of settings and just because we're here we're going to write some settings that we'll need uh later in this video now what we're going to be doing is uploading some images and these images will be for our projects now we need a place to store those images on the kind of Jango server so to do that we're going to define the following in all capitals we're going to say mediacore URL and notice I'm doing this at the very end of the file is equal to and then this is going to be slash media this time lower case and then slash now this is a directory where we're going to store all of the different media files in this case we're going to store it on our local computer because that's where we're running the Jango application but if we were running this Jango app on some kind of server and it was deployed it would store in this media location we're then going to say the mediacore root this is where the media folder is actually stored is going to be equal to os. path. jooy sorry for the autocomplete there blocking us and we're going to use the the base directory which is already defined we don't need to Define this it already exists inside of this file and then we're simply going to say media like that so this is the URL so this is where we should go to access the media files and this is the actual location of it uh on our Jango server okay so now that we have the media URL and the media rout and we've added our application here into our installed apps we are done with settings.py now what we can do is go inside of main now I want to quickly walk you through what we actually need to do here what we're going to do is we're going to create some database entries or database models for storing our different projects the idea here is rather than hardcoding the projects in what we'll do is we'll create a database field or a database kind of model and we'll allow ourselves to dynamically add projects or to edit them or modify them later on this way this can be kind of a living website and as you create new projects you can update the site by adding new projects to the database now in order to do that we need to create some models now in Jango I'm going to go in this models.py file by the way we use something called an OM now in orm is an object relational mapping now what this means is that rather than writing all of this custom SQL code or database logic we simply write some python code and then Jango will map that python code to the appropriate database operation so what you're going to see here is we're going to Define in Python what we want the data that we're going to store for our projects to look like and then python will will automatically handle adding that to the database getting it from the database updating it doing all of that tough stuff that we don't want to deal with so what we're going to start by doing is going into models St high and we're going to define a class which is known as a Jango model so I'm going to say class and then I'm going to call this project now we're going to have a few different models here but the first model is going to represent a coding project right so what we're going to do is we're going to say that this is models. model so we're inheriting from that base model and then inside of here we're going to Define all of the fields that we want to have for a project now the first field that we want to have is a title so we're going to say title is equal to models. the character field and then we're going to give this a max length of 200 characters the next field that we want to have is a description now the description is going to be models. text field and this is not going to have any maximum length we'll just write it like this next we're going to have some tags now we'll write this more in a second but for now we're going to say this is models. many to many field and we're just we'll fill this in for now we're going to say tag and then related uncore name is equal to projects I know that we haven't yet defined this tag model we're going to do that in one sec but the idea is for each of our projects we'll have some tags so something like python JavaScript CSS a game a web app and we'll be able to identify our projects based on their tags so we can kind of filter by those tags now a tag will be a different model that we're going to create in a second and we'll make an association or a relationship between the project and between the tag again let's wait a second and we'll look at that next we're going to have a link the link is where we have the GitHub or maybe the live project running so we'll say this is going to be models. URL field because this will be a link and we're going to say the maxcore length will be equal to 200 and we'll say blank equals true which means it's okay if we don't have a link for the project lastly we're going to implement a string method and this is what will happen or this is what we'll show when we print out this model it's going to take in self and we're going to return the self. tile of the project you don't need to write this but it's good practice okay so now that we have the project model written we're going to write the tag model so let's do that and then I can explain better what this line is doing so we're going to say class tag and then inside here this is going to be models. model and then for our tag we're simply going to have a name and this will be the models I think I spelled that correctly do charfield and this will be maximum length of 100 and we'll say unique equals true now when we pass that key it means we can only have unique names so we can't have duplicated tags which is exactly what we want we're then going to have a string again and inside here we're just going to return self. name of the tag okay now we need to make sure that we Define the the tag above our project so let's just copy that and paste so that when we try to reference the tag here it's already been defined okay so let's talk about this many to many field now whenever we create different database models we have the ability to relate them together so in this case we have a project and this project will be related to some kind of tags now the way that we do these relationships or there's kind of three different types of relationships we can have a onetoone relationship so one project is associated with one typ tag we could have a one to many relationship where one project is associated with many tags or we can have a many to many relationship where many projects can be associated with many tags now in this case that's the most appropriate type of relationship which is why we write it this way many to many meaning this tag can exist on many different projects and this project can have many different tags now what we do is we specify the model that we want the relationship to be with and then we have a related name now the related name is the field name on this tag that will contain all of the projects so effectively what's going to happen is for each of our projects we're going to have a linkage to the tag and for each of our tags we're going to have a link to all of the different projects that that tag exists on that's kind of how many to many Field Works uh there's other types of relationships as well and in fact we're going to look at one in just a second okay so hopefully that's clear but that's how we relate these fields together and this allows us to create as many tags as we want that are unique and then associate them with as many projects as we want okay now lastly we need an image so we're going to say Project image and this is going to be models. model and then we're going to specify the project that this image exists for so this is going to be a models. 4 in key and we're going to say that we have a project we have the related name equal to images and then we're going to say onore delete I'm going to explain all of this in one second don't worry we're going to have models. Cascade and then let me save that just so that we get some formatting next we're going to have image is equal to the models. image field now for this we're going to say upload2 and then we're going to give this a directory name so I'm going to call this project images and then slash and then lastly I'm going to say Define uncore uncore string self and then return and we're going to return an F string here and we're going to embed the self. project. tile and then image okay so let's quickly talk about what we just did here the idea is that for each project we're going to have multiple different images now if we just had one image I could have just taken this field and uploaded it or put it right on my project but since we can have multiple images or no images we don't know how many we're going to have we need to make a new model that will store images for our individual project that way we can have multiple of them linked to the project now the first thing we need to do for each of our images is we need to understand what project they're associated with now unlike our tags one project image won't exist for multiple different projects it's just one project image exists for one project right so this project can have multiple images but this image can only be associated with one project so in that case we use the foreign key now what this means is that we always have a single project for our individual images now I know I've repeated that like five times but I'm just trying to be specific here and what we do is we specify that we're going to have a forign key with the project model and then the related name is the field that will exist on this project that stores all of the different images so on my project I'll be able to access images and it will give me all of these different image models now what on delete specifies that if this project that we're linked to were to be deleted we should delete all of the images that's what the Cascade means okay which means delete all of the different images that are associated with the project if that project is to be deleted there's some other options here as well but this is the one that we're going to use lastly we have the image field and this is just specifying where we actually want to store the images within our media directory then we have the string and we're good to go okay so those are all of our models now the next thing that I want to do is I just want to create a directory inside of my portfolio directory so this main one here called media now the reason we need that is because we specified that inside of settings.py as where we're going to store the images so we need to make sure that directory actually exists then inside of media will have a project images directory that will be created when we start uploading images okay so we're going to run the code shortly but the next thing we need to do is make it so that these different models appear in what's known as the admin page now the admin page or the admin portal is something that's provided by D Jango to allow us to automatically manage our different models so we can go in there and we can create different tags we can create different projects Etc the thing is though we do need to manually add these different models to the admin page that we can see them there so how do we do that well we're going to go back inside of Main and we're going to go to admin.py now notice it says that we need to register our models here so what we're going to do is import our models from the models file that we just created so we're going to say from Models import and then we're going to import the tag the project and the project image and we're going to register them now we can just register them like this by default but since we have um some more complex models here we have some links between tags projects Etc let me zoom in here what we're going to do is we're going to write a kind of custom registration now what the custom registration means is that we can specify the different fields that we want to have and how we want to view these different projects so let's start by doing the project uh what do you call it kind of admin view sorry just stumbling here all right class project admin and then we're going to say this is admin. model admin and inside of here we're going to specify a few different fields and these fields again will customize how this looks inside of the admin uh kind of panel so we're going to say listor display is equal to and then notice that this is a tuple here so we're using uh normal parenthesis and then we're going to do title and then link now what this means is that when we're viewing a list of all of the different projects it's going to show us in that list the title and the link for that project we could change the fields that we want but this is what it's going to display next we're going to say inlines is equal to a list we're going to Define that in just one second and then we're going to say search fields are equal to and again in a tupple we're going to do the title and then this time we're going to do the description now this is specifying how we're able to actually search for this project so we can search based on the title or we can search based on the description because there is like a search box in the admin panel and we specify What fields we're going to be searching on lastly we're going to have list filter and this is going to be equal to and then we're going to do tags and then make sure you have this trailing comma the reason you need the trailing comma is because if you just put parentheses like here you'll see when I save they go away so I need this comma to make sure that this is treated it as a tupple because that's the object type that is expected here okay now the list filter this is how we can actually filter different objects so we can filter them based on tags so yes we can search by the title or the description but in this case it will show us all of the tags and allow us to click a tag and any project that contains that tag it will show us so just a nice way for us to be able to filter this okay then we have in lines now what I'm going to do is to find something that will be displayed in line and the reason why we need this is because we're going to have other models that are associated with this project and we want to edit them at the same time rather than editing them separ separately so you'll see what I mean in a second but I'm going to say class and then this is going to be Project image in line and then this is going to be admin. tabular inline and then we're going to say the model is equal to the Project image and we're going to say extra is equal to one now extra equal to one just specifies how many of these we're going to be displaying in line in this case we're going to display one which means by default we're asking the user to upload one image but we could be asking them to upload say four images or five images if we specified it like that okay now inside of inlines we're going to say Project image in line and again what this is going to do for us is it's now going to display this that we've just defined which is really A View to be able to upload an image while we are creating these different projects okay lastly we're going to Define our tag admin and this is going to be admin. model ad admin this one will be a little bit easier we're going to say list display and this is going to be equal to Simply name and then we're going to have our search uncore fields and this will just be equal to name again remember that trailing comma so just how we list it and how we search for it and now that we've created these what we can do is we can register them so to register them here what we're going to do is admin. site. register we're going to start with the tag and then the tag admin so what we're saying is hey for this tag model we want to use this tag admin class as its customization we're then going to say admin. site. register and we're going to register the project and the project admin as its customization and then lastly we're just going to register the Project image so we're going to say admin. site. register and then this one is going to be the Project image and this time we don't need any customization the inline was used to be displayed inside of the project admin but for the Project image itself we don't have any customized class we'll just render this okay we are almost done now what we need to do is start actually running the server we need to make some migrations which I'll talk about in a second and then we can sign into the admin panel and we can see what we actually just coded out so let's go up to our terminal here and what we're going to do is start by applying some migrations now whenever we make changes to our different models what we need to do is we need to make migrations and then we need to apply them now making migrations will create some files inside of D jeno in this migrations directory which you can see here which will specify the changes that need to be applied to the underlying database in order for the changes that we made to actually be applied once that file is created then we need to apply those migrations by running the secondary command so pretty much whenever you make any changes you're going to run both of these commands in sequence if you are affecting your models okay so we're going to type Python 3 manage.py and then make migrations now you're going to see when I do this that it will specify that we've created the following migrations making a new model project tag and Project image now we're going to say migrate okay so you'll notice when I do that that inside of migrations we get those migrations files and now when I click on Migrate what will happen is it will actually apply these different migrations and up the database and you'll see now that we have a db. sqlite3 database that's been created and now it has the provision for those different tables or for those models that we've made okay now what we need to do is create something known as a super user a super user is something that can sign into the admin portal and actually modify these different um what do you call it models that we've created or add new projects for example so to do that we're going to type Python 3 manage.py and then this is going to be create super user uh it's either make super user or create super user I think it's create super user and then we can give this a name I'll just go with Tim and okay never mind let's just run it without a name and you can see okay leave it blank if you want to be Tim Rea I'll just call this Tim you don't need an email address but you do need a password okay so type in some username and some password it's then going to create a super user for you once you've created the super user now we can run the server and sign in to the admin portal so to do that we're going to type Python 3 manage.py run server this will now run the server for us and you'll see that it shows us the URL that it's running on 127.0.0.1 Port 8000 what you can do is hit control on your keyboard and then click on this link you'll see it's underlining when I do that and then it will open this up in a new browser okay so you see it's going to open this up for me and it says the install Works successfully okay no problem uh and now we're going to do is go to the slash admin page perfect so when I do that you see that it brings me here again when you're on this page you're going to go slash admin and now we can sign in with the super user that we just created this is all built by jeno we didn't code any of this we've just added our models to this page okay so I just logged in here and you can see now that we can first manage groups and users we don't need to worry about that at least for this project and then we have project images projects and tags so what we can do is start creating a new project to do that I can go to add and you'll see here that I have all of the different things that I specified so my title description tags link and then the ability to upload an image so let's go ahead and make a sample project just to test this out for me I'm going to say python platformer I'll say this is a python platformer game made in Python with pame exclamation point for the tags if you click on this plus button you can make some new ones so I'm just going to make some new tags I'll say that we have python maybe we have game maybe we have CSS react I'm just making a bunch of random tags you can make whatever ones you want let's have JavaScript obviously ones that are going to be relevant to your projects and then what we need to do is actually select the tags so you can just click on one and it'll be selected but if you want to select multiple then you can hit control or command on your keyboard and select multiple of them so I'm going to do Python and then I'm going to hit on game and you'll see now that two of two of them are selected for the link we could put that in uh actually let's see which one might be here already python platformer okay perfect it already has that for me and then we can upload an image so let me actually go ahead and do that I have one on my desktop and now we can go on click on Save okay so now I've saved it and notice that in my list view here I have my title and I have my link for the project and I could actually filter it by the different tags which is what it's showing me right here and then I could search for a project if I wanted to do that okay so I think that's good for now we've made one project obviously we want to make multiple of them but for now we're just testing out to make sure the site is working now what we want to do is start creating some views so we can actually view these projects on the website and have a nice looking portfolio website so let me get out of that and let's turn off our server for now by just hitting control C on our keyboard and then clearing Okay so we've made the models we have cre cre a new project from the admin dashboard now what we need to do is actually display all of this information on the site now in order to do that there's a few setup steps so the first thing that we're going to do here is we're going to go inside of Main and we're going to make some new folders we're going to create a templates directory and we're going to create another new directory here called Static okay both of these are inside of the main directory now inside of templates this is where we're going to place HTML templates that we can pass data to from from uh dangoor and render kind of dynamic information now this will be kind of where we write all of our HTML and then inside of the static directory is where we're going to have our CSS and our JavaScript so inside of static I'm going to make a new directory called CSS and I'm going to make another new directory called JS and this is where we'll organize our JavaScript code and our CSS code the reason why we put this inside of static is because these are files that don't typically change and what will happen is will render them statically which is different than how we render the HTML you can look that up if you want some more information but for CSS JavaScript and images things that aren't frequently changing on your website you typically have them in some kind of static directory and they're loaded a bit differently than how we would load an HTML file okay now last thing we need to do we're going to make a new file inside of main called urls.py okay and this is where we're going to place some URLs um to kind of Link the different views that we create and inside of here we're going to say URL patterns is equal to an empty list we're going to write in that later but for now we'll just put it there so we don't get any errors okay so what did we just do we created the templates directory the static directory with CSS and JS and then we created the URL stop Pi file with URL patterns with an empty list make sure you've done that now main is set up and what we can start doing is actually rendering some content into our views so what we're going to do now is go to views .p now in Jango when we actually want to display a page we need to create something known as a view now a view is a function that will be called when we go to a specific rout a root is something like slash or slome or slash project with id1 we need to write all of those programmatically so what we're going to do here is we're going to start by importing our models so we're going to say from Models import the project and import the tag and then from render we're also going to import get object or 404 and I did not mean to do that this is what we wanted right here okay I'm going to remove this comment and I'm going to start writing a few different views so the first view we're going to write is the home view now inside of home we're going to take in the request which is what we always take in and we're going to say return render and we're going to render the request and then the home.html template that's it uh that's it for right now sorry what this is going to do is look inside of this templates directory for an HTML file called home.html it's then going to render that template for us which means it's just going to show the HTML on the screen let's define a few other views that we need we're going to have a contact view so this is going to say request and then same thing we're going to return a render of the request and then this is going to be the contact. HTML we're then going to say Define project and then this is going to take in a request and it's also going to take in an ID because we need to know the ID of the project we want to want to render sorry and then we're going to return a render and this case it's going to be request and then project. HTML okay so there's some more things that we need to write here but for now I just want to kind of stub the three different views that we need now what we're going to do is create some HTML templates that will represent these three different pages so it's very important that you put these inside of the templates directory inside of the main directory if you don't do that you're not going to be able to render this code so inside of templates we're going to make some files the first file is going to be base. HTML we're then going to have home.html we're then going to have contact. HTML and then lastly we are going to have project. HTML feel free to pause the video to create all of these different files okay now that we've created these different files we're going to go inside of base. HT ML and I'm going to start talking to you about something known as the Jinga templating engine now Jinga is what's known as a templating engine and what this allows us to do is dynamically render python like code inside of our HTML file so rather than having to write a ton of different JavaScript although we will write a little bit in just a second we're able to actually take variables in Python and display them inside of the HTML now what we can also do is we can create something known as a base template that can contain something like the main styling like the navbar components that are going to exist on all of our different pages and then we can render content inside of that template so we can have all these different HTML files that just have slight modifications to the base template you'll see what I mean in just a second but for now let's write this out now keep in mind all of this code is going to be available on GitHub some people do get lost because there is a lot of HTML that we're going to be writing here so for some reason this is not working for you I'm going too fast you're finding it overwhelming feel free just to go to the GitHub link below go right to this file and then just copy all of the code or at least view it side by side if you do want to write it out line by line okay so don't get too overwhelmed you can always find this from the link in the description so what I'm going to do now is type HTML colon 5 now if you have the HTML extension installed in vs code which I do recommend that you get you'll see that it will actually be able to generate a kind of boilerplate HTML document for us so when I hit enter here you'll see that it just creates this for me and now we can start filling in some of this content okay so we have our head we have our body we have our HTML and then we have a title now the first thing that I'm going to do here is create a new block so let's look at how we do this we're going to use our brace here and then we're going to have a percent sign a percent sign and then a closing brace inside of here we're going to call this block and then title and then I'm going to put the name here which is going to say port folio and then home and then I'm going to put a percent percent and then end block now a block is a piece of content that can be overridden from a child template so this is going to act as our base template we're never going to render this page but what we'll do is inherit it from other templates Like Home Project and contact and then these blocks that we've specified here we can override what exists inside of them so from contact home projects Etc we can override the temp template or sorry the title block and we can change what the title of the website will be okay that's the idea next we're going to specify a link and this link is going to be real equal to stylesheet and we're going to say href is equal to and then this is going to be percent percent and then static and then this is going to be inside of single brackets CSS sb. CSS okay so let's just quickly talk about this first of all notice we used double quotation marks here okay very important then what we do is we use this um kind of variable syntax so we have the brace the percent sign and then we say static now when I say static what that means is that I want to look inside of the static directory which is what we have to find and then inside of there I'm looking for the path CSS base. CSS notice that this is inside of single quotes and the reason it's in single quotes is because we use double quotes outside so if we put double quotes here we're going to get actually a linting error or not a linting error but it just it'll be an error when we try to execute this code so we need to use single quotes instead okay so what this is doing is loading the base. CSS stylesheet which I'm going to create now so what we're going to do is go into static CSS and then we're going to make a base. CSS okay this is where we can put any CSS that we want to apply to this page right here which is our base template okay now one more thing whenever you use the this static keyword here and you're loading from the static directory you need to first load the static directory now to do that you're going to go to the very top of your file and you're going to write the following percent percent and then load static okay what that will do is load the contents of the static directory so you're able to actually reference it here and view this base. CSS file okay now next thing we're going to do here is we're going to say percent percent block and then extra head and then we're going to say percent percent block or sorry end block like that and then extra head now I don't know actually if we need to specify that uh or not yes I think we do and then sorry up here where I have n block we're just going to say n block title because if you have multiple blocks you need to write them by name so we have block title and then end block title and then we have block extra head and then end block extra head now the reason I'm specifying a block here is that we may want to add extra stylesheets from our uh base or sorry child templates so we can do that by inheriting and overriding this block so we're just kind of specifying it here so that we're able to inject things into the head from contact home and project okay now we're going to go inside of our body now for body we're going to define a main component and inside of main we're just going to put a block we're going to say block content and then we're going to say percent per and then end block content this is where we're going to be able to put the main content this is where we'll render most of the code or most of the HTML from the child templates then what we're going to do is have another block down here and we're going to say block and this is going to be extraor JavaScript and then we're going to say percent percent and then end block extraor JS this is so we're able to actually throw some JavaScript into our code from our child templates cuz we want to put that at the very end of the body so we're making a special block for that last thing we want to do is we want to create create a header component here and the header is just going to act as a Navar that will exist on all of our different pages inside of the header we're going to put a ul and then we're going to say to end the UR UL sorry this is going to have a class equal to the navigation menu and then we're going to have an Li component or Li element let's make sure we end that properly and this is going to be a link and we're going to say this is href to slome and then we're going to call this home and we're going to say SL a like that and then we're going to copy this and paste it and rather than home we're going to go to contact and we're going to change that to say contact okay so now what we've done is we've created a basic navigation bar right where we have a nav menu and we have two elements home and contact that are links that we can click on and we have this base template that we'll use to kind of show the same content of the same overall styling for our entire website now what we need to do is actually override or implement this template in order to do that we're going to go to home.html now from home.html the first thing that we need to write is what template we're extending from or inheriting from so we're going to say that this extends and then we're going to say base. HTML then similar to before we're going to load static because we're going to need that here and what we can start doing is overriding our different blocks so now rather than writing and what happened here let's fix that so now rather than writing all this HTML again and copying all of it over here what we can do is just override the different blocks that we have so I can take my block content for example and I can paste that here and I can now write something like a paragraph tag and say this is the home page okay and now what I'm doing is I'm essentially injecting this HTML into this part of my template now we can do the same thing for our title so let's just copy that and change this to say block title and then title and we can just call this homepage or something and then if there's any other blocks that we wanted to inherit we could do that in this case I'm just going to leave it like this because I want to show you this actually working okay so now that we have the templates written or at least most of them we have the base template kind of finished and we have our views hooked up to actually render these different templates the last thing we need need to do is write our different URLs so we have the views we know what to render but we don't know how to actually get there so what we're going to do is write what's known as our URL patterns so I'm going to go to urls.py and we're going to start doing that so up here I'm going to say from Jango do URLs and we're going to import path and then we're going to say from dot import and then views and actually now that I look at it I don't even think we need this variable here but we do need to spell views correctly okay so from URL patterns or sorry we do need paths I'm being stupid okay paths and views from URL patterns we're going to write our different URL paths so the first path we're going to have is just the empty path meaning if you just go to slash it's going to go here and what we're going to do is render views. home and then we're going to give this a name we're going to say name is equal to home then we're going to have another path and we're going to say okay if you go to slome or sorry home slash important that you have the slash in the correct order here then we're going to render views. home same thing this will be name home the reason why I'm doing this twice is that if we go to nothing I want to go to the homepage but if we go to home I also want to go to the homepage so I'm just having multiple different paths that go to the same view then we're going to have another path and this is going to be contact slash and this is going to be views. contact and then name equal to contact okay then we're going to have another path and this is going to be project but this time when I go to a project I need to actually know the ID of the project that I want to view because this will view an individual project for me so to do that I'm going to embed what's known as a path variable the path variable looks like this you specify the type then you specify the name and then you put your trailing slash so I'm saying okay I want to go to project and then some Dynamic variable so something like one 2 three whatever the ID of the project is and then I'm going to say this is views. Project name equal to project now you'll notice if we go to views. high that I've actually ridden that here right so when I have this path variable what will happen automatically is D Jango will pass that variable as an argument to the function that's rendering The View so here it will pass the ID and then we could use the ID to fetch that project and then display it which is what we're going to do later so now we have the URL patterns inside of urls.py however what we need to do is link URLs from our main Django project to this URLs file might seem a little bit weird but the idea is that we have this main URLs file let me get rid of this comment so we can actually read what's inside of here this file here specifies the root URLs for our project then what we can do is pass or forward the URL into a different app that we have in our jeno kind of application or project so let's look at how we do this well to do this here we're going to specify another path and I'm just going to put the empty path now this means if you don't go to anything so if you don't specify admin you don't do anything I'm going to take whatever else is included in this path and I'm going to pass it over to my main. URLs okay bear with me here for a second we're going to import include from this so the way that this um kind of works here is what I can do is I can specify something like main now if I do main slash here what this means is that whenever I see main slash whatever comes after the slash I'm going to pass it over to my main. url's file and then it's going to be handled from here so if it looks like this if I went to main slome then what would happen is I would trim off Main because I see that right here and I would take home and I would pass that to this URL patterns where would then be handled by this pattern here in my case since I'm not specifying anything we're just going to take whatever the URL is and we're going to pass it over to main. URLs where it can be handled there the only exception is if you go to admin since this is written first then we're going to go to the admin site URLs which is exactly what we want okay so that's it for that however we do need to write something else in here to be able to access the different images that are going to be on our folder or on our uh server sorry so we're going to say from Jango docon Dot and this is going to be URLs do static we're going to import static and make sure we spell URLs correctly we're then going to say from Jango docon import settings now what we're going to do is we're going to add a plus here to our URL patterns and we're just going to add a pattern that allows us to actually access the images that are stored inside of this media directory so we're going to say plus static and then this is going to be settings dot the mediacore URL which is what we defined previously and we're going to say the documentor root is equal to the settings. medore root okay so what this is pretty much saying is Hey whenever we go to this/ Media URL we're going to go look inside of the media root and that's going to contain the image that we're searching for might seem a bit weird but that's kind of what we've been setting up this whole time so we can add this line right here and have a URL pattern that allows us to view that image and kind of host the image on our server okay so now we have all of our URLs configured it's possible I made a mistake but let's go and run our server again so Python 3 manage.py run server and let's just see if we're able to render the homepage then we can start actually displaying some content on it so I'm going to view this and notice that we have home and contact and says this is the homepage and if I go to contact we just get this because well there's nothing on the contact page and if I go to home it brings us to this same page I know it seems really basic but we're now well on our way to actually writing a goodlooking port portfolio website so we've got the URLs working we are able to go to the homepage we're able to load this static CSS file you can see all of the different URLs that we've gone to down here we can now close this out with contrl C clear close the terminal and start writing some more HTML code to kind of render this content on the screen and start really getting towards the end of the project okay so let's go to home.html and let's start writing some content inside of here to actually render the different project that we have then we can work on the contact and the project page all right so from our home.html let's continue by actually overriding a few other blocks that we're going to need so we have the extending we're loading static and we're overriding title and content but I also want to override my extra head and my extra JS block so I'm going to say block extra head and then percent percent and then end block extra head okay I'm then going to copy this and I'm going to put this down here here and we're going to do the extra underscorejs and extraor JS now what I'm going to do now just to save us a bit of time for later is I'm going to link to the stylesheet that we'll have for this page and I'm going to link to the Javascript file for this page because I did say we're going to have some JavaScript in this project we will we're going to use that to dynamically display different content on the page so let's go to base. HTML and let's just copy the link to this stylesheet and let's take it and paste it here now I'm just going to change from base. HTML to home. CSS sorry and I completely butchered saying that but I mean let's change from base. CSS to home. CSS and now let's make a home. CSS file that we can place some CSS in later okay now we need to uh write the code for our JavaScript link so let's do that so we're going to have a script tag here and for the script we need to make sure we end the script and then this is going to say source is equal to and we are going to have percent percent same thing as before we're going to load static it with single quotes JS and then home.js like that make sure we have our space and now we can make a new file and call this home.js where we'll write the JavaScript to handle the dynamic filtering and uh rendering of different content great now I'm just going to format this so that it looks a little bit better perfect and what I'm going to do is I'm going to take all of this code and I'm going to Cy it into project. HTML and I'm going to copy it into contact. HTML we're just going to make some very slight changes here because for all of these Pages we're also going to need some JavaScript and some CSS so for contact we actually don't need the JavaScript sorry so I'm going to remove that and I'm going to go uh to where it says cssh home. CSS I'm going to change this to contact. CSS and we'll just change this to say contact page and then we'll say this is the contact contact page okay now we'll go to project for project we're just going to say project page we'll change the CSS to say project. CSS and then what else do we need to do we just say this is the project page and then we're going to load the project. JS uh because we are going to need some of that okay so that should be it for these other Pages for project and contact I just figured we might as well do that and then sorry while we're at it let's go to CSS here and let's make those files so project. CSS and we will load the contact do CSS and then we'll have Js and this will be the project. JS just that all our files are linked and created and we're not going to forget those later on okay so great let's close all that and let's go back into home and now let's start writing the code that we need so the idea is in the homepage we want to have all of the different projects and we want to display them now what that means is that we need to pass the projects to this page and then we need to render them dynamically on the screen now we also want to display the different tags on the screen and these tags will allow us to filter the different projects so we need two things here we need the tags and we need the projects so what we need to do is pass them in and to pass them in we're going to have to go to our views.py file now from our views.py file we're going to go to the home View and we're going to write some very simple code that will just get all of the different projects and we we'll get all of the different tags and we'll pass them into the template so that we can access them so to do that we're going to start by saying projects are equal to the project doobs doall now what this does is just give us access to all of the different projects that we've created that's it and that's why using the omm the object relational mapper from D Jango is so nice next we're going to get access to all the tags so we're going to say tags is equal to tag doobs doall okay perfect and now what we can do is pass a dictionary and the dictionary will contain key value pairs that we can pass into the template that we can use to render different Dynamic data so I'm going to have a key for projects and you guessed it that's going to be associated with my projects and then I'll have one for tags and that will be associated with my tags okay so that's how we render this Dynamic data and we pass it into the template now what will happen is in the home.html template we have access to the variable projects which will contain a list of all of our projects and to the variable tags which will contain a list of all of our tags so now let's go into home.html and let's start using these different variables that we've passed in so the first thing we'll do is render our different tags so inside of the block content we're going to create a div let's end the div here and inside the div I'm going to make a class and let's call this equal to filters okay so we'll start by writing the fil filters which will be a kind of search text filter and then all of the different tags that we can click on that will then show a different project so we're going to show an input for the input we're going to say type is equal to text and then we're going to say ID is equal to the name search and then we're going to say the placeholder is equal to and this is going to be search by name dot dot dot you can change this if you want this is what I'll use for now next we're going to have a div and this div will display all of our tags again if you're getting overwhelmed you can copy this from the GitHub I'm going to say the class is equal to the tags list then inside the div I'm going to use a for Loop and I'm going to render all of my different tags so this is where the templating comes in I'm going to say for tag in tags the only reason I can do this is because I've passed this tags variable into the template from My Views file and then I'm going to do a percent percent and I'm going to end my for Loop now inside of the for loop I can put something here that I want to be rendered every iteration of the for Loop and what do I want that to be well I want that to be my tag so I'm going to say button and we'll close the button and then the name of the button is going to be and we're going to have a set of double braces here this is how we actually grab a variable and render it inside of the template and I'm going to say tag. name so whenever I actually want to display one of my python variables in the HTML I can use these two braces like this okay so that's going to be the name of my button and then the class is going to be a tag because we're going to style this later and then we're going to have the data tag so what's actually um sorry what we're actually accessing when we click on this button and then same thing we're going to use our double brace and we're going to say this is tag. name and then we're going to put a pipe and we're going to put lower now what this is is I believe it's called a Content filter uh there might be a more specific name for a but pretty much what this will do is just convert the tag. name to lowercase the reason for that is so that when we do the filtering we don't have any issues with capitalization and any tags that have the same value even if it's different capitalization will show up so that's what we're doing there data tag tag. name and then we're piping it or filtering it to be lower and that's how we're displaying our buttons let me just move this over here so we can see everything okay so you know what before I go too much further let's run this and see if we get all of our different tags appearing on the screen so I'm going to go Python 3 manage.py let's open this up and notice we have python game CSS react and JavaScript so the different tags we added from the admin panel as well as the search bar are appearing on the screen fantastic now we're going to style this at the very end so don't worry about how it looks for now okay so now that we've done that let's just close this we can leave it running for right now and let's make another div this time to display the projects so we're going to make a div we're going to say the class on this one is the project projects list make sure you type all of these classes by the way because I have a bunch of CSS that will perform this styling for you but you need to make sure you have the classes and the IDS correct okay so now same thing as before we're going to write a for Loop to Loop through all of the projects that we have so we're going to say for project in projects and then we're going to say percent percent end for okay and then inside of here what do we want to do we're going to have a div okay the div is going to have a class this is going to be a project it's going to have a data name we're going to need this for the JavaScript filtering so similar to before we're going to do that this is the project. tile and then we're going to pipe this again over into lowercase inside of the div here we're going to have something else sorry so for the data name we're also going to have the data tag and then here for the tags we're going to have project. tags doall and then again we're going to use one of these filters and we're going to say joyan colon single quotes comma space colon lower okay I know that was a lot let me see if I can format this so that we can read it a little bit easier let's zoom out okay so we have a div class project data name is project. tile and then we're converting that to lowercase then we have our data tags and this is our project. tags. all this gives us all of the different tags notice it's not quite python syntax but it's very similar to what it would be then what we do is we apply the join on this now what we're doing is we're joining these with commas so that we get kind of like the string join of all of these and then we're converting all of those to lowercase okay then inside of the div what I'm going to do is I'm going to display the name of the project so I'm going to say H2 and let's close the H2 and this is going to be a link and we're going to say a href and then inside of here the href is going to be 2% percent and this is the URL and then in single quotes project and then the project. and then what we're going to have is the project. title like that okay that's for our h2 tag we also need to close the a tag so let's do that now beneath that we're going to display the description of the project so we're going to say project. description and then close the P tag if we can type that correctly and then we're going to have the tags so now we're going to say tags colon and what we can do is simply copy what we had up here so project. tags join but we won't apply the lower this time okay and then we need to make sure that we just put this inside of our double braces okay I believe that's going to be it for now I know that this looks fairly messy and it's kind of difficult to follow along with feel free to pause the video and type it out but the reason why we need these data names and data tags is so when we get into the Java script and we apply our filtering it's actually going to work and we can uh view these different divs that have these different tags okay so let's go back here and want to open up my browser okay I guess we're just going to have to do it from down here all right open this up and now you can see that we have our different tags so now working and we have our project so it says python platformer this is a link that I can click on okay we have our tags Python and game and then we have the description and if we had multiple different projects it would display all of the different projects for us perfect okay so now that we've done that what we probably want to do is start writing some JavaScript that can filter these different projects then we'll write the project page so we can view an individual project so let's go into our static JS and home.js where we're going to start writing that JavaScript all right so let's begin by having the following we're going to say documents. addevent listener and then for this we're going to say Dom content loaded we're going to have a function and the function is going to be all of the code that we write here now the point of this is that as soon as the Dom content is loaded and only then will we start executing this code that way we can actually find all of the elements that we're looking for so we're going to begin by looking for a few Target elements the first one is going to be our name search which is that input field where we can actually search for the name of a project now this is going to be document doget element by ID and the ID of this element is the name search field or the name search ID next we want to have all of our tags so we're going to say this is document. query selector all and we want to select all of the elements that have the class. tag and then we want to get all of our projects so it's going to be projects equals document if we spell that correctly do query selector all and again same thing this is going to be project okay so the first filtering we can apply is based on the search field and then we can do the tags so we're going to make a function and we're going to call this filter and then projects now inside of filter projects the first thing we need to do is get the value of the name search field so we're going to say const name query is equal to the name search okay dot value and then this is do two lowercase okay so we're just converting that to lower case now what we're going to do is Loop through all of the projects that we have and we're going to see if the query that we searched for for is in the project name if it is we'll leave it there otherwise we'll remove it so we're going to say projects. for each and then inside of here we're going to have a project okay we're going to have an arrow function and we're going to say the name is equal to project. getet attribute and we're going to get the data name attribute from our project so that is why we had to write the dat name and the data tags attribute so we can actually access it and see if this project matches the filter then we're going to have const name match is equal to name. includes and we're going to see if it includes the name query so we're just searching for a string inside of another string if it does so if name match then what we'll do is say project. style not sure why I did that do display is equal to nothing other otherwise we'll copy this and we'll make it equal to none that's it so all this is doing here and we'll link this up in one second is we're searching through all the different projects we're looking at the name of that project and if the name query that we search for exists inside of that name then we're going to keep this project the way we'll keep it is by making sure the display property is just blank otherwise we set the display to none and that effectively is going to hide this element great now what we need to do though is we need to add an event listener for this uh function so we're going to say name search do add event listener and the event listener is going to be on key up so anytime you finish typing or lift your key up then we are going to uh call this function which is filter projects okay so that should work for now and then we need to do the one for the tags so what we'll do is go back here we will refresh and if I search something like hello world we can see that nothing is happening so what we can do is click on inspect right click on the wheel and click on empty cache and hard reload just to make sure we load the JavaScript and if I type something like hello world or python okay seems like it's still not working which tells me we probably have some kind of error let's go back and try again uh okay guys give me one second I'm going to look at this and see why this is not loading all right so I've made a very silly error here I've typed Sr for my script instead of Sr RC so it was never actually linking my JavaScript file hence why nothing was loading so I've just fixed that here on line 32 uh that was in my home.html file now I had some comments in here just to test this out so let's remove those comments for now and let's go back here and refresh and start typing and we can see now that we get a different error it says HTML input element filter projects uh issue reading to lowercase okay let's have a look at that and see what that issue is okay another silly error here for some reason my autocomplete would have replaced value with area value Max which is not what I wanted so let's make sure that says value I'm sure you guys probably caught that when that happened and let's go back here and refresh and type something like test and you can see now that it goes away because it doesn't match the filter where's if I type python platformer it's still there until I type something that doesn't exist in the string okay so it is correctly filtering through our elements obviously if we had more of them it'd be easier to test it but you can see this is indeed working in the job JavaScript for that is good so next thing we need to do now is filter based on our tags so let's start writing the JavaScript code that can do that so what I can do here is let's just move this down and move this over so we have some more space I can write tags. for each because we need to Loop through all of our tags here we're going to grab the tag and what we're going to do is add an event listener for every single one of our tags so we're going to say tag. addevent listener the event listener will be if we click on the tag if we do we're going to call a function and that function will be the following first we're going to say const selected tag is equal to this.get attribute and we're going to get the attribute data tag okay that's what we've put on the tag that tells us the name of the tag then after we do that we're going to say projects. for each and we're going to say project and then we'll write our Arrow function and inside of here we're going to say const project tags is equal to project. get attribute and we're going to get the attribute of you guessed it data tags that really annoying one that we wrote out now we need to see if the project tags do includes the selected tag so that's what we're doing if it does include the selected tag then we're going to say project. style. display is equal to an empty string otherwise we will say project. style. display is equal to none okay that's it that's all we need so we're doing the same thing effectively that we did here when we're hiding or showing the element but this time we're just doing it for all of the different tags and that's why we need this tag. event listener for each tag great so let's try this out now go back here refresh let's click on JavaScript you see that goes away because it doesn't match let's click on game you see it shows up because it does match obviously this is a pretty simple filter you might want to actually have multiple selectable tags and have maybe checkboxes or something but for now we're just making it so when you click on one it shows you all the projects that are in that category sweet so that's how that works for our uh kind of project page here filtering the projects now what we want to do is actually display the project on the project p on the project page sorry so let's go ahead and do that we're going to go over to our project. HTML we're going to move or remove all of this and we're going to go to views.py now and we're going to pass the individual project that we need to this project page now in order to do that we're just going to go inside of here we're going to say project is equal to get object or 404 and we're going to say that this is project and then primary key is equal to the ID that was pass here now all we'll do is we'll say project colon project and what we're doing is passing a now dictionary that contains this project so this is a helper function you can use in Django all this is going to do is look for a model that contains this key so in this case we're looking for the primary key which will be the ID that we've specified in this project model if it exists it will return it otherwise it will render a 404 page that's exactly what we want and then what we do here is we use this and we pass it to the template so now we have a project variable that contains the project information so now let's go back into project. HTML and let's write the code to display an individual project now first things first let's display the stylesheet which we're already doing okay good check now let's go into content and let's write all of the code that we need so let's write a div let's end the div for the div we're going to have a class and this is going to be the project cart then we're going to have a div and another div this is going to have a class this is going to be project info okay inside of the project info we're going to display well the info for the project so we're going to have an H1 tag and then for the H1 tag we're going to dynamic or render a dynamic variable which is going to be project. tile okay then we're going to have a paragraph tag let's end the paragraph tag and we're going to have an a tag end the a tag this is going to say the GitHub link or let's actually change this to project link for the href this is going to be equal to the project. link okay because we want to display the link to the project then we're going to have a paragraph tag and we're going to display the project description so project do description and then we're going to display the uh URL that allows us to go back to the homepage so we're going to say a href is equal to and this is going to be percent percent and then URL and then single quotes home so this will bring us back to the homepage and then we're just going to say back to home and then we'll end that link and then we're going to have another div that's going to display all of the different images so what we want to do is actually display these images in a carousel so that we can kind of swipe between them because we could have one image we could have five images right we could have multiple images so that's what I'm going to do here now this is where we'll need the JavaScript so that we can display the images and kind of change which ones we're rendering on the screen so we're going to have a div this is going to say class is equal to Carousel okay now let's go slash div then we're going to have another div and this is going to say class is equal to kousol das images okay let's end the div so I don't forget then we are going to display some images so we're going to say percent percent for image in project. images. all let's end the for Loop okay so percent percent end four now inside of here we're going to display some divs for each of our images so we're going to say class is equal to a carousel Dash and this will be item actually then we're going to do /d then we're going to display the image so we're going to say image and this can be a selfenclosed tag we're going to say the source is equal to the image. image. URL and then we're going to say the alt is equal to and this is actually just say Project image okay so that's almost it let's just format this so that it looks a little bit nicer and then inside of this Carousel div here we're just going to have two links that allow us to control the carousel so that we can go to the left and to the right so we're going to have a and this is going to say class is equal to the Carousel and then control and then this is going to say previous then we're going to say onclick is equal to and we're going to call a JavaScript function called move slide and we're going to move the slide Nega 1 because we're going left okay then we're going to close the a tag and then here we're going to put a special symbol I'm going to copy it in which will give us a carrot that is going to the left okay now we'll copy this and we'll paste it and we'll change this to say next and we'll change the move slide to say one and then rather than 94 this is going to be 95 so we get the carrot going to the right okay so that's all the HTML that we need for now none of this is really going to work because we haven't written the JavaScript but we can at least go to it and see what it looks like with a single image and then I want to create a another project that has multiple images so we can actually test this out when we write the JavaScript code so again let's apply a format here let's go and let's save and let's click on this and notice when I go here it shows me the image now you'll see that we have these carrots to the left and to the right we're going to style them so that they look nicer but when we click on these they should alternate the image but you can see that we have python platformer project link we have the text and then we have the image and if we had multiple images this would work okay so let's now go here let's add another image and then let's write the JavaScript that allows us to actually change the images around all right so let's go into project. JS and let's write the JavaScript code that can handle this for us now the basic idea here is we just want to um only show one of the images at a time so we'll do some CSS styling later that makes it look better but the point here is that we'll only show the image that's at the index that we're currently on so we're going to say let slide index equal 1 we're then going to say show slides with the slide index and we're going to call a function that we're going to write now so we're going to say function and then this is show slides and this is going to take in N which is our index now the point here is that all we're going to do is we're just going to hide all the images that aren't the current index and display the one that is so we're going to say let I we're going to say let slides equal document. getet Elements by class name name and this is going to be a care Soul item so all of our item divs we're going to get those and we're going to say if n is greater than the slides. length so the number of slides that we have then we're going to say that the slide index is equal to one okay this is just to make sure that we're going in a circular motion so as soon as n hits the number of images that we have we just go back to the first index we're now going to say if n is less than one then what we want to do is go circular in the other direction so we're going to say the slide index is equal to the slides. length so we go to the back whereas here we're going to the front all right then we're going to say four and actually we don't need to do the way I did here we'll just say four let I equal 0 I is less than slides. length and then i++ and we're going to say slides I do style. display is equal to none so this is just hiding all of the different slides that we have then we're going to say slides at the slide index minus1 do style. display is equal to flex and that just effectively is going to display this Force okay so that's really all we're doing We're looping through all the so we're getting all the slid story that we have we're checking kind of that circular motion with n to see if we need to go backwards if we need to go forwards then We're looping through all the slides we're making all of them hidden and we're just displaying the one that we're currently on last thing we need to do is make another function and this function will be move slide and this is going to take in n and then what we're going to do is say show slides and we're going to show the slide index plus equals n okay now could actually just do this like this we'll say slide index plus equals n and then we'll just display this so this way we can move by as many um what do you call it kind of elements as we want so we can move by one we can move by negative 1 2 3 whatever so first I'm just going to increment the slide index and then sorry I'm just going to display the slide index here I was going to do it in a fancy way there but I don't want to confuse anyone with that syntax okay so now we have the move slides function and from here you'll see that that's what we're calling right move slide and did I call it slides or slide okay slide good so this way we're going back negative 1 this way we're going forward one and then we're calling show slides and the reason we call this immediately is that we only show the starting slide perfect so let's try this out now I did actually add some more images to my python platformer so if I refresh and go here you can see that we're showing two images which actually makes it seem like this is not working so let's go here and refresh and ah we're probably running into the same eror we had before where we have scr this needs to be SRC okay let's refresh and now you see we only have one image and if I go here and click forward it shows the next image forward shows the next image right so I just have two now I remove the other one that we have and you can see that we can cycle between them obviously this looks really really bad though so we should apply some styling which is what I'm going to do now so that it looks a lot better all right so at this point all of the coding that I'm going to do in this video is actually finished and what we're going to do now is some styling now I really don't like just sitting in front of you and writing a bunch of CSS code I find that you're not really going to learn that much from it and I'm not a CSS expert most of the CSS I have I just find online where I kind of toy with quite a bit so what I'm going to do is just copy in all of the relevant CSS and I'll tell you where you can find it now you can feel free to restyle this website if you want you can change it around but again I just don't find a lot of value in me typing it in front of you so I'm just going to copy it in and show you what file it's supposed to go in so let's start by styling the page we just did so we're going to go to CSS and then project CSS now the way you would find the code that I'm about to copy in here is you would simply go and find this file from the GitHub link below so open up GitHub right go into portfolio go into main go into static go into CSS find project. CSS and if you're doing this with me just take the contents of that file and copy it inside of here which is exactly what I'm going to do feel free to read through all the code I'm not going to walk you through it in this video because this is not a CSS tutorial and now once we apply that if we go here and we refresh you might see that nothing happens now if nothing happens that means you should right click up here and click empty cache and hard reload once you do that what you'll see is that the styling will be applied and the reason why you need to do that is because sometimes um it doesn't uh actually load and it caches the previous CSS file so you need to empty the cache and hard reload in order for it to load properly now you're seeing some issue with the carrots here once we apply The Styling for the other Pages this should be fixed so let's go ahead and actually test that out otherwise I will fix this for you in the video Okay so we've done project. CSS now we're going to go into home. CSS and we're going to copy this in so go home. CSS and copy the contents of the home. CSS file and we're going to do base. CSS as well so I'm going to go to base. CSS okay and paste in that and then format it okay so let's go here and let's go empty cache and hard reload still looks like my carrots are not being fixed so I will I guess need to go fix those but you can see now that the nav bar is looking better and if I go to the homepage now everything looks quite a bit better we get these nice pretty cards and if I click here and apply the filtering it does actually work I can click on this and it brings me to this page now what I wanted is these carrots to actually be on the image so let me see if I can fix that for you and then I'll be right back so of course just another silly error here guys on my a tags I forgot to add Carousel control so I need to have the T because I spelled this incorrectly so of course they just weren't being picked up and styled so now if I go back here and I fix this you can see that now my carrots are actually on the image and we can scroll through them okay perfect so we go back to home and then obviously the contact page this is a page I wanted to leave for you guys to write yourself uh I just thought let's have a page let's link it up and then let's let you guys write this however you want and give you kind of some homework and something that you can continue to do okay so with that said I believe I'm going to going to wrap up the video here I hope you guys found this helpful and I hope this gave you a solid template for a portfolio resume or portfolio project in Python I know that this is pretty straightforward however this is a really good base this gets you started and now it's really easy for you to add additional pages to make the projects better to continue to style this obviously I don't really want to do a 10 or 12h hour long video to really build this out to the stage you'd want it to be at and in fact I shouldn't do that because you guys should really build these projects on your own once you get the base set up anyways I hope it helped you with that and I look forward to seeing you in another YouTube video
