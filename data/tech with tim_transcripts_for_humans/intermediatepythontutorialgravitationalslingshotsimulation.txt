With timestamps:

00:00 - in this video I'll show you how to write
00:01 - a Python program that simulates the
00:03 - gravitational slingshot effect now this
00:06 - is the effect that happens when
00:07 - spacecrafts get near planets what
00:09 - happens is they have an existing
00:11 - velocity and acceleration and then the
00:13 - gravitational pull of that planet
00:15 - depending on the mass and the distance
00:17 - actually makes it so they can kind of
00:18 - slingshot around the planet there's a
00:20 - lot of famous scenes in movies where
00:22 - they actually use this to their
00:23 - advantage and this is definitely
00:25 - something that is calculated by the
00:26 - spacecraft and all of the engineers
00:29 - really cool simulation
00:30 - doesn't take that long to build it's
00:32 - actually not overly complicated just a
00:33 - few very simple physics equations that I
00:35 - will break down for you and with that
00:37 - said let's dive into it after a quick
00:39 - word from our sponsor today I'm
00:42 - sponsoring my own video to tell you
00:43 - about my brand new software development
00:45 - course which is especially designed to
00:48 - help you land a job not only do we teach
00:50 - you all of the skills you need to be a
00:52 - great front end backend or devops
00:54 - engineer and you can pick which one you
00:56 - want to be we also connect you with a
00:58 - network of employers that are looking to
01:00 - hire you as soon as you graduate the
01:01 - course the reason they do that is
01:03 - because we run you through the best
01:05 - possible curriculum we test you every
01:07 - step of the way through proctored exams
01:09 - and final Capstone projects and we set
01:12 - up your resume we help you get interview
01:14 - ready and employers actually pay us to
01:16 - interview you because they know you're
01:18 - such great candidates this course is an
01:20 - absolute GameChanger I've been working
01:22 - on it for a very long time and what
01:24 - happens is you'll go through a software
01:25 - development fundamentals course taught
01:27 - by me and then you'll pick a
01:29 - specialization in front end backend or
01:31 - devops taught by an industry expert for
01:34 - example Kyle from webdev simplified is
01:36 - the frontend instructor and he has a
01:38 - fantastic course which will literally
01:40 - make you the top level candidate for any
01:42 - Junior front-end position this is a game
01:45 - changer I hope you guys like it and you
01:46 - can check it out from the link in the
01:48 - description all right so let's spend a
01:49 - second here breaking down exactly what's
01:51 - going on in this simulation and talking
01:53 - about the steps we need to take to
01:55 - actually code this out first of all all
01:57 - of the code for this will be available
01:59 - in the description so if you don't want
02:00 - to code it out feel free to just grab
02:02 - that from GitHub that will also include
02:04 - the different assets that I have here
02:05 - like the little planet and the space
02:08 - background now the way I've set this up
02:09 - is that we can click the mouse and kind
02:11 - of place an object and then we can
02:12 - choose the launch trajectory and the
02:15 - relative kind of velocity of that object
02:17 - so we can test this out from many
02:18 - different areas now you'll see that what
02:20 - ends up happening is if I kind of shoot
02:22 - in a straight line here not really close
02:24 - to the planet we get very minimal effect
02:26 - and we're pulled slightly to the right
02:28 - that's because we're kind of far away
02:30 - from the planet and the gravitational
02:31 - pole is not that strong however if I'm
02:34 - very close to the planet like this you
02:35 - can see that I almost immediately get
02:36 - launched right into the center of it and
02:39 - that's because the gravitational force
02:40 - is very high you probably learned this
02:42 - in something like a grade 10 physics
02:44 - class if you didn't don't worry I will
02:46 - break down the equations there fairly
02:48 - straightforward but what we need to do
02:49 - here is make it first of all so we can
02:51 - launch this little object that's going
02:53 - to be the first step launching it in
02:54 - some direction the Second Step will be
02:56 - adding this planet and then calculating
02:58 - the force that's being applied to our
03:00 - object as it moves around the planet and
03:03 - gets closer so that's what we need to do
03:05 - again that's going to involve being able
03:06 - to launch the object which we'll do
03:08 - first and then we need to actually
03:10 - adjust the object's velocity uh and its
03:12 - movement based on the location of the
03:14 - planet and the gravitational force this
03:16 - will be an intermediate Python tutorial
03:18 - not anything crazy complicated but I am
03:20 - going to assume that you have some
03:22 - understanding of python with that said
03:24 - let's go ahead and dive in all right so
03:26 - I've just cleared my file here and I'll
03:28 - just kind of start with the setup step
03:30 - so for this video we'll be using pame
03:32 - now pame is a 2d Graphics library in
03:34 - Python great for simple simulations like
03:37 - this if you want to learn more about it
03:38 - you can check out tons of videos on my
03:40 - channel don't worry if you don't know it
03:42 - though I'll explain everything you need
03:43 - in this video it's quite simple however
03:46 - the first thing we need to do is install
03:47 - py game to do that we'll open up a
03:49 - terminal like the one I have here in vs
03:51 - code and type pip install and then pame
03:55 - if you're on Mac or Linux you may need
03:57 - to do pip three install pame go ahead
03:59 - and run this it should install that
04:01 - package for you now many of you have
04:03 - issues with this pip command if that's
04:05 - the case I will leave two videos on the
04:06 - screen that will show you how to fix
04:07 - this for both Mac and Linux and to
04:09 - install pame on your system once we have
04:12 - pame installed that's pretty much all we
04:13 - need to do other than grabbing these two
04:15 - images here now you don't need to use
04:17 - the images but I'm going to recommend
04:18 - you do because it looks quite a bit
04:20 - nicer so you can grab these images by
04:22 - clicking the link in the description and
04:23 - downloading them it should bring you to
04:25 - my website which will just automatically
04:27 - download the files for you if you don't
04:28 - trust that link well obviously you can
04:30 - trust it but if for some reason you
04:31 - don't want to click it then you can just
04:33 - go to GitHub and you can download them
04:34 - from there all right so we have an empty
04:37 - python file here open in vs code we have
04:39 - pame installed and we're going to start
04:41 - writing some code first we're going to
04:43 - import the pame module and then we are
04:46 - going to import the math module we then
04:49 - going to go down here and initialize the
04:50 - pame package or module like that now
04:53 - what I like to do is start by setting up
04:55 - a bunch of constant variables that we'll
04:57 - be using throughout the program they may
04:58 - seem abstract right now but we'll be
05:00 - referring to them constantly as we go
05:02 - through the rest of the code so just
05:03 - give me a second here and let's code
05:04 - some of these out the first thing we
05:06 - need to do is Define the width and the
05:08 - height of our window so we'll say width
05:10 - comma height is equal to 800 comma 600
05:15 - now you can adjust this if you want but
05:16 - this is a pretty standard width and
05:18 - height that should work for pretty much
05:19 - all monitors and devices next we're
05:22 - going to set a window now the window is
05:24 - going to be where we draw all of the
05:26 - objects on P game now this is referred
05:28 - to as a surface but since this is the
05:30 - window surface I call it a window okay
05:33 - so we're going to say py game. display.
05:35 - setor mode and inside of here we're
05:38 - going to pass a tupple that contains the
05:41 - width and the height of our window okay
05:44 - so what we've just done here is
05:45 - initialized a new pame window where
05:47 - we'll be drawing all of our content that
05:49 - contains uh or sorry has a width of 800
05:52 - and has a height of 600 you can adjust
05:54 - those if you want next we'll just set a
05:56 - caption this is kind of like the title
05:58 - of the window
06:00 - and for the caption we can just say this
06:02 - is going to be a
06:03 - gravitational
06:05 - slingshot effect and it looks like I
06:08 - spelled all of those words quite
06:09 - incorrectly so we'll use my spell check
06:12 - here gravitational is that correct is
06:14 - that how you spell that um
06:17 - gravitational there you go I am
06:20 - apparently not very good at spelling
06:22 - okay there you go don't roast me in the
06:24 - comments too hard guys I'm better at
06:25 - coding than I am at spelling okay now
06:28 - that we have the display set up we'll
06:29 - set up a few constants for the different
06:31 - objects we'll be using a few colors some
06:33 - stuff like that and then we'll move on
06:34 - to actually creating the main Loop for
06:36 - our program so we're going to need to
06:38 - have a Mass for our objects because the
06:41 - gravitational effect is actually
06:42 - relative to both the distance and the
06:44 - mass so what we're going to set is first
06:46 - the mass of our planet I'm going to call
06:48 - this 100 and next we're going to set the
06:51 - mass of our ship now our ship is just
06:53 - going to be those little objects the
06:54 - kind of red dots right you can make an
06:56 - image if you want for them but I'm just
06:58 - going to go with the circle for now so
06:59 - we're going to say the mass of our ships
07:00 - is five we're going to set a
07:02 - gravitational constant this is
07:04 - essentially the force of gravity or the
07:06 - effect you're going to feel so if you
07:07 - want more gravity you would increase
07:09 - this if you want less you would decrease
07:10 - it and I'm just going to make this five
07:12 - for now we're then going to set an FPS
07:14 - this is the frames per second that our
07:16 - simulation is going to run at I'm going
07:18 - to run this at 60 if you want to speed
07:20 - it up you increase it if you want to
07:21 - slow it down you decrease this few more
07:24 - ones we're going to need here I'm going
07:25 - to say my Planet uncore size is going to
07:27 - be 50 so it's going to be the rate
07:29 - radius of my Planet uh we'll leave it as
07:31 - size for right now and then we're going
07:33 - to have an object size same thing radius
07:36 - of our object this will be five lastly
07:39 - we're going to have a scale for our
07:41 - velocity which is going to be equal to
07:42 - 100 you'll see why we need that in 1
07:44 - second okay so now we have these next
07:48 - thing we're going to do is just take
07:49 - these two images here and import them
07:51 - into P game so we're able to draw them I
07:53 - know a lot of set up right now but in a
07:55 - second we'll write some code that we'll
07:56 - use all of these variables so we're
07:58 - going to say BG standing for background
08:00 - is equal to py game. image. load now
08:03 - this how you load an image now if the
08:05 - image is in the same directory as your
08:07 - main python file what you'll do is
08:09 - simply write the name of the image so in
08:12 - this case it's going to be background.
08:14 - jpeg okay if you're using a different
08:16 - image make sure you put the
08:17 - corresponding file name here you can see
08:19 - I have background jpeg so that's why I'm
08:21 - calling this background. jpeg now if
08:23 - this was for some reason inside of some
08:25 - folder say I had something like images
08:26 - here and some images there I could write
08:29 - SLB background. jpeg or I can use
08:32 - something from the OS package which I'll
08:34 - quickly show you here which is path.
08:36 - jooin so if you want to join a directory
08:38 - with a file name you can do os. path.
08:41 - jooy the directory name and then the
08:44 - file name like this and it will create
08:46 - that path for you and allow you to load
08:48 - that image now if the image is not in
08:50 - the same directory as this uh file
08:53 - you're going to have difficulty loading
08:54 - it so I recommend just make sure all of
08:56 - your images are in the same root
08:57 - directory where this main python file is
09:00 - okay in this case it's just a directory
09:02 - on my desktop okay we loaded our
09:04 - background the next thing we need to do
09:06 - is load our planet image so I'm going to
09:07 - say planet is equal to py game. image.
09:10 - load and I'm going to load Jupiter which
09:13 - is this specific planet. PNG now the
09:16 - issue here though is that when I load
09:18 - these images you see they're quite large
09:20 - for example this background. jpeg is
09:22 - actually a 6000x 4,000 pixel image now
09:25 - that's going to be too large for us to
09:26 - display and it's going to look all
09:28 - distorted on our screen so what we're
09:30 - going to do is transform or change the
09:31 - resolution of the image uh we can do
09:34 - this to scale by knowing the aspect
09:36 - ratio or we can just set it to any scale
09:38 - that we want so what I'll do here is
09:40 - actually say py
09:42 - game.
09:44 - transform. scale and then I'm going to
09:46 - put the image first as my uh first
09:48 - argument and the second argument is
09:50 - going to be a tuple with the new desired
09:52 - size of this image now for this image
09:54 - I'm going to go with the size of 800x
09:56 - 600 or we should really use our variable
09:59 - variables here which is the width and
10:01 - the height that's because this is going
10:02 - to be our background image so I want my
10:04 - background image to be the same size as
10:07 - my window there you go next we're going
10:09 - to do the same for our planet so we'll
10:10 - copy this again P game. transform. scale
10:14 - first argument is the image second
10:17 - argument here is going to be the size
10:19 - that we want now we have our planet size
10:22 - here and this is representing the radius
10:24 - of our planet so what I'm going to do is
10:26 - say Planet
10:28 - size multiplied by two and then Planet
10:32 - size multiplied 2 now in case you
10:35 - haven't realized this by now uh the
10:36 - first is always the width the second is
10:38 - the height or the XY when we eventually
10:40 - get to that point okay now the reason
10:42 - I'm multiplying my Planet size by two is
10:45 - because this is meant to act as the
10:46 - radius so I would need to create the
10:49 - image to be double the size of the
10:50 - radius because that's kind of the
10:52 - diameter and the X and Y direction right
10:55 - hopefully that makes a bit of sense but
10:56 - that's why I'm doubling the planet size
10:58 - to two here for my Planet image perfect
11:02 - lastly we'll Define a few colors that we
11:03 - need so we're going to say white is
11:06 - equal to a tupple and this tupple will
11:08 - be 255 255 255 which is white this is an
11:12 - RGB color code right next is going to be
11:15 - red red is going to be 255 0 uh for RGB
11:20 - you have red first green and then blue
11:23 - if you have zero for the other ones and
11:25 - kind of some value here you're going to
11:26 - get some shade of red in this case it's
11:28 - the most red we can get because 255 is
11:31 - the maximum value for RGB zero is the
11:33 - minimum next we're going to have blue
11:36 - blue is going to be 0 0 255 fairly
11:40 - straightforward okay if you wanted black
11:41 - you would just have 0 0 0 no C at all
11:44 - when you want white you actually mix all
11:46 - of the colors together that gives you
11:47 - white in RGB okay so now we have all of
11:50 - our constants and all of our initial
11:51 - setup we can remove that OS module what
11:54 - we want to do now is just kind of see
11:55 - this pame window and be able to just
11:58 - interact with p game very simply before
12:00 - we start actually launching these
12:01 - objects around the screen so to do that
12:04 - we're going to create a function this
12:05 - function will be called main now what
12:07 - we'll do is just put pass in here for
12:09 - now and we'll go down to the bottom of
12:11 - the screen and set up kind of this
12:13 - initialization which will call the main
12:15 - function so we're going to say if
12:18 - underscore underscore this is two
12:19 - underscores here otherwise known as
12:21 - Dunder name is equal equal to main again
12:24 - two underscores main two underscores
12:27 - then we will call Main now what this
12:29 - line does right here is it only calls
12:31 - this function if we run this python file
12:33 - directly now that's opposed to if we
12:36 - were to import some code from this
12:38 - python file don't need to go through
12:40 - that a ton but you always want to have
12:42 - this kind of in the main line of your
12:43 - program and this will call some function
12:45 - or something that initializes the code
12:48 - again you do that because you only want
12:50 - this to run if this python file is ran
12:52 - directly not if code is imported from
12:55 - another python file okay so inside of
12:58 - Main here what we'll do is we'll create
13:00 - a w Loop now A W Loop will act as our
13:03 - game Loop whenever we're working in pame
13:05 - we need some Loop that's running
13:06 - infinitely that's checking for all of
13:08 - the different events and doing all of
13:10 - the rendering and drawing on the screen
13:12 - so what I like to do is create a
13:13 - variable here called running and make
13:16 - this equal to true and then I'm going to
13:18 - say while running like that and then
13:21 - inside of this while loop here is the
13:23 - main Loop which is kind of the event
13:24 - Loop and handles all of the stuff that
13:26 - might occur now what we need to do in
13:29 - our main Loop is we need to make a way
13:30 - to ex the loop right we don't want to
13:32 - have an infinite Loop so the way we can
13:34 - do that is we can write a for Loop here
13:36 - and we can say for event
13:38 - in py game. event. getet now what this
13:43 - is going to do here is Loop through all
13:45 - of the different events that are
13:46 - occurring from pame and then we can
13:48 - check the event and see if it's equal to
13:50 - a specific one like pressing a key
13:52 - pressing a mouse pressing the x button
13:54 - for example so I'm going to say if
13:57 - event. type is equal to pame Dot and
14:02 - this is going to be quit in all capitals
14:04 - then we're simply going to say running
14:06 - is equal to false okay so all this means
14:09 - here is if we exit out of the window so
14:12 - if the event. type is quit then we're
14:13 - going to set running equal to false
14:15 - that's going to exit out of our while
14:16 - loop and the last step we need down here
14:19 - is to say py game. quit Okay saying py
14:24 - game. quit story is just going to
14:25 - actually close that pame window for us
14:27 - so it will exit kind of cleanly return
14:31 - all right I know that was quite a bit of
14:32 - code but let's run the code right now
14:34 - and just check out what our window looks
14:35 - like and then we'll move on to some of
14:36 - the more fun stuff so I'm going to say
14:38 - Python main.py and you see that we get
14:40 - our gravitational slingshot effect I can
14:42 - hover over X when I click it it closes
14:45 - the window and we are good to go okay so
14:47 - let's clear go back to our code and
14:49 - start writing some more stuff so now
14:51 - what I would like to do is Implement a
14:53 - clock now a clock is going to
14:55 - essentially regulate this Loop and make
14:57 - sure it doesn't run too fast because
14:59 - right now the loop is going to run based
15:00 - on the clock speed of our computer if
15:02 - you have a really fast CPU it's going to
15:03 - run faster than if it's on a slower
15:05 - computer but we don't want that we want
15:07 - the simulation to be the same no matter
15:09 - what type of Hardware we're running on
15:11 - so we are going to set a clock we're
15:12 - going to say clock is equal to py game.
15:15 - time. clock notice this is above the W
15:18 - Loop and right at the top of the while
15:19 - loop here we'll say clock. tick and then
15:22 - we'll put the FPS which is the variable
15:24 - we defined right here now when we do
15:27 - this it essentially makes it this wall
15:29 - Loop can run at maximum 60 times per
15:32 - second or however much our FPS is right
15:34 - so in this case it's 60 could be 30
15:36 - could be less than that just regulates
15:38 - the speed of the loop okay great now
15:41 - that we have that I want to draw the
15:42 - background onto the screen so we get
15:44 - something a little bit more meaningful
15:46 - so there's a bunch of different ways to
15:47 - draw in P game but to draw an image we
15:50 - write the name of the window or the
15:52 - surface that we want to draw on in this
15:54 - case it's the window we write blit now
15:57 - blit I don't actually know what that
15:58 - that stands for just puts an image onto
16:00 - the screen so we're going to say wind.
16:01 - blit we're then going to put the name of
16:03 - the image asset which in this case is BG
16:06 - right because we have BG is equal to
16:07 - this and then we're going to do comma
16:10 - and we're going to put a tupple with the
16:11 - location of the top leftand corner where
16:14 - we want to display this object now in py
16:17 - game we use a 00 coordinate system top
16:21 - uh starting sorry at the top leftand
16:23 - corner of the screen that means 0 0 is
16:25 - the top left so imagine VSS code here is
16:27 - the pame window right where this kind of
16:29 - explore icon is and my mouse is at the
16:30 - top left that's 0 0 that means as I go
16:33 - down my y increases as I go to the right
16:36 - my X increases okay so for my image I
16:39 - want it to fill the entire screen so I'm
16:41 - going to draw this at 0 0 and that's
16:43 - where we will begin drawing the image
16:45 - starting at the top leand corner of the
16:47 - image and drawing down into the right
16:50 - hopefully that makes sense but this will
16:51 - draw the image now all we need to do is
16:54 - say py game. display. update now now the
16:58 - way that pame works is we essentially
17:01 - can paint or draw a bunch of things to
17:03 - the screen in any order that we want and
17:05 - as soon as we update it actually takes
17:07 - whatever is there and puts it onto the
17:09 - screen okay so we have to constantly
17:12 - update every time we want any of the
17:13 - drawing changes we made to appear That's
17:16 - so that we can do a bunch of drawing
17:18 - without rendering it first and we can
17:19 - render all of the drawing at once not
17:22 - sure if that makes sense to you but we
17:23 - would do all of the drawing operations
17:25 - then update all of the drw drawing
17:27 - operations sorry then update Etc okay so
17:30 - let's go and run our code and see if our
17:33 - beautiful background appears and we got
17:36 - an issue here it says py game. time has
17:38 - no attribute clock that is because clock
17:40 - needs a Capital C my apologies let's
17:43 - make that correction and run our code
17:46 - and notice that we get this Starry space
17:48 - background appearing looking great okay
17:51 - so let's exit out there now what we want
17:54 - is to be able to launch objects on the
17:56 - screen now there is a few ways to do
17:59 - this uh but we're going to go with well
18:01 - obviously my Approach now the way that
18:03 - we'll do this is we will say objects is
18:06 - equal to an array and this will be an
18:08 - array that stores all of our individual
18:10 - objects now really the process will be
18:14 - we press our Mouse down and that'll be
18:15 - the location we're going to start
18:17 - launching the object from then we need
18:19 - to determine the velocity and direction
18:21 - to launch the object in which will be
18:22 - another mouse press so it's two mouse
18:25 - presses to create the object that means
18:28 - we first need to determine okay what
18:30 - mode are we in right are we selecting
18:32 - the velocity or are we choosing the
18:33 - location of the object so we're going to
18:35 - Define a variable here called temp
18:38 - object position okay and this is going
18:40 - to be equal to none now this variable
18:42 - will store any object that we've placed
18:45 - onto the screen that we've not yet
18:47 - launched great so now what we need to do
18:51 - is go inside of our event Loop here and
18:53 - we're going to start by grabbing our
18:54 - Mouse position so we're going to say our
18:56 - Mouse position is equal to P game name
18:59 - mouse. getor pause this will give us the
19:02 - XY coordinate in a tle of the location
19:05 - of our Mouse now we want that because if
19:07 - we press onto the screen we're going to
19:10 - store that location in this variable so
19:12 - we now know where we're launching the
19:14 - object right so what I'll do is go
19:16 - inside of my event Loop and I'm going to
19:18 - check to see if someone has pressed the
19:19 - mouse down so I'll say if event. type is
19:24 - equal to pame Mouse button down that
19:27 - just means I pressed any of the mouse
19:29 - buttons doesn't matter left middle right
19:32 - then what I will do is say my temp
19:34 - object position is equal to and this
19:37 - will simply be the mouse position
19:39 - because that's where I pressed it now
19:41 - there is a few other things we need to
19:42 - do here but for now what we can do is we
19:45 - can go ahead and actually draw the
19:47 - location of the mouse or of this
19:49 - temporary object so we see it on the
19:51 - screen so what I'll do is after I blit
19:54 - so after I draw my background then I do
19:57 - all of my other drawing Okay the reason
19:59 - I draw my background first is this
20:00 - essentially draws over top of anything
20:03 - that was already on the screen so
20:05 - whenever you draw the background you're
20:06 - essentially clearing the screen by
20:08 - putting the background on top of it and
20:09 - then you can draw anything else on top
20:11 - of the background before you perform the
20:13 - update so what we'll do here is we'll
20:15 - check okay if the temp object position
20:18 - exists then what I want to do is
20:20 - actually draw this onto the screen so we
20:22 - can see it so I'll say pame do draw do
20:26 - Circle because we're just going to draw
20:27 - a circle for this we're going to draw
20:29 - this on the window which is the first
20:30 - argument to this function we're going to
20:33 - pass the color we want to draw in this
20:34 - case we want to draw red and then we're
20:36 - going to pass the location now the
20:38 - location of the middle of the circle
20:40 - which is what we're passing here that we
20:41 - want to draw is temp object position
20:43 - where we pressed our Mouse down right
20:45 - remember this is going to be a tupple
20:47 - containing the x and y coordinate so if
20:50 - we wanted to break it down here we could
20:51 - do something like 101 that would mean we
20:52 - draw it at 1010 but in this case we want
20:54 - to draw at the temporary object position
20:57 - next we need to pass the uh radius that
20:59 - we want to draw this object now the
21:00 - radius is going to be the objector size
21:04 - okay and that's it that's going to draw
21:05 - a circle for us if we have something to
21:08 - draw great so let's go ahead and test
21:11 - this code out
21:12 - now and see what we get and notice that
21:15 - as I press around the screen my DOT
21:17 - moves to wherever my mouse is and there
21:20 - we are okay all right so that is step
21:22 - one the next thing that we need to do
21:23 - now is calculate the velocity and the
21:25 - direction in which we want to launch
21:27 - this off object so what we now need to
21:29 - kind of check is okay if we're pressing
21:32 - down or if we have this object placed on
21:34 - the screen sorry we want to draw a line
21:37 - between our Mouse and the object so the
21:39 - user can see kind of the relative power
21:42 - they're going to be applying in the
21:43 - direction they're going to shoot the
21:44 - object so what we'll do is we'll
21:47 - actually go here and we'll say if the
21:49 - temp object position exists meaning if
21:51 - we've placed that first object we're
21:54 - going to draw a line between the object
21:56 - and the mouse so so we're going to say p
21:58 - game. draw. Circle or sorry not Circle
22:01 - what am I saying here
22:03 - doline we're going to pass the window
22:06 - we're going to pass the color which is
22:07 - going to be white and then we're going
22:08 - to pass the location of both sides of
22:11 - the line okay so the two points on the
22:13 - line that we want to draw between so
22:14 - we're going to pass the first position
22:16 - being the temporary object position and
22:19 - the second position being our Mouse
22:21 - position right and then we can pass a
22:24 - thickness of the line in this case we'll
22:26 - go with two pixels so now if we
22:29 - run let's bring this up here you'll see
22:32 - when I press down I get this line okay
22:36 - now I can change locations obviously by
22:38 - clicking but it's kind of showing me the
22:40 - uh the line around the object now that's
22:43 - coming from the center and if we didn't
22:44 - want to see it inside of the object we
22:46 - just change our drawing order so we go
22:50 - here and put the
22:52 - circle after the line and now notice
22:55 - that when I draw the line is kind of
22:57 - coming out of the circle Circle it's not
22:58 - on top of the circle which I think
22:59 - actually is probably going to be
23:01 - preferred okay that's great now that we
23:04 - have that what we actually need to do is
23:06 - on that second press we need to figure
23:08 - out all of those different components
23:10 - right okay what is the x velocity what
23:12 - is the Y velocity we need to start
23:14 - moving the object which is obviously a
23:16 - bit more complicated so what we're going
23:17 - to do now is set up a class and this
23:19 - class is going to represent our object
23:21 - or kind of our spacecraft this will be
23:23 - where a lot of the logic will lie for
23:25 - actually moving the object around and
23:26 - having that gravitational Force so we're
23:29 - going to say class spacecraft like this
23:32 - and instead of here we're going to do an
23:35 - initialization now for our spacecraft we
23:37 - need to know the starting X and Y
23:39 - position on the screen we need to know
23:41 - the Velocity in the X Direction and the
23:43 - Velocity in the y direction if you're
23:44 - unfamiliar with velocity that's just
23:46 - speed okay now whenever we have a 2d
23:48 - graphic system we have speed in two
23:50 - directions or two components the X
23:52 - Direction horizontal and the y direction
23:55 - vertical okay so we need to break it
23:56 - into those two components lastly we need
23:58 - the mass we'll use that when we actually
24:00 - apply or sorry calculate the
24:02 - gravitational force now we need to make
24:04 - these all attributes of the object we're
24:06 - going to say self.x equal to X self.y is
24:08 - equal to Y self.
24:10 - xcore Vel is equal to XV self. Yore Vel
24:16 - is equal to oh I put this in the other
24:19 - way okay yv or v
24:23 - x like that okay not sure why I wrote it
24:26 - that way but that fine and then we'll go
24:30 - self. mass is equal to mass and in fact
24:34 - this is actually going to frustrate me
24:35 - so let me change this to
24:39 - vorx and velore Y and there we go okay
24:44 - so that's everything we needed to
24:45 - initialize here for our spacecraft now
24:47 - all I'm going to do is I'm just going to
24:49 - write a draw method and the draw method
24:51 - will just draw this object on the screen
24:53 - in a second we'll start moving it but
24:54 - for now we'll just draw it so we're
24:55 - going to say Define draw
24:58 - and we're going to say self and we're
25:01 - going to actually that's it we don't
25:03 - need to take anything else in to draw
25:05 - we're going to say
25:06 - pame do draw do Circle we're going to
25:10 - draw this on the window now this is
25:12 - using a global variable not necessarily
25:14 - the best practice inside of a class but
25:16 - in this case that's fine and we're
25:18 - actually going to have the exact same
25:19 - thing that we had down here pretty much
25:21 - uh just up here so we're going to say wi
25:23 - red center of the circle is going to be
25:26 - self.x self
25:28 - Y and what else do we need to do here we
25:31 - need to pick the radius which will be
25:34 - the OBG uncore size like that so not OBG
25:39 - obj all right last thing I'm just going
25:41 - to round off these values here using the
25:44 - int function int is just going to strip
25:46 - any decimals we might have just because
25:48 - we'll be doing some calculations that
25:49 - could have some pretty large significant
25:51 - digits and I want to make sure that we
25:53 - don't get any errors trying to render
25:55 - floats here so instead we're just kind
25:57 - of drawing in not sure if you know what
25:59 - I mean there but if we had like a large
26:01 - floating point value that could mess
26:02 - with pi game so we're just going to
26:03 - convert these to int values by doing
26:05 - that okay so now we have our spacecraft
26:08 - so now the point is that we want to
26:09 - actually create a spacecraft object
26:12 - every time we kind of launch one of
26:14 - these objects so once we have our
26:16 - temporary object position right once
26:17 - we've set that we're actually going to
26:20 - check if temporary object position when
26:22 - we're pressing the mouse button down now
26:24 - if we already have a temporary object
26:26 - position that means we've already placed
26:28 - an object down so now instead of placing
26:30 - another one what we'll do is we'll
26:33 - actually launch this object so I'm just
26:35 - going to put an else here so to launch
26:37 - the object we need to figure out all of
26:39 - the things that we have for our
26:40 - spacecraft so the X Y and then the
26:43 - velocity and the X Direction velocity in
26:44 - the y direction and the mass well we
26:46 - know the mass but really these two are
26:48 - the ones we're looking for the Velocity
26:50 - in the X and the Velocity in the Y so
26:52 - what we can do for now at least is we
26:55 - can say that our TX tore y standing for
26:59 - temporary position X temporary position
27:01 - Y is equal to Temporary object position
27:04 - when I do that it will give me the X and
27:07 - the Y out of this tupple uh that's kind
27:09 - of a Shand in Python that you can use
27:11 - now what we'll do is we'll create an
27:13 - object so we'll say object is equal to
27:16 - and this will be a spacecraft instance
27:18 - for the spacecraft we're going to pass
27:20 - our TX and our Ty and for now we're
27:23 - going to pass 0 and zero for the X and Y
27:26 - velocity and then last last L here we're
27:27 - going to pass the mass which is going to
27:29 - be the object or the ship Mass sorry now
27:33 - we're just going to take this object and
27:35 - we're going to append it into objects
27:37 - we'll just get a little bit of the flow
27:40 - working here and then we'll deal with
27:41 - some of the more complex math which I
27:43 - think we should kind of do all at once
27:44 - so we're going to say objects. append
27:46 - object like that and now that this
27:48 - object is inside of this object's array
27:51 - what we'll do is we'll actually Loop
27:52 - through the objects array and draw all
27:54 - of the objects onto the screen
27:55 - eventually we'll be moving them as well
27:57 - but one step at a time so after this
28:00 - down here I'm going to do another for
28:02 - Loop and I'm going to say for event in
28:04 - or sorry not for event for
28:07 - obj in objects I'm simply going to say
28:11 - obj do draw now that's because every
28:14 - single one of our objects is a
28:15 - spacecraft instance which has the draw
28:18 - method so I simply call that on all of
28:19 - the objects and now they get drawn last
28:22 - thing after we add the object we'll sent
28:26 - we'll set sorry the temporary object
28:28 - position to be none we do that because
28:30 - now we're indicating okay we just went
28:32 - through that two-step process right we
28:34 - place the object we figured out kind of
28:36 - how fast and what angle we want to
28:37 - launch it at so now let's get rid of
28:39 - this because we already put it in the
28:41 - objects array and then we have the
28:42 - ability to place another object going
28:45 - forward again not fully finished yet but
28:47 - that is the gist of it okay let's just
28:49 - have a look at this for now and see if I
28:51 - made any mistakes so when I press and go
28:53 - here notice it stays on the screen and
28:55 - the line goes away that means that this
28:56 - is now an object in that object's array
28:59 - and eventually it will be moving same
29:01 - thing here and you can see that I can
29:02 - place all of these various different
29:04 - objects onto the screen okay so now
29:07 - comes the hard part moving the objects
29:10 - now we can begin by moving the objects
29:12 - based on their X and Y velocity but
29:14 - shortly we actually want to calculate
29:17 - how they should be moving based on the
29:19 - interaction with the planet which we'll
29:20 - need to draw on the screen uh and a few
29:22 - other things for now though let's go in
29:24 - spacecraft and let's define a move
29:26 - method now for the move method we're
29:28 - going to have self and we're going to
29:30 - take in a planet for now I'm going to
29:33 - make this equal to none but eventually
29:35 - that will be actually the location of
29:37 - the planet so we know how to calculate
29:38 - the gravitational force for now all we
29:41 - actually need to do is simply say our
29:43 - self.x is plus equal to the Velocity in
29:46 - the X Direction and the self Y is equal
29:49 - to the self dot V in the Y Direction
29:53 - that's it right we have a velocity in
29:55 - both X and Y Direction so we simply
29:57 - apply that to our X and Y and move in
29:59 - that direction boom that's move now we
30:02 - can very easily move our objects by
30:04 - going down here and saying
30:05 - OBG or obj do move perfect now if I were
30:10 - to go here instead a velocity of
30:11 - something like 1 one you'll see that we
30:13 - start moving diagonally on the screen so
30:16 - if I
30:16 - go here and run this uh and I place my
30:21 - object here we start moving it looks
30:22 - like it's moving in the direction I set
30:24 - but it's really just moving one pixel
30:26 - down and one pixel to to the right every
30:28 - single frame at a 45° angle okay there
30:31 - you go we now have objects moving now we
30:33 - want to move them in the direction of
30:35 - our Mouse what I'm going to do here is
30:37 - hop onto my drawing tablet and give you
30:38 - a brief explanation of how we can
30:40 - actually figure out what direction they
30:41 - should move in welcome to physics with
30:44 - Tim we're on the Whiteboard and we're
30:45 - going to get started right away so let's
30:47 - start with what information we have well
30:49 - we have our object and for object we
30:52 - have an X1 y1 coordinate we have some
30:56 - line this line goes to some point this
30:59 - point is our Mouse okay for our Mouse
31:03 - this is X2 and Y 2 now immediately let's
31:08 - figure out what information we can
31:09 - derive using these two points well first
31:12 - is the overall velocity okay now the
31:14 - velocity here V is actually a vector the
31:17 - reason it's a vector is because it has a
31:19 - direction scalar values don't have a
31:20 - direction Vector values do so we have
31:23 - some value V which is really the
31:24 - distance between these two points and
31:26 - that's the relative velocity that we
31:28 - want to launch this object at however
31:30 - that's not really helpful to us we need
31:32 - to figure out what direction to move in
31:33 - X and in y so what that means is we need
31:36 - to expand this to a right angle triangle
31:38 - and we need to figure out the Y
31:40 - component and the X component of this
31:42 - velocity now to do that using two points
31:45 - is actually very straightforward we just
31:47 - simply need to take the difference of
31:49 - those two points okay now the order in
31:51 - which we do this is important to make
31:53 - sure we move in the right direction uh
31:55 - but in this case what we can do is we
31:57 - can say Y is simply equal to Y2 - y1 and
32:02 - X is simply equal to X2 minus X1 now
32:07 - that's going to give us the uh component
32:09 - for x and for y of the Velocity right or
32:12 - the direction that we want to move it
32:14 - that's it that's literally all we need
32:16 - to do to get those velocities all right
32:19 - so I think that's actually going to wrap
32:20 - up this whiteboarding session I just
32:22 - wanted to quickly show you kind of with
32:23 - the right angle triangles why we're
32:25 - doing this again we have V which is
32:27 - really the distance of this line we
32:28 - don't actually care about V what we care
32:30 - about is the components of V which are
32:32 - the X and Y velocity so we can get at
32:35 - doing that we don't need any complex
32:37 - trigonometry however we will in a second
32:39 - need some trigonometry which I will show
32:40 - you later all right so back onto the
32:42 - computer we go and we're going to start
32:43 - implementing this now I actually would
32:45 - prefer to make a function here that can
32:48 - create this object for us uh so that we
32:50 - don't need to worry about it ourselves
32:52 - so what we're going to do is have a
32:54 - function define correct create
32:57 - underscore ship cuz we're going to
32:59 - create a rocket ship right we're going
33:01 - to take in the location for the ship to
33:03 - start and we're going to take in the
33:04 - mouse position now inside of here we're
33:06 - just going to start by breaking our
33:07 - components so we're going to say TX Ty Y
33:10 - is equal to location and we're going to
33:12 - say MX mcore y standing for Mouse X
33:16 - Mouse Y is equal to Mouse now all we
33:19 - need to do is calculate the difference
33:21 - in these right so we're going to say the
33:23 - Velocity in the X direction is going to
33:25 - be equal to MX we're going to do the
33:27 - mouse X because this is the direction we
33:29 - want to go in minus and this is going to
33:32 - be the tore X now we just need to make
33:34 - sure we do the same for y so we're going
33:36 - to say v y is equal to mcore Yus tore y
33:41 - now we have the velocities that's fine
33:44 - what we want to do now is say that our
33:46 - object is equal to a spacecraft that
33:50 - starts at the position TX tore Y moves v
33:55 - x Vore Y and has a mass of the ship mass
34:01 - and then we will return our object okay
34:05 - that's it for creating the ship so now
34:07 - we'll go down here and rather than
34:09 - saying object is equal to this we're
34:10 - going to actually get rid of that we're
34:11 - going to say object is equal to create
34:13 - ship we're going to pass the temporary
34:15 - object position as the location and the
34:18 - mouse pause as the mouse and there you
34:21 - go we now should actually have a ship
34:23 - that starts moving now let's see if I
34:25 - did this correctly or not we're going to
34:27 - run the
34:28 - code we're going to go here and you see
34:30 - that we launched now we're moving
34:32 - extremely fast in whatever Direction I
34:34 - launch it in uh but I will show you how
34:36 - we can actually scale that down because
34:38 - right now we're moving at the velocity
34:39 - which is just equal to the distance of
34:41 - the line obviously we don't want to move
34:44 - that quickly instead what we actually
34:45 - want to do is we want to scale down the
34:47 - movement a little bit so what we're
34:49 - going to do to do that is just go here
34:51 - to our velocity X and Y we're going to
34:54 - put a set of parentheses and we're going
34:56 - to put divide div by the velocity scale
34:59 - and what this is going to do is just
35:00 - divide this by 100 so it's going to make
35:02 - it 100 times slower which is going to be
35:04 - more reasonable for this simulation okay
35:06 - so that's it just divide that by the
35:08 - scale go here now and notice I can move
35:11 - in this direction I can move here I can
35:13 - move whatever Direction I want Works in
35:15 - any quadrant that we're trying to move
35:17 - in okay so that's all great however
35:19 - what's going to happen is all these
35:20 - objects are going to be moving off the
35:22 - screen and still being handled and
35:24 - eventually our CPU is going to get
35:26 - bottlenecked because we're going to have
35:27 - so many objects on the screen so what we
35:29 - want to do is just ensure that we clean
35:31 - up our objects whenever they move off
35:32 - the screen so we're going to go here to
35:34 - our objects and we're just going to make
35:36 - a simple check here to determine if
35:37 - they're off the screen so we're going to
35:39 - say off undor screen is equal to and
35:42 - we're just going to check all of the
35:44 - different ways that could be off the
35:45 - screen so left right up and down so to
35:49 - do that we will say if the OBG OBG I
35:53 - keep saying OBG obj obj dox is less than
35:56 - Z Z or the obj doy or sorry let's do X
36:01 - again is greater than the width of the
36:03 - screen or the object doy is less than
36:08 - zero or the object doy is greater than
36:11 - the height of the screen okay so then
36:13 - we'll say if off screen then we can
36:18 - say objects. remove our object now just
36:22 - to ensure this doesn't cause any issues
36:24 - while we're iterating through this array
36:25 - we're just going to actually make a copy
36:27 - here that we will iterate through so
36:29 - when I do this it just simply makes a
36:30 - copy of this array or this list and now
36:33 - when I remove something from this list
36:35 - it doesn't affect this iteration because
36:36 - we're iterating through a copy not the
36:38 - original list okay so now we'll just see
36:42 - that these objects get removed we
36:44 - actually don't need to test that that is
36:46 - fine okay so now we know how to launch
36:47 - objects next thing we're going to do
36:49 - here uh is look at creating the planet
36:53 - and then moving around the planet
36:54 - there's actually not a lot more code
36:56 - that we need to write right uh but there
36:57 - is just a bit of math that we're going
36:58 - to go over so what I'm going to do now
37:00 - is make another class called planet now
37:03 - we're going to Define our
37:05 - initialization we're going to take in a
37:07 - self an x a y and a mass for the planet
37:11 - now we're just going to Define these
37:12 - here as attributes so self.x is X self.y
37:16 - is y and self. mass is equal to of
37:20 - course our Mass next we're just going to
37:23 - have a draw function so we're going to
37:25 - say Define draw and we're going to take
37:27 - in self and screen and actually we don't
37:30 - need screen uh we can just leave this
37:32 - like this and we'll say screen or
37:35 - win. blit and we're going to blit the
37:39 - planet image okay because we're going to
37:40 - draw the image for our planet right and
37:43 - now where do we want to draw this well
37:44 - I'm actually just going to take int of
37:47 - the self. exposition uh and actually I
37:49 - don't think I need to do that sorry just
37:51 - second guessing myself here I'm going to
37:53 - take self.x minus the planet underscore
37:57 - size and self.
37:59 - Y minus the planet underscore size okay
38:05 - so I'm drawing the planet at this XY
38:08 - position which will ideally be in the
38:10 - middle of the screen well we'll set that
38:12 - but the reason I'm doing this is because
38:14 - I'm drawing a rectangular image but I
38:17 - want to draw it as if it was a circle
38:19 - because if we look at this image here
38:20 - it's a circle right so what I'm going to
38:22 - pass to planet is I'm going to pass the
38:24 - center uh position of where I want to
38:26 - draw the image now when I pass the
38:28 - center image or the center of the image
38:30 - sorry I need to adjust that coordinate
38:32 - because what I'm passing here is the top
38:34 - leftand corner of the image so since my
38:36 - image has a size of Planet size times 2
38:39 - if I take self.x so whatever the
38:41 - position is and subtract half of the
38:44 - width of the image and half of the
38:45 - height of the image that means we draw
38:47 - it perfectly centered at the XY position
38:50 - hopefully that makes a bit of sense but
38:51 - that's why we need to do that okay so
38:53 - now that we have Planet we're just going
38:55 - to create a planet Planet here and we're
38:57 - just going to draw every flame every
38:58 - frame sorry so we're going to say planet
39:00 - is equal to Planet let me just look at
39:03 - what uh coordinates we want here well
39:05 - actually this is simple we'll just take
39:06 - width an integer divide that by two
39:08 - we'll take height an integer divide that
39:10 - by two and then we'll pass in here our
39:12 - planet mass now all we need to do is
39:15 - just draw our planet you can decide when
39:16 - you want to draw that I will draw it at
39:18 - the very end so nothing is over top of
39:20 - it and I will simply say planet. draw so
39:23 - now we'll get a planet in the middle of
39:24 - the screen let's give that a test and
39:27 - you see that we now have our planet we
39:29 - can start launching objects now
39:30 - obviously they can kind of Hit the
39:32 - planet and they can go through them so
39:33 - next thing we'll do is make it so if we
39:35 - collide with the planet they disappear
39:37 - and then we'll add the gravitational
39:39 - pole okay so let's just quickly do if
39:41 - they collide with the planet so if they
39:43 - collide with the planet there's a few
39:45 - different ways we can do this but the
39:46 - easiest way is just to check the
39:48 - distance so since we're colliding with a
39:49 - circular object we can simply see if the
39:52 - distance between our point and the
39:54 - planet is less than the radius of of the
39:56 - planet if that's the case it means it's
39:58 - inside of that planet okay so to do that
40:01 - we're going to say collided is equal to
40:04 - the math. square root and we're going to
40:07 - take the square root of the object
40:11 - dox minus the planet. X to the exponent
40:15 - 2 plus the object
40:19 - doy minus the planet doy to the exponent
40:22 - 2 if you're not familiar with this this
40:24 - is the distance between two points
40:26 - formula okay so you simply just take the
40:28 - difference in the x coordinates raise
40:31 - the exponent two plus the difference in
40:32 - the y-coordinates and then you take the
40:34 - square root of that and that gives you
40:35 - the overall distance this is similar to
40:37 - how you would find the hypotenuse of a
40:39 - triangle given the two side lengths now
40:41 - we're going to say if offscreen or
40:43 - collided uh then we will remove and that
40:46 - reminds me that I need to actually make
40:47 - this a condition so I need to say this
40:50 - is less than the planet size which is
40:53 - the radius of the planet okay so
40:55 - actually we can do less than or equal to
40:57 - if the if our distance St is less than
40:59 - or equal to Planet size it means we're
41:00 - inside of the planet which means we've
41:02 - collided so we will remove the object
41:04 - from that object's list so we no longer
41:06 - draw it quickly test this
41:10 - out okay shoot at the planet and let's
41:12 - see if it comes out the other side it
41:14 - does not because it collided and we
41:16 - removed it all right last step now is
41:19 - the most fun part which is the
41:21 - gravitational force let me hop onto the
41:24 - drawing tablet again and explain to you
41:25 - how we'll do this welcome back to
41:27 - physics with Tim now let's dive in
41:30 - immediately so we have our planet and we
41:32 - have some rocket ship we know that we
41:34 - have some gravitational pull or effect
41:36 - from the planet to the ship now the
41:39 - factors that are going to affect this
41:41 - are one the mass and two the distance
41:45 - okay now the distance is going to be the
41:47 - more important factor I mean mass is
41:48 - going to have a big impact as well but
41:50 - the further away you are the less uh
41:53 - gravitational pull you're going to have
41:54 - towards the planet and this is is
41:56 - inverse proportional and you're going to
41:57 - see in the equation the distance has a
41:59 - massive effect on how much gravity plays
42:01 - a role so we already know the mass of
42:04 - the two objects well we actually need to
42:06 - calculate to figure out the force or the
42:09 - acceleration to the planet here is going
42:11 - to be the distance so what right now
42:14 - what we're looking for is distance D now
42:16 - once we have that distance that's going
42:18 - to tell us the force or the amount of
42:20 - pull on this object towards the planet
42:23 - as a vector in that direction now you'll
42:26 - see what I mean in one second but let's
42:28 - start by writing out kind of the main
42:30 - thing we want to figure out here which
42:31 - is the force so the force
42:33 - gravitationally between two objects is
42:35 - equal to the following that is going to
42:37 - be the gravitational constant G * M1 *
42:42 - M2 divided by and this is distance
42:47 - squared okay so we already know Mass one
42:50 - and we know Mass 2 those are the mass of
42:51 - the two objects we know the
42:52 - gravitational constant we can just make
42:54 - it up or we can use a real one and then
42:55 - we need need to figure out the distance
42:57 - and then Square it now to figure out the
42:58 - distance we just take the distance
43:00 - between two points on a line we already
43:02 - know how to calculate that so I'm not
43:03 - going to show that to you right here so
43:05 - now let's imagine we've figured this out
43:07 - okay so we actually find force right we
43:09 - get it boom we figured it out now what
43:11 - we need to do though is we need to take
43:13 - this force and we need to turn this into
43:15 - acceleration because the force doesn't
43:17 - actually tell us the speed it tells us
43:19 - the number of Newtons right or whatever
43:20 - the unit ends up being killing Newtons
43:22 - or whatever those newon units are um
43:24 - that's kind of the pull from the object
43:26 - but we need the acceleration so to
43:28 - calculate the acceleration we simply
43:29 - take the force and we divide this by the
43:32 - mass of the object that is moving in
43:34 - this case the mass of the object that is
43:36 - moving is going to be the what is this
43:39 - the spacecraft okay so take the force
43:42 - divided by the mass that gives us
43:44 - acceleration however this is
43:45 - acceleration in a direction this is a
43:48 - vector acceleration okay now the reason
43:51 - it's Vector is because again we have
43:52 - some planet we have some space shuttle
43:54 - and we have some pole here and and we've
43:56 - just figured out a but what we need to
43:58 - do now is break that into its two
44:00 - individual components the ax and the a y
44:05 - now how do we do that well we're using
44:07 - right angle triangles and we know that
44:08 - we always need at least two pieces of
44:10 - information to solve for every piece of
44:12 - the right angle triangle right now when
44:15 - we're looking at this triangle the only
44:17 - thing we have is a however this triangle
44:21 - is the exact same as the two points that
44:24 - we're calculating this acceleration four
44:26 - that means that I'm actually able to
44:28 - solve for this angle Theta once I have
44:30 - that angle Theta I can then figure out
44:33 - the two components using my right angle
44:35 - triangle of my acceleration I know this
44:37 - might be going a little bit fast for you
44:39 - guys but I know a lot of you already
44:40 - know this so what we'll do to start is
44:43 - we'll solve for angle Theta now to solve
44:46 - for angle Theta we use the right angle
44:47 - triangle that we began with that allowed
44:50 - us to determine the distance between the
44:51 - two points so the right angle triangle
44:54 - uh where should I draw this let's draw
44:55 - it over here
44:56 - looks something like this okay you have
44:58 - Planet down here you have object up here
45:01 - and we know these points right we
45:05 - have X2
45:08 - Y2 and X1 y1 again we want to figure out
45:13 - y we simply take Y2 - y1 want to figure
45:16 - out x x is equal to X2 - X1 so we now
45:20 - have the opposite and the adjacent side
45:23 - of the triangle we also have the
45:25 - acceleration so now that we have the
45:27 - opposite and the adjacent side we're
45:29 - able to solve fora now to solve for that
45:32 - we're going to take the inverse tangent
45:34 - of one over the other now the way I
45:36 - remember this in case any of you like
45:37 - this shortcut is something called so I'm
45:40 - butchering this C TOA okay now you might
45:44 - laugh at me for the shortcut but I've
45:45 - remembered this for many many years this
45:47 - stands for S is equal to opposite over
45:49 - hypotenuse cosine is equal to adjacent
45:52 - over hypotenuse and tangent is equal to
45:54 - opposite over adjacent now what we need
45:56 - to do is we need to figure out okay what
45:58 - piece of information do we know in this
45:59 - case we know the opposite and we know
46:00 - the adjacent side so what we'll do is
46:02 - we'll use this tangent formula so we
46:05 - write out tangent so this says tan of
46:07 - theta is equal to opposite over adjacent
46:10 - what do we want to solve though we want
46:11 - to solve for Theta because we know
46:14 - opposite and adjacent side so how do we
46:17 - solve for that well we have to take the
46:19 - inverse tangent or the arc
46:21 - tangent So Tan inverse of opposite over
46:25 - adjacent
46:26 - okay that's all we need to do when we
46:28 - take that that is going to give us the
46:31 - Theta or the angle now that we have the
46:33 - angle we can now use the angle to solve
46:36 - for the components of our acceleration
46:38 - so I'm let me just clear the screen here
46:40 - and remember that this is what we have
46:42 - we have our right angle triangle
46:44 - okay we have Theta now we know what that
46:47 - is and we have acceleration and we want
46:50 - a y and a X how do we solve it well to
46:55 - solve for a y we simply can write out
46:58 - our shortcuts again right
47:00 - so
47:02 - so C TOA I'm doing this off the top of
47:05 - my head by the way so excuse any uh you
47:07 - know delays here but I want to solve for
47:10 - what is it let's start with a y now a y
47:13 - here is the opposite from this angle so
47:16 - I need to find where opposite exists but
47:18 - I know the hypotenuse now that's sign so
47:20 - what I'm going to do is I'm going to say
47:22 - the S of theta is equal to the opposite
47:26 - which is a y over a I know a and I know
47:30 - Theta so I simply take s of theta
47:34 - multiplied by a and that gives me my a y
47:37 - now I'll just shortcut this for you I
47:39 - can now do the same thing with
47:41 - cosine to solve for my ax okay so that
47:45 - is how we've now gone from actually
47:47 - figuring out the acceleration in the X
47:49 - and the Y Direction that's it that's
47:52 - what we need to do I know seems a little
47:54 - bit complicated but I promise promise
47:55 - you it is not overwhelming let's dive
47:57 - into the code here just a few lines and
47:59 - then we will have this project done all
48:01 - right so let's dive into the move
48:04 - function here and Implement what I just
48:06 - showed you first thing we need to
48:08 - calculate the distance between our self
48:11 - and the planet so we're going to say
48:15 - math.sqrt if we could spell this
48:19 - correctly don't know what's happening
48:20 - with my typing now to do that it's going
48:22 - to be self.x minus the planet
48:26 - dox okay to the exponent 2 plus self.y
48:33 - minus the planet doy to the exponent 2
48:37 - we now have the distance we now want to
48:39 - calculate the force well the force is
48:40 - going to be our gravitational constant G
48:43 - times self. mass times the planet do
48:48 - mass divided by the distance to the
48:52 - exponent 2 we've now calculated the
48:54 - force now now we want to calculate the
48:56 - acceleration well the acceleration is
48:59 - simply equal to the force divided by the
49:01 - mass of the object we're moving which in
49:03 - this case is our self next we need to
49:06 - figure out the angle right so we have
49:07 - the acceleration now we need angle Theta
49:09 - and then we can break it into components
49:11 - so the angle is the math. AR tangent of
49:16 - the planet doy minus the
49:20 - self.y and the planet dox minus the
49:24 - self.x now we do it in this order
49:26 - because this is going to give us the
49:27 - direction uh correctly that we're moving
49:29 - in okay if you did it self.y uh first
49:32 - like you swap these around I would
49:34 - actually give you the reverse Direction
49:36 - so just make sure it's this direction
49:38 - okay that's how we have to do this for
49:39 - the arc tangent now we have the angle
49:41 - and the acceleration and now that we
49:44 - have that we can calculate the
49:46 - acceleration in each Direction so we're
49:48 - actually going to say uh acceleration X
49:52 - is equal to the acceleration multipli
49:56 - by the math. co of the angle and we'll
50:00 - say the acceleration in the y direction
50:03 - is equal to acceleration multiplied by
50:05 - the math. sign of the angle giving us
50:08 - acceleration in both directions now
50:11 - acceleration is applied to Velocity so
50:12 - we're going to say self. velocity X plus
50:15 - equals acceleration in the X Direction
50:18 - and self. velore Y plus equals the
50:22 - acceleration in the y direction now we
50:26 - just keep this the same and we take
50:27 - whatever our new velocity is because
50:29 - again we're accelerating right we're
50:31 - changing the velocity it's either going
50:32 - up or down and we're applying that to
50:35 - our X and to our y okay that's it now
50:40 - you'll see that the entire simulation
50:42 - will just work and everything will be
50:43 - good so let's go ahead and run this and
50:47 - see what we
50:49 - get uh and we got an issue none type
50:51 - object has no attribute X okay that is
50:54 - because we forgot to pass Planet here to
50:56 - move so we'll go down here to where we
50:58 - have move and we'll simply pass in our
51:01 - planet and now that should work my
51:04 - apologies let's try this now and we got
51:07 - another issue math. arc tangent takes
51:09 - exactly one argument two was given uh
51:14 - okay ah so the reason here is that I
51:17 - actually wanted to use the arct tangent
51:19 - two function which just simplifies this
51:21 - operation a little bit for us so just
51:23 - make this A1 2 all right let's see if
51:25 - this is the last one third times a charm
51:28 - right come on and there you go we can
51:31 - see that now this is applied we can
51:33 - launch as many objects as we would like
51:36 - if they do end up colliding with the
51:38 - planet they will disappear obviously if
51:40 - you launch them kind of slowly like this
51:41 - they might end up hitting the planet
51:42 - they could get quite close and not hit
51:44 - it really really kind of cool when you
51:46 - actually look at this and see how this
51:48 - works and imagine if you're dealing with
51:50 - Real World objects obviously not
51:51 - everything here is you know the best
51:53 - numbers you could potentially use but
51:55 - but you can mess around with this and
51:56 - change it quite a bit uh and see kind of
51:58 - how the gravity is affected based on the
52:00 - different masses based on the velocities
52:02 - based on uh what do you call it here the
52:04 - gravitational constant that you choose I
52:07 - think this is a really really cool
52:08 - project and if you stuck around until
52:10 - the end give yourself a pat on the back
52:11 - for completing it with that said I'm
52:14 - going to wrap up the video here this was
52:16 - a long recording for me if you guys
52:18 - appreciated this please leave a like
52:20 - subscribe to the channel I do have a few
52:22 - programming courses programming expert.
52:25 - blockchain expert.i if you guys enjoy
52:27 - those or want to check them out please
52:28 - do from the link in the description I
52:30 - always appreciate that and with that
52:31 - said I will see you all in another
52:33 - YouTube
52:36 - [Music]
52:42 - video

Cleaned transcript:

in this video I'll show you how to write a Python program that simulates the gravitational slingshot effect now this is the effect that happens when spacecrafts get near planets what happens is they have an existing velocity and acceleration and then the gravitational pull of that planet depending on the mass and the distance actually makes it so they can kind of slingshot around the planet there's a lot of famous scenes in movies where they actually use this to their advantage and this is definitely something that is calculated by the spacecraft and all of the engineers really cool simulation doesn't take that long to build it's actually not overly complicated just a few very simple physics equations that I will break down for you and with that said let's dive into it after a quick word from our sponsor today I'm sponsoring my own video to tell you about my brand new software development course which is especially designed to help you land a job not only do we teach you all of the skills you need to be a great front end backend or devops engineer and you can pick which one you want to be we also connect you with a network of employers that are looking to hire you as soon as you graduate the course the reason they do that is because we run you through the best possible curriculum we test you every step of the way through proctored exams and final Capstone projects and we set up your resume we help you get interview ready and employers actually pay us to interview you because they know you're such great candidates this course is an absolute GameChanger I've been working on it for a very long time and what happens is you'll go through a software development fundamentals course taught by me and then you'll pick a specialization in front end backend or devops taught by an industry expert for example Kyle from webdev simplified is the frontend instructor and he has a fantastic course which will literally make you the top level candidate for any Junior frontend position this is a game changer I hope you guys like it and you can check it out from the link in the description all right so let's spend a second here breaking down exactly what's going on in this simulation and talking about the steps we need to take to actually code this out first of all all of the code for this will be available in the description so if you don't want to code it out feel free to just grab that from GitHub that will also include the different assets that I have here like the little planet and the space background now the way I've set this up is that we can click the mouse and kind of place an object and then we can choose the launch trajectory and the relative kind of velocity of that object so we can test this out from many different areas now you'll see that what ends up happening is if I kind of shoot in a straight line here not really close to the planet we get very minimal effect and we're pulled slightly to the right that's because we're kind of far away from the planet and the gravitational pole is not that strong however if I'm very close to the planet like this you can see that I almost immediately get launched right into the center of it and that's because the gravitational force is very high you probably learned this in something like a grade 10 physics class if you didn't don't worry I will break down the equations there fairly straightforward but what we need to do here is make it first of all so we can launch this little object that's going to be the first step launching it in some direction the Second Step will be adding this planet and then calculating the force that's being applied to our object as it moves around the planet and gets closer so that's what we need to do again that's going to involve being able to launch the object which we'll do first and then we need to actually adjust the object's velocity uh and its movement based on the location of the planet and the gravitational force this will be an intermediate Python tutorial not anything crazy complicated but I am going to assume that you have some understanding of python with that said let's go ahead and dive in all right so I've just cleared my file here and I'll just kind of start with the setup step so for this video we'll be using pame now pame is a 2d Graphics library in Python great for simple simulations like this if you want to learn more about it you can check out tons of videos on my channel don't worry if you don't know it though I'll explain everything you need in this video it's quite simple however the first thing we need to do is install py game to do that we'll open up a terminal like the one I have here in vs code and type pip install and then pame if you're on Mac or Linux you may need to do pip three install pame go ahead and run this it should install that package for you now many of you have issues with this pip command if that's the case I will leave two videos on the screen that will show you how to fix this for both Mac and Linux and to install pame on your system once we have pame installed that's pretty much all we need to do other than grabbing these two images here now you don't need to use the images but I'm going to recommend you do because it looks quite a bit nicer so you can grab these images by clicking the link in the description and downloading them it should bring you to my website which will just automatically download the files for you if you don't trust that link well obviously you can trust it but if for some reason you don't want to click it then you can just go to GitHub and you can download them from there all right so we have an empty python file here open in vs code we have pame installed and we're going to start writing some code first we're going to import the pame module and then we are going to import the math module we then going to go down here and initialize the pame package or module like that now what I like to do is start by setting up a bunch of constant variables that we'll be using throughout the program they may seem abstract right now but we'll be referring to them constantly as we go through the rest of the code so just give me a second here and let's code some of these out the first thing we need to do is Define the width and the height of our window so we'll say width comma height is equal to 800 comma 600 now you can adjust this if you want but this is a pretty standard width and height that should work for pretty much all monitors and devices next we're going to set a window now the window is going to be where we draw all of the objects on P game now this is referred to as a surface but since this is the window surface I call it a window okay so we're going to say py game. display. setor mode and inside of here we're going to pass a tupple that contains the width and the height of our window okay so what we've just done here is initialized a new pame window where we'll be drawing all of our content that contains uh or sorry has a width of 800 and has a height of 600 you can adjust those if you want next we'll just set a caption this is kind of like the title of the window and for the caption we can just say this is going to be a gravitational slingshot effect and it looks like I spelled all of those words quite incorrectly so we'll use my spell check here gravitational is that correct is that how you spell that um gravitational there you go I am apparently not very good at spelling okay there you go don't roast me in the comments too hard guys I'm better at coding than I am at spelling okay now that we have the display set up we'll set up a few constants for the different objects we'll be using a few colors some stuff like that and then we'll move on to actually creating the main Loop for our program so we're going to need to have a Mass for our objects because the gravitational effect is actually relative to both the distance and the mass so what we're going to set is first the mass of our planet I'm going to call this 100 and next we're going to set the mass of our ship now our ship is just going to be those little objects the kind of red dots right you can make an image if you want for them but I'm just going to go with the circle for now so we're going to say the mass of our ships is five we're going to set a gravitational constant this is essentially the force of gravity or the effect you're going to feel so if you want more gravity you would increase this if you want less you would decrease it and I'm just going to make this five for now we're then going to set an FPS this is the frames per second that our simulation is going to run at I'm going to run this at 60 if you want to speed it up you increase it if you want to slow it down you decrease this few more ones we're going to need here I'm going to say my Planet uncore size is going to be 50 so it's going to be the rate radius of my Planet uh we'll leave it as size for right now and then we're going to have an object size same thing radius of our object this will be five lastly we're going to have a scale for our velocity which is going to be equal to 100 you'll see why we need that in 1 second okay so now we have these next thing we're going to do is just take these two images here and import them into P game so we're able to draw them I know a lot of set up right now but in a second we'll write some code that we'll use all of these variables so we're going to say BG standing for background is equal to py game. image. load now this how you load an image now if the image is in the same directory as your main python file what you'll do is simply write the name of the image so in this case it's going to be background. jpeg okay if you're using a different image make sure you put the corresponding file name here you can see I have background jpeg so that's why I'm calling this background. jpeg now if this was for some reason inside of some folder say I had something like images here and some images there I could write SLB background. jpeg or I can use something from the OS package which I'll quickly show you here which is path. jooin so if you want to join a directory with a file name you can do os. path. jooy the directory name and then the file name like this and it will create that path for you and allow you to load that image now if the image is not in the same directory as this uh file you're going to have difficulty loading it so I recommend just make sure all of your images are in the same root directory where this main python file is okay in this case it's just a directory on my desktop okay we loaded our background the next thing we need to do is load our planet image so I'm going to say planet is equal to py game. image. load and I'm going to load Jupiter which is this specific planet. PNG now the issue here though is that when I load these images you see they're quite large for example this background. jpeg is actually a 6000x 4,000 pixel image now that's going to be too large for us to display and it's going to look all distorted on our screen so what we're going to do is transform or change the resolution of the image uh we can do this to scale by knowing the aspect ratio or we can just set it to any scale that we want so what I'll do here is actually say py game. transform. scale and then I'm going to put the image first as my uh first argument and the second argument is going to be a tuple with the new desired size of this image now for this image I'm going to go with the size of 800x 600 or we should really use our variable variables here which is the width and the height that's because this is going to be our background image so I want my background image to be the same size as my window there you go next we're going to do the same for our planet so we'll copy this again P game. transform. scale first argument is the image second argument here is going to be the size that we want now we have our planet size here and this is representing the radius of our planet so what I'm going to do is say Planet size multiplied by two and then Planet size multiplied 2 now in case you haven't realized this by now uh the first is always the width the second is the height or the XY when we eventually get to that point okay now the reason I'm multiplying my Planet size by two is because this is meant to act as the radius so I would need to create the image to be double the size of the radius because that's kind of the diameter and the X and Y direction right hopefully that makes a bit of sense but that's why I'm doubling the planet size to two here for my Planet image perfect lastly we'll Define a few colors that we need so we're going to say white is equal to a tupple and this tupple will be 255 255 255 which is white this is an RGB color code right next is going to be red red is going to be 255 0 uh for RGB you have red first green and then blue if you have zero for the other ones and kind of some value here you're going to get some shade of red in this case it's the most red we can get because 255 is the maximum value for RGB zero is the minimum next we're going to have blue blue is going to be 0 0 255 fairly straightforward okay if you wanted black you would just have 0 0 0 no C at all when you want white you actually mix all of the colors together that gives you white in RGB okay so now we have all of our constants and all of our initial setup we can remove that OS module what we want to do now is just kind of see this pame window and be able to just interact with p game very simply before we start actually launching these objects around the screen so to do that we're going to create a function this function will be called main now what we'll do is just put pass in here for now and we'll go down to the bottom of the screen and set up kind of this initialization which will call the main function so we're going to say if underscore underscore this is two underscores here otherwise known as Dunder name is equal equal to main again two underscores main two underscores then we will call Main now what this line does right here is it only calls this function if we run this python file directly now that's opposed to if we were to import some code from this python file don't need to go through that a ton but you always want to have this kind of in the main line of your program and this will call some function or something that initializes the code again you do that because you only want this to run if this python file is ran directly not if code is imported from another python file okay so inside of Main here what we'll do is we'll create a w Loop now A W Loop will act as our game Loop whenever we're working in pame we need some Loop that's running infinitely that's checking for all of the different events and doing all of the rendering and drawing on the screen so what I like to do is create a variable here called running and make this equal to true and then I'm going to say while running like that and then inside of this while loop here is the main Loop which is kind of the event Loop and handles all of the stuff that might occur now what we need to do in our main Loop is we need to make a way to ex the loop right we don't want to have an infinite Loop so the way we can do that is we can write a for Loop here and we can say for event in py game. event. getet now what this is going to do here is Loop through all of the different events that are occurring from pame and then we can check the event and see if it's equal to a specific one like pressing a key pressing a mouse pressing the x button for example so I'm going to say if event. type is equal to pame Dot and this is going to be quit in all capitals then we're simply going to say running is equal to false okay so all this means here is if we exit out of the window so if the event. type is quit then we're going to set running equal to false that's going to exit out of our while loop and the last step we need down here is to say py game. quit Okay saying py game. quit story is just going to actually close that pame window for us so it will exit kind of cleanly return all right I know that was quite a bit of code but let's run the code right now and just check out what our window looks like and then we'll move on to some of the more fun stuff so I'm going to say Python main.py and you see that we get our gravitational slingshot effect I can hover over X when I click it it closes the window and we are good to go okay so let's clear go back to our code and start writing some more stuff so now what I would like to do is Implement a clock now a clock is going to essentially regulate this Loop and make sure it doesn't run too fast because right now the loop is going to run based on the clock speed of our computer if you have a really fast CPU it's going to run faster than if it's on a slower computer but we don't want that we want the simulation to be the same no matter what type of Hardware we're running on so we are going to set a clock we're going to say clock is equal to py game. time. clock notice this is above the W Loop and right at the top of the while loop here we'll say clock. tick and then we'll put the FPS which is the variable we defined right here now when we do this it essentially makes it this wall Loop can run at maximum 60 times per second or however much our FPS is right so in this case it's 60 could be 30 could be less than that just regulates the speed of the loop okay great now that we have that I want to draw the background onto the screen so we get something a little bit more meaningful so there's a bunch of different ways to draw in P game but to draw an image we write the name of the window or the surface that we want to draw on in this case it's the window we write blit now blit I don't actually know what that that stands for just puts an image onto the screen so we're going to say wind. blit we're then going to put the name of the image asset which in this case is BG right because we have BG is equal to this and then we're going to do comma and we're going to put a tupple with the location of the top leftand corner where we want to display this object now in py game we use a 00 coordinate system top uh starting sorry at the top leftand corner of the screen that means 0 0 is the top left so imagine VSS code here is the pame window right where this kind of explore icon is and my mouse is at the top left that's 0 0 that means as I go down my y increases as I go to the right my X increases okay so for my image I want it to fill the entire screen so I'm going to draw this at 0 0 and that's where we will begin drawing the image starting at the top leand corner of the image and drawing down into the right hopefully that makes sense but this will draw the image now all we need to do is say py game. display. update now now the way that pame works is we essentially can paint or draw a bunch of things to the screen in any order that we want and as soon as we update it actually takes whatever is there and puts it onto the screen okay so we have to constantly update every time we want any of the drawing changes we made to appear That's so that we can do a bunch of drawing without rendering it first and we can render all of the drawing at once not sure if that makes sense to you but we would do all of the drawing operations then update all of the drw drawing operations sorry then update Etc okay so let's go and run our code and see if our beautiful background appears and we got an issue here it says py game. time has no attribute clock that is because clock needs a Capital C my apologies let's make that correction and run our code and notice that we get this Starry space background appearing looking great okay so let's exit out there now what we want is to be able to launch objects on the screen now there is a few ways to do this uh but we're going to go with well obviously my Approach now the way that we'll do this is we will say objects is equal to an array and this will be an array that stores all of our individual objects now really the process will be we press our Mouse down and that'll be the location we're going to start launching the object from then we need to determine the velocity and direction to launch the object in which will be another mouse press so it's two mouse presses to create the object that means we first need to determine okay what mode are we in right are we selecting the velocity or are we choosing the location of the object so we're going to Define a variable here called temp object position okay and this is going to be equal to none now this variable will store any object that we've placed onto the screen that we've not yet launched great so now what we need to do is go inside of our event Loop here and we're going to start by grabbing our Mouse position so we're going to say our Mouse position is equal to P game name mouse. getor pause this will give us the XY coordinate in a tle of the location of our Mouse now we want that because if we press onto the screen we're going to store that location in this variable so we now know where we're launching the object right so what I'll do is go inside of my event Loop and I'm going to check to see if someone has pressed the mouse down so I'll say if event. type is equal to pame Mouse button down that just means I pressed any of the mouse buttons doesn't matter left middle right then what I will do is say my temp object position is equal to and this will simply be the mouse position because that's where I pressed it now there is a few other things we need to do here but for now what we can do is we can go ahead and actually draw the location of the mouse or of this temporary object so we see it on the screen so what I'll do is after I blit so after I draw my background then I do all of my other drawing Okay the reason I draw my background first is this essentially draws over top of anything that was already on the screen so whenever you draw the background you're essentially clearing the screen by putting the background on top of it and then you can draw anything else on top of the background before you perform the update so what we'll do here is we'll check okay if the temp object position exists then what I want to do is actually draw this onto the screen so we can see it so I'll say pame do draw do Circle because we're just going to draw a circle for this we're going to draw this on the window which is the first argument to this function we're going to pass the color we want to draw in this case we want to draw red and then we're going to pass the location now the location of the middle of the circle which is what we're passing here that we want to draw is temp object position where we pressed our Mouse down right remember this is going to be a tupple containing the x and y coordinate so if we wanted to break it down here we could do something like 101 that would mean we draw it at 1010 but in this case we want to draw at the temporary object position next we need to pass the uh radius that we want to draw this object now the radius is going to be the objector size okay and that's it that's going to draw a circle for us if we have something to draw great so let's go ahead and test this code out now and see what we get and notice that as I press around the screen my DOT moves to wherever my mouse is and there we are okay all right so that is step one the next thing that we need to do now is calculate the velocity and the direction in which we want to launch this off object so what we now need to kind of check is okay if we're pressing down or if we have this object placed on the screen sorry we want to draw a line between our Mouse and the object so the user can see kind of the relative power they're going to be applying in the direction they're going to shoot the object so what we'll do is we'll actually go here and we'll say if the temp object position exists meaning if we've placed that first object we're going to draw a line between the object and the mouse so so we're going to say p game. draw. Circle or sorry not Circle what am I saying here doline we're going to pass the window we're going to pass the color which is going to be white and then we're going to pass the location of both sides of the line okay so the two points on the line that we want to draw between so we're going to pass the first position being the temporary object position and the second position being our Mouse position right and then we can pass a thickness of the line in this case we'll go with two pixels so now if we run let's bring this up here you'll see when I press down I get this line okay now I can change locations obviously by clicking but it's kind of showing me the uh the line around the object now that's coming from the center and if we didn't want to see it inside of the object we just change our drawing order so we go here and put the circle after the line and now notice that when I draw the line is kind of coming out of the circle Circle it's not on top of the circle which I think actually is probably going to be preferred okay that's great now that we have that what we actually need to do is on that second press we need to figure out all of those different components right okay what is the x velocity what is the Y velocity we need to start moving the object which is obviously a bit more complicated so what we're going to do now is set up a class and this class is going to represent our object or kind of our spacecraft this will be where a lot of the logic will lie for actually moving the object around and having that gravitational Force so we're going to say class spacecraft like this and instead of here we're going to do an initialization now for our spacecraft we need to know the starting X and Y position on the screen we need to know the Velocity in the X Direction and the Velocity in the y direction if you're unfamiliar with velocity that's just speed okay now whenever we have a 2d graphic system we have speed in two directions or two components the X Direction horizontal and the y direction vertical okay so we need to break it into those two components lastly we need the mass we'll use that when we actually apply or sorry calculate the gravitational force now we need to make these all attributes of the object we're going to say self.x equal to X self.y is equal to Y self. xcore Vel is equal to XV self. Yore Vel is equal to oh I put this in the other way okay yv or v x like that okay not sure why I wrote it that way but that fine and then we'll go self. mass is equal to mass and in fact this is actually going to frustrate me so let me change this to vorx and velore Y and there we go okay so that's everything we needed to initialize here for our spacecraft now all I'm going to do is I'm just going to write a draw method and the draw method will just draw this object on the screen in a second we'll start moving it but for now we'll just draw it so we're going to say Define draw and we're going to say self and we're going to actually that's it we don't need to take anything else in to draw we're going to say pame do draw do Circle we're going to draw this on the window now this is using a global variable not necessarily the best practice inside of a class but in this case that's fine and we're actually going to have the exact same thing that we had down here pretty much uh just up here so we're going to say wi red center of the circle is going to be self.x self Y and what else do we need to do here we need to pick the radius which will be the OBG uncore size like that so not OBG obj all right last thing I'm just going to round off these values here using the int function int is just going to strip any decimals we might have just because we'll be doing some calculations that could have some pretty large significant digits and I want to make sure that we don't get any errors trying to render floats here so instead we're just kind of drawing in not sure if you know what I mean there but if we had like a large floating point value that could mess with pi game so we're just going to convert these to int values by doing that okay so now we have our spacecraft so now the point is that we want to actually create a spacecraft object every time we kind of launch one of these objects so once we have our temporary object position right once we've set that we're actually going to check if temporary object position when we're pressing the mouse button down now if we already have a temporary object position that means we've already placed an object down so now instead of placing another one what we'll do is we'll actually launch this object so I'm just going to put an else here so to launch the object we need to figure out all of the things that we have for our spacecraft so the X Y and then the velocity and the X Direction velocity in the y direction and the mass well we know the mass but really these two are the ones we're looking for the Velocity in the X and the Velocity in the Y so what we can do for now at least is we can say that our TX tore y standing for temporary position X temporary position Y is equal to Temporary object position when I do that it will give me the X and the Y out of this tupple uh that's kind of a Shand in Python that you can use now what we'll do is we'll create an object so we'll say object is equal to and this will be a spacecraft instance for the spacecraft we're going to pass our TX and our Ty and for now we're going to pass 0 and zero for the X and Y velocity and then last last L here we're going to pass the mass which is going to be the object or the ship Mass sorry now we're just going to take this object and we're going to append it into objects we'll just get a little bit of the flow working here and then we'll deal with some of the more complex math which I think we should kind of do all at once so we're going to say objects. append object like that and now that this object is inside of this object's array what we'll do is we'll actually Loop through the objects array and draw all of the objects onto the screen eventually we'll be moving them as well but one step at a time so after this down here I'm going to do another for Loop and I'm going to say for event in or sorry not for event for obj in objects I'm simply going to say obj do draw now that's because every single one of our objects is a spacecraft instance which has the draw method so I simply call that on all of the objects and now they get drawn last thing after we add the object we'll sent we'll set sorry the temporary object position to be none we do that because now we're indicating okay we just went through that twostep process right we place the object we figured out kind of how fast and what angle we want to launch it at so now let's get rid of this because we already put it in the objects array and then we have the ability to place another object going forward again not fully finished yet but that is the gist of it okay let's just have a look at this for now and see if I made any mistakes so when I press and go here notice it stays on the screen and the line goes away that means that this is now an object in that object's array and eventually it will be moving same thing here and you can see that I can place all of these various different objects onto the screen okay so now comes the hard part moving the objects now we can begin by moving the objects based on their X and Y velocity but shortly we actually want to calculate how they should be moving based on the interaction with the planet which we'll need to draw on the screen uh and a few other things for now though let's go in spacecraft and let's define a move method now for the move method we're going to have self and we're going to take in a planet for now I'm going to make this equal to none but eventually that will be actually the location of the planet so we know how to calculate the gravitational force for now all we actually need to do is simply say our self.x is plus equal to the Velocity in the X Direction and the self Y is equal to the self dot V in the Y Direction that's it right we have a velocity in both X and Y Direction so we simply apply that to our X and Y and move in that direction boom that's move now we can very easily move our objects by going down here and saying OBG or obj do move perfect now if I were to go here instead a velocity of something like 1 one you'll see that we start moving diagonally on the screen so if I go here and run this uh and I place my object here we start moving it looks like it's moving in the direction I set but it's really just moving one pixel down and one pixel to to the right every single frame at a 45° angle okay there you go we now have objects moving now we want to move them in the direction of our Mouse what I'm going to do here is hop onto my drawing tablet and give you a brief explanation of how we can actually figure out what direction they should move in welcome to physics with Tim we're on the Whiteboard and we're going to get started right away so let's start with what information we have well we have our object and for object we have an X1 y1 coordinate we have some line this line goes to some point this point is our Mouse okay for our Mouse this is X2 and Y 2 now immediately let's figure out what information we can derive using these two points well first is the overall velocity okay now the velocity here V is actually a vector the reason it's a vector is because it has a direction scalar values don't have a direction Vector values do so we have some value V which is really the distance between these two points and that's the relative velocity that we want to launch this object at however that's not really helpful to us we need to figure out what direction to move in X and in y so what that means is we need to expand this to a right angle triangle and we need to figure out the Y component and the X component of this velocity now to do that using two points is actually very straightforward we just simply need to take the difference of those two points okay now the order in which we do this is important to make sure we move in the right direction uh but in this case what we can do is we can say Y is simply equal to Y2 y1 and X is simply equal to X2 minus X1 now that's going to give us the uh component for x and for y of the Velocity right or the direction that we want to move it that's it that's literally all we need to do to get those velocities all right so I think that's actually going to wrap up this whiteboarding session I just wanted to quickly show you kind of with the right angle triangles why we're doing this again we have V which is really the distance of this line we don't actually care about V what we care about is the components of V which are the X and Y velocity so we can get at doing that we don't need any complex trigonometry however we will in a second need some trigonometry which I will show you later all right so back onto the computer we go and we're going to start implementing this now I actually would prefer to make a function here that can create this object for us uh so that we don't need to worry about it ourselves so what we're going to do is have a function define correct create underscore ship cuz we're going to create a rocket ship right we're going to take in the location for the ship to start and we're going to take in the mouse position now inside of here we're just going to start by breaking our components so we're going to say TX Ty Y is equal to location and we're going to say MX mcore y standing for Mouse X Mouse Y is equal to Mouse now all we need to do is calculate the difference in these right so we're going to say the Velocity in the X direction is going to be equal to MX we're going to do the mouse X because this is the direction we want to go in minus and this is going to be the tore X now we just need to make sure we do the same for y so we're going to say v y is equal to mcore Yus tore y now we have the velocities that's fine what we want to do now is say that our object is equal to a spacecraft that starts at the position TX tore Y moves v x Vore Y and has a mass of the ship mass and then we will return our object okay that's it for creating the ship so now we'll go down here and rather than saying object is equal to this we're going to actually get rid of that we're going to say object is equal to create ship we're going to pass the temporary object position as the location and the mouse pause as the mouse and there you go we now should actually have a ship that starts moving now let's see if I did this correctly or not we're going to run the code we're going to go here and you see that we launched now we're moving extremely fast in whatever Direction I launch it in uh but I will show you how we can actually scale that down because right now we're moving at the velocity which is just equal to the distance of the line obviously we don't want to move that quickly instead what we actually want to do is we want to scale down the movement a little bit so what we're going to do to do that is just go here to our velocity X and Y we're going to put a set of parentheses and we're going to put divide div by the velocity scale and what this is going to do is just divide this by 100 so it's going to make it 100 times slower which is going to be more reasonable for this simulation okay so that's it just divide that by the scale go here now and notice I can move in this direction I can move here I can move whatever Direction I want Works in any quadrant that we're trying to move in okay so that's all great however what's going to happen is all these objects are going to be moving off the screen and still being handled and eventually our CPU is going to get bottlenecked because we're going to have so many objects on the screen so what we want to do is just ensure that we clean up our objects whenever they move off the screen so we're going to go here to our objects and we're just going to make a simple check here to determine if they're off the screen so we're going to say off undor screen is equal to and we're just going to check all of the different ways that could be off the screen so left right up and down so to do that we will say if the OBG OBG I keep saying OBG obj obj dox is less than Z Z or the obj doy or sorry let's do X again is greater than the width of the screen or the object doy is less than zero or the object doy is greater than the height of the screen okay so then we'll say if off screen then we can say objects. remove our object now just to ensure this doesn't cause any issues while we're iterating through this array we're just going to actually make a copy here that we will iterate through so when I do this it just simply makes a copy of this array or this list and now when I remove something from this list it doesn't affect this iteration because we're iterating through a copy not the original list okay so now we'll just see that these objects get removed we actually don't need to test that that is fine okay so now we know how to launch objects next thing we're going to do here uh is look at creating the planet and then moving around the planet there's actually not a lot more code that we need to write right uh but there is just a bit of math that we're going to go over so what I'm going to do now is make another class called planet now we're going to Define our initialization we're going to take in a self an x a y and a mass for the planet now we're just going to Define these here as attributes so self.x is X self.y is y and self. mass is equal to of course our Mass next we're just going to have a draw function so we're going to say Define draw and we're going to take in self and screen and actually we don't need screen uh we can just leave this like this and we'll say screen or win. blit and we're going to blit the planet image okay because we're going to draw the image for our planet right and now where do we want to draw this well I'm actually just going to take int of the self. exposition uh and actually I don't think I need to do that sorry just second guessing myself here I'm going to take self.x minus the planet underscore size and self. Y minus the planet underscore size okay so I'm drawing the planet at this XY position which will ideally be in the middle of the screen well we'll set that but the reason I'm doing this is because I'm drawing a rectangular image but I want to draw it as if it was a circle because if we look at this image here it's a circle right so what I'm going to pass to planet is I'm going to pass the center uh position of where I want to draw the image now when I pass the center image or the center of the image sorry I need to adjust that coordinate because what I'm passing here is the top leftand corner of the image so since my image has a size of Planet size times 2 if I take self.x so whatever the position is and subtract half of the width of the image and half of the height of the image that means we draw it perfectly centered at the XY position hopefully that makes a bit of sense but that's why we need to do that okay so now that we have Planet we're just going to create a planet Planet here and we're just going to draw every flame every frame sorry so we're going to say planet is equal to Planet let me just look at what uh coordinates we want here well actually this is simple we'll just take width an integer divide that by two we'll take height an integer divide that by two and then we'll pass in here our planet mass now all we need to do is just draw our planet you can decide when you want to draw that I will draw it at the very end so nothing is over top of it and I will simply say planet. draw so now we'll get a planet in the middle of the screen let's give that a test and you see that we now have our planet we can start launching objects now obviously they can kind of Hit the planet and they can go through them so next thing we'll do is make it so if we collide with the planet they disappear and then we'll add the gravitational pole okay so let's just quickly do if they collide with the planet so if they collide with the planet there's a few different ways we can do this but the easiest way is just to check the distance so since we're colliding with a circular object we can simply see if the distance between our point and the planet is less than the radius of of the planet if that's the case it means it's inside of that planet okay so to do that we're going to say collided is equal to the math. square root and we're going to take the square root of the object dox minus the planet. X to the exponent 2 plus the object doy minus the planet doy to the exponent 2 if you're not familiar with this this is the distance between two points formula okay so you simply just take the difference in the x coordinates raise the exponent two plus the difference in the ycoordinates and then you take the square root of that and that gives you the overall distance this is similar to how you would find the hypotenuse of a triangle given the two side lengths now we're going to say if offscreen or collided uh then we will remove and that reminds me that I need to actually make this a condition so I need to say this is less than the planet size which is the radius of the planet okay so actually we can do less than or equal to if the if our distance St is less than or equal to Planet size it means we're inside of the planet which means we've collided so we will remove the object from that object's list so we no longer draw it quickly test this out okay shoot at the planet and let's see if it comes out the other side it does not because it collided and we removed it all right last step now is the most fun part which is the gravitational force let me hop onto the drawing tablet again and explain to you how we'll do this welcome back to physics with Tim now let's dive in immediately so we have our planet and we have some rocket ship we know that we have some gravitational pull or effect from the planet to the ship now the factors that are going to affect this are one the mass and two the distance okay now the distance is going to be the more important factor I mean mass is going to have a big impact as well but the further away you are the less uh gravitational pull you're going to have towards the planet and this is is inverse proportional and you're going to see in the equation the distance has a massive effect on how much gravity plays a role so we already know the mass of the two objects well we actually need to calculate to figure out the force or the acceleration to the planet here is going to be the distance so what right now what we're looking for is distance D now once we have that distance that's going to tell us the force or the amount of pull on this object towards the planet as a vector in that direction now you'll see what I mean in one second but let's start by writing out kind of the main thing we want to figure out here which is the force so the force gravitationally between two objects is equal to the following that is going to be the gravitational constant G * M1 * M2 divided by and this is distance squared okay so we already know Mass one and we know Mass 2 those are the mass of the two objects we know the gravitational constant we can just make it up or we can use a real one and then we need need to figure out the distance and then Square it now to figure out the distance we just take the distance between two points on a line we already know how to calculate that so I'm not going to show that to you right here so now let's imagine we've figured this out okay so we actually find force right we get it boom we figured it out now what we need to do though is we need to take this force and we need to turn this into acceleration because the force doesn't actually tell us the speed it tells us the number of Newtons right or whatever the unit ends up being killing Newtons or whatever those newon units are um that's kind of the pull from the object but we need the acceleration so to calculate the acceleration we simply take the force and we divide this by the mass of the object that is moving in this case the mass of the object that is moving is going to be the what is this the spacecraft okay so take the force divided by the mass that gives us acceleration however this is acceleration in a direction this is a vector acceleration okay now the reason it's Vector is because again we have some planet we have some space shuttle and we have some pole here and and we've just figured out a but what we need to do now is break that into its two individual components the ax and the a y now how do we do that well we're using right angle triangles and we know that we always need at least two pieces of information to solve for every piece of the right angle triangle right now when we're looking at this triangle the only thing we have is a however this triangle is the exact same as the two points that we're calculating this acceleration four that means that I'm actually able to solve for this angle Theta once I have that angle Theta I can then figure out the two components using my right angle triangle of my acceleration I know this might be going a little bit fast for you guys but I know a lot of you already know this so what we'll do to start is we'll solve for angle Theta now to solve for angle Theta we use the right angle triangle that we began with that allowed us to determine the distance between the two points so the right angle triangle uh where should I draw this let's draw it over here looks something like this okay you have Planet down here you have object up here and we know these points right we have X2 Y2 and X1 y1 again we want to figure out y we simply take Y2 y1 want to figure out x x is equal to X2 X1 so we now have the opposite and the adjacent side of the triangle we also have the acceleration so now that we have the opposite and the adjacent side we're able to solve fora now to solve for that we're going to take the inverse tangent of one over the other now the way I remember this in case any of you like this shortcut is something called so I'm butchering this C TOA okay now you might laugh at me for the shortcut but I've remembered this for many many years this stands for S is equal to opposite over hypotenuse cosine is equal to adjacent over hypotenuse and tangent is equal to opposite over adjacent now what we need to do is we need to figure out okay what piece of information do we know in this case we know the opposite and we know the adjacent side so what we'll do is we'll use this tangent formula so we write out tangent so this says tan of theta is equal to opposite over adjacent what do we want to solve though we want to solve for Theta because we know opposite and adjacent side so how do we solve for that well we have to take the inverse tangent or the arc tangent So Tan inverse of opposite over adjacent okay that's all we need to do when we take that that is going to give us the Theta or the angle now that we have the angle we can now use the angle to solve for the components of our acceleration so I'm let me just clear the screen here and remember that this is what we have we have our right angle triangle okay we have Theta now we know what that is and we have acceleration and we want a y and a X how do we solve it well to solve for a y we simply can write out our shortcuts again right so so C TOA I'm doing this off the top of my head by the way so excuse any uh you know delays here but I want to solve for what is it let's start with a y now a y here is the opposite from this angle so I need to find where opposite exists but I know the hypotenuse now that's sign so what I'm going to do is I'm going to say the S of theta is equal to the opposite which is a y over a I know a and I know Theta so I simply take s of theta multiplied by a and that gives me my a y now I'll just shortcut this for you I can now do the same thing with cosine to solve for my ax okay so that is how we've now gone from actually figuring out the acceleration in the X and the Y Direction that's it that's what we need to do I know seems a little bit complicated but I promise promise you it is not overwhelming let's dive into the code here just a few lines and then we will have this project done all right so let's dive into the move function here and Implement what I just showed you first thing we need to calculate the distance between our self and the planet so we're going to say math.sqrt if we could spell this correctly don't know what's happening with my typing now to do that it's going to be self.x minus the planet dox okay to the exponent 2 plus self.y minus the planet doy to the exponent 2 we now have the distance we now want to calculate the force well the force is going to be our gravitational constant G times self. mass times the planet do mass divided by the distance to the exponent 2 we've now calculated the force now now we want to calculate the acceleration well the acceleration is simply equal to the force divided by the mass of the object we're moving which in this case is our self next we need to figure out the angle right so we have the acceleration now we need angle Theta and then we can break it into components so the angle is the math. AR tangent of the planet doy minus the self.y and the planet dox minus the self.x now we do it in this order because this is going to give us the direction uh correctly that we're moving in okay if you did it self.y uh first like you swap these around I would actually give you the reverse Direction so just make sure it's this direction okay that's how we have to do this for the arc tangent now we have the angle and the acceleration and now that we have that we can calculate the acceleration in each Direction so we're actually going to say uh acceleration X is equal to the acceleration multipli by the math. co of the angle and we'll say the acceleration in the y direction is equal to acceleration multiplied by the math. sign of the angle giving us acceleration in both directions now acceleration is applied to Velocity so we're going to say self. velocity X plus equals acceleration in the X Direction and self. velore Y plus equals the acceleration in the y direction now we just keep this the same and we take whatever our new velocity is because again we're accelerating right we're changing the velocity it's either going up or down and we're applying that to our X and to our y okay that's it now you'll see that the entire simulation will just work and everything will be good so let's go ahead and run this and see what we get uh and we got an issue none type object has no attribute X okay that is because we forgot to pass Planet here to move so we'll go down here to where we have move and we'll simply pass in our planet and now that should work my apologies let's try this now and we got another issue math. arc tangent takes exactly one argument two was given uh okay ah so the reason here is that I actually wanted to use the arct tangent two function which just simplifies this operation a little bit for us so just make this A1 2 all right let's see if this is the last one third times a charm right come on and there you go we can see that now this is applied we can launch as many objects as we would like if they do end up colliding with the planet they will disappear obviously if you launch them kind of slowly like this they might end up hitting the planet they could get quite close and not hit it really really kind of cool when you actually look at this and see how this works and imagine if you're dealing with Real World objects obviously not everything here is you know the best numbers you could potentially use but but you can mess around with this and change it quite a bit uh and see kind of how the gravity is affected based on the different masses based on the velocities based on uh what do you call it here the gravitational constant that you choose I think this is a really really cool project and if you stuck around until the end give yourself a pat on the back for completing it with that said I'm going to wrap up the video here this was a long recording for me if you guys appreciated this please leave a like subscribe to the channel I do have a few programming courses programming expert. blockchain expert.i if you guys enjoy those or want to check them out please do from the link in the description I always appreciate that and with that said I will see you all in another YouTube video
