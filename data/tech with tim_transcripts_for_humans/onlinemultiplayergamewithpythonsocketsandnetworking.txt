With timestamps:

00:00 - hey guys and welcome back to another
00:02 - YouTube video so in today's video I'm
00:04 - going to be showing you how I created a
00:06 - online multiplayer game using python now
00:09 - this is not really going to be a full
00:10 - tutorial per se but I'm going to show
00:12 - you some of the tools and uh things that
00:14 - I use to do this and hopefully lead you
00:16 - on the right track if you're attempting
00:18 - to do something like this now before I
00:20 - start all of the code that I go through
00:22 - in this video will be available on
00:24 - GitHub so you can check either the
00:26 - pinned comment or the description for
00:27 - that feel free to play around with it
00:29 - take whatever code you want it's not
00:31 - copyrighted like use it for whatever you
00:32 - want I don't care um and also a quick
00:35 - plug I just recently started a Twitter
00:37 - um it's at techwithtim with 2m so that's
00:40 - going to be in the description below
00:41 - make sure you guys go follow that if you
00:43 - want to hear some exclusive updates uh
00:45 - be a part of some polls uh and give your
00:47 - feedback to the channel so that I can
00:49 - incorporate that into my future videos
00:51 - now also I have a Discord server if you
00:53 - guys want help with anything please uh
00:55 - join that I already have close to 100
00:56 - people on that and that's been amazing
00:58 - people asking questions and talking with
00:59 - me me so if you guys would like to be a
01:01 - part of that uh please don't hesitate to
01:03 - join now pretty much what I'm doing here
01:05 - and what this kind of like game is is
01:08 - just a really simple there's just two
01:09 - red blocks on the screen and essentially
01:12 - I have actually I'll show you I have my
01:14 - laptop here and what's going to happen
01:16 - is I'm going to be running a program on
01:17 - my laptop and while I run it on there
01:20 - it's going to run simultaneously on my
01:22 - uh PC which I'm working on right now so
01:24 - pretty much when I move something on
01:26 - there it's going to move on my PC and
01:28 - you'll see that I don't have them like
01:29 - wired up this is working over the uh the
01:32 - local internet connection or server
01:34 - whatever you want to call it that we
01:35 - have now before I go into all of this
01:37 - code which you can see that I'm
01:39 - scrolling through uh I want to talk
01:41 - about a client server system really
01:43 - quick and give you guys some information
01:45 - about that so essentially what you do
01:47 - when you create something that's online
01:49 - or over a network is you have something
01:50 - called a client and something called a
01:52 - server now the client is what you
01:56 - actually see or what the user actually
01:57 - sees and that is what runs on every
02:00 - single machine so actually let me just
02:02 - get up a uh a little drawing window here
02:04 - so I can kind of show you up with a
02:06 - picture all right so let's just say here
02:08 - we're going to have uh two clients and
02:10 - there'll be these little red boxes okay
02:12 - now we have when we have two clients we
02:14 - have um one server okay so we can have
02:18 - as many clients as we want in my case
02:20 - you can only have two because it's just
02:21 - a two-player game but these clients are
02:23 - what you see and what the user sees and
02:25 - what is running the game um and
02:28 - displaying everything to like someone's
02:30 - screen okay now the server is what's
02:32 - translating information between the
02:34 - clients and what's uh holding stuff and
02:37 - really it's just translating information
02:39 - so essentially what happens when we run
02:41 - a game is every time or at least this is
02:42 - what happens in my program uh the client
02:45 - does something so say you click an arrow
02:46 - key it's going to send that information
02:48 - to the server and then that server is
02:50 - going to send the information back to
02:52 - all of the clients okay so every time I
02:54 - move on say client one so I say that's
02:58 - C1 then it is going to send information
03:00 - to client 2 saying hey we moved okay and
03:04 - then same thing here with client 2
03:06 - client 2 is going to send information to
03:07 - the server and then the server is going
03:08 - to send information back to client one
03:11 - now you can imagine if we have a lot of
03:12 - different clients on here um there's a
03:14 - ton of information going back and forth
03:16 - now this server too uh has to be coded
03:19 - right so we can send information in
03:20 - different ways you can send them in
03:21 - strings um but typically we send
03:23 - something called encoded information so
03:25 - that means we have like say in my game
03:28 - we have a bunch of positions right so we
03:29 - have like
03:30 - 00001 and what we're going to be doing
03:32 - is we're going to be sending a bunch of
03:34 - positions to the server in an encoded
03:36 - form it's going to decode them look at
03:38 - it encode them again and then send them
03:41 - back to our other client where they can
03:42 - then be decoded and used this is just to
03:45 - keep everything safe when you're
03:46 - transferring things over the network and
03:48 - this is what python requires so that's a
03:50 - little bit about how clients and server
03:52 - work so essentially client is what runs
03:54 - on your machine server is kind of what's
03:56 - running at one instance and all of your
03:58 - clients are going to connect to that
03:59 - send information back and forth and
04:01 - that's how the game essentially works so
04:04 - what I'm using is uh in Python I'm using
04:06 - something called sockets and threading
04:08 - to do this okay so you know what maybe
04:10 - I'll actually uh show you how this works
04:12 - and then run through the code and you'll
04:14 - get a better idea of what I mean so
04:16 - essentially since we have a client in a
04:18 - server that means we have to be running
04:20 - a server instance now typically you're
04:22 - going to run a server instance on a
04:23 - different machine than uh your actual
04:26 - game is running on but in my case I'm
04:27 - going to run the server on this machine
04:29 - client on this machine and then a client
04:31 - on my laptop which I'll bring up and
04:33 - I'll bring my face cam a bit bigger so
04:34 - you can see that okay so let's do that
04:36 - now uh change it to that okay there we
04:38 - go wow all right that's really big okay
04:40 - so I'm going to run server and you can
04:43 - see here in my uh what do you call
04:44 - console it just says waiting for
04:46 - connection so first I will run an
04:48 - instance of the game on my PC here and
04:50 - just make sure I get it in frame okay so
04:52 - there we go this is what the game looks
04:53 - like you can see I each have red squares
04:55 - uh that other red square is going to be
04:57 - player two and he'll be able to move
04:59 - that on my laptop so let me grab my
05:01 - laptop okay so I'm just going to quickly
05:04 - run uh sorry this is not the most
05:06 - elegant way to do this but I want to
05:07 - show you that I'm actually doing it on
05:08 - two different computers you can see that
05:10 - now it shows up on here and watch I'm
05:11 - going to be hitting the keys on my uh
05:14 - desktop and on my laptop you can see the
05:16 - Red Square moving around now other way
05:18 - around if I hit the keys on my laptop
05:20 - you can see that the red square is
05:21 - moving on my PC now this is happening
05:24 - happening on my local network I don't
05:26 - have like an external server anywhere um
05:28 - but yeah that's pretty cool and if you
05:30 - guys can obviously apply this to make
05:32 - much more complicated games as I'm just
05:34 - doing stuff with a few red squares so
05:36 - let's go ahead and close this and I'll
05:38 - show you what the uh the server looks
05:40 - like now okay so you can see here this
05:43 - is my server and the whole time it was
05:45 - running uh it was giving us a bunch of
05:46 - output so we could see what everything
05:48 - looks like so in this case it says
05:49 - connected to and then it said whatever
05:51 - the host is and like the specific Port
05:54 - okay and then it would say what
05:55 - information it was sending so in this
05:56 - case while I wasn't doing anything it
05:58 - was just sending like static position
05:59 - positions but as we go down here you can
06:00 - see that what's happening is it's
06:03 - sending the position of a certain ID now
06:05 - what I do is I have ID Z represent one
06:07 - of the clients and ID one represent the
06:10 - other one and then it sends the
06:12 - positions of both of these uh IDs and
06:15 - clients and it receives them constantly
06:18 - so it can send it to the other client so
06:19 - it knows where to move that red square
06:22 - so now I'm just going to quit this
06:23 - server as you see um it says connection
06:26 - closed because we both left the uh the
06:28 - server so I'll quit that for now and
06:31 - I'll start running through kind of how
06:32 - some of this code works so that if you
06:33 - guys are playing around with it on
06:35 - GitHub you understand you can apply this
06:36 - to your own games so essentially um we
06:39 - have to have one main file which is
06:41 - going to be our server file so this what
06:43 - I'll go through first and remember how I
06:44 - had to run this before my games could
06:46 - Connect into the server and actually
06:48 - work together so uh I'm using sockets
06:51 - and threading now this is pretty
06:53 - Advanced I'm not really going to talk
06:54 - about how all of them work but pretty
06:56 - much I'm just setting up a socket
06:57 - connection defining my server my Port um
07:01 - and then binding my server to my port
07:03 - okay then I'm ENT essentially listening
07:06 - for connections to the server and once I
07:09 - get a connection uh then I'm going to do
07:11 - something you'll see that in a second so
07:13 - this is going to hold here until we get
07:15 - um or this sorry what this actually does
07:17 - is say we can have a maximum of two
07:18 - connections it says waiting for a
07:20 - connection and then down here in this
07:23 - while true Loop it will keep getting all
07:25 - different connections now essentially
07:27 - what I do here is every time I get a new
07:29 - connection up to two right uh I'm going
07:31 - to start a new thread now this thread is
07:34 - just going to continuously run in the
07:35 - background um until eventually the
07:38 - person disconnects from uh the server
07:41 - okay so it's going to say connected to
07:43 - address it's going to start a new thread
07:44 - and then this Loop will actually keep
07:45 - running while this function is running
07:48 - at the same time and that's how
07:49 - threading works okay so I have my
07:51 - current ID in my position now this
07:53 - little array uh or array list I've been
07:56 - doing too much Java recently is what can
07:58 - you guys see this right let's make the
07:59 - webcam smaller essentially what this is
08:01 - going to do is it's just going to store
08:03 - the positions of the two different
08:04 - characters so we can again send that
08:06 - information back and forth to both
08:08 - clients so what it's going to do here
08:10 - when we first connect is send a little
08:11 - message with the users's ID um either
08:14 - zero or one then we can then store that
08:16 - and I'll show you that in a second then
08:19 - in here what's going to happen is pretty
08:20 - much we're just going to look for
08:21 - information being sent and then we're
08:23 - going to send information back to or
08:25 - we're going to receive information and
08:26 - we're going to send information back to
08:28 - the user and the information that we
08:30 - send back is just going to be the other
08:31 - person's position okay the other
08:33 - player's position so in here uh that's
08:35 - kind of what I'm doing here I'm not
08:36 - really going to talk about all of that
08:39 - okay uh yes so now let's talk about the
08:42 - game so this is the class that on all
08:44 - this does is uh it's actually just like
08:47 - the game code so there's not really any
08:49 - like networking stuff in here that you
08:50 - guys probably wouldn't understand other
08:53 - then in my main game I make a instance
08:56 - of network which is a class that I'll
08:57 - talk about in just a second and then
08:59 - every time I move uh you can see where
09:02 - do I do this h i do it
09:05 - somewhere uh canvas. update send data
09:08 - here it is okay so in send data this is
09:10 - what's going to send my current position
09:12 - in a certain form to the server so the
09:14 - server can read that and then use that
09:17 - now parse data is going to get the
09:18 - information from the server and read it
09:20 - in a form that uh we can understand and
09:22 - then we can then draw the other
09:24 - character in okay so that's about how
09:26 - that works and then network is just a
09:29 - really simple class and all this does is
09:31 - set up again on the client side
09:34 - connecting to the server so it says uh
09:37 - we're setting up a socket giving the
09:39 - host we have the port and then again
09:41 - we're just getting the address to the
09:42 - host and the port and we're just going
09:43 - to call our little connect method here
09:45 - and all this is going to do is connect
09:46 - to the given address which is this right
09:49 - and then we're going to be receiving
09:51 - data from the server and in this case uh
09:53 - what we're doing is we're getting the ID
09:55 - so our current ID so we know when we
09:57 - send information to send it with a zero
09:59 - or one before it and then we have this
10:01 - send uh method here and what this is
10:03 - going to do is we'll send information
10:06 - back to the server and then receive some
10:07 - kind of reply and use that in some uh
10:10 - some way then this run method or this
10:13 - run uh file all this does is Run the
10:15 - game so essentially that is how this
10:18 - networking game works now obviously I
10:19 - have this in like a really simple game
10:21 - but you can apply this uh if you just
10:23 - use my network class and maybe even my
10:25 - server class into any game you want and
10:28 - as long as you have the positions of
10:30 - different characters then you can
10:31 - essentially do whatever you want because
10:33 - if you think about creating a
10:34 - multiplayer game not online well you
10:37 - just check between collision between two
10:39 - characters using their positions and all
10:41 - you really need is the character's
10:43 - position maybe you might want to pass
10:44 - something like Health uh or like some
10:46 - other information like score for each
10:47 - character but that's really easy to do
10:49 - once you know how to send information
10:50 - back and forth to the server which you
10:52 - can kind of figure out if you're a bit
10:53 - more advanced and you read through this
10:55 - so anyways this has kind of been it for
10:58 - this client server
10:59 - U python game I just want to show you
11:01 - guys this get you exposed to it
11:03 - understand that you can do stuff like
11:04 - this with py game or py game with python
11:07 - this is py game though um if you guys
11:09 - want to see more stuff like this and you
11:10 - want to see like a full tutorial on how
11:12 - I would go about actually implementing
11:14 - this into a game and using in like a
11:15 - full P game let me know cuz I'm happy to
11:17 - do some stuff like that and for a lot of
11:19 - you guys that have been waiting uh the
11:20 - machine learning tutorials are coming
11:22 - very soon I'd say within the next 2
11:24 - weeks you should start to see like the
11:26 - intro video I've just began writing them
11:29 - now uh yeah so once Java is done those
11:31 - should be out with that being said if
11:33 - you guys enjoyed the video please make
11:34 - sure you leave a like And subscribe and
11:36 - I will see you again in another
11:37 - [Music]
11:49 - one

Cleaned transcript:

hey guys and welcome back to another YouTube video so in today's video I'm going to be showing you how I created a online multiplayer game using python now this is not really going to be a full tutorial per se but I'm going to show you some of the tools and uh things that I use to do this and hopefully lead you on the right track if you're attempting to do something like this now before I start all of the code that I go through in this video will be available on GitHub so you can check either the pinned comment or the description for that feel free to play around with it take whatever code you want it's not copyrighted like use it for whatever you want I don't care um and also a quick plug I just recently started a Twitter um it's at techwithtim with 2m so that's going to be in the description below make sure you guys go follow that if you want to hear some exclusive updates uh be a part of some polls uh and give your feedback to the channel so that I can incorporate that into my future videos now also I have a Discord server if you guys want help with anything please uh join that I already have close to 100 people on that and that's been amazing people asking questions and talking with me me so if you guys would like to be a part of that uh please don't hesitate to join now pretty much what I'm doing here and what this kind of like game is is just a really simple there's just two red blocks on the screen and essentially I have actually I'll show you I have my laptop here and what's going to happen is I'm going to be running a program on my laptop and while I run it on there it's going to run simultaneously on my uh PC which I'm working on right now so pretty much when I move something on there it's going to move on my PC and you'll see that I don't have them like wired up this is working over the uh the local internet connection or server whatever you want to call it that we have now before I go into all of this code which you can see that I'm scrolling through uh I want to talk about a client server system really quick and give you guys some information about that so essentially what you do when you create something that's online or over a network is you have something called a client and something called a server now the client is what you actually see or what the user actually sees and that is what runs on every single machine so actually let me just get up a uh a little drawing window here so I can kind of show you up with a picture all right so let's just say here we're going to have uh two clients and there'll be these little red boxes okay now we have when we have two clients we have um one server okay so we can have as many clients as we want in my case you can only have two because it's just a twoplayer game but these clients are what you see and what the user sees and what is running the game um and displaying everything to like someone's screen okay now the server is what's translating information between the clients and what's uh holding stuff and really it's just translating information so essentially what happens when we run a game is every time or at least this is what happens in my program uh the client does something so say you click an arrow key it's going to send that information to the server and then that server is going to send the information back to all of the clients okay so every time I move on say client one so I say that's C1 then it is going to send information to client 2 saying hey we moved okay and then same thing here with client 2 client 2 is going to send information to the server and then the server is going to send information back to client one now you can imagine if we have a lot of different clients on here um there's a ton of information going back and forth now this server too uh has to be coded right so we can send information in different ways you can send them in strings um but typically we send something called encoded information so that means we have like say in my game we have a bunch of positions right so we have like 00001 and what we're going to be doing is we're going to be sending a bunch of positions to the server in an encoded form it's going to decode them look at it encode them again and then send them back to our other client where they can then be decoded and used this is just to keep everything safe when you're transferring things over the network and this is what python requires so that's a little bit about how clients and server work so essentially client is what runs on your machine server is kind of what's running at one instance and all of your clients are going to connect to that send information back and forth and that's how the game essentially works so what I'm using is uh in Python I'm using something called sockets and threading to do this okay so you know what maybe I'll actually uh show you how this works and then run through the code and you'll get a better idea of what I mean so essentially since we have a client in a server that means we have to be running a server instance now typically you're going to run a server instance on a different machine than uh your actual game is running on but in my case I'm going to run the server on this machine client on this machine and then a client on my laptop which I'll bring up and I'll bring my face cam a bit bigger so you can see that okay so let's do that now uh change it to that okay there we go wow all right that's really big okay so I'm going to run server and you can see here in my uh what do you call console it just says waiting for connection so first I will run an instance of the game on my PC here and just make sure I get it in frame okay so there we go this is what the game looks like you can see I each have red squares uh that other red square is going to be player two and he'll be able to move that on my laptop so let me grab my laptop okay so I'm just going to quickly run uh sorry this is not the most elegant way to do this but I want to show you that I'm actually doing it on two different computers you can see that now it shows up on here and watch I'm going to be hitting the keys on my uh desktop and on my laptop you can see the Red Square moving around now other way around if I hit the keys on my laptop you can see that the red square is moving on my PC now this is happening happening on my local network I don't have like an external server anywhere um but yeah that's pretty cool and if you guys can obviously apply this to make much more complicated games as I'm just doing stuff with a few red squares so let's go ahead and close this and I'll show you what the uh the server looks like now okay so you can see here this is my server and the whole time it was running uh it was giving us a bunch of output so we could see what everything looks like so in this case it says connected to and then it said whatever the host is and like the specific Port okay and then it would say what information it was sending so in this case while I wasn't doing anything it was just sending like static position positions but as we go down here you can see that what's happening is it's sending the position of a certain ID now what I do is I have ID Z represent one of the clients and ID one represent the other one and then it sends the positions of both of these uh IDs and clients and it receives them constantly so it can send it to the other client so it knows where to move that red square so now I'm just going to quit this server as you see um it says connection closed because we both left the uh the server so I'll quit that for now and I'll start running through kind of how some of this code works so that if you guys are playing around with it on GitHub you understand you can apply this to your own games so essentially um we have to have one main file which is going to be our server file so this what I'll go through first and remember how I had to run this before my games could Connect into the server and actually work together so uh I'm using sockets and threading now this is pretty Advanced I'm not really going to talk about how all of them work but pretty much I'm just setting up a socket connection defining my server my Port um and then binding my server to my port okay then I'm ENT essentially listening for connections to the server and once I get a connection uh then I'm going to do something you'll see that in a second so this is going to hold here until we get um or this sorry what this actually does is say we can have a maximum of two connections it says waiting for a connection and then down here in this while true Loop it will keep getting all different connections now essentially what I do here is every time I get a new connection up to two right uh I'm going to start a new thread now this thread is just going to continuously run in the background um until eventually the person disconnects from uh the server okay so it's going to say connected to address it's going to start a new thread and then this Loop will actually keep running while this function is running at the same time and that's how threading works okay so I have my current ID in my position now this little array uh or array list I've been doing too much Java recently is what can you guys see this right let's make the webcam smaller essentially what this is going to do is it's just going to store the positions of the two different characters so we can again send that information back and forth to both clients so what it's going to do here when we first connect is send a little message with the users's ID um either zero or one then we can then store that and I'll show you that in a second then in here what's going to happen is pretty much we're just going to look for information being sent and then we're going to send information back to or we're going to receive information and we're going to send information back to the user and the information that we send back is just going to be the other person's position okay the other player's position so in here uh that's kind of what I'm doing here I'm not really going to talk about all of that okay uh yes so now let's talk about the game so this is the class that on all this does is uh it's actually just like the game code so there's not really any like networking stuff in here that you guys probably wouldn't understand other then in my main game I make a instance of network which is a class that I'll talk about in just a second and then every time I move uh you can see where do I do this h i do it somewhere uh canvas. update send data here it is okay so in send data this is what's going to send my current position in a certain form to the server so the server can read that and then use that now parse data is going to get the information from the server and read it in a form that uh we can understand and then we can then draw the other character in okay so that's about how that works and then network is just a really simple class and all this does is set up again on the client side connecting to the server so it says uh we're setting up a socket giving the host we have the port and then again we're just getting the address to the host and the port and we're just going to call our little connect method here and all this is going to do is connect to the given address which is this right and then we're going to be receiving data from the server and in this case uh what we're doing is we're getting the ID so our current ID so we know when we send information to send it with a zero or one before it and then we have this send uh method here and what this is going to do is we'll send information back to the server and then receive some kind of reply and use that in some uh some way then this run method or this run uh file all this does is Run the game so essentially that is how this networking game works now obviously I have this in like a really simple game but you can apply this uh if you just use my network class and maybe even my server class into any game you want and as long as you have the positions of different characters then you can essentially do whatever you want because if you think about creating a multiplayer game not online well you just check between collision between two characters using their positions and all you really need is the character's position maybe you might want to pass something like Health uh or like some other information like score for each character but that's really easy to do once you know how to send information back and forth to the server which you can kind of figure out if you're a bit more advanced and you read through this so anyways this has kind of been it for this client server U python game I just want to show you guys this get you exposed to it understand that you can do stuff like this with py game or py game with python this is py game though um if you guys want to see more stuff like this and you want to see like a full tutorial on how I would go about actually implementing this into a game and using in like a full P game let me know cuz I'm happy to do some stuff like that and for a lot of you guys that have been waiting uh the machine learning tutorials are coming very soon I'd say within the next 2 weeks you should start to see like the intro video I've just began writing them now uh yeah so once Java is done those should be out with that being said if you guys enjoyed the video please make sure you leave a like And subscribe and I will see you again in another one
