With timestamps:

00:02 - [Music]
00:08 - in this video i'll show you how to get
00:10 - the balance of any ethereum account as
00:12 - well as how to track that balance over
00:14 - time and then make a graph of that using
00:16 - the ether scan api now this api is
00:19 - completely free i'll show you all of the
00:21 - setup steps in this video and i do want
00:23 - to mention that this video is not
00:24 - designed for beginners so if you are a
00:26 - beginner programmer you can try to
00:27 - follow along but i am expecting that you
00:29 - have some familiarity with python
00:31 - because i'm not going to be explaining
00:32 - all of the basic syntax anyways let me
00:35 - show you a quick demo of what this
00:36 - program looks like so i have an address
00:38 - this will work for any ethereum address
00:40 - whether you own it or not you don't need
00:42 - the private key or anything like that
00:43 - and we're first going to get all of the
00:45 - account transactions we're going to put
00:46 - those on a nice graph and then we're
00:48 - going to look at the account balance so
00:50 - let me run this code it will take a
00:51 - second and then it should give us a
00:53 - graph all right so there we go we now
00:55 - have a graph that we can kind of zoom in
00:56 - on and look at all of the different
00:58 - transactions for so you can notice here
01:00 - that it's saying this account here one
01:02 - of the larger ones on ethereum has about
01:04 - 2 million ethereum currently just look
01:06 - at the bottom right hand corner of this
01:07 - graph and you'll see that and if i close
01:09 - this
01:10 - we see that actually prints out the
01:12 - exact balance which is 2 million i guess
01:14 - this is 3504.57
01:18 - ethereum so quite a large number and
01:20 - there's a ton of other stuff you can do
01:21 - with this api i'm just going to show you
01:23 - these basic features but once you know
01:25 - how to use the api you can get all kinds
01:27 - of other data graph all kinds of awesome
01:29 - stuff and we'll hopefully this video
01:31 - will be helpful to you so with that said
01:32 - let's actually get into the tutorial
01:34 - after a quick word from our sponsor
01:36 - before we get started i need to thank
01:38 - back trace for sponsoring this video and
01:40 - tell you about the virtual game
01:41 - developer summit that they are hosting
01:43 - called break point 2. breakpoint 2 is a
01:46 - free event happening from 10 a.m to 6
01:48 - p.m on february 16th and will be
01:50 - showcasing the tools and best practices
01:53 - developers rely on to ship quality games
01:55 - and apps there will be speakers from
01:57 - companies like unity aws epic games help
02:00 - shift and tons of other industry experts
02:03 - and these talks will discuss game
02:05 - quality testing pipelines performance
02:07 - issues and share valuable tips and
02:09 - insights from developer visionaries and
02:11 - leaders breakpoint 2 provides an
02:13 - opportunity for practitioners in the
02:15 - game development industry to learn from
02:17 - each other network and share best
02:19 - practices and ideas through technical
02:21 - talks don't miss out on this awesome
02:23 - opportunity by signing up today for free
02:25 - from the link in the description thanks
02:27 - again to backtrace for sponsoring this
02:30 - video alright so let's go ahead and get
02:32 - started as i mentioned we're going to
02:34 - use the ether scan api so the first
02:36 - thing we need to do is create an account
02:37 - on this website now i will mention
02:39 - there's a bunch of other ways to get
02:41 - account balances and transactions this
02:43 - is just the easiest way that i found
02:45 - it's also completely free so i figured
02:46 - we'd just use this for this video so go
02:49 - to this website i'll leave it in the
02:50 - description it's just etherscan.io
02:52 - and then you're going to want to sign in
02:54 - or create an account if you don't have
02:55 - one i already have an account so i'm
02:57 - just going to sign in
02:58 - and of course if you don't have one then
02:59 - just click to sign up okay so once you
03:02 - are into your account what you're going
03:04 - to want to do is go to your api keys
03:06 - which should be in the other tab here
03:08 - and then you're just going to create a
03:09 - new api key so i'm going to click on add
03:12 - and then just give it a name we could
03:14 - just do
03:15 - f
03:16 - balance uh if i could split balance
03:18 - correctly pi whatever name it whatever
03:20 - you want
03:21 - i'm going to create that then it will
03:22 - give you the api key you're just going
03:24 - to copy that key and now we have all we
03:26 - need to use the etherscan api that's
03:28 - literally how simple it is and now we
03:30 - can go back to our sublime text window
03:33 - which is what i'm going to use for this
03:34 - video feel free to use whatever editor
03:36 - you want and we can just say our api
03:38 - underscore key
03:40 - if we can put an underscore in here is
03:42 - equal to and then a string and we're
03:43 - just going to paste in this key now i'm
03:45 - going to delete this key after this
03:46 - video so it's fine that i show it to you
03:49 - great so now we have an api key we can
03:51 - use etherscan however before we can
03:53 - start sending requests to this api we
03:55 - need to install a few modules in python
03:58 - so what we need to do is open up our
03:59 - command prompt or terminal depending on
04:01 - your operating system if you're on mac
04:02 - it's going to be terminal and we're
04:04 - going to type in the following pip
04:06 - install and then we want the module
04:08 - called requests now this is going to
04:10 - allow us to send an http request to the
04:13 - api and then get some data and have a
04:14 - look at that inside of our code so i'm
04:16 - going to say pip install request i
04:18 - already have it satisfied for you guys
04:20 - most like you don't already have that
04:22 - and so you need to install that then we
04:24 - also need to install matte plot lib this
04:27 - is going to give us that nice graph that
04:28 - we saw okay so pip install matplotlib
04:31 - nice now for some reason that command
04:33 - did not work for you try pip 3 so pip 3
04:36 - install and then matplotlib as well as
04:40 - request and if pip 3 is not working for
04:42 - you another command you can try is
04:44 - python hyphen m pip
04:46 - install and then request and matplotlib
04:49 - and if this one doesn't work if you try
04:50 - python 3 hyphen m pip install if none of
04:53 - those work for you i will leave two
04:54 - videos on the screen that show you how
04:55 - to fix the pip command one for mac and
04:57 - one for windows all right so hopefully
04:59 - at this point you've installed uh
05:01 - installed requests and you've installed
05:03 - matplotlib so we're gonna import those
05:04 - now i'm gonna say import and actually
05:08 - sorry i'm gonna say from and this is
05:10 - going to be request
05:12 - import and then we're going to import
05:14 - get we just need to use a get request to
05:16 - get some information
05:17 - and we're going to say from
05:19 - map plot
05:21 - lib
05:22 - import
05:23 - this is going to be pi plot as plt now
05:25 - this is just usually what we do and we
05:27 - want to access the graphing aspect of
05:29 - matplotlib all right so now that we've
05:31 - done all of these setup steps here i'm
05:33 - just going to go back to the etherscan
05:35 - website and show you some of the
05:36 - documentation for these apis just so you
05:39 - can understand how to read this and how
05:40 - to modify this code to access some of
05:42 - the other endpoints so in case you're
05:44 - unfamiliar an api is an application
05:46 - programming interface essentially it's
05:48 - some resource on the web that allows us
05:50 - to send requests to it to get some data
05:52 - and then use that data in whatever way
05:54 - we want so in this case we can send
05:56 - requests to the ether scan api we can
05:58 - ask for transactions related to a
06:00 - specific account or specific address we
06:02 - can ask for smart contract calls we can
06:04 - ask for the price of ethereum we can ask
06:07 - for all kinds of different stuff in this
06:09 - video i'm going to show you a very
06:10 - limited feature set of this api but what
06:13 - i do show you will let you use the other
06:15 - endpoints of this api
06:17 - so right now i'm just on the
06:18 - documentation i'll leave this link in
06:20 - the description and you can see that we
06:22 - have a bunch of different endpoints that
06:23 - we can hit we make this full screen
06:25 - related to accounts contracts
06:27 - transactions blocks logs whatever so
06:29 - i've clicked on accounts because this is
06:31 - the one that we want to use
06:32 - and we can see here that there's a bunch
06:34 - of different endpoints so we have one
06:35 - that gives us the ether balance for a
06:37 - single address and this endpoint
06:39 - requires that we send this type of
06:41 - request so requests formatted in this
06:43 - way we're gonna do https colon slash
06:45 - slash
06:47 - io slash api.etherscan.ios8
06:48 - the module we're accessing is account
06:50 - the action is balance this is the
06:52 - address that we want to get the balance
06:54 - for then we have a tag which is going to
06:56 - be the latest balance as well as the api
06:58 - key which is our api key that we
07:00 - generated in kind of the first step in
07:02 - this video now it shows us what the
07:04 - request should look like so we need to
07:05 - pass an address and a tag and then it
07:07 - tells us the response that we're going
07:09 - to get so we're going to get a status a
07:11 - message and then a result and this
07:13 - result is going to be the amount of
07:14 - ethereum in whey which is the smallest
07:17 - unit of ethereum that we have now i'll
07:19 - show you how we can convert way to ether
07:21 - because obviously this looks like a
07:23 - massive amount but it's probably not
07:24 - even an entire ethereum anyways i'll
07:26 - show you that in a second now we also
07:28 - can get the ethereum balance for
07:29 - multiple addresses we can get a list of
07:31 - normal transactions we can get a list of
07:33 - external or sorry internal transactions
07:36 - all kinds of stuff i'm going to show you
07:37 - how to use all of this the point is that
07:39 - you can go to this documentation and
07:41 - very easily see how to call the api and
07:44 - what the response body is going to look
07:45 - like and of course if this is a little
07:47 - bit confusing don't worry we're going to
07:48 - go through all of it okay
07:50 - so the first thing we want to do is we
07:52 - just want to get the balance associated
07:53 - with the single address so what i'm
07:55 - going to do is just copy this entire
07:56 - string right here and paste this into my
07:59 - code and then we'll start modifying it
08:01 - to actually make kind of a get request
08:03 - url that we can send
08:05 - okay so let's go back to our code here
08:07 - i'm just going to paste this in
08:09 - oops so let's paste that i mean to run
08:10 - the code and for now i'm just going to
08:13 - put this inside of a comment
08:16 - so let's make this a multi-line comment
08:17 - just so we can reference it
08:19 - okay
08:20 - so this is the format of the request
08:22 - that we need to send and the base url is
08:24 - this okay so the base url is the part
08:26 - before the question mark all this stuff
08:28 - right here that you see is called query
08:30 - parameters and these are kind of the
08:33 - arguments we're sending to this uh api
08:36 - so this is the api url and these are the
08:38 - arguments that are going to give us the
08:39 - data that we want
08:41 - so i'm going to say that my base
08:43 - underscore url is equal to and then in a
08:45 - string i'm going to paste this right
08:47 - here etherscan.io
08:49 - api
08:50 - then what i want to do is write a
08:52 - function that's actually going to create
08:54 - a url for me based on my api key the tag
08:58 - the address all of this type of stuff
09:00 - okay
09:00 - so what i'm going to do is say define
09:02 - i'm going to say make
09:04 - api
09:05 - underscore url
09:06 - and then inside of here what i'm going
09:08 - to accept is a module
09:10 - a action
09:12 - like this
09:14 - and address
09:15 - and then something called quarks now
09:17 - we'll talk about what quarkx is in a
09:18 - second but for now just put it in there
09:20 - and then what we want to do is say that
09:22 - our url
09:24 - this will be a variable is equal to and
09:26 - then this is going to be the base url
09:28 - plus and then we're going to put in f
09:30 - string and i'll discuss how an f string
09:32 - works in a second we're going to say
09:33 - question
09:34 - question mark module equals and then
09:36 - this is going to be module we're going
09:38 - to say ampersand and then this is going
09:41 - to be action is equal to action we're
09:44 - going to do another ampersand and say
09:46 - that the address is equal to the address
09:50 - okay so let's explain what we're doing
09:52 - here the point is that i want to have
09:54 - multiple api calls right i'm not just
09:56 - going to be calling for the account
09:58 - balance i'm going to be calling for a
09:59 - bunch of stuff and all of these api
10:01 - calls are going to require very similar
10:03 - things we're going to need a module
10:04 - we're going to need an action we're
10:05 - going to need an address and we're also
10:07 - going to need an api key
10:09 - which is formatted like this i'm going
10:10 - to say api key
10:12 - is equal to api key now what this
10:15 - function is going to do for us is it's
10:16 - just going to make a url that we can
10:18 - send a get request to so we don't have
10:21 - to type out this entire thing every
10:23 - single time that we want to make a
10:24 - request so what we're doing is we're
10:26 - adding the module which is equal to
10:28 - whatever module we pass in here the
10:29 - action equal to whatever action right
10:31 - the address whatever address and then
10:33 - these keyword arguments are going to be
10:35 - any extra query parameters say like the
10:37 - tag that we might want to pass to a
10:39 - specific endpoint
10:41 - again oh you'll see how this works in a
10:42 - second but now what i'm going to do is
10:44 - i'm going to look at all of these quarks
10:46 - which are keyword arguments to this
10:48 - function and i'm going to add them to
10:50 - this url so let's just explain korg's
10:52 - quickly in case this is a bit confusing
10:54 - when i call a function
10:56 - these here are called our positional
10:57 - arguments which are required and we need
10:59 - to pass them to the function so the
11:01 - module would be something like account
11:04 - right and then our action would be
11:06 - address or sorry not address balance i'm
11:08 - just copying what's up here
11:10 - okay and then our address is going to be
11:12 - whatever it is so let's just copy this
11:14 - address right here let's put it in a
11:15 - variable called address is equal to that
11:20 - okay come on paste
11:21 - okay i guess i didn't copy it so let's
11:23 - copy
11:24 - and paste okay so we're going to put in
11:26 - the address and then if i do something
11:29 - like tag is equal to latest since this
11:33 - is not one of the positional arguments
11:35 - it's going to be passed in as a keyword
11:37 - argument now this star star quirks
11:38 - allows us to accept an unlimited number
11:40 - of keyword arguments so now i can go
11:42 - here and do something like x equals 2 or
11:44 - anything else that i want doesn't matter
11:46 - i can pass unlimited keyword arguments
11:48 - now inside of here they're going to come
11:50 - in as a dictionary so quarks is going to
11:52 - be equal to a dictionary that's going to
11:53 - have keys
11:55 - and values
11:57 - so if this is what i were to pass tag
11:59 - equals latest and x equals two then the
12:01 - dictionary is going to look like this
12:03 - we're gonna have tag associated with
12:05 - latest and x associated with two so
12:08 - hopefully that makes sense just allows
12:09 - us to accept an unlimited number of
12:11 - keyword arguments then we get them as a
12:13 - dictionary and we can access them inside
12:15 - of here this is a very dynamic way to
12:17 - write this function now what i'm going
12:19 - to do here is i'm going to say 4 key
12:21 - comma
12:22 - value in and this is going to be quarks
12:25 - dot items
12:27 - now dot items is going to give us the
12:28 - key value pair inside of a tuple for
12:31 - every single item in the dictionary so
12:33 - if we had latest and this was associated
12:36 - with
12:37 - tag or other way around i should have
12:39 - wrote it the opposite way we would have
12:41 - let me just do it correctly here
12:43 - tag and latest as one of the items okay
12:46 - because tag is the keyword argument and
12:48 - latest is the value so our key is going
12:49 - to be tag and our value is going to be
12:51 - latest hopefully that makes sense but
12:52 - that's what items gives us so what i'm
12:54 - going to do in here is i'm just going to
12:56 - look at the key and the value and i'm
12:57 - going to add them in this kind of format
12:59 - ampersand whatever the name of the key
13:01 - is equal to whatever the value is to my
13:03 - url so i'm going to say url plus equals
13:06 - and then i'm going to add an f string
13:08 - which is an ampersand and then i'm going
13:10 - to have inside of here the key
13:14 - is equal to the value and since i forgot
13:17 - to explain f strings what f strings are
13:19 - are something that are new in python
13:21 - version 3.6 you need to have 3.6 or
13:23 - above to use them and they allow you to
13:25 - embed expressions directly inside of
13:27 - curly braces so this way i don't have to
13:29 - do a bunch of concatenation i can just
13:30 - write curly brace module
13:32 - curly brace and it will take whatever
13:34 - module is and just place it right inside
13:36 - of this string so really easy
13:38 - okay so there we go
13:40 - we now have a function that can make an
13:42 - api url for us and it will add the api
13:44 - key and all the other stuff that we
13:46 - passed to so let's now try this out and
13:48 - see if it works i'm going to say get
13:51 - address url or get balance url oops
13:56 - is equal to make api url
13:59 - okay and we will just pass all of this
14:02 - and then i'm going to print out the get
14:04 - balance url and let's have a look at it
14:07 - okay so when i run this we see that we
14:09 - have a url now that has etherscan.io api
14:13 - we have question marks stating we're
14:14 - going to have query parameters now we
14:16 - have our module we have our action which
14:18 - is balance we have our address we have
14:20 - our api key and then we have our tag
14:23 - perfect so it just made a url for us
14:25 - that now we can use to actually get this
14:27 - data so i can actually just copy this
14:28 - url and i can put it directly inside of
14:30 - my browser
14:32 - and you'll notice here that when i do
14:33 - this i get the result which is the
14:34 - amount of ethereum i get okay and i get
14:37 - status 1. but i don't want to do this in
14:38 - my browser i want to do this
14:41 - from code so now how do we do that well
14:43 - let me get rid of this because we no
14:44 - longer need this
14:46 - and what i will do now is that i have
14:48 - this get balance url i'm going to send a
14:50 - get request which is kind of equivalent
14:52 - to me going to the url in my browser so
14:54 - what i'm going to do is say that my
14:56 - response is equal to and then this is
14:59 - going to be get and the reason i can use
15:00 - get is because i import it from requests
15:02 - here and i'm going to put
15:04 - right here the
15:06 - get balance url
15:08 - okay because this is the url that i want
15:09 - to hit now what i need to do
15:11 - if i want to get the data associated
15:13 - with this response
15:14 - is i need to say data is equal to
15:16 - response.json
15:18 - now json stands for javascript object
15:20 - notation and that's the format that is
15:22 - going to return my data now in python
15:24 - json is really just a dictionary so what
15:26 - this is going to do is give me a python
15:28 - dictionary containing all of the keys
15:30 - and values in that response so the
15:32 - status message um i guess if it was okay
15:35 - or not and then the value so the actual
15:37 - amount of ethereum for this address so
15:40 - let's now print this out i'm just going
15:41 - to print out data
15:43 - and let's see what we get when we
15:44 - actually send this request
15:46 - okay so i run this and then notice that
15:49 - i get status 1 message okay and then
15:51 - result and this is the amount of
15:53 - ethereum now all i really care about is
15:55 - the actual amount of ethereum so what
15:57 - i'm going to do here is say that i want
15:58 - to get the data at and then actually i
16:01 - forgot what this was was this value um
16:05 - actually i think it was results right
16:06 - yeah i think it was in results so let's
16:08 - print this out now and see what we get
16:11 - and notice that we actually get the
16:13 - result which is the amount of ethereum
16:15 - awesome so now we need to convert this
16:17 - to ether because this is in way which is
16:19 - the smallest unit of ethereum and 1
16:22 - ethereum is equal to 10 to the exponent
16:24 - 18 away so what i'm going to do here is
16:26 - just make a variable at the top of my
16:28 - program i'm going to say ether
16:30 - underscore value
16:31 - is equal to and this is going to be 10
16:33 - to the exponent 18 and all i'm going to
16:35 - do is i'm going to take my result and
16:37 - i'm going to divide it by the f value or
16:40 - the ether value but i need to first
16:42 - convert this to an integer because by
16:44 - default it's going to be a string okay
16:46 - so i'm going to take my result convert
16:47 - that to an int this is the amount of
16:49 - ethereum away i'm going to divide this
16:51 - by 10 to the exponent 18 and that will
16:53 - tell me how much ethereum i have not how
16:55 - much way i have for this bounce okay so
16:58 - let's go ahead and run this and notice
17:00 - here that this has a very large amount
17:03 - of ethereum so 353 318 ethereum and if
17:07 - we want to verify that that is indeed
17:09 - correct we can take this address right
17:11 - here
17:12 - okay again just a random address i'm
17:13 - using
17:14 - and i can punch this into ether scan so
17:17 - let's paste it in here and this is the
17:19 - amount of ethereum that we have looks
17:20 - like that's about one billion dollars
17:23 - nice this definitely is not my wallet in
17:25 - case you were one okay
17:27 - there we go so we now know how to get
17:29 - the balance for an ethereum account so
17:31 - since we've done this let's just put
17:32 - this in a function
17:34 - so we can use it really easily let's say
17:36 - define
17:37 - get
17:38 - account
17:40 - balance
17:41 - okay and then all we're going to take in
17:42 - here is an address
17:44 - and we will do all of this
17:47 - and then for the address yeah we can use
17:49 - address that's good
17:50 - let's see do we need anything else
17:52 - okay i'm just going to say
17:55 - value
17:57 - is equal to this so rather than printing
17:58 - this out i'm just going to put it in a
18:00 - variable and then i'm going to return
18:01 - the value so this way we can just print
18:03 - it outside of the function rather than
18:05 - directly inside so now if i wanted to
18:07 - call this i would just say
18:09 - you know f
18:10 - is equal to get account balance i'm
18:13 - going to pass my address which is a
18:14 - variable i'm just going to take this and
18:16 - put it a bit lower so it's easier to see
18:18 - okay and then i'm going to print out
18:20 - my f like that and we've just done the
18:22 - exact same thing as before but now we
18:24 - have a bit neater code okay there we go
18:26 - we get the bounce and now we can use
18:27 - this function for any single address
18:29 - that we want we just have to pass a
18:30 - different address as a parameter perfect
18:33 - okay hopefully that is clear that was
18:35 - step one hopefully you understand how to
18:37 - make an api call now
18:38 - again all we're doing is using the get
18:40 - method from request we're then getting
18:42 - the response we're looking at the json
18:45 - which is going to be the data associated
18:46 - with the response we're getting the key
18:48 - in the dictionary that we want which is
18:49 - result we're going to convert that to an
18:51 - int divide that by the ether value that
18:54 - gives us how much ethereum we actually
18:56 - have we return that from the function
18:58 - and then we print that out nice so now
19:00 - that we've done that what we want to do
19:01 - is get all of the transactions
19:03 - associated with an ethereum account and
19:05 - then put those on a graph so to do that
19:07 - i'm going to make a new function and i'm
19:08 - going to say get
19:10 - and we'll say
19:11 - transaction if we could spell this
19:14 - correctly i think that's right get
19:16 - transaction
19:17 - get transactions yeah that's fine okay
19:19 - and we'll pass an address so now let's
19:21 - go back to the website
19:23 - let's have a look at the transaction api
19:25 - and what we need for that okay so get
19:28 - ether balance no that's not what we want
19:30 - we want get a list of normal
19:31 - transactions so first let me just
19:33 - explain what is meant by normal so a
19:35 - normal transaction is a transaction that
19:37 - happens between two different ethereum
19:40 - addresses so me sending you money or you
19:42 - sending me money that's a normal
19:43 - transaction an internal transaction
19:46 - which you can see is right here is a
19:48 - transaction that occurs with a smart
19:50 - contract so we're going to want to get
19:52 - both the normal and the internal
19:54 - transactions so we can actually graph
19:56 - the historical value of an ethereum
19:58 - account i'll discuss more what i mean
20:00 - when we start doing all this but the
20:02 - point is we want both the normal
20:03 - transactions as well as the internal
20:05 - transactions because what we're going to
20:07 - do here is we're going to look at the
20:09 - very first transactions and start
20:10 - keeping track of how much ethereum is in
20:12 - the account based on all the different
20:15 - transactions that have occurred
20:16 - now there is actually an easier way to
20:18 - do this because all we're trying to do
20:19 - is graph the balance of the ethereum
20:21 - account over time however it's a pro api
20:24 - so i'll show you if i go all the way
20:25 - down here
20:26 - get historical ether balance of a single
20:28 - address by block number this is exactly
20:30 - what we want to do however it's pro and
20:33 - i don't want to pay for this so rather
20:34 - than us paying for it let's just do it
20:36 - ourselves and write some code that uses
20:38 - uh the free features okay so that's what
20:40 - we're doing
20:41 - so if you're wondering why i'm going
20:42 - through all this it's because i don't
20:43 - want to have to pay and i don't want you
20:44 - guys to have to pay either okay so let's
20:47 - first look at get a normal uh get a list
20:49 - of normal transactions by address so
20:51 - let's copy this into our code and let's
20:52 - do a similar thing to what we did before
20:54 - okay so let's just paste this in here
20:57 - this needs to be a multi-line string or
21:00 - multi-line comment okay so we want the
21:02 - module to be account we want the account
21:04 - uh the action to be transaction list we
21:06 - need the address we need a start block
21:08 - and end block a page an offset
21:10 - optionally a sort and then our api key
21:13 - so inside of here i'm going to say get
21:16 - underscore transactions underscore url
21:19 - is equal to and this is going to be the
21:20 - make api url and we're going to pass in
21:23 - the account
21:25 - we're going to pass in tx list as the
21:27 - module right
21:28 - for the address we'll just pass in the
21:29 - address
21:31 - then we're going to pass a start block
21:33 - this will be zero
21:34 - and n block
21:36 - this will be whatever this end block is
21:38 - here
21:39 - so this is just giving us the range we
21:41 - want to get the transactions for so you
21:42 - could filter this if you want to get the
21:44 - transactions between two different block
21:46 - numbers we just want all of them so
21:47 - we'll go 0 and then a block number that
21:49 - doesn't yet exist so we get all of them
21:51 - we need to pass a page and an offset now
21:54 - the page is going to give us
21:57 - now the page is here because we could
21:59 - get a ton of results and every request
22:01 - that we send can only give us a maximum
22:03 - of 10 000 transactions so if we had say
22:07 - 20 000 transactions that we'd have to
22:09 - send this request again with page equals
22:12 - 2 to get the second page of transactions
22:14 - now i don't think any of you are going
22:15 - to have accounts that have over 10 000
22:17 - transactions so don't worry about it but
22:19 - just want to explain why that's there so
22:21 - we're going to say page is equal to 1.
22:23 - the offset is going to be how many
22:24 - transactions we actually want to get uh
22:28 - i believe that's what it does yeah i
22:30 - think that's how many transactions
22:32 - we want to get so let's just go with 10
22:34 - 000 which is the maximum and then we
22:36 - want to pass sort
22:37 - so if we pass sort ascending then that's
22:39 - going to give us the transaction that
22:41 - came very first
22:43 - when i say first meaning like the
22:44 - earliest possible date first and then
22:46 - the last transaction last which is what
22:48 - we want
22:50 - and then we had one other thing i think
22:52 - it was just the api key though let's see
22:54 - yeah just the api key which we already
22:55 - handled okay great so we've done all
22:57 - that
22:58 - so this should be good to go now
23:01 - and let's just see what happens if we
23:03 - send a get request to this url and just
23:05 - look at the raw data so i'm going to say
23:07 - that my
23:08 - response is equal to and i'm going to
23:11 - say get and then get transactions url
23:15 - and then let's just print out
23:17 - and let's make a variable here
23:19 - data is equal to response.json let's
23:22 - just print out the data and we'll print
23:24 - it actually yeah we'll just print out
23:25 - the data and have a look at what this is
23:27 - okay so let's go full screen
23:29 - let's not create a new file let's run
23:31 - this code well we need to call this
23:34 - function first okay so let's do that
23:35 - first
23:36 - so let's just get rid of this call let's
23:38 - say get
23:40 - transactions like that
23:42 - let's pass our address
23:45 - and let's see what happens
23:49 - okay so we get a bunch of data here
23:51 - which is going to be all of the
23:52 - transactions right there's a huge
23:54 - massive transactions here so let's just
23:55 - go up to the very top and we can see we
23:57 - have status message and then we have
23:59 - result and result is a list and these
24:01 - lists contain all of the different
24:03 - transactions okay this is a huge amount
24:06 - but let's start by just looking at one
24:08 - individual transaction and see what that
24:10 - looks like so to do that i'm going to
24:12 - say the data is equal to response.json
24:15 - at result that's going to be a list
24:17 - right so i can just access the first
24:19 - element in the list to look at one
24:20 - individual transaction so let's look at
24:22 - data zero here let's run this again
24:25 - and let's see if this is a little bit
24:26 - easier to comprehend
24:28 - okay so here we can see that we have a
24:30 - block number a timestamp a hash we have
24:33 - a nonce transaction index we have a from
24:36 - we have a two we have a value we have a
24:39 - gas the gas price
24:41 - we have a bunch of stuff here so what i
24:43 - want to do is i want to loop through all
24:44 - of these transactions and just print out
24:46 - a few details i want to print out the
24:47 - two the from the amount the value which
24:50 - is the amount of ethereum that was
24:51 - actually sent
24:53 - the amount of gas used the timestamp i
24:54 - want to print all that stuff
24:56 - so let's do that
24:57 - so i'm going to go here and i'm going to
24:58 - say four
25:00 - tx standings for a transaction in data
25:03 - now recall data is a list so we can just
25:04 - loop through it and i'm going to say
25:06 - that my
25:08 - 2 is equal to tx
25:10 - 2 okay my from
25:13 - not form my from is equal to tx
25:16 - and then from
25:18 - the value and this is going to be
25:21 - from adr just so we don't mirror the
25:23 - from word in python okay i'm going to
25:25 - say value is equal to and then tx at
25:29 - value i'm going to say the gas is equal
25:32 - to tx
25:34 - at gas used
25:36 - okay and is anything else we want to
25:38 - print here to from we probably want the
25:40 - time stamp so i'll say time is equal to
25:43 - tx at
25:45 - timestamp and then we can print out this
25:47 - data so i'm going to say print
25:48 - and we will say 2
25:50 - colon
25:51 - 2
25:53 - print
25:54 - we're going to say from colon from
25:57 - from underscore adr okay we're going to
26:00 - print this is going to be value which is
26:03 - the amount of ethereum that was sent in
26:04 - this transaction
26:06 - say this is value if i could type
26:08 - properly and then we'll print
26:12 - gas
26:13 - used this will be gas used or just gas
26:17 - okay and then print
26:20 - time colon and that time okay i know i
26:23 - went pretty quickly there but this is
26:25 - pretty straightforward code so let's run
26:26 - this now and see what we get now so i'm
26:28 - just going to print one thing to make
26:29 - kind of a separator between these
26:31 - different addresses here so let's just
26:33 - print this so we can kind of see a
26:34 - separator between them all
26:36 - all right so let's run this
26:38 - and what do we get
26:40 - key error timestamp okay the issue here
26:42 - sorry is that timestamp has a capital
26:45 - for an s here so let's
26:47 - fix that and now let's run this and see
26:49 - what we get
26:52 - all right so we get a bunch of data here
26:54 - uh let's have a look at some of these
26:56 - transactions starting from the very top
26:58 - all right so i'm at the top here now
26:59 - this one's a bit weird we don't have a
27:01 - to address i'm not going to talk about
27:02 - exactly why that happens that's getting
27:04 - deeper into ethereum anyways that we
27:06 - have a two we have a from we have a
27:08 - value we have the gas used and we have
27:10 - the time which is actually a time stamp
27:13 - so what i want to do now is convert this
27:14 - time to an actual date because this
27:17 - isn't very meaningful right i mean maybe
27:19 - some of you can understand what this
27:20 - time stamp means i definitely cannot and
27:22 - so i want to see it in like you know
27:24 - date or day month year right that's
27:26 - ideally what i want to see and then
27:27 - maybe the hour and the minute it
27:28 - occurred as well we're going through we
27:30 - can see all of the transactions
27:32 - for most of these transactions they're
27:33 - only sending zero or one ethereum and
27:36 - actually the one here
27:37 - i believe is in way so not even an ether
27:39 - they sent one way
27:41 - now that's just this account i guess a
27:42 - bunch of the transactions they're doing
27:44 - they're not actually sending data with
27:46 - them and they're not sending any
27:47 - ethereum i don't know why but that's
27:49 - what they're doing
27:51 - all right so now what i'm going to do is
27:53 - convert this timestamp to a date and the
27:55 - way we're going to do that is by using
27:57 - the datetime library so i'm going to say
27:59 - from
28:01 - time
28:03 - date time import date time
28:05 - and then i'm going to say that my time
28:08 - here is equal to and then this is going
28:10 - to be date time dot i think this is from
28:14 - timestamp i just have to look at
28:16 - my
28:17 - code here okay from
28:19 - timestamp
28:20 - we're going to pass this in
28:23 - and i think this should be good
28:26 - okay actually we need to convert this to
28:27 - an in sorry because this is going to be
28:28 - a string and now this should actually
28:30 - give us a proper date as opposed to a
28:33 - integer
28:34 - okay so let's try this here and let's
28:36 - see what we get
28:38 - and there we go so we get 2022 0201 and
28:41 - then the time that this occurred at
28:43 - perfect we are now getting the correct
28:45 - time
28:46 - all right so i don't really like using
28:48 - this address for this example because a
28:49 - lot of the transactions don't actually
28:51 - send any ethereum so let me find a
28:53 - different one then i'll be right back
28:54 - all right so i just found another
28:55 - address here that's going to be better
28:57 - to use because the transactions make a
28:58 - bit more sense than the other account we
29:00 - were using so let's just run this code
29:01 - now with this new one and see what
29:03 - transactions we're getting
29:05 - okay there we go so see the value is
29:07 - much higher now they're actually sending
29:08 - ethereum with a lot of the transactions
29:10 - they're doing now this is in way so what
29:12 - i want to do is convert this value to
29:14 - ether so let's do that we already know
29:16 - how to do that i'm just going to take
29:17 - the value i'm going to convert this to
29:19 - an int because by default these are
29:20 - going to be strings and i'm going to
29:22 - define divide this by the ether value
29:25 - okay let's run the code now
29:27 - and let's see what we get
29:29 - and notice now that we actually get the
29:31 - amount of ethereum and they're sending a
29:32 - very large amount of ethereum with a lot
29:34 - of their transactions this account is
29:36 - one of the whale accounts so that makes
29:38 - sense perfect okay so now what i want to
29:41 - do is i just want to do a better
29:42 - calculation for the gas because if i go
29:45 - back to here you're going to see that
29:47 - the response for getting the normal
29:49 - transactions we have gas as well as the
29:52 - gas priced and the gas used now what we
29:54 - actually care about here is the gas used
29:56 - and we want to multiply this by the gas
29:58 - price to determine how much this
30:00 - actually cost okay so we need to take
30:02 - the gas used and multiply it by the gas
30:04 - price that just gives us how much it
30:06 - actually costs to well do this
30:07 - transaction so let's fix that now
30:09 - because right now when i say gas used
30:11 - that's not exactly what we want we want
30:13 - to have i guess gas
30:16 - cost okay
30:17 - so i'm going to take my gas i'm going to
30:19 - convert this to an int and i'm just
30:21 - going to multiply this by the int of and
30:24 - this is going to be tx
30:26 - at and this is going to be gas price
30:28 - like that okay and then we're going to
30:30 - divide all of this
30:32 - by the ether value and i don't need
30:33 - parentheses because order of operations
30:35 - is is the same here with multiplication
30:37 - and division okay so let's try this now
30:40 - and let's see what we get
30:43 - and
30:44 - we see uh oh geez yeah it's gas price
30:47 - not gas price okay let's fix that
30:51 - all right now we actually get a more
30:53 - useful gas price here and you can see
30:55 - that the price of gas is super expensive
30:57 - on ethereum
30:58 - okay so there we go now we know the gas
31:01 - cost as well as the value and so this
31:03 - actually tells us how much it costs
31:04 - someone to submit a transaction so now
31:07 - that we have all of this data what i
31:08 - want to do is start making a graph that
31:10 - will give us the balance of an ethereum
31:12 - account over time now to do that we need
31:14 - to start from the very first transaction
31:16 - and at the very first transaction our
31:18 - account balance is zero so before we
31:20 - have any transactions in the account we
31:21 - have a zero balance then we're going to
31:23 - look at every single transaction we're
31:25 - going to determine if we're sending
31:27 - money or receiving money and then we're
31:28 - either going to subtract money from our
31:30 - account or add money to our account
31:33 - now the thing is when we are sending
31:35 - money what we are actually doing is
31:36 - we're paying a gas price as well as the
31:39 - value of our transaction so we need to
31:42 - add those two values together and
31:43 - subtract that from the current balance
31:45 - in our account to get an accurate
31:48 - account balance however when we're
31:50 - receiving money we're not paying the gas
31:52 - whoever sent it was paying the gas so we
31:54 - only care about the value
31:55 - and we're going to add that to our
31:57 - account
31:58 - hopefully that makes sense but the way
31:59 - we're going to do this
32:01 - is we're going to say current
32:02 - underscore balance
32:05 - is equal to zero and then we're going to
32:08 - increment or decrement this balance in
32:10 - this for loop based on every transaction
32:12 - and since our transactions are ordered
32:14 - by ascending
32:16 - what that means is that we can just go
32:17 - through all of them in the order we get
32:19 - them because the first transaction we
32:21 - get is the very first transaction that
32:22 - ever occurred in this account hopefully
32:25 - that makes a bit of sense but that's how
32:26 - we're going to do this we're going to
32:26 - loop through all the transactions and
32:28 - kind of increment or decrement the
32:29 - current balance we're going to store all
32:31 - of these results in a list so we're
32:32 - going to say balances is equal to that
32:34 - we're also going to say times is equal
32:36 - to this so we keep track of what time
32:38 - each balance occurred at and then we'll
32:41 - be able to graph that data
32:43 - okay so we have two from value gas time
32:46 - i don't want to print out this data
32:47 - anymore what i want to do is determine
32:50 - if we were the one who were sending
32:51 - money or receiving money now if we were
32:53 - the ones who were sending money the from
32:55 - address is going to be our address if
32:57 - we're the ones receiving money then the
32:59 - two address is going to be our address
33:00 - right that's the way the transactions
33:02 - work so i'm going to say money
33:03 - underscore in is equal to and then this
33:06 - is going to be the from address
33:09 - actually we'll just do this we'll say
33:10 - the to
33:12 - is equal to
33:13 - and then address okay now address is the
33:15 - parameter right here that we passed now
33:17 - what we do need to do is just convert
33:18 - the address to lower cases as well as
33:21 - the two address because we might have
33:22 - them in upper cases and that might mess
33:24 - it up so we're just going to convert
33:25 - both of them to lower cases to make sure
33:27 - that we're getting an accurate
33:28 - comparison here okay so this tells us if
33:30 - we have money in
33:31 - so we're going to say if money in then
33:34 - what we want to do is we want to take
33:36 - the value and we want to add that to the
33:37 - current balance so we're going to say
33:39 - current balance
33:40 - plus equals value
33:42 - otherwise if we're not having money in
33:44 - if money is coming out then what we want
33:45 - to do is say the current balance minus
33:48 - equals and this is going to be the value
33:50 - plus the gas okay because again if we
33:53 - are sending a transaction we're paying
33:55 - the gas we need to take the gas used and
33:56 - the gas price multiply them together
33:58 - divide them by the ether and then that
34:00 - tells us how much it costs us for gas we
34:02 - add that to the value which is how much
34:04 - ethereum we sent that gives us an
34:06 - accurate current balance okay there we
34:08 - go so that's what we're doing for
34:09 - current balance and then we're going to
34:11 - say
34:12 - balances
34:13 - like this
34:15 - oops come on can can i type properly
34:17 - here balances dot append and we're going
34:20 - to append whatever the current balance
34:22 - is and we're also going to say times dot
34:25 - append and we're going to append
34:27 - whatever the current time is because
34:29 - we're going to use one of these lists
34:30 - for the x-axis the other one for the
34:32 - y-axis i actually
34:34 - did them in the opposite order this is
34:35 - going to be x this is going to be y
34:37 - okay now we also have to remember here
34:39 - that we're only looking at the external
34:41 - or normal transactions we also want to
34:43 - look at the internal transactions we're
34:45 - going to add that to the equation here
34:46 - in one second so let's just run the code
34:48 - for right now but let's print out what
34:50 - the current balance is at the end just
34:53 - to see how far off we are when we're
34:54 - only looking at the normal transactions
34:57 - okay
34:58 - so let's run all this here and see what
34:59 - we get
35:01 - and we get a balance of 200 000 or sorry
35:04 - 2 million and then a 3504 ethereum which
35:07 - i think was almost exactly what the
35:09 - actual balance was uh when we got the
35:12 - account bounce
35:13 - now the issue is this might work for
35:15 - this specific account because it might
35:17 - not have any internal transactions but
35:19 - there will be a lot of accounts that
35:20 - have a ton of smart contract calls and
35:22 - we need to account for the value being
35:24 - sent there
35:25 - and all of those types of transactions
35:27 - so we need to add that in here and the
35:29 - way we're going to do that it's just
35:30 - going to go back to etherscan here
35:32 - is we're now going to get the list of
35:34 - internal transactions and we're going to
35:36 - combine that with the list of normal
35:39 - transactions and then loop through all
35:40 - of them in a similar way so this is what
35:43 - we have here we have tx list internal so
35:45 - the only change here is that we just
35:46 - have to pass tx list internal as opposed
35:49 - to account
35:50 - for the url that we want and we'll get a
35:52 - very similar response
35:54 - okay so let's check this out we're going
35:56 - to go now after we get this
35:59 - we're going to say get
36:01 - in
36:02 - terminal underscore tx
36:05 - underscore url
36:07 - and then this is going to be
36:09 - make api call
36:10 - and let's actually copy all of this
36:13 - okay so let's just paste this here
36:16 - and then rather than getting the tx list
36:18 - we want tx
36:21 - internal list i think that's what it was
36:23 - let's just check this here
36:25 - tx list internal okay so i did it wrong
36:28 - let's fix that okay tx list internal so
36:31 - again it's just the exact same thing as
36:32 - what we had up here except now we're
36:34 - doing txlist internal to get all of the
36:36 - internal transactions
36:38 - but we still need to send a request so
36:39 - we're going to say response to
36:42 - is equal to get and then this is going
36:43 - to be get internal tx url
36:45 - or sorry get and then pass here
36:48 - get internal tx url
36:51 - and in fact
36:53 - i shouldn't really be calling these get
36:55 - i'm just going to put transaction url
36:58 - and internal tx url just because that
37:00 - makes more sense and get balance url
37:02 - yeah i'll just make that balance url
37:04 - okay anyways now that we have that i'm
37:06 - going to say data2 is equal to response
37:08 - to dot json
37:10 - and then we're going to access the
37:11 - result as well so now we're going to get
37:14 - one list of results and another list of
37:15 - results they're both going to be ordered
37:17 - however what i want to do is combine
37:19 - them
37:20 - so i'm going to say data dot extend
37:23 - data2 this is going to take all of the
37:25 - elements and data too and simply add
37:27 - them to the current data list however
37:30 - now we're not going to have these sorted
37:32 - because we're going to have all of the
37:32 - normal transactions then all of the
37:34 - internal transactions so i want to sort
37:37 - all of them so that we have a correct
37:39 - list here
37:40 - so i'm going to say dot sort actually
37:42 - let's do this after let's go data dot
37:44 - sort and then we want to sort all of
37:46 - these by the key which is equal to
37:48 - lambda i'll explain this in a second
37:51 - so lambda x colon x at and then
37:54 - timestamp
37:56 - and then make sure we have a capital s
37:58 - here for timestamp
37:59 - okay so what we're doing is we're
38:00 - getting all of the regular transactions
38:02 - all the internal transactions right here
38:04 - we're then going to extend our data list
38:07 - by data2 so our normal by our internal
38:10 - now it's no longer going to be sorted
38:11 - because we have all of the new
38:13 - transactions we got at the end of this
38:15 - list so we need to resort this list
38:17 - we're going to say data.sort
38:19 - the key we're going to sort by is going
38:20 - to be every element's timestamp so
38:23 - that's what this is doing we're saying
38:24 - okay for every element which is going to
38:26 - be represented by x we're going to grab
38:27 - the timestamp and we're going to sort by
38:29 - that timestamp and we can convert this
38:31 - to an int just to make sure we're going
38:32 - to get a correct sorting here because by
38:34 - default this is a string although i
38:36 - think it will work even if we didn't
38:37 - convert it to an it okay so now we
38:39 - should get every single transaction and
38:40 - loop through all of them let's run this
38:42 - though and see if this is working
38:48 - all right so it looks like it is working
38:49 - we got two hundred thousand uh i got two
38:51 - million and then again three hundred
38:53 - three thousand five hundred four
38:54 - apparently i cannot read numbers however
38:56 - i will tell you
38:58 - that this will not work the way it is if
39:00 - we have any internal transactions now
39:03 - this account doesn't have any internal
39:05 - transactions i should probably find one
39:06 - that does however if we go and we look
39:09 - at the response here
39:11 - we can see that we only have gas and gas
39:14 - used we don't have a gas price so i just
39:17 - need to fix something in my code to
39:18 - account for the fact that my internal
39:20 - transactions don't have a gas price on
39:22 - them and we're just going to have to use
39:24 - the gas used as how much gas was used
39:27 - okay because the gas won't really have a
39:29 - price with the internal transactions i
39:31 - understand it's a little bit weird but
39:32 - we just have to account for the fact
39:33 - that we don't have that key in these
39:35 - responses so what i'm going to do here
39:37 - is say if
39:38 - and i'm just going to say
39:40 - gas price in and then tx then we'll
39:44 - calculate the gas using this
39:46 - but otherwise we'll just calculate the
39:48 - gas by being the gas used and then
39:50 - divided by the ether value okay
39:52 - divided by ether value so this will work
39:54 - the exact same way as before now again
39:56 - we're just going to account for the fact
39:57 - that the internal transactions don't
39:58 - have this gas price uh key
40:01 - okay so we're almost done we now have
40:04 - all of the data that we need we're
40:05 - getting an accurate current balance what
40:07 - we want to do now is actually graph this
40:09 - using matplotlib now this is super easy
40:11 - to do
40:12 - all we're going to do is say plt
40:14 - dot plot
40:15 - and we're going to plot as the x-axis
40:17 - are times and the y-axis are balances
40:20 - now i might be passing this in the wrong
40:22 - order we'll see in one second but i'm
40:24 - going to pass times and balances now
40:26 - since these are the same length this
40:28 - will work because we're going to match
40:29 - every balance with each time
40:31 - and then if i want to show this i just
40:33 - have to say plt.show okay so let's do
40:36 - plt.show let's run this
40:39 - and let's see what we get now
40:44 - all right there we go we get a nice
40:45 - graph the same one that i showed you in
40:47 - the demo at the very beginning and it
40:49 - looks like all this is working so our
40:51 - y-axis is going to be the ethereum
40:53 - amount in our account and then the
40:55 - y-axis is going to be the amount of time
40:57 - or the date right so if i go here you
40:59 - can see that we're at the correct
41:00 - balance uh just about 2 million ethereum
41:03 - in the account get an absurd amount of
41:05 - ethereum
41:06 - okay there you go so that is really all
41:09 - i need to show you for this video now
41:11 - hopefully this showed you how to work
41:13 - with the ether scan api and how you can
41:16 - easily ask for more information again we
41:18 - were calling different api endpoints
41:20 - very easily because of this nice
41:22 - function we made make api url you can
41:24 - reuse this function as many ways as you
41:26 - would like call all of the different
41:28 - types of endpoints get that data look at
41:30 - the data so on and so forth i showed you
41:33 - how to get the account balance as well
41:34 - as how to look at all of the
41:36 - transactions and then how to get the
41:38 - balance over time from those different
41:40 - transactions
41:42 - now again a bunch of other stuff you can
41:43 - do i hope you guys mess around with the
41:45 - api and make some cool stuff i will
41:47 - mention that i'm sure a lot of you want
41:48 - to actually get the ethereum value like
41:51 - the dollar amount in your account not
41:53 - the amount of ethereum now to do that
41:56 - for every single time that you have you
41:58 - just have to look up what the ethereum
41:59 - price is i believe you can do that from
42:02 - the ether scan api and then you would
42:04 - replace your balances with the actual
42:07 - balance multiplied by whatever the price
42:09 - of ethereum is and then that would give
42:11 - you the dollar amount of your account on
42:13 - every single day that a new transaction
42:15 - occurred now you also could do this over
42:16 - every single day you guys can kind of
42:18 - figure it out from here because i've
42:19 - given given you the building blocks to
42:21 - build a type of project like that
42:23 - anyways with that said i am going to
42:24 - wrap up the video here i hope you guys
42:26 - found this helpful if you did make sure
42:27 - to leave a like subscribe to the channel
42:29 - and i will see you in another one
42:33 - [Music]

Cleaned transcript:

in this video i'll show you how to get the balance of any ethereum account as well as how to track that balance over time and then make a graph of that using the ether scan api now this api is completely free i'll show you all of the setup steps in this video and i do want to mention that this video is not designed for beginners so if you are a beginner programmer you can try to follow along but i am expecting that you have some familiarity with python because i'm not going to be explaining all of the basic syntax anyways let me show you a quick demo of what this program looks like so i have an address this will work for any ethereum address whether you own it or not you don't need the private key or anything like that and we're first going to get all of the account transactions we're going to put those on a nice graph and then we're going to look at the account balance so let me run this code it will take a second and then it should give us a graph all right so there we go we now have a graph that we can kind of zoom in on and look at all of the different transactions for so you can notice here that it's saying this account here one of the larger ones on ethereum has about 2 million ethereum currently just look at the bottom right hand corner of this graph and you'll see that and if i close this we see that actually prints out the exact balance which is 2 million i guess this is 3504.57 ethereum so quite a large number and there's a ton of other stuff you can do with this api i'm just going to show you these basic features but once you know how to use the api you can get all kinds of other data graph all kinds of awesome stuff and we'll hopefully this video will be helpful to you so with that said let's actually get into the tutorial after a quick word from our sponsor before we get started i need to thank back trace for sponsoring this video and tell you about the virtual game developer summit that they are hosting called break point 2. breakpoint 2 is a free event happening from 10 a.m to 6 p.m on february 16th and will be showcasing the tools and best practices developers rely on to ship quality games and apps there will be speakers from companies like unity aws epic games help shift and tons of other industry experts and these talks will discuss game quality testing pipelines performance issues and share valuable tips and insights from developer visionaries and leaders breakpoint 2 provides an opportunity for practitioners in the game development industry to learn from each other network and share best practices and ideas through technical talks don't miss out on this awesome opportunity by signing up today for free from the link in the description thanks again to backtrace for sponsoring this video alright so let's go ahead and get started as i mentioned we're going to use the ether scan api so the first thing we need to do is create an account on this website now i will mention there's a bunch of other ways to get account balances and transactions this is just the easiest way that i found it's also completely free so i figured we'd just use this for this video so go to this website i'll leave it in the description it's just etherscan.io and then you're going to want to sign in or create an account if you don't have one i already have an account so i'm just going to sign in and of course if you don't have one then just click to sign up okay so once you are into your account what you're going to want to do is go to your api keys which should be in the other tab here and then you're just going to create a new api key so i'm going to click on add and then just give it a name we could just do f balance uh if i could split balance correctly pi whatever name it whatever you want i'm going to create that then it will give you the api key you're just going to copy that key and now we have all we need to use the etherscan api that's literally how simple it is and now we can go back to our sublime text window which is what i'm going to use for this video feel free to use whatever editor you want and we can just say our api underscore key if we can put an underscore in here is equal to and then a string and we're just going to paste in this key now i'm going to delete this key after this video so it's fine that i show it to you great so now we have an api key we can use etherscan however before we can start sending requests to this api we need to install a few modules in python so what we need to do is open up our command prompt or terminal depending on your operating system if you're on mac it's going to be terminal and we're going to type in the following pip install and then we want the module called requests now this is going to allow us to send an http request to the api and then get some data and have a look at that inside of our code so i'm going to say pip install request i already have it satisfied for you guys most like you don't already have that and so you need to install that then we also need to install matte plot lib this is going to give us that nice graph that we saw okay so pip install matplotlib nice now for some reason that command did not work for you try pip 3 so pip 3 install and then matplotlib as well as request and if pip 3 is not working for you another command you can try is python hyphen m pip install and then request and matplotlib and if this one doesn't work if you try python 3 hyphen m pip install if none of those work for you i will leave two videos on the screen that show you how to fix the pip command one for mac and one for windows all right so hopefully at this point you've installed uh installed requests and you've installed matplotlib so we're gonna import those now i'm gonna say import and actually sorry i'm gonna say from and this is going to be request import and then we're going to import get we just need to use a get request to get some information and we're going to say from map plot lib import this is going to be pi plot as plt now this is just usually what we do and we want to access the graphing aspect of matplotlib all right so now that we've done all of these setup steps here i'm just going to go back to the etherscan website and show you some of the documentation for these apis just so you can understand how to read this and how to modify this code to access some of the other endpoints so in case you're unfamiliar an api is an application programming interface essentially it's some resource on the web that allows us to send requests to it to get some data and then use that data in whatever way we want so in this case we can send requests to the ether scan api we can ask for transactions related to a specific account or specific address we can ask for smart contract calls we can ask for the price of ethereum we can ask for all kinds of different stuff in this video i'm going to show you a very limited feature set of this api but what i do show you will let you use the other endpoints of this api so right now i'm just on the documentation i'll leave this link in the description and you can see that we have a bunch of different endpoints that we can hit we make this full screen related to accounts contracts transactions blocks logs whatever so i've clicked on accounts because this is the one that we want to use and we can see here that there's a bunch of different endpoints so we have one that gives us the ether balance for a single address and this endpoint requires that we send this type of request so requests formatted in this way we're gonna do https colon slash slash io slash api.etherscan.ios8 the module we're accessing is account the action is balance this is the address that we want to get the balance for then we have a tag which is going to be the latest balance as well as the api key which is our api key that we generated in kind of the first step in this video now it shows us what the request should look like so we need to pass an address and a tag and then it tells us the response that we're going to get so we're going to get a status a message and then a result and this result is going to be the amount of ethereum in whey which is the smallest unit of ethereum that we have now i'll show you how we can convert way to ether because obviously this looks like a massive amount but it's probably not even an entire ethereum anyways i'll show you that in a second now we also can get the ethereum balance for multiple addresses we can get a list of normal transactions we can get a list of external or sorry internal transactions all kinds of stuff i'm going to show you how to use all of this the point is that you can go to this documentation and very easily see how to call the api and what the response body is going to look like and of course if this is a little bit confusing don't worry we're going to go through all of it okay so the first thing we want to do is we just want to get the balance associated with the single address so what i'm going to do is just copy this entire string right here and paste this into my code and then we'll start modifying it to actually make kind of a get request url that we can send okay so let's go back to our code here i'm just going to paste this in oops so let's paste that i mean to run the code and for now i'm just going to put this inside of a comment so let's make this a multiline comment just so we can reference it okay so this is the format of the request that we need to send and the base url is this okay so the base url is the part before the question mark all this stuff right here that you see is called query parameters and these are kind of the arguments we're sending to this uh api so this is the api url and these are the arguments that are going to give us the data that we want so i'm going to say that my base underscore url is equal to and then in a string i'm going to paste this right here etherscan.io api then what i want to do is write a function that's actually going to create a url for me based on my api key the tag the address all of this type of stuff okay so what i'm going to do is say define i'm going to say make api underscore url and then inside of here what i'm going to accept is a module a action like this and address and then something called quarks now we'll talk about what quarkx is in a second but for now just put it in there and then what we want to do is say that our url this will be a variable is equal to and then this is going to be the base url plus and then we're going to put in f string and i'll discuss how an f string works in a second we're going to say question question mark module equals and then this is going to be module we're going to say ampersand and then this is going to be action is equal to action we're going to do another ampersand and say that the address is equal to the address okay so let's explain what we're doing here the point is that i want to have multiple api calls right i'm not just going to be calling for the account balance i'm going to be calling for a bunch of stuff and all of these api calls are going to require very similar things we're going to need a module we're going to need an action we're going to need an address and we're also going to need an api key which is formatted like this i'm going to say api key is equal to api key now what this function is going to do for us is it's just going to make a url that we can send a get request to so we don't have to type out this entire thing every single time that we want to make a request so what we're doing is we're adding the module which is equal to whatever module we pass in here the action equal to whatever action right the address whatever address and then these keyword arguments are going to be any extra query parameters say like the tag that we might want to pass to a specific endpoint again oh you'll see how this works in a second but now what i'm going to do is i'm going to look at all of these quarks which are keyword arguments to this function and i'm going to add them to this url so let's just explain korg's quickly in case this is a bit confusing when i call a function these here are called our positional arguments which are required and we need to pass them to the function so the module would be something like account right and then our action would be address or sorry not address balance i'm just copying what's up here okay and then our address is going to be whatever it is so let's just copy this address right here let's put it in a variable called address is equal to that okay come on paste okay i guess i didn't copy it so let's copy and paste okay so we're going to put in the address and then if i do something like tag is equal to latest since this is not one of the positional arguments it's going to be passed in as a keyword argument now this star star quirks allows us to accept an unlimited number of keyword arguments so now i can go here and do something like x equals 2 or anything else that i want doesn't matter i can pass unlimited keyword arguments now inside of here they're going to come in as a dictionary so quarks is going to be equal to a dictionary that's going to have keys and values so if this is what i were to pass tag equals latest and x equals two then the dictionary is going to look like this we're gonna have tag associated with latest and x associated with two so hopefully that makes sense just allows us to accept an unlimited number of keyword arguments then we get them as a dictionary and we can access them inside of here this is a very dynamic way to write this function now what i'm going to do here is i'm going to say 4 key comma value in and this is going to be quarks dot items now dot items is going to give us the key value pair inside of a tuple for every single item in the dictionary so if we had latest and this was associated with tag or other way around i should have wrote it the opposite way we would have let me just do it correctly here tag and latest as one of the items okay because tag is the keyword argument and latest is the value so our key is going to be tag and our value is going to be latest hopefully that makes sense but that's what items gives us so what i'm going to do in here is i'm just going to look at the key and the value and i'm going to add them in this kind of format ampersand whatever the name of the key is equal to whatever the value is to my url so i'm going to say url plus equals and then i'm going to add an f string which is an ampersand and then i'm going to have inside of here the key is equal to the value and since i forgot to explain f strings what f strings are are something that are new in python version 3.6 you need to have 3.6 or above to use them and they allow you to embed expressions directly inside of curly braces so this way i don't have to do a bunch of concatenation i can just write curly brace module curly brace and it will take whatever module is and just place it right inside of this string so really easy okay so there we go we now have a function that can make an api url for us and it will add the api key and all the other stuff that we passed to so let's now try this out and see if it works i'm going to say get address url or get balance url oops is equal to make api url okay and we will just pass all of this and then i'm going to print out the get balance url and let's have a look at it okay so when i run this we see that we have a url now that has etherscan.io api we have question marks stating we're going to have query parameters now we have our module we have our action which is balance we have our address we have our api key and then we have our tag perfect so it just made a url for us that now we can use to actually get this data so i can actually just copy this url and i can put it directly inside of my browser and you'll notice here that when i do this i get the result which is the amount of ethereum i get okay and i get status 1. but i don't want to do this in my browser i want to do this from code so now how do we do that well let me get rid of this because we no longer need this and what i will do now is that i have this get balance url i'm going to send a get request which is kind of equivalent to me going to the url in my browser so what i'm going to do is say that my response is equal to and then this is going to be get and the reason i can use get is because i import it from requests here and i'm going to put right here the get balance url okay because this is the url that i want to hit now what i need to do if i want to get the data associated with this response is i need to say data is equal to response.json now json stands for javascript object notation and that's the format that is going to return my data now in python json is really just a dictionary so what this is going to do is give me a python dictionary containing all of the keys and values in that response so the status message um i guess if it was okay or not and then the value so the actual amount of ethereum for this address so let's now print this out i'm just going to print out data and let's see what we get when we actually send this request okay so i run this and then notice that i get status 1 message okay and then result and this is the amount of ethereum now all i really care about is the actual amount of ethereum so what i'm going to do here is say that i want to get the data at and then actually i forgot what this was was this value um actually i think it was results right yeah i think it was in results so let's print this out now and see what we get and notice that we actually get the result which is the amount of ethereum awesome so now we need to convert this to ether because this is in way which is the smallest unit of ethereum and 1 ethereum is equal to 10 to the exponent 18 away so what i'm going to do here is just make a variable at the top of my program i'm going to say ether underscore value is equal to and this is going to be 10 to the exponent 18 and all i'm going to do is i'm going to take my result and i'm going to divide it by the f value or the ether value but i need to first convert this to an integer because by default it's going to be a string okay so i'm going to take my result convert that to an int this is the amount of ethereum away i'm going to divide this by 10 to the exponent 18 and that will tell me how much ethereum i have not how much way i have for this bounce okay so let's go ahead and run this and notice here that this has a very large amount of ethereum so 353 318 ethereum and if we want to verify that that is indeed correct we can take this address right here okay again just a random address i'm using and i can punch this into ether scan so let's paste it in here and this is the amount of ethereum that we have looks like that's about one billion dollars nice this definitely is not my wallet in case you were one okay there we go so we now know how to get the balance for an ethereum account so since we've done this let's just put this in a function so we can use it really easily let's say define get account balance okay and then all we're going to take in here is an address and we will do all of this and then for the address yeah we can use address that's good let's see do we need anything else okay i'm just going to say value is equal to this so rather than printing this out i'm just going to put it in a variable and then i'm going to return the value so this way we can just print it outside of the function rather than directly inside so now if i wanted to call this i would just say you know f is equal to get account balance i'm going to pass my address which is a variable i'm just going to take this and put it a bit lower so it's easier to see okay and then i'm going to print out my f like that and we've just done the exact same thing as before but now we have a bit neater code okay there we go we get the bounce and now we can use this function for any single address that we want we just have to pass a different address as a parameter perfect okay hopefully that is clear that was step one hopefully you understand how to make an api call now again all we're doing is using the get method from request we're then getting the response we're looking at the json which is going to be the data associated with the response we're getting the key in the dictionary that we want which is result we're going to convert that to an int divide that by the ether value that gives us how much ethereum we actually have we return that from the function and then we print that out nice so now that we've done that what we want to do is get all of the transactions associated with an ethereum account and then put those on a graph so to do that i'm going to make a new function and i'm going to say get and we'll say transaction if we could spell this correctly i think that's right get transaction get transactions yeah that's fine okay and we'll pass an address so now let's go back to the website let's have a look at the transaction api and what we need for that okay so get ether balance no that's not what we want we want get a list of normal transactions so first let me just explain what is meant by normal so a normal transaction is a transaction that happens between two different ethereum addresses so me sending you money or you sending me money that's a normal transaction an internal transaction which you can see is right here is a transaction that occurs with a smart contract so we're going to want to get both the normal and the internal transactions so we can actually graph the historical value of an ethereum account i'll discuss more what i mean when we start doing all this but the point is we want both the normal transactions as well as the internal transactions because what we're going to do here is we're going to look at the very first transactions and start keeping track of how much ethereum is in the account based on all the different transactions that have occurred now there is actually an easier way to do this because all we're trying to do is graph the balance of the ethereum account over time however it's a pro api so i'll show you if i go all the way down here get historical ether balance of a single address by block number this is exactly what we want to do however it's pro and i don't want to pay for this so rather than us paying for it let's just do it ourselves and write some code that uses uh the free features okay so that's what we're doing so if you're wondering why i'm going through all this it's because i don't want to have to pay and i don't want you guys to have to pay either okay so let's first look at get a normal uh get a list of normal transactions by address so let's copy this into our code and let's do a similar thing to what we did before okay so let's just paste this in here this needs to be a multiline string or multiline comment okay so we want the module to be account we want the account uh the action to be transaction list we need the address we need a start block and end block a page an offset optionally a sort and then our api key so inside of here i'm going to say get underscore transactions underscore url is equal to and this is going to be the make api url and we're going to pass in the account we're going to pass in tx list as the module right for the address we'll just pass in the address then we're going to pass a start block this will be zero and n block this will be whatever this end block is here so this is just giving us the range we want to get the transactions for so you could filter this if you want to get the transactions between two different block numbers we just want all of them so we'll go 0 and then a block number that doesn't yet exist so we get all of them we need to pass a page and an offset now the page is going to give us now the page is here because we could get a ton of results and every request that we send can only give us a maximum of 10 000 transactions so if we had say 20 000 transactions that we'd have to send this request again with page equals 2 to get the second page of transactions now i don't think any of you are going to have accounts that have over 10 000 transactions so don't worry about it but just want to explain why that's there so we're going to say page is equal to 1. the offset is going to be how many transactions we actually want to get uh i believe that's what it does yeah i think that's how many transactions we want to get so let's just go with 10 000 which is the maximum and then we want to pass sort so if we pass sort ascending then that's going to give us the transaction that came very first when i say first meaning like the earliest possible date first and then the last transaction last which is what we want and then we had one other thing i think it was just the api key though let's see yeah just the api key which we already handled okay great so we've done all that so this should be good to go now and let's just see what happens if we send a get request to this url and just look at the raw data so i'm going to say that my response is equal to and i'm going to say get and then get transactions url and then let's just print out and let's make a variable here data is equal to response.json let's just print out the data and we'll print it actually yeah we'll just print out the data and have a look at what this is okay so let's go full screen let's not create a new file let's run this code well we need to call this function first okay so let's do that first so let's just get rid of this call let's say get transactions like that let's pass our address and let's see what happens okay so we get a bunch of data here which is going to be all of the transactions right there's a huge massive transactions here so let's just go up to the very top and we can see we have status message and then we have result and result is a list and these lists contain all of the different transactions okay this is a huge amount but let's start by just looking at one individual transaction and see what that looks like so to do that i'm going to say the data is equal to response.json at result that's going to be a list right so i can just access the first element in the list to look at one individual transaction so let's look at data zero here let's run this again and let's see if this is a little bit easier to comprehend okay so here we can see that we have a block number a timestamp a hash we have a nonce transaction index we have a from we have a two we have a value we have a gas the gas price we have a bunch of stuff here so what i want to do is i want to loop through all of these transactions and just print out a few details i want to print out the two the from the amount the value which is the amount of ethereum that was actually sent the amount of gas used the timestamp i want to print all that stuff so let's do that so i'm going to go here and i'm going to say four tx standings for a transaction in data now recall data is a list so we can just loop through it and i'm going to say that my 2 is equal to tx 2 okay my from not form my from is equal to tx and then from the value and this is going to be from adr just so we don't mirror the from word in python okay i'm going to say value is equal to and then tx at value i'm going to say the gas is equal to tx at gas used okay and is anything else we want to print here to from we probably want the time stamp so i'll say time is equal to tx at timestamp and then we can print out this data so i'm going to say print and we will say 2 colon 2 print we're going to say from colon from from underscore adr okay we're going to print this is going to be value which is the amount of ethereum that was sent in this transaction say this is value if i could type properly and then we'll print gas used this will be gas used or just gas okay and then print time colon and that time okay i know i went pretty quickly there but this is pretty straightforward code so let's run this now and see what we get now so i'm just going to print one thing to make kind of a separator between these different addresses here so let's just print this so we can kind of see a separator between them all all right so let's run this and what do we get key error timestamp okay the issue here sorry is that timestamp has a capital for an s here so let's fix that and now let's run this and see what we get all right so we get a bunch of data here uh let's have a look at some of these transactions starting from the very top all right so i'm at the top here now this one's a bit weird we don't have a to address i'm not going to talk about exactly why that happens that's getting deeper into ethereum anyways that we have a two we have a from we have a value we have the gas used and we have the time which is actually a time stamp so what i want to do now is convert this time to an actual date because this isn't very meaningful right i mean maybe some of you can understand what this time stamp means i definitely cannot and so i want to see it in like you know date or day month year right that's ideally what i want to see and then maybe the hour and the minute it occurred as well we're going through we can see all of the transactions for most of these transactions they're only sending zero or one ethereum and actually the one here i believe is in way so not even an ether they sent one way now that's just this account i guess a bunch of the transactions they're doing they're not actually sending data with them and they're not sending any ethereum i don't know why but that's what they're doing all right so now what i'm going to do is convert this timestamp to a date and the way we're going to do that is by using the datetime library so i'm going to say from time date time import date time and then i'm going to say that my time here is equal to and then this is going to be date time dot i think this is from timestamp i just have to look at my code here okay from timestamp we're going to pass this in and i think this should be good okay actually we need to convert this to an in sorry because this is going to be a string and now this should actually give us a proper date as opposed to a integer okay so let's try this here and let's see what we get and there we go so we get 2022 0201 and then the time that this occurred at perfect we are now getting the correct time all right so i don't really like using this address for this example because a lot of the transactions don't actually send any ethereum so let me find a different one then i'll be right back all right so i just found another address here that's going to be better to use because the transactions make a bit more sense than the other account we were using so let's just run this code now with this new one and see what transactions we're getting okay there we go so see the value is much higher now they're actually sending ethereum with a lot of the transactions they're doing now this is in way so what i want to do is convert this value to ether so let's do that we already know how to do that i'm just going to take the value i'm going to convert this to an int because by default these are going to be strings and i'm going to define divide this by the ether value okay let's run the code now and let's see what we get and notice now that we actually get the amount of ethereum and they're sending a very large amount of ethereum with a lot of their transactions this account is one of the whale accounts so that makes sense perfect okay so now what i want to do is i just want to do a better calculation for the gas because if i go back to here you're going to see that the response for getting the normal transactions we have gas as well as the gas priced and the gas used now what we actually care about here is the gas used and we want to multiply this by the gas price to determine how much this actually cost okay so we need to take the gas used and multiply it by the gas price that just gives us how much it actually costs to well do this transaction so let's fix that now because right now when i say gas used that's not exactly what we want we want to have i guess gas cost okay so i'm going to take my gas i'm going to convert this to an int and i'm just going to multiply this by the int of and this is going to be tx at and this is going to be gas price like that okay and then we're going to divide all of this by the ether value and i don't need parentheses because order of operations is is the same here with multiplication and division okay so let's try this now and let's see what we get and we see uh oh geez yeah it's gas price not gas price okay let's fix that all right now we actually get a more useful gas price here and you can see that the price of gas is super expensive on ethereum okay so there we go now we know the gas cost as well as the value and so this actually tells us how much it costs someone to submit a transaction so now that we have all of this data what i want to do is start making a graph that will give us the balance of an ethereum account over time now to do that we need to start from the very first transaction and at the very first transaction our account balance is zero so before we have any transactions in the account we have a zero balance then we're going to look at every single transaction we're going to determine if we're sending money or receiving money and then we're either going to subtract money from our account or add money to our account now the thing is when we are sending money what we are actually doing is we're paying a gas price as well as the value of our transaction so we need to add those two values together and subtract that from the current balance in our account to get an accurate account balance however when we're receiving money we're not paying the gas whoever sent it was paying the gas so we only care about the value and we're going to add that to our account hopefully that makes sense but the way we're going to do this is we're going to say current underscore balance is equal to zero and then we're going to increment or decrement this balance in this for loop based on every transaction and since our transactions are ordered by ascending what that means is that we can just go through all of them in the order we get them because the first transaction we get is the very first transaction that ever occurred in this account hopefully that makes a bit of sense but that's how we're going to do this we're going to loop through all the transactions and kind of increment or decrement the current balance we're going to store all of these results in a list so we're going to say balances is equal to that we're also going to say times is equal to this so we keep track of what time each balance occurred at and then we'll be able to graph that data okay so we have two from value gas time i don't want to print out this data anymore what i want to do is determine if we were the one who were sending money or receiving money now if we were the ones who were sending money the from address is going to be our address if we're the ones receiving money then the two address is going to be our address right that's the way the transactions work so i'm going to say money underscore in is equal to and then this is going to be the from address actually we'll just do this we'll say the to is equal to and then address okay now address is the parameter right here that we passed now what we do need to do is just convert the address to lower cases as well as the two address because we might have them in upper cases and that might mess it up so we're just going to convert both of them to lower cases to make sure that we're getting an accurate comparison here okay so this tells us if we have money in so we're going to say if money in then what we want to do is we want to take the value and we want to add that to the current balance so we're going to say current balance plus equals value otherwise if we're not having money in if money is coming out then what we want to do is say the current balance minus equals and this is going to be the value plus the gas okay because again if we are sending a transaction we're paying the gas we need to take the gas used and the gas price multiply them together divide them by the ether and then that tells us how much it costs us for gas we add that to the value which is how much ethereum we sent that gives us an accurate current balance okay there we go so that's what we're doing for current balance and then we're going to say balances like this oops come on can can i type properly here balances dot append and we're going to append whatever the current balance is and we're also going to say times dot append and we're going to append whatever the current time is because we're going to use one of these lists for the xaxis the other one for the yaxis i actually did them in the opposite order this is going to be x this is going to be y okay now we also have to remember here that we're only looking at the external or normal transactions we also want to look at the internal transactions we're going to add that to the equation here in one second so let's just run the code for right now but let's print out what the current balance is at the end just to see how far off we are when we're only looking at the normal transactions okay so let's run all this here and see what we get and we get a balance of 200 000 or sorry 2 million and then a 3504 ethereum which i think was almost exactly what the actual balance was uh when we got the account bounce now the issue is this might work for this specific account because it might not have any internal transactions but there will be a lot of accounts that have a ton of smart contract calls and we need to account for the value being sent there and all of those types of transactions so we need to add that in here and the way we're going to do that it's just going to go back to etherscan here is we're now going to get the list of internal transactions and we're going to combine that with the list of normal transactions and then loop through all of them in a similar way so this is what we have here we have tx list internal so the only change here is that we just have to pass tx list internal as opposed to account for the url that we want and we'll get a very similar response okay so let's check this out we're going to go now after we get this we're going to say get in terminal underscore tx underscore url and then this is going to be make api call and let's actually copy all of this okay so let's just paste this here and then rather than getting the tx list we want tx internal list i think that's what it was let's just check this here tx list internal okay so i did it wrong let's fix that okay tx list internal so again it's just the exact same thing as what we had up here except now we're doing txlist internal to get all of the internal transactions but we still need to send a request so we're going to say response to is equal to get and then this is going to be get internal tx url or sorry get and then pass here get internal tx url and in fact i shouldn't really be calling these get i'm just going to put transaction url and internal tx url just because that makes more sense and get balance url yeah i'll just make that balance url okay anyways now that we have that i'm going to say data2 is equal to response to dot json and then we're going to access the result as well so now we're going to get one list of results and another list of results they're both going to be ordered however what i want to do is combine them so i'm going to say data dot extend data2 this is going to take all of the elements and data too and simply add them to the current data list however now we're not going to have these sorted because we're going to have all of the normal transactions then all of the internal transactions so i want to sort all of them so that we have a correct list here so i'm going to say dot sort actually let's do this after let's go data dot sort and then we want to sort all of these by the key which is equal to lambda i'll explain this in a second so lambda x colon x at and then timestamp and then make sure we have a capital s here for timestamp okay so what we're doing is we're getting all of the regular transactions all the internal transactions right here we're then going to extend our data list by data2 so our normal by our internal now it's no longer going to be sorted because we have all of the new transactions we got at the end of this list so we need to resort this list we're going to say data.sort the key we're going to sort by is going to be every element's timestamp so that's what this is doing we're saying okay for every element which is going to be represented by x we're going to grab the timestamp and we're going to sort by that timestamp and we can convert this to an int just to make sure we're going to get a correct sorting here because by default this is a string although i think it will work even if we didn't convert it to an it okay so now we should get every single transaction and loop through all of them let's run this though and see if this is working all right so it looks like it is working we got two hundred thousand uh i got two million and then again three hundred three thousand five hundred four apparently i cannot read numbers however i will tell you that this will not work the way it is if we have any internal transactions now this account doesn't have any internal transactions i should probably find one that does however if we go and we look at the response here we can see that we only have gas and gas used we don't have a gas price so i just need to fix something in my code to account for the fact that my internal transactions don't have a gas price on them and we're just going to have to use the gas used as how much gas was used okay because the gas won't really have a price with the internal transactions i understand it's a little bit weird but we just have to account for the fact that we don't have that key in these responses so what i'm going to do here is say if and i'm just going to say gas price in and then tx then we'll calculate the gas using this but otherwise we'll just calculate the gas by being the gas used and then divided by the ether value okay divided by ether value so this will work the exact same way as before now again we're just going to account for the fact that the internal transactions don't have this gas price uh key okay so we're almost done we now have all of the data that we need we're getting an accurate current balance what we want to do now is actually graph this using matplotlib now this is super easy to do all we're going to do is say plt dot plot and we're going to plot as the xaxis are times and the yaxis are balances now i might be passing this in the wrong order we'll see in one second but i'm going to pass times and balances now since these are the same length this will work because we're going to match every balance with each time and then if i want to show this i just have to say plt.show okay so let's do plt.show let's run this and let's see what we get now all right there we go we get a nice graph the same one that i showed you in the demo at the very beginning and it looks like all this is working so our yaxis is going to be the ethereum amount in our account and then the yaxis is going to be the amount of time or the date right so if i go here you can see that we're at the correct balance uh just about 2 million ethereum in the account get an absurd amount of ethereum okay there you go so that is really all i need to show you for this video now hopefully this showed you how to work with the ether scan api and how you can easily ask for more information again we were calling different api endpoints very easily because of this nice function we made make api url you can reuse this function as many ways as you would like call all of the different types of endpoints get that data look at the data so on and so forth i showed you how to get the account balance as well as how to look at all of the transactions and then how to get the balance over time from those different transactions now again a bunch of other stuff you can do i hope you guys mess around with the api and make some cool stuff i will mention that i'm sure a lot of you want to actually get the ethereum value like the dollar amount in your account not the amount of ethereum now to do that for every single time that you have you just have to look up what the ethereum price is i believe you can do that from the ether scan api and then you would replace your balances with the actual balance multiplied by whatever the price of ethereum is and then that would give you the dollar amount of your account on every single day that a new transaction occurred now you also could do this over every single day you guys can kind of figure it out from here because i've given given you the building blocks to build a type of project like that anyways with that said i am going to wrap up the video here i hope you guys found this helpful if you did make sure to leave a like subscribe to the channel and i will see you in another one
