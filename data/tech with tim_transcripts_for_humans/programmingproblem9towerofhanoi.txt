With timestamps:

00:00 - hey guys and welcome back to the weekly
00:02 - programming problem now today's problem
00:05 - is the Tower of Hanoi problem now it's a
00:08 - very famous problem typically in
00:10 - mathematics but has a really nice
00:11 - recursive solution to it in computing so
00:14 - that's what we're gonna be doing today
00:16 - now essentially the problem if you're
00:18 - not familiar with it is you're given
00:19 - kind of almost like a toy that looks
00:21 - like this what you have to do is you
00:23 - have to move n disks from a given pool
00:26 - to another pool using an intermediate
00:29 - pool so if we say that this pole is ABC
00:32 - we need to move all the disks from pole
00:34 - age and say pole C and we can use pull
00:37 - bead to do that so the only real rule
00:40 - with this is that you cannot place a
00:42 - larger disc on a smaller disc at any
00:44 - point during the game so I can't for
00:47 - example place this disc here and then do
00:49 - that
00:49 - that won't work you can see that that's
00:50 - giving me an issue okay that's the
00:53 - really the only rule to this problem so
00:56 - how can we solve this and what is the
00:58 - solution to it Inc in computing
01:00 - essentially and what we want as a
01:02 - solution is what moves we should do to
01:04 - go from one pole to the next given and
01:07 - disk that's what we want for any end
01:09 - right so let's start by just figuring
01:12 - out the solution to three disks seeing
01:15 - how we did that and then moving up and
01:17 - eventually moving into a actual program
01:19 - solution in Python so what I'm gonna
01:21 - start by doing is moving this disc so
01:24 - disc one we're gonna call it so we start
01:26 - with this one the second one will be
01:28 - just two the third one will be disc
01:29 - three and then all the way to N in this
01:31 - case all like three discs so we'll move
01:33 - disc one to pull C will move disc two to
01:37 - pull B this one will go back to pull B
01:40 - and then we will finally move disc three
01:42 - to pull see and we will do the following
01:45 - and you can see that we have completely
01:48 - we have found a solution and we have
01:50 - completed this that was pretty
01:52 - straightforward and I think most of you
01:54 - can probably comprehend how that worked
01:56 - now let's think about how we move a disc
02:01 - to a pole and I know this is gonna seem
02:03 - really trivial this is gonna play a very
02:05 - important part into moving four discs to
02:08 - an expo and to our solution so when we
02:12 - move
02:12 - disk to a given pole what we do is we
02:15 - just take that disk and we move it there
02:16 - right we know how to do that so for one
02:18 - disk if we need to go from pull a to
02:20 - pull see if it's only one disk all we do
02:23 - is just move it from pull a to pull see
02:25 - that's pretty straightforward if we have
02:27 - two disks what do we do well what we
02:30 - need to do is we need to move our what
02:32 - he called our first disk on to the
02:34 - intermediate pool and we need to move
02:36 - our second disk onto the final pull and
02:39 - then we move our disk that is on the
02:42 - intermediate pull on to the final pull
02:44 - or the ending pool and that's how you do
02:46 - it for 2 now for 3 this is a very
02:49 - similar solution what we do is we say ok
02:52 - let's pretend that we only have and I
02:55 - shouldn't me bring up my drawing tab
02:57 - here let's pretend that we only have two
03:00 - disks ok so let's say that this is one
03:02 - disk well what do we need to do we need
03:04 - to move this disk to this pole and then
03:07 - we need to move this disk to this pole
03:09 - and then from here needs to go back on
03:11 - to here and that's how that works
03:13 - makes perfect sense right that's what we
03:15 - did for two disks so it's the exact same
03:17 - thing with three we'll just pretend that
03:19 - in this case we need to move these two
03:22 - disks should we move the first disk to
03:24 - the intermediate pull the bottom disk
03:27 - goes to the end pull and then the
03:28 - intermediate pull disk go back to the
03:30 - end pull that's how it works for two
03:32 - disks so let's now try to do that with
03:34 - three so if we need to move these two
03:37 - disks now to here right that's our task
03:39 - so our first task is to do that our
03:41 - second once to move this here so our
03:42 - first task is to move the two disks to
03:44 - the middle pool how do we do that well
03:47 - we know how to move two disks to a given
03:49 - pool what we do is we take the top disc
03:51 - and we put it on the intermediate pool
03:53 - which in this case will be this one
03:54 - because this is not the destination pool
03:56 - and then we'll take the bottom disc
03:58 - we'll put it on the pole that we need to
03:59 - go to and then we'll take that disc
04:02 - that's on the intermediate pole and
04:03 - we'll put it back on to the final pole
04:06 - and that's how that works for two disks
04:08 - so if we're given three disks we can use
04:10 - the fact that we know how to move two
04:12 - disks to move three so that's exactly
04:15 - what we do right so now we'll break it
04:17 - down one more time we say okay well we
04:19 - start and we're gonna say okay let's
04:20 - shrink this down to two disks now so n
04:22 - minus one disks right and let's move
04:25 - these two disks on to the intermediate
04:27 - pool so to do that we'll go here here
04:30 - and here and now we've successfully
04:32 - moved this disc to the intermediate pool
04:34 - we can move this disc over to the final
04:37 - pole and then now that we have this we
04:39 - need to move this these discs here on to
04:42 - the final pole but since this is two
04:44 - discs we need to figure out how to do
04:46 - that so we simply go to the intermediate
04:48 - pool we go to the final pole and let me
04:50 - go from the intermediate pole back to
04:52 - the final pole and that is the solution
04:54 - now this is the exact same process for
04:57 - four discs we're just gonna keep
04:59 - breaking down our disks and sectioning
05:01 - them off in two sets of two discs until
05:03 - eventually we get to a point where all
05:05 - the discs are on the same pole so same
05:07 - thing here let's go back into the
05:08 - drawing time let's pretend what the heck
05:12 - is this I did not mean to do that
05:14 - let's let's go to that quickly okay so
05:17 - let's pretend that all of these discs
05:19 - are simply two discs okay so we need to
05:22 - move all of these discs now first of all
05:24 - to here but the thing is these are three
05:26 - discs right so let's do this now let's
05:29 - say if we need to move these this to
05:31 - here let's now pretend that these are a
05:33 - set of two disks right so we say this
05:36 - disc and this disc so we know how to
05:38 - move two disks so let's do this now
05:40 - we'll say okay so we need to move these
05:42 - two disks to the intermediate pool in
05:44 - this case it's gonna be this one then we
05:46 - need to move this bottom disc here so
05:48 - we'll move that here and then we need to
05:49 - move these discs back to here we'll move
05:52 - this final disc back to here and then
05:54 - we'll move all these disks back to this
05:56 - pool now I know that was kind of
05:57 - confusing but hopefully you're kind of
05:59 - getting the point here we just keep
06:01 - shrinking our discs in two sets of two
06:04 - discs we move them to where they need to
06:06 - go and then once they're there we find
06:09 - the solution
06:10 - so let's now actually create a function
06:13 - for this that will maybe help define
06:15 - what we're doing a little bit better so
06:16 - let's say that's ABC let's say this is 1
06:18 - 2 dot dot dot and this is n ok so we go
06:22 - from 1 to n disks so let's say we're
06:24 - gonna have a function it will just call
06:26 - it t alright and what this function will
06:28 - take is a parameter is how many disks so
06:30 - in this case we'll start with N and then
06:32 - from what pole we need to go to
06:34 - or what pole we're starting at - what we
06:36 - need to go to and the intermediate pool
06:38 - so let's say we're gonna start up pull a
06:41 - we're gonna go to pool C and we're gonna
06:43 - use pull B to accomplish that so this is
06:46 - our initial kind of condition what we
06:48 - need to do so we need to move all these
06:50 - discs to pull see that's what we need to
06:53 - do now we don't know how to do that
06:54 - because we don't know how to move for
06:56 - this we only know how to move two discs
06:57 - so let's try to break this down into a
07:00 - point where we get two discs so what
07:02 - we're gonna do now is are gonna say okay
07:03 - well the first step of this problem is
07:05 - to move n minus one disks to the
07:09 - intermediate pull in this case B so
07:11 - let's write that down say the first step
07:13 - is we're gonna go from T to N minus 1 or
07:16 - TN minus 1 from pull a to pull be using
07:22 - pull C that's our our first problem that
07:24 - we need to do we need to move all of
07:25 - these over to here and then after we do
07:28 - that we need to move this disc to pull C
07:32 - and then all these discs needs to go
07:34 - back to pull C right so let's write that
07:37 - down now and then we'll say n so we'll
07:40 - say T in this case n goes to actually
07:44 - we'll just say we'll just say move and
07:46 - to see okay
07:48 - that's what we need to do we just move
07:49 - this to here and we know to do that just
07:51 - one move very basic all right now our
07:54 - next step is well we have these three
07:57 - discs and we need to move them to pull
07:58 - be using pull C but we have three disks
08:00 - so how do we do that so what we're gonna
08:02 - do is we're gonna break this problem
08:04 - down again we're gonna say alright well
08:05 - if we need to go we need to put these
08:07 - disks on to pull be using pull C then
08:11 - we're gonna have to take these top two
08:12 - disks so in this case n - 2 disks and
08:15 - move them to pull C move this disc to
08:18 - pull B and then move all the disks back
08:20 - to pull B and then we'll have them there
08:21 - right that's what we need to do so you
08:23 - can see that we're recursively trying to
08:26 - get down to a simpler and simpler case
08:28 - until eventually we get to a point where
08:30 - we can just move we know how to move the
08:33 - disc because there's a set of two disks
08:34 - we move them to the recording place and
08:36 - then we're going to reach a solution so
08:39 - that's kind of how that works now it's
08:40 - really it's difficult to show this with
08:42 - the drawing rather than actually moving
08:43 - the dead
08:44 - so what I'm gonna do now is move the
08:46 - disks and then we'll get into an actual
08:48 - solution so let's do this now
08:51 - let's move all the disks so what we'll
08:52 - do is we'll say okay first step we need
08:54 - to move these three disks to pull B well
08:56 - we don't know how to move three disks so
08:58 - what we need to do is need to move two
08:59 - disks so let's move these top two disks
09:02 - to pull C first of all so we do that by
09:04 - doing this now we move this disk here to
09:07 - pull B and now we need to move these
09:09 - ones back to pull B so to do that we're
09:11 - gonna use C and we'll do that like that
09:13 - okay
09:14 - now we'll move this disc over to here
09:16 - and now what we need to do is well we
09:17 - have three disks and they need to go to
09:19 - pull see using pull a so the way that we
09:22 - do that well is we start by moving to
09:25 - we're breaking this down into two disks
09:28 - need to go here will move up there so
09:31 - what would do is with this this this and
09:34 - continue on like this until eventually
09:38 - we reach the solution and you can see
09:40 - how fast I'm doing this because I'm just
09:41 - following the kind of recursive protocol
09:43 - that we went through there so now let's
09:45 - get into some Python code this will be
09:47 - very quick to do and we'll test our
09:49 - solution to make sure that it's working
09:50 - so let me just put this tablet away
09:52 - quickly and now we will start going so
09:55 - we're gonna define a function inside of
09:58 - our let me actually save this here
10:00 - quickly we'll just say Coward pi put it
10:03 - on desktop okay and what I'm gonna do
10:06 - now define tower and we're gonna take n
10:09 - we're gonna take a start pool and end
10:12 - pull and a middle pool now our base case
10:15 - is because whenever we're doing
10:17 - incursion we need a base case obviously
10:19 - is if n is equal to one meaning we have
10:21 - one disk we need to move it from a start
10:24 - pool to an end pool well all we do is
10:25 - just move it from that pool to that pool
10:27 - so what we're gonna do them say if n
10:28 - equals equals one like this then I will
10:32 - print out in this case we'll say move
10:35 - and we'll say percent I which will be
10:38 - the disk number from tower percent s
10:44 - like this to tower percent s and then in
10:49 - this case we'll just put some brackets
10:50 - will do % and we'll fill in our numbers
10:53 - so we're just gonna say n start end
10:54 - right because what we're doing is well
10:56 - if we have one day
10:57 - so we're moving one disk all we do is
10:59 - just move it from the start disk to the
11:01 - end disk or start tower to the end tower
11:03 - and that's how that works that's all we
11:05 - don't need to use the middle disk if
11:07 - we're just moving one so otherwise if
11:09 - we're moving more than one disk we need
11:11 - to follow the procedure that we've just
11:13 - defined and that procedure essentially
11:15 - is move break it into two disks move n
11:18 - minus one disks to the auxilary pool
11:21 - move that end disk are the like the
11:23 - bottom disk to where we need to go and
11:25 - then move all of those disks that are on
11:27 - the auxilary pool back to where we need
11:29 - to go right so to do that what we're
11:31 - gonna do is we'll say okay well let's
11:33 - call the tower because tower knows how
11:35 - to move our disks we're gonna call it
11:37 - with n minus one disks so splitting it
11:39 - up into two disks and then we're gonna
11:41 - go from the start disk to the middle
11:44 - disk using the one missing disk using
11:48 - the end pull that's what we'll do that's
11:49 - our first step okay then we'll say well
11:52 - after we do that we need to move the
11:55 - bottom most disk to the end pull so all
11:58 - we'll do there is we'll just print out
12:00 - this exact same statement here we'll say
12:02 - okay so let's just take that bottom disk
12:05 - and move it to the pole that we need to
12:07 - go to that's awesome that's all we need
12:09 - to do now after we do that we need to
12:11 - take the disks that are on the auxilary
12:13 - pool and we need to move them on top of
12:15 - that disk so to do that we're gonna say
12:16 - all the disks from the middle pole so
12:18 - because n minus one disks will be on the
12:20 - middle pole because we've moved them
12:21 - there using this we'll say we're gonna
12:23 - use the the end or this the start disk
12:28 - are no sir and using start so move from
12:33 - the middle disk or the middle pole to
12:35 - the end pull using the start pole and
12:38 - that's all we need to do and this is
12:40 - actually a complete solution to our
12:42 - problem so let's define that we're gonna
12:44 - start with in this case four poles and
12:46 - then we're gonna go from pull a two in
12:49 - this case we'll go to pull C and I will
12:52 - use pull B as our intermediate pull so
12:54 - now let's actually run this program and
12:57 - test the solution on our little game and
12:59 - make sure that everything is working so
13:00 - in this case I'm just going to do Python
13:02 - type I I'm on my desktop so that's why
13:04 - I'm running this and if I do this you
13:06 - can see that scroll down here that it
13:09 - gives us a set of moves
13:10 - so let me bring up now the game and
13:12 - let's see if this actually works for our
13:14 - four disks so the first move is move one
13:16 - from A to B so let's do that
13:18 - move two from A to C move one from B to
13:22 - C move three from A to B okay move one
13:28 - from C to a do that move two from C to B
13:33 - move four and my note move one from A to
13:37 - B will do that it says move four from A
13:40 - to C move one from B to C okay we'll do
13:44 - that
13:44 - move two from B to a move one from C to
13:48 - a move three from B to C okay and then
13:53 - move one from A to B move two from A to
13:57 - C and move one from B to C and you can
13:59 - see that we get our solution so I mean I
14:02 - will let you guys test this out yourself
14:04 - with however many ends you want just
14:06 - keep in mind that this solution if you
14:09 - want to know how many actual moves the
14:11 - answer to this is the moves from n minus
14:13 - one plus one so for example we know that
14:17 - for three it takes us seven moves so if
14:20 - you want to find how many moves it would
14:21 - take for four disks you multiply the
14:23 - previous amount of move so in this case
14:25 - 7 by 2 and add one so it's the previous
14:27 - amount of moves multiplied by 2 plus 1
14:29 - so you have to start at some number that
14:31 - you know in this case will start at 3
14:33 - and then maybe we wanted to find 5 well
14:35 - we'd say well 4 has 15 moves so we do is
14:38 - we multiply that by 2 so 30 we add 1 and
14:40 - that's 31 and I mean if you want proof
14:42 - you can see here if I keep going up you
14:44 - can see the pattern 3163 127 that's the
14:47 - way that that's the formula for how many
14:49 - moves so anyways I don't I'll show
14:51 - quickly if I put like a hundred in here
14:53 - and run this program that it's gonna
14:55 - take decent amount of time to actually
14:57 - execute all of these different moves
14:59 - because this is probably gonna be in I
15:01 - want to say like the hundreds of
15:03 - thousands of moves but I mean I don't
15:05 - really know so anyways that has been it
15:07 - for this video I hope you guys enjoyed
15:09 - if you did please make sure you leave a
15:10 - like and subscribe and let me know what
15:12 - else you'd like to see for the future of
15:13 - these programming problems
15:15 - [Music]

Cleaned transcript:

hey guys and welcome back to the weekly programming problem now today's problem is the Tower of Hanoi problem now it's a very famous problem typically in mathematics but has a really nice recursive solution to it in computing so that's what we're gonna be doing today now essentially the problem if you're not familiar with it is you're given kind of almost like a toy that looks like this what you have to do is you have to move n disks from a given pool to another pool using an intermediate pool so if we say that this pole is ABC we need to move all the disks from pole age and say pole C and we can use pull bead to do that so the only real rule with this is that you cannot place a larger disc on a smaller disc at any point during the game so I can't for example place this disc here and then do that that won't work you can see that that's giving me an issue okay that's the really the only rule to this problem so how can we solve this and what is the solution to it Inc in computing essentially and what we want as a solution is what moves we should do to go from one pole to the next given and disk that's what we want for any end right so let's start by just figuring out the solution to three disks seeing how we did that and then moving up and eventually moving into a actual program solution in Python so what I'm gonna start by doing is moving this disc so disc one we're gonna call it so we start with this one the second one will be just two the third one will be disc three and then all the way to N in this case all like three discs so we'll move disc one to pull C will move disc two to pull B this one will go back to pull B and then we will finally move disc three to pull see and we will do the following and you can see that we have completely we have found a solution and we have completed this that was pretty straightforward and I think most of you can probably comprehend how that worked now let's think about how we move a disc to a pole and I know this is gonna seem really trivial this is gonna play a very important part into moving four discs to an expo and to our solution so when we move disk to a given pole what we do is we just take that disk and we move it there right we know how to do that so for one disk if we need to go from pull a to pull see if it's only one disk all we do is just move it from pull a to pull see that's pretty straightforward if we have two disks what do we do well what we need to do is we need to move our what he called our first disk on to the intermediate pool and we need to move our second disk onto the final pull and then we move our disk that is on the intermediate pull on to the final pull or the ending pool and that's how you do it for 2 now for 3 this is a very similar solution what we do is we say ok let's pretend that we only have and I shouldn't me bring up my drawing tab here let's pretend that we only have two disks ok so let's say that this is one disk well what do we need to do we need to move this disk to this pole and then we need to move this disk to this pole and then from here needs to go back on to here and that's how that works makes perfect sense right that's what we did for two disks so it's the exact same thing with three we'll just pretend that in this case we need to move these two disks should we move the first disk to the intermediate pull the bottom disk goes to the end pull and then the intermediate pull disk go back to the end pull that's how it works for two disks so let's now try to do that with three so if we need to move these two disks now to here right that's our task so our first task is to do that our second once to move this here so our first task is to move the two disks to the middle pool how do we do that well we know how to move two disks to a given pool what we do is we take the top disc and we put it on the intermediate pool which in this case will be this one because this is not the destination pool and then we'll take the bottom disc we'll put it on the pole that we need to go to and then we'll take that disc that's on the intermediate pole and we'll put it back on to the final pole and that's how that works for two disks so if we're given three disks we can use the fact that we know how to move two disks to move three so that's exactly what we do right so now we'll break it down one more time we say okay well we start and we're gonna say okay let's shrink this down to two disks now so n minus one disks right and let's move these two disks on to the intermediate pool so to do that we'll go here here and here and now we've successfully moved this disc to the intermediate pool we can move this disc over to the final pole and then now that we have this we need to move this these discs here on to the final pole but since this is two discs we need to figure out how to do that so we simply go to the intermediate pool we go to the final pole and let me go from the intermediate pole back to the final pole and that is the solution now this is the exact same process for four discs we're just gonna keep breaking down our disks and sectioning them off in two sets of two discs until eventually we get to a point where all the discs are on the same pole so same thing here let's go back into the drawing time let's pretend what the heck is this I did not mean to do that let's let's go to that quickly okay so let's pretend that all of these discs are simply two discs okay so we need to move all of these discs now first of all to here but the thing is these are three discs right so let's do this now let's say if we need to move these this to here let's now pretend that these are a set of two disks right so we say this disc and this disc so we know how to move two disks so let's do this now we'll say okay so we need to move these two disks to the intermediate pool in this case it's gonna be this one then we need to move this bottom disc here so we'll move that here and then we need to move these discs back to here we'll move this final disc back to here and then we'll move all these disks back to this pool now I know that was kind of confusing but hopefully you're kind of getting the point here we just keep shrinking our discs in two sets of two discs we move them to where they need to go and then once they're there we find the solution so let's now actually create a function for this that will maybe help define what we're doing a little bit better so let's say that's ABC let's say this is 1 2 dot dot dot and this is n ok so we go from 1 to n disks so let's say we're gonna have a function it will just call it t alright and what this function will take is a parameter is how many disks so in this case we'll start with N and then from what pole we need to go to or what pole we're starting at what we need to go to and the intermediate pool so let's say we're gonna start up pull a we're gonna go to pool C and we're gonna use pull B to accomplish that so this is our initial kind of condition what we need to do so we need to move all these discs to pull see that's what we need to do now we don't know how to do that because we don't know how to move for this we only know how to move two discs so let's try to break this down into a point where we get two discs so what we're gonna do now is are gonna say okay well the first step of this problem is to move n minus one disks to the intermediate pull in this case B so let's write that down say the first step is we're gonna go from T to N minus 1 or TN minus 1 from pull a to pull be using pull C that's our our first problem that we need to do we need to move all of these over to here and then after we do that we need to move this disc to pull C and then all these discs needs to go back to pull C right so let's write that down now and then we'll say n so we'll say T in this case n goes to actually we'll just say we'll just say move and to see okay that's what we need to do we just move this to here and we know to do that just one move very basic all right now our next step is well we have these three discs and we need to move them to pull be using pull C but we have three disks so how do we do that so what we're gonna do is we're gonna break this problem down again we're gonna say alright well if we need to go we need to put these disks on to pull be using pull C then we're gonna have to take these top two disks so in this case n 2 disks and move them to pull C move this disc to pull B and then move all the disks back to pull B and then we'll have them there right that's what we need to do so you can see that we're recursively trying to get down to a simpler and simpler case until eventually we get to a point where we can just move we know how to move the disc because there's a set of two disks we move them to the recording place and then we're going to reach a solution so that's kind of how that works now it's really it's difficult to show this with the drawing rather than actually moving the dead so what I'm gonna do now is move the disks and then we'll get into an actual solution so let's do this now let's move all the disks so what we'll do is we'll say okay first step we need to move these three disks to pull B well we don't know how to move three disks so what we need to do is need to move two disks so let's move these top two disks to pull C first of all so we do that by doing this now we move this disk here to pull B and now we need to move these ones back to pull B so to do that we're gonna use C and we'll do that like that okay now we'll move this disc over to here and now what we need to do is well we have three disks and they need to go to pull see using pull a so the way that we do that well is we start by moving to we're breaking this down into two disks need to go here will move up there so what would do is with this this this and continue on like this until eventually we reach the solution and you can see how fast I'm doing this because I'm just following the kind of recursive protocol that we went through there so now let's get into some Python code this will be very quick to do and we'll test our solution to make sure that it's working so let me just put this tablet away quickly and now we will start going so we're gonna define a function inside of our let me actually save this here quickly we'll just say Coward pi put it on desktop okay and what I'm gonna do now define tower and we're gonna take n we're gonna take a start pool and end pull and a middle pool now our base case is because whenever we're doing incursion we need a base case obviously is if n is equal to one meaning we have one disk we need to move it from a start pool to an end pool well all we do is just move it from that pool to that pool so what we're gonna do them say if n equals equals one like this then I will print out in this case we'll say move and we'll say percent I which will be the disk number from tower percent s like this to tower percent s and then in this case we'll just put some brackets will do % and we'll fill in our numbers so we're just gonna say n start end right because what we're doing is well if we have one day so we're moving one disk all we do is just move it from the start disk to the end disk or start tower to the end tower and that's how that works that's all we don't need to use the middle disk if we're just moving one so otherwise if we're moving more than one disk we need to follow the procedure that we've just defined and that procedure essentially is move break it into two disks move n minus one disks to the auxilary pool move that end disk are the like the bottom disk to where we need to go and then move all of those disks that are on the auxilary pool back to where we need to go right so to do that what we're gonna do is we'll say okay well let's call the tower because tower knows how to move our disks we're gonna call it with n minus one disks so splitting it up into two disks and then we're gonna go from the start disk to the middle disk using the one missing disk using the end pull that's what we'll do that's our first step okay then we'll say well after we do that we need to move the bottom most disk to the end pull so all we'll do there is we'll just print out this exact same statement here we'll say okay so let's just take that bottom disk and move it to the pole that we need to go to that's awesome that's all we need to do now after we do that we need to take the disks that are on the auxilary pool and we need to move them on top of that disk so to do that we're gonna say all the disks from the middle pole so because n minus one disks will be on the middle pole because we've moved them there using this we'll say we're gonna use the the end or this the start disk are no sir and using start so move from the middle disk or the middle pole to the end pull using the start pole and that's all we need to do and this is actually a complete solution to our problem so let's define that we're gonna start with in this case four poles and then we're gonna go from pull a two in this case we'll go to pull C and I will use pull B as our intermediate pull so now let's actually run this program and test the solution on our little game and make sure that everything is working so in this case I'm just going to do Python type I I'm on my desktop so that's why I'm running this and if I do this you can see that scroll down here that it gives us a set of moves so let me bring up now the game and let's see if this actually works for our four disks so the first move is move one from A to B so let's do that move two from A to C move one from B to C move three from A to B okay move one from C to a do that move two from C to B move four and my note move one from A to B will do that it says move four from A to C move one from B to C okay we'll do that move two from B to a move one from C to a move three from B to C okay and then move one from A to B move two from A to C and move one from B to C and you can see that we get our solution so I mean I will let you guys test this out yourself with however many ends you want just keep in mind that this solution if you want to know how many actual moves the answer to this is the moves from n minus one plus one so for example we know that for three it takes us seven moves so if you want to find how many moves it would take for four disks you multiply the previous amount of move so in this case 7 by 2 and add one so it's the previous amount of moves multiplied by 2 plus 1 so you have to start at some number that you know in this case will start at 3 and then maybe we wanted to find 5 well we'd say well 4 has 15 moves so we do is we multiply that by 2 so 30 we add 1 and that's 31 and I mean if you want proof you can see here if I keep going up you can see the pattern 3163 127 that's the way that that's the formula for how many moves so anyways I don't I'll show quickly if I put like a hundred in here and run this program that it's gonna take decent amount of time to actually execute all of these different moves because this is probably gonna be in I want to say like the hundreds of thousands of moves but I mean I don't really know so anyways that has been it for this video I hope you guys enjoyed if you did please make sure you leave a like and subscribe and let me know what else you'd like to see for the future of these programming problems
