With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome back to the
00:10 - flutter tutorial
00:11 - so in today's video we're going to be
00:13 - working with databases and storing all
00:15 - of the content
00:16 - in our app in a database this may take
00:18 - more than one video
00:19 - we'll see how much we get done now but
00:21 - the first thing we're going to need to
00:22 - do is actually just set up a database on
00:24 - firebase so we've done most of the setup
00:27 - necessary for all the firebase stuff
00:28 - already we've connected our app to it so
00:30 - all the hard stuff is done
00:32 - what we need to do now is simply go to
00:33 - this database tab from our firebase
00:35 - console
00:36 - on the left hand side and then for you
00:38 - guys you won't see this page you'll
00:40 - probably see a page that says create
00:42 - new database or there'll be some buttons
00:44 - there and there'll be two different
00:45 - types of databases you can pick from
00:47 - either a firestore database or a
00:50 - real-time database
00:51 - when you're clicking create new database
00:53 - if it gives you the option to select
00:54 - them select
00:55 - a real-time database so somehow create a
00:58 - real-time database
00:59 - when it's asking you to set that
01:01 - database up set it up in
01:03 - test mode it will ask you do you want to
01:04 - put it in locked mode do you want to put
01:06 - it in test mode
01:07 - select test mode if you've done that you
01:10 - should be brought to a page that looks
01:12 - something like this
01:13 - if for some reason you're here and
01:14 - you're like hey how do i change between
01:16 - firestore i can only see that
01:17 - there's a button right here where you
01:19 - can select between cloud firestore or
01:21 - real-time database
01:22 - obviously right now i'm in real time
01:24 - database but once you get to this page
01:26 - and you've created the database
01:27 - click on rules and make sure that read
01:30 - and write
01:31 - are set to something that's going to
01:32 - evaluate to true you guys might see
01:35 - something that says like
01:36 - now is less than and like a bunch of
01:38 - numbers if you see
01:40 - that that's totally fine what that is
01:42 - saying is essentially hey
01:43 - we're going to let this database be
01:46 - readable and writeable
01:47 - while the current date is less than some
01:50 - date in the future
01:51 - so it's saying pretty much that in 30
01:53 - days or whatever the data is that you
01:54 - guys have there
01:55 - we will lock this database and make sure
01:57 - that no one can read and write to it and
01:59 - you have to come back and manually
02:00 - change the rules
02:01 - the reason for this is it's very
02:03 - insecure to have your database with read
02:05 - and write as true
02:06 - that means anyone who has a reference to
02:08 - your database can read and write from it
02:11 - meaning they can look at accounts they
02:12 - can look at information like everything
02:14 - right
02:14 - so if you're putting this into a
02:15 - production app then you're not going to
02:17 - have these set as true and you're going
02:18 - to have to do kind of a more advanced
02:20 - authentication
02:21 - since we're just learning right now and
02:22 - this is for tutorial i don't care we're
02:24 - going to leave this as true but if you
02:25 - are planning on putting this in
02:26 - production
02:28 - note that you will have to change these
02:30 - and do a few other steps as well
02:32 - okay so now that we have that i'm going
02:33 - to go back to data and i'm just going to
02:35 - leave this
02:36 - kind of minimized in the background
02:37 - because we will be referencing this page
02:39 - just to make sure that everything is
02:40 - actually working
02:42 - all right so now that we have that we're
02:44 - going to go into our flutter application
02:46 - and the first thing we're going to do is
02:47 - go to our pubspec.yaml file we should be
02:50 - familiar with this
02:51 - by now and we're going to add in sorry i
02:53 - was in the wrong project folder there
02:55 - i'm in the right one now
02:56 - but sorry go to our pubspec.yaml file
02:59 - and then what we're going to do is add
03:00 - one more dependency which is actually
03:02 - the firebase
03:03 - database now i have to find what version
03:05 - this is okay i'm just going to copy it
03:07 - in from my other screen here
03:09 - but this is it so firebase database and
03:11 - this is going to be version 3.1.6
03:15 - so add that into the dependencies and
03:17 - then save i know you guys can't really
03:19 - see the pop-up because my face cam is
03:20 - covering it but there is a little thing
03:22 - that's saying
03:23 - flutter pub get was being run as always
03:25 - if that didn't run then you can just go
03:27 - to the command palette and then go pub
03:29 - get packages and that will look through
03:31 - the pubspec.yaml and make sure that you
03:33 - have all the packages that you need
03:35 - but assuming you added this in there and
03:37 - you didn't see any errors popping up or
03:38 - anything we're good to go
03:40 - and now we're going to make a new file
03:42 - inside of our lib folder here and i'm
03:44 - going to call this one
03:45 - database.dart all right so the first
03:47 - thing we need to do here is just
03:49 - import a few modules so we're going to
03:51 - say import
03:52 - package colon and then we're going to go
03:54 - firebase underscore
03:56 - database slash firebase underscore
03:58 - database
03:59 - dot dot so that's the file we need there
04:01 - and then the next one we're going to do
04:03 - is we're simply going to import
04:04 - post from our own file here so we'll
04:07 - just say import post
04:09 - dot dart now the reason we need this is
04:12 - because
04:13 - all of the database related stuff is
04:14 - going to be dealing with the posts so
04:16 - essentially you know saving posts
04:17 - updating posts
04:18 - oh a user liked that post we need to
04:20 - change how many likes they have so i'm
04:22 - just importing posts so we can actually
04:23 - use that class
04:24 - and then what we're going to do is set
04:26 - up our database reference which is
04:28 - actually going to reference the database
04:29 - and i'll kind of talk about how this
04:30 - stuff works but we're just going to call
04:32 - this database
04:35 - reference like that if i could type it
04:38 - properly
04:38 - and that's going to be equal to a
04:40 - firebase database
04:43 - dot instance dot reference
04:46 - so what this is doing is saying okay
04:47 - we've connected to firebase here
04:49 - let's get the firebase database instance
04:51 - let's get a reference to that
04:53 - so now we can simply use database
04:55 - reference whenever we're looking for a
04:57 - certain record in the database
04:58 - so if i have a look here excuse me sorry
05:02 - this is the record i'm talking about
05:04 - when we ask for
05:05 - dot reference here that's going to give
05:07 - us a reference to
05:08 - this and now that we have this we'll be
05:10 - able to see anything with
05:12 - within it so essentially if i click new
05:14 - here you can see i can add a name and i
05:16 - can add a value
05:17 - that's data that's being stored inside
05:19 - of this so if we have a reference to
05:21 - this
05:22 - then we can now add data retrieve data
05:24 - you know all that fun stuff
05:25 - anyways this will make more sense in a
05:27 - sec but that's what we need for the
05:28 - reference
05:30 - next what i'm going to do is i'm
05:31 - actually going to sorry show us how we
05:33 - can add something
05:35 - to the database so to actually save a
05:38 - new post
05:39 - what we need to do is we need to make a
05:41 - function here that can simply add that
05:42 - to the database
05:44 - so i'm going to say database reference
05:45 - because this is what we're going to
05:47 - return
05:48 - save post and then this is going to take
05:51 - a post
05:52 - like that so what this method is going
05:54 - to do or what this function is going to
05:56 - do that i'm writing inside of here is
05:57 - simply take a post
05:58 - object do some stuff to it and then
06:02 - automatically save that in our firebase
06:04 - database
06:05 - this is just the first thing i want to
06:06 - test out to make sure that everything's
06:08 - working and yeah
06:09 - okay so first thing i'm going to do is
06:10 - i'm going to say var id
06:12 - equals database reference dot
06:16 - child i'm going to do posts slash
06:20 - and then i'm going to say dot push
06:23 - now i know this makes no sense to you so
06:25 - let me explain database reference is the
06:27 - reference to our database
06:30 - the way that this kind of works is there
06:32 - is children in the database which
06:34 - are kind of like the different sections
06:37 - of
06:37 - items almost right so we could have like
06:39 - users posts
06:40 - photos images comments like stuff like
06:43 - that
06:44 - kind of the different database tables
06:46 - this works different than your like
06:47 - standard database it's like a really
06:49 - simplified form
06:50 - but you can imagine that underneath here
06:52 - there's kind of a tree of different
06:53 - objects
06:54 - so maybe we have like a post object and
06:56 - then within that we have
06:57 - all of the different posts maybe we have
06:59 - like a comment object and that has all
07:01 - of the different comments
07:03 - so when i'm saying database reference
07:05 - dot child
07:06 - posts what i'm doing is saying okay i
07:09 - want to reference
07:10 - something called posts within the
07:12 - database now right now we don't have
07:14 - anything called posts right there's
07:15 - nothing in here that we can see that is
07:16 - called posts
07:17 - so what this will do is automatically
07:19 - create this new reference called posts
07:22 - within the database
07:23 - now the reason i'm doing this slash is
07:25 - i'm pretty much saying hey
07:26 - i want to reference a child that is kind
07:28 - of like a folder
07:30 - right that's that's not one individual
07:32 - object but that holds multiple objects
07:34 - so just like if you're talking about
07:36 - like a path right and you have like you
07:37 - know
07:38 - desktop and then maybe in our case i had
07:41 - like flutter as a folder
07:42 - and i did another slash then that would
07:44 - tell me oh hey this is a directory
07:46 - this isn't a file so that's the same
07:48 - thing here with post we're saying that's
07:49 - kind of like a directory to where the
07:51 - posts are
07:52 - and dot push is saying okay so every
07:55 - time that we add a new entry into posts
07:58 - we need to give that entry a unique id
08:00 - so just like any database system you
08:02 - might have worked with before
08:03 - every single entry in the database has
08:05 - to have some kind of unique identifier
08:07 - that allows us to differentiate it
08:09 - between something else because
08:10 - technically
08:11 - you know the same person could post two
08:13 - different posts
08:14 - and they could have the exact same
08:15 - content and if we didn't have any unique
08:17 - id for them we wouldn't have any way to
08:19 - differentiate between them right so we
08:20 - need a unique id
08:22 - so what this is going to do this push is
08:24 - going to give us a database
08:26 - reference to a unique id that we can
08:29 - store inside of posts
08:30 - so all we have to do now is take this id
08:34 - and set that kind of like object that's
08:36 - in our database to hold the values that
08:38 - we want
08:39 - so i'm hoping that's kind of making
08:40 - sense once i add this in you'll see a
08:42 - lot more clear how this actually works
08:44 - but now i have id which is kind of like
08:46 - a placeholder item in my database
08:48 - and now what i need to do is just set
08:50 - the content that this is going to hold
08:52 - or set the data this is going to store
08:54 - so i say id dot set and then inside of
08:57 - here we need to put a json serializable
08:59 - object
09:00 - now if you're unfamiliar with json
09:02 - that's totally fine but essentially what
09:04 - we need to do
09:04 - is we need to take this post object
09:06 - that's being passed into
09:08 - us we need to kind of serialize it into
09:10 - a dictionary that has key value pairs
09:13 - so rather than having you know like
09:15 - actual attributes on the class
09:17 - we're going to have a dictionary that
09:18 - says body okay that's equal to this
09:20 - author that's equal to this likes that's
09:22 - equal to this
09:23 - yada yada yada okay so what i'm going to
09:25 - do actually is modify this post class a
09:27 - little bit
09:28 - just because we're going to need to kind
09:29 - of change how things work based on how
09:31 - this database goes
09:33 - uh and actually we'll do that first and
09:34 - then i'll get into how we actually
09:36 - serialize this into something that can
09:38 - be stored in the database so let me zoom
09:40 - in a little bit
09:41 - okay so we have body author likes and
09:44 - user liked first thing i'm going to do
09:46 - is get rid of this user liked
09:48 - the reason for that is that we had that
09:50 - before just to tell us if the current
09:52 - user had liked this post
09:53 - or not but now when we have multiple
09:55 - users using our app
09:57 - that's not really going to mean much to
09:58 - us if we have this true or false value
10:00 - and you know we load that in on two
10:02 - different people's things essentially
10:03 - what that would mean as soon as one user
10:05 - only one person liked this post no one
10:08 - else would be able to like it because we
10:10 - don't have a unique way
10:11 - to determine which user liked the post
10:13 - we just know it if a user
10:16 - liked the post so rather than saying
10:18 - user liked what i'm actually going to do
10:20 - is
10:20 - completely change likes and i'm going to
10:22 - say instead of into likes i'm going to
10:23 - say
10:24 - list users liked
10:28 - equals an empty list and sorry actually
10:31 - we're not going to make this a list i'm
10:33 - going to make this a set
10:34 - and we'll talk about why in a sec okay
10:37 - so now i have a set
10:39 - and what this set is going to store is
10:41 - all of the ids of the users that have
10:43 - liked this post
10:44 - so that way i can tell how many users
10:47 - have liked this post based on how many
10:49 - entries there are in this set
10:50 - and i can see oh has this user liked
10:52 - this post already
10:53 - well if they're in the set they have if
10:55 - they're not in the set they haven't
10:57 - and that'll be the way we determine
10:59 - whether we add a like or subtract alike
11:02 - is just simply by adding users to the
11:03 - set or removing users to the set
11:06 - so now instead of like post what i'm
11:08 - going to do is say if
11:10 - this dot users liked dot contains
11:14 - and we're going to need to now take a
11:17 - firebase
11:18 - user user so what we're going to do is
11:21 - pass
11:22 - actually yeah we'll pass a firebase user
11:24 - user into like post which says okay
11:27 - well if we like a post you need to give
11:28 - me the user that liked it and then we're
11:30 - going to see
11:30 - if this contains the user.uid
11:34 - so what we'll do is if it does contain
11:36 - the user uid
11:38 - then we're going to say this dot user
11:41 - dot remove and then user dot uid
11:44 - otherwise we'll add the user id into the
11:47 - set
11:49 - so this dot user liked dot add
11:52 - user.uid hoping that makes sense uh but
11:56 - that's kind of the basics that's how
11:57 - we're going to do it
11:58 - with the likes we're just going to have
11:59 - a list now so we've actually shortened
12:01 - out the amount of attributes
12:03 - now the next thing i'm going to add on
12:04 - here is actually an id
12:06 - so i'm going to say string underscore id
12:09 - and just leave
12:10 - it like that now the reason i'm doing
12:11 - that is because
12:13 - since we're now storing this in the
12:14 - database all of these posts
12:17 - need to have some kind of id associated
12:19 - with them if i want to update this post
12:20 - well i need to know what post to update
12:22 - right
12:23 - so i have to have an id on it so that i
12:25 - can actually reference the thing
12:27 - so instead of actually just having id
12:28 - i'm going to change this to be a
12:30 - database reference and what this is
12:33 - going to do now is let me store
12:34 - the reference in the database to this
12:37 - specific post
12:38 - object you know we won't display this
12:40 - anywhere on the screen but we just kind
12:41 - of need this in the back end when we're
12:42 - updating objects
12:44 - so now what i will do is i will make now
12:47 - the
12:48 - a method that will allow us to change
12:49 - the id so i'm just trying to think
12:51 - what i want to do next but what i'm
12:52 - going to do is i'm going to say void
12:54 - set id and what i'm going to simply say
12:57 - in here is we'll take a
12:58 - database reference id and we'll do this
13:02 - dot underscore id equals id
13:05 - next we're going to make a method that
13:07 - can actually transform this entire post
13:10 - into a dictionary so i'm going to say
13:13 - map
13:14 - string and oops and then
13:17 - dynamic and what this is going to do is
13:20 - be
13:20 - it's going to be called to json and it's
13:24 - going to return a string
13:25 - sorry a map which is just a simple
13:27 - dictionary that has string keys
13:29 - and dynamic meaning pretty much anything
13:31 - as the values
13:33 - associated with those keys so to json
13:36 - like that and now we'll simply
13:38 - return and we're just going to make a
13:40 - dictionary and you'll see what i'm going
13:41 - to do in here
13:42 - so i'm going to go ahead and i'm going
13:44 - to say author
13:46 - like that author colon and this is going
13:49 - to be author
13:50 - so we could do this dot author just to
13:52 - specify as well
13:54 - so author this dot author comma we're
13:57 - going to say
13:58 - users liked oops
14:02 - users liked and then colon this dot
14:05 - users liked
14:07 - and then finally what else do we need we
14:09 - need the body and then we'll say
14:12 - body and this dot
14:15 - body all right so there we go now we
14:17 - have actually what we wanted to
14:19 - kind of serialize so we're pretty much
14:21 - just setting it up so it's a dictionary
14:23 - right we just have a string key and then
14:24 - we have what the actual value is
14:26 - i know it seems like oh well why do we
14:27 - have to do that but you'll see just for
14:29 - us to store things in firebase it needs
14:30 - to look like this
14:32 - uh yeah so user likes is gonna be a set
14:34 - so what i'm actually gonna do is i need
14:35 - to change this user like to set
14:37 - into a list the reason for that is sets
14:40 - are not serializable
14:42 - uh within kind of like json objects so
14:44 - whenever we have a set we just have to
14:45 - turn it into a list
14:47 - we want it to be a set because it's
14:49 - really fast to perform
14:50 - contains operations add operations and
14:53 - remove operations in a set
14:55 - whereas the list is a lot slower but as
14:57 - soon as we actually want to store this
14:58 - in a database we'll have to convert that
15:00 - to a list so that's what we do right
15:01 - here
15:02 - okay so now we have all of that and you
15:04 - can imagine that
15:06 - if we're now going to store this in the
15:07 - database we need a way to actually take
15:10 - this and turn this back into a post
15:12 - object that we can use internally
15:14 - so we'll do that next but let's go to
15:16 - database i just want to get you thinking
15:17 - about that
15:19 - and let's say id dot set and let's go
15:21 - post
15:23 - dot to json so what this will do is it
15:26 - will take our post object
15:27 - it will call this to json object which
15:29 - will return that map
15:30 - and then we'll save that map in the
15:32 - database and then what we'll do is we'll
15:34 - return that id
15:36 - and that will be pretty much all we
15:38 - actually need to do
15:40 - when we save this post okay great so i
15:41 - think that should be working so what i'm
15:43 - going to do now is just make it
15:45 - so that when we make a new post we'll
15:46 - just call that just to see if that's
15:48 - actually working
15:50 - and we'll keep going from there so let's
15:51 - go to text input widget
15:54 - um actually this is going to be my home
15:57 - page
15:58 - and where it says a new post what we're
16:01 - going to do
16:02 - is when we add the new post we'll also
16:04 - add that to the database
16:06 - so instead of just having new post i'm
16:09 - going to say
16:11 - var post
16:15 - equals that and this doesn't necessarily
16:17 - need to be inside of set state but we
16:18 - can save our post equals new post
16:21 - let's put that above here and then we
16:24 - will say post dot add
16:25 - and we will add that post and before we
16:28 - do that actually sorry we need to save
16:31 - the post so we're going to call
16:33 - save post which is the method that we
16:35 - put inside of database.dart
16:36 - when i called that it automatically
16:38 - imported um
16:40 - what was it database.dart you can see
16:42 - that at the top right there
16:44 - so save post and that's what we need to
16:46 - do
16:47 - and then what we'll do after we save the
16:49 - post is we're actually going to say post
16:51 - dot underscore id equals and funny
16:54 - enough
16:54 - that's going to be equal to save post so
16:57 - let's just do
16:58 - that and sorry not underscore id this is
17:01 - going to be
17:01 - set id and we'll set that equal to
17:06 - say post okay so i think that's good let
17:09 - me just go over this again
17:10 - what we're doing is we're calling save
17:11 - post right we're giving it that post
17:13 - object that we just created up here so
17:16 - now if i actually go to post we can see
17:18 - that
17:19 - save post what that does is sorry that's
17:21 - in database
17:22 - save post what that does is store this
17:24 - in the database and it returns us an id
17:27 - so once we have that id now we need to
17:29 - actually add that so if i can find where
17:31 - this was
17:32 - to this post object so that it knows
17:34 - where it is if we have to update it or
17:35 - something later on
17:36 - and then we go this dot set state and we
17:38 - say post dot add and we add that to the
17:40 - list
17:41 - so let's see if this is working now i'm
17:43 - going to run the app
17:44 - oh build errors let's see what our
17:46 - errors are here okay so we need to make
17:48 - a few changes just because i realized we
17:50 - did modify that post object and i didn't
17:52 - modify where it was being used
17:54 - so if we go ahead and look in
17:55 - postlist.dart
17:57 - rather than going post dot likes we're
17:59 - going to go post
18:00 - dot and this is going to be user liked
18:02 - dot length
18:03 - so we can figure out how many people
18:05 - liked it just by getting the length of
18:06 - that set
18:07 - and then same thing here instead of
18:09 - saying post dot user liked we'll say
18:11 - post dot users liked
18:13 - dot contains and then what we're
18:15 - actually going to need to do is get the
18:16 - current users your
18:18 - uid and see if the current user has
18:20 - liked it by just checking if they're
18:22 - contained
18:23 - in the set of users that have liked that
18:25 - so i don't think we actually have access
18:27 - to
18:27 - the user object in here so that's the
18:30 - next thing that we're going to need to
18:31 - change so let me actually just close
18:32 - some of this stuff here
18:33 - we now need to make sure that we're
18:35 - actually passing in the user object
18:38 - to this so that we can use that so if we
18:40 - look here
18:42 - let's see stateful widget let's now add
18:46 - another field up here so let's say final
18:49 - firebase user like that and we'll just
18:52 - call this user
18:53 - and then inside of post list we'll say
18:55 - this dot user
18:57 - so now this means we have to pass in our
18:59 - user object to the post list
19:01 - so let's go back to my home page which
19:03 - is i believe where we call this
19:05 - and do we have user here no we actually
19:08 - only have name so now we're going to
19:10 - change this as well
19:11 - inside of my home page so we have access
19:13 - to user so instead of final string name
19:16 - we're going to say
19:17 - final firebase user
19:20 - like that and instead of name this is
19:23 - going to be user
19:24 - now this is going to be this dot user
19:26 - and instead of widget.name we're going
19:28 - to say widget dot user
19:30 - dot display
19:33 - name and that should be good firebase
19:35 - user
19:36 - okay it's saying we don't have this
19:37 - imported so let's hover over it
19:39 - click quick fix and then import library
19:42 - firebase auth
19:43 - from there okay so now we have all the
19:45 - packages we need
19:46 - what i did to do that again was just
19:47 - hovered over it there was quick fix and
19:49 - i just pressed
19:50 - import the module that we need okay so
19:52 - now post list
19:53 - postlist is saying hey you know we're
19:55 - missing an argument we that's because we
19:56 - now need to pass the user through
19:58 - so within post list we're going to say
20:01 - widget
20:02 - dot user all right so that should have
20:05 - hopefully fixed the errors i'll quickly
20:07 - go over what we did we just modified my
20:09 - home page
20:10 - so that rather than taking a name we're
20:11 - now taking a user
20:13 - we are then now rather than just calling
20:16 - that
20:16 - the uh sorry post list with post we're
20:18 - going to pass it a user
20:20 - inside of post list we've now added a
20:22 - user so we can store that here
20:24 - and that way now we can check inside of
20:27 - post.userlike.contained which is down
20:29 - here
20:30 - if the widget dot user.uid
20:35 - is contained in the list of people that
20:37 - have liked this post
20:38 - so if it is that means we liked it and
20:39 - then we'll obviously display that green
20:41 - icon
20:41 - so one last thing we're going to need to
20:43 - do we need to go to login
20:45 - and rather than calling my home page
20:47 - here with user.displayname we're going
20:49 - to call it just with user
20:51 - so we just passed user now and i think
20:54 - that should be
20:55 - all the changes we need to make and
20:57 - let's go ahead and actually run this app
20:59 - and see if that's working so i'm going
21:00 - to press f5
21:01 - it doesn't look like we're getting any
21:03 - all right so this app is loaded up i'm
21:04 - going to press sign in with google
21:06 - and now i will simply press my google
21:08 - account to sign in
21:10 - and let's see all right we get brought
21:12 - to this message page
21:13 - let me type hello and when i do that we
21:15 - can see this message actually gets added
21:18 - here and it's working so let's see if i
21:19 - can like this it doesn't look like the
21:21 - like thing is working so i
21:23 - might have made a mistake here and it
21:24 - does look like i did because there was
21:26 - a exception thrown we'll have a look at
21:28 - that in a second but let's go to the
21:30 - database and see if anything got added
21:32 - ah so i don't believe anything got added
21:35 - i think that is probably because of the
21:36 - exception so i'm going to have a look at
21:38 - this exception
21:39 - i'll be back and i'll discuss what what
21:41 - went wrong all right so i've determined
21:43 - what the issue was here essentially when
21:45 - we press that like button we were having
21:46 - an exception thrown
21:48 - so the reason for that is if we have a
21:49 - look here we can say that we're calling
21:51 - this dot like which is the method up
21:53 - here which just has the set state here
21:55 - for us
21:55 - and we're giving it a callback function
21:57 - which is
21:58 - like post now let's have a look at
22:00 - post.like post and actually see what
22:02 - that is
22:03 - okay so here we are we can see that this
22:05 - actually accepts a firebase
22:07 - user but when we're here and we just
22:10 - pass post.like post.post
22:12 - we're not actually passing um sorry the
22:15 - uh the argument that we need to within
22:17 - here
22:17 - so what i'm gonna do is simply change
22:20 - this to be an arrow function
22:22 - and then where it says post.like post
22:24 - inside of here i'm to pass
22:25 - i believe it's widget dot user
22:28 - so since we have access to user up here
22:31 - what i need to do is make sure that
22:32 - actually when we pass the callback
22:34 - function we pass a function that's going
22:36 - to call like post
22:37 - with the user that liked that post so we
22:40 - just make a little arrow function which
22:41 - says okay you know this is kind of an
22:43 - anonymous function
22:44 - that this function will simply call this
22:46 - function so when we call the callback it
22:48 - will call post.like post and pass the
22:50 - argument widget.user
22:52 - so let me refresh quickly here and let's
22:54 - try this again and let's see if things
22:55 - are working
22:56 - so sign in with google i'll choose my
22:58 - account
23:00 - all right and then let's just go hello
23:03 - and
23:03 - there we are okay so i don't see any
23:05 - errors right now doesn't look like
23:06 - anything's gone wrong
23:08 - let's go ahead and like it and we can
23:09 - like and unlike and see that that is
23:11 - working
23:12 - so now i'm actually going to go over
23:13 - here to this message app
23:15 - and it still seems like nothing is
23:16 - showing up here so give me one sec i'll
23:18 - have a look into this and oh sorry after
23:20 - i refresh the page
23:21 - there we go things are showing up so
23:24 - here we go we can see that we have posts
23:25 - and then we have two posts actually
23:27 - added right here
23:28 - so we have timor sika who said hello
23:29 - another tabersica who said hello
23:31 - and now if i go back to my app actually
23:34 - and let's have this open at the same
23:35 - time so we can kind of see this
23:37 - and let's go test and let's hit enter we
23:40 - can see that this gets added to the post
23:42 - so this is kind of the tree structure i
23:43 - was talking about we have
23:45 - posts which is kind of like this one of
23:47 - the branches of the tree and then within
23:48 - that we have all of the different posts
23:50 - that have their unique
23:51 - ids and the way we generated these ids
23:54 - was by calling that push method
23:56 - from that database file that we had so
23:58 - okay so that's the basics of that
24:00 - obviously none of this is showing any of
24:02 - our users liked that's because we
24:04 - haven't liked any of these posts
24:05 - but see if i liked these posts nothing's
24:07 - changing so we need now a way to
24:09 - actually
24:10 - update these posts that when we like it
24:12 - we can tell that we've liked this post
24:20 - [Music]
24:26 - you

Cleaned transcript:

hello everybody and welcome back to the flutter tutorial so in today's video we're going to be working with databases and storing all of the content in our app in a database this may take more than one video we'll see how much we get done now but the first thing we're going to need to do is actually just set up a database on firebase so we've done most of the setup necessary for all the firebase stuff already we've connected our app to it so all the hard stuff is done what we need to do now is simply go to this database tab from our firebase console on the left hand side and then for you guys you won't see this page you'll probably see a page that says create new database or there'll be some buttons there and there'll be two different types of databases you can pick from either a firestore database or a realtime database when you're clicking create new database if it gives you the option to select them select a realtime database so somehow create a realtime database when it's asking you to set that database up set it up in test mode it will ask you do you want to put it in locked mode do you want to put it in test mode select test mode if you've done that you should be brought to a page that looks something like this if for some reason you're here and you're like hey how do i change between firestore i can only see that there's a button right here where you can select between cloud firestore or realtime database obviously right now i'm in real time database but once you get to this page and you've created the database click on rules and make sure that read and write are set to something that's going to evaluate to true you guys might see something that says like now is less than and like a bunch of numbers if you see that that's totally fine what that is saying is essentially hey we're going to let this database be readable and writeable while the current date is less than some date in the future so it's saying pretty much that in 30 days or whatever the data is that you guys have there we will lock this database and make sure that no one can read and write to it and you have to come back and manually change the rules the reason for this is it's very insecure to have your database with read and write as true that means anyone who has a reference to your database can read and write from it meaning they can look at accounts they can look at information like everything right so if you're putting this into a production app then you're not going to have these set as true and you're going to have to do kind of a more advanced authentication since we're just learning right now and this is for tutorial i don't care we're going to leave this as true but if you are planning on putting this in production note that you will have to change these and do a few other steps as well okay so now that we have that i'm going to go back to data and i'm just going to leave this kind of minimized in the background because we will be referencing this page just to make sure that everything is actually working all right so now that we have that we're going to go into our flutter application and the first thing we're going to do is go to our pubspec.yaml file we should be familiar with this by now and we're going to add in sorry i was in the wrong project folder there i'm in the right one now but sorry go to our pubspec.yaml file and then what we're going to do is add one more dependency which is actually the firebase database now i have to find what version this is okay i'm just going to copy it in from my other screen here but this is it so firebase database and this is going to be version 3.1.6 so add that into the dependencies and then save i know you guys can't really see the popup because my face cam is covering it but there is a little thing that's saying flutter pub get was being run as always if that didn't run then you can just go to the command palette and then go pub get packages and that will look through the pubspec.yaml and make sure that you have all the packages that you need but assuming you added this in there and you didn't see any errors popping up or anything we're good to go and now we're going to make a new file inside of our lib folder here and i'm going to call this one database.dart all right so the first thing we need to do here is just import a few modules so we're going to say import package colon and then we're going to go firebase underscore database slash firebase underscore database dot dot so that's the file we need there and then the next one we're going to do is we're simply going to import post from our own file here so we'll just say import post dot dart now the reason we need this is because all of the database related stuff is going to be dealing with the posts so essentially you know saving posts updating posts oh a user liked that post we need to change how many likes they have so i'm just importing posts so we can actually use that class and then what we're going to do is set up our database reference which is actually going to reference the database and i'll kind of talk about how this stuff works but we're just going to call this database reference like that if i could type it properly and that's going to be equal to a firebase database dot instance dot reference so what this is doing is saying okay we've connected to firebase here let's get the firebase database instance let's get a reference to that so now we can simply use database reference whenever we're looking for a certain record in the database so if i have a look here excuse me sorry this is the record i'm talking about when we ask for dot reference here that's going to give us a reference to this and now that we have this we'll be able to see anything with within it so essentially if i click new here you can see i can add a name and i can add a value that's data that's being stored inside of this so if we have a reference to this then we can now add data retrieve data you know all that fun stuff anyways this will make more sense in a sec but that's what we need for the reference next what i'm going to do is i'm actually going to sorry show us how we can add something to the database so to actually save a new post what we need to do is we need to make a function here that can simply add that to the database so i'm going to say database reference because this is what we're going to return save post and then this is going to take a post like that so what this method is going to do or what this function is going to do that i'm writing inside of here is simply take a post object do some stuff to it and then automatically save that in our firebase database this is just the first thing i want to test out to make sure that everything's working and yeah okay so first thing i'm going to do is i'm going to say var id equals database reference dot child i'm going to do posts slash and then i'm going to say dot push now i know this makes no sense to you so let me explain database reference is the reference to our database the way that this kind of works is there is children in the database which are kind of like the different sections of items almost right so we could have like users posts photos images comments like stuff like that kind of the different database tables this works different than your like standard database it's like a really simplified form but you can imagine that underneath here there's kind of a tree of different objects so maybe we have like a post object and then within that we have all of the different posts maybe we have like a comment object and that has all of the different comments so when i'm saying database reference dot child posts what i'm doing is saying okay i want to reference something called posts within the database now right now we don't have anything called posts right there's nothing in here that we can see that is called posts so what this will do is automatically create this new reference called posts within the database now the reason i'm doing this slash is i'm pretty much saying hey i want to reference a child that is kind of like a folder right that's that's not one individual object but that holds multiple objects so just like if you're talking about like a path right and you have like you know desktop and then maybe in our case i had like flutter as a folder and i did another slash then that would tell me oh hey this is a directory this isn't a file so that's the same thing here with post we're saying that's kind of like a directory to where the posts are and dot push is saying okay so every time that we add a new entry into posts we need to give that entry a unique id so just like any database system you might have worked with before every single entry in the database has to have some kind of unique identifier that allows us to differentiate it between something else because technically you know the same person could post two different posts and they could have the exact same content and if we didn't have any unique id for them we wouldn't have any way to differentiate between them right so we need a unique id so what this is going to do this push is going to give us a database reference to a unique id that we can store inside of posts so all we have to do now is take this id and set that kind of like object that's in our database to hold the values that we want so i'm hoping that's kind of making sense once i add this in you'll see a lot more clear how this actually works but now i have id which is kind of like a placeholder item in my database and now what i need to do is just set the content that this is going to hold or set the data this is going to store so i say id dot set and then inside of here we need to put a json serializable object now if you're unfamiliar with json that's totally fine but essentially what we need to do is we need to take this post object that's being passed into us we need to kind of serialize it into a dictionary that has key value pairs so rather than having you know like actual attributes on the class we're going to have a dictionary that says body okay that's equal to this author that's equal to this likes that's equal to this yada yada yada okay so what i'm going to do actually is modify this post class a little bit just because we're going to need to kind of change how things work based on how this database goes uh and actually we'll do that first and then i'll get into how we actually serialize this into something that can be stored in the database so let me zoom in a little bit okay so we have body author likes and user liked first thing i'm going to do is get rid of this user liked the reason for that is that we had that before just to tell us if the current user had liked this post or not but now when we have multiple users using our app that's not really going to mean much to us if we have this true or false value and you know we load that in on two different people's things essentially what that would mean as soon as one user only one person liked this post no one else would be able to like it because we don't have a unique way to determine which user liked the post we just know it if a user liked the post so rather than saying user liked what i'm actually going to do is completely change likes and i'm going to say instead of into likes i'm going to say list users liked equals an empty list and sorry actually we're not going to make this a list i'm going to make this a set and we'll talk about why in a sec okay so now i have a set and what this set is going to store is all of the ids of the users that have liked this post so that way i can tell how many users have liked this post based on how many entries there are in this set and i can see oh has this user liked this post already well if they're in the set they have if they're not in the set they haven't and that'll be the way we determine whether we add a like or subtract alike is just simply by adding users to the set or removing users to the set so now instead of like post what i'm going to do is say if this dot users liked dot contains and we're going to need to now take a firebase user user so what we're going to do is pass actually yeah we'll pass a firebase user user into like post which says okay well if we like a post you need to give me the user that liked it and then we're going to see if this contains the user.uid so what we'll do is if it does contain the user uid then we're going to say this dot user dot remove and then user dot uid otherwise we'll add the user id into the set so this dot user liked dot add user.uid hoping that makes sense uh but that's kind of the basics that's how we're going to do it with the likes we're just going to have a list now so we've actually shortened out the amount of attributes now the next thing i'm going to add on here is actually an id so i'm going to say string underscore id and just leave it like that now the reason i'm doing that is because since we're now storing this in the database all of these posts need to have some kind of id associated with them if i want to update this post well i need to know what post to update right so i have to have an id on it so that i can actually reference the thing so instead of actually just having id i'm going to change this to be a database reference and what this is going to do now is let me store the reference in the database to this specific post object you know we won't display this anywhere on the screen but we just kind of need this in the back end when we're updating objects so now what i will do is i will make now the a method that will allow us to change the id so i'm just trying to think what i want to do next but what i'm going to do is i'm going to say void set id and what i'm going to simply say in here is we'll take a database reference id and we'll do this dot underscore id equals id next we're going to make a method that can actually transform this entire post into a dictionary so i'm going to say map string and oops and then dynamic and what this is going to do is be it's going to be called to json and it's going to return a string sorry a map which is just a simple dictionary that has string keys and dynamic meaning pretty much anything as the values associated with those keys so to json like that and now we'll simply return and we're just going to make a dictionary and you'll see what i'm going to do in here so i'm going to go ahead and i'm going to say author like that author colon and this is going to be author so we could do this dot author just to specify as well so author this dot author comma we're going to say users liked oops users liked and then colon this dot users liked and then finally what else do we need we need the body and then we'll say body and this dot body all right so there we go now we have actually what we wanted to kind of serialize so we're pretty much just setting it up so it's a dictionary right we just have a string key and then we have what the actual value is i know it seems like oh well why do we have to do that but you'll see just for us to store things in firebase it needs to look like this uh yeah so user likes is gonna be a set so what i'm actually gonna do is i need to change this user like to set into a list the reason for that is sets are not serializable uh within kind of like json objects so whenever we have a set we just have to turn it into a list we want it to be a set because it's really fast to perform contains operations add operations and remove operations in a set whereas the list is a lot slower but as soon as we actually want to store this in a database we'll have to convert that to a list so that's what we do right here okay so now we have all of that and you can imagine that if we're now going to store this in the database we need a way to actually take this and turn this back into a post object that we can use internally so we'll do that next but let's go to database i just want to get you thinking about that and let's say id dot set and let's go post dot to json so what this will do is it will take our post object it will call this to json object which will return that map and then we'll save that map in the database and then what we'll do is we'll return that id and that will be pretty much all we actually need to do when we save this post okay great so i think that should be working so what i'm going to do now is just make it so that when we make a new post we'll just call that just to see if that's actually working and we'll keep going from there so let's go to text input widget um actually this is going to be my home page and where it says a new post what we're going to do is when we add the new post we'll also add that to the database so instead of just having new post i'm going to say var post equals that and this doesn't necessarily need to be inside of set state but we can save our post equals new post let's put that above here and then we will say post dot add and we will add that post and before we do that actually sorry we need to save the post so we're going to call save post which is the method that we put inside of database.dart when i called that it automatically imported um what was it database.dart you can see that at the top right there so save post and that's what we need to do and then what we'll do after we save the post is we're actually going to say post dot underscore id equals and funny enough that's going to be equal to save post so let's just do that and sorry not underscore id this is going to be set id and we'll set that equal to say post okay so i think that's good let me just go over this again what we're doing is we're calling save post right we're giving it that post object that we just created up here so now if i actually go to post we can see that save post what that does is sorry that's in database save post what that does is store this in the database and it returns us an id so once we have that id now we need to actually add that so if i can find where this was to this post object so that it knows where it is if we have to update it or something later on and then we go this dot set state and we say post dot add and we add that to the list so let's see if this is working now i'm going to run the app oh build errors let's see what our errors are here okay so we need to make a few changes just because i realized we did modify that post object and i didn't modify where it was being used so if we go ahead and look in postlist.dart rather than going post dot likes we're going to go post dot and this is going to be user liked dot length so we can figure out how many people liked it just by getting the length of that set and then same thing here instead of saying post dot user liked we'll say post dot users liked dot contains and then what we're actually going to need to do is get the current users your uid and see if the current user has liked it by just checking if they're contained in the set of users that have liked that so i don't think we actually have access to the user object in here so that's the next thing that we're going to need to change so let me actually just close some of this stuff here we now need to make sure that we're actually passing in the user object to this so that we can use that so if we look here let's see stateful widget let's now add another field up here so let's say final firebase user like that and we'll just call this user and then inside of post list we'll say this dot user so now this means we have to pass in our user object to the post list so let's go back to my home page which is i believe where we call this and do we have user here no we actually only have name so now we're going to change this as well inside of my home page so we have access to user so instead of final string name we're going to say final firebase user like that and instead of name this is going to be user now this is going to be this dot user and instead of widget.name we're going to say widget dot user dot display name and that should be good firebase user okay it's saying we don't have this imported so let's hover over it click quick fix and then import library firebase auth from there okay so now we have all the packages we need what i did to do that again was just hovered over it there was quick fix and i just pressed import the module that we need okay so now post list postlist is saying hey you know we're missing an argument we that's because we now need to pass the user through so within post list we're going to say widget dot user all right so that should have hopefully fixed the errors i'll quickly go over what we did we just modified my home page so that rather than taking a name we're now taking a user we are then now rather than just calling that the uh sorry post list with post we're going to pass it a user inside of post list we've now added a user so we can store that here and that way now we can check inside of post.userlike.contained which is down here if the widget dot user.uid is contained in the list of people that have liked this post so if it is that means we liked it and then we'll obviously display that green icon so one last thing we're going to need to do we need to go to login and rather than calling my home page here with user.displayname we're going to call it just with user so we just passed user now and i think that should be all the changes we need to make and let's go ahead and actually run this app and see if that's working so i'm going to press f5 it doesn't look like we're getting any all right so this app is loaded up i'm going to press sign in with google and now i will simply press my google account to sign in and let's see all right we get brought to this message page let me type hello and when i do that we can see this message actually gets added here and it's working so let's see if i can like this it doesn't look like the like thing is working so i might have made a mistake here and it does look like i did because there was a exception thrown we'll have a look at that in a second but let's go to the database and see if anything got added ah so i don't believe anything got added i think that is probably because of the exception so i'm going to have a look at this exception i'll be back and i'll discuss what what went wrong all right so i've determined what the issue was here essentially when we press that like button we were having an exception thrown so the reason for that is if we have a look here we can say that we're calling this dot like which is the method up here which just has the set state here for us and we're giving it a callback function which is like post now let's have a look at post.like post and actually see what that is okay so here we are we can see that this actually accepts a firebase user but when we're here and we just pass post.like post.post we're not actually passing um sorry the uh the argument that we need to within here so what i'm gonna do is simply change this to be an arrow function and then where it says post.like post inside of here i'm to pass i believe it's widget dot user so since we have access to user up here what i need to do is make sure that actually when we pass the callback function we pass a function that's going to call like post with the user that liked that post so we just make a little arrow function which says okay you know this is kind of an anonymous function that this function will simply call this function so when we call the callback it will call post.like post and pass the argument widget.user so let me refresh quickly here and let's try this again and let's see if things are working so sign in with google i'll choose my account all right and then let's just go hello and there we are okay so i don't see any errors right now doesn't look like anything's gone wrong let's go ahead and like it and we can like and unlike and see that that is working so now i'm actually going to go over here to this message app and it still seems like nothing is showing up here so give me one sec i'll have a look into this and oh sorry after i refresh the page there we go things are showing up so here we go we can see that we have posts and then we have two posts actually added right here so we have timor sika who said hello another tabersica who said hello and now if i go back to my app actually and let's have this open at the same time so we can kind of see this and let's go test and let's hit enter we can see that this gets added to the post so this is kind of the tree structure i was talking about we have posts which is kind of like this one of the branches of the tree and then within that we have all of the different posts that have their unique ids and the way we generated these ids was by calling that push method from that database file that we had so okay so that's the basics of that obviously none of this is showing any of our users liked that's because we haven't liked any of these posts but see if i liked these posts nothing's changing so we need now a way to actually update these posts that when we like it we can tell that we've liked this post you
