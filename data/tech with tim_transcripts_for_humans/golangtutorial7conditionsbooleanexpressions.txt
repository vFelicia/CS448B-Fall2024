With timestamps:

00:02 - [Music]
00:06 - hello everyone and welcome back to the
00:08 - golang tutorial so in this video what
00:10 - I'm gonna be doing is talking about
00:11 - comparison operators and boolean
00:14 - expressions otherwise known as
00:15 - conditions that's why I usually like to
00:17 - phrase them now there's a bunch of words
00:19 - again you've probably heard me say all
00:20 - these random things that you don't
00:21 - understand don't worry about the
00:23 - vocabulary behind it so long as you
00:24 - understand the concept that is totally
00:26 - fun so what I'm gonna show you here is
00:28 - what is known as the comparison
00:29 - operators now the comparison operators
00:31 - us these are pretty well standard across
00:33 - almost all programming languages
00:35 - sometimes they added a few extra or
00:37 - there's some that are a little bit
00:38 - different go is pretty standard the
00:39 - operators we have is less than greater
00:41 - than less than or equal to greater than
00:43 - or equal to is equal to and not equal to
00:47 - so these are kind of v6 operators we can
00:49 - use to compare different values so
00:51 - sometimes and often times actually we
00:54 - want to check if something is equal to
00:55 - something else if something is less than
00:57 - or greater than something else and you
01:00 - know there's a lot of math that will
01:01 - come into programming when we can do
01:02 - these kind of things so we have those
01:04 - operators now how do we use them these
01:06 - work very similarly to the arithmetic
01:08 - operators that I've shown you showed you
01:09 - before except when we write an
01:12 - expression that contains them that
01:14 - expression will result in either being
01:15 - true or false so rather than returning
01:18 - some numeric value like we might have
01:20 - when we added two numbers this will
01:22 - return either true or false based on the
01:24 - comparison that happened so if I do
01:27 - something like Val colon equals X less
01:29 - than 5 well let's look at this is X less
01:32 - than 5 no it's not so you would assume
01:35 - that this is gonna be what then well
01:37 - this should be the value false so if I
01:39 - actually run the code and look down in
01:40 - the console here oops Y declared and not
01:43 - use so let me just comment that out but
01:45 - if we say X less than 5 and we run this
01:47 - we get the value of false because X is
01:50 - not less than 5 but what about X less
01:53 - than or equal to 5 well that's gonna
01:55 - give us the value of true so let's run
01:57 - this and have a look and we get true so
02:01 - the way this operator works is it pretty
02:03 - much says is X less than or equal to 5
02:05 - and the basic way to see if you
02:07 - understand how these work is just read
02:08 - it as a sentence right I say is the
02:10 - variable X and then read the name of the
02:12 - operator so less
02:13 - equal to the value of five and you can
02:16 - pretty much determine by yourself
02:17 - whether that's gonna be true or false
02:18 - now commonly we'll also do something
02:20 - like double equal sign so two equal
02:22 - signs since four is equal to it checks
02:24 - for equality between these two values so
02:26 - it checks if X is equal to the value of
02:29 - five now in this case it is so we will
02:32 - get the answer of true now it's
02:35 - important to note that like I said these
02:36 - work very similarly to the arithmetic
02:38 - operators and that whatever is on the
02:39 - left-hand side and the right-hand side
02:41 - need to be the same type so if I go
02:43 - ahead and do something like you know y
02:45 - equals 6.5 and then I say X equals
02:48 - equals Y well obviously we know that's
02:50 - false but this is actually invalid
02:52 - syntax we actually can't write this
02:53 - because this is not the same type as
02:56 - this this is a float and this is an int
02:58 - so if we wanted to do this comparison
03:00 - then we would have to convert either
03:01 - this to an int or this to a float so it
03:04 - would likely make sense to convert this
03:05 - to a float so we're not losing any
03:07 - information float 63 float64 like that
03:10 - and now if we run this we actually get
03:13 - an answer of false
03:15 - now the other comparison we can do
03:16 - that's like this is not equal to you can
03:19 - think of this as just the reverse of is
03:21 - equal to right so if they are equal then
03:23 - not equal to will be false if they're
03:25 - not equal then not equal two will be
03:26 - true right pretty basic again you can
03:29 - just read the name and that should make
03:30 - sense so let's see we get in this case
03:33 - false does not equal wait what the heck
03:35 - I don't think I saved the program let me
03:37 - run this one more time that should be
03:39 - the value true okay yeah so true there
03:41 - we are I was confused before okay so
03:43 - there we go that's the basic operators I
03:45 - mean like I could go through and show
03:46 - you all of them but I don't think
03:48 - there's too much value in doing that if
03:49 - you understand what these mean what I
03:52 - will say though is I've called like this
03:53 - one less than and this one greater than
03:55 - um these don't really have like a formal
03:57 - name at least in my opinion it just
03:59 - really based on where you write things
04:01 - like if I write you know something
04:03 - that's less and greater here then the
04:06 - same expression can be defined by just
04:09 - putting less greater here right like
04:13 - these are the same things if you just
04:15 - flip where the two values are so that's
04:17 - something to keep in mind that works the
04:19 - same obviously with the equal signs too
04:20 - so there's not one that's less than and
04:23 - one that's greater than it depends where
04:24 - you put the variables these could be
04:26 - equivalent
04:27 - expressions now you can also do stuff
04:29 - like this right against a float 64 X
04:31 - like plus 1.5 does not equal Y we can
04:36 - you know combine expressions and do that
04:39 - so let's have a look at this here and
04:40 - see what we get on this and we get false
04:44 - because these actually are the same
04:45 - value so the way this works is we
04:47 - actually evaluate any arithmetic
04:49 - operators before we go ahead and do this
04:51 - comparison operator so you can do things
04:53 - like add 1.5 check if it's less than a
04:55 - value you know multiply something within
04:58 - the same line as wherever this
05:00 - comparison operator is and right here
05:02 - what I've been doing is storing this in
05:04 - a variable we don't necessarily need to
05:05 - store that in a variable in fact I could
05:07 - take this expression here and just paste
05:09 - it right into the FMT dot print line and
05:12 - there won't be any issue with that idle
05:14 - give us actually the exact same thing
05:16 - we've just omitted the step of making
05:17 - that variable so there we go we get
05:19 - false now I'll go back what I want to
05:22 - show you now is comparing strings and
05:23 - some other data types so not just you
05:26 - know integers and floats so let me like
05:27 - a string Tim let me make a string Tim
05:30 - here with a capital T now my question is
05:33 - pretty much what do you think is gonna
05:34 - happen if I try to compare these two
05:36 - values so I say if X is equal to Y is
05:38 - that gonna give me true or is that gonna
05:40 - give me false well let's have a look at
05:42 - it and run it we are going to get the
05:45 - value of false because this capital T is
05:48 - not the same as this lowercase T so when
05:50 - we're comparing strings all of the
05:52 - characters in that string including any
05:54 - white spaces or anything need to be the
05:55 - exact same so just keep that in mind
05:57 - because a lot of people will make that
05:59 - mistake when they're doing this
06:00 - comparisons so let's how you do on
06:01 - strings now my question is can I do
06:03 - something like this can I do X is less
06:05 - than Y let's see is that a valid thing
06:07 - to write well let's run this code and
06:10 - see what we actually end up getting so
06:12 - we actually get false so the way that
06:14 - this works is we can actually compare
06:16 - strings using less than and greater than
06:18 - operators and what that will do is
06:19 - compare what's known as the ASCII value
06:21 - of the characters starting from left to
06:24 - right so a better way to do this is
06:26 - something like you know a and B so is a
06:29 - less than B well if you think about an
06:30 - alphabet right a comes before B so it
06:33 - would be less than B but is capital a
06:36 - less than B actually no it's not and the
06:39 - reason it's not is because cap
06:41 - letters um in the ASCII code table which
06:44 - is I can't really I guess I could pull
06:45 - up a photo I'm not gonna do that right
06:47 - now but the way it works is each letter
06:49 - has one number that represents it in the
06:53 - computer and a capital hit a happens to
06:55 - be 65 and I believe that lowercase a is
06:59 - like 97 or 96 or so it's like 90
07:01 - something the idea is though it goes all
07:04 - the uppercase letters so starting at 65
07:06 - and then after all of those have
07:08 - finished it starts at lowercase a and
07:10 - goes up so any lowercase letters will be
07:12 - actually greater than any of the capital
07:15 - ones and I'll prove this to you because
07:17 - we say is luck X less than Y and in this
07:20 - case well this would actually be true
07:22 - but if I swap this around and maybe
07:24 - actually let's make that see for a
07:26 - better example and we run this we are
07:29 - going to get the value of false because
07:31 - B is actually a greater value than C and
07:34 - that's kind of the idea behind that so
07:37 - you can compare strings you can compare
07:38 - characters as well I believe so
07:40 - characters are actually defined with
07:42 - single quotation marks so I could
07:43 - compare the equality between like to
07:45 - sees like check a double equal sign
07:47 - let's have a look at this here and we
07:50 - get the value true right so that's the
07:52 - idea behind this you can compare pretty
07:53 - much any type of objects for some things
07:56 - when we start getting more advanced
07:57 - it'll become a little bit more
07:58 - complicated but that's the idea behind
08:00 - comparison operators understand that
08:02 - these return true or false and yeah if
08:05 - you understand that you are ready to
08:07 - move on to the next video where we talk
08:08 - about chained conditionals so with that
08:10 - being said I hope you guys enjoyed if
08:12 - you didn't make sure you leave a like
08:13 - subscribe and I will see you in the next
08:15 - one

Cleaned transcript:

hello everyone and welcome back to the golang tutorial so in this video what I'm gonna be doing is talking about comparison operators and boolean expressions otherwise known as conditions that's why I usually like to phrase them now there's a bunch of words again you've probably heard me say all these random things that you don't understand don't worry about the vocabulary behind it so long as you understand the concept that is totally fun so what I'm gonna show you here is what is known as the comparison operators now the comparison operators us these are pretty well standard across almost all programming languages sometimes they added a few extra or there's some that are a little bit different go is pretty standard the operators we have is less than greater than less than or equal to greater than or equal to is equal to and not equal to so these are kind of v6 operators we can use to compare different values so sometimes and often times actually we want to check if something is equal to something else if something is less than or greater than something else and you know there's a lot of math that will come into programming when we can do these kind of things so we have those operators now how do we use them these work very similarly to the arithmetic operators that I've shown you showed you before except when we write an expression that contains them that expression will result in either being true or false so rather than returning some numeric value like we might have when we added two numbers this will return either true or false based on the comparison that happened so if I do something like Val colon equals X less than 5 well let's look at this is X less than 5 no it's not so you would assume that this is gonna be what then well this should be the value false so if I actually run the code and look down in the console here oops Y declared and not use so let me just comment that out but if we say X less than 5 and we run this we get the value of false because X is not less than 5 but what about X less than or equal to 5 well that's gonna give us the value of true so let's run this and have a look and we get true so the way this operator works is it pretty much says is X less than or equal to 5 and the basic way to see if you understand how these work is just read it as a sentence right I say is the variable X and then read the name of the operator so less equal to the value of five and you can pretty much determine by yourself whether that's gonna be true or false now commonly we'll also do something like double equal sign so two equal signs since four is equal to it checks for equality between these two values so it checks if X is equal to the value of five now in this case it is so we will get the answer of true now it's important to note that like I said these work very similarly to the arithmetic operators and that whatever is on the lefthand side and the righthand side need to be the same type so if I go ahead and do something like you know y equals 6.5 and then I say X equals equals Y well obviously we know that's false but this is actually invalid syntax we actually can't write this because this is not the same type as this this is a float and this is an int so if we wanted to do this comparison then we would have to convert either this to an int or this to a float so it would likely make sense to convert this to a float so we're not losing any information float 63 float64 like that and now if we run this we actually get an answer of false now the other comparison we can do that's like this is not equal to you can think of this as just the reverse of is equal to right so if they are equal then not equal to will be false if they're not equal then not equal two will be true right pretty basic again you can just read the name and that should make sense so let's see we get in this case false does not equal wait what the heck I don't think I saved the program let me run this one more time that should be the value true okay yeah so true there we are I was confused before okay so there we go that's the basic operators I mean like I could go through and show you all of them but I don't think there's too much value in doing that if you understand what these mean what I will say though is I've called like this one less than and this one greater than um these don't really have like a formal name at least in my opinion it just really based on where you write things like if I write you know something that's less and greater here then the same expression can be defined by just putting less greater here right like these are the same things if you just flip where the two values are so that's something to keep in mind that works the same obviously with the equal signs too so there's not one that's less than and one that's greater than it depends where you put the variables these could be equivalent expressions now you can also do stuff like this right against a float 64 X like plus 1.5 does not equal Y we can you know combine expressions and do that so let's have a look at this here and see what we get on this and we get false because these actually are the same value so the way this works is we actually evaluate any arithmetic operators before we go ahead and do this comparison operator so you can do things like add 1.5 check if it's less than a value you know multiply something within the same line as wherever this comparison operator is and right here what I've been doing is storing this in a variable we don't necessarily need to store that in a variable in fact I could take this expression here and just paste it right into the FMT dot print line and there won't be any issue with that idle give us actually the exact same thing we've just omitted the step of making that variable so there we go we get false now I'll go back what I want to show you now is comparing strings and some other data types so not just you know integers and floats so let me like a string Tim let me make a string Tim here with a capital T now my question is pretty much what do you think is gonna happen if I try to compare these two values so I say if X is equal to Y is that gonna give me true or is that gonna give me false well let's have a look at it and run it we are going to get the value of false because this capital T is not the same as this lowercase T so when we're comparing strings all of the characters in that string including any white spaces or anything need to be the exact same so just keep that in mind because a lot of people will make that mistake when they're doing this comparisons so let's how you do on strings now my question is can I do something like this can I do X is less than Y let's see is that a valid thing to write well let's run this code and see what we actually end up getting so we actually get false so the way that this works is we can actually compare strings using less than and greater than operators and what that will do is compare what's known as the ASCII value of the characters starting from left to right so a better way to do this is something like you know a and B so is a less than B well if you think about an alphabet right a comes before B so it would be less than B but is capital a less than B actually no it's not and the reason it's not is because cap letters um in the ASCII code table which is I can't really I guess I could pull up a photo I'm not gonna do that right now but the way it works is each letter has one number that represents it in the computer and a capital hit a happens to be 65 and I believe that lowercase a is like 97 or 96 or so it's like 90 something the idea is though it goes all the uppercase letters so starting at 65 and then after all of those have finished it starts at lowercase a and goes up so any lowercase letters will be actually greater than any of the capital ones and I'll prove this to you because we say is luck X less than Y and in this case well this would actually be true but if I swap this around and maybe actually let's make that see for a better example and we run this we are going to get the value of false because B is actually a greater value than C and that's kind of the idea behind that so you can compare strings you can compare characters as well I believe so characters are actually defined with single quotation marks so I could compare the equality between like to sees like check a double equal sign let's have a look at this here and we get the value true right so that's the idea behind this you can compare pretty much any type of objects for some things when we start getting more advanced it'll become a little bit more complicated but that's the idea behind comparison operators understand that these return true or false and yeah if you understand that you are ready to move on to the next video where we talk about chained conditionals so with that being said I hope you guys enjoyed if you didn't make sure you leave a like subscribe and I will see you in the next one
