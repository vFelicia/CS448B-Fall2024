With timestamps:

00:00 - hello everybody and welcome to another c
00:02 - plus plus tutorial for beginners
00:04 - now in today's video i'm going to be
00:05 - discussing a topic called
00:07 - references now a reference is really an
00:09 - alias so another name for a variable
00:12 - and allows you to modify the variable
00:14 - through its reference or through
00:16 - its alias now people get confused with
00:18 - references and pointers and all these
00:20 - other kind of complicated things that
00:22 - are relatively specific to c plus plus
00:24 - and c in these kind of lower level
00:26 - languages
00:27 - so anyways i'm going to do my best to
00:28 - explain this to you with that said
00:30 - let's dive in
00:34 - [Music]
00:40 - so as i said a reference is an alias
00:42 - otherwise known as another name
00:45 - for a variable now to create a reference
00:47 - what you do is initialize a variable
00:49 - just like you normally would so you say
00:51 - something like int
00:52 - a equals let's say two and then if i
00:54 - wanted to make a reference to a
00:56 - i would say int ampersand
01:00 - which is above the 7 on your keyboard
01:02 - and then whatever the name of the
01:03 - reference is that you want and then is
01:05 - equal to
01:05 - and then that variable so notice we have
01:08 - the same type
01:09 - the only difference here is that we have
01:10 - this ampersand
01:12 - and what this tells us is b is a
01:14 - reference
01:15 - of a now really what that means is that
01:18 - if we
01:18 - modify b we will also modify a
01:22 - and the reason for that is b is not
01:23 - storing a copy of the variable
01:26 - or the value sorry that is stored by a
01:28 - it is telling us
01:29 - where a is and is giving us access to
01:31 - the variable a
01:33 - now this is going to be a little bit
01:34 - confusing so just bear with me i'm going
01:35 - to have to probably explain it a few
01:36 - times before you guys really get it
01:38 - but again the idea is this is an alias
01:40 - just another name
01:42 - for a variable we do not have two
01:45 - separate values here we don't have a
01:47 - being equal to two and b
01:48 - being equal to two we have b being equal
01:50 - to a and a being equal to two
01:53 - now let me just show you what i mean
01:54 - here if i c out a
01:56 - and i see out end l oh not end lf just
01:59 - end l
02:00 - and then i c out b and then end l
02:04 - you're going to see that both of these
02:05 - are equal to
02:07 - if this loads two all right now what
02:10 - happens though if i change a
02:11 - and i make a equal to three notice i
02:14 - haven't changed b right i'm just
02:15 - changing a
02:16 - let's see what happens now well
02:19 - i need to add a semicolon so it doesn't
02:21 - crash when we add a semicolon we can see
02:23 - that both a
02:24 - and b changed now same thing here if i
02:26 - change instead of a but i change b
02:28 - so i make b equal to 4 and then i run
02:30 - this you're going to see that both a
02:32 - and both b changed now this is different
02:35 - if i remove this reference so if i
02:37 - change this reference now and instead of
02:39 - saying
02:40 - int reference b is equal to a i'm saying
02:43 - int b
02:44 - is equal to a what you're going to see
02:45 - is that a does not change when i change
02:48 - b so if you look at this here you can
02:50 - see that we have two different values
02:51 - two
02:52 - and four and same thing in the opposite
02:53 - direction so if i change a to b equal to
02:55 - four
02:56 - that does not change the value of b the
02:58 - reason for that
02:59 - is when you say something like and b is
03:02 - equal to a
03:04 - really what this is saying is make a
03:06 - copy of whatever the value a
03:08 - is storing and store that in the
03:11 - variable b
03:12 - so if we're looking at our computer here
03:14 - we kind of have two little boxes
03:16 - one box labeled a that stores the value
03:19 - of two and then another box labeled b
03:21 - that stores the value two these are two
03:23 - distinct
03:24 - value twos and therefore if i change a
03:26 - to b something else that doesn't change
03:28 - b
03:29 - because b is pointing to a different
03:30 - version of the number two
03:32 - than a was pointing to however if i make
03:34 - this a
03:35 - reference and i say okay b is now
03:37 - referencing a
03:39 - what that means is there is only one box
03:41 - in our computer that has the value two
03:43 - and b is simply pointing to that box so
03:46 - a when i do this say we set up this
03:48 - little box here and it has a 2 inside of
03:51 - it
03:51 - and then when i say the reference of b
03:53 - is equal to a
03:54 - really what this does i'm trying to find
03:56 - an arrow here
03:57 - is it just points this variable here to
04:00 - be equal to this same box and so when i
04:02 - do something like a is equal to four
04:04 - that changes the value in this box to
04:06 - four so now when i access b
04:08 - i'm accessing four right because b is
04:10 - pointing to whatever box
04:12 - a is kind of holding or store so
04:14 - hopefully that analogy or visualization
04:16 - kind of gives you a bit of intuition
04:17 - into how this works
04:18 - but that is a reference now some of you
04:20 - may be asking me well what is the point
04:22 - of a reference
04:23 - well to be honest with you it's hard to
04:24 - really show you the point of a reference
04:26 - right now
04:27 - because we don't have any functions we
04:28 - haven't learned about more advanced
04:30 - things in c
04:31 - plus but a lot of times you don't want
04:33 - to just know the actual value that a
04:35 - variable is storing
04:36 - you want to actually have access to that
04:38 - variable and you want to be able to
04:39 - change that variable but through another
04:41 - name
04:42 - so like i showed you here now we have
04:44 - this name b which is really the same
04:46 - thing as a it's just another name
04:48 - for a and now if i modify b this changes
04:51 - a
04:51 - and that's a good thing that allows us
04:53 - to be a bit more flexible in our program
04:55 - and again i apologize i can't give you a
04:57 - really good example right now
04:58 - but there is a lot of situations really
05:00 - when you get into functions
05:02 - where you want to have a reference to a
05:04 - value so that you can actually modify
05:06 - that value you don't have to uh
05:08 - what do you call it just use a copy of
05:10 - that so hopefully that's kind of clear
05:12 - but that's the basics of references now
05:14 - of course you can make a reference of a
05:16 - reference so if i say something like in
05:18 - and then we say ampersand c
05:21 - is equal to and we make this equal to b
05:24 - now if i say
05:25 - c out and i see out c and then i
05:28 - end l you're going to see if i change c
05:30 - to be equal to 2 here
05:32 - or i guess i should change to something
05:33 - else it could equal 3 then now all of
05:35 - these values change to 3. so when i say
05:38 - int ampersand c is equal to b
05:41 - what this is doing is again giving me a
05:43 - reference to a
05:44 - now this is where it gets a little bit
05:46 - more confusing but essentially we have
05:48 - this ampersand b
05:49 - and this is telling us b is a reference
05:51 - however whenever we
05:52 - access b we just use the value b here
05:55 - this actually gives us a now i know this
05:59 - is weird but when you see
06:00 - just like a b sitting here really what
06:02 - this is giving us is whatever this is
06:04 - referencing so it's giving us
06:06 - a and so when i say int ampersand c so
06:08 - the reference c
06:09 - is equal to b it's really giving me the
06:11 - reference
06:12 - to a it's not giving me a reference to b
06:14 - which is then referencing a
06:16 - it's giving me a reference to a that is
06:19 - why if i change c it changes both b
06:22 - and a because same thing here there's
06:23 - one box in our computer
06:25 - and all three of these variables are
06:26 - pointing to that box
06:28 - so we will continue in one second but i
06:30 - need to quickly thank the sponsor of
06:31 - this video and this series which is algo
06:34 - expert algo expert is the best platform
06:36 - to use for preparing for your software
06:37 - engineering coding interviews they have
06:39 - over 150 coding interview questions
06:41 - on the platform many of which are topped
06:43 - by me with that said check out algo
06:45 - expert from the link in the description
06:47 - and use the code tech with tim for a
06:48 - discount on the platform
06:50 - alright so hopefully that's clear now
06:51 - the last thing i want to show you here
06:53 - is how you actually
06:54 - access the address that these references
06:58 - are pointing to
06:59 - now unfortunately i don't have any good
07:00 - like drawing stuff in front of me so i
07:02 - could do a little illustration for you
07:03 - guys because that would probably be
07:04 - helpful
07:05 - but the idea here is that when you say b
07:07 - is equal to a
07:08 - like i kind of showed you really b is
07:11 - just pointing
07:12 - to that box that is storing the value 2.
07:14 - now
07:15 - whatever the value 2 is in that box i'm
07:18 - just going to keep calling it a box
07:19 - has a location that location is in your
07:22 - computer's memory it's in
07:23 - ram and it has some identifier for it
07:26 - and you can actually look at what the
07:28 - identifier or kind of the
07:30 - address of a variable is by using the
07:32 - ampersand sign
07:33 - in a different kind of context or
07:35 - different way
07:36 - so i'm going to erase all of this
07:38 - actually all these references
07:40 - and we'll just keep a and now what i'm
07:42 - going to do is show you how
07:44 - we can look at the address for this
07:45 - variable so if you put an ampersand
07:48 - before a value or before a variable this
07:51 - actually tells you
07:52 - the memory location address of this
07:55 - variable
07:55 - so let me show you if i run this notice
07:58 - we get this
07:58 - kind of random gibberish that doesn't
08:00 - mean anything to us this is actually a
08:01 - hexadecimal
08:02 - memory location that is telling us where
08:05 - the value 2 is stored
08:07 - and so when you put the ampersand
08:08 - instead of giving you the value stored
08:10 - by the variable it's giving you the
08:12 - address so that's what the address is
08:14 - for a now if i do
08:15 - int and then ampersand b is equal to a
08:18 - and then we just copy this line and we
08:21 - do the same thing
08:22 - and we look at b let's see what we get
08:26 - notice that we get the exact same thing
08:28 - the reason we get the exact same thing
08:30 - is because this is a reference right
08:32 - b is pointing to a and so b has the same
08:35 - memory location
08:36 - as a does and that means if you modify b
08:38 - you're modifying a if you modify a
08:40 - you're modifying b
08:42 - however if i say int b is equal to a
08:45 - and now i do this notice that both of
08:48 - these are different right and the reason
08:49 - they're different again is because
08:50 - what's happening is
08:51 - it's creating a copy of the value two
08:54 - storing that somewhere else
08:56 - and now we have two different memory
08:58 - locations one for b
08:59 - and one for a so hopefully that helped
09:02 - you clear it up a little bit
09:03 - but again remember the syntax here is
09:05 - you use the ampersand before the
09:06 - variable
09:07 - when you're accessing it if you want the
09:09 - memory location
09:10 - there's not too many times when you
09:11 - actually want to do that but for some
09:13 - reason if you do want to do that i mean
09:14 - that's how you access it
09:16 - and then if you want to create a
09:17 - reference you just declare a variable
09:19 - exactly like you would before
09:20 - except you add the ampersand beforehand
09:22 - so of course i've been showing you
09:24 - everything with ins just because it's
09:25 - the simplest
09:26 - you can do this with string you can do
09:27 - this with bool you can do this with
09:28 - whatever else you want
09:30 - so if i say something like bool x is
09:32 - equal to true
09:34 - and then i say bool and then ampersand y
09:37 - is equal to x we can replace this
09:40 - location with
09:41 - x and with y let me get rid of both a
09:43 - and b here
09:45 - let's print this out and notice we get
09:46 - the same thing right this works with all
09:48 - other variables
09:49 - not just ins like i was showing you okay
09:52 - so the last thing here is just kind of
09:53 - some nuances and details about
09:55 - references and creating them
09:56 - so when you create a reference you must
09:59 - initialize it
10:00 - what that means is that when you write
10:02 - bool then whatever the name of your
10:03 - reference is
10:04 - or the type and whatever the name of
10:06 - references you must have an equal sign
10:08 - after and you must set it equal to
10:10 - actually reference a variable
10:13 - you cannot do something like this you
10:15 - can't say bool ampersand y
10:17 - now this would work if you said bool y
10:19 - because you're saying okay i'm
10:20 - initializing this kind of empty variable
10:22 - called y that is of type boolean
10:24 - and then you can change it later on or
10:26 - you're declaring this
10:27 - boolean variable y and then you'll
10:29 - initialize it later on
10:30 - but when we're talking about a reference
10:32 - you must initialize it when you declare
10:34 - it
10:34 - and i know i kind of use those words
10:36 - interchangeably that's slightly
10:37 - inaccurate
10:38 - technically the declaration of a
10:40 - variable is defining its name
10:42 - and type while the initialization is
10:44 - actually giving it a value
10:45 - so anyways just remember that whenever
10:47 - you create a reference
10:48 - you must give it a value immediately you
10:50 - must initialize it
10:52 - you can't just do something like int
10:53 - ampersand y and in fact if you try to do
10:55 - that
10:55 - you're going to see we get an error
10:56 - right declared as a reference but not
10:58 - initialized
10:59 - now i'll show you something else you
11:00 - also cannot make this equal to null
11:03 - so in c plus plus there's this thing
11:04 - called null we haven't really gone over
11:06 - it but this is kind of what you can use
11:07 - as a placeholder when something just
11:09 - doesn't exist there's nothing there in
11:11 - anyways if i do this
11:12 - you're going to see we get an error it
11:14 - cannot bind non-constant value
11:17 - reference of type bool ampersand to an r
11:19 - value of type bool
11:21 - so just another note there you cannot
11:23 - initialize the value is null it must be
11:25 - initialized
11:26 - to a variable is the same type as the
11:28 - reference that you defined
11:30 - okay so one last thing to mention here
11:32 - is whenever you define the type of your
11:33 - reference
11:34 - it must be the type of the variable in
11:36 - which this reference
11:37 - is referencing so if i try to do
11:40 - something like string
11:41 - x is equal to and then i say make this
11:43 - equal to hello
11:44 - and then i try to reference this here
11:46 - you're going to see that we do get an
11:47 - error invalid initialization of
11:49 - reference
11:50 - because x is a string and well this is a
11:53 - bool so just keep that in mind you need
11:55 - to make sure the types are actually
11:56 - matching
11:57 - okay with that said i think that's all i
11:58 - need to cover here again this really
12:00 - isn't
12:00 - too confusing if you can kind of have
12:02 - that visualization of those boxes right
12:04 - and think about what is this variable
12:06 - actually pointing to because then if you
12:08 - change the location that it's pointing
12:10 - to
12:10 - anything else that's pointing to that
12:12 - location well that will have a different
12:13 - value as well
12:14 - anyways i hope you guys enjoyed if you
12:16 - did make sure to leave a like subscribe
12:17 - to the channel i will see you in another
12:19 - youtube video
12:28 - you

Cleaned transcript:

hello everybody and welcome to another c plus plus tutorial for beginners now in today's video i'm going to be discussing a topic called references now a reference is really an alias so another name for a variable and allows you to modify the variable through its reference or through its alias now people get confused with references and pointers and all these other kind of complicated things that are relatively specific to c plus plus and c in these kind of lower level languages so anyways i'm going to do my best to explain this to you with that said let's dive in so as i said a reference is an alias otherwise known as another name for a variable now to create a reference what you do is initialize a variable just like you normally would so you say something like int a equals let's say two and then if i wanted to make a reference to a i would say int ampersand which is above the 7 on your keyboard and then whatever the name of the reference is that you want and then is equal to and then that variable so notice we have the same type the only difference here is that we have this ampersand and what this tells us is b is a reference of a now really what that means is that if we modify b we will also modify a and the reason for that is b is not storing a copy of the variable or the value sorry that is stored by a it is telling us where a is and is giving us access to the variable a now this is going to be a little bit confusing so just bear with me i'm going to have to probably explain it a few times before you guys really get it but again the idea is this is an alias just another name for a variable we do not have two separate values here we don't have a being equal to two and b being equal to two we have b being equal to a and a being equal to two now let me just show you what i mean here if i c out a and i see out end l oh not end lf just end l and then i c out b and then end l you're going to see that both of these are equal to if this loads two all right now what happens though if i change a and i make a equal to three notice i haven't changed b right i'm just changing a let's see what happens now well i need to add a semicolon so it doesn't crash when we add a semicolon we can see that both a and b changed now same thing here if i change instead of a but i change b so i make b equal to 4 and then i run this you're going to see that both a and both b changed now this is different if i remove this reference so if i change this reference now and instead of saying int reference b is equal to a i'm saying int b is equal to a what you're going to see is that a does not change when i change b so if you look at this here you can see that we have two different values two and four and same thing in the opposite direction so if i change a to b equal to four that does not change the value of b the reason for that is when you say something like and b is equal to a really what this is saying is make a copy of whatever the value a is storing and store that in the variable b so if we're looking at our computer here we kind of have two little boxes one box labeled a that stores the value of two and then another box labeled b that stores the value two these are two distinct value twos and therefore if i change a to b something else that doesn't change b because b is pointing to a different version of the number two than a was pointing to however if i make this a reference and i say okay b is now referencing a what that means is there is only one box in our computer that has the value two and b is simply pointing to that box so a when i do this say we set up this little box here and it has a 2 inside of it and then when i say the reference of b is equal to a really what this does i'm trying to find an arrow here is it just points this variable here to be equal to this same box and so when i do something like a is equal to four that changes the value in this box to four so now when i access b i'm accessing four right because b is pointing to whatever box a is kind of holding or store so hopefully that analogy or visualization kind of gives you a bit of intuition into how this works but that is a reference now some of you may be asking me well what is the point of a reference well to be honest with you it's hard to really show you the point of a reference right now because we don't have any functions we haven't learned about more advanced things in c plus but a lot of times you don't want to just know the actual value that a variable is storing you want to actually have access to that variable and you want to be able to change that variable but through another name so like i showed you here now we have this name b which is really the same thing as a it's just another name for a and now if i modify b this changes a and that's a good thing that allows us to be a bit more flexible in our program and again i apologize i can't give you a really good example right now but there is a lot of situations really when you get into functions where you want to have a reference to a value so that you can actually modify that value you don't have to uh what do you call it just use a copy of that so hopefully that's kind of clear but that's the basics of references now of course you can make a reference of a reference so if i say something like in and then we say ampersand c is equal to and we make this equal to b now if i say c out and i see out c and then i end l you're going to see if i change c to be equal to 2 here or i guess i should change to something else it could equal 3 then now all of these values change to 3. so when i say int ampersand c is equal to b what this is doing is again giving me a reference to a now this is where it gets a little bit more confusing but essentially we have this ampersand b and this is telling us b is a reference however whenever we access b we just use the value b here this actually gives us a now i know this is weird but when you see just like a b sitting here really what this is giving us is whatever this is referencing so it's giving us a and so when i say int ampersand c so the reference c is equal to b it's really giving me the reference to a it's not giving me a reference to b which is then referencing a it's giving me a reference to a that is why if i change c it changes both b and a because same thing here there's one box in our computer and all three of these variables are pointing to that box so we will continue in one second but i need to quickly thank the sponsor of this video and this series which is algo expert algo expert is the best platform to use for preparing for your software engineering coding interviews they have over 150 coding interview questions on the platform many of which are topped by me with that said check out algo expert from the link in the description and use the code tech with tim for a discount on the platform alright so hopefully that's clear now the last thing i want to show you here is how you actually access the address that these references are pointing to now unfortunately i don't have any good like drawing stuff in front of me so i could do a little illustration for you guys because that would probably be helpful but the idea here is that when you say b is equal to a like i kind of showed you really b is just pointing to that box that is storing the value 2. now whatever the value 2 is in that box i'm just going to keep calling it a box has a location that location is in your computer's memory it's in ram and it has some identifier for it and you can actually look at what the identifier or kind of the address of a variable is by using the ampersand sign in a different kind of context or different way so i'm going to erase all of this actually all these references and we'll just keep a and now what i'm going to do is show you how we can look at the address for this variable so if you put an ampersand before a value or before a variable this actually tells you the memory location address of this variable so let me show you if i run this notice we get this kind of random gibberish that doesn't mean anything to us this is actually a hexadecimal memory location that is telling us where the value 2 is stored and so when you put the ampersand instead of giving you the value stored by the variable it's giving you the address so that's what the address is for a now if i do int and then ampersand b is equal to a and then we just copy this line and we do the same thing and we look at b let's see what we get notice that we get the exact same thing the reason we get the exact same thing is because this is a reference right b is pointing to a and so b has the same memory location as a does and that means if you modify b you're modifying a if you modify a you're modifying b however if i say int b is equal to a and now i do this notice that both of these are different right and the reason they're different again is because what's happening is it's creating a copy of the value two storing that somewhere else and now we have two different memory locations one for b and one for a so hopefully that helped you clear it up a little bit but again remember the syntax here is you use the ampersand before the variable when you're accessing it if you want the memory location there's not too many times when you actually want to do that but for some reason if you do want to do that i mean that's how you access it and then if you want to create a reference you just declare a variable exactly like you would before except you add the ampersand beforehand so of course i've been showing you everything with ins just because it's the simplest you can do this with string you can do this with bool you can do this with whatever else you want so if i say something like bool x is equal to true and then i say bool and then ampersand y is equal to x we can replace this location with x and with y let me get rid of both a and b here let's print this out and notice we get the same thing right this works with all other variables not just ins like i was showing you okay so the last thing here is just kind of some nuances and details about references and creating them so when you create a reference you must initialize it what that means is that when you write bool then whatever the name of your reference is or the type and whatever the name of references you must have an equal sign after and you must set it equal to actually reference a variable you cannot do something like this you can't say bool ampersand y now this would work if you said bool y because you're saying okay i'm initializing this kind of empty variable called y that is of type boolean and then you can change it later on or you're declaring this boolean variable y and then you'll initialize it later on but when we're talking about a reference you must initialize it when you declare it and i know i kind of use those words interchangeably that's slightly inaccurate technically the declaration of a variable is defining its name and type while the initialization is actually giving it a value so anyways just remember that whenever you create a reference you must give it a value immediately you must initialize it you can't just do something like int ampersand y and in fact if you try to do that you're going to see we get an error right declared as a reference but not initialized now i'll show you something else you also cannot make this equal to null so in c plus plus there's this thing called null we haven't really gone over it but this is kind of what you can use as a placeholder when something just doesn't exist there's nothing there in anyways if i do this you're going to see we get an error it cannot bind nonconstant value reference of type bool ampersand to an r value of type bool so just another note there you cannot initialize the value is null it must be initialized to a variable is the same type as the reference that you defined okay so one last thing to mention here is whenever you define the type of your reference it must be the type of the variable in which this reference is referencing so if i try to do something like string x is equal to and then i say make this equal to hello and then i try to reference this here you're going to see that we do get an error invalid initialization of reference because x is a string and well this is a bool so just keep that in mind you need to make sure the types are actually matching okay with that said i think that's all i need to cover here again this really isn't too confusing if you can kind of have that visualization of those boxes right and think about what is this variable actually pointing to because then if you change the location that it's pointing to anything else that's pointing to that location well that will have a different value as well anyways i hope you guys enjoyed if you did make sure to leave a like subscribe to the channel i will see you in another youtube video you
