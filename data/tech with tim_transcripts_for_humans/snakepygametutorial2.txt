With timestamps:

00:00 - so that's where things can get a bit
00:01 - complicated anyways to start what I'm
00:03 - gonna do is to say for event in PI game
00:07 - oops
00:08 - my doing of my typing here tie game at
00:11 - event dot gets like so and now we're
00:15 - just gonna say if event dot type equals
00:19 - equals PI game dot quit like this and
00:24 - this is the first one we always want to
00:25 - code in because we want to make sure
00:26 - that if they click that little red arrow
00:28 - it actually works and we can quit you're
00:30 - a new plugin quit like that and I'm just
00:32 - going to say if actually we don't even
00:35 - need another if because the way I'm
00:36 - going to do this is this other way you
00:39 - might have seen in PI game before to
00:40 - move things around he's like if vent dot
00:42 - type equals key down and then you just
00:45 - check which key was pressed and move to
00:46 - the left this is a similar thing but it
00:48 - works smoother I've used both of them a
00:50 - lot and this is one I prefer so I'm just
00:51 - going to use this so PI game duck key
00:54 - don't get underscored press so what this
00:56 - is gonna do is it's gonna get a list
00:57 - actually I think it's like a dictionary
00:59 - or something like that that has all the
01:01 - key values and then if they were pressed
01:04 - or not so that way if you press more
01:06 - than one key at once when you're looping
01:07 - through it'll adjust to that whereas the
01:10 - other one you can only click one at a
01:11 - time and you couldn't move like per se
01:13 - diagonally if you're moving like a
01:15 - character on the screen it doesn't
01:16 - matter too much for this but this is
01:17 - what I like to do it so now I'm gonna
01:18 - say four key in keys because remember
01:22 - this is gonna give us all of the keys
01:23 - and then like 1 or 0 value if they were
01:26 - clicked or not so we need to loop
01:28 - through all of them and check them say
01:29 - if keys and then PI game dot key or loop
01:35 - start ok underscore left I thought it
01:38 - was key then and then we're going to say
01:40 - if keys I game don't K underscore right
01:45 - like that and we can continue down here
01:48 - with up and down and then we'll get into
01:51 - exactly what is going to happen when we
01:53 - click these keys so last one here
02:01 - all right and there we okay so now what
02:05 - we're going to do is we're gonna change
02:06 - the direction according to what key we
02:09 - click so if we're going left that means
02:11 - that our X has to be negative because
02:13 - the way again coordinates work in PI
02:15 - game is in the top left hand corner of
02:16 - your screen is zero zero so if we want
02:19 - to be moving left we should be making
02:21 - our X negative to move more towards zero
02:24 - right if we want to move right now you
02:26 - make our X positive which would be one
02:28 - in this case because we're gonna move
02:30 - one cube at a time to go further to the
02:32 - right same thing with the Y it's kind of
02:34 - weird in PI game how the Y works because
02:36 - the more Y you add the further down you
02:39 - go so we'll do that inside so for X
02:42 - we're gonna set itself up during x
02:43 - equals negative one again except moving
02:45 - left and we're gonna set our journey y
02:47 - equal to zero and this is because again
02:50 - we don't to be moving in two directions
02:52 - at once and be going diagonal now this
02:55 - is what I was talking about
02:57 - it's we need to remember where we
02:59 - actually turned because if you just have
03:01 - one cube in the ground that's fine but
03:03 - when you have multiple cubes we need to
03:04 - be able to turn left right we need to
03:06 - remember where we turned so at the tail
03:08 - of our cube can turn at that point so
03:10 - that's why we have that self dot turns
03:12 - list up here or just this turns uh I
03:14 - want to say dictionary or set whatever
03:16 - so we're gonna add to that you know self
03:19 - thought turns and we're gonna give it a
03:23 - new key and I'll go through how this
03:25 - works in a second self thought pause
03:27 - here is equal to and then we're gonna
03:31 - give just a list of self duck turn x and
03:35 - self dot turned blind okay so you might
03:39 - be kind of confused on what's going on
03:40 - here so I've created a new dictionary up
03:42 - here that's what I'm gonna call it
03:43 - officially you could think of it as a
03:44 - set as well and pretty much we're gonna
03:47 - add a key which is the current position
03:50 - of the head of our snake and then it's
03:54 - gonna be set equal to what direction we
03:56 - turned so we're saying we have a new
03:58 - turn at this position and our character
04:01 - or where our snake moved left so it's
04:03 - gonna say we have self-join Y which is
04:05 - right here as negative one self dot
04:07 - certain X R and then during Y is equal
04:09 - to zero so we know what
04:10 - way we actually turned and I hope that
04:12 - makes sense that's yeah that's how we're
04:15 - gonna do that now I'm just gonna copy
04:16 - and paste these and then change these
04:18 - values so when we're going right this is
04:19 - gonna be one oops
04:23 - same thing here so put that in this is
04:25 - gonna be zero and turn why we're going
04:28 - up is gonna be negative one now when
04:31 - we're going down we need to change this
04:33 - to 1 and this to zero and I'm just gonna
04:36 - get rid of that and there we go okay so
04:39 - that is pretty much how we go about
04:42 - doing this and I can also just put
04:45 - elif's here as well because we don't
04:47 - want to be able to move in more than one
04:49 - direction so we're gonna prioritize the
04:51 - left arrow key if they're not clicking
04:53 - the left arrow key
04:54 - then we'll check they're doing the right
04:55 - otherwise up otherwise down because we
04:57 - don't want them to be able to click more
04:58 - than one key at once ok so next we need
05:01 - to actually move our cube and this is
05:04 - where it gets a little bit more tricky
05:05 - in terms of looking where our cube is
05:08 - and if it's at that turn then we're
05:10 - gonna turn it so I'm just gonna start
05:12 - coding that I'm kind of gonna go through
05:13 - exactly what I do
05:14 - so before I see in enumerate oops and I
05:21 - spoke that wrong didn't there like that
05:25 - and then we can say self-taught body cuz
05:27 - we're gonna look through the list of
05:29 - positions that we have in on the snake
05:32 - I'm gonna say P equals C top position
05:35 - and I'm just gonna copy this by the way
05:38 - that's what this little arrow does here
05:39 - it just makes a copy so that we're not
05:41 - changing the position of our snake when
05:45 - we do things it's just I just follow
05:47 - along with it's not super important okay
05:49 - so what I say if P is in self dot turns
05:53 - like this because remember what we did
05:55 - is we added the position of our head to
05:59 - turns so now we're going to say well if
06:01 - this position is in the turns then we're
06:05 - gonna move or we're gonna turn right so
06:08 - let's say here so we and say turn oops
06:13 - equals self dot trends
06:16 - P like that
06:18 - so now we've seen that it's in there so
06:20 - now it's in there we can find the index
06:22 - of it and we can grab the direction
06:24 - value so we know what way we're gonna be
06:25 - moving and I'm just gonna say see don't
06:27 - move like this and turn zero turn one
06:34 - like so okay now next I'm gonna say if I
06:39 - equals equals the length of self-thought
06:43 - body minus one oops
06:47 - then I'm so gonna do self I don't know
06:49 - why that's capital itself but turns.com
06:53 - okay so I know I just did a lot of
06:55 - coding here and this probably doesn't
06:58 - make a lot of sense you guys so I'm
06:59 - gonna kind of run through exactly what I
07:01 - just did it's it's pretty it's just a
07:03 - little bit difficult to explain so
07:05 - anyways what we start off by doing is
07:06 - we're gonna say we're gonna get the
07:07 - index and we're gonna get the cube
07:09 - object in our self up body because
07:12 - remember our self dot body is made up of
07:13 - cube objects right here that have these
07:18 - property right they're gonna have a
07:19 - direction Y Direction X a start color so
07:22 - on and we're gonna get we're gonna get
07:24 - to coding cube in just a second so there
07:26 - have cube objects now all of these cube
07:28 - objects have a position so I'm saying
07:31 - for each object here I'm going to grab
07:33 - their position and I'm gonna see if that
07:36 - position is in our turn list and we
07:38 - create the turn list and add to the turn
07:40 - list when we turn right when we click
07:44 - left
07:44 - sent it right so on and then we're gonna
07:47 - say okay so the actual turn so where
07:49 - we're actually going to be moving is
07:51 - equal to that are the turns list at that
07:55 - index right so we grab the turn
07:58 - direction X and Direction Y which we
08:00 - stored there and now we're going to just
08:01 - gonna say R cubed move which is another
08:04 - method that we're going to code and
08:05 - we're giving it that direction X in that
08:07 - direction y so it knows what weight it
08:09 - needs to move pretty well and then I say
08:12 - if I is equal to the length of
08:14 - self-thought body minus one so that
08:15 - means if we are on the last cube we're
08:19 - gonna remove that turn so once that last
08:21 - cube hits that turn we're gonna remove
08:24 - it because if we were just to leave that
08:26 - turn in the list and that would mean
08:27 - anytime you hit that position on the
08:28 - screen regardless of if the snake was
08:30 - turning there or not
08:31 - you'd automatically change directions if
08:35 - you don't remove it from the list
08:37 - hope that makes sense okay now also
08:40 - after this if here we're gonna say if
08:43 - the woody call it if it's not in the
08:46 - list so if our position is not in the
08:48 - list we still need to move the snake
08:49 - because it's constantly moving so what
08:52 - do we do to this when we write an else
08:53 - and I'm just gonna copy this in because
08:56 - it's gonna take a second to type because
08:57 - I have another file open and I'll go
08:58 - through what happened how this works
09:00 - okay no looks like a lot but pretty much
09:03 - what this is doing for us is we're
09:06 - checking whether or not we've reached
09:08 - the edge of the screen so saying if
09:10 - we're moving left and the position so
09:14 - the exposition of our cube is less than
09:17 - or equal to zero then we're gonna change
09:20 - that position so that it goes to the
09:22 - right side of the screen so the way that
09:24 - we can do that is by saying Cedros minus
09:26 - one because again in you start counting
09:28 - at zero and computers so if I rows is
09:31 - like 20 then the last cube would be 19
09:34 - in a list right so they see that rows
09:36 - minus 1 we're gonna be at the same
09:37 - y-value so we'll leave that there okay
09:40 - and then we say otherwise we're going to
09:42 - check if we're going right for moving
09:45 - right and same thing if we're at the
09:47 - edge of the screen move back to the left
09:49 - side by putting 0 here and the next one
09:51 - if we're going down what we're gonna be
09:54 - doing is again checking are we less than
09:56 - rows minus 1 or greater than rows minus
09:59 - 1 no we're not or if we are then let's
10:01 - move us back up to the top of the screen
10:03 - by changing our Y value and then same
10:05 - thing here if you're moving upwards now
10:08 - if none of that's true so we're not at
10:11 - the edge of the screen we're not moving
10:12 - up left down to whatever I just said
10:14 - then we're just simply going to move our
10:16 - cube at the direction X and the
10:19 - direction Y of that cube already so if
10:22 - that cube is moving upwards and it's not
10:24 - turning and it's not going to the edge
10:26 - of the screen it doesn't need to be
10:27 - changed just keep moving it in whatever
10:28 - direction it's going and that's why I'm
10:30 - simply referencing the cubes already
10:32 - existing Direction X and Direction Y
10:34 - we're not changing anything we're simply
10:35 - just saying okay let's move you forward
10:37 - one like that I hope that makes sense
10:40 - that was a lot and that's probably one
10:41 - of the hardest things in this program is
10:43 - figuring out the movement
10:44 - the stake so if you guys understand that
10:46 - then that is the hard part kind of over
10:48 - with and we're gonna get into this cube
10:50 - objects you're gonna understand what all
10:51 - this means and how our rows and columns
10:54 - kind of work and stuff at that okay so
10:57 - I'm just gonna forget about reset and
10:58 - add Q for now cuz we'll worry about
11:00 - those later but let's get into the drama
11:03 - thing because what I see if there's
11:04 - actually working and put this on the
11:05 - screen so simply for I see and new rates
11:10 - good why can i oh it's well under way
11:12 - today like that same thing self that
11:15 - body like that we're going to say if I
11:17 - because equals zero C dot draw and
11:22 - you'll see why these in a second true
11:26 - else see draw circles like that okay so
11:32 - the reason I'm doing this old check here
11:35 - rather than just drawing every object is
11:37 - because when we draw the first snake
11:40 - object on sure if you remember my other
11:42 - program it had eyes so what I would
11:44 - simply want to do is make sure that when
11:46 - we draw that first object we add eyes on
11:48 - to it just so we know where the head of
11:49 - the snake is we don't get confused like
11:51 - what directions maybe even although you
11:52 - shouldn't we I want to add the little
11:54 - eye so maybe just for aesthetic as well
11:55 - so what this true does optional
11:57 - parameter simply says draw eyes if it's
11:59 - the first one in our list like that if
12:03 - it's the head and then in this draw
12:05 - method you can see I have eyes equals to
12:07 - false but when you make it equal to true
12:08 - we're gonna do a special thing in here
12:09 - that's gonna draw eyes for us okay so
12:12 - now that we've coated this this whole
12:14 - mess of stuff in the snake class let's
12:17 - just run the program quickly and see if
12:18 - anything's happening so currently we
12:20 - just have the grid we I don't have any
12:22 - errors anything that's because we
12:24 - haven't drawn the snake object onto the
12:25 - screen yet so what we need to do is we
12:29 - just need to do simply do an S draw it
12:30 - within our redraw window here so I'm
12:32 - just gonna type I'm gonna global s here
12:34 - and I'll global it down there as well
12:36 - si s top draw like that and we need to
12:40 - give a surface so let's give it a
12:42 - surface and I'm gonna global s so that
12:44 - we can reference it there uh and is
12:47 - there a reason we aren't being drawn to
12:48 - the screen let's just have a look
12:50 - quickly s draw
12:55 - start draw oh it's because yes we are
12:58 - indeed trying asked but we haven't drawn
13:00 - any of the cube objects yet and it is
13:02 - calling the draw method on all of our
13:04 - cube objects which we haven't yet
13:06 - created hopefully that makes sense but
13:08 - we'll go ahead and do that now so we
13:10 - have to code a little bit more before we
13:11 - can see everything so I'll just go ahead
13:12 - and get into the cube object and let's
13:14 - just say self don't start you will start
13:17 - except I'm actually just gonna change us
13:20 - to position because I believe this is
13:21 - what it's supposed to be and I'm gonna
13:25 - say self done during X because one self
13:31 - thought during Y is equal to zero and
13:35 - self thought color is equal to color and
13:39 - the reason we have this is because we're
13:41 - gonna be drawing later what I want to
13:43 - call like a snack for the for the cube
13:45 - to collect for the snake to collect so
13:48 - we wanna be able to change the color
13:48 - with them and spelled it wrong like
13:52 - three times during X in during why the
13:54 - reason I have during X you're set to one
13:56 - initially is because I I want to make
14:00 - sure that we start moving in a direction
14:02 - if I had this at zero you would have to
14:04 - click a key before the snake search me
14:06 - but I want right when we run the program
14:07 - for the snake to just start moving so
14:09 - I'm setting it already with a direction
14:11 - X and the reason these are optional
14:13 - again is so that when we create a new
14:14 - cube object we don't have to implicitly
14:16 - say Direction X is one direction y 0
14:19 - because it's assumed that it's always
14:21 - gonna be like that unless otherwise
14:22 - stated ok let's have a look what else do
14:25 - we need to do here we need to now code
14:28 - this move function which is actually
14:29 - really easy almost gonna do is because
14:32 - say since we're changing the direction
14:34 - acts in the direction Y in our snake
14:36 - class we need to do that in here so that
14:38 - it stays with the object let's say
14:40 - during x equals three x and then the
14:45 - same thing self thought during why
14:47 - because then Y like that and then we'll
14:53 - go down here and all we're going to do
14:54 - is going to change our position so soft
14:55 - up position basically self dot pause
14:58 - zero which is our already existing
15:01 - position plus self thought 3x
15:05 - and they were setting self-thought pot
15:08 - is one which is our already existing y
15:10 - value plus eco is self-thought turn what
15:14 - like that and just in case I haven't
15:16 - mentioned it here right we're working
15:18 - with a grid system of 20 rows in this
15:20 - instant so when I say something like if
15:23 - our self deposition is like 1 3 or 10 10
15:27 - I'm saying we're in the 10th row and the
15:29 - 10th color I'm not saying the x value is
15:31 - equal to 10 and the y value is equal to
15:33 - 10 because it's not in the case of
15:35 - drawing on the screen because our screen
15:37 - is actually a width of 500 pixels but
15:40 - just where we are in the grid which is
15:41 - most important to us right now is equal
15:43 - to like that values like 1 4 or 3 5 so
15:46 - on like that just just to make that
15:48 - clear for anyone who might have been
15:49 - confused
15:50 - [Music]

Cleaned transcript:

so that's where things can get a bit complicated anyways to start what I'm gonna do is to say for event in PI game oops my doing of my typing here tie game at event dot gets like so and now we're just gonna say if event dot type equals equals PI game dot quit like this and this is the first one we always want to code in because we want to make sure that if they click that little red arrow it actually works and we can quit you're a new plugin quit like that and I'm just going to say if actually we don't even need another if because the way I'm going to do this is this other way you might have seen in PI game before to move things around he's like if vent dot type equals key down and then you just check which key was pressed and move to the left this is a similar thing but it works smoother I've used both of them a lot and this is one I prefer so I'm just going to use this so PI game duck key don't get underscored press so what this is gonna do is it's gonna get a list actually I think it's like a dictionary or something like that that has all the key values and then if they were pressed or not so that way if you press more than one key at once when you're looping through it'll adjust to that whereas the other one you can only click one at a time and you couldn't move like per se diagonally if you're moving like a character on the screen it doesn't matter too much for this but this is what I like to do it so now I'm gonna say four key in keys because remember this is gonna give us all of the keys and then like 1 or 0 value if they were clicked or not so we need to loop through all of them and check them say if keys and then PI game dot key or loop start ok underscore left I thought it was key then and then we're going to say if keys I game don't K underscore right like that and we can continue down here with up and down and then we'll get into exactly what is going to happen when we click these keys so last one here all right and there we okay so now what we're going to do is we're gonna change the direction according to what key we click so if we're going left that means that our X has to be negative because the way again coordinates work in PI game is in the top left hand corner of your screen is zero zero so if we want to be moving left we should be making our X negative to move more towards zero right if we want to move right now you make our X positive which would be one in this case because we're gonna move one cube at a time to go further to the right same thing with the Y it's kind of weird in PI game how the Y works because the more Y you add the further down you go so we'll do that inside so for X we're gonna set itself up during x equals negative one again except moving left and we're gonna set our journey y equal to zero and this is because again we don't to be moving in two directions at once and be going diagonal now this is what I was talking about it's we need to remember where we actually turned because if you just have one cube in the ground that's fine but when you have multiple cubes we need to be able to turn left right we need to remember where we turned so at the tail of our cube can turn at that point so that's why we have that self dot turns list up here or just this turns uh I want to say dictionary or set whatever so we're gonna add to that you know self thought turns and we're gonna give it a new key and I'll go through how this works in a second self thought pause here is equal to and then we're gonna give just a list of self duck turn x and self dot turned blind okay so you might be kind of confused on what's going on here so I've created a new dictionary up here that's what I'm gonna call it officially you could think of it as a set as well and pretty much we're gonna add a key which is the current position of the head of our snake and then it's gonna be set equal to what direction we turned so we're saying we have a new turn at this position and our character or where our snake moved left so it's gonna say we have selfjoin Y which is right here as negative one self dot certain X R and then during Y is equal to zero so we know what way we actually turned and I hope that makes sense that's yeah that's how we're gonna do that now I'm just gonna copy and paste these and then change these values so when we're going right this is gonna be one oops same thing here so put that in this is gonna be zero and turn why we're going up is gonna be negative one now when we're going down we need to change this to 1 and this to zero and I'm just gonna get rid of that and there we go okay so that is pretty much how we go about doing this and I can also just put elif's here as well because we don't want to be able to move in more than one direction so we're gonna prioritize the left arrow key if they're not clicking the left arrow key then we'll check they're doing the right otherwise up otherwise down because we don't want them to be able to click more than one key at once ok so next we need to actually move our cube and this is where it gets a little bit more tricky in terms of looking where our cube is and if it's at that turn then we're gonna turn it so I'm just gonna start coding that I'm kind of gonna go through exactly what I do so before I see in enumerate oops and I spoke that wrong didn't there like that and then we can say selftaught body cuz we're gonna look through the list of positions that we have in on the snake I'm gonna say P equals C top position and I'm just gonna copy this by the way that's what this little arrow does here it just makes a copy so that we're not changing the position of our snake when we do things it's just I just follow along with it's not super important okay so what I say if P is in self dot turns like this because remember what we did is we added the position of our head to turns so now we're going to say well if this position is in the turns then we're gonna move or we're gonna turn right so let's say here so we and say turn oops equals self dot trends P like that so now we've seen that it's in there so now it's in there we can find the index of it and we can grab the direction value so we know what way we're gonna be moving and I'm just gonna say see don't move like this and turn zero turn one like so okay now next I'm gonna say if I equals equals the length of selfthought body minus one oops then I'm so gonna do self I don't know why that's capital itself but turns.com okay so I know I just did a lot of coding here and this probably doesn't make a lot of sense you guys so I'm gonna kind of run through exactly what I just did it's it's pretty it's just a little bit difficult to explain so anyways what we start off by doing is we're gonna say we're gonna get the index and we're gonna get the cube object in our self up body because remember our self dot body is made up of cube objects right here that have these property right they're gonna have a direction Y Direction X a start color so on and we're gonna get we're gonna get to coding cube in just a second so there have cube objects now all of these cube objects have a position so I'm saying for each object here I'm going to grab their position and I'm gonna see if that position is in our turn list and we create the turn list and add to the turn list when we turn right when we click left sent it right so on and then we're gonna say okay so the actual turn so where we're actually going to be moving is equal to that are the turns list at that index right so we grab the turn direction X and Direction Y which we stored there and now we're going to just gonna say R cubed move which is another method that we're going to code and we're giving it that direction X in that direction y so it knows what weight it needs to move pretty well and then I say if I is equal to the length of selfthought body minus one so that means if we are on the last cube we're gonna remove that turn so once that last cube hits that turn we're gonna remove it because if we were just to leave that turn in the list and that would mean anytime you hit that position on the screen regardless of if the snake was turning there or not you'd automatically change directions if you don't remove it from the list hope that makes sense okay now also after this if here we're gonna say if the woody call it if it's not in the list so if our position is not in the list we still need to move the snake because it's constantly moving so what do we do to this when we write an else and I'm just gonna copy this in because it's gonna take a second to type because I have another file open and I'll go through what happened how this works okay no looks like a lot but pretty much what this is doing for us is we're checking whether or not we've reached the edge of the screen so saying if we're moving left and the position so the exposition of our cube is less than or equal to zero then we're gonna change that position so that it goes to the right side of the screen so the way that we can do that is by saying Cedros minus one because again in you start counting at zero and computers so if I rows is like 20 then the last cube would be 19 in a list right so they see that rows minus 1 we're gonna be at the same yvalue so we'll leave that there okay and then we say otherwise we're going to check if we're going right for moving right and same thing if we're at the edge of the screen move back to the left side by putting 0 here and the next one if we're going down what we're gonna be doing is again checking are we less than rows minus 1 or greater than rows minus 1 no we're not or if we are then let's move us back up to the top of the screen by changing our Y value and then same thing here if you're moving upwards now if none of that's true so we're not at the edge of the screen we're not moving up left down to whatever I just said then we're just simply going to move our cube at the direction X and the direction Y of that cube already so if that cube is moving upwards and it's not turning and it's not going to the edge of the screen it doesn't need to be changed just keep moving it in whatever direction it's going and that's why I'm simply referencing the cubes already existing Direction X and Direction Y we're not changing anything we're simply just saying okay let's move you forward one like that I hope that makes sense that was a lot and that's probably one of the hardest things in this program is figuring out the movement the stake so if you guys understand that then that is the hard part kind of over with and we're gonna get into this cube objects you're gonna understand what all this means and how our rows and columns kind of work and stuff at that okay so I'm just gonna forget about reset and add Q for now cuz we'll worry about those later but let's get into the drama thing because what I see if there's actually working and put this on the screen so simply for I see and new rates good why can i oh it's well under way today like that same thing self that body like that we're going to say if I because equals zero C dot draw and you'll see why these in a second true else see draw circles like that okay so the reason I'm doing this old check here rather than just drawing every object is because when we draw the first snake object on sure if you remember my other program it had eyes so what I would simply want to do is make sure that when we draw that first object we add eyes on to it just so we know where the head of the snake is we don't get confused like what directions maybe even although you shouldn't we I want to add the little eye so maybe just for aesthetic as well so what this true does optional parameter simply says draw eyes if it's the first one in our list like that if it's the head and then in this draw method you can see I have eyes equals to false but when you make it equal to true we're gonna do a special thing in here that's gonna draw eyes for us okay so now that we've coated this this whole mess of stuff in the snake class let's just run the program quickly and see if anything's happening so currently we just have the grid we I don't have any errors anything that's because we haven't drawn the snake object onto the screen yet so what we need to do is we just need to do simply do an S draw it within our redraw window here so I'm just gonna type I'm gonna global s here and I'll global it down there as well si s top draw like that and we need to give a surface so let's give it a surface and I'm gonna global s so that we can reference it there uh and is there a reason we aren't being drawn to the screen let's just have a look quickly s draw start draw oh it's because yes we are indeed trying asked but we haven't drawn any of the cube objects yet and it is calling the draw method on all of our cube objects which we haven't yet created hopefully that makes sense but we'll go ahead and do that now so we have to code a little bit more before we can see everything so I'll just go ahead and get into the cube object and let's just say self don't start you will start except I'm actually just gonna change us to position because I believe this is what it's supposed to be and I'm gonna say self done during X because one self thought during Y is equal to zero and self thought color is equal to color and the reason we have this is because we're gonna be drawing later what I want to call like a snack for the for the cube to collect for the snake to collect so we wanna be able to change the color with them and spelled it wrong like three times during X in during why the reason I have during X you're set to one initially is because I I want to make sure that we start moving in a direction if I had this at zero you would have to click a key before the snake search me but I want right when we run the program for the snake to just start moving so I'm setting it already with a direction X and the reason these are optional again is so that when we create a new cube object we don't have to implicitly say Direction X is one direction y 0 because it's assumed that it's always gonna be like that unless otherwise stated ok let's have a look what else do we need to do here we need to now code this move function which is actually really easy almost gonna do is because say since we're changing the direction acts in the direction Y in our snake class we need to do that in here so that it stays with the object let's say during x equals three x and then the same thing self thought during why because then Y like that and then we'll go down here and all we're going to do is going to change our position so soft up position basically self dot pause zero which is our already existing position plus self thought 3x and they were setting selfthought pot is one which is our already existing y value plus eco is selfthought turn what like that and just in case I haven't mentioned it here right we're working with a grid system of 20 rows in this instant so when I say something like if our self deposition is like 1 3 or 10 10 I'm saying we're in the 10th row and the 10th color I'm not saying the x value is equal to 10 and the y value is equal to 10 because it's not in the case of drawing on the screen because our screen is actually a width of 500 pixels but just where we are in the grid which is most important to us right now is equal to like that values like 1 4 or 3 5 so on like that just just to make that clear for anyone who might have been confused
