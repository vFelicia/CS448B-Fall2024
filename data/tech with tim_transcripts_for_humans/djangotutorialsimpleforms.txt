With timestamps:

00:00 - hey guys and welcome back to another
00:01 - django tutorial so in today's video what
00:04 - we're gonna be doing is talking a bit
00:05 - about forms now forms are essential to
00:07 - any website an example of a form isn't
00:09 - like a login form or a create new
00:11 - account form or maybe a create new to-do
00:13 - list for our example here so we're gonna
00:15 - be doing today is just making a form
00:17 - that will allow us to create a new to-do
00:19 - list and then in the next video we will
00:21 - create a more advanced form that will
00:23 - allow us to add items to our existing
00:25 - to-do lists so I want to make a way
00:28 - essentially right now that we can create
00:31 - a new to-do list without having to use
00:33 - the command prompt I just want to create
00:34 - a web page that'll allow us to do that
00:36 - so what I'm gonna do is create a new
00:39 - page on our website called creates that
00:42 - will allow us when we go there to create
00:44 - a new page using a form so what I'm
00:47 - gonna do is start by setting up a path
00:49 - to that page creating a new template and
00:51 - then we will work on an actual form
00:53 - itself so in this case I'm just gonna
00:55 - say that creates will be where we want
00:57 - to go and then we'll say view starts
01:01 - create and we'll name it create like
01:05 - that I think I can just probably just
01:07 - put create like that tube and whatever
01:08 - that's fine oh it's not we've done that
01:10 - let's go into our views file let's
01:12 - create a new function we say define
01:14 - create will say response like that and
01:19 - then in here we're just gonna return the
01:21 - same thing but we'll just change the
01:23 - file name to be created a ch2 ml and
01:25 - we'll create that file right now so we
01:27 - go inside of our main file here I'm just
01:29 - going through this quickly because we've
01:30 - already essentially done this a bunch of
01:33 - times I'm going to extend so this
01:35 - extends and in this case main slash
01:38 - based HTML and then we will have to do
01:41 - those blocks or we don't have to you but
01:44 - we will do those blocks so in this case
01:47 - block title and we'll just call this
01:51 - create new list and then we will end the
01:56 - block like that and I'm just gonna copy
02:00 - this and put it down here but just
02:02 - change the name of the block to be what
02:05 - do you call it content like that okay so
02:08 - now I'll save this as what do we want
02:10 - creates dot HTML
02:13 - and we have created the template for our
02:16 - what do you call it in create page so in
02:18 - here I'll just say create page and we
02:22 - will add the form content into here
02:23 - afterwards so now that we've done that
02:25 - we should have a page on our website
02:27 - essentially that when we go to create
02:29 - it'll bring us to this HTML page which
02:31 - extends obviously our based on HTML and
02:34 - to give you a reminder this is what our
02:35 - based on HTML file looks like ok so what
02:38 - we need to do now is actually create a
02:40 - form that will show up on our create
02:43 - page now when you create forms most of
02:47 - you are probably used to doing something
02:48 - like this where you go in the HTML and
02:50 - you actually code the form yourself so
02:52 - for example you do form your gonna say
02:54 - method equals maybe we're gonna say post
02:57 - in this case and I'll talk about the
02:58 - different methods in a second you're
03:00 - gonna say action equals and in this case
03:04 - we're gonna go back to the same page and
03:06 - then maybe you make a button and that
03:09 - button is type equals submit maybe
03:14 - that's a name equals like save or
03:18 - something and then you end the button
03:20 - and maybe you do so like that so this
03:21 - like this is an example I'm just doing
03:23 - this because we're actually gonna need
03:24 - to do this but you guys get the idea
03:27 - that this is typically how you create a
03:28 - form and then above all of this you're
03:31 - gonna do all of the different fields in
03:32 - your form so for example I've got a
03:34 - username and password you do an input
03:36 - field for user name input field for
03:38 - password you give them some labels some
03:40 - names all that kind of fun stuff
03:42 - now Django makes this a lot easier
03:44 - because all we actually have to do is
03:47 - pass in a variable called form and
03:50 - Django will actually generate the HTML
03:52 - for the form that we create for us now
03:55 - this makes no sense right now because we
03:57 - haven't created a form yet but what
03:59 - we're gonna be doing is passing a form
04:01 - object so we'll create our own form
04:03 - class and we'll create an instance of
04:05 - that and pass it into our HTML and it'll
04:08 - generate the HTML for those form fields
04:11 - for us so for example if we had user
04:14 - name and password this is all like
04:16 - whatever form we pass in here will
04:18 - automatically be generated for us I mean
04:20 - you guys will see how that works in a
04:22 - second the only thing that we need to do
04:23 - when we're creating a form is
04:26 - make these form tags like this and then
04:28 - add a submit button that will well
04:31 - submit the form for us that's all we
04:33 - have to do so now how we actually need
04:36 - to create the form so this will start
04:37 - making sense now what we're gonna do is
04:39 - make a new file inside of our main
04:42 - application directory and we're going to
04:44 - call it form stop pi so let's save this
04:46 - as form sup hi make sure in the right
04:49 - directory and what we're going to do at
04:51 - the top here you're going to say from
04:53 - Django import forms and now we're gonna
04:57 - create a class and this class is gonna
04:59 - be called whatever we want our form to
05:01 - be called and it will define the
05:04 - attributes in the fields in our form so
05:06 - I'm gonna call mine creates a new list
05:08 - and in here we are going to inherit from
05:12 - forms dot form which will allow us
05:16 - essentially to have the form
05:17 - automatically generated for us and to do
05:19 - a lot of cool stuff which we'll talk
05:20 - about later so I'm gonna set now the
05:22 - fields for my form now these fields are
05:25 - the exact same as the fields in your
05:27 - database so for example like boolean
05:28 - field integer field anything like that
05:31 - but what we'll so the way we do it
05:34 - essentially as we say forms dot in this
05:38 - case I want to character field for my
05:40 - name so I'll to say character field or
05:42 - char field and then in here I need to
05:44 - give it an optional argument or I don't
05:47 - need to then but I can give it an
05:48 - optional argument of label which will be
05:50 - what shows up before the little box so
05:53 - that it um you know we know what we're
05:55 - typing in here and then we can give it a
05:58 - max underscored length as well which I
06:00 - believe is required and I'm just gonna
06:02 - set this equal to 200 characters because
06:04 - that's probably all we need so
06:06 - essentially all we're doing when we
06:08 - create a forum is we're just gonna list
06:09 - all the different attributes that we
06:11 - want for our form as class variables
06:13 - underneath the the class so if I want an
06:16 - another attribute that maybe was like a
06:19 - check button or something like that
06:20 - what I can do is I can say like check
06:22 - equals forms dot
06:24 - boolean fields like this and that's all
06:28 - I have to do and now when I pass this
06:31 - form into Django it'll automatically
06:33 - create not only a name
06:35 - what he could a name character fields
06:38 - like text input it'll also create a
06:39 - boolean field which will be like a check
06:41 - button and then we can do other kinds of
06:43 - fields as well and if you want to know
06:44 - all the different types I'll leave a
06:46 - link here in the description to all
06:48 - these different kind of fields that you
06:50 - can use okay so that's how we create a
06:52 - form if you want to create another form
06:54 - same thing you make another class and do
06:56 - all of the different attributes you want
06:58 - in that form and we'll get a bit more
07:00 - advanced with it actually in the next
07:02 - video as well so anyways now we've
07:04 - created a form so let's go back to this
07:07 - view stop pie file and let's now
07:09 - actually pass this form into our create
07:12 - HTML so we're obviously going to need a
07:14 - variable called form here and we're
07:17 - gonna have to pass that in so what I
07:19 - need to do now is I essentially I need
07:20 - to create an instance of this form and
07:23 - pass it to my HTML so to do that I have
07:25 - to start by importing that so oh I
07:27 - already imported it here but anyways
07:29 - just do from dot forms import and then
07:32 - the name of your form so mine case
07:34 - create a new list and then what we're
07:36 - gonna do is we're going to say form
07:37 - equals create new lists like this now
07:41 - what this will do is create a blank form
07:43 - and we will pass that into our HTML and
07:46 - it will know what to do with it and
07:48 - generate the form for us on that create
07:50 - page so let me show you this working in
07:52 - action now so I'm just going to run my
07:55 - server I'm sure you guys know to do this
07:56 - by now and if I go to this link here
08:00 - actually I go to slash create you can
08:04 - see that now we get to create a new page
08:06 - you can see that we have a name we have
08:08 - a check button and we have this create
08:11 - new button so that button was the button
08:13 - that I created but this name field we
08:16 - didn't make this check button we didn't
08:18 - make Django automatically generated that
08:20 - for us now notice that obviously these
08:24 - don't look great we want to add some
08:26 - HTML to them we want to add some CSS we
08:28 - want to do all kinds of stuff I'm gonna
08:30 - show you how we can do that later but
08:32 - just know that Django is capable of
08:35 - automatically generating all of the HTML
08:37 - for your forms so so before I go any
08:40 - further into how we're actually gonna
08:42 - get information from this form because
08:44 - right now we have we're not actually
08:45 - doing that and it's not gonna work if we
08:47 - actually try to submit
08:48 - this form I will show you how we can
08:51 - look at the form in a different way so
08:52 - for example if we go to create dot HTML
08:55 - here there's a few default layouts for
08:57 - our form so we have as underscored table
09:00 - which is what is actually showing for us
09:02 - right now but we also have dot as
09:05 - underscore P which will mean that the
09:07 - form will go like vertically down so all
09:10 - the items will keep going down and then
09:12 - we have AZ underscore ul which means the
09:15 - form is gonna show up on little dots
09:17 - like as a list item so these are a few
09:20 - different ways that we can show the form
09:22 - just looking like a little bit
09:24 - difference if I do as P for example I
09:26 - believe we're running the server right
09:27 - now and I go here and refresh you can
09:30 - see that now it looks a little bit nicer
09:31 - in terms that we have the name and then
09:33 - we have the check box and they're just
09:34 - right after each other and do paragraphs
09:36 - I just want to show you that if I try to
09:38 - hit this button notice that we get this
09:41 - little please fill out this field
09:42 - nice-looking JavaScript actually pops up
09:45 - now the reason this does this is because
09:49 - Django is generating the form and the
09:51 - HTML for us if we had creed in our own
09:53 - form we wouldn't have we wouldn't see
09:55 - this this nice pop-up text right so
09:58 - that's one of the advantages of using
10:00 - the Django built-in forms although I
10:02 - will show you kind of the limits some of
10:03 - the limitations you may have with that
10:04 - now if I go to if I hit this check box
10:07 - same thing you can see even when I'm
10:09 - hovering over it we get like please
10:11 - check this box if you want to proceed
10:12 - like stuff like that right now notice
10:14 - that if I type something in here and I
10:16 - hit create new it says please check this
10:19 - box well this box might be an optional
10:21 - check box if we want to make this not a
10:24 - required field then what we can simply
10:26 - do to do that is go into our forms and
10:28 - inside boolean field here because they
10:30 - required equals false and now if i
10:34 - refresh the website here you see what I
10:39 - hovered is not saying anything and if I
10:41 - type like something in here and hits a
10:44 - hit create new it will work now I'll
10:46 - show you what happens right now when I
10:47 - do this and how we can fix this so when
10:51 - I do this it says we are get a CSRF
10:54 - verification failed now that is because
10:56 - whenever we're creating a form inside of
10:59 - our HTML we need to actually add
11:02 - these tags number to show you so
11:05 - essentially we need to just do CRS F
11:07 - underscore a token every time that we
11:10 - create a new form inside of Django this
11:13 - just needs to go inside of our form tags
11:15 - don't ask me why
11:17 - because I honestly don't really know
11:18 - it's something to do with security in
11:20 - terms of like verification and
11:23 - validation and stuff so just put that in
11:25 - here whenever you create a form so when
11:27 - you try to submit it you don't run into
11:29 - any issues okay so now that we've done
11:31 - that it's time to actually start
11:33 - creating new to-do lists based on what
11:36 - the user types in so now it's time to
11:38 - talk about the difference between post
11:40 - and get requests so if I'm gonna go to
11:42 - I'll go to be used up high for right now
11:44 - and we need to talk about post and get
11:47 - so there's two different ways to send
11:49 - information to the server and that's
11:51 - essentially what our forum is doing when
11:53 - we hit submit submit what's gonna happen
11:55 - is it's gonna save all of that
11:56 - information that was in our forum it's
11:58 - gonna bundle it up in some kind of way
12:00 - and send it to the server now there's
12:02 - two main ways of doing this post and get
12:04 - now the reason for this - like the
12:08 - reason they have two different ways is
12:09 - because there's two different functions
12:11 - for each of them typically like
12:13 - technically you can do anything with get
12:15 - that you can do with post but they have
12:16 - different security reasons behind them
12:19 - so for post is you're gonna want to use
12:22 - posts essentially whenever you're doing
12:23 - something that's kind of secret so for
12:26 - example getting a user's password if
12:27 - you're sending that to the server it
12:30 - needs to be encrypted because otherwise
12:32 - if it's not then other people can very
12:34 - easily see the password and change it
12:37 - and do all kinds of stuff so you're
12:39 - gonna use post whenever you're
12:41 - essentially doing anything that's kind
12:42 - of secret or the information needs to be
12:44 - encrypted when it's ended sent to the
12:46 - server
12:47 - now you also use post whenever you're
12:49 - making any modifications to like the
12:51 - database or anything like that you use
12:54 - get when you're just trying to simply
12:57 - like retrieve information so for example
12:59 - say I type in like the ID of the what he
13:04 - caught the to-do list I want to get well
13:07 - we could get that using a get request
13:08 - not a post request because we don't like
13:12 - everyone can see what the ID of the
13:14 - to-do list is that's fine we don't care
13:16 - that information what actually happens
13:18 - when you use get is all of the
13:19 - information that you type in the form
13:22 - gets pasted in the URL so when it goes
13:24 - to the next page it just simply reads
13:26 - the URL and gets that information
13:28 - whereas post actually hides the
13:30 - information encrypts it and sends it to
13:32 - the server
13:33 - now I'm oversimplifying exactly how
13:35 - these work but I want to make sure you
13:36 - guys understand that interesting post
13:38 - and get if you're unsure just use post
13:41 - but the reason you would use get over
13:43 - post is for example say you want to
13:44 - bookmark like a search result or
13:47 - something or you want to save some
13:48 - information which is a specific URL then
13:51 - you would use get because I don't know
13:54 - like I'm trying to think of a good
13:55 - example if you ever go you ever go to
13:57 - any links let's go to YouTube for
13:59 - example and then youtube.com slash and
14:03 - in this case I said like search equals
14:05 - tech with Tim you ever see something
14:08 - that looks like this
14:09 - this is what's known as a get request
14:10 - where the information that the user
14:12 - typed in in this case it would've been
14:13 - in the search bar for the YouTube gets
14:16 - pasted in the URL and then if you hit
14:18 - this I don't think this is gonna work
14:19 - because this is obviously not the way
14:21 - you search for something on YouTube
14:22 - uh-huh but it just gives you that page
14:25 - right whereas if I'm gonna be typing in
14:27 - my password it's not gonna save the
14:29 - password up in this bar because it's
14:30 - gonna use a post request and obviously
14:33 - the reason we use this get request is
14:35 - because maybe we want to save these
14:36 - search results and bookmark them and we
14:38 - wouldn't be able to do that if we're
14:40 - using a post request so anyways that is
14:42 - how posting get works I'm sure you guys
14:44 - are already confused if you have any
14:46 - questions let me know but I'm trying to
14:47 - explain as best as I can so anyways when
14:51 - we use this on we code this create
14:54 - window or this create page we're gonna
14:56 - use a post request because we want to
14:59 - encrypt the name of the what he called
15:01 - the to-do list that you are creating and
15:03 - because they're gonna be modifying the
15:04 - database we need to use a post request
15:07 - so anyways all we have to do we don't
15:09 - don't touch anything in here because
15:11 - we've already set that the method is
15:12 - gonna be post but what happens when we
15:15 - have post and get requests is they are
15:17 - actually passed through this variable to
15:19 - our view so our view knows or can tell
15:23 - based on this variable here whether or
15:25 - not we are trying to post something or
15:27 - we're trying to get something when we
15:28 - access this page so to check this if
15:31 - we've passed a post request or a get
15:34 - request what we do is we say if response
15:38 - dot method equals equals and in this
15:42 - case post and this will tell us if we
15:45 - are trying to make changes who are
15:47 - passing information from the forum back
15:50 - to this page so if we are posting we're
15:54 - going to be doing something different
15:54 - than if we are getting so those are the
15:57 - two requests right post or get by
15:59 - default it's always get but whatever
16:01 - you're changing something you're gonna
16:03 - use post so anyways we're using post now
16:05 - so if we're using post what we need to
16:08 - do is the Fallen we have to say form
16:11 - equals creates new list but in here what
16:15 - we're gonna do is we're gonna say
16:16 - response dot post now what this does and
16:20 - what this is holding is all of the
16:23 - information from our what do you call it
16:26 - from our forum so essentially when we
16:28 - get this response top post it's gonna
16:30 - contain a dictionary that has all of the
16:32 - IDS of all of our different attributes
16:35 - all of our different inputs and it's
16:36 - gonna save the values that you typed in
16:38 - them so when you pass this to create a
16:40 - new list what its gonna do is create a
16:43 - new form that has those values populated
16:46 - in them so by default right if we go to
16:48 - forums you can see that we don't have
16:50 - any default value for the character
16:52 - field or for the boolean field so what's
16:55 - gonna happen is it's going to
16:56 - automatically set those values to what
16:59 - is received here and then we can start
17:01 - doing things with this form and
17:03 - validating it and creating a new to do
17:04 - to-do list so now that we've created
17:06 - this form what we'll do is we'll say
17:09 - what do you call it here we're going to
17:11 - say if form Dodge is underscore valid
17:17 - what we'll do in here is now we will
17:20 - create a new to-do list and add that
17:21 - with the name that was given to us so
17:23 - we're gonna say T equals and then to do
17:26 - list and we'll say name equals in this
17:29 - case we'll say n up here say N equals at
17:33 - form
17:34 - cleaned underscore data name now I'll
17:40 - talk about what this is doing so
17:41 - essentially
17:42 - our form is going to take this post it's
17:45 - gonna get all the data from the form and
17:47 - then we're able to access that data by
17:50 - just using it like a dictionary so you
17:51 - nuke doc cleaned underscore data I'm
17:54 - just gonna clean up the data for you
17:55 - unencrypted it and then what you do is
17:57 - you type the name of whatever the field
17:59 - that you want so in this case we named
18:01 - arts name so we use name and then we can
18:04 - get that data and we can use it to
18:06 - create a new to-do list and then save
18:08 - that to-do list like that and that is
18:10 - all we need to do now so that when we
18:12 - use this form every time we type in a
18:15 - name that's valid it creates a new to-do
18:19 - list now this might be a little bit
18:21 - confusing but I hope you guys kind
18:23 - understand it this is valid method is
18:26 - automatically created and exists because
18:29 - of the fact that we're inheriting from
18:31 - form stop form and this thing is amazing
18:34 - and what it does is just automatically
18:36 - checks all of the fields that you've
18:37 - defined to make sure that they have
18:40 - valid input if they do then this is
18:43 - valid will return true if they don't it
18:45 - will return false and obviously you were
18:47 - seeing that it was telling us what was
18:49 - wrong with all of the different fields
18:52 - when it was incorrect so let's go back
18:54 - to create now let's click I might have
18:57 - to rerun the server here we'll see I've
19:00 - saved this save all this stuff and I
19:04 - think that updated anyways we'll check
19:07 - here quickly so I go back to create you
19:09 - can see now that we have create page we
19:11 - have name and we have a checkbox so
19:13 - let's now do like create a new to-do
19:14 - list called Tim let's say create new and
19:17 - what will happen now is essentially we
19:20 - have created a new to-do list called Tim
19:22 - now you might not actually be able to
19:23 - you can't tell that we've done that but
19:25 - that is precisely what we've done now we
19:29 - can create more to-do lists and say like
19:31 - the new to-do list Tim we could say like
19:34 - Jo create that and that has created a
19:37 - new to-do list for us so now let's
19:39 - actually show that to-do list right
19:41 - after we create it so for right now all
19:44 - we're doing is just returning the form
19:46 - with whatever information we passed in
19:47 - it but what we can do is we can say that
19:50 - all right if we're saying response is
19:52 - post instead of returning that form
19:55 - that has the name of the to do as we
19:57 - just created let's redirect to that to
20:00 - do list so you can see what it looks
20:01 - like so to do that what we can say is
20:03 - gonna say return HTTP and instead of
20:06 - saying response this time we will say
20:09 - HTTP and then response redirect if I can
20:14 - get my capitals work in here redirect
20:16 - like that and then in here all we have
20:18 - to do is put the page we want to go to
20:20 - so in this case I'm going to say slash
20:21 - and then I like percent I I mean I say
20:25 - percent and in this case I'm gonna say
20:28 - tid which will be the idea that Euless
20:31 - we want to go to now I also just have to
20:33 - import this HTTP response so I'll do it
20:36 - up here so from Django HTTP import HTTP
20:39 - response redirect and now what will
20:41 - happen is instead of returning this form
20:43 - and returning the main dot create HTML
20:46 - page we will redirect to the page that
20:48 - we've defined here which will be the ID
20:50 - of the to do list we just created so now
20:52 - this should have updated it did so let's
20:55 - try this again with Joe we said create
20:57 - new and we are redirected to the page
21:00 - that displays to Joe to us right and
21:03 - that is essentially how that works so
21:05 - that is the way that you create a form
21:07 - if we wanted to let's say get more
21:10 - information from the form what we could
21:12 - do is print out like if the checkbox was
21:16 - hit or not like we can do all kinds of
21:17 - stuff you can obviously create more than
21:19 - one form by doing multiple forms in here
21:21 - you can have more than one form on each
21:23 - page with different submit buttons all
21:25 - that kind of stuff in the next video
21:27 - I'll talk about creating custom forms so
21:29 - modifying some stuff maybe making some
21:31 - things look better and then in future
21:32 - videos you're gonna be adding bootstrap
21:34 - to our website and we're doing login
21:36 - forms all this kind of stuff so if you
21:37 - guys don't get it now we will be going
21:39 - over more of it in the future but these
21:41 - are just kind of the basics of Django
21:42 - forms
21:43 - [Music]

Cleaned transcript:

hey guys and welcome back to another django tutorial so in today's video what we're gonna be doing is talking a bit about forms now forms are essential to any website an example of a form isn't like a login form or a create new account form or maybe a create new todo list for our example here so we're gonna be doing today is just making a form that will allow us to create a new todo list and then in the next video we will create a more advanced form that will allow us to add items to our existing todo lists so I want to make a way essentially right now that we can create a new todo list without having to use the command prompt I just want to create a web page that'll allow us to do that so what I'm gonna do is create a new page on our website called creates that will allow us when we go there to create a new page using a form so what I'm gonna do is start by setting up a path to that page creating a new template and then we will work on an actual form itself so in this case I'm just gonna say that creates will be where we want to go and then we'll say view starts create and we'll name it create like that I think I can just probably just put create like that tube and whatever that's fine oh it's not we've done that let's go into our views file let's create a new function we say define create will say response like that and then in here we're just gonna return the same thing but we'll just change the file name to be created a ch2 ml and we'll create that file right now so we go inside of our main file here I'm just going through this quickly because we've already essentially done this a bunch of times I'm going to extend so this extends and in this case main slash based HTML and then we will have to do those blocks or we don't have to you but we will do those blocks so in this case block title and we'll just call this create new list and then we will end the block like that and I'm just gonna copy this and put it down here but just change the name of the block to be what do you call it content like that okay so now I'll save this as what do we want creates dot HTML and we have created the template for our what do you call it in create page so in here I'll just say create page and we will add the form content into here afterwards so now that we've done that we should have a page on our website essentially that when we go to create it'll bring us to this HTML page which extends obviously our based on HTML and to give you a reminder this is what our based on HTML file looks like ok so what we need to do now is actually create a form that will show up on our create page now when you create forms most of you are probably used to doing something like this where you go in the HTML and you actually code the form yourself so for example you do form your gonna say method equals maybe we're gonna say post in this case and I'll talk about the different methods in a second you're gonna say action equals and in this case we're gonna go back to the same page and then maybe you make a button and that button is type equals submit maybe that's a name equals like save or something and then you end the button and maybe you do so like that so this like this is an example I'm just doing this because we're actually gonna need to do this but you guys get the idea that this is typically how you create a form and then above all of this you're gonna do all of the different fields in your form so for example I've got a username and password you do an input field for user name input field for password you give them some labels some names all that kind of fun stuff now Django makes this a lot easier because all we actually have to do is pass in a variable called form and Django will actually generate the HTML for the form that we create for us now this makes no sense right now because we haven't created a form yet but what we're gonna be doing is passing a form object so we'll create our own form class and we'll create an instance of that and pass it into our HTML and it'll generate the HTML for those form fields for us so for example if we had user name and password this is all like whatever form we pass in here will automatically be generated for us I mean you guys will see how that works in a second the only thing that we need to do when we're creating a form is make these form tags like this and then add a submit button that will well submit the form for us that's all we have to do so now how we actually need to create the form so this will start making sense now what we're gonna do is make a new file inside of our main application directory and we're going to call it form stop pi so let's save this as form sup hi make sure in the right directory and what we're going to do at the top here you're going to say from Django import forms and now we're gonna create a class and this class is gonna be called whatever we want our form to be called and it will define the attributes in the fields in our form so I'm gonna call mine creates a new list and in here we are going to inherit from forms dot form which will allow us essentially to have the form automatically generated for us and to do a lot of cool stuff which we'll talk about later so I'm gonna set now the fields for my form now these fields are the exact same as the fields in your database so for example like boolean field integer field anything like that but what we'll so the way we do it essentially as we say forms dot in this case I want to character field for my name so I'll to say character field or char field and then in here I need to give it an optional argument or I don't need to then but I can give it an optional argument of label which will be what shows up before the little box so that it um you know we know what we're typing in here and then we can give it a max underscored length as well which I believe is required and I'm just gonna set this equal to 200 characters because that's probably all we need so essentially all we're doing when we create a forum is we're just gonna list all the different attributes that we want for our form as class variables underneath the the class so if I want an another attribute that maybe was like a check button or something like that what I can do is I can say like check equals forms dot boolean fields like this and that's all I have to do and now when I pass this form into Django it'll automatically create not only a name what he could a name character fields like text input it'll also create a boolean field which will be like a check button and then we can do other kinds of fields as well and if you want to know all the different types I'll leave a link here in the description to all these different kind of fields that you can use okay so that's how we create a form if you want to create another form same thing you make another class and do all of the different attributes you want in that form and we'll get a bit more advanced with it actually in the next video as well so anyways now we've created a form so let's go back to this view stop pie file and let's now actually pass this form into our create HTML so we're obviously going to need a variable called form here and we're gonna have to pass that in so what I need to do now is I essentially I need to create an instance of this form and pass it to my HTML so to do that I have to start by importing that so oh I already imported it here but anyways just do from dot forms import and then the name of your form so mine case create a new list and then what we're gonna do is we're going to say form equals create new lists like this now what this will do is create a blank form and we will pass that into our HTML and it will know what to do with it and generate the form for us on that create page so let me show you this working in action now so I'm just going to run my server I'm sure you guys know to do this by now and if I go to this link here actually I go to slash create you can see that now we get to create a new page you can see that we have a name we have a check button and we have this create new button so that button was the button that I created but this name field we didn't make this check button we didn't make Django automatically generated that for us now notice that obviously these don't look great we want to add some HTML to them we want to add some CSS we want to do all kinds of stuff I'm gonna show you how we can do that later but just know that Django is capable of automatically generating all of the HTML for your forms so so before I go any further into how we're actually gonna get information from this form because right now we have we're not actually doing that and it's not gonna work if we actually try to submit this form I will show you how we can look at the form in a different way so for example if we go to create dot HTML here there's a few default layouts for our form so we have as underscored table which is what is actually showing for us right now but we also have dot as underscore P which will mean that the form will go like vertically down so all the items will keep going down and then we have AZ underscore ul which means the form is gonna show up on little dots like as a list item so these are a few different ways that we can show the form just looking like a little bit difference if I do as P for example I believe we're running the server right now and I go here and refresh you can see that now it looks a little bit nicer in terms that we have the name and then we have the check box and they're just right after each other and do paragraphs I just want to show you that if I try to hit this button notice that we get this little please fill out this field nicelooking JavaScript actually pops up now the reason this does this is because Django is generating the form and the HTML for us if we had creed in our own form we wouldn't have we wouldn't see this this nice popup text right so that's one of the advantages of using the Django builtin forms although I will show you kind of the limits some of the limitations you may have with that now if I go to if I hit this check box same thing you can see even when I'm hovering over it we get like please check this box if you want to proceed like stuff like that right now notice that if I type something in here and I hit create new it says please check this box well this box might be an optional check box if we want to make this not a required field then what we can simply do to do that is go into our forms and inside boolean field here because they required equals false and now if i refresh the website here you see what I hovered is not saying anything and if I type like something in here and hits a hit create new it will work now I'll show you what happens right now when I do this and how we can fix this so when I do this it says we are get a CSRF verification failed now that is because whenever we're creating a form inside of our HTML we need to actually add these tags number to show you so essentially we need to just do CRS F underscore a token every time that we create a new form inside of Django this just needs to go inside of our form tags don't ask me why because I honestly don't really know it's something to do with security in terms of like verification and validation and stuff so just put that in here whenever you create a form so when you try to submit it you don't run into any issues okay so now that we've done that it's time to actually start creating new todo lists based on what the user types in so now it's time to talk about the difference between post and get requests so if I'm gonna go to I'll go to be used up high for right now and we need to talk about post and get so there's two different ways to send information to the server and that's essentially what our forum is doing when we hit submit submit what's gonna happen is it's gonna save all of that information that was in our forum it's gonna bundle it up in some kind of way and send it to the server now there's two main ways of doing this post and get now the reason for this like the reason they have two different ways is because there's two different functions for each of them typically like technically you can do anything with get that you can do with post but they have different security reasons behind them so for post is you're gonna want to use posts essentially whenever you're doing something that's kind of secret so for example getting a user's password if you're sending that to the server it needs to be encrypted because otherwise if it's not then other people can very easily see the password and change it and do all kinds of stuff so you're gonna use post whenever you're essentially doing anything that's kind of secret or the information needs to be encrypted when it's ended sent to the server now you also use post whenever you're making any modifications to like the database or anything like that you use get when you're just trying to simply like retrieve information so for example say I type in like the ID of the what he caught the todo list I want to get well we could get that using a get request not a post request because we don't like everyone can see what the ID of the todo list is that's fine we don't care that information what actually happens when you use get is all of the information that you type in the form gets pasted in the URL so when it goes to the next page it just simply reads the URL and gets that information whereas post actually hides the information encrypts it and sends it to the server now I'm oversimplifying exactly how these work but I want to make sure you guys understand that interesting post and get if you're unsure just use post but the reason you would use get over post is for example say you want to bookmark like a search result or something or you want to save some information which is a specific URL then you would use get because I don't know like I'm trying to think of a good example if you ever go you ever go to any links let's go to YouTube for example and then youtube.com slash and in this case I said like search equals tech with Tim you ever see something that looks like this this is what's known as a get request where the information that the user typed in in this case it would've been in the search bar for the YouTube gets pasted in the URL and then if you hit this I don't think this is gonna work because this is obviously not the way you search for something on YouTube uhhuh but it just gives you that page right whereas if I'm gonna be typing in my password it's not gonna save the password up in this bar because it's gonna use a post request and obviously the reason we use this get request is because maybe we want to save these search results and bookmark them and we wouldn't be able to do that if we're using a post request so anyways that is how posting get works I'm sure you guys are already confused if you have any questions let me know but I'm trying to explain as best as I can so anyways when we use this on we code this create window or this create page we're gonna use a post request because we want to encrypt the name of the what he called the todo list that you are creating and because they're gonna be modifying the database we need to use a post request so anyways all we have to do we don't don't touch anything in here because we've already set that the method is gonna be post but what happens when we have post and get requests is they are actually passed through this variable to our view so our view knows or can tell based on this variable here whether or not we are trying to post something or we're trying to get something when we access this page so to check this if we've passed a post request or a get request what we do is we say if response dot method equals equals and in this case post and this will tell us if we are trying to make changes who are passing information from the forum back to this page so if we are posting we're going to be doing something different than if we are getting so those are the two requests right post or get by default it's always get but whatever you're changing something you're gonna use post so anyways we're using post now so if we're using post what we need to do is the Fallen we have to say form equals creates new list but in here what we're gonna do is we're gonna say response dot post now what this does and what this is holding is all of the information from our what do you call it from our forum so essentially when we get this response top post it's gonna contain a dictionary that has all of the IDS of all of our different attributes all of our different inputs and it's gonna save the values that you typed in them so when you pass this to create a new list what its gonna do is create a new form that has those values populated in them so by default right if we go to forums you can see that we don't have any default value for the character field or for the boolean field so what's gonna happen is it's going to automatically set those values to what is received here and then we can start doing things with this form and validating it and creating a new to do todo list so now that we've created this form what we'll do is we'll say what do you call it here we're going to say if form Dodge is underscore valid what we'll do in here is now we will create a new todo list and add that with the name that was given to us so we're gonna say T equals and then to do list and we'll say name equals in this case we'll say n up here say N equals at form cleaned underscore data name now I'll talk about what this is doing so essentially our form is going to take this post it's gonna get all the data from the form and then we're able to access that data by just using it like a dictionary so you nuke doc cleaned underscore data I'm just gonna clean up the data for you unencrypted it and then what you do is you type the name of whatever the field that you want so in this case we named arts name so we use name and then we can get that data and we can use it to create a new todo list and then save that todo list like that and that is all we need to do now so that when we use this form every time we type in a name that's valid it creates a new todo list now this might be a little bit confusing but I hope you guys kind understand it this is valid method is automatically created and exists because of the fact that we're inheriting from form stop form and this thing is amazing and what it does is just automatically checks all of the fields that you've defined to make sure that they have valid input if they do then this is valid will return true if they don't it will return false and obviously you were seeing that it was telling us what was wrong with all of the different fields when it was incorrect so let's go back to create now let's click I might have to rerun the server here we'll see I've saved this save all this stuff and I think that updated anyways we'll check here quickly so I go back to create you can see now that we have create page we have name and we have a checkbox so let's now do like create a new todo list called Tim let's say create new and what will happen now is essentially we have created a new todo list called Tim now you might not actually be able to you can't tell that we've done that but that is precisely what we've done now we can create more todo lists and say like the new todo list Tim we could say like Jo create that and that has created a new todo list for us so now let's actually show that todo list right after we create it so for right now all we're doing is just returning the form with whatever information we passed in it but what we can do is we can say that all right if we're saying response is post instead of returning that form that has the name of the to do as we just created let's redirect to that to do list so you can see what it looks like so to do that what we can say is gonna say return HTTP and instead of saying response this time we will say HTTP and then response redirect if I can get my capitals work in here redirect like that and then in here all we have to do is put the page we want to go to so in this case I'm going to say slash and then I like percent I I mean I say percent and in this case I'm gonna say tid which will be the idea that Euless we want to go to now I also just have to import this HTTP response so I'll do it up here so from Django HTTP import HTTP response redirect and now what will happen is instead of returning this form and returning the main dot create HTML page we will redirect to the page that we've defined here which will be the ID of the to do list we just created so now this should have updated it did so let's try this again with Joe we said create new and we are redirected to the page that displays to Joe to us right and that is essentially how that works so that is the way that you create a form if we wanted to let's say get more information from the form what we could do is print out like if the checkbox was hit or not like we can do all kinds of stuff you can obviously create more than one form by doing multiple forms in here you can have more than one form on each page with different submit buttons all that kind of stuff in the next video I'll talk about creating custom forms so modifying some stuff maybe making some things look better and then in future videos you're gonna be adding bootstrap to our website and we're doing login forms all this kind of stuff so if you guys don't get it now we will be going over more of it in the future but these are just kind of the basics of Django forms
