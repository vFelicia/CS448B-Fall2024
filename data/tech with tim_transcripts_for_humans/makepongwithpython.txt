With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - youtube video in today's video i'm going
00:13 - to be showing you how to make the famous
00:15 - game pong in python now this is a great
00:18 - project for beginner or intermediate
00:20 - programmers we are going to be using a
00:22 - module called pygame to accomplish this
00:24 - however you do not need to know pygame
00:26 - and the features we are going to use
00:28 - from it are very limited a lot of what
00:30 - we need to code out is the logic related
00:32 - to moving the ball around the screen
00:34 - having it bounce off the different
00:35 - paddles implementing score all of that
00:38 - type of stuff and you're gonna learn a
00:39 - lot in this project if you are not say
00:41 - an expert python programmer already with
00:44 - that said let me give you a quick demo
00:46 - and then we'll actually start writing
00:47 - some code so in front of me i actually
00:49 - have the finished code for this project
00:51 - whenever i do a tutorial i code it out
00:53 - first and then i reference that code
00:55 - while i'm teaching it to you guys and
00:56 - all of the code that we write in this
00:58 - video will be available in the
00:59 - description anyways let me just run this
01:01 - here and then we can have a look at the
01:03 - finished product
01:05 - okay here we are so this is pong we have
01:07 - two paddles uh you can move one paddle
01:09 - with w and s and the other panel you can
01:12 - move with the arrow keys and you also
01:15 - would be able to implement this as a
01:16 - single player game if you wanted to code
01:18 - like an ai for one of the paddles which
01:19 - would be pretty easy to do you can see
01:21 - this is kind of the basics we have an
01:23 - implementation of pong and then of
01:25 - course there's scoring at the top and
01:27 - i've just made it so that when you get
01:28 - to 10 then the game is over i'm not
01:30 - going to play through the entire thing
01:32 - but there you go that is the project and
01:35 - i'm gonna show you how to make it so
01:36 - with that said let's get into the code
01:38 - after a quick word from our sponsor
01:40 - thanks to backtrace for sponsoring this
01:42 - video backtrace provides application
01:45 - monitoring as well as error and crash
01:46 - reporting for games we've all been there
01:49 - excited to launch a brand new video game
01:51 - just to be tormented by crashes bugs and
01:54 - an overall bad user experience backtrace
01:56 - wants to help limit that by providing a
01:58 - platform that gives game developers the
02:00 - best error in crash reporting with the
02:02 - most complete and helpful information
02:05 - backtrace works with any platform any
02:07 - engine and at any scale and provides 24
02:09 - 7 monitoring so you can retain more
02:11 - players and get better ratings backtrace
02:14 - helps you fix issues fast by providing
02:16 - accurate call stacks regression
02:17 - detection querying and analytics and
02:19 - integration with microsoft teams discord
02:22 - slack and more you can get started with
02:24 - backtrace today and manage up to 25 000
02:27 - monthly errors with one month retention
02:29 - and 10 gigabytes of storage completely
02:31 - for free check it out from the link in
02:34 - the description and thanks again to
02:35 - backtrace for sponsoring this video
02:38 - alright so let's go ahead and get
02:40 - started the first thing we need to do is
02:42 - just set up our environment and install
02:44 - the pi game package now again i want to
02:46 - reiterate here that you do not need to
02:48 - know pygame for this tutorial i will
02:50 - show you the limited features from it
02:52 - that we are going to use now if you want
02:54 - to learn more about pie game and make
02:55 - some more advanced games i have tons of
02:57 - tutorials on my channel so feel free to
03:00 - check those out you can probably just go
03:01 - on youtube and search game tech with tim
03:04 - and you'll see like 10 20 30 different
03:06 - videos all going through different pie
03:08 - game projects
03:09 - alright with that said let's get this
03:11 - set up so right now i'm in visual studio
03:13 - code this is the editor i'm going to use
03:15 - for this video feel free to use whatever
03:17 - you want you can use the default idle
03:19 - from python you can use sublime text
03:22 - really doesn't matter i'm just going to
03:23 - use vs code now i'm using python version
03:26 - 3.9 you can use pretty much any version
03:28 - as long as it's above 3.6
03:31 - other than that what we need to do here
03:33 - is open up a terminal or a command
03:34 - prompt and install pygame now to do that
03:37 - we're going to type in the command pip
03:40 - install pi game like that now i already
03:42 - have this installed so i'm not going to
03:44 - run it but for you guys run this command
03:46 - it should install pygame now this
03:48 - command does not work sometimes if it
03:50 - doesn't work try the following python
03:52 - and then you're going to do hyphen m and
03:54 - then pip install pi game if that doesn't
03:56 - work try python 3 hyphen m pip install
03:59 - pygame and finally if that doesn't work
04:01 - try pip3 install pygame now if none of
04:04 - those commands work for you i have two
04:06 - videos one for mac and one for windows i
04:09 - will put them up on the screen and they
04:10 - show you how to install pygame for the
04:12 - respective operating systems okay so we
04:14 - now have pi game installed we can
04:16 - actually start writing some code now we
04:18 - want to create pong so the first thing
04:20 - we're going to do here is just import pi
04:22 - game we're going to set up what's known
04:23 - as a display so in pi game we have a
04:26 - main kind of window or display and
04:27 - that's where we draw everything to once
04:30 - we have the display then we'll implement
04:32 - things like the paddle the ball the
04:34 - scoring handling collision all of that
04:36 - type of stuff so i'm going to import pi
04:38 - game at the top of my program and now
04:40 - i'm going to set the width and the
04:42 - height for my window now you're going to
04:44 - notice here when i'm coding everything
04:45 - out that i'm putting everything in
04:46 - variables this way our game will be
04:48 - dynamic and you can simply change the
04:51 - value of a variable and everything will
04:52 - just work and adjust according to that
04:54 - so rather than using kind of hard-coded
04:56 - values we're going to put everything
04:58 - inside of variables use the variables
05:00 - for everything which will make it a
05:01 - little bit more complicated to code out
05:03 - however it's going to be really nice
05:04 - because if you want a bigger window or a
05:06 - smaller window or a larger paddle or
05:08 - whatever you just change the variable so
05:10 - for the width and the height i'm going
05:12 - to go with 700 and 500 for right now by
05:16 - the way this is a way that you can
05:17 - declare kind of two variables on the
05:19 - same line in python
05:21 - okay so now that i have that i'm going
05:23 - to set up my window
05:24 - so i'm going to put this in a variable
05:25 - called win in all capitals whenever i do
05:28 - something in all capitals i'm making a
05:29 - constant meaning that this variable is
05:31 - not going to change
05:32 - so to do this i'm going to say pygame
05:34 - dot display
05:36 - dot set underscore mode
05:38 - and then inside of here i'm going to put
05:40 - a tuple and i'm going to pass the width
05:42 - and the height and i guess at this point
05:44 - in time it's a good idea to mention that
05:46 - you should have some familiarity with
05:47 - python of course you don't need to be an
05:49 - expert you can be a beginner but you
05:51 - should know things like if statements
05:52 - while loops for loops because i'm not
05:54 - going to explain all of the very basics
05:56 - anyways to set up a window this is all
05:58 - we do pi game dot display dot set
05:59 - underscore mode and then we pass a tuple
06:02 - so just the brackets like this with
06:03 - width and height
06:05 - great now that we have our window we can
06:07 - make a caption for it so the caption is
06:09 - just going to be the title of the window
06:11 - and to do that we do pygame dot display
06:14 - dot set underscore caption and for the
06:16 - caption i am just going to call this
06:18 - punk
06:19 - okay so this will just be the title at
06:21 - the top of the window when it's actually
06:23 - loaded up so now that we have this what
06:24 - i want to do is implement what's known
06:26 - as the main loop of my program or the
06:28 - event loop of my program which is
06:30 - actually going to display the window and
06:32 - then draw something onto it so i'm going
06:34 - to define a function here i'm going to
06:36 - call this main
06:37 - and inside of this function i'm going to
06:38 - declare a few variables that we're going
06:40 - to use to actually kind of show the
06:42 - display and handle all of the events
06:44 - that are occurring so i'm going to make
06:46 - a variable here called run i'm going to
06:48 - make this equal to true
06:49 - and i'm going to do a while loop here
06:51 - and say wow run now whenever we have a
06:53 - pi game
06:54 - game i guess pi game program we need a
06:57 - main loop and the main loop is just a
06:59 - loop that's constantly going to be
07:01 - running that's handling everything
07:02 - related to our game so it's handling
07:04 - collision it's moving the ball it's
07:06 - allowing us to move the paddle so that's
07:08 - what this is right here
07:09 - so inside of this main loop i'm going to
07:12 - write the following for event in
07:14 - pygame.event.get
07:16 - now this will get all of the events like
07:18 - clicking your mouse clicking the
07:19 - keyboard closing the window that's what
07:22 - this loop is doing here looping through
07:23 - all of the different events that have
07:25 - occurred we're going to handle those
07:26 - events and then do something so in here
07:28 - the first event that i want to check is
07:30 - if we are actually quitting the window
07:32 - so i'm going to say if event.type is
07:34 - equal to pygame.quit
07:36 - with all capitals for quit here then i'm
07:38 - going to say run is equal to false and
07:41 - i'm going to break out of this for loop
07:43 - now what this is going to do is check if
07:45 - we hit the red button in the top right
07:47 - hand corner of our window so the close
07:49 - button if we hit that we want to stop
07:51 - the main loop so we actually end up
07:52 - closing the program and then we want to
07:54 - break now outside of my while loop here
07:56 - i'm going to say pie game dot quit and
07:59 - quitting is just going to quit pie game
08:00 - and close the program for us
08:02 - okay awesome now one thing i need to do
08:04 - here is right after i import pie game i
08:06 - need to initialize it so i'm going to
08:08 - say pie game dot init you should run
08:10 - this whenever you import pi game just
08:12 - directly below it it just initializes a
08:14 - few things that you need and we'll use
08:16 - this later or this will allow us to do
08:18 - some things later
08:20 - okay so here we go we have a basic
08:21 - program we have main we have run equals
08:23 - true we have our while loop here which
08:25 - is going to be the main event loop
08:27 - inside of this we're checking all of the
08:28 - different events and then what i'm going
08:31 - to do here is call the main function so
08:33 - i'm going to say if name is equal to
08:34 - main
08:35 - then call main now what this does is
08:38 - ensure that we are running this module
08:40 - to call this function so essentially if
08:42 - we were to import this module so the
08:44 - solution.pi file then what would happen
08:46 - is this would not run because the name
08:48 - of this would not be made now i'm not
08:50 - going to explain exactly how this works
08:52 - but it really just makes sure that
08:53 - you're only going to run this main
08:54 - function if you directly run this python
08:57 - file not if this python file was
08:59 - imported from another project or from
09:01 - another font
09:02 - okay
09:03 - hopefully that makes sense but when we
09:05 - do this we should see a pi game window
09:07 - pop up there won't be anything on the
09:08 - window it'll just be a black screen but
09:10 - that's the thing we need to start out
09:11 - with okay so there we go we can see it
09:13 - says pong we have our pie game window
09:14 - and when we click the x it should quit
09:17 - great there we go it quits okay so
09:19 - that's our starting thing now the next
09:21 - thing i'm going to do is implement
09:22 - something known as a clock now a clock
09:24 - is going to regulate the frame rate of
09:26 - our game so it's going to run at the
09:28 - same pace on every single computer
09:30 - so i'm going to say clock is equal to pi
09:32 - game.time.clock
09:34 - and then inside of here i'm going to say
09:36 - clock.tick
09:38 - i'm going to pass this in all capital
09:40 - fps variable
09:41 - which i'm going to define up here as 60.
09:44 - now the fps is the frames per second and
09:46 - when you put this inside of a while loop
09:48 - it makes sure that you cannot run faster
09:50 - than 60 frames per second or 60 ticks
09:53 - per second which means that
09:55 - this while loop here is going to run a
09:57 - maximum of 60 times per second so if
10:00 - you're on a really fast computer it's
10:01 - not going to be running quicker than if
10:02 - you were on a slow computer hopefully
10:04 - that makes sense but that's why we want
10:06 - the clock it just regulates the speed of
10:08 - this while loop now it's worth noting
10:09 - that if you're on a very very slow
10:11 - computer this while loop may run slower
10:13 - than the fps that you're putting here
10:15 - this is simply limiting the amount of
10:17 - times it can run it's not making it run
10:19 - 60 times per second so on almost all
10:21 - modern computers it will run at least 60
10:24 - frames per second or i guess exactly 60
10:25 - frames per second but on a very slow
10:27 - computer you may run under this and so
10:29 - you may see some lag in your game if
10:31 - it's a really slow computer just wanted
10:33 - to note that because some people have
10:34 - mentioned that in my previous pie game
10:36 - tutorials okay so now we have our clock
10:39 - and the next thing i want to do is
10:40 - implement something to actually draw
10:42 - some stuff onto the screen so i like to
10:44 - handle all of my drawing in a separate
10:46 - function so it's really easy to see
10:48 - where i'm drawing everything so i'm
10:50 - going to make a new function here and
10:51 - i'm just going to call this draw this is
10:53 - going to take in one variable which is
10:54 - going to be the window that we want to
10:56 - draw on
10:57 - now inside of here all i'm going to do
10:59 - for now is fill the window with a
11:01 - specific color just to show you how that
11:03 - works so i'm going to say win.fill and
11:05 - then here i have to pass an rgb value
11:08 - now rgb is red green blue now i could
11:10 - just pass the rgb value directly in here
11:13 - but i like to define all of my colors or
11:15 - rgb values as variables so i'm going to
11:17 - make one called white and this is going
11:19 - to be equal to 255 255 255 and then i'm
11:23 - going to make one called black and this
11:25 - will be equal to zero zero zero okay so
11:27 - those are my two colors up here and what
11:29 - do i want to fill the window with well
11:31 - we are going to fill it with black but
11:33 - for now i'll just put white so we can
11:34 - actually see what's showing up
11:36 - now whenever we do some type of drawing
11:38 - operation in pie game we need to update
11:41 - the display manually and then it will
11:43 - actually do all of the drawing so when i
11:45 - do something like a wind dot fill this
11:47 - is filling the entire window with white
11:50 - so it'll change the background color
11:51 - essentially to white but for this to
11:53 - actually happen i need to say pygame
11:56 - dot display not clear but dot update
11:59 - now this will update the display and
12:01 - perform any of the drawing operations
12:03 - that we've done so maybe i've done a few
12:05 - other drawing operations so i'm going to
12:07 - do all of those and then update the
12:09 - display and updating the display is kind
12:11 - of the most intensive part so doing the
12:13 - actual drawing does not take very long
12:15 - but updating the display where it
12:16 - applies all of the drawing that's going
12:18 - to take the longest so you only want to
12:20 - do this after you've done all of your
12:21 - drawing
12:22 - okay i'll continue to explain that in a
12:24 - second but for now inside of my while
12:26 - loop i want to call this draw function
12:28 - so every single frame we're continually
12:30 - redrawing the window
12:32 - so let's call draw here and let's pass
12:34 - to it the all capital win which is going
12:37 - to be the window here that we want to
12:38 - draw on
12:39 - okay hopefully that makes sense let's
12:42 - run the program now and see if we're
12:43 - getting a white screen okay so notice
12:45 - we're getting a white background perfect
12:47 - that is what we wanted because we are
12:49 - filling the window with white now i'm
12:51 - just going to change this to black
12:53 - because we actually want a black
12:54 - background i just want to show you how
12:56 - wind.fill works so now that we've done
12:58 - that what i'd like to do is implement
13:00 - the paddles so i want to add a paddle on
13:02 - the left side and a paddle on the right
13:04 - side and then i want to see the paddles
13:06 - actually be able to move when we hit the
13:07 - different keys on the keyboard so i'm
13:09 - going to make a class here
13:11 - i'm going to call this paddle
13:14 - and the reason why we're going to do
13:15 - this
13:15 - is because we're going to have multiple
13:17 - panels
13:18 - and we want their movement and different
13:20 - properties to be stored as an object so
13:22 - we don't have to kind of repetitively
13:24 - code this up now if you're unfamiliar
13:26 - with object oriented programming i'll
13:27 - explain kind of the basics of what i'm
13:29 - doing here but i do have a ton of videos
13:31 - on my channel explaining object-oriented
13:33 - programming in python
13:35 - okay so for the panel i'm going to say
13:37 - define
13:38 - a knit
13:39 - now this is essentially what's going to
13:40 - be called when we initialize a paddle or
13:42 - create a new paddle and what i want to
13:44 - take in for the paddle is an x y width
13:47 - and height now our paddle is just going
13:49 - to be a rectangle one will be on the
13:50 - left hand side one will be on the right
13:52 - hand side and they're going to have
13:53 - different x and y coordinates on the
13:55 - screen and we're going to change the y
13:57 - coordinate based on where we're moving
13:59 - right so if the user presses the up
14:00 - arrow key we want to move it up if they
14:01 - press the down arrow key we want to move
14:03 - it down so i'm going to say self.x is
14:05 - equal to x
14:07 - self.y is equal to y
14:09 - self.width is equal to width and
14:11 - self.height is equal to height now these
14:13 - are the attributes or properties of this
14:16 - paddle which means that each paddle i
14:18 - create will have different x and y and
14:20 - different width and height
14:21 - corresponding to what we passed here
14:23 - when we created the path so there we go
14:25 - we have our initialization for the
14:26 - panels now i want to
14:28 - write a method on the paddles which is
14:30 - essentially a function you can call on
14:32 - them
14:32 - called draw
14:34 - now draw is going to do exactly what it
14:35 - says it's just going to draw the paddle
14:37 - now our paddle is going to be a
14:38 - rectangle it's going to have the color
14:40 - of white so let's define a class
14:42 - attribute here called color and let's
14:44 - just make this equal to white because
14:46 - this will be a constant it's not going
14:48 - to change
14:49 - so inside of draw i want to use the
14:51 - window to actually draw my paddle on the
14:53 - screen so i'm going to say
14:55 - actually
14:57 - uh let's make sure the indentation is
14:59 - correct pie game dot draw and then not
15:03 - dot circle we want dot
15:06 - rectangle like that and i keep messing
15:08 - up my indentations let's fix that and
15:10 - when i'm drawing a rectangle with python
15:12 - well this is how you do it
15:13 - pigeon.draw.rectangle
15:15 - and i need to pass to it where i want to
15:16 - draw it
15:17 - which is going to be the window right
15:19 - and then i need to pass a color well the
15:21 - color is going to be self
15:23 - dot color that's going to reference this
15:25 - right here which is equal to white
15:27 - and then i'm going to pass a rectangle
15:29 - now a rectangle is an x y width and
15:31 - height so in pi game when we draw
15:33 - something we draw from the top left hand
15:36 - corner so in pi game 0 0 is the top left
15:39 - hand corner okay of the screen so if i
15:41 - draw it something like 10 10 that's
15:42 - going to be 10 pixels sorry right and
15:45 - then 10 pixels down and then if we're
15:47 - drawing something like a rectangle for
15:48 - example the x y that we're drawing the
15:51 - rectangle at is the top left-hand corner
15:53 - of the rectangle and then the width and
15:55 - height is well the width and height of
15:56 - the rectangle based on the top left hand
15:58 - corner so you'll see what i mean here
16:00 - when i draw this but i'm going to do
16:01 - self.x self.y self.width and self.height
16:05 - that's all i need to draw the rectangle
16:07 - okay
16:08 - so now we have our paddle so let's
16:10 - create two paddles and let's draw them
16:13 - so i'm going to go here and i'm going to
16:14 - say my left paddle
16:16 - is equal to a paddle and i need to pass
16:18 - this in x y width and height
16:20 - so for the x i'm just going to make this
16:22 - 10. so it'll be 10 pixels off the left
16:25 - hand side border of the screen
16:27 - then we're going to pass a uh
16:29 - a y
16:30 - the y i want to be directly in the
16:32 - middle of the screen
16:33 - so we're going to say height
16:35 - which is the height of our window we're
16:37 - going to integer divide this by 2 just
16:38 - to get a whole number and we're going to
16:40 - subtract this by whatever the height of
16:42 - our rectangle is going to be or the
16:44 - height of our pattern so i'm going to
16:46 - make a variable up here and i'm going to
16:47 - say paddle
16:49 - yeah paddle underscore height and paddle
16:53 - underscore width and this is going to be
16:55 - equal to just let me look at my screen
16:56 - here uh
16:58 - 120 and i realize here that i probably
17:00 - want to go with first and then height
17:02 - second just to stay consistent with
17:04 - width and height up there so i'm going
17:05 - to say paddle width paddle height and
17:07 - we're going to make this 20
17:09 - and 100 so that's the the values for our
17:11 - width and our height okay so we're going
17:13 - to use that now here
17:14 - and we're going to say paddle height
17:16 - divided by two now to explain to you why
17:18 - we want this let's just quickly open up
17:21 - paint and i can shoot so let's zoom in a
17:24 - bit let's say this is our window okay
17:26 - now as i said here is gonna be zero zero
17:28 - now i'm drawing with my mouse so just
17:30 - excuse me but let's write this 0 0. now
17:33 - our height is going to be all the way
17:35 - down here so height is h
17:37 - this will be h okay so if our height is
17:40 - something like i guess we have 500 then
17:42 - this coordinate right here would be 0
17:44 - comma 500. so the middle of this is
17:47 - going to be height over 2 right so we
17:48 - have h
17:49 - over 2. but the issue is if i start
17:51 - drawing my rectangle here i'm going to
17:53 - draw it like this because the top left
17:55 - hand corner is where i start drawing it
17:57 - from so what i need to do is draw the
17:59 - top left hand corner so that my
18:01 - rectangle will be perfectly center so
18:03 - this will be the center of the rectangle
18:05 - hopefully that makes a bit of sense but
18:07 - to find this position here where we want
18:09 - to start drawing the rectangle from we
18:11 - need to know the height of the rectangle
18:13 - because if the height of the rectangle
18:14 - is say 100 then what i'm going to do is
18:17 - take whatever the height of my window is
18:18 - divided by 2 and i'm going to subtract
18:21 - half of this height which is going to be
18:23 - 50 and that will tell me where i need to
18:25 - start drawing my rectangle so it's
18:26 - perfectly center in the screen
18:29 - okay now hopefully again that makes a
18:30 - bit of sense we're going to take the
18:31 - height over 2 we're going to subtract
18:33 - the height of our rectangle over 2 and
18:35 - then that tells us the correct height to
18:37 - draw a rectangle at such that it's
18:38 - perfectly in the middle of the screen
18:40 - okay so let's close this here and let's
18:42 - now implement that so this is going to
18:44 - be height over two minus paddle height
18:46 - over two okay i guess we already have
18:47 - that
18:48 - and then what we want for the width and
18:51 - the height is just going to be the
18:52 - paddle width and the paddle height now
18:54 - let's copy this because it's going to be
18:55 - very similar for our right paddle so
18:58 - here i'm going to say right panel except
19:00 - all i'm going to change is where i want
19:02 - the x to be because
19:04 - this is going to be different and i'm
19:05 - going to say this is going to be the
19:06 - width
19:07 - and then this is going to be subtracted
19:08 - by 10
19:09 - subtracted by and then this is going to
19:11 - be the panel width like that now again
19:14 - the reason for this is that i actually
19:16 - have to go and paint to explain this if
19:19 - we want
19:20 - our paddle to be say 10 pixels off the
19:23 - right border okay then what i need to do
19:25 - is make the x coordinate be here right
19:28 - so let's say we want this to be 10 kind
19:29 - of the gap between the right border then
19:32 - i need to account for the width of this
19:34 - rectangle as well as kind of the padding
19:36 - i want between the right border so what
19:38 - i'm doing is i'm taking whatever the
19:39 - width of the screen is which is going to
19:41 - be right here okay so this would be
19:43 - width and then 0 this position so i'm
19:46 - taking the width i'm subtracting from
19:48 - the width this 10 which is the padding
19:50 - that i want and then i'm subtracting the
19:52 - width of the rectangle and that's
19:53 - telling me the exact x coordinate that i
19:56 - want to put this paddle at and then the
19:58 - height is going to be the same thing
19:59 - that's why i've left it the same
20:01 - okay hopefully that makes sense that is
20:02 - what we have for the right panel and now
20:05 - what i want to do is draw the two
20:06 - paddles on the screen so to do this i'm
20:09 - going to pass to my draw function a list
20:12 - that contains both my paddles so i'm
20:13 - going to say left paddle and right
20:15 - paddle
20:16 - now i'm going to go to draw
20:18 - i'm going to take in paddles like that
20:20 - and i'm going to use a for loop to draw
20:21 - both of the panels so i'm just going to
20:23 - say 4 paddle
20:25 - and paddles
20:27 - paddle.draw and then we'll pass to this
20:29 - the window
20:30 - now why am i getting an error here
20:32 - indentation okay let's move that over by
20:34 - one and now we're good
20:36 - all right so the reason i'm doing a list
20:37 - is just because i'm going to do the same
20:39 - thing to draw both paddles so we can
20:40 - just do a for loop and draw both of them
20:42 - and maybe some sometime down the future
20:44 - we add a third paddle a fourth paddle
20:46 - now we just pass it in the list and it
20:48 - will draw all of them for us
20:50 - okay so let's now see if our paddles are
20:52 - showing up
20:53 - let's draw this and we got an issue pie
20:55 - game.draw has no attribute rectangle uh
20:58 - am i spelling rectangle incorrectly
21:01 - let's see pygame.draw.rectangle
21:04 - um
21:08 - ah my apologies guys this needs to be
21:10 - wrecked not rectangle uh that's actually
21:12 - how you draw the rectangle is with rect
21:14 - not rectified okay let's try this
21:17 - let's run
21:18 - and there we go now we have our two
21:20 - paddles they are perfectly centered in
21:21 - the screen and they're at the correct x
21:23 - coordinates now we want to move the
21:25 - panels so let's figure out how we can do
21:27 - that
21:28 - okay so to move the paddles we need to
21:31 - change their y coordinate right move it
21:33 - up and move it down now we need a
21:35 - velocity to move the paddles at so
21:37 - essentially how much do we go up or down
21:39 - when the user hits a specific key so i'm
21:42 - going to add a velocity here on my
21:44 - paddle and make this equal to 4. now
21:47 - notice anything that's going to apply to
21:49 - all of my paddles i'm putting as a class
21:52 - attribute meaning i'm defining it here
21:54 - rather than inside of the initialization
21:56 - or inside of a method so i'm doing bell
21:58 - equals four now i'm going to implement a
22:00 - method on my panel and i'm going to say
22:02 - define
22:03 - move
22:04 - self and i'm going to say up is equal to
22:07 - true now what we're going to do here is
22:09 - call this method on the paddle and if i
22:11 - pass up equals true we're going to move
22:13 - the paddle up if i pass up equals false
22:15 - we're going to move the paddle down by
22:17 - the velocity so i'm going to do here say
22:19 - self.y and then this is going to be plus
22:22 - equals and then the
22:25 - dot velocity
22:26 - but that's only going to be the case if
22:29 - up is equal to false so i'm going to say
22:31 - if up
22:32 - then we'll do something
22:35 - otherwise do this let me just copy this
22:37 - and then i will explain what's going on
22:38 - here
22:39 - okay so if self.y then minus equals
22:41 - self.
22:42 - so if we are going up and we want to
22:44 - move the paddle up now to move the
22:46 - paddle up we need to subtract from the y
22:48 - coordinate whatever the velocity is
22:50 - right so we'll do that here
22:52 - otherwise though we need to move the
22:53 - paddle down so we'll say self.y
22:56 - plus equals whatever the velocity is so
22:58 - as the y value increases we're going
23:00 - down as the y value decreases we're
23:02 - going up so this should now move the
23:03 - paddle up and down okay so now that we
23:06 - have this we need to actually call this
23:08 - but we're only going to call this when
23:10 - we are pressing the up or down arrow key
23:13 - now to do this
23:15 - we're going to have to get the keys that
23:16 - the user is pressing and then allow the
23:19 - paddle to move when they press a
23:20 - specific key now for this game i'm
23:22 - making a two player so we're gonna have
23:24 - w and s allowing the left paddle to move
23:26 - and then we're gonna have the arrow keys
23:28 - allowing the right paddle to move now
23:29 - again you could implement an ai for pong
23:32 - maybe we'll do a video where we'll
23:33 - implement ai for pong let me know if you
23:35 - want a specific video on that but for
23:37 - now we're just going to do it with two
23:38 - players so i'm going to say that keys is
23:40 - equal to
23:41 - pygame.key.get underscore pressed and
23:44 - this is going to give us a list
23:45 - containing all of the different keys
23:46 - that have been pressed specifically it's
23:48 - actually going to give us i believe a
23:49 - map it's either a map or a list either
23:52 - way i'll show you how we can access and
23:53 - check if a key was pressed so i'm saying
23:55 - keys equals pi game dot key dot get
23:57 - underscore pressed now what i want to do
23:59 - is make a separate function that will
24:01 - handle moving the paddles for me because
24:03 - it's going to be a good amount of logic
24:04 - and i don't want it to kind of clog up
24:06 - my main loop here
24:07 - so i'm going to call a function this
24:09 - will be handle
24:11 - underscore paddle
24:13 - underscore movement like that we're
24:15 - going to need to pass this the keys and
24:18 - we're also going to pass to it the left
24:20 - paddle
24:21 - and the right panel so we're able to
24:23 - move them okay so let's make a function
24:25 - now let's say define
24:27 - handle paddle movement
24:29 - let's take in our keys and let's take in
24:31 - our left paddle and our right paddle
24:33 - okay so inside of here we're going to
24:35 - check if the user is pressing the w or s
24:38 - key and move the left paddle and then
24:39 - the arrow keys and the right panel so
24:41 - i'm going to say if
24:42 - keys and then this is going to be pie
24:44 - game dot and this is a capital k
24:47 - underscore w notice this is a lowercase
24:50 - w so if we are pressing the w key then
24:52 - we want to move the left paddle up so
24:54 - we're going to say leftpaddle.move
24:56 - up is equal to trip okay and then we'll
24:59 - say if keys
25:01 - and this will be pie game dot k
25:04 - underscore s
25:05 - then we want to do the same thing we
25:07 - want to move it down so left paddle dot
25:09 - move and then not down equals true but
25:10 - this is going to be up
25:13 - is equal to false okay this is now
25:15 - handling the movement of our left paddle
25:17 - now let's copy this and do the same for
25:19 - the right paddle except we're going to
25:20 - do this with the arrow keys so just to
25:22 - note here when you want to check a
25:24 - specific key if it's a letter key or
25:26 - yeah i guess a letter key then you're
25:27 - just going to do a lowercase of whatever
25:29 - the letter is so a q w whatever if it's
25:32 - something like the shift key or the
25:33 - enter key it's usually in all uppercases
25:35 - so for the arrow keys we're going to say
25:37 - key underscore up or k underscore up and
25:40 - for the
25:41 - down arrow key it's going to be k
25:42 - underscored down in all capitals now all
25:45 - we have to do here is change this to be
25:46 - the right paddle
25:48 - and this one to be the right paddle as
25:50 - well
25:50 - okay so now this should actually be
25:52 - working handling our paddle movement so
25:55 - let's see if this is working by running
25:56 - our code
25:58 - okay so when i run my code now i can
26:00 - move my panels but notice that my
26:02 - paddles actually go off the screen so
26:04 - now we need to implement something so
26:05 - we're not going to be able to move the
26:06 - paddle off the screen so to do that i
26:09 - just need to check to see that if when
26:11 - we move the paddle it's going to go off
26:12 - the screen or not if it's going to go
26:14 - off the screen when we move it then
26:15 - we're not going to let the user move it
26:17 - right so what i'm going to do here is
26:18 - say
26:19 - we will allow us to move the paddle if
26:22 - we are going up so if we're hitting the
26:23 - w key
26:24 - and
26:25 - the left paddle dot y
26:28 - and this is going to be minus
26:30 - the left paddle dot velocity
26:33 - is greater than
26:35 - or equal to zero
26:37 - okay so if left pal dot y minus the
26:40 - velocity because that's how much we're
26:41 - going to subtract from it when we move
26:43 - it is greater than or equal to zero
26:45 - which is the top of the screen then
26:47 - we'll let it move however if it's not
26:49 - going to be greater than or equal to
26:50 - zero so it's going to go off the screen
26:52 - even by a slight amount then we're not
26:54 - going to let you move it okay
26:56 - now let's do the same thing down here
26:57 - except we're going to have to check if
26:58 - you're going to hit the bottom of the
26:59 - screen so we're going to say and the
27:01 - left paddle dot y this time we're going
27:03 - to add the velocity right so plus the
27:05 - left paddle.val
27:07 - we also need to add though the paddle
27:09 - height so i'm going to say plus
27:11 - left paddle dot and this is going to be
27:13 - height like this and we're going to
27:15 - check if this is going to be less than
27:17 - or equal to the height of the screen so
27:19 - the reason we need this is because the y
27:21 - that we're referencing is the top left
27:23 - hand corner of our paddle so we're
27:25 - moving up it's fine to check that
27:26 - because that's the top of the paddle but
27:28 - the bottom of the paddle is the left
27:30 - paddle dot y plus whatever the height of
27:32 - the paddle is right because that's going
27:35 - to give us where the bottom of the
27:36 - paddle actually is on the screen if we
27:38 - didn't have this then what would happen
27:39 - is we'd be able to move it all the way
27:41 - down until it was just barely off the
27:44 - screen because that's when the y
27:45 - coordinate is at the very bottom so we
27:47 - need to add the height to make sure that
27:49 - we're not going to look like we're
27:50 - moving off the screen right and now
27:52 - we're checking if it's less than or
27:53 - equal to the height not greater than
27:55 - right because if it is less than the
27:57 - height then that's fine we can continue
27:58 - to move otherwise it's off the screen
28:01 - okay so that's what we're doing now
28:02 - we're just going to check the exact same
28:03 - thing here
28:04 - except for the right paddle for these
28:07 - ones so i'm just going to change this to
28:08 - be the right paddle and the
28:11 - right paddle and then same thing with
28:13 - moving down
28:14 - so let's copy this and put it here and
28:17 - now let's go
28:18 - right paddle
28:20 - right paddle and right pad
28:23 - okay perfect so now this should make it
28:26 - so we cannot move off the screen because
28:27 - we're only going to move if we are not
28:29 - going to move off the screen okay so
28:30 - let's run this and see what we get
28:33 - and notice now that it stops at the very
28:35 - bottom of the screen and stops at the
28:37 - top of the screen let's just check the
28:38 - opposite and it is all good our paddles
28:40 - now do not move off the screen nice now
28:43 - that we've done that what i would like
28:44 - to do is draw a line in the middle of
28:46 - the screen just because i think that
28:48 - looks nice i want to draw a dashed line
28:50 - or a dotted line
28:51 - and i will show you how we do that so
28:53 - let's go inside of our draw function
28:55 - just need to reference my cheat sheet
28:56 - here because this is a little bit
28:58 - complicated to do so i'm going to say 4i
29:01 - in range we're going to start at 10
29:03 - pixels
29:04 - we're going to draw up to the height
29:07 - and the increment for our for loop is
29:09 - going to be height over 20. now the idea
29:11 - here is that i want to draw a bunch of
29:14 - rectangles to represent kind of a dashed
29:16 - or dotted line now i want the space
29:18 - between the different rectangles to be
29:20 - the same and i want the rectangle i
29:23 - guess height to be identical for every
29:26 - single rectangle so what i want to do is
29:27 - draw one rectangle not draw a rectangle
29:29 - draw another rectangle not draw a
29:31 - rectangle and kind of have a gap between
29:33 - each of them so that's what this for
29:34 - loop is going to do and you'll see how i
29:36 - implement that so i'm going to say if
29:38 - i
29:39 - mod 2 is equal to 1 then continue now
29:43 - essentially what this means is that if i
29:45 - is an even number then i'm going to
29:47 - continue so i'm going to skip this
29:49 - iteration and i'm not going to draw a
29:50 - rectangle otherwise though i will draw a
29:53 - rectangle and the way i'm going to draw
29:54 - it is the following i'm going to say
29:55 - pygame.draw.rect
29:58 - i'm going to draw this on my window the
30:00 - color is just going to be white so we'll
30:01 - draw white and then the x is going to be
30:04 - in the middle of the screen so to do
30:06 - this in the middle of the screen we're
30:07 - going to say width
30:09 - over 2 but we need to subtract half of
30:12 - the width of the rectangle for the same
30:14 - reason we did that with the height when
30:15 - we were initializing the y of the paddle
30:18 - so now if we're looking at it
30:19 - horizontally right if we want to draw it
30:22 - right in the middle of the screen then
30:23 - the x coordinate can't be directly in
30:25 - the middle it needs to be whatever half
30:26 - the width of the rectangle is to the
30:28 - left of the middle so that it looks like
30:30 - it's directly in the middle so i'm going
30:32 - to say width over 2 minus 5 because the
30:34 - width of my rectangle here i'm going to
30:36 - make 10. actually let's see if that's
30:38 - what we're doing
30:40 - i think yeah that's fine okay
30:42 - now for the y coordinate i'm going to
30:44 - make this i now the reason i'm making it
30:46 - i is because i'm saying i want to have
30:48 - 20 rectangles on the screen right so
30:51 - when i say height over 20 that means
30:52 - that we're going to do this for loop 20
30:54 - times because we're going up to height
30:56 - and we're starting at 10. so we'll do it
30:58 - either 20 or 19 times
31:00 - either way though
31:02 - the reason i'm doing i is because we're
31:03 - going to be essentially picking what y
31:06 - value to draw at based on whatever the
31:08 - for loop is currently at so we're going
31:10 - to start at 10 then we're going to skip
31:12 - one then we're going to be at whatever
31:13 - height over 20 times 2 plus 10 is
31:16 - because that's how much we're
31:17 - incrementing the for loop by every
31:19 - single time and so this will make it so
31:20 - our rectangles are evenly spaced out
31:22 - because that's how much we're
31:24 - incrementing the i by every single time
31:25 - so i'm using i for my height so width
31:28 - over 2 minus 5 i then the width of my
31:31 - rectangle is going to be 10. notice this
31:33 - value here is half of the width right
31:35 - and then the height of my rectangle is
31:36 - going to be height over 20 because
31:38 - that's how much i'm incrementing the for
31:40 - loop by so i need to make sure that's my
31:42 - height so we're getting kind of the
31:44 - correct spacing for our rectangles i
31:46 - understand this a bit complicated this
31:48 - is how you do a dashed line there is
31:50 - some other ways to do it but they take
31:51 - up a lot more code so i'm going to do it
31:52 - in this way okay so let's just see if
31:54 - this is going to work now before we go
31:56 - any further
31:57 - let's draw this and notice now we get a
31:59 - nice dashed line or dotted line through
32:01 - the middle of the screen uh the top and
32:03 - bottom spacing might be slightly off but
32:05 - for me this looks fine now you could
32:06 - make this a solid line if you want that
32:08 - would be a lot easier but we're gonna go
32:10 - with dash for now okay
32:12 - so i think that is all good
32:14 - now what i want to do is implement the
32:17 - ball so we want a ball that's going to
32:18 - be moving on the screen now let's just
32:21 - go into paint here and quickly discuss
32:22 - kind of some theory behind this because
32:24 - this is not trivial to do
32:26 - so we want a ball and this ball needs to
32:29 - move in two directions right it's going
32:30 - to be moving in the y direction and in
32:33 - the x direction now it's also going to
32:35 - collide with paddles we'll talk about
32:36 - the collision in a second but for now we
32:38 - want the the ball to move around the
32:41 - screen and to be able to collide with
32:42 - something like the ceiling now to move
32:44 - it as i was saying we need a velocity in
32:46 - the y direction and a velocity in the x
32:48 - direction
32:49 - now we'll start by moving the ball just
32:50 - in the x direction and based on where it
32:52 - hits the paddle we'll change its y
32:55 - velocity but just understand that we
32:56 - have kind of two components of movement
32:58 - in the x direction and in the y
33:00 - direction and we're going to have to
33:02 - calculate what those velocities are and
33:04 - then move the ball by that velocity
33:06 - every single frame so hopefully that
33:08 - makes a little bit of sense but that's
33:10 - kind of the idea here behind the ball
33:11 - and i just wanted to explain that
33:12 - because that's what i'm about to start
33:14 - coding out so just like we had a class
33:16 - for our paddle i'm going to do one for
33:17 - the ball we don't necessarily need one
33:19 - but it's just going to make things a
33:20 - little bit simpler so i'm going to say
33:22 - class ball i'm going to say define
33:25 - underscore underscore init
33:26 - we're going to take in a self x y
33:30 - and a radius
33:32 - okay we're going to do a circular ball i
33:34 - know some pong games do a rectangular i
33:36 - guess you can't really call it ball but
33:37 - rectangular object moving around we're
33:40 - going to go with the circular one so
33:42 - over here i'm going to say self.x equals
33:43 - x self.y equals y
33:47 - self dot radius is going to be equal to
33:49 - radius and then self dot x underscore
33:53 - vel is going to be equal to vel it's
33:55 - actually going to be equal to something
33:57 - called maxwell which i will implement in
33:59 - a second and we're going to say
34:01 - self.y underscore vel is equal to zero
34:04 - i'm going to implement my max velocity
34:06 - so i'm going to say max
34:07 - velocity is equal to and we'll go with
34:09 - 5.
34:10 - now the idea here is that i want to
34:12 - initialize the x velocity as whatever
34:14 - the maximum velocity is in the positive
34:16 - direction for our velocity we can have
34:18 - positive or negative and that will
34:20 - change the direction that we're moving
34:21 - right but i'm going to make this
34:22 - positive meaning it's going to be going
34:25 - actually to the right first i believe
34:27 - yeah it should be going to the right
34:29 - anyways i'm initializing the x velocity
34:31 - as the maximum velocity meaning that
34:32 - we're going to be moving to the right at
34:34 - the maximum velocity when the program
34:36 - starts then once it hits the paddle we
34:38 - will simply reverse the x velocity and
34:41 - calculate the y velocity based on where
34:43 - it hit the paddle at but the maximum
34:45 - velocity is telling us what the maximum
34:46 - possible velocity is in either direction
34:49 - so we'll always be moving at the max
34:51 - velocity in the x direction but the y
34:53 - direction velocity is going to change
34:55 - depending on where we hit the paddle
34:57 - because we're going to have to change
34:58 - the angle at which we want to move the
34:59 - ball
35:01 - okay again i know it's getting a little
35:02 - bit confusing but hopefully that makes a
35:04 - tiny bit of sense
35:05 - now we're going to implement a method
35:07 - called draw so very similar to our
35:09 - paddles we're just going to say self win
35:12 - and we're going to go in here and say
35:15 - uh this will be pygame
35:18 - dot draw dot and then circle
35:21 - we're gonna pass our window we're gonna
35:23 - have a color
35:24 - which we'll define up here as just white
35:26 - again just doing this so we can very
35:28 - easily change the color and then we want
35:30 - a radius so we're going to pass the
35:32 - window drawn the color the radius and
35:35 - the x and y position now i'm actually
35:38 - not sure if this is correct
35:40 - i think we have to do the x and y before
35:42 - we do the radius so i'm going to do
35:44 - self.x self.y make sure that's in a
35:46 - tuple and then the radius comes after
35:49 - and i think that is correct
35:51 - perfect okay so now we have draw we have
35:53 - initialization and let's implement move
35:55 - while we're at it because this is pretty
35:57 - straightforward so we're going to say
35:58 - define move and all we do to move is we
36:00 - move the x by the x velocity so
36:03 - self.underscore x
36:06 - self.x underscore value sorry and then
36:08 - self.y plus equals the self.y underscore
36:12 - velocity
36:13 - okay so that's how we move the ball uh
36:15 - this is our draw i think that is all
36:17 - good for now and the reason we can do
36:19 - plus equals is because if the velocity
36:20 - is negative then that will be equal to
36:22 - minus equals right it'll just move it in
36:24 - the other direction okay so now we have
36:26 - our ball we need to initialize our ball
36:27 - so let's go in where we have our left
36:30 - and right paddle and let's make the ball
36:32 - and say the ball is equal to ball
36:35 - now what's nice about the ball is that
36:36 - the x and y position forward is the
36:38 - center of the ball meaning that if we
36:40 - want to put it in the center of the
36:41 - screen we can just actually calculate
36:43 - the direct middle and then place it
36:45 - there rather than having to do kind of
36:47 - the calculations here we did by uh
36:49 - subtracting you know half the width and
36:50 - that type of stuff
36:52 - so for the x and y position of my ball
36:54 - i'm going to put it directly in the
36:55 - middle of the screen so i'm going to say
36:56 - width over 2
36:58 - and then i'm going to say
36:59 - height over over 2. now the reason i'm
37:02 - doing two division signs here is because
37:04 - this is integer division it's just going
37:05 - to give me the rounded division because
37:07 - i can't draw at a floating point
37:09 - position all right so we're going to go
37:11 - height over over 2.
37:12 - and then lastly here for the radius
37:14 - we're going to make a variable we're
37:16 - going to call this ball underscore
37:18 - radius and for now we'll go with a
37:20 - radius of something like 7 and we can of
37:22 - course change that later on if we want
37:24 - so let's now pass the ball underscore
37:27 - radius now we want to draw the ball so
37:30 - we're going to have to pass that to our
37:31 - draw function so i'll pass the ball
37:34 - we're going to take in the ball here in
37:36 - draw
37:37 - and it's very easy to draw this because
37:38 - of the method we have we're just going
37:40 - to say ball.draw
37:41 - and draw it on our window
37:43 - great so now we have our ball this is
37:45 - the class and i think that's actually
37:47 - all we need for right now so let's run
37:49 - the program and see what we're getting
37:51 - and we got an issue let's see what the
37:53 - error is
37:54 - it says uh maxvel is not defined my
37:57 - apologies we need to add a self.max val
37:59 - here rather than just max val because i
38:01 - have to reference it from the class okay
38:04 - let's try this now
38:05 - and we got another issue it says bolt
38:08 - object has no attribute maxwell ah we
38:11 - need
38:12 - an actual l here or an uppercase l
38:13 - rather than a lowercase one
38:15 - let's see if we get any other errors
38:18 - okay there we go so the ball is in the
38:20 - middle of the screen is not moving right
38:22 - now because we're not calling the move
38:23 - function or the move method sorry but
38:25 - once we call that we'll see that the
38:26 - ball actually starts moving on the
38:28 - screen then we need to handle collision
38:30 - so let's move the ball to do that
38:33 - we're going to go
38:35 - to under
38:36 - actually where do i want to move the
38:37 - ball yeah it's going to do it right here
38:40 - i'm just going to call ball.move inside
38:42 - of my main loop here
38:44 - and now we're going to be moving the
38:44 - ball every frame by whatever its
38:46 - velocity is
38:47 - okay so let's run this now
38:49 - and let's see and notice the ball is
38:52 - moving to the right of course it's going
38:54 - to go off the screen because we're not
38:55 - handling any collision let's run it one
38:57 - more time in case you missed it
38:59 - you can see the ball starts moving to
39:00 - the right now if we change the y
39:02 - velocity would move on an angle but for
39:04 - now we're just moving it in the x
39:05 - direction so that's what's happened
39:07 - okay so now that we've done that we need
39:09 - to start handling collision now i will
39:10 - admit this is not the easiest thing in
39:12 - the world to do but of course i'm going
39:14 - to try my best to explain it to you
39:16 - and you will have you know collision
39:18 - handled by the time this is done so
39:20 - let's go into paint again and let's just
39:21 - talk about how we're going to handle
39:23 - collision first of all with like the
39:25 - ceiling and then we'll talk about the
39:27 - panels
39:29 - so we have this right here okay now
39:32 - let's say we have a ball and let's say
39:34 - it's trajectory is here okay so it's
39:36 - kind of moving
39:37 - up in this direction and this direction
39:40 - and the average of the components makes
39:41 - it so the angle it's moving at is here
39:43 - so if the ball hits here and it's going
39:45 - in this direction with the y all we
39:48 - actually need to do to make it bounce
39:50 - off of the wall is we need to kind of
39:52 - bounce it off on the exact same angle
39:55 - that it hit the wall at right so if you
39:56 - have like a wall like this and you hit
39:59 - like this you go here right pretty
40:01 - straightforward if you hit coming pretty
40:02 - straight on you're going to come out
40:04 - going pretty straight on as well if you
40:05 - hit at a huge angle you're going to come
40:07 - off at a huge ink so that's how the
40:08 - collision is going to work works either
40:10 - in the x or y direction now when we're
40:12 - talking about the ceiling all we
40:13 - actually need to do to implement this is
40:15 - we just need to change the direction of
40:18 - the y velocity so here this y velocity
40:20 - would actually be negative because we're
40:22 - going upwards so to make it bounce off
40:24 - all we do is swap whatever the current y
40:27 - velocity is to the positive direction
40:29 - and then that moves us down
40:31 - hopefully that makes sense that's all
40:33 - you need to do to actually handle
40:34 - collision with the ceiling which we'll
40:36 - do shortly now that's the easy part
40:38 - collision with the paddle is a little
40:40 - bit more difficult because we're not
40:41 - going to do this in kind of a physics
40:43 - real way so let's say we have our two
40:45 - paddles here now in pong the way that
40:47 - the collision works at least my
40:49 - understanding of the way that the
40:50 - collision works is you're going to
40:51 - bounce the ball off of the paddle based
40:54 - on where the ball hits the paddle not
40:56 - based on the angle that it's coming in
40:58 - at now if the ball was coming at an
41:00 - angle like this if we're talking about
41:01 - real physics we should just bounce it
41:02 - off at the exact same angle now the
41:04 - reason why we don't want to implement it
41:06 - like that is because that means our
41:07 - games are always going to be the exact
41:08 - same assuming you can line up the paddle
41:10 - you never can change the direction of
41:12 - the ball whatever direction it hits the
41:14 - paddle out is the direction it's going
41:15 - to come off at so we need a way to
41:16 - actually manipulate that so we can have
41:18 - a game that's playable so the way that
41:20 - i'm going to do this is i'm going to
41:22 - figure out how to move the paddle based
41:24 - on its direction from the center of the
41:26 - paddle or sorry not move the paddle how
41:28 - to move the ball based on its kind of
41:30 - displacement or distance from the center
41:31 - of the pad so if the ball hits here then
41:34 - i want to bounce it off on an angle like
41:36 - this okay if the ball hits here then i
41:39 - want to bounce off on an angle like this
41:41 - if the ball hits in the direct center of
41:43 - the paddle then i want to bounce it like
41:44 - that so the further away from the center
41:46 - it is the higher the angle is i'm going
41:48 - to bounce it off on so we're going to
41:50 - you know have something along the lines
41:51 - of this
41:52 - and we'll calculate this using a custom
41:54 - function that will show you how to write
41:56 - but that's the idea here with the ball
41:57 - so that's going to be more complicated
41:59 - to do but when the ball hits like here
42:02 - we're going to bounce it off pretty much
42:04 - in the center because this is almost
42:05 - directly in the middle right so we'll
42:07 - bounce it a tiny bit higher than that
42:09 - but that's kind of how we're going to do
42:10 - the collision with the paddles
42:12 - so let's say we have a paddle here
42:14 - okay this is the middle of our paddle
42:16 - this is going to be the xy coordinate
42:18 - and then we have a ball
42:20 - and this is the center of the ball so
42:22 - let's just go through some of the math
42:23 - here so we first need to figure out
42:25 - where the middle of this paddle is so we
42:27 - can calculate the displacement between
42:28 - this and this
42:30 - okay so to do that
42:32 - we're going to take the y coordinate
42:33 - which is right here so let's just call
42:34 - this y1
42:36 - let's put a y1 here and we're going to
42:38 - add to this
42:39 - half of the height of the paddle
42:42 - so h over 2.
42:45 - okay so we're going to add h over 2.
42:47 - again i'm using my mouse here this is
42:48 - pretty hard but this is what's going to
42:50 - give us the middle so we can say
42:52 - this here is equal to m okay so this is
42:56 - m the middle now once we have m all
42:59 - we're going to do is subtract m from the
43:02 - y coordinate of our ball so we can call
43:04 - this y2 okay so we're going to take m
43:06 - and we're going to subtract y2 now if
43:09 - this gives us a negative value that
43:11 - means we are above m if it gives us a
43:13 - positive value that means we are below
43:15 - it so once we have the displacement so
43:17 - we can call this d
43:19 - we need to figure out what the velocity
43:21 - should be in the y direction based on
43:23 - this displacement that's where it gets a
43:24 - little bit more challenging and i'm
43:25 - going to dive into that math in a second
43:27 - but for now we understand how to
43:29 - calculate the displacement once we know
43:31 - the displacement we just need to make it
43:32 - so that when you're at the maximum
43:34 - possible displacement uh in the
43:37 - you know up direction or the down
43:38 - direction you're going to move at the
43:40 - maximum possible velocity whereas when
43:42 - you're at say a zero displacement you
43:44 - move at a zero velocity in the y
43:47 - direction
43:48 - okay hopefully i'm not confusing you
43:49 - guys too much i just wanted to give a
43:51 - quick run down because now we're going
43:52 - to implement the collision which as i've
43:54 - said is fairly complicated so let's do a
43:57 - function here and we're going to say
43:59 - handle
44:00 - underscore collision now to handle the
44:02 - collision we need the ball
44:04 - the left paddle and the right pad
44:07 - okay
44:08 - now what's nice is that we only need to
44:10 - adjust the y velocity of the ball really
44:12 - that's the only thing we're going to do
44:13 - here but we need to handle it on the
44:14 - left paddle right paddle and the ceiling
44:16 - so let's start with the ceiling because
44:18 - that's the easiest so we're going to say
44:20 - if
44:21 - the ball
44:22 - dot x
44:23 - are actually not x we only care about
44:25 - the y because we're going up and down
44:27 - right we don't care about the left right
44:28 - collision right now so we're going to
44:29 - say if the ball dot y plus the ball dot
44:32 - radius is greater than
44:35 - or equal to the height of the window
44:37 - then we're just going to say ball dot y
44:39 - underscore val multiplied equal by
44:42 - negative 1. so simply going to reverse
44:44 - the direction
44:45 - now we're going to say l if the ball dot
44:48 - y
44:49 - plus and actually minus sorry minus the
44:51 - ball dot radius
44:53 - is less than or equal to zero then ball
44:57 - dot y underscore val this is going to be
45:00 - multiplied equal by negative one now
45:02 - that's actually all we need to handle
45:04 - the collision with the ceiling so let's
45:06 - just look at this one here this is
45:07 - saying if we're going to hit the bottom
45:09 - of the ceiling right so the height we're
45:11 - checking the ball dot y which is the
45:12 - center of the ball plus the ball dot
45:14 - radius it's important you add the radius
45:16 - if you don't do that it's only going to
45:18 - check for collision with the center of
45:19 - the ball we don't want that we want it
45:21 - with like the edge of the ball which is
45:22 - the radius right so if that's the case
45:24 - then we just uh what is it change the
45:26 - direction reverse the direction now we
45:28 - do the exact same thing in the other
45:30 - direction except this time we need to
45:31 - subtract the ball dot radius not at it
45:33 - because we're checking up not down okay
45:36 - there you go we're now handling
45:37 - collision with the ceilings now after we
45:40 - check that we need to check if you're
45:42 - hitting the left panel or the right
45:44 - panel let's start with the left paddle
45:46 - so we're going to first check the
45:47 - direction of the ball because we're only
45:49 - going to see if we're hitting the left
45:51 - paddle if we're moving left right so if
45:54 - the x velocity is negative that means
45:56 - we're moving left then we'll check if
45:58 - we're colliding with the left paddle
45:59 - otherwise there's really no point in
46:00 - doing that so i'm going to say if the
46:02 - ball dot and it's going to be x
46:04 - underscore velocity is less than 0
46:08 - then i'm going to check if we're
46:09 - colliding with the left pal otherwise
46:11 - i'm going to check the right paddle so
46:13 - i'm just going to add a comment
46:14 - so to check if the ball is colliding
46:16 - with the paddle we need to check both
46:18 - the x and y coordinate and check if the
46:20 - y coordinate is within the range of
46:22 - where the paddle is on the screen so
46:24 - essentially if the y value of the ball
46:27 - is greater than the y value of the
46:30 - paddle but less than the y value of the
46:32 - paddle plus the height of the paddle
46:34 - that's going to tell us if it's where
46:36 - the paddle is on the screen essentially
46:38 - then once we check that so if the y
46:39 - coordinates are correct if it's in the
46:41 - right range we need to check if the x
46:42 - coordinate is the same as the edge of
46:45 - the pattern that's essentially what we
46:47 - want to look at so i'm going to say if
46:48 - the ball dot y
46:50 - we're going to say is greater than or
46:51 - equal to the panel dot y because
46:53 - remember this is the top left hand
46:55 - corner of the paddle
46:56 - and the ball dot y
46:59 - is
47:00 - this is going to be less than or equal
47:02 - to
47:03 - the paddle dot y
47:05 - plus the paddle dot height so that's the
47:08 - first thing that we want to check now
47:10 - after we check that we want to check if
47:11 - the x coordinates are correct now i
47:13 - could do this on the same line but just
47:14 - so it doesn't get too messy i'm going to
47:16 - do another if statement and i'm going to
47:17 - say if
47:19 - the ball dot x and this is going to be
47:22 - i need to think about this for a second
47:24 - minus the ball dot radius
47:27 - and we're going to check if this is less
47:29 - than or equal to the paddle dot x plus
47:33 - the paddle dot width okay let me check
47:36 - my cheat sheet to make sure i did this
47:38 - correct uh i think i did looks good to
47:42 - me okay
47:43 - so the reason we're doing this let's go
47:44 - to paint quickly
47:46 - is because we're checking the left
47:47 - paddle
47:48 - so this is the paddle right here we know
47:50 - the top left hand corner xy is here and
47:52 - we know the edge of the paddle in terms
47:54 - of the x coordinate is going to be the x
47:56 - plus whatever the width is
47:58 - so that's what we want to check now we
48:00 - have our ball this is the center of the
48:02 - ball so we need to account for the
48:04 - radius which is what we're doing so
48:06 - we're taking the ball.x
48:07 - we're subtracting the radius which gives
48:09 - us the edge of the ball and we're
48:11 - checking if that edge is less than or
48:13 - equal to this edge right here if it is
48:16 - we're just going to change the direction
48:18 - of the x and that will then change how
48:20 - we move the ball off of the pad okay
48:22 - so let's try this out
48:25 - let's go here and for now all we're
48:27 - going to do is change the x velocity
48:28 - we'll deal with the y velocity later so
48:30 - i'm going to say ball dot x underscore
48:32 - val
48:33 - multiplied equal by negative one
48:35 - okay it's just going to change the
48:36 - direction so now we move
48:38 - from the left to the right
48:39 - okay so that is handling the collision
48:42 - for the left paddle now handling for the
48:44 - right paddle is a little bit different
48:46 - so we're going to say if the ball dot y
48:48 - we actually can copy this for the y so
48:50 - we'll do this
48:52 - except we're going to check
48:53 - paddle uh
48:55 - i keep saying paddle sorry this needs to
48:56 - be the left underscore paddle this needs
48:59 - to be the left underscore paddle this
49:02 - needs to be the left underscore paddle
49:04 - my apologies guys fix that
49:06 - so this will be
49:08 - left underscore paddle and then for here
49:10 - this makes it actually easier we just
49:12 - make this right paddle
49:14 - okay so right pedal and right paddle
49:17 - okay so now we've checked the y for the
49:19 - right paddle now we need to check the x
49:21 - the x is a little bit different we're
49:22 - going to say ball dot x
49:24 - plus ball dot radius and we're going to
49:26 - check if this is greater than
49:28 - or equal to the right paddle
49:31 - dot x okay and if it is we're going to
49:34 - say ball dot x underscore val multiplied
49:36 - equal by negative one okay so the reason
49:38 - why this is a little bit different for
49:40 - the right paddle is because when we're
49:41 - moving to the right we're going to be
49:43 - checking the left edge of the right
49:44 - panel and that is represented simply by
49:47 - the x coordinate of the right paddle
49:49 - because that's the top left hand corner
49:50 - whereas when we're moving to the left
49:52 - we're checking the right edge of the
49:53 - left paddle which means we had to add
49:55 - the width now the reason we're adding
49:57 - the radius is because we're moving to
49:58 - the right so the radius is going to be
50:00 - to the right side that we're checking
50:01 - rather than the left whereas here we
50:03 - were subtracting the radius
50:05 - hopefully that makes a little bit of
50:06 - sense but i think this is going to be
50:08 - good to allow us to move the ball left
50:10 - and right on the paddles let's check
50:12 - this out and then we'll deal with the y
50:14 - which is a bit harder
50:15 - okay so let's see this now it should
50:18 - bounce off the paddles okay so it didn't
50:19 - bounce off the paddle which means i made
50:21 - a mistake here let me check the mistake
50:23 - and i'll be right back all right so i
50:24 - found the error this is kind of a silly
50:26 - one i'm not calling this function so i
50:28 - write this wrote this function but i
50:29 - didn't actually call it so of course the
50:31 - collision is not going to be handled so
50:32 - we need to call this down so after we
50:34 - move the ball
50:35 - then we'll handle the collision so we'll
50:37 - say handle and then this will be
50:39 - collision like that
50:40 - and we're going to pass ball left paddle
50:43 - and right paddle okay fingers crossed
50:45 - hopefully this should work now
50:47 - let's run this
50:48 - and let's see if it bounces off there we
50:50 - go so it bounces off and notice that it
50:52 - doesn't really matter where i have the
50:53 - paddle it's just going to bounce off at
50:55 - the same direction because that's all
50:56 - we're doing right now now if i move the
50:58 - paddle it should just go off the screen
51:00 - and it does because while it's not going
51:02 - to collide with the wall we haven't
51:03 - implemented that
51:04 - great so there we go that is now dealing
51:06 - with the collision
51:08 - now we want to deal with the collision
51:10 - in the y direction
51:11 - again a little bit more complicated but
51:13 - we need to calculate the displacement
51:15 - between the ball and the center of the
51:16 - paddle and then determine the angle that
51:18 - we want to bounce it off on now we don't
51:20 - actually need to use trigonometry
51:21 - because of the way that i've implemented
51:23 - this but you're going to see the math is
51:24 - not
51:25 - not super straightforward so the first
51:27 - thing we need to do is calculate the
51:29 - middle y of the panel so we're going to
51:31 - say middle underscore y
51:33 - is equal to and then this is going to be
51:36 - the in this case it's the left panel so
51:38 - the left pal dot y and then this will be
51:40 - plus the left paddle dot height divided
51:42 - by two okay
51:44 - that's fine now the next thing we want
51:46 - to do is calculate the difference in y
51:48 - between the ball and the middle of the y
51:50 - paddle or the middle of the left paddle
51:52 - circle so i'm going to say difference in
51:54 - y
51:55 - is equal to
51:56 - and this will be the middle y subtracted
51:58 - by
51:59 - the ball dot y
52:01 - now that we've done that we need to
52:02 - figure out essentially how much we need
52:04 - to divide this value by to determine
52:07 - what the velocity should be so let's go
52:09 - back to paint here and let's deal with
52:10 - some more math so we have a max velocity
52:13 - so let's call this v okay the max
52:14 - velocity is equal to
52:16 - i believe we had 5
52:18 - okay that was a rough that's a better 5.
52:20 - so let's just call this mx for max
52:22 - velocity is equal to 5.
52:24 - now what we need to do is make it so
52:26 - when we're at the maximum possible
52:28 - displacement
52:29 - that's when we get this maximum velocity
52:31 - right so if we're hitting the very very
52:33 - edge of the paddle so we hit right here
52:35 - that's when we get a maximum velocity of
52:37 - 5. now when we don't hit this we want it
52:40 - to be a little bit less right so i want
52:41 - the velocity to maybe only be 4 when we
52:44 - hit here so essentially how do we figure
52:46 - this out well what we need to do is
52:48 - figure out what value we need to divide
52:50 - whatever the distance is to make it so
52:53 - the maximum possible value we can get is
52:55 - 5 and then any other value we get will
52:57 - be smaller than 5.
52:59 - i understand this is a bit weird but we
53:01 - want it so that the distance or the
53:02 - displacement divided by some value gives
53:05 - us 5 when we're at the maximum possible
53:07 - displacement value and then when we're
53:08 - not at the maximum it gives us something
53:10 - a little bit less than 5. and as we get
53:12 - closer to the middle it gives us a
53:13 - smaller value that should reach zero so
53:16 - our range is zero to five we need to
53:18 - take our displacement and then squeeze
53:19 - it in the values zero to five
53:22 - hopefully this following a little bit
53:24 - again not the easiest math in the world
53:26 - but we're going to have a maximum
53:28 - velocity of 5 okay that's our mv and our
53:30 - maximum displacement okay is going to be
53:33 - equal to half of the panel so if we're
53:35 - taking the displacement from right here
53:38 - then the maximum possible displacement
53:39 - we can have is that the center of the
53:41 - ball is right here at the very edge of
53:43 - the paddle which is just going to be
53:44 - half the height of the paddle okay so
53:46 - our maximum displacement is height of
53:49 - the paddle divided by two so we have
53:52 - these two values and now we need to
53:54 - figure out what i'm going to call a
53:55 - reduction factor and the reduction
53:57 - factor is how much we take the
53:59 - displacement between
54:01 - the paddle and the uh what do you call
54:04 - it and the ball and divided by okay so
54:06 - now we also have d so let's write a
54:08 - variable d let's go back to this
54:11 - no i don't want a pencil i want
54:13 - brush
54:14 - okay d so we have d this equal to the
54:16 - diff distance between the middle of the
54:18 - paddle and the uh the ball so the way
54:21 - that we figure this out is we say that
54:23 - our reduction factor which i'm going to
54:24 - call r so we want to have d
54:26 - over r
54:28 - is equal to
54:30 - mv
54:31 - when when specifically d
54:34 - is equal to md
54:36 - so when the displacement is equal to the
54:38 - maximum possible displacement that we
54:40 - can have and we divide it by r we want
54:43 - to get the maximum velocity that's what
54:45 - i'm saying here now it doesn't matter if
54:46 - it's positive or negative because we'll
54:48 - get either the maximum positive or
54:49 - maximum negative velocity anyways that's
54:52 - kind of the equation that we have now
54:54 - fortunately we can solve for r because
54:56 - we have a value for d and m v now once
54:59 - we solve for r we just use r as the
55:01 - reduction factor and then that's going
55:03 - to give us what we need for the velocity
55:05 - for our ball so if we plug in d which is
55:08 - going to be md which is just h over 2
55:10 - then we have h over 2
55:13 - over r is equal to mv and we know mv
55:16 - which is 5. now h over 2 is going to be
55:18 - variable based on the height of the
55:20 - paddle but i think we actually know this
55:21 - value is 50.
55:23 - anyways i'll show you how we solve just
55:25 - using the variables so if we have h over
55:27 - 2 over r is equal to 5 and we're looking
55:29 - for r then what we need to do to
55:31 - actually solve this is we need to do the
55:34 - following we're going to have to flip r
55:36 - and h over 2. so we're going to say r
55:38 - over
55:39 - h
55:40 - over 2
55:41 - is equal to 1 over 5 okay because what
55:45 - we do to one side we need to do the
55:46 - other side then we're going to take h
55:48 - over 2 and we're going to multiply it by
55:50 - the 1 right here so we're going to have
55:51 - h over 2 over 5 is equal to r
55:54 - okay so it's going to be whatever the
55:56 - the distance is the maximum distance
55:58 - over 5.
55:59 - in this case it would just be our max
56:01 - velocity so that could potentially
56:02 - change is equal to r and then we take in
56:05 - the future whatever the displacement is
56:07 - divided by r and that gives us the value
56:09 - i know that was a lot i'm sure it's not
56:11 - 100 clear once i write this maybe it'll
56:13 - make a bit more sense but i just wanted
56:15 - to go in and try to explain how that
56:16 - works okay so now i'm going to calculate
56:18 - the reduction factor so i'm going to say
56:20 - reduction factor is equal to this is
56:22 - going to be left paddle
56:24 - dot height divided by 2
56:27 - okay
56:28 - divided by two and then we're going to
56:30 - take all of this and we're going to
56:32 - divide this by the maximum velocity of
56:34 - the ball so i'm going to say ball dot
56:36 - max underscore val like that
56:38 - okay now we have the reduction factor
56:40 - now that we have this we need to use
56:41 - this to calculate the y velocity so i'm
56:43 - going to say the y velocity is equal to
56:45 - the difference in y divided by the
56:47 - reduction factor
56:49 - okay so now this is going to squeeze our
56:51 - difference in y within the range of
56:53 - negative 5 to 5 which is now going to
56:55 - allow us to update the y velocity
56:57 - so now we can say ball
56:59 - the y val is equal to
57:02 - the y value okay
57:04 - now it turns out that we do the exact
57:05 - same thing here with a few minor changes
57:08 - inside of this function we just need to
57:11 - change left panel to be right paddle and
57:14 - it will give us the exact same result
57:16 - now there's there's a lot of repetitive
57:17 - code here uh theoretically we could
57:19 - maybe write a function to calculate this
57:21 - for us but for now i'm just going to put
57:23 - it inside of here because i think this
57:24 - is fine so let's run this now and see if
57:26 - it's working
57:28 - so if i look at this panel here it's
57:32 - actually bouncing in the incorrect
57:33 - direction okay i need to fix that yeah
57:34 - same with the other paddle so it's
57:35 - giving us the reverse of what it should
57:37 - be so i'll show you how we can fix that
57:39 - but it is balancing on an angle which is
57:41 - what we want so the reason it's giving
57:42 - us the reverse of what we want is
57:44 - essentially because we just need to
57:45 - multiply the y velocity by negative one
57:47 - i'm gonna say negative one by y velocity
57:50 - and negative one
57:52 - uh multiplied by y velocity how did i
57:54 - mess that up twice okay let's rewrite
57:56 - this negative 1 multiply by y velocity
57:59 - now it should give us in the other
58:00 - direction
58:01 - you can look at the math and you'll
58:02 - probably figure out pretty quickly why
58:04 - it's giving it to us but it's because
58:05 - we're taking the middle line subtracting
58:07 - from ball y if we do ball y and subtract
58:09 - by middle y then we don't need to do
58:10 - this but i think this makes more sense
58:12 - so that's why i'm doing it this way
58:14 - anyways let's try this
58:16 - let's see what we get
58:18 - okay now it's bouncing in the correct
58:19 - direction nice that's what we wanted
58:22 - notice when it hits the edge of the
58:23 - paddle it's going to bounce more down
58:25 - okay there we go we got it to bounce
58:27 - down nice
58:28 - awesome and it bounced off the ceiling
58:30 - completely fine so this is working as i
58:32 - anticipated
58:34 - now what i want to do is i want to make
58:36 - so when it goes off the screen we
58:37 - actually increment some type of score
58:39 - and display them
58:41 - okay so let's get started on that our
58:42 - collision is working properly as you
58:45 - notice the closer we got to the center
58:46 - the more the ball bounced off straight
58:48 - and the further away from the center the
58:50 - more we had an angle that's why i was
58:51 - doing all this math that's kind of how
58:53 - that works okay so now we want to
58:55 - implement some type of score so to do
58:57 - that we need two variables we're going
58:58 - to say left score and right score
59:00 - so the left score will be equal to zero
59:04 - and the right score
59:06 - will be equal to zero as well
59:07 - now to check the score we just need to
59:09 - see if the ball moves off the left or
59:11 - the right hand side of the screen
59:13 - so i'm going to say if the ball dot x
59:16 - is less than zero then this means that
59:19 - the right player scored because it came
59:21 - off the left-hand side of the screen so
59:23 - we're going to say right underscore
59:24 - score plus equals one
59:26 - l if the ball dot x
59:28 - is greater than
59:30 - and this will be
59:32 - the
59:34 - width of the screen
59:35 - and then we are going to say
59:38 - left score
59:39 - plus equals 1. now that we have both the
59:41 - scores we can pass those to the draw
59:43 - function
59:44 - so i can say left score like this
59:48 - and right score
59:49 - and then if i go to my draw function i
59:51 - can now take in the scores so we'll say
59:54 - left score
59:55 - right score and we want to draw them on
59:57 - the screen now to draw them on the
59:58 - screen i need something like a font
60:00 - right i need to actually draw text on
60:01 - the screen so to do that i need to write
60:03 - a font
60:04 - so to make a font you can do the
60:05 - following score underscore font is equal
60:08 - to pie game dot font dot sys font like
60:12 - that
60:13 - now this takes in the type of font which
60:15 - i always just use as comic sans and then
60:17 - the size of the font which i'm going to
60:19 - go with as 50. feel free to modify these
60:21 - values but this is the font you want and
60:23 - this is the size of the font and now you
60:24 - use this font object to actually render
60:27 - text that you put onto the screen so
60:29 - inside of my draw function here i'm
60:30 - going to use score font
60:32 - and i'm going to draw this
60:34 - at the top just so that the ball can be
60:37 - drawn over top of the score so whatever
60:39 - i draw first will be drawn first meaning
60:41 - that whatever i draw last is going to be
60:43 - on the very top so i want to draw the
60:44 - ball last that it will be over top of my
60:47 - score okay
60:48 - so the way that i do this is i say the
60:51 - left score
60:53 - text is equal to the score font and then
60:56 - i call dot render and i pass to this the
60:59 - text that i want to render which is
61:01 - going to be an f string containing
61:03 - the left score okay
61:06 - and then i'm going to pass one and i'm
61:08 - going to pass the color which is just
61:09 - gonna be white now one stands for
61:11 - anti-aliasing just always make this one
61:13 - okay so you do the text anti-aliasing
61:15 - the color and that's what we have now f
61:17 - strings allow you to embed expressions
61:19 - directly inside of a string so i'm just
61:21 - doing the score here directly inside of
61:23 - the string to avoid having to convert it
61:24 - to a string using the string function
61:26 - now for the right score it's going to be
61:28 - the exact same thing except right score
61:31 - okay so now this actually gives me a
61:32 - drawable object now that i have a
61:34 - drawable object i want to draw it on the
61:36 - screen so i'm going to say win.blit
61:39 - and i'm going to blit the left score
61:41 - text and then i need to pass an x and y
61:43 - location for it now i want the left
61:46 - score text to be exactly in the middle
61:48 - of the screen on the left half of the
61:50 - screen this is actually fairly easy to
61:52 - do but i'm going to say width divided by
61:54 - 4 not divided by 2 because i'm trying to
61:56 - put this on kind of the first quarter of
61:59 - the screen or the first half of the
62:00 - screen in the center
62:01 - so i'm going to say width over 4 and i'm
62:03 - going to subtract this from the left
62:05 - score text
62:08 - dot get underscore with
62:10 - over 2 okay and then for the height i'll
62:13 - just pick a height of like 20 pixels
62:15 - now we'll do the exact same thing for
62:16 - the right text and then i'll explain why
62:18 - i'm doing this calculation
62:20 - so this is going to be right score but
62:22 - for the right score i want this to be in
62:24 - the middle of the right hand side of the
62:26 - screen so i actually want it to be three
62:28 - quarters of the width of the screen
62:29 - right that's the middle of the right
62:31 - hand side of the screen and i'm going to
62:33 - subtract that from the right score text
62:36 - dot get width over 2. so for this i'm
62:38 - going to do width and i'm going to
62:40 - multiply this by 3
62:42 - over 4 okay so hopefully that makes
62:44 - sense i think i can actually just do it
62:45 - like this
62:46 - and say width multiplied by three over
62:48 - four and then minus the right squared i
62:51 - get underscore with over two
62:54 - that should work properly so to go to
62:55 - paint to quickly explain this again if
62:57 - we want this to be
62:59 - in like let's do this we have half the
63:01 - screen the middle of this half is right
63:03 - here okay so this is width over four
63:06 - that gives me this x position then i
63:08 - have my text now if i draw my text here
63:10 - it's going to go like that i don't want
63:12 - it to be like that i want it to be
63:13 - directly in the middle so i need to draw
63:14 - it like this
63:16 - so i'm going to take half the width of
63:17 - the text and subtract that from this
63:19 - position
63:20 - that gives me the top left-hand corner
63:21 - for where i need to draw now exact same
63:24 - thing over here this is 3 over 4 width
63:26 - right
63:27 - so i take that subtract it from half of
63:29 - the width of the text i'm drawing
63:31 - and i get it directly in the center of
63:33 - the screen okay
63:34 - and of course this is how you get the
63:35 - width of the text object just use get
63:37 - with
63:38 - perfect so that should now draw my score
63:40 - so let's see if this is going to work
63:42 - uh okay wait i think i'm in the python
63:44 - terminal here let's just quit that yes
63:46 - okay let's rerun
63:48 - and notice now that if we score
63:52 - this goes up and it's going to continue
63:53 - going up because i don't reset the ball
63:55 - so i need to reset the bulb you can see
63:57 - that is indeed wrong in the middle of
63:58 - the screen and it's changing based on
64:01 - what the number is right
64:02 - okay so how do we do this now so once
64:05 - the ball goes off the screen we need to
64:06 - reset the ball so i'm going to put a
64:08 - method on my ball just called reset
64:10 - so i'm going to say define reset
64:12 - and what i need to do in here is i need
64:14 - to reset the y velocity as well as the x
64:17 - velocity and then change the x and y
64:19 - position to be originally what it was
64:21 - set so i'm going to add some new values
64:23 - here
64:24 - i'm going to say this is equal to self
64:25 - dot
64:26 - original underscore x
64:29 - and this is equal to self dot original
64:31 - underscore y now let's make those lower
64:33 - cases
64:34 - so the idea here is when i initialize my
64:36 - ball i'm going to store what the
64:37 - original x and original y value was in a
64:40 - separate variable so that's how you do
64:41 - this here and then i'll change the x and
64:43 - y as i go through the program but i'm
64:46 - storing the original x and the original
64:47 - y so i can reset the x and y to be equal
64:50 - to the original x and original y when i
64:52 - reset so i'm going to say self.x is
64:54 - equal to self.original x
64:57 - okay and then we're going to say self.y
65:00 - is equal to self.original y
65:02 - then i'm going to reset the y velocity
65:04 - to be 0
65:05 - and i'm going to say the self.x velocity
65:08 - multiplied equal by negative 1. now the
65:10 - reason i'm doing this for the x velocity
65:12 - is if i go off the screen going left
65:14 - then i want the velocity of the ball to
65:17 - be hitting my opponent when the ball
65:19 - resets okay now same the other way
65:21 - around if i go up the screen going right
65:23 - then i want the ball to go left and hit
65:25 - my opponent's paddle first you could
65:27 - change this if you want by just making
65:29 - it
65:30 - equal to the max valve we're not even
65:32 - changing the xval you could do that
65:33 - that'd be fine
65:34 - but i'm just going to reverse the
65:35 - direction so if it just went off your
65:37 - screen then it will go to the other
65:39 - person
65:40 - hopefully that makes a little bit of
65:41 - sense that's what i'm doing with the x
65:43 - velocity here okay so that's reset for
65:45 - the ball
65:46 - so now uh if they score we want to reset
65:48 - so i'm going to say
65:50 - ball dot reset
65:53 - and ball dot reset okay easy enough
65:55 - let's try this
65:57 - and see what happens
65:58 - okay so let's score
66:01 - and now notice it comes off and it hits
66:02 - my opponent's paddle so that's what i'm
66:04 - trying to do just to give my other
66:05 - player some time to recover so if we
66:07 - score
66:08 - now it comes off on that side okay let's
66:10 - score on the other side and see if our
66:11 - score goes up
66:13 - okay score goes up and then it comes
66:15 - back to me alright now again you can
66:16 - change that if you want but that was
66:18 - kind of my idea here now one thing we
66:19 - could do is also reset the panels uh
66:22 - when we score that might not be a bad
66:24 - idea for now i'm not going to do that
66:25 - but i think i've showed you how you
66:27 - would go about doing that just implement
66:28 - the same logic on the paddles and then
66:30 - call reset on left paddle and right pal
66:33 - okay nice
66:34 - now that we have that the last thing i
66:36 - need to do is handle winning the game so
66:38 - if the left player wins i want to say
66:40 - you know left player wins if the right
66:41 - player wins i want to say right player
66:42 - wins so i need to first come up with a
66:44 - score that i want to end the game at so
66:46 - i'm going to say the winning underscore
66:48 - score is equal to 10
66:50 - and now we want to check if either
66:52 - player has a score of 10 after we
66:54 - increment the score so i'm going to go
66:55 - here and i'm going to say if
66:57 - the left score is greater than or equal
66:59 - to the winning score
67:01 - then we want to do something and i'll
67:03 - say l if the right score is greater than
67:05 - or equal to the winning score
67:07 - then we want to do something now the
67:09 - first thing that we want to do is we
67:10 - want to say ball dot reset
67:12 - okay and we want to say ball that reset
67:15 - here as well now i actually want to
67:16 - reset the panels if someone wins because
67:18 - we're just going to play a new game so
67:19 - let's actually implement the reset
67:21 - method on the paddles because i guess
67:22 - we're going to need that anyways
67:24 - so let's go to our paddles and in the
67:26 - same way that we did this for our ball
67:28 - we're going to say
67:29 - self dot original x
67:32 - and self.original y
67:34 - and then we'll just implement reset so
67:36 - define reset
67:38 - self self.x is equal to self
67:41 - dot original x
67:43 - and self.y
67:45 - is equal to self.original y okay paddle
67:47 - reset done
67:48 - very easy so if one player wins i want
67:51 - to say left underscore
67:54 - paddle dot reset
67:56 - right underscore paddle dot reset and
67:59 - same thing okay
68:00 - nice left paddle reset right paddle
68:02 - reset
68:03 - now the thing is this is pretty
68:04 - repetitive uh so we could try to wrap
68:06 - this in a way where we're only going to
68:07 - write this code once
68:09 - in fact let's actually do something i'm
68:11 - going to say
68:12 - reset
68:13 - actually i'm going to say 1
68:15 - is equal to false
68:17 - and then inside of here i'm going to say
68:20 - 1 equals true
68:22 - okay and one equals true
68:26 - and then i'm going to say if one
68:29 - do this so this is just handling all our
68:31 - resets in one place now so we just have
68:33 - a boolean telling us okay did we win or
68:34 - do we not well if someone won then we'll
68:36 - do the reset and then inside of the left
68:38 - score and right score if statement will
68:40 - handle specifically what to do with the
68:41 - left player one and specifically what to
68:43 - do if the right player won
68:44 - now actually what i want to do is just
68:46 - put some text on the screen show it for
68:48 - five seconds saying hey left player one
68:50 - right player one and then just
68:51 - immediately reset the game so to do that
68:53 - i'm just going to render some font so
68:54 - i'm going to say win text
68:57 - is equal to
68:59 - and actually yeah we could just do wind
69:00 - text we could say
69:03 - left player
69:05 - one exclamation point we can say when
69:07 - underscore text is equal to write player
69:12 - one so now that we have this in a
69:13 - variable what i can do inside of one is
69:16 - i can use that variable to render text
69:18 - depending on who actually won so i can
69:20 - say my win underscore
69:23 - yeah i'll say
69:25 - when
69:26 - actually let's just say text is equal to
69:29 - and then this is going to be the score
69:30 - font we could make a new font i'm just
69:32 - going to use the square font
69:33 - dot render we're going to render the win
69:36 - text 1 and then we're going to render
69:38 - this in white
69:39 - and we're going to blit this to the
69:40 - middle of the screen so i'm going to say
69:42 - win
69:43 - in all capitals
69:45 - dot blit
69:46 - and i'm going to blit the text
69:48 - and then i'm going to blit this at win
69:50 - or i'm going to put this at height
69:53 - no at with over 2
69:56 - minus the text
69:58 - dot get underscore width over 2
70:01 - and it's going to be at height over 2
70:02 - minus and then this is going to be the
70:04 - text dot get height
70:07 - over 2.
70:09 - okay so we're centering in the x
70:11 - position and the y position
70:14 - then i need to update the display i'm
70:16 - going to say pie game dot display dot
70:18 - update and i'm going to say pie game
70:21 - dot time dot delay
70:23 - 5 000 and 5 000 is going to be five
70:26 - seconds this is the number of
70:27 - milliseconds that i want to display the
70:29 - program by let me run through this
70:31 - because i know i went quickly we're
70:32 - saying the text is equal to score
70:33 - font.render so we're just rendering a
70:35 - drawable object the text we're rendering
70:37 - is whatever we put here just so we're
70:39 - not repeating a bunch of code and doing
70:40 - this in both places right i'm rendering
70:42 - this with anti-aliasing one the color
70:44 - white i'm then blitting this directly in
70:46 - the middle of the screen i've talked
70:47 - about how we do the middle calculation
70:49 - many times so i won't go through this
70:50 - again we're going to update the displace
70:52 - that it instantly shows then we're going
70:54 - to delay by five seconds we delay by
70:56 - five seconds then we reset everything
70:58 - now when we reset we also need to reset
71:00 - the score right so we're gonna say left
71:02 - score equals zero and right score equals
71:04 - zero
71:06 - and i think that's actually all we need
71:07 - to do for reset then the game will
71:08 - restart and everything will just work as
71:10 - expected and when you hit x of course
71:12 - the game's going to end
71:13 - all right so i think that's actually all
71:14 - good that should really wrap up the
71:17 - program
71:18 - let's run this though and give it a test
71:19 - and see if it's working
71:21 - so let's just see if we can score 10 so
71:23 - i'll just kind of let this run and then
71:25 - once it's done i'll be right back and
71:26 - confirm that it's working okay so we're
71:28 - at a score of nine let's see now if this
71:30 - is going to work okay it says write
71:32 - player one
71:33 - perfect and then it should restart the
71:35 - program let's see perfect restarts
71:37 - awesome okay so that is pong we have
71:40 - finished the game now
71:42 - as i promised hopefully you learned a
71:44 - lot in this video i just covered
71:46 - collision we covered some more advanced
71:48 - math
71:48 - drawing you know kind of separating the
71:50 - program out and how we have different
71:52 - functions handling different stuff
71:54 - uh yeah i think this is a fun program
71:56 - again great one for beginner or
71:57 - intermediate programmers and i am going
72:00 - to end the video here i will end off by
72:02 - saying that i do have a course
72:04 - programmingexpert.io you can check it
72:06 - out from the link in the description use
72:07 - discount code tim this course is
72:09 - designed for beginner or intermediate
72:11 - programmers looking to get better at
72:13 - programming this teaches programming
72:15 - fundamentals object-oriented programming
72:17 - advanced programming software
72:19 - engineering tools all kinds of great
72:20 - stuff check it out from the link in the
72:22 - description it's definitely a great
72:24 - resource especially if you guys want to
72:25 - support me with that said i will end the
72:27 - video here i hope you guys enjoyed if
72:29 - you did make sure they like subscribe to
72:31 - the channel and i will see you in
72:32 - another one
72:35 - [Music]
72:41 - you

Cleaned transcript:

hello everybody and welcome to another youtube video in today's video i'm going to be showing you how to make the famous game pong in python now this is a great project for beginner or intermediate programmers we are going to be using a module called pygame to accomplish this however you do not need to know pygame and the features we are going to use from it are very limited a lot of what we need to code out is the logic related to moving the ball around the screen having it bounce off the different paddles implementing score all of that type of stuff and you're gonna learn a lot in this project if you are not say an expert python programmer already with that said let me give you a quick demo and then we'll actually start writing some code so in front of me i actually have the finished code for this project whenever i do a tutorial i code it out first and then i reference that code while i'm teaching it to you guys and all of the code that we write in this video will be available in the description anyways let me just run this here and then we can have a look at the finished product okay here we are so this is pong we have two paddles uh you can move one paddle with w and s and the other panel you can move with the arrow keys and you also would be able to implement this as a single player game if you wanted to code like an ai for one of the paddles which would be pretty easy to do you can see this is kind of the basics we have an implementation of pong and then of course there's scoring at the top and i've just made it so that when you get to 10 then the game is over i'm not going to play through the entire thing but there you go that is the project and i'm gonna show you how to make it so with that said let's get into the code after a quick word from our sponsor thanks to backtrace for sponsoring this video backtrace provides application monitoring as well as error and crash reporting for games we've all been there excited to launch a brand new video game just to be tormented by crashes bugs and an overall bad user experience backtrace wants to help limit that by providing a platform that gives game developers the best error in crash reporting with the most complete and helpful information backtrace works with any platform any engine and at any scale and provides 24 7 monitoring so you can retain more players and get better ratings backtrace helps you fix issues fast by providing accurate call stacks regression detection querying and analytics and integration with microsoft teams discord slack and more you can get started with backtrace today and manage up to 25 000 monthly errors with one month retention and 10 gigabytes of storage completely for free check it out from the link in the description and thanks again to backtrace for sponsoring this video alright so let's go ahead and get started the first thing we need to do is just set up our environment and install the pi game package now again i want to reiterate here that you do not need to know pygame for this tutorial i will show you the limited features from it that we are going to use now if you want to learn more about pie game and make some more advanced games i have tons of tutorials on my channel so feel free to check those out you can probably just go on youtube and search game tech with tim and you'll see like 10 20 30 different videos all going through different pie game projects alright with that said let's get this set up so right now i'm in visual studio code this is the editor i'm going to use for this video feel free to use whatever you want you can use the default idle from python you can use sublime text really doesn't matter i'm just going to use vs code now i'm using python version 3.9 you can use pretty much any version as long as it's above 3.6 other than that what we need to do here is open up a terminal or a command prompt and install pygame now to do that we're going to type in the command pip install pi game like that now i already have this installed so i'm not going to run it but for you guys run this command it should install pygame now this command does not work sometimes if it doesn't work try the following python and then you're going to do hyphen m and then pip install pi game if that doesn't work try python 3 hyphen m pip install pygame and finally if that doesn't work try pip3 install pygame now if none of those commands work for you i have two videos one for mac and one for windows i will put them up on the screen and they show you how to install pygame for the respective operating systems okay so we now have pi game installed we can actually start writing some code now we want to create pong so the first thing we're going to do here is just import pi game we're going to set up what's known as a display so in pi game we have a main kind of window or display and that's where we draw everything to once we have the display then we'll implement things like the paddle the ball the scoring handling collision all of that type of stuff so i'm going to import pi game at the top of my program and now i'm going to set the width and the height for my window now you're going to notice here when i'm coding everything out that i'm putting everything in variables this way our game will be dynamic and you can simply change the value of a variable and everything will just work and adjust according to that so rather than using kind of hardcoded values we're going to put everything inside of variables use the variables for everything which will make it a little bit more complicated to code out however it's going to be really nice because if you want a bigger window or a smaller window or a larger paddle or whatever you just change the variable so for the width and the height i'm going to go with 700 and 500 for right now by the way this is a way that you can declare kind of two variables on the same line in python okay so now that i have that i'm going to set up my window so i'm going to put this in a variable called win in all capitals whenever i do something in all capitals i'm making a constant meaning that this variable is not going to change so to do this i'm going to say pygame dot display dot set underscore mode and then inside of here i'm going to put a tuple and i'm going to pass the width and the height and i guess at this point in time it's a good idea to mention that you should have some familiarity with python of course you don't need to be an expert you can be a beginner but you should know things like if statements while loops for loops because i'm not going to explain all of the very basics anyways to set up a window this is all we do pi game dot display dot set underscore mode and then we pass a tuple so just the brackets like this with width and height great now that we have our window we can make a caption for it so the caption is just going to be the title of the window and to do that we do pygame dot display dot set underscore caption and for the caption i am just going to call this punk okay so this will just be the title at the top of the window when it's actually loaded up so now that we have this what i want to do is implement what's known as the main loop of my program or the event loop of my program which is actually going to display the window and then draw something onto it so i'm going to define a function here i'm going to call this main and inside of this function i'm going to declare a few variables that we're going to use to actually kind of show the display and handle all of the events that are occurring so i'm going to make a variable here called run i'm going to make this equal to true and i'm going to do a while loop here and say wow run now whenever we have a pi game game i guess pi game program we need a main loop and the main loop is just a loop that's constantly going to be running that's handling everything related to our game so it's handling collision it's moving the ball it's allowing us to move the paddle so that's what this is right here so inside of this main loop i'm going to write the following for event in pygame.event.get now this will get all of the events like clicking your mouse clicking the keyboard closing the window that's what this loop is doing here looping through all of the different events that have occurred we're going to handle those events and then do something so in here the first event that i want to check is if we are actually quitting the window so i'm going to say if event.type is equal to pygame.quit with all capitals for quit here then i'm going to say run is equal to false and i'm going to break out of this for loop now what this is going to do is check if we hit the red button in the top right hand corner of our window so the close button if we hit that we want to stop the main loop so we actually end up closing the program and then we want to break now outside of my while loop here i'm going to say pie game dot quit and quitting is just going to quit pie game and close the program for us okay awesome now one thing i need to do here is right after i import pie game i need to initialize it so i'm going to say pie game dot init you should run this whenever you import pi game just directly below it it just initializes a few things that you need and we'll use this later or this will allow us to do some things later okay so here we go we have a basic program we have main we have run equals true we have our while loop here which is going to be the main event loop inside of this we're checking all of the different events and then what i'm going to do here is call the main function so i'm going to say if name is equal to main then call main now what this does is ensure that we are running this module to call this function so essentially if we were to import this module so the solution.pi file then what would happen is this would not run because the name of this would not be made now i'm not going to explain exactly how this works but it really just makes sure that you're only going to run this main function if you directly run this python file not if this python file was imported from another project or from another font okay hopefully that makes sense but when we do this we should see a pi game window pop up there won't be anything on the window it'll just be a black screen but that's the thing we need to start out with okay so there we go we can see it says pong we have our pie game window and when we click the x it should quit great there we go it quits okay so that's our starting thing now the next thing i'm going to do is implement something known as a clock now a clock is going to regulate the frame rate of our game so it's going to run at the same pace on every single computer so i'm going to say clock is equal to pi game.time.clock and then inside of here i'm going to say clock.tick i'm going to pass this in all capital fps variable which i'm going to define up here as 60. now the fps is the frames per second and when you put this inside of a while loop it makes sure that you cannot run faster than 60 frames per second or 60 ticks per second which means that this while loop here is going to run a maximum of 60 times per second so if you're on a really fast computer it's not going to be running quicker than if you were on a slow computer hopefully that makes sense but that's why we want the clock it just regulates the speed of this while loop now it's worth noting that if you're on a very very slow computer this while loop may run slower than the fps that you're putting here this is simply limiting the amount of times it can run it's not making it run 60 times per second so on almost all modern computers it will run at least 60 frames per second or i guess exactly 60 frames per second but on a very slow computer you may run under this and so you may see some lag in your game if it's a really slow computer just wanted to note that because some people have mentioned that in my previous pie game tutorials okay so now we have our clock and the next thing i want to do is implement something to actually draw some stuff onto the screen so i like to handle all of my drawing in a separate function so it's really easy to see where i'm drawing everything so i'm going to make a new function here and i'm just going to call this draw this is going to take in one variable which is going to be the window that we want to draw on now inside of here all i'm going to do for now is fill the window with a specific color just to show you how that works so i'm going to say win.fill and then here i have to pass an rgb value now rgb is red green blue now i could just pass the rgb value directly in here but i like to define all of my colors or rgb values as variables so i'm going to make one called white and this is going to be equal to 255 255 255 and then i'm going to make one called black and this will be equal to zero zero zero okay so those are my two colors up here and what do i want to fill the window with well we are going to fill it with black but for now i'll just put white so we can actually see what's showing up now whenever we do some type of drawing operation in pie game we need to update the display manually and then it will actually do all of the drawing so when i do something like a wind dot fill this is filling the entire window with white so it'll change the background color essentially to white but for this to actually happen i need to say pygame dot display not clear but dot update now this will update the display and perform any of the drawing operations that we've done so maybe i've done a few other drawing operations so i'm going to do all of those and then update the display and updating the display is kind of the most intensive part so doing the actual drawing does not take very long but updating the display where it applies all of the drawing that's going to take the longest so you only want to do this after you've done all of your drawing okay i'll continue to explain that in a second but for now inside of my while loop i want to call this draw function so every single frame we're continually redrawing the window so let's call draw here and let's pass to it the all capital win which is going to be the window here that we want to draw on okay hopefully that makes sense let's run the program now and see if we're getting a white screen okay so notice we're getting a white background perfect that is what we wanted because we are filling the window with white now i'm just going to change this to black because we actually want a black background i just want to show you how wind.fill works so now that we've done that what i'd like to do is implement the paddles so i want to add a paddle on the left side and a paddle on the right side and then i want to see the paddles actually be able to move when we hit the different keys on the keyboard so i'm going to make a class here i'm going to call this paddle and the reason why we're going to do this is because we're going to have multiple panels and we want their movement and different properties to be stored as an object so we don't have to kind of repetitively code this up now if you're unfamiliar with object oriented programming i'll explain kind of the basics of what i'm doing here but i do have a ton of videos on my channel explaining objectoriented programming in python okay so for the panel i'm going to say define a knit now this is essentially what's going to be called when we initialize a paddle or create a new paddle and what i want to take in for the paddle is an x y width and height now our paddle is just going to be a rectangle one will be on the left hand side one will be on the right hand side and they're going to have different x and y coordinates on the screen and we're going to change the y coordinate based on where we're moving right so if the user presses the up arrow key we want to move it up if they press the down arrow key we want to move it down so i'm going to say self.x is equal to x self.y is equal to y self.width is equal to width and self.height is equal to height now these are the attributes or properties of this paddle which means that each paddle i create will have different x and y and different width and height corresponding to what we passed here when we created the path so there we go we have our initialization for the panels now i want to write a method on the paddles which is essentially a function you can call on them called draw now draw is going to do exactly what it says it's just going to draw the paddle now our paddle is going to be a rectangle it's going to have the color of white so let's define a class attribute here called color and let's just make this equal to white because this will be a constant it's not going to change so inside of draw i want to use the window to actually draw my paddle on the screen so i'm going to say actually uh let's make sure the indentation is correct pie game dot draw and then not dot circle we want dot rectangle like that and i keep messing up my indentations let's fix that and when i'm drawing a rectangle with python well this is how you do it pigeon.draw.rectangle and i need to pass to it where i want to draw it which is going to be the window right and then i need to pass a color well the color is going to be self dot color that's going to reference this right here which is equal to white and then i'm going to pass a rectangle now a rectangle is an x y width and height so in pi game when we draw something we draw from the top left hand corner so in pi game 0 0 is the top left hand corner okay of the screen so if i draw it something like 10 10 that's going to be 10 pixels sorry right and then 10 pixels down and then if we're drawing something like a rectangle for example the x y that we're drawing the rectangle at is the top lefthand corner of the rectangle and then the width and height is well the width and height of the rectangle based on the top left hand corner so you'll see what i mean here when i draw this but i'm going to do self.x self.y self.width and self.height that's all i need to draw the rectangle okay so now we have our paddle so let's create two paddles and let's draw them so i'm going to go here and i'm going to say my left paddle is equal to a paddle and i need to pass this in x y width and height so for the x i'm just going to make this 10. so it'll be 10 pixels off the left hand side border of the screen then we're going to pass a uh a y the y i want to be directly in the middle of the screen so we're going to say height which is the height of our window we're going to integer divide this by 2 just to get a whole number and we're going to subtract this by whatever the height of our rectangle is going to be or the height of our pattern so i'm going to make a variable up here and i'm going to say paddle yeah paddle underscore height and paddle underscore width and this is going to be equal to just let me look at my screen here uh 120 and i realize here that i probably want to go with first and then height second just to stay consistent with width and height up there so i'm going to say paddle width paddle height and we're going to make this 20 and 100 so that's the the values for our width and our height okay so we're going to use that now here and we're going to say paddle height divided by two now to explain to you why we want this let's just quickly open up paint and i can shoot so let's zoom in a bit let's say this is our window okay now as i said here is gonna be zero zero now i'm drawing with my mouse so just excuse me but let's write this 0 0. now our height is going to be all the way down here so height is h this will be h okay so if our height is something like i guess we have 500 then this coordinate right here would be 0 comma 500. so the middle of this is going to be height over 2 right so we have h over 2. but the issue is if i start drawing my rectangle here i'm going to draw it like this because the top left hand corner is where i start drawing it from so what i need to do is draw the top left hand corner so that my rectangle will be perfectly center so this will be the center of the rectangle hopefully that makes a bit of sense but to find this position here where we want to start drawing the rectangle from we need to know the height of the rectangle because if the height of the rectangle is say 100 then what i'm going to do is take whatever the height of my window is divided by 2 and i'm going to subtract half of this height which is going to be 50 and that will tell me where i need to start drawing my rectangle so it's perfectly center in the screen okay now hopefully again that makes a bit of sense we're going to take the height over 2 we're going to subtract the height of our rectangle over 2 and then that tells us the correct height to draw a rectangle at such that it's perfectly in the middle of the screen okay so let's close this here and let's now implement that so this is going to be height over two minus paddle height over two okay i guess we already have that and then what we want for the width and the height is just going to be the paddle width and the paddle height now let's copy this because it's going to be very similar for our right paddle so here i'm going to say right panel except all i'm going to change is where i want the x to be because this is going to be different and i'm going to say this is going to be the width and then this is going to be subtracted by 10 subtracted by and then this is going to be the panel width like that now again the reason for this is that i actually have to go and paint to explain this if we want our paddle to be say 10 pixels off the right border okay then what i need to do is make the x coordinate be here right so let's say we want this to be 10 kind of the gap between the right border then i need to account for the width of this rectangle as well as kind of the padding i want between the right border so what i'm doing is i'm taking whatever the width of the screen is which is going to be right here okay so this would be width and then 0 this position so i'm taking the width i'm subtracting from the width this 10 which is the padding that i want and then i'm subtracting the width of the rectangle and that's telling me the exact x coordinate that i want to put this paddle at and then the height is going to be the same thing that's why i've left it the same okay hopefully that makes sense that is what we have for the right panel and now what i want to do is draw the two paddles on the screen so to do this i'm going to pass to my draw function a list that contains both my paddles so i'm going to say left paddle and right paddle now i'm going to go to draw i'm going to take in paddles like that and i'm going to use a for loop to draw both of the panels so i'm just going to say 4 paddle and paddles paddle.draw and then we'll pass to this the window now why am i getting an error here indentation okay let's move that over by one and now we're good all right so the reason i'm doing a list is just because i'm going to do the same thing to draw both paddles so we can just do a for loop and draw both of them and maybe some sometime down the future we add a third paddle a fourth paddle now we just pass it in the list and it will draw all of them for us okay so let's now see if our paddles are showing up let's draw this and we got an issue pie game.draw has no attribute rectangle uh am i spelling rectangle incorrectly let's see pygame.draw.rectangle um ah my apologies guys this needs to be wrecked not rectangle uh that's actually how you draw the rectangle is with rect not rectified okay let's try this let's run and there we go now we have our two paddles they are perfectly centered in the screen and they're at the correct x coordinates now we want to move the panels so let's figure out how we can do that okay so to move the paddles we need to change their y coordinate right move it up and move it down now we need a velocity to move the paddles at so essentially how much do we go up or down when the user hits a specific key so i'm going to add a velocity here on my paddle and make this equal to 4. now notice anything that's going to apply to all of my paddles i'm putting as a class attribute meaning i'm defining it here rather than inside of the initialization or inside of a method so i'm doing bell equals four now i'm going to implement a method on my panel and i'm going to say define move self and i'm going to say up is equal to true now what we're going to do here is call this method on the paddle and if i pass up equals true we're going to move the paddle up if i pass up equals false we're going to move the paddle down by the velocity so i'm going to do here say self.y and then this is going to be plus equals and then the dot velocity but that's only going to be the case if up is equal to false so i'm going to say if up then we'll do something otherwise do this let me just copy this and then i will explain what's going on here okay so if self.y then minus equals self. so if we are going up and we want to move the paddle up now to move the paddle up we need to subtract from the y coordinate whatever the velocity is right so we'll do that here otherwise though we need to move the paddle down so we'll say self.y plus equals whatever the velocity is so as the y value increases we're going down as the y value decreases we're going up so this should now move the paddle up and down okay so now that we have this we need to actually call this but we're only going to call this when we are pressing the up or down arrow key now to do this we're going to have to get the keys that the user is pressing and then allow the paddle to move when they press a specific key now for this game i'm making a two player so we're gonna have w and s allowing the left paddle to move and then we're gonna have the arrow keys allowing the right paddle to move now again you could implement an ai for pong maybe we'll do a video where we'll implement ai for pong let me know if you want a specific video on that but for now we're just going to do it with two players so i'm going to say that keys is equal to pygame.key.get underscore pressed and this is going to give us a list containing all of the different keys that have been pressed specifically it's actually going to give us i believe a map it's either a map or a list either way i'll show you how we can access and check if a key was pressed so i'm saying keys equals pi game dot key dot get underscore pressed now what i want to do is make a separate function that will handle moving the paddles for me because it's going to be a good amount of logic and i don't want it to kind of clog up my main loop here so i'm going to call a function this will be handle underscore paddle underscore movement like that we're going to need to pass this the keys and we're also going to pass to it the left paddle and the right panel so we're able to move them okay so let's make a function now let's say define handle paddle movement let's take in our keys and let's take in our left paddle and our right paddle okay so inside of here we're going to check if the user is pressing the w or s key and move the left paddle and then the arrow keys and the right panel so i'm going to say if keys and then this is going to be pie game dot and this is a capital k underscore w notice this is a lowercase w so if we are pressing the w key then we want to move the left paddle up so we're going to say leftpaddle.move up is equal to trip okay and then we'll say if keys and this will be pie game dot k underscore s then we want to do the same thing we want to move it down so left paddle dot move and then not down equals true but this is going to be up is equal to false okay this is now handling the movement of our left paddle now let's copy this and do the same for the right paddle except we're going to do this with the arrow keys so just to note here when you want to check a specific key if it's a letter key or yeah i guess a letter key then you're just going to do a lowercase of whatever the letter is so a q w whatever if it's something like the shift key or the enter key it's usually in all uppercases so for the arrow keys we're going to say key underscore up or k underscore up and for the down arrow key it's going to be k underscored down in all capitals now all we have to do here is change this to be the right paddle and this one to be the right paddle as well okay so now this should actually be working handling our paddle movement so let's see if this is working by running our code okay so when i run my code now i can move my panels but notice that my paddles actually go off the screen so now we need to implement something so we're not going to be able to move the paddle off the screen so to do that i just need to check to see that if when we move the paddle it's going to go off the screen or not if it's going to go off the screen when we move it then we're not going to let the user move it right so what i'm going to do here is say we will allow us to move the paddle if we are going up so if we're hitting the w key and the left paddle dot y and this is going to be minus the left paddle dot velocity is greater than or equal to zero okay so if left pal dot y minus the velocity because that's how much we're going to subtract from it when we move it is greater than or equal to zero which is the top of the screen then we'll let it move however if it's not going to be greater than or equal to zero so it's going to go off the screen even by a slight amount then we're not going to let you move it okay now let's do the same thing down here except we're going to have to check if you're going to hit the bottom of the screen so we're going to say and the left paddle dot y this time we're going to add the velocity right so plus the left paddle.val we also need to add though the paddle height so i'm going to say plus left paddle dot and this is going to be height like this and we're going to check if this is going to be less than or equal to the height of the screen so the reason we need this is because the y that we're referencing is the top left hand corner of our paddle so we're moving up it's fine to check that because that's the top of the paddle but the bottom of the paddle is the left paddle dot y plus whatever the height of the paddle is right because that's going to give us where the bottom of the paddle actually is on the screen if we didn't have this then what would happen is we'd be able to move it all the way down until it was just barely off the screen because that's when the y coordinate is at the very bottom so we need to add the height to make sure that we're not going to look like we're moving off the screen right and now we're checking if it's less than or equal to the height not greater than right because if it is less than the height then that's fine we can continue to move otherwise it's off the screen okay so that's what we're doing now we're just going to check the exact same thing here except for the right paddle for these ones so i'm just going to change this to be the right paddle and the right paddle and then same thing with moving down so let's copy this and put it here and now let's go right paddle right paddle and right pad okay perfect so now this should make it so we cannot move off the screen because we're only going to move if we are not going to move off the screen okay so let's run this and see what we get and notice now that it stops at the very bottom of the screen and stops at the top of the screen let's just check the opposite and it is all good our paddles now do not move off the screen nice now that we've done that what i would like to do is draw a line in the middle of the screen just because i think that looks nice i want to draw a dashed line or a dotted line and i will show you how we do that so let's go inside of our draw function just need to reference my cheat sheet here because this is a little bit complicated to do so i'm going to say 4i in range we're going to start at 10 pixels we're going to draw up to the height and the increment for our for loop is going to be height over 20. now the idea here is that i want to draw a bunch of rectangles to represent kind of a dashed or dotted line now i want the space between the different rectangles to be the same and i want the rectangle i guess height to be identical for every single rectangle so what i want to do is draw one rectangle not draw a rectangle draw another rectangle not draw a rectangle and kind of have a gap between each of them so that's what this for loop is going to do and you'll see how i implement that so i'm going to say if i mod 2 is equal to 1 then continue now essentially what this means is that if i is an even number then i'm going to continue so i'm going to skip this iteration and i'm not going to draw a rectangle otherwise though i will draw a rectangle and the way i'm going to draw it is the following i'm going to say pygame.draw.rect i'm going to draw this on my window the color is just going to be white so we'll draw white and then the x is going to be in the middle of the screen so to do this in the middle of the screen we're going to say width over 2 but we need to subtract half of the width of the rectangle for the same reason we did that with the height when we were initializing the y of the paddle so now if we're looking at it horizontally right if we want to draw it right in the middle of the screen then the x coordinate can't be directly in the middle it needs to be whatever half the width of the rectangle is to the left of the middle so that it looks like it's directly in the middle so i'm going to say width over 2 minus 5 because the width of my rectangle here i'm going to make 10. actually let's see if that's what we're doing i think yeah that's fine okay now for the y coordinate i'm going to make this i now the reason i'm making it i is because i'm saying i want to have 20 rectangles on the screen right so when i say height over 20 that means that we're going to do this for loop 20 times because we're going up to height and we're starting at 10. so we'll do it either 20 or 19 times either way though the reason i'm doing i is because we're going to be essentially picking what y value to draw at based on whatever the for loop is currently at so we're going to start at 10 then we're going to skip one then we're going to be at whatever height over 20 times 2 plus 10 is because that's how much we're incrementing the for loop by every single time and so this will make it so our rectangles are evenly spaced out because that's how much we're incrementing the i by every single time so i'm using i for my height so width over 2 minus 5 i then the width of my rectangle is going to be 10. notice this value here is half of the width right and then the height of my rectangle is going to be height over 20 because that's how much i'm incrementing the for loop by so i need to make sure that's my height so we're getting kind of the correct spacing for our rectangles i understand this a bit complicated this is how you do a dashed line there is some other ways to do it but they take up a lot more code so i'm going to do it in this way okay so let's just see if this is going to work now before we go any further let's draw this and notice now we get a nice dashed line or dotted line through the middle of the screen uh the top and bottom spacing might be slightly off but for me this looks fine now you could make this a solid line if you want that would be a lot easier but we're gonna go with dash for now okay so i think that is all good now what i want to do is implement the ball so we want a ball that's going to be moving on the screen now let's just go into paint here and quickly discuss kind of some theory behind this because this is not trivial to do so we want a ball and this ball needs to move in two directions right it's going to be moving in the y direction and in the x direction now it's also going to collide with paddles we'll talk about the collision in a second but for now we want the the ball to move around the screen and to be able to collide with something like the ceiling now to move it as i was saying we need a velocity in the y direction and a velocity in the x direction now we'll start by moving the ball just in the x direction and based on where it hits the paddle we'll change its y velocity but just understand that we have kind of two components of movement in the x direction and in the y direction and we're going to have to calculate what those velocities are and then move the ball by that velocity every single frame so hopefully that makes a little bit of sense but that's kind of the idea here behind the ball and i just wanted to explain that because that's what i'm about to start coding out so just like we had a class for our paddle i'm going to do one for the ball we don't necessarily need one but it's just going to make things a little bit simpler so i'm going to say class ball i'm going to say define underscore underscore init we're going to take in a self x y and a radius okay we're going to do a circular ball i know some pong games do a rectangular i guess you can't really call it ball but rectangular object moving around we're going to go with the circular one so over here i'm going to say self.x equals x self.y equals y self dot radius is going to be equal to radius and then self dot x underscore vel is going to be equal to vel it's actually going to be equal to something called maxwell which i will implement in a second and we're going to say self.y underscore vel is equal to zero i'm going to implement my max velocity so i'm going to say max velocity is equal to and we'll go with 5. now the idea here is that i want to initialize the x velocity as whatever the maximum velocity is in the positive direction for our velocity we can have positive or negative and that will change the direction that we're moving right but i'm going to make this positive meaning it's going to be going actually to the right first i believe yeah it should be going to the right anyways i'm initializing the x velocity as the maximum velocity meaning that we're going to be moving to the right at the maximum velocity when the program starts then once it hits the paddle we will simply reverse the x velocity and calculate the y velocity based on where it hit the paddle at but the maximum velocity is telling us what the maximum possible velocity is in either direction so we'll always be moving at the max velocity in the x direction but the y direction velocity is going to change depending on where we hit the paddle because we're going to have to change the angle at which we want to move the ball okay again i know it's getting a little bit confusing but hopefully that makes a tiny bit of sense now we're going to implement a method called draw so very similar to our paddles we're just going to say self win and we're going to go in here and say uh this will be pygame dot draw dot and then circle we're gonna pass our window we're gonna have a color which we'll define up here as just white again just doing this so we can very easily change the color and then we want a radius so we're going to pass the window drawn the color the radius and the x and y position now i'm actually not sure if this is correct i think we have to do the x and y before we do the radius so i'm going to do self.x self.y make sure that's in a tuple and then the radius comes after and i think that is correct perfect okay so now we have draw we have initialization and let's implement move while we're at it because this is pretty straightforward so we're going to say define move and all we do to move is we move the x by the x velocity so self.underscore x self.x underscore value sorry and then self.y plus equals the self.y underscore velocity okay so that's how we move the ball uh this is our draw i think that is all good for now and the reason we can do plus equals is because if the velocity is negative then that will be equal to minus equals right it'll just move it in the other direction okay so now we have our ball we need to initialize our ball so let's go in where we have our left and right paddle and let's make the ball and say the ball is equal to ball now what's nice about the ball is that the x and y position forward is the center of the ball meaning that if we want to put it in the center of the screen we can just actually calculate the direct middle and then place it there rather than having to do kind of the calculations here we did by uh subtracting you know half the width and that type of stuff so for the x and y position of my ball i'm going to put it directly in the middle of the screen so i'm going to say width over 2 and then i'm going to say height over over 2. now the reason i'm doing two division signs here is because this is integer division it's just going to give me the rounded division because i can't draw at a floating point position all right so we're going to go height over over 2. and then lastly here for the radius we're going to make a variable we're going to call this ball underscore radius and for now we'll go with a radius of something like 7 and we can of course change that later on if we want so let's now pass the ball underscore radius now we want to draw the ball so we're going to have to pass that to our draw function so i'll pass the ball we're going to take in the ball here in draw and it's very easy to draw this because of the method we have we're just going to say ball.draw and draw it on our window great so now we have our ball this is the class and i think that's actually all we need for right now so let's run the program and see what we're getting and we got an issue let's see what the error is it says uh maxvel is not defined my apologies we need to add a self.max val here rather than just max val because i have to reference it from the class okay let's try this now and we got another issue it says bolt object has no attribute maxwell ah we need an actual l here or an uppercase l rather than a lowercase one let's see if we get any other errors okay there we go so the ball is in the middle of the screen is not moving right now because we're not calling the move function or the move method sorry but once we call that we'll see that the ball actually starts moving on the screen then we need to handle collision so let's move the ball to do that we're going to go to under actually where do i want to move the ball yeah it's going to do it right here i'm just going to call ball.move inside of my main loop here and now we're going to be moving the ball every frame by whatever its velocity is okay so let's run this now and let's see and notice the ball is moving to the right of course it's going to go off the screen because we're not handling any collision let's run it one more time in case you missed it you can see the ball starts moving to the right now if we change the y velocity would move on an angle but for now we're just moving it in the x direction so that's what's happened okay so now that we've done that we need to start handling collision now i will admit this is not the easiest thing in the world to do but of course i'm going to try my best to explain it to you and you will have you know collision handled by the time this is done so let's go into paint again and let's just talk about how we're going to handle collision first of all with like the ceiling and then we'll talk about the panels so we have this right here okay now let's say we have a ball and let's say it's trajectory is here okay so it's kind of moving up in this direction and this direction and the average of the components makes it so the angle it's moving at is here so if the ball hits here and it's going in this direction with the y all we actually need to do to make it bounce off of the wall is we need to kind of bounce it off on the exact same angle that it hit the wall at right so if you have like a wall like this and you hit like this you go here right pretty straightforward if you hit coming pretty straight on you're going to come out going pretty straight on as well if you hit at a huge angle you're going to come off at a huge ink so that's how the collision is going to work works either in the x or y direction now when we're talking about the ceiling all we actually need to do to implement this is we just need to change the direction of the y velocity so here this y velocity would actually be negative because we're going upwards so to make it bounce off all we do is swap whatever the current y velocity is to the positive direction and then that moves us down hopefully that makes sense that's all you need to do to actually handle collision with the ceiling which we'll do shortly now that's the easy part collision with the paddle is a little bit more difficult because we're not going to do this in kind of a physics real way so let's say we have our two paddles here now in pong the way that the collision works at least my understanding of the way that the collision works is you're going to bounce the ball off of the paddle based on where the ball hits the paddle not based on the angle that it's coming in at now if the ball was coming at an angle like this if we're talking about real physics we should just bounce it off at the exact same angle now the reason why we don't want to implement it like that is because that means our games are always going to be the exact same assuming you can line up the paddle you never can change the direction of the ball whatever direction it hits the paddle out is the direction it's going to come off at so we need a way to actually manipulate that so we can have a game that's playable so the way that i'm going to do this is i'm going to figure out how to move the paddle based on its direction from the center of the paddle or sorry not move the paddle how to move the ball based on its kind of displacement or distance from the center of the pad so if the ball hits here then i want to bounce it off on an angle like this okay if the ball hits here then i want to bounce off on an angle like this if the ball hits in the direct center of the paddle then i want to bounce it like that so the further away from the center it is the higher the angle is i'm going to bounce it off on so we're going to you know have something along the lines of this and we'll calculate this using a custom function that will show you how to write but that's the idea here with the ball so that's going to be more complicated to do but when the ball hits like here we're going to bounce it off pretty much in the center because this is almost directly in the middle right so we'll bounce it a tiny bit higher than that but that's kind of how we're going to do the collision with the paddles so let's say we have a paddle here okay this is the middle of our paddle this is going to be the xy coordinate and then we have a ball and this is the center of the ball so let's just go through some of the math here so we first need to figure out where the middle of this paddle is so we can calculate the displacement between this and this okay so to do that we're going to take the y coordinate which is right here so let's just call this y1 let's put a y1 here and we're going to add to this half of the height of the paddle so h over 2. okay so we're going to add h over 2. again i'm using my mouse here this is pretty hard but this is what's going to give us the middle so we can say this here is equal to m okay so this is m the middle now once we have m all we're going to do is subtract m from the y coordinate of our ball so we can call this y2 okay so we're going to take m and we're going to subtract y2 now if this gives us a negative value that means we are above m if it gives us a positive value that means we are below it so once we have the displacement so we can call this d we need to figure out what the velocity should be in the y direction based on this displacement that's where it gets a little bit more challenging and i'm going to dive into that math in a second but for now we understand how to calculate the displacement once we know the displacement we just need to make it so that when you're at the maximum possible displacement uh in the you know up direction or the down direction you're going to move at the maximum possible velocity whereas when you're at say a zero displacement you move at a zero velocity in the y direction okay hopefully i'm not confusing you guys too much i just wanted to give a quick run down because now we're going to implement the collision which as i've said is fairly complicated so let's do a function here and we're going to say handle underscore collision now to handle the collision we need the ball the left paddle and the right pad okay now what's nice is that we only need to adjust the y velocity of the ball really that's the only thing we're going to do here but we need to handle it on the left paddle right paddle and the ceiling so let's start with the ceiling because that's the easiest so we're going to say if the ball dot x are actually not x we only care about the y because we're going up and down right we don't care about the left right collision right now so we're going to say if the ball dot y plus the ball dot radius is greater than or equal to the height of the window then we're just going to say ball dot y underscore val multiplied equal by negative 1. so simply going to reverse the direction now we're going to say l if the ball dot y plus and actually minus sorry minus the ball dot radius is less than or equal to zero then ball dot y underscore val this is going to be multiplied equal by negative one now that's actually all we need to handle the collision with the ceiling so let's just look at this one here this is saying if we're going to hit the bottom of the ceiling right so the height we're checking the ball dot y which is the center of the ball plus the ball dot radius it's important you add the radius if you don't do that it's only going to check for collision with the center of the ball we don't want that we want it with like the edge of the ball which is the radius right so if that's the case then we just uh what is it change the direction reverse the direction now we do the exact same thing in the other direction except this time we need to subtract the ball dot radius not at it because we're checking up not down okay there you go we're now handling collision with the ceilings now after we check that we need to check if you're hitting the left panel or the right panel let's start with the left paddle so we're going to first check the direction of the ball because we're only going to see if we're hitting the left paddle if we're moving left right so if the x velocity is negative that means we're moving left then we'll check if we're colliding with the left paddle otherwise there's really no point in doing that so i'm going to say if the ball dot and it's going to be x underscore velocity is less than 0 then i'm going to check if we're colliding with the left pal otherwise i'm going to check the right paddle so i'm just going to add a comment so to check if the ball is colliding with the paddle we need to check both the x and y coordinate and check if the y coordinate is within the range of where the paddle is on the screen so essentially if the y value of the ball is greater than the y value of the paddle but less than the y value of the paddle plus the height of the paddle that's going to tell us if it's where the paddle is on the screen essentially then once we check that so if the y coordinates are correct if it's in the right range we need to check if the x coordinate is the same as the edge of the pattern that's essentially what we want to look at so i'm going to say if the ball dot y we're going to say is greater than or equal to the panel dot y because remember this is the top left hand corner of the paddle and the ball dot y is this is going to be less than or equal to the paddle dot y plus the paddle dot height so that's the first thing that we want to check now after we check that we want to check if the x coordinates are correct now i could do this on the same line but just so it doesn't get too messy i'm going to do another if statement and i'm going to say if the ball dot x and this is going to be i need to think about this for a second minus the ball dot radius and we're going to check if this is less than or equal to the paddle dot x plus the paddle dot width okay let me check my cheat sheet to make sure i did this correct uh i think i did looks good to me okay so the reason we're doing this let's go to paint quickly is because we're checking the left paddle so this is the paddle right here we know the top left hand corner xy is here and we know the edge of the paddle in terms of the x coordinate is going to be the x plus whatever the width is so that's what we want to check now we have our ball this is the center of the ball so we need to account for the radius which is what we're doing so we're taking the ball.x we're subtracting the radius which gives us the edge of the ball and we're checking if that edge is less than or equal to this edge right here if it is we're just going to change the direction of the x and that will then change how we move the ball off of the pad okay so let's try this out let's go here and for now all we're going to do is change the x velocity we'll deal with the y velocity later so i'm going to say ball dot x underscore val multiplied equal by negative one okay it's just going to change the direction so now we move from the left to the right okay so that is handling the collision for the left paddle now handling for the right paddle is a little bit different so we're going to say if the ball dot y we actually can copy this for the y so we'll do this except we're going to check paddle uh i keep saying paddle sorry this needs to be the left underscore paddle this needs to be the left underscore paddle this needs to be the left underscore paddle my apologies guys fix that so this will be left underscore paddle and then for here this makes it actually easier we just make this right paddle okay so right pedal and right paddle okay so now we've checked the y for the right paddle now we need to check the x the x is a little bit different we're going to say ball dot x plus ball dot radius and we're going to check if this is greater than or equal to the right paddle dot x okay and if it is we're going to say ball dot x underscore val multiplied equal by negative one okay so the reason why this is a little bit different for the right paddle is because when we're moving to the right we're going to be checking the left edge of the right panel and that is represented simply by the x coordinate of the right paddle because that's the top left hand corner whereas when we're moving to the left we're checking the right edge of the left paddle which means we had to add the width now the reason we're adding the radius is because we're moving to the right so the radius is going to be to the right side that we're checking rather than the left whereas here we were subtracting the radius hopefully that makes a little bit of sense but i think this is going to be good to allow us to move the ball left and right on the paddles let's check this out and then we'll deal with the y which is a bit harder okay so let's see this now it should bounce off the paddles okay so it didn't bounce off the paddle which means i made a mistake here let me check the mistake and i'll be right back all right so i found the error this is kind of a silly one i'm not calling this function so i write this wrote this function but i didn't actually call it so of course the collision is not going to be handled so we need to call this down so after we move the ball then we'll handle the collision so we'll say handle and then this will be collision like that and we're going to pass ball left paddle and right paddle okay fingers crossed hopefully this should work now let's run this and let's see if it bounces off there we go so it bounces off and notice that it doesn't really matter where i have the paddle it's just going to bounce off at the same direction because that's all we're doing right now now if i move the paddle it should just go off the screen and it does because while it's not going to collide with the wall we haven't implemented that great so there we go that is now dealing with the collision now we want to deal with the collision in the y direction again a little bit more complicated but we need to calculate the displacement between the ball and the center of the paddle and then determine the angle that we want to bounce it off on now we don't actually need to use trigonometry because of the way that i've implemented this but you're going to see the math is not not super straightforward so the first thing we need to do is calculate the middle y of the panel so we're going to say middle underscore y is equal to and then this is going to be the in this case it's the left panel so the left pal dot y and then this will be plus the left paddle dot height divided by two okay that's fine now the next thing we want to do is calculate the difference in y between the ball and the middle of the y paddle or the middle of the left paddle circle so i'm going to say difference in y is equal to and this will be the middle y subtracted by the ball dot y now that we've done that we need to figure out essentially how much we need to divide this value by to determine what the velocity should be so let's go back to paint here and let's deal with some more math so we have a max velocity so let's call this v okay the max velocity is equal to i believe we had 5 okay that was a rough that's a better 5. so let's just call this mx for max velocity is equal to 5. now what we need to do is make it so when we're at the maximum possible displacement that's when we get this maximum velocity right so if we're hitting the very very edge of the paddle so we hit right here that's when we get a maximum velocity of 5. now when we don't hit this we want it to be a little bit less right so i want the velocity to maybe only be 4 when we hit here so essentially how do we figure this out well what we need to do is figure out what value we need to divide whatever the distance is to make it so the maximum possible value we can get is 5 and then any other value we get will be smaller than 5. i understand this is a bit weird but we want it so that the distance or the displacement divided by some value gives us 5 when we're at the maximum possible displacement value and then when we're not at the maximum it gives us something a little bit less than 5. and as we get closer to the middle it gives us a smaller value that should reach zero so our range is zero to five we need to take our displacement and then squeeze it in the values zero to five hopefully this following a little bit again not the easiest math in the world but we're going to have a maximum velocity of 5 okay that's our mv and our maximum displacement okay is going to be equal to half of the panel so if we're taking the displacement from right here then the maximum possible displacement we can have is that the center of the ball is right here at the very edge of the paddle which is just going to be half the height of the paddle okay so our maximum displacement is height of the paddle divided by two so we have these two values and now we need to figure out what i'm going to call a reduction factor and the reduction factor is how much we take the displacement between the paddle and the uh what do you call it and the ball and divided by okay so now we also have d so let's write a variable d let's go back to this no i don't want a pencil i want brush okay d so we have d this equal to the diff distance between the middle of the paddle and the uh the ball so the way that we figure this out is we say that our reduction factor which i'm going to call r so we want to have d over r is equal to mv when when specifically d is equal to md so when the displacement is equal to the maximum possible displacement that we can have and we divide it by r we want to get the maximum velocity that's what i'm saying here now it doesn't matter if it's positive or negative because we'll get either the maximum positive or maximum negative velocity anyways that's kind of the equation that we have now fortunately we can solve for r because we have a value for d and m v now once we solve for r we just use r as the reduction factor and then that's going to give us what we need for the velocity for our ball so if we plug in d which is going to be md which is just h over 2 then we have h over 2 over r is equal to mv and we know mv which is 5. now h over 2 is going to be variable based on the height of the paddle but i think we actually know this value is 50. anyways i'll show you how we solve just using the variables so if we have h over 2 over r is equal to 5 and we're looking for r then what we need to do to actually solve this is we need to do the following we're going to have to flip r and h over 2. so we're going to say r over h over 2 is equal to 1 over 5 okay because what we do to one side we need to do the other side then we're going to take h over 2 and we're going to multiply it by the 1 right here so we're going to have h over 2 over 5 is equal to r okay so it's going to be whatever the the distance is the maximum distance over 5. in this case it would just be our max velocity so that could potentially change is equal to r and then we take in the future whatever the displacement is divided by r and that gives us the value i know that was a lot i'm sure it's not 100 clear once i write this maybe it'll make a bit more sense but i just wanted to go in and try to explain how that works okay so now i'm going to calculate the reduction factor so i'm going to say reduction factor is equal to this is going to be left paddle dot height divided by 2 okay divided by two and then we're going to take all of this and we're going to divide this by the maximum velocity of the ball so i'm going to say ball dot max underscore val like that okay now we have the reduction factor now that we have this we need to use this to calculate the y velocity so i'm going to say the y velocity is equal to the difference in y divided by the reduction factor okay so now this is going to squeeze our difference in y within the range of negative 5 to 5 which is now going to allow us to update the y velocity so now we can say ball the y val is equal to the y value okay now it turns out that we do the exact same thing here with a few minor changes inside of this function we just need to change left panel to be right paddle and it will give us the exact same result now there's there's a lot of repetitive code here uh theoretically we could maybe write a function to calculate this for us but for now i'm just going to put it inside of here because i think this is fine so let's run this now and see if it's working so if i look at this panel here it's actually bouncing in the incorrect direction okay i need to fix that yeah same with the other paddle so it's giving us the reverse of what it should be so i'll show you how we can fix that but it is balancing on an angle which is what we want so the reason it's giving us the reverse of what we want is essentially because we just need to multiply the y velocity by negative one i'm gonna say negative one by y velocity and negative one uh multiplied by y velocity how did i mess that up twice okay let's rewrite this negative 1 multiply by y velocity now it should give us in the other direction you can look at the math and you'll probably figure out pretty quickly why it's giving it to us but it's because we're taking the middle line subtracting from ball y if we do ball y and subtract by middle y then we don't need to do this but i think this makes more sense so that's why i'm doing it this way anyways let's try this let's see what we get okay now it's bouncing in the correct direction nice that's what we wanted notice when it hits the edge of the paddle it's going to bounce more down okay there we go we got it to bounce down nice awesome and it bounced off the ceiling completely fine so this is working as i anticipated now what i want to do is i want to make so when it goes off the screen we actually increment some type of score and display them okay so let's get started on that our collision is working properly as you notice the closer we got to the center the more the ball bounced off straight and the further away from the center the more we had an angle that's why i was doing all this math that's kind of how that works okay so now we want to implement some type of score so to do that we need two variables we're going to say left score and right score so the left score will be equal to zero and the right score will be equal to zero as well now to check the score we just need to see if the ball moves off the left or the right hand side of the screen so i'm going to say if the ball dot x is less than zero then this means that the right player scored because it came off the lefthand side of the screen so we're going to say right underscore score plus equals one l if the ball dot x is greater than and this will be the width of the screen and then we are going to say left score plus equals 1. now that we have both the scores we can pass those to the draw function so i can say left score like this and right score and then if i go to my draw function i can now take in the scores so we'll say left score right score and we want to draw them on the screen now to draw them on the screen i need something like a font right i need to actually draw text on the screen so to do that i need to write a font so to make a font you can do the following score underscore font is equal to pie game dot font dot sys font like that now this takes in the type of font which i always just use as comic sans and then the size of the font which i'm going to go with as 50. feel free to modify these values but this is the font you want and this is the size of the font and now you use this font object to actually render text that you put onto the screen so inside of my draw function here i'm going to use score font and i'm going to draw this at the top just so that the ball can be drawn over top of the score so whatever i draw first will be drawn first meaning that whatever i draw last is going to be on the very top so i want to draw the ball last that it will be over top of my score okay so the way that i do this is i say the left score text is equal to the score font and then i call dot render and i pass to this the text that i want to render which is going to be an f string containing the left score okay and then i'm going to pass one and i'm going to pass the color which is just gonna be white now one stands for antialiasing just always make this one okay so you do the text antialiasing the color and that's what we have now f strings allow you to embed expressions directly inside of a string so i'm just doing the score here directly inside of the string to avoid having to convert it to a string using the string function now for the right score it's going to be the exact same thing except right score okay so now this actually gives me a drawable object now that i have a drawable object i want to draw it on the screen so i'm going to say win.blit and i'm going to blit the left score text and then i need to pass an x and y location for it now i want the left score text to be exactly in the middle of the screen on the left half of the screen this is actually fairly easy to do but i'm going to say width divided by 4 not divided by 2 because i'm trying to put this on kind of the first quarter of the screen or the first half of the screen in the center so i'm going to say width over 4 and i'm going to subtract this from the left score text dot get underscore with over 2 okay and then for the height i'll just pick a height of like 20 pixels now we'll do the exact same thing for the right text and then i'll explain why i'm doing this calculation so this is going to be right score but for the right score i want this to be in the middle of the right hand side of the screen so i actually want it to be three quarters of the width of the screen right that's the middle of the right hand side of the screen and i'm going to subtract that from the right score text dot get width over 2. so for this i'm going to do width and i'm going to multiply this by 3 over 4 okay so hopefully that makes sense i think i can actually just do it like this and say width multiplied by three over four and then minus the right squared i get underscore with over two that should work properly so to go to paint to quickly explain this again if we want this to be in like let's do this we have half the screen the middle of this half is right here okay so this is width over four that gives me this x position then i have my text now if i draw my text here it's going to go like that i don't want it to be like that i want it to be directly in the middle so i need to draw it like this so i'm going to take half the width of the text and subtract that from this position that gives me the top lefthand corner for where i need to draw now exact same thing over here this is 3 over 4 width right so i take that subtract it from half of the width of the text i'm drawing and i get it directly in the center of the screen okay and of course this is how you get the width of the text object just use get with perfect so that should now draw my score so let's see if this is going to work uh okay wait i think i'm in the python terminal here let's just quit that yes okay let's rerun and notice now that if we score this goes up and it's going to continue going up because i don't reset the ball so i need to reset the bulb you can see that is indeed wrong in the middle of the screen and it's changing based on what the number is right okay so how do we do this now so once the ball goes off the screen we need to reset the ball so i'm going to put a method on my ball just called reset so i'm going to say define reset and what i need to do in here is i need to reset the y velocity as well as the x velocity and then change the x and y position to be originally what it was set so i'm going to add some new values here i'm going to say this is equal to self dot original underscore x and this is equal to self dot original underscore y now let's make those lower cases so the idea here is when i initialize my ball i'm going to store what the original x and original y value was in a separate variable so that's how you do this here and then i'll change the x and y as i go through the program but i'm storing the original x and the original y so i can reset the x and y to be equal to the original x and original y when i reset so i'm going to say self.x is equal to self.original x okay and then we're going to say self.y is equal to self.original y then i'm going to reset the y velocity to be 0 and i'm going to say the self.x velocity multiplied equal by negative 1. now the reason i'm doing this for the x velocity is if i go off the screen going left then i want the velocity of the ball to be hitting my opponent when the ball resets okay now same the other way around if i go up the screen going right then i want the ball to go left and hit my opponent's paddle first you could change this if you want by just making it equal to the max valve we're not even changing the xval you could do that that'd be fine but i'm just going to reverse the direction so if it just went off your screen then it will go to the other person hopefully that makes a little bit of sense that's what i'm doing with the x velocity here okay so that's reset for the ball so now uh if they score we want to reset so i'm going to say ball dot reset and ball dot reset okay easy enough let's try this and see what happens okay so let's score and now notice it comes off and it hits my opponent's paddle so that's what i'm trying to do just to give my other player some time to recover so if we score now it comes off on that side okay let's score on the other side and see if our score goes up okay score goes up and then it comes back to me alright now again you can change that if you want but that was kind of my idea here now one thing we could do is also reset the panels uh when we score that might not be a bad idea for now i'm not going to do that but i think i've showed you how you would go about doing that just implement the same logic on the paddles and then call reset on left paddle and right pal okay nice now that we have that the last thing i need to do is handle winning the game so if the left player wins i want to say you know left player wins if the right player wins i want to say right player wins so i need to first come up with a score that i want to end the game at so i'm going to say the winning underscore score is equal to 10 and now we want to check if either player has a score of 10 after we increment the score so i'm going to go here and i'm going to say if the left score is greater than or equal to the winning score then we want to do something and i'll say l if the right score is greater than or equal to the winning score then we want to do something now the first thing that we want to do is we want to say ball dot reset okay and we want to say ball that reset here as well now i actually want to reset the panels if someone wins because we're just going to play a new game so let's actually implement the reset method on the paddles because i guess we're going to need that anyways so let's go to our paddles and in the same way that we did this for our ball we're going to say self dot original x and self.original y and then we'll just implement reset so define reset self self.x is equal to self dot original x and self.y is equal to self.original y okay paddle reset done very easy so if one player wins i want to say left underscore paddle dot reset right underscore paddle dot reset and same thing okay nice left paddle reset right paddle reset now the thing is this is pretty repetitive uh so we could try to wrap this in a way where we're only going to write this code once in fact let's actually do something i'm going to say reset actually i'm going to say 1 is equal to false and then inside of here i'm going to say 1 equals true okay and one equals true and then i'm going to say if one do this so this is just handling all our resets in one place now so we just have a boolean telling us okay did we win or do we not well if someone won then we'll do the reset and then inside of the left score and right score if statement will handle specifically what to do with the left player one and specifically what to do if the right player won now actually what i want to do is just put some text on the screen show it for five seconds saying hey left player one right player one and then just immediately reset the game so to do that i'm just going to render some font so i'm going to say win text is equal to and actually yeah we could just do wind text we could say left player one exclamation point we can say when underscore text is equal to write player one so now that we have this in a variable what i can do inside of one is i can use that variable to render text depending on who actually won so i can say my win underscore yeah i'll say when actually let's just say text is equal to and then this is going to be the score font we could make a new font i'm just going to use the square font dot render we're going to render the win text 1 and then we're going to render this in white and we're going to blit this to the middle of the screen so i'm going to say win in all capitals dot blit and i'm going to blit the text and then i'm going to blit this at win or i'm going to put this at height no at with over 2 minus the text dot get underscore width over 2 and it's going to be at height over 2 minus and then this is going to be the text dot get height over 2. okay so we're centering in the x position and the y position then i need to update the display i'm going to say pie game dot display dot update and i'm going to say pie game dot time dot delay 5 000 and 5 000 is going to be five seconds this is the number of milliseconds that i want to display the program by let me run through this because i know i went quickly we're saying the text is equal to score font.render so we're just rendering a drawable object the text we're rendering is whatever we put here just so we're not repeating a bunch of code and doing this in both places right i'm rendering this with antialiasing one the color white i'm then blitting this directly in the middle of the screen i've talked about how we do the middle calculation many times so i won't go through this again we're going to update the displace that it instantly shows then we're going to delay by five seconds we delay by five seconds then we reset everything now when we reset we also need to reset the score right so we're gonna say left score equals zero and right score equals zero and i think that's actually all we need to do for reset then the game will restart and everything will just work as expected and when you hit x of course the game's going to end all right so i think that's actually all good that should really wrap up the program let's run this though and give it a test and see if it's working so let's just see if we can score 10 so i'll just kind of let this run and then once it's done i'll be right back and confirm that it's working okay so we're at a score of nine let's see now if this is going to work okay it says write player one perfect and then it should restart the program let's see perfect restarts awesome okay so that is pong we have finished the game now as i promised hopefully you learned a lot in this video i just covered collision we covered some more advanced math drawing you know kind of separating the program out and how we have different functions handling different stuff uh yeah i think this is a fun program again great one for beginner or intermediate programmers and i am going to end the video here i will end off by saying that i do have a course programmingexpert.io you can check it out from the link in the description use discount code tim this course is designed for beginner or intermediate programmers looking to get better at programming this teaches programming fundamentals objectoriented programming advanced programming software engineering tools all kinds of great stuff check it out from the link in the description it's definitely a great resource especially if you guys want to support me with that said i will end the video here i hope you guys enjoyed if you did make sure they like subscribe to the channel and i will see you in another one you
