With timestamps:

00:00 - [Music]
00:06 - hey guys and welcome back to another
00:09 - YouTube video so in today's video I'm
00:11 - gonna be continuing with the six video
00:14 - in my Python programming series and I'm
00:16 - just gonna give you a quick sneak peek
00:17 - on what's gonna be happening in this
00:18 - tutorial pretty much we're just gonna be
00:21 - creating an enemy on the screen just
00:22 - like the description or the title says
00:24 - that's able to walk around like this now
00:28 - I know this seems simple for something
00:29 - that's probably gonna be about a 12 to
00:31 - 15 minute video but this is more
00:34 - complicated than it looks and obviously
00:35 - we have the animation going so
00:36 - everything looks good and he's changing
00:38 - velocities as he hits each point so
00:40 - we're gonna put him on a path and he's
00:43 - gonna be able to move that path so that
00:44 - could be the path could be here could be
00:46 - here to here it's variable meaning it
00:48 - can change so that's what this tutorial
00:50 - is gonna be make sure you stick around
00:51 - to the end if you want to learn how to
00:53 - do this and since we're using images I
00:55 - just want to direct our attention to the
00:56 - github here quickly so if you haven't
00:59 - seen already I have a github for this
01:01 - series where I post all the images and
01:04 - all the tutorial files
01:05 - I started at 3 just because the first
01:07 - two were pretty basic if you scroll all
01:09 - the way down to the bottom so what
01:11 - actually happened is you're gonna get to
01:12 - this page if you click on the link in
01:13 - the description click on game scroll all
01:16 - the way down to the bottom these are all
01:17 - the tutorial files if you want to
01:19 - download them if you want to look at
01:21 - them for reference and then all of the
01:23 - images are in here so if you actually
01:26 - want to download these files you click
01:28 - clone or download and click download zip
01:30 - file and it's gonna download all of it
01:32 - onto your computer from there you're
01:34 - gonna drag all of these images so like
01:38 - from the top here all the way down to
01:41 - r9e into your what do you call it into
01:45 - your game folder directory wherever you
01:47 - have your Python files stored and then
01:50 - you're gonna be able to do this tutorial
01:52 - so make sure you do that if you want to
01:54 - use these sprites if not then you're
01:56 - just gonna have to load your sprites in
01:58 - by yourself hopefully you can figure
02:00 - that out and pretty much what I've done
02:01 - is I've named for example we have 11
02:04 - images for our enemy moving left and
02:07 - moving right so I've done like L 10 e L
02:10 - 11 each meaning left 11th image and
02:13 - all right so that's the github if you
02:15 - guys haven't been there go check it out
02:17 - if you need to and yeah whatever okay so
02:20 - let's get right into this tutorial so
02:23 - our game here remember from last time
02:26 - right now oops this is a different game
02:28 - that I'm showing what am i doing that
02:30 - for um sorry
02:32 - okay so we got into our tutorial here
02:34 - you remember from last time we have our
02:35 - little guy jumps up and down moves
02:38 - around the screen now we're gonna create
02:40 - the enemy so the first thing we need to
02:41 - do when we want to create the enemy is
02:43 - oops I've accidentally closed this game
02:46 - again is we need to create a class so
02:49 - that we can then work out of that class
02:52 - so I've already done this I was done
02:54 - class and then enemy and it inherits
02:57 - from object and then I've created two
02:59 - class attributes here don't have to
03:01 - worry about what that means just write
03:03 - variables that look like this in your
03:05 - class
03:05 - now I've already loaded up all the
03:08 - images so I have r1 e r2 e all the way
03:10 - up to or 11 E and L 11 e into their
03:14 - names here so walk right walk left and
03:17 - you just do that at the top your class
03:19 - and then after that you can define your
03:21 - initialization function like so now you
03:25 - don't have to understand exactly how
03:26 - these class attributes work just write
03:29 - them in like this and we'll get to them
03:31 - later so we're just going to create our
03:33 - initialization here so we need X Y width
03:37 - height and then we're gonna create
03:40 - another one here that's new it's gonna
03:42 - be called end and I'm gonna go over that
03:43 - in a second so do self taught x equals x
03:46 - self the why cuz why wow I can't type
03:49 - and we'll do so filled with equals width
03:53 - and so on until we finish all of the
03:56 - variables and then we'll add our
03:57 - constants and I myself thought and
04:02 - equals ends like that so now we're gonna
04:05 - add our self dot walk count this is
04:07 - what's gonna be responsible for counting
04:09 - our sprites and what image Ron and we
04:12 - need self dot Val and that's gonna be
04:14 - equal to we'll start with three so now
04:16 - we need to create our draw function our
04:18 - methods sorry we're gonna do define draw
04:20 - inside here we're gonna take self and
04:22 - window and then we're gonna write pass
04:25 - in here is we're gonna get back to
04:26 - and then we're gonna create our note
04:28 - another method called move and then here
04:31 - we're gonna do self and that's all we
04:33 - need just self in there alright so I
04:36 - know I've just whizzed through that it
04:37 - just because we've already done this a
04:40 - bunch of times so I figured we can go
04:42 - fast through this part what we're gonna
04:44 - do here is we're gonna create our enemy
04:46 - now our enemy's gonna move on a set path
04:48 - so like I showed you before it moves
04:49 - from left to right and then left and
04:52 - then right and pretty much moves between
04:54 - two coordinate points so ours is gonna
04:57 - move in one dimension meaning it's only
04:59 - gonna move across the x-axis now if you
05:01 - wanted to move this up or down you would
05:04 - just change the Y value rather than
05:06 - changing the x value okay whereas for us
05:11 - since we're moving X we're just gonna be
05:12 - create adding to the x value or
05:14 - subtracting to the x value depending on
05:17 - where our enemy is so I want to run this
05:20 - program already I have another file
05:21 - where it's already coded you can see
05:23 - once he gets to a coordinate point so
05:25 - about where my mouse is he turns around
05:27 - he changes directions now to change
05:31 - directions
05:31 - he needs to change velocities so to do
05:35 - that we're gonna be multiplying the
05:36 - velocity by negative one and so on and
05:38 - I'm gonna get into that now so this is
05:40 - gonna be our move method here now
05:43 - what this move method is gonna be
05:44 - responsible for is every time we try to
05:46 - draw the character we're gonna move
05:48 - we're gonna move the character so we're
05:50 - gonna do self-thought move in here so we
05:52 - don't forget every time we draw we're
05:54 - gonna first move and then we're gonna
05:56 - draw the character now I just need to
05:59 - add another variable appear it's gonna
06:00 - be so called self that path and it's
06:02 - going to equal self dot X and self dot
06:06 - end
06:06 - now this represents where we're starting
06:09 - and where we're ending and these are
06:11 - just the x coordinates so that we can
06:13 - keep track of them when I'm checking
06:14 - them down in the move method so we go
06:17 - into the move method here and we're
06:20 - gonna start by saying if our character
06:22 - has a velocity that's positive so pretty
06:24 - much if self-thought velocity is greater
06:27 - than zero that means we are moving right
06:30 - so we're going right we're adding to the
06:32 - velocity then what do we have to do well
06:34 - we have to check if he is about to move
06:37 - past the point that we wanted to stop at
06:39 - so we're
06:39 - if self that X is greater than or
06:43 - actually we're gonna check if it's less
06:45 - than so we know if it's less than and
06:48 - then self thought path and since we're
06:51 - moving to the right we know this
06:53 - coordinate is gonna be to the right of
06:56 - whatever what do you call it our
06:58 - character is moving up if it is less
07:01 - than self thought path and then from
07:04 - there we just do one like this because
07:08 - we're accessing this element here so add
07:10 - a little brain fart there - self thought
07:14 - velocity or plus actually so this way we
07:19 - can tell sorry I need to change this to
07:23 - over here plus self dot velocity so that
07:27 - we see that if we add to the velocity of
07:30 - this x-coordinate here if it's less than
07:32 - the coordinate that we can't go past
07:34 - then we will allow our character to move
07:36 - so then we will do these self thought X
07:39 - plus equals self dot velocity like that
07:42 - I hope that makes sense now if we are
07:45 - already past this coordinate so our X is
07:47 - greater than or we are about to be
07:50 - greater than then we need to change
07:51 - directions so to change directions like
07:53 - I mentioned before we're just going to
07:55 - multiply our velocity by negative one
07:57 - but therefore flipped us 180 degrees and
08:00 - moving us in the opposite direction then
08:02 - what we're gonna do is going to set our
08:04 - walk count back down to zero like that
08:07 - and that's all for that now let's create
08:11 - our else statement because if our
08:12 - velocity is negative so it's not greater
08:14 - than zero then we need to check if our
08:17 - self dot X it - be self double I'll see
08:21 - this time is greater than in this
08:25 - instance what's gonna be self dot path
08:28 - one like this they're not one zero
08:32 - straight so this is exactly where we
08:34 - started from we're moving negative so we
08:36 - want to make sure that we don't go past
08:37 - that if we're not moving past that again
08:39 - will change our X so your self thought X
08:41 - plus equals self novel now you might
08:45 - think well we should probably
08:46 - subtracting and removing left but our
08:48 - velocity is gonna be negative if we've
08:50 - changed directions move left so if your
08:53 - negative you're really just subtracting
08:54 - that number so that's fine
08:56 - and then same thing in the else
08:57 - statement here you're just gonna copy
08:59 - exactly what we have here oops don't
09:02 - know why I deleted it like that
09:04 - so we have self dot Val equals self sub
09:08 - L times negative one again changing the
09:10 - directions to negatives make a positive
09:11 - we're gonna be moving right again and
09:13 - self to walk count equals zero we can
09:15 - get rid of this pass and that's all we
09:17 - need for our move method like that all
09:21 - right so now after we've done that we're
09:23 - gonna move back into our draw here and
09:25 - this is where we're gonna determine
09:27 - whether we're drawing an image to the
09:29 - left or whether we're drawing an image
09:30 - to the right and how that animation is
09:33 - going to work similar to what we've done
09:34 - in the player class up here you're just
09:36 - going to be a little bit different so if
09:38 - you remember in our player class so
09:39 - actually let's go up here for a second
09:40 - we have 27 as our maximum walk count now
09:44 - once that walk count gets past 27 we
09:46 - reset it back down to zero so we can
09:49 - continue the animation now since we have
09:51 - 11 images actually rather than nine in
09:53 - our enemy so moving right or left we
09:57 - need to change this slightly so we're
10:00 - gonna do if self thought walk count is
10:03 - less or plus one is less than or equal
10:08 - to 33 like this then we're going to new
10:14 - self dot walk out Wow equals zero sorry
10:19 - my typing is absolutely horrible now if
10:23 - that's not the case or after we check
10:26 - that then again we're gonna be checking
10:28 - to see whether we're moving left or
10:29 - right so rather than having like a self
10:31 - thought or having a self dot right
10:33 - variable a self thought left variable or
10:35 - attribute whatever we want to just use
10:38 - the velocity because we know if our
10:39 - velocities pause that we're moving right
10:41 - if our velocity is negative roofing left
10:43 - right
10:43 - so if our velocity is greater than zero
10:45 - that means we're moving right so if it's
10:48 - greater than zero we're all we're gonna
10:49 - do is we're gonna pull it to the screen
10:51 - the images again it's a wind-up lit and
10:53 - then we want our image so we're gonna do
10:55 - self and this is where these come in
10:59 - handy you just have to use self to
11:00 - access these all right so we're gonna do
11:03 - self dot walk right so we're moving
11:04 - right
11:05 - and then in here square brackets and
11:08 - self-taught walk count and then integer
11:13 - division 3 again because we want to make
11:15 - sure it's not looking like we're moving
11:16 - too fast then we need our coordinates
11:18 - so we'll do self dot X and self del Y
11:21 - and then we need to increment our walk
11:24 - count
11:24 - so we'll do walk count plus equals one
11:27 - like that
11:28 - now else so if we're not moving left
11:30 - we've all right we're not moving right
11:31 - we must be with left I'm just gonna copy
11:34 - this and then we can edit in here so
11:37 - we're just gonna change this simply to
11:39 - left and I think that's all we need to
11:42 - do so now that will actually get rid of
11:45 - this pass here now that we've had the
11:49 - draw method we have the move method what
11:51 - we need to do is we need to create an
11:52 - instance of our enemy so it right now if
11:55 - I show you if I run the program since we
11:57 - haven't created an instance we still
11:58 - he's not on the screen we don't see him
11:59 - he's not moving around we need to first
12:02 - create the instance of him so just like
12:04 - we created the man instance down here
12:05 - near our main loop we're gonna do the
12:06 - same thing I'm just gonna call this
12:07 - goblin and he is an instance of enemy
12:11 - he's gonna start at what x-coordinate
12:14 - we'd like maybe 100 for 10 again and
12:16 - then would be 64 by 64 and where do we
12:19 - want to end so what x-coordinate the
12:22 - path that we wanted to end up let's
12:23 - maybe do 450 and there we go we create
12:27 - an incident instance of him now that
12:29 - we've created that instance we need to
12:31 - dry so goblin draw on the window and
12:36 - let's test this out we have an issue
12:40 - named Bell is not defined ah error that
12:43 - I've ran into here we need to just put
12:45 - self though though here my bed and let's
12:48 - see if it works now walk count reference
12:51 - for assignment I always forget myself so
12:54 - you don't know so just make sure you
12:55 - guys have yourselves here because I
12:57 - forgot them and everything looks good
13:01 - let's test it out there we go we see we
13:03 - have a little goblin man moving around
13:06 - but it doesn't look like everything's
13:10 - working properly right his feet aren't
13:12 - moving so what could the issue be here
13:14 - now I think the issue is something to do
13:17 - with our
13:18 - walk count whether we're not
13:19 - incrementing it properly or ah this is
13:23 - the issue less than needs to be changed
13:26 - to greater than what I've just fixed
13:28 - here is the fact that we were saying
13:31 - that if self thought walk count is plus
13:34 - one is less than 33 which it always is
13:37 - then it's just gonna set it to zero so
13:40 - he wasn't changing the image ever so
13:42 - what we needed to do there is we needed
13:43 - to set this to greater than so that
13:45 - that's not happening sorry guys my
13:47 - mistake there let's run this and there
13:50 - we go we see our goblin running around
13:53 - the screen and when you get to the end
13:55 - coordinate he changes direction and you
13:57 - can see has a nice little punching thing
13:58 - there and so what we're gonna do with
14:01 - this in the next tutorial is gonna be
14:02 - doing collision with our player so if he
14:05 - hits the player it's gonna lose points
14:06 - and then our player he has these bullets
14:08 - right that he can shoot if he hits the
14:11 - Goblin call him do you think I start
14:12 - flashing or the players gonna gain
14:14 - points we can figure that out in the
14:16 - next tutorial so sorry about that little
14:18 - issue there guys but if you enjoyed the
14:20 - video please leave a like and subscribe
14:22 - and I will see you again in the next one
14:25 - [Music]

Cleaned transcript:

hey guys and welcome back to another YouTube video so in today's video I'm gonna be continuing with the six video in my Python programming series and I'm just gonna give you a quick sneak peek on what's gonna be happening in this tutorial pretty much we're just gonna be creating an enemy on the screen just like the description or the title says that's able to walk around like this now I know this seems simple for something that's probably gonna be about a 12 to 15 minute video but this is more complicated than it looks and obviously we have the animation going so everything looks good and he's changing velocities as he hits each point so we're gonna put him on a path and he's gonna be able to move that path so that could be the path could be here could be here to here it's variable meaning it can change so that's what this tutorial is gonna be make sure you stick around to the end if you want to learn how to do this and since we're using images I just want to direct our attention to the github here quickly so if you haven't seen already I have a github for this series where I post all the images and all the tutorial files I started at 3 just because the first two were pretty basic if you scroll all the way down to the bottom so what actually happened is you're gonna get to this page if you click on the link in the description click on game scroll all the way down to the bottom these are all the tutorial files if you want to download them if you want to look at them for reference and then all of the images are in here so if you actually want to download these files you click clone or download and click download zip file and it's gonna download all of it onto your computer from there you're gonna drag all of these images so like from the top here all the way down to r9e into your what do you call it into your game folder directory wherever you have your Python files stored and then you're gonna be able to do this tutorial so make sure you do that if you want to use these sprites if not then you're just gonna have to load your sprites in by yourself hopefully you can figure that out and pretty much what I've done is I've named for example we have 11 images for our enemy moving left and moving right so I've done like L 10 e L 11 each meaning left 11th image and all right so that's the github if you guys haven't been there go check it out if you need to and yeah whatever okay so let's get right into this tutorial so our game here remember from last time right now oops this is a different game that I'm showing what am i doing that for um sorry okay so we got into our tutorial here you remember from last time we have our little guy jumps up and down moves around the screen now we're gonna create the enemy so the first thing we need to do when we want to create the enemy is oops I've accidentally closed this game again is we need to create a class so that we can then work out of that class so I've already done this I was done class and then enemy and it inherits from object and then I've created two class attributes here don't have to worry about what that means just write variables that look like this in your class now I've already loaded up all the images so I have r1 e r2 e all the way up to or 11 E and L 11 e into their names here so walk right walk left and you just do that at the top your class and then after that you can define your initialization function like so now you don't have to understand exactly how these class attributes work just write them in like this and we'll get to them later so we're just going to create our initialization here so we need X Y width height and then we're gonna create another one here that's new it's gonna be called end and I'm gonna go over that in a second so do self taught x equals x self the why cuz why wow I can't type and we'll do so filled with equals width and so on until we finish all of the variables and then we'll add our constants and I myself thought and equals ends like that so now we're gonna add our self dot walk count this is what's gonna be responsible for counting our sprites and what image Ron and we need self dot Val and that's gonna be equal to we'll start with three so now we need to create our draw function our methods sorry we're gonna do define draw inside here we're gonna take self and window and then we're gonna write pass in here is we're gonna get back to and then we're gonna create our note another method called move and then here we're gonna do self and that's all we need just self in there alright so I know I've just whizzed through that it just because we've already done this a bunch of times so I figured we can go fast through this part what we're gonna do here is we're gonna create our enemy now our enemy's gonna move on a set path so like I showed you before it moves from left to right and then left and then right and pretty much moves between two coordinate points so ours is gonna move in one dimension meaning it's only gonna move across the xaxis now if you wanted to move this up or down you would just change the Y value rather than changing the x value okay whereas for us since we're moving X we're just gonna be create adding to the x value or subtracting to the x value depending on where our enemy is so I want to run this program already I have another file where it's already coded you can see once he gets to a coordinate point so about where my mouse is he turns around he changes directions now to change directions he needs to change velocities so to do that we're gonna be multiplying the velocity by negative one and so on and I'm gonna get into that now so this is gonna be our move method here now what this move method is gonna be responsible for is every time we try to draw the character we're gonna move we're gonna move the character so we're gonna do selfthought move in here so we don't forget every time we draw we're gonna first move and then we're gonna draw the character now I just need to add another variable appear it's gonna be so called self that path and it's going to equal self dot X and self dot end now this represents where we're starting and where we're ending and these are just the x coordinates so that we can keep track of them when I'm checking them down in the move method so we go into the move method here and we're gonna start by saying if our character has a velocity that's positive so pretty much if selfthought velocity is greater than zero that means we are moving right so we're going right we're adding to the velocity then what do we have to do well we have to check if he is about to move past the point that we wanted to stop at so we're if self that X is greater than or actually we're gonna check if it's less than so we know if it's less than and then self thought path and since we're moving to the right we know this coordinate is gonna be to the right of whatever what do you call it our character is moving up if it is less than self thought path and then from there we just do one like this because we're accessing this element here so add a little brain fart there self thought velocity or plus actually so this way we can tell sorry I need to change this to over here plus self dot velocity so that we see that if we add to the velocity of this xcoordinate here if it's less than the coordinate that we can't go past then we will allow our character to move so then we will do these self thought X plus equals self dot velocity like that I hope that makes sense now if we are already past this coordinate so our X is greater than or we are about to be greater than then we need to change directions so to change directions like I mentioned before we're just going to multiply our velocity by negative one but therefore flipped us 180 degrees and moving us in the opposite direction then what we're gonna do is going to set our walk count back down to zero like that and that's all for that now let's create our else statement because if our velocity is negative so it's not greater than zero then we need to check if our self dot X it be self double I'll see this time is greater than in this instance what's gonna be self dot path one like this they're not one zero straight so this is exactly where we started from we're moving negative so we want to make sure that we don't go past that if we're not moving past that again will change our X so your self thought X plus equals self novel now you might think well we should probably subtracting and removing left but our velocity is gonna be negative if we've changed directions move left so if your negative you're really just subtracting that number so that's fine and then same thing in the else statement here you're just gonna copy exactly what we have here oops don't know why I deleted it like that so we have self dot Val equals self sub L times negative one again changing the directions to negatives make a positive we're gonna be moving right again and self to walk count equals zero we can get rid of this pass and that's all we need for our move method like that all right so now after we've done that we're gonna move back into our draw here and this is where we're gonna determine whether we're drawing an image to the left or whether we're drawing an image to the right and how that animation is going to work similar to what we've done in the player class up here you're just going to be a little bit different so if you remember in our player class so actually let's go up here for a second we have 27 as our maximum walk count now once that walk count gets past 27 we reset it back down to zero so we can continue the animation now since we have 11 images actually rather than nine in our enemy so moving right or left we need to change this slightly so we're gonna do if self thought walk count is less or plus one is less than or equal to 33 like this then we're going to new self dot walk out Wow equals zero sorry my typing is absolutely horrible now if that's not the case or after we check that then again we're gonna be checking to see whether we're moving left or right so rather than having like a self thought or having a self dot right variable a self thought left variable or attribute whatever we want to just use the velocity because we know if our velocities pause that we're moving right if our velocity is negative roofing left right so if our velocity is greater than zero that means we're moving right so if it's greater than zero we're all we're gonna do is we're gonna pull it to the screen the images again it's a windup lit and then we want our image so we're gonna do self and this is where these come in handy you just have to use self to access these all right so we're gonna do self dot walk right so we're moving right and then in here square brackets and selftaught walk count and then integer division 3 again because we want to make sure it's not looking like we're moving too fast then we need our coordinates so we'll do self dot X and self del Y and then we need to increment our walk count so we'll do walk count plus equals one like that now else so if we're not moving left we've all right we're not moving right we must be with left I'm just gonna copy this and then we can edit in here so we're just gonna change this simply to left and I think that's all we need to do so now that will actually get rid of this pass here now that we've had the draw method we have the move method what we need to do is we need to create an instance of our enemy so it right now if I show you if I run the program since we haven't created an instance we still he's not on the screen we don't see him he's not moving around we need to first create the instance of him so just like we created the man instance down here near our main loop we're gonna do the same thing I'm just gonna call this goblin and he is an instance of enemy he's gonna start at what xcoordinate we'd like maybe 100 for 10 again and then would be 64 by 64 and where do we want to end so what xcoordinate the path that we wanted to end up let's maybe do 450 and there we go we create an incident instance of him now that we've created that instance we need to dry so goblin draw on the window and let's test this out we have an issue named Bell is not defined ah error that I've ran into here we need to just put self though though here my bed and let's see if it works now walk count reference for assignment I always forget myself so you don't know so just make sure you guys have yourselves here because I forgot them and everything looks good let's test it out there we go we see we have a little goblin man moving around but it doesn't look like everything's working properly right his feet aren't moving so what could the issue be here now I think the issue is something to do with our walk count whether we're not incrementing it properly or ah this is the issue less than needs to be changed to greater than what I've just fixed here is the fact that we were saying that if self thought walk count is plus one is less than 33 which it always is then it's just gonna set it to zero so he wasn't changing the image ever so what we needed to do there is we needed to set this to greater than so that that's not happening sorry guys my mistake there let's run this and there we go we see our goblin running around the screen and when you get to the end coordinate he changes direction and you can see has a nice little punching thing there and so what we're gonna do with this in the next tutorial is gonna be doing collision with our player so if he hits the player it's gonna lose points and then our player he has these bullets right that he can shoot if he hits the Goblin call him do you think I start flashing or the players gonna gain points we can figure that out in the next tutorial so sorry about that little issue there guys but if you enjoyed the video please leave a like and subscribe and I will see you again in the next one
