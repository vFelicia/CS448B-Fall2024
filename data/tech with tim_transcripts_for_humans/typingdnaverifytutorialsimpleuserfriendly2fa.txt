With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome to the
00:10 - youtube video
00:11 - so in today's video i'm going to be
00:12 - showing you how we can use typing
00:14 - biometrics as a form of two-factor
00:16 - authentication
00:18 - to verify users that are signing in or
00:20 - creating accounts on our website or
00:22 - platform
00:22 - now this technology is really really
00:24 - cool a company called typingdna has
00:27 - two apis one called the authentication
00:30 - api another called the verify api
00:32 - and in this video i'm going to be
00:33 - showing you their new api which is the
00:35 - verify api
00:36 - which is a much simpler version of what
00:38 - i'd actually shown previously on this
00:39 - channel
00:40 - which was their authentication api so if
00:43 - you're a little bit confused
00:44 - essentially what this means or what i'm
00:45 - going to be showing you here is how you
00:47 - can have a two-factor authentication
00:49 - method
00:50 - that does not involve the user
00:52 - constantly having to type in two-factor
00:54 - authentication codes
00:55 - so sms codes or email codes it actually
00:58 - uses their typing pattern and they're
01:00 - typing biometrics
01:01 - to verify them now of course if that
01:03 - verification fails there will be a
01:05 - two-factor authentication code sent
01:07 - to the user but this is great and
01:09 - there's a lot of advantages behind
01:11 - using this typing biometrics as your
01:13 - kind of default two-factor
01:15 - authentication
01:16 - rather than constantly sending
01:17 - two-factor authentication codes
01:19 - now i do need to mention that this video
01:21 - is sponsored by typing dna
01:23 - they have paid me to create this but
01:25 - i've been working with typing dna a lot
01:26 - recently i think we've done maybe three
01:28 - or four different collaborations already
01:30 - they're a great company they have great
01:31 - technology and i think you guys are
01:32 - going to be excited to see
01:34 - what we can do here and how simple it is
01:35 - especially compared to the last api
01:38 - which was their authentication api
01:40 - which again if you want to check out the
01:41 - video for i have a link in the
01:42 - description
01:43 - i'll kind of throw up the thumbnail and
01:44 - a card for it on the screen right now
01:46 - regardless let me just kind of show you
01:48 - how this working works
01:49 - sorry and then talk to you about some of
01:51 - the advantages so let's actually just go
01:53 - and look at the demo so what i'm going
01:55 - to do is just go over here to
01:57 - typing dna verify and start the demo
02:00 - okay so the first thing you need to do
02:02 - here is enter a phone number or enter an
02:04 - email
02:04 - now what i'm going to do is enter kind
02:06 - of a dummy email that i set up
02:07 - previously that i just use for videos
02:09 - like this
02:09 - it's called code racer live
02:13 - stream app at gmail.com
02:16 - i'm going to start the demo it says okay
02:19 - you want to verify with typing dna yes i
02:20 - do so i'll press verify
02:22 - with typing dna a pop-up comes up it
02:24 - asks me to type in the following and
02:26 - notice as i'm doing this
02:28 - it is tracking my typing pattern
02:31 - so yellow toothbrush socks firearm okay
02:34 - let's verify
02:35 - this time only to register you have to
02:36 - type two more times okay so let's do
02:38 - that
02:39 - yellow toothbrush socks firearm
02:42 - okay and then yellow toothbrush socks
02:46 - and firearm now notice i spelt this
02:49 - wrong so i need to go back and
02:50 - fix this okay i agree and now next
02:54 - all right let's see what it says here
02:56 - almost there email verification a six
02:58 - digit code was sent to your email enter
02:59 - the code below i'm gonna grab that code
03:01 - i'll be right back
03:02 - okay so i've got the code i'm going to
03:03 - press next and now you're going to see
03:05 - that it verified me successfully so what
03:07 - i just did here was enroll my typing
03:09 - pattern kind of create an account with
03:11 - typing dna if you want to think of it
03:12 - like that
03:13 - and now every time i try to sign in so
03:15 - let's actually go ahead and do this i'm
03:16 - going to try to sign in with my email
03:18 - here
03:18 - you're going to see that it's going to
03:20 - actually use my previous typing patterns
03:22 - to authenticate me here so now this time
03:24 - when i type
03:25 - yellow toothbrush socks
03:29 - and then firearm of course i'm going to
03:31 - make typos there
03:32 - i'm going to press verify and then it
03:34 - says my verification was successful
03:36 - my typing pattern here matched the
03:38 - typing patterns i enrolled with it
03:40 - previously
03:41 - all right so that was kind of the demo
03:42 - and explanation of typing dna verify now
03:45 - our implementation
03:46 - here is going to be using node.js
03:48 - express and then pug
03:49 - for the front end you can see the front
03:51 - is extremely simple if you don't know
03:52 - any of those technologies don't worry
03:54 - we're hardly using them it's just to
03:56 - have
03:56 - a really basic web server running and
03:58 - what we're going to do here is have a
04:00 - button
04:00 - it's going to say verify with typing dna
04:02 - and then same way as before
04:04 - you're going to type in your stuff okay
04:08 - notice i typed this wrong so i need to
04:09 - fix it i'm going to press verify
04:11 - and then you're going to see that it's
04:12 - going to verify the typing pattern
04:15 - now the reason it's not asking me to
04:16 - insert an email is because the email is
04:18 - hard coded in the back end but if you
04:20 - wanted to not have the email hard coded
04:22 - that's super simple again this is just
04:24 - meant to give you the simplest
04:26 - implementation so then you can go and
04:27 - extend it and add to it and actually
04:29 - maybe add it into an app that you
04:30 - already have
04:32 - there you go so that's what we're going
04:32 - to be doing again we're using express
04:35 - nodejs and then pug for the front end
04:37 - but really minimally for all of those
04:39 - okay so what i'm going to do now is just
04:41 - quickly show you i'm going to go back to
04:43 - just
04:43 - the typing dna website i just want to
04:46 - quickly show you some of the core
04:47 - advantages
04:48 - of actually doing this of having this
04:50 - type of authentication so if i go to
04:52 - verify and i press
04:53 - learn more it's going to redirect me
04:55 - here and i'll just kind of go through
04:56 - the website because they laid out pretty
04:58 - nicely but first of all this is a much
04:59 - better user experience when you have
05:01 - people just able to type something in
05:03 - really quickly
05:04 - and have them authenticated from that
05:06 - rather than
05:07 - having them have to go to their phone or
05:09 - open their email or whatever
05:10 - wait for a code to come in and then
05:12 - insert that code it also keeps your sms
05:15 - costs low
05:16 - right and it uses the sms codes or the
05:18 - email code sorry
05:19 - as the root of trust not the de facto
05:22 - authentication so it's not the default
05:24 - method it's only what you go to when the
05:26 - actual verification fails from typing
05:28 - and then of course this is state of the
05:29 - art authentication this is actually
05:31 - really good i'm always really impressed
05:33 - at how well this typing biometric stuff
05:35 - actually works
05:36 - i don't know exactly how it's
05:37 - implemented the technology behind it but
05:39 - i know it's very advanced
05:40 - proprietary and well just quite good
05:43 - okay anyways that is enough
05:44 - about this itself now what i want to do
05:46 - is start walking us through how we can
05:48 - actually implement this
05:49 - we're going to have to install and set
05:50 - up a few things let's go through those
05:52 - steps now
05:52 - all right so the first step here is
05:54 - going to be to create an account on
05:55 - typing dna now typing dna is completely
05:58 - free for the first year that you're
05:59 - using it for
06:00 - so don't worry about that just go to the
06:01 - typing dna website i'll have a link to
06:03 - it in the description
06:04 - and what you're gonna do is create an
06:05 - account so go to the verify page right
06:07 - and then press start for free
06:09 - and then what you're going to see
06:12 - is that it would bring you to a page we
06:14 - need to create an account now for me
06:15 - it's bringing me right to my dashboard
06:16 - because i've already created an account
06:18 - so at this point in time if you don't
06:19 - have an account
06:20 - pause make one and then resume the video
06:22 - and i'm going to go through the steps we
06:24 - need to follow once we're in our
06:25 - dashboard
06:26 - all right so we're in our dashboard now
06:28 - i've just set up a kind of brand new
06:29 - fresh account so i can go through the
06:31 - steps with you
06:32 - the first thing that we need to do here
06:34 - is we need to connect an
06:35 - sms gateway gateway sorry or an email
06:38 - gateway
06:39 - to our dashboard now the reason we need
06:41 - to do this is because we have to have
06:43 - either sms or email as kind of our two
06:46 - factor method right
06:48 - so if the verification fails from the
06:50 - typing biometrics we need to be able to
06:52 - send a code either
06:53 - via sms or via email to the user so we
06:56 - have to pick one of these or both of
06:58 - them
06:58 - if you want the users to be able to sign
07:00 - in with both phone or email
07:02 - in our case we're just going to do email
07:03 - here but if you wanted to do phone it'd
07:05 - be the exact same steps and i'll show
07:07 - you later in the video
07:08 - how you do this using sms the only
07:11 - change is that you're going to connect
07:12 - your twillow or twilo or however you say
07:14 - that
07:14 - rather than connecting the send grid
07:16 - okay but we're going to connect the send
07:18 - grid
07:18 - and the thing with this is this one is
07:20 - free if you use the sms it's going to
07:21 - cost you about 20 bucks
07:23 - to actually get started so let's go and
07:25 - connect an email gateway
07:26 - and notice it's telling us we have to
07:28 - type in a grid api and then our sender
07:30 - identity
07:31 - so this means we need to go to the send
07:32 - grid website so we're going to go to
07:34 - send grid
07:35 - like that and we're going to make a new
07:36 - account so i've already made account
07:38 - on sendgrid i'm going to sign into it
07:41 - here but for you guys
07:42 - what you'll need to do and let me just
07:44 - sign into this first
07:46 - is make a new account on sendgrid and
07:48 - then i'm going to show you once i get in
07:49 - here how you do all the configurations
07:51 - of course after i put in the two factor
07:53 - code
07:53 - okay so i'm in the send grid now again i
07:55 - already have an account created you guys
07:57 - have to make
07:58 - one first but once you make one it's
08:00 - going to ask you a few different setup
08:01 - steps
08:01 - most of them are intuitive i'm not going
08:03 - to walk through everything
08:04 - but what you do need to do once you're
08:06 - in the account and once you've verified
08:08 - your email and you've created your
08:09 - sender email and all of that
08:11 - is need to create an api key now the
08:13 - first thing i'm going to do is just see
08:14 - if i can go to the account details or
08:16 - the setup guide here
08:17 - and just make sure i can walk you guys
08:18 - through any steps that maybe
08:20 - are not intuitive so the first thing you
08:22 - need to do is create a sender identity
08:24 - i think this is pretty straightforward
08:26 - to walk through but you need to do that
08:27 - create a sender identity
08:28 - you can use the same email you used to
08:30 - sign up here i just made a random gmail
08:32 - email and use that as my sender identity
08:35 - next what you're gonna need to do is uh
08:37 - well actually not send your first email
08:38 - you're gonna need to verify that sender
08:40 - identity so you're gonna have to have
08:41 - access to that email account
08:43 - press the email it sends you and then
08:44 - you should be good you should have
08:46 - the sender thing set up once you've done
08:48 - that again you need to make an api
08:50 - token so what you're gonna do is go to
08:52 - settings you're gonna go to api
08:54 - keys and then you're going to make an
08:55 - api key now i'll just make one here so
08:58 - let's go ahead and do this
08:59 - i'm going to name this tutorial okay
09:03 - and then give it full access okay so
09:05 - give it full access
09:06 - make a tutorial and then it's going to
09:08 - show you this token now it only shows it
09:10 - to you one time so make sure you copy it
09:12 - immediately
09:12 - you're going to copy this token go over
09:14 - to your dashboard on typing dna
09:16 - and then you're going to paste that
09:17 - token in here okay next what you're
09:20 - going to do is type
09:21 - the email that you put in as the sender
09:24 - from send grid so it's possible to have
09:27 - an account with send grid that has a
09:28 - different
09:29 - sending email so if this email you're
09:32 - sending emails from
09:33 - is different then you're going to put
09:35 - that one here in my case they're both
09:37 - the same but whatever
09:38 - you put into uh send grid to actually
09:41 - send the emails to people
09:42 - that's the one that you want so here
09:43 - what i'm going to do is put in my email
09:45 - so this was
09:46 - what was it code racer live
09:50 - gotta spell that right live stream
09:54 - app at gmail.com okay code racer
09:56 - livestream app at gmail.com looks good
09:58 - and then you're gonna press this little
09:59 - upload button here
10:00 - it's gonna sync make sure it's all good
10:02 - and then if it says email
10:04 - gateway key saved you're good you see a
10:06 - little check mark and you've
10:07 - hooked up send grid so that's how you
10:09 - hook up send grid again pretty intuitive
10:11 - i figured this out
10:12 - pretty easily on my own but those are
10:14 - kind of the steps okay i'm going to
10:15 - press done now
10:16 - and then you'll see i have two api keys
10:18 - here it's fine you guys will just have
10:19 - one
10:20 - okay now what we're going to do is we're
10:22 - going to actually create an
10:24 - integration with typing dna so we have
10:27 - our client id and our client secret
10:28 - which we need but we also need an
10:30 - application id and this is because you
10:32 - can have multiple applications
10:34 - connected to typing dna so what i'm
10:36 - going to do is add my first integration
10:38 - this is really just like connecting an
10:40 - app to it and then what i'm going to do
10:42 - here is put the name
10:43 - so i'll just do tutorial and then the
10:46 - domain
10:47 - that this is going to be connected to so
10:49 - unfortunately we cannot use
10:51 - localhost for our development or testing
10:54 - for this we do need to use
10:55 - some real domain that is https so it
10:59 - needs to be ssl
11:00 - certified it needs to be https and so
11:03 - what we're going to do now
11:04 - is we're going to install a program
11:05 - called ngrok or ngrok sorry that's going
11:08 - to allow us to actually have this kind
11:10 - of temporary
11:11 - domain that points to localhost that we
11:14 - can use in development
11:15 - so we're going to do is go to ng rock
11:17 - we're going to download this tool i'll
11:19 - leave a link to all of this stuff in the
11:20 - description
11:21 - so just go and press download download
11:24 - for windows mac or whatever system it is
11:26 - that you are on
11:27 - and then what it's going to do when you
11:28 - download it let me just download this
11:30 - here
11:30 - to my downloads okay
11:34 - so let's download it here okay so once
11:36 - it's downloaded it's going to have a
11:38 - zip folder so what you're going to do is
11:39 - open up the zip folder you're going to
11:41 - see there's an application here
11:42 - and then you're going to cut this
11:44 - application out and you're going to put
11:45 - it somewhere that it's easily accessible
11:47 - so in my case i'm just going to go to
11:48 - the desktop
11:49 - i'm going to go to my typing dna
11:51 - tutorial folder
11:52 - i'm going to paste it inside of here so
11:54 - that i have ng-rock this
11:56 - exe application in the folder that i use
11:58 - when i start writing some code okay so
12:00 - that's going to take a second once
12:01 - that's done i don't know why that's
12:02 - lagging
12:02 - then we have ng-rock what we're going to
12:05 - need to do is now use ng-roc to create
12:07 - our domain
12:08 - so let's go ahead and do that all right
12:10 - so i've just opened up the folder where
12:11 - i have
12:12 - ng rock now this is pretty easy to do or
12:14 - pretty easy to use
12:15 - but what you're going to need to do is
12:16 - open up a command prompt or terminal
12:18 - that is in the same directory as this
12:21 - file it doesn't matter where it is you
12:22 - just
12:23 - need to know where it is so you can open
12:24 - up a command prompt or terminal so i'm
12:26 - just going to open it in windows
12:27 - explorer
12:28 - i'm going to go to this top bar here i'm
12:29 - going to type cmd and that's going to
12:31 - open up my command prompt
12:32 - now what i'm going to do is type ng rock
12:35 - http
12:36 - and then 3000. now what this will
12:38 - actually do is it will create a
12:40 - temporary url i believe this url
12:42 - lasts for about two hours that actually
12:45 - forwards
12:46 - all of the requests from it to a port on
12:48 - your local machine
12:49 - so in this case we're going to run our
12:51 - server on port 3000
12:53 - this is going to be http this is the
12:55 - protocol that we're using
12:57 - and so what this will do now is create a
12:59 - domain for us
13:00 - that accepts http requests and then
13:02 - forwards all of them to our local host
13:04 - and then the localhost will go back to
13:05 - the domain and the domain will return to
13:07 - wherever it was requested from
13:08 - so this will give us access to an https
13:11 - domain that we can use for testing
13:12 - purposes
13:13 - so if you do this and you run you're
13:14 - going to see that it says okay the
13:15 - session expires in two hours
13:18 - you have a version region a web
13:20 - interface and then what you want to look
13:22 - for here is this https domain
13:24 - so i'm going to copy that you want to
13:25 - copy this whole thing here
13:27 - and what we're going to do is notice by
13:29 - the way it's going to localhost 3000
13:31 - we want to go back to typing dna and we
13:34 - want to insert our domain here
13:36 - but we want to make sure we remove the
13:39 - https
13:40 - so you just want the domain so all of
13:42 - these kind of random numbers and letters
13:43 - dot ng-grok dot io so put that there
13:47 - then you're going to say create
13:48 - integration and it's going to show you
13:50 - the application id
13:52 - perfect we now have all the three things
13:54 - that we need to actually start working
13:56 - on
13:56 - our application so we've set up sendgrid
13:59 - we have ng rock going we have
14:01 - our client id our client secret and then
14:02 - this is known as our application id
14:05 - now what we need to do is actually start
14:06 - writing some code so the next thing
14:08 - we're going to need to do sorry
14:09 - is install node.js so i forgot you do
14:12 - need node.js so go to node.js again i'll
14:14 - link this in the description
14:16 - download the latest version if you don't
14:18 - already have that and then what i'm
14:20 - going to do is open up
14:21 - vs code i opened that folder that you
14:22 - saw i have ng rock inside of and this is
14:25 - where we'll set up our actual server and
14:26 - start doing all of the development
14:28 - so you can use whatever editor you want
14:29 - obviously vs code is just my preferred
14:31 - one so that's why i'm using it
14:33 - now what i'm going to do though is i'm
14:34 - going to open up the vs code terminal
14:36 - and i'm going to create a kind of
14:39 - starting or
14:40 - template express application in node.js
14:43 - so you can see here i've opened up my
14:44 - terminal notice it's in the typing dna
14:47 - tutorial folder again do this wherever
14:48 - you want i'm just doing this on a folder
14:50 - on my desktop
14:51 - what i'm going to type now is npx and
14:54 - then this is going to be
14:54 - express hyphen generator like that no i
14:58 - think i spell generator correctly yes it
15:00 - does
15:00 - or yes i did sorry and then i'm going to
15:02 - give this a name i'm going to call this
15:03 - website so what we're doing is we're
15:05 - going to use this
15:07 - kind of shortcut here that comes from
15:08 - node.js so npx
15:10 - express generator website and this will
15:12 - create a new folder for us
15:13 - named website that has all of the node
15:16 - stuff that we need
15:17 - to actually have an express application
15:19 - now a lot of the stuff in here we're not
15:20 - going to actually need
15:22 - and i'll show you how we can clean that
15:23 - up in a second but this will just save
15:24 - us a little bit of time okay so we did
15:26 - that and now notice it's going to create
15:28 - this website folder for us and there's a
15:29 - bunch of stuff inside of here
15:31 - now the first thing we're going to do is
15:32 - we're just going to start deleting stuff
15:34 - that we don't need
15:35 - so we're actually going to delete all of
15:37 - these folders here
15:38 - except for views so we're going to
15:40 - delete all of these bin
15:41 - public and roots we don't need those and
15:45 - then we're going to have to change some
15:46 - stuff in some of the other folders as
15:47 - well okay we're now going to go to views
15:49 - we're going to delete
15:50 - all of the files inside of views but
15:52 - we'll keep that directory because we
15:54 - will use that directory in a second
15:56 - then we're going to go inside of app.js
15:58 - and we're just going to start deleting
16:00 - stuff that we don't need
16:01 - so we don't need this cookie parser we
16:03 - don't need this logger
16:04 - we don't need these this index router or
16:07 - this user router
16:08 - we'll leave this for now we don't need
16:11 - any of this stuff right here so we can
16:12 - get rid of all of that
16:14 - we don't need any of these lines any of
16:17 - these app.uses we'll get rid of those
16:19 - we can leave this catch actually i'm
16:22 - thinking if we need this or not
16:23 - okay so actually i lied we are going to
16:24 - delete more stuff we're going to delete
16:26 - all of this
16:27 - okay and we are going to delete this
16:30 - create error thing
16:31 - and then this is what our file should
16:32 - look like for now really we could have
16:34 - probably just written this file from
16:35 - scratch
16:36 - on our own but it's fine i figured we
16:37 - could just use the shortcut and maybe it
16:39 - would save us a bit of time
16:40 - maybe not okay so now that we've done
16:42 - this we're just going to leave the file
16:44 - like this for now
16:45 - we're going to come back to it in a
16:46 - second but this but this is where we're
16:47 - going to write a lot of our code this is
16:49 - going to be kind of our server
16:50 - our back end and then i'll show you how
16:52 - we can set up the templates in the front
16:53 - end in a minute
16:55 - okay so now what we need to do is we
16:56 - need to install all of our node
16:58 - modules so we have this package.json and
17:01 - this has all of the dependencies that we
17:03 - need
17:03 - and actually if we go inside of here we
17:04 - can see that some of the stuff we don't
17:06 - need
17:06 - for example we don't need morgan we can
17:09 - remove that we don't need
17:10 - http errors we can get rid of that we do
17:13 - need debug but we don't need cookie
17:15 - parser
17:15 - okay so these are the three dependencies
17:17 - that we need for right now
17:19 - now uh what we can actually do is we can
17:21 - go
17:22 - and cd into our website folder so cd
17:24 - website
17:25 - and we can do npm install like this
17:28 - and what this is going to do is install
17:30 - all of these dependencies right here for
17:32 - us
17:32 - then we're going to add a few
17:33 - dependencies here that we need
17:35 - specifically related to typing dna
17:37 - and we should be good to go okay so you
17:38 - can see that was pretty fast we
17:39 - installed all the dependencies all of
17:41 - them are inside of the node modules
17:42 - folder now
17:43 - next what we're going to do is we're
17:45 - going to install puck so we're going to
17:46 - say npm
17:47 - install we're going to do hyphen capital
17:49 - s to save
17:51 - and then we're going to type pug pug is
17:53 - what we're going to use as our kind of
17:54 - templating engine in the front end so
17:55 - npm install hyphen s
17:57 - pug okay that one's going to take a
17:59 - second and then once that one is done
18:01 - what we need to do is install the typing
18:03 - dna verify client which is a nodejs
18:06 - package
18:07 - or npm package so now we're going to
18:09 - type npm
18:11 - install and then typing dna
18:14 - hyphen verify hyphen client okay so
18:17 - let's install that
18:19 - give that a second now it's worth noting
18:21 - here that if you are not going to be
18:22 - using javascript there is some other
18:24 - clients i believe there's one for php
18:26 - i think there's one for c-sharp as well
18:28 - and i believe more are being created so
18:30 - there's a lot of different ways to do
18:31 - this you don't just have to do this from
18:33 - an express or node application
18:35 - but this is definitely the simplest way
18:37 - and again even if you're not using this
18:38 - programming language i'd recommend you
18:39 - just follow along because this is going
18:41 - to explain a lot of stuff
18:42 - and probably save you a good amount of
18:43 - time going forward okay so we've
18:45 - installed all of the stuff that we need
18:46 - i'm just making sure we don't need
18:48 - anything else
18:48 - and at this point in time i think we're
18:50 - actually ready to start doing some
18:51 - development
18:52 - so we've got all of our package packages
18:54 - story installed and now what we are
18:56 - going to do
18:57 - is start working in this file right here
18:59 - so there's a few things that we need to
19:01 - set up here
19:02 - related to express the first is which a
19:04 - router so we need some way to actually
19:06 - handle all of our traffic
19:08 - and create different routes right so
19:09 - like slash home slash verify slash
19:12 - result
19:12 - etc so what we're going to do here is
19:14 - say var router
19:16 - is equal to and then this is going to be
19:18 - express
19:19 - dot router like that okay
19:22 - next what we are going to do is at the
19:24 - bottom of our program we're going to say
19:26 - app.use
19:27 - and then we're going to put a slash here
19:29 - and we're going to say
19:30 - router so this should give all of the
19:32 - traffic that's going to the slash root
19:35 - to the router so then it can handle
19:37 - what different routes we have on our
19:39 - website okay the next thing we need to
19:41 - do is we need to make this app actually
19:43 - start listening on a specific port so we
19:45 - need to actually run the server here
19:46 - so we're going to say app dot listen and
19:49 - then we're just going to put inside of
19:50 - here
19:50 - port 3000 sorry not 30 000
19:54 - 3000 and then we can just do a
19:56 - console.log here so console.log
19:59 - and we can say listening on
20:02 - port 3000 just so we know this is
20:04 - running we don't need
20:06 - the module that exports so we'll get rid
20:08 - of that and now we can actually just
20:09 - test this and see if it's working so far
20:11 - now right now it's not going to do
20:12 - anything we don't have any roots set up
20:14 - but we should be able to see if this is
20:15 - working so to run this what we're going
20:17 - to do is say node
20:18 - and then we are going to put the name so
20:20 - app.js
20:21 - okay it says listing on port 3000 we are
20:24 - all good that means this is working fine
20:26 - now we can start setting up some of our
20:28 - views and routes all right so now we're
20:30 - going to start setting up some of the
20:31 - templates and the different views of our
20:33 - application
20:34 - once we have the view set up then of
20:35 - course we can integrate typing dna we'll
20:37 - add that typing dna button and i'll show
20:39 - you how all that stuff works
20:40 - what we need to do though is we need to
20:42 - change our rendering engine here
20:44 - to be pug instead of jade so we're going
20:47 - to go ahead and make that change
20:48 - and then see we have this views folder
20:50 - this is where we're going to put all of
20:52 - our pug
20:52 - templates now if you're unfamiliar with
20:54 - pug templates don't worry i won't
20:55 - explain them a ton but they're pretty
20:57 - simple and easy to understand
20:59 - what i'm going to do is make a new file
21:00 - inside of views i'm going to call this
21:03 - verify.pug okay you should see that
21:05 - you're getting that little pug logo
21:06 - which i think is hilarious
21:08 - and now we'll just start creating our
21:09 - first template so this is pretty
21:11 - straightforward
21:12 - what you can do is do html the
21:13 - indentation is important here so make
21:15 - sure you keep the indentation
21:16 - i'm going to say head and then i'm going
21:18 - to put my body tag
21:20 - like that and then what i'm going to do
21:22 - here is just say h1
21:24 - i'm going to say welcome to typing dna
21:28 - demo okay that's going to be my first
21:30 - template super simple
21:31 - all i'm showing is just this h1 tag that
21:34 - says welcome to typing dna demo
21:36 - and i'll show you how we can actually
21:37 - pass values into these templates
21:40 - when we render them from app.js all
21:42 - right so we're going to create our first
21:44 - route here so what we're going to do is
21:45 - say router dot
21:47 - get this means we're going to accept a
21:49 - get request for this specific route
21:51 - we're going to say slash verify is the
21:53 - endpoint or the url that we want to go
21:55 - to
21:56 - and then we are going to create a
21:58 - function so we're gonna do
21:59 - the uh two brackets like this we're
22:01 - gonna do an arrow
22:02 - we're gonna take the request and then
22:05 - the response yes i believe that's
22:07 - correct
22:07 - and then inside of here is where we're
22:09 - actually gonna code out what we should
22:11 - do
22:12 - when we go to the slash verify endpoint
22:15 - so all i want to do
22:16 - right now is i want to say res which
22:18 - stands for response
22:20 - dot render and i'm going to render my
22:23 - pug
22:23 - template so i'm just going to render
22:24 - verify like that and that's
22:26 - all i need to do right now so what this
22:28 - does when i say
22:29 - res.render is it looks inside of my
22:32 - views folder which has already been
22:34 - set up here so we've kind of added this
22:36 - path looks for the verify template and
22:38 - then it's going to
22:39 - render that template or return that
22:41 - template as the response
22:42 - when we go to the slash verify endpoint
22:44 - so we can test this pretty simply we're
22:46 - going to run
22:47 - our application now what we'll do is
22:50 - we will go to our browser which browser
22:53 - should i go to i guess i can just go to
22:54 - this one
22:55 - and we'll go to localhost colon 3000 and
22:58 - we are going to go to slash
23:00 - verify okay and when we go to slash
23:02 - verify notice we get our h1 and says
23:04 - welcome to typingdna demo
23:06 - perfect now i did not forget about ng
23:09 - rock so i'm going to show you that now
23:11 - notice how ng rock this url is
23:13 - redirecting to localhost 3000
23:16 - so what i can do is i can also go to
23:17 - this url so i'm going to copy this https
23:20 - url
23:20 - i'm going gonna go to my browser i'll go
23:23 - a new tab here
23:24 - press enter and then same thing i need
23:26 - to go to slash verify because we don't
23:28 - have a default route
23:29 - and then it brings me to the same page
23:32 - there you go pretty straightforward
23:34 - that's how it works so from now on we'll
23:36 - use
23:36 - this url we can use localhost1 that's
23:38 - fine but
23:39 - this one is preferred and actually to
23:41 - make sure it's all going to work with
23:42 - typing dna
23:43 - i believe we do actually have to be on
23:45 - this url but
23:46 - at this point in time we're not using
23:48 - typing dna yet and so it's not an issue
23:50 - okay nice so now we've set up our first
23:53 - route so what i want to do is i want to
23:55 - start integrating typing dna
23:57 - ideally we're going to have a button on
23:59 - this screen and then what the button is
24:01 - going to do is it's going to render that
24:02 - kind of pop-up you saw before that's all
24:04 - handled by typing dna we don't need to
24:06 - code any of that
24:07 - and then verify our user for us so the
24:09 - first thing we need to do
24:10 - is we need to create or actually kind of
24:12 - import here
24:14 - the typing dna client so i'm going to
24:16 - say var
24:17 - typing dna and then client
24:20 - like that and we'll just specify this
24:23 - that is the verified client so typing
24:25 - dna verify client
24:26 - is equal to and then we are going to
24:28 - require and
24:29 - this will be the typing dna
24:32 - hyphen verify hyphen client let me make
24:36 - sure that's correct
24:37 - looks like it is all right so now that
24:38 - we have required the
24:40 - correct resource here we need typing dna
24:42 - verify client we're going to create an
24:43 - instance of it and then pass through all
24:45 - of our credentials
24:46 - so the application id the client id and
24:49 - the client secret the three things that
24:50 - we need to actually kind of you know
24:52 - verify our application with typing dna
24:54 - so we're going to say var and then this
24:57 - is going to be typing
24:58 - dna clients like that is equal to new
25:02 - and then this will be typing dna client
25:04 - uh sorry typing dna
25:07 - verify client and then what we are going
25:10 - to pass here
25:11 - is an object that has the following the
25:14 - first thing that we need
25:15 - is the client id we then need the client
25:19 - secret or is it just called secret let
25:21 - me see what i've called here okay it's
25:22 - just secret
25:24 - okay so just secret like that and then
25:28 - lastly we need the
25:29 - application id okay so we have
25:33 - all of these three values uh they're on
25:35 - the typing dna website so we're gonna
25:37 - open that up
25:38 - i'm gonna go that's the wrong browser i
25:40 - have too many browsers here
25:42 - this is the correct browser i'm going to
25:43 - go to my verified dashboard here
25:45 - and then notice i have my client id
25:47 - secret and then the application id so
25:49 - i'm going to grab the client id
25:51 - i'm going to put it inside of here make
25:52 - sure it's in a string okay there we go
25:55 - now we need to go grab the rest of them
25:58 - so we'll grab the client secret
26:00 - i'm going to expose mine for now
26:01 - obviously by the time you guys watch
26:02 - this i will have deleted this account
26:04 - so that you guys can't hack me okay so
26:06 - we'll put our secret in
26:08 - and then lastly we need the app id we
26:11 - can go ahead
26:12 - and grab that one all right
26:16 - okay so let's paste that there this
26:18 - looks good
26:19 - i messed something up here okay save
26:21 - that and there you go nice auto format
26:23 - beautiful now we have the id the secret
26:26 - and the application id
26:27 - we've created the typing dna client and
26:29 - we've kind of instantiated
26:31 - this module and you know hooked up
26:33 - typing dna at least
26:34 - from the kind of beginning all right so
26:36 - there's two sides to typing dna
26:38 - we have the back end and we have the
26:39 - front now the back end is responsible
26:42 - for sending requests
26:43 - to typing dna to get information that we
26:46 - need
26:46 - to render the front end button properly
26:49 - so the only thing we're showing on the
26:50 - front end
26:51 - relevant to typing dna is a single
26:53 - button that has some special information
26:55 - on it and then that button will render a
26:58 - pop-up
26:59 - and that pop-up is completely handled by
27:01 - typing dna specifically by this verify
27:03 - client and that deals with the
27:05 - two-factor authentication codes
27:07 - and all of the stuff that we don't want
27:08 - to look at however we do need to send a
27:10 - request
27:11 - from the back end to typing dna to get
27:14 - some attributes that we need to
27:15 - pass to the button in the front so i'm
27:18 - going to show you how we can do that
27:20 - but i want to go to the verify
27:22 - documentation and just quickly walk you
27:24 - through it so everyone's clear on what's
27:25 - going on
27:26 - so you go to the dashboard and you go to
27:28 - documentation it will bring you to a new
27:30 - page
27:31 - and now i'm just going to kind of show
27:32 - you how exactly you do this
27:34 - and by the way you can refer to this in
27:35 - case there's anything here that i don't
27:37 - show you
27:37 - so notice you have a back end and a
27:39 - front it's saying get the verify client
27:42 - we have that already okay initialize the
27:44 - verified client we just did that we put
27:46 - in the id the application id and the
27:47 - secret
27:48 - obviously you would keep the secret
27:49 - secret but for our purposes just
27:51 - tutorial that's fine
27:52 - and then it says pass user data to the
27:54 - front okay so once initialized
27:56 - the next step is to retrieve the end
27:58 - user data in the back end for encryption
28:00 - and linking with the front end button
28:01 - created in the next step
28:03 - so what we need to call is this get data
28:05 - attributes method
28:06 - and we pass uh the email phone number or
28:09 - whatever it is
28:10 - either or to typing dna then what it's
28:13 - going to return to us
28:14 - is three things it's going to return to
28:16 - us i believe the client id
28:18 - the application id and then it's going
28:20 - to give us a payload now all three of
28:22 - those things
28:23 - we need to actually render our front end
28:25 - button because based on those pieces of
28:27 - information
28:28 - the button is going to show a different
28:29 - pop-up so you can kind of read through
28:31 - this and see exactly how it works
28:32 - but essentially this is telling us hey
28:34 - once you figure out what user it is
28:36 - that's signing in whether you have their
28:38 - email
28:38 - or their phone number you got to send
28:40 - that to us we're going to send you
28:41 - something back and then you can use that
28:43 - to render your front end button so
28:45 - that's really the main step in the back
28:47 - end is to
28:47 - use this okay next though we need to
28:50 - render the front end button and the way
28:52 - we do this is we integrate this script
28:54 - in our html so we put this in the head
28:56 - of our html document
28:58 - and then we need to put this button on
29:00 - the screen with the appropriate
29:02 - information
29:03 - so this right here returns to us these
29:06 - three things right
29:07 - the client id the application id and the
29:09 - payload and then we pass the name of a
29:11 - function
29:12 - that we want to be called once the
29:14 - authentication is done
29:16 - so once the authentication is done it's
29:18 - going to have a callback method that it
29:20 - calls this is a method or function that
29:21 - we implement ourself
29:23 - and then from there we can handle you
29:25 - know any errors or pop-ups or
29:27 - whatever it may be okay hopefully that's
29:29 - clear but that's kind of the process
29:30 - pretty straightforward what i'm going to
29:32 - do though is actually i don't need to
29:34 - copy this we'll just write it from
29:35 - scratch
29:36 - okay so what i want to do because i want
29:38 - to keep this super simple
29:39 - as as soon as i go to this verify page
29:42 - here i want to immediately
29:43 - send my email to typingdna and get the
29:47 - three pieces of information
29:48 - the id the application id and the
29:52 - payload that i need to render my front
29:54 - end button i then want to pass those
29:55 - pieces of information
29:56 - to my front end template here and then i
29:59 - can actually display the button on the
30:01 - screen
30:01 - and then when i press the button i can
30:03 - well be verified
30:04 - so let's do this so what i'm going to do
30:06 - here let me just look at my
30:08 - cheat sheet is say let actually i don't
30:10 - even need a let i think i can say const
30:12 - typing dna and then this will be
30:16 - data attributes
30:19 - is equal to and this will be typing dna
30:23 - client notice not verify client it's
30:24 - typing
30:25 - dna client dot and then this is get
30:28 - data attributes you can see we're
30:30 - getting that completion there and then
30:32 - inside of here we're passing an
30:33 - object and what we want to pass is the
30:35 - following want to pass an
30:36 - email want to pass an optional phone
30:39 - number the email is optional as well if
30:40 - you pass the phone number
30:41 - you need one of the two and then we can
30:44 - optionally pass the following
30:46 - a language which is going to be en for
30:49 - english
30:49 - and then a mode now explain the mode in
30:52 - a second but for now we're just going to
30:53 - use
30:54 - standard okay so what we can do here is
30:56 - we can either pass an email or a phone
30:58 - number
30:58 - we don't have to pass them we can pass
31:00 - both but we have to either have an email
31:02 - or phone number
31:03 - in my case i'm just going to do an email
31:05 - so for the phone number i'll just leave
31:06 - it blank so i'll just put it as an empty
31:08 - string
31:08 - and for the email i'm going to use that
31:10 - same email that i've been using for
31:12 - everything so code racer
31:14 - live stream app gmail.com so this is
31:18 - where you would put the user's email so
31:19 - usually you would collect an email from
31:21 - them and then you would put that into
31:22 - this field but since i don't even want
31:24 - to deal with doing that we'll just hard
31:26 - code in an email we'll always have this
31:27 - user here
31:28 - okay so let's save that that's good
31:31 - these two things are optional
31:32 - you can change the language right now i
31:34 - think it's only english that's supported
31:36 - in the future they will have more
31:37 - languages and then there's another mode
31:39 - here
31:39 - that's not standard called show otp now
31:43 - otp is that one time password right
31:45 - so let me go to verify here and let's
31:48 - see if it says anything about the mode
31:49 - all right so i've found the two modes
31:51 - here now you guys can pause and read
31:52 - these if you like again they're in the
31:53 - documentation though which i'll link in
31:55 - the description
31:56 - essentially the show otp mode just means
31:59 - that you are actually going to be
32:00 - shown what the one-time password is so
32:02 - the user will get shown that and they'll
32:04 - have to type that
32:05 - in to the field so you can see it says
32:07 - after the verification process is
32:08 - finished and the user has
32:09 - inserted the code into the input field
32:11 - on your front end a request to the back
32:13 - end is made
32:14 - so they'll get the one-time code and
32:15 - then they have to insert it manually
32:17 - whereas here the one-time code will just
32:19 - automatically be applied so they don't
32:21 - have to type it in
32:22 - again read through if you want all the
32:23 - details standard mode is just simpler i
32:25 - would just recommend you go with
32:26 - standard mode but some cases you might
32:28 - need to use this mode
32:30 - okay so now that we understand that what
32:32 - we're going to do is
32:33 - leave the mode as standard obviously and
32:36 - we are going to actually check if this
32:37 - is working and we're going to have a
32:39 - look at what the typing
32:40 - dna data attributes the attributes sorry
32:43 - r
32:44 - so i'm going to go here and just say
32:45 - console.log i'm going to log
32:47 - the typing dna data attributes and i am
32:50 - going to
32:51 - end my server by hitting control c and
32:54 - re-running
32:55 - okay so now what i will do is go here
32:58 - i will refresh and then notice here we
33:00 - get
33:01 - this we get a client id application id
33:03 - and a payload so these are the three
33:05 - things that are being returned to us
33:07 - now all three of these things we need on
33:09 - the button that we're going to render on
33:11 - the screen so now what we're going to do
33:12 - is render that button
33:13 - so we're going to go to our verify.pug
33:16 - template
33:16 - i'm just going to go back to the
33:17 - documentation here i'm going to start
33:19 - copying some of the things that we need
33:21 - so notice here we need this script so
33:24 - i'm going to copy this script it comes
33:26 - from a cdn so it's really easy to use so
33:28 - copy this
33:29 - all right so we're in the template what
33:30 - i'm going to do now is use the pipe
33:32 - operator and then put my script i'm
33:33 - going to put a tab here so the
33:34 - indentation is correct
33:36 - what this does is this makes it so this
33:38 - is read as plain text
33:40 - and essentially this just means that we
33:41 - can embed html tags
33:43 - in this kind of weird syntax pug
33:46 - template i'm definitely not an expert
33:47 - with pug
33:48 - but you just put this and then it forces
33:50 - this to actually be read as html
33:52 - which is what you want okay nice so we
33:54 - have that the next thing that we need to
33:55 - do here is we need to actually add a
33:57 - button
33:58 - so if we look here at the documentation
34:01 - this is the button that we need so let's
34:02 - just copy this button for now and then
34:04 - we'll
34:04 - modify it as we need so we're going to
34:06 - copy the button
34:07 - and notice this is not kind of showing
34:09 - up properly here right and the reason
34:11 - for this
34:12 - is that when we're inside of pug the
34:13 - syntax is a bit different
34:15 - what we actually need to do instead is
34:17 - say button
34:18 - open parentheses and then closing
34:21 - parentheses like this
34:22 - and then after this closing parenthesis
34:25 - this is where we can put
34:26 - the name of our button so in this case
34:27 - it's verified with typing dna so i'm
34:29 - going to put verify with typing dna
34:31 - okay i'm going to remove that last angle
34:32 - bracket i'm going to save that
34:34 - and now what we need to do is change
34:36 - these attributes here
34:38 - so for now i'm going to make all of
34:39 - these empty strings
34:41 - and also inside of this kind of
34:42 - templating language here
34:44 - you need to separate all these
34:45 - attributes with commas so that's really
34:47 - the only change we need to make
34:49 - we will fill these in in a minute but i
34:51 - have to show you how we can pass values
34:52 - to the template
34:53 - so we have typing dna verify that needs
34:56 - to be the class
34:56 - make sure that's the class of this
34:58 - button otherwise it won't work and then
34:59 - you're going to put these
35:00 - four things and then we'll implement the
35:02 - callback function in a minute we'll
35:03 - actually just do it right up here
35:05 - okay so now that we have that let's stop
35:08 - our server
35:09 - let's rerun it and let's see if we get a
35:11 - button showing up on the screen when we
35:12 - refresh now
35:13 - okay so when we refresh we get verified
35:14 - with typing dna when we press the button
35:16 - notice nothing's happening
35:17 - that's because we don't have the client
35:19 - id application id or payload
35:22 - and if we go to the console of our page
35:24 - we go
35:25 - inspect and we look at the console
35:27 - notice it tells us it's missing the
35:29 - application id
35:30 - great so we now need to figure out how
35:31 - to pass those things through so what
35:33 - we're doing here is as soon as we go to
35:35 - this route we're immediately getting the
35:36 - information that we need the typing dna
35:38 - data attributes we now need to
35:39 - pass this to our template so what we're
35:42 - going to do
35:43 - is we're going to create an object we're
35:45 - going to slowly kind of extract
35:47 - all of this stuff inside of here so
35:49 - we're going to say
35:50 - that the client id and actually now that
35:53 - i think about it
35:54 - what we can do here instead is we can
35:57 - just pass
35:58 - the typing dna data attributes so what
36:01 - resda render takes is it takes the name
36:03 - of the template and then an
36:04 - object of key value pairs to be passed
36:08 - as kind of parameters or values
36:10 - to the template that can be used inside
36:12 - of the template and so typically you
36:13 - would do something like you know
36:14 - message and then hello and then inside
36:17 - of this template you can directly access
36:20 - this variable
36:20 - hello and that allows you to use it
36:22 - inside of the template
36:24 - so here since this is already an object
36:26 - that has client id
36:28 - application id payload we can just pass
36:30 - this and i think this will work
36:32 - i might be incorrect but i believe that
36:34 - will work so we'll leave it like that
36:35 - for now
36:36 - now though we need to go inside of the
36:38 - verify template
36:40 - and the way that we're going to access
36:41 - all of these things is we're actually
36:43 - going to use
36:43 - back ticks we're going to use a dollar
36:46 - sign
36:47 - and then the two or the curly
36:49 - parentheses sorry and inside of here
36:50 - we'll use
36:51 - just the name of what's in the object so
36:53 - client id
36:54 - application id and payload to access
36:56 - those respective values so we're going
36:58 - to say client id
36:59 - i'm going to copy this actually you know
37:02 - it's probably easier if i just retype it
37:04 - so dollar sign like that i'll just copy
37:07 - that line
37:08 - and then this will be application id so
37:11 - let's say application id
37:13 - and then finally this is going to be the
37:16 - payload
37:17 - okay so if we save this now this should
37:19 - allow us to access
37:21 - these values and use them directly as
37:24 - the value for these kind of properties
37:26 - of the button hopefully that's all clear
37:29 - let's
37:29 - restart this so let's close the app
37:31 - rerun it
37:33 - let's now go here and refresh okay
37:36 - and now notice if we look at the source
37:38 - that we're actually getting the client
37:39 - id
37:40 - the application id and the payload all
37:42 - right so what we can do now is we can
37:43 - just test this the button is showing up
37:45 - we have all the stuff in the source here
37:46 - we have the payload the application id
37:48 - and the client id let me just refresh
37:50 - this one more time and you'll notice
37:51 - that every time i refresh this
37:53 - the payload should change the reason for
37:56 - that is every time
37:57 - i do this we're sending a new request to
37:59 - typingdna we're getting a new payload
38:02 - now though let me press verify with
38:03 - typing dna when i press it
38:06 - notice this appears pop-up is here that
38:08 - means all is working
38:09 - we can you know have a sigh of relief
38:11 - all of our hard work has paid off
38:12 - and now i can start typing okay so
38:15 - yellow toothbrush
38:16 - socks and fireman okay let's verify
38:20 - and there you go verified now the thing
38:23 - is we actually don't know
38:25 - like if that verified or not now we do
38:26 - know it verified because it would show
38:28 - us a message
38:28 - but we haven't implemented the callback
38:30 - function so for now
38:32 - let's implement the callback function
38:33 - and let's just print out
38:35 - what's actually being sent to the
38:36 - callback function so we can see
38:38 - what's going on after this button is
38:40 - pressed so what i'm going to do is i'm
38:42 - just going to
38:42 - make a script here i'm going to do
38:44 - actually in plain text
38:46 - again i'm going to say script and
38:49 - then script like that i'm just going to
38:51 - write some very basic javascript
38:53 - i'm going to make a function i'm going
38:55 - to say function
38:57 - and we are going to call this function
38:59 - callbackfn
39:00 - you can call it whatever you want but if
39:02 - you call it something else you have to
39:03 - change this
39:04 - to be whatever the name of it is so
39:05 - notice these are of course the same
39:07 - this is taking a payload and then all
39:09 - we'll do is just say console.log
39:12 - payload like that okay so let's just do
39:15 - that let's restart the server
39:17 - and now we will refresh the page
39:20 - okay verify with typing dna we'll type
39:23 - yellow
39:24 - toothbrush socks fireman okay
39:28 - i don't know how i managed to mess that
39:29 - up verify
39:31 - and then notice it gives us success when
39:33 - success is equal to one that means yes
39:35 - this was successful
39:36 - and the otp which is the one-time
39:38 - password now i'll show you how we can
39:40 - use this in a minute to do an additional
39:42 - verification but that means that we all
39:44 - look good okay now let me try to make
39:45 - this fail
39:46 - so let's go and i'll just type with one
39:49 - hand
39:50 - okay i'm actually going to type with my
39:52 - pinky and then hopefully this will
39:54 - mess it up okay toothbrush
39:58 - socks fireman
40:02 - okay verify and verification failed
40:04 - please position yourself naturally and
40:06 - try again okay so i'm gonna try
40:08 - to fool it because i want to show you
40:10 - how it sends me the one-time code
40:14 - okay to brush socks
40:18 - and then fireman okay verify
40:24 - typing verification fail okay so now
40:25 - it's saying all right a six digit code
40:27 - was sent to your email
40:28 - enter the code below so let me just go
40:29 - refresh my email and grab the code here
40:31 - all right so i was having some issue
40:32 - with my email there so i ended up just
40:34 - closing out of that pop-up
40:35 - doesn't matter just want to show you
40:37 - what actually happens when you fail the
40:38 - typing biometrics
40:40 - what i'm going to do now is show you how
40:42 - we can add one extra layer of security
40:44 - here
40:45 - and what we're going to do is we're
40:46 - going to go inside of our callback
40:48 - function
40:48 - and we're actually going to render a new
40:50 - page and this new page is going to show
40:53 - us
40:53 - the result of what just happened in the
40:55 - pop-up because you see
40:56 - that after we close the pop-up right or
40:59 - after
41:00 - we do the verification the screen
41:02 - doesn't change
41:03 - we don't see anything and what's
41:04 - actually being sent to our callback
41:06 - function
41:06 - is whether or not that thing was
41:08 - successful whether or not the
41:09 - verification was successful
41:11 - and the one-time password the thing is
41:13 - we want to make sure that the one-time
41:16 - password
41:16 - sent to our callback function is
41:18 - actually correct and so we're going to
41:20 - do an additional verification with
41:22 - typing dna
41:23 - there's a method that we can use very
41:24 - simple we're going to send the one-time
41:26 - password to typingdna
41:28 - and just ask it hey is this the correct
41:30 - one-time password
41:31 - after we've gone that one-time password
41:34 - from the
41:34 - typing biometrics authentication so the
41:37 - basic flow is click the button
41:38 - you know do your typing verification
41:41 - one-time password is sent through the
41:42 - payload to the callback function
41:44 - callback function renders a new page new
41:46 - page verifies that the one-time password
41:48 - is correct
41:49 - and then we're good your user is
41:51 - authenticated so let's do that
41:52 - now the thing is i need to send this
41:54 - one-time password to the new page that i
41:56 - can actually verify
41:57 - right and the way i'm going to do that
41:59 - for my callback function is i'm just
42:00 - going to change the location
42:02 - of the window so i'm just going to
42:03 - redirect us and using one of the query
42:05 - parameters so the things that shows up
42:07 - in the address bar
42:08 - i'm going to pass the one-time password
42:10 - and i will pass the success message
42:13 - so the way i'm going to do this is i'm
42:14 - going to say window dot
42:17 - location is equal to window dot origin
42:21 - and then this is going to be plus slash
42:23 - result
42:24 - and let me just save this okay i might
42:27 - just have to keep scrolling that's fine
42:28 - window location is equal to
42:29 - window.origin plus result
42:31 - plus question mark this is going to be
42:34 - otp
42:35 - equals plus and then payload
42:39 - dot otp plus and then this is going to
42:42 - be ampersand
42:45 - success equals and then plus and then
42:48 - this is going to be payload
42:49 - dot success so what this will end up
42:52 - looking like
42:52 - uh and sorry let me just scroll so you
42:54 - guys can see this here
42:56 - is the following so pause that if you
42:58 - want to see that but
42:59 - it's going to look like this so let me
43:00 - go down here we're going to have
43:02 - whatever the origin of our pages so just
43:04 - the root domain so let's just say for
43:06 - now it's localhost
43:07 - colon3000 this is going to be slash
43:09 - result
43:10 - and then equal sign denoting that
43:12 - there's parameters
43:13 - we're going to have otp equal to some
43:16 - numbers okay
43:17 - ampersand success equals one or zero
43:21 - whether we failed or whether we
43:23 - succeeded in the verification then this
43:25 - way
43:26 - from app.js we'll be able to set up a
43:28 - new route called slash result
43:30 - we'll be able to grab all of those query
43:31 - parameters and we'll be able to send the
43:33 - request to typing dna
43:34 - so let's actually do that now we're
43:36 - going to say router dot
43:38 - and get this is going to be slash result
43:41 - we're going to do the same thing request
43:44 - uh
43:45 - response sorry arrow function
43:48 - goes to this okay and then inside of
43:51 - here
43:52 - for now we are just going to say
43:54 - res.render and we'll have a new template
43:57 - this template will be result and for now
43:59 - we're not going to pass anything to it
44:01 - so just go back to verify.pug you can
44:03 - see that we are doing window.location
44:05 - that just changes the route so that's
44:06 - just going to redirect us
44:08 - redirects us to the result page we then
44:10 - set up the result root we now need to
44:11 - make the new template which is going to
44:13 - be
44:14 - results.pug okay so in result.pug
44:17 - we'll keep it simple we'll go html we'll
44:20 - go body we don't even need
44:22 - a head and for here we'll just say h1
44:25 - results for now just that we see
44:27 - something okay so let's rerun our server
44:30 - and let's refresh this okay refresh
44:34 - and now we're going to go verify with
44:36 - typing dna and now we're going to
44:38 - just type this in yellow
44:41 - toothbrush socks fireman
44:44 - verify okay good brings us to the result
44:48 - page
44:48 - nice so now we need to actually look at
44:50 - these parameters notice we have result
44:52 - we have our otp
44:53 - and we have our success so we're going
44:55 - to look at those parameters we're going
44:56 - to pass them
44:57 - to the template and we're going to
44:59 - display them here so we can see what the
45:00 - one time password is
45:01 - and we can see whether we were
45:02 - successful or not and then of course
45:04 - we're going to send that verification to
45:06 - typing dna
45:07 - just to be like okay was this one-time
45:09 - password correct
45:11 - so we can actually start with that when
45:12 - we go to the result page i need to look
45:15 - here what we're going to do is we're
45:16 - going to get
45:17 - the one-time password and the success
45:19 - we're going to say const
45:20 - otp is equal to and this will be request
45:23 - dot
45:24 - query dot otp query holds all of our
45:27 - query parameters the things you see in
45:29 - the url address bar
45:30 - and then we're going to say const
45:33 - success
45:34 - equals request dot query dot and this
45:37 - will be
45:37 - success nice now we can pass these
45:40 - through
45:40 - so we can just say otp comma success and
45:44 - i think we might have to do this so i'll
45:46 - just do this
45:47 - otp otp and success success
45:51 - now if we go to the result template here
45:54 - what i can do is i can say h2 is
45:57 - equal to and i can just put the name of
45:59 - the otp so
46:01 - put otp and then i can say h2 is equal
46:03 - to
46:04 - success like that okay so what this is
46:07 - doing is it's actually going to use
46:09 - this right here it's going to use
46:11 - whatever otp is that i pass through
46:13 - and whatever the success is so you'll
46:14 - actually see the one-time password
46:16 - and you'll see the success uh that's
46:18 - kind of how the
46:19 - syntax works for pub okay so let's
46:22 - restart this
46:23 - i'm gonna go here refresh
46:27 - okay and now notice when i refresh it's
46:29 - showing me that one-time password and
46:31 - it's showing me the success
46:32 - message nice now though what we will do
46:36 - is we will send this kind of validation
46:39 - to
46:39 - typing dna so the way we do that is we
46:42 - say typing
46:43 - oops like this typing dna and this will
46:46 - be
46:47 - client and then this is going to be dot
46:50 - validate otp and we're going to pass
46:53 - here
46:54 - the email of the user we want to
46:56 - validate the one-time password for
46:58 - so in this case it will be the same
46:59 - email we passed before
47:01 - okay if you were using phone number you
47:03 - would pass the phone number here
47:05 - and let me just look at my cheat sheet
47:07 - to make sure i'm not messing this up
47:08 - yeah so
47:09 - we can put optionally phone number
47:12 - empty string and then you could make
47:14 - this a valid phone number obviously the
47:16 - phone number of the user you wanted to
47:17 - validate and then you're going to pass
47:19 - as a separate parameter notice these are
47:21 - two different parameters here there's an
47:22 - object and then the one-time password
47:24 - you're just passing the one-time
47:25 - password okay so that will send the
47:27 - request but then what we need to do is
47:29 - wait for a response we're going to say
47:31 - dot
47:31 - then we're going to say data like that
47:35 - and then what we're going to do is have
47:37 - a function here where we actually look
47:38 - at this data so for now i'm just going
47:39 - to say
47:41 - console.log data but in a minute we'll
47:44 - actually
47:45 - use this data okay so there we go now as
47:47 - soon as we go to the result page we're
47:49 - actually going to validate sorry the
47:51 - otp like that and then we'll pass the
47:54 - email of the user we want to validate
47:56 - for
47:56 - or the phone number and then of course
47:57 - the one-time password which we're
47:59 - getting
47:59 - from that page nice so let's go now and
48:03 - let's just start the process again
48:05 - so let's go to slash verify
48:09 - okay we're going to verify with typing
48:11 - dna
48:12 - we're going to type this in yellow
48:14 - toothbrush
48:16 - socks fireman i don't know how i keep
48:19 - making the same
48:21 - spelling mistake but there you go okay
48:23 - and then notice we get results
48:25 - uh two four seven six five six one but i
48:28 - didn't see anything logging ah sorry
48:30 - that's because i didn't restart the
48:31 - server
48:32 - okay gotta restart the server and we'll
48:34 - redo this again
48:35 - okay so let's go back to slash verify
48:39 - let's go verify with typing dna
48:43 - yellow toothbrush socks
48:46 - farm okay verify and
48:50 - then we're still not getting anything
48:51 - printing out okay this is interesting
48:54 - that i'm not seeing this
48:55 - so give me a second guys and i'll be
48:56 - right back okay so it turns out i was
48:58 - thinking for some reason that it was
48:59 - gonna show this
49:00 - on the web page but instead it's showing
49:02 - it right here so this actually is
49:04 - working we're seeing it says success 1
49:06 - code 19 message otp given matches shows
49:09 - us the session id and gives us the
49:10 - status code
49:11 - so we are getting this so what we're
49:13 - going to do now is we're going to pass
49:15 - through this message that's really the
49:16 - only thing we care about from this
49:18 - to our result page and display that
49:20 - message so what we need to do
49:22 - is we need to put the res.render inside
49:25 - of here
49:26 - and then what we're going to do here is
49:28 - say that the message
49:30 - is equal to data dot message okay
49:34 - all right so let me save this and now
49:36 - what's going to happen is we're going to
49:37 - pass through a message which is whatever
49:39 - the data dot message
49:41 - is and then we'll display that message
49:43 - so let's go ahead and do that i'm going
49:45 - to go to verify
49:46 - sorry result.pug i'm just going to say
49:48 - h2 is equal to
49:50 - message and now we should see the
49:52 - message
49:53 - of course after we send this response
49:56 - nice now just for
49:57 - good measures here we'll add a catch so
49:58 - we'll say catch
50:00 - we'll say e and then we'll do the same
50:02 - thing
50:03 - we'll say res.render but this time
50:06 - for the message we'll just render e so
50:09 - whatever e is i
50:10 - need to get rid of that so whatever the
50:12 - error actually is we'll just display
50:14 - that nice uh and actually i think we
50:16 - have to say e.message
50:17 - let me check if that's the way to do it
50:20 - no i think it is just actually e
50:23 - okay nice so i think we've done almost
50:25 - all of the code i'm going to restart the
50:26 - server here and let's just do this again
50:28 - from the beginning so let's go to our
50:30 - website
50:31 - let's go to oops slash
50:35 - verify all right and now let's verify
50:38 - with typing dna
50:39 - okay so yellow
50:42 - toothbrush socks fireman okay
50:46 - verify and then notice it brings us to
50:49 - this page we get results we have the
50:50 - one-time password one and we have the
50:52 - otp given matches
50:54 - after we send that request nice now the
50:57 - last thing i want to show you is the
50:58 - logs here so if you go to typing dna and
51:01 - you go to the dashboard and you go to
51:03 - logs you will see all of the stuff that
51:06 - you have sent
51:06 - so notice the stuff in red is things
51:09 - that were not verified right
51:10 - and then you have the stuff in yellow
51:12 - which have been partially verified and
51:13 - then you have green which means you are
51:15 - good to go
51:16 - because you validated the otp so after
51:19 - the otp was received you
51:20 - sent it back to typingdna it validated
51:23 - that it was indeed correct and then it
51:25 - was like okay you're good
51:26 - you have successfully authenticated your
51:28 - user
51:29 - so that is kind of the flow there you
51:31 - need to make sure you do that last step
51:32 - which is you send the one-time password
51:35 - that you receive
51:36 - in the payload of the callback function
51:39 - back to typing dna
51:40 - it gives you a response you can look at
51:42 - that response and then determine whether
51:44 - or not that one-time password is
51:45 - correct okay so let me zoom out here
51:47 - just you guys can view all this code
51:49 - all this will be on github so you can
51:50 - check it out from there as well
51:52 - but this is kind of what we're looking
51:53 - at here we have our first root which is
51:55 - for verify
51:56 - we have our other one which is for
51:58 - result and then of course all the other
52:00 - stuff we need to do for the setup
52:02 - pretty straightforward for our result
52:04 - page we're just displaying some of those
52:05 - variables we're passing through and
52:07 - rendering
52:07 - uh and then we have verify.pug we need
52:10 - to make sure we have this script inside
52:12 - of here
52:13 - we have our payload callback function
52:15 - again you can change the name of this if
52:16 - you change
52:17 - this here we then are showing this
52:19 - button this button has all the important
52:21 - information that we need if you didn't
52:22 - have this information well you saw you
52:24 - get an error
52:25 - and then when we press this button it
52:26 - starts that whole process right and i
52:28 - think with that i'm going to conclude
52:30 - the video so there's not really much
52:32 - more that i can talk about i know this
52:33 - was a simple integration and that you
52:35 - know it might have taken a long time for
52:36 - me to explain
52:37 - but wanted to make sure i really got
52:38 - through everything and made sure you
52:40 - guys weren't running into any errors at
52:41 - all with this so let me know what you
52:43 - guys think
52:43 - but one last thank you here to typing
52:45 - dna again they have sponsored this video
52:48 - but we have a great relationship and
52:49 - they really are just an awesome company
52:51 - that is really developer focused and
52:53 - wants to help you guys be able to
52:54 - implement this stuff as fast as possible
52:56 - that's why they've made this new verify
52:58 - api again reminder i have a video on the
53:00 - original authentication api
53:02 - this is a little bit more difficult to
53:04 - use but it is a bit more versatile
53:06 - whereas the verify api is just super
53:08 - simple and you see it brings this nice
53:09 - pop-up
53:10 - and everything just works nicely all
53:12 - alright so with that said if you guys
53:14 - enjoyed make sure you leave a like
53:15 - subscribe to the channel of course check
53:17 - out typingdna from the link in the
53:19 - description
53:19 - and we'll see you in another youtube
53:22 - [Music]
53:26 - video

Cleaned transcript:

hello everybody and welcome to the youtube video so in today's video i'm going to be showing you how we can use typing biometrics as a form of twofactor authentication to verify users that are signing in or creating accounts on our website or platform now this technology is really really cool a company called typingdna has two apis one called the authentication api another called the verify api and in this video i'm going to be showing you their new api which is the verify api which is a much simpler version of what i'd actually shown previously on this channel which was their authentication api so if you're a little bit confused essentially what this means or what i'm going to be showing you here is how you can have a twofactor authentication method that does not involve the user constantly having to type in twofactor authentication codes so sms codes or email codes it actually uses their typing pattern and they're typing biometrics to verify them now of course if that verification fails there will be a twofactor authentication code sent to the user but this is great and there's a lot of advantages behind using this typing biometrics as your kind of default twofactor authentication rather than constantly sending twofactor authentication codes now i do need to mention that this video is sponsored by typing dna they have paid me to create this but i've been working with typing dna a lot recently i think we've done maybe three or four different collaborations already they're a great company they have great technology and i think you guys are going to be excited to see what we can do here and how simple it is especially compared to the last api which was their authentication api which again if you want to check out the video for i have a link in the description i'll kind of throw up the thumbnail and a card for it on the screen right now regardless let me just kind of show you how this working works sorry and then talk to you about some of the advantages so let's actually just go and look at the demo so what i'm going to do is just go over here to typing dna verify and start the demo okay so the first thing you need to do here is enter a phone number or enter an email now what i'm going to do is enter kind of a dummy email that i set up previously that i just use for videos like this it's called code racer live stream app at gmail.com i'm going to start the demo it says okay you want to verify with typing dna yes i do so i'll press verify with typing dna a popup comes up it asks me to type in the following and notice as i'm doing this it is tracking my typing pattern so yellow toothbrush socks firearm okay let's verify this time only to register you have to type two more times okay so let's do that yellow toothbrush socks firearm okay and then yellow toothbrush socks and firearm now notice i spelt this wrong so i need to go back and fix this okay i agree and now next all right let's see what it says here almost there email verification a six digit code was sent to your email enter the code below i'm gonna grab that code i'll be right back okay so i've got the code i'm going to press next and now you're going to see that it verified me successfully so what i just did here was enroll my typing pattern kind of create an account with typing dna if you want to think of it like that and now every time i try to sign in so let's actually go ahead and do this i'm going to try to sign in with my email here you're going to see that it's going to actually use my previous typing patterns to authenticate me here so now this time when i type yellow toothbrush socks and then firearm of course i'm going to make typos there i'm going to press verify and then it says my verification was successful my typing pattern here matched the typing patterns i enrolled with it previously all right so that was kind of the demo and explanation of typing dna verify now our implementation here is going to be using node.js express and then pug for the front end you can see the front is extremely simple if you don't know any of those technologies don't worry we're hardly using them it's just to have a really basic web server running and what we're going to do here is have a button it's going to say verify with typing dna and then same way as before you're going to type in your stuff okay notice i typed this wrong so i need to fix it i'm going to press verify and then you're going to see that it's going to verify the typing pattern now the reason it's not asking me to insert an email is because the email is hard coded in the back end but if you wanted to not have the email hard coded that's super simple again this is just meant to give you the simplest implementation so then you can go and extend it and add to it and actually maybe add it into an app that you already have there you go so that's what we're going to be doing again we're using express nodejs and then pug for the front end but really minimally for all of those okay so what i'm going to do now is just quickly show you i'm going to go back to just the typing dna website i just want to quickly show you some of the core advantages of actually doing this of having this type of authentication so if i go to verify and i press learn more it's going to redirect me here and i'll just kind of go through the website because they laid out pretty nicely but first of all this is a much better user experience when you have people just able to type something in really quickly and have them authenticated from that rather than having them have to go to their phone or open their email or whatever wait for a code to come in and then insert that code it also keeps your sms costs low right and it uses the sms codes or the email code sorry as the root of trust not the de facto authentication so it's not the default method it's only what you go to when the actual verification fails from typing and then of course this is state of the art authentication this is actually really good i'm always really impressed at how well this typing biometric stuff actually works i don't know exactly how it's implemented the technology behind it but i know it's very advanced proprietary and well just quite good okay anyways that is enough about this itself now what i want to do is start walking us through how we can actually implement this we're going to have to install and set up a few things let's go through those steps now all right so the first step here is going to be to create an account on typing dna now typing dna is completely free for the first year that you're using it for so don't worry about that just go to the typing dna website i'll have a link to it in the description and what you're gonna do is create an account so go to the verify page right and then press start for free and then what you're going to see is that it would bring you to a page we need to create an account now for me it's bringing me right to my dashboard because i've already created an account so at this point in time if you don't have an account pause make one and then resume the video and i'm going to go through the steps we need to follow once we're in our dashboard all right so we're in our dashboard now i've just set up a kind of brand new fresh account so i can go through the steps with you the first thing that we need to do here is we need to connect an sms gateway gateway sorry or an email gateway to our dashboard now the reason we need to do this is because we have to have either sms or email as kind of our two factor method right so if the verification fails from the typing biometrics we need to be able to send a code either via sms or via email to the user so we have to pick one of these or both of them if you want the users to be able to sign in with both phone or email in our case we're just going to do email here but if you wanted to do phone it'd be the exact same steps and i'll show you later in the video how you do this using sms the only change is that you're going to connect your twillow or twilo or however you say that rather than connecting the send grid okay but we're going to connect the send grid and the thing with this is this one is free if you use the sms it's going to cost you about 20 bucks to actually get started so let's go and connect an email gateway and notice it's telling us we have to type in a grid api and then our sender identity so this means we need to go to the send grid website so we're going to go to send grid like that and we're going to make a new account so i've already made account on sendgrid i'm going to sign into it here but for you guys what you'll need to do and let me just sign into this first is make a new account on sendgrid and then i'm going to show you once i get in here how you do all the configurations of course after i put in the two factor code okay so i'm in the send grid now again i already have an account created you guys have to make one first but once you make one it's going to ask you a few different setup steps most of them are intuitive i'm not going to walk through everything but what you do need to do once you're in the account and once you've verified your email and you've created your sender email and all of that is need to create an api key now the first thing i'm going to do is just see if i can go to the account details or the setup guide here and just make sure i can walk you guys through any steps that maybe are not intuitive so the first thing you need to do is create a sender identity i think this is pretty straightforward to walk through but you need to do that create a sender identity you can use the same email you used to sign up here i just made a random gmail email and use that as my sender identity next what you're gonna need to do is uh well actually not send your first email you're gonna need to verify that sender identity so you're gonna have to have access to that email account press the email it sends you and then you should be good you should have the sender thing set up once you've done that again you need to make an api token so what you're gonna do is go to settings you're gonna go to api keys and then you're going to make an api key now i'll just make one here so let's go ahead and do this i'm going to name this tutorial okay and then give it full access okay so give it full access make a tutorial and then it's going to show you this token now it only shows it to you one time so make sure you copy it immediately you're going to copy this token go over to your dashboard on typing dna and then you're going to paste that token in here okay next what you're going to do is type the email that you put in as the sender from send grid so it's possible to have an account with send grid that has a different sending email so if this email you're sending emails from is different then you're going to put that one here in my case they're both the same but whatever you put into uh send grid to actually send the emails to people that's the one that you want so here what i'm going to do is put in my email so this was what was it code racer live gotta spell that right live stream app at gmail.com okay code racer livestream app at gmail.com looks good and then you're gonna press this little upload button here it's gonna sync make sure it's all good and then if it says email gateway key saved you're good you see a little check mark and you've hooked up send grid so that's how you hook up send grid again pretty intuitive i figured this out pretty easily on my own but those are kind of the steps okay i'm going to press done now and then you'll see i have two api keys here it's fine you guys will just have one okay now what we're going to do is we're going to actually create an integration with typing dna so we have our client id and our client secret which we need but we also need an application id and this is because you can have multiple applications connected to typing dna so what i'm going to do is add my first integration this is really just like connecting an app to it and then what i'm going to do here is put the name so i'll just do tutorial and then the domain that this is going to be connected to so unfortunately we cannot use localhost for our development or testing for this we do need to use some real domain that is https so it needs to be ssl certified it needs to be https and so what we're going to do now is we're going to install a program called ngrok or ngrok sorry that's going to allow us to actually have this kind of temporary domain that points to localhost that we can use in development so we're going to do is go to ng rock we're going to download this tool i'll leave a link to all of this stuff in the description so just go and press download download for windows mac or whatever system it is that you are on and then what it's going to do when you download it let me just download this here to my downloads okay so let's download it here okay so once it's downloaded it's going to have a zip folder so what you're going to do is open up the zip folder you're going to see there's an application here and then you're going to cut this application out and you're going to put it somewhere that it's easily accessible so in my case i'm just going to go to the desktop i'm going to go to my typing dna tutorial folder i'm going to paste it inside of here so that i have ngrock this exe application in the folder that i use when i start writing some code okay so that's going to take a second once that's done i don't know why that's lagging then we have ngrock what we're going to need to do is now use ngroc to create our domain so let's go ahead and do that all right so i've just opened up the folder where i have ng rock now this is pretty easy to do or pretty easy to use but what you're going to need to do is open up a command prompt or terminal that is in the same directory as this file it doesn't matter where it is you just need to know where it is so you can open up a command prompt or terminal so i'm just going to open it in windows explorer i'm going to go to this top bar here i'm going to type cmd and that's going to open up my command prompt now what i'm going to do is type ng rock http and then 3000. now what this will actually do is it will create a temporary url i believe this url lasts for about two hours that actually forwards all of the requests from it to a port on your local machine so in this case we're going to run our server on port 3000 this is going to be http this is the protocol that we're using and so what this will do now is create a domain for us that accepts http requests and then forwards all of them to our local host and then the localhost will go back to the domain and the domain will return to wherever it was requested from so this will give us access to an https domain that we can use for testing purposes so if you do this and you run you're going to see that it says okay the session expires in two hours you have a version region a web interface and then what you want to look for here is this https domain so i'm going to copy that you want to copy this whole thing here and what we're going to do is notice by the way it's going to localhost 3000 we want to go back to typing dna and we want to insert our domain here but we want to make sure we remove the https so you just want the domain so all of these kind of random numbers and letters dot nggrok dot io so put that there then you're going to say create integration and it's going to show you the application id perfect we now have all the three things that we need to actually start working on our application so we've set up sendgrid we have ng rock going we have our client id our client secret and then this is known as our application id now what we need to do is actually start writing some code so the next thing we're going to need to do sorry is install node.js so i forgot you do need node.js so go to node.js again i'll link this in the description download the latest version if you don't already have that and then what i'm going to do is open up vs code i opened that folder that you saw i have ng rock inside of and this is where we'll set up our actual server and start doing all of the development so you can use whatever editor you want obviously vs code is just my preferred one so that's why i'm using it now what i'm going to do though is i'm going to open up the vs code terminal and i'm going to create a kind of starting or template express application in node.js so you can see here i've opened up my terminal notice it's in the typing dna tutorial folder again do this wherever you want i'm just doing this on a folder on my desktop what i'm going to type now is npx and then this is going to be express hyphen generator like that no i think i spell generator correctly yes it does or yes i did sorry and then i'm going to give this a name i'm going to call this website so what we're doing is we're going to use this kind of shortcut here that comes from node.js so npx express generator website and this will create a new folder for us named website that has all of the node stuff that we need to actually have an express application now a lot of the stuff in here we're not going to actually need and i'll show you how we can clean that up in a second but this will just save us a little bit of time okay so we did that and now notice it's going to create this website folder for us and there's a bunch of stuff inside of here now the first thing we're going to do is we're just going to start deleting stuff that we don't need so we're actually going to delete all of these folders here except for views so we're going to delete all of these bin public and roots we don't need those and then we're going to have to change some stuff in some of the other folders as well okay we're now going to go to views we're going to delete all of the files inside of views but we'll keep that directory because we will use that directory in a second then we're going to go inside of app.js and we're just going to start deleting stuff that we don't need so we don't need this cookie parser we don't need this logger we don't need these this index router or this user router we'll leave this for now we don't need any of this stuff right here so we can get rid of all of that we don't need any of these lines any of these app.uses we'll get rid of those we can leave this catch actually i'm thinking if we need this or not okay so actually i lied we are going to delete more stuff we're going to delete all of this okay and we are going to delete this create error thing and then this is what our file should look like for now really we could have probably just written this file from scratch on our own but it's fine i figured we could just use the shortcut and maybe it would save us a bit of time maybe not okay so now that we've done this we're just going to leave the file like this for now we're going to come back to it in a second but this but this is where we're going to write a lot of our code this is going to be kind of our server our back end and then i'll show you how we can set up the templates in the front end in a minute okay so now what we need to do is we need to install all of our node modules so we have this package.json and this has all of the dependencies that we need and actually if we go inside of here we can see that some of the stuff we don't need for example we don't need morgan we can remove that we don't need http errors we can get rid of that we do need debug but we don't need cookie parser okay so these are the three dependencies that we need for right now now uh what we can actually do is we can go and cd into our website folder so cd website and we can do npm install like this and what this is going to do is install all of these dependencies right here for us then we're going to add a few dependencies here that we need specifically related to typing dna and we should be good to go okay so you can see that was pretty fast we installed all the dependencies all of them are inside of the node modules folder now next what we're going to do is we're going to install puck so we're going to say npm install we're going to do hyphen capital s to save and then we're going to type pug pug is what we're going to use as our kind of templating engine in the front end so npm install hyphen s pug okay that one's going to take a second and then once that one is done what we need to do is install the typing dna verify client which is a nodejs package or npm package so now we're going to type npm install and then typing dna hyphen verify hyphen client okay so let's install that give that a second now it's worth noting here that if you are not going to be using javascript there is some other clients i believe there's one for php i think there's one for csharp as well and i believe more are being created so there's a lot of different ways to do this you don't just have to do this from an express or node application but this is definitely the simplest way and again even if you're not using this programming language i'd recommend you just follow along because this is going to explain a lot of stuff and probably save you a good amount of time going forward okay so we've installed all of the stuff that we need i'm just making sure we don't need anything else and at this point in time i think we're actually ready to start doing some development so we've got all of our package packages story installed and now what we are going to do is start working in this file right here so there's a few things that we need to set up here related to express the first is which a router so we need some way to actually handle all of our traffic and create different routes right so like slash home slash verify slash result etc so what we're going to do here is say var router is equal to and then this is going to be express dot router like that okay next what we are going to do is at the bottom of our program we're going to say app.use and then we're going to put a slash here and we're going to say router so this should give all of the traffic that's going to the slash root to the router so then it can handle what different routes we have on our website okay the next thing we need to do is we need to make this app actually start listening on a specific port so we need to actually run the server here so we're going to say app dot listen and then we're just going to put inside of here port 3000 sorry not 30 000 3000 and then we can just do a console.log here so console.log and we can say listening on port 3000 just so we know this is running we don't need the module that exports so we'll get rid of that and now we can actually just test this and see if it's working so far now right now it's not going to do anything we don't have any roots set up but we should be able to see if this is working so to run this what we're going to do is say node and then we are going to put the name so app.js okay it says listing on port 3000 we are all good that means this is working fine now we can start setting up some of our views and routes all right so now we're going to start setting up some of the templates and the different views of our application once we have the view set up then of course we can integrate typing dna we'll add that typing dna button and i'll show you how all that stuff works what we need to do though is we need to change our rendering engine here to be pug instead of jade so we're going to go ahead and make that change and then see we have this views folder this is where we're going to put all of our pug templates now if you're unfamiliar with pug templates don't worry i won't explain them a ton but they're pretty simple and easy to understand what i'm going to do is make a new file inside of views i'm going to call this verify.pug okay you should see that you're getting that little pug logo which i think is hilarious and now we'll just start creating our first template so this is pretty straightforward what you can do is do html the indentation is important here so make sure you keep the indentation i'm going to say head and then i'm going to put my body tag like that and then what i'm going to do here is just say h1 i'm going to say welcome to typing dna demo okay that's going to be my first template super simple all i'm showing is just this h1 tag that says welcome to typing dna demo and i'll show you how we can actually pass values into these templates when we render them from app.js all right so we're going to create our first route here so what we're going to do is say router dot get this means we're going to accept a get request for this specific route we're going to say slash verify is the endpoint or the url that we want to go to and then we are going to create a function so we're gonna do the uh two brackets like this we're gonna do an arrow we're gonna take the request and then the response yes i believe that's correct and then inside of here is where we're actually gonna code out what we should do when we go to the slash verify endpoint so all i want to do right now is i want to say res which stands for response dot render and i'm going to render my pug template so i'm just going to render verify like that and that's all i need to do right now so what this does when i say res.render is it looks inside of my views folder which has already been set up here so we've kind of added this path looks for the verify template and then it's going to render that template or return that template as the response when we go to the slash verify endpoint so we can test this pretty simply we're going to run our application now what we'll do is we will go to our browser which browser should i go to i guess i can just go to this one and we'll go to localhost colon 3000 and we are going to go to slash verify okay and when we go to slash verify notice we get our h1 and says welcome to typingdna demo perfect now i did not forget about ng rock so i'm going to show you that now notice how ng rock this url is redirecting to localhost 3000 so what i can do is i can also go to this url so i'm going to copy this https url i'm going gonna go to my browser i'll go a new tab here press enter and then same thing i need to go to slash verify because we don't have a default route and then it brings me to the same page there you go pretty straightforward that's how it works so from now on we'll use this url we can use localhost1 that's fine but this one is preferred and actually to make sure it's all going to work with typing dna i believe we do actually have to be on this url but at this point in time we're not using typing dna yet and so it's not an issue okay nice so now we've set up our first route so what i want to do is i want to start integrating typing dna ideally we're going to have a button on this screen and then what the button is going to do is it's going to render that kind of popup you saw before that's all handled by typing dna we don't need to code any of that and then verify our user for us so the first thing we need to do is we need to create or actually kind of import here the typing dna client so i'm going to say var typing dna and then client like that and we'll just specify this that is the verified client so typing dna verify client is equal to and then we are going to require and this will be the typing dna hyphen verify hyphen client let me make sure that's correct looks like it is all right so now that we have required the correct resource here we need typing dna verify client we're going to create an instance of it and then pass through all of our credentials so the application id the client id and the client secret the three things that we need to actually kind of you know verify our application with typing dna so we're going to say var and then this is going to be typing dna clients like that is equal to new and then this will be typing dna client uh sorry typing dna verify client and then what we are going to pass here is an object that has the following the first thing that we need is the client id we then need the client secret or is it just called secret let me see what i've called here okay it's just secret okay so just secret like that and then lastly we need the application id okay so we have all of these three values uh they're on the typing dna website so we're gonna open that up i'm gonna go that's the wrong browser i have too many browsers here this is the correct browser i'm going to go to my verified dashboard here and then notice i have my client id secret and then the application id so i'm going to grab the client id i'm going to put it inside of here make sure it's in a string okay there we go now we need to go grab the rest of them so we'll grab the client secret i'm going to expose mine for now obviously by the time you guys watch this i will have deleted this account so that you guys can't hack me okay so we'll put our secret in and then lastly we need the app id we can go ahead and grab that one all right okay so let's paste that there this looks good i messed something up here okay save that and there you go nice auto format beautiful now we have the id the secret and the application id we've created the typing dna client and we've kind of instantiated this module and you know hooked up typing dna at least from the kind of beginning all right so there's two sides to typing dna we have the back end and we have the front now the back end is responsible for sending requests to typing dna to get information that we need to render the front end button properly so the only thing we're showing on the front end relevant to typing dna is a single button that has some special information on it and then that button will render a popup and that popup is completely handled by typing dna specifically by this verify client and that deals with the twofactor authentication codes and all of the stuff that we don't want to look at however we do need to send a request from the back end to typing dna to get some attributes that we need to pass to the button in the front so i'm going to show you how we can do that but i want to go to the verify documentation and just quickly walk you through it so everyone's clear on what's going on so you go to the dashboard and you go to documentation it will bring you to a new page and now i'm just going to kind of show you how exactly you do this and by the way you can refer to this in case there's anything here that i don't show you so notice you have a back end and a front it's saying get the verify client we have that already okay initialize the verified client we just did that we put in the id the application id and the secret obviously you would keep the secret secret but for our purposes just tutorial that's fine and then it says pass user data to the front okay so once initialized the next step is to retrieve the end user data in the back end for encryption and linking with the front end button created in the next step so what we need to call is this get data attributes method and we pass uh the email phone number or whatever it is either or to typing dna then what it's going to return to us is three things it's going to return to us i believe the client id the application id and then it's going to give us a payload now all three of those things we need to actually render our front end button because based on those pieces of information the button is going to show a different popup so you can kind of read through this and see exactly how it works but essentially this is telling us hey once you figure out what user it is that's signing in whether you have their email or their phone number you got to send that to us we're going to send you something back and then you can use that to render your front end button so that's really the main step in the back end is to use this okay next though we need to render the front end button and the way we do this is we integrate this script in our html so we put this in the head of our html document and then we need to put this button on the screen with the appropriate information so this right here returns to us these three things right the client id the application id and the payload and then we pass the name of a function that we want to be called once the authentication is done so once the authentication is done it's going to have a callback method that it calls this is a method or function that we implement ourself and then from there we can handle you know any errors or popups or whatever it may be okay hopefully that's clear but that's kind of the process pretty straightforward what i'm going to do though is actually i don't need to copy this we'll just write it from scratch okay so what i want to do because i want to keep this super simple as as soon as i go to this verify page here i want to immediately send my email to typingdna and get the three pieces of information the id the application id and the payload that i need to render my front end button i then want to pass those pieces of information to my front end template here and then i can actually display the button on the screen and then when i press the button i can well be verified so let's do this so what i'm going to do here let me just look at my cheat sheet is say let actually i don't even need a let i think i can say const typing dna and then this will be data attributes is equal to and this will be typing dna client notice not verify client it's typing dna client dot and then this is get data attributes you can see we're getting that completion there and then inside of here we're passing an object and what we want to pass is the following want to pass an email want to pass an optional phone number the email is optional as well if you pass the phone number you need one of the two and then we can optionally pass the following a language which is going to be en for english and then a mode now explain the mode in a second but for now we're just going to use standard okay so what we can do here is we can either pass an email or a phone number we don't have to pass them we can pass both but we have to either have an email or phone number in my case i'm just going to do an email so for the phone number i'll just leave it blank so i'll just put it as an empty string and for the email i'm going to use that same email that i've been using for everything so code racer live stream app gmail.com so this is where you would put the user's email so usually you would collect an email from them and then you would put that into this field but since i don't even want to deal with doing that we'll just hard code in an email we'll always have this user here okay so let's save that that's good these two things are optional you can change the language right now i think it's only english that's supported in the future they will have more languages and then there's another mode here that's not standard called show otp now otp is that one time password right so let me go to verify here and let's see if it says anything about the mode all right so i've found the two modes here now you guys can pause and read these if you like again they're in the documentation though which i'll link in the description essentially the show otp mode just means that you are actually going to be shown what the onetime password is so the user will get shown that and they'll have to type that in to the field so you can see it says after the verification process is finished and the user has inserted the code into the input field on your front end a request to the back end is made so they'll get the onetime code and then they have to insert it manually whereas here the onetime code will just automatically be applied so they don't have to type it in again read through if you want all the details standard mode is just simpler i would just recommend you go with standard mode but some cases you might need to use this mode okay so now that we understand that what we're going to do is leave the mode as standard obviously and we are going to actually check if this is working and we're going to have a look at what the typing dna data attributes the attributes sorry r so i'm going to go here and just say console.log i'm going to log the typing dna data attributes and i am going to end my server by hitting control c and rerunning okay so now what i will do is go here i will refresh and then notice here we get this we get a client id application id and a payload so these are the three things that are being returned to us now all three of these things we need on the button that we're going to render on the screen so now what we're going to do is render that button so we're going to go to our verify.pug template i'm just going to go back to the documentation here i'm going to start copying some of the things that we need so notice here we need this script so i'm going to copy this script it comes from a cdn so it's really easy to use so copy this all right so we're in the template what i'm going to do now is use the pipe operator and then put my script i'm going to put a tab here so the indentation is correct what this does is this makes it so this is read as plain text and essentially this just means that we can embed html tags in this kind of weird syntax pug template i'm definitely not an expert with pug but you just put this and then it forces this to actually be read as html which is what you want okay nice so we have that the next thing that we need to do here is we need to actually add a button so if we look here at the documentation this is the button that we need so let's just copy this button for now and then we'll modify it as we need so we're going to copy the button and notice this is not kind of showing up properly here right and the reason for this is that when we're inside of pug the syntax is a bit different what we actually need to do instead is say button open parentheses and then closing parentheses like this and then after this closing parenthesis this is where we can put the name of our button so in this case it's verified with typing dna so i'm going to put verify with typing dna okay i'm going to remove that last angle bracket i'm going to save that and now what we need to do is change these attributes here so for now i'm going to make all of these empty strings and also inside of this kind of templating language here you need to separate all these attributes with commas so that's really the only change we need to make we will fill these in in a minute but i have to show you how we can pass values to the template so we have typing dna verify that needs to be the class make sure that's the class of this button otherwise it won't work and then you're going to put these four things and then we'll implement the callback function in a minute we'll actually just do it right up here okay so now that we have that let's stop our server let's rerun it and let's see if we get a button showing up on the screen when we refresh now okay so when we refresh we get verified with typing dna when we press the button notice nothing's happening that's because we don't have the client id application id or payload and if we go to the console of our page we go inspect and we look at the console notice it tells us it's missing the application id great so we now need to figure out how to pass those things through so what we're doing here is as soon as we go to this route we're immediately getting the information that we need the typing dna data attributes we now need to pass this to our template so what we're going to do is we're going to create an object we're going to slowly kind of extract all of this stuff inside of here so we're going to say that the client id and actually now that i think about it what we can do here instead is we can just pass the typing dna data attributes so what resda render takes is it takes the name of the template and then an object of key value pairs to be passed as kind of parameters or values to the template that can be used inside of the template and so typically you would do something like you know message and then hello and then inside of this template you can directly access this variable hello and that allows you to use it inside of the template so here since this is already an object that has client id application id payload we can just pass this and i think this will work i might be incorrect but i believe that will work so we'll leave it like that for now now though we need to go inside of the verify template and the way that we're going to access all of these things is we're actually going to use back ticks we're going to use a dollar sign and then the two or the curly parentheses sorry and inside of here we'll use just the name of what's in the object so client id application id and payload to access those respective values so we're going to say client id i'm going to copy this actually you know it's probably easier if i just retype it so dollar sign like that i'll just copy that line and then this will be application id so let's say application id and then finally this is going to be the payload okay so if we save this now this should allow us to access these values and use them directly as the value for these kind of properties of the button hopefully that's all clear let's restart this so let's close the app rerun it let's now go here and refresh okay and now notice if we look at the source that we're actually getting the client id the application id and the payload all right so what we can do now is we can just test this the button is showing up we have all the stuff in the source here we have the payload the application id and the client id let me just refresh this one more time and you'll notice that every time i refresh this the payload should change the reason for that is every time i do this we're sending a new request to typingdna we're getting a new payload now though let me press verify with typing dna when i press it notice this appears popup is here that means all is working we can you know have a sigh of relief all of our hard work has paid off and now i can start typing okay so yellow toothbrush socks and fireman okay let's verify and there you go verified now the thing is we actually don't know like if that verified or not now we do know it verified because it would show us a message but we haven't implemented the callback function so for now let's implement the callback function and let's just print out what's actually being sent to the callback function so we can see what's going on after this button is pressed so what i'm going to do is i'm just going to make a script here i'm going to do actually in plain text again i'm going to say script and then script like that i'm just going to write some very basic javascript i'm going to make a function i'm going to say function and we are going to call this function callbackfn you can call it whatever you want but if you call it something else you have to change this to be whatever the name of it is so notice these are of course the same this is taking a payload and then all we'll do is just say console.log payload like that okay so let's just do that let's restart the server and now we will refresh the page okay verify with typing dna we'll type yellow toothbrush socks fireman okay i don't know how i managed to mess that up verify and then notice it gives us success when success is equal to one that means yes this was successful and the otp which is the onetime password now i'll show you how we can use this in a minute to do an additional verification but that means that we all look good okay now let me try to make this fail so let's go and i'll just type with one hand okay i'm actually going to type with my pinky and then hopefully this will mess it up okay toothbrush socks fireman okay verify and verification failed please position yourself naturally and try again okay so i'm gonna try to fool it because i want to show you how it sends me the onetime code okay to brush socks and then fireman okay verify typing verification fail okay so now it's saying all right a six digit code was sent to your email enter the code below so let me just go refresh my email and grab the code here all right so i was having some issue with my email there so i ended up just closing out of that popup doesn't matter just want to show you what actually happens when you fail the typing biometrics what i'm going to do now is show you how we can add one extra layer of security here and what we're going to do is we're going to go inside of our callback function and we're actually going to render a new page and this new page is going to show us the result of what just happened in the popup because you see that after we close the popup right or after we do the verification the screen doesn't change we don't see anything and what's actually being sent to our callback function is whether or not that thing was successful whether or not the verification was successful and the onetime password the thing is we want to make sure that the onetime password sent to our callback function is actually correct and so we're going to do an additional verification with typing dna there's a method that we can use very simple we're going to send the onetime password to typingdna and just ask it hey is this the correct onetime password after we've gone that onetime password from the typing biometrics authentication so the basic flow is click the button you know do your typing verification onetime password is sent through the payload to the callback function callback function renders a new page new page verifies that the onetime password is correct and then we're good your user is authenticated so let's do that now the thing is i need to send this onetime password to the new page that i can actually verify right and the way i'm going to do that for my callback function is i'm just going to change the location of the window so i'm just going to redirect us and using one of the query parameters so the things that shows up in the address bar i'm going to pass the onetime password and i will pass the success message so the way i'm going to do this is i'm going to say window dot location is equal to window dot origin and then this is going to be plus slash result and let me just save this okay i might just have to keep scrolling that's fine window location is equal to window.origin plus result plus question mark this is going to be otp equals plus and then payload dot otp plus and then this is going to be ampersand success equals and then plus and then this is going to be payload dot success so what this will end up looking like uh and sorry let me just scroll so you guys can see this here is the following so pause that if you want to see that but it's going to look like this so let me go down here we're going to have whatever the origin of our pages so just the root domain so let's just say for now it's localhost colon3000 this is going to be slash result and then equal sign denoting that there's parameters we're going to have otp equal to some numbers okay ampersand success equals one or zero whether we failed or whether we succeeded in the verification then this way from app.js we'll be able to set up a new route called slash result we'll be able to grab all of those query parameters and we'll be able to send the request to typing dna so let's actually do that now we're going to say router dot and get this is going to be slash result we're going to do the same thing request uh response sorry arrow function goes to this okay and then inside of here for now we are just going to say res.render and we'll have a new template this template will be result and for now we're not going to pass anything to it so just go back to verify.pug you can see that we are doing window.location that just changes the route so that's just going to redirect us redirects us to the result page we then set up the result root we now need to make the new template which is going to be results.pug okay so in result.pug we'll keep it simple we'll go html we'll go body we don't even need a head and for here we'll just say h1 results for now just that we see something okay so let's rerun our server and let's refresh this okay refresh and now we're going to go verify with typing dna and now we're going to just type this in yellow toothbrush socks fireman verify okay good brings us to the result page nice so now we need to actually look at these parameters notice we have result we have our otp and we have our success so we're going to look at those parameters we're going to pass them to the template and we're going to display them here so we can see what the one time password is and we can see whether we were successful or not and then of course we're going to send that verification to typing dna just to be like okay was this onetime password correct so we can actually start with that when we go to the result page i need to look here what we're going to do is we're going to get the onetime password and the success we're going to say const otp is equal to and this will be request dot query dot otp query holds all of our query parameters the things you see in the url address bar and then we're going to say const success equals request dot query dot and this will be success nice now we can pass these through so we can just say otp comma success and i think we might have to do this so i'll just do this otp otp and success success now if we go to the result template here what i can do is i can say h2 is equal to and i can just put the name of the otp so put otp and then i can say h2 is equal to success like that okay so what this is doing is it's actually going to use this right here it's going to use whatever otp is that i pass through and whatever the success is so you'll actually see the onetime password and you'll see the success uh that's kind of how the syntax works for pub okay so let's restart this i'm gonna go here refresh okay and now notice when i refresh it's showing me that onetime password and it's showing me the success message nice now though what we will do is we will send this kind of validation to typing dna so the way we do that is we say typing oops like this typing dna and this will be client and then this is going to be dot validate otp and we're going to pass here the email of the user we want to validate the onetime password for so in this case it will be the same email we passed before okay if you were using phone number you would pass the phone number here and let me just look at my cheat sheet to make sure i'm not messing this up yeah so we can put optionally phone number empty string and then you could make this a valid phone number obviously the phone number of the user you wanted to validate and then you're going to pass as a separate parameter notice these are two different parameters here there's an object and then the onetime password you're just passing the onetime password okay so that will send the request but then what we need to do is wait for a response we're going to say dot then we're going to say data like that and then what we're going to do is have a function here where we actually look at this data so for now i'm just going to say console.log data but in a minute we'll actually use this data okay so there we go now as soon as we go to the result page we're actually going to validate sorry the otp like that and then we'll pass the email of the user we want to validate for or the phone number and then of course the onetime password which we're getting from that page nice so let's go now and let's just start the process again so let's go to slash verify okay we're going to verify with typing dna we're going to type this in yellow toothbrush socks fireman i don't know how i keep making the same spelling mistake but there you go okay and then notice we get results uh two four seven six five six one but i didn't see anything logging ah sorry that's because i didn't restart the server okay gotta restart the server and we'll redo this again okay so let's go back to slash verify let's go verify with typing dna yellow toothbrush socks farm okay verify and then we're still not getting anything printing out okay this is interesting that i'm not seeing this so give me a second guys and i'll be right back okay so it turns out i was thinking for some reason that it was gonna show this on the web page but instead it's showing it right here so this actually is working we're seeing it says success 1 code 19 message otp given matches shows us the session id and gives us the status code so we are getting this so what we're going to do now is we're going to pass through this message that's really the only thing we care about from this to our result page and display that message so what we need to do is we need to put the res.render inside of here and then what we're going to do here is say that the message is equal to data dot message okay all right so let me save this and now what's going to happen is we're going to pass through a message which is whatever the data dot message is and then we'll display that message so let's go ahead and do that i'm going to go to verify sorry result.pug i'm just going to say h2 is equal to message and now we should see the message of course after we send this response nice now just for good measures here we'll add a catch so we'll say catch we'll say e and then we'll do the same thing we'll say res.render but this time for the message we'll just render e so whatever e is i need to get rid of that so whatever the error actually is we'll just display that nice uh and actually i think we have to say e.message let me check if that's the way to do it no i think it is just actually e okay nice so i think we've done almost all of the code i'm going to restart the server here and let's just do this again from the beginning so let's go to our website let's go to oops slash verify all right and now let's verify with typing dna okay so yellow toothbrush socks fireman okay verify and then notice it brings us to this page we get results we have the onetime password one and we have the otp given matches after we send that request nice now the last thing i want to show you is the logs here so if you go to typing dna and you go to the dashboard and you go to logs you will see all of the stuff that you have sent so notice the stuff in red is things that were not verified right and then you have the stuff in yellow which have been partially verified and then you have green which means you are good to go because you validated the otp so after the otp was received you sent it back to typingdna it validated that it was indeed correct and then it was like okay you're good you have successfully authenticated your user so that is kind of the flow there you need to make sure you do that last step which is you send the onetime password that you receive in the payload of the callback function back to typing dna it gives you a response you can look at that response and then determine whether or not that onetime password is correct okay so let me zoom out here just you guys can view all this code all this will be on github so you can check it out from there as well but this is kind of what we're looking at here we have our first root which is for verify we have our other one which is for result and then of course all the other stuff we need to do for the setup pretty straightforward for our result page we're just displaying some of those variables we're passing through and rendering uh and then we have verify.pug we need to make sure we have this script inside of here we have our payload callback function again you can change the name of this if you change this here we then are showing this button this button has all the important information that we need if you didn't have this information well you saw you get an error and then when we press this button it starts that whole process right and i think with that i'm going to conclude the video so there's not really much more that i can talk about i know this was a simple integration and that you know it might have taken a long time for me to explain but wanted to make sure i really got through everything and made sure you guys weren't running into any errors at all with this so let me know what you guys think but one last thank you here to typing dna again they have sponsored this video but we have a great relationship and they really are just an awesome company that is really developer focused and wants to help you guys be able to implement this stuff as fast as possible that's why they've made this new verify api again reminder i have a video on the original authentication api this is a little bit more difficult to use but it is a bit more versatile whereas the verify api is just super simple and you see it brings this nice popup and everything just works nicely all alright so with that said if you guys enjoyed make sure you leave a like subscribe to the channel of course check out typingdna from the link in the description and we'll see you in another youtube video
