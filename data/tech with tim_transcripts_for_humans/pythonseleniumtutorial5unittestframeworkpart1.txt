With timestamps:

00:02 - [Music]
00:06 - hello everybody and welcome to another
00:08 - selenium Python tutorial so what we're
00:11 - gonna be talking about this video is the
00:12 - unit test framework and how that works
00:14 - with selenium now we remember that
00:16 - selenium is really used the main purpose
00:18 - for testing websites and in fact if
00:20 - you're making a large website you're
00:22 - really gonna want to create these
00:23 - automated tests which I'm going to be
00:24 - showing you here so that rather than
00:26 - having to manually go to the website and
00:28 - you know fill in a form or type this
00:30 - here or press a button all you have to
00:33 - do is run a script that will tell you
00:34 - yes this website worked or no this
00:36 - website did not and that's extremely
00:38 - useful that will literally save you
00:40 - hours maybe even days of development
00:41 - time depending on how large the website
00:43 - is and learning a skill like unit test
00:46 - is useful just in Python in general
00:48 - because this is a built-in module you
00:50 - can use this for any application and its
00:52 - standard practice kind of in software
00:54 - engineering and in large development to
00:56 - be using automated tests or automated
00:57 - build you know you've heard of things
00:59 - like circles CI I and stuff like that to
01:01 - really make sure that what your code is
01:03 - functioning without having to manually
01:05 - go in there and test all the different
01:07 - functions especially when you have you
01:08 - know millions of lines of code or
01:10 - whatever it may be so another advantage
01:12 - to the way that I'm going to show you
01:14 - how to write selenium coding this video
01:15 - is that think about if we were testing a
01:17 - large website that if we kept writing
01:20 - code like this in a procedural manner
01:22 - where we're just kind of going like line
01:23 - by line down by down this we get very
01:26 - messy very fast and in fact you know if
01:28 - we had to test a hundred web pages well
01:30 - this would you know be a nightmare to
01:32 - have to scroll through and look for
01:33 - different things so the way I'm gonna
01:34 - show you here actually separates every
01:36 - component that we've kind of defined
01:38 - here into its own class and it makes it
01:41 - really easy to once we have this initial
01:43 - set up go ahead and test another page
01:45 - and it just you'll understand as we get
01:47 - through but the idea is that what I'm
01:49 - gonna do here is just walk through the
01:51 - code that they have on the selenium
01:54 - website so if you go to the selenium
01:55 - website this is the documentation this
01:57 - is in section 6 it's called page objects
01:59 - and this is the way that they recommend
02:01 - you write the selenium code so rather
02:03 - than me trying to come up with a better
02:04 - example I figured we'll just use theirs
02:06 - and the reason I'm gonna do this cuz
02:07 - some of you may be equal why don't I
02:08 - just go look at the documentation is
02:10 - because the documentation is very very
02:12 - and if you're a beginner especially if
02:14 - you're watching this far into the videos
02:15 - you probably you know would rather have
02:18 - me walk through and kind of explain
02:20 - these different aspects of the code they
02:22 - don't talk about so for example they
02:23 - come down here you understand what set
02:25 - means what get means what about lambda
02:27 - you know what is all of these things
02:29 - that we have here why are we importing
02:31 - this why are we inheriting from a base
02:33 - page I'm gonna walk through and explain
02:35 - how all of these different things work
02:37 - so not only do you understand selenium
02:39 - but you understand the Python syntax
02:40 - that goes into building something like
02:42 - this so I'll just be copying that but I
02:44 - will be you know slowing down making
02:46 - some other examples to really hopefully
02:48 - make you guys understand how that works
02:49 - all right so the first thing we need to
02:51 - do is make a new folder now I'm gonna
02:54 - call this test case you can call
02:56 - whatever you want and inside of this
02:57 - folder I'm going to put four Python
02:59 - files now it's not important that you
03:00 - have a new folder but you just need
03:01 - these files that I'm gonna make so we're
03:03 - gonna have main dot PI we're gonna have
03:05 - a new file called element dot PI we're
03:09 - gonna have a file called locator dot pi
03:11 - if I could find where was the new file
03:13 - thing oh it's all the way up here
03:15 - locator jumped PI what's another one
03:18 - that we wanted and then the last one we
03:20 - need if I can find out here is called
03:23 - page pine now already we're noticing how
03:27 - things might be going here right so we
03:28 - have four files in each of these files
03:30 - is gonna represent a different thing and
03:32 - we're gonna have different parts of the
03:34 - webpage that we're testing in each of
03:35 - them this is who's gonna make it way
03:37 - easier and more organized and you'll
03:39 - understand the benefit of this as we go
03:40 - on so the first thing we're gonna do is
03:42 - start coding out the main top - I'm not
03:44 - gonna code the entire thing but a
03:45 - majority of it we're gonna start by
03:47 - importing unit tests now unit test is
03:49 - built into Python you don't need to
03:51 - install this it's already there in the
03:53 - syntax I'm gonna show you this will
03:55 - apply to things that aren't selenium as
03:56 - well so this is useful just to learn
03:58 - unit tests if you want to do that so
04:00 - next thing we're gonna say from selenium
04:02 - import webdriver and then we're gonna
04:05 - actually import that page file because
04:06 - we'll use it later on so import page
04:09 - so notice pages of file I created here
04:11 - oops excellent close main will be
04:14 - loading some stuff from that now the
04:16 - next thing I want to do is create class
04:17 - in this class is going to stand for the
04:19 - main test case that I want to perform on
04:21 - this website now you could have multiple
04:23 - of these classes we're going to use one
04:25 - but
04:25 - this one is called is Python oops
04:29 - Python or search if I could type today
04:34 - which apparently is not happening Python
04:36 - org search test or not test sorry just
04:39 - search and then in here we're gonna
04:41 - inherit from unit test dot test case now
04:44 - whenever we want to make like a new
04:46 - separate thing to test like a completely
04:48 - different maybe page or not even pages a
04:51 - completely different function of the
04:52 - website we'd likely create a new test
04:54 - case but inside of here you're gonna see
04:57 - that we can test multiple aspects of the
04:58 - website from this case it's hard to
05:01 - really explain until you see the methods
05:02 - but I'll talk about when you would make
05:04 - a new one of these classes later on now
05:07 - why are we inherited from unit test test
05:09 - case well essentially this is gonna give
05:10 - us access to some methods there's some
05:13 - things that are gonna be inherited that
05:14 - we need to make this set up like a test
05:16 - case and you guys are gonna see that
05:17 - when we press a button what's actually
05:19 - gonna happen is this is gonna run all of
05:21 - the tests that we've defined and give us
05:23 - some nice output and say test one passed
05:25 - test two passed test three failed
05:28 - whatever it may be so let's go ahead and
05:30 - start writing some methods inside of
05:31 - here now the first method that we're
05:33 - usually gonna write inside of our test
05:34 - case is called setup now you can think
05:36 - of this is almost like an an it method
05:38 - but specific to test case so essentially
05:40 - whenever we call this test case the
05:42 - first thing that will run every single
05:44 - time is this setup so this is where you
05:46 - can put any variables you want to define
05:47 - any things you need to well setup before
05:49 - the test case gets started so the first
05:51 - thing we need is a driver so we're gonna
05:53 - say self dot driver equals webdriver doc
05:56 - chrome and then here we're gonna put the
05:57 - path to Chrome which I'm just gonna copy
05:59 - from here now it is worth noting that
06:02 - what we're gonna be doing here is
06:03 - actually testing the Python website so
06:06 - that website itself and making sure that
06:07 - the search function which obviously we
06:09 - know works works on the website so
06:12 - that's what this example is I guess it
06:14 - makes sense since again we aren't doing
06:15 - pipe up now the next I'm gonna do is say
06:17 - self dot not get self dot driver gets
06:20 - and then the website that we want to
06:21 - test we've seen this before and I'm just
06:23 - gonna copy it in from over here but it's
06:25 - HTTP colon slash slash wwp I thought
06:28 - work alright so now that we have that
06:30 - set up the next method we're gonna write
06:31 - is actually teardown so we write
06:34 - teardown and we put self in here what
06:36 - this is going to do is run after this
06:38 - test case
06:39 - finished so think of this is like
06:41 - cleaning up you know once everything's
06:43 - done do this
06:44 - so in here all we're gonna do is say
06:45 - self dot driver closed which will close
06:49 - that tab pretty straightforward you know
06:51 - this will run at the beginning this will
06:52 - run at the end everything in between and
06:54 - it doesn't obviously matter where like
06:56 - what order you define these methods and
06:57 - is gonna run in between them so why
07:00 - don't we want to make a method that
07:01 - tests something so it gives us an output
07:03 - of like pass/fail what we need to do is
07:06 - start this with the named test so since
07:10 - we inherited from unit test test case if
07:12 - we start a method name with the keyword
07:15 - test underscore you know am I saying
07:18 - underscore test in lower case then we
07:21 - can name it whatever we want so I can
07:22 - just say test example cuz I'm just gonna
07:24 - do an example here and this means this
07:26 - method will automatically be run when we
07:29 - run the unit test if I made another
07:31 - method though which I can do and I
07:33 - called not a test like that for example
07:37 - this method will not be run
07:39 - automatically because it doesn't start
07:42 - with the word test so that's important
07:44 - I'll actually show you Mike I'll prove
07:46 - to you this doesn't work so this won't
07:49 - print and then inside of here I'm just
07:51 - gonna say print test and then I'm
07:55 - actually going to assert true now
07:58 - assert essentially says assert like see
08:01 - if the condition on the right side is
08:04 - true and this is going to tell us
08:05 - whether the test case failed or whether
08:07 - it passed and each one of these little
08:10 - methods here will be their own tests
08:11 - that are gonna be run from within this
08:13 - main test case so they need to end or
08:16 - they need to have an assert inside of
08:18 - them to tell us whether this was true or
08:20 - whether this was false in whether this
08:22 - test case failed or passed right so
08:24 - essentially if the argument on the right
08:26 - side of assert is true the test case
08:28 - passed if it's false it failed so I'm
08:31 - actually gonna just show you how this
08:32 - works so far for the unit test we're
08:34 - gonna just do this if underscore
08:36 - underscore name underscore underscore
08:37 - equals underscore underscore main
08:40 - underscore underscore this just means if
08:42 - we run this module not if it's being
08:44 - imported then what we'll do is say
08:46 - Python or not actually sorry unit test
08:49 - dot me now what this says is run
08:52 - all of the unit tests that we've defined
08:54 - and since this inherit from unit tests
08:56 - we know that this is a unit test so this
08:58 - is gonna run so let's actually run this
08:59 - code let's see what we get obviously
09:02 - gonna open the Python website and then
09:04 - if we look at the output it says ran one
09:06 - test in 3.1 32 seconds okay so nuts
09:09 - notice this work that was fine and this
09:11 - is the nice output we're getting from
09:13 - the test case now if I decide to assert
09:15 - false like that and run this here we
09:18 - will have to wait for this to boot up
09:20 - but we can see test wait for the output
09:23 - assert false and notice that this did
09:26 - not work so ran one test in four point
09:28 - eight six two seconds failed failures
09:31 - equals one so that's the output we're
09:33 - getting and it even tells us where it
09:35 - failed so it failed at test example and
09:38 - you see it says test F because we failed
09:40 - so let's just make another one and
09:42 - notice is not a test method was not
09:44 - running because it didn't start with
09:45 - test so let's get rid of that let's make
09:49 - another test case and let's show you
09:50 - what happens when one passes in one
09:52 - fails so test example two like that say
09:57 - self I don't need to print anything I'll
09:59 - just assert true like that so let's run
10:03 - this and let's have a look okay so test
10:07 - F alright and ran two tests in five
10:11 - point six four six seconds and notice
10:14 - failures equals one so it says one
10:15 - failed it shows us where it failed a
10:17 - test example and that is kind of how
10:20 - that works now notice though that this
10:23 - set up and I'll actually I'll print
10:25 - inside of setup so we can show you ran
10:27 - twice so let's see this print so so
10:33 - setup boom we see that's in the console
10:34 - one time close and then it prints setup
10:37 - again so essentially this setup method
10:39 - will be called every time that the the
10:43 - test cases are run so for each test key
10:45 - setup is called once and teardown is
10:47 - called one so we'll boot this up run
10:49 - test case one and then teardown boot
10:52 - this up run test case two and then
10:54 - teardown so that's kind of the procedure
10:56 - that's pretty important to know actually
10:57 - because you have to make sure that you
10:59 - know you're gonna be starting fresh
11:01 - every single time for each one of these
11:03 - tests so that's how that works these are
11:05 - the test cases now
11:06 - I can't we can't really do any real test
11:08 - cases yet we need to set some other
11:10 - things up but that's the basis so
11:11 - hopefully you at least understand why
11:13 - this is useful because we can test
11:15 - different components and we can see
11:17 - which one's passed and which ones failed
11:18 - with some nice output and I mean this is
11:20 - all you really need to do to get that
11:21 - set up so now that we have that the next
11:23 - thing we're going to do is actually set
11:24 - up what's called a page object now each
11:27 - page on our website we want to actually
11:30 - define inside of a class so that we can
11:32 - access things really easily we can check
11:34 - if something is correct and this is
11:36 - where we're going to be writing a lot of
11:37 - more selenium code is actually inside of
11:40 - page so what I'm gonna do inside a page
11:42 - is just say class base page like that is
11:47 - equal to and within a Heron it's object
11:49 - now the inheritance object is optional
11:52 - I'm just including it because that's
11:53 - what they have on the selenium website
11:54 - but again you don't need that so then
11:56 - here we're gonna say define underscore
11:58 - underscore knit underscore underscore
11:59 - self and we're gonna say self dot driver
12:04 - like this equals driver and driver is
12:07 - gonna be an argument here as well so
12:09 - essentially when we set up a base page
12:11 - and base page is gonna stand for this
12:14 - will be the base class for all of our
12:17 - pages we will need to pass it a driver
12:19 - so the idea here is inside of this page
12:21 - file we're gonna define a class for each
12:23 - web page we're gonna test so say we have
12:25 - the home page and maybe like you know
12:27 - the search page or something like that
12:29 - then we would have two classes home page
12:31 - search page right and we would both
12:33 - inherit from base page because now we've
12:35 - defined this constructor which will be
12:38 - used for both of them and there was any
12:39 - methods that we wanted both of them to
12:41 - have access to when you put them inside
12:43 - of base page and then since we're
12:45 - inheriting from base page we would get
12:47 - access to that so that's the basis of
12:49 - inheritance hopefully you guys
12:50 - understand basic inheritance but the
12:52 - idea is do I do something like you know
12:54 - class main page and I inherit from base
12:57 - page this constructor method here will
13:00 - be used because what this says is use
13:03 - the methods from base page that's that's
13:05 - what this says so I don't need to now
13:07 - define in an it in here because
13:08 - automatically by default since I've
13:10 - inherited we'll be using this
13:12 - initialization so let's say class main
13:14 - page what I'm gonna do is actually
13:15 - create a method and I'm gonna say is
13:17 - underscore title underscore
13:20 - matches like that now in here we're
13:22 - gonna put self and what this method is
13:24 - gonna do is tell us if the title of the
13:27 - webpage matches what we want it to match
13:30 - so it's gonna say you know is this true
13:32 - is this false so we're gonna return if
13:35 - Python in self dot driver remember
13:39 - drivers that web driver that we've got
13:41 - from the initialization because we've
13:44 - inherited so we have access to driver in
13:46 - self dot driver dot yeah title I believe
13:49 - it is yeah so that's right so what this
13:52 - is gonna do is just tell us whether or
13:54 - not the string Python is in the title of
13:57 - the website or the webpage that this
13:59 - driver is currently on so that's the
14:01 - method we've defined here and we can
14:03 - define those kind of methods inside of
14:05 - these pages right and what we're
14:07 - actually gonna do if we go back to say
14:09 - main dot PI is if we're running a test
14:11 - and we'll say define you know test
14:15 - underscore title like that we do self
14:18 - what we'll say is all right so we have
14:20 - page imported here so we'll say you know
14:23 - main page equals page dot main page we'd
14:28 - initialize that and then we'd say assert
14:31 - main page like that dots is title
14:36 - matches so this will now tell us okay so
14:38 - let's go to the main page which is over
14:41 - here and it will return if Python isn't
14:43 - self dot driver dot title and then here
14:46 - we'll say okay well if that's true this
14:48 - test case you know passed if it was
14:50 - false this failed so that's the idea
14:52 - here for these kind of test cases so
14:55 - let's go back to page dot pi I just
14:56 - trying to show you
14:57 - you know sequentially how we're actually
14:58 - doing this so the next thing that's
15:00 - inside of here is the define click
15:03 - underscored go on the square button
15:05 - again I'm just following along with what
15:06 - they have in the documentation and we're
15:08 - gonna do in here is say element equals
15:10 - self dot driver dot find underscore
15:16 - element and then here we're gonna have
15:20 - to add something that I haven't yet
15:21 - defined and then we're gonna say element
15:24 - uh click so let me leave this blank for
15:25 - a second and here we're gonna put
15:28 - something and this is what brings me now
15:31 - to the next file which is locators I
15:33 - know this is a lot of
15:34 - but we kind of have to go between all
15:36 - the files and write them I can't write
15:38 - them you know one at a time
15:39 - okay so now we have this locators file
15:41 - so the idea behind this file is any CSS
15:44 - selector any ID any way that we locate
15:47 - an element we should keep in one
15:49 - centralized location so that if we ever
15:51 - need to it's very easy to change the ID
15:53 - or to change the CSS selector to change
15:56 - some attribute and we don't to change
15:58 - any other aspect of the code other than
16:00 - this file which will be quite small so
16:02 - what we'll actually do in here is safe
16:03 - from selenium dot webdriver
16:07 - dot common dot by import by so we should
16:12 - remember this import from earlier and
16:13 - what we're gonna do is create classes
16:15 - that represent objects that we want to
16:17 - find so for example class main page
16:21 - locator
16:22 - just like that this will inherit from
16:25 - object I'll talk about more exactly what
16:27 - this is in a second so in here from
16:28 - object and we'll say go underscore
16:31 - button notice is this in all capitals
16:32 - because this is gonna be constant by dot
16:35 - ID and the ID is submit okay
16:39 - so what I've done here is I've said
16:41 - let's make a class that defines all of
16:43 - the locators for the main page so for
16:47 - the main page right that's the home page
16:49 - or whatever page it might be and if
16:51 - there's any attribute it's easier I did
16:53 - oops accidentally if there's any
16:55 - attributes on that page we want to
16:56 - access what we should do is define how
16:59 - we want to access them and what their
17:01 - value is so if we want to access the Go
17:04 - button on the Python website and I'll
17:05 - actually I'll bring up the Python
17:06 - website and show you here
17:08 - let's go python org let's you know see
17:12 - so the go button i guess is this
17:13 - so let's inspect notice that this has
17:16 - the ID submit so since we want to access
17:18 - that what we do is we say let's make a
17:20 - main page locators class this will have
17:23 - all of the locators for the stuff on the
17:24 - main page we'll define as a constant
17:27 - what you know the actual element is so
17:30 - go button that's what we're naming it
17:32 - and then we access that by the ID with
17:35 - the value submit so that's what we do
17:37 - with this tuple and that's just it makes
17:39 - it really organized and clean an easy
17:40 - way to find all of our locators so the
17:43 - next thing we're going to do is say
17:44 - class search
17:46 - Saltz page locators I know this is a bit
17:51 - of a mess here locators is that correct
17:55 - I think so and this one here from object
17:57 - again object is not necessary but I'll
17:59 - just include it and if you will just put
18:01 - pass so they've done pass here I don't
18:04 - know why all search result locators
18:06 - should come here okay so we'll talk
18:08 - about this in a second month search
18:09 - results page locators so the idea I
18:12 - think behind this is that this will
18:14 - actually get filled later on like we'll
18:16 - add stuff into this class at least
18:18 - that's what it's saying in the
18:19 - documentation a class for search result
18:21 - locators all search result locators
18:23 - should come here okay
18:25 - so maybe there's putting that there's a
18:26 - template what we'll see if we actually
18:28 - end up using that later on but the idea
18:30 - is let's say we had another page for the
18:31 - search results well we will put the
18:33 - locators for whatever it is we wanted to
18:35 - find inside here and again remember if
18:37 - you don't want to find bout ID you can
18:39 - find by XPath CSS selector class name
18:41 - name all of that fun stuff and this will
18:44 - just be equal to whatever that value is
18:46 - that you want to find
18:47 - okay so locator is good

Cleaned transcript:

hello everybody and welcome to another selenium Python tutorial so what we're gonna be talking about this video is the unit test framework and how that works with selenium now we remember that selenium is really used the main purpose for testing websites and in fact if you're making a large website you're really gonna want to create these automated tests which I'm going to be showing you here so that rather than having to manually go to the website and you know fill in a form or type this here or press a button all you have to do is run a script that will tell you yes this website worked or no this website did not and that's extremely useful that will literally save you hours maybe even days of development time depending on how large the website is and learning a skill like unit test is useful just in Python in general because this is a builtin module you can use this for any application and its standard practice kind of in software engineering and in large development to be using automated tests or automated build you know you've heard of things like circles CI I and stuff like that to really make sure that what your code is functioning without having to manually go in there and test all the different functions especially when you have you know millions of lines of code or whatever it may be so another advantage to the way that I'm going to show you how to write selenium coding this video is that think about if we were testing a large website that if we kept writing code like this in a procedural manner where we're just kind of going like line by line down by down this we get very messy very fast and in fact you know if we had to test a hundred web pages well this would you know be a nightmare to have to scroll through and look for different things so the way I'm gonna show you here actually separates every component that we've kind of defined here into its own class and it makes it really easy to once we have this initial set up go ahead and test another page and it just you'll understand as we get through but the idea is that what I'm gonna do here is just walk through the code that they have on the selenium website so if you go to the selenium website this is the documentation this is in section 6 it's called page objects and this is the way that they recommend you write the selenium code so rather than me trying to come up with a better example I figured we'll just use theirs and the reason I'm gonna do this cuz some of you may be equal why don't I just go look at the documentation is because the documentation is very very and if you're a beginner especially if you're watching this far into the videos you probably you know would rather have me walk through and kind of explain these different aspects of the code they don't talk about so for example they come down here you understand what set means what get means what about lambda you know what is all of these things that we have here why are we importing this why are we inheriting from a base page I'm gonna walk through and explain how all of these different things work so not only do you understand selenium but you understand the Python syntax that goes into building something like this so I'll just be copying that but I will be you know slowing down making some other examples to really hopefully make you guys understand how that works all right so the first thing we need to do is make a new folder now I'm gonna call this test case you can call whatever you want and inside of this folder I'm going to put four Python files now it's not important that you have a new folder but you just need these files that I'm gonna make so we're gonna have main dot PI we're gonna have a new file called element dot PI we're gonna have a file called locator dot pi if I could find where was the new file thing oh it's all the way up here locator jumped PI what's another one that we wanted and then the last one we need if I can find out here is called page pine now already we're noticing how things might be going here right so we have four files in each of these files is gonna represent a different thing and we're gonna have different parts of the webpage that we're testing in each of them this is who's gonna make it way easier and more organized and you'll understand the benefit of this as we go on so the first thing we're gonna do is start coding out the main top I'm not gonna code the entire thing but a majority of it we're gonna start by importing unit tests now unit test is built into Python you don't need to install this it's already there in the syntax I'm gonna show you this will apply to things that aren't selenium as well so this is useful just to learn unit tests if you want to do that so next thing we're gonna say from selenium import webdriver and then we're gonna actually import that page file because we'll use it later on so import page so notice pages of file I created here oops excellent close main will be loading some stuff from that now the next thing I want to do is create class in this class is going to stand for the main test case that I want to perform on this website now you could have multiple of these classes we're going to use one but this one is called is Python oops Python or search if I could type today which apparently is not happening Python org search test or not test sorry just search and then in here we're gonna inherit from unit test dot test case now whenever we want to make like a new separate thing to test like a completely different maybe page or not even pages a completely different function of the website we'd likely create a new test case but inside of here you're gonna see that we can test multiple aspects of the website from this case it's hard to really explain until you see the methods but I'll talk about when you would make a new one of these classes later on now why are we inherited from unit test test case well essentially this is gonna give us access to some methods there's some things that are gonna be inherited that we need to make this set up like a test case and you guys are gonna see that when we press a button what's actually gonna happen is this is gonna run all of the tests that we've defined and give us some nice output and say test one passed test two passed test three failed whatever it may be so let's go ahead and start writing some methods inside of here now the first method that we're usually gonna write inside of our test case is called setup now you can think of this is almost like an an it method but specific to test case so essentially whenever we call this test case the first thing that will run every single time is this setup so this is where you can put any variables you want to define any things you need to well setup before the test case gets started so the first thing we need is a driver so we're gonna say self dot driver equals webdriver doc chrome and then here we're gonna put the path to Chrome which I'm just gonna copy from here now it is worth noting that what we're gonna be doing here is actually testing the Python website so that website itself and making sure that the search function which obviously we know works works on the website so that's what this example is I guess it makes sense since again we aren't doing pipe up now the next I'm gonna do is say self dot not get self dot driver gets and then the website that we want to test we've seen this before and I'm just gonna copy it in from over here but it's HTTP colon slash slash wwp I thought work alright so now that we have that set up the next method we're gonna write is actually teardown so we write teardown and we put self in here what this is going to do is run after this test case finished so think of this is like cleaning up you know once everything's done do this so in here all we're gonna do is say self dot driver closed which will close that tab pretty straightforward you know this will run at the beginning this will run at the end everything in between and it doesn't obviously matter where like what order you define these methods and is gonna run in between them so why don't we want to make a method that tests something so it gives us an output of like pass/fail what we need to do is start this with the named test so since we inherited from unit test test case if we start a method name with the keyword test underscore you know am I saying underscore test in lower case then we can name it whatever we want so I can just say test example cuz I'm just gonna do an example here and this means this method will automatically be run when we run the unit test if I made another method though which I can do and I called not a test like that for example this method will not be run automatically because it doesn't start with the word test so that's important I'll actually show you Mike I'll prove to you this doesn't work so this won't print and then inside of here I'm just gonna say print test and then I'm actually going to assert true now assert essentially says assert like see if the condition on the right side is true and this is going to tell us whether the test case failed or whether it passed and each one of these little methods here will be their own tests that are gonna be run from within this main test case so they need to end or they need to have an assert inside of them to tell us whether this was true or whether this was false in whether this test case failed or passed right so essentially if the argument on the right side of assert is true the test case passed if it's false it failed so I'm actually gonna just show you how this works so far for the unit test we're gonna just do this if underscore underscore name underscore underscore equals underscore underscore main underscore underscore this just means if we run this module not if it's being imported then what we'll do is say Python or not actually sorry unit test dot me now what this says is run all of the unit tests that we've defined and since this inherit from unit tests we know that this is a unit test so this is gonna run so let's actually run this code let's see what we get obviously gonna open the Python website and then if we look at the output it says ran one test in 3.1 32 seconds okay so nuts notice this work that was fine and this is the nice output we're getting from the test case now if I decide to assert false like that and run this here we will have to wait for this to boot up but we can see test wait for the output assert false and notice that this did not work so ran one test in four point eight six two seconds failed failures equals one so that's the output we're getting and it even tells us where it failed so it failed at test example and you see it says test F because we failed so let's just make another one and notice is not a test method was not running because it didn't start with test so let's get rid of that let's make another test case and let's show you what happens when one passes in one fails so test example two like that say self I don't need to print anything I'll just assert true like that so let's run this and let's have a look okay so test F alright and ran two tests in five point six four six seconds and notice failures equals one so it says one failed it shows us where it failed a test example and that is kind of how that works now notice though that this set up and I'll actually I'll print inside of setup so we can show you ran twice so let's see this print so so setup boom we see that's in the console one time close and then it prints setup again so essentially this setup method will be called every time that the the test cases are run so for each test key setup is called once and teardown is called one so we'll boot this up run test case one and then teardown boot this up run test case two and then teardown so that's kind of the procedure that's pretty important to know actually because you have to make sure that you know you're gonna be starting fresh every single time for each one of these tests so that's how that works these are the test cases now I can't we can't really do any real test cases yet we need to set some other things up but that's the basis so hopefully you at least understand why this is useful because we can test different components and we can see which one's passed and which ones failed with some nice output and I mean this is all you really need to do to get that set up so now that we have that the next thing we're going to do is actually set up what's called a page object now each page on our website we want to actually define inside of a class so that we can access things really easily we can check if something is correct and this is where we're going to be writing a lot of more selenium code is actually inside of page so what I'm gonna do inside a page is just say class base page like that is equal to and within a Heron it's object now the inheritance object is optional I'm just including it because that's what they have on the selenium website but again you don't need that so then here we're gonna say define underscore underscore knit underscore underscore self and we're gonna say self dot driver like this equals driver and driver is gonna be an argument here as well so essentially when we set up a base page and base page is gonna stand for this will be the base class for all of our pages we will need to pass it a driver so the idea here is inside of this page file we're gonna define a class for each web page we're gonna test so say we have the home page and maybe like you know the search page or something like that then we would have two classes home page search page right and we would both inherit from base page because now we've defined this constructor which will be used for both of them and there was any methods that we wanted both of them to have access to when you put them inside of base page and then since we're inheriting from base page we would get access to that so that's the basis of inheritance hopefully you guys understand basic inheritance but the idea is do I do something like you know class main page and I inherit from base page this constructor method here will be used because what this says is use the methods from base page that's that's what this says so I don't need to now define in an it in here because automatically by default since I've inherited we'll be using this initialization so let's say class main page what I'm gonna do is actually create a method and I'm gonna say is underscore title underscore matches like that now in here we're gonna put self and what this method is gonna do is tell us if the title of the webpage matches what we want it to match so it's gonna say you know is this true is this false so we're gonna return if Python in self dot driver remember drivers that web driver that we've got from the initialization because we've inherited so we have access to driver in self dot driver dot yeah title I believe it is yeah so that's right so what this is gonna do is just tell us whether or not the string Python is in the title of the website or the webpage that this driver is currently on so that's the method we've defined here and we can define those kind of methods inside of these pages right and what we're actually gonna do if we go back to say main dot PI is if we're running a test and we'll say define you know test underscore title like that we do self what we'll say is all right so we have page imported here so we'll say you know main page equals page dot main page we'd initialize that and then we'd say assert main page like that dots is title matches so this will now tell us okay so let's go to the main page which is over here and it will return if Python isn't self dot driver dot title and then here we'll say okay well if that's true this test case you know passed if it was false this failed so that's the idea here for these kind of test cases so let's go back to page dot pi I just trying to show you you know sequentially how we're actually doing this so the next thing that's inside of here is the define click underscored go on the square button again I'm just following along with what they have in the documentation and we're gonna do in here is say element equals self dot driver dot find underscore element and then here we're gonna have to add something that I haven't yet defined and then we're gonna say element uh click so let me leave this blank for a second and here we're gonna put something and this is what brings me now to the next file which is locators I know this is a lot of but we kind of have to go between all the files and write them I can't write them you know one at a time okay so now we have this locators file so the idea behind this file is any CSS selector any ID any way that we locate an element we should keep in one centralized location so that if we ever need to it's very easy to change the ID or to change the CSS selector to change some attribute and we don't to change any other aspect of the code other than this file which will be quite small so what we'll actually do in here is safe from selenium dot webdriver dot common dot by import by so we should remember this import from earlier and what we're gonna do is create classes that represent objects that we want to find so for example class main page locator just like that this will inherit from object I'll talk about more exactly what this is in a second so in here from object and we'll say go underscore button notice is this in all capitals because this is gonna be constant by dot ID and the ID is submit okay so what I've done here is I've said let's make a class that defines all of the locators for the main page so for the main page right that's the home page or whatever page it might be and if there's any attribute it's easier I did oops accidentally if there's any attributes on that page we want to access what we should do is define how we want to access them and what their value is so if we want to access the Go button on the Python website and I'll actually I'll bring up the Python website and show you here let's go python org let's you know see so the go button i guess is this so let's inspect notice that this has the ID submit so since we want to access that what we do is we say let's make a main page locators class this will have all of the locators for the stuff on the main page we'll define as a constant what you know the actual element is so go button that's what we're naming it and then we access that by the ID with the value submit so that's what we do with this tuple and that's just it makes it really organized and clean an easy way to find all of our locators so the next thing we're going to do is say class search Saltz page locators I know this is a bit of a mess here locators is that correct I think so and this one here from object again object is not necessary but I'll just include it and if you will just put pass so they've done pass here I don't know why all search result locators should come here okay so we'll talk about this in a second month search results page locators so the idea I think behind this is that this will actually get filled later on like we'll add stuff into this class at least that's what it's saying in the documentation a class for search result locators all search result locators should come here okay so maybe there's putting that there's a template what we'll see if we actually end up using that later on but the idea is let's say we had another page for the search results well we will put the locators for whatever it is we wanted to find inside here and again remember if you don't want to find bout ID you can find by XPath CSS selector class name name all of that fun stuff and this will just be equal to whatever that value is that you want to find okay so locator is good
