With timestamps:

00:00 - hello everyone welcome back to show code
00:02 - today I am going to be teaching you how
00:05 - to make use and change dictionaries in
00:07 - Python I have lots of experience in
00:10 - Python and by the end of this video you
00:11 - will have a really good understanding of
00:13 - what dictionaries are and how to use
00:15 - them so a dictionary is the last
00:18 - collection type that we have to cover in
00:20 - this series in the previous videos we
00:22 - looked at three other collection types
00:24 - in Python there are lists tuples and
00:27 - sets a dictionary is changeable ordered
00:30 - and indexed but they use key value pairs
00:34 - and this is what makes them different to
00:36 - lists I'll explain what keys and values
00:39 - are when we get into some examples let's
00:41 - start coding so I've just got open a new
00:45 - python file all right let's make a
00:47 - dictionary so let's do computer equals
00:52 - some curly brackets and then this is
00:57 - we're going to define our key here so
01:00 - let's have processor go on a core i5
01:08 - comma ram : 16 gigabytes ddr4 i've been
01:21 - if we print computer and say that and
01:27 - then if we run it we just get our
01:29 - dictionary here so this processor right
01:33 - here
01:33 - this string is our key and this right
01:37 - here is our value and this together is
01:40 - called our key value pair and we
01:42 - separate our p.m. value with this :
01:45 - and then we separate key value pairs
01:48 - with commas so this is a key value pair
01:52 - this is a key value pair this is a key
01:55 - this is a value key value we can access
02:00 - the values of a dictionary by referring
02:02 - to the key so we do processor
02:08 - and we get core i5 let's change this to
02:13 - like motherboard or something and we get
02:17 - an error
02:18 - kierra motherboard because motherboard
02:21 - doesn't exist here but all we can do is
02:24 - you can do computer don't get
02:28 - motherboard and we just get none
02:33 - so this get method doesn't raise an
02:37 - error it just if it can't find it it'll
02:39 - just return non instead of an error so
02:44 - there are two ways to access values from
02:47 - a dictionary we can use the square
02:49 - brackets method or we can use a get
02:51 - method we can change values by referring
02:54 - to the key computer RAM equals 32
03:07 - gigabytes ddr4 say that and then if we
03:13 - print out computer as you can see the
03:19 - RAM value has now been changed to 32
03:22 - gigabytes ddr4 if you're enjoying the
03:25 - video or are finding it useful be sure
03:26 - to give this video like it really does
03:29 - help me out also subscribe I make Python
03:31 - content almost every day anyways you can
03:35 - add items to a dictionary by defining a
03:37 - key and setting the value to something
03:39 - so if I just clear this and then if we
03:44 - do compute computer let's just get
03:49 - something that doesn't exist like I
03:50 - don't know SSD and then set that equal
03:54 - to Sam so one terabyte and very food
03:58 - printout computer
04:07 - as you can see we've added this new key
04:11 - value pair onto the end SSD is the key
04:14 - and the value is Samsung one terabyte to
04:17 - remove values we can use the pop method
04:20 - so computer dot pop SSD benefit from
04:30 - computer we've added on the SSD right
04:36 - here but then we've popped it and
04:38 - removed it and we no longer have the SSD
04:41 - in our computer and we can also have
04:44 - nested dictionaries what I mean by this
04:47 - is for a dictionary can contain other
04:49 - dictionaries let's create a dictionary
04:51 - called employees so employees equals and
04:58 - ye one and then open open up a new
05:03 - dictionary and then let's expand these
05:07 - onto different lines here we can have
05:10 - dictionaries over multiple lines so then
05:14 - we can do name Col on J comma job go on
05:27 - programmer go on age 34 okay so that's
05:37 - one dictionary done and then if we put a
05:42 - comma here we're returning back to the
05:44 - original dictionary so then we can have
05:48 - employee to cuddle on another dictionary
05:53 - and then let's drop down a bit I'm just
05:57 - going to copy and paste all this stuff
05:59 - here named Jill job PC builder
06:07 - age 31 okay and then let's just put a
06:14 - comment or come over and then there we
06:18 - go we've created a dictionary here
06:19 - called employees and then the first key
06:23 - of that is called employee one and Pemba
06:26 - value of employee one is another
06:28 - dictionary with keys and values named
06:32 - Jeff job programmer age 34 and then
06:36 - we've closed out of that dictionary
06:42 - and then moving on to the second key
06:45 - value pair the key of the second one is
06:48 - employee two and the value is this
06:50 - dictionary with multiple key value pairs
06:53 - in there let's just move this back here
06:55 - and then we can print employees and as
07:03 - you can see we get quite a long and
07:06 - complicated print out statement here but
07:09 - what we can do is you can print
07:11 - employees employee one and we get the
07:19 - value which is are nested dictionary and
07:22 - then to access the values inside that
07:25 - nested dictionary we do name and then we
07:32 - get Jeff because it's looking inside the
07:35 - value of employee one then it's looking
07:38 - inside of the value of name and it's
07:41 - printing out Jeff because that's the
07:43 - value of the name so we could change
07:46 - this to job and we'd get programmer okay
07:49 - so that's nested dictionaries there are
07:52 - a few dictionary methods but I think may
07:54 - be useful for you to know but I won't go
07:56 - into detail with them because they're
07:57 - similar to other collection methods we
07:59 - have already learned so we have to
08:01 - Claire so let's just create another
08:03 - dictionary called my depth equals what
08:09 - do you do and then we have the clear
08:13 - method so you could do my dick doc clear
08:16 - print my Dick's run it and we get an
08:24 - empty dictionary because this dictionary
08:26 - has been completely wiped then this copy
08:29 - so we could do x equals my dick's
08:34 - dot copy and I'll just remove easier and
08:37 - then print X we need the parentheses on
08:43 - the end here and we just get a copy of
08:46 - the dictionary my dick's then we also
08:49 - have the items methods we can print my
08:52 - dict
08:53 - dar items
08:56 - and then this returns a list containing
08:59 - a tuple for each key value pair so if we
09:01 - run it we get a list here and then
09:05 - inside this we get multiple tuples for
09:08 - each key and value so then we can also
09:11 - get the keys of a dictionary with the
09:13 - keys method and then we just get a west
09:15 - of keys which is key one and key too
09:18 - you can also get values then we'll get a
09:21 - list of values value one value to a few
09:26 - extra ones as well we can completely
09:28 - delete a dictionary with Dell with the
09:32 - Dell keyword so Dell my dict print my
09:36 - dick's
09:36 - and we're going to get an error because
09:39 - my dick's doesn't exist anymore because
09:41 - we've just throw at it here then of
09:44 - course we can always just get the length
09:45 - of the dictionary so it prints when my
09:49 - dick's and we get to because it counts a
09:56 - key value purse so first element second
09:59 - element okay that's pretty much it for
10:02 - dictionaries they are really useful in
10:04 - certain situations really because of how
10:06 - they use key value pairs
10:08 - that's for last collection type in
10:10 - Python next video we will be learning
10:13 - about for loops and how we can iterate
10:15 - through these collection types that we
10:17 - have learnt about if you have any
10:18 - questions or comments be sure to leave
10:20 - them down below I'll be sure to reply to
10:22 - them if you would like to support me and
10:24 - what I do you can give this video a like
10:26 - it really does help me out a lot
10:28 - also it would be great if you subscribe
10:30 - I post Python content almost every day
10:33 - that's it from me Cheers
10:35 - and goodbye

Cleaned transcript:

hello everyone welcome back to show code today I am going to be teaching you how to make use and change dictionaries in Python I have lots of experience in Python and by the end of this video you will have a really good understanding of what dictionaries are and how to use them so a dictionary is the last collection type that we have to cover in this series in the previous videos we looked at three other collection types in Python there are lists tuples and sets a dictionary is changeable ordered and indexed but they use key value pairs and this is what makes them different to lists I'll explain what keys and values are when we get into some examples let's start coding so I've just got open a new python file all right let's make a dictionary so let's do computer equals some curly brackets and then this is we're going to define our key here so let's have processor go on a core i5 comma ram 16 gigabytes ddr4 i've been if we print computer and say that and then if we run it we just get our dictionary here so this processor right here this string is our key and this right here is our value and this together is called our key value pair and we separate our p.m. value with this and then we separate key value pairs with commas so this is a key value pair this is a key value pair this is a key this is a value key value we can access the values of a dictionary by referring to the key so we do processor and we get core i5 let's change this to like motherboard or something and we get an error kierra motherboard because motherboard doesn't exist here but all we can do is you can do computer don't get motherboard and we just get none so this get method doesn't raise an error it just if it can't find it it'll just return non instead of an error so there are two ways to access values from a dictionary we can use the square brackets method or we can use a get method we can change values by referring to the key computer RAM equals 32 gigabytes ddr4 say that and then if we print out computer as you can see the RAM value has now been changed to 32 gigabytes ddr4 if you're enjoying the video or are finding it useful be sure to give this video like it really does help me out also subscribe I make Python content almost every day anyways you can add items to a dictionary by defining a key and setting the value to something so if I just clear this and then if we do compute computer let's just get something that doesn't exist like I don't know SSD and then set that equal to Sam so one terabyte and very food printout computer as you can see we've added this new key value pair onto the end SSD is the key and the value is Samsung one terabyte to remove values we can use the pop method so computer dot pop SSD benefit from computer we've added on the SSD right here but then we've popped it and removed it and we no longer have the SSD in our computer and we can also have nested dictionaries what I mean by this is for a dictionary can contain other dictionaries let's create a dictionary called employees so employees equals and ye one and then open open up a new dictionary and then let's expand these onto different lines here we can have dictionaries over multiple lines so then we can do name Col on J comma job go on programmer go on age 34 okay so that's one dictionary done and then if we put a comma here we're returning back to the original dictionary so then we can have employee to cuddle on another dictionary and then let's drop down a bit I'm just going to copy and paste all this stuff here named Jill job PC builder age 31 okay and then let's just put a comment or come over and then there we go we've created a dictionary here called employees and then the first key of that is called employee one and Pemba value of employee one is another dictionary with keys and values named Jeff job programmer age 34 and then we've closed out of that dictionary and then moving on to the second key value pair the key of the second one is employee two and the value is this dictionary with multiple key value pairs in there let's just move this back here and then we can print employees and as you can see we get quite a long and complicated print out statement here but what we can do is you can print employees employee one and we get the value which is are nested dictionary and then to access the values inside that nested dictionary we do name and then we get Jeff because it's looking inside the value of employee one then it's looking inside of the value of name and it's printing out Jeff because that's the value of the name so we could change this to job and we'd get programmer okay so that's nested dictionaries there are a few dictionary methods but I think may be useful for you to know but I won't go into detail with them because they're similar to other collection methods we have already learned so we have to Claire so let's just create another dictionary called my depth equals what do you do and then we have the clear method so you could do my dick doc clear print my Dick's run it and we get an empty dictionary because this dictionary has been completely wiped then this copy so we could do x equals my dick's dot copy and I'll just remove easier and then print X we need the parentheses on the end here and we just get a copy of the dictionary my dick's then we also have the items methods we can print my dict dar items and then this returns a list containing a tuple for each key value pair so if we run it we get a list here and then inside this we get multiple tuples for each key and value so then we can also get the keys of a dictionary with the keys method and then we just get a west of keys which is key one and key too you can also get values then we'll get a list of values value one value to a few extra ones as well we can completely delete a dictionary with Dell with the Dell keyword so Dell my dict print my dick's and we're going to get an error because my dick's doesn't exist anymore because we've just throw at it here then of course we can always just get the length of the dictionary so it prints when my dick's and we get to because it counts a key value purse so first element second element okay that's pretty much it for dictionaries they are really useful in certain situations really because of how they use key value pairs that's for last collection type in Python next video we will be learning about for loops and how we can iterate through these collection types that we have learnt about if you have any questions or comments be sure to leave them down below I'll be sure to reply to them if you would like to support me and what I do you can give this video a like it really does help me out a lot also it would be great if you subscribe I post Python content almost every day that's it from me Cheers and goodbye
