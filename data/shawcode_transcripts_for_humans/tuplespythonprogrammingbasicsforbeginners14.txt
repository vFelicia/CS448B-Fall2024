With timestamps:

00:00 - hello everyone welcome back to shaw code
00:03 - today i'm going to be teaching you how
00:04 - to make
00:05 - and apply tuples in python i have lots
00:08 - of experience in python and by the end
00:10 - of this tutorial
00:11 - you will have a really good
00:12 - understanding of python tuples
00:15 - okay now a tuple is another collection
00:17 - type last video we learned about lists
00:20 - if you haven't seen that video there is
00:21 - a link to the playlist in the
00:23 - description or you can click
00:24 - on the card in the top right of the
00:26 - screen a tuple is a collection that is
00:28 - ordered
00:29 - but it's unchangeable you are unable to
00:31 - modify them part way through the program
00:34 - this is what makes them different to
00:35 - lists you may be thinking
00:37 - why would i use a tuple instead of a
00:39 - list when i can't change it why don't i
00:41 - just create a list and not change it
00:43 - well tuples are actually faster than
00:45 - lists what i mean by this is they take
00:47 - less time to access
00:48 - it's only by a few milliseconds usually
00:51 - when you start getting into
00:52 - huge tuples and lists in big programs
00:55 - the difference is quite noticeable
00:57 - tuples are also safer and you can't
00:59 - accidentally change them
01:00 - during a program so to recap they are
01:02 - unchangeable
01:03 - and they are ordered now let's move on
01:05 - to making some tuples
01:07 - so just open up idle
01:12 - and just bring up a new file
01:15 - so what we want to do first is just set
01:17 - up a tuple
01:18 - so my tuple equals
01:22 - and make some round brackets
01:26 - and let's just have in here uh
01:31 - just names of people so george
01:35 - separated by commerce jack
01:39 - jeff and calton
01:44 - okay so fat solar tuple is it's just
01:48 - you set it out the exact same way as you
01:50 - do with a list apart from instead of
01:52 - square brackets
01:53 - you use round brackets and we can just
01:56 - print out as usual
01:57 - my tuple and let's save this
02:02 - and if we run it we just print out the
02:04 - tuple and you separate them with commas
02:07 - like lists it's exactly the same apart
02:09 - from these parentheses right here
02:11 - you can access them the same way as
02:13 - lists so let's print
02:15 - my tuple one
02:19 - and that will print out jack yep there
02:21 - we go because remember
02:23 - zero one two three you just print out
02:26 - the index
02:27 - we can also do negative indexing it's
02:29 - just the same
02:30 - so we'll print out column with negative
02:32 - indexing yep there we go
02:34 - i'm going to go a bit faster on this
02:37 - accessing because we already covered it
02:39 - last video
02:40 - so if you haven't seen that make sure
02:42 - you go check it out and you can
02:44 - also do ranges so print my
02:48 - tuple uh
02:50 - let's just go to three
02:56 - i'll just print out judge jack and jeff
03:00 - you can do index ranges negative index
03:03 - ranges
03:04 - it's all just the same now what i said
03:07 - earlier
03:08 - about tuples being unchangeable
03:11 - there is actually a way you can bypass
03:13 - this although it is a bit pointless
03:15 - because you might as well just have a
03:16 - list
03:17 - but if you want to do it you can so what
03:18 - we do is
03:21 - i'm just going to get rid of all this
03:22 - first bitkeeper tuple
03:24 - so if we just make a new variable called
03:28 - y
03:28 - and we do list my tuple
03:34 - it just creates a new variable called y
03:37 - it copies all of that data from my tuple
03:40 - and turns it into a list
03:41 - and then we can do y like zero
03:45 - equals modified
03:49 - and then we do my tuple
03:53 - equals tuple y so that basically just
03:56 - copies out y
03:57 - and converts it back to a tuple then if
04:00 - we print out
04:01 - my tuple
04:06 - as you can see we've actually modified
04:08 - for tuple there's not much point in
04:09 - doing it you might as well just use a
04:11 - list
04:12 - it's a lot easier than writing out what
04:15 - four lines three lines of code
04:16 - just to change it we can also check if
04:19 - an item is in a tuple so if
04:22 - you're george
04:25 - in tube in my
04:29 - tuple print
04:35 - george is in my tuple
04:40 - okay save it and run it as we can see
04:44 - george is in my tuple it's literally
04:46 - just the same uh
04:47 - in operator as we learned last video
04:50 - it's basically just the same thing as
04:52 - with lists with the
04:54 - if and in it's the exact same thing
04:56 - apart from
04:57 - it's with the tuple i'm just showing you
04:59 - that tuples and lists are very similar
05:01 - in
05:02 - functionality and how you can access
05:03 - them one thing i forgot to mention in
05:05 - the previous video
05:07 - is how to get the length of something so
05:09 - this applies to tuples as well as lists
05:12 - to see how many items your tuple or your
05:14 - list has you can use a length function
05:17 - so i'm going to print when my tuple
05:23 - run it we get four because it has four
05:26 - items in this
05:28 - and if we create a quick list my list
05:33 - let's just create a list of numbers
05:36 - let's actually get five in there uh
05:40 - print the length of my list
05:43 - it works just the same print out five
05:45 - because there's five items
05:47 - in the list if you are enjoying the
05:48 - video so far or have learned something
05:50 - new
05:51 - be sure to give this video a like it
05:53 - really does help me out
05:54 - anyway as i was saying if you want to
05:56 - create a tuple with just one item
05:58 - you need to have a comma after the first
06:00 - item this way python will read it as a
06:03 - tuple and not just a number or a string
06:05 - or whatever your data is
06:07 - so if we call it one tuple
06:11 - equals hello
06:14 - we need to have a comma after it to show
06:16 - that it is a tuple otherwise python will
06:18 - just think that it's a string
06:21 - that is a string that is a tuple another
06:24 - thing that i forgot to mention in the
06:26 - last video if it applies to both tuples
06:28 - and lists
06:29 - is that you can join uh multiple tuples
06:31 - or lists together
06:33 - so if we make another table called
06:36 - second tuple
06:39 - uh hello
06:44 - there then we could do
06:47 - my tuple plus equals second
06:50 - tuple and then print my tuple
07:00 - it's hard typing and speaking at the
07:02 - same time
07:03 - um so as you can see we've concatenated
07:08 - two tuples together so as you can see we
07:10 - got the first one but we've also
07:11 - added the items from the second tuple
07:14 - there are a couple of
07:15 - tuple methods to talk about as well uh
07:18 - there is a count method
07:19 - i'm just gonna get rid of this quick
07:21 - what that does is it returns
07:23 - the number of times a value appears in
07:26 - his hoople
07:27 - for example if i had a two pool that had
07:29 - three lots of the same value
07:31 - the count method would return free so
07:33 - let's just create a
07:35 - another two pull so count to full
07:38 - equals hi
07:41 - hi hi
07:46 - and then if we do count
07:50 - tuple.count
07:54 - searching for hi sorry we need to print
07:56 - this out actually
07:58 - print
08:01 - yeah as you can see we get free because
08:03 - there's three lots of
08:04 - high and we're searching for how many
08:06 - times high appears in that tuple
08:09 - and then the final method we should
08:11 - learn is um
08:13 - the index method this searches the tuple
08:16 - for a value and returns the position
08:18 - of where it was found or it returns the
08:20 - index of that value
08:22 - all right so let's just get an example
08:25 - of that
08:27 - so print my tuple
08:32 - dot index jeff
08:38 - and we'll get to because it's looking
08:41 - where does jeff
08:42 - appear in this tuple oh it appears at
08:45 - index 2
08:46 - let's print out index 2. as a quick side
08:48 - note guys make sure to leave a comment
08:50 - about whether you prefer lists or tuples
08:52 - i will reply to as many comments as i
08:54 - can okay
08:56 - that's all there is to do with tuples
08:58 - they are slightly different to lists
08:59 - the main thing being that tuples are
09:02 - unchangeable
09:03 - they're also faster but you are losing
09:05 - out on the option to change them
09:08 - what i recommend you do now is get some
09:10 - practice tuples and try some stuff out
09:12 - yourself that we have learnt today
09:14 - that way you will have a great
09:15 - understanding of tuples and how they
09:17 - operate
09:18 - now i'm going to end the video here next
09:20 - video we will have a break from
09:22 - collections and do a little bit more on
09:24 - strings
09:24 - they have a couple of extra things to
09:26 - learn about and you should find them
09:28 - easy to pick up
09:29 - after watching this video and the last
09:31 - video if you have any questions or
09:33 - comments be sure to leave them down
09:34 - below also give this video a big fat
09:37 - thumbs up if it was useful or you
09:39 - enjoyed it
09:39 - doing that really does help me out a lot
09:42 - make sure you subscribe for
09:43 - more python tutorials so you don't miss
09:45 - out on any that's it from me
09:47 - cheers goodbye

Cleaned transcript:

hello everyone welcome back to shaw code today i'm going to be teaching you how to make and apply tuples in python i have lots of experience in python and by the end of this tutorial you will have a really good understanding of python tuples okay now a tuple is another collection type last video we learned about lists if you haven't seen that video there is a link to the playlist in the description or you can click on the card in the top right of the screen a tuple is a collection that is ordered but it's unchangeable you are unable to modify them part way through the program this is what makes them different to lists you may be thinking why would i use a tuple instead of a list when i can't change it why don't i just create a list and not change it well tuples are actually faster than lists what i mean by this is they take less time to access it's only by a few milliseconds usually when you start getting into huge tuples and lists in big programs the difference is quite noticeable tuples are also safer and you can't accidentally change them during a program so to recap they are unchangeable and they are ordered now let's move on to making some tuples so just open up idle and just bring up a new file so what we want to do first is just set up a tuple so my tuple equals and make some round brackets and let's just have in here uh just names of people so george separated by commerce jack jeff and calton okay so fat solar tuple is it's just you set it out the exact same way as you do with a list apart from instead of square brackets you use round brackets and we can just print out as usual my tuple and let's save this and if we run it we just print out the tuple and you separate them with commas like lists it's exactly the same apart from these parentheses right here you can access them the same way as lists so let's print my tuple one and that will print out jack yep there we go because remember zero one two three you just print out the index we can also do negative indexing it's just the same so we'll print out column with negative indexing yep there we go i'm going to go a bit faster on this accessing because we already covered it last video so if you haven't seen that make sure you go check it out and you can also do ranges so print my tuple uh let's just go to three i'll just print out judge jack and jeff you can do index ranges negative index ranges it's all just the same now what i said earlier about tuples being unchangeable there is actually a way you can bypass this although it is a bit pointless because you might as well just have a list but if you want to do it you can so what we do is i'm just going to get rid of all this first bitkeeper tuple so if we just make a new variable called y and we do list my tuple it just creates a new variable called y it copies all of that data from my tuple and turns it into a list and then we can do y like zero equals modified and then we do my tuple equals tuple y so that basically just copies out y and converts it back to a tuple then if we print out my tuple as you can see we've actually modified for tuple there's not much point in doing it you might as well just use a list it's a lot easier than writing out what four lines three lines of code just to change it we can also check if an item is in a tuple so if you're george in tube in my tuple print george is in my tuple okay save it and run it as we can see george is in my tuple it's literally just the same uh in operator as we learned last video it's basically just the same thing as with lists with the if and in it's the exact same thing apart from it's with the tuple i'm just showing you that tuples and lists are very similar in functionality and how you can access them one thing i forgot to mention in the previous video is how to get the length of something so this applies to tuples as well as lists to see how many items your tuple or your list has you can use a length function so i'm going to print when my tuple run it we get four because it has four items in this and if we create a quick list my list let's just create a list of numbers let's actually get five in there uh print the length of my list it works just the same print out five because there's five items in the list if you are enjoying the video so far or have learned something new be sure to give this video a like it really does help me out anyway as i was saying if you want to create a tuple with just one item you need to have a comma after the first item this way python will read it as a tuple and not just a number or a string or whatever your data is so if we call it one tuple equals hello we need to have a comma after it to show that it is a tuple otherwise python will just think that it's a string that is a string that is a tuple another thing that i forgot to mention in the last video if it applies to both tuples and lists is that you can join uh multiple tuples or lists together so if we make another table called second tuple uh hello there then we could do my tuple plus equals second tuple and then print my tuple it's hard typing and speaking at the same time um so as you can see we've concatenated two tuples together so as you can see we got the first one but we've also added the items from the second tuple there are a couple of tuple methods to talk about as well uh there is a count method i'm just gonna get rid of this quick what that does is it returns the number of times a value appears in his hoople for example if i had a two pool that had three lots of the same value the count method would return free so let's just create a another two pull so count to full equals hi hi hi and then if we do count tuple.count searching for hi sorry we need to print this out actually print yeah as you can see we get free because there's three lots of high and we're searching for how many times high appears in that tuple and then the final method we should learn is um the index method this searches the tuple for a value and returns the position of where it was found or it returns the index of that value all right so let's just get an example of that so print my tuple dot index jeff and we'll get to because it's looking where does jeff appear in this tuple oh it appears at index 2 let's print out index 2. as a quick side note guys make sure to leave a comment about whether you prefer lists or tuples i will reply to as many comments as i can okay that's all there is to do with tuples they are slightly different to lists the main thing being that tuples are unchangeable they're also faster but you are losing out on the option to change them what i recommend you do now is get some practice tuples and try some stuff out yourself that we have learnt today that way you will have a great understanding of tuples and how they operate now i'm going to end the video here next video we will have a break from collections and do a little bit more on strings they have a couple of extra things to learn about and you should find them easy to pick up after watching this video and the last video if you have any questions or comments be sure to leave them down below also give this video a big fat thumbs up if it was useful or you enjoyed it doing that really does help me out a lot make sure you subscribe for more python tutorials so you don't miss out on any that's it from me cheers goodbye
