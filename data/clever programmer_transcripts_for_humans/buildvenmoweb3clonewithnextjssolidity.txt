With timestamps:

00:00 - we're gonna be building the venmo Clone
00:02 - with solidity and infuria this is going
00:06 - to be a very powerful dap that you're
00:08 - going to learn how to build from scratch
00:10 - we're going to be coding up the react
00:12 - part along with the smart contract and
00:14 - the blockchain part there are a lot of
00:16 - Concepts you're going to master as a
00:17 - result of this from blockchain Concepts
00:20 - to programming Concepts but more
00:22 - importantly I think you're gonna have a
00:24 - lot of fun and you're gonna learn that
00:26 - building blockchain apps don't have to
00:27 - be a painful experience they can
00:29 - actually be quite a pleasant experience
00:31 - so while my fire is burning behind me
00:34 - let's have a Fireside app building
00:36 - session with that said smash that like
00:38 - button turn it blue or white depending
00:41 - on if you're in the light theme or the
00:43 - Dark theme on YouTube subscribe to the
00:45 - channel because this is where we help
00:46 - you become a developer and a web 3
00:47 - developer and let's get straight into
00:50 - the video
00:51 - step number Uno which is we're going to
00:55 - sign up on infuria it is completely free
00:58 - it is a RPC node provider and it will
01:00 - make your life so easy okay so that's
01:03 - what we're gonna use when we're building
01:05 - our dap so go ahead to the link below
01:09 - that we've provided for you okay use
01:11 - that special link that way we'll know
01:13 - that you're coming from this video it
01:15 - will be helpful for infuro to know this
01:18 - um and yeah just click the link in the
01:20 - description below okay it's going to be
01:22 - infuro dot IO whatever that's going to
01:24 - be the link click that below and go to
01:26 - this page right here hit sign up once
01:30 - you're on this page all right and then
01:32 - just create an account so I'm just going
01:34 - to create my account right here hit or
01:36 - resend emails it'll send you a
01:38 - confirmation go to your email address go
01:40 - ahead and confirm that bad boy once
01:43 - you're done it's going to send you to
01:44 - this page Pick Your Role so let's say
01:47 - you're an engineer okay slash developer
01:49 - solo freelance whatever
01:52 - and pick your category and then just hit
01:54 - next all right now you're going to
01:56 - create your first project so you're
01:57 - going to do web3 API formerly ethereum
02:00 - and uh the last part you're going to do
02:03 - is my first project name it whatever you
02:05 - want I'm just calling it my first
02:06 - project okay all right so there you go
02:08 - now we don't need to touch this in here
02:10 - okay everything you can leave as is
02:12 - because we're going to use an extension
02:13 - later called truffle and that will allow
02:16 - us to interact with inferior and pull
02:19 - all of this information okay so there
02:21 - you go your project should be created in
02:24 - here my first project okay and that's
02:27 - effectively it okay so make sure you go
02:28 - ahead and do that and I'll see you in a
02:31 - second
02:32 - all right so here is the demo of this
02:35 - app so take a look at it right I am here
02:38 - on my venmo clone the first thing I need
02:41 - to do is actually go ahead and connect
02:42 - my wallet so I'm just going to type in
02:44 - my password on metamask and log in once
02:47 - I am logged in I'll just hit I'll
02:49 - connect both of my you know any of one
02:51 - of my accounts so I'll just start with
02:53 - the account one in this case once I'm in
02:55 - you could see on the left hand side that
02:58 - I have all these transactions going
02:59 - through and it's showing the notes as
03:01 - well so here what we're going to do is
03:03 - I'm logged in currently okay so you can
03:05 - see my metamask wallet and you can see
03:08 - that I'm connected okay and here's my
03:10 - other account so here's account two
03:12 - right and then here's my first account
03:15 - and I'll paste in the second account
03:17 - that I want to send my money to and I
03:20 - will drop a message okay you could send
03:22 - your ethereum to really anybody that you
03:25 - want but I'm just going to send it to
03:26 - this address I'm going to say here's
03:27 - some money now metamask opens up and it
03:30 - asks hey do you want to do this are you
03:32 - sure blah blah yes I'm sure I'm going to
03:34 - put in my password all right it's
03:36 - telling us about the gas fees let's hit
03:37 - accept Okay it's doing a little loading
03:40 - all right blah blah blah contract
03:41 - interaction go down hit confirm and
03:45 - we'll wait a couple of seconds here okay
03:46 - let's wait and it says pending so I'll
03:49 - speed it up contract interaction okay
03:51 - we'll speed it up and boom it's done
03:54 - look at that on the left hand side it
03:55 - loaded right away it says here's some
03:58 - money and you can see it says four
04:00 - seconds ago that is beautiful okay and
04:03 - again now I can switch the account as
04:06 - well so I could go to a completely
04:07 - different account okay and I could send
04:10 - money to the other account so I can
04:12 - change accounts and send money to
04:13 - wherever I want okay so I'll refresh you
04:16 - can see that the account just changed
04:17 - over here okay it's a completely
04:19 - different account as you can see let's
04:20 - keep going I'll paste the account number
04:23 - and I'll say thanks for the money and
04:25 - I'll send some money in return okay
04:27 - thanking the person for sending me some
04:29 - money there we go and now we'll hit
04:31 - confirm and let's wait for it wait for
04:35 - it sending and I'll hit speed up
04:37 - contract interaction is done and look at
04:40 - that right away it shows up all the way
04:43 - at the bottom bottom right it says
04:45 - thanks for the money beautiful so there
04:47 - you go I hope that you're excited about
04:49 - this project this will be the venmo
04:51 - Clone that you will be building I hope
04:53 - you're excited it's going to be
04:54 - happening with solidity so with that
04:55 - said let's just rock and roll and right
04:58 - before we get started ladies and
04:59 - gentlemen I just want to give a huge
05:01 - shout out to this man right over here
05:03 - I'm new to the screen screen thing but
05:05 - JavaScript Mastery uh a lot of the smart
05:09 - contract part is from his video called
05:12 - Crypt uh where he built the Crypt
05:14 - portfolio so definitely check it out
05:17 - we'll Link in the description below uh
05:19 - it is an awesome resource and on top of
05:21 - that we built our own styling and
05:23 - everything and then converted it into
05:24 - this beautiful venmo app that you see in
05:27 - this video so with that said let's get
05:29 - back into the video shout out to JS
05:31 - Mastery all right now open up your
05:32 - command line and let's go ahead and what
05:36 - we're gonna do is I want you to just
05:38 - write npx clever programmer this is a
05:41 - clever programmer npm package that we
05:43 - have made and the benefit of this
05:45 - package is really that it actually gives
05:47 - you everything you need so we're giving
05:48 - away The Styling a bunch of the app
05:50 - assets and we just make the whole app
05:53 - really really simple for you all you
05:55 - have to do is just type in that command
05:57 - it will install it for you okay and once
06:01 - you're done installing it make sure that
06:03 - it's going to ask you hey which uh
06:06 - what's your email address so just pop in
06:07 - your email address and then after that
06:10 - it's going to ask you for your name and
06:12 - it's going to ask you for what project
06:14 - you would like to initialize so for
06:15 - example in this case we're building the
06:17 - venmo app so make sure to just
06:19 - initialize venmo it will initialize a
06:21 - whole bunch of helpful files for you so
06:23 - that we don't have to spend a bajillion
06:26 - years trying to build this app you know
06:28 - the styling will already be done we'll
06:30 - do the interesting more fun infuria
06:32 - slash web 3 solidity Parts okay is this
06:35 - really the focus of this video right so
06:38 - boom there we go it uh
06:41 - now it's installing it and setting it up
06:44 - on your computer it's getting the
06:45 - dependencies for you so this is the
06:47 - magic of when you set it up with npx
06:49 - clever programmer okay it's going to
06:51 - basically start the project and it's
06:55 - gonna automatically open it up for you
06:57 - okay if it's giving you some kind of
06:58 - error or whatever just understand that
07:00 - all we've done is we've cloned the repo
07:01 - put on your computer so you could point
07:03 - and click and kind of go inside of it as
07:05 - well if you wanted to okay so let's go
07:08 - ahead and now see what is happening all
07:11 - right now that the project is opened up
07:13 - what I want you to do is just open up
07:14 - the terminal and I want you to type in
07:16 - yarn start that will install start your
07:19 - server okay that'll start your project
07:21 - now just go ahead and I want you to open
07:24 - up your localhost 3000 okay and you
07:26 - could put it on the side of your
07:27 - computer like this all right so on the
07:30 - left hand side your server is running on
07:32 - the right hand side your app should be
07:34 - up and running so that's where you
07:35 - should be at and let's go to index.js
07:38 - okay and you can also go into to your
07:42 - app.js and you can see that this is a
07:44 - regular react file right pretty much
07:46 - vanilla
07:48 - except the only difference is really
07:50 - we've given you a lot of the styling all
07:51 - right so let's keep rocking and rolling
07:54 - here okay on the left hand side you will
07:57 - see in Source you have assets components
08:00 - and styles and normally you won't have
08:02 - assets or components like that's
08:04 - something we've created for you and
08:05 - given you and then Styles we've created
08:07 - extra styling for you as well okay so
08:09 - that's the structure so we're going to
08:11 - go into our app.js and we're going to
08:13 - delete everything in anything that's
08:16 - inside of that class name app div okay
08:19 - remove go ahead and remove everything so
08:21 - now your app should be this blank canvas
08:23 - we're going to get rid of that logo.svg
08:26 - as well we don't need that let's refresh
08:29 - and again your app should just be not
08:31 - giving you any errors but also not
08:32 - really showing you anything okay now
08:35 - inside of that Dave we're gonna
08:36 - basically just put in hello world and
08:38 - once you do that that is enough for this
08:41 - part we're already ready to get started
08:43 - with the web 3 and truffle and inferior
08:46 - part I hope you're excited let's just
08:48 - get to it alright so here we are
08:51 - now we're going to be getting onto the
08:53 - Truffle part okay we're going to be
08:54 - setting truffle up and we're going to be
08:56 - setting infuro up so let's go here now
08:58 - in the main directory what I want you to
09:01 - do is create a new folder
09:03 - okay and we're going to call it back end
09:05 - AKA blockchain part so in this case our
09:08 - back end part is really going to be our
09:09 - blockchain part AKA our smart contract
09:12 - part okay so let's go into our back end
09:14 - but what's cool about this when you're
09:16 - in the blockchain world is like you
09:18 - don't really need to deal with Firebase
09:20 - or
09:22 - uh it's funny I'm saying Firebase and a
09:24 - fire behind me but like you know your
09:26 - back end isn't the traditional mongodb
09:28 - or Firebase your back end is the
09:30 - blockchain okay that's where you're
09:32 - storing your your data majority of the
09:34 - times all right let's go ahead okay so
09:37 - let's go ahead and now I want you to
09:38 - type in truffle init okay
09:42 - um and before we actually do that do
09:44 - that let's go ahead and make sure we're
09:46 - in our C back end so go ahead and do CD
09:48 - back end for me once you're in there I
09:51 - want you to type in truffle init by the
09:53 - way quick thing if you don't have
09:55 - truffle installed put in this Command
09:57 - right here and that will install truffle
10:00 - for you and if that doesn't work Google
10:01 - it with that said let's keep on going
10:03 - okay so after you do truffle init it
10:06 - will pretty much set this up for you
10:08 - okay and kind of initialize the
10:11 - repository for you on the left hand side
10:13 - a couple of things should happen okay
10:14 - you should have this contracts part the
10:18 - migrations part and test part get built
10:21 - out and truffle config should start
10:23 - showing up so before your back end
10:25 - should have been empty but after doing
10:26 - this you should have these three folders
10:28 - plus that one file ready to go okay now
10:31 - inside of your contracts you have
10:33 - something called migrations okay so
10:35 - that's what's going to be there and then
10:37 - also you have a migration folder that
10:40 - will have your initial migration okay
10:42 - this is what you're going to be using
10:44 - pretty much to deploy your contracts
10:46 - afterwards as well so all of this
10:48 - information is pretty important now
10:50 - inside of your contracts you're going to
10:51 - create a new file and that's where we're
10:53 - actually going to create our smart
10:55 - contract okay
10:57 - so let's go ahead and call it
10:59 - transactions.soul dot Sol okay Sol is
11:03 - short for solidity and then we're just
11:05 - going to put in a little license here
11:06 - and we're going to say spdx
11:09 - okay Dash license and since this one is
11:13 - not licensed the identifier we're going
11:15 - to pass it is unlicensed okay and then
11:17 - that warning at the top you know is
11:20 - basically taken care of so you could
11:21 - just say hey it's unlicensed that's
11:23 - totally fine all right next up we're
11:25 - gonna go ahead and make a contract and
11:27 - we're going to call it transactions all
11:30 - right now that we got our transactions
11:32 - contract just we're just going to leave
11:34 - it at the blank right now okay and then
11:36 - what we're going to do is here's what I
11:38 - want you to do okay I want you to go
11:41 - ahead and get this extension truffle
11:43 - okay so at the bottom left you see that
11:45 - I have this truffle and extension okay
11:48 - right over here okay that's the
11:50 - extension that I want you to get all
11:52 - right so what you're going to do is go
11:53 - to your extensions you can also do
11:55 - command shift X or Ctrl shift X go into
11:57 - your extensions type in truffle and just
12:00 - go ahead and install truffle okay
12:02 - truffle for vs code this one right here
12:05 - and then once you have it installed go
12:07 - to your truffle extension okay I'm just
12:10 - gonna make your life really easy when
12:12 - you're developing this is really nice
12:13 - and what we're going to do is we're
12:15 - going to go ahead and hit connect to
12:16 - network and then it's going to ask you
12:18 - do you want to use the ganache service
12:19 - or you want to use inferior service or
12:21 - other the one we want to use is we want
12:23 - to use the inferior service right over
12:26 - here okay so go ahead choose inferior
12:29 - and then I want you to go ahead and
12:31 - choose sign in so let's go ahead click
12:34 - sign in and then just simply sign into
12:36 - your inferior account okay if you don't
12:38 - have an inferior account just make a new
12:40 - inferior account because you're going to
12:42 - need that for this app and excuse my dog
12:45 - she's a little crazy bulldog and she's
12:48 - wild so she'll be barking in the back
12:50 - but we'll ignore her all right here you
12:52 - have
12:53 - um this little error thing showing up
12:55 - you could ignore that it's not important
12:57 - here okay it pops up all the time but it
12:59 - doesn't really matter all right all this
13:01 - stuff pops up here and all I want you to
13:03 - do now is um
13:06 - simply just go scroll to the bottom and
13:08 - hit authorize okay now that that's done
13:10 - it says you are signed in you can now
13:12 - close this page so simply go ahead close
13:14 - this page okay and now at the top here
13:16 - it's going to ask you to put in the
13:18 - project name okay right right over
13:21 - Yonder boom right there okay so go ahead
13:24 - put in your project names I'm gonna just
13:26 - simply say uh uh venmo clone or whatever
13:30 - okay so let's go ahead and write that in
13:33 - venmo Clone
13:36 - all right and then hit enter and then
13:38 - we're gonna just make this project
13:39 - public because there's no reason to make
13:41 - it private okay and now you can see on
13:43 - the left hand side we can see inferior
13:44 - service showing up and now I'm gonna go
13:47 - to inferior.io and on here let's go
13:50 - ahead and click uh start innovating
13:52 - button okay so go ahead and click that
13:54 - and right when we click it you could see
13:56 - that we see that there's event McClone
13:59 - okay this is the one that we created
14:00 - from our command line little tool thing
14:02 - that popped up over here and now it says
14:05 - this project is active it was created
14:06 - today and boom okay this is good to go
14:10 - right now it should have zero requests
14:12 - okay and on the left hand side you could
14:14 - see that if you click your inferior
14:15 - service and then McClone you can see all
14:17 - the networks you have access to so
14:19 - mainnet you have access to quarterly
14:20 - rain can be rosben and then Layer Two
14:22 - you have access to all these other Main
14:24 - and test Nets okay so with that said
14:26 - you've done a wonderful job now we're
14:29 - gonna move on and we're gonna start
14:31 - working on the smart contract so let's
14:33 - get to that in the next part r right
14:36 - here we go now we're on the fun part
14:38 - we're gonna be making our own contract
14:41 - okay so let me take the photo away and
14:43 - I'll show you why I have that photo in
14:45 - just a second but let's go ahead and
14:47 - work on our smart contract here okay so
14:50 - let's go inside of transactions
14:52 - and I'm going to add in a very specific
14:57 - version of solidity here so we're going
14:59 - to go ahead and choose a specific
15:01 - version of solidity so I'm going to put
15:03 - a carrot and do
15:05 - 0.8.15 okay that's the version I want
15:08 - you to use and usually the first line of
15:10 - code in any solidity app is usually that
15:12 - pragma solidity blah blah put your
15:14 - version okay so go ahead and do that
15:16 - then inside of my contract I want to do
15:19 - a un256 and I want to have transaction
15:22 - count this variable here will be keeping
15:25 - track of how many total transactions we
15:27 - have at any given time all right let's
15:29 - keep going now just so you understand
15:31 - what I mean by this okay I'm going to
15:33 - bring this into the view so remember in
15:35 - our finished version of the app we'll
15:38 - have a transaction or a transfer and
15:41 - then we'll have multiple transactions so
15:43 - that transaction count will be keeping
15:45 - track of how many times the user for
15:48 - example sends a particular like sends
15:50 - transactions right so if we've sent five
15:53 - or ten transactions and all users have
15:56 - sent 10 transactions and the transaction
15:58 - count will be 10. so just keeping track
16:00 - Global track of the count of
16:02 - transactions okay the next step what
16:04 - we're going to do is we're going to
16:06 - create an event that will be fired when
16:08 - a transaction is made okay so for
16:11 - example we're going to say event and I'm
16:12 - going to say transfer and here's what I
16:15 - want transfer to do so I want to show
16:17 - who the transfer is from okay uh the
16:21 - receiver okay who received the
16:22 - transaction the amount of the
16:24 - transaction and the message of the
16:26 - transaction and just you can understand
16:28 - what this means from is going to be this
16:32 - address of the user that's logged in
16:33 - okay receiver is going to be who you're
16:36 - sending it to amount is going to be the
16:39 - amount that you want to send and then
16:41 - the message is going to be this right
16:43 - here okay but now when you're using uh
16:46 - languages like solidity or whatever you
16:48 - have to Define data types so I know that
16:50 - this is a string data type so I'm going
16:52 - to say string
16:53 - the amount I know is going to be an
16:57 - integer okay so I'm going to go ahead
16:58 - and say int all right now if you have a
17:01 - little bit of programming experience you
17:02 - might be like wait a minute qazi how the
17:04 - heck is amount uh int a uint by the way
17:07 - is unsigned integer meaning it could be
17:10 - negative and you might be like wait how
17:11 - the heck is an integer if this is 0.002
17:14 - under the hood everything is being
17:17 - calculated in the smallest denominator
17:20 - in ethereum which is way so away is much
17:24 - smaller number so under the hood it's
17:26 - not actually
17:28 - um in decimals it's just showing you
17:30 - here in decimals because this is not in
17:33 - way okay so uh there's actually no float
17:37 - type in um solidity which is pretty
17:40 - interesting but yeah all right and then
17:42 - we're good with adding all of that stuff
17:45 - and the last thing we're gonna that in
17:47 - our event actually is the time stamp so
17:50 - that thing is the thing that's not
17:53 - visible right now so for example
17:54 - timestamp isn't showing up in anywhere
17:58 - uh in any of those okay so time stamp
18:00 - what we're doing is under the hood
18:03 - right when the user hits send we're
18:06 - gonna log that time so let's just say
18:08 - it's like you know it's 12 33 a.m and
18:12 - this dude is sending some money to his
18:14 - friend
18:16 - um for cleaning what kind of friend does
18:19 - he have that cleans at 12 33 a.m I don't
18:22 - know he's sending the friend some money
18:24 - for some okay we don't know what it
18:26 - is uh he maybe maybe gave him some food
18:29 - and now he's he's paying his friend at
18:31 - 12 33 am and that time stamp we're gonna
18:34 - log
18:35 - and it's gonna get log low key under the
18:38 - hood and we're gonna pop that in right
18:40 - there okay that is going to be attached
18:42 - to right when the user clicks send okay
18:44 - just to kind of give you a little
18:45 - insight onto what we're doing here all
18:47 - right now the next thing we're going to
18:48 - do is we're going to create a struct
18:52 - okay uh of the transaction that we will
18:55 - be storing on chain okay and um structs
18:58 - is kind of an ugly name and it makes
19:00 - things sound confusing but it's really
19:02 - just a structure or like a data type
19:04 - here and so we're just going to say hey
19:06 - when you see a transaction or a transfer
19:09 - this is the type of stuff it's going to
19:12 - have inside of it okay so expect it to
19:14 - have a sender expect it to have a
19:17 - receiver expect it to have an amount you
19:19 - know expect it to have a message and
19:22 - expect it to have a time stamp okay
19:24 - that's all we're saying here Saul the
19:27 - rest of what we're saying here is about
19:29 - these data types okay so the main thing
19:33 - I want you to notice is sender receiver
19:34 - amount message timestamp those are all
19:36 - the things that are happening here okay
19:38 - now what what is this other stuff
19:41 - addresses a specific data type inside of
19:44 - solidity when for wallets it understands
19:47 - it when you say address okay same thing
19:50 - for the receiver it's not just just the
19:52 - strength so it understands how dresses
19:54 - work underneath the hood all right and
19:56 - then amount is an INT
19:59 - string message is a string and then time
20:02 - stamp we're gonna make it a uh in 256.
20:05 - now you might be wondering uh why is
20:08 - this u in 256 and why is this int just
20:12 - by itself
20:13 - if you don't say 256 and you just use
20:16 - int like this
20:18 - by default it's actually in 256 okay so
20:21 - both of these are both of these here are
20:24 - actually in 256. okay so that's really
20:26 - the one thing I want to clarify here
20:27 - okay beautiful so now that we're done
20:29 - with that now we're going to create an
20:31 - array of those transactions okay so the
20:35 - strength the structure we make we're
20:37 - going to make an array out of that so
20:39 - let's go ahead I'm going to say transfer
20:40 - struct and let's go ahead and rename it
20:42 - and call it transfer struct the reason
20:44 - why we're going to call it that is such
20:46 - a very clear that it is a struct okay
20:50 - and then when you get better as a
20:52 - developer you could just call it
20:53 - transfer or you could call it
20:55 - transaction okay uh that should be fine
20:59 - now we're going to create a variable
21:01 - called transactions and here's the
21:04 - interesting part about this okay we're
21:06 - declaring a variable called transactions
21:08 - but we're saying that this variable here
21:10 - is going to be an array of transfer
21:14 - structs meaning it's probably going to
21:17 - look like an array okay an array and
21:20 - it's going to contain these transfer
21:22 - struct objects so it's going to
21:23 - basically contain you know if you're a
21:25 - JavaScript or react person imagine this
21:28 - so imagine
21:29 - um I have my receiver and the receiver
21:31 - 0x blah blah blah I have my sender Xerox
21:36 - blah blah I have my uh not sender I
21:39 - believe it's from
21:40 - one of those and then I have my uh let's
21:45 - say my message and it's hello
21:49 - okay
21:51 - and then
21:53 - you know and that's just like one
21:55 - transfer struck let's say okay and I
21:57 - know the transfer struct has some more
21:59 - stuff but let's just say for
22:00 - simplicity's sake this is one transfer
22:02 - struct and then there's more transfer
22:04 - structs so in a classic JavaScript
22:07 - scenario imagine that you really have an
22:11 - array of objects okay and more
22:14 - specifically the objects will represent
22:16 - the transfer struct meaning that
22:18 - whatever Keys the transfer struct has
22:20 - these objects will have and if you don't
22:23 - put that in if you have an object that
22:26 - doesn't have those keys it'll error out
22:27 - okay so uh there's a lot of type safety
22:31 - into the code and that way your code
22:33 - will have less bugs and errors but at
22:36 - the cost of like really being very
22:38 - verbose and explicit
22:40 - um up front cool okay so let's keep
22:43 - going now what we're going to do is
22:46 - we're going to make a function uh to add
22:48 - a transaction to the array to the
22:50 - blockchain okay with our struct
22:53 - so let's create this function and we're
22:55 - going to call it add to blockchain but
22:59 - really what this function is doing is
23:00 - adding you know essentially it's adding
23:02 - a transaction to the blockchain that's
23:05 - what we're doing
23:12 - we're gonna create a so the variable
23:15 - here that we're creating is called
23:17 - receiver
23:19 - all right so here the actual variable
23:21 - here is receiver okay that's the main
23:24 - thing these two are these two are think
23:27 - of them like data types okay address is
23:29 - a data type and payable is a special
23:32 - keyword that makes it so you could
23:34 - actually pay the receiver that's it
23:38 - okay let's keep going so address payable
23:40 - receiver then we're going to have an
23:42 - amount we're going to have our message
23:46 - as well okay so but for this one we're
23:49 - going to say string memory message don't
23:51 - ask me why you have to say memory if you
23:53 - don't write memory you'll get an error
23:55 - so just write memory string memory
23:58 - message okay
24:01 - all right then all we want to do is we
24:04 - want to say public meaning that even
24:07 - outside of the smart contract you should
24:09 - be able to actually call this function
24:11 - so we have access to it all right and um
24:15 - payable keyword means okay that the
24:18 - receiver is actually able to receive
24:20 - ether from the sender okay so something
24:22 - I said earlier but this is just to make
24:25 - it really verbose and clear for you and
24:27 - copilot wants to do a lot of stuff but
24:29 - we're going to skip that now here's what
24:31 - happens in this function when we are in
24:33 - this function what we want to do is when
24:35 - a user calls this function meaning
24:37 - you're calling your function add
24:39 - transaction right well the first thing
24:41 - I'm going to do is we want to increment
24:42 - the transaction count by one right that
24:44 - should be obvious it's like I'm adding a
24:46 - new transaction to the blockchain
24:47 - increment the the count of and the
24:51 - number of transactions okay and then
24:53 - what I want you to do is take the
24:55 - transactions array that I created
24:56 - earlier push a new uh transaction to it
25:01 - okay and all we're all we're pushing to
25:05 - that array is literally from my
25:07 - JavaScript World okay my JavaScript
25:09 - peeps you're literally just sending an
25:12 - object okay this object is going to be
25:14 - like uh
25:15 - sender Xerox something you know receiver
25:20 - Xerox something message hello whatever
25:24 - okay time stamp timestamp some Unix
25:28 - Unix timestamp okay so that's all you're
25:32 - sending okay so this over here uh is a
25:36 - Constructor transfer structure is a
25:39 - Constructor and once you pass it all of
25:41 - this information it's going to literally
25:43 - make an object for you at the end of the
25:45 - day that's all it's doing and message
25:47 - does thunder just in case you're
25:49 - wondering what it is you know when
25:51 - you're signing with metamask
25:54 - so like when you're doing this thing
25:56 - with metamask right
25:58 - where you're literally signing
26:02 - yeah
26:04 - that is what refers to the message dot
26:07 - sender okay so the dude that's logged in
26:09 - with metamask and hitting send and then
26:12 - hitting confirm it's pulling that dude's
26:15 - account address okay from message.sender
26:18 - now if you're wondering how it's pulling
26:20 - the receiver it's pulling okay for so
26:24 - this is the sender and then this guy who
26:26 - we're sending it to is the receiver okay
26:29 - the amount that we have okay wherever
26:32 - the amount is let's just set that set
26:34 - amount that's going to be the amount
26:35 - that it's pulling and then the message
26:38 - is whatever message you wrote in and the
26:40 - timestamp is like the exact moment you
26:44 - added it to the blockchain okay so
26:46 - that's why we're getting it from the
26:47 - special keyword block and this MSG is
26:51 - also a special keyword in solidity so
26:53 - both of these block and MSG is a special
26:56 - keyword okay my big head is blocking
26:59 - some of that stuff so there you go
27:01 - that's what I was showing you like that
27:02 - little transaction there is the amount
27:05 - okay now I'm going to hide it again
27:07 - because I like myself uh being huge like
27:11 - a big giant on the screen so I'm gonna
27:14 - make this small and I will hide it away
27:16 - from you and I'll just bring this back
27:18 - for now and let's keep going okay all
27:21 - right and then next up what we're gonna
27:23 - do is we're gonna omit the event we
27:25 - actually created earlier so we want to
27:28 - admit the transfer event we created okay
27:31 - so let's go ahead and just omit that
27:33 - event we're going to give it the sender
27:35 - receiver amount message block timestamp
27:38 - and all that good stuff it's the
27:40 - equivalent of doing the you know a
27:44 - console log let's say all right so let's
27:47 - keep going over here and we got our
27:49 - amount we got all of that okay I'm just
27:51 - gonna check if I'm on the right solidity
27:52 - version I am yep so there you go that's
27:55 - your emit event that you're gonna have
27:57 - there okay now we're gonna write a
27:59 - function to actually get all of the
28:02 - transactions from the blockchain so
28:04 - let's go ahead and do that so I'm going
28:06 - to call this function get all
28:07 - transactions and I'm going to give it a
28:09 - public View and we're going to return a
28:12 - transfer struck that's the data type
28:14 - we're going to return and we're going to
28:15 - actually return so think of like we're
28:17 - going to return an array of objects and
28:20 - the array of objects is going to be of
28:21 - type transfers or transactions okay and
28:25 - we're just going to put memory there
28:26 - because if you don't put that you get an
28:27 - error so just put it okay and then we're
28:30 - just going to return transactions at the
28:32 - end of the day and um yep and then we're
28:34 - gonna make another function and this
28:36 - function is going to get the number of
28:37 - transactions and we'll say get
28:40 - transaction count okay and again it's
28:44 - going to be a public function and it's a
28:46 - view so for review we're telling we're
28:49 - telling the blockchain hey there's no
28:50 - transaction happening here we're not
28:51 - going to be changing the data so you're
28:53 - not gonna don't you don't need to charge
28:54 - us here for anything it's just going to
28:56 - be a view and then public is so you can
28:59 - access it from outside returns is what
29:01 - data type and what specific things are
29:04 - we going to return so we're going to
29:05 - return an integer and then I can just go
29:07 - ahead and say return transaction count
29:09 - and that's about it so
29:12 - yeah and then lastly what I want to you
29:15 - know just explain really is the view
29:17 - keyword right that basically means that
29:21 - the function can only be used to view
29:23 - the data all right that's that's all
29:25 - that means
29:26 - all right and that means that no ether
29:30 - is needed to run this function okay
29:32 - that's something that I want to
29:34 - highlight to you
29:35 - with that said we are done with the
29:39 - contract part now
29:41 - we just sit back
29:43 - we watch the firework and it's time to
29:46 - deploy the contract let's go all right
29:49 - now that you've made the contract it's
29:51 - time to deploy your contract okay it
29:54 - would be kind of like if you had all
29:56 - this wood behind you but you never lit
29:58 - it on fire okay if you didn't do that
30:01 - what's the point of having a fireplace
30:02 - that's useless so when you have a
30:05 - contract there's no point to just having
30:07 - a contract it's like having a bunch of
30:10 - wood we've got to deploy it okay we
30:11 - gotta at the fire we gotta turn it into
30:13 - a fireplace and that's what makes it
30:15 - usable by everybody in the world
30:16 - including yourself so let's go and do
30:19 - that now so what I'm gonna do the first
30:21 - thing inside of contracts you see
30:23 - transaction here I'm gonna hover over it
30:25 - and I'm gonna right click okay I'm gonna
30:28 - right click and what that will allow me
30:30 - to do all right so now what we're gonna
30:33 - actually do is inside of our migrations
30:35 - folder we're going to create a new file
30:38 - okay so let's go ahead
30:41 - and let's create a new file and before
30:43 - we do that go into your one underscore
30:46 - initial migration copy everything inside
30:49 - of that and then I want you to go ahead
30:52 - make a new file 2004 deploy.js paste all
30:55 - of that and everywhere it says
30:57 - migrations we're going to change that
30:59 - with
31:00 - transactions okay so you could also do
31:04 - right click and rename all occurrences
31:06 - or you can just do this in this fancy
31:07 - way or you could use the shortcut
31:09 - command D which on Windows I believe
31:11 - might be control d
31:14 - that right there okay that should allow
31:17 - you to do that multi-select on
31:19 - everything let's keep going and now what
31:22 - we're going to do is we're going to
31:23 - right click on our transactions right
31:27 - here
31:28 - okay and I'm going to choose build
31:32 - contracts now if you're wondering how do
31:35 - I have this build contracts right here
31:37 - it's only possible you guys if you have
31:40 - this truffle extension okay if you don't
31:43 - have the Truffle extension okay this
31:46 - extension right over here if you don't
31:48 - have that the build contract right here
31:50 - will not show up okay so make sure you
31:52 - have it okay so we're going to hit build
31:54 - contracts now my contract has started
31:57 - building
31:58 - so we'll keep going through it okay it's
32:00 - going to take a second to build and
32:02 - here's what happened okay I just ran
32:05 - into a little bit of an error let's go
32:07 - ahead and I'm going to choose truffle
32:10 - for vs code so go click output and then
32:13 - here choose truffle for vs code so we
32:15 - can actually see what the error is okay
32:17 - and here I'm checking to find we're
32:19 - checking to find what the error is and
32:21 - it says hey there might be something you
32:23 - need to fix in truffle config so I'll
32:25 - show you what we need to do so first
32:27 - choose truffle for vs code scroll down
32:30 - until you can see the error and you can
32:31 - see the error says truffle is currently
32:33 - using soul
32:35 - uh solidity version
32:37 - 0.8.11 and it does not match what we
32:40 - have inside of our file right there so
32:45 - let's go ahead
32:46 - to our truffle
32:49 - config.js right here and fix this
32:52 - problem
32:53 - okay so let's go truffle config and
32:55 - scroll down to line 84-ish and where it
32:59 - says version you see it says
33:01 - 0.8.11 go ahead and change that to
33:06 - 0.8.15 okay so we're going to go choose
33:09 - just put a 5 there let's hit save okay
33:12 - and now let's try to deploy this again
33:15 - and see if it works
33:18 - okay it's going through
33:20 - and let's see okay looks like we have a
33:24 - build folder now that's starting to show
33:26 - stuff so that's a really good sign and
33:28 - there we go you can see it says compiled
33:30 - successfully using Soul version
33:33 - 0.8.15 okay so our contract is now
33:36 - deploy uh sorry it's built now all we
33:39 - need to do is let's go ahead and right
33:42 - click on transactions and this time
33:44 - we're going to choose deploy contracts
33:47 - so let's choose that okay now here I
33:52 - make an error okay so I choose the
33:55 - robsten network but I don't want you to
33:57 - choose the Robson Network do not choose
34:00 - this choose Gorly okay so I want you to
34:03 - choose the gwarly network that's the one
34:08 - okay that's the one I want you to pick
34:11 - don't pick Robson just want to make that
34:14 - super super clear so in your case you
34:18 - should be picking you should be picking
34:19 - that guy right over Derek Worley once
34:22 - you click it it's going to ask you to
34:24 - paste your mnemonic now remember earlier
34:27 - in the video when you made your wallet
34:30 - with metamask that's when it gives your
34:32 - mnemonic it tells you to write it down
34:33 - so grab that mnemonic that it gave you
34:36 - and I want you to bring that here and
34:39 - paste it here okay so we're going to
34:40 - paste our mnemonic now and it's going to
34:43 - ask you to save it now you can save it
34:45 - anywhere you want okay
34:46 - so I'll just go to my own folder here
34:50 - and I'm just going to hit key dot end
34:52 - and there we go we've saved it and at
34:55 - the bottom you should see it's saying
34:56 - deploying contracts okay and your
35:00 - project name is going to be different
35:01 - than mine for you should say deploying
35:03 - contracts to venmo clone okay I just
35:06 - have to create another project because I
35:07 - was getting some errors or whatever but
35:09 - hopefully you won't be getting errors if
35:11 - you are also getting the same errors
35:14 - then it might actually help you to
35:16 - create a new project okay so just a
35:18 - little note for you and pretty soon this
35:21 - um deploying will be completed and it is
35:24 - okay so now that the deployment is
35:26 - completed it gives you this very
35:28 - important contract address you're going
35:31 - to need access to this so hover on to
35:34 - this and I want you to copy it okay this
35:37 - is a very important contract address
35:39 - and then I want you to go ahead and grab
35:43 - this contract address okay
35:46 - so let's go ahead and grab this contract
35:48 - address and what we're going to do is
35:51 - we're going to make in our source folder
35:54 - we're going to make a new folder and
35:57 - we're going to call it
36:00 - um we're gonna not a new file we're
36:01 - gonna call it make a new folder we'll
36:03 - call it utils
36:05 - okay and inside of utils I'm going to
36:07 - make constants and inside of there I'm
36:10 - going to save
36:11 - a new constant constant file it's going
36:14 - to be called constance.js
36:16 - and inside of this file we're going to
36:18 - make a contract address and we're going
36:21 - to paste the contract address in front
36:22 - of it now a little note for you uh just
36:25 - put const here I forgot to put that okay
36:28 - so just put const contract address and
36:31 - we'll come back to this file and we'll
36:32 - fill it fill it out completely okay
36:35 - all right so with that said right now
36:37 - you're doing great your contract is
36:40 - deployed so congratulations because
36:42 - that's a huge part of the process and at
36:45 - this point we're pretty much done with
36:47 - the smart contract blockchain part
36:50 - pretty much completely and now we're
36:52 - going to do the fun front-end part where
36:55 - we're going to connect to this back end
36:56 - and then now we're going to really make
36:58 - the app sing so I hope you're excited
37:00 - I'll see you in a second all right now
37:01 - what we're going to be building is going
37:03 - to be the nav bar okay so it's going to
37:05 - be the nav bar we're going to build for
37:07 - our project this is what it's going to
37:09 - look like so boom right there okay
37:12 - that's what it's going to look like
37:13 - right there
37:14 - so that's the target that's what we're
37:17 - building remember it's not built yet
37:18 - okay it's just a photo
37:20 - so I'm gonna leave that here as a target
37:23 - of what we're building
37:25 - or actually let's leave that here so
37:26 - that could be like a use as a reference
37:28 - point okay so now let's go ahead and
37:31 - build it together all right first thing
37:33 - I'm going to do I'm going to go inside
37:34 - of source
37:35 - okay inside there let's go into our
37:38 - app.js
37:41 - and inside my app uh what I want to do
37:44 - is let's go ahead and remove everything
37:46 - from the top and I'm going to say import
37:49 - Style
37:51 - from dot slash style slash app down
37:54 - module.css okay that's where a lot of
37:57 - the uh styling we've already written for
38:00 - you so it's in there
38:02 - go ahead and call the class we're going
38:05 - to use this a wrapper okay and we're
38:07 - gonna inside of our wrapper we're gonna
38:08 - put in our header and inside of our
38:11 - header we'll put in our nav bar okay now
38:14 - no navbar is going to show up so once I
38:16 - hit run on this we're gonna really when
38:18 - we do yarn start we're gonna get an
38:20 - error okay and the reason why we're
38:23 - getting in getting gonna get an error is
38:24 - because we never imported it okay so let
38:26 - me actually move this a little bit out
38:28 - of the way here as you can see a navbar
38:30 - is not defined so now what we want to do
38:33 - is in components you could actually see
38:35 - that we have created navbar inside of
38:37 - components right so we're just going to
38:39 - go ahead import that right over there
38:42 - import navbar from dot slash components
38:45 - slash navbar
38:48 - okay and now that it's imported let's go
38:51 - into our nav bar and we're not getting
38:53 - an error anymore let's build out our nav
38:55 - bar from scratch
38:57 - let's get in our navbar styles that
39:01 - we've already made
39:02 - and for this nav we're going to say
39:06 - navigation container for styles
39:08 - okay
39:09 - and then we're gonna make a container
39:12 - div inside
39:14 - and then inside of that we're going to
39:16 - use the logo image class logo container
39:20 - rather okay and then we go we run that
39:23 - and we get an error all right so let's
39:26 - go ahead we're getting a error here
39:28 - right this is not loading the logo we'll
39:31 - fix that in a second first let's just go
39:33 - ahead and give it a class name and we're
39:35 - going to say Styles dot logo image for
39:38 - the style on this okay and let's fix
39:40 - this source so we're going to change the
39:42 - source to
39:44 - dot dot slash assets
39:47 - slash venmo logo.svg still not loading
39:51 - okay so let's drag the assets folder and
39:55 - we'll move the assets folder inside of
39:58 - our public folder there we go and now we
40:03 - change it now we run and look at that
40:04 - venmo is showing up that is beautiful
40:07 - okay so let's continue all right now
40:10 - we're going to add in an actions
40:12 - container
40:13 - and we're going to say hello and then
40:16 - we're going to give it an accent color
40:17 - and this is where the user address will
40:20 - go so we're going to say hello comma
40:22 - user address okay
40:24 - and remember right we're mapping it to
40:27 - this one that's our reference point so
40:28 - we got that part now we got the hello
40:31 - Port okay and then we have the user
40:33 - address
40:34 - there now we're going to put a hand wave
40:36 - and last but not least we do need to put
40:39 - the image the circular image that we
40:42 - have so let's go ahead and do that
40:44 - okay so we're going to first get our
40:46 - down icon okay because we need that icon
40:49 - for right here okay so let's call our
40:52 - Chevron down icon let's give it a arrow
40:55 - down icon styling and let's make it a
40:58 - self-closing tag
41:00 - okay now we're getting an error can't
41:02 - resolve hero icons so obviously what we
41:04 - need to do is we need to install this
41:06 - package right here and
41:08 - let's run it
41:11 - cool now it's showing up
41:13 - so you should have this package already
41:15 - installed when you do npx clever
41:17 - programmer you get all the dependencies
41:19 - installed by default so just make sure
41:22 - you add in the slash outline and then
41:24 - you should be good to go
41:25 - all right the last thing we need to add
41:27 - is the image so let's go and do
41:29 - styles.avatar container so I'll make a
41:32 - new div and then inside of this div
41:34 - we're going to put an image and this
41:37 - image we're going to give it Avatar
41:39 - image style make it a self-closing tag
41:42 - as well and the source okay is going to
41:45 - be this specific Source right here at
41:48 - yecang dot me slash avatar.jpg okay you
41:52 - can get your image from wherever you
41:54 - want Yap is somebody who just works with
41:56 - us on the clever programmer team and so
41:58 - that's the image we're using you can use
42:01 - your image or anybody else's image right
42:04 - and boom look at that okay let's get to
42:07 - the end of this
42:08 - boom right if I show you this look at
42:11 - that right
42:12 - we started with that reference and we
42:15 - got pretty much a one-to-one match so
42:18 - that is absolutely phenomenal we are
42:20 - done with our navbar uh and now it's
42:23 - time to move on and add our wallet
42:25 - connection let's go now what we want to
42:27 - work on is the metamask connect wallet
42:30 - functionality so basically we want to be
42:31 - able to do this thing okay where
42:34 - you it'll pop up connect with metamask
42:36 - It'll ask for your account you'll be
42:39 - able to hit next and then move on to the
42:41 - next part okay so let's go ahead and
42:43 - start working on this bad boy now there
42:46 - is no front-end part to this so just
42:48 - letting you know that there is a
42:51 - there this is going to be mostly a back
42:53 - end thing we're going to be doing for
42:54 - connecting to wallet because this front
42:56 - end is metamasks like default uh front
43:01 - end when you open metamask okay
43:03 - all right so make a new folder called
43:05 - context and you're going to make it
43:07 - inside of your source
43:09 - okay inside of this context I want you
43:12 - to hit new file and then in there we're
43:14 - going to put context.js all right go
43:17 - ahead and import use effect and we're
43:19 - going to put in use State and create
43:21 - contacts from react okay just like that
43:24 - and then go ahead and do import ethers
43:27 - from ethers because we're going to need
43:29 - access to that okay and let's go ahead
43:31 - and do export cons transaction context
43:35 - okay and create context so we're going
43:38 - to need access to all this data in our
43:41 - other files that's why we're creating
43:43 - this context here so we can do that all
43:45 - right we're going to create a
43:46 - transaction provider here which is going
43:48 - to take in children children is going to
43:50 - be the entire app and what I'm going to
43:53 - say is I'm going to hit return and I'm
43:56 - going to say transaction context
43:58 - context.provider and we're going to give
44:00 - it a value and right now we're going to
44:02 - leave the value kind of empty okay and
44:05 - we're just going to pass in children in
44:06 - between and make sure you have the tag
44:08 - saying transaction call context.provider
44:11 - okay that's what the tags should be
44:12 - saying all right let's go back yep let's
44:16 - go right there and in our index.js what
44:20 - we're going to do is let's go and do
44:22 - transaction Provider from dot slash
44:25 - contact slash context and uh we're gonna
44:28 - create a transaction provider in our
44:30 - index.js and wrap up the entire app
44:33 - inside of it okay that's what we're
44:35 - doing
44:36 - so make sure you put your app here
44:38 - transaction provider and import your
44:40 - transaction Provider from Context uh
44:42 - with that said let's go back to our
44:45 - context and we're gonna create we're
44:48 - gonna keep track of the current account
44:50 - and we're going to see if the current
44:51 - account is logged in or not okay the
44:54 - default state is just going to be a
44:56 - blank
44:57 - empty string we're going to have a
44:59 - function which is going to be check if
45:01 - wallet is connected
45:03 - it's going to be an async function
45:05 - okay and what we're going to do is we're
45:07 - going to create a try catch block here
45:09 - and under the catch we're just going to
45:11 - console log the error and in the try
45:15 - what I want to do is I want to say hey
45:18 - if ethereum does not exist here and you
45:21 - might be wondering where is ethereum
45:23 - coming from we're going to get we're
45:25 - going to destructure ethereum from
45:27 - window Windows a global JavaScript
45:29 - object that we have access to and if
45:31 - ethereum does not exist then return
45:33 - Please connect metamask that means
45:35 - metamask is not connected please install
45:37 - metamask that's what the error we want
45:39 - to say and then we're going to do is
45:41 - we're going to create accounts and we're
45:44 - going to await the ethereum request and
45:46 - the method is eth underscore request
45:48 - accounts and then we want to do is we
45:50 - want to say if the accounts length
45:53 - meaning if the accounts exists then set
45:55 - the first account as the main account so
45:58 - maybe you choose five accounts the first
46:01 - one you chose is the one that gets
46:02 - chosen because we can only choose one
46:04 - account and then we if no accounts are
46:08 - found we're just going to say no
46:09 - accounts found
46:10 - let's create a use effect hook that's
46:12 - going to fire off every single time the
46:14 - page refreshes
46:15 - and we're just going to run this
46:17 - function check if wallet is connected
46:18 - every single time the page refreshes
46:21 - okay
46:22 - then next up what we're going to do is
46:23 - we're going to create a connect wallet
46:25 - function
46:27 - all right now we're going to create this
46:28 - connect wallet function this is going to
46:30 - be pretty much copy paste so honestly
46:31 - you can copy paste there's really just
46:33 - going to be very very minimal difference
46:35 - from this function and the other one but
46:38 - this is more so just a little
46:39 - technicality okay so you're going to be
46:41 - writing the same thing that you just
46:43 - wrote okay so nothing really new here
46:45 - and then you could see that it popped up
46:48 - so I'll remove this from here you can
46:50 - see that it popped up the wallet and you
46:52 - can connect to it right so we can see it
46:54 - running we can see our
46:57 - connect functions running okay let's
46:59 - keep going and then we're going to set
47:01 - the current account to zero the only
47:03 - difference is we're going to do a window
47:04 - location reload this is just to kind of
47:07 - catch any edge cases and make sure there
47:09 - are no errors happening so just put in
47:10 - the window.location.reload you should be
47:12 - fine and let's keep going okay next up
47:16 - what we're going to do is we're going to
47:17 - throw a new error if there is an error
47:19 - okay and we're going to say no ethereum
47:21 - object found okay object
47:25 - um okay so make sure you pass in the
47:28 - connect wallet to your transaction
47:30 - context provider because now your entire
47:33 - app will have access to connect wallet
47:34 - function that you've made
47:38 - okay so let's go back to our navbar.jsx
47:43 - now we're going to start using all of
47:45 - this stuff that we got okay so let's go
47:47 - ahead and use it so let's make sure that
47:50 - okay everything is looking good here
47:52 - connect wallet ah we wanna not just get
47:55 - connect wallet but we also want to get
47:56 - access to the current account the the
47:58 - current user that's logged in so let's
48:00 - go ahead import transaction context from
48:03 - our context and let's get the use
48:05 - context hook as well from react
48:08 - and then we will use the context hook
48:12 - we'll pass in and we'll say hey we want
48:14 - to use our transaction context we
48:15 - created we're going to destructure our
48:17 - current account and connect wallet from
48:19 - that and then we want to wrap the entire
48:21 - app up in certain
48:23 - um in this conditional here in this
48:26 - turning operator
48:28 - okay so you want to say hey if the
48:29 - current account is logged in then show
48:31 - this otherwise showed that all right so
48:34 - I'm going to take essentially what is
48:35 - the home page I'm going to cut that bad
48:38 - boy and we're going to paste it in here
48:39 - because hey if the current account is
48:41 - logged in then show this
48:43 - okay otherwise show a button that says
48:47 - connect wallet okay so our connect
48:49 - buttons give it the styling of connect
48:51 - button and then on click we're going to
48:53 - say connect wallet
48:54 - all right and let's take a look at
48:57 - what's happening okay so let's open up
49:00 - our metamask here let's go to our
49:02 - metamask let's go to uh where it says
49:05 - connected let's click the collapsible
49:07 - Three Dots and let's disconnect
49:09 - okay so now that we disconnect let's
49:12 - refresh our page and you can see that it
49:15 - brings up the connect wallet again and
49:18 - if I remove the connect wallet you can
49:19 - see that there's a button right behind
49:21 - it alright so now I'm going to hit that
49:23 - next button right there and you can see
49:25 - I just got connected okay and basically
49:29 - everything that I'm doing is working
49:31 - okay beautiful so our check if wallet is
49:34 - connected fires off every single time we
49:37 - refresh the page so there you have it
49:39 - you did a fantastic job building this
49:42 - wallet connection so far next up we're
49:44 - going to shorten the addresses let's go
49:45 - and do that now the next thing we're
49:47 - going to be building is a shortener so
49:49 - we're going to take a big address turn
49:51 - it into a small one let's go ahead and
49:53 - do that so I've drawn this out for you
49:56 - here this is what it's we're going to be
49:58 - doing we're going to take an address
49:59 - that looks like this and we're going to
50:01 - turn it into that okay so let's go ahead
50:05 - and do that now
50:07 - so let's make a shortener and once we
50:09 - make that shortener then what we can do
50:11 - is we can actually show that user
50:13 - address right there otherwise this would
50:15 - be too big right and it wouldn't fit
50:18 - so let's go to where we have user
50:19 - address and I'm gonna change that and
50:24 - I'm going to go ahead and say current
50:25 - account okay so now you can actually see
50:29 - that our app is showing us
50:33 - this okay that's what you should be
50:35 - seeing right now because pulling it
50:37 - directly from the current account
50:39 - now what I want to do is let's go inside
50:41 - of my utils and in there I'm going to
50:44 - add shortenaddress.js
50:45 - [Music]
50:46 - and I'm going to say export const
50:49 - shorten address and it'll take in an
50:51 - address
50:52 - and here's what will what it will do
50:55 - okay so it'll we'll say first
50:59 - and then we'll create another variable
51:01 - called last so first we'll just take the
51:03 - first five uh strings so like
51:06 - 0x35d okay so we're going to put that
51:09 - and then last is just going to take the
51:11 - last four essentially
51:13 - okay and then we're just going to say
51:15 - first dot dot dot last all right so you
51:19 - got your first and last here let's go
51:21 - back and now we're gonna use this URL
51:24 - shortener or
51:26 - a wallet address shortener I mean
51:29 - on current account let's import our bad
51:31 - boy shorten address and make sure you
51:34 - import it from the right place okay so
51:36 - let's just go ahead import it from utils
51:38 - slash shorten address that's where we've
51:41 - put it and then we're just going to call
51:43 - our shortened address pass it our
51:45 - current account and we should be Gucci
51:48 - there we go look at that we got it right
51:52 - you could see it right over here and you
51:54 - can see that we have went from this to
51:57 - that beautiful so we're done with
52:00 - shortening stuff now we are going to
52:02 - work on our transaction form so the
52:05 - users could put in stuff
52:07 - and then you know be able to pay other
52:09 - people let's go all right now time to
52:12 - make our transaction form this is what
52:15 - you're going to be building by the end
52:16 - of this one okay so
52:18 - we're going to be building this forum
52:20 - now yes it looks ugly hideous
52:23 - but don't worry about that we're going
52:24 - to initially build it without styling
52:26 - and then we're gonna make it look pretty
52:29 - okay so don't worry about that I'm Gonna
52:32 - Leave This bad boy
52:34 - kind of like floating here for reference
52:36 - as we go through this
52:39 - um and yeah let's rock and roll
52:42 - so I'm gonna go into app.js okay and
52:46 - inside of here let's go ahead and um
52:50 - all right so I'm going to add in
52:52 - transaction form here okay if you don't
52:54 - have man container activity container
52:56 - make sure you add all of these here as
52:57 - well okay but transaction form as I'm
53:00 - going to be adding now obviously it's
53:01 - going to give an error it says
53:02 - transaction is not defined so at this
53:04 - point you know what the error is right
53:06 - you know what this means if you see that
53:08 - error clearly you didn't import
53:09 - something so just go ahead start your
53:12 - import process we're going to go ahead
53:13 - and do transaction form uh and we're
53:16 - going to grab it from our transaction
53:18 - form component that we've made now I
53:21 - want you to go ahead into your
53:22 - transaction form okay and uh all right
53:26 - so we have the transaction form here it
53:28 - should be pretty much empty let's go
53:30 - ahead and build it out now okay so we're
53:34 - going to grab a transaction. module.css
53:37 - all right so now that I've got my
53:39 - transaction styling let's go ahead I'm
53:42 - going to create a div and uh in here
53:44 - we're gonna say container
53:46 - okay and then we're going to
53:49 - grab make an H3 it's going to be form
53:52 - title and we're going to send payment
53:54 - and request it says style yells is not
53:57 - defined okay let me go ahead and fix
53:59 - that styles.form title there we go and
54:02 - now it's starting to show up
54:04 - okay so send payment slash request
54:07 - next up I'm going to create a form
54:09 - inside of there we're going to have a
54:11 - form container inside of there I'm gonna
54:12 - have a swap container and then we're
54:15 - going to add in our switch vertical icon
54:17 - and you'll see what this so This icon is
54:20 - this bad boy right here
54:23 - okay so just keep in mind this is what
54:26 - we're making okay this is a target so we
54:28 - got a form container we have a swap
54:31 - container right and inside of that we
54:34 - have a swap Icon now we're probably
54:36 - gonna write swap two Slash from okay so
54:39 - just keep remember this is our reference
54:42 - point okay let's go ahead and do
54:44 - styles.swap text and it's going to be
54:46 - swap two Slash from and now we can see
54:48 - it on our screen that's looking good
54:52 - okay let's keep going I'll put this here
54:54 - because I think this will be fine there
54:57 - not in the way of anything
54:59 - all right and then we're gonna create a
55:02 - form body here
55:04 - okay and then inside of there we're
55:06 - gonna add in
55:08 - a form input container
55:12 - okay and then we're going to give it an
55:13 - H4 and the H4 we're going to assist uh
55:17 - form input title
55:19 - okay and we're just gonna say two so who
55:22 - are you sending your money to right
55:23 - that's where that goes
55:26 - and then the next part we're going to be
55:27 - doing obviously is going to be this
55:29 - message part
55:32 - okay so that's going to be also an input
55:34 - the type is going to be text and we're
55:36 - going to have autocomplete false
55:39 - all right let's keep going for input
55:41 - container and I'll get rid of this move
55:44 - it over
55:45 - and this is going to be an H4 as well
55:48 - form input title and we're going to say
55:50 - amount
55:51 - and we're going to have input here
55:55 - okay and class name for this one is
55:57 - going to be form input and type is going
56:01 - to be a number okay so once you choose a
56:03 - number
56:04 - it will give you just make sure
56:06 - autocomplete is off on there and instead
56:09 - of amount we're going to send message
56:11 - and
56:13 - instead of that we're going to change it
56:15 - to text okay
56:18 - and then underneath that we're actually
56:20 - going to make our amount
56:24 - so let's go ahead and do form footer
56:28 - let's give it an H4 I'm going to say
56:30 - footer title is amount so there we go
56:32 - amount is showing up now all right and
56:35 - then we're gonna have a div here and
56:37 - we're going to put a footer container
56:38 - and then I'm going to put an amount
56:40 - container div inside of there and then
56:43 - I'm going to put an input container
56:44 - inside of that
56:46 - okay and we want to put a icon here
56:49 - currency dollar icon which is this icon
56:55 - right there
56:58 - okay
56:59 - and then we're going to do Styles dot
57:01 - dollar icon so now it's showing up on
57:03 - the screen you should be able to see it
57:06 - okay I'm going to get rid of this guy
57:08 - here for a second
57:09 - okay next up we want to make our we want
57:12 - to make this look a little bit better
57:13 - and then we want to make our send button
57:15 - so I'm going to paste the same input
57:18 - styling except we're going to change
57:19 - this to a number
57:21 - and there we go since we added our form
57:23 - input styling it fixed it and made it
57:25 - wider I'll hide myself here
57:28 - all right so now I've changed it to a
57:30 - number
57:31 - and then what I want to do is I want to
57:34 - create a button and this button is going
57:35 - to be sent okay and we're going to make
57:38 - it a send button that's the styling I'm
57:40 - going to give it okay now it's looking
57:42 - much better make it type submit and when
57:45 - it comes to our form
57:46 - you know this is what it's looking like
57:48 - right now that's about it okay for our
57:51 - form so if you got to this part great
57:54 - job
57:55 - you've done an amazing job now next up
57:58 - we're going to be working on the
58:00 - activity header let's go all right next
58:02 - up
58:04 - that right there is what we're gonna be
58:07 - building right now the activity header
58:09 - okay so there's gonna be a lot of fun to
58:12 - build and I hope you're going to learn a
58:15 - bunch of things out of this but with
58:17 - that said let's get to it let's start
58:19 - building that bad boy okay so I'll bring
58:21 - it right over here so you could have
58:22 - like a frame of reference here as we
58:24 - build it and let's go so I'm going to go
58:27 - into my app.js and I'm gonna hit import
58:30 - activity
58:32 - okay and then let's open up our tabs
58:34 - here and in files you can see I have a
58:37 - folder called activity and then I have
58:38 - activity card okay so let's go ahead and
58:42 - import that so I'm going to go ahead
58:44 - import activity card from dot slash
58:46 - components activity activity card okay
58:49 - all right so now it's been imported and
58:52 - now we're going to start building this
58:55 - out right over here
58:56 - close everything out
58:58 - all right so I'm going to pop in my
59:00 - activity card here
59:02 - okay pretty soon it will actually start
59:04 - showing up and I'll leave it just here
59:06 - as a reference
59:07 - so let's go into our activity card and
59:10 - now we're going to build it out from
59:11 - scratch okay so let's go ahead and
59:13 - import styles
59:15 - from
59:16 - Styles and activity module.css okay make
59:20 - sure you do dot dot slash dot dot
59:22 - because we have to go back out to
59:23 - directories okay then we're going to
59:26 - return a container and then inside of
59:29 - that div
59:31 - we're gonna have another div and just
59:33 - going to be a tab container okay and
59:35 - then in there we're going to put a P tag
59:37 - and we're going to have a tab title
59:39 - activity so that's going to be this part
59:42 - right over here where it says activity
59:44 - okay so boom right there it's showing up
59:46 - okay after activity
59:49 - we want to add an in a class name and
59:52 - we're going to do Styles dot navigation
59:55 - container okay inside of that we're
59:58 - going to add in
60:00 - navigation item and then we're going to
60:03 - do data Dash current so just so you
60:06 - understand what this data.current is
60:08 - that this is how it will give it this
60:10 - active styling over here
60:13 - okay so that's how we do that
60:15 - all right let's keep going I'm going to
60:17 - make a globe icon let's go ahead and
60:19 - import it from the top there's a globe
60:21 - icon from here icon slash react slash
60:23 - outline
60:25 - and then we're gonna go and do
60:28 - styles.navigation icon okay just like
60:30 - this
60:32 - and then let's create another div here
60:34 - we're going to give it a class name and
60:36 - I'm going to say navigation item and in
60:38 - here we're gonna put a user icon and
60:42 - just so you know what this icon will be
60:44 - it'll be this icon right over here right
60:46 - Globe icon is this guy here user icon is
60:49 - that guy
60:51 - okay so once we add in that icon let's
60:53 - go ahead and we're going to add another
60:55 - navigation item and this one is going to
60:58 - be a user group icon the third icon
61:01 - all right and you could see all of these
61:04 - being added here okay so let's go ahead
61:06 - and boom it's showing up that's great
61:09 - let's go all the way at the bottom we're
61:10 - gonna add another div and for this I'm
61:13 - going to give it a Styles and say feed
61:15 - list
61:16 - okay let's go to our index.js
61:18 - and here I'm going to remove import from
61:22 - indexed CSS so I'm going to remove the
61:24 - global styling that we were doing
61:26 - everywhere and I'm going to change that
61:28 - and we're going to go ahead and say
61:30 - go into our Styles and grab our
61:33 - global.css so now when we do that boom
61:36 - look at that the entire app styling is
61:38 - looking beautiful our form is looking
61:40 - beautiful so that Global styling there
61:43 - fixed almost everything okay so now in a
61:46 - full screen it look at how much better
61:48 - that looks right it's beautiful and like
61:50 - our Target that we had here is matching
61:53 - what we've built there so with that said
61:56 - we are done with this activity header
61:58 - part great freaking job and next up
62:01 - we're going to work on our transactions
62:04 - let's go quick thing that I want to
62:07 - highlight earlier when we created that
62:09 - send button the problem that was
62:10 - happening with that was it was like
62:12 - overflowing and doing all kinds of weird
62:13 - stuff so I just need you to go in your
62:16 - Styles and go into your transaction
62:18 - Styles
62:20 - transactions.module.css and we're just
62:21 - going to change something inside of our
62:23 - container so here for our container
62:28 - we're just going to make the width
62:30 - 400 pixels okay if you didn't have that
62:33 - already change it to 400 pixels and then
62:37 - you shouldn't have any problems
62:38 - whatsoever you should be good to go okay
62:41 - all right let's keep on going now so now
62:43 - our button looks really good our send
62:45 - button looks awesome no problems anymore
62:47 - okay let's now go to our context and get
62:52 - to work on setting up our smart contract
62:54 - that's the big main thing that we need
62:56 - to do now
62:57 - okay so we're gonna keep track of some
63:01 - states so let's just Define all of those
63:03 - here so the two address we're going to
63:07 - keep track of that state the amount
63:10 - we're going to keep track of that state
63:12 - as well all right so we're going to keep
63:14 - track of this amount State obviously
63:15 - right let's keep going yeah default it
63:18 - to zero because it's an amount it's a
63:19 - number it's not a string so we're not
63:20 - going to have it empty message we're
63:22 - going to leave the message blank to
63:24 - start off with okay we're going to keep
63:26 - track of our loading State and obviously
63:29 - in the start it's false it's not loading
63:31 - and uh we're gonna keep track of our
63:34 - transaction count
63:36 - because we want to know how many
63:37 - transactions we have okay and yep and by
63:41 - default we're not going to set it to
63:42 - zero or anything by default what we're
63:44 - actually going to do is we're going to
63:46 - pull it from local storage okay so that
63:50 - is a very clean way of doing it we're
63:52 - going to pull it from local storage uh
63:55 - so when a page refreshes or whatever by
63:57 - default we're going to pull it from
63:59 - local storage and then otherwise we're
64:01 - going to pull it dynamically okay now
64:03 - what we want to do is let's go down and
64:05 - we're going to check if transaction
64:07 - exists we're going to create this
64:08 - function
64:09 - and this is really a getter and Setter
64:12 - function that we're making here okay so
64:14 - let me write that down here it's going
64:16 - to be a getter and Setter function
64:18 - and what this function will really do is
64:22 - we want to get a transaction count so
64:27 - okay so this is gonna here's another way
64:29 - of saying this right get and set
64:31 - transaction count
64:33 - that's what this function really does so
64:36 - what we want to do is we want to get the
64:37 - transaction count and once we get it we
64:38 - want to set it in our local storage okay
64:42 - now where are we getting this
64:44 - transaction count from we're going to be
64:46 - getting this transaction count right
64:48 - from our back end our blockchain smart
64:52 - contract part all right so that's what
64:55 - we're that's what's really happening
64:57 - here okay so let's keep going with this
64:59 - function check if transaction exists
65:01 - we're going to go async on this bad boy
65:03 - and it's going to be a try catch and
65:06 - we're going to say hey if we have
65:07 - ethereum meaning if uh you know
65:10 - so this is saying if you have metamask
65:13 - installed then go ahead and do the
65:16 - following then we're going to go ahead
65:17 - and create transaction contract and
65:19 - we're going to create the ethereum
65:21 - contract now this is going to be a
65:23 - helper function we'll create in a second
65:25 - so don't worry when it gives you an
65:26 - error don't freak out not a big problem
65:28 - so let's go ahead and actually create
65:31 - this ethereum contract function now and
65:35 - really this is just a boilerplate code
65:37 - for connecting a smart contract that
65:39 - you've made on the blockchain side to
65:41 - your front end so we're just doing that
65:42 - connection part right now
65:44 - okay so let's go ahead and I'm going to
65:47 - set our provider and we're going to
65:49 - choose the metamask as our provider so
65:51 - we're going to say ethereum then we're
65:53 - going to get our signer and this is
65:54 - going to be our provider.getsigner so
65:57 - this is whoever's signing the contract
65:58 - meaning like the logged in user the
66:01 - metamask and then what we want to do is
66:04 - we want to get the transactions contract
66:06 - okay and so let's go to ether's contract
66:09 - and we need to give it our contract
66:11 - address okay we need to give it our
66:14 - contract address and we need to give it
66:16 - our contract API and we need to give it
66:19 - our signer and then we're going to
66:21 - return this transactions contract okay
66:24 - so now contract address and contract ABI
66:27 - those are things that we're going to go
66:28 - ahead and set it up so let's go and get
66:31 - on line three let's go ahead and import
66:33 - contract address from utils constants
66:36 - and then we're also going to go ahead
66:38 - and get let's go to our
66:40 - um let's see where we're at let's go to
66:42 - build so we're going to our backend
66:45 - blockchain part let's go to build and
66:47 - let's go to transaction and let's copy
66:50 - that so what we've copied here all right
66:53 - so what we've just copied is all of all
66:55 - of the contents inside of that
66:57 - transactions file okay so uh we're just
67:00 - going to create that same file inside of
67:02 - here okay so let's go and
67:05 - now paste all of that boom there we go
67:09 - so now that I've pasted it so just copy
67:12 - uh click right click on noodles right
67:13 - and you're just going to hit paste it's
67:15 - going to paste the transactions.json
67:17 - that we copied over earlier let's go to
67:19 - our constant.js
67:21 - and we're going to go ahead and say
67:23 - export const contract address so we get
67:26 - access to this and then we're gonna do
67:29 - the the following okay we're also going
67:31 - to import ABI inside of here from our
67:35 - transactions.json and we're going to
67:38 - export our API our contract API so we
67:42 - have access to it in our other files so
67:44 - make sure you do abi.abi at the end
67:46 - let's go to our uh con let's go to our
67:50 - context okay and inside of there let's
67:54 - pull contract address and contract ABI
67:56 - and now let's scroll down to our check
67:59 - if transaction exist function and here
68:02 - we're going to do the following okay
68:04 - let's go ahead and do current
68:05 - transaction count and we're going to
68:07 - await this and I'm going to say
68:09 - transaction contract dot transaction
68:11 - count okay or sorry get transaction
68:14 - count rather
68:15 - okay this is the function that we have
68:18 - on the blockchain side so I can show you
68:20 - that let's go to our backend let's go to
68:22 - our contracts let's go to our
68:24 - transactions here and boom you can see
68:26 - our get transaction count all right so
68:28 - we got the transaction count on our back
68:30 - end right that's what we're interfacing
68:32 - from our front end so that's freaking
68:34 - exciting because we're literally going
68:36 - from our front end going to our
68:38 - blockchain part using the blockchain
68:40 - solidity function to get the data
68:42 - retrieving that and then putting it out
68:45 - on the front end I mean I don't know
68:46 - that is pretty freaking cool like that's
68:50 - super super exciting right so that's why
68:52 - the away promise needs to happen because
68:54 - we're doing a bunch of stuff
68:56 - asynchronously here and then once we
68:59 - pull that bad boy we're gonna go ahead
69:01 - and in our local storage we're gonna set
69:03 - that item and we're going to say
69:05 - transaction count all right so now we
69:08 - got our current transaction count okay
69:10 - so we have our current transaction count
69:12 - which is we get our account first so
69:15 - then current transaction count becomes a
69:17 - number like let's say eight or something
69:19 - and then we on line 70 right we set in
69:24 - our local storage and we set the key
69:26 - with transaction count and we said the
69:29 - value
69:30 - to that okay so whatever that may be
69:32 - eight or five or whatever however many
69:34 - transactions have happened
69:36 - okay and uh that's looking really really
69:40 - solid to me okay and then now let's go
69:42 - to our you know use effect hook that we
69:45 - created earlier where we added check if
69:46 - wallet is connected now let's go ahead
69:48 - and add check if transactions exist so
69:51 - basically anytime we Refresh on our page
69:54 - that function should fire off and work
69:56 - and you could also you know check in
69:59 - your console log what it's returning and
70:02 - it'll show you it's returning like a
70:04 - number okay however many transactions
70:05 - you have like three or four or five or
70:07 - whatever
70:08 - okay so with that said
70:11 - um now the last part that we want to add
70:13 - to this is we want to fire off this use
70:14 - effect hook every single time
70:16 - transaction count changes and the cool
70:19 - part about this is whenever there's a
70:22 - new addition a new
70:24 - transaction that occurs your page will
70:27 - automatically refresh and show that
70:30 - transaction okay so that's what's
70:31 - happening great job on that now the next
70:34 - thing that we're going to add is the
70:36 - ability to send money send ethereum
70:39 - let's get to it all right time to send
70:42 - some money so let's get into it
70:45 - okay so let's go and add the ability to
70:49 - be able to send money okay this is going
70:52 - to be important
70:53 - and when I say money I mean ethereum so
70:56 - let's create a function we'll call it
70:57 - send transaction async
71:01 - okay and um here's what we're gonna do
71:04 - we're gonna add a try catch block here
71:06 - and if it's an error then obviously just
71:08 - show an error okay if it's not an error
71:10 - then try
71:12 - all right so here I'm gonna say hey if
71:15 - metamask is installed then I want you to
71:17 - go ahead and
71:19 - add in this transaction contract and
71:21 - create it okay so we're just going to
71:23 - create the transaction contract
71:25 - and then what I want to do is I want to
71:27 - have a parsed amount here
71:29 - okay and we're gonna do it with ether's
71:32 - utils and I'm going to parse the ether
71:35 - and I'm going to parse the amount that
71:38 - was passed so if the user gave us a
71:41 - certain amount we're just going to pass
71:42 - it in here so that utils up parse ether
71:46 - amount what that's really doing is if I
71:48 - go here online to a eth dash convert so
71:52 - just go to eat that can eat Dash
71:54 - converter.com and here if I put in like
71:58 - a small amount of eth like 0.001 it'll
72:01 - convert it to whey so it'll convert it
72:03 - to whatever way that is okay so that's
72:06 - really what that function is doing okay
72:09 - because remember there's no floating
72:11 - amounts there's only integers then I'm
72:14 - going to
72:16 - requests so I'm going to wait ethereum
72:18 - or metamask in this case and method is
72:20 - going to be send transaction
72:23 - and we're going to give it params params
72:26 - is going to be an array of object in
72:29 - this case and we're going to say we're
72:32 - going to give it a from address
72:35 - all right so here we go right so we put
72:37 - our gas just for a gas just put 0x5 to
72:41 - it all right so this basically right
72:42 - here 0x528 is just a short nice way of
72:45 - saying something like hey I'm I want to
72:47 - pay like 21 000 way or whatever in gas
72:50 - to just cover some basic amount of gas
72:51 - okay that's really what it is
72:53 - and then just choose value parseed
72:55 - amount so we got our from which is a
72:57 - current account which is this bad boy
72:59 - right here that's logged in the 2 is
73:02 - going to be whoever fills out the form
73:04 - or like whoever we're sending it to for
73:06 - the form
73:06 - uh we have we're just gonna pay this
73:09 - amount of gas every single time the
73:11 - value is going to be the parsed amount
73:14 - and then we're going to turn it into
73:17 - hack all right so that just converts it
73:19 - to a hexadecimal that's it but we don't
73:21 - really need to worry too much about it
73:22 - we're going to create a transaction hash
73:24 - and that's going to be from the
73:26 - transactions
73:28 - transaction contract and we're going to
73:31 - do dot add to blockchain okay so
73:33 - basically
73:34 - you know that's where we're doing
73:36 - you know Trend uh send transaction okay
73:39 - that's really what we're doing
73:41 - and we're gonna pass in our address to
73:44 - our parsed amount our message and then
73:48 - yeah that's pretty good okay those are
73:52 - all of the things that we're going to
73:53 - send
73:55 - then we're going to set is loading to
73:57 - True while that's sending and then we
74:01 - can say loading and then we're going to
74:03 - put a transaction hash
74:06 - all right now what we want to do is we
74:08 - want to await the transaction
74:10 - hash here and just do transaction
74:13 - hash.weight and then once we're done
74:15 - with that we're going to assist success
74:17 - transaction hash and then we want to set
74:19 - the loading to false because loading is
74:22 - done we were none waiting for it
74:25 - and transaction count at the end is
74:29 - going to be updated so now we're going
74:31 - to going to get the updated transaction
74:33 - count okay and then once we get that
74:36 - we're going to set the transaction count
74:38 - to whatever the new transaction count is
74:41 - and we're going to convert that into a
74:44 - number
74:45 - so it comes as like a big int or a big
74:48 - number so we just cast type Castle to to
74:51 - like a regular number and then we're
74:52 - fine and then we're just gonna do this
74:53 - window location reload thing to make our
74:55 - app more robust and then we're going to
74:57 - add an else here and I want to say you
75:00 - know if that doesn't work then No
75:01 - ethereum Object okay meaning like no
75:03 - matter mask or whatever and it doesn't
75:05 - work
75:06 - cool with that said we're done adding
75:08 - that send functionality now it's really
75:10 - just adding in the UI the beautiful
75:12 - front end for the form everything is
75:15 - ready to go and then we should be able
75:16 - to send money and see everything okay
75:18 - let's go ahead and do that now all right
75:19 - now the functionality we're going to add
75:22 - is really where we add real
75:25 - functionality to the form meaning that
75:27 - when you actually put in an address and
75:29 - you put in a message and you put an
75:31 - amount it will actually open up metamask
75:34 - and then ask for you to confirm and then
75:37 - you're actually able to send the
75:39 - transaction so that is the functionality
75:41 - that we will now add with that said
75:44 - let's get into it
75:45 - so let's get started from where we had
75:47 - left off
75:49 - we created our send transaction function
75:51 - now all we need to do is make sure that
75:53 - in our context we actually pass it so
75:55 - our the rest of our app has access to
75:57 - send transaction function so go ahead
75:59 - and do that and then I'm going to go
76:01 - into my transaction form
76:03 - and inside of my transaction form we're
76:06 - going to use our use context hook and
76:09 - get access to the transaction context
76:11 - and I'm going to destructure send
76:13 - transaction function from there set
76:15 - address to address to and set amount
76:18 - hook okay and the amount took and
76:20 - message set message Etc right so we
76:22 - we're just going to get access to kind
76:24 - of all of that stuff and we need to send
76:27 - that stuff over too so just make sure
76:28 - you copy all of that and you paste it
76:31 - here so you want to make sure that in
76:33 - your contacts you're actually passing
76:35 - all of that information right the set
76:37 - address to hook the address to set
76:39 - amount hook amount State message set
76:42 - message all of that okay so we're going
76:45 - to go ahead and do that okay cool now
76:48 - that we're doing this let's go ahead and
76:51 - make sure that we write our handle
76:53 - submit function okay and in this we're
76:57 - going to take the event okay and the
76:59 - first thing we're going to do is prevent
77:00 - default and what that does is it makes
77:02 - sure that you you don't refresh the page
77:04 - doesn't refresh once you hit submit
77:06 - and we're going to say hey if the
77:09 - address doesn't exist or amount doesn't
77:11 - exist
77:12 - all right so we're going to say if none
77:15 - of these exist then just do nothing okay
77:17 - just ignore that okay we only want this
77:20 - to work if those exist and so basically
77:24 - this is like a guard Clause that we're
77:26 - adding here and then
77:28 - uh if none of those are true then
77:30 - obviously we're going to send the
77:31 - transaction okay so the transaction is
77:33 - going to send when these things exist
77:35 - okay and then we're just gonna for the
77:37 - input for our Forum title we're just
77:40 - going to say value uh is the address to
77:43 - okay so that's the address to right here
77:47 - and we're going to say on change we're
77:50 - going to set the address to whatever
77:51 - you're typing in the two and then we're
77:53 - going to do the same thing for our
77:55 - message and then we're going to do the
77:56 - same thing for our amounts right now
77:58 - we're working on our message okay value
78:00 - on change same idea and then we're going
78:04 - to do the same thing for amount it's
78:06 - going to be literally the same pattern
78:07 - okay so let's go ahead and do that for
78:09 - amount on change set amount Target value
78:12 - okay good good old react stuff and if
78:16 - you're wondering yes yes my hair did
78:19 - change okay I went to get a haircut in
78:23 - between the shoot so shout out haircut
78:25 - gang if you saw this
78:28 - you know not most people will make it to
78:30 - this part but if you're one of the lucky
78:32 - few good job
78:34 - all right let's keep going let's wrap up
78:36 - this entire bad boy that we have written
78:38 - in a form and we're gonna add a handle
78:41 - submit to that form okay so the handles
78:43 - the function essentially that we created
78:45 - right here so this form is going to be
78:48 - looking for when you press that juicy
78:50 - send button when you send that send
78:52 - button when you send that center button
78:54 - I mean so when you click that send
78:56 - button your send transaction or whatever
78:58 - function will handle submit function is
79:00 - going to run okay but let me ask you is
79:03 - it going to run right now that this is
79:05 - empty I'll give you four seconds to
79:07 - answer that four three two one no it
79:11 - will not well the function will run but
79:13 - it won't send the transaction right
79:15 - because there's nothing here so that
79:17 - won't happen but
79:20 - if you have all of these filled out and
79:23 - then you hit send will it run I'll give
79:25 - you four seconds to answer that four
79:26 - three two one hopefully said yes and yes
79:29 - if you haven't filled out it will send
79:31 - so let's keep on rocking and rolling
79:33 - here and let's open up our console on
79:36 - the right hand side okay and then we're
79:38 - gonna go to our code
79:41 - um just on change with the capital c
79:43 - okay so that that's where the error was
79:45 - coming from so just make sure it's a
79:47 - Capital C that you have cool all right
79:49 - now it looks like it's working now let's
79:52 - go ahead and type in our to address
79:55 - ignore my dog
79:57 - she's a little baby bulldog she's wild
80:00 - all right there we go we got our two
80:01 - address sometimes you know I order
80:03 - ubereats they show up at the door to
80:05 - drop the food and then she just starts
80:07 - barking and I'm sick and tired of having
80:10 - to edit that out so you guys are just
80:12 - Gonna Hear What I Hear at my house every
80:14 - day so if you got to this dog barking
80:15 - part feel free to comment that as well
80:17 - and um
80:20 - yeah let's write our message have a
80:21 - great day and we're gonna put in some
80:23 - amount and we're gonna hit send and now
80:25 - notice
80:27 - that it is opening up Mata mask how
80:30 - beautiful is that let's hit confirm
80:31 - there we go metamask is popping up I
80:35 - will make myself tiny here so you can
80:37 - see confirm boom look at that and the
80:41 - loading transaction hash is showing up
80:45 - to that is nice right that was real
80:48 - clean and there the transaction has
80:51 - taken place right and if we go to the
80:54 - other account or resent this money it
80:56 - looks like we got the eth
80:59 - so we are now able to send money I mean
81:02 - 99.9 of the functionality of our venmo
81:06 - app is complete you know functionality
81:07 - wise but now we still got to make sure
81:10 - that we render the recent activity and
81:12 - we show all that stuff so I hope this
81:14 - was exciting to you I hope this
81:16 - enlightened you and with that said let's
81:18 - keep on rocking and rolling next up the
81:20 - component we're going to make is this
81:23 - guy right over here okay this is going
81:26 - to be your recent activity slash recent
81:30 - transactions component so you know what
81:33 - who's making the recent uh transactions
81:36 - right this is what you see on venmo as
81:37 - well so let's go ahead and work on that
81:40 - component now
81:43 - get rid of this here and let's go I'm
81:46 - going to pop this in the purple thing in
81:48 - the back is not really what you're
81:49 - actually going to be adding okay that's
81:51 - just like interesting looking padding
81:53 - that I added but this is the part that
81:55 - you're actually going to be building
81:56 - yeah I just wanted to make sure like I
81:58 - don't want money to make just make it
81:59 - stand out
82:02 - Okay cool so let's go ahead and work on
82:05 - this now
82:06 - all right
82:08 - let's go into our
82:10 - activitycard.jsx and inside of my
82:12 - activity card let's go and import my
82:15 - contacts from react
82:19 - and then the next thing I want to do is
82:22 - I'm going to get my transaction context
82:24 - from my context file
82:27 - will get shortened address from utils
82:31 - okay it's going to be slash util slash
82:34 - shorten address
82:36 - yep
82:40 - just like that and then we're going to
82:43 - pull transactions in current account
82:45 - from our context let's go and get all
82:49 - transactions inside of our context let's
82:52 - go and get all of the transactions so
82:54 - it's going to be async it's going to be
82:56 - a try catch here we're going to console
82:58 - log the error and then we're going to
83:00 - say hey if metamask is installed
83:02 - I want you to create the transaction
83:04 - contract and we're going to create the
83:06 - ethereum contract
83:09 - once that's done we're going to get the
83:12 - transactions okay so we're going to say
83:13 - const available transactions and we're
83:16 - just going to await the transaction
83:19 - contract and we're going to call the get
83:21 - all transactions function which is on
83:24 - our back end okay so in our blockchain
83:27 - part
83:28 - so if we go to our transactions.sol you
83:31 - can see we have get all transactions
83:33 - right there and it's a view function and
83:35 - it Returns the transactions
83:38 - we're gonna say
83:40 - get us these structured transactions all
83:43 - right so basically structured
83:44 - transactions all we're doing is we're
83:46 - transforming the data that we're getting
83:48 - and so I'll kind of explain to you what
83:49 - I mean by that right let's go ahead and
83:51 - write this
83:53 - um okay so we are now just going to pull
83:58 - our address to from there
84:01 - this is the um
84:04 - transaction receiver okay that's the who
84:07 - we're sending it to okay next up we're
84:10 - going to get our address from and that's
84:12 - a transaction sender
84:14 - and then we have our amount or actually
84:18 - in this case let's just do our timestamp
84:20 - and uh let's call our time ago that we
84:23 - got imported or added earlier all right
84:26 - and we're going to say dot format
84:29 - okay and I'm going to create a new date
84:33 - in here and we're just going to put in
84:35 - the transaction
84:36 - okay dot timestamp so each transaction
84:39 - will have a timestamp from the
84:41 - blockchain and I believe the blockchain
84:43 - puts their transactions in Unix all
84:46 - right so
84:48 - all right so there we go you heard that
84:50 - confirmation in there uh our developer
84:53 - confirmed with us that it is UNIX our
84:55 - developer being your boy Kevin
84:58 - um and basically if you pass it that
85:01 - Unix right and you give it as a number
85:04 - and uh we pass it to new date all right
85:08 - so what what the what the multiplied by
85:10 - a thousand Shenanigans is because you're
85:12 - getting a you okay here it's annoying
85:14 - you don't really need to worry about it
85:15 - but I'll tell you anyways you're getting
85:17 - Unix in milliseconds so in order to turn
85:21 - it into Unix in seconds you multiply
85:23 - that bad boy by a thousand now it turns
85:26 - into Unix seconds you give the unit
85:30 - seconds to your new date time object it
85:33 - turns it into a daytime object then you
85:35 - call time ago format on that daytime
85:37 - object and it knows how to turn it into
85:39 - a time ago naturally you know written
85:42 - language kind of like here
85:44 - where you're seeing a you know 23
85:48 - minutes right there or 31 seconds right
85:50 - there that's what time ago does
85:53 - okay there we go all right so we're
85:55 - going to say comma mini here
85:58 - all right the mini is a time ago thing
86:00 - so you can give it mini so that means
86:02 - that it's instead of minutes or mins
86:04 - it's going to say m or s for seconds
86:09 - okay there we go and then message
86:13 - we will call it
86:16 - transaction.message okay so now that
86:18 - it's
86:19 - uh restructured like this or AKA
86:22 - transformed you won't have to Loop
86:24 - through and go transaction dot receiver
86:26 - transaction.sender you can actually just
86:27 - Loop through and go dot address to dot
86:30 - address from dot timestamp so it'll be
86:33 - much cleaner so your code won't look
86:34 - like
86:36 - transaction.transaction dot receiver
86:37 - pass in your amount will parse ins and
86:40 - we will give it the transaction amount
86:43 - in HEX and we will divide it by 10 to
86:48 - the power of 18. so if you're looking at
86:52 - this and you're like what kind of
86:53 - ninjitsu garbage is this
86:57 - um I'll explain real quick we are going
86:59 - my friend from
87:01 - way this is like the ugly stuff about
87:05 - blockchain I don't know why they do all
87:06 - this trash like this development
87:08 - experience is going to get better at
87:09 - some point but that's what it is right
87:11 - now it's in way and we're converting it
87:13 - to eth so remember when we went from
87:15 - like a really tiny 0.002 number and we
87:18 - turn it to like a 10 billion way number
87:21 - when we went to eth-converter.com well
87:24 - now for the front end we got to go from
87:26 - way back into eth and show it to the
87:30 - user okay so we're reversing that all
87:33 - right hope that makes sense
87:35 - okay let's keep on rocking and rolling
87:38 - all right and then we're gonna import
87:40 - time ago from JavaScript time ago and we
87:44 - will also import
87:46 - en from Joshua time ago Locale okay and
87:49 - then we're going to add that Locale to
87:52 - the time ago
87:54 - and we'll say time ago and we'll make it
87:57 - a uh e-n-u-s okay so then it'll look
88:01 - like American time zones
88:04 - okay
88:05 - um and time ago if you're looking for it
88:07 - right in your package.json
88:11 - we have it either added and if we don't
88:13 - have it added we can just go ahead and
88:15 - install it now okay so in our command
88:17 - line we're going to go ahead and say
88:18 - npmi and we're going to go ahead and say
88:22 - JavaScript and just do dash time ago
88:27 - beautiful hit enter and now it will
88:29 - install it all right so basically now
88:32 - guys we have it installed
88:34 - okay and once it's installed your time
88:36 - ago is going to work okay let's keep on
88:40 - going through this all right let's go
88:42 - down and we're going to add our set
88:45 - Trend we use our set transactions hook
88:47 - that we got earlier
88:49 - okay or actually let's define it here so
88:53 - I'm going to say transactions and set
88:54 - transactions and in the start is going
88:57 - to be an empty array
88:59 - okay it's going to be an empty array
89:02 - and then what we're going to do is we're
89:04 - going to set the transactions to
89:06 - structure transactions uh and else we're
89:09 - going to say No ethereum Object okay and
89:12 - in our context provider make sure you
89:14 - also export this value so we're going to
89:17 - say transactions let's pass it to our
89:18 - app so we have access to transactions
89:20 - everywhere else in the app
89:22 - now inside of our activity card you can
89:25 - see that we're extracting transactions
89:28 - all right guys so there we go okay so
89:31 - now transactions will make more sense
89:32 - right because we're pulling it out
89:33 - because we actually have access to it
89:36 - and now this feed list that we have
89:38 - inside of that feed list we're going to
89:41 - all right so we're going to go ahead and
89:43 - do transactions.nap
89:45 - and now we just want to Loop through and
89:48 - render those transactions out this is
89:49 - like mainly the front end part here okay
89:51 - so we're gonna go ahead and destructure
89:54 - an ID and address from our timestamp our
89:59 - message our address from
90:03 - all right so we destructured all of this
90:05 - stuff
90:07 - id address from timestamp message
90:09 - address to Etc
90:11 - um and then we're going to also get the
90:14 - index okay okay so we got this right now
90:18 - We're looping through this and now let's
90:22 - go and render this out so I'm going to
90:25 - do an implicit return here right arrow
90:27 - and then parentheses is an implicit
90:29 - return okay so there we go now class
90:33 - name so key is going to be the index
90:35 - right that's why we pull the index when
90:36 - we were looping and then we want to give
90:38 - it a class name a feed item
90:42 - for this here
90:45 - class name here we're going to give it a
90:48 - styles.avatar container okay and we're
90:51 - going to give it an image and it's going
90:53 - to be an avatar image and for Source
90:55 - we're going to Generate random Avatar
90:58 - all right guys so now you know Generate
91:01 - random Avatar obviously doesn't exist
91:03 - but we're going to go ahead and uh
91:05 - create that now so let's go ahead and do
91:07 - Generate random Avatar and this function
91:11 - it's going to work in the following way
91:14 - we're going to say random Avatar and I'm
91:17 - going to randomly pick
91:19 - a number between one and a thousand okay
91:22 - I'm going to be using this as my seed
91:24 - number and we're gonna use this die
91:27 - spare API which is very nice
91:30 - okay and um we're going to pop in the
91:34 - random Avatar that's how we're getting
91:36 - this by the way this is using the uh die
91:39 - spare API okay that's how we're getting
91:42 - all of this
91:43 - and how it works is you give it a random
91:46 - seed so we're just going to give it a
91:48 - random Avatar plus current account and
91:50 - we're gonna say
91:53 - um
91:53 - dot SVG at the end of it
91:57 - okay and um there we go all right so now
92:00 - it will generate a random Avatar every
92:02 - single time and make sure we're going to
92:06 - create another div and this one is going
92:07 - to be feed details so the point of this
92:11 - is so we can actually see the
92:14 - details part
92:17 - okay so here we have uh you know this
92:22 - this uh feed details is going to be
92:25 - obviously the details part that we're
92:26 - going to be adding to this okay
92:28 - okay and then we're gonna have e a feed
92:31 - author
92:33 - that's where we're gonna put the wallet
92:34 - and shortened address so there we go we
92:37 - got the shortened address so we're going
92:38 - to put the shortened from address and
92:40 - then we're going to put the shortened to
92:42 - address so that will say you know from
92:45 - and then it'll say two okay so there we
92:48 - go that's very nice and then what we
92:51 - want to do is we want to add a span tag
92:53 - here
92:54 - and we want to do created at so this is
92:58 - going to be our timestamp here which is
93:00 - 23 minutes or 31 seconds
93:02 - Etc
93:04 - and we're gonna put our time stamp there
93:08 - okay right here
93:11 - we're going to put a globe icon right
93:13 - next to it just like this so that's why
93:15 - we're doing this globe okay and let's go
93:18 - class name we're gonna go Styles dot
93:21 - feed author or sorry dot feed body in
93:24 - this case actually and for the feed body
93:26 - we're going to add in a message so this
93:28 - is the message like have a great day or
93:30 - thanks for the ether
93:32 - all right
93:34 - perfect
93:38 - uh
93:39 - all right let's make another div and for
93:43 - this one I'm going to give it the
93:46 - feed CTA so this is going to be the call
93:50 - to action or these buttons like like and
93:52 - comment
93:54 - just like how we have on venmo and we're
93:56 - going to give it a heart icon and we're
93:58 - going to give it a like icon for that
94:00 - one and for the next one we're going to
94:02 - give it
94:04 - and just so you could see right there we
94:07 - go that's the heart icon so I'll leave
94:09 - this here so you can kind of see the
94:11 - heart icon and the other icon or
94:14 - actually let's put it here why not so
94:16 - you can see it okay
94:20 - um so we got the like icon and then we
94:22 - got the comment icon
94:25 - all right let's go ahead and refresh our
94:28 - app let's see here
94:30 - actually let's go to our activity card
94:33 - or sorry let's go to our context here
94:36 - and inside of our context I'm going to
94:38 - go to around line 47 where in my check
94:41 - if wallet is connected function and
94:43 - we're gonna get access to all of our
94:45 - transactions
94:46 - okay so let's call that function get all
94:48 - transactions
94:50 - all right and
94:53 - let's just make sure I'm in a full
94:55 - screen and let's check here
94:58 - if it's pulling it through it's giving
95:00 - us an error it says cannot read
95:02 - undefined okay so hold on let's see
95:05 - what's going on here
95:08 - all right let's look for it all right so
95:10 - it was a tight it's actually a typo here
95:12 - so amount dot underscore hex it's amount
95:15 - dot underscore hex on line 140. so that
95:19 - fixed it there we go we're getting all
95:21 - the transactions and our transactions
95:23 - are showing up I mean that is nice that
95:26 - looks beautiful
95:28 - okay that looks great and you can see oh
95:31 - wow you can see right address from you
95:33 - can see address true the amount sent
95:35 - message and time stamp and all of that
95:38 - is showing up here
95:39 - so this is really really good so far
95:42 - let's go to our account one
95:45 - and we're gonna copy okay
95:49 - I'm going to paste the account two's
95:51 - address so we can send them the money
95:53 - we'll put in a message
95:55 - thanks for the ether there we go and we
95:58 - will put in
95:59 - uh some eth
96:02 - and let's go down and send it let's hit
96:05 - confirm
96:06 - Lo it says loading so you could see that
96:08 - right away okay let me hide myself so
96:10 - you can see loading right away there we
96:12 - go and once the loading is done we could
96:15 - speed it up right once the loading is
96:17 - done
96:18 - boom right there there you go now the
96:22 - transaction is showing up how freaking
96:24 - beautiful is that that is fantastic so
96:27 - great work on that so far that is
96:30 - wonderful and with that said we're done
96:33 - with this part at this point we're
96:34 - pretty much done with the entire app
96:36 - we're just gonna put the finishing
96:37 - touches and we're good to go so I'll see
96:39 - you in just a second all right so now
96:42 - we're gonna pretty much just be demoing
96:44 - the app but you might have noticed that
96:46 - I have this add thing here now this is
96:50 - pretty much just react I'm not gonna go
96:52 - ahead and build this out it's gonna be a
96:54 - challenge for you to build out and add
96:57 - to this app if you get stuck you can
97:00 - always just check out to the main branch
97:02 - because if you did npx clever programmer
97:04 - right for this project you can check out
97:06 - the the main branch that always has the
97:08 - full solution right now you're on the
97:10 - CLI starter Branch so you are doing this
97:12 - from scratch yourself okay so if you can
97:15 - always switch there and then code
97:18 - um or sorry find the solution but I
97:21 - would say you know everything you need
97:22 - to know at this point to be able to put
97:24 - this together okay or make a ad looking
97:27 - thing similar to this and you should
97:29 - give it a try okay you already have the
97:31 - assets and everything like that
97:33 - so I'm just going to go ahead and demo
97:36 - the rest of the app so like let's just
97:37 - play around with the app right and let's
97:39 - just make sure that it works I'm going
97:41 - to go right here I will click into
97:43 - account one I'll try to send some
97:45 - transactions over to another account
97:47 - let's go ahead and refresh the page you
97:51 - can see the avatars change right the
97:54 - logos the random generated avatars have
97:57 - changed we're pulling in the
97:58 - transactions the time stamps or the
98:00 - transactions are showing up I'll put in
98:03 - a new address here we'll put in a
98:06 - message and then we're going to go ahead
98:08 - and put in the amount
98:10 - let's see if it works with Emojis okay
98:12 - so I'll put in an emoji here ah no Emoji
98:15 - showed up oh well let's hit send and
98:18 - let's go ahead and hit confirm there we
98:22 - go we'll go ahead ahead and hit confirm
98:24 - and look at that it's loading loading
98:27 - loading loading right
98:29 - and let's see
98:32 - okay and account three or account two
98:34 - yep the money has gone and without even
98:37 - refreshing the page you can see that it
98:39 - says 26 seconds ago thanks for dinner
98:43 - all right so there you go that is your
98:46 - entire app so with that said I really
98:50 - really freaking hope that you enjoyed
98:53 - building this from scratch I hope you
98:54 - get to deploy it I hope you you know
98:57 - share in the comments that you did it I
98:59 - mean I'm really excited that you were
99:01 - able to follow along build this you
99:02 - should be very proud of yourself if you
99:04 - enjoyed this video smash that like
99:06 - button turn it white turn it blue
99:08 - depending on if you're using dark mode
99:10 - or light mode on your YouTube subscribe
99:12 - to the goddamn Channel I love your
99:14 - beautiful face this is Causey and as
99:16 - always I'll see you in the next video

Cleaned transcript:

we're gonna be building the venmo Clone with solidity and infuria this is going to be a very powerful dap that you're going to learn how to build from scratch we're going to be coding up the react part along with the smart contract and the blockchain part there are a lot of Concepts you're going to master as a result of this from blockchain Concepts to programming Concepts but more importantly I think you're gonna have a lot of fun and you're gonna learn that building blockchain apps don't have to be a painful experience they can actually be quite a pleasant experience so while my fire is burning behind me let's have a Fireside app building session with that said smash that like button turn it blue or white depending on if you're in the light theme or the Dark theme on YouTube subscribe to the channel because this is where we help you become a developer and a web 3 developer and let's get straight into the video step number Uno which is we're going to sign up on infuria it is completely free it is a RPC node provider and it will make your life so easy okay so that's what we're gonna use when we're building our dap so go ahead to the link below that we've provided for you okay use that special link that way we'll know that you're coming from this video it will be helpful for infuro to know this um and yeah just click the link in the description below okay it's going to be infuro dot IO whatever that's going to be the link click that below and go to this page right here hit sign up once you're on this page all right and then just create an account so I'm just going to create my account right here hit or resend emails it'll send you a confirmation go to your email address go ahead and confirm that bad boy once you're done it's going to send you to this page Pick Your Role so let's say you're an engineer okay slash developer solo freelance whatever and pick your category and then just hit next all right now you're going to create your first project so you're going to do web3 API formerly ethereum and uh the last part you're going to do is my first project name it whatever you want I'm just calling it my first project okay all right so there you go now we don't need to touch this in here okay everything you can leave as is because we're going to use an extension later called truffle and that will allow us to interact with inferior and pull all of this information okay so there you go your project should be created in here my first project okay and that's effectively it okay so make sure you go ahead and do that and I'll see you in a second all right so here is the demo of this app so take a look at it right I am here on my venmo clone the first thing I need to do is actually go ahead and connect my wallet so I'm just going to type in my password on metamask and log in once I am logged in I'll just hit I'll connect both of my you know any of one of my accounts so I'll just start with the account one in this case once I'm in you could see on the left hand side that I have all these transactions going through and it's showing the notes as well so here what we're going to do is I'm logged in currently okay so you can see my metamask wallet and you can see that I'm connected okay and here's my other account so here's account two right and then here's my first account and I'll paste in the second account that I want to send my money to and I will drop a message okay you could send your ethereum to really anybody that you want but I'm just going to send it to this address I'm going to say here's some money now metamask opens up and it asks hey do you want to do this are you sure blah blah yes I'm sure I'm going to put in my password all right it's telling us about the gas fees let's hit accept Okay it's doing a little loading all right blah blah blah contract interaction go down hit confirm and we'll wait a couple of seconds here okay let's wait and it says pending so I'll speed it up contract interaction okay we'll speed it up and boom it's done look at that on the left hand side it loaded right away it says here's some money and you can see it says four seconds ago that is beautiful okay and again now I can switch the account as well so I could go to a completely different account okay and I could send money to the other account so I can change accounts and send money to wherever I want okay so I'll refresh you can see that the account just changed over here okay it's a completely different account as you can see let's keep going I'll paste the account number and I'll say thanks for the money and I'll send some money in return okay thanking the person for sending me some money there we go and now we'll hit confirm and let's wait for it wait for it sending and I'll hit speed up contract interaction is done and look at that right away it shows up all the way at the bottom bottom right it says thanks for the money beautiful so there you go I hope that you're excited about this project this will be the venmo Clone that you will be building I hope you're excited it's going to be happening with solidity so with that said let's just rock and roll and right before we get started ladies and gentlemen I just want to give a huge shout out to this man right over here I'm new to the screen screen thing but JavaScript Mastery uh a lot of the smart contract part is from his video called Crypt uh where he built the Crypt portfolio so definitely check it out we'll Link in the description below uh it is an awesome resource and on top of that we built our own styling and everything and then converted it into this beautiful venmo app that you see in this video so with that said let's get back into the video shout out to JS Mastery all right now open up your command line and let's go ahead and what we're gonna do is I want you to just write npx clever programmer this is a clever programmer npm package that we have made and the benefit of this package is really that it actually gives you everything you need so we're giving away The Styling a bunch of the app assets and we just make the whole app really really simple for you all you have to do is just type in that command it will install it for you okay and once you're done installing it make sure that it's going to ask you hey which uh what's your email address so just pop in your email address and then after that it's going to ask you for your name and it's going to ask you for what project you would like to initialize so for example in this case we're building the venmo app so make sure to just initialize venmo it will initialize a whole bunch of helpful files for you so that we don't have to spend a bajillion years trying to build this app you know the styling will already be done we'll do the interesting more fun infuria slash web 3 solidity Parts okay is this really the focus of this video right so boom there we go it uh now it's installing it and setting it up on your computer it's getting the dependencies for you so this is the magic of when you set it up with npx clever programmer okay it's going to basically start the project and it's gonna automatically open it up for you okay if it's giving you some kind of error or whatever just understand that all we've done is we've cloned the repo put on your computer so you could point and click and kind of go inside of it as well if you wanted to okay so let's go ahead and now see what is happening all right now that the project is opened up what I want you to do is just open up the terminal and I want you to type in yarn start that will install start your server okay that'll start your project now just go ahead and I want you to open up your localhost 3000 okay and you could put it on the side of your computer like this all right so on the left hand side your server is running on the right hand side your app should be up and running so that's where you should be at and let's go to index.js okay and you can also go into to your app.js and you can see that this is a regular react file right pretty much vanilla except the only difference is really we've given you a lot of the styling all right so let's keep rocking and rolling here okay on the left hand side you will see in Source you have assets components and styles and normally you won't have assets or components like that's something we've created for you and given you and then Styles we've created extra styling for you as well okay so that's the structure so we're going to go into our app.js and we're going to delete everything in anything that's inside of that class name app div okay remove go ahead and remove everything so now your app should be this blank canvas we're going to get rid of that logo.svg as well we don't need that let's refresh and again your app should just be not giving you any errors but also not really showing you anything okay now inside of that Dave we're gonna basically just put in hello world and once you do that that is enough for this part we're already ready to get started with the web 3 and truffle and inferior part I hope you're excited let's just get to it alright so here we are now we're going to be getting onto the Truffle part okay we're going to be setting truffle up and we're going to be setting infuro up so let's go here now in the main directory what I want you to do is create a new folder okay and we're going to call it back end AKA blockchain part so in this case our back end part is really going to be our blockchain part AKA our smart contract part okay so let's go into our back end but what's cool about this when you're in the blockchain world is like you don't really need to deal with Firebase or uh it's funny I'm saying Firebase and a fire behind me but like you know your back end isn't the traditional mongodb or Firebase your back end is the blockchain okay that's where you're storing your your data majority of the times all right let's go ahead okay so let's go ahead and now I want you to type in truffle init okay um and before we actually do that do that let's go ahead and make sure we're in our C back end so go ahead and do CD back end for me once you're in there I want you to type in truffle init by the way quick thing if you don't have truffle installed put in this Command right here and that will install truffle for you and if that doesn't work Google it with that said let's keep on going okay so after you do truffle init it will pretty much set this up for you okay and kind of initialize the repository for you on the left hand side a couple of things should happen okay you should have this contracts part the migrations part and test part get built out and truffle config should start showing up so before your back end should have been empty but after doing this you should have these three folders plus that one file ready to go okay now inside of your contracts you have something called migrations okay so that's what's going to be there and then also you have a migration folder that will have your initial migration okay this is what you're going to be using pretty much to deploy your contracts afterwards as well so all of this information is pretty important now inside of your contracts you're going to create a new file and that's where we're actually going to create our smart contract okay so let's go ahead and call it transactions.soul dot Sol okay Sol is short for solidity and then we're just going to put in a little license here and we're going to say spdx okay Dash license and since this one is not licensed the identifier we're going to pass it is unlicensed okay and then that warning at the top you know is basically taken care of so you could just say hey it's unlicensed that's totally fine all right next up we're gonna go ahead and make a contract and we're going to call it transactions all right now that we got our transactions contract just we're just going to leave it at the blank right now okay and then what we're going to do is here's what I want you to do okay I want you to go ahead and get this extension truffle okay so at the bottom left you see that I have this truffle and extension okay right over here okay that's the extension that I want you to get all right so what you're going to do is go to your extensions you can also do command shift X or Ctrl shift X go into your extensions type in truffle and just go ahead and install truffle okay truffle for vs code this one right here and then once you have it installed go to your truffle extension okay I'm just gonna make your life really easy when you're developing this is really nice and what we're going to do is we're going to go ahead and hit connect to network and then it's going to ask you do you want to use the ganache service or you want to use inferior service or other the one we want to use is we want to use the inferior service right over here okay so go ahead choose inferior and then I want you to go ahead and choose sign in so let's go ahead click sign in and then just simply sign into your inferior account okay if you don't have an inferior account just make a new inferior account because you're going to need that for this app and excuse my dog she's a little crazy bulldog and she's wild so she'll be barking in the back but we'll ignore her all right here you have um this little error thing showing up you could ignore that it's not important here okay it pops up all the time but it doesn't really matter all right all this stuff pops up here and all I want you to do now is um simply just go scroll to the bottom and hit authorize okay now that that's done it says you are signed in you can now close this page so simply go ahead close this page okay and now at the top here it's going to ask you to put in the project name okay right right over Yonder boom right there okay so go ahead put in your project names I'm gonna just simply say uh uh venmo clone or whatever okay so let's go ahead and write that in venmo Clone all right and then hit enter and then we're gonna just make this project public because there's no reason to make it private okay and now you can see on the left hand side we can see inferior service showing up and now I'm gonna go to inferior.io and on here let's go ahead and click uh start innovating button okay so go ahead and click that and right when we click it you could see that we see that there's event McClone okay this is the one that we created from our command line little tool thing that popped up over here and now it says this project is active it was created today and boom okay this is good to go right now it should have zero requests okay and on the left hand side you could see that if you click your inferior service and then McClone you can see all the networks you have access to so mainnet you have access to quarterly rain can be rosben and then Layer Two you have access to all these other Main and test Nets okay so with that said you've done a wonderful job now we're gonna move on and we're gonna start working on the smart contract so let's get to that in the next part r right here we go now we're on the fun part we're gonna be making our own contract okay so let me take the photo away and I'll show you why I have that photo in just a second but let's go ahead and work on our smart contract here okay so let's go inside of transactions and I'm going to add in a very specific version of solidity here so we're going to go ahead and choose a specific version of solidity so I'm going to put a carrot and do 0.8.15 okay that's the version I want you to use and usually the first line of code in any solidity app is usually that pragma solidity blah blah put your version okay so go ahead and do that then inside of my contract I want to do a un256 and I want to have transaction count this variable here will be keeping track of how many total transactions we have at any given time all right let's keep going now just so you understand what I mean by this okay I'm going to bring this into the view so remember in our finished version of the app we'll have a transaction or a transfer and then we'll have multiple transactions so that transaction count will be keeping track of how many times the user for example sends a particular like sends transactions right so if we've sent five or ten transactions and all users have sent 10 transactions and the transaction count will be 10. so just keeping track Global track of the count of transactions okay the next step what we're going to do is we're going to create an event that will be fired when a transaction is made okay so for example we're going to say event and I'm going to say transfer and here's what I want transfer to do so I want to show who the transfer is from okay uh the receiver okay who received the transaction the amount of the transaction and the message of the transaction and just you can understand what this means from is going to be this address of the user that's logged in okay receiver is going to be who you're sending it to amount is going to be the amount that you want to send and then the message is going to be this right here okay but now when you're using uh languages like solidity or whatever you have to Define data types so I know that this is a string data type so I'm going to say string the amount I know is going to be an integer okay so I'm going to go ahead and say int all right now if you have a little bit of programming experience you might be like wait a minute qazi how the heck is amount uh int a uint by the way is unsigned integer meaning it could be negative and you might be like wait how the heck is an integer if this is 0.002 under the hood everything is being calculated in the smallest denominator in ethereum which is way so away is much smaller number so under the hood it's not actually um in decimals it's just showing you here in decimals because this is not in way okay so uh there's actually no float type in um solidity which is pretty interesting but yeah all right and then we're good with adding all of that stuff and the last thing we're gonna that in our event actually is the time stamp so that thing is the thing that's not visible right now so for example timestamp isn't showing up in anywhere uh in any of those okay so time stamp what we're doing is under the hood right when the user hits send we're gonna log that time so let's just say it's like you know it's 12 33 a.m and this dude is sending some money to his friend um for cleaning what kind of friend does he have that cleans at 12 33 a.m I don't know he's sending the friend some money for some okay we don't know what it is uh he maybe maybe gave him some food and now he's he's paying his friend at 12 33 am and that time stamp we're gonna log and it's gonna get log low key under the hood and we're gonna pop that in right there okay that is going to be attached to right when the user clicks send okay just to kind of give you a little insight onto what we're doing here all right now the next thing we're going to do is we're going to create a struct okay uh of the transaction that we will be storing on chain okay and um structs is kind of an ugly name and it makes things sound confusing but it's really just a structure or like a data type here and so we're just going to say hey when you see a transaction or a transfer this is the type of stuff it's going to have inside of it okay so expect it to have a sender expect it to have a receiver expect it to have an amount you know expect it to have a message and expect it to have a time stamp okay that's all we're saying here Saul the rest of what we're saying here is about these data types okay so the main thing I want you to notice is sender receiver amount message timestamp those are all the things that are happening here okay now what what is this other stuff addresses a specific data type inside of solidity when for wallets it understands it when you say address okay same thing for the receiver it's not just just the strength so it understands how dresses work underneath the hood all right and then amount is an INT string message is a string and then time stamp we're gonna make it a uh in 256. now you might be wondering uh why is this u in 256 and why is this int just by itself if you don't say 256 and you just use int like this by default it's actually in 256 okay so both of these are both of these here are actually in 256. okay so that's really the one thing I want to clarify here okay beautiful so now that we're done with that now we're going to create an array of those transactions okay so the strength the structure we make we're going to make an array out of that so let's go ahead I'm going to say transfer struct and let's go ahead and rename it and call it transfer struct the reason why we're going to call it that is such a very clear that it is a struct okay and then when you get better as a developer you could just call it transfer or you could call it transaction okay uh that should be fine now we're going to create a variable called transactions and here's the interesting part about this okay we're declaring a variable called transactions but we're saying that this variable here is going to be an array of transfer structs meaning it's probably going to look like an array okay an array and it's going to contain these transfer struct objects so it's going to basically contain you know if you're a JavaScript or react person imagine this so imagine um I have my receiver and the receiver 0x blah blah blah I have my sender Xerox blah blah I have my uh not sender I believe it's from one of those and then I have my uh let's say my message and it's hello okay and then you know and that's just like one transfer struck let's say okay and I know the transfer struct has some more stuff but let's just say for simplicity's sake this is one transfer struct and then there's more transfer structs so in a classic JavaScript scenario imagine that you really have an array of objects okay and more specifically the objects will represent the transfer struct meaning that whatever Keys the transfer struct has these objects will have and if you don't put that in if you have an object that doesn't have those keys it'll error out okay so uh there's a lot of type safety into the code and that way your code will have less bugs and errors but at the cost of like really being very verbose and explicit um up front cool okay so let's keep going now what we're going to do is we're going to make a function uh to add a transaction to the array to the blockchain okay with our struct so let's create this function and we're going to call it add to blockchain but really what this function is doing is adding you know essentially it's adding a transaction to the blockchain that's what we're doing we're gonna create a so the variable here that we're creating is called receiver all right so here the actual variable here is receiver okay that's the main thing these two are these two are think of them like data types okay address is a data type and payable is a special keyword that makes it so you could actually pay the receiver that's it okay let's keep going so address payable receiver then we're going to have an amount we're going to have our message as well okay so but for this one we're going to say string memory message don't ask me why you have to say memory if you don't write memory you'll get an error so just write memory string memory message okay all right then all we want to do is we want to say public meaning that even outside of the smart contract you should be able to actually call this function so we have access to it all right and um payable keyword means okay that the receiver is actually able to receive ether from the sender okay so something I said earlier but this is just to make it really verbose and clear for you and copilot wants to do a lot of stuff but we're going to skip that now here's what happens in this function when we are in this function what we want to do is when a user calls this function meaning you're calling your function add transaction right well the first thing I'm going to do is we want to increment the transaction count by one right that should be obvious it's like I'm adding a new transaction to the blockchain increment the the count of and the number of transactions okay and then what I want you to do is take the transactions array that I created earlier push a new uh transaction to it okay and all we're all we're pushing to that array is literally from my JavaScript World okay my JavaScript peeps you're literally just sending an object okay this object is going to be like uh sender Xerox something you know receiver Xerox something message hello whatever okay time stamp timestamp some Unix Unix timestamp okay so that's all you're sending okay so this over here uh is a Constructor transfer structure is a Constructor and once you pass it all of this information it's going to literally make an object for you at the end of the day that's all it's doing and message does thunder just in case you're wondering what it is you know when you're signing with metamask so like when you're doing this thing with metamask right where you're literally signing yeah that is what refers to the message dot sender okay so the dude that's logged in with metamask and hitting send and then hitting confirm it's pulling that dude's account address okay from message.sender now if you're wondering how it's pulling the receiver it's pulling okay for so this is the sender and then this guy who we're sending it to is the receiver okay the amount that we have okay wherever the amount is let's just set that set amount that's going to be the amount that it's pulling and then the message is whatever message you wrote in and the timestamp is like the exact moment you added it to the blockchain okay so that's why we're getting it from the special keyword block and this MSG is also a special keyword in solidity so both of these block and MSG is a special keyword okay my big head is blocking some of that stuff so there you go that's what I was showing you like that little transaction there is the amount okay now I'm going to hide it again because I like myself uh being huge like a big giant on the screen so I'm gonna make this small and I will hide it away from you and I'll just bring this back for now and let's keep going okay all right and then next up what we're gonna do is we're gonna omit the event we actually created earlier so we want to admit the transfer event we created okay so let's go ahead and just omit that event we're going to give it the sender receiver amount message block timestamp and all that good stuff it's the equivalent of doing the you know a console log let's say all right so let's keep going over here and we got our amount we got all of that okay I'm just gonna check if I'm on the right solidity version I am yep so there you go that's your emit event that you're gonna have there okay now we're gonna write a function to actually get all of the transactions from the blockchain so let's go ahead and do that so I'm going to call this function get all transactions and I'm going to give it a public View and we're going to return a transfer struck that's the data type we're going to return and we're going to actually return so think of like we're going to return an array of objects and the array of objects is going to be of type transfers or transactions okay and we're just going to put memory there because if you don't put that you get an error so just put it okay and then we're just going to return transactions at the end of the day and um yep and then we're gonna make another function and this function is going to get the number of transactions and we'll say get transaction count okay and again it's going to be a public function and it's a view so for review we're telling we're telling the blockchain hey there's no transaction happening here we're not going to be changing the data so you're not gonna don't you don't need to charge us here for anything it's just going to be a view and then public is so you can access it from outside returns is what data type and what specific things are we going to return so we're going to return an integer and then I can just go ahead and say return transaction count and that's about it so yeah and then lastly what I want to you know just explain really is the view keyword right that basically means that the function can only be used to view the data all right that's that's all that means all right and that means that no ether is needed to run this function okay that's something that I want to highlight to you with that said we are done with the contract part now we just sit back we watch the firework and it's time to deploy the contract let's go all right now that you've made the contract it's time to deploy your contract okay it would be kind of like if you had all this wood behind you but you never lit it on fire okay if you didn't do that what's the point of having a fireplace that's useless so when you have a contract there's no point to just having a contract it's like having a bunch of wood we've got to deploy it okay we gotta at the fire we gotta turn it into a fireplace and that's what makes it usable by everybody in the world including yourself so let's go and do that now so what I'm gonna do the first thing inside of contracts you see transaction here I'm gonna hover over it and I'm gonna right click okay I'm gonna right click and what that will allow me to do all right so now what we're gonna actually do is inside of our migrations folder we're going to create a new file okay so let's go ahead and let's create a new file and before we do that go into your one underscore initial migration copy everything inside of that and then I want you to go ahead make a new file 2004 deploy.js paste all of that and everywhere it says migrations we're going to change that with transactions okay so you could also do right click and rename all occurrences or you can just do this in this fancy way or you could use the shortcut command D which on Windows I believe might be control d that right there okay that should allow you to do that multiselect on everything let's keep going and now what we're going to do is we're going to right click on our transactions right here okay and I'm going to choose build contracts now if you're wondering how do I have this build contracts right here it's only possible you guys if you have this truffle extension okay if you don't have the Truffle extension okay this extension right over here if you don't have that the build contract right here will not show up okay so make sure you have it okay so we're going to hit build contracts now my contract has started building so we'll keep going through it okay it's going to take a second to build and here's what happened okay I just ran into a little bit of an error let's go ahead and I'm going to choose truffle for vs code so go click output and then here choose truffle for vs code so we can actually see what the error is okay and here I'm checking to find we're checking to find what the error is and it says hey there might be something you need to fix in truffle config so I'll show you what we need to do so first choose truffle for vs code scroll down until you can see the error and you can see the error says truffle is currently using soul uh solidity version 0.8.11 and it does not match what we have inside of our file right there so let's go ahead to our truffle config.js right here and fix this problem okay so let's go truffle config and scroll down to line 84ish and where it says version you see it says 0.8.11 go ahead and change that to 0.8.15 okay so we're going to go choose just put a 5 there let's hit save okay and now let's try to deploy this again and see if it works okay it's going through and let's see okay looks like we have a build folder now that's starting to show stuff so that's a really good sign and there we go you can see it says compiled successfully using Soul version 0.8.15 okay so our contract is now deploy uh sorry it's built now all we need to do is let's go ahead and right click on transactions and this time we're going to choose deploy contracts so let's choose that okay now here I make an error okay so I choose the robsten network but I don't want you to choose the Robson Network do not choose this choose Gorly okay so I want you to choose the gwarly network that's the one okay that's the one I want you to pick don't pick Robson just want to make that super super clear so in your case you should be picking you should be picking that guy right over Derek Worley once you click it it's going to ask you to paste your mnemonic now remember earlier in the video when you made your wallet with metamask that's when it gives your mnemonic it tells you to write it down so grab that mnemonic that it gave you and I want you to bring that here and paste it here okay so we're going to paste our mnemonic now and it's going to ask you to save it now you can save it anywhere you want okay so I'll just go to my own folder here and I'm just going to hit key dot end and there we go we've saved it and at the bottom you should see it's saying deploying contracts okay and your project name is going to be different than mine for you should say deploying contracts to venmo clone okay I just have to create another project because I was getting some errors or whatever but hopefully you won't be getting errors if you are also getting the same errors then it might actually help you to create a new project okay so just a little note for you and pretty soon this um deploying will be completed and it is okay so now that the deployment is completed it gives you this very important contract address you're going to need access to this so hover on to this and I want you to copy it okay this is a very important contract address and then I want you to go ahead and grab this contract address okay so let's go ahead and grab this contract address and what we're going to do is we're going to make in our source folder we're going to make a new folder and we're going to call it um we're gonna not a new file we're gonna call it make a new folder we'll call it utils okay and inside of utils I'm going to make constants and inside of there I'm going to save a new constant constant file it's going to be called constance.js and inside of this file we're going to make a contract address and we're going to paste the contract address in front of it now a little note for you uh just put const here I forgot to put that okay so just put const contract address and we'll come back to this file and we'll fill it fill it out completely okay all right so with that said right now you're doing great your contract is deployed so congratulations because that's a huge part of the process and at this point we're pretty much done with the smart contract blockchain part pretty much completely and now we're going to do the fun frontend part where we're going to connect to this back end and then now we're going to really make the app sing so I hope you're excited I'll see you in a second all right now what we're going to be building is going to be the nav bar okay so it's going to be the nav bar we're going to build for our project this is what it's going to look like so boom right there okay that's what it's going to look like right there so that's the target that's what we're building remember it's not built yet okay it's just a photo so I'm gonna leave that here as a target of what we're building or actually let's leave that here so that could be like a use as a reference point okay so now let's go ahead and build it together all right first thing I'm going to do I'm going to go inside of source okay inside there let's go into our app.js and inside my app uh what I want to do is let's go ahead and remove everything from the top and I'm going to say import Style from dot slash style slash app down module.css okay that's where a lot of the uh styling we've already written for you so it's in there go ahead and call the class we're going to use this a wrapper okay and we're gonna inside of our wrapper we're gonna put in our header and inside of our header we'll put in our nav bar okay now no navbar is going to show up so once I hit run on this we're gonna really when we do yarn start we're gonna get an error okay and the reason why we're getting in getting gonna get an error is because we never imported it okay so let me actually move this a little bit out of the way here as you can see a navbar is not defined so now what we want to do is in components you could actually see that we have created navbar inside of components right so we're just going to go ahead import that right over there import navbar from dot slash components slash navbar okay and now that it's imported let's go into our nav bar and we're not getting an error anymore let's build out our nav bar from scratch let's get in our navbar styles that we've already made and for this nav we're going to say navigation container for styles okay and then we're gonna make a container div inside and then inside of that we're going to use the logo image class logo container rather okay and then we go we run that and we get an error all right so let's go ahead we're getting a error here right this is not loading the logo we'll fix that in a second first let's just go ahead and give it a class name and we're going to say Styles dot logo image for the style on this okay and let's fix this source so we're going to change the source to dot dot slash assets slash venmo logo.svg still not loading okay so let's drag the assets folder and we'll move the assets folder inside of our public folder there we go and now we change it now we run and look at that venmo is showing up that is beautiful okay so let's continue all right now we're going to add in an actions container and we're going to say hello and then we're going to give it an accent color and this is where the user address will go so we're going to say hello comma user address okay and remember right we're mapping it to this one that's our reference point so we got that part now we got the hello Port okay and then we have the user address there now we're going to put a hand wave and last but not least we do need to put the image the circular image that we have so let's go ahead and do that okay so we're going to first get our down icon okay because we need that icon for right here okay so let's call our Chevron down icon let's give it a arrow down icon styling and let's make it a selfclosing tag okay now we're getting an error can't resolve hero icons so obviously what we need to do is we need to install this package right here and let's run it cool now it's showing up so you should have this package already installed when you do npx clever programmer you get all the dependencies installed by default so just make sure you add in the slash outline and then you should be good to go all right the last thing we need to add is the image so let's go and do styles.avatar container so I'll make a new div and then inside of this div we're going to put an image and this image we're going to give it Avatar image style make it a selfclosing tag as well and the source okay is going to be this specific Source right here at yecang dot me slash avatar.jpg okay you can get your image from wherever you want Yap is somebody who just works with us on the clever programmer team and so that's the image we're using you can use your image or anybody else's image right and boom look at that okay let's get to the end of this boom right if I show you this look at that right we started with that reference and we got pretty much a onetoone match so that is absolutely phenomenal we are done with our navbar uh and now it's time to move on and add our wallet connection let's go now what we want to work on is the metamask connect wallet functionality so basically we want to be able to do this thing okay where you it'll pop up connect with metamask It'll ask for your account you'll be able to hit next and then move on to the next part okay so let's go ahead and start working on this bad boy now there is no frontend part to this so just letting you know that there is a there this is going to be mostly a back end thing we're going to be doing for connecting to wallet because this front end is metamasks like default uh front end when you open metamask okay all right so make a new folder called context and you're going to make it inside of your source okay inside of this context I want you to hit new file and then in there we're going to put context.js all right go ahead and import use effect and we're going to put in use State and create contacts from react okay just like that and then go ahead and do import ethers from ethers because we're going to need access to that okay and let's go ahead and do export cons transaction context okay and create context so we're going to need access to all this data in our other files that's why we're creating this context here so we can do that all right we're going to create a transaction provider here which is going to take in children children is going to be the entire app and what I'm going to say is I'm going to hit return and I'm going to say transaction context context.provider and we're going to give it a value and right now we're going to leave the value kind of empty okay and we're just going to pass in children in between and make sure you have the tag saying transaction call context.provider okay that's what the tags should be saying all right let's go back yep let's go right there and in our index.js what we're going to do is let's go and do transaction Provider from dot slash contact slash context and uh we're gonna create a transaction provider in our index.js and wrap up the entire app inside of it okay that's what we're doing so make sure you put your app here transaction provider and import your transaction Provider from Context uh with that said let's go back to our context and we're gonna create we're gonna keep track of the current account and we're going to see if the current account is logged in or not okay the default state is just going to be a blank empty string we're going to have a function which is going to be check if wallet is connected it's going to be an async function okay and what we're going to do is we're going to create a try catch block here and under the catch we're just going to console log the error and in the try what I want to do is I want to say hey if ethereum does not exist here and you might be wondering where is ethereum coming from we're going to get we're going to destructure ethereum from window Windows a global JavaScript object that we have access to and if ethereum does not exist then return Please connect metamask that means metamask is not connected please install metamask that's what the error we want to say and then we're going to do is we're going to create accounts and we're going to await the ethereum request and the method is eth underscore request accounts and then we want to do is we want to say if the accounts length meaning if the accounts exists then set the first account as the main account so maybe you choose five accounts the first one you chose is the one that gets chosen because we can only choose one account and then we if no accounts are found we're just going to say no accounts found let's create a use effect hook that's going to fire off every single time the page refreshes and we're just going to run this function check if wallet is connected every single time the page refreshes okay then next up what we're going to do is we're going to create a connect wallet function all right now we're going to create this connect wallet function this is going to be pretty much copy paste so honestly you can copy paste there's really just going to be very very minimal difference from this function and the other one but this is more so just a little technicality okay so you're going to be writing the same thing that you just wrote okay so nothing really new here and then you could see that it popped up so I'll remove this from here you can see that it popped up the wallet and you can connect to it right so we can see it running we can see our connect functions running okay let's keep going and then we're going to set the current account to zero the only difference is we're going to do a window location reload this is just to kind of catch any edge cases and make sure there are no errors happening so just put in the window.location.reload you should be fine and let's keep going okay next up what we're going to do is we're going to throw a new error if there is an error okay and we're going to say no ethereum object found okay object um okay so make sure you pass in the connect wallet to your transaction context provider because now your entire app will have access to connect wallet function that you've made okay so let's go back to our navbar.jsx now we're going to start using all of this stuff that we got okay so let's go ahead and use it so let's make sure that okay everything is looking good here connect wallet ah we wanna not just get connect wallet but we also want to get access to the current account the the current user that's logged in so let's go ahead import transaction context from our context and let's get the use context hook as well from react and then we will use the context hook we'll pass in and we'll say hey we want to use our transaction context we created we're going to destructure our current account and connect wallet from that and then we want to wrap the entire app up in certain um in this conditional here in this turning operator okay so you want to say hey if the current account is logged in then show this otherwise showed that all right so I'm going to take essentially what is the home page I'm going to cut that bad boy and we're going to paste it in here because hey if the current account is logged in then show this okay otherwise show a button that says connect wallet okay so our connect buttons give it the styling of connect button and then on click we're going to say connect wallet all right and let's take a look at what's happening okay so let's open up our metamask here let's go to our metamask let's go to uh where it says connected let's click the collapsible Three Dots and let's disconnect okay so now that we disconnect let's refresh our page and you can see that it brings up the connect wallet again and if I remove the connect wallet you can see that there's a button right behind it alright so now I'm going to hit that next button right there and you can see I just got connected okay and basically everything that I'm doing is working okay beautiful so our check if wallet is connected fires off every single time we refresh the page so there you have it you did a fantastic job building this wallet connection so far next up we're going to shorten the addresses let's go and do that now the next thing we're going to be building is a shortener so we're going to take a big address turn it into a small one let's go ahead and do that so I've drawn this out for you here this is what it's we're going to be doing we're going to take an address that looks like this and we're going to turn it into that okay so let's go ahead and do that now so let's make a shortener and once we make that shortener then what we can do is we can actually show that user address right there otherwise this would be too big right and it wouldn't fit so let's go to where we have user address and I'm gonna change that and I'm going to go ahead and say current account okay so now you can actually see that our app is showing us this okay that's what you should be seeing right now because pulling it directly from the current account now what I want to do is let's go inside of my utils and in there I'm going to add shortenaddress.js and I'm going to say export const shorten address and it'll take in an address and here's what will what it will do okay so it'll we'll say first and then we'll create another variable called last so first we'll just take the first five uh strings so like 0x35d okay so we're going to put that and then last is just going to take the last four essentially okay and then we're just going to say first dot dot dot last all right so you got your first and last here let's go back and now we're gonna use this URL shortener or a wallet address shortener I mean on current account let's import our bad boy shorten address and make sure you import it from the right place okay so let's just go ahead import it from utils slash shorten address that's where we've put it and then we're just going to call our shortened address pass it our current account and we should be Gucci there we go look at that we got it right you could see it right over here and you can see that we have went from this to that beautiful so we're done with shortening stuff now we are going to work on our transaction form so the users could put in stuff and then you know be able to pay other people let's go all right now time to make our transaction form this is what you're going to be building by the end of this one okay so we're going to be building this forum now yes it looks ugly hideous but don't worry about that we're going to initially build it without styling and then we're gonna make it look pretty okay so don't worry about that I'm Gonna Leave This bad boy kind of like floating here for reference as we go through this um and yeah let's rock and roll so I'm gonna go into app.js okay and inside of here let's go ahead and um all right so I'm going to add in transaction form here okay if you don't have man container activity container make sure you add all of these here as well okay but transaction form as I'm going to be adding now obviously it's going to give an error it says transaction is not defined so at this point you know what the error is right you know what this means if you see that error clearly you didn't import something so just go ahead start your import process we're going to go ahead and do transaction form uh and we're going to grab it from our transaction form component that we've made now I want you to go ahead into your transaction form okay and uh all right so we have the transaction form here it should be pretty much empty let's go ahead and build it out now okay so we're going to grab a transaction. module.css all right so now that I've got my transaction styling let's go ahead I'm going to create a div and uh in here we're gonna say container okay and then we're going to grab make an H3 it's going to be form title and we're going to send payment and request it says style yells is not defined okay let me go ahead and fix that styles.form title there we go and now it's starting to show up okay so send payment slash request next up I'm going to create a form inside of there we're going to have a form container inside of there I'm gonna have a swap container and then we're going to add in our switch vertical icon and you'll see what this so This icon is this bad boy right here okay so just keep in mind this is what we're making okay this is a target so we got a form container we have a swap container right and inside of that we have a swap Icon now we're probably gonna write swap two Slash from okay so just keep remember this is our reference point okay let's go ahead and do styles.swap text and it's going to be swap two Slash from and now we can see it on our screen that's looking good okay let's keep going I'll put this here because I think this will be fine there not in the way of anything all right and then we're gonna create a form body here okay and then inside of there we're gonna add in a form input container okay and then we're going to give it an H4 and the H4 we're going to assist uh form input title okay and we're just gonna say two so who are you sending your money to right that's where that goes and then the next part we're going to be doing obviously is going to be this message part okay so that's going to be also an input the type is going to be text and we're going to have autocomplete false all right let's keep going for input container and I'll get rid of this move it over and this is going to be an H4 as well form input title and we're going to say amount and we're going to have input here okay and class name for this one is going to be form input and type is going to be a number okay so once you choose a number it will give you just make sure autocomplete is off on there and instead of amount we're going to send message and instead of that we're going to change it to text okay and then underneath that we're actually going to make our amount so let's go ahead and do form footer let's give it an H4 I'm going to say footer title is amount so there we go amount is showing up now all right and then we're gonna have a div here and we're going to put a footer container and then I'm going to put an amount container div inside of there and then I'm going to put an input container inside of that okay and we want to put a icon here currency dollar icon which is this icon right there okay and then we're going to do Styles dot dollar icon so now it's showing up on the screen you should be able to see it okay I'm going to get rid of this guy here for a second okay next up we want to make our we want to make this look a little bit better and then we want to make our send button so I'm going to paste the same input styling except we're going to change this to a number and there we go since we added our form input styling it fixed it and made it wider I'll hide myself here all right so now I've changed it to a number and then what I want to do is I want to create a button and this button is going to be sent okay and we're going to make it a send button that's the styling I'm going to give it okay now it's looking much better make it type submit and when it comes to our form you know this is what it's looking like right now that's about it okay for our form so if you got to this part great job you've done an amazing job now next up we're going to be working on the activity header let's go all right next up that right there is what we're gonna be building right now the activity header okay so there's gonna be a lot of fun to build and I hope you're going to learn a bunch of things out of this but with that said let's get to it let's start building that bad boy okay so I'll bring it right over here so you could have like a frame of reference here as we build it and let's go so I'm going to go into my app.js and I'm gonna hit import activity okay and then let's open up our tabs here and in files you can see I have a folder called activity and then I have activity card okay so let's go ahead and import that so I'm going to go ahead import activity card from dot slash components activity activity card okay all right so now it's been imported and now we're going to start building this out right over here close everything out all right so I'm going to pop in my activity card here okay pretty soon it will actually start showing up and I'll leave it just here as a reference so let's go into our activity card and now we're going to build it out from scratch okay so let's go ahead and import styles from Styles and activity module.css okay make sure you do dot dot slash dot dot because we have to go back out to directories okay then we're going to return a container and then inside of that div we're gonna have another div and just going to be a tab container okay and then in there we're going to put a P tag and we're going to have a tab title activity so that's going to be this part right over here where it says activity okay so boom right there it's showing up okay after activity we want to add an in a class name and we're going to do Styles dot navigation container okay inside of that we're going to add in navigation item and then we're going to do data Dash current so just so you understand what this data.current is that this is how it will give it this active styling over here okay so that's how we do that all right let's keep going I'm going to make a globe icon let's go ahead and import it from the top there's a globe icon from here icon slash react slash outline and then we're gonna go and do styles.navigation icon okay just like this and then let's create another div here we're going to give it a class name and I'm going to say navigation item and in here we're gonna put a user icon and just so you know what this icon will be it'll be this icon right over here right Globe icon is this guy here user icon is that guy okay so once we add in that icon let's go ahead and we're going to add another navigation item and this one is going to be a user group icon the third icon all right and you could see all of these being added here okay so let's go ahead and boom it's showing up that's great let's go all the way at the bottom we're gonna add another div and for this I'm going to give it a Styles and say feed list okay let's go to our index.js and here I'm going to remove import from indexed CSS so I'm going to remove the global styling that we were doing everywhere and I'm going to change that and we're going to go ahead and say go into our Styles and grab our global.css so now when we do that boom look at that the entire app styling is looking beautiful our form is looking beautiful so that Global styling there fixed almost everything okay so now in a full screen it look at how much better that looks right it's beautiful and like our Target that we had here is matching what we've built there so with that said we are done with this activity header part great freaking job and next up we're going to work on our transactions let's go quick thing that I want to highlight earlier when we created that send button the problem that was happening with that was it was like overflowing and doing all kinds of weird stuff so I just need you to go in your Styles and go into your transaction Styles transactions.module.css and we're just going to change something inside of our container so here for our container we're just going to make the width 400 pixels okay if you didn't have that already change it to 400 pixels and then you shouldn't have any problems whatsoever you should be good to go okay all right let's keep on going now so now our button looks really good our send button looks awesome no problems anymore okay let's now go to our context and get to work on setting up our smart contract that's the big main thing that we need to do now okay so we're gonna keep track of some states so let's just Define all of those here so the two address we're going to keep track of that state the amount we're going to keep track of that state as well all right so we're going to keep track of this amount State obviously right let's keep going yeah default it to zero because it's an amount it's a number it's not a string so we're not going to have it empty message we're going to leave the message blank to start off with okay we're going to keep track of our loading State and obviously in the start it's false it's not loading and uh we're gonna keep track of our transaction count because we want to know how many transactions we have okay and yep and by default we're not going to set it to zero or anything by default what we're actually going to do is we're going to pull it from local storage okay so that is a very clean way of doing it we're going to pull it from local storage uh so when a page refreshes or whatever by default we're going to pull it from local storage and then otherwise we're going to pull it dynamically okay now what we want to do is let's go down and we're going to check if transaction exists we're going to create this function and this is really a getter and Setter function that we're making here okay so let me write that down here it's going to be a getter and Setter function and what this function will really do is we want to get a transaction count so okay so this is gonna here's another way of saying this right get and set transaction count that's what this function really does so what we want to do is we want to get the transaction count and once we get it we want to set it in our local storage okay now where are we getting this transaction count from we're going to be getting this transaction count right from our back end our blockchain smart contract part all right so that's what we're that's what's really happening here okay so let's keep going with this function check if transaction exists we're going to go async on this bad boy and it's going to be a try catch and we're going to say hey if we have ethereum meaning if uh you know so this is saying if you have metamask installed then go ahead and do the following then we're going to go ahead and create transaction contract and we're going to create the ethereum contract now this is going to be a helper function we'll create in a second so don't worry when it gives you an error don't freak out not a big problem so let's go ahead and actually create this ethereum contract function now and really this is just a boilerplate code for connecting a smart contract that you've made on the blockchain side to your front end so we're just doing that connection part right now okay so let's go ahead and I'm going to set our provider and we're going to choose the metamask as our provider so we're going to say ethereum then we're going to get our signer and this is going to be our provider.getsigner so this is whoever's signing the contract meaning like the logged in user the metamask and then what we want to do is we want to get the transactions contract okay and so let's go to ether's contract and we need to give it our contract address okay we need to give it our contract address and we need to give it our contract API and we need to give it our signer and then we're going to return this transactions contract okay so now contract address and contract ABI those are things that we're going to go ahead and set it up so let's go and get on line three let's go ahead and import contract address from utils constants and then we're also going to go ahead and get let's go to our um let's see where we're at let's go to build so we're going to our backend blockchain part let's go to build and let's go to transaction and let's copy that so what we've copied here all right so what we've just copied is all of all of the contents inside of that transactions file okay so uh we're just going to create that same file inside of here okay so let's go and now paste all of that boom there we go so now that I've pasted it so just copy uh click right click on noodles right and you're just going to hit paste it's going to paste the transactions.json that we copied over earlier let's go to our constant.js and we're going to go ahead and say export const contract address so we get access to this and then we're gonna do the the following okay we're also going to import ABI inside of here from our transactions.json and we're going to export our API our contract API so we have access to it in our other files so make sure you do abi.abi at the end let's go to our uh con let's go to our context okay and inside of there let's pull contract address and contract ABI and now let's scroll down to our check if transaction exist function and here we're going to do the following okay let's go ahead and do current transaction count and we're going to await this and I'm going to say transaction contract dot transaction count okay or sorry get transaction count rather okay this is the function that we have on the blockchain side so I can show you that let's go to our backend let's go to our contracts let's go to our transactions here and boom you can see our get transaction count all right so we got the transaction count on our back end right that's what we're interfacing from our front end so that's freaking exciting because we're literally going from our front end going to our blockchain part using the blockchain solidity function to get the data retrieving that and then putting it out on the front end I mean I don't know that is pretty freaking cool like that's super super exciting right so that's why the away promise needs to happen because we're doing a bunch of stuff asynchronously here and then once we pull that bad boy we're gonna go ahead and in our local storage we're gonna set that item and we're going to say transaction count all right so now we got our current transaction count okay so we have our current transaction count which is we get our account first so then current transaction count becomes a number like let's say eight or something and then we on line 70 right we set in our local storage and we set the key with transaction count and we said the value to that okay so whatever that may be eight or five or whatever however many transactions have happened okay and uh that's looking really really solid to me okay and then now let's go to our you know use effect hook that we created earlier where we added check if wallet is connected now let's go ahead and add check if transactions exist so basically anytime we Refresh on our page that function should fire off and work and you could also you know check in your console log what it's returning and it'll show you it's returning like a number okay however many transactions you have like three or four or five or whatever okay so with that said um now the last part that we want to add to this is we want to fire off this use effect hook every single time transaction count changes and the cool part about this is whenever there's a new addition a new transaction that occurs your page will automatically refresh and show that transaction okay so that's what's happening great job on that now the next thing that we're going to add is the ability to send money send ethereum let's get to it all right time to send some money so let's get into it okay so let's go and add the ability to be able to send money okay this is going to be important and when I say money I mean ethereum so let's create a function we'll call it send transaction async okay and um here's what we're gonna do we're gonna add a try catch block here and if it's an error then obviously just show an error okay if it's not an error then try all right so here I'm gonna say hey if metamask is installed then I want you to go ahead and add in this transaction contract and create it okay so we're just going to create the transaction contract and then what I want to do is I want to have a parsed amount here okay and we're gonna do it with ether's utils and I'm going to parse the ether and I'm going to parse the amount that was passed so if the user gave us a certain amount we're just going to pass it in here so that utils up parse ether amount what that's really doing is if I go here online to a eth dash convert so just go to eat that can eat Dash converter.com and here if I put in like a small amount of eth like 0.001 it'll convert it to whey so it'll convert it to whatever way that is okay so that's really what that function is doing okay because remember there's no floating amounts there's only integers then I'm going to requests so I'm going to wait ethereum or metamask in this case and method is going to be send transaction and we're going to give it params params is going to be an array of object in this case and we're going to say we're going to give it a from address all right so here we go right so we put our gas just for a gas just put 0x5 to it all right so this basically right here 0x528 is just a short nice way of saying something like hey I'm I want to pay like 21 000 way or whatever in gas to just cover some basic amount of gas okay that's really what it is and then just choose value parseed amount so we got our from which is a current account which is this bad boy right here that's logged in the 2 is going to be whoever fills out the form or like whoever we're sending it to for the form uh we have we're just gonna pay this amount of gas every single time the value is going to be the parsed amount and then we're going to turn it into hack all right so that just converts it to a hexadecimal that's it but we don't really need to worry too much about it we're going to create a transaction hash and that's going to be from the transactions transaction contract and we're going to do dot add to blockchain okay so basically you know that's where we're doing you know Trend uh send transaction okay that's really what we're doing and we're gonna pass in our address to our parsed amount our message and then yeah that's pretty good okay those are all of the things that we're going to send then we're going to set is loading to True while that's sending and then we can say loading and then we're going to put a transaction hash all right now what we want to do is we want to await the transaction hash here and just do transaction hash.weight and then once we're done with that we're going to assist success transaction hash and then we want to set the loading to false because loading is done we were none waiting for it and transaction count at the end is going to be updated so now we're going to going to get the updated transaction count okay and then once we get that we're going to set the transaction count to whatever the new transaction count is and we're going to convert that into a number so it comes as like a big int or a big number so we just cast type Castle to to like a regular number and then we're fine and then we're just gonna do this window location reload thing to make our app more robust and then we're going to add an else here and I want to say you know if that doesn't work then No ethereum Object okay meaning like no matter mask or whatever and it doesn't work cool with that said we're done adding that send functionality now it's really just adding in the UI the beautiful front end for the form everything is ready to go and then we should be able to send money and see everything okay let's go ahead and do that now all right now the functionality we're going to add is really where we add real functionality to the form meaning that when you actually put in an address and you put in a message and you put an amount it will actually open up metamask and then ask for you to confirm and then you're actually able to send the transaction so that is the functionality that we will now add with that said let's get into it so let's get started from where we had left off we created our send transaction function now all we need to do is make sure that in our context we actually pass it so our the rest of our app has access to send transaction function so go ahead and do that and then I'm going to go into my transaction form and inside of my transaction form we're going to use our use context hook and get access to the transaction context and I'm going to destructure send transaction function from there set address to address to and set amount hook okay and the amount took and message set message Etc right so we we're just going to get access to kind of all of that stuff and we need to send that stuff over too so just make sure you copy all of that and you paste it here so you want to make sure that in your contacts you're actually passing all of that information right the set address to hook the address to set amount hook amount State message set message all of that okay so we're going to go ahead and do that okay cool now that we're doing this let's go ahead and make sure that we write our handle submit function okay and in this we're going to take the event okay and the first thing we're going to do is prevent default and what that does is it makes sure that you you don't refresh the page doesn't refresh once you hit submit and we're going to say hey if the address doesn't exist or amount doesn't exist all right so we're going to say if none of these exist then just do nothing okay just ignore that okay we only want this to work if those exist and so basically this is like a guard Clause that we're adding here and then uh if none of those are true then obviously we're going to send the transaction okay so the transaction is going to send when these things exist okay and then we're just gonna for the input for our Forum title we're just going to say value uh is the address to okay so that's the address to right here and we're going to say on change we're going to set the address to whatever you're typing in the two and then we're going to do the same thing for our message and then we're going to do the same thing for our amounts right now we're working on our message okay value on change same idea and then we're going to do the same thing for amount it's going to be literally the same pattern okay so let's go ahead and do that for amount on change set amount Target value okay good good old react stuff and if you're wondering yes yes my hair did change okay I went to get a haircut in between the shoot so shout out haircut gang if you saw this you know not most people will make it to this part but if you're one of the lucky few good job all right let's keep going let's wrap up this entire bad boy that we have written in a form and we're gonna add a handle submit to that form okay so the handles the function essentially that we created right here so this form is going to be looking for when you press that juicy send button when you send that send button when you send that center button I mean so when you click that send button your send transaction or whatever function will handle submit function is going to run okay but let me ask you is it going to run right now that this is empty I'll give you four seconds to answer that four three two one no it will not well the function will run but it won't send the transaction right because there's nothing here so that won't happen but if you have all of these filled out and then you hit send will it run I'll give you four seconds to answer that four three two one hopefully said yes and yes if you haven't filled out it will send so let's keep on rocking and rolling here and let's open up our console on the right hand side okay and then we're gonna go to our code um just on change with the capital c okay so that that's where the error was coming from so just make sure it's a Capital C that you have cool all right now it looks like it's working now let's go ahead and type in our to address ignore my dog she's a little baby bulldog she's wild all right there we go we got our two address sometimes you know I order ubereats they show up at the door to drop the food and then she just starts barking and I'm sick and tired of having to edit that out so you guys are just Gonna Hear What I Hear at my house every day so if you got to this dog barking part feel free to comment that as well and um yeah let's write our message have a great day and we're gonna put in some amount and we're gonna hit send and now notice that it is opening up Mata mask how beautiful is that let's hit confirm there we go metamask is popping up I will make myself tiny here so you can see confirm boom look at that and the loading transaction hash is showing up to that is nice right that was real clean and there the transaction has taken place right and if we go to the other account or resent this money it looks like we got the eth so we are now able to send money I mean 99.9 of the functionality of our venmo app is complete you know functionality wise but now we still got to make sure that we render the recent activity and we show all that stuff so I hope this was exciting to you I hope this enlightened you and with that said let's keep on rocking and rolling next up the component we're going to make is this guy right over here okay this is going to be your recent activity slash recent transactions component so you know what who's making the recent uh transactions right this is what you see on venmo as well so let's go ahead and work on that component now get rid of this here and let's go I'm going to pop this in the purple thing in the back is not really what you're actually going to be adding okay that's just like interesting looking padding that I added but this is the part that you're actually going to be building yeah I just wanted to make sure like I don't want money to make just make it stand out Okay cool so let's go ahead and work on this now all right let's go into our activitycard.jsx and inside of my activity card let's go and import my contacts from react and then the next thing I want to do is I'm going to get my transaction context from my context file will get shortened address from utils okay it's going to be slash util slash shorten address yep just like that and then we're going to pull transactions in current account from our context let's go and get all transactions inside of our context let's go and get all of the transactions so it's going to be async it's going to be a try catch here we're going to console log the error and then we're going to say hey if metamask is installed I want you to create the transaction contract and we're going to create the ethereum contract once that's done we're going to get the transactions okay so we're going to say const available transactions and we're just going to await the transaction contract and we're going to call the get all transactions function which is on our back end okay so in our blockchain part so if we go to our transactions.sol you can see we have get all transactions right there and it's a view function and it Returns the transactions we're gonna say get us these structured transactions all right so basically structured transactions all we're doing is we're transforming the data that we're getting and so I'll kind of explain to you what I mean by that right let's go ahead and write this um okay so we are now just going to pull our address to from there this is the um transaction receiver okay that's the who we're sending it to okay next up we're going to get our address from and that's a transaction sender and then we have our amount or actually in this case let's just do our timestamp and uh let's call our time ago that we got imported or added earlier all right and we're going to say dot format okay and I'm going to create a new date in here and we're just going to put in the transaction okay dot timestamp so each transaction will have a timestamp from the blockchain and I believe the blockchain puts their transactions in Unix all right so all right so there we go you heard that confirmation in there uh our developer confirmed with us that it is UNIX our developer being your boy Kevin um and basically if you pass it that Unix right and you give it as a number and uh we pass it to new date all right so what what the what the multiplied by a thousand Shenanigans is because you're getting a you okay here it's annoying you don't really need to worry about it but I'll tell you anyways you're getting Unix in milliseconds so in order to turn it into Unix in seconds you multiply that bad boy by a thousand now it turns into Unix seconds you give the unit seconds to your new date time object it turns it into a daytime object then you call time ago format on that daytime object and it knows how to turn it into a time ago naturally you know written language kind of like here where you're seeing a you know 23 minutes right there or 31 seconds right there that's what time ago does okay there we go all right so we're going to say comma mini here all right the mini is a time ago thing so you can give it mini so that means that it's instead of minutes or mins it's going to say m or s for seconds okay there we go and then message we will call it transaction.message okay so now that it's uh restructured like this or AKA transformed you won't have to Loop through and go transaction dot receiver transaction.sender you can actually just Loop through and go dot address to dot address from dot timestamp so it'll be much cleaner so your code won't look like transaction.transaction dot receiver pass in your amount will parse ins and we will give it the transaction amount in HEX and we will divide it by 10 to the power of 18. so if you're looking at this and you're like what kind of ninjitsu garbage is this um I'll explain real quick we are going my friend from way this is like the ugly stuff about blockchain I don't know why they do all this trash like this development experience is going to get better at some point but that's what it is right now it's in way and we're converting it to eth so remember when we went from like a really tiny 0.002 number and we turn it to like a 10 billion way number when we went to ethconverter.com well now for the front end we got to go from way back into eth and show it to the user okay so we're reversing that all right hope that makes sense okay let's keep on rocking and rolling all right and then we're gonna import time ago from JavaScript time ago and we will also import en from Joshua time ago Locale okay and then we're going to add that Locale to the time ago and we'll say time ago and we'll make it a uh enus okay so then it'll look like American time zones okay um and time ago if you're looking for it right in your package.json we have it either added and if we don't have it added we can just go ahead and install it now okay so in our command line we're going to go ahead and say npmi and we're going to go ahead and say JavaScript and just do dash time ago beautiful hit enter and now it will install it all right so basically now guys we have it installed okay and once it's installed your time ago is going to work okay let's keep on going through this all right let's go down and we're going to add our set Trend we use our set transactions hook that we got earlier okay or actually let's define it here so I'm going to say transactions and set transactions and in the start is going to be an empty array okay it's going to be an empty array and then what we're going to do is we're going to set the transactions to structure transactions uh and else we're going to say No ethereum Object okay and in our context provider make sure you also export this value so we're going to say transactions let's pass it to our app so we have access to transactions everywhere else in the app now inside of our activity card you can see that we're extracting transactions all right guys so there we go okay so now transactions will make more sense right because we're pulling it out because we actually have access to it and now this feed list that we have inside of that feed list we're going to all right so we're going to go ahead and do transactions.nap and now we just want to Loop through and render those transactions out this is like mainly the front end part here okay so we're gonna go ahead and destructure an ID and address from our timestamp our message our address from all right so we destructured all of this stuff id address from timestamp message address to Etc um and then we're going to also get the index okay okay so we got this right now We're looping through this and now let's go and render this out so I'm going to do an implicit return here right arrow and then parentheses is an implicit return okay so there we go now class name so key is going to be the index right that's why we pull the index when we were looping and then we want to give it a class name a feed item for this here class name here we're going to give it a styles.avatar container okay and we're going to give it an image and it's going to be an avatar image and for Source we're going to Generate random Avatar all right guys so now you know Generate random Avatar obviously doesn't exist but we're going to go ahead and uh create that now so let's go ahead and do Generate random Avatar and this function it's going to work in the following way we're going to say random Avatar and I'm going to randomly pick a number between one and a thousand okay I'm going to be using this as my seed number and we're gonna use this die spare API which is very nice okay and um we're going to pop in the random Avatar that's how we're getting this by the way this is using the uh die spare API okay that's how we're getting all of this and how it works is you give it a random seed so we're just going to give it a random Avatar plus current account and we're gonna say um dot SVG at the end of it okay and um there we go all right so now it will generate a random Avatar every single time and make sure we're going to create another div and this one is going to be feed details so the point of this is so we can actually see the details part okay so here we have uh you know this this uh feed details is going to be obviously the details part that we're going to be adding to this okay okay and then we're gonna have e a feed author that's where we're gonna put the wallet and shortened address so there we go we got the shortened address so we're going to put the shortened from address and then we're going to put the shortened to address so that will say you know from and then it'll say two okay so there we go that's very nice and then what we want to do is we want to add a span tag here and we want to do created at so this is going to be our timestamp here which is 23 minutes or 31 seconds Etc and we're gonna put our time stamp there okay right here we're going to put a globe icon right next to it just like this so that's why we're doing this globe okay and let's go class name we're gonna go Styles dot feed author or sorry dot feed body in this case actually and for the feed body we're going to add in a message so this is the message like have a great day or thanks for the ether all right perfect uh all right let's make another div and for this one I'm going to give it the feed CTA so this is going to be the call to action or these buttons like like and comment just like how we have on venmo and we're going to give it a heart icon and we're going to give it a like icon for that one and for the next one we're going to give it and just so you could see right there we go that's the heart icon so I'll leave this here so you can kind of see the heart icon and the other icon or actually let's put it here why not so you can see it okay um so we got the like icon and then we got the comment icon all right let's go ahead and refresh our app let's see here actually let's go to our activity card or sorry let's go to our context here and inside of our context I'm going to go to around line 47 where in my check if wallet is connected function and we're gonna get access to all of our transactions okay so let's call that function get all transactions all right and let's just make sure I'm in a full screen and let's check here if it's pulling it through it's giving us an error it says cannot read undefined okay so hold on let's see what's going on here all right let's look for it all right so it was a tight it's actually a typo here so amount dot underscore hex it's amount dot underscore hex on line 140. so that fixed it there we go we're getting all the transactions and our transactions are showing up I mean that is nice that looks beautiful okay that looks great and you can see oh wow you can see right address from you can see address true the amount sent message and time stamp and all of that is showing up here so this is really really good so far let's go to our account one and we're gonna copy okay I'm going to paste the account two's address so we can send them the money we'll put in a message thanks for the ether there we go and we will put in uh some eth and let's go down and send it let's hit confirm Lo it says loading so you could see that right away okay let me hide myself so you can see loading right away there we go and once the loading is done we could speed it up right once the loading is done boom right there there you go now the transaction is showing up how freaking beautiful is that that is fantastic so great work on that so far that is wonderful and with that said we're done with this part at this point we're pretty much done with the entire app we're just gonna put the finishing touches and we're good to go so I'll see you in just a second all right so now we're gonna pretty much just be demoing the app but you might have noticed that I have this add thing here now this is pretty much just react I'm not gonna go ahead and build this out it's gonna be a challenge for you to build out and add to this app if you get stuck you can always just check out to the main branch because if you did npx clever programmer right for this project you can check out the the main branch that always has the full solution right now you're on the CLI starter Branch so you are doing this from scratch yourself okay so if you can always switch there and then code um or sorry find the solution but I would say you know everything you need to know at this point to be able to put this together okay or make a ad looking thing similar to this and you should give it a try okay you already have the assets and everything like that so I'm just going to go ahead and demo the rest of the app so like let's just play around with the app right and let's just make sure that it works I'm going to go right here I will click into account one I'll try to send some transactions over to another account let's go ahead and refresh the page you can see the avatars change right the logos the random generated avatars have changed we're pulling in the transactions the time stamps or the transactions are showing up I'll put in a new address here we'll put in a message and then we're going to go ahead and put in the amount let's see if it works with Emojis okay so I'll put in an emoji here ah no Emoji showed up oh well let's hit send and let's go ahead and hit confirm there we go we'll go ahead ahead and hit confirm and look at that it's loading loading loading loading right and let's see okay and account three or account two yep the money has gone and without even refreshing the page you can see that it says 26 seconds ago thanks for dinner all right so there you go that is your entire app so with that said I really really freaking hope that you enjoyed building this from scratch I hope you get to deploy it I hope you you know share in the comments that you did it I mean I'm really excited that you were able to follow along build this you should be very proud of yourself if you enjoyed this video smash that like button turn it white turn it blue depending on if you're using dark mode or light mode on your YouTube subscribe to the goddamn Channel I love your beautiful face this is Causey and as always I'll see you in the next video
