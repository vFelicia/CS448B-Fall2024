With timestamps:

00:01 - all right folks today we got an exciting
00:04 - video ahead large language models as is
00:08 - the end of programming this is a talk by
00:11 - Dr Matt Welsh that took place at
00:16 - cs50 I've been wanting to watch this
00:18 - video for a while but I was holding
00:20 - myself off from watching it because I
00:22 - want to watch it with you guys and react
00:24 - to it with you guys because I think this
00:27 - is going to be amazing so I'm really
00:28 - excited to watch it so it's going to be
00:30 - real time we're going to watch it
00:32 - together and I'm going to break down my
00:33 - thoughts
00:34 - on whether the end of programming is
00:37 - here or not and what my thoughts are on
00:39 - that so with that said let's just jump
00:40 - right into it and before we begin I do
00:44 - want to let you know that if you want to
00:47 - learn how to build apps with Chad GPT
00:51 - and Ai and learn how to use that to make
00:53 - money in as little as eight weeks with
00:56 - those skills like a bunch of my students
00:58 - have like Naza who's in the course right
01:02 - now that within 30 minutes of joining he
01:04 - actually built his first app so if you
01:05 - want to be able to learn those types of
01:07 - things I put together a free training
01:09 - for you where I'll give you three AI SAS
01:13 - app ideas that you could actually build
01:15 - this week I'll also show you the best
01:19 - ways where you can build an app
01:21 - production ready app that would have
01:23 - taken people months and how you could
01:25 - actually do that within a couple of
01:28 - days all of that stuff and more in the
01:31 - free training that I've put together for
01:32 - you so go ahead click the link below and
01:34 - sign up for that free training with that
01:36 - said let's
01:38 - continue so I'm here to tell you that
01:42 - the field of computer science is
01:47 - doomed that's a banger okay um and and I
01:52 - actually kind of mean this although I'm
01:53 - going to put it in somewhat humorous
01:55 - terms that uh if you think about
01:58 - computer science what is the field about
02:00 - what does it mean where did it before he
02:02 - even continues I just want to add
02:05 - here like let's see where he's going to
02:07 - go with it right but look at that
02:10 - translating ideas into program that's
02:14 - what computer science has always been
02:17 - about and so if you go back in the day
02:20 - before it was playing with logic gates
02:22 - directly then we went to a higher level
02:25 - language which was like assembly and
02:28 - then after assembly
02:30 - we got higher level languages like Java
02:34 - and then we started getting languages
02:36 - like JavaScript and Python and so if you
02:40 - look we kept going higher and higher
02:42 - level than bits and
02:44 - bytes so just just like just pure
02:48 - sheer
02:51 - logic think through that think through
02:54 - the evolution of vehicles and Technology
02:57 - automotive technology you
03:01 - had people
03:03 - walking then you had people probably
03:06 - trying to ride a [ __ ] Turtle
03:07 - realizing you can't ride it [ __ ]
03:09 - somebody's probably tried to ride a
03:10 - cheetah and lions and they died and
03:12 - somebody tried to ride a rhinocerus and
03:14 - died and finally they figured out that
03:16 - horse is the thing that you can ride
03:18 - like how insane do you have to be right
03:20 - to try that like who the [ __ ] was the
03:21 - first person to discover that a horse
03:23 - could be rode and trained like so many
03:26 - people died probably just trying to
03:28 - figure that out and then you had horses
03:31 - and then you had the next level up which
03:34 - ended up becoming like these carriages
03:36 - you could just sit inside the carriage
03:37 - while the horse dragged it and then
03:40 - horsepower and the thought of the
03:42 - carriages and the horses and they're
03:43 - like what if we could just turn it where
03:44 - it doesn't even need a horse and then it
03:46 - turned into Automobiles and then
03:48 - automobiles were like this great thing
03:50 - and then we discovered I don't know what
03:52 - the order of it is right but like we
03:53 - discovered trains at some point and we
03:55 - figured out airplanes at some point and
03:56 - we just figured out faster and faster
03:58 - and better travel
04:01 - before you have to swim and they figured
04:02 - out boats and so I just think about it
04:04 - like that logic gates assembly
04:07 - JavaScript
04:09 - AI right and the idea of AI is turning
04:13 - natural language ideas into programs so
04:16 - that's just what I'm thinking let's keep
04:20 - going come from what is it what's the
04:23 - core idea of it it's the idea of taking
04:26 - an idea an algorithm or a concept or a
04:28 - data structure and translating it into a
04:31 - program that can generally be run by
04:34 - like a Von noyman architecture machine
04:36 - right okay so that's computer science in
04:38 - a
04:39 - nutshell the problem is that um the the
04:45 - goal of Cs has always had this kind of
04:48 - core fundamental assumption or Axiom
04:52 - that is that the programs that we're all
04:54 - talking about here have been implemented
04:57 - maintained and have to be under
04:59 - understood by
05:01 - humans right that if I print out the
05:03 - code for a
05:05 - program a human some human maybe not
05:07 - everyone but at least maybe the person
05:09 - who wrote it if not someone else can
05:12 - understand
05:13 - it now here's humans suck at all three
05:16 - of these things we're terrible at
05:18 - writing programs we're terrible at
05:20 - maintaining them and we're absolutely
05:21 - terrible at understanding
05:23 - them so what does that really mean for
05:27 - the
05:28 - field so I want to make this claim that
05:32 - 50 years of research into programming
05:36 - languages has done effectively
05:39 - nothing to solve this
05:41 - problem we've been at this for a long
05:44 - time now 50 years is a long time and we
05:47 - keep inventing new languages and new
05:48 - programming Concepts and new
05:50 - abstractions and new data types and new
05:52 - proof method
05:55 - methodologies
05:57 - but so what does this mean this means
06:00 - that remember before we had
06:02 - JavaScript we had Java right and we had
06:05 - all these other languages we had
06:06 - assembly and then it was like okay we
06:08 - need to take assembly and make it easier
06:10 - so humans can write a easier if then
06:13 - statement than figuring out where to
06:15 - allocate memory for this if Den
06:19 - statement and so we got higher level and
06:21 - then it became
06:23 - easier and then we went even more higher
06:26 - level right with JavaScript and python
06:27 - Etc but basically his point is that th
06:31 - that 50 years has effectively done
06:34 - nothing we got typescript and we got
06:37 - react to make JavaScript easier and then
06:40 - we got next to even make that easier and
06:42 - then there's a framework for every
06:45 - single thing angular and while these are
06:49 - leaps and incremental improvements and
06:52 - it does make programming easier these
06:54 - are not Quantum
06:57 - leaps I think that's what he's trying to
06:59 - say here particularly right no amount of
07:03 - improvement to type systems debugging
07:05 - static analysis lynches or documentation
07:06 - is going to magically solve this problem
07:09 - is the idea here new solve this problem
07:12 - and I don't think another 50 years is
07:14 - going to solve
07:15 - it I think we've this idea of building
07:20 - automated tools to help humans write
07:22 - better software has played itself out
07:27 - valid now if you disagree with me let's
07:29 - just take a look at kind of the history
07:31 - here so let's rewind the clock all the
07:33 - way back to 1957 this is Conway's Game
07:36 - of Life implemented in Fortran I don't
07:38 - remember which dialect of Fortran this
07:40 - is but you know Fortran came about in
07:41 - about
07:44 - 1957 I I just claim this is really hard
07:46 - to understand
07:49 - I yeah that
07:52 - um let me see if I can try to understand
07:55 - this so do something 200 times between
07:58 - the range of 1 and
08:01 - 10,000 I don't know if that's right or
08:04 - not call off Tech if CD 7. eq. one4 go
08:11 - to 300 holy [ __ ] yeah I'm I'm lost
08:14 - there's something like database type
08:17 - that I
08:18 - see uh
08:20 - here database type yeah I'm kind of lost
08:24 - I mean I I see if and else if and else
08:26 - and then that has a nested if and all
08:28 - that and then continue but yeah it's
08:31 - real real hard to understand what's
08:33 - happening and I imagine it's something
08:34 - you're kind of doing at a pretty low
08:38 - level I I just claim this is really hard
08:40 - to understand I I claim that you can't
08:43 - look at this and unless you had some
08:44 - idea of the intent of the programmer
08:46 - what the hell does this do you could
08:48 - work it out you could spend some time
08:50 - reading it you could probably understand
08:52 - it with some effort but it's not trivial
08:54 - it's not
08:55 - straightforward yeah his point is that
08:59 - regardless of how nicely the code is
09:01 - written it still takes time to
09:04 - understand the logic of
09:05 - it and how it's working so there's still
09:08 - a lot of computational processing
09:10 - required for our brains and our brains
09:13 - aren't very good at that for humans our
09:14 - brain strength is creative
09:17 - thinking computers are really good at
09:20 - that okay so we tried to make program by
09:23 - that I me meant programming and logic
09:26 - programming easier we came up with
09:27 - something called basic in 19
09:29 - 64 this is not the original basic again
09:32 - it's had many dialects because obviously
09:33 - the first one wasn't good enough we had
09:35 - to keep improving the language that [ __ ]
09:36 - looks
09:38 - nasty this is the same program in
09:41 - basic I don't think this is any easier
09:43 - to
09:44 - understand okay I could spend some time
09:47 - reading it and convince myself that it
09:48 - does a certain thing but it's quite
09:50 - challenging to get
09:53 - so that is nasty if I if I had to start
09:55 - programming like that I would be pretty
09:58 - offut by
10:00 - programming then we came up with
10:03 - APL this is Conway's Game of Life and
10:07 - APL I would say raise your hand if you
10:09 - understand this but I know there's
10:10 - probably a few people in the audience
10:11 - who
10:13 - do I don't right this is a programming
10:16 - language so complex you needed a special
10:18 - keyboard to type it okay but this is
10:21 - what we
10:22 - thought was the practice of developing
10:24 - programming languages back in the 60s
10:27 - was this certainly a doesn't do the job
10:30 - all right well I've been talking about
10:32 - stuff that's kind of old fashioned what
10:33 - about the the new hotness let's talk
10:35 - about rust everybody's programming in
10:37 - Rust it's the latest and greatest thing
10:39 - since sliced bread I spent two years
10:40 - running engineering at a startup that
10:42 - was completely rust based I ran a big
10:43 - team full of rust developers I actually
10:45 - learned rust myself kind of this is the
10:48 - same program in Rust I don't make heads
10:49 - or
10:52 - taals yeah so basically he's like I'm
10:55 - not making heads or tails of this so he
10:57 - also has similar problem problem with
10:59 - this and yeah I mean even though you got
11:02 - some functions that make things nicer
11:04 - right you got functional programming you
11:06 - got a filter you're mapping through
11:07 - things and you got something happening
11:10 - here and you got a you know function
11:13 - called generation and you have it
11:16 - returns a colony class type or Colony
11:19 - type something along those lines like
11:21 - this here returns a
11:22 - hashmap and so we have somewhat
11:26 - understanding of this like we're making
11:28 - a new hash M here but do I really know
11:31 - what every single thing is happening and
11:33 - if I try to figure it out it would take
11:34 - a long time you know like the [ __ ] is
11:37 - going on here bro asterisk and sense.
11:41 - entry like what is
11:43 - that
11:45 - um and yeah I mean I have not really
11:48 - played around with rust but like you
11:50 - could there's some Java scriptin to it
11:54 - and a little bit of how it's written or
11:56 - some Ruess into it but
11:59 - ultimately it's still like hard to
12:01 - understand of
12:03 - this it is incredibly hard to write
12:07 - programs that are easy to understand
12:09 - easy to maintain easy to reason about
12:12 - okay so that's the kind of
12:15 - state-of-the-art this is where we've
12:16 - gotten in 50 years from Fortran to this
12:18 - and I just want to make the claim that
12:19 - this is not this is not going to work
12:22 - okay we're done game over so what's next
12:25 - I love this guy well this is how I write
12:27 - code today let's go
12:30 - this is a prompt passed to the GPT for I
12:34 - get so much [ __ ] hate if I showed
12:38 - you let's go to my Instagram and I just
12:40 - want to show you the hate I get like
12:41 - look at this this is a post I made where
12:43 - I said programming will be dead soon and
12:45 - I said 2028 now it might be 2032 2035
12:50 - but the idea is that I do think that
12:53 - coding as we know it is going to be dead
12:54 - and it's going to be something different
12:56 - meaning that it might turn more into
12:58 - prom engineering and idea generation and
13:00 - like you could see the hate that I got
13:02 - right influencers what you influencers
13:04 - get by creating unnecessary chaos among
13:06 - the community you guys are screaming
13:08 - like if you don't know or don't follow
13:10 - this you will be dead this video is a
13:13 - reason to unfollow you let's go look at
13:15 - find all the nasty negative comments God
13:19 - damn this is so untrue and very
13:21 - misleading so true unfollowed with
13:24 - pleasure LOL and the list just goes on
13:27 - right I made another post talking about
13:29 - all the negative
13:30 - comments that we got on this and so much
13:34 - hate and here's what I have to say to
13:36 - that right you can choose to be uh what
13:40 - do they call it you could choose to be
13:42 - um duck and put your head in the sand
13:46 - and just mute everything out and just be
13:47 - like everything is going to be fine but
13:49 - here's the thing all these programmers
13:51 - that are cuddled up in a circle jerk
13:53 - right now crying in my comment section
13:56 - of my posts telling me that they're
13:59 - unfollowing Me by leaving a comment and
14:02 - then and then probably unfollowing or
14:04 - probably not even unfollowing still
14:05 - following so they could just watch from
14:06 - the distance and [ __ ]
14:08 - hate here's the
14:10 - thing that's coping mechanism kicking in
14:15 - hard and I'm not trying to spread my
14:18 - idea isn't to spread chaos and fear so
14:22 - everybody just frightened is like oh
14:24 - [ __ ] I'm just mentioning the reality bro
14:26 - like this is what is happen
14:29 - happening this is how I'm writing my
14:31 - [ __ ] code I me I built a production
14:36 - ready app last month in one month with
14:40 - 100 to 150 hours of coding all by myself
14:44 - and that was something that before I
14:45 - would have had to pay three to six
14:47 - developers to do over 3 months and paid
14:48 - 60 Grand and I know because I've done
14:51 - that if you look at my
14:54 - channel oh the guy doesn't does this guy
14:57 - know really what he's talking talking
14:59 - about this this really know what he's
15:01 - talking about look at this I literally
15:05 - every [ __ ] day would build these apps
15:07 - who else do you know is building these
15:08 - app for 6 hours 8 hours 10 hours in a
15:10 - row we have so many apps that we've
15:12 - built and these were live We Built these
15:15 - live these aren't even all the other
15:17 - recorded videos that we've done so
15:20 - like it's not like I'm I'm building
15:22 - software for the first
15:24 - time and just some random influencer
15:27 - yeah there's ton of [ __ ] random
15:28 - influencers but like bro like look at
15:31 - who's talking to you I've been doing
15:32 - this for 7 to 8 years my first year in
15:35 - coding I learned it started making 100
15:37 - Grand a year and then I kept scaling it
15:40 - from there so it's like I understand
15:42 - coding I get what you guys are saying I
15:44 - understand now let me address the hate
15:46 - too the the reason why I'm getting that
15:48 - hate is because people are scared and
15:51 - Afraid and maybe I'm leaning into it way
15:53 - too [ __ ] hard and maybe I need to
15:55 - change the tonality and maybe show more
15:57 - compassion but I'm trying to wake you
15:59 - the [ __ ] up because if you are not
16:02 - listening you're going to get wrecked
16:04 - and my point is you need to learn the
16:06 - new technologies and the new way of
16:08 - doing things so if you're not doing this
16:10 - meaning going and talking to Chad GPT to
16:12 - build out your programs and working with
16:14 - it or know how to do that you're [ __ ]
16:17 - behind here's a tweet by amjed mad the
16:22 - founder of
16:23 - repet okay repet just in case you don't
16:25 - know
16:27 - it and in amount of people are using it
16:29 - it's a valuation of this company is at a
16:31 - billion dollars it's a pretty big
16:33 - company and he's a founder of this
16:34 - company and he wrote this tweet on May
16:38 - 18th at a hackathon where a winner and
16:41 - this tweet got 1.2 million views right
16:44 - at hackathon where a winner is non-
16:46 - Technic a non-technical PM product
16:48 - manager and her work powered by repet
16:51 - plus AI is more technically impressive
16:53 - than teams of Engineers was surprised at
16:56 - first but it struck me that PMS must be
16:58 - exceptional prompting after all that is
17:01 - their
17:02 - job so I'm not telling you some random
17:07 - Theory stuff this is
17:10 - happening 9 months ago or eight months
17:13 - ago whatever whenever you're watching
17:15 - this it's January 2024 right
17:18 - now this is happening this is the truth
17:21 - this is the reality the person that won
17:24 - is not technical do you understand that
17:27 - the people that are freaking the [ __ ]
17:28 - out right now all technical people so
17:30 - either you can go into coping mechanism
17:32 - and regress and die off after a couple
17:34 - of years get replaced by these product
17:36 - managers who will output five times you
17:38 - don't need you will do it for sense and
17:41 - you'll be sitting there [ __ ] broke
17:42 - and
17:44 - useless
17:45 - or on the other
17:48 - side you can learn how to use these
17:50 - tools so you can learn to be thise
17:52 - effective she made this happen and made
17:55 - that project happen because she could
17:57 - prompt engineer it
17:58 - and she knew the vision of the project
18:00 - and then she worked with AI to make it a
18:02 - reality and that's where we're headed
18:04 - where ideas are being translated into
18:07 - programs so that's all I'm saying all
18:10 - right let's keep on going model and it's
18:14 - part of a larger program that reads in
18:16 - some text of a transcript that's been
18:19 - derived from a podcast audio feed we're
18:21 - feeding the transcript into the model
18:23 - and we're giving it these instructions
18:24 - we're saying please summarize the
18:26 - following segment of this podcast
18:28 - transcript only use the information in
18:30 - the text do not in caps this is
18:33 - important by the way the all caps is
18:34 - super important do not use any
18:36 - information you know about the world
18:37 - include the title of the podcast the
18:39 - name of the episode and the names of the
18:41 - speakers if
18:42 - known this English statement here
18:46 - encodes an algorithm it describes
18:49 - something that I want to do with an
18:51 - input data and the output data that I
18:53 - want and my expectations about the kind
18:55 - of thing that's in the output data
18:58 - there's a few things to notice about
18:59 - this the first thing to notice about
19:00 - this is I don't think anyone could ever
19:03 - write down the algorithm for what this
19:06 - is supposed to do in any existing
19:08 - programming language or any programming
19:10 - language that we're likely to come up
19:11 - with in the
19:12 - future how do you write this
19:16 - algorithm wait
19:19 - really is that
19:21 - true that's crazy can you not write this
19:24 - hold on let me just think about
19:27 - it okay provide a one or two sentence
19:30 - summary so that we
19:33 - could probably do with an algorithm send
19:35 - it off to an AI and it could summarize
19:37 - text so that's possible only use the
19:39 - information provided in the
19:42 - text huh that's kind of hard I don't
19:45 - know how to do that through coding
19:47 - that's a tough one like to tell it to
19:49 - only use the
19:54 - well well I guess if the program is
19:57 - offline then the only thing it has to go
19:59 - off off is the text I guess do not use
20:02 - any information you know about the
20:07 - world I mean I could scope it to that
20:10 - specific piece of text I'm giving it
20:12 - include the title of the podcast so I I
20:14 - don't I don't really know exactly what
20:16 - he's talking about here but let's keep
20:17 - going you can't right there's no pseudo
20:20 - code there's no proof there's no
20:21 - mathematical symbology here
20:23 - right um the other thing to notice is
20:27 - maybe I'm too dumb for that if you if
20:29 - you know let us know in the comments
20:31 - below at least for me I don't know about
20:33 - any of you do you understand this do you
20:34 - understand what it's saying does it make
20:37 - sense can you read it can you reason
20:40 - about what it's supposed to do yes of
20:41 - course right it's in plain
20:43 - English doesn't have to be English by
20:45 - the way it could be in Mandarin Chinese
20:47 - or espiranto
20:50 - have you all seen the xkcd about the guy
20:53 - who walks into his friend's house and he
20:55 - says okay Alexa order 5 tons of creamed
20:57 - corn okay Alexa confirm order it's how
21:00 - he makes sure that no one's got a
21:02 - speaker listening to him okay so the
21:04 - point being that this is now how I am
21:06 - actually writing code and what's funny
21:07 - about this is a lot of it is trial and
21:10 - error and experimentation by the way
21:12 - that's the same when I'm writing normal
21:13 - computer
21:15 - code and the other thing that's
21:17 - interesting about this is there's a lot
21:19 - so yeah trial and error is there I mean
21:21 - I do that too that's why I'm still
21:23 - spending 150 hours when I was building
21:25 - that app and I couldn't just do it with
21:26 - one prompt there was a ER then I would
21:29 - tell the computer again hey we got an
21:30 - error let's do this let's do this let's
21:32 - do this and I just kept working with it
21:34 - and making progress a lot of subtlety in
21:37 - terms of how you instruct the model and
21:38 - how you know what it's going to do with
21:40 - your instructions you can't write a
21:42 - manual that says well here's the set of
21:44 - words that you need to use to get the
21:45 - model to do X Y or Z you have to just
21:48 - try out certain things in this case I
21:50 - found out the do not in all caps really
21:53 - helped because I really wanted to
21:55 - emphasize that point to the model
21:58 - this reminds me of another programming
22:00 - language that someone came up with a
22:01 - while ago called intercal intercal was
22:04 - meant to be one of these uh kind of
22:06 - obscure or maybe satirical joke
22:08 - programming languages intercal had these
22:10 - interesting features like brain [ __ ] or
22:13 - Whit
22:14 - space such as you had to use the keyword
22:17 - please and if you use the keyword please
22:20 - too often the compiler would reject your
22:22 - program if you didn't use it enough it
22:24 - would also reject your program and it
22:26 - turned out that feature was undoc doed
22:29 - it's exactly like what we're doing today
22:31 - right we have to say please and do not
22:32 - in all caps to get the language models
22:34 - to do what we
22:35 - want so where am I going with all this I
22:37 - think what I'm saying here is we are now
22:40 - in an era where we have machines that
22:42 - can take natural language in and produce
22:46 - results algorithmic results
22:48 - computational results but for which no
22:51 - human has written a program in anything
22:54 - resembling a conventional programming
22:56 - language and I claim that these models
22:59 - are going to get so good at doing this
23:02 - that our whole concept of programming
23:03 - computers is going to get replaced over
23:05 - time with instructing language models to
23:08 - do things for us yes that I 100% agree
23:12 - with that that's I what I see happening
23:15 - right now I just I don't remember a lot
23:19 - of these apps I built over the last
23:21 - couple of months I just don't remember
23:24 - writing code from scratch I just really
23:26 - don't I just tell
23:28 - I'll give you an example it be like hey
23:30 - uh I need to make a button for a modal
23:33 - uh when a user clicks it it should pop
23:36 - this up and let them add a new to-do
23:38 - cool and then I
23:40 - just I just look around wait for the
23:43 - chat GPT code to come in grab it put it
23:45 - in there Boom come right back and then
23:48 - just you know see if it works great it
23:51 - worked I have nothing to do I can
23:53 - continue moving if it doesn't work come
23:55 - back didn't work this is the error I'm
23:57 - getting
23:58 - wait for it to give me the code copy
24:00 - paste Works Cool mostly I'm just
24:03 - thinking of what feature to add what's a
24:05 - new thing to add and I'm thinking of the
24:07 - next steps rather
24:09 - than
24:11 - like um do I need to use map for this or
24:15 - what JavaScript algorithm do I need to
24:17 - use to make this more efficient o am I
24:20 - writing it in two for Loops instead of
24:22 - one oh my god did I unsubscribe from my
24:26 - Firebase because I'm going to get a a
24:29 - read of 50,000 plus reads and that's
24:32 - going to blow through my quota and I'm
24:33 - going to get end up getting charged so
24:35 - much I just want to make sure that my
24:37 - unsubscribe is done properly let me just
24:40 - try to remember the documentation of
24:41 - Firebase real quick go to stack Overflow
24:45 - and and look it up by some some passive
24:47 - aggressive nerd that wrote the top
24:49 - comment let me let me copy paste from
24:51 - him like that's where a lot of my time
24:52 - was going whereas like now it's like it
24:55 - just does it for you and it handles it
24:57 - it for you and I love that just makes
25:01 - those things simpler I don't I shouldn't
25:03 - really need to use my brain for like
25:05 - looking up documentation looking up all
25:07 - these things that just are very tedious
25:10 - and it's like I I get the point of what
25:12 - I'm trying to
25:15 - do so let's take a look at the state of
25:19 - programming language technology this is
25:21 - a programmer uh without co-pilot in
25:24 - around 2020 colorized bro this is
25:27 - exactly what I've been saying that is
25:29 - you that is you no offense if you don't
25:33 - use Ai and Chad GPT to help you so
25:36 - whether that's co-pilot or Chad GPT or
25:38 - any other tools that exist there's so
25:39 - many other tools that exist GPT pilot
25:41 - exists I was going to do a video on that
25:43 - but that's you this is what I was trying
25:45 - to say you're on feet while I'm in a car
25:49 - you're walking on your feet while I'm in
25:51 - a [ __ ] yacht or on a plane traveling
25:54 - somewhere and then you're trying to race
25:56 - with me so that's why it's so funny like
26:00 - that there's so many amazing parallels
26:01 - he's drawing here okay I think I met
26:03 - that guy out in Central Square this
26:05 - morning um and here's a programmer with
26:08 - co-pilot in 2021 right so clearly we're
26:10 - evolving very rapidly as a species of
26:12 - programmers unfortunately both of these
26:13 - cases are male I apologize for
26:16 - that so how many people here have used
26:19 - co-pilot or one of its ilk in terms of
26:21 - he helping you write code don't be shy I
26:25 - know you're Prof you're like who's my
26:26 - professor in here
26:28 - oh [ __ ] all right so co-pilot if you
26:30 - haven't used it is a complete Game
26:33 - Changer in terms of how real world
26:35 - developers write code okay yes it's also
26:37 - kind of a huge boost for students who
26:39 - want to effectively shortcut their
26:41 - homework speedrun if I don't have
26:43 - co-pilot I absolutely feel naked I was
26:44 - on the airplane out here I was writing
26:46 - codes yeah I just love when I'm doing
26:47 - co-pilot I use jbt more than I use
26:49 - co-pilot but I also love that it can
26:52 - just start to finish up the thing that
26:53 - I'm about to write including
26:55 - documentation right I'll be writing a
26:57 - documentation it'll just autoc complete
26:58 - it or if I'm writing a function it'll
27:00 - just autocomplete it so I really like
27:03 - that the Wi-Fi was not quite fast enough
27:05 - so I would type out you know my half a
27:07 - line of code and just sort of wait for
27:08 - co-pilot to finish it for me like I
27:10 - always do but normally that happens in
27:11 - about like less than a second and this
27:13 - time it was just taking so long I said
27:14 - ah damn it I guess I have to write this
27:16 - myself just like I used to a year
27:20 - ago copilot is is incredible for a few
27:23 - reasons I think one of the things that
27:24 - people don't fully appreciate is that it
27:26 - keeps you in the zone of writing code it
27:29 - used to be the case that anytime I'd hit
27:31 - a little snag I'd be like oh crap I
27:33 - can't quite remember the Syntax for how
27:34 - I you know reverse a list in whatever
27:36 - language I'm working in yeah crap well I
27:38 - know where to find the answer I'll just
27:39 - Google it it's on stack Overflow
27:41 - somewhere and so I go and I Google it
27:44 - and I find the the thing it's probably
27:45 - not a direct answer so I have to kind of
27:46 - read the article a little bit and kind
27:48 - of piece together oh yeah that's the
27:49 - snippet I was looking for and then 45
27:51 - minutes later what am I doing I'm on
27:53 - Reddit somewhere you know I've gone down
27:54 - the Rat Hole of surfing the internet I
27:56 - got out of the zone of writing code
27:59 - yeah keep you in the zone I I think
28:01 - people are so much more productive with
28:03 - this to the point where we mandated
28:04 - every developer our company has to use
28:06 - co-pilot yes if there's somebody not
28:08 - using co-pilot they're going to be fired
28:09 - well I didn't say that but kind of the
28:11 - idea so a lot of people that should be
28:15 - the idea chastised or criticized
28:17 - co-pilot for being a little dumb right
28:19 - it's not it's like well it's just
28:20 - trained on stuff it found on the
28:22 - internet on GitHub and homework
28:23 - assignments how good can it be and now
28:25 - I'm going to get more nerds in the
28:26 - comment
28:28 - I don't want to give my data to anybody
28:29 - I don't want to give my data to anybody
28:31 - but like your data is how it's I don't
28:34 - even want to get into that combat but
28:35 - like I remember making a video recently
28:37 - and everybody went and lost their [ __ ]
28:39 - cuz I said I love to give away my data
28:42 - you're
28:43 - like that's how it gets better share
28:45 - your data that's how it get better it's
28:48 - incredibly good it's not just parting
28:51 - back things that it's seen elsewhere
28:53 - it's interpreting your program and your
28:55 - intent it's looking at other parts of
28:57 - your code to understand what you might
28:58 - do next it's um understanding your data
29:01 - structures it's not just looking at a
29:03 - little context window in this current
29:04 - file you're editing it's looking
29:05 - elsewhere in the code to find something
29:07 - that might be relevant and the only
29:09 - thing that is stopping co-pilot from
29:11 - getting really really really good at
29:13 - this is just more data and more compute
29:16 - and guess what we have both of those in
29:17 - abundance oh yeah right there's nothing
29:19 - that's going to stop this from getting
29:21 - incredibly good
29:23 - overtime um so here's another kind of
29:26 - similar use case this is not uh co-pilot
29:28 - this is chat GPT which I'm sure we're
29:29 - all familiar with M but if you are
29:32 - trying to figure out how to do something
29:34 - and in this case I was you know using
29:36 - the Deep gram python SD again Shameless
29:39 - plug if you want to learn these exact
29:42 - skills how to build apps fast and use
29:46 - that to make
29:48 - money I will show you I've put together
29:51 - a free training for you I literally show
29:53 - you how to build apps so damn quickly
29:55 - it'll make your head spin and I've had
29:57 - count count students go through it and
29:58 - have that experience so click the link
30:00 - below you have nothing to lose watch
30:03 - that free training because you can gain
30:04 - so much and it can change your life
30:06 - profoundly all right click below I want
30:09 - to see you in that training let's keep
30:10 - rolling okay to transcribe audio files
30:13 - for this podcast thing I mentioned
30:15 - earlier I could have spent 15 20 minutes
30:19 - reading their
30:21 - documentation finding some example code
30:23 - on the internet following a
30:26 - tutorial or dude that's so funny because
30:29 - I was literally working with deep gram
30:31 - deep gram is actually one of the best
30:32 - transcription sources of available deep
30:36 - gram is sick is if any of you is trying
30:38 - to do something with transcriptions look
30:40 - up deep gram it's awesome their API is
30:42 - so good because we're all like you know
30:44 - programmers are incredibly lazy just say
30:46 - hey look I'm trying to do this thing can
30:47 - you just give me the code I need and it
30:49 - does
30:51 - it co-pilot is not just understanding
30:53 - homework assignments chat gbt is not
30:54 - just understanding homework assignment
30:55 - it like understands other people's apis
30:58 - and sdks and programming libraries and
31:00 - abstractions and best practices and bugs
31:03 - that might occur I mean it's really got
31:04 - a lot of knowledge and so with very
31:06 - little and his his
31:08 - uh his uh GPT here is old right you
31:11 - could see cut off is 2021 now that GPT
31:14 - has been updated cut off is actually
31:17 - 2023 so GPT will know like pretty much
31:21 - everything every programming language
31:24 - and documentation that you're looking up
31:26 - right now effort then I can just cut and
31:28 - paste this code right into my program
31:29 - and get on with my
31:31 - life
31:34 - right shell Silverstein who wrote uh a
31:37 - Light in the Attic this is something a
31:38 - children's book book of children's
31:40 - poetry that I read when I was a kid I
31:41 - saw this on Reddit a couple days ago he
31:43 - completely predicted this right this is
31:45 - 1981 you know the homework machine oh
31:48 - The Homework Machine most perfect
31:49 - Contraption that's ever been seen just
31:50 - put in your homework then drop in a dime
31:52 - snap on the switch and in 10 seconds
31:54 - time your homework comes out quick and
31:56 - clean as can be here it is 9 plus 4 and
31:58 - the answer is three three oh me I guess
32:01 - it's not as perfect as I thought it
32:03 - would be exactly toss a dime takes about
32:07 - 10 seconds it gets the answer wrong this
32:09 - is very much what we're dealing with
32:11 - today I mean with GPT 3.5 yeah GPT 4
32:15 - it's a little bit better but I think
32:18 - with five and GPT
32:22 - 6 I think it'll start to give you pretty
32:24 - accurate answers right away by the way
32:26 - and this is a complete aside but I can't
32:28 - resist when I mentioned shelf
32:29 - Silverstein if you don't know what he
32:30 - looked like this was the cover uh the
32:33 - the photo on his the dust jacket of one
32:34 - of his first books this guy I love this
32:37 - guy a children's poetry book author from
32:40 - the 70s and that's what he looked like
32:42 - amazing all right
32:44 - so so now I want to talk about well if
32:47 - this AI technology is getting so
32:50 - good then what's going to happen to our
32:52 - industry what does this mean for all of
32:54 - us who might be looking to get jobs in
32:56 - this industry in the future future and
32:57 - expecting to get those you know big fat
32:59 - paychecks and stock option grants and
33:01 - you know buy Teslas or whatever we're
33:04 - expecting to do
33:05 - so how much does it cost to replace one
33:08 - human developer with AI well I did the
33:09 - math so let's say that a typical
33:11 - software engineer salary in Sil Valley
33:13 - oh that's really good this is the juicy
33:16 - part I'm excited let's see it Seattle is
33:19 - around 220,000 a year that's just the
33:20 - base salary doesn't include benefits
33:22 - doesn't include Equity packages doesn't
33:25 - include your free lunch and your bowling
33:26 - alley and all that kind of
33:28 - stuff so let's just assume that that
33:31 - stuff cost you know 92k a year which is
33:34 - again a little conservative so the total
33:35 - cost to your employer is roughly 300
33:38 - 312k for One
33:42 - S many working days are there in a year
33:44 - about 260 and so it costs $1,200 a day
33:47 - to employ you as a s at one of these
33:49 - companies fair enough $1,200 a day think
33:53 - about how much HP cost per day right as
33:56 - many queries as you want maybe
33:59 - $5 maybe $3
34:04 - $5 think about that $1,200 divided by
34:07 - $5 240 times cheaper so that means for
34:12 - you they could hire 240
34:16 - developers so I mean like you know what
34:18 - I mean like I hope it's adding up but I
34:21 - hope you're not getting scared I want to
34:23 - empower you that's the idea it's not so
34:25 - you're freaked out and like I should
34:27 - just quit and just do something else to
34:29 - just become a truck driver that's not
34:31 - the idea I'm trying to show you that
34:34 - there is a way let's keep
34:36 - going okay so let's do the math how many
34:39 - lines of code do you think an average
34:41 - developer checks in to the code base
34:43 - every day I mean finalized tested
34:46 - reviewed and approved lines of
34:48 - code most of us who worked in Industry
34:50 - know that the uh the median value is
34:53 - zero because there's so many days that
34:55 - you go by where you're waiting on
34:56 - somebody else or you're in meetings all
34:57 - day you didn't get anything done you
34:58 - didn't check it in but let's just be
35:00 - generous here and say it's about 100 I
35:02 - know 100 doesn't sound like a lot people
35:03 - like but I was programming all day yes
35:05 - but 90% of your code you ended up
35:06 - throwing out or somebody reviewed it and
35:08 - said it was no good you have to rewrite
35:09 - it you were trying to figure out what to
35:10 - do you were revamping it so like the
35:12 - final result of your output is something
35:14 - like a 100 lines of code a day that's
35:16 - the final
35:17 - result how many gpt3 model tokens is
35:20 - that it's about 10 uh tokens per line
35:23 - more or less so and the cost for GPT ooh
35:27 - this is strong logic right let me
35:29 - actually go back out so like the final
35:33 - how many gpt3 and the cost for dpt3
35:36 - current actually this is probably a
35:37 - little out of date but at the time I
35:38 - made this slide it was 2 cents for a th
35:40 - tokens okay so if you do the math then
35:43 - the total cost for the output of one
35:45 - human software developer on gpt3 is 12
35:52 - cents this is a factor of 10,000
35:59 - 12
36:01 - cents I mean like
36:05 - look I know it's hard for maybe you or
36:08 - somebody who's a developer to think like
36:10 - this right but I'm a CEO I run a company
36:12 - so I think like this if I was a
36:16 - developer and my entire life depended on
36:18 - it and it was tied to my identity And if
36:20 - every dollar I made was from development
36:23 - I'd be scared shitless and I would be
36:25 - commenting on people's real
36:27 - telling them that they
36:29 - are scum for talking about the future of
36:33 - future becoming Ai and going away from
36:35 - coding I would be doing the same thing
36:36 - probably I I wouldn't I know myself but
36:39 - let's just say okay in some world I I
36:41 - might be doing something similar or at
36:44 - least I could understand how you would
36:46 - do that and and feel empowered by it in
36:49 - a sense of control cuz you're scared
36:51 - your future is about to get uh erupted
36:54 - right or
36:55 - disrupted but but as a CEO bro like give
36:59 - me this all [ __ ] day I don't have to
37:02 - deal with their headaches I don't have
37:04 - to deal with their emotional problems a
37:07 - lot of a lot of developers have health
37:09 - problems that I have to deal with and
37:10 - then they it [ __ ] up their mental stuff
37:13 - uh they need days off they're like so um
37:19 - a lot of developers they're just
37:20 - terrible at
37:22 - communication I have you you know
37:23 - somebody has to manage them and make
37:25 - sure that they're hit the deadlines and
37:28 - there's just so much crap and I've I've
37:30 - hired so many software developers on my
37:32 - own company and we're a small company at
37:34 - clever program or a tiny company imagine
37:36 - companies where there's hundreds or
37:38 - thousands of developers tens of
37:40 - thousands right for some companies that
37:42 - are big
37:43 - enough but there's just so much other
37:45 - stuff that you have to deal with and so
37:46 - for me it's like [ __ ] no I'm not doing
37:49 - this I'm not hiring the developers and
37:53 - that's exactly what I did when I was
37:54 - building my entire software where I just
37:57 - built it all by
37:59 - myself and most of the apps that we
38:01 - build are built with AI and it costs
38:04 - fraction of the price and it's amazing
38:07 - now I will pay somebody $800 or less and
38:11 - we'll build out a full app together
38:14 - whereas before I would have paid them 10
38:15 - grand over two months 3 months and it
38:18 - would have taken so much time you know
38:19 - so not to mention like time not to
38:22 - mention time because people are slow and
38:25 - it takes them time you know all so much
38:28 - stuff this thing here never
38:32 - sleeps
38:35 - uh writes better
38:39 - code uh no days
38:42 - off right
38:46 - um
38:48 - like no no problems has no problems
38:52 - right essentially there's no
38:55 - problems
38:58 - um you know you know what I mean so it's
38:59 - just like not only just the cost Factor
39:03 - but the time Factor right does it
39:07 - instantly okay uh Works
39:11 - 24/7 so like if you just think about
39:15 - that it's it should I hope start to make
39:18 - sense where we're headed and what that
39:21 - means is you got to get occupied and you
39:23 - got you got to get equipped with the
39:25 - skills need needed to be in that
39:27 - direction meaning you need to be prompt
39:29 - engineering like a god you need to start
39:32 - developing more product manager skills
39:34 - Vision skills of how what features to
39:36 - build why to build them how they can
39:39 - make money for the company that you're
39:40 - working at no more being protected by
39:42 - Daddy because you're a sweetheart and a
39:46 - company that has a lot of money is going
39:47 - to protect you and provide you with
39:48 - safety right you want to be somebody
39:51 - who's actually valuable and making sure
39:52 - you're doing things that make that
39:54 - company money and so if you constant
39:56 - conly keep thinking like that you're
39:57 - going to be a valuable asset to society
39:59 - forever and you're going to learn these
40:01 - skills like prompt engineering along the
40:03 - way and so then your coding skills will
40:05 - feed into more of the prompt engineering
40:08 - where your coding skills will come into
40:10 - play is when you go get into
40:13 - bugs using your coding skills you'll be
40:15 - able to debug using your coding
40:17 - knowledge of the sphere of which
40:19 - Frameworks to use what technologies to
40:21 - use which apis to potentially use that
40:24 - kind of creative creative thinking is
40:25 - still valid valuble now might some of
40:28 - that might go away in 5 10 years
40:31 - because AI will start to have creative
40:34 - thinking too but that is the valuable
40:37 - asset right now so think more about that
40:41 - factor of
40:45 - 10,000 this should scare us all wow
40:49 - right this suggests potentially a very
40:52 - large shift in our
40:53 - industry I don't think we can ignore
40:55 - this and just write it off and say well
40:56 - the AI is not very good today so
40:57 - therefore it's not going to be good in 5
41:00 - years right this radically changes how
41:03 - we think about only reason that
41:04 - programmers are paid so much is that it
41:06 - requires years and years and years of
41:08 - Education and Training and knowledge and
41:09 - specialization to be good at it but
41:12 - there's no reason that I need to hire a
41:15 - super smart you know Harvard educated
41:17 - student to do this if I can get chat PT
41:19 - to do most of the work for me and have a
41:20 - human typing it in
41:23 - yes MH there's a lot of other advantages
41:26 - to hiring the robots instead of the
41:28 - humans hey this is already I already
41:30 - covered all that let's go we already
41:33 - covered all that maybe but let's see
41:36 - what he says right robot's not going to
41:38 - take breaks the robot is not today
41:41 - expecting free lunches and you know
41:42 - on-site massage that could change the
41:45 - robot takes the same length of time to
41:47 - generate its code whether it's the rough
41:49 - proof of concept or the final production
41:51 - ready code when you go as a PM to an
41:54 - organization to your engineering team
41:56 - and you you say Okay team there's eight
41:58 - of you here we have to ship the billing
42:01 - page how soon can we do it you're going
42:04 - to spend at least an hour and a half
42:05 - having the conversation well you know
42:06 - like if we do it quick and dirty we can
42:08 - maybe do it in three weeks and if it's
42:09 - got to be production ready give us
42:13 - 12 that's another thing I didn't think
42:15 - about that meetings and the back and
42:17 - forth and all that you can have that
42:19 - with Chad GPT and it's almost instant
42:21 - you don't have to have that either you
42:23 - can save all that time that you normally
42:26 - would be wasting on
42:28 - meetings or you can go to the proverbial
42:30 - Homework Machine push the button and
42:32 - have the code right
42:33 - now
42:35 - right um and the other thing is yes the
42:37 - robot makes mistakes but those mistakes
42:40 - can happen incredibly quickly to the to
42:42 - the level of speed where iterate iterate
42:44 - iterate iterate iterate iterate iterate
42:46 - is perfectly fine you can say to the
42:47 - robot you know what this whole thing
42:50 - 5,000 source files 20,000 lines of code
42:53 - whatever it is blow it away start over
42:55 - boom five seconds later you have a brand
42:57 - new version of it yep try that with a
43:00 - live Human engineer
43:01 - team right so I think this is all like
43:06 - something that we really have to take
43:07 - seriously I don't think that this is
43:09 - just I am exaggerating for effect but
43:12 - the industry is going to
43:16 - change so you know the natural question
43:19 - then is well what what happens when we
43:20 - cut humans out of the loop how do we
43:23 - build software how do we ship product um
43:25 - I found this video on I think it's
43:27 - Microsoft's website and it's titled what
43:29 - do product managers do uh that was a
43:31 - little bit of an unintended joke I think
43:33 - because as an engineer we often go what
43:35 - do product managers do um but if you
43:38 - imagine what the software team of the
43:40 - future might look
43:41 - like well you saw that repet tweet that
43:46 - I showed you on
43:48 - Twitter that PM was killing it at the
43:51 - hackathon and then based on what he's
43:52 - saying yeah like look at that right you
43:55 - got a PM doing everything the this is
43:59 - he's actually kind of talking about that
44:01 - right now right AI robot makes a code
44:04 - which generates a code and then you got
44:05 - the human code reviewer so honestly what
44:09 - will be happening is developers will
44:12 - turn into code reviewers this is why in
44:15 - my course and in my program I'm training
44:17 - people to think like product managers
44:21 - and then use AI to build stuff and be
44:24 - the one to be able to review the code
44:27 - those are the people that are not going
44:28 - to get
44:29 - replaced this is what's happening right
44:33 - your your job as a developer is going to
44:36 - get commoditized and it's going to be
44:38 - down to you being a human code
44:42 - reviewer you understand that you're
44:44 - going to be a [ __ ] spell
44:46 - checker in a few years so if you want to
44:50 - be complacent and sit down on it and
44:52 - just be like this is it I I've made it
44:54 - I'm good I'm a software developer now
44:56 - you're going to be demoted to a spell
44:57 - checker my friend this is the equivalent
45:00 - of a spell checker so just be aware of
45:02 - that approach which is you have a
45:04 - product manager this is probably still a
45:06 - human taking the business and the
45:09 - product requirements the user
45:10 - requirements and translating them into
45:11 - some form probably English maybe a
45:14 - little bit technical English that you
45:16 - then can provide to the AI the army of
45:18 - AI code
45:20 - generators the AI code generators give
45:23 - you a whole bunch of code and probably
45:25 - for a while still we still have humans
45:27 - reading and reviewing the code to make
45:29 - sure that it does what it was supposed
45:30 - to do now that read is a little
45:33 - different than what we have today today
45:34 - when we review code if I have another
45:35 - engineer on my team writing code and I'm
45:37 - reviewing it standard practice in the
45:38 - industry is to do code review for one
45:39 - another we don't just check in code we
45:41 - read each other's code we make detailed
45:42 - comments on it we suggest improvements
45:44 - cleanups clarifications comments
45:47 - documentation in this case it's not
45:50 - absolutely essential that this code be
45:52 - maintainable by a human I think for a
45:54 - while we're going to want that right
45:56 - most people are not going to feel
45:57 - comfortable just letting the robots do
45:59 - all the coding but at some point as long
46:02 - as I can convince myself that the code
46:04 - does what it's supposed to do I mean
46:06 - it's kind of like AI
46:09 - cars cars that drive on autopilot
46:11 - without needing a driver in order for
46:14 - Humanity to get to get used to it I mean
46:16 - it'll take some time it'll be scary
46:19 - you'll sit in an Uber ride and you
46:21 - wouldn't feel
46:23 - comfortable driving to downtown with no
46:26 - driver there and the car driving itself
46:29 - it will freak most people
46:32 - out marz brownley or am I saying his
46:37 - name right or am I just making it up
46:39 - MKBHD okay maybe I'm saying his name
46:41 - wrong but
46:43 - MKBHD he made a video where he was
46:46 - driving a Tesla and it was riding it
46:48 - automatically and his heart rate was
46:49 - like elevated up to 140 beats per
46:53 - minute that is something that
46:56 - clearly shows you he's
46:59 - scared and that's the fear that we're
47:01 - going to have for a while right but just
47:03 - like a child learns to walk and learns
47:06 - to ride a bike the first time you rode a
47:07 - bike your heart was beating and you were
47:09 - scared the first time you were crossing
47:12 - the street you were probably
47:15 - scared just like that you know the first
47:17 - time you go to an interview doesn't mean
47:18 - all those things are bad for you the
47:20 - first time you public speak you're
47:22 - scared the first time you're you raise
47:24 - your hand and answer question or the
47:26 - Teacher Calls on you and you answer it
47:28 - you're scared just like
47:30 - that we're going to be scared initially
47:33 - to give up control for the code to the
47:35 - AI but if you saw your friend ride in a
47:42 - autopilot car now you'll be a little bit
47:44 - less scared now if you saw 10 of your
47:46 - friends do that you'll be a little less
47:48 - scared now if you found out that your
47:49 - entire family and all your friends have
47:51 - been riding in autopilot cars for years
47:53 - you'll be less scared if you found
47:57 - out you know there's millions of people
47:59 - now doing it you'll be less
48:02 - scared if you saw reviews you'll start
48:05 - to be less scared if you watch other
48:07 - people doing it on YouTube you'll be
48:08 - less scared and so the more accepted it
48:11 - gets the more of a social Norm becomes
48:14 - the less scary it becomes so in this
48:16 - case with this situation here the
48:19 - programming being changed and taken over
48:21 - by AI will start to give up more and
48:24 - more control and be less and less
48:26 - scared as it can show us it can do a
48:29 - good job and get us from point A to
48:31 - point B without us getting into a car
48:33 - crash and
48:34 - dying I don't really care how messy it
48:36 - is I don't really care how it's
48:38 - structured I don't really care how
48:39 - reusable it is all of those factors are
48:41 - only because poor humans have to Wrangle
48:43 - with this
48:44 - stuff right oh it needs to be modular we
48:48 - need to have abstraction boundaries
48:50 - right all the things you know sophomore
48:51 - level computer science right why for the
48:54 - sake of poor humans having to deal with
48:55 - this complex code base but if the robots
48:58 - are the ones generating it and we don't
48:59 - really need to maintain it in a
49:00 - conventional way why not just generate
49:03 - the code you need it doesn't really
49:04 - matter if it's duplicative or repetitive
49:06 - or modular or nicely abstracted doesn't
49:09 - matter does the
49:12 - job yeah I agree so one of my hypotheses
49:16 - around why everyone has been freaking
49:17 - out about chat gbt is because unlike
49:20 - other
49:21 - Industries um this revolution seemed to
49:24 - occur overnight unless you that's what
49:26 - I'm talking about this is why I'm
49:27 - getting the [ __ ] hate it's crazy
49:31 - Psychopaths insane insane I've never
49:34 - experienced that before but they're
49:35 - going crazy it's like hoorde mob but
49:37 - come at me I don't give a [ __ ] you know
49:40 - if you if you want to do that I'm happy
49:41 - to have a open discourse and open
49:43 - dialogue that's the beautiful thing
49:46 - about the world and our country we we're
49:49 - allowed to have freedom of speech so I
49:51 - welcome
49:53 - that but yeah it's sudden and happened
49:56 - overnight I want to let him uh speak on
49:58 - this more you're like a AI professor and
50:01 - have really been following the
50:02 - literature for years and years and years
50:04 - to most of us myself included this
50:06 - seemed to just go from you know AI was
50:09 - kind of crappy to AI was amazing
50:11 - literally overnight right so to use an
50:13 - analogy this would be as if the field of
50:15 - computer Graphics went from pong to Red
50:19 - Dead Redemption 2 in the span of about
50:21 - three months yes that is a
50:26 - brilliant
50:28 - analogy right people's heads would
50:30 - explode if that happened right but
50:32 - that's not what happened in graphics
50:33 - right in graphics it took decades to get
50:35 - to this point and everyone could see it
50:37 - gradually getting better and better and
50:38 - better you know I remember when Toy
50:40 - Story came out and that was like the
50:42 - first CG movie people's minds just
50:45 - melted watching that they were like whoa
50:48 - and now we watch it and you just like oh
50:49 - yeah that's cute you know I could render
50:51 - that on my laptop and scratch or
50:53 - whatever
50:54 - right
50:56 - the other thing that's happened I think
50:57 - in this field that's interesting and
50:59 - there's a big societal shift happening
51:01 - is the dialogue around our expectations
51:04 - of what AI can achieve and so in 1972
51:08 - Hubert draus wrote this book what
51:09 - computers can't do and this was at the
51:11 - dawn of the PC era and there was a lot
51:14 - of popular press and dialogue around
51:17 - this sort of scaremongering around Ai
51:18 - and you know we had movies come out like
51:20 - war games does anybody remember that I
51:21 - think War Games by the way that movie is
51:23 - why I a computer scientist right I was
51:25 - like I want to be Matthew broadrick I
51:27 - got to watch that movie in this room
51:29 - with like all these monitors and my like
51:31 - analog modem and hacking into the school
51:33 - computer like that was me as a kid so at
51:36 - this time I think a lot of people were
51:38 - saying well hold on a minute computers
51:41 - are fundamentally dumb and they can't do
51:42 - these things and they never will and
51:45 - that was the thesis of this book here
51:46 - and I think that that was the sort of
51:47 - consensus view right we we sort of calm
51:49 - down a little bit about the technology
51:51 - we all kind of realize yeah okay visaal
51:53 - is not going to put me out of out of out
51:54 - of a job
51:56 - right but now Fast Forward 2014 I highly
51:59 - recommend this book if you haven't read
52:00 - it by Nick Bostrom called super
52:01 - intelligence this is a book that
52:03 - wrestles in a tremendous amount of
52:05 - detail with the philosophical it's
52:07 - called super intelligence by the I mean
52:09 - yeah okay you could see it my bad the
52:10 - moral questions of how does human
52:13 - society respond to an AI that is more
52:15 - intelligent than
52:17 - humans and I know we've got you know a
52:19 - lot of sci-fi around that topic but this
52:21 - is a very serious academic work about
52:24 - what does it mean for our society
52:25 - if we have ai that is smarter than
52:30 - us and people are taking that very
52:32 - seriously today so I think my point
52:34 - being that the the dialogue that we've
52:36 - been having in the uh in society at
52:38 - large has shifted away like this stuff
52:40 - I'm a little less you know I'm not like
52:43 - a theoretician I'm a practical Builder
52:46 - and so I am excited about what I can
52:48 - build today with AI and that's what I
52:51 - want to share with you guys right that
52:53 - using these tools you can be building
52:55 - apps today regardless of if you have
52:58 - coding skills or not and you can learn
53:01 - specifically the skills you need on the
53:03 - fly with
53:04 - AI helping you but like today there's no
53:08 - reason that you can't be freaking iron
53:10 - man everybody's an Iron Man today with
53:14 - their
53:15 - Jarvis that's how it feels to me at
53:17 - least when I go into Chad GPT and I
53:19 - start building apps with it so I want to
53:21 - just open your minds to that and I want
53:23 - you to be practical right be a practical
53:26 - Builder I mean all this Theory stuff is
53:28 - cool like what if we have robots
53:30 - everywhere and we feel like slaves and
53:33 - what if the robots kill us sure we're
53:35 - going to die anyways right at some point
53:38 - so I'm much more interested in what we
53:40 - could practically do with the tools that
53:41 - we have today and in the next couple of
53:43 - years what that looks like from AI as a
53:46 - toy to AI might actually destroy
53:52 - Society so let's just talk rap rapidly
53:55 - about the future the evolution of
53:56 - programming as I see it so you know in
53:58 - the dawn of time we had humans directly
54:01 - writing machine instructions and you
54:02 - know inputting him with toggle switches
54:04 - and stuff like that right that was this
54:05 - is exactly what I was talking about
54:07 - earlier in the video that was before
54:10 - programming and theams in higher level
54:11 - languages yep and then he goes then we
54:13 - went higher level languages that's why
54:15 - I'm skipping through a little bit cuz we
54:16 - already kind of talked about this point
54:18 - that he's making right now that's beond
54:19 - St who invented C++ so we went from like
54:21 - toggling switches to now C++ Plus
54:27 - and in modern times we have a world in
54:29 - which humans are writing their code but
54:30 - they're heavily assisted by Ai and they
54:33 - can get away with things like well I'll
54:34 - just write a comment and have the AI
54:36 - write the code for me
54:38 - right
54:40 - yes but my claim is that the future of
54:43 - this really is skipping the programming
54:45 - step
54:46 - entirely think a yeah exactly think of
54:49 - it I love that photo actually because it
54:51 - just sparked an idea in my head but AI
54:54 - is a new child child it's basically just
54:57 - like how you train so for example right
54:59 - I could become a programmer or I could
55:00 - have a child Inspire the child to become
55:03 - a programmer and then he or she becomes
55:05 - a programmer in the next 18 21 years um
55:09 - and then goes on and becomes an epic
55:12 - programmer right but then there's all
55:13 - this time and cost
55:15 - and so much random [ __ ] right where with
55:19 - AI there there isn't that like you teach
55:22 - the AI model how to think or how to
55:24 - solve a and like you could Inspire an AI
55:27 - probably in the future to become a
55:29 - computer scientist and then it goes on
55:31 - to become a computer scientist and then
55:32 - it goes on to become the best computer
55:34 - scientist in the world and it goes on to
55:35 - build the best apps
55:38 - and all of that happens within maybe a
55:41 - couple of minutes maybe within a week
55:44 - you know just like the AI that sat down
55:46 - that taught itself chess and then 24
55:48 - hours later it beat Magnus Carlson who's
55:50 - the number one chess player in the
55:52 - world a lot of people who've read my
55:54 - article on this topic is in the C
55:56 - misinterpreted it as saying AI is going
55:58 - to write code for us therefore
55:59 - programmers should not exist I'm not
56:01 - saying
56:02 - that that's very important so I'm going
56:05 - to repeat that AI is going to write code
56:07 - for us therefore programmer should not
56:11 - exist okay so this is my point that I've
56:14 - been
56:15 - saying even if traditional speaking
56:18 - programming is going to die right I have
56:20 - to write a headline to get people's
56:22 - attention that's what everybody does but
56:25 - it's not that it's not true it's that
56:26 - programmers role will shift heavily and
56:31 - I want to catch your attention by
56:32 - Shocking you and then I want to show you
56:34 - what's the way that you can
56:36 - go so this is exactly what he's saying
56:39 - where're programmers is isn't that
56:41 - programmer shouldn't exist but
56:43 - programmers are going to evolve to
56:44 - prompt engineering and building apps
56:47 - they're going to get promoted into a
56:49 - product manager role where they're going
56:51 - to be product managers and maybe even
56:53 - human reviewers you know code reviewers
56:55 - or they're going to have human code
56:56 - reviewers underneath them but that's I
57:00 - believe where the shift will be going
57:03 - I'm not saying that I'm actually saying
57:04 - something much worse which is you won't
57:07 - have to have programs at all you just
57:09 - tell the language model what you want
57:11 - and it directly computes the
57:13 - results he went even one step further
57:16 - than
57:17 - me there's no program
57:20 - step and I I think that opens up it is
57:24 - an interesting challenge for our field
57:25 - but I think it opens up a tremendous
57:27 - opportunity because now the question is
57:29 - how do I effectively teach these models
57:32 - what to do coming back to my example
57:34 - earlier of having to use the words do
57:35 - not in all
57:37 - caps what are the best practices and
57:40 - Beyond best practices can we turn this
57:41 - from effectively a dark art into a
57:46 - science into that is actually one of the
57:49 - things that I discovered when I was
57:50 - doing so these are the skills you're
57:51 - going to need to develop and I agree
57:52 - with him where he's going with this but
57:54 - when I was building my own
57:56 - app um a lot of the time that I I I
58:00 - spent was discovering the dark arts of
58:03 - how
58:04 - to coax and chus and guide Chad GPT into
58:11 - the app that I was trying to get it to
58:13 - build and it was me just learning all
58:17 - these tricky prompt engineering
58:22 - hacks the one for example he shared with
58:25 - you where he writes do not ENC caps and
58:27 - that enforces a certain Behavior then
58:30 - you know for example I was teaching it
58:32 - with I was giving it certain examples of
58:34 - things it should be able to do or things
58:37 - it shouldn't be able to do but then what
58:38 - happened was when I was giving it those
58:41 - examples it started adding specific text
58:45 - from those examples and everything that
58:47 - it did so started having a bias because
58:49 - of the example and I was like damn
58:51 - that's also what I didn't want so then I
58:53 - had to like keep tweaking it until I got
58:56 - the answer that I wanted and
58:58 - so there's there's a back and forth
59:00 - dance and that's where I'm saying you
59:03 - need to be spending time in because
59:04 - that's where I was spending time in and
59:06 - it's like it's creativity and science
59:09 - combined on how you can get it to do the
59:11 - thing that you want it to do that's
59:13 - where we're I believe where we're headed
59:15 - and where you're going to get the most
59:17 - value do an engineering discipline and
59:19 - people have talked about prompt
59:20 - engineering as a thing I I think that's
59:22 - meant kind of tongue and- cheek it's not
59:24 - really prompt engineering is not really
59:25 - a thing yet but it may well be in the
59:27 - future if we do this right so
59:32 - um one of the things that people often
59:34 - say about these models is that there's
59:35 - no way they can do anything interesting
59:37 - or creative because all they're doing is
59:39 - autoc completing based on large corpor
59:40 - of text that they've seen and been
59:41 - trained on that's [ __ ] I've done
59:45 - like it's true in terms of they've been
59:47 - trained on historical data but I've had
59:50 - it solve a lot of unique problems that
59:53 - have never been solved anywhere before
59:55 - and it was able to put those things
59:57 - things together and so I know firsthand
60:01 - that that's not the
60:02 - case I beg to differ now we obviously
60:05 - don't really know what's going on inside
60:07 - these models but if you ask a large
60:10 - language model to take a complex problem
60:14 - and effectively run a
60:16 - computation that is to manipulate a
60:19 - model of the world in its mind in this
60:22 - case I've come up with a simple problem
60:23 - here I've said I've got three stacks of
60:25 - cards red green and blue cards and
60:27 - they're all shuffled up in the following
60:28 - way please tell me how to lay them out
60:30 - into three stacks one red one green one
60:32 - blue simple problem right a child could
60:34 - do this now the key phrase here was as
60:38 - was discovered not long ago a couple you
60:39 - know few months ago you have to say the
60:41 - words the magic words let's think step
60:44 - by step if you say that to the model
60:47 - that somehow triggers it to go into
60:48 - computation mode now it's no longer just
60:51 - parting back some answer it's actually
60:53 - going to say okay well I have to
60:54 - actually elucidate each of my
60:57 - instructions and so it does it
60:59 - absolutely does it
61:01 - mhm and the fact that it's able to
61:03 - manipulate some kind of internal model
61:05 - of this stack of cards that I described
61:07 - and and and tell me exactly how it's
61:09 - going to work and and it's correct you
61:11 - know is fascinating to me it's not hard
61:13 - to trip it up there's plenty of places
61:15 - you can give it a problem and it's going
61:16 - to immediately fall over and go sorry
61:18 - it's going to give back bogus results so
61:20 - the question is why you know what do we
61:22 - do in this case how do we understand
61:24 - what the limits of this these models
61:29 - are so I do think that over time we're
61:31 - going to get to a place where
61:32 - programming ends up getting replaced by
61:34 - teaching new model uh teaching these
61:35 - models new skills
61:37 - yes so programming would get replaced by
61:41 - teaching these new
61:44 - models new
61:46 - skills and teaching them how to
61:48 - interface to apis and pulling data from
61:50 - databases and transforming data and how
61:52 - to interact with software meant for
61:53 - humans that's going to become an entire
61:56 - discipline right
61:58 - there um and one way of thinking about
62:00 - where this might go is what I like to
62:02 - call the natural language computer like
62:04 - for
62:05 - example I wanted to use v9 of Firebase
62:09 - which is the newest version of
62:12 - Firebase I couldn't do it because Chad
62:16 - GPT had a cut off or something and so
62:18 - Chad GPT didn't know about the newest
62:20 - version of Firebase it knew about the
62:22 - old version of Firebase I believe V8
62:26 - and I got it to write my code but it
62:28 - wrote it all in V8 the older version and
62:31 - so it kind of threw my entire app off
62:33 - because my app was requiring that I put
62:35 - it into
62:37 - v9 and I tried to look online and there
62:40 - weren't a lot
62:41 - of there wasn't a lot of gr there there
62:44 - was some documentation but I needed Chad
62:46 - GPT how to convert from V8 to v9 I
62:50 - needed to teach it how to convert that
62:52 - and there was a guide by fireship that
62:54 - shows you exactly an example in V8 and
62:57 - then right underneath it an example in
62:59 - v9 for things like adding things to the
63:02 - database deleting things editing things
63:05 - um adding one thing adding multiple
63:07 - things Etc and I took that
63:10 - guide and I gave it to Chad GPT and I'm
63:13 - like these are the instructions on how
63:14 - to go from V8 to
63:17 - v9
63:19 - and I just then let it run and after it
63:23 - ran it learned v9 how v9 works and
63:28 - that's exactly how you would teach a
63:29 - human that's exactly how I teach myself
63:31 - and ever since then my Chad gbt had
63:33 - learned how v9 works so then anytime I
63:36 - asked it to write code it would just
63:38 - give me in the v9 form that I asked for
63:41 - so it's something new that it learned
63:43 - and that was I thought a very cool
63:45 - application of this exact thing and
63:47 - that's the skill that you will need to
63:48 - start focusing on developing you know
63:50 - skills like
63:52 - that so the the vanoyan architecture
63:55 - has served us well for many decades this
63:59 - is the new
64:00 - architecture and the new architecture
64:02 - you give it a program in natural
64:04 - language you use a language model that
64:07 - then can call out to external systems
64:10 - and software as
64:12 - peripherals it can store results and
64:15 - tasks in its memory assisted by things
64:18 - like vector databases and so forth M and
64:20 - it can run autonomously in a cycle
64:23 - executing this program
64:25 - creating tasks accessing outside data
64:27 - sources generating new knowledge and so
64:30 - forth and tons of people are out there
64:32 - and we are too building things that
64:34 - effectively work this way and I think
64:36 - this is kind of a new computational
64:38 - architecture that we see emerging right
64:39 - now and I don't think anybody we don't
64:42 - have it right nobody has it right but
64:43 - this is we're seeing the inklings of it
64:45 - right what we have today is kind of the
64:47 - you know like the equivalent of I don't
64:49 - know the pdp1 or the apple one of this
64:52 - architecture coming together
64:56 - so um I'm legally mandated to pitch my
64:58 - startup okay so before he goes into his
65:02 - pitch Yeah so basically when I look at
65:05 - this let's go to the actual photo of
65:08 - this so yeah basically large language
65:12 - model will need a way to interface with
65:14 - the outside world and this is where
65:16 - external tools pereral come in so let's
65:19 - say you ask Chad GPT to make an app that
65:23 - can tell
65:25 - user the weather okay what the current
65:28 - weather is in their City chpt doesn't
65:31 - have that data off hand right it won't
65:33 - know the weather today or the weather
65:36 - tomorrow Etc and so Chad GPT the natural
65:40 - language program will go out to an
65:43 - API and then ping that API and that API
65:46 - will get the weather data Etc it'll do
65:49 - all the tasks it need to do to get that
65:51 - and then it'll store it in memory and JP
65:54 - will use something like a vector
65:55 - database you don't have to worry about
65:57 - it basically it gives it like long-term
65:58 - memory so chpt can remember even after a
66:01 - long conversation what the weather was
66:04 - Etc and then chpt will be able to show
66:07 - that back to the user so that's an
66:08 - example of how you could build a program
66:10 - with
66:11 - it but that the coding part right the
66:14 - API part and tasks part all of that will
66:16 - be handled automatically so here's what
66:19 - we're going to do because I have a
66:20 - meeting right now we're going to turn
66:22 - this into part one so said this is part
66:25 - one of end of
66:27 - programming and you know especially with
66:30 - large language models there and if you
66:32 - enjoyed it let me know and comment below
66:35 - asking part two okay if you comment
66:38 - below part two I will drop part two of
66:41 - this because they'll tell me you guys
66:42 - are looking forward to that and outside
66:44 - of that I just want to let you know
66:46 - again if you want to build apps with AI
66:49 - and chat
66:51 - GPT we're doing that okay we have so
66:55 - many students that if I go you the wins
66:57 - they're building their apps we just had
66:59 - a student built his first app 16 hours
67:01 - ago we have all these other students
67:03 - that are building their own apps right
67:05 - we have a huge Community we have
67:07 - students who are not only building their
67:10 - first app but actually even selling
67:12 - their first app and so Kyle actually
67:15 - made his first sale of the app that he
67:17 - built right and we have these students
67:20 - building these apps within minutes at
67:24 - times and the the results of all of them
67:27 - are absolutely incredible and the list
67:29 - just goes on right like Helm goes I
67:32 - finished the first app in about 30
67:33 - minutes so if you want to get these
67:36 - skills and learn exactly like these
67:38 - students did right Janette goes my dream
67:41 - was to be a programmer I'm 52 and I've
67:43 - not made that dream a reality and one
67:45 - day with this program I built my first
67:46 - app so if you want to learn how to do
67:48 - that I put together a free training for
67:50 - you click the link below and go watch
67:53 - that training absolutely unbelievable
67:55 - it's only 19 minutes long and it has the
67:57 - potential to change your entire life so
68:00 - I recommend go click that watch it I
68:03 - love your beautiful face and I'll see
68:05 - you you you in the next video peace

Cleaned transcript:

all right folks today we got an exciting video ahead large language models as is the end of programming this is a talk by Dr Matt Welsh that took place at cs50 I've been wanting to watch this video for a while but I was holding myself off from watching it because I want to watch it with you guys and react to it with you guys because I think this is going to be amazing so I'm really excited to watch it so it's going to be real time we're going to watch it together and I'm going to break down my thoughts on whether the end of programming is here or not and what my thoughts are on that so with that said let's just jump right into it and before we begin I do want to let you know that if you want to learn how to build apps with Chad GPT and Ai and learn how to use that to make money in as little as eight weeks with those skills like a bunch of my students have like Naza who's in the course right now that within 30 minutes of joining he actually built his first app so if you want to be able to learn those types of things I put together a free training for you where I'll give you three AI SAS app ideas that you could actually build this week I'll also show you the best ways where you can build an app production ready app that would have taken people months and how you could actually do that within a couple of days all of that stuff and more in the free training that I've put together for you so go ahead click the link below and sign up for that free training with that said let's continue so I'm here to tell you that the field of computer science is doomed that's a banger okay um and and I actually kind of mean this although I'm going to put it in somewhat humorous terms that uh if you think about computer science what is the field about what does it mean where did it before he even continues I just want to add here like let's see where he's going to go with it right but look at that translating ideas into program that's what computer science has always been about and so if you go back in the day before it was playing with logic gates directly then we went to a higher level language which was like assembly and then after assembly we got higher level languages like Java and then we started getting languages like JavaScript and Python and so if you look we kept going higher and higher level than bits and bytes so just just like just pure sheer logic think through that think through the evolution of vehicles and Technology automotive technology you had people walking then you had people probably trying to ride a [ __ ] Turtle realizing you can't ride it [ __ ] somebody's probably tried to ride a cheetah and lions and they died and somebody tried to ride a rhinocerus and died and finally they figured out that horse is the thing that you can ride like how insane do you have to be right to try that like who the [ __ ] was the first person to discover that a horse could be rode and trained like so many people died probably just trying to figure that out and then you had horses and then you had the next level up which ended up becoming like these carriages you could just sit inside the carriage while the horse dragged it and then horsepower and the thought of the carriages and the horses and they're like what if we could just turn it where it doesn't even need a horse and then it turned into Automobiles and then automobiles were like this great thing and then we discovered I don't know what the order of it is right but like we discovered trains at some point and we figured out airplanes at some point and we just figured out faster and faster and better travel before you have to swim and they figured out boats and so I just think about it like that logic gates assembly JavaScript AI right and the idea of AI is turning natural language ideas into programs so that's just what I'm thinking let's keep going come from what is it what's the core idea of it it's the idea of taking an idea an algorithm or a concept or a data structure and translating it into a program that can generally be run by like a Von noyman architecture machine right okay so that's computer science in a nutshell the problem is that um the the goal of Cs has always had this kind of core fundamental assumption or Axiom that is that the programs that we're all talking about here have been implemented maintained and have to be under understood by humans right that if I print out the code for a program a human some human maybe not everyone but at least maybe the person who wrote it if not someone else can understand it now here's humans suck at all three of these things we're terrible at writing programs we're terrible at maintaining them and we're absolutely terrible at understanding them so what does that really mean for the field so I want to make this claim that 50 years of research into programming languages has done effectively nothing to solve this problem we've been at this for a long time now 50 years is a long time and we keep inventing new languages and new programming Concepts and new abstractions and new data types and new proof method methodologies but so what does this mean this means that remember before we had JavaScript we had Java right and we had all these other languages we had assembly and then it was like okay we need to take assembly and make it easier so humans can write a easier if then statement than figuring out where to allocate memory for this if Den statement and so we got higher level and then it became easier and then we went even more higher level right with JavaScript and python Etc but basically his point is that th that 50 years has effectively done nothing we got typescript and we got react to make JavaScript easier and then we got next to even make that easier and then there's a framework for every single thing angular and while these are leaps and incremental improvements and it does make programming easier these are not Quantum leaps I think that's what he's trying to say here particularly right no amount of improvement to type systems debugging static analysis lynches or documentation is going to magically solve this problem is the idea here new solve this problem and I don't think another 50 years is going to solve it I think we've this idea of building automated tools to help humans write better software has played itself out valid now if you disagree with me let's just take a look at kind of the history here so let's rewind the clock all the way back to 1957 this is Conway's Game of Life implemented in Fortran I don't remember which dialect of Fortran this is but you know Fortran came about in about 1957 I I just claim this is really hard to understand I yeah that um let me see if I can try to understand this so do something 200 times between the range of 1 and 10,000 I don't know if that's right or not call off Tech if CD 7. eq. one4 go to 300 holy [ __ ] yeah I'm I'm lost there's something like database type that I see uh here database type yeah I'm kind of lost I mean I I see if and else if and else and then that has a nested if and all that and then continue but yeah it's real real hard to understand what's happening and I imagine it's something you're kind of doing at a pretty low level I I just claim this is really hard to understand I I claim that you can't look at this and unless you had some idea of the intent of the programmer what the hell does this do you could work it out you could spend some time reading it you could probably understand it with some effort but it's not trivial it's not straightforward yeah his point is that regardless of how nicely the code is written it still takes time to understand the logic of it and how it's working so there's still a lot of computational processing required for our brains and our brains aren't very good at that for humans our brain strength is creative thinking computers are really good at that okay so we tried to make program by that I me meant programming and logic programming easier we came up with something called basic in 19 64 this is not the original basic again it's had many dialects because obviously the first one wasn't good enough we had to keep improving the language that [ __ ] looks nasty this is the same program in basic I don't think this is any easier to understand okay I could spend some time reading it and convince myself that it does a certain thing but it's quite challenging to get so that is nasty if I if I had to start programming like that I would be pretty offut by programming then we came up with APL this is Conway's Game of Life and APL I would say raise your hand if you understand this but I know there's probably a few people in the audience who do I don't right this is a programming language so complex you needed a special keyboard to type it okay but this is what we thought was the practice of developing programming languages back in the 60s was this certainly a doesn't do the job all right well I've been talking about stuff that's kind of old fashioned what about the the new hotness let's talk about rust everybody's programming in Rust it's the latest and greatest thing since sliced bread I spent two years running engineering at a startup that was completely rust based I ran a big team full of rust developers I actually learned rust myself kind of this is the same program in Rust I don't make heads or taals yeah so basically he's like I'm not making heads or tails of this so he also has similar problem problem with this and yeah I mean even though you got some functions that make things nicer right you got functional programming you got a filter you're mapping through things and you got something happening here and you got a you know function called generation and you have it returns a colony class type or Colony type something along those lines like this here returns a hashmap and so we have somewhat understanding of this like we're making a new hash M here but do I really know what every single thing is happening and if I try to figure it out it would take a long time you know like the [ __ ] is going on here bro asterisk and sense. entry like what is that um and yeah I mean I have not really played around with rust but like you could there's some Java scriptin to it and a little bit of how it's written or some Ruess into it but ultimately it's still like hard to understand of this it is incredibly hard to write programs that are easy to understand easy to maintain easy to reason about okay so that's the kind of stateoftheart this is where we've gotten in 50 years from Fortran to this and I just want to make the claim that this is not this is not going to work okay we're done game over so what's next I love this guy well this is how I write code today let's go this is a prompt passed to the GPT for I get so much [ __ ] hate if I showed you let's go to my Instagram and I just want to show you the hate I get like look at this this is a post I made where I said programming will be dead soon and I said 2028 now it might be 2032 2035 but the idea is that I do think that coding as we know it is going to be dead and it's going to be something different meaning that it might turn more into prom engineering and idea generation and like you could see the hate that I got right influencers what you influencers get by creating unnecessary chaos among the community you guys are screaming like if you don't know or don't follow this you will be dead this video is a reason to unfollow you let's go look at find all the nasty negative comments God damn this is so untrue and very misleading so true unfollowed with pleasure LOL and the list just goes on right I made another post talking about all the negative comments that we got on this and so much hate and here's what I have to say to that right you can choose to be uh what do they call it you could choose to be um duck and put your head in the sand and just mute everything out and just be like everything is going to be fine but here's the thing all these programmers that are cuddled up in a circle jerk right now crying in my comment section of my posts telling me that they're unfollowing Me by leaving a comment and then and then probably unfollowing or probably not even unfollowing still following so they could just watch from the distance and [ __ ] hate here's the thing that's coping mechanism kicking in hard and I'm not trying to spread my idea isn't to spread chaos and fear so everybody just frightened is like oh [ __ ] I'm just mentioning the reality bro like this is what is happen happening this is how I'm writing my [ __ ] code I me I built a production ready app last month in one month with 100 to 150 hours of coding all by myself and that was something that before I would have had to pay three to six developers to do over 3 months and paid 60 Grand and I know because I've done that if you look at my channel oh the guy doesn't does this guy know really what he's talking talking about this this really know what he's talking about look at this I literally every [ __ ] day would build these apps who else do you know is building these app for 6 hours 8 hours 10 hours in a row we have so many apps that we've built and these were live We Built these live these aren't even all the other recorded videos that we've done so like it's not like I'm I'm building software for the first time and just some random influencer yeah there's ton of [ __ ] random influencers but like bro like look at who's talking to you I've been doing this for 7 to 8 years my first year in coding I learned it started making 100 Grand a year and then I kept scaling it from there so it's like I understand coding I get what you guys are saying I understand now let me address the hate too the the reason why I'm getting that hate is because people are scared and Afraid and maybe I'm leaning into it way too [ __ ] hard and maybe I need to change the tonality and maybe show more compassion but I'm trying to wake you the [ __ ] up because if you are not listening you're going to get wrecked and my point is you need to learn the new technologies and the new way of doing things so if you're not doing this meaning going and talking to Chad GPT to build out your programs and working with it or know how to do that you're [ __ ] behind here's a tweet by amjed mad the founder of repet okay repet just in case you don't know it and in amount of people are using it it's a valuation of this company is at a billion dollars it's a pretty big company and he's a founder of this company and he wrote this tweet on May 18th at a hackathon where a winner and this tweet got 1.2 million views right at hackathon where a winner is non Technic a nontechnical PM product manager and her work powered by repet plus AI is more technically impressive than teams of Engineers was surprised at first but it struck me that PMS must be exceptional prompting after all that is their job so I'm not telling you some random Theory stuff this is happening 9 months ago or eight months ago whatever whenever you're watching this it's January 2024 right now this is happening this is the truth this is the reality the person that won is not technical do you understand that the people that are freaking the [ __ ] out right now all technical people so either you can go into coping mechanism and regress and die off after a couple of years get replaced by these product managers who will output five times you don't need you will do it for sense and you'll be sitting there [ __ ] broke and useless or on the other side you can learn how to use these tools so you can learn to be thise effective she made this happen and made that project happen because she could prompt engineer it and she knew the vision of the project and then she worked with AI to make it a reality and that's where we're headed where ideas are being translated into programs so that's all I'm saying all right let's keep on going model and it's part of a larger program that reads in some text of a transcript that's been derived from a podcast audio feed we're feeding the transcript into the model and we're giving it these instructions we're saying please summarize the following segment of this podcast transcript only use the information in the text do not in caps this is important by the way the all caps is super important do not use any information you know about the world include the title of the podcast the name of the episode and the names of the speakers if known this English statement here encodes an algorithm it describes something that I want to do with an input data and the output data that I want and my expectations about the kind of thing that's in the output data there's a few things to notice about this the first thing to notice about this is I don't think anyone could ever write down the algorithm for what this is supposed to do in any existing programming language or any programming language that we're likely to come up with in the future how do you write this algorithm wait really is that true that's crazy can you not write this hold on let me just think about it okay provide a one or two sentence summary so that we could probably do with an algorithm send it off to an AI and it could summarize text so that's possible only use the information provided in the text huh that's kind of hard I don't know how to do that through coding that's a tough one like to tell it to only use the well well I guess if the program is offline then the only thing it has to go off off is the text I guess do not use any information you know about the world I mean I could scope it to that specific piece of text I'm giving it include the title of the podcast so I I don't I don't really know exactly what he's talking about here but let's keep going you can't right there's no pseudo code there's no proof there's no mathematical symbology here right um the other thing to notice is maybe I'm too dumb for that if you if you know let us know in the comments below at least for me I don't know about any of you do you understand this do you understand what it's saying does it make sense can you read it can you reason about what it's supposed to do yes of course right it's in plain English doesn't have to be English by the way it could be in Mandarin Chinese or espiranto have you all seen the xkcd about the guy who walks into his friend's house and he says okay Alexa order 5 tons of creamed corn okay Alexa confirm order it's how he makes sure that no one's got a speaker listening to him okay so the point being that this is now how I am actually writing code and what's funny about this is a lot of it is trial and error and experimentation by the way that's the same when I'm writing normal computer code and the other thing that's interesting about this is there's a lot so yeah trial and error is there I mean I do that too that's why I'm still spending 150 hours when I was building that app and I couldn't just do it with one prompt there was a ER then I would tell the computer again hey we got an error let's do this let's do this let's do this and I just kept working with it and making progress a lot of subtlety in terms of how you instruct the model and how you know what it's going to do with your instructions you can't write a manual that says well here's the set of words that you need to use to get the model to do X Y or Z you have to just try out certain things in this case I found out the do not in all caps really helped because I really wanted to emphasize that point to the model this reminds me of another programming language that someone came up with a while ago called intercal intercal was meant to be one of these uh kind of obscure or maybe satirical joke programming languages intercal had these interesting features like brain [ __ ] or Whit space such as you had to use the keyword please and if you use the keyword please too often the compiler would reject your program if you didn't use it enough it would also reject your program and it turned out that feature was undoc doed it's exactly like what we're doing today right we have to say please and do not in all caps to get the language models to do what we want so where am I going with all this I think what I'm saying here is we are now in an era where we have machines that can take natural language in and produce results algorithmic results computational results but for which no human has written a program in anything resembling a conventional programming language and I claim that these models are going to get so good at doing this that our whole concept of programming computers is going to get replaced over time with instructing language models to do things for us yes that I 100% agree with that that's I what I see happening right now I just I don't remember a lot of these apps I built over the last couple of months I just don't remember writing code from scratch I just really don't I just tell I'll give you an example it be like hey uh I need to make a button for a modal uh when a user clicks it it should pop this up and let them add a new todo cool and then I just I just look around wait for the chat GPT code to come in grab it put it in there Boom come right back and then just you know see if it works great it worked I have nothing to do I can continue moving if it doesn't work come back didn't work this is the error I'm getting wait for it to give me the code copy paste Works Cool mostly I'm just thinking of what feature to add what's a new thing to add and I'm thinking of the next steps rather than like um do I need to use map for this or what JavaScript algorithm do I need to use to make this more efficient o am I writing it in two for Loops instead of one oh my god did I unsubscribe from my Firebase because I'm going to get a a read of 50,000 plus reads and that's going to blow through my quota and I'm going to get end up getting charged so much I just want to make sure that my unsubscribe is done properly let me just try to remember the documentation of Firebase real quick go to stack Overflow and and look it up by some some passive aggressive nerd that wrote the top comment let me let me copy paste from him like that's where a lot of my time was going whereas like now it's like it just does it for you and it handles it it for you and I love that just makes those things simpler I don't I shouldn't really need to use my brain for like looking up documentation looking up all these things that just are very tedious and it's like I I get the point of what I'm trying to do so let's take a look at the state of programming language technology this is a programmer uh without copilot in around 2020 colorized bro this is exactly what I've been saying that is you that is you no offense if you don't use Ai and Chad GPT to help you so whether that's copilot or Chad GPT or any other tools that exist there's so many other tools that exist GPT pilot exists I was going to do a video on that but that's you this is what I was trying to say you're on feet while I'm in a car you're walking on your feet while I'm in a [ __ ] yacht or on a plane traveling somewhere and then you're trying to race with me so that's why it's so funny like that there's so many amazing parallels he's drawing here okay I think I met that guy out in Central Square this morning um and here's a programmer with copilot in 2021 right so clearly we're evolving very rapidly as a species of programmers unfortunately both of these cases are male I apologize for that so how many people here have used copilot or one of its ilk in terms of he helping you write code don't be shy I know you're Prof you're like who's my professor in here oh [ __ ] all right so copilot if you haven't used it is a complete Game Changer in terms of how real world developers write code okay yes it's also kind of a huge boost for students who want to effectively shortcut their homework speedrun if I don't have copilot I absolutely feel naked I was on the airplane out here I was writing codes yeah I just love when I'm doing copilot I use jbt more than I use copilot but I also love that it can just start to finish up the thing that I'm about to write including documentation right I'll be writing a documentation it'll just autoc complete it or if I'm writing a function it'll just autocomplete it so I really like that the WiFi was not quite fast enough so I would type out you know my half a line of code and just sort of wait for copilot to finish it for me like I always do but normally that happens in about like less than a second and this time it was just taking so long I said ah damn it I guess I have to write this myself just like I used to a year ago copilot is is incredible for a few reasons I think one of the things that people don't fully appreciate is that it keeps you in the zone of writing code it used to be the case that anytime I'd hit a little snag I'd be like oh crap I can't quite remember the Syntax for how I you know reverse a list in whatever language I'm working in yeah crap well I know where to find the answer I'll just Google it it's on stack Overflow somewhere and so I go and I Google it and I find the the thing it's probably not a direct answer so I have to kind of read the article a little bit and kind of piece together oh yeah that's the snippet I was looking for and then 45 minutes later what am I doing I'm on Reddit somewhere you know I've gone down the Rat Hole of surfing the internet I got out of the zone of writing code yeah keep you in the zone I I think people are so much more productive with this to the point where we mandated every developer our company has to use copilot yes if there's somebody not using copilot they're going to be fired well I didn't say that but kind of the idea so a lot of people that should be the idea chastised or criticized copilot for being a little dumb right it's not it's like well it's just trained on stuff it found on the internet on GitHub and homework assignments how good can it be and now I'm going to get more nerds in the comment I don't want to give my data to anybody I don't want to give my data to anybody but like your data is how it's I don't even want to get into that combat but like I remember making a video recently and everybody went and lost their [ __ ] cuz I said I love to give away my data you're like that's how it gets better share your data that's how it get better it's incredibly good it's not just parting back things that it's seen elsewhere it's interpreting your program and your intent it's looking at other parts of your code to understand what you might do next it's um understanding your data structures it's not just looking at a little context window in this current file you're editing it's looking elsewhere in the code to find something that might be relevant and the only thing that is stopping copilot from getting really really really good at this is just more data and more compute and guess what we have both of those in abundance oh yeah right there's nothing that's going to stop this from getting incredibly good overtime um so here's another kind of similar use case this is not uh copilot this is chat GPT which I'm sure we're all familiar with M but if you are trying to figure out how to do something and in this case I was you know using the Deep gram python SD again Shameless plug if you want to learn these exact skills how to build apps fast and use that to make money I will show you I've put together a free training for you I literally show you how to build apps so damn quickly it'll make your head spin and I've had count count students go through it and have that experience so click the link below you have nothing to lose watch that free training because you can gain so much and it can change your life profoundly all right click below I want to see you in that training let's keep rolling okay to transcribe audio files for this podcast thing I mentioned earlier I could have spent 15 20 minutes reading their documentation finding some example code on the internet following a tutorial or dude that's so funny because I was literally working with deep gram deep gram is actually one of the best transcription sources of available deep gram is sick is if any of you is trying to do something with transcriptions look up deep gram it's awesome their API is so good because we're all like you know programmers are incredibly lazy just say hey look I'm trying to do this thing can you just give me the code I need and it does it copilot is not just understanding homework assignments chat gbt is not just understanding homework assignment it like understands other people's apis and sdks and programming libraries and abstractions and best practices and bugs that might occur I mean it's really got a lot of knowledge and so with very little and his his uh his uh GPT here is old right you could see cut off is 2021 now that GPT has been updated cut off is actually 2023 so GPT will know like pretty much everything every programming language and documentation that you're looking up right now effort then I can just cut and paste this code right into my program and get on with my life right shell Silverstein who wrote uh a Light in the Attic this is something a children's book book of children's poetry that I read when I was a kid I saw this on Reddit a couple days ago he completely predicted this right this is 1981 you know the homework machine oh The Homework Machine most perfect Contraption that's ever been seen just put in your homework then drop in a dime snap on the switch and in 10 seconds time your homework comes out quick and clean as can be here it is 9 plus 4 and the answer is three three oh me I guess it's not as perfect as I thought it would be exactly toss a dime takes about 10 seconds it gets the answer wrong this is very much what we're dealing with today I mean with GPT 3.5 yeah GPT 4 it's a little bit better but I think with five and GPT 6 I think it'll start to give you pretty accurate answers right away by the way and this is a complete aside but I can't resist when I mentioned shelf Silverstein if you don't know what he looked like this was the cover uh the the photo on his the dust jacket of one of his first books this guy I love this guy a children's poetry book author from the 70s and that's what he looked like amazing all right so so now I want to talk about well if this AI technology is getting so good then what's going to happen to our industry what does this mean for all of us who might be looking to get jobs in this industry in the future future and expecting to get those you know big fat paychecks and stock option grants and you know buy Teslas or whatever we're expecting to do so how much does it cost to replace one human developer with AI well I did the math so let's say that a typical software engineer salary in Sil Valley oh that's really good this is the juicy part I'm excited let's see it Seattle is around 220,000 a year that's just the base salary doesn't include benefits doesn't include Equity packages doesn't include your free lunch and your bowling alley and all that kind of stuff so let's just assume that that stuff cost you know 92k a year which is again a little conservative so the total cost to your employer is roughly 300 312k for One S many working days are there in a year about 260 and so it costs $1,200 a day to employ you as a s at one of these companies fair enough $1,200 a day think about how much HP cost per day right as many queries as you want maybe $5 maybe $3 $5 think about that $1,200 divided by $5 240 times cheaper so that means for you they could hire 240 developers so I mean like you know what I mean like I hope it's adding up but I hope you're not getting scared I want to empower you that's the idea it's not so you're freaked out and like I should just quit and just do something else to just become a truck driver that's not the idea I'm trying to show you that there is a way let's keep going okay so let's do the math how many lines of code do you think an average developer checks in to the code base every day I mean finalized tested reviewed and approved lines of code most of us who worked in Industry know that the uh the median value is zero because there's so many days that you go by where you're waiting on somebody else or you're in meetings all day you didn't get anything done you didn't check it in but let's just be generous here and say it's about 100 I know 100 doesn't sound like a lot people like but I was programming all day yes but 90% of your code you ended up throwing out or somebody reviewed it and said it was no good you have to rewrite it you were trying to figure out what to do you were revamping it so like the final result of your output is something like a 100 lines of code a day that's the final result how many gpt3 model tokens is that it's about 10 uh tokens per line more or less so and the cost for GPT ooh this is strong logic right let me actually go back out so like the final how many gpt3 and the cost for dpt3 current actually this is probably a little out of date but at the time I made this slide it was 2 cents for a th tokens okay so if you do the math then the total cost for the output of one human software developer on gpt3 is 12 cents this is a factor of 10,000 12 cents I mean like look I know it's hard for maybe you or somebody who's a developer to think like this right but I'm a CEO I run a company so I think like this if I was a developer and my entire life depended on it and it was tied to my identity And if every dollar I made was from development I'd be scared shitless and I would be commenting on people's real telling them that they are scum for talking about the future of future becoming Ai and going away from coding I would be doing the same thing probably I I wouldn't I know myself but let's just say okay in some world I I might be doing something similar or at least I could understand how you would do that and and feel empowered by it in a sense of control cuz you're scared your future is about to get uh erupted right or disrupted but but as a CEO bro like give me this all [ __ ] day I don't have to deal with their headaches I don't have to deal with their emotional problems a lot of a lot of developers have health problems that I have to deal with and then they it [ __ ] up their mental stuff uh they need days off they're like so um a lot of developers they're just terrible at communication I have you you know somebody has to manage them and make sure that they're hit the deadlines and there's just so much crap and I've I've hired so many software developers on my own company and we're a small company at clever program or a tiny company imagine companies where there's hundreds or thousands of developers tens of thousands right for some companies that are big enough but there's just so much other stuff that you have to deal with and so for me it's like [ __ ] no I'm not doing this I'm not hiring the developers and that's exactly what I did when I was building my entire software where I just built it all by myself and most of the apps that we build are built with AI and it costs fraction of the price and it's amazing now I will pay somebody $800 or less and we'll build out a full app together whereas before I would have paid them 10 grand over two months 3 months and it would have taken so much time you know so not to mention like time not to mention time because people are slow and it takes them time you know all so much stuff this thing here never sleeps uh writes better code uh no days off right um like no no problems has no problems right essentially there's no problems um you know you know what I mean so it's just like not only just the cost Factor but the time Factor right does it instantly okay uh Works 24/7 so like if you just think about that it's it should I hope start to make sense where we're headed and what that means is you got to get occupied and you got you got to get equipped with the skills need needed to be in that direction meaning you need to be prompt engineering like a god you need to start developing more product manager skills Vision skills of how what features to build why to build them how they can make money for the company that you're working at no more being protected by Daddy because you're a sweetheart and a company that has a lot of money is going to protect you and provide you with safety right you want to be somebody who's actually valuable and making sure you're doing things that make that company money and so if you constant conly keep thinking like that you're going to be a valuable asset to society forever and you're going to learn these skills like prompt engineering along the way and so then your coding skills will feed into more of the prompt engineering where your coding skills will come into play is when you go get into bugs using your coding skills you'll be able to debug using your coding knowledge of the sphere of which Frameworks to use what technologies to use which apis to potentially use that kind of creative creative thinking is still valid valuble now might some of that might go away in 5 10 years because AI will start to have creative thinking too but that is the valuable asset right now so think more about that factor of 10,000 this should scare us all wow right this suggests potentially a very large shift in our industry I don't think we can ignore this and just write it off and say well the AI is not very good today so therefore it's not going to be good in 5 years right this radically changes how we think about only reason that programmers are paid so much is that it requires years and years and years of Education and Training and knowledge and specialization to be good at it but there's no reason that I need to hire a super smart you know Harvard educated student to do this if I can get chat PT to do most of the work for me and have a human typing it in yes MH there's a lot of other advantages to hiring the robots instead of the humans hey this is already I already covered all that let's go we already covered all that maybe but let's see what he says right robot's not going to take breaks the robot is not today expecting free lunches and you know onsite massage that could change the robot takes the same length of time to generate its code whether it's the rough proof of concept or the final production ready code when you go as a PM to an organization to your engineering team and you you say Okay team there's eight of you here we have to ship the billing page how soon can we do it you're going to spend at least an hour and a half having the conversation well you know like if we do it quick and dirty we can maybe do it in three weeks and if it's got to be production ready give us 12 that's another thing I didn't think about that meetings and the back and forth and all that you can have that with Chad GPT and it's almost instant you don't have to have that either you can save all that time that you normally would be wasting on meetings or you can go to the proverbial Homework Machine push the button and have the code right now right um and the other thing is yes the robot makes mistakes but those mistakes can happen incredibly quickly to the to the level of speed where iterate iterate iterate iterate iterate iterate iterate is perfectly fine you can say to the robot you know what this whole thing 5,000 source files 20,000 lines of code whatever it is blow it away start over boom five seconds later you have a brand new version of it yep try that with a live Human engineer team right so I think this is all like something that we really have to take seriously I don't think that this is just I am exaggerating for effect but the industry is going to change so you know the natural question then is well what what happens when we cut humans out of the loop how do we build software how do we ship product um I found this video on I think it's Microsoft's website and it's titled what do product managers do uh that was a little bit of an unintended joke I think because as an engineer we often go what do product managers do um but if you imagine what the software team of the future might look like well you saw that repet tweet that I showed you on Twitter that PM was killing it at the hackathon and then based on what he's saying yeah like look at that right you got a PM doing everything the this is he's actually kind of talking about that right now right AI robot makes a code which generates a code and then you got the human code reviewer so honestly what will be happening is developers will turn into code reviewers this is why in my course and in my program I'm training people to think like product managers and then use AI to build stuff and be the one to be able to review the code those are the people that are not going to get replaced this is what's happening right your your job as a developer is going to get commoditized and it's going to be down to you being a human code reviewer you understand that you're going to be a [ __ ] spell checker in a few years so if you want to be complacent and sit down on it and just be like this is it I I've made it I'm good I'm a software developer now you're going to be demoted to a spell checker my friend this is the equivalent of a spell checker so just be aware of that approach which is you have a product manager this is probably still a human taking the business and the product requirements the user requirements and translating them into some form probably English maybe a little bit technical English that you then can provide to the AI the army of AI code generators the AI code generators give you a whole bunch of code and probably for a while still we still have humans reading and reviewing the code to make sure that it does what it was supposed to do now that read is a little different than what we have today today when we review code if I have another engineer on my team writing code and I'm reviewing it standard practice in the industry is to do code review for one another we don't just check in code we read each other's code we make detailed comments on it we suggest improvements cleanups clarifications comments documentation in this case it's not absolutely essential that this code be maintainable by a human I think for a while we're going to want that right most people are not going to feel comfortable just letting the robots do all the coding but at some point as long as I can convince myself that the code does what it's supposed to do I mean it's kind of like AI cars cars that drive on autopilot without needing a driver in order for Humanity to get to get used to it I mean it'll take some time it'll be scary you'll sit in an Uber ride and you wouldn't feel comfortable driving to downtown with no driver there and the car driving itself it will freak most people out marz brownley or am I saying his name right or am I just making it up MKBHD okay maybe I'm saying his name wrong but MKBHD he made a video where he was driving a Tesla and it was riding it automatically and his heart rate was like elevated up to 140 beats per minute that is something that clearly shows you he's scared and that's the fear that we're going to have for a while right but just like a child learns to walk and learns to ride a bike the first time you rode a bike your heart was beating and you were scared the first time you were crossing the street you were probably scared just like that you know the first time you go to an interview doesn't mean all those things are bad for you the first time you public speak you're scared the first time you're you raise your hand and answer question or the Teacher Calls on you and you answer it you're scared just like that we're going to be scared initially to give up control for the code to the AI but if you saw your friend ride in a autopilot car now you'll be a little bit less scared now if you saw 10 of your friends do that you'll be a little less scared now if you found out that your entire family and all your friends have been riding in autopilot cars for years you'll be less scared if you found out you know there's millions of people now doing it you'll be less scared if you saw reviews you'll start to be less scared if you watch other people doing it on YouTube you'll be less scared and so the more accepted it gets the more of a social Norm becomes the less scary it becomes so in this case with this situation here the programming being changed and taken over by AI will start to give up more and more control and be less and less scared as it can show us it can do a good job and get us from point A to point B without us getting into a car crash and dying I don't really care how messy it is I don't really care how it's structured I don't really care how reusable it is all of those factors are only because poor humans have to Wrangle with this stuff right oh it needs to be modular we need to have abstraction boundaries right all the things you know sophomore level computer science right why for the sake of poor humans having to deal with this complex code base but if the robots are the ones generating it and we don't really need to maintain it in a conventional way why not just generate the code you need it doesn't really matter if it's duplicative or repetitive or modular or nicely abstracted doesn't matter does the job yeah I agree so one of my hypotheses around why everyone has been freaking out about chat gbt is because unlike other Industries um this revolution seemed to occur overnight unless you that's what I'm talking about this is why I'm getting the [ __ ] hate it's crazy Psychopaths insane insane I've never experienced that before but they're going crazy it's like hoorde mob but come at me I don't give a [ __ ] you know if you if you want to do that I'm happy to have a open discourse and open dialogue that's the beautiful thing about the world and our country we we're allowed to have freedom of speech so I welcome that but yeah it's sudden and happened overnight I want to let him uh speak on this more you're like a AI professor and have really been following the literature for years and years and years to most of us myself included this seemed to just go from you know AI was kind of crappy to AI was amazing literally overnight right so to use an analogy this would be as if the field of computer Graphics went from pong to Red Dead Redemption 2 in the span of about three months yes that is a brilliant analogy right people's heads would explode if that happened right but that's not what happened in graphics right in graphics it took decades to get to this point and everyone could see it gradually getting better and better and better you know I remember when Toy Story came out and that was like the first CG movie people's minds just melted watching that they were like whoa and now we watch it and you just like oh yeah that's cute you know I could render that on my laptop and scratch or whatever right the other thing that's happened I think in this field that's interesting and there's a big societal shift happening is the dialogue around our expectations of what AI can achieve and so in 1972 Hubert draus wrote this book what computers can't do and this was at the dawn of the PC era and there was a lot of popular press and dialogue around this sort of scaremongering around Ai and you know we had movies come out like war games does anybody remember that I think War Games by the way that movie is why I a computer scientist right I was like I want to be Matthew broadrick I got to watch that movie in this room with like all these monitors and my like analog modem and hacking into the school computer like that was me as a kid so at this time I think a lot of people were saying well hold on a minute computers are fundamentally dumb and they can't do these things and they never will and that was the thesis of this book here and I think that that was the sort of consensus view right we we sort of calm down a little bit about the technology we all kind of realize yeah okay visaal is not going to put me out of out of out of a job right but now Fast Forward 2014 I highly recommend this book if you haven't read it by Nick Bostrom called super intelligence this is a book that wrestles in a tremendous amount of detail with the philosophical it's called super intelligence by the I mean yeah okay you could see it my bad the moral questions of how does human society respond to an AI that is more intelligent than humans and I know we've got you know a lot of scifi around that topic but this is a very serious academic work about what does it mean for our society if we have ai that is smarter than us and people are taking that very seriously today so I think my point being that the the dialogue that we've been having in the uh in society at large has shifted away like this stuff I'm a little less you know I'm not like a theoretician I'm a practical Builder and so I am excited about what I can build today with AI and that's what I want to share with you guys right that using these tools you can be building apps today regardless of if you have coding skills or not and you can learn specifically the skills you need on the fly with AI helping you but like today there's no reason that you can't be freaking iron man everybody's an Iron Man today with their Jarvis that's how it feels to me at least when I go into Chad GPT and I start building apps with it so I want to just open your minds to that and I want you to be practical right be a practical Builder I mean all this Theory stuff is cool like what if we have robots everywhere and we feel like slaves and what if the robots kill us sure we're going to die anyways right at some point so I'm much more interested in what we could practically do with the tools that we have today and in the next couple of years what that looks like from AI as a toy to AI might actually destroy Society so let's just talk rap rapidly about the future the evolution of programming as I see it so you know in the dawn of time we had humans directly writing machine instructions and you know inputting him with toggle switches and stuff like that right that was this is exactly what I was talking about earlier in the video that was before programming and theams in higher level languages yep and then he goes then we went higher level languages that's why I'm skipping through a little bit cuz we already kind of talked about this point that he's making right now that's beond St who invented C++ so we went from like toggling switches to now C++ Plus and in modern times we have a world in which humans are writing their code but they're heavily assisted by Ai and they can get away with things like well I'll just write a comment and have the AI write the code for me right yes but my claim is that the future of this really is skipping the programming step entirely think a yeah exactly think of it I love that photo actually because it just sparked an idea in my head but AI is a new child child it's basically just like how you train so for example right I could become a programmer or I could have a child Inspire the child to become a programmer and then he or she becomes a programmer in the next 18 21 years um and then goes on and becomes an epic programmer right but then there's all this time and cost and so much random [ __ ] right where with AI there there isn't that like you teach the AI model how to think or how to solve a and like you could Inspire an AI probably in the future to become a computer scientist and then it goes on to become a computer scientist and then it goes on to become the best computer scientist in the world and it goes on to build the best apps and all of that happens within maybe a couple of minutes maybe within a week you know just like the AI that sat down that taught itself chess and then 24 hours later it beat Magnus Carlson who's the number one chess player in the world a lot of people who've read my article on this topic is in the C misinterpreted it as saying AI is going to write code for us therefore programmers should not exist I'm not saying that that's very important so I'm going to repeat that AI is going to write code for us therefore programmer should not exist okay so this is my point that I've been saying even if traditional speaking programming is going to die right I have to write a headline to get people's attention that's what everybody does but it's not that it's not true it's that programmers role will shift heavily and I want to catch your attention by Shocking you and then I want to show you what's the way that you can go so this is exactly what he's saying where're programmers is isn't that programmer shouldn't exist but programmers are going to evolve to prompt engineering and building apps they're going to get promoted into a product manager role where they're going to be product managers and maybe even human reviewers you know code reviewers or they're going to have human code reviewers underneath them but that's I believe where the shift will be going I'm not saying that I'm actually saying something much worse which is you won't have to have programs at all you just tell the language model what you want and it directly computes the results he went even one step further than me there's no program step and I I think that opens up it is an interesting challenge for our field but I think it opens up a tremendous opportunity because now the question is how do I effectively teach these models what to do coming back to my example earlier of having to use the words do not in all caps what are the best practices and Beyond best practices can we turn this from effectively a dark art into a science into that is actually one of the things that I discovered when I was doing so these are the skills you're going to need to develop and I agree with him where he's going with this but when I was building my own app um a lot of the time that I I I spent was discovering the dark arts of how to coax and chus and guide Chad GPT into the app that I was trying to get it to build and it was me just learning all these tricky prompt engineering hacks the one for example he shared with you where he writes do not ENC caps and that enforces a certain Behavior then you know for example I was teaching it with I was giving it certain examples of things it should be able to do or things it shouldn't be able to do but then what happened was when I was giving it those examples it started adding specific text from those examples and everything that it did so started having a bias because of the example and I was like damn that's also what I didn't want so then I had to like keep tweaking it until I got the answer that I wanted and so there's there's a back and forth dance and that's where I'm saying you need to be spending time in because that's where I was spending time in and it's like it's creativity and science combined on how you can get it to do the thing that you want it to do that's where we're I believe where we're headed and where you're going to get the most value do an engineering discipline and people have talked about prompt engineering as a thing I I think that's meant kind of tongue and cheek it's not really prompt engineering is not really a thing yet but it may well be in the future if we do this right so um one of the things that people often say about these models is that there's no way they can do anything interesting or creative because all they're doing is autoc completing based on large corpor of text that they've seen and been trained on that's [ __ ] I've done like it's true in terms of they've been trained on historical data but I've had it solve a lot of unique problems that have never been solved anywhere before and it was able to put those things things together and so I know firsthand that that's not the case I beg to differ now we obviously don't really know what's going on inside these models but if you ask a large language model to take a complex problem and effectively run a computation that is to manipulate a model of the world in its mind in this case I've come up with a simple problem here I've said I've got three stacks of cards red green and blue cards and they're all shuffled up in the following way please tell me how to lay them out into three stacks one red one green one blue simple problem right a child could do this now the key phrase here was as was discovered not long ago a couple you know few months ago you have to say the words the magic words let's think step by step if you say that to the model that somehow triggers it to go into computation mode now it's no longer just parting back some answer it's actually going to say okay well I have to actually elucidate each of my instructions and so it does it absolutely does it mhm and the fact that it's able to manipulate some kind of internal model of this stack of cards that I described and and and tell me exactly how it's going to work and and it's correct you know is fascinating to me it's not hard to trip it up there's plenty of places you can give it a problem and it's going to immediately fall over and go sorry it's going to give back bogus results so the question is why you know what do we do in this case how do we understand what the limits of this these models are so I do think that over time we're going to get to a place where programming ends up getting replaced by teaching new model uh teaching these models new skills yes so programming would get replaced by teaching these new models new skills and teaching them how to interface to apis and pulling data from databases and transforming data and how to interact with software meant for humans that's going to become an entire discipline right there um and one way of thinking about where this might go is what I like to call the natural language computer like for example I wanted to use v9 of Firebase which is the newest version of Firebase I couldn't do it because Chad GPT had a cut off or something and so Chad GPT didn't know about the newest version of Firebase it knew about the old version of Firebase I believe V8 and I got it to write my code but it wrote it all in V8 the older version and so it kind of threw my entire app off because my app was requiring that I put it into v9 and I tried to look online and there weren't a lot of there wasn't a lot of gr there there was some documentation but I needed Chad GPT how to convert from V8 to v9 I needed to teach it how to convert that and there was a guide by fireship that shows you exactly an example in V8 and then right underneath it an example in v9 for things like adding things to the database deleting things editing things um adding one thing adding multiple things Etc and I took that guide and I gave it to Chad GPT and I'm like these are the instructions on how to go from V8 to v9 and I just then let it run and after it ran it learned v9 how v9 works and that's exactly how you would teach a human that's exactly how I teach myself and ever since then my Chad gbt had learned how v9 works so then anytime I asked it to write code it would just give me in the v9 form that I asked for so it's something new that it learned and that was I thought a very cool application of this exact thing and that's the skill that you will need to start focusing on developing you know skills like that so the the vanoyan architecture has served us well for many decades this is the new architecture and the new architecture you give it a program in natural language you use a language model that then can call out to external systems and software as peripherals it can store results and tasks in its memory assisted by things like vector databases and so forth M and it can run autonomously in a cycle executing this program creating tasks accessing outside data sources generating new knowledge and so forth and tons of people are out there and we are too building things that effectively work this way and I think this is kind of a new computational architecture that we see emerging right now and I don't think anybody we don't have it right nobody has it right but this is we're seeing the inklings of it right what we have today is kind of the you know like the equivalent of I don't know the pdp1 or the apple one of this architecture coming together so um I'm legally mandated to pitch my startup okay so before he goes into his pitch Yeah so basically when I look at this let's go to the actual photo of this so yeah basically large language model will need a way to interface with the outside world and this is where external tools pereral come in so let's say you ask Chad GPT to make an app that can tell user the weather okay what the current weather is in their City chpt doesn't have that data off hand right it won't know the weather today or the weather tomorrow Etc and so Chad GPT the natural language program will go out to an API and then ping that API and that API will get the weather data Etc it'll do all the tasks it need to do to get that and then it'll store it in memory and JP will use something like a vector database you don't have to worry about it basically it gives it like longterm memory so chpt can remember even after a long conversation what the weather was Etc and then chpt will be able to show that back to the user so that's an example of how you could build a program with it but that the coding part right the API part and tasks part all of that will be handled automatically so here's what we're going to do because I have a meeting right now we're going to turn this into part one so said this is part one of end of programming and you know especially with large language models there and if you enjoyed it let me know and comment below asking part two okay if you comment below part two I will drop part two of this because they'll tell me you guys are looking forward to that and outside of that I just want to let you know again if you want to build apps with AI and chat GPT we're doing that okay we have so many students that if I go you the wins they're building their apps we just had a student built his first app 16 hours ago we have all these other students that are building their own apps right we have a huge Community we have students who are not only building their first app but actually even selling their first app and so Kyle actually made his first sale of the app that he built right and we have these students building these apps within minutes at times and the the results of all of them are absolutely incredible and the list just goes on right like Helm goes I finished the first app in about 30 minutes so if you want to get these skills and learn exactly like these students did right Janette goes my dream was to be a programmer I'm 52 and I've not made that dream a reality and one day with this program I built my first app so if you want to learn how to do that I put together a free training for you click the link below and go watch that training absolutely unbelievable it's only 19 minutes long and it has the potential to change your entire life so I recommend go click that watch it I love your beautiful face and I'll see you you you in the next video peace
