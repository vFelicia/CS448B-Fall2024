With timestamps:

00:00 - how you guys doing let me know in the
00:02 - comments
00:03 - who excite who is excited and who like
00:06 - the new
00:07 - intro that we got what's up amanoth
00:10 - how's it going dude
00:11 - hey what's up guys how's it going this
00:14 - is amanda so
00:16 - nice to see y'all what is up
00:19 - everybody let's drop it in the comment
00:22 - section how you guys
00:23 - feeling where is everybody coming in
00:26 - from
00:27 - and yeah hey we got a thorough
00:30 - in the house pummed super fun the intro
00:33 - was cool
00:34 - nice thank you so much bro and yeah we
00:37 - go
00:39 - yeah we got lots of
00:43 - improvements for you guys okay we got
00:46 - good stuff
00:47 - yeah cool nice okay
00:51 - so what are we gonna be talking about
00:53 - amanot what's up
00:55 - so today we're gonna be talking about
00:58 - git 101
00:59 - so what is good why we should use git
01:03 - and how we're gonna install git and
01:06 - also some nitty gritty of gate
01:10 - so without further ado let's dive right
01:12 - into it
01:13 - exactly okay uh let me quickly get
01:17 - our presentation that we prepared for
01:20 - you guys
01:22 - so i think we
01:25 - should be good with this one yes
01:29 - okay amanda this is your
01:32 - uh your end of the presentation let's go
01:35 - and
01:36 - yeah i think i'll just turn turn this
01:40 - okay so
01:43 - because we we mac users don't really
01:47 - have to
01:48 - worry about installing git on our
01:50 - computers because it's actually
01:51 - pre-installed
01:52 - out of the box uh that's actually a nice
01:55 - thing
01:56 - but for windows users it's not the exact
01:59 - case
01:59 - amano do you want to tell a bit more
02:01 - exactly
02:03 - so david uh you can drop the link
02:06 - in the chat so people who don't have git
02:09 - installed
02:10 - can install it so the thing is
02:13 - yeah go on go on get installed on their
02:16 - computers automatically
02:18 - but windows that's not the same so if
02:21 - you don't have
02:22 - get installed as a developer then you
02:25 - are losing out a lot of stuff
02:26 - so you got to get get installed so
02:30 - go check out that link in the uh
02:33 - chats and install git so it's quite
02:36 - simple
02:37 - just download git and pretty much the
02:40 - same thing that you do
02:41 - to other software that you install on
02:43 - windows just click install
02:45 - click yes when they prompt with the
02:47 - credentials and all those stuff
02:49 - and you're good to go okay let me
02:52 - quickly
02:52 - pull up that page you just uh
02:56 - told me and okay so
03:00 - quickly now you guys should be seeing
03:05 - what i'm seeing it's actually the
03:07 - official
03:08 - way to download git the version control
03:11 - so it's not github we want to clarify
03:13 - that that
03:14 - git is actually the version control
03:17 - uh which you can go ahead and download
03:20 - so get
03:20 - is kind of like the local stuff
03:24 - like it's it's inside your computer and
03:26 - github
03:27 - is a place where you host your code
03:29 - online so
03:30 - you just get to host your code online on
03:33 - github
03:34 - so git is something that's local and
03:36 - installed
03:37 - on your computer exactly that that is
03:40 - correct
03:41 - uh i'm just gonna drop it in the comment
03:43 - section uh
03:44 - where where to download this and oh my
03:48 - god
03:49 - we have 440
03:53 - concur concurrent viewers guys
03:57 - yeah exactly thank you so much
04:01 - guys for sticking here with us uh i just
04:03 - dropped in the link by the way
04:05 - thank you so much guys uh for staying
04:08 - here with us and
04:09 - if you guys find value out of this one
04:12 - smash that like button right smash it
04:16 - exactly just break it guys exactly
04:19 - okay um so
04:22 - um on downloading and installing git
04:25 - for windows there's this 32-bit and
04:28 - 64-bit setup so
04:30 - if you're using a 32-bit windows
04:33 - so you can check it out and if you go to
04:36 - system info
04:37 - you'll be and scroll down you'll be able
04:39 - to find if your machine is 32-bit or
04:41 - 64-bit
04:42 - and if it's a 32-bit download the 32-bit
04:46 - for kit for windows setup and if it's a
04:48 - 64-bit
04:49 - download the 64-bit setup exactly i'm
04:52 - pretty much it
04:53 - yeah that's right that's right okay uh
04:56 - i just heard i just saw a couple of
04:58 - notifications that
05:00 - uh my audio is not good i think i raised
05:02 - my volume and
05:03 - now it should be good okay so because
05:06 - i'm using a mac
05:07 - i'm not gonna download it but you guys
05:09 - can go ahead and just pretty much like
05:11 - hit
05:11 - one of these buttons and then just go
05:13 - ahead and download
05:15 - uh get version control for yourselves um
05:19 - now that we have our git installed on
05:23 - our computer
05:24 - uh next thing what is actually good
05:28 - can you can you drive us into what it
05:31 - actually get
05:33 - so get is called a version control
05:36 - system so get buzz
05:38 - i don't need to go deep into the history
05:40 - but it was developed by linux to also
05:42 - the creator of linux so what you do
05:46 - with kit is not so you don't use git
05:49 - for version control with code but you
05:51 - can also use it
05:53 - for files and almost anything like that
05:56 - changes a lot in your computer like you
05:58 - might have a word document
06:00 - that changes a lot so you can use git
06:04 - to you know check the versions of your
06:07 - so most of the but you don't choose it
06:10 - with word documents but most of the time
06:13 - you use it
06:14 - with code so why do you use it like
06:16 - suppose
06:17 - me and david are working on a team
06:19 - together
06:20 - and we are working on different parts
06:23 - suppose
06:24 - he's working on the header component and
06:26 - i'm working on the footer component
06:28 - and now we gotta have a repository so
06:31 - what we do
06:32 - we host our code online and then what we
06:35 - do
06:36 - we have our own local repositories on
06:38 - computer
06:39 - to collaborate and work together with
06:42 - the same code
06:43 - so we don't clash or you know get
06:46 - crashed with each other
06:48 - on the code that's the main reason we
06:50 - use git
06:52 - and also another reason we use gate is
06:54 - suppose
06:56 - this is something that happens a lot of
06:58 - time and also has happened to me
07:00 - that is like you spend hours and hours
07:03 - and even days and weeks on a project
07:06 - and you don't have a git repository for
07:09 - that project
07:10 - and what you do you ultimately keep on
07:12 - working every day
07:13 - and what happens after a month or two
07:17 - your code breaks some at some point and
07:20 - you get
07:21 - so frustrated you think of breaking your
07:24 - computer okay
07:25 - so git is a life saver so what you can
07:29 - do is suppose your code breaks at a
07:30 - point
07:31 - what you can do you can use gate and
07:33 - reverse back that
07:35 - error and go back like it's kind of like
07:37 - doctor strange
07:38 - it's kind of like a time machine yeah
07:40 - exactly okay so
07:42 - lucy has asked the question and do you
07:44 - execute code on git
07:47 - um nope you are you're tracking the
07:50 - versions and the changes of your code in
07:53 - git
07:54 - uh i hope this answered your question if
07:56 - not uh
07:57 - ammanat's uh instagram is over there
08:01 - um somewhere yeah and mine
08:04 - should be here and then you can go ahead
08:06 - and hit us up and we are happy to
08:09 - help you with more questions all right
08:12 - um okay
08:15 - [Music]
08:16 - awesome okay so let's actually dive into
08:20 - how to actually use gin and
08:24 - and how to work with it and i think the
08:27 - best way to understand
08:29 - what this version control is and how to
08:32 - use it
08:32 - is with a app called github
08:36 - desktop now from the name it already
08:39 - shows that
08:40 - it's actually uh
08:43 - coded into github so pretty much it's
08:46 - integrated with github
08:48 - and by default you need to
08:52 - uh sign into github with this one but
08:55 - then you can just click through
08:56 - uh the whole thing and you can upload
08:58 - your code to github super easily and
09:00 - track your changes
09:01 - super easily and change branches and all
09:03 - that stuff now
09:05 - i actually prepared with this folder now
09:07 - it's actually a completely
09:09 - empty folder nothing inside of here
09:12 - and i'm just going to go go ahead open
09:15 - up a new terminal
09:17 - and what i'm going to do is type in get
09:18 - oh first i'll zoom in so that you guys
09:21 - can actually
09:22 - see it and then change the screen so
09:24 - that you can actually see
09:26 - so uh this is the empty folder i was
09:30 - talking about
09:30 - and so this folder is just for
09:35 - the sake of today's tutorial i'm not
09:37 - going to put inside of here anything
09:40 - i'm not going to put anything inside of
09:42 - there
09:43 - but i'm just going to show some stuff
09:45 - okay
09:46 - so this is how github does also another
09:49 - thing
09:50 - yeah windows developers i mean windows
09:53 - users
09:53 - is sometimes they think like the code
09:56 - that we use
09:58 - i mean like the commands and all are
10:00 - different from mac
10:01 - to windows but the kit
10:04 - commands are pretty much the same for
10:07 - windows and also mac so
10:09 - you guys don't have to worry but you can
10:11 - use the same commands
10:12 - on windows 2. yeah yeah yeah
10:17 - um okay
10:20 - so um with that said
10:23 - so how you actually initialize get
10:25 - version control so what i
10:27 - you usually talk about is uh on my
10:30 - builds i say something like get
10:32 - in it and then this happens so
10:35 - basically what happens is it adds this
10:38 - git and master after uh the project name
10:43 - and that's pretty much initializing the
10:45 - git repository
10:46 - on my computer at this time because
10:49 - right now
10:50 - it's local it's not uploaded to github
10:54 - and also it's showing because you have
10:56 - oma is it as such
10:58 - that is correct so guys if you don't
11:00 - have it i highly recommend everybody
11:02 - goes ahead and downloads it and installs
11:03 - it
11:04 - it makes your terminal life so much
11:06 - easier
11:07 - so now that i have my get version
11:10 - control initialized hey
11:11 - i think we got frankie in a house yo
11:14 - frankie hey
11:15 - what's up frankie hi there bro nice he
11:19 - goes let's
11:20 - go hey what's up okay
11:23 - so because i already initialized git
11:26 - version control i can go
11:28 - ahead hit this button and this is pretty
11:30 - much the
11:31 - repository explorer and i could say
11:34 - add then i can say add existing
11:37 - repository
11:38 - go ahead locate this one so this is in
11:41 - clever programmer youtube
11:43 - live git 101 uh and then because
11:47 - yeah so it actually it cleverly knows
11:49 - which is a repository and
11:51 - which is not and
11:55 - if if it's not a repository it helps you
11:58 - to initialize one so that you don't have
11:59 - to worry about the get in it
12:01 - uh command and all that stuff now uh
12:04 - when i go ahead add this it's currently
12:08 - still shows that that it is only on my
12:11 - computer so if i zoom in a little more
12:13 - uh you you can see that it's only on my
12:15 - computer
12:16 - and with this publish button on the
12:19 - right hand side
12:20 - so publish repository uh i can go ahead
12:24 - and upload it
12:25 - to github guys who
12:28 - actually feels that this can this video
12:31 - can actually give them value because
12:33 - they didn't know how to use git but
12:35 - wanted to learn it and and who actually
12:38 - thinks that this
12:39 - is something that can advance them in
12:43 - in the development world okay let me
12:45 - know in the comments in the chat
12:47 - whoops let me know in the chat uh what
12:50 - you guys think
12:51 - and if this is actually a useful video
12:53 - for you because
12:54 - really we we are working super hard on
12:57 - dropping
12:58 - um so much value yeah exactly
13:01 - value and content every day and we won
13:04 - 5 000 of you guys getting jobs as
13:08 - developers
13:09 - by december 31st
13:12 - okay so if you guys
13:16 - are beginners with git this is the
13:19 - good the best place to be because we are
13:21 - right now
13:23 - helping you guys a lot with we're
13:25 - learning
13:26 - one of the most essential um
13:30 - uh one of the most essential
13:37 - exactly that's right that's right okay
13:41 - so also another thing is uh a really
13:45 - good reason why you should have get and
13:47 - gets
13:48 - github as a developer is because
13:51 - the thing is as a beginner you might
13:53 - think you might not need it
13:54 - and you might not don't need to ever
13:57 - learn that
13:58 - but when you're like applying for jobs
14:00 - or even
14:01 - going to start freelancing people are
14:03 - going to check your project
14:05 - so from where do they check your code or
14:07 - is your code clean
14:08 - do you ever know the code or they just
14:11 - copy paste and stuff
14:14 - they discover i mean like they learn
14:16 - they can learn more about your technical
14:19 - side of you from your github account
14:22 - like they can go to your repositories
14:24 - and check out the projects that you
14:26 - worked on and check out the code is it
14:29 - clean are you
14:30 - using conventions like bam and all this
14:32 - stuff
14:33 - that's exactly yeah exactly okay i
14:36 - actually showed a couple of comments uh
14:39 - who said it's super helpful oh hey we
14:42 - got monika in the house yo
14:44 - uh i'm actually talking to her on
14:47 - instagram
14:48 - yeah uh so uh
14:51 - i'm very glad that we are able to drop
14:54 - you guys super
14:55 - uh uh the these while you draw value
14:57 - bombs and
14:58 - with that said let's actually go back
15:01 - and
15:02 - start learning how to use uh version
15:05 - control
15:06 - so now that i have my repository on
15:09 - github i don't have to worry about
15:11 - um if something breaks in my code
15:14 - because i have
15:15 - a good one on the cloud always
15:18 - now i i'm just going to go ahead and
15:20 - open up a vs code
15:23 - in this project and zoom in first
15:27 - so that you guys can actually see what
15:29 - i'm typing in here
15:31 - and what i will be doing is add a app.js
15:35 - file i'm not going to be doing any
15:38 - coding
15:39 - apart from this this is just
15:41 - demonstration purposes okay
15:43 - so what we will be doing here is pretty
15:46 - much just
15:46 - uh add a console log and just show you
15:50 - guys what is happening
15:51 - so you can already see that there is the
15:54 - letter u
15:55 - which is i think it's an i don't know
15:58 - it's some
15:58 - something something uh something new it
16:00 - already shows that the git version
16:02 - control
16:03 - has um has seen some kind of changes uh
16:08 - yeah and if i go in here into github
16:12 - desktop it shows me
16:13 - what i've changed now what i can do
16:17 - i can go ahead and commit this change
16:20 - but first
16:20 - i need to add a message like a comment
16:23 - message right
16:24 - why should we call it a mount let's say
16:27 - we created uh app.js file
16:31 - okay uh app.js
16:36 - created okay this is pretty much
16:38 - literally
16:39 - the exact same command if somebody is
16:42 - has done it
16:43 - uh with uh the terminal it's
16:46 - pretty much like saying git commit uh
16:49 - and dash
16:51 - am and add.js
16:55 - i think it's just dash m right um
16:58 - could be yeah
17:02 - it's actually am okay so these two are
17:05 - actually the
17:05 - exact same but typing up all this is
17:08 - like
17:09 - super long and especially if you're a
17:10 - beginner and you want to
17:12 - be like like super fast you might
17:15 - actually prefer
17:16 - using um something
17:20 - where you can yeah exactly and and you
17:22 - can just go ahead and click i know
17:23 - that because i learned how to use git
17:26 - using this
17:27 - yes uh get a dot is actually one step
17:30 - before that
17:31 - okay um okay
17:34 - so the thing is the there are different
17:37 - commands like
17:38 - if you are a beginner and like you want
17:40 - to start with git
17:42 - the best place the best way to start
17:44 - with kit is using the github desktop
17:46 - and like once you're advancing your
17:48 - skills and like you go
17:50 - deep and like you know you learn more on
17:52 - you know the technical stuff
17:54 - you can start using the terminal because
17:56 - terminal can sometimes be like
17:59 - too confusing for you guys so the best
18:02 - best way to start with git is with
18:04 - github desktop and then moving on to get
18:07 - terminal
18:08 - yeah okay now let's go ahead and
18:11 - actually do the commit
18:12 - so uh i'm just gonna go ahead and commit
18:15 - this
18:16 - right now i did the commit on my
18:18 - computer
18:19 - okay uh but i of course i need to go
18:23 - ahead and push it up to github
18:25 - so that i have it uh up there as well
18:28 - so let's go ahead and do that
18:31 - and now if i go back to my code once
18:34 - it's finished
18:35 - cool uh if i go back to my code uh it
18:38 - actually
18:39 - git lands all that already shows that uh
18:41 - there is some stuff going on
18:43 - in here so i created this i think
18:46 - you guys can see it yeah up here so the
18:49 - author is me
18:50 - i just committed a few seconds ago all
18:53 - right
18:54 - and also another thing like people might
18:56 - think is
18:57 - like there are three ways you can work
18:59 - around with kit
19:00 - one is the github desktop then you have
19:03 - the git
19:04 - bash the key terminal and then you can
19:06 - work with git
19:07 - inside bs code like the third
19:11 - the thing that like that has that i can
19:14 - uh
19:14 - david yeah what's up uh the vs code kit
19:18 - that's integrated inside yes code
19:21 - here we go yeah exactly this one
19:24 - right yep
19:27 - yeah yeah okay
19:31 - so uh yeah so now i
19:34 - actually added another row which is
19:37 - pretty much just console logging
19:39 - change and let's go ahead and what it
19:41 - does
19:43 - uh yeah so because
19:47 - it actually says that i removed this
19:49 - line so the only thing that i actually
19:51 - removed
19:52 - is the non-enter non-line break
19:55 - end of the line if it makes sense so i
19:58 - remove the
20:00 - no line break so i actually added a line
20:02 - break that's why i get version control
20:04 - thinks it's actually a different one so
20:06 - now i don't have to demonstrate how it
20:08 - looks like when i remove a line because
20:10 - this is how it
20:10 - how it does it and now it actually
20:13 - suggests me that
20:15 - update app.js could be a
20:18 - a good way uh to
20:21 - uh name our next commit and
20:24 - i just saw another um command that i
20:28 - want to address
20:29 - um so deepak
20:32 - asks so no need to download gif if we
20:35 - already have vs code
20:36 - that is not right you need to uh
20:39 - download git because
20:40 - we as code only knows git because you
20:43 - have git
20:43 - installed right is that right am i yeah
20:46 - so
20:47 - i think you yeah yeah in windows
20:50 - you must have to download but i think on
20:54 - maybe what's up sorry you got cut out
20:58 - yeah on if you are on windows you have
21:01 - to download
21:02 - it even though you might have it inside
21:05 - vs code but
21:06 - mac i think it's the opposite yeah so on
21:08 - mac you don't need to have it
21:10 - and hey we got a five dollar
21:15 - donation from frankie thank you so much
21:19 - brother
21:19 - oh thank you thank you so much frankie
21:22 - hey
21:23 - yeah this is 350 people
21:27 - live right now and this is amazing
21:31 - thank you so much we appreciate you man
21:34 - all right let's go let's go forward
21:38 - okay so uh now i committed this new
21:41 - change
21:42 - i uploaded it uh that was pretty much
21:44 - just demonstrating how commit
21:46 - push uh how commit and push works and
21:50 - if actually ammanath was working on the
21:52 - same project
21:53 - at the same time made another change and
21:57 - hey
21:57 - we got nas in the house yo what's up
22:00 - hey what's up naz how's it going bro
22:04 - okay uh i think the whole team cp
22:07 - mansion
22:07 - is inside youtube right now yeah
22:10 - that's right actually everybody who's in
22:13 - the mansion drop a comment
22:15 - okay uh yeah so
22:19 - uh we actually covered commit so amanda
22:22 - if amanot was working on the same
22:24 - project and made a change on this
22:26 - exact same project uh
22:29 - and committed it and pushed it up to
22:32 - github
22:32 - now i had to then then i would have to
22:36 - go ahead and fetch and actually sync my
22:39 - repository
22:40 - from the cloud to down here onto my
22:43 - computer on premise
22:45 - uh so that that's that's another thing i
22:47 - wanted to
22:48 - uh just tell you guys okay
22:52 - so it's kind of like i do a pull request
22:54 - to your repository
22:56 - and then you approve it and then you get
22:57 - the code to yours exactly then i have to
23:00 - pull it down to
23:01 - my computer so yeah use with using
23:03 - github
23:04 - it's actually stored in the cloud so
23:07 - everything
23:08 - everything is centralized up there in
23:10 - the cloud
23:11 - all right now and also people might be
23:14 - like
23:14 - right now people uh have like there's a
23:18 - kind of like a trend that's going on
23:20 - about october 1st
23:22 - and like people are talking about pull
23:24 - requests for you know just changing all
23:26 - the readme files
23:28 - and other stuff yeah yeah exactly
23:30 - exactly
23:31 - all right and we also got god
23:35 - um and we also got another
23:39 - donation from winnesh thank you so much
23:42 - brother
23:43 - uh we highly appreciate you thank you
23:45 - thank you so much for staying here with
23:47 - us
23:48 - and i just got a message that maybe you
23:50 - had some echo
23:52 - but now i don't think so okay
23:55 - um oh okay yeah okay guys let me know in
23:58 - the comments if there is an echo from
24:00 - amanath
24:01 - okay uh let's go forward
24:04 - and now i'm gonna talk about branches
24:08 - and doom here we go
24:11 - uh how you cloned github repository with
24:14 - git version control
24:16 - david mute your system audio i just did
24:19 - oh no i okay now i'm muted it again okay
24:22 - thank you
24:24 - okay um so now
24:28 - oh okay now now it should be
24:31 - fixed okay
24:34 - so uh there is this comment how you
24:37 - clone the github repository with git
24:39 - version control
24:40 - so there is several ways so with github
24:43 - desktop you can actually go ahead and
24:45 - say clone
24:46 - repository and literally just paste the
24:49 - link in here and then hit clone
24:51 - that's one of the most that's one of the
24:53 - easiest way
24:55 - and the other way that you can pull up
24:56 - your terminal
24:58 - uh zoom in a little a little more
25:03 - okay and type in here get clone
25:06 - and then paste the link okay
25:10 - [Music]
25:12 - okay now we should be good all right
25:16 - um next up we will be talking
25:20 - branches so what is
25:23 - okay let's okay
25:28 - okay um so branches
25:32 - what is a branch let's actually create a
25:34 - new branch let's create a branch called
25:36 - dev and we just
25:39 - went ahead and checked it out by
25:41 - selecting it so it's super easy
25:43 - uh with the github desktop you don't
25:45 - have to worry about all this checkout
25:47 - and stuff like that
25:48 - you just go ahead select it like a
25:50 - normal user would do it
25:52 - who is actually new to coding and that's
25:54 - actually one of the
25:56 - uh best um best ways to describe
26:00 - um github desktop all right um
26:04 - and now i'm gonna check out
26:07 - dev go ahead and actually down here you
26:11 - guys can see that
26:12 - it is actually selected and
26:16 - if i go ahead and make a change so let's
26:18 - say i delete this
26:19 - line of code and hey we just got another
26:22 - lovely donation
26:24 - thank you so much uh we really
26:26 - appreciate you bro i think it's it's
26:28 - actually your second one
26:30 - oh nice so um
26:33 - oh i'm getting a lot of donations
26:36 - yeah exactly so details regarding git
26:39 - pull and push
26:40 - using a vhc and a bash
26:43 - um what do you mean
26:46 - so using we as code
26:50 - i mean you can do it with vs code uh if
26:52 - you go in
26:53 - inside of here you can do a couple of
26:55 - stuff in here but
26:56 - i'm actually not a master uh over here
26:59 - but you can literally like select all
27:01 - these stuff
27:02 - um it's like i think that
27:18 - and if you are kind of intermediate and
27:21 - advanced go with the terminal
27:23 - [Music]
27:24 - exactly yeah yeah okay uh
27:27 - all right now
27:31 - cool and so i i just removed these two
27:34 - lines of code
27:38 - and this is actually currently on
27:41 - dev right so right now uh
27:44 - dev is checked out and i'm just gonna go
27:48 - ahead do uh this under comment
27:51 - and push it up over there
27:54 - and what we will what i'm gonna be
27:56 - showing you guys
27:57 - is how all these branches do
28:01 - work um there's no echo
28:04 - okay i think i think the echo is good
28:07 - now
28:08 - all right perfect so
28:12 - right now i'm on dev but if i go back to
28:15 - master notice that i
28:18 - haven't typed a single line actually let
28:22 - me
28:22 - pull the put these windows side by side
28:24 - so i'm just gonna go
28:25 - to dev boom it disappears
28:28 - and master it goes back there so it's
28:31 - literally
28:32 - um the difference between branches now
28:34 - let me quickly
28:35 - uh pull up a little bit of white board
28:38 - or actual
28:39 - gray board and how i would uh
28:42 - describe this or or show you guys
28:46 - is uh it's pretty much like
28:50 - this is where your okay hold on
28:53 - so this is where your code will start
28:55 - from
28:56 - then you will make uh then you will make
28:59 - some changes
29:00 - and then you make a commit right so now
29:02 - your code is at that stage
29:04 - that is actually master or main branch
29:07 - now
29:08 - you go ahead do and make another branch
29:10 - it's called dev
29:11 - you make a change here and make a commit
29:14 - now you go ahead make another change
29:15 - make another commit so let's say
29:19 - uh we have like uh one console log
29:23 - over here we have uh
29:26 - something import some importing stuff
29:29 - going on here as well as
29:30 - the console log and now we let's say we
29:34 - we import two uh two packages
29:38 - let's import another one just like that
29:41 - okay
29:41 - import and do another console log so
29:44 - that
29:45 - means the dev branch is actually
29:48 - um two commits ahead of
29:51 - uh master right so i hope this actually
29:54 - made sense
29:55 - and now i'm going to merge this
29:59 - yeah go on another thing that we can use
30:01 - uh
30:02 - branches is like suppose uh
30:05 - location that you worked on is already
30:07 - on production
30:09 - and like it's already online and like
30:11 - you want to make some
30:12 - minor changes or there are bugs you know
30:15 - you want to make change you don't pull
30:16 - the website
30:17 - the whole website down and you work on
30:20 - it what you do
30:21 - you make a branch to make the changes
30:24 - and once you make the changes and you're
30:26 - sure
30:28 - you make a pull pull request and make
30:31 - the word
30:32 - like update the master branch we just
30:35 - got another lovely nice donation
30:37 - thank you so much for sticking with us
30:39 - and
30:40 - we actually have 266 uh
30:43 - no 272 concurrent viewers
30:47 - at the moment uh thank you so much
30:50 - everybody for being here with us and
30:52 - especially for
30:53 - all these lovely donations
30:57 - uh so thank you so much guys this
31:00 - actually means a lot to us
31:02 - and it's actually shows that that we are
31:05 - able to provide the value that you guys
31:08 - actually
31:08 - need so this is an awesome feedback
31:11 - thank you so much
31:12 - guys really appreciate it all right um
31:17 - let's go back to our screen so i think
31:20 - we i kind of was able to uh
31:23 - explain how these branches work uh so
31:27 - this is actually
31:28 - the last thing i wanted to uh say here
31:31 - is that
31:32 - this is when i go ahead and merge the
31:34 - code
31:35 - so that literally means that whatever i
31:38 - have on dev
31:39 - i'm gonna go ahead and pull it into um
31:43 - put it into master i'm gonna demonstrate
31:45 - it like super quickly
31:47 - um so let's actually go
31:50 - and do that right now uh yeah
31:54 - um okay i'm just gonna quickly look into
31:58 - the chat
31:59 - nice okay so the other so
32:02 - what i'm gonna do here is that because
32:04 - the master branch
32:06 - already has this line of code and the
32:09 - dev
32:09 - doesn't have it right so it is actually
32:12 - a commit
32:13 - ahead of master what i'm gonna do
32:18 - is uh pretty much just go ahead and in a
32:21 - github desktop this is actually an other
32:23 - nice and super um
32:27 - super cool thing about github desktop
32:30 - then you can go ahead and literally like
32:32 - click which branch do you want to work
32:34 - in uh merge into which one
32:36 - without actually remembering any
32:38 - keywords or
32:40 - terminal commands or anything like that
32:42 - it just makes your life
32:44 - super easy all right
32:47 - now what i will be doing is going to
32:49 - going ahead and
32:51 - choose a branch which i'm gonna merge
32:53 - into master
32:56 - click on quickly going to select dev it
32:59 - says actually it's one commit ahead
33:01 - oh it's not the arrow it's one commit
33:04 - ahead
33:05 - and it shows actually this um
33:08 - what's that called how do we call this
33:14 - i don't even know how do we call this
33:15 - symbol okay so it sold that
33:18 - uh so shows that symbol and i'm just
33:21 - gonna go ahead and merge it
33:23 - now on the master there is no more
33:26 - second line okay
33:27 - so you guys can actually see how it um
33:31 - i disappeared super quickly so
33:34 - yep and that is pretty much
33:38 - the basics uh of of uh
33:41 - git okay one more thing though is that
33:45 - if i go in here into history that's
33:48 - actually a nice
33:49 - other way oh yeah it's a tick a check or
33:51 - a tick
33:52 - okay thank you guys yeah
33:55 - gotta learn the symbols huh so
33:58 - what i can do is go back go into in here
34:01 - into history and what i can
34:03 - do is literally just go ahead and hit
34:06 - revert this commit so with that i just
34:10 - got this line back so let's say i didn't
34:12 - want to actually delete that
34:13 - line of code what i wanted to well i
34:16 - wanted to do something else
34:18 - but i can go ahead and revert that and
34:21 - that is actually the
34:22 - most powerful stuff in git so currently
34:25 - i am working with a client
34:26 - and i actually made a couple of mistakes
34:29 - and i was able to revert back and go
34:31 - back in time
34:33 - into and and roll back my code into a
34:36 - stable version
34:38 - all right so guys
34:42 - i hope everybody loved this video uh
34:45 - i think that was just a pretty much a
34:48 - rough
34:49 - uh overview on how actually everybody
34:52 - could go ahead and get started with
34:54 - git guys smash that like button if you
34:58 - like this video and if you got
35:00 - any value out of it i think we can get
35:03 - this video
35:04 - up to oh my god we are
35:07 - at 342 likes i think we can crush it up
35:11 - to
35:12 - at least three 300 and um
35:18 - 360. let's go guys smash that like
35:21 - button i'm gonna
35:22 - do got anything else to add yep so
35:26 - i wanted to say uh the thing is
35:30 - if you go check out a lot of tutorials
35:32 - and even our tutorials the thing is
35:35 - we use the git terminal a lot right
35:37 - exactly but the thing is
35:38 - if you are a complete beginner and like
35:41 - you want to understand
35:42 - how all this work like when you saw the
35:45 - github desktop you know how the history
35:47 - and all this stuff work
35:48 - but when you're working on the
35:52 - functionalities like you might you can
35:54 - memorize the
35:56 - commands and do those stuff but you
35:58 - won't actually
35:59 - understand because humans like learn a
36:02 - lot
36:03 - visually so when you see stuff visual
36:06 - stuff like you know the github desktop
36:07 - for example
36:09 - you'll understand how the function works
36:11 - so if you're just
36:12 - diving into code and like you're
36:14 - starting to learn
36:16 - start learning uh start working with git
36:18 - repositories on the github desktop like
36:21 - at least for once you start working with
36:24 - it for at least for a month
36:26 - you will understand and you know how all
36:28 - how the git repository works and then
36:30 - you can dive in
36:32 - to the git terminal so that's my advice
36:35 - for you guys
36:35 - exactly and this is not something you
36:38 - want to miss out on
36:39 - and this actually may we may have made
36:42 - it
36:43 - super simple and super basic uh this is
36:46 - actually not something you want to
36:48 - learn later you want to learn it right
36:50 - now because
36:51 - this is actually a no-go for every
36:55 - company
36:55 - if you guys don't know how to use git so
36:58 - everybody
36:59 - uses git and this is something you don't
37:01 - want to miss out on
37:02 - all right with that said guys i
37:06 - hope you guys like this video i hope
37:08 - everybody got
37:09 - well you out of it thank you so much for
37:12 - watching
37:12 - this is daywid
37:16 - and this is amman a little loading time
37:20 - thank you so much guys for sticking here
37:22 - with us and
37:24 - we will see you in the next
37:28 - video all right video peace out peace
37:32 - guys

Cleaned transcript:

how you guys doing let me know in the comments who excite who is excited and who like the new intro that we got what's up amanoth how's it going dude hey what's up guys how's it going this is amanda so nice to see y'all what is up everybody let's drop it in the comment section how you guys feeling where is everybody coming in from and yeah hey we got a thorough in the house pummed super fun the intro was cool nice thank you so much bro and yeah we go yeah we got lots of improvements for you guys okay we got good stuff yeah cool nice okay so what are we gonna be talking about amanot what's up so today we're gonna be talking about git 101 so what is good why we should use git and how we're gonna install git and also some nitty gritty of gate so without further ado let's dive right into it exactly okay uh let me quickly get our presentation that we prepared for you guys so i think we should be good with this one yes okay amanda this is your uh your end of the presentation let's go and yeah i think i'll just turn turn this okay so because we we mac users don't really have to worry about installing git on our computers because it's actually preinstalled out of the box uh that's actually a nice thing but for windows users it's not the exact case amano do you want to tell a bit more exactly so david uh you can drop the link in the chat so people who don't have git installed can install it so the thing is yeah go on go on get installed on their computers automatically but windows that's not the same so if you don't have get installed as a developer then you are losing out a lot of stuff so you got to get get installed so go check out that link in the uh chats and install git so it's quite simple just download git and pretty much the same thing that you do to other software that you install on windows just click install click yes when they prompt with the credentials and all those stuff and you're good to go okay let me quickly pull up that page you just uh told me and okay so quickly now you guys should be seeing what i'm seeing it's actually the official way to download git the version control so it's not github we want to clarify that that git is actually the version control uh which you can go ahead and download so get is kind of like the local stuff like it's it's inside your computer and github is a place where you host your code online so you just get to host your code online on github so git is something that's local and installed on your computer exactly that that is correct uh i'm just gonna drop it in the comment section uh where where to download this and oh my god we have 440 concur concurrent viewers guys yeah exactly thank you so much guys for sticking here with us uh i just dropped in the link by the way thank you so much guys uh for staying here with us and if you guys find value out of this one smash that like button right smash it exactly just break it guys exactly okay um so um on downloading and installing git for windows there's this 32bit and 64bit setup so if you're using a 32bit windows so you can check it out and if you go to system info you'll be and scroll down you'll be able to find if your machine is 32bit or 64bit and if it's a 32bit download the 32bit for kit for windows setup and if it's a 64bit download the 64bit setup exactly i'm pretty much it yeah that's right that's right okay uh i just heard i just saw a couple of notifications that uh my audio is not good i think i raised my volume and now it should be good okay so because i'm using a mac i'm not gonna download it but you guys can go ahead and just pretty much like hit one of these buttons and then just go ahead and download uh get version control for yourselves um now that we have our git installed on our computer uh next thing what is actually good can you can you drive us into what it actually get so get is called a version control system so get buzz i don't need to go deep into the history but it was developed by linux to also the creator of linux so what you do with kit is not so you don't use git for version control with code but you can also use it for files and almost anything like that changes a lot in your computer like you might have a word document that changes a lot so you can use git to you know check the versions of your so most of the but you don't choose it with word documents but most of the time you use it with code so why do you use it like suppose me and david are working on a team together and we are working on different parts suppose he's working on the header component and i'm working on the footer component and now we gotta have a repository so what we do we host our code online and then what we do we have our own local repositories on computer to collaborate and work together with the same code so we don't clash or you know get crashed with each other on the code that's the main reason we use git and also another reason we use gate is suppose this is something that happens a lot of time and also has happened to me that is like you spend hours and hours and even days and weeks on a project and you don't have a git repository for that project and what you do you ultimately keep on working every day and what happens after a month or two your code breaks some at some point and you get so frustrated you think of breaking your computer okay so git is a life saver so what you can do is suppose your code breaks at a point what you can do you can use gate and reverse back that error and go back like it's kind of like doctor strange it's kind of like a time machine yeah exactly okay so lucy has asked the question and do you execute code on git um nope you are you're tracking the versions and the changes of your code in git uh i hope this answered your question if not uh ammanat's uh instagram is over there um somewhere yeah and mine should be here and then you can go ahead and hit us up and we are happy to help you with more questions all right um okay awesome okay so let's actually dive into how to actually use gin and and how to work with it and i think the best way to understand what this version control is and how to use it is with a app called github desktop now from the name it already shows that it's actually uh coded into github so pretty much it's integrated with github and by default you need to uh sign into github with this one but then you can just click through uh the whole thing and you can upload your code to github super easily and track your changes super easily and change branches and all that stuff now i actually prepared with this folder now it's actually a completely empty folder nothing inside of here and i'm just going to go go ahead open up a new terminal and what i'm going to do is type in get oh first i'll zoom in so that you guys can actually see it and then change the screen so that you can actually see so uh this is the empty folder i was talking about and so this folder is just for the sake of today's tutorial i'm not going to put inside of here anything i'm not going to put anything inside of there but i'm just going to show some stuff okay so this is how github does also another thing yeah windows developers i mean windows users is sometimes they think like the code that we use i mean like the commands and all are different from mac to windows but the kit commands are pretty much the same for windows and also mac so you guys don't have to worry but you can use the same commands on windows 2. yeah yeah yeah um okay so um with that said so how you actually initialize get version control so what i you usually talk about is uh on my builds i say something like get in it and then this happens so basically what happens is it adds this git and master after uh the project name and that's pretty much initializing the git repository on my computer at this time because right now it's local it's not uploaded to github and also it's showing because you have oma is it as such that is correct so guys if you don't have it i highly recommend everybody goes ahead and downloads it and installs it it makes your terminal life so much easier so now that i have my get version control initialized hey i think we got frankie in a house yo frankie hey what's up frankie hi there bro nice he goes let's go hey what's up okay so because i already initialized git version control i can go ahead hit this button and this is pretty much the repository explorer and i could say add then i can say add existing repository go ahead locate this one so this is in clever programmer youtube live git 101 uh and then because yeah so it actually it cleverly knows which is a repository and which is not and if if it's not a repository it helps you to initialize one so that you don't have to worry about the get in it uh command and all that stuff now uh when i go ahead add this it's currently still shows that that it is only on my computer so if i zoom in a little more uh you you can see that it's only on my computer and with this publish button on the right hand side so publish repository uh i can go ahead and upload it to github guys who actually feels that this can this video can actually give them value because they didn't know how to use git but wanted to learn it and and who actually thinks that this is something that can advance them in in the development world okay let me know in the comments in the chat whoops let me know in the chat uh what you guys think and if this is actually a useful video for you because really we we are working super hard on dropping um so much value yeah exactly value and content every day and we won 5 000 of you guys getting jobs as developers by december 31st okay so if you guys are beginners with git this is the good the best place to be because we are right now helping you guys a lot with we're learning one of the most essential um uh one of the most essential exactly that's right that's right okay so also another thing is uh a really good reason why you should have get and gets github as a developer is because the thing is as a beginner you might think you might not need it and you might not don't need to ever learn that but when you're like applying for jobs or even going to start freelancing people are going to check your project so from where do they check your code or is your code clean do you ever know the code or they just copy paste and stuff they discover i mean like they learn they can learn more about your technical side of you from your github account like they can go to your repositories and check out the projects that you worked on and check out the code is it clean are you using conventions like bam and all this stuff that's exactly yeah exactly okay i actually showed a couple of comments uh who said it's super helpful oh hey we got monika in the house yo uh i'm actually talking to her on instagram yeah uh so uh i'm very glad that we are able to drop you guys super uh uh the these while you draw value bombs and with that said let's actually go back and start learning how to use uh version control so now that i have my repository on github i don't have to worry about um if something breaks in my code because i have a good one on the cloud always now i i'm just going to go ahead and open up a vs code in this project and zoom in first so that you guys can actually see what i'm typing in here and what i will be doing is add a app.js file i'm not going to be doing any coding apart from this this is just demonstration purposes okay so what we will be doing here is pretty much just uh add a console log and just show you guys what is happening so you can already see that there is the letter u which is i think it's an i don't know it's some something something uh something new it already shows that the git version control has um has seen some kind of changes uh yeah and if i go in here into github desktop it shows me what i've changed now what i can do i can go ahead and commit this change but first i need to add a message like a comment message right why should we call it a mount let's say we created uh app.js file okay uh app.js created okay this is pretty much literally the exact same command if somebody is has done it uh with uh the terminal it's pretty much like saying git commit uh and dash am and add.js i think it's just dash m right um could be yeah it's actually am okay so these two are actually the exact same but typing up all this is like super long and especially if you're a beginner and you want to be like like super fast you might actually prefer using um something where you can yeah exactly and and you can just go ahead and click i know that because i learned how to use git using this yes uh get a dot is actually one step before that okay um okay so the thing is the there are different commands like if you are a beginner and like you want to start with git the best place the best way to start with kit is using the github desktop and like once you're advancing your skills and like you go deep and like you know you learn more on you know the technical stuff you can start using the terminal because terminal can sometimes be like too confusing for you guys so the best best way to start with git is with github desktop and then moving on to get terminal yeah okay now let's go ahead and actually do the commit so uh i'm just gonna go ahead and commit this right now i did the commit on my computer okay uh but i of course i need to go ahead and push it up to github so that i have it uh up there as well so let's go ahead and do that and now if i go back to my code once it's finished cool uh if i go back to my code uh it actually git lands all that already shows that uh there is some stuff going on in here so i created this i think you guys can see it yeah up here so the author is me i just committed a few seconds ago all right and also another thing like people might think is like there are three ways you can work around with kit one is the github desktop then you have the git bash the key terminal and then you can work with git inside bs code like the third the thing that like that has that i can uh david yeah what's up uh the vs code kit that's integrated inside yes code here we go yeah exactly this one right yep yeah yeah okay so uh yeah so now i actually added another row which is pretty much just console logging change and let's go ahead and what it does uh yeah so because it actually says that i removed this line so the only thing that i actually removed is the nonenter nonline break end of the line if it makes sense so i remove the no line break so i actually added a line break that's why i get version control thinks it's actually a different one so now i don't have to demonstrate how it looks like when i remove a line because this is how it how it does it and now it actually suggests me that update app.js could be a a good way uh to uh name our next commit and i just saw another um command that i want to address um so deepak asks so no need to download gif if we already have vs code that is not right you need to uh download git because we as code only knows git because you have git installed right is that right am i yeah so i think you yeah yeah in windows you must have to download but i think on maybe what's up sorry you got cut out yeah on if you are on windows you have to download it even though you might have it inside vs code but mac i think it's the opposite yeah so on mac you don't need to have it and hey we got a five dollar donation from frankie thank you so much brother oh thank you thank you so much frankie hey yeah this is 350 people live right now and this is amazing thank you so much we appreciate you man all right let's go let's go forward okay so uh now i committed this new change i uploaded it uh that was pretty much just demonstrating how commit push uh how commit and push works and if actually ammanath was working on the same project at the same time made another change and hey we got nas in the house yo what's up hey what's up naz how's it going bro okay uh i think the whole team cp mansion is inside youtube right now yeah that's right actually everybody who's in the mansion drop a comment okay uh yeah so uh we actually covered commit so amanda if amanot was working on the same project and made a change on this exact same project uh and committed it and pushed it up to github now i had to then then i would have to go ahead and fetch and actually sync my repository from the cloud to down here onto my computer on premise uh so that that's that's another thing i wanted to uh just tell you guys okay so it's kind of like i do a pull request to your repository and then you approve it and then you get the code to yours exactly then i have to pull it down to my computer so yeah use with using github it's actually stored in the cloud so everything everything is centralized up there in the cloud all right now and also people might be like right now people uh have like there's a kind of like a trend that's going on about october 1st and like people are talking about pull requests for you know just changing all the readme files and other stuff yeah yeah exactly exactly all right and we also got god um and we also got another donation from winnesh thank you so much brother uh we highly appreciate you thank you thank you so much for staying here with us and i just got a message that maybe you had some echo but now i don't think so okay um oh okay yeah okay guys let me know in the comments if there is an echo from amanath okay uh let's go forward and now i'm gonna talk about branches and doom here we go uh how you cloned github repository with git version control david mute your system audio i just did oh no i okay now i'm muted it again okay thank you okay um so now oh okay now now it should be fixed okay so uh there is this comment how you clone the github repository with git version control so there is several ways so with github desktop you can actually go ahead and say clone repository and literally just paste the link in here and then hit clone that's one of the most that's one of the easiest way and the other way that you can pull up your terminal uh zoom in a little a little more okay and type in here get clone and then paste the link okay okay now we should be good all right um next up we will be talking branches so what is okay let's okay okay um so branches what is a branch let's actually create a new branch let's create a branch called dev and we just went ahead and checked it out by selecting it so it's super easy uh with the github desktop you don't have to worry about all this checkout and stuff like that you just go ahead select it like a normal user would do it who is actually new to coding and that's actually one of the uh best um best ways to describe um github desktop all right um and now i'm gonna check out dev go ahead and actually down here you guys can see that it is actually selected and if i go ahead and make a change so let's say i delete this line of code and hey we just got another lovely donation thank you so much uh we really appreciate you bro i think it's it's actually your second one oh nice so um oh i'm getting a lot of donations yeah exactly so details regarding git pull and push using a vhc and a bash um what do you mean so using we as code i mean you can do it with vs code uh if you go in inside of here you can do a couple of stuff in here but i'm actually not a master uh over here but you can literally like select all these stuff um it's like i think that and if you are kind of intermediate and advanced go with the terminal exactly yeah yeah okay uh all right now cool and so i i just removed these two lines of code and this is actually currently on dev right so right now uh dev is checked out and i'm just gonna go ahead do uh this under comment and push it up over there and what we will what i'm gonna be showing you guys is how all these branches do work um there's no echo okay i think i think the echo is good now all right perfect so right now i'm on dev but if i go back to master notice that i haven't typed a single line actually let me pull the put these windows side by side so i'm just gonna go to dev boom it disappears and master it goes back there so it's literally um the difference between branches now let me quickly uh pull up a little bit of white board or actual gray board and how i would uh describe this or or show you guys is uh it's pretty much like this is where your okay hold on so this is where your code will start from then you will make uh then you will make some changes and then you make a commit right so now your code is at that stage that is actually master or main branch now you go ahead do and make another branch it's called dev you make a change here and make a commit now you go ahead make another change make another commit so let's say uh we have like uh one console log over here we have uh something import some importing stuff going on here as well as the console log and now we let's say we we import two uh two packages let's import another one just like that okay import and do another console log so that means the dev branch is actually um two commits ahead of uh master right so i hope this actually made sense and now i'm going to merge this yeah go on another thing that we can use uh branches is like suppose uh location that you worked on is already on production and like it's already online and like you want to make some minor changes or there are bugs you know you want to make change you don't pull the website the whole website down and you work on it what you do you make a branch to make the changes and once you make the changes and you're sure you make a pull pull request and make the word like update the master branch we just got another lovely nice donation thank you so much for sticking with us and we actually have 266 uh no 272 concurrent viewers at the moment uh thank you so much everybody for being here with us and especially for all these lovely donations uh so thank you so much guys this actually means a lot to us and it's actually shows that that we are able to provide the value that you guys actually need so this is an awesome feedback thank you so much guys really appreciate it all right um let's go back to our screen so i think we i kind of was able to uh explain how these branches work uh so this is actually the last thing i wanted to uh say here is that this is when i go ahead and merge the code so that literally means that whatever i have on dev i'm gonna go ahead and pull it into um put it into master i'm gonna demonstrate it like super quickly um so let's actually go and do that right now uh yeah um okay i'm just gonna quickly look into the chat nice okay so the other so what i'm gonna do here is that because the master branch already has this line of code and the dev doesn't have it right so it is actually a commit ahead of master what i'm gonna do is uh pretty much just go ahead and in a github desktop this is actually an other nice and super um super cool thing about github desktop then you can go ahead and literally like click which branch do you want to work in uh merge into which one without actually remembering any keywords or terminal commands or anything like that it just makes your life super easy all right now what i will be doing is going to going ahead and choose a branch which i'm gonna merge into master click on quickly going to select dev it says actually it's one commit ahead oh it's not the arrow it's one commit ahead and it shows actually this um what's that called how do we call this i don't even know how do we call this symbol okay so it sold that uh so shows that symbol and i'm just gonna go ahead and merge it now on the master there is no more second line okay so you guys can actually see how it um i disappeared super quickly so yep and that is pretty much the basics uh of of uh git okay one more thing though is that if i go in here into history that's actually a nice other way oh yeah it's a tick a check or a tick okay thank you guys yeah gotta learn the symbols huh so what i can do is go back go into in here into history and what i can do is literally just go ahead and hit revert this commit so with that i just got this line back so let's say i didn't want to actually delete that line of code what i wanted to well i wanted to do something else but i can go ahead and revert that and that is actually the most powerful stuff in git so currently i am working with a client and i actually made a couple of mistakes and i was able to revert back and go back in time into and and roll back my code into a stable version all right so guys i hope everybody loved this video uh i think that was just a pretty much a rough uh overview on how actually everybody could go ahead and get started with git guys smash that like button if you like this video and if you got any value out of it i think we can get this video up to oh my god we are at 342 likes i think we can crush it up to at least three 300 and um 360. let's go guys smash that like button i'm gonna do got anything else to add yep so i wanted to say uh the thing is if you go check out a lot of tutorials and even our tutorials the thing is we use the git terminal a lot right exactly but the thing is if you are a complete beginner and like you want to understand how all this work like when you saw the github desktop you know how the history and all this stuff work but when you're working on the functionalities like you might you can memorize the commands and do those stuff but you won't actually understand because humans like learn a lot visually so when you see stuff visual stuff like you know the github desktop for example you'll understand how the function works so if you're just diving into code and like you're starting to learn start learning uh start working with git repositories on the github desktop like at least for once you start working with it for at least for a month you will understand and you know how all how the git repository works and then you can dive in to the git terminal so that's my advice for you guys exactly and this is not something you want to miss out on and this actually may we may have made it super simple and super basic uh this is actually not something you want to learn later you want to learn it right now because this is actually a nogo for every company if you guys don't know how to use git so everybody uses git and this is something you don't want to miss out on all right with that said guys i hope you guys like this video i hope everybody got well you out of it thank you so much for watching this is daywid and this is amman a little loading time thank you so much guys for sticking here with us and we will see you in the next video all right video peace out peace guys
