With timestamps:

00:00 - hey what's up guys aaron here from
00:02 - clever programmer again and today we are
00:05 - going to be going over the idea of
00:07 - immutability in Python and programming
00:09 - in general
00:10 - mutability just means or another way of
00:12 - saying it is beautiful versus immutable
00:14 - okay these are some weird birds but let
00:16 - me explain let's get started mutability
00:25 - let me just type that out you know you
00:27 - probably already saw it in the thumbnail
00:28 - on everything and the title type of the
00:30 - video but yeah so mutability what does
00:34 - that even mean
00:34 - what this means is actually it should
00:36 - have been mutate ability so muta just
00:39 - stands for mutate mutate means like
00:41 - you're changing something so mutability
00:43 - it actually means mutate ability or
00:46 - basically change ability okay so a
00:48 - beautiful thing
00:49 - is a something that's mutated an
00:52 - immutable thing
00:55 - it's something that isn't Mutato which
00:57 - means you can't change it so this is in
00:59 - changeable and this is change it would
01:00 - basically they should have called it
01:01 - changeable and unchangeable instead of
01:03 - mutable and immutable which actually
01:05 - should have been mutated and immutable
01:06 - but I don't know who came up with it
01:08 - it's just kind of silly it always
01:10 - confuses me but that's what they mean
01:11 - okay
01:12 - what this means is there are different
01:13 - kinds of data types in programming and
01:15 - Python your if you are familiar with the
01:17 - ones in Python I'm sure but some are
01:18 - mutable and some are immutable so I
01:20 - think we went over in a previous video
01:22 - about lists and tuples right so lists is
01:24 - a good example of a mutable data type
01:27 - because they can get longer they can be
01:29 - empty you can add things to them you can
01:30 - subtract things from them you can change
01:32 - the value of the elements inside right
01:34 - you can you can go like this right
01:36 - that's a list you can append things to
01:38 - it so I could append for to this and
01:40 - then I could just print this out and
01:41 - then you'll actually see that it is a
01:45 - list of all four things you guys get the
01:50 - idea so a list can change because you
01:52 - can add things to it you can subtract
01:54 - things from it and whatnot
01:55 - however a tuple is immutable right
01:58 - because remember I said that you it's a
02:01 - stable it's a consistent stable
02:03 - structured kind of data type or data
02:05 - strip it's actually a data structure but
02:06 - I'm just gonna call it data type because
02:07 - you can't add anything to it if you if
02:09 - you you can't add anything to it you
02:12 - can't delete anything from it and you
02:13 - can't actually delete you can actually
02:14 - change these elements oh you can't make
02:16 - it long you can't make it shorter and
02:17 - you can't change what these things are
02:19 - whatever it is when you create it it
02:21 - stays like that this tuple will stay
02:23 - like this one two three four ever okay
02:25 - that's the difference between mutability
02:26 - and immutability it's kind of like in
02:28 - real life like think about it like if
02:29 - you have a rock that is immutable it
02:31 - doesn't really change I mean you could
02:32 - like smash it but in general a rock is
02:34 - very hard and hard to change so it's
02:36 - immutable it's one thing that never
02:38 - changes it's what it is from the
02:39 - beginning all the way to the end but
02:41 - something that is mutable might be
02:43 - something like a key chain because you
02:44 - can take keys off you can put keys on it
02:46 - you can add things to it you can change
02:47 - the keys and it can grow and change it
02:49 - can mutate okay so that's the where the
02:51 - idea comes from um so yeah there is
02:53 - actually a lot of different kind of
02:54 - mutable data types and immunity
02:56 - immutable data types I think all the
02:58 - mutate able you can you can um google it
03:01 - all the ones that all the different
03:03 - types if you actually want to find them
03:04 - all um
03:05 - immutable types things you cannot change
03:07 - would be
03:08 - things like tuples okay tuples it's okay
03:14 - you can never change it you can only
03:16 - overwrite the entire thing oh yeah I
03:18 - forgot to mention that an immutable
03:20 - object like a tuple you can still
03:22 - overwrite the entire thing is
03:23 - essentially deleting it um but whatever
03:25 - that structure is that data itself that
03:28 - vary when it is an immutable data type
03:30 - you cannot change it
03:31 - same with intz every time you overwrite
03:33 - an in you're actually deleting it and
03:34 - replacing with a new int you're not
03:36 - actually changing the indirectly because
03:38 - you can't do that same with floats and
03:40 - boolean so I'm just gonna put all these
03:41 - together floats and boolean's and um
03:44 - strings I think I think so I think every
03:47 - time you change your string it's
03:48 - actually creating a completely new
03:49 - string datatype but I'm not quite sure
03:52 - about that but I do is just some
03:53 - examples these are immutable data types
03:56 - mutable data types would be things like
03:58 - lists because you can change them okay
04:00 - will be dictionaries
04:02 - all right order dictionaries right
04:07 - because I mentioned that that's another
04:08 - data type that we had in dictionaries
04:10 - video I didn't go into it and many many
04:14 - more most things are mutable less things
04:16 - are immutable like only a few things are
04:18 - mutable but basically these allow for
04:20 - more secure data I suppose and mutable
04:25 - things are for more flexible data so
04:27 - that's the distinction there one thing I
04:28 - do want to mention is that in
04:29 - dictionaries when you have a dictionary
04:31 - right dict like this and you have a one
04:37 - okay and b2 okay the key has to be an
04:45 - immutable thing that's why I know
04:48 - strings are immutable okay because I
04:50 - know that this has to be immutable and
04:52 - this can be anything the heck you want
04:54 - it can be anything you want the value
04:56 - can be whatever you want but the keys
04:57 - and dictionary have to all be immutable
04:59 - so this could actually be a tuple okay
05:01 - you could actually have a tuple here and
05:03 - you could say like okay on a screen
05:06 - right you have a bunch of you know X my
05:08 - positions on a screen and then you have
05:10 - a brightness so maybe if you wanted a
05:12 - you could have a dictionary that
05:14 - corresponds to be like okay at point 1 2
05:17 - at pixel 1 comma 2 so you go over 1
05:20 - pixel and up 2 pixels
05:21 - pixal like over there would have a
05:23 - brightness of one or turned on or
05:25 - something like that so you can I like
05:26 - that that's just one example that came
05:28 - to mind right now
05:29 - but yeah so you actually need an immuno
05:31 - immutable data type as the key in a
05:34 - dictionary because if you don't then um
05:37 - the key changes and then it's not
05:39 - consistent anymore this needs to be
05:41 - immutable because that's how you index
05:44 - into the dictionary the same way on when
05:47 - you index into a list you have to use an
05:49 - integer which is also mutable that
05:51 - that's just one thing I wanted to point
05:52 - out with dictionaries this has to be
05:54 - immutable okay one last thing I want to
05:57 - go over is immutable immutable data
05:59 - types are a little bit finicky you're
06:02 - probably falling up to this point this
06:03 - part gets a little bit complex but I'm
06:05 - gonna give it a shot explaining anyways
06:06 - so let's say you had a tuple okay one
06:08 - two three okay you understand that this
06:12 - is an immutable data type because I
06:14 - can't add anything to it I can't
06:16 - subtract anything from it and I can't
06:17 - change any of these individual things
06:18 - that's because this whole thing is
06:20 - actually stored as a chunk in memory all
06:24 - right well what if we actually had a
06:26 - list here okay all right so we have a
06:33 - that's a little bit oh no no this should
06:35 - be fine so we have a tuple here which
06:37 - has two immutable things two immutable
06:39 - things and then one mutable thing in its
06:41 - third place all right well let's first
06:44 - try to change something so I'm trying to
06:50 - change the first thing of this immutable
06:51 - data type this tuple you rent it gonna
06:53 - get an error see tuple object does not
06:55 - support item assignment which means you
06:57 - cannot assign any of these items is
06:59 - something new T we're trying to change
07:00 - this one - it's the same thing one but
07:02 - it can't actually changes okay same
07:05 - thing about put two I mean oops
07:08 - if I put a one here it wouldn't change
07:10 - the two here and if I put T a 2 here
07:12 - which get this list
07:13 - I still can't change it because I cannot
07:16 - assign this one to overwrite this list
07:18 - however ok T at two is a list you see
07:26 - this here it's a list one two three see
07:28 - it - so we're just gonna say okay L
07:31 - equals T at two
07:34 - get rid of that error there actually you
07:38 - know I'm not gonna do this I'm just
07:40 - gonna put it in one line so ta2 is the
07:42 - list so if we have if this whole thing
07:44 - is a list
07:45 - remember how we index into a list you
07:47 - can actually put more brackets after it
07:49 - okay and then if I put in 0 we're gonna
07:53 - get one okay
07:54 - if I put in one you're gonna get two nfo
07:57 - put in two
07:58 - you're gonna get this three because
08:00 - whatever is in here is indexing into
08:03 - this list because this whole thing is
08:04 - this whole list all right now I am going
08:08 - to show you something interesting so
08:11 - let's put let's just print T here so we
08:13 - can see the tuple I'll comment this out
08:15 - real quick
08:16 - and then print run this to see what
08:18 - happens so print out the tuple there
08:19 - okay with the list with one two and the
08:21 - list and the third one and now what I'm
08:24 - actually going to do is obviously we
08:27 - couldn't we couldn't actually change the
08:30 - entire list we've got an error before
08:31 - but could we change something with in
08:33 - this list I mean this it's if it's
08:36 - within this list it's also within this
08:37 - tuple right so you said we can't change
08:39 - anything in this tuple but a list is
08:42 - mutable a list is not immutable so we
08:45 - can still change the things in here okay
08:49 - um are you following now so we could
08:51 - actually say okay T it to is a list and
08:54 - then at 0 is this one we can actually
08:56 - change this to let's say 7 all right and
08:59 - hit run no error right no error and then
09:04 - let's print T again and see what prints
09:06 - out oops see what prints out okay
09:10 - as you can see 7 was put where 1 is all
09:16 - right but this whole tuple is mutable
09:18 - but this list is mute is mutable so we
09:21 - were able to actually change this okay a
09:25 - distinction there if this was a tuple we
09:27 - wouldn't have been able to do that okay
09:29 - if this was actually like this instead
09:31 - we wouldn't this code will actually
09:34 - break and I'll show it to you
09:39 - oh I forgot a parenthesis here run this
09:41 - and we'll get the correct error well
09:43 - we're getting the incorrect error before
09:45 - this is there I wanted to pop up I don't
09:47 - think I've ever said that before we got
09:48 - the incorrect error but as you can see
09:52 - yeah you can't change it but if this is
09:53 - a mutable data type instead of an
09:55 - immutable data type you actually can
09:56 - change it so what I'm trying to get here
09:58 - is that immutable immutable data types
10:00 - um they're only immutable at their level
10:03 - okay as their global level if you go
10:06 - within and then there's something that
10:07 - is beautiful you can still change those
10:08 - and that's because in Python this might
10:11 - go of a lot of you guys has heads but
10:12 - I'm gonna explain this cuz you might
10:13 - understand is because everything in
10:15 - Python is an object so this tuple is
10:18 - considered a pay object and it's given
10:21 - all this data as giving this one is
10:22 - given this two and it's given the
10:24 - location of this list in memory okay so
10:27 - this list and memory can change to
10:29 - whatever the heck at once but the
10:30 - location of this list will always stay
10:32 - the same it's just the list changes
10:34 - itself the values with analyst change or
10:36 - it gets longer but the the location of
10:38 - this list which is just the first
10:40 - element where the first element is
10:41 - located um always stays the same so we
10:44 - can change this list but on this tuple
10:46 - you can actually replace this list with
10:48 - location okay this is an actual issue
10:51 - code but just imagine the ID here that
10:53 - this is actually the location of
10:54 - whatever's here so the location of one
10:56 - and two is also here this is also stored
10:58 - as locations um it's called a pointer if
11:01 - you know like C or C++ but the location
11:05 - of the list does not change okay
11:07 - but the value of this list can change
11:09 - okay so that's the little distinction
11:11 - there it's a weird little edge case same
11:12 - deal if you had once again a list within
11:15 - here you could change it but if this was
11:16 - a two pole you could not change it okay
11:19 - this is getting weird and weird and
11:20 - nested so I'll go back to this simple
11:23 - case we had but that's pretty much it
11:24 - about meet ability and immutability you
11:27 - guys I just want to explain that because
11:29 - it's a distinction in Python um the most
11:31 - important use of it I know is using
11:34 - tuples for stuff for structured data and
11:35 - then knowing that a dictionary key has
11:37 - to be immutable
11:38 - okay cannot be beautiful because the
11:40 - keys have to stay consistent in
11:42 - dictionary or the name of the things
11:43 - gonna get all screwed up and it's gonna
11:44 - freak out and the world is gonna explode
11:46 - then uh transformers are gonna start all
11:49 - coming alive and whatnot but um that's
11:51 - pretty much it for mutability you guys
11:54 - thank you for watching I'm sorry if I
11:55 - got a little complex there at the end I
11:57 - get kind of nerdy and geeky and I like
11:58 - the geek out and explain all the little
11:59 - nitty gritty stuff sometimes I know this
12:01 - is the beginning of beginners tutorial
12:02 - but hey I might as well push you right
12:04 - that's all that's that's what happened
12:06 - to me when I was learning so thanks for
12:07 - watching you guys um hope you guys
12:09 - enjoyed it and I'll see you next time
12:10 - good bye
12:16 - [Music]
12:30 - [Music]

Cleaned transcript:

hey what's up guys aaron here from clever programmer again and today we are going to be going over the idea of immutability in Python and programming in general mutability just means or another way of saying it is beautiful versus immutable okay these are some weird birds but let me explain let's get started mutability let me just type that out you know you probably already saw it in the thumbnail on everything and the title type of the video but yeah so mutability what does that even mean what this means is actually it should have been mutate ability so muta just stands for mutate mutate means like you're changing something so mutability it actually means mutate ability or basically change ability okay so a beautiful thing is a something that's mutated an immutable thing it's something that isn't Mutato which means you can't change it so this is in changeable and this is change it would basically they should have called it changeable and unchangeable instead of mutable and immutable which actually should have been mutated and immutable but I don't know who came up with it it's just kind of silly it always confuses me but that's what they mean okay what this means is there are different kinds of data types in programming and Python your if you are familiar with the ones in Python I'm sure but some are mutable and some are immutable so I think we went over in a previous video about lists and tuples right so lists is a good example of a mutable data type because they can get longer they can be empty you can add things to them you can subtract things from them you can change the value of the elements inside right you can you can go like this right that's a list you can append things to it so I could append for to this and then I could just print this out and then you'll actually see that it is a list of all four things you guys get the idea so a list can change because you can add things to it you can subtract things from it and whatnot however a tuple is immutable right because remember I said that you it's a stable it's a consistent stable structured kind of data type or data strip it's actually a data structure but I'm just gonna call it data type because you can't add anything to it if you if you you can't add anything to it you can't delete anything from it and you can't actually delete you can actually change these elements oh you can't make it long you can't make it shorter and you can't change what these things are whatever it is when you create it it stays like that this tuple will stay like this one two three four ever okay that's the difference between mutability and immutability it's kind of like in real life like think about it like if you have a rock that is immutable it doesn't really change I mean you could like smash it but in general a rock is very hard and hard to change so it's immutable it's one thing that never changes it's what it is from the beginning all the way to the end but something that is mutable might be something like a key chain because you can take keys off you can put keys on it you can add things to it you can change the keys and it can grow and change it can mutate okay so that's the where the idea comes from um so yeah there is actually a lot of different kind of mutable data types and immunity immutable data types I think all the mutate able you can you can um google it all the ones that all the different types if you actually want to find them all um immutable types things you cannot change would be things like tuples okay tuples it's okay you can never change it you can only overwrite the entire thing oh yeah I forgot to mention that an immutable object like a tuple you can still overwrite the entire thing is essentially deleting it um but whatever that structure is that data itself that vary when it is an immutable data type you cannot change it same with intz every time you overwrite an in you're actually deleting it and replacing with a new int you're not actually changing the indirectly because you can't do that same with floats and boolean so I'm just gonna put all these together floats and boolean's and um strings I think I think so I think every time you change your string it's actually creating a completely new string datatype but I'm not quite sure about that but I do is just some examples these are immutable data types mutable data types would be things like lists because you can change them okay will be dictionaries all right order dictionaries right because I mentioned that that's another data type that we had in dictionaries video I didn't go into it and many many more most things are mutable less things are immutable like only a few things are mutable but basically these allow for more secure data I suppose and mutable things are for more flexible data so that's the distinction there one thing I do want to mention is that in dictionaries when you have a dictionary right dict like this and you have a one okay and b2 okay the key has to be an immutable thing that's why I know strings are immutable okay because I know that this has to be immutable and this can be anything the heck you want it can be anything you want the value can be whatever you want but the keys and dictionary have to all be immutable so this could actually be a tuple okay you could actually have a tuple here and you could say like okay on a screen right you have a bunch of you know X my positions on a screen and then you have a brightness so maybe if you wanted a you could have a dictionary that corresponds to be like okay at point 1 2 at pixel 1 comma 2 so you go over 1 pixel and up 2 pixels pixal like over there would have a brightness of one or turned on or something like that so you can I like that that's just one example that came to mind right now but yeah so you actually need an immuno immutable data type as the key in a dictionary because if you don't then um the key changes and then it's not consistent anymore this needs to be immutable because that's how you index into the dictionary the same way on when you index into a list you have to use an integer which is also mutable that that's just one thing I wanted to point out with dictionaries this has to be immutable okay one last thing I want to go over is immutable immutable data types are a little bit finicky you're probably falling up to this point this part gets a little bit complex but I'm gonna give it a shot explaining anyways so let's say you had a tuple okay one two three okay you understand that this is an immutable data type because I can't add anything to it I can't subtract anything from it and I can't change any of these individual things that's because this whole thing is actually stored as a chunk in memory all right well what if we actually had a list here okay all right so we have a that's a little bit oh no no this should be fine so we have a tuple here which has two immutable things two immutable things and then one mutable thing in its third place all right well let's first try to change something so I'm trying to change the first thing of this immutable data type this tuple you rent it gonna get an error see tuple object does not support item assignment which means you cannot assign any of these items is something new T we're trying to change this one it's the same thing one but it can't actually changes okay same thing about put two I mean oops if I put a one here it wouldn't change the two here and if I put T a 2 here which get this list I still can't change it because I cannot assign this one to overwrite this list however ok T at two is a list you see this here it's a list one two three see it so we're just gonna say okay L equals T at two get rid of that error there actually you know I'm not gonna do this I'm just gonna put it in one line so ta2 is the list so if we have if this whole thing is a list remember how we index into a list you can actually put more brackets after it okay and then if I put in 0 we're gonna get one okay if I put in one you're gonna get two nfo put in two you're gonna get this three because whatever is in here is indexing into this list because this whole thing is this whole list all right now I am going to show you something interesting so let's put let's just print T here so we can see the tuple I'll comment this out real quick and then print run this to see what happens so print out the tuple there okay with the list with one two and the list and the third one and now what I'm actually going to do is obviously we couldn't we couldn't actually change the entire list we've got an error before but could we change something with in this list I mean this it's if it's within this list it's also within this tuple right so you said we can't change anything in this tuple but a list is mutable a list is not immutable so we can still change the things in here okay um are you following now so we could actually say okay T it to is a list and then at 0 is this one we can actually change this to let's say 7 all right and hit run no error right no error and then let's print T again and see what prints out oops see what prints out okay as you can see 7 was put where 1 is all right but this whole tuple is mutable but this list is mute is mutable so we were able to actually change this okay a distinction there if this was a tuple we wouldn't have been able to do that okay if this was actually like this instead we wouldn't this code will actually break and I'll show it to you oh I forgot a parenthesis here run this and we'll get the correct error well we're getting the incorrect error before this is there I wanted to pop up I don't think I've ever said that before we got the incorrect error but as you can see yeah you can't change it but if this is a mutable data type instead of an immutable data type you actually can change it so what I'm trying to get here is that immutable immutable data types um they're only immutable at their level okay as their global level if you go within and then there's something that is beautiful you can still change those and that's because in Python this might go of a lot of you guys has heads but I'm gonna explain this cuz you might understand is because everything in Python is an object so this tuple is considered a pay object and it's given all this data as giving this one is given this two and it's given the location of this list in memory okay so this list and memory can change to whatever the heck at once but the location of this list will always stay the same it's just the list changes itself the values with analyst change or it gets longer but the the location of this list which is just the first element where the first element is located um always stays the same so we can change this list but on this tuple you can actually replace this list with location okay this is an actual issue code but just imagine the ID here that this is actually the location of whatever's here so the location of one and two is also here this is also stored as locations um it's called a pointer if you know like C or C++ but the location of the list does not change okay but the value of this list can change okay so that's the little distinction there it's a weird little edge case same deal if you had once again a list within here you could change it but if this was a two pole you could not change it okay this is getting weird and weird and nested so I'll go back to this simple case we had but that's pretty much it about meet ability and immutability you guys I just want to explain that because it's a distinction in Python um the most important use of it I know is using tuples for stuff for structured data and then knowing that a dictionary key has to be immutable okay cannot be beautiful because the keys have to stay consistent in dictionary or the name of the things gonna get all screwed up and it's gonna freak out and the world is gonna explode then uh transformers are gonna start all coming alive and whatnot but um that's pretty much it for mutability you guys thank you for watching I'm sorry if I got a little complex there at the end I get kind of nerdy and geeky and I like the geek out and explain all the little nitty gritty stuff sometimes I know this is the beginning of beginners tutorial but hey I might as well push you right that's all that's that's what happened to me when I was learning so thanks for watching you guys um hope you guys enjoyed it and I'll see you next time good bye
