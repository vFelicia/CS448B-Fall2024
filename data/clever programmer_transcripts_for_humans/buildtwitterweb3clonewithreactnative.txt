With timestamps:

00:00 - in this video you're going to be
00:01 - building the Twitter clone with react
00:04 - native we're going to be adding web3 and
00:06 - blockchain Technology to it using the
00:09 - Phantom wallet and we're going to be
00:11 - using their deep links especially to
00:13 - build out a complete wallet connection
00:16 - and authentication inside the Twitter
00:19 - app you're going to be able to access
00:20 - all the data that is in connection with
00:23 - the user's Phantom wallet that is being
00:25 - connected and you will also see if they
00:27 - disconnect their wallets so with that
00:29 - said let's go ahead and get started
00:31 - alright let's get started with this
00:33 - tutorial and let's implement the Phantom
00:36 - wallet connection with deep links into
00:38 - Twitter let's go ahead and get started
00:41 - what I'm going to do is I'm going to go
00:42 - into my GitHub folder and then inside
00:45 - there I'm going to make the new folder
00:47 - which I will just name YouTube actually
00:49 - apparently I have one so that's nice
00:53 - so I'm going to go into that and then in
00:55 - here what I'm gonna do is now I'm going
00:59 - to run the clever programmer CLI tool
01:03 - all right so this will ask all right so
01:06 - this will ask for my email address
01:08 - and my name and then after that it will
01:12 - just ask for which project I want to
01:15 - build so because this is the Phantom
01:17 - Twitter I'm just going to select that
01:19 - and then hit return now this will go
01:22 - ahead and get the project set up for us
01:24 - in a way that is ready for us to work
01:27 - with
01:28 - and you will know that it's done once it
01:31 - opens up vs code automatically for you
01:33 - for me it actually opened on a different
01:35 - screen but that is pretty much the first
01:38 - step as you can see in order to install
01:40 - node modules and it has everything that
01:44 - I need so let's actually just run it
01:47 - real quick so I'm gonna go into that and
01:51 - let me actually empty out my terminal
01:53 - and what I'm gonna do is I'm gonna say
01:56 - yarn start
01:57 - and that should technically start up my
02:00 - Expo project all right now here I'm
02:03 - going to hit I and that will turn on my
02:06 - simulator powered by xcode because this
02:09 - is a react native project and it pulled
02:12 - up on you know a different screen but
02:13 - here it is
02:15 - and there you go that is the starter app
02:17 - and as you can see it already has some
02:20 - of the functionality in here so we can
02:23 - like undo tweet like a tweet comment
02:25 - stuff like that and then this will be
02:27 - the main button up here that we're going
02:30 - to be working with
02:31 - and then if you want to you can go ahead
02:33 - download
02:35 - um Expo go on your mobile phone on your
02:38 - iPhone and then just scan that QR code
02:40 - and it will pop up right in there I'll
02:43 - be using it later on and I'll show you a
02:45 - couple things because you will need a
02:47 - phone to run this project all right so
02:50 - with that said we're gonna go ahead and
02:51 - get started working with this app
02:54 - all right so first thing first we're
02:57 - going to be adding a couple files and
02:59 - we're going to be importing a few things
03:00 - so let's just go ahead and get started
03:02 - inside of my source components folder
03:05 - what I'm going to do is I'm going to go
03:06 - ahead and create a phantom.js file and
03:10 - I'm going to go ahead and import a
03:12 - couple of things so first off we're
03:14 - gonna need device device event emitter
03:18 - from a react native then we're gonna go
03:20 - with a style sheet and then whoops that
03:24 - became weird
03:25 - then we're going to be importing touch
03:27 - trouble opacity
03:30 - and these are the three things that
03:32 - we're importing from react native next
03:34 - up we're going to be using context later
03:36 - on so let's actually just import use
03:38 - context here
03:40 - and then we're going to be importing the
03:43 - Twitter context which by the way it
03:45 - should be already here yes contact JS so
03:48 - that's not that's nice so we're going to
03:50 - be importing this guy
03:52 - so that's there and we're gonna be
03:55 - importing it from
03:57 - one more folder above maybe not
04:00 - yeah context slash context yes from
04:03 - there
04:04 - and we're going to be importing an asset
04:06 - which is a star asset it's a star icon
04:09 - basically
04:11 - and we're going to be importing it from
04:14 - assets star
04:16 - so that's pretty much the importing in
04:19 - Phantom now next up we're going to be
04:21 - creating a
04:23 - react native component so
04:26 - let's actually just do it this way
04:29 - so that's nice and let me just space it
04:32 - out real quick
04:34 - so in here what we're going to be doing
04:36 - is
04:38 - right away Destructor state from use
04:43 - context yep just like that and then just
04:46 - pass in Twitter context in there so that
04:49 - should be good
04:51 - and let's just go ahead and use the
04:53 - touchable opacity that we imported and
04:57 - let's throw in the star icon that we had
05:01 - so that should in
05:04 - okay so this will be the component that
05:07 - will be triggering all the connection
05:09 - this connection and we will actually be
05:11 - changing whatever inside of app.js
05:14 - because right now it's just the star but
05:16 - we'll be basically changing into that so
05:19 - that's what we're preparing so that will
05:21 - show up later don't look at this in the
05:24 - app just yet so now we just want to test
05:27 - out what our state is so later we'll get
05:30 - there but before we go any further what
05:33 - I want to do is just go ahead and say
05:36 - con State equals one oops one and then
05:42 - here export state
05:45 - just to double check it should
05:47 - technically work but just to see and
05:51 - right now it doesn't work yet because we
05:53 - have to wrap it around we also have to
05:55 - connect the context to the app itself
05:56 - which we haven't done just yet but it
05:59 - will work in a little bit so I'll just
06:00 - leave this there this is ready the test
06:03 - here is ready
06:04 - so now what we're going to do is we're
06:07 - gonna move on to the next step which
06:09 - will include uh this testing so
06:13 - let's move on to creating Phantom
06:16 - containers so that's going to be a file
06:18 - just like this so we're going to say
06:20 - Phantom container
06:22 - dot Js
06:24 - and just like that I'm going to go ahead
06:26 - create a react native component
06:30 - and here we're going to be importing
06:32 - Phantom the file that we just created a
06:36 - minute ago
06:37 - and we're going to be importing Twitter
06:39 - provider
06:41 - and now you already see where I'm going
06:43 - with this so we're gonna be wrapping the
06:45 - Twitter provider around
06:47 - the Phantom components so now if I'm
06:52 - being correct
06:54 - oh we're actually not rendering it out
06:56 - yet so hold on a second
06:59 - now what we're going to be doing is
07:01 - we're going to go into app.js
07:04 - because now we have to render out the
07:06 - Phantom container
07:07 - and now we're gonna remove the star
07:11 - that right there and we're gonna say
07:13 - Phantom container boom
07:17 - and pass in these props that are in here
07:22 - if you if it didn't import automatically
07:24 - for you then forget to import it up here
07:26 - the Phantom container component so that
07:29 - has to be done and now as you can see in
07:32 - the call in the console the one shows up
07:35 - so that is perfect now I'm going to go
07:37 - ahead and remove it before I forget it
07:40 - to remove state from Context and here in
07:45 - Phantom JS I'll remove that console
07:48 - again as well so
07:50 - at this point we made two components
07:53 - that will be used later on and we will
07:54 - be adding stuff to it but right now
07:57 - we're making good progress let's move on
07:59 - to the next step
08:01 - alright so before we go ahead and create
08:04 - a use effect in our context what we're
08:06 - going to do is we're just going to make
08:08 - sure
08:09 - that we are passing down the props to a
08:13 - fandom container and actually we can get
08:15 - rid of that line where that's not useful
08:16 - anymore
08:17 - and next up what we're gonna do is we
08:20 - actually want to go ahead and catch that
08:22 - catch those prompts so we're going to
08:23 - say props up here
08:25 - as in like that props like that and now
08:31 - what we're gonna do is pass those down
08:33 - to Phantom itself props
08:38 - yes
08:39 - and we also want to be able to catch
08:42 - those
08:43 - right here and oops that was left there
08:47 - and we're going to be catching these
08:48 - later here as well so this is the later
08:51 - going to be useful we will get back to
08:53 - it so Phantom and Phantom container
08:55 - that's it app.js that's it so next up
08:59 - what we're gonna be is inside of here in
09:02 - the context we will be importing use
09:05 - effect apparently that doesn't come with
09:07 - the package itself that's fine we can
09:09 - just add it and we're gonna go ahead and
09:12 - create a state
09:14 - in here which will be a deep link State
09:17 - this is where we're going to be storing
09:18 - the Deep links that we're going to be
09:21 - working with next up we're going to have
09:23 - a use effect
09:25 - which will get started with a
09:27 - self-executing function so what we're
09:29 - going to be doing is we're going to
09:31 - create a check
09:34 - we're going to create a function that is
09:36 - that we will call check deep link and
09:39 - this will be an async function
09:41 - and what it will do is
09:44 - what it will do is it will look for all
09:47 - the deeplings that we're going to be
09:48 - throwing and passing around in the app
09:50 - so we're gonna go ahead and grab the
09:52 - initial link but for that we actually
09:55 - have to import another package so we're
09:57 - going to be importing everything as Expo
10:00 - linking from a project that is called
10:03 - Expo Dash so that's nice and so
10:07 - here we're going to say await
10:10 - Expo
10:12 - linking dot get initial URL
10:17 - like that and that's a function
10:20 - and if that URL exists then we're going
10:26 - to set a save that in our use date and
10:29 - because it's a self-executing function
10:30 - that's how it's gonna that's how we're
10:33 - gonna be closing it off
10:35 - and obviously we don't we just want to
10:38 - let this set deep link run by itself
10:40 - like that so we're going to be passing
10:42 - the await Expo linking get initially
10:44 - let's actually take a look at what we
10:47 - will be getting so I'm just gonna
10:49 - console log it right up here
10:52 - and let's see what this is
10:55 - and
10:57 - let me just put it like that and let's
10:59 - see what we get so basically this is my
11:02 - local address of the app where it's
11:04 - running so that later on it will change
11:08 - but for now that's the link all right
11:11 - and next up we're going to be doing is
11:13 - still inside of this use effect actually
11:16 - let me just get rid of that and what
11:19 - we're going to be doing is we're just
11:20 - going to say we're going to have an
11:21 - event listener
11:23 - that will make sure that every time this
11:26 - deep link changes we'll be able to do
11:29 - certain things so we're just going to
11:31 - add an event listener so Expo linking
11:33 - dot add event listener
11:37 - and we're gonna say URL
11:40 - and if the URL changes we're just going
11:42 - to update that link
11:44 - in our estate and we also don't want to
11:47 - make we also want to make sure that
11:49 - whenever we're done with the app we
11:52 - don't just keep creating all these event
11:55 - listeners oops the weird things are
11:57 - happening
11:58 - we're going to eventually remove it so
12:01 - it doesn't keep doesn't clog up the
12:03 - memory
12:04 - so that's basically this step let's go
12:06 - on to the next one okay now before we
12:09 - move anywhere further what we're going
12:11 - to be doing is inside of phantom we're
12:15 - gonna go ahead and destructure deep link
12:19 - from use context and I'm passing Twitter
12:23 - context so we're just gonna go ahead and
12:25 - grab the Deep link state from the
12:28 - context
12:29 - all right
12:31 - so now what we're going to be doing is
12:33 - we're going to go ahead and actually
12:35 - connect to the Phantom wallet on our
12:40 - phone so that's going to be an exciting
12:41 - one
12:42 - but to get that going we will need a
12:45 - couple of things so first of all we're
12:47 - going to be importing use crypto which
12:49 - is a custom hook that we made for you
12:52 - and you are free to use so here it is
12:56 - nice and is in the utils folder so it
13:00 - comes with the project
13:02 - and we have a couple of encryption
13:05 - algorithms in there
13:07 - so we're going to be importing those
13:09 - things so we're going to import we're
13:11 - gonna destructure in code decode encrypt
13:15 - decrypt
13:17 - and get key pair
13:18 - and actually this is the wrong file I
13:21 - just did these in the Phantom JS this
13:23 - was supposed to be done in contact let
13:25 - me just paste these lines right in here
13:27 - all right we're good and right here I'm
13:31 - gonna go ahead and create a deck key
13:34 - pair you state
13:37 - which is going to start out as null
13:39 - so the initial value is going to be null
13:42 - all right
13:43 - now we're gonna go ahead and create a
13:46 - use effect
13:47 - and all it will do is set the depth key
13:50 - pair
13:51 - to whatever the return value is of get
13:55 - key pair oh the get key pair
13:58 - and we're just gonna run once and that's
14:01 - pretty much it
14:02 - now next up we're going to have the
14:05 - connect function
14:06 - before we actually go on let me just
14:09 - reload this app just to see if
14:10 - everything's yes we're good all right
14:14 - so now what we're going to do is we're
14:17 - finally getting started with the connect
14:19 - function so this is where deep linking
14:21 - will actually make a big big play so
14:25 - this is going to be an async function
14:27 - so we're going to go ahead and create a
14:29 - variable called params because we're
14:32 - going to now construct the Deep link
14:34 - itself or actually the link the link
14:38 - inside of the Phantom app to connect the
14:40 - wallet so we're gonna have a new URL
14:44 - search params
14:47 - thingy
14:48 - and inside there in an object without
14:52 - the P we're gonna go ahead and say dap
14:55 - encryption public key
14:58 - and that'll be
15:00 - whatever the adapt key pair adapt key
15:03 - pairs
15:04 - public key we're gonna go ahead and
15:07 - encode that with a certain certain
15:10 - algorithm we're going to specify that
15:12 - we're gonna be on the devnet
15:14 - and the app URL is https phantom.app and
15:20 - then we're going to go ahead and create
15:22 - a redirect link so what's going to
15:23 - happen is while you're in your Twitter
15:25 - app it's going to drop redirect you to
15:28 - Phantom so it's basically it's gonna
15:30 - it's gonna open Phantom app you will hit
15:32 - connect and then it will throw you right
15:34 - back into Twitter
15:36 - so
15:37 - that's what we're going to be specifying
15:39 - now
15:40 - and that is coming from Expo linking
15:44 - and we're going to go ahead create a URL
15:47 - and we're going to say on connect oops
15:51 - so what that will do is actually get the
15:54 - current URL of the app itself so it will
15:57 - be whatever URL
15:58 - and then slash on connect
16:03 - however this URL part that I'm
16:06 - highlighting right there that is
16:09 - specific to my phone it is different for
16:12 - everybody so we want to make it Dynamic
16:14 - that's why we're using this Library
16:17 - all right so that is our parameters
16:19 - however URL needs a beginning so we're
16:23 - gonna go ahead and construct that so
16:25 - we're gonna say constantly we're out
16:26 - equals and notice how I'm using
16:29 - backticks because we're going to be
16:30 - we're going to be using tablet literals
16:32 - here so we're going to say Phantom dot
16:35 - app
16:36 - slash UL
16:38 - slash V1 slash connect and now the
16:44 - params come into play so we're gonna say
16:46 - params
16:48 - dot two string
16:50 - and that's where the URL ends so this is
16:53 - going to be the Deep link that we're
16:56 - going to be passing into
16:58 - we're already heading to connect all
17:00 - right and now we're going to say Expo
17:02 - linking open URL
17:05 - which will actually go ahead and open
17:07 - the link itself and just pass in url
17:09 - that's pretty much it
17:12 - all right
17:14 - so now let's take a look at this
17:17 - inside of our
17:19 - okay so that itself is not being called
17:21 - just yet as you can see it's unused
17:24 - so we're gonna go ahead and connect it
17:26 - in just a second
17:29 - so what we're going to do is go ahead
17:31 - and say we're gonna be passing this
17:34 - we're going to be exporting it from the
17:36 - provider and we're gonna go into
17:38 - phantom.js again
17:40 - and now we're gonna go ahead and
17:41 - destructure connect from the context
17:45 - and we're gonna say on press
17:49 - connect
17:51 - all right so now when we hit this little
17:53 - star icon up here
17:55 - we should be redirected over to fandom
17:58 - let me reload just so it rebuilds itself
18:01 - and I'm gonna hit it and there you go
18:03 - now it's taking me over to this Phantom
18:06 - app now here's where the limitation of a
18:08 - simulator comes in it is not able to
18:11 - download the Phantom app from from the
18:15 - App Store so now we cannot actually test
18:18 - it oops who the heck uses Bing anyways
18:21 - so I'm gonna go back to my Expo app this
18:24 - is not the test is not going to go
18:26 - through on this iPhone on this test
18:28 - iPhone so what I'm going to do is I'm
18:29 - going to connect my own iPhone and then
18:31 - show it yeah show you it right there all
18:34 - right so let's take a look at this
18:36 - connect functionality that we just
18:38 - implemented so what I'm going to do is
18:40 - I'm just going to go ahead reload this
18:42 - app and let's see what we got so I'm
18:44 - gonna go hit this connect button there
18:47 - you go there's the URL by the way I'm a
18:48 - console logging a couple things so
18:50 - here's the URL that we're generating and
18:52 - then I just want to double check that
18:54 - the Deep link is working and as you can
18:56 - see in the simulator you cannot run the
18:59 - Phantom map you cannot install it on it
19:02 - so we're gonna need our real phone so
19:04 - here's where this comes to put here's
19:06 - where this guy comes in so I'm going to
19:08 - go ahead let's play that QR code again I
19:10 - think I'll make this a terminal a little
19:13 - bit bigger alright so let's take a look
19:15 - at what do we got so I'm gonna go ahead
19:17 - open that in Expo it takes a second to
19:21 - load it up but there it is so here is
19:24 - our app and so I'm gonna just go hit
19:27 - connect
19:28 - and I'm gonna go connect again and there
19:31 - you go the Deep link has changed now I'm
19:34 - suspecting that later on this might
19:36 - cause error see uh I don't exactly
19:38 - remember but there it is the app is
19:41 - working let's move on to the next step
19:44 - all right so
19:46 - in this next step what I'm gonna do is I
19:50 - will try to get the Phantom wallet Pub
19:53 - uh what is it the wallet address out of
19:55 - all the metadata that you saw it's like
19:58 - a bunch of cryptic stuff I just want to
20:00 - really make sure that we're actually
20:01 - connected so what I'm going to do is I'm
20:03 - going to have a use effect and that use
20:06 - effect first of all it will check that I
20:09 - want to know if a deep link exists so
20:11 - we're just gonna Fail-Safe it here
20:13 - return oh like that yeah so it's not
20:17 - multiple all right now we're gonna go
20:20 - ahead and actually import another thing
20:22 - so I'm gonna go ahead and say import use
20:26 - URL from utils and use URL so this is
20:31 - again another thing that we're just
20:33 - giving to that's fine and then we're
20:35 - gonna go ahead and import this NaCl
20:38 - thing and we're gonna go ahead and
20:40 - import cluster API URL and key
20:47 - from
20:48 - the Solana
20:50 - web3js libraries all right and before we
20:53 - go move on let me actually just create a
20:56 - use State snippet for the Phantom wallet
20:59 - public key
21:01 - and we don't specify the initial value
21:04 - and actually for the depth keeper I'm
21:07 - just going to say get key pair and then
21:10 - whatever that returns that's going to be
21:12 - the value and as you can see don't worry
21:15 - about the error holy cow
21:18 - so here's the Deep link that we're gonna
21:20 - get back I wouldn't get the value of
21:23 - that URL so what I'm going to say is
21:26 - wherever I'm setting the Deep link
21:29 - here Ah that's exactly where I'm gonna
21:33 - put it on second URL so it's going to be
21:35 - URL dot URL I mean my bad
21:39 - there because it's returning an object I
21:42 - just want to make sure I but save that
21:43 - you are a property okay so now that
21:47 - we're not gonna need that actually let
21:49 - me just get rid of all the console logs
21:52 - okay good I don't like all that stuff
21:55 - being stored at all times all right so
21:58 - let's import a couple things so I'm
22:00 - gonna go ahead and destructure params
22:02 - get parameter or I mean params and get
22:07 - param and then check
22:09 - path functions from the use URL hook
22:14 - after I pass in the Deep link so all
22:18 - this does is basically it just gets all
22:20 - these all these things feel free to
22:22 - check out the code but it basically just
22:24 - picks the URL apart into little parts
22:27 - all right now I'm going to go ahead and
22:29 - say now we're gonna we're gonna do based
22:32 - on what oh based on where we are in the
22:35 - app based on the Deep link we're gonna
22:37 - be doing two different or we're going to
22:40 - be doing separate different things so
22:41 - we're gonna say we're just gonna go
22:42 - ahead and check path
22:45 - and if it is the unconnect
22:49 - we're in the unconnect path we're gonna
22:52 - say handle
22:53 - connect
22:55 - and we're not that if we're not there
22:57 - we're just gonna handle this now what
23:00 - are these functions so we're gonna go
23:02 - ahead and create those right now so
23:04 - we're gonna say handle connect right
23:06 - there
23:07 - and we're gonna have a handle disconnect
23:09 - as well so I'm gonna copy that paste it
23:13 - there just so it doesn't freak out
23:14 - completely
23:16 - actually we're not going to need the
23:17 - return clause and we will be running
23:20 - this every time deep link changes so I
23:24 - believe at this point the app should I
23:27 - have no errors yes that should be good
23:29 - all right so let's go ahead for now I'm
23:33 - just gonna put in a console log here
23:35 - that's just gonna say disconnect and
23:38 - then we're gonna change it later on but
23:40 - handle connect this is where we're gonna
23:42 - go ahead and decrypt everything the
23:45 - wallet has sent back again it's like a
23:47 - lot of like cryptic stuff so we're gonna
23:49 - say cons shared secret dab this is gonna
23:53 - be like a variable and
23:57 - that'll be coming from this nacr box
24:00 - before method after with pass in decode
24:04 - get param and then Phantom
24:10 - encryption
24:12 - public key
24:13 - right alongside of the depth key pair
24:17 - not secret key
24:19 - so this is how we're gonna cut back the
24:21 - the wallet address all right and now
24:23 - we're gonna go ahead and decrypt using
24:26 - all that data
24:28 - so we're gonna say get param we're gonna
24:30 - grab the data back
24:32 - and then nons
24:34 - so using these three items we're gonna
24:36 - go ahead and get the connect data
24:40 - and that will actually contain the
24:42 - public key so we're going to go ahead
24:44 - and save that in our Phantom wallet
24:46 - public Key State
24:48 - let me just paste it there
24:50 - actually let's underscore
24:52 - so let's actually just take a look at
24:54 - what this connect data is so right now
24:57 - we're running on the disconnect pad that
24:59 - is completely fine but because of my
25:01 - phone let me grab the QR code
25:04 - and so I'm going to connect
25:07 - and we cannot find get param
25:11 - oh that's because there's a typo
25:14 - all right restart reload
25:17 - nice
25:19 - connect again
25:21 - I think I put the public key the wrong
25:24 - place yeah I don't know what I was
25:27 - thinking there but it's a little bit
25:28 - surely we're fixing all right let's see
25:30 - what do we got so we got back this this
25:33 - big boy big boy object so this contains
25:36 - the public key and if we are if I'm
25:39 - going back into my Phantom wallet you
25:42 - see how it starts with
25:44 - 5wfk whatever and then ends with smtf
25:48 - that's exactly what we're getting so
25:50 - this is the proof that this wallet is
25:53 - actually connected to my app
25:56 - so with that said let's move on to this
25:58 - connection and with that the app is done
26:02 - all right now the last thing that we're
26:04 - going to be doing is we're going to
26:06 - disconnect from the wallet and with that
26:09 - this application is complete so for that
26:12 - we will actually need three new use
26:15 - effects so I'm just gonna go ahead and
26:17 - add them right here one is going to be
26:19 - session the other is going to be is
26:21 - connected and then shared secret so
26:25 - here it is all right now what we're
26:27 - going to be doing is when
26:30 - inside handle connect I'm going to go
26:32 - ahead and just update the set shirt
26:35 - secret state
26:37 - with that and so we're going to be
26:39 - storing it that will be necessary for a
26:41 - disconnection but yeah there it is
26:45 - now
26:46 - actually what I'm going to be doing is
26:48 - I'm just going to change this to that
26:51 - so every time yeah so it's just going to
26:54 - run the handle connect and that's it
26:55 - interesting
26:57 - anyways
26:59 - and what I'm going to be doing is when
27:03 - and actually remove this disconnect or
27:06 - handle disconnect and so right here
27:09 - under set a public Phantom wallet public
27:13 - key I'm gonna say set session
27:16 - and from the same connect data that we
27:20 - get the public key from I'm going to go
27:23 - ahead and save the session in there
27:24 - again that's going to be necessary to
27:27 - end the session itself and the next I'm
27:29 - going to say set is connected
27:33 - to true and yeah as you can see here the
27:37 - initial value is going to be false
27:38 - moving on and now I'm gonna add a new
27:41 - function down here
27:44 - somewhere under connect there's a p for
27:47 - no reason
27:49 - exploding I don't know what happened
27:51 - there I somehow grabbed the P out of
27:53 - there it's whatever all right so I'm
27:54 - going to say disconnect const disconnect
27:59 - okay typing seems okay and this is going
28:02 - to be an async function as well
28:05 - so Aster is doing there nice all right
28:10 - so now what I'm saying now what I'm
28:12 - gonna say is I'm gonna say const payload
28:14 - and I'm going to destruct your session
28:18 - and we're gonna get the we're gonna go
28:20 - ahead and grab grab the non and the
28:23 - encrypted payload
28:27 - make an array out of it and we're going
28:29 - to just say encrypt
28:31 - and then we're going to pass in the
28:32 - session itself so that or the
28:34 - destructured path destructured session
28:36 - which is the payload and the shared
28:39 - secret so again this is the cryptic
28:41 - stuff don't worry about it and now we're
28:44 - gonna say const params
28:46 - and we're gonna say new URL search
28:51 - params
28:52 - like that
28:54 - and we're going to create an object in
28:56 - there let me scroll down a little bit
28:59 - we can have adapt encryption public key
29:01 - and we're going to go ahead and encode
29:04 - the public key I'm going to pass in the
29:07 - nons
29:08 - and encode it
29:10 - and we're going to specify the redirect
29:13 - link
29:14 - which is going to be Expo linking not
29:18 - quick URL
29:20 - and we're gonna pass in the on
29:22 - disconnect whoops
29:24 - so this will make sure that here we're
29:27 - not going to run this functionality on
29:30 - it because the Deep link will change
29:32 - however because this because the path is
29:35 - not going to be connect or on connect
29:37 - we're not going to run this so we're
29:39 - just preventing a bunch of errors with
29:41 - this and we're gonna pass in the payload
29:45 - and that is pretty much our link now
29:49 - we're gonna say set is connected false
29:54 - and we're gonna go ahead and open this
29:56 - link
29:57 - and this is going to be Phantom app ulv1
30:00 - but instead of connect so you can
30:03 - literally just copy this from there
30:04 - we're going to say disconnect and then
30:06 - pass the params afterwards and that
30:09 - should be it now
30:11 - right here I'm going to also pass the
30:16 - disconnect function and the is connected
30:19 - State and that is because inside
30:23 - phantom.js
30:26 - I'm gonna go over there and
30:29 - I'm gonna go ahead and actually remove
30:31 - this deep link because we're not going
30:32 - to be using that let me grab disconnect
30:35 - and let me grab is connected
30:40 - so we're gonna set up an if statement
30:42 - right in here
30:44 - so we're going to say function
30:46 - and then say is connected if if we are
30:51 - connected then we're going to be running
30:53 - this connect function if we are not
30:56 - connected then we're going to be running
30:58 - the connect function so
31:01 - with that said
31:04 - that should be the app so let's just run
31:06 - it let's test let's see what we got so
31:08 - I'm gonna use my iPhone
31:11 - so I'm gonna use my iPhone let me just
31:13 - go ahead grab the QR code so I can open
31:16 - the app
31:17 - can I connect the Metro let's try again
31:20 - there it is all right now it's loading
31:23 - up so I'm going to go ahead connect to
31:25 - my app with Phantom there you go there's
31:28 - the connection data and I'm going to hit
31:29 - the same button again and now it's
31:32 - disconnected so let me just prove it to
31:35 - you by console logging the is connected
31:39 - State and the Phantom wallet key so let
31:43 - me just try this again so I'm gonna go
31:45 - ahead reload the app I'm going to hit
31:47 - connect let's see what we've got so
31:50 - there you go there's the wallet key and
31:52 - then it's connected true and now I'm
31:55 - gonna go hit the same button again now
31:57 - it's connected false and as you can see
31:59 - the Phantom wallet key is gone so with
32:02 - that said thank you so much for watching
32:04 - this video this is an amazing app I hope
32:07 - you learned a lot from it and now go
32:09 - ahead take this app and use it in your
32:11 - own application and then use it and
32:14 - build on top of it and then let us know
32:16 - what you've built that said thank you so
32:18 - much for watching subscribe and I'll see
32:20 - you in the next one peace

Cleaned transcript:

in this video you're going to be building the Twitter clone with react native we're going to be adding web3 and blockchain Technology to it using the Phantom wallet and we're going to be using their deep links especially to build out a complete wallet connection and authentication inside the Twitter app you're going to be able to access all the data that is in connection with the user's Phantom wallet that is being connected and you will also see if they disconnect their wallets so with that said let's go ahead and get started alright let's get started with this tutorial and let's implement the Phantom wallet connection with deep links into Twitter let's go ahead and get started what I'm going to do is I'm going to go into my GitHub folder and then inside there I'm going to make the new folder which I will just name YouTube actually apparently I have one so that's nice so I'm going to go into that and then in here what I'm gonna do is now I'm going to run the clever programmer CLI tool all right so this will ask all right so this will ask for my email address and my name and then after that it will just ask for which project I want to build so because this is the Phantom Twitter I'm just going to select that and then hit return now this will go ahead and get the project set up for us in a way that is ready for us to work with and you will know that it's done once it opens up vs code automatically for you for me it actually opened on a different screen but that is pretty much the first step as you can see in order to install node modules and it has everything that I need so let's actually just run it real quick so I'm gonna go into that and let me actually empty out my terminal and what I'm gonna do is I'm gonna say yarn start and that should technically start up my Expo project all right now here I'm going to hit I and that will turn on my simulator powered by xcode because this is a react native project and it pulled up on you know a different screen but here it is and there you go that is the starter app and as you can see it already has some of the functionality in here so we can like undo tweet like a tweet comment stuff like that and then this will be the main button up here that we're going to be working with and then if you want to you can go ahead download um Expo go on your mobile phone on your iPhone and then just scan that QR code and it will pop up right in there I'll be using it later on and I'll show you a couple things because you will need a phone to run this project all right so with that said we're gonna go ahead and get started working with this app all right so first thing first we're going to be adding a couple files and we're going to be importing a few things so let's just go ahead and get started inside of my source components folder what I'm going to do is I'm going to go ahead and create a phantom.js file and I'm going to go ahead and import a couple of things so first off we're gonna need device device event emitter from a react native then we're gonna go with a style sheet and then whoops that became weird then we're going to be importing touch trouble opacity and these are the three things that we're importing from react native next up we're going to be using context later on so let's actually just import use context here and then we're going to be importing the Twitter context which by the way it should be already here yes contact JS so that's not that's nice so we're going to be importing this guy so that's there and we're gonna be importing it from one more folder above maybe not yeah context slash context yes from there and we're going to be importing an asset which is a star asset it's a star icon basically and we're going to be importing it from assets star so that's pretty much the importing in Phantom now next up we're going to be creating a react native component so let's actually just do it this way so that's nice and let me just space it out real quick so in here what we're going to be doing is right away Destructor state from use context yep just like that and then just pass in Twitter context in there so that should be good and let's just go ahead and use the touchable opacity that we imported and let's throw in the star icon that we had so that should in okay so this will be the component that will be triggering all the connection this connection and we will actually be changing whatever inside of app.js because right now it's just the star but we'll be basically changing into that so that's what we're preparing so that will show up later don't look at this in the app just yet so now we just want to test out what our state is so later we'll get there but before we go any further what I want to do is just go ahead and say con State equals one oops one and then here export state just to double check it should technically work but just to see and right now it doesn't work yet because we have to wrap it around we also have to connect the context to the app itself which we haven't done just yet but it will work in a little bit so I'll just leave this there this is ready the test here is ready so now what we're going to do is we're gonna move on to the next step which will include uh this testing so let's move on to creating Phantom containers so that's going to be a file just like this so we're going to say Phantom container dot Js and just like that I'm going to go ahead create a react native component and here we're going to be importing Phantom the file that we just created a minute ago and we're going to be importing Twitter provider and now you already see where I'm going with this so we're gonna be wrapping the Twitter provider around the Phantom components so now if I'm being correct oh we're actually not rendering it out yet so hold on a second now what we're going to be doing is we're going to go into app.js because now we have to render out the Phantom container and now we're gonna remove the star that right there and we're gonna say Phantom container boom and pass in these props that are in here if you if it didn't import automatically for you then forget to import it up here the Phantom container component so that has to be done and now as you can see in the call in the console the one shows up so that is perfect now I'm going to go ahead and remove it before I forget it to remove state from Context and here in Phantom JS I'll remove that console again as well so at this point we made two components that will be used later on and we will be adding stuff to it but right now we're making good progress let's move on to the next step alright so before we go ahead and create a use effect in our context what we're going to do is we're just going to make sure that we are passing down the props to a fandom container and actually we can get rid of that line where that's not useful anymore and next up what we're gonna do is we actually want to go ahead and catch that catch those prompts so we're going to say props up here as in like that props like that and now what we're gonna do is pass those down to Phantom itself props yes and we also want to be able to catch those right here and oops that was left there and we're going to be catching these later here as well so this is the later going to be useful we will get back to it so Phantom and Phantom container that's it app.js that's it so next up what we're gonna be is inside of here in the context we will be importing use effect apparently that doesn't come with the package itself that's fine we can just add it and we're gonna go ahead and create a state in here which will be a deep link State this is where we're going to be storing the Deep links that we're going to be working with next up we're going to have a use effect which will get started with a selfexecuting function so what we're going to be doing is we're going to create a check we're going to create a function that is that we will call check deep link and this will be an async function and what it will do is what it will do is it will look for all the deeplings that we're going to be throwing and passing around in the app so we're gonna go ahead and grab the initial link but for that we actually have to import another package so we're going to be importing everything as Expo linking from a project that is called Expo Dash so that's nice and so here we're going to say await Expo linking dot get initial URL like that and that's a function and if that URL exists then we're going to set a save that in our use date and because it's a selfexecuting function that's how it's gonna that's how we're gonna be closing it off and obviously we don't we just want to let this set deep link run by itself like that so we're going to be passing the await Expo linking get initially let's actually take a look at what we will be getting so I'm just gonna console log it right up here and let's see what this is and let me just put it like that and let's see what we get so basically this is my local address of the app where it's running so that later on it will change but for now that's the link all right and next up we're going to be doing is still inside of this use effect actually let me just get rid of that and what we're going to be doing is we're just going to say we're going to have an event listener that will make sure that every time this deep link changes we'll be able to do certain things so we're just going to add an event listener so Expo linking dot add event listener and we're gonna say URL and if the URL changes we're just going to update that link in our estate and we also don't want to make we also want to make sure that whenever we're done with the app we don't just keep creating all these event listeners oops the weird things are happening we're going to eventually remove it so it doesn't keep doesn't clog up the memory so that's basically this step let's go on to the next one okay now before we move anywhere further what we're going to be doing is inside of phantom we're gonna go ahead and destructure deep link from use context and I'm passing Twitter context so we're just gonna go ahead and grab the Deep link state from the context all right so now what we're going to be doing is we're going to go ahead and actually connect to the Phantom wallet on our phone so that's going to be an exciting one but to get that going we will need a couple of things so first of all we're going to be importing use crypto which is a custom hook that we made for you and you are free to use so here it is nice and is in the utils folder so it comes with the project and we have a couple of encryption algorithms in there so we're going to be importing those things so we're going to import we're gonna destructure in code decode encrypt decrypt and get key pair and actually this is the wrong file I just did these in the Phantom JS this was supposed to be done in contact let me just paste these lines right in here all right we're good and right here I'm gonna go ahead and create a deck key pair you state which is going to start out as null so the initial value is going to be null all right now we're gonna go ahead and create a use effect and all it will do is set the depth key pair to whatever the return value is of get key pair oh the get key pair and we're just gonna run once and that's pretty much it now next up we're going to have the connect function before we actually go on let me just reload this app just to see if everything's yes we're good all right so now what we're going to do is we're finally getting started with the connect function so this is where deep linking will actually make a big big play so this is going to be an async function so we're going to go ahead and create a variable called params because we're going to now construct the Deep link itself or actually the link the link inside of the Phantom app to connect the wallet so we're gonna have a new URL search params thingy and inside there in an object without the P we're gonna go ahead and say dap encryption public key and that'll be whatever the adapt key pair adapt key pairs public key we're gonna go ahead and encode that with a certain certain algorithm we're going to specify that we're gonna be on the devnet and the app URL is https phantom.app and then we're going to go ahead and create a redirect link so what's going to happen is while you're in your Twitter app it's going to drop redirect you to Phantom so it's basically it's gonna it's gonna open Phantom app you will hit connect and then it will throw you right back into Twitter so that's what we're going to be specifying now and that is coming from Expo linking and we're going to go ahead create a URL and we're going to say on connect oops so what that will do is actually get the current URL of the app itself so it will be whatever URL and then slash on connect however this URL part that I'm highlighting right there that is specific to my phone it is different for everybody so we want to make it Dynamic that's why we're using this Library all right so that is our parameters however URL needs a beginning so we're gonna go ahead and construct that so we're gonna say constantly we're out equals and notice how I'm using backticks because we're going to be we're going to be using tablet literals here so we're going to say Phantom dot app slash UL slash V1 slash connect and now the params come into play so we're gonna say params dot two string and that's where the URL ends so this is going to be the Deep link that we're going to be passing into we're already heading to connect all right and now we're going to say Expo linking open URL which will actually go ahead and open the link itself and just pass in url that's pretty much it all right so now let's take a look at this inside of our okay so that itself is not being called just yet as you can see it's unused so we're gonna go ahead and connect it in just a second so what we're going to do is go ahead and say we're gonna be passing this we're going to be exporting it from the provider and we're gonna go into phantom.js again and now we're gonna go ahead and destructure connect from the context and we're gonna say on press connect all right so now when we hit this little star icon up here we should be redirected over to fandom let me reload just so it rebuilds itself and I'm gonna hit it and there you go now it's taking me over to this Phantom app now here's where the limitation of a simulator comes in it is not able to download the Phantom app from from the App Store so now we cannot actually test it oops who the heck uses Bing anyways so I'm gonna go back to my Expo app this is not the test is not going to go through on this iPhone on this test iPhone so what I'm going to do is I'm going to connect my own iPhone and then show it yeah show you it right there all right so let's take a look at this connect functionality that we just implemented so what I'm going to do is I'm just going to go ahead reload this app and let's see what we got so I'm gonna go hit this connect button there you go there's the URL by the way I'm a console logging a couple things so here's the URL that we're generating and then I just want to double check that the Deep link is working and as you can see in the simulator you cannot run the Phantom map you cannot install it on it so we're gonna need our real phone so here's where this comes to put here's where this guy comes in so I'm going to go ahead let's play that QR code again I think I'll make this a terminal a little bit bigger alright so let's take a look at what do we got so I'm gonna go ahead open that in Expo it takes a second to load it up but there it is so here is our app and so I'm gonna just go hit connect and I'm gonna go connect again and there you go the Deep link has changed now I'm suspecting that later on this might cause error see uh I don't exactly remember but there it is the app is working let's move on to the next step all right so in this next step what I'm gonna do is I will try to get the Phantom wallet Pub uh what is it the wallet address out of all the metadata that you saw it's like a bunch of cryptic stuff I just want to really make sure that we're actually connected so what I'm going to do is I'm going to have a use effect and that use effect first of all it will check that I want to know if a deep link exists so we're just gonna FailSafe it here return oh like that yeah so it's not multiple all right now we're gonna go ahead and actually import another thing so I'm gonna go ahead and say import use URL from utils and use URL so this is again another thing that we're just giving to that's fine and then we're gonna go ahead and import this NaCl thing and we're gonna go ahead and import cluster API URL and key from the Solana web3js libraries all right and before we go move on let me actually just create a use State snippet for the Phantom wallet public key and we don't specify the initial value and actually for the depth keeper I'm just going to say get key pair and then whatever that returns that's going to be the value and as you can see don't worry about the error holy cow so here's the Deep link that we're gonna get back I wouldn't get the value of that URL so what I'm going to say is wherever I'm setting the Deep link here Ah that's exactly where I'm gonna put it on second URL so it's going to be URL dot URL I mean my bad there because it's returning an object I just want to make sure I but save that you are a property okay so now that we're not gonna need that actually let me just get rid of all the console logs okay good I don't like all that stuff being stored at all times all right so let's import a couple things so I'm gonna go ahead and destructure params get parameter or I mean params and get param and then check path functions from the use URL hook after I pass in the Deep link so all this does is basically it just gets all these all these things feel free to check out the code but it basically just picks the URL apart into little parts all right now I'm going to go ahead and say now we're gonna we're gonna do based on what oh based on where we are in the app based on the Deep link we're gonna be doing two different or we're going to be doing separate different things so we're gonna say we're just gonna go ahead and check path and if it is the unconnect we're in the unconnect path we're gonna say handle connect and we're not that if we're not there we're just gonna handle this now what are these functions so we're gonna go ahead and create those right now so we're gonna say handle connect right there and we're gonna have a handle disconnect as well so I'm gonna copy that paste it there just so it doesn't freak out completely actually we're not going to need the return clause and we will be running this every time deep link changes so I believe at this point the app should I have no errors yes that should be good all right so let's go ahead for now I'm just gonna put in a console log here that's just gonna say disconnect and then we're gonna change it later on but handle connect this is where we're gonna go ahead and decrypt everything the wallet has sent back again it's like a lot of like cryptic stuff so we're gonna say cons shared secret dab this is gonna be like a variable and that'll be coming from this nacr box before method after with pass in decode get param and then Phantom encryption public key right alongside of the depth key pair not secret key so this is how we're gonna cut back the the wallet address all right and now we're gonna go ahead and decrypt using all that data so we're gonna say get param we're gonna grab the data back and then nons so using these three items we're gonna go ahead and get the connect data and that will actually contain the public key so we're going to go ahead and save that in our Phantom wallet public Key State let me just paste it there actually let's underscore so let's actually just take a look at what this connect data is so right now we're running on the disconnect pad that is completely fine but because of my phone let me grab the QR code and so I'm going to connect and we cannot find get param oh that's because there's a typo all right restart reload nice connect again I think I put the public key the wrong place yeah I don't know what I was thinking there but it's a little bit surely we're fixing all right let's see what do we got so we got back this this big boy big boy object so this contains the public key and if we are if I'm going back into my Phantom wallet you see how it starts with 5wfk whatever and then ends with smtf that's exactly what we're getting so this is the proof that this wallet is actually connected to my app so with that said let's move on to this connection and with that the app is done all right now the last thing that we're going to be doing is we're going to disconnect from the wallet and with that this application is complete so for that we will actually need three new use effects so I'm just gonna go ahead and add them right here one is going to be session the other is going to be is connected and then shared secret so here it is all right now what we're going to be doing is when inside handle connect I'm going to go ahead and just update the set shirt secret state with that and so we're going to be storing it that will be necessary for a disconnection but yeah there it is now actually what I'm going to be doing is I'm just going to change this to that so every time yeah so it's just going to run the handle connect and that's it interesting anyways and what I'm going to be doing is when and actually remove this disconnect or handle disconnect and so right here under set a public Phantom wallet public key I'm gonna say set session and from the same connect data that we get the public key from I'm going to go ahead and save the session in there again that's going to be necessary to end the session itself and the next I'm going to say set is connected to true and yeah as you can see here the initial value is going to be false moving on and now I'm gonna add a new function down here somewhere under connect there's a p for no reason exploding I don't know what happened there I somehow grabbed the P out of there it's whatever all right so I'm going to say disconnect const disconnect okay typing seems okay and this is going to be an async function as well so Aster is doing there nice all right so now what I'm saying now what I'm gonna say is I'm gonna say const payload and I'm going to destruct your session and we're gonna get the we're gonna go ahead and grab grab the non and the encrypted payload make an array out of it and we're going to just say encrypt and then we're going to pass in the session itself so that or the destructured path destructured session which is the payload and the shared secret so again this is the cryptic stuff don't worry about it and now we're gonna say const params and we're gonna say new URL search params like that and we're going to create an object in there let me scroll down a little bit we can have adapt encryption public key and we're going to go ahead and encode the public key I'm going to pass in the nons and encode it and we're going to specify the redirect link which is going to be Expo linking not quick URL and we're gonna pass in the on disconnect whoops so this will make sure that here we're not going to run this functionality on it because the Deep link will change however because this because the path is not going to be connect or on connect we're not going to run this so we're just preventing a bunch of errors with this and we're gonna pass in the payload and that is pretty much our link now we're gonna say set is connected false and we're gonna go ahead and open this link and this is going to be Phantom app ulv1 but instead of connect so you can literally just copy this from there we're going to say disconnect and then pass the params afterwards and that should be it now right here I'm going to also pass the disconnect function and the is connected State and that is because inside phantom.js I'm gonna go over there and I'm gonna go ahead and actually remove this deep link because we're not going to be using that let me grab disconnect and let me grab is connected so we're gonna set up an if statement right in here so we're going to say function and then say is connected if if we are connected then we're going to be running this connect function if we are not connected then we're going to be running the connect function so with that said that should be the app so let's just run it let's test let's see what we got so I'm gonna use my iPhone so I'm gonna use my iPhone let me just go ahead grab the QR code so I can open the app can I connect the Metro let's try again there it is all right now it's loading up so I'm going to go ahead connect to my app with Phantom there you go there's the connection data and I'm going to hit the same button again and now it's disconnected so let me just prove it to you by console logging the is connected State and the Phantom wallet key so let me just try this again so I'm gonna go ahead reload the app I'm going to hit connect let's see what we've got so there you go there's the wallet key and then it's connected true and now I'm gonna go hit the same button again now it's connected false and as you can see the Phantom wallet key is gone so with that said thank you so much for watching this video this is an amazing app I hope you learned a lot from it and now go ahead take this app and use it in your own application and then use it and build on top of it and then let us know what you've built that said thank you so much for watching subscribe and I'll see you in the next one peace
