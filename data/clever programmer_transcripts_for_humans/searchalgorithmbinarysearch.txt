With timestamps:

00:00 - yo what is up guys coach daniel here aka
00:03 - data structure papi
00:04 - aka algo daddy whatever else you want to
00:07 - call it and today
00:08 - i'm going to talk to you about
00:10 - algorithms specifically
00:12 - how to make sure that using the optimal
00:14 - search algorithm
00:15 - now these are the things that you really
00:17 - want to dive into so that you can ace
00:19 - technical interviews i was able to
00:21 - interview at youtube
00:23 - microsoft and blue origin and actually
00:25 - get offers from them because i was able
00:27 - to perform well in the technical
00:28 - interview
00:29 - so what i want to do here is i want to
00:30 - teach you guys the things that i learned
00:33 - and the few things that you have to know
00:35 - so that you can make sure you can ace
00:37 - these interviews and absolutely crush it
00:38 - and get that job offer
00:40 - working as a developer at your dream
00:42 - company so with that being said guys
00:44 - make sure you hit that like button so we
00:46 - could push this video out there and beat
00:47 - the youtube algorithm
00:49 - smash that subscribe button hit that
00:50 - bell notification icon so that whenever
00:52 - we drop
00:53 - videos like this you receive them right
00:56 - off the bat you get the notification
00:57 - icon
00:58 - and you can become an expert developer
01:00 - all right guys
01:01 - well with that being said let's go ahead
01:03 - and jump into this
01:04 - video so guys like i mentioned before i
01:07 - want to dive
01:08 - into algorithms in the next couple
01:10 - videos because some of these algorithms
01:12 - are the fundamental algorithms that if
01:14 - you know and you understand you're going
01:16 - to be able to apply and use when it
01:18 - comes to data structures
01:19 - specifically in this video we'll be
01:21 - talking about search algorithms
01:23 - so what a search algorithm really means
01:25 - it's just a different way of trying to
01:27 - find
01:28 - a piece of data from a larger data set
01:32 - sample now this is important because
01:33 - there's lots of different ways they
01:35 - could try to find this data
01:36 - we want to make sure using the most
01:38 - optimal one depending on what data
01:40 - structure using depending on how you're
01:42 - storing the data
01:43 - and if you're able to use the most
01:44 - optimal one then you can make sure
01:46 - that can scale over time so let me give
01:49 - you a simple example
01:50 - imagine that you have a phone book like
01:52 - the old yellow pages
01:54 - thousand pages long and it has all of
01:56 - the addresses of everyone you know
01:58 - around you there
01:58 - now if you're looking for a specific
02:00 - address for example if you're looking
02:02 - for
02:02 - algo daddy so you're looking for the ds
02:06 - then one way you can approach it is you
02:08 - could start to flip the pages
02:10 - through the book one by one by one by
02:13 - one by one until you get to the letters
02:14 - ds
02:15 - and then you start to look for the next
02:16 - one which is the d a d
02:18 - a d so on and so forth until you get to
02:20 - i'll go daddy if it's sorted by the last
02:22 - name
02:23 - another approach you could take is you
02:25 - can look at the side of the book where
02:27 - you see the letter separated
02:29 - you open up the d section and then you
02:31 - partition that or you split that up
02:33 - and then you look at the next letter so
02:35 - now you see d
02:37 - c so you would know that you would have
02:38 - to go to the left so you get a couple
02:40 - more pages
02:41 - and you flip to that point and you keep
02:42 - on doing that until you find
02:44 - the page that's going to show you i'll
02:46 - go daddy that's me
02:48 - now the thing about both of these ways
02:50 - of finding
02:51 - that word that you're looking for are
02:53 - two different approaches
02:54 - they're two different algorithms to
02:57 - finding the word
02:58 - but one of them is going to be much more
02:59 - effective because if you take a word
03:00 - that might be towards the end
03:02 - of the thousand page book it's gonna
03:04 - take you longer to get there
03:05 - now not only that what happens if this
03:08 - thousand page book
03:10 - ends up being a yellow pages of the
03:11 - entire world into ten thousand page book
03:14 - now you're gonna see the scale of how
03:15 - long it's gonna take to go
03:17 - up tremendously so if your book goes
03:19 - from 1 000 pages to 10
03:21 - 000 pages the scale of the input goes up
03:24 - by 10x
03:25 - if you have your algorithm where you go
03:26 - page by page by page by page
03:29 - that is going to take you 10x longer as
03:31 - well and that is what's called
03:32 - linear growth if you look at this graph
03:35 - here
03:36 - i talked about big-oh notation and time
03:37 - complexity before
03:39 - this is gonna become really relevant
03:41 - when you're looking at different
03:42 - algorithms and the most optimal one and
03:44 - if we talk about that linear growth
03:46 - that would be like this line right here
03:48 - which is big o of
03:49 - n so if your input size your elements
03:52 - increase by 1000
03:53 - your time is going to increase by 1000
03:55 - and it creates a linear line
03:57 - but if we look at our other example
03:58 - where we're partitioning the book
04:01 - in half every single time until we get
04:03 - to the point if my book is a thousand
04:05 - pages long it's only gonna take me
04:07 - 13 halves to get to the page that i'm
04:10 - looking for
04:10 - so the input size is of size 1000
04:14 - it would take you about nine to ten
04:16 - times to be able to find the word that
04:18 - you're looking for
04:19 - so the input size is of size 1000 it
04:22 - would take about
04:22 - nine halves nine times of having that
04:25 - input
04:26 - until getting to the page that you are
04:28 - looking for
04:29 - so if we look at this and we grew that
04:31 - input size from 1 000 to 10
04:33 - 000 and we do the algorithm where we cut
04:35 - in half every single time we're not
04:37 - gonna experience such tremendous growth
04:38 - in how long it takes
04:40 - because now we're dealing it's not going
04:42 - to be as slow as the other algorithm
04:44 - as the input grows because what happens
04:47 - is if you look at
04:48 - big o of log n if your input
04:51 - is of size 1000 it'll take you 9 to 10
04:54 - times to get to the page they're looking
04:55 - for
04:56 - if your book grows from size 1000 to 10
04:58 - 000
04:59 - it's only going to take you about 14
05:01 - times to look for the page that you
05:03 - are looking for so it doesn't grow by
05:07 - 10x like the linear growth would
05:09 - it only grows by a small factor which
05:12 - that ends up
05:13 - looking like the curve of big o log n so
05:16 - this is why
05:16 - big o complexity is super important and
05:19 - these are the things that if you don't
05:20 - quite understand
05:21 - you could revisit my previous video
05:23 - where i dive deep into big o notation
05:25 - and time complexity so by now i hope
05:27 - that you understand
05:28 - what we are trying to do with this video
05:31 - because there is different types
05:32 - of searching algorithms they could use
05:34 - to be able to look for things so what i
05:36 - want to talk about
05:37 - now is the one that you want to
05:39 - familiarize with yourself
05:40 - the most the one you want to familiarize
05:42 - yourself with
05:43 - the most and the one that's probably
05:45 - most commonly used and the most optimal
05:48 - in most cases that's lots of most and
05:50 - that is going to be
05:51 - binary search so binary search i already
05:54 - introduced you to the idea
05:56 - but the word binary means you have two
05:57 - options right with binary search what
05:59 - you're going to do is if you have a
06:01 - sorted array or an object that has
06:03 - sorted data it's going to be very simple
06:05 - you're going to go to the middle and if
06:07 - the value is less than what you're
06:08 - looking for
06:09 - you now have a new range which is half
06:11 - of what you had before then you're going
06:13 - to go to the middle of that
06:14 - and if the value is not equal to that
06:16 - and it's less than that then now you
06:18 - have a new range of
06:20 - what you're looking for so each time
06:21 - it's getting hacked and this is very
06:23 - similar to that
06:24 - big o log and curve that we're looking
06:27 - at that is
06:28 - very optimal and very quick so what i
06:30 - want to do next is i want to dive into
06:31 - some code so we can look at what the
06:33 - code would
06:34 - look like that way you can go implement
06:36 - it because the thing is when you're in
06:37 - these technical interviews
06:38 - honestly most of the time they're not
06:40 - going to ask you to implement it
06:42 - but they might ask you questions about
06:43 - it or you might have to solve a problem
06:46 - that requires some sort of searching so
06:48 - if you could point out that you're gonna
06:49 - do some binary search here they're not
06:51 - gonna ask you to implement it
06:52 - they're gonna at least know that you're
06:53 - aware of it that you know about that you
06:55 - understand
06:56 - why binary search would be so important
06:58 - to being able to solve the problem in
07:00 - the least amount of time so let's jump
07:02 - into some code alright guys so what i
07:03 - did here is i got a binary search
07:05 - function from
07:06 - geeksforgeeks this is a simple one that
07:08 - you can implement now i do want to
07:09 - mention there's different ways you can
07:11 - implement this i wanted to show you guys
07:13 - with a
07:14 - while loop you can also do it using
07:16 - recursion i'm doing the loop just
07:17 - because for
07:18 - for some people recursions a little more
07:19 - complicated and loops are easier
07:21 - so it's going to be very very simple the
07:23 - first thing we want to do
07:25 - is we're going to set up a start and an
07:28 - end
07:28 - index so what that looks like is
07:30 - whenever we have our array
07:32 - we just want to know the index of the
07:34 - very first element which is obviously
07:35 - the fir
07:36 - the zero index every time and one of the
07:38 - index of the last element which would be
07:40 - the size
07:40 - minus one this is going to allow us to
07:43 - start to be able to find
07:44 - where the midpoint is of the range that
07:46 - we care about because in the beginning
07:48 - we care about all these numbers
07:50 - but once we start to partition into the
07:51 - half and we know it's in the lesser half
07:54 - we don't care about the rest of these
07:55 - numbers so we could get rid of those now
07:58 - we just focus
07:59 - on half of those numbers and that's why
08:00 - we're having it
08:02 - each and every single time so the
08:04 - important thing to know is our loop is
08:06 - going to keep on going
08:07 - until the start passes the end so again
08:10 - to clarify on that
08:12 - if we have our array we have our start
08:14 - index and we have our
08:15 - n index every time i check for the
08:19 - middle and say that value
08:20 - equals is later than or greater than i'm
08:22 - gonna know where i want to go
08:23 - so if i have i'm looking for the value
08:25 - of 10 and i see that here
08:27 - the value is 5 then i know the 10 is
08:30 - going to be somewhere in the upper half
08:32 - so what i want to do is i want to make
08:34 - this start
08:36 - point to where the middle was and then
08:38 - we're going to choose a new middle one
08:40 - because we don't care about the rest
08:42 - over here
08:43 - so we're going to keep on doing this
08:44 - till this range between the start and
08:46 - the end gets closer and closer and
08:48 - closer
08:48 - until it's on the exact same index
08:52 - and or it's on this exact same index or
08:54 - it passes each other
08:55 - that means we've already searched past
08:57 - the havings that we can
08:59 - so the first thing we need to do is we
09:01 - need to see
09:02 - exactly where the middle index is
09:05 - now this one might seem a little bit
09:07 - tricky because what if the array size
09:09 - is an even number for example if i have
09:13 - four different indexes which one is the
09:16 - middle index is it this one
09:17 - is it this one well the cool thing is it
09:19 - is up to you
09:21 - and how you want to implement it so this
09:23 - array is of size four
09:25 - i know two is halfway there what we
09:28 - could do is
09:29 - we could simply just pick the one spot
09:32 - we could pick the one index or we could
09:34 - pick the two index either
09:36 - is totally fine in this example looks
09:37 - like it might make a huge difference
09:39 - because the small
09:40 - input but think about it if you have an
09:42 - input of size 10 000
09:44 - then you're not going to really care if
09:45 - you choose between 5000 or 5001
09:48 - because now we're looking at a bigger
09:50 - input size a bigger scale for the sake
09:53 - of this example what you find
09:55 - is we're gonna go ahead with the the
09:58 - smaller number
09:58 - which is the math.floor so what we do is
10:01 - we get
10:02 - our start index we get our end index we
10:05 - add them up so that gives us all the
10:07 - elements in the range that we're looking
10:09 - for in this case it would be all of it
10:10 - and divided by two and we're going to
10:12 - round that down to the closest number so
10:15 - that's going to get us the index right
10:16 - in the middle
10:17 - or it's going to get us the index if
10:19 - there's two in the middle the lesser
10:20 - index
10:21 - so once we have that middle index the
10:23 - first the next thing we want to do is we
10:24 - want to actually compare
10:26 - that value to the value that we are
10:28 - looking for
10:29 - because in the end we're searching for
10:31 - this data we want to see if this data
10:32 - even exists
10:33 - in this data set in this sorted array if
10:36 - it equals
10:36 - then awesome we could just return true
10:38 - or return the value to let them know
10:40 - that we did find this value inside of
10:42 - this array
10:43 - if it doesn't equal then that's where
10:45 - the binary search comes into play
10:48 - so what is happening here is we've set
10:49 - up our start index we've set up our n
10:52 - index and we found our middle index we
10:55 - saw that the value we are looking for x
10:57 - does not equal the value that is in this
11:00 - middle index
11:00 - so this would be like a y or something
11:02 - that is not an x
11:04 - so in that case we want to see all right
11:06 - the value y
11:07 - is it greater than or is it less than
11:10 - the value x because if the value y is
11:13 - greater than what we're looking for
11:14 - then we know we want to go to the lower
11:16 - half if the value is less than what
11:19 - we're looking for then we know we want
11:20 - to go
11:20 - to the upper half so we want to go to
11:22 - the upper half because the value we're
11:24 - looking for
11:25 - is less because the value we're looking
11:27 - for is greater than what's actually here
11:29 - it's very simple we just need to make
11:31 - this assignment
11:33 - our new start and when this is the new
11:36 - start we're going to run the exact same
11:37 - process but now we're going to find the
11:38 - new middle over here
11:40 - so we look at our new range that has
11:42 - been cut in half because we don't care
11:44 - about all the other stuff because we
11:45 - know it doesn't exist over there
11:46 - and then we're going to do the same
11:47 - thing i cut this in half and see the
11:50 - value in the middle
11:51 - is that the value we're looking for if
11:52 - not then we're going to cut it in half
11:54 - again
11:55 - so these are going to be changing and
11:56 - what that looks like is
11:58 - if the value is less than
12:01 - x just like how we talked about so if
12:04 - the value is less than
12:05 - x then we know x is going to be on the
12:08 - upper half and what it is that we're
12:10 - looking for
12:11 - so in that case we're gonna set start to
12:13 - be at the mid
12:14 - plus one so we do the plus one because
12:16 - we could disregard
12:17 - the index that we just checked which is
12:19 - the current one that we're at which is
12:21 - the mid
12:21 - right and we saw that one's not part of
12:22 - the equation anymore however
12:25 - if the value is greater than x we're
12:28 - going to go to this else
12:29 - we want to push down the end to the
12:31 - middle so we now have our new range
12:33 - and you just keep on doing this
12:35 - partitioning in half and half again
12:37 - until at some point they're gonna cross
12:39 - over or they're gonna be pointing to the
12:40 - same value and that's when we exit the
12:42 - loop
12:42 - by that point since we never saw the
12:44 - value inside the array
12:46 - we know that that value is not exist
12:48 - inside of this array
12:49 - so guys there you have it now you have
12:51 - another tool
12:52 - for your toolbox what i want to do these
12:55 - next couple of videos is i want to go
12:56 - deep into data structures and go deep
12:58 - into algorithms
12:59 - and give you the essential tools because
13:01 - the reality is you don't really need to
13:03 - be aware of
13:04 - all of them you just need to be aware of
13:05 - the core essential foundational data
13:08 - structures and algorithms
13:09 - that are going to help you out with your
13:11 - job interviews they're going to help you
13:12 - out in your actual
13:14 - job if you understand these core
13:15 - fundamental data structures and
13:17 - algorithms
13:18 - the rest you can learn if you need to
13:20 - learn it in the future the rest all
13:21 - derives from
13:23 - this and what you're learning today so
13:24 - what you have now is
13:26 - one of the best most optimal searching
13:29 - algorithms now of course it could be
13:30 - more optimal if you're able to divide by
13:32 - three by four by more than just by two
13:34 - if you're able to get rid of more things
13:36 - like that at something but at least you
13:37 - understand the idea
13:39 - that if you're constantly dividing by a
13:41 - certain number
13:42 - of all your data sets and you're just
13:44 - picking the portion dividing by that
13:45 - again
13:46 - picking the portion dividing by that
13:47 - again you're gonna get to your solution
13:50 - very quick i just want to reemphasize
13:52 - that number again if you were to divide
13:54 - by half every single time
13:55 - and you were trying to get a number
13:57 - between the one and one thousand
13:59 - that would take you just about nine
14:01 - divisions
14:02 - 10 divisions to get to where you want to
14:03 - go if you were to multiply that by
14:06 - 10 so you're at 10 000 you would only
14:09 - add about four more division and you'd
14:10 - be at 13 divisions
14:12 - and that's all i would need to take but
14:14 - you were able to put a larger input
14:16 - so this is why it's such an optimal
14:18 - algorithm because if you keep on
14:19 - bringing that number up
14:20 - it's crazy how small of a number is
14:23 - going to increment
14:24 - in terms of how many divisions you have
14:26 - to make like i said before guys
14:28 - this is binary search this is going to
14:30 - be very crucial to understanding
14:32 - data structures algorithms learning the
14:33 - most optimal way i haven't talked on
14:35 - big-o notation
14:37 - which if you forgot about you could go
14:38 - check out the last video but these are
14:40 - the things that we're going to build on
14:42 - to help you in your foundation to help
14:43 - you crush software developer interviews
14:46 - now
14:47 - if you're in a point where even
14:48 - struggling to get software developer
14:49 - interviews
14:50 - then maybe we need to work on your
14:51 - portfolio what i want you to do is click
14:53 - the link below because we have a special
14:55 - training for you
14:56 - where you're able to build an amazing
14:58 - project that you put into your portfolio
15:00 - start to get these interviews
15:01 - then re-watch these videos so you could
15:03 - crush those interviews
15:04 - and land your job as a six-figure
15:06 - developer so go ahead click the link
15:08 - below
15:09 - like this video let's beat the youtube
15:12 - algorithm gods
15:13 - go ahead and subscribe hit the bell
15:15 - notification icon so that whenever we
15:17 - drop out
15:18 - more fire content just like this one so
15:20 - you could crush those technical
15:21 - interviews
15:22 - you will be notified alright guys that
15:25 - is it
15:26 - for this video coach daniel data
15:28 - structures papi
15:30 - i'll go daddy is signing out see the
15:33 - next one
15:40 - [Music]
15:43 - you

Cleaned transcript:

yo what is up guys coach daniel here aka data structure papi aka algo daddy whatever else you want to call it and today i'm going to talk to you about algorithms specifically how to make sure that using the optimal search algorithm now these are the things that you really want to dive into so that you can ace technical interviews i was able to interview at youtube microsoft and blue origin and actually get offers from them because i was able to perform well in the technical interview so what i want to do here is i want to teach you guys the things that i learned and the few things that you have to know so that you can make sure you can ace these interviews and absolutely crush it and get that job offer working as a developer at your dream company so with that being said guys make sure you hit that like button so we could push this video out there and beat the youtube algorithm smash that subscribe button hit that bell notification icon so that whenever we drop videos like this you receive them right off the bat you get the notification icon and you can become an expert developer all right guys well with that being said let's go ahead and jump into this video so guys like i mentioned before i want to dive into algorithms in the next couple videos because some of these algorithms are the fundamental algorithms that if you know and you understand you're going to be able to apply and use when it comes to data structures specifically in this video we'll be talking about search algorithms so what a search algorithm really means it's just a different way of trying to find a piece of data from a larger data set sample now this is important because there's lots of different ways they could try to find this data we want to make sure using the most optimal one depending on what data structure using depending on how you're storing the data and if you're able to use the most optimal one then you can make sure that can scale over time so let me give you a simple example imagine that you have a phone book like the old yellow pages thousand pages long and it has all of the addresses of everyone you know around you there now if you're looking for a specific address for example if you're looking for algo daddy so you're looking for the ds then one way you can approach it is you could start to flip the pages through the book one by one by one by one by one until you get to the letters ds and then you start to look for the next one which is the d a d a d so on and so forth until you get to i'll go daddy if it's sorted by the last name another approach you could take is you can look at the side of the book where you see the letter separated you open up the d section and then you partition that or you split that up and then you look at the next letter so now you see d c so you would know that you would have to go to the left so you get a couple more pages and you flip to that point and you keep on doing that until you find the page that's going to show you i'll go daddy that's me now the thing about both of these ways of finding that word that you're looking for are two different approaches they're two different algorithms to finding the word but one of them is going to be much more effective because if you take a word that might be towards the end of the thousand page book it's gonna take you longer to get there now not only that what happens if this thousand page book ends up being a yellow pages of the entire world into ten thousand page book now you're gonna see the scale of how long it's gonna take to go up tremendously so if your book goes from 1 000 pages to 10 000 pages the scale of the input goes up by 10x if you have your algorithm where you go page by page by page by page that is going to take you 10x longer as well and that is what's called linear growth if you look at this graph here i talked about bigoh notation and time complexity before this is gonna become really relevant when you're looking at different algorithms and the most optimal one and if we talk about that linear growth that would be like this line right here which is big o of n so if your input size your elements increase by 1000 your time is going to increase by 1000 and it creates a linear line but if we look at our other example where we're partitioning the book in half every single time until we get to the point if my book is a thousand pages long it's only gonna take me 13 halves to get to the page that i'm looking for so the input size is of size 1000 it would take you about nine to ten times to be able to find the word that you're looking for so the input size is of size 1000 it would take about nine halves nine times of having that input until getting to the page that you are looking for so if we look at this and we grew that input size from 1 000 to 10 000 and we do the algorithm where we cut in half every single time we're not gonna experience such tremendous growth in how long it takes because now we're dealing it's not going to be as slow as the other algorithm as the input grows because what happens is if you look at big o of log n if your input is of size 1000 it'll take you 9 to 10 times to get to the page they're looking for if your book grows from size 1000 to 10 000 it's only going to take you about 14 times to look for the page that you are looking for so it doesn't grow by 10x like the linear growth would it only grows by a small factor which that ends up looking like the curve of big o log n so this is why big o complexity is super important and these are the things that if you don't quite understand you could revisit my previous video where i dive deep into big o notation and time complexity so by now i hope that you understand what we are trying to do with this video because there is different types of searching algorithms they could use to be able to look for things so what i want to talk about now is the one that you want to familiarize with yourself the most the one you want to familiarize yourself with the most and the one that's probably most commonly used and the most optimal in most cases that's lots of most and that is going to be binary search so binary search i already introduced you to the idea but the word binary means you have two options right with binary search what you're going to do is if you have a sorted array or an object that has sorted data it's going to be very simple you're going to go to the middle and if the value is less than what you're looking for you now have a new range which is half of what you had before then you're going to go to the middle of that and if the value is not equal to that and it's less than that then now you have a new range of what you're looking for so each time it's getting hacked and this is very similar to that big o log and curve that we're looking at that is very optimal and very quick so what i want to do next is i want to dive into some code so we can look at what the code would look like that way you can go implement it because the thing is when you're in these technical interviews honestly most of the time they're not going to ask you to implement it but they might ask you questions about it or you might have to solve a problem that requires some sort of searching so if you could point out that you're gonna do some binary search here they're not gonna ask you to implement it they're gonna at least know that you're aware of it that you know about that you understand why binary search would be so important to being able to solve the problem in the least amount of time so let's jump into some code alright guys so what i did here is i got a binary search function from geeksforgeeks this is a simple one that you can implement now i do want to mention there's different ways you can implement this i wanted to show you guys with a while loop you can also do it using recursion i'm doing the loop just because for for some people recursions a little more complicated and loops are easier so it's going to be very very simple the first thing we want to do is we're going to set up a start and an end index so what that looks like is whenever we have our array we just want to know the index of the very first element which is obviously the fir the zero index every time and one of the index of the last element which would be the size minus one this is going to allow us to start to be able to find where the midpoint is of the range that we care about because in the beginning we care about all these numbers but once we start to partition into the half and we know it's in the lesser half we don't care about the rest of these numbers so we could get rid of those now we just focus on half of those numbers and that's why we're having it each and every single time so the important thing to know is our loop is going to keep on going until the start passes the end so again to clarify on that if we have our array we have our start index and we have our n index every time i check for the middle and say that value equals is later than or greater than i'm gonna know where i want to go so if i have i'm looking for the value of 10 and i see that here the value is 5 then i know the 10 is going to be somewhere in the upper half so what i want to do is i want to make this start point to where the middle was and then we're going to choose a new middle one because we don't care about the rest over here so we're going to keep on doing this till this range between the start and the end gets closer and closer and closer until it's on the exact same index and or it's on this exact same index or it passes each other that means we've already searched past the havings that we can so the first thing we need to do is we need to see exactly where the middle index is now this one might seem a little bit tricky because what if the array size is an even number for example if i have four different indexes which one is the middle index is it this one is it this one well the cool thing is it is up to you and how you want to implement it so this array is of size four i know two is halfway there what we could do is we could simply just pick the one spot we could pick the one index or we could pick the two index either is totally fine in this example looks like it might make a huge difference because the small input but think about it if you have an input of size 10 000 then you're not going to really care if you choose between 5000 or 5001 because now we're looking at a bigger input size a bigger scale for the sake of this example what you find is we're gonna go ahead with the the smaller number which is the math.floor so what we do is we get our start index we get our end index we add them up so that gives us all the elements in the range that we're looking for in this case it would be all of it and divided by two and we're going to round that down to the closest number so that's going to get us the index right in the middle or it's going to get us the index if there's two in the middle the lesser index so once we have that middle index the first the next thing we want to do is we want to actually compare that value to the value that we are looking for because in the end we're searching for this data we want to see if this data even exists in this data set in this sorted array if it equals then awesome we could just return true or return the value to let them know that we did find this value inside of this array if it doesn't equal then that's where the binary search comes into play so what is happening here is we've set up our start index we've set up our n index and we found our middle index we saw that the value we are looking for x does not equal the value that is in this middle index so this would be like a y or something that is not an x so in that case we want to see all right the value y is it greater than or is it less than the value x because if the value y is greater than what we're looking for then we know we want to go to the lower half if the value is less than what we're looking for then we know we want to go to the upper half so we want to go to the upper half because the value we're looking for is less because the value we're looking for is greater than what's actually here it's very simple we just need to make this assignment our new start and when this is the new start we're going to run the exact same process but now we're going to find the new middle over here so we look at our new range that has been cut in half because we don't care about all the other stuff because we know it doesn't exist over there and then we're going to do the same thing i cut this in half and see the value in the middle is that the value we're looking for if not then we're going to cut it in half again so these are going to be changing and what that looks like is if the value is less than x just like how we talked about so if the value is less than x then we know x is going to be on the upper half and what it is that we're looking for so in that case we're gonna set start to be at the mid plus one so we do the plus one because we could disregard the index that we just checked which is the current one that we're at which is the mid right and we saw that one's not part of the equation anymore however if the value is greater than x we're going to go to this else we want to push down the end to the middle so we now have our new range and you just keep on doing this partitioning in half and half again until at some point they're gonna cross over or they're gonna be pointing to the same value and that's when we exit the loop by that point since we never saw the value inside the array we know that that value is not exist inside of this array so guys there you have it now you have another tool for your toolbox what i want to do these next couple of videos is i want to go deep into data structures and go deep into algorithms and give you the essential tools because the reality is you don't really need to be aware of all of them you just need to be aware of the core essential foundational data structures and algorithms that are going to help you out with your job interviews they're going to help you out in your actual job if you understand these core fundamental data structures and algorithms the rest you can learn if you need to learn it in the future the rest all derives from this and what you're learning today so what you have now is one of the best most optimal searching algorithms now of course it could be more optimal if you're able to divide by three by four by more than just by two if you're able to get rid of more things like that at something but at least you understand the idea that if you're constantly dividing by a certain number of all your data sets and you're just picking the portion dividing by that again picking the portion dividing by that again you're gonna get to your solution very quick i just want to reemphasize that number again if you were to divide by half every single time and you were trying to get a number between the one and one thousand that would take you just about nine divisions 10 divisions to get to where you want to go if you were to multiply that by 10 so you're at 10 000 you would only add about four more division and you'd be at 13 divisions and that's all i would need to take but you were able to put a larger input so this is why it's such an optimal algorithm because if you keep on bringing that number up it's crazy how small of a number is going to increment in terms of how many divisions you have to make like i said before guys this is binary search this is going to be very crucial to understanding data structures algorithms learning the most optimal way i haven't talked on bigo notation which if you forgot about you could go check out the last video but these are the things that we're going to build on to help you in your foundation to help you crush software developer interviews now if you're in a point where even struggling to get software developer interviews then maybe we need to work on your portfolio what i want you to do is click the link below because we have a special training for you where you're able to build an amazing project that you put into your portfolio start to get these interviews then rewatch these videos so you could crush those interviews and land your job as a sixfigure developer so go ahead click the link below like this video let's beat the youtube algorithm gods go ahead and subscribe hit the bell notification icon so that whenever we drop out more fire content just like this one so you could crush those technical interviews you will be notified alright guys that is it for this video coach daniel data structures papi i'll go daddy is signing out see the next one you
