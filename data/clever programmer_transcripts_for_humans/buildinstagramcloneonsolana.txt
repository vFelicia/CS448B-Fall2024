With timestamps:

00:00 - in this video we're going to be making
00:01 - Instagram web 3.0 dap on the Solana
00:04 - blockchain I'll be showing you guys how
00:06 - to create your very first Solana smart
00:08 - contract using a program called seahorse
00:11 - which lets you write Solana programs
00:12 - using python which is insane so if you
00:14 - want to learn how to make your very
00:15 - first Solano project using python I'll
00:18 - show you everything you need to know
00:19 - including how to use your Phantom wallet
00:21 - and connect it to your dap as well as
00:23 - connect to the blockchain using an RPC
00:25 - node called quick node you'll be using
00:28 - Soul PG to build deploy and test your
00:30 - program and without further Ado let's
00:32 - just get started okay so before I show
00:34 - you guys how to download all the starter
00:36 - files let's do a quick demo of the app
00:38 - as you can see this is Instagram and the
00:42 - difference is we can connect our Phantom
00:44 - wallet so go ahead and connect your
00:46 - Phantom wall if you already know how to
00:48 - do so right but I'll show you guys down
00:50 - the line on how to do it the next thing
00:52 - about this is that we can upload images
00:54 - with captions so what we have to do is
00:56 - get an image so I have this one it says
00:58 - a man and a woman standing in a room but
01:01 - this this doesn't seem like a woman but
01:02 - I don't want to assume so let's go ahead
01:04 - and copy image address
01:06 - and create this plus icon and you can
01:09 - create a post so it looks like they're
01:10 - working or something so let's put the
01:11 - grind right as you can see and paste
01:14 - that image URL it takes any image URL
01:16 - that you approve with next.js so let's
01:19 - hit create it's only gonna cost less
01:21 - than one Soul so let's hit approve and
01:24 - then boom created post and it's going to
01:26 - take a second but it should pop up
01:28 - somewhere and if we take a look
01:31 - ah there it is see 79 likes and the
01:34 - grind right those likes are random it's
01:37 - not going to generate until we actually
01:38 - put a real like right just for show but
01:41 - if I press that heart icon you can see
01:43 - it's gonna take us some soul to do this
01:44 - action and boom we have one like right
01:48 - we can also unlike this With This Heart
01:50 - icon and we receive soul back right boom
01:54 - and of course there's also an edit post
01:56 - so I'm gonna say nice
01:58 - all right no changes impacting the owner
02:01 - update post successfully and you should
02:04 - be able to see this post with uh nice
02:07 - now right and from there of course you
02:10 - can delete the post so all the
02:11 - functionality of Instagram
02:13 - um the basic functionality is there so
02:15 - there post the deleted successfully and
02:17 - that's it that's the demo so now let's
02:19 - show you how to get all right so how do
02:21 - you start downloading the files to make
02:22 - it easier guys we have our new CLI tool
02:25 - that gets all the starter files that you
02:27 - need to get started so what I'm going to
02:28 - do is go ahead and open up your terminal
02:31 - any way you want and just double check
02:33 - that you're in the folder that you want
02:34 - to put these projects on all right so
02:36 - from there all you have to write is npx
02:39 - cleverprogrammer at latest and you
02:42 - should get the latest version of our CLI
02:44 - tool once you hit enter just put in your
02:47 - email address all right I'm gonna put
02:48 - Lance Toledo gmail.com your name Lance
02:53 - and then you'll see all of the projects
02:55 - we have available to you so there's a
02:58 - lot of projects nowadays and you want to
03:00 - make sure you click Solana Instagram
03:02 - because that's what we're doing right
03:06 - cool so it's going to take a couple
03:07 - minutes to get all the files you need
03:09 - but once it's done it should be good to
03:11 - go
03:12 - all right so now that you've finished
03:13 - initializing your repo let's go ahead
03:16 - and get signed up for quick note so
03:19 - let's go ahead and go here
03:22 - all right so go ahead and click that
03:23 - link in description for quick note if
03:25 - the CLI tool didn't bring you here
03:28 - boom so once you're here go ahead and
03:30 - create your account because you can set
03:32 - up your endpoint for free with quick
03:34 - node uh if you don't know what an
03:36 - endpoint is it lets you have a direct
03:38 - connection from your app to the
03:40 - blockchain right if you remember the
03:42 - picture there's a block this will give
03:44 - us an endpoint to connect to it so go
03:46 - ahead create a free account
03:49 - and get started I already have an
03:51 - account so we're going to use this one
03:53 - so once you've confirmed your email you
03:55 - made an account you'll see uh something
03:58 - that says create endpoint
04:00 - and what I could do is let's go ahead
04:02 - and archive this
04:04 - I understand
04:09 - just copy that paste it boom okay I
04:11 - understand
04:15 - the consequences
04:18 - archive endpoint
04:20 - boom so it's just something like this
04:22 - once you confirm the email you should
04:24 - see something like this go ahead and
04:25 - create an endpoint
04:26 - and click on your network as you can see
04:29 - quick note supports multiple different
04:31 - chains ethereum Bitcoin we're going to
04:33 - be using Solana of course let's click
04:35 - that
04:37 - this is another key thing right the main
04:40 - net is where we use real money Real
04:41 - Solana right there's the test net but
04:44 - what we're going to be using is the
04:45 - devnet so let's go ahead and click
04:47 - devnet continue and there's a bunch of
04:50 - extra tools for nft fetching and cross
04:53 - minting but we're not doing anything
04:54 - like that so let's create just create an
04:56 - endpoint
04:58 - awesome so that's it guys you
05:00 - successfully created an endpoint all you
05:02 - have to do is hit copy right here click
05:05 - copy and let's go back to our app and if
05:08 - you go to utils
05:10 - constant.js go ahead and put our PC
05:14 - endpoint and paste what you copied in
05:17 - quotes
05:18 - do that right
05:20 - we're good to go with quick note
05:23 - next step if you haven't already let's
05:25 - sign up for our Phantom wallet if you
05:28 - guys didn't know this is Phantom all and
05:30 - this is where you're gonna hold your
05:32 - Solana your any nfts you have with
05:34 - Solana right so go ahead and create a
05:37 - wallet if you don't already
05:39 - just gonna put in my password and show
05:40 - you all right this is what it should
05:42 - look like and you can see I have 4.9
05:44 - Soul how can you get it all you have to
05:46 - do is go to your browser and type in
05:48 - Solana uh not Salon sorry Phantom
05:52 - extension extension
05:56 - boom and if you go here you'll see
05:58 - Chrome
06:00 - and just click add to Chrome and once
06:02 - you get add to Chrome it should add it
06:04 - right here
06:05 - click on the cute little ghost and it
06:08 - should ask you to create a wallet and
06:11 - remember your mnemonic and don't share
06:13 - that with anybody else I have a test
06:15 - wallet so I don't really care but there
06:18 - you go
06:19 - all right so now that we signed up for
06:22 - everything we have everything we need
06:23 - let's go ahead and start our app let's
06:25 - do a yarn Dev
06:27 - and then from here we could go to
06:29 - localhost
06:33 - bam okay cool
06:37 - all right so as you can see uh you saw
06:40 - what it looks like in the demo but this
06:42 - is what we're starting with right
06:44 - nothing actually works if I press this
06:46 - like button right you get an error
06:49 - if I press this x button nothing happens
06:52 - right you just see a nice console log
06:53 - that says uh deleting post right even
06:56 - though there's no post all right connect
06:57 - wallet here all right we signed up for
07:00 - Phantom but we don't have that yet right
07:02 - this model to create a post
07:05 - hey
07:06 - hey huh crate doesn't create anything
07:09 - right so the first thing we need to do
07:12 - right is let's figure out how to get our
07:16 - Phantom wallet connection going so let's
07:18 - go ahead and do that
07:21 - all right so let's go ahead and switch
07:24 - to our code
07:26 - bring this down for a second and let's
07:28 - go to
07:30 - our app so I'm going to pages and let's
07:31 - go to underscore app.js you should see
07:34 - something like this right so here are
07:37 - our starter files we're already
07:39 - importing the hooks we're going to use
07:41 - uh this is for later right and now let's
07:45 - get our Imports in so let's get our
07:47 - wallet Imports so this is our wallet
07:50 - Imports awesome so for our wallet
07:53 - Imports we need to import the connection
07:56 - provider
07:57 - let's go ahead and do that so we'll do
08:00 - like this connection
08:01 - provider
08:04 - and we're also going to get a wallet
08:06 - provider
08:07 - right all of this comes from a Solana
08:10 - package so this should already be in
08:13 - your app if you use npx Club programmer
08:15 - if not make sure you do a yarn add
08:18 - Solana
08:19 - and this is wallet adapter react
08:22 - okay so this is it these are our two
08:24 - providers
08:26 - another thing that we're gonna need is
08:28 - the wallet modal provider so when I
08:30 - click on the Phantom button that nice
08:32 - model asking which wallet that I want to
08:34 - click uh pops up right Solana gives that
08:36 - to us if we say wallet
08:40 - uh model
08:42 - provider
08:44 - from
08:45 - I believe this is from at Solana as well
08:47 - at Solano wallet adapter react uh UI
08:51 - there you go cool so next let's get all
08:55 - the wallets that we want right so we
08:58 - just want Phantom wallet adapter because
09:02 - that's what we signed up for cool and if
09:04 - you have any other wallets that you
09:05 - prefer right you can add them here
09:09 - uh but other than that this is what we
09:10 - want to use
09:11 - so cool
09:15 - there's something weird going on
09:19 - all right uh this has to be from
09:21 - something this has to be from
09:25 - at Solana wallet adapter wallets right
09:29 - this is me pulling from that Library
09:31 - so I lost all the errors
09:34 - um is there anything else we need at the
09:35 - moment yes there's one more thing uh
09:37 - Solana also gives us the styling which
09:39 - is pretty nice of them so if you do
09:41 - import
09:42 - uh what was it called again
09:45 - I think it was at Solana
09:48 - it's not one of these it's like react uy
09:51 - slash
09:54 - um styles
09:58 - dot CSS something like that Solana adapt
10:00 - adapter react Dash UI styles.css so this
10:04 - will give us the styling of the button
10:06 - itself you'll see cool now this is a use
10:09 - state that we need there is an SSR error
10:11 - with next this lets us fix it so make
10:13 - sure you have that we'll use it in a
10:15 - second
10:16 - but what we need to do is let's take our
10:20 - providers and put it into our app this
10:22 - component represents our entire app so
10:25 - if I go in here press enter let's do the
10:28 - connection provider first connection
10:29 - provider
10:32 - uh this can well this can be closed
10:37 - not self closing
10:38 - there you go this is what I want
10:40 - so let's take our app and put it within
10:43 - there
10:43 - press tab to indent it and connection
10:46 - provider is going to take a couple
10:48 - things
10:50 - um
10:51 - see
10:52 - yes
10:55 - so it's going to take the RPC endpoint
10:59 - is equal to
11:01 - and
11:03 - RPC endpoint right this is the quick
11:05 - note endpoint that we got earlier
11:08 - so since we put it in this and we're
11:10 - exporting it it will show up right here
11:13 - okay next there's a config that we need
11:15 - to add to it this is where we have an
11:18 - object with an object and we just say
11:20 - commit
11:21 - oops
11:23 - commitment
11:25 - yep
11:26 - is
11:27 - semicol uh colon confirmed
11:32 - it's like our pre-flight checks
11:34 - so config boom and the next thing is the
11:38 - wallet provider so let's do the same
11:39 - thing wallet provider not the modal yet
11:43 - put our component in there
11:46 - boom
11:48 - press tab
11:50 - uh okay so what does our wallet provider
11:52 - need right
11:54 - we need to provide our provider with
11:57 - wallet store so let's go ahead and do
11:59 - that
12:00 - so let's just say wallets
12:02 - is yep equal to wallets
12:06 - right so this let me ask you guys a
12:07 - question
12:09 - does wallets exist right this would give
12:11 - us wallets is undefined right so how do
12:13 - we make how do we give the provider
12:15 - wallets we need to create that object so
12:18 - we can do that around here underneath
12:20 - this fuse effect we can say const
12:22 - wallets so now this exists
12:25 - but we have to Define it now is equal to
12:27 - use memo right because we only want this
12:30 - to run once and it takes in an anonymous
12:34 - function
12:35 - and in that we'll take an array
12:38 - comma
12:39 - let's put this
12:42 - right here
12:44 - and inside you can put all the wallets
12:46 - so you say new
12:48 - Phantom wallet adapter right that's the
12:51 - whole reason we have this here this will
12:53 - initialize a new instance of the
12:55 - phantomon and any wallet that you add
12:58 - after this you do the same thing okay
13:00 - but again we like using Phantom here so
13:03 - we're gonna keep going with that
13:06 - um let's see anything else is that a
13:08 - semicolon here
13:09 - for sanity yeah Okay cool so now wallets
13:13 - exists
13:15 - um another thing I would like is you
13:17 - there's an auto connect feature which
13:18 - will if you have
13:20 - if you're logged into your Phantom
13:21 - wallet you have this it'll auto connect
13:23 - it and recognize the wall right away
13:25 - uh cool and then underneath that let's
13:28 - get the modal now
13:30 - boom
13:33 - okay
13:35 - and let's add the component indent it so
13:37 - it looks like this right it's easy to
13:39 - tell who the parent is the child the
13:41 - parent child boom so what's with the
13:43 - model uh wallet model provider doesn't
13:46 - take any children so what we're going to
13:48 - do here is add some conditional
13:50 - rendering right
13:52 - I only want this component to load
13:55 - if mounted is true right so remember we
13:59 - have this to fix the SSR error to ensure
14:01 - that if I say if mountain is true
14:05 - put parentheses here then load the
14:08 - component
14:10 - awesome so let's hit save
14:13 - so that is the app.js so now let's move
14:17 - over to actually putting the wallet
14:19 - button
14:20 - alrighty so next steps right we're in
14:22 - the app.js right if you see this
14:24 - component thing in line 42 for me that
14:27 - is our app right so this is technically
14:31 - your index.js
14:33 - right so what you see here everything
14:35 - you see here is the index right for
14:39 - example if you look at this
14:41 - this is all living with an index so if I
14:43 - were to comment something out let's do
14:45 - comment out uh stories our stories
14:48 - component if I do that save boom we lost
14:51 - the stories right everything lives here
14:52 - right so what we need to identify now is
14:56 - where is this button all right let me do
14:59 - it again
15:00 - where is this wallet button right guys
15:02 - so if you saw that this was stories
15:07 - right
15:09 - where do you think this wallet button
15:11 - here
15:12 - right if you said it should be something
15:15 - like a header then you are correct right
15:18 - so this is stories right there's
15:20 - something called layout right all of
15:23 - this an index is living within something
15:25 - called layout so let's go Ctrl B and
15:28 - let's click on layout so if I open up
15:31 - this components folder you'll see a
15:34 - bunch of different components that makes
15:36 - sense what we want to focus on is this
15:39 - right here layout
15:41 - right
15:43 - so let's click on that
15:45 - and Bam look what look what we see in
15:47 - layout right
15:49 - we see the wrapper and an app container
15:52 - with all the children within Leia right
15:54 - which is why all this stuff is
15:56 - considered children of Leia
15:57 - that's what this is
15:59 - and if I were to comment out header
16:02 - all right let's hit save
16:04 - look what happens we lost the button so
16:07 - that's how we can identify that the
16:09 - header component is where the wallet
16:11 - lives so
16:12 - now move a little bit faster now let's
16:14 - go to the header.js BAM and look line 54
16:18 - Phantom connect button goes here so how
16:21 - do we get the Phantom connect button
16:23 - guys
16:24 - well the very first thing to do is let's
16:27 - connect it right let's go ahead and
16:30 - connect our wallet by importing the
16:32 - wallet multi button which I did for you
16:34 - right here so you just say import wallet
16:36 - multi-button
16:39 - cool so uh we got the wallet multi-blend
16:41 - let's go ahead and take it all right
16:43 - well you can just get rid of this guy
16:45 - and just say
16:47 - oops
16:49 - and just say wallet multi-button self
16:52 - close and save so once we do that look
16:56 - at that and remember autoconnect it's
16:57 - already connected with me so let's go
17:00 - ahead and disconnect right
17:02 - except refresh
17:04 - and cool so you're going to notice if I
17:06 - click select wallet click Phantom bam
17:10 - that's it our user is connected with
17:12 - their wallet look how easy and simple
17:13 - that is so if you wanted to know how to
17:16 - connect your Solana wallet to your app
17:19 - that's how you do it so now that's done
17:22 - uh we can go ahead and x that out for
17:24 - now and let's actually work on the smart
17:27 - contract so you're gonna go to Beta Soul
17:29 - PG dot IO
17:32 - cool
17:35 - all right so we're here in the browser
17:38 - now we are on
17:41 - beta.solpg.io if you didn't know this is
17:43 - a browser where you guys can make and
17:45 - build and deploy your very own Solana
17:48 - smart contracts and if you watch any of
17:49 - my previous videos this might look a
17:52 - little bit familiar to you what's not
17:54 - familiar to you though is look at the
17:56 - code it looks slightly different from
17:58 - what you're used to right
18:00 - um if you didn't know anchor is built on
18:02 - Rust rust is another low-level
18:05 - programming language which is often hard
18:07 - for people to get started so that's why
18:10 - seahorse came about so if I look create
18:12 - here you're going to see three
18:13 - Frameworks which is native rust which is
18:17 - Anchor a framework of rust and then we
18:19 - got sea horse right here python right so
18:22 - for my python lovers or for my beginners
18:25 - this might be an easy way for you to get
18:28 - started uh making Salon of smart
18:30 - contracts right python is a lot easier
18:32 - to read than rust it's more beginner
18:35 - friendly
18:36 - uh one thing to note it's also still in
18:38 - early development stages so there are
18:41 - some limitations right you're going to
18:42 - see this later on with strings
18:44 - so you know enough of my Exposition if
18:47 - you already know this feel free to skip
18:48 - a little bit ahead but I'm going to get
18:50 - started talking about uh how this works
18:52 - so far if you've never seen this before
18:54 - so if you've never seen this before feel
18:56 - free to skip ahead and I'll get started
18:58 - but for now for you guys for you
19:00 - beginners out there this is new right so
19:03 - you're gonna notice the first thing
19:05 - right here this is the program ID think
19:07 - of this as the address of where your
19:10 - smart contract lives on the blockchain
19:12 - right
19:14 - I can even draw it for you right here so
19:16 - let's say uh this little square do you
19:18 - guys see that this red square this is
19:21 - the blockchain right and you can put
19:24 - stuff in the blockchain all right so
19:28 - let's draw another rectangle so let's
19:31 - say I make a smart contract which is
19:33 - this rectangle right
19:35 - this this triangle right here
19:38 - right can live on the blockchain it can
19:41 - go right here so let's let's illustrate
19:43 - that right so you want to bring that
19:44 - triangle and it can live right here when
19:47 - you deploy it like so
19:51 - all right you're going to see something
19:52 - called deploy well it says upgrade but
19:53 - after you deploy you'll live on a
19:56 - blockchain and then we can call upon it
19:58 - right so that's the basics of that
20:03 - the very next thing that you're gonna
20:05 - draw your eyes to is something called
20:06 - accounts what the hell is accounts Lane
20:08 - so let me let me get a bigger picture
20:09 - for you guys and again if you already
20:11 - know everything about this you should be
20:13 - fine so
20:15 - let's go and talk about account so like
20:16 - I said before
20:19 - rectangle is the blockchain you can also
20:22 - have a smart contract right and this can
20:25 - live on the blockchain as well right but
20:27 - then there's something called accounts
20:29 - right uh the closest thing for you guys
20:31 - from JavaScript or maybe even python is
20:34 - that you can think of accounts as
20:35 - objects right so notice this class User
20:38 - it's kind of like in JavaScript like
20:40 - what is a class object for create a
20:43 - template for creating objects right so
20:46 - what do you think a user class is like
20:47 - if I ask you guys what is a user right
20:51 - what are some properties of a user right
20:54 - it might be uh his username right and
20:58 - maybe his ID right or maybe how many
21:01 - posts post count right we could use any
21:04 - one of these right so let's see what we
21:06 - used to make that user object right it
21:09 - only has an owner
21:11 - and the last post ID okay so this one
21:15 - doesn't have a username
21:16 - all right so no username
21:18 - it has a
21:21 - a owner right which is essentially its
21:23 - ID right
21:25 - owner
21:26 - and what else
21:29 - last
21:30 - post ID
21:32 - is that correct yes okay
21:36 - so
21:37 - every user is going to have the owner
21:39 - right an ID registered with it and the
21:42 - ID of its last post right so if I were
21:45 - to make just create the users let's say
21:47 - uh every circle is a user
21:50 - so this is a user all right who's the
21:53 - owner it's me I'm lent and what was my
21:56 - last post idea if I just created this
21:58 - guys three two one you said zero nice
22:02 - job okay so if you said zero bam we're
22:04 - in there right so this is a user right
22:08 - technically this is a user account right
22:10 - that's what we can call it so when you
22:13 - when my smart contract right will have a
22:17 - function right here the squiggle is a
22:19 - function right this function creates
22:21 - user accounts right so let's run this
22:24 - function on the chain and when that
22:27 - happens right we will get
22:31 - a user account that lives on the
22:33 - blockchain right and how many user
22:35 - accounts can I create
22:37 - as much as you can right uh the
22:40 - blockchain is not infinite right but it
22:42 - has a lot of space but every time you
22:44 - take up space on the blockchain right
22:46 - let's say I need another user you have
22:48 - to pay for that space it's taking up
22:50 - right so this is why every time you put
22:54 - something on chain like when I deploy
22:55 - this comes my contract or when I add or
22:58 - create this user account it's gonna cost
23:01 - me some soul right it's gonna pay you
23:05 - gotta pay for the space that you're
23:06 - taking up and then let's say I want to
23:08 - delete a user right
23:10 - once that user is deleted right it's it
23:13 - can just even press delete it's gone
23:15 - I'll get my soul refunded to me because
23:18 - I'm not using that space it's kind of
23:19 - like rent right
23:21 - you pay for the rent the space that you
23:23 - take up so that's what that's the
23:24 - concept that I want you guys to
23:25 - understand okay so that was uh programs
23:29 - right that was uh
23:32 - what's called accounts
23:34 - right and by programs I also mean smart
23:36 - contract
23:38 - all right
23:39 - cool so our program is going to create
23:44 - accounts
23:45 - right so other accounts that we need we
23:47 - have users what are accounts do we need
23:49 - for Instagram
23:51 - all right so
23:53 - try to guess it three two one posts
23:56 - right that's the whole point of
23:57 - Instagram right let's make post so you
24:00 - know without looking at my contract what
24:02 - is a post right how would you describe a
24:06 - post
24:06 - are we the user what is a post
24:09 - well posts can have
24:11 - a what
24:14 - an ID yes I know how about what else
24:16 - guys a post can have a caption and I
24:19 - believe I called it title but it can
24:21 - have a caption
24:22 - right what else does it have
24:25 - an image right
24:28 - what kind of if you if your Instagram
24:30 - post doesn't have image it's basically a
24:32 - tweet yeah
24:34 - so uh let's see I do not want to drop an
24:37 - image let's see what's up so we have
24:39 - post we have owner right so we need to
24:42 - know who owns the post that's what we
24:43 - were missing
24:46 - we need who owns the post
24:49 - we need the ID the caption the image and
24:53 - there was one thing we missed
24:55 - it was the likes right so there we go so
24:58 - there's also likes
25:01 - okay
25:04 - so this is an overview of what we're
25:07 - doing in the Solana project uh if you
25:09 - already understood it feel free to skip
25:10 - ahead and just watch the build but
25:12 - hopefully this helps you understand a
25:14 - couple Concepts and I'll be explaining
25:15 - them again as we go but remember our
25:18 - smart contract needs to be able to
25:19 - create a post right that will live in
25:23 - here this is a post account
25:25 - cool
25:26 - so again just to prove it to you this is
25:30 - a smart contract that I use here are our
25:32 - instructions our functions
25:34 - if I do a fetch all which is super cool
25:36 - with Sonic playground by the way I do
25:38 - fetch all
25:39 - this is an array of objects and every
25:42 - object is that Circle that I drew that
25:45 - user account right so this is the owner
25:47 - his last post ID was zero so how many
25:49 - posts do you have zero how about this
25:51 - guy last post I do one he has one post
25:54 - right so that's users and then if I look
25:56 - at posts
25:58 - in fact y'all you can see all the posts
26:01 - so I have one two three posts right you
26:04 - can see the title is the caption the
26:06 - image stores a link and then the cool
26:09 - part is in our vs code in our project we
26:10 - just have to fetch these two right so
26:13 - think of it like a database right
26:15 - there's way a lot more uses for the
26:17 - Solano blockchain but one easy way for
26:19 - new beginners to get started is think of
26:21 - it as a decentralized database all right
26:25 - so that's my little Spiel on uh Solana
26:28 - and this time we're going to be writing
26:29 - it in Python so let's get started
26:31 - alright so let's get started with
26:33 - building this smart contract from
26:35 - scratch so if you never use a Solano
26:37 - playground before go ahead and come to
26:40 - this tab right here you're gonna click
26:42 - this plus icon because you're gonna make
26:44 - your own project so let's give this
26:46 - project a new name let's call it uh IG
26:50 - Dash seahorse right and then you're
26:53 - gonna click sea horse with python in
26:55 - parentheses of course so click that hit
26:57 - create and Bam right Salon playground
27:00 - gives you a brand new project to get
27:03 - started
27:05 - and before we move on notice that it
27:07 - says Fizz Buzz right this is how to make
27:09 - an on-chain persistent Fizz buzz but
27:12 - what we're going to do is we're going to
27:13 - build on top of it right so let's take a
27:16 - look at this first you can see that this
27:19 - is how they're importing sea horse dot
27:22 - Prelude import Star which basically just
27:24 - means uh import everything from
27:27 - sea horse dot Prelude all right from
27:30 - there we're going to move over to line
27:31 - 10. if you see this the clarity this is
27:34 - your program's public key you can think
27:36 - of it as the address or the ID of your
27:40 - whole program and with Solana smart
27:42 - contract also means program so you with
27:44 - me cool
27:45 - and then we have to Define our accounts
27:49 - so here it's defining what fizzbuzz is
27:52 - right but what do we want to create we
27:54 - want to create and I'll make this in
27:55 - comments we want uh user account oh wait
27:59 - I think it's actually hashtags now right
28:01 - we want user accounts user account we
28:05 - want a
28:07 - post account
28:08 - and what else do we need for his
28:10 - Instagram guys we need a likes account
28:13 - all right likes account or just like
28:17 - right so we have to Define which each of
28:19 - these are so we can use this as a
28:21 - template so that's why it's nice that
28:23 - they gave this to us so when making an
28:25 - account
28:26 - right you can say class
28:28 - and then the name of the account so
28:30 - which one is this it's user all right
28:32 - we're with you with me cool another
28:34 - thing that you have to do is put
28:35 - parentheses that it is an account all
28:38 - right so from there we can do a colon
28:40 - and here this is where you put the
28:43 - property so remember earlier if you
28:45 - watch that part the zeit board where I'm
28:47 - drawing what the properties of a user
28:48 - are what are the properties of a user
28:50 - and we said we want something called
28:52 - owner and
28:54 - what you saw here where did we see the
28:57 - word bull what does bull mean it means
28:59 - true or false right so this colon
29:03 - after this colon gets to tell our
29:05 - program what type it expects right this
29:08 - is kind of standard with rust and with
29:11 - Solana so uh owner
29:13 - is going to be a public key so you would
29:17 - write Pub Key like so okay
29:20 - so that means when I get the owner
29:22 - property I'm going to expect a public
29:24 - key and a public key is a set of letters
29:27 - and numbers very similar to this because
29:28 - this is our programs publicly so there's
29:31 - a lot of if you're new just try to like
29:33 - get unfamiliar with the terms and how
29:35 - we're using it and then you can dive
29:37 - deep into all what it all means so what
29:40 - else so what else we need is last post
29:44 - ID right because we want to keep track
29:46 - of how many posts does that user have
29:49 - when I was fetching the post earlier or
29:51 - the user account you saw that some posts
29:53 - had zero and some IDs had one because at
29:56 - one post so
29:58 - um what is the type right usually you'd
29:59 - probably think number right but for this
30:02 - you're actually going to say U 64 right
30:05 - which means unsigned integer and 64
30:09 - bytes right so don't worry about that
30:11 - but just know that this is a number and
30:13 - this is how big the number it gets all
30:15 - right we can expect that that's a simple
30:18 - way of looking at it and that's it
30:19 - that's the user account all right so
30:21 - let's try to make
30:23 - a an account for
30:25 - post all right so pause the video Try it
30:28 - yourself if you think you can do it if
30:30 - you're not too sure you need a little
30:31 - bit more help do it along with me so
30:33 - again you say class and then the name of
30:36 - the account that you want and then
30:37 - Define that it is an account followed by
30:40 - this colon right here from there now we
30:43 - can write the properties right what are
30:44 - some properties of the post
30:46 - three two one you said owner okay yeah
30:50 - you definitely said owner right you
30:51 - didn't say anything else right because
30:52 - you are a genius so uh what type does
30:56 - the owner expect I would say Pub key
30:58 - right so from there what else it's gonna
31:01 - take
31:02 - an ID all right it's gonna take an ID
31:04 - which can also say is u64. right from
31:08 - there we can say likes right every post
31:10 - has likes and that can also be used 64.
31:14 - okay
31:16 - cool
31:17 - and then from there uh let's see what
31:19 - else there is the image of course and
31:22 - the image is very unique because with an
31:25 - image I don't expect a number I don't
31:27 - expect a public key what do you usually
31:30 - use uh when it's image yes a URL you got
31:34 - it but
31:35 - uh more specifically it's a string right
31:38 - so from there we can say image and title
31:41 - uh we could write caption right or we
31:44 - keep a title right you can name us
31:46 - whatever you want but I'll write title
31:47 - because that's how it's set up in the
31:48 - starter files so I'll say title
31:51 - and write Str for string okay so that's
31:55 - our post account
31:56 - now
31:58 - we need a liked account right so for the
32:00 - like account again pause the video or
32:02 - skip ahead if you know how to do this
32:03 - try to do it without me now ready let's
32:06 - go let's erase so you write class like I
32:10 - say account
32:12 - say account colon and then properties of
32:16 - a like which is just going to be the
32:18 - post owner
32:19 - which is going to be Pub Key
32:22 - all right post underscore ID right
32:25 - what's the uh the post ID of the one
32:28 - you're liking right
32:31 - so notice how this like account isn't
32:33 - directly tied to this post it is ref
32:35 - it's going to reference it so from there
32:37 - we can say the Liker
32:39 - is Pub Key
32:41 - cool
32:43 - and with that we got all the accounts up
32:46 - and ready to go so what we can do is we
32:47 - can erase fizzbuzz now
32:51 - all right so the next thing that we need
32:53 - to do is make our instructions so if you
32:56 - don't know what instruction is think
32:58 - about the concept of a function in
33:00 - JavaScript right if I had a function
33:02 - called init for Fizz buzz what do you
33:05 - think it does right it initializes the
33:08 - fizzbuzz program right so fizzbuzz.net
33:12 - even if you don't know exactly what that
33:13 - means it makes sense right it's
33:15 - initializing fizzbuzz right how about
33:17 - something easier right let's say we had
33:18 - a function named do fizzbuzz right what
33:21 - do you think that function does it's
33:22 - literally in the name it's gonna do Fizz
33:25 - but it runs the Fizz Buzz logic as you
33:27 - can see here so we need we need to start
33:30 - thinking about as developers right is
33:32 - what instructions do I need what
33:35 - instructions do I need for my app
33:42 - all right so that's why I opened up
33:44 - localhost in between there as you can
33:46 - see let's think about it right what are
33:48 - the features here right I should be able
33:50 - to create a post right this is how we're
33:53 - creating a post I should be able to
33:55 - click this and edit a post I should be
33:57 - able to like a post on like a post I
34:00 - should be able to click this and delete
34:01 - a post there's a bunch of different
34:03 - features and notice how all of those
34:05 - functionality lives on this Solana
34:08 - program instead of our front end like
34:11 - you usually do when you're making a
34:13 - stack a full stack app right this is so
34:15 - that we can practice getting used to the
34:18 - salon system because the way we're using
34:20 - it it's like a crud app this is a
34:21 - decentralized database right
34:24 - but there's more than uh than just that
34:27 - that you could do with Solana so let's
34:29 - go ahead and think about what
34:30 - instructions we need there's one thing I
34:32 - know is that we need to create a user
34:36 - right a user similar to the owner in
34:38 - this case right we need to Define who
34:39 - the owner is and store that information
34:42 - otherwise if you know ch3k made this
34:46 - post right I'm logged in should I be
34:49 - able to add to rafikaze's post should I
34:52 - be able to delete his own post no I
34:54 - shouldn't have permission to that so
34:55 - that's why we need to create a user
34:58 - right we also
35:01 - need to create a post right
35:05 - we also need to do what guys
35:08 - I want to be able to edit
35:10 - a post right edit post
35:13 - okay sure
35:15 - can we
35:16 - delete all right we should be able to
35:19 - delete post
35:21 - okay
35:22 - so edit it's like update if you think of
35:24 - crud it's update and lastly this is a
35:28 - feature it could be like post all right
35:31 - so we're going to use the accounts we
35:33 - set up and integrate them with our
35:35 - instructions to do what we need them to
35:37 - do okay
35:39 - cool so let's get started with the first
35:42 - instruction
35:43 - so with the first instruction how do we
35:45 - start writing it well the first thing
35:46 - that you're going to need to do is
35:48 - literally write at instruction right
35:51 - that's how you define this is a function
35:52 - or this is my instruction I mean
35:55 - cool underneath then we can say def
35:57 - um the function name right so what's the
36:00 - function's name in this case we want to
36:02 - create
36:04 - a user right so just like any function
36:08 - we have to put parentheses here the
36:09 - difference is instead of doing something
36:11 - like
36:12 - um this right like in JavaScript
36:15 - we will
36:17 - end it off with a column like so
36:20 - okay one thing to note is that
36:23 - a wallet
36:25 - can only initialize
36:28 - One account right so this wallet ch3k
36:32 - can't make 10 accounts right one wallet
36:35 - One account
36:37 - okay
36:38 - so
36:40 - after this colon we can now write the
36:43 - logic of the function right so one of
36:46 - the first things that you want to do is
36:48 - write the logic so here we can say user
36:51 - underscore account
36:53 - all right so this is just oh I think
36:55 - this is like a variable that I'm making
36:56 - or this doesn't exist anywhere else as
36:58 - you can see
36:59 - cool
37:01 - and uh before we even do that let's make
37:02 - our parameters all right what compound
37:04 - parameters will this take in it's going
37:06 - to take in a user colon and then we're
37:09 - going to give it a empty
37:11 - user property right and the owner is
37:15 - just going to be this signer
37:19 - okay so notice how we're still defining
37:21 - the type let's just type empty and it's
37:23 - taking in user and user is this guy
37:26 - right we're taking an empty user account
37:31 - right and we're going to take the
37:33 - owner's signature and fill that in
37:36 - so how can we do that well if this is a
37:38 - variable and this is a variable how can
37:40 - we use that so user account is equal to
37:42 - user
37:44 - dot init right I don't expect it to know
37:46 - that but this is an initialized function
37:48 - you saw it here with fizzbuzz Dot in it
37:51 - and what we want to initialize is the
37:53 - payer who is the owner and where are we
37:56 - getting owner from
37:57 - here
37:59 - so we need to Define okay so if we want
38:01 - to initialize account right we want to
38:03 - take up space on the blockchain we need
38:05 - to pay like I mentioned before and we
38:08 - have to say who's paying well who's ever
38:10 - owns
38:12 - the wallet will pay for it that's what
38:15 - I'm saying here that's what they're also
38:16 - doing here all right the next thing that
38:18 - you're going to notice is we need to
38:21 - um Define what the seeds are right
38:24 - the seeds helps us get that user address
38:28 - so let's just quickly go back to the
38:30 - diagram and you know seeds are a lot
38:33 - more complicated especially and
38:34 - intimidating especially for just
38:36 - starting out but let's go back to our
38:38 - blockchain example so this square is our
38:40 - blockchain uh this red rectangle is our
38:44 - smart contract right and this blue
38:47 - circle is our user account right cool
38:50 - does that make sense to everybody so
38:52 - let's say I want to create a new user
38:54 - account right using a function
38:59 - on my Smart contract so what we're going
39:00 - to do is this is the let's say this is
39:03 - the front end
39:05 - my front end
39:07 - oops
39:08 - my front end
39:10 - is going to call the blockchain with the
39:13 - endpoint
39:14 - RPC endpoint
39:16 - and it's going to get the program and
39:18 - it's going to run this function right
39:20 - here and that function is going to
39:22 - create a user account and that user
39:24 - account is also going to have its own
39:26 - unique public key right which is just a
39:29 - set of numbers and letters kind of like
39:32 - this ch3k right so let's say ch3k is the
39:35 - [Applause]
39:37 - or just just c a d f s whatever calfs
39:41 - all right this is the public key
39:43 - to get the public key it's address we
39:47 - need to get seats right we need to tell
39:50 - what the seeds are because no matter
39:51 - what you put as the seeds it will always
39:53 - equate to an address so let's say my
39:55 - seeds are Lance and and one right those
40:00 - two this is seed one C2 it will generate
40:02 - will always generate this public key
40:06 - right cool if this not make sense to you
40:09 - it's similar to if you guys ever used
40:10 - dice bear before
40:13 - right this is similar not the same thing
40:15 - right this will generate a profile
40:17 - picture
40:19 - based on what you type here so if I say
40:21 - Lance
40:22 - this is my avatar that I get I get Lance
40:25 - right if I said Lance is the first part
40:27 - of the seed then I said Lance one two
40:29 - three oh
40:31 - Lance
40:32 - one two three this is the Avatar Jets
40:35 - and notice how it's not random I can
40:36 - type Lance one two three I'll still get
40:38 - that I can do one two four
40:40 - one two five one two six one two seven
40:42 - right
40:43 - there's always a predetermined public
40:45 - key based on the seeds that's the
40:48 - concept so the seeds are going to be
40:51 - variables right it's always going to be
40:52 - a string user
40:55 - right and uh whatever the owner is which
41:00 - is going to be a public key so we can
41:01 - write owner okay so this is the
41:03 - equivalent of saying user
41:06 - all right it's describing saying user
41:10 - um ch3k
41:14 - right that's the public key
41:16 - of the new
41:19 - user that we create right this seed will
41:23 - generate a new public key for the user
41:25 - account
41:26 - does that make sense cool and from there
41:30 - we can now
41:32 - uh access these properties and fill them
41:35 - in right because they're just defining
41:36 - them here we can Define who the owner is
41:38 - and Define what the last post ID is so
41:41 - if I do uh user account right this is
41:44 - variable it's initialized with this user
41:46 - account
41:47 - dot owner you can say it's equal to
41:50 - owner dot key right which will take this
41:54 - and put it in a format that'll
41:56 - understand into a public key
41:58 - this part should be pretty easy for you
41:59 - guys right
42:02 - um you could also say something like
42:04 - this print
42:05 - right owner dot key
42:09 - and say created oops created user
42:13 - account
42:15 - comma user oops user account dot key
42:20 - boom okay
42:23 - and guess what that's it what do you
42:25 - think this line is doing it's like
42:26 - console lock but for python it's just
42:28 - gonna print out the owner public key a
42:31 - little nice message that we created a
42:33 - user account and then the user accounts
42:35 - key right which should be the same as
42:39 - the owner
42:40 - okay because we defined it right here
42:42 - cool
42:44 - and that's it for create user
42:46 - all right so what we want to do next is
42:49 - erase anything we don't need because you
42:51 - guys know the basics now so let's get
42:53 - rid of the instructions as well right
42:56 - and what we could do is also hit build
43:00 - when we hit build you'll see any errors
43:02 - come up I'm sure there is some oh okay
43:04 - cool here's the first one Pub Key and
43:06 - not found that's because in line 29 I
43:09 - put a capital K it's not camel case in
43:12 - this case camel case in this case but
43:14 - it's just gonna be Pub Key so go ahead
43:16 - and hit build again it should be build
43:18 - successful
43:20 - cool and another thing is this wallet
43:23 - that you connected with right this is
43:25 - the playground wallet that comes with
43:27 - and this tells you how much Soul you
43:29 - have so you need to deploy the smart
43:31 - contract onto the plug the blockchain so
43:34 - uh basically this is the blockchain
43:38 - again
43:39 - all right so let's write
43:41 - Block Chain right and we want to deploy
43:46 - our smart contract
43:49 - s are
43:50 - program right to the blockchain so when
43:53 - we do this
43:56 - it's going to take some soul so that's
43:58 - what we want to do deploy that program
44:00 - onto here right we can do that from
44:03 - Solano playground which is sick so to do
44:05 - that you might need some soul guys to
44:07 - get you can say uh air drop or Solana
44:10 - air drop 2 in the command line hit enter
44:16 - and requesting airdrop boom so now I
44:18 - have it from four to six right so make
44:21 - sure you do that if you need some Solana
44:23 - but since this is not a lot just yet we
44:25 - can go ahead and click deploy so I'm
44:28 - clicking deploy
44:29 - so take a couple seconds or minutes
44:31 - depending on the size of your program
44:33 - but uh this shouldn't take me much
44:36 - longer
44:38 - all right so the deployment is
44:40 - successful and the only thing we need to
44:42 - do now which is cool if you go to this
44:45 - test tube thing
44:46 - Solana PG lets you test all the
44:48 - functions you've made so this is the one
44:49 - we just made create a user and it's
44:52 - going to create user accounts we can
44:53 - fetch any of them and you see there's no
44:55 - users but let's make a user so this will
44:58 - help you understand how Solano works so
45:00 - play close attention on this one all
45:02 - right so for the users right for the
45:05 - owner is probably the easiest place to
45:07 - start we know to create a user account
45:10 - we need to put in who the payer is which
45:13 - is going to be the owner and the seeds
45:16 - right so the owner
45:18 - is this part right here so who should be
45:20 - the owner me right who's ever signed the
45:24 - signing the transaction and we know that
45:27 - me is this address right here so copy
45:30 - that address and put it here for own for
45:32 - user this is going to generate the
45:35 - public key for your user account like
45:37 - where are we going to put this user
45:40 - right
45:41 - so where are we going to put it you need
45:43 - to pass in some seeds so the first seed
45:46 - is what user
45:47 - I remember dice bear we had the right
45:49 - user
45:50 - all right so let's write user
45:52 - and let's make sure it's a string and
45:54 - add another seat and what's the type of
45:56 - the second what's the type of owner here
45:58 - public key exactly so that means we need
46:00 - to grab our wallet address again so we
46:02 - can click this wallet tab right here and
46:04 - click copy to get the address and then
46:07 - go to seed to paste your public key
46:11 - hit generate and this 4sq is the public
46:15 - key of our user account generated from
46:19 - the C right and if all of that is
46:21 - correct this test should pass so let's
46:23 - go ahead and hit test
46:26 - a create a user pass so that means a
46:28 - function that we wrote together this one
46:30 - right here was able to create a user
46:33 - let's see if we're right fetchall
46:35 - bam right let's go you did it guys you
46:38 - made your first instruction using python
46:41 - right and hopefully all of this makes
46:43 - sense so far right you're literally
46:45 - writing python code on the salon of
46:47 - blockchain and this is brand new
46:48 - technology at this moment of recording
46:50 - this video so I hope you guys are
46:53 - excited as I am because there's a couple
46:55 - more functions we need to do
46:56 - but that's it we have our first user
46:59 - right here and just like I said the
47:01 - public key of this user account is 4S
47:05 - right and in the account itself we have
47:07 - the owner and the last post ID amazing
47:13 - all right let's do the next one so now
47:15 - that you guys made your first
47:16 - instruction I'm going to go a little bit
47:18 - faster and do the tests all in one go
47:20 - alright so if you need to pause the
47:22 - video at any point or go back feel free
47:24 - to do so but now we're gonna get moving
47:26 - so let's create a post how do we create
47:29 - a new instruction you just write at
47:32 - instruction okay how do we Define the
47:35 - instruction we say def for Define and
47:38 - create
47:40 - post all right cool parentheses here to
47:43 - set up the parameters and then the colon
47:45 - is going to Mark uh the next part of the
47:48 - function or the logic of the function
47:49 - but within the parameters what do you
47:51 - think we need to create a post well I
47:54 - know I need a post
47:55 - I need a user I need
48:00 - um the owner that would be nice I need
48:02 - the title the image and the post ID
48:07 - right here so uh the thing that we're
48:10 - missing with this is
48:12 - the types right we need to put the types
48:14 - of all of these things so post it should
48:16 - be an empty post right because when we
48:19 - create a post this post account
48:22 - that we wrote up here should be empty
48:24 - and I'm sorry guys let me put this down
48:25 - for you how's that can you see it
48:29 - so you can see it now a little more
48:30 - clear we want to create post we're
48:32 - getting the empty post account as the
48:35 - type for the user are we when we're
48:38 - creating posts is there going to be an
48:39 - empty user no we have a user now right
48:41 - that user that we pass in is the one
48:44 - creating the post the owner of it is
48:46 - going to be the signer
48:48 - the title uh this is going to be a
48:51 - string
48:52 - that we discussed before and the image
48:54 - is a string and the post ID is usually
48:56 - going to be a number
48:58 - okay cool now
49:01 - time for the logic
49:03 - okay so for the logic of this function
49:05 - we're just going to write assert here
49:07 - right because what we want to do is do a
49:10 - couple checks right we want to check
49:11 - that the user the owner right we can
49:14 - access from here a user account if we do
49:17 - dot owner we're going to get a public
49:20 - key right I know that because of the way
49:22 - we built this if it's equal to the owner
49:26 - Dot
49:28 - key
49:30 - all right
49:32 - if it doesn't uh this isn't true then
49:34 - it's probably the wrong
49:36 - owner right
49:38 - cool another thing you want to check is
49:40 - if the post Hoops assert if post
49:43 - underscore ID is equal to the user dot
49:48 - last underscore post underscore ID plus
49:51 - one
49:52 - comma if it doesn't equal the next post
49:56 - that it should
49:57 - right if it's still post zero and not
50:00 - updating to one then this is probably
50:02 - the incorrect post ID that we're
50:05 - pressing
50:06 - yeah cool so after those checks let's
50:10 - get started right so we have a bunch of
50:11 - variables or parameters to play with
50:14 - um let's go ahead and make this post
50:16 - account not empty so how do we make it
50:19 - not empty I say a variable right here
50:21 - post account
50:24 - and we can say post right how do we make
50:27 - uh how do we initialize the user account
50:29 - guys we said user dot init we can say
50:33 - post dot init as well and we need to
50:37 - Define who's paying for this space the
50:39 - owner is okay how about the C's though
50:43 - okay so for the seeds uh there's some
50:46 - limitations since seahorse is still new
50:49 - so we're going to do is get the string
50:51 - post uh say the owner right just like
50:55 - before and we're also gonna need the
50:58 - post
51:00 - ID right whatever the post ID because if
51:03 - the post ID is zero it'll generate
51:05 - something else so this is like us
51:06 - writing
51:08 - um post uh one two three is already I
51:11 - public key and then I'm gonna give the
51:13 - post ID which is zero all right if the
51:15 - post ID is one it's a completely
51:17 - different number here you see this four
51:19 - five six right so this is why our seeds
51:22 - are going to generate a unique public
51:24 - key
51:26 - right so we'll put post ID
51:29 - um the limitation is it'd be nice to use
51:32 - user.key but at the moment we're unable
51:35 - to do that so I can't use that so from
51:37 - here we need space right so we also need
51:41 - to it'd be nice to write how much space
51:45 - does this post account take up right so
51:48 - basically if I'm going to make a post
51:51 - right the Solana blockchain wants to
51:54 - know how much space will it'll take up
51:57 - and by space it means the size of the
52:00 - post which is gonna
52:02 - factor in the properties right so if I
52:06 - go back to this is going to take into
52:09 - account the space of the signer the
52:11 - space of the title the image the post ID
52:13 - right and that's what all these numbers
52:15 - uh that we're going to put in so usually
52:18 - we put an 8 here this is called the
52:20 - account discriminator I don't need to
52:22 - worry about that too much but just know
52:24 - that's going to be the size of
52:25 - everything plus eight so I'm just going
52:28 - to put in the numbers and you can copy
52:30 - it as well we could do plus 32 plus 8
52:33 - plus 4 plus 128
52:38 - plus four
52:41 - plus two fifty-six awesome
52:46 - so the total should add up to 440 and
52:48 - that's how much space this all takes up
52:50 - if you wanna if you're curious how much
52:52 - space each of these things there's some
52:54 - documentation on anchor that will tell
52:56 - you and that's where you can get these
52:57 - numbers
52:58 - cool so this is how much space it can
53:00 - take up to this post account
53:03 - and from here we can write
53:06 - the properties so one thing that we're
53:08 - going to need is the user we need to
53:10 - update the user account from zero to one
53:14 - so we have access
53:16 - keyword access to user from this
53:18 - parameter so we can say user dot last
53:21 - post underscore ID plus equals one this
53:25 - is just basic programming right here
53:27 - cool
53:28 - next thing Lance we got the post stuff
53:31 - so let's fill in those properties of the
53:33 - post so the owner is going to be what
53:36 - owner dot key so you're getting a nice
53:39 - format it's also going to have post
53:44 - count
53:47 - that title is equal to what guys
53:51 - the title that we pass in title and
53:54 - remember title is also caption I'm just
53:56 - using title because that's how we're
53:57 - pulling it on the starter code so from
54:00 - there
54:01 - we also need the image URL right which
54:05 - we can use image
54:07 - and we can also do Post account the ID
54:11 - is equal to the user dot last
54:15 - post
54:16 - underscore ID so notice how this
54:20 - will be different because it adds one to
54:23 - the previous so this if the last post ID
54:25 - was Zero now it's one now that's the
54:28 - post accounts ID
54:31 - make sense
54:32 - cool and after that uh we can do a nice
54:35 - print message
54:36 - which is print
54:39 - f
54:41 - post ID and we're going to do some
54:44 - templates here so we say post ID
54:48 - uh comma title colon and then we can put
54:52 - post Dot or post underscore
54:55 - account.title
54:56 - for the title
54:58 - the image can be this post underscore
55:02 - account Dot
55:04 - check it put uh the quote here
55:11 - okay I think I got it
55:13 - yep and with that that's our instruction
55:15 - so let's go ahead and build and see if I
55:18 - have any errors if I type something
55:20 - wrong
55:21 - so a tip build yes there is an error
55:24 - python parse error
55:27 - so it's confused about this assert
55:31 - equals right here
55:33 - so let's see oh it's not uh one equals
55:37 - it should be two equals so you should
55:39 - see this color let's try that again
55:41 - build
55:44 - so now it's issued with the space I'm
55:46 - guessing it's some sort of comma yep
55:49 - so 961 for me make sure you put a comma
55:52 - that's it build again
55:56 - build successful so I completed all the
55:58 - errors make sure you don't have any
55:59 - errors and type in and make sure it says
56:02 - build successful right here
56:04 - and the cool part about Solana smart
56:07 - contracts is that you can upgrade it I
56:09 - don't know if it's changed with solidity
56:10 - but once you deploy a smart contract you
56:13 - can't update it you can only create
56:16 - read and you can't even delete right you
56:19 - can't delete any programs that you
56:21 - upload but you can update though so you
56:24 - can press this upgrade button
56:29 - and it will redeploy it with the new
56:33 - instruction that we just created so now
56:36 - if this is successful we should be able
56:38 - to create posts so I'll check back in
56:40 - with you guys when it's done upgrading
56:42 - all right so the deployment is
56:44 - successful click on the test tube again
56:46 - and let's see if we can create a post so
56:50 - I'm gonna go ahead and go to unsplash
56:52 - we're not going to be able to see this
56:54 - post actually no we will and let's just
56:56 - get a nice photo from here so let's do
57:05 - let's do this one
57:07 - let's click this one copy image address
57:10 - and let's go in here so the title and
57:12 - remember this is caption is uh new me
57:16 - who this right
57:18 - so let's do the image let's paste that
57:20 - image URL the post ID right it should be
57:25 - the
57:27 - yeah the current post ID I passed in and
57:30 - post ID is user last post ID
57:32 - [Music]
57:34 - which is going to be zero for now
57:37 - okay so now for the accounts right for
57:39 - the user account we do have a user
57:41 - account already and we can fetch it
57:44 - right here so this 4S right here double
57:46 - click it to highlight it and hit copy
57:49 - and then we could paste it for the user
57:51 - for the owner this is my wallet so let's
57:54 - do my address and for the post this is
57:56 - the one we generate from the seeds so
57:59 - it's just gonna be uh the string post
58:03 - and then the
58:05 - owner or a public key and then it's
58:09 - going to be your address so we can copy
58:10 - that
58:12 - all right mine63 yours might be
58:14 - something else and there's one more it's
58:16 - going to take a u64 number right because
58:19 - that's what post ID is and I said it was
58:21 - Zero
58:22 - so let's go ahead and generate that so
58:25 - let's hit generate
58:26 - and there you go f p w is my post
58:30 - accounts public key if this works let's
58:32 - see if it does work let's hit test
58:34 - creating post
58:38 - failed to get recent block hash so just
58:41 - failed to fetch so
58:43 - oh see we're getting a connection error
58:45 - so let's this happens to you make sure
58:48 - you try testing out by doing another
58:50 - endpoint in the devnet so we have this
58:52 - genus Cisco
58:54 - right so now we can see there's no
58:56 - fetching errors of our transactions
58:57 - let's hit test again oh
59:00 - with unauthorized signer or writable
59:03 - account
59:05 - okay
59:07 - uh
59:10 - saying we don't have permission
59:12 - all right so here's what we'll do
59:13 - instead we're going to build again
59:15 - using the other RPC endpoint because
59:18 - that one is getting some issues and I'm
59:20 - just going to upgrade again real quick
59:22 - and then we'll just try the test again
59:24 - just to make sure uh it's not the RPC
59:27 - endpoint that's giving us issues that it
59:29 - might just be my code so let's go ahead
59:30 - redeploy and we'll test it again
59:32 - all right so let's try this again
59:35 - let's go ahead and create a post I said
59:38 - it was new me who this right
59:41 - uh image was this nice picture right
59:44 - here pretty cool
59:46 - paste post ID 0 post it's from seed
59:50 - which is post
59:51 - add seed Pub Key which is the owner
59:54 - which is me
59:56 - plus uh q64 which is post ID which we're
60:01 - passing in and it should be the same
60:02 - which is zero so let's go ahead and hit
60:04 - generate
60:06 - and now the user is the user that we
60:09 - fetch from here
60:13 - let's go ahead and do that
60:17 - paste it 4S owner is me and now let's
60:21 - hit test
60:22 - program failed to compile so that's a
60:25 - different issue than we were getting
60:27 - before
60:28 - all right so after some troubleshooting
60:30 - I realized that we forgot one more piece
60:33 - I forgot so we need to establish a post
60:37 - event right so there is accounts there
60:43 - is posts
60:44 - there is instructions and there's also
60:47 - events right so let's go back to
60:51 - right here and we can say something like
60:55 - uh events right
60:58 - cool so events are essentially the event
61:02 - of a new post happening right so to
61:05 - Define an event and again because this
61:08 - is new right I want to put a note here
61:10 - so that we can't we're not able to pass
61:13 - string values
61:16 - in events just yet right because in this
61:20 - current model of seahorse that I'm
61:21 - recording uh that's still being worked
61:23 - on but for now let's go ahead and say
61:26 - class new post event is an event
61:30 - or that's the type
61:32 - and then the owner is Pub
61:37 - key
61:38 - and the ID
61:40 - is u64.
61:43 - okay
61:45 - and uh
61:47 - when we do this we can say
61:49 - it's going to run an instruction
61:51 - called init
61:54 - net
61:55 - and it's going to recall itself the
61:58 - owner which will have a Pub Key
62:01 - and an ID of 64.
62:04 - okay oh it's not just 64. u64 that looks
62:07 - more right
62:08 - cool and then say self dot owner is
62:11 - equal to the owner and self the ID is
62:15 - equal to ID and that's the only thing we
62:16 - can do for that for now and and this
62:20 - should help with our error
62:23 - so it should trigger so I built that no
62:26 - issues with the event itself now let's
62:28 - call that event within this post right
62:31 - here right so underneath this print
62:35 - we need to
62:37 - emit that event new post event so how do
62:40 - we do that in the function well we're
62:42 - going to say uh new post event
62:46 - is equal to new post event
62:50 - right which is going to have all the
62:52 - parameters the post account
62:54 - dot owner
62:56 - and comma the post
62:59 - account
63:02 - dot ID actually cool and then we can
63:05 - just say new post event uh dot emit to
63:10 - emit that new post event so again
63:12 - creating the instance with these
63:14 - parameters and it's going to run this
63:16 - event which is going to run in it
63:19 - we after defining it here we're going to
63:21 - emit it so if I build there shouldn't be
63:24 - any errors
63:28 - cool unnecessary trailing semicolon
63:34 - uh
63:36 - okay so that is a warning
63:42 - so warning if you see anything that's a
63:43 - warning it's not going to break your
63:44 - code it's just letting you know that
63:46 - it's kind of redundant uh okay but you
63:48 - don't have to worry about it
63:49 - so let's go ahead and upgrade now
63:55 - and while it's upgrading
63:57 - let's see if we can create a post
63:59 - cool so deployment's successful
64:02 - um
64:02 - just to be safe we'll check this
64:04 - function and the other ones later with
64:06 - the front end just so we can know
64:07 - exactly what's going on but for now if
64:10 - your code looks like this create post
64:14 - and something like this and it amidst
64:16 - the post event you should be good to go
64:19 - okay so from there let's work on edit
64:22 - post alright so this is edit post or in
64:25 - better words update right it's part of
64:28 - our crud it's update post and from here
64:31 - we can say the instruction so how do we
64:34 - make an instruction instruction
64:37 - then we can say def update post uh and
64:41 - then the parameters and then colon so
64:43 - that's how you set up the function what
64:45 - kind of parameters does it take it takes
64:46 - to post it takes an owner uh it takes a
64:50 - title
64:51 - title
64:53 - now let's define all the types so post
64:56 - is a post account right because when you
64:59 - update a post you're updating the
65:02 - information inside a post account the
65:04 - owner is going to be the signer which we
65:07 - know and the title is going to be Str
65:10 - because the title is the caption that
65:13 - you're updating so when you update a
65:14 - post what are we really doing we're
65:16 - updating the caption
65:17 - or in this case the title
65:19 - so again there's some checks here we
65:22 - could do if the post owner uh equals
65:25 - oops equal equals the owner.key
65:30 - all right if that is not true then it's
65:32 - probably the incorrect owner
65:35 - right
65:36 - and then
65:38 - if it is
65:39 - uh we're gonna put the old title
65:43 - old title
65:44 - is
65:46 - this post that title
65:48 - and that the new title new title
65:52 - is
65:53 - comma this the title that we pass in so
65:57 - we can take our parameters and use them
65:58 - for a function and when we update a post
66:01 - so let me take out the Pringles here and
66:03 - print
66:04 - and we can change the old title post by
66:07 - grabbing this parameter
66:09 - and say post dot title is equal to title
66:15 - and again just like before we need to
66:18 - emit update post event okay so how do we
66:23 - do that let's create a post event for
66:26 - updating
66:28 - so once this is done you can go back to
66:31 - here and say a new class
66:33 - update post event
66:36 - and say event
66:38 - colon and then say owner oops owner
66:42 - Pub Key
66:43 - you can say ID and say u64.
66:48 - nope and we also need this init function
66:51 - again which is underscore underscore net
66:53 - underscore underscore and we need the
66:55 - self the owner which is a Pub Key
67:02 - and the ID which is a u64 so it's pretty
67:07 - much the same thing uh and you're really
67:10 - going to write the same thing actually
67:11 - self.owner is equal to owner and self.id
67:16 - is equal to ID right so you could
67:18 - literally copy and paste the same thing
67:20 - for the init function and uh you should
67:22 - be good to go
67:24 - so for the update post
67:26 - it's pretty much the same thing let's
67:28 - just call it
67:30 - so now we want to emit the update post
67:32 - so to do that we're just going to write
67:35 - under here oops
67:37 - we're just going to write update post
67:40 - event is equal to update post event
67:45 - and put the post out owner and the
67:48 - post.id
67:50 - and then now that we put that
67:52 - information in the variable let's just
67:54 - submit it so let's emit it by saying
67:56 - update post event dot emit bam okay cool
68:01 - all right now we're running the post and
68:04 - let's go ahead and build check for any
68:05 - spelling errors
68:07 - or anything weird that I wrote
68:11 - yep we still get the unnecessarily
68:13 - trailing semicolon which is fine which I
68:15 - don't know
68:16 - where that is
68:20 - but once I do I'll let you guys know and
68:23 - erase it but for now there's no big
68:24 - warnings so we're good to go so that is
68:27 - update post so we have two more delete
68:29 - post and a like post
68:32 - all right so what we want to work on
68:33 - next is deleting a post so let's go
68:36 - ahead and get started all right so by
68:38 - this point you should know how to set it
68:40 - up you say add instruction and then
68:42 - Define the function of delete post all
68:46 - right so what does delete post do if you
68:48 - remember our app if I press this x
68:49 - button it should literally remove
68:52 - um this post from my front end
68:55 - to do that we
68:58 - don't necessarily delete anything off
69:00 - the blockchain we are going to do what's
69:03 - called closing oops we're gonna do
69:05 - what's called a closing
69:08 - closing the account and when we close
69:10 - the account it gets removed
69:13 - right that there's still a public key
69:15 - there but it doesn't hold anything it
69:17 - gets removed and then we get refunded
69:20 - Solana right sole refund because we're
69:24 - not taking up sales anymore so we're
69:25 - gonna refund the space it takes up okay
69:28 - so that's the idea
69:30 - so we're closing the account here uh
69:33 - anchor if you run some like if you just
69:36 - write close uh in the function itself it
69:39 - will close the account for you it's a
69:41 - little bit different on seahorse so I'll
69:44 - show you what I mean so delete the post
69:47 - put parentheses and then colon to write
69:50 - the logic next to it so for delete post
69:52 - what are the variables we need or
69:53 - parameters we need post we need uh owner
69:57 - and guess what that is it so post is
70:01 - type of post and what's the type of
70:03 - owner guys three two one signer
70:07 - I kind of wrote it for you so cheated
70:09 - all right from there let's insert and do
70:12 - some checks asserts that post owner is
70:16 - equal to owner that key again
70:19 - right and it's equals equals okay
70:21 - forgetting owner dot key
70:24 - if it's not we don't have the right
70:27 - owner
70:28 - okay
70:30 - cool
70:31 - so like I said we need to close the post
70:34 - account so let's write that need to
70:36 - close the post
70:39 - close the post account by trans
70:44 - Ferring something we call Lamp ports are
70:48 - you going to hear that term
70:49 - lamp ports is a smaller unit of Soul
70:53 - right so think of it like a dollars
70:57 - dollars in USD and the smaller unit of
71:01 - dollars will be cents right
71:04 - so basically a hundred cents makes up a
71:08 - dollar right
71:10 - so from here we're going to use lamp
71:13 - ports because that's what you do
71:15 - with this so we can say post dot
71:18 - transfer Lan ports right because the
71:20 - post account itself is holding the Lan
71:23 - ports that you're taking up space in
71:25 - right so that's that's your rent oh you
71:27 - can think of it as for that space and
71:29 - we're going to transfer the landports
71:31 - that that post is holding to the owner
71:34 - and we can really write let rent
71:36 - exempt exempt I believe no I think the
71:39 - spelling is exempt
71:41 - uh underscore lamp ports and then 440.
71:47 - that's how much uh the exemption should
71:49 - be so post dot transfer underscore lamp
71:53 - ports owner rent exact landport so make
71:56 - sure the spelling is all correct and
71:58 - from here uh you know what to do here
72:00 - this is just emit the delete post event
72:02 - which guess what it's the same thing
72:06 - pretty much so you can just say uh class
72:10 - here delete
72:11 - post event parentheses event colon and
72:16 - guess what you're writing owner
72:19 - so owner is Pub Key ID is u64
72:25 - and we need the init function here so we
72:28 - can say def
72:30 - so what I'll do since it's exactly the
72:31 - same I'm pretty sure it's not any
72:34 - different we can just
72:36 - paste it
72:38 - okay
72:39 - I think that's it so yeah that's the
72:42 - delete post event listener and now we
72:46 - need to emit it
72:48 - so to emit it
72:51 - we need two
72:57 - uh we're gonna do again delete
72:59 - post event like so
73:02 - equal to delete post event
73:06 - and then post that owner
73:09 - poster ID
73:12 - and then delete post underscore event
73:14 - dot emit to emit the post event that we
73:18 - stored in this variable and that's it
73:21 - for delete
73:22 - cool so let's see if we get any big
73:25 - errors yep there's one rent exempt Lam
73:28 - ports not found
73:30 - okay it's interesting
73:35 - post.transferlamp ports
73:37 - rent
73:38 - sent Imports okay so after some
73:42 - troubleshooting I realized what's wrong
73:45 - with this because I'm gonna go down here
73:49 - we have to manually calculate rent from
73:52 - the account size
73:54 - because we can't access Lan ports on an
73:56 - account from seahorse so again seahorse
73:58 - is still brand new but there's a
74:00 - workaround right and I forgot that I did
74:02 - this so rent exempt
74:04 - you have to Define what this is
74:07 - so Imports cool like I said in the
74:10 - current version of anchor uh there's
74:12 - ways that they can do this for you but
74:14 - we have to manually calculate this
74:16 - because seahorse is still new so write
74:19 - something like this uh def exempt uh
74:22 - lamports is a u64. and then the
74:26 - calculation is actually 897 uh 840
74:32 - plus 6 9
74:36 - 60.
74:38 - times size minus one so this is how you
74:41 - manually calculate your Lan ports and
74:45 - that's why we can pass in 440 right
74:48 - that's how much space it takes and then
74:50 - calculate
74:52 - right here so let's hit build
74:55 - and we shouldn't see the unknown error
74:57 - build successful let's go we deleted a
75:01 - post right so
75:02 - cool
75:04 - so on to like post and while I'm at it
75:07 - with like posts it's very similar but
75:09 - we're gonna unlike post which is
75:11 - essentially just closing the like post
75:13 - account
75:14 - all right so moving on to like post
75:16 - right we're gonna do the usual setup of
75:18 - instruction
75:20 - write def like underscore post
75:23 - and then let's put the parameters which
75:25 - is going to take in like a post and a
75:29 - user and you know the Liker
75:32 - who is liking alright so the like all
75:34 - right since this is a new account what
75:36 - do we do empty
75:38 - like account
75:40 - right that's the type it expects for
75:42 - post it's expecting a post and that
75:45 - should Exist by now because we can't
75:46 - like a post that doesn't exist and for
75:49 - the user
75:51 - should also exist should be a user
75:53 - account and the Liker is actually just
75:55 - the signer because who has ever uh
75:57 - connected
75:59 - to our app like right here is going to
76:01 - be the signer or in other words the
76:03 - Liker
76:04 - okay and then the colon here so you
76:05 - could write the logic and let's just
76:07 - verify uh the user account again so if
76:11 - the user.owner is equal to the Liker dot
76:16 - key
76:16 - then we have the wrong licker
76:20 - all right that's not true
76:22 - I got the incorrect like
76:24 - all right so now that we've verified the
76:26 - user we need to initialize the like
76:28 - account so remember how to initialize an
76:30 - account
76:31 - right we say equals like dot init
76:36 - we can do payer is equal to Liker and
76:39 - seeds is going to be
76:43 - like
76:45 - post the owner post ID and the Liker so
76:50 - we're gonna get a very unique seat
76:52 - because of all the seeds that we have to
76:53 - pass in for this okay
76:55 - comma here to end it off and then
77:00 - trying to see something
77:03 - it's gonna put a comment there I don't
77:04 - need that but I just want to make sure
77:06 - seeds
77:08 - parentheses and then let's initialize
77:10 - the rest of the properties so we can say
77:12 - like account dot post underscore owner
77:15 - is equal to
77:17 - post dot owner so we're taking from that
77:20 - post account and grabbing the owner and
77:23 - setting it to the like account post
77:26 - owner yeah so from there
77:29 - let's do another one which is the posts
77:32 - ID which is just literally going to
77:34 - equal the same thing that we passed in
77:35 - the post.id and then the like account
77:39 - dot Liker is going to be the Liker
77:44 - all right cool and again the Liker is
77:47 - the signer so uh again
77:49 - we also have access to posts when we
77:52 - like something
77:53 - we need to do a post that likes
77:55 - plus equals one so make sure you do that
77:58 - otherwise when you like a post like this
78:01 - it's just gonna say zero and don't mind
78:03 - the error but if I like this just should
78:04 - go up to 98. right cool so and then nice
78:09 - message here let's print out
78:12 - post ID
78:14 - comma
78:15 - is post dot ID
78:19 - and then we could say
78:21 - bye
78:22 - owner
78:25 - comma post dot owner
78:28 - then we can do now has and then we can
78:31 - say the likes so it has this many likes
78:35 - comma and then we could write nine so it
78:38 - could be zero one
78:39 - 0 likes one likes two likes three likes
78:43 - all right just a little message
78:45 - cool and then uh we need to emit hashtag
78:49 - emit the like slash dislike post event
78:53 - so notice how it's kind of this post
78:55 - event is going to be a two in one
78:57 - so we can make that pattern below here
79:04 - and say class like this like
79:09 - post event and the type of event and
79:13 - from here let's say owner
79:16 - Pub Key can't exactly copy this one
79:19 - because it's slightly different ID u64
79:22 - and the reason it's different guys is
79:24 - because it's taking in likes so likes
79:28 - u64 like so and then uh the init similar
79:33 - but we need to add likes in there
79:35 - self owner
79:38 - Pub Key
79:40 - comma I this one is the ID of course 264
79:44 - and don't forget like I said add the
79:47 - likes so u64 init bam thank you ma'am
79:52 - South down honor
79:55 - is equal to owner self.id is equal to
80:00 - ID boom boom and self
80:03 - dot likes is equal to likes
80:07 - cool and then keep this manually export
80:10 - thing
80:12 - and now let's emit that like to dislike
80:14 - event
80:15 - so I'm thinking back
80:18 - sits like this
80:20 - same thing so it's going to be like like
80:22 - this like post underscore event is equal
80:26 - to like such a long name right like this
80:29 - like post event
80:31 - so it's gonna take in post dot owner
80:33 - post
80:35 - the ID
80:37 - and comma post dot likes which will be
80:39 - updated because we added plus one right
80:41 - before this
80:43 - cool and now let's admit it so we can do
80:45 - like
80:47 - this like post event is equal to or not
80:52 - equal to sorry dot emit boom
80:55 - okay cool and that is the like function
80:57 - say build
81:00 - oh it's the assert thing we're at the
81:02 - Double equals
81:04 - boom and then the seeds comma after pair
81:09 - 108
81:10 - don't forget that build again
81:14 - uh
81:15 - proton 116.
81:21 - post ID oh the comma should be after the
81:24 - quote so again there's a lot of
81:25 - misspelling it's normal just double
81:27 - check that and we're building now that's
81:29 - a good sign usually
81:32 - let's go build successful let's move on
81:35 - to unliking a post and don't worry we're
81:37 - going to test all of these later on
81:40 - and come back if we need to all right so
81:42 - last but not least we have unlike posts
81:45 - or since I was calling it this like post
81:47 - we'll call it that too so disliking the
81:50 - post now
81:51 - and let's set up the instruction like so
81:54 - so instruction
81:56 - death dislike post okay and what
82:00 - parameters does disliking a post take in
82:03 - it's going to take in the like account
82:06 - right because now we have a like account
82:07 - right we want to close this essentially
82:09 - like
82:11 - uh post which is expecting a post
82:15 - account like what post are you disliking
82:17 - and who is the disliker right the
82:20 - disliker is the signer who's ever logged
82:23 - in at the time
82:25 - and a couple checks here assert
82:27 - like
82:29 - dot Liker is equal to this like or key
82:33 - you want to make sure that they're the
82:34 - same otherwise it's the incorrect this
82:38 - like it's not the same
82:41 - so let's assert like that Liker and then
82:44 - equals equals yeah
82:46 - oops not minus equals equals equals
82:49 - all right another assert here which is a
82:51 - like that post underscore owner right
82:54 - just making sure that the person logged
82:56 - in is
82:59 - the liked the posts
83:01 - that has the like is the same as the
83:04 - owner otherwise it's the wrong one this
83:06 - one's less likely to happen but it's a
83:08 - good
83:09 - check
83:10 - post owner and there's one last one
83:13 - which is just in case the post ID is
83:16 - wrong
83:17 - right because there could be posts with
83:19 - the same ID if we did this wrong
83:22 - say incorrect
83:24 - post ID okay cool so just like with
83:29 - um deleting the post we want to close
83:32 - the like account right so we want to
83:34 - like I said hashtag
83:37 - close the like count
83:40 - by trance firing lamp points to the
83:45 - owner okay and again we have to do this
83:47 - manually but we set that up here
83:50 - manually calculating how much land ports
83:52 - we need to send back and we can do it
83:54 - like that transfer
83:57 - lamp ports
83:59 - the disliker that is the owner that
84:02 - we're going to transfer to
84:04 - right because the disliker if he's
84:06 - closing his like removing it he needs to
84:08 - get his rent money that he paid back so
84:11 - it's exempt uh lamp ports
84:15 - and hit the space of the like is about
84:17 - 80. again we have to manually put this
84:19 - in here
84:20 - and uh what else do we need to do if we
84:24 - dislike something or unlike something we
84:27 - need to post that likes minus equals one
84:31 - right because the count should go from
84:33 - like 10 to 9.
84:35 - right that should make sense to you guys
84:37 - and let's take this similar message here
84:40 - now copy
84:42 - paste to save time because now this post
84:45 - has uh
84:48 - now has because we don't have owner
84:51 - anymore
84:52 - this post
84:55 - ID blank now has blank clicks okay that
84:58 - makes sense cool and now we need to
85:01 - hashtag commit like this like post it
85:07 - right so this is exactly the same
85:11 - has the other one
85:12 - so we can copy it
85:15 - let's copy it and paste it like so
85:19 - got her events here like this like boom
85:22 - so let's take this back let's hit build
85:23 - let's see what errors I got
85:26 - the 124
85:31 - 174 oh don't forget to call in because
85:34 - every function
85:35 - needs this colon right after
85:37 - build
85:38 - okay that's a good sign
85:42 - build successful all right cool all
85:45 - right guys we did it we completed the
85:48 - smart contract right we didn't get to
85:49 - test all the functions we know we can
85:51 - create a user but now let's
85:54 - take this smart contract information and
85:57 - let's finally get back to our app
86:00 - okay so time to get back to the
86:03 - connection of our front end and our
86:05 - Solana program so don't forget to
86:06 - upgrade this and make sure you have
86:08 - enough Solana
86:11 - looks like I do so it's going to deploy
86:15 - [Music]
86:17 - awesome
86:18 - alrighty
86:19 - so now it's fully upgraded with all the
86:22 - new information I'm gonna go ahead and
86:24 - clean out
86:26 - um just these two tabs here and going
86:28 - back to our app we can pull up vs code
86:31 - again
86:32 - and actually make this guy a little bit
86:35 - smaller
86:37 - let's do something like this
86:40 - right and we can do something like this
86:43 - cool
86:44 - all right so we have both side by side
86:46 - now and let's talk about a few things so
86:50 - the the key thing to get started
86:54 - all right the key thing is go to your
86:56 - utils and go to constant.js right notice
86:59 - how uh if I do control B here and zoom
87:03 - in a bit notice how we need the program
87:06 - ID here so this is where you come in
87:09 - you're gonna go to salon a playground
87:11 - we're going to take a look at what your
87:13 - post ID is or your program ID is
87:15 - right so your program ID is this right
87:18 - here
87:18 - so copy that
87:20 - and you're going to do something for me
87:21 - you're going to say new
87:23 - public key right because we imported
87:25 - that from Solana
87:27 - parentheses quotes and pass in your
87:31 - program ID oops sounding codes
87:35 - boom okay now
87:38 - we have the program this is us using our
87:41 - RPC endpoint which is this placing it
87:44 - where we need to
87:45 - now storing our program ID in this
87:48 - variable and exporting it so that's one
87:50 - of the first things you guys should do
87:53 - so the next thing you have to do is use
87:55 - this program ID to get that information
87:58 - to get the program right so for now I'll
88:01 - minimize this and then we can make this
88:04 - bigger for now
88:05 - and let's start on working on that so if
88:07 - you press Ctrl b or command B what you
88:09 - want to look at is program.js
88:13 - I also need the idl.json but if you did
88:15 - everything the same as me right
88:18 - it should be a similar idea
88:21 - cool
88:22 - same thing go to program
88:25 - dot Js
88:26 - and this is where the majority of code
88:28 - is going to happen right we need to make
88:32 - a function that's going to grab the
88:34 - program from the blockchain so that we
88:36 - can use it right so look at this code
88:39 - right here import program ID from
88:41 - constants all right so we're grabbing
88:43 - this right here all right so now we need
88:45 - to use it so let's do that we're going
88:46 - to do normal JavaScript functions now so
88:48 - I hope you're ready
88:49 - uh we're gonna say well before we export
88:52 - let's do cons get program right is equal
88:55 - to an arrow function right so we want to
88:59 - get program
89:01 - right and what we want to do with this
89:03 - is we need a connection
89:05 - right and we need a wallet
89:08 - right so anytime I run this function
89:10 - we're getting the program next is const
89:14 - idea
89:15 - is equal to
89:18 - uh parent require
89:22 - parentheses
89:24 - quotes
89:26 - idl.json right so again
89:28 - [Music]
89:30 - you can get your new idl.json right
89:34 - by going into your salon playground
89:39 - going into here and do export IDL but if
89:41 - you did everything the same as me it
89:43 - should be very similar
89:46 - okay so that's how you get the idea if
89:48 - there's any errors this might be where
89:49 - it is but I think it should be fine
89:52 - so make sure the you get the idea that
89:54 - Json stored in a variable like so
89:56 - let's get the provider which is provider
89:59 - is equal to
90:00 - new
90:02 - anchor provider right so that's we're
90:03 - going to get this anchor provider
90:07 - and it's going to take in connection and
90:09 - wallet which is the two parameters we
90:11 - passed in
90:12 - and anchor provider
90:15 - uh dot default options
90:19 - okay
90:21 - and that's it for provider and then we
90:23 - can say const program is equal to new
90:26 - program our new instance of a program do
90:29 - IDL
90:31 - program ID for the address
90:34 - and the provider
90:37 - right so then we return program and this
90:39 - is what lets us see into the our Solana
90:43 - program and access the function so it'd
90:45 - be like program dot whatever
90:49 - use it like that so that's get program
90:50 - and what I was racing before is export
90:53 - because we want to export that function
90:55 - and use it in other places
91:00 - all right so that's the first thing
91:02 - that we need to do
91:04 - hit save
91:06 - and now that we can get the program
91:09 - using this function let's actually use
91:10 - it so if I want to use it to control B
91:12 - again and let's go to the state folder
91:16 - and go to
91:17 - global.js right so here
91:20 - we are going to use our context and
91:24 - create a custom hook out of it right so
91:26 - if you don't know uh what context is all
91:30 - right let's bring this guy back
91:31 - spring zeit board
91:34 - back because I actually do need it
91:36 - all right when you have a normal app
91:38 - right this is going to look something
91:40 - like this right so this is the parent
91:44 - and it has two children right so we can
91:45 - say this is the app.js and the apps
91:49 - child is the index and then we have a
91:52 - header and we have like the stories part
91:55 - right so usually if I have uh posts
92:00 - right post data in here in order to get
92:04 - this data to header I have to pass it
92:07 - down as a prop right and that's totally
92:11 - fine to do but if we have a lot of
92:13 - different components for example
92:15 - right I would have to
92:18 - and I want post all the way here I would
92:20 - have to pass in posts
92:22 - like so that's like this is called prop
92:24 - Drilling and that can lead to issues
92:25 - later down the line so an alternative is
92:28 - using something called context right you
92:31 - can look at it like a store so let's say
92:33 - my program is here
92:35 - right I'm getting the program into my
92:37 - state here
92:39 - and then I can just pull it from
92:40 - whenever I want I don't have to pass it
92:42 - down all the way so let's say there's a
92:45 - component here I need to use program I
92:47 - can just call it directly there and it's
92:49 - so nice so context is nice
92:54 - Okay cool so let's bring this guy back
92:56 - and we can minimize him again and let's
92:59 - set it up so to set it up the context
93:01 - you can say import
93:03 - create context
93:06 - okay and while we're here importing
93:08 - stuff from react we can say use callback
93:11 - all right so not to recall a function
93:15 - over and over again
93:16 - use effect and use state
93:21 - okay hit save and from there
93:23 - we can import
93:26 - get program
93:29 - from utils
93:32 - and we're going to get a bunch of other
93:34 - things but this is fine for now okay
93:38 - uh we're also gonna need
93:42 - what else you're gonna need import the
93:45 - lanports poor soul
93:48 - from Solana web3.js we'll use that later
93:50 - and another thing we're going to need is
93:52 - import toast
93:55 - from
93:56 - react
93:58 - hot toast alright so this is that nice
94:00 - notification symbol so we have a nice
94:02 - visual to see if something worked or not
94:05 - okay
94:06 - cool so how do we create this context
94:09 - that I'm talking about Lance I'm glad
94:10 - you asked we're going to say import
94:12 - const Global context is equal to
94:17 - you can connect to these contacts we
94:19 - want to create it first create the
94:21 - context
94:22 - cool in our context is going to be a lot
94:25 - of different things but there's we can
94:27 - just set them all up now
94:29 - there's going to be something called is
94:30 - connected
94:32 - and a lot of these are going to be set
94:33 - to null at first but they will have
94:36 - definitions to them later so just follow
94:38 - along with me next one is wallet next
94:41 - one is has user account right because we
94:45 - want to check if they have user account
94:46 - or not
94:48 - no oops not Jr multimedia
94:52 - no
94:54 - posts no
94:58 - fetch
94:59 - post
95:01 - no
95:04 - I forget the commas
95:06 - uh oh this is pretty much all the
95:08 - functions so create user no
95:11 - we want to create a post
95:14 - that's no
95:17 - uh update post
95:19 - okay comma delete post
95:25 - no and again if I'm going too fast feel
95:27 - free to pause the video
95:29 - and copy along what I have so let's do
95:31 - like post
95:32 - no and dislike post
95:39 - alrighty
95:41 - Okay cool so we created the context
95:43 - right so this is global context create
95:46 - context
95:47 - and now let's set up our state
95:50 - so I export const Global state
95:55 - is equal to
95:57 - whatever children we pass in which will
96:00 - come into play later
96:01 - children
96:04 - and set this to an arrow function let's
96:06 - get started on that so we want to deal
96:08 - with the program right so let's do const
96:10 - uh
96:13 - let's make a state and say const program
96:17 - set program is equal to use state right
96:21 - so this is going to help us what we're
96:23 - going to do is
96:24 - get the program right and then set it in
96:29 - our state so that when I say program
96:32 - this one
96:33 - I can use it anywhere I want right so
96:35 - that's the power of this
96:37 - um cool
96:39 - now how can we do that uh
96:44 - do I need something I'm going to need to
96:46 - import another thing here
96:47 - let's do import
96:49 - we need the connection so we need to use
96:52 - anchor wallet
96:54 - comma use connection
96:57 - so we need a connection and a wallet for
96:59 - the program
97:00 - cool
97:02 - explored Global state
97:05 - [Music]
97:10 - and at the end of this all for Global
97:13 - state it will return something and it's
97:15 - going to return oops return
97:19 - a
97:20 - a global
97:23 - Global
97:24 - context dot provider all right where
97:28 - have we seen uh Global well not Global
97:31 - context provider but where have we seen
97:32 - provider before right so that's going to
97:36 - take in a child of a value inside the
97:39 - top one
97:42 - value is equal to
97:45 - Chrome colon oops
97:48 - and anything
97:49 - uh you put in here
97:52 - will be passed will be able to be passed
97:54 - on anywhere so what I mean is if let's
97:57 - go back to here if we had
98:00 - the store
98:02 - all right and I set up program in here I
98:04 - got the program
98:06 - this is where I put it so I put program
98:08 - here for example
98:10 - if I wanted to see a program
98:12 - and for in between these two guys it's
98:15 - going to take in children
98:18 - cool so we set up our Global context we
98:21 - set up a global state will return a
98:24 - provider
98:25 - for our contacts all right
98:28 - now let's actually put this into use
98:33 - yeah so to get this working we can set
98:36 - up a use effect right a use effect we'll
98:38 - run uh when on create on upload and on
98:43 - delete of a component
98:45 - all right so to use this use effect
98:49 - let's go ahead and write in a narrow
98:51 - function
98:54 - Okay so
98:56 - first thing you want to check is if
98:58 - there's a connection so let's get a
98:59 - connection so let's say const
99:01 - uh here you can get a connection from
99:05 - use connection like so okay and if you
99:08 - didn't know we can also get a wallet
99:10 - from use anchor wallet which is why I
99:13 - had those two Imports
99:15 - uh and you have to call them to get that
99:18 - cool so now we have a connection and now
99:19 - we got a wallet to play with and if
99:23 - there is a connection
99:26 - right then we're gonna set the program
99:29 - to be whatever the program is and how
99:32 - can we get the program well you can
99:34 - actually run the function you can say
99:35 - get program because we have access to it
99:38 - from here
99:39 - put parentheses and then say connection
99:42 - wallet
99:45 - Colin colon because there might not be a
99:46 - wallet if there's none we do the empty
99:49 - object here
99:50 - okay else
99:52 - uh
99:54 - set
99:56 - program to know
99:58 - okay and if you can put something called
100:01 - a dependency module in this use effect
100:03 - if I put nothing in here this use effect
100:06 - will run when the page first loads
100:08 - if I put something in that dependency
100:10 - module like connection this will run
100:13 - when the page first loads and when the
100:16 - connection changes so if we get a
100:17 - connection it'll run again
100:19 - all right if we lose our connection for
100:21 - some reason it'll run again
100:22 - and dude and if there's not a connection
100:24 - it will set it to null another thing we
100:27 - can check for is if there's a wallet
100:29 - all right so if there's a connection
100:31 - there's a wallet
100:32 - if that changes at all let's use effect
100:34 - will run once more all right cool so now
100:38 - how do we see this program well we're
100:40 - passing it in we need to be able to see
100:42 - it on our app and one way to do it is
100:44 - come back to uh your app actually
100:49 - so we need to do next like I said is go
100:52 - to the app
100:54 - come to the top here and let's import
100:57 - something new
100:59 - we can import
101:01 - Global State now global not Global
101:04 - context Global state right because State
101:06 - holds that provider
101:09 - between these two guys
101:11 - uh right here let's add global
101:15 - state
101:17 - right so the reason why I'm doing this
101:20 - visually it's kind of like wrapping our
101:24 - whole app with the context so you saw
101:27 - that Circle that represents these the
101:30 - context oops
101:32 - well wrapping it like this
101:35 - and let's say a program exists in the
101:37 - context here
101:38 - I can pull it from anywhere all right so
101:42 - that's why I wrap Global state
101:47 - within our app
101:49 - okay
101:50 - so that said
101:52 - let's take a look at our hooks folder
101:56 - you're going to see something called use
101:58 - Global state right so now
102:01 - we can import our Global contacts right
102:04 - we can uncomment it we're importing it
102:06 - and comment out this return it's save so
102:10 - now
102:11 - let's check if our app still works okay
102:14 - there's destructive property
102:18 - use anchor wallet is not defined okay
102:20 - that's fine so we're gonna go up to here
102:22 - use anchor wall it's not defined
102:28 - okay so there's something wrong with the
102:30 - use anchor wallet and
102:33 - oh yeah I don't need to destruction this
102:35 - this is actually just be a variable
102:37 - because I'm not getting anything out of
102:39 - this
102:41 - so okay hit save and Bam
102:44 - okay we're good to go and again I can
102:46 - still log in
102:48 - cool
102:49 - and what I wanted to point out is this
102:51 - part the hook we take our contacts and
102:54 - turn it into a hook that I could use
102:55 - right so now I can say use Global state
102:58 - so if I go to
103:01 - index
103:03 - all right where's index
103:05 - it's right here
103:06 - and then if I do something like
103:09 - uh
103:11 - import
103:13 - use
103:15 - Global state right and then I can
103:18 - destructure anything from use Global
103:20 - state so let's say all right
103:22 - I can say const
103:24 - object program
103:26 - equals to use Global State and then I
103:30 - can write console log
103:33 - this is my program and then comma
103:40 - space comma
103:42 - program so let's see if it loads
103:45 - so it should get best give us back a
103:47 - program
103:50 - say inspect
103:51 - console
103:53 - this is my program VN okay so you saw
103:55 - that this is my program VN and you can
103:58 - see
103:59 - everything you need to right if I do a
104:02 - program dot instruction so I lost the
104:05 - parentheses and struck shins let's see
104:08 - what we get
104:10 - oh program.instruction not with an s
104:15 - cool so this is my program and we see
104:18 - all our functions create posts create
104:20 - user delete post dislike post like post
104:22 - right everything is there so when I say
104:25 - program dot instruction dot create user
104:30 - now you can see how we get it right so
104:33 - keep that in mind
104:36 - so we can erase this do you guys have an
104:38 - idea of how this hook and context is
104:41 - using together
104:42 - if you do we can move right along so
104:45 - let's do it all right so we can do now
104:46 - is we actually don't need the program
104:47 - here we're only going to be using
104:50 - program uh in this global.js right we're
104:53 - going to do a lot of stuff with the
104:54 - program this is where we'll write all
104:57 - the function calls to our smart contract
104:59 - so that you can have some functionality
105:01 - to this app right so now that we know
105:06 - that works let's go back to our utils
105:10 - and let's go back to program.js right
105:12 - whatever you wrote get program because
105:15 - uh there are functions that we can make
105:18 - that will make our lives easier
105:21 - what do I mean by that let's go back to
105:24 - our Local Host app first just a second
105:27 - and if you see on this side of my screen
105:29 - right we can fetch users right if I do
105:33 - fetch all right I get all the users that
105:36 - are created and there's the second one
105:37 - because I was testing if it still works
105:40 - so with a different account so there's
105:42 - C2 users now right but let's say I
105:44 - wanted to just get get one user's PK and
105:47 - when I say PK that's public key so what
105:51 - if I wanted just this user's PK right
105:55 - well what you're gonna do is take the
105:57 - user uh public key and click Fetch and
106:01 - Bam I only have that user's information
106:04 - that user's PK right so
106:08 - with that said
106:11 - let's move this back here
106:13 - with that said we can link that up let's
106:15 - make a function that does that for us so
106:18 - I don't have to call it over and again
106:20 - so let's say export cons because I want
106:23 - to use it other places
106:27 - all right
106:29 - this will be get user
106:32 - count
106:33 - PK
106:35 - and it's going to be asynchronous
106:39 - right because it's essentially
106:41 - uh communicating with the blockchain
106:44 - it's going to take in an owner so again
106:46 - what does this do this will get us the
106:48 - user accounts public key
106:50 - and how do we get a public key guys
106:51 - think back to what I was talking about
106:53 - with seeds that's right we're going to
106:55 - put in the seeds right so we're going to
106:57 - say return
106:59 - uh return parentheses like so
107:03 - oh wait
107:06 - oh wait
107:08 - uh public key all right so it's using
107:11 - this import now
107:12 - to generate a public key from oops
107:15 - public key dot find program address
107:19 - right so this is a built-in function of
107:22 - public key that's going to find the PK
107:24 - based on seeds and to write out the
107:27 - seeds you need to press this array thing
107:30 - because we gotta say buffer
107:32 - Dot from
107:34 - user right so this is us this is the
107:36 - equivalent
107:37 - of us going on to here
107:41 - and passing in
107:43 - use it like this all right we're passing
107:45 - in this user seat
107:46 - right because the seed should always
107:48 - generate the same paluki
107:50 - so yeah
107:52 - it's going to take a user and what else
107:53 - did it take in if you remember owner
107:56 - and we have to format it the way it
107:58 - wants so do two buffer
108:00 - and comma it also takes the program that
108:03 - I underscore ID which is why we need to
108:05 - get program here
108:08 - and if you do that you can do a zero
108:11 - here
108:12 - this is needed semicolon and that's it
108:15 - that's our that's how we get a user
108:17 - account PK
108:19 - okay we just pass in the seeds pass in
108:22 - the program ID
108:23 - this and we're good to go
108:27 - all right next thing what else do we
108:29 - should we get we should get the post
108:32 - account so let's get
108:34 - post account BK you don't need to do
108:38 - this
108:39 - but
108:41 - um this will save us time in the long
108:43 - run
108:44 - because I can just call this function
108:45 - instead of manually uh putting in the
108:48 - seeds over and over
108:49 - okay so let's say owner
108:52 - and ID right because we need an ID
108:54 - because each post has their own unique
108:56 - ID
108:58 - and asynchronous
109:01 - and we're going to do return
109:04 - I'll wait
109:09 - public key
109:13 - dot find program address
109:16 - and same thing with a pass in the seeds
109:18 - so what are the seeds for a post uh it's
109:20 - going to be buffer Dot from the string
109:25 - post
109:26 - and then the owner
109:29 - which we can do two buffer for
109:31 - and then the new
109:35 - it's the post ID is the third seed right
109:38 - so this is going to be what we call a
109:40 - big number so we say new BN
109:42 - pass in that ID and then if we have to
109:46 - format that to two array like
109:51 - buffer
109:52 - all right and we need in Lan ports e
109:56 - sorry this is just a format that ID to
109:59 - what Solana can read
110:02 - and to get the red seed so you can't
110:04 - just straight up put ID here we need to
110:06 - do this
110:08 - okay
110:09 - comma here
110:11 - comma here and don't forget we need to
110:12 - put in program
110:14 - ID
110:15 - and parentheses
110:19 - after that parentheses
110:22 - and then zero here just like last
110:24 - and then semicolon
110:27 - cool so that's the post account PK and
110:30 - last but not least let's get the like
110:33 - account all right again let's make our
110:36 - lives easier so get like count PK is
110:39 - equal to async Arrow function
110:42 - uh it's gonna take in an owner
110:45 - the ID of the poster liking and um who
110:48 - the Liker is yes
110:50 - who's the Liker and then we're gonna
110:51 - return
110:54 - oh wait
110:55 - public key dot find program address
110:58 - right this is so nice to have this
110:59 - built-in function all you gotta do pass
111:02 - in the seeds so what are the seeds for
111:04 - our like account guys buffer Dot from uh
111:08 - like
111:09 - and owner.2 buffer
111:13 - all right format that
111:17 - and what else I think it's an ID so if
111:20 - you get an ID you have to do a new BN
111:22 - ID dot two array like
111:26 - buffer
111:27 - I know it's intense Ellie
111:30 - eight if you need to pause this video go
111:31 - for it
111:33 - uh and I think there was one more seed
111:35 - it was the Liker which is a public key
111:38 - so we'll do a two buffer all right so if
111:40 - it's a number if it's a u64 format it
111:43 - like so if it's a string
111:45 - as a seed do this and if it's a public
111:48 - key do this
111:51 - it's the general rule so you don't have
111:53 - to memorize this just you can use your
111:55 - old projects as a reference
111:57 - so again after the array comma uh put in
112:00 - the program ID
112:01 - [Applause]
112:03 - and after the second
112:05 - one right here put zero and you're done
112:08 - cool so we have
112:10 - some helper functions that we're going
112:12 - to use to work on our state
112:16 - so let's go back to not use Global state
112:19 - but to our global.js
112:23 - cool so now we can call all those
112:25 - functions all right so remember how we
112:27 - got the program so let's just bring that
112:30 - down here
112:31 - [Music]
112:35 - right here because we're going to get
112:36 - more stuff so instead of saying slash
112:38 - program because that's very specific
112:40 - let's go to just the utils
112:44 - and we can do something like this
112:47 - so we're going to get the program
112:49 - we also want to get a post account PK we
112:54 - want uh get like account we want to get
112:58 - user account cool so now we have access
113:00 - to all those helper functions which is
113:02 - going to be very nice
113:04 - and now we can scroll down and get to
113:07 - work
113:08 - so we need some sort of goal so the
113:09 - first goal that I want to work towards
113:11 - is creating a user one of our first
113:13 - instructions right so the things that
113:16 - we're going to need to create a user
113:18 - right is let's add another user effect
113:21 - because I need to check
113:24 - for a wallet connection right so to do
113:27 - that
113:28 - what we're going to do is scroll up a
113:30 - bit
113:31 - and we need to make another state so we
113:34 - can say const
113:35 - is connected is the state and set is
113:40 - connected
113:41 - is the function we say use state
113:45 - like so
113:47 - and to check the wallet connection it's
113:49 - gonna be pretty simple it's just a use
113:51 - effect
113:55 - okay so I'm setting that up
113:57 - the use effect is what we want to do is
114:00 - set is connected
114:02 - to
114:04 - not not
114:06 - wallet
114:08 - Dot Public key
114:11 - right
114:12 - because this will be this is basically
114:15 - saying if there's a wallet and then just
114:17 - Dot Public key and that's what we're
114:19 - going to set the connection to so this
114:21 - will lead to true or false right because
114:24 - usually wallet.public key is that number
114:26 - that you see but when you do not not
114:28 - it's going to be true
114:31 - it should be true
114:32 - okay
114:34 - so yeah
114:36 - that's it right there and inside the
114:39 - dependency module for it which is just
114:41 - going to be wallet
114:43 - cool so once the wallet is set up we're
114:45 - gonna set check if it's connected while
114:47 - it's connected if it's good we run let's
114:49 - use afflect
114:54 - uh now next step for creating a user we
114:58 - first have to check if there is a user
114:59 - right so uh we need to
115:03 - fetch check for a user account by
115:08 - fetching the user
115:12 - okay so how can we do that well we can
115:14 - make a function say const fetch
115:18 - user
115:20 - count and set this equal to use callback
115:23 - right
115:25 - if you don't know use callback is very
115:26 - similar to use effect but it's not going
115:28 - to re-render the components unless the
115:31 - dependency is changed so again we're
115:33 - going to set the fetch user account
115:34 - function to a sync
115:37 - right and here is where we can write the
115:40 - logic for it
115:42 - cool
115:43 - so here you can say
115:44 - [Music]
115:45 - um
115:46 - if there's no program
115:50 - right we can just return
115:52 - all right because we shouldn't be if
115:53 - there's no program to begin with we
115:56 - don't need to fetch the user account or
115:58 - we can't we shouldn't be able to because
115:59 - there's no nothing to fetch
116:01 - um from here we can set up a try catch
116:04 - though
116:05 - try
116:06 - catch and E
116:10 - and again I just do the catch first
116:11 - usually
116:13 - here um
116:15 - If This Were to work we need to save
116:17 - that user account that we fetch so we
116:19 - need to make a state
116:21 - so for that state we can say
116:24 - const
116:25 - ant user account and set user account is
116:30 - equal to you state
116:33 - all right cool so from here if there is
116:38 - no program return nothing just leave
116:41 - and if there is no user right if we fail
116:45 - to you can say set user account to not
116:50 - and even say the console log
116:53 - no user found no user
116:56 - that makes sense right if we can't fetch
116:58 - a user it should be null and no user
117:00 - found all right but what if it does work
117:02 - right so
117:04 - how do we fetch a user right think back
117:06 - to the Solana playground right how did
117:09 - we fetch the user
117:12 - well we need to
117:15 - pass in the seeds right and where have
117:17 - we done that before I'm trying to think
117:18 - all right we can say const user account
117:21 - PK for the user account public key is
117:25 - equal to weight
117:26 - get user Peak all right we don't like if
117:29 - I didn't call mother's helper function I
117:31 - would have to write this whole thing
117:35 - in this line right so that would take up
117:37 - more space but since we don't right we
117:40 - don't have to and what we can do is just
117:41 - say wallet question mark Dot Public key
117:44 - and you might be wondering what the hell
117:45 - is this question mark Lance is uh it's
117:47 - basically
117:48 - if this egg wallet exists
117:51 - right
117:52 - then you can get the Dot Public key
117:54 - because sometimes uh the wallet won't
117:56 - load just yet
117:58 - and it'll be like something like uh
118:01 - undefined reading Dot Public key right
118:03 - because the wild doesn't exist yet but
118:05 - this makes sure that the law does exist
118:07 - first and then it can read that public
118:09 - key that's why I do that just in case
118:11 - sometimes you don't have to
118:13 - but there you go and then we can console
118:15 - log the user account PK if you want to
118:18 - see what it is
118:20 - okay and then we can say the const user
118:25 - account
118:28 - setting this into a variable is equal to
118:30 - a weight
118:31 - because we don't want to set user
118:34 - account right away because that will
118:35 - re-render our component so we'll do that
118:37 - in a second first we have to grab it
118:39 - account dot user
118:42 - so remember if I write program we get
118:44 - access to program let's say dot account
118:45 - we can see all the accounts that it
118:48 - makes so if you think back here we would
118:50 - see user post and like we want user
118:54 - and we can do a DOT fetch here and then
118:57 - fetch it based on the user account PK so
119:00 - now do you see
119:01 - that this is how Solana playground works
119:05 - and fetching an individual PK
119:08 - we just did the same thing but in
119:10 - JavaScript
119:11 - essentially
119:12 - okay so we're gonna wait for this and
119:15 - once this runs all right we'll have the
119:18 - user account then and now that we found
119:20 - it we can say console.log uh user found
119:25 - and then we can say set a user account
119:28 - is the user account
119:32 - right and if that were to fail at any
119:35 - point right then it's going to say uh
119:38 - set users no
119:40 - okay
119:42 - cool
119:43 - so this isn't running that's why it's
119:45 - grayed out so let's make it run
119:47 - so we can do a check for user account
119:51 - cool and then we can say use effect
119:57 - all right a lot of code so if you have
119:59 - basic knowledge of react hooks this
120:02 - might be a little simpler for you if
120:03 - this is overwhelming for you make sure
120:05 - you leave a comment like let's make a
120:07 - react course right so
120:11 - cool so check for user account it's
120:13 - literally just going to run fetch user
120:14 - account
120:16 - dependency module because we only want
120:18 - to run this if we're connected so it all
120:21 - ties back to the connection right so if
120:24 - there's a wall connection this user
120:25 - effect will run next
120:28 - okay so let's hit save
120:30 - and let's go back to our app
120:33 - let's see if anything has happened
120:39 - so it might have our old stuff nope so
120:41 - let's select wallet Phantom
120:43 - let's go right there's a user found
120:45 - right user found public key and that
120:49 - makes sense because this second user
120:52 - all right the owner is b46 and I'm
120:55 - logged in with b46 right here so let me
120:58 - just make this full screen for now what
120:59 - happens if I change my wallet though so
121:01 - how do you change wallet good question
121:02 - just disconnects this click the Phantom
121:05 - icon uh login and just switch to one of
121:08 - your other wallets so if I see a t
121:10 - all right so now I'm using wallet one
121:12 - connect wallet one to your app
121:14 - and now
121:17 - there shouldn't be a user so look at
121:19 - this no user found right when I when
121:24 - there was a user it says user found
121:26 - enter is not a user no user phone
121:29 - right
121:30 - so thinking about the logic
121:33 - if this there's no user found when I
121:35 - connect my wallet
121:36 - I need to be able to create a user
121:40 - so how can we create that user so
121:44 - um yeah if this is a new wall I should
121:46 - be able to see a create user button and
121:47 - if you remember the demo there was a
121:49 - create user button that should show up
121:51 - right here so let's go back to our app
121:55 - next thing we want to go is open up
121:57 - components
121:58 - and head to the header because like I
122:00 - said that's where that button is
122:01 - supposed to be and if you scroll down to
122:04 - um line 49 for me you're going to notice
122:07 - that there's some conditional rendering
122:09 - right it
122:11 - has user account right
122:14 - is false
122:16 - and we're connected
122:19 - show me the create user button so let's
122:22 - do it statically let's make it like this
122:24 - has user account is equal to True let's
122:27 - change it to false let's say there isn't
122:29 - a user account but I'm connected let's
122:32 - see right here oh is connected is not
122:36 - defined all right
122:39 - okay so this isn't true because we don't
122:42 - know what is connected is but do we have
122:44 - is connected it's the question
122:46 - so we're not going to go to program
122:48 - we're going to go to Global and
122:52 - we have is connected right here right
122:54 - and we can Define uh is connected like
122:57 - so
122:58 - say is connected save and now let's go
123:01 - to header and let's import
123:04 - or use Global state which we did for you
123:06 - in line 15. so now that we did that
123:09 - really nice thing for you you can go to
123:12 - here and say const
123:15 - object say
123:17 - is connected is equal to use Global
123:21 - state so now we have that now let's turn
123:24 - this to false
123:28 - cool
123:30 - so now if there is no user account and
123:33 - we're connected
123:35 - uh oh I think it's looking for a create
123:38 - user but there is no create user yet so
123:40 - let's do a
123:42 - fake create user so cons
123:45 - create
123:47 - user
123:51 - this
123:54 - temp okay cool
123:58 - let's see what else it's missing it's
124:00 - expecting oh there we go cool so this is
124:03 - the true example of what we want to see
124:04 - right if if there is no user account
124:07 - this is should be false
124:10 - and we're connected show me the create
124:13 - user but if this is true
124:18 - all right then we won't see that button
124:20 - which means I have a user account
124:22 - right so we need a state that's going to
124:24 - do that for us
124:26 - so the question is how do we make this
124:27 - more Dynamic right so the first step
124:30 - right is going into your global.js
124:34 - and remember how
124:36 - we're going to make use of user account
124:38 - right
124:39 - so remember we have has user account in
124:43 - our Global context we can redefine it
124:45 - from null like so so if I say has user
124:49 - account I can do something
124:52 - like this
124:54 - all right I can say colon and then say
124:57 - user account
124:59 - right
125:01 - the reason why I'm doing this is because
125:03 - we can do some conditional rendering
125:06 - again with the ternary operator so
125:08 - basically if there is a user account it
125:10 - should be true and if there's not it
125:12 - should be false
125:15 - I'm going to come here cool so now has
125:19 - user account will either be true or
125:22 - false depending on if this exists or not
125:26 - does that make sense so if this exists
125:28 - it'll be true if not it'll be false and
125:30 - that's what has user account is
125:32 - right so
125:34 - and that uh the engine of that
125:37 - is going to be based on this function
125:40 - fetch user account so it's all connected
125:42 - right we're setting up our foundation
125:43 - for our app and if you're following
125:45 - along with me you're doing a great job
125:47 - okay seriously you're doing great like
125:48 - this took me a long time to understand
125:50 - and if you don't understand just rewind
125:52 - keep trying
125:54 - so uh heading back to header erase this
125:57 - fake has user account and give me the
126:01 - real one you can say has user account
126:03 - like so
126:04 - all right so moment of truth if I select
126:06 - wallet and I connect it to the 8T wallet
126:09 - wallet one
126:11 - I should see create user so three two
126:13 - one
126:15 - let's go create user exist right well I
126:17 - should see now if I disconnect and let's
126:19 - use a wallet where an account does exist
126:21 - already which was uh wallet five so
126:24 - let's connect that one and I should not
126:26 - see has user account yeah so
126:29 - boom you saw it for a second oops you
126:31 - saw it for a second and then it
126:32 - disappeared right we are able to set up
126:35 - the conditional rendering now what we
126:38 - want to do next
126:41 - right
126:43 - is connect our wallet and actually
126:45 - create a user
126:46 - instead of saying temp right here just
126:48 - says temp
126:50 - we want to actually create a user okay
126:52 - so the cool part is I don't have to make
126:54 - create user from scratch anymore
126:56 - because oops not that because
127:01 - it's already in our Solana code our
127:04 - program we just have to call it right so
127:06 - to call it we need to go here
127:12 - write out that function all right we
127:14 - know global
127:16 - underneath this check for user count
127:19 - let's
127:21 - create
127:22 - user right and we're not going to make
127:24 - the function from scratch we're just
127:26 - going to call it and pass in the
127:27 - parameters we need so let's go ahead and
127:29 - start by saying const create user is
127:32 - equal to use callback
127:35 - right because you want to run up you
127:38 - want to not re-render all our props if
127:40 - we run this
127:41 - so it's asynchronous
127:43 - and again there's this check here if
127:46 - there's no program we shouldn't be able
127:47 - to create the user in the first place
127:49 - all right
127:51 - cool so now we can do our try catch
127:59 - okay
128:01 - and catch will have an e
128:05 - and within there we can do
128:08 - um console.log
128:10 - uh couldn't
128:13 - create user and since we have to set up
128:17 - we can also do a toaster toaster error
128:21 - creating user failed boom
128:25 - and for this one you can say e Dot
128:27 - message
128:29 - to get the exact error in the console
128:31 - okay but for the try though
128:34 - uh we're gonna need to say const
128:36 - transaction for TX hash
128:40 - is equal to a weight and how do we get
128:43 - the methods from the program well you
128:46 - can say program dot methods I know we
128:48 - did dot instructions before but that
128:50 - method is the same thing you can do
128:53 - enter here because it knows that when I
128:55 - say
128:56 - Dot create user
129:00 - dot accounts right
129:03 - so basically I'm calling the create user
129:06 - function from our Solana program on the
129:08 - blockchain
129:09 - and I'm passing in the accounts it needs
129:12 - right and it does need a couple accounts
129:14 - it needs a user and an owner how do I
129:15 - know if you go back to here
129:17 - go to your create user it needs two
129:21 - accounts it needs a user and an owner
129:23 - and for the user it takes seeds so we
129:26 - gotta follow that same process here
129:29 - so we can say user oh wait and pass in
129:32 - get user account PK
129:36 - and say wallet Dot Public key
129:39 - right and if there's any issues with
129:41 - this step this is when you would put the
129:42 - question mark but we should be fine
129:44 - and then from there we can say owner
129:46 - oops whoa
129:48 - owner
129:49 - is wallet Dot Public key
129:52 - cool all right so this will
129:54 - automatically handle the seeds parts for
129:56 - us because we already set it up
129:58 - so you don't have to write that long
129:59 - thing here which you can get it can be
130:01 - sometimes
130:02 - and uh yeah you're pretty much done
130:04 - you've basically got the function all
130:06 - you need to do to actually run it and
130:07 - say dot RPC
130:09 - and confirm this transaction Now by
130:11 - saying oh wait connection dot confirm
130:16 - transaction
130:19 - to pass in our TX hash right this will
130:21 - make sure that it went through
130:24 - and we can just do a toast dot success
130:28 - and say uh created user
130:34 - we can do a weight
130:36 - fetch user account right because I want
130:38 - to make sure that after we create a user
130:42 - we're going to fetch that user again
130:43 - right
130:45 - so that it will update so that means if
130:48 - this runs and is successful
130:52 - select wallet this is successful I press
130:55 - create user it will disappear because we
130:57 - fetch the user account that exists now
130:59 - okay so let's see if that works crossing
131:02 - my fingers create user
131:04 - oh yeah we're probably going to see the
131:06 - temp because we have the fake static one
131:09 - right so no user fan
131:12 - that's because we made this it's grayed
131:14 - out because we're not using it
131:16 - and let's pass in create user come
131:21 - and we can go to header Now erase the
131:23 - fake create user
131:25 - uh I don't even think we're using this
131:27 - used router so let's erase that
131:30 - and let's pass in create user
131:33 - boom
131:34 - and it's already
131:36 - set to the button so don't worry about
131:38 - that
131:39 - let's go back
131:40 - but it looks like wallet fingers crossed
131:43 - create user
131:46 - yes okay so if you see this approved
131:49 - transaction this is a good sign which
131:50 - means uh it means that the function you
131:53 - wrote is asking you to sign that
131:55 - transaction and especially if you see
131:57 - the exact amount of soul that it's going
131:58 - to take from you another good sign so
132:01 - let's hit approve let's see which toast
132:03 - uh notification pops up a created user
132:06 - we're good and look at that the button
132:08 - is gone all right if you want even more
132:10 - proof right come back to your Solana
132:13 - playground there should be three of
132:14 - these guys now and Bam there is
132:17 - nice we created a user right that
132:19 - function you wrote earlier works on
132:21 - front end app
132:23 - and it's awesome it's really great so
132:25 - let's go to the next function
132:27 - all right so the very next thing you
132:29 - want to do is we should be able to
132:31 - create a post so if you don't know if
132:34 - you click that plus button up there
132:37 - it's going to ask you for a caption and
132:40 - then image URL
132:43 - right so after that you can hit create
132:45 - and this create button from the modal is
132:48 - what's going to create the post itself
132:50 - right so right now it doesn't do
132:52 - anything because it's currently static
132:54 - so let's take a look at that so if I go
132:57 - to my code which is this one
133:01 - let's go to
133:05 - header
133:07 - well actually no we need to go to the
133:08 - modal go to create post model
133:11 - and again it's that create button it's
133:15 - going to trigger this on create function
133:17 - and in that on create function we have
133:20 - the create post right but this create
133:24 - post
133:25 - again it's getting passed as a prop
133:27 - right which comes from index I believe
133:33 - this is the create post model and it's
133:35 - passing down static create post right
133:37 - see this line 91 what is static create
133:40 - post it's just a function as a
133:42 - placeholder that signifies create posts
133:45 - what we need to do is go back to our
133:48 - global.js
133:50 - and make a function like create user
133:54 - that calls the function on our Solana
133:57 - program right so if you're with me let's
133:59 - do that it's going to be a very similar
134:01 - process say cons create post is equal to
134:04 - use callback
134:06 - and it's going to be asynchronous so
134:09 - we're going to do async
134:10 - and we're going to do the arrow function
134:13 - for it like so
134:15 - and create post what parameters does
134:17 - create posts take remember you saw the
134:19 - modal takes caption and it takes an
134:22 - image and I'm going to say title because
134:24 - that's what we wrote it with but
134:25 - remember title is the same as caption
134:27 - you can name it whatever name you used
134:29 - please use that
134:30 - and what we want to do is if there is no
134:33 - user account uh it should just return
134:36 - because it's not possible
134:37 - all right
134:39 - and
134:40 - if we set up the try catch so let's set
134:42 - up the try catch try catch parentheses e
134:45 - for the error and here we can write
134:49 - um for the error toast
134:52 - dot error
134:54 - uh
134:56 - creating post failed
135:00 - right and then for the console log we
135:02 - can get the oops the E Dot message
135:07 - right so we can see what's wrong on the
135:08 - console if anything goes wrong and I try
135:10 - but in our try we have to set up the
135:13 - post ID
135:16 - and if you remember the user account it
135:19 - stores the last post ID so right now
135:21 - it's set to zero but our front end
135:24 - doesn't know that so we need to
135:26 - essentially get the user accounts last
135:30 - post ID which we should have thanks to
135:32 - our user effect so if you say user count
135:34 - dot last
135:36 - post
135:37 - ID and it should be capital i and we can
135:40 - do a DOT add n one so this will
135:44 - automatically add one to that user
135:46 - account
135:47 - it's a built-in function
135:49 - cool so now we will go from zero to one
135:54 - and then we have to make our transaction
135:56 - hash
135:58 - so set that equal to a weight program
136:01 - dot methods right again it's like let's
136:04 - check instructions but same thing dot
136:06 - methods and then you can do dot create
136:09 - post
136:11 - and it's going to take in the title that
136:14 - we passed in here
136:15 - the image that we passed in there and
136:18 - the post ID
136:20 - which we didn't pass in but we created
136:23 - in the try right and uh that's not the
136:26 - only thing we also need to do the
136:27 - accounts
136:28 - and this should be an object and what
136:30 - accounts does creating a post need if
136:33 - you're not sure check your Solana
136:35 - program so if I go scroll to the top go
136:38 - to create post you'll see that it the
136:41 - account it needs is post a user and
136:44 - owner okay so we got that post user
136:47 - owner got it so we need the post how do
136:51 - we get the post uh PK
136:53 - well thank God right you're gonna say
136:55 - thank you Lance because I can do a get
136:57 - post account
136:58 - and say wallet
137:00 - Dot Public key
137:02 - comma post ID dot two number
137:07 - boom
137:08 - cool
137:09 - right because these new two numbers
137:11 - because post ID is going to be a BN a
137:13 - big number
137:14 - and that will make it into a format you
137:16 - could read for the user same thing we
137:19 - have our nice helper function get user
137:22 - account PK this just takes in a while at
137:24 - the public key
137:25 - foreign
137:27 - a comma there you go nice comma
137:31 - and uh last but not least it needs the
137:33 - owner which is just
137:35 - you don't need to call a helper function
137:37 - you just need wallets Dot Public key I
137:40 - understand the comma
137:42 - all right
137:45 - um with that said we can just do a DOT
137:48 - RPC to make sure it runs
137:50 - and we can have an oh wait here
137:54 - oh wait connection
137:56 - dot confirm transaction TX hash right we
138:00 - want to confirm our transaction went
138:01 - through
138:02 - and if it went through after that await
138:04 - you can do a toast that's success
138:07 - and I say post
138:09 - created
138:10 - exclamation point
138:13 - cool so that is create post
138:17 - um
138:19 - successful we need to update the user
138:23 - account right
138:25 - oh wait fetch user account
138:29 - boom
138:31 - all right because we also need to fetch
138:33 - the post later but we won't worry about
138:35 - that for now
138:37 - um let's see the next thing we need to
138:39 - do is remember how in our Solana code
138:41 - not that this
138:44 - we need to
138:47 - set up our event listeners because
138:49 - there's a couple events that we need to
138:50 - run by and the first one is the uh
138:53 - creating the post
138:55 - yeah so we need to create that event
138:59 - so what I'm going to do
139:02 - is set up a used effect that's gonna run
139:05 - all of the events so between create user
139:09 - and check for user account
139:11 - to the program events and it's just
139:16 - going to be a use effect
139:18 - so since it's a use effect you put an
139:20 - anonymous function inside that first
139:22 - parameter
139:24 - and basically if oops
139:27 - if there is posts right there's no posts
139:33 - then we need to fetch posts all right so
139:36 - these two things don't exist yet posts
139:38 - and fetch post doesn't exist we need to
139:40 - make those and we're going to do just a
139:42 - second but
139:43 - let's work on this
139:46 - actually I'm gonna save this for later
139:48 - right still need to use effect though so
139:50 - let's do a use effect
139:52 - use effect
139:54 - tab
139:55 - yeah it's a different user effect I was
139:57 - thinking of
140:02 - all right so what we need for the
140:03 - program events though is if uh there's
140:06 - no program
140:07 - if there's no program if that's true
140:09 - then return because we can't do anything
140:10 - but if there is we need a new post event
140:17 - so const new post event
140:21 - listener right we gotta listen for that
140:23 - post event and we could do that by
140:25 - saying program right we're accessing the
140:27 - program
140:28 - dot add event listener
140:33 - right
140:34 - we're just going to take two parameters
140:36 - in this case which is new post event
140:38 - that's the event that we're listening
140:40 - for which does exist in our program
140:43 - and uh an asynchronous function
140:46 - which is post event like this
140:50 - and in that is a try catch
140:57 - all right e boom keep doing that array
141:00 - thing here we go
141:01 - and in this catch we can console log uh
141:04 - couldn't
141:07 - fetch a new post account
141:11 - comma post event
141:16 - e
141:17 - for the error
141:19 - but for the try though
141:21 - we can say const post account PK right
141:27 - because we're gonna get the new post
141:28 - that comes with that event post account
141:31 - PK
141:32 - and we'll use our helper function here
141:33 - and just say post event dot owner
141:39 - and the post event.id
141:45 - and then from here we can say const new
141:47 - post right because now that it's created
141:50 - right that public key we need to fetch
141:53 - it so we can fetch it by calling the
141:55 - program that account that post that
141:57 - Fetch and then pass in that post account
142:00 - PK the public key
142:03 - and then this is the part where that
142:05 - last
142:06 - uh post thing is going to make more
142:07 - sense this is where we're going to set
142:09 - posts all right this state doesn't exist
142:12 - yet but what we want to do
142:14 - is make sure that the new posts from
142:17 - this event
142:19 - gets added
142:21 - to that list of the posts that we had
142:24 - before
142:25 - so we can save that by doing it like
142:27 - this
142:29 - okay so let's define posts
142:34 - const
142:38 - comma set posts now it exists is equal
142:42 - to use State and then we could do empty
142:46 - array for this
142:48 - and remember we added events listeners
142:50 - but we need to remove the event
142:51 - listeners at some point so uh after this
142:56 - parentheses right here
142:58 - we can do a return right this is another
143:01 - part of the use effect
143:03 - and this is how you can remove the event
143:06 - listeners that remove event
143:09 - listener new
143:12 - post
143:13 - event listener so yeah so after this all
143:17 - runs the successful or fails we're going
143:19 - to remove that event listener
143:22 - and we only want this to run once
143:25 - and if the program ever changes
143:28 - all right so it's going to run once if
143:31 - the program changes and it's also going
143:33 - to remove that event listener after this
143:35 - is all done
143:37 - cool so that's that but now we need to
143:40 - set up the fetching of the events or the
143:42 - posts
143:44 - [Music]
143:47 - so let's go ahead and do that so check
143:49 - for user account above program events
143:51 - but below check for user account this is
143:54 - where we can write
143:55 - um the const fetched posts and again
144:00 - it's also going to utilize use callback
144:01 - as well
144:03 - which is asynchronous
144:05 - and if how it works is if there's no
144:08 - program well we can't fetch any posts
144:11 - doesn't make any sense
144:12 - okay and then from here we can say cons
144:15 - posts is equal to oh wait uh program dot
144:20 - account dot post dot all so we're
144:23 - basically fetching all the posts that
144:25 - exist from the program
144:27 - right
144:29 - and then from there we can set posts
144:34 - oops set posts
144:37 - and then basically uh map through it so
144:40 - post.map
144:42 - and for every post oops every Post in
144:47 - that map I mean in that array we're
144:49 - gonna get the post dot account because
144:51 - remember it's going to be like this
144:52 - object with a key of account and that
144:55 - key of account has an object with all
144:57 - the information this is how you can just
144:58 - simplify that here
145:01 - instead of nested uh
145:04 - ways of getting it
145:06 - then dependency module had a snap post
145:10 - that's going to be repeating program
145:14 - okay and there is a use effect to run
145:16 - this fetch post so we can say use effect
145:21 - um
145:22 - Arrow function this is what I was trying
145:24 - to write last time if for whatever
145:25 - reason there is no posts then
145:29 - fetch posts
145:31 - yeah so vegetables the posts don't exist
145:33 - that's basically what this means and now
145:36 - this one is going to have a dependency
145:38 - modular posts and fetchbooks this is to
145:41 - ensure that it's always fetching the
145:42 - posts as it comes or if anything changes
145:48 - yep so that looks good
145:52 - now let's go back to our app and see if
145:55 - anything same as errors no okay we can
145:57 - still connect our wallet yep cool so we
146:00 - have a user now let's set up the create
146:03 - post
146:04 - so what I need to do is come down below
146:06 - here
146:07 - and add
146:09 - create
146:11 - post
146:13 - all right and now that I added create
146:15 - post
146:16 - um we can use it so if I go to create
146:19 - post modal
146:21 - I can import
146:24 - my use Global state
146:27 - and I can use my Global State here so I
146:30 - can say const
146:32 - create post equals to use Global State
146:37 - and I'll form it like so just in case I
146:40 - want to get more stuff from here I
146:41 - probably won't
146:43 - and we can delete
146:45 - um or erase this fake create post right
146:47 - here
146:50 - right
146:51 - cool
146:53 - so now I'm just I'm not using the prop
146:55 - that I passed down I'm using the create
146:57 - post from Muse Global state
146:59 - and yeah so now we can find the test if
147:01 - the posts work and troubleshoot from
147:03 - there
147:04 - all right so we did all the setup so
147:07 - let's just test if creating a post will
147:09 - work so let's go ahead and find an image
147:11 - first I don't want any longer I'm just
147:14 - want just like a nice wide one
147:16 - sponsored
147:18 - um Microsoft Edge let's do this one it's
147:20 - a very uh Christmas themed oh no it's
147:22 - unsplash plus no we don't want that
147:26 - are all the wide ones sponsored okay
147:28 - let's do this one all right so let's
147:30 - copy this image
147:32 - let's go to our app
147:35 - let's do it so the caption is going to
147:38 - be
147:39 - um
147:40 - surprise
147:41 - it works okay
147:45 - paste this image URL and let's uh hit
147:47 - create
147:48 - okay first it's telling me to log in
147:50 - that's that's that should be good hey
147:52 - okay Phantom wallets transaction
147:54 - signature but it doesn't tell me how
147:56 - much Solana so that's not a great sign
147:58 - let's hit approve
148:00 - creating a post failed oh no so there's
148:03 - something going on here
148:08 - given publicly does not match the
148:10 - required CIS bar okay that's fine so
148:16 - um that might be because the way we
148:17 - started this
148:18 - connect let's just try one more time
148:22 - so caption
148:23 - oh I don't know what these are but Tokyo
148:25 - and then this image create
148:30 - a post failed Okay cool so that's not
148:33 - necessarily a bad thing because we know
148:34 - that the anchor error oops
148:37 - is the given public key does not match
148:39 - the requireds this far okay that's fine
148:41 - let's take a look
148:46 - okay so what I did was I went back to
148:49 - Salon playground and I just made sure
148:50 - that the spelling was correct I just
148:52 - redeployed it as you can see
148:54 - deployment's successful and now let's
148:57 - hope it works I'm gonna head new post
148:59 - and let's do
149:01 - surprise it works
149:04 - works
149:06 - and I think I spelled surprise wrong
149:07 - there we go and now let's take this
149:10 - image and paste it and hit create
149:14 - okay cool again this is a good sign and
149:17 - we're seeing exactly how much Soul it's
149:18 - gonna take that's also a good sign to
149:20 - prove foreign
149:23 - let's go awesome all right I'm really
149:25 - happy about that
149:28 - um and now if we go here
149:30 - if I fetch the post you should see one
149:33 - if it weren't correctly let's go all
149:35 - right surprise it works and now if I go
149:38 - to users uh fetch all there should be
149:41 - one user with a post ID of one so it
149:44 - incremented that user account got
149:45 - updated as well and uh as you can see
149:51 - we aren't
149:54 - oh yeah we're not doing anything with
149:55 - posts yet so let's see if it's fetching
149:57 - any posts so I'm gonna go back to here
150:01 - okay and where were we global
150:05 - you know what do I need I need
150:09 - fetch post
150:15 - okay
150:16 - if there's no post run fetch posts if
150:19 - there is
150:21 - okay cool and we have posts so what I
150:24 - could do is I can pass in post here
150:28 - all right comma and if I go back to
150:35 - index
150:36 - right you'll notice that it's rendering
150:39 - a static posts so change this back into
150:42 - posts so if there's posts give me
150:46 - post that map and then map through them
150:49 - and it should be the same we don't have
150:50 - to change anything because it's hooked
150:52 - up the similar way but we do need to use
150:55 - is the use Global state so I'll go here
150:57 - const object
151:01 - and here and say posts
151:04 - and set this equal to use Global State
151:08 - parentheses so hit save and let's see if
151:10 - we get any errors
151:12 - let's go we got post boys awesome
151:16 - cool and then we can select wallet uh we
151:18 - can even make another post let's just
151:19 - say
151:20 - rocket ship and the first thing that
151:23 - makes sense
151:25 - uh testing
151:27 - create
151:31 - okay approve
151:33 - post created and boom look at that this
151:37 - is a image from the Airbnb but this is
151:40 - sick we have two posts for this user
151:42 - that's looking nice okay cool
151:45 - so now it's done let's make the lead
151:47 - post okay so let's think about how
151:49 - delete posts works so we have this x
151:51 - button and that's just to indicate X and
151:55 - then delete the post if I hit inspect
151:57 - right here
151:58 - um deleting post blah blah blah with ID
152:00 - of blah blah blah right that's just the
152:02 - static delete function we need to create
152:04 - the real one which is just gonna call
152:09 - the delete post function from here right
152:12 - so that's all good so we can go to vs
152:15 - code
152:16 - and one of the first things that we're
152:17 - going to need to do is add the event
152:20 - listener so this isn't the place where I
152:21 - want to be I want to be in global
152:24 - okay and let's go ahead and add that
152:28 - event listener for a delete post
152:31 - so here
152:32 - I'm just gonna say enter
152:34 - a little comment that says delete
152:37 - post event so we know and then we can
152:40 - get started which is const delete post
152:43 - event listener
152:46 - and that's going to be equal to program
152:49 - dot add event listening right again
152:51 - we're calling our program adding an
152:53 - event listener to it and inside we have
152:56 - to put in what event are we listening
152:58 - for which is the delete post event
153:02 - uh comma here
153:05 - and what else oh yeah we need to find
153:08 - the post that we're going to delete so
153:10 - we can go like this
153:13 - and do an arrow function
153:17 - and in the arrow function pass in the
153:19 - delete event
153:20 - and in the delete event
153:22 - we can do something like this set posts
153:25 - right to
153:28 - posts
153:30 - arrow and then post that filter right
153:33 - we're gonna
153:34 - fill through the posts
153:38 - and what we want to filter out is the
153:41 - posts that we want to delete so
153:44 - it's kind of confusing but we're gonna
153:46 - filter the array of posts and in that
153:49 - filter that we're applying is the post
153:52 - all right
153:53 - that
153:55 - does not
153:57 - equal
153:59 - post owner
154:01 - that equals
154:03 - oh equals delete event dot owner
154:09 - and
154:12 - post dot ID dot EQ for equals delete
154:16 - event dot ID
154:20 - right so basically look through the
154:22 - posts and get the matching post
154:27 - with the correct owner and the correct
154:30 - ID that I'm clicking on so that it
154:31 - deletes the right one so that's
154:33 - essentially all we're doing there
154:36 - and from here we need to add another
154:38 - return and say program Dot
154:42 - uh remove event listener and then you
154:44 - can pass delete post event listener
154:49 - cool
154:50 - so that's that I don't know if it's
154:52 - gonna delete just yet I don't know if
154:54 - double check and test if this works but
154:57 - what I do know is that we need to create
154:58 - that delete function in the first place
155:00 - so let's go ahead scroll all the way
155:02 - down create post and we can go right
155:05 - here
155:08 - you can say const delete
155:11 - post
155:13 - equal to you guessed it use callback
155:16 - which is a sync
155:20 - okay
155:22 - it's asynchronous
155:24 - um it's gonna have an error function
155:27 - and it's going to take an owner and an
155:29 - ID
155:34 - and this can go like this
155:36 - cool
155:37 - so if there is no user account
155:41 - I shouldn't be able to delete anything
155:42 - so that's why we're going to do return
155:45 - and then from there we do our try catch
155:48 - so let me just have catch which is
155:50 - simply just e and then a toast dot error
155:54 - uh failed to delete like something went
155:57 - wrong
155:58 - and we can console log the exact error
156:01 - by saying e Dot message
156:04 - okay and then in the try we're going to
156:06 - make our transaction hash TX hash and
156:09 - set that equal to oh wait program dot
156:13 - methods
156:16 - and the methods that we want is dot
156:19 - delete post
156:22 - all right this is the actual instruction
156:24 - in our program
156:26 - and it's going to take in accounts
156:28 - and if you're not sure what accounts it
156:30 - takes you can go back to our Solana
156:32 - playground and we can actually just look
156:34 - at it so what does delete post take it
156:37 - takes in two accounts post and owner
156:40 - that's it post and owner so we just need
156:43 - the post PK
156:44 - we can get that by saying post oh wait
156:46 - get post account PK passing the owner
156:50 - and the ID from here
156:52 - and guess what for the owner that's just
156:55 - us right so we can just literally pass
156:58 - that
156:59 - so comma here and this is the owner is
157:02 - the same as the owner account which we
157:04 - have access to and our delete post
157:07 - okay and then from there we have to do a
157:09 - DOT RPC so that it runs and then a toast
157:12 - dot success
157:14 - uh
157:15 - to post deleted successfully
157:22 - all right
157:24 - I think that's pretty good run from
157:26 - there oh we need to pass it down so I
157:29 - want to move post just for
157:30 - organization's sake put it right here
157:32 - and then say delete post right here and
157:38 - where does the lead post exist all right
157:40 - let's think about it oh we lost them oh
157:42 - yeah
157:46 - what happened
157:49 - where is my posts
157:55 - okay we somehow lost our posts so let's
157:58 - just double check that I'm gonna go back
158:00 - to my index
158:03 - and let's just erase the static create
158:06 - post
158:07 - and let's just do console.log
158:14 - [Applause]
158:18 - oh yeah there's a static create post
158:19 - thing here let's erase that
158:30 - okay so our post isn't updating for some
158:32 - reason
158:34 - so that means we're not calling it
158:37 - so where's that use effect
158:39 - or fetching posts
158:46 - it's console log fetching posts
158:58 - okay so it's not running fetch posts but
159:03 - if I go back here it should so if I go
159:05 - back to
159:06 - fetch posts
159:08 - this use effect if there's no post and
159:10 - there's not right now based on the
159:12 - console it should run fetch posts but
159:14 - for some reason it's not
159:17 - um what do we have well post isn't
159:19 - nothing it's not false it's a truthy
159:21 - value
159:22 - so I think I know the problem so go to
159:24 - line 33 on my screen
159:25 - take out the empty array because that's
159:28 - technically a truthy value so that
159:30 - condition will never run and if I remove
159:32 - it we're back we're back with me awesome
159:35 - so yeah that's it so again that's like a
159:39 - small thing that would drive you crazy
159:40 - for days but just know that the way we
159:42 - have it set up is if
159:45 - posts is null or falsy fetch the pose
159:51 - until the post or the fetch posts
159:53 - changes right cool
159:56 - so there we go got that
159:59 - um yes so now what I was doing before
160:00 - was we set up delete post and I was
160:03 - testing this out I don't think you need
160:05 - this here nope you don't need that there
160:06 - we have the lead post now and delete
160:09 - post what I wanted to tell you exists at
160:11 - this X and where does that X live I'll
160:14 - tell you it's going to be in feed and in
160:19 - item right
160:21 - there is going to be the post header
160:25 - right because this lives on a header
160:26 - with the ID and in that post header
160:32 - right we'll find what we need so in the
160:33 - post header you'll see there's a static
160:36 - delete post here we don't need that
160:37 - static delete post we need to use our
160:40 - Global state so let's use our Global
160:41 - State you guys should know how to do
160:43 - this now it's const object
160:46 - equals use Global State and what do we
160:49 - want we want delete to post
160:52 - Comma just in case and instead of static
160:55 - delete post
160:56 - we want to regular delete post and we
161:00 - can delete static so let's hit save any
161:02 - errors nope cool so this wallet should
161:06 - be allowed to delete either of these two
161:07 - posts
161:09 - um let's get rid of this ball one
161:11 - because it's not as cool yeah yes okay
161:13 - we see this
161:15 - approved transaction good sign and we're
161:19 - getting our Solana back right this is
161:23 - what it looks like in Seoul but remember
161:24 - we manually calculated it with lamp
161:27 - ports so if we hit approve uh posted the
161:31 - delted successfully I spelled that wrong
161:33 - but as you can see post is deleted right
161:36 - so now
161:38 - let's work on editing the posts let's
161:40 - change the caption so you want to update
161:43 - a post to update a post you click this
161:45 - as you saw before and all you have to do
161:47 - is you know change it to rocket ship hit
161:50 - confirm so again this confirm button is
161:52 - running the update post function
161:55 - right and I'm going to error here
161:56 - because while it's not defined that's
161:57 - fine right we're supposed to fix this
161:59 - right so this edit model is the key
162:03 - right let's work on the functionality
162:06 - before we talk about that so
162:08 - for the functionality we're going to go
162:10 - back to the global
162:11 - and let's set up the uh update post
162:14 - event you know so let's go here say
162:17 - update
162:19 - post event
162:21 - all right so we can say const update
162:24 - post event listener is equal to
162:28 - the program again right because program
162:30 - has a built-in method that adds event
162:33 - listener
162:34 - and the event that we're waiting for we
162:37 - can say is update post event so if you
162:40 - get any errors here it's because it's
162:41 - not the same name that you wrote this is
162:44 - what I wrote so make sure it's the same
162:46 - so from here we can do
162:48 - um the async async
162:51 - Arrow
162:53 - and let's write the update event as the
162:57 - parameter and let's get to work so we
163:00 - want to do is this try catch catch e
163:04 - boom
163:06 - um yeah console log
163:11 - if anything goes wrong we'll get this
163:12 - catch error and you can say couldn't
163:16 - fetch updated post account and we can
163:20 - put the
163:22 - update event that happened and E for the
163:25 - error
163:26 - but for the try
163:28 - all right we can say const we need the
163:30 - post account to update it so let's grab
163:32 - the post account PK by saying post
163:34 - account PK is equal to oh wait
163:36 - get post no not like post account PK
163:42 - yeah this is gonna take two parameters
163:44 - which is the update
163:46 - event.owner
163:49 - and the update event.id
163:53 - all right cool and then from there we
163:55 - can do a const updated
163:57 - posts right because similar to delete we
164:00 - gotta find the post that we want to
164:02 - delete so it's to
164:03 - program.account.post.fetch
164:06 - and say post account PK that we grabbed
164:11 - and then from here we can do set posts
164:15 - to
164:16 - post similar to last time
164:19 - and we want to do a post
164:23 - dot map
164:25 - right so we're setting set post to an
164:27 - array that we're mapping through to
164:30 - create a new one which will be post yeah
164:34 - yeah there's a lot of nested functions
164:35 - in here but that's okay here with me
164:37 - you can do yeah so accept posts will be
164:40 - a new array of posts
164:42 - and it's going to look into that array
164:45 - of posts and map through it
164:47 - and for every post what we want is if
164:52 - that post dot owner dot equals
164:56 - the updated
164:58 - post the owner
165:01 - and
165:03 - the
165:05 - post.id.eq equals the updated post that
165:08 - ID then that's the post that we want we
165:10 - want that post in the new array and
165:12 - that's what we set posts to
165:14 - okay
165:16 - so if that's true then we can return
165:20 - um the updated post
165:23 - and under that we can return the post
165:26 - array as well
165:27 - and yeah that should be good for updated
165:30 - post now for the function itself
165:35 - all right we have to create that so
165:36 - we're gonna go under create user create
165:38 - post let me go in between these guys
165:43 - so say const update post is what guys
165:47 - use callback
165:50 - you got it and again this is
165:52 - asynchronous
165:54 - so set that up
165:57 - and in the async parameters you say
166:00 - owner ID and it takes in title as well
166:04 - and inside that function we have a check
166:07 - right our Edge case which is if there's
166:09 - no user count don't even run this bro
166:11 - don't sweat it
166:12 - we shouldn't update the post if you
166:14 - don't even have a user account
166:16 - uh if you do though let's try catch
166:19 - something
166:21 - all right E I like to set up my catch
166:23 - first and we can just do a toast.air uh
166:27 - failed to update the post
166:30 - and console log the error.message so I
166:34 - know what's up in the console
166:36 - and now we can do this
166:44 - so for the try well the same thing as
166:46 - usual we do a cons TX hash
166:49 - and equals await program dot methods and
166:54 - let's call it the methods that we want
166:55 - which is update post
166:59 - yep and update post takes in title
167:03 - and we can also dot accounts and again
167:06 - this is where you ask yourself what
167:07 - accounts does update post take if you
167:10 - don't remember check Solana playground
167:12 - uh if you know the top of your head I
167:13 - could tell you
167:14 - it's going to be an object of post and
167:18 - how do we get the PK for this
167:21 - wait get post account PK
167:24 - and that takes an owner and ID which we
167:26 - are passing in anyways
167:29 - then it just needs an owner account
167:30 - which we have access to
167:34 - and then a DOT RPC
167:38 - right and this title would be the new
167:39 - title by the way the new caption right
167:42 - same thing
167:44 - and then we can do a toast.success
167:48 - caption
167:50 - updated
167:55 - uh
168:03 - yeah that's pretty much it you know what
168:06 - you know you can also just console log
168:07 - the TX hash if you want to see the
168:09 - successful TX hash but again optional
168:12 - let's update post see if this gave us
168:15 - any errors
168:17 - no cool
168:18 - so now we need to put that here
168:21 - let's put that in between
168:23 - up date posts so now the question is
168:26 - where now that it's in our context where
168:29 - do we update our post so to update our
168:32 - posts
168:33 - I said that is in the
168:37 - item component
168:41 - yep the item
168:43 - there's action buttons here what are
168:45 - action buttons these are action buttons
168:46 - that's that component so click action
168:48 - buttons
168:50 - and Within action buttons you'll see
168:54 - um
168:54 - this font edit that's the edit icon and
168:57 - it runs toggle edit post model true what
169:02 - does that mean well it's this function
169:05 - that I passed down so let's figure out
169:07 - what this means so let's go up a level
169:09 - which is going to be item
169:12 - and we have toggle edit post model which
169:15 - we get
169:16 - as a prop from feed item which means we
169:18 - go up a level to that parent
169:21 - are you following with me up a level
169:23 - from feed item is index
169:26 - and let's see so an edit post model
169:31 - sorry in feed item we're passing in that
169:35 - toggle edit post model so what is that
169:37 - let's figure it out it is this thing
169:41 - right so it's a function that I pass
169:42 - down as a prop so there is still props
169:44 - that I'm passing down not everything is
169:45 - in my Global context and what it does is
169:48 - sets the current edit post ID and it
169:52 - opens the edit model open so basically
169:55 - it's going to click this and it'll open
169:57 - that model to make sure we see it so
170:00 - that means the functionality really just
170:01 - lives here and at a post model
170:06 - all right and we can tell because in the
170:08 - confirm button we got this on edit and
170:11 - the on edit runs static update post we
170:15 - want the real one so how do we get the
170:17 - real one under Solana stuff uh we can
170:19 - say const object equals use Global State
170:24 - and inside this object we can get update
170:28 - post
170:29 - come
170:30 - and what we could do is literally simply
170:33 - just erase static update post put
170:35 - regular update post
170:37 - you should be good to go to edit
170:39 - everything else is hooked up already for
170:40 - you right that's just basic JavaScript
170:43 - um
170:45 - oh and we can't
170:47 - do this can't reassign
170:50 - update post
170:55 - oh okay because we passed them update
170:57 - post somehow we don't need that
171:01 - okay so it should be good select Phantom
171:04 - and Let's cross our fingers and hopes
171:06 - this works edit so let's change our
171:08 - testing caption to uh another day on
171:12 - Mars
171:14 - and let's just add an emoji for fun
171:17 - let's do rocket
171:19 - boom I'm just gonna copy this in case
171:21 - something goes wrong I'll hit confirm
171:23 - and boom wallet is not defined okay
171:26 - right because this was here before
171:30 - now we need a wallet so do we have
171:32 - access to that in global state so this
171:34 - is troubleshooting in real time right do
171:36 - I have access to wallet here
171:40 - okay there's a wallet right here wallet
171:42 - right it's part of our connection
171:45 - so what we could do is actually just
171:46 - pass down wall like this so wallet
171:49 - and just so we keep everything simple
171:52 - and connected we can pass wallet up here
171:55 - it doesn't matter where you put it I
171:56 - just like to have the functions together
171:59 - and now that that's there
172:03 - let's go back to the edit post model
172:05 - we can get wallet
172:09 - so now we know what it is it's not
172:11 - undefined anymore hit save
172:13 - let's try again
172:15 - so edit post uh another day on Mars
172:19 - confirm
172:21 - failed to update post okay so that's
172:24 - something
172:25 - cannot read properties of to buffer
172:30 - okay so that's 218 and let's go 2 to 18
172:35 - in global
172:41 - cannot read properties of two buffer
172:46 - okay so there's something with the get
172:47 - post account PK I'm guessing
172:51 - okay so I'm thinking it's just that I
172:53 - forgot to connect my wallet when we did
172:56 - this so let's refresh let's try again
172:57 - I'm just gonna do select wallet boom
172:59 - same wallet as the post so we should
173:02 - have permission to edit this and uh
173:05 - let's do another day on Mars confirm
173:08 - nice okay look at this so we have the
173:11 - signature request we can hit approve
173:15 - caption updated reading and negative oh
173:19 - that's not good
173:22 - if post ID updatable so successful but
173:25 - we have reading negative
173:30 - one through
173:31 - so
173:33 - there is something wrong with that event
173:39 - oh I know because we didn't remove that
173:41 - event listener
173:45 - that would probably help
173:48 - okay so successful
173:52 - let's try again so we're going to log in
173:53 - we're going to say another day on Mars
173:56 - but instead of another day another uh
173:59 - Tuesday on Mars so let's say confirm
174:04 - approve
174:08 - ah still reading negative
174:11 - if
174:13 - ID dot EQ
174:16 - reading negative
174:18 - but the post goes through which is weird
174:23 - now another Tuesday on Mars
174:26 - so strange let's take a look
174:30 - okay
174:34 - see
174:36 - um
174:38 - update
174:39 - post
174:42 - EQ is negative it should be
174:46 - true this post has to be true
174:49 - I'm just gonna rewrite it save
174:51 - let's just try again so
174:54 - let's refresh
174:57 - connect
174:58 - edit
175:01 - and we'll say
175:03 - back to another day on Mars
175:05 - so confirm like it works but there's
175:07 - just that weird error I don't know
175:09 - what's going on improve okay caption
175:11 - updated no weird error anymore I'm just
175:13 - doing more I just had to rewrite
175:15 - this update events which make sure
175:17 - everything's spelled correctly for
175:19 - getting any errors here and it looks
175:21 - like mine and you can refer to the
175:22 - solution if anything goes wrong so there
175:25 - we go we can edit a function we can
175:28 - delete so I added a function edit a post
175:30 - we can delete a post we can create a
175:32 - post now we need to like a post and
175:34 - unlike post alrighty so you want to be
175:37 - able to like a post that means you click
175:40 - this button and that post is liked right
175:43 - so how can we do that let's set up the
175:46 - functionality and what I'd want to do is
175:49 - set up that like dislike post event
175:51 - right because we have one post event for
175:53 - liking and disliking right or rather
175:56 - words like unliking something
175:58 - okay because you can't like something
175:59 - twice and you can't unlike something
176:01 - twice so that's why it's set up this way
176:03 - so we do like this like uh post event
176:08 - listener and just like before for
176:11 - neatness we can write this comment like
176:14 - slash dislike
176:17 - hot post event so we're gonna need to
176:19 - set this up once for the two functions
176:20 - we make later
176:21 - and we can set this equal to program dot
176:25 - event add event listener
176:27 - and we want to set up like this the
176:29 - first parameter is the event itself
176:31 - which is like
176:33 - this like post event
176:38 - and then the second parameter is an
176:41 - arrow function
176:43 - with a parameter is the like
176:47 - this this like event itself
176:52 - and inside is the functionality so
176:55 - inside what we want to do with this
176:56 - event listener is set posts right but uh
177:01 - we want to get posts first look look
177:04 - into that array of posts that we have
177:06 - and essentially
177:10 - oops
177:12 - hit enter here essentially we want to
177:15 - map through it so say post oops
177:18 - posts
177:20 - dot map the current array of set posts
177:24 - and for every post inside of that array
177:30 - now we want to this should actually be
177:34 - double parentheses
177:37 - for every Post in that array we want to
177:40 - check
177:42 - if it matches so if
177:44 - enter post dot owner dot equals so make
177:49 - sure I spell everything right this time
177:50 - like this like event the owner right if
177:54 - the one who owns the post
177:57 - um
177:58 - matches
178:00 - and the post dot ID dot EQ
178:05 - is the like dislike event that ID if
178:08 - that matches
178:09 - right then we can return
178:12 - turn
178:14 - the the all of those posts right this is
178:18 - called a spread operator so it's gonna
178:20 - get each individual post turn into an
178:23 - object and get the likes
178:26 - and the like
178:28 - dislike event that looks right this is
178:30 - gonna get that posts data and modify the
178:36 - likes based on the event
178:38 - okay cool but now the actual
178:40 - functionality of calling it is what we
178:43 - need to do next um there is a couple
178:45 - more things we can also do a return post
178:49 - here
178:51 - okay cool and notice how this one
178:53 - doesn't have a check
178:56 - so now let's just call it that like
178:58 - function so hopefully you wrote that
178:59 - right scroll down to here
179:02 - um oh I did forget a couple things whole
179:04 - point the dependency module
179:08 - one thing that I forgot was this
179:10 - dependency module and this is for
179:12 - program like that's the whole point of
179:14 - the used callback there's a second
179:15 - parameter I also forgot that here I
179:18 - believe
179:19 - uh this should be comma the user account
179:22 - based on the user account
179:26 - and I think that's the same thing for
179:29 - delete post
179:34 - okay cool
179:35 - [Music]
179:37 - all right so now we can go into a like
179:39 - post
179:41 - so say const like post is equal to
179:47 - use callback
179:50 - and from here we're going to do async so
179:52 - just like before set up an async arrow
179:56 - function
179:57 - like so
179:59 - and we are going to take in three
180:01 - parameters the owner the ID and what we
180:04 - call the Liker which is essentially the
180:06 - wallet that's connected
180:08 - um what else
180:09 - now now that we're here we have that
180:12 - edge case that we check which is what
180:14 - guys if there's no user account so you
180:17 - can probably guess what the dependency
180:18 - module is going to be for this so return
180:21 - and we do our usual try and catch so
180:25 - I'll set up the catch first you don't
180:26 - have to do this first but I just do
180:28 - toast dot error
180:31 - um failed to like post
180:35 - and
180:36 - console.log E Dot message so that I can
180:39 - see what's wrong
180:40 - and in the try we're gonna do the TX
180:43 - hashing
180:44 - it's equal to a weight program dot
180:47 - methods
180:48 - and what methods do you want to call you
180:50 - want to call Dot like post
180:53 - and it doesn't take any parameters there
180:55 - but it does need all the accounts that's
180:57 - what matters on this one
181:00 - and on the accounts we're going to need
181:02 - the like which is why we made all those
181:05 - error functions which is like oh wait
181:08 - get like account PK
181:11 - owner ID and Liker nice
181:15 - and we need the post
181:17 - which is going to have a way to get post
181:20 - account PK
181:21 - owner ID
181:23 - and we're also going to need the user
181:26 - which is a way to get
181:28 - user account PK which is going to have
181:31 - wallets and I did question mark public
181:33 - key again question mark of it
181:36 - optional uh I just want to ensure that
181:39 - this doesn't get become Dot Public key
181:41 - of undefined right
181:43 - and don't forget the comments
181:45 - cool and the owner is also wallet
181:50 - underscore I mean underscore question
181:52 - mark Dot Public key to ensure that it's
181:54 - not undefined at all
181:56 - and we can do a RPC right here
182:01 - cool and then if it's successful do a
182:03 - toast.uccess
182:04 - you liked a post
182:07 - because you did it you liked it
182:09 - and here comma
182:13 - and user account
182:16 - okay cool now we can add leg posts here
182:19 - and if all goes well we should be able
182:21 - to like post going back to this where
182:24 - can I add that like post button guys
182:27 - come on come on last stretch stay with
182:29 - me shake it off all right like like post
182:31 - is this button
182:33 - and that res resides where and action
182:38 - buttons exactly good job David
182:40 - all right cool
182:42 - so now we have the static leg post as
182:45 - you can see is running right here we
182:47 - don't need that we can just go in here
182:51 - don't need tip on that we need const
182:53 - equals use Global State and what do we
182:58 - want from here we want like post so
183:02 - erase this get this static like post
183:04 - data here and add the like post
183:09 - so let's save that any errors nope and
183:12 - now testing to see if it works if I
183:15 - click this
183:17 - wallet is not defined of course so we
183:21 - also need wallet so let's add a wallet
183:23 - in there so now we have wallet
183:26 - no excuses now code let's hit this
183:30 - oh okay so we're able to like the post
183:34 - uh we're getting a signature request but
183:36 - remember that when you see unable to
183:37 - simulate this it means there's might be
183:40 - something that's going to be wrong let's
183:42 - hit approve
183:43 - failed to like post and let's see why
183:45 - this might be like last time
183:48 - Mitch
183:50 - program ID was not as expected okay so
183:55 - that's that means there's something
183:56 - wrong in the way we wrote the like post
184:01 - so let's go test it out
184:04 - okay so I figured out what was wrong on
184:06 - instead
184:08 - so I figured out what was wrong I told
184:11 - you before that we need to export the
184:13 - idea because this is the way we wrote it
184:16 - right there was some discrepancies
184:18 - that's why we kept finding the program
184:19 - idea didn't match so just Ctrl a the new
184:22 - idea that you just downloaded and
184:24 - replace the current one with that new
184:27 - one and it should work now right as you
184:29 - can see this has one likes now right
184:32 - because it exists so let's just make a
184:35 - new post to change that so let's do
184:37 - Tokyo and I don't know what's going to
184:39 - come up next say create
184:42 - let's hit approve
184:45 - post created boom so there's Tokyo and
184:48 - now if I click like hey finally oh okay
184:52 - so we can see the soul right here to the
184:54 - proof and now it says one like instead
184:57 - of the randomly generated one
184:58 - and that that is done through
185:00 - conditional rendering as well so
185:03 - cool so we got some fire Instagram posts
185:06 - with one like now let's get the dislike
185:08 - button working which is pretty simple
185:11 - last but not least let's go down to here
185:14 - and let's create it okay and while I'm
185:16 - here there was another thing that I
185:18 - realized that we forgot to do and that
185:20 - was use this remove this event listener
185:24 - right here so let's go ahead and do that
185:25 - so we want to basically copy this say
185:28 - program dot remove event listener
185:31 - like this like post that's another thing
185:35 - we forgot and now you can see this isn't
185:37 - grayed out anymore so double check yours
185:39 - if this is not grayed out so
185:42 - here we are the final step boys and
185:45 - girls this is the cons this like post
185:50 - function so just say use callback and
185:52 - the best part is we don't need to make
185:54 - an event listener because we already did
185:56 - with the like dislike post event
185:58 - listener so finally let's just do an
186:00 - async anonymous function right here and
186:04 - it will take in an owner ID and a
186:07 - disliker
186:09 - okay
186:10 - cool well you don't know how long it
186:13 - actually took me to fix that ideal error
186:15 - and that's all you had to do but I'm
186:16 - glad it's working
186:18 - um there's the if check here if user
186:20 - account then you can do return
186:23 - okay and from here
186:25 - let's do a try
186:27 - and say cons TX hash
186:30 - and set that equal to await program
186:34 - dot methods
186:36 - okay so then from here oh let's call the
186:40 - function and say dot this like post
186:44 - and Dot accounts
186:48 - which takes an object of accounts and if
186:50 - you don't know what accounts dislike
186:51 - post instruction takes just look at your
186:54 - playground to remember but I can tell
186:56 - you it takes a like which we can do with
186:59 - weight get like account PK owner ID and
187:04 - this Liker
187:06 - okay and then from there you can do Post
187:08 - and do oh wait get post account PK
187:12 - owner ID
187:15 - um for getting the
187:17 - comma
187:18 - and the owner
187:21 - which is going to be a wallet Dot Public
187:24 - key and again the question mark is
187:25 - optional if this is giving you any
187:28 - errors saying like it's an owner that
187:30 - public key undefined you would just add
187:31 - a question mark here so again from there
187:35 - um
187:38 - yep so underneath that we can do a DOT
187:41 - RPC
187:42 - and underneath the RPC we could do tell
187:44 - us that success
187:46 - you
187:49 - unliked I'll post
187:51 - okay cool after that try we gotta catch
187:55 - just in case anything goes wrong I do a
187:58 - toaster error here and say failed to
188:01 - unlike post
188:03 - and console.log the error.message
188:08 - cool and then comma here dependency
188:10 - module user account
188:14 - help user account
188:16 - oh it didn't like the enter so let's
188:19 - just do it like this
188:21 - no Oh wrong spot
188:24 - let's actually go here there you go
188:27 - so save that let's get this like Post in
188:30 - here dislike post
188:32 - and where do we want it
188:34 - we want it in the action buttons right
188:36 - here so we can go to
188:40 - action buttons
188:43 - and within the action component uh
188:44 - buttons let's get
188:46 - dislike post
188:50 - and
188:51 - let's get rid of the static one get that
188:54 - out of there
188:56 - instead of static dislike post on line
188:58 - 25 for me we just need this leg post and
189:02 - it's already passing in the values that
189:04 - we want
189:05 - all right set up that way
189:07 - all right this was just focused on Salon
189:08 - of code
189:09 - so now let's unlike this Tokyo One
189:14 - boom look at that we're getting refunded
189:16 - Soul let's go and boom it's gonna go
189:19 - back to random likes or zero likes right
189:21 - that's just for aesthetic reasons but
189:23 - this truthfully has zero likes now right
189:25 - so let's do a cool thing just for fun
189:28 - let's like it again
189:30 - boom let's change our wallets so let's
189:33 - disconnect let's go to wallet number
189:35 - five which I know is already registered
189:39 - and look at that so wallet number five
189:41 - he's not allowed to delete this post
189:44 - because he didn't make it right there's
189:47 - no ownership of it but he can like the
189:49 - post so let's approve boom two likes
189:52 - alright let's go so that's awesome
189:55 - anybody can log on and like your posts
189:57 - or dislike your posts and people can't
189:59 - delete your posts and that's it guys
190:01 - we're done right that's it so
190:03 - congratulations you finished the
190:06 - Instagram clone you learned about
190:08 - seahorse and drop a comment below saying
190:11 - that seahorse is awesome and if you did
190:13 - let us know if you want us to do a full
190:16 - stack build right from the front end all
190:19 - the way to the back end and just be on
190:21 - the lookout for more Solana videos see
190:22 - you guys in the next video peace

Cleaned transcript:

in this video we're going to be making Instagram web 3.0 dap on the Solana blockchain I'll be showing you guys how to create your very first Solana smart contract using a program called seahorse which lets you write Solana programs using python which is insane so if you want to learn how to make your very first Solano project using python I'll show you everything you need to know including how to use your Phantom wallet and connect it to your dap as well as connect to the blockchain using an RPC node called quick node you'll be using Soul PG to build deploy and test your program and without further Ado let's just get started okay so before I show you guys how to download all the starter files let's do a quick demo of the app as you can see this is Instagram and the difference is we can connect our Phantom wallet so go ahead and connect your Phantom wall if you already know how to do so right but I'll show you guys down the line on how to do it the next thing about this is that we can upload images with captions so what we have to do is get an image so I have this one it says a man and a woman standing in a room but this this doesn't seem like a woman but I don't want to assume so let's go ahead and copy image address and create this plus icon and you can create a post so it looks like they're working or something so let's put the grind right as you can see and paste that image URL it takes any image URL that you approve with next.js so let's hit create it's only gonna cost less than one Soul so let's hit approve and then boom created post and it's going to take a second but it should pop up somewhere and if we take a look ah there it is see 79 likes and the grind right those likes are random it's not going to generate until we actually put a real like right just for show but if I press that heart icon you can see it's gonna take us some soul to do this action and boom we have one like right we can also unlike this With This Heart icon and we receive soul back right boom and of course there's also an edit post so I'm gonna say nice all right no changes impacting the owner update post successfully and you should be able to see this post with uh nice now right and from there of course you can delete the post so all the functionality of Instagram um the basic functionality is there so there post the deleted successfully and that's it that's the demo so now let's show you how to get all right so how do you start downloading the files to make it easier guys we have our new CLI tool that gets all the starter files that you need to get started so what I'm going to do is go ahead and open up your terminal any way you want and just double check that you're in the folder that you want to put these projects on all right so from there all you have to write is npx cleverprogrammer at latest and you should get the latest version of our CLI tool once you hit enter just put in your email address all right I'm gonna put Lance Toledo gmail.com your name Lance and then you'll see all of the projects we have available to you so there's a lot of projects nowadays and you want to make sure you click Solana Instagram because that's what we're doing right cool so it's going to take a couple minutes to get all the files you need but once it's done it should be good to go all right so now that you've finished initializing your repo let's go ahead and get signed up for quick note so let's go ahead and go here all right so go ahead and click that link in description for quick note if the CLI tool didn't bring you here boom so once you're here go ahead and create your account because you can set up your endpoint for free with quick node uh if you don't know what an endpoint is it lets you have a direct connection from your app to the blockchain right if you remember the picture there's a block this will give us an endpoint to connect to it so go ahead create a free account and get started I already have an account so we're going to use this one so once you've confirmed your email you made an account you'll see uh something that says create endpoint and what I could do is let's go ahead and archive this I understand just copy that paste it boom okay I understand the consequences archive endpoint boom so it's just something like this once you confirm the email you should see something like this go ahead and create an endpoint and click on your network as you can see quick note supports multiple different chains ethereum Bitcoin we're going to be using Solana of course let's click that this is another key thing right the main net is where we use real money Real Solana right there's the test net but what we're going to be using is the devnet so let's go ahead and click devnet continue and there's a bunch of extra tools for nft fetching and cross minting but we're not doing anything like that so let's create just create an endpoint awesome so that's it guys you successfully created an endpoint all you have to do is hit copy right here click copy and let's go back to our app and if you go to utils constant.js go ahead and put our PC endpoint and paste what you copied in quotes do that right we're good to go with quick note next step if you haven't already let's sign up for our Phantom wallet if you guys didn't know this is Phantom all and this is where you're gonna hold your Solana your any nfts you have with Solana right so go ahead and create a wallet if you don't already just gonna put in my password and show you all right this is what it should look like and you can see I have 4.9 Soul how can you get it all you have to do is go to your browser and type in Solana uh not Salon sorry Phantom extension extension boom and if you go here you'll see Chrome and just click add to Chrome and once you get add to Chrome it should add it right here click on the cute little ghost and it should ask you to create a wallet and remember your mnemonic and don't share that with anybody else I have a test wallet so I don't really care but there you go all right so now that we signed up for everything we have everything we need let's go ahead and start our app let's do a yarn Dev and then from here we could go to localhost bam okay cool all right so as you can see uh you saw what it looks like in the demo but this is what we're starting with right nothing actually works if I press this like button right you get an error if I press this x button nothing happens right you just see a nice console log that says uh deleting post right even though there's no post all right connect wallet here all right we signed up for Phantom but we don't have that yet right this model to create a post hey hey huh crate doesn't create anything right so the first thing we need to do right is let's figure out how to get our Phantom wallet connection going so let's go ahead and do that all right so let's go ahead and switch to our code bring this down for a second and let's go to our app so I'm going to pages and let's go to underscore app.js you should see something like this right so here are our starter files we're already importing the hooks we're going to use uh this is for later right and now let's get our Imports in so let's get our wallet Imports so this is our wallet Imports awesome so for our wallet Imports we need to import the connection provider let's go ahead and do that so we'll do like this connection provider and we're also going to get a wallet provider right all of this comes from a Solana package so this should already be in your app if you use npx Club programmer if not make sure you do a yarn add Solana and this is wallet adapter react okay so this is it these are our two providers another thing that we're gonna need is the wallet modal provider so when I click on the Phantom button that nice model asking which wallet that I want to click uh pops up right Solana gives that to us if we say wallet uh model provider from I believe this is from at Solana as well at Solano wallet adapter react uh UI there you go cool so next let's get all the wallets that we want right so we just want Phantom wallet adapter because that's what we signed up for cool and if you have any other wallets that you prefer right you can add them here uh but other than that this is what we want to use so cool there's something weird going on all right uh this has to be from something this has to be from at Solana wallet adapter wallets right this is me pulling from that Library so I lost all the errors um is there anything else we need at the moment yes there's one more thing uh Solana also gives us the styling which is pretty nice of them so if you do import uh what was it called again I think it was at Solana it's not one of these it's like react uy slash um styles dot CSS something like that Solana adapt adapter react Dash UI styles.css so this will give us the styling of the button itself you'll see cool now this is a use state that we need there is an SSR error with next this lets us fix it so make sure you have that we'll use it in a second but what we need to do is let's take our providers and put it into our app this component represents our entire app so if I go in here press enter let's do the connection provider first connection provider uh this can well this can be closed not self closing there you go this is what I want so let's take our app and put it within there press tab to indent it and connection provider is going to take a couple things um see yes so it's going to take the RPC endpoint is equal to and RPC endpoint right this is the quick note endpoint that we got earlier so since we put it in this and we're exporting it it will show up right here okay next there's a config that we need to add to it this is where we have an object with an object and we just say commit oops commitment yep is semicol uh colon confirmed it's like our preflight checks so config boom and the next thing is the wallet provider so let's do the same thing wallet provider not the modal yet put our component in there boom press tab uh okay so what does our wallet provider need right we need to provide our provider with wallet store so let's go ahead and do that so let's just say wallets is yep equal to wallets right so this let me ask you guys a question does wallets exist right this would give us wallets is undefined right so how do we make how do we give the provider wallets we need to create that object so we can do that around here underneath this fuse effect we can say const wallets so now this exists but we have to Define it now is equal to use memo right because we only want this to run once and it takes in an anonymous function and in that we'll take an array comma let's put this right here and inside you can put all the wallets so you say new Phantom wallet adapter right that's the whole reason we have this here this will initialize a new instance of the phantomon and any wallet that you add after this you do the same thing okay but again we like using Phantom here so we're gonna keep going with that um let's see anything else is that a semicolon here for sanity yeah Okay cool so now wallets exists um another thing I would like is you there's an auto connect feature which will if you have if you're logged into your Phantom wallet you have this it'll auto connect it and recognize the wall right away uh cool and then underneath that let's get the modal now boom okay and let's add the component indent it so it looks like this right it's easy to tell who the parent is the child the parent child boom so what's with the model uh wallet model provider doesn't take any children so what we're going to do here is add some conditional rendering right I only want this component to load if mounted is true right so remember we have this to fix the SSR error to ensure that if I say if mountain is true put parentheses here then load the component awesome so let's hit save so that is the app.js so now let's move over to actually putting the wallet button alrighty so next steps right we're in the app.js right if you see this component thing in line 42 for me that is our app right so this is technically your index.js right so what you see here everything you see here is the index right for example if you look at this this is all living with an index so if I were to comment something out let's do comment out uh stories our stories component if I do that save boom we lost the stories right everything lives here right so what we need to identify now is where is this button all right let me do it again where is this wallet button right guys so if you saw that this was stories right where do you think this wallet button here right if you said it should be something like a header then you are correct right so this is stories right there's something called layout right all of this an index is living within something called layout so let's go Ctrl B and let's click on layout so if I open up this components folder you'll see a bunch of different components that makes sense what we want to focus on is this right here layout right so let's click on that and Bam look what look what we see in layout right we see the wrapper and an app container with all the children within Leia right which is why all this stuff is considered children of Leia that's what this is and if I were to comment out header all right let's hit save look what happens we lost the button so that's how we can identify that the header component is where the wallet lives so now move a little bit faster now let's go to the header.js BAM and look line 54 Phantom connect button goes here so how do we get the Phantom connect button guys well the very first thing to do is let's connect it right let's go ahead and connect our wallet by importing the wallet multi button which I did for you right here so you just say import wallet multibutton cool so uh we got the wallet multiblend let's go ahead and take it all right well you can just get rid of this guy and just say oops and just say wallet multibutton self close and save so once we do that look at that and remember autoconnect it's already connected with me so let's go ahead and disconnect right except refresh and cool so you're going to notice if I click select wallet click Phantom bam that's it our user is connected with their wallet look how easy and simple that is so if you wanted to know how to connect your Solana wallet to your app that's how you do it so now that's done uh we can go ahead and x that out for now and let's actually work on the smart contract so you're gonna go to Beta Soul PG dot IO cool all right so we're here in the browser now we are on beta.solpg.io if you didn't know this is a browser where you guys can make and build and deploy your very own Solana smart contracts and if you watch any of my previous videos this might look a little bit familiar to you what's not familiar to you though is look at the code it looks slightly different from what you're used to right um if you didn't know anchor is built on Rust rust is another lowlevel programming language which is often hard for people to get started so that's why seahorse came about so if I look create here you're going to see three Frameworks which is native rust which is Anchor a framework of rust and then we got sea horse right here python right so for my python lovers or for my beginners this might be an easy way for you to get started uh making Salon of smart contracts right python is a lot easier to read than rust it's more beginner friendly uh one thing to note it's also still in early development stages so there are some limitations right you're going to see this later on with strings so you know enough of my Exposition if you already know this feel free to skip a little bit ahead but I'm going to get started talking about uh how this works so far if you've never seen this before so if you've never seen this before feel free to skip ahead and I'll get started but for now for you guys for you beginners out there this is new right so you're gonna notice the first thing right here this is the program ID think of this as the address of where your smart contract lives on the blockchain right I can even draw it for you right here so let's say uh this little square do you guys see that this red square this is the blockchain right and you can put stuff in the blockchain all right so let's draw another rectangle so let's say I make a smart contract which is this rectangle right this this triangle right here right can live on the blockchain it can go right here so let's let's illustrate that right so you want to bring that triangle and it can live right here when you deploy it like so all right you're going to see something called deploy well it says upgrade but after you deploy you'll live on a blockchain and then we can call upon it right so that's the basics of that the very next thing that you're gonna draw your eyes to is something called accounts what the hell is accounts Lane so let me let me get a bigger picture for you guys and again if you already know everything about this you should be fine so let's go and talk about account so like I said before rectangle is the blockchain you can also have a smart contract right and this can live on the blockchain as well right but then there's something called accounts right uh the closest thing for you guys from JavaScript or maybe even python is that you can think of accounts as objects right so notice this class User it's kind of like in JavaScript like what is a class object for create a template for creating objects right so what do you think a user class is like if I ask you guys what is a user right what are some properties of a user right it might be uh his username right and maybe his ID right or maybe how many posts post count right we could use any one of these right so let's see what we used to make that user object right it only has an owner and the last post ID okay so this one doesn't have a username all right so no username it has a a owner right which is essentially its ID right owner and what else last post ID is that correct yes okay so every user is going to have the owner right an ID registered with it and the ID of its last post right so if I were to make just create the users let's say uh every circle is a user so this is a user all right who's the owner it's me I'm lent and what was my last post idea if I just created this guys three two one you said zero nice job okay so if you said zero bam we're in there right so this is a user right technically this is a user account right that's what we can call it so when you when my smart contract right will have a function right here the squiggle is a function right this function creates user accounts right so let's run this function on the chain and when that happens right we will get a user account that lives on the blockchain right and how many user accounts can I create as much as you can right uh the blockchain is not infinite right but it has a lot of space but every time you take up space on the blockchain right let's say I need another user you have to pay for that space it's taking up right so this is why every time you put something on chain like when I deploy this comes my contract or when I add or create this user account it's gonna cost me some soul right it's gonna pay you gotta pay for the space that you're taking up and then let's say I want to delete a user right once that user is deleted right it's it can just even press delete it's gone I'll get my soul refunded to me because I'm not using that space it's kind of like rent right you pay for the rent the space that you take up so that's what that's the concept that I want you guys to understand okay so that was uh programs right that was uh what's called accounts right and by programs I also mean smart contract all right cool so our program is going to create accounts right so other accounts that we need we have users what are accounts do we need for Instagram all right so try to guess it three two one posts right that's the whole point of Instagram right let's make post so you know without looking at my contract what is a post right how would you describe a post are we the user what is a post well posts can have a what an ID yes I know how about what else guys a post can have a caption and I believe I called it title but it can have a caption right what else does it have an image right what kind of if you if your Instagram post doesn't have image it's basically a tweet yeah so uh let's see I do not want to drop an image let's see what's up so we have post we have owner right so we need to know who owns the post that's what we were missing we need who owns the post we need the ID the caption the image and there was one thing we missed it was the likes right so there we go so there's also likes okay so this is an overview of what we're doing in the Solana project uh if you already understood it feel free to skip ahead and just watch the build but hopefully this helps you understand a couple Concepts and I'll be explaining them again as we go but remember our smart contract needs to be able to create a post right that will live in here this is a post account cool so again just to prove it to you this is a smart contract that I use here are our instructions our functions if I do a fetch all which is super cool with Sonic playground by the way I do fetch all this is an array of objects and every object is that Circle that I drew that user account right so this is the owner his last post ID was zero so how many posts do you have zero how about this guy last post I do one he has one post right so that's users and then if I look at posts in fact y'all you can see all the posts so I have one two three posts right you can see the title is the caption the image stores a link and then the cool part is in our vs code in our project we just have to fetch these two right so think of it like a database right there's way a lot more uses for the Solano blockchain but one easy way for new beginners to get started is think of it as a decentralized database all right so that's my little Spiel on uh Solana and this time we're going to be writing it in Python so let's get started alright so let's get started with building this smart contract from scratch so if you never use a Solano playground before go ahead and come to this tab right here you're gonna click this plus icon because you're gonna make your own project so let's give this project a new name let's call it uh IG Dash seahorse right and then you're gonna click sea horse with python in parentheses of course so click that hit create and Bam right Salon playground gives you a brand new project to get started and before we move on notice that it says Fizz Buzz right this is how to make an onchain persistent Fizz buzz but what we're going to do is we're going to build on top of it right so let's take a look at this first you can see that this is how they're importing sea horse dot Prelude import Star which basically just means uh import everything from sea horse dot Prelude all right from there we're going to move over to line 10. if you see this the clarity this is your program's public key you can think of it as the address or the ID of your whole program and with Solana smart contract also means program so you with me cool and then we have to Define our accounts so here it's defining what fizzbuzz is right but what do we want to create we want to create and I'll make this in comments we want uh user account oh wait I think it's actually hashtags now right we want user accounts user account we want a post account and what else do we need for his Instagram guys we need a likes account all right likes account or just like right so we have to Define which each of these are so we can use this as a template so that's why it's nice that they gave this to us so when making an account right you can say class and then the name of the account so which one is this it's user all right we're with you with me cool another thing that you have to do is put parentheses that it is an account all right so from there we can do a colon and here this is where you put the property so remember earlier if you watch that part the zeit board where I'm drawing what the properties of a user are what are the properties of a user and we said we want something called owner and what you saw here where did we see the word bull what does bull mean it means true or false right so this colon after this colon gets to tell our program what type it expects right this is kind of standard with rust and with Solana so uh owner is going to be a public key so you would write Pub Key like so okay so that means when I get the owner property I'm going to expect a public key and a public key is a set of letters and numbers very similar to this because this is our programs publicly so there's a lot of if you're new just try to like get unfamiliar with the terms and how we're using it and then you can dive deep into all what it all means so what else so what else we need is last post ID right because we want to keep track of how many posts does that user have when I was fetching the post earlier or the user account you saw that some posts had zero and some IDs had one because at one post so um what is the type right usually you'd probably think number right but for this you're actually going to say U 64 right which means unsigned integer and 64 bytes right so don't worry about that but just know that this is a number and this is how big the number it gets all right we can expect that that's a simple way of looking at it and that's it that's the user account all right so let's try to make a an account for post all right so pause the video Try it yourself if you think you can do it if you're not too sure you need a little bit more help do it along with me so again you say class and then the name of the account that you want and then Define that it is an account followed by this colon right here from there now we can write the properties right what are some properties of the post three two one you said owner okay yeah you definitely said owner right you didn't say anything else right because you are a genius so uh what type does the owner expect I would say Pub key right so from there what else it's gonna take an ID all right it's gonna take an ID which can also say is u64. right from there we can say likes right every post has likes and that can also be used 64. okay cool and then from there uh let's see what else there is the image of course and the image is very unique because with an image I don't expect a number I don't expect a public key what do you usually use uh when it's image yes a URL you got it but uh more specifically it's a string right so from there we can say image and title uh we could write caption right or we keep a title right you can name us whatever you want but I'll write title because that's how it's set up in the starter files so I'll say title and write Str for string okay so that's our post account now we need a liked account right so for the like account again pause the video or skip ahead if you know how to do this try to do it without me now ready let's go let's erase so you write class like I say account say account colon and then properties of a like which is just going to be the post owner which is going to be Pub Key all right post underscore ID right what's the uh the post ID of the one you're liking right so notice how this like account isn't directly tied to this post it is ref it's going to reference it so from there we can say the Liker is Pub Key cool and with that we got all the accounts up and ready to go so what we can do is we can erase fizzbuzz now all right so the next thing that we need to do is make our instructions so if you don't know what instruction is think about the concept of a function in JavaScript right if I had a function called init for Fizz buzz what do you think it does right it initializes the fizzbuzz program right so fizzbuzz.net even if you don't know exactly what that means it makes sense right it's initializing fizzbuzz right how about something easier right let's say we had a function named do fizzbuzz right what do you think that function does it's literally in the name it's gonna do Fizz but it runs the Fizz Buzz logic as you can see here so we need we need to start thinking about as developers right is what instructions do I need what instructions do I need for my app all right so that's why I opened up localhost in between there as you can see let's think about it right what are the features here right I should be able to create a post right this is how we're creating a post I should be able to click this and edit a post I should be able to like a post on like a post I should be able to click this and delete a post there's a bunch of different features and notice how all of those functionality lives on this Solana program instead of our front end like you usually do when you're making a stack a full stack app right this is so that we can practice getting used to the salon system because the way we're using it it's like a crud app this is a decentralized database right but there's more than uh than just that that you could do with Solana so let's go ahead and think about what instructions we need there's one thing I know is that we need to create a user right a user similar to the owner in this case right we need to Define who the owner is and store that information otherwise if you know ch3k made this post right I'm logged in should I be able to add to rafikaze's post should I be able to delete his own post no I shouldn't have permission to that so that's why we need to create a user right we also need to create a post right we also need to do what guys I want to be able to edit a post right edit post okay sure can we delete all right we should be able to delete post okay so edit it's like update if you think of crud it's update and lastly this is a feature it could be like post all right so we're going to use the accounts we set up and integrate them with our instructions to do what we need them to do okay cool so let's get started with the first instruction so with the first instruction how do we start writing it well the first thing that you're going to need to do is literally write at instruction right that's how you define this is a function or this is my instruction I mean cool underneath then we can say def um the function name right so what's the function's name in this case we want to create a user right so just like any function we have to put parentheses here the difference is instead of doing something like um this right like in JavaScript we will end it off with a column like so okay one thing to note is that a wallet can only initialize One account right so this wallet ch3k can't make 10 accounts right one wallet One account okay so after this colon we can now write the logic of the function right so one of the first things that you want to do is write the logic so here we can say user underscore account all right so this is just oh I think this is like a variable that I'm making or this doesn't exist anywhere else as you can see cool and uh before we even do that let's make our parameters all right what compound parameters will this take in it's going to take in a user colon and then we're going to give it a empty user property right and the owner is just going to be this signer okay so notice how we're still defining the type let's just type empty and it's taking in user and user is this guy right we're taking an empty user account right and we're going to take the owner's signature and fill that in so how can we do that well if this is a variable and this is a variable how can we use that so user account is equal to user dot init right I don't expect it to know that but this is an initialized function you saw it here with fizzbuzz Dot in it and what we want to initialize is the payer who is the owner and where are we getting owner from here so we need to Define okay so if we want to initialize account right we want to take up space on the blockchain we need to pay like I mentioned before and we have to say who's paying well who's ever owns the wallet will pay for it that's what I'm saying here that's what they're also doing here all right the next thing that you're going to notice is we need to um Define what the seeds are right the seeds helps us get that user address so let's just quickly go back to the diagram and you know seeds are a lot more complicated especially and intimidating especially for just starting out but let's go back to our blockchain example so this square is our blockchain uh this red rectangle is our smart contract right and this blue circle is our user account right cool does that make sense to everybody so let's say I want to create a new user account right using a function on my Smart contract so what we're going to do is this is the let's say this is the front end my front end oops my front end is going to call the blockchain with the endpoint RPC endpoint and it's going to get the program and it's going to run this function right here and that function is going to create a user account and that user account is also going to have its own unique public key right which is just a set of numbers and letters kind of like this ch3k right so let's say ch3k is the or just just c a d f s whatever calfs all right this is the public key to get the public key it's address we need to get seats right we need to tell what the seeds are because no matter what you put as the seeds it will always equate to an address so let's say my seeds are Lance and and one right those two this is seed one C2 it will generate will always generate this public key right cool if this not make sense to you it's similar to if you guys ever used dice bear before right this is similar not the same thing right this will generate a profile picture based on what you type here so if I say Lance this is my avatar that I get I get Lance right if I said Lance is the first part of the seed then I said Lance one two three oh Lance one two three this is the Avatar Jets and notice how it's not random I can type Lance one two three I'll still get that I can do one two four one two five one two six one two seven right there's always a predetermined public key based on the seeds that's the concept so the seeds are going to be variables right it's always going to be a string user right and uh whatever the owner is which is going to be a public key so we can write owner okay so this is the equivalent of saying user all right it's describing saying user um ch3k right that's the public key of the new user that we create right this seed will generate a new public key for the user account does that make sense cool and from there we can now uh access these properties and fill them in right because they're just defining them here we can Define who the owner is and Define what the last post ID is so if I do uh user account right this is variable it's initialized with this user account dot owner you can say it's equal to owner dot key right which will take this and put it in a format that'll understand into a public key this part should be pretty easy for you guys right um you could also say something like this print right owner dot key and say created oops created user account comma user oops user account dot key boom okay and guess what that's it what do you think this line is doing it's like console lock but for python it's just gonna print out the owner public key a little nice message that we created a user account and then the user accounts key right which should be the same as the owner okay because we defined it right here cool and that's it for create user all right so what we want to do next is erase anything we don't need because you guys know the basics now so let's get rid of the instructions as well right and what we could do is also hit build when we hit build you'll see any errors come up I'm sure there is some oh okay cool here's the first one Pub Key and not found that's because in line 29 I put a capital K it's not camel case in this case camel case in this case but it's just gonna be Pub Key so go ahead and hit build again it should be build successful cool and another thing is this wallet that you connected with right this is the playground wallet that comes with and this tells you how much Soul you have so you need to deploy the smart contract onto the plug the blockchain so uh basically this is the blockchain again all right so let's write Block Chain right and we want to deploy our smart contract s are program right to the blockchain so when we do this it's going to take some soul so that's what we want to do deploy that program onto here right we can do that from Solano playground which is sick so to do that you might need some soul guys to get you can say uh air drop or Solana air drop 2 in the command line hit enter and requesting airdrop boom so now I have it from four to six right so make sure you do that if you need some Solana but since this is not a lot just yet we can go ahead and click deploy so I'm clicking deploy so take a couple seconds or minutes depending on the size of your program but uh this shouldn't take me much longer all right so the deployment is successful and the only thing we need to do now which is cool if you go to this test tube thing Solana PG lets you test all the functions you've made so this is the one we just made create a user and it's going to create user accounts we can fetch any of them and you see there's no users but let's make a user so this will help you understand how Solano works so play close attention on this one all right so for the users right for the owner is probably the easiest place to start we know to create a user account we need to put in who the payer is which is going to be the owner and the seeds right so the owner is this part right here so who should be the owner me right who's ever signed the signing the transaction and we know that me is this address right here so copy that address and put it here for own for user this is going to generate the public key for your user account like where are we going to put this user right so where are we going to put it you need to pass in some seeds so the first seed is what user I remember dice bear we had the right user all right so let's write user and let's make sure it's a string and add another seat and what's the type of the second what's the type of owner here public key exactly so that means we need to grab our wallet address again so we can click this wallet tab right here and click copy to get the address and then go to seed to paste your public key hit generate and this 4sq is the public key of our user account generated from the C right and if all of that is correct this test should pass so let's go ahead and hit test a create a user pass so that means a function that we wrote together this one right here was able to create a user let's see if we're right fetchall bam right let's go you did it guys you made your first instruction using python right and hopefully all of this makes sense so far right you're literally writing python code on the salon of blockchain and this is brand new technology at this moment of recording this video so I hope you guys are excited as I am because there's a couple more functions we need to do but that's it we have our first user right here and just like I said the public key of this user account is 4S right and in the account itself we have the owner and the last post ID amazing all right let's do the next one so now that you guys made your first instruction I'm going to go a little bit faster and do the tests all in one go alright so if you need to pause the video at any point or go back feel free to do so but now we're gonna get moving so let's create a post how do we create a new instruction you just write at instruction okay how do we Define the instruction we say def for Define and create post all right cool parentheses here to set up the parameters and then the colon is going to Mark uh the next part of the function or the logic of the function but within the parameters what do you think we need to create a post well I know I need a post I need a user I need um the owner that would be nice I need the title the image and the post ID right here so uh the thing that we're missing with this is the types right we need to put the types of all of these things so post it should be an empty post right because when we create a post this post account that we wrote up here should be empty and I'm sorry guys let me put this down for you how's that can you see it so you can see it now a little more clear we want to create post we're getting the empty post account as the type for the user are we when we're creating posts is there going to be an empty user no we have a user now right that user that we pass in is the one creating the post the owner of it is going to be the signer the title uh this is going to be a string that we discussed before and the image is a string and the post ID is usually going to be a number okay cool now time for the logic okay so for the logic of this function we're just going to write assert here right because what we want to do is do a couple checks right we want to check that the user the owner right we can access from here a user account if we do dot owner we're going to get a public key right I know that because of the way we built this if it's equal to the owner Dot key all right if it doesn't uh this isn't true then it's probably the wrong owner right cool another thing you want to check is if the post Hoops assert if post underscore ID is equal to the user dot last underscore post underscore ID plus one comma if it doesn't equal the next post that it should right if it's still post zero and not updating to one then this is probably the incorrect post ID that we're pressing yeah cool so after those checks let's get started right so we have a bunch of variables or parameters to play with um let's go ahead and make this post account not empty so how do we make it not empty I say a variable right here post account and we can say post right how do we make uh how do we initialize the user account guys we said user dot init we can say post dot init as well and we need to Define who's paying for this space the owner is okay how about the C's though okay so for the seeds uh there's some limitations since seahorse is still new so we're going to do is get the string post uh say the owner right just like before and we're also gonna need the post ID right whatever the post ID because if the post ID is zero it'll generate something else so this is like us writing um post uh one two three is already I public key and then I'm gonna give the post ID which is zero all right if the post ID is one it's a completely different number here you see this four five six right so this is why our seeds are going to generate a unique public key right so we'll put post ID um the limitation is it'd be nice to use user.key but at the moment we're unable to do that so I can't use that so from here we need space right so we also need to it'd be nice to write how much space does this post account take up right so basically if I'm going to make a post right the Solana blockchain wants to know how much space will it'll take up and by space it means the size of the post which is gonna factor in the properties right so if I go back to this is going to take into account the space of the signer the space of the title the image the post ID right and that's what all these numbers uh that we're going to put in so usually we put an 8 here this is called the account discriminator I don't need to worry about that too much but just know that's going to be the size of everything plus eight so I'm just going to put in the numbers and you can copy it as well we could do plus 32 plus 8 plus 4 plus 128 plus four plus two fiftysix awesome so the total should add up to 440 and that's how much space this all takes up if you wanna if you're curious how much space each of these things there's some documentation on anchor that will tell you and that's where you can get these numbers cool so this is how much space it can take up to this post account and from here we can write the properties so one thing that we're going to need is the user we need to update the user account from zero to one so we have access keyword access to user from this parameter so we can say user dot last post underscore ID plus equals one this is just basic programming right here cool next thing Lance we got the post stuff so let's fill in those properties of the post so the owner is going to be what owner dot key so you're getting a nice format it's also going to have post count that title is equal to what guys the title that we pass in title and remember title is also caption I'm just using title because that's how we're pulling it on the starter code so from there we also need the image URL right which we can use image and we can also do Post account the ID is equal to the user dot last post underscore ID so notice how this will be different because it adds one to the previous so this if the last post ID was Zero now it's one now that's the post accounts ID make sense cool and after that uh we can do a nice print message which is print f post ID and we're going to do some templates here so we say post ID uh comma title colon and then we can put post Dot or post underscore account.title for the title the image can be this post underscore account Dot check it put uh the quote here okay I think I got it yep and with that that's our instruction so let's go ahead and build and see if I have any errors if I type something wrong so a tip build yes there is an error python parse error so it's confused about this assert equals right here so let's see oh it's not uh one equals it should be two equals so you should see this color let's try that again build so now it's issued with the space I'm guessing it's some sort of comma yep so 961 for me make sure you put a comma that's it build again build successful so I completed all the errors make sure you don't have any errors and type in and make sure it says build successful right here and the cool part about Solana smart contracts is that you can upgrade it I don't know if it's changed with solidity but once you deploy a smart contract you can't update it you can only create read and you can't even delete right you can't delete any programs that you upload but you can update though so you can press this upgrade button and it will redeploy it with the new instruction that we just created so now if this is successful we should be able to create posts so I'll check back in with you guys when it's done upgrading all right so the deployment is successful click on the test tube again and let's see if we can create a post so I'm gonna go ahead and go to unsplash we're not going to be able to see this post actually no we will and let's just get a nice photo from here so let's do let's do this one let's click this one copy image address and let's go in here so the title and remember this is caption is uh new me who this right so let's do the image let's paste that image URL the post ID right it should be the yeah the current post ID I passed in and post ID is user last post ID which is going to be zero for now okay so now for the accounts right for the user account we do have a user account already and we can fetch it right here so this 4S right here double click it to highlight it and hit copy and then we could paste it for the user for the owner this is my wallet so let's do my address and for the post this is the one we generate from the seeds so it's just gonna be uh the string post and then the owner or a public key and then it's going to be your address so we can copy that all right mine63 yours might be something else and there's one more it's going to take a u64 number right because that's what post ID is and I said it was Zero so let's go ahead and generate that so let's hit generate and there you go f p w is my post accounts public key if this works let's see if it does work let's hit test creating post failed to get recent block hash so just failed to fetch so oh see we're getting a connection error so let's this happens to you make sure you try testing out by doing another endpoint in the devnet so we have this genus Cisco right so now we can see there's no fetching errors of our transactions let's hit test again oh with unauthorized signer or writable account okay uh saying we don't have permission all right so here's what we'll do instead we're going to build again using the other RPC endpoint because that one is getting some issues and I'm just going to upgrade again real quick and then we'll just try the test again just to make sure uh it's not the RPC endpoint that's giving us issues that it might just be my code so let's go ahead redeploy and we'll test it again all right so let's try this again let's go ahead and create a post I said it was new me who this right uh image was this nice picture right here pretty cool paste post ID 0 post it's from seed which is post add seed Pub Key which is the owner which is me plus uh q64 which is post ID which we're passing in and it should be the same which is zero so let's go ahead and hit generate and now the user is the user that we fetch from here let's go ahead and do that paste it 4S owner is me and now let's hit test program failed to compile so that's a different issue than we were getting before all right so after some troubleshooting I realized that we forgot one more piece I forgot so we need to establish a post event right so there is accounts there is posts there is instructions and there's also events right so let's go back to right here and we can say something like uh events right cool so events are essentially the event of a new post happening right so to Define an event and again because this is new right I want to put a note here so that we can't we're not able to pass string values in events just yet right because in this current model of seahorse that I'm recording uh that's still being worked on but for now let's go ahead and say class new post event is an event or that's the type and then the owner is Pub key and the ID is u64. okay and uh when we do this we can say it's going to run an instruction called init net and it's going to recall itself the owner which will have a Pub Key and an ID of 64. okay oh it's not just 64. u64 that looks more right cool and then say self dot owner is equal to the owner and self the ID is equal to ID and that's the only thing we can do for that for now and and this should help with our error so it should trigger so I built that no issues with the event itself now let's call that event within this post right here right so underneath this print we need to emit that event new post event so how do we do that in the function well we're going to say uh new post event is equal to new post event right which is going to have all the parameters the post account dot owner and comma the post account dot ID actually cool and then we can just say new post event uh dot emit to emit that new post event so again creating the instance with these parameters and it's going to run this event which is going to run in it we after defining it here we're going to emit it so if I build there shouldn't be any errors cool unnecessary trailing semicolon uh okay so that is a warning so warning if you see anything that's a warning it's not going to break your code it's just letting you know that it's kind of redundant uh okay but you don't have to worry about it so let's go ahead and upgrade now and while it's upgrading let's see if we can create a post cool so deployment's successful um just to be safe we'll check this function and the other ones later with the front end just so we can know exactly what's going on but for now if your code looks like this create post and something like this and it amidst the post event you should be good to go okay so from there let's work on edit post alright so this is edit post or in better words update right it's part of our crud it's update post and from here we can say the instruction so how do we make an instruction instruction then we can say def update post uh and then the parameters and then colon so that's how you set up the function what kind of parameters does it take it takes to post it takes an owner uh it takes a title title now let's define all the types so post is a post account right because when you update a post you're updating the information inside a post account the owner is going to be the signer which we know and the title is going to be Str because the title is the caption that you're updating so when you update a post what are we really doing we're updating the caption or in this case the title so again there's some checks here we could do if the post owner uh equals oops equal equals the owner.key all right if that is not true then it's probably the incorrect owner right and then if it is uh we're gonna put the old title old title is this post that title and that the new title new title is comma this the title that we pass in so we can take our parameters and use them for a function and when we update a post so let me take out the Pringles here and print and we can change the old title post by grabbing this parameter and say post dot title is equal to title and again just like before we need to emit update post event okay so how do we do that let's create a post event for updating so once this is done you can go back to here and say a new class update post event and say event colon and then say owner oops owner Pub Key you can say ID and say u64. nope and we also need this init function again which is underscore underscore net underscore underscore and we need the self the owner which is a Pub Key and the ID which is a u64 so it's pretty much the same thing uh and you're really going to write the same thing actually self.owner is equal to owner and self.id is equal to ID right so you could literally copy and paste the same thing for the init function and uh you should be good to go so for the update post it's pretty much the same thing let's just call it so now we want to emit the update post so to do that we're just going to write under here oops we're just going to write update post event is equal to update post event and put the post out owner and the post.id and then now that we put that information in the variable let's just submit it so let's emit it by saying update post event dot emit bam okay cool all right now we're running the post and let's go ahead and build check for any spelling errors or anything weird that I wrote yep we still get the unnecessarily trailing semicolon which is fine which I don't know where that is but once I do I'll let you guys know and erase it but for now there's no big warnings so we're good to go so that is update post so we have two more delete post and a like post all right so what we want to work on next is deleting a post so let's go ahead and get started all right so by this point you should know how to set it up you say add instruction and then Define the function of delete post all right so what does delete post do if you remember our app if I press this x button it should literally remove um this post from my front end to do that we don't necessarily delete anything off the blockchain we are going to do what's called closing oops we're gonna do what's called a closing closing the account and when we close the account it gets removed right that there's still a public key there but it doesn't hold anything it gets removed and then we get refunded Solana right sole refund because we're not taking up sales anymore so we're gonna refund the space it takes up okay so that's the idea so we're closing the account here uh anchor if you run some like if you just write close uh in the function itself it will close the account for you it's a little bit different on seahorse so I'll show you what I mean so delete the post put parentheses and then colon to write the logic next to it so for delete post what are the variables we need or parameters we need post we need uh owner and guess what that is it so post is type of post and what's the type of owner guys three two one signer I kind of wrote it for you so cheated all right from there let's insert and do some checks asserts that post owner is equal to owner that key again right and it's equals equals okay forgetting owner dot key if it's not we don't have the right owner okay cool so like I said we need to close the post account so let's write that need to close the post close the post account by trans Ferring something we call Lamp ports are you going to hear that term lamp ports is a smaller unit of Soul right so think of it like a dollars dollars in USD and the smaller unit of dollars will be cents right so basically a hundred cents makes up a dollar right so from here we're going to use lamp ports because that's what you do with this so we can say post dot transfer Lan ports right because the post account itself is holding the Lan ports that you're taking up space in right so that's that's your rent oh you can think of it as for that space and we're going to transfer the landports that that post is holding to the owner and we can really write let rent exempt exempt I believe no I think the spelling is exempt uh underscore lamp ports and then 440. that's how much uh the exemption should be so post dot transfer underscore lamp ports owner rent exact landport so make sure the spelling is all correct and from here uh you know what to do here this is just emit the delete post event which guess what it's the same thing pretty much so you can just say uh class here delete post event parentheses event colon and guess what you're writing owner so owner is Pub Key ID is u64 and we need the init function here so we can say def so what I'll do since it's exactly the same I'm pretty sure it's not any different we can just paste it okay I think that's it so yeah that's the delete post event listener and now we need to emit it so to emit it we need two uh we're gonna do again delete post event like so equal to delete post event and then post that owner poster ID and then delete post underscore event dot emit to emit the post event that we stored in this variable and that's it for delete cool so let's see if we get any big errors yep there's one rent exempt Lam ports not found okay it's interesting post.transferlamp ports rent sent Imports okay so after some troubleshooting I realized what's wrong with this because I'm gonna go down here we have to manually calculate rent from the account size because we can't access Lan ports on an account from seahorse so again seahorse is still brand new but there's a workaround right and I forgot that I did this so rent exempt you have to Define what this is so Imports cool like I said in the current version of anchor uh there's ways that they can do this for you but we have to manually calculate this because seahorse is still new so write something like this uh def exempt uh lamports is a u64. and then the calculation is actually 897 uh 840 plus 6 9 60. times size minus one so this is how you manually calculate your Lan ports and that's why we can pass in 440 right that's how much space it takes and then calculate right here so let's hit build and we shouldn't see the unknown error build successful let's go we deleted a post right so cool so on to like post and while I'm at it with like posts it's very similar but we're gonna unlike post which is essentially just closing the like post account all right so moving on to like post right we're gonna do the usual setup of instruction write def like underscore post and then let's put the parameters which is going to take in like a post and a user and you know the Liker who is liking alright so the like all right since this is a new account what do we do empty like account right that's the type it expects for post it's expecting a post and that should Exist by now because we can't like a post that doesn't exist and for the user should also exist should be a user account and the Liker is actually just the signer because who has ever uh connected to our app like right here is going to be the signer or in other words the Liker okay and then the colon here so you could write the logic and let's just verify uh the user account again so if the user.owner is equal to the Liker dot key then we have the wrong licker all right that's not true I got the incorrect like all right so now that we've verified the user we need to initialize the like account so remember how to initialize an account right we say equals like dot init we can do payer is equal to Liker and seeds is going to be like post the owner post ID and the Liker so we're gonna get a very unique seat because of all the seeds that we have to pass in for this okay comma here to end it off and then trying to see something it's gonna put a comment there I don't need that but I just want to make sure seeds parentheses and then let's initialize the rest of the properties so we can say like account dot post underscore owner is equal to post dot owner so we're taking from that post account and grabbing the owner and setting it to the like account post owner yeah so from there let's do another one which is the posts ID which is just literally going to equal the same thing that we passed in the post.id and then the like account dot Liker is going to be the Liker all right cool and again the Liker is the signer so uh again we also have access to posts when we like something we need to do a post that likes plus equals one so make sure you do that otherwise when you like a post like this it's just gonna say zero and don't mind the error but if I like this just should go up to 98. right cool so and then nice message here let's print out post ID comma is post dot ID and then we could say bye owner comma post dot owner then we can do now has and then we can say the likes so it has this many likes comma and then we could write nine so it could be zero one 0 likes one likes two likes three likes all right just a little message cool and then uh we need to emit hashtag emit the like slash dislike post event so notice how it's kind of this post event is going to be a two in one so we can make that pattern below here and say class like this like post event and the type of event and from here let's say owner Pub Key can't exactly copy this one because it's slightly different ID u64 and the reason it's different guys is because it's taking in likes so likes u64 like so and then uh the init similar but we need to add likes in there self owner Pub Key comma I this one is the ID of course 264 and don't forget like I said add the likes so u64 init bam thank you ma'am South down honor is equal to owner self.id is equal to ID boom boom and self dot likes is equal to likes cool and then keep this manually export thing and now let's emit that like to dislike event so I'm thinking back sits like this same thing so it's going to be like like this like post underscore event is equal to like such a long name right like this like post event so it's gonna take in post dot owner post the ID and comma post dot likes which will be updated because we added plus one right before this cool and now let's admit it so we can do like this like post event is equal to or not equal to sorry dot emit boom okay cool and that is the like function say build oh it's the assert thing we're at the Double equals boom and then the seeds comma after pair 108 don't forget that build again uh proton 116. post ID oh the comma should be after the quote so again there's a lot of misspelling it's normal just double check that and we're building now that's a good sign usually let's go build successful let's move on to unliking a post and don't worry we're going to test all of these later on and come back if we need to all right so last but not least we have unlike posts or since I was calling it this like post we'll call it that too so disliking the post now and let's set up the instruction like so so instruction death dislike post okay and what parameters does disliking a post take in it's going to take in the like account right because now we have a like account right we want to close this essentially like uh post which is expecting a post account like what post are you disliking and who is the disliker right the disliker is the signer who's ever logged in at the time and a couple checks here assert like dot Liker is equal to this like or key you want to make sure that they're the same otherwise it's the incorrect this like it's not the same so let's assert like that Liker and then equals equals yeah oops not minus equals equals equals all right another assert here which is a like that post underscore owner right just making sure that the person logged in is the liked the posts that has the like is the same as the owner otherwise it's the wrong one this one's less likely to happen but it's a good check post owner and there's one last one which is just in case the post ID is wrong right because there could be posts with the same ID if we did this wrong say incorrect post ID okay cool so just like with um deleting the post we want to close the like account right so we want to like I said hashtag close the like count by trance firing lamp points to the owner okay and again we have to do this manually but we set that up here manually calculating how much land ports we need to send back and we can do it like that transfer lamp ports the disliker that is the owner that we're going to transfer to right because the disliker if he's closing his like removing it he needs to get his rent money that he paid back so it's exempt uh lamp ports and hit the space of the like is about 80. again we have to manually put this in here and uh what else do we need to do if we dislike something or unlike something we need to post that likes minus equals one right because the count should go from like 10 to 9. right that should make sense to you guys and let's take this similar message here now copy paste to save time because now this post has uh now has because we don't have owner anymore this post ID blank now has blank clicks okay that makes sense cool and now we need to hashtag commit like this like post it right so this is exactly the same has the other one so we can copy it let's copy it and paste it like so got her events here like this like boom so let's take this back let's hit build let's see what errors I got the 124 174 oh don't forget to call in because every function needs this colon right after build okay that's a good sign build successful all right cool all right guys we did it we completed the smart contract right we didn't get to test all the functions we know we can create a user but now let's take this smart contract information and let's finally get back to our app okay so time to get back to the connection of our front end and our Solana program so don't forget to upgrade this and make sure you have enough Solana looks like I do so it's going to deploy awesome alrighty so now it's fully upgraded with all the new information I'm gonna go ahead and clean out um just these two tabs here and going back to our app we can pull up vs code again and actually make this guy a little bit smaller let's do something like this right and we can do something like this cool all right so we have both side by side now and let's talk about a few things so the the key thing to get started all right the key thing is go to your utils and go to constant.js right notice how uh if I do control B here and zoom in a bit notice how we need the program ID here so this is where you come in you're gonna go to salon a playground we're going to take a look at what your post ID is or your program ID is right so your program ID is this right here so copy that and you're going to do something for me you're going to say new public key right because we imported that from Solana parentheses quotes and pass in your program ID oops sounding codes boom okay now we have the program this is us using our RPC endpoint which is this placing it where we need to now storing our program ID in this variable and exporting it so that's one of the first things you guys should do so the next thing you have to do is use this program ID to get that information to get the program right so for now I'll minimize this and then we can make this bigger for now and let's start on working on that so if you press Ctrl b or command B what you want to look at is program.js I also need the idl.json but if you did everything the same as me right it should be a similar idea cool same thing go to program dot Js and this is where the majority of code is going to happen right we need to make a function that's going to grab the program from the blockchain so that we can use it right so look at this code right here import program ID from constants all right so we're grabbing this right here all right so now we need to use it so let's do that we're going to do normal JavaScript functions now so I hope you're ready uh we're gonna say well before we export let's do cons get program right is equal to an arrow function right so we want to get program right and what we want to do with this is we need a connection right and we need a wallet right so anytime I run this function we're getting the program next is const idea is equal to uh parent require parentheses quotes idl.json right so again you can get your new idl.json right by going into your salon playground going into here and do export IDL but if you did everything the same as me it should be very similar okay so that's how you get the idea if there's any errors this might be where it is but I think it should be fine so make sure the you get the idea that Json stored in a variable like so let's get the provider which is provider is equal to new anchor provider right so that's we're going to get this anchor provider and it's going to take in connection and wallet which is the two parameters we passed in and anchor provider uh dot default options okay and that's it for provider and then we can say const program is equal to new program our new instance of a program do IDL program ID for the address and the provider right so then we return program and this is what lets us see into the our Solana program and access the function so it'd be like program dot whatever use it like that so that's get program and what I was racing before is export because we want to export that function and use it in other places all right so that's the first thing that we need to do hit save and now that we can get the program using this function let's actually use it so if I want to use it to control B again and let's go to the state folder and go to global.js right so here we are going to use our context and create a custom hook out of it right so if you don't know uh what context is all right let's bring this guy back spring zeit board back because I actually do need it all right when you have a normal app right this is going to look something like this right so this is the parent and it has two children right so we can say this is the app.js and the apps child is the index and then we have a header and we have like the stories part right so usually if I have uh posts right post data in here in order to get this data to header I have to pass it down as a prop right and that's totally fine to do but if we have a lot of different components for example right I would have to and I want post all the way here I would have to pass in posts like so that's like this is called prop Drilling and that can lead to issues later down the line so an alternative is using something called context right you can look at it like a store so let's say my program is here right I'm getting the program into my state here and then I can just pull it from whenever I want I don't have to pass it down all the way so let's say there's a component here I need to use program I can just call it directly there and it's so nice so context is nice Okay cool so let's bring this guy back and we can minimize him again and let's set it up so to set it up the context you can say import create context okay and while we're here importing stuff from react we can say use callback all right so not to recall a function over and over again use effect and use state okay hit save and from there we can import get program from utils and we're going to get a bunch of other things but this is fine for now okay uh we're also gonna need what else you're gonna need import the lanports poor soul from Solana web3.js we'll use that later and another thing we're going to need is import toast from react hot toast alright so this is that nice notification symbol so we have a nice visual to see if something worked or not okay cool so how do we create this context that I'm talking about Lance I'm glad you asked we're going to say import const Global context is equal to you can connect to these contacts we want to create it first create the context cool in our context is going to be a lot of different things but there's we can just set them all up now there's going to be something called is connected and a lot of these are going to be set to null at first but they will have definitions to them later so just follow along with me next one is wallet next one is has user account right because we want to check if they have user account or not no oops not Jr multimedia no posts no fetch post no I forget the commas uh oh this is pretty much all the functions so create user no we want to create a post that's no uh update post okay comma delete post no and again if I'm going too fast feel free to pause the video and copy along what I have so let's do like post no and dislike post alrighty Okay cool so we created the context right so this is global context create context and now let's set up our state so I export const Global state is equal to whatever children we pass in which will come into play later children and set this to an arrow function let's get started on that so we want to deal with the program right so let's do const uh let's make a state and say const program set program is equal to use state right so this is going to help us what we're going to do is get the program right and then set it in our state so that when I say program this one I can use it anywhere I want right so that's the power of this um cool now how can we do that uh do I need something I'm going to need to import another thing here let's do import we need the connection so we need to use anchor wallet comma use connection so we need a connection and a wallet for the program cool explored Global state and at the end of this all for Global state it will return something and it's going to return oops return a a global Global context dot provider all right where have we seen uh Global well not Global context provider but where have we seen provider before right so that's going to take in a child of a value inside the top one value is equal to Chrome colon oops and anything uh you put in here will be passed will be able to be passed on anywhere so what I mean is if let's go back to here if we had the store all right and I set up program in here I got the program this is where I put it so I put program here for example if I wanted to see a program and for in between these two guys it's going to take in children cool so we set up our Global context we set up a global state will return a provider for our contacts all right now let's actually put this into use yeah so to get this working we can set up a use effect right a use effect we'll run uh when on create on upload and on delete of a component all right so to use this use effect let's go ahead and write in a narrow function Okay so first thing you want to check is if there's a connection so let's get a connection so let's say const uh here you can get a connection from use connection like so okay and if you didn't know we can also get a wallet from use anchor wallet which is why I had those two Imports uh and you have to call them to get that cool so now we have a connection and now we got a wallet to play with and if there is a connection right then we're gonna set the program to be whatever the program is and how can we get the program well you can actually run the function you can say get program because we have access to it from here put parentheses and then say connection wallet Colin colon because there might not be a wallet if there's none we do the empty object here okay else uh set program to know okay and if you can put something called a dependency module in this use effect if I put nothing in here this use effect will run when the page first loads if I put something in that dependency module like connection this will run when the page first loads and when the connection changes so if we get a connection it'll run again all right if we lose our connection for some reason it'll run again and dude and if there's not a connection it will set it to null another thing we can check for is if there's a wallet all right so if there's a connection there's a wallet if that changes at all let's use effect will run once more all right cool so now how do we see this program well we're passing it in we need to be able to see it on our app and one way to do it is come back to uh your app actually so we need to do next like I said is go to the app come to the top here and let's import something new we can import Global State now global not Global context Global state right because State holds that provider between these two guys uh right here let's add global state right so the reason why I'm doing this visually it's kind of like wrapping our whole app with the context so you saw that Circle that represents these the context oops well wrapping it like this and let's say a program exists in the context here I can pull it from anywhere all right so that's why I wrap Global state within our app okay so that said let's take a look at our hooks folder you're going to see something called use Global state right so now we can import our Global contacts right we can uncomment it we're importing it and comment out this return it's save so now let's check if our app still works okay there's destructive property use anchor wallet is not defined okay that's fine so we're gonna go up to here use anchor wall it's not defined okay so there's something wrong with the use anchor wallet and oh yeah I don't need to destruction this this is actually just be a variable because I'm not getting anything out of this so okay hit save and Bam okay we're good to go and again I can still log in cool and what I wanted to point out is this part the hook we take our contacts and turn it into a hook that I could use right so now I can say use Global state so if I go to index all right where's index it's right here and then if I do something like uh import use Global state right and then I can destructure anything from use Global state so let's say all right I can say const object program equals to use Global State and then I can write console log this is my program and then comma space comma program so let's see if it loads so it should get best give us back a program say inspect console this is my program VN okay so you saw that this is my program VN and you can see everything you need to right if I do a program dot instruction so I lost the parentheses and struck shins let's see what we get oh program.instruction not with an s cool so this is my program and we see all our functions create posts create user delete post dislike post like post right everything is there so when I say program dot instruction dot create user now you can see how we get it right so keep that in mind so we can erase this do you guys have an idea of how this hook and context is using together if you do we can move right along so let's do it all right so we can do now is we actually don't need the program here we're only going to be using program uh in this global.js right we're going to do a lot of stuff with the program this is where we'll write all the function calls to our smart contract so that you can have some functionality to this app right so now that we know that works let's go back to our utils and let's go back to program.js right whatever you wrote get program because uh there are functions that we can make that will make our lives easier what do I mean by that let's go back to our Local Host app first just a second and if you see on this side of my screen right we can fetch users right if I do fetch all right I get all the users that are created and there's the second one because I was testing if it still works so with a different account so there's C2 users now right but let's say I wanted to just get get one user's PK and when I say PK that's public key so what if I wanted just this user's PK right well what you're gonna do is take the user uh public key and click Fetch and Bam I only have that user's information that user's PK right so with that said let's move this back here with that said we can link that up let's make a function that does that for us so I don't have to call it over and again so let's say export cons because I want to use it other places all right this will be get user count PK and it's going to be asynchronous right because it's essentially uh communicating with the blockchain it's going to take in an owner so again what does this do this will get us the user accounts public key and how do we get a public key guys think back to what I was talking about with seeds that's right we're going to put in the seeds right so we're going to say return uh return parentheses like so oh wait oh wait uh public key all right so it's using this import now to generate a public key from oops public key dot find program address right so this is a builtin function of public key that's going to find the PK based on seeds and to write out the seeds you need to press this array thing because we gotta say buffer Dot from user right so this is us this is the equivalent of us going on to here and passing in use it like this all right we're passing in this user seat right because the seed should always generate the same paluki so yeah it's going to take a user and what else did it take in if you remember owner and we have to format it the way it wants so do two buffer and comma it also takes the program that I underscore ID which is why we need to get program here and if you do that you can do a zero here this is needed semicolon and that's it that's our that's how we get a user account PK okay we just pass in the seeds pass in the program ID this and we're good to go all right next thing what else do we should we get we should get the post account so let's get post account BK you don't need to do this but um this will save us time in the long run because I can just call this function instead of manually uh putting in the seeds over and over okay so let's say owner and ID right because we need an ID because each post has their own unique ID and asynchronous and we're going to do return I'll wait public key dot find program address and same thing with a pass in the seeds so what are the seeds for a post uh it's going to be buffer Dot from the string post and then the owner which we can do two buffer for and then the new it's the post ID is the third seed right so this is going to be what we call a big number so we say new BN pass in that ID and then if we have to format that to two array like buffer all right and we need in Lan ports e sorry this is just a format that ID to what Solana can read and to get the red seed so you can't just straight up put ID here we need to do this okay comma here comma here and don't forget we need to put in program ID and parentheses after that parentheses and then zero here just like last and then semicolon cool so that's the post account PK and last but not least let's get the like account all right again let's make our lives easier so get like count PK is equal to async Arrow function uh it's gonna take in an owner the ID of the poster liking and um who the Liker is yes who's the Liker and then we're gonna return oh wait public key dot find program address right this is so nice to have this builtin function all you gotta do pass in the seeds so what are the seeds for our like account guys buffer Dot from uh like and owner.2 buffer all right format that and what else I think it's an ID so if you get an ID you have to do a new BN ID dot two array like buffer I know it's intense Ellie eight if you need to pause this video go for it uh and I think there was one more seed it was the Liker which is a public key so we'll do a two buffer all right so if it's a number if it's a u64 format it like so if it's a string as a seed do this and if it's a public key do this it's the general rule so you don't have to memorize this just you can use your old projects as a reference so again after the array comma uh put in the program ID and after the second one right here put zero and you're done cool so we have some helper functions that we're going to use to work on our state so let's go back to not use Global state but to our global.js cool so now we can call all those functions all right so remember how we got the program so let's just bring that down here right here because we're going to get more stuff so instead of saying slash program because that's very specific let's go to just the utils and we can do something like this so we're going to get the program we also want to get a post account PK we want uh get like account we want to get user account cool so now we have access to all those helper functions which is going to be very nice and now we can scroll down and get to work so we need some sort of goal so the first goal that I want to work towards is creating a user one of our first instructions right so the things that we're going to need to create a user right is let's add another user effect because I need to check for a wallet connection right so to do that what we're going to do is scroll up a bit and we need to make another state so we can say const is connected is the state and set is connected is the function we say use state like so and to check the wallet connection it's gonna be pretty simple it's just a use effect okay so I'm setting that up the use effect is what we want to do is set is connected to not not wallet Dot Public key right because this will be this is basically saying if there's a wallet and then just Dot Public key and that's what we're going to set the connection to so this will lead to true or false right because usually wallet.public key is that number that you see but when you do not not it's going to be true it should be true okay so yeah that's it right there and inside the dependency module for it which is just going to be wallet cool so once the wallet is set up we're gonna set check if it's connected while it's connected if it's good we run let's use afflect uh now next step for creating a user we first have to check if there is a user right so uh we need to fetch check for a user account by fetching the user okay so how can we do that well we can make a function say const fetch user count and set this equal to use callback right if you don't know use callback is very similar to use effect but it's not going to rerender the components unless the dependency is changed so again we're going to set the fetch user account function to a sync right and here is where we can write the logic for it cool so here you can say um if there's no program right we can just return all right because we shouldn't be if there's no program to begin with we don't need to fetch the user account or we can't we shouldn't be able to because there's no nothing to fetch um from here we can set up a try catch though try catch and E and again I just do the catch first usually here um If This Were to work we need to save that user account that we fetch so we need to make a state so for that state we can say const ant user account and set user account is equal to you state all right cool so from here if there is no program return nothing just leave and if there is no user right if we fail to you can say set user account to not and even say the console log no user found no user that makes sense right if we can't fetch a user it should be null and no user found all right but what if it does work right so how do we fetch a user right think back to the Solana playground right how did we fetch the user well we need to pass in the seeds right and where have we done that before I'm trying to think all right we can say const user account PK for the user account public key is equal to weight get user Peak all right we don't like if I didn't call mother's helper function I would have to write this whole thing in this line right so that would take up more space but since we don't right we don't have to and what we can do is just say wallet question mark Dot Public key and you might be wondering what the hell is this question mark Lance is uh it's basically if this egg wallet exists right then you can get the Dot Public key because sometimes uh the wallet won't load just yet and it'll be like something like uh undefined reading Dot Public key right because the wild doesn't exist yet but this makes sure that the law does exist first and then it can read that public key that's why I do that just in case sometimes you don't have to but there you go and then we can console log the user account PK if you want to see what it is okay and then we can say the const user account setting this into a variable is equal to a weight because we don't want to set user account right away because that will rerender our component so we'll do that in a second first we have to grab it account dot user so remember if I write program we get access to program let's say dot account we can see all the accounts that it makes so if you think back here we would see user post and like we want user and we can do a DOT fetch here and then fetch it based on the user account PK so now do you see that this is how Solana playground works and fetching an individual PK we just did the same thing but in JavaScript essentially okay so we're gonna wait for this and once this runs all right we'll have the user account then and now that we found it we can say console.log uh user found and then we can say set a user account is the user account right and if that were to fail at any point right then it's going to say uh set users no okay cool so this isn't running that's why it's grayed out so let's make it run so we can do a check for user account cool and then we can say use effect all right a lot of code so if you have basic knowledge of react hooks this might be a little simpler for you if this is overwhelming for you make sure you leave a comment like let's make a react course right so cool so check for user account it's literally just going to run fetch user account dependency module because we only want to run this if we're connected so it all ties back to the connection right so if there's a wall connection this user effect will run next okay so let's hit save and let's go back to our app let's see if anything has happened so it might have our old stuff nope so let's select wallet Phantom let's go right there's a user found right user found public key and that makes sense because this second user all right the owner is b46 and I'm logged in with b46 right here so let me just make this full screen for now what happens if I change my wallet though so how do you change wallet good question just disconnects this click the Phantom icon uh login and just switch to one of your other wallets so if I see a t all right so now I'm using wallet one connect wallet one to your app and now there shouldn't be a user so look at this no user found right when I when there was a user it says user found enter is not a user no user phone right so thinking about the logic if this there's no user found when I connect my wallet I need to be able to create a user so how can we create that user so um yeah if this is a new wall I should be able to see a create user button and if you remember the demo there was a create user button that should show up right here so let's go back to our app next thing we want to go is open up components and head to the header because like I said that's where that button is supposed to be and if you scroll down to um line 49 for me you're going to notice that there's some conditional rendering right it has user account right is false and we're connected show me the create user button so let's do it statically let's make it like this has user account is equal to True let's change it to false let's say there isn't a user account but I'm connected let's see right here oh is connected is not defined all right okay so this isn't true because we don't know what is connected is but do we have is connected it's the question so we're not going to go to program we're going to go to Global and we have is connected right here right and we can Define uh is connected like so say is connected save and now let's go to header and let's import or use Global state which we did for you in line 15. so now that we did that really nice thing for you you can go to here and say const object say is connected is equal to use Global state so now we have that now let's turn this to false cool so now if there is no user account and we're connected uh oh I think it's looking for a create user but there is no create user yet so let's do a fake create user so cons create user this temp okay cool let's see what else it's missing it's expecting oh there we go cool so this is the true example of what we want to see right if if there is no user account this is should be false and we're connected show me the create user but if this is true all right then we won't see that button which means I have a user account right so we need a state that's going to do that for us so the question is how do we make this more Dynamic right so the first step right is going into your global.js and remember how we're going to make use of user account right so remember we have has user account in our Global context we can redefine it from null like so so if I say has user account I can do something like this all right I can say colon and then say user account right the reason why I'm doing this is because we can do some conditional rendering again with the ternary operator so basically if there is a user account it should be true and if there's not it should be false I'm going to come here cool so now has user account will either be true or false depending on if this exists or not does that make sense so if this exists it'll be true if not it'll be false and that's what has user account is right so and that uh the engine of that is going to be based on this function fetch user account so it's all connected right we're setting up our foundation for our app and if you're following along with me you're doing a great job okay seriously you're doing great like this took me a long time to understand and if you don't understand just rewind keep trying so uh heading back to header erase this fake has user account and give me the real one you can say has user account like so all right so moment of truth if I select wallet and I connect it to the 8T wallet wallet one I should see create user so three two one let's go create user exist right well I should see now if I disconnect and let's use a wallet where an account does exist already which was uh wallet five so let's connect that one and I should not see has user account yeah so boom you saw it for a second oops you saw it for a second and then it disappeared right we are able to set up the conditional rendering now what we want to do next right is connect our wallet and actually create a user instead of saying temp right here just says temp we want to actually create a user okay so the cool part is I don't have to make create user from scratch anymore because oops not that because it's already in our Solana code our program we just have to call it right so to call it we need to go here write out that function all right we know global underneath this check for user count let's create user right and we're not going to make the function from scratch we're just going to call it and pass in the parameters we need so let's go ahead and start by saying const create user is equal to use callback right because you want to run up you want to not rerender all our props if we run this so it's asynchronous and again there's this check here if there's no program we shouldn't be able to create the user in the first place all right cool so now we can do our try catch okay and catch will have an e and within there we can do um console.log uh couldn't create user and since we have to set up we can also do a toaster toaster error creating user failed boom and for this one you can say e Dot message to get the exact error in the console okay but for the try though uh we're gonna need to say const transaction for TX hash is equal to a weight and how do we get the methods from the program well you can say program dot methods I know we did dot instructions before but that method is the same thing you can do enter here because it knows that when I say Dot create user dot accounts right so basically I'm calling the create user function from our Solana program on the blockchain and I'm passing in the accounts it needs right and it does need a couple accounts it needs a user and an owner how do I know if you go back to here go to your create user it needs two accounts it needs a user and an owner and for the user it takes seeds so we gotta follow that same process here so we can say user oh wait and pass in get user account PK and say wallet Dot Public key right and if there's any issues with this step this is when you would put the question mark but we should be fine and then from there we can say owner oops whoa owner is wallet Dot Public key cool all right so this will automatically handle the seeds parts for us because we already set it up so you don't have to write that long thing here which you can get it can be sometimes and uh yeah you're pretty much done you've basically got the function all you need to do to actually run it and say dot RPC and confirm this transaction Now by saying oh wait connection dot confirm transaction to pass in our TX hash right this will make sure that it went through and we can just do a toast dot success and say uh created user we can do a weight fetch user account right because I want to make sure that after we create a user we're going to fetch that user again right so that it will update so that means if this runs and is successful select wallet this is successful I press create user it will disappear because we fetch the user account that exists now okay so let's see if that works crossing my fingers create user oh yeah we're probably going to see the temp because we have the fake static one right so no user fan that's because we made this it's grayed out because we're not using it and let's pass in create user come and we can go to header Now erase the fake create user uh I don't even think we're using this used router so let's erase that and let's pass in create user boom and it's already set to the button so don't worry about that let's go back but it looks like wallet fingers crossed create user yes okay so if you see this approved transaction this is a good sign which means uh it means that the function you wrote is asking you to sign that transaction and especially if you see the exact amount of soul that it's going to take from you another good sign so let's hit approve let's see which toast uh notification pops up a created user we're good and look at that the button is gone all right if you want even more proof right come back to your Solana playground there should be three of these guys now and Bam there is nice we created a user right that function you wrote earlier works on front end app and it's awesome it's really great so let's go to the next function all right so the very next thing you want to do is we should be able to create a post so if you don't know if you click that plus button up there it's going to ask you for a caption and then image URL right so after that you can hit create and this create button from the modal is what's going to create the post itself right so right now it doesn't do anything because it's currently static so let's take a look at that so if I go to my code which is this one let's go to header well actually no we need to go to the modal go to create post model and again it's that create button it's going to trigger this on create function and in that on create function we have the create post right but this create post again it's getting passed as a prop right which comes from index I believe this is the create post model and it's passing down static create post right see this line 91 what is static create post it's just a function as a placeholder that signifies create posts what we need to do is go back to our global.js and make a function like create user that calls the function on our Solana program right so if you're with me let's do that it's going to be a very similar process say cons create post is equal to use callback and it's going to be asynchronous so we're going to do async and we're going to do the arrow function for it like so and create post what parameters does create posts take remember you saw the modal takes caption and it takes an image and I'm going to say title because that's what we wrote it with but remember title is the same as caption you can name it whatever name you used please use that and what we want to do is if there is no user account uh it should just return because it's not possible all right and if we set up the try catch so let's set up the try catch try catch parentheses e for the error and here we can write um for the error toast dot error uh creating post failed right and then for the console log we can get the oops the E Dot message right so we can see what's wrong on the console if anything goes wrong and I try but in our try we have to set up the post ID and if you remember the user account it stores the last post ID so right now it's set to zero but our front end doesn't know that so we need to essentially get the user accounts last post ID which we should have thanks to our user effect so if you say user count dot last post ID and it should be capital i and we can do a DOT add n one so this will automatically add one to that user account it's a builtin function cool so now we will go from zero to one and then we have to make our transaction hash so set that equal to a weight program dot methods right again it's like let's check instructions but same thing dot methods and then you can do dot create post and it's going to take in the title that we passed in here the image that we passed in there and the post ID which we didn't pass in but we created in the try right and uh that's not the only thing we also need to do the accounts and this should be an object and what accounts does creating a post need if you're not sure check your Solana program so if I go scroll to the top go to create post you'll see that it the account it needs is post a user and owner okay so we got that post user owner got it so we need the post how do we get the post uh PK well thank God right you're gonna say thank you Lance because I can do a get post account and say wallet Dot Public key comma post ID dot two number boom cool right because these new two numbers because post ID is going to be a BN a big number and that will make it into a format you could read for the user same thing we have our nice helper function get user account PK this just takes in a while at the public key foreign a comma there you go nice comma and uh last but not least it needs the owner which is just you don't need to call a helper function you just need wallets Dot Public key I understand the comma all right um with that said we can just do a DOT RPC to make sure it runs and we can have an oh wait here oh wait connection dot confirm transaction TX hash right we want to confirm our transaction went through and if it went through after that await you can do a toast that's success and I say post created exclamation point cool so that is create post um successful we need to update the user account right oh wait fetch user account boom all right because we also need to fetch the post later but we won't worry about that for now um let's see the next thing we need to do is remember how in our Solana code not that this we need to set up our event listeners because there's a couple events that we need to run by and the first one is the uh creating the post yeah so we need to create that event so what I'm going to do is set up a used effect that's gonna run all of the events so between create user and check for user account to the program events and it's just going to be a use effect so since it's a use effect you put an anonymous function inside that first parameter and basically if oops if there is posts right there's no posts then we need to fetch posts all right so these two things don't exist yet posts and fetch post doesn't exist we need to make those and we're going to do just a second but let's work on this actually I'm gonna save this for later right still need to use effect though so let's do a use effect use effect tab yeah it's a different user effect I was thinking of all right so what we need for the program events though is if uh there's no program if there's no program if that's true then return because we can't do anything but if there is we need a new post event so const new post event listener right we gotta listen for that post event and we could do that by saying program right we're accessing the program dot add event listener right we're just going to take two parameters in this case which is new post event that's the event that we're listening for which does exist in our program and uh an asynchronous function which is post event like this and in that is a try catch all right e boom keep doing that array thing here we go and in this catch we can console log uh couldn't fetch a new post account comma post event e for the error but for the try though we can say const post account PK right because we're gonna get the new post that comes with that event post account PK and we'll use our helper function here and just say post event dot owner and the post event.id and then from here we can say const new post right because now that it's created right that public key we need to fetch it so we can fetch it by calling the program that account that post that Fetch and then pass in that post account PK the public key and then this is the part where that last uh post thing is going to make more sense this is where we're going to set posts all right this state doesn't exist yet but what we want to do is make sure that the new posts from this event gets added to that list of the posts that we had before so we can save that by doing it like this okay so let's define posts const comma set posts now it exists is equal to use State and then we could do empty array for this and remember we added events listeners but we need to remove the event listeners at some point so uh after this parentheses right here we can do a return right this is another part of the use effect and this is how you can remove the event listeners that remove event listener new post event listener so yeah so after this all runs the successful or fails we're going to remove that event listener and we only want this to run once and if the program ever changes all right so it's going to run once if the program changes and it's also going to remove that event listener after this is all done cool so that's that but now we need to set up the fetching of the events or the posts so let's go ahead and do that so check for user account above program events but below check for user account this is where we can write um the const fetched posts and again it's also going to utilize use callback as well which is asynchronous and if how it works is if there's no program well we can't fetch any posts doesn't make any sense okay and then from here we can say cons posts is equal to oh wait uh program dot account dot post dot all so we're basically fetching all the posts that exist from the program right and then from there we can set posts oops set posts and then basically uh map through it so post.map and for every post oops every Post in that map I mean in that array we're gonna get the post dot account because remember it's going to be like this object with a key of account and that key of account has an object with all the information this is how you can just simplify that here instead of nested uh ways of getting it then dependency module had a snap post that's going to be repeating program okay and there is a use effect to run this fetch post so we can say use effect um Arrow function this is what I was trying to write last time if for whatever reason there is no posts then fetch posts yeah so vegetables the posts don't exist that's basically what this means and now this one is going to have a dependency modular posts and fetchbooks this is to ensure that it's always fetching the posts as it comes or if anything changes yep so that looks good now let's go back to our app and see if anything same as errors no okay we can still connect our wallet yep cool so we have a user now let's set up the create post so what I need to do is come down below here and add create post all right and now that I added create post um we can use it so if I go to create post modal I can import my use Global state and I can use my Global State here so I can say const create post equals to use Global State and I'll form it like so just in case I want to get more stuff from here I probably won't and we can delete um or erase this fake create post right here right cool so now I'm just I'm not using the prop that I passed down I'm using the create post from Muse Global state and yeah so now we can find the test if the posts work and troubleshoot from there all right so we did all the setup so let's just test if creating a post will work so let's go ahead and find an image first I don't want any longer I'm just want just like a nice wide one sponsored um Microsoft Edge let's do this one it's a very uh Christmas themed oh no it's unsplash plus no we don't want that are all the wide ones sponsored okay let's do this one all right so let's copy this image let's go to our app let's do it so the caption is going to be um surprise it works okay paste this image URL and let's uh hit create okay first it's telling me to log in that's that's that should be good hey okay Phantom wallets transaction signature but it doesn't tell me how much Solana so that's not a great sign let's hit approve creating a post failed oh no so there's something going on here given publicly does not match the required CIS bar okay that's fine so um that might be because the way we started this connect let's just try one more time so caption oh I don't know what these are but Tokyo and then this image create a post failed Okay cool so that's not necessarily a bad thing because we know that the anchor error oops is the given public key does not match the requireds this far okay that's fine let's take a look okay so what I did was I went back to Salon playground and I just made sure that the spelling was correct I just redeployed it as you can see deployment's successful and now let's hope it works I'm gonna head new post and let's do surprise it works works and I think I spelled surprise wrong there we go and now let's take this image and paste it and hit create okay cool again this is a good sign and we're seeing exactly how much Soul it's gonna take that's also a good sign to prove foreign let's go awesome all right I'm really happy about that um and now if we go here if I fetch the post you should see one if it weren't correctly let's go all right surprise it works and now if I go to users uh fetch all there should be one user with a post ID of one so it incremented that user account got updated as well and uh as you can see we aren't oh yeah we're not doing anything with posts yet so let's see if it's fetching any posts so I'm gonna go back to here okay and where were we global you know what do I need I need fetch post okay if there's no post run fetch posts if there is okay cool and we have posts so what I could do is I can pass in post here all right comma and if I go back to index right you'll notice that it's rendering a static posts so change this back into posts so if there's posts give me post that map and then map through them and it should be the same we don't have to change anything because it's hooked up the similar way but we do need to use is the use Global state so I'll go here const object and here and say posts and set this equal to use Global State parentheses so hit save and let's see if we get any errors let's go we got post boys awesome cool and then we can select wallet uh we can even make another post let's just say rocket ship and the first thing that makes sense uh testing create okay approve post created and boom look at that this is a image from the Airbnb but this is sick we have two posts for this user that's looking nice okay cool so now it's done let's make the lead post okay so let's think about how delete posts works so we have this x button and that's just to indicate X and then delete the post if I hit inspect right here um deleting post blah blah blah with ID of blah blah blah right that's just the static delete function we need to create the real one which is just gonna call the delete post function from here right so that's all good so we can go to vs code and one of the first things that we're going to need to do is add the event listener so this isn't the place where I want to be I want to be in global okay and let's go ahead and add that event listener for a delete post so here I'm just gonna say enter a little comment that says delete post event so we know and then we can get started which is const delete post event listener and that's going to be equal to program dot add event listening right again we're calling our program adding an event listener to it and inside we have to put in what event are we listening for which is the delete post event uh comma here and what else oh yeah we need to find the post that we're going to delete so we can go like this and do an arrow function and in the arrow function pass in the delete event and in the delete event we can do something like this set posts right to posts arrow and then post that filter right we're gonna fill through the posts and what we want to filter out is the posts that we want to delete so it's kind of confusing but we're gonna filter the array of posts and in that filter that we're applying is the post all right that does not equal post owner that equals oh equals delete event dot owner and post dot ID dot EQ for equals delete event dot ID right so basically look through the posts and get the matching post with the correct owner and the correct ID that I'm clicking on so that it deletes the right one so that's essentially all we're doing there and from here we need to add another return and say program Dot uh remove event listener and then you can pass delete post event listener cool so that's that I don't know if it's gonna delete just yet I don't know if double check and test if this works but what I do know is that we need to create that delete function in the first place so let's go ahead scroll all the way down create post and we can go right here you can say const delete post equal to you guessed it use callback which is a sync okay it's asynchronous um it's gonna have an error function and it's going to take an owner and an ID and this can go like this cool so if there is no user account I shouldn't be able to delete anything so that's why we're going to do return and then from there we do our try catch so let me just have catch which is simply just e and then a toast dot error uh failed to delete like something went wrong and we can console log the exact error by saying e Dot message okay and then in the try we're going to make our transaction hash TX hash and set that equal to oh wait program dot methods and the methods that we want is dot delete post all right this is the actual instruction in our program and it's going to take in accounts and if you're not sure what accounts it takes you can go back to our Solana playground and we can actually just look at it so what does delete post take it takes in two accounts post and owner that's it post and owner so we just need the post PK we can get that by saying post oh wait get post account PK passing the owner and the ID from here and guess what for the owner that's just us right so we can just literally pass that so comma here and this is the owner is the same as the owner account which we have access to and our delete post okay and then from there we have to do a DOT RPC so that it runs and then a toast dot success uh to post deleted successfully all right I think that's pretty good run from there oh we need to pass it down so I want to move post just for organization's sake put it right here and then say delete post right here and where does the lead post exist all right let's think about it oh we lost them oh yeah what happened where is my posts okay we somehow lost our posts so let's just double check that I'm gonna go back to my index and let's just erase the static create post and let's just do console.log oh yeah there's a static create post thing here let's erase that okay so our post isn't updating for some reason so that means we're not calling it so where's that use effect or fetching posts it's console log fetching posts okay so it's not running fetch posts but if I go back here it should so if I go back to fetch posts this use effect if there's no post and there's not right now based on the console it should run fetch posts but for some reason it's not um what do we have well post isn't nothing it's not false it's a truthy value so I think I know the problem so go to line 33 on my screen take out the empty array because that's technically a truthy value so that condition will never run and if I remove it we're back we're back with me awesome so yeah that's it so again that's like a small thing that would drive you crazy for days but just know that the way we have it set up is if posts is null or falsy fetch the pose until the post or the fetch posts changes right cool so there we go got that um yes so now what I was doing before was we set up delete post and I was testing this out I don't think you need this here nope you don't need that there we have the lead post now and delete post what I wanted to tell you exists at this X and where does that X live I'll tell you it's going to be in feed and in item right there is going to be the post header right because this lives on a header with the ID and in that post header right we'll find what we need so in the post header you'll see there's a static delete post here we don't need that static delete post we need to use our Global state so let's use our Global State you guys should know how to do this now it's const object equals use Global State and what do we want we want delete to post Comma just in case and instead of static delete post we want to regular delete post and we can delete static so let's hit save any errors nope cool so this wallet should be allowed to delete either of these two posts um let's get rid of this ball one because it's not as cool yeah yes okay we see this approved transaction good sign and we're getting our Solana back right this is what it looks like in Seoul but remember we manually calculated it with lamp ports so if we hit approve uh posted the delted successfully I spelled that wrong but as you can see post is deleted right so now let's work on editing the posts let's change the caption so you want to update a post to update a post you click this as you saw before and all you have to do is you know change it to rocket ship hit confirm so again this confirm button is running the update post function right and I'm going to error here because while it's not defined that's fine right we're supposed to fix this right so this edit model is the key right let's work on the functionality before we talk about that so for the functionality we're going to go back to the global and let's set up the uh update post event you know so let's go here say update post event all right so we can say const update post event listener is equal to the program again right because program has a builtin method that adds event listener and the event that we're waiting for we can say is update post event so if you get any errors here it's because it's not the same name that you wrote this is what I wrote so make sure it's the same so from here we can do um the async async Arrow and let's write the update event as the parameter and let's get to work so we want to do is this try catch catch e boom um yeah console log if anything goes wrong we'll get this catch error and you can say couldn't fetch updated post account and we can put the update event that happened and E for the error but for the try all right we can say const we need the post account to update it so let's grab the post account PK by saying post account PK is equal to oh wait get post no not like post account PK yeah this is gonna take two parameters which is the update event.owner and the update event.id all right cool and then from there we can do a const updated posts right because similar to delete we gotta find the post that we want to delete so it's to program.account.post.fetch and say post account PK that we grabbed and then from here we can do set posts to post similar to last time and we want to do a post dot map right so we're setting set post to an array that we're mapping through to create a new one which will be post yeah yeah there's a lot of nested functions in here but that's okay here with me you can do yeah so accept posts will be a new array of posts and it's going to look into that array of posts and map through it and for every post what we want is if that post dot owner dot equals the updated post the owner and the post.id.eq equals the updated post that ID then that's the post that we want we want that post in the new array and that's what we set posts to okay so if that's true then we can return um the updated post and under that we can return the post array as well and yeah that should be good for updated post now for the function itself all right we have to create that so we're gonna go under create user create post let me go in between these guys so say const update post is what guys use callback you got it and again this is asynchronous so set that up and in the async parameters you say owner ID and it takes in title as well and inside that function we have a check right our Edge case which is if there's no user count don't even run this bro don't sweat it we shouldn't update the post if you don't even have a user account uh if you do though let's try catch something all right E I like to set up my catch first and we can just do a toast.air uh failed to update the post and console log the error.message so I know what's up in the console and now we can do this so for the try well the same thing as usual we do a cons TX hash and equals await program dot methods and let's call it the methods that we want which is update post yep and update post takes in title and we can also dot accounts and again this is where you ask yourself what accounts does update post take if you don't remember check Solana playground uh if you know the top of your head I could tell you it's going to be an object of post and how do we get the PK for this wait get post account PK and that takes an owner and ID which we are passing in anyways then it just needs an owner account which we have access to and then a DOT RPC right and this title would be the new title by the way the new caption right same thing and then we can do a toast.success caption updated uh yeah that's pretty much it you know what you know you can also just console log the TX hash if you want to see the successful TX hash but again optional let's update post see if this gave us any errors no cool so now we need to put that here let's put that in between up date posts so now the question is where now that it's in our context where do we update our post so to update our posts I said that is in the item component yep the item there's action buttons here what are action buttons these are action buttons that's that component so click action buttons and Within action buttons you'll see um this font edit that's the edit icon and it runs toggle edit post model true what does that mean well it's this function that I passed down so let's figure out what this means so let's go up a level which is going to be item and we have toggle edit post model which we get as a prop from feed item which means we go up a level to that parent are you following with me up a level from feed item is index and let's see so an edit post model sorry in feed item we're passing in that toggle edit post model so what is that let's figure it out it is this thing right so it's a function that I pass down as a prop so there is still props that I'm passing down not everything is in my Global context and what it does is sets the current edit post ID and it opens the edit model open so basically it's going to click this and it'll open that model to make sure we see it so that means the functionality really just lives here and at a post model all right and we can tell because in the confirm button we got this on edit and the on edit runs static update post we want the real one so how do we get the real one under Solana stuff uh we can say const object equals use Global State and inside this object we can get update post come and what we could do is literally simply just erase static update post put regular update post you should be good to go to edit everything else is hooked up already for you right that's just basic JavaScript um oh and we can't do this can't reassign update post oh okay because we passed them update post somehow we don't need that okay so it should be good select Phantom and Let's cross our fingers and hopes this works edit so let's change our testing caption to uh another day on Mars and let's just add an emoji for fun let's do rocket boom I'm just gonna copy this in case something goes wrong I'll hit confirm and boom wallet is not defined okay right because this was here before now we need a wallet so do we have access to that in global state so this is troubleshooting in real time right do I have access to wallet here okay there's a wallet right here wallet right it's part of our connection so what we could do is actually just pass down wall like this so wallet and just so we keep everything simple and connected we can pass wallet up here it doesn't matter where you put it I just like to have the functions together and now that that's there let's go back to the edit post model we can get wallet so now we know what it is it's not undefined anymore hit save let's try again so edit post uh another day on Mars confirm failed to update post okay so that's something cannot read properties of to buffer okay so that's 218 and let's go 2 to 18 in global cannot read properties of two buffer okay so there's something with the get post account PK I'm guessing okay so I'm thinking it's just that I forgot to connect my wallet when we did this so let's refresh let's try again I'm just gonna do select wallet boom same wallet as the post so we should have permission to edit this and uh let's do another day on Mars confirm nice okay look at this so we have the signature request we can hit approve caption updated reading and negative oh that's not good if post ID updatable so successful but we have reading negative one through so there is something wrong with that event oh I know because we didn't remove that event listener that would probably help okay so successful let's try again so we're going to log in we're going to say another day on Mars but instead of another day another uh Tuesday on Mars so let's say confirm approve ah still reading negative if ID dot EQ reading negative but the post goes through which is weird now another Tuesday on Mars so strange let's take a look okay see um update post EQ is negative it should be true this post has to be true I'm just gonna rewrite it save let's just try again so let's refresh connect edit and we'll say back to another day on Mars so confirm like it works but there's just that weird error I don't know what's going on improve okay caption updated no weird error anymore I'm just doing more I just had to rewrite this update events which make sure everything's spelled correctly for getting any errors here and it looks like mine and you can refer to the solution if anything goes wrong so there we go we can edit a function we can delete so I added a function edit a post we can delete a post we can create a post now we need to like a post and unlike post alrighty so you want to be able to like a post that means you click this button and that post is liked right so how can we do that let's set up the functionality and what I'd want to do is set up that like dislike post event right because we have one post event for liking and disliking right or rather words like unliking something okay because you can't like something twice and you can't unlike something twice so that's why it's set up this way so we do like this like uh post event listener and just like before for neatness we can write this comment like slash dislike hot post event so we're gonna need to set this up once for the two functions we make later and we can set this equal to program dot event add event listener and we want to set up like this the first parameter is the event itself which is like this like post event and then the second parameter is an arrow function with a parameter is the like this this like event itself and inside is the functionality so inside what we want to do with this event listener is set posts right but uh we want to get posts first look look into that array of posts that we have and essentially oops hit enter here essentially we want to map through it so say post oops posts dot map the current array of set posts and for every post inside of that array now we want to this should actually be double parentheses for every Post in that array we want to check if it matches so if enter post dot owner dot equals so make sure I spell everything right this time like this like event the owner right if the one who owns the post um matches and the post dot ID dot EQ is the like dislike event that ID if that matches right then we can return turn the the all of those posts right this is called a spread operator so it's gonna get each individual post turn into an object and get the likes and the like dislike event that looks right this is gonna get that posts data and modify the likes based on the event okay cool but now the actual functionality of calling it is what we need to do next um there is a couple more things we can also do a return post here okay cool and notice how this one doesn't have a check so now let's just call it that like function so hopefully you wrote that right scroll down to here um oh I did forget a couple things whole point the dependency module one thing that I forgot was this dependency module and this is for program like that's the whole point of the used callback there's a second parameter I also forgot that here I believe uh this should be comma the user account based on the user account and I think that's the same thing for delete post okay cool all right so now we can go into a like post so say const like post is equal to use callback and from here we're going to do async so just like before set up an async arrow function like so and we are going to take in three parameters the owner the ID and what we call the Liker which is essentially the wallet that's connected um what else now now that we're here we have that edge case that we check which is what guys if there's no user account so you can probably guess what the dependency module is going to be for this so return and we do our usual try and catch so I'll set up the catch first you don't have to do this first but I just do toast dot error um failed to like post and console.log E Dot message so that I can see what's wrong and in the try we're gonna do the TX hashing it's equal to a weight program dot methods and what methods do you want to call you want to call Dot like post and it doesn't take any parameters there but it does need all the accounts that's what matters on this one and on the accounts we're going to need the like which is why we made all those error functions which is like oh wait get like account PK owner ID and Liker nice and we need the post which is going to have a way to get post account PK owner ID and we're also going to need the user which is a way to get user account PK which is going to have wallets and I did question mark public key again question mark of it optional uh I just want to ensure that this doesn't get become Dot Public key of undefined right and don't forget the comments cool and the owner is also wallet underscore I mean underscore question mark Dot Public key to ensure that it's not undefined at all and we can do a RPC right here cool and then if it's successful do a toast.uccess you liked a post because you did it you liked it and here comma and user account okay cool now we can add leg posts here and if all goes well we should be able to like post going back to this where can I add that like post button guys come on come on last stretch stay with me shake it off all right like like post is this button and that res resides where and action buttons exactly good job David all right cool so now we have the static leg post as you can see is running right here we don't need that we can just go in here don't need tip on that we need const equals use Global State and what do we want from here we want like post so erase this get this static like post data here and add the like post so let's save that any errors nope and now testing to see if it works if I click this wallet is not defined of course so we also need wallet so let's add a wallet in there so now we have wallet no excuses now code let's hit this oh okay so we're able to like the post uh we're getting a signature request but remember that when you see unable to simulate this it means there's might be something that's going to be wrong let's hit approve failed to like post and let's see why this might be like last time Mitch program ID was not as expected okay so that's that means there's something wrong in the way we wrote the like post so let's go test it out okay so I figured out what was wrong on instead so I figured out what was wrong I told you before that we need to export the idea because this is the way we wrote it right there was some discrepancies that's why we kept finding the program idea didn't match so just Ctrl a the new idea that you just downloaded and replace the current one with that new one and it should work now right as you can see this has one likes now right because it exists so let's just make a new post to change that so let's do Tokyo and I don't know what's going to come up next say create let's hit approve post created boom so there's Tokyo and now if I click like hey finally oh okay so we can see the soul right here to the proof and now it says one like instead of the randomly generated one and that that is done through conditional rendering as well so cool so we got some fire Instagram posts with one like now let's get the dislike button working which is pretty simple last but not least let's go down to here and let's create it okay and while I'm here there was another thing that I realized that we forgot to do and that was use this remove this event listener right here so let's go ahead and do that so we want to basically copy this say program dot remove event listener like this like post that's another thing we forgot and now you can see this isn't grayed out anymore so double check yours if this is not grayed out so here we are the final step boys and girls this is the cons this like post function so just say use callback and the best part is we don't need to make an event listener because we already did with the like dislike post event listener so finally let's just do an async anonymous function right here and it will take in an owner ID and a disliker okay cool well you don't know how long it actually took me to fix that ideal error and that's all you had to do but I'm glad it's working um there's the if check here if user account then you can do return okay and from here let's do a try and say cons TX hash and set that equal to await program dot methods okay so then from here oh let's call the function and say dot this like post and Dot accounts which takes an object of accounts and if you don't know what accounts dislike post instruction takes just look at your playground to remember but I can tell you it takes a like which we can do with weight get like account PK owner ID and this Liker okay and then from there you can do Post and do oh wait get post account PK owner ID um for getting the comma and the owner which is going to be a wallet Dot Public key and again the question mark is optional if this is giving you any errors saying like it's an owner that public key undefined you would just add a question mark here so again from there um yep so underneath that we can do a DOT RPC and underneath the RPC we could do tell us that success you unliked I'll post okay cool after that try we gotta catch just in case anything goes wrong I do a toaster error here and say failed to unlike post and console.log the error.message cool and then comma here dependency module user account help user account oh it didn't like the enter so let's just do it like this no Oh wrong spot let's actually go here there you go so save that let's get this like Post in here dislike post and where do we want it we want it in the action buttons right here so we can go to action buttons and within the action component uh buttons let's get dislike post and let's get rid of the static one get that out of there instead of static dislike post on line 25 for me we just need this leg post and it's already passing in the values that we want all right set up that way all right this was just focused on Salon of code so now let's unlike this Tokyo One boom look at that we're getting refunded Soul let's go and boom it's gonna go back to random likes or zero likes right that's just for aesthetic reasons but this truthfully has zero likes now right so let's do a cool thing just for fun let's like it again boom let's change our wallets so let's disconnect let's go to wallet number five which I know is already registered and look at that so wallet number five he's not allowed to delete this post because he didn't make it right there's no ownership of it but he can like the post so let's approve boom two likes alright let's go so that's awesome anybody can log on and like your posts or dislike your posts and people can't delete your posts and that's it guys we're done right that's it so congratulations you finished the Instagram clone you learned about seahorse and drop a comment below saying that seahorse is awesome and if you did let us know if you want us to do a full stack build right from the front end all the way to the back end and just be on the lookout for more Solana videos see you guys in the next video peace
