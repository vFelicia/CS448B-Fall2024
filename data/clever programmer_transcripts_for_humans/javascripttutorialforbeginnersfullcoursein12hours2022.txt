With timestamps:

00:00 - welcome to the ultimate javascript
00:02 - course where you're gonna master
00:03 - javascript in under 12 hours by building
00:07 - projects you're gonna start off with the
00:09 - basic fundamentals of javascript and
00:11 - then you're gonna move on to building
00:13 - smaller to bigger projects so for
00:15 - example you're going to start off first
00:17 - by doing lots of exercises so you can
00:19 - get good with how arrays work objects
00:22 - variables etc then you're going to build
00:25 - little projects like a tip calculator
00:27 - then i'll show you how to learn apis and
00:30 - make an app that gets a random dog every
00:32 - single time you click it you'll learn
00:33 - how to build your own superhero apps if
00:36 - you search up batman or thanos you can
00:38 - actually find your superhero and you can
00:40 - switch it up pretty cool pretty
00:41 - impressive and you can show it off to
00:42 - your friends i'll also show you how to
00:44 - deploy these apps so they're online
00:46 - anybody can use them at any time you'll
00:47 - learn how to build your own weather app
00:50 - with javascript i'll help you master
00:51 - concepts like promises and async and
00:54 - await some advanced concepts as well
00:56 - right don't worry this is for complete
00:58 - beginners okay so if you're a complete
01:00 - beginner you're in the right place and
01:01 - for even more intermediate there's going
01:03 - to be a couple of things for you to
01:04 - learn you're also going to build a
01:06 - fighting game which is going to be
01:07 - really cool it's going to be like street
01:08 - fighter but you get to build your own
01:10 - where your characters will have attack
01:12 - and heal and there's going to be sounds
01:13 - and graphics and you'll see how to build
01:15 - that with javascript and you'll be
01:17 - building the netflix app with javascript
01:21 - so how freaking exciting is that i hope
01:23 - that this is the most exciting
01:25 - javascript course that you've ever come
01:27 - across and i think you're gonna have a
01:28 - lot of fun so stick around this is gonna
01:30 - be a fun ride now before we just jump
01:35 - into it what i want you to do is smash
01:37 - that like button so this course goes out
01:39 - to as many people as possible and as a
01:41 - way to thank you here's a picture of a
01:43 - koala bear alright and a baby and a
01:45 - monkey there you go hopefully i earned
01:47 - that like now make sure to click the
01:49 - link that says join.replay.com
01:53 - cp dash javascript we're popping it up
01:56 - on the screen right now this is the most
01:58 - important part of this video so click
01:59 - that and make sure that you fork this
02:01 - rupple it's going to bring you to this
02:04 - screen right here and then what i want
02:06 - you to do is you should see javascript
02:08 - course by clever programmer right and
02:10 - then what i want you to do is make sure
02:12 - to hit fork this is very important okay
02:14 - hit fork rupple and once you do that you
02:17 - can actually get started working on this
02:20 - course but this is the most important
02:22 - step so click the link below in the
02:23 - youtube description or somewhere on the
02:25 - screen and then fork ruppel this is a
02:28 - rebel that you need to fork and then
02:30 - you'll be able to get started now once
02:31 - you fork it it should bring you to this
02:34 - screen over here now
02:36 - there's a bunch of code already here so
02:38 - that might intimidate you but don't let
02:39 - that intimidate you okay you can pretty
02:41 - much just ignore everything and when i'm
02:43 - gonna be coding along in the tutorial
02:45 - you can just follow along in this file
02:47 - your playground.js
02:49 - and you'll be completely fine you don't
02:51 - have to worry about anything that's
02:53 - happening in here right now
02:55 - these are only resources available for
02:57 - you as lessons
02:59 - notes exercises and projects that you
03:01 - could refer to later for now
03:04 - this is pretty much the your
03:06 - playground.js file is the one that you
03:08 - should be using
03:10 - in the video you'll see me use
03:11 - playground.js but that's mine so don't
03:14 - you you can go inside of it but don't
03:16 - use it okay only use your playground.js
03:21 - and write all of your code in here and
03:24 - you'll understand everything that's
03:26 - happening now just to explain to you
03:29 - what this is over here and what is
03:31 - happening is
03:33 - there's some in here we have the
03:36 - repo the github repo for this exact
03:39 - project so you can go ahead and you can
03:42 - fork that repo okay or not fork but like
03:44 - you can star it all right you could
03:46 - start that repo
03:48 - um just so on your github you could find
03:50 - it easily and plus it's nice for me to
03:52 - have stars right for these repos and go
03:54 - up and other developers can find it and
03:56 - helps them
03:57 - all right and then you have lessons so
04:00 - in lessons for example
04:03 - you can go to one of these lessons where
04:05 - maybe i have this little app that shows
04:07 - you how to click in with javascript and
04:09 - get these squares right and clear the
04:11 - game and you can go play it and then you
04:13 - can go and look at its code so for
04:15 - example for that red yellow green
04:17 - squares app that i have right here which
04:19 - you're going to build inside of this
04:21 - tutorial on the left hand side i'm going
04:24 - to have
04:25 - its code available for you so inside of
04:28 - dom i have this thing called red yellow
04:31 - green right and
04:33 - that's gonna be that's gonna have the
04:34 - code to this entire app so you're
04:36 - actually able to even click into it boom
04:38 - and see all of the code okay but again
04:41 - right now i wouldn't worry about looking
04:43 - at that right now just stay put all the
04:46 - project solutions are here so for
04:48 - example there's going to be project
04:50 - exercises and then you're going to see
04:52 - project solutions so what are these if
04:54 - you go into a project solution like
04:55 - let's say
04:56 - uh fighting game or weather app or
05:00 - create netflix these are the final
05:02 - completed versions of the app so if i
05:04 - type in las vegas and hit search boom my
05:06 - app shows up but if i go inside of
05:10 - project exercises weather app these are
05:12 - the uncompleted versions so when i hit
05:14 - them you'll notice that the javascript
05:16 - part is not working that's going to be
05:18 - your job to do and
05:21 - by the time you're going through this
05:22 - course you'll learn how to do all of
05:24 - this by yourself okay but for now don't
05:26 - try to do this yourself i'm just showing
05:29 - you kind of what's happening here what
05:32 - is all of this and how the course is
05:34 - structured but simply put for the rest
05:36 - of the video all you really need to do
05:39 - is just relax and follow along over here
05:42 - in your playground.js
05:44 - so whatever you see me do in the video
05:46 - just replicate it here and we'll start
05:49 - from the very first line of code hello
05:52 - world what i've decided to do is package
05:54 - all of this up into a course so you
05:57 - could binge this like netflix and it
06:00 - could actually keep track of your
06:01 - progress and everything will be much
06:03 - more organized and in one place in one
06:06 - course instead of you having to watch
06:08 - this on youtube so i've done this for
06:10 - your convenience to turn the ultimate
06:12 - javascript course for beginners into a
06:15 - packaged resource for you and it's also
06:18 - completely free and all you have to do
06:20 - is just go to the link below in the
06:22 - description that says
06:23 - cleverprogrammer.com slash js dash
06:27 - tutorial just go to that link click in
06:29 - the description below i'll take you
06:31 - directly to this completely free course
06:34 - all you have to do is just sign up okay
06:36 - it's gonna ask for your email or
06:37 - whatever to create an account so i could
06:39 - keep track of everything that you're
06:40 - doing and then boom you will have
06:42 - complete access to this course it'll be
06:44 - in your library you'll be able to go to
06:46 - cleverprogrammer.com and access it and
06:48 - it'll track your progress it'll track
06:50 - every single thing that you're doing so
06:52 - it's very important i highly recommend
06:54 - that you do that because it's going to
06:56 - enhance your experience of discourse
06:58 - with that said let's jump right into the
07:00 - video all right let's get started with
07:02 - the very basics of javascript so i'm
07:05 - gonna assume you're a complete beginner
07:07 - then we're gonna work our way up and
07:08 - make it more complex okay so let's start
07:11 - with something really really simple and
07:13 - we're just gonna start with the hello
07:15 - world and i know that's what everyone
07:17 - talks about but let's do it anyway okay
07:19 - so let's just do hello world and you can
07:21 - hit command s or control s if you're on
07:23 - windows and as soon as you save you'll
07:25 - notice that it runs right over here okay
07:28 - or you can just hit that play button at
07:29 - the top and as soon as you hit that
07:31 - you'll see hello world here will pop up
07:33 - so perfect that's exactly what we want
07:36 - now you can console log anything and
07:38 - they'll show up there okay so try
07:39 - console logging your name okay so try
07:43 - console logging that and if you do that
07:44 - correctly it should show up right over
07:46 - here and don't forget these apostrophes
07:49 - right here so let's give that a try i'm
07:51 - going to put my name here i'm going to
07:52 - hit run and boom at the bottom you see
07:55 - rafa kazi so good job so far you're
07:58 - making great progress and you most
08:00 - likely got this right as well so good
08:02 - job if you didn't that's okay don't
08:04 - worry we'll you'll have plenty of
08:06 - chances now let's do some programming
08:09 - and let's make it simple and get started
08:11 - with it okay so
08:13 - what can i do as a programmer right what
08:16 - are the things that i could do with it
08:18 - so let's say we have a variable and we
08:20 - start storing stuff in there okay so for
08:23 - example i can say name and i can say
08:26 - name is rafikaze and now if you hit run
08:28 - you'll notice that this won't really do
08:30 - anything this didn't do anything and i'm
08:33 - going to or actually let's say name is
08:36 - peter pan so this could my name can be
08:38 - different from the name that i gave here
08:40 - and you'll notice i don't see peter pan
08:42 - anywhere so what's going on why am i not
08:44 - seeing peter pan well what i need to do
08:46 - is remember i need to console log it so
08:49 - i can actually do this here and run it
08:52 - and boom all of a sudden notice that i'm
08:54 - seeing peter pan so that in javascript
08:58 - are called variables so you can store
09:00 - values in them and then you can refer to
09:02 - those values even if those values are
09:04 - really long so for example see i have a
09:06 - sentence here and my sentence is how are
09:09 - you doing today nice to see you hope you
09:13 - have a great day whatever my sentence is
09:16 - yeah and now if i do console.log and i
09:19 - do sentence and we run this look the
09:22 - entire sentence gets printed out but if
09:25 - i remove this console log boom you see
09:29 - that at the bottom right there no
09:31 - sentence shows up so this is something
09:34 - nice to kind of note and to pick up on
09:37 - what you just learned about are
09:38 - variables and if you ever see me doing
09:40 - these two slashes this just tells the
09:42 - computer hey this is for humans so don't
09:45 - actually try to run this because if i
09:47 - remove this and i try to run this i'm
09:49 - going to get some type of error that's
09:51 - going to say hey you haven't defined
09:52 - variables which just means i never told
09:54 - the computer what variables is i never
09:56 - did something like variables equal to 5
09:58 - or whatever but this line wasn't meant
10:00 - for computer anyway it was meant for a
10:02 - human being so these are called comments
10:05 - okay comments and they are meant to just
10:08 - be read by human beings and the computer
10:11 - decides to completely ignore them now
10:14 - let's do something where we have numbers
10:17 - and other things okay so i want to show
10:19 - you other things that you could do with
10:20 - javascript so let's say we have food and
10:23 - i set food to you know let's say you
10:25 - paid maybe 20 for your food okay great
10:29 - well i'll give you a little exercise
10:31 - here i want you to go ahead and console
10:33 - lock that can you make food pop up here
10:36 - give that a try i'll give you five four
10:39 - three two one let's go so we're gonna do
10:42 - console log and i'm gonna say food just
10:44 - like this and now when we hit it you'll
10:46 - see at the bottom i see 20. okay
10:48 - hopefully you're seeing that on your
10:50 - screen now i'm going to remove this line
10:52 - let me show you how you can do other
10:54 - things with programming okay so for
10:56 - example there's certain things called
10:58 - operators so we want to tip let's just
11:00 - say 20 okay now with that food and that
11:03 - tip what we need to figure out is how
11:06 - much is the tip because yes this is 20
11:08 - but what's the tip amount so let's
11:10 - calculate the tip amount and we're going
11:13 - to say it well that's simply food right
11:16 - multiplied by the tip so this maybe we
11:18 - can call it tip percentage so we should
11:21 - give better variable names and that way
11:23 - things are much more easy to read now
11:26 - before we run this remember this tip
11:28 - here we updated it to tip percent so
11:31 - make sure you copy paste that there so
11:33 - use food multiplied by tip percentage
11:37 - now you have your tip amount okay so
11:39 - let's now print that out so i'm going to
11:41 - say tip amount and let's try running
11:44 - this and we see that it was four dollars
11:47 - okay very good that's exactly what we
11:49 - wanted now let's say we want to make it
11:51 - a little bit more interactive and we
11:54 - want to make this a kind of like an app
11:56 - experience so right now i hope you're
11:58 - excited because you're going to be
11:59 - building your first app with javascript
12:02 - that's the power of javascript you can
12:04 - build things with it so freaking fast
12:06 - and you're going to be building an app
12:08 - right now so i'm going to teach you
12:09 - something called you know basically how
12:11 - to get inputs from user that's how you
12:14 - make apps because right now we've hard
12:15 - coded food to b20
12:17 - but let's say that if the food is a
12:20 - different amount well you'll need to
12:21 - come to this app that you made and
12:23 - you're going to need to put 40 here and
12:25 - you're going to need to put a different
12:26 - percentage you need to calculate this
12:29 - differently every single time it's going
12:31 - to be kind of annoying now here's how
12:33 - you can use user input okay so instead
12:36 - of this food saying 20 here kind of hard
12:38 - coded here what i'm going to instead do
12:40 - is i'm going to say prompt
12:42 - okay and
12:44 - i'll show you actually how prompt works
12:46 - so let's go ahead and try that first so
12:48 - i'm just going to say we're going to
12:49 - create a variable called banana and
12:52 - we're just going to store something in
12:54 - there and i'm going to say prompt or
12:56 - let's say fruit okay and we're going to
12:58 - say what is your favorite
13:00 - fruit we need to console log this so i'm
13:02 - going to say console.log we'll say
13:05 - all right and i'll say
13:07 - my favorite fruit is mango this time
13:10 - right and boom you actually see mango at
13:12 - the bottom right that's exactly the
13:14 - experience we wanted for this app so
13:17 - just very simple but we need to make
13:20 - this happen and we need to make our food
13:22 - calculator thing that we made more um
13:25 - dynamic because right now it's hard
13:27 - coded so we need to make it where it
13:29 - takes an input from the user instead of
13:31 - saying 20 here all right and then it
13:33 - calculates the tip amount based on that
13:35 - so what can we do i want you to take
13:36 - about 30 seconds to a minute and see how
13:39 - do i make this food thing over here
13:42 - interactive if you haven't figured out
13:44 - so all good let's do this together so
13:46 - i'm going to say prompt and in this
13:49 - prompt i'm simply going to say how much
13:52 - was the food and we don't we don't want
13:55 - this fruit line to run so i'm going to
13:58 - comment this out by putting a slash
14:00 - slash here and i'm also going to comment
14:02 - this one out this console log by putting
14:04 - a slash slash here because i don't want
14:06 - those to run i just want this here to
14:08 - run so what's going to happen now is
14:11 - food is going to run it's going to ask
14:13 - for what how much was your food once you
14:15 - put in how much the food was it's going
14:16 - to store that inside of the food and
14:19 - then our tip percentage is going to run
14:22 - and then our tip amount is going to be
14:23 - calculated based on whatever you put in
14:25 - the food multiplied by 20 tip and then
14:28 - we will output the tip amount perfect so
14:31 - how much was the food we will say was
14:33 - let's say forty dollars i'll hit run
14:36 - let's try it again and let's say it was
14:38 - twenty dollars so twenty percent of
14:40 - twenty should be four let's try it boom
14:43 - so that was great and there we go so our
14:46 - food was calculated properly we do have
14:49 - four here very good now what if you
14:52 - wanted to make tip percentage
14:55 - user input as well where this is not
14:57 - hard coded this is the data the user
14:59 - puts in because the user can decide hey
15:01 - how much tip do i want to add do i want
15:03 - to give 10 tip 20 tip 1 tip 100 tip that
15:08 - should be up to the person and what we
15:10 - want to do is the user should be able to
15:12 - put in let's say they want to give a 20
15:14 - tip so this should be able to put in 20.
15:16 - the user shouldn't have to say 0.2 right
15:19 - so they should be able to go 20. now
15:22 - what do we have to do to get 20 down to
15:24 - 0.2 well 20 divided by 100 gets that to
15:27 - 0.2 so it's whatever the user input is
15:30 - we divide that by 100 so let's replace
15:33 - this by user input let's say for example
15:36 - but in this case you know what we can do
15:38 - is we can just replace this with prompt
15:41 - okay and we can say
15:43 - let's just say tip percentage okay so
15:46 - that's all the prompt will say and then
15:48 - whatever tip that they put in we will
15:49 - divide that by 100. all right so here's
15:53 - one cool thing that we can do on the
15:55 - bottom right here click right in front
15:56 - of that arrow and it'll allow you to
15:58 - write code that will run right away so
16:00 - you could see what's happening so let's
16:01 - say that i have 20 and if i divide that
16:04 - by 100 and then i want you to hit
16:06 - execute at the bottom right and uh
16:08 - scroll all the way down and you can see
16:10 - 20 divided by 100
16:12 - is 0.2 right so that's exactly what we
16:16 - want so that's how that division sign
16:18 - works and i know i haven't shown you
16:19 - division but
16:21 - there are a bunch of things that we
16:22 - could use in javascript so there's
16:24 - multiplication there's division there's
16:26 - exponents there are a bunch of other
16:29 - things but like plus minus right all the
16:32 - basic math stuff works so let's try and
16:34 - see if this is working this food thing
16:36 - that we're making here okay so
16:38 - whatever the tip is we're going to
16:39 - divide that by 100 and then we're going
16:41 - to multiply food with that tip
16:43 - percentage all right so let's give that
16:45 - a try over here i'm going to hit run and
16:48 - let's see what happens so how much was
16:50 - the food so let's say i paid a hundred
16:52 - bucks for the food the tip is going to
16:54 - calculate okay it's a tip percentage all
16:57 - right let's say we want to give 10 as a
17:00 - tip so that would be 10
17:02 - and boom you can see that it actually
17:04 - says ten dollars right there now if you
17:06 - don't even want this to come in the
17:08 - console and you want this to come like
17:10 - where the user could see it you could
17:11 - even use alert and you could alert the
17:13 - user with what the tip amount is gonna
17:15 - be so let's try this whole thing again
17:17 - and watch what's gonna happen it was a
17:18 - hundred dollars um how much was the tip
17:21 - it was let's say 10
17:23 - and boom it just says right there you're
17:26 - looking at 10. i'm just going to comment
17:27 - this out normally in a normal app you'll
17:30 - never use prompt to get user input
17:33 - you'll use something called forms in
17:35 - javascript or you know html forms you
17:38 - use forms and users like we'll put in
17:40 - the data there and then that'll populate
17:43 - in here but for now we're just going to
17:45 - stick to using prompt because it's the
17:47 - easiest way without having to do too
17:49 - much html and all this other crap all
17:51 - right so all right now what if we want
17:54 - to do something more because right now
17:56 - this is pretty good right but what if we
17:57 - want to show the tip amount and like the
18:00 - total amount right what do we want to
18:02 - show how much the food was how much the
18:04 - tip was and then what's the total amount
18:07 - what if we want to show all of those
18:09 - things so let's go ahead and do that as
18:11 - well so we're going to say total okay
18:13 - let's create a variable called total and
18:15 - total will be whatever food was plus the
18:19 - tip amount so let's go ahead and do that
18:21 - i want you to take a try and do that
18:23 - yourself and then console log it see if
18:26 - you nail it so take five to ten seconds
18:28 - to do that right now count down five
18:31 - four
18:32 - three
18:33 - two
18:34 - one
18:35 - and now let's go ahead and let's do it
18:37 - together all right i put myself up here
18:39 - so i'm nice and out of your way so let's
18:41 - go ahead and do this together now so
18:43 - total is gonna be food plus tip amount
18:46 - and then let's go ahead and let's make
18:48 - sure the console log and i'm gonna say
18:51 - total and then let's print it how much
18:53 - was the food okay so let's go the food
18:55 - was 100
18:57 - how much you want to tip let's say 20
18:59 - so that should be 20 so it should be 100
19:02 - plus 20 tip that should put you at 120.
19:05 - so let's see and we got this weird thing
19:08 - so what's happening here is if you take
19:10 - a thing like this 100 and you try to add
19:13 - 20 to this this is not going to do what
19:15 - you think it's going to do okay because
19:17 - this is a different data type and we're
19:19 - going to talk about different data types
19:20 - so i'll write this here for now data
19:22 - types and there are different data types
19:24 - like strings and numbers and then other
19:26 - ones anything that has these quotes
19:28 - around it is a string and so if you try
19:30 - to add two strings watch what's going to
19:32 - happen when i hit execute it's going to
19:34 - add a hundred plus the word 20. so it's
19:37 - almost like you're adding words together
19:39 - okay it doesn't see these as numbers
19:41 - it's like looking at it like a word this
19:42 - is a word you're spelling 100 and when
19:45 - you try to add those two words together
19:46 - it makes them one word and so that's not
19:49 - what we want but if you take a number
19:51 - 100 and then you add 20 to it and if you
19:53 - hit execute you can see that that
19:55 - actually gives you 120 basically what
19:58 - you're looking for so what we need to do
20:00 - is we're getting this data from the
20:01 - users and it's coming back as a string
20:04 - you guys so for example i console log
20:07 - this food right here and let's just like
20:11 - run through this and let's just say 100
20:13 - and we'll say 20 and run this that first
20:16 - 100 even though you can't see it it's
20:19 - actually a string so this is not a
20:21 - number it's actually a string so what we
20:23 - want to do is we want to force it to be
20:24 - kind of a number so let's say i have a
20:26 - 100 here right if i want to force it to
20:28 - become a number i can call this i can
20:30 - wrap this in something called number so
20:32 - number is a function and it will take
20:34 - this 100 and turn it into an a regular
20:38 - 100 without the quotes so we'll talk
20:40 - more about functions later so we'll make
20:43 - a note of this we'll talk more about
20:44 - functions later things like that and you
20:47 - know maybe even type casting but those
20:49 - are a little bit more advanced right now
20:50 - i don't want you to worry about any of
20:52 - that i just want you to focus on i'm
20:54 - just wrapping this thing in something
20:56 - called number and it automatically takes
20:58 - it from a word and turns it into a
20:59 - number and so i'm gonna take here and
21:01 - i'm going to just wrap this in a
21:03 - function called number like this so when
21:05 - you get food amount that should be a
21:07 - number and this tip percentage here that
21:09 - should be a number as well so i'm going
21:11 - to wrap this into a number as well just
21:13 - like this and we're going to move this
21:15 - here so you can see this very clearly so
21:17 - i've wrapped this inside of a number and
21:19 - i've wrapped this inside wrap this
21:22 - inside of a number as well make sure you
21:24 - have the right amount of parentheses
21:26 - going on so now we're not going to get
21:27 - that weird error anymore let's go ahead
21:29 - and run this again we're going to say
21:31 - the food was 100 tip is 20 percent and
21:34 - it calculates it correctly over here and
21:36 - you do see that it says 120 okay that's
21:40 - exactly what we were looking for
21:42 - perfect now one other thing that's kind
21:44 - of confusing when we're looking at our
21:45 - console log is like ah this says 20 here
21:48 - and it says 120 and
21:51 - i would want to label it right so i
21:52 - would want to want it to say tip amount
21:55 - here and then 20 and then total here and
21:57 - then 120. in other words like basically
21:59 - i wanted to say
22:01 - tip like that here and i would want this
22:03 - to have total here just like that right
22:05 - that's that's the the thing that i want
22:08 - so let's do that here so in console log
22:10 - i can actually say tip amount and then
22:13 - here i can say total so now watch what's
22:16 - going to happen when i run this and we
22:18 - say 100 and we said 20 is it tip amount
22:21 - 20 total 120. okay so now it's kind of
22:24 - nice our app is working in a better way
22:26 - a nicer way so everything looks cleaner
22:29 - and better and it's just showing you
22:31 - different things you could kind of do
22:32 - with the console log so i hope for now
22:34 - this was really good we're gonna keep on
22:35 - going there's a lot more to cover i hope
22:37 - you're excited i'm excited and i'll see
22:40 - you shortly alright let's get back to
22:42 - coding and now you're gonna learn about
22:44 - some really cool stuff and we're gonna
22:46 - build some more fun stuff okay so let's
22:48 - go ahead and do it together but one
22:49 - thing i want to tell you is if you want
22:52 - to code yourself you're going to be
22:54 - coding in a file called your
22:56 - playground.js okay so that's the file i
22:59 - want you to be using when you're coding
23:01 - right now because i'm coding in a file
23:03 - called playground.js okay so by the time
23:06 - you're seeing this video this file will
23:08 - have like all the code that i have
23:11 - written you know so far so this is going
23:13 - to have like pretty much everything that
23:15 - we have done together but in your
23:16 - playground it's like your scratch file
23:18 - and you're able to kind of code along
23:20 - with me all right let's keep going let's
23:22 - talk about a couple more things okay so
23:23 - one of the things i want to talk to you
23:25 - about are like different kind of data
23:28 - types that we have all right so we got
23:31 - numbers all right and the examples of
23:33 - them are like 1 5 10 100 you know
23:37 - whatever you could have decimal numbers
23:38 - too like 2.5 you have other things like
23:41 - what we call strings and these are
23:42 - anything that have quotes around them so
23:44 - it's like if i say hello or if i say
23:46 - what's what is up okay those are all
23:50 - strings and now strings could have
23:52 - single quotes around them or they could
23:54 - also actually have double quotes around
23:56 - them okay so like this you know as long
23:59 - as they're wrapped up and
24:01 - it's even on both sides okay single
24:03 - versus double they both work so those
24:06 - are strings so something we were talking
24:07 - about up here anything in quotes is
24:09 - going to kind of print out exactly like
24:11 - how you want it to okay other data types
24:14 - might include things like arrays and
24:17 - we'll talk about them later i'm just
24:19 - going to kind of leave a note here for
24:20 - now for this we also have objects
24:23 - a different completely different data
24:24 - type another data type is boolean so
24:27 - this is either something is true or
24:30 - false okay so true slash false this is
24:33 - an example of a boolean and why i'm
24:36 - talking about this and i know right now
24:38 - it might be like why are we talking
24:39 - about data types i mean this seems kind
24:41 - of boring but this is going to become
24:43 - really important because imagine if
24:44 - you're building an app where you know
24:46 - let's say that it's a simple app and it
24:48 - says hey if raining outside tell the
24:50 - person to get an umbrella or if it's not
24:53 - raining outside then tell a person to
24:55 - get a sunglasses well you're going to
24:57 - need to understand how boolean works
24:58 - otherwise you're not going to be able to
25:00 - make an app like that work taking it
25:02 - into real life well banks work off of
25:04 - booleans right because if you think
25:05 - about a bank can you take out if you
25:08 - have zero dollars left in the bank can
25:10 - you take out uh 10 000 or 1000 dollars
25:13 - you can't so the bank has a line of code
25:16 - that's sitting there that goes if user
25:19 - has this amount of money available so
25:20 - let's say you ask for five thousand
25:23 - dollars it says does the user have five
25:25 - thousand dollars available and if the
25:27 - user does then great let them transact
25:29 - it then basically if they do say true
25:32 - but if they don't say false okay and so
25:35 - using booleans you're able to do
25:38 - something we'll talk about later you can
25:41 - do conditionals and then you can do if
25:43 - else type of statements or if then and
25:46 - that's going to be important another
25:47 - thing i want you to learn about is well
25:50 - you know we have data types but one
25:52 - other thing we need to worry about is
25:54 - like basic math stuff okay and it's
25:57 - gonna be really simple like i'm gonna
25:58 - say like first grader level math stuff
26:01 - okay or third grader level like
26:03 - something really really simple so let's
26:05 - go and just talk about kind of math like
26:08 - operations that we have okay and you
26:10 - should know about these so for example
26:11 - we have multiplication so you can
26:13 - multiply using this you can divide using
26:16 - a slash you can uh do other ones like x
26:20 - exponents okay and these are like with
26:22 - two asterisks like this and then
26:25 - you know we have modulo which is like
26:28 - this or you know in other words is like
26:30 - a remainder okay so for example if you
26:32 - did five modulo two what would you get
26:35 - well that's a great question let's
26:37 - actually ask our javascript here so i'll
26:39 - do five modular two and hit execute okay
26:42 - and you can see that one is the
26:44 - remainder here right so you'd get back
26:46 - one if you did this so that's how modulo
26:48 - and remainders work and then of course
26:50 - you have add which is a plus sign which
26:52 - is pretty simple and i don't need to
26:54 - probably give you an example of that and
26:56 - then you have minus okay so these are
26:58 - kind of the majority of the math
27:00 - operations that you will do when you're
27:03 - coding so these are helpful for you to
27:05 - know because when we're we're going to
27:07 - be going along and we're going to be
27:08 - building things together and some of
27:10 - this stuff you're going to kind of need
27:11 - to know so we're going to just put it
27:13 - out there let's go ahead and call it
27:15 - math operators because they're like
27:17 - operators okay and then i'm just gonna
27:20 - show you a couple of like
27:23 - math
27:24 - methods okay that are gonna be helpful
27:26 - for you so and one of them we can
27:29 - actually even use right now so floor and
27:31 - seal the floor it just rounds down okay
27:35 - and this just you know if you can guess
27:37 - it by the name it rounds it up if you're
27:40 - getting a tip well that's that's going
27:41 - to be really weird right because like
27:43 - let's say you haven't placed an order
27:45 - and it was for
27:46 - 110.25 cents or something and then
27:49 - you're trying to calculate a tip on that
27:51 - 20
27:52 - and then you get these like decimal
27:54 - numbers now sometimes that could be
27:55 - confusing and maybe you don't want it to
27:57 - a decimal number you want it to be an
27:59 - exact dollar amount okay let's just say
28:01 - well what you could do in that case is
28:03 - you could take a number like 22.5 or
28:06 - 110.25 cents and you could call floor on
28:10 - this okay so we're going to do
28:11 - math.floor and we're going to wrap this
28:13 - in and i'm going to hit execute and you
28:15 - can see that it just floored it so it
28:18 - just rounded it down that's all it does
28:20 - so if you did the same thing let's say
28:22 - seal and i said 110.25
28:25 - and i hit execute it would round that up
28:27 - to 111 okay when we're actually building
28:31 - our we're going to be building some
28:32 - games in this tutorial as well so for
28:34 - example later when we go and let's say
28:37 - we build rock paper scissors or we build
28:39 - any of these games you're going to need
28:41 - to know some of these things okay so you
28:43 - can round down and round up um and
28:46 - you'll see why so you need to know this
28:49 - if you want to build those games later
28:50 - and then there's random okay all right
28:52 - so here's how random works okay this
28:56 - gives you a random number okay okay so
28:59 - this is how you actually use math.random
29:01 - okay so let's say i use math.random
29:03 - don't put anything inside of it and just
29:05 - run it so it'll always give you a number
29:06 - between 0 and 1. so if i keep pasting
29:09 - math.random you'll always get a number
29:11 - between 0 and 1. now if you want to try
29:13 - to get a number between 0 and 3 just
29:16 - multiply this by 3 like this and this
29:18 - will always make sure that you get a
29:20 - number between 0 and 3. and so if i keep
29:22 - running this you can see i got
29:23 - math.random multiplied by 3 and there
29:25 - you go i got a 2.4 let's try it again
29:28 - right i get a 0.42 and now you know when
29:31 - you're playing rock paper scissors you
29:33 - want rock to be zero you want paper to
29:36 - be one and let's say you want scissors
29:38 - to be two so if you want those numbers
29:40 - to map to them like that you need to
29:43 - pick between zero one and two okay
29:45 - that's what you need to do that's why
29:46 - you need to run this function and i'm
29:48 - gonna you're gonna learn later why
29:50 - that's the case okay but that's why you
29:52 - need to get between zero one and two so
29:55 - if we keep going with this well let me
29:57 - ask you this right right now you're
29:59 - doing this and you get this long number
30:01 - two point seven two blah blah but you
30:04 - just wanna get either zero one and two
30:06 - so in other words how could you turn
30:07 - this long number into just two okay take
30:11 - a couple of seconds it's one of the
30:12 - things i've already taught you okay hint
30:14 - hint it's one of the methods you have to
30:16 - use here okay so see if you can guess
30:19 - this i'll give you five seconds five
30:22 - four three two
30:25 - one
30:26 - all right let's call math.floor on this
30:30 - and wrap this in and hit execute and
30:32 - you'll see boom i just got two so then
30:34 - in other words what i have to do is i
30:35 - have to copy this math.random multiplied
30:38 - by three paste it here and
30:41 - call
30:41 - math.floor on this entire thing so now
30:44 - when i do that what will happen is this
30:46 - will eval run and evaluate and give me
30:48 - something like two point seven two point
30:50 - seven eight nine five five five four
30:52 - four four some long number right two
30:54 - point seven nine blah blah blah and then
30:56 - on that it'll call math.floor and it
30:59 - will turn this into just two and you'll
31:02 - end up with just two okay so let's try
31:04 - running this boom i got zero perfect
31:06 - let's run it again boom i got one let's
31:08 - run it again boom i got zero let's run
31:10 - it again boom i got two perfect so i'll
31:13 - always get between zero one and two
31:15 - those are the three different choices
31:16 - that'll map to my rock or paper or
31:18 - scissors later on when you're coding
31:20 - that up so that's just an example of how
31:22 - these methods work we'll practice more
31:25 - with them later but right now you should
31:27 - just know them and have them in your
31:29 - notes all right guys and let's do this
31:30 - thing right now so let's just go up and
31:32 - comment out like some of this stuff here
31:35 - so like we don't want to run this
31:37 - anymore so what i'm going to do is i'm
31:38 - just going to go ahead and highlight all
31:40 - of this okay because i don't care about
31:42 - running this anymore because otherwise
31:44 - every time you hit run it's going to
31:45 - keep prompting you and we don't want
31:47 - that anymore and just hold command and
31:48 - then hit slash or if you're on windows
31:50 - probably hit control and then hit slash
31:53 - okay so let's do that and it should
31:55 - comment out all of this okay with
31:58 - exactly how i did on my computer if it
31:59 - doesn't do that for you just turn it
32:01 - into a comment block but just make sure
32:02 - to close the comment block okay because
32:04 - if you don't close it then everything
32:06 - will turn green and that's not what you
32:08 - want either so i'm going to hit undo and
32:11 - i will just leave it as let's go back up
32:14 - here and i will just leave it as a
32:16 - common block like this okay and now
32:18 - let's go back down to where we were at
32:20 - all right so one of the things i'll do
32:22 - now is let's go over to our
32:24 - console here okay so let's go to boom
32:28 - let's go to this guy over here okay and
32:30 - i'm gonna drag hit settings and there's
32:33 - display size and i'll make the display
32:35 - size bigger let's go all the way back
32:37 - hit console perfect so now we have some
32:39 - more room to see everything here easier
32:42 - fantastic
32:43 - all right so
32:45 - we covered the math methods we covered
32:48 - math operators we covered some of this
32:50 - data type stuff right so let's go back
32:52 - up to our variables here okay so in our
32:54 - variables introduce to this so you have
32:57 - var
32:58 - const and let these are three very
33:00 - important things i want you to know and
33:02 - normally when you make a variable you
33:04 - never just make it naked like this you
33:06 - always either call it like you say let
33:08 - sentence equal blah blah blah let so you
33:10 - always just put a let here so right now
33:12 - i will just tell you never use var okay
33:14 - i'll make your life simple you can use
33:16 - const or let only use const if you know
33:19 - that thing that you made you're never
33:20 - gonna change it again but if you're
33:21 - gonna change it use let so most of the
33:23 - times for now at your level i will just
33:25 - say use let okay that way you won't run
33:28 - into any problems so for simplicity use
33:30 - let but if you want something to be
33:31 - constantly true then you're gonna use
33:33 - const so all our variables just put a
33:36 - let there and for more advanced users
33:39 - we're learning javascript what this does
33:40 - is it makes sure that you don't have a
33:43 - global scope for your variable names
33:45 - okay it gives you kind of get scopes it
33:48 - down so let's go down here now let's go
33:50 - ahead and like let's do something
33:52 - simple okay so i'm going to show you
33:54 - programming in a fun way as if you were
33:55 - sitting right next to me and we're just
33:57 - coding up something together okay and
33:59 - i'm like yo let's walk through this
34:01 - let's say
34:02 - we make like a tiny little weather app
34:05 - okay so let's go ahead and let's make a
34:07 - baby weather app and uh what we're going
34:09 - to do is we're going to say if there's
34:12 - rain then what we want to do is we want
34:14 - to say grab your umbrella or
34:17 - just print the umbrella emoji
34:20 - and if you don't have an emoji that's
34:21 - fine you don't need an emoji okay this
34:23 - is just for fun if it's not raining
34:26 - we're just gonna say wear
34:28 - your sunglasses okay so it's gonna be a
34:31 - simple app where the user is going to be
34:33 - asked if it's raining or what the
34:36 - weather is and if the user says it's
34:38 - rain right now then you tell them grab
34:40 - your umbrella and if the user says
34:42 - anything else like it's not raining or
34:44 - it's sunny outside then it says hey wear
34:46 - your sunglasses okay very very simplest
34:49 - overly simplistic baby level app but
34:52 - just to kind of gives you the ropes of
34:54 - programming okay so let's go ahead and
34:56 - build this out now and we're going to
34:58 - introduce you to a concept called
35:01 - conditionals they're your friend they're
35:03 - so freaking awesome and they allow you
35:05 - to build amazing apps and amazing things
35:08 - all right so i'm going to say let
35:09 - weather so i'm going to create a
35:10 - variable called weather so whether it
35:12 - could be rain it could be
35:14 - sunny whatever so we'll just say if
35:16 - weather weather rain then i want you to
35:19 - console.log grab your umbrella just like
35:22 - this i'm going to copy this and i'm
35:23 - going to paste it else we're going to
35:26 - console.log and then the sentence is
35:29 - going to be where your sunglasses and
35:30 - i'm going to paste that right here so
35:32 - make sure that you copy this correctly
35:34 - so here you have if weather is equal to
35:36 - rain with the two equal signs very
35:38 - important okay and i'll explain that to
35:41 - you later why as well okay so this is
35:43 - something called you have conditional
35:45 - operators and those include conditional
35:49 - operators include things like equal
35:51 - equal sign or equal equal equal sign or
35:54 - greater than sign or less than sign or
35:57 - less than equal to or greater than or
36:00 - equal to not equal to not equal equal to
36:03 - and those are the main ones that you're
36:05 - going to use okay i'm just leaving this
36:07 - here for you to know we're using this so
36:10 - if the weather is rain this is going to
36:11 - become true if this weather here is rain
36:14 - so this weather here is rain this is
36:16 - basically going to say hey is it rain
36:18 - equal to rain let's test it let's see
36:20 - what it says so is rain equal equal to
36:23 - rain and let's hit execute and let's
36:24 - watch what happens and boom look at that
36:26 - it says it's true now let's say is sun
36:30 - equal equal to rain it's going to say
36:32 - false okay let's try a couple of others
36:35 - 5 greater than 2
36:37 - is that true or false
36:39 - all right hopefully you guessed it
36:40 - correct let's hit it and you can see it
36:42 - says true okay is 5 greater than or
36:46 - equal to 5 is this statement true
36:49 - greater than or equal to 5 yes it's true
36:53 - because 5 is equal to 5 okay greater
36:56 - than or equal to but if you do 5 is
36:58 - greater than 5 this will give you false
37:01 - because 5 is not greater than 5. so
37:03 - these are a couple of ones that you
37:05 - should know and learn about because this
37:07 - is going to be really important for any
37:08 - app that you're essentially building
37:10 - okay so if the weather is equal to rain
37:12 - so if this is rain because this weather
37:15 - here is rain if these two are equal
37:17 - what's really going to happen is this
37:19 - entire thing here is going to evaluate
37:21 - to a true statement so this entire thing
37:23 - is going to become true and if something
37:25 - becomes true an if then statement it
37:28 - will run this line right here but let's
37:31 - say that you put false here well then
37:33 - it's going to run this line right here
37:35 - and it's not going to run that line okay
37:37 - so that's how if else statements work
37:40 - just make sure you have the right
37:41 - squigglies so this squiggly opens here
37:43 - and closes here that's where your
37:46 - true statement goes the l squiggly opens
37:49 - here closes here and that's where your
37:51 - console log this is where your false
37:53 - statement goes so let's hit undo undo
37:56 - undo and go weather is equal to rain so
37:58 - now what i'm going to do is we're going
38:00 - to hit run and let's see if this runs
38:02 - how we want it to it says grab your
38:04 - umbrella beautiful so because weather is
38:07 - rain well what if the weather is sunny
38:10 - before i hit run
38:11 - do you think it's going to run line 57
38:14 - or do you think it's going to run line
38:17 - 59 which one do you think it's going to
38:20 - be take a second
38:22 - and let's hit run and let's see what
38:24 - happens and boom it will run this line
38:27 - because this statement it found it was
38:29 - false because sunny is not equal to rain
38:34 - so this becomes false so then it won't
38:37 - run the true statement it will go ahead
38:39 - and run this false statement okay
38:42 - under the else
38:43 - so if we want to make it a app that a
38:46 - user can use
38:47 - this input here we will make it
38:49 - something the user puts in so remember
38:52 - how do we ask a user what they want to
38:54 - put in do you remember it starts with a
38:56 - p and then goes p r o
38:59 - hopefully you remember that was the word
39:01 - prompt and we're going to prompt the
39:03 - user and we we're going to going to ask
39:05 - how is the
39:07 - weather you know so if it runs
39:10 - boom how's the weather and if we say
39:12 - it's
39:13 - rain
39:14 - you're going to see that it says grab
39:16 - your umbrella
39:17 - if we say something else let's say it's
39:20 - sunny it's going to say wear your
39:22 - sunglasses so it's working exactly how
39:24 - we want now if the weather is equal to
39:26 - rain that doesn't really make sense
39:28 - right let's make let's put a y here so
39:30 - it checks for for weather is equal to
39:31 - rainy so let's run this again
39:34 - and now i'll have to put in rainy here
39:36 - so let's put rainy and now it will say
39:39 - rainy equals rainy this is true and then
39:41 - a little console log
39:44 - grab your umbrella so we just made a
39:46 - mini app that can
39:48 - you know fake help you
39:51 - with uh what you should do
39:53 - based on the weather okay if you wanted
39:55 - to make it a fancier app or a more real
39:57 - world app you'll be put at pulling the
39:59 - weather data from a real app so you'll
40:01 - be pulling it from some real app using
40:03 - an api
40:05 - and then you can detect what the weather
40:07 - is automatically and then if it's
40:09 - raining
40:10 - instead of console log grab your
40:12 - umbrella instead of this you could have
40:13 - it send you a text message on your phone
40:15 - saying hey it's going to rain today take
40:18 - your jacket with you so you could use
40:19 - twilio to send you literally a text
40:22 - message sms on your phone so that's
40:25 - freaking mind-blowing right so that's
40:27 - really the benefit of uh learning this
40:30 - and right now i know these are like baby
40:32 - applications we're making and you're
40:34 - look oh i just want to make something
40:35 - bigger please hold on we're going to get
40:37 - to it we're going to build a lot of
40:38 - amazing applications but let's start off
40:41 - and keep it simple and so far you've
40:43 - done a fantastic job let's keep this
40:46 - going all right welcome back so we're
40:48 - going to talk about functions now you we
40:50 - just got done making this baby app what
40:52 - we're gonna do now is i'm going to just
40:56 - essentially comment out this entire app
40:58 - okay because we don't need it all right
41:00 - now that it's commented out i do want to
41:01 - let you know that on the left hand side
41:03 - when you're using this rupple there will
41:05 - be something here and right now this
41:07 - folder is called notes it might change
41:09 - later but what you'll be able to do is
41:11 - you'll be able to go to this folder and
41:13 - pretty much everything that we cover in
41:15 - our playground will be kind of organized
41:18 - here as notes so even though it's like
41:20 - commented out here and kind of hard to
41:22 - see because this file is going to get
41:24 - really messy as we start to code and
41:25 - build more and more things here you can
41:27 - go here miniweatherapp.js which
41:29 - essentially has that exact app that we
41:32 - created and it's just kind of sitting
41:33 - here for your use okay so this code will
41:36 - always be there and available for you
41:39 - i'm gonna go back to my playground here
41:42 - but if you're trying to code along
41:43 - you'll be going to your playground okay
41:45 - this is going to be your playground so
41:48 - make sure that you go to this all right
41:50 - so let's talk about functions because
41:53 - functions are a pretty important part of
41:55 - any programming language and for
41:57 - javascript they are massive so
42:01 - let's go ahead and learn a little bit
42:03 - about functions how do they work well
42:05 - functions are designed to basically run
42:08 - a recipe so they can run multiple things
42:10 - for you at once and it also organizes
42:14 - your code in a nice little way okay and
42:16 - so functions make your life a lot easier
42:19 - so let's go back here so you see how
42:21 - when you create a variable like a
42:23 - variable it can only store
42:26 - like a name or something along those
42:28 - lines what's cool about a function is a
42:30 - function can store
42:32 - blocks of code
42:34 - so for example remember this food app
42:37 - that we made earlier i'm just going to
42:39 - go ahead and comment this out this app
42:41 - that we made earlier i mean this is a
42:43 - lot of lines of code and if i ever want
42:45 - to run this app i have to always
42:47 - uncomment these lines of code or
42:50 - basically write all of these lines of
42:52 - code every single time i want to run it
42:54 - whereas
42:55 - imagine that it was in a function well
42:58 - then in order to run this piece of code
43:01 - all i would have to say is i wouldn't
43:02 - have to uncomment all of those lines up
43:04 - there all i would have to say instead is
43:07 - i could just go run a function that you
43:10 - know says
43:11 - calculate tip amount and then i would
43:14 - just give it its tip because okay so
43:17 - let's say that there was a tip or you
43:19 - know maybe the amount of food was a
43:21 - hundred dollars i just gave it that and
43:23 - then the entire app automatically runs
43:26 - just by me typing in this instead of
43:28 - that entire chunk of code so that's
43:30 - where function comes in so let's go
43:32 - ahead comment out this entire block
43:34 - again with command slash or control
43:36 - slash and i'm going to go down here i'm
43:39 - gonna remove this line i'm gonna start
43:40 - writing our first function
43:42 - so i'll write a first function what this
43:44 - will do is it will make a greeting okay
43:49 - so or say my name so let's do a say my
43:51 - name function okay so let's do say my
43:54 - name
43:54 - and say my name function it will do
43:58 - console.log and it'll just say qazi
44:01 - because my name is qazi okay so that's
44:03 - all it's going to say well let's go down
44:05 - here and i'm going to call and i'm going
44:07 - to hit run and you're going to see that
44:10 - nothing really happened right it didn't
44:13 - actually do anything and to make things
44:15 - less confusing let's also comment out
44:18 - everything that we have here so we just
44:19 - have everything commented out i'll run
44:21 - perfect so we see nothing in our console
44:24 - nothing happened well why didn't it do
44:26 - this so even though i made this function
44:28 - i have to call this function like this
44:32 - and now when i hit run watch what
44:33 - happens boom you can see that it says
44:37 - qazi right over here awesome now let's
44:40 - go on and you know we've done a pretty
44:42 - good job with this function say my name
44:44 - and look at what it does though before
44:46 - we continue and move on this is how you
44:48 - call a function so unlike a variable
44:51 - when you call a function you put open
44:53 - and close parens in front of it okay now
44:56 - this function
44:58 - what it the name of it is say my name or
45:01 - the variable of this function right is
45:03 - say my name this is the name of it and
45:06 - when you call it it runs all the
45:08 - instructions that are inside of that
45:10 - block okay so for example what does that
45:13 - mean what if i had like console.log
45:15 - seller name and say brian
45:18 - and let's also have it say banana
45:21 - whatever right if i run this you're
45:23 - gonna notice that by just calling the
45:25 - function it is running all these four
45:27 - lines of code and it runs them all right
45:30 - see that and then watch what happens if
45:32 - i just comment this out and i run it
45:34 - boom nothing
45:35 - so now all we have to do to run our code
45:38 - is we don't have to comment or uncomment
45:39 - the entire thing we can actually just
45:41 - comment or uncomment that call of the
45:43 - function okay this is called
45:45 - calling your function so whenever i say
45:47 - call your function that basically means
45:49 - you write the name of the function with
45:51 - open close parens cool
45:53 - now
45:54 - let's say that we want this function to
45:56 - be more dynamic because right now it's
45:58 - just saying quasi-raphael brian banana
46:00 - so it will never actually say your name
46:03 - right
46:04 - so what how can we handle that how we
46:07 - can handle that is actually let's remove
46:09 - all of these lines right
46:10 - and
46:11 - we're gonna say hey we want you to say
46:13 - like a dynamic name that the user gives
46:15 - you okay well it's gonna go hey i don't
46:18 - know what name is in this case what
46:19 - we're gonna do is we're gonna also put
46:21 - that here so this function say my name
46:24 - okay has an argument
46:26 - called name and it's logging that
46:30 - that argument out okay so then if i say
46:33 - quasi here and i run this
46:35 - it's going to print out quasi it's going
46:37 - to log out quasi but what if i say lance
46:40 - here what is what is it going to do
46:42 - let's try it
46:44 - and boom lance because i call this
46:46 - function okay
46:48 - and here's how it works it goes here and
46:50 - it puts in the name lance
46:52 - and then it goes here and puts in the
46:54 - name lance and logs it out to the
46:57 - console that's how
46:59 - a function
47:00 - works okay this is a function with one
47:03 - argument so let's if i take you back to
47:05 - our older function that function has no
47:07 - arguments okay let's make let's copy
47:10 - this and let's paste this here okay and
47:13 - then let's make this the dynamic one
47:15 - all right
47:16 - say my name yeah so this is say my name
47:19 - with no arguments this is say my name
47:21 - with an argument okay let's give them
47:23 - different names maybe so this is say my
47:25 - name maybe let's just call it say my
47:27 - name two for now okay to call this
47:30 - function what are you gonna have to do
47:31 - so if you wanna call this function right
47:33 - here say my name to
47:35 - how will you
47:36 - call it okay take five seconds and see
47:39 - if you could call it okay and i'll give
47:41 - you a hint it's what you did on line
47:43 - seventy
47:44 - five
47:45 - four three two one
47:48 - all right let's do it so i'm gonna say
47:50 - say my name
47:51 - to
47:52 - and in this i'm actually going to give
47:54 - it a name i'm going to give it an
47:55 - argument
47:57 - and you can see that now it will print
48:00 - out kazur if i say kevin
48:02 - and run it you'll see that it'll
48:04 - actually say kevin right here okay and
48:06 - we'll comment outline 70 where it says
48:09 - say my name because we're just running
48:11 - the function that we wrote on line 72
48:13 - and there's a nice little toggle that
48:15 - you could toggle to
48:17 - and it'll basically just
48:19 - collapse everything that you have inside
48:21 - of the function okay
48:22 - so that's kind of a nice way to do
48:25 - things so moving forward pretty much
48:27 - everything that we do
48:29 - will majority of the times do it in a
48:31 - function it keeps your code clean
48:34 - concise compact and it's just a better
48:36 - way to do things and we'll we're now
48:38 - going to step it up
48:40 - and make things that are a little bit
48:42 - more advanced and do them with the
48:44 - function okay so let's do that next so
48:46 - i'm gonna comment out this line here say
48:48 - my name
48:49 - two okay i'm gonna comment that out
48:51 - let's go down let's make another
48:53 - function
48:54 - and we'll call this function greeting
48:56 - okay so greeting
48:58 - will take in
49:00 - um
49:01 - your name
49:02 - okay
49:03 - it'll ask the user it'll basically need
49:06 - the name of the user and then what
49:08 - greeting will do is it will say well
49:10 - console.log it okay and it'll basically
49:12 - say hi
49:15 - name
49:16 - nice to meet you okay
49:19 - and if i run greeting so watch what's
49:21 - going to happen so let's say i run
49:22 - greeting and i give it my name and i say
49:24 - my name is quasi and let's run it and
49:26 - let's watch what happens okay it says hi
49:30 - nice to meet you
49:32 - hi name nice to meet you but that's
49:33 - weird it says name here and it
49:36 - says exactly name that's not what i
49:38 - wanted to say i wanted to say qazi so
49:40 - how do i do that
49:41 - um
49:43 - what we're going to say is
49:45 - hi
49:46 - plus
49:48 - name
49:49 - okay and watch what happens so that
49:50 - allows you to concatenate strings
49:52 - together the plus sign so watch if i
49:54 - have hi
49:55 - and then i put a plus sign here and i
49:58 - say
49:58 - kazi
49:59 - and if i hit execute you can see it says
50:01 - hi kazi
50:03 - but it's saying it right next to each
50:04 - other so we want to have a little space
50:06 - in there so i'm going to say hi space
50:08 - plus kazi like this okay so this is high
50:11 - and then one empty letter empty space
50:13 - here hit execute now it says high quasi
50:16 - with the space
50:18 - in the middle
50:19 - okay
50:20 - perfect
50:21 - so
50:22 - we're gonna go hi
50:23 - space plus name plus
50:26 - all of this stuff that we wrote here
50:28 - comma nice to meet you so let's put that
50:31 - there okay this will concatenate and get
50:34 - our greeting ready so we'll say greeting
50:35 - is equal to
50:37 - or we'll just say greet is equal to that
50:40 - okay and then in console log we'll just
50:43 - print out whatever greed is so let's hit
50:45 - run and you can say hi kazi nice to meet
50:48 - you well what if i change my name to
50:50 - lance
50:51 - it will go
50:52 - high lance nice to meet you so it's
50:55 - working as expected that's really good
50:58 - but it still doesn't look super
51:00 - nice how this is with the plus sign and
51:02 - it's kind of annoying you have to like
51:04 - put this space there and it just feels
51:06 - unnatural so
51:07 - this is why i want to show you template
51:09 - literals because they make your life a
51:11 - lot easier so instead of this code
51:14 - saying greedy is equal to blah blah
51:15 - let's write it in template template
51:17 - literals okay so let's go greet equals
51:20 - and when you do template literals you
51:22 - always have to do these backticks on
51:24 - your computer okay so you always start
51:26 - off with the backticks okay so let's put
51:28 - a backtick here so template literals
51:30 - now what i'm going to say is
51:32 - hi
51:33 - name comma nice to meet you and we can
51:37 - make this name dynamic and how we're
51:39 - going to do that we're going to say this
51:40 - name is a javascript part it's not a
51:42 - literal string so how we're going to do
51:44 - that is we're going to wrap it in the
51:46 - squigglies and we're going to put a
51:48 - dollar sign whatever is wrapped inside
51:50 - of the squigglies followed by a dollar
51:52 - sign it will understand as actual
51:55 - javascript okay meaning that now it's
51:58 - going to put this whole thing together
52:00 - kind of like how we were doing here but
52:01 - it this just does it in a much nicer way
52:04 - so now let's do console log great and
52:05 - watch what happens so i'm going to hit
52:06 - run hi lance nice to meet you what if i
52:09 - say
52:11 - amber heard haha
52:13 - you guys saw what has happened right the
52:14 - news is out or johnny depp okay let's go
52:18 - here by the way which side were you on
52:20 - were you on amber heard side or johnny
52:22 - depp site comment below let me know i'm
52:24 - curious to know your thoughts i think
52:26 - that
52:27 - she kind of deserved to lose and um
52:30 - you know it's nice that johnny got
52:33 - he was awarded 10 million dollars she
52:34 - was awarded 2 million
52:36 - so basically she owes johnny depp 8
52:40 - million dollars which is more than her
52:42 - net worth so
52:44 - she's not gonna have a lot of fun paying
52:46 - that off uh but regardless that's
52:49 - neither here nor there
52:51 - let's get back to what you came here for
52:53 - so going back to this okay i got my
52:55 - greeting i can do johnny depp so it's
52:57 - like hi johnny depp nice to meet you so
52:59 - hopefully you understand how this
53:01 - function is working so let's go to the
53:03 - semi name function right this is a
53:06 - function called say my name and it has
53:10 - no arguments okay in other words it has
53:13 - zero arguments so i want you to also
53:15 - learn how to speak the lingo because
53:17 - you're gonna start hearing this a lot uh
53:19 - you know write a function call blah blah
53:22 - and it should have x arguments so this
53:24 - is it's a function called say my name
53:26 - and has zero arguments okay
53:28 - so i want you to write out the sentence
53:30 - here for this one say my name too so
53:32 - write out a sentence exactly in this
53:34 - format
53:35 - that talks about this and you could even
53:37 - take this a step further and say uh like
53:39 - what does this function do and you can
53:41 - say it
53:42 - prints out
53:44 - your name to the console or it logs out
53:48 - i'm just from the python world a lot of
53:50 - the a lot of my life and so you say
53:52 - print there a lot so it logs out your
53:54 - name to the console okay so that's it
53:56 - okay console.log quasi and so this is
53:59 - like what the function does okay so it
54:01 - does this is what it does
54:03 - and you could write for semi name two in
54:06 - the exact thing okay what it is and what
54:08 - does it do actually try to pause my
54:10 - video so you can write it in english
54:12 - what you think this does the lingo is
54:13 - important to understand okay so in chess
54:15 - you have to learn something called chest
54:16 - notation this is kind of like that but
54:18 - for coding so then we have a language
54:20 - that we can build upon and get better
54:22 - every single time so take about five to
54:23 - ten seconds i'll count down now or just
54:25 - pause the video five four three two one
54:29 - cool so here's what we're going to do
54:31 - here this is a function
54:33 - called okay the name of this function is
54:36 - say
54:37 - my name to it has
54:40 - one argument and if you want to be extra
54:42 - special and so you could say it has one
54:44 - argument called name and then what does
54:46 - it do
54:47 - it logs out your name to console so it's
54:51 - a good habit to get in
54:53 - in later in life this habit if you keep
54:56 - doing this right now will translate to
54:59 - you writing documentation for your code
55:01 - so one is gonna help you develop just a
55:03 - better skill and two it's gonna help you
55:05 - understand and develop the skill of
55:07 - documentation and reading and
55:09 - understanding the documentation which is
55:11 - gonna be really valuable when you get a
55:12 - job as a developer because you're gonna
55:14 - need to know these things and that makes
55:16 - you a lot more valuable that's what we
55:18 - did for greeting okay this is what we
55:19 - did for this greeting we introduced you
55:21 - to the concept of template literals and
55:23 - this is going to be very helpful for you
55:25 - especially when you're making a couple
55:26 - of games javascript games that we're
55:28 - going to show you later like for example
55:30 - rock paper scissors all right so let's
55:32 - go ahead and move forward now all right
55:35 - now we're going to create another
55:36 - function okay together so because i want
55:39 - you to constantly get a lot of practice
55:40 - with functions okay and this function is
55:43 - going to have multiple arguments so you
55:45 - can actually have more arguments than
55:46 - one okay so you can have one argument or
55:49 - two arguments um or 10 arguments or 20
55:52 - however many you want but generally
55:53 - between one to five is like pretty you
55:56 - know
55:57 - reasonable and you don't really want to
55:59 - add more arguments just for the sake of
56:01 - it so let's go function and we're going
56:02 - to create a function called sum and i
56:04 - want you to try this out so it's like if
56:06 - i want to have a function sum and it
56:08 - will have two numbers that it'll take in
56:11 - as an input okay so it'll have two
56:13 - numbers that'll taken as an input a and
56:16 - b and what this function should do is
56:18 - return the sum of these two numbers so
56:21 - you'll also be introduced to the concept
56:22 - of the keyword called return okay
56:25 - there's a special keyword in javascript
56:27 - and generally with your functions you
56:29 - never you don't really want them to
56:31 - console log things you want them to
56:32 - return things so you can do something
56:34 - with them later so we're gonna start
56:37 - getting in the habit of return and then
56:39 - eventually you'll start seeing why
56:41 - returns are actually helpful and why
56:42 - they matter all right so let's have this
56:44 - return a and b the sum of them okay so
56:48 - we're gonna do return a plus b and i'll
56:51 - i'll show you why we're using the word
56:53 - return instead of something like
56:55 - console.log and let me do that with a
56:57 - simple example here so first let's just
57:00 - run this function so when i do sum and
57:02 - if i give it one and two it should take
57:05 - one and two so it should replace a with
57:06 - one b with two so it should do return
57:09 - one plus two that's effectively what
57:11 - happens so it should return can you
57:14 - guess
57:14 - three okay that's right so that's what
57:16 - it should return but watch what happens
57:18 - when i run this okay and let's um
57:20 - comment out this greeting because we
57:21 - don't need to run that anymore and let's
57:23 - run this function well nothing went to
57:25 - the console so it
57:27 - ran something happened but nothing ever
57:30 - went to the console interesting
57:32 - well it's not being shown so let's go
57:35 - ahead and show it so let's do
57:36 - console.log and run it and now you can
57:39 - see that it says three now watch what
57:41 - happens if i do num1 and i want to store
57:44 - this result somewhere so i want to do
57:46 - one comma two okay so i want to store
57:49 - the sum of one and two in a variable
57:51 - called num1 okay so let's delete this
57:53 - line now and let's run and it got stored
57:56 - and now we'll we'll log it out so the
57:58 - console.log and i'll say num1 okay let's
58:01 - run it and it got the sum three okay it
58:04 - stored three into this variable called
58:06 - num1 and then we console log it out and
58:08 - boom we see it right there now to prove
58:10 - my point if we hadn't done return a plus
58:14 - b instead imagine we just did console
58:16 - log a plus b watch what what's gonna
58:19 - happen let's run this and we get an
58:22 - error and this error says undefined so
58:25 - this prints out the console log right
58:27 - but when we run
58:29 - so this line goes and it goes 3 but then
58:32 - this over here says undefined because
58:34 - what's being stored in num1 is undefined
58:37 - we don't have a number like three that's
58:40 - actually being stored here we're console
58:42 - logging something and we're trying to
58:43 - store console.log here and you can't
58:45 - store that so that's why what you want
58:48 - to do here is return a plus b if you
58:51 - don't do a return then this function is
58:53 - essentially useless and it can't be used
58:55 - in other places and do actual helpful
58:58 - things okay so that's why what we need
59:00 - to do is actually change this to a
59:03 - return a plus b
59:05 - just like this okay now when we do num1
59:07 - it actually does get used okay let's
59:10 - comment out both of these lines now and
59:12 - what we're going to do is we're going to
59:13 - go back all the way up to when we made
59:15 - that little baby tip calculator thing so
59:18 - i'm going to copy this entire thing and
59:20 - we're going to turn this into a function
59:21 - so i copied it okay from line 17 to line
59:24 - 24 and we're going to paste it here
59:27 - right there let's hit run so nothing
59:29 - should come out to the console so that's
59:30 - perfect that's exactly kind of where you
59:32 - should be right now now i'll go and
59:35 - uncomment this and um
59:38 - we won't be using these prompts anymore
59:40 - because that's kind of uh you know when
59:42 - you're using functions and prompts is
59:44 - like rarely ever used it's kind of an
59:46 - easy way to give a front end to the app
59:48 - you know just kind of for you to play
59:49 - around with but majority of the times
59:51 - you wouldn't really use prompt that much
59:54 - but first let's just focus on turning
59:56 - this into a function so we're going to
59:57 - say is going to be a function and we're
59:59 - gonna call it calculate uh tip and food
60:03 - amount something like that okay or let's
60:06 - just call it calculate total food total
60:09 - okay so this is gonna calculate the food
60:11 - total with the food amount plus however
60:14 - much the tip was okay we won't have the
60:16 - alert statement anymore so let's remove
60:18 - that and this function is dependent on
60:20 - two things how much you paid for the
60:22 - food and the second thing it's dependent
60:24 - on is how much you want to give as a tip
60:27 - so these two are going to be arguments
60:29 - that we're now going to pass and so i'm
60:30 - going to say food and tip percentage all
60:33 - right so basically here's what we're
60:35 - going to do right so tip whatever the
60:37 - user gives we're going to take that tip
60:39 - we're going to divide that by
60:41 - 100 okay so if the user says hits 20
60:45 - then we're going to take that tip
60:46 - divided by 100 and turn it into an
60:49 - actual percentage which would be 0.2
60:52 - and then we'll multiply this now we're
60:54 - going to do the same thing for food
60:55 - we're not gonna have this number
60:56 - prompting anymore okay we're gonna
60:58 - remove that we're gonna say whatever
61:00 - food is gonna be whatever food is here
61:02 - so in other words we actually don't even
61:04 - need food because the user is just
61:06 - passing that information down so
61:08 - food is going to be a given tip is going
61:10 - to be a given we're going to calculate
61:12 - the tip percentage based off of the
61:13 - given tip and then we're going to do the
61:14 - same thing so take the food multiply by
61:17 - the tip percentage that'll give us the
61:18 - tip amount and then the total will be
61:20 - the food plus the two amount and then we
61:22 - can console log it out if we want to and
61:25 - in this case since we're being adults
61:26 - now not a little children anymore we're
61:28 - going to do returns total
61:31 - let's go here and let's indent this so
61:33 - you can grab this and just hit tab
61:35 - and make sure that this function has a
61:37 - squiggly that opens it and a squiggly
61:40 - that closes it okay that's pretty
61:42 - important whenever you're writing
61:43 - functions so i'm just hitting back or
61:46 - you can just hit format at the top and
61:47 - they'll automatically format your code
61:50 - for you if you hit this and formatting
61:52 - just means it makes it look nice and
61:54 - pretty okay so i have calculate food
61:56 - total it takes in food and it takes in a
61:58 - tip so let's actually try this last
62:00 - console log and we'll call the function
62:03 - calculate food total and we'll say the
62:05 - food was 100 and the tip was let's say
62:10 - 20
62:11 - let's go ahead and hit run now let's see
62:13 - what we get and we get back 120 so now
62:15 - you can start to see the power of
62:17 - functions that
62:18 - they can do a whole bunch of things very
62:21 - quickly and so you just call it in a
62:22 - very easy way give it two inputs and
62:24 - boom your function is up and running now
62:28 - let's take this a step even further so
62:31 - remember when we created a sum function
62:33 - c if you can replace this line 104 okay
62:37 - so you can leave the total here but see
62:39 - if we can replace this and this instead
62:42 - of using this plus sign here and see if
62:44 - you can use a sum function to calculate
62:46 - the total so i'll give you five seconds
62:48 - you can pause the video and try to do it
62:50 - yourself okay so let's go five
62:53 - four
62:54 - three
62:55 - two
62:56 - one
62:56 - all right let's give this a try so let's
62:58 - go here and instead of using a plus sign
63:00 - what i'm going to say is i'm going to
63:01 - say sum and we're going to give it food
63:04 - all right so it's going to be the food
63:05 - amount and then we're going to give it
63:07 - the tip amount so now we're using the
63:10 - function that we created ourselves
63:12 - earlier and then we're going to store
63:14 - the result of that in a variable called
63:15 - total and then we're going to return
63:17 - that total so let's go ahead and run
63:20 - this function and we should still get
63:22 - back 120. perfect very good let's change
63:25 - the price of this 300 let's try it again
63:28 - you can see that our our tip is 360
63:31 - dollars now okay and it's working
63:34 - perfectly now i do have to show you the
63:36 - modern way of writing a function because
63:38 - you're gonna start seeing that in a lot
63:40 - of different places with javascript and
63:41 - so this is the es6 way and this is these
63:45 - are called arrow functions
63:47 - so
63:48 - um and also the variables let's let's uh
63:51 - change them okay so let's go ahead and
63:53 - do these variables in a way you know we
63:55 - you we're using the var let cons so i
63:57 - know that we didn't use it for a couple
63:58 - of these other things but that's again
64:00 - just so you can start understanding how
64:02 - all of this stuff works in an easy way
64:04 - but we're going to do const tip
64:06 - percentage all right we'll do const tip
64:09 - amount you could do cons or let either
64:12 - should be fine okay then we're gonna do
64:13 - const total three variables that we're
64:14 - declaring okay so constant let and you
64:16 - should you should be fine either way
64:18 - remember if you do something const that
64:20 - means you're not changing that variable
64:22 - later and if you do
64:24 - let that that's basically saying hey i
64:26 - know i'm making this variable that i
64:28 - know i'm going to change at a later
64:29 - point i'm going to change its definition
64:31 - there we go let's run this function
64:32 - again and let's just make sure that it
64:34 - works all right so now with arrow
64:35 - functions how they work is they kind of
64:37 - look like this okay so
64:39 - um i'll make we'll we'll make this
64:42 - function sum but we'll do it with an
64:44 - arrow function okay so let's do some i'm
64:46 - going to say const i'm going to say some
64:48 - arrow is equal to
64:50 - like that
64:52 - so it's equal to and then you put in the
64:54 - arguments all right so this is think of
64:56 - this like a variable and then you put
64:58 - the arguments here so here i'm going to
65:01 - say a comma b and then this arrow here
65:03 - so which is equal and greater than sign
65:06 - open close squigglies and then inside of
65:08 - there i'm just going to say return a
65:10 - plus b so that's how you can write an
65:13 - arrow function
65:14 - and basically write the same thing but
65:16 - an error function now here's the cool
65:18 - part about the error function okay
65:19 - because right now you're probably like
65:20 - wait what's the benefit of this why am i
65:22 - writing this uh when i can clearly write
65:25 - it this way and this looks like easier
65:27 - to kind of see and understand because it
65:28 - says function error functions can look
65:30 - really nice so here's what i mean by
65:32 - that they have a superpower called
65:34 - implicit returns where if you remove
65:37 - these squigglies you don't even have to
65:38 - write the keyword return it will
65:40 - automatically return
65:42 - that and so that
65:44 - sum function that you wrote can
65:46 - essentially be on the same line that's
65:49 - some function that you wrote so it's so
65:51 - nice and easy because your entire
65:52 - function just gets written out like this
65:54 - so you know it'll be like right i have a
65:56 - function called sum it takes in two
65:57 - arguments a and b and it returns their
66:00 - sum okay so this is an example of an
66:02 - implicit return so arrow function
66:06 - with implicit return okay that's an
66:08 - example of that and again i'll just call
66:10 - this function some arrow so it's clear
66:13 - for you
66:14 - and then this is
66:16 - arrow function with explicit return okay
66:19 - let's put it here important for implicit
66:23 - return remove
66:25 - squigglies
66:27 - okay so squigglies are these these curly
66:30 - braces or i can say curly braces all
66:32 - right there we go
66:34 - so that's important to do if you want to
66:36 - have implicit return where you don't
66:39 - want to say that return so let's try
66:41 - this some arrow function that we created
66:42 - and see if it works we'll do console.log
66:44 - and i'll say sum arrow and we'll give it
66:47 - 10 comma 40 50. and we should get back a
66:51 - 60. let's see if we get that back it
66:53 - says it's been declared because i'm
66:54 - defining it twice and remember i called
66:56 - it const so if i'm calling it a const
66:59 - here it's not going to let me redefine
67:01 - this function later with the same
67:03 - variable so i'll just call it some arrow
67:05 - 2 and call the function some arrow 2
67:07 - here and we'll hit save command s or
67:10 - just hit run and boom you see the sum of
67:12 - these two numbers is indeed 60. so the
67:15 - sum function is working so it's a really
67:17 - nice way of creating your function so
67:19 - for bonus points and for being fancy i
67:22 - want you to always try to use the arrow
67:24 - function because that's the modern way
67:25 - of doing javascript and you'll see that
67:28 - in majority of the code basis so i'd
67:29 - rather you just get in the habit of
67:31 - doing that now to wrap this exercise up
67:34 - i'm going to leave you off with an
67:36 - exercise okay to wrap up really the sum
67:38 - functions and i want you to practice
67:41 - with functions now here's what i'm going
67:42 - to have you do so in files on the left
67:44 - hand side okay i want you to go inside
67:46 - of functions and go inside of something
67:50 - called sum and then there's going to be
67:51 - an exercise folder in here and a
67:53 - solution folder so don't go into the
67:55 - solution for this exercise yet make sure
67:57 - to go into the exercise if you're
68:00 - stuck and you can't make progress and
68:02 - you can't really you're stuck then and
68:04 - only then go in solution but don't go in
68:06 - there as the first thing and in this
68:09 - exercise i'll go and go to script.js
68:13 - okay
68:13 - in here
68:15 - you will see that you have these
68:17 - exercises like make a function called
68:19 - add which is the same as sum so you
68:21 - should have no problem making this
68:22 - function make a function called subtract
68:25 - make a function that divides two numbers
68:27 - and make a function that multiplies two
68:29 - numbers okay so all of these should take
68:31 - in two arguments sub add
68:34 - div and mul
68:35 - they should do what they say here and so
68:38 - we have some notes for you and what you
68:40 - got to do so the to-do's are written out
68:41 - for you here and this is the normal way
68:44 - of doing it and for bonus points if you
68:46 - want to be fancy use the es6 syntax for
68:49 - error functions to maybe even convert
68:51 - these into error functions if you want
68:53 - to be a real boss and then at the bottom
68:55 - make sure you also console log all of
68:58 - these so
68:59 - meaning you print out the result of all
69:02 - of these okay or do some kind of call
69:04 - now where you're going to have
69:05 - difficulty is running this file so
69:08 - you're going to be like how do i run
69:09 - this file let me show you okay so over
69:12 - here we have something for you can
69:14 - exercises and if you want to see this in
69:16 - full screen you can always hit this
69:17 - button open in a new tab that'll open
69:19 - this entire thing in a new tab that way
69:21 - you can like guaranteed see it right
69:23 - just in case some certain things are
69:24 - hidden and what's cool about repple is
69:27 - your code is already deployed on the
69:29 - internet meaning like this is not just
69:31 - on your local computer you could run
69:33 - this anywhere like you could send this
69:36 - link to your buddy and they could just
69:38 - run this
69:39 - at their place right like because it's
69:41 - online this is online so they can run it
69:43 - and like look at your code and so if you
69:44 - made something you could be really proud
69:46 - of it and show it to them so we have
69:48 - this project solutions folder right so
69:50 - this is where the solutions will be but
69:52 - for functions here's the sum right so
69:54 - you click the sum now if you do
69:56 - console.log
69:57 - hello from the sum file
70:01 - okay or some exercise or whatever let's
70:03 - just say that here and i'll hit save
70:05 - if you click sum
70:07 - it will say hello from the sum exercise
70:09 - so meaning anything you console log here
70:12 - will show up just make sure if you want
70:14 - to run this file again you're going to
70:16 - have to click
70:17 - this sum link over here and that will
70:20 - run your exercise okay
70:22 - and also another thing i want to show
70:24 - you is this is just html css javascript
70:27 - so what's nice about this is you could
70:29 - just download this folder as zip okay
70:32 - and let's go ahead and open it
70:34 - so i'm going to go ahead and open this
70:36 - and go inside of here and you could
70:38 - click this index.html and just run it
70:40 - and it will run on your computer locally
70:43 - so just so you understand that this is
70:45 - real world right just because we're
70:47 - doing it on online website doesn't mean
70:49 - you can't use it in real life you could
70:51 - just download that folder and run it and
70:53 - now it's on your local computer so
70:55 - that's just to kind of show you that all
70:57 - your options and everything that you
70:59 - need is available at your disposal all
71:01 - right so but we're just coding here for
71:04 - the sake of simplicity and replica just
71:05 - makes everything really really easy okay
71:08 - so that's it go ahead now and do this
71:10 - exercise and once you return from doing
71:13 - this exercise we're going to move on to
71:15 - starting to talk about different types
71:16 - of data data types like arrays objects
71:19 - things of that nature okay so good luck
71:21 - have fun
71:22 - and go and crush this and i'll see you
71:25 - in a minute
71:26 - all right so now let's jump in and start
71:28 - talking about arrays and right before we
71:30 - do that let's go ahead and comment out
71:32 - every single line
71:34 - that is still running so line 108 for me
71:36 - i'm going to comment out and i'm also
71:38 - going to comment out line 121 and so
71:40 - when i hit run nothing should be coming
71:42 - out to my console perfect my console is
71:45 - looking crispy clean that's exactly what
71:47 - we want
71:48 - so
71:49 - let's go ahead and start working on
71:52 - arrays i'm going to go here i'm going to
71:54 - say arrays
71:56 - okay
71:57 - and why do you need a raise well what if
71:59 - you want to hold multiple different
72:00 - things how are you going to do that so
72:02 - if you have groceries
72:04 - right in a variable you could only have
72:05 - one grocery like a fruit but arrays
72:07 - allow you to have multiple things so for
72:09 - example i could have an array that has a
72:11 - banana
72:12 - it also has
72:15 - apple
72:17 - okay i can also have orange
72:20 - okay
72:21 - we can also have a pair
72:23 - all right i could have groceries like
72:25 - this and you could write the words too
72:26 - so this is just a string and i decided
72:28 - to put an emoji in it but you could
72:30 - decide to put like the actual word pair
72:32 - here if you want but i just think that
72:34 - this looks
72:35 - prettier right so that's why i'm having
72:37 - it like this
72:39 - now if i'm doing
72:41 - all right and remember to just put a
72:43 - const here okay so we're just going to
72:44 - say const groceries and here we go we
72:48 - have all of these you know we got a
72:50 - banana we got an apple we got all this
72:53 - awesome stuff in our groceries right now
72:54 - let's console log groceries
72:57 - okay
72:58 - and let's hit save and let's see what
73:00 - happens i'm going to move this here and
73:02 - boom you can actually see that it
73:04 - printed out all of the groceries okay
73:06 - now how do i get just a banana if we if
73:10 - i want right so if you click it it shows
73:12 - you the zeroth element is a banana the
73:14 - first is the
73:15 - apple the second is orange and the third
73:18 - is pear okay and remember everything in
73:20 - coding when you start counting it
73:22 - usually starts from zero
73:24 - so it goes zero one two three
73:26 - and the length of this is four okay
73:28 - because there are four items in here
73:30 - four grocery items now
73:33 - how can we get just a banana if we want
73:36 - just a banana how do we do that well
73:38 - here's what we do we go console.log
73:40 - groceries we put this bracket and we do
73:43 - zero okay and let me hit save and let's
73:46 - see boom we just got the banana okay
73:49 - well what if i want an apple what do i
73:51 - do can you take a guess i'll give you
73:53 - five seconds see if you could write that
73:55 - yourself five
73:57 - four
73:58 - three
73:59 - two one
74:01 - all right let's do it so you would have
74:03 - to put in a one here okay so boom let's
74:05 - do that let's do a one let's hit save
74:08 - and boom you see we got an apple now how
74:11 - would i get not the orange but the pair
74:14 - so how would i get the pair make sure to
74:16 - count correctly zero one two three right
74:19 - how would i get the pair what do i need
74:20 - to put in these brackets to get that
74:22 - pair i'll give you five seconds here
74:24 - five four
74:26 - three two one all right let's do it
74:30 - we would do three
74:32 - okay
74:33 - and you can see that we got the pair
74:36 - okay
74:36 - so again this is zero this is one this
74:40 - is two and this is three okay if we want
74:42 - to get the orange we would simply
74:45 - pop in a two here okay let's give that a
74:48 - try make sure you're coding along with
74:50 - me and you're just exercising with me
74:51 - okay make sure you're not just passively
74:53 - watching this make sure you're coding
74:55 - along with me every single step of the
74:57 - way that's how you're going to get
74:58 - better so this is called indexing okay
75:01 - this is like you grab one of the indexes
75:04 - okay so here i'm getting grabbing
75:06 - grab the second
75:09 - or like the third index in this case
75:11 - okay um
75:13 - or second index okay grab the second
75:15 - index
75:16 - that's basically what we're doing here
75:18 - or grab the second item if you want to
75:20 - say it in a more human language but in
75:22 - programming this is a zeroth index this
75:24 - is the first second third so if you ever
75:27 - hear like hey it's in the first index or
75:28 - the third index that just means where
75:31 - its position is in an array okay and
75:34 - arrays are really really cool and i'll
75:37 - show you a lot more about them soon all
75:40 - right so take a look at that right at
75:42 - the bottom you can see
75:44 - that and let me remove let me cons let
75:46 - me comment out this line here okay and
75:49 - let's run it again
75:50 - and i'll move this up over here it's
75:53 - easier to see but take a look at this
75:55 - right over here
75:57 - before we add the cookie and we console
76:00 - log this out notice that there's no
76:02 - cookie in here right but after we do the
76:05 - push and we console log it out watch
76:07 - what happens
76:09 - now we have a cookie that's added that
76:11 - wasn't there before so that's what push
76:13 - does push adds things on to the end of
76:16 - the
76:17 - array okay so try adding something else
76:21 - try adding a chocolate try adding
76:24 - uh a blueberry try adding something and
76:26 - see what happens and see if you could do
76:28 - it yourself okay so add something more
76:30 - here let's you give this a try so i'll
76:31 - give you five seconds five four
76:34 - three two one all right now let's try
76:37 - adding something together so i'm gonna
76:38 - say groceries dot push okay and we're
76:41 - gonna say
76:42 - i'm gonna do let's do blueberries
76:45 - okay
76:46 - and then i'll console.log here paste it
76:49 - here hit save and run
76:52 - and check it out we got
76:54 - we got one
76:56 - the regular
76:58 - uh groceries array
77:00 - then we got this with the cookie this
77:02 - time okay and then we push the blueberry
77:05 - and you can see there's a blueberry at
77:07 - the end there
77:09 - so that's how the push method works okay
77:11 - great so let's um
77:14 - comment out
77:15 - all of these for now all the console
77:18 - logs so if you run your code you should
77:20 - see basically nothing okay it should be
77:22 - empty just like this
77:23 - perfect now what we want to do is we
77:26 - want to
77:27 - try grabbing like what if i only wanted
77:30 - the banana
77:32 - okay what if i only wanted the banana
77:35 - and the apple
77:36 - okay those are the only two things or
77:38 - the orange and the pear and that's all i
77:40 - wanted okay
77:42 - well for this there is a method
77:45 - called
77:46 - slice
77:47 - okay so we're going to do that so we're
77:49 - going to says groceries
77:51 - and i'm going to say slice and i'm going
77:53 - to say 0 to 2 and let's see what happens
77:55 - okay and let's make sure we do console
77:58 - wrap this in console.log because
78:00 - otherwise it won't show it to the screen
78:02 - let's hit command enter or ctrl enter
78:04 - and boom look at that we're getting
78:06 - banana and apple so it's starting from
78:10 - zero including zero okay so basically
78:13 - what we're saying is start from zero
78:16 - inclusive
78:19 - and
78:20 - up to
78:21 - two okay but but not including two
78:25 - okay so basically it's giving you the
78:27 - the index this is giving you is either
78:29 - zero or one that's the index it's giving
78:31 - you so it's either giving you this
78:33 - or that okay so if you want to get the
78:35 - first two elements you can do it like
78:37 - this okay up to two if you want to get
78:39 - three elements you do this
78:41 - okay so if i run this it's gonna give me
78:43 - three elements if i do four and run it
78:46 - watch what happens it's gonna give me
78:47 - pretty much all of the elements right if
78:49 - i hit five it's gonna give me the cookie
78:51 - as well that that we added and if i do
78:55 - six it's going to give me all the way up
78:57 - until the blueberries that we've added
78:58 - because we still have the push grocer's
79:00 - not pushed there
79:01 - boom so you can see the blueberries so
79:03 - when i do zero to six it's gonna go from
79:06 - zero to actually the fifth index and
79:08 - give me
79:10 - up to that point cool all right now
79:12 - question for you what if i wanted not
79:15 - from zero but if i want it from
79:18 - right here the pair
79:20 - until the blueberry so what if i wanted
79:22 - this part of
79:25 - the array can you splice that and get
79:27 - that out of the array for me please take
79:29 - a few seconds take five seconds
79:31 - five four three two one and let's work
79:36 - on it together okay so i'm going to try
79:39 - and i'm going to do okay let's do up to
79:42 - six
79:44 - one two three four five
79:46 - okay like that
79:48 - this is just an example
79:50 - so let's do console.log
79:52 - and we're going to do groceries dot
79:54 - slice and i'm going to say
79:57 - so let's actually count together okay so
80:00 - we have
80:01 - 0
80:02 - 1 thank you baby appreciate it
80:05 - 2
80:06 - 3 okay so basically we're going to say
80:09 - give us from 3
80:11 - 2
80:12 - 4
80:14 - 5
80:15 - and 6
80:17 - but it's going to go up until five
80:20 - okay
80:21 - perfect so let's go ahead and do that so
80:24 - i'm gonna go
80:25 - zero
80:26 - sorry three two six and let's see if
80:29 - this gives us what we want so i'm going
80:31 - to hit run and boom it gives us from a
80:34 - pear
80:35 - to a blueberry let's try another example
80:37 - okay keep doing this with me don't get
80:39 - lazy on this keep trying this with me
80:41 - while i take a sip of my water that
80:43 - my girlfriend brought me but try getting
80:45 - me apple to a pair okay try getting me
80:49 - this
80:50 - right over here okay take a second
80:55 - um and see if you can get me those three
80:58 - right here okay so take about five
81:00 - seconds
81:01 - all right
81:02 - five
81:03 - four or take take a little bit longer
81:06 - while i sip this water
81:08 - okay
81:14 - so let's give that a try
81:16 - i'm gonna go ahead and do i'm gonna
81:18 - change this to a
81:20 - one because one will get me the apple
81:22 - and it'll be zero
81:24 - one two three and four one ahead of the
81:27 - one that we need okay and let's go four
81:30 - let's hit run
81:32 - and i get apple to appear exactly like i
81:34 - wanted right it was that
81:37 - that's what i wanted
81:39 - and that's what we got
81:42 - perfect
81:44 - very very good very good okay let's keep
81:47 - making progress now all right so now
81:49 - before we graduate from uh slice
81:53 - and if you notice that i changed my
81:55 - shirt i just had to do an interview
81:58 - because they were because my girlfriend
81:59 - is a wow superhero she's candy crush
82:02 - and um they're doing a documentary on
82:04 - her so i had to go do the interview and
82:06 - i had to change my shirt because i
82:07 - wanted something black and my previous
82:09 - shirt was yellow and nice and poppy and
82:11 - so i don't know why i'm telling you that
82:13 - but
82:14 - i thought you should know let's go back
82:16 - all right
82:18 - um so here
82:20 - groceries slice
82:22 - so this is good but before we graduate
82:25 - i'm going to teach you about two
82:26 - different array methods okay so there's
82:28 - a couple of array methods that i want
82:29 - you to know so
82:30 - we went over slice we went over push
82:33 - i want you to learn index of and i want
82:37 - you to learn
82:39 - uh length okay
82:41 - this is probably the most like one of
82:44 - the most common ones length uh so let's
82:46 - just go through it together real quick
82:48 - so now i'm going to say console.log and
82:50 - we'll do groceries okay
82:53 - and i'm gonna do index of and what index
82:56 - of does it it will give me the index of
82:59 - these fruits okay
83:01 - so let me just comment out these i
83:03 - comment these uh slices out here so i'm
83:06 - going to hit run
83:08 - let's just do
83:09 - let's just run that one so we can see
83:11 - all of our
83:12 - groceries or fruits
83:14 - perfect and so index of what it's going
83:16 - to do is if i ask for the index of
83:18 - orange it's going to literally give me
83:19 - what the index of that is so can you
83:20 - tell me what the index of the orange is
83:22 - for example banana is zero apple is one
83:24 - so orange is
83:26 - you guessed it too
83:28 - so let's see what it says
83:30 - all right so let's uncomment these lines
83:32 - and let's go here and we're going to pop
83:34 - in orange here
83:36 - okay we're going to say hey what's the
83:38 - index of this orange let's run it
83:40 - and i just gave back 2.
83:42 - all right let's ask it about the pair
83:45 - and let's run it and it gave back three
83:47 - because this is three okay so that's
83:49 - what index of does helpful to kind of
83:51 - know you won't be using it too often i
83:53 - mean honestly when i'm coding majority
83:55 - of the times i don't use it but i just
83:57 - thought since this is the array section
83:58 - i cover these methods because they're
84:00 - going to be helpful for you all right
84:02 - i'll comment this out for now so index
84:04 - of and then the other method you need to
84:05 - know is dot length okay so that one is
84:08 - going to be important so let's go ahead
84:09 - and do console.log
84:12 - groceries and can you guess what length
84:13 - is going to tell you
84:15 - dot length
84:16 - length starts from 1
84:19 - and so it will take the overall length
84:21 - of this so however many items are in
84:22 - here
84:23 - is going to give you that back so let's
84:25 - count one two three four five
84:29 - six
84:30 - so length is going to give you back
84:33 - six
84:34 - all right let's give it a try and let's
84:36 - run it boom there we go see that six
84:38 - right there
84:40 - that's it that's that's what uh that's
84:42 - what length does
84:44 - okay perfect so now we can basically say
84:47 - you've graduated from arrays yay good
84:50 - job there's a bunch more to it but this
84:53 - is just over simplified you know what
84:56 - arrays can do you'll learn a lot more
84:59 - about arrays a lot better once we get to
85:02 - the loops because there's a lot of cool
85:03 - things you could do with arrays they're
85:05 - like my favorite thing in coding i think
85:08 - arrays are literally my favorite thing
85:10 - and next up we're gonna start learning
85:11 - about objects okay so let's go ahead and
85:14 - start learning about them now all right
85:15 - now let's talk about objects so here's
85:17 - the first thing we're gonna do we're
85:19 - gonna comment out line 144 and 135 so
85:22 - there's nothing being printed okay let's
85:24 - go ahead and hit run and look at that we
85:26 - have nothing coming out to the console
85:28 - log that's perfect all right now let's
85:30 - go ahead and let's talk about objects
85:33 - objects are really really important and
85:35 - they're really awesome so in just one
85:37 - second we're gonna work on right when i
85:39 - snap my fingers we're gonna work on a
85:41 - new object all right this is the object
85:43 - we're gonna be working on so as you can
85:45 - see here we have mr leonardo dicaprio he
85:50 - is our he's our object in this case and
85:53 - he has a couple of properties so his
85:54 - properties are he has a name so if you
85:57 - do person.name you know that should we
86:00 - need to set that to leonardo
86:02 - and then his shirt here will be white
86:06 - okay because if you can actually see his
86:07 - shirt is
86:09 - white back there so we need to create an
86:11 - object that actually represents that so
86:13 - let's go ahead and do that now so i'm
86:15 - going to put him
86:17 - over here kind of in the corner so you
86:19 - can see him now let's create an object
86:21 - to represent this so we're going to say
86:22 - cons person and object is created by
86:25 - doing these squigglies okay so these
86:27 - squigglies represent an object so so far
86:30 - right here we have created essentially
86:32 - an
86:33 - empty object
86:35 - now what we're going to do is we're
86:36 - going to add some properties
86:39 - to that
86:40 - person object okay so we're going to add
86:43 - a name so the name of this person in
86:46 - this case will be leonardo and shirt
86:50 - will be white
86:51 - this is an object if i format this you
86:54 - see this is how an object looks if you
86:56 - want to make it look a little bit like
86:57 - prettier and kind of how you know pros
87:00 - write prose would probably make it look
87:02 - like that okay kind of how it looks like
87:04 - here so open squiggly close quickly it
87:06 - doesn't matter if you have it on the
87:08 - same line or you don't okay so it
87:10 - doesn't really matter which way you have
87:12 - it
87:12 - both ways will work all right now this
87:15 - here pretty fairly represents what we
87:18 - have over here you have a person object
87:21 - the name is leonardo shirt is white now
87:23 - let's go ahead and console.log and
87:25 - access some of the properties of this
87:27 - object that we created so we're going to
87:29 - do person.name and when i console this
87:31 - you're gonna see that the person name
87:33 - and i'm gonna move this up here okay
87:35 - when i when i run this you can see that
87:37 - the person name is indeed leonardo kind
87:40 - of just like what we wanted right and
87:42 - the start and can you guess what person
87:45 - that shirt is going to give me when i
87:46 - type that in and when i hit run take a
87:49 - guess
87:51 - exactly you're going to get white okay
87:54 - just like we had expected here because
87:56 - those are the properties and that's how
87:57 - you access them so that's how objects
88:01 - work so first let's learn different ways
88:03 - of accessing this object okay dot
88:05 - notation
88:06 - versus bracket notation these both of
88:09 - these you should know okay so how do you
88:11 - access objects so you're right now
88:13 - you're using a dot notation now here's
88:15 - an example of a bracket notation let's
88:18 - do console.log and we're going to say
88:19 - person and we're going to do name like
88:22 - this
88:23 - and let's run it and boom you also get
88:26 - leonardo right over here
88:28 - well give it a try try doing the shirt
88:30 - but with the bracket notation try
88:32 - accessing it i'll give you five seconds
88:34 - five four three two one all right let's
88:38 - see if you got it so i just triple
88:40 - clicked to copy and then i did command c
88:42 - to copy and then i went down and command
88:44 - v to paste you could do ctrl c or ctrl v
88:46 - to copy and paste and then double click
88:48 - the name inside here change that to
88:50 - shirt hit command s or ctrl s if you're
88:53 - on windows to save and automatically run
88:55 - apparently it's not automatically
88:56 - running so let's run click the button
88:58 - here or command enter and boom you can
89:01 - see that the shirt is coming out white
89:03 - right so we got different ways access an
89:07 - object that's really good now there are
89:08 - different ways to assign
89:11 - things to an object as well so for
89:12 - example i could give him a phone number
89:14 - okay so i could actually do person.phone
89:17 - so notice we don't actually have phone
89:19 - in here and i could do phone
89:21 - and we could give him a number
89:25 - like that okay
89:27 - person not phone and then we're going to
89:29 - go ahead and do console.log
89:32 - and we'll say person. let's go ahead and
89:35 - try it let's see what happens and boom
89:37 - you can see that
89:39 - we actually get that phone number right
89:41 - there but also you can actually console
89:44 - log the entire person as well so you can
89:45 - see what that looks like so let's go
89:47 - console log person let's go ahead let's
89:49 - hit run
89:50 - and you can see you can see this object
89:54 - right over here
89:55 - name shirt phone so now this object has
89:58 - all of the things and it didn't have
90:00 - that before so it's kind of like how in
90:04 - arrays we were almost doing like push
90:06 - it's kind of like that but like it's
90:08 - just you're creating a new key on the
90:09 - fly and giving it a property another way
90:12 - you could actually create that property
90:14 - is by putting this in bracket notations
90:16 - as well because you could go like this
90:18 - bracket notation and say hey person
90:20 - phone is actually equal to this hit run
90:22 - and watch what happens boom you got the
90:24 - same thing and that also works so both
90:27 - work okay the reason why we're putting
90:29 - the phone number in quotes by the way as
90:31 - in we're making it a string is because
90:33 - if you didn't do that it would try to
90:35 - subtract it will do 1 minus 2 2 2 minus
90:38 - 3 3 3 minus 4 4 4 and evaluate to a
90:42 - big negative number
90:44 - that's not what we want right so put
90:46 - that in quotes because we want the exact
90:49 - phone number and phone numbers or
90:50 - strings all right so now let's say you
90:52 - want to create another person okay so
90:54 - i'll give you an exercise for you to do
90:56 - and let's go ahead and do this
90:58 - right now so i'm going to give you a
90:59 - different person with different name and
91:02 - different shirt and i'm going to need
91:03 - you to create an object
91:04 - a person object that represents that
91:07 - okay so you can call that object person2
91:10 - alright so let's go ahead and do that
91:11 - here you're going to call this object
91:13 - person2
91:15 - all right so now instead of leonardo
91:16 - dicaprio you're going to get somebody
91:18 - better yours truly
91:20 - and you have the object right over here
91:23 - okay so this is the object that you have
91:25 - and these are the properties that this
91:27 - object have okay so try to see if you
91:30 - can make this object by yourself either
91:33 - pause my video
91:35 - or take a couple of seconds right now to
91:37 - do this but i'm gonna start doing this
91:39 - in five four three two one okay let's do
91:43 - it so i'm going to basically there's a
91:45 - cons person two
91:47 - and i'm going to say name is causey
91:50 - right and make sure to put a comma so
91:52 - after every property right so let's go
91:54 - through an object so we have squiggly
91:57 - bass squigglies in the start and closing
92:00 - okay instead of brackets
92:02 - object uh arrays have brackets
92:05 - and then you have a key and a value all
92:08 - right so objects are key value pairs
92:13 - all right so you have a key here and a
92:15 - value here a key here and a value here
92:17 - okay
92:18 - so
92:19 - a key you can also sometimes call it a
92:21 - property okay so here the key is name
92:24 - and the key is shirt okay and name and
92:27 - shirt is also the property so you could
92:28 - say kind of both ways
92:31 - so you put in the key right person name
92:34 - and you get back the value which is
92:35 - actually the name
92:37 - right you do the same thing here with
92:38 - the phone
92:39 - so you take your object
92:42 - you put in the key
92:43 - right and then that key unlocks and we
92:46 - set this value for that key
92:48 - again we do person.phone so we did the
92:50 - object and the key and then the key
92:53 - gives us the value
92:54 - all right kind of think of it like
92:56 - opening a lock all right so name here so
92:59 - this is the first key value the second
93:00 - key value we're gonna set is shirt
93:03 - is black
93:04 - okay and uh that's it that's the way you
93:07 - represent this object right so if we do
93:09 - console log person2
93:12 - and run it
93:14 - boom you can actually see that it's
93:17 - showing you quasi
93:19 - uh and shirt is black okay that's super
93:22 - cool and uh if i change this to you know
93:25 - what if i want quasi's name what if i
93:28 - only want the name can you try that for
93:29 - me if i only want the name
93:32 - boom hopefully you got this correct okay
93:34 - let's run it and now we're getting the
93:36 - name well what if i want the shirt as
93:38 - well
93:39 - same idea right if i run this we're
93:42 - gonna also now get the shirt so shirt
93:44 - color
93:45 - and we got it as black let's turn this
93:47 - into a function that then
93:49 - says hi my name is kazee and my shirt is
93:53 - black okay so let's go ahead and create
93:55 - a function okay so remember how we
93:57 - create functions right there are
93:58 - different ways you could do function
94:01 - or you could do the
94:02 - fancy way like this
94:06 - we'll call this function introducer
94:08 - because it introduces you to other
94:10 - people okay
94:11 - and this is going to take in
94:13 - let's say we can give it a
94:16 - shirt
94:17 - and uh it will also take in a name so
94:20 - let's go name and shirt okay
94:23 - and if we want to turn this whole thing
94:24 - into oh sorry whoops and we're going to
94:26 - do
94:27 - if you want to do error functions this
94:29 - is how we're going to do them okay so
94:30 - we're going to go ahead and say
94:32 - name comma shirt and we're going to do
94:35 - arrows like this i'm going to go here
94:38 - all right now the final sentence that
94:40 - we're going to return
94:42 - right is going to basically be remember
94:44 - template literals all right so let's use
94:46 - the template literals again and we're
94:48 - gonna say
94:49 - hi my
94:50 - name is name
94:52 - okay and we're just gonna say name like
94:54 - this for now
94:55 - my name is name and the color of my
94:59 - shirt is whatever the color of your
95:01 - shirt is okay so in this case it should
95:03 - be like black
95:04 - so here let's say if we had it
95:06 - hard-coded it would be like this but we
95:07 - don't want it hardco um we don't want it
95:10 - hard-coded right so we're gonna do here
95:13 - is name we're going to make it dynamic
95:15 - we're going to send name
95:17 - and remember and see if you can make
95:19 - this shirt dynamic as well boom we're
95:22 - going to say sure
95:23 - and we're going to save this into a
95:25 - variable called intro the const intro is
95:28 - equal to that
95:29 - but we're going to make an object first
95:32 - so just so you can keep practicing an
95:34 - object okay so we're basically going to
95:35 - say we're going to create a cons person
95:39 - object and this object is going to have
95:42 - a key name and the value of that key is
95:45 - also going to be named because that's
95:46 - what we're passing it i'm just going to
95:48 - say name right here and it's also going
95:49 - to have a shirt and that's just going to
95:51 - be the shirt that we pass it okay so
95:53 - these are
95:54 - values that we're giving it these are
95:56 - the actual keys that are hard coded okay
95:59 - so these will stay the same these will
96:01 - be exactly name and exactly shirt and
96:03 - this part will be dynamic these are the
96:05 - values that we give it and so then we're
96:07 - gonna in order to get this person's name
96:11 - remember what we have to do right it's
96:13 - person dot
96:14 - name perfect and now how are we gonna
96:17 - get this shirt we're gonna do person dot
96:19 - what
96:20 - person dot
96:21 - shirt perfect good job if you kept up
96:24 - with that okay so we're creating an
96:26 - object right here and we're creating the
96:29 - intro and now we're just gonna say
96:30 - return the intro all right
96:33 - that's our function and let's give it a
96:35 - try so let's go console.log let's call
96:39 - our function introducer and let's give
96:41 - it a name qazi and let's give it a shirt
96:44 - color and we'll say black and let's run
96:47 - this and look at that right we're
96:49 - getting hi my name is kazi and the color
96:52 - of my shirt is black beautiful so we're
96:55 - using template little i mean this is
96:57 - advanced this is awesome if you're doing
96:59 - this good job for doing this this is
97:01 - using this is a
97:03 - es6 error function right this function
97:06 - has
97:07 - two arguments
97:09 - and you created an object in here
97:12 - and then you're using template literals
97:15 - so there are a lot of concepts in here
97:17 - that you're doing so great job on
97:19 - following along and doing this with me
97:21 - even if you didn't get it it's good that
97:23 - you're you know you just followed along
97:25 - and like did it and hopefully you got it
97:27 - working on your computer like that's
97:29 - what's really important so here i have
97:32 - this and if i if i show you right hi my
97:34 - name is kazi and the color of my shirt
97:35 - is black now let's go ahead and comment
97:37 - out all the other stuff that we had here
97:39 - right so i'm going to comment this out
97:42 - um you can leave this or comment it out
97:44 - i'll just comment it out
97:45 - you can comment out pretty much
97:48 - all of this
97:50 - okay and i'll comment out this person
97:52 - right here too and we'll just hit run
97:55 - and it should just say hi my name is
97:56 - kazi and the color of my shirt is black
97:58 - okay so
97:59 - the only console log that should be
98:00 - happening is the one coming from this
98:02 - function this function is super cool
98:04 - because this function is like creating
98:06 - an object and then doing the template
98:08 - literals accessing data from that object
98:11 - very nice okay this is a very very nice
98:14 - well-written function so good job if you
98:17 - got here so far now try
98:19 - see if you can now do this call the same
98:22 - function but see if you can call it on
98:24 - leonardo and with the shirt being white
98:26 - so give that a try i'll give you five
98:28 - seconds five four three two one all
98:33 - right let's do it together so i'm gonna
98:34 - say console.log we're gonna say
98:36 - introducer
98:37 - and we're gonna see leonardo here
98:40 - right and the shirt color is gonna be
98:44 - white
98:45 - these arguments have to match right so
98:47 - this matches that
98:49 - and then this matches that okay so these
98:52 - arguments the order here matters okay
98:55 - and uh let's run this and let's see if
98:58 - it does the leonardo one as well and it
99:00 - does hi my name is leonardo and the
99:02 - color of my shirt is shirt okay so we
99:05 - probably gotta say white here hi my name
99:07 - is leonardo and the color of my shirt is
99:09 - white
99:10 - beautiful this is doing exactly what we
99:13 - want we're going to go ahead and comment
99:14 - this out
99:15 - and so far you're doing absolutely
99:18 - fantastic
99:19 - all right now let's take this even a
99:21 - step further let's say that we want to
99:24 - have this person but we also want to
99:26 - calculate and have their net worth okay
99:28 - so i'm going to go ahead and refresh
99:30 - this page and let's just uncomment the
99:33 - quasi in black here perfect my name is
99:35 - kazi and the color my shirt is black
99:37 - blah blah perfect we want to say this
99:40 - person has certain assets okay so assets
99:44 - they have is like let's say a hundred
99:45 - thousand dollars all right and the debt
99:48 - they have is fifty thousand dollars so
99:51 - if you wanted to calculate the net worth
99:52 - is really easy just assets minus debt or
99:55 - assets minus you know you could say
99:57 - let's say liability
99:58 - all right
99:59 - so
100:00 - it's how much basically money do you
100:02 - have and then how much debt do you have
100:03 - it's very simple for an average person
100:04 - if you want to calculate your net worth
100:05 - you could do that right now like it's
100:07 - very easy you could have a negative net
100:08 - worth or a zero net worth and if you
100:10 - have a positive net worth that's
100:11 - incredible so here you would have a net
100:14 - worth of fifty thousand right hundred
100:15 - thousand minus fifty thousand we could
100:17 - do that right and so we could say and my
100:19 - net worth is and i could do this and i
100:22 - could basically say a person.assets
100:25 - minus person dot liability like
100:29 - abilities
100:30 - and paste that there okay
100:33 - so let's run this and let's see what we
100:35 - get hi my name is kazi and the color of
100:37 - my shirt is black and my net worth is
100:39 - fifty thousand dollars we could put a
100:40 - dollar sign here right and we could say
100:44 - we could say we you you don't need to
100:46 - say usd but you could if you want and
100:48 - says my name is blah blah my net worth
100:49 - is 50 000 usd so this dollar sign is uh
100:53 - pretty much to actually put a dollar
100:56 - sign and then the next dollar sign and
100:57 - squigglies are to basically say hey i'm
100:59 - writing javascript so let's make this
101:01 - even nicer i'm going to teach you how to
101:03 - create methods
101:05 - inside of an object okay and anytime
101:07 - you've seen dot met something that's
101:10 - usually a method okay when you're
101:13 - calling it so like math.floor remember
101:16 - when you saw math.floor
101:19 - this is a method if you didn't have this
101:22 - math part here and it was just like this
101:23 - this would be a function and if this
101:25 - open closed parenthesis weren't here
101:27 - this would be a property so i know it
101:29 - can be confusing but here's a great
101:31 - example all right you have an object
101:33 - right here properties are just with dot
101:35 - to car.name card.model those are all
101:38 - properties right but
101:40 - methods are car.start with the open
101:42 - close print card.drive open close print
101:44 - car.break open close paren so methods
101:46 - look like this all right so just kind of
101:48 - take a mental screenshot of this for now
101:50 - all right so here's what we're going to
101:51 - do here's a really cool thing in kind of
101:54 - advanced things you could do with
101:55 - objects so i can actually create a net
101:57 - worth field and what this will do is
101:59 - what i essentially want to do is want to
102:01 - say hey assets minus liabilities but if
102:04 - i do this i'm going to run into a
102:06 - problem okay so let's try that so let's
102:08 - remove all of this and let's paste just
102:11 - netperson.net worth and let's see what
102:13 - happens if we run this and it says
102:16 - assets that's not defined and and you're
102:18 - probably thinking wait assets is defined
102:19 - right here so why isn't it just using
102:21 - assets this is that's not how it works
102:24 - so in when you're defining an object
102:25 - because all of this is happening at the
102:27 - same exact time this isn't like created
102:31 - yet and so it doesn't know so what you
102:33 - want to be able to do is you want to be
102:34 - able to say person dot assets but it
102:37 - also won't really know that so here's a
102:40 - hack here's a way that we do this okay
102:42 - so we're going to create a function and
102:44 - yes you can actually store functions
102:46 - inside of objects which is kind of crazy
102:48 - open close paren all right we're just
102:50 - going to do this this is going to be
102:51 - your net worth function and what it's
102:53 - going to do is it's going to return and
102:55 - we're going to say this dot assets minus
102:59 - this dot liabilities this thing is kind
103:02 - of weird but what this is referring to
103:04 - is this specific person object that
103:06 - you've created so it's literally like
103:07 - imagine plugging in person.assets and
103:10 - person.liabilities okay but you're going
103:12 - to use this this whole thing here is
103:14 - going to become 100 000. and this entire
103:16 - thing is going to evaluate to 50 000 and
103:18 - then this thing is going to evaluate to
103:20 - 50 000 like this and then once you
103:22 - return this it's going to pop up in your
103:24 - console so let's go back boom this
103:27 - assets sold liabilities and net worth is
103:29 - a method so even though we've defined as
103:32 - a function it is a method and i'll show
103:33 - you why because now in order to call it
103:36 - if you do person.net worth watch what's
103:38 - gonna happen it's not gonna work let's
103:39 - run it and we just got
103:42 - hi my name is kazi and the color of my
103:44 - shirt is black and my net worth is
103:45 - function return assets so just like just
103:48 - like spit out this entire function
103:50 - that's not what we want we want the
103:52 - actual result so we need to call this
103:54 - method and this is how you call it okay
103:57 - boom you call it just like a function
103:59 - but because it has a dot here it's
104:00 - called a method so the person has a net
104:03 - worth method
104:04 - now let's run it and watch what happens
104:07 - boom
104:08 - right my name is causing the color of my
104:09 - shirt is black and my net worth is 50
104:12 - 000
104:13 - and now to make this code even more
104:14 - dynamic assets and liabilities should be
104:17 - passed by the user okay so that could be
104:20 - like another thing that that might be
104:22 - nice right now it's hard coded but
104:23 - that's okay we can just kind of leave it
104:24 - as is just to kind of show you that you
104:26 - could do some more advanced stuff with
104:28 - objects all right so let's run this okay
104:31 - and if you change the name it'll also
104:33 - work change the assets liabilities
104:34 - you'll get different numbers all right
104:36 - so if you got this far great job uh
104:39 - we're gonna hit run on this to just make
104:41 - sure we we're gucci but if you got this
104:43 - far
104:44 - you're almost an object
104:46 - master so good job okay
104:49 - you probably don't know like everything
104:50 - there is to know about objects okay but
104:52 - like you know more than 98 of the
104:55 - population so you should be proud of
104:57 - yourself give yourself a pat on the back
105:00 - right about now go ahead and do that for
105:02 - me and and you're beautiful and you
105:04 - matter
105:05 - and i'm happy that you're here so thank
105:07 - you warms my heart all right with that
105:09 - said let's continue all right now we're
105:11 - going to be doing my favorite part
105:13 - without this part you pretty much don't
105:15 - have programming so this concept that
105:17 - you're going to learn right now is going
105:19 - to put everything together and it's
105:21 - going to make everything do you do so
105:23 - useful and it's not just going to be
105:24 - like why can't i just do this in excel
105:26 - why can't i just blah blah this is the
105:29 - most important thing let's get into it
105:31 - and this is called for loops loops
105:34 - are the heart blood and soul of computer
105:37 - programming and i'm just so excited that
105:39 - you get to learn it right here with me
105:40 - so if you're enjoying this so far smash
105:42 - that like button so this video goes out
105:43 - to more people helps more people become
105:45 - developer and it's free so do it right
105:47 - now and let's keep on rocking and
105:49 - rolling so we're going to use loops okay
105:52 - and let's go ahead and grab our array
105:55 - that we made earlier with groceries okay
105:56 - so i'm gonna just go ahead and copy it
105:58 - so let's go boom grab this
106:01 - const groceries okay i've defined it
106:04 - above so what i'm gonna do is i'm just
106:05 - gonna comment all of this out because if
106:07 - i've defined a const above i can't
106:09 - redefine it below so i'm gonna make sure
106:11 - it's commented out and then i'm gonna
106:12 - come down here and i'm gonna pay his
106:14 - groceries okay and let's call it fruits
106:16 - cause let's be let's be real that's what
106:18 - it is right so now i have fruits well
106:21 - what i wanna do is i wanna like print
106:23 - out every single one of them so how do i
106:25 - do that well here's a way you could do
106:27 - it right console log we'll do fruits of
106:29 - zero and then we'll just keep repeating
106:31 - that
106:32 - pattern right one two
106:34 - three and then what will happen
106:36 - essentially is this will get you this
106:38 - one one will get you that one two will
106:41 - get you that one
106:42 - three will get you that one right
106:44 - hopefully that makes sense so far so
106:46 - let's go ahead and run this
106:48 - and you get all four of these right
106:50 - that's perfect but what if there were
106:51 - like many many more like so if i just
106:53 - copy this and i just keep let's say i
106:56 - copy this and i just keep pasting it
106:58 - right well that's a lot how are you
107:01 - going to like print out all of those
107:03 - it's going to be a lot of work are you
107:05 - really going to do this right and then
107:07 - what if they're more than that because
107:08 - netflix has a what you know let's go to
107:11 - netflix right now so here's an example
107:13 - of an array this right here is an array
107:16 - all right that's how you see these five
107:17 - profiles one two three four five that's
107:20 - an array when i go inside of this
107:23 - everything that's showing up here is an
107:24 - array so here's an array of new releases
107:28 - here's the array of true crime
107:30 - documentaries here's an array of
107:32 - trending now these are just arrays all
107:35 - right so if i have this many movies i
107:38 - can't just like do them manually i need
107:40 - something that can automatically find
107:42 - out how many movies there are and then
107:43 - like print them out okay or show them so
107:47 - that's an example of you know why you
107:49 - need to learn something called
107:52 - looping okay or for loops so let's go
107:54 - ahead and do that now all right so
107:56 - here's how we're going to write our for
107:57 - loop we're going to say 4 and we're
107:59 - going to say let i equal 0 and then put
108:01 - a semicolon and we're going to say while
108:03 - i is less than and i know this is going
108:05 - to look super weird but just trust me
108:07 - hang in there with me okay fruit's not
108:09 - length and we're going to do i plus plus
108:11 - like everything here you're going to be
108:12 - like what the hell am i looking at and
108:14 - we're going to break it down in a second
108:15 - but first let's just run it and see if
108:17 - we can get it to do what we want it to
108:19 - do and i'm going to say fruits and get
108:22 - me the
108:23 - get me the iath fruit okay let's run it
108:26 - and let's actually console log this
108:28 - console log and let's comment out all of
108:30 - these four lines right here okay let's
108:32 - run this and you see it it printed out
108:36 - every single fruit that we had right all
108:38 - of these fruits every single one of them
108:41 - and how i can prove that too that i
108:42 - print every single one out what we could
108:44 - do is like put i there and then do this
108:46 - and i'll actually even count it for you
108:48 - so this is zeroth one first second third
108:51 - fourth fifth sixth
108:53 - all the way up to nineteenth okay so
108:55 - there's like
108:56 - 20 total items in this array so this
108:59 - loop is doing that this for loop right
109:02 - here it's looping through automatically
109:04 - auto magically figuring this out but
109:06 - let's break it down what is happening
109:08 - really so we're saying this loop we want
109:11 - an index why do we want an index well
109:13 - imagine if i instead of i imagine i put
109:15 - a zero here well it's gonna run but it's
109:18 - just gonna keep on getting the banana
109:20 - every single time but that's not what we
109:21 - want so what needs to happen is we're
109:24 - essentially trying to mimic this process
109:26 - we want fruits to be zero the first time
109:27 - fruits to be one the next time fruits to
109:29 - be two the third time fruits to be uh
109:31 - this the fourth time
109:33 - right so this is what what we're doing
109:35 - here so the start i is set to zero and
109:38 - all a loop does is it just repeats the
109:40 - same line of code again and again and
109:42 - again and again and again fruits.length
109:44 - all i'm saying here is hey run the same
109:46 - amount of times there are items in this
109:49 - array so meaning in other words we want
109:51 - you to run 20 times so while i is less
109:54 - than 20. so run 20 times that's what
109:58 - this means right here okay and as soon
110:00 - as it runs 20 times and it tries to run
110:03 - the 21st time it just stops and it
110:05 - doesn't run again and i plus plus means
110:07 - every single time you're done running
110:09 - just increment i by one so first time it
110:11 - runs i is zero okay so we put a zero
110:14 - here and there's a zero here and you
110:17 - will get your first item which is gonna
110:20 - be
110:20 - this item right here then it's going to
110:23 - run again and here's what's going to
110:24 - happen i is going to become 1 next time
110:27 - the loop is going to run let's start
110:29 - from the scratch right so it goes 0
110:31 - less than 20 is that true or false i'm
110:34 - asking you
110:36 - that's true 0 is less than 20. so then
110:39 - this line of this line of code here runs
110:42 - and it prints this out pops it right
110:44 - there perfect then once we're done
110:47 - running it increments i by one so now i
110:50 - is one is 1 less than 20 yes or no yes
110:53 - it is okay 1 is less than 20. so then it
110:57 - runs but next time because there is an i
111:00 - here fruits becomes 1 because it's
111:03 - dynamic like that so then it gets you
111:06 - this guy right over here then it runs
111:09 - again and it does the same thing too so
111:11 - it goes to 2 less than 20 goes yes pops
111:14 - in a 2 gets you the orange because
111:16 - that's in position 2 right here then it
111:18 - increments i by one i becomes three is
111:21 - three less than twenty is that true or
111:23 - false yes it's true and it prints out
111:26 - fruit of three so then you get this pair
111:28 - then it goes again and increments this
111:31 - by one so this becomes what
111:33 - 4 good
111:35 - and then it prints it out
111:37 - all right
111:38 - i'm going to ask you this time what is i
111:40 - now if you guess 5 good job because
111:42 - after running this we increment i by 1
111:45 - so i is 5 now it's 5 less than 20
111:48 - okay this is 5 and this is 20 and this
111:51 - thing then becomes true and then once
111:53 - this becomes true this part of the loop
111:55 - runs all right so is this less than 20
111:58 - yes it is then this becomes 5 and then
112:00 - this prints this out so on and so forth
112:03 - so this is why we just leave a i here
112:05 - okay so that's how loops work they're
112:08 - really awesome
112:09 - real really nice and uh they make our
112:12 - life easy now
112:14 - now now now now here's something
112:16 - exciting i'm going to show you
112:18 - you pretty much never
112:20 - ever
112:21 - ever have to use this ugly looking loop
112:25 - ever again this is really the only time
112:27 - you're going to be confused thanks to
112:28 - the new javascript
112:30 - ways of doing it and i'll show you them
112:32 - and after that pretty much never write
112:35 - this ugly loop i never write it i don't
112:37 - deal with these weird indexes and
112:39 - honestly i even forgot how to write this
112:41 - ugly looking loop should be eradicated
112:44 - from most of what you're doing in your
112:46 - day-to-day i'll show you a much easier
112:48 - way of writing all right so now let's go
112:50 - ahead and comment out this entire for
112:53 - loop that we wrote and instead what
112:54 - we're going to write is we're going to
112:55 - say 4 and watch this we're gonna set
112:57 - kant's fruit of fruits okay and we're
113:00 - just gonna say console log fruit and
113:02 - watch what happens i'm gonna
113:04 - run this and it does the exact same
113:07 - thing and you do not have to worry about
113:11 - indices at all so this is so nice so
113:14 - here's how this is working fruits this
113:16 - variable here fruits is important this
113:19 - is this right here this is the fruits
113:21 - array this variable here right here
113:23 - fruit i'm making it up on the fly i
113:25 - could call it whatever i want i can call
113:28 - it john but i just got to make sure that
113:30 - i put john here and john here and boom
113:32 - we run it the only point of this
113:34 - variable right here is fruits in this
113:37 - case will be the name of you know it
113:40 - refers to this which is this entire
113:42 - array right here this entire array right
113:44 - here okay that's what fruit says but
113:46 - fruit when you're looping the first time
113:49 - it's this banana and when you're looping
113:52 - the second time it's this apple and when
113:54 - you loop again is this orange and when
113:56 - you loop again it's this so you don't
113:58 - have to even worry about indices this is
114:00 - the fruit and then in the next loop this
114:02 - is the fruit and then in the next loop
114:05 - right this is the fruit this is the
114:06 - first loop and the second loop and the
114:08 - third loop the fourth loop and then you
114:10 - just print that out so like i don't know
114:13 - if you if you look at these two side by
114:15 - side right this looks like an eyesore
114:17 - and hurts your eyes and you will get eye
114:20 - aids by looking at this and then you
114:22 - have this one
114:23 - just
114:25 - this is beautiful this is pure gold i
114:26 - mean this is how this has meant to be
114:28 - right this is how it should things
114:30 - should look and feel this is very
114:31 - pythonic python you write loops like
114:33 - this this is really really nice so we
114:36 - like this one much more than this one
114:38 - okay so stick with this one and then
114:40 - i'll show you a couple of other things
114:42 - you can do as well all right so now
114:43 - let's do something else with arrays okay
114:45 - so we're going to say const numbers and
114:48 - we're going to create a array and it's
114:49 - going to keep our number so one two
114:51 - three four five six
114:52 - well
114:53 - what if we want to um so we'll do a
114:57 - couple of things right i'll show you how
114:58 - to sum up
114:59 - all numbers in an array because that
115:02 - will be something helpful for you and
115:04 - important for you to learn but we want
115:06 - to do now try this write both of these
115:09 - loops for this numbers and print out
115:11 - every single number how we're printing
115:12 - out our fruits okay and comment out
115:14 - everything related to the fruit okay so
115:16 - hit run and you should see empty and
115:18 - loop through so then all the numbers get
115:20 - printed out from one through six try
115:22 - that i'll give you five seconds five
115:25 - four three two one
115:28 - all right let's write it together so
115:30 - we're gonna say 4 let i equal 0 okay i
115:34 - is less than
115:36 - numbers dot length all right you kind of
115:38 - get used to writing this for loop once
115:40 - you write it a couple of times but again
115:41 - we're not even going to be using this
115:42 - one that much anymore so get ready to
115:44 - say goodbye to this one all right let's
115:46 - run this and let's see if it works boom
115:48 - one two three four five six so this one
115:50 - worked exactly how we expected it to
115:52 - fantastic okay let's go ahead and let's
115:55 - comment this out let's comment this out
115:58 - and now we're going to say we're going
116:00 - to write the other loop so we're going
116:01 - to say 4 const number of numbers and
116:06 - we're simply going to just say console
116:07 - log number and let's hit run and boom
116:10 - one two three four five six don't make
116:12 - the mistake of printing out numbers
116:15 - because what you're doing here you're
116:16 - just going to print out the array
116:18 - five five times you don't want to do
116:20 - that let's just say number boom there we
116:22 - go so that should that printed out
116:25 - everything hopefully you got this
116:27 - correct and if you didn't it's okay
116:28 - don't stress we'll have some additional
116:30 - exercises here in our files for you to
116:33 - do
116:34 - with arrays okay because arrays are very
116:35 - very important so we got this six now
116:38 - what if we wanted to double every single
116:40 - number right over okay so let's go ahead
116:42 - and try that how can we do that how can
116:44 - we print out 2 for this 4 for this 6 for
116:47 - this 8 for this 10 for this and 12 for
116:50 - this okay how do we do that so what we
116:53 - want to do here is you actually you
116:54 - could actually do it right here give
116:56 - that a try see if you could figure that
116:58 - out you have enough tools to be able to
117:00 - figure this one out right now and i will
117:02 - tell you this you don't even have to
117:04 - write an additional line of code that's
117:06 - the hint i'll give you you can fit that
117:08 - in on line 221 and basically have the
117:11 - answer to this problem so either take
117:14 - five seconds to do it or pause the video
117:15 - i'll give you five seconds now five four
117:18 - three two one
117:20 - all right so we're gonna go number times
117:23 - 2. that's it
117:24 - let's run and now we get 2 4 6 8 10 12.
117:28 - everything is doubled you guys that's
117:31 - awesome but what if we wanted to do it
117:33 - so that this numbers are right here is
117:36 - doubled so or like we get a new array
117:39 - that's like all of these numbers doubled
117:41 - how could we do that double numbers how
117:43 - could we double the numbers and
117:45 - basically at the end get back an array
117:48 - that says 2 4 6 8 10 12. how could we
117:53 - put this in and get this out so let's
117:56 - give that a try all right so here's what
117:58 - we're gonna do we're gonna pretty much
118:00 - have this same loop that we have here
118:02 - but we're gonna need to create an array
118:04 - that like stores that results right
118:06 - we're going to say let result is equal
118:08 - to and we'll just make it an array like
118:10 - this all right so we're just going to
118:12 - have this empty array it's going to be
118:13 - empty at the start and the trick that
118:16 - we're going to use is remember we did
118:18 - push so again you have enough to figure
118:21 - this out if you want to try but inside
118:23 - of this for loop you're gonna push to
118:26 - this results array double this amount so
118:28 - see if you could figure that out and
118:30 - then console.log result and get that by
118:32 - yourself you have enough to figure out
118:34 - it might be a little bit challenging
118:36 - though right now i'll give you five
118:37 - seconds you can pause the video five
118:40 - four three two one and now we're gonna
118:43 - solve it together so all we wanna do
118:45 - here is i'm gonna do result dot push
118:49 - number times two all right so i'm gonna
118:51 - loop through and then push so then i'm
118:54 - gonna have two then i'm gonna loop again
118:56 - and number is going to be
118:58 - two and we're gonna come down here
119:01 - 2 times 2 is going to become 4 right so
119:04 - we're going to result that pushed off 4
119:06 - that's going to add a 4 right here and
119:08 - then we're just going to keep looping
119:10 - through this array and just keep
119:11 - doubling it every single time and then
119:13 - pushing the double result in here in
119:16 - that result array okay so let's remove
119:18 - that
119:19 - and then once that entire loop is done
119:22 - so make sure to put the console log of
119:24 - result outside of this for loop okay
119:26 - because we don't want that repeating
119:28 - again and again let's comment that line
119:30 - out or we can actually just even delete
119:32 - it here we don't need that anymore let's
119:33 - try running and watch what happens boom
119:36 - we have an array with 2 4 6 8 10 12. so
119:41 - that array doubles all of the numbers
119:44 - so this is an example of how you could
119:47 - do something like this all right now
119:49 - what we would want to do is turn it into
119:51 - a function okay so we're going to
119:52 - basically go
119:54 - const
119:55 - double okay we're going to call this
119:56 - function double and uh this function is
119:59 - gonna you can you could call it you
120:01 - could either call it function or you
120:02 - could use this arrow syntax to highlight
120:05 - that this is a function right it's the
120:06 - es6 function and what we're gonna do is
120:09 - what this function does is takes in
120:11 - numbers and we'll have the same loop so
120:14 - we'll say const number of numbers
120:17 - grab this result right here we're going
120:19 - to paste that in so it's going to create
120:20 - a temporary recall result it's going to
120:22 - loop through the numbers that you gave
120:24 - it it's going to keep pushing double of
120:26 - that result into result array and then
120:29 - at the end we're just going to return
120:30 - result just like that all right and we
120:32 - can get rid of all of this right here
120:34 - and let's try running double so let's do
120:36 - console.log we'll say double and let's
120:39 - give an array to double so one two
120:42 - three four five six and let's run this
120:45 - and let's see what it outputs two four
120:47 - six eight ten twelve that is perfect you
120:51 - guys that's exactly right that's exactly
120:54 - what we were looking for so that is
120:56 - beautiful nice job if you got this far
120:59 - question for you what if we wanted to
121:00 - turn this function into the square
121:03 - function meaning we square all these
121:05 - numbers how could we do that so think
121:07 - about that squaring means using
121:09 - exponentiation instead of multiplication
121:12 - okay so how could we turn this function
121:14 - into something that squares numbers so
121:16 - meaning 1 squared would be 1 2 squared
121:19 - would be 4 3 squared would be 9 4
121:22 - squared would be 16 5 square would be 25
121:24 - 6 squared would be 36 right so how do we
121:26 - get that array back well it's simple
121:28 - just put another asterisk right here hit
121:31 - run and there you go it's all
121:34 - perfectly squared so let's go back boom
121:37 - i'm gonna just turn back into a double
121:39 - all right so that's how easy that is now
121:41 - imagine if the size of this array
121:43 - changes 7 8 9 20 40 and watch right when
121:48 - i run it boom it just works instantly
121:50 - right this is the crazy part about like
121:52 - when you write good code and i'm just
121:53 - gonna like fill it up with crazy numbers
121:55 - here right i'm gonna make this really
121:57 - really big you're getting a big data
121:59 - file in excel or something and watch it
122:01 - just it just works on the whole thing
122:04 - insane right and it says 177 more items
122:07 - this is the beautiful thing about code
122:10 - so when again when you go look at
122:12 - netflix right so let's go let's go to
122:13 - netflix again and let's take a look at
122:16 - this this is an array and what we're
122:18 - doing to that array every single time so
122:19 - like we have some data in that array and
122:22 - we style that data every single time we
122:24 - loop through so we we write a for loop
122:27 - and we loop through and we say take this
122:29 - data the billion dollar code text the
122:33 - image url that's how you're seeing the
122:35 - image and turn it into this card and
122:37 - then do that again with the next movie
122:39 - so almost imagine that there's a loop
122:41 - for right or const movie of movies and
122:46 - what you do here and we close the
122:48 - squiggly right there and we say you know
122:52 - return
122:53 - movie and let's call this function card
122:55 - and let's just say this function card
122:56 - turns it into this nice
122:59 - neat card okay we don't let's say we
123:00 - don't know the details of this function
123:02 - but what this card function does is if
123:05 - you give it a data of a movie like the
123:07 - name of the movie and the image of the
123:09 - movie it turns it into this nice little
123:11 - card over here then you loop again and
123:13 - then you do it again you loop again you
123:15 - do it again you loop again you do it
123:16 - again you loop again you do it again i
123:18 - mean god damn i should be called
123:20 - freaking senior loopy because that
123:21 - there's a ton of loops there that's the
123:23 - crazy part you guys this is real world
123:26 - stuff okay it's not just like me telling
123:28 - you random stuff it has a very real
123:31 - application even though we're doing like
123:32 - beginner exercises right now just so you
123:34 - could get better at it because if you
123:36 - don't know how arrays work then if i
123:37 - give you something more complicated with
123:39 - like cards and images in html and css
123:41 - you're going to be so confused so you
123:43 - have to learn these by themselves like a
123:45 - martial art you got to learn the rear
123:47 - naked choke by itself and you got to
123:49 - learn the kimura by itself and then you
123:51 - got to learn the positions and then you
123:53 - learn these esoteric positions in jiu
123:55 - jitsu and you're like what the heck is
123:56 - the point of this and then one day you
123:58 - just it to hit that triangle you like
124:00 - rotate your hip you angle your leg the
124:03 - right way you grab the neck the right
124:04 - way you twist the right way you pop your
124:07 - right leg and you pop the left leg and
124:09 - you get that triangle just boom
124:11 - everything and it all happens at once
124:13 - and it's so smooth and it's beautiful
124:15 - but when you're learning it you learn it
124:16 - like step by step and same thing with
124:18 - chess or anything else in life soccer so
124:20 - we're just learning the components and
124:22 - the pieces by themselves and then later
124:24 - you'll be able to put them together with
124:26 - more impressive stuff okay when we get
124:28 - to the project portion all right now
124:30 - let's keep having more fun with the
124:32 - arrays because the more practice you get
124:34 - with arrays and loops the better of a
124:36 - programmer you're going to become
124:38 - because honestly that's like 90
124:40 - of what you're doing in programming
124:42 - you're usually getting max a lot of data
124:45 - and you're looping through it and you're
124:46 - doing something to it okay that's like
124:48 - super common and so let's just get a
124:51 - bunch of different practices in all
124:53 - right so
124:54 - we're going to go ahead and make another
124:57 - function and this function we're going
124:58 - to make is going to be called letter
125:00 - counter okay so let's go letter
125:03 - counter you can also call it counter
125:05 - whatever you want and
125:07 - we're going to use it making an error
125:09 - function
125:10 - all right and basically what this
125:12 - function is going to do
125:14 - is it's going to take a look and see how
125:16 - many
125:17 - letters are in a given phrase okay so if
125:20 - i gave it a phrase
125:22 - let's say khan's phrase is equal to uh
125:25 - hey can you
125:26 - go to grocery
125:29 - store
125:31 - okay whatever
125:32 - all right this will go through this
125:34 - whole thing and it will basically just
125:37 - just count how many letters there are
125:39 - okay let's call it how many letters
125:42 - and so you're just gonna go through and
125:44 - this is gonna be a one there's gonna be
125:46 - a two this is gonna be a three a four a
125:49 - five for the empty space six seven eight
125:52 - nine so you can do this you can count an
125:54 - empty space as a letter that's totally
125:56 - fine so think about how you're gonna
125:58 - write a function like this right think
125:59 - about what are you gonna need to do well
126:01 - you're gonna need to loop through this
126:03 - and the cool part is you can actually
126:05 - loop through these types of phrases you
126:07 - can loop through strings as well first
126:09 - let's comment out um anything we kind of
126:12 - have up here okay perfect and now in
126:14 - here i'm going to go ahead and i'm going
126:16 - to say let's let's write a loop okay i'm
126:19 - going to say 4
126:21 - letter in phrase and let's see if this
126:23 - works and let's do console log and we'll
126:25 - say letter okay and let's hit run and
126:27 - let's see what happens okay it's running
126:30 - okay so what we need to do in order to
126:32 - make sure that this actually runs is we
126:33 - need to call this function that we just
126:35 - made right so let's go right here and
126:37 - i'm going to say console.log and we're
126:39 - going to say how
126:40 - many
126:42 - letters okay and let's just call that
126:43 - function
126:45 - and there we go okay one two three four
126:47 - five
126:48 - and then it ends with um undefined okay
126:52 - all good so this keeps looping through
126:54 - and then it just prints out the letter
126:56 - that's what we're looking for right and
126:58 - we actually don't even need to call
126:59 - console.log here because we're printing
127:01 - out from the function so let's try
127:02 - running this and now you see there's no
127:05 - undefined right and we we go from 0 to
127:08 - 40. but it needs to start from a one and
127:12 - if you think you're getting this or you
127:14 - know how to kind of solve this or if you
127:16 - even want to try i highly recommend you
127:18 - just pause my video right here and
127:20 - actually give this a try okay go ahead
127:22 - and try to like do this on your own and
127:24 - then you can come back to this but i
127:26 - want you to get a ton of practice with
127:28 - this stuff because that's how you're
127:30 - going to get better not just by watching
127:32 - me but by doing it with me that's how
127:34 - you're going to get better
127:37 - so if we want to count the the letters
127:40 - in here right or this this how many are
127:42 - in there we can't start counting from
127:44 - zero okay
127:46 - so what i'm going to do
127:48 - is we can just make it where if i'm
127:50 - getting
127:51 - uh
127:52 - a letter here right oh and if you were a
127:55 - little bit confused like wait how are we
127:57 - when we run this
127:59 - how are we getting the numbers
128:01 - with this four
128:02 - loop right so you can also say four cons
128:05 - letter and if you change this to of
128:07 - because remember i taught you like i
128:09 - taught you four of loops earlier
128:13 - so if you do letter of phrase you're
128:15 - actually gonna and you run this you're
128:16 - gonna get letters the actual letters
128:20 - all right if you run um
128:23 - letter in phrase it's gonna get you the
128:25 - index at each one of those
128:28 - right so if you want to get 41 well what
128:31 - we want to do is
128:33 - uh just do
128:37 - letter plus one
128:40 - okay so this will just increase it by
128:42 - one whatever it is
128:44 - and if
128:46 - and for whatever reason this letter
128:47 - thinks it's a string so it was doing
128:49 - that weird thing where it's attaching
128:52 - you know
128:53 - zero plus one is zero one and one
128:57 - plus one is one one it's attaching
128:59 - itself so it thinks letter is a string
129:01 - so just type cast it into a number so
129:04 - force it to be a number
129:05 - and then
129:07 - you get this okay so this is like
129:09 - one very silly way of doing this and you
129:11 - get oh i get 41 at the end so that's it
129:13 - that's how i'm getting my
129:15 - this is how i'm counting my letters but
129:17 - there are better ways i'm going to show
129:18 - you in just a second
129:20 - all right so now let's talk about better
129:21 - ways of doing this yeah so what we want
129:23 - to do is
129:26 - we want to have we want to set a
129:28 - variable here that let's say is so we're
129:31 - going to say let
129:34 - uh result equals zero okay
129:38 - let's go here and we're gonna go we're
129:40 - basically gonna say
129:43 - result is equal to
129:46 - number and we're going to call index and
129:48 - we're going to say plus 1. because all
129:50 - we're doing here
129:51 - is the loop already allows us to get up
129:53 - up to 41 right so we know that this is
129:55 - the correct answer all we want to do
129:58 - is store that correct 41 in result
130:01 - and then at the end of this loop
130:04 - we want to just return that result at
130:06 - the end
130:06 - [Music]
130:08 - that's all we're looking to do
130:10 - okay so
130:12 - because okay so i'll give you an example
130:14 - okay let's just do
130:16 - result is index
130:18 - and here let's just return result
130:21 - let's remove this line
130:23 - well we can keep that line so you can
130:25 - just see how the loop looks
130:28 - and we're gonna run this function but
130:30 - wrap it in console.log all right
130:32 - actually we can do a trick here to make
130:35 - this look really nice so here we have
130:37 - return result right in order to make it
130:40 - we want to make it look like this result
130:41 - is 40. so there's a nice trick we can do
130:44 - in our return
130:45 - and we can basically say we can return
130:48 - it as an object so when you print it out
130:51 - the object is going to look really nice
130:53 - like this
130:55 - right um and then there's a even nicer
130:58 - shortcut where if you just add in
131:02 - one thing and wrap it up in an object
131:04 - it's going to automatically set this as
131:06 - the key
131:08 - and
131:09 - use this as a variable for value so it's
131:12 - going to set the word result as the key
131:14 - and use the value 44 from this
131:18 - so it's a super cool little hack
131:21 - and you can use this pretty often so
131:23 - let's run this
131:24 - and boom you can see that result in this
131:27 - case is 40. so now you can see that
131:29 - result is returning
131:31 - pretty much the last value in this
131:34 - entire thing that we get right when we
131:36 - print out our uh indices
131:39 - so these are this is you know this is
131:42 - like
131:42 - basically saying this is zero this is
131:45 - one this is two but we just wanna start
131:48 - it off with the one so
131:50 - um let's go ahead and all we need to do
131:53 - here to index is
131:56 - we just need to add a 1 to it and also
131:58 - remember we need to wrap the index in a
132:01 - string just like this oh sorry not in a
132:03 - string i'm sorry wrap index in a number
132:06 - because it is a string okay so we need
132:08 - to typecast it
132:10 - let's run this and boom you get result
132:12 - is 41.
132:14 - right so
132:16 - now
132:18 - phrase we can change the phrase right
132:20 - and again
132:22 - how many letters is a function that
132:23 - takes in the phrase so let's make this
132:26 - let's extract this argument out now
132:29 - and instead we'll put phrase over here
132:33 - and we'll pass it in the phrase okay so
132:36 - the function itself shouldn't have to
132:38 - worry about the phrase it should just
132:40 - wait for what the user is going to give
132:42 - it as a phrase and it says result is 41.
132:44 - now imagine i change this and i go
132:47 - prompt the user
132:49 - for
132:50 - you know
132:50 - write your phrase
132:53 - okay and now let's run this and now this
132:55 - pop-up happened at the top so i'm going
132:58 - to write my phrase
133:00 - i am wearing a nice green
133:03 - shirt
133:06 - right so when we do that
133:09 - uh let's go ahead and run this
133:12 - and i hit okay
133:15 - and let's see what happens here
133:18 - let's hit okay
133:19 - and right when i hit okay boom we got
133:21 - 31.
133:23 - all right so that
133:25 - that phrase has 31 characters
133:28 - now here's something sad i'm gonna tell
133:30 - you
133:31 - you can actually replace there is a
133:33 - method for strings
133:35 - that allows you to calculate the total
133:37 - of uh you know see the length of a
133:39 - string
133:40 - and that is just
133:42 - dot length okay
133:44 - so for example if i well we don't open
133:47 - up a shell let's just stay here so say i
133:49 - have a string here
133:50 - okay let's zoom in so you can see that
133:52 - better
133:54 - all right so say i have a string here
133:56 - that is
133:57 - banana if i just call dot length on this
134:00 - and run this you notice it'll give me a
134:03 - six
134:04 - okay
134:07 - and uh let's call let's say
134:11 - banana wants to know
134:14 - your slogan
134:16 - dot length it'll give me back 32 so a
134:19 - dot length is a property
134:23 - um
134:24 - on anything that's of type string you
134:26 - can call anything that's a string you
134:28 - can call dot length on it okay
134:32 - and that returns the final answer
134:34 - so let me zoom out here which means
134:37 - which means i could actually remove my
134:39 - entire code
134:40 - right
134:42 - and basically just say
134:45 - the result is phrase dot length
134:49 - change this whole thing with one line of
134:51 - code hit run
134:55 - write your phrase
134:57 - it's going to say something crazy and
134:59 - let's see if it can calculate it fast
135:01 - and it did and it goes result is 107
135:04 - okay
135:05 - but let's write it in our way because
135:08 - remember that's the way you learn how to
135:10 - do it and right now it's important for
135:12 - you to manually learn to do these things
135:15 - because i want you to develop and focus
135:17 - on your skill set then once you get
135:19 - better
135:20 - normally what you would do
135:22 - is
135:24 - you know
135:25 - a javascript string
135:28 - um length you will just like google this
135:30 - okay and see if that exists and you'll
135:32 - google this and you'll go somewhere and
135:35 - it will say that let's see
135:37 - w3schools is usually a really good
135:39 - resource
135:41 - and it's just showing you text make a
135:43 - text let it equal to hello world
135:46 - let length be text.length and it also
135:49 - allows you to try it yourself so you can
135:50 - always click that and you could hit run
135:53 - right and boom it says 12 here and what
135:55 - if i change this to something random and
135:57 - let's hit run
135:58 - and you can see it says 38
136:01 - right over there yeah
136:03 - so
136:04 - uh this is how you would normally do it
136:07 - in real life
136:08 - you just google these things you have to
136:10 - memorize anything okay
136:12 - but right now i'm just kind of getting
136:14 - used to having you get used to exercises
136:16 - do them yourself okay now let's build it
136:18 - up and take it up a notch okay so let's
136:21 - let's make a function
136:23 - that sums things okay that's also going
136:25 - to require loops
136:27 - and arrays
136:28 - so i'm going to go ahead and we're gonna
136:31 - comment this out and we're gonna comment
136:33 - this out so we're gonna go const uh sum
136:37 - array
136:38 - it's gonna take in some numbers
136:41 - and
136:43 - we're going to have a result we're going
136:45 - to say
136:47 - let result equal zero
136:49 - okay
136:50 - and then we're going to have some kind
136:52 - of for loop action going on here and
136:54 - then we're gonna
136:56 - return the
136:57 - result and let's just do this trick like
137:00 - that we did last time and
137:02 - something is going to go in the for loop
137:04 - okay something is going to go inside of
137:06 - the for loop oh sorry we forgot to put
137:08 - the arrow functions not bad arrows there
137:10 - we go and what's going to go inside of
137:12 - this for loop is basically going to be
137:14 - imagine this right imagine how we would
137:16 - do this manually so say we have
137:20 - these numbers or let's say we have these
137:22 - numbers okay this we know that this
137:24 - should if we ever have 1 2 3 4 we know
137:27 - that this should equal to 10.
137:30 - now how are we going to actually sum
137:32 - this up in normal life what would our
137:35 - pattern be well i probably have some
137:37 - variable let's just call it result and i
137:40 - would
137:41 - set it to
137:42 - zero in the start or i might set it to
137:46 - whatever this number is right over here
137:48 - okay so you could you could do either or
137:51 - but let's just start it with being a
137:52 - zero okay so it starts off being a zero
137:54 - then what we do is we loop through and
137:57 - we make the result becomes one then we
138:00 - loop through again and we do one plus
138:03 - two and then result becomes two sorry
138:06 - three then we loop through again and we
138:09 - already have this 3 here so we add 3 to
138:13 - this 3 right here
138:14 - so we add this to that
138:16 - and we get result is equal to 6 and then
138:19 - we add 4 to that and we get 10. so
138:21 - that's how we would do it kind of as a
138:23 - human being if we were to do it like
138:24 - manually
138:26 - and do it with each step and that's how
138:27 - we're going to do it with our computer
138:29 - we're just going to have it loop through
138:30 - and keep adding these numbers
138:32 - so let's go ahead and now write that
138:34 - loop so again try to give this a try and
138:36 - see if you can do this yourself okay
138:38 - because what you've learned so far you
138:40 - should be able to come very close to
138:42 - solving this so take five seconds to do
138:44 - it and also pause your pause my video in
138:46 - these five seconds to try it yourself so
138:48 - five four three
138:51 - two one
138:53 - all right let's get back to it so here
138:54 - we go
138:55 - i'm gonna say
138:57 - for
138:58 - const
138:59 - number of numbers
139:02 - all right and let's just call console
139:04 - log number
139:06 - and uh let's call our function console
139:10 - sum array
139:12 - okay and
139:13 - let's give it an array so we're going to
139:15 - have we're going to give it this array
139:17 - of no it's going to be called nums okay
139:19 - let's remove
139:21 - let's comment out all of this because we
139:23 - don't need that and let's pass our
139:26 - summary nums and let's just run this
139:30 - okay so we get back one two three four
139:32 - because it's looping through and
139:33 - printing number out each time
139:35 - so if i give it an array of one two
139:37 - three four it goes okay number is one
139:40 - the first time print it out number is
139:42 - two the second time print it out numbers
139:44 - three the third time print it out so on
139:46 - and so forth all right so it's printing
139:49 - this out result is still saying zero so
139:51 - now what we need to do is we need to
139:53 - increment our result so let's go ahead
139:56 - and do that now okay so again try to
139:58 - give this a try and now we're gonna do
140:00 - this so all i'm gonna say is i'm gonna
140:02 - say result and i'm gonna say result
140:05 - plus
140:06 - and we're going to do
140:09 - whatever is the new number that i'm
140:10 - getting okay
140:12 - and let's just see if this works and i'm
140:15 - going to hit run
140:16 - and it says result is 10. interesting
140:19 - did that really work well let's try it
140:20 - with and let's add 5 to this array and
140:23 - let's see if that works and i'm going to
140:25 - hit run and we should get 15
140:28 - and boom result is 15. beautiful okay so
140:31 - let's see
140:32 - um
140:34 - how this is happening what is going on
140:36 - all right so let's do something to
140:38 - visualize this code and see exactly how
140:41 - this works i'm going to copy this let's
140:43 - go over to
140:44 - pythontutor.com all right and then hit
140:46 - enter once you're in pythontutor.com
140:49 - you're going to go to related services
140:51 - where it says javascript tutor okay and
140:54 - click that this website is awesome so
140:57 - paste your code
140:58 - and uh just for simplicity sake i'm
141:00 - gonna remove any console log because we
141:02 - don't really need that it's gonna help
141:04 - us visualize so
141:05 - there's gonna be no need for that and we
141:07 - don't need any comments either it's
141:08 - unnecessary for you to remove it but i'm
141:10 - just gonna remove that for simple
141:12 - simplicity sake
141:14 - then hit this big button here that says
141:15 - visualize execution so let's click it
141:18 - okay perfect
141:20 - all right
141:21 - now
141:22 - on the left hand side is going to be our
141:25 - code on the right hand side is going to
141:27 - be visualizing exactly how this code is
141:29 - running
141:30 - very important to notice
141:32 - also
141:33 - this red
141:35 - arrow
141:36 - means the next line to execute so which
141:39 - is the next line of code is going to
141:41 - execute okay so it's already telling us
141:43 - that this is
141:44 - going to be when i hit run or when i hit
141:46 - next to step through this
141:48 - this is the line of code that the
141:50 - computer is going to run
141:51 - and we're just going to go through step
141:53 - by step and see exactly which line runs
141:56 - exactly when
141:57 - and green arrow will mean
142:00 - the line that was just previously
142:02 - executed
142:04 - cool
142:05 - so this is our function let's walk
142:07 - through this all right so let's go ahead
142:08 - and hit next okay
142:10 - so now it sees we have a function called
142:12 - summary and
142:15 - boom it's like okay i got you there it
142:17 - is there it is i see it let's hit next
142:20 - again
142:21 - now it's on const
142:23 - const nums as you can see right here
142:25 - right so this is a line that's about to
142:27 - execute next so let's hit next and it
142:29 - goes okay i see that there is a variable
142:32 - called nums and it's inside of this
142:34 - array okay or it's this array right here
142:36 - it refers to this array and this is a
142:39 - global frame because this is
142:41 - uh these are all variables that are
142:43 - outside of this function so these are
142:45 - accessible from anywhere and from
142:47 - everywhere okay and we'll talk more
142:49 - about scope in the upcoming videos now
142:51 - next line is going to execute is it's
142:53 - going to call this function summary with
142:56 - the argument nums okay and then our
142:58 - entire function is going to start
143:00 - running so let's hit next
143:01 - cool
143:02 - so now we're inside of our function and
143:04 - the first line of our function is just
143:07 - about to run
143:09 - so the first line is going to be what
143:10 - result is
143:11 - cool
143:12 - so let's uh right now result is
143:14 - undefined okay but once this line runs
143:16 - here result is going to have a value so
143:18 - let's hit next
143:20 - and boom result is now set to zero
143:23 - now
143:24 - okay so this green is just showing you
143:26 - the last line that ran
143:28 - now the red is showing you that we're
143:30 - about to start running our for loop and
143:32 - we're just gonna be teeter-tottering in
143:34 - between
143:35 - this line the for loop line line four
143:37 - and line five and line four and line
143:38 - five and line four and line five until
143:40 - the entire loop is done then we're gonna
143:42 - go to this line here and return the
143:44 - result at the end okay which and again
143:47 - remember uh you know we're gonna touch
143:49 - base on scope
143:51 - but if you put this if you put things in
143:53 - the wrong scope wrong things will happen
143:54 - for example if you put this result
143:56 - inside of this these squigglies here
143:58 - right this is just going to keep
144:00 - returning every single result but that's
144:02 - not what we want we want to return the
144:03 - results after this entire for loop is
144:06 - done right and then we want to return
144:08 - this result okay
144:10 - so let's run through this and see what
144:12 - happens okay so right now it doesn't
144:13 - know what number is either
144:15 - okay but it does know it results as zero
144:18 - and it also knows that numbers
144:21 - refers to this array right here okay
144:23 - let's hit next
144:25 - okay
144:26 - boom
144:27 - boom boom all right there we go
144:30 - and now it says number is one perfect
144:33 - that's exactly what we wanted right
144:35 - number is one because the first time
144:37 - we're going through the array right it's
144:39 - a one that's what that's where the
144:40 - number is coming from now let's see what
144:43 - it's going to do the result so watch
144:44 - what's going to happen it's going to do
144:45 - result is going to be 1 this time so
144:47 - it's going to do 1 plus or sorry result
144:49 - is 0 right now so we're going to do 0
144:52 - plus the number 1.
144:54 - okay let's try that and now you can see
144:56 - result is one let's do it again now
144:58 - number is two so two plus one result is
145:02 - going to be three
145:04 - okay
145:05 - three plus three result is going to be
145:07 - six
145:08 - six plus four result is going to be
145:11 - 10. okay and notice how it was just like
145:14 - boom boom boom boom it's just these
145:16 - lines running over and over again right
145:19 - and now the result is 15 now the loop
145:22 - ends because are no more numbers to loop
145:24 - through
145:25 - and we go to result
145:27 - result is 15
145:30 - and then we return the result at the end
145:32 - return value
145:33 - right and the return value here in this
145:35 - case is
145:39 - this object it was of type object
145:42 - and it says result is equal to 15.
145:46 - okay
145:47 - so there you have it a full
145:50 - visualization of a for loop exactly how
145:53 - it works and what is happening and
145:55 - hopefully that clarifies things for you
145:57 - a lot further
145:59 - so i want you to try something
146:01 - try writing this function some
146:04 - array by yourself from scratch
146:07 - and i know we just did the answer
146:10 - but i want you to give it a try without
146:12 - referring to this and see if you could
146:14 - create this function by yourself and if
146:17 - you could that would be fantastic and
146:19 - just give it a give it give it a shot
146:21 - right and if you could get this working
146:23 - see you know that would be absolutely
146:25 - amazing and then check back with this
146:26 - and see how far you got all right let's
146:28 - do some
146:30 - more exercises with loops
146:33 - arrays objects whatever right because
146:35 - this is going to make you so much better
146:36 - so
146:37 - let's make a function called max so
146:40 - let's do const let's say find max okay
146:43 - or you could call it max as well
146:46 - and it's going to take in numbers and
146:49 - it's going to have a let's say
146:52 - cons result and then
146:55 - it's going to return the result
146:58 - okay and then we're going to have
147:01 - something some loop stuff happen here
147:04 - okay some loop stuff and here's how the
147:06 - algorithm is gonna work okay imagine we
147:09 - have an array of you know let's just say
147:11 - one
147:13 - two
147:14 - three and four and five okay imagine we
147:18 - have this array right here and let's
147:19 - just put commas here
147:21 - because that's how the array would look
147:23 - i have these commas and what we're gonna
147:25 - do is we're initially gonna set result
147:27 - to one and then we're gonna loop through
147:29 - and we're going to say hey it's 2
147:30 - greater than 1.
147:33 - check these
147:34 - if it is then result set it to 2.
147:37 - okay then loop again
147:41 - all right is 3 greater than two
147:44 - if it is then set result to this then
147:47 - check between these two numbers if four
147:49 - is greater set four if five is greater
147:52 - set five
147:53 - and then once the loop is done it's
147:55 - going to return the biggest number
147:57 - okay and now imagine if you know in in
148:01 - let's say there was a case where we had
148:03 - a
148:04 - one here
148:05 - okay let's see if it would work if that
148:08 - same algorithm would work there
148:10 - okay set one two the biggest set one
148:13 - to result okay great
148:16 - now check between these two's two
148:17 - greater
148:18 - yes then make two the result okay then
148:21 - check between these
148:23 - is three greater okay make three the
148:25 - result check between these
148:27 - is four greater okay make four the
148:29 - result
148:30 - check between these is one greater
148:33 - no
148:34 - then don't make one the result keep for
148:37 - the result right and and then that's how
148:39 - we're we end up with four so that's kind
148:42 - of the algorithm that we would do okay
148:44 - now we just have to code it up so we're
148:46 - basically gonna say set result not to
148:49 - zero okay because imagine
148:52 - what if you had an array with only
148:54 - negative numbers in it well then zero
148:56 - would be the biggest number so that's a
148:58 - common trap do not set result to zero
149:00 - we're gonna instead say
149:03 - results is the first item of this array
149:06 - okay we're assuming we're getting back
149:08 - an array or we're getting an array here
149:10 - okay
149:11 - and then we're gonna say is loop so
149:14 - we're gonna say we're gonna write a four
149:15 - of loop const number of numbers
149:18 - and basically we're gonna say if
149:21 - number is
149:23 - greater than result
149:26 - in that case what do we want to do
149:28 - we want to set result
149:30 - to that number that we just found
149:32 - and at the end
149:34 - when we're done with this loop we just
149:36 - simply
149:37 - return the result okay so let's go ahead
149:39 - and give this a try
149:41 - and let's comment out anything else that
149:43 - we might have running okay we don't have
149:45 - anything else running so we're oh we do
149:47 - so let's
149:48 - comment out these lines right here and
149:51 - let's just go console.log and i'm going
149:52 - to say max and let's give it numbers
149:55 - like one two three four
149:57 - five
149:58 - and let's see what it returns as the max
150:00 - aha yeah so this is not a const let's
150:02 - make this a let because we are going to
150:04 - be changing result okay so this error is
150:06 - saying assignment to constant variable
150:09 - so all it's saying is hey you cannot
150:11 - redefine a constant so that's why i'm
150:14 - changing it to a let now you can
150:16 - redefine it right here and we should be
150:17 - good and let's do that trick again let's
150:21 - return result as an object so it looks
150:23 - nice when we print it and you can see
150:24 - result is five now imagine we have one
150:28 - comma two one two
150:30 - so the max in this array is what
150:33 - it is a
150:34 - it's the 4. so let's
150:36 - see if it gives us a 4.
150:38 - yes it does beautiful look at that let's
150:41 - go 20 now
150:43 - and 10.
150:44 - and let's see if that works beautiful
150:46 - and now let's make this array
150:48 - now let's make this massive right like
150:50 - let's just
150:51 - uh
150:54 - yeah let's let's take this right here
150:56 - and let's just paste a couple of times
150:58 - and run it and look at that it says
151:00 - result is 20 and if i make this
151:03 - a 3 over here and run it
151:06 - boom result is 30. i mean it will find
151:09 - it wherever the max is it will find that
151:11 - max right so this is a really nice
151:14 - function that we have created now let's
151:17 - keep building on this okay so this is
151:19 - all going to be making sense and trust
151:20 - me it's going to be so important for you
151:22 - once you start getting to
151:24 - building projects and doing those types
151:26 - of exercises you're going to wish that
151:28 - you spent the time to learn this because
151:30 - this is going to be a complete game
151:32 - changer for you all right so our max
151:34 - function is done
151:35 - let's work on a different function now
151:38 - and what this function will do is
151:41 - it will
151:42 - calculate frequency okay so let's go
151:45 - ahead and try that so we're going to
151:46 - const
151:47 - frequency
151:50 - okay it's going to take in
151:52 - uh let's say a phrase
151:55 - that somebody will say and i'll tell you
151:57 - how many times
151:59 - uh that phrase or that or sorry that
152:02 - that letter occurs okay
152:04 - so let's just say
152:05 - letter frequency
152:08 - okay so what does that mean so say i
152:10 - said
152:11 - haha
152:12 - here's what it should return
152:14 - okay so if i call the function letter
152:16 - frequency on the word haha here's what
152:19 - it should return it should return
152:21 - an object and the object should say h
152:25 - occurs twice
152:27 - and a
152:28 - occurs twice
152:30 - that's what it should return so
152:33 - how do we
152:35 - create this function so it does that if
152:37 - you want to give it a try you can this
152:40 - will be hard because you'll need to use
152:42 - your object knowledge as well that we
152:44 - put together a while ago
152:46 - but this will be using you know summing
152:48 - up numbers looping through things
152:50 - iterating and all kinds of stuff like
152:52 - that and so
152:53 - uh incrementing variables is going to be
152:55 - a tough one if you try to solve it
152:56 - yourself but you should give this a try
152:59 - right about now and we'll continue in
153:00 - five seconds five four three two one
153:05 - let's continue
153:06 - so i have letter frequency how do i
153:09 - determine this
153:10 - okay let's figure it out together
153:13 - first let's just go ahead and call this
153:15 - function so we're just going to say
153:16 - letter
153:17 - frequency and we're going to give it
153:19 - that phrase haha like this
153:22 - and uh let's console log that phrase
153:26 - let's delete that line and let's just
153:27 - make sure that this letter frequency is
153:29 - running okay haha showing up perfect now
153:32 - what do we want to do
153:33 - we're we're getting haha
153:35 - well we need to actually start writing a
153:38 - for loop that will start going through
153:40 - all of those letters because that's
153:41 - going to be important
153:43 - okay
153:44 - so let's go ahead and write a for loop
153:46 - so i'm going to say for
153:48 - letter const letter
153:50 - of phrase and let's just go console log
153:53 - and we're just going to console log each
153:55 - letter and let's see what we get
153:57 - we get h-a-h-a
153:59 - okay great now this is where objects are
154:02 - going to start becoming very very handy
154:04 - because you know key value pairs are
154:08 - going to be absolutely clutch for this
154:11 - um arrays are not a good solution for
154:13 - this okay but like objects are objects
154:16 - are also great for storing you know
154:18 - information in your phone book like on
154:20 - my iphone
154:22 - when i'm going through that is being
154:24 - stored in an object okay that's why i
154:26 - have you know my name
154:28 - my you know i could look up somebody by
154:29 - their name their phone number etc and
154:32 - objects are great for that so we're
154:34 - gonna go and look at something in the
154:37 - console okay and that's gonna make our
154:38 - lives a lot easier so say we have
154:41 - something called
154:42 - word and this word has let's actually
154:46 - give it let's actually call it frequency
154:48 - right or freak
154:49 - um
154:50 - and let's say this frequency has
154:53 - that the h is
154:56 - once
154:57 - and that's it okay so it has one h in
154:59 - there now if we have a word like haha or
155:02 - whatever right or if we want to just
155:04 - check
155:05 - yo is h inside of the frequency
155:10 - we're actually able to check that and it
155:11 - goes yes h actually exists because it
155:14 - can if you do h and frequency what it
155:16 - does is it looks for
155:18 - h as a key
155:20 - ins and searches all the keys inside of
155:22 - an object okay so it goes yes h exists
155:27 - and uh if i go
155:29 - you know because of the word haha does a
155:31 - exist in frequency and when i look it
155:33 - says no
155:34 - that a does not exist that's actually
155:36 - false
155:37 - so using this we're actually able to see
155:40 - if we've already stored something in our
155:42 - object or not because the way that we
155:44 - want to do this is we want to go and say
155:47 - okay so say we have the word haha then i
155:50 - want to have a object
155:53 - i'll just write it out here and it
155:54 - should loop through
155:56 - and in the first loop it should notice
155:58 - that there's a letter h so as soon as i
156:00 - notice the letter h i make a key for h
156:04 - all right and because i know it showed
156:06 - up once i set it to one so i go that key
156:10 - is equal and it's it has a value of one
156:13 - now
156:14 - then i loop through that
156:17 - other word again and this time i see
156:19 - that we have a okay perfect
156:22 - well have i seen a before
156:25 - no i haven't so then i set a to 1
156:28 - and so far so good
156:30 - okay then we loop through the third time
156:33 - and i see h again well i've already seen
156:35 - this before
156:36 - so what do i do if i've seen this before
156:39 - am i gonna go ahead and make another h
156:42 - and then set that to one you can't do
156:44 - that because in objects you can't have
156:47 - the same key repeating twice so we have
156:49 - this key here and that this key here so
156:51 - what will happen instead is we will end
156:54 - up overwriting this key
156:56 - and just do h as one and that's what it
156:59 - was in the first place but that's not
157:00 - the result we want we actually want to
157:03 - we actually want to increment this key
157:06 - right here
157:07 - this h1 right so we want to increment
157:09 - this one
157:11 - by doing plus one and making it a two so
157:14 - how do we do that what we do is we go
157:17 - hey does h already exist and we do this
157:19 - little checker here right there
157:21 - and if it says yes h already exists then
157:24 - we go go to h
157:26 - and
157:27 - and add one to its value so it goes okay
157:30 - i'm to go ahead and i'm going to do that
157:33 - so we go to this and this becomes a 2
157:37 - right and then we go to the fourth
157:39 - letter in haha
157:41 - and we do the same thing and we go hey
157:43 - does a actually exist in frequency and
157:46 - in this case it's supposed to be a true
157:48 - and it goes yes a does exist and so if
157:51 - that's true
157:52 - we then go okay find the existing a find
157:55 - its value and increment its value by one
157:58 - and then we get 2.
158:00 - okay so that's how that works that's how
158:03 - that works
158:04 - so let's go ahead and basically say that
158:06 - algorithm
158:08 - but in code this time
158:10 - so first we're going to make a frequency
158:13 - make a frequency object
158:16 - and that's going to store all the memory
158:18 - slash all the data of what it has seen
158:21 - so far
158:22 - okay so this is so make a frequency
158:24 - object okay it's going to be called
158:26 - frequency kind of like we did here okay
158:29 - but in the start it's just going to be
158:30 - empty it's going to be an empty object
158:34 - then we obviously loop through all the
158:36 - letters of the phrase
158:38 - and we check if that letter that we
158:41 - found in phrase does that already exist
158:43 - in
158:44 - frequency so
158:46 - check if letter exists in frequency
158:52 - so you make sure to you know we're kind
158:54 - of writing pseudo code right now because
158:56 - we're just writing it kind of like code
158:58 - but in english and then later you just
159:00 - turn it into
159:02 - code and then you're done so if we check
159:04 - if the letter exists in frequency okay
159:07 - what next
159:09 - well if it exists remember if it exists
159:13 - we're gonna increment by one
159:16 - otherwise we set it to one
159:19 - so let's write that check if letter
159:21 - exists in frequency
159:24 - if it exists so this is going to be
159:26 - indented because this is going to be
159:28 - nested inside of this if condition and
159:30 - we're going to say if it exists we'll
159:31 - then
159:34 - increment
159:36 - the value
159:38 - by one
159:39 - otherwise
159:45 - set it set
159:51 - the value to one
159:54 - okay that's essentially all we're doing
159:57 - and so now take take some time to see if
159:59 - you can actually write this as code and
160:01 - then obviously at the end we're just
160:03 - going to return that frequency that we
160:05 - created okay so we're going to return
160:07 - that frequency so const or let's go let
160:11 - frequency
160:13 - equal an empty object
160:16 - so see if you could code up the rest of
160:18 - this okay take maybe
160:20 - a minute or five minutes or whatever and
160:22 - even if it takes you 20 minutes it's
160:24 - totally fine because this is normal okay
160:26 - you're not supposed to get it this fast
160:28 - this is supposed to take you a lot of
160:29 - time
160:30 - but take some time i'll give you five
160:31 - seconds to pause the video and try it on
160:33 - your own five four three two one
160:37 - all right let's do it together now
160:39 - check if the letter exists i'm going to
160:41 - say
160:41 - how do i check well i just checked by
160:43 - doing letter
160:46 - in frequency okay does that letter exist
160:48 - in frequency this will evaluate to true
160:50 - or if false that's it i'm going to say
160:53 - if
160:54 - letter is in frequency
160:57 - then
160:58 - do the following
161:00 - and then we're going to say increment
161:01 - the value by plus one so how do we do
161:03 - that let's do that right now
161:05 - we're just going to say frequency
161:11 - of that letter so we're creating a new
161:13 - key on the fly
161:14 - and we're gonna say equal to
161:21 - whatever it was before
161:25 - plus one
161:27 - okay so it's like whatever frequency
161:29 - of the letter previously was just like
161:33 - incremented by one okay if it doesn't
161:35 - exist which is the only other scenario
161:38 - then what we can actually say
161:41 - is we can go and say hey set the
161:43 - frequency
161:45 - of that letter
161:47 - to one
161:48 - that's it
161:49 - and uh then we just return that
161:52 - frequency okay so let's try it on this
161:54 - word
161:55 - haha and see what we get
161:59 - and look at that we get h is 2 and a is
162:02 - 2.
162:03 - that's crazy right like we just coded
162:06 - that out from scratch and it works so
162:08 - nicely and let's try
162:12 - lol what are you
162:15 - doing
162:16 - later tonight lol
162:19 - haha
162:21 - okay
162:22 - let's run this
162:24 - and it just runs through every single
162:26 - letter right here
162:29 - and it says l happens about five times
162:32 - is that true let's see
162:34 - l
162:35 - two so one two
162:38 - and then we got
162:41 - three
162:42 - four five yep so that looks like it
162:44 - happens five times and it says how many
162:46 - times o happens and it says how many
162:48 - times a comma happens how many spaces
162:50 - there are
162:52 - and it just shows you the whole freaking
162:53 - thing right
162:55 - so
162:56 - frequency is working as expected now one
162:59 - thing i'm going to show you is called
163:01 - incr these are incremental operators
163:04 - okay at least that's what i call them
163:06 - and they are plus plus
163:10 - minus minus
163:12 - plus equals
163:14 - okay
163:16 - um plus equals one and so these are
163:19 - incremental operators they're really
163:21 - really helpful and make everything
163:23 - shorter so for example this over here
163:26 - you won't ever see it written like this
163:29 - if somebody's coding this up they're
163:30 - gonna write this like this
163:33 - okay so it's gonna say plus equal 1. so
163:36 - plus equal 1 is the same thing as
163:38 - frequency letter
163:40 - is equal to frequency letter plus 1. so
163:42 - these two are equal and i just want you
163:45 - to kind of get used to seeing them okay
163:47 - and we can go and change
163:49 - some of our stuff
163:51 - above as well so like where it says
163:53 - result equals result plus number
163:56 - right
163:57 - how could we change this here
163:59 - try it on your own take about five
164:01 - seconds and this you should be able to
164:02 - do in five seconds five
164:04 - four three two one
164:06 - you could change this with a plus equal
164:09 - all right
164:10 - incrementing it like that okay
164:13 - and if you're incrementing something by
164:16 - one here's the cool thing you could also
164:18 - just do
164:19 - frequency plus plus
164:22 - and that just this just means that
164:24 - you're incrementing frequency by one so
164:27 - let me try hitting run
164:28 - you can see that this works right
164:31 - you can hit one run on this and you can
164:33 - see that this also works and gets the
164:35 - same result
164:36 - and we can you know
164:39 - or you can go back to the oldest one and
164:40 - see we get the same results so it's a
164:42 - matter of preference you never want to
164:44 - write it the long way
164:46 - you won't ever see it written the long
164:48 - way and you could write it in between
164:50 - these two ways so you could go plus
164:52 - equals one or you could go plus plus
164:53 - either work
164:54 - okay so i just thought you should know
164:56 - those you could also go minus minus and
165:00 - that will like decrement it
165:02 - okay and um
165:04 - you know
165:05 - so i'll just leave this as plus equals
165:08 - one for you just so you can wrap your
165:10 - mind around this
165:12 - and get used to seeing it okay so these
165:14 - are incremental operators they're very
165:16 - very useful and
165:18 - very commonly used
165:21 - now i'm going to remove all these
165:22 - comments or i can just leave them here
165:24 - if because you know this might
165:27 - this might kind of
165:28 - hurt your brain a little bit how's this
165:30 - frequency thing working so i'm going to
165:32 - leave that here for you all right now
165:34 - let's just keep building on this and
165:35 - let's keep taking it a step further so
165:38 - now instead of letter frequency
165:40 - let's
165:41 - improve our our skills and and do
165:44 - something called word frequency okay so
165:46 - we're going to build a new one i'm going
165:48 - to say const
165:50 - word frequency
165:51 - and see if you can try to challenge
165:53 - yourself to take a stab at this phrase
165:57 - and then we're gonna run this function
165:59 - okay
166:01 - and we're gonna do the similar similar
166:03 - type of approach we're gonna create
166:05 - frequency here as an empty object and
166:07 - we're gonna return frequency at the end
166:10 - all right
166:12 - um and
166:14 - inside of here we're gonna do our like
166:16 - coding okay this is where we're gonna be
166:18 - doing our logic now
166:20 - here's the one interesting part here
166:23 - i'm gonna comment this out
166:25 - obviously let's comment that out let's
166:27 - go ahead and console.log word frequency
166:30 - to make sure it's running
166:31 - and let's give it a phrase the phrase is
166:34 - lol
166:35 - what is going on
166:37 - lol what
166:40 - law let's just say that okay lol what
166:42 - lol
166:43 - so we know that if we run that here's
166:45 - what we should get so
166:48 - if i run this function so let's have an
166:50 - example and this is also really good for
166:52 - documentation because
166:54 - by looking at this people can know
166:57 - how to call your function and then what
166:59 - your function actually returns at the
167:01 - end so i'm going to say word frequency
167:03 - and if i call this function with this
167:05 - phrase law what law
167:08 - it will return the following it'll say
167:11 - lol
167:14 - occurs twice
167:17 - and
167:18 - what occurs one time
167:22 - okay just like that
167:25 - and um this is what it should return
167:28 - so how do we make it so it does that
167:30 - well i wanna i have to teach you a
167:32 - couple of things for this so say i have
167:34 - a phrase
167:36 - and let's go phrase is equal to lol what
167:40 - lol
167:41 - so what we would really love
167:44 - for to happen is imagine we had an array
167:48 - and
167:49 - it had a it had things like this
167:54 - that'd be really nice because if we loop
167:56 - through something like that right in an
167:58 - array it would just
168:00 - loop through the words and we want to
168:02 - loop through the words instead of
168:04 - letters that's the only difference here
168:06 - between last exercise and this exercise
168:09 - okay so how
168:10 - then the question is how do we get it
168:12 - into an array so we can loop through it
168:13 - because
168:14 - if you try to loop through it in a
168:15 - string watch what's gonna happen okay so
168:17 - if you try to loop through in a string
168:19 - it's gonna loop through and print out
168:21 - every single letter from here
168:24 - so let's try to write a loop and loop
168:26 - through this so i'm gonna say
168:28 - four
168:30 - letter
168:32 - in phrase
168:37 - console.log letter
168:39 - okay and we're gonna hit enter we're
168:41 - gonna close the parentheses and run this
168:43 - right and it's just gonna oh sorry not
168:46 - not in let's run that loop again and say
168:48 - of
168:54 - of
168:56 - and it's just going to print out every
168:58 - single letter well that's going to be
168:59 - confusing because it's going to
169:01 - count letters for us and instead what we
169:02 - want to do is we want to count words
169:04 - entire words right and words in this
169:07 - case are separated by what what's a
169:09 - common thing all of these words are
169:10 - separated by take i'll give you a hint
169:13 - they're separated by
169:16 - these spaces
169:17 - okay
169:18 - so we can do something cool in
169:20 - javascript we can turn this into an
169:22 - array
169:23 - um
169:24 - and if we turn this into an array so
169:25 - let's say i give you phrase and if i
169:27 - call dot this method got split on it
169:30 - it's a string method and i say split it
169:32 - by spaces
169:34 - and i hit enter watch it what it's going
169:36 - to do it's going to turn that into an
169:37 - array and now that array very clearly
169:40 - has three items and if i loop through
169:42 - through these items watch what's going
169:43 - to happen so
169:45 - i'm just going to call it array
169:48 - okay and then let's just loop through
169:49 - there's a 4
169:51 - word in array
169:53 - console.log
169:55 - word
169:56 - i'm sorry i'm just used to python so
169:58 - it's for of of
170:00 - of of
170:01 - so for word of array
170:04 - yeah law what law so look at that i'm
170:06 - actually looping through
170:09 - the words in that array and i can now in
170:12 - my object see if this word exists and if
170:15 - it does exist then i can increment it by
170:18 - one and if it doesn't exist then i can
170:21 - just set it to one so it's the same
170:23 - exact thing but just with words this
170:26 - time and all you have to do is turn it
170:28 - into an array of words and then you're
170:30 - good so let's give it a try now
170:33 - is what we know so we're gonna once we
170:35 - get our phrase
170:36 - okay what's the first thing we're gonna
170:38 - do to it what's the first thing we're
170:39 - gonna do to that phrase to turn it into
170:41 - an array
170:43 - we're gonna do phrase dot split
170:46 - yeah this is going to turn it into an
170:48 - array but we need it to be separated by
170:52 - what it's separated by spaces in this
170:54 - case okay
170:57 - so boom
170:58 - this is going to give us what we need so
170:59 - now let's
171:01 - let's go ahead and um
171:04 - i'll do
171:05 - let's just call this words
171:07 - okay
171:09 - and um
171:10 - now
171:12 - let's console.log
171:15 - these
171:16 - words and hit run and watch what happens
171:19 - now i hit run and watch i got lol what
171:22 - lol okay
171:24 - if i have hello here and i run it
171:27 - lol what lol hello yeah so now it's
171:30 - doing what we want it to do now the
171:32 - algorithm is going to be pretty much the
171:34 - same as letter frequency
171:37 - very very similar to that so we're going
171:40 - to basically use like a similar
171:43 - similar formula okay that we did here
171:47 - so we're gonna say
171:49 - we're already creating that frequency
171:51 - object there yeah
171:53 - and then we are returning it that's good
171:56 - so we're doing that here too we're
171:57 - creating it and we're returning it so
171:59 - that's good
172:00 - and we're gonna do the same thing so
172:02 - we're gonna say for const word
172:05 - of words
172:08 - okay let's just console log the words
172:10 - for now and let's just see
172:13 - what it's console logging so let's run
172:15 - it
172:16 - and you can see that it goes lola what
172:17 - law perfect is
172:19 - every word and we're gonna do the same
172:21 - thing check if it exists in the
172:23 - frequency if
172:25 - word and frequency
172:27 - then
172:29 - we're going to say
172:31 - we're going to increment it by one
172:33 - so we're going to go
172:35 - frequency
172:37 - word
172:38 - plus equals one
172:41 - else
172:43 - frequency
172:44 - word
172:46 - set it to one
172:48 - and at the end return frequency so let's
172:51 - try this
172:52 - and boom look at that lol is twice what
172:55 - is one time and it's already working
172:58 - right that's crazy so let's go
173:00 - yo yo yo and let's run it and here we're
173:03 - gonna see that yo is coming out three
173:05 - times lol is coming out two times and
173:07 - one is what is coming out one time so
173:10 - i mean this is so cool we just made it
173:12 - but
173:13 - there's something we can do to make it
173:16 - even better
173:17 - i want you to notice the similarities
173:19 - between this
173:21 - and the letter
173:22 - frequency thing that we wrote yeah and
173:25 - instead of calling it letter frequency
173:27 - let's just call it i mean actually let's
173:29 - leave it as letter frequency that's fine
173:32 - but they're very similar right the code
173:34 - here is very very similar to the code we
173:37 - have here for example
173:39 - we're creating a frequency object we're
173:42 - creating a frequency object
173:44 - we're returning frequency
173:46 - we're returning frequency
173:48 - right
173:49 - we're
173:50 - we have a loop that we go through we
173:52 - have a loop that we go through
173:56 - if it's detected in the frequency
173:58 - incremented by one
173:59 - if it's detected in frequency
174:01 - incremented by one
174:03 - if it's not detected set it to one if
174:06 - it's not detected set it to one i mean
174:08 - my gosh there must be something we could
174:11 - do because
174:12 - it looks pretty much like the same exact
174:14 - thing
174:15 - and watch there's something brilliant
174:17 - that we can do so we can actually delete
174:20 - this entire for loop
174:23 - let's get rid of this console log
174:25 - we can delete this
174:27 - let's get rid of this return here
174:31 - let's get rid of this frequency here
174:35 - and the only new thing we need in this
174:37 - is we just need to
174:39 - split it by
174:41 - uh spaces to break it into words
174:44 - right and let's go const words
174:46 - sorry i keep forgetting the cons
174:48 - sometimes
174:51 - and all we do here
174:53 - okay this is going to be so beautiful
174:56 - is
174:58 - we call our letter frequency function
175:00 - that we created earlier and we just pass
175:02 - it words
175:04 - and then ill know what to do with it
175:07 - so it goes in here
175:08 - and then it has instructions for what we
175:10 - need to do
175:11 - right and all we need to do here is just
175:14 - say return
175:16 - so let's try running this
175:18 - and look at that you guys we are getting
175:21 - the same exact answer and it is
175:23 - completely correct yo is three times
175:26 - what is once lol is two times okay
175:30 - now
175:31 - this is if this is not blowing your mind
175:34 - think about it like this when you go to
175:36 - google right and you type in kanye west
175:39 - and it starts auto completing it's using
175:42 - the same thing because it knows
175:45 - what are the things that are being
175:47 - searched frequently
175:49 - and because it knows their frequency
175:51 - it's showing them here so for example
175:53 - maybe this search over here
175:55 - right this kanye west runway
175:57 - that might be done let's say 10 times
176:00 - kanye west net worth
176:04 - might be done five times
176:06 - kanye west's girlfriend might be
176:08 - searched three times
176:09 - okay it's just an object and then google
176:13 - is sorting it and showing you based on
176:15 - the ones that were the most frequent
176:18 - that's the really cool part and this is
176:20 - why
176:21 - you know once you learn this here all
176:23 - you need to do is be able to attach a
176:25 - front end like this and boom your apps
176:27 - are going to be absolutely amazing and
176:29 - mind-blowing so let's try this now okay
176:31 - let's try our own function with
176:33 - different inputs we're going to say
176:36 - const user input is prompt
176:40 - uh write your
176:43 - sentence
176:45 - right and we're gonna replace this with
176:48 - whatever the user types in so we're
176:50 - gonna say user input here
176:52 - and call this and um
176:54 - yeah let's go ahead and run it write
176:56 - your sentence and we're just gonna say
177:00 - um
177:00 - [Music]
177:01 - kanye
177:03 - west
177:05 - has great music
177:10 - but west side
177:12 - is
177:15 - greater
177:16 - than
177:18 - greater
177:19 - than east side yeah because i live on
177:22 - the west coast in california and then
177:23 - you got all these people in new york and
177:26 - i like that my time gets back
177:29 - i get my three hours back when i come to
177:31 - california instead of losing my three
177:33 - hours when i go to new york so
177:36 - if you're in new york
177:38 - and you want to earn three hours
177:41 - back of your life forever come to
177:43 - california
177:45 - so let's try this
177:48 - yeah and um
177:50 - probably the only thing that occurs
177:52 - twice is
177:53 - west i imagine okay
177:56 - and then let's just write kanye is also
177:59 - the goat
178:01 - the goat
178:03 - that's not gonna work the goat okay ella
178:05 - said the goat
178:07 - and let's hit okay and run it and uh it
178:10 - came back
178:12 - all right and it broke it down
178:14 - and you can see it did a full breakdown
178:16 - of every single word kanye is two west
178:18 - is two
178:19 - has is one great is one music is one but
178:22 - is one side is one is two
178:25 - and the goat is two thus two and it did
178:28 - it all so fast and so quick
178:31 - all right so we did a lot of
178:34 - challenges and exercises and if you want
178:36 - to deep dive and do like a full on boot
178:40 - camp and master arrays
178:42 - and objects then i recommend you
178:45 - deep dive into exercises okay where
178:48 - we'll have
178:50 - additional exercises for you and lance
178:53 - he is going to be your boot camp
178:56 - instructor for those okay so if you want
178:57 - to become a like a legend he's going to
179:00 - help you turn into a black belt my job
179:02 - is to take you from white belt turning
179:04 - into a blue belt he will do that so if
179:06 - you want to for example you know because
179:08 - i'm going to move on to different topics
179:10 - now but if you want to just keep
179:12 - exercising this
179:14 - you can do that
179:15 - you can do that by going into say this
179:17 - exercises folder on the left hand side
179:20 - by the time you're watching this
179:21 - tutorial we'll have bunch of more
179:23 - exercises right now we have this one
179:25 - here that says convert convert hours to
179:27 - seconds you click that okay and then
179:30 - lance has this exercise prepared for you
179:33 - there's a rebel that you'll have to copy
179:35 - okay and paste in your urls and you'll
179:38 - be able to fork this and be able to code
179:41 - it on your own so this is the rupple
179:42 - that lance has created and if you want
179:44 - to be able to do it on your own hit fork
179:46 - at the top okay
179:48 - and then you can actually run this
179:52 - uh rebel
179:54 - okay
179:55 - and uh you can write your code here and
179:57 - you could write your solution here okay
179:58 - and
180:00 - what lance will also be doing with some
180:01 - of these exercises he'll also have a
180:03 - link at the top of the loom video where
180:05 - you'll be able to click and watch his
180:07 - video explaining that exercise
180:09 - explaining that project in detail as
180:11 - well okay so
180:13 - think of him as a
180:15 - solid
180:17 - um you know
180:18 - boot camp instructor that just like kind
180:20 - of dives deep in with you all right so
180:22 - that those are going to be the extra
180:24 - resources available to you with that
180:27 - said
180:28 - with that said
180:30 - you're doing amazing
180:32 - pat yourself on the back i mean wow
180:34 - you're doing an excellent job so far by
180:37 - being here you're putting in the work
180:38 - you're putting in the effort i mean you
180:40 - could be doing so many things you could
180:41 - be playing with your kids right now you
180:43 - could be
180:44 - outside hanging out with your friends
180:47 - you know
180:48 - you probably got off of work and you're
180:49 - putting in that time to learn this i
180:51 - mean that's huge dedication you're
180:53 - taking time away from all this other
180:55 - stuff you could be doing and doing this
180:56 - so now granted coding is a lot of fun
180:59 - but if you're in this stage i know
181:01 - you're doing it for learning and i tip
181:04 - my
181:04 - proverbial hat to you
181:06 - um huge props for making it this far
181:10 - with that said let's keep on rocking and
181:12 - rolling all right now we're gonna move
181:14 - on to something really fun they're
181:16 - called higher order functions don't let
181:20 - the name confuse you or freak you out
181:22 - they're very very easy i swear once you
181:24 - see them a couple of times pattern
181:26 - recognition maybe and then it's so fast
181:28 - it's so easy so let's get to it so there
181:31 - are a couple of higher order functions
181:33 - i'm going to show you okay so higher
181:34 - order functions and i'm going to show
181:36 - you map and i will show you filter map
181:39 - is like one of the most important things
181:41 - that you should use
181:43 - uh i'll also show you reduce okay and uh
181:47 - map will make your life so much easier
181:49 - like you'll be using map so much and
181:51 - then you'll also use filter a lot when
181:53 - you're writing javascript code so let's
181:55 - go ahead and comment out these lines
181:57 - here because we don't need them right
181:59 - now and let's just get started okay so
182:03 - we want to use let's start with doing
182:06 - some of these functions again but
182:08 - instead we're actually going to use map
182:11 - so let's say we want to double our
182:12 - numbers right any number that we give it
182:14 - watch how easy it is so say i have an
182:17 - array i can
182:19 - loop through this
182:20 - using dot map and i can say map and give
182:22 - me a number and for each number i'm just
182:25 - going to console.log it so watch what
182:27 - happens let's run this and boom there i
182:29 - have my loop like look at how clean it
182:31 - is it's just one line right no blocks of
182:34 - code no weird squigglies or anything
182:36 - like that and what i'm what i'm saying
182:38 - is
182:39 - map through this i mean literally think
182:41 - of it like loop through this like it's
182:43 - literally like dot loop and then each
182:46 - variable let's we'll just call it number
182:48 - so like this will be a variable called
182:49 - number then this will be number and this
182:51 - will be number and each time what i want
182:53 - you to do is just print it out so
182:56 - i'm returning this right away but if you
182:58 - wanted to write a full function here you
183:00 - could just do this put open close
183:02 - squigglies and like write whatever you
183:04 - want here okay you could write multiple
183:06 - lines here and when i run this you'd see
183:08 - it's like one haha two haha three haha
183:11 - for haha like so on and so forth so
183:13 - let's remove this now we're doing an
183:15 - implicit return implicit return by not
183:18 - having a squiggly braces here we don't
183:20 - even need to say return it's
183:22 - automatically returning it okay now
183:25 - i want you to take a look at this how
183:27 - could we double all of these numbers
183:30 - here watch how easy it is i could just
183:32 - say number times two and watch what
183:34 - happens so let's just go
183:37 - let result is equal to that and we'll
183:39 - console log result
183:42 - okay let's run this
183:44 - and look at that you guys like that is
183:46 - so clean that is so nice i mean it is
183:50 - the easiest thing right in the world and
183:52 - it just boom two four six eight and all
183:54 - i did is i just said number and multiply
183:56 - that by two now here's also what's cool
183:58 - about map so whenever you have to write
184:00 - loops pretty much just forget about them
184:02 - and you'll be using maps like most of
184:04 - the times in javascript most of the
184:06 - times and what's cool about map is it's
184:08 - also returning to you an array okay so
184:11 - map
184:12 - returns
184:14 - so it loops and returns
184:16 - an array so remember when you have to
184:18 - like make this result thing
184:21 - so for example when we were doubling our
184:23 - numbers right we had to make this result
184:25 - and this temporary array then we had to
184:28 - loop through and push to that array and
184:30 - then return that array well what's
184:32 - amazing about
184:33 - map is
184:35 - it's already doing that it just goes
184:37 - through and doubles it it's
184:38 - automatically pushing it to an array
184:41 - right and then it's returning that array
184:42 - at the end
184:44 - so that's what makes map so freaking
184:46 - awesome and all of our like code that we
184:48 - have written before we could just like
184:50 - replace it right so let's let's rewrite
184:52 - our double functions let's say const
184:54 - double map
184:56 - and
184:57 - it takes in numbers
184:59 - okay and what this does
185:01 - is it will take numbers so we'll do
185:05 - return numbers dot
185:08 - map
185:09 - and for each number just multiply it by
185:12 - two
185:12 - okay so that's it
185:15 - that's our entire
185:16 - function so compare this double here
185:19 - with how many lines of code to this
185:21 - double here with one line of code this
185:23 - is so much cleaner and so let's delete
185:26 - that
185:27 - and let's try running
185:29 - double map
185:31 - and give it an array we'll say one two
185:33 - three and we should get
185:35 - two four six
185:37 - boom look at that we got an array of two
185:39 - four six so this is a much nicer way of
185:42 - writing it so i
185:43 - try turning some of these okay for
185:46 - example
185:47 - you know some of these functions into
185:50 - using map
185:52 - or
185:53 - using filter and see if you could do
185:55 - that all right now what i'm going to do
185:57 - is before we get into the exercises and
185:59 - remember for exercises if you need
186:01 - exercise there'll be an exercise folder
186:03 - for you
186:04 - me or lance will put together these
186:05 - exercises for you and you can always
186:07 - kind of access them from here and
186:09 - exercise okay and by the time you look
186:11 - at this it'll be much more fleshed out
186:14 - so
186:15 - i showed you an example of how to use
186:17 - map
186:18 - so this is
186:20 - map
186:22 - all right now i'm going to show you how
186:24 - to use filter okay that's another
186:26 - important one so say you have numbers
186:29 - like
186:30 - one two three four five six
186:33 - well in order to be able to go through
186:35 - these numbers i mean
186:37 - and and let's say i want you to only
186:39 - give me numbers that are greater than
186:42 - three how are you gonna do that right
186:44 - now
186:45 - let's create our own filters we're gonna
186:46 - say const filter and it takes in numbers
186:51 - and it takes in a filter number as well
186:54 - so like
186:55 - should be greater than or something like
186:57 - this okay so we have to give it a few
186:59 - things we need to give it numbers and we
187:01 - need to give it like it should be
187:02 - greater than 4 or greater than 5 or
187:04 - greater than 3 something like that and
187:06 - then how will it work well
187:08 - we will need to have an empty array to
187:10 - start off with and then what we need to
187:12 - do is go hey is
187:14 - one greater than this number here
187:17 - and
187:18 - if one
187:20 - is greater than this
187:22 - then throw it in that bucket but if it's
187:24 - not let's say we have we chose 3 to be
187:26 - our number here so 1 is not greater than
187:28 - 3 right so then it shouldn't do anything
187:30 - with it and cross it off
187:32 - then we go here is 2 greater than 3 nope
187:35 - is 3 greater than 3 nope is four greater
187:38 - than three yes so then you get four it's
187:40 - five greater than three then you get yes
187:43 - is six greater than three yes
187:45 - right so you pop those numbers in there
187:48 - but besides those you don't so then you
187:49 - get this filtered array okay so if you
187:52 - run filter
187:54 - and let's say we give it
187:56 - uh numbers let's say we give it a
187:59 - you know one two
188:01 - three
188:02 - four five six
188:03 - and then we say it has to be greater
188:05 - than three
188:06 - well then what should filter return
188:09 - it should return
188:11 - four five six that's what it should
188:12 - return so see if you could
188:14 - write this function on your own okay so
188:17 - i'm gonna give you five seconds to pause
188:19 - the video and try giving this a shot on
188:21 - your own five four three two one
188:26 - all right let's do this function
188:27 - together
188:29 - so i have filter here
188:31 - now
188:32 - what we can do is um we have our numbers
188:36 - we have what what it needs to be greater
188:38 - than
188:39 - so we're going to start off with an
188:40 - empty array so we're going to say result
188:42 - equal that empty array let's actually
188:44 - write our for loop first so let's return
188:46 - the result and let's write our for loop
188:48 - so we're going to say 4
188:50 - number of
188:51 - const number of numbers
188:54 - i want you to do the following
188:56 - if
188:57 - number
188:59 - is greater than
189:01 - this number
189:03 - then
189:03 - we're going to do result.push
189:06 - number and then we're going to return
189:08 - that array at the end all right so let's
189:10 - give that a try now so we're going to do
189:12 - console.log
189:15 - and we're going to call our function
189:17 - filter
189:18 - we're going to give it an array of one
189:19 - two three four
189:20 - five six
189:22 - right and then put a comma here and
189:25 - let's give it another argument and the
189:27 - greater than number will be three so
189:29 - let's format our code and let's run it
189:31 - all right and then filter work so it
189:33 - gave us greater than four five and six
189:36 - so here we've kind of created our own
189:39 - filter this is like a manual way of
189:42 - making a filter and it's all right it
189:43 - does okay job if we need you know for
189:46 - example let's say we give it a two well
189:48 - then it should give us number three four
189:50 - five six let's run it so now it's only
189:52 - looking for numbers greater than two so
189:54 - boom it it works
189:56 - but
189:57 - let's use the dot filter method and dot
190:00 - filter is an array method that we can
190:02 - actually use and it makes our life a lot
190:04 - easier okay so watch this what we can do
190:08 - is let's comment this out right now and
190:10 - i can actually go and create nums okay
190:13 - so let's say we create nums one two
190:15 - three four five six okay and let's
190:18 - filter through this so let's say
190:19 - nums.filter and i'm gonna say for each
190:22 - num return to me
190:25 - make sure num is greater than
190:28 - six all right let's console log this and
190:30 - here's the cool thing about filter okay
190:32 - filter returns an array all right that's
190:35 - the cool thing about filters so if i go
190:37 - back to filter here it also it loops and
190:40 - returns an array with matching
190:43 - conditions
190:44 - so that's the difference between map and
190:46 - filter map will return the exact thing
190:49 - and filter will loop and return an array
190:52 - with matching conditions all right so
190:54 - let's give this a try and let's console
190:56 - log this
190:57 - and let's run it nothing is greater than
190:59 - six so that's why we got nothing back
191:01 - let's try three boom four five six let's
191:04 - try uh let's try greater than or equal
191:06 - to this so if we do greater than or
191:08 - equal to then how many items should we
191:11 - get back take a guess
191:13 - all right if you said four good job
191:16 - that's right it is four great work on
191:18 - that but it will return four because
191:20 - it'll be
191:21 - four five and six because they're
191:22 - greater and this is equal
191:24 - greater than or equal to so let's run it
191:28 - one other thing with conditionals that
191:30 - um you should know about is uh operation
191:34 - called and and all right so
191:36 - the and logic is really important for
191:38 - you to learn so let's go ahead and look
191:40 - let's just practice this here but if you
191:43 - have true or false watch what happens if
191:47 - you have these statements like this
191:48 - right if you have true statement or a
191:50 - false statement
191:52 - you can have so
191:54 - if you have this this will return a true
191:56 - and how you write an or
191:58 - is like this in javascript if you do
192:00 - true or false it's going to give you a
192:02 - true if you do true
192:04 - and and
192:06 - and false you're going to get back or
192:08 - false all right so these things are
192:10 - important for you to know they're logic
192:11 - tables and i think it's much better for
192:14 - you to just understand them by example
192:15 - because if i tell you logic tables
192:16 - you're going gonna be like oh my god
192:18 - logic tables what is that well it's a
192:20 - lot simpler than you think so for
192:22 - example say i want numbers greater than
192:27 - four
192:27 - so i want numbers greater than four but
192:30 - i also want numbers
192:32 - uh that are less than three or less than
192:35 - two let's say how can i say that
192:37 - statement well i can say it like this
192:39 - let's go or and now if i run it it's
192:42 - gonna notice that it gave me a five and
192:43 - a six so those match the conditions and
192:46 - it gave me a one because one also
192:48 - matched the condition so
192:50 - anything that's a or statement here's
192:52 - the cool thing about or it needs to
192:54 - match this
192:55 - or this it just needs to match one of
192:58 - them and if it's the case then it'll
193:00 - automatically be true
193:02 - just needs to match one of them but if
193:03 - you said and
193:05 - right if you put a and here logical and
193:07 - like this it won't show anything you
193:10 - know why because nothing matches that
193:13 - nothing is greater there's no number
193:15 - that's greater than five and six and
193:18 - less than two at the same time this
193:20 - wants both to be true at the same exact
193:24 - time so here we wanna put an or examples
193:28 - of these could be like let's say a user
193:31 - is authenticated right in an app
193:34 - and then
193:36 - user
193:37 - is
193:38 - a
193:39 - premium
193:40 - member you know or like
193:43 - and
193:44 - user is paying member
193:47 - so
193:48 - then you want something to happen right
193:50 - so you can go if then you want to run
193:52 - some like piece of code that that let's
193:55 - just say does something okay so if user
193:57 - is out and then like code goes here so
194:01 - if user is authenticated and user is a
194:03 - paying member then do the following so
194:06 - this is an example so if this evaluates
194:08 - to true and this evaluates to true
194:11 - that's the only time this code is going
194:13 - to run but let's say the user is not a
194:16 - paying member and this is false
194:18 - then you know for example let's let's
194:21 - make a let's make an example here let's
194:23 - say you're a youtube user right and you
194:26 - have youtube premium so if you have
194:28 - youtube premium then i show you
194:31 - no ads
194:32 - so if you're authenticated logged in and
194:35 - you're a paying member then i show you
194:37 - no ads otherwise what i do
194:40 - show you ads so that's the nice part
194:43 - about this and and thing
194:45 - so if i can even make it like this right
194:48 - equal true and this is equal to true so
194:50 - that would be like more verbose way of
194:52 - saying it but this is why this chaining
194:55 - kind of comes in but then like doing the
194:57 - same youtube example maybe let's just
195:00 - say that let's remove the ads like let's
195:02 - say the youtube app deciding when to
195:05 - show you the videos so if i go to
195:06 - youtube oh i can't go to youtube right
195:09 - now because i'm in focus mode so you're
195:11 - just gonna have to imagine that we're in
195:13 - youtube because i'm a human being right
195:15 - like i'm sometimes making these courses
195:16 - for you and these exercises for you and
195:18 - then i get distracted spend a bunch of
195:21 - time watching youtube and it's just it's
195:23 - just a waste of time right and i end up
195:26 - not making this course material for you
195:28 - so i have to stop myself and block my
195:30 - own youtube so there you go that's what
195:32 - you saw i've blocked my own youtube and
195:34 - this is what my current focus is so
195:37 - let's just go back because i don't want
195:39 - to fall down the youtube rabbit hole but
195:41 - just imagine in your mind's eye right
195:43 - what happens if you're authenticated you
195:46 - be white we might want to relax this
195:48 - statement and put an or here why you
195:50 - know show youtube videos so
195:54 - whether the youtube user is
195:56 - authenticated or whether the
195:59 - user is a paying member in either case
196:02 - they still get to see youtube videos
196:04 - regardless but let's just say you might
196:07 - have to be logged in so that's why the
196:09 - or so the aura creates relaxing
196:12 - conditions easier to match and creates
196:15 - these strict conditions that are like
196:17 - district disciplinarian father okay so
196:21 - use them accordingly
196:23 - they both have their own use cases uh
196:26 - but they're very important to understand
196:28 - like the and and the ors okay and they
196:30 - come up quite often so here i can using
196:34 - this
196:35 - i can find numbers below a certain thing
196:37 - and numbers less than okay all right so
196:40 - let's make this example a little bit
196:42 - better okay oops did not mean to do that
196:47 - cool let's go back down all right let's
196:49 - make this example a little bit better so
196:50 - what can we do with this okay so say we
196:52 - create a array of objects so this is
196:55 - where it's going to start getting really
196:57 - cool because in reality you're always
196:59 - dealing with or mo a lot of the times
197:01 - you're dealing with array of objects
197:03 - when you're using an api or whatever and
197:05 - i'll show you what it looks like so say
197:06 - you have actors right and you want to
197:09 - have actors with their net worths and
197:11 - then you want to
197:12 - filter based on their net worth so only
197:14 - show you like the richest actors versus
197:17 - like the actors that might not be that
197:19 - rich yeah so let's say we create an
197:21 - array yes first thing we're going to do
197:23 - is we're going to create this array and
197:25 - then inside of this array we're going to
197:27 - have we're going to create an object and
197:30 - we're going to create a name and let's
197:32 - say johnny short for johnny tepp and
197:34 - then we're going to give johnny depp a
197:36 - net worth of whatever that is let's say
197:38 - amber uh net worth of 10 and then uh
197:42 - let's create create leonardo
197:45 - with a huge net worth so whatever that
197:46 - is 100 million cool so we have an array
197:50 - of objects okay so when you have an
197:52 - array of objects what you can do through
197:54 - it is you can loop through it um kind of
197:57 - in like a normal way if you wanted to
198:00 - but i'm just going to go and show you
198:01 - how to make that filter example that
198:02 - we're talking about okay so what i'm
198:04 - going to do is i'm going to say
198:05 - actors.filter and i'm going to filter
198:07 - them and i'm going to grab each actor
198:09 - and i'm going to filter them based on
198:11 - their net worth anywhere where their net
198:13 - worth is greater than 10. so if it's
198:14 - greater than 10 show me those actors so
198:17 - guess which actors it's going to show me
198:20 - can you take a guess i'll give you five
198:21 - seconds five four three two one
198:26 - you're absolutely right it's only going
198:28 - to show me johnny and leonardo it's not
198:30 - gonna show me amber because after that
198:32 - lawsuit she ain't got no money left
198:34 - right so let's hit run on this and we
198:36 - see leonardo and we see johnny and we do
198:40 - not see amber right let's go ahead and
198:42 - comment this out and i'll also delete
198:45 - this line here because we don't need
198:46 - that anymore so let's run this again and
198:48 - you can see that i have johnny and
198:51 - leonardo right here so you can see how
198:53 - powerful filtering is right like it is
198:56 - able to go through an array of objects
198:59 - and it's able to filter based on the net
199:01 - worth and then based on that it's only
199:04 - returning it's creating a new array of
199:06 - objects and it's only returning the
199:07 - objects
199:09 - that
199:10 - have a net worth of greater than 10. and
199:13 - we can keep taking this further now what
199:15 - i want to show you is
199:16 - we can not just keep everything in
199:18 - console logs right but we can also put
199:21 - things to the dom so we're going to get
199:23 - a lot more into dom elements later but
199:25 - right now let's just do a little sneak
199:27 - preview so what i'm going to do is i'm
199:29 - going to say playground dot inner html
199:33 - and um we're gonna now output this stuff
199:36 - to an html okay so i'm gonna say
199:38 - internet html and i'm just gonna say
199:40 - leonardo okay let's start with this and
199:42 - end the h1 tag perfect now let's run it
199:46 - and you can see
199:47 - it runs it right over here the next
199:49 - thing i want to do is right now it's
199:51 - hard coded i'm get how i'm getting his
199:53 - name so let's actually write a piece of
199:56 - code where we can dynamically get this
199:59 - name over here okay so let's go ahead
200:00 - and instead of console logging this
200:02 - result i'm going to store this so we're
200:04 - going to say const result okay or let's
200:06 - just say let result and we're going to
200:08 - store it in here and then here
200:10 - let's make this a template literal where
200:13 - it says hard-coded leonardo we're gonna
200:15 - make it javascript i'm gonna say result
200:17 - get me the zeroth element from the
200:19 - result so that's gonna get me the
200:21 - first thing all right and uh then i'm
200:24 - gonna say
200:25 - dot
200:26 - actually i don't need to do yeah yeah i
200:27 - can do dot name okay result zero dot
200:30 - name so that'll probably get me johnny
200:31 - depp let's run this okay sometimes if it
200:34 - breaks like this just refresh and
200:36 - everything should be fine so i'm gonna
200:37 - go ahead and refresh
200:39 - okay perfect so now you can see that
200:41 - it's actually getting me
200:43 - johnny kind of how i expected it would
200:46 - let's go console.log and we'll see a
200:47 - result here as well so you can see all
200:50 - right and johnny net worth is 200 to
200:54 - whatever two million right and then
200:57 - leonardo dicaprio net worth is 10
200:59 - million and uh i'm able to get johnny
201:02 - right here by doing result zero dot name
201:04 - dynamically if i wanted to basically see
201:08 - let me actually run this again if i
201:09 - wanted to see the entire object like
201:11 - this entire thing but output it onto the
201:14 - dom
201:15 - i could stringify it so i can actually
201:17 - go
201:18 - hey get me the result and then we'll say
201:22 - stringify json. let's go json.stringify
201:27 - and then we'll pass in result okay and
201:30 - let's run this and it'll just kind of
201:32 - like output it kind of like that which
201:34 - looks pretty hideous so we want it to
201:37 - look a little bit better right let's
201:38 - start off with just showing the names of
201:40 - the people that have a higher net worth
201:42 - than let's say
201:43 - two million so basically what i'm gonna
201:45 - do here is i'm gonna do the following
201:48 - okay so let's let's go ahead and run
201:51 - this so what i'm going to do is i want
201:53 - to make it so it just gives me the names
201:56 - of each person okay and how can i do
201:59 - that so say i have an array like this
202:01 - let's store that in results i'm going to
202:04 - paste that here so let's whenever i type
202:06 - in result i should get that well how
202:08 - will i
202:09 - join them
202:10 - what i can do is i can actually map
202:13 - through this because map will return an
202:15 - array and so i'm going to map and first
202:17 - i'm going to get this element and i'm
202:19 - going to get this element and all i'm
202:20 - going to do is i'm just going to pull
202:21 - out the name so what i'm going to do is
202:23 - i'm going to say result.map and i'm
202:24 - going to say for each actor in there i
202:26 - want you to just return to me actor.name
202:28 - so this is just going to return this
202:30 - code here saying return an array with
202:32 - just actor names that's it so return an
202:34 - array map is saying return an array
202:37 - that's just filled with actor names
202:38 - that's it that's all i'm doing so let's
202:40 - run it and boom i'm just getting this
202:42 - back even if i do that that should get
202:45 - me kind of the right result now what i
202:47 - can do on top of this is when you get
202:49 - this array back you can actually call a
202:52 - method like join on it and if you join
202:55 - it it'll actually join it and turn into
202:57 - a string so it's the opposite of splice
202:59 - splice turns it into an array the join
203:02 - will turn it into a string so i'll
203:04 - actually say the join
203:07 - and then join them by either spaces or i
203:09 - can say join them by a comma and a space
203:12 - right so now it's going to be johnny and
203:14 - leonardo and no matter how many actors i
203:16 - had it would kind of join them by name
203:18 - with a comma and a space in there so all
203:21 - i need to do to this thing that we had
203:23 - written earlier and i was just pressing
203:25 - up so i could find that and i'm just
203:27 - going to say dot join and we're going
203:28 - gonna put this here and put a comma
203:30 - right there i'm gonna hit enter and now
203:33 - just doing the whole thing all in one go
203:35 - so
203:36 - let's copy that line and we're gonna do
203:39 - it right here okay
203:41 - let names and i'm going to say names are
203:44 - you know whatever result was we're going
203:46 - to map through it for each actor just
203:48 - get me the actor name
203:50 - so again
203:51 - get me an array with actor names that's
203:54 - all i'm saying here and then join it
203:57 - by a comma and a space and then those
204:00 - names
204:01 - i want them
204:02 - outputted on my
204:04 - dom so let's hit run
204:06 - and you can see that i'm getting those
204:08 - names out put it on my dom okay let's
204:10 - add in a couple of more actors here
204:12 - so boom boom
204:14 - boom
204:15 - so let's look up matt damon networth
204:19 - all right celebritynetworth.com perfect
204:21 - so 170 million all right 170 million
204:26 - let's type that in
204:27 - 170 million let's type it in so we can
204:31 - copy the right amount of zeros here
204:33 - let's copy that let's move it back and
204:36 - i'm going to say matt
204:37 - we'll put that right there so his net
204:39 - worth is 170 million let's uh grab
204:43 - another actor let's go
204:45 - brad pitt
204:47 - net worth
204:49 - okay and we got 300 million here perfect
204:52 - so let's go 300 million and
204:57 - we should get
204:58 - calculator.name nice
205:01 - good website good website and i'm going
205:03 - to copy this right here
205:05 - and we'll paste it right there just
205:07 - remove the commas of course
205:09 - all right so we'll name this one bread
205:13 - red okay that's it and let's remove
205:17 - this one because that's a duplicate so
205:18 - this is this is good for now
205:20 - and um
205:22 - let's let's just run this yeah let's run
205:24 - this and see if it works
205:26 - and so any actors that have a greater
205:28 - than ten dollars net worth you got
205:30 - johnny matt brad pitt and leonardo
205:33 - dicaprio
205:35 - and you know the whole thing works
205:37 - perfectly and what's cool is like if you
205:39 - wanted to show images for them you could
205:41 - also show images you just need to store
205:43 - image url
205:46 - all right so i think these exercises
205:48 - kind of pushed you
205:51 - a little bit when it comes to filter
205:52 - like if you had to write this code
205:56 - without using filter or map oh my god
205:58 - like good luck try it and it will be so
206:00 - many lines of code there will be so many
206:02 - functions
206:03 - with filter and map i mean they just
206:06 - make it so easy to kind of just like
206:08 - go through this so i'm going to comment
206:10 - out all of this comment out this going
206:12 - to comment out all of this right here
206:15 - so when i run it nothing really should
206:17 - be coming up perfect
206:19 - so now what i want to show you i want to
206:21 - show you reduce okay this is the another
206:23 - one that's really really important
206:26 - so when is reduced used
206:28 - let's say you want to combine all of
206:31 - if you want to sum all of the net worths
206:34 - okay so generally whenever you're
206:36 - thinking of summing
206:37 - it's a amazing use case for summing like
206:41 - whenever you think some
206:43 - think
206:44 - reduce okay and i'll just try to teach
206:48 - you with examples because that'll just
206:49 - make it so much easier for you to learn
206:52 - so say we want we have that function
206:54 - where we sum right so let's go ahead and
206:56 - find our sum function
206:58 - so where do we have it
207:01 - some array
207:02 - all right so
207:04 - we have this function some array look at
207:06 - how many lines of code this is right now
207:08 - watch what is going to happen when i use
207:10 - reduce
207:11 - okay when you're summing an accumulator
207:13 - like this that's when you use reduce
207:15 - when you are
207:17 - doing something else where you need to
207:19 - return an array you will use
207:22 - map okay so push gets replaced by an app
207:26 - all right so let's see if we can turn
207:28 - this into a very small lines of code
207:30 - like summing an array of numbers
207:33 - here's how this will look okay some
207:36 - nums okay some
207:39 - with reduce okay so i know it's a big
207:41 - name but this is still a set the you
207:43 - know simple function and i'll show you
207:45 - how it works
207:46 - and here's what we're gonna say
207:48 - okay so we're gonna get numbers
207:51 - and we'll do
207:52 - we'll have it do
207:54 - numbers dot reduce
207:57 - all right so to keep things simple let's
207:59 - uh not even have it be a function okay
208:01 - let's just start actually let's do it
208:03 - right here on the right hand side first
208:05 - so say i have one two three
208:08 - okay how do i sum them up
208:11 - so here's how we're gonna do it
208:14 - with this okay so let's say i have my
208:17 - nums okay so let's say i go nums are 1 2
208:20 - 3
208:21 - and then i'm going to say reduce
208:23 - okay and reduce takes in a function
208:27 - reduce takes in a function as an
208:31 - argument
208:32 - that's why it's called a higher order
208:35 - function
208:36 - because
208:37 - even if you look at filter i don't know
208:39 - if you noticed but what you're really
208:41 - giving filter here
208:43 - so
208:45 - uh let's just go back you know just in
208:46 - case some of this wasn't clear
208:49 - number number times two this is just a
208:51 - fancy way of writing function that takes
208:54 - in a number
208:56 - and then you go return number times two
209:00 - so you're you're creating a function on
209:02 - the fly here okay you're creating like
209:04 - an anonymous function with no name on
209:06 - the fly here
209:08 - and or lambda function and you're just
209:10 - passing it that function okay this is
209:11 - what's called a higher order function
209:12 - you're passing it a function this right
209:14 - here is a function like this right here
209:16 - is a function
209:18 - this right here
209:20 - uh right here is a function
209:22 - and so we're gonna create a function
209:24 - here
209:25 - function
209:27 - and um
209:29 - let's let's give this a try okay so
209:32 - what does reduce do
209:34 - reduce loops
209:36 - and gives you back the accumulator
209:40 - all right so
209:42 - this is going to be my previous value
209:45 - this is going to be my next value i'm
209:47 - just going to call it any x for now and
209:49 - let's just go ahead and console.log
209:52 - previous and next
209:54 - okay and let's run this and let's see
209:56 - what happens
209:57 - okay boom i got one two
209:59 - so what's previous and next in this case
210:02 - right this is our accumulator so it's
210:05 - it's basically going to be like this is
210:06 - the previous value this is the next
210:08 - value so if you do previous plus next
210:12 - it's going to do one plus two
210:14 - and then
210:15 - previous is going to become three
210:18 - okay preview is gonna become three
210:20 - all right and then you're gonna go
210:22 - through this
210:23 - and do three plus three and you're gonna
210:26 - turn it into six
210:27 - now what i'm gonna do is i'm just going
210:29 - to go
210:30 - return
210:31 - previous plus
210:33 - next okay or previous plus
210:36 - current that's usually what they call it
210:38 - okay current so let's do previous plus
210:40 - current
210:41 - and
210:42 - i'm going gonna store the result of this
210:44 - in results so let's go const result is
210:46 - equal to that
210:48 - and we're gonna go console.log and let's
210:50 - get the result and let's take a look at
210:52 - what it is and boom you see that we just
210:54 - got back six okay so
210:57 - this function here with the result um
211:00 - with
211:01 - using reduce it made our life really
211:04 - easy right being able to go through this
211:05 - entire thing and sum it so quickly with
211:08 - essentially one line of code that's a
211:11 - total game changer now let's see if we
211:13 - can even make it simpler so we're going
211:16 - to use es6 notation and turn this
211:18 - function here into an es6 function so
211:20 - watch what happens so this function part
211:23 - is going to lose this right here and we
211:25 - don't need that we don't just say
211:27 - function anymore we're going to put a
211:29 - greater than
211:30 - equal and
211:32 - equal and a greater than sign and then
211:34 - this part here we we want to do implicit
211:37 - return so we're going to remove the
211:38 - return but in order to have implicit
211:40 - return you also need to remove this
211:42 - squiggly like curly braces we're going
211:43 - to remove them
211:45 - we're going to format it okay
211:47 - and you can even if you want try to get
211:50 - this on
211:51 - one line
211:53 - so now that entire solution is just one
211:55 - line
211:56 - so you're using reduce
211:58 - and you're summing up all these numbers
211:59 - so when i hit run watch what happens i
212:01 - got a six
212:02 - and guess what
212:04 - can you remember where we've made a
212:06 - function that takes two numbers and
212:08 - returns their sum because that's all
212:09 - you're doing here you're creating an
212:11 - anonymous function
212:12 - that takes in a number
212:14 - and then just returns
212:16 - and just sums both of them right that's
212:18 - all this is doing so can you remember
212:20 - where we've created a function like this
212:23 - okay i'll give you a couple of seconds
212:24 - five four three two one to find it
212:28 - and let's see if i can find it as well
212:31 - so if you look
212:33 - we created a long time ago
212:35 - we created this function sum right here
212:37 - okay and we even have its short version
212:39 - right here some arrow two some arrow and
212:42 - then we also have some
212:44 - so let's see
212:45 - if we can feed it that function okay so
212:49 - now you're going to start to understand
212:50 - why it's called a higher order function
212:52 - so let's bring it down let's bring some
212:54 - down so i'm going to copy this
212:57 - and i'll bring it down just so you can
212:59 - see it easily
213:00 - and what i'm going to do here is instead
213:02 - of even writing all of this first we're
213:04 - going to turn it into one line of code
213:06 - how we had earlier so we've done that
213:08 - right
213:09 - we said
213:10 - previous current
213:13 - right and then return previous plus
213:15 - current so sum up those two numbers we
213:17 - could also say a comma b
213:20 - return
213:21 - this so if i run this this should still
213:23 - give me a six as expected
213:26 - and here's the cool part i can actually
213:29 - just feed it that entire function just
213:31 - like this so i can just say hey
213:34 - reduce it to one number
213:36 - and then just
213:37 - sum it so that's why it's called reduce
213:39 - because it's an array and you're
213:40 - reducing it down to just one number
213:43 - right it's gonna return one number here
213:45 - that's why it's called reduce and then
213:46 - i'm giving it the sum function and what
213:48 - the sum function does
213:50 - is
213:51 - it just takes in
213:53 - things and it sums them up so let's run
213:55 - this and this still gives me a six let's
213:58 - say i wanted to multi take the
214:01 - multiplicative product of all of these
214:03 - numbers right so i would want to do 1
214:05 - times 2 times 3 times 4. what would i
214:07 - need to do in order to get 1 times 2
214:10 - times 3 times 4. see if you can do that
214:12 - with reduce okay so take a few minutes
214:15 - and try it on your own i'll give you
214:17 - five seconds five four three two one all
214:21 - right let's get let's go all you would
214:24 - have to do is you just have to copy this
214:26 - create a new function call it multiply
214:28 - and you just change this a plus b to a
214:31 - times b
214:32 - and just feed it multiply
214:34 - and now it'll just keep going through
214:36 - multiplying those number saving their
214:38 - accumulator and spit it out so
214:41 - you feed it
214:42 - sum you get some you feed it multiply
214:45 - you get the multiplication
214:47 - multiplicative
214:48 - product at the end
214:50 - so anytime you're
214:52 - using reduce you could create your own
214:54 - function or just on the fly just go a
214:57 - comma b
214:58 - a plus b this is a pattern i use very
215:01 - very very very very often
215:04 - and i hope that you use this don't
215:06 - anytime you're thinking some just copy
215:08 - this for now literally you can copy and
215:10 - paste this most of the times whenever
215:12 - you think some this is usually going to
215:13 - be the answer and then you know you can
215:16 - stack overflow it later and just go hey
215:19 - how do i sum up something with reduce
215:21 - how do i do this with reduce and you're
215:23 - going to start
215:24 - learning this reduces something pretty
215:26 - complicated and so i don't want you to
215:28 - go fully down the rabbit hole but just
215:29 - learn it with pattern recognition
215:31 - anytime you have to sum up numbers use
215:33 - this right a good exercise for you to
215:36 - try would be
215:37 - how can you use reduce to sum up all of
215:39 - these net worths okay so get the total
215:41 - net words so try giving that a you know
215:44 - see if you can give that a try i'll give
215:46 - you five seconds and then we'll try to
215:47 - solve that together okay so i'll give
215:49 - five
215:50 - four
215:51 - three two
215:53 - one
215:54 - all right let's try to solve that one
215:56 - together all right so i got all these
215:58 - net words over here
216:00 - and i want to sum them up how do i do
216:02 - that by the way just a pro tip in
216:05 - replied there's something really sick
216:07 - that allows you to explain code so let's
216:10 - say you're not understanding what this
216:11 - is you can highlight this right click
216:13 - and click this button that says explain
216:15 - code and this does a pretty freaking
216:18 - good job this code takes the array nums
216:21 - and reduces it to a single value by
216:24 - adding each value together
216:26 - that is a really good explanation so you
216:29 - could hit yes and then you can also hit
216:30 - regenerate and it generates a new
216:32 - explanation for you so this code takes
216:34 - an array reduce it to single number
216:36 - adding all the numbers together
216:38 - so
216:39 - that's a really freaking awesome feature
216:41 - of replica make sure to keep using that
216:44 - anywhere you're kind of confused and you
216:46 - don't know why we're doing a certain
216:48 - thing i mean i'm kind of blown away by
216:50 - it it's really it's really good okay so
216:53 - like for example look at line 356 right
216:55 - now right
216:56 - if you highlight this and right click
216:58 - and hit explain code
217:00 - it will tell you watch this code is an
217:03 - example of template literals
217:05 - brilliant it is used to display the
217:07 - value of variable called names inside an
217:10 - h1 tag
217:11 - this is brilliant this is explaining it
217:14 - better than me let's see what it says
217:16 - about this filter one let's see how good
217:18 - of a job it does here so let's explain
217:20 - code
217:21 - this code filters the actors array for
217:23 - all actors that have a net worth greater
217:25 - than 10. oh my god
217:30 - oh my god
217:32 - so now let's play with this um actors
217:35 - array that we were working with earlier
217:36 - right so i'm going to comment out all of
217:38 - this stuff here for a second
217:40 - and i'm going to go back to this actor
217:43 - stuff and let's go ahead and we don't
217:46 - need to uncomment anything let's just go
217:48 - down here and i'm just going to say
217:50 - actors.reduce
217:52 - and i'm just going to write what i had
217:54 - written before and then i'll then i'll
217:56 - start using my brain okay and so there's
217:59 - gonna be an accumulator oh one of the
218:01 - things
218:03 - that is kind of useful to know that i'll
218:05 - kind of tell you in a second
218:07 - is this okay let me actually tell it to
218:09 - you right now so you're not confused
218:11 - later okay so let's go ahead and comment
218:12 - all of this
218:14 - right here
218:15 - you could pass in so it this reduce
218:17 - takes in two arguments one argument is a
218:19 - function and the other argument it takes
218:21 - in is like some kind of number okay so
218:25 - it takes in two arguments
218:26 - so we have already given it a function
218:29 - and then we can give it another argument
218:30 - like a zero so watch what happens when i
218:32 - run it right now i get 10
218:34 - but i could also start the accumulator
218:36 - from negative 10
218:38 - and then it will count up to zero right
218:40 - or i could start it at already ten and
218:43 - when i started from there it will count
218:45 - up to twenty so this secondary argument
218:48 - by default usually it starts at zero but
218:51 - you can also specify this one so helpful
218:54 - for you to know if you don't need that
218:56 - you could just write it like this okay
218:57 - but i'll just leave that here so you
218:59 - know
219:00 - that there's different options for you
219:02 - available okay let's go back to this
219:04 - part here where we were writing actors
219:06 - reduce so this is going to be my
219:08 - previous value okay and my accumulator
219:11 - is going to be zero and then what i'm
219:14 - going to do is
219:15 - for my current value okay so this is
219:18 - previous this is current and i can just
219:21 - say dot net worth
219:24 - and let's see if this does what we want
219:25 - it to do let's console log the result of
219:28 - this
219:29 - and if it doesn't then we'll try to fix
219:30 - it and looks like it does it combines
219:32 - all of those net words already okay so
219:35 - this is previous
219:38 - right if i had to write it in a verbose
219:40 - way
219:40 - let's write here previous
219:43 - this is current
219:45 - as you just say current not net worth
219:47 - and then previous is that so previous is
219:49 - like in the start previous is zero
219:52 - then previous is like
219:54 - uh whatever the result of this was
219:56 - so it's kind of like recursive
219:58 - why is it yeah so okay so think about it
220:01 - like this right we're going through it
220:03 - the first time
220:04 - first loop first
220:06 - previous is zero so zero plus 20 million
220:09 - or whatever is 20 million so then
220:11 - previous becomes this next time then 20
220:13 - million plus 10
220:15 - then that becomes you know that like 20
220:18 - million 10 or something like that right
220:21 - and then
220:22 - uh you add it again and then previous
220:24 - becomes the sum of
220:26 - 20 million plus 170 million so this
220:29 - becomes like
220:30 - 190 million or something like that okay
220:33 - and so that's how previous works do this
220:36 - we'll say console.log
220:39 - and i'll run this and if you remove the
220:42 - zero this should still work because by
220:43 - default it's uh zero oh no actually in
220:46 - this case it won't work c so we have to
220:48 - actually pass in a zero so that's why
220:50 - that's important uh because something
220:52 - because it was trying to like add the
220:54 - objects on top of each other so it
220:56 - becomes weird so just pass in that zero
220:58 - if you need to and then this way you can
221:00 - sum it up so see reduce allows you a
221:02 - nice little way to sum up this whole
221:04 - thing
221:04 - let's comment this out all right let's
221:06 - run and hopefully nothing prints out
221:08 - beautiful so just to recap we talked
221:11 - about
221:12 - map function and how you can use map to
221:14 - double numbers
221:16 - we talked about filter and how you could
221:18 - filter for specific net worths we talked
221:21 - about
221:22 - reduce
221:24 - and how you could reduce things to a
221:26 - single value and sum them up together or
221:29 - essentially how you could sum up things
221:31 - without having to
221:32 - you know loop through and do it all
221:34 - manually reduce allows you to do it kind
221:36 - of in one go so you know and we talked
221:39 - about higher order functions how higher
221:41 - order functions
221:42 - work together meaning it's a function
221:45 - that takes in another function as an
221:46 - argument that's why it's called a higher
221:48 - order function so we talked about those
221:50 - there's a lot that we covered and this
221:53 - is kind of like the part where it gets
221:55 - kind of complex and it's like what is
221:57 - happening things will keep getting
221:59 - harder so i don't want to promise you
222:00 - things will get easier but this is one
222:02 - of the pretty challenging parts to
222:04 - understand if you don't really grasp it
222:05 - right away don't beat yourself up it's
222:07 - totally normal it's okay all right
222:09 - you're in the right place
222:11 - with that said we're going to keep on
222:12 - rocking and rolling and learning new
222:14 - things
222:15 - all right boys and girls let's get back
222:17 - to it before we're very close to getting
222:20 - to that rock paper scissors game for you
222:23 - and that's going to be really exciting
222:25 - but first things first
222:27 - we have to work on
222:29 - getting your
222:31 - dom skills up okay so let's go ahead and
222:34 - talk about
222:36 - dom manipulation and no i'm not talking
222:39 - about a dominatrix get your head out of
222:41 - the gutter okay i'm talking about
222:43 - this dom right over here all right so
222:46 - when you see stuff in this console log
222:50 - right here
222:51 - that usually has to do with
222:54 - um
222:55 - that's just whatever is in your console
222:56 - but when you see stuff here that's your
222:58 - dom okay it stands for
223:01 - document object model which
223:04 - you never have to remember again okay
223:06 - it's just like nerdy knowledge that
223:08 - won't really be super useful for you in
223:10 - the real world you'll just refer to it
223:11 - as dom most of the times dom and it's
223:14 - just hey this is the stuff that's
223:15 - showing up here okay so how do i change
223:18 - this exercise to say
223:20 - exercise how do i say change
223:23 - this projects here from being
223:26 - written in black to be written in red
223:30 - all right all of that requires you to
223:31 - manipulate the dom
223:34 - when we're playing rock paper scissors
223:35 - right how come when i
223:38 - click this button watch
223:40 - it's going to say rock versus scissors
223:42 - you win when i click this hand
223:45 - let me move myself here when i click
223:47 - this hand watch what happens
223:50 - boom boom boom boom boom boom boom boom
223:52 - right all of this right here my friend
223:55 - is just dom manipulation boom dom
223:58 - manipulation
224:00 - this changing here when i hit this red
224:02 - button right here watch what's gonna
224:03 - happen boom everything got cleared up
224:06 - that right there dom manipulation
224:09 - okay so let's go back
224:11 - so that's what we're gonna work on okay
224:13 - how do we actually make stuff happen on
224:15 - the screen how do we change stuff on the
224:17 - screen with javascript how do we mess
224:19 - around with the html
224:21 - with javascript
224:23 - and we're going to play around with that
224:25 - a little bit
224:26 - so let's go ahead to our index.html and
224:29 - i'm going to go ahead and add in a div
224:31 - okay and
224:33 - we can add in a div
224:34 - actually let's do this to do some dom
224:36 - manipulation some of this stuff let's do
224:38 - it
224:39 - also outside of this replace stuff that
224:42 - we're doing here so you can start to
224:43 - learn how to do things from scratch
224:44 - yourself as well okay so just do me a
224:47 - favor hit command t or control t on your
224:49 - computer open a new tab and let's go to
224:52 - replic.com
224:54 - okay
224:54 - and now here just open a new repl
224:57 - okay so for example there's a multiple
225:00 - repels let's go back
225:01 - multiple rebels that show up here let's
225:04 - just choose the html css and javascript
225:06 - one okay depending on when you're
225:08 - watching this maybe if they updated the
225:10 - site click a plus button and then choose
225:12 - html css and javascript okay whichever
225:15 - way you want to do this so i'll just
225:16 - click here
225:18 - and what do we want to call this i'm
225:19 - just going to say dom manipulation
225:22 - lesson
225:23 - all right
225:24 - and then go ahead hit create
225:26 - perfect it'll bring you to here
225:28 - okay and if you hit run
225:30 - uh right now you should see hello world
225:33 - on the screen how are you seeing this so
225:35 - you came with three files here
225:37 - index.html script.js style.css now to
225:40 - style.css don't worry about it just for
225:42 - styling
225:44 - the main ones that we're going to be
225:45 - worrying about here is the html and the
225:47 - script
225:48 - so
225:49 - this is pretty much standard html that
225:52 - when you just like make any javascript
225:55 - app
225:56 - you you you know you you kind of start
225:59 - off with but to make it even less
226:00 - intimidating for you to start off let's
226:02 - just remove almost everything we're just
226:04 - going to leave a script tag here
226:07 - and let's say if we can say hello world
226:09 - in this h2 and let's hit run let's see
226:11 - if this works so it looks like hello
226:14 - world shows up here so this is literally
226:16 - two lines of code okay
226:18 - and let's even write this line of code
226:21 - here so you understand how to link a
226:22 - style sheet to your javascript sheet
226:25 - okay so hello world
226:27 - and
226:28 - now let's go to our script.js file and
226:30 - we'll write console.log
226:32 - and i'll say hello and i'll hit run and
226:35 - notice the problem that we ran into
226:37 - right
226:38 - where is our hello hello why isn't this
226:41 - showing up in the console what we need
226:43 - to do is link this style sheet
226:46 - to this script sheet okay so we need to
226:48 - go ahead and do that let me zoom in
226:50 - a little bit so you can see everything a
226:53 - lot more clearly so let's go ahead and
226:55 - do that and i'm going to link this
226:57 - okay move this over here
227:00 - so we're going to say script hit tab
227:02 - and it'll create these
227:04 - tabs for you right
227:06 - and then we're going to say script
227:08 - source is and for source i'm going to
227:10 - say script.js because this is the name
227:12 - of this file
227:14 - you could call this whatever you want as
227:16 - long as you change the name here for
227:17 - script
227:18 - let's hit run
227:20 - and
227:20 - [Music]
227:22 - now you see hello over here is showing
227:25 - up
227:26 - okay
227:27 - perfect
227:29 - so we have linked our index.html with
227:32 - our
227:34 - script.js
227:35 - okay now let's do basic dom manipulation
227:38 - okay how are we going to do this well
227:40 - what i want to do is this h2 i'm going
227:42 - to give it an id and we're just going to
227:45 - call it title and then we're going to
227:46 - come here and i'm going to say let
227:49 - title
227:50 - equal
227:51 - and
227:52 - what's cool about javascript is you can
227:54 - do something called
227:55 - document.getelementbyid
227:58 - so we're gonna pull
228:00 - this specific element right over here
228:02 - this h2 right here by putting in the id
228:06 - so what's the id
228:08 - can you guess
228:09 - right it's title
228:11 - okay
228:12 - so i'm gonna get this id and then let's
228:15 - go ahead and console.log this and let's
228:18 - see what it shows us on the screen so
228:19 - i'm gonna say console.log.title
228:21 - let's run this
228:23 - um sometimes if your app kind of breaks
228:25 - out like this just hit
228:27 - just go ahead and hit refresh so i'm
228:28 - going to refresh here not a big problem
228:32 - all right let's run it again
228:33 - and you can see that it says hello and
228:36 - then it says html heading element so
228:38 - it's it's showing us something that's a
228:40 - really good sign now what i want to do
228:43 - is i'm going to say take the title
228:45 - okay and we're going to see if we can
228:48 - grab its title dot inner text so let's
228:50 - try this let's see if we can do this
228:53 - ah so i'm actually able to pull the text
228:55 - of this title so now let's go to our
228:57 - html and change this hello world to
229:00 - hello world
229:01 - hello
229:02 - knight
229:04 - and let's run
229:05 - and and you can see that we're actually
229:07 - pulling hello knight from here
229:10 - right from html
229:12 - we're pulling that and reading it in our
229:14 - javascript so that's a really good
229:16 - sign means
229:18 - we can actually now do stuff with it now
229:20 - here's the cool part how can we go the
229:22 - other way how can we update our html
229:26 - from our javascript and then it'll show
229:28 - up here so let's go ahead and do that
229:30 - now i'm going to say title dot inner
229:33 - text
229:35 - and let's just change it to whatever we
229:36 - want okay so let's say we want our inner
229:39 - text to say
229:41 - goodbye
229:43 - so let's say we wanted to say goodbye
229:46 - my lover
229:47 - goodbye my lover goodbye my friend you
229:52 - have been the one
229:54 - there we go so look at that right now
229:56 - i'm gonna i'm gonna let's um
229:58 - let's run this
230:00 - and you see for a fraction of a second
230:02 - it'll say hello
230:04 - night and then it says goodbye my lover
230:07 - so let's run this
230:09 - fraction of a second and then it goes to
230:11 - go down my lover
230:12 - so
230:14 - we're printing out the text before
230:16 - changing it let's also print it out
230:18 - after changing it so we're gonna say
230:20 - okay and in our console log here
230:23 - we're gonna say before
230:25 - like that and then here we'll say after
230:28 - like that
230:30 - and
230:31 - let's run this now and you can see
230:34 - before it was hello at night and then
230:36 - after it became good by my lover so that
230:39 - is
230:40 - the heart and soul of dom manipulation
230:43 - okay this is this is what it is now if
230:46 - you want to change the html you can do
230:48 - that as well so watch this i can
230:50 - actually go ahead and do
230:52 - title.inner html so i can actually
230:54 - change its html
230:57 - okay so
230:59 - it was an h2 right i could actually say
231:01 - put it in p tags
231:03 - and change it so let's say
231:05 - we'll make a message so we'll say co let
231:08 - message
231:10 - equal and here i'll put goodbye my lover
231:13 - that'll be the message and then we'll
231:15 - say it's whatever the message is right
231:18 - boom
231:19 - so
231:20 - let's comment out this last line right
231:22 - now and let's go ahead and run this and
231:25 - watch what happens
231:26 - okay so i should get pretty much the
231:28 - same exact thing all i've done is create
231:30 - a variable message putting it in here
231:32 - now watch what i can do
231:34 - i can put that same message within these
231:37 - p tags okay so first let's just start
231:40 - off by doing hello just so we can get a
231:42 - sense of how this is working
231:44 - and you can see that we've changed our
231:46 - inner html to this all right so notice
231:48 - the problem we're running into right
231:50 - when i do p tags it's still showing
231:52 - title tags it's because it's inner html
231:56 - okay so if i go back to this tag here
231:59 - this doesn't have any other inner
232:01 - elements
232:02 - if it had other inner elements it'd be
232:04 - able to change them
232:05 - so there's nothing for it to change here
232:08 - okay so here's what we want to do
232:09 - instead
232:10 - we want to actually wrap this entire h2
232:13 - in a div
232:14 - all right so let's go ahead and copy
232:16 - pick um cut that paste it here so now
232:19 - here's what it should look like
232:21 - you should have one div
232:23 - and that div should have a h2 inside of
232:26 - it that's it okay one last thing we need
232:28 - to do is we need to give the id not to
232:32 - the h2
232:33 - but instead we need to give the id to
232:35 - the div okay so the div should have the
232:37 - id not the h2 let's go ahead and try
232:40 - again so now i'm grabbing this one when
232:43 - i say get me
232:45 - um when i said get me title
232:48 - it's getting me this div right over here
232:50 - and then when i say change the inner
232:51 - html it changes this
232:53 - and to be even more clear what i can
232:55 - right click and rename all occurrences
232:57 - and we can call it title div
232:59 - okay so what i'm doing is i'm grabbing
233:01 - the title div and then changing its
233:04 - inner text and its inner html so let's
233:07 - go ahead and give that a try now
233:09 - and you can see that i get back hello
233:12 - now in order to make this hello instead
233:14 - of hello this message show up that we
233:16 - wrote remember let's use template
233:18 - literal so see if you could replace this
233:19 - hard-coded hello with this message right
233:22 - over here so take five seconds okay
233:24 - it'll be a good practice and using
233:26 - template literals remember to start with
233:28 - backticks
233:29 - and uh pause the video try to yourself
233:31 - five four three two one and let's go
233:36 - ahead and do this now so i'm gonna
233:39 - replace this with backticks
233:41 - back text right here okay and then
233:44 - this here is gonna become a javascript
233:47 - variable so we're gonna go like that and
233:50 - i'm just gonna put message in here okay
233:52 - let's run it now and you can see it says
233:55 - goodbye my lover and then there are
233:57 - other things i can do as well right so
233:58 - for example i can actually grab this div
234:01 - right here and change its style property
234:04 - and make it red or green or blue or
234:06 - whatever i want here's how we can do
234:08 - that let's go ahead and do that from raw
234:10 - html file and here for this div i'm just
234:14 - gonna pass in a style attribute i'm
234:16 - gonna say style and we're going to put a
234:18 - string here and i'm going to say color
234:20 - make the color blue so let's run this
234:23 - color is blue and put a semicolon here
234:25 - and run it don't put blue as a string
234:27 - because it's already a string
234:29 - and there we go goodbye my lover okay if
234:32 - i wanted this to be the background
234:34 - change the background color instead
234:37 - this is how i could do it
234:39 - there we go so we could do background
234:40 - color like this okay so let's go back
234:43 - to how we had this right here
234:45 - okay so now in order to do that i'm
234:47 - going to remove this entire thing let's
234:49 - do it from our javascript file instead
234:51 - so i'll go to my script.js and if you
234:54 - want to move around in a really
234:55 - comfortable way you could actually do
234:56 - command p and then do script.js and
234:59 - command p
235:00 - so this allows you to kind of move
235:02 - through without even having to use this
235:04 - um you know navigate through files like
235:07 - that
235:09 - so here i'm going to do title div dot
235:12 - style dot color okay and this actually
235:15 - will get me the
235:17 - uh color property
235:19 - of uh that div okay whatever color it is
235:22 - or whatever and what i can do is change
235:24 - it so watch this actually
235:26 - so i could say color and let's go red
235:29 - let's run this and i just made the color
235:31 - of this div red okay
235:34 - now another thing i could do is i could
235:36 - change the background color and how we
235:37 - could do that it says we could we can't
235:39 - put
235:40 - dashes inside of a variable name
235:42 - i could do background color like this
235:45 - and then we could hit run
235:47 - and now it changes the background color
235:48 - of it to red
235:50 - okay so there's a lot of stuff that we
235:51 - could actually do
235:54 - but i think the few key things that i
235:56 - want to show you more is actually like
235:58 - on click all right and how that works so
236:00 - that's going to be another really
236:02 - important one and you're definitely
236:03 - going to need to know that for
236:05 - tic tac to uh sorry rock paper scissors
236:07 - so let's make sure we have
236:09 - we have this figured out
236:11 - in order to do to to do this exercise
236:15 - i want to give you context so here's the
236:17 - context
236:18 - in our rock paper scissors when you go
236:21 - here
236:22 - okay
236:23 - and you run this
236:25 - app
236:26 - okay let's go ahead and open this up
236:29 - actually in its own browser
236:32 - let's go right here rock paper scissors
236:33 - right watch what happens
236:36 - when i click here it detects that i've
236:39 - actually clicked rock
236:40 - when i click here it detects that i've
236:42 - actually clicked a hand and when i click
236:45 - here it can actually detect that i've
236:47 - clicked
236:48 - scissors
236:49 - so we're going to
236:51 - do like a baby exercise that's gonna
236:53 - highlight this okay so we're gonna make
236:55 - a
236:56 - we're gonna make three squares
236:58 - and each square is gonna have a
237:00 - different color
237:02 - all right so we're gonna have a
237:04 - red square a green square okay a green
237:08 - square and a yellow
237:11 - square
237:12 - okay you could do it in whichever order
237:15 - and what we would want to do is when the
237:17 - user clicks
237:19 - when the user clicks on one of these
237:21 - squares
237:22 - we just want to console.log
237:24 - that property value so we want to read
237:26 - it we want to be able to we want we want
237:29 - it to say in the console log red
237:31 - right when we click yellow it should say
237:33 - yellow at the bottom right when we click
237:35 - green it should say green at the bottom
237:37 - it should be able to detect
237:39 - which square the user clicked on and be
237:42 - able to pull out that square's value so
237:45 - this is going to be an important
237:46 - exercise because once you can do this
237:48 - you'll be able to attach and do more
237:50 - functionality with the rock paper
237:52 - scissors button because remember when
237:53 - you click this a bunch of stuff happens
237:55 - but in order to make that stuff happen
237:57 - you first need to detect
237:59 - that a button was clicked and you have
238:01 - to detect which button was clicked was
238:03 - it the rock one was it the paper one or
238:05 - was it the scissors one so let's go
238:07 - ahead and do this
238:09 - uh red yellow green exercise
238:12 - so in order to do this we're gonna go
238:13 - back to our exercise page that we had
238:16 - open
238:17 - on this exercise we're gonna go to our
238:19 - index.html and we're gonna make three
238:21 - dips let's go div one
238:24 - we're gonna make a div
238:26 - two and we're gonna make div three
238:29 - and this is going to have an id of red
238:32 - this is going to have an id of
238:35 - green
238:36 - or sorry yellow yellow
238:39 - and this is going to have an id of
238:42 - green
238:42 - now we want to give this a width and a
238:44 - height
238:45 - okay so we want to give each of these
238:47 - with uh divs a width and a height so for
238:49 - width
238:50 - we'll say 100 for height we'll say 100
238:54 - and then we want to give it a color and
238:56 - so overall says style and we'll say
238:58 - color is
239:00 - red okay because this is a red one
239:03 - and put a semicolon here and let's run
239:06 - this and let's see if something happens
239:08 - okay
239:09 - so nothing has happened yet all right so
239:12 - now let's make this red square over here
239:14 - okay how are we going to do this so if i
239:16 - hit refresh obviously that shouldn't be
239:18 - there
239:19 - i just made it to show you that it works
239:20 - so let's go ahead and style this so what
239:22 - are we going to do so i'm going to
239:23 - create a style tag
239:25 - and then we're going to give it a height
239:27 - of 100 pixels
239:30 - put a semicolon here we're going to give
239:32 - it a width
239:34 - of 100 pixels semicolon there and we're
239:37 - going to give it a
239:39 - background color
239:41 - of
239:42 - red i don't need to put a string here
239:44 - because it's all a string
239:46 - let's run this
239:48 - and we have our red square so i'm just
239:50 - going to copy this
239:51 - paste it over this and paste it over
239:54 - this so now i should have three red
239:56 - squares when i run it
239:57 - okay perfect now of course we're just
239:59 - going to make it called yellow this one
240:01 - we're going to make it green
240:03 - okay and id and then we also need to
240:06 - make the color yellow
240:07 - and then we need to make the background
240:09 - color green here
240:10 - let's run
240:12 - and you can see i have these three
240:13 - squares
240:15 - now what we want to do is we want these
240:17 - to show up side by side instead of up
240:19 - and down like this so this is a little
240:21 - bit of styling stuff but we're going to
240:22 - be really gross and we're going to style
240:24 - everything in line styling
240:26 - don't ever style like this okay but just
240:29 - for now we're just going to style like
240:31 - this so let's put all of these three
240:32 - boxes inside of another big box okay so
240:36 - let's put them inside of a container so
240:37 - just wrap all three of those
240:40 - um let's see if i could show it to you
240:42 - in a clear way
240:43 - cool
240:44 - so
240:46 - here you have your red div here you have
240:48 - your yellow div here you have a green
240:49 - div right
240:50 - we're gonna put all three of those like
240:53 - boxes that you created inside of this
240:55 - big div right here
240:56 - and then we're gonna style this one and
240:58 - we're gonna say display
241:00 - flex
241:02 - run it
241:03 - and now it should show it to put it put
241:05 - it in a flexbox or show it to you like
241:06 - this okay now what i want you to do is
241:09 - when i click this red one it should say
241:11 - red when i click this yellow one it
241:13 - should say yellow and i click this green
241:15 - one it should say green so let's work on
241:17 - that now how are we going to do this
241:19 - so here's the cool thing so first let's
241:22 - go ahead
241:23 - let's go ahead and grab our divs so this
241:26 - we're going to need this red div we're
241:28 - going to need this yellow and this green
241:30 - so what i'm going to do here
241:32 - is see if you can do this
241:34 - document.getelementbyid
241:37 - and
241:38 - use this technique here to get the red
241:40 - div okay i'll give you five seconds here
241:43 - five
241:44 - four three two one okay let's do it
241:48 - together now so i'm going to say a red
241:49 - div or let's say cons red div
241:54 - actually let's say let because we might
241:56 - change this later
241:58 - red div is
242:00 - we're going to do
242:01 - document.getelementbyid so let's go
242:03 - document.getelement
242:05 - by id
242:06 - and we're going to pass in red here
242:09 - let's copy this and paste and paste
242:11 - and if you're new don't copy and paste
242:13 - just write it all down because it's
242:15 - going to build your pattern recognition
242:18 - all right
242:19 - so i'm going to grab yellow here paste
242:21 - it here green here paste it here so now
242:24 - we have we're grabbing the red div the
242:26 - yellow div and the green div
242:29 - okay and here's what we're gonna do
242:31 - there's something called dot on click
242:33 - okay so i'll show that to you right now
242:34 - so let's go
242:36 - red
242:38 - red div dot on click okay so this will
242:41 - detect any event that's happening when a
242:44 - user clicks
242:45 - and we're going to set this equal to and
242:47 - we're going to create an anonymous
242:48 - function here
242:50 - and we're just going to say console log
242:53 - and in this console log we're just going
242:55 - to say console.log you clicked red you
242:57 - clicked red because we already know the
242:59 - click read right because we've grabbed
243:01 - this entire red div
243:03 - we grabbed this entire red div here and
243:05 - we stored it in this variable right
243:07 - there
243:08 - okay so let's hit run
243:11 - and let's click red and it says you
243:13 - click red okay
243:15 - and now we can just we've been removed
243:17 - you clicked and so when i click it it
243:19 - should say red
243:20 - now watch what happens when i click
243:22 - yellow nothing happens right when i
243:24 - click green nothing happens so red knows
243:27 - its own bounds and it can detect when
243:29 - it's being clicked on thanks to this dot
243:31 - on click
243:32 - and then we just pass this anonymous
243:33 - function and then we can do stuff here
243:35 - right so
243:36 - if you wanted to be able to write
243:37 - multiple lines of code here you could do
243:39 - this
243:40 - you know console log red say
243:43 - hi whatever right so then you could run
243:45 - multiple lines of code like this and you
243:47 - could run them
243:49 - so that says read high every single time
243:50 - i click this
243:53 - the other way of writing this here
243:55 - that we're writing the short that we're
243:57 - writing here the other way of writing
243:59 - this would be to say
244:01 - give me a function here
244:03 - with no arguments and then that just
244:05 - console logs it says red
244:08 - okay so that would be another way of
244:09 - doing this so when i click red now it
244:11 - still says red okay this is kind of like
244:13 - the old school way of writing functions
244:15 - and you could still do that
244:17 - but arrow functions are
244:19 - just make things look cleaner
244:22 - there we go
244:23 - try see if you can try to do the same
244:25 - thing for yellow div so when i click
244:26 - yellow
244:28 - it detects that i'm clicking yellow and
244:30 - see if you can do the same thing for
244:31 - green so when i click green it detects
244:33 - that i'm clicking green i'll give you
244:34 - five seconds
244:35 - five
244:37 - four
244:38 - three
244:39 - two
244:40 - one
244:41 - all right let's try it together so you
244:43 - know try pausing the video if you want
244:44 - to try it yourself or let's go ahead and
244:45 - do it together now so i'm just gonna
244:48 - go copy here paste paste
244:51 - and then this red i'm gonna change it
244:53 - with yellow and then i'm gonna copy that
244:56 - yellow right there and paste it here and
244:59 - this red here i'm gonna change it with
245:01 - green
245:02 - and i'm going to copy that green and
245:04 - paste it here
245:06 - okay so let's try running this and watch
245:09 - what happens so let's go run this now
245:12 - when i click red it detects red
245:14 - beautiful when i click yellow it detects
245:16 - yellow and look at how sensitive is
245:18 - right
245:19 - even when i click right
245:21 - right here so close it detects it like
245:24 - look at that
245:25 - when i click when i move just a little
245:27 - bit over it detects red when i move just
245:29 - a little bit over it detects the yellow
245:31 - so it's really good and now let's try
245:33 - green that's what we want okay because
245:35 - what what you guys are gonna do is
245:37 - imagine instead of red this was a rock
245:40 - so what you're gonna say is
245:42 - well
245:44 - you know
245:46 - let's say
245:47 - uh
245:49 - you say
245:50 - user
245:51 - chose
245:53 - rock
245:55 - okay so that so when you click red let's
245:58 - run this first you click red it says
246:00 - user chose rock
246:02 - and then maybe
246:04 - what happens next is you calculate
246:07 - um
246:08 - you know random
246:10 - you get random computer choice
246:12 - so maybe random computer choice says the
246:15 - computer selected
246:16 - you know maybe paper okay and then what
246:19 - do you do you compare these two against
246:22 - each other so you compare user
246:24 - choice uh versus
246:27 - computer choice um and then you figure
246:30 - out a player choice versus computer
246:33 - choice and then you figure out like
246:34 - which one is better so then you put them
246:36 - against each other and you
246:38 - you find out like what the result is
246:40 - right
246:42 - maybe
246:43 - you know if you lost you should get
246:44 - negative one if it was a draw you get a
246:46 - zero or you get a one if you won
246:49 - and then you show all of those on the
246:52 - screen so you know it shows the results
246:54 - on the screen like it says you win but
246:57 - on the dom right on the dom so another
246:59 - order of saying screen is really just
247:01 - dom so then it shows it on the dom
247:03 - document object model where the users
247:05 - can see it so that's that's really like
247:08 - the bare bones of how you're gonna start
247:11 - being able to do rock paper scissors
247:13 - okay so you really need to understand
247:14 - document object model
247:16 - and how dom manipulation works is the
247:18 - most basic version of it but honestly
247:20 - this is really all you need and you'd be
247:22 - able to do that rock paper scissors
247:25 - uh no problem
247:26 - so hopefully you enjoyed learning about
247:28 - dom
247:29 - and with that said we're now going to go
247:31 - ahead and start covering more stuff
247:34 - let's actually do one additional
247:35 - exercise on this because as you've
247:37 - noticed
247:38 - you had you had multiple things
247:41 - and you wrote
247:42 - the same code but multiple times here
247:45 - you know pretty much the same code
247:46 - multiple times here so one way i want to
247:49 - show you is you actually could even like
247:52 - loop through all of these okay and then
247:55 - actually like
247:56 - kind of
247:57 - you know do the thing that you want to
247:59 - do with them all at once so i'll show
248:00 - you now
248:02 - so what i could do is um
248:05 - at this level
248:06 - let's go ahead and give a
248:09 - class to all of these so i'm going to
248:11 - basically say
248:13 - class is
248:15 - color button
248:16 - all right and let's end the quote and
248:19 - let's do that for all of the buttons i'm
248:21 - going to go here
248:23 - and we're going to give it a class
248:26 - oh sorry let's copy this let's paste it
248:29 - and let's go ahead and do it here as
248:32 - well okay so now what you should have is
248:35 - three like squares or whatever right
248:38 - and uh the class is just color
248:41 - you could call it color square
248:43 - that probably is a better class name so
248:44 - color square color square color square
248:47 - okay now if we want to get
248:49 - all of these elements all at once what i
248:53 - can actually do is i can say console.
248:56 - actually let's do it like this i say con
248:58 - squares and i can say get
249:02 - sorry document
249:03 - dot
249:05 - get
249:06 - query selector
249:09 - all
249:10 - and then i can pass in the class that
249:11 - i'm actually looking for so in this case
249:14 - i'm looking for the class
249:16 - color
249:17 - square
249:18 - let's also
249:20 - console log this and let's run it all
249:22 - right and i get back a node list so
249:24 - that's exactly what i was looking for
249:26 - okay now let's see if i can loop through
249:29 - these
249:31 - before we loop actually what we need to
249:33 - do is let's run this
249:35 - and node lists right now is empty so
249:37 - that's not what we want we want to put a
249:38 - period here period color square
249:40 - basically says hey i want to look for
249:42 - the class them color square okay so this
249:44 - is classes
249:46 - and i'm going to select all the classes
249:47 - i'm going to return them to you as like
249:49 - an array or a node list
249:51 - perfect so now i have all these elements
249:53 - right over here all right so let's just
249:55 - make sure we're getting all of our color
249:57 - squares and console log this one is
249:59 - console log
250:01 - squares let's run this
250:03 - and boom you can see we're getting
250:06 - all of our squares right here because
250:08 - we're getting three html developments
250:10 - perfect
250:12 - now here's what one thing we want to do
250:14 - okay
250:15 - in order to do this go ahead and change
250:16 - all these two buttons because in rock
250:18 - paper scissors you're not gonna these
250:20 - aren't gonna be divs these are gonna be
250:21 - butt tens
250:22 - okay because if i go to here these are
250:25 - buttons okay these are buttons buttons
250:27 - buttons
250:28 - cool
250:30 - so let's go back here and we're going to
250:32 - change these divs to buttons so button
250:36 - end it with the button this is going to
250:38 - be
250:39 - a button as well
250:41 - button here and button there
250:43 - cool so now that this one div here
250:47 - has three buttons
250:50 - perfect
250:51 - so let's hit run and let's make sure
250:52 - everything is working as expected red
250:54 - red red yellow yellow green green green
250:56 - perfect
250:58 - now what we're going to do is we're
251:00 - going to give each of these buttons a
251:01 - value okay so we're going to give this
251:03 - button a
251:05 - value of red
251:06 - we're going to give this button a value
251:08 - of yellow we're going to give this
251:11 - button a value
251:13 - of green
251:14 - and let's go here and we're going to now
251:16 - say now that we're getting back our
251:18 - squares let's go console.log square
251:23 - let's grab the zero square and let's do
251:26 - value
251:27 - okay now when i run this code you're
251:29 - going to notice
251:31 - oops square is not defined ah squares of
251:35 - zero dot value let's do that
251:38 - okay and let's uh let's comment this out
251:40 - so we don't have to worry about this
251:41 - anymore comment this out
251:43 - and you can see we're extracting the
251:45 - value here and we're getting back red
251:48 - okay so that's a really good sign
251:50 - now if i do this again
251:54 - i'm going to get back
251:56 - yellow but if i do this again i'm going
251:58 - to get back a 2.
252:00 - so instead of repeating this code again
252:01 - and again here's a great point to write
252:04 - uh
252:05 - what do we write when we have to repeat
252:06 - a ton of code over and over and over and
252:08 - over and over and over again
252:10 - we use a loop and specifically let's use
252:13 - a for loop and let's use it for each
252:16 - loop okay so we're going to say
252:19 - and for each is one of the best loops so
252:20 - if i haven't shown you that
252:22 - up until now i'm going to show it to you
252:24 - now okay so four each is my favorite
252:26 - that one is even better than a um
252:30 - four of loop okay so let's go ahead and
252:32 - use a for each loop so i'm going to say
252:34 - grab squares and then for each square
252:38 - okay let's just console log so grab each
252:41 - for each square
252:43 - i'm going to console.log square.value
252:47 - let's run this
252:49 - and now you can see and we're going to
252:51 - comment this out and let's run
252:54 - and you can see i get red yellow green
252:57 - okay
252:58 - now what i can do is i can loop through
253:00 - this
253:01 - and basically make this function right
253:04 - over here multiple times okay so i can
253:07 - actually say
253:08 - hey
253:10 - for each square what i want you to do is
253:12 - actually update its on click property
253:15 - and set it to this function so now we
253:18 - can actually just go ahead and do that
253:19 - so i can say square dot unclick
253:21 - and we're going to set that to
253:23 - console.log
253:25 - that square's
253:27 - name okay and we're gonna take all three
253:30 - of these lines and actually comment them
253:32 - out because we don't need them anymore
253:33 - so let's go ahead and run
253:36 - and check it out
253:37 - red red red yellow yellow yellow green
253:39 - green green whoops we're getting some
253:40 - weird error let's run it again
253:43 - oh because that name is not a thing i'm
253:45 - sorry let's do dot value let's run it
253:47 - again
253:48 - and value is being pulled from this html
253:51 - attribute that we created right here
253:52 - value that's where it's coming from so
253:54 - let's go back let's hit run
253:56 - click red yellow green yellow green red
254:00 - right so look at how nice this became
254:03 - now we don't even need
254:05 - this big chunk of code anymore
254:08 - right we just
254:10 - have this here
254:12 - okay so let's i'll leave the comments
254:14 - there for you let's run
254:16 - click click click click click click
254:18 - click click click right so this is super
254:20 - nice and uh this pattern you're
254:23 - definitely gonna need it for when we're
254:25 - making our rock paper scissors game so
254:28 - keep this pattern in mind this is an
254:30 - example you're gonna be definitely using
254:33 - all right let's um
254:35 - dude times clicked okay so let's take
254:38 - our app um
254:40 - up by one level so this dom
254:42 - red yellow green squares app that we
254:44 - made okay so i'm going to click on this
254:46 - here
254:47 - all right
254:48 - and um and we're going to take it up up
254:51 - a notch so we want it to be where when i
254:53 - click it it actually says the number of
254:56 - the times clicked here zero if i click
254:58 - red one it should give me one if i click
255:01 - yellow four times it should give me four
255:03 - here and if i click green three it gives
255:04 - me three so how are we gonna do that
255:06 - we're gonna start combining a lot of the
255:08 - things that we were learning okay so see
255:10 - if you could attempt it
255:12 - but let's do this together so you can
255:14 - just get some more practice here so i'm
255:17 - going to create a object called times
255:19 - clicked it's going to keep in store how
255:21 - many times any of these colors is
255:22 - clicked so we're going to have red
255:25 - is clicked
255:26 - uh red just click zero times
255:29 - we'll have
255:30 - yellow
255:32 - zero times because start off everything
255:34 - is zero right green
255:36 - is going to be
255:38 - zero
255:40 - we just have it like this for now
255:42 - and then what i'm going to do is just on
255:44 - click here
255:45 - i'm going to turn this into a full on
255:47 - full function yeah like a function but
255:49 - not just that returns right away
255:52 - so we can write stuff here
255:54 - i'll comment out the square value part
255:56 - for now
255:58 - and what i'm going to basically say here
255:59 - is um
256:01 - hey basically what i want you to do is
256:05 - grab the times clicked object
256:07 - and put this in as the key so
256:11 - uh and and basically grab its key okay
256:13 - and we're going to say dot value
256:16 - so dot value will be whichever one i
256:18 - click remember so the dot if i click
256:20 - this the value is going to be red
256:22 - and what i'm going to say is increment
256:24 - that by 1. so if i click here
256:27 - the value is going to be red
256:30 - and then my object is going to go find
256:33 - the key where it says red it's going to
256:35 - find this
256:37 - and then i'm going to say plus equals 1
256:40 - its value so it's gonna increment this
256:42 - by one
256:43 - and uh we also want this to show up
256:46 - like
256:47 - here we want it to show up right
256:50 - so now what i'm going to say is i'm
256:51 - going to say
256:54 - that square inner text
256:56 - we're going to change it to
256:58 - [Music]
257:01 - times clicked
257:03 - squared up value
257:06 - all right so let's go ahead and run this
257:08 - and i'll click this click red
257:11 - boom
257:12 - boom
257:14 - boom
257:15 - perfect
257:16 - okay and if you want the most updated
257:18 - version of this app i'm i'm imagining
257:21 - you're coding it up in your own rupple
257:23 - and that's great if you're coding it up
257:24 - here in your own replit but if you want
257:26 - to merge if you want to see the finished
257:28 - version you know it's going to be in
257:30 - here in this dom folder red yellow green
257:32 - exercise
257:34 - and then you just can come here this has
257:36 - a solution there so you can just
257:38 - navigate here pick the solution and then
257:40 - see it okay this is the most updated one
257:42 - this is the one i'm doing right now
257:44 - and that's how it shows up and i click
257:46 - here boom it shows up right so look at
257:48 - that right how nice is that if i click
257:50 - yellow 10 times it shows it to me click
257:52 - read 10 times
257:54 - whatever i'm doing it's it's keeping
257:56 - track of everything so this is where it
257:58 - it's
257:59 - nice to work with objects and things of
258:02 - that nature this is why we practice all
258:04 - these things so now there's a lot that's
258:06 - going on here
258:08 - there's a loop going on there's an event
258:10 - listener called on click happening
258:13 - we're going into this times clicked
258:16 - object and updating its key values and
258:19 - then we are manipulating the dom and
258:21 - showing that result
258:22 - on here right so there's a lot going on
258:24 - here and with just these few lines of
258:26 - code
258:27 - and so
258:29 - you know it's a lot but that's why we
258:31 - built it all up step by step so
258:34 - hopefully you enjoyed this exercise
258:36 - for you know furthering your dom
258:38 - manipulation skills
258:40 - now one thing one more thing i want to
258:42 - show you here is how to clear this so
258:44 - basically to start a new game because
258:45 - for rock paper scissors you're gonna
258:47 - need to know how to do that right so for
258:49 - example we play a game we keep track of
258:51 - the score right so that's why you need
258:53 - to learn how to keep track of a score
258:55 - and then when we hit this red
258:57 - it ends the game
258:59 - right so it clears the game and then you
259:01 - start from scratch all over again so if
259:03 - we go here we want to be able to add
259:05 - that functionality so let's go ahead and
259:08 - try to create this together okay so i'm
259:09 - going to say const
259:11 - clear
259:12 - scores
259:13 - okay or you could call it function as
259:15 - well whatever is easier for you honestly
259:18 - it doesn't really matter
259:19 - and what clear scores is going to do
259:22 - is it's going to take
259:24 - you know all of these squares here
259:28 - and it's basically just gonna clear up
259:31 - their inner text
259:33 - okay so i'm gonna say squares
259:36 - dot for each square
259:39 - i'm going to grab square.value
259:43 - and we're just going to set that to
259:45 - empty so we're just going to set it to
259:46 - nothing so we're going to loop through
259:48 - take each square set its value to empty
259:51 - and then that's kind of it okay so this
259:53 - is going to be my function that clears
259:54 - everything so this looks good to me now
259:57 - we just need to make a button that can
259:58 - detect that that button is being clicked
260:01 - okay so
260:02 - we will go
260:04 - here
260:06 - in our index.html file alright and we
260:09 - want to add in a button
260:11 - that says clear game
260:14 - or something like that so it's obvious
260:15 - so if i go back
260:17 - i see clear game button is right there
260:19 - so perfect
260:20 - oh sorry actually we're going to give
260:22 - this button we need to give it a id or
260:24 - something right so we can grab it so
260:26 - let's call this clear clear dash game
260:29 - that's fine let's go back into our that
260:32 - script
260:33 - and then i'm going to basically say
260:35 - once clear game
260:37 - div
260:38 - is
260:39 - do document dot get elements by id and
260:43 - the id in this case is clear game so i
260:46 - have my clear game div
260:48 - and um what i'm going to say is clear
260:50 - game div dot on click and i'm going to
260:53 - set its on click to this function right
260:55 - over here so i'm just going to clear
260:57 - scores just basically when i click on
261:00 - click
261:01 - run this function right over here
261:04 - okay so i'll put this function right
261:05 - over here
261:06 - and let's try it so basically right when
261:09 - i click
261:10 - when i click this
261:12 - button
261:13 - okay or maybe let's call the clear game
261:15 - button
261:16 - clear game button
261:18 - let's do btn so our code looks
261:21 - nice and clean on the same line
261:23 - and now when i click clear game button
261:25 - it should clear all the scores so let's
261:26 - give that a try oh it's not doing that
261:28 - so let's see if we can debug it and see
261:31 - what's happening okay i'm trying to
261:34 - change its value but instead of value
261:37 - what i'm meaning to change is the inner
261:38 - text so let's go enter text
261:42 - and we're going to set this text to
261:45 - zero and let's try now
261:49 - let's run this
261:51 - let's go back in the game
261:54 - there we go
261:55 - right there we go now
261:59 - it's doing it correctly
262:01 - clear game it starts from scratch
262:04 - what happens if we set the text to empty
262:07 - text so let's see what happens does this
262:09 - give us an error no
262:11 - so this this might actually be even
262:12 - better just set it to an empty string
262:15 - or a zero
262:17 - and you're good to go here
262:19 - so now this app is
262:21 - really coming out nice right this app is
262:23 - doing a really
262:25 - really good job and
262:27 - i mean yeah this is a great app looks
262:29 - really really nice so there you go like
262:31 - this here
262:33 - should give you a very clear idea of dom
262:36 - manipulation how to make things work
262:38 - like if you have this example to work
262:40 - off of i mean you're pretty set to go
262:43 - with dom manipulation so great job if
262:45 - you got this far nice work all right
262:47 - you're making amazing progress so far
262:49 - but here's what we're going to do now
262:50 - we're going to step it up we're going to
262:52 - go and start building a tip calculator
262:56 - app so check it out i'm going to go over
262:57 - here and we're going to do the following
263:00 - i'm going to open this up so hit that
263:02 - button right behind my face the top
263:04 - right and it's going to open up this
263:07 - this right here and we're going to go
263:09 - over to tip calculator and hit click on
263:12 - it okay
263:13 - and here if you type in let's say
263:16 - the bill total is a hundred dollars the
263:18 - tip amount is ten percent and you can
263:21 - see it already calculated it correctly
263:23 - right because if the bill is a hundred
263:25 - dollars and the tip is ten percent well
263:27 - that's the tip would be ten dollars so
263:29 - the total would be a hundred and ten
263:31 - dollars per person but what if we had
263:34 - more people what if we had two people so
263:36 - watch what happens when i hit plus
263:38 - boom the bill just got divided between
263:40 - two people and so it automatically tells
263:42 - hey john you need to pay 55 kazi you
263:45 - need to pay 55 so both people know
263:47 - exactly how much they need to pay what
263:49 - if i keep increasing this number well
263:52 - you see it keeps dividing
263:54 - between all of those people so if the
263:56 - bill was 110 dollars and you divide that
263:58 - by 10 people you get 11 dollars per
264:00 - person
264:01 - now watch what happens if i keep
264:03 - subtracting it's subtracting and
264:04 - subtracting and subtracting it if i go
264:06 - here and now subtract it watch it's not
264:09 - gonna let me go down to zero right i'll
264:10 - try a couple i'll try a couple more
264:12 - times boom boom boom boom boom boom boom
264:14 - boom nope does not let me go below one
264:17 - so these are some of the functionalities
264:20 - of this app that you'll have to keep in
264:22 - mind so for example what will you need
264:24 - to know how to do
264:25 - well you'll actually need to be able to
264:27 - get the user input
264:30 - from this field right here
264:32 - okay and this field let's say it's
264:34 - called our this one over here let's just
264:36 - say it's called bill total input okay
264:41 - then you're going to have to get
264:44 - data from this tip as well
264:48 - and let's say this one is called tip
264:51 - input okay
264:54 - also you're going to be able to you're
264:56 - going to need to be able to pull the
264:57 - number of people at any given time
265:01 - this one will probably be called let's
265:03 - say number of people okay so maybe these
265:06 - are all divs
265:07 - or inputs that you can have you know
265:09 - these are ids that you might be able to
265:11 - have access to okay and then this over
265:14 - here
265:14 - this right over here
265:17 - right this will be called per
265:20 - person
265:21 - total okay and all of these will be div
265:24 - ids okay which means these are special
265:27 - things inside of the html and you can
265:29 - get access to all of this so then if you
265:31 - want to get access to
265:33 - this hundred and ten dollars you'll be
265:35 - able to do something like per person
265:38 - total
265:39 - uh you know
265:41 - div dot
265:42 - inner text
265:44 - or whatever right and that'll get you
265:45 - access to what you're looking for
265:48 - and that's just to show you how the
265:50 - javascript portion will interface with
265:52 - this app okay and then based on that
265:55 - you're going to need to do things right
265:57 - so for example you're going to need to
265:59 - do some calculations that
266:01 - you know maybe take the
266:04 - bill
266:06 - plus the tip
266:07 - and then it divides that by the number
266:09 - of people and then when you do that you
266:11 - get this
266:12 - so there's going to be a bunch of things
266:14 - that you're going to need to understand
266:15 - but take a screenshot of this actually
266:18 - right now on your computer or with your
266:20 - phone
266:21 - because this will help you
266:23 - constantly refer to certain key elements
266:26 - on how this app is going to work
266:29 - so i'm going to now explain and kind of
266:31 - walk through this app and we're also
266:33 - going to have you set it up on a new
266:35 - repel so let's go ahead and do that now
266:38 - so
266:39 - this is going to be your tip calculator
266:41 - exercise so how you're going to get
266:43 - access to it so i'm going to zoom in
266:45 - here so you can see everything
266:48 - a lot more clearly
266:50 - okay
266:51 - and then we're going to kind of walk
266:53 - through every single thing so on the
266:54 - left hand side right you see projects
266:57 - make click into projects all right now
266:59 - when you click into projects you're
267:01 - going to see
267:03 - tip calculator so go ahead and click on
267:06 - tip calculator and now you're going to
267:08 - see exercise now don't go into the
267:10 - solution because once again if i show
267:12 - you how this works over here right let's
267:15 - run this
267:16 - and over here you'll see that we have
267:18 - project exercises project solutions so
267:21 - here's the tip calculator solution this
267:23 - will be the fully working app so you'll
267:26 - be able to type in 100 here and 10 and
267:29 - it'll calculate everything correctly
267:31 - you'll be able to hit plus minus minus
267:32 - minus
267:34 - so this right now is the working version
267:37 - okay so if you need to see the solution
267:39 - anytime don't go to it right now
267:41 - do not do it but this is where the
267:43 - solution will be and the main file that
267:46 - you need to write code for is the
267:48 - script.js file the javascript file
267:51 - the index.html and the style files are
267:54 - already completed for you so you don't
267:55 - need to touch them if you make the
267:57 - javascript work this entire app will
267:59 - work okay so that's where your solution
268:02 - is going to be but if you go to tip
268:05 - calculator from project exercises and
268:07 - you do
268:08 - 110
268:10 - and
268:10 - see nothing happens you can't change the
268:12 - number of people it doesn't update your
268:14 - score
268:15 - there's no calculations being done here
268:16 - so the javascript here is not working
268:19 - okay so this is where your javascript is
268:22 - not working
268:24 - so
268:25 - uh this is your exercise file okay now
268:29 - what i recommend highly highly highly
268:31 - highly recommend you don't just start
268:34 - coding in this script.js what i
268:36 - recommend is you create a new rupple
268:38 - with these three files
268:40 - right and then get started okay so let's
268:44 - go ahead and do that now so i'm going to
268:46 - create a new tab here
268:48 - and we're going to go to replic.com all
268:50 - right now we're going to choose html css
268:53 - and javascript rupple and here i'm
268:56 - basically going to say
268:58 - let's go and say tip calculator exercise
269:03 - and i will hit create rupple
269:06 - okay now that this rupple is created
269:09 - what i recommend you do is go back
269:12 - go to your index
269:14 - copy all of this so command a command c
269:16 - or control a control c okay cop select
269:20 - all right in here
269:22 - copy it
269:23 - go here and
269:25 - delete everything in this index.html and
269:27 - paste
269:28 - what you just copied okay so once you
269:31 - paste it you should see an ugly looking
269:33 - bill
269:34 - app okay
269:36 - now the next thing we're gonna do is
269:37 - we're gonna grab the style file so let's
269:39 - go ahead and grab the style file copy it
269:43 - come back go to your style.css delete
269:46 - everything that's in here hit paste
269:49 - hit run
269:51 - and now the styling is complete so now
269:54 - our app is looking good okay so this is
269:56 - what style files stylesheet is for now
270:00 - the last thing we're actually going to
270:02 - do here
270:03 - is
270:04 - you see if you go to your script
270:06 - there it's empty so we're going to go
270:08 - ahead to our exercise
270:10 - copy the whole thing okay command a
270:12 - command c come over here paste it so now
270:16 - when you look here
270:18 - there isn't any real javascript code
270:20 - written up okay and what i'm going to do
270:22 - is i'm just going to collapse all of
270:24 - these functions
270:26 - and now what we're going to do is we're
270:28 - actually just going to walk through
270:30 - walk through like all of the um all of
270:33 - the things that you need to know in the
270:35 - gotchas right
270:36 - and then you'll be able to just get
270:39 - started and code it up yourself okay but
270:41 - just let's walk through it together all
270:43 - right so you're gonna be building the
270:45 - tip calculator app now there are a
270:47 - couple of things that you're gonna need
270:48 - to know
270:50 - all right otherwise this pro this
270:52 - project is gonna become way harder for
270:54 - you and i don't want that to happen okay
270:55 - so i want it to be something that you're
270:57 - able to kind of grasp
270:59 - so there are a couple of functions
271:00 - you're going to need to know their names
271:02 - all right and you have access to them so
271:04 - you have access to calculate bill
271:07 - increase people decrease people these
271:08 - are the functions you're going to create
271:10 - these are the only three functions
271:12 - you'll need and make sure to give them
271:13 - this exact name they're already made for
271:16 - you you cannot change their names if you
271:18 - change their name your app will break
271:19 - i'll explain why
271:21 - these functions are hard coded inside of
271:24 - our index.html okay so for example
271:28 - when you are typing over here
271:30 - typing over here every time you type on
271:33 - key up
271:34 - we're calling the calculate build
271:36 - function
271:37 - so that function is running literally
271:40 - every single time you type here
271:42 - that's why that function is there you
271:44 - don't need to change that name the other
271:46 - function i told you about for example
271:49 - increase people and decrease people
271:51 - function those are also written here
271:53 - so for example you can see here increase
271:56 - uh there's a plus sign
271:58 - right there
272:00 - right and then there is a minus sign
272:02 - right there
272:03 - and then there is a number right over
272:06 - here
272:07 - every single time you click this plus
272:10 - button right over here
272:12 - every time you click this plus button
272:14 - this function increase people will run
272:17 - every time you click this minus button
272:19 - over here
272:20 - this function decrease people will run
272:23 - that's what's happening so that's why
272:25 - these functions have special names do
272:26 - not change them
272:28 - unless you change them here and then
272:30 - you're fine okay but i just don't want
272:32 - you to
272:33 - fall prey
272:34 - the next thing
272:36 - every time you
272:37 - clickety clack and type anything in here
272:40 - or here anything anything you type in
272:42 - here here
272:43 - you're gonna run this calculate bill
272:45 - function
272:46 - okay for your tip
272:49 - um and your build total okay so
272:51 - calculate bill
272:53 - and then you also have calculate bill
272:55 - twice you can see that
272:57 - so this calculate bill is for this one
273:00 - and this calculate bill here is for this
273:02 - one okay so every time you type in any
273:04 - of those fields calculate bill
273:06 - automatically fires and runs
273:08 - going um and then the other things
273:10 - you'll need to know are a couple of
273:12 - things like
273:13 - you know
273:14 - you have this bill input and you have a
273:17 - tip input right so
273:20 - you have ids like build total input
273:23 - and you have other ids
273:25 - like tip input so let's look for temp
273:27 - input you have tip input okay now
273:30 - because i'm nice
273:32 - all right not everybody's gonna be this
273:33 - nice but what i've done for you is i
273:35 - have put it all into the javascript file
273:38 - everything you need to know so you don't
273:39 - have to go to your
273:41 - index.html file pretty much at all okay
273:43 - you don't have to like go and look at
273:45 - anything
273:46 - because what i've done here for you is
273:48 - i've already just told you hey here are
273:50 - the three functions you need to know
273:52 - calculate bill increase people decrease
273:54 - people
273:56 - i'm already letting you know these
273:57 - functions are hard coded in the html so
273:59 - you cannot change their names
274:01 - and then i'm already letting you know
274:02 - these are all the div ids you're going
274:04 - to need access to so you're going to
274:05 - need access to build total input
274:08 - this is going to be
274:09 - this div or this input field
274:13 - so that's going to be that input field
274:15 - you're going to need tip input
274:17 - okay this is going to be the user input
274:18 - for tip
274:19 - you're going to need access to
274:23 - you're going to need access to so let's
274:26 - just draw these again that's right there
274:28 - tip input is right there you're gonna
274:31 - need access to number of people which is
274:33 - right there
274:34 - this is a div okay so this is a div id
274:37 - so once you get the div you're gonna
274:38 - need to do dot inner text to get
274:41 - to get these okay and then you're going
274:43 - to need access to so you're going to
274:45 - either for this i think you might need
274:47 - to do dot value
274:49 - one of those dot value or dot inner text
274:51 - okay try both of them and it should work
274:53 - one of them should work and then you
274:55 - have per person total which is right
274:57 - there
274:58 - so those are the div ids you're going to
275:00 - need access to i'm already telling you
275:02 - their exact names so you don't have to
275:04 - look in your html file
275:07 - right over here on line 20 i'm telling
275:09 - you hey get global access to all of
275:12 - these inputs
275:13 - okay meaning just get access to all of
275:15 - these inputs right here before you start
275:17 - creating your functions because your
275:19 - functions are going to need access to
275:20 - them
275:21 - so
275:22 - you know if i were you i'd do something
275:24 - like const
275:26 - let's say bill total input div or
275:28 - something right and then or build total
275:31 - input
275:32 - and you can do something like document
275:34 - dot
275:35 - get element by id and then pass in bill
275:38 - total input
275:40 - okay this is just an example of how you
275:42 - would get this specific one right over
275:44 - here
275:46 - all right so what i'd recommend is you
275:48 - grab not just this one but all of them
275:50 - so you have all four of these divs and
275:53 - have access to them that's what i would
275:55 - recommend you do here
275:56 - going underneath here
275:58 - i would i recommend that on line 24 line
276:01 - 25 get number of people from number of
276:03 - people div
276:04 - so once you get access
276:06 - to these four divs bill input tip input
276:08 - number of people div and per person
276:10 - total div
276:12 - you can use the number of people div and
276:13 - from there you can actually get access
276:16 - to the number of people by pulling the
276:18 - dot text okay
276:19 - and remember to type cast so anytime you
276:22 - get a thing so let's say
276:24 - thing
276:25 - input and then you either do dot value
276:28 - or dot inner text
276:29 - but both of them are going to return to
276:31 - you a string that's going to look like
276:33 - this
276:34 - and then you call the number function on
276:36 - it and then that will turn it into an
276:37 - actual 10 okay and then you'll be able
276:40 - to do math on that because remember if
276:42 - you take 10
276:44 - string and you add another 10 string to
276:46 - this
276:47 - this is actually going to give you not
276:49 - 20
276:50 - but
276:51 - 10 10 10
276:53 - 10 10 okay which is going to be silly
276:55 - so
276:56 - you want to do you want to do it the
276:58 - right way okay so make sure you type
276:59 - cast it use that number function
277:02 - okay
277:02 - so this is where you're gonna set up all
277:04 - your globals and then you're gonna be
277:06 - good to go now let's go into each of
277:08 - these functions at a high level
277:10 - so you're gonna create three functions
277:12 - here
277:14 - all right
277:15 - and you're gonna define these three
277:17 - functions so calculate bill
277:20 - calculate bill will pretty much run
277:23 - all the time like you should calculate
277:26 - bill
277:27 - when a user types it here automatically
277:30 - you should calculate bill when the user
277:32 - updates the tip you should calculate
277:34 - bill when the user hits this plus sign
277:36 - you should calculate the bill when the
277:38 - user hits this minus sign
277:39 - and ultimately what calculate bill is
277:42 - doing is it's updating this number over
277:44 - here the total per person owed
277:46 - okay that's the ultimate job of
277:49 - calculate bill okay you can see it says
277:51 - calculate the total bill per person
277:54 - that's what it does and then if you go
277:55 - here there are ample ample ample amounts
277:59 - of tips for you on how to actually do
278:01 - this okay so i have tons of
278:03 - notes for you
278:04 - as you go and code this along so i hope
278:06 - you don't have too much problems there
278:09 - okay i'll guide you through everything
278:11 - hey
278:12 - get the user input and convert it into a
278:14 - number so i'm reminding you to type cast
278:16 - here
278:17 - hey get the tip from user and convert it
278:19 - into a percentage hey get the total tip
278:21 - amount calculate the total amount and
278:24 - then update it on the dom and show it to
278:26 - the user right so updated on the dom
278:28 - means update this right here
278:31 - so calculate bill hopefully
278:33 - that kind of makes sense at high level
278:36 - increase people what this will do is
278:37 - splits the bill between more people
278:40 - all right
278:41 - so what should happen here well it walks
278:43 - you through it should increment the
278:45 - amount of people
278:48 - amount of i'll just say amount of people
278:51 - then you update the dom with the new
278:53 - number of people
278:54 - all right so what does that mean
278:56 - so you increment the amount of people
278:59 - and then once you increment it you make
279:01 - sure that you write that to the dom like
279:04 - you change this one to a two for example
279:07 - and this function runs increase people
279:09 - increase people function runs every time
279:12 - you hit this plus button so when you hit
279:14 - this plus button
279:15 - that function runs when you hit the
279:16 - minus button
279:18 - decrease people function runs okay
279:20 - hopefully those are kind of
279:22 - self-explanatory
279:23 - uh but
279:25 - hopefully that makes sense
279:26 - and then at the end you want to
279:28 - calculate the bill based on the number
279:30 - of people so
279:32 - i'm already giving you a hint you're
279:34 - going to be reusing some of the
279:35 - functions you've created previously okay
279:38 - perfect so i'm going to close this
279:40 - go here decrease people it splits the
279:43 - build between fewer
279:45 - people okay so there i'm gonna go over
279:48 - the similarities between increase and
279:50 - decrease people right if you look at
279:52 - this
279:53 - increment update the dom calculate the
279:55 - bill
279:56 - decrease people decrement
279:59 - amount of people
280:01 - update the dom with the new number of
280:02 - people
280:03 - and then calculate the bill based on the
280:05 - new number of people so they're pretty
280:07 - similar and how they work so once you
280:09 - figure out one of them the next one will
280:11 - be really easy
280:13 - the only difference between decreased
280:15 - people is you
280:17 - when you hit plus you can go as high as
280:19 - you want but when you hit minus you
280:20 - shouldn't be able to go below one
280:22 - because it wouldn't make sense right you
280:24 - have the bill but then how come it has
280:26 - zero people that owe it that doesn't
280:28 - make sense so it shouldn't have zero or
280:30 - you can't have negative people right so
280:32 - you can't decrease the number of people
280:34 - to zero or negative
280:36 - so here i recommend you write a guard
280:38 - clause i haven't shown you what a guard
280:39 - clause is but basically it's just an if
280:42 - here
280:43 - it's a fancy name for just an if
280:44 - statement and if statement is just
280:46 - something along the lines of this okay
280:48 - if something
280:50 - something is not true i'm just going to
280:53 - write it in english
280:54 - just return
280:55 - and what that basically means is this
280:57 - will end the function so if you say
280:59 - return
281:00 - it just won't activate any lines that
281:02 - are below it so let's say you were gonna
281:04 - decrement the number decrement the
281:05 - number of people here
281:07 - but here you check for the condition is
281:09 - people equal to one one or less you go
281:12 - hey is people
281:13 - less than or equal to one
281:16 - if people is less than or equal to one
281:18 - then don't run any of these lines of
281:20 - code
281:22 - right like just
281:23 - stop the return here is just like hey
281:25 - stop the function end it right here
281:28 - okay and and you're not even giving it
281:30 - anything to return just return stop
281:32 - right here so that's an example of how
281:34 - that would work okay so i'm gonna get
281:36 - rid of all of that now
281:38 - so that would be your decreased people
281:40 - function
281:42 - okay
281:43 - so i hope that this exercise kind of
281:45 - gives you everything you need to know
281:48 - and now you should be able to get
281:49 - started working on this project i wish
281:51 - you the best of luck and
281:54 - give it your best shot try as hard as
281:57 - you possibly can i really believe you're
281:59 - gonna make a lot of progress and i think
282:01 - that if you really push yourself you
282:03 - should be able to do this if you don't
282:05 - get this done
282:06 - don't get discouraged it's okay i'm
282:08 - right here right we'll code this
282:10 - together i'll show you the solution
282:13 - next
282:14 - um and yeah we'll just walk through this
282:16 - together okay so pause the video now
282:19 - give this a shot and try to nail this
282:21 - and get this done and then what i
282:23 - recommend is you come back and walk
282:25 - through the solution because our
282:27 - solutions might be different and you
282:28 - might be able to pick up you know a lot
282:30 - of things from how
282:32 - maybe i solved the problem versus maybe
282:34 - how you solve the problem okay and
282:36 - remember in coding there always can be
282:37 - multiple different ways and one way
282:39 - isn't necessarily wrong okay it's kind
282:42 - of an art form so we're gonna have
282:44 - different ways where we get to something
282:45 - so that's it um i hope you enjoyed this
282:48 - and uh get to working and i'll see you
282:50 - soon all right so i hope that you gave
282:53 - it a try and if you got it good job for
282:56 - solving the tip calculator if you didn't
282:58 - it's okay we're gonna do it now let's do
283:01 - it together so let's build a tip
283:03 - calculator so here we're going to walk
283:06 - through right and let's pay attention to
283:07 - the instructions the first thing is
283:09 - we're going to get access to all of our
283:12 - inputs and divs okay so our bill input
283:14 - tip input number of people div and per
283:16 - person total diff so let's get access to
283:18 - all of these now
283:19 - so i'm basically going to say cons bill
283:21 - input and we're going to say
283:23 - document.getelementbyid
283:26 - and we're going to say bill input total
283:29 - build total input and then we're going
283:31 - to get access to our tip input so we're
283:33 - going to say
283:34 - document.getelements by id
283:37 - and i'm going to paste in tip input
283:38 - because these are the specific ids i
283:40 - need then let's get access to our number
283:43 - of people div
283:45 - and we're gonna do get element by id
283:49 - and then we're gonna paste that in right
283:51 - there number of people
283:53 - and we're gonna do
283:54 - get access to our per person total okay
283:58 - and this will be per person total so
284:01 - we're going to get access to all of this
284:03 - and what global access means is because
284:05 - we're defining it all the way up here
284:07 - all of our functions will have access to
284:11 - all of these divs
284:13 - all right another thing we're going to
284:14 - need is we're going to need the number
284:16 - of people
284:17 - from number of people div so now i'm
284:19 - going to say let number be why i'm
284:22 - saying let here is because the number of
284:23 - people is going to change so sometimes
284:25 - it's going to be 1 sometimes going to be
284:26 - 2 three four five
284:28 - right so number of people is gonna
284:30 - change so we're gonna say
284:32 - let number of people equal
284:34 - we're gonna go to our number of people
284:36 - div
284:37 - right and then we'll try and see if we
284:40 - can do inner text and let's type cast it
284:42 - into a number now let's see if any of
284:45 - this works okay so in my calculate bill
284:48 - i'm just going to try to do a console
284:49 - log and i'm just going to say hey show
284:51 - me number of people and let's just see
284:52 - if like
284:53 - any of this is even working right so if
284:56 - i type in here
284:57 - every time i
284:59 - type it runs my calculate bill function
285:01 - and every time it runs that it actually
285:04 - shows me
285:05 - my number of people
285:07 - right
285:08 - my number of people is one so that's why
285:10 - i just keep saying one one one one one
285:12 - okay now i can do console log and we can
285:15 - also do bill input right and i can get
285:18 - the bill input value and we can console
285:21 - log that too so i can go here and say
285:23 - one two three and you can see we got one
285:25 - two three
285:26 - at the bottom
285:28 - right and the console log
285:30 - abc and i got abc at the bottom
285:33 - hopefully you can see that it's right
285:35 - there
285:36 - perfect so
285:38 - it looks like i'm able to uh get
285:41 - information from from these divs and
285:43 - things so that's working so i'm going to
285:45 - now remove these console logs because
285:47 - i've verified what i needed to verify
285:49 - now i'm just going to follow the
285:50 - instructions that i have written here so
285:52 - get bill
285:53 - from user input and convert it into a
285:55 - number
285:56 - so i'm gonna basically say hey bill
285:58 - input and
286:00 - what i'm gonna say dot value should
286:02 - honestly get me the actual
286:04 - bill now i should just have to type
286:06 - cassette to a number and this should get
286:09 - get me the actual bill and now let's
286:10 - just save it to a variable and we'll
286:12 - call that bill let's console log bill
286:15 - and uh let's see what happens okay so
286:17 - let's run our app and one two three
286:21 - right and our bill is
286:23 - constantly being printed out to the
286:24 - screen and it's a number so that's
286:26 - that's good so i'm gonna remove this
286:27 - console log don't need that anymore now
286:29 - we're gonna get the tip from user and
286:31 - convert it into a percentage so we're
286:33 - going to say const tip
286:35 - is equal to
286:37 - we're going to do the same thing and
286:38 - we're going to say tip input dot value
286:40 - this time and we're going to actually
286:42 - convert it into a percentage right
286:44 - because that's what it says convert into
286:46 - a percentage divided by 100 so we're
286:48 - going to divide it by 100. now let's
286:50 - console log the tip percentage
286:53 - let's run this and i'm gonna do
286:56 - 10 and notice it gave me 0.1 because 10
286:59 - divided by 100 is 0.1 so that's perfect
287:03 - right we're getting our tip percentage
287:05 - that means it's 10 great so i can get
287:07 - rid of this console log don't need that
287:09 - anymore all right now we're going to get
287:10 - the total tip amount and how we're going
287:13 - to get this is we're just basically
287:15 - going to say you know it's going to be
287:17 - bill multiplied by tip percentage right
287:21 - so
287:22 - now let's go ahead and console log this
287:24 - and we're going to say tip amount tip
287:26 - amount
287:28 - okay and i'm going to just put it as an
287:29 - object so it prints out kind of nicely
287:31 - so let's go ahead and let's do
287:34 - writing this is the same as writing this
287:37 - both are the same so this is just like a
287:39 - pro little pro hack all right so i'm
287:40 - gonna say 10
287:42 - and tip amounts did not get updated
287:45 - interesting so let's go ahead and fix
287:46 - that let's run this again let's say 10
287:49 - oh because i'm not putting in a bill
287:52 - total so let's go ahead and do 100 10 on
287:55 - that tip amount is 10. uh what if it was
287:58 - 200.7 would be 20 dollars let's do 300
288:01 - and you can see that tip amount is
288:03 - calculating correctly right it says 30.
288:06 - uh that's perfect so it looks like this
288:09 - is working so i'm going to go ahead and
288:10 - remove this console log don't need that
288:12 - anymore all right now next up we need to
288:14 - calculate the total so the total is
288:17 - going to be tip amount plus bill so
288:19 - let's go ahead and do const total and
288:21 - we're going to say tip amount plus bill
288:24 - okay let's go ahead and console.log that
288:27 - now and let's run and when i type in 100
288:31 - and i type in so uh 10
288:34 - so right now tip is assuming zero
288:36 - percent so now we have a hundred oh by
288:38 - the way let's do that little trick we'll
288:40 - do this
288:41 - wrap it in an object let's try this
288:43 - again and we're going to say 100 and
288:46 - we're going to give a tip of 10 and you
288:48 - can see total is 110. right let's give a
288:50 - tip of 20
288:52 - and total is 120.
288:54 - so this is working exactly like how we
288:56 - wanted to let's get rid of this now
288:59 - now we're going to calculate the per
289:00 - person total where we're going to divide
289:02 - by the number of people
289:04 - so that should be easy to do per person
289:07 - total and we're gonna do total divided
289:10 - by and we already have access to number
289:12 - of people right here right this is
289:15 - pulling number of people is pulling
289:17 - straight from here okay so it's one and
289:20 - we're type casting it into a number so
289:22 - it's going to not be a string of 1 but
289:23 - it's a actual number of one right so
289:26 - we're going to do that divided by number
289:27 - of people and now let's go ahead and
289:30 - let's show that so we're going to do per
289:33 - person total let's run this and we have
289:37 - 100
289:38 - tip is 10
289:40 - and per person total is 110. it's
289:43 - because right now we're not able to
289:45 - increase the
289:47 - number of people right but let's say i
289:49 - went to my html file and i just hard
289:52 - coded that one to a two let's see what
289:54 - happens i'm gonna hard code that to a
289:56 - two let's run our app and let's see if
289:58 - this works so i'm gonna say bill is
290:01 - you know bill is 100 and then tip is 10
290:05 - and you can see that it says 55 dollars
290:07 - per person right which which makes ample
290:10 - amount of cents 55 per person why
290:13 - because it's 110 110 divided by two
290:16 - people is 55. so now let's go and change
290:19 - that hard-coded to back to a one let's
290:22 - run our app again
290:24 - and uh because we want to change that
290:26 - dynamically right we don't want to like
290:28 - hard code it in so make sure that this
290:30 - is back to a one when you run your app
290:32 - perfect so what's up next let's go down
290:36 - and let's see what's up next and now
290:37 - update the per person total on dom and
290:40 - show it to user okay cool so let's go do
290:43 - that
290:44 - so i'm gonna grab per person
290:47 - per person total div because i have
290:49 - access to it from up here oh let's just
290:52 - call it per person total diff okay so
290:55 - per person total div we have access to
290:57 - it up there let's p yeah per person
291:00 - total div and we're going to change its
291:02 - inner text to
291:04 - uh per person total right over here okay
291:07 - so i'm going to say per
291:09 - person total
291:10 - oh i'm sorry okay i'm uh yeah i'm just
291:13 - kind of misunderstanding this but like
291:16 - what i mean is
291:18 - this is going to be total per person
291:20 - okay
291:21 - so that's
291:22 - that's this div right here per person
291:25 - total so we are updating it correctly
291:29 - okay so let's just see what happens now
291:31 - let's run this
291:33 - let's go ahead and type in 100
291:36 - let's type in 10 percent
291:38 - and let's see what happens we're getting
291:40 - back 110 so that's good but we want it
291:42 - to be in dollars so let's go ahead and
291:46 - do string template literals
291:48 - and we're gonna
291:50 - wrap it in this and just put
291:52 - another dollar sign so
291:55 - this dollar sign will just make sure
291:57 - this is javascript and then this dollar
291:58 - sign will actually put an actual dollar
292:01 - sign so i'll say 100
292:03 - and we'll do 10
292:04 - and when we go here you can see that it
292:06 - says 110
292:09 - dollars okay
292:11 - great
292:12 - now what happens if we have a bill
292:15 - that's something like this
292:17 - 148.5 what happens if we have a bill
292:20 - that's like
292:21 - decimals
292:22 - you know or has maybe
292:25 - weird decimals and now you can see
292:28 - that it started showing like
292:31 - lots of decimal places right like so for
292:33 - 135 dollars and 52 cents it says 149.00
292:38 - like how are you going to pay that in
292:40 - cents that doesn't really make sense so
292:42 - what we want to do here is we want to do
292:44 - a dot 2 fixed
292:47 - so we're going to do that now so
292:49 - you can actually
292:51 - do dot to fix
292:54 - two and pass in two right there and it's
292:56 - gonna make sure that it doesn't go
292:58 - beyond two decimals so let's try some
293:01 - number again like that and you'll notice
293:04 - that now it actually just goes to two
293:06 - decimal places now what if the bill is
293:09 - more like
293:10 - 3 000 or something like that it gives
293:13 - you 3 300 but it doesn't you know it'd
293:16 - be nicer if it kind of put a comma in
293:18 - there right so if you want to kind of do
293:20 - that what we can actually do and this is
293:23 - a cool
293:24 - uh trick that i learned that i use a lot
293:26 - actually so that's why i kind of want to
293:28 - show it off here you can do dot locale
293:31 - string and just pass in um
293:34 - en
293:35 - us so it's just gonna
293:37 - format it to us currency like a dollar
293:40 - currency or whatever right and uh now if
293:43 - you try
293:44 - some bill
293:46 - right you notice that it's actually
293:47 - putting that
293:48 - dollar sign and that comma or sorry not
293:51 - the dollar sign but the comma which is
293:53 - nice so like if you get some like i
293:55 - don't know you're never going to have a
293:56 - bill this much when you're eating food
293:58 - right but all the commas are there and
294:00 - if you get up to 25 million the commas
294:02 - are still there so this is good now we
294:04 - just want to make sure that we still do
294:06 - that dot to fix thing so let's do two
294:08 - fixed and pass it to two places right so
294:13 - fix it to do decimals first and then
294:14 - turn it into with commas let's try it so
294:17 - let's try some big number
294:19 - and let's do decimal places like crazy
294:22 - and notice that the decimal places here
294:24 - don't change okay
294:26 - so great
294:28 - all right in this case
294:29 - all right lesson learned so it seems
294:31 - like if you try to use dot two fixed and
294:33 - locale string it doesn't work so just
294:35 - pick one in this case we're just gonna
294:37 - stick to dot to fix for now okay
294:40 - so without making it much more complex
294:43 - and that'll just take care of the
294:45 - decimal places which is perfectly fine
294:47 - actually but yeah our decimal places
294:49 - will be fine
294:50 - and then you can give whatever
294:51 - percentage tip and everything will work
294:53 - out as expected
294:56 - so let's get rid of this console log we
294:58 - don't need this anymore so i just got
295:00 - rid of it
295:02 - perfect so now it seems like our
295:03 - calculate bill is doing
295:06 - exactly what it needs to do write it it
295:08 - calculates the bill in a really
295:10 - intelligent way so now all we got to do
295:12 - is increase and increase let's work on
295:14 - increased people so here it says
295:16 - increment the amount of people well i
295:18 - already have number of people number of
295:20 - people right here in line 29 so what i'm
295:21 - going to do is i'm just going to copy
295:23 - this
295:24 - and paste it here and i'm just gonna do
295:25 - plus equals one so we're just gonna
295:27 - increment the number of people by one
295:30 - and then we're gonna update it on the
295:31 - dom
295:32 - so we're gonna grab number of people
295:35 - div which is gonna be
295:38 - this div right here okay and we're just
295:40 - going to pop in the number of people
295:42 - that we now have so we're going to say
295:44 - number of people
295:46 - is equal to
295:47 - number of people dot inner text
295:50 - is equal to number of people okay
295:53 - so now let's run this and let's hit plus
295:57 - and you can see that every time i hit
295:58 - plus it actually increments the number
296:00 - of people and then it shows it and
296:02 - that's why you can see that it's showing
296:04 - it exactly how we want it to right and
296:07 - right now minus doesn't work okay so
296:09 - that's fine we'll do that in a second
296:11 - but watch what happens when i do this
296:14 - the bill doesn't calculate the right way
296:16 - i have 10 people
296:18 - okay so let's run this again
296:20 - let's go a hundred dollars tip is ten
296:24 - percent okay and let's run this
296:26 - and you can see it's saying everybody
296:29 - owes a hundred and ten dollars per
296:31 - person that doesn't make sense because
296:32 - 110 dollars that's eleven hundred
296:35 - dollars so how come the bill started
296:36 - with 110 dollars and now we owe 100
296:39 - 110 or something's wrong so what we need
296:43 - to do
296:44 - is once we do this we need to
296:46 - recalculate the bill based on the new
296:49 - number of people which is super easy all
296:51 - we have to do here is reuse the function
296:54 - we just created so just call this
296:56 - function and that should handle
296:58 - everything so let's go ahead run this
297:01 - i'm going to say we have a hundred
297:03 - dollar bill i'm gonna say we're tipping
297:05 - let's say 10
297:07 - number of people is two and boom look at
297:09 - that it's 55. why does it work because
297:13 - remember
297:14 - per person total is calculated total
297:16 - divided by number of people so when you
297:18 - update number of people here
297:20 - this number of people updates and that's
297:22 - the number of people
297:23 - calculate bill function has access to so
297:26 - when you run it again it just
297:29 - recalculates this with a new number of
297:31 - people after you change them pretty
297:32 - beautiful right so very very simple
297:35 - let's go ahead and do the same thing so
297:37 - this code is going to be really really
297:39 - really similar for decrease so decrement
297:42 - the amount of people instead of plus one
297:44 - we're gonna do minus one
297:46 - number of people div we're gonna change
297:48 - to update that and then we're gonna
297:51 - recalculate the bill so it's gonna be
297:53 - very similar to increase so watch what
297:55 - happens when i have a hundred dollars i
297:57 - have a ten percent tip i can go one way
298:00 - and i can go backwards look at that how
298:03 - nice but here is the problem i can go
298:06 - more than i can go less than one watch i
298:09 - went to negative one what is that i'm
298:11 - going to negative numbers what is
298:13 - happening how can i have so what the
298:16 - restaurant now owes me for eating there
298:19 - like they should you know what i mean
298:21 - like the royalties there to eat
298:23 - you are special you are a royalty so if
298:26 - you went and the restaurant owed you
298:28 - money i would understand okay fair
298:30 - enough because you're here watching this
298:31 - tutorial you're top of the food chain
298:34 - all right while everybody struggles out
298:36 - there you're here grinding it out so
298:38 - then you can
298:39 - level up your career provide for your
298:41 - family provide for your kids you're a
298:42 - champ tap yourself on the bat pat
298:44 - yourself on the back do both tap and pat
298:47 - do them both all right so we don't want
298:50 - to go below one person so we're gonna
298:52 - add what i call a guard clause here
298:55 - basically going to say if
298:58 - number of people is less than or equal
299:00 - to one homie
299:01 - just stop just stop
299:03 - stop
299:05 - don't run
299:06 - this simply here means end the function
299:08 - right here
299:09 - and the decreased pupil function on line
299:11 - 70 and don't run any of this
299:14 - so
299:15 - let's try this again and i'll explain
299:17 - 110
299:18 - now when i hit minus watch what happens
299:20 - hit minus
299:24 - nothing happens when i hit plus it works
299:26 - when i hit minus it works but when i hit
299:28 - minus now it doesn't work so what is
299:30 - happening when it's one or less than one
299:33 - it just says hey i noticed that this
299:36 - function is running but i want you to
299:38 - only run here and when this condition is
299:40 - true because number of people is one
299:42 - right just one less than or equal to one
299:44 - yes it's true so then the code just
299:46 - stops and doesn't end up running any of
299:48 - this now in the other case scenario
299:50 - where a number of people is let's say
299:52 - two it goes as two less than or equal to
299:53 - one and it goes false so then it doesn't
299:56 - run this but it ends up running all of
299:58 - these here okay so that's why it's a
300:00 - guard clause right so we're just
300:02 - guarding the entire code base and we
300:04 - stop it okay to prove to you i'm just
300:07 - going to say it's a long number of
300:11 - people
300:12 - so
300:14 - i'm going to stop okay so let's go ahead
300:18 - and uh run this and watch what happens
300:21 - when i hit minus
300:22 - it detects one is one or less than one
300:25 - so i'm going to stop right when i go
300:28 - here and try to run minus see it doesn't
300:30 - happen it doesn't happen the console.log
300:32 - statement doesn't happen doesn't happen
300:34 - even here it doesn't happen even here
300:35 - but when i go one more below boom one is
300:38 - one or less than one so i'm gonna stop
300:40 - one is one or less than one so i'm gonna
300:42 - stop
300:43 - so it's detecting it right every single
300:45 - time every single time okay so we can
300:48 - even like leave a little message for the
300:50 - user and say you know
300:52 - hey you can't
300:54 - go you cannot less than one person
300:58 - right so now like the user can see this
301:00 - message and
301:02 - no okay i can't do that right so
301:05 - plus plus plus minus minus minus
301:07 - hey you cannot have less than one person
301:10 - and if you want to make it more
301:11 - intrusive and more visible to the user
301:13 - you can even do something like an alert
301:15 - so now we go 100
301:18 - 10 percent tip plus plus plus minus
301:20 - minus minus minus
301:22 - says hey right
301:24 - you cannot have less than one person so
301:27 - this lets us know
301:28 - right there that that's not a
301:30 - possibility so you can do it whatever
301:32 - way you want okay you could throw an
301:34 - error if you want and like that'll kind
301:36 - of crash the app and if you want to be
301:38 - really pro i can give you one like kind
301:40 - of pro javascript tip
301:42 - is uh what you can do is you can throw
301:45 - an error and show the user they're doing
301:47 - something wrong but like kind of in a
301:48 - sneaky way so here you can say you can
301:51 - you can replace this
301:53 - alert with something called a throw and
301:55 - they'll throw an error so you do throw
301:58 - and then what's nice about throw is you
301:59 - won't even need that return like or just
302:01 - leave the return here but like you won't
302:03 - really need it okay so you can do that
302:04 - return pattern i'm leaving this return
302:07 - here to show you use a return pattern
302:08 - again and again because that's normally
302:10 - what i do but here if you want to throw
302:12 - an error and really let the user know
302:13 - you could do that right so for example
302:15 - boom 100 10
302:18 - i try to hit minus and it throws like a
302:20 - red little error at the bottom says hey
302:22 - you cannot have less than one person so
302:24 - it's very clear that the user is trying
302:26 - to do something that they're not allowed
302:28 - to do and like you can make it visible
302:31 - all right so there you go let's see if
302:34 - this entire thing is working or not
302:36 - let's open it up here and let's check
302:38 - right
302:39 - we just built this and we're excited
302:41 - right
302:42 - let's see if it works so we got a bill
302:45 - we just went and ate at a nice
302:47 - restaurant let's say you went to
302:49 - cheesecake factory you took your family
302:51 - out i mean it's a nice night out right
302:54 - they gave you a big fat bill for 375
302:56 - dollars maybe you maybe you brought some
302:58 - friends with you and they're like hey
303:00 - mandatory tip is 20 so you all start
303:02 - freaking out who's gonna calculate it
303:04 - what is it gonna be what's happening
303:05 - right so you go okay we got the tip is
303:09 - you know
303:10 - 10 or we're gonna give a 20 tip so
303:12 - that's
303:13 - oh that's 450
303:15 - right now but you only have one you only
303:17 - have selected as one person but luckily
303:20 - you brought your friends with you right
303:22 - you brought the entire gang hopefully
303:25 - so you know you got
303:27 - you got uh
303:29 - juanes you got daniel you got frankie
303:32 - you got lance you got nas
303:35 - i mean you got the whole gang up in
303:37 - there right so you got all these six
303:39 - people
303:40 - look at that
303:42 - your bill is only 75 dollars
303:45 - that's not too bad right that's not too
303:47 - bad that's that's easy maybe maybe you
303:50 - bring in two other people from somewhere
303:52 - you go to them and you grab them and
303:54 - you're like hey
303:55 - come join our party and split the bill
303:57 - with them too now the more the merrier
303:59 - am i right you got 56.25
304:03 - i mean this is at this point the
304:05 - restaurant should be paying you right
304:07 - this is nothing
304:08 - cheesecake factory nice night out with
304:10 - the family and friends i mean come on
304:13 - that's a bargain
304:14 - the 20 tip right
304:16 - so this is this is really nice right
304:20 - this is really nice app that we could
304:22 - actually use and what's amazing is it's
304:24 - already hosted online thanks to repple
304:26 - yeah it's deployed on the interwebs so
304:30 - you could put it on your portfolio you
304:31 - could do whatever you want with it's
304:33 - live ready to go
304:35 - okay ignore that sound that was i'm
304:38 - having a focus session and it makes this
304:40 - little bang so now what i want you to do
304:43 - is you're going to grab all of this
304:45 - javascript code that you wrote
304:48 - go back to this exercise
304:50 - file okay
304:52 - and go to tip calculator go to exercise
304:55 - go to the script js okay
304:58 - and then
304:59 - delete everything that's in this
305:00 - exercise file okay and then paste your
305:03 - code in here
305:04 - all right and give it a try and see if
305:07 - it works so go and run it so go to your
305:10 - now project exercises you should be able
305:12 - to go to tip calculator
305:14 - you should be able to
305:16 - type in things like
305:18 - 100 10
305:20 - plus plus plus plus minus minus minus it
305:22 - should all
305:24 - work smoothly okay so make sure you go
305:27 - ahead and do that update your exercise
305:29 - as exercise as you go so you have the
305:31 - most up-to-date
305:32 - version with all of your projects
305:34 - completed all in one place nice and
305:36 - ready for you to use
305:37 - all right
305:38 - that was the tip calculator i hope you
305:40 - had fun i had a ton of fun actually
305:42 - sharing it it's 11 53 p.m i was supposed
305:46 - to have a date night with my girlfriend
305:47 - we're gonna watch the boys the new
305:49 - season of the boys is out i mean god
305:51 - that show is good season three
305:53 - started watching this indian movie
305:55 - called rrr phenomenal
305:57 - and um
305:59 - about to move soon you know leaving
306:01 - marina del rey man a lot's going on you
306:03 - know a lot's going on
306:05 - and instead of doing any of those things
306:09 - you know i decided to be here and uh
306:12 - build this app with you and do it
306:14 - together so it's gonna be awesome
306:16 - so i hope you enjoyed it i hope it was
306:18 - awesome let's continue let's learn more
306:20 - javascript i hope you're excited i love
306:22 - your beautiful face and i'll see you
306:23 - soon let's go
306:26 - welcome back
306:27 - now i want you to start getting ready
306:30 - for rock paper scissors and by the way
306:32 - just a sneak peek
306:34 - you're going to be doing something with
306:36 - netflix
306:37 - soon so one of your projects is going to
306:39 - be netflix okay so i hope you're excited
306:42 - about that this is going to be with
306:42 - vanilla javascript so this is just a
306:44 - little sneak peek
306:46 - now what we're going to be doing is i
306:48 - want you to start getting ready for rock
306:49 - paper scissors because we're about to
306:50 - start building it soon but there are
306:52 - just a few things that you need to
306:54 - understand for this
306:55 - all right so for rock paper scissors one
306:57 - of the dom manipulation concepts
307:00 - you're already good with like for
307:01 - example when you click a button right so
307:03 - for example if i go to rocket processor
307:05 - solutions over here and when i click
307:06 - this
307:08 - to click and detect the button you've
307:09 - already learned this concept so that's
307:11 - good
307:12 - um when i click the hand you've already
307:14 - learned that concept so that's you're
307:16 - good there
307:18 - you learn the concept of being able to
307:20 - hit this red button and then it clears
307:22 - everything up right so dom manipulation
307:24 - concepts you've learned so i'm happy
307:26 - about that
307:27 - i think the things that you still need
307:28 - to know are how to select an item from
307:31 - an array so let's go ahead and just do a
307:33 - practice exercise together so remember
307:35 - you're going to be coding in your
307:37 - playground.js and i'm going to be coding
307:39 - in just playground.js okay so this one
307:42 - is for muah qazi
307:44 - this other one is for you okay so this
307:46 - one is going to be with all the finish
307:48 - titles so
307:50 - how do you select an um item out of an
307:53 - array so let's practice that so here
307:55 - let's say we create a new variable
307:57 - called uh fruits okay i'll just do let
307:59 - fruits
308:02 - and let's see
308:03 - did we make it earlier yes we did okay
308:05 - so
308:06 - i don't have to i'll just change this to
308:08 - a let
308:10 - okay
308:11 - i'll bring this down
308:13 - [Music]
308:14 - you have to paste the whole thing in
308:16 - we'll just do this
308:18 - and i'll do it up until here
308:21 - okay so fruits is only going to be
308:24 - a couple of items
308:25 - now let's go ahead and make sure that
308:27 - fruits is we're able to console it so
308:29 - i'm going to say console.log
308:33 - fruits of
308:35 - zero let's run this
308:38 - okay one second it says it's already
308:40 - been declared so maybe i don't need to
308:42 - even say let here let's run this
308:45 - okay cool so i have this fruit banana
308:48 - showing up
308:51 - now how would i randomly select
308:54 - something from this array
308:57 - okay so let's make a function we're
308:59 - going to call it
309:05 - okay random selection from array
309:08 - this is the function in here we're going
309:10 - to put our fruits and now since this is
309:13 - inside of a function you can say kant's
309:15 - fruits and you can create a new fruits
309:17 - here okay
309:18 - and the scope of this fruits is only
309:20 - going to remain within the function and
309:21 - outside of the function this variable
309:23 - will be unknown okay
309:25 - and let's move this down here
309:28 - and let's just run this function for now
309:29 - so i'm just going to say console.log
309:33 - random select from gray or let's say
309:38 - random fruit
309:41 - okay and let's say that this takes in
309:46 - items
309:49 - let's say it takes in fruits and it
309:51 - randomly returns them okay
309:55 - let's uh take this array out i know i'm
309:57 - making go back and forth yeah yeah yeah
309:59 - whatever just just
310:01 - it's okay all right i know i'm making go
310:03 - back and forth but it's all good
310:06 - um
310:07 - it's not supposed to be inside of this
310:08 - function let's put it outside of the
310:10 - function okay because i'm making a
310:11 - mistake so it's my fault i apologize
310:14 - for this confusion
310:17 - and what we want to do is
310:19 - you want to pass it a fruit and it
310:21 - should randomly return the fruit so an
310:23 - example of this if you call random fruit
310:25 - and you pass it in
310:27 - you know let's just say
310:30 - or whatever you can pass it numbers as
310:32 - well so if you pass it in one and two
310:34 - it may be randomly returns two okay and
310:37 - if you run it again it might randomly
310:39 - return one
310:40 - so that's what this array here does
310:44 - all right so it's going to get fruits
310:47 - and it's going to randomly select now
310:48 - how do we randomly select so one thing
310:50 - you have to remember is we have
310:51 - math.random and this will give us a
310:54 - random number okay so let's try it
310:56 - math.random
310:58 - and i'll get a random number now if i
311:00 - multiply it by 3
311:02 - i'm always going to get a number that's
311:03 - going to be less than 3.
311:07 - now to make these numbers useful because
311:09 - right now there are these decimal
311:10 - numbers which are kind of useless
311:13 - we're going to floor
311:15 - all of this we're going to call a floor
311:17 - on this
311:19 - all right so now when we press up and
311:21 - keep running it press up and enter up
311:22 - and enter now notice i'm only going to
311:25 - get numbers between 0 1 and 2.
311:28 - okay
311:29 - so i want to be able to get
311:32 - 0 1 2 and 3. so for this the range
311:36 - should be because this is 0 1 2 3
311:39 - i should be able to select
311:41 - randomly
311:42 - between these four numbers right here
311:45 - okay so in this case i might have to do
311:48 - math
311:49 - multiplied by four so then i get a
311:52 - number between zero one and two and
311:54 - three okay so i'll always get that so
311:56 - keep running it i'll never get four i'll
311:58 - only get zero one and two and three
312:00 - sorry
312:01 - zero to three
312:04 - okay so that's the trick that's how
312:07 - we're gonna get that now
312:08 - this is this over here is the max right
312:12 - for multi where i'm multiplying it by
312:14 - four
312:15 - that is the
312:17 - that's the length
312:18 - that i want it to be
312:20 - okay so let's go
312:23 - create a variable called max
312:25 - length is going to
312:27 - it's gonna be four or yeah four
312:31 - okay and now i'm gonna write this
312:32 - function i'm just gonna replace it with
312:33 - max length
312:35 - so now when i change the max length to
312:37 - let's say i wanted to give me between
312:39 - three items i just change it to a three
312:41 - i run it and now i get between zero one
312:43 - and two
312:44 - so this is going to be dynamically
312:46 - changing so in order to account for that
312:48 - we need to pull from fruit's length
312:51 - okay so we're gonna say math.random
312:53 - multiplied by fruits.length this will
312:56 - give us a dynamic array
312:59 - and then we want to
313:02 - wrap this in math.floor
313:05 - okay and we'll say
313:08 - random number
313:10 - and then what we're going to do is we're
313:11 - just going to return
313:13 - fruits
313:14 - whatever that random number is so it's
313:16 - going to be 0 1 2 3 and 4 or whatever
313:19 - whichever one right
313:20 - now
313:22 - let's run our random fruit function and
313:24 - pass it our fruits that we just created
313:27 - right over here
313:29 - let's run it and let's see if it does
313:31 - what we want it to do
313:34 - okay so i don't need to say let over
313:35 - here let's just hit run cool so i got a
313:39 - pear let's try it again i got a banana
313:41 - let's try it again i got an orange let's
313:43 - try it again orange let's try it again
313:45 - orange let's try it again orange banana
313:48 - pear
313:50 - pear banana
313:52 - right so just randomly picking and it
313:54 - never breaks
313:55 - okay
313:56 - so you can see how
313:58 - this is working right every single time
314:00 - i run it
314:02 - run
314:03 - run
314:04 - run i get back a different fruit
314:07 - okay and so let's console log what
314:09 - number is every single time random
314:11 - number
314:14 - okay let's run it
314:15 - boom you can see the random number is
314:17 - two
314:18 - so it gets zero one and two so i get the
314:20 - orange random number is one so i get the
314:22 - apple one apple zero banana
314:25 - okay so that's how this random fruit
314:28 - function
314:29 - uh
314:30 - works so this is definitely one that you
314:33 - needed to know because
314:35 - in order to be able to do what you're
314:37 - going to do in
314:39 - rock paper scissors you're going to need
314:41 - to know how this works
314:43 - more specifically speaking there's going
314:45 - to be a function in rock paper scissors
314:46 - that you're going to need to implement
314:47 - which is going to get a random computer
314:49 - choice
314:50 - and the array you're going to have is
314:51 - going to be rock
314:53 - paper
314:54 - and scissors
314:56 - and you're going to use need to
314:57 - essentially lose the same logic to
314:59 - randomly pull a computer choice out of
315:01 - this array of three elements
315:04 - rock paper or scissors
315:06 - okay so you're gonna have to figure that
315:08 - one out
315:09 - one more thing you're gonna need to know
315:10 - before we get into rock paper scissors
315:12 - is
315:14 - so this shows you select a random
315:18 - element from an array that's what this
315:21 - piece of code shows you
315:23 - the next thing you're actually going to
315:24 - need to know
315:26 - is
315:28 - some more advanced conditional
315:30 - statements meaning how do you chain if
315:32 - with an else if with an else
315:35 - so you're going to need to know that
315:36 - okay because that's how you're going to
315:37 - be able to implement your rock paper
315:39 - scissors game
315:41 - so i'll give you an exercise
315:44 - there are three different weathers
315:47 - rainy
315:48 - sunny and overcast
315:50 - okay
315:51 - and what we want to do is if the weather
315:53 - is rainy i love rain so we should give
315:56 - that a plus one score or a one score
316:00 - uh we don't need to put plus one here
316:01 - right
316:03 - uh if it's sunny then we give that a
316:05 - score of negative one because i don't
316:07 - like sunny weather
316:09 - okay
316:10 - so i freaking love rain man like i love
316:13 - rain rain is so awesome
316:16 - sunny
316:17 - um it's all right
316:19 - and then overcast would be zero
316:22 - i also i mean like for me i also love
316:26 - overcast so
316:27 - it is what it is you know um i would
316:30 - want to give this a score of one but
316:32 - since for this example we're just gonna
316:34 - do this okay because i like rain more
316:36 - than i like overcast so this is how
316:37 - we're gonna do this app
316:42 - weather scorer this is gonna be our
316:45 - function
316:46 - and how are we gonna do this so see if
316:48 - you could give this a try and write
316:50 - you're gonna need to write essentially
316:52 - three if else if else conditions okay
316:55 - and they're gonna need to follow this
316:57 - pattern let's go ahead and do it
316:58 - together if you can't figure out
317:00 - yourself that's totally fine okay i'm
317:01 - gonna give you five seconds five four
317:03 - three two one all right let's do this
317:06 - together now so i'm going to basically
317:08 - say
317:10 - if
317:11 - so the the weather score right it's
317:13 - going to take in an input from the user
317:15 - so it's going to take in what the
317:16 - weather is right now so we're going to
317:19 - say if the weather
317:21 - is rainy and you can use three equal
317:23 - signs here as well or two equal signs
317:25 - both will work in this case
317:28 - if weather is rainy
317:30 - and we'll also create a variable called
317:32 - score that'll keep track of the overall
317:33 - score
317:35 - i'm going to say if weather is rainy
317:38 - then we're going to do score equals one
317:41 - okay
317:43 - and now we're going to say elsif
317:47 - weather
317:49 - is sunny
317:52 - we're going to say
317:54 - score
317:55 - is equal to
317:57 - negative one
317:59 - and now you could do an else because
318:01 - we're just going to assume it's overcast
318:02 - because those are three choices so you
318:04 - could do else or you could also do an
318:06 - else if okay because you can chain as
318:08 - many elsifs as you want but you can only
318:11 - have one else and then we're gonna say
318:13 - else
318:15 - score
318:16 - is
318:17 - zero
318:19 - and then at the end we want to return
318:21 - score
318:23 - okay so hopefully you either got this or
318:27 - try it now without like removing your
318:29 - code from scratch and then writing it
318:31 - again from scratch and you can try it
318:32 - that way too and see if you can get it
318:34 - and now we're gonna call
318:36 - console.log our weather
318:38 - scorer app that we just made
318:41 - and we're gonna give our weather score
318:45 - rainy and let's see what score it
318:47 - returns
318:48 - wait let's uh comment out our allure
318:50 - fruit stuff up here
318:53 - let's run it
318:54 - and you can see we got back one because
318:56 - it's rainy now let's try sunny
319:01 - now that's a negative one
319:03 - okay
319:04 - and then we have
319:08 - overcast
319:13 - there we go
319:14 - now if you want to take this to a next
319:16 - level you could even chain these so for
319:18 - example we could even chain these and go
319:23 - uh if weather equals equals rainy and
319:26 - maybe you can have two types of weathers
319:29 - you can give you can have somebody can
319:30 - give you multiple like um
319:34 - weathers or something right like you
319:35 - could get
319:36 - they could give you it's rainy but then
319:39 - there's also overcast
319:41 - or you know it's a mixture of two so
319:43 - then you can chain them together like
319:45 - that so you could go
319:48 - if weather is rainy let's just say i'm
319:50 - giving i'm just gonna give a very rough
319:52 - example so we're gonna say weather
319:54 - and then we're gonna say whether two
319:56 - and whether
319:57 - [Music]
320:00 - two is
320:02 - overcast
320:04 - then maybe this gets a score of two
320:06 - because it's two of my favorite
320:07 - weather's in one where there is rain
320:11 - and there's overcast
320:13 - all right so here's an example of doing
320:15 - that yeah i have two other conditions
320:17 - here and i'm checking if both are true
320:19 - then score is one
320:21 - now
320:22 - let's go and pass both of these
320:24 - conditions so i'll say
320:26 - uh first weather is rainy and then the
320:28 - next weather is
320:31 - overcast right in this order oh wait
320:34 - sorry
320:34 - overcast let's put overcast here and
320:37 - we'll say the score would be two points
320:39 - in that case
320:41 - so if whether one is rainy let's give
320:43 - that a try and boom we got a score of
320:45 - two
320:46 - okay
320:47 - so that way you can actually chain
320:50 - conditions okay and then here let's see
320:52 - if i can do this right so let's go else
320:54 - if
320:55 - and now we'll do another else if right
320:56 - here
320:57 - and then in this elsif i'm going to say
321:01 - check if just the first weather is
321:04 - rainy then give it a score of one let's
321:08 - remove that
321:09 - boom let's bring this all together so
321:11 - now let's see if i pass just rainy
321:15 - and maybe i don't even pass a second
321:17 - argument let's watch what happens
321:19 - boom i get a score of one
321:22 - okay let's try
321:23 - i pass sunny here and let's run this
321:26 - i still get a score of one so watch
321:28 - what's happening
321:29 - this condition ran over here and it said
321:31 - hey check if the weather is rainy and
321:34 - weather two is overcast
321:37 - okay
321:38 - so we ran this and we saw actually you
321:40 - know what this is true but this one over
321:43 - here is false
321:47 - because of this and statement here both
321:49 - of this becomes false so the entire
321:51 - things the entire thing becomes false so
321:53 - then we don't run this check then we go
321:55 - to this else if here
321:57 - then we check
321:59 - is weather equal to rainy it's the first
322:00 - weather equal to rainy and we go yes it
322:02 - is and then it gives it a score of one
322:05 - okay and the order here matters because
322:08 - if you put this statement above
322:11 - well then
322:12 - if the weather was rainy and overcast it
322:15 - would still only get a score of one
322:18 - because it would run this statement and
322:20 - then just end
322:21 - because it's chained with an else if not
322:23 - an if
322:25 - so else if meaning if this if runs then
322:28 - this if will not run
322:30 - but if you remove that with just an if
322:32 - now both of these will run regardless
322:34 - okay so that's why this statement elsif
322:36 - is like an important one to keep in mind
322:38 - and also you can check multiple things
322:40 - why this will matter is in rock paper
322:42 - scissors you'll have computer choice
322:45 - here
322:46 - and you'll have player choice here and
322:49 - you'll need to compare if
322:51 - you know rock
322:53 - and maybe the computer picked or sorry
322:55 - let's it's yeah so let's say computer
322:57 - picked
322:58 - rock
322:59 - and you picked
323:01 - um
323:03 - let's say scissors or paper
323:06 - you'll have to give yourself a score of
323:08 - one whether you won or not
323:11 - okay so if you want in this case you
323:13 - have to give a score of one otherwise
323:14 - zero otherwise negative one if you lost
323:17 - so this will come in handy when you're
323:19 - building that game okay so this is just
323:20 - kind of foreshadowing that so this was a
323:22 - little contrived example
323:24 - but if you hung in there and you did it
323:26 - great job pat on the back
323:28 - and with that said i mean you're
323:31 - you know at this point you're pretty
323:33 - much ready to actually start building
323:36 - out rock paper scissors i hope you're
323:38 - excited all right i hope you're excited
323:40 - we're now going to work on the rock
323:42 - paper scissors app so let's go back here
323:45 - now where you're going to find this app
323:48 - is going to be in your projects over
323:50 - here okay so let me go back to this here
323:53 - so i i can get you a little familiar
323:55 - with this if you haven't really been
323:56 - familiarized with this yet so what this
323:59 - is on this right hand side is you have
324:02 - some lessons you have project exercises
324:04 - and project solutions okay so these are
324:07 - fully working apps
324:09 - got it these over here are exercises
324:12 - meaning when you go to rock paper
324:14 - scissors in under solutions you're going
324:16 - to notice that the entire app works but
324:19 - if you hit refresh here and you go into
324:21 - project exercises again and you go rock
324:23 - paper scissors under project exercises
324:26 - you will click and nothing will work
324:28 - meaning that the entire app is made but
324:31 - it's missing the javascript
324:33 - functionality okay so
324:35 - nothing dynamic is happening with this
324:37 - app as a result of that so that's where
324:39 - exercises will show up now to find where
324:43 - to go and code these exercises on the
324:44 - left hand side you have this folder
324:46 - called projects so you're going to click
324:48 - projects
324:49 - inside here you're going to have rock
324:51 - paper scissors i'm going to click rock
324:53 - paper scissors so we're going to go to
324:55 - rock paper scissors and here you're
324:56 - going to see that this project has an
324:58 - exercise and a solution and every
325:00 - project will have its own exercise and
325:02 - will have its own solution folder okay
325:05 - so if you look at them exercise solution
325:08 - folder uh the exercise folder has
325:11 - your html your javascript and your style
325:14 - sheet
325:15 - solution has the same thing okay the
325:17 - only difference between the solution and
325:20 - the exercise folders is going to be the
325:22 - script this is the only thing that's
325:24 - different between the two okay these two
325:27 - are not the same you will need to update
325:30 - this inside of exercise
325:32 - i would highly recommend do not look at
325:35 - the solution sheet until you give this
325:38 - project a try on your own okay that's
325:41 - gonna be that's not good you're not
325:42 - gonna improve like that okay so
325:43 - seriously just like don't do it it's
325:45 - gonna be a waste of your time waste of
325:46 - your effort like otherwise why are you
325:48 - watching this tutorial just don't watch
325:49 - it go do something else right so if
325:51 - you're gonna do it then do it right make
325:53 - sure you do the exercise first and give
325:56 - it your best attempt even if it takes
325:58 - you hours or days it doesn't matter
326:00 - do that because you're gonna get better
326:02 - so let's go into you know this file
326:05 - right over here uh let's so what we're
326:07 - gonna do is we're gonna familiarize
326:09 - ourselves with what's inside of here
326:12 - okay um and then we're probably gonna
326:16 - move over into a new rebel okay so i
326:18 - want you to actually do this exercise
326:20 - but outside of here because if you try
326:22 - to do this here
326:23 - it's not gonna be the best experience
326:25 - plus i want you to become a better
326:27 - developer so i want you to actually
326:29 - create a new rupple with all three of
326:32 - these files in there and then try to
326:33 - code it up so you can see how to do this
326:35 - from scratch okay so as a matter of fact
326:38 - why don't we actually go ahead and set
326:39 - up the new repel now and then we'll walk
326:42 - through the code together okay so let's
326:43 - go ahead and do that so hit open up your
326:46 - open up a new tab
326:48 - and then just go to replit.com just like
326:50 - this
326:51 - replit.com we're going to select the
326:53 - html css javascript
326:57 - okay click here
326:59 - and then just choose uh great rapple but
327:01 - we're gonna in this case say rock paper
327:05 - scissors and hit create rubble perfect
327:08 - now inside of here we just have index
327:10 - script and style okay so we have these
327:12 - three files now here's all we're going
327:14 - to do we're going to go back we're going
327:16 - to
327:16 - copy so what i'm going to do is i'm
327:18 - going to do command a or control a to
327:20 - copy this entire everything that's
327:22 - inside of this index.html i'm going to
327:24 - copy it right click and copy
327:27 - let's go back here
327:29 - let's delete everything that's inside of
327:30 - here
327:31 - right click and i'm going to
327:33 - [Music]
327:34 - paste
327:37 - boom just pasted that code okay so now
327:39 - my html is pasted if i run it you're
327:42 - gonna see it doesn't look very good but
327:44 - it's there okay
327:45 - then we're gonna go ahead and grab the
327:47 - style sheet i'm gonna copy it
327:49 - and we're gonna go back and we're going
327:52 - to delete everything that's inside of
327:54 - here i'm going to right click and paste
327:55 - this
327:56 - and i don't want you to worry about the
327:58 - styling and everything i just want you
327:59 - to worry about the javascript portion so
328:00 - you can see that with the styling boom
328:03 - everything looks perfect right
328:04 - everything looks super clean now in our
328:06 - script let's go ahead and copy our
328:08 - script and don't worry this is not the
328:10 - solution okay so just copy everything
328:12 - that's inside of here so either control
328:15 - a command a to select everything
328:17 - and then you're going to hit copy then
328:20 - come into this script and paste it okay
328:22 - and hit run
328:24 - and if you click nothing should be
328:25 - working yet perfect okay this is
328:28 - you starting from scratch and now let's
328:31 - just walk through kind of what
328:32 - everything is so let's start off with
328:33 - index.html what's going on in here it's
328:36 - a very simple file with only a few lines
328:38 - of actual code all right some of the
328:40 - code is
328:42 - you know just doctype html html like
328:45 - whatever right that's
328:46 - default
328:47 - html files come with that a couple of
328:49 - lines of code here
328:51 - and you're going to need to know the
328:54 - player score certain div ids because
328:56 - you're going to need to access them so
328:57 - for example this button has a value
328:59 - remember when we did red green and
329:01 - yellow when we did that color app our
329:03 - buttons had a value red it had a value
329:06 - green it had a value whatever so then
329:08 - when you clicked it you're able to
329:09 - retrieve its value
329:11 - that's why that exercise is going to be
329:12 - val helpful to you here no pun intended
329:15 - valuable for you
329:17 - so
329:18 - this is uh that's those buttons you're
329:20 - going to need to know these classes so
329:22 - familiarize yourself with this
329:24 - index.html because from the javascript
329:26 - side you're going to need to detect when
329:29 - somebody clicks this button and you're
329:31 - going to need to be able to refer to
329:33 - these specific buttons you're going to
329:35 - need to be able to refer
329:36 - to you know just specific things and
329:39 - then write on there
329:41 - okay so for example when the player's
329:44 - score shows up maybe that's the player's
329:46 - score div when
329:48 - the hands show up meaning the computer
329:49 - hands or the user hands they should show
329:51 - up here and by hand it's like computer
329:53 - choice or player choice the result of
329:55 - the game whether you won or lost that
329:57 - should show up here as well okay um
329:59 - obviously above that
330:01 - red button right of course it should
330:03 - show like above there so it should show
330:05 - like here
330:06 - end game button you're going to need
330:07 - this id as well and this script here
330:10 - just means that
330:11 - this index.html
330:13 - here
330:14 - is linked with this uh
330:17 - javascript sheet okay meaning if you
330:20 - ever want if you ever change the name
330:22 - here make sure you go and also change
330:24 - the name here and make sure they both
330:26 - match
330:27 - okay cool but i would recommend you
330:29 - don't change anything because once
330:31 - you're done with your entire code you
330:33 - should copy your working code and paste
330:36 - it back inside of the script okay your
330:39 - and the only file you need to change is
330:41 - a script file okay awesome
330:43 - now let's walk through this project step
330:46 - by step we're not going to solve it
330:48 - right now but i'm going to give it to
330:50 - you as an exercise but we need to just
330:51 - kind of go over some stuff okay
330:55 - so
330:55 - this project will have a couple of
330:57 - functions that you need to implement all
330:59 - right here we go
331:01 - so if you look at this there's only one
331:04 - two
331:05 - three
331:06 - four and five
331:08 - there are only five functions that you
331:10 - need to implement the code shouldn't be
331:12 - like longer than 100 lines it should be
331:14 - less than that probably around 70ish
331:16 - lines without comments
331:18 - and
331:19 - that's what you need to work on okay
331:20 - it's five functions one two three four
331:24 - five six actually sorry six functions
331:26 - you need to work on six functions now
331:28 - with each function there's going to be
331:30 - some documentation telling you what this
331:33 - function should do how to run this
331:35 - function and what it should return okay
331:38 - and then there's going to be some other
331:39 - notes sometimes if and you know within
331:41 - the function as well so for example
331:43 - let's walk through computer choice
331:45 - well this function computer choice get
331:48 - computer choice randomly selects between
331:50 - rock paper scissors and returns that
331:52 - string so that should be pretty
331:53 - self-explanatory what that function
331:55 - should do every time i call it here's an
331:57 - example of me calling it get computer
331:59 - choice and here's an example of it
332:01 - returning a random string rock here's
332:03 - another example of me calling it and it
332:05 - returning a random string scissors
332:08 - this function has no
332:10 - arguments okay zero arguments nada so
332:13 - you won't need to add in or take away
332:15 - arguments the arguments are already
332:18 - there
332:19 - for you to help you out here's another
332:21 - function you're going to need to
332:21 - implement the get result function
332:24 - okay this is going to compare player
332:27 - choice and computer choice and it will
332:29 - return the score accordingly meaning
332:32 - here's an example where the human wins
332:33 - aka you win against the computer when
332:36 - you call get result and you pass it rock
332:38 - and scissors so this is the player
332:40 - choice and this is a computer choice so
332:42 - when you give it rock and scissors
332:45 - who wins is it the human or
332:48 - the bot that wins this case the human
332:50 - wins so then it should return a score of
332:52 - one here's an example of a human losing
332:54 - you call the get result function you
332:56 - pass a scissors four player and you pass
332:58 - it rock for the computer
333:00 - and it returns negative one because rock
333:03 - beats scissors and then here's another
333:04 - example of human draws
333:07 - where
333:08 - you pick rock for the human and rock for
333:11 - the computer and the score should be
333:13 - zero okay so those are examples of how
333:15 - to call this function what it should
333:17 - return should return a number
333:19 - and the two arguments that it has okay
333:22 - this function is probably going to be
333:23 - one of the most difficult ones for you
333:25 - to implement and uh here i i have even
333:29 - other notes for you to make it easier so
333:31 - for example when you're implementing
333:33 - this you're gonna need to have you're
333:34 - gonna need to do a lot of if else if
333:36 - else conditions okay because you're
333:38 - gonna need to check if the
333:41 - player picks rock and the computer picks
333:43 - rock then what happens okay
333:46 - so you're gonna need to write the code
333:48 - here it says all situations where human
333:50 - draws set score to zero so in order to
333:53 - write this well this should be pretty
333:55 - easy because
333:56 - when's the only situation it's a draw so
333:59 - you could say if a rock goes against a
334:01 - rock that's a draw if a scissor goes
334:03 - against a scissor that's a draw if a
334:05 - that will take you forever or you could
334:08 - just say hey if player choice and
334:09 - computer joints match that's a draw so
334:12 - you could do it like that all right
334:15 - so that should take care of all of your
334:16 - draw conditions then here are your other
334:19 - conditions so
334:20 - this is where all situations where human
334:22 - wins you should set the score to one so
334:25 - you're going to use a bunch of else if's
334:27 - here and this is a situation where you
334:29 - will define all situations where a human
334:31 - wins so a human will win if
334:34 - human pigs
334:35 - you know
334:36 - rock against scissors a human will win
334:38 - if the human picks scissors against
334:41 - paper a human will win if a human picks
334:44 - paper against rock
334:46 - so those are all the winning conditions
334:48 - go here and then all the losing
334:50 - conditions you can be pretty clever
334:52 - about it and you don't even actually
334:53 - have to define them because you could
334:54 - just say else human loses okay so these
334:57 - comments are there to help you kind of
334:59 - simplify the logic for you a little bit
335:01 - and then just return the score make sure
335:03 - you don't forget to return the score i'm
335:05 - going to toggle this function and close
335:06 - it then you have the show result
335:08 - function okay this function is also
335:10 - going to be a little bit advanced and
335:12 - this one
335:14 - this function here get result is heavy
335:16 - on if else conditions show result is
335:19 - going to be heavy on dom manipulation
335:20 - okay so show result is how you're going
335:22 - to draw on screen and show stuff for
335:24 - example if i go to the solution version
335:27 - when i click here
335:29 - show result is a function that's doing
335:32 - you know human chose rock computer chose
335:34 - paper
335:35 - you lose
335:36 - and then giving a score of negative one
335:38 - and then drawing drawing it out here
335:40 - okay so that's the show result function
335:42 - so get result will calculate who won
335:45 - show result will then output that the
335:48 - human computer choice the human choice
335:50 - the current score all of that stuff onto
335:52 - the screen so show result updates the
335:54 - dom to you win or you lose or it's a
335:57 - draw based on the score also shows
335:58 - player choice versus computer choice
336:01 - okay
336:02 - now
336:04 - here
336:06 - um
336:07 - you can see it takes in three arguments
336:08 - okay the score player choice computer
336:11 - choice so it needs that in three pieces
336:13 - of information and uh hint on a negative
336:15 - on a score of negative one you should do
336:18 - result.inner text you lose why because
336:21 - oops if i go back here i have a div
336:24 - called result right so make sure you get
336:27 - this div by using element
336:30 - document.getelementbyid get this div
336:32 - right store in a variable called result
336:35 - and then you could do result.intertext
336:37 - and change its value to you lose so
336:40 - that's what i said don't forget to grab
336:41 - the div with the result id so this is
336:43 - just a hint on how to like do one of
336:45 - them you're going to need to do multiple
336:47 - divs here then you have on click rock
336:50 - paper scissors so this is where
336:53 - what should happen when the user clicks
336:56 - well right when the user clicks you need
336:58 - to think about what happens so this
336:59 - function should calculate who won and
337:01 - show it on the screen so to give you a
337:03 - hint this function should call upon our
337:06 - get result function and our show result
337:09 - function
337:10 - that's kind of it okay that's what this
337:12 - function will do
337:14 - all right and then we have our play game
337:16 - function this is going to be a really
337:17 - important function
337:19 - the name is a little misleading and i'll
337:21 - kind of explain why
337:22 - but here's what it should do
337:24 - make the rps rps means rock paper
337:26 - scissors so anywhere you see rps it
337:29 - means rocket processors so make the rps
337:31 - buttons actively listen for a click and
337:33 - do something once a click is detected so
337:36 - that's what the function of play game is
337:39 - so all it does is just listening here
337:41 - okay it attaches listeners to these
337:44 - and once you click here it should run
337:47 - this function right there when i click
337:49 - here it should run that function right
337:51 - there and of course we pass in the
337:53 - player choice so
337:55 - if i let's say choose rock
337:58 - yeah
337:58 - and um i click that then it calls on
338:02 - click rps and then it passes in rock as
338:05 - the player choice
338:07 - it and then vice versa if i choose any
338:09 - of these other ones and then on click
338:11 - rps knows what to do so i have all the
338:14 - notes here for you right so you make
338:16 - sure to use query selectors select all
338:18 - rps buttons
338:19 - right and then i have even step by step
338:21 - on how you can do it uh loop through the
338:23 - buttons using a for each loop add a
338:25 - click event listener to each button
338:28 - and uh this is
338:30 - you know um we can say add an on click
338:33 - and this is something that we did
338:34 - already with our color app okay remember
338:37 - we had to add event listeners on click
338:39 - to each update each button's on click
338:42 - properties to basically listen for a
338:44 - click and then call another function so
338:47 - refer to that
338:48 - red green yellow square app that we did
338:50 - okay cool so that's what play game is
338:52 - gonna be and then um you know and then
338:56 - make sure that in there in play game you
338:58 - also add a listener to this button too
339:01 - so basically in play game all you're
339:02 - really doing is you're just updating the
339:04 - on click properties of each of these
339:06 - okay that's kind of kind of what happens
339:08 - there and last
339:11 - end game end game is just gonna be a
339:13 - function that clears all the text on the
339:16 - dom so if i go here and i hit this
339:18 - it just clears all the text so it takes
339:20 - all the values that you had initially
339:22 - set
339:23 - sets them to empty string or empties
339:25 - them out okay so i hope that you know i
339:29 - really believe that you'll be able to do
339:31 - this we've done
339:32 - every single every exercise everything
339:34 - that we've done up until this point
339:36 - preps you for this project there
339:38 - shouldn't be any
339:40 - concepts that are new while putting them
339:42 - together is gonna be harder and then
339:44 - there's gonna be certain things that are
339:45 - for sure going to be challenging so do
339:48 - don't be upset or frustrated if you
339:51 - don't get this honestly i don't expect
339:53 - you to be able to get it you'd have to
339:54 - be really really freaking hyper smart to
339:56 - get this on your first try when i used
339:58 - to do these projects i never got this
340:01 - these types of projects on my own like
340:03 - right away in the start i would give it
340:05 - my best i would come close but it
340:07 - wouldn't be working and then i would
340:08 - actually look at the real code and then
340:10 - i would go ah okay then i would try it
340:12 - again but i would give it an honest try
340:15 - so make sure that you do give it an
340:17 - honest try and try your hardest before
340:19 - you come and look at the solutions and
340:21 - the concepts you know they'll be covered
340:23 - are like for loops dom manipulation
340:25 - variables conditionals template literals
340:27 - event listeners higher order functions
340:29 - and math.random stuff okay so
340:32 - um
340:33 - i think you're going to have a lot of
340:34 - fun with this and really give it a try
340:37 - and then pretty soon we're going to walk
340:39 - through and build this together okay so
340:41 - the next uh step will be us actually
340:44 - walking through the entire solution
340:45 - together but for now you should stop
340:47 - take a break and try to build this
340:48 - together by yourself
340:50 - all right see you soon all right let's
340:53 - go through and code up rock paper
340:56 - scissors together let's go
340:59 - so
340:59 - let's go and do this step by step all
341:02 - right and we're gonna walk through and
341:03 - do every single thing together so this
341:06 - get computer choice function over here
341:08 - remember we made this function that
341:10 - allowed us to get a random item from an
341:12 - array right fruit item we're gonna use
341:15 - very similar logic to that so uh let's
341:18 - go and say
341:19 - and i'm coding this live together with
341:21 - you so if i get stuck in any of these
341:23 - parts it's live
341:24 - yes i've coded it up before but now
341:26 - we're doing it from scratch so we're
341:28 - gonna get so here are the rps choices
341:31 - okay so we have rock we have paper
341:34 - and we have scissors
341:36 - these are the three choices that that
341:39 - are universally available to us right
341:42 - and now i'm going to just say
341:45 - and let's capitalize this r
341:48 - p
341:49 - s
341:50 - okay and now we're gonna say we're gonna
341:53 - randomly select one so random
341:57 - choice
341:58 - okay and then here i'm going to do
342:02 - math.random right and
342:05 - we're gonna multiply that by three just
342:07 - hard code three in there because we only
342:08 - have three choices so this will make
342:10 - sure that it gets the number between
342:12 - zero one
342:13 - zero and three
342:14 - okay
342:15 - and then we're gonna call mata floor on
342:17 - this so remember because math.random is
342:20 - always going to give you some
342:23 - like
342:24 - crazy numbers zero point eight four four
342:26 - four four four something right but when
342:28 - you floor it it'll just
342:30 - remove all the decimal places and then
342:32 - round it down so now this should give us
342:34 - zero one and two perfect that's exactly
342:36 - what we're looking for and then all we
342:37 - wanna do
342:39 - um is
342:41 - let's let's actually call this random
342:43 - number and then we're going to do uh rps
342:47 - choice
342:48 - pass in the random number and then
342:50 - that's it we should just return that
342:52 - okay so return
342:54 - random number so if this function let's
342:56 - see if this function is good to go and
342:58 - if it's working okay so i'm gonna go
343:00 - ahead and call this here we're going to
343:02 - say console.log actually here's even a
343:04 - cooler way of testing this
343:06 - so let's just copy this function right
343:08 - over here copy paste it in
343:10 - hit enter
343:12 - alright so basically what all we've done
343:14 - is we took this function and pasted the
343:16 - definition inside of our console and now
343:18 - let's just call computer choice
343:21 - let's call it again let's call it again
343:23 - let's call it again and you can see that
343:25 - every time it gives us a random choice
343:28 - rock paper scissors everything is random
343:31 - okay
343:32 - so this function is working correctly
343:35 - okay so i think that's great now let's
343:36 - move on to the next function
343:38 - this is going to be a little bit of a
343:40 - harder function
343:41 - right this is the get result and it's
343:43 - going to compute the score so based on
343:44 - the score that we give it it's going to
343:47 - say whether you won or you lost so now
343:49 - what are all the situations where a
343:51 - human draws this one over here is simple
343:55 - we're going to say if player choice is
343:58 - you know equal to computer choice
344:00 - well in that case we're just going to
344:02 - return a score of actually
344:05 - let's have a variable here here called
344:08 - score
344:09 - and we're going to basically just say
344:11 - score equals
344:12 - zero these are all of our draws
344:14 - situation so now all of our drawing
344:16 - situations are handled
344:18 - now we have our else ifs
344:20 - that we're gonna start okay so else if
344:22 - actually let's do it this way
344:26 - uh we're gonna say elsif
344:28 - so now we're gonna have a bunch of
344:29 - elsifs
344:31 - so what are the situations where a human
344:33 - will win so
344:35 - let's pick a situation where a human
344:36 - will win if a human chooses rock
344:39 - then let's pick a situation where a
344:41 - human will win where they pick paper and
344:43 - then let's pick a situation where a
344:45 - human will win if a human picks scissors
344:47 - okay so those are the three different
344:49 - situations so let's give it a try
344:51 - so we're going to say
344:53 - if player choice
344:55 - is
344:56 - rock
344:58 - and
345:00 - and uh make sure to always have
345:02 - everything in title case like this
345:04 - because if you use lower r somewhere for
345:06 - rock and capital r somewhere else your
345:08 - entire app is going to break okay so
345:11 - just be consistent with uh this
345:14 - spelling here everywhere all right let's
345:16 - go here and let's give it a try so
345:19 - computer
345:20 - choice so rock will beat scissors
345:25 - so this is situation one where a human
345:28 - wins now let's try another let's see
345:30 - another situation here
345:31 - okay so i'm gonna copy this
345:34 - and paste this here right
345:36 - so these are now we're making all the
345:38 - situations where a human wins
345:40 - and we're going to set the score to one
345:42 - in this case
345:44 - now we're going to have another elsif so
345:46 - i'm just going to copy this and paste
345:47 - that
345:49 - okay and uh let's also let's actually
345:52 - copy i'm gonna copy
345:54 - this entire thing and paste it again
345:56 - copy this entire thing and paste it
345:57 - again so in the situation of rock and
346:00 - then we need to handle situation of
346:01 - paper and then we need to handle
346:02 - situation of scissors so paper
346:05 - if a human chooses paper well what would
346:08 - the computer need to choose in order for
346:10 - the human to win
346:12 - let's think that think about that right
346:14 - so if i chose paper well paper beats
346:18 - rock
346:20 - so then we're going to pick rock here
346:23 - and then scissors beats paper so we're
346:24 - going to put paper here
346:27 - so now we've defined all of the
346:29 - conditions where a human wins so we're
346:31 - done with that
346:33 - and then the last thing we actually just
346:34 - need to do
346:35 - is define a situation where a human
346:38 - loses so
346:39 - what we need to do here
346:41 - is just say else
346:44 - score is uh negative one
346:47 - okay so now everything else is a
346:49 - situation where it's reversed where the
346:51 - computer wins
346:53 - but we can we can be really smart and
346:56 - cheeky and just say else here okay
346:58 - otherwise you would have to do a bunch
347:00 - of elsifs and then you would have to
347:02 - basically reverse this
347:04 - and put all the choices where computer
347:06 - wins and manually define each one of
347:08 - them but if you do it this way you don't
347:11 - have to define each one of them right
347:13 - and then at the end all we need to do
347:16 - thanks to this note this note is pretty
347:18 - much giving away the exact line of code
347:19 - you need to write
347:21 - make sure to return the score
347:24 - okay
347:25 - return the score now let's take this
347:27 - function and see if we can copy this and
347:29 - let's see if we can paste this function
347:31 - in the
347:32 - command line we pasted it and let's call
347:35 - our function get result
347:37 - and i'm going to give it a player choice
347:40 - of rock and then the computer will be
347:42 - scissors and let's see what happens
347:44 - and we get one is that true does rock
347:46 - beat scissors yes it does so we get back
347:48 - one what happens if both are rock
347:52 - zero so that's perfect
347:55 - let's try let's try all these test cases
347:57 - right to rock scissors
347:59 - we tried rock rock now let's try
348:01 - scissors rock and we should lose
348:06 - scissors
348:07 - comma
348:08 - rock put make sure to put those quotes
348:10 - and let's run it
348:11 - and indeed we do lose so all of these
348:15 - test cases that we have written here
348:17 - right check out what we have written out
348:19 - here
348:20 - so this function is gucci this function
348:23 - is doing what it's supposed to be doing
348:25 - so we're good on the get result function
348:28 - okay so i think
348:29 - we're good with that so we finished get
348:31 - computer choice
348:33 - we finished get result okay now let's go
348:36 - through some of our
348:38 - other functions that we're going to be
348:41 - doing as well so let's let's go to our
348:44 - next function show result
348:47 - well before we do this
348:49 - before we just like do show result kind
348:52 - of in one go
348:54 - let's just attach our listeners first
348:56 - because that's going to be the most
348:58 - important thing because if if i was
348:59 - making this app the first thing i would
349:01 - do is add listeners because if i don't
349:02 - add listeners
349:04 - i'm never going to be able to see really
349:05 - anything happen
349:07 - so let's go ahead and add listeners so
349:08 - loop through the buttons using a for
349:10 - each loop okay so let's do that but
349:12 - first what i need to do use query
349:14 - selector to select all rps buttons
349:16 - so let's do it
349:18 - rps buttons i'm going to set document
349:21 - dot
349:23 - query
349:24 - selector all
349:26 - and we're going to pass it
349:28 - rps buttons let's go to our html file
349:33 - and if you see here we have rps button
349:36 - class right class rps button class rps
349:38 - button so it's not plural it's singular
349:41 - and let's just see if we can actually
349:44 - console log this out so let's go ahead
349:46 - and console log rps button
349:50 - okay
349:51 - and uh here we we are calling the play
349:53 - game function so if i hit run everything
349:56 - should run
349:58 - and there we go we're seeing that we're
349:59 - getting three html button elements which
350:02 - is exactly what we expected
350:04 - right
350:05 - and now you can either manually attach a
350:08 - listener to each one of them so you
350:09 - could do rps buttons
350:12 - you know zero
350:13 - dot on click and we could say
350:17 - um you know just
350:20 - console log the
350:23 - uh the value we could do that
350:27 - rps button
350:28 - zero right and then you can just do dot
350:31 - value so this is like this would be a
350:33 - way of hard coding it but that's not
350:34 - what we want to do so when we click rock
350:36 - it does detect that we're clicking rock
350:38 - when i click paper it doesn't work when
350:40 - i click scissors nothing works right so
350:42 - let's go ahead and now do what the
350:44 - instructions say here so it says use a
350:46 - loop to
350:48 - go through them so i'm going to say rps
350:50 - buttons dot
350:51 - for each so that will allow me to loop
350:53 - and for each button
350:56 - okay rps button
351:00 - i'm going to do something so for each
351:02 - rps button we're going to add an event
351:05 - listener so let's go ahead and do that
351:06 - now
351:09 - for each button
351:10 - on click
351:12 - we're basically going to say hey every
351:14 - time i click you
351:16 - i want you to call the on click rps
351:19 - function
351:21 - okay
351:22 - and then step four is make sure to pass
351:23 - the currently selected rps button as an
351:25 - argument
351:27 - okay
351:28 - so or the currently selected
351:30 - so basically if i click this
351:33 - then i need to pass this to on click rps
351:36 - okay so let's go ahead and do that
351:39 - so i'm going to basically pass it the
351:40 - value of that so we're going to say rps
351:42 - button dot value so loop through the
351:45 - buttons
351:46 - go through them and then for each button
351:49 - give it this function
351:52 - okay
351:53 - and now if i hit so if i hit run here
351:55 - and i click nothing is going to happen
351:57 - right now but let's go to our on click
352:00 - function and here i'm just going to say
352:01 - console.log
352:03 - and we're just going to say console.log
352:05 - playerchoice
352:08 - so let's hit run
352:10 - let's hit
352:11 - and now you can see every time i click
352:13 - rock it prints it out
352:15 - when i click paper it prints it out when
352:17 - i click scissors it prints it out as
352:20 - well so now the rps button f loop is
352:25 - doing what i wanted to do
352:27 - and i'm going to just remove all of
352:29 - these notes because i don't need them
352:30 - anymore
352:31 - because we just essentially did all of
352:34 - this that it was asking
352:37 - okay
352:38 - and um
352:39 - yeah so play game button is done
352:42 - on click is detecting the click so that
352:45 - is good now what i can do with the on
352:47 - click
352:48 - is
352:49 - we have the computer choice already
352:51 - ready to go
352:52 - right and we already have the get
352:54 - results function so we can pretty much
352:56 - play rock paper scissors at least in the
352:57 - command line like we're we're pretty
352:59 - much done with rock paper scissors here
353:01 - so
353:02 - i'm gonna basically say con let's get
353:05 - computer choice
353:06 - get comp choice
353:09 - or
353:10 - computer
353:12 - choice and we're gonna call that
353:14 - computer choice function so let's try it
353:17 - get computer
353:19 - choice
353:20 - and let's just console.log our computer
353:23 - choice
353:24 - okay
353:25 - so now we should have and uh what we'll
353:28 - do is
353:29 - put it as an object so then it'll tell
353:31 - us like what's the computer choice and
353:33 - what's the player choice let's run this
353:35 - and click and you can see player choice
353:37 - is rock and computer choice is scissors
353:39 - i'll click again
353:41 - this time player choices rock computer
353:43 - choice is paper i'll click here
353:47 - i click this one right now so it says
353:49 - our choice was paper computer choice was
353:51 - rock so our get computer choice function
353:55 - is working correctly that's really good
353:58 - okay
353:59 - well
354:00 - now since we have player choice and
354:02 - computer choice guess what we don't even
354:05 - need to see how this get result function
354:07 - works
354:08 - we just need to call it now baby and
354:10 - have it return the score that's it
354:13 - so
354:14 - let's go and do con score and we're
354:16 - going to just say get result
354:19 - and we're going to pass it the player
354:20 - choice
354:21 - but make sure you pass it in the right
354:23 - order and we're going to pass it the
354:24 - computer choice
354:27 - all right
354:28 - and then we're just gonna console log
354:31 - the score here
354:33 - okay and uh
354:35 - make sure to just put it as an object so
354:37 - it just looks nice let's hit run boom
354:39 - look at that player choices rock
354:41 - computer choices paper and the score is
354:43 - negative one meaning we lost right
354:45 - because paper beats rock
354:47 - let's run it again we chose paper
354:50 - computer chose rock paper beats rock so
354:52 - we won this time let's choose scissors
354:55 - and we lost because we chose scissors
354:58 - and the computer chose rock and we lost
355:00 - let's try scissors again and we won
355:02 - because we chose scissors the computer
355:04 - chose paper and the score is positive
355:07 - one
355:08 - meaning that we won
355:10 - okay fantastic so guys the whole
355:14 - thing is working you guys this is really
355:16 - really exciting now the only things that
355:19 - are left are we need to keep track of
355:22 - the overall score of the game so every
355:24 - time the score updates we need to
355:27 - actually keep track of that score and
355:28 - increment it
355:30 - now what we could do is we could
355:31 - actually create a object to actually
355:34 - keep track of both of those scores and
355:36 - we could put that object all the way at
355:38 - the top why are we putting it all the
355:39 - way at the top
355:40 - so every single function can have access
355:44 - to it because it's like a database okay
355:46 - so
355:47 - it will have all our scores we'll say
355:49 - const
355:51 - scores okay and then this will have
355:55 - a computer score
355:57 - okay and it'll start off with zero and
355:59 - then it'll have player score and that
356:01 - will start off with zero let's give it a
356:03 - more descriptive name and let's call it
356:05 - total score
356:07 - okay
356:07 - so this will be the total and we will
356:10 - update it depending on you know whether
356:13 - the computer wins or the player wins
356:16 - right or the human wins
356:19 - and where will we do this well what we
356:21 - can actually do is we can do this inside
356:23 - of our get result function
356:26 - okay
356:27 - so we can actually update this object
356:29 - right over here directly
356:32 - so inside of our uh get result function
356:36 - you could pass it
356:38 - the total score
356:40 - right and then we could actually do that
356:42 - update that so i'm gonna give it i'm
356:44 - gonna say total score
356:46 - let's pass it in
356:52 - i changed my mind let's not do it in
356:53 - there because this function is very pure
356:56 - let's not pollute it
356:58 - with other
356:59 - things and this happens very commonly
357:00 - you know as a developer you go back and
357:02 - forth a lot because it's normal to kind
357:04 - of go back and forth and then decide you
357:06 - know what i'm going to keep my leave my
357:08 - code clean because then otherwise this
357:09 - function is going to have too many
357:10 - dependencies and it's going to be kind
357:12 - of annoying so let's leave that as is
357:14 - we're gonna update this total score
357:17 - after we get it right so let's say that
357:20 - uh i i on click i get the computer
357:23 - choice i get the score
357:26 - well then i update the score based off
357:28 - of that
357:29 - okay so
357:31 - i'm gonna basically go and say
357:33 - get the total score
357:36 - and we're gonna grab the
357:39 - uh we're gonna grab the player
357:42 - score and we're going to increment it by
357:46 - whatever score
357:48 - whatever whatever we get as a score okay
357:51 - so this way for now we'll just keep
357:53 - track of the player score you don't
357:55 - really need to keep track of the
357:56 - computer score
357:58 - i will leave that to you to implement as
358:01 - a
358:02 - challenge okay but for now
358:05 - we'll just keep track of the player
358:07 - score and increment the player score
358:10 - okay
358:11 - and then let's console log
358:13 - total score
358:14 - and now let's play this game
358:17 - so rock
358:18 - so player score is negative one let's
358:20 - play rock again so now this time we won
358:23 - right so last game we lost the player
358:26 - score became negative one
358:27 - this game we won all right now all
358:30 - that's left to do
358:32 - is updating the dom to actually show you
358:34 - one or you lost or you drew
358:37 - so let's go to our show result function
358:39 - this is where we're going to be doing
358:40 - dom manipulation right
358:42 - is we have a couple of different
358:44 - scenarios we have a scenario where
358:47 - we could say we lost right so
358:52 - if
358:53 - score
358:55 - is
358:56 - negative one
359:00 - then do something
359:02 - else if
359:03 - score is
359:05 - zero
359:07 - then do something right
359:09 - else if
359:10 - score
359:11 - is 1
359:13 - or we could just say else
359:16 - do something right so in this case
359:20 - if we
359:21 - want then what we want to say is
359:23 - you or sorry you lose
359:26 - okay in this situation we would want to
359:29 - say you drew
359:31 - or
359:33 - it's a tie or something right so let's
359:35 - put double quotes and now we'll say it's
359:37 - a tie
359:40 - and here we can say
359:44 - u
359:45 - 1.
359:47 - now we need to do something with these
359:49 - strings because right now we're not
359:50 - telling the computer to do anything
359:52 - right so we're going to create
359:55 - uh we're going to get the divs so let's
359:57 - get the resultive
360:00 - and this is going to be we're going to
360:02 - get this by doing
360:05 - document dot get element by id
360:08 - [Music]
360:10 - and i believe the id is called result
360:12 - let's go take a look and we have result
360:14 - here
360:15 - okay we have result
360:17 - we have player hands and then we have
360:19 - player score
360:21 - okay hands and then player score
360:25 - okay let's go back
360:31 - hands div is going to be
360:33 - document.getelementbyid
360:35 - and we're going to do hands and i
360:38 - believe
360:39 - this div player score we're also going
360:41 - to need that so let's go const
360:45 - player score div
360:48 - document i get element
360:51 - id
360:53 - player score okay just like that in the
360:56 - in a case where we lose right what we
360:59 - actually want to do is we want to say
361:00 - result div dot inner
361:03 - text
361:04 - i want to set that to you lose
361:07 - and then we're going to do the same
361:08 - thing here and the same thing here
361:12 - okay
361:13 - so let's see
361:15 - what happens
361:17 - now let's give it a try so i'll run this
361:21 - we win
361:23 - and i'm not seeing anything yet so let's
361:25 - go and debug what the problem is so
361:28 - resultive let's make sure that this
361:30 - result div is
361:31 - the actual div that we want so i'm going
361:33 - to console.log or
361:35 - actually we i don't think we're calling
361:37 - the function show result anywhere
361:41 - so let's go ahead and work on that now
361:44 - so remember
361:46 - on click rps what it should do is
361:47 - calculate who won and show it on screen
361:50 - right so
361:51 - line 74 calculates who won
361:54 - right then we update the leader the
361:56 - total score
361:59 - and then we want to show on the screen
362:01 - who won so let's go ahead and do that
362:04 - now
362:05 - i'll do it at the bottom here
362:07 - and we'll call our show result function
362:10 - and it has a couple of arguments and you
362:12 - can see it's telling us it has the
362:13 - argument of
362:18 - score
362:20 - what other arguments do we have let's go
362:22 - check let's go check player choice and
362:25 - computer choice
362:27 - so we're going to give it the player
362:28 - choice
362:30 - and then we're going to give it the
362:31 - computer choice
362:36 - there we go player choice computer
362:38 - choice
362:41 - okay
362:42 - that's um
362:43 - [Music]
362:44 - that's effectively it that's all what we
362:46 - need to do here so let's give it a try
362:47 - now run it
362:49 - boom and it says you lose and it that's
362:52 - is that true that we lost right we got a
362:54 - score of negative one let's try again
362:56 - you won
362:57 - and now look it says
362:59 - um the score is one so i win and then
363:02 - the total overall game score right the
363:04 - total score it says is zero player score
363:08 - is zero now because we won
363:10 - and now it's a tie so everything remains
363:12 - zero zero zero let's run again i lost it
363:15 - goes back down to negative one
363:19 - all right now one a bunch of times
363:25 - dang my score is just getting worse and
363:26 - worse
363:27 - okay all good so our score is
363:30 - working the way that we want it to work
363:32 - right
363:34 - so what we want to do next
363:37 - is at the end we also want to update the
363:40 - scores
363:43 - okay
363:44 - so let's go ahead and do that so let's
363:46 - update the score div now so or actually
363:48 - let's do hands first because that's
363:50 - really important
363:52 - so we're going to say hands div
363:56 - dot inner
363:57 - text
364:00 - right and it's whatever the choices are
364:02 - that the player choice and computer
364:04 - choice so i'm going to say
364:06 - player choice
364:08 - versus
364:12 - computer choice
364:15 - okay let's run this and let's see what
364:17 - happens rock versus scissors
364:19 - paper versus rock
364:21 - scissors versus rock
364:23 - okay so that's working but it's not
364:25 - really easy to tell which one is the
364:26 - human choice and which one is a bot
364:28 - choice what i'm going to do is i'm just
364:29 - going to put an emoji here and an emoji
364:31 - there
364:32 - so here i'm just going to make a person
364:35 - emoji
364:36 - and then for this i'm just going to make
364:38 - a
364:40 - robot emoji
364:41 - let's run
364:42 - this now when i click you can see that
364:45 - it shows a robot emoji a human emoji and
364:47 - a robot emoji
364:50 - right
364:51 - and then all we need to do is just make
364:53 - sure that the score
364:55 - shows up
364:57 - like
364:58 - here right score score should show up
365:01 - there
365:02 - so let's go ahead and do that now
365:04 - and i'm gonna
365:05 - [Music]
365:07 - access the player
365:09 - score
365:10 - div and grab its inner text
365:16 - right and then we're just gonna get the
365:19 - total score
365:24 - and we're gonna set that total score
365:26 - to
365:31 - yeah that's actually it i don't even
365:33 - think we have to do anything the total
365:35 - score should just be this and we should
365:37 - be good so let's run this now this
365:41 - so it's bringing the total score as an
365:43 - object because it is an object so we
365:44 - actually just want the player choice
365:47 - score so player score
365:50 - let's run it
365:51 - oops undefined so why is that undefined
365:55 - let's see player ah player score not
365:57 - player choice
365:59 - run
366:01 - boom negative one boom negative two
366:06 - right if you want to make this
366:09 - fancier or whatever you could put this
366:12 - inside of template literals and you
366:13 - could say your score or something
366:16 - something along those lines if you
366:17 - wanted to right you could say your score
366:20 - say one two zero one
366:24 - whatever
366:25 - and there you go
366:26 - now let's open this up in a
366:28 - full tab
366:31 - right and let's take a look at this
366:32 - let's play this game
366:34 - click rock versus rocket to tie click
366:38 - again rock versus scissors you won
366:41 - rock versus rock it's a tie
366:43 - i picked rock computer picked paper i
366:46 - lost right and my score is being updated
366:48 - automatically let's just play a ton of
366:50 - games and let's see what happens
366:52 - all right we're getting on a
366:53 - oh we lost a lot of games there
366:58 - right so there we go so the computer is
367:00 - doing a good job and uh but but we beat
367:03 - the computer right that's what matters
367:05 - we want at the end
367:08 - so let's go back
367:09 - and now if i hit the red nothing happens
367:12 - so we just have to make the red button
367:14 - work
367:15 - so first
367:17 - let's do the following so we're going to
367:19 - say
367:21 - const
367:23 - end game button
367:25 - and we're going to say
367:26 - document.getelementbyid
367:30 - and i think it's end game button if i'm
367:32 - not mistaken so let's go back
367:34 - let's look
367:35 - and i have a button i gave it id of
367:37 - endgame button so let's go back here and
367:39 - we're going to say endgame button just
367:41 - like this
367:43 - all right and we just need to
367:45 - connect it so we gotta go
367:48 - [Music]
367:50 - endgame button
367:52 - dot on click
367:54 - and on click we just wanna run our end
367:57 - game function that's it
368:00 - okay and in our endgame function what
368:02 - needs to happen is it should just clear
368:04 - all the score so in our endgame function
368:06 - we're gonna grab our total score
368:10 - okay let's actually pass a total score
368:13 - total score right here
368:15 - that's just to signify that we're
368:17 - passing it the total score okay so we're
368:19 - signifying that we're passing this
368:20 - that's why we're making a dependency
368:23 - and we're getting the total score
368:25 - because the global variable that the
368:27 - whole our entire app has access to this
368:29 - total score
368:31 - okay
368:32 - so this function is going to take total
368:33 - score
368:34 - and it's going to set the total score of
368:38 - the player score
368:43 - to zero
368:45 - and then we're also going to set the
368:46 - computer score to zero here
368:52 - and we're also going to just erase
368:55 - everything that we see on the dom
368:57 - okay so let's go ahead and grab our
369:01 - all of our divs i'm going to copy them
369:02 - from here
369:04 - i'm going to paste these divs here
369:07 - and then we're gonna grab their inner
369:10 - text and set it to
369:15 - empty
369:16 - right and then we're gonna do that for
369:18 - both of the other divs so paste paste
369:22 - double click copy double click paste
369:24 - double click copy double click paste
369:27 - and that should make everything empty so
369:29 - i think this should be good for the
369:31 - endgame function so let's go ahead and
369:33 - try this run it
369:35 - play play play play hit the red button
369:37 - and everything clears up run run run run
369:39 - hit end
369:42 - and you can see that everything is
369:44 - working
369:47 - okay
369:49 - perfect so there you go this is your
369:52 - entire app right let's go and try it
369:55 - the entire app is working hit the red
369:57 - button it stops starts again
370:01 - okay so the challenge for you is see if
370:03 - you could add
370:04 - player score
370:06 - player score and then computer score
370:09 - and see if you can see if both of those
370:11 - get updated as you play the game
370:14 - right that would probably be the best
370:16 - version of this app if you can make that
370:18 - work that'd be really nice
370:22 - and with that said we're essentially
370:23 - done with this so all you got to do now
370:25 - is try copying all of the code here so
370:28 - command a command c or ctrl a and ctrl c
370:32 - go back to the exercises that you know
370:35 - the
370:36 - where you were working on this
370:37 - javascript course rebel so go back to
370:39 - that
370:40 - and then go to this exercise
370:42 - folder go to script.js right
370:45 - and see what happens if you paste your
370:48 - entire code over this
370:50 - so if you paste your code over this
370:52 - and you hit run
370:54 - and you go to
370:56 - rock paper scissors project exercises
370:59 - your game should run
371:04 - just like that i'm going to command z
371:06 - and undo all of this
371:10 - all right
371:11 - there we go
371:14 - so you should be able to paste it in
371:15 - here and i recommend that you do so then
371:17 - you have this
371:19 - fully working
371:21 - okay and then if you want to delete all
371:23 - the comments you can from this to kind
371:25 - of make it make it a lot cleaner
371:28 - but
371:29 - at this point right the whole thing is
371:32 - you you've done pretty much the whole
371:33 - thing i'm going to remove all these
371:34 - console logs
371:36 - from here just so you could see this in
371:38 - an easy
371:39 - easy to see way
371:42 - like this on click function you'll
371:44 - realize is the main function right it's
371:47 - the entire
371:48 - kind of game logic that happens
371:51 - that happens here
371:53 - and um
371:56 - we get the computer choice
371:59 - we already have the player choice
372:02 - we compute the result based on player
372:04 - choice and computer choice
372:06 - we update the scoreboard
372:10 - and then we show that score
372:12 - on the screen
372:15 - so this is like the main logic of the
372:17 - game right this is where your main main
372:19 - main logic is happening
372:22 - so i hope that this totally made sense
372:24 - you understood every single step by step
372:27 - parts of this
372:29 - and this was a lot of fun for me to show
372:31 - you i hope it was fun for you to
372:33 - actually learn this and you enjoyed it
372:35 - but that said i love your beautiful face
372:37 - and i'll see you
372:39 - shortly
372:40 - time to learn apis or how to get
372:43 - pictures of random dogs every single
372:45 - time i'll refresh refresh again refresh
372:49 - again and different dog different times
372:52 - do you want to make this well guess what
372:54 - you're going to need to learn how apis
372:56 - work and don't worry we're going to keep
372:58 - it bare bones very simple easy to get
373:00 - started so
373:02 - that way you could learn and not be
373:04 - confused on
373:06 - what is going on
373:07 - now in order to learn about this let's
373:09 - go ahead and code this up together from
373:11 - scratch so hit command t and let's go to
373:13 - replic.com all right so this is a
373:16 - platform where you can code super easily
373:18 - right if you've been coding along thus
373:19 - far just choose html css javascript and
373:22 - the app will be up and running right
373:24 - away okay let's go ahead and do that and
373:26 - for the name we're just gonna say dog
373:29 - api playground okay this is just for fun
373:31 - and we're just gonna test this out okay
373:34 - now
373:35 - it's going to give me a random
373:36 - index.html file a script file and style
373:39 - and script is already connected with
373:41 - index for example if i do console.log
373:44 - and i say hello it's going to show that
373:47 - hello right there all we're going to do
373:49 - here is let's add in a random div i'm
373:51 - just going to say div and we're going to
373:53 - say id for id maybe i'm just going to
373:56 - say
373:57 - dog image or something like that and
374:00 - then we're going to give it an inner
374:01 - html of image like this okay you'll see
374:04 - why this is important because we're
374:06 - going to manipulate this from our script
374:08 - file okay so let's go grab dog image now
374:13 - let's just play with
374:15 - the
374:16 - apis first okay so the url that we're
374:18 - gonna need for this
374:20 - is this one right over here okay
374:22 - https colon slash slash dog dot ceo
374:26 - slash api slash breed slash image slash
374:29 - random now
374:31 - for you what i'm gonna do is i'm gonna
374:33 - go ahead and add this to the playground
374:37 - so you'll have access to this okay so
374:39 - i'm gonna create uh api section over
374:42 - here okay we're gonna say apis
374:45 - so if you're watching this javascript
374:46 - tutorial you'll be able to
374:49 - get access to this url okay so this is
374:51 - for the dog api right i'll just say dog
374:54 - api cool so you can go ahead inside of
374:57 - here and and copy this okay let's go to
374:59 - our brand new repo that we had created
375:02 - and in here we're just gonna
375:05 - get access to this okay so what do i
375:08 - want to do i want to
375:10 - fetch this so we're simply just gonna
375:12 - say fetch and we're gonna pop in that
375:14 - url that we got so copy this url paste
375:17 - it in here now there are certain new
375:20 - concepts that i'm gonna teach you but
375:21 - let's just go one step at a time okay
375:23 - right now i kind of want you to just
375:25 - follow along with me and we'll code this
375:28 - up and then worry about what it actually
375:30 - does in just a second so i'm going to
375:31 - say dot then all right and this dot i'll
375:34 - put it here dot then but this is the
375:37 - same as if you wrote it all on the same
375:39 - line by the way so eight being on line
375:42 - five here or here is actually the same
375:44 - thing but it's just that i don't want
375:46 - this long to run in line to run
375:48 - infinitely long so i'm just going to hit
375:50 - enter here so it breaks it off into
375:52 - separate lines now we're going to get
375:54 - back a response and i'm going to say hey
375:56 - return to a response.json i know this is
375:58 - confusing right now but we'll walk
376:00 - through it in a second and then
376:02 - i'm going to say
376:04 - hey get me that json okay and i'm just
376:07 - going to have you
376:08 - console.log.json all right so let's run
376:11 - this and let's see what happens if
376:13 - anything at all and would you look at
376:16 - that what my code is doing is going to
376:18 - this api meaning there you know what is
376:21 - an api there's some data somewhere in
376:23 - the cloud somebody else is hosting it
376:25 - and we're going grabbing access to it
376:27 - and bringing into our app this way we
376:29 - can be lazy and we don't need our own
376:30 - database and we don't need to figure out
376:32 - how to get random dog images this
376:35 - as long as you have access this link or
376:37 - this api it will automatically get you a
376:39 - different dog image every single time so
376:41 - now i'm gonna and you know there's
376:43 - examples of lots of different uh apps
376:46 - that you know you could use your api so
376:47 - you could use a movie api and then also
376:49 - you can have you could build like a
376:50 - movie app without needing you know
376:53 - every single movie which has millions of
376:56 - them right you don't need access to them
376:58 - you can actually
376:59 - get access to them through a database
377:02 - that allows you to do that
377:04 - all right so right now i am actually
377:07 - getting a random dog image every single
377:10 - time over here okay i work console
377:12 - logging it out so let's go ahead and
377:14 - copy it to prove it i'm gonna hit
377:16 - command t command v and i'm gonna paste
377:18 - it in the browser and you can see that i
377:20 - actually got a real real image right
377:23 - it's a cute puppy
377:24 - i have an english bulldog as well so
377:27 - you know it's kind of cute i like dogs
377:29 - so here
377:31 - i'm fetching this data and then once you
377:33 - fetch it you have to do something to it
377:35 - right away so this is where this dot
377:38 - then thing comes in so whenever you see
377:40 - this dot then thing this is talking
377:43 - about promises
377:45 - okay so promises is this like
377:47 - weird confusing concept in javascript
377:50 - because this
377:52 - leads you into asynchronous programming
377:55 - and all that basically means is up until
377:58 - now you were writing you know uh regular
378:01 - scripts you had this like list of
378:04 - instructions that you would have the
378:05 - computer do like you would say hey
378:07 - you know run this for loop then go to
378:09 - this array and grab this then do this
378:11 - with that array then filter that johnny
378:13 - depp net worth and show me that
378:15 - different actors that was
378:17 - like synchronous code meaning it runs
378:20 - line by line when you're dealing with
378:22 - getting data from somewhere else like
378:24 - from a third party website all of a
378:26 - sudden your code isn't synchronous
378:28 - anymore meaning that your code doesn't
378:30 - learn
378:31 - run linearly anymore so here is an
378:33 - example of this okay let me see if i
378:35 - need to zoom in more that's good for now
378:37 - so i'm going to go ahead i'm going to
378:39 - say console.log say yo
378:42 - and i'm going to paste that right
378:43 - underneath this
378:44 - and we're gonna run this
378:46 - and you can see that this did not run
378:49 - linearly right so
378:52 - here let's prove this right so i'm gonna
378:54 - delete that hello at the top
378:56 - so run
378:59 - first
379:00 - and then this should run
379:02 - third right because what should happen
379:04 - is
379:05 - and you would imagine that this console
379:07 - log here would run seconds i'm just
379:09 - going to say comma or actually let's do
379:12 - it here and i'm just gonna say run
379:14 - second all right so what should happen
379:17 - is this console log should run first
379:19 - this over here should run this console
379:21 - long should run second and then this
379:23 - console log should run third but when i
379:25 - hit run watch what happens right run
379:28 - first and run third ran first and then
379:32 - run second showed up
379:34 - so what is happening well we make a
379:37 - request to this url so that's the same
379:39 - as if i com pasted this right you saw
379:41 - how this takes a second to actually show
379:43 - you
379:44 - a new dog image link right it takes a
379:47 - few seconds one two one two
379:50 - one two one two so it takes about one to
379:53 - two seconds whereas this code right here
379:56 - runs almost instantly okay so what
379:59 - javascript decides to do is it says hey
380:01 - i'm gonna run everything that i already
380:04 - know so it already knows this it runs it
380:07 - it already knows this it runs it but
380:09 - this information over here right this
380:12 - takes maybe two seconds so let's write
380:14 - two seconds right here that takes two
380:16 - seconds
380:17 - once that takes two seconds and gets
380:19 - resolved right this returns to us as a
380:23 - javascript promise so
380:25 - we just get back we're like okay we got
380:28 - the data back
380:29 - these dot dens what they do is we go
380:31 - okay once we get that data back
380:34 - then i want to turn that data into json
380:37 - okay so we'll talk about what json
380:39 - actually means so that's this is step
380:42 - one right and then what we do with this
380:45 - is we console log that json so this is
380:48 - step two and i know this is really weird
380:50 - notation but just.dense but you'll get
380:52 - used to it after some point when you
380:54 - start learning more and more about like
380:55 - apis and asynchronous programming or for
380:58 - now just like kind of memorize it that
381:00 - whenever you have to do fetch you do
381:02 - these two dot dens every single time and
381:05 - you pretty much can copy paste this
381:06 - exact type of code um every single time
381:09 - you do a api request okay that's what's
381:12 - happening okay and these are functions
381:14 - so i'm just basically saying hey dot
381:15 - then you know grab the response and turn
381:18 - it into a json and what json does is
381:21 - json turns the data essentially to this
381:23 - object type of format that you see here
381:26 - right so you have message and then you
381:27 - have the url
381:30 - and then there's another key so we have
381:32 - one key with the message which is the
381:34 - actual image for the dog and then we
381:36 - have another key which is status which
381:38 - tells you whether it was successful or
381:40 - not and then that object ends right so
381:42 - that json is really just an object with
381:45 - two keys inside of it message and status
381:49 - that's what this is
381:51 - you know getting back and then once we
381:53 - get that back we go ahead and console
381:55 - log it out
381:57 - this dot then
381:58 - runs whenever this promise here resolves
382:02 - okay now watch what happens if i let's
382:04 - say
382:06 - cut this right i'd remove those lines
382:07 - and i just say console.log and we run
382:10 - this
382:11 - let's run this and you notice it just
382:13 - says promise what the heck is that right
382:16 - i can't really do anything with the
382:17 - promise promise is a really weird thing
382:20 - but when i bring that back
382:22 - now something happens
382:24 - so whenever you're dealing with promises
382:27 - if you just call this it's going to give
382:29 - you a promise but you have to do a dot
382:31 - then
382:32 - and this other dot then these two dot
382:34 - dents chained together to pull that data
382:37 - out
382:38 - after your code runs and waits for two
382:40 - seconds so this is an example of like
382:43 - asynchronous programming and it's a
382:45 - complicated way of just saying like
382:47 - stuff you have to wait for
382:49 - this over here is stuff you don't have
382:52 - to wait for
382:53 - right this is literally that's literally
382:55 - all that means okay stuff you gotta wait
382:58 - stuff you don't have to wait for stuff
383:00 - you have to wait for and when you have
383:02 - stuff you have to wait for
383:03 - you have to do these dot dents
383:05 - that's when you use them okay and then
383:07 - they just call them these like fancy
383:10 - names that confuse you like promises
383:11 - asynchronous programming in your head
383:14 - honestly between you and i don't use
383:15 - those words okay in your in your head
383:17 - just like
383:18 - use simpler words so you can understand
383:20 - it but like learn these words because
383:22 - they're going to be helpful for you when
383:24 - you're googling things right how do
383:25 - promises work how how do you do
383:27 - asynchronous programming with javascript
383:29 - but like for yourself just go
383:31 - is this stuff do i need to wait for
383:33 - is this like a url or a database thing
383:35 - that i'm doing yes i probably need to
383:38 - wait a few seconds to get that data yes
383:41 - okay then i just know that i'm going to
383:42 - need to do dense google how to call how
383:45 - to do a fetch api request google
383:48 - how do i deal with promises google how
383:51 - to get a json file from a promise
383:54 - right so that's where your google skills
383:55 - come in and stack overflow you go
383:58 - there and you get the information that
384:00 - you actually need
384:02 - all right so hopefully
384:04 - this part over here makes sense to you
384:06 - and we're retrieving the data now we
384:09 - want to take this
384:10 - further okay so what we want to do now
384:13 - is
384:13 - we want to do this
384:15 - right and then we want to actually
384:17 - update our
384:19 - we want to update our um
384:21 - this right over here okay we want to we
384:24 - want to update this right over here and
384:26 - we want to like put the dog image here
384:28 - so the new dog image that we're getting
384:30 - all right so let's do this once we get
384:31 - that json back right here then what we
384:34 - can do is
384:36 - once we get it back then we go ahead and
384:38 - update
384:39 - this dom right over here right and put
384:41 - the dog image
384:42 - so let's go ahead and do that now so i'm
384:44 - gonna i'm gonna remove this console log
384:47 - here and we're going to go right there
384:49 - i'm just going to say console.log
384:51 - json
384:52 - right and let's run this
384:54 - and this is the json that i'm getting
384:56 - and i can see that this json is just an
384:58 - object so if i actually did
385:00 - json.message i should get
385:03 - the contents of that message so i should
385:04 - get this url right over here
385:07 - all right so let's go ahead and try that
385:09 - so i'm going to say json message and you
385:11 - can see that i'm getting that that like
385:13 - specific url that we need yeah all right
385:16 - now that i know i'm pulling this data
385:17 - all i have to do is just update
385:20 - this dog image div and change its inner
385:23 - html to a different image okay so let's
385:26 - go ahead and get access to this i'm
385:28 - going to go back
385:29 - boom
385:30 - and i'm just going to say
385:33 - you know const
385:35 - get or dog image
385:38 - and it's going to say
385:40 - document.getelementbyid and i'm going to
385:42 - pass in this id
385:44 - right and then all we're going to do
385:46 - here is dot inner html
385:49 - and let's do template literals here and
385:51 - i'm going to say image
385:53 - set set the source for the image
385:55 - and the source for the image is going to
385:59 - be
386:00 - json.message
386:02 - all right and then we'll just end this
386:04 - image tag right there
386:06 - so this should do the trick let's try it
386:08 - i have a broken image so interesting
386:10 - what's happening here i need to put
386:12 - quotes around this let's give that a try
386:15 - okay
386:16 - boom there you go so now you can see our
386:19 - dog images oh that's a cute dog look at
386:21 - that
386:22 - and i i have a i love pomeranians i just
386:25 - think they're so cute oh that is cute
386:28 - look at these guys
386:30 - just playing
386:31 - run right every single time you run it
386:33 - you should now just be getting a new dog
386:35 - image right so
386:36 - this is working
386:38 - now their sizes are kind of different
386:40 - and a little bit all over the place so
386:42 - in order to make sure that we have a
386:44 - size that we actually like what we can
386:46 - just say is i can pass the
386:48 - uh height
386:50 - and width properties okay so we can say
386:52 - height is 100 and width is 100 let's try
386:56 - running it now
386:58 - and you'll see that we'll always get an
386:59 - image of this exact size every single
387:01 - time
387:02 - but maybe we can make it 300
387:06 - and 300
387:07 - that way it'll be big but it won't like
387:09 - completely blow out a proportion right
387:11 - so there we go so 300 by 300 is not a
387:14 - bad one
387:15 - as you could do that okay so this is
387:18 - just like a really bare-bones starting
387:21 - example of apis and like that quickly
387:25 - you have a up and running app
387:27 - you know this is nice like if you had to
387:29 - do this by yourself you know how much
387:31 - work that would take you would have to
387:32 - collect infinite dog photos manually
387:35 - you'll have to download all of them then
387:37 - you'll need like a file with like
387:40 - hundreds of dog photos and then your
387:42 - code would need to like go through that
387:44 - file manually and like randomly select
387:47 - the dog and then show that dog and you
387:49 - have to keep that dog thing updated and
387:51 - it's like
387:52 - so much work but here somebody's doing
387:55 - that for you with the random dog images
387:57 - that they have collected and all you get
387:59 - to do is just hit the run button every
388:02 - single time and get a different freaking
388:05 - dog
388:06 - that's nice now what we could do is
388:08 - instead of making this app where every
388:10 - single time you have to like refresh
388:12 - this app and get a new dog image that's
388:14 - kind of like lame let's make it so we
388:17 - have a button that says like get new dog
388:19 - or get dog or something like that and
388:21 - then every single time we click that we
388:24 - get a new dog okay so you you have
388:28 - enough information to be able to kind of
388:30 - do this yourself
388:31 - so if you want to challenge yourself you
388:34 - could try it but if you don't and you
388:36 - just kind of want to follow along that's
388:38 - all right too
388:39 - because we will have some exercises
388:41 - coming up for you okay so don't have to
388:43 - kill yourself here all right so first
388:45 - thing i'm going to do is i'm going to
388:46 - turn this into a function okay in my
388:47 - mind i'm thinking about it like this i
388:49 - want to turn this piece of code into a
388:51 - function and what i want to happen is i
388:54 - want this piece of code to run every
388:56 - only when i click the button and
388:59 - every time i click the button this piece
389:01 - of code should run all right so let's go
389:04 - ahead and add a button right underneath
389:07 - this okay so this button can be added by
389:10 - going into html hitting index.html right
389:13 - here and right underneath here we can
389:15 - say button
389:16 - get new dog
389:18 - let's
389:19 - yeah let's give it an id of dog bun
389:22 - okay let's run and now we should have a
389:25 - get new dog button okay cool
389:27 - now
389:28 - what we want to do is i just want to say
389:30 - hey every time i click that button so
389:32 - let's go let's go grab that dog button
389:35 - because i'm going to say const
389:37 - dog button
389:38 - go to document
389:40 - get elements by id
389:43 - there's a dog button okay and here i'm
389:46 - going to say dog button dot
389:48 - on click
389:49 - and we're going to set its on click to
389:52 - just say you
389:54 - clicked get new dog okay so it's just
389:56 - gonna say like hey i noticed that you
389:58 - click get new dog okay so click it click
390:01 - it click it click it every single time i
390:02 - click it
390:03 - you'll notice that at the bottom right
390:05 - here
390:06 - it says get new dog right so
390:09 - it is working click click click click
390:10 - click
390:11 - okay perfect so it's doing
390:13 - what it's supposed to do it's detecting
390:15 - the click now what i want to do is i
390:17 - want to run
390:18 - this fetch request on click so let's
390:20 - wrap this bad boy inside of a function
390:22 - so i'm going to say const get
390:25 - new dog okay and we're going to turn
390:27 - this into a function and we'll do it
390:29 - like this and i'll take this code and
390:30 - i'll paste it in here let's format it so
390:32 - it looks beautiful
390:34 - nice
390:34 - so now what this is doing it get there's
390:37 - a function called get new dog when we
390:39 - call it it fetches this data it fetches
390:42 - this url
390:44 - uh gets a response
390:47 - like console logs the response right and
390:49 - then it like updates the image now we
390:51 - don't even need this console log here so
390:52 - i'll just remove it
390:54 - so all this does is
390:56 - gets the url and then updates the image
390:59 - with the new dog
391:00 - thing
391:01 - all right and
391:03 - here what we're gonna do
391:05 - is we're just going to go ahead and call
391:07 - that function so i'm just going to say
391:09 - get new dog
391:10 - like this and we're going to call this
391:12 - function
391:13 - okay let's run it
391:16 - run our app and now what we're going to
391:17 - do is we're going to say get new dog and
391:20 - boom it just got us a new dog let's hit
391:21 - it again get new dog boom got us a new
391:24 - dog get new dog getting you right that
391:27 - is so nice and now that dog button every
391:30 - time i click it that button is doing the
391:32 - work for us and we don't have to like
391:34 - kind of do anything right that's nice
391:37 - uh if we want we could put that button
391:39 - at the top as well so what we could do
391:41 - is let's go to index.html i'll take this
391:43 - button from here i'll kind of move it at
391:46 - the top right there and then this hello
391:49 - world i'll just completely remove it so
391:51 - if we go to our app we have get new dog
391:54 - right at the top
391:55 - you click it you get a new dog you click
391:57 - it again you get a new dog again
392:00 - if you want you could give everything
392:02 - kind of a margin
392:03 - but we don't really need to do that for
392:05 - this we can just keep this up oh that is
392:07 - cute um i have english bulldog that very
392:11 - similar
392:12 - to this
392:14 - yeah she's adorable she has huge paws
392:16 - man
392:17 - so yeah so this get new dog thing is
392:19 - working
392:21 - kind of honestly how we wanted to and
392:23 - it's really
392:25 - kind of straightforward so
392:27 - not too complicated honestly like
392:30 - it works it makes sense and what i'll do
392:33 - for you is i'll take this lesson right
392:35 - and turn it into a lesson in our main
392:38 - like javascript app that we were working
392:40 - on and i'll put it in here for you so
392:43 - then like you can actually go through
392:45 - this
392:46 - api's lessons right so okay i'll make a
392:47 - new folder that way it's like clear it's
392:49 - like dog related right and then in here
392:52 - i'm just gonna add
392:54 - an index.html file
392:57 - i'll also add a
392:59 - script.js file
393:02 - and then you don't really need a style
393:04 - sheet for this because there's not much
393:05 - style so we'll paste the javascript code
393:08 - that we wrote
393:09 - we'll go back to this app and i will
393:12 - grab the index.html i'll copy this
393:16 - and we'll go ahead and paste that
393:19 - index.html
393:22 - code in here for dog random
393:24 - so what's nice about this now is
393:27 - right over here on the right hand side
393:30 - right you'll have under lessons you'll
393:32 - have api lesson for get random dog
393:35 - you'll be able to click it other people
393:36 - will be able to see that you made this
393:38 - too and you just hit get new dog and
393:40 - you'll get a new dog every single time
393:42 - and then in order to
393:44 - like actually see the code for this app
393:48 - you can go ahead on the left hand side
393:50 - go into api
393:51 - go into dog random
393:54 - and boom you'll see it right here
393:56 - so this code is like the solution is
393:58 - there for you if you need it this is
394:00 - going to be the
394:01 - uh little project that we just made okay
394:04 - and then we're going to like do more
394:06 - practice stuff with apis okay so we're
394:08 - gonna get to it right now but hopefully
394:11 - like
394:12 - this app makes sense for you so far
394:14 - all right now we're gonna build another
394:17 - app with apis and this is going to be a
394:20 - superhero one and you should try
394:22 - to kind of make a little bit of it
394:24 - yourself as we go along but they're
394:25 - going to be certain concepts in here
394:27 - that might be new for example like
394:28 - access tokens but this superhero api app
394:31 - is going to do the following every time
394:33 - you click get new hero is going to
394:36 - randomly select the hero show you that
394:38 - heroes intelligence or durability or
394:40 - attack power or speed or something along
394:42 - those lines like stats you know so for
394:45 - example if you typed in get random hero
394:49 - it might bring a batman or if you typed
394:51 - in another hero it might bring up let's
394:53 - say spider-man and so you should be able
394:55 - to do that with this app now if we want
394:57 - to really take this app to the next
394:59 - level
395:00 - you can try making it where you can type
395:01 - in the name of the hero like batman and
395:04 - hit enter and it should automatically
395:06 - pop up batman's image and it should show
395:08 - batman's stats or maybe his biography
395:11 - and then every single time you type in a
395:13 - new person and say get hero it
395:16 - automatically does that every single
395:18 - time okay so this is what we're gonna
395:20 - code up let's go ahead and do this
395:21 - together step number one go to
395:24 - superheroapi.com
395:26 - it should bring you to this page where
395:27 - it says get all superheroes and villains
395:29 - data from all universes under a single
395:31 - api
395:32 - all right
395:33 - so now here's what you need for this
395:36 - you're going to need it's going to
395:37 - generate an access token for you so
395:39 - you're going to need to connect it with
395:41 - your facebook if you don't have a
395:42 - facebook go ahead and create one it's
395:44 - free make a dummy one come here connect
395:47 - it okay so do that
395:49 - and then you'll have a
395:51 - account access token okay so once you
395:53 - log in with facebook this token is gonna
395:55 - be important because without this token
395:56 - this api will not work so make sure you
395:58 - have that and then what you're going to
396:00 - need is this url right here okay this is
396:03 - going to be your base
396:04 - url then for this api there are a couple
396:07 - of other things that that are helpful to
396:09 - know for you is
396:11 - how this api will work is you'll need to
396:13 - either pass in the id of the hero or
396:16 - you're going to need to search that hero
396:18 - okay so if i for example go here you can
396:20 - find the character ids here
396:22 - you'll be able to go here and see all
396:24 - the heroes right so you have ethan hunt
396:26 - you have evil deadpool
396:29 - you have spiderman
396:30 - right over here right you have batman
396:34 - hawkeye you have thanos so you have all
396:37 - these heroes as either you pass in their
396:40 - id so for example you saw that the id
396:43 - was two four five so what that basically
396:46 - means is what your url will look like is
396:48 - the following so you'll have https call
396:51 - superhero api.com
396:53 - slash api slash whatever your token is
396:57 - so i'm going to go ahead and copy my
396:58 - token and then we're going to go ahead
397:01 - and paste this
397:03 - oh sorry let's go ahead and do this
397:06 - so
397:07 - right so
397:08 - api.com api slash
397:11 - whatever just imagine that that says
397:12 - your access token right here okay your
397:14 - access token
397:16 - slash you're gonna type in id
397:19 - slash whatever hero that you want so
397:21 - let's say 245 or whatever it is okay now
397:24 - if i try to go to this url let's see
397:27 - what happens and let's make sure i bring
397:29 - my
397:30 - access token and repl i'm going to
397:31 - replace this part with my access token
397:34 - let's hit enter and let's see if we get
397:36 - anything if it works at all right you
397:38 - actually just say
397:40 - 245 here just like that okay so let's
397:42 - try that
397:43 - and you can see that i'm actually
397:44 - getting the data back on ethan hunt
397:48 - and i have power stats on him so his
397:50 - intelligence is
397:51 - strength is pretty low 11
397:54 - speed is kind of low
397:56 - uh durability is low but then like
397:58 - combat is pretty high
398:00 - right ethan hunt
398:02 - and then he has a place of birth which
398:04 - is wisconsin i did not know that okay
398:08 - his height is five six
398:10 - uh what's his occupation he's an agent
398:12 - he's a training officer
398:14 - and um yeah and then here's his image so
398:17 - i can actually click that image
398:19 - and boom it shows me
398:21 - okay apparently
398:22 - it's uh tom cruise okay that's what i
398:25 - expected
398:26 - so let's go back here
398:28 - so this is the basic this is a call like
398:31 - a sample call reference okay so this is
398:34 - going to be useful for you
398:35 - and now we can actually just start
398:38 - coding this up so let's go ahead open a
398:40 - new repl so let's go to replic.com
398:43 - replay.com
398:44 - okay and then just go ahead and choose
398:47 - that html css javascript one that's the
398:49 - one we want and we're gonna say
398:52 - superhero api okay let's go
398:56 - cool
398:58 - and in here we're gonna do kind of a
398:59 - similar thing but this time we're going
399:01 - to say get super hero we're just going
399:03 - to create a function right from the
399:04 - start
399:05 - all right and then we'll just say hello
399:07 - [Music]
399:09 - and we'll just call this function let's
399:11 - just to make sure that this function is
399:13 - working
399:14 - and make sure to put an equal sign here
399:16 - and run this
399:18 - okay now you should it should say hello
399:20 - at the bottom right there and you don't
399:22 - actually even need to do console log
399:23 - here just run this because it already
399:26 - has a console log
399:27 - and you can see that we're getting back
399:29 - hello
399:30 - perfect so seems like our get superhero
399:33 - function we created it we are able to
399:35 - call it now
399:37 - inside of this function what i actually
399:38 - want to do
399:39 - is i want to make that fetch request so
399:42 - remember that
399:43 - fetch requests we made earlier you can
399:46 - pretty much go ahead
399:48 - for a dog random
399:49 - and look at it and your fetch request is
399:52 - going to be very similar to that
399:55 - all right so remember it's fetch you
399:57 - pass in the url and then you do these
399:59 - dot thens
400:02 - so let's go ahead and
400:04 - do that now okay so i'm going to
400:06 - basically say fetch
400:08 - and let's put that
400:10 - reference url there so we have we can
400:12 - see it at all times
400:14 - and now i'm going to
400:16 - basically
400:18 - uh use the url right so
400:21 - let's go ahead and do that i'm going to
400:22 - paste
400:23 - and character id here is going to be
400:27 - let's just say 245 because that's ethan
400:29 - hunt and for access token i'm going to
400:32 - go back
400:33 - and copy the access token so copy
400:37 - and
400:38 - let's paste it in
400:40 - in place of that where it says access
400:42 - token
400:44 - okay replace that with just whatever
400:46 - your token is and uh this is what you
400:49 - should have now one really really key
400:53 - hack that i'm going to show you here is
400:54 - make sure to put php here if you don't
400:57 - put that this will not work i know it's
401:00 - pretty weird but this is a weird hack
401:02 - that i had to kind of find around it
401:05 - and it's just for the superhero api okay
401:08 - you don't ever like need to do api.php
401:11 - like that okay
401:13 - so there we go this should get the ethan
401:15 - hunt guy and then we just need to do the
401:18 - two dot dens that we've talked about so
401:19 - i'm going to say response
401:21 - get the response as a json
401:25 - and then we need to do something with
401:26 - that response we're going to say then
401:29 - once you get that
401:31 - we're going to say json and we're going
401:32 - to say
401:33 - console
401:35 - log that json
401:37 - okay so
401:39 - with fetch requests you can pretty much
401:42 - like
401:43 - copy paste these lines almost every
401:45 - single time
401:47 - and then fetch of course is just going
401:49 - to fetch that's not going to change the
401:50 - only thing that's really going to change
401:51 - is what goes in here
401:53 - okay
401:54 - so i'm going to hit run on this and
401:55 - let's see if anything works and boom
401:58 - look at that we are getting ethan hunt
402:02 - we're getting that data
402:04 - right over here
402:06 - uh just as we want it to
402:09 - okay so we get response success id is
402:12 - 245
402:14 - name is ethan hunts and then we're
402:16 - getting all the power stats that's
402:18 - perfect right now if i wanted to get any
402:20 - one of these specific things i could do
402:22 - like let's say the dot id or dot name
402:24 - let's say i just did dot name and let's
402:26 - run this
402:27 - i should just get back i should just get
402:30 - back ethan hunt okay
402:32 - if i
402:34 - ran and i looked at this and i wanted
402:36 - power stats right i could do
402:38 - json.powerstats
402:40 - and that should get me back
402:42 - just the power stats
402:44 - and then i believe image should get you
402:47 - the image
402:48 - yup
402:49 - right and then you will have to do dot
402:51 - url to get the actual url out of that
402:54 - because it's an object within an object
402:56 - okay and now we have access to the url
403:00 - and if you use an image tag you can
403:02 - actually then pop that up on the screen
403:04 - there
403:05 - so what we'll do in order to attach that
403:08 - image
403:09 - to like basically your app
403:11 - is i'm gonna go ahead and i'm just going
403:13 - to say hey get the document
403:16 - dot like query selector all right and
403:19 - we're going to query select and grab the
403:21 - body tag so that's
403:23 - this tag right here
403:25 - all right i'm going to grab the body tag
403:28 - and then to the body tag let's uh let's
403:31 - add something so i'm just going to say
403:32 - plus equals okay and we're just going to
403:35 - write like
403:36 - i don't know hi
403:38 - or goodbye something like that let's run
403:41 - this oh we want to make sure we do dot
403:43 - inner html here so let's do dot inner
403:46 - html
403:48 - let's run this
403:49 - and you can see that all we did here is
403:52 - we just appended goodbye right there
403:54 - okay
403:56 - if you don't do plus equals and you just
403:57 - do this it will replace everything
403:59 - that's inside of the body and replace it
404:00 - with goodbye and that's not what we want
404:02 - right we just want to like attach that
404:05 - so watch this right so this ethan hunt
404:08 - that we're getting we have the image
404:10 - here so just go ahead and copy that okay
404:13 - uh right click copy that
404:16 - and if i go const
404:18 - image i'll just paste that there it's
404:20 - that long url
404:22 - okay
404:23 - so now what i can do is i can just like
404:25 - attach that image to the html body okay
404:28 - so what i can say is i can just go and
404:31 - go
404:34 - i have
404:36 - image tag right and then this image tag
404:39 - will have a source
404:40 - and this source
404:43 - is uh gonna be
404:45 - the image that we have
404:47 - okay let's uh let's make this a template
404:50 - literal so we can then write javascript
404:53 - in there
404:54 - all right boom
404:55 - boom boom there we go
404:58 - so we have this so image and then just
405:00 - like in this like that
405:03 - cool so image we gave it a source
405:06 - and this is going to be the ethan hunt
405:08 - image and it's kind of hard coded here
405:10 - all right let's put this maybe in
405:12 - strings is that what that wants yeah
405:15 - that's kind of weird huh like it wants
405:17 - that in strings even though it already
405:20 - is in spring so kind of weird but
405:22 - whatever
405:24 - we can we're going to go ahead and do
405:25 - that
405:26 - and now you can see that this image is
405:29 - popping out and it's actually not ethan
405:31 - hunt i apologize it's amazo right but if
405:34 - i change this
405:36 - uh hero here you know then i could get a
405:38 - different image but yeah so if i run
405:41 - this i'm just going to get that amazon
405:42 - image every single time okay so this is
405:44 - apparently what amazo looks like i mean
405:46 - i didn't even know that right
405:48 - and we're going to give this a height
405:50 - and width too so let's go ahead and do
405:53 - height is
405:54 - 200 and then we're going to say width is
405:57 - 200 now in order to make this dynamic i
406:00 - want you to try it because right now
406:02 - every time i run this and even if i pass
406:04 - in a different hero let's say i put in
406:05 - 245 and i'm actually putting in ethan
406:08 - hunt
406:08 - notice that it's still going to give me
406:10 - a mazzo so see if you could
406:13 - change something here in this function
406:16 - where it could update this image
406:18 - dynamically okay so give that a try i'll
406:21 - give you five seconds to pause the video
406:22 - and try it on your own five
406:24 - four three two one
406:28 - all right let's go ahead and now give
406:30 - this a try together
406:32 - so
406:33 - i am getting back this data but i'm just
406:36 - console logging it so instead of console
406:38 - logging it what i want to do
406:40 - is uh i want to grab the body and i want
406:43 - to add this all of this to the body okay
406:45 - so this is what i want to do so i'm
406:46 - going to cut this because i don't need
406:48 - that there i'm going to remove this
406:50 - console
406:51 - well you can keep that console log for
406:53 - now i'll keep that console log
406:56 - and
406:57 - i'm just gonna say hey uh get me the
406:59 - json and then just add that image now
407:02 - instead of using this hard-coded image
407:04 - what we're basically gonna do
407:06 - is uh we're gonna grab
407:08 - this image right over here so remember
407:11 - we're gonna need to do
407:12 - json.image
407:14 - and then that'll give us this object
407:16 - right here and then we're gonna need to
407:17 - do dot url to get access to then this
407:20 - url right here that key okay so let's go
407:24 - here and we're gonna say json.image.url
407:29 - just like this
407:31 - so now i can remove that hard-coded
407:33 - image that i had let's run this and
407:36 - let's see if that works and boom i got
407:39 - i got ethan hunt let's run it again
407:41 - let's run it again let's go here
407:44 - to our html and i don't want to say
407:46 - hello world here anymore i want to
407:48 - actually say button that just says get
407:50 - new hero and we'll make that work later
407:52 - and for bonus points you should try to
407:54 - make that work yourself okay before we
407:56 - even do anything else perfect and i'll
407:58 - just add a new break line okay this just
408:00 - like breaks
408:02 - things on to a new line and then that
408:04 - way the get new hero button always stays
408:06 - at the top so let's get back to our
408:09 - script
408:10 - and um watch what happens if i pass in
408:13 - 20 and run it now it's going to get me
408:15 - amaros
408:16 - image if i run 40 and run it it's going
408:19 - to get me
408:20 - this guy whoever that is
408:23 - uh let's hit 60
408:25 - and it's running me that looks like bane
408:27 - is that is that bane
408:29 - he looks epic
408:31 - yeah that's bane that's sick
408:34 - and his relative is apparently king
408:36 - snake who's his father yo i didn't know
408:39 - that
408:40 - that's lit that is super cool
408:43 - man ben is a badass
408:45 - now
408:46 - see if you can make this get new hero
408:48 - button works every single time i click
408:51 - it i want to be able to get a new hero
408:53 - every single time so i want you to pause
408:55 - this video give this a try on your own
408:58 - five four three
409:00 - two
409:01 - one
409:02 - all right let's go ahead and try to do
409:05 - this together it's all right if you
409:07 - didn't get this i'm proud of you for
409:09 - trying and i hope you tried
409:12 - um because you'd only be cheating
409:13 - yourself if you didn't
409:15 - all right so
409:17 - uh let's
409:18 - let's do basically what we did for that
409:20 - dog app right so we have our button
409:23 - and what we want to do is
409:25 - let's go give that button an id well we
409:28 - only have one button so i can be kind of
409:30 - lazy here and i can just select this
409:32 - button
409:33 - i can query select this button but is
409:35 - that a good way of doing it not really
409:38 - right like that's
409:40 - no i don't want to give you guys bad
409:41 - habits let's just say id
409:43 - new hero
409:44 - button let's just say that
409:46 - let's go into our script
409:48 - and we're going to get access button
409:50 - kind of up top here const
409:52 - hero button
409:54 - new hero button
409:57 - and i'm going to say document dot
409:59 - elements by id paste in that new hero
410:02 - button and so whenever that button runs
410:04 - i want to run this function here so i'm
410:06 - going to say console.log
410:09 - new hero button
410:11 - and i'm going to say on click run me
410:14 - this thing gets superhero
410:17 - and that's it so now when i run this app
410:19 - everything should be empty when i hit
410:21 - get new hero it should run but every
410:23 - single time i run it it's going to keep
410:25 - making a new request but it's going to
410:26 - get me the same hero every single time
410:28 - so getting your hero get new hero get
410:30 - new hero get new hero it's getting the
410:32 - same exact hero but every single time
410:35 - and that's not what we want we want a
410:37 - different hero every single time and so
410:39 - now i'm going to give you another piece
410:41 - of this exercise okay
410:42 - try this on your own so see if you can
410:45 - make it
410:46 - where
410:47 - it
410:48 - randomly picks a hero okay remember that
410:51 - array exercise that we did where we
410:53 - picked random remember the when we were
410:56 - making that color app right uh remember
411:00 - or sorry fruits app and we picked a
411:01 - random fruit remember when we did rock
411:03 - paper scissors and the computer chooses
411:06 - rock paper scissors randomly all right
411:08 - so
411:09 - you're gonna need to use some of that
411:11 - knowledge to pull this off this one's
411:13 - gonna be a little tricky but i think if
411:15 - you really tried you could make this
411:18 - number where it's random now if you need
411:20 - a hint if you don't need a hint you
411:21 - could pause this video try it on your
411:23 - right now if you need a hint what i'll
411:24 - tell you is this number is not going to
411:27 - be between three like it is for rock
411:29 - papers and scissors this number is going
411:32 - to be between one
411:34 - and
411:35 - all the way till 731 because that's how
411:38 - many heroes they have so you're going to
411:40 - need to put a number between 1 and 731
411:44 - uh in here so it should either go 1 or
411:47 - 731 or some number in between but never
411:51 - lower than one and never higher than 731
411:54 - okay so you need to make a function that
411:57 - can do that
411:58 - all right so take five seconds right now
412:00 - i'll give you five four three two
412:03 - one all right so we're gonna do this now
412:07 - const
412:08 - uh
412:09 - random
412:10 - uh i'm gonna create a function called
412:12 - random hero
412:13 - and basically what this function is
412:15 - going to do
412:16 - is
412:18 - we know that there are 731 heroes okay
412:22 - so khan's number of heroes is
412:25 - 731 and what i'll basically want to do
412:29 - is i want to do math.random okay so
412:32 - let's also open this up in the shell or
412:34 - sorry in our console and give this a try
412:37 - all right so let's go here and actually
412:39 - i'll clear this up so you can see this
412:41 - nice and at the top
412:43 - so
412:44 - let's say
412:46 - i do math.random
412:48 - and we multiply this by 731. now notice
412:51 - that i always get a number between 0 and
412:54 - 731 but it'll never actually go up to
412:56 - 731 right so that's maybe not not what
413:01 - we want we want it to actually go up to
413:03 - 731 so there are a few hacks you could
413:06 - do here
413:07 - so if we want to do so first of all
413:09 - let's do math.floor
413:11 - so math.floor will and if i hit up and
413:14 - enter up and enter it's going to keep
413:15 - going but it'll never actually pick 731
413:18 - and it it's not going to be easy for me
413:20 - to prove that to you here but it's not
413:23 - and it's also able to pick zero and
413:26 - that's not what we want in order and to
413:28 - prove this to you guys what i can do is
413:30 - like copy this piece of code
413:32 - and just change it to a smaller like
413:34 - number so you can kind of see this
413:36 - so see how it goes zero and one but
413:38 - it'll never pick two so it's basically
413:40 - picking the lower bounds we want to
413:42 - actually pick the upper bounds one start
413:45 - with one
413:46 - and end at 7 31. so
413:49 - the way that you could do this is you
413:51 - could actually just add a plus one to
413:53 - all of these so this way when i run it
413:55 - every single time i'm gonna get a one or
413:57 - a two every single time so you could
413:59 - just add a one or instead of math.floor
414:02 - you could actually call math.seal so
414:05 - either of those ways work so we're gonna
414:07 - do the same thing with our function with
414:09 - 731 and just add a one at the end and
414:13 - this is always gonna ensure that you're
414:14 - getting a number that's greater than
414:16 - zero and it doesn't end at seven thirty
414:19 - it would unit actually seven thirty one
414:21 - okay so this will get us
414:23 - that so i'm gonna
414:24 - paste this here okay now the 731 is
414:28 - actually just you know number of heroes
414:31 - number of heroes and then we're gonna
414:33 - plus one this cool
414:35 - and we're gonna say
414:37 - and actually we can just return this
414:40 - that's it
414:41 - okay and then we can just call the
414:43 - random hero function
414:45 - here so i can just say a random hero
414:48 - like that so get superhero and we're
414:51 - gonna get a random
414:53 - random hero okay you could because this
414:56 - function here is just going to return a
414:58 - number so for example if i
415:01 - do this and we do random hero and
415:04 - press up and enter it says run random
415:07 - here is not defined interesting
415:09 - but i just defined it
415:11 - so let's try random hero now boom there
415:14 - we go so every time i run random hero
415:16 - you can see what it does right it gets
415:18 - me
415:19 - a different number every single time and
415:22 - does a pretty good job right of
415:23 - generating a random hero so that's why
415:26 - we're just
415:27 - running this random hero in here they'll
415:30 - generate a random hero and then we'll
415:31 - get that specific superhero and then
415:33 - we'll get that dude's image so let's hit
415:36 - run at the top let's go ahead and click
415:38 - get new hero get new hero and
415:42 - all right so we've had a little bit of
415:44 - hacky
415:45 - html here that might be causing some
415:47 - problems so let's go to our html file
415:49 - real quick and let's just
415:52 - uh update this
415:54 - real quick okay so what i'm gonna say
415:57 - is um i'm gonna put a div here
416:00 - and we're just gonna say id is hero
416:03 - image
416:04 - and then inside of here we'll just have
416:07 - like an empty image thing okay and then
416:09 - we'll just
416:10 - update that instead so here we're gonna
416:13 - say
416:14 - const
416:16 - hero image div
416:18 - all right and then i'm going to say
416:20 - document dot get element by id
416:23 - and i think it's called hero image right
416:26 - let's just double check
416:27 - hero image
416:29 - copy come back
416:31 - paste it
416:32 - perfect
416:33 - and then we're just going to do
416:36 - uh we're going to replace this part
416:37 - right here
416:39 - with hero image div and we're going to
416:40 - change that html to this image so now
416:42 - let's give this a try and let's see if
416:44 - this is still working hit run at the top
416:46 - hit get new hero
416:48 - and let's try it and it works okay so
416:51 - i'm getting new heroes
416:53 - and look at what's happening their
416:55 - images are actually showing up at the
416:56 - bottom hit get new hero again
416:58 - and so every time i hit get new hero it
417:01 - actually like gives me a new hero so
417:04 - that's great and why is this happening
417:06 - so let's go ahead and open this app up
417:08 - and let's try to figure out why is this
417:10 - happening why is this behaving instead
417:12 - of replacing the hero it keeps adding
417:14 - them so get new hero
417:16 - get new hero
417:17 - i mean this is kind of a cool
417:18 - functionality too actually i kind of
417:20 - like this
417:21 - uh i kind of like this uh version of the
417:24 - app right every time you hit get new
417:26 - hero you keep getting back
417:29 - somebody somebody new so it's actually
417:31 - super super super cool i actually
417:34 - i really like this functionality but
417:36 - let's say you want to change this
417:38 - let's say you only want one hero well
417:40 - what you could do instead of this plus
417:42 - equals here which appends you could just
417:45 - say equal and that's only just going to
417:47 - replace so run this again hit get new
417:49 - hero he'd get new hero and you're going
417:51 - to get a new hero
417:52 - [Music]
417:53 - every single time
417:54 - okay or you know not every single time
417:57 - there is a one out of 731 chance that
418:00 - you're going to get the same person
418:01 - again probably lower than that
418:03 - but yeah it's a pretty low chance this
418:06 - is going to repeat itself all right now
418:07 - what we want to do is we want to have
418:10 - a search field here
418:12 - and
418:13 - you should type in there and then
418:17 - um you should have a get new hero button
418:19 - right next to it so you should be able
418:20 - to type in what hero you're looking for
418:22 - and then say get hero and it should
418:24 - surge that hero okay so we should have
418:27 - like kind of two buttons so one button
418:30 - gets a random hero okay and i guess
418:33 - let's just give this a name of random
418:34 - hero so
418:36 - uh let's go to our button and here i'm
418:38 - just gonna say like
418:40 - random and so when you click it it's
418:42 - very clear that this is gonna get a
418:43 - random hero okay and then what we're
418:46 - gonna do is we're gonna have an input
418:47 - which you you know is gonna be your
418:49 - search button all right so let's go
418:51 - ahead and create that input now i'm
418:52 - gonna say input
418:54 - and let's run our app and we should have
418:56 - an input right here okay and then we're
418:58 - gonna have a
418:59 - button kind of like in front another
419:01 - button in front of that input and this
419:02 - is going to be search
419:04 - okay let's run this so now our app is
419:06 - going to have two things so random hero
419:09 - will get you a random here every single
419:10 - time
419:11 - or you could type in a name of some hero
419:14 - like batman and hit search
419:16 - great so let's go back
419:18 - to our app let's go to script.js
419:22 - and let's work on this search
419:25 - get you know basically let's get a hero
419:27 - that was actually just searched
419:30 - so i'm going to create a new function
419:31 - well do i need to create a new function
419:33 - let me actually think about it because
419:35 - getsuperhero a bunch of the
419:37 - functionality is going to be same just
419:39 - this
419:40 - uh this is going to change right so for
419:41 - example if you search a hero
419:44 - then it'll go
419:45 - base url instead of id we're going to
419:47 - actually do search.name of the hero
419:51 - and if you pass in an id
419:54 - okay so if they pass in a
419:56 - name
419:58 - then this is going to be the url
420:00 - like
420:01 - schematic or whatever right this is what
420:02 - the url is going to look like and to
420:04 - pass in an id
420:05 - the url is going to look like base url
420:08 - slash id okay and let's uh try that url
420:12 - so let's go
420:14 - grab that url real quick so i'll go here
420:18 - grab this whole thing copy it hit paste
420:21 - grab your token go back to that
420:25 - paste this
420:26 - token right here
420:28 - and now we're gonna do slash search
420:31 - slash batman and let's see if this works
420:33 - as i expected or if it's gonna break
420:37 - and it actually does work wow look at
420:38 - that let's try spider
420:41 - and yeah spider shows up let's try
420:44 - spiderman let's see if that shows up
420:46 - that's the wrong name so let's try
420:48 - spider dash man
420:50 - and spider dash man indeed shows up now
420:53 - one thing if you have noticed is you're
420:55 - gonna get back of basically the same
420:58 - response regardless of
421:00 - so you know whether you searched the you
421:03 - you searched it up like
421:05 - with the search spider-man
421:07 - or whether you typed in the id of
421:10 - spider-man which is i can see here it
421:13 - says 620 so let's go ahead and replace
421:16 - this here with
421:17 - uh 620.
421:19 - both of them are actually going to
421:21 - return to you
421:23 - pretty much the same exact
421:27 - response right like the response is very
421:29 - very close
421:31 - the only thing i see change here though
421:33 - is we have a results array like we have
421:36 - a results uh key here
421:39 - right and then the value of that is an
421:41 - array
421:43 - so basically it seems like it gets you
421:45 - multiple results for spider-man
421:47 - um one or multiple results and so
421:50 - basically it seems like we would want to
421:52 - pull
421:53 - basically i think we would be safe just
421:54 - pulling the first result that's the
421:56 - difference between this and if i
421:58 - actually just type in 620 because that
422:00 - is getting me that specific spider-man
422:02 - that i was looking for
422:04 - whereas for this
422:06 - it's getting me a array of results and
422:08 - then the first result has the specific
422:10 - spider-man that you might be looking for
422:12 - okay so we're just gonna get like the
422:14 - first
422:15 - item out of that array that's how we're
422:17 - gonna do it so let's go back so some of
422:19 - our code is going to change not all of
422:22 - it but just a little amount of our code
422:25 - meaning
422:26 - in one of the scenarios
422:28 - so normally we just do json and we're
422:31 - good but in this case we might have to
422:33 - do
422:35 - dot json.rt
422:37 - get me the zeroth result
422:39 - right
422:40 - and
422:42 - then
422:43 - then i could do dot image dot url
422:47 - unlike how it is currently where you
422:49 - could just do json.image.url
422:54 - okay so let's maybe let's put these
422:56 - examples kind of this so you can see
422:59 - right so
423:00 - with this method i can just go like this
423:03 - because i already know exactly which
423:05 - json that i'm getting here i'm getting
423:07 - multiple results so i want to pull the
423:08 - first result get that results image url
423:11 - so
423:12 - a slight change is going to happen
423:15 - whether is going to happen
423:17 - whether we're given um a id or a name
423:22 - so in that case for simplicity's sake i
423:25 - think what i'm going to decide to do for
423:27 - now is just create a different function
423:29 - that way we won't have to do all this if
423:31 - else conditioned stuff we can just have
423:34 - a different function okay so this
423:37 - function here let's rename it and this
423:39 - should be get random superhero
423:42 - that function we run and it essentially
423:44 - will get a random superhero
423:47 - and um
423:48 - yeah and if it's gonna get a random
423:50 - superhero i mean
423:52 - you you really don't even need to give
423:54 - it an id so
423:57 - yeah so yeah you could call it get
423:59 - random super get superhero i'll just
424:00 - leave it as
424:02 - uh let's go ahead command z this
424:05 - let's just leave it as get superhero for
424:06 - now just because i don't want you to
424:08 - like have to change it everywhere like
424:09 - for now you should just have a working
424:11 - version so let's leave that as is so
424:13 - this is one function now let's make
424:15 - another function and this is going to be
424:16 - called
424:18 - get searched get search superhero okay
424:21 - so this is whatever the user searched up
424:24 - and this is gonna it's gonna probably
424:25 - you know whatever the name the user is
424:27 - searching for right
424:29 - now we're gonna be able to copy a bunch
424:31 - of stuff from here
424:33 - okay so let's go back
424:34 - for fetch request here
424:37 - we're gonna have a
424:38 - base url of course
424:41 - but on the top of the base rail we're
424:42 - going to say search
424:44 - and we're going to pass in the name
424:46 - so this is going to get us the
424:49 - you know like put in batman or whatever
424:51 - here
424:52 - and then we're going to do our
424:53 - dens.dense like how we did earlier
424:56 - and
424:58 - let's just
424:59 - go right here and paste them format this
425:02 - cool
425:03 - you do our dense.dense and for json here
425:07 - we're actually gonna grab the
425:10 - we're gonna say const super uh hero
425:14 - is equal to json.results
425:17 - of zero
425:19 - this is gonna be the specific hero and
425:20 - then
425:21 - we can replace that with hero.image.url
425:25 - and uh instead of console.logging json
425:28 - we're going to console.log our hero
425:32 - and this search superhero function is
425:35 - going to run
425:36 - whenever we click the search button okay
425:39 - so let's go ahead and let's see the
425:41 - search button dude we give it an id
425:43 - let's give it an id of search button
425:46 - let's go back into our code
425:48 - and uh
425:50 - let's say
425:51 - search
425:52 - button is going to be
425:55 - document.getelementbyid and we're going
425:56 - to say search button and uh then we're
425:59 - just simply just going to attach
426:01 - a listener to this and we're going to
426:02 - say
426:04 - on click
426:05 - get search
426:07 - get search superhero and for now
426:10 - let's just hard code batman so it should
426:12 - just get us batman
426:14 - and then
426:15 - put him out so let's hit search
426:17 - oh sorry let's hit run at the top first
426:20 - then let's hit search and look at that
426:22 - it's working perfectly exactly how we
426:24 - wanted it to work and when i hit search
426:26 - i am getting batman exactly like like i
426:30 - expected
426:31 - okay let's replace batman with thanos
426:34 - and let's hit run and let's hit search
426:38 - and you can see that i'm getting back
426:39 - thanos
426:40 - so this is good this is doing this is
426:42 - doing what i needed to do all right now
426:44 - what we need to do is we want to be able
426:46 - to put in stuff in here and get access
426:49 - to that so i'm gonna go
426:52 - inside of this input
426:54 - and to grab its value we're gonna give
426:56 - it a name and we're gonna say the value
426:59 - of this is
427:01 - search input
427:03 - so let's see if
427:04 - that will allow us to do what we want to
427:06 - do
427:07 - so i'm going to go ahead and i'm going
427:09 - to say const
427:11 - search
427:12 - input
427:13 - i'm going to say document dot get
427:16 - element by id
427:19 - actually we have not given this an id
427:22 - let's
427:23 - take out the value
427:25 - and we're just gonna do id for now id is
427:28 - gonna be search
427:30 - input okay let's let's do the id there
427:33 - all right now i'm going to say
427:35 - search input
427:36 - and we'll try to get its inner text so
427:40 - search input and let me let's see if we
427:43 - do dot inner text if it actually gets us
427:46 - what we want all right enter
427:49 - enter text
427:51 - and um let's console log it here so i'm
427:54 - going to say console log
427:56 - search input so every time i run i type
427:59 - in that button so let's search
428:01 - and it doesn't look like i got anything
428:04 - let's type in hello
428:06 - or let's not type in that let's say
428:07 - cookie monster so it's like visible
428:09 - let's put a cookie emoji in there and
428:11 - let's hit search
428:12 - and let's see if that did anything and
428:14 - got us anything we're looking for
428:16 - nope i don't see anything let's silence
428:19 - our console logs here so i'm going to
428:22 - silence that console log let's silence
428:24 - this console log here and then
428:27 - this one in here as well so no more
428:29 - console logs let's hit run
428:32 - let's hit search and something is
428:34 - happening but we're not getting what we
428:37 - want let's type it in search is still
428:40 - empty all right so all we need to do
428:42 - let's just hit run here okay all we need
428:44 - to do is make sure search input is
428:46 - documented element by d search input
428:49 - right and then every single time we run
428:51 - this function
428:52 - search we're going to console.log
428:55 - whatever value is in here okay so we're
428:57 - going to say
428:58 - search input
429:00 - dot value and make sure the console log
429:03 - this so now they'll extract the value
429:05 - from that field so let's say i write in
429:07 - uh
429:08 - you know
429:10 - cookie
429:11 - monster and hit search and you can see
429:14 - we're extracting cookie monster right
429:16 - over here exactly how we want to right
429:18 - so this is going to be the search that
429:20 - we're now gonna pass in
429:23 - okay so this is the search input.value
429:25 - is essentially gonna be the name
429:27 - so this getsearch superhero function
429:31 - what we're gonna do is we're gonna copy
429:33 - this search input.value and every time
429:35 - we call this function instead of passing
429:37 - hard coded thanos
429:39 - instead we're just going to pass in the
429:41 - user's
429:43 - search input value that they put in so
429:45 - let's try running this again okay let's
429:47 - try running this again
429:49 - and i will say thanos
429:52 - and let's hit search and boom let's hit
429:54 - batman and hit search and boom let's hit
429:58 - spider
429:59 - dash man let's go search
430:01 - uh ethan maybe oh wow that worked i'm
430:05 - surprised and that was fast too look at
430:08 - how fast it is man
430:10 - this is nice
430:13 - right
430:14 - um this app is doing what it's supposed
430:16 - to be doing so when you search it gets
430:18 - you a hero when you click get random
430:20 - hero it gets you here as well now what
430:23 - we want to do is above the hero it
430:26 - should say their name okay and
430:28 - underneath it just say maybe some of
430:30 - their stats
430:31 - so let's go ahead you should try see if
430:34 - you could try that on your own
430:36 - um
430:37 - but we'll walk through it together if
430:39 - you don't get it okay so i'll give you
430:41 - five seconds to try to pause and try to
430:42 - do that on your own
430:44 - five
430:45 - four three
430:47 - two
430:48 - one
430:50 - cool so what we'll do is we'll
430:53 - get the hero name i kind of showed that
430:56 - at the top okay so let's see where we're
430:58 - doing this we're saying okay the hero
431:03 - image
431:04 - i want you to replace it with an image
431:06 - and i want you to replace it with the
431:08 - following so let's go back
431:09 - to where we're doing that
431:11 - so we're getting the hero
431:13 - let's just go to our random
431:15 - hero function first because that one is
431:17 - easier to understand
431:18 - and here we're creating this
431:21 - you know we're basically saying hey the
431:23 - html is the inner html is this we're
431:26 - creating this image show that image
431:28 - well above that image we could actually
431:30 - put the um
431:32 - we could put their
431:35 - name
431:36 - okay so for example i could say
431:39 - kant's
431:41 - is uh we're gonna go grab the
431:45 - json
431:46 - and we're gonna say dot name
431:48 - so json.name but we need to actually
431:51 - like
431:52 - make the actual h2 or whatever so let's
431:55 - turn it into an h2 i'm going to say h2
431:58 - wrap that in an h2 okay
432:01 - and we'll
432:03 - wrap this
432:04 - this so json.name
432:06 - and now if you want to like kind of
432:08 - concatenate these together you could
432:09 - actually go i mean this is kind of
432:11 - getting really crazy
432:12 - but what this is doing here is you're
432:14 - inserting the name html and then you're
432:17 - inserting the image right after that so
432:19 - let's see if we can try this and if this
432:21 - works
432:23 - let's go random hero
432:25 - right and now we get robin v
432:27 - and the image let's try again we get
432:29 - vision 2 and
432:31 - boom
432:32 - right we get the name
432:34 - and the hero as well
432:36 - and we can get their stats too so let's
432:38 - try console logging the json
432:41 - and we're gonna do dot power
432:43 - stats
432:44 - let's run random hero and you can see we
432:46 - get back intelligence strength speed
432:49 - durability power combat so you can
432:51 - actually show all of those stats right
432:53 - underneath here
432:54 - see if you could do that by yourself
432:56 - okay so here i would highly recommend
432:58 - you take about five seconds see if you
433:00 - could add that yourself so i'll give you
433:02 - five seconds five
433:04 - four
433:05 - three
433:06 - two
433:07 - one
433:08 - all right so let's go ahead and do this
433:10 - together so i'm gonna say const
433:12 - power stats um is going to be
433:16 - you know not h2 but maybe it's gonna be
433:18 - like
433:18 - p tags
433:20 - so we could actually either do all power
433:22 - stats or what we can do is just do one
433:24 - stat at a time so let's just try
433:26 - intelligence and we're gonna put in a p
433:28 - tag here
433:29 - and i'm gonna say
433:33 - dot json.powerstats.intel
433:35 - and wrap that close that p tag right
433:37 - there
433:38 - so
433:39 - so now what i can do is i can go and
433:42 - take this intelligence and just show it
433:44 - at the bottom right so
433:46 - we can
433:48 - add that right here
433:50 - intelligence
433:51 - hit enter and let's go right random hero
433:54 - right ellie bishop intelligence is
433:56 - undefined interesting let's see why
433:58 - that's happening oh i misspelled
434:01 - intelligence right here okay so careful
434:03 - with the so that's why copy pasting is
434:05 - oftentimes better better for programming
434:07 - so you don't make these errors let's go
434:09 - ahead random hero we got sauron
434:13 - and then the and it's 88 over here okay
434:16 - so
434:17 - if you want to make that better you can
434:18 - actually say intelligence
434:21 - and then
434:23 - it'll look cleaner that way so now let's
434:25 - hit random hero
434:26 - tundra intelligence is 38
434:29 - and
434:30 - try doing this
434:32 - right let's make another one for another
434:34 - stat so we're going to do instead of
434:36 - intelligence maybe this one will do
434:38 - strength
434:39 - and we'll say strength
434:41 - and we'll
434:43 - paste strength right there
434:45 - and then we'll attach strength onto this
434:48 - so we're just making this this long html
434:50 - right over here
434:51 - all right let's run this
434:54 - get random hero and you can see now we
434:56 - have the cape we have intelligence and
434:59 - strength
435:00 - now if you want to make it like
435:02 - kind of more enticing you for for
435:05 - intelligence let's put a brain emoji for
435:07 - this let's put a muscle emoji
435:10 - and now let's run this get random hero
435:13 - and you can see intelligence is 50 and
435:15 - strength is 10. right random hero
435:17 - intelligence is null so maybe this hero
435:20 - does not have an intelligence right
435:22 - here intelligence is 88 strength is 10.
435:26 - now we can see the pattern here right
435:28 - basically for all the stats we're going
435:30 - to keep needing to repeat this pattern
435:32 - again and again and again meaning this
435:34 - it will basically you'll need to keep
435:36 - copy pasting p tags together so at the
435:39 - end of the day what it actually looks
435:40 - like is p tag
435:42 - right and then you're gonna have this
435:44 - so like actually it'll actually look
435:46 - like this so you have this p tag right
435:49 - here
435:50 - um combined with this p tag back to back
435:54 - combined with probably another p tag
435:57 - that talks about combat
436:00 - right combined with another p tag that
436:01 - talks about maybe strength or sorry not
436:04 - strength but like speed followed by
436:06 - another p tag that says durability
436:09 - so we're seeing this like pattern here
436:11 - and we want to actually create this big
436:12 - long string and then we want to just
436:14 - attach that string
436:16 - right here so you know
436:18 - it's a pattern so what we can actually
436:20 - do is let's just create a function that
436:22 - actually
436:24 - you know gets
436:25 - stats
436:27 - get and show stats or actually let's say
436:30 - get stats
436:32 - html so it will
436:34 - get the stats right but then convert
436:36 - them into
436:37 - a usable html so
436:41 - we're going to create this function
436:43 - and we're going to expect that we're
436:45 - going to get a character okay so just
436:47 - like we're going to we're going to
436:48 - expect that we get this like json-like
436:51 - data of that specific character and then
436:53 - what we're gonna do
436:55 - is we can do map here or we can do a for
436:59 - each but but since we're just trying to
437:02 - do a string concatenation it might make
437:05 - more sense to do
437:08 - a four
437:09 - each you could also do a dot map and
437:12 - kind of join everything together so
437:14 - we could definitely do it
437:17 - that way as well okay so how that might
437:19 - look like is say you have an array
437:21 - let me clear this
437:23 - so say you have an array that says hello
437:27 - by
437:28 - cookie whatever
437:30 - and let's give this so if i want to join
437:34 - all of these i can actually just do this
437:36 - and i can just say hey just join them
437:37 - all together
437:39 - so if i have an array
437:40 - of like p tags
437:43 - and i have
437:45 - intelligence here
437:47 - intelligence and then i have
437:50 - another p tag
437:51 - that says
437:53 - speed
437:55 - right i could actually do dot join here
437:59 - and do this
438:00 - and i just get back one big string
438:03 - so this is kind of what we want to do
438:04 - here so i'm going to say
438:06 - character
438:08 - okay dot map so map basically says
438:11 - return an array
438:13 - and
438:14 - we're actually we're going to do power
438:16 - stats
438:18 - character.powerstats.map okay so we're
438:20 - going to loop through all the power
438:21 - stats
438:22 - we're going to loop through all the
438:23 - power stats
438:24 - and for each stat
438:26 - what i'm going to say
438:28 - is
438:30 - make this html
438:32 - like looking thing here all right so
438:34 - since what we're getting back is
438:36 - actually an object it's not going to be
438:38 - super simple to loop through this so
438:40 - what we're going to say is
438:42 - character.powerstats
438:44 - is not an array okay this is actually
438:46 - going to be an object that you're
438:48 - getting back
438:50 - so what we want to do here is we want to
438:52 - loop kind of this way and i'm going to
438:55 - say for stat in
438:58 - character.powerstats and we're gonna
439:00 - loop through this and let's just
439:01 - console.log each stat
439:03 - and let's call this function
439:05 - getstats.html
439:07 - uh
439:08 - let's just say maybe
439:10 - and i'll call this function and we'll
439:12 - pass it the character which is just json
439:14 - in this case
439:16 - uh but this really is the character okay
439:19 - so
439:20 - get stats html pass it to character and
439:22 - then it should just run
439:24 - and then console log all the power stats
439:26 - let's run this let's get a random hero
439:28 - and you can see it just ran through and
439:30 - says intelligence strength speed
439:32 - durability power combat perfect
439:34 - so now what we want to do now that we're
439:37 - actually able to loop through this
439:39 - now another way that we can actually
439:41 - loop through this and let me show this
439:43 - to you because this is kind of cool
439:45 - so if you have an object
439:48 - right so let's say we have things and
439:49 - things is this object right over here
439:52 - which has strength and cookie well i can
439:54 - actually go and i can say
439:57 - object.keys
439:59 - and pass in things to it and it's going
440:01 - to just turn that turn all of its keys
440:03 - into an array and then i can actually
440:06 - loop through those keys so
440:08 - that's a really
440:11 - cool way to actually
440:13 - to actually like iterate so instead of
440:16 - saying for stat and power.stats what i
440:19 - could actually do is i could say object
440:21 - dot keys
440:23 - and um we could ask for the character
440:28 - character the power stats
440:30 - and this will turn the whole thing into
440:34 - let's actually just
440:35 - console log this so it's not super
440:38 - confusing
440:39 - i'll console log this here in the same
440:41 - line all right let's run this and let's
440:44 - get random hero
440:45 - and you can see that i have this array
440:47 - here intelligence strength speed
440:49 - durability power combat so i just turned
440:51 - this into
440:53 - an array of all of the keys
440:55 - so now what's cool about this is because
440:57 - it is an array i can loop through it
441:00 - with a dot map and then a dot map will
441:02 - loop through this array and also return
441:05 - an array
441:07 - so now what i can say is for
441:10 - each stat i want you to do the following
441:12 - okay so
441:14 - it's going to go through each stat so
441:16 - intelligence strength speed durability
441:19 - power combat blah blah
441:21 - and here's what i want you to do you're
441:24 - going to
441:25 - uh create this string
441:27 - okay we're going to say p tag and then
441:30 - this p
441:31 - make sure it's a template literal with
441:32 - backticks it's going to be a p tag
441:35 - it's going to have um that
441:38 - the name of the key
441:40 - that you're passing so here i'm just
441:42 - going to say it's going to be the stat
441:46 - okay whatever stat that is so it's so
441:48 - this is going to turn into their
441:49 - strength or whatever
441:51 - uh or like
441:53 - intelligence
441:54 - right and then we can say
441:58 - i'll put a colon here
442:00 - right and then after that colon
442:02 - we want to do is actually put the value
442:04 - so i'm going to say
442:06 - i'm going to say character dot power
442:09 - stats
442:10 - right and then pass it
442:12 - that specific stat we're looking for so
442:15 - i can just say stat or i could just do
442:17 - it like this and i can say stat like
442:18 - this
442:19 - okay so
442:20 - it's going to go to that object and it's
442:22 - going to pull that specific stat so all
442:25 - this means is let's say that this object
442:27 - was called
442:29 - we had something called character
442:31 - dot power stats and that was equal to
442:33 - this array right there whatever right or
442:35 - that object let's copy that object and
442:38 - let's say we have power stats is equal
442:40 - to this object right here and so if i do
442:43 - power stats
442:45 - and i pass in strength oops it's going
442:48 - to get me the value
442:50 - of strength so it's going to get me 8
442:53 - right there
442:54 - so that's all we're doing here i'm
442:56 - basically going into that object
442:58 - and i'm just pulling out its value
443:02 - and then we're just going to end this p
443:04 - tag
443:05 - and this p tag
443:06 - all right so it's gonna loop through and
443:08 - do that and then let's see if we need to
443:10 - do anything else for this one
443:14 - and honestly it doesn't really look like
443:16 - it so we can actually just return this
443:17 - array and it's gonna create a full array
443:20 - okay and so i'm going to call this
443:22 - const
443:24 - let's say stats
443:26 - and then we'll console log
443:28 - stats
443:30 - okay so let's run this let's do get
443:32 - random hero and you can see now i have
443:35 - intelligence and a p tag i have strength
443:38 - and a p tag i have speed and a p tag
443:40 - i have durability in a p tag power and
443:43 - combat
443:46 - and if we want to give each of these an
443:48 - emoji we could do that as well and we
443:51 - can kind of create a map for the emoji
443:53 - and then
443:54 - kind of like map the
443:58 - map the stat
444:00 - stat to emoji map we could create that
444:03 - and then we could even use that here
444:06 - and get the appropriate emoji so for
444:08 - example
444:09 - we can we can create that right here
444:11 - right so we could say
444:12 - stat to emoji
444:15 - right and then we could say hey if the
444:16 - stat is let's say intelligence
444:20 - and you don't need to even put it into
444:21 - string here
444:23 - so let's go intelligence
444:25 - is going to be this
444:28 - brain
444:30 - comma
444:31 - and
444:32 - strength is going to be muscle
444:35 - and then we have speed
444:38 - let's paste this and then we have
444:40 - durability
444:42 - durability
444:44 - and then we have power
444:46 - and then we have combat so strength is
444:49 - that speed is a zap
444:52 - durability is let's just say like maybe
444:55 - a tire emoji or something we'd
444:57 - apparently there's no tire so
444:59 - say a rope
445:02 - um
445:04 - workout
445:06 - lift there we go that's durability
445:09 - and then power
445:12 - i don't know that will be power okay and
445:14 - then combat will be sword
445:16 - okay stat to emoji
445:19 - so that's emoji so here if we want to
445:22 - actually like map that we could actually
445:24 - just
445:25 - right before this
445:27 - stat to emoji and then give it the value
445:30 - of the stat
445:31 - and uh this is going to get us the emoji
445:34 - that we want so let's run this let's hit
445:35 - get random hero
445:37 - and you can see like we have
445:38 - intelligence as a brain strength is that
445:42 - zap
445:43 - boom
445:45 - okay get random here another random hero
445:47 - and you can see we got
445:49 - boom right
445:52 - power combat
445:53 - our emojis are working kind of as
445:55 - expected so this is actually making all
445:58 - the stats for us and getting them
446:00 - right
446:01 - and
446:02 - instead of having all of this crap right
446:06 - here which is kind of like
446:08 - weird and annoying i could actually just
446:12 - remove this
446:13 - right and um
446:16 - and here we could just say con stats is
446:18 - get stats html
446:20 - right and then we could just replace all
446:22 - of this
446:24 - and paste
446:26 - stats
446:27 - and now when we run this and we get a
446:29 - random hero
446:30 - okay let's do a random hero
446:33 - okay let's see it's all oh yeah it's
446:34 - doing undefined right now and we know
446:36 - why
446:37 - because we haven't turned it into a
446:39 - string yet we're like
446:41 - this is still an array so remember at
446:43 - the end of and we also need to return
446:45 - we're not returning anything so we want
446:47 - to do is we want to say
446:49 - dot join like this okay and we want to
446:53 - do return
446:54 - stats.join
446:56 - and like that
446:57 - okay so let's run this and now when i do
447:00 - random hero you can see that it's just
447:02 - giving me one long string
447:04 - of p tags intelligence is a p tag
447:07 - this strength right here is a p tag
447:09 - speed right here is a p tag and now when
447:11 - i look
447:12 - you can see that it's actually showing
447:14 - up really nicely right so professor zoom
447:17 - let's get random hero and you can see
447:21 - all of this right here run this again
447:23 - random hero
447:24 - boom
447:28 - mr freeze isis
447:30 - run run run and then we're just getting
447:32 - the intelligence strength speed
447:34 - durability all of that right here
447:37 - now it would be nice to have this
447:39 - intelligence i capitalized as
447:41 - capitalized as well
447:43 - so let's go ahead and maybe add a um
447:48 - dot title case 2.2 title case okay which
447:52 - is kind of a nice little thing that you
447:53 - could do
447:55 - and we could actually pass that in
447:59 - right over here and i could say that two
448:02 - title case and let's see if
448:05 - title case string method
448:08 - javascript okay so you can always like
448:11 - google this stuff too and i'll kind of
448:12 - show you examples
448:14 - and let's see if there's a method that
448:16 - does title casing
448:18 - do we have to oh dot two upper okay so
448:21 - we could actually just do that to
448:22 - uppercase and we should be
448:24 - we should be fine that shouldn't be too
448:26 - bad or maybe that just uppercases
448:28 - everything that's not what we want
448:30 - either
448:31 - actually we can just do two uppercase
448:33 - and yes it's not title casing because
448:35 - title casing is like pretty complex but
448:38 - dot to uppercase is a method that comes
448:40 - built into javascript and you can see
448:42 - what it does and it's really nice right
448:44 - it just capitalizes
448:46 - everything which is nice like we're
448:48 - capitalizing the stat right here um and
448:52 - you know that makes that makes the whole
448:53 - thing just look a lot better so the
448:56 - stats html function yeah it's getting
448:58 - definitely pretty intense i can feel
449:00 - that but uh you know if you're doing
449:02 - this and you
449:04 - you know you got up to this part like
449:05 - you're doing a good job so just hang in
449:08 - there and honestly what we could do is
449:10 - we could probably turn this function get
449:12 - stats html into like
449:15 - get
449:16 - hero info
449:17 - you know get hero info html or something
449:20 - because we can just create the whole
449:22 - the entire html in that function which
449:24 - will be really nice we just hand over
449:26 - all the html elements so it's like the
449:28 - hero name right
449:30 - well that's just character.name so for
449:32 - example if i copied this and i brought
449:34 - it down here
449:36 - this is this would just become character
449:39 - dot name so that should take care of
449:41 - that
449:42 - and then we actually update the div at
449:45 - the end and we create we do this like
449:47 - image thing right here
449:49 - so this image thing that we're doing
449:51 - here
449:51 - well that would be really nice to
449:53 - actually do it handle that here as well
449:56 - okay so let's try handling that here i'm
449:58 - gonna say character.json
450:01 - image url okay this will be a template
450:05 - literal like this
450:06 - just a const
450:08 - image so this will be the image uh html
450:12 - okay and then we have this final html
450:14 - that like yeah and then here we go ahead
450:17 - and we um
450:19 - update this so yeah get stats
450:22 - so we can actually rename this function
450:24 - as to show stats because really what
450:26 - this function is doing is showing the
450:28 - stats on the screen
450:30 - um or showing the
450:33 - hero info on the screen so we could
450:36 - right click this and rename all
450:38 - occurrences we could say show
450:40 - hero info
450:42 - it's a show hero info so this is
450:44 - basically the function that's actually
450:45 - going to show this here the info
450:48 - so i think that's like probably a much
450:50 - better name for it and then it would
450:52 - make sense if that's the function that
450:55 - actually updates
450:57 - uh the entire app as well so i'm going
450:59 - to copy this for now we're going to come
451:00 - down here and i'm going to paste this
451:03 - right over here
451:04 - so this function doesn't even need to
451:05 - actually return this return anything
451:08 - stats
451:10 - boom
451:11 - and in so for stats we can actually just
451:14 - do the dot join right here so i can
451:16 - actually just say that join so then it
451:19 - it just turns this entire thing into
451:21 - that long string instead of keeping it
451:23 - as an array
451:24 - and then this hero image div dot inner
451:26 - html well this just becomes something
451:29 - simple
451:30 - we can actually even remove this guy now
451:33 - and actually just say
451:35 - image
451:36 - so this just becomes this nice little
451:39 - html so we get we make the name html we
451:42 - make the image html
451:44 - and then we make the stats.html
451:47 - and then we just concatenate all of
451:49 - those together and update the hero image
451:52 - we don't need to we don't need this
451:54 - function to return anything right show
451:56 - hero info
451:57 - and we basically get rid of all of this
452:02 - all of this here
452:04 - and we can just simply call the show
452:07 - hero info function so now this function
452:09 - just became really easy to look at right
452:12 - get superhero
452:13 - once you get the superhero
452:15 - you just pass that superhero
452:18 - jace uh con superhero is equal to json
452:22 - you just pass that
452:23 - hero or that character or whatever
452:26 - and that this just shows it on the
452:28 - screen so let's actually try this let's
452:29 - run this let's say random hero all right
452:32 - so it didn't it's not coming up on the
452:33 - screen let's figure that out real quick
452:36 - so what i'm going to do is i'm just
452:37 - going to say console.log
452:40 - and let's see if uh name is working as
452:43 - expected so let's try name
452:46 - let's run random hero yep oh actually
452:48 - it's working i just had to like hit the
452:50 - run i just think i never hit run
452:52 - now let's hit random hero and look at
452:54 - that random here is showing up
452:57 - right and then intelligence strength
452:59 - speed durability all of that showing up
453:01 - exactly how we want let me remove
453:04 - all of this here
453:06 - so now it's really easy to read get the
453:09 - superhero
453:10 - show the superhero that's it now this
453:13 - function is reusable and i'm gonna give
453:16 - you that as an exercise so try that
453:18 - right now
453:19 - see if you could take this
453:22 - what we did right here and add that to
453:24 - search functionality so when i type in
453:26 - batman and i hit search
453:28 - make it so it actually shows me the
453:30 - batman name it shows me the batman image
453:33 - and it shows me the batman stats so see
453:36 - if you could do that on your own
453:38 - i'll give you a hint it's you're pretty
453:40 - much only going to be writing it's going
453:41 - to be just a few lines of code and it'll
453:43 - do the entire thing for you so i'll give
453:46 - you about five seconds see if you could
453:47 - try to figure out i mean pause the video
453:49 - and see if you could try to figure it
453:50 - out five four
453:53 - three
453:54 - two
453:54 - one
453:56 - okay let's go ahead and do this together
453:58 - now so this is going to be really really
454:01 - really really nice okay because watch
454:03 - what we're gonna do
454:05 - let's go to our search superhero
454:07 - function
454:08 - and i'm gonna delete everything from
454:11 - here
454:12 - okay and remove everything
454:14 - right and we already have our hero here
454:18 - which is the first item
454:20 - i'm just gonna call our show hero info
454:24 - and i'm gonna pass in the hero that we
454:26 - have
454:27 - okay and let's give it a try now so
454:29 - let's search
454:31 - uh batman
454:33 - and let's hit search
454:34 - and look at that it's already working
454:37 - right this is kind of
454:38 - pretty unbelievable but if you actually
454:40 - open this app up
454:42 - and you go batman and you hit search
454:46 - boom
454:47 - let's go spider-man
454:50 - boom let's go thanos
454:53 - boom
454:54 - [Music]
454:56 - i mean this is amazing or you could get
454:58 - a random hero and both them both of them
455:00 - work so just to explain a little bit
455:03 - about how we were able to make it work
455:05 - that easily is look we already have
455:07 - access to the hero right here so then
455:10 - you just pass that hero to show hero
455:12 - info and it knows what to do already
455:15 - it knows that it's going to get a
455:16 - character it knows it can do
455:18 - character.name it knows how to get the
455:19 - image url it knows how to like
455:22 - turn the thing into
455:24 - object.keys map through it get the stats
455:28 - you know get all of these nice emojis
455:30 - that we have here it knows how to do all
455:32 - of that
455:33 - and so then it just kind of
455:35 - does all of that for you and then you're
455:38 - you're good you're just essentially
455:39 - reusing a function that you've created
455:42 - that's the nice thing about reusing
455:43 - functions right
455:45 - um
455:46 - it it like really is a game changer when
455:49 - you can reuse like your existing
455:50 - functions
455:52 - all right cool so now just to kind of
455:54 - make our app pretty i'll just say like
455:59 - um at the top
456:02 - kind of like right here and i'll say
456:04 - um
456:05 - [Music]
456:07 - you know
456:07 - [Music]
456:10 - superhero app
456:13 - and then
456:14 - for instructions we'll just say like
456:18 - you can search for a superhero like
456:23 - batman
456:25 - or thanos
456:28 - or
456:29 - simply
456:30 - hit
456:32 - all right so superhero app you can
456:34 - search for a superhero like batman or
456:36 - thanos or you can generate a random hero
456:37 - so now the user goes to this app they
456:40 - understand kind of how it works and what
456:42 - it means so hit random hero
456:45 - all right let's open this up here
456:47 - superhero app you can search for a
456:49 - superhero
456:50 - or you can generate a random hero so
456:52 - let's try random hero
456:54 - right boom we're pulling random heroes
456:56 - and this is like going to an api pulling
456:58 - the data from there or i can actually
457:00 - say you know bane let's see if that
457:02 - works
457:03 - you know thanos i know that works ooh
457:06 - bane has nice combat
457:08 - why is this power like only 51 do we
457:11 - have superman here
457:13 - oh cyborg superman that is badass
457:16 - durability 100
457:19 - power 100 speed 93 strength
457:22 - i mean yeah but i don't really like
457:23 - superman because he's just overpowered
457:25 - it's like oh he just has like literally
457:27 - every power on the planet it's like
457:29 - how's that a fun superhero
457:32 - i need my superheroes to kind of be like
457:34 - weak but then use intelligence and
457:36 - that's pretty cool
457:39 - um or maybe that's how i was because i
457:41 - went to chess club
457:43 - and i resonate with those heroes more so
457:45 - there you go we got this app it's fully
457:48 - working
457:49 - it's doing everything that it needs to
457:51 - do now what i'm going to do is i'm going
457:52 - to move it over for you inside of our
457:55 - javascript course so you have access to
457:58 - this under api
458:00 - i'm going to create a new folder and
458:01 - this is going to be called superhero
458:04 - superhero app or whatever
458:06 - and in here we're going to have a
458:09 - index.html
458:11 - and you don't need to follow along on
458:13 - this one i'm just creating this for you
458:15 - so you you know that this is available
458:18 - to you and so we're gonna paste the
458:20 - index.html in here we'll go here copy
458:24 - the script so command a command c or
458:26 - ctrl a control c
458:28 - and you're gonna paste that in here
458:30 - and then i'm just going to link it all
458:32 - right so now you should actually be able
458:34 - to go to the home page here
458:37 - and you're actually going to see
458:39 - get super heroes right over here
458:42 - right and you'll be able to click in to
458:43 - get superheroes
458:45 - and then the app should show up here so
458:47 - you could do random here and it'll
458:48 - generate a random hero
458:50 - or you could ask for
458:52 - thanos
458:54 - and search
458:56 - and it'll bring up thanos for you okay
458:59 - and if you want to make this app a
459:00 - little bit more robust meaning like
459:03 - well actually i think if you tried
459:06 - thanos let's see if that works
459:08 - search oh that still works so that's
459:10 - pretty cool
459:11 - spider
459:13 - man
459:14 - let's try
459:15 - okay so the app is actually smart it can
459:17 - it can detect that normally what you do
459:19 - is you call dot to lower case on this so
459:23 - then like whatever user types it just
459:24 - lowercases it and then you do whatever
459:26 - you want with it but this is fine
459:28 - so there you go your app should be
459:30 - working here and should be available to
459:32 - you
459:33 - in your javascript course you'll be
459:35 - you'll be able to click it and see how
459:37 - it functions and uh this will be the
459:40 - solution file for you okay so the
459:42 - solution will be available for you here
459:44 - and you can just kind of go and play
459:46 - around with it and use it or for bonus
459:48 - points you could replace this with your
459:51 - own code okay so if you want to be real
459:53 - pro go ahead and copy paste your own
459:56 - code that you just did in the other
459:57 - repel right paste it over it and
460:02 - see if this still works and if it does
460:04 - you're a real champ because i want you
460:06 - to have this entire javascript course
460:08 - should essentially turn into all your
460:11 - code everywhere here okay so we've
460:14 - covered a lot
460:15 - i hope that you've enjoyed it so far i
460:18 - mean this was a lot of fun covering apis
460:20 - in so much detail and building a mini
460:23 - project
460:24 - i'll see you soon
460:25 - i promise
460:27 - you will be great i promise you're going
460:30 - to be a champion developer one day and i
460:32 - promise i'm going to teach you promises
460:35 - let's get right into it
460:37 - so promises are
460:39 - kind of tricky to understand it throws
460:41 - people off a lot but you and i are going
460:43 - to learn it together just go to
460:44 - replay.com make sure you're here
460:46 - replay.com this is the url and then
460:49 - we're just going to open up a new rupple
460:51 - with html css javascript and let's just
460:54 - say learning
460:56 - promises okay and hit create rubble
460:59 - so we're just going to kind of start
461:00 - from scratch
461:01 - and
461:02 - we're going to walk through kind of
461:05 - real real basics of promises okay so
461:07 - promises introduces the concept of
461:10 - asynchronous programming all right it's
461:12 - a complicated word
461:14 - and i know we've talked a little bit
461:15 - about promises already but now we're
461:17 - gonna start deep diving into promises
461:20 - and looking at it at like bare bones
461:22 - basics and starting from there so
461:25 - asynchronous programming is some piece
461:26 - of code that's going to run out of order
461:29 - okay it's going to happen at a random
461:30 - time so the way that i want you to kind
461:32 - of think about it is like this like
461:34 - imagine you're at a restaurant and you
461:38 - order some food at the restaurant now
461:41 - when you order that food you're still
461:42 - continuing your conversation with
461:44 - whoever you're sitting and eating food
461:46 - with while that food is being prepared
461:49 - you're still talking once the food is
461:52 - prepared the server will bring it up to
461:54 - you or the server will say hey no soup
461:56 - today right that's what they'll tell you
461:59 - so let's go ahead and mimic that type of
462:03 - that type of
462:05 - thing but inside of code
462:07 - okay so i'm going to go ahead and zoom
462:09 - in here so you can actually see a lot
462:11 - more clearly let's do it like this
462:14 - all right and let's say that you're the
462:16 - server or let's say that there is a
462:19 - server
462:20 - and you're going to
462:21 - you order
462:23 - let's say tomato soup tomato soup
462:26 - meanwhile
462:28 - you continue your converse convo with a
462:32 - friend
462:33 - so your life basically continues so this
462:35 - is your other code running whichever
462:38 - code is ready to kind of go
462:40 - and then once this uh
462:42 - your tomato soup is done
462:44 - your server
462:46 - brings it to you
462:48 - in this case we'll just say
462:49 - if your problem is resolved okay the the
462:53 - order that you requested if your order
462:54 - is resolved then your server will bring
462:57 - soup your server brings you
463:00 - soup
463:02 - okay if it is not whoops if it's not
463:05 - resolved
463:06 - paste
463:07 - what's going to happen
463:09 - is
463:11 - rejected okay so this is other situation
463:13 - that can happen and your server will
463:15 - tell you like
463:16 - no soup today okay so maybe like these
463:19 - are the two things that can happen
463:21 - either you get soup or your server comes
463:23 - in to you and tells you hey
463:25 - no soup today so these are the two
463:28 - different type of scenarios that can
463:30 - happen now in code
463:32 - we're going to try to go ahead and mimic
463:34 - that and kind of write it but first
463:36 - things first i want to teach you how to
463:38 - write asynchronous code right so
463:40 - if you've ever done a fetch request or
463:42 - api request that's an example of
463:44 - asynchronous code the way to mimic that
463:46 - is usually you're waiting for something
463:48 - to come back to you so the way we can
463:50 - actually mimic that is
463:52 - we can write a set timeout function and
463:55 - what this does is it takes in a function
463:57 - so let's say
463:58 - whatever soup okay and just console
464:02 - let's just console log soup for now
464:03 - console log soup and we'll pass it 2000
464:08 - milliseconds now what this means is
464:11 - this function is gonna
464:12 - wait for two seconds and then it's gonna
464:14 - say soup so let's go one
464:17 - two
464:18 - and boom we got soup okay let's run it
464:20 - again one
464:22 - two
464:23 - soup
464:24 - so every single time two seconds happen
464:27 - you get soup so two thousand
464:29 - milliseconds is one second
464:32 - one second
464:34 - okay and so in other words what you can
464:38 - say is if you have a function
464:41 - okay so let's just say you have some
464:43 - funk
464:44 - and this function that you have it like
464:46 - kind of prints out soup or whatever
464:48 - you can just pass in your funk like this
464:51 - let's call it waiting for soup paste it
464:54 - in here
464:55 - run it and this code is basically saying
464:58 - hey set timeout
465:00 - you're gonna you're gonna run this piece
465:02 - of code aka this over here and i want
465:05 - you to wait two seconds oh sorry this is
465:08 - two seconds sorry two thousand
465:09 - milliseconds is two seconds
465:11 - one thousand milliseconds is one second
465:13 - okay
465:14 - uh my apologies on that
465:16 - so you say hey i'm gonna wait for some
465:18 - soup and two seconds i want you to print
465:20 - that out so run i'm gonna wait one
465:23 - second two seconds and then boom i get
465:25 - soup let's run it again one
465:28 - two
465:29 - and i get soup
465:30 - one two
465:32 - and i get soup
465:34 - now let's say you have other bits of
465:36 - code so let's say you have some code
465:39 - which is console log
465:41 - you know you you get to the restaurant
465:43 - with your date
465:46 - and so you
465:48 - start the convo with your
465:51 - date right whoever that is you start the
465:53 - convo
465:54 - and then
465:56 - you continue the convo right but now
465:59 - this is the interesting that happens
466:01 - right so watch this for example
466:03 - and i'm going to take this
466:05 - and paste it here
466:06 - so
466:08 - on line 10 you start the convo and line
466:11 - 12
466:13 - is you it's gonna say still speaking so
466:16 - what should happen well what you would
466:18 - imagine to happen is i'm going to
466:21 - what what i'm what you should imagine to
466:22 - happen is this line runs first then this
466:25 - line runs second and then this line
466:27 - should run third
466:29 - but watch what's gonna happen you start
466:31 - the convo with your girlfriend or your
466:33 - boyfriend whoever
466:35 - and it says still speaking and then you
466:37 - get soup that's really weird right so if
466:40 - i just go and do this and make it really
466:42 - clear this is one
466:44 - this will print out two because this
466:46 - goes in right here and this should be
466:48 - three so you should you should expect to
466:50 - see one two three but watch what happens
466:52 - one and three run first and then two
466:54 - comes out so it seems like if i had to
466:58 - order this
466:59 - it seems like this line of code seems
467:02 - like this line of code
467:03 - runs first and then this line of code
467:06 - runs second and this line of code runs
467:09 - third because this we're waiting for
467:12 - this all right this is like kind of
467:14 - running in the background now let's
467:16 - model this in a more realistic way so in
467:19 - the start you start your convo right you
467:22 - sit down and start your convo and then
467:24 - what we'll actually say is let's call it
467:26 - order soup
467:28 - so you sit down you start the
467:30 - conversation
467:32 - with your partner
467:33 - line 11 you order your soup and then
467:35 - you're still speaking right you continue
467:38 - speaking so let's run this
467:40 - you sit down you order your soup then
467:42 - you wait a couple of seconds and then
467:44 - soup is ready in reality of course the
467:45 - soup is going to take longer than two
467:47 - seconds to get ready but this is just to
467:49 - show you that you can start a request
467:53 - right right on this line is where you
467:57 - basically start your request
468:00 - and then
468:02 - your request is ready at a point some at
468:06 - some point later right you get the data
468:08 - back
468:09 - now when you're dealing with stuff like
468:10 - this with timeout yes you will get back
468:15 - you know kind of what you're looking for
468:16 - but timeout is also not really good it's
468:18 - called it's thread blocking meaning like
468:21 - it will kind of stop you from often
468:23 - times doing other things
468:25 - so when you're dealing with real world
468:27 - data like an api request it's going to
468:29 - return it to you as a promise what
468:31 - you're not going to get back
468:33 - is this timeout thing okay
468:36 - so let's go ahead and kind of model that
468:39 - so let's create our first promise
468:42 - so i'm going to basically go ahead and
468:44 - say
468:46 - const promise one
468:49 - and it's gonna be a new promise okay and
468:51 - this is a promise class we'll talk a lot
468:55 - about classes don't worry if we haven't
468:57 - already you know in in the javascript
469:00 - course if you're watching it in the
469:01 - javascript course there's gonna be a
469:03 - timestamp for promises or if i have it
469:05 - as a video on our youtube channel or
469:07 - sorry not promises with classes go ahead
469:09 - and watch that watch the part with the
469:11 - classes because you'll then really get
469:13 - how
469:14 - like a promise works under the hood
469:16 - because whenever you do new you're
469:18 - actually creating um
469:19 - like a
469:20 - object from a class
469:22 - okay so anyway
469:24 - so promise takes in a function and that
469:26 - function takes in two things it either
469:28 - takes in a or a reject
469:30 - and then it wants you to do something
469:32 - with it okay so now what i'm going to do
469:34 - is i'm going to say
469:36 - set timeout
469:38 - set timeout will take a function and
469:40 - let's just say i'm going to
469:43 - do this
469:44 - and it says soup is ready
469:46 - all right and i'll do the same thing
469:48 - i'll wait two seconds
469:50 - and then
469:52 - what this code will do
469:54 - is write actually inside of this timeout
469:57 - let's go ahead and do this right inside
469:59 - of this timeout so i'm going to do the
470:00 - following so we're going to have a
470:01 - timeout function
470:03 - and inside of this timeout we're going
470:04 - to say is ready and for now we'll set is
470:07 - ready to true
470:09 - so we're going to say hey if the soup is
470:11 - ready and this is how you do ternary
470:13 - operators by the way so i'll show you an
470:16 - example of a ternary operator so if
470:18 - let's say you have a
470:19 - if
470:21 - is ready equal equal true
470:24 - then you know run this
470:28 - um else
470:31 - do this
470:32 - all right so if you have this line of
470:34 - code you could write it in different
470:36 - ways the first thing you can do is
470:37 - actually you can remove this because
470:41 - if this is already true then you don't
470:43 - even need to say equal equal true but if
470:46 - you want to leave it here you can that's
470:47 - not really going to change anything
470:50 - and then what you could do is you could
470:51 - turn it into a ternary operator as well
470:53 - so you could say hey you could remove
470:55 - this
470:56 - and you could do if this is true do this
470:59 - if it's false do this so that's what
471:01 - we're doing here on line 20. we're
471:03 - basically going to say hey if
471:05 - is ready is true then i want you to do
471:07 - hit
471:08 - you know soup is ready
471:10 - otherwise what i want you to do
471:12 - this is where our function ends
471:15 - right and then let's give it two
471:16 - thousand second millisecond wait right
471:18 - here otherwise i'm gonna say no soup
471:22 - today okay so let's just say
471:24 - no soup today
471:25 - something like that
471:27 - and i'll put a little check mark here
471:29 - if you don't have emojis by the way you
471:31 - can get this app called rocket on your
471:33 - macbook
471:34 - all right so now what this is going to
471:36 - do is it's going to run and what i want
471:38 - to do is instead of console.log for
471:41 - promises what we do is we actually will
471:43 - do resolve
471:44 - or reject
471:48 - all right so if uh like if it's a
471:52 - right scenario and you want and it did
471:54 - it correctly then you want to say
471:55 - resolve like so if you did if you made a
471:57 - let's say a api request and you got data
472:00 - back you want to resolve that and return
472:02 - it
472:03 - if you didn't get data back for whatever
472:05 - reason maybe there's a server error
472:07 - maybe the data wasn't ready then you
472:08 - want to reject it so in this case we're
472:11 - going to say go ahead and reject no sub
472:14 - today okay
472:16 - so do this and this is going to be our
472:21 - like first
472:22 - promise that we have uh wrote
472:25 - and i'll remove all of this
472:28 - okay so remember
472:30 - this is to just kind of visually explain
472:32 - it to you how ternary operators work is
472:35 - like this
472:36 - okay so it's right here right
472:40 - this part right here
472:44 - is the condition
472:48 - this part right here runs
472:52 - if you have a true runs if true
472:56 - and this part right here
472:59 - runs if false
473:02 - okay that's how
473:04 - that's how ternary operators work okay
473:06 - so if i put a box around this
473:08 - the term for this
473:10 - if you haven't seen this yet it's called
473:12 - ternary
473:14 - operators
473:16 - so instead of if else condition you'll
473:18 - have this like
473:20 - more specifically it's that like
473:22 - question mark part
473:24 - and the colon here
473:26 - okay cool so i have this promise here
473:30 - and now let's see what happens when a
473:32 - console log this promise so let's see
473:34 - what happens
473:35 - promise one
473:37 - and i'm gonna go ahead and run this
473:40 - and notice what i get back so i'll
473:42 - comment out all of these lines here
473:44 - up at the top
473:46 - let's run this and you notice i actually
473:49 - get back uh something called a promise
473:52 - so wait how is that useful
473:55 - i did this and i'm just getting back
473:57 - something that says promise what the
473:58 - heck does that mean
474:00 - all that's saying is hey you have a
474:02 - promise but that promise has not been
474:04 - fulfilled yet it just started so it
474:07 - started and like i'm just letting you
474:08 - know that it started now i need to tell
474:11 - it to do something once it's resolved so
474:12 - remember it takes two seconds to resolve
474:14 - but when i run this it instantly does
474:16 - promise right
474:18 - so what i want to do is i want to do a
474:19 - dot then
474:22 - and dot then is the special things that
474:24 - a promise has
474:25 - and what that does is if the promise
474:28 - resolves
474:29 - then you can call a dot then and get its
474:31 - value so we can say
474:33 - console log value like this okay and
474:37 - let's run this and you're gonna see
474:39 - first it says promise and then after two
474:41 - seconds it says soup is ready if i make
474:43 - this five seconds so it waits that'll
474:45 - make it even more obvious so it just
474:47 - started and it said promise now after
474:49 - five seconds one two three four five
474:52 - boom
474:52 - soup is ready and it shows up
474:56 - so you can see that this is working kind
474:58 - of the way that we you know expected but
475:01 - this dot then notation for you might be
475:03 - weird but if you have done api requests
475:05 - you'll recall
475:06 - that
475:07 - hey this is that's actually very similar
475:09 - to api requests because that's where you
475:12 - use the dot then thing and that's how
475:14 - you actually pull the value out
475:17 - now
475:18 - what happens if the soup isn't ready so
475:20 - i'm going to go on line 19 and i'm going
475:21 - to change that to false what happens
475:23 - when the soup is not ready
475:26 - well watch what happens we're going to
475:28 - wait five seconds one two three four
475:32 - five
475:33 - and nothing happened
475:35 - what i don't see anything why did that
475:38 - happen that is weird
475:40 - it's because we're not actually
475:42 - catching that mistake okay so let's go
475:45 - right here
475:47 - this is all gonna be one line but i'm
475:49 - breaking it up into multiple different
475:51 - lines so you can clearly see like what's
475:53 - actually happening
475:55 - okay
475:56 - um and so i'm gonna say hey
476:00 - get me the value on success so the dot
476:03 - then is when success happens
476:06 - okay and then there's a dot catch
476:08 - so this is when an error happens
476:11 - okay and so i'm gonna say
476:13 - get me the value in this case
476:17 - and let's run it
476:18 - so
476:20 - watch what happens in five seconds one
476:22 - two three four five and boom no soup
476:26 - today and that's happening because our
476:29 - on catch is actually catching
476:32 - the reject so whenever you have a reject
476:35 - like this
476:37 - that goes into catch
476:39 - and you can actually pull that from the
476:41 - value
476:43 - so
476:44 - let's go ahead and do
476:47 - i'll say error
476:50 - okay
476:51 - and we'll just make it an object
476:54 - error
476:56 - error
476:59 - and here we'll say success message and
477:02 - i'll say success and an object like this
477:05 - so we'll run this and now you'll see
477:07 - this promise will run and then in five
477:09 - seconds it will get get you
477:11 - okay so in this case here it said error
477:13 - no soup today okay
477:16 - and what we'll do is we'll make this
477:17 - function two seconds and what i want to
477:19 - do here is instead of false or true i
477:21 - want it to randomly select true or false
477:24 - so i'm going to put true or false i'm
477:26 - going to make an array and then we're
477:27 - going to index that array if we index it
477:29 - by zero we're going to get false if we
477:31 - index it by one then we're going to get
477:32 - true what i actually want to do here is
477:35 - i want to index it
477:37 - by something random right so i'm going
477:39 - to say math.random
477:41 - and then i'm going to
477:45 - let's actually call math.floor
477:46 - math.floor
477:48 - and in that i'm going to say math.random
477:52 - and we're going to multiply it by 2.
477:55 - okay
477:56 - so
477:57 - this piece of code here will always make
478:00 - sure i either get a 0 or a 1. that's all
478:03 - that piece of code is doing
478:05 - so this way i'll pick a random true or
478:08 - false and so that way it'll randomly
478:10 - either
478:10 - resolve or reject
478:12 - and i'm kind of mimicking a real
478:15 - situation here
478:16 - fifty percent chance it'll work fifty
478:17 - percent chance it won't but that's not
478:19 - how good apis are right good apis work
478:23 - 99.999 percent of the time and there is
478:25 - this tiny bit of time where they break
478:28 - or return some kind of error so
478:30 - that would be a terrible api if it
478:32 - worked only 50 of the time
478:35 - so let's run it
478:36 - and boom on success we got soup is ready
478:39 - okay let's run it again
478:41 - we'll wait two seconds
478:43 - and we got nothing so what happened here
478:46 - we might we must have had
478:48 - a weird error oh no it just took longer
478:51 - than two seconds apparently and then
478:53 - boom error no soup today
478:56 - right and i can keep running this and
478:58 - it'll randomly keep selecting and then
479:00 - it'll just check hey if it's ready is
479:02 - true run this and if it's false
479:04 - it will run the next statement right
479:07 - because all it's doing here is putting
479:08 - either a true right if i put a true here
479:10 - and i run
479:11 - you'll see that i'll always get and
479:13 - let's make the wait one second so we
479:15 - don't have to wait that much
479:17 - so if i say true it's always going to
479:18 - give me back success
479:20 - and i can run it a million times and if
479:23 - i hardcode false here you'll see that
479:25 - it'll always give me back error
479:28 - so we're just going to put israeli here
479:30 - because israeli is either going to be
479:31 - true or false
479:34 - okay great
479:36 - so now you can see
479:38 - how our promise is working
479:41 - and this promise is extremely similar
479:45 - to the promise that
479:48 - we had in our
479:50 - you know the dog application we made and
479:52 - the superhero application we made and
479:54 - actually let's go ahead and reference
479:56 - that
479:57 - so
479:58 - so go let's go back to our javascript
480:00 - course and if we go to
480:03 - uh dog random and we look at the script
480:07 - right
480:08 - notice
480:10 - that we're doing something very similar
480:12 - here right we have this fetch request
480:14 - and let's actually bring that in here so
480:16 - we can actually play with it
480:20 - so i'll run this and watch what happens
480:23 - okay
480:25 - and i'll console log this for you
480:27 - console.log and you'll see that'll
480:29 - actually say it's a promise
480:31 - and to make it visible that i'm console
480:33 - logging this i'm just going to say fetch
480:38 - like that
480:40 - do it run
480:41 - and you can see that it's telling me
480:43 - that hey the fetch promise has began it
480:46 - has started but now i actually need to
480:48 - do something with it so what i actually
480:50 - need to do in this case is i want to do
480:56 - let's do
480:57 - let's do this
480:59 - okay so i'm going to do fetch
481:02 - and then on another line so like
481:04 - normally i want to do this but you see
481:05 - how the line is running so long that
481:07 - it's going to be too long so i'm going
481:09 - to break it up onto a new line so i'll
481:11 - hit enter
481:12 - so we're going to say fetch dot
481:15 - then
481:17 - and i'm going to get the response
481:21 - and we're going to get the json response
481:23 - back now here's the interesting part if
481:26 - i console log
481:28 - this part here you're going to notice
481:30 - that this actually
481:32 - is also a promise so let's console log
481:35 - this part and i'll just say
481:37 - response
481:39 - and we'll run it
481:42 - and notice that response is a promise
481:45 - response json is a promise too
481:48 - so when you run this call majority of
481:50 - the times you're sending another request
481:53 - and saying hey can you please turn it
481:55 - into a json and then that is also an
481:57 - asynchronous task that could take
481:59 - multiple seconds before returning so
482:02 - it's kind of like this invisible coding
482:04 - that you're doing here right so
482:06 - we have the fetch promise once it's once
482:09 - it resolves
482:10 - once the fetch promise resolves
482:13 - i want you to
482:16 - run the response promise with the json
482:20 - and guess what guess what you're gonna
482:22 - have to do in order to pull a value from
482:25 - that
482:27 - promise
482:28 - you're gonna have to chain it with
482:30 - another dot then okay so we're gonna
482:32 - have to go and chain it with another dot
482:34 - dense i'm gonna go down here
482:36 - and we're gonna say another dot then
482:38 - and we're gonna say data or json or
482:41 - whatever
482:42 - you're gonna say console log
482:44 - data okay this this variable here does
482:46 - not matter you can call it whatever you
482:47 - want and if you ever hear that that's
482:49 - just me using a focus app to keep me
482:52 - focused to keep shooting this so if you
482:53 - ever hear that i apologize it'll happen
482:55 - every
482:56 - 20 30 minutes or something like that
482:58 - just ignore it
483:00 - all right let's run this
483:02 - okay so what did we get
483:04 - we got oh yeah
483:06 - we gotta do not console log
483:10 - all right so make sure to remove that
483:11 - console log that we had remove this part
483:14 - right here
483:15 - and just return response.json like this
483:19 - and then do data and call data on this
483:21 - so let's run that
483:24 - and now you can see that we actually got
483:26 - back
483:27 - the random dog image that we're looking
483:29 - for okay so when you're doing fetch
483:32 - remember
483:33 - fetch is a promise
483:35 - and then you do the dot then
483:38 - response and then that's also a promise
483:41 - okay so this is a promise
483:44 - that's a promise okay so there's like
483:46 - everything is a promise
483:48 - all right and then within here within
483:51 - right here
483:53 - you you have access to the actual data
483:55 - right there you actually get the real
483:57 - real real data and you can do something
483:59 - with it okay so that's why
484:02 - that's like a little bit of a funny
484:04 - reason why that happens but but
484:05 - underneath the hood it's a promise
484:08 - now i'm going to teach you something
484:11 - that's going to make your life a lot
484:12 - easier moving forward
484:14 - and it'll also help you avoid having to
484:17 - do dot dance and dot catches because
484:21 - they get pretty annoying as you can see
484:23 - you'll have to keep chaining and this is
484:25 - essentially one line of code right if i
484:28 - actually remove the wrapping or whatever
484:30 - like this is not how you want to be
484:32 - writing your code honestly with like
484:34 - that many.then.then.then.catch
484:37 - because then you'll have to attach dot
484:38 - catch they'll catch any errors that
484:40 - happen
484:41 - and honestly it becomes kind of a
484:44 - nightmare and so
484:46 - what you want to do
484:47 - is you want to avoid using this syntax
484:51 - and you want to use the new syntactical
484:53 - sugar that like es6 and beyond provided
484:56 - for us and that will make our life
484:58 - incredibly incredibly easier
485:01 - and so i want to introduce you to you
485:03 - the concept of
485:06 - async await okay it's incredibly easy
485:10 - it's not hard
485:11 - it
485:12 - will make this part a lot easier it'll
485:15 - seem a little foreign and weird the
485:17 - first time you look at it but once you
485:18 - get used to it that's the way to go and
485:20 - your code and your logic is going to
485:21 - become a lot easier okay
485:24 - so
485:25 - this fetch request that we're doing here
485:27 - right
485:28 - we want to avoid all these dot dens and
485:30 - make it simpler so let's create a new
485:32 - function
485:33 - and we're going to say get get dog
485:37 - whatever and now what we're going to say
485:40 - this is the most important part is
485:42 - whenever you want to use
485:43 - a weight
485:44 - you're going to need to use async
485:47 - okay so make sure so what we're going to
485:49 - do is
485:50 - just pass in the async keyword here
485:52 - which just says hey this is an
485:53 - asynchronous function so this function
485:57 - uh will run out of order if this
485:59 - function will need to communicate to the
486:01 - internet or get some type of data or
486:03 - we'll need to wait uh half a second a
486:05 - millisecond a couple of seconds to get
486:07 - this data async just means whenever you
486:09 - have to like
486:11 - speak to some website or some database
486:13 - or something
486:14 - you're using an asynchronous function
486:16 - there like 99.9 okay so
486:20 - whenever you think api requests think
486:22 - async whenever you think i'm going to do
486:23 - a fetch request think async functions
486:26 - whenever you have a post request
486:28 - async function
486:29 - all right so i have this async function
486:32 - over here
486:34 - now with this async function um what i
486:36 - want to do is i want to say
486:39 - fetch
486:40 - response is
486:42 - and i'm going to fetch this image okay
486:46 - the only special thing that we're
486:48 - actually going to do here
486:50 - is since this url run real
486:52 - url runs really long i'm just going to
486:54 - say const url and pass that in so we
486:56 - could just actually say url
486:58 - and then i don't need to make this this
487:00 - huge we can make this much smaller i can
487:03 - make this bigger here
487:05 - so i have my url and i'm just going to
487:07 - fetch that url and then what i'm going
487:10 - to do
487:11 - is i'm going to
487:13 - get the data
487:15 - and here here's the interesting part so
487:17 - for this what you want to do is you want
487:18 - to pass in this keyword a weight all
487:20 - right this is very important a weight a
487:23 - weight is the same thing
487:25 - as you
487:27 - doing
487:28 - dot then
487:30 - and then saying respond something okay a
487:33 - weight will make your life a lot easier
487:36 - so we're going to say oh wait then next
487:38 - line
487:39 - i'm going to say const data and i'm
487:42 - gonna say
487:43 - await
487:45 - response.json
487:47 - so look at that we have our fetch
487:50 - requests and then we have our
487:51 - response.json
487:53 - and that's being stored inside of data
487:56 - and now you can use the data variable
487:58 - kind of anywhere you want inside of this
488:00 - function it'll work
488:02 - everywhere and it'll work normally and
488:04 - then you don't have to like you're not
488:05 - forced you're not forced to like code
488:08 - inside of this then
488:11 - method like that's kind of ugly and
488:12 - annoying
488:14 - and now you could use
488:15 - console log data
488:17 - so let's try this and run it okay and
488:19 - you can see that
488:21 - um i got back my oh actually sorry we
488:24 - didn't call this function yet that's why
488:25 - i was like this was something weird is
488:27 - happening all right let's run this
488:29 - and you can see that we're now getting
488:31 - our our random dog
488:34 - right over here okay i'll comment out
488:36 - this fetch right here
488:38 - let's run it again and you can see that
488:40 - i'm actually getting back my dog so this
488:43 - syntax is
488:45 - really really really clean it's a much
488:47 - much much better syntax so in order to
488:50 - use this you have to create a function
488:53 - you cannot use so here are the rules
488:56 - rules for using
488:58 - async
489:00 - await
489:02 - one
489:04 - you must
489:06 - create a function
489:08 - okay you cannot use async outside of a
489:11 - function it won't work so you can't like
489:14 - do this here or something like that that
489:17 - it won't work like that so you need to
489:19 - have a function
489:20 - all right you can't like use a weight
489:22 - like this
489:24 - you need a function that's called async
489:26 - and then you can do all your jiggery
489:27 - pokery all right that's step one
489:30 - two
489:32 - you
489:32 - must
489:34 - use
489:36 - must create
489:37 - um let's use
489:39 - keyword
489:41 - async
489:42 - use the word
489:44 - await
489:45 - so anything you're waiting for you just
489:47 - await it right so here we're gonna await
489:50 - this promise and then we're gonna await
489:52 - the second promise
489:54 - and that's it those are the only two
489:55 - promises right this is a promise
489:58 - and then this is a promise and then once
490:00 - you are done waiting for them
490:02 - you just get back the actual data and
490:05 - then you can do whatever you want with
490:06 - it right so that data gets stored here
490:09 - it's a much much much nicer way to write
490:11 - it so try to do it like that now
490:13 - i'll give you a little exercise
490:15 - see if you could do this soup example
490:17 - that we just did see if you could do
490:19 - this
490:20 - but using async await for this promise
490:23 - right here rather than the dot dance
490:26 - okay so see if you create a function
490:28 - let's you can call it whatever you want
490:30 - like get soup or something right and
490:33 - then see if you could turn this piece of
490:35 - code
490:36 - into
490:37 - this
490:39 - all right so take like five seconds give
490:41 - that a try so i'll give you five seconds
490:43 - five
490:44 - four
490:46 - three
490:47 - two
490:48 - one
490:50 - all right if you haven't paused it
490:52 - or you pause it whichever one hopefully
490:54 - you gave it a try let's go ahead and now
490:56 - do this together okay so i'm going to
490:58 - say const get
491:00 - soup
491:01 - and we'll do this way and then here i'm
491:03 - just going to say
491:05 - const
491:06 - soup is a weight
491:09 - promise
491:11 - and then we can probably console log
491:13 - soup and let's see if this works okay so
491:16 - get soup and i'm gonna run this
491:19 - see i ran into that problem myself i
491:21 - forgot to put i mean and what's nice is
491:22 - that it actually gives us a nice error a
491:25 - weight is only valid in async functions
491:28 - and at the top level body of modules so
491:30 - let's go ahead and put async
491:32 - and run this so boom there we go error
491:35 - no soup today right if i remove a weight
491:37 - watch what's going to happen and if i
491:38 - run this it's just going to say promise
491:41 - right here i'm not going to get anything
491:43 - else i'm going to comment at every other
491:45 - console log statement so we don't get
491:47 - confused
491:48 - that's it it just says promise and then
491:50 - that's kind of it but the only way to
491:52 - get the data out of it
491:54 - is you just say oh wait
491:57 - and now that same thing that was
491:58 - initially saying promise
492:01 - now we'll actually return you
492:03 - data
492:04 - okay i don't know why it's taking that
492:06 - long why is it taking forever okay there
492:08 - we go soup is ready perfect let's run it
492:10 - again and let's see what it says this
492:12 - time soup is ready let's run it again
492:14 - mmm
492:15 - so that's weird how come sometimes it
492:18 - says when the soup is if i run it if
492:21 - soup is ready
492:22 - you know it says it correctly but if
492:24 - soup is not ready it returns nothing
492:27 - isn't that a little sus what's going on
492:30 - so what's going on is now you have to
492:33 - try catch this
492:34 - so
492:35 - if you get an error
492:37 - you're not doing it you're not able to
492:38 - do a dot catch like how you were before
492:42 - so that's what's happening we're getting
492:43 - in a reject reject and reject is not
492:46 - going to get stored in here so what you
492:47 - want to do is you want to say try and
492:50 - you want to wrap this in a try catch so
492:52 - what i can do is i can say try
492:55 - and we try this and we console log
492:58 - and then we do catch
493:01 - okay and we just let's just say console
493:04 - log soup and let's see what happens soup
493:07 - is ready let's run it again
493:09 - soup is ready okay so see we got
493:11 - something that was an error interesting
493:13 - so maybe let's pass in
493:16 - let's catch the error here and let's see
493:18 - if we can print the error out so let's
493:20 - run it and let's hope we run into an
493:22 - error and let's see if it actually
493:24 - prints out our error or not okay soup is
493:26 - ready soup is ready
493:28 - boom there we go no soup today so if you
493:31 - want to catch
493:32 - this is how you catch with async awaits
493:35 - in tax
493:37 - so the catching is not the prettiest
493:40 - but i will just promise you this that if
493:42 - you start using async await a weight
493:44 - will make your life
493:45 - a lot simpler and they'll simplify your
493:47 - code a lot and then
493:49 - it'll be much easier for you to deal
493:51 - with things when you're doing
493:52 - asynchronous programming so a weight is
493:55 - really
493:56 - like the way to go
493:58 - all right now what if we want to take
493:59 - this example further meaning
494:02 - if you promise the waiter or the waiter
494:05 - promises you that they're going to bring
494:07 - you soup well if they bring you soup
494:09 - then that's good now what how can we
494:12 - take this even further if the waiter
494:14 - brings you soup then maybe you also
494:18 - pay the waiter okay so let's let's write
494:20 - these up here
494:22 - so if waiter brings you soup
494:25 - maybe then you tip the waiter
494:27 - and you
494:29 - you pay for soup
494:31 - on the other hand if you don't get your
494:34 - soup so this is like what happens if the
494:36 - situation is resolved
494:38 - but if it's rejected and it doesn't go
494:41 - through and your soup is declined for
494:43 - whatever reason or they didn't have soup
494:45 - then maybe you
494:46 - you know you're you're a crappy customer
494:48 - and you leave a bad review
494:51 - and uh you give no tip all right so how
494:55 - are you going to actually
494:56 - you know
494:57 - write that in code so see if you could
495:00 - give that a try and see if you could
495:02 - take this
495:03 - or the dot down one farther
495:06 - and see if you can kind of um
495:08 - add in all of this sauce like in terms
495:12 - of
495:12 - adding in a bunch of these things okay
495:14 - and just you could create arbitrary
495:16 - variables like
495:18 - uh tip for the waiter so you could
495:20 - create a variable called tip you could
495:23 - create a variable called pay and you can
495:25 - just kind of set what happens to that
495:27 - but the main thing i'm looking for is
495:28 - you know
495:30 - where to write those lines of code okay
495:33 - that's mainly what i'm looking for
495:35 - so give that a give that a try and then
495:38 - we're going to do this together so i'll
495:39 - give you about five seconds so go five
495:42 - four
495:43 - three
495:44 - two
495:45 - one
495:46 - all right let's do this together now
495:50 - so i have this
495:51 - you know so we have either whether it's
495:53 - resolved or rejected now everything
495:56 - that's resolved in my mind is going to
495:58 - go inside of this try block and
496:00 - everything that's rejected is going to
496:02 - go inside of this catch block right so
496:05 - say we have
496:06 - you know cons and and maybe we can give
496:08 - a ra rating you know why not so let's
496:11 - say we have
496:12 - let rating
496:14 - we define another variable
496:16 - let tip and we define another variable
496:18 - let pay okay
496:21 - and if
496:23 - this if we got our soup as promised
496:26 - well then what i'm going to do is i'm
496:28 - going to say i'm going to increase the
496:30 - rating to say i'm going to say hit i'm
496:32 - going to rate this place five stars
496:34 - and i'm going to
496:37 - say the tip is
496:39 - you know maybe 20
496:42 - and i'm gonna pay
496:44 - you know ten dollars or whatever for the
496:47 - food and then on the other hand
496:50 - if the and then for review maybe i give
496:52 - a five star review here right
496:54 - but on the other hand if i don't get
496:56 - what i want
496:58 - then i'm going to leave a rating of one
497:01 - star
497:02 - i'm going to leave no tip
497:04 - i'm not going to pay anything because
497:06 - while i didn't get anything and then
497:08 - review i'm going to leave one star
497:11 - okay so we can kind of do that
497:13 - and what we could do is actually we can
497:15 - even turn this into an object i'm
497:17 - thinking something let's do that
497:19 - actually
497:21 - uh const
497:23 - data okay let's just say data because
497:25 - that's how usually
497:27 - you get data
497:28 - rating is zero and tip is zero and p is
497:34 - i'm just gonna say zero i mean it should
497:35 - be kind of null okay because those are
497:38 - data types as well null and undefined
497:40 - so
497:41 - you could do null or undefined if you
497:43 - want to be like really accurate because
497:45 - these aren't defined yet actually
497:47 - all right so pay is zero and review is
497:50 - zero and let's actually use those data
497:52 - types afterwards and i'm gonna remove
497:54 - this
497:54 - and then
497:56 - we're just gonna say
497:58 - data.rating data.tip data.pay
498:02 - data.review and then we're going to do
498:04 - the same thing here
498:05 - so now it's actually even looking kind
498:07 - of like a real api
498:09 - which is interesting
498:11 - and then at the end of all of this
498:14 - whichever one we're going to return data
498:18 - and return data
498:21 - okay the try catch block
498:23 - so now if i do soup and i'll do console
498:27 - [Music]
498:28 - log
498:29 - now let's run it
498:30 - and watch what's going to happen so
498:32 - promise is running soup is ready
498:34 - all right why didn't we get our data
498:37 - why did we not get
498:39 - our data let's see every console logging
498:42 - it we are
498:44 - are we running yeah we're running at
498:46 - soup interesting
498:47 - yes this is the magic of
498:51 - uh asynchronous information right that's
498:53 - the problem with it so i can get caught
498:55 - up but i can get caught off guard with
498:57 - it too even though i've been programming
498:59 - for years so it is complicated
499:01 - see here if i actually run this it's not
499:04 - going to work because this function runs
499:06 - instantly
499:07 - and then i'm sitting there and waiting
499:09 - for the data so i actually have to await
499:11 - this data and get the results back
499:14 - because it's a promise and i need to
499:16 - retrieve the data but i can't just await
499:18 - it right so i have to actually
499:21 - so what i need to do is this
499:23 - say i want to remove this console log on
499:25 - line 47 and i still want it to actually
499:27 - read the console what i want to what i
499:30 - want to do is get soup right i want to
499:32 - actually call
499:34 - this is a promise getsu is a promise
499:38 - right and it returns when we run
499:40 - asynchronous function it's going to
499:41 - return
499:43 - uh return a promise okay so in order to
499:46 - get this function we can't just call it
499:50 - right when you just try to call it it's
499:51 - not really going to do anything so what
499:52 - i want to do instead
499:54 - is i want to do dot then and i'm going
499:57 - to say
499:58 - value and we'll console log the value
500:01 - that we get out of it
500:03 - let's run this now and now you can see
500:05 - the soup is ready and we got this data
500:08 - so we're go we're actually got the data
500:10 - back that we were looking for
500:12 - right and then here i can actually see
500:14 - that the rating is five tip is twenty
500:16 - percent pay is ten dollars reviews five
500:18 - stars if i run this again
500:21 - and oh no soup today well guess what
500:23 - rating is one tip is zero pay is zero
500:26 - and review is one star
500:28 - so that's how
500:30 - that's how this works hopefully like
500:33 - this makes sense for you on
500:35 - you know kind of
500:36 - how this
500:38 - how you actually do this how all of this
500:39 - works
500:40 - so here's a simple trick for you to
500:42 - remember if you're struggling with
500:44 - promises or you've ever struggled with
500:46 - promises or i promise you will struggle
500:48 - with promises you know in the future
500:52 - if you ever so let's just do this okay
500:54 - so
500:55 - see say if you console log get soup and
500:57 - you're like how the hell do i get the
500:59 - value out of this why can't i extract
501:01 - the value out of it
501:02 - if you ever read that something says
501:04 - promise there's only
501:07 - two ways to ever extract the actual
501:11 - value out of this it's only two ways
501:14 - either you await it
501:16 - which you're going to need to wrap that
501:18 - in a function that has async
501:20 - you're either going to need to await
501:22 - this
501:23 - or
501:24 - you're going to need to
501:26 - dodge then this all right and then just
501:28 - do
501:29 - value
501:31 - value right return the value
501:33 - so those are the only two ways you
501:35 - actually get data back from an async
501:38 - function
501:40 - or any type of asynchronous task or
501:42 - asynchronous promise even if you make a
501:45 - sum function and let's say you make a
501:47 - async sum function
501:48 - that takes in two values a comma b and
501:51 - returns their sum a plus b
501:54 - if you call this function right watch
501:56 - what's gonna happen
501:58 - so if i call this function i pass it one
502:00 - comma two and then let's just say sum
502:02 - here and i'll run this
502:04 - even if it's something simple like this
502:05 - watch what's gonna happen when i run it
502:07 - i ain't got back the results son what
502:10 - the hell why not get back the result i
502:13 - clearly defined this there isn't even
502:15 - any asynchronous parts to this i'm just
502:17 - clearly saying sum up a plus b why are
502:20 - you playing games with me
502:22 - but because we have the async keyword
502:24 - it's an asynchronous function which
502:26 - means by default it returns as a promise
502:29 - so the only way to extract the value out
502:31 - of this you give it a try i'll give you
502:33 - five seconds five and you can pause the
502:36 - video five four three two one
502:40 - only two ways either you call a weight
502:42 - or
502:44 - async my friend so
502:47 - let's go ahead and do async here
502:49 - uh or sorry either await or dot then so
502:52 - let's do then and we'll say console.log
502:55 - or sorry we'll say value
502:57 - console.log
502:59 - value just like this and now let's run
503:02 - it and you're gonna see that we got back
503:04 - to three
503:05 - that three we extracted right away so
503:09 - that's how async functions work
503:12 - and
503:13 - any type of async stuff that you have if
503:16 - you want to extract its value you're
503:17 - gonna have to start using
503:19 - dot thens to retrieve value for them
503:21 - especially if they return data like this
503:24 - all right so hopefully
503:26 - that gave you some examples of how this
503:29 - works
503:30 - all right
503:32 - this probably isn't going to solve
503:34 - everything for you but it's going to
503:36 - give you examples and what we're going
503:38 - to do is in notes here in your
503:40 - javascript course that you're going
503:42 - through right now
503:43 - in notes i'm going to create a file and
503:46 - i'm just going to call it async
503:49 - let's call it promises async awaits it
503:53 - apis whatever okay and uh let's uh
503:56 - let me call it dot json dot js
504:00 - and i'll paste in all these kind of
504:02 - notes for you as reference point
504:04 - so you don't lose them so if you want to
504:05 - go in notes you can look at it okay
504:08 - and then here's another note for you
504:11 - that lance has created these are really
504:13 - nice and really helpful it kind of goes
504:15 - through some of what we've talked about
504:17 - and plus it asks you lots of questions
504:19 - and gives you lots of written notes for
504:21 - promises to practice them more and to
504:24 - really understand them more right so he
504:26 - walks you through hey how do you get the
504:28 - promise variable how do you increment
504:30 - the waiter money
504:32 - how do you
504:33 - you know how do you do the async await
504:36 - plus try catch
504:38 - he has an example that's like an actual
504:40 - working example and if you want to run
504:42 - any of these examples open up a new
504:43 - rupple copy paste copy this code paste
504:46 - it in there and it'll work
504:48 - and how to actually get this data okay
504:51 - so here we're doing return user and just
504:54 - remember since this is an async function
504:56 - you're gonna have to actually extract
504:57 - its value out of it
505:00 - so we have those
505:01 - exercises those notes
505:04 - here for you if you want to get more
505:06 - practice with the javascript course if
505:08 - you're not in this javascript course or
505:10 - whatever make sure you're watching this
505:12 - on youtube just type in javascript
505:14 - and
505:16 - you should find this all right so with
505:18 - that said i hope you enjoyed this i hope
505:20 - you learned something about
505:22 - promises
505:23 - and i know it's confusing but if you
505:26 - really
505:27 - stick to it and keep practicing you'll
505:30 - keep getting better with proc
505:32 - with promises
505:34 - and
505:36 - if you can just really work hard and
505:38 - understand this concept of promises now
505:41 - your journey to becoming a developer
505:43 - will become
505:45 - much much much easier because there are
505:48 - so many
505:49 - concepts that are asynchronous when it
505:51 - comes to web development
505:52 - and non-understanding promises will
505:55 - always get you in a lot of trouble
505:57 - all right with that said i hope you
505:59 - enjoyed this and one last thing i i said
506:02 - i was going to talk about null and
506:03 - undefined you could make these like
506:06 - you know null types because
506:09 - if you didn't give a review it should
506:11 - really be type null
506:13 - right
506:14 - and uh let's just say we don't define
506:16 - any values there and if i run this i
506:17 - should get back like null types
506:20 - if uh you know my soup is order right no
506:22 - no no no
506:24 - okay which which makes sense because by
506:27 - default
506:28 - why would you give a rating of zero by
506:30 - default right that doesn't make sense
506:31 - that would mean you literally go to a
506:33 - restaurant rated zero you actually paid
506:37 - zero but you haven't been to that
506:39 - restaurant so it's actually null it's
506:40 - not it's non-existent or undefined
506:43 - either
506:44 - you can use either one of those and
506:46 - that'll represent a similar thing in
506:47 - this scenario so null is a special value
506:50 - and undefined is usually also a special
506:53 - value
506:54 - all right with that said i hope you
506:55 - enjoyed this let's keep on going let's
506:57 - keep on learning
506:59 - all right let's take your api skills up
507:01 - a notch we're going to build this
507:03 - weather app right over here i can type
507:06 - in arizona
507:08 - hit search
507:09 - temperature is 90 degrees max is 95.
507:13 - i can type in chicago search
507:16 - 91 max is 94 and min is 88 and it's
507:20 - clear right now
507:22 - or i can type in
507:24 - las vegas where i actually just was at
507:26 - and i got very very sick playing a chess
507:29 - tournament wasn't because of the chess
507:30 - tournament it's just vegas as a cesspool
507:33 - of crazy humans doing wild things and so
507:36 - got a crazy sinus infection but now i'm
507:38 - recovering so
507:40 - anyway it was hot it was 120 degrees
507:42 - there when i was there so there you go
507:45 - this is the app this is what you're
507:47 - going to be building right now with the
507:49 - api knowledge that you've learned so
507:51 - let's go ahead
507:52 - and set some ground rules for this and
507:54 - let me actually also show you
507:56 - what you actually need to know in order
507:58 - to be able to build this okay so first
508:00 - thing we're gonna do is let's open up a
508:01 - new tab and let's go to replay.com we're
508:04 - gonna just open up one with html css
508:08 - javascript okay this one right here and
508:10 - let's just say
508:12 - api weather okay and hit create replica
508:15 - cool so this should just be empty right
508:17 - now
508:18 - and then let's go over and open a new
508:20 - tab
508:21 - and we're going to go to
508:22 - rapidapi.com just type in rapidapi.com
508:26 - now once you're on this website
508:28 - sign up i am currently logged in okay so
508:31 - i can log out but like sign up with
508:33 - either github or google or whatever it's
508:36 - free just sign up
508:38 - and then it'll bring you to like
508:40 - rapidapi.com
508:42 - all right on here just search for api so
508:44 - we're going to search for a weather api
508:46 - so i'm going to just type in weather and
508:48 - hit enter and you'll see over here that
508:51 - it shows open weather map this is the
508:53 - one that we're going to be using this is
508:55 - the easiest one to use and why we're
508:57 - using rapid api is because they make
508:59 - using apis really really really easy
509:02 - so
509:03 - let's use them okay they're freaking
509:05 - awesome so let's click on open weather
509:07 - map api and i'm going to zoom out just a
509:10 - little bit so you can see
509:12 - you can see a little bit better here
509:14 - let's drag this
509:15 - back
509:16 - now you can see our api request is
509:18 - getting set up i'm going to hover over
509:21 - this where it says node
509:22 - axios whatever we're going to switch
509:24 - that to just javascript fetch because we
509:26 - want to see how to do
509:28 - that request in fetch
509:30 - and this is already kind of showing us
509:33 - how to retrieve the data from this open
509:36 - weather api okay
509:38 - it's putting in a key
509:40 - it's making a request to the open map
509:43 - open weather map api and it's trying to
509:46 - pull some data from there now there's
509:47 - just a couple of things we're going to
509:49 - need to do so in order to even use the
509:50 - free one just we're gonna need to
509:52 - subscribe to test it doesn't take in a
509:54 - credit card or anything like that so
509:56 - just hit subscribe to test
509:58 - and then choose the one that's a zero
509:59 - dollars okay this is not gonna ask for a
510:02 - card it's just free just hit the
510:03 - subscribe button so we're just going to
510:05 - hit subscribe
510:06 - click back on api documentation all
510:09 - right perfect let's go back to the
510:10 - javascript fetch mode all right and
510:13 - just clean up some of these things over
510:16 - here so for example this over here i'm
510:18 - going to replace that with chicago so
510:20 - you're going to notice that it actually
510:22 - updated that dynamically in the url that
510:25 - we had remove this all the option
510:27 - optional ones just remove them double
510:29 - click and remove double click and remove
510:31 - double click and remove imperial you can
510:33 - leave that and then xml double click and
510:36 - remove so your your url should look
510:39 - pretty simple fetch url should look
510:41 - pretty simple right now okay so if i
510:43 - zoom into this
510:45 - should basically just say
510:47 - community open weather map
510:50 - blah blah blah and then
510:52 - units imperial okay and the city should
510:55 - be chicago for now let's see what
510:58 - happens if i actually try to run this so
511:01 - let's go up at the top let's hit
511:03 - test endpoint
511:05 - run and boom you see that it's actually
511:08 - already
511:09 - giving us back a result
511:11 - okay so let's scroll down here a little
511:13 - bit
511:14 - and you can see we have a result here so
511:16 - we got 13 items back and i'm gonna just
511:19 - close all of these
511:22 - items that it sent and it sent us back a
511:24 - couple of you know it's an object with
511:26 - like a bunch of different properties
511:28 - right so we have a cod a name which is
511:32 - chicago the id of this specific place
511:35 - what time zone it is in all right
511:37 - whatever this dt thing is
511:40 - clouds wind visibility the stuff that
511:42 - we're going to need
511:44 - is we're definitely going to need to
511:46 - pull from weather so we can pull things
511:48 - like main
511:49 - it's like clear okay because if we go
511:51 - back to our app our weather app you can
511:54 - see that we have this clear here so
511:56 - we're going to need to pull this and
511:57 - then after that we just need to pull
511:59 - these different three different ones so
512:01 - temp min temp and max temp so if i go
512:04 - back to rapid api where is min temp max
512:07 - temp
512:08 - let's take a look at that so let's see
512:10 - if we can find the mint max temp all of
512:13 - that so i'm gonna look inside of main
512:16 - and here we have temp min temp max and
512:20 - temp so we have all of the things that
512:22 - we need so it seems like we get them
512:24 - back in this object and then the key
512:26 - that it's in is main okay so for example
512:29 - if i was to imagine what i will be doing
512:31 - is i'll get back some something like
512:34 - data and then from data i'm gonna have
512:36 - to get access to maybe the first data
512:39 - point or whatever and then i'm going to
512:41 - need to get access to main and then
512:44 - within main so main right here and then
512:46 - within main i'll probably need to get
512:48 - access to temp
512:50 - just like that so that's probably how
512:53 - i'm going to
512:55 - get that specific temp that we're
512:56 - looking for okay so let's go ahead and
512:59 - try that out let's copy that code
513:01 - snippet so i'm going to basically copy
513:04 - this entire thing the other way you can
513:06 - copy it just hit copy code go over you
513:08 - don't need to spam it like me being just
513:11 - an idiot go back here and let's go ahead
513:15 - and paste that all of that okay so this
513:17 - is going to be like a bunch of code that
513:19 - got pasted but
513:21 - options here is really what you you so
513:24 - when you're using fetch
513:25 - you can pass it it can take in a url and
513:28 - then it can take in options
513:30 - and then inside of options you can pass
513:32 - it things like you can pass at things
513:34 - like
513:35 - what's your method so this is a get
513:37 - request and then you can also pass it in
513:39 - headers and you could pass it in like
513:42 - the specific key that you need like an
513:44 - access token because you're gonna need
513:46 - that
513:46 - and then who you're sending the request
513:48 - to all right so that's what options
513:50 - really is
513:51 - and if i try to run this let's see if we
513:53 - actually get back any data
513:56 - and boom you can actually see on the
513:58 - bottom right i just get got back all the
514:01 - data
514:01 - so dot then console log response now
514:05 - let's see if
514:06 - let's see if we can get from that
514:08 - response right so this is really data
514:11 - data and let's see if i can do data dot
514:14 - main
514:15 - and let's see if that does what we
514:17 - wanted to do
514:18 - boom it actually just got us back what
514:21 - we were looking for after i did data dot
514:22 - main i didn't even have to do data zero
514:24 - dot main
514:26 - and
514:27 - i'm getting back my temp my temp min and
514:30 - temp max and those are the things i need
514:32 - right what was the other thing i need
514:35 - well i needed that thing where it said
514:37 - clear
514:38 - where did it say clear it said clear
514:41 - under i believe
514:43 - weather so let's go check again
514:46 - so when i ran the results i have weather
514:50 - weather has an array so i have to
514:52 - probably like
514:54 - grab the zeroth item from weather so i'm
514:56 - imagining i gotta do something like this
514:57 - data
514:58 - dot weather
515:01 - of xero
515:03 - dot
515:04 - main i imagine i gotta do something like
515:07 - that
515:07 - and then that'll get me access to
515:10 - that'll get me access to what i need
515:12 - because data will get me access to this
515:13 - whole thing
515:14 - whether dot weather will get me access
515:17 - to
515:18 - this right here
515:19 - whether xero will get me access to the
515:21 - specific
515:23 - array right there and then dot main
515:26 - within that will get me access i believe
515:28 - to this key right here uh this value
515:32 - right here clear
515:33 - so let's give that a try and see if that
515:37 - gets us what we need dot weather of xero
515:40 - dot what do we say
515:44 - dot main
515:45 - clear boom
515:47 - so you can see exactly how we can
515:50 - actually get back
515:51 - uh how we can get access to the things
515:53 - that we need this is how you can make
515:55 - that request
515:57 - so hopefully this sets you kind of in
515:59 - the right place to get started with this
516:02 - exercise and i'll show you
516:04 - now the project that you're going to be
516:05 - building okay so then you have all the
516:07 - tools that you need to be able to
516:09 - complete it so if you go to your
516:11 - javascript course main
516:13 - folder right main file right over here
516:16 - here's where you will find your weather
516:17 - apps if you actually
516:19 - go down
516:20 - you'll see it'll say weather app
516:22 - right over here
516:25 - okay
516:25 - click on that
516:27 - and this is your weather app that you
516:28 - can use
516:30 - and if you go inside of the exercises
516:32 - for this weather app so let's go to
516:35 - projects
516:36 - let's go to weather app let's go to
516:38 - exercise
516:40 - and this exercise here
516:43 - okay we'll walk you through
516:45 - exactly how you're gonna
516:48 - do everything inside of this weather app
516:50 - now you can use this url
516:53 - here
516:54 - or you can use the url that
516:57 - the way that i showed you on rapid api
516:59 - for bonus points try to just use the
517:00 - rapid api way
517:02 - um i think it's easier so then you don't
517:04 - even have to go to open weather app
517:06 - weather map
517:08 - and create your own api but whichever
517:10 - one is simpler for you do it that way
517:12 - and here it'll walk you through exactly
517:15 - how this project
517:16 - works
517:17 - okay so it's like hey
517:19 - you know get the weather data so create
517:21 - a function that essentially runs and
517:22 - gets the weather data
517:24 - um you're gonna need to write something
517:26 - so if we open up the app on this right
517:29 - hand side let's go to the weather app
517:31 - you're gonna need to have the search
517:32 - input field where you're gonna need to
517:34 - extract the user
517:36 - city from and then pop that into your
517:38 - url and then search it
517:40 - right so then when they hit search it
517:42 - pulls all the data this
517:44 - weather maps api problem is pretty
517:47 - similar to the superhero app that we
517:50 - made so i don't think you should have
517:51 - too much trouble honestly doing this
517:53 - this is not shouldn't be too challenging
517:55 - for you
517:56 - if it is it's all good we'll just walk
517:58 - through this together and then you have
518:00 - two functions here okay you have the
518:02 - search city function all right and then
518:04 - you have this show weather data
518:06 - function
518:07 - and
518:08 - search city what this is going to do is
518:10 - based on whatever the user has put in
518:12 - here it's going to extract the value
518:14 - that's what search city will do and then
518:16 - show weather data
518:18 - will update data on the dom
518:21 - and
518:22 - you will have access to
518:25 - what those variables are as well by
518:28 - those variables i mean the dom you're
518:30 - going to need to manipulate the dom so
518:31 - check out the html on where you actually
518:34 - need to go and manipulate the
518:36 - dom
518:37 - also to make your lives easier i have
518:41 - put
518:42 - all the divs you'll need access to all
518:44 - right so your city name weather type
518:47 - temp the these are the div
518:50 - ids okay so these are the actual div ids
518:53 - if you go into the index.html file
518:56 - you'll be able to see those specific ids
518:59 - if you look for them like city name
519:01 - weather type men temp max temp right and
519:04 - that's where it goes
519:06 - those go right there when you change
519:08 - their inner text so all you'll need to
519:10 - do is change their inner text
519:13 - now to get ready for this project what
519:15 - you need to do is this so for your
519:19 - file
519:20 - do the following in your index.html go
519:23 - back
519:24 - copy the index.html from
519:27 - from this exercise file right from the
519:30 - javascript course copy the entire
519:32 - index.html file go
519:34 - and replace it paste it over into the
519:37 - new replit that you created
519:39 - do the same thing by going to style.css
519:44 - and copying this entire thing and going
519:47 - ahead and pasting this so your styles
519:50 - should showing be showing up and then
519:52 - for your script well what you could do
519:55 - is you could copy pretty much everything
519:59 - that's here
520:00 - and then maybe just paste it underneath
520:02 - for now
520:03 - okay so that way you have
520:05 - kind of the piece of code that you and i
520:08 - worked on together so you have that
520:10 - already
520:10 - okay that's just to show you how to pull
520:12 - data and then the rest is up to you
520:14 - because this should already show you
520:16 - enough of what you need to do and really
520:19 - put you on the right track and then it's
520:21 - your job to like go okay how do i
520:22 - retrieve this data and how do i actually
520:25 - like have this data show up here right
520:28 - show up
520:30 - into the right places because this piece
520:32 - of code
520:33 - already does that for you so have fun
520:37 - give this project a try
520:39 - and
520:40 - see how much of it you can get done
520:43 - all right if you get this whole thing
520:44 - done
520:45 - huge props if you don't don't stress too
520:47 - much we'll walk through it together all
520:50 - right with that said i'll see you
520:51 - shortly
520:53 - all right now let's get to work and
520:54 - let's solve this together let's build
520:57 - this weather app now we're just gonna do
520:59 - it from
521:00 - scratch this is the only piece of code
521:03 - that we had right and i got that from
521:05 - rapid api i went to rapid api signed up
521:09 - for open weather map and then basically
521:12 - i was able to get my data points and
521:14 - then it also just makes a code snippet
521:16 - for you which is really nice just make
521:17 - sure to choose javascript fetch and then
521:20 - you can copy and use that exact code
521:21 - snippet so it makes your life a little
521:23 - bit easier now i don't even need this
521:25 - api key right over here because i'm
521:28 - using
521:28 - a rapid api one so that makes life even
521:33 - easier
521:34 - so
521:34 - what do we need to do here we need to
521:36 - get the data based on the city that the
521:38 - user types well
521:40 - we're already able to fetch based on the
521:43 - city right so if i see my fetch request
521:45 - here i can see that i'm passing in
521:46 - chicago so i get chicago data if i run
521:49 - i get clear okay let's remove this
521:52 - here and i'm just going to leave it to
521:54 - data let's run this and you can see that
521:57 - i get back
521:59 - all of the data
522:00 - related to
522:02 - related to chicago right and i can even
522:04 - see name here so let's just put
522:07 - data dot
522:09 - name and let's run it and you can see
522:11 - chicago well let's say i change this to
522:13 - marina del rey and let's run this okay i
522:17 - got some errors right there
522:20 - marina del rey let's put percent signs
522:22 - let's see what happens okay no problem
522:24 - no problem let's go back to open weather
522:27 - map api and i just want to see
522:30 - um
522:31 - when you type in marina del rey how does
522:33 - it write that in strings
522:35 - randall right ah percent 20 20 20 just
522:39 - like that so that's how you represent a
522:41 - space
522:42 - in urls as percent 20. so that's marina
522:45 - percent
522:47 - 20 del rey
522:48 - cool that's a city
522:50 - yep so now it's pulling it's searching
522:52 - at marina del rey and i can also look up
522:55 - hollywood or whatever i want right and
522:57 - let's hit run
522:59 - and it'll pull hollywood and
523:01 - retrieve its data
523:03 - so we already know that whatever we want
523:05 - to put in here it needs to go
523:07 - right here so this is where like you
523:09 - know in my mind if i'm looking at this i
523:12 - will immediately convert this into a
523:14 - template literal
523:16 - and right here
523:18 - okay so const let's just say let city
523:21 - equals
523:22 - whatever
523:24 - city equals whatever
523:26 - in my mind this is where the user city
523:28 - is going to go so i'm going to go
523:31 - user city
523:33 - because i know that it's something that
523:35 - the user is going to give me it's not
523:36 - going to be actually hard coded into my
523:38 - url so now if i give
523:41 - let's say hollywood
523:43 - then when i search it'll say hollywood
523:46 - right here
523:47 - if i give detroit or whatever
523:50 - it will get me detroit yeah
523:53 - so now
523:55 - this is this is kind of doing what i
523:58 - wanted to do we have yet to retrieve the
524:01 - data what we want to do is obviously
524:02 - pull the data dynamically from
524:05 - this user input box when the user types
524:08 - in the data
524:09 - right so if we look here we have city
524:11 - name we have weather type
524:13 - city name is probably where i imagine
524:16 - you know we're gonna pull the
524:18 - the value from that's where the value is
524:21 - it's in this text box so you want to
524:24 - pull the value out of there so let's
524:25 - just say
524:26 - las vegas
524:27 - and then we want to pull the value when
524:29 - the user hits the search button
524:32 - so we want to make our function
524:35 - where when the user hits
524:38 - search
524:39 - we can extract this
524:41 - now if we go to our index.html you can
524:44 - actually see that on the on click method
524:47 - for this search button we already have
524:50 - search city
524:52 - function that gets called so every time
524:54 - i click this button the search city
524:56 - function gets called so let's see where
524:58 - our search city function is it's right
525:00 - here okay so now let's go ahead
525:02 - console.log city
525:04 - and it seems like we're already
525:07 - pulling the value out of it right here
525:09 - and we should be able to see the value
525:10 - so let's type in las vegas let's hit
525:12 - search
525:13 - let's hit run i guess let's type in las
525:16 - vegas and let's hit search and you can
525:18 - see that we pull las vegas
525:21 - so by searching city we're already able
525:23 - to pull the value
525:24 - now we have this other function which is
525:26 - called get weather data so i'm just
525:28 - going to put a const right here
525:30 - this is really the
525:32 - you know this piece of code that we
525:34 - wrote up at the top
525:36 - okay it's basically that because that's
525:38 - where we're really making our api
525:40 - requests i'm just going to first cut my
525:43 - options and i'm going to pop in my
525:45 - options right here
525:47 - because those are like my keys and all
525:48 - of that stuff and then i'm going to cut
525:50 - my fetch request
525:52 - and we can delete this user city because
525:54 - we don't need that anymore
525:56 - and boom we can put our fetch request
526:00 - right get weather data will take in a
526:02 - city
526:02 - so now we'll just call this city right
526:05 - over here because we're already grabbing
526:06 - that from the
526:08 - argument right there i don't need this
526:10 - url right here anymore because we're
526:13 - using rapid api
526:14 - cool all right so fetch
526:17 - fetch will be the city that we're
526:18 - fetching
526:20 - and then it will
526:21 - return that data okay so right now we're
526:24 - console logging the city names i'm just
526:27 - going to say console log data
526:30 - so search city is going to run and then
526:32 - what we can do is
526:34 - we can
526:36 - call our get weather function and pass
526:39 - the city that we got so let's go ahead
526:41 - and give it the city okay so let's see
526:43 - what happens now let's say i hit detroit
526:46 - and let's hit search
526:47 - and you can see i just got all this data
526:50 - on detroit
526:51 - right and it i can even see that the
526:53 - name here
526:54 - says detroit
526:56 - now let's type in las vegas
527:00 - boom
527:01 - name las vegas
527:03 - and i'm getting all this data back so it
527:05 - seems like my button is connect my
527:07 - typing being able to type is connected
527:09 - when i hit search it's extracting the
527:12 - data it's sending that over to get
527:14 - weather data and then that knows how to
527:16 - make a fetch request
527:18 - and retrieve the data back
527:20 - and the last thing really that we need
527:22 - to do is
527:24 - really grab that data
527:26 - and
527:27 - throw it onto our dom right like
527:30 - actually show it onto our screen to show
527:32 - weather data
527:34 - so this is in this method in this
527:36 - function right over here show weather
527:37 - data we just need to update the dom
527:39 - elements so basically
527:42 - what i want to do here is
527:44 - i'm going to take these guys
527:46 - and update them
527:47 - okay so for example what do we have temp
527:53 - right so let's say document
527:55 - dot get element by id
527:59 - and temp and we'll set its inner text to
528:02 - let's just hard code it to 86.6
528:06 - and then i'm just going to call show
528:08 - weather data right underneath here
528:10 - and i'm going to give it
528:13 - i'm going to just give it some dummy
528:14 - data right now okay so right now we're
528:16 - not really going to pass it anything
528:17 - useful
528:19 - and let's go las vegas search
528:21 - boom
528:23 - and you can see that my temp was 86.6
528:26 - okay
528:28 - so
528:29 - i'm just hard coding this right now but
528:31 - we're going to need to dynamically pull
528:33 - the temperature and then pass that
528:35 - temperature
528:37 - right actually past the data
528:40 - and not just
528:42 - kind of the silly thing we're doing here
528:44 - so now what i want to do here is
528:47 - i want to return this data so let's just
528:50 - do this
528:52 - so this way i'm returning data
528:54 - and the next thing i can do is i can
528:56 - make this function
528:58 - async
528:59 - and why i want to do that is i'm about
529:01 - to run asynchronous code
529:04 - and i need it to run in the right order
529:06 - because i want to get the data first and
529:08 - then i want to show the data but if i
529:11 - try to run them both at the same time
529:13 - without doing this what's going to
529:14 - happen is
529:16 - this here is going to run first because
529:19 - this is like synchronous code and then
529:22 - this here is going to run after because
529:24 - this is asynchronous that's not what we
529:26 - want we want this to finish first
529:29 - and then we want this one to run okay so
529:31 - i'm going to say async
529:33 - and we're going to say const
529:36 - data and i'm going to say await
529:38 - okay and we can pass this data now to
529:42 - our show weather data and then we'll
529:44 - console log the weather data and see if
529:46 - we're actually getting back anything and
529:48 - i'll just say
529:50 - a cookie here so we can see that it's
529:52 - the actual thing that we're getting
529:54 - so let's run this
529:57 - let's type in las vegas hit search
530:00 - i'm getting back undefined interesting
530:03 - oh because we're not returning anything
530:05 - so actually we can put a weight here
530:08 - and we just got to make sure we return
530:10 - this fetch
530:12 - and now
530:14 - a wait will grab the
530:16 - [Music]
530:17 - grab the data and then we'll store that
530:19 - data and then we'll pass that data so
530:21 - let's try running this now let's see
530:23 - what happens
530:24 - okay las vegas boom now it works and we
530:28 - get our cookie emoji perfect
530:30 - so we grab that data
530:33 - and then we show the weather data okay
530:34 - so we get weather data and then we show
530:37 - weather data this is the right way to do
530:39 - it
530:40 - and now that we have access to that data
530:43 - remember how we want to get access to
530:45 - our temps right so let's go ahead
530:46 - console log and we're going to say
530:48 - weather
530:49 - data dot
530:52 - i think if you do main
530:54 - all right let's see what main gets us
530:56 - let's go las vegas again and main gets
530:58 - us all the stuff that we need so it gets
531:00 - us the temp so we could do main dot temp
531:03 - here
531:05 - and
531:06 - i can just copy this and i can paste
531:09 - that right there let's hit run
531:12 - and now you can see that we have 106
531:14 - degrees
531:15 - temperature automatically being updated
531:18 - right there now we just need to do min
531:20 - temp and max temp and
531:22 - city name needs to go here as well
531:25 - so we're just going to have a bunch of
531:27 - document.getelements by ids
531:30 - now so let's go ahead i'm just going to
531:31 - paste this line
531:33 - five times because i have one two
531:36 - three four five
531:38 - dom elements that i'm going to need to
531:40 - update
531:41 - so one of them is obviously going to be
531:43 - temp
531:44 - so let's just say we're good with temp
531:46 - the next one i'm gonna do is a city name
531:49 - okay so we're gonna go and see
531:51 - i think it's literally called city
531:54 - dash
531:56 - i could be wrong
531:58 - city name
532:00 - yeah i think that should be fine
532:03 - i think so
532:04 - we'll see
532:06 - see if this does what we wanted to do
532:08 - and let's just do weatherdata.name
532:11 - so let's try this
532:12 - let's go ahead las vegas let's hit
532:14 - search and boom las vegas perfect so
532:16 - that worked
532:17 - next one is this right over here how did
532:20 - we get
532:22 - clear again let's go check
532:24 - so we're going to do
532:27 - dot weather of xero dot main and that'll
532:30 - get us what we need
532:32 - okay so we're gonna do dot weather of
532:35 - xero
532:36 - [Music]
532:37 - dot main
532:40 - and this is going to get us our
532:43 - this is going to get us
532:46 - what's the div called div is going to be
532:48 - called weather type
532:51 - weather
532:52 - dash type
532:54 - and then we have temp
532:57 - min dash temp and max dash temp so let's
533:00 - just do both of those min dash temp
533:04 - max dash temp
533:07 - okay and then in order to get those i'm
533:09 - gonna just need to do
533:11 - temp
533:13 - underscore
533:14 - min
533:16 - temp underscore max i'm just looking at
533:19 - this right here temp max
533:22 - and temp
533:24 - min okay
533:26 - and now let's give this a try and i
533:28 - think the entire thing should be working
533:30 - so let's go las vegas hit search
533:34 - and we can see las vegas clear
533:37 - temp men temp maxstamp boom
533:40 - that was slick
533:43 - can you believe we just did that right
533:45 - now like we were speeding through that i
533:47 - was like what 14 minutes with
533:49 - explanation we're going fast so let's go
533:52 - chicago hit search
533:54 - clear chicago temp mint max temp
533:59 - right let's type in i don't know that
534:01 - should probably break oh crap that's
534:03 - working so i guess you could type in
534:05 - cities or states
534:07 - maybe i'll try illinois
534:10 - beautiful so it works kind of all around
534:12 - let's check california and just general
534:15 - nice
534:17 - so look at that right it's
534:19 - working really really well it's able to
534:21 - pull the data fast it's able to show the
534:23 - data
534:24 - and if you want to move all of your code
534:27 - from this into the
534:30 - javascript exercise page you could do
534:32 - that as well just make sure you
534:35 - you know command it copy this and go all
534:37 - the way back
534:39 - and then just go into this exercise
534:42 - one right
534:43 - and then select it and paste everything
534:45 - over it
534:47 - and you should be good to go
534:49 - right and then your exercise
534:51 - file should be working so you should be
534:53 - able to go to your
534:54 - project exercises you should be able to
534:56 - click weather app
534:58 - and then it should be
535:00 - kind of working in there for you
535:02 - okay even if right now it's
535:04 - it might be broken
535:06 - there you go so now if you go to weather
535:07 - app right over here it should pull up
535:10 - and once you put your javascript code
535:12 - the exercise one should be working
535:14 - and then the solution one is of course
535:16 - the final version so that's
535:19 - you know that's always gonna be
535:21 - up and running
535:22 - so there you go that's how you make your
535:24 - own weather app hopefully that gave you
535:26 - a clear understanding and everything
535:28 - makes sense and hopefully you enjoyed it
535:29 - and i'll see you soon all right i hope
535:32 - you're having as much fun as i'm having
535:34 - now let's move on and talk about classes
535:38 - so how do classes work in javascript
535:40 - open a new tab let's go to replic.com
535:44 - all right replit
535:46 - rep lit.com
535:48 - open up html css javascript file and
535:51 - we're going to say a lesson
535:54 - and we'll talk about
535:56 - classes
535:58 - okay
536:00 - all right
536:01 - so
536:03 - how what the heck are classes how do
536:05 - they work so classes are you know any
536:08 - time you've seen okay
536:10 - for example
536:11 - uh anytime you've done a dot method on
536:14 - something right that requires you know
536:16 - about classes
536:18 - so let's go into our script.js here so
536:20 - i'll give you examples of where you're
536:22 - using classes
536:24 - where you didn't even realize that you
536:26 - were
536:27 - all right so
536:28 - when you say new promise when you say
536:30 - new promise
536:32 - you're using classes here okay where
536:34 - else are you using classes
536:36 - remember when we can have a
536:39 - array of nums
536:42 - and then we could do numstot push
536:45 - well guess what
536:47 - you're actually working with the class
536:49 - you're working with the array class and
536:51 - that happens to have a method
536:53 - called.push and we'll talk about
536:56 - everything too we'll talk about methods
536:59 - okay we'll talk about properties
537:02 - properties
537:04 - we'll talk about
537:06 - classes
537:07 - okay
537:08 - that's the main topic right main topic
537:10 - is classes and there's all these things
537:13 - all right so we're going to be building
537:14 - this ferrari right over here now
537:18 - let's if you look at this ferrari here
537:20 - right what do we have
537:22 - we have and excuse my terrible
537:24 - photoshopping job but i'm not a
537:25 - photoshop expert i'm a developer all
537:27 - right
537:28 - um
537:29 - that's what i'm
537:30 - that's my skill not photoshopping so we
537:33 - have this ferrari here not fiat because
537:35 - that car sucks so
537:37 - here we have our ferrari and it will
537:40 - have this these these are the properties
537:42 - that it'll have okay so you'll be able
537:43 - to do car.name car.model car.wait and
537:47 - classes are very similar to objects if
537:49 - you learn objects
537:52 - you know you you you're kind of in a
537:54 - you're in a pretty good place like
537:56 - you're not going to be too confused to
537:58 - as to what is happening over here now
538:01 - uh we have this now what are the other
538:03 - things that we actually need to know
538:04 - about this right we have all these
538:06 - properties if you look on the methods
538:09 - well look at what kind of methods we
538:10 - have we have car.start we have car.drive
538:13 - we have car.break and we have car.stop
538:16 - now those are all the anything with the
538:18 - dot start and the open close parens like
538:21 - that those are called methods okay
538:24 - and those are basically like functions
538:27 - but anytime you have to do car dot start
538:30 - then it's just going to be called a
538:31 - method okay any any function that needs
538:34 - a dot is a method okay that's another
538:36 - kind of way to remember it and then
538:38 - properties are where you're not calling
538:40 - the function with open close parentheses
538:41 - so just car.name is ferrari car.model is
538:45 - whatever 500 car.weight is 850 kg
538:48 - car.color was supposed to be red and i
538:51 - photoshopped over it and i made it white
538:53 - so whatever color is red just imagine
538:56 - it's a red okay so we're gonna go ahead
538:58 - and build
539:00 - this thing and we're going to do it in a
539:02 - class-based way so we can actually
539:04 - uh model model this okay and then you'll
539:07 - be able to create multiple car objects
539:09 - from it so let's go ahead and do that
539:11 - now all right so there we go so i'm just
539:12 - going to leave this over here so you can
539:14 - see it the entire time okay
539:17 - all right so
539:19 - i'm going to go ahead and do class and
539:21 - we're going to do class car and we're
539:24 - just going to do this
539:25 - all right now
539:27 - we're going to need to create a
539:28 - constructor and a constructor is really
539:32 - going to have like the
539:34 - you know
539:35 - like
539:35 - what are the initial type of arguments
539:38 - and things like that we're going to have
539:39 - so
539:41 - you'll also learn about a new keyword
539:43 - and it'll be called this alright so i'll
539:45 - show you now so we're going to have
539:47 - this dot name
539:50 - okay so the car will take in the name
539:54 - it will take in let's say a color
539:58 - and
539:59 - honestly that's kind of it i don't want
540:00 - to deal with model and weight yet so
540:03 - i'll just take in a name
540:05 - and a color okay for now or maybe it
540:08 - takes in
540:09 - [Music]
540:11 - top speed or something like that
540:14 - speed
540:16 - all right
540:17 - and then we so this this dot name will
540:20 - be name
540:21 - this dot color
540:23 - will be color
540:25 - and this will make more sense once we
540:26 - actually call this object okay and
540:29 - this.speed is going to be whatever speed
540:31 - you pass in
540:32 - so now let's create a new object with
540:34 - this class so i'm going to say
540:36 - const
540:38 - car
540:38 - or ferrari
540:41 - is
540:42 - and we're going to say new car
540:45 - okay so note this new car how we're
540:47 - doing this new so other things you're
540:49 - going to see new with is new date
540:52 - okay so data is a class you're going to
540:55 - do new promise
540:57 - promise as a class okay
540:59 - and we're going to pass in our arguments
541:02 - here so for name i'm going to say
541:04 - ferrari
541:05 - for color we're going to say red and for
541:07 - speed i don't know i'll say 250 top
541:10 - speed and i'm just going to console.log
541:12 - ferrari and let's look in the console
541:14 - and see what we get
541:16 - and boom we just got a car object right
541:18 - there
541:19 - and it says the name is ferrari the
541:22 - color is red and the speed is 250
541:26 - right
541:28 - beautiful so this is how you will like
541:30 - create a class and create a constructor
541:32 - that will like initialize things
541:34 - instantly now this part this is the
541:37 - keyword that throws a lot of people off
541:39 - like what is this
541:42 - what this refers to guys is
541:45 - you know how we do
541:47 - uh
541:48 - the the name
541:49 - well
541:50 - this refers to
541:53 - ferrari so now when i do so watch this
541:56 - right so if i do ferrari
541:58 - dot name and run it
542:01 - i'll actually get back the name ferrari
542:03 - okay so let me remove the other console
542:05 - log just so we can see ferrari now if i
542:08 - remove this dot name watch what happens
542:11 - it says undefined
542:13 - okay
542:14 - so this here in this case becomes
542:16 - ferrari ferrari.name
542:17 - [Music]
542:19 - and we set its name to the whatever name
542:21 - was passed in so say it we had passed in
542:23 - ferrari
542:25 - so then it becomes ferrari like this so
542:28 - it goes ferrari.name and sets it to
542:30 - ferrari okay
542:32 - so
542:34 - in other words this argument
542:38 - gets passed into name
542:41 - and name is the variable that goes right
542:42 - here so that's going to be ferrari
542:44 - and this specific ferrari object that we
542:47 - just created
542:49 - that is referred to by this so
542:51 - everywhere we said this
542:52 - it's being replaced with the word
542:54 - ferrari
542:55 - all right
542:56 - that's what this does
542:59 - all right so if i now go this.color and
543:02 - run this
543:05 - let's go console.log ferrari dot name
543:09 - and then we'll do
543:11 - speed run this and we get ferrari red
543:16 - 250.
543:17 - okay so you can see we've already
543:20 - created three properties that this has
543:23 - okay so these are
543:25 - these are
543:26 - properties properties
543:29 - okay
543:30 - now we're going to go ahead and create
543:31 - certain methods for example let's create
543:33 - a method that's um
543:36 - you know
543:37 - car.start or car.drive
543:40 - okay
543:41 - um
543:42 - car dot break so let's say we have
543:45 - let's say we do car
543:47 - let's say we do drive
543:51 - all right and let's just say console log
543:56 - just drove
543:58 - two miles
543:59 - okay
544:00 - now what we can do is we can go
544:02 - console.log and i can say ferrari
544:05 - in this case i don't even need to
544:06 - console.log it because console.log is
544:08 - inside of the drive method so we can
544:10 - actually just say ferrari dot drive
544:13 - open close parens
544:16 - and when i run this watch what's gonna
544:18 - happen
544:19 - boom it says just drove two miles
544:23 - okay so that's the drive method
544:25 - all right let's do car. let's do break
544:28 - method right
544:30 - so
544:30 - how are we going to do break let's say
544:32 - for break we just want a console log and
544:34 - we want to say came to a screeching halt
544:36 - so you try that and see if you could
544:38 - call dot break
544:40 - take a few seconds this should take you
544:42 - only five or seven seconds to do
544:43 - yourself it's going to be only one line
544:45 - of code just like on line 18 and then
544:48 - you should be able to refer to ferrari
544:49 - dot break so give that a try make sure
544:51 - you're practicing with me the entire
544:53 - time so i'll give you five seconds
544:55 - five
544:56 - four
544:57 - three
544:58 - two
544:58 - one okay let's go
545:01 - so i'm going to go ahead here and say
545:03 - console.log
545:05 - say
545:07 - uh coming to a
545:10 - breaking come breaking
545:12 - coming to a screeching
545:15 - halt
545:16 - or something like that right let's hit
545:18 - run
545:19 - and let's do ferrari
545:22 - dot break
545:25 - breaking coming to a screeching halt
545:28 - there you go
545:29 - okay and uh
545:32 - what are other methods right so we have
545:33 - methods like stop so that is probably
545:36 - like car the car coming to a complete
545:38 - stop
545:39 - so
545:40 - let's say that the car starts off with
545:43 - like a speed of uh
545:45 - okay so let's say we have a current
545:47 - speed as well so we'll go this dot in
545:49 - everywhere we have speed let's say this
545:51 - is we we change this with the top speed
545:54 - okay so i'm going to right click rename
545:57 - all the occurrences i'm going to say top
545:58 - speed so maybe this is passing in the
546:00 - top speed just to make that very clear
546:02 - now we'll have
546:04 - this dot current speed
546:06 - is going to be zero and start all right
546:08 - so whenever a new car is created well it
546:11 - isn't driving right now so it'll be zero
546:13 - but then let's say we
546:15 - start driving the car
546:17 - then maybe the speed goes up by 10 mile
546:20 - uh 10 miles an hour or something
546:22 - yeah so how we could actually do that is
546:25 - in our drive method i can just increment
546:27 - this dot current speed current speed by
546:32 - 10
546:33 - okay and that just increase the speed by
546:35 - 10
546:37 - and we'll say console log
546:39 - and i'll say
546:44 - driving
546:46 - driving at
546:50 - and we'll put
546:52 - this dot current speed
546:59 - okay
547:00 - so let's hit run
547:04 - and now you can see it says driving
547:05 - speed at 10 miles an hour so now we have
547:09 - a new property called desktop current
547:11 - speed so i can actually go ferrari
547:14 - dot
547:15 - current speed
547:17 - and we can see that
547:19 - oh no sorry it's not a function so let's
547:21 - run this again it's not a method
547:23 - so current speed right now is you can
547:25 - see undefined
547:27 - oh i'm sorry the
547:29 - and if the speed here is undefined
547:31 - because this is called top speed my
547:33 - apologies
547:35 - but if you if you console log dot
547:38 - current speed you can actually see that
547:40 - it says it's currently 10 miles an hour
547:42 - right so let's run this
547:44 - and you can see it says 10. okay i'm
547:47 - gonna comment out all the other console
547:49 - logs so it doesn't get like super
547:51 - confusing as to what's happening and
547:54 - i'll console log this just drove two
547:56 - miles an hour as well
547:58 - right so it says driving speed at 10
548:00 - miles an hour
548:02 - and let's console log before we started
548:05 - driving the car as well
548:09 - so in the start you can see the speed is
548:11 - zero
548:12 - right here
548:14 - right if you look
548:16 - we see that the speed is zero right
548:18 - there
548:20 - right then after we drive
548:23 - you can see that the speed is 10 miles
548:25 - an hour
548:27 - well what if we
548:29 - do the drive method again what will our
548:31 - speed be can you guess
548:33 - take five seconds and try to guess this
548:34 - five four three two one
548:38 - okay let's see if you guessed it right
548:39 - beautiful okay nice if you guessed 20
548:42 - because it increments it by 10 and if
548:45 - you do drive multiple if i do drive two
548:48 - more times what is current speed going
548:51 - to be at this point take a guess i'll
548:53 - give you five seconds five four three
548:54 - two one
548:56 - and it's gonna be 40 miles an hour okay
548:58 - driving speed at 30 miles an hour
549:00 - driving speed at 40 miles an hour
549:03 - so the car is getting like faster and
549:05 - faster
549:06 - now what we could do is we could kind of
549:08 - get fancy and we could do a set timeout
549:10 - where basically if we drive for one
549:14 - second
549:15 - uh it gets up to a certain certain speed
549:17 - if we drive for two seconds maybe it
549:19 - gets up to like
549:21 - 35 miles an hour or something and then
549:23 - when we get to 2.8 or 2.9 seconds
549:26 - maybe it's it does 60 miles an hour
549:29 - right so what is that actually um
549:32 - ferrari
549:34 - let's see 0 to 60
549:38 - how long does it do it in about 3 point
549:42 - how fast is a ferrari
549:44 - so let's see their seconds right so
549:47 - three seconds 2.9 seconds 2.5 seconds
549:50 - what's crazy is that rivian which is one
549:52 - of these trucks that is like my absolute
549:55 - favorite right now
549:56 - dad that is like faster than a ferrari
549:58 - and it's a truck and it does it in three
550:01 - seconds
550:02 - so some ferraris we have go
550:05 - and do it in 2.9 seconds whatever we'll
550:07 - just do 2.9 seconds right
550:09 - so
550:11 - what we can do is we can even like get
550:12 - fancy with it and we can create a method
550:16 - that like takes us to 60 seconds 60
550:19 - miles an hour
550:20 - right so let's call it zero
550:23 - 260.
550:26 - and what this does is maybe it runs a
550:30 - set timeout
550:33 - and then it console logs
550:40 - that was fast
550:42 - or something right
550:44 - and let's make let's put some squigglies
550:46 - around this actually
550:48 - because we want this to be like a
550:50 - function
550:51 - and we want to write probably more
550:53 - things in it
550:54 - and then we want to set the current
550:56 - speed
550:59 - to 60
551:01 - because i'm going to set the current
551:02 - speed to 60.
551:03 - so let's see if this works kind of as
551:06 - expected so we're going to do console
551:08 - log
551:09 - we don't need to console.log we can
551:11 - actually just do ferrari
551:13 - dot
551:14 - 0 to 60
551:16 - and run this
551:18 - and
551:20 - let's see
551:22 - that was fast okay and now if we check
551:26 - so like if i comment out all these other
551:28 - lines
551:30 - and uh let's comment out this line as
551:33 - well
551:35 - and this one
551:36 - and now let's just check the speed so
551:38 - i'm just gonna get this console log one
551:40 - and put it right here and run it that
551:42 - was fast so because it's asynchronous
551:45 - notice what happened
551:46 - it ran and told me what its speed was
551:50 - actually before that code finished
551:53 - running so we what we want to do
551:57 - is we could turn this actually into a
551:59 - promise if we wanted to get kind of
552:01 - advanced with it and then get this
552:03 - promise and then once it resolves we
552:05 - could do something with it if we want so
552:07 - we could do
552:09 - return new
552:11 - promise
552:13 - and then we can like
552:16 - resolve
552:18 - resolve comma reject
552:21 - and kind of get fancy with it
552:23 - but we can try doing a simpler way first
552:26 - because
552:27 - simpler ways are usually you know we
552:29 - like them
552:30 - and we can actually just
552:32 - grab the current speed like this okay so
552:35 - we can grab the current speed from here
552:38 - after it changes it to 60. so let's try
552:40 - running it now
552:41 - and you can see that the current speed
552:44 - uh at this point has been
552:47 - you know turned into 60.
552:50 - so if we do it like this
552:53 - it'll work and it'll it'll do what we
552:55 - expect it to do
552:56 - now for break what we want to do is see
552:58 - if you can make it where break brings
553:01 - the speed
553:02 - down by 10. okay so if drive brings the
553:05 - speed up by 10 see if you can make it
553:07 - where
553:08 - brake brings the speed down by 10 okay
553:10 - so give it a try pause the video i'll
553:12 - give you five seconds to pause the video
553:13 - and try it on your own i think you'll be
553:15 - able to do it yourself okay so
553:17 - let's do a countdown five
553:19 - four three two
553:21 - one
553:22 - okay let's give it a try now
553:25 - so let's do it together if you hadn't
553:27 - already and if you did great job okay
553:30 - and if you didn't it's okay we'll figure
553:31 - it out together
553:33 - so for break what i want to do is i
553:35 - basically want to say
553:37 - hey um i can remove this console log for
553:40 - now don't care about it and i will
553:42 - simply say set the current speed
553:46 - to
553:49 - um
553:51 - minus equals
553:53 - 10.
553:54 - okay so this will just decrement the
553:56 - speed by 10.
553:58 - and we'll
554:00 - we'll put a console log here and we'll
554:01 - say
554:03 - breaking
554:05 - so
554:06 - let's comment out all of these lines
554:08 - here
554:10 - okay
554:11 - and let's comment down this one and i'll
554:13 - just go right here
554:15 - so we got the ferrari
554:18 - right we have the ferrari now what do we
554:20 - want to do i do ferrari dot drive so
554:23 - this should bring it up by 10 miles an
554:25 - hour and let's print out the speed so
554:27 - i'll console log
554:29 - speed
554:30 - or sorry ferrari
554:32 - dot current speed
554:35 - so let's run this and the current speed
554:37 - is 10 miles an hour
554:39 - okay now let's do ferrari dot break
554:43 - and then we'll console log
554:45 - the speed
554:47 - and you can see that when i did drive
554:50 - it increased it by 10 miles an hour and
554:52 - then breaking it
554:54 - decreased it by 10 and so now we're at
554:56 - zero miles an hour okay
554:59 - now what if we wanted to make stop where
555:02 - stop essentially just brings the speed
555:04 - down to zero regardless of where you're
555:06 - at so to emphasize that first let's do
555:09 - drive multiple times here
555:12 - and see if before i continue the video
555:14 - if you can guess what the speed is going
555:16 - to be
555:17 - on line 46 so i'll give you five seconds
555:19 - to figure that out
555:20 - 5
555:21 - four
555:22 - three
555:23 - two
555:24 - one
555:25 - all right so how i'm going to figure
555:27 - this out is one two three four five five
555:31 - multiplied by 10 is 50 so this should
555:34 - get you to 50 miles an hour they should
555:36 - decrement by 10
555:37 - this should get us 40 miles an hour
555:39 - let's run this and we get our speed at
555:42 - 40 miles an hour okay
555:45 - so now what we want to do is we want to
555:46 - implement the
555:47 - stop method okay so try to implement it
555:50 - yourself i'll give you some time to do
555:52 - it you should be able to do it okay and
555:56 - if you're not going to pause the video
555:57 - or if you have paused the video and
555:59 - you're back
556:00 - let's figure it out together now so i'm
556:02 - just going to say
556:05 - now i guess it would make more sense to
556:07 - say coming
556:09 - to a screeching
556:11 - halt
556:12 - right and then we can actually say this
556:15 - dot current speed and we can actually
556:16 - set it to just equal to zero okay so
556:19 - like basically we're going to reset it
556:21 - to zero
556:23 - so let's try
556:26 - ferrari dot
556:28 - stop
556:29 - and now can you guess what line 52 is
556:31 - gonna say
556:32 - okay take a guess there and let's run
556:35 - and boom you can see that now we're at
556:37 - zero miles an hour all right so we were
556:40 - driving at 10 driving 20 driving speed
556:43 - 30 40 50
556:44 - 50 and then we were breaking and then we
556:47 - came to a screeching halt and now we're
556:49 - at zero miles an hour and the car has
556:51 - effectively
556:52 - come to a full stop
556:56 - all right now let's grab a different car
556:58 - let's get a porsche right right here and
557:01 - let's see if you can create
557:05 - uh a new object with a porsche so give
557:08 - that a try and let's say its speed is
557:12 - 250 miles an hour as well okay or 240
557:15 - miles an hour
557:16 - so you have a porsche
557:18 - [Music]
557:20 - porsche
557:22 - okay
557:23 - color is yellow right and then speed of
557:26 - this is let's say 250 miles an hour so
557:29 - make a new object with this and then see
557:31 - if you could do things like drive it or
557:33 - get its current speed and things of that
557:35 - nature give that a try
557:38 - give that a try
557:40 - okay
557:43 - and while you give that a try
557:46 - one thing we can do is um let's go down
557:49 - here okay give that a try pause the
557:51 - video and see if you can actually try
557:53 - this on your own so you take five
557:54 - seconds five four
557:56 - three two one
557:58 - okay
557:59 - now
558:00 - here's how you do it okay let's do it
558:02 - together so
558:04 - i'm going to make
558:05 - porsche
558:07 - right
558:07 - and it's gonna be a new car and i'm
558:10 - gonna say
558:11 - porsche
558:13 - and color is yellow
558:16 - and top speed is let's say 250 miles an
558:19 - hour
558:20 - okay
558:22 - and uh let's go ahead and do porsche
558:28 - dot name
558:30 - and we'll console log it
558:33 - and we'll do dot color
558:35 - and we'll do
558:37 - top speed
558:38 - and let's run this and see if we
558:40 - actually get it yep we get porsche
558:42 - it's yellow and the top speed is 250.
558:47 - can we drive it let's try it
558:49 - porsche.drive
558:51 - and let's do let's drive it like
558:53 - multiple times
558:56 - all right
558:57 - and you can see boom the top speed uh
559:00 - now we're at 50 miles an hour if you
559:02 - want you could also turn it into a loop
559:03 - right so we could basically say
559:05 - you could run it for
559:07 - five times
559:09 - or more if you want so let's say we have
559:11 - an array of one two three four five
559:14 - and i can say for each
559:16 - and i can say
559:20 - i don't care about the value
559:22 - i don't need to use it and i can simply
559:25 - say
559:26 - porsche
559:26 - [Music]
559:31 - dot drive
559:32 - so all this function is doing is i don't
559:34 - care about these
559:36 - and i'm just saying hey increment
559:39 - porsche.draw uh just do porsha.drive
559:42 - essentially five times so this gives me
559:44 - a loop that lets me run this piece of
559:46 - code five times let's try it
559:48 - okay
559:49 - i cannot read properties of undefined on
559:52 - line five
559:54 - interesting
559:56 - line five
559:58 - what's happening on line five
560:03 - okay let's comment this out i guess
560:06 - let's try it
560:09 - okay so actually let's do this because
560:11 - nums is also of class type array
560:15 - or sorry array arrays are
560:17 - class type array so you have to
560:20 - instantiate them first and then you can
560:22 - actually do a dot for each so now i can
560:24 - do nums.4 each
560:27 - and now it will actually work okay so
560:30 - now i can actually try
560:33 - run
560:34 - and you can see that we just looped
560:36 - through five times and
560:39 - you know really floored it and gave you
560:42 - know ran our porsche
560:44 - now let's see if we can do
560:46 - 0 to 60 for our porsche so porsche.0260
560:51 - and let's run this and let's see if that
560:53 - runs
560:55 - okay and it goes phew that was fast now
560:59 - for our timeout we want to make sure
561:00 - that we give it like a couple of seconds
561:02 - right so we want to say 3000
561:05 - so this will wait for
561:07 - three seconds and then it'll say that
561:10 - was fast
561:11 - and then print out the current speed of
561:13 - the car etc so let's try it now
561:16 - and
561:17 - boom that happened three seconds later
561:19 - it goes phew that was fast
561:21 - okay so we have zero to 60 on this as
561:23 - well
561:24 - and then can we do porsche dot stop
561:28 - and then check porsche
561:30 - dot current
561:32 - speed
561:34 - and we'll console
561:37 - log this and run this now
561:40 - and then boom we have speed is zero
561:45 - okay there you go
561:46 - oftentimes you'll see these get and set
561:49 - methods a lot so i'll show you an
561:51 - example of that and you can try to make
561:53 - this
561:54 - yourself as well so i'll do
561:57 - get
561:58 - current speed you can already kind of
562:01 - see what this method is going to do okay
562:04 - and
562:06 - see if you could write this yourself
562:07 - it's going to be very very very very
562:09 - easy okay it's just going to do one line
562:10 - here
562:12 - um literally take like four to five
562:14 - seconds try to write it on your own as
562:16 - well
562:17 - and five four three two one okay
562:21 - so get current speed and you can just
562:23 - say return current speed okay there
562:26 - isn't a huge amazing use case for this
562:28 - here but i'm just showing you this
562:30 - because a lot of classes will have these
562:32 - getters what they call
562:34 - getters setters
562:37 - so i i want you to get used to this so
562:39 - they'll have ton of like get methods and
562:41 - then they'll have ton of set methods
562:43 - that like set the current speed
562:46 - right so basically this drive method is
562:48 - really like set the speed or like update
562:51 - the speed back by a certain thing
562:54 - um
562:55 - we could even give it like uh we could
562:57 - even give it a method like target speed
562:59 - where you as a user can actually pass in
563:03 - the speech actually let's do that
563:05 - because you've seen how to call methods
563:07 - but you haven't seen how to pass
563:08 - arguments to methods so how about
563:11 - you could actually call the method drive
563:14 - and put in a
563:17 - like a number here like a speed number
563:19 - and instead of incremented incrementing
563:22 - this by plus 10
563:24 - it'll increment it by the speed that you
563:26 - give it
563:28 - okay so now when we call that drive now
563:32 - drive needs something okay and uh i can
563:34 - also show you default arguments in
563:36 - javascript which are really nice so if
563:38 - you don't pass in an argument it'll just
563:40 - give you 10. for example if i try to run
563:42 - now my code is going to kind of like
563:45 - not work
563:46 - you see how we have these nands
563:48 - everywhere like nan
563:51 - because
563:53 - we're not passing in a speed
563:55 - when we call our
563:57 - drive method so if you see our drive
563:59 - method here we're not passing in a speed
564:01 - here right
564:02 - so if we actually just give it a
564:05 - equals 10 that's a default argument so
564:08 - if i don't pass in a speed it'll set
564:10 - that to just be 10. so let's give it a
564:12 - try now and see if that works
564:14 - yes it does right
564:16 - but let's go ahead and give some speed
564:19 - so for example for the porsche what i'll
564:21 - do is
564:23 - i will comment out this line where i
564:26 - gave it a
564:27 - like a
564:28 - drove it five times here
564:30 - what i'll do instead
564:33 - and i'll comment out this nums line too
564:35 - what i'll do instead is i'll say porsche
564:40 - dot
564:40 - drive and let's say i say 40
564:45 - okay
564:46 - and then we console log and we get the
564:48 - current speed so let's go ahead and
564:50 - console log here and run this
564:52 - and you can see that it instantly just
564:54 - went it shot up to 40.
564:57 - right it instantly shot up to 40 here
565:02 - let's
565:02 - do
565:03 - 80.
565:05 - okay let's do 40 here
565:07 - and let's do
565:09 - maybe another 80.
565:11 - now what's gonna happen so i did 40 here
565:13 - for drive and i did 80 here for drive
565:15 - what do you think line 69 is going to
565:17 - get us
565:18 - what's the speed going to be 5 4 3 2 1.
565:23 - speed's going to be 40 plus 80 right
565:25 - it's all incrementing on top of each
565:27 - other so it's going to be
565:29 - 120 let's run it
565:31 - and boom
565:32 - we got 120
565:36 - okay so
565:37 - there you go this is how you make
565:40 - basics of classes and this is an example
565:43 - with cars if you have cars how can you
565:46 - make different classes and give cars
565:48 - different methods and hopefully this was
565:50 - like a really visual example so it kind
565:52 - of
565:54 - got certain concepts through for you so
565:56 - that's what's happening with classes
565:58 - okay so to give you some other real
566:01 - world example of this
566:03 - and you know i want i do want to talk
566:05 - about nums and stuff like that and i'll
566:08 - kind of foreshadow it a little bit
566:10 - but here's a real world example
566:14 - so let's say we have const numbers
566:17 - and we have this array right here
566:20 - and we do numbers dot push and i say 4
566:23 - and i do console log numbers
566:26 - what is numbers going to say
566:28 - is numbers going to give me back an
566:30 - array 1 2 3
566:31 - or is it going to give me back an array
566:33 - of one two three four which one is it
566:35 - gonna be
566:36 - if you guess that it's gonna give me
566:38 - back an array with one two three four
566:39 - good job that's exactly right
566:42 - why is that happening
566:44 - because we're doing this dot push so
566:45 - what is dot push is dot push let me ask
566:48 - you is dot push a property
566:51 - is dot push
566:52 - a function or is dot push a method
566:57 - uh or is it something else
567:00 - what's not push
567:06 - if you guess that dot push is a method
567:10 - or a property that's not right because
567:13 - property is if i didn't have any
567:15 - function call here okay so that would be
567:17 - a property it's not a property
567:20 - if you said function that would not be
567:22 - right because
567:24 - a function is if you had to call push
567:26 - like this because you have to do dot
567:28 - push it's not a function
567:31 - if you said method
567:34 - you are completely correct good job okay
567:36 - so this is an example of a method
567:40 - method so if it's a method well then
567:43 - that means whenever methods are involved
567:45 - there must be classes
567:47 - because you can only have methods inside
567:50 - of classes i'll write it as a note you
567:52 - can only have methods
567:54 - inside of classes
567:56 - so you must have a class here well that
567:59 - basically means that numbers which is of
568:01 - type array
568:03 - that that means that that's a class
568:06 - okay it's its own class and that class
568:08 - has methods like dot push
568:11 - and there has there's something i
568:12 - haven't shown you yet but it's called
568:14 - type of so if i actually have an array
568:17 - so let me clear this console and let me
568:19 - zoom in here so you can see better so if
568:21 - i do type of and i say
568:24 - one two three array
568:27 - okay
568:28 - here it's giving me okay what's the type
568:30 - of this and it says object right if i do
568:33 - type of
568:35 - and let's say i do
568:36 - two it says type of number if i say
568:39 - hello
568:40 - right it tells me string
568:42 - so this is a type of either object but
568:45 - specifically this is of array class okay
568:48 - so sometimes javascript is weird it ends
568:50 - up calling a lot of things objects but
568:52 - this is really like an array class
568:55 - and classes are objects sometimes that's
568:57 - okay
568:58 - then you have number then you have
569:00 - string so that's why like when you have
569:02 - a string it has its own methods like dot
569:04 - split
569:06 - right where it turns that string into an
569:08 - array
569:10 - um or you could have an array with one
569:13 - two three
569:15 - and you could say dot join
569:17 - join this with strawberries
569:20 - right and then when i do this it joins
569:22 - one two three with strawberries
569:25 - so
569:25 - there are classes which have their own
569:27 - method so if you were to visualize this
569:30 - so for example when i have arrays right
569:32 - here
569:34 - like arrays right what is array so
569:37 - imagine it like this array is of class
569:41 - uh or it's a class array and then you
569:44 - might have different methods like you
569:46 - might have a join method
569:48 - and you might have the
569:51 - push method
569:53 - right
569:54 - and then we can actually even try
569:56 - implementing our own push okay and we we
569:59 - could create our own push and see if
570:01 - that works exactly like push does and so
570:05 - let's give that a try but first let's
570:06 - just see how
570:08 - certain array methods work okay so for
570:10 - example i'm gonna do
570:12 - so i have one two three
570:14 - this is an array right if i do dot push
570:18 - and i say four you can see that i've
570:20 - added a four to that array right so
570:22 - let's just go to one two three again
570:24 - perfect okay so we have this one two
570:26 - three array now
570:28 - one thing you could do
570:30 - to an array is i could actually get the
570:33 - zeroth property of an array and i can
570:35 - change it
570:37 - sorry about that
570:39 - um i have a chess tournament coming up
570:41 - so my friend is calling me for that it's
570:43 - tomorrow in las vegas
570:46 - and it's like a hundred and four degrees
570:49 - severe heat warnings there but i'm
570:51 - excited and i'm gonna go play it there
570:54 - it's the national open chess tournament
570:56 - and they have a hundred thousand dollar
570:57 - prize guaranteed
570:59 - i'm not looking to win i'm just looking
571:01 - to have a good time it's going to be fun
571:02 - playing on the u 2100 if any of you guys
571:04 - are chess nerds
571:06 - let's get back to this
571:08 - so let's say i have this or so let's say
571:11 - i crit let me create an array
571:13 - so x equals we'll say 1 2 3. okay so i
571:16 - have this array right here 1 2 3.
571:19 - now i can actually
571:21 - change some of the properties
571:24 - in here so i could actually do
571:27 - x of 0
571:28 - and i can change that to
571:32 - i don't know 10.
571:33 - and now when you look at x notice that
571:36 - i've changed at that 0th position and
571:39 - now you have a 10. okay well what if i
571:42 - change at position 2 and i do x of 2
571:46 - is now
571:48 - whatever x of 2 was plus 7. what do you
571:51 - think is going to happen
571:53 - what do you think is going to happen
571:54 - here
571:55 - so x of 2 will get you access to the
571:59 - the third index right so this or the
572:02 - second index zero index right this is a
572:04 - zero this is a one and this is a two
572:07 - and i'm setting x of 2 to whatever x of
572:10 - 2 was plus 7. what do you think is going
572:11 - to happen there well this 3 is going to
572:14 - actually turn into a plus 7. so let's
572:16 - try it
572:17 - right and let's run x and you can see
572:20 - that now i have 10 here and 10 there so
572:22 - you could mutate an array right
572:25 - now
572:26 - by doing this what if we access an
572:29 - a location that we haven't we don't even
572:32 - see there so let's give that a try so
572:34 - let's see if i can do
572:36 - x of 3
572:38 - right which doesn't exist
572:40 - and say i say
572:42 - uh apple
572:44 - and now we do x and you can actually see
572:46 - i have 10 to 10 apple
572:50 - so i could actually add things to an
572:53 - array
572:54 - by getting like the last index of the
572:57 - array and adding things there
572:58 - whoa
573:00 - that's pretty bizarre huh
573:02 - so using this knowledge we can actually
573:05 - implement our own
573:08 - push method
573:09 - okay and i'll show you how you can
573:11 - actually add methods to
573:14 - the array data type so javascript allows
573:16 - you to do array.prototype and this
573:19 - allows you to just get access to the
573:21 - array like class
573:23 - and we can actually now create our own
573:26 - method here and say
573:28 - my push okay so this is going to be our
573:31 - push method that we're creating
573:34 - and we're going to say it's going to be
573:36 - a function
573:37 - okay and what this function is going to
573:40 - do
573:40 - is let's for now let's just say it's
573:42 - going to get this dot length okay this
573:45 - this will refer to the array you're
573:47 - calling the dot whatever on so let's
573:50 - create const fruits
573:52 - and i'm going to say
573:55 - banana
573:58 - let's say
574:00 - blackberry that's not blackberry
574:04 - uh berry is fine oh we don't have to
574:07 - apparently what happened to it
574:09 - strawberry
574:10 - and then we'll have a cookie okay so
574:13 - apparently cookie's a fruit but
574:15 - hey let's just go with it
574:17 - and now let's do
574:19 - console.log and i'm going to say
574:21 - fruits.mypush
574:24 - and call it as a method okay fruit's not
574:26 - my push let's call it the method let's
574:28 - hit run and let's see what happens here
574:33 - okay we're getting an error somewhere
574:36 - let's see where we're getting that error
574:37 - it says line 97.
574:40 - oh because i'm not like calling typeof
574:43 - on anything so let's just comment that
574:44 - out
574:45 - let's run this now
574:47 - and you can see i have one two three
574:49 - four
574:50 - okay
574:52 - and right now it says undefined because
574:54 - i'm not having it return anything so
574:55 - let's say return dot length
574:58 - so it should return length of three and
575:00 - we're we're getting that three we were
575:02 - looking for
575:03 - okay
575:04 - uh let's get our cars to
575:07 - get our cars to kind of calm down a bit
575:09 - so i'll just comment all of that out
575:13 - all right
575:14 - so and then let's comment out our array
575:16 - stuff here as well
575:17 - so we should just have fruits now if i
575:19 - add an additional fruit in here
575:22 - let's say i add a pear
575:24 - or an apple what do you think the length
575:27 - is going to say do you think it's going
575:28 - to say 3 do you think it's going to say
575:29 - 5 you think it's going to say 10 what do
575:30 - you think is going to say
575:32 - let's try running it boom 5 because i
575:34 - have 5 items in here
575:37 - so in order to do the thing right if i
575:40 - have an array with five items then all i
575:43 - have to do
575:44 - is say something along the lines of
575:48 - my array
575:51 - five
575:52 - and in the fifth position
575:54 - i can put in
575:56 - whatever item i pass so my item
576:01 - okay
576:02 - so in this function
576:04 - we'll pass in item
576:06 - okay
576:07 - and then we can actually just pull the
576:09 - item from here
576:11 - and let's actually just see first if we
576:13 - can actually get access to
576:16 - our item through that right so let's
576:17 - just say return item
576:19 - and i'll pass in cookie
576:23 - the word cookie and let's run this
576:26 - and you can see
576:27 - that my push function like meth run my
576:30 - my push method runs
576:32 - it calls this
576:34 - and i can actually call it on type array
576:36 - right i'm creating my own methods for
576:37 - the array
576:38 - and then it's actually returning the
576:40 - cookie right here
576:43 - right so in order to do this now i have
576:45 - all the pieces of the puzzle i can do
576:50 - grab this array okay so this will get
576:53 - you the actual array that you're passing
576:55 - it so let's run this just so you can see
576:57 - and you can see this refers to the
576:59 - actual array that was passed in okay so
577:02 - hopefully that demystifies the word this
577:06 - a lot for you okay because that's what
577:08 - this is referring to
577:10 - and now we're gonna say
577:12 - it's whatever you're calling this dot
577:14 - thing on is usually like this okay so
577:17 - it's referring to like fruits in this
577:18 - case now if i do another dot
577:21 - that dot will be referring to whatever
577:23 - this
577:24 - would be
577:26 - okay
577:27 - so now i'm gonna say
577:30 - this it's i know it's an array
577:32 - and
577:34 - i know what i want to do
577:36 - is
577:38 - i want to return the array
577:41 - okay
577:42 - and
577:43 - on its fifth element around his fifth
577:46 - position zero because
577:48 - let's just go through this this is zero
577:50 - this is one this is two this is three
577:52 - this is four so in its fifth position
577:54 - right over here i wanna add in a
577:58 - um
578:00 - a
578:01 - what other fruit is left that i haven't
578:02 - covered yet
578:04 - a kiwi do we have a kiwi in here
578:07 - apparently we do nice
578:09 - so
578:10 - on that position i want to set that to a
578:13 - kiwi
578:14 - okay
578:16 - and then we return this so let's go
578:18 - ahead and try that
578:20 - and you can see boom we actually now
578:24 - have a kiwi
578:26 - right over here okay
578:29 - so
578:29 - that's super cool but this five is hard
578:32 - coded how could we get this five in a
578:34 - dynamic way
578:35 - well if we have access to this can we do
578:38 - this dot length and get access
578:41 - and then we're just going to set that to
578:42 - a kiwi but in instead of a kiwi
578:46 - we can just set it to an item whatever
578:48 - item we pass it so now we can pass the
578:51 - kiwi from here
578:52 - and let's run this
578:55 - and you can see that we pass in the kiwi
578:57 - went here
578:58 - and it plugged it in
579:00 - boom
579:01 - and so now we have our own push method
579:04 - right we can actually just use our own
579:06 - push to push whatever we want so let's
579:07 - try pushing a couple of things and let's
579:10 - then print out our our array okay so
579:15 - ignore that
579:17 - so let's go ahead and and push a bunch
579:20 - of stuff so i'm going to push
579:23 - more cookies
579:24 - i'm gonna push
579:26 - more strawberries
579:28 - okay i'm gonna push
579:30 - another
579:31 - i'm gonna push an orange
579:33 - okay
579:34 - and then we're gonna console
579:37 - fruits and let's see what happens
579:40 - and there you go all of the things that
579:42 - we actually pushed
579:44 - right got added
579:47 - all of these guys that we pushed here
579:48 - four new fruits
579:50 - you can see that we now have those four
579:53 - new
579:55 - fruits
579:57 - right added in
580:00 - right there
580:02 - okay
580:03 - so you can extend
580:06 - classes you can extend
580:08 - uh array data types like this you could
580:10 - extend other data types like this so you
580:12 - could extend
580:13 - so many things and then you know now
580:16 - hopefully other things to you
580:18 - might make sense too for example
580:21 - if you have an object right so let's say
580:24 - i create an object called things
580:26 - equal or let's say i create an object
580:28 - called actor
580:30 - and
580:31 - name
580:33 - is uh
580:35 - jamie
580:38 - foxx
580:39 - and age is i don't know how old he is 37
580:45 - right
580:46 - and um
580:49 - money is
580:51 - i don't know whatever something random
580:52 - right so now i have an actor how do i
580:55 - get the keys of this actor i got to use
580:57 - a method on the actor
581:00 - you know object so object is also like
581:03 - its own class and it has its own method
581:06 - so if you were to imagine it you should
581:07 - imagine it like this i have a class
581:09 - object and it has different methods for
581:12 - example it has a method called
581:14 - keys all right so now watch what happens
581:18 - when i do
581:19 - object
581:20 - dot keys and i pass it actor
581:23 - okay
581:24 - so i can actually pass it actor and boom
581:26 - i get name age money
581:29 - all right well actually object keys is a
581:32 - little bit different it's it is on the
581:34 - object class so you could do object.keys
581:36 - and pass past the actors so that's
581:39 - fair enough that's still like that's
581:41 - still a method dot keys okay so
581:46 - there are a lot of things that are um
581:50 - all right and you can also do this you
581:51 - can also do dot values
581:54 - and get all the values back
581:58 - right so you could do dot keys get the
582:00 - get the keys you could do dot values
582:02 - it'll give you all the values of that
582:04 - object
582:05 - so
582:07 - there are so many use cases of this
582:09 - knowledge and this information and if
582:11 - you deep dive into it now it'll save you
582:13 - so much pain
582:16 - in the future because it gets so much
582:18 - harder
582:19 - if you have like
582:21 - shaky foundations and shaky basics and
582:23 - then you try to go and build you know
582:26 - learn more complex stuff on top of it
582:28 - you're just gonna have so much trouble
582:30 - but if you learn this now and you can
582:32 - extend these classes and add your
582:34 - methods and do a whole bunch of stuff
582:36 - like this
582:38 - you're gonna be
582:39 - just such a badass developer in the
582:41 - future and you're gonna be so much
582:42 - stronger than most people and where
582:43 - other people get stuck you're gonna be
582:45 - flying past
582:47 - so i hope this made sense
582:49 - i do i would like to do some more kind
582:52 - of exercises with classes because
582:55 - i think you should get very used to
582:57 - seeing them like everything under the
582:59 - hood is going to be some type of class
583:01 - some type of object everything under the
583:03 - hood is going to be
583:05 - methods and all that type of stuff going
583:07 - on so if you start getting used to
583:09 - seeing all of this now i think it's
583:11 - going to be good for you so we're going
583:13 - to do a few more examples together
583:16 - so all of these notes here i'm going to
583:18 - leave them for you
583:21 - so you have access to them kind of
583:23 - whenever you want
583:25 - okay let's go let's make sure that
583:27 - they're running
583:30 - and if you ever want to run them you can
583:31 - just copy them into a new rupple and run
583:33 - it okay and all of these notes i'm going
583:36 - to take them we're going to go back to
583:38 - our javascript course
583:39 - and then inside of classes i'm going to
583:43 - create a new
583:45 - folder
583:46 - okay and in this folder
583:49 - i'm just gonna call it or actually this
583:51 - could work really well as a
583:54 - yeah so that's good actually so let's go
583:56 - inside of here we're gonna create a new
583:57 - folder and i'm gonna call it
584:01 - car
584:03 - class okay
584:04 - and then inside of here we're going to
584:06 - make a new file we're just going to say
584:09 - how did we name them we should just call
584:10 - them script.js everywhere for fighting
584:12 - game would it be yeah we just call
584:14 - script.js that's fine
584:16 - and then all of this is gonna be in here
584:18 - for you okay so you're gonna be able to
584:20 - see
584:22 - how do you actually work with uh
584:24 - you know how did we create the car class
584:26 - and that lesson is gonna be there so you
584:27 - can just go and take a look at it at any
584:30 - given time that you want all right to
584:32 - finish this off i'm gonna leave you with
584:34 - an exercise
584:37 - try creating a new replit a new rupple
584:41 - okay on replit
584:42 - with just html css javascript and try
584:45 - creating a bank class
584:47 - okay so create a bank class
584:51 - and then it should have methods such as
584:55 - withdraw
584:56 - and it should have methods such as
584:58 - deposit okay
585:00 - and it should have properties
585:03 - such as
585:05 - balance okay
585:07 - so for example i should be able to do
585:10 - [Music]
585:11 - um
585:13 - you know kazi accounts
585:15 - and i should be able to do new bank
585:17 - account or whatever
585:19 - account
585:21 - um and you could call the class bank
585:23 - account or bank i don't care whatever
585:26 - and then maybe you could uh start it off
585:29 - with the initial balance okay so and
585:31 - then if you ever do self dot or
585:35 - sorry python world desktop balance it
585:37 - should get me the current balance in
585:39 - this case it should get me back you know
585:42 - 100.
585:45 - if i do
585:46 - this dot
585:49 - deposits 100
585:52 - the balance should get incremented so
585:54 - what should happen is give me one second
585:57 - and i'll show you what should happen
585:59 - okay let's move this up here
586:03 - boom
586:03 - [Music]
586:05 - all right if i do that then
586:08 - after this if i actually take a look at
586:10 - this dot balance
586:12 - that should become 200.
586:14 - if i do this dot withdraw
586:18 - 100
586:20 - then when i look at this.balance
586:22 - that should become 100 okay because i
586:25 - just subtracted it
586:27 - so
586:28 - i want you to give this a shot
586:31 - see how far
586:33 - you can take it and how much of it you
586:34 - can complete i really believe you should
586:36 - be able to do this entire thing
586:38 - and you should be able to call these
586:40 - methods
586:41 - okay and then
586:43 - do them right so it should be this that
586:45 - deposit yep 100 like this it's a
586:48 - method right and then it takes in a
586:50 - function sorry it's a method and it has
586:52 - a parameter that you have to pass it so
586:54 - in this case i'm going to pass it 100
586:56 - and then increments it by 100 if i do
586:58 - 5000 or 10 000 it should increment by
587:01 - that amount
587:03 - on the other edge cases
587:06 - let me ask you this if you have zero
587:07 - dollars in the bank should you be able
587:09 - to withdraw a hundred dollars so let's
587:11 - say that this dot balance
587:13 - or let's say you try to withdraw in this
587:15 - case
587:17 - two hundred dollars when you only have a
587:18 - hundred dollars left should you be able
587:20 - to do that
587:22 - no you should not
587:23 - so
587:24 - it should catch that
587:27 - it should stop that from happening
587:30 - and
587:31 - it should print out an error message
587:34 - telling the user hey you cannot withdraw
587:39 - more than what you don't have
587:41 - in order and if you want to make it
587:42 - really jacked and really amazing try
587:45 - adding a ui to this project i don't care
587:47 - if it's ugly it doesn't matter
587:50 - but see if you can add a ui to this as
587:52 - well so it has like buttons i could
587:54 - press for withdraw i could click them
587:56 - and they can help me withdraw
587:58 - and then i click a button it helps me
587:59 - deposits deposit
588:03 - so maybe
588:04 - so let's actually draw this out right so
588:06 - i have a
588:09 - button here
588:11 - for withdraw
588:13 - draw
588:16 - i have another button
588:19 - okay
588:20 - i have another button
588:23 - right here or wherever it doesn't matter
588:26 - for
588:29 - deposit i don't care about the ui as
588:31 - long as you get get it done
588:34 - and then we have another
588:38 - button here
588:40 - or not a button but like rather maybe
588:41 - you have a
588:43 - you know maybe here it actually says
588:45 - what the balance is so it just says like
588:48 - hit a balance right now
588:49 - is 100 or whatever so it actually
588:52 - literally has the balance written out
588:53 - and then the balance increases and you
588:55 - can see it on the screen
588:57 - right so you hit withdraw you hit
588:59 - deposit it either decrements or
589:01 - increments
589:03 - and you know and then if there are any
589:05 - other methods or anything like that you
589:07 - could think about adding them uh maybe
589:10 - there is like you want to close your
589:12 - checking account or something like that
589:13 - and then just clears up everything
589:16 - you know
589:17 - but
589:18 - this is like the main crux of it so
589:21 - try doing this see if you can
589:26 - nail this one you should definitely able
589:28 - to nail this exercise
589:30 - and then once you give it a full solid
589:33 - attempt
589:34 - then we'll work together and code
589:36 - together and
589:38 - make the finished version
589:39 - got it all right i hope you're excited
589:42 - go give it a try and then come back and
589:45 - we'll do this together all right now
589:47 - let's work and create that bank class
589:49 - that we were talking about
589:51 - so let's go ahead and do this so i have
589:54 - this bang class the first thing that
589:56 - comes to my mind before i even start
589:58 - thinking about anything is bank class
590:01 - bank just like this
590:02 - okay
590:03 - um and
590:05 - you know i'm like okay cool that's
590:07 - that's that's a good start
590:09 - what's next
590:10 - well what's next is i have certain
590:12 - methods i have a draw method so i'm just
590:14 - going to go ahead and kind of create
590:16 - that
590:17 - and then i have a deposit method so i'm
590:20 - going to go ahead and create that
590:22 - okay
590:23 - the
590:24 - the balance is going to be something
590:26 - that's going to be instantiated so it's
590:28 - going to be like right when the class is
590:30 - created the balance is going to be
590:32 - created right at the exact same time so
590:33 - for that i'm going to need constructor
590:36 - and the construction is going to just be
590:38 - kind of empty like this and i'm going to
590:40 - say
590:41 - i'm going to grab balance and we're
590:43 - going to say this stop balance is
590:46 - whatever the balance was passed in then
590:49 - all withdrawal does in my mind is
590:51 - withdraw
590:54 - right this this function right over here
590:58 - withdraw
591:00 - what this does is it should just take
591:03 - this dot balance and increment it by
591:07 - whatever amount the user wants
591:10 - and we should have pretty much the same
591:12 - thing here for deposit but we decrement
591:15 - it oh sorry the other way the other way
591:17 - the other way decrement on withdrawal
591:19 - and increment on deposit right because
591:21 - we're depositing money and we're taking
591:23 - out money
591:25 - so so far looks pretty good to me looks
591:29 - like we're almost done honestly with
591:31 - this let's go ahead and
591:34 - do const causey
591:37 - checking and we'll say cla new bank
591:41 - and uh we're going to put in we're going
591:42 - to start it off with a deposit of 100
591:45 - okay let's go ahead and console
591:48 - log
591:49 - causey checking
591:51 - dot balance
591:53 - okay
591:54 - and then we're simply going to i'm gonna
591:57 - just move it a little bit out of the way
591:58 - here and we're gonna say run
592:01 - okay and you can see that i'm getting
592:03 - back uh 100 here which is great
592:07 - you know that's exactly what i had
592:09 - expected when we made this
592:11 - now let's try adding so i'm going to say
592:14 - causeychecking.deposit
592:17 - and we're going to add in 100 and then
592:19 - let's print out the balance again
592:21 - okay and now the balance is 200
592:24 - and what we can do is inside of our
592:26 - withdraw function i can just add an or
592:29 - end deposit i can add a console log
592:31 - right here
592:32 - and i can say
592:36 - so it just shows us the balance right
592:38 - away okay so
592:39 - [Music]
592:40 - that won't work so i'll just do balance
592:43 - call in this dot balance like that okay
592:46 - and you could call this whatever you
592:47 - want that doesn't matter and this in
592:50 - objects is the same thing as if you did
592:52 - balance
592:53 - okay
592:54 - so both are the same so i'm just going
592:55 - to copy this
592:57 - and i'll also paste it over here
593:00 - so we have
593:02 - um
593:03 - so basically as soon as it updates the
593:05 - balance amount it should just show it
593:08 - okay so then that way we don't have to
593:10 - do all these
593:12 - a ton of console logs
593:14 - okay
593:15 - and maybe let's add another console log
593:18 - that says
593:19 - console.log
593:21 - deposited
593:23 - and the amount
593:26 - okay
593:27 - and then we'll do the same thing for
593:29 - withdraw and we'll say with
593:31 - drew
593:32 - the amount so let's run it
593:34 - and now you can see it says deposit it
593:36 - 100 right
593:38 - and we can put in
593:43 - so i just put a dollar sign here
593:46 - and then we can put amount like that so
593:48 - it'll show it with the dollar sign so
593:50 - it's a deposit 100 so balance is now
593:52 - 200.
593:54 - okay
593:56 - and we can we can do this same trick
593:58 - that we did here for with
594:01 - for withdrawing okay
594:03 - so
594:04 - let's try with draw
594:10 - so after withdrawing balance is 100
594:12 - let's withdraw one more time balance is
594:14 - 100 0 right now here's going to be the
594:18 - problem
594:19 - if i try to withdraw one more time do
594:21 - you think it's gonna let me withdraw
594:22 - i'll give you five seconds to figure
594:24 - that out five four three two one
594:28 - yes it's gonna let me withdraw right
594:30 - watch what happens boom negative 100
594:33 - should i be able to withdraw allowed to
594:35 - withdraw money that i don't have the
594:37 - answer is resounding
594:39 - no right heck no i should not be allowed
594:42 - to do that that is crazy otherwise
594:45 - would be super rich right all of us
594:47 - would be insanely rich so what we want
594:49 - to do in that case is
594:51 - add a guard clause inside of our
594:54 - withdrawal
594:55 - okay so we're going to say guard clause
594:58 - so protect against this and i'm just
595:00 - going to say if and hopefully you tried
595:03 - this and you got it if you did good job
595:05 - and if you didn't that's okay but like
595:07 - if you didn't get it and you want to
595:08 - attempt it now try pausing it now
595:11 - and basically what i'm gonna say is i'm
595:12 - gonna say
595:14 - if
595:15 - this dot balance is less than
595:19 - or equal
595:20 - to zero then just return like meaning
595:23 - don't don't run
595:26 - don't run this function method just stop
595:28 - it right here okay so let's try running
595:31 - let's try this again and let's see what
595:34 - happens
595:35 - okay and maybe we can even say this and
595:38 - and say um
595:40 - you know or maybe we can we can like
595:41 - throw an error here too or a console log
595:44 - and just say
595:46 - can't
595:48 - not
595:51 - withdraw
595:56 - you cannot withdraw
595:58 - more than
596:00 - what you have so if we're already at
596:03 - zero this will stop us this statement
596:05 - will stop us with drawing if we're
596:07 - already at zero okay so for example if i
596:10 - try running this now
596:12 - it says you cannot withdraw more than
596:14 - what you have so this is really good for
596:17 - zero but the the problem still remains
596:20 - for example if my balance was at 100 i
596:24 - could still withdraw 200 right that
596:26 - won't we won't be stopped by that let's
596:28 - say
596:29 - i try 200 and run this you can see now
596:32 - my balance is negative 100 right and
596:35 - then it stops me after that
596:38 - but that's not what should happen we
596:40 - should be able to withdraw before that
596:42 - so maybe what we want to check is we
596:44 - want to say if this dot balance minus
596:47 - the amount
596:49 - that we're being passed in
596:52 - if that's less than or equal to zero
596:53 - then just stop so let's try running it
596:55 - now and you'll see that it doesn't let
596:58 - us withdraw less than you know once
597:00 - we're at 100 it doesn't let us withdraw
597:02 - and it stops us twice and stops us both
597:05 - times so we'll not be able to withdraw
597:08 - any more than we have right so for
597:09 - example if i try to withdraw let's say a
597:12 - thousand dollars it'll just say sorry
597:14 - can now withdraw it all right and the
597:17 - our balance will still be at at 200 okay
597:20 - so maybe we can i can do this it's like
597:23 - i can print out the balance as well here
597:25 - right so you can now withdraw more than
597:27 - what you have and then boom shows the
597:29 - balance right there so that stops it and
597:32 - now you can you can try
597:34 - depositing you know as much as you want
597:36 - you can deposit ten thousand ten
597:38 - thousand ten thousand if you look at
597:40 - your balance it'll be twenty nine
597:42 - thousand one hundred now let's say you
597:44 - start with drawing twenty thousand and
597:47 - then you try with drawing 5 000 and then
597:50 - another 5 000. let's see what happens so
597:53 - a bunch of your deposits deposited 1000
597:56 - withdrew
597:57 - so deposited one 10 000 deposited 10 000
598:00 - and then you tried to withdraw so it's
598:01 - like withdrew 1000 withdrew 20 000 so
598:05 - balance is not 90 100 from 29 000 that
598:08 - makes sense
598:11 - but when your balance got to 4 100 right
598:14 - and you try to withdraw 5 000 well you
598:17 - ca it says you can't you can't withdraw
598:19 - five thousand dollars so
598:22 - that's how those methods are working so
598:24 - that's really really good now the only
598:27 - thing that was left is if you could kind
598:29 - of create a ui for this right so let's
598:32 - go ahead and try to create a ui for this
598:34 - that shouldn't be that hard so the first
598:35 - things i want to do in order to create a
598:37 - ui is
598:38 - i need some buttons
598:40 - all right i'll create another button
598:41 - here
598:42 - and for this button we'll call it
598:45 - we'll give this button an id of deposit
598:49 - deposits we'll give this button id of
598:54 - give this button an id of withdrawal
598:57 - okay so we got two buttons here
598:59 - and it'll say deposit this button will
599:01 - say
599:02 - withdraw so a little plus sign to show
599:05 - that that adds money this withdraws
599:07 - minus sign that that withdraws money
599:09 - we'll remove this hello world from there
599:11 - okay so now we have deposit and withdraw
599:13 - um we'll have the text for
599:17 - your balance right there so
599:19 - i will have a div here
599:21 - and then inside of this div i will have
599:25 - a p tag
599:26 - and this p tag will say
599:29 - uh
599:30 - balance
599:31 - right and then balance will be zero for
599:34 - now and then we'll give this an id
599:36 - of balance this div because then we're
599:39 - going to be able to change its inner
599:40 - attacks or it's inner html
599:42 - right
599:43 - perfect so we got balance right there
599:46 - cool
599:47 - so
599:48 - we have our balance we have deposit
599:50 - withdraw
599:51 - and now what we want to do is when we
599:53 - click
599:54 - we want certain functions to run so what
599:57 - i can do and there's this nice little
599:58 - trick since i have this deposit id right
600:01 - here i could actually just
600:02 - say i believe deposit and should run
600:05 - this i think so
600:07 - but
600:09 - let's uh let's not be that hacky let's
600:12 - try to avoid being that that degenerate
600:15 - so i'm just gonna say const
600:17 - deposit button and we're gonna
600:20 - [Music]
600:22 - documents
600:24 - dot get elements by id and we're gonna
600:27 - say deposit
600:29 - okay
600:31 - and then i'm gonna do the same thing
600:35 - and we'll get the
600:38 - withdrawal
600:40 - button and all we're going to do is
600:42 - we're just going to attach listeners to
600:43 - this i'm going to say deposit button dot
600:46 - on click and every time you do on click
600:50 - we're going to do you know quasi
600:52 - checking and this we'll just do cause
600:54 - you checking that withdraw that's fine
600:56 - cause you checking that
600:58 - withdraw
600:59 - and um oh okay that's a good that's a
601:02 - good point we'll also have to do a input
601:04 - field for like how much do we want to
601:06 - deposit or withdraw right so let's do
601:08 - input and we'll give this an id of
601:13 - amount so let's go back and i will
601:16 - simply
601:18 - go
601:19 - amount input and then we will say amount
601:23 - so if i hit run again you'll see i have
601:25 - a field above here because that will
601:27 - basically tell us how much do we want to
601:30 - uh withdraw or deposit so i'm going to
601:33 - say withdraw
601:34 - whatever the amount input dot value is
601:38 - okay
601:39 - and let's see if that actually
601:42 - does anything right so i'm gonna
601:45 - i'm just gonna console.log
601:47 - and i will say amount
601:50 - input dot value
601:52 - [Music]
601:53 - and let's see if that does what we
601:54 - wanted to do so i'll say 23 and i'll run
601:56 - this
601:57 - sorry 23 and then i'll hit
602:00 - i actually got to attach it to something
602:02 - right so for now i'll remove this line
602:04 - and i'll just say
602:06 - amount input dot value and just console
602:09 - log it for me please
602:12 - let's run this and let's hit deposit
602:14 - deposit deposit 23 deposit 25 deposit
602:18 - deposit that does not do what we want it
602:20 - to do let's just console log anything
602:22 - for now just to see if things are
602:25 - attached the right way
602:27 - let's run this let's deposit deposit
602:29 - deposit did it this is still not doing
602:31 - what we wanted to do okay so let's go
602:33 - back to our deposit button it has the
602:36 - correct id
602:38 - of
602:39 - deposit right
602:41 - so the id is correct let's go back
602:50 - pause it this is going to be withdrawal
602:52 - and so i'm saying deposit button
602:55 - dot on click that let's try that
603:00 - ah interesting
603:02 - okay let's open this up let's just see
603:03 - if it's not a bug
603:06 - hit inspect
603:08 - console and let's hit draw
603:13 - it is not a bug interesting okay we're
603:16 - doing something wrong we'll figure it
603:17 - out
603:18 - oh yes i forgot on click takes in a
603:22 - uh anonymous function right so let's do
603:24 - this
603:27 - and now let's hit deposit yes so it runs
603:29 - every single time so now the button
603:31 - click is being detected correctly that's
603:33 - good
603:34 - now let's do amount input dot value
603:38 - and let's run that
603:40 - oops let's run this
603:42 - let's do 23 deposit 25 4 deposit 25
603:46 - deposit now this part is running
603:49 - correctly as well so if i do 26
603:52 - deposit
603:53 - right works
603:55 - works correctly good okay let's move it
603:58 - to a new
604:00 - line so things don't get that squished
604:03 - okay so i have attached a listener on
604:05 - this on click
604:07 - now let's try doing that withdraw thing
604:10 - that we were doing with
604:12 - draw
604:13 - [Music]
604:14 - right kazi checking out withdraw amount
604:16 - dot input value okay
604:19 - and
604:20 - let's try doing that so i'll do ten
604:22 - dollars uh oh sorry not withdraw right
604:25 - deposit
604:26 - because this is a deposit button so
604:28 - let's run the code again let's hit ten
604:30 - dollars deposit boom the deposit just
604:33 - went up by ten but it's attaching the
604:36 - string so now it doesn't say 4
604:38 - 100 now it says like 410 000
604:43 - so what we want to do is we want this to
604:45 - be a number and yes okay so we want we
604:49 - want that to be a number and what we
604:51 - could do is we could just call dot value
604:53 - on here and we could just call number on
604:56 - this so now and then amount we don't
604:59 - need it to be an input because it's
605:00 - actually an amount now and we just pass
605:02 - this amount around now so now i could
605:05 - set deposit amount
605:07 - okay so if i said 10 here hit deposit
605:11 - amount input is not defined
605:14 - so this is just the amount
605:17 - and i don't even need that line anymore
605:19 - let's run it again
605:20 - let's do ten dollars deposit
605:23 - okay let's do twenty dollars deposit
605:28 - oh
605:28 - interesting we actually can't do it like
605:31 - that so let's go back
605:34 - let's keep that amount input there
605:36 - once we get this query selector then we
605:38 - have to do dot value because if we just
605:39 - do dot value it's going to just get the
605:41 - value that it initially had when the
605:44 - script loaded and that's it and then
605:46 - every time you click it it's just going
605:47 - to get you back that value but if you
605:49 - keep it like this dom element
605:52 - and then at the time of the click pull
605:53 - the value then you're actually going to
605:55 - get the correct value
605:57 - so i apologize but you're going to have
605:59 - to keep doing that value here and then
606:01 - you're going to have to
606:03 - type cast that to a number
606:06 - like this okay so this you'll kind of
606:08 - have to do
606:09 - each time okay so let's run this
606:12 - and
606:13 - see this i don't need this here anymore
606:16 - let's run it again
606:17 - all right i'm going to deposit ten
606:18 - dollars and now you can see that the ten
606:21 - dollars are deposited correctly
606:23 - okay
606:24 - let's try depositing a thousand dollars
606:28 - let's try depositing 20 000
606:31 - right
606:32 - and you can see
606:35 - at the bottom right there
606:39 - now it's doing it correctly right we're
606:41 - depositing the correct amount
606:43 - now
606:44 - let's try doing the same thing for the
606:46 - withdrawal button so if you haven't done
606:47 - it yet try doing the withdrawal button
606:50 - yourself and see if you can get it i'll
606:51 - give you five seconds five
606:54 - four three two
606:56 - one
606:57 - all right let's try the withdrawal
606:59 - button together so i'm gonna paste this
607:02 - i'm gonna replace this with withdraw
607:05 - and then
607:07 - we're gonna use the withdraw method here
607:10 - okay and we're just gonna do number
607:12 - amount input.value same way
607:15 - let's
607:16 - run this and i'm gonna say
607:18 - 100 deposit so balance is 42
607:22 - and now withdraw balance 4 100. so now
607:25 - deposit and withdraw are working all i
607:27 - need to do is update the dom after
607:30 - we do this deposit right
607:33 - so as soon as that happens we're going
607:35 - to update the dom
607:36 - and how what i'm going to do is i have
607:39 - the
607:40 - amount
607:42 - not the amount input i need the
607:45 - i need the balance right so i need this
607:47 - balance div
607:49 - so let's go back and we're going to do
607:52 - const balance
607:55 - div
607:56 - document.getelementbyd
607:58 - and we're going to say balance
608:00 - okay so it's going to get us to div
608:03 - and i'm going to say
608:04 - inner text
608:06 - and we're going to set that to and it's
608:08 - going to say balanced
608:12 - um
608:13 - and we're going to pass in
608:16 - this right
608:18 - there okay
608:24 - you could also just do this so we can
608:26 - create a new variable
608:27 - use that here
608:30 - and use that here okay and then do the
608:32 - same thing for the withdrawal function
608:37 - and then just replace it with amount so
608:39 - then it's cleaner
608:41 - okay
608:42 - so there we go quasi checking that
608:44 - deposit amount
608:46 - and then the balance is going to read
608:47 - that amount and then we're going to do
608:49 - the same thing right here balance div
608:51 - enter texas amount let's run this let's
608:54 - hit 10
608:55 - boom balance is 10. let's do
608:58 - 30.
608:59 - now you can see balance is 30. right but
609:02 - the problem here is that it's only
609:05 - putting in the amount it's not actually
609:07 - putting
609:08 - the actual balance so instead of amount
609:11 - what should we put here take a
609:14 - guess what we should actually put in
609:17 - here is we should do
609:19 - causeychecking.balance
609:22 - okay that's what we want to do here
609:24 - let's go ahead and do that
609:27 - here as well so it's reading the balance
609:29 - the entire time in that case
609:32 - all right let's run it
609:35 - and let's go 100
609:37 - deposit
609:39 - 1000
609:40 - deposit 5200
609:43 - 20 000 deposit 25 000 withdrawal 1000
609:49 - or sorry withdrawal right
609:52 - withdrawal let's say
609:55 - 19 000 it would draw boom the new
609:58 - balance is 2200.
610:01 - so
610:03 - hopefully this should
610:05 - so hopefully this tells you a lot about
610:08 - how classes work
610:11 - you know what you could do with them how
610:13 - to then connect them to a ui and all of
610:16 - those things because they make your life
610:18 - honestly
610:19 - a lot easier right and then you can use
610:22 - them in a really nice easy way um
610:27 - and they're just really useful and
610:29 - you're gonna see them everywhere and
610:30 - everything is a class like balance div
610:33 - this is a class that's why you're doing
610:35 - dot inner text
610:37 - documents is probably like of a you you
610:40 - get this document object model which is
610:42 - probably like this class or this object
610:44 - and you can do dot get element by id let
610:46 - me ask you what's dot get element by id
610:48 - is it a property is it a method or is it
610:50 - a function which one is it
610:52 - you should be able to guess this in like
610:54 - three seconds three two one
610:56 - if you guess this is a method good job
610:59 - this is a method right because it looks
611:00 - like a function but with a dot
611:02 - that's a method so this document is a
611:05 - class and then we're doing this dot
611:06 - whatever method
611:09 - um so everything just everything has to
611:12 - do with classes and objects and
611:15 - all this stuff and so this is why this
611:17 - is so important for you to learn and
611:20 - you know this this keyword is so
611:23 - important to learn because this will
611:24 - come so many places it will be so
611:26 - confused what it was and you'll be
611:27 - thankful that you did so many
611:29 - class-based exercises and will still do
611:32 - more because
611:35 - like just doing one example is not
611:37 - enough you have to do so many different
611:39 - examples so many different exercises so
611:41 - many different projects and then the
611:43 - more you do the more it starts clicking
611:45 - and the more you start understanding so
611:46 - pattern recognition and programming is
611:49 - one of the most key and underrated and
611:51 - understated things that you could do
611:53 - that will just like skyrocket your skill
611:55 - set okay like intelligence is one thing
611:58 - yes but pattern recognition is even
612:00 - beyond that when it comes to con you
612:02 - know programming even things like chess
612:05 - and then you can build on top of it and
612:06 - take it further
612:08 - now the last thing i'll do for you is
612:09 - we'll take this bank's class we're going
612:12 - to go to our
612:14 - javascript course
612:15 - and then inside of here inside of
612:17 - classes i'm going to create a new folder
612:19 - and we'll call it
612:22 - banks
612:23 - class okay
612:26 - and then in here i'm going to create a
612:28 - new file it'll just be called script.js
612:31 - and this file will have the entire code
612:34 - okay and then i'll grab the index.html
612:38 - so you have that to refer to as well and
612:41 - you can always see it
612:43 - go back here
612:44 - and we'll add in
612:46 - whoops oh jesus what did we do
612:51 - what did i do okay i moved banks out of
612:54 - the banks class out of the classes okay
612:55 - cool now we're good
612:57 - let's add in a new file here and we'll
613:00 - say index.html
613:03 - and we'll paste that html right here
613:06 - okay
613:07 - all right so now what you'll be able to
613:09 - do is you'll be able to go to the home
613:10 - page right and right on the home page
613:13 - right here
613:14 - you'll see lessons and in lessons you'll
613:17 - see classes
613:19 - it'll say bank with deposit and withdraw
613:21 - methods and so this lesson will be
613:23 - available for you you can click it
613:26 - and play around with it right here okay
613:28 - and deposit so you'll have the fully
613:30 - working app with the final solution okay
613:32 - and then you'll be able to hit withdraw
613:35 - and take out any of the monies right hit
613:38 - withdraw let's do 300.
613:41 - boom
613:42 - okay
613:45 - boom
613:46 - 99
613:47 - okay you'll be able to withdraw whatever
613:50 - you want deposit whatever you want so
613:52 - this app is there for you now and then
613:54 - if you want to look at the code
613:56 - obviously the code is going to be inside
613:58 - of folder called classes it's going to
614:01 - have banks class in there and inside of
614:03 - there you're going to have this code and
614:05 - then the script file
614:07 - is going to be the main one where the
614:09 - entire javascript is sitting there
614:11 - waiting for you okay and you can always
614:14 - use this to refer to your notes
614:17 - run the app make changes and do whatever
614:19 - you want okay hopefully that was
614:22 - insightful and gave you some more
614:24 - insight into classes and we'll be still
614:27 - doing more stuff so i hope you're
614:29 - prepared and excited all right now that
614:31 - you got your classes skills up to a
614:34 - certain level and we worked on how to
614:36 - make a bank we also worked on how to
614:38 - make a car class
614:40 - now what i want you to do is you're
614:42 - going to be taking it up a notch and
614:44 - you're going to be building a street
614:45 - fighter game and this is going to be a
614:47 - really fancy game it's going to have
614:49 - sounds and it's going to have the
614:50 - ability to attack and heal and you're
614:52 - gonna have ken and ryu and two fighters
614:55 - fighting you're gonna be able to create
614:56 - a player class a game class and you'll
614:59 - be able to play the game win the game
615:00 - and you'll be able to hit q a to attack
615:03 - and heal from player one and you'll be
615:05 - able to hit p and l
615:07 - to attack and heal with player two and
615:09 - there's gonna be a whole lot of stuff
615:11 - you can do with classes and this game is
615:13 - gonna push your javascript javascript
615:15 - skills to the next level now for this
615:17 - game your instructor is gonna be lance
615:20 - so i hope you're excited stay put he's
615:22 - an awesome instructor i love him to
615:24 - death you're gonna enjoy it and i'm
615:26 - gonna send it over to lance to show you
615:28 - how to make the fighting street fighter
615:31 - game let's go lance what is up guys it's
615:34 - lance here and like kazi said i'm going
615:35 - to be taking over this specific section
615:38 - of the javascript course i hope you guys
615:39 - are ready you guys are crushing it so
615:41 - far and as you can see we're on a
615:43 - separate repel from the course right
615:46 - these are the topics that i want to go
615:48 - over so the first one we have up here is
615:49 - something called while loops you may
615:51 - have heard of this when kazi was
615:53 - explaining loops the ones that i know
615:54 - that you guys know are the for loops so
615:57 - take a look so with four loops my key if
616:00 - you want to know the difference between
616:01 - these two is you use four loops right
616:04 - when
616:04 - you
616:05 - know how many times
616:08 - you want to loop right
616:10 - and for a while loop
616:12 - right they do the same thing they both
616:14 - loop but you use this when you are
616:18 - not sure how many times
616:22 - you want to loop right think about when
616:25 - we use a for loop i use a for loop to go
616:27 - through an array and loop however long
616:29 - that array is we know that right but the
616:31 - while loop we want to keep looping until
616:34 - a condition
616:35 - is not true all right so let me show you
616:38 - what it looks like enough talk all right
616:41 - for a while loop all you have to do is
616:42 - set up is just this right the key thing
616:46 - that makes this engine run is this right
616:48 - here this is called your condition right
616:51 - whatever you put here is how long you're
616:53 - going to loop to so let's set up an
616:54 - example all right let's say let num
616:58 - is equal to zero right if i were to
616:59 - console log num it would just show me
617:01 - it's zero
617:02 - but what if i say keep looping
617:05 - while num
617:07 - is less than
617:09 - five
617:10 - right
617:11 - so that's how you can read this it's
617:12 - actually really easy to read with while
617:13 - loops you can say while num is less than
617:16 - five keep looping so if i ask you guys
617:18 - right now right here
617:20 - is num less than five yes
617:22 - right so if i were to run this piece of
617:24 - code it would actually run forever
617:26 - because when will num ever equal five
617:29 - see
617:30 - there we go so then we can say something
617:32 - like this right while num is less than
617:34 - five you wanna say
617:37 - consolag looping
617:39 - right and then after we say console log
617:41 - looping we can also do a num
617:45 - plus plus
617:46 - all right do you guys remember what plus
617:47 - plus does plus plus will increment add
617:50 - one to the value of num so the first
617:52 - time it's zero right then the second
617:54 - time it's one two right and so what we
617:57 - could also do here is put a comma and
617:59 - write num
618:00 - so if i were to run this code what do
618:02 - you think we're gonna see in the console
618:03 - over here give you guys five seconds
618:06 - one
618:07 - two three
618:09 - four
618:10 - five did you alright let's hit run and
618:12 - we can see looping zero looping one
618:14 - looping three looping four so how many
618:16 - times did this run this run five times
618:19 - right
618:20 - so now we can switch it up
618:22 - all right let's say
618:24 - let's say let
618:26 - num
618:27 - 2 is equal to 10 right but we didn't
618:30 - know let's pretend this is a hidden
618:31 - number that we didn't know right as long
618:33 - as num is less than num2
618:36 - right keep looping what if we didn't
618:38 - know what num2 was will it still stop
618:40 - yeah because once it reaches 10 right
618:42 - the condition is no longer true so let's
618:45 - hit run there we go 0 through 9. so
618:47 - that's kind of how the while loop works
618:49 - while the condition is true keep
618:52 - looping so here's a here's another
618:54 - example not as useful all right you can
618:56 - say
618:57 - let
618:58 - and this will be closer to the activity
618:59 - that we're doing let
619:02 - finished equals false i'll say equal is
619:06 - true
619:08 - right so
619:09 - if i said in this while loop finished
619:12 - is equal equal to true
619:15 - right
619:17 - how many times would this loop if i were
619:19 - to run it take a guess
619:20 - if you said it ran infinitely you'd be
619:23 - correct why is it infinite though answer
619:25 - my question what do you think that's
619:26 - because we're saying while finish is
619:28 - equal equally true keep looping but at
619:31 - any point did finish change no but if i
619:33 - were to say in this while loop finish is
619:35 - now equal to false
619:36 - right
619:37 - then we could say
619:40 - run
619:41 - and we'll just see one looping right
619:42 - because it's going to console.log switch
619:44 - it to false and then exit the wild
619:47 - there we go so we looked at the while
619:48 - loop that's pretty much it for that so
619:50 - the next thing we have is add event
619:52 - listener right here and if we were going
619:54 - to talk about ad event listeners you
619:56 - guys need to remember what the dom is so
619:58 - what is the dom well
620:00 - the dom
620:01 - right
620:02 - dom stands for what
620:04 - document
620:06 - object
620:07 - model or model right basically the html
620:12 - itself right so here doctype html and we
620:15 - can select with javascript any of these
620:18 - elements here so as you can see we have
620:20 - our basic hello world text up there how
620:23 - would i grab
620:24 - this div
620:26 - right with javascript all right can you
620:27 - guys see it you guys remember
620:30 - so give me five seconds
620:31 - one
620:32 - two
620:33 - three
620:34 - four
620:35 - five awesome so
620:37 - if you notice there's a little id here
620:39 - that says play alright so what we could
620:41 - do right is set up a variable you can
620:43 - say
620:44 - let
620:46 - play is equal to and then how do you
620:48 - grab uh an id from the dom well i can
620:51 - say document dot get element by id
620:54 - and just over here just say
620:56 - play all right and if i were to console
620:59 - log
621:00 - play what are we going to see
621:02 - exactly html
621:04 - div element right if i wanted to get the
621:07 - inner text
621:08 - right
621:10 - could do something like this
621:12 - enter text hello world all right that's
621:14 - what it says inside that div cool and
621:16 - this is how we use the dom to get what
621:18 - we want from our html right so
621:21 - what if i wanted to add an on click to
621:23 - this what did it cause it teach you you
621:25 - guys remember and for simplifying and
621:27 - for simplifying purposes we're actually
621:29 - going to call this play div so you can
621:30 - make a difference
621:32 - okay cool so now
621:34 - our variable that's holding our dom
621:37 - element
621:38 - called play is hello world so how do we
621:42 - add an event listener the way that qazi
621:43 - taught you right play div would be
621:45 - something like this dot
621:47 - on click right every element has an on
621:50 - click attribute that we can access here
621:52 - and we can say onclick is equal to
621:56 - an anonymous function which just means
621:58 - you know just means a function without a
622:00 - name so if i say when i click this div
622:04 - on the when i click on click of this div
622:06 - we'll console.log
622:09 - yoyo right so let's hit run
622:12 - let's click hello world we should see
622:16 - yoyo
622:17 - oh i see it's because i did capital c
622:19 - just to be lower case c
622:21 - let's see now
622:22 - run
622:23 - yo yo yo
622:25 - yo yo you got it cool so that's pretty
622:27 - simple that's perfectly fine and i'm
622:29 - just going to show you guys an alternate
622:31 - way to do the same exact thing right so
622:34 - this is the on click way right but
622:36 - there's also
622:37 - something called add event listener so
622:40 - play div
622:41 - so you could do is say play div dot
622:45 - add event listener
622:47 - right and then you can say
622:50 - two things right so let's say add event
622:52 - listener and you notice these
622:53 - parentheses down here let me zoom in
622:56 - cool these parentheses
622:58 - comes from the add eventlistener method
623:01 - so this is a method right
623:04 - and it takes in two arguments what are
623:06 - the arguments it's one
623:08 - what
623:09 - are you listening for here
623:11 - well i'm listening for a click
623:13 - then you can put a comma and then you're
623:14 - going to put
623:15 - a
623:16 - function
623:17 - like so
623:18 - okay
623:19 - so you do this es5 where you can say
623:21 - function
623:23 - and you basically it's what are you
623:25 - listening for
623:26 - and what do you want to do
623:29 - when you click
623:31 - all right so this time i want to say
623:33 - console log
623:36 - hey yo
623:37 - or hey yo poo apparently all right so if
623:39 - i hit run here and i click on this hey
623:42 - yo
623:43 - right so how is that different than this
623:45 - it's just a longer way to add events
623:48 - right the
623:50 - like it's a long way than on click but
623:52 - the benefit would be
623:53 - instead of running a click i can write
623:56 - other ones like key down key up you just
623:58 - have to change what the event is
624:01 - listening for
624:02 - cool right so that's just another thing
624:04 - a little side thing that i want to teach
624:05 - you guys the main reason i wanted to
624:07 - talk about event listeners is because we
624:09 - can do something like this all right we
624:12 - can say
624:13 - document
624:14 - dot add event listing right so what i
624:17 - what am i adding an event listener to if
624:19 - i ask you guys that question
624:20 - okay take a look
624:22 - so this one i added event listener to
624:24 - the play div but this one i'm adding an
624:26 - event lesson to
624:28 - the document right so the document is
624:30 - essentially the dom or the whole uh page
624:33 - itself right so basically
624:35 - if i say
624:37 - right something like this
624:40 - and write key down that is an event that
624:42 - we can listen for
624:43 - and then here i can say function
624:47 - right
624:49 - e
624:50 - right
624:51 - and then we'll console.log
624:55 - hi
624:57 - okay cool so
624:58 - let's take a look and analyze this for a
625:00 - second i'm saying document.add event
625:02 - listener i'm saying listen for a key
625:04 - down which is me pressing down on the
625:06 - keyboard and then this function
625:07 - represents what i want to do when i
625:09 - press key down right i want to say
625:11 - console.log high so let's hit run
625:14 - and if i were to press let's say the
625:16 - queue on my keyboard what's going to
625:18 - happen
625:19 - oh it's going to put q if i click that
625:20 - let's click the app itself
625:22 - hi all right i'm just going to click l
625:25 - hi
625:25 - i'm going to hit space bar
625:27 - hi right whatever key i press down
625:30 - it's going to run this function so
625:32 - that's how event listeners work why is
625:34 - this useful answer why am i telling you
625:36 - well the main thing is e right here you
625:38 - don't need to put e here but e
625:41 - is essentially what's going to represent
625:42 - our event or keyboard event right
625:45 - so
625:47 - if i say something like this if
625:49 - e dot key right because each e has a key
625:52 - attribute that we can call
625:54 - e dot key equals
625:58 - q
625:59 - right
626:00 - then i want to say console of
626:03 - you
626:04 - pressed
626:05 - q
626:07 - else
626:09 - right i'll say console log
626:12 - not q
626:13 - okay cool so let's hit run again
626:16 - if i were to press the spacebar once
626:18 - again oops not there on the app
626:21 - not q obviously it's not cute but if i
626:23 - hit p
626:24 - knock you what if i hit q
626:27 - q so if you ever wanted to make your app
626:30 - respond to your key presses we can use
626:33 - document.ad event listener like how sick
626:35 - is that right this is going to come into
626:37 - play when me and you are going to make a
626:40 - fighting game together where we can
626:41 - press q do a nice punch we can press a
626:43 - we can heal up so i'm getting excited
626:46 - right but we're almost there that is
626:49 - document.ad event listener right and you
626:51 - can set conditions within that function
626:53 - too so i like this because it kind of
626:55 - like ties
626:56 - everything together so
626:59 - awesome so i hope you guys enjoyed that
627:00 - one the next thing i want to talk about
627:02 - is audio tags so let me get a second to
627:05 - set up some sounds here for you guys so
627:06 - that we can mess around with it okay so
627:08 - i took a moment to grab some sounds for
627:10 - you guys oops not packages sounds as you
627:13 - can see we got fast heel quick heel
627:15 - quick hit victory fast these are gonna
627:17 - these are things that we're going to be
627:18 - using for the fighting game activity
627:20 - later on
627:21 - but if you wanted to learn how to add
627:23 - sounds to your javascript project we're
627:26 - going to be using something called the
627:28 - audio tag with our html so we're going
627:32 - to need to go to our html for this one
627:34 - and down below here we can go right
627:37 - before the body or actually we can do it
627:39 - outside of the body even and we can say
627:41 - audio
627:43 - like this
627:44 - okay
627:46 - all we have to do it's similar to
627:48 - the script tags or your image tags right
627:52 - we're going to add a source sorry we're
627:53 - going to say source
627:55 - is equal to sounds
627:57 - all right and then we can just pick one
627:59 - so let's do quick hit all right we can
628:02 - say quick
628:05 - quick
628:06 - hit
628:09 - dot
628:10 - left
628:12 - or actually mp3 doesn't really matter
628:15 - cool
628:16 - so that's the source and after that we
628:18 - can had something called controls so i'm
628:21 - just going to format it real quick
628:26 - so we have source we can also do
628:31 - style
628:34 - yeah so for the style i just want to say
628:36 - display none because i don't want to see
628:37 - this audio tag
628:40 - and then for
628:42 - type
628:44 - let's do an audio
628:47 - mpeg
628:49 - awesome
628:50 - okay and then after that we can also
628:52 - give this an id
628:55 - so i'll just call this punch because
628:56 - it's going to use that punch sound
628:57 - effect and now that i'm looking at it
629:00 - quick hit that web
629:02 - is what should be here wav not mp3 so
629:06 - make sure it's the same as the source
629:08 - we'll hit run really quickly all right
629:10 - don't see the auto tag good
629:11 - and next what we want to do is head over
629:13 - to your script.js
629:15 - and let's think about it right so we
629:17 - have this quick hit sound and kind of
629:18 - goes like poo poo right but when do you
629:21 - want to hear that sound right so that's
629:23 - where the programming starts to come
629:25 - into play i want to hear that sound
629:27 - when i press
629:29 - q
629:30 - right so if i press q
629:33 - after our console log
629:35 - i want to play the sound so how can we
629:37 - play the sound remember we gave this an
629:39 - id right so if we give us an id how do
629:41 - we grab
629:43 - this element ah
629:45 - now it's coming together so
629:47 - if i want to grab an element you can say
629:49 - document
629:51 - dot get element by id
629:53 - and just put in the name of the id which
629:56 - i believe is just punch all right so we
629:58 - got the element now but now we grabbed
630:02 - this audio tag
630:04 - how do i use it
630:06 - well
630:07 - to play audio we can just do this method
630:09 - it's just called dot play
630:11 - and if i hit run again
630:13 - i press p
630:15 - well not there i press p
630:17 - not q right but if i press q
630:20 - you heard that
630:22 - all right it's going to play as long as
630:24 - you press q
630:27 - and a little thump sound that's the
630:29 - little quick hit all right that's the
630:30 - one i'm going to use for the project
630:32 - itself so
630:34 - you can set up conditions based on the
630:37 - key that you key down that you press and
630:39 - based on that you can play a punch or a
630:42 - sound right so that's going to unlock a
630:43 - world of possibilities for you guys we
630:45 - could also set it so
630:47 - let's say you want to add another sound
630:49 - let's say if i don't press q i want to
630:52 - hear something else so if you want to
630:54 - add another sound i'll do is copy all
630:56 - this right
630:58 - place in that audio tag once again
631:01 - help
631:02 - don't forget to close it
631:06 - there we go so that's the close this is
631:08 - the closing audio tag for this one this
631:10 - is the closing audio tag for this one
631:12 - for this one make sure that closes but
631:14 - instead we're going to say
631:17 - victory instead of quick hit it is
631:20 - victory and this is not wav this is mp3
631:25 - so we got mp3 on the line let's hit
631:27 - script js and when do i want that
631:29 - victory sound to play it's when
631:32 - i don't hit q so let's say
631:33 - document.element
631:35 - by id
631:36 - and put in victory
631:39 - vic
631:40 - tori
631:41 - and we'll hit dot play
631:44 - this should work and let me just double
631:46 - check that's what i called it yep
631:47 - victory
631:48 - awesome so let's see if this works
631:51 - run i press q to punch you
631:53 - you heard that and you hit p because
631:55 - that's gonna be something else
631:57 - hey so that's gonna be the victory music
631:59 - when you win in the fighting game as
632:00 - well but as long as i hit not q
632:04 - i'll hit
632:05 - i'll play that victory sound so if i hit
632:07 - spacebar
632:09 - all right i hope you guys can hear that
632:10 - but this is super cool when i found out
632:12 - about javascript sounds i was like yo we
632:14 - could do a lot of different things now
632:17 - right
632:18 - cool so that is audio tag so i didn't
632:21 - really write anything here but we are
632:23 - using them mostly in our html
632:25 - calling them with our javascript and
632:28 - timing when do you want to hear that
632:29 - sound so that's the very basics of all
632:32 - of these things
632:33 - we need all these three concepts plus
632:35 - everything you learned previously to
632:37 - make this fighting game app so
632:39 - without further ado let's move on to the
632:40 - next part alright i think you guys are
632:43 - ready we can finally getting started on
632:45 - your next project the fighting game i'm
632:47 - super excited about this because there's
632:49 - a lot that goes into this this is
632:50 - definitely going to be a lot harder for
632:52 - a project than the previous ones but i
632:54 - think you guys are ready all right it's
632:56 - going to go over all the topics that
632:57 - we've done before especially focusing on
633:00 - classes as you can see here so
633:03 - before i explain what's going on i want
633:05 - to demo the app a little bit as you can
633:07 - see
633:07 - this is our very minimal front end with
633:10 - two players lance for player one kazi
633:12 - for player two right it's pretty obvious
633:15 - how this works if i were to press q
633:17 - lands attacks if kanzi presses q i mean
633:19 - p he attacks as well alright so let's
633:21 - see what happens if i press q right now
633:23 - oops not there
633:24 - on the click on the app thank you
633:27 - there you go you hear that little sound
633:28 - effect
633:29 - and it hits and does damage to qazi and
633:32 - it updates the dom live which is sick
633:34 - all right what if kazi replies with by
633:37 - pressing p
633:38 - there you go i did a little bit more
633:40 - damage than him but we'll see we'll see
633:42 - all right let's say kazi wants to heal
633:43 - up
633:44 - heard that there we go i can heal up as
633:47 - well
633:48 - and that's pretty much the game we can
633:49 - kind of just go at each other one person
633:51 - on the right side keyboard one person on
633:53 - the left or you can just play by
633:54 - yourself like this
633:56 - [Music]
633:58 - hey so it looks like i win this round as
634:00 - you can see lance wins right here and if
634:02 - you wanted to reset just click this nice
634:04 - button over here boom so we're back to
634:07 - 100 health we could go again
634:08 - [Music]
634:11 - now cozzy wins this time so that's
634:14 - pretty much the app all right it looks
634:15 - like pretty simple but there's a lot of
634:18 - things we actually need to keep in mind
634:19 - so i hope you guys are ready right as an
634:22 - added feature we can hit the simulate
634:24 - button
634:26 - and look at that kazi wins the
634:27 - simulation right it just basically runs
634:30 - through all the commands and once
634:32 - there's a winner it'll get print out who
634:34 - wins
634:35 - so that's pretty much the demo
634:38 - now it's time to get through the
634:40 - exercise you guys ready awesome
634:42 - so to get to the exercise when you hit
634:44 - run the javascript course you just have
634:46 - to click fighting game right here the
634:48 - exercise
634:50 - and you should see the same layout if i
634:51 - were to press q or anything like that
634:53 - it's not going to work it'd simulate
634:55 - nothing all right we're going to add
634:57 - those features ourselves and if i go to
635:00 - this rupple here
635:02 - right this is the same thing this is
635:04 - basically the exercise just
635:06 - ported onto an independent ripple for
635:08 - your guys's testing purposes so
635:10 - i'm going to link it to you guys but hop
635:12 - on a separate rebel to get started on
635:14 - the exercise i'm going to be on here
635:17 - explaining to you guys how it works you
635:18 - ready let's go alright so you guys
635:21 - finally made it here to the fighting
635:23 - game app and now i wanted to explain to
635:25 - you guys how it works give you guys a
635:27 - little bit of a tour just so you
635:29 - understand what the hell am i going to
635:30 - do to make this work so we saw a couple
635:33 - things right you saw me press q to
635:35 - attack right you saw me press reset
635:37 - right you could probably think in your
635:39 - head how you're probably going to do
635:41 - this but luckily for you in the script
635:44 - js
635:45 - right you'll see all the instructions so
635:47 - i walk you guys through don't worry
635:49 - so again make sure you fork this
635:52 - specific rebel fighting game project
635:55 - right so that you can test your code
635:57 - here and not mess with the javascript
635:59 - course if you forked that right and then
636:01 - when you're done you're just going to
636:02 - copy paste your code to the repo so
636:05 - we'll meet up back there make sense cool
636:08 - so this is the fighting game app right
636:11 - this is to create an update game
636:13 - function that will update the dom with
636:16 - the state of the game what that means is
636:18 - when i punch qazi he loses health we
636:21 - should update the html now there's two
636:24 - classes we have to create a player
636:27 - and a game right you guys made classes
636:29 - with qazi before remember so that was
636:32 - like the car right and the car can drive
636:35 - it can honk
636:37 - right what is this class this class
636:39 - he can strike or heal and that makes
636:41 - sense for the player right but then
636:43 - there's a class for game
636:45 - the game is going to represent the whole
636:47 - game itself so what can the game do
636:50 - play
636:51 - check if it's over declare the winner
636:53 - and reset so i hope that makes sense to
636:55 - you these functions are hard-coded into
636:57 - html so don't change their names keep it
636:59 - as it is
637:00 - and here you're going to find all the
637:02 - div ids that we're going to be using
637:04 - there's a couple all right let's play
637:06 - result the names and the health so let's
637:09 - take a look at the h the html just for a
637:11 - second take a look around as you can see
637:13 - very bare bones right this is the image
637:15 - of ryu here here is a div called player
637:18 - controls so let's why did i go here it's
637:20 - because of this id so there's an id
637:23 - called
637:23 - result right and that's going to hold
637:26 - the winner of the match right so
637:28 - remember that you saw that lance wins
637:29 - over here
637:30 - that's gonna be with the result div so
637:33 - if you look scroll down to the result
637:37 - this is the div that's gonna hold that
637:39 - name
637:40 - okay so if you're ever wondering what
637:41 - the hell is this lance take a look at
637:43 - html and see if you can find that same
637:46 - div
637:47 - cool but lucky for you and the exercise
637:50 - we grab all the dips for you right so
637:53 - the names should make sense it's pretty
637:55 - easy to read the play button is a
637:56 - variable that holds the play div
637:58 - right the name div holds the player one
638:01 - name uh-huh cool
638:03 - awesome so now for the meet right the
638:05 - actual factual functionality of the app
638:09 - right
638:10 - this is called update game right the
638:12 - point of update game is exactly what it
638:14 - sounds like update the dom with the
638:17 - names
638:18 - and the latest health of the players
638:21 - right so right now it's defaulted to 100
638:24 - and defaulted to player 1 and player 2.
638:26 - that's just based off the html so if i
638:29 - go to
638:30 - player 1
638:32 - right here
638:33 - how do you like take a second to think
638:35 - about this
638:36 - how would you guys grab this div
638:39 - and change the text of it
638:42 - to the player
638:44 - ah right it's getting really complex now
638:46 - but it's not as complex as you think
638:48 - right
638:49 - so we want to be updating this to lens
638:52 - and this takazi or even your name and
638:55 - then within update game we're also going
638:57 - to think about
638:59 - when do we want to stop updating the
639:02 - game and just declare a winner right
639:03 - what condition will we need to do that
639:06 - right so when we update the game
639:08 - we're gonna need a condition to check
639:11 - if the player health is less than or
639:13 - equal to zero because if it's less than
639:15 - or equal to zero
639:17 - should we keep playing the game no we're
639:19 - done so right
639:21 - so if this hits zero or is less than
639:22 - zero we can declare a winner and declare
639:25 - winner is actually another method all
639:28 - right if you scroll up you'll see all
639:29 - the methods that we need to make
639:32 - cool
639:33 - so the very first thing besides update
639:36 - game once you have that working we need
639:38 - to start creating our classes so what is
639:41 - a class guys can you remember a class i
639:44 - like to call it a template for creating
639:46 - an object right so this is the blueprint
639:49 - of that object what kind of object are
639:51 - we making here
639:52 - exactly a player object so
639:54 - in the constructor
639:56 - we have to think about what are the
639:58 - attributes of a player object so what do
640:00 - we need we need a name
640:02 - we need a health and we're going to need
640:05 - attack damage right that attack damage
640:08 - if you guys don't play any video games
640:09 - or unfamiliar that just means how much
640:12 - damage will my punch do to you
640:15 - all right
640:16 - so we can leave that as attack damage
640:19 - right
640:20 - and make sure that this is all passed in
640:22 - the constructor because we are going to
640:24 - do that ourselves later
640:26 - cool so for the strike
640:28 - this is a function within the class and
640:31 - remember what that's called exactly it's
640:33 - called a method right so this is the
640:35 - strike method
640:37 - and keep mo keep note of what it takes
640:40 - in takes in a player
640:42 - an enemy or attack damage right
640:45 - before you get all worried
640:47 - what do you think the strike function
640:49 - does
640:50 - exactly what it sounds like you're going
640:51 - to strike somebody
640:53 - right
640:55 - so
640:55 - when i strike
640:57 - kazi
640:58 - we can make him lose five damage points
641:01 - or a health point so this should be like
641:02 - 95 right but we want to make it random
641:04 - you guys know how to make random damage
641:06 - right so that's why the first
641:08 - instruction here is get a random number
641:10 - between 1 and 10
641:12 - and that is the damage amount so think
641:14 - about that how do i get a random number
641:16 - hmm
641:17 - right
641:18 - think way back right
641:20 - actually not even that back you guys did
641:21 - that earlier in another project
641:23 - so get a random number between 1 and 10
641:26 - that is your damage amount
641:28 - so now that we have a random number
641:30 - that's the damage amount
641:31 - what should we do with that amount
641:33 - exactly we should subtract
641:35 - qazi's health with that amount right so
641:38 - subtract the enemy health with the
641:40 - damage amount right so how could we you
641:43 - know change the enemy health
641:45 - by
641:46 - subtracting the damage amount
641:48 - right so play around with it that's why
641:50 - that's why i want you guys going
641:51 - separate rebel it's easier to just play
641:53 - around and test it right i don't expect
641:55 - you guys to be like i got this lance
641:57 - right for me it's going to be
641:59 - incremental you got to test stuff out
642:01 - all right feel it up so subtract the
642:03 - enemy health for the damage amount and
642:05 - after we do that you
642:08 - you technically you did damage right
642:10 - that's correct but i want to see it on
642:12 - the html itself on the front end right
642:15 - so we need to update
642:17 - the dom somehow so
642:19 - guess what then you're going to call
642:21 - update game which is going to update
642:22 - everything with the latest stats
642:25 - so that's why
642:27 - a lot of the functionality comes from
642:28 - you making sure the updating game works
642:30 - properly
642:31 - cool so after you do some damage after
642:34 - you strike kazi
642:36 - you subtract the health you update the
642:38 - game and then just return a message
642:40 - saying
642:41 - uh lance attacks qazi for this amount
642:46 - right not too bad
642:47 - right
642:48 - now
642:50 - if you understood that the heel is going
642:52 - to be very very similar
642:55 - right so remember a heel
642:57 - is going to restore some health back
642:59 - right so we don't want to make heal
643:01 - overpowered so instead of 1 through 10
643:04 - heal is a method that takes in who is
643:07 - healing
643:08 - right so if i put in let me put an
643:10 - example here
643:12 - heal
643:13 - uh player one who's healing player two
643:16 - or player one
643:17 - player one you guys are killing it so if
643:20 - you said player one we're good to go how
643:22 - does heel work well the first thing
643:24 - we're going to do is get a random number
643:26 - from one two five exactly so we take
643:31 - that number one to five and store it in
643:32 - a variable we can call it hp amount so
643:35 - we have amount what should we do with
643:37 - that amount
643:39 - add it to the player's health right so
643:42 - if i got my num random number was 3
643:44 - i need to add 3 to the player's health
643:47 - so something i want you to start
643:48 - thinking about is right
643:52 - how do we get the player health lance
643:56 - right
643:56 - well you got to think back on when you
643:58 - make a object from a player class
644:01 - how do you get that health
644:03 - and then how do you want to pass it down
644:05 - right because it takes in a player so
644:06 - how do we get that player and how do we
644:08 - get the health
644:10 - cool so after you added the health to
644:12 - the player
644:13 - guess what we got to update the game to
644:15 - make sure that our html is up to date
644:18 - okay and when it's done just return me a
644:20 - nice message that says lance heals for
644:23 - two hp
644:24 - do good so far
644:26 - great because you're done with the
644:27 - player class that's it only strike and
644:30 - heal as you can see
644:33 - awesome
644:34 - so
644:35 - with the player class done there's also
644:37 - the game class right so if again class
644:40 - template or blueprint for creating an
644:43 - object what object are we creating in
644:45 - here we're creating the game and all the
644:48 - functionality for it so in the
644:50 - constructure constructor the constructor
644:53 - right the attribute that it needs is
644:55 - just is over so if i ask guys what do
644:57 - you think is over
644:58 - means
645:00 - right it looks like it's defaulted to
645:02 - false
645:02 - alright what do you think it means
645:04 - all right take a second
645:06 - one two
645:07 - three four five
645:10 - is over represents if the game is over
645:13 - so if the game if so if is over is false
645:16 - is the game over
645:17 - nah it's not over yet if it's true
645:19 - though the game is over
645:21 - okay
645:22 - cool that's all you need to know by
645:23 - default it's going to be false because
645:25 - if it's true that means we finish the
645:27 - round and if i ask guys when do you
645:29 - think the game would be over here
645:32 - yes this would be if one of us
645:35 - health
645:36 - is below zero or equal to zero so as
645:39 - long as it's not zero or equal to zero
645:42 - keep playing cool so if you got that
645:44 - let's talk about our first method here
645:46 - this is called declare the winner or
645:49 - declare winner notice what it takes in
645:51 - it takes in is over that's interesting
645:53 - okay it takes in player one
645:56 - and player two right if you look at the
645:58 - description if the game is over
646:00 - and a player has zero health we need to
646:03 - declare who the winner is and that's
646:05 - what this function does
646:06 - cool so
646:09 - all i want you to do is just create a
646:10 - variable that's going to hold the
646:12 - message
646:13 - and
646:14 - if is over is true why do i want to
646:17 - check for that because if if if is over
646:19 - is true then that means the game is over
646:22 - but we don't want it to just be that
646:24 - we also want it to be and
646:27 - so what's and in programming that's
646:28 - going to be something you want to think
646:29 - about
646:31 - and
646:32 - player 1 health is less than or equal to
646:34 - 0
646:35 - then update the message
646:37 - to player one wins or lance wins
646:41 - then we're gonna need an else if if is
646:43 - over is true
646:45 - and
646:46 - p2 health is less than or equal to zero
646:48 - then update the message to kazuwins or
646:52 - p2 wins
646:53 - and just for fun here if you look
646:55 - underneath we need to play the victory
646:58 - sound which i totally forgot for the
647:00 - strike we also want to play a little
647:01 - sound too right but you don't have to
647:03 - worry about that just yet
647:05 - that's gonna happen when you press
647:06 - buttons
647:07 - but when we declare the winner
647:09 - there should be a nice victory sound
647:11 - okay and after that just return message
647:13 - variable
647:14 - that's the clear one
647:15 - keeping up so far feel free to rewind a
647:18 - part of the video just to hear me
647:20 - explain it one more time sometimes you
647:21 - just need it more than once and it
647:22 - clicks all right
647:24 - and don't worry too if you're totally
647:25 - lost
647:26 - there's going to be a solution where i
647:27 - explain how the code works
647:30 - awesome
647:31 - so
647:32 - here we have reset
647:35 - reset is exactly what it sounds like
647:36 - let's say we finish the game and it's
647:38 - over
647:39 - we can hit reset to put back the hp to
647:41 - zero not zero sorry 100 right so reset
647:45 - is going to set the health back to 100
647:48 - and what else should we do
647:50 - exactly
647:51 - we should set is over from true to false
647:55 - or just make sure it's false because
647:57 - then when we reset the game is ready to
647:59 - go yeah
648:00 - cool
648:01 - another bonus thing is usually there's
648:03 - going to be a text here that says lance
648:05 - or causey wins
648:06 - we want to clear that resolve div in our
648:09 - text so that doesn't show there's a
648:11 - winner right because it shouldn't be
648:12 - wondering if we just started or reset
648:14 - yeah
648:15 - cool
648:16 - awesome then there is this play feature
648:20 - right
648:21 - that's the one where we press simulate
648:22 - and it's gonna just run through
648:25 - all the commands and just generates a
648:26 - winner randomly not randomly but based
648:29 - off the commands that you put
648:31 - so
648:32 - this is where that while loop comes in
648:34 - and notice something where it says while
648:36 - exclamation point
648:38 - this is over right so what does the
648:40 - exclamation point mean if you don't know
648:42 - what the exclamation point mean that
648:44 - just means not right
648:46 - so
648:46 - when not this is over or in other words
648:51 - if this is over sorry in other words
648:54 - as long as this over this is over is
648:58 - false keep running
649:00 - right
649:01 - if it's true then it's going to stop
649:03 - so basically once is over is true
649:06 - no more while loop
649:08 - right keep looping until is over is true
649:11 - if this is confusing you you can still
649:12 - write it as that as well you can say
649:15 - false like so and it would still work
649:17 - the same right this is just another way
649:19 - to do the same thing
649:21 - amazing
649:23 - so like i said once is over is true the
649:26 - while loop is broken
649:27 - then we declare the winner right this is
649:30 - the simulation part right that's nothing
649:31 - to do with us pressing or clicking the
649:33 - buttons this is if you got lazy you just
649:35 - want to see who would win click simulate
649:38 - awesome so once that while loop is done
649:40 - run that declare winner method
649:42 - after that here i want you to set up the
649:45 - players or you can say let player 1
649:48 - equal 2 and then how do you set up a new
649:51 - player object from the class you tell me
649:54 - all right so put that over here then we
649:57 - want to save that original player data
649:59 - right so if i said uh let player one
650:01 - equals you can say let p1 equal to
650:03 - player one i just want to set a copy so
650:05 - that we can reset without
650:07 - um worrying about
650:09 - you know
650:10 - the original health
650:12 - so there's that
650:13 - next create the game object from the
650:15 - game class it's the same as this one all
650:17 - right how do we make a new instance of
650:20 - the game class
650:21 - and then we can initialize the game by
650:24 - up saying update game right because when
650:27 - you put in lance and qazi as the players
650:29 - it's not going to say lance and qazi
650:31 - here unless you call
650:33 - update game
650:34 - right
650:36 - so make sure you call update game over
650:38 - here
650:40 - awesome
650:41 - over here it's the same thing like we're
650:43 - doing
650:44 - up at the top here except we're just
650:45 - saving the state of is over
650:48 - okay
650:50 - now this right here line 148
650:53 - we're going to add a on click
650:56 - right listener that's going to run the
650:58 - play method
651:00 - all right so think about
651:01 - how do we set up an on click
651:04 - what uh div element are we gonna use
651:07 - from here
651:09 - to hit the play button or it's the
651:10 - simulate button
651:12 - and make sure that it runs it right
651:15 - that's all you need to do for 148
651:18 - and for 151 if you're still listening
651:20 - right you're going to add functionality
651:23 - where we can press
651:25 - a or q to do different things so if you
651:27 - remember the prep section that we had
651:29 - earlier this is where it all comes to
651:31 - play so here this should look familiar
651:33 - add event listener key down function e
651:35 - right
651:36 - here's the trick if you press q
651:39 - and the enemy health is greater than
651:41 - zero and is over is still false then
651:44 - call the strike function or method sorry
651:48 - strike method and after striking
651:51 - play the attack sound so here's the
651:54 - audio tag section coming up again and
651:56 - you might be asking lance
651:58 - there's audio here well if you look at
651:59 - the index
652:01 - right
652:02 - scroll all the way to the bottom you can
652:04 - see i already set up the audio for you
652:07 - you just have to play it so how do we
652:08 - play audio sounds think about how we did
652:10 - that
652:11 - all right grab the ids
652:13 - and you hit the play method to play the
652:15 - sound it's up to you guys to tell me
652:18 - when you want to play each sound so map
652:21 - out the sounds to what you want
652:22 - make sure you get the heel in there this
652:24 - is for keel and this is the player two
652:26 - controls
652:28 - and once you have that you should have a
652:30 - working fighting game so this is
652:33 - definitely a challenge i'm not gonna lie
652:34 - to you guys but if you do this you can
652:37 - pretty much make whatever game you want
652:39 - and i think you guys are up for the
652:40 - challenge so
652:41 - take your time with this rewind what you
652:43 - need to and if anything we can look at
652:46 - the solution and do this together so are
652:47 - you guys ready i know i am let's get
652:50 - started
652:53 - all right so this is the solution let's
652:56 - walk through how to make this fighting
652:58 - game app together so are you guys ready
653:01 - and at any point it's starting to all
653:02 - click
653:03 - feel free to pause the video and see how
653:06 - far you get before i catch up to you so
653:08 - this is it this is the fighting game at
653:09 - the moment nothing works i'm pressing
653:11 - buttons and nothing is happening so as
653:14 - you can see this is the fighting game
653:15 - and if as a reminder the main
653:18 - functionality of this game visually is
653:21 - from update game right it does exactly
653:22 - what it sounds like it's going to update
653:24 - the html or the dom with whatever's
653:27 - happening all right so we can see it
653:29 - the main core functionality is going to
653:31 - be based on these two classes that we'll
653:33 - make so think back to when you made a
653:35 - bank think back to when you made a car
653:36 - with qazi right we're going to make a
653:38 - player now and we're going to make a
653:40 - game all right so
653:42 - what i'm going to do we're going to be
653:43 - unconventional we're going to start with
653:44 - the classes first so that update game
653:47 - might make sense right we're going to
653:49 - start with by making the classes
653:52 - cool so let's scroll down to the class
653:54 - player right this is the part that you
653:56 - guys should be familiar with when i make
653:58 - a new player it should look something
654:00 - like this
654:01 - and we have to pass in qazi the health
654:04 - and the
654:05 - attack damage which is just how much
654:07 - damage will cause this punch do that's
654:09 - that's what seven is standing for right
654:11 - cool
654:12 - so as you can see this is where the name
654:14 - goes the health goes and the attack
654:15 - damage goes and then from here we put
654:18 - that for each
654:20 - property of an object right so how do i
654:22 - get if after i create a new player how
654:25 - do i get kazi's name you're going to do
654:27 - kazi.net or kazi right so
654:31 - let's not we don't have to make any of
654:32 - the functions i just want to showcase
654:34 - you how this works so if we scroll down
654:36 - let's find where we have to make the
654:38 - players
654:38 - who will create two players using the
654:40 - player class right
654:41 - so
654:42 - what we have to do i'll do is say let
654:44 - player 1 right you can call this
654:46 - whatever but i want to call player 1
654:48 - equal to
654:49 - how do we make a new instance of an
654:52 - object we can say new
654:54 - the class name right so capita capital p
654:57 - parentheses and then whatever we pass in
655:00 - so a reminder what do we pass in we need
655:03 - name health and attack damage okay so
655:08 - let's see so we're gonna need name which
655:10 - will be player one will be this time
655:12 - we'll make it quasi right
655:15 - and then the next parameter is health
655:16 - we'll say 100 and for attack damage
655:19 - let's just say 10
655:22 - so now that that's there this is player
655:24 - 1. if i were to console
655:26 - log player one what am i going to see
655:28 - guys
655:29 - and we see
655:31 - there you go there is our player object
655:33 - with name health and tactic so if i say
655:36 - player1.health
655:38 - right we should see
655:40 - 100. cool if i wanted the player one's
655:43 - name
655:44 - that name right so that's why
655:47 - in the example we have something like
655:49 - this
655:51 - let's see
655:53 - over here yeah that's why i said player
655:54 - one a name
655:55 - is the name or kazi because that's the
655:57 - name of the variable
655:59 - beautiful so at this point you guys
656:01 - should be able to make player two so i
656:02 - don't make player two same thing let
656:04 - player two
656:06 - is equal to new player
656:10 - lance
656:12 - we'll say 100 as well and we'll also
656:14 - make 15 to make it fair well sorry not
656:16 - fair that's not fair at all we'll make
656:18 - it 10. sorry
656:20 - beautiful all right so with that said
656:22 - those are our two player classes right
656:25 - so with coding everything's a pattern
656:27 - and once you understand the pattern we
656:29 - can replicate and do what we need to so
656:31 - this is how you create two players from
656:33 - the player class how do we create a game
656:35 - object from the game class
656:38 - okay
656:39 - cool so
656:41 - if you were saying like game equals new
656:44 - game
656:45 - right
656:46 - is that it
656:47 - right well if you're one they're not
656:49 - sure if this is it we're gonna look up
656:51 - and see if we need to pass anything in
656:52 - the constructor
656:54 - nothing so
656:55 - this is it for the game class right and
656:57 - if i were to console log the game
656:59 - right
657:01 - let's see
657:02 - what we find out we say the object and
657:04 - only attribute that it has is is over is
657:07 - false right as a reminder what is is
657:10 - over mean right basically if is over
657:14 - equals true
657:16 - the game is over if it's false i can
657:17 - still punch quasi he can still punch me
657:19 - back alright we can keep playing so
657:21 - that's what the game is so if i were to
657:22 - if i wanted to see the state of the game
657:25 - i can just say console log game dot
657:28 - is over and it's false so is the game
657:31 - over false it's not over
657:33 - awesome
657:34 - so that's the basics i initialized it
657:36 - like this we're going to come back to
657:38 - this but this is my review for the
657:39 - classes
657:41 - cool so now when i say p1 dot health or
657:44 - p1 that name or game dot is over you
657:48 - should know what i mean
657:49 - cool
657:53 - all righty so now that you've got your
657:55 - refresher on how the classes work we're
657:57 - going to make the core function that's
658:00 - not in any class it's called update game
658:02 - and again it's going to update the html
658:04 - to the game right so if you look at the
658:06 - comment here
658:07 - we're going to update the dom with the
658:09 - names and the latest health of the
658:12 - players what do i mean by that let's
658:13 - break it down by the names so with names
658:16 - where are the names on the html do you
658:18 - see it it's player one
658:20 - and player two right
658:23 - i wanna change this to the names that i
658:25 - put in so if you look all the way down
658:27 - player one is kazi so this should be
658:29 - changed to kazi alright so how do i
658:32 - change that to cause
658:33 - right to break it down step by step
658:35 - first i need to grab
658:37 - this dom element all right so how do i
658:40 - grab the player one dom element
658:43 - so lucky for you
658:45 - all the elements that you need are up
658:47 - here you're just going to have to
658:48 - examine each one and think about what
658:50 - you need and they're pretty easy to read
658:52 - in my opinion so which of these
658:54 - variables contains the name
658:57 - dom element
658:58 - all right i know you guys see it it's
659:00 - number 38 p1 named it is equal to p1
659:04 - name right if i were to console.log it
659:06 - just to prove it to you guys
659:08 - p1 name div hit run
659:12 - boom there it is html div element and
659:14 - then how do i get the player one text in
659:17 - there right do you remember
659:19 - think back to what kali taught you he
659:20 - said dot inner text
659:23 - and i can see player one so again where
659:26 - is this coming from we are grabbing it
659:28 - from the dom which is right here and you
659:30 - can see it highlighted p1 name
659:33 - the inner text of this div
659:35 - is player one okay cool so now that we
659:38 - know how to get this player 1 we need to
659:42 - determine what we want to change it to
659:44 - right so
659:46 - in this function line 44 we can write
659:49 - p1 name div
659:52 - right and what do i want to change about
659:54 - this div do i want to change the whole
659:55 - entire div
659:58 - no just the inner text so to change the
660:01 - inner text you just do it enter text
660:02 - again
660:03 - and to actually update it or change it
660:06 - you say equals and then if i say
660:09 - something like dog this is going to say
660:11 - dog right but it's i don't want to say
660:13 - dog i want to say kazi
660:16 - and i could just hard code this to kazi
660:18 - this is still technically correct right
660:21 - but what would be more accurate
660:23 - is if i get it
660:25 - from this object player one object so
660:28 - how do i get the name of player one
660:31 - right so you see how
660:32 - the code can be written in a way that's
660:34 - readable so if i want player 1 right
660:37 - i could write player 1 here that would
660:39 - still work but
660:40 - this is the key here this is the
660:42 - parentheses in here this is the argument
660:45 - i'm passing player 1
660:48 - as p1 so what i'm basically saying is
660:51 - player 1
660:53 - is
660:54 - the same as
660:55 - p1 so whenever i say p1 i'm talking
660:58 - about player 1. same thing with p2 okay
661:02 - so in the inner text here if i say p1
661:04 - this is what is the data type of p1 is
661:08 - it a
661:09 - string a number or an object
661:12 - i'm gonna give you guys five seconds one
661:14 - two
661:15 - three
661:16 - four
661:17 - five if you said object you are correct
661:20 - it's the same as the player
661:21 - object that we created before so if this
661:23 - is the object what properties does this
661:26 - object have and which one do i need
661:28 - right
661:29 - i need
661:30 - the name so i'll just say p1 dot name
661:34 - and there we go
661:36 - all right and i'm just underneath this
661:37 - i'll call update game right here i'm
661:39 - going to move it later but if i say
661:41 - update game and i say pass in oops
661:44 - actually no i can't do that and you go
661:46 - back
661:48 - cool if i were to go down here to prove
661:50 - it to you
661:51 - let's see
661:53 - you want to be calling
661:56 - update game here so in line 143 this is
661:58 - where we're going to call update game
662:00 - and we're gonna pass in
662:02 - player one
662:05 - or actually no we're gonna do this sorry
662:07 - let me start over
662:08 - so we're gonna come down to 143
662:11 - and over here in 137 we're gonna save
662:15 - that player data so p1 is equal to
662:17 - player one
662:18 - and p2 is equal to player two
662:22 - okay we're doing this so that we have
662:24 - the original player data
662:26 - all right so when we reset it's going to
662:27 - be easier so
662:29 - now like i said before player 1 is the
662:31 - same as p1
662:33 - cool so we want to start the game by
662:36 - updating it
662:37 - and we can put p1
662:39 - p2
662:40 - and we can say
662:43 - the game
662:44 - i think was the third variable
662:47 - game state oh yeah game
662:50 - dot is over
662:52 - perfect
662:54 - okay now hit run here look at that quasi
662:57 - it's kazi now right how is it kazi did i
662:59 - write just kazi there nope because i am
663:03 - saying an update game change that inner
663:05 - text to player one's name all right like
663:07 - i said before we could do dog here and
663:09 - if i hit run
663:10 - it's going to be dog
663:11 - cool
663:12 - and again like i said
663:14 - kazi would still work in this scenario
663:16 - right but it's not what we call dynamic
663:19 - right it's hard-coded quasi right
663:21 - i want it to be whatever i put so if i
663:23 - put p1 that name here
663:25 - it's qazi
663:27 - but if i go back to
663:30 - this instance in 134 if i change this to
663:33 - kevin
663:34 - hit run
663:36 - now it's kevin see how it's dynamic
663:38 - depending on what it's like kind of like
663:39 - when you start a video game and it says
663:41 - enter your name here the game will be
663:43 - updated to say that name all right so
663:45 - that's what we're doing all right so hit
663:47 - run
663:48 - cool so if i ask you guys how can we
663:50 - put in player two's name
663:54 - how can we put player two's name what
663:56 - would you guys do
663:58 - you guys got the pattern it's gonna be
664:00 - p2 name div dot inner text is equal to
664:04 - p2 dot name
664:06 - boom that's it
664:08 - awesome so what about the health well
664:11 - the health
664:12 - right we're gonna what we need to start
664:14 - thinking about what div
664:17 - holds this health right let's see if
664:19 - there's anything that can help us here
664:20 - all right if you're not sure we can also
664:22 - look here so in the health
664:25 - it's going to be the p1 health right so
664:27 - we have to grab that element by its id
664:30 - and we already did over here
664:32 - right p1 health dip so
664:34 - following the same pattern we can just
664:36 - say p1 health div dot inner text is
664:40 - equal to
664:43 - what we're going to put is the p1 dot
664:46 - health
664:47 - all right same thing here p2healthdiv
664:50 - dot in our text
664:52 - oops
664:53 - dot enter text
664:55 - is equal to
664:57 - p2 dot l
664:59 - awesome so this isn't so bad because
665:01 - this is it this is what's actually
665:03 - making it so we can see what's going on
665:05 - after i punch quasi or he punches me
665:06 - back
665:08 - cool
665:09 - so
665:10 - now the next thing is
665:13 - if i punch qazi his health will drop to
665:15 - like 90 or whatever
665:17 - okay so if it's 90
665:19 - are we still playing yes or no
665:22 - yes so if we're still playing right that
665:24 - means we can keep going at it but if
665:27 - my health
665:28 - is zero can qazi still punch me no he
665:32 - shouldn't be able to i'm already done
665:33 - right so
665:35 - we can set a condition
665:37 - to make it so it stops
665:39 - updating the game and we can declare a
665:41 - winner right because that means the game
665:43 - is over so
665:45 - we can clear a condition like i said so
665:47 - if
665:48 - the player health is less than or equal
665:49 - to zero then set is over to true
665:53 - right so basically told you what's right
665:55 - for the condition
665:56 - so how do i get the player health again
666:00 - p1 dot health
666:02 - okay you're right
666:04 - health
666:06 - right and what do we want to check about
666:07 - the health we just want to say p1.health
666:10 - right what we want to say is if
666:12 - p1 that health if kazi's health is less
666:15 - than or equal to zero
666:17 - right then the game should be over
666:20 - right but what about my health if my
666:22 - health is less than or equal to zero
666:24 - right can we keep playing no
666:26 - so what am i really saying then um what
666:29 - i'm saying is if either player's health
666:31 - is equal to zero right
666:34 - so we can say this or right here this
666:36 - means
666:37 - or
666:38 - p2.health is less than or equal to zero
666:41 - so let's read this out fully together so
666:43 - this is saying if kazi's health is less
666:46 - than zero or equal to zero
666:49 - or if lance's health is less than or
666:51 - equal to zero
666:53 - that means the game is over but is it
666:56 - over by just writing this if statement
666:58 - not really right what we need to do is
667:01 - take the game state right
667:04 - or in other words take game dot is over
667:07 - right and set that to true and then we
667:10 - can update the game state our game state
667:12 - is what we passed in here
667:15 - game state to equal
667:18 - game
667:18 - dot is over
667:21 - right so it's like it's called
667:22 - transitive property i'm saying this is
667:24 - now true and now game state is also
667:26 - equal to true right
667:29 - cool
667:30 - now
667:32 - if you remember the solution and the
667:34 - demo
667:35 - when kazi beats me right it's going to
667:37 - say kazi's wins over here in this area
667:39 - right here where my mouse is right
667:42 - so what we need to do
667:45 - to make it so that messages displays is
667:47 - find out which of these holds that
667:49 - resultive right if i go to the html
667:54 - let's look at the html where are you
667:56 - over here 989 it's empty right but we
668:00 - want to populate it with a message that
668:02 - says kazi wins right
668:04 - so
668:06 - that's what this update game is going to
668:08 - return
668:09 - right so we're going to say
668:11 - result dot inner text
668:13 - right where am i getting result from i'm
668:15 - getting it from over here
668:17 - all right it's actually called result
668:19 - div sorry
668:20 - and how do i change it to the message
668:23 - well the message is can be like kazi
668:26 - wins
668:28 - but that's not dynamic guys
668:30 - if i put kazi wins here
668:32 - and i beat qazi
668:34 - it's gonna still say kazi wins and
668:36 - that's not right so
668:37 - what we need to do is make a dynamic by
668:39 - saying is equal to
668:42 - game
668:43 - dot declare winner right and pass in the
668:48 - arguments let's pause them
668:50 - you might be wondering lance what the
668:51 - hell is declare winner well don't worry
668:54 - declare winner if you remember up at the
668:56 - top here
668:57 - it's a function or method that comes
668:59 - from the game class and we haven't made
669:01 - declare winner yet so don't worry about
669:04 - it just know that we have to call it
669:06 - right here
669:07 - okay so declare winner and if you look
669:09 - at declare winner all right sorry for
669:11 - moving around it's going to take three
669:13 - properties it's gonna take the game
669:15 - state which is game is over right it's
669:18 - gonna take
669:19 - p1 and p2 right kind of like
669:23 - transferring this over it's like uh this
669:25 - guy was doing stuff and then now pass it
669:27 - on to the next task right
669:29 - declare winner his job all it is is to
669:32 - let us know that handles who the winner
669:35 - is right
669:37 - update game is just updating the game
669:39 - declare winner is telling us who
669:42 - actually won between the two
669:44 - does that make sense perfect and the
669:46 - last thing we want to do in this if
669:48 - statement we can just say return the
669:50 - game state
669:52 - perfect
669:54 - okay that should be good then that's
669:56 - update game for you
669:58 - so let's hit run
669:59 - perfect so now we got quasi lens right
670:01 - we're making progress on our app already
670:05 - cool
670:06 - awesome so now we need to do
670:08 - strike and heal and strike and heal is
670:11 - from the player class right so remember
670:13 - this is the player object and methods
670:16 - are functions within the class right so
670:18 - when i never think about methods methods
670:21 - are just what that object is supposed to
670:22 - do so what is the player object supposed
670:24 - to do it's supposed to strike an attack
670:26 - right now it can also heal up so that's
670:29 - why these two methods are strike
670:31 - and heal all right you guys are doing
670:33 - great so far right that first function
670:35 - wasn't bad right this thing should be
670:38 - more familiar this this method
670:40 - okay
670:41 - it's kind of like look at this as like a
670:43 - big review of everything you learned so
670:44 - far and don't worry if it doesn't make
670:46 - sense take your time pause the video
670:49 - take a break take a walk right the cool
670:52 - part about this being a youtube video is
670:54 - that you can take it at a pace that you
670:56 - want
670:58 - so
670:59 - with let damage amount right so this is
671:01 - the comment here strike is attacking an
671:04 - enemy from a random number between zero
671:07 - and your attack damage bonus okay
671:11 - so what we're going to need to do
671:13 - is
671:15 - get a random number between 1 and 10 and
671:17 - that is the damage amount right so let's
671:20 - do that so how do we get a random number
671:21 - guys do you remember
671:23 - to get a random number we're gonna use
671:25 - math.random
671:27 - right and what i wanna what i wanna do
671:30 - is store that in a variable so let's
671:32 - make a variable let's call it damage
671:34 - amount all right and we'll set this
671:36 - equal to
671:37 - math.random
671:39 - right
671:41 - and then if i do times
671:44 - 10 that's going to give me a random
671:45 - number between 1 and 10.
671:47 - right
671:48 - and more specifically every single
671:51 - number between one and then so that
671:52 - means 1.5 1.6 1.7 1.10
671:58 - do you want to do
671:59 - 0.5 damage to causey or lance no so
672:03 - there's two ways we could go about it we
672:05 - could do
672:06 - math.ceiling to round down or math.floor
672:10 - sorry math.ceiling to round up and map
672:11 - that floor to round down right and if i
672:14 - want to make it to 10 right let's use
672:16 - math.seal so math.seal is how you use it
672:20 - put that in parentheses
672:22 - and there we go so
672:24 - if i asked you guys what does line 75 do
672:27 - it gets a random number between one and
672:29 - ten
672:30 - cool and we store that random number
672:32 - let's say it's seven and put it in
672:34 - damage amount
672:37 - all right
672:38 - so how can we take that damage amount
672:41 - okay
672:42 - and subtract the enemy's health by it
672:45 - right so let's say i'm quasi
672:47 - i'm punching or striking lance myself
672:51 - and for seven damage right
672:53 - how can i reflect that on
672:56 - lance's health that i lost seven damage
672:58 - well we have to subtract it with the
673:00 - damage amount so to get the how do i get
673:02 - the enemy health then that's probably a
673:03 - question you have
673:04 - well again you have to ask yourself do i
673:06 - have access right that's kind of like
673:08 - the key here do i have access to the
673:10 - enemy health if i look at the
673:13 - parentheses here
673:14 - yes i do it's an under enemy so if i
673:16 - were to console log enemy and test this
673:18 - function out right that's going to be
673:20 - the player
673:22 - object right or the one who's getting
673:24 - attacked
673:25 - in this case me
673:27 - so what i could do is say enemy right
673:30 - and how do i get the health of a player
673:33 - exactly.health right this is not new you
673:35 - got it guys that health right and how do
673:38 - i subtract damage amount by it well
673:41 - it's going to be minus equals damage
673:43 - amount right subtract enemy health by
673:46 - the damage amount
673:48 - not too bad right cool
673:50 - all right so then
673:52 - if i did the damage already what should
673:54 - i do next
673:56 - i should update the game because kazi
673:58 - can punch me
673:59 - but it's not gonna get reflected on here
674:02 - unless i
674:03 - update the game so let's update the game
674:06 - by saying
674:09 - by saying um what's it called
674:11 - player
674:13 - not player
674:14 - then we could say
674:15 - oops
674:18 - player
674:20 - then we could say enemy
674:22 - and then we could say
674:24 - the state of the game which is just
674:26 - going to be game state right or in other
674:28 - words game dot is over
674:32 - perfect
674:34 - all right and the last thing to need to
674:36 - do is return
674:38 - a message
674:39 - right and basically the message is going
674:41 - to say like qazi attacks lands for this
674:43 - much damage right and if you remember
674:46 - there's something called template
674:47 - literals where we can make this dynamic
674:49 - we could say player dot name which is
674:52 - going to be kazi attacks
674:55 - template literal
674:56 - lance and get the name
674:59 - for and how do i get the amount of
675:01 - damage well luckily thanks to the
675:04 - variable name you can just say damage
675:06 - amount
675:07 - perfect
675:08 - cool
675:09 - so we should have strike and i know
675:11 - you're gonna say attack damage is not
675:12 - used but i'm gonna come back to it if
675:14 - this makes sense to you guys
675:16 - okay cool
675:19 - all right so let's test the function out
675:21 - and see if it works
675:22 - so we can hard code that function and
675:24 - call it right here remember p1 is player
675:26 - one so how do i use the strike method
675:29 - of this player right if you remember a
675:32 - method it's just a function inside of an
675:35 - object so we could just say dodge strike
675:37 - and remember i can't just write dot
675:39 - strike i have to pass in what
675:41 - i have to pass in
675:43 - dun
675:44 - dun the player the enemy and how much
675:48 - damage
675:49 - right
675:50 - so
675:52 - what i'll put here is
675:54 - player one right that's the player the
675:56 - enemy is gonna be player two and the
675:59 - attack damage is going to be 10.
676:01 - remember i'm not using attack damage yet
676:03 - right
676:05 - so let's run this function and see what
676:07 - happens boom 91 right so how much damage
676:11 - did kazi do to me he did nine damage if
676:13 - i run
676:14 - he did one damage to me right see how
676:17 - it's a random number each time the
676:19 - strike is working perfectly right so
676:23 - we can do console log two we can
676:25 - console.log p1 strike to see what it
676:26 - returns to us
676:28 - is it run
676:29 - 92 and it says qazi attacks lance for
676:32 - eight all right so we are missing
676:34 - something
676:35 - that's why you always want a console log
676:37 - to make sure you're not missing anything
676:38 - so let's see for
676:40 - eight didn't say damage all right so
676:43 - that looks more
676:44 - uh like an actual game message so it's a
676:47 - run
676:47 - kazi attacks lands for nine damage right
676:50 - so this is perfect this is the strike
676:52 - function already set up right cool so
676:56 - now let's talk about uh the attack
676:58 - damage argument
677:01 - so remember i'm not using this
677:03 - right
677:05 - but this has the same name as a player
677:09 - as the player attack damage right so at
677:11 - the moment we're getting a random number
677:13 - between 1 and 10
677:14 - right but you guys should be able to
677:16 - understand this if i remove this 10 and
677:18 - said attack
677:20 - damage right what did i just do
677:23 - what's going to be the random number
677:25 - if you said i don't know right
677:27 - that's going to be true because it's
677:29 - dynamic right why is it dynamic because
677:32 - if i put
677:35 - let's say i put
677:36 - 25 here right as attack damage
677:40 - what that means is
677:42 - if i go over here
677:44 - i'm now getting a random number between
677:47 - 1
677:48 - and
677:49 - 25 or whatever i put as attack damage
677:51 - let's see if that's right let's hit run
677:53 - 11 damage right that's big boy damage
677:56 - that's five all right 13 right nine all
677:59 - right two right 13. there's a lot of
678:01 - ways to get a number but it can go as
678:03 - high as 25 if you put it there there you
678:05 - go that's a big one
678:06 - 23 damage
678:07 - right
678:08 - so
678:09 - what i'm saying is
678:13 - if i based it off now make it even more
678:15 - dynamic instead of just writing 25
678:17 - i want to say it's going to be based off
678:19 - p1
678:20 - dot
678:21 - attack damage right
678:23 - so now what is the random number between
678:26 - all right take a look at player one the
678:29 - random number now is between one and ten
678:32 - again
678:32 - right so this is the place where you're
678:35 - going to input your character stats
678:36 - right so in the video game you put the
678:39 - player's name you put the health and
678:41 - then you could say qazi can do uh 50
678:44 - damage right let's hit
678:46 - run run 14
678:49 - 19 23 48 damage right so as you can see
678:54 - this is what controls how much den so
678:56 - there's a lot of variation now that we
678:58 - added to the game right you could give
679:00 - someone with a thousand health and
679:01 - someone else a thousand damage if you
679:03 - wanted to right but for simplicity's
679:06 - sake i'm going to keep it at 100 and i'm
679:08 - going to keep this at 10. okay so let's
679:10 - hit run and now it's back to 1 through
679:12 - 10.
679:14 - cool
679:15 - and you also know that this piece of
679:16 - code is what makes me or makes quasi do
679:19 - the punch all right if you wanted to
679:20 - change it around to me doing the punch
679:23 - back to kazi you say p2.strike
679:25 - change this player to p2 change this to
679:28 - p1 and take in
679:31 - player 2's damage
679:33 - yeah
679:34 - cool so the way i would like to
679:36 - understand this app is remember the bits
679:39 - and pieces of this app and figure out
679:42 - ways to we can put it together and when
679:43 - we want to put together right so
679:46 - we don't we can erase this because we
679:48 - get how it works now if i hit run right
679:50 - nothing happens
679:51 - right because i only want to call this
679:54 - strike function at a certain point but
679:56 - we'll get back to that later so that's
679:58 - the strike
680:00 - right i'm gonna move a little bit faster
680:02 - because the heel
680:04 - is actually the exact same thing except
680:07 - no one takes one argument just who the
680:09 - player that's gonna heal right so if
680:12 - cause is healing
680:14 - we're going to put causes information in
680:15 - here
680:16 - okay so the first thing is get a random
680:19 - number between one and five let's do it
680:21 - so let's call it hp amount and let's get
680:23 - a random number between one and five
680:25 - well that's going to equal
680:27 - right
680:28 - math.random
680:31 - times
680:32 - 5 right but this is going to be 0
680:36 - through 5 and it's going to be the
680:38 - decimal places so we want to say
680:39 - math.seal
680:41 - right
680:44 - and there we go
680:46 - all right that's the hp amount how do we
680:47 - add the hp amount to the player's health
680:49 - well we can just say player right if you
680:52 - remember
680:53 - this up here
680:54 - it's going to be plus equals
680:57 - player
680:58 - dot health well not player health sorry
681:00 - player dot health sorry is going to be
681:03 - plus equals the hp amount
681:06 - okie dokie so we got player.health plus
681:10 - equals hpm
681:11 - cool
681:12 - so after we
681:14 - updated the health in the background
681:16 - right we need to update the front end
681:18 - with it so
681:20 - our phone was only a way that we could
681:21 - do that it's with update game so update
681:23 - game it's going to take in
681:25 - the player right
681:28 - and also
681:29 - p2
681:31 - and also game state
681:34 - all right which is also just game that
681:36 - is over
681:38 - perfect
681:41 - okay and then we're gonna return a nice
681:43 - message so that we could see it which
681:44 - can be similar to before which is
681:46 - backticks
681:48 - right
681:48 - it's going to read qazi
681:51 - heals for
681:52 - 5 hp for example so to get kazzy's name
681:55 - we say player.name and then we can say
681:58 - heals for
682:01 - the hp amount
682:05 - and then you could say hp exclamation
682:07 - point perfect now let's test if this
682:10 - works
682:12 - okay so
682:14 - to test if it works we're gonna get p1
682:17 - how do i get the heal method
682:19 - dot heal
682:20 - what arguments does it take
682:22 - it's gonna take in who's healing
682:25 - right and i hit run
682:27 - i healed for 103. let's see if our
682:29 - message works
682:32 - so let's console log the return
682:36 - kazi heals for three hp that's perfect
682:38 - all right 101 104 101 right so this
682:43 - piece of code
682:44 - is how a player can heal right
682:47 - so there you go and with that if you
682:49 - wanted to make player two heal just say
682:51 - p2.heal and p2 right
682:55 - the benefit of making something dynamic
682:58 - is that you can heal like this
683:00 - okay
683:04 - oh i see i see
683:07 - speaking of making a dynamic i made it a
683:09 - little too dynamic it's a good thing we
683:11 - tested this
683:12 - so go back to the heel
683:16 - yes this could just be p1 p2 right
683:18 - because those are the variables that
683:20 - hold the player names so now i've hit
683:22 - run there you go 100 101. now let's only
683:25 - lance heals for four
683:28 - so remember this is how a player can
683:30 - heal depending on who wants to heal you
683:32 - just change it from p1 to p2
683:34 - so erase that
683:37 - and guess what guys
683:40 - we finish the player class let's go so
683:43 - the player class is now done and let's
683:46 - say the game is pretty much half done
683:48 - too right we already can strike we can
683:50 - also heal
683:52 - cool
683:53 - so now
683:54 - let's work on the game class
683:58 - all right so remember refresh on the
684:00 - game class the game object represents
684:03 - the whole entire game and within that
684:06 - game right we are using strike and heal
684:08 - right but the only thing that we care
684:10 - about with the game is checking if it's
684:12 - over
684:13 - right which it should be false at the
684:15 - beginning
684:16 - uh declaring the winner right after we
684:18 - update the game we have to say like oh
684:20 - qazi wins or oh lance wins right we also
684:24 - want to be able to reset that's what
684:25 - this button is for
684:27 - but let's say we're all at zero hp if i
684:29 - hit reset we should be able to restart
684:31 - our health back to normal
684:33 - set is over back to false and then we
684:35 - can fight again
684:36 - right
684:37 - then there's also this bonus function
684:39 - called play right and play
684:42 - is gonna make it so that we can simulate
684:45 - the whole match okay
684:48 - so you don't even have to play the game
684:50 - you can kind of just simulate what would
684:51 - happen right by pressing the simulate
684:53 - button
684:54 - okay
684:54 - so let's work on that and if we do that
684:56 - the game is pretty much done
684:58 - right we just need to add like little
685:00 - details like sound effects so
685:02 - starting with declare winner if the game
685:04 - is over and a player health has zero
685:06 - health declare the winner right so let's
685:10 - do that let's create a message variable
685:13 - that's the first thing right here so
685:14 - let's say
685:15 - let
685:16 - message
685:18 - and that's it
685:19 - okay
685:20 - it's going to hold a different message
685:22 - based on the condition right so that
685:24 - means
685:25 - if you look at this it says if is over
685:27 - is true
685:28 - and
685:29 - qazi health is less than equal to zero
685:32 - then update the message variable to qazi
685:36 - wins
685:37 - right so
685:38 - there i kind of tell you guys how to
685:40 - write this exact thing you say if
685:43 - right
685:44 - code block
685:46 - and read this and translate it to code
685:48 - well if
685:50 - is over
685:52 - right
685:53 - is over
685:55 - equals equals true all right and how
685:57 - come i don't have to write game dot is
685:59 - over
686:00 - right
686:01 - well take a look do i have access to
686:03 - just is over yes i do right over here it
686:06 - takes in is over p1 p2 so i can just
686:09 - call it freely like so
686:11 - cool so if is over is true
686:14 - right
686:15 - and
686:17 - p1 dot health is
686:20 - less than or equal to zero right in
686:22 - other words if the game is over
686:24 - and causes health to zero right
686:26 - then i want to make the message right
686:28 - update the message to say
686:32 - backticks
686:37 - p
686:38 - 2 dot name
686:41 - wins why do i want to say p2.name wins
686:45 - all right think about it for a second
686:47 - if the player wants health is zero
686:50 - who actually won
686:52 - player two all right kazi's health is
686:53 - zero then i win lance wins all right
686:57 - next is the elsif right i'm going to
686:59 - write it just right over here
687:01 - else if
687:04 - which is the other what's the other
687:06 - scenario in this case well the other
687:08 - scenario is is over
687:10 - equal equal true
687:12 - and right and means both conditions have
687:15 - to be true
687:17 - p2.health
687:19 - is equal less than or equal to zero
687:23 - okay and if that's true right
687:25 - we want it so that the message
687:28 - says
687:29 - p1 wins
687:31 - yeah so the message is gonna say p
687:34 - one
687:35 - dot name
687:37 - wins
687:38 - perfect okay and then if i want i could
687:41 - just take this and put it over here
687:45 - perfect
687:47 - cool and after that we also have a
687:49 - victory sound that i want to play so
687:52 - if you look in the html
687:54 - and you remember the prep course that we
687:56 - did together all the sounds are set up
687:58 - right here right we have p1 attack p1
688:00 - heal p2 attack p2 heal and victory so
688:04 - and all the sounds are loaded up on here
688:06 - as well so we want to play is that
688:09 - victory sound over here
688:11 - so
688:12 - let's play that victory sound
688:14 - and remember to play the victory sound
688:16 - we just do document
688:18 - get the
688:19 - element by id
688:21 - which is just going to be
688:23 - victory
688:26 - and we're going to hit dot play
688:28 - right
688:29 - and then
688:31 - since we have the message variable we
688:32 - can just say message
688:34 - all right make that really simple cool
688:36 - and now we can declare the winner right
688:39 - this function is now up and running
688:42 - let's see what's what's going on here a
688:44 - message okay good this function is now
688:45 - up and running
688:47 - and if you remember update game function
688:51 - let's see where is it perfect in update
688:54 - game function
688:56 - i said game
688:58 - dot declare winner because that's the
689:00 - method of the game
689:01 - and we passed it in and that's going to
689:04 - hold the message so what is going to
689:06 - show up in the inner text of this
689:08 - resultive
689:09 - exactly it's going to show lance wins or
689:12 - kazi wins
689:14 - okay
689:15 - cool
689:16 - and we can't test it yet until until um
689:19 - you know we get the actual attacking
689:22 - functionality up and running
689:24 - so why don't we do that
689:26 - so before we get through the reset and
689:28 - play we're gonna pause this for a second
689:30 - and we're gonna make it so that we can
689:31 - actually punch
689:32 - and heal right so let's scroll
689:35 - all the way down to the bottom
689:37 - right to the player one controls this is
689:40 - the meat of the project right so if you
689:42 - remember the prep i'm using document.add
689:45 - event listener key down right it's
689:47 - listening for me pressing down on my
689:49 - keyboard
689:50 - uh the specific thing is if i press the
689:53 - q button
689:55 - then i want to be able to attack right
689:57 - so let's set that up
690:00 - so if right and how do i get the key
690:04 - for q right it's going to come through
690:06 - this e parameter right here which is
690:07 - like your keyboard event so if my
690:10 - keyboard
690:12 - dot key right is equal equal to q that's
690:16 - basically what i want to say here so
690:17 - i'll say if
690:19 - equal to
690:20 - q
690:21 - or if i press q
690:23 - and right p2 dot health
690:26 - is greater than
690:30 - zero
690:32 - and
690:33 - the game dot
690:36 - is over is equal equal to false right
690:38 - there's three conditions here why do
690:40 - they matter because i want to be able to
690:42 - press q
690:43 - but i can only press this q
690:46 - if
690:48 - you know player 2 is still alive and the
690:50 - game is not over otherwise i'm just
690:52 - going to keep beating up a dead horse
690:53 - right we don't want to do that so
690:55 - let's put the code block in here and
690:57 - after striking right play the attack
691:00 - sound that's the comment that should go
691:02 - in here
691:03 - right after striking then play the
691:05 - attack sound well how do i strike well i
691:07 - showed you guys how to strike to strike
691:09 - you just have to say the person that's
691:11 - striking which is player one
691:13 - right
691:14 - uh put in who's striking who's the enemy
691:18 - and we wanna make sure that takes in the
691:20 - attack damage right we're making a
691:22 - dynamic here
691:23 - cool
691:25 - so let's hit run
691:26 - if i press q
691:28 - oops no click on the app press q
691:30 - hey look at that
691:31 - we're doing some damage here so if i hit
691:33 - run again to reset it for now right i
691:35 - also want to make a sound you know just
691:36 - to put some impact
691:38 - right so
691:39 - if you look over here which one is the
691:41 - player one attack it is p1 attack right
691:47 - awesome i made the names nice and easy
691:50 - for you guys so it's not too confusing i
691:52 - know it's a lot right but you guys if
691:53 - you guys made it to this point you're
691:54 - doing great so far
691:56 - so how do i grab that element you can
691:59 - say document
692:01 - dot get element by id
692:03 - you can say
692:05 - p1
692:06 - attack
692:07 - right
692:08 - and you can just say dot play
692:11 - perfect
692:13 - cool so now let's hit run
692:15 - and now we punch
692:21 - all right there you go so now it works i
692:22 - figured out i named i gave the wrong
692:25 - audio files in here it was a dot wav
692:28 - file so i changed it to mp3 so if you
692:31 - fork this rebel at the time watching
692:33 - this video it should say mp3 and it
692:36 - should be good to go like you don't do
692:37 - anything different code wise so let's
692:39 - test it out hit run
692:41 - hey there you go a nice crisp punching
692:44 - sound i'm like literally punching myself
692:46 - and that's the funny part about this so
692:48 - cause he's punching lance doing random
692:49 - damage
692:51 - nice
692:52 - so the cue button works all right
692:55 - the next thing you want to do is set up
692:57 - the e button
692:58 - right
692:59 - same conditions
693:01 - but this time it's for heal right this
693:03 - should say
693:04 - then heal
693:07 - perfect okay
693:08 - so after that's done you set up the same
693:11 - condition if
693:13 - e dot key is equal to where do we want
693:16 - to make the heal button to for player
693:18 - one
693:19 - it's gonna be a right you could set this
693:21 - to whatever you want right the cool
693:23 - thing i love about this is that you can
693:25 - add this to your own game your own
693:28 - project right so if you understand this
693:30 - we can reuse those pieces again and
693:32 - again so a
693:34 - and right b
693:37 - one right well p2 we could also put
693:39 - p2.health here
693:41 - mostly because if i'm kazi and my health
693:46 - is zero he shouldn't be healing while
693:48 - i'm dead right we should just not be
693:49 - able to play so p2.health is greater
693:53 - than zero
693:54 - then p
693:55 - and
693:57 - right
693:59 - and game dot is over is equal equal to
694:03 - false right then we shouldn't be able to
694:06 - heal
694:11 - all right actually
694:13 - no no no if it is true then we should be
694:15 - able to heal yeah yeah there you go
694:17 - so after healing play the heel sound so
694:19 - let's heal so to heal you guys want to
694:21 - do this p1.heal parentheses p1
694:25 - and then we could say
694:27 - something like
694:28 - uh document
694:30 - element
694:32 - by id
694:34 - and i will save you guys to look it's
694:37 - just going to be p1 here
694:40 - save you guys some time there and how do
694:42 - i play the sound at that dom element
694:44 - it's going to be play so run
694:46 - hit attack
694:48 - that's it heal
694:49 - oh
694:50 - it's not playing
694:53 - you need to double check
694:55 - run
694:57 - oh now it's not loading
694:59 - okay let me try refreshing
695:03 - oh i don't want to lose this progress
695:14 - okay
695:16 - let's check our progress
695:19 - ah there it is we lost it
695:21 - so let's put this back on here
695:24 - the sounds are correct yep yeah see how
695:26 - it says mp3 now before if you looked at
695:28 - the video it says
695:29 - wav it should be mp3
695:33 - there we go
695:35 - so if i press q
695:39 - p one attack play
695:41 - what the hell
695:45 - okay i see what's wrong this if
695:47 - statement
695:49 - needs his curly brackets
695:52 - okay cool so now we can bring this back
695:55 - uh we can bring back this sound
695:58 - okay cool so the strike is the same
696:02 - the heel is what's new i took out the is
696:05 - over false right that should actually be
696:07 - covered over here
696:09 - let's hit run and now it was a q
696:12 - okay it shouldn't be playing that heel
696:14 - sound
696:18 - okay
696:19 - how about heal
696:20 - all right heel's working fine
696:22 - now it's this guy why are you playing
696:25 - both sounds
696:30 - and healing
696:31 - let's see
696:34 - ah
696:35 - okay i see now all right so you tell me
696:38 - guys if you see the error and the error
696:40 - is actually in the heel
696:42 - all right
696:43 - what is the difference between one equal
696:45 - side and two equals sign so i totally
696:47 - forgot this should have two otherwise
696:49 - it's recognizing every key as the the
696:52 - key press for heal all right even if i
696:54 - press q
696:55 - so there you go that's kazi punching
696:58 - now he heals
697:01 - perfect
697:02 - right so now it's starting to get fun
697:04 - right well fun for qazi not really for
697:06 - me because i'm getting beat up here
697:08 - all right so let's add my controls and
697:11 - guess what the controls is the same
697:14 - exact thing so let's do the if statement
697:16 - all right if e dot key is equal equal i
697:19 - won't forget this time
697:21 - and the punch for lance or me is going
697:24 - to be p
697:25 - and we do the and
697:27 - i want to make sure if kazi's health is
697:29 - greater than zero i should still be able
697:31 - to punch him right
697:33 - and then and
697:35 - uh game dot
697:37 - is over is equal equal to false perfect
697:41 - now after striking then play the attack
697:44 - sound so let's strike
697:45 - p2 dot strike
697:48 - what is the arguments that strike takes
697:50 - it's going to take in the player and i
697:52 - love that replit shows you you know like
697:55 - the little comments of what arguments
697:57 - does it take takes in the player the
697:58 - enemy and the damage so the enemy is
698:01 - player one or kazi and the attack damage
698:04 - is my
698:05 - attack damage
698:08 - and it's like that okay
698:11 - and after we strike we need to play the
698:14 - sound and to save you guys some time
698:16 - it's basically
698:18 - document
698:20 - dot get element dot get
698:23 - element by
698:25 - id
698:27 - and i believe it's p2 attack right i
698:30 - have to make sure you can just look over
698:32 - here it is p2 attack
698:34 - that's how you get that id then you hit
698:37 - play
698:39 - okay cool
698:40 - let's hit run and hp
698:42 - oh
698:44 - i attacked myself
698:46 - uh
698:47 - that's not good
698:50 - there you go for some reason when i the
698:51 - names were switched around and that was
698:53 - really confusing so i hit refresh
698:55 - and now let's see if cube
698:58 - okay that works fine
699:01 - if e dot key
699:04 - oh can't forget the curly brackets
699:11 - okay
699:13 - i hear two sounds
699:16 - there you go that's one now i'm going to
699:17 - punch quasi
699:18 - [Music]
699:19 - and they switch places
699:21 - that's interesting
699:26 - oh that's a really funny bug it's like i
699:28 - punch
699:30 - and then they switch
699:32 - oh and i think it's because of the
699:34 - strike
699:36 - okay
699:38 - so going back to the top guys
699:40 - let's go to the strike
699:42 - and where it says update game this is
699:44 - going to be different so this is too
699:46 - dynamic so we have to put back this to
699:48 - player one and player two and i actually
699:50 - had that before
699:52 - so now
699:54 - we're not gonna get that weird switching
699:55 - names i'm when i put player and enemy
699:57 - there i'm saying that they're switching
700:00 - roles so that's why you see kazia lance
700:02 - switch and now that's why i got confused
700:04 - but now
700:06 - there we go
700:08 - all right now we can actually fight the
700:09 - game i can heal
700:11 - well kazuki can you actually can't heal
700:13 - yet
700:14 - now there's like a back and forth here
700:16 - it's making it a lot more fun
700:19 - there you go so that cleared it up just
700:21 - to recap make sure in your strike
700:23 - function when you update the game it
700:26 - shouldn't say
700:27 - player enemy
700:28 - it just should say p1 p2 so go to line
700:31 - 79
700:32 - change this from player to p1 change
700:34 - this from p2 to enemy because it should
700:36 - be the same it shouldn't be able to be
700:37 - switched around
700:38 - like that shouldn't be dynamic
700:41 - in this sense
700:43 - so cool that's strike
700:45 - so now let's do the if statement for the
700:48 - heal which is pretty simple the key is
700:51 - going to be
700:52 - l
700:53 - for here
700:54 - right not capital l lower case and if
700:57 - you know p1 that health is greater than
701:01 - zero
701:03 - then we should be able to heal still
701:05 - and i can't forget the curly brackets
701:08 - so inside the curly brackets
701:11 - it says after healing
701:12 - play heal sound
701:14 - so let's how do we heal as player two
701:17 - just use the method and pass it in
701:21 - then how do we play the sound we get the
701:23 - dom element
701:24 - which should just be
701:26 - p2
701:28 - heal
701:29 - and then do dot
701:31 - play
701:35 - awesome
701:38 - and that should be it so let's hit run
701:40 - and let's see if we have a game
701:42 - oh i love the heel sound effect for my
701:44 - my heel it's like whoop
701:46 - whoop and then kazi says
701:48 - [Music]
701:50 - right
701:55 - and
701:57 - hey
701:58 - lance wins did you hear that
702:00 - that is the victory sound from declare
702:04 - winner
702:07 - let's see well i passed it declare
702:08 - winner
702:09 - drink the man right here play the
702:11 - victory sound
702:12 - right now the only problem is after we
702:14 - play the game
702:16 - it's like a one-time use we can't play
702:17 - anymore because this reset button
702:18 - doesn't work
702:19 - so
702:21 - we're almost done guys we just need to
702:22 - set up this reset button
702:24 - right and the reset button is pretty
702:26 - simple we just kind of set all the
702:28 - values back to its original state right
702:32 - so what i mean by values i mean p1
702:34 - health causes health and my health
702:37 - sending it back to 100.
702:39 - so all you have to do is just say
702:42 - p1 do i have access to p1 yes i do
702:45 - i say health
702:47 - is equal to oops 100
702:51 - all right p2.health is equal to 100
702:54 - right and then we also want to set the
702:57 - game is over to what do you want is over
703:00 - to be false again or true again
703:03 - false because
703:04 - if this dot is over
703:07 - is equal to
703:08 - false that means we can keep playing
703:11 - and
703:12 - do we want to see lance wins right i
703:13 - don't think kazi wants to see my name
703:15 - and for resetting right my name winning
703:17 - and for resetting so we're going to get
703:19 - that result div again
703:22 - get the inner text
703:24 - and how do we make it so that it doesn't
703:26 - show lance wins well we can just say
703:28 - empty quotes that's going to make it
703:29 - blank that's how you clear your inputs
703:31 - that's how you clear your dips
703:33 - and
703:34 - when we're set we should also
703:36 - update the game
703:38 - to p1
703:40 - p2
703:41 - and
703:42 - set the game state to whatever this dot
703:44 - is over is perfect so if i hit run here
703:48 - let's uh play the game
703:49 - [Music]
703:53 - qazi wins let's hit reset
703:56 - ay and then we can just play again
703:58 - let's see who wins this time
704:02 - i win this time right this is getting
704:04 - this is really fun i had a lot of fun
704:06 - making this guys with that said that's
704:08 - pretty much the fighting game app right
704:12 - so it wasn't too bad it looks like a lot
704:14 - of code but if you really break it down
704:16 - it's just understanding each piece like
704:19 - all right you want to reset just get the
704:21 - player health all right what do you want
704:22 - to set the health to 100 all right how
704:24 - do you make sure the game is playable
704:26 - false
704:27 - right so if it helps to write stuff down
704:29 - and look it over again feel free to do
704:31 - so right the last function here is the
704:35 - play button this is going to be the
704:36 - bonus feature it's the simulation right
704:39 - if i hit reset i should be able to
704:41 - simulate the game and just see what
704:42 - would happen right
704:44 - so to play
704:46 - i usually like to reset to make sure the
704:48 - player's health is back to full before
704:50 - starting right
704:52 - so how do we reset the game
704:55 - well reset is a method within game so if
704:58 - it's within game and you're calling
705:00 - something within itself you can say this
705:03 - right this represent rob is pointing to
705:05 - itself
705:07 - so that just means the game it's like
705:08 - saying game dot reset
705:10 - right game.reset takes two parameters p1
705:13 - and p2
705:14 - right
705:15 - and that's it
705:17 - okay cool
705:18 - now we have the while loop so we went
705:20 - over while loops in that prep video that
705:21 - i had with you guys
705:24 - that prep video that i have with you
705:25 - guys and what we want to do is make sure
705:29 - both players get to strike so that means
705:30 - kazi goes once and then heals and then i
705:33 - go once heals and then it just keeps
705:36 - looping till this
705:38 - dot is over
705:40 - is
705:40 - true because the second this turns true
705:43 - the match is over
705:44 - right so
705:46 - all you have to do is just call the each
705:48 - command right that's it so that's just
705:50 - p1 dot strike
705:53 - p1 p2 and p1 dot attack damage that's it
706:00 - so kazi got to strike in the simulation
706:02 - now what we should do next is p2.heal
706:05 - right this could be any order that you
706:07 - want so now kazi strikes i heal right
706:10 - this is kind of the script
706:12 - so in this script i heal and then now i
706:15 - strike
706:17 - so it's going to say p2 is the player
706:20 - the enemy is p1 and we're going to take
706:22 - in my
706:24 - attack damage
706:26 - okay cool
706:27 - [Music]
706:31 - right
706:33 - and then there's also
706:34 - p1 dot heal
706:38 - all right p1 so i so this is the script
706:40 - guys cause he strikes i heal i strike
706:44 - cause heals all right cause he strikes i
706:47 - heal i strike i was going to keep doing
706:49 - that to one of us dies which will happen
706:51 - eventually and this is the way to make
706:52 - it most fair right in a while loop so i
706:55 - don't have to do any work at all
706:58 - right so once is over is true which
707:01 - means we're out of the while loop
707:03 - right we're going to declare the winner
707:05 - so we can just say return
707:07 - this dot declare winner
707:09 - and we can say
707:10 - this dot is over
707:12 - p1 and p2 right because remember declare
707:16 - winner
707:17 - takes in the game state
707:19 - p1 p2
707:21 - perfect
707:23 - cool and then
707:25 - uh there is a glitch where it says
707:26 - undefined so let's just make the message
707:28 - say tie right it's a tie
707:32 - when i can't determine who wins
707:36 - okay
707:38 - cool
707:40 - so now that we have that functionality
707:43 - just double check everything
707:45 - time test it out
707:48 - now to actually run the code
707:50 - i had a little to do here which is add a
707:54 - click listener to the play button right
707:59 - so
708:00 - we need to find the div that holds the
708:03 - simulate button so if you look at the
708:05 - top here
708:06 - going up the top there is a
708:10 - play button right here play button right
708:12 - that's going to hold play so all you
708:14 - need to do
708:15 - [Music]
708:17 - is come down below here
708:20 - and say play
708:21 - button dot on
708:23 - click
708:25 - all right it's lowercase because it's
708:26 - not react
708:30 - is equal to the function where
708:34 - result
708:35 - dot inner text
708:37 - is equal to
708:39 - game dot play and then you put in
708:42 - p1
708:43 - p2
708:45 - perfect
708:46 - let's hit run
708:48 - okay so now that you have that we can
708:50 - hit the simulate button it should work
708:52 - now let's go lance wins right
708:57 - how's the tie
708:59 - kazi wins there we go cool so now the
709:02 - simulate button works and we're free to
709:04 - just simulate or we could reset and we
709:06 - could just start playing
709:09 - and you can make this fighting game even
709:11 - more advanced you can add like a kick
709:13 - option that does more damage you can add
709:15 - like a i don't know a special move like
709:17 - hadouken and it does even more damage
709:19 - right all you have to do is go to the
709:21 - player class
709:23 - right and add that method in here right
709:26 - this is what you need the essential
709:28 - tools to create something like this and
709:30 - i hope you guys enjoyed if you made it
709:32 - this far in the video congratulations
709:34 - this is the fighting game
709:36 - so
709:37 - sami show me how i did share with us how
709:39 - you did the fighting game and make sure
709:41 - to fork this ripple and place it back
709:44 - into the main course so let me show you
709:46 - guys how to do that
709:48 - okay so let's say your code is working
709:51 - and it's up to date all you guys need to
709:53 - do is go to the main replit again
709:57 - right
709:58 - and you can go to the solution and
710:00 - compare it to how i did in the solution
710:02 - and what you could do is put your code
710:06 - in the exercise folder so if this is
710:08 - your index right you want to take
710:11 - your index
710:13 - click ctrl a
710:14 - ctrl c
710:15 - and then paste it on here
710:18 - right so that it's up to date and has
710:20 - your code
710:21 - okay
710:22 - so once you do that your reply is
710:24 - complete right we moved over here so you
710:25 - could test stuff a lot easier
710:28 - perfect so that's it that's the fighting
710:29 - game guys i'm glad you guys walked
710:31 - through it with me
710:32 - thanks for watching this part
710:34 - all right so you've made it to the
710:36 - netflix clone i'm excited about this one
710:38 - because there's a little bit of a story
710:39 - that goes along with this so let's let's
710:41 - think about a scenario right netflix is
710:44 - hiring you as a developer to fix their
710:47 - app alright if you click on this button
710:48 - right here open in a new tab
710:50 - you're gonna see that looks pretty empty
710:52 - that's because the movies aren't being
710:55 - loaded in properly so it's your job as a
710:58 - developer to make the api call and pull
711:01 - the movies that we need it should look
711:02 - something like this so if you go to your
711:04 - javascript course rebel go to open
711:07 - in the new tab for that you should see
711:10 - this nice page create netflix and bam
711:13 - this is what netflix is supposed to use
711:15 - and this is what netflix is supposed to
711:17 - look like and as you can see all the
711:19 - netflix originals are here stranger
711:20 - things season four if you guys are
711:22 - watching let me know how you guys think
711:23 - about it and then there's trending now
711:25 - and there's also top rated movies right
711:29 - so if you didn't know in the background
711:32 - this is using an api from moviesdb so
711:35 - we're going to be working with a real
711:36 - api and if you get it working netflix is
711:39 - up and running again so this is what it
711:41 - looks like what you're going to need to
711:43 - do
711:44 - is hex to exit this out hop over back
711:46 - into the exercise folder and take these
711:50 - files you're going to notice a link to
711:52 - this
711:53 - replicate netflix project and this is
711:56 - where we're going to be doing most of
711:58 - our coding
711:59 - so let's get started and let's take a
712:01 - look at the assignment so here's our app
712:04 - make netflix
712:06 - here's the scenario where we have to
712:08 - make sure that fetch movies is working
712:10 - so the core functionality of this app is
712:13 - to get fetch movies working
712:16 - right and fetch movies is going to take
712:18 - in a url
712:20 - a div id
712:21 - or a class
712:23 - right so fetch movies is over here as
712:25 - you can see the api url the dom element
712:28 - right what do i mean by dom element what
712:30 - do you guys think what is a dom element
712:33 - right so with dom element it's going to
712:35 - be one of these it's going to be either
712:36 - original movies which is a class
712:39 - trending or top rated right why would i
712:42 - want to put
712:43 - dom element as an argument
712:45 - right because
712:47 - this is actually
712:49 - a dynamic
712:50 - function right why is it dynamic if you
712:52 - remember what dynamic is it can be
712:55 - inputted with any
712:56 - you know parameter or argument and still
712:58 - get you the right itself right result
713:00 - it's not hard-coded right so
713:03 - later on i need to make an api call a
713:05 - separate one to get the trending one but
713:08 - where do i want to put it well that's
713:10 - where dom element comes in
713:12 - dom element is just who doesn't
713:14 - represent one of these guys right so if
713:16 - i want to put it in trending
713:17 - right
713:18 - i need
713:19 - this dom element the trending div
713:22 - because that's where i want to put it
713:23 - and then if you notice there's something
713:24 - called path type
713:26 - that one you might not know but when you
713:27 - look at the data there's two types in
713:30 - here there is let me see let's bring
713:32 - back let's bring that back in here
713:34 - [Music]
713:35 - there's two types of paths what i mean
713:38 - by paths is this if i could create
713:40 - netflix do you notice the difference
713:41 - between these movies and these movies
713:45 - well this is called poster path and this
713:48 - is called backdrop path it's the wide
713:50 - one so you have to define
713:53 - on your api data which path is going to
713:55 - do you want a posterior path or a
713:57 - backdrop path all right that's what
713:59 - that's here for
714:01 - cool so that's what path type is and
714:03 - again here we're going to use the fetch
714:05 - method right to call the api
714:08 - and then we're going to use fetch to get
714:10 - the response
714:12 - and then call something called show
714:14 - movies that's another function
714:16 - right so this is a function
714:19 - that displays the movies to the dom
714:21 - right so
714:22 - fetch movies is just fetching the movies
714:25 - show movies is another function that's
714:28 - gonna show the movies over here right so
714:31 - we're gonna need to take that object and
714:34 - place it into the down all right nothing
714:36 - new right i'll walk you guys through
714:37 - that eventually but i think you guys
714:38 - know how that's done right
714:40 - next we have a function that fetches
714:43 - netflix originals right so these three
714:47 - functions are gonna need some api calls
714:50 - so what i did is x tap the tab over here
714:53 - and let me get you the api
714:55 - that you're gonna need so the url for
714:57 - this one all right let's do a comment
714:58 - here
715:00 - a url to get originals is going to be
715:03 - this api
715:05 - and the cool part is you don't have to
715:06 - worry about getting an api key i already
715:08 - got it for you it's this one right here
715:10 - all right then we can also
715:12 - get the url for
715:15 - sorry this is the url for trending
715:19 - we need a url
715:20 - [Music]
715:21 - for
715:23 - original movies
715:25 - which is just going to be this
715:29 - yep and then we can do something like
715:31 - this oops
715:32 - like that
715:34 - and see the top rated url i have for you
715:36 - guys it's going to be
715:38 - right
715:41 - url
715:42 - pull in and boom there you go
715:44 - so these are the urls that you want to
715:46 - use and you're going to use these and
715:48 - put them into fetch movies right so
715:52 - after you get the url
715:54 - you're gonna call
715:56 - call fetch
715:58 - movies
715:59 - all right so as you can see fetch movies
716:01 - is the key here so i'll put this three
716:03 - times so after this
716:04 - call fetch movies and after this
716:07 - call pledge movies
716:09 - all right why am i calling fetch movies
716:10 - because fetch movies again is already
716:13 - making the api call right it's already
716:15 - making an api call i'm taking a dynamic
716:18 - one and then you're gonna choose where
716:20 - it goes right so it's already being
716:22 - handled right it's a helper function
716:23 - right it's called a helper function
716:25 - because it's helping get originals fetch
716:28 - the movies it's helping trending fetch
716:31 - the trending movies right or using it
716:33 - dynamically alright so that's pretty
716:35 - much it for the app what you need to do
716:37 - is figure out how it comes together and
716:39 - i would start with
716:40 - this function on line 45 okay so best of
716:43 - luck this is definitely a little bit
716:45 - less complex than the fighting game that
716:46 - you guys have done but i think you guys
716:49 - can do it and if you get this working
716:51 - you're free to do whatever you want with
716:52 - this ui because you can use this to make
716:54 - your own netflix change out the code to
716:56 - make i don't know disney plus
716:58 - however you guys want to move it
717:00 - however you guys want to do it so
717:02 - good luck i'll see you guys in the
717:04 - solution
717:06 - awesome so how'd you guys do were you
717:08 - able to get it working if you were close
717:10 - or you got to finish congratulations you
717:13 - have netflix right if you didn't this is
717:15 - what the solution part is for and maybe
717:18 - you can see maybe that i coded it a
717:19 - little bit differently or maybe you
717:20 - coded it better than me right hats off
717:22 - to you if you did but let's walk through
717:25 - the solution right so we have the make
717:28 - netflix app we have fetch movies and the
717:30 - three main functions and i just realized
717:32 - the url is already on here so i didn't
717:33 - need to paste it down below that's okay
717:36 - we'll keep it moving we're gonna see the
717:38 - great originals trending now top rated
717:40 - right so let's break this down
717:42 - here are the divs that we need to know
717:44 - original movies has the netflix
717:46 - originals trending has trending yada
717:48 - yada you guys know that right here's an
717:51 - interesting one window
717:53 - dot unload
717:55 - right
717:56 - it's exactly what it sounds like it's
717:58 - basically a method right because it's
718:01 - coming from window
718:03 - and when the window loads
718:05 - run these three functions so
718:09 - it's going to run those three functions
718:11 - and then display it on our netflix app
718:14 - right but at the moment you're not going
718:15 - to see anything
718:17 - right because
718:18 - those functions don't exist or they
718:20 - don't do anything right they're blank
718:22 - all right so let's start with the core
718:24 - of our functionality and that's going to
718:26 - be on fetch movies so let's hop over to
718:28 - fetch movies that's gonna be on line 45
718:31 - i believe yep it's right there
718:33 - so now that you're on fetch movies
718:35 - we're gonna need to do is take a look at
718:38 - url dom element and path type i
718:40 - explained this in the last video so to
718:42 - get started using it you just want to
718:44 - say fetch right
718:46 - and then how do i fetch
718:48 - you know api data
718:50 - well you just put the api url right so
718:52 - that could look two ways it could look
718:54 - like this
718:55 - fetch this whole thing
718:57 - or
718:59 - and this would work you could totally do
719:00 - this but this is only getting top rated
719:02 - as you can see
719:04 - but i want to make fetch movies dynamic
719:06 - so how do i make this dynamic
719:08 - just type in url
719:10 - how come that's allowed well i'm passing
719:12 - that as an argument right i'll put that
719:14 - long string when i call the function
719:17 - later cool so after that we can do a dot
719:21 - then all right and again with the cool
719:22 - thing with that then is you can just
719:24 - write it like here
719:26 - parentheses and
719:28 - remember dot then is handling what you
719:31 - want to do
719:32 - after the promise is resolved right so
719:35 - if i say uh that then here and i say
719:38 - response
719:39 - and then say arrow and then say
719:42 - console.log
719:44 - response
719:46 - okay cool so if i hit run here boom
719:49 - nothing really happens and you can even
719:50 - check it on inspect element over here
719:53 - nothing all right reason being we didn't
719:55 - really call fetch movie so let's do that
719:57 - right here
719:58 - all right so coming down below here
720:00 - we're just going to call fetch movies to
720:01 - test it out and
720:03 - here we need to pass in a url dom
720:05 - element and a path type
720:07 - but are we using dom element or path
720:09 - type just yet nah we're not using it
720:11 - just yet so we're gonna just pass in a
720:13 - url and i can't just write url here
720:15 - because then it'll be undefined fetching
720:17 - undefined right so let's pass in a real
720:20 - api url which was this one up the top
720:23 - get originals
720:25 - and we'll paste it right here and let's
720:27 - put some more space so you guys don't
720:29 - get confused all right this is a
720:30 - function call
720:31 - passing an api url we can also hit
720:34 - refresh here
720:35 - because it's going to run
720:36 - then console and look at that response
720:39 - right look at this we got a response
720:41 - here's everything we need the headers
720:43 - the status status 200 means it's good
720:46 - which means we're good to go right so
720:49 - now that we have the response though
720:51 - we need to do something else
720:53 - and something else with the response
720:55 - right
720:56 - well in here
720:59 - if
721:01 - dot okay
721:02 - right if it's successful or if we got
721:05 - 200 we're gonna return
721:08 - right
721:09 - response
721:11 - dot json right
721:14 - cool
721:15 - then we can add an else
721:17 - all right and then we can just throw
721:19 - an error so we can say throw a new
721:22 - instance of an error right the classes
721:25 - are coming back here right something
721:28 - went wrong just in case something went
721:30 - wrong along the way we can have this
721:32 - else statement
721:34 - cool but
721:35 - as you see we got the response object
721:37 - but we didn't get any data right and the
721:39 - okay is true so that's good
721:41 - we didn't get any data all right what we
721:43 - need to get the data is go over to line
721:46 - 54
721:47 - where this parentheses and you're just
721:48 - gonna have to type in dot then remember
721:50 - dot then is handling what we get back
721:53 - from this right
721:55 - so
721:56 - basically after that then and you can
721:58 - change multiple dot then you can do that
722:00 - then that then not then this is the
722:02 - second dot then
722:03 - and this parameter we'll call data
722:06 - right and then we will console.log the
722:09 - data right
722:11 - so there we go let's hit refresh
722:13 - and look when i contact data this is
722:15 - what we get back we get an object right
722:18 - most of the time when you make an api
722:20 - call you're going to get an array of
722:22 - objects
722:24 - or just an object itself so this time we
722:26 - got one object right and if we open it
722:28 - up we got results which is what
722:32 - right an array
722:34 - right and inside that array what's
722:36 - inside that array let's open it up
722:37 - objects
722:38 - right and notice something
722:40 - there is a backdrop path
722:43 - the back drop path is a character is a
722:46 - what's it called a property
722:49 - with a value
722:51 - of the image remember backdrop is the
722:53 - wide one right so let's open up zero
722:56 - again
722:57 - so there is the backdrop path and here
722:59 - we have the poster path right so i
723:02 - didn't just make this up this is how we
723:04 - can determine whether we want the path
723:06 - type to be the backdrop or the path type
723:09 - to be the poster right so there's fetch
723:12 - movies and now it's pretty much set up
723:16 - right the only thing that we could add
723:18 - here is a dot catch all right.catch is
723:22 - just here because if there's any error
723:24 - we can say error
723:27 - and then arrow here and say console.log
723:31 - error
723:33 - right
723:34 - okay cool we're actually pretty much
723:35 - done with the fetch movies already we're
723:37 - fetching the data right
723:39 - but then we want to take this whole data
723:42 - and show it onto our app
723:45 - right so how do we show movies right
723:49 - luckily we have a function for that show
723:50 - movies all right so what i'm going to do
723:52 - is i'm going to erase this because we
723:53 - don't want to call fetch movies here all
723:55 - right we're going to call it somewhere
723:56 - else what we want to care about now is
723:58 - show movies right
724:00 - show movies
724:01 - is exactly what it sounds like and its
724:03 - job is to display that movies
724:05 - that object that we got back all right
724:07 - this thing
724:08 - this results
724:10 - array
724:11 - and display it like all of these 20 and
724:14 - display it into our dom over here right
724:17 - so that means we're going to use the dom
724:18 - and how do we select things from the dom
724:21 - all right
724:22 - so one of the very first things that
724:24 - we're going to do is create a variable
724:26 - that grabs the id or class
724:29 - right why do i say or class right
724:32 - that's because
724:34 - we have a class that's going to hold
724:36 - original movies and the rest are ids
724:38 - right
724:39 - so
724:40 - what we're going to do is make a
724:41 - variable var
724:43 - movies
724:44 - right
724:45 - element right because it's a dom element
724:48 - is equal to
724:50 - so if i wanted to get a class or an id
724:52 - right i'm not sure what it is
724:54 - can i use document.getelementbyid
724:58 - not get element by id right this is only
725:00 - going to grab an id it's not going to
725:02 - get a class
725:03 - how about
725:04 - by class name right this could work too
725:06 - but that's only going to be class
725:08 - so what i want to do is grab query
725:11 - selector document.we're
725:15 - right
725:16 - document.queryselector if you don't know
725:18 - it's just going to grab
725:20 - the first instance of the class or id
725:24 - right what do i mean
725:25 - let's say we have four boxes right and
725:28 - they're all classes called box it's
725:31 - gonna grab the first box if you have
725:33 - four ids it's gonna grab the four id
725:35 - luckily
725:36 - right we only have one of these one of
725:38 - these one of these so
725:40 - it's always gonna pick the right one
725:42 - so query selector and how do i make it
725:44 - so it's dynamic right i want to grab the
725:47 - trending one so i could just write you
725:49 - know trending here
725:51 - and it would only grab trending right
725:53 - it's static but to make it dynamic right
725:56 - we have access to
725:58 - dom underscore element
726:00 - and where does dom element come from it
726:02 - comes from this argument here and that's
726:04 - what we're passing in
726:06 - okay cool
726:09 - next thing all right we're going to loop
726:11 - through
726:13 - movies object
726:15 - so
726:15 - remember the part on the javascript
726:18 - course about objects there's a way to
726:20 - loop through them and you can use
726:22 - something called the four of loop right
726:24 - so to use a four of loop you say four
726:26 - just like we do with a for loop right
726:29 - but to use four of you're just gonna say
726:32 - four
726:34 - let
726:35 - movie
726:36 - of the object name so what is the object
726:39 - name here
726:40 - right
726:42 - it's going to be called movies right
726:45 - but let's think about this
726:48 - what am i looping through if i just say
726:49 - movies
726:51 - if i'm looking through movies i'm
726:53 - looping through this whole object
726:56 - right but where in this object does the
726:58 - movies live
727:00 - it lives in the results
727:01 - right so i want to be looping through
727:03 - the array
727:04 - right of objects so
727:06 - how can i if this is if movies is an
727:08 - object how do i get the results from
727:10 - that object
727:11 - aha
727:12 - right you guys got it results
727:15 - so let movie of movies dot results okay
727:20 - so from here we can console.log
727:24 - right
727:25 - uh movie let's start let's stop there
727:27 - just to make sense of it all right
727:29 - and instead of console logging the data
727:32 - in line 55 i don't want to print it i
727:34 - want to call show
727:36 - movies right
727:38 - and for now we're going to say url right
727:41 - that's what we need to pass here url
727:44 - actually not url we should pass data
727:45 - because that's the object right the data
727:48 - is the movies
727:49 - the dom element right we can keep that
727:52 - the same and the path type we keep that
727:54 - the same
727:55 - cool
727:56 - so to get this up and running right show
727:58 - movies is gonna get called when i call
728:00 - fetch movies so what we should do is
728:03 - call fetch movies let's call fetch
728:04 - movies again
728:06 - test it out see if i have it pasted
728:08 - right nice i still have the api
728:11 - right then we're going to say the dom
728:12 - element is the original and the original
728:16 - is like this
728:17 - all right original movies
728:22 - yep okay so original movie just copy
728:24 - that that's the class name comma
728:30 - and it should be dot original movie
728:32 - since it's a class
728:33 - and in the comma we want
728:36 - poster path poster underscore path
728:39 - all right so let's hit
728:40 - refresh on this
728:42 - and you see this console log where is
728:44 - this console coming from it's coming
728:46 - from
728:47 - this in line 70. so we're consolidating
728:49 - what a movie is
728:50 - so what is a movie then what does this
728:52 - tell you
728:53 - right
728:55 - it tells me
728:56 - that these are all the objects
728:59 - inside of the movies array all right if
729:03 - our console log
729:04 - up top here console.log
729:08 - movies.results right
729:11 - let's hit refresh on this
729:13 - at the top here see this array of 20.
729:16 - that is movies.results
729:19 - we're we're looping through
729:20 - movies.results so movie
729:23 - is each individual object so this is the
729:25 - first one which is stranger things this
729:27 - was all of us are dead lucifer squid
729:29 - game first kill right it's exactly what
729:31 - it sounds like every movie
729:34 - in movie results
729:36 - okay so when i say movie i'm talking
729:38 - about each movie cool
729:41 - so what do we want to do with this loop
729:42 - then all right what do we want to do
729:44 - with each movie
729:45 - well
729:47 - with each movie
729:48 - right
729:49 - i want to create an image element right
729:53 - there should be an image element if you
729:54 - remember the finished app
729:56 - right
729:57 - let's uh bring it back again and keep
729:58 - bringing it back i should just keep it
730:01 - let's go here
730:03 - open here
730:04 - and let's look
730:06 - oop
730:07 - let's look at create netflix
730:09 - each of these is an image tag with the
730:12 - data of that movie right so what we need
730:14 - to do is for every movie and movie
730:17 - result let's create an image element
730:20 - right so we can actually create that by
730:22 - making a variable so we can say i've
730:24 - been saying var let's just say let to
730:26 - keep it consistent let
730:28 - and let so let's say let image element
730:31 - right
730:33 - and set this equal to document
730:36 - dot
730:37 - create
730:39 - element all right this is how you create
730:40 - an element using the dom
730:42 - img this is making an image tag right so
730:45 - this is this comment right here
730:48 - within loop create image element
730:51 - all right let's get these also in here
730:54 - [Music]
730:55 - set attribute
730:59 - set source i can actually copy all these
731:06 - awesome all right so now we need to set
731:08 - an attribute right
731:10 - so the attribute of this
731:14 - is going to be
731:15 - image
731:16 - element right that's the variable
731:18 - holding the element and we're gonna make
731:20 - an image tag for every single movie
731:23 - all right
731:24 - image element dot set attribute right
731:28 - is data
731:31 - dash id
731:32 - and then you're going to comma
731:34 - movie right what's movie
731:36 - movie is the object all right and how do
731:38 - i get the id
731:40 - right right here id
731:42 - so how do i get an id of the movie
731:44 - object you say movie.id
731:47 - i'm saying attribute as data id okay
731:49 - cool so now when you see set source here
731:52 - that is the actual image itself right
731:54 - this is creating the image tag this is
731:56 - giving it an attribute of the id this is
731:59 - putting the picture in the element make
732:01 - sense
732:02 - cool
732:03 - so we can do an image element dot source
732:06 - right that's how you change it it's
732:07 - equal to
732:09 - and then we have to have the link
732:11 - so the api link for this is universal
732:14 - right
732:15 - it's going to be something like this
732:20 - boom
732:21 - image
732:22 - element.source is equal to
732:25 - this
732:26 - image path right where am i getting this
732:28 - from well if you look
732:30 - that is the url of the image and over
732:32 - here it just needs the path to add on to
732:35 - it
732:36 - right so we put this
732:38 - after
732:39 - original
732:41 - then you get the backdrop but if you put
732:43 - oops if you put
732:45 - this poster path in front of the url you
732:48 - get the poster
732:49 - that's how this works
732:51 - right but now what is this what is this
732:53 - uh
732:54 - dollar sign template movie bracket path
732:57 - type
732:58 - well
732:59 - this is going to get you
733:00 - it's a dynamic way to go into the movie
733:03 - object
733:04 - and
733:04 - path type remember it's dynamic it could
733:06 - be backdrop or poster
733:08 - if this says if this were to say
733:10 - something like um
733:12 - back
733:13 - drop
733:15 - path then it's going to get only the
733:17 - backdrops it's static if i said poster
733:19 - path it's only going to get the posters
733:21 - but if i say
733:23 - path type
733:27 - path type then it's going to get
733:30 - whatever i passed in so now it's dynamic
733:34 - cool
733:35 - oh i copied it over
733:38 - there we go
733:41 - now i can go back like so perfect
733:44 - so the next thing we need to do is
733:46 - uh we actually don't need to add these
733:49 - an event listener i'm gonna take that
733:51 - out but we can add this
733:54 - append the image element to the dom
733:57 - element selected right what does that
733:58 - mean right what it means is let's say i
734:01 - want to add original movies or that's
734:03 - what this data is it should go
734:05 - underneath netflix originals right so
734:08 - how do i put those image tags right
734:10 - that's the step we
734:11 - fetched the data
734:13 - we
734:14 - got each individual movie
734:16 - we created an image tag we put the
734:19 - picture in there
734:21 - where do we put them that's what the
734:22 - step is where do we put those images
734:25 - right and where we put them is going to
734:27 - depend on what we put as the dom element
734:30 - so if you look under
734:32 - the original movies
734:34 - this is what we need we need to put it
734:36 - in this div right so how do we put stuff
734:38 - in this div
734:39 - well we're going to use the append
734:41 - method
734:42 - right
734:44 - so let's come down below right here
734:46 - and we can say movies
734:49 - element
734:50 - right dot append
734:54 - child right so child right is whatever's
734:57 - inside the div right so
735:00 - basically
735:02 - add
735:03 - image element
735:06 - to the movie element right so now we're
735:08 - combining it together so l
735:11 - element
735:13 - oh element there you go so now we
735:15 - appended the child to the dom element
735:17 - selected
735:18 - yep so we're selecting the dom with dom
735:21 - element and it's movies l and when we
735:23 - say movies l add an image element to
735:25 - that movies right so what is that
735:27 - happening visually basically add
735:28 - stranger things to that div add this
735:30 - movie to that div add lucifer to that
735:32 - div it's going to do this one by one
735:35 - because of the loop
735:36 - for every movie in movie result create
735:39 - an image tag set the attribute put the
735:42 - source in and add it to the div and then
735:44 - again create the image tag create the
735:47 - source add it to the div until
735:49 - all 20 is done
735:51 - makes sense and that's guess what that's
735:53 - it that's show movies so if i were to
735:56 - let's hit refresh
735:57 - on this guy
735:59 - see what happens
736:01 - hey look at that exactly how i said it
736:03 - it appended
736:05 - a movie element
736:07 - onto netflix original so the first part
736:09 - is done right
736:11 - that's sick right but now it's gonna go
736:12 - away because i'm gonna erase fetch
736:14 - movies right because this is a static
736:16 - way of doing that like the point of this
736:18 - exercise is to show you dynamic api
736:21 - calls right so i erased it and now if i
736:24 - refresh
736:25 - we lost the progress but you guys know
736:26 - how it works now right
736:28 - so with that said
736:30 - right
736:31 - show movies is done fetch movies is done
736:34 - now let's make the dynamic calls right
736:37 - notice how i have the api already for
736:39 - you what you need to do is just say let
736:42 - url
736:44 - right
736:45 - let url equal to this
736:47 - right and then we call fetch movies
736:49 - remember the thing that we just erased
736:51 - right now we can add it back in but this
736:53 - is forget originals so
736:55 - d you could type in this whole string
736:57 - here but it would look very long
736:59 - right
737:00 - you could
737:01 - just type in url
737:03 - why that's because we have url right
737:06 - here all right holding this long string
737:08 - that's another way another trick for you
737:10 - guys if you have a really long api call
737:12 - and you don't want to you know fill up
737:14 - your function calls with that long
737:16 - string you can just store it in a
737:17 - shorter variable all right making use of
737:19 - variables here
737:20 - and then
737:21 - put the same exact parameters dot
737:23 - original underscore underscore movies
737:27 - comma
737:28 - poster
737:30 - oops
737:31 - the poster path
737:34 - awesome so this is get originals and if
737:36 - i were to hit refresh on here
737:39 - it works again right it works again
737:41 - because
737:42 - why why is this working even though i
737:44 - didn't call get originals well if you go
737:47 - at the top remember that windows unload
737:49 - it's already calling it
737:50 - right so we are one third of the way
737:52 - there the rest is simple
737:56 - so call movies
737:58 - let's figure out that so we can just
737:59 - call fetch movies here
738:01 - we can take this comment that i made for
738:03 - you guys and do
738:04 - let
738:06 - url equal to
738:09 - this right
738:12 - and pretty much do the same thing
738:14 - i can say url
738:17 - and this time right it's different we
738:20 - want to say
738:21 - hashtag trending why are we saying
738:23 - hashtag trending
738:25 - it's hashtag because this is an id you
738:28 - got it
738:28 - so trending
738:30 - and we want the
738:32 - backdrop right the wide one backdrop
738:36 - okay
738:37 - i love coding because once you know the
738:39 - individual piece
738:41 - it starts to get a lot simpler because
738:42 - it's the same pattern over and over
738:44 - again okay so now that that's done if i
738:48 - hit refresh here
738:50 - hey trending is available
738:52 - awesome
738:54 - okay top rated same deal let's hit let
738:57 - url equal boom
739:00 - call fetch movies
739:03 - right we can say url here
739:06 - comma
739:07 - the next thing is going to be top rated
739:10 - and is that a class or an id
739:12 - it is
739:13 - an id top rated
739:16 - all right so this isn't too bad right
739:18 - guys if i do back drop underscore path
739:22 - hit run
739:23 - right at refresh
739:25 - let's frickin go and with that said guys
739:29 - this is your netflix app where you can
739:32 - go big and small
739:34 - look at that
739:36 - awesome so look at that you made netflix
739:38 - you've got it working your boss is happy
739:41 - right feel free to take this project and
739:44 - do whatever you want with it right you
739:46 - can make your own netflix you can make
739:48 - disney plus
739:49 - right but this is how it works you guys
739:52 - learn how to make apis and they're
739:54 - dynamic so congratulations this is it
739:56 - for the project
739:58 - give yourself a round of applause and
740:00 - this has been awesome
740:02 - wow that was a lot i mean that was over
740:05 - 10 hours of content if you got to hear
740:08 - start to finish first of all i love you
740:10 - my adsense loves you thank you so much
740:12 - and i think your skills javascript
740:15 - skills went
740:17 - way higher now you're still not a pro
740:19 - but this is way more than you might have
740:21 - ever done okay and you definitely have
740:24 - increased your skill set so give
740:25 - yourself a huge pat on the back i'm
740:27 - really proud of you for getting to here
740:29 - i hope this was exciting riveting fun
740:32 - engaging insightful interesting and more
740:35 - than anything else just curiosity
740:37 - inducing i hope that you want to
740:39 - endeavor on this journey and on this
740:40 - path to like learn more javascript and
740:43 - just improve your coding skills i had a
740:45 - lot of fun making this for you our team
740:47 - had clever programmer me and lance david
740:49 - everybody had so much fun putting this
740:51 - course together for you i hope you
740:53 - enjoyed it but let this be just a start
740:55 - in your journey there's so much more for
740:58 - you to do i can't wait to see what types
741:00 - of projects you build because that's
741:01 - what you need to do now okay it's all
741:03 - about building projects with this and
741:04 - taking this to a whole another level so
741:07 - if you enjoyed this smash that like
741:08 - button subscribe to the channel because
741:10 - this is the channel where you will
741:11 - become the best developer on planet
741:13 - earth and look out for more content okay
741:17 - so thanks so much for watching and as
741:18 - always this is qazi and i'll see you in
741:21 - the next video

Cleaned transcript:

welcome to the ultimate javascript course where you're gonna master javascript in under 12 hours by building projects you're gonna start off with the basic fundamentals of javascript and then you're gonna move on to building smaller to bigger projects so for example you're going to start off first by doing lots of exercises so you can get good with how arrays work objects variables etc then you're going to build little projects like a tip calculator then i'll show you how to learn apis and make an app that gets a random dog every single time you click it you'll learn how to build your own superhero apps if you search up batman or thanos you can actually find your superhero and you can switch it up pretty cool pretty impressive and you can show it off to your friends i'll also show you how to deploy these apps so they're online anybody can use them at any time you'll learn how to build your own weather app with javascript i'll help you master concepts like promises and async and await some advanced concepts as well right don't worry this is for complete beginners okay so if you're a complete beginner you're in the right place and for even more intermediate there's going to be a couple of things for you to learn you're also going to build a fighting game which is going to be really cool it's going to be like street fighter but you get to build your own where your characters will have attack and heal and there's going to be sounds and graphics and you'll see how to build that with javascript and you'll be building the netflix app with javascript so how freaking exciting is that i hope that this is the most exciting javascript course that you've ever come across and i think you're gonna have a lot of fun so stick around this is gonna be a fun ride now before we just jump into it what i want you to do is smash that like button so this course goes out to as many people as possible and as a way to thank you here's a picture of a koala bear alright and a baby and a monkey there you go hopefully i earned that like now make sure to click the link that says join.replay.com cp dash javascript we're popping it up on the screen right now this is the most important part of this video so click that and make sure that you fork this rupple it's going to bring you to this screen right here and then what i want you to do is you should see javascript course by clever programmer right and then what i want you to do is make sure to hit fork this is very important okay hit fork rupple and once you do that you can actually get started working on this course but this is the most important step so click the link below in the youtube description or somewhere on the screen and then fork ruppel this is a rebel that you need to fork and then you'll be able to get started now once you fork it it should bring you to this screen over here now there's a bunch of code already here so that might intimidate you but don't let that intimidate you okay you can pretty much just ignore everything and when i'm gonna be coding along in the tutorial you can just follow along in this file your playground.js and you'll be completely fine you don't have to worry about anything that's happening in here right now these are only resources available for you as lessons notes exercises and projects that you could refer to later for now this is pretty much the your playground.js file is the one that you should be using in the video you'll see me use playground.js but that's mine so don't you you can go inside of it but don't use it okay only use your playground.js and write all of your code in here and you'll understand everything that's happening now just to explain to you what this is over here and what is happening is there's some in here we have the repo the github repo for this exact project so you can go ahead and you can fork that repo okay or not fork but like you can star it all right you could start that repo um just so on your github you could find it easily and plus it's nice for me to have stars right for these repos and go up and other developers can find it and helps them all right and then you have lessons so in lessons for example you can go to one of these lessons where maybe i have this little app that shows you how to click in with javascript and get these squares right and clear the game and you can go play it and then you can go and look at its code so for example for that red yellow green squares app that i have right here which you're going to build inside of this tutorial on the left hand side i'm going to have its code available for you so inside of dom i have this thing called red yellow green right and that's gonna be that's gonna have the code to this entire app so you're actually able to even click into it boom and see all of the code okay but again right now i wouldn't worry about looking at that right now just stay put all the project solutions are here so for example there's going to be project exercises and then you're going to see project solutions so what are these if you go into a project solution like let's say uh fighting game or weather app or create netflix these are the final completed versions of the app so if i type in las vegas and hit search boom my app shows up but if i go inside of project exercises weather app these are the uncompleted versions so when i hit them you'll notice that the javascript part is not working that's going to be your job to do and by the time you're going through this course you'll learn how to do all of this by yourself okay but for now don't try to do this yourself i'm just showing you kind of what's happening here what is all of this and how the course is structured but simply put for the rest of the video all you really need to do is just relax and follow along over here in your playground.js so whatever you see me do in the video just replicate it here and we'll start from the very first line of code hello world what i've decided to do is package all of this up into a course so you could binge this like netflix and it could actually keep track of your progress and everything will be much more organized and in one place in one course instead of you having to watch this on youtube so i've done this for your convenience to turn the ultimate javascript course for beginners into a packaged resource for you and it's also completely free and all you have to do is just go to the link below in the description that says cleverprogrammer.com slash js dash tutorial just go to that link click in the description below i'll take you directly to this completely free course all you have to do is just sign up okay it's gonna ask for your email or whatever to create an account so i could keep track of everything that you're doing and then boom you will have complete access to this course it'll be in your library you'll be able to go to cleverprogrammer.com and access it and it'll track your progress it'll track every single thing that you're doing so it's very important i highly recommend that you do that because it's going to enhance your experience of discourse with that said let's jump right into the video all right let's get started with the very basics of javascript so i'm gonna assume you're a complete beginner then we're gonna work our way up and make it more complex okay so let's start with something really really simple and we're just gonna start with the hello world and i know that's what everyone talks about but let's do it anyway okay so let's just do hello world and you can hit command s or control s if you're on windows and as soon as you save you'll notice that it runs right over here okay or you can just hit that play button at the top and as soon as you hit that you'll see hello world here will pop up so perfect that's exactly what we want now you can console log anything and they'll show up there okay so try console logging your name okay so try console logging that and if you do that correctly it should show up right over here and don't forget these apostrophes right here so let's give that a try i'm going to put my name here i'm going to hit run and boom at the bottom you see rafa kazi so good job so far you're making great progress and you most likely got this right as well so good job if you didn't that's okay don't worry we'll you'll have plenty of chances now let's do some programming and let's make it simple and get started with it okay so what can i do as a programmer right what are the things that i could do with it so let's say we have a variable and we start storing stuff in there okay so for example i can say name and i can say name is rafikaze and now if you hit run you'll notice that this won't really do anything this didn't do anything and i'm going to or actually let's say name is peter pan so this could my name can be different from the name that i gave here and you'll notice i don't see peter pan anywhere so what's going on why am i not seeing peter pan well what i need to do is remember i need to console log it so i can actually do this here and run it and boom all of a sudden notice that i'm seeing peter pan so that in javascript are called variables so you can store values in them and then you can refer to those values even if those values are really long so for example see i have a sentence here and my sentence is how are you doing today nice to see you hope you have a great day whatever my sentence is yeah and now if i do console.log and i do sentence and we run this look the entire sentence gets printed out but if i remove this console log boom you see that at the bottom right there no sentence shows up so this is something nice to kind of note and to pick up on what you just learned about are variables and if you ever see me doing these two slashes this just tells the computer hey this is for humans so don't actually try to run this because if i remove this and i try to run this i'm going to get some type of error that's going to say hey you haven't defined variables which just means i never told the computer what variables is i never did something like variables equal to 5 or whatever but this line wasn't meant for computer anyway it was meant for a human being so these are called comments okay comments and they are meant to just be read by human beings and the computer decides to completely ignore them now let's do something where we have numbers and other things okay so i want to show you other things that you could do with javascript so let's say we have food and i set food to you know let's say you paid maybe 20 for your food okay great well i'll give you a little exercise here i want you to go ahead and console lock that can you make food pop up here give that a try i'll give you five four three two one let's go so we're gonna do console log and i'm gonna say food just like this and now when we hit it you'll see at the bottom i see 20. okay hopefully you're seeing that on your screen now i'm going to remove this line let me show you how you can do other things with programming okay so for example there's certain things called operators so we want to tip let's just say 20 okay now with that food and that tip what we need to figure out is how much is the tip because yes this is 20 but what's the tip amount so let's calculate the tip amount and we're going to say it well that's simply food right multiplied by the tip so this maybe we can call it tip percentage so we should give better variable names and that way things are much more easy to read now before we run this remember this tip here we updated it to tip percent so make sure you copy paste that there so use food multiplied by tip percentage now you have your tip amount okay so let's now print that out so i'm going to say tip amount and let's try running this and we see that it was four dollars okay very good that's exactly what we wanted now let's say we want to make it a little bit more interactive and we want to make this a kind of like an app experience so right now i hope you're excited because you're going to be building your first app with javascript that's the power of javascript you can build things with it so freaking fast and you're going to be building an app right now so i'm going to teach you something called you know basically how to get inputs from user that's how you make apps because right now we've hard coded food to b20 but let's say that if the food is a different amount well you'll need to come to this app that you made and you're going to need to put 40 here and you're going to need to put a different percentage you need to calculate this differently every single time it's going to be kind of annoying now here's how you can use user input okay so instead of this food saying 20 here kind of hard coded here what i'm going to instead do is i'm going to say prompt okay and i'll show you actually how prompt works so let's go ahead and try that first so i'm just going to say we're going to create a variable called banana and we're just going to store something in there and i'm going to say prompt or let's say fruit okay and we're going to say what is your favorite fruit we need to console log this so i'm going to say console.log we'll say all right and i'll say my favorite fruit is mango this time right and boom you actually see mango at the bottom right that's exactly the experience we wanted for this app so just very simple but we need to make this happen and we need to make our food calculator thing that we made more um dynamic because right now it's hard coded so we need to make it where it takes an input from the user instead of saying 20 here all right and then it calculates the tip amount based on that so what can we do i want you to take about 30 seconds to a minute and see how do i make this food thing over here interactive if you haven't figured out so all good let's do this together so i'm going to say prompt and in this prompt i'm simply going to say how much was the food and we don't we don't want this fruit line to run so i'm going to comment this out by putting a slash slash here and i'm also going to comment this one out this console log by putting a slash slash here because i don't want those to run i just want this here to run so what's going to happen now is food is going to run it's going to ask for what how much was your food once you put in how much the food was it's going to store that inside of the food and then our tip percentage is going to run and then our tip amount is going to be calculated based on whatever you put in the food multiplied by 20 tip and then we will output the tip amount perfect so how much was the food we will say was let's say forty dollars i'll hit run let's try it again and let's say it was twenty dollars so twenty percent of twenty should be four let's try it boom so that was great and there we go so our food was calculated properly we do have four here very good now what if you wanted to make tip percentage user input as well where this is not hard coded this is the data the user puts in because the user can decide hey how much tip do i want to add do i want to give 10 tip 20 tip 1 tip 100 tip that should be up to the person and what we want to do is the user should be able to put in let's say they want to give a 20 tip so this should be able to put in 20. the user shouldn't have to say 0.2 right so they should be able to go 20. now what do we have to do to get 20 down to 0.2 well 20 divided by 100 gets that to 0.2 so it's whatever the user input is we divide that by 100 so let's replace this by user input let's say for example but in this case you know what we can do is we can just replace this with prompt okay and we can say let's just say tip percentage okay so that's all the prompt will say and then whatever tip that they put in we will divide that by 100. all right so here's one cool thing that we can do on the bottom right here click right in front of that arrow and it'll allow you to write code that will run right away so you could see what's happening so let's say that i have 20 and if i divide that by 100 and then i want you to hit execute at the bottom right and uh scroll all the way down and you can see 20 divided by 100 is 0.2 right so that's exactly what we want so that's how that division sign works and i know i haven't shown you division but there are a bunch of things that we could use in javascript so there's multiplication there's division there's exponents there are a bunch of other things but like plus minus right all the basic math stuff works so let's try and see if this is working this food thing that we're making here okay so whatever the tip is we're going to divide that by 100 and then we're going to multiply food with that tip percentage all right so let's give that a try over here i'm going to hit run and let's see what happens so how much was the food so let's say i paid a hundred bucks for the food the tip is going to calculate okay it's a tip percentage all right let's say we want to give 10 as a tip so that would be 10 and boom you can see that it actually says ten dollars right there now if you don't even want this to come in the console and you want this to come like where the user could see it you could even use alert and you could alert the user with what the tip amount is gonna be so let's try this whole thing again and watch what's gonna happen it was a hundred dollars um how much was the tip it was let's say 10 and boom it just says right there you're looking at 10. i'm just going to comment this out normally in a normal app you'll never use prompt to get user input you'll use something called forms in javascript or you know html forms you use forms and users like we'll put in the data there and then that'll populate in here but for now we're just going to stick to using prompt because it's the easiest way without having to do too much html and all this other crap all right so all right now what if we want to do something more because right now this is pretty good right but what if we want to show the tip amount and like the total amount right what do we want to show how much the food was how much the tip was and then what's the total amount what if we want to show all of those things so let's go ahead and do that as well so we're going to say total okay let's create a variable called total and total will be whatever food was plus the tip amount so let's go ahead and do that i want you to take a try and do that yourself and then console log it see if you nail it so take five to ten seconds to do that right now count down five four three two one and now let's go ahead and let's do it together all right i put myself up here so i'm nice and out of your way so let's go ahead and do this together now so total is gonna be food plus tip amount and then let's go ahead and let's make sure the console log and i'm gonna say total and then let's print it how much was the food okay so let's go the food was 100 how much you want to tip let's say 20 so that should be 20 so it should be 100 plus 20 tip that should put you at 120. so let's see and we got this weird thing so what's happening here is if you take a thing like this 100 and you try to add 20 to this this is not going to do what you think it's going to do okay because this is a different data type and we're going to talk about different data types so i'll write this here for now data types and there are different data types like strings and numbers and then other ones anything that has these quotes around it is a string and so if you try to add two strings watch what's going to happen when i hit execute it's going to add a hundred plus the word 20. so it's almost like you're adding words together okay it doesn't see these as numbers it's like looking at it like a word this is a word you're spelling 100 and when you try to add those two words together it makes them one word and so that's not what we want but if you take a number 100 and then you add 20 to it and if you hit execute you can see that that actually gives you 120 basically what you're looking for so what we need to do is we're getting this data from the users and it's coming back as a string you guys so for example i console log this food right here and let's just like run through this and let's just say 100 and we'll say 20 and run this that first 100 even though you can't see it it's actually a string so this is not a number it's actually a string so what we want to do is we want to force it to be kind of a number so let's say i have a 100 here right if i want to force it to become a number i can call this i can wrap this in something called number so number is a function and it will take this 100 and turn it into an a regular 100 without the quotes so we'll talk more about functions later so we'll make a note of this we'll talk more about functions later things like that and you know maybe even type casting but those are a little bit more advanced right now i don't want you to worry about any of that i just want you to focus on i'm just wrapping this thing in something called number and it automatically takes it from a word and turns it into a number and so i'm gonna take here and i'm going to just wrap this in a function called number like this so when you get food amount that should be a number and this tip percentage here that should be a number as well so i'm going to wrap this into a number as well just like this and we're going to move this here so you can see this very clearly so i've wrapped this inside of a number and i've wrapped this inside wrap this inside of a number as well make sure you have the right amount of parentheses going on so now we're not going to get that weird error anymore let's go ahead and run this again we're going to say the food was 100 tip is 20 percent and it calculates it correctly over here and you do see that it says 120 okay that's exactly what we were looking for perfect now one other thing that's kind of confusing when we're looking at our console log is like ah this says 20 here and it says 120 and i would want to label it right so i would want to want it to say tip amount here and then 20 and then total here and then 120. in other words like basically i wanted to say tip like that here and i would want this to have total here just like that right that's that's the the thing that i want so let's do that here so in console log i can actually say tip amount and then here i can say total so now watch what's going to happen when i run this and we say 100 and we said 20 is it tip amount 20 total 120. okay so now it's kind of nice our app is working in a better way a nicer way so everything looks cleaner and better and it's just showing you different things you could kind of do with the console log so i hope for now this was really good we're gonna keep on going there's a lot more to cover i hope you're excited i'm excited and i'll see you shortly alright let's get back to coding and now you're gonna learn about some really cool stuff and we're gonna build some more fun stuff okay so let's go ahead and do it together but one thing i want to tell you is if you want to code yourself you're going to be coding in a file called your playground.js okay so that's the file i want you to be using when you're coding right now because i'm coding in a file called playground.js okay so by the time you're seeing this video this file will have like all the code that i have written you know so far so this is going to have like pretty much everything that we have done together but in your playground it's like your scratch file and you're able to kind of code along with me all right let's keep going let's talk about a couple more things okay so one of the things i want to talk to you about are like different kind of data types that we have all right so we got numbers all right and the examples of them are like 1 5 10 100 you know whatever you could have decimal numbers too like 2.5 you have other things like what we call strings and these are anything that have quotes around them so it's like if i say hello or if i say what's what is up okay those are all strings and now strings could have single quotes around them or they could also actually have double quotes around them okay so like this you know as long as they're wrapped up and it's even on both sides okay single versus double they both work so those are strings so something we were talking about up here anything in quotes is going to kind of print out exactly like how you want it to okay other data types might include things like arrays and we'll talk about them later i'm just going to kind of leave a note here for now for this we also have objects a different completely different data type another data type is boolean so this is either something is true or false okay so true slash false this is an example of a boolean and why i'm talking about this and i know right now it might be like why are we talking about data types i mean this seems kind of boring but this is going to become really important because imagine if you're building an app where you know let's say that it's a simple app and it says hey if raining outside tell the person to get an umbrella or if it's not raining outside then tell a person to get a sunglasses well you're going to need to understand how boolean works otherwise you're not going to be able to make an app like that work taking it into real life well banks work off of booleans right because if you think about a bank can you take out if you have zero dollars left in the bank can you take out uh 10 000 or 1000 dollars you can't so the bank has a line of code that's sitting there that goes if user has this amount of money available so let's say you ask for five thousand dollars it says does the user have five thousand dollars available and if the user does then great let them transact it then basically if they do say true but if they don't say false okay and so using booleans you're able to do something we'll talk about later you can do conditionals and then you can do if else type of statements or if then and that's going to be important another thing i want you to learn about is well you know we have data types but one other thing we need to worry about is like basic math stuff okay and it's gonna be really simple like i'm gonna say like first grader level math stuff okay or third grader level like something really really simple so let's go and just talk about kind of math like operations that we have okay and you should know about these so for example we have multiplication so you can multiply using this you can divide using a slash you can uh do other ones like x exponents okay and these are like with two asterisks like this and then you know we have modulo which is like this or you know in other words is like a remainder okay so for example if you did five modulo two what would you get well that's a great question let's actually ask our javascript here so i'll do five modular two and hit execute okay and you can see that one is the remainder here right so you'd get back one if you did this so that's how modulo and remainders work and then of course you have add which is a plus sign which is pretty simple and i don't need to probably give you an example of that and then you have minus okay so these are kind of the majority of the math operations that you will do when you're coding so these are helpful for you to know because when we're we're going to be going along and we're going to be building things together and some of this stuff you're going to kind of need to know so we're going to just put it out there let's go ahead and call it math operators because they're like operators okay and then i'm just gonna show you a couple of like math methods okay that are gonna be helpful for you so and one of them we can actually even use right now so floor and seal the floor it just rounds down okay and this just you know if you can guess it by the name it rounds it up if you're getting a tip well that's that's going to be really weird right because like let's say you haven't placed an order and it was for 110.25 cents or something and then you're trying to calculate a tip on that 20 and then you get these like decimal numbers now sometimes that could be confusing and maybe you don't want it to a decimal number you want it to be an exact dollar amount okay let's just say well what you could do in that case is you could take a number like 22.5 or 110.25 cents and you could call floor on this okay so we're going to do math.floor and we're going to wrap this in and i'm going to hit execute and you can see that it just floored it so it just rounded it down that's all it does so if you did the same thing let's say seal and i said 110.25 and i hit execute it would round that up to 111 okay when we're actually building our we're going to be building some games in this tutorial as well so for example later when we go and let's say we build rock paper scissors or we build any of these games you're going to need to know some of these things okay so you can round down and round up um and you'll see why so you need to know this if you want to build those games later and then there's random okay all right so here's how random works okay this gives you a random number okay okay so this is how you actually use math.random okay so let's say i use math.random don't put anything inside of it and just run it so it'll always give you a number between 0 and 1. so if i keep pasting math.random you'll always get a number between 0 and 1. now if you want to try to get a number between 0 and 3 just multiply this by 3 like this and this will always make sure that you get a number between 0 and 3. and so if i keep running this you can see i got math.random multiplied by 3 and there you go i got a 2.4 let's try it again right i get a 0.42 and now you know when you're playing rock paper scissors you want rock to be zero you want paper to be one and let's say you want scissors to be two so if you want those numbers to map to them like that you need to pick between zero one and two okay that's what you need to do that's why you need to run this function and i'm gonna you're gonna learn later why that's the case okay but that's why you need to get between zero one and two so if we keep going with this well let me ask you this right right now you're doing this and you get this long number two point seven two blah blah but you just wanna get either zero one and two so in other words how could you turn this long number into just two okay take a couple of seconds it's one of the things i've already taught you okay hint hint it's one of the methods you have to use here okay so see if you can guess this i'll give you five seconds five four three two one all right let's call math.floor on this and wrap this in and hit execute and you'll see boom i just got two so then in other words what i have to do is i have to copy this math.random multiplied by three paste it here and call math.floor on this entire thing so now when i do that what will happen is this will eval run and evaluate and give me something like two point seven two point seven eight nine five five five four four four some long number right two point seven nine blah blah blah and then on that it'll call math.floor and it will turn this into just two and you'll end up with just two okay so let's try running this boom i got zero perfect let's run it again boom i got one let's run it again boom i got zero let's run it again boom i got two perfect so i'll always get between zero one and two those are the three different choices that'll map to my rock or paper or scissors later on when you're coding that up so that's just an example of how these methods work we'll practice more with them later but right now you should just know them and have them in your notes all right guys and let's do this thing right now so let's just go up and comment out like some of this stuff here so like we don't want to run this anymore so what i'm going to do is i'm just going to go ahead and highlight all of this okay because i don't care about running this anymore because otherwise every time you hit run it's going to keep prompting you and we don't want that anymore and just hold command and then hit slash or if you're on windows probably hit control and then hit slash okay so let's do that and it should comment out all of this okay with exactly how i did on my computer if it doesn't do that for you just turn it into a comment block but just make sure to close the comment block okay because if you don't close it then everything will turn green and that's not what you want either so i'm going to hit undo and i will just leave it as let's go back up here and i will just leave it as a common block like this okay and now let's go back down to where we were at all right so one of the things i'll do now is let's go over to our console here okay so let's go to boom let's go to this guy over here okay and i'm gonna drag hit settings and there's display size and i'll make the display size bigger let's go all the way back hit console perfect so now we have some more room to see everything here easier fantastic all right so we covered the math methods we covered math operators we covered some of this data type stuff right so let's go back up to our variables here okay so in our variables introduce to this so you have var const and let these are three very important things i want you to know and normally when you make a variable you never just make it naked like this you always either call it like you say let sentence equal blah blah blah let so you always just put a let here so right now i will just tell you never use var okay i'll make your life simple you can use const or let only use const if you know that thing that you made you're never gonna change it again but if you're gonna change it use let so most of the times for now at your level i will just say use let okay that way you won't run into any problems so for simplicity use let but if you want something to be constantly true then you're gonna use const so all our variables just put a let there and for more advanced users we're learning javascript what this does is it makes sure that you don't have a global scope for your variable names okay it gives you kind of get scopes it down so let's go down here now let's go ahead and like let's do something simple okay so i'm going to show you programming in a fun way as if you were sitting right next to me and we're just coding up something together okay and i'm like yo let's walk through this let's say we make like a tiny little weather app okay so let's go ahead and let's make a baby weather app and uh what we're going to do is we're going to say if there's rain then what we want to do is we want to say grab your umbrella or just print the umbrella emoji and if you don't have an emoji that's fine you don't need an emoji okay this is just for fun if it's not raining we're just gonna say wear your sunglasses okay so it's gonna be a simple app where the user is going to be asked if it's raining or what the weather is and if the user says it's rain right now then you tell them grab your umbrella and if the user says anything else like it's not raining or it's sunny outside then it says hey wear your sunglasses okay very very simplest overly simplistic baby level app but just to kind of gives you the ropes of programming okay so let's go ahead and build this out now and we're going to introduce you to a concept called conditionals they're your friend they're so freaking awesome and they allow you to build amazing apps and amazing things all right so i'm going to say let weather so i'm going to create a variable called weather so whether it could be rain it could be sunny whatever so we'll just say if weather weather rain then i want you to console.log grab your umbrella just like this i'm going to copy this and i'm going to paste it else we're going to console.log and then the sentence is going to be where your sunglasses and i'm going to paste that right here so make sure that you copy this correctly so here you have if weather is equal to rain with the two equal signs very important okay and i'll explain that to you later why as well okay so this is something called you have conditional operators and those include conditional operators include things like equal equal sign or equal equal equal sign or greater than sign or less than sign or less than equal to or greater than or equal to not equal to not equal equal to and those are the main ones that you're going to use okay i'm just leaving this here for you to know we're using this so if the weather is rain this is going to become true if this weather here is rain so this weather here is rain this is basically going to say hey is it rain equal to rain let's test it let's see what it says so is rain equal equal to rain and let's hit execute and let's watch what happens and boom look at that it says it's true now let's say is sun equal equal to rain it's going to say false okay let's try a couple of others 5 greater than 2 is that true or false all right hopefully you guessed it correct let's hit it and you can see it says true okay is 5 greater than or equal to 5 is this statement true greater than or equal to 5 yes it's true because 5 is equal to 5 okay greater than or equal to but if you do 5 is greater than 5 this will give you false because 5 is not greater than 5. so these are a couple of ones that you should know and learn about because this is going to be really important for any app that you're essentially building okay so if the weather is equal to rain so if this is rain because this weather here is rain if these two are equal what's really going to happen is this entire thing here is going to evaluate to a true statement so this entire thing is going to become true and if something becomes true an if then statement it will run this line right here but let's say that you put false here well then it's going to run this line right here and it's not going to run that line okay so that's how if else statements work just make sure you have the right squigglies so this squiggly opens here and closes here that's where your true statement goes the l squiggly opens here closes here and that's where your console log this is where your false statement goes so let's hit undo undo undo and go weather is equal to rain so now what i'm going to do is we're going to hit run and let's see if this runs how we want it to it says grab your umbrella beautiful so because weather is rain well what if the weather is sunny before i hit run do you think it's going to run line 57 or do you think it's going to run line 59 which one do you think it's going to be take a second and let's hit run and let's see what happens and boom it will run this line because this statement it found it was false because sunny is not equal to rain so this becomes false so then it won't run the true statement it will go ahead and run this false statement okay under the else so if we want to make it a app that a user can use this input here we will make it something the user puts in so remember how do we ask a user what they want to put in do you remember it starts with a p and then goes p r o hopefully you remember that was the word prompt and we're going to prompt the user and we we're going to going to ask how is the weather you know so if it runs boom how's the weather and if we say it's rain you're going to see that it says grab your umbrella if we say something else let's say it's sunny it's going to say wear your sunglasses so it's working exactly how we want now if the weather is equal to rain that doesn't really make sense right let's make let's put a y here so it checks for for weather is equal to rainy so let's run this again and now i'll have to put in rainy here so let's put rainy and now it will say rainy equals rainy this is true and then a little console log grab your umbrella so we just made a mini app that can you know fake help you with uh what you should do based on the weather okay if you wanted to make it a fancier app or a more real world app you'll be put at pulling the weather data from a real app so you'll be pulling it from some real app using an api and then you can detect what the weather is automatically and then if it's raining instead of console log grab your umbrella instead of this you could have it send you a text message on your phone saying hey it's going to rain today take your jacket with you so you could use twilio to send you literally a text message sms on your phone so that's freaking mindblowing right so that's really the benefit of uh learning this and right now i know these are like baby applications we're making and you're look oh i just want to make something bigger please hold on we're going to get to it we're going to build a lot of amazing applications but let's start off and keep it simple and so far you've done a fantastic job let's keep this going all right welcome back so we're going to talk about functions now you we just got done making this baby app what we're gonna do now is i'm going to just essentially comment out this entire app okay because we don't need it all right now that it's commented out i do want to let you know that on the left hand side when you're using this rupple there will be something here and right now this folder is called notes it might change later but what you'll be able to do is you'll be able to go to this folder and pretty much everything that we cover in our playground will be kind of organized here as notes so even though it's like commented out here and kind of hard to see because this file is going to get really messy as we start to code and build more and more things here you can go here miniweatherapp.js which essentially has that exact app that we created and it's just kind of sitting here for your use okay so this code will always be there and available for you i'm gonna go back to my playground here but if you're trying to code along you'll be going to your playground okay this is going to be your playground so make sure that you go to this all right so let's talk about functions because functions are a pretty important part of any programming language and for javascript they are massive so let's go ahead and learn a little bit about functions how do they work well functions are designed to basically run a recipe so they can run multiple things for you at once and it also organizes your code in a nice little way okay and so functions make your life a lot easier so let's go back here so you see how when you create a variable like a variable it can only store like a name or something along those lines what's cool about a function is a function can store blocks of code so for example remember this food app that we made earlier i'm just going to go ahead and comment this out this app that we made earlier i mean this is a lot of lines of code and if i ever want to run this app i have to always uncomment these lines of code or basically write all of these lines of code every single time i want to run it whereas imagine that it was in a function well then in order to run this piece of code all i would have to say is i wouldn't have to uncomment all of those lines up there all i would have to say instead is i could just go run a function that you know says calculate tip amount and then i would just give it its tip because okay so let's say that there was a tip or you know maybe the amount of food was a hundred dollars i just gave it that and then the entire app automatically runs just by me typing in this instead of that entire chunk of code so that's where function comes in so let's go ahead comment out this entire block again with command slash or control slash and i'm going to go down here i'm gonna remove this line i'm gonna start writing our first function so i'll write a first function what this will do is it will make a greeting okay so or say my name so let's do a say my name function okay so let's do say my name and say my name function it will do console.log and it'll just say qazi because my name is qazi okay so that's all it's going to say well let's go down here and i'm going to call and i'm going to hit run and you're going to see that nothing really happened right it didn't actually do anything and to make things less confusing let's also comment out everything that we have here so we just have everything commented out i'll run perfect so we see nothing in our console nothing happened well why didn't it do this so even though i made this function i have to call this function like this and now when i hit run watch what happens boom you can see that it says qazi right over here awesome now let's go on and you know we've done a pretty good job with this function say my name and look at what it does though before we continue and move on this is how you call a function so unlike a variable when you call a function you put open and close parens in front of it okay now this function what it the name of it is say my name or the variable of this function right is say my name this is the name of it and when you call it it runs all the instructions that are inside of that block okay so for example what does that mean what if i had like console.log seller name and say brian and let's also have it say banana whatever right if i run this you're gonna notice that by just calling the function it is running all these four lines of code and it runs them all right see that and then watch what happens if i just comment this out and i run it boom nothing so now all we have to do to run our code is we don't have to comment or uncomment the entire thing we can actually just comment or uncomment that call of the function okay this is called calling your function so whenever i say call your function that basically means you write the name of the function with open close parens cool now let's say that we want this function to be more dynamic because right now it's just saying quasiraphael brian banana so it will never actually say your name right so what how can we handle that how we can handle that is actually let's remove all of these lines right and we're gonna say hey we want you to say like a dynamic name that the user gives you okay well it's gonna go hey i don't know what name is in this case what we're gonna do is we're gonna also put that here so this function say my name okay has an argument called name and it's logging that that argument out okay so then if i say quasi here and i run this it's going to print out quasi it's going to log out quasi but what if i say lance here what is what is it going to do let's try it and boom lance because i call this function okay and here's how it works it goes here and it puts in the name lance and then it goes here and puts in the name lance and logs it out to the console that's how a function works okay this is a function with one argument so let's if i take you back to our older function that function has no arguments okay let's make let's copy this and let's paste this here okay and then let's make this the dynamic one all right say my name yeah so this is say my name with no arguments this is say my name with an argument okay let's give them different names maybe so this is say my name maybe let's just call it say my name two for now okay to call this function what are you gonna have to do so if you wanna call this function right here say my name to how will you call it okay take five seconds and see if you could call it okay and i'll give you a hint it's what you did on line seventy five four three two one all right let's do it so i'm gonna say say my name to and in this i'm actually going to give it a name i'm going to give it an argument and you can see that now it will print out kazur if i say kevin and run it you'll see that it'll actually say kevin right here okay and we'll comment outline 70 where it says say my name because we're just running the function that we wrote on line 72 and there's a nice little toggle that you could toggle to and it'll basically just collapse everything that you have inside of the function okay so that's kind of a nice way to do things so moving forward pretty much everything that we do will majority of the times do it in a function it keeps your code clean concise compact and it's just a better way to do things and we'll we're now going to step it up and make things that are a little bit more advanced and do them with the function okay so let's do that next so i'm gonna comment out this line here say my name two okay i'm gonna comment that out let's go down let's make another function and we'll call this function greeting okay so greeting will take in um your name okay it'll ask the user it'll basically need the name of the user and then what greeting will do is it will say well console.log it okay and it'll basically say hi name nice to meet you okay and if i run greeting so watch what's going to happen so let's say i run greeting and i give it my name and i say my name is quasi and let's run it and let's watch what happens okay it says hi nice to meet you hi name nice to meet you but that's weird it says name here and it says exactly name that's not what i wanted to say i wanted to say qazi so how do i do that um what we're going to say is hi plus name okay and watch what happens so that allows you to concatenate strings together the plus sign so watch if i have hi and then i put a plus sign here and i say kazi and if i hit execute you can see it says hi kazi but it's saying it right next to each other so we want to have a little space in there so i'm going to say hi space plus kazi like this okay so this is high and then one empty letter empty space here hit execute now it says high quasi with the space in the middle okay perfect so we're gonna go hi space plus name plus all of this stuff that we wrote here comma nice to meet you so let's put that there okay this will concatenate and get our greeting ready so we'll say greeting is equal to or we'll just say greet is equal to that okay and then in console log we'll just print out whatever greed is so let's hit run and you can say hi kazi nice to meet you well what if i change my name to lance it will go high lance nice to meet you so it's working as expected that's really good but it still doesn't look super nice how this is with the plus sign and it's kind of annoying you have to like put this space there and it just feels unnatural so this is why i want to show you template literals because they make your life a lot easier so instead of this code saying greedy is equal to blah blah let's write it in template template literals okay so let's go greet equals and when you do template literals you always have to do these backticks on your computer okay so you always start off with the backticks okay so let's put a backtick here so template literals now what i'm going to say is hi name comma nice to meet you and we can make this name dynamic and how we're going to do that we're going to say this name is a javascript part it's not a literal string so how we're going to do that is we're going to wrap it in the squigglies and we're going to put a dollar sign whatever is wrapped inside of the squigglies followed by a dollar sign it will understand as actual javascript okay meaning that now it's going to put this whole thing together kind of like how we were doing here but it this just does it in a much nicer way so now let's do console log great and watch what happens so i'm going to hit run hi lance nice to meet you what if i say amber heard haha you guys saw what has happened right the news is out or johnny depp okay let's go here by the way which side were you on were you on amber heard side or johnny depp site comment below let me know i'm curious to know your thoughts i think that she kind of deserved to lose and um you know it's nice that johnny got he was awarded 10 million dollars she was awarded 2 million so basically she owes johnny depp 8 million dollars which is more than her net worth so she's not gonna have a lot of fun paying that off uh but regardless that's neither here nor there let's get back to what you came here for so going back to this okay i got my greeting i can do johnny depp so it's like hi johnny depp nice to meet you so hopefully you understand how this function is working so let's go to the semi name function right this is a function called say my name and it has no arguments okay in other words it has zero arguments so i want you to also learn how to speak the lingo because you're gonna start hearing this a lot uh you know write a function call blah blah and it should have x arguments so this is it's a function called say my name and has zero arguments okay so i want you to write out the sentence here for this one say my name too so write out a sentence exactly in this format that talks about this and you could even take this a step further and say uh like what does this function do and you can say it prints out your name to the console or it logs out i'm just from the python world a lot of the a lot of my life and so you say print there a lot so it logs out your name to the console okay so that's it okay console.log quasi and so this is like what the function does okay so it does this is what it does and you could write for semi name two in the exact thing okay what it is and what does it do actually try to pause my video so you can write it in english what you think this does the lingo is important to understand okay so in chess you have to learn something called chest notation this is kind of like that but for coding so then we have a language that we can build upon and get better every single time so take about five to ten seconds i'll count down now or just pause the video five four three two one cool so here's what we're going to do here this is a function called okay the name of this function is say my name to it has one argument and if you want to be extra special and so you could say it has one argument called name and then what does it do it logs out your name to console so it's a good habit to get in in later in life this habit if you keep doing this right now will translate to you writing documentation for your code so one is gonna help you develop just a better skill and two it's gonna help you understand and develop the skill of documentation and reading and understanding the documentation which is gonna be really valuable when you get a job as a developer because you're gonna need to know these things and that makes you a lot more valuable that's what we did for greeting okay this is what we did for this greeting we introduced you to the concept of template literals and this is going to be very helpful for you especially when you're making a couple of games javascript games that we're going to show you later like for example rock paper scissors all right so let's go ahead and move forward now all right now we're going to create another function okay together so because i want you to constantly get a lot of practice with functions okay and this function is going to have multiple arguments so you can actually have more arguments than one okay so you can have one argument or two arguments um or 10 arguments or 20 however many you want but generally between one to five is like pretty you know reasonable and you don't really want to add more arguments just for the sake of it so let's go function and we're going to create a function called sum and i want you to try this out so it's like if i want to have a function sum and it will have two numbers that it'll take in as an input okay so it'll have two numbers that'll taken as an input a and b and what this function should do is return the sum of these two numbers so you'll also be introduced to the concept of the keyword called return okay there's a special keyword in javascript and generally with your functions you never you don't really want them to console log things you want them to return things so you can do something with them later so we're gonna start getting in the habit of return and then eventually you'll start seeing why returns are actually helpful and why they matter all right so let's have this return a and b the sum of them okay so we're gonna do return a plus b and i'll i'll show you why we're using the word return instead of something like console.log and let me do that with a simple example here so first let's just run this function so when i do sum and if i give it one and two it should take one and two so it should replace a with one b with two so it should do return one plus two that's effectively what happens so it should return can you guess three okay that's right so that's what it should return but watch what happens when i run this okay and let's um comment out this greeting because we don't need to run that anymore and let's run this function well nothing went to the console so it ran something happened but nothing ever went to the console interesting well it's not being shown so let's go ahead and show it so let's do console.log and run it and now you can see that it says three now watch what happens if i do num1 and i want to store this result somewhere so i want to do one comma two okay so i want to store the sum of one and two in a variable called num1 okay so let's delete this line now and let's run and it got stored and now we'll we'll log it out so the console.log and i'll say num1 okay let's run it and it got the sum three okay it stored three into this variable called num1 and then we console log it out and boom we see it right there now to prove my point if we hadn't done return a plus b instead imagine we just did console log a plus b watch what what's gonna happen let's run this and we get an error and this error says undefined so this prints out the console log right but when we run so this line goes and it goes 3 but then this over here says undefined because what's being stored in num1 is undefined we don't have a number like three that's actually being stored here we're console logging something and we're trying to store console.log here and you can't store that so that's why what you want to do here is return a plus b if you don't do a return then this function is essentially useless and it can't be used in other places and do actual helpful things okay so that's why what we need to do is actually change this to a return a plus b just like this okay now when we do num1 it actually does get used okay let's comment out both of these lines now and what we're going to do is we're going to go back all the way up to when we made that little baby tip calculator thing so i'm going to copy this entire thing and we're going to turn this into a function so i copied it okay from line 17 to line 24 and we're going to paste it here right there let's hit run so nothing should come out to the console so that's perfect that's exactly kind of where you should be right now now i'll go and uncomment this and um we won't be using these prompts anymore because that's kind of uh you know when you're using functions and prompts is like rarely ever used it's kind of an easy way to give a front end to the app you know just kind of for you to play around with but majority of the times you wouldn't really use prompt that much but first let's just focus on turning this into a function so we're going to say is going to be a function and we're gonna call it calculate uh tip and food amount something like that okay or let's just call it calculate total food total okay so this is gonna calculate the food total with the food amount plus however much the tip was okay we won't have the alert statement anymore so let's remove that and this function is dependent on two things how much you paid for the food and the second thing it's dependent on is how much you want to give as a tip so these two are going to be arguments that we're now going to pass and so i'm going to say food and tip percentage all right so basically here's what we're going to do right so tip whatever the user gives we're going to take that tip we're going to divide that by 100 okay so if the user says hits 20 then we're going to take that tip divided by 100 and turn it into an actual percentage which would be 0.2 and then we'll multiply this now we're going to do the same thing for food we're not gonna have this number prompting anymore okay we're gonna remove that we're gonna say whatever food is gonna be whatever food is here so in other words we actually don't even need food because the user is just passing that information down so food is going to be a given tip is going to be a given we're going to calculate the tip percentage based off of the given tip and then we're going to do the same thing so take the food multiply by the tip percentage that'll give us the tip amount and then the total will be the food plus the two amount and then we can console log it out if we want to and in this case since we're being adults now not a little children anymore we're going to do returns total let's go here and let's indent this so you can grab this and just hit tab and make sure that this function has a squiggly that opens it and a squiggly that closes it okay that's pretty important whenever you're writing functions so i'm just hitting back or you can just hit format at the top and they'll automatically format your code for you if you hit this and formatting just means it makes it look nice and pretty okay so i have calculate food total it takes in food and it takes in a tip so let's actually try this last console log and we'll call the function calculate food total and we'll say the food was 100 and the tip was let's say 20 let's go ahead and hit run now let's see what we get and we get back 120 so now you can start to see the power of functions that they can do a whole bunch of things very quickly and so you just call it in a very easy way give it two inputs and boom your function is up and running now let's take this a step even further so remember when we created a sum function c if you can replace this line 104 okay so you can leave the total here but see if we can replace this and this instead of using this plus sign here and see if you can use a sum function to calculate the total so i'll give you five seconds you can pause the video and try to do it yourself okay so let's go five four three two one all right let's give this a try so let's go here and instead of using a plus sign what i'm going to say is i'm going to say sum and we're going to give it food all right so it's going to be the food amount and then we're going to give it the tip amount so now we're using the function that we created ourselves earlier and then we're going to store the result of that in a variable called total and then we're going to return that total so let's go ahead and run this function and we should still get back 120. perfect very good let's change the price of this 300 let's try it again you can see that our our tip is 360 dollars now okay and it's working perfectly now i do have to show you the modern way of writing a function because you're gonna start seeing that in a lot of different places with javascript and so this is the es6 way and this is these are called arrow functions so um and also the variables let's let's uh change them okay so let's go ahead and do these variables in a way you know we you we're using the var let cons so i know that we didn't use it for a couple of these other things but that's again just so you can start understanding how all of this stuff works in an easy way but we're going to do const tip percentage all right we'll do const tip amount you could do cons or let either should be fine okay then we're gonna do const total three variables that we're declaring okay so constant let and you should you should be fine either way remember if you do something const that means you're not changing that variable later and if you do let that that's basically saying hey i know i'm making this variable that i know i'm going to change at a later point i'm going to change its definition there we go let's run this function again and let's just make sure that it works all right so now with arrow functions how they work is they kind of look like this okay so um i'll make we'll we'll make this function sum but we'll do it with an arrow function okay so let's do some i'm going to say const i'm going to say some arrow is equal to like that so it's equal to and then you put in the arguments all right so this is think of this like a variable and then you put the arguments here so here i'm going to say a comma b and then this arrow here so which is equal and greater than sign open close squigglies and then inside of there i'm just going to say return a plus b so that's how you can write an arrow function and basically write the same thing but an error function now here's the cool part about the error function okay because right now you're probably like wait what's the benefit of this why am i writing this uh when i can clearly write it this way and this looks like easier to kind of see and understand because it says function error functions can look really nice so here's what i mean by that they have a superpower called implicit returns where if you remove these squigglies you don't even have to write the keyword return it will automatically return that and so that sum function that you wrote can essentially be on the same line that's some function that you wrote so it's so nice and easy because your entire function just gets written out like this so you know it'll be like right i have a function called sum it takes in two arguments a and b and it returns their sum okay so this is an example of an implicit return so arrow function with implicit return okay that's an example of that and again i'll just call this function some arrow so it's clear for you and then this is arrow function with explicit return okay let's put it here important for implicit return remove squigglies okay so squigglies are these these curly braces or i can say curly braces all right there we go so that's important to do if you want to have implicit return where you don't want to say that return so let's try this some arrow function that we created and see if it works we'll do console.log and i'll say sum arrow and we'll give it 10 comma 40 50. and we should get back a 60. let's see if we get that back it says it's been declared because i'm defining it twice and remember i called it const so if i'm calling it a const here it's not going to let me redefine this function later with the same variable so i'll just call it some arrow 2 and call the function some arrow 2 here and we'll hit save command s or just hit run and boom you see the sum of these two numbers is indeed 60. so the sum function is working so it's a really nice way of creating your function so for bonus points and for being fancy i want you to always try to use the arrow function because that's the modern way of doing javascript and you'll see that in majority of the code basis so i'd rather you just get in the habit of doing that now to wrap this exercise up i'm going to leave you off with an exercise okay to wrap up really the sum functions and i want you to practice with functions now here's what i'm going to have you do so in files on the left hand side okay i want you to go inside of functions and go inside of something called sum and then there's going to be an exercise folder in here and a solution folder so don't go into the solution for this exercise yet make sure to go into the exercise if you're stuck and you can't make progress and you can't really you're stuck then and only then go in solution but don't go in there as the first thing and in this exercise i'll go and go to script.js okay in here you will see that you have these exercises like make a function called add which is the same as sum so you should have no problem making this function make a function called subtract make a function that divides two numbers and make a function that multiplies two numbers okay so all of these should take in two arguments sub add div and mul they should do what they say here and so we have some notes for you and what you got to do so the todo's are written out for you here and this is the normal way of doing it and for bonus points if you want to be fancy use the es6 syntax for error functions to maybe even convert these into error functions if you want to be a real boss and then at the bottom make sure you also console log all of these so meaning you print out the result of all of these okay or do some kind of call now where you're going to have difficulty is running this file so you're going to be like how do i run this file let me show you okay so over here we have something for you can exercises and if you want to see this in full screen you can always hit this button open in a new tab that'll open this entire thing in a new tab that way you can like guaranteed see it right just in case some certain things are hidden and what's cool about repple is your code is already deployed on the internet meaning like this is not just on your local computer you could run this anywhere like you could send this link to your buddy and they could just run this at their place right like because it's online this is online so they can run it and like look at your code and so if you made something you could be really proud of it and show it to them so we have this project solutions folder right so this is where the solutions will be but for functions here's the sum right so you click the sum now if you do console.log hello from the sum file okay or some exercise or whatever let's just say that here and i'll hit save if you click sum it will say hello from the sum exercise so meaning anything you console log here will show up just make sure if you want to run this file again you're going to have to click this sum link over here and that will run your exercise okay and also another thing i want to show you is this is just html css javascript so what's nice about this is you could just download this folder as zip okay and let's go ahead and open it so i'm going to go ahead and open this and go inside of here and you could click this index.html and just run it and it will run on your computer locally so just so you understand that this is real world right just because we're doing it on online website doesn't mean you can't use it in real life you could just download that folder and run it and now it's on your local computer so that's just to kind of show you that all your options and everything that you need is available at your disposal all right so but we're just coding here for the sake of simplicity and replica just makes everything really really easy okay so that's it go ahead now and do this exercise and once you return from doing this exercise we're going to move on to starting to talk about different types of data data types like arrays objects things of that nature okay so good luck have fun and go and crush this and i'll see you in a minute all right so now let's jump in and start talking about arrays and right before we do that let's go ahead and comment out every single line that is still running so line 108 for me i'm going to comment out and i'm also going to comment out line 121 and so when i hit run nothing should be coming out to my console perfect my console is looking crispy clean that's exactly what we want so let's go ahead and start working on arrays i'm going to go here i'm going to say arrays okay and why do you need a raise well what if you want to hold multiple different things how are you going to do that so if you have groceries right in a variable you could only have one grocery like a fruit but arrays allow you to have multiple things so for example i could have an array that has a banana it also has apple okay i can also have orange okay we can also have a pair all right i could have groceries like this and you could write the words too so this is just a string and i decided to put an emoji in it but you could decide to put like the actual word pair here if you want but i just think that this looks prettier right so that's why i'm having it like this now if i'm doing all right and remember to just put a const here okay so we're just going to say const groceries and here we go we have all of these you know we got a banana we got an apple we got all this awesome stuff in our groceries right now let's console log groceries okay and let's hit save and let's see what happens i'm going to move this here and boom you can actually see that it printed out all of the groceries okay now how do i get just a banana if we if i want right so if you click it it shows you the zeroth element is a banana the first is the apple the second is orange and the third is pear okay and remember everything in coding when you start counting it usually starts from zero so it goes zero one two three and the length of this is four okay because there are four items in here four grocery items now how can we get just a banana if we want just a banana how do we do that well here's what we do we go console.log groceries we put this bracket and we do zero okay and let me hit save and let's see boom we just got the banana okay well what if i want an apple what do i do can you take a guess i'll give you five seconds see if you could write that yourself five four three two one all right let's do it so you would have to put in a one here okay so boom let's do that let's do a one let's hit save and boom you see we got an apple now how would i get not the orange but the pair so how would i get the pair make sure to count correctly zero one two three right how would i get the pair what do i need to put in these brackets to get that pair i'll give you five seconds here five four three two one all right let's do it we would do three okay and you can see that we got the pair okay so again this is zero this is one this is two and this is three okay if we want to get the orange we would simply pop in a two here okay let's give that a try make sure you're coding along with me and you're just exercising with me okay make sure you're not just passively watching this make sure you're coding along with me every single step of the way that's how you're going to get better so this is called indexing okay this is like you grab one of the indexes okay so here i'm getting grabbing grab the second or like the third index in this case okay um or second index okay grab the second index that's basically what we're doing here or grab the second item if you want to say it in a more human language but in programming this is a zeroth index this is the first second third so if you ever hear like hey it's in the first index or the third index that just means where its position is in an array okay and arrays are really really cool and i'll show you a lot more about them soon all right so take a look at that right at the bottom you can see that and let me remove let me cons let me comment out this line here okay and let's run it again and i'll move this up over here it's easier to see but take a look at this right over here before we add the cookie and we console log this out notice that there's no cookie in here right but after we do the push and we console log it out watch what happens now we have a cookie that's added that wasn't there before so that's what push does push adds things on to the end of the array okay so try adding something else try adding a chocolate try adding uh a blueberry try adding something and see what happens and see if you could do it yourself okay so add something more here let's you give this a try so i'll give you five seconds five four three two one all right now let's try adding something together so i'm gonna say groceries dot push okay and we're gonna say i'm gonna do let's do blueberries okay and then i'll console.log here paste it here hit save and run and check it out we got we got one the regular uh groceries array then we got this with the cookie this time okay and then we push the blueberry and you can see there's a blueberry at the end there so that's how the push method works okay great so let's um comment out all of these for now all the console logs so if you run your code you should see basically nothing okay it should be empty just like this perfect now what we want to do is we want to try grabbing like what if i only wanted the banana okay what if i only wanted the banana and the apple okay those are the only two things or the orange and the pear and that's all i wanted okay well for this there is a method called slice okay so we're going to do that so we're going to says groceries and i'm going to say slice and i'm going to say 0 to 2 and let's see what happens okay and let's make sure we do console wrap this in console.log because otherwise it won't show it to the screen let's hit command enter or ctrl enter and boom look at that we're getting banana and apple so it's starting from zero including zero okay so basically what we're saying is start from zero inclusive and up to two okay but but not including two okay so basically it's giving you the the index this is giving you is either zero or one that's the index it's giving you so it's either giving you this or that okay so if you want to get the first two elements you can do it like this okay up to two if you want to get three elements you do this okay so if i run this it's gonna give me three elements if i do four and run it watch what happens it's gonna give me pretty much all of the elements right if i hit five it's gonna give me the cookie as well that that we added and if i do six it's going to give me all the way up until the blueberries that we've added because we still have the push grocer's not pushed there boom so you can see the blueberries so when i do zero to six it's gonna go from zero to actually the fifth index and give me up to that point cool all right now question for you what if i wanted not from zero but if i want it from right here the pair until the blueberry so what if i wanted this part of the array can you splice that and get that out of the array for me please take a few seconds take five seconds five four three two one and let's work on it together okay so i'm going to try and i'm going to do okay let's do up to six one two three four five okay like that this is just an example so let's do console.log and we're going to do groceries dot slice and i'm going to say so let's actually count together okay so we have 0 1 thank you baby appreciate it 2 3 okay so basically we're going to say give us from 3 2 4 5 and 6 but it's going to go up until five okay perfect so let's go ahead and do that so i'm gonna go zero sorry three two six and let's see if this gives us what we want so i'm going to hit run and boom it gives us from a pear to a blueberry let's try another example okay keep doing this with me don't get lazy on this keep trying this with me while i take a sip of my water that my girlfriend brought me but try getting me apple to a pair okay try getting me this right over here okay take a second um and see if you can get me those three right here okay so take about five seconds all right five four or take take a little bit longer while i sip this water okay so let's give that a try i'm gonna go ahead and do i'm gonna change this to a one because one will get me the apple and it'll be zero one two three and four one ahead of the one that we need okay and let's go four let's hit run and i get apple to appear exactly like i wanted right it was that that's what i wanted and that's what we got perfect very very good very good okay let's keep making progress now all right so now before we graduate from uh slice and if you notice that i changed my shirt i just had to do an interview because they were because my girlfriend is a wow superhero she's candy crush and um they're doing a documentary on her so i had to go do the interview and i had to change my shirt because i wanted something black and my previous shirt was yellow and nice and poppy and so i don't know why i'm telling you that but i thought you should know let's go back all right um so here groceries slice so this is good but before we graduate i'm going to teach you about two different array methods okay so there's a couple of array methods that i want you to know so we went over slice we went over push i want you to learn index of and i want you to learn uh length okay this is probably the most like one of the most common ones length uh so let's just go through it together real quick so now i'm going to say console.log and we'll do groceries okay and i'm gonna do index of and what index of does it it will give me the index of these fruits okay so let me just comment out these i comment these uh slices out here so i'm going to hit run let's just do let's just run that one so we can see all of our groceries or fruits perfect and so index of what it's going to do is if i ask for the index of orange it's going to literally give me what the index of that is so can you tell me what the index of the orange is for example banana is zero apple is one so orange is you guessed it too so let's see what it says all right so let's uncomment these lines and let's go here and we're going to pop in orange here okay we're going to say hey what's the index of this orange let's run it and i just gave back 2. all right let's ask it about the pair and let's run it and it gave back three because this is three okay so that's what index of does helpful to kind of know you won't be using it too often i mean honestly when i'm coding majority of the times i don't use it but i just thought since this is the array section i cover these methods because they're going to be helpful for you all right i'll comment this out for now so index of and then the other method you need to know is dot length okay so that one is going to be important so let's go ahead and do console.log groceries and can you guess what length is going to tell you dot length length starts from 1 and so it will take the overall length of this so however many items are in here is going to give you that back so let's count one two three four five six so length is going to give you back six all right let's give it a try and let's run it boom there we go see that six right there that's it that's that's what uh that's what length does okay perfect so now we can basically say you've graduated from arrays yay good job there's a bunch more to it but this is just over simplified you know what arrays can do you'll learn a lot more about arrays a lot better once we get to the loops because there's a lot of cool things you could do with arrays they're like my favorite thing in coding i think arrays are literally my favorite thing and next up we're gonna start learning about objects okay so let's go ahead and start learning about them now all right now let's talk about objects so here's the first thing we're gonna do we're gonna comment out line 144 and 135 so there's nothing being printed okay let's go ahead and hit run and look at that we have nothing coming out to the console log that's perfect all right now let's go ahead and let's talk about objects objects are really really important and they're really awesome so in just one second we're gonna work on right when i snap my fingers we're gonna work on a new object all right this is the object we're gonna be working on so as you can see here we have mr leonardo dicaprio he is our he's our object in this case and he has a couple of properties so his properties are he has a name so if you do person.name you know that should we need to set that to leonardo and then his shirt here will be white okay because if you can actually see his shirt is white back there so we need to create an object that actually represents that so let's go ahead and do that now so i'm going to put him over here kind of in the corner so you can see him now let's create an object to represent this so we're going to say cons person and object is created by doing these squigglies okay so these squigglies represent an object so so far right here we have created essentially an empty object now what we're going to do is we're going to add some properties to that person object okay so we're going to add a name so the name of this person in this case will be leonardo and shirt will be white this is an object if i format this you see this is how an object looks if you want to make it look a little bit like prettier and kind of how you know pros write prose would probably make it look like that okay kind of how it looks like here so open squiggly close quickly it doesn't matter if you have it on the same line or you don't okay so it doesn't really matter which way you have it both ways will work all right now this here pretty fairly represents what we have over here you have a person object the name is leonardo shirt is white now let's go ahead and console.log and access some of the properties of this object that we created so we're going to do person.name and when i console this you're gonna see that the person name and i'm gonna move this up here okay when i when i run this you can see that the person name is indeed leonardo kind of just like what we wanted right and the start and can you guess what person that shirt is going to give me when i type that in and when i hit run take a guess exactly you're going to get white okay just like we had expected here because those are the properties and that's how you access them so that's how objects work so first let's learn different ways of accessing this object okay dot notation versus bracket notation these both of these you should know okay so how do you access objects so you're right now you're using a dot notation now here's an example of a bracket notation let's do console.log and we're going to say person and we're going to do name like this and let's run it and boom you also get leonardo right over here well give it a try try doing the shirt but with the bracket notation try accessing it i'll give you five seconds five four three two one all right let's see if you got it so i just triple clicked to copy and then i did command c to copy and then i went down and command v to paste you could do ctrl c or ctrl v to copy and paste and then double click the name inside here change that to shirt hit command s or ctrl s if you're on windows to save and automatically run apparently it's not automatically running so let's run click the button here or command enter and boom you can see that the shirt is coming out white right so we got different ways access an object that's really good now there are different ways to assign things to an object as well so for example i could give him a phone number okay so i could actually do person.phone so notice we don't actually have phone in here and i could do phone and we could give him a number like that okay person not phone and then we're going to go ahead and do console.log and we'll say person. let's go ahead and try it let's see what happens and boom you can see that we actually get that phone number right there but also you can actually console log the entire person as well so you can see what that looks like so let's go console log person let's go ahead let's hit run and you can see you can see this object right over here name shirt phone so now this object has all of the things and it didn't have that before so it's kind of like how in arrays we were almost doing like push it's kind of like that but like it's just you're creating a new key on the fly and giving it a property another way you could actually create that property is by putting this in bracket notations as well because you could go like this bracket notation and say hey person phone is actually equal to this hit run and watch what happens boom you got the same thing and that also works so both work okay the reason why we're putting the phone number in quotes by the way as in we're making it a string is because if you didn't do that it would try to subtract it will do 1 minus 2 2 2 minus 3 3 3 minus 4 4 4 and evaluate to a big negative number that's not what we want right so put that in quotes because we want the exact phone number and phone numbers or strings all right so now let's say you want to create another person okay so i'll give you an exercise for you to do and let's go ahead and do this right now so i'm going to give you a different person with different name and different shirt and i'm going to need you to create an object a person object that represents that okay so you can call that object person2 alright so let's go ahead and do that here you're going to call this object person2 all right so now instead of leonardo dicaprio you're going to get somebody better yours truly and you have the object right over here okay so this is the object that you have and these are the properties that this object have okay so try to see if you can make this object by yourself either pause my video or take a couple of seconds right now to do this but i'm gonna start doing this in five four three two one okay let's do it so i'm going to basically there's a cons person two and i'm going to say name is causey right and make sure to put a comma so after every property right so let's go through an object so we have squiggly bass squigglies in the start and closing okay instead of brackets object uh arrays have brackets and then you have a key and a value all right so objects are key value pairs all right so you have a key here and a value here a key here and a value here okay so a key you can also sometimes call it a property okay so here the key is name and the key is shirt okay and name and shirt is also the property so you could say kind of both ways so you put in the key right person name and you get back the value which is actually the name right you do the same thing here with the phone so you take your object you put in the key right and then that key unlocks and we set this value for that key again we do person.phone so we did the object and the key and then the key gives us the value all right kind of think of it like opening a lock all right so name here so this is the first key value the second key value we're gonna set is shirt is black okay and uh that's it that's the way you represent this object right so if we do console log person2 and run it boom you can actually see that it's showing you quasi uh and shirt is black okay that's super cool and uh if i change this to you know what if i want quasi's name what if i only want the name can you try that for me if i only want the name boom hopefully you got this correct okay let's run it and now we're getting the name well what if i want the shirt as well same idea right if i run this we're gonna also now get the shirt so shirt color and we got it as black let's turn this into a function that then says hi my name is kazee and my shirt is black okay so let's go ahead and create a function okay so remember how we create functions right there are different ways you could do function or you could do the fancy way like this we'll call this function introducer because it introduces you to other people okay and this is going to take in let's say we can give it a shirt and uh it will also take in a name so let's go name and shirt okay and if we want to turn this whole thing into oh sorry whoops and we're going to do if you want to do error functions this is how we're going to do them okay so we're going to go ahead and say name comma shirt and we're going to do arrows like this i'm going to go here all right now the final sentence that we're going to return right is going to basically be remember template literals all right so let's use the template literals again and we're gonna say hi my name is name okay and we're just gonna say name like this for now my name is name and the color of my shirt is whatever the color of your shirt is okay so in this case it should be like black so here let's say if we had it hardcoded it would be like this but we don't want it hardco um we don't want it hardcoded right so we're gonna do here is name we're going to make it dynamic we're going to send name and remember and see if you can make this shirt dynamic as well boom we're going to say sure and we're going to save this into a variable called intro the const intro is equal to that but we're going to make an object first so just so you can keep practicing an object okay so we're basically going to say we're going to create a cons person object and this object is going to have a key name and the value of that key is also going to be named because that's what we're passing it i'm just going to say name right here and it's also going to have a shirt and that's just going to be the shirt that we pass it okay so these are values that we're giving it these are the actual keys that are hard coded okay so these will stay the same these will be exactly name and exactly shirt and this part will be dynamic these are the values that we give it and so then we're gonna in order to get this person's name remember what we have to do right it's person dot name perfect and now how are we gonna get this shirt we're gonna do person dot what person dot shirt perfect good job if you kept up with that okay so we're creating an object right here and we're creating the intro and now we're just gonna say return the intro all right that's our function and let's give it a try so let's go console.log let's call our function introducer and let's give it a name qazi and let's give it a shirt color and we'll say black and let's run this and look at that right we're getting hi my name is kazi and the color of my shirt is black beautiful so we're using template little i mean this is advanced this is awesome if you're doing this good job for doing this this is using this is a es6 error function right this function has two arguments and you created an object in here and then you're using template literals so there are a lot of concepts in here that you're doing so great job on following along and doing this with me even if you didn't get it it's good that you're you know you just followed along and like did it and hopefully you got it working on your computer like that's what's really important so here i have this and if i if i show you right hi my name is kazi and the color of my shirt is black now let's go ahead and comment out all the other stuff that we had here right so i'm going to comment this out um you can leave this or comment it out i'll just comment it out you can comment out pretty much all of this okay and i'll comment out this person right here too and we'll just hit run and it should just say hi my name is kazi and the color of my shirt is black okay so the only console log that should be happening is the one coming from this function this function is super cool because this function is like creating an object and then doing the template literals accessing data from that object very nice okay this is a very very nice wellwritten function so good job if you got here so far now try see if you can now do this call the same function but see if you can call it on leonardo and with the shirt being white so give that a try i'll give you five seconds five four three two one all right let's do it together so i'm gonna say console.log we're gonna say introducer and we're gonna see leonardo here right and the shirt color is gonna be white these arguments have to match right so this matches that and then this matches that okay so these arguments the order here matters okay and uh let's run this and let's see if it does the leonardo one as well and it does hi my name is leonardo and the color of my shirt is shirt okay so we probably gotta say white here hi my name is leonardo and the color of my shirt is white beautiful this is doing exactly what we want we're going to go ahead and comment this out and so far you're doing absolutely fantastic all right now let's take this even a step further let's say that we want to have this person but we also want to calculate and have their net worth okay so i'm going to go ahead and refresh this page and let's just uncomment the quasi in black here perfect my name is kazi and the color my shirt is black blah blah perfect we want to say this person has certain assets okay so assets they have is like let's say a hundred thousand dollars all right and the debt they have is fifty thousand dollars so if you wanted to calculate the net worth is really easy just assets minus debt or assets minus you know you could say let's say liability all right so it's how much basically money do you have and then how much debt do you have it's very simple for an average person if you want to calculate your net worth you could do that right now like it's very easy you could have a negative net worth or a zero net worth and if you have a positive net worth that's incredible so here you would have a net worth of fifty thousand right hundred thousand minus fifty thousand we could do that right and so we could say and my net worth is and i could do this and i could basically say a person.assets minus person dot liability like abilities and paste that there okay so let's run this and let's see what we get hi my name is kazi and the color of my shirt is black and my net worth is fifty thousand dollars we could put a dollar sign here right and we could say we could say we you you don't need to say usd but you could if you want and says my name is blah blah my net worth is 50 000 usd so this dollar sign is uh pretty much to actually put a dollar sign and then the next dollar sign and squigglies are to basically say hey i'm writing javascript so let's make this even nicer i'm going to teach you how to create methods inside of an object okay and anytime you've seen dot met something that's usually a method okay when you're calling it so like math.floor remember when you saw math.floor this is a method if you didn't have this math part here and it was just like this this would be a function and if this open closed parenthesis weren't here this would be a property so i know it can be confusing but here's a great example all right you have an object right here properties are just with dot to car.name card.model those are all properties right but methods are car.start with the open close print card.drive open close print car.break open close paren so methods look like this all right so just kind of take a mental screenshot of this for now all right so here's what we're going to do here's a really cool thing in kind of advanced things you could do with objects so i can actually create a net worth field and what this will do is what i essentially want to do is want to say hey assets minus liabilities but if i do this i'm going to run into a problem okay so let's try that so let's remove all of this and let's paste just netperson.net worth and let's see what happens if we run this and it says assets that's not defined and and you're probably thinking wait assets is defined right here so why isn't it just using assets this is that's not how it works so in when you're defining an object because all of this is happening at the same exact time this isn't like created yet and so it doesn't know so what you want to be able to do is you want to be able to say person dot assets but it also won't really know that so here's a hack here's a way that we do this okay so we're going to create a function and yes you can actually store functions inside of objects which is kind of crazy open close paren all right we're just going to do this this is going to be your net worth function and what it's going to do is it's going to return and we're going to say this dot assets minus this dot liabilities this thing is kind of weird but what this is referring to is this specific person object that you've created so it's literally like imagine plugging in person.assets and person.liabilities okay but you're going to use this this whole thing here is going to become 100 000. and this entire thing is going to evaluate to 50 000 and then this thing is going to evaluate to 50 000 like this and then once you return this it's going to pop up in your console so let's go back boom this assets sold liabilities and net worth is a method so even though we've defined as a function it is a method and i'll show you why because now in order to call it if you do person.net worth watch what's gonna happen it's not gonna work let's run it and we just got hi my name is kazi and the color of my shirt is black and my net worth is function return assets so just like just like spit out this entire function that's not what we want we want the actual result so we need to call this method and this is how you call it okay boom you call it just like a function but because it has a dot here it's called a method so the person has a net worth method now let's run it and watch what happens boom right my name is causing the color of my shirt is black and my net worth is 50 000 and now to make this code even more dynamic assets and liabilities should be passed by the user okay so that could be like another thing that that might be nice right now it's hard coded but that's okay we can just kind of leave it as is just to kind of show you that you could do some more advanced stuff with objects all right so let's run this okay and if you change the name it'll also work change the assets liabilities you'll get different numbers all right so if you got this far great job uh we're gonna hit run on this to just make sure we we're gucci but if you got this far you're almost an object master so good job okay you probably don't know like everything there is to know about objects okay but like you know more than 98 of the population so you should be proud of yourself give yourself a pat on the back right about now go ahead and do that for me and and you're beautiful and you matter and i'm happy that you're here so thank you warms my heart all right with that said let's continue all right now we're going to be doing my favorite part without this part you pretty much don't have programming so this concept that you're going to learn right now is going to put everything together and it's going to make everything do you do so useful and it's not just going to be like why can't i just do this in excel why can't i just blah blah this is the most important thing let's get into it and this is called for loops loops are the heart blood and soul of computer programming and i'm just so excited that you get to learn it right here with me so if you're enjoying this so far smash that like button so this video goes out to more people helps more people become developer and it's free so do it right now and let's keep on rocking and rolling so we're going to use loops okay and let's go ahead and grab our array that we made earlier with groceries okay so i'm gonna just go ahead and copy it so let's go boom grab this const groceries okay i've defined it above so what i'm gonna do is i'm just gonna comment all of this out because if i've defined a const above i can't redefine it below so i'm gonna make sure it's commented out and then i'm gonna come down here and i'm gonna pay his groceries okay and let's call it fruits cause let's be let's be real that's what it is right so now i have fruits well what i wanna do is i wanna like print out every single one of them so how do i do that well here's a way you could do it right console log we'll do fruits of zero and then we'll just keep repeating that pattern right one two three and then what will happen essentially is this will get you this one one will get you that one two will get you that one three will get you that one right hopefully that makes sense so far so let's go ahead and run this and you get all four of these right that's perfect but what if there were like many many more like so if i just copy this and i just keep let's say i copy this and i just keep pasting it right well that's a lot how are you going to like print out all of those it's going to be a lot of work are you really going to do this right and then what if they're more than that because netflix has a what you know let's go to netflix right now so here's an example of an array this right here is an array all right that's how you see these five profiles one two three four five that's an array when i go inside of this everything that's showing up here is an array so here's an array of new releases here's the array of true crime documentaries here's an array of trending now these are just arrays all right so if i have this many movies i can't just like do them manually i need something that can automatically find out how many movies there are and then like print them out okay or show them so that's an example of you know why you need to learn something called looping okay or for loops so let's go ahead and do that now all right so here's how we're going to write our for loop we're going to say 4 and we're going to say let i equal 0 and then put a semicolon and we're going to say while i is less than and i know this is going to look super weird but just trust me hang in there with me okay fruit's not length and we're going to do i plus plus like everything here you're going to be like what the hell am i looking at and we're going to break it down in a second but first let's just run it and see if we can get it to do what we want it to do and i'm going to say fruits and get me the get me the iath fruit okay let's run it and let's actually console log this console log and let's comment out all of these four lines right here okay let's run this and you see it it printed out every single fruit that we had right all of these fruits every single one of them and how i can prove that too that i print every single one out what we could do is like put i there and then do this and i'll actually even count it for you so this is zeroth one first second third fourth fifth sixth all the way up to nineteenth okay so there's like 20 total items in this array so this loop is doing that this for loop right here it's looping through automatically auto magically figuring this out but let's break it down what is happening really so we're saying this loop we want an index why do we want an index well imagine if i instead of i imagine i put a zero here well it's gonna run but it's just gonna keep on getting the banana every single time but that's not what we want so what needs to happen is we're essentially trying to mimic this process we want fruits to be zero the first time fruits to be one the next time fruits to be two the third time fruits to be uh this the fourth time right so this is what what we're doing here so the start i is set to zero and all a loop does is it just repeats the same line of code again and again and again and again and again fruits.length all i'm saying here is hey run the same amount of times there are items in this array so meaning in other words we want you to run 20 times so while i is less than 20. so run 20 times that's what this means right here okay and as soon as it runs 20 times and it tries to run the 21st time it just stops and it doesn't run again and i plus plus means every single time you're done running just increment i by one so first time it runs i is zero okay so we put a zero here and there's a zero here and you will get your first item which is gonna be this item right here then it's going to run again and here's what's going to happen i is going to become 1 next time the loop is going to run let's start from the scratch right so it goes 0 less than 20 is that true or false i'm asking you that's true 0 is less than 20. so then this line of this line of code here runs and it prints this out pops it right there perfect then once we're done running it increments i by one so now i is one is 1 less than 20 yes or no yes it is okay 1 is less than 20. so then it runs but next time because there is an i here fruits becomes 1 because it's dynamic like that so then it gets you this guy right over here then it runs again and it does the same thing too so it goes to 2 less than 20 goes yes pops in a 2 gets you the orange because that's in position 2 right here then it increments i by one i becomes three is three less than twenty is that true or false yes it's true and it prints out fruit of three so then you get this pair then it goes again and increments this by one so this becomes what 4 good and then it prints it out all right i'm going to ask you this time what is i now if you guess 5 good job because after running this we increment i by 1 so i is 5 now it's 5 less than 20 okay this is 5 and this is 20 and this thing then becomes true and then once this becomes true this part of the loop runs all right so is this less than 20 yes it is then this becomes 5 and then this prints this out so on and so forth so this is why we just leave a i here okay so that's how loops work they're really awesome real really nice and uh they make our life easy now now now now now here's something exciting i'm going to show you you pretty much never ever ever have to use this ugly looking loop ever again this is really the only time you're going to be confused thanks to the new javascript ways of doing it and i'll show you them and after that pretty much never write this ugly loop i never write it i don't deal with these weird indexes and honestly i even forgot how to write this ugly looking loop should be eradicated from most of what you're doing in your daytoday i'll show you a much easier way of writing all right so now let's go ahead and comment out this entire for loop that we wrote and instead what we're going to write is we're going to say 4 and watch this we're gonna set kant's fruit of fruits okay and we're just gonna say console log fruit and watch what happens i'm gonna run this and it does the exact same thing and you do not have to worry about indices at all so this is so nice so here's how this is working fruits this variable here fruits is important this is this right here this is the fruits array this variable here right here fruit i'm making it up on the fly i could call it whatever i want i can call it john but i just got to make sure that i put john here and john here and boom we run it the only point of this variable right here is fruits in this case will be the name of you know it refers to this which is this entire array right here this entire array right here okay that's what fruit says but fruit when you're looping the first time it's this banana and when you're looping the second time it's this apple and when you loop again is this orange and when you loop again it's this so you don't have to even worry about indices this is the fruit and then in the next loop this is the fruit and then in the next loop right this is the fruit this is the first loop and the second loop and the third loop the fourth loop and then you just print that out so like i don't know if you if you look at these two side by side right this looks like an eyesore and hurts your eyes and you will get eye aids by looking at this and then you have this one just this is beautiful this is pure gold i mean this is how this has meant to be right this is how it should things should look and feel this is very pythonic python you write loops like this this is really really nice so we like this one much more than this one okay so stick with this one and then i'll show you a couple of other things you can do as well all right so now let's do something else with arrays okay so we're going to say const numbers and we're going to create a array and it's going to keep our number so one two three four five six well what if we want to um so we'll do a couple of things right i'll show you how to sum up all numbers in an array because that will be something helpful for you and important for you to learn but we want to do now try this write both of these loops for this numbers and print out every single number how we're printing out our fruits okay and comment out everything related to the fruit okay so hit run and you should see empty and loop through so then all the numbers get printed out from one through six try that i'll give you five seconds five four three two one all right let's write it together so we're gonna say 4 let i equal 0 okay i is less than numbers dot length all right you kind of get used to writing this for loop once you write it a couple of times but again we're not even going to be using this one that much anymore so get ready to say goodbye to this one all right let's run this and let's see if it works boom one two three four five six so this one worked exactly how we expected it to fantastic okay let's go ahead and let's comment this out let's comment this out and now we're going to say we're going to write the other loop so we're going to say 4 const number of numbers and we're simply going to just say console log number and let's hit run and boom one two three four five six don't make the mistake of printing out numbers because what you're doing here you're just going to print out the array five five times you don't want to do that let's just say number boom there we go so that should that printed out everything hopefully you got this correct and if you didn't it's okay don't stress we'll have some additional exercises here in our files for you to do with arrays okay because arrays are very very important so we got this six now what if we wanted to double every single number right over okay so let's go ahead and try that how can we do that how can we print out 2 for this 4 for this 6 for this 8 for this 10 for this and 12 for this okay how do we do that so what we want to do here is you actually you could actually do it right here give that a try see if you could figure that out you have enough tools to be able to figure this one out right now and i will tell you this you don't even have to write an additional line of code that's the hint i'll give you you can fit that in on line 221 and basically have the answer to this problem so either take five seconds to do it or pause the video i'll give you five seconds now five four three two one all right so we're gonna go number times 2. that's it let's run and now we get 2 4 6 8 10 12. everything is doubled you guys that's awesome but what if we wanted to do it so that this numbers are right here is doubled so or like we get a new array that's like all of these numbers doubled how could we do that double numbers how could we double the numbers and basically at the end get back an array that says 2 4 6 8 10 12. how could we put this in and get this out so let's give that a try all right so here's what we're gonna do we're gonna pretty much have this same loop that we have here but we're gonna need to create an array that like stores that results right we're going to say let result is equal to and we'll just make it an array like this all right so we're just going to have this empty array it's going to be empty at the start and the trick that we're going to use is remember we did push so again you have enough to figure this out if you want to try but inside of this for loop you're gonna push to this results array double this amount so see if you could figure that out and then console.log result and get that by yourself you have enough to figure out it might be a little bit challenging though right now i'll give you five seconds you can pause the video five four three two one and now we're gonna solve it together so all we wanna do here is i'm gonna do result dot push number times two all right so i'm gonna loop through and then push so then i'm gonna have two then i'm gonna loop again and number is going to be two and we're gonna come down here 2 times 2 is going to become 4 right so we're going to result that pushed off 4 that's going to add a 4 right here and then we're just going to keep looping through this array and just keep doubling it every single time and then pushing the double result in here in that result array okay so let's remove that and then once that entire loop is done so make sure to put the console log of result outside of this for loop okay because we don't want that repeating again and again let's comment that line out or we can actually just even delete it here we don't need that anymore let's try running and watch what happens boom we have an array with 2 4 6 8 10 12. so that array doubles all of the numbers so this is an example of how you could do something like this all right now what we would want to do is turn it into a function okay so we're going to basically go const double okay we're going to call this function double and uh this function is gonna you can you could call it you could either call it function or you could use this arrow syntax to highlight that this is a function right it's the es6 function and what we're gonna do is what this function does is takes in numbers and we'll have the same loop so we'll say const number of numbers grab this result right here we're going to paste that in so it's going to create a temporary recall result it's going to loop through the numbers that you gave it it's going to keep pushing double of that result into result array and then at the end we're just going to return result just like that all right and we can get rid of all of this right here and let's try running double so let's do console.log we'll say double and let's give an array to double so one two three four five six and let's run this and let's see what it outputs two four six eight ten twelve that is perfect you guys that's exactly right that's exactly what we were looking for so that is beautiful nice job if you got this far question for you what if we wanted to turn this function into the square function meaning we square all these numbers how could we do that so think about that squaring means using exponentiation instead of multiplication okay so how could we turn this function into something that squares numbers so meaning 1 squared would be 1 2 squared would be 4 3 squared would be 9 4 squared would be 16 5 square would be 25 6 squared would be 36 right so how do we get that array back well it's simple just put another asterisk right here hit run and there you go it's all perfectly squared so let's go back boom i'm gonna just turn back into a double all right so that's how easy that is now imagine if the size of this array changes 7 8 9 20 40 and watch right when i run it boom it just works instantly right this is the crazy part about like when you write good code and i'm just gonna like fill it up with crazy numbers here right i'm gonna make this really really big you're getting a big data file in excel or something and watch it just it just works on the whole thing insane right and it says 177 more items this is the beautiful thing about code so when again when you go look at netflix right so let's go let's go to netflix again and let's take a look at this this is an array and what we're doing to that array every single time so like we have some data in that array and we style that data every single time we loop through so we we write a for loop and we loop through and we say take this data the billion dollar code text the image url that's how you're seeing the image and turn it into this card and then do that again with the next movie so almost imagine that there's a loop for right or const movie of movies and what you do here and we close the squiggly right there and we say you know return movie and let's call this function card and let's just say this function card turns it into this nice neat card okay we don't let's say we don't know the details of this function but what this card function does is if you give it a data of a movie like the name of the movie and the image of the movie it turns it into this nice little card over here then you loop again and then you do it again you loop again you do it again you loop again you do it again you loop again you do it again i mean god damn i should be called freaking senior loopy because that there's a ton of loops there that's the crazy part you guys this is real world stuff okay it's not just like me telling you random stuff it has a very real application even though we're doing like beginner exercises right now just so you could get better at it because if you don't know how arrays work then if i give you something more complicated with like cards and images in html and css you're going to be so confused so you have to learn these by themselves like a martial art you got to learn the rear naked choke by itself and you got to learn the kimura by itself and then you got to learn the positions and then you learn these esoteric positions in jiu jitsu and you're like what the heck is the point of this and then one day you just it to hit that triangle you like rotate your hip you angle your leg the right way you grab the neck the right way you twist the right way you pop your right leg and you pop the left leg and you get that triangle just boom everything and it all happens at once and it's so smooth and it's beautiful but when you're learning it you learn it like step by step and same thing with chess or anything else in life soccer so we're just learning the components and the pieces by themselves and then later you'll be able to put them together with more impressive stuff okay when we get to the project portion all right now let's keep having more fun with the arrays because the more practice you get with arrays and loops the better of a programmer you're going to become because honestly that's like 90 of what you're doing in programming you're usually getting max a lot of data and you're looping through it and you're doing something to it okay that's like super common and so let's just get a bunch of different practices in all right so we're going to go ahead and make another function and this function we're going to make is going to be called letter counter okay so let's go letter counter you can also call it counter whatever you want and we're going to use it making an error function all right and basically what this function is going to do is it's going to take a look and see how many letters are in a given phrase okay so if i gave it a phrase let's say khan's phrase is equal to uh hey can you go to grocery store okay whatever all right this will go through this whole thing and it will basically just just count how many letters there are okay let's call it how many letters and so you're just gonna go through and this is gonna be a one there's gonna be a two this is gonna be a three a four a five for the empty space six seven eight nine so you can do this you can count an empty space as a letter that's totally fine so think about how you're gonna write a function like this right think about what are you gonna need to do well you're gonna need to loop through this and the cool part is you can actually loop through these types of phrases you can loop through strings as well first let's comment out um anything we kind of have up here okay perfect and now in here i'm going to go ahead and i'm going to say let's let's write a loop okay i'm going to say 4 letter in phrase and let's see if this works and let's do console log and we'll say letter okay and let's hit run and let's see what happens okay it's running okay so what we need to do in order to make sure that this actually runs is we need to call this function that we just made right so let's go right here and i'm going to say console.log and we're going to say how many letters okay and let's just call that function and there we go okay one two three four five and then it ends with um undefined okay all good so this keeps looping through and then it just prints out the letter that's what we're looking for right and we actually don't even need to call console.log here because we're printing out from the function so let's try running this and now you see there's no undefined right and we we go from 0 to 40. but it needs to start from a one and if you think you're getting this or you know how to kind of solve this or if you even want to try i highly recommend you just pause my video right here and actually give this a try okay go ahead and try to like do this on your own and then you can come back to this but i want you to get a ton of practice with this stuff because that's how you're going to get better not just by watching me but by doing it with me that's how you're going to get better so if we want to count the the letters in here right or this this how many are in there we can't start counting from zero okay so what i'm going to do is we can just make it where if i'm getting uh a letter here right oh and if you were a little bit confused like wait how are we when we run this how are we getting the numbers with this four loop right so you can also say four cons letter and if you change this to of because remember i taught you like i taught you four of loops earlier so if you do letter of phrase you're actually gonna and you run this you're gonna get letters the actual letters all right if you run um letter in phrase it's gonna get you the index at each one of those right so if you want to get 41 well what we want to do is uh just do letter plus one okay so this will just increase it by one whatever it is and if and for whatever reason this letter thinks it's a string so it was doing that weird thing where it's attaching you know zero plus one is zero one and one plus one is one one it's attaching itself so it thinks letter is a string so just type cast it into a number so force it to be a number and then you get this okay so this is like one very silly way of doing this and you get oh i get 41 at the end so that's it that's how i'm getting my this is how i'm counting my letters but there are better ways i'm going to show you in just a second all right so now let's talk about better ways of doing this yeah so what we want to do is we want to have we want to set a variable here that let's say is so we're going to say let uh result equals zero okay let's go here and we're gonna go we're basically gonna say result is equal to number and we're going to call index and we're going to say plus 1. because all we're doing here is the loop already allows us to get up up to 41 right so we know that this is the correct answer all we want to do is store that correct 41 in result and then at the end of this loop we want to just return that result at the end that's all we're looking to do okay so because okay so i'll give you an example okay let's just do result is index and here let's just return result let's remove this line well we can keep that line so you can just see how the loop looks and we're gonna run this function but wrap it in console.log all right actually we can do a trick here to make this look really nice so here we have return result right in order to make it we want to make it look like this result is 40. so there's a nice trick we can do in our return and we can basically say we can return it as an object so when you print it out the object is going to look really nice like this right um and then there's a even nicer shortcut where if you just add in one thing and wrap it up in an object it's going to automatically set this as the key and use this as a variable for value so it's going to set the word result as the key and use the value 44 from this so it's a super cool little hack and you can use this pretty often so let's run this and boom you can see that result in this case is 40. so now you can see that result is returning pretty much the last value in this entire thing that we get right when we print out our uh indices so these are this is you know this is like basically saying this is zero this is one this is two but we just wanna start it off with the one so um let's go ahead and all we need to do here to index is we just need to add a 1 to it and also remember we need to wrap the index in a string just like this oh sorry not in a string i'm sorry wrap index in a number because it is a string okay so we need to typecast it let's run this and boom you get result is 41. right so now phrase we can change the phrase right and again how many letters is a function that takes in the phrase so let's make this let's extract this argument out now and instead we'll put phrase over here and we'll pass it in the phrase okay so the function itself shouldn't have to worry about the phrase it should just wait for what the user is going to give it as a phrase and it says result is 41. now imagine i change this and i go prompt the user for you know write your phrase okay and now let's run this and now this popup happened at the top so i'm going to write my phrase i am wearing a nice green shirt right so when we do that uh let's go ahead and run this and i hit okay and let's see what happens here let's hit okay and right when i hit okay boom we got 31. all right so that that phrase has 31 characters now here's something sad i'm gonna tell you you can actually replace there is a method for strings that allows you to calculate the total of uh you know see the length of a string and that is just dot length okay so for example if i well we don't open up a shell let's just stay here so say i have a string here okay let's zoom in so you can see that better all right so say i have a string here that is banana if i just call dot length on this and run this you notice it'll give me a six okay and uh let's call let's say banana wants to know your slogan dot length it'll give me back 32 so a dot length is a property um on anything that's of type string you can call anything that's a string you can call dot length on it okay and that returns the final answer so let me zoom out here which means which means i could actually remove my entire code right and basically just say the result is phrase dot length change this whole thing with one line of code hit run write your phrase it's going to say something crazy and let's see if it can calculate it fast and it did and it goes result is 107 okay but let's write it in our way because remember that's the way you learn how to do it and right now it's important for you to manually learn to do these things because i want you to develop and focus on your skill set then once you get better normally what you would do is you know a javascript string um length you will just like google this okay and see if that exists and you'll google this and you'll go somewhere and it will say that let's see w3schools is usually a really good resource and it's just showing you text make a text let it equal to hello world let length be text.length and it also allows you to try it yourself so you can always click that and you could hit run right and boom it says 12 here and what if i change this to something random and let's hit run and you can see it says 38 right over there yeah so uh this is how you would normally do it in real life you just google these things you have to memorize anything okay but right now i'm just kind of getting used to having you get used to exercises do them yourself okay now let's build it up and take it up a notch okay so let's let's make a function that sums things okay that's also going to require loops and arrays so i'm going to go ahead and we're gonna comment this out and we're gonna comment this out so we're gonna go const uh sum array it's gonna take in some numbers and we're going to have a result we're going to say let result equal zero okay and then we're going to have some kind of for loop action going on here and then we're gonna return the result and let's just do this trick like that we did last time and something is going to go in the for loop okay something is going to go inside of the for loop oh sorry we forgot to put the arrow functions not bad arrows there we go and what's going to go inside of this for loop is basically going to be imagine this right imagine how we would do this manually so say we have these numbers or let's say we have these numbers okay this we know that this should if we ever have 1 2 3 4 we know that this should equal to 10. now how are we going to actually sum this up in normal life what would our pattern be well i probably have some variable let's just call it result and i would set it to zero in the start or i might set it to whatever this number is right over here okay so you could you could do either or but let's just start it with being a zero okay so it starts off being a zero then what we do is we loop through and we make the result becomes one then we loop through again and we do one plus two and then result becomes two sorry three then we loop through again and we already have this 3 here so we add 3 to this 3 right here so we add this to that and we get result is equal to 6 and then we add 4 to that and we get 10. so that's how we would do it kind of as a human being if we were to do it like manually and do it with each step and that's how we're going to do it with our computer we're just going to have it loop through and keep adding these numbers so let's go ahead and now write that loop so again try to give this a try and see if you can do this yourself okay because what you've learned so far you should be able to come very close to solving this so take five seconds to do it and also pause your pause my video in these five seconds to try it yourself so five four three two one all right let's get back to it so here we go i'm gonna say for const number of numbers all right and let's just call console log number and uh let's call our function console sum array okay and let's give it an array so we're going to have we're going to give it this array of no it's going to be called nums okay let's remove let's comment out all of this because we don't need that and let's pass our summary nums and let's just run this okay so we get back one two three four because it's looping through and printing number out each time so if i give it an array of one two three four it goes okay number is one the first time print it out number is two the second time print it out numbers three the third time print it out so on and so forth all right so it's printing this out result is still saying zero so now what we need to do is we need to increment our result so let's go ahead and do that now okay so again try to give this a try and now we're gonna do this so all i'm gonna say is i'm gonna say result and i'm gonna say result plus and we're going to do whatever is the new number that i'm getting okay and let's just see if this works and i'm going to hit run and it says result is 10. interesting did that really work well let's try it with and let's add 5 to this array and let's see if that works and i'm going to hit run and we should get 15 and boom result is 15. beautiful okay so let's see um how this is happening what is going on all right so let's do something to visualize this code and see exactly how this works i'm going to copy this let's go over to pythontutor.com all right and then hit enter once you're in pythontutor.com you're going to go to related services where it says javascript tutor okay and click that this website is awesome so paste your code and uh just for simplicity sake i'm gonna remove any console log because we don't really need that it's gonna help us visualize so there's gonna be no need for that and we don't need any comments either it's unnecessary for you to remove it but i'm just gonna remove that for simple simplicity sake then hit this big button here that says visualize execution so let's click it okay perfect all right now on the left hand side is going to be our code on the right hand side is going to be visualizing exactly how this code is running very important to notice also this red arrow means the next line to execute so which is the next line of code is going to execute okay so it's already telling us that this is going to be when i hit run or when i hit next to step through this this is the line of code that the computer is going to run and we're just going to go through step by step and see exactly which line runs exactly when and green arrow will mean the line that was just previously executed cool so this is our function let's walk through this all right so let's go ahead and hit next okay so now it sees we have a function called summary and boom it's like okay i got you there it is there it is i see it let's hit next again now it's on const const nums as you can see right here right so this is a line that's about to execute next so let's hit next and it goes okay i see that there is a variable called nums and it's inside of this array okay or it's this array right here it refers to this array and this is a global frame because this is uh these are all variables that are outside of this function so these are accessible from anywhere and from everywhere okay and we'll talk more about scope in the upcoming videos now next line is going to execute is it's going to call this function summary with the argument nums okay and then our entire function is going to start running so let's hit next cool so now we're inside of our function and the first line of our function is just about to run so the first line is going to be what result is cool so let's uh right now result is undefined okay but once this line runs here result is going to have a value so let's hit next and boom result is now set to zero now okay so this green is just showing you the last line that ran now the red is showing you that we're about to start running our for loop and we're just gonna be teetertottering in between this line the for loop line line four and line five and line four and line five and line four and line five until the entire loop is done then we're gonna go to this line here and return the result at the end okay which and again remember uh you know we're gonna touch base on scope but if you put this if you put things in the wrong scope wrong things will happen for example if you put this result inside of this these squigglies here right this is just going to keep returning every single result but that's not what we want we want to return the results after this entire for loop is done right and then we want to return this result okay so let's run through this and see what happens okay so right now it doesn't know what number is either okay but it does know it results as zero and it also knows that numbers refers to this array right here okay let's hit next okay boom boom boom all right there we go and now it says number is one perfect that's exactly what we wanted right number is one because the first time we're going through the array right it's a one that's what that's where the number is coming from now let's see what it's going to do the result so watch what's going to happen it's going to do result is going to be 1 this time so it's going to do 1 plus or sorry result is 0 right now so we're going to do 0 plus the number 1. okay let's try that and now you can see result is one let's do it again now number is two so two plus one result is going to be three okay three plus three result is going to be six six plus four result is going to be 10. okay and notice how it was just like boom boom boom boom it's just these lines running over and over again right and now the result is 15 now the loop ends because are no more numbers to loop through and we go to result result is 15 and then we return the result at the end return value right and the return value here in this case is this object it was of type object and it says result is equal to 15. okay so there you have it a full visualization of a for loop exactly how it works and what is happening and hopefully that clarifies things for you a lot further so i want you to try something try writing this function some array by yourself from scratch and i know we just did the answer but i want you to give it a try without referring to this and see if you could create this function by yourself and if you could that would be fantastic and just give it a give it give it a shot right and if you could get this working see you know that would be absolutely amazing and then check back with this and see how far you got all right let's do some more exercises with loops arrays objects whatever right because this is going to make you so much better so let's make a function called max so let's do const let's say find max okay or you could call it max as well and it's going to take in numbers and it's going to have a let's say cons result and then it's going to return the result okay and then we're going to have something some loop stuff happen here okay some loop stuff and here's how the algorithm is gonna work okay imagine we have an array of you know let's just say one two three and four and five okay imagine we have this array right here and let's just put commas here because that's how the array would look i have these commas and what we're gonna do is we're initially gonna set result to one and then we're gonna loop through and we're going to say hey it's 2 greater than 1. check these if it is then result set it to 2. okay then loop again all right is 3 greater than two if it is then set result to this then check between these two numbers if four is greater set four if five is greater set five and then once the loop is done it's going to return the biggest number okay and now imagine if you know in in let's say there was a case where we had a one here okay let's see if it would work if that same algorithm would work there okay set one two the biggest set one to result okay great now check between these two's two greater yes then make two the result okay then check between these is three greater okay make three the result check between these is four greater okay make four the result check between these is one greater no then don't make one the result keep for the result right and and then that's how we're we end up with four so that's kind of the algorithm that we would do okay now we just have to code it up so we're basically gonna say set result not to zero okay because imagine what if you had an array with only negative numbers in it well then zero would be the biggest number so that's a common trap do not set result to zero we're gonna instead say results is the first item of this array okay we're assuming we're getting back an array or we're getting an array here okay and then we're gonna say is loop so we're gonna say we're gonna write a four of loop const number of numbers and basically we're gonna say if number is greater than result in that case what do we want to do we want to set result to that number that we just found and at the end when we're done with this loop we just simply return the result okay so let's go ahead and give this a try and let's comment out anything else that we might have running okay we don't have anything else running so we're oh we do so let's comment out these lines right here and let's just go console.log and i'm going to say max and let's give it numbers like one two three four five and let's see what it returns as the max aha yeah so this is not a const let's make this a let because we are going to be changing result okay so this error is saying assignment to constant variable so all it's saying is hey you cannot redefine a constant so that's why i'm changing it to a let now you can redefine it right here and we should be good and let's do that trick again let's return result as an object so it looks nice when we print it and you can see result is five now imagine we have one comma two one two so the max in this array is what it is a it's the 4. so let's see if it gives us a 4. yes it does beautiful look at that let's go 20 now and 10. and let's see if that works beautiful and now let's make this array now let's make this massive right like let's just uh yeah let's let's take this right here and let's just paste a couple of times and run it and look at that it says result is 20 and if i make this a 3 over here and run it boom result is 30. i mean it will find it wherever the max is it will find that max right so this is a really nice function that we have created now let's keep building on this okay so this is all going to be making sense and trust me it's going to be so important for you once you start getting to building projects and doing those types of exercises you're going to wish that you spent the time to learn this because this is going to be a complete game changer for you all right so our max function is done let's work on a different function now and what this function will do is it will calculate frequency okay so let's go ahead and try that so we're going to const frequency okay it's going to take in uh let's say a phrase that somebody will say and i'll tell you how many times uh that phrase or that or sorry that that letter occurs okay so let's just say letter frequency okay so what does that mean so say i said haha here's what it should return okay so if i call the function letter frequency on the word haha here's what it should return it should return an object and the object should say h occurs twice and a occurs twice that's what it should return so how do we create this function so it does that if you want to give it a try you can this will be hard because you'll need to use your object knowledge as well that we put together a while ago but this will be using you know summing up numbers looping through things iterating and all kinds of stuff like that and so uh incrementing variables is going to be a tough one if you try to solve it yourself but you should give this a try right about now and we'll continue in five seconds five four three two one let's continue so i have letter frequency how do i determine this okay let's figure it out together first let's just go ahead and call this function so we're just going to say letter frequency and we're going to give it that phrase haha like this and uh let's console log that phrase let's delete that line and let's just make sure that this letter frequency is running okay haha showing up perfect now what do we want to do we're we're getting haha well we need to actually start writing a for loop that will start going through all of those letters because that's going to be important okay so let's go ahead and write a for loop so i'm going to say for letter const letter of phrase and let's just go console log and we're just going to console log each letter and let's see what we get we get haha okay great now this is where objects are going to start becoming very very handy because you know key value pairs are going to be absolutely clutch for this um arrays are not a good solution for this okay but like objects are objects are also great for storing you know information in your phone book like on my iphone when i'm going through that is being stored in an object okay that's why i have you know my name my you know i could look up somebody by their name their phone number etc and objects are great for that so we're gonna go and look at something in the console okay and that's gonna make our lives a lot easier so say we have something called word and this word has let's actually give it let's actually call it frequency right or freak um and let's say this frequency has that the h is once and that's it okay so it has one h in there now if we have a word like haha or whatever right or if we want to just check yo is h inside of the frequency we're actually able to check that and it goes yes h actually exists because it can if you do h and frequency what it does is it looks for h as a key ins and searches all the keys inside of an object okay so it goes yes h exists and uh if i go you know because of the word haha does a exist in frequency and when i look it says no that a does not exist that's actually false so using this we're actually able to see if we've already stored something in our object or not because the way that we want to do this is we want to go and say okay so say we have the word haha then i want to have a object i'll just write it out here and it should loop through and in the first loop it should notice that there's a letter h so as soon as i notice the letter h i make a key for h all right and because i know it showed up once i set it to one so i go that key is equal and it's it has a value of one now then i loop through that other word again and this time i see that we have a okay perfect well have i seen a before no i haven't so then i set a to 1 and so far so good okay then we loop through the third time and i see h again well i've already seen this before so what do i do if i've seen this before am i gonna go ahead and make another h and then set that to one you can't do that because in objects you can't have the same key repeating twice so we have this key here and that this key here so what will happen instead is we will end up overwriting this key and just do h as one and that's what it was in the first place but that's not the result we want we actually want to we actually want to increment this key right here this h1 right so we want to increment this one by doing plus one and making it a two so how do we do that what we do is we go hey does h already exist and we do this little checker here right there and if it says yes h already exists then we go go to h and and add one to its value so it goes okay i'm to go ahead and i'm going to do that so we go to this and this becomes a 2 right and then we go to the fourth letter in haha and we do the same thing and we go hey does a actually exist in frequency and in this case it's supposed to be a true and it goes yes a does exist and so if that's true we then go okay find the existing a find its value and increment its value by one and then we get 2. okay so that's how that works that's how that works so let's go ahead and basically say that algorithm but in code this time so first we're going to make a frequency make a frequency object and that's going to store all the memory slash all the data of what it has seen so far okay so this is so make a frequency object okay it's going to be called frequency kind of like we did here okay but in the start it's just going to be empty it's going to be an empty object then we obviously loop through all the letters of the phrase and we check if that letter that we found in phrase does that already exist in frequency so check if letter exists in frequency so you make sure to you know we're kind of writing pseudo code right now because we're just writing it kind of like code but in english and then later you just turn it into code and then you're done so if we check if the letter exists in frequency okay what next well if it exists remember if it exists we're gonna increment by one otherwise we set it to one so let's write that check if letter exists in frequency if it exists so this is going to be indented because this is going to be nested inside of this if condition and we're going to say if it exists we'll then increment the value by one otherwise set it set the value to one okay that's essentially all we're doing and so now take take some time to see if you can actually write this as code and then obviously at the end we're just going to return that frequency that we created okay so we're going to return that frequency so const or let's go let frequency equal an empty object so see if you could code up the rest of this okay take maybe a minute or five minutes or whatever and even if it takes you 20 minutes it's totally fine because this is normal okay you're not supposed to get it this fast this is supposed to take you a lot of time but take some time i'll give you five seconds to pause the video and try it on your own five four three two one all right let's do it together now check if the letter exists i'm going to say how do i check well i just checked by doing letter in frequency okay does that letter exist in frequency this will evaluate to true or if false that's it i'm going to say if letter is in frequency then do the following and then we're going to say increment the value by plus one so how do we do that let's do that right now we're just going to say frequency of that letter so we're creating a new key on the fly and we're gonna say equal to whatever it was before plus one okay so it's like whatever frequency of the letter previously was just like incremented by one okay if it doesn't exist which is the only other scenario then what we can actually say is we can go and say hey set the frequency of that letter to one that's it and uh then we just return that frequency okay so let's try it on this word haha and see what we get and look at that we get h is 2 and a is 2. that's crazy right like we just coded that out from scratch and it works so nicely and let's try lol what are you doing later tonight lol haha okay let's run this and it just runs through every single letter right here and it says l happens about five times is that true let's see l two so one two and then we got three four five yep so that looks like it happens five times and it says how many times o happens and it says how many times a comma happens how many spaces there are and it just shows you the whole freaking thing right so frequency is working as expected now one thing i'm going to show you is called incr these are incremental operators okay at least that's what i call them and they are plus plus minus minus plus equals okay um plus equals one and so these are incremental operators they're really really helpful and make everything shorter so for example this over here you won't ever see it written like this if somebody's coding this up they're gonna write this like this okay so it's gonna say plus equal 1. so plus equal 1 is the same thing as frequency letter is equal to frequency letter plus 1. so these two are equal and i just want you to kind of get used to seeing them okay and we can go and change some of our stuff above as well so like where it says result equals result plus number right how could we change this here try it on your own take about five seconds and this you should be able to do in five seconds five four three two one you could change this with a plus equal all right incrementing it like that okay and if you're incrementing something by one here's the cool thing you could also just do frequency plus plus and that just this just means that you're incrementing frequency by one so let me try hitting run you can see that this works right you can hit one run on this and you can see that this also works and gets the same result and we can you know or you can go back to the oldest one and see we get the same results so it's a matter of preference you never want to write it the long way you won't ever see it written the long way and you could write it in between these two ways so you could go plus equals one or you could go plus plus either work okay so i just thought you should know those you could also go minus minus and that will like decrement it okay and um you know so i'll just leave this as plus equals one for you just so you can wrap your mind around this and get used to seeing it okay so these are incremental operators they're very very useful and very commonly used now i'm going to remove all these comments or i can just leave them here if because you know this might this might kind of hurt your brain a little bit how's this frequency thing working so i'm going to leave that here for you all right now let's just keep building on this and let's keep taking it a step further so now instead of letter frequency let's improve our our skills and and do something called word frequency okay so we're going to build a new one i'm going to say const word frequency and see if you can try to challenge yourself to take a stab at this phrase and then we're gonna run this function okay and we're gonna do the similar similar type of approach we're gonna create frequency here as an empty object and we're gonna return frequency at the end all right um and inside of here we're gonna do our like coding okay this is where we're gonna be doing our logic now here's the one interesting part here i'm gonna comment this out obviously let's comment that out let's go ahead and console.log word frequency to make sure it's running and let's give it a phrase the phrase is lol what is going on lol what law let's just say that okay lol what lol so we know that if we run that here's what we should get so if i run this function so let's have an example and this is also really good for documentation because by looking at this people can know how to call your function and then what your function actually returns at the end so i'm going to say word frequency and if i call this function with this phrase law what law it will return the following it'll say lol occurs twice and what occurs one time okay just like that and um this is what it should return so how do we make it so it does that well i wanna i have to teach you a couple of things for this so say i have a phrase and let's go phrase is equal to lol what lol so what we would really love for to happen is imagine we had an array and it had a it had things like this that'd be really nice because if we loop through something like that right in an array it would just loop through the words and we want to loop through the words instead of letters that's the only difference here between last exercise and this exercise okay so how then the question is how do we get it into an array so we can loop through it because if you try to loop through it in a string watch what's gonna happen okay so if you try to loop through in a string it's gonna loop through and print out every single letter from here so let's try to write a loop and loop through this so i'm gonna say four letter in phrase console.log letter okay and we're gonna hit enter we're gonna close the parentheses and run this right and it's just gonna oh sorry not not in let's run that loop again and say of of and it's just going to print out every single letter well that's going to be confusing because it's going to count letters for us and instead what we want to do is we want to count words entire words right and words in this case are separated by what what's a common thing all of these words are separated by take i'll give you a hint they're separated by these spaces okay so we can do something cool in javascript we can turn this into an array um and if we turn this into an array so let's say i give you phrase and if i call dot this method got split on it it's a string method and i say split it by spaces and i hit enter watch it what it's going to do it's going to turn that into an array and now that array very clearly has three items and if i loop through through these items watch what's going to happen so i'm just going to call it array okay and then let's just loop through there's a 4 word in array console.log word i'm sorry i'm just used to python so it's for of of of of so for word of array yeah law what law so look at that i'm actually looping through the words in that array and i can now in my object see if this word exists and if it does exist then i can increment it by one and if it doesn't exist then i can just set it to one so it's the same exact thing but just with words this time and all you have to do is turn it into an array of words and then you're good so let's give it a try now is what we know so we're gonna once we get our phrase okay what's the first thing we're gonna do to it what's the first thing we're gonna do to that phrase to turn it into an array we're gonna do phrase dot split yeah this is going to turn it into an array but we need it to be separated by what it's separated by spaces in this case okay so boom this is going to give us what we need so now let's let's go ahead and um i'll do let's just call this words okay and um now let's console.log these words and hit run and watch what happens now i hit run and watch i got lol what lol okay if i have hello here and i run it lol what lol hello yeah so now it's doing what we want it to do now the algorithm is going to be pretty much the same as letter frequency very very similar to that so we're going to basically use like a similar similar formula okay that we did here so we're gonna say we're already creating that frequency object there yeah and then we are returning it that's good so we're doing that here too we're creating it and we're returning it so that's good and we're gonna do the same thing so we're gonna say for const word of words okay let's just console log the words for now and let's just see what it's console logging so let's run it and you can see that it goes lola what law perfect is every word and we're gonna do the same thing check if it exists in the frequency if word and frequency then we're going to say we're going to increment it by one so we're going to go frequency word plus equals one else frequency word set it to one and at the end return frequency so let's try this and boom look at that lol is twice what is one time and it's already working right that's crazy so let's go yo yo yo and let's run it and here we're gonna see that yo is coming out three times lol is coming out two times and one is what is coming out one time so i mean this is so cool we just made it but there's something we can do to make it even better i want you to notice the similarities between this and the letter frequency thing that we wrote yeah and instead of calling it letter frequency let's just call it i mean actually let's leave it as letter frequency that's fine but they're very similar right the code here is very very similar to the code we have here for example we're creating a frequency object we're creating a frequency object we're returning frequency we're returning frequency right we're we have a loop that we go through we have a loop that we go through if it's detected in the frequency incremented by one if it's detected in frequency incremented by one if it's not detected set it to one if it's not detected set it to one i mean my gosh there must be something we could do because it looks pretty much like the same exact thing and watch there's something brilliant that we can do so we can actually delete this entire for loop let's get rid of this console log we can delete this let's get rid of this return here let's get rid of this frequency here and the only new thing we need in this is we just need to split it by uh spaces to break it into words right and let's go const words sorry i keep forgetting the cons sometimes and all we do here okay this is going to be so beautiful is we call our letter frequency function that we created earlier and we just pass it words and then ill know what to do with it so it goes in here and then it has instructions for what we need to do right and all we need to do here is just say return so let's try running this and look at that you guys we are getting the same exact answer and it is completely correct yo is three times what is once lol is two times okay now this is if this is not blowing your mind think about it like this when you go to google right and you type in kanye west and it starts auto completing it's using the same thing because it knows what are the things that are being searched frequently and because it knows their frequency it's showing them here so for example maybe this search over here right this kanye west runway that might be done let's say 10 times kanye west net worth might be done five times kanye west's girlfriend might be searched three times okay it's just an object and then google is sorting it and showing you based on the ones that were the most frequent that's the really cool part and this is why you know once you learn this here all you need to do is be able to attach a front end like this and boom your apps are going to be absolutely amazing and mindblowing so let's try this now okay let's try our own function with different inputs we're going to say const user input is prompt uh write your sentence right and we're gonna replace this with whatever the user types in so we're gonna say user input here and call this and um yeah let's go ahead and run it write your sentence and we're just gonna say um kanye west has great music but west side is greater than greater than east side yeah because i live on the west coast in california and then you got all these people in new york and i like that my time gets back i get my three hours back when i come to california instead of losing my three hours when i go to new york so if you're in new york and you want to earn three hours back of your life forever come to california so let's try this yeah and um probably the only thing that occurs twice is west i imagine okay and then let's just write kanye is also the goat the goat that's not gonna work the goat okay ella said the goat and let's hit okay and run it and uh it came back all right and it broke it down and you can see it did a full breakdown of every single word kanye is two west is two has is one great is one music is one but is one side is one is two and the goat is two thus two and it did it all so fast and so quick all right so we did a lot of challenges and exercises and if you want to deep dive and do like a full on boot camp and master arrays and objects then i recommend you deep dive into exercises okay where we'll have additional exercises for you and lance he is going to be your boot camp instructor for those okay so if you want to become a like a legend he's going to help you turn into a black belt my job is to take you from white belt turning into a blue belt he will do that so if you want to for example you know because i'm going to move on to different topics now but if you want to just keep exercising this you can do that you can do that by going into say this exercises folder on the left hand side by the time you're watching this tutorial we'll have bunch of more exercises right now we have this one here that says convert convert hours to seconds you click that okay and then lance has this exercise prepared for you there's a rebel that you'll have to copy okay and paste in your urls and you'll be able to fork this and be able to code it on your own so this is the rupple that lance has created and if you want to be able to do it on your own hit fork at the top okay and then you can actually run this uh rebel okay and uh you can write your code here and you could write your solution here okay and what lance will also be doing with some of these exercises he'll also have a link at the top of the loom video where you'll be able to click and watch his video explaining that exercise explaining that project in detail as well okay so think of him as a solid um you know boot camp instructor that just like kind of dives deep in with you all right so that those are going to be the extra resources available to you with that said with that said you're doing amazing pat yourself on the back i mean wow you're doing an excellent job so far by being here you're putting in the work you're putting in the effort i mean you could be doing so many things you could be playing with your kids right now you could be outside hanging out with your friends you know you probably got off of work and you're putting in that time to learn this i mean that's huge dedication you're taking time away from all this other stuff you could be doing and doing this so now granted coding is a lot of fun but if you're in this stage i know you're doing it for learning and i tip my proverbial hat to you um huge props for making it this far with that said let's keep on rocking and rolling all right now we're gonna move on to something really fun they're called higher order functions don't let the name confuse you or freak you out they're very very easy i swear once you see them a couple of times pattern recognition maybe and then it's so fast it's so easy so let's get to it so there are a couple of higher order functions i'm going to show you okay so higher order functions and i'm going to show you map and i will show you filter map is like one of the most important things that you should use uh i'll also show you reduce okay and uh map will make your life so much easier like you'll be using map so much and then you'll also use filter a lot when you're writing javascript code so let's go ahead and comment out these lines here because we don't need them right now and let's just get started okay so we want to use let's start with doing some of these functions again but instead we're actually going to use map so let's say we want to double our numbers right any number that we give it watch how easy it is so say i have an array i can loop through this using dot map and i can say map and give me a number and for each number i'm just going to console.log it so watch what happens let's run this and boom there i have my loop like look at how clean it is it's just one line right no blocks of code no weird squigglies or anything like that and what i'm what i'm saying is map through this i mean literally think of it like loop through this like it's literally like dot loop and then each variable let's we'll just call it number so like this will be a variable called number then this will be number and this will be number and each time what i want you to do is just print it out so i'm returning this right away but if you wanted to write a full function here you could just do this put open close squigglies and like write whatever you want here okay you could write multiple lines here and when i run this you'd see it's like one haha two haha three haha for haha like so on and so forth so let's remove this now we're doing an implicit return implicit return by not having a squiggly braces here we don't even need to say return it's automatically returning it okay now i want you to take a look at this how could we double all of these numbers here watch how easy it is i could just say number times two and watch what happens so let's just go let result is equal to that and we'll console log result okay let's run this and look at that you guys like that is so clean that is so nice i mean it is the easiest thing right in the world and it just boom two four six eight and all i did is i just said number and multiply that by two now here's also what's cool about map so whenever you have to write loops pretty much just forget about them and you'll be using maps like most of the times in javascript most of the times and what's cool about map is it's also returning to you an array okay so map returns so it loops and returns an array so remember when you have to like make this result thing so for example when we were doubling our numbers right we had to make this result and this temporary array then we had to loop through and push to that array and then return that array well what's amazing about map is it's already doing that it just goes through and doubles it it's automatically pushing it to an array right and then it's returning that array at the end so that's what makes map so freaking awesome and all of our like code that we have written before we could just like replace it right so let's let's rewrite our double functions let's say const double map and it takes in numbers okay and what this does is it will take numbers so we'll do return numbers dot map and for each number just multiply it by two okay so that's it that's our entire function so compare this double here with how many lines of code to this double here with one line of code this is so much cleaner and so let's delete that and let's try running double map and give it an array we'll say one two three and we should get two four six boom look at that we got an array of two four six so this is a much nicer way of writing it so i try turning some of these okay for example you know some of these functions into using map or using filter and see if you could do that all right now what i'm going to do is before we get into the exercises and remember for exercises if you need exercise there'll be an exercise folder for you me or lance will put together these exercises for you and you can always kind of access them from here and exercise okay and by the time you look at this it'll be much more fleshed out so i showed you an example of how to use map so this is map all right now i'm going to show you how to use filter okay that's another important one so say you have numbers like one two three four five six well in order to be able to go through these numbers i mean and and let's say i want you to only give me numbers that are greater than three how are you gonna do that right now let's create our own filters we're gonna say const filter and it takes in numbers and it takes in a filter number as well so like should be greater than or something like this okay so we have to give it a few things we need to give it numbers and we need to give it like it should be greater than 4 or greater than 5 or greater than 3 something like that and then how will it work well we will need to have an empty array to start off with and then what we need to do is go hey is one greater than this number here and if one is greater than this then throw it in that bucket but if it's not let's say we have we chose 3 to be our number here so 1 is not greater than 3 right so then it shouldn't do anything with it and cross it off then we go here is 2 greater than 3 nope is 3 greater than 3 nope is four greater than three yes so then you get four it's five greater than three then you get yes is six greater than three yes right so you pop those numbers in there but besides those you don't so then you get this filtered array okay so if you run filter and let's say we give it uh numbers let's say we give it a you know one two three four five six and then we say it has to be greater than three well then what should filter return it should return four five six that's what it should return so see if you could write this function on your own okay so i'm gonna give you five seconds to pause the video and try giving this a shot on your own five four three two one all right let's do this function together so i have filter here now what we can do is um we have our numbers we have what what it needs to be greater than so we're going to start off with an empty array so we're going to say result equal that empty array let's actually write our for loop first so let's return the result and let's write our for loop so we're going to say 4 number of const number of numbers i want you to do the following if number is greater than this number then we're going to do result.push number and then we're going to return that array at the end all right so let's give that a try now so we're going to do console.log and we're going to call our function filter we're going to give it an array of one two three four five six right and then put a comma here and let's give it another argument and the greater than number will be three so let's format our code and let's run it all right and then filter work so it gave us greater than four five and six so here we've kind of created our own filter this is like a manual way of making a filter and it's all right it does okay job if we need you know for example let's say we give it a two well then it should give us number three four five six let's run it so now it's only looking for numbers greater than two so boom it it works but let's use the dot filter method and dot filter is an array method that we can actually use and it makes our life a lot easier okay so watch this what we can do is let's comment this out right now and i can actually go and create nums okay so let's say we create nums one two three four five six okay and let's filter through this so let's say nums.filter and i'm gonna say for each num return to me make sure num is greater than six all right let's console log this and here's the cool thing about filter okay filter returns an array all right that's the cool thing about filters so if i go back to filter here it also it loops and returns an array with matching conditions so that's the difference between map and filter map will return the exact thing and filter will loop and return an array with matching conditions all right so let's give this a try and let's console log this and let's run it nothing is greater than six so that's why we got nothing back let's try three boom four five six let's try uh let's try greater than or equal to this so if we do greater than or equal to then how many items should we get back take a guess all right if you said four good job that's right it is four great work on that but it will return four because it'll be four five and six because they're greater and this is equal greater than or equal to so let's run it one other thing with conditionals that um you should know about is uh operation called and and all right so the and logic is really important for you to learn so let's go ahead and look let's just practice this here but if you have true or false watch what happens if you have these statements like this right if you have true statement or a false statement you can have so if you have this this will return a true and how you write an or is like this in javascript if you do true or false it's going to give you a true if you do true and and and false you're going to get back or false all right so these things are important for you to know they're logic tables and i think it's much better for you to just understand them by example because if i tell you logic tables you're going gonna be like oh my god logic tables what is that well it's a lot simpler than you think so for example say i want numbers greater than four so i want numbers greater than four but i also want numbers uh that are less than three or less than two let's say how can i say that statement well i can say it like this let's go or and now if i run it it's gonna notice that it gave me a five and a six so those match the conditions and it gave me a one because one also matched the condition so anything that's a or statement here's the cool thing about or it needs to match this or this it just needs to match one of them and if it's the case then it'll automatically be true just needs to match one of them but if you said and right if you put a and here logical and like this it won't show anything you know why because nothing matches that nothing is greater there's no number that's greater than five and six and less than two at the same time this wants both to be true at the same exact time so here we wanna put an or examples of these could be like let's say a user is authenticated right in an app and then user is a premium member you know or like and user is paying member so then you want something to happen right so you can go if then you want to run some like piece of code that that let's just say does something okay so if user is out and then like code goes here so if user is authenticated and user is a paying member then do the following so this is an example so if this evaluates to true and this evaluates to true that's the only time this code is going to run but let's say the user is not a paying member and this is false then you know for example let's let's make a let's make an example here let's say you're a youtube user right and you have youtube premium so if you have youtube premium then i show you no ads so if you're authenticated logged in and you're a paying member then i show you no ads otherwise what i do show you ads so that's the nice part about this and and thing so if i can even make it like this right equal true and this is equal to true so that would be like more verbose way of saying it but this is why this chaining kind of comes in but then like doing the same youtube example maybe let's just say that let's remove the ads like let's say the youtube app deciding when to show you the videos so if i go to youtube oh i can't go to youtube right now because i'm in focus mode so you're just gonna have to imagine that we're in youtube because i'm a human being right like i'm sometimes making these courses for you and these exercises for you and then i get distracted spend a bunch of time watching youtube and it's just it's just a waste of time right and i end up not making this course material for you so i have to stop myself and block my own youtube so there you go that's what you saw i've blocked my own youtube and this is what my current focus is so let's just go back because i don't want to fall down the youtube rabbit hole but just imagine in your mind's eye right what happens if you're authenticated you be white we might want to relax this statement and put an or here why you know show youtube videos so whether the youtube user is authenticated or whether the user is a paying member in either case they still get to see youtube videos regardless but let's just say you might have to be logged in so that's why the or so the aura creates relaxing conditions easier to match and creates these strict conditions that are like district disciplinarian father okay so use them accordingly they both have their own use cases uh but they're very important to understand like the and and the ors okay and they come up quite often so here i can using this i can find numbers below a certain thing and numbers less than okay all right so let's make this example a little bit better okay oops did not mean to do that cool let's go back down all right let's make this example a little bit better so what can we do with this okay so say we create a array of objects so this is where it's going to start getting really cool because in reality you're always dealing with or mo a lot of the times you're dealing with array of objects when you're using an api or whatever and i'll show you what it looks like so say you have actors right and you want to have actors with their net worths and then you want to filter based on their net worth so only show you like the richest actors versus like the actors that might not be that rich yeah so let's say we create an array yes first thing we're going to do is we're going to create this array and then inside of this array we're going to have we're going to create an object and we're going to create a name and let's say johnny short for johnny tepp and then we're going to give johnny depp a net worth of whatever that is let's say amber uh net worth of 10 and then uh let's create create leonardo with a huge net worth so whatever that is 100 million cool so we have an array of objects okay so when you have an array of objects what you can do through it is you can loop through it um kind of in like a normal way if you wanted to but i'm just going to go and show you how to make that filter example that we're talking about okay so what i'm going to do is i'm going to say actors.filter and i'm going to filter them and i'm going to grab each actor and i'm going to filter them based on their net worth anywhere where their net worth is greater than 10. so if it's greater than 10 show me those actors so guess which actors it's going to show me can you take a guess i'll give you five seconds five four three two one you're absolutely right it's only going to show me johnny and leonardo it's not gonna show me amber because after that lawsuit she ain't got no money left right so let's hit run on this and we see leonardo and we see johnny and we do not see amber right let's go ahead and comment this out and i'll also delete this line here because we don't need that anymore so let's run this again and you can see that i have johnny and leonardo right here so you can see how powerful filtering is right like it is able to go through an array of objects and it's able to filter based on the net worth and then based on that it's only returning it's creating a new array of objects and it's only returning the objects that have a net worth of greater than 10. and we can keep taking this further now what i want to show you is we can not just keep everything in console logs right but we can also put things to the dom so we're going to get a lot more into dom elements later but right now let's just do a little sneak preview so what i'm going to do is i'm going to say playground dot inner html and um we're gonna now output this stuff to an html okay so i'm gonna say internet html and i'm just gonna say leonardo okay let's start with this and end the h1 tag perfect now let's run it and you can see it runs it right over here the next thing i want to do is right now it's hard coded i'm get how i'm getting his name so let's actually write a piece of code where we can dynamically get this name over here okay so let's go ahead and instead of console logging this result i'm going to store this so we're going to say const result okay or let's just say let result and we're going to store it in here and then here let's make this a template literal where it says hardcoded leonardo we're gonna make it javascript i'm gonna say result get me the zeroth element from the result so that's gonna get me the first thing all right and uh then i'm gonna say dot actually i don't need to do yeah yeah i can do dot name okay result zero dot name so that'll probably get me johnny depp let's run this okay sometimes if it breaks like this just refresh and everything should be fine so i'm gonna go ahead and refresh okay perfect so now you can see that it's actually getting me johnny kind of how i expected it would let's go console.log and we'll see a result here as well so you can see all right and johnny net worth is 200 to whatever two million right and then leonardo dicaprio net worth is 10 million and uh i'm able to get johnny right here by doing result zero dot name dynamically if i wanted to basically see let me actually run this again if i wanted to see the entire object like this entire thing but output it onto the dom i could stringify it so i can actually go hey get me the result and then we'll say stringify json. let's go json.stringify and then we'll pass in result okay and let's run this and it'll just kind of like output it kind of like that which looks pretty hideous so we want it to look a little bit better right let's start off with just showing the names of the people that have a higher net worth than let's say two million so basically what i'm gonna do here is i'm gonna do the following okay so let's let's go ahead and run this so what i'm going to do is i want to make it so it just gives me the names of each person okay and how can i do that so say i have an array like this let's store that in results i'm going to paste that here so let's whenever i type in result i should get that well how will i join them what i can do is i can actually map through this because map will return an array and so i'm going to map and first i'm going to get this element and i'm going to get this element and all i'm going to do is i'm just going to pull out the name so what i'm going to do is i'm going to say result.map and i'm going to say for each actor in there i want you to just return to me actor.name so this is just going to return this code here saying return an array with just actor names that's it so return an array map is saying return an array that's just filled with actor names that's it that's all i'm doing so let's run it and boom i'm just getting this back even if i do that that should get me kind of the right result now what i can do on top of this is when you get this array back you can actually call a method like join on it and if you join it it'll actually join it and turn into a string so it's the opposite of splice splice turns it into an array the join will turn it into a string so i'll actually say the join and then join them by either spaces or i can say join them by a comma and a space right so now it's going to be johnny and leonardo and no matter how many actors i had it would kind of join them by name with a comma and a space in there so all i need to do to this thing that we had written earlier and i was just pressing up so i could find that and i'm just going to say dot join and we're going gonna put this here and put a comma right there i'm gonna hit enter and now just doing the whole thing all in one go so let's copy that line and we're gonna do it right here okay let names and i'm going to say names are you know whatever result was we're going to map through it for each actor just get me the actor name so again get me an array with actor names that's all i'm saying here and then join it by a comma and a space and then those names i want them outputted on my dom so let's hit run and you can see that i'm getting those names out put it on my dom okay let's add in a couple of more actors here so boom boom boom so let's look up matt damon networth all right celebritynetworth.com perfect so 170 million all right 170 million let's type that in 170 million let's type it in so we can copy the right amount of zeros here let's copy that let's move it back and i'm going to say matt we'll put that right there so his net worth is 170 million let's uh grab another actor let's go brad pitt net worth okay and we got 300 million here perfect so let's go 300 million and we should get calculator.name nice good website good website and i'm going to copy this right here and we'll paste it right there just remove the commas of course all right so we'll name this one bread red okay that's it and let's remove this one because that's a duplicate so this is this is good for now and um let's let's just run this yeah let's run this and see if it works and so any actors that have a greater than ten dollars net worth you got johnny matt brad pitt and leonardo dicaprio and you know the whole thing works perfectly and what's cool is like if you wanted to show images for them you could also show images you just need to store image url all right so i think these exercises kind of pushed you a little bit when it comes to filter like if you had to write this code without using filter or map oh my god like good luck try it and it will be so many lines of code there will be so many functions with filter and map i mean they just make it so easy to kind of just like go through this so i'm going to comment out all of this comment out this going to comment out all of this right here so when i run it nothing really should be coming up perfect so now what i want to show you i want to show you reduce okay this is the another one that's really really important so when is reduced used let's say you want to combine all of if you want to sum all of the net worths okay so generally whenever you're thinking of summing it's a amazing use case for summing like whenever you think some think reduce okay and i'll just try to teach you with examples because that'll just make it so much easier for you to learn so say we want we have that function where we sum right so let's go ahead and find our sum function so where do we have it some array all right so we have this function some array look at how many lines of code this is right now watch what is going to happen when i use reduce okay when you're summing an accumulator like this that's when you use reduce when you are doing something else where you need to return an array you will use map okay so push gets replaced by an app all right so let's see if we can turn this into a very small lines of code like summing an array of numbers here's how this will look okay some nums okay some with reduce okay so i know it's a big name but this is still a set the you know simple function and i'll show you how it works and here's what we're gonna say okay so we're gonna get numbers and we'll do we'll have it do numbers dot reduce all right so to keep things simple let's uh not even have it be a function okay let's just start actually let's do it right here on the right hand side first so say i have one two three okay how do i sum them up so here's how we're gonna do it with this okay so let's say i have my nums okay so let's say i go nums are 1 2 3 and then i'm going to say reduce okay and reduce takes in a function reduce takes in a function as an argument that's why it's called a higher order function because even if you look at filter i don't know if you noticed but what you're really giving filter here so uh let's just go back you know just in case some of this wasn't clear number number times two this is just a fancy way of writing function that takes in a number and then you go return number times two so you're you're creating a function on the fly here okay you're creating like an anonymous function with no name on the fly here and or lambda function and you're just passing it that function okay this is what's called a higher order function you're passing it a function this right here is a function like this right here is a function this right here uh right here is a function and so we're gonna create a function here function and um let's let's give this a try okay so what does reduce do reduce loops and gives you back the accumulator all right so this is going to be my previous value this is going to be my next value i'm just going to call it any x for now and let's just go ahead and console.log previous and next okay and let's run this and let's see what happens okay boom i got one two so what's previous and next in this case right this is our accumulator so it's it's basically going to be like this is the previous value this is the next value so if you do previous plus next it's going to do one plus two and then previous is going to become three okay preview is gonna become three all right and then you're gonna go through this and do three plus three and you're gonna turn it into six now what i'm gonna do is i'm just going to go return previous plus next okay or previous plus current that's usually what they call it okay current so let's do previous plus current and i'm going gonna store the result of this in results so let's go const result is equal to that and we're gonna go console.log and let's get the result and let's take a look at what it is and boom you see that we just got back six okay so this function here with the result um with using reduce it made our life really easy right being able to go through this entire thing and sum it so quickly with essentially one line of code that's a total game changer now let's see if we can even make it simpler so we're going to use es6 notation and turn this function here into an es6 function so watch what happens so this function part is going to lose this right here and we don't need that we don't just say function anymore we're going to put a greater than equal and equal and a greater than sign and then this part here we we want to do implicit return so we're going to remove the return but in order to have implicit return you also need to remove this squiggly like curly braces we're going to remove them we're going to format it okay and you can even if you want try to get this on one line so now that entire solution is just one line so you're using reduce and you're summing up all these numbers so when i hit run watch what happens i got a six and guess what can you remember where we've made a function that takes two numbers and returns their sum because that's all you're doing here you're creating an anonymous function that takes in a number and then just returns and just sums both of them right that's all this is doing so can you remember where we've created a function like this okay i'll give you a couple of seconds five four three two one to find it and let's see if i can find it as well so if you look we created a long time ago we created this function sum right here okay and we even have its short version right here some arrow two some arrow and then we also have some so let's see if we can feed it that function okay so now you're going to start to understand why it's called a higher order function so let's bring it down let's bring some down so i'm going to copy this and i'll bring it down just so you can see it easily and what i'm going to do here is instead of even writing all of this first we're going to turn it into one line of code how we had earlier so we've done that right we said previous current right and then return previous plus current so sum up those two numbers we could also say a comma b return this so if i run this this should still give me a six as expected and here's the cool part i can actually just feed it that entire function just like this so i can just say hey reduce it to one number and then just sum it so that's why it's called reduce because it's an array and you're reducing it down to just one number right it's gonna return one number here that's why it's called reduce and then i'm giving it the sum function and what the sum function does is it just takes in things and it sums them up so let's run this and this still gives me a six let's say i wanted to multi take the multiplicative product of all of these numbers right so i would want to do 1 times 2 times 3 times 4. what would i need to do in order to get 1 times 2 times 3 times 4. see if you can do that with reduce okay so take a few minutes and try it on your own i'll give you five seconds five four three two one all right let's get let's go all you would have to do is you just have to copy this create a new function call it multiply and you just change this a plus b to a times b and just feed it multiply and now it'll just keep going through multiplying those number saving their accumulator and spit it out so you feed it sum you get some you feed it multiply you get the multiplication multiplicative product at the end so anytime you're using reduce you could create your own function or just on the fly just go a comma b a plus b this is a pattern i use very very very very very often and i hope that you use this don't anytime you're thinking some just copy this for now literally you can copy and paste this most of the times whenever you think some this is usually going to be the answer and then you know you can stack overflow it later and just go hey how do i sum up something with reduce how do i do this with reduce and you're going to start learning this reduces something pretty complicated and so i don't want you to go fully down the rabbit hole but just learn it with pattern recognition anytime you have to sum up numbers use this right a good exercise for you to try would be how can you use reduce to sum up all of these net worths okay so get the total net words so try giving that a you know see if you can give that a try i'll give you five seconds and then we'll try to solve that together okay so i'll give five four three two one all right let's try to solve that one together all right so i got all these net words over here and i want to sum them up how do i do that by the way just a pro tip in replied there's something really sick that allows you to explain code so let's say you're not understanding what this is you can highlight this right click and click this button that says explain code and this does a pretty freaking good job this code takes the array nums and reduces it to a single value by adding each value together that is a really good explanation so you could hit yes and then you can also hit regenerate and it generates a new explanation for you so this code takes an array reduce it to single number adding all the numbers together so that's a really freaking awesome feature of replica make sure to keep using that anywhere you're kind of confused and you don't know why we're doing a certain thing i mean i'm kind of blown away by it it's really it's really good okay so like for example look at line 356 right now right if you highlight this and right click and hit explain code it will tell you watch this code is an example of template literals brilliant it is used to display the value of variable called names inside an h1 tag this is brilliant this is explaining it better than me let's see what it says about this filter one let's see how good of a job it does here so let's explain code this code filters the actors array for all actors that have a net worth greater than 10. oh my god oh my god so now let's play with this um actors array that we were working with earlier right so i'm going to comment out all of this stuff here for a second and i'm going to go back to this actor stuff and let's go ahead and we don't need to uncomment anything let's just go down here and i'm just going to say actors.reduce and i'm just going to write what i had written before and then i'll then i'll start using my brain okay and so there's gonna be an accumulator oh one of the things that is kind of useful to know that i'll kind of tell you in a second is this okay let me actually tell it to you right now so you're not confused later okay so let's go ahead and comment all of this right here you could pass in so it this reduce takes in two arguments one argument is a function and the other argument it takes in is like some kind of number okay so it takes in two arguments so we have already given it a function and then we can give it another argument like a zero so watch what happens when i run it right now i get 10 but i could also start the accumulator from negative 10 and then it will count up to zero right or i could start it at already ten and when i started from there it will count up to twenty so this secondary argument by default usually it starts at zero but you can also specify this one so helpful for you to know if you don't need that you could just write it like this okay but i'll just leave that here so you know that there's different options for you available okay let's go back to this part here where we were writing actors reduce so this is going to be my previous value okay and my accumulator is going to be zero and then what i'm going to do is for my current value okay so this is previous this is current and i can just say dot net worth and let's see if this does what we want it to do let's console log the result of this and if it doesn't then we'll try to fix it and looks like it does it combines all of those net words already okay so this is previous right if i had to write it in a verbose way let's write here previous this is current as you just say current not net worth and then previous is that so previous is like in the start previous is zero then previous is like uh whatever the result of this was so it's kind of like recursive why is it yeah so okay so think about it like this right we're going through it the first time first loop first previous is zero so zero plus 20 million or whatever is 20 million so then previous becomes this next time then 20 million plus 10 then that becomes you know that like 20 million 10 or something like that right and then uh you add it again and then previous becomes the sum of 20 million plus 170 million so this becomes like 190 million or something like that okay and so that's how previous works do this we'll say console.log and i'll run this and if you remove the zero this should still work because by default it's uh zero oh no actually in this case it won't work c so we have to actually pass in a zero so that's why that's important uh because something because it was trying to like add the objects on top of each other so it becomes weird so just pass in that zero if you need to and then this way you can sum it up so see reduce allows you a nice little way to sum up this whole thing let's comment this out all right let's run and hopefully nothing prints out beautiful so just to recap we talked about map function and how you can use map to double numbers we talked about filter and how you could filter for specific net worths we talked about reduce and how you could reduce things to a single value and sum them up together or essentially how you could sum up things without having to you know loop through and do it all manually reduce allows you to do it kind of in one go so you know and we talked about higher order functions how higher order functions work together meaning it's a function that takes in another function as an argument that's why it's called a higher order function so we talked about those there's a lot that we covered and this is kind of like the part where it gets kind of complex and it's like what is happening things will keep getting harder so i don't want to promise you things will get easier but this is one of the pretty challenging parts to understand if you don't really grasp it right away don't beat yourself up it's totally normal it's okay all right you're in the right place with that said we're going to keep on rocking and rolling and learning new things all right boys and girls let's get back to it before we're very close to getting to that rock paper scissors game for you and that's going to be really exciting but first things first we have to work on getting your dom skills up okay so let's go ahead and talk about dom manipulation and no i'm not talking about a dominatrix get your head out of the gutter okay i'm talking about this dom right over here all right so when you see stuff in this console log right here that usually has to do with um that's just whatever is in your console but when you see stuff here that's your dom okay it stands for document object model which you never have to remember again okay it's just like nerdy knowledge that won't really be super useful for you in the real world you'll just refer to it as dom most of the times dom and it's just hey this is the stuff that's showing up here okay so how do i change this exercise to say exercise how do i say change this projects here from being written in black to be written in red all right all of that requires you to manipulate the dom when we're playing rock paper scissors right how come when i click this button watch it's going to say rock versus scissors you win when i click this hand let me move myself here when i click this hand watch what happens boom boom boom boom boom boom boom boom right all of this right here my friend is just dom manipulation boom dom manipulation this changing here when i hit this red button right here watch what's gonna happen boom everything got cleared up that right there dom manipulation okay so let's go back so that's what we're gonna work on okay how do we actually make stuff happen on the screen how do we change stuff on the screen with javascript how do we mess around with the html with javascript and we're going to play around with that a little bit so let's go ahead to our index.html and i'm going to go ahead and add in a div okay and we can add in a div actually let's do this to do some dom manipulation some of this stuff let's do it also outside of this replace stuff that we're doing here so you can start to learn how to do things from scratch yourself as well okay so just do me a favor hit command t or control t on your computer open a new tab and let's go to replic.com okay and now here just open a new repl okay so for example there's a multiple repels let's go back multiple rebels that show up here let's just choose the html css and javascript one okay depending on when you're watching this maybe if they updated the site click a plus button and then choose html css and javascript okay whichever way you want to do this so i'll just click here and what do we want to call this i'm just going to say dom manipulation lesson all right and then go ahead hit create perfect it'll bring you to here okay and if you hit run uh right now you should see hello world on the screen how are you seeing this so you came with three files here index.html script.js style.css now to style.css don't worry about it just for styling the main ones that we're going to be worrying about here is the html and the script so this is pretty much standard html that when you just like make any javascript app you you you know you you kind of start off with but to make it even less intimidating for you to start off let's just remove almost everything we're just going to leave a script tag here and let's say if we can say hello world in this h2 and let's hit run let's see if this works so it looks like hello world shows up here so this is literally two lines of code okay and let's even write this line of code here so you understand how to link a style sheet to your javascript sheet okay so hello world and now let's go to our script.js file and we'll write console.log and i'll say hello and i'll hit run and notice the problem that we ran into right where is our hello hello why isn't this showing up in the console what we need to do is link this style sheet to this script sheet okay so we need to go ahead and do that let me zoom in a little bit so you can see everything a lot more clearly so let's go ahead and do that and i'm going to link this okay move this over here so we're going to say script hit tab and it'll create these tabs for you right and then we're going to say script source is and for source i'm going to say script.js because this is the name of this file you could call this whatever you want as long as you change the name here for script let's hit run and now you see hello over here is showing up okay perfect so we have linked our index.html with our script.js okay now let's do basic dom manipulation okay how are we going to do this well what i want to do is this h2 i'm going to give it an id and we're just going to call it title and then we're going to come here and i'm going to say let title equal and what's cool about javascript is you can do something called document.getelementbyid so we're gonna pull this specific element right over here this h2 right here by putting in the id so what's the id can you guess right it's title okay so i'm gonna get this id and then let's go ahead and console.log this and let's see what it shows us on the screen so i'm gonna say console.log.title let's run this um sometimes if your app kind of breaks out like this just hit just go ahead and hit refresh so i'm going to refresh here not a big problem all right let's run it again and you can see that it says hello and then it says html heading element so it's it's showing us something that's a really good sign now what i want to do is i'm going to say take the title okay and we're going to see if we can grab its title dot inner text so let's try this let's see if we can do this ah so i'm actually able to pull the text of this title so now let's go to our html and change this hello world to hello world hello knight and let's run and and you can see that we're actually pulling hello knight from here right from html we're pulling that and reading it in our javascript so that's a really good sign means we can actually now do stuff with it now here's the cool part how can we go the other way how can we update our html from our javascript and then it'll show up here so let's go ahead and do that now i'm going to say title dot inner text and let's just change it to whatever we want okay so let's say we want our inner text to say goodbye so let's say we wanted to say goodbye my lover goodbye my lover goodbye my friend you have been the one there we go so look at that right now i'm gonna i'm gonna let's um let's run this and you see for a fraction of a second it'll say hello night and then it says goodbye my lover so let's run this fraction of a second and then it goes to go down my lover so we're printing out the text before changing it let's also print it out after changing it so we're gonna say okay and in our console log here we're gonna say before like that and then here we'll say after like that and let's run this now and you can see before it was hello at night and then after it became good by my lover so that is the heart and soul of dom manipulation okay this is this is what it is now if you want to change the html you can do that as well so watch this i can actually go ahead and do title.inner html so i can actually change its html okay so it was an h2 right i could actually say put it in p tags and change it so let's say we'll make a message so we'll say co let message equal and here i'll put goodbye my lover that'll be the message and then we'll say it's whatever the message is right boom so let's comment out this last line right now and let's go ahead and run this and watch what happens okay so i should get pretty much the same exact thing all i've done is create a variable message putting it in here now watch what i can do i can put that same message within these p tags okay so first let's just start off by doing hello just so we can get a sense of how this is working and you can see that we've changed our inner html to this all right so notice the problem we're running into right when i do p tags it's still showing title tags it's because it's inner html okay so if i go back to this tag here this doesn't have any other inner elements if it had other inner elements it'd be able to change them so there's nothing for it to change here okay so here's what we want to do instead we want to actually wrap this entire h2 in a div all right so let's go ahead and copy pick um cut that paste it here so now here's what it should look like you should have one div and that div should have a h2 inside of it that's it okay one last thing we need to do is we need to give the id not to the h2 but instead we need to give the id to the div okay so the div should have the id not the h2 let's go ahead and try again so now i'm grabbing this one when i say get me um when i said get me title it's getting me this div right over here and then when i say change the inner html it changes this and to be even more clear what i can right click and rename all occurrences and we can call it title div okay so what i'm doing is i'm grabbing the title div and then changing its inner text and its inner html so let's go ahead and give that a try now and you can see that i get back hello now in order to make this hello instead of hello this message show up that we wrote remember let's use template literal so see if you could replace this hardcoded hello with this message right over here so take five seconds okay it'll be a good practice and using template literals remember to start with backticks and uh pause the video try to yourself five four three two one and let's go ahead and do this now so i'm gonna replace this with backticks back text right here okay and then this here is gonna become a javascript variable so we're gonna go like that and i'm just gonna put message in here okay let's run it now and you can see it says goodbye my lover and then there are other things i can do as well right so for example i can actually grab this div right here and change its style property and make it red or green or blue or whatever i want here's how we can do that let's go ahead and do that from raw html file and here for this div i'm just gonna pass in a style attribute i'm gonna say style and we're going to put a string here and i'm going to say color make the color blue so let's run this color is blue and put a semicolon here and run it don't put blue as a string because it's already a string and there we go goodbye my lover okay if i wanted this to be the background change the background color instead this is how i could do it there we go so we could do background color like this okay so let's go back to how we had this right here okay so now in order to do that i'm going to remove this entire thing let's do it from our javascript file instead so i'll go to my script.js and if you want to move around in a really comfortable way you could actually do command p and then do script.js and command p so this allows you to kind of move through without even having to use this um you know navigate through files like that so here i'm going to do title div dot style dot color okay and this actually will get me the uh color property of uh that div okay whatever color it is or whatever and what i can do is change it so watch this actually so i could say color and let's go red let's run this and i just made the color of this div red okay now another thing i could do is i could change the background color and how we could do that it says we could we can't put dashes inside of a variable name i could do background color like this and then we could hit run and now it changes the background color of it to red okay so there's a lot of stuff that we could actually do but i think the few key things that i want to show you more is actually like on click all right and how that works so that's going to be another really important one and you're definitely going to need to know that for tic tac to uh sorry rock paper scissors so let's make sure we have we have this figured out in order to do to to do this exercise i want to give you context so here's the context in our rock paper scissors when you go here okay and you run this app okay let's go ahead and open this up actually in its own browser let's go right here rock paper scissors right watch what happens when i click here it detects that i've actually clicked rock when i click here it detects that i've actually clicked a hand and when i click here it can actually detect that i've clicked scissors so we're going to do like a baby exercise that's gonna highlight this okay so we're gonna make a we're gonna make three squares and each square is gonna have a different color all right so we're gonna have a red square a green square okay a green square and a yellow square okay you could do it in whichever order and what we would want to do is when the user clicks when the user clicks on one of these squares we just want to console.log that property value so we want to read it we want to be able to we want we want it to say in the console log red right when we click yellow it should say yellow at the bottom right when we click green it should say green at the bottom it should be able to detect which square the user clicked on and be able to pull out that square's value so this is going to be an important exercise because once you can do this you'll be able to attach and do more functionality with the rock paper scissors button because remember when you click this a bunch of stuff happens but in order to make that stuff happen you first need to detect that a button was clicked and you have to detect which button was clicked was it the rock one was it the paper one or was it the scissors one so let's go ahead and do this uh red yellow green exercise so in order to do this we're gonna go back to our exercise page that we had open on this exercise we're gonna go to our index.html and we're gonna make three dips let's go div one we're gonna make a div two and we're gonna make div three and this is going to have an id of red this is going to have an id of green or sorry yellow yellow and this is going to have an id of green now we want to give this a width and a height okay so we want to give each of these with uh divs a width and a height so for width we'll say 100 for height we'll say 100 and then we want to give it a color and so overall says style and we'll say color is red okay because this is a red one and put a semicolon here and let's run this and let's see if something happens okay so nothing has happened yet all right so now let's make this red square over here okay how are we going to do this so if i hit refresh obviously that shouldn't be there i just made it to show you that it works so let's go ahead and style this so what are we going to do so i'm going to create a style tag and then we're going to give it a height of 100 pixels put a semicolon here we're going to give it a width of 100 pixels semicolon there and we're going to give it a background color of red i don't need to put a string here because it's all a string let's run this and we have our red square so i'm just going to copy this paste it over this and paste it over this so now i should have three red squares when i run it okay perfect now of course we're just going to make it called yellow this one we're going to make it green okay and id and then we also need to make the color yellow and then we need to make the background color green here let's run and you can see i have these three squares now what we want to do is we want these to show up side by side instead of up and down like this so this is a little bit of styling stuff but we're going to be really gross and we're going to style everything in line styling don't ever style like this okay but just for now we're just going to style like this so let's put all of these three boxes inside of another big box okay so let's put them inside of a container so just wrap all three of those um let's see if i could show it to you in a clear way cool so here you have your red div here you have your yellow div here you have a green div right we're gonna put all three of those like boxes that you created inside of this big div right here and then we're gonna style this one and we're gonna say display flex run it and now it should show it to put it put it in a flexbox or show it to you like this okay now what i want you to do is when i click this red one it should say red when i click this yellow one it should say yellow and i click this green one it should say green so let's work on that now how are we going to do this so here's the cool thing so first let's go ahead let's go ahead and grab our divs so this we're going to need this red div we're going to need this yellow and this green so what i'm going to do here is see if you can do this document.getelementbyid and use this technique here to get the red div okay i'll give you five seconds here five four three two one okay let's do it together now so i'm going to say a red div or let's say cons red div actually let's say let because we might change this later red div is we're going to do document.getelementbyid so let's go document.getelement by id and we're going to pass in red here let's copy this and paste and paste and if you're new don't copy and paste just write it all down because it's going to build your pattern recognition all right so i'm going to grab yellow here paste it here green here paste it here so now we have we're grabbing the red div the yellow div and the green div okay and here's what we're gonna do there's something called dot on click okay so i'll show that to you right now so let's go red red div dot on click okay so this will detect any event that's happening when a user clicks and we're going to set this equal to and we're going to create an anonymous function here and we're just going to say console log and in this console log we're just going to say console.log you clicked red you clicked red because we already know the click read right because we've grabbed this entire red div we grabbed this entire red div here and we stored it in this variable right there okay so let's hit run and let's click red and it says you click red okay and now we can just we've been removed you clicked and so when i click it it should say red now watch what happens when i click yellow nothing happens right when i click green nothing happens so red knows its own bounds and it can detect when it's being clicked on thanks to this dot on click and then we just pass this anonymous function and then we can do stuff here right so if you wanted to be able to write multiple lines of code here you could do this you know console log red say hi whatever right so then you could run multiple lines of code like this and you could run them so that says read high every single time i click this the other way of writing this here that we're writing the short that we're writing here the other way of writing this would be to say give me a function here with no arguments and then that just console logs it says red okay so that would be another way of doing this so when i click red now it still says red okay this is kind of like the old school way of writing functions and you could still do that but arrow functions are just make things look cleaner there we go try see if you can try to do the same thing for yellow div so when i click yellow it detects that i'm clicking yellow and see if you can do the same thing for green so when i click green it detects that i'm clicking green i'll give you five seconds five four three two one all right let's try it together so you know try pausing the video if you want to try it yourself or let's go ahead and do it together now so i'm just gonna go copy here paste paste and then this red i'm gonna change it with yellow and then i'm gonna copy that yellow right there and paste it here and this red here i'm gonna change it with green and i'm going to copy that green and paste it here okay so let's try running this and watch what happens so let's go run this now when i click red it detects red beautiful when i click yellow it detects yellow and look at how sensitive is right even when i click right right here so close it detects it like look at that when i click when i move just a little bit over it detects red when i move just a little bit over it detects the yellow so it's really good and now let's try green that's what we want okay because what what you guys are gonna do is imagine instead of red this was a rock so what you're gonna say is well you know let's say uh you say user chose rock okay so that so when you click red let's run this first you click red it says user chose rock and then maybe what happens next is you calculate um you know random you get random computer choice so maybe random computer choice says the computer selected you know maybe paper okay and then what do you do you compare these two against each other so you compare user choice uh versus computer choice um and then you figure out a player choice versus computer choice and then you figure out like which one is better so then you put them against each other and you you find out like what the result is right maybe you know if you lost you should get negative one if it was a draw you get a zero or you get a one if you won and then you show all of those on the screen so you know it shows the results on the screen like it says you win but on the dom right on the dom so another order of saying screen is really just dom so then it shows it on the dom document object model where the users can see it so that's that's really like the bare bones of how you're gonna start being able to do rock paper scissors okay so you really need to understand document object model and how dom manipulation works is the most basic version of it but honestly this is really all you need and you'd be able to do that rock paper scissors uh no problem so hopefully you enjoyed learning about dom and with that said we're now going to go ahead and start covering more stuff let's actually do one additional exercise on this because as you've noticed you had you had multiple things and you wrote the same code but multiple times here you know pretty much the same code multiple times here so one way i want to show you is you actually could even like loop through all of these okay and then actually like kind of you know do the thing that you want to do with them all at once so i'll show you now so what i could do is um at this level let's go ahead and give a class to all of these so i'm going to basically say class is color button all right and let's end the quote and let's do that for all of the buttons i'm going to go here and we're going to give it a class oh sorry let's copy this let's paste it and let's go ahead and do it here as well okay so now what you should have is three like squares or whatever right and uh the class is just color you could call it color square that probably is a better class name so color square color square color square okay now if we want to get all of these elements all at once what i can actually do is i can say console. actually let's do it like this i say con squares and i can say get sorry document dot get query selector all and then i can pass in the class that i'm actually looking for so in this case i'm looking for the class color square let's also console log this and let's run it all right and i get back a node list so that's exactly what i was looking for okay now let's see if i can loop through these before we loop actually what we need to do is let's run this and node lists right now is empty so that's not what we want we want to put a period here period color square basically says hey i want to look for the class them color square okay so this is classes and i'm going to select all the classes i'm going to return them to you as like an array or a node list perfect so now i have all these elements right over here all right so let's just make sure we're getting all of our color squares and console log this one is console log squares let's run this and boom you can see we're getting all of our squares right here because we're getting three html developments perfect now here's what one thing we want to do okay in order to do this go ahead and change all these two buttons because in rock paper scissors you're not gonna these aren't gonna be divs these are gonna be butt tens okay because if i go to here these are buttons okay these are buttons buttons buttons cool so let's go back here and we're going to change these divs to buttons so button end it with the button this is going to be a button as well button here and button there cool so now that this one div here has three buttons perfect so let's hit run and let's make sure everything is working as expected red red red yellow yellow green green green perfect now what we're going to do is we're going to give each of these buttons a value okay so we're going to give this button a value of red we're going to give this button a value of yellow we're going to give this button a value of green and let's go here and we're going to now say now that we're getting back our squares let's go console.log square let's grab the zero square and let's do value okay now when i run this code you're going to notice oops square is not defined ah squares of zero dot value let's do that okay and let's uh let's comment this out so we don't have to worry about this anymore comment this out and you can see we're extracting the value here and we're getting back red okay so that's a really good sign now if i do this again i'm going to get back yellow but if i do this again i'm going to get back a 2. so instead of repeating this code again and again here's a great point to write uh what do we write when we have to repeat a ton of code over and over and over and over and over and over again we use a loop and specifically let's use a for loop and let's use it for each loop okay so we're going to say and for each is one of the best loops so if i haven't shown you that up until now i'm going to show it to you now okay so four each is my favorite that one is even better than a um four of loop okay so let's go ahead and use a for each loop so i'm going to say grab squares and then for each square okay let's just console log so grab each for each square i'm going to console.log square.value let's run this and now you can see and we're going to comment this out and let's run and you can see i get red yellow green okay now what i can do is i can loop through this and basically make this function right over here multiple times okay so i can actually say hey for each square what i want you to do is actually update its on click property and set it to this function so now we can actually just go ahead and do that so i can say square dot unclick and we're going to set that to console.log that square's name okay and we're gonna take all three of these lines and actually comment them out because we don't need them anymore so let's go ahead and run and check it out red red red yellow yellow yellow green green green whoops we're getting some weird error let's run it again oh because that name is not a thing i'm sorry let's do dot value let's run it again and value is being pulled from this html attribute that we created right here value that's where it's coming from so let's go back let's hit run click red yellow green yellow green red right so look at how nice this became now we don't even need this big chunk of code anymore right we just have this here okay so let's i'll leave the comments there for you let's run click click click click click click click click click right so this is super nice and uh this pattern you're definitely gonna need it for when we're making our rock paper scissors game so keep this pattern in mind this is an example you're gonna be definitely using all right let's um dude times clicked okay so let's take our app um up by one level so this dom red yellow green squares app that we made okay so i'm going to click on this here all right and um and we're going to take it up up a notch so we want it to be where when i click it it actually says the number of the times clicked here zero if i click red one it should give me one if i click yellow four times it should give me four here and if i click green three it gives me three so how are we gonna do that we're gonna start combining a lot of the things that we were learning okay so see if you could attempt it but let's do this together so you can just get some more practice here so i'm going to create a object called times clicked it's going to keep in store how many times any of these colors is clicked so we're going to have red is clicked uh red just click zero times we'll have yellow zero times because start off everything is zero right green is going to be zero we just have it like this for now and then what i'm going to do is just on click here i'm going to turn this into a full on full function yeah like a function but not just that returns right away so we can write stuff here i'll comment out the square value part for now and what i'm going to basically say here is um hey basically what i want you to do is grab the times clicked object and put this in as the key so uh and and basically grab its key okay and we're going to say dot value so dot value will be whichever one i click remember so the dot if i click this the value is going to be red and what i'm going to say is increment that by 1. so if i click here the value is going to be red and then my object is going to go find the key where it says red it's going to find this and then i'm going to say plus equals 1 its value so it's gonna increment this by one and uh we also want this to show up like here we want it to show up right so now what i'm going to say is i'm going to say that square inner text we're going to change it to times clicked squared up value all right so let's go ahead and run this and i'll click this click red boom boom boom perfect okay and if you want the most updated version of this app i'm i'm imagining you're coding it up in your own rupple and that's great if you're coding it up here in your own replit but if you want to merge if you want to see the finished version you know it's going to be in here in this dom folder red yellow green exercise and then you just can come here this has a solution there so you can just navigate here pick the solution and then see it okay this is the most updated one this is the one i'm doing right now and that's how it shows up and i click here boom it shows up right so look at that right how nice is that if i click yellow 10 times it shows it to me click read 10 times whatever i'm doing it's it's keeping track of everything so this is where it it's nice to work with objects and things of that nature this is why we practice all these things so now there's a lot that's going on here there's a loop going on there's an event listener called on click happening we're going into this times clicked object and updating its key values and then we are manipulating the dom and showing that result on here right so there's a lot going on here and with just these few lines of code and so you know it's a lot but that's why we built it all up step by step so hopefully you enjoyed this exercise for you know furthering your dom manipulation skills now one thing one more thing i want to show you here is how to clear this so basically to start a new game because for rock paper scissors you're gonna need to know how to do that right so for example we play a game we keep track of the score right so that's why you need to learn how to keep track of a score and then when we hit this red it ends the game right so it clears the game and then you start from scratch all over again so if we go here we want to be able to add that functionality so let's go ahead and try to create this together okay so i'm going to say const clear scores okay or you could call it function as well whatever is easier for you honestly it doesn't really matter and what clear scores is going to do is it's going to take you know all of these squares here and it's basically just gonna clear up their inner text okay so i'm gonna say squares dot for each square i'm going to grab square.value and we're just going to set that to empty so we're just going to set it to nothing so we're going to loop through take each square set its value to empty and then that's kind of it okay so this is going to be my function that clears everything so this looks good to me now we just need to make a button that can detect that that button is being clicked okay so we will go here in our index.html file alright and we want to add in a button that says clear game or something like that so it's obvious so if i go back i see clear game button is right there so perfect oh sorry actually we're going to give this button we need to give it a id or something right so we can grab it so let's call this clear clear dash game that's fine let's go back into our that script and then i'm going to basically say once clear game div is do document dot get elements by id and the id in this case is clear game so i have my clear game div and um what i'm going to say is clear game div dot on click and i'm going to set its on click to this function right over here so i'm just going to clear scores just basically when i click on click run this function right over here okay so i'll put this function right over here and let's try it so basically right when i click when i click this button okay or maybe let's call the clear game button clear game button let's do btn so our code looks nice and clean on the same line and now when i click clear game button it should clear all the scores so let's give that a try oh it's not doing that so let's see if we can debug it and see what's happening okay i'm trying to change its value but instead of value what i'm meaning to change is the inner text so let's go enter text and we're going to set this text to zero and let's try now let's run this let's go back in the game there we go right there we go now it's doing it correctly clear game it starts from scratch what happens if we set the text to empty text so let's see what happens does this give us an error no so this this might actually be even better just set it to an empty string or a zero and you're good to go here so now this app is really coming out nice right this app is doing a really really good job and i mean yeah this is a great app looks really really nice so there you go like this here should give you a very clear idea of dom manipulation how to make things work like if you have this example to work off of i mean you're pretty set to go with dom manipulation so great job if you got this far nice work all right you're making amazing progress so far but here's what we're going to do now we're going to step it up we're going to go and start building a tip calculator app so check it out i'm going to go over here and we're going to do the following i'm going to open this up so hit that button right behind my face the top right and it's going to open up this this right here and we're going to go over to tip calculator and hit click on it okay and here if you type in let's say the bill total is a hundred dollars the tip amount is ten percent and you can see it already calculated it correctly right because if the bill is a hundred dollars and the tip is ten percent well that's the tip would be ten dollars so the total would be a hundred and ten dollars per person but what if we had more people what if we had two people so watch what happens when i hit plus boom the bill just got divided between two people and so it automatically tells hey john you need to pay 55 kazi you need to pay 55 so both people know exactly how much they need to pay what if i keep increasing this number well you see it keeps dividing between all of those people so if the bill was 110 dollars and you divide that by 10 people you get 11 dollars per person now watch what happens if i keep subtracting it's subtracting and subtracting and subtracting it if i go here and now subtract it watch it's not gonna let me go down to zero right i'll try a couple i'll try a couple more times boom boom boom boom boom boom boom boom nope does not let me go below one so these are some of the functionalities of this app that you'll have to keep in mind so for example what will you need to know how to do well you'll actually need to be able to get the user input from this field right here okay and this field let's say it's called our this one over here let's just say it's called bill total input okay then you're going to have to get data from this tip as well and let's say this one is called tip input okay also you're going to be able to you're going to need to be able to pull the number of people at any given time this one will probably be called let's say number of people okay so maybe these are all divs or inputs that you can have you know these are ids that you might be able to have access to okay and then this over here this right over here right this will be called per person total okay and all of these will be div ids okay which means these are special things inside of the html and you can get access to all of this so then if you want to get access to this hundred and ten dollars you'll be able to do something like per person total uh you know div dot inner text or whatever right and that'll get you access to what you're looking for and that's just to show you how the javascript portion will interface with this app okay and then based on that you're going to need to do things right so for example you're going to need to do some calculations that you know maybe take the bill plus the tip and then it divides that by the number of people and then when you do that you get this so there's going to be a bunch of things that you're going to need to understand but take a screenshot of this actually right now on your computer or with your phone because this will help you constantly refer to certain key elements on how this app is going to work so i'm going to now explain and kind of walk through this app and we're also going to have you set it up on a new repel so let's go ahead and do that now so this is going to be your tip calculator exercise so how you're going to get access to it so i'm going to zoom in here so you can see everything a lot more clearly okay and then we're going to kind of walk through every single thing so on the left hand side right you see projects make click into projects all right now when you click into projects you're going to see tip calculator so go ahead and click on tip calculator and now you're going to see exercise now don't go into the solution because once again if i show you how this works over here right let's run this and over here you'll see that we have project exercises project solutions so here's the tip calculator solution this will be the fully working app so you'll be able to type in 100 here and 10 and it'll calculate everything correctly you'll be able to hit plus minus minus minus so this right now is the working version okay so if you need to see the solution anytime don't go to it right now do not do it but this is where the solution will be and the main file that you need to write code for is the script.js file the javascript file the index.html and the style files are already completed for you so you don't need to touch them if you make the javascript work this entire app will work okay so that's where your solution is going to be but if you go to tip calculator from project exercises and you do 110 and see nothing happens you can't change the number of people it doesn't update your score there's no calculations being done here so the javascript here is not working okay so this is where your javascript is not working so uh this is your exercise file okay now what i recommend highly highly highly highly recommend you don't just start coding in this script.js what i recommend is you create a new rupple with these three files right and then get started okay so let's go ahead and do that now so i'm going to create a new tab here and we're going to go to replic.com all right now we're going to choose html css and javascript rupple and here i'm basically going to say let's go and say tip calculator exercise and i will hit create rupple okay now that this rupple is created what i recommend you do is go back go to your index copy all of this so command a command c or control a control c okay cop select all right in here copy it go here and delete everything in this index.html and paste what you just copied okay so once you paste it you should see an ugly looking bill app okay now the next thing we're gonna do is we're gonna grab the style file so let's go ahead and grab the style file copy it come back go to your style.css delete everything that's in here hit paste hit run and now the styling is complete so now our app is looking good okay so this is what style files stylesheet is for now the last thing we're actually going to do here is you see if you go to your script there it's empty so we're going to go ahead to our exercise copy the whole thing okay command a command c come over here paste it so now when you look here there isn't any real javascript code written up okay and what i'm going to do is i'm just going to collapse all of these functions and now what we're going to do is we're actually just going to walk through walk through like all of the um all of the things that you need to know in the gotchas right and then you'll be able to just get started and code it up yourself okay but just let's walk through it together all right so you're gonna be building the tip calculator app now there are a couple of things that you're gonna need to know all right otherwise this pro this project is gonna become way harder for you and i don't want that to happen okay so i want it to be something that you're able to kind of grasp so there are a couple of functions you're going to need to know their names all right and you have access to them so you have access to calculate bill increase people decrease people these are the functions you're going to create these are the only three functions you'll need and make sure to give them this exact name they're already made for you you cannot change their names if you change their name your app will break i'll explain why these functions are hard coded inside of our index.html okay so for example when you are typing over here typing over here every time you type on key up we're calling the calculate build function so that function is running literally every single time you type here that's why that function is there you don't need to change that name the other function i told you about for example increase people and decrease people function those are also written here so for example you can see here increase uh there's a plus sign right there right and then there is a minus sign right there and then there is a number right over here every single time you click this plus button right over here every time you click this plus button this function increase people will run every time you click this minus button over here this function decrease people will run that's what's happening so that's why these functions have special names do not change them unless you change them here and then you're fine okay but i just don't want you to fall prey the next thing every time you clickety clack and type anything in here or here anything anything you type in here here you're gonna run this calculate bill function okay for your tip um and your build total okay so calculate bill and then you also have calculate bill twice you can see that so this calculate bill is for this one and this calculate bill here is for this one okay so every time you type in any of those fields calculate bill automatically fires and runs going um and then the other things you'll need to know are a couple of things like you know you have this bill input and you have a tip input right so you have ids like build total input and you have other ids like tip input so let's look for temp input you have tip input okay now because i'm nice all right not everybody's gonna be this nice but what i've done for you is i have put it all into the javascript file everything you need to know so you don't have to go to your index.html file pretty much at all okay you don't have to like go and look at anything because what i've done here for you is i've already just told you hey here are the three functions you need to know calculate bill increase people decrease people i'm already letting you know these functions are hard coded in the html so you cannot change their names and then i'm already letting you know these are all the div ids you're going to need access to so you're going to need access to build total input this is going to be this div or this input field so that's going to be that input field you're going to need tip input okay this is going to be the user input for tip you're going to need access to you're going to need access to so let's just draw these again that's right there tip input is right there you're gonna need access to number of people which is right there this is a div okay so this is a div id so once you get the div you're gonna need to do dot inner text to get to get these okay and then you're going to need access to so you're going to either for this i think you might need to do dot value one of those dot value or dot inner text okay try both of them and it should work one of them should work and then you have per person total which is right there so those are the div ids you're going to need access to i'm already telling you their exact names so you don't have to look in your html file right over here on line 20 i'm telling you hey get global access to all of these inputs okay meaning just get access to all of these inputs right here before you start creating your functions because your functions are going to need access to them so you know if i were you i'd do something like const let's say bill total input div or something right and then or build total input and you can do something like document dot get element by id and then pass in bill total input okay this is just an example of how you would get this specific one right over here all right so what i'd recommend is you grab not just this one but all of them so you have all four of these divs and have access to them that's what i would recommend you do here going underneath here i would i recommend that on line 24 line 25 get number of people from number of people div so once you get access to these four divs bill input tip input number of people div and per person total div you can use the number of people div and from there you can actually get access to the number of people by pulling the dot text okay and remember to type cast so anytime you get a thing so let's say thing input and then you either do dot value or dot inner text but both of them are going to return to you a string that's going to look like this and then you call the number function on it and then that will turn it into an actual 10 okay and then you'll be able to do math on that because remember if you take 10 string and you add another 10 string to this this is actually going to give you not 20 but 10 10 10 10 10 okay which is going to be silly so you want to do you want to do it the right way okay so make sure you type cast it use that number function okay so this is where you're gonna set up all your globals and then you're gonna be good to go now let's go into each of these functions at a high level so you're gonna create three functions here all right and you're gonna define these three functions so calculate bill calculate bill will pretty much run all the time like you should calculate bill when a user types it here automatically you should calculate bill when the user updates the tip you should calculate bill when the user hits this plus sign you should calculate the bill when the user hits this minus sign and ultimately what calculate bill is doing is it's updating this number over here the total per person owed okay that's the ultimate job of calculate bill okay you can see it says calculate the total bill per person that's what it does and then if you go here there are ample ample ample amounts of tips for you on how to actually do this okay so i have tons of notes for you as you go and code this along so i hope you don't have too much problems there okay i'll guide you through everything hey get the user input and convert it into a number so i'm reminding you to type cast here hey get the tip from user and convert it into a percentage hey get the total tip amount calculate the total amount and then update it on the dom and show it to the user right so updated on the dom means update this right here so calculate bill hopefully that kind of makes sense at high level increase people what this will do is splits the bill between more people all right so what should happen here well it walks you through it should increment the amount of people amount of i'll just say amount of people then you update the dom with the new number of people all right so what does that mean so you increment the amount of people and then once you increment it you make sure that you write that to the dom like you change this one to a two for example and this function runs increase people increase people function runs every time you hit this plus button so when you hit this plus button that function runs when you hit the minus button decrease people function runs okay hopefully those are kind of selfexplanatory uh but hopefully that makes sense and then at the end you want to calculate the bill based on the number of people so i'm already giving you a hint you're going to be reusing some of the functions you've created previously okay perfect so i'm going to close this go here decrease people it splits the build between fewer people okay so there i'm gonna go over the similarities between increase and decrease people right if you look at this increment update the dom calculate the bill decrease people decrement amount of people update the dom with the new number of people and then calculate the bill based on the new number of people so they're pretty similar and how they work so once you figure out one of them the next one will be really easy the only difference between decreased people is you when you hit plus you can go as high as you want but when you hit minus you shouldn't be able to go below one because it wouldn't make sense right you have the bill but then how come it has zero people that owe it that doesn't make sense so it shouldn't have zero or you can't have negative people right so you can't decrease the number of people to zero or negative so here i recommend you write a guard clause i haven't shown you what a guard clause is but basically it's just an if here it's a fancy name for just an if statement and if statement is just something along the lines of this okay if something something is not true i'm just going to write it in english just return and what that basically means is this will end the function so if you say return it just won't activate any lines that are below it so let's say you were gonna decrement the number decrement the number of people here but here you check for the condition is people equal to one one or less you go hey is people less than or equal to one if people is less than or equal to one then don't run any of these lines of code right like just stop the return here is just like hey stop the function end it right here okay and and you're not even giving it anything to return just return stop right here so that's an example of how that would work okay so i'm gonna get rid of all of that now so that would be your decreased people function okay so i hope that this exercise kind of gives you everything you need to know and now you should be able to get started working on this project i wish you the best of luck and give it your best shot try as hard as you possibly can i really believe you're gonna make a lot of progress and i think that if you really push yourself you should be able to do this if you don't get this done don't get discouraged it's okay i'm right here right we'll code this together i'll show you the solution next um and yeah we'll just walk through this together okay so pause the video now give this a shot and try to nail this and get this done and then what i recommend is you come back and walk through the solution because our solutions might be different and you might be able to pick up you know a lot of things from how maybe i solved the problem versus maybe how you solve the problem okay and remember in coding there always can be multiple different ways and one way isn't necessarily wrong okay it's kind of an art form so we're gonna have different ways where we get to something so that's it um i hope you enjoyed this and uh get to working and i'll see you soon all right so i hope that you gave it a try and if you got it good job for solving the tip calculator if you didn't it's okay we're gonna do it now let's do it together so let's build a tip calculator so here we're going to walk through right and let's pay attention to the instructions the first thing is we're going to get access to all of our inputs and divs okay so our bill input tip input number of people div and per person total diff so let's get access to all of these now so i'm basically going to say cons bill input and we're going to say document.getelementbyid and we're going to say bill input total build total input and then we're going to get access to our tip input so we're going to say document.getelements by id and i'm going to paste in tip input because these are the specific ids i need then let's get access to our number of people div and we're gonna do get element by id and then we're gonna paste that in right there number of people and we're gonna do get access to our per person total okay and this will be per person total so we're going to get access to all of this and what global access means is because we're defining it all the way up here all of our functions will have access to all of these divs all right another thing we're going to need is we're going to need the number of people from number of people div so now i'm going to say let number be why i'm saying let here is because the number of people is going to change so sometimes it's going to be 1 sometimes going to be 2 three four five right so number of people is gonna change so we're gonna say let number of people equal we're gonna go to our number of people div right and then we'll try and see if we can do inner text and let's type cast it into a number now let's see if any of this works okay so in my calculate bill i'm just going to try to do a console log and i'm just going to say hey show me number of people and let's just see if like any of this is even working right so if i type in here every time i type it runs my calculate bill function and every time it runs that it actually shows me my number of people right my number of people is one so that's why i just keep saying one one one one one okay now i can do console log and we can also do bill input right and i can get the bill input value and we can console log that too so i can go here and say one two three and you can see we got one two three at the bottom right and the console log abc and i got abc at the bottom hopefully you can see that it's right there perfect so it looks like i'm able to uh get information from from these divs and things so that's working so i'm going to now remove these console logs because i've verified what i needed to verify now i'm just going to follow the instructions that i have written here so get bill from user input and convert it into a number so i'm gonna basically say hey bill input and what i'm gonna say dot value should honestly get me the actual bill now i should just have to type cassette to a number and this should get get me the actual bill and now let's just save it to a variable and we'll call that bill let's console log bill and uh let's see what happens okay so let's run our app and one two three right and our bill is constantly being printed out to the screen and it's a number so that's that's good so i'm gonna remove this console log don't need that anymore now we're gonna get the tip from user and convert it into a percentage so we're going to say const tip is equal to we're going to do the same thing and we're going to say tip input dot value this time and we're going to actually convert it into a percentage right because that's what it says convert into a percentage divided by 100 so we're going to divide it by 100. now let's console log the tip percentage let's run this and i'm gonna do 10 and notice it gave me 0.1 because 10 divided by 100 is 0.1 so that's perfect right we're getting our tip percentage that means it's 10 great so i can get rid of this console log don't need that anymore all right now we're going to get the total tip amount and how we're going to get this is we're just basically going to say you know it's going to be bill multiplied by tip percentage right so now let's go ahead and console log this and we're going to say tip amount tip amount okay and i'm going to just put it as an object so it prints out kind of nicely so let's go ahead and let's do writing this is the same as writing this both are the same so this is just like a pro little pro hack all right so i'm gonna say 10 and tip amounts did not get updated interesting so let's go ahead and fix that let's run this again let's say 10 oh because i'm not putting in a bill total so let's go ahead and do 100 10 on that tip amount is 10. uh what if it was 200.7 would be 20 dollars let's do 300 and you can see that tip amount is calculating correctly right it says 30. uh that's perfect so it looks like this is working so i'm going to go ahead and remove this console log don't need that anymore all right now next up we need to calculate the total so the total is going to be tip amount plus bill so let's go ahead and do const total and we're going to say tip amount plus bill okay let's go ahead and console.log that now and let's run and when i type in 100 and i type in so uh 10 so right now tip is assuming zero percent so now we have a hundred oh by the way let's do that little trick we'll do this wrap it in an object let's try this again and we're going to say 100 and we're going to give a tip of 10 and you can see total is 110. right let's give a tip of 20 and total is 120. so this is working exactly like how we wanted to let's get rid of this now now we're going to calculate the per person total where we're going to divide by the number of people so that should be easy to do per person total and we're gonna do total divided by and we already have access to number of people right here right this is pulling number of people is pulling straight from here okay so it's one and we're type casting it into a number so it's going to not be a string of 1 but it's a actual number of one right so we're going to do that divided by number of people and now let's go ahead and let's show that so we're going to do per person total let's run this and we have 100 tip is 10 and per person total is 110. it's because right now we're not able to increase the number of people right but let's say i went to my html file and i just hard coded that one to a two let's see what happens i'm gonna hard code that to a two let's run our app and let's see if this works so i'm gonna say bill is you know bill is 100 and then tip is 10 and you can see that it says 55 dollars per person right which which makes ample amount of cents 55 per person why because it's 110 110 divided by two people is 55. so now let's go and change that hardcoded to back to a one let's run our app again and uh because we want to change that dynamically right we don't want to like hard code it in so make sure that this is back to a one when you run your app perfect so what's up next let's go down and let's see what's up next and now update the per person total on dom and show it to user okay cool so let's go do that so i'm gonna grab per person per person total div because i have access to it from up here oh let's just call it per person total diff okay so per person total div we have access to it up there let's p yeah per person total div and we're going to change its inner text to uh per person total right over here okay so i'm going to say per person total oh i'm sorry okay i'm uh yeah i'm just kind of misunderstanding this but like what i mean is this is going to be total per person okay so that's that's this div right here per person total so we are updating it correctly okay so let's just see what happens now let's run this let's go ahead and type in 100 let's type in 10 percent and let's see what happens we're getting back 110 so that's good but we want it to be in dollars so let's go ahead and do string template literals and we're gonna wrap it in this and just put another dollar sign so this dollar sign will just make sure this is javascript and then this dollar sign will actually put an actual dollar sign so i'll say 100 and we'll do 10 and when we go here you can see that it says 110 dollars okay great now what happens if we have a bill that's something like this 148.5 what happens if we have a bill that's like decimals you know or has maybe weird decimals and now you can see that it started showing like lots of decimal places right like so for 135 dollars and 52 cents it says 149.00 like how are you going to pay that in cents that doesn't really make sense so what we want to do here is we want to do a dot 2 fixed so we're going to do that now so you can actually do dot to fix two and pass in two right there and it's gonna make sure that it doesn't go beyond two decimals so let's try some number again like that and you'll notice that now it actually just goes to two decimal places now what if the bill is more like 3 000 or something like that it gives you 3 300 but it doesn't you know it'd be nicer if it kind of put a comma in there right so if you want to kind of do that what we can actually do and this is a cool uh trick that i learned that i use a lot actually so that's why i kind of want to show it off here you can do dot locale string and just pass in um en us so it's just gonna format it to us currency like a dollar currency or whatever right and uh now if you try some bill right you notice that it's actually putting that dollar sign and that comma or sorry not the dollar sign but the comma which is nice so like if you get some like i don't know you're never going to have a bill this much when you're eating food right but all the commas are there and if you get up to 25 million the commas are still there so this is good now we just want to make sure that we still do that dot to fix thing so let's do two fixed and pass it to two places right so fix it to do decimals first and then turn it into with commas let's try it so let's try some big number and let's do decimal places like crazy and notice that the decimal places here don't change okay so great all right in this case all right lesson learned so it seems like if you try to use dot two fixed and locale string it doesn't work so just pick one in this case we're just gonna stick to dot to fix for now okay so without making it much more complex and that'll just take care of the decimal places which is perfectly fine actually but yeah our decimal places will be fine and then you can give whatever percentage tip and everything will work out as expected so let's get rid of this console log we don't need this anymore so i just got rid of it perfect so now it seems like our calculate bill is doing exactly what it needs to do write it it calculates the bill in a really intelligent way so now all we got to do is increase and increase let's work on increased people so here it says increment the amount of people well i already have number of people number of people right here in line 29 so what i'm going to do is i'm just going to copy this and paste it here and i'm just gonna do plus equals one so we're just gonna increment the number of people by one and then we're gonna update it on the dom so we're gonna grab number of people div which is gonna be this div right here okay and we're just going to pop in the number of people that we now have so we're going to say number of people is equal to number of people dot inner text is equal to number of people okay so now let's run this and let's hit plus and you can see that every time i hit plus it actually increments the number of people and then it shows it and that's why you can see that it's showing it exactly how we want it to right and right now minus doesn't work okay so that's fine we'll do that in a second but watch what happens when i do this the bill doesn't calculate the right way i have 10 people okay so let's run this again let's go a hundred dollars tip is ten percent okay and let's run this and you can see it's saying everybody owes a hundred and ten dollars per person that doesn't make sense because 110 dollars that's eleven hundred dollars so how come the bill started with 110 dollars and now we owe 100 110 or something's wrong so what we need to do is once we do this we need to recalculate the bill based on the new number of people which is super easy all we have to do here is reuse the function we just created so just call this function and that should handle everything so let's go ahead run this i'm going to say we have a hundred dollar bill i'm gonna say we're tipping let's say 10 number of people is two and boom look at that it's 55. why does it work because remember per person total is calculated total divided by number of people so when you update number of people here this number of people updates and that's the number of people calculate bill function has access to so when you run it again it just recalculates this with a new number of people after you change them pretty beautiful right so very very simple let's go ahead and do the same thing so this code is going to be really really really similar for decrease so decrement the amount of people instead of plus one we're gonna do minus one number of people div we're gonna change to update that and then we're gonna recalculate the bill so it's gonna be very similar to increase so watch what happens when i have a hundred dollars i have a ten percent tip i can go one way and i can go backwards look at that how nice but here is the problem i can go more than i can go less than one watch i went to negative one what is that i'm going to negative numbers what is happening how can i have so what the restaurant now owes me for eating there like they should you know what i mean like the royalties there to eat you are special you are a royalty so if you went and the restaurant owed you money i would understand okay fair enough because you're here watching this tutorial you're top of the food chain all right while everybody struggles out there you're here grinding it out so then you can level up your career provide for your family provide for your kids you're a champ tap yourself on the bat pat yourself on the back do both tap and pat do them both all right so we don't want to go below one person so we're gonna add what i call a guard clause here basically going to say if number of people is less than or equal to one homie just stop just stop stop don't run this simply here means end the function right here and the decreased pupil function on line 70 and don't run any of this so let's try this again and i'll explain 110 now when i hit minus watch what happens hit minus nothing happens when i hit plus it works when i hit minus it works but when i hit minus now it doesn't work so what is happening when it's one or less than one it just says hey i noticed that this function is running but i want you to only run here and when this condition is true because number of people is one right just one less than or equal to one yes it's true so then the code just stops and doesn't end up running any of this now in the other case scenario where a number of people is let's say two it goes as two less than or equal to one and it goes false so then it doesn't run this but it ends up running all of these here okay so that's why it's a guard clause right so we're just guarding the entire code base and we stop it okay to prove to you i'm just going to say it's a long number of people so i'm going to stop okay so let's go ahead and uh run this and watch what happens when i hit minus it detects one is one or less than one so i'm going to stop right when i go here and try to run minus see it doesn't happen it doesn't happen the console.log statement doesn't happen doesn't happen even here it doesn't happen even here but when i go one more below boom one is one or less than one so i'm gonna stop one is one or less than one so i'm gonna stop so it's detecting it right every single time every single time okay so we can even like leave a little message for the user and say you know hey you can't go you cannot less than one person right so now like the user can see this message and no okay i can't do that right so plus plus plus minus minus minus hey you cannot have less than one person and if you want to make it more intrusive and more visible to the user you can even do something like an alert so now we go 100 10 percent tip plus plus plus minus minus minus minus says hey right you cannot have less than one person so this lets us know right there that that's not a possibility so you can do it whatever way you want okay you could throw an error if you want and like that'll kind of crash the app and if you want to be really pro i can give you one like kind of pro javascript tip is uh what you can do is you can throw an error and show the user they're doing something wrong but like kind of in a sneaky way so here you can say you can you can replace this alert with something called a throw and they'll throw an error so you do throw and then what's nice about throw is you won't even need that return like or just leave the return here but like you won't really need it okay so you can do that return pattern i'm leaving this return here to show you use a return pattern again and again because that's normally what i do but here if you want to throw an error and really let the user know you could do that right so for example boom 100 10 i try to hit minus and it throws like a red little error at the bottom says hey you cannot have less than one person so it's very clear that the user is trying to do something that they're not allowed to do and like you can make it visible all right so there you go let's see if this entire thing is working or not let's open it up here and let's check right we just built this and we're excited right let's see if it works so we got a bill we just went and ate at a nice restaurant let's say you went to cheesecake factory you took your family out i mean it's a nice night out right they gave you a big fat bill for 375 dollars maybe you maybe you brought some friends with you and they're like hey mandatory tip is 20 so you all start freaking out who's gonna calculate it what is it gonna be what's happening right so you go okay we got the tip is you know 10 or we're gonna give a 20 tip so that's oh that's 450 right now but you only have one you only have selected as one person but luckily you brought your friends with you right you brought the entire gang hopefully so you know you got you got uh juanes you got daniel you got frankie you got lance you got nas i mean you got the whole gang up in there right so you got all these six people look at that your bill is only 75 dollars that's not too bad right that's not too bad that's that's easy maybe maybe you bring in two other people from somewhere you go to them and you grab them and you're like hey come join our party and split the bill with them too now the more the merrier am i right you got 56.25 i mean this is at this point the restaurant should be paying you right this is nothing cheesecake factory nice night out with the family and friends i mean come on that's a bargain the 20 tip right so this is this is really nice right this is really nice app that we could actually use and what's amazing is it's already hosted online thanks to repple yeah it's deployed on the interwebs so you could put it on your portfolio you could do whatever you want with it's live ready to go okay ignore that sound that was i'm having a focus session and it makes this little bang so now what i want you to do is you're going to grab all of this javascript code that you wrote go back to this exercise file okay and go to tip calculator go to exercise go to the script js okay and then delete everything that's in this exercise file okay and then paste your code in here all right and give it a try and see if it works so go and run it so go to your now project exercises you should be able to go to tip calculator you should be able to type in things like 100 10 plus plus plus plus minus minus minus it should all work smoothly okay so make sure you go ahead and do that update your exercise as exercise as you go so you have the most uptodate version with all of your projects completed all in one place nice and ready for you to use all right that was the tip calculator i hope you had fun i had a ton of fun actually sharing it it's 11 53 p.m i was supposed to have a date night with my girlfriend we're gonna watch the boys the new season of the boys is out i mean god that show is good season three started watching this indian movie called rrr phenomenal and um about to move soon you know leaving marina del rey man a lot's going on you know a lot's going on and instead of doing any of those things you know i decided to be here and uh build this app with you and do it together so it's gonna be awesome so i hope you enjoyed it i hope it was awesome let's continue let's learn more javascript i hope you're excited i love your beautiful face and i'll see you soon let's go welcome back now i want you to start getting ready for rock paper scissors and by the way just a sneak peek you're going to be doing something with netflix soon so one of your projects is going to be netflix okay so i hope you're excited about that this is going to be with vanilla javascript so this is just a little sneak peek now what we're going to be doing is i want you to start getting ready for rock paper scissors because we're about to start building it soon but there are just a few things that you need to understand for this all right so for rock paper scissors one of the dom manipulation concepts you're already good with like for example when you click a button right so for example if i go to rocket processor solutions over here and when i click this to click and detect the button you've already learned this concept so that's good um when i click the hand you've already learned that concept so that's you're good there you learn the concept of being able to hit this red button and then it clears everything up right so dom manipulation concepts you've learned so i'm happy about that i think the things that you still need to know are how to select an item from an array so let's go ahead and just do a practice exercise together so remember you're going to be coding in your playground.js and i'm going to be coding in just playground.js okay so this one is for muah qazi this other one is for you okay so this one is going to be with all the finish titles so how do you select an um item out of an array so let's practice that so here let's say we create a new variable called uh fruits okay i'll just do let fruits and let's see did we make it earlier yes we did okay so i don't have to i'll just change this to a let okay i'll bring this down you have to paste the whole thing in we'll just do this and i'll do it up until here okay so fruits is only going to be a couple of items now let's go ahead and make sure that fruits is we're able to console it so i'm going to say console.log fruits of zero let's run this okay one second it says it's already been declared so maybe i don't need to even say let here let's run this okay cool so i have this fruit banana showing up now how would i randomly select something from this array okay so let's make a function we're going to call it okay random selection from array this is the function in here we're going to put our fruits and now since this is inside of a function you can say kant's fruits and you can create a new fruits here okay and the scope of this fruits is only going to remain within the function and outside of the function this variable will be unknown okay and let's move this down here and let's just run this function for now so i'm just going to say console.log random select from gray or let's say random fruit okay and let's say that this takes in items let's say it takes in fruits and it randomly returns them okay let's uh take this array out i know i'm making go back and forth yeah yeah yeah whatever just just it's okay all right i know i'm making go back and forth but it's all good um it's not supposed to be inside of this function let's put it outside of the function okay because i'm making a mistake so it's my fault i apologize for this confusion and what we want to do is you want to pass it a fruit and it should randomly return the fruit so an example of this if you call random fruit and you pass it in you know let's just say or whatever you can pass it numbers as well so if you pass it in one and two it may be randomly returns two okay and if you run it again it might randomly return one so that's what this array here does all right so it's going to get fruits and it's going to randomly select now how do we randomly select so one thing you have to remember is we have math.random and this will give us a random number okay so let's try it math.random and i'll get a random number now if i multiply it by 3 i'm always going to get a number that's going to be less than 3. now to make these numbers useful because right now there are these decimal numbers which are kind of useless we're going to floor all of this we're going to call a floor on this all right so now when we press up and keep running it press up and enter up and enter now notice i'm only going to get numbers between 0 1 and 2. okay so i want to be able to get 0 1 2 and 3. so for this the range should be because this is 0 1 2 3 i should be able to select randomly between these four numbers right here okay so in this case i might have to do math multiplied by four so then i get a number between zero one and two and three okay so i'll always get that so keep running it i'll never get four i'll only get zero one and two and three sorry zero to three okay so that's the trick that's how we're gonna get that now this is this over here is the max right for multi where i'm multiplying it by four that is the that's the length that i want it to be okay so let's go create a variable called max length is going to it's gonna be four or yeah four okay and now i'm gonna write this function i'm just gonna replace it with max length so now when i change the max length to let's say i wanted to give me between three items i just change it to a three i run it and now i get between zero one and two so this is going to be dynamically changing so in order to account for that we need to pull from fruit's length okay so we're gonna say math.random multiplied by fruits.length this will give us a dynamic array and then we want to wrap this in math.floor okay and we'll say random number and then what we're going to do is we're just going to return fruits whatever that random number is so it's going to be 0 1 2 3 and 4 or whatever whichever one right now let's run our random fruit function and pass it our fruits that we just created right over here let's run it and let's see if it does what we want it to do okay so i don't need to say let over here let's just hit run cool so i got a pear let's try it again i got a banana let's try it again i got an orange let's try it again orange let's try it again orange let's try it again orange banana pear pear banana right so just randomly picking and it never breaks okay so you can see how this is working right every single time i run it run run run i get back a different fruit okay and so let's console log what number is every single time random number okay let's run it boom you can see the random number is two so it gets zero one and two so i get the orange random number is one so i get the apple one apple zero banana okay so that's how this random fruit function uh works so this is definitely one that you needed to know because in order to be able to do what you're going to do in rock paper scissors you're going to need to know how this works more specifically speaking there's going to be a function in rock paper scissors that you're going to need to implement which is going to get a random computer choice and the array you're going to have is going to be rock paper and scissors and you're going to use need to essentially lose the same logic to randomly pull a computer choice out of this array of three elements rock paper or scissors okay so you're gonna have to figure that one out one more thing you're gonna need to know before we get into rock paper scissors is so this shows you select a random element from an array that's what this piece of code shows you the next thing you're actually going to need to know is some more advanced conditional statements meaning how do you chain if with an else if with an else so you're going to need to know that okay because that's how you're going to be able to implement your rock paper scissors game so i'll give you an exercise there are three different weathers rainy sunny and overcast okay and what we want to do is if the weather is rainy i love rain so we should give that a plus one score or a one score uh we don't need to put plus one here right uh if it's sunny then we give that a score of negative one because i don't like sunny weather okay so i freaking love rain man like i love rain rain is so awesome sunny um it's all right and then overcast would be zero i also i mean like for me i also love overcast so it is what it is you know um i would want to give this a score of one but since for this example we're just gonna do this okay because i like rain more than i like overcast so this is how we're gonna do this app weather scorer this is gonna be our function and how are we gonna do this so see if you could give this a try and write you're gonna need to write essentially three if else if else conditions okay and they're gonna need to follow this pattern let's go ahead and do it together if you can't figure out yourself that's totally fine okay i'm gonna give you five seconds five four three two one all right let's do this together now so i'm going to basically say if so the the weather score right it's going to take in an input from the user so it's going to take in what the weather is right now so we're going to say if the weather is rainy and you can use three equal signs here as well or two equal signs both will work in this case if weather is rainy and we'll also create a variable called score that'll keep track of the overall score i'm going to say if weather is rainy then we're going to do score equals one okay and now we're going to say elsif weather is sunny we're going to say score is equal to negative one and now you could do an else because we're just going to assume it's overcast because those are three choices so you could do else or you could also do an else if okay because you can chain as many elsifs as you want but you can only have one else and then we're gonna say else score is zero and then at the end we want to return score okay so hopefully you either got this or try it now without like removing your code from scratch and then writing it again from scratch and you can try it that way too and see if you can get it and now we're gonna call console.log our weather scorer app that we just made and we're gonna give our weather score rainy and let's see what score it returns wait let's uh comment out our allure fruit stuff up here let's run it and you can see we got back one because it's rainy now let's try sunny now that's a negative one okay and then we have overcast there we go now if you want to take this to a next level you could even chain these so for example we could even chain these and go uh if weather equals equals rainy and maybe you can have two types of weathers you can give you can have somebody can give you multiple like um weathers or something right like you could get they could give you it's rainy but then there's also overcast or you know it's a mixture of two so then you can chain them together like that so you could go if weather is rainy let's just say i'm giving i'm just gonna give a very rough example so we're gonna say weather and then we're gonna say whether two and whether two is overcast then maybe this gets a score of two because it's two of my favorite weather's in one where there is rain and there's overcast all right so here's an example of doing that yeah i have two other conditions here and i'm checking if both are true then score is one now let's go and pass both of these conditions so i'll say uh first weather is rainy and then the next weather is overcast right in this order oh wait sorry overcast let's put overcast here and we'll say the score would be two points in that case so if whether one is rainy let's give that a try and boom we got a score of two okay so that way you can actually chain conditions okay and then here let's see if i can do this right so let's go else if and now we'll do another else if right here and then in this elsif i'm going to say check if just the first weather is rainy then give it a score of one let's remove that boom let's bring this all together so now let's see if i pass just rainy and maybe i don't even pass a second argument let's watch what happens boom i get a score of one okay let's try i pass sunny here and let's run this i still get a score of one so watch what's happening this condition ran over here and it said hey check if the weather is rainy and weather two is overcast okay so we ran this and we saw actually you know what this is true but this one over here is false because of this and statement here both of this becomes false so the entire things the entire thing becomes false so then we don't run this check then we go to this else if here then we check is weather equal to rainy it's the first weather equal to rainy and we go yes it is and then it gives it a score of one okay and the order here matters because if you put this statement above well then if the weather was rainy and overcast it would still only get a score of one because it would run this statement and then just end because it's chained with an else if not an if so else if meaning if this if runs then this if will not run but if you remove that with just an if now both of these will run regardless okay so that's why this statement elsif is like an important one to keep in mind and also you can check multiple things why this will matter is in rock paper scissors you'll have computer choice here and you'll have player choice here and you'll need to compare if you know rock and maybe the computer picked or sorry let's it's yeah so let's say computer picked rock and you picked um let's say scissors or paper you'll have to give yourself a score of one whether you won or not okay so if you want in this case you have to give a score of one otherwise zero otherwise negative one if you lost so this will come in handy when you're building that game okay so this is just kind of foreshadowing that so this was a little contrived example but if you hung in there and you did it great job pat on the back and with that said i mean you're you know at this point you're pretty much ready to actually start building out rock paper scissors i hope you're excited all right i hope you're excited we're now going to work on the rock paper scissors app so let's go back here now where you're going to find this app is going to be in your projects over here okay so let me go back to this here so i i can get you a little familiar with this if you haven't really been familiarized with this yet so what this is on this right hand side is you have some lessons you have project exercises and project solutions okay so these are fully working apps got it these over here are exercises meaning when you go to rock paper scissors in under solutions you're going to notice that the entire app works but if you hit refresh here and you go into project exercises again and you go rock paper scissors under project exercises you will click and nothing will work meaning that the entire app is made but it's missing the javascript functionality okay so nothing dynamic is happening with this app as a result of that so that's where exercises will show up now to find where to go and code these exercises on the left hand side you have this folder called projects so you're going to click projects inside here you're going to have rock paper scissors i'm going to click rock paper scissors so we're going to go to rock paper scissors and here you're going to see that this project has an exercise and a solution and every project will have its own exercise and will have its own solution folder okay so if you look at them exercise solution folder uh the exercise folder has your html your javascript and your style sheet solution has the same thing okay the only difference between the solution and the exercise folders is going to be the script this is the only thing that's different between the two okay these two are not the same you will need to update this inside of exercise i would highly recommend do not look at the solution sheet until you give this project a try on your own okay that's gonna be that's not good you're not gonna improve like that okay so seriously just like don't do it it's gonna be a waste of your time waste of your effort like otherwise why are you watching this tutorial just don't watch it go do something else right so if you're gonna do it then do it right make sure you do the exercise first and give it your best attempt even if it takes you hours or days it doesn't matter do that because you're gonna get better so let's go into you know this file right over here uh let's so what we're gonna do is we're gonna familiarize ourselves with what's inside of here okay um and then we're probably gonna move over into a new rebel okay so i want you to actually do this exercise but outside of here because if you try to do this here it's not gonna be the best experience plus i want you to become a better developer so i want you to actually create a new rupple with all three of these files in there and then try to code it up so you can see how to do this from scratch okay so as a matter of fact why don't we actually go ahead and set up the new repel now and then we'll walk through the code together okay so let's go ahead and do that so hit open up your open up a new tab and then just go to replit.com just like this replit.com we're going to select the html css javascript okay click here and then just choose uh great rapple but we're gonna in this case say rock paper scissors and hit create rubble perfect now inside of here we just have index script and style okay so we have these three files now here's all we're going to do we're going to go back we're going to copy so what i'm going to do is i'm going to do command a or control a to copy this entire everything that's inside of this index.html i'm going to copy it right click and copy let's go back here let's delete everything that's inside of here right click and i'm going to paste boom just pasted that code okay so now my html is pasted if i run it you're gonna see it doesn't look very good but it's there okay then we're gonna go ahead and grab the style sheet i'm gonna copy it and we're gonna go back and we're going to delete everything that's inside of here i'm going to right click and paste this and i don't want you to worry about the styling and everything i just want you to worry about the javascript portion so you can see that with the styling boom everything looks perfect right everything looks super clean now in our script let's go ahead and copy our script and don't worry this is not the solution okay so just copy everything that's inside of here so either control a command a to select everything and then you're going to hit copy then come into this script and paste it okay and hit run and if you click nothing should be working yet perfect okay this is you starting from scratch and now let's just walk through kind of what everything is so let's start off with index.html what's going on in here it's a very simple file with only a few lines of actual code all right some of the code is you know just doctype html html like whatever right that's default html files come with that a couple of lines of code here and you're going to need to know the player score certain div ids because you're going to need to access them so for example this button has a value remember when we did red green and yellow when we did that color app our buttons had a value red it had a value green it had a value whatever so then when you clicked it you're able to retrieve its value that's why that exercise is going to be val helpful to you here no pun intended valuable for you so this is uh that's those buttons you're going to need to know these classes so familiarize yourself with this index.html because from the javascript side you're going to need to detect when somebody clicks this button and you're going to need to be able to refer to these specific buttons you're going to need to be able to refer to you know just specific things and then write on there okay so for example when the player's score shows up maybe that's the player's score div when the hands show up meaning the computer hands or the user hands they should show up here and by hand it's like computer choice or player choice the result of the game whether you won or lost that should show up here as well okay um obviously above that red button right of course it should show like above there so it should show like here end game button you're going to need this id as well and this script here just means that this index.html here is linked with this uh javascript sheet okay meaning if you ever want if you ever change the name here make sure you go and also change the name here and make sure they both match okay cool but i would recommend you don't change anything because once you're done with your entire code you should copy your working code and paste it back inside of the script okay your and the only file you need to change is a script file okay awesome now let's walk through this project step by step we're not going to solve it right now but i'm going to give it to you as an exercise but we need to just kind of go over some stuff okay so this project will have a couple of functions that you need to implement all right here we go so if you look at this there's only one two three four and five there are only five functions that you need to implement the code shouldn't be like longer than 100 lines it should be less than that probably around 70ish lines without comments and that's what you need to work on okay it's five functions one two three four five six actually sorry six functions you need to work on six functions now with each function there's going to be some documentation telling you what this function should do how to run this function and what it should return okay and then there's going to be some other notes sometimes if and you know within the function as well so for example let's walk through computer choice well this function computer choice get computer choice randomly selects between rock paper scissors and returns that string so that should be pretty selfexplanatory what that function should do every time i call it here's an example of me calling it get computer choice and here's an example of it returning a random string rock here's another example of me calling it and it returning a random string scissors this function has no arguments okay zero arguments nada so you won't need to add in or take away arguments the arguments are already there for you to help you out here's another function you're going to need to implement the get result function okay this is going to compare player choice and computer choice and it will return the score accordingly meaning here's an example where the human wins aka you win against the computer when you call get result and you pass it rock and scissors so this is the player choice and this is a computer choice so when you give it rock and scissors who wins is it the human or the bot that wins this case the human wins so then it should return a score of one here's an example of a human losing you call the get result function you pass a scissors four player and you pass it rock for the computer and it returns negative one because rock beats scissors and then here's another example of human draws where you pick rock for the human and rock for the computer and the score should be zero okay so those are examples of how to call this function what it should return should return a number and the two arguments that it has okay this function is probably going to be one of the most difficult ones for you to implement and uh here i i have even other notes for you to make it easier so for example when you're implementing this you're gonna need to have you're gonna need to do a lot of if else if else conditions okay because you're gonna need to check if the player picks rock and the computer picks rock then what happens okay so you're gonna need to write the code here it says all situations where human draws set score to zero so in order to write this well this should be pretty easy because when's the only situation it's a draw so you could say if a rock goes against a rock that's a draw if a scissor goes against a scissor that's a draw if a that will take you forever or you could just say hey if player choice and computer joints match that's a draw so you could do it like that all right so that should take care of all of your draw conditions then here are your other conditions so this is where all situations where human wins you should set the score to one so you're going to use a bunch of else if's here and this is a situation where you will define all situations where a human wins so a human will win if human pigs you know rock against scissors a human will win if the human picks scissors against paper a human will win if a human picks paper against rock so those are all the winning conditions go here and then all the losing conditions you can be pretty clever about it and you don't even actually have to define them because you could just say else human loses okay so these comments are there to help you kind of simplify the logic for you a little bit and then just return the score make sure you don't forget to return the score i'm going to toggle this function and close it then you have the show result function okay this function is also going to be a little bit advanced and this one this function here get result is heavy on if else conditions show result is going to be heavy on dom manipulation okay so show result is how you're going to draw on screen and show stuff for example if i go to the solution version when i click here show result is a function that's doing you know human chose rock computer chose paper you lose and then giving a score of negative one and then drawing drawing it out here okay so that's the show result function so get result will calculate who won show result will then output that the human computer choice the human choice the current score all of that stuff onto the screen so show result updates the dom to you win or you lose or it's a draw based on the score also shows player choice versus computer choice okay now here um you can see it takes in three arguments okay the score player choice computer choice so it needs that in three pieces of information and uh hint on a negative on a score of negative one you should do result.inner text you lose why because oops if i go back here i have a div called result right so make sure you get this div by using element document.getelementbyid get this div right store in a variable called result and then you could do result.intertext and change its value to you lose so that's what i said don't forget to grab the div with the result id so this is just a hint on how to like do one of them you're going to need to do multiple divs here then you have on click rock paper scissors so this is where what should happen when the user clicks well right when the user clicks you need to think about what happens so this function should calculate who won and show it on the screen so to give you a hint this function should call upon our get result function and our show result function that's kind of it okay that's what this function will do all right and then we have our play game function this is going to be a really important function the name is a little misleading and i'll kind of explain why but here's what it should do make the rps rps means rock paper scissors so anywhere you see rps it means rocket processors so make the rps buttons actively listen for a click and do something once a click is detected so that's what the function of play game is so all it does is just listening here okay it attaches listeners to these and once you click here it should run this function right there when i click here it should run that function right there and of course we pass in the player choice so if i let's say choose rock yeah and um i click that then it calls on click rps and then it passes in rock as the player choice it and then vice versa if i choose any of these other ones and then on click rps knows what to do so i have all the notes here for you right so you make sure to use query selectors select all rps buttons right and then i have even step by step on how you can do it uh loop through the buttons using a for each loop add a click event listener to each button and uh this is you know um we can say add an on click and this is something that we did already with our color app okay remember we had to add event listeners on click to each update each button's on click properties to basically listen for a click and then call another function so refer to that red green yellow square app that we did okay cool so that's what play game is gonna be and then um you know and then make sure that in there in play game you also add a listener to this button too so basically in play game all you're really doing is you're just updating the on click properties of each of these okay that's kind of kind of what happens there and last end game end game is just gonna be a function that clears all the text on the dom so if i go here and i hit this it just clears all the text so it takes all the values that you had initially set sets them to empty string or empties them out okay so i hope that you know i really believe that you'll be able to do this we've done every single every exercise everything that we've done up until this point preps you for this project there shouldn't be any concepts that are new while putting them together is gonna be harder and then there's gonna be certain things that are for sure going to be challenging so do don't be upset or frustrated if you don't get this honestly i don't expect you to be able to get it you'd have to be really really freaking hyper smart to get this on your first try when i used to do these projects i never got this these types of projects on my own like right away in the start i would give it my best i would come close but it wouldn't be working and then i would actually look at the real code and then i would go ah okay then i would try it again but i would give it an honest try so make sure that you do give it an honest try and try your hardest before you come and look at the solutions and the concepts you know they'll be covered are like for loops dom manipulation variables conditionals template literals event listeners higher order functions and math.random stuff okay so um i think you're going to have a lot of fun with this and really give it a try and then pretty soon we're going to walk through and build this together okay so the next uh step will be us actually walking through the entire solution together but for now you should stop take a break and try to build this together by yourself all right see you soon all right let's go through and code up rock paper scissors together let's go so let's go and do this step by step all right and we're gonna walk through and do every single thing together so this get computer choice function over here remember we made this function that allowed us to get a random item from an array right fruit item we're gonna use very similar logic to that so uh let's go and say and i'm coding this live together with you so if i get stuck in any of these parts it's live yes i've coded it up before but now we're doing it from scratch so we're gonna get so here are the rps choices okay so we have rock we have paper and we have scissors these are the three choices that that are universally available to us right and now i'm going to just say and let's capitalize this r p s okay and now we're gonna say we're gonna randomly select one so random choice okay and then here i'm going to do math.random right and we're gonna multiply that by three just hard code three in there because we only have three choices so this will make sure that it gets the number between zero one zero and three okay and then we're gonna call mata floor on this so remember because math.random is always going to give you some like crazy numbers zero point eight four four four four four something right but when you floor it it'll just remove all the decimal places and then round it down so now this should give us zero one and two perfect that's exactly what we're looking for and then all we wanna do um is let's let's actually call this random number and then we're going to do uh rps choice pass in the random number and then that's it we should just return that okay so return random number so if this function let's see if this function is good to go and if it's working okay so i'm gonna go ahead and call this here we're going to say console.log actually here's even a cooler way of testing this so let's just copy this function right over here copy paste it in hit enter alright so basically what all we've done is we took this function and pasted the definition inside of our console and now let's just call computer choice let's call it again let's call it again let's call it again and you can see that every time it gives us a random choice rock paper scissors everything is random okay so this function is working correctly okay so i think that's great now let's move on to the next function this is going to be a little bit of a harder function right this is the get result and it's going to compute the score so based on the score that we give it it's going to say whether you won or you lost so now what are all the situations where a human draws this one over here is simple we're going to say if player choice is you know equal to computer choice well in that case we're just going to return a score of actually let's have a variable here here called score and we're going to basically just say score equals zero these are all of our draws situation so now all of our drawing situations are handled now we have our else ifs that we're gonna start okay so else if actually let's do it this way uh we're gonna say elsif so now we're gonna have a bunch of elsifs so what are the situations where a human will win so let's pick a situation where a human will win if a human chooses rock then let's pick a situation where a human will win where they pick paper and then let's pick a situation where a human will win if a human picks scissors okay so those are the three different situations so let's give it a try so we're going to say if player choice is rock and and uh make sure to always have everything in title case like this because if you use lower r somewhere for rock and capital r somewhere else your entire app is going to break okay so just be consistent with uh this spelling here everywhere all right let's go here and let's give it a try so computer choice so rock will beat scissors so this is situation one where a human wins now let's try another let's see another situation here okay so i'm gonna copy this and paste this here right so these are now we're making all the situations where a human wins and we're going to set the score to one in this case now we're going to have another elsif so i'm just going to copy this and paste that okay and uh let's also let's actually copy i'm gonna copy this entire thing and paste it again copy this entire thing and paste it again so in the situation of rock and then we need to handle situation of paper and then we need to handle situation of scissors so paper if a human chooses paper well what would the computer need to choose in order for the human to win let's think that think about that right so if i chose paper well paper beats rock so then we're going to pick rock here and then scissors beats paper so we're going to put paper here so now we've defined all of the conditions where a human wins so we're done with that and then the last thing we actually just need to do is define a situation where a human loses so what we need to do here is just say else score is uh negative one okay so now everything else is a situation where it's reversed where the computer wins but we can we can be really smart and cheeky and just say else here okay otherwise you would have to do a bunch of elsifs and then you would have to basically reverse this and put all the choices where computer wins and manually define each one of them but if you do it this way you don't have to define each one of them right and then at the end all we need to do thanks to this note this note is pretty much giving away the exact line of code you need to write make sure to return the score okay return the score now let's take this function and see if we can copy this and let's see if we can paste this function in the command line we pasted it and let's call our function get result and i'm going to give it a player choice of rock and then the computer will be scissors and let's see what happens and we get one is that true does rock beat scissors yes it does so we get back one what happens if both are rock zero so that's perfect let's try let's try all these test cases right to rock scissors we tried rock rock now let's try scissors rock and we should lose scissors comma rock put make sure to put those quotes and let's run it and indeed we do lose so all of these test cases that we have written here right check out what we have written out here so this function is gucci this function is doing what it's supposed to be doing so we're good on the get result function okay so i think we're good with that so we finished get computer choice we finished get result okay now let's go through some of our other functions that we're going to be doing as well so let's let's go to our next function show result well before we do this before we just like do show result kind of in one go let's just attach our listeners first because that's going to be the most important thing because if if i was making this app the first thing i would do is add listeners because if i don't add listeners i'm never going to be able to see really anything happen so let's go ahead and add listeners so loop through the buttons using a for each loop okay so let's do that but first what i need to do use query selector to select all rps buttons so let's do it rps buttons i'm going to set document dot query selector all and we're going to pass it rps buttons let's go to our html file and if you see here we have rps button class right class rps button class rps button so it's not plural it's singular and let's just see if we can actually console log this out so let's go ahead and console log rps button okay and uh here we we are calling the play game function so if i hit run everything should run and there we go we're seeing that we're getting three html button elements which is exactly what we expected right and now you can either manually attach a listener to each one of them so you could do rps buttons you know zero dot on click and we could say um you know just console log the uh the value we could do that rps button zero right and then you can just do dot value so this is like this would be a way of hard coding it but that's not what we want to do so when we click rock it does detect that we're clicking rock when i click paper it doesn't work when i click scissors nothing works right so let's go ahead and now do what the instructions say here so it says use a loop to go through them so i'm going to say rps buttons dot for each so that will allow me to loop and for each button okay rps button i'm going to do something so for each rps button we're going to add an event listener so let's go ahead and do that now for each button on click we're basically going to say hey every time i click you i want you to call the on click rps function okay and then step four is make sure to pass the currently selected rps button as an argument okay so or the currently selected so basically if i click this then i need to pass this to on click rps okay so let's go ahead and do that so i'm going to basically pass it the value of that so we're going to say rps button dot value so loop through the buttons go through them and then for each button give it this function okay and now if i hit so if i hit run here and i click nothing is going to happen right now but let's go to our on click function and here i'm just going to say console.log and we're just going to say console.log playerchoice so let's hit run let's hit and now you can see every time i click rock it prints it out when i click paper it prints it out when i click scissors it prints it out as well so now the rps button f loop is doing what i wanted to do and i'm going to just remove all of these notes because i don't need them anymore because we just essentially did all of this that it was asking okay and um yeah so play game button is done on click is detecting the click so that is good now what i can do with the on click is we have the computer choice already ready to go right and we already have the get results function so we can pretty much play rock paper scissors at least in the command line like we're we're pretty much done with rock paper scissors here so i'm gonna basically say con let's get computer choice get comp choice or computer choice and we're gonna call that computer choice function so let's try it get computer choice and let's just console.log our computer choice okay so now we should have and uh what we'll do is put it as an object so then it'll tell us like what's the computer choice and what's the player choice let's run this and click and you can see player choice is rock and computer choice is scissors i'll click again this time player choices rock computer choice is paper i'll click here i click this one right now so it says our choice was paper computer choice was rock so our get computer choice function is working correctly that's really good okay well now since we have player choice and computer choice guess what we don't even need to see how this get result function works we just need to call it now baby and have it return the score that's it so let's go and do con score and we're going to just say get result and we're going to pass it the player choice but make sure you pass it in the right order and we're going to pass it the computer choice all right and then we're just gonna console log the score here okay and uh make sure to just put it as an object so it just looks nice let's hit run boom look at that player choices rock computer choices paper and the score is negative one meaning we lost right because paper beats rock let's run it again we chose paper computer chose rock paper beats rock so we won this time let's choose scissors and we lost because we chose scissors and the computer chose rock and we lost let's try scissors again and we won because we chose scissors the computer chose paper and the score is positive one meaning that we won okay fantastic so guys the whole thing is working you guys this is really really exciting now the only things that are left are we need to keep track of the overall score of the game so every time the score updates we need to actually keep track of that score and increment it now what we could do is we could actually create a object to actually keep track of both of those scores and we could put that object all the way at the top why are we putting it all the way at the top so every single function can have access to it because it's like a database okay so it will have all our scores we'll say const scores okay and then this will have a computer score okay and it'll start off with zero and then it'll have player score and that will start off with zero let's give it a more descriptive name and let's call it total score okay so this will be the total and we will update it depending on you know whether the computer wins or the player wins right or the human wins and where will we do this well what we can actually do is we can do this inside of our get result function okay so we can actually update this object right over here directly so inside of our uh get result function you could pass it the total score right and then we could actually do that update that so i'm gonna give it i'm gonna say total score let's pass it in i changed my mind let's not do it in there because this function is very pure let's not pollute it with other things and this happens very commonly you know as a developer you go back and forth a lot because it's normal to kind of go back and forth and then decide you know what i'm going to keep my leave my code clean because then otherwise this function is going to have too many dependencies and it's going to be kind of annoying so let's leave that as is we're gonna update this total score after we get it right so let's say that uh i i on click i get the computer choice i get the score well then i update the score based off of that okay so i'm gonna basically go and say get the total score and we're gonna grab the uh we're gonna grab the player score and we're going to increment it by whatever score whatever whatever we get as a score okay so this way for now we'll just keep track of the player score you don't really need to keep track of the computer score i will leave that to you to implement as a challenge okay but for now we'll just keep track of the player score and increment the player score okay and then let's console log total score and now let's play this game so rock so player score is negative one let's play rock again so now this time we won right so last game we lost the player score became negative one this game we won all right now all that's left to do is updating the dom to actually show you one or you lost or you drew so let's go to our show result function this is where we're going to be doing dom manipulation right is we have a couple of different scenarios we have a scenario where we could say we lost right so if score is negative one then do something else if score is zero then do something right else if score is 1 or we could just say else do something right so in this case if we want then what we want to say is you or sorry you lose okay in this situation we would want to say you drew or it's a tie or something right so let's put double quotes and now we'll say it's a tie and here we can say u 1. now we need to do something with these strings because right now we're not telling the computer to do anything right so we're going to create uh we're going to get the divs so let's get the resultive and this is going to be we're going to get this by doing document dot get element by id and i believe the id is called result let's go take a look and we have result here okay we have result we have player hands and then we have player score okay hands and then player score okay let's go back hands div is going to be document.getelementbyid and we're going to do hands and i believe this div player score we're also going to need that so let's go const player score div document i get element id player score okay just like that in the in a case where we lose right what we actually want to do is we want to say result div dot inner text i want to set that to you lose and then we're going to do the same thing here and the same thing here okay so let's see what happens now let's give it a try so i'll run this we win and i'm not seeing anything yet so let's go and debug what the problem is so resultive let's make sure that this result div is the actual div that we want so i'm going to console.log or actually we i don't think we're calling the function show result anywhere so let's go ahead and work on that now so remember on click rps what it should do is calculate who won and show it on screen right so line 74 calculates who won right then we update the leader the total score and then we want to show on the screen who won so let's go ahead and do that now i'll do it at the bottom here and we'll call our show result function and it has a couple of arguments and you can see it's telling us it has the argument of score what other arguments do we have let's go check let's go check player choice and computer choice so we're going to give it the player choice and then we're going to give it the computer choice there we go player choice computer choice okay that's um that's effectively it that's all what we need to do here so let's give it a try now run it boom and it says you lose and it that's is that true that we lost right we got a score of negative one let's try again you won and now look it says um the score is one so i win and then the total overall game score right the total score it says is zero player score is zero now because we won and now it's a tie so everything remains zero zero zero let's run again i lost it goes back down to negative one all right now one a bunch of times dang my score is just getting worse and worse okay all good so our score is working the way that we want it to work right so what we want to do next is at the end we also want to update the scores okay so let's go ahead and do that so let's update the score div now so or actually let's do hands first because that's really important so we're going to say hands div dot inner text right and it's whatever the choices are that the player choice and computer choice so i'm going to say player choice versus computer choice okay let's run this and let's see what happens rock versus scissors paper versus rock scissors versus rock okay so that's working but it's not really easy to tell which one is the human choice and which one is a bot choice what i'm going to do is i'm just going to put an emoji here and an emoji there so here i'm just going to make a person emoji and then for this i'm just going to make a robot emoji let's run this now when i click you can see that it shows a robot emoji a human emoji and a robot emoji right and then all we need to do is just make sure that the score shows up like here right score score should show up there so let's go ahead and do that now and i'm gonna access the player score div and grab its inner text right and then we're just gonna get the total score and we're gonna set that total score to yeah that's actually it i don't even think we have to do anything the total score should just be this and we should be good so let's run this now this so it's bringing the total score as an object because it is an object so we actually just want the player choice score so player score let's run it oops undefined so why is that undefined let's see player ah player score not player choice run boom negative one boom negative two right if you want to make this fancier or whatever you could put this inside of template literals and you could say your score or something something along those lines if you wanted to right you could say your score say one two zero one whatever and there you go now let's open this up in a full tab right and let's take a look at this let's play this game click rock versus rocket to tie click again rock versus scissors you won rock versus rock it's a tie i picked rock computer picked paper i lost right and my score is being updated automatically let's just play a ton of games and let's see what happens all right we're getting on a oh we lost a lot of games there right so there we go so the computer is doing a good job and uh but but we beat the computer right that's what matters we want at the end so let's go back and now if i hit the red nothing happens so we just have to make the red button work so first let's do the following so we're going to say const end game button and we're going to say document.getelementbyid and i think it's end game button if i'm not mistaken so let's go back let's look and i have a button i gave it id of endgame button so let's go back here and we're going to say endgame button just like this all right and we just need to connect it so we gotta go endgame button dot on click and on click we just wanna run our end game function that's it okay and in our endgame function what needs to happen is it should just clear all the score so in our endgame function we're gonna grab our total score okay let's actually pass a total score total score right here that's just to signify that we're passing it the total score okay so we're signifying that we're passing this that's why we're making a dependency and we're getting the total score because the global variable that the whole our entire app has access to this total score okay so this function is going to take total score and it's going to set the total score of the player score to zero and then we're also going to set the computer score to zero here and we're also going to just erase everything that we see on the dom okay so let's go ahead and grab our all of our divs i'm going to copy them from here i'm going to paste these divs here and then we're gonna grab their inner text and set it to empty right and then we're gonna do that for both of the other divs so paste paste double click copy double click paste double click copy double click paste and that should make everything empty so i think this should be good for the endgame function so let's go ahead and try this run it play play play play hit the red button and everything clears up run run run run hit end and you can see that everything is working okay perfect so there you go this is your entire app right let's go and try it the entire app is working hit the red button it stops starts again okay so the challenge for you is see if you could add player score player score and then computer score and see if you can see if both of those get updated as you play the game right that would probably be the best version of this app if you can make that work that'd be really nice and with that said we're essentially done with this so all you got to do now is try copying all of the code here so command a command c or ctrl a and ctrl c go back to the exercises that you know the where you were working on this javascript course rebel so go back to that and then go to this exercise folder go to script.js right and see what happens if you paste your entire code over this so if you paste your code over this and you hit run and you go to rock paper scissors project exercises your game should run just like that i'm going to command z and undo all of this all right there we go so you should be able to paste it in here and i recommend that you do so then you have this fully working okay and then if you want to delete all the comments you can from this to kind of make it make it a lot cleaner but at this point right the whole thing is you you've done pretty much the whole thing i'm going to remove all these console logs from here just so you could see this in an easy easy to see way like this on click function you'll realize is the main function right it's the entire kind of game logic that happens that happens here and um we get the computer choice we already have the player choice we compute the result based on player choice and computer choice we update the scoreboard and then we show that score on the screen so this is like the main logic of the game right this is where your main main main logic is happening so i hope that this totally made sense you understood every single step by step parts of this and this was a lot of fun for me to show you i hope it was fun for you to actually learn this and you enjoyed it but that said i love your beautiful face and i'll see you shortly time to learn apis or how to get pictures of random dogs every single time i'll refresh refresh again refresh again and different dog different times do you want to make this well guess what you're going to need to learn how apis work and don't worry we're going to keep it bare bones very simple easy to get started so that way you could learn and not be confused on what is going on now in order to learn about this let's go ahead and code this up together from scratch so hit command t and let's go to replic.com all right so this is a platform where you can code super easily right if you've been coding along thus far just choose html css javascript and the app will be up and running right away okay let's go ahead and do that and for the name we're just gonna say dog api playground okay this is just for fun and we're just gonna test this out okay now it's going to give me a random index.html file a script file and style and script is already connected with index for example if i do console.log and i say hello it's going to show that hello right there all we're going to do here is let's add in a random div i'm just going to say div and we're going to say id for id maybe i'm just going to say dog image or something like that and then we're going to give it an inner html of image like this okay you'll see why this is important because we're going to manipulate this from our script file okay so let's go grab dog image now let's just play with the apis first okay so the url that we're gonna need for this is this one right over here okay https colon slash slash dog dot ceo slash api slash breed slash image slash random now for you what i'm gonna do is i'm gonna go ahead and add this to the playground so you'll have access to this okay so i'm gonna create uh api section over here okay we're gonna say apis so if you're watching this javascript tutorial you'll be able to get access to this url okay so this is for the dog api right i'll just say dog api cool so you can go ahead inside of here and and copy this okay let's go to our brand new repo that we had created and in here we're just gonna get access to this okay so what do i want to do i want to fetch this so we're simply just gonna say fetch and we're gonna pop in that url that we got so copy this url paste it in here now there are certain new concepts that i'm gonna teach you but let's just go one step at a time okay right now i kind of want you to just follow along with me and we'll code this up and then worry about what it actually does in just a second so i'm going to say dot then all right and this dot i'll put it here dot then but this is the same as if you wrote it all on the same line by the way so eight being on line five here or here is actually the same thing but it's just that i don't want this long to run in line to run infinitely long so i'm just going to hit enter here so it breaks it off into separate lines now we're going to get back a response and i'm going to say hey return to a response.json i know this is confusing right now but we'll walk through it in a second and then i'm going to say hey get me that json okay and i'm just going to have you console.log.json all right so let's run this and let's see what happens if anything at all and would you look at that what my code is doing is going to this api meaning there you know what is an api there's some data somewhere in the cloud somebody else is hosting it and we're going grabbing access to it and bringing into our app this way we can be lazy and we don't need our own database and we don't need to figure out how to get random dog images this as long as you have access this link or this api it will automatically get you a different dog image every single time so now i'm gonna and you know there's examples of lots of different uh apps that you know you could use your api so you could use a movie api and then also you can have you could build like a movie app without needing you know every single movie which has millions of them right you don't need access to them you can actually get access to them through a database that allows you to do that all right so right now i am actually getting a random dog image every single time over here okay i work console logging it out so let's go ahead and copy it to prove it i'm gonna hit command t command v and i'm gonna paste it in the browser and you can see that i actually got a real real image right it's a cute puppy i have an english bulldog as well so you know it's kind of cute i like dogs so here i'm fetching this data and then once you fetch it you have to do something to it right away so this is where this dot then thing comes in so whenever you see this dot then thing this is talking about promises okay so promises is this like weird confusing concept in javascript because this leads you into asynchronous programming and all that basically means is up until now you were writing you know uh regular scripts you had this like list of instructions that you would have the computer do like you would say hey you know run this for loop then go to this array and grab this then do this with that array then filter that johnny depp net worth and show me that different actors that was like synchronous code meaning it runs line by line when you're dealing with getting data from somewhere else like from a third party website all of a sudden your code isn't synchronous anymore meaning that your code doesn't learn run linearly anymore so here is an example of this okay let me see if i need to zoom in more that's good for now so i'm going to go ahead i'm going to say console.log say yo and i'm going to paste that right underneath this and we're gonna run this and you can see that this did not run linearly right so here let's prove this right so i'm gonna delete that hello at the top so run first and then this should run third right because what should happen is and you would imagine that this console log here would run seconds i'm just going to say comma or actually let's do it here and i'm just gonna say run second all right so what should happen is this console log should run first this over here should run this console long should run second and then this console log should run third but when i hit run watch what happens right run first and run third ran first and then run second showed up so what is happening well we make a request to this url so that's the same as if i com pasted this right you saw how this takes a second to actually show you a new dog image link right it takes a few seconds one two one two one two one two so it takes about one to two seconds whereas this code right here runs almost instantly okay so what javascript decides to do is it says hey i'm gonna run everything that i already know so it already knows this it runs it it already knows this it runs it but this information over here right this takes maybe two seconds so let's write two seconds right here that takes two seconds once that takes two seconds and gets resolved right this returns to us as a javascript promise so we just get back we're like okay we got the data back these dot dens what they do is we go okay once we get that data back then i want to turn that data into json okay so we'll talk about what json actually means so that's this is step one right and then what we do with this is we console log that json so this is step two and i know this is really weird notation but just.dense but you'll get used to it after some point when you start learning more and more about like apis and asynchronous programming or for now just like kind of memorize it that whenever you have to do fetch you do these two dot dens every single time and you pretty much can copy paste this exact type of code um every single time you do a api request okay that's what's happening okay and these are functions so i'm just basically saying hey dot then you know grab the response and turn it into a json and what json does is json turns the data essentially to this object type of format that you see here right so you have message and then you have the url and then there's another key so we have one key with the message which is the actual image for the dog and then we have another key which is status which tells you whether it was successful or not and then that object ends right so that json is really just an object with two keys inside of it message and status that's what this is you know getting back and then once we get that back we go ahead and console log it out this dot then runs whenever this promise here resolves okay now watch what happens if i let's say cut this right i'd remove those lines and i just say console.log and we run this let's run this and you notice it just says promise what the heck is that right i can't really do anything with the promise promise is a really weird thing but when i bring that back now something happens so whenever you're dealing with promises if you just call this it's going to give you a promise but you have to do a dot then and this other dot then these two dot dents chained together to pull that data out after your code runs and waits for two seconds so this is an example of like asynchronous programming and it's a complicated way of just saying like stuff you have to wait for this over here is stuff you don't have to wait for right this is literally that's literally all that means okay stuff you gotta wait stuff you don't have to wait for stuff you have to wait for and when you have stuff you have to wait for you have to do these dot dents that's when you use them okay and then they just call them these like fancy names that confuse you like promises asynchronous programming in your head honestly between you and i don't use those words okay in your in your head just like use simpler words so you can understand it but like learn these words because they're going to be helpful for you when you're googling things right how do promises work how how do you do asynchronous programming with javascript but like for yourself just go is this stuff do i need to wait for is this like a url or a database thing that i'm doing yes i probably need to wait a few seconds to get that data yes okay then i just know that i'm going to need to do dense google how to call how to do a fetch api request google how do i deal with promises google how to get a json file from a promise right so that's where your google skills come in and stack overflow you go there and you get the information that you actually need all right so hopefully this part over here makes sense to you and we're retrieving the data now we want to take this further okay so what we want to do now is we want to do this right and then we want to actually update our we want to update our um this right over here okay we want to we want to update this right over here and we want to like put the dog image here so the new dog image that we're getting all right so let's do this once we get that json back right here then what we can do is once we get it back then we go ahead and update this dom right over here right and put the dog image so let's go ahead and do that now so i'm gonna i'm gonna remove this console log here and we're going to go right there i'm just going to say console.log json right and let's run this and this is the json that i'm getting and i can see that this json is just an object so if i actually did json.message i should get the contents of that message so i should get this url right over here all right so let's go ahead and try that so i'm going to say json message and you can see that i'm getting that that like specific url that we need yeah all right now that i know i'm pulling this data all i have to do is just update this dog image div and change its inner html to a different image okay so let's go ahead and get access to this i'm going to go back boom and i'm just going to say you know const get or dog image and it's going to say document.getelementbyid and i'm going to pass in this id right and then all we're going to do here is dot inner html and let's do template literals here and i'm going to say image set set the source for the image and the source for the image is going to be json.message all right and then we'll just end this image tag right there so this should do the trick let's try it i have a broken image so interesting what's happening here i need to put quotes around this let's give that a try okay boom there you go so now you can see our dog images oh that's a cute dog look at that and i i have a i love pomeranians i just think they're so cute oh that is cute look at these guys just playing run right every single time you run it you should now just be getting a new dog image right so this is working now their sizes are kind of different and a little bit all over the place so in order to make sure that we have a size that we actually like what we can just say is i can pass the uh height and width properties okay so we can say height is 100 and width is 100 let's try running it now and you'll see that we'll always get an image of this exact size every single time but maybe we can make it 300 and 300 that way it'll be big but it won't like completely blow out a proportion right so there we go so 300 by 300 is not a bad one as you could do that okay so this is just like a really barebones starting example of apis and like that quickly you have a up and running app you know this is nice like if you had to do this by yourself you know how much work that would take you would have to collect infinite dog photos manually you'll have to download all of them then you'll need like a file with like hundreds of dog photos and then your code would need to like go through that file manually and like randomly select the dog and then show that dog and you have to keep that dog thing updated and it's like so much work but here somebody's doing that for you with the random dog images that they have collected and all you get to do is just hit the run button every single time and get a different freaking dog that's nice now what we could do is instead of making this app where every single time you have to like refresh this app and get a new dog image that's kind of like lame let's make it so we have a button that says like get new dog or get dog or something like that and then every single time we click that we get a new dog okay so you you have enough information to be able to kind of do this yourself so if you want to challenge yourself you could try it but if you don't and you just kind of want to follow along that's all right too because we will have some exercises coming up for you okay so don't have to kill yourself here all right so first thing i'm going to do is i'm going to turn this into a function okay in my mind i'm thinking about it like this i want to turn this piece of code into a function and what i want to happen is i want this piece of code to run every only when i click the button and every time i click the button this piece of code should run all right so let's go ahead and add a button right underneath this okay so this button can be added by going into html hitting index.html right here and right underneath here we can say button get new dog let's yeah let's give it an id of dog bun okay let's run and now we should have a get new dog button okay cool now what we want to do is i just want to say hey every time i click that button so let's go let's go grab that dog button because i'm going to say const dog button go to document get elements by id there's a dog button okay and here i'm going to say dog button dot on click and we're going to set its on click to just say you clicked get new dog okay so it's just gonna say like hey i noticed that you click get new dog okay so click it click it click it click it every single time i click it you'll notice that at the bottom right here it says get new dog right so it is working click click click click click okay perfect so it's doing what it's supposed to do it's detecting the click now what i want to do is i want to run this fetch request on click so let's wrap this bad boy inside of a function so i'm going to say const get new dog okay and we're going to turn this into a function and we'll do it like this and i'll take this code and i'll paste it in here let's format it so it looks beautiful nice so now what this is doing it get there's a function called get new dog when we call it it fetches this data it fetches this url uh gets a response like console logs the response right and then it like updates the image now we don't even need this console log here so i'll just remove it so all this does is gets the url and then updates the image with the new dog thing all right and here what we're gonna do is we're just going to go ahead and call that function so i'm just going to say get new dog like this and we're going to call this function okay let's run it run our app and now what we're going to do is we're going to say get new dog and boom it just got us a new dog let's hit it again get new dog boom got us a new dog get new dog getting you right that is so nice and now that dog button every time i click it that button is doing the work for us and we don't have to like kind of do anything right that's nice uh if we want we could put that button at the top as well so what we could do is let's go to index.html i'll take this button from here i'll kind of move it at the top right there and then this hello world i'll just completely remove it so if we go to our app we have get new dog right at the top you click it you get a new dog you click it again you get a new dog again if you want you could give everything kind of a margin but we don't really need to do that for this we can just keep this up oh that is cute um i have english bulldog that very similar to this yeah she's adorable she has huge paws man so yeah so this get new dog thing is working kind of honestly how we wanted to and it's really kind of straightforward so not too complicated honestly like it works it makes sense and what i'll do for you is i'll take this lesson right and turn it into a lesson in our main like javascript app that we were working on and i'll put it in here for you so then like you can actually go through this api's lessons right so okay i'll make a new folder that way it's like clear it's like dog related right and then in here i'm just gonna add an index.html file i'll also add a script.js file and then you don't really need a style sheet for this because there's not much style so we'll paste the javascript code that we wrote we'll go back to this app and i will grab the index.html i'll copy this and we'll go ahead and paste that index.html code in here for dog random so what's nice about this now is right over here on the right hand side right you'll have under lessons you'll have api lesson for get random dog you'll be able to click it other people will be able to see that you made this too and you just hit get new dog and you'll get a new dog every single time and then in order to like actually see the code for this app you can go ahead on the left hand side go into api go into dog random and boom you'll see it right here so this code is like the solution is there for you if you need it this is going to be the uh little project that we just made okay and then we're going to like do more practice stuff with apis okay so we're gonna get to it right now but hopefully like this app makes sense for you so far all right now we're gonna build another app with apis and this is going to be a superhero one and you should try to kind of make a little bit of it yourself as we go along but they're going to be certain concepts in here that might be new for example like access tokens but this superhero api app is going to do the following every time you click get new hero is going to randomly select the hero show you that heroes intelligence or durability or attack power or speed or something along those lines like stats you know so for example if you typed in get random hero it might bring a batman or if you typed in another hero it might bring up let's say spiderman and so you should be able to do that with this app now if we want to really take this app to the next level you can try making it where you can type in the name of the hero like batman and hit enter and it should automatically pop up batman's image and it should show batman's stats or maybe his biography and then every single time you type in a new person and say get hero it automatically does that every single time okay so this is what we're gonna code up let's go ahead and do this together step number one go to superheroapi.com it should bring you to this page where it says get all superheroes and villains data from all universes under a single api all right so now here's what you need for this you're going to need it's going to generate an access token for you so you're going to need to connect it with your facebook if you don't have a facebook go ahead and create one it's free make a dummy one come here connect it okay so do that and then you'll have a account access token okay so once you log in with facebook this token is gonna be important because without this token this api will not work so make sure you have that and then what you're going to need is this url right here okay this is going to be your base url then for this api there are a couple of other things that that are helpful to know for you is how this api will work is you'll need to either pass in the id of the hero or you're going to need to search that hero okay so if i for example go here you can find the character ids here you'll be able to go here and see all the heroes right so you have ethan hunt you have evil deadpool you have spiderman right over here right you have batman hawkeye you have thanos so you have all these heroes as either you pass in their id so for example you saw that the id was two four five so what that basically means is what your url will look like is the following so you'll have https call superhero api.com slash api slash whatever your token is so i'm going to go ahead and copy my token and then we're going to go ahead and paste this oh sorry let's go ahead and do this so right so api.com api slash whatever just imagine that that says your access token right here okay your access token slash you're gonna type in id slash whatever hero that you want so let's say 245 or whatever it is okay now if i try to go to this url let's see what happens and let's make sure i bring my access token and repl i'm going to replace this part with my access token let's hit enter and let's see if we get anything if it works at all right you actually just say 245 here just like that okay so let's try that and you can see that i'm actually getting the data back on ethan hunt and i have power stats on him so his intelligence is strength is pretty low 11 speed is kind of low uh durability is low but then like combat is pretty high right ethan hunt and then he has a place of birth which is wisconsin i did not know that okay his height is five six uh what's his occupation he's an agent he's a training officer and um yeah and then here's his image so i can actually click that image and boom it shows me okay apparently it's uh tom cruise okay that's what i expected so let's go back here so this is the basic this is a call like a sample call reference okay so this is going to be useful for you and now we can actually just start coding this up so let's go ahead open a new repl so let's go to replic.com replay.com okay and then just go ahead and choose that html css javascript one that's the one we want and we're gonna say superhero api okay let's go cool and in here we're gonna do kind of a similar thing but this time we're going to say get super hero we're just going to create a function right from the start all right and then we'll just say hello and we'll just call this function let's just to make sure that this function is working and make sure to put an equal sign here and run this okay now you should it should say hello at the bottom right there and you don't actually even need to do console log here just run this because it already has a console log and you can see that we're getting back hello perfect so seems like our get superhero function we created it we are able to call it now inside of this function what i actually want to do is i want to make that fetch request so remember that fetch requests we made earlier you can pretty much go ahead for a dog random and look at it and your fetch request is going to be very similar to that all right so remember it's fetch you pass in the url and then you do these dot thens so let's go ahead and do that now okay so i'm going to basically say fetch and let's put that reference url there so we have we can see it at all times and now i'm going to basically uh use the url right so let's go ahead and do that i'm going to paste and character id here is going to be let's just say 245 because that's ethan hunt and for access token i'm going to go back and copy the access token so copy and let's paste it in in place of that where it says access token okay replace that with just whatever your token is and uh this is what you should have now one really really key hack that i'm going to show you here is make sure to put php here if you don't put that this will not work i know it's pretty weird but this is a weird hack that i had to kind of find around it and it's just for the superhero api okay you don't ever like need to do api.php like that okay so there we go this should get the ethan hunt guy and then we just need to do the two dot dens that we've talked about so i'm going to say response get the response as a json and then we need to do something with that response we're going to say then once you get that we're going to say json and we're going to say console log that json okay so with fetch requests you can pretty much like copy paste these lines almost every single time and then fetch of course is just going to fetch that's not going to change the only thing that's really going to change is what goes in here okay so i'm going to hit run on this and let's see if anything works and boom look at that we are getting ethan hunt we're getting that data right over here uh just as we want it to okay so we get response success id is 245 name is ethan hunts and then we're getting all the power stats that's perfect right now if i wanted to get any one of these specific things i could do like let's say the dot id or dot name let's say i just did dot name and let's run this i should just get back i should just get back ethan hunt okay if i ran and i looked at this and i wanted power stats right i could do json.powerstats and that should get me back just the power stats and then i believe image should get you the image yup right and then you will have to do dot url to get the actual url out of that because it's an object within an object okay and now we have access to the url and if you use an image tag you can actually then pop that up on the screen there so what we'll do in order to attach that image to like basically your app is i'm gonna go ahead and i'm just going to say hey get the document dot like query selector all right and we're going to query select and grab the body tag so that's this tag right here all right i'm going to grab the body tag and then to the body tag let's uh let's add something so i'm just going to say plus equals okay and we're just going to write like i don't know hi or goodbye something like that let's run this oh we want to make sure we do dot inner html here so let's do dot inner html let's run this and you can see that all we did here is we just appended goodbye right there okay if you don't do plus equals and you just do this it will replace everything that's inside of the body and replace it with goodbye and that's not what we want right we just want to like attach that so watch this right so this ethan hunt that we're getting we have the image here so just go ahead and copy that okay uh right click copy that and if i go const image i'll just paste that there it's that long url okay so now what i can do is i can just like attach that image to the html body okay so what i can say is i can just go and go i have image tag right and then this image tag will have a source and this source is uh gonna be the image that we have okay let's uh let's make this a template literal so we can then write javascript in there all right boom boom boom there we go so we have this so image and then just like in this like that cool so image we gave it a source and this is going to be the ethan hunt image and it's kind of hard coded here all right let's put this maybe in strings is that what that wants yeah that's kind of weird huh like it wants that in strings even though it already is in spring so kind of weird but whatever we can we're going to go ahead and do that and now you can see that this image is popping out and it's actually not ethan hunt i apologize it's amazo right but if i change this uh hero here you know then i could get a different image but yeah so if i run this i'm just going to get that amazon image every single time okay so this is apparently what amazo looks like i mean i didn't even know that right and we're going to give this a height and width too so let's go ahead and do height is 200 and then we're going to say width is 200 now in order to make this dynamic i want you to try it because right now every time i run this and even if i pass in a different hero let's say i put in 245 and i'm actually putting in ethan hunt notice that it's still going to give me a mazzo so see if you could change something here in this function where it could update this image dynamically okay so give that a try i'll give you five seconds to pause the video and try it on your own five four three two one all right let's go ahead and now give this a try together so i am getting back this data but i'm just console logging it so instead of console logging it what i want to do is uh i want to grab the body and i want to add this all of this to the body okay so this is what i want to do so i'm going to cut this because i don't need that there i'm going to remove this console well you can keep that console log for now i'll keep that console log and i'm just gonna say hey uh get me the json and then just add that image now instead of using this hardcoded image what we're basically gonna do is uh we're gonna grab this image right over here so remember we're gonna need to do json.image and then that'll give us this object right here and then we're gonna need to do dot url to get access to then this url right here that key okay so let's go here and we're gonna say json.image.url just like this so now i can remove that hardcoded image that i had let's run this and let's see if that works and boom i got i got ethan hunt let's run it again let's run it again let's go here to our html and i don't want to say hello world here anymore i want to actually say button that just says get new hero and we'll make that work later and for bonus points you should try to make that work yourself okay before we even do anything else perfect and i'll just add a new break line okay this just like breaks things on to a new line and then that way the get new hero button always stays at the top so let's get back to our script and um watch what happens if i pass in 20 and run it now it's going to get me amaros image if i run 40 and run it it's going to get me this guy whoever that is uh let's hit 60 and it's running me that looks like bane is that is that bane he looks epic yeah that's bane that's sick and his relative is apparently king snake who's his father yo i didn't know that that's lit that is super cool man ben is a badass now see if you can make this get new hero button works every single time i click it i want to be able to get a new hero every single time so i want you to pause this video give this a try on your own five four three two one all right let's go ahead and try to do this together it's all right if you didn't get this i'm proud of you for trying and i hope you tried um because you'd only be cheating yourself if you didn't all right so uh let's let's do basically what we did for that dog app right so we have our button and what we want to do is let's go give that button an id well we only have one button so i can be kind of lazy here and i can just select this button i can query select this button but is that a good way of doing it not really right like that's no i don't want to give you guys bad habits let's just say id new hero button let's just say that let's go into our script and we're going to get access button kind of up top here const hero button new hero button and i'm going to say document dot elements by id paste in that new hero button and so whenever that button runs i want to run this function here so i'm going to say console.log new hero button and i'm going to say on click run me this thing gets superhero and that's it so now when i run this app everything should be empty when i hit get new hero it should run but every single time i run it it's going to keep making a new request but it's going to get me the same hero every single time so getting your hero get new hero get new hero get new hero it's getting the same exact hero but every single time and that's not what we want we want a different hero every single time and so now i'm going to give you another piece of this exercise okay try this on your own so see if you can make it where it randomly picks a hero okay remember that array exercise that we did where we picked random remember the when we were making that color app right uh remember or sorry fruits app and we picked a random fruit remember when we did rock paper scissors and the computer chooses rock paper scissors randomly all right so you're gonna need to use some of that knowledge to pull this off this one's gonna be a little tricky but i think if you really tried you could make this number where it's random now if you need a hint if you don't need a hint you could pause this video try it on your right now if you need a hint what i'll tell you is this number is not going to be between three like it is for rock papers and scissors this number is going to be between one and all the way till 731 because that's how many heroes they have so you're going to need to put a number between 1 and 731 uh in here so it should either go 1 or 731 or some number in between but never lower than one and never higher than 731 okay so you need to make a function that can do that all right so take five seconds right now i'll give you five four three two one all right so we're gonna do this now const uh random uh i'm gonna create a function called random hero and basically what this function is going to do is we know that there are 731 heroes okay so khan's number of heroes is 731 and what i'll basically want to do is i want to do math.random okay so let's also open this up in the shell or sorry in our console and give this a try all right so let's go here and actually i'll clear this up so you can see this nice and at the top so let's say i do math.random and we multiply this by 731. now notice that i always get a number between 0 and 731 but it'll never actually go up to 731 right so that's maybe not not what we want we want it to actually go up to 731 so there are a few hacks you could do here so if we want to do so first of all let's do math.floor so math.floor will and if i hit up and enter up and enter it's going to keep going but it'll never actually pick 731 and it it's not going to be easy for me to prove that to you here but it's not and it's also able to pick zero and that's not what we want in order and to prove this to you guys what i can do is like copy this piece of code and just change it to a smaller like number so you can kind of see this so see how it goes zero and one but it'll never pick two so it's basically picking the lower bounds we want to actually pick the upper bounds one start with one and end at 7 31. so the way that you could do this is you could actually just add a plus one to all of these so this way when i run it every single time i'm gonna get a one or a two every single time so you could just add a one or instead of math.floor you could actually call math.seal so either of those ways work so we're gonna do the same thing with our function with 731 and just add a one at the end and this is always gonna ensure that you're getting a number that's greater than zero and it doesn't end at seven thirty it would unit actually seven thirty one okay so this will get us that so i'm gonna paste this here okay now the 731 is actually just you know number of heroes number of heroes and then we're gonna plus one this cool and we're gonna say and actually we can just return this that's it okay and then we can just call the random hero function here so i can just say a random hero like that so get superhero and we're gonna get a random random hero okay you could because this function here is just going to return a number so for example if i do this and we do random hero and press up and enter it says run random here is not defined interesting but i just defined it so let's try random hero now boom there we go so every time i run random hero you can see what it does right it gets me a different number every single time and does a pretty good job right of generating a random hero so that's why we're just running this random hero in here they'll generate a random hero and then we'll get that specific superhero and then we'll get that dude's image so let's hit run at the top let's go ahead and click get new hero get new hero and all right so we've had a little bit of hacky html here that might be causing some problems so let's go to our html file real quick and let's just uh update this real quick okay so what i'm gonna say is um i'm gonna put a div here and we're just gonna say id is hero image and then inside of here we'll just have like an empty image thing okay and then we'll just update that instead so here we're gonna say const hero image div all right and then i'm going to say document dot get element by id and i think it's called hero image right let's just double check hero image copy come back paste it perfect and then we're just going to do uh we're going to replace this part right here with hero image div and we're going to change that html to this image so now let's give this a try and let's see if this is still working hit run at the top hit get new hero and let's try it and it works okay so i'm getting new heroes and look at what's happening their images are actually showing up at the bottom hit get new hero again and so every time i hit get new hero it actually like gives me a new hero so that's great and why is this happening so let's go ahead and open this app up and let's try to figure out why is this happening why is this behaving instead of replacing the hero it keeps adding them so get new hero get new hero i mean this is kind of a cool functionality too actually i kind of like this uh i kind of like this uh version of the app right every time you hit get new hero you keep getting back somebody somebody new so it's actually super super super cool i actually i really like this functionality but let's say you want to change this let's say you only want one hero well what you could do instead of this plus equals here which appends you could just say equal and that's only just going to replace so run this again hit get new hero he'd get new hero and you're going to get a new hero every single time okay or you know not every single time there is a one out of 731 chance that you're going to get the same person again probably lower than that but yeah it's a pretty low chance this is going to repeat itself all right now what we want to do is we want to have a search field here and you should type in there and then um you should have a get new hero button right next to it so you should be able to type in what hero you're looking for and then say get hero and it should surge that hero okay so we should have like kind of two buttons so one button gets a random hero okay and i guess let's just give this a name of random hero so uh let's go to our button and here i'm just gonna say like random and so when you click it it's very clear that this is gonna get a random hero okay and then what we're gonna do is we're gonna have an input which you you know is gonna be your search button all right so let's go ahead and create that input now i'm gonna say input and let's run our app and we should have an input right here okay and then we're gonna have a button kind of like in front another button in front of that input and this is going to be search okay let's run this so now our app is going to have two things so random hero will get you a random here every single time or you could type in a name of some hero like batman and hit search great so let's go back to our app let's go to script.js and let's work on this search get you know basically let's get a hero that was actually just searched so i'm going to create a new function well do i need to create a new function let me actually think about it because getsuperhero a bunch of the functionality is going to be same just this uh this is going to change right so for example if you search a hero then it'll go base url instead of id we're going to actually do search.name of the hero and if you pass in an id okay so if they pass in a name then this is going to be the url like schematic or whatever right this is what the url is going to look like and to pass in an id the url is going to look like base url slash id okay and let's uh try that url so let's go grab that url real quick so i'll go here grab this whole thing copy it hit paste grab your token go back to that paste this token right here and now we're gonna do slash search slash batman and let's see if this works as i expected or if it's gonna break and it actually does work wow look at that let's try spider and yeah spider shows up let's try spiderman let's see if that shows up that's the wrong name so let's try spider dash man and spider dash man indeed shows up now one thing if you have noticed is you're gonna get back of basically the same response regardless of so you know whether you searched the you you searched it up like with the search spiderman or whether you typed in the id of spiderman which is i can see here it says 620 so let's go ahead and replace this here with uh 620. both of them are actually going to return to you pretty much the same exact response right like the response is very very close the only thing i see change here though is we have a results array like we have a results uh key here right and then the value of that is an array so basically it seems like it gets you multiple results for spiderman um one or multiple results and so basically it seems like we would want to pull basically i think we would be safe just pulling the first result that's the difference between this and if i actually just type in 620 because that is getting me that specific spiderman that i was looking for whereas for this it's getting me a array of results and then the first result has the specific spiderman that you might be looking for okay so we're just gonna get like the first item out of that array that's how we're gonna do it so let's go back so some of our code is going to change not all of it but just a little amount of our code meaning in one of the scenarios so normally we just do json and we're good but in this case we might have to do dot json.rt get me the zeroth result right and then then i could do dot image dot url unlike how it is currently where you could just do json.image.url okay so let's maybe let's put these examples kind of this so you can see right so with this method i can just go like this because i already know exactly which json that i'm getting here i'm getting multiple results so i want to pull the first result get that results image url so a slight change is going to happen whether is going to happen whether we're given um a id or a name so in that case for simplicity's sake i think what i'm going to decide to do for now is just create a different function that way we won't have to do all this if else conditioned stuff we can just have a different function okay so this function here let's rename it and this should be get random superhero that function we run and it essentially will get a random superhero and um yeah and if it's gonna get a random superhero i mean you you really don't even need to give it an id so yeah so yeah you could call it get random super get superhero i'll just leave it as uh let's go ahead command z this let's just leave it as get superhero for now just because i don't want you to like have to change it everywhere like for now you should just have a working version so let's leave that as is so this is one function now let's make another function and this is going to be called get searched get search superhero okay so this is whatever the user searched up and this is gonna it's gonna probably you know whatever the name the user is searching for right now we're gonna be able to copy a bunch of stuff from here okay so let's go back for fetch request here we're gonna have a base url of course but on the top of the base rail we're going to say search and we're going to pass in the name so this is going to get us the you know like put in batman or whatever here and then we're going to do our dens.dense like how we did earlier and let's just go right here and paste them format this cool you do our dense.dense and for json here we're actually gonna grab the we're gonna say const super uh hero is equal to json.results of zero this is gonna be the specific hero and then we can replace that with hero.image.url and uh instead of console.logging json we're going to console.log our hero and this search superhero function is going to run whenever we click the search button okay so let's go ahead and let's see the search button dude we give it an id let's give it an id of search button let's go back into our code and uh let's say search button is going to be document.getelementbyid and we're going to say search button and uh then we're just simply just going to attach a listener to this and we're going to say on click get search get search superhero and for now let's just hard code batman so it should just get us batman and then put him out so let's hit search oh sorry let's hit run at the top first then let's hit search and look at that it's working perfectly exactly how we wanted it to work and when i hit search i am getting batman exactly like like i expected okay let's replace batman with thanos and let's hit run and let's hit search and you can see that i'm getting back thanos so this is good this is doing this is doing what i needed to do all right now what we need to do is we want to be able to put in stuff in here and get access to that so i'm gonna go inside of this input and to grab its value we're gonna give it a name and we're gonna say the value of this is search input so let's see if that will allow us to do what we want to do so i'm going to go ahead and i'm going to say const search input i'm going to say document dot get element by id actually we have not given this an id let's take out the value and we're just gonna do id for now id is gonna be search input okay let's let's do the id there all right now i'm going to say search input and we'll try to get its inner text so search input and let me let's see if we do dot inner text if it actually gets us what we want all right enter enter text and um let's console log it here so i'm going to say console log search input so every time i run i type in that button so let's search and it doesn't look like i got anything let's type in hello or let's not type in that let's say cookie monster so it's like visible let's put a cookie emoji in there and let's hit search and let's see if that did anything and got us anything we're looking for nope i don't see anything let's silence our console logs here so i'm going to silence that console log let's silence this console log here and then this one in here as well so no more console logs let's hit run let's hit search and something is happening but we're not getting what we want let's type it in search is still empty all right so all we need to do let's just hit run here okay all we need to do is make sure search input is documented element by d search input right and then every single time we run this function search we're going to console.log whatever value is in here okay so we're going to say search input dot value and make sure the console log this so now they'll extract the value from that field so let's say i write in uh you know cookie monster and hit search and you can see we're extracting cookie monster right over here exactly how we want to right so this is going to be the search that we're now gonna pass in okay so this is the search input.value is essentially gonna be the name so this getsearch superhero function what we're gonna do is we're gonna copy this search input.value and every time we call this function instead of passing hard coded thanos instead we're just going to pass in the user's search input value that they put in so let's try running this again okay let's try running this again and i will say thanos and let's hit search and boom let's hit batman and hit search and boom let's hit spider dash man let's go search uh ethan maybe oh wow that worked i'm surprised and that was fast too look at how fast it is man this is nice right um this app is doing what it's supposed to be doing so when you search it gets you a hero when you click get random hero it gets you here as well now what we want to do is above the hero it should say their name okay and underneath it just say maybe some of their stats so let's go ahead you should try see if you could try that on your own um but we'll walk through it together if you don't get it okay so i'll give you five seconds to try to pause and try to do that on your own five four three two one cool so what we'll do is we'll get the hero name i kind of showed that at the top okay so let's see where we're doing this we're saying okay the hero image i want you to replace it with an image and i want you to replace it with the following so let's go back to where we're doing that so we're getting the hero let's just go to our random hero function first because that one is easier to understand and here we're creating this you know we're basically saying hey the html is the inner html is this we're creating this image show that image well above that image we could actually put the um we could put their name okay so for example i could say kant's is uh we're gonna go grab the json and we're gonna say dot name so json.name but we need to actually like make the actual h2 or whatever so let's turn it into an h2 i'm going to say h2 wrap that in an h2 okay and we'll wrap this this so json.name and now if you want to like kind of concatenate these together you could actually go i mean this is kind of getting really crazy but what this is doing here is you're inserting the name html and then you're inserting the image right after that so let's see if we can try this and if this works let's go random hero right and now we get robin v and the image let's try again we get vision 2 and boom right we get the name and the hero as well and we can get their stats too so let's try console logging the json and we're gonna do dot power stats let's run random hero and you can see we get back intelligence strength speed durability power combat so you can actually show all of those stats right underneath here see if you could do that by yourself okay so here i would highly recommend you take about five seconds see if you could add that yourself so i'll give you five seconds five four three two one all right so let's go ahead and do this together so i'm gonna say const power stats um is going to be you know not h2 but maybe it's gonna be like p tags so we could actually either do all power stats or what we can do is just do one stat at a time so let's just try intelligence and we're gonna put in a p tag here and i'm gonna say dot json.powerstats.intel and wrap that close that p tag right there so so now what i can do is i can go and take this intelligence and just show it at the bottom right so we can add that right here intelligence hit enter and let's go right random hero right ellie bishop intelligence is undefined interesting let's see why that's happening oh i misspelled intelligence right here okay so careful with the so that's why copy pasting is oftentimes better better for programming so you don't make these errors let's go ahead random hero we got sauron and then the and it's 88 over here okay so if you want to make that better you can actually say intelligence and then it'll look cleaner that way so now let's hit random hero tundra intelligence is 38 and try doing this right let's make another one for another stat so we're going to do instead of intelligence maybe this one will do strength and we'll say strength and we'll paste strength right there and then we'll attach strength onto this so we're just making this this long html right over here all right let's run this get random hero and you can see now we have the cape we have intelligence and strength now if you want to make it like kind of more enticing you for for intelligence let's put a brain emoji for this let's put a muscle emoji and now let's run this get random hero and you can see intelligence is 50 and strength is 10. right random hero intelligence is null so maybe this hero does not have an intelligence right here intelligence is 88 strength is 10. now we can see the pattern here right basically for all the stats we're going to keep needing to repeat this pattern again and again and again meaning this it will basically you'll need to keep copy pasting p tags together so at the end of the day what it actually looks like is p tag right and then you're gonna have this so like actually it'll actually look like this so you have this p tag right here um combined with this p tag back to back combined with probably another p tag that talks about combat right combined with another p tag that talks about maybe strength or sorry not strength but like speed followed by another p tag that says durability so we're seeing this like pattern here and we want to actually create this big long string and then we want to just attach that string right here so you know it's a pattern so what we can actually do is let's just create a function that actually you know gets stats get and show stats or actually let's say get stats html so it will get the stats right but then convert them into a usable html so we're going to create this function and we're going to expect that we're going to get a character okay so just like we're going to we're going to expect that we get this like jsonlike data of that specific character and then what we're gonna do is we can do map here or we can do a for each but but since we're just trying to do a string concatenation it might make more sense to do a four each you could also do a dot map and kind of join everything together so we could definitely do it that way as well okay so how that might look like is say you have an array let me clear this so say you have an array that says hello by cookie whatever and let's give this so if i want to join all of these i can actually just do this and i can just say hey just join them all together so if i have an array of like p tags and i have intelligence here intelligence and then i have another p tag that says speed right i could actually do dot join here and do this and i just get back one big string so this is kind of what we want to do here so i'm going to say character okay dot map so map basically says return an array and we're actually we're going to do power stats character.powerstats.map okay so we're going to loop through all the power stats we're going to loop through all the power stats and for each stat what i'm going to say is make this html like looking thing here all right so since what we're getting back is actually an object it's not going to be super simple to loop through this so what we're going to say is character.powerstats is not an array okay this is actually going to be an object that you're getting back so what we want to do here is we want to loop kind of this way and i'm going to say for stat in character.powerstats and we're gonna loop through this and let's just console.log each stat and let's call this function getstats.html uh let's just say maybe and i'll call this function and we'll pass it the character which is just json in this case uh but this really is the character okay so get stats html pass it to character and then it should just run and then console log all the power stats let's run this let's get a random hero and you can see it just ran through and says intelligence strength speed durability power combat perfect so now what we want to do now that we're actually able to loop through this now another way that we can actually loop through this and let me show this to you because this is kind of cool so if you have an object right so let's say we have things and things is this object right over here which has strength and cookie well i can actually go and i can say object.keys and pass in things to it and it's going to just turn that turn all of its keys into an array and then i can actually loop through those keys so that's a really cool way to actually to actually like iterate so instead of saying for stat and power.stats what i could actually do is i could say object dot keys and um we could ask for the character character the power stats and this will turn the whole thing into let's actually just console log this so it's not super confusing i'll console log this here in the same line all right let's run this and let's get random hero and you can see that i have this array here intelligence strength speed durability power combat so i just turned this into an array of all of the keys so now what's cool about this is because it is an array i can loop through it with a dot map and then a dot map will loop through this array and also return an array so now what i can say is for each stat i want you to do the following okay so it's going to go through each stat so intelligence strength speed durability power combat blah blah and here's what i want you to do you're going to uh create this string okay we're going to say p tag and then this p make sure it's a template literal with backticks it's going to be a p tag it's going to have um that the name of the key that you're passing so here i'm just going to say it's going to be the stat okay whatever stat that is so it's so this is going to turn into their strength or whatever uh or like intelligence right and then we can say i'll put a colon here right and then after that colon we want to do is actually put the value so i'm going to say i'm going to say character dot power stats right and then pass it that specific stat we're looking for so i can just say stat or i could just do it like this and i can say stat like this okay so it's going to go to that object and it's going to pull that specific stat so all this means is let's say that this object was called we had something called character dot power stats and that was equal to this array right there whatever right or that object let's copy that object and let's say we have power stats is equal to this object right here and so if i do power stats and i pass in strength oops it's going to get me the value of strength so it's going to get me 8 right there so that's all we're doing here i'm basically going into that object and i'm just pulling out its value and then we're just going to end this p tag and this p tag all right so it's gonna loop through and do that and then let's see if we need to do anything else for this one and honestly it doesn't really look like it so we can actually just return this array and it's gonna create a full array okay and so i'm going to call this const let's say stats and then we'll console log stats okay so let's run this let's do get random hero and you can see now i have intelligence and a p tag i have strength and a p tag i have speed and a p tag i have durability in a p tag power and combat and if we want to give each of these an emoji we could do that as well and we can kind of create a map for the emoji and then kind of like map the map the stat stat to emoji map we could create that and then we could even use that here and get the appropriate emoji so for example we can we can create that right here right so we could say stat to emoji right and then we could say hey if the stat is let's say intelligence and you don't need to even put it into string here so let's go intelligence is going to be this brain comma and strength is going to be muscle and then we have speed let's paste this and then we have durability durability and then we have power and then we have combat so strength is that speed is a zap durability is let's just say like maybe a tire emoji or something we'd apparently there's no tire so say a rope um workout lift there we go that's durability and then power i don't know that will be power okay and then combat will be sword okay stat to emoji so that's emoji so here if we want to actually like map that we could actually just right before this stat to emoji and then give it the value of the stat and uh this is going to get us the emoji that we want so let's run this let's hit get random hero and you can see like we have intelligence as a brain strength is that zap boom okay get random here another random hero and you can see we got boom right power combat our emojis are working kind of as expected so this is actually making all the stats for us and getting them right and instead of having all of this crap right here which is kind of like weird and annoying i could actually just remove this right and um and here we could just say con stats is get stats html right and then we could just replace all of this and paste stats and now when we run this and we get a random hero okay let's do a random hero okay let's see it's all oh yeah it's doing undefined right now and we know why because we haven't turned it into a string yet we're like this is still an array so remember at the end of and we also need to return we're not returning anything so we want to do is we want to say dot join like this okay and we want to do return stats.join and like that okay so let's run this and now when i do random hero you can see that it's just giving me one long string of p tags intelligence is a p tag this strength right here is a p tag speed right here is a p tag and now when i look you can see that it's actually showing up really nicely right so professor zoom let's get random hero and you can see all of this right here run this again random hero boom mr freeze isis run run run and then we're just getting the intelligence strength speed durability all of that right here now it would be nice to have this intelligence i capitalized as capitalized as well so let's go ahead and maybe add a um dot title case 2.2 title case okay which is kind of a nice little thing that you could do and we could actually pass that in right over here and i could say that two title case and let's see if title case string method javascript okay so you can always like google this stuff too and i'll kind of show you examples and let's see if there's a method that does title casing do we have to oh dot two upper okay so we could actually just do that to uppercase and we should be we should be fine that shouldn't be too bad or maybe that just uppercases everything that's not what we want either actually we can just do two uppercase and yes it's not title casing because title casing is like pretty complex but dot to uppercase is a method that comes built into javascript and you can see what it does and it's really nice right it just capitalizes everything which is nice like we're capitalizing the stat right here um and you know that makes that makes the whole thing just look a lot better so the stats html function yeah it's getting definitely pretty intense i can feel that but uh you know if you're doing this and you you know you got up to this part like you're doing a good job so just hang in there and honestly what we could do is we could probably turn this function get stats html into like get hero info you know get hero info html or something because we can just create the whole the entire html in that function which will be really nice we just hand over all the html elements so it's like the hero name right well that's just character.name so for example if i copied this and i brought it down here this is this would just become character dot name so that should take care of that and then we actually update the div at the end and we create we do this like image thing right here so this image thing that we're doing here well that would be really nice to actually do it handle that here as well okay so let's try handling that here i'm gonna say character.json image url okay this will be a template literal like this just a const image so this will be the image uh html okay and then we have this final html that like yeah and then here we go ahead and we um update this so yeah get stats so we can actually rename this function as to show stats because really what this function is doing is showing the stats on the screen um or showing the hero info on the screen so we could right click this and rename all occurrences we could say show hero info it's a show hero info so this is basically the function that's actually going to show this here the info so i think that's like probably a much better name for it and then it would make sense if that's the function that actually updates uh the entire app as well so i'm going to copy this for now we're going to come down here and i'm going to paste this right over here so this function doesn't even need to actually return this return anything stats boom and in so for stats we can actually just do the dot join right here so i can actually just say that join so then it it just turns this entire thing into that long string instead of keeping it as an array and then this hero image div dot inner html well this just becomes something simple we can actually even remove this guy now and actually just say image so this just becomes this nice little html so we get we make the name html we make the image html and then we make the stats.html and then we just concatenate all of those together and update the hero image we don't need to we don't need this function to return anything right show hero info and we basically get rid of all of this all of this here and we can just simply call the show hero info function so now this function just became really easy to look at right get superhero once you get the superhero you just pass that superhero jace uh con superhero is equal to json you just pass that hero or that character or whatever and that this just shows it on the screen so let's actually try this let's run this let's say random hero all right so it didn't it's not coming up on the screen let's figure that out real quick so what i'm going to do is i'm just going to say console.log and let's see if uh name is working as expected so let's try name let's run random hero yep oh actually it's working i just had to like hit the run i just think i never hit run now let's hit random hero and look at that random here is showing up right and then intelligence strength speed durability all of that showing up exactly how we want let me remove all of this here so now it's really easy to read get the superhero show the superhero that's it now this function is reusable and i'm gonna give you that as an exercise so try that right now see if you could take this what we did right here and add that to search functionality so when i type in batman and i hit search make it so it actually shows me the batman name it shows me the batman image and it shows me the batman stats so see if you could do that on your own i'll give you a hint it's you're pretty much only going to be writing it's going to be just a few lines of code and it'll do the entire thing for you so i'll give you about five seconds see if you could try to figure out i mean pause the video and see if you could try to figure it out five four three two one okay let's go ahead and do this together now so this is going to be really really really really nice okay because watch what we're gonna do let's go to our search superhero function and i'm gonna delete everything from here okay and remove everything right and we already have our hero here which is the first item i'm just gonna call our show hero info and i'm gonna pass in the hero that we have okay and let's give it a try now so let's search uh batman and let's hit search and look at that it's already working right this is kind of pretty unbelievable but if you actually open this app up and you go batman and you hit search boom let's go spiderman boom let's go thanos boom i mean this is amazing or you could get a random hero and both them both of them work so just to explain a little bit about how we were able to make it work that easily is look we already have access to the hero right here so then you just pass that hero to show hero info and it knows what to do already it knows that it's going to get a character it knows it can do character.name it knows how to get the image url it knows how to like turn the thing into object.keys map through it get the stats you know get all of these nice emojis that we have here it knows how to do all of that and so then it just kind of does all of that for you and then you're you're good you're just essentially reusing a function that you've created that's the nice thing about reusing functions right um it it like really is a game changer when you can reuse like your existing functions all right cool so now just to kind of make our app pretty i'll just say like um at the top kind of like right here and i'll say um you know superhero app and then for instructions we'll just say like you can search for a superhero like batman or thanos or simply hit all right so superhero app you can search for a superhero like batman or thanos or you can generate a random hero so now the user goes to this app they understand kind of how it works and what it means so hit random hero all right let's open this up here superhero app you can search for a superhero or you can generate a random hero so let's try random hero right boom we're pulling random heroes and this is like going to an api pulling the data from there or i can actually say you know bane let's see if that works you know thanos i know that works ooh bane has nice combat why is this power like only 51 do we have superman here oh cyborg superman that is badass durability 100 power 100 speed 93 strength i mean yeah but i don't really like superman because he's just overpowered it's like oh he just has like literally every power on the planet it's like how's that a fun superhero i need my superheroes to kind of be like weak but then use intelligence and that's pretty cool um or maybe that's how i was because i went to chess club and i resonate with those heroes more so there you go we got this app it's fully working it's doing everything that it needs to do now what i'm going to do is i'm going to move it over for you inside of our javascript course so you have access to this under api i'm going to create a new folder and this is going to be called superhero superhero app or whatever and in here we're going to have a index.html and you don't need to follow along on this one i'm just creating this for you so you you know that this is available to you and so we're gonna paste the index.html in here we'll go here copy the script so command a command c or ctrl a control c and you're gonna paste that in here and then i'm just going to link it all right so now you should actually be able to go to the home page here and you're actually going to see get super heroes right over here right and you'll be able to click in to get superheroes and then the app should show up here so you could do random here and it'll generate a random hero or you could ask for thanos and search and it'll bring up thanos for you okay and if you want to make this app a little bit more robust meaning like well actually i think if you tried thanos let's see if that works search oh that still works so that's pretty cool spider man let's try okay so the app is actually smart it can it can detect that normally what you do is you call dot to lower case on this so then like whatever user types it just lowercases it and then you do whatever you want with it but this is fine so there you go your app should be working here and should be available to you in your javascript course you'll be you'll be able to click it and see how it functions and uh this will be the solution file for you okay so the solution will be available for you here and you can just kind of go and play around with it and use it or for bonus points you could replace this with your own code okay so if you want to be real pro go ahead and copy paste your own code that you just did in the other repel right paste it over it and see if this still works and if it does you're a real champ because i want you to have this entire javascript course should essentially turn into all your code everywhere here okay so we've covered a lot i hope that you've enjoyed it so far i mean this was a lot of fun covering apis in so much detail and building a mini project i'll see you soon i promise you will be great i promise you're going to be a champion developer one day and i promise i'm going to teach you promises let's get right into it so promises are kind of tricky to understand it throws people off a lot but you and i are going to learn it together just go to replay.com make sure you're here replay.com this is the url and then we're just going to open up a new rupple with html css javascript and let's just say learning promises okay and hit create rubble so we're just going to kind of start from scratch and we're going to walk through kind of real real basics of promises okay so promises introduces the concept of asynchronous programming all right it's a complicated word and i know we've talked a little bit about promises already but now we're gonna start deep diving into promises and looking at it at like bare bones basics and starting from there so asynchronous programming is some piece of code that's going to run out of order okay it's going to happen at a random time so the way that i want you to kind of think about it is like this like imagine you're at a restaurant and you order some food at the restaurant now when you order that food you're still continuing your conversation with whoever you're sitting and eating food with while that food is being prepared you're still talking once the food is prepared the server will bring it up to you or the server will say hey no soup today right that's what they'll tell you so let's go ahead and mimic that type of that type of thing but inside of code okay so i'm going to go ahead and zoom in here so you can actually see a lot more clearly let's do it like this all right and let's say that you're the server or let's say that there is a server and you're going to you order let's say tomato soup tomato soup meanwhile you continue your converse convo with a friend so your life basically continues so this is your other code running whichever code is ready to kind of go and then once this uh your tomato soup is done your server brings it to you in this case we'll just say if your problem is resolved okay the the order that you requested if your order is resolved then your server will bring soup your server brings you soup okay if it is not whoops if it's not resolved paste what's going to happen is rejected okay so this is other situation that can happen and your server will tell you like no soup today okay so maybe like these are the two things that can happen either you get soup or your server comes in to you and tells you hey no soup today so these are the two different type of scenarios that can happen now in code we're going to try to go ahead and mimic that and kind of write it but first things first i want to teach you how to write asynchronous code right so if you've ever done a fetch request or api request that's an example of asynchronous code the way to mimic that is usually you're waiting for something to come back to you so the way we can actually mimic that is we can write a set timeout function and what this does is it takes in a function so let's say whatever soup okay and just console let's just console log soup for now console log soup and we'll pass it 2000 milliseconds now what this means is this function is gonna wait for two seconds and then it's gonna say soup so let's go one two and boom we got soup okay let's run it again one two soup so every single time two seconds happen you get soup so two thousand milliseconds is one second one second okay and so in other words what you can say is if you have a function okay so let's just say you have some funk and this function that you have it like kind of prints out soup or whatever you can just pass in your funk like this let's call it waiting for soup paste it in here run it and this code is basically saying hey set timeout you're gonna you're gonna run this piece of code aka this over here and i want you to wait two seconds oh sorry this is two seconds sorry two thousand milliseconds is two seconds one thousand milliseconds is one second okay uh my apologies on that so you say hey i'm gonna wait for some soup and two seconds i want you to print that out so run i'm gonna wait one second two seconds and then boom i get soup let's run it again one two and i get soup one two and i get soup now let's say you have other bits of code so let's say you have some code which is console log you know you you get to the restaurant with your date and so you start the convo with your date right whoever that is you start the convo and then you continue the convo right but now this is the interesting that happens right so watch this for example and i'm going to take this and paste it here so on line 10 you start the convo and line 12 is you it's gonna say still speaking so what should happen well what you would imagine to happen is i'm going to what what i'm what you should imagine to happen is this line runs first then this line runs second and then this line should run third but watch what's gonna happen you start the convo with your girlfriend or your boyfriend whoever and it says still speaking and then you get soup that's really weird right so if i just go and do this and make it really clear this is one this will print out two because this goes in right here and this should be three so you should you should expect to see one two three but watch what happens one and three run first and then two comes out so it seems like if i had to order this it seems like this line of code seems like this line of code runs first and then this line of code runs second and this line of code runs third because this we're waiting for this all right this is like kind of running in the background now let's model this in a more realistic way so in the start you start your convo right you sit down and start your convo and then what we'll actually say is let's call it order soup so you sit down you start the conversation with your partner line 11 you order your soup and then you're still speaking right you continue speaking so let's run this you sit down you order your soup then you wait a couple of seconds and then soup is ready in reality of course the soup is going to take longer than two seconds to get ready but this is just to show you that you can start a request right right on this line is where you basically start your request and then your request is ready at a point some at some point later right you get the data back now when you're dealing with stuff like this with timeout yes you will get back you know kind of what you're looking for but timeout is also not really good it's called it's thread blocking meaning like it will kind of stop you from often times doing other things so when you're dealing with real world data like an api request it's going to return it to you as a promise what you're not going to get back is this timeout thing okay so let's go ahead and kind of model that so let's create our first promise so i'm going to basically go ahead and say const promise one and it's gonna be a new promise okay and this is a promise class we'll talk a lot about classes don't worry if we haven't already you know in in the javascript course if you're watching it in the javascript course there's gonna be a timestamp for promises or if i have it as a video on our youtube channel or sorry not promises with classes go ahead and watch that watch the part with the classes because you'll then really get how like a promise works under the hood because whenever you do new you're actually creating um like a object from a class okay so anyway so promise takes in a function and that function takes in two things it either takes in a or a reject and then it wants you to do something with it okay so now what i'm going to do is i'm going to say set timeout set timeout will take a function and let's just say i'm going to do this and it says soup is ready all right and i'll do the same thing i'll wait two seconds and then what this code will do is write actually inside of this timeout let's go ahead and do this right inside of this timeout so i'm going to do the following so we're going to have a timeout function and inside of this timeout we're going to say is ready and for now we'll set is ready to true so we're going to say hey if the soup is ready and this is how you do ternary operators by the way so i'll show you an example of a ternary operator so if let's say you have a if is ready equal equal true then you know run this um else do this all right so if you have this line of code you could write it in different ways the first thing you can do is actually you can remove this because if this is already true then you don't even need to say equal equal true but if you want to leave it here you can that's not really going to change anything and then what you could do is you could turn it into a ternary operator as well so you could say hey you could remove this and you could do if this is true do this if it's false do this so that's what we're doing here on line 20. we're basically going to say hey if is ready is true then i want you to do hit you know soup is ready otherwise what i want you to do this is where our function ends right and then let's give it two thousand second millisecond wait right here otherwise i'm gonna say no soup today okay so let's just say no soup today something like that and i'll put a little check mark here if you don't have emojis by the way you can get this app called rocket on your macbook all right so now what this is going to do is it's going to run and what i want to do is instead of console.log for promises what we do is we actually will do resolve or reject all right so if uh like if it's a right scenario and you want and it did it correctly then you want to say resolve like so if you did if you made a let's say a api request and you got data back you want to resolve that and return it if you didn't get data back for whatever reason maybe there's a server error maybe the data wasn't ready then you want to reject it so in this case we're going to say go ahead and reject no sub today okay so do this and this is going to be our like first promise that we have uh wrote and i'll remove all of this okay so remember this is to just kind of visually explain it to you how ternary operators work is like this okay so it's right here right this part right here is the condition this part right here runs if you have a true runs if true and this part right here runs if false okay that's how that's how ternary operators work okay so if i put a box around this the term for this if you haven't seen this yet it's called ternary operators so instead of if else condition you'll have this like more specifically it's that like question mark part and the colon here okay cool so i have this promise here and now let's see what happens when a console log this promise so let's see what happens promise one and i'm gonna go ahead and run this and notice what i get back so i'll comment out all of these lines here up at the top let's run this and you notice i actually get back uh something called a promise so wait how is that useful i did this and i'm just getting back something that says promise what the heck does that mean all that's saying is hey you have a promise but that promise has not been fulfilled yet it just started so it started and like i'm just letting you know that it started now i need to tell it to do something once it's resolved so remember it takes two seconds to resolve but when i run this it instantly does promise right so what i want to do is i want to do a dot then and dot then is the special things that a promise has and what that does is if the promise resolves then you can call a dot then and get its value so we can say console log value like this okay and let's run this and you're gonna see first it says promise and then after two seconds it says soup is ready if i make this five seconds so it waits that'll make it even more obvious so it just started and it said promise now after five seconds one two three four five boom soup is ready and it shows up so you can see that this is working kind of the way that we you know expected but this dot then notation for you might be weird but if you have done api requests you'll recall that hey this is that's actually very similar to api requests because that's where you use the dot then thing and that's how you actually pull the value out now what happens if the soup isn't ready so i'm going to go on line 19 and i'm going to change that to false what happens when the soup is not ready well watch what happens we're going to wait five seconds one two three four five and nothing happened what i don't see anything why did that happen that is weird it's because we're not actually catching that mistake okay so let's go right here this is all gonna be one line but i'm breaking it up into multiple different lines so you can clearly see like what's actually happening okay um and so i'm gonna say hey get me the value on success so the dot then is when success happens okay and then there's a dot catch so this is when an error happens okay and so i'm gonna say get me the value in this case and let's run it so watch what happens in five seconds one two three four five and boom no soup today and that's happening because our on catch is actually catching the reject so whenever you have a reject like this that goes into catch and you can actually pull that from the value so let's go ahead and do i'll say error okay and we'll just make it an object error error and here we'll say success message and i'll say success and an object like this so we'll run this and now you'll see this promise will run and then in five seconds it will get get you okay so in this case here it said error no soup today okay and what we'll do is we'll make this function two seconds and what i want to do here is instead of false or true i want it to randomly select true or false so i'm going to put true or false i'm going to make an array and then we're going to index that array if we index it by zero we're going to get false if we index it by one then we're going to get true what i actually want to do here is i want to index it by something random right so i'm going to say math.random and then i'm going to let's actually call math.floor math.floor and in that i'm going to say math.random and we're going to multiply it by 2. okay so this piece of code here will always make sure i either get a 0 or a 1. that's all that piece of code is doing so this way i'll pick a random true or false and so that way it'll randomly either resolve or reject and i'm kind of mimicking a real situation here fifty percent chance it'll work fifty percent chance it won't but that's not how good apis are right good apis work 99.999 percent of the time and there is this tiny bit of time where they break or return some kind of error so that would be a terrible api if it worked only 50 of the time so let's run it and boom on success we got soup is ready okay let's run it again we'll wait two seconds and we got nothing so what happened here we might we must have had a weird error oh no it just took longer than two seconds apparently and then boom error no soup today right and i can keep running this and it'll randomly keep selecting and then it'll just check hey if it's ready is true run this and if it's false it will run the next statement right because all it's doing here is putting either a true right if i put a true here and i run you'll see that i'll always get and let's make the wait one second so we don't have to wait that much so if i say true it's always going to give me back success and i can run it a million times and if i hardcode false here you'll see that it'll always give me back error so we're just going to put israeli here because israeli is either going to be true or false okay great so now you can see how our promise is working and this promise is extremely similar to the promise that we had in our you know the dog application we made and the superhero application we made and actually let's go ahead and reference that so so go let's go back to our javascript course and if we go to uh dog random and we look at the script right notice that we're doing something very similar here right we have this fetch request and let's actually bring that in here so we can actually play with it so i'll run this and watch what happens okay and i'll console log this for you console.log and you'll see that'll actually say it's a promise and to make it visible that i'm console logging this i'm just going to say fetch like that do it run and you can see that it's telling me that hey the fetch promise has began it has started but now i actually need to do something with it so what i actually need to do in this case is i want to do let's do let's do this okay so i'm going to do fetch and then on another line so like normally i want to do this but you see how the line is running so long that it's going to be too long so i'm going to break it up onto a new line so i'll hit enter so we're going to say fetch dot then and i'm going to get the response and we're going to get the json response back now here's the interesting part if i console log this part here you're going to notice that this actually is also a promise so let's console log this part and i'll just say response and we'll run it and notice that response is a promise response json is a promise too so when you run this call majority of the times you're sending another request and saying hey can you please turn it into a json and then that is also an asynchronous task that could take multiple seconds before returning so it's kind of like this invisible coding that you're doing here right so we have the fetch promise once it's once it resolves once the fetch promise resolves i want you to run the response promise with the json and guess what guess what you're gonna have to do in order to pull a value from that promise you're gonna have to chain it with another dot then okay so we're gonna have to go and chain it with another dot dense i'm gonna go down here and we're gonna say another dot then and we're gonna say data or json or whatever you're gonna say console log data okay this this variable here does not matter you can call it whatever you want and if you ever hear that that's just me using a focus app to keep me focused to keep shooting this so if you ever hear that i apologize it'll happen every 20 30 minutes or something like that just ignore it all right let's run this okay so what did we get we got oh yeah we gotta do not console log all right so make sure to remove that console log that we had remove this part right here and just return response.json like this and then do data and call data on this so let's run that and now you can see that we actually got back the random dog image that we're looking for okay so when you're doing fetch remember fetch is a promise and then you do the dot then response and then that's also a promise okay so this is a promise that's a promise okay so there's like everything is a promise all right and then within here within right here you you have access to the actual data right there you actually get the real real real data and you can do something with it okay so that's why that's like a little bit of a funny reason why that happens but but underneath the hood it's a promise now i'm going to teach you something that's going to make your life a lot easier moving forward and it'll also help you avoid having to do dot dance and dot catches because they get pretty annoying as you can see you'll have to keep chaining and this is essentially one line of code right if i actually remove the wrapping or whatever like this is not how you want to be writing your code honestly with like that many.then.then.then.catch because then you'll have to attach dot catch they'll catch any errors that happen and honestly it becomes kind of a nightmare and so what you want to do is you want to avoid using this syntax and you want to use the new syntactical sugar that like es6 and beyond provided for us and that will make our life incredibly incredibly easier and so i want to introduce you to you the concept of async await okay it's incredibly easy it's not hard it will make this part a lot easier it'll seem a little foreign and weird the first time you look at it but once you get used to it that's the way to go and your code and your logic is going to become a lot easier okay so this fetch request that we're doing here right we want to avoid all these dot dens and make it simpler so let's create a new function and we're going to say get get dog whatever and now what we're going to say this is the most important part is whenever you want to use a weight you're going to need to use async okay so make sure so what we're going to do is just pass in the async keyword here which just says hey this is an asynchronous function so this function uh will run out of order if this function will need to communicate to the internet or get some type of data or we'll need to wait uh half a second a millisecond a couple of seconds to get this data async just means whenever you have to like speak to some website or some database or something you're using an asynchronous function there like 99.9 okay so whenever you think api requests think async whenever you think i'm going to do a fetch request think async functions whenever you have a post request async function all right so i have this async function over here now with this async function um what i want to do is i want to say fetch response is and i'm going to fetch this image okay the only special thing that we're actually going to do here is since this url run real url runs really long i'm just going to say const url and pass that in so we could just actually say url and then i don't need to make this this huge we can make this much smaller i can make this bigger here so i have my url and i'm just going to fetch that url and then what i'm going to do is i'm going to get the data and here here's the interesting part so for this what you want to do is you want to pass in this keyword a weight all right this is very important a weight a weight is the same thing as you doing dot then and then saying respond something okay a weight will make your life a lot easier so we're going to say oh wait then next line i'm going to say const data and i'm gonna say await response.json so look at that we have our fetch requests and then we have our response.json and that's being stored inside of data and now you can use the data variable kind of anywhere you want inside of this function it'll work everywhere and it'll work normally and then you don't have to like you're not forced you're not forced to like code inside of this then method like that's kind of ugly and annoying and now you could use console log data so let's try this and run it okay and you can see that um i got back my oh actually sorry we didn't call this function yet that's why i was like this was something weird is happening all right let's run this and you can see that we're now getting our our random dog right over here okay i'll comment out this fetch right here let's run it again and you can see that i'm actually getting back my dog so this syntax is really really really clean it's a much much much better syntax so in order to use this you have to create a function you cannot use so here are the rules rules for using async await one you must create a function okay you cannot use async outside of a function it won't work so you can't like do this here or something like that that it won't work like that so you need to have a function all right you can't like use a weight like this you need a function that's called async and then you can do all your jiggery pokery all right that's step one two you must use must create um let's use keyword async use the word await so anything you're waiting for you just await it right so here we're gonna await this promise and then we're gonna await the second promise and that's it those are the only two promises right this is a promise and then this is a promise and then once you are done waiting for them you just get back the actual data and then you can do whatever you want with it right so that data gets stored here it's a much much much nicer way to write it so try to do it like that now i'll give you a little exercise see if you could do this soup example that we just did see if you could do this but using async await for this promise right here rather than the dot dance okay so see if you create a function let's you can call it whatever you want like get soup or something right and then see if you could turn this piece of code into this all right so take like five seconds give that a try so i'll give you five seconds five four three two one all right if you haven't paused it or you pause it whichever one hopefully you gave it a try let's go ahead and now do this together okay so i'm going to say const get soup and we'll do this way and then here i'm just going to say const soup is a weight promise and then we can probably console log soup and let's see if this works okay so get soup and i'm gonna run this see i ran into that problem myself i forgot to put i mean and what's nice is that it actually gives us a nice error a weight is only valid in async functions and at the top level body of modules so let's go ahead and put async and run this so boom there we go error no soup today right if i remove a weight watch what's going to happen and if i run this it's just going to say promise right here i'm not going to get anything else i'm going to comment at every other console log statement so we don't get confused that's it it just says promise and then that's kind of it but the only way to get the data out of it is you just say oh wait and now that same thing that was initially saying promise now we'll actually return you data okay i don't know why it's taking that long why is it taking forever okay there we go soup is ready perfect let's run it again and let's see what it says this time soup is ready let's run it again mmm so that's weird how come sometimes it says when the soup is if i run it if soup is ready you know it says it correctly but if soup is not ready it returns nothing isn't that a little sus what's going on so what's going on is now you have to try catch this so if you get an error you're not doing it you're not able to do a dot catch like how you were before so that's what's happening we're getting in a reject reject and reject is not going to get stored in here so what you want to do is you want to say try and you want to wrap this in a try catch so what i can do is i can say try and we try this and we console log and then we do catch okay and we just let's just say console log soup and let's see what happens soup is ready let's run it again soup is ready okay so see we got something that was an error interesting so maybe let's pass in let's catch the error here and let's see if we can print the error out so let's run it and let's hope we run into an error and let's see if it actually prints out our error or not okay soup is ready soup is ready boom there we go no soup today so if you want to catch this is how you catch with async awaits in tax so the catching is not the prettiest but i will just promise you this that if you start using async await a weight will make your life a lot simpler and they'll simplify your code a lot and then it'll be much easier for you to deal with things when you're doing asynchronous programming so a weight is really like the way to go all right now what if we want to take this example further meaning if you promise the waiter or the waiter promises you that they're going to bring you soup well if they bring you soup then that's good now what how can we take this even further if the waiter brings you soup then maybe you also pay the waiter okay so let's let's write these up here so if waiter brings you soup maybe then you tip the waiter and you you pay for soup on the other hand if you don't get your soup so this is like what happens if the situation is resolved but if it's rejected and it doesn't go through and your soup is declined for whatever reason or they didn't have soup then maybe you you know you're you're a crappy customer and you leave a bad review and uh you give no tip all right so how are you going to actually you know write that in code so see if you could give that a try and see if you could take this or the dot down one farther and see if you can kind of um add in all of this sauce like in terms of adding in a bunch of these things okay and just you could create arbitrary variables like uh tip for the waiter so you could create a variable called tip you could create a variable called pay and you can just kind of set what happens to that but the main thing i'm looking for is you know where to write those lines of code okay that's mainly what i'm looking for so give that a give that a try and then we're going to do this together so i'll give you about five seconds so go five four three two one all right let's do this together now so i have this you know so we have either whether it's resolved or rejected now everything that's resolved in my mind is going to go inside of this try block and everything that's rejected is going to go inside of this catch block right so say we have you know cons and and maybe we can give a ra rating you know why not so let's say we have let rating we define another variable let tip and we define another variable let pay okay and if this if we got our soup as promised well then what i'm going to do is i'm going to say i'm going to increase the rating to say i'm going to say hit i'm going to rate this place five stars and i'm going to say the tip is you know maybe 20 and i'm gonna pay you know ten dollars or whatever for the food and then on the other hand if the and then for review maybe i give a five star review here right but on the other hand if i don't get what i want then i'm going to leave a rating of one star i'm going to leave no tip i'm not going to pay anything because while i didn't get anything and then review i'm going to leave one star okay so we can kind of do that and what we could do is actually we can even turn this into an object i'm thinking something let's do that actually uh const data okay let's just say data because that's how usually you get data rating is zero and tip is zero and p is i'm just gonna say zero i mean it should be kind of null okay because those are data types as well null and undefined so you could do null or undefined if you want to be like really accurate because these aren't defined yet actually all right so pay is zero and review is zero and let's actually use those data types afterwards and i'm gonna remove this and then we're just gonna say data.rating data.tip data.pay data.review and then we're going to do the same thing here so now it's actually even looking kind of like a real api which is interesting and then at the end of all of this whichever one we're going to return data and return data okay the try catch block so now if i do soup and i'll do console log now let's run it and watch what's going to happen so promise is running soup is ready all right why didn't we get our data why did we not get our data let's see every console logging it we are are we running yeah we're running at soup interesting yes this is the magic of uh asynchronous information right that's the problem with it so i can get caught up but i can get caught off guard with it too even though i've been programming for years so it is complicated see here if i actually run this it's not going to work because this function runs instantly and then i'm sitting there and waiting for the data so i actually have to await this data and get the results back because it's a promise and i need to retrieve the data but i can't just await it right so i have to actually so what i need to do is this say i want to remove this console log on line 47 and i still want it to actually read the console what i want to what i want to do is get soup right i want to actually call this is a promise getsu is a promise right and it returns when we run asynchronous function it's going to return uh return a promise okay so in order to get this function we can't just call it right when you just try to call it it's not really going to do anything so what i want to do instead is i want to do dot then and i'm going to say value and we'll console log the value that we get out of it let's run this now and now you can see the soup is ready and we got this data so we're go we're actually got the data back that we were looking for right and then here i can actually see that the rating is five tip is twenty percent pay is ten dollars reviews five stars if i run this again and oh no soup today well guess what rating is one tip is zero pay is zero and review is one star so that's how that's how this works hopefully like this makes sense for you on you know kind of how this how you actually do this how all of this works so here's a simple trick for you to remember if you're struggling with promises or you've ever struggled with promises or i promise you will struggle with promises you know in the future if you ever so let's just do this okay so see say if you console log get soup and you're like how the hell do i get the value out of this why can't i extract the value out of it if you ever read that something says promise there's only two ways to ever extract the actual value out of this it's only two ways either you await it which you're going to need to wrap that in a function that has async you're either going to need to await this or you're going to need to dodge then this all right and then just do value value right return the value so those are the only two ways you actually get data back from an async function or any type of asynchronous task or asynchronous promise even if you make a sum function and let's say you make a async sum function that takes in two values a comma b and returns their sum a plus b if you call this function right watch what's gonna happen so if i call this function i pass it one comma two and then let's just say sum here and i'll run this even if it's something simple like this watch what's gonna happen when i run it i ain't got back the results son what the hell why not get back the result i clearly defined this there isn't even any asynchronous parts to this i'm just clearly saying sum up a plus b why are you playing games with me but because we have the async keyword it's an asynchronous function which means by default it returns as a promise so the only way to extract the value out of this you give it a try i'll give you five seconds five and you can pause the video five four three two one only two ways either you call a weight or async my friend so let's go ahead and do async here uh or sorry either await or dot then so let's do then and we'll say console.log or sorry we'll say value console.log value just like this and now let's run it and you're gonna see that we got back to three that three we extracted right away so that's how async functions work and any type of async stuff that you have if you want to extract its value you're gonna have to start using dot thens to retrieve value for them especially if they return data like this all right so hopefully that gave you some examples of how this works all right this probably isn't going to solve everything for you but it's going to give you examples and what we're going to do is in notes here in your javascript course that you're going through right now in notes i'm going to create a file and i'm just going to call it async let's call it promises async awaits it apis whatever okay and uh let's uh let me call it dot json dot js and i'll paste in all these kind of notes for you as reference point so you don't lose them so if you want to go in notes you can look at it okay and then here's another note for you that lance has created these are really nice and really helpful it kind of goes through some of what we've talked about and plus it asks you lots of questions and gives you lots of written notes for promises to practice them more and to really understand them more right so he walks you through hey how do you get the promise variable how do you increment the waiter money how do you you know how do you do the async await plus try catch he has an example that's like an actual working example and if you want to run any of these examples open up a new rupple copy paste copy this code paste it in there and it'll work and how to actually get this data okay so here we're doing return user and just remember since this is an async function you're gonna have to actually extract its value out of it so we have those exercises those notes here for you if you want to get more practice with the javascript course if you're not in this javascript course or whatever make sure you're watching this on youtube just type in javascript and you should find this all right so with that said i hope you enjoyed this i hope you learned something about promises and i know it's confusing but if you really stick to it and keep practicing you'll keep getting better with proc with promises and if you can just really work hard and understand this concept of promises now your journey to becoming a developer will become much much much easier because there are so many concepts that are asynchronous when it comes to web development and nonunderstanding promises will always get you in a lot of trouble all right with that said i hope you enjoyed this and one last thing i i said i was going to talk about null and undefined you could make these like you know null types because if you didn't give a review it should really be type null right and uh let's just say we don't define any values there and if i run this i should get back like null types if uh you know my soup is order right no no no no okay which which makes sense because by default why would you give a rating of zero by default right that doesn't make sense that would mean you literally go to a restaurant rated zero you actually paid zero but you haven't been to that restaurant so it's actually null it's not it's nonexistent or undefined either you can use either one of those and that'll represent a similar thing in this scenario so null is a special value and undefined is usually also a special value all right with that said i hope you enjoyed this let's keep on going let's keep on learning all right let's take your api skills up a notch we're going to build this weather app right over here i can type in arizona hit search temperature is 90 degrees max is 95. i can type in chicago search 91 max is 94 and min is 88 and it's clear right now or i can type in las vegas where i actually just was at and i got very very sick playing a chess tournament wasn't because of the chess tournament it's just vegas as a cesspool of crazy humans doing wild things and so got a crazy sinus infection but now i'm recovering so anyway it was hot it was 120 degrees there when i was there so there you go this is the app this is what you're going to be building right now with the api knowledge that you've learned so let's go ahead and set some ground rules for this and let me actually also show you what you actually need to know in order to be able to build this okay so first thing we're gonna do is let's open up a new tab and let's go to replay.com we're gonna just open up one with html css javascript okay this one right here and let's just say api weather okay and hit create replica cool so this should just be empty right now and then let's go over and open a new tab and we're going to go to rapidapi.com just type in rapidapi.com now once you're on this website sign up i am currently logged in okay so i can log out but like sign up with either github or google or whatever it's free just sign up and then it'll bring you to like rapidapi.com all right on here just search for api so we're going to search for a weather api so i'm going to just type in weather and hit enter and you'll see over here that it shows open weather map this is the one that we're going to be using this is the easiest one to use and why we're using rapid api is because they make using apis really really really easy so let's use them okay they're freaking awesome so let's click on open weather map api and i'm going to zoom out just a little bit so you can see you can see a little bit better here let's drag this back now you can see our api request is getting set up i'm going to hover over this where it says node axios whatever we're going to switch that to just javascript fetch because we want to see how to do that request in fetch and this is already kind of showing us how to retrieve the data from this open weather api okay it's putting in a key it's making a request to the open map open weather map api and it's trying to pull some data from there now there's just a couple of things we're going to need to do so in order to even use the free one just we're gonna need to subscribe to test it doesn't take in a credit card or anything like that so just hit subscribe to test and then choose the one that's a zero dollars okay this is not gonna ask for a card it's just free just hit the subscribe button so we're just going to hit subscribe click back on api documentation all right perfect let's go back to the javascript fetch mode all right and just clean up some of these things over here so for example this over here i'm going to replace that with chicago so you're going to notice that it actually updated that dynamically in the url that we had remove this all the option optional ones just remove them double click and remove double click and remove double click and remove imperial you can leave that and then xml double click and remove so your your url should look pretty simple fetch url should look pretty simple right now okay so if i zoom into this should basically just say community open weather map blah blah blah and then units imperial okay and the city should be chicago for now let's see what happens if i actually try to run this so let's go up at the top let's hit test endpoint run and boom you see that it's actually already giving us back a result okay so let's scroll down here a little bit and you can see we have a result here so we got 13 items back and i'm gonna just close all of these items that it sent and it sent us back a couple of you know it's an object with like a bunch of different properties right so we have a cod a name which is chicago the id of this specific place what time zone it is in all right whatever this dt thing is clouds wind visibility the stuff that we're going to need is we're definitely going to need to pull from weather so we can pull things like main it's like clear okay because if we go back to our app our weather app you can see that we have this clear here so we're going to need to pull this and then after that we just need to pull these different three different ones so temp min temp and max temp so if i go back to rapid api where is min temp max temp let's take a look at that so let's see if we can find the mint max temp all of that so i'm gonna look inside of main and here we have temp min temp max and temp so we have all of the things that we need so it seems like we get them back in this object and then the key that it's in is main okay so for example if i was to imagine what i will be doing is i'll get back some something like data and then from data i'm gonna have to get access to maybe the first data point or whatever and then i'm going to need to get access to main and then within main so main right here and then within main i'll probably need to get access to temp just like that so that's probably how i'm going to get that specific temp that we're looking for okay so let's go ahead and try that out let's copy that code snippet so i'm going to basically copy this entire thing the other way you can copy it just hit copy code go over you don't need to spam it like me being just an idiot go back here and let's go ahead and paste that all of that okay so this is going to be like a bunch of code that got pasted but options here is really what you you so when you're using fetch you can pass it it can take in a url and then it can take in options and then inside of options you can pass it things like you can pass at things like what's your method so this is a get request and then you can also pass it in headers and you could pass it in like the specific key that you need like an access token because you're gonna need that and then who you're sending the request to all right so that's what options really is and if i try to run this let's see if we actually get back any data and boom you can actually see on the bottom right i just get got back all the data so dot then console log response now let's see if let's see if we can get from that response right so this is really data data and let's see if i can do data dot main and let's see if that does what we wanted to do boom it actually just got us back what we were looking for after i did data dot main i didn't even have to do data zero dot main and i'm getting back my temp my temp min and temp max and those are the things i need right what was the other thing i need well i needed that thing where it said clear where did it say clear it said clear under i believe weather so let's go check again so when i ran the results i have weather weather has an array so i have to probably like grab the zeroth item from weather so i'm imagining i gotta do something like this data dot weather of xero dot main i imagine i gotta do something like that and then that'll get me access to that'll get me access to what i need because data will get me access to this whole thing whether dot weather will get me access to this right here whether xero will get me access to the specific array right there and then dot main within that will get me access i believe to this key right here uh this value right here clear so let's give that a try and see if that gets us what we need dot weather of xero dot what do we say dot main clear boom so you can see exactly how we can actually get back uh how we can get access to the things that we need this is how you can make that request so hopefully this sets you kind of in the right place to get started with this exercise and i'll show you now the project that you're going to be building okay so then you have all the tools that you need to be able to complete it so if you go to your javascript course main folder right main file right over here here's where you will find your weather apps if you actually go down you'll see it'll say weather app right over here okay click on that and this is your weather app that you can use and if you go inside of the exercises for this weather app so let's go to projects let's go to weather app let's go to exercise and this exercise here okay we'll walk you through exactly how you're gonna do everything inside of this weather app now you can use this url here or you can use the url that the way that i showed you on rapid api for bonus points try to just use the rapid api way um i think it's easier so then you don't even have to go to open weather app weather map and create your own api but whichever one is simpler for you do it that way and here it'll walk you through exactly how this project works okay so it's like hey you know get the weather data so create a function that essentially runs and gets the weather data um you're gonna need to write something so if we open up the app on this right hand side let's go to the weather app you're gonna need to have the search input field where you're gonna need to extract the user city from and then pop that into your url and then search it right so then when they hit search it pulls all the data this weather maps api problem is pretty similar to the superhero app that we made so i don't think you should have too much trouble honestly doing this this is not shouldn't be too challenging for you if it is it's all good we'll just walk through this together and then you have two functions here okay you have the search city function all right and then you have this show weather data function and search city what this is going to do is based on whatever the user has put in here it's going to extract the value that's what search city will do and then show weather data will update data on the dom and you will have access to what those variables are as well by those variables i mean the dom you're going to need to manipulate the dom so check out the html on where you actually need to go and manipulate the dom also to make your lives easier i have put all the divs you'll need access to all right so your city name weather type temp the these are the div ids okay so these are the actual div ids if you go into the index.html file you'll be able to see those specific ids if you look for them like city name weather type men temp max temp right and that's where it goes those go right there when you change their inner text so all you'll need to do is change their inner text now to get ready for this project what you need to do is this so for your file do the following in your index.html go back copy the index.html from from this exercise file right from the javascript course copy the entire index.html file go and replace it paste it over into the new replit that you created do the same thing by going to style.css and copying this entire thing and going ahead and pasting this so your styles should showing be showing up and then for your script well what you could do is you could copy pretty much everything that's here and then maybe just paste it underneath for now okay so that way you have kind of the piece of code that you and i worked on together so you have that already okay that's just to show you how to pull data and then the rest is up to you because this should already show you enough of what you need to do and really put you on the right track and then it's your job to like go okay how do i retrieve this data and how do i actually like have this data show up here right show up into the right places because this piece of code already does that for you so have fun give this project a try and see how much of it you can get done all right if you get this whole thing done huge props if you don't don't stress too much we'll walk through it together all right with that said i'll see you shortly all right now let's get to work and let's solve this together let's build this weather app now we're just gonna do it from scratch this is the only piece of code that we had right and i got that from rapid api i went to rapid api signed up for open weather map and then basically i was able to get my data points and then it also just makes a code snippet for you which is really nice just make sure to choose javascript fetch and then you can copy and use that exact code snippet so it makes your life a little bit easier now i don't even need this api key right over here because i'm using a rapid api one so that makes life even easier so what do we need to do here we need to get the data based on the city that the user types well we're already able to fetch based on the city right so if i see my fetch request here i can see that i'm passing in chicago so i get chicago data if i run i get clear okay let's remove this here and i'm just going to leave it to data let's run this and you can see that i get back all of the data related to related to chicago right and i can even see name here so let's just put data dot name and let's run it and you can see chicago well let's say i change this to marina del rey and let's run this okay i got some errors right there marina del rey let's put percent signs let's see what happens okay no problem no problem let's go back to open weather map api and i just want to see um when you type in marina del rey how does it write that in strings randall right ah percent 20 20 20 just like that so that's how you represent a space in urls as percent 20. so that's marina percent 20 del rey cool that's a city yep so now it's pulling it's searching at marina del rey and i can also look up hollywood or whatever i want right and let's hit run and it'll pull hollywood and retrieve its data so we already know that whatever we want to put in here it needs to go right here so this is where like you know in my mind if i'm looking at this i will immediately convert this into a template literal and right here okay so const let's just say let city equals whatever city equals whatever in my mind this is where the user city is going to go so i'm going to go user city because i know that it's something that the user is going to give me it's not going to be actually hard coded into my url so now if i give let's say hollywood then when i search it'll say hollywood right here if i give detroit or whatever it will get me detroit yeah so now this is this is kind of doing what i wanted to do we have yet to retrieve the data what we want to do is obviously pull the data dynamically from this user input box when the user types in the data right so if we look here we have city name we have weather type city name is probably where i imagine you know we're gonna pull the the value from that's where the value is it's in this text box so you want to pull the value out of there so let's just say las vegas and then we want to pull the value when the user hits the search button so we want to make our function where when the user hits search we can extract this now if we go to our index.html you can actually see that on the on click method for this search button we already have search city function that gets called so every time i click this button the search city function gets called so let's see where our search city function is it's right here okay so now let's go ahead console.log city and it seems like we're already pulling the value out of it right here and we should be able to see the value so let's type in las vegas let's hit search let's hit run i guess let's type in las vegas and let's hit search and you can see that we pull las vegas so by searching city we're already able to pull the value now we have this other function which is called get weather data so i'm just going to put a const right here this is really the you know this piece of code that we wrote up at the top okay it's basically that because that's where we're really making our api requests i'm just going to first cut my options and i'm going to pop in my options right here because those are like my keys and all of that stuff and then i'm going to cut my fetch request and we can delete this user city because we don't need that anymore and boom we can put our fetch request right get weather data will take in a city so now we'll just call this city right over here because we're already grabbing that from the argument right there i don't need this url right here anymore because we're using rapid api cool all right so fetch fetch will be the city that we're fetching and then it will return that data okay so right now we're console logging the city names i'm just going to say console log data so search city is going to run and then what we can do is we can call our get weather function and pass the city that we got so let's go ahead and give it the city okay so let's see what happens now let's say i hit detroit and let's hit search and you can see i just got all this data on detroit right and it i can even see that the name here says detroit now let's type in las vegas boom name las vegas and i'm getting all this data back so it seems like my button is connect my typing being able to type is connected when i hit search it's extracting the data it's sending that over to get weather data and then that knows how to make a fetch request and retrieve the data back and the last thing really that we need to do is really grab that data and throw it onto our dom right like actually show it onto our screen to show weather data so this is in this method in this function right over here show weather data we just need to update the dom elements so basically what i want to do here is i'm going to take these guys and update them okay so for example what do we have temp right so let's say document dot get element by id and temp and we'll set its inner text to let's just hard code it to 86.6 and then i'm just going to call show weather data right underneath here and i'm going to give it i'm going to just give it some dummy data right now okay so right now we're not really going to pass it anything useful and let's go las vegas search boom and you can see that my temp was 86.6 okay so i'm just hard coding this right now but we're going to need to dynamically pull the temperature and then pass that temperature right actually past the data and not just kind of the silly thing we're doing here so now what i want to do here is i want to return this data so let's just do this so this way i'm returning data and the next thing i can do is i can make this function async and why i want to do that is i'm about to run asynchronous code and i need it to run in the right order because i want to get the data first and then i want to show the data but if i try to run them both at the same time without doing this what's going to happen is this here is going to run first because this is like synchronous code and then this here is going to run after because this is asynchronous that's not what we want we want this to finish first and then we want this one to run okay so i'm going to say async and we're going to say const data and i'm going to say await okay and we can pass this data now to our show weather data and then we'll console log the weather data and see if we're actually getting back anything and i'll just say a cookie here so we can see that it's the actual thing that we're getting so let's run this let's type in las vegas hit search i'm getting back undefined interesting oh because we're not returning anything so actually we can put a weight here and we just got to make sure we return this fetch and now a wait will grab the grab the data and then we'll store that data and then we'll pass that data so let's try running this now let's see what happens okay las vegas boom now it works and we get our cookie emoji perfect so we grab that data and then we show the weather data okay so we get weather data and then we show weather data this is the right way to do it and now that we have access to that data remember how we want to get access to our temps right so let's go ahead console log and we're going to say weather data dot i think if you do main all right let's see what main gets us let's go las vegas again and main gets us all the stuff that we need so it gets us the temp so we could do main dot temp here and i can just copy this and i can paste that right there let's hit run and now you can see that we have 106 degrees temperature automatically being updated right there now we just need to do min temp and max temp and city name needs to go here as well so we're just going to have a bunch of document.getelements by ids now so let's go ahead i'm just going to paste this line five times because i have one two three four five dom elements that i'm going to need to update so one of them is obviously going to be temp so let's just say we're good with temp the next one i'm gonna do is a city name okay so we're gonna go and see i think it's literally called city dash i could be wrong city name yeah i think that should be fine i think so we'll see see if this does what we wanted to do and let's just do weatherdata.name so let's try this let's go ahead las vegas let's hit search and boom las vegas perfect so that worked next one is this right over here how did we get clear again let's go check so we're going to do dot weather of xero dot main and that'll get us what we need okay so we're gonna do dot weather of xero dot main and this is going to get us our this is going to get us what's the div called div is going to be called weather type weather dash type and then we have temp min dash temp and max dash temp so let's just do both of those min dash temp max dash temp okay and then in order to get those i'm gonna just need to do temp underscore min temp underscore max i'm just looking at this right here temp max and temp min okay and now let's give this a try and i think the entire thing should be working so let's go las vegas hit search and we can see las vegas clear temp men temp maxstamp boom that was slick can you believe we just did that right now like we were speeding through that i was like what 14 minutes with explanation we're going fast so let's go chicago hit search clear chicago temp mint max temp right let's type in i don't know that should probably break oh crap that's working so i guess you could type in cities or states maybe i'll try illinois beautiful so it works kind of all around let's check california and just general nice so look at that right it's working really really well it's able to pull the data fast it's able to show the data and if you want to move all of your code from this into the javascript exercise page you could do that as well just make sure you you know command it copy this and go all the way back and then just go into this exercise one right and then select it and paste everything over it and you should be good to go right and then your exercise file should be working so you should be able to go to your project exercises you should be able to click weather app and then it should be kind of working in there for you okay even if right now it's it might be broken there you go so now if you go to weather app right over here it should pull up and once you put your javascript code the exercise one should be working and then the solution one is of course the final version so that's you know that's always gonna be up and running so there you go that's how you make your own weather app hopefully that gave you a clear understanding and everything makes sense and hopefully you enjoyed it and i'll see you soon all right i hope you're having as much fun as i'm having now let's move on and talk about classes so how do classes work in javascript open a new tab let's go to replic.com all right replit rep lit.com open up html css javascript file and we're going to say a lesson and we'll talk about classes okay all right so how what the heck are classes how do they work so classes are you know any time you've seen okay for example uh anytime you've done a dot method on something right that requires you know about classes so let's go into our script.js here so i'll give you examples of where you're using classes where you didn't even realize that you were all right so when you say new promise when you say new promise you're using classes here okay where else are you using classes remember when we can have a array of nums and then we could do numstot push well guess what you're actually working with the class you're working with the array class and that happens to have a method called.push and we'll talk about everything too we'll talk about methods okay we'll talk about properties properties we'll talk about classes okay that's the main topic right main topic is classes and there's all these things all right so we're going to be building this ferrari right over here now let's if you look at this ferrari here right what do we have we have and excuse my terrible photoshopping job but i'm not a photoshop expert i'm a developer all right um that's what i'm that's my skill not photoshopping so we have this ferrari here not fiat because that car sucks so here we have our ferrari and it will have this these these are the properties that it'll have okay so you'll be able to do car.name car.model car.wait and classes are very similar to objects if you learn objects you know you you you're kind of in a you're in a pretty good place like you're not going to be too confused to as to what is happening over here now uh we have this now what are the other things that we actually need to know about this right we have all these properties if you look on the methods well look at what kind of methods we have we have car.start we have car.drive we have car.break and we have car.stop now those are all the anything with the dot start and the open close parens like that those are called methods okay and those are basically like functions but anytime you have to do car dot start then it's just going to be called a method okay any any function that needs a dot is a method okay that's another kind of way to remember it and then properties are where you're not calling the function with open close parentheses so just car.name is ferrari car.model is whatever 500 car.weight is 850 kg car.color was supposed to be red and i photoshopped over it and i made it white so whatever color is red just imagine it's a red okay so we're gonna go ahead and build this thing and we're going to do it in a classbased way so we can actually uh model model this okay and then you'll be able to create multiple car objects from it so let's go ahead and do that now all right so there we go so i'm just going to leave this over here so you can see it the entire time okay all right so i'm going to go ahead and do class and we're going to do class car and we're just going to do this all right now we're going to need to create a constructor and a constructor is really going to have like the you know like what are the initial type of arguments and things like that we're going to have so you'll also learn about a new keyword and it'll be called this alright so i'll show you now so we're going to have this dot name okay so the car will take in the name it will take in let's say a color and honestly that's kind of it i don't want to deal with model and weight yet so i'll just take in a name and a color okay for now or maybe it takes in top speed or something like that speed all right and then we so this this dot name will be name this dot color will be color and this will make more sense once we actually call this object okay and this.speed is going to be whatever speed you pass in so now let's create a new object with this class so i'm going to say const car or ferrari is and we're going to say new car okay so note this new car how we're doing this new so other things you're going to see new with is new date okay so data is a class you're going to do new promise promise as a class okay and we're going to pass in our arguments here so for name i'm going to say ferrari for color we're going to say red and for speed i don't know i'll say 250 top speed and i'm just going to console.log ferrari and let's look in the console and see what we get and boom we just got a car object right there and it says the name is ferrari the color is red and the speed is 250 right beautiful so this is how you will like create a class and create a constructor that will like initialize things instantly now this part this is the keyword that throws a lot of people off like what is this what this refers to guys is you know how we do uh the the name well this refers to ferrari so now when i do so watch this right so if i do ferrari dot name and run it i'll actually get back the name ferrari okay so let me remove the other console log just so we can see ferrari now if i remove this dot name watch what happens it says undefined okay so this here in this case becomes ferrari ferrari.name and we set its name to the whatever name was passed in so say it we had passed in ferrari so then it becomes ferrari like this so it goes ferrari.name and sets it to ferrari okay so in other words this argument gets passed into name and name is the variable that goes right here so that's going to be ferrari and this specific ferrari object that we just created that is referred to by this so everywhere we said this it's being replaced with the word ferrari all right that's what this does all right so if i now go this.color and run this let's go console.log ferrari dot name and then we'll do speed run this and we get ferrari red 250. okay so you can see we've already created three properties that this has okay so these are these are properties properties okay now we're going to go ahead and create certain methods for example let's create a method that's um you know car.start or car.drive okay um car dot break so let's say we have let's say we do car let's say we do drive all right and let's just say console log just drove two miles okay now what we can do is we can go console.log and i can say ferrari in this case i don't even need to console.log it because console.log is inside of the drive method so we can actually just say ferrari dot drive open close parens and when i run this watch what's gonna happen boom it says just drove two miles okay so that's the drive method all right let's do car. let's do break method right so how are we going to do break let's say for break we just want a console log and we want to say came to a screeching halt so you try that and see if you could call dot break take a few seconds this should take you only five or seven seconds to do yourself it's going to be only one line of code just like on line 18 and then you should be able to refer to ferrari dot break so give that a try make sure you're practicing with me the entire time so i'll give you five seconds five four three two one okay let's go so i'm going to go ahead here and say console.log say uh coming to a breaking come breaking coming to a screeching halt or something like that right let's hit run and let's do ferrari dot break breaking coming to a screeching halt there you go okay and uh what are other methods right so we have methods like stop so that is probably like car the car coming to a complete stop so let's say that the car starts off with like a speed of uh okay so let's say we have a current speed as well so we'll go this dot in everywhere we have speed let's say this is we we change this with the top speed okay so i'm going to right click rename all the occurrences i'm going to say top speed so maybe this is passing in the top speed just to make that very clear now we'll have this dot current speed is going to be zero and start all right so whenever a new car is created well it isn't driving right now so it'll be zero but then let's say we start driving the car then maybe the speed goes up by 10 mile uh 10 miles an hour or something yeah so how we could actually do that is in our drive method i can just increment this dot current speed current speed by 10 okay and that just increase the speed by 10 and we'll say console log and i'll say driving driving at and we'll put this dot current speed okay so let's hit run and now you can see it says driving speed at 10 miles an hour so now we have a new property called desktop current speed so i can actually go ferrari dot current speed and we can see that oh no sorry it's not a function so let's run this again it's not a method so current speed right now is you can see undefined oh i'm sorry the and if the speed here is undefined because this is called top speed my apologies but if you if you console log dot current speed you can actually see that it says it's currently 10 miles an hour right so let's run this and you can see it says 10. okay i'm gonna comment out all the other console logs so it doesn't get like super confusing as to what's happening and i'll console log this just drove two miles an hour as well right so it says driving speed at 10 miles an hour and let's console log before we started driving the car as well so in the start you can see the speed is zero right here right if you look we see that the speed is zero right there right then after we drive you can see that the speed is 10 miles an hour well what if we do the drive method again what will our speed be can you guess take five seconds and try to guess this five four three two one okay let's see if you guessed it right beautiful okay nice if you guessed 20 because it increments it by 10 and if you do drive multiple if i do drive two more times what is current speed going to be at this point take a guess i'll give you five seconds five four three two one and it's gonna be 40 miles an hour okay driving speed at 30 miles an hour driving speed at 40 miles an hour so the car is getting like faster and faster now what we could do is we could kind of get fancy and we could do a set timeout where basically if we drive for one second uh it gets up to a certain certain speed if we drive for two seconds maybe it gets up to like 35 miles an hour or something and then when we get to 2.8 or 2.9 seconds maybe it's it does 60 miles an hour right so what is that actually um ferrari let's see 0 to 60 how long does it do it in about 3 point how fast is a ferrari so let's see their seconds right so three seconds 2.9 seconds 2.5 seconds what's crazy is that rivian which is one of these trucks that is like my absolute favorite right now dad that is like faster than a ferrari and it's a truck and it does it in three seconds so some ferraris we have go and do it in 2.9 seconds whatever we'll just do 2.9 seconds right so what we can do is we can even like get fancy with it and we can create a method that like takes us to 60 seconds 60 miles an hour right so let's call it zero 260. and what this does is maybe it runs a set timeout and then it console logs that was fast or something right and let's make let's put some squigglies around this actually because we want this to be like a function and we want to write probably more things in it and then we want to set the current speed to 60 because i'm going to set the current speed to 60. so let's see if this works kind of as expected so we're going to do console log we don't need to console.log we can actually just do ferrari dot 0 to 60 and run this and let's see that was fast okay and now if we check so like if i comment out all these other lines and uh let's comment out this line as well and this one and now let's just check the speed so i'm just gonna get this console log one and put it right here and run it that was fast so because it's asynchronous notice what happened it ran and told me what its speed was actually before that code finished running so we what we want to do is we could turn this actually into a promise if we wanted to get kind of advanced with it and then get this promise and then once it resolves we could do something with it if we want so we could do return new promise and then we can like resolve resolve comma reject and kind of get fancy with it but we can try doing a simpler way first because simpler ways are usually you know we like them and we can actually just grab the current speed like this okay so we can grab the current speed from here after it changes it to 60. so let's try running it now and you can see that the current speed uh at this point has been you know turned into 60. so if we do it like this it'll work and it'll it'll do what we expect it to do now for break what we want to do is see if you can make it where break brings the speed down by 10. okay so if drive brings the speed up by 10 see if you can make it where brake brings the speed down by 10 okay so give it a try pause the video i'll give you five seconds to pause the video and try it on your own i think you'll be able to do it yourself okay so let's do a countdown five four three two one okay let's give it a try now so let's do it together if you hadn't already and if you did great job okay and if you didn't it's okay we'll figure it out together so for break what i want to do is i basically want to say hey um i can remove this console log for now don't care about it and i will simply say set the current speed to um minus equals 10. okay so this will just decrement the speed by 10. and we'll we'll put a console log here and we'll say breaking so let's comment out all of these lines here okay and let's comment down this one and i'll just go right here so we got the ferrari right we have the ferrari now what do we want to do i do ferrari dot drive so this should bring it up by 10 miles an hour and let's print out the speed so i'll console log speed or sorry ferrari dot current speed so let's run this and the current speed is 10 miles an hour okay now let's do ferrari dot break and then we'll console log the speed and you can see that when i did drive it increased it by 10 miles an hour and then breaking it decreased it by 10 and so now we're at zero miles an hour okay now what if we wanted to make stop where stop essentially just brings the speed down to zero regardless of where you're at so to emphasize that first let's do drive multiple times here and see if before i continue the video if you can guess what the speed is going to be on line 46 so i'll give you five seconds to figure that out 5 four three two one all right so how i'm going to figure this out is one two three four five five multiplied by 10 is 50 so this should get you to 50 miles an hour they should decrement by 10 this should get us 40 miles an hour let's run this and we get our speed at 40 miles an hour okay so now what we want to do is we want to implement the stop method okay so try to implement it yourself i'll give you some time to do it you should be able to do it okay and if you're not going to pause the video or if you have paused the video and you're back let's figure it out together now so i'm just going to say now i guess it would make more sense to say coming to a screeching halt right and then we can actually say this dot current speed and we can actually set it to just equal to zero okay so like basically we're going to reset it to zero so let's try ferrari dot stop and now can you guess what line 52 is gonna say okay take a guess there and let's run and boom you can see that now we're at zero miles an hour all right so we were driving at 10 driving 20 driving speed 30 40 50 50 and then we were breaking and then we came to a screeching halt and now we're at zero miles an hour and the car has effectively come to a full stop all right now let's grab a different car let's get a porsche right right here and let's see if you can create uh a new object with a porsche so give that a try and let's say its speed is 250 miles an hour as well okay or 240 miles an hour so you have a porsche porsche okay color is yellow right and then speed of this is let's say 250 miles an hour so make a new object with this and then see if you could do things like drive it or get its current speed and things of that nature give that a try give that a try okay and while you give that a try one thing we can do is um let's go down here okay give that a try pause the video and see if you can actually try this on your own so you take five seconds five four three two one okay now here's how you do it okay let's do it together so i'm going to make porsche right and it's gonna be a new car and i'm gonna say porsche and color is yellow and top speed is let's say 250 miles an hour okay and uh let's go ahead and do porsche dot name and we'll console log it and we'll do dot color and we'll do top speed and let's run this and see if we actually get it yep we get porsche it's yellow and the top speed is 250. can we drive it let's try it porsche.drive and let's do let's drive it like multiple times all right and you can see boom the top speed uh now we're at 50 miles an hour if you want you could also turn it into a loop right so we could basically say you could run it for five times or more if you want so let's say we have an array of one two three four five and i can say for each and i can say i don't care about the value i don't need to use it and i can simply say porsche dot drive so all this function is doing is i don't care about these and i'm just saying hey increment porsche.draw uh just do porsha.drive essentially five times so this gives me a loop that lets me run this piece of code five times let's try it okay i cannot read properties of undefined on line five interesting line five what's happening on line five okay let's comment this out i guess let's try it okay so actually let's do this because nums is also of class type array or sorry array arrays are class type array so you have to instantiate them first and then you can actually do a dot for each so now i can do nums.4 each and now it will actually work okay so now i can actually try run and you can see that we just looped through five times and you know really floored it and gave you know ran our porsche now let's see if we can do 0 to 60 for our porsche so porsche.0260 and let's run this and let's see if that runs okay and it goes phew that was fast now for our timeout we want to make sure that we give it like a couple of seconds right so we want to say 3000 so this will wait for three seconds and then it'll say that was fast and then print out the current speed of the car etc so let's try it now and boom that happened three seconds later it goes phew that was fast okay so we have zero to 60 on this as well and then can we do porsche dot stop and then check porsche dot current speed and we'll console log this and run this now and then boom we have speed is zero okay there you go oftentimes you'll see these get and set methods a lot so i'll show you an example of that and you can try to make this yourself as well so i'll do get current speed you can already kind of see what this method is going to do okay and see if you could write this yourself it's going to be very very very very easy okay it's just going to do one line here um literally take like four to five seconds try to write it on your own as well and five four three two one okay so get current speed and you can just say return current speed okay there isn't a huge amazing use case for this here but i'm just showing you this because a lot of classes will have these getters what they call getters setters so i i want you to get used to this so they'll have ton of like get methods and then they'll have ton of set methods that like set the current speed right so basically this drive method is really like set the speed or like update the speed back by a certain thing um we could even give it like uh we could even give it a method like target speed where you as a user can actually pass in the speech actually let's do that because you've seen how to call methods but you haven't seen how to pass arguments to methods so how about you could actually call the method drive and put in a like a number here like a speed number and instead of incremented incrementing this by plus 10 it'll increment it by the speed that you give it okay so now when we call that drive now drive needs something okay and uh i can also show you default arguments in javascript which are really nice so if you don't pass in an argument it'll just give you 10. for example if i try to run now my code is going to kind of like not work you see how we have these nands everywhere like nan because we're not passing in a speed when we call our drive method so if you see our drive method here we're not passing in a speed here right so if we actually just give it a equals 10 that's a default argument so if i don't pass in a speed it'll set that to just be 10. so let's give it a try now and see if that works yes it does right but let's go ahead and give some speed so for example for the porsche what i'll do is i will comment out this line where i gave it a like a drove it five times here what i'll do instead and i'll comment out this nums line too what i'll do instead is i'll say porsche dot drive and let's say i say 40 okay and then we console log and we get the current speed so let's go ahead and console log here and run this and you can see that it instantly just went it shot up to 40. right it instantly shot up to 40 here let's do 80. okay let's do 40 here and let's do maybe another 80. now what's gonna happen so i did 40 here for drive and i did 80 here for drive what do you think line 69 is going to get us what's the speed going to be 5 4 3 2 1. speed's going to be 40 plus 80 right it's all incrementing on top of each other so it's going to be 120 let's run it and boom we got 120 okay so there you go this is how you make basics of classes and this is an example with cars if you have cars how can you make different classes and give cars different methods and hopefully this was like a really visual example so it kind of got certain concepts through for you so that's what's happening with classes okay so to give you some other real world example of this and you know i want i do want to talk about nums and stuff like that and i'll kind of foreshadow it a little bit but here's a real world example so let's say we have const numbers and we have this array right here and we do numbers dot push and i say 4 and i do console log numbers what is numbers going to say is numbers going to give me back an array 1 2 3 or is it going to give me back an array of one two three four which one is it gonna be if you guess that it's gonna give me back an array with one two three four good job that's exactly right why is that happening because we're doing this dot push so what is dot push is dot push let me ask you is dot push a property is dot push a function or is dot push a method uh or is it something else what's not push if you guess that dot push is a method or a property that's not right because property is if i didn't have any function call here okay so that would be a property it's not a property if you said function that would not be right because a function is if you had to call push like this because you have to do dot push it's not a function if you said method you are completely correct good job okay so this is an example of a method method so if it's a method well then that means whenever methods are involved there must be classes because you can only have methods inside of classes i'll write it as a note you can only have methods inside of classes so you must have a class here well that basically means that numbers which is of type array that that means that that's a class okay it's its own class and that class has methods like dot push and there has there's something i haven't shown you yet but it's called type of so if i actually have an array so let me clear this console and let me zoom in here so you can see better so if i do type of and i say one two three array okay here it's giving me okay what's the type of this and it says object right if i do type of and let's say i do two it says type of number if i say hello right it tells me string so this is a type of either object but specifically this is of array class okay so sometimes javascript is weird it ends up calling a lot of things objects but this is really like an array class and classes are objects sometimes that's okay then you have number then you have string so that's why like when you have a string it has its own methods like dot split right where it turns that string into an array um or you could have an array with one two three and you could say dot join join this with strawberries right and then when i do this it joins one two three with strawberries so there are classes which have their own method so if you were to visualize this so for example when i have arrays right here like arrays right what is array so imagine it like this array is of class uh or it's a class array and then you might have different methods like you might have a join method and you might have the push method right and then we can actually even try implementing our own push okay and we we could create our own push and see if that works exactly like push does and so let's give that a try but first let's just see how certain array methods work okay so for example i'm gonna do so i have one two three this is an array right if i do dot push and i say four you can see that i've added a four to that array right so let's just go to one two three again perfect okay so we have this one two three array now one thing you could do to an array is i could actually get the zeroth property of an array and i can change it sorry about that um i have a chess tournament coming up so my friend is calling me for that it's tomorrow in las vegas and it's like a hundred and four degrees severe heat warnings there but i'm excited and i'm gonna go play it there it's the national open chess tournament and they have a hundred thousand dollar prize guaranteed i'm not looking to win i'm just looking to have a good time it's going to be fun playing on the u 2100 if any of you guys are chess nerds let's get back to this so let's say i have this or so let's say i crit let me create an array so x equals we'll say 1 2 3. okay so i have this array right here 1 2 3. now i can actually change some of the properties in here so i could actually do x of 0 and i can change that to i don't know 10. and now when you look at x notice that i've changed at that 0th position and now you have a 10. okay well what if i change at position 2 and i do x of 2 is now whatever x of 2 was plus 7. what do you think is going to happen what do you think is going to happen here so x of 2 will get you access to the the third index right so this or the second index zero index right this is a zero this is a one and this is a two and i'm setting x of 2 to whatever x of 2 was plus 7. what do you think is going to happen there well this 3 is going to actually turn into a plus 7. so let's try it right and let's run x and you can see that now i have 10 here and 10 there so you could mutate an array right now by doing this what if we access an a location that we haven't we don't even see there so let's give that a try so let's see if i can do x of 3 right which doesn't exist and say i say uh apple and now we do x and you can actually see i have 10 to 10 apple so i could actually add things to an array by getting like the last index of the array and adding things there whoa that's pretty bizarre huh so using this knowledge we can actually implement our own push method okay and i'll show you how you can actually add methods to the array data type so javascript allows you to do array.prototype and this allows you to just get access to the array like class and we can actually now create our own method here and say my push okay so this is going to be our push method that we're creating and we're going to say it's going to be a function okay and what this function is going to do is let's for now let's just say it's going to get this dot length okay this this will refer to the array you're calling the dot whatever on so let's create const fruits and i'm going to say banana let's say blackberry that's not blackberry uh berry is fine oh we don't have to apparently what happened to it strawberry and then we'll have a cookie okay so apparently cookie's a fruit but hey let's just go with it and now let's do console.log and i'm going to say fruits.mypush and call it as a method okay fruit's not my push let's call it the method let's hit run and let's see what happens here okay we're getting an error somewhere let's see where we're getting that error it says line 97. oh because i'm not like calling typeof on anything so let's just comment that out let's run this now and you can see i have one two three four okay and right now it says undefined because i'm not having it return anything so let's say return dot length so it should return length of three and we're we're getting that three we were looking for okay uh let's get our cars to get our cars to kind of calm down a bit so i'll just comment all of that out all right so and then let's comment out our array stuff here as well so we should just have fruits now if i add an additional fruit in here let's say i add a pear or an apple what do you think the length is going to say do you think it's going to say 3 do you think it's going to say 5 you think it's going to say 10 what do you think is going to say let's try running it boom 5 because i have 5 items in here so in order to do the thing right if i have an array with five items then all i have to do is say something along the lines of my array five and in the fifth position i can put in whatever item i pass so my item okay so in this function we'll pass in item okay and then we can actually just pull the item from here and let's actually just see first if we can actually get access to our item through that right so let's just say return item and i'll pass in cookie the word cookie and let's run this and you can see that my push function like meth run my my push method runs it calls this and i can actually call it on type array right i'm creating my own methods for the array and then it's actually returning the cookie right here right so in order to do this now i have all the pieces of the puzzle i can do grab this array okay so this will get you the actual array that you're passing it so let's run this just so you can see and you can see this refers to the actual array that was passed in okay so hopefully that demystifies the word this a lot for you okay because that's what this is referring to and now we're gonna say it's whatever you're calling this dot thing on is usually like this okay so it's referring to like fruits in this case now if i do another dot that dot will be referring to whatever this would be okay so now i'm gonna say this it's i know it's an array and i know what i want to do is i want to return the array okay and on its fifth element around his fifth position zero because let's just go through this this is zero this is one this is two this is three this is four so in its fifth position right over here i wanna add in a um a what other fruit is left that i haven't covered yet a kiwi do we have a kiwi in here apparently we do nice so on that position i want to set that to a kiwi okay and then we return this so let's go ahead and try that and you can see boom we actually now have a kiwi right over here okay so that's super cool but this five is hard coded how could we get this five in a dynamic way well if we have access to this can we do this dot length and get access and then we're just going to set that to a kiwi but in instead of a kiwi we can just set it to an item whatever item we pass it so now we can pass the kiwi from here and let's run this and you can see that we pass in the kiwi went here and it plugged it in boom and so now we have our own push method right we can actually just use our own push to push whatever we want so let's try pushing a couple of things and let's then print out our our array okay so ignore that so let's go ahead and and push a bunch of stuff so i'm going to push more cookies i'm gonna push more strawberries okay i'm gonna push another i'm gonna push an orange okay and then we're gonna console fruits and let's see what happens and there you go all of the things that we actually pushed right got added all of these guys that we pushed here four new fruits you can see that we now have those four new fruits right added in right there okay so you can extend classes you can extend uh array data types like this you could extend other data types like this so you could extend so many things and then you know now hopefully other things to you might make sense too for example if you have an object right so let's say i create an object called things equal or let's say i create an object called actor and name is uh jamie foxx and age is i don't know how old he is 37 right and um money is i don't know whatever something random right so now i have an actor how do i get the keys of this actor i got to use a method on the actor you know object so object is also like its own class and it has its own method so if you were to imagine it you should imagine it like this i have a class object and it has different methods for example it has a method called keys all right so now watch what happens when i do object dot keys and i pass it actor okay so i can actually pass it actor and boom i get name age money all right well actually object keys is a little bit different it's it is on the object class so you could do object.keys and pass past the actors so that's fair enough that's still like that's still a method dot keys okay so there are a lot of things that are um all right and you can also do this you can also do dot values and get all the values back right so you could do dot keys get the get the keys you could do dot values it'll give you all the values of that object so there are so many use cases of this knowledge and this information and if you deep dive into it now it'll save you so much pain in the future because it gets so much harder if you have like shaky foundations and shaky basics and then you try to go and build you know learn more complex stuff on top of it you're just gonna have so much trouble but if you learn this now and you can extend these classes and add your methods and do a whole bunch of stuff like this you're gonna be just such a badass developer in the future and you're gonna be so much stronger than most people and where other people get stuck you're gonna be flying past so i hope this made sense i do i would like to do some more kind of exercises with classes because i think you should get very used to seeing them like everything under the hood is going to be some type of class some type of object everything under the hood is going to be methods and all that type of stuff going on so if you start getting used to seeing all of this now i think it's going to be good for you so we're going to do a few more examples together so all of these notes here i'm going to leave them for you so you have access to them kind of whenever you want okay let's go let's make sure that they're running and if you ever want to run them you can just copy them into a new rupple and run it okay and all of these notes i'm going to take them we're going to go back to our javascript course and then inside of classes i'm going to create a new folder okay and in this folder i'm just gonna call it or actually this could work really well as a yeah so that's good actually so let's go inside of here we're gonna create a new folder and i'm gonna call it car class okay and then inside of here we're going to make a new file we're just going to say how did we name them we should just call them script.js everywhere for fighting game would it be yeah we just call script.js that's fine and then all of this is gonna be in here for you okay so you're gonna be able to see how do you actually work with uh you know how did we create the car class and that lesson is gonna be there so you can just go and take a look at it at any given time that you want all right to finish this off i'm gonna leave you with an exercise try creating a new replit a new rupple okay on replit with just html css javascript and try creating a bank class okay so create a bank class and then it should have methods such as withdraw and it should have methods such as deposit okay and it should have properties such as balance okay so for example i should be able to do um you know kazi accounts and i should be able to do new bank account or whatever account um and you could call the class bank account or bank i don't care whatever and then maybe you could uh start it off with the initial balance okay so and then if you ever do self dot or sorry python world desktop balance it should get me the current balance in this case it should get me back you know 100. if i do this dot deposits 100 the balance should get incremented so what should happen is give me one second and i'll show you what should happen okay let's move this up here boom all right if i do that then after this if i actually take a look at this dot balance that should become 200. if i do this dot withdraw 100 then when i look at this.balance that should become 100 okay because i just subtracted it so i want you to give this a shot see how far you can take it and how much of it you can complete i really believe you should be able to do this entire thing and you should be able to call these methods okay and then do them right so it should be this that deposit yep 100 like this it's a method right and then it takes in a function sorry it's a method and it has a parameter that you have to pass it so in this case i'm going to pass it 100 and then increments it by 100 if i do 5000 or 10 000 it should increment by that amount on the other edge cases let me ask you this if you have zero dollars in the bank should you be able to withdraw a hundred dollars so let's say that this dot balance or let's say you try to withdraw in this case two hundred dollars when you only have a hundred dollars left should you be able to do that no you should not so it should catch that it should stop that from happening and it should print out an error message telling the user hey you cannot withdraw more than what you don't have in order and if you want to make it really jacked and really amazing try adding a ui to this project i don't care if it's ugly it doesn't matter but see if you can add a ui to this as well so it has like buttons i could press for withdraw i could click them and they can help me withdraw and then i click a button it helps me deposits deposit so maybe so let's actually draw this out right so i have a button here for withdraw draw i have another button okay i have another button right here or wherever it doesn't matter for deposit i don't care about the ui as long as you get get it done and then we have another button here or not a button but like rather maybe you have a you know maybe here it actually says what the balance is so it just says like hit a balance right now is 100 or whatever so it actually literally has the balance written out and then the balance increases and you can see it on the screen right so you hit withdraw you hit deposit it either decrements or increments and you know and then if there are any other methods or anything like that you could think about adding them uh maybe there is like you want to close your checking account or something like that and then just clears up everything you know but this is like the main crux of it so try doing this see if you can nail this one you should definitely able to nail this exercise and then once you give it a full solid attempt then we'll work together and code together and make the finished version got it all right i hope you're excited go give it a try and then come back and we'll do this together all right now let's work and create that bank class that we were talking about so let's go ahead and do this so i have this bang class the first thing that comes to my mind before i even start thinking about anything is bank class bank just like this okay um and you know i'm like okay cool that's that's that's a good start what's next well what's next is i have certain methods i have a draw method so i'm just going to go ahead and kind of create that and then i have a deposit method so i'm going to go ahead and create that okay the the balance is going to be something that's going to be instantiated so it's going to be like right when the class is created the balance is going to be created right at the exact same time so for that i'm going to need constructor and the construction is going to just be kind of empty like this and i'm going to say i'm going to grab balance and we're going to say this stop balance is whatever the balance was passed in then all withdrawal does in my mind is withdraw right this this function right over here withdraw what this does is it should just take this dot balance and increment it by whatever amount the user wants and we should have pretty much the same thing here for deposit but we decrement it oh sorry the other way the other way the other way decrement on withdrawal and increment on deposit right because we're depositing money and we're taking out money so so far looks pretty good to me looks like we're almost done honestly with this let's go ahead and do const causey checking and we'll say cla new bank and uh we're going to put in we're going to start it off with a deposit of 100 okay let's go ahead and console log causey checking dot balance okay and then we're simply going to i'm gonna just move it a little bit out of the way here and we're gonna say run okay and you can see that i'm getting back uh 100 here which is great you know that's exactly what i had expected when we made this now let's try adding so i'm going to say causeychecking.deposit and we're going to add in 100 and then let's print out the balance again okay and now the balance is 200 and what we can do is inside of our withdraw function i can just add an or end deposit i can add a console log right here and i can say so it just shows us the balance right away okay so that won't work so i'll just do balance call in this dot balance like that okay and you could call this whatever you want that doesn't matter and this in objects is the same thing as if you did balance okay so both are the same so i'm just going to copy this and i'll also paste it over here so we have um so basically as soon as it updates the balance amount it should just show it okay so then that way we don't have to do all these a ton of console logs okay and maybe let's add another console log that says console.log deposited and the amount okay and then we'll do the same thing for withdraw and we'll say with drew the amount so let's run it and now you can see it says deposit it 100 right and we can put in so i just put a dollar sign here and then we can put amount like that so it'll show it with the dollar sign so it's a deposit 100 so balance is now 200. okay and we can we can do this same trick that we did here for with for withdrawing okay so let's try with draw so after withdrawing balance is 100 let's withdraw one more time balance is 100 0 right now here's going to be the problem if i try to withdraw one more time do you think it's gonna let me withdraw i'll give you five seconds to figure that out five four three two one yes it's gonna let me withdraw right watch what happens boom negative 100 should i be able to withdraw allowed to withdraw money that i don't have the answer is resounding no right heck no i should not be allowed to do that that is crazy otherwise would be super rich right all of us would be insanely rich so what we want to do in that case is add a guard clause inside of our withdrawal okay so we're going to say guard clause so protect against this and i'm just going to say if and hopefully you tried this and you got it if you did good job and if you didn't that's okay but like if you didn't get it and you want to attempt it now try pausing it now and basically what i'm gonna say is i'm gonna say if this dot balance is less than or equal to zero then just return like meaning don't don't run don't run this function method just stop it right here okay so let's try running let's try this again and let's see what happens okay and maybe we can even say this and and say um you know or maybe we can we can like throw an error here too or a console log and just say can't not withdraw you cannot withdraw more than what you have so if we're already at zero this will stop us this statement will stop us with drawing if we're already at zero okay so for example if i try running this now it says you cannot withdraw more than what you have so this is really good for zero but the the problem still remains for example if my balance was at 100 i could still withdraw 200 right that won't we won't be stopped by that let's say i try 200 and run this you can see now my balance is negative 100 right and then it stops me after that but that's not what should happen we should be able to withdraw before that so maybe what we want to check is we want to say if this dot balance minus the amount that we're being passed in if that's less than or equal to zero then just stop so let's try running it now and you'll see that it doesn't let us withdraw less than you know once we're at 100 it doesn't let us withdraw and it stops us twice and stops us both times so we'll not be able to withdraw any more than we have right so for example if i try to withdraw let's say a thousand dollars it'll just say sorry can now withdraw it all right and the our balance will still be at at 200 okay so maybe we can i can do this it's like i can print out the balance as well here right so you can now withdraw more than what you have and then boom shows the balance right there so that stops it and now you can you can try depositing you know as much as you want you can deposit ten thousand ten thousand ten thousand if you look at your balance it'll be twenty nine thousand one hundred now let's say you start with drawing twenty thousand and then you try with drawing 5 000 and then another 5 000. let's see what happens so a bunch of your deposits deposited 1000 withdrew so deposited one 10 000 deposited 10 000 and then you tried to withdraw so it's like withdrew 1000 withdrew 20 000 so balance is not 90 100 from 29 000 that makes sense but when your balance got to 4 100 right and you try to withdraw 5 000 well you ca it says you can't you can't withdraw five thousand dollars so that's how those methods are working so that's really really good now the only thing that was left is if you could kind of create a ui for this right so let's go ahead and try to create a ui for this that shouldn't be that hard so the first things i want to do in order to create a ui is i need some buttons all right i'll create another button here and for this button we'll call it we'll give this button an id of deposit deposits we'll give this button id of give this button an id of withdrawal okay so we got two buttons here and it'll say deposit this button will say withdraw so a little plus sign to show that that adds money this withdraws minus sign that that withdraws money we'll remove this hello world from there okay so now we have deposit and withdraw um we'll have the text for your balance right there so i will have a div here and then inside of this div i will have a p tag and this p tag will say uh balance right and then balance will be zero for now and then we'll give this an id of balance this div because then we're going to be able to change its inner attacks or it's inner html right perfect so we got balance right there cool so we have our balance we have deposit withdraw and now what we want to do is when we click we want certain functions to run so what i can do and there's this nice little trick since i have this deposit id right here i could actually just say i believe deposit and should run this i think so but let's uh let's not be that hacky let's try to avoid being that that degenerate so i'm just gonna say const deposit button and we're gonna documents dot get elements by id and we're gonna say deposit okay and then i'm gonna do the same thing and we'll get the withdrawal button and all we're going to do is we're just going to attach listeners to this i'm going to say deposit button dot on click and every time you do on click we're going to do you know quasi checking and this we'll just do cause you checking that withdraw that's fine cause you checking that withdraw and um oh okay that's a good that's a good point we'll also have to do a input field for like how much do we want to deposit or withdraw right so let's do input and we'll give this an id of amount so let's go back and i will simply go amount input and then we will say amount so if i hit run again you'll see i have a field above here because that will basically tell us how much do we want to uh withdraw or deposit so i'm going to say withdraw whatever the amount input dot value is okay and let's see if that actually does anything right so i'm gonna i'm just gonna console.log and i will say amount input dot value and let's see if that does what we wanted to do so i'll say 23 and i'll run this sorry 23 and then i'll hit i actually got to attach it to something right so for now i'll remove this line and i'll just say amount input dot value and just console log it for me please let's run this and let's hit deposit deposit deposit 23 deposit 25 deposit deposit that does not do what we want it to do let's just console log anything for now just to see if things are attached the right way let's run this let's deposit deposit deposit did it this is still not doing what we wanted to do okay so let's go back to our deposit button it has the correct id of deposit right so the id is correct let's go back pause it this is going to be withdrawal and so i'm saying deposit button dot on click that let's try that ah interesting okay let's open this up let's just see if it's not a bug hit inspect console and let's hit draw it is not a bug interesting okay we're doing something wrong we'll figure it out oh yes i forgot on click takes in a uh anonymous function right so let's do this and now let's hit deposit yes so it runs every single time so now the button click is being detected correctly that's good now let's do amount input dot value and let's run that oops let's run this let's do 23 deposit 25 4 deposit 25 deposit now this part is running correctly as well so if i do 26 deposit right works works correctly good okay let's move it to a new line so things don't get that squished okay so i have attached a listener on this on click now let's try doing that withdraw thing that we were doing with draw right kazi checking out withdraw amount dot input value okay and let's try doing that so i'll do ten dollars uh oh sorry not withdraw right deposit because this is a deposit button so let's run the code again let's hit ten dollars deposit boom the deposit just went up by ten but it's attaching the string so now it doesn't say 4 100 now it says like 410 000 so what we want to do is we want this to be a number and yes okay so we want we want that to be a number and what we could do is we could just call dot value on here and we could just call number on this so now and then amount we don't need it to be an input because it's actually an amount now and we just pass this amount around now so now i could set deposit amount okay so if i said 10 here hit deposit amount input is not defined so this is just the amount and i don't even need that line anymore let's run it again let's do ten dollars deposit okay let's do twenty dollars deposit oh interesting we actually can't do it like that so let's go back let's keep that amount input there once we get this query selector then we have to do dot value because if we just do dot value it's going to just get the value that it initially had when the script loaded and that's it and then every time you click it it's just going to get you back that value but if you keep it like this dom element and then at the time of the click pull the value then you're actually going to get the correct value so i apologize but you're going to have to keep doing that value here and then you're going to have to type cast that to a number like this okay so this you'll kind of have to do each time okay so let's run this and see this i don't need this here anymore let's run it again all right i'm going to deposit ten dollars and now you can see that the ten dollars are deposited correctly okay let's try depositing a thousand dollars let's try depositing 20 000 right and you can see at the bottom right there now it's doing it correctly right we're depositing the correct amount now let's try doing the same thing for the withdrawal button so if you haven't done it yet try doing the withdrawal button yourself and see if you can get it i'll give you five seconds five four three two one all right let's try the withdrawal button together so i'm gonna paste this i'm gonna replace this with withdraw and then we're gonna use the withdraw method here okay and we're just gonna do number amount input.value same way let's run this and i'm gonna say 100 deposit so balance is 42 and now withdraw balance 4 100. so now deposit and withdraw are working all i need to do is update the dom after we do this deposit right so as soon as that happens we're going to update the dom and how what i'm going to do is i have the amount not the amount input i need the i need the balance right so i need this balance div so let's go back and we're going to do const balance div document.getelementbyd and we're going to say balance okay so it's going to get us to div and i'm going to say inner text and we're going to set that to and it's going to say balanced um and we're going to pass in this right there okay you could also just do this so we can create a new variable use that here and use that here okay and then do the same thing for the withdrawal function and then just replace it with amount so then it's cleaner okay so there we go quasi checking that deposit amount and then the balance is going to read that amount and then we're going to do the same thing right here balance div enter texas amount let's run this let's hit 10 boom balance is 10. let's do 30. now you can see balance is 30. right but the problem here is that it's only putting in the amount it's not actually putting the actual balance so instead of amount what should we put here take a guess what we should actually put in here is we should do causeychecking.balance okay that's what we want to do here let's go ahead and do that here as well so it's reading the balance the entire time in that case all right let's run it and let's go 100 deposit 1000 deposit 5200 20 000 deposit 25 000 withdrawal 1000 or sorry withdrawal right withdrawal let's say 19 000 it would draw boom the new balance is 2200. so hopefully this should so hopefully this tells you a lot about how classes work you know what you could do with them how to then connect them to a ui and all of those things because they make your life honestly a lot easier right and then you can use them in a really nice easy way um and they're just really useful and you're gonna see them everywhere and everything is a class like balance div this is a class that's why you're doing dot inner text documents is probably like of a you you get this document object model which is probably like this class or this object and you can do dot get element by id let me ask you what's dot get element by id is it a property is it a method or is it a function which one is it you should be able to guess this in like three seconds three two one if you guess this is a method good job this is a method right because it looks like a function but with a dot that's a method so this document is a class and then we're doing this dot whatever method um so everything just everything has to do with classes and objects and all this stuff and so this is why this is so important for you to learn and you know this this keyword is so important to learn because this will come so many places it will be so confused what it was and you'll be thankful that you did so many classbased exercises and will still do more because like just doing one example is not enough you have to do so many different examples so many different exercises so many different projects and then the more you do the more it starts clicking and the more you start understanding so pattern recognition and programming is one of the most key and underrated and understated things that you could do that will just like skyrocket your skill set okay like intelligence is one thing yes but pattern recognition is even beyond that when it comes to con you know programming even things like chess and then you can build on top of it and take it further now the last thing i'll do for you is we'll take this bank's class we're going to go to our javascript course and then inside of here inside of classes i'm going to create a new folder and we'll call it banks class okay and then in here i'm going to create a new file it'll just be called script.js and this file will have the entire code okay and then i'll grab the index.html so you have that to refer to as well and you can always see it go back here and we'll add in whoops oh jesus what did we do what did i do okay i moved banks out of the banks class out of the classes okay cool now we're good let's add in a new file here and we'll say index.html and we'll paste that html right here okay all right so now what you'll be able to do is you'll be able to go to the home page right and right on the home page right here you'll see lessons and in lessons you'll see classes it'll say bank with deposit and withdraw methods and so this lesson will be available for you you can click it and play around with it right here okay and deposit so you'll have the fully working app with the final solution okay and then you'll be able to hit withdraw and take out any of the monies right hit withdraw let's do 300. boom okay boom 99 okay you'll be able to withdraw whatever you want deposit whatever you want so this app is there for you now and then if you want to look at the code obviously the code is going to be inside of folder called classes it's going to have banks class in there and inside of there you're going to have this code and then the script file is going to be the main one where the entire javascript is sitting there waiting for you okay and you can always use this to refer to your notes run the app make changes and do whatever you want okay hopefully that was insightful and gave you some more insight into classes and we'll be still doing more stuff so i hope you're prepared and excited all right now that you got your classes skills up to a certain level and we worked on how to make a bank we also worked on how to make a car class now what i want you to do is you're going to be taking it up a notch and you're going to be building a street fighter game and this is going to be a really fancy game it's going to have sounds and it's going to have the ability to attack and heal and you're gonna have ken and ryu and two fighters fighting you're gonna be able to create a player class a game class and you'll be able to play the game win the game and you'll be able to hit q a to attack and heal from player one and you'll be able to hit p and l to attack and heal with player two and there's gonna be a whole lot of stuff you can do with classes and this game is gonna push your javascript javascript skills to the next level now for this game your instructor is gonna be lance so i hope you're excited stay put he's an awesome instructor i love him to death you're gonna enjoy it and i'm gonna send it over to lance to show you how to make the fighting street fighter game let's go lance what is up guys it's lance here and like kazi said i'm going to be taking over this specific section of the javascript course i hope you guys are ready you guys are crushing it so far and as you can see we're on a separate repel from the course right these are the topics that i want to go over so the first one we have up here is something called while loops you may have heard of this when kazi was explaining loops the ones that i know that you guys know are the for loops so take a look so with four loops my key if you want to know the difference between these two is you use four loops right when you know how many times you want to loop right and for a while loop right they do the same thing they both loop but you use this when you are not sure how many times you want to loop right think about when we use a for loop i use a for loop to go through an array and loop however long that array is we know that right but the while loop we want to keep looping until a condition is not true all right so let me show you what it looks like enough talk all right for a while loop all you have to do is set up is just this right the key thing that makes this engine run is this right here this is called your condition right whatever you put here is how long you're going to loop to so let's set up an example all right let's say let num is equal to zero right if i were to console log num it would just show me it's zero but what if i say keep looping while num is less than five right so that's how you can read this it's actually really easy to read with while loops you can say while num is less than five keep looping so if i ask you guys right now right here is num less than five yes right so if i were to run this piece of code it would actually run forever because when will num ever equal five see there we go so then we can say something like this right while num is less than five you wanna say consolag looping right and then after we say console log looping we can also do a num plus plus all right do you guys remember what plus plus does plus plus will increment add one to the value of num so the first time it's zero right then the second time it's one two right and so what we could also do here is put a comma and write num so if i were to run this code what do you think we're gonna see in the console over here give you guys five seconds one two three four five did you alright let's hit run and we can see looping zero looping one looping three looping four so how many times did this run this run five times right so now we can switch it up all right let's say let's say let num 2 is equal to 10 right but we didn't know let's pretend this is a hidden number that we didn't know right as long as num is less than num2 right keep looping what if we didn't know what num2 was will it still stop yeah because once it reaches 10 right the condition is no longer true so let's hit run there we go 0 through 9. so that's kind of how the while loop works while the condition is true keep looping so here's a here's another example not as useful all right you can say let and this will be closer to the activity that we're doing let finished equals false i'll say equal is true right so if i said in this while loop finished is equal equal to true right how many times would this loop if i were to run it take a guess if you said it ran infinitely you'd be correct why is it infinite though answer my question what do you think that's because we're saying while finish is equal equally true keep looping but at any point did finish change no but if i were to say in this while loop finish is now equal to false right then we could say run and we'll just see one looping right because it's going to console.log switch it to false and then exit the wild there we go so we looked at the while loop that's pretty much it for that so the next thing we have is add event listener right here and if we were going to talk about ad event listeners you guys need to remember what the dom is so what is the dom well the dom right dom stands for what document object model or model right basically the html itself right so here doctype html and we can select with javascript any of these elements here so as you can see we have our basic hello world text up there how would i grab this div right with javascript all right can you guys see it you guys remember so give me five seconds one two three four five awesome so if you notice there's a little id here that says play alright so what we could do right is set up a variable you can say let play is equal to and then how do you grab uh an id from the dom well i can say document dot get element by id and just over here just say play all right and if i were to console log play what are we going to see exactly html div element right if i wanted to get the inner text right could do something like this enter text hello world all right that's what it says inside that div cool and this is how we use the dom to get what we want from our html right so what if i wanted to add an on click to this what did it cause it teach you you guys remember and for simplifying and for simplifying purposes we're actually going to call this play div so you can make a difference okay cool so now our variable that's holding our dom element called play is hello world so how do we add an event listener the way that qazi taught you right play div would be something like this dot on click right every element has an on click attribute that we can access here and we can say onclick is equal to an anonymous function which just means you know just means a function without a name so if i say when i click this div on the when i click on click of this div we'll console.log yoyo right so let's hit run let's click hello world we should see yoyo oh i see it's because i did capital c just to be lower case c let's see now run yo yo yo yo yo you got it cool so that's pretty simple that's perfectly fine and i'm just going to show you guys an alternate way to do the same exact thing right so this is the on click way right but there's also something called add event listener so play div so you could do is say play div dot add event listener right and then you can say two things right so let's say add event listener and you notice these parentheses down here let me zoom in cool these parentheses comes from the add eventlistener method so this is a method right and it takes in two arguments what are the arguments it's one what are you listening for here well i'm listening for a click then you can put a comma and then you're going to put a function like so okay so you do this es5 where you can say function and you basically it's what are you listening for and what do you want to do when you click all right so this time i want to say console log hey yo or hey yo poo apparently all right so if i hit run here and i click on this hey yo right so how is that different than this it's just a longer way to add events right the like it's a long way than on click but the benefit would be instead of running a click i can write other ones like key down key up you just have to change what the event is listening for cool right so that's just another thing a little side thing that i want to teach you guys the main reason i wanted to talk about event listeners is because we can do something like this all right we can say document dot add event listing right so what i what am i adding an event listener to if i ask you guys that question okay take a look so this one i added event listener to the play div but this one i'm adding an event lesson to the document right so the document is essentially the dom or the whole uh page itself right so basically if i say right something like this and write key down that is an event that we can listen for and then here i can say function right e right and then we'll console.log hi okay cool so let's take a look and analyze this for a second i'm saying document.add event listener i'm saying listen for a key down which is me pressing down on the keyboard and then this function represents what i want to do when i press key down right i want to say console.log high so let's hit run and if i were to press let's say the queue on my keyboard what's going to happen oh it's going to put q if i click that let's click the app itself hi all right i'm just going to click l hi i'm going to hit space bar hi right whatever key i press down it's going to run this function so that's how event listeners work why is this useful answer why am i telling you well the main thing is e right here you don't need to put e here but e is essentially what's going to represent our event or keyboard event right so if i say something like this if e dot key right because each e has a key attribute that we can call e dot key equals q right then i want to say console of you pressed q else right i'll say console log not q okay cool so let's hit run again if i were to press the spacebar once again oops not there on the app not q obviously it's not cute but if i hit p knock you what if i hit q q so if you ever wanted to make your app respond to your key presses we can use document.ad event listener like how sick is that right this is going to come into play when me and you are going to make a fighting game together where we can press q do a nice punch we can press a we can heal up so i'm getting excited right but we're almost there that is document.ad event listener right and you can set conditions within that function too so i like this because it kind of like ties everything together so awesome so i hope you guys enjoyed that one the next thing i want to talk about is audio tags so let me get a second to set up some sounds here for you guys so that we can mess around with it okay so i took a moment to grab some sounds for you guys oops not packages sounds as you can see we got fast heel quick heel quick hit victory fast these are gonna these are things that we're going to be using for the fighting game activity later on but if you wanted to learn how to add sounds to your javascript project we're going to be using something called the audio tag with our html so we're going to need to go to our html for this one and down below here we can go right before the body or actually we can do it outside of the body even and we can say audio like this okay all we have to do it's similar to the script tags or your image tags right we're going to add a source sorry we're going to say source is equal to sounds all right and then we can just pick one so let's do quick hit all right we can say quick quick hit dot left or actually mp3 doesn't really matter cool so that's the source and after that we can had something called controls so i'm just going to format it real quick so we have source we can also do style yeah so for the style i just want to say display none because i don't want to see this audio tag and then for type let's do an audio mpeg awesome okay and then after that we can also give this an id so i'll just call this punch because it's going to use that punch sound effect and now that i'm looking at it quick hit that web is what should be here wav not mp3 so make sure it's the same as the source we'll hit run really quickly all right don't see the auto tag good and next what we want to do is head over to your script.js and let's think about it right so we have this quick hit sound and kind of goes like poo poo right but when do you want to hear that sound right so that's where the programming starts to come into play i want to hear that sound when i press q right so if i press q after our console log i want to play the sound so how can we play the sound remember we gave this an id right so if we give us an id how do we grab this element ah now it's coming together so if i want to grab an element you can say document dot get element by id and just put in the name of the id which i believe is just punch all right so we got the element now but now we grabbed this audio tag how do i use it well to play audio we can just do this method it's just called dot play and if i hit run again i press p well not there i press p not q right but if i press q you heard that all right it's going to play as long as you press q and a little thump sound that's the little quick hit all right that's the one i'm going to use for the project itself so you can set up conditions based on the key that you key down that you press and based on that you can play a punch or a sound right so that's going to unlock a world of possibilities for you guys we could also set it so let's say you want to add another sound let's say if i don't press q i want to hear something else so if you want to add another sound i'll do is copy all this right place in that audio tag once again help don't forget to close it there we go so that's the close this is the closing audio tag for this one this is the closing audio tag for this one for this one make sure that closes but instead we're going to say victory instead of quick hit it is victory and this is not wav this is mp3 so we got mp3 on the line let's hit script js and when do i want that victory sound to play it's when i don't hit q so let's say document.element by id and put in victory vic tori and we'll hit dot play this should work and let me just double check that's what i called it yep victory awesome so let's see if this works run i press q to punch you you heard that and you hit p because that's gonna be something else hey so that's gonna be the victory music when you win in the fighting game as well but as long as i hit not q i'll hit i'll play that victory sound so if i hit spacebar all right i hope you guys can hear that but this is super cool when i found out about javascript sounds i was like yo we could do a lot of different things now right cool so that is audio tag so i didn't really write anything here but we are using them mostly in our html calling them with our javascript and timing when do you want to hear that sound so that's the very basics of all of these things we need all these three concepts plus everything you learned previously to make this fighting game app so without further ado let's move on to the next part alright i think you guys are ready we can finally getting started on your next project the fighting game i'm super excited about this because there's a lot that goes into this this is definitely going to be a lot harder for a project than the previous ones but i think you guys are ready all right it's going to go over all the topics that we've done before especially focusing on classes as you can see here so before i explain what's going on i want to demo the app a little bit as you can see this is our very minimal front end with two players lance for player one kazi for player two right it's pretty obvious how this works if i were to press q lands attacks if kanzi presses q i mean p he attacks as well alright so let's see what happens if i press q right now oops not there on the click on the app thank you there you go you hear that little sound effect and it hits and does damage to qazi and it updates the dom live which is sick all right what if kazi replies with by pressing p there you go i did a little bit more damage than him but we'll see we'll see all right let's say kazi wants to heal up heard that there we go i can heal up as well and that's pretty much the game we can kind of just go at each other one person on the right side keyboard one person on the left or you can just play by yourself like this hey so it looks like i win this round as you can see lance wins right here and if you wanted to reset just click this nice button over here boom so we're back to 100 health we could go again now cozzy wins this time so that's pretty much the app all right it looks like pretty simple but there's a lot of things we actually need to keep in mind so i hope you guys are ready right as an added feature we can hit the simulate button and look at that kazi wins the simulation right it just basically runs through all the commands and once there's a winner it'll get print out who wins so that's pretty much the demo now it's time to get through the exercise you guys ready awesome so to get to the exercise when you hit run the javascript course you just have to click fighting game right here the exercise and you should see the same layout if i were to press q or anything like that it's not going to work it'd simulate nothing all right we're going to add those features ourselves and if i go to this rupple here right this is the same thing this is basically the exercise just ported onto an independent ripple for your guys's testing purposes so i'm going to link it to you guys but hop on a separate rebel to get started on the exercise i'm going to be on here explaining to you guys how it works you ready let's go alright so you guys finally made it here to the fighting game app and now i wanted to explain to you guys how it works give you guys a little bit of a tour just so you understand what the hell am i going to do to make this work so we saw a couple things right you saw me press q to attack right you saw me press reset right you could probably think in your head how you're probably going to do this but luckily for you in the script js right you'll see all the instructions so i walk you guys through don't worry so again make sure you fork this specific rebel fighting game project right so that you can test your code here and not mess with the javascript course if you forked that right and then when you're done you're just going to copy paste your code to the repo so we'll meet up back there make sense cool so this is the fighting game app right this is to create an update game function that will update the dom with the state of the game what that means is when i punch qazi he loses health we should update the html now there's two classes we have to create a player and a game right you guys made classes with qazi before remember so that was like the car right and the car can drive it can honk right what is this class this class he can strike or heal and that makes sense for the player right but then there's a class for game the game is going to represent the whole game itself so what can the game do play check if it's over declare the winner and reset so i hope that makes sense to you these functions are hardcoded into html so don't change their names keep it as it is and here you're going to find all the div ids that we're going to be using there's a couple all right let's play result the names and the health so let's take a look at the h the html just for a second take a look around as you can see very bare bones right this is the image of ryu here here is a div called player controls so let's why did i go here it's because of this id so there's an id called result right and that's going to hold the winner of the match right so remember that you saw that lance wins over here that's gonna be with the result div so if you look scroll down to the result this is the div that's gonna hold that name okay so if you're ever wondering what the hell is this lance take a look at html and see if you can find that same div cool but lucky for you and the exercise we grab all the dips for you right so the names should make sense it's pretty easy to read the play button is a variable that holds the play div right the name div holds the player one name uhhuh cool awesome so now for the meet right the actual factual functionality of the app right this is called update game right the point of update game is exactly what it sounds like update the dom with the names and the latest health of the players right so right now it's defaulted to 100 and defaulted to player 1 and player 2. that's just based off the html so if i go to player 1 right here how do you like take a second to think about this how would you guys grab this div and change the text of it to the player ah right it's getting really complex now but it's not as complex as you think right so we want to be updating this to lens and this takazi or even your name and then within update game we're also going to think about when do we want to stop updating the game and just declare a winner right what condition will we need to do that right so when we update the game we're gonna need a condition to check if the player health is less than or equal to zero because if it's less than or equal to zero should we keep playing the game no we're done so right so if this hits zero or is less than zero we can declare a winner and declare winner is actually another method all right if you scroll up you'll see all the methods that we need to make cool so the very first thing besides update game once you have that working we need to start creating our classes so what is a class guys can you remember a class i like to call it a template for creating an object right so this is the blueprint of that object what kind of object are we making here exactly a player object so in the constructor we have to think about what are the attributes of a player object so what do we need we need a name we need a health and we're going to need attack damage right that attack damage if you guys don't play any video games or unfamiliar that just means how much damage will my punch do to you all right so we can leave that as attack damage right and make sure that this is all passed in the constructor because we are going to do that ourselves later cool so for the strike this is a function within the class and remember what that's called exactly it's called a method right so this is the strike method and keep mo keep note of what it takes in takes in a player an enemy or attack damage right before you get all worried what do you think the strike function does exactly what it sounds like you're going to strike somebody right so when i strike kazi we can make him lose five damage points or a health point so this should be like 95 right but we want to make it random you guys know how to make random damage right so that's why the first instruction here is get a random number between 1 and 10 and that is the damage amount so think about that how do i get a random number hmm right think way back right actually not even that back you guys did that earlier in another project so get a random number between 1 and 10 that is your damage amount so now that we have a random number that's the damage amount what should we do with that amount exactly we should subtract qazi's health with that amount right so subtract the enemy health with the damage amount right so how could we you know change the enemy health by subtracting the damage amount right so play around with it that's why that's why i want you guys going separate rebel it's easier to just play around and test it right i don't expect you guys to be like i got this lance right for me it's going to be incremental you got to test stuff out all right feel it up so subtract the enemy health for the damage amount and after we do that you you technically you did damage right that's correct but i want to see it on the html itself on the front end right so we need to update the dom somehow so guess what then you're going to call update game which is going to update everything with the latest stats so that's why a lot of the functionality comes from you making sure the updating game works properly cool so after you do some damage after you strike kazi you subtract the health you update the game and then just return a message saying uh lance attacks qazi for this amount right not too bad right now if you understood that the heel is going to be very very similar right so remember a heel is going to restore some health back right so we don't want to make heal overpowered so instead of 1 through 10 heal is a method that takes in who is healing right so if i put in let me put an example here heal uh player one who's healing player two or player one player one you guys are killing it so if you said player one we're good to go how does heel work well the first thing we're going to do is get a random number from one two five exactly so we take that number one to five and store it in a variable we can call it hp amount so we have amount what should we do with that amount add it to the player's health right so if i got my num random number was 3 i need to add 3 to the player's health so something i want you to start thinking about is right how do we get the player health lance right well you got to think back on when you make a object from a player class how do you get that health and then how do you want to pass it down right because it takes in a player so how do we get that player and how do we get the health cool so after you added the health to the player guess what we got to update the game to make sure that our html is up to date okay and when it's done just return me a nice message that says lance heals for two hp do good so far great because you're done with the player class that's it only strike and heal as you can see awesome so with the player class done there's also the game class right so if again class template or blueprint for creating an object what object are we creating in here we're creating the game and all the functionality for it so in the constructure constructor the constructor right the attribute that it needs is just is over so if i ask guys what do you think is over means right it looks like it's defaulted to false alright what do you think it means all right take a second one two three four five is over represents if the game is over so if the game if so if is over is false is the game over nah it's not over yet if it's true though the game is over okay cool that's all you need to know by default it's going to be false because if it's true that means we finish the round and if i ask guys when do you think the game would be over here yes this would be if one of us health is below zero or equal to zero so as long as it's not zero or equal to zero keep playing cool so if you got that let's talk about our first method here this is called declare the winner or declare winner notice what it takes in it takes in is over that's interesting okay it takes in player one and player two right if you look at the description if the game is over and a player has zero health we need to declare who the winner is and that's what this function does cool so all i want you to do is just create a variable that's going to hold the message and if is over is true why do i want to check for that because if if if is over is true then that means the game is over but we don't want it to just be that we also want it to be and so what's and in programming that's going to be something you want to think about and player 1 health is less than or equal to 0 then update the message to player one wins or lance wins then we're gonna need an else if if is over is true and p2 health is less than or equal to zero then update the message to kazuwins or p2 wins and just for fun here if you look underneath we need to play the victory sound which i totally forgot for the strike we also want to play a little sound too right but you don't have to worry about that just yet that's gonna happen when you press buttons but when we declare the winner there should be a nice victory sound okay and after that just return message variable that's the clear one keeping up so far feel free to rewind a part of the video just to hear me explain it one more time sometimes you just need it more than once and it clicks all right and don't worry too if you're totally lost there's going to be a solution where i explain how the code works awesome so here we have reset reset is exactly what it sounds like let's say we finish the game and it's over we can hit reset to put back the hp to zero not zero sorry 100 right so reset is going to set the health back to 100 and what else should we do exactly we should set is over from true to false or just make sure it's false because then when we reset the game is ready to go yeah cool another bonus thing is usually there's going to be a text here that says lance or causey wins we want to clear that resolve div in our text so that doesn't show there's a winner right because it shouldn't be wondering if we just started or reset yeah cool awesome then there is this play feature right that's the one where we press simulate and it's gonna just run through all the commands and just generates a winner randomly not randomly but based off the commands that you put so this is where that while loop comes in and notice something where it says while exclamation point this is over right so what does the exclamation point mean if you don't know what the exclamation point mean that just means not right so when not this is over or in other words if this is over sorry in other words as long as this over this is over is false keep running right if it's true then it's going to stop so basically once is over is true no more while loop right keep looping until is over is true if this is confusing you you can still write it as that as well you can say false like so and it would still work the same right this is just another way to do the same thing amazing so like i said once is over is true the while loop is broken then we declare the winner right this is the simulation part right that's nothing to do with us pressing or clicking the buttons this is if you got lazy you just want to see who would win click simulate awesome so once that while loop is done run that declare winner method after that here i want you to set up the players or you can say let player 1 equal 2 and then how do you set up a new player object from the class you tell me all right so put that over here then we want to save that original player data right so if i said uh let player one equals you can say let p1 equal to player one i just want to set a copy so that we can reset without um worrying about you know the original health so there's that next create the game object from the game class it's the same as this one all right how do we make a new instance of the game class and then we can initialize the game by up saying update game right because when you put in lance and qazi as the players it's not going to say lance and qazi here unless you call update game right so make sure you call update game over here awesome over here it's the same thing like we're doing up at the top here except we're just saving the state of is over okay now this right here line 148 we're going to add a on click right listener that's going to run the play method all right so think about how do we set up an on click what uh div element are we gonna use from here to hit the play button or it's the simulate button and make sure that it runs it right that's all you need to do for 148 and for 151 if you're still listening right you're going to add functionality where we can press a or q to do different things so if you remember the prep section that we had earlier this is where it all comes to play so here this should look familiar add event listener key down function e right here's the trick if you press q and the enemy health is greater than zero and is over is still false then call the strike function or method sorry strike method and after striking play the attack sound so here's the audio tag section coming up again and you might be asking lance there's audio here well if you look at the index right scroll all the way to the bottom you can see i already set up the audio for you you just have to play it so how do we play audio sounds think about how we did that all right grab the ids and you hit the play method to play the sound it's up to you guys to tell me when you want to play each sound so map out the sounds to what you want make sure you get the heel in there this is for keel and this is the player two controls and once you have that you should have a working fighting game so this is definitely a challenge i'm not gonna lie to you guys but if you do this you can pretty much make whatever game you want and i think you guys are up for the challenge so take your time with this rewind what you need to and if anything we can look at the solution and do this together so are you guys ready i know i am let's get started all right so this is the solution let's walk through how to make this fighting game app together so are you guys ready and at any point it's starting to all click feel free to pause the video and see how far you get before i catch up to you so this is it this is the fighting game at the moment nothing works i'm pressing buttons and nothing is happening so as you can see this is the fighting game and if as a reminder the main functionality of this game visually is from update game right it does exactly what it sounds like it's going to update the html or the dom with whatever's happening all right so we can see it the main core functionality is going to be based on these two classes that we'll make so think back to when you made a bank think back to when you made a car with qazi right we're going to make a player now and we're going to make a game all right so what i'm going to do we're going to be unconventional we're going to start with the classes first so that update game might make sense right we're going to start with by making the classes cool so let's scroll down to the class player right this is the part that you guys should be familiar with when i make a new player it should look something like this and we have to pass in qazi the health and the attack damage which is just how much damage will cause this punch do that's that's what seven is standing for right cool so as you can see this is where the name goes the health goes and the attack damage goes and then from here we put that for each property of an object right so how do i get if after i create a new player how do i get kazi's name you're going to do kazi.net or kazi right so let's not we don't have to make any of the functions i just want to showcase you how this works so if we scroll down let's find where we have to make the players who will create two players using the player class right so what we have to do i'll do is say let player 1 right you can call this whatever but i want to call player 1 equal to how do we make a new instance of an object we can say new the class name right so capita capital p parentheses and then whatever we pass in so a reminder what do we pass in we need name health and attack damage okay so let's see so we're gonna need name which will be player one will be this time we'll make it quasi right and then the next parameter is health we'll say 100 and for attack damage let's just say 10 so now that that's there this is player 1. if i were to console log player one what am i going to see guys and we see there you go there is our player object with name health and tactic so if i say player1.health right we should see 100. cool if i wanted the player one's name that name right so that's why in the example we have something like this let's see over here yeah that's why i said player one a name is the name or kazi because that's the name of the variable beautiful so at this point you guys should be able to make player two so i don't make player two same thing let player two is equal to new player lance we'll say 100 as well and we'll also make 15 to make it fair well sorry not fair that's not fair at all we'll make it 10. sorry beautiful all right so with that said those are our two player classes right so with coding everything's a pattern and once you understand the pattern we can replicate and do what we need to so this is how you create two players from the player class how do we create a game object from the game class okay cool so if you were saying like game equals new game right is that it right well if you're one they're not sure if this is it we're gonna look up and see if we need to pass anything in the constructor nothing so this is it for the game class right and if i were to console log the game right let's see what we find out we say the object and only attribute that it has is is over is false right as a reminder what is is over mean right basically if is over equals true the game is over if it's false i can still punch quasi he can still punch me back alright we can keep playing so that's what the game is so if i were to if i wanted to see the state of the game i can just say console log game dot is over and it's false so is the game over false it's not over awesome so that's the basics i initialized it like this we're going to come back to this but this is my review for the classes cool so now when i say p1 dot health or p1 that name or game dot is over you should know what i mean cool all righty so now that you've got your refresher on how the classes work we're going to make the core function that's not in any class it's called update game and again it's going to update the html to the game right so if you look at the comment here we're going to update the dom with the names and the latest health of the players what do i mean by that let's break it down by the names so with names where are the names on the html do you see it it's player one and player two right i wanna change this to the names that i put in so if you look all the way down player one is kazi so this should be changed to kazi alright so how do i change that to cause right to break it down step by step first i need to grab this dom element all right so how do i grab the player one dom element so lucky for you all the elements that you need are up here you're just going to have to examine each one and think about what you need and they're pretty easy to read in my opinion so which of these variables contains the name dom element all right i know you guys see it it's number 38 p1 named it is equal to p1 name right if i were to console.log it just to prove it to you guys p1 name div hit run boom there it is html div element and then how do i get the player one text in there right do you remember think back to what kali taught you he said dot inner text and i can see player one so again where is this coming from we are grabbing it from the dom which is right here and you can see it highlighted p1 name the inner text of this div is player one okay cool so now that we know how to get this player 1 we need to determine what we want to change it to right so in this function line 44 we can write p1 name div right and what do i want to change about this div do i want to change the whole entire div no just the inner text so to change the inner text you just do it enter text again and to actually update it or change it you say equals and then if i say something like dog this is going to say dog right but it's i don't want to say dog i want to say kazi and i could just hard code this to kazi this is still technically correct right but what would be more accurate is if i get it from this object player one object so how do i get the name of player one right so you see how the code can be written in a way that's readable so if i want player 1 right i could write player 1 here that would still work but this is the key here this is the parentheses in here this is the argument i'm passing player 1 as p1 so what i'm basically saying is player 1 is the same as p1 so whenever i say p1 i'm talking about player 1. same thing with p2 okay so in the inner text here if i say p1 this is what is the data type of p1 is it a string a number or an object i'm gonna give you guys five seconds one two three four five if you said object you are correct it's the same as the player object that we created before so if this is the object what properties does this object have and which one do i need right i need the name so i'll just say p1 dot name and there we go all right and i'm just underneath this i'll call update game right here i'm going to move it later but if i say update game and i say pass in oops actually no i can't do that and you go back cool if i were to go down here to prove it to you let's see you want to be calling update game here so in line 143 this is where we're going to call update game and we're gonna pass in player one or actually no we're gonna do this sorry let me start over so we're gonna come down to 143 and over here in 137 we're gonna save that player data so p1 is equal to player one and p2 is equal to player two okay we're doing this so that we have the original player data all right so when we reset it's going to be easier so now like i said before player 1 is the same as p1 cool so we want to start the game by updating it and we can put p1 p2 and we can say the game i think was the third variable game state oh yeah game dot is over perfect okay now hit run here look at that quasi it's kazi now right how is it kazi did i write just kazi there nope because i am saying an update game change that inner text to player one's name all right like i said before we could do dog here and if i hit run it's going to be dog cool and again like i said kazi would still work in this scenario right but it's not what we call dynamic right it's hardcoded quasi right i want it to be whatever i put so if i put p1 that name here it's qazi but if i go back to this instance in 134 if i change this to kevin hit run now it's kevin see how it's dynamic depending on what it's like kind of like when you start a video game and it says enter your name here the game will be updated to say that name all right so that's what we're doing all right so hit run cool so if i ask you guys how can we put in player two's name how can we put player two's name what would you guys do you guys got the pattern it's gonna be p2 name div dot inner text is equal to p2 dot name boom that's it awesome so what about the health well the health right we're gonna what we need to start thinking about what div holds this health right let's see if there's anything that can help us here all right if you're not sure we can also look here so in the health it's going to be the p1 health right so we have to grab that element by its id and we already did over here right p1 health dip so following the same pattern we can just say p1 health div dot inner text is equal to what we're going to put is the p1 dot health all right same thing here p2healthdiv dot in our text oops dot enter text is equal to p2 dot l awesome so this isn't so bad because this is it this is what's actually making it so we can see what's going on after i punch quasi or he punches me back cool so now the next thing is if i punch qazi his health will drop to like 90 or whatever okay so if it's 90 are we still playing yes or no yes so if we're still playing right that means we can keep going at it but if my health is zero can qazi still punch me no he shouldn't be able to i'm already done right so we can set a condition to make it so it stops updating the game and we can declare a winner right because that means the game is over so we can clear a condition like i said so if the player health is less than or equal to zero then set is over to true right so basically told you what's right for the condition so how do i get the player health again p1 dot health okay you're right health right and what do we want to check about the health we just want to say p1.health right what we want to say is if p1 that health if kazi's health is less than or equal to zero right then the game should be over right but what about my health if my health is less than or equal to zero right can we keep playing no so what am i really saying then um what i'm saying is if either player's health is equal to zero right so we can say this or right here this means or p2.health is less than or equal to zero so let's read this out fully together so this is saying if kazi's health is less than zero or equal to zero or if lance's health is less than or equal to zero that means the game is over but is it over by just writing this if statement not really right what we need to do is take the game state right or in other words take game dot is over right and set that to true and then we can update the game state our game state is what we passed in here game state to equal game dot is over right so it's like it's called transitive property i'm saying this is now true and now game state is also equal to true right cool now if you remember the solution and the demo when kazi beats me right it's going to say kazi's wins over here in this area right here where my mouse is right so what we need to do to make it so that messages displays is find out which of these holds that resultive right if i go to the html let's look at the html where are you over here 989 it's empty right but we want to populate it with a message that says kazi wins right so that's what this update game is going to return right so we're going to say result dot inner text right where am i getting result from i'm getting it from over here all right it's actually called result div sorry and how do i change it to the message well the message is can be like kazi wins but that's not dynamic guys if i put kazi wins here and i beat qazi it's gonna still say kazi wins and that's not right so what we need to do is make a dynamic by saying is equal to game dot declare winner right and pass in the arguments let's pause them you might be wondering lance what the hell is declare winner well don't worry declare winner if you remember up at the top here it's a function or method that comes from the game class and we haven't made declare winner yet so don't worry about it just know that we have to call it right here okay so declare winner and if you look at declare winner all right sorry for moving around it's going to take three properties it's gonna take the game state which is game is over right it's gonna take p1 and p2 right kind of like transferring this over it's like uh this guy was doing stuff and then now pass it on to the next task right declare winner his job all it is is to let us know that handles who the winner is right update game is just updating the game declare winner is telling us who actually won between the two does that make sense perfect and the last thing we want to do in this if statement we can just say return the game state perfect okay that should be good then that's update game for you so let's hit run perfect so now we got quasi lens right we're making progress on our app already cool awesome so now we need to do strike and heal and strike and heal is from the player class right so remember this is the player object and methods are functions within the class right so when i never think about methods methods are just what that object is supposed to do so what is the player object supposed to do it's supposed to strike an attack right now it can also heal up so that's why these two methods are strike and heal all right you guys are doing great so far right that first function wasn't bad right this thing should be more familiar this this method okay it's kind of like look at this as like a big review of everything you learned so far and don't worry if it doesn't make sense take your time pause the video take a break take a walk right the cool part about this being a youtube video is that you can take it at a pace that you want so with let damage amount right so this is the comment here strike is attacking an enemy from a random number between zero and your attack damage bonus okay so what we're going to need to do is get a random number between 1 and 10 and that is the damage amount right so let's do that so how do we get a random number guys do you remember to get a random number we're gonna use math.random right and what i wanna what i wanna do is store that in a variable so let's make a variable let's call it damage amount all right and we'll set this equal to math.random right and then if i do times 10 that's going to give me a random number between 1 and 10. right and more specifically every single number between one and then so that means 1.5 1.6 1.7 1.10 do you want to do 0.5 damage to causey or lance no so there's two ways we could go about it we could do math.ceiling to round down or math.floor sorry math.ceiling to round up and map that floor to round down right and if i want to make it to 10 right let's use math.seal so math.seal is how you use it put that in parentheses and there we go so if i asked you guys what does line 75 do it gets a random number between one and ten cool and we store that random number let's say it's seven and put it in damage amount all right so how can we take that damage amount okay and subtract the enemy's health by it right so let's say i'm quasi i'm punching or striking lance myself and for seven damage right how can i reflect that on lance's health that i lost seven damage well we have to subtract it with the damage amount so to get the how do i get the enemy health then that's probably a question you have well again you have to ask yourself do i have access right that's kind of like the key here do i have access to the enemy health if i look at the parentheses here yes i do it's an under enemy so if i were to console log enemy and test this function out right that's going to be the player object right or the one who's getting attacked in this case me so what i could do is say enemy right and how do i get the health of a player exactly.health right this is not new you got it guys that health right and how do i subtract damage amount by it well it's going to be minus equals damage amount right subtract enemy health by the damage amount not too bad right cool all right so then if i did the damage already what should i do next i should update the game because kazi can punch me but it's not gonna get reflected on here unless i update the game so let's update the game by saying by saying um what's it called player not player then we could say oops player then we could say enemy and then we could say the state of the game which is just going to be game state right or in other words game dot is over perfect all right and the last thing to need to do is return a message right and basically the message is going to say like qazi attacks lands for this much damage right and if you remember there's something called template literals where we can make this dynamic we could say player dot name which is going to be kazi attacks template literal lance and get the name for and how do i get the amount of damage well luckily thanks to the variable name you can just say damage amount perfect cool so we should have strike and i know you're gonna say attack damage is not used but i'm gonna come back to it if this makes sense to you guys okay cool all right so let's test the function out and see if it works so we can hard code that function and call it right here remember p1 is player one so how do i use the strike method of this player right if you remember a method it's just a function inside of an object so we could just say dodge strike and remember i can't just write dot strike i have to pass in what i have to pass in dun dun the player the enemy and how much damage right so what i'll put here is player one right that's the player the enemy is gonna be player two and the attack damage is going to be 10. remember i'm not using attack damage yet right so let's run this function and see what happens boom 91 right so how much damage did kazi do to me he did nine damage if i run he did one damage to me right see how it's a random number each time the strike is working perfectly right so we can do console log two we can console.log p1 strike to see what it returns to us is it run 92 and it says qazi attacks lance for eight all right so we are missing something that's why you always want a console log to make sure you're not missing anything so let's see for eight didn't say damage all right so that looks more uh like an actual game message so it's a run kazi attacks lands for nine damage right so this is perfect this is the strike function already set up right cool so now let's talk about uh the attack damage argument so remember i'm not using this right but this has the same name as a player as the player attack damage right so at the moment we're getting a random number between 1 and 10 right but you guys should be able to understand this if i remove this 10 and said attack damage right what did i just do what's going to be the random number if you said i don't know right that's going to be true because it's dynamic right why is it dynamic because if i put let's say i put 25 here right as attack damage what that means is if i go over here i'm now getting a random number between 1 and 25 or whatever i put as attack damage let's see if that's right let's hit run 11 damage right that's big boy damage that's five all right 13 right nine all right two right 13. there's a lot of ways to get a number but it can go as high as 25 if you put it there there you go that's a big one 23 damage right so what i'm saying is if i based it off now make it even more dynamic instead of just writing 25 i want to say it's going to be based off p1 dot attack damage right so now what is the random number between all right take a look at player one the random number now is between one and ten again right so this is the place where you're going to input your character stats right so in the video game you put the player's name you put the health and then you could say qazi can do uh 50 damage right let's hit run run 14 19 23 48 damage right so as you can see this is what controls how much den so there's a lot of variation now that we added to the game right you could give someone with a thousand health and someone else a thousand damage if you wanted to right but for simplicity's sake i'm going to keep it at 100 and i'm going to keep this at 10. okay so let's hit run and now it's back to 1 through 10. cool and you also know that this piece of code is what makes me or makes quasi do the punch all right if you wanted to change it around to me doing the punch back to kazi you say p2.strike change this player to p2 change this to p1 and take in player 2's damage yeah cool so the way i would like to understand this app is remember the bits and pieces of this app and figure out ways to we can put it together and when we want to put together right so we don't we can erase this because we get how it works now if i hit run right nothing happens right because i only want to call this strike function at a certain point but we'll get back to that later so that's the strike right i'm gonna move a little bit faster because the heel is actually the exact same thing except no one takes one argument just who the player that's gonna heal right so if cause is healing we're going to put causes information in here okay so the first thing is get a random number between one and five let's do it so let's call it hp amount and let's get a random number between one and five well that's going to equal right math.random times 5 right but this is going to be 0 through 5 and it's going to be the decimal places so we want to say math.seal right and there we go all right that's the hp amount how do we add the hp amount to the player's health well we can just say player right if you remember this up here it's going to be plus equals player dot health well not player health sorry player dot health sorry is going to be plus equals the hp amount okie dokie so we got player.health plus equals hpm cool so after we updated the health in the background right we need to update the front end with it so our phone was only a way that we could do that it's with update game so update game it's going to take in the player right and also p2 and also game state all right which is also just game that is over perfect okay and then we're gonna return a nice message so that we could see it which can be similar to before which is backticks right it's going to read qazi heals for 5 hp for example so to get kazzy's name we say player.name and then we can say heals for the hp amount and then you could say hp exclamation point perfect now let's test if this works okay so to test if it works we're gonna get p1 how do i get the heal method dot heal what arguments does it take it's gonna take in who's healing right and i hit run i healed for 103. let's see if our message works so let's console log the return kazi heals for three hp that's perfect all right 101 104 101 right so this piece of code is how a player can heal right so there you go and with that if you wanted to make player two heal just say p2.heal and p2 right the benefit of making something dynamic is that you can heal like this okay oh i see i see speaking of making a dynamic i made it a little too dynamic it's a good thing we tested this so go back to the heel yes this could just be p1 p2 right because those are the variables that hold the player names so now i've hit run there you go 100 101. now let's only lance heals for four so remember this is how a player can heal depending on who wants to heal you just change it from p1 to p2 so erase that and guess what guys we finish the player class let's go so the player class is now done and let's say the game is pretty much half done too right we already can strike we can also heal cool so now let's work on the game class all right so remember refresh on the game class the game object represents the whole entire game and within that game right we are using strike and heal right but the only thing that we care about with the game is checking if it's over right which it should be false at the beginning uh declaring the winner right after we update the game we have to say like oh qazi wins or oh lance wins right we also want to be able to reset that's what this button is for but let's say we're all at zero hp if i hit reset we should be able to restart our health back to normal set is over back to false and then we can fight again right then there's also this bonus function called play right and play is gonna make it so that we can simulate the whole match okay so you don't even have to play the game you can kind of just simulate what would happen right by pressing the simulate button okay so let's work on that and if we do that the game is pretty much done right we just need to add like little details like sound effects so starting with declare winner if the game is over and a player health has zero health declare the winner right so let's do that let's create a message variable that's the first thing right here so let's say let message and that's it okay it's going to hold a different message based on the condition right so that means if you look at this it says if is over is true and qazi health is less than equal to zero then update the message variable to qazi wins right so there i kind of tell you guys how to write this exact thing you say if right code block and read this and translate it to code well if is over right is over equals equals true all right and how come i don't have to write game dot is over right well take a look do i have access to just is over yes i do right over here it takes in is over p1 p2 so i can just call it freely like so cool so if is over is true right and p1 dot health is less than or equal to zero right in other words if the game is over and causes health to zero right then i want to make the message right update the message to say backticks p 2 dot name wins why do i want to say p2.name wins all right think about it for a second if the player wants health is zero who actually won player two all right kazi's health is zero then i win lance wins all right next is the elsif right i'm going to write it just right over here else if which is the other what's the other scenario in this case well the other scenario is is over equal equal true and right and means both conditions have to be true p2.health is equal less than or equal to zero okay and if that's true right we want it so that the message says p1 wins yeah so the message is gonna say p one dot name wins perfect okay and then if i want i could just take this and put it over here perfect cool and after that we also have a victory sound that i want to play so if you look in the html and you remember the prep course that we did together all the sounds are set up right here right we have p1 attack p1 heal p2 attack p2 heal and victory so and all the sounds are loaded up on here as well so we want to play is that victory sound over here so let's play that victory sound and remember to play the victory sound we just do document get the element by id which is just going to be victory and we're going to hit dot play right and then since we have the message variable we can just say message all right make that really simple cool and now we can declare the winner right this function is now up and running let's see what's what's going on here a message okay good this function is now up and running and if you remember update game function let's see where is it perfect in update game function i said game dot declare winner because that's the method of the game and we passed it in and that's going to hold the message so what is going to show up in the inner text of this resultive exactly it's going to show lance wins or kazi wins okay cool and we can't test it yet until until um you know we get the actual attacking functionality up and running so why don't we do that so before we get through the reset and play we're gonna pause this for a second and we're gonna make it so that we can actually punch and heal right so let's scroll all the way down to the bottom right to the player one controls this is the meat of the project right so if you remember the prep i'm using document.add event listener key down right it's listening for me pressing down on my keyboard uh the specific thing is if i press the q button then i want to be able to attack right so let's set that up so if right and how do i get the key for q right it's going to come through this e parameter right here which is like your keyboard event so if my keyboard dot key right is equal equal to q that's basically what i want to say here so i'll say if equal to q or if i press q and right p2 dot health is greater than zero and the game dot is over is equal equal to false right there's three conditions here why do they matter because i want to be able to press q but i can only press this q if you know player 2 is still alive and the game is not over otherwise i'm just going to keep beating up a dead horse right we don't want to do that so let's put the code block in here and after striking right play the attack sound that's the comment that should go in here right after striking then play the attack sound well how do i strike well i showed you guys how to strike to strike you just have to say the person that's striking which is player one right uh put in who's striking who's the enemy and we wanna make sure that takes in the attack damage right we're making a dynamic here cool so let's hit run if i press q oops no click on the app press q hey look at that we're doing some damage here so if i hit run again to reset it for now right i also want to make a sound you know just to put some impact right so if you look over here which one is the player one attack it is p1 attack right awesome i made the names nice and easy for you guys so it's not too confusing i know it's a lot right but you guys if you guys made it to this point you're doing great so far so how do i grab that element you can say document dot get element by id you can say p1 attack right and you can just say dot play perfect cool so now let's hit run and now we punch all right there you go so now it works i figured out i named i gave the wrong audio files in here it was a dot wav file so i changed it to mp3 so if you fork this rebel at the time watching this video it should say mp3 and it should be good to go like you don't do anything different code wise so let's test it out hit run hey there you go a nice crisp punching sound i'm like literally punching myself and that's the funny part about this so cause he's punching lance doing random damage nice so the cue button works all right the next thing you want to do is set up the e button right same conditions but this time it's for heal right this should say then heal perfect okay so after that's done you set up the same condition if e dot key is equal to where do we want to make the heal button to for player one it's gonna be a right you could set this to whatever you want right the cool thing i love about this is that you can add this to your own game your own project right so if you understand this we can reuse those pieces again and again so a and right b one right well p2 we could also put p2.health here mostly because if i'm kazi and my health is zero he shouldn't be healing while i'm dead right we should just not be able to play so p2.health is greater than zero then p and right and game dot is over is equal equal to false right then we shouldn't be able to heal all right actually no no no if it is true then we should be able to heal yeah yeah there you go so after healing play the heel sound so let's heal so to heal you guys want to do this p1.heal parentheses p1 and then we could say something like uh document element by id and i will save you guys to look it's just going to be p1 here save you guys some time there and how do i play the sound at that dom element it's going to be play so run hit attack that's it heal oh it's not playing you need to double check run oh now it's not loading okay let me try refreshing oh i don't want to lose this progress okay let's check our progress ah there it is we lost it so let's put this back on here the sounds are correct yep yeah see how it says mp3 now before if you looked at the video it says wav it should be mp3 there we go so if i press q p one attack play what the hell okay i see what's wrong this if statement needs his curly brackets okay cool so now we can bring this back uh we can bring back this sound okay cool so the strike is the same the heel is what's new i took out the is over false right that should actually be covered over here let's hit run and now it was a q okay it shouldn't be playing that heel sound okay how about heal all right heel's working fine now it's this guy why are you playing both sounds and healing let's see ah okay i see now all right so you tell me guys if you see the error and the error is actually in the heel all right what is the difference between one equal side and two equals sign so i totally forgot this should have two otherwise it's recognizing every key as the the key press for heal all right even if i press q so there you go that's kazi punching now he heals perfect right so now it's starting to get fun right well fun for qazi not really for me because i'm getting beat up here all right so let's add my controls and guess what the controls is the same exact thing so let's do the if statement all right if e dot key is equal equal i won't forget this time and the punch for lance or me is going to be p and we do the and i want to make sure if kazi's health is greater than zero i should still be able to punch him right and then and uh game dot is over is equal equal to false perfect now after striking then play the attack sound so let's strike p2 dot strike what is the arguments that strike takes it's going to take in the player and i love that replit shows you you know like the little comments of what arguments does it take takes in the player the enemy and the damage so the enemy is player one or kazi and the attack damage is my attack damage and it's like that okay and after we strike we need to play the sound and to save you guys some time it's basically document dot get element dot get element by id and i believe it's p2 attack right i have to make sure you can just look over here it is p2 attack that's how you get that id then you hit play okay cool let's hit run and hp oh i attacked myself uh that's not good there you go for some reason when i the names were switched around and that was really confusing so i hit refresh and now let's see if cube okay that works fine if e dot key oh can't forget the curly brackets okay i hear two sounds there you go that's one now i'm going to punch quasi and they switch places that's interesting oh that's a really funny bug it's like i punch and then they switch oh and i think it's because of the strike okay so going back to the top guys let's go to the strike and where it says update game this is going to be different so this is too dynamic so we have to put back this to player one and player two and i actually had that before so now we're not gonna get that weird switching names i'm when i put player and enemy there i'm saying that they're switching roles so that's why you see kazia lance switch and now that's why i got confused but now there we go all right now we can actually fight the game i can heal well kazuki can you actually can't heal yet now there's like a back and forth here it's making it a lot more fun there you go so that cleared it up just to recap make sure in your strike function when you update the game it shouldn't say player enemy it just should say p1 p2 so go to line 79 change this from player to p1 change this from p2 to enemy because it should be the same it shouldn't be able to be switched around like that shouldn't be dynamic in this sense so cool that's strike so now let's do the if statement for the heal which is pretty simple the key is going to be l for here right not capital l lower case and if you know p1 that health is greater than zero then we should be able to heal still and i can't forget the curly brackets so inside the curly brackets it says after healing play heal sound so let's how do we heal as player two just use the method and pass it in then how do we play the sound we get the dom element which should just be p2 heal and then do dot play awesome and that should be it so let's hit run and let's see if we have a game oh i love the heel sound effect for my my heel it's like whoop whoop and then kazi says right and hey lance wins did you hear that that is the victory sound from declare winner let's see well i passed it declare winner drink the man right here play the victory sound right now the only problem is after we play the game it's like a onetime use we can't play anymore because this reset button doesn't work so we're almost done guys we just need to set up this reset button right and the reset button is pretty simple we just kind of set all the values back to its original state right so what i mean by values i mean p1 health causes health and my health sending it back to 100. so all you have to do is just say p1 do i have access to p1 yes i do i say health is equal to oops 100 all right p2.health is equal to 100 right and then we also want to set the game is over to what do you want is over to be false again or true again false because if this dot is over is equal to false that means we can keep playing and do we want to see lance wins right i don't think kazi wants to see my name and for resetting right my name winning and for resetting so we're going to get that result div again get the inner text and how do we make it so that it doesn't show lance wins well we can just say empty quotes that's going to make it blank that's how you clear your inputs that's how you clear your dips and when we're set we should also update the game to p1 p2 and set the game state to whatever this dot is over is perfect so if i hit run here let's uh play the game qazi wins let's hit reset ay and then we can just play again let's see who wins this time i win this time right this is getting this is really fun i had a lot of fun making this guys with that said that's pretty much the fighting game app right so it wasn't too bad it looks like a lot of code but if you really break it down it's just understanding each piece like all right you want to reset just get the player health all right what do you want to set the health to 100 all right how do you make sure the game is playable false right so if it helps to write stuff down and look it over again feel free to do so right the last function here is the play button this is going to be the bonus feature it's the simulation right if i hit reset i should be able to simulate the game and just see what would happen right so to play i usually like to reset to make sure the player's health is back to full before starting right so how do we reset the game well reset is a method within game so if it's within game and you're calling something within itself you can say this right this represent rob is pointing to itself so that just means the game it's like saying game dot reset right game.reset takes two parameters p1 and p2 right and that's it okay cool now we have the while loop so we went over while loops in that prep video that i had with you guys that prep video that i have with you guys and what we want to do is make sure both players get to strike so that means kazi goes once and then heals and then i go once heals and then it just keeps looping till this dot is over is true because the second this turns true the match is over right so all you have to do is just call the each command right that's it so that's just p1 dot strike p1 p2 and p1 dot attack damage that's it so kazi got to strike in the simulation now what we should do next is p2.heal right this could be any order that you want so now kazi strikes i heal right this is kind of the script so in this script i heal and then now i strike so it's going to say p2 is the player the enemy is p1 and we're going to take in my attack damage okay cool right and then there's also p1 dot heal all right p1 so i so this is the script guys cause he strikes i heal i strike cause heals all right cause he strikes i heal i strike i was going to keep doing that to one of us dies which will happen eventually and this is the way to make it most fair right in a while loop so i don't have to do any work at all right so once is over is true which means we're out of the while loop right we're going to declare the winner so we can just say return this dot declare winner and we can say this dot is over p1 and p2 right because remember declare winner takes in the game state p1 p2 perfect cool and then uh there is a glitch where it says undefined so let's just make the message say tie right it's a tie when i can't determine who wins okay cool so now that we have that functionality just double check everything time test it out now to actually run the code i had a little to do here which is add a click listener to the play button right so we need to find the div that holds the simulate button so if you look at the top here going up the top there is a play button right here play button right that's going to hold play so all you need to do is come down below here and say play button dot on click all right it's lowercase because it's not react is equal to the function where result dot inner text is equal to game dot play and then you put in p1 p2 perfect let's hit run okay so now that you have that we can hit the simulate button it should work now let's go lance wins right how's the tie kazi wins there we go cool so now the simulate button works and we're free to just simulate or we could reset and we could just start playing and you can make this fighting game even more advanced you can add like a kick option that does more damage you can add like a i don't know a special move like hadouken and it does even more damage right all you have to do is go to the player class right and add that method in here right this is what you need the essential tools to create something like this and i hope you guys enjoyed if you made it this far in the video congratulations this is the fighting game so sami show me how i did share with us how you did the fighting game and make sure to fork this ripple and place it back into the main course so let me show you guys how to do that okay so let's say your code is working and it's up to date all you guys need to do is go to the main replit again right and you can go to the solution and compare it to how i did in the solution and what you could do is put your code in the exercise folder so if this is your index right you want to take your index click ctrl a ctrl c and then paste it on here right so that it's up to date and has your code okay so once you do that your reply is complete right we moved over here so you could test stuff a lot easier perfect so that's it that's the fighting game guys i'm glad you guys walked through it with me thanks for watching this part all right so you've made it to the netflix clone i'm excited about this one because there's a little bit of a story that goes along with this so let's let's think about a scenario right netflix is hiring you as a developer to fix their app alright if you click on this button right here open in a new tab you're gonna see that looks pretty empty that's because the movies aren't being loaded in properly so it's your job as a developer to make the api call and pull the movies that we need it should look something like this so if you go to your javascript course rebel go to open in the new tab for that you should see this nice page create netflix and bam this is what netflix is supposed to use and this is what netflix is supposed to look like and as you can see all the netflix originals are here stranger things season four if you guys are watching let me know how you guys think about it and then there's trending now and there's also top rated movies right so if you didn't know in the background this is using an api from moviesdb so we're going to be working with a real api and if you get it working netflix is up and running again so this is what it looks like what you're going to need to do is hex to exit this out hop over back into the exercise folder and take these files you're going to notice a link to this replicate netflix project and this is where we're going to be doing most of our coding so let's get started and let's take a look at the assignment so here's our app make netflix here's the scenario where we have to make sure that fetch movies is working so the core functionality of this app is to get fetch movies working right and fetch movies is going to take in a url a div id or a class right so fetch movies is over here as you can see the api url the dom element right what do i mean by dom element what do you guys think what is a dom element right so with dom element it's going to be one of these it's going to be either original movies which is a class trending or top rated right why would i want to put dom element as an argument right because this is actually a dynamic function right why is it dynamic if you remember what dynamic is it can be inputted with any you know parameter or argument and still get you the right itself right result it's not hardcoded right so later on i need to make an api call a separate one to get the trending one but where do i want to put it well that's where dom element comes in dom element is just who doesn't represent one of these guys right so if i want to put it in trending right i need this dom element the trending div because that's where i want to put it and then if you notice there's something called path type that one you might not know but when you look at the data there's two types in here there is let me see let's bring back let's bring that back in here there's two types of paths what i mean by paths is this if i could create netflix do you notice the difference between these movies and these movies well this is called poster path and this is called backdrop path it's the wide one so you have to define on your api data which path is going to do you want a posterior path or a backdrop path all right that's what that's here for cool so that's what path type is and again here we're going to use the fetch method right to call the api and then we're going to use fetch to get the response and then call something called show movies that's another function right so this is a function that displays the movies to the dom right so fetch movies is just fetching the movies show movies is another function that's gonna show the movies over here right so we're gonna need to take that object and place it into the down all right nothing new right i'll walk you guys through that eventually but i think you guys know how that's done right next we have a function that fetches netflix originals right so these three functions are gonna need some api calls so what i did is x tap the tab over here and let me get you the api that you're gonna need so the url for this one all right let's do a comment here a url to get originals is going to be this api and the cool part is you don't have to worry about getting an api key i already got it for you it's this one right here all right then we can also get the url for sorry this is the url for trending we need a url for original movies which is just going to be this yep and then we can do something like this oops like that and see the top rated url i have for you guys it's going to be right url pull in and boom there you go so these are the urls that you want to use and you're going to use these and put them into fetch movies right so after you get the url you're gonna call call fetch movies all right so as you can see fetch movies is the key here so i'll put this three times so after this call fetch movies and after this call pledge movies all right why am i calling fetch movies because fetch movies again is already making the api call right it's already making an api call i'm taking a dynamic one and then you're gonna choose where it goes right so it's already being handled right it's a helper function right it's called a helper function because it's helping get originals fetch the movies it's helping trending fetch the trending movies right or using it dynamically alright so that's pretty much it for the app what you need to do is figure out how it comes together and i would start with this function on line 45 okay so best of luck this is definitely a little bit less complex than the fighting game that you guys have done but i think you guys can do it and if you get this working you're free to do whatever you want with this ui because you can use this to make your own netflix change out the code to make i don't know disney plus however you guys want to move it however you guys want to do it so good luck i'll see you guys in the solution awesome so how'd you guys do were you able to get it working if you were close or you got to finish congratulations you have netflix right if you didn't this is what the solution part is for and maybe you can see maybe that i coded it a little bit differently or maybe you coded it better than me right hats off to you if you did but let's walk through the solution right so we have the make netflix app we have fetch movies and the three main functions and i just realized the url is already on here so i didn't need to paste it down below that's okay we'll keep it moving we're gonna see the great originals trending now top rated right so let's break this down here are the divs that we need to know original movies has the netflix originals trending has trending yada yada you guys know that right here's an interesting one window dot unload right it's exactly what it sounds like it's basically a method right because it's coming from window and when the window loads run these three functions so it's going to run those three functions and then display it on our netflix app right but at the moment you're not going to see anything right because those functions don't exist or they don't do anything right they're blank all right so let's start with the core of our functionality and that's going to be on fetch movies so let's hop over to fetch movies that's gonna be on line 45 i believe yep it's right there so now that you're on fetch movies we're gonna need to do is take a look at url dom element and path type i explained this in the last video so to get started using it you just want to say fetch right and then how do i fetch you know api data well you just put the api url right so that could look two ways it could look like this fetch this whole thing or and this would work you could totally do this but this is only getting top rated as you can see but i want to make fetch movies dynamic so how do i make this dynamic just type in url how come that's allowed well i'm passing that as an argument right i'll put that long string when i call the function later cool so after that we can do a dot then all right and again with the cool thing with that then is you can just write it like here parentheses and remember dot then is handling what you want to do after the promise is resolved right so if i say uh that then here and i say response and then say arrow and then say console.log response okay cool so if i hit run here boom nothing really happens and you can even check it on inspect element over here nothing all right reason being we didn't really call fetch movie so let's do that right here all right so coming down below here we're just going to call fetch movies to test it out and here we need to pass in a url dom element and a path type but are we using dom element or path type just yet nah we're not using it just yet so we're gonna just pass in a url and i can't just write url here because then it'll be undefined fetching undefined right so let's pass in a real api url which was this one up the top get originals and we'll paste it right here and let's put some more space so you guys don't get confused all right this is a function call passing an api url we can also hit refresh here because it's going to run then console and look at that response right look at this we got a response here's everything we need the headers the status status 200 means it's good which means we're good to go right so now that we have the response though we need to do something else and something else with the response right well in here if dot okay right if it's successful or if we got 200 we're gonna return right response dot json right cool then we can add an else all right and then we can just throw an error so we can say throw a new instance of an error right the classes are coming back here right something went wrong just in case something went wrong along the way we can have this else statement cool but as you see we got the response object but we didn't get any data right and the okay is true so that's good we didn't get any data all right what we need to get the data is go over to line 54 where this parentheses and you're just gonna have to type in dot then remember dot then is handling what we get back from this right so basically after that then and you can change multiple dot then you can do that then that then not then this is the second dot then and this parameter we'll call data right and then we will console.log the data right so there we go let's hit refresh and look when i contact data this is what we get back we get an object right most of the time when you make an api call you're going to get an array of objects or just an object itself so this time we got one object right and if we open it up we got results which is what right an array right and inside that array what's inside that array let's open it up objects right and notice something there is a backdrop path the back drop path is a character is a what's it called a property with a value of the image remember backdrop is the wide one right so let's open up zero again so there is the backdrop path and here we have the poster path right so i didn't just make this up this is how we can determine whether we want the path type to be the backdrop or the path type to be the poster right so there's fetch movies and now it's pretty much set up right the only thing that we could add here is a dot catch all right.catch is just here because if there's any error we can say error and then arrow here and say console.log error right okay cool we're actually pretty much done with the fetch movies already we're fetching the data right but then we want to take this whole data and show it onto our app right so how do we show movies right luckily we have a function for that show movies all right so what i'm going to do is i'm going to erase this because we don't want to call fetch movies here all right we're going to call it somewhere else what we want to care about now is show movies right show movies is exactly what it sounds like and its job is to display that movies that object that we got back all right this thing this results array and display it like all of these 20 and display it into our dom over here right so that means we're going to use the dom and how do we select things from the dom all right so one of the very first things that we're going to do is create a variable that grabs the id or class right why do i say or class right that's because we have a class that's going to hold original movies and the rest are ids right so what we're going to do is make a variable var movies right element right because it's a dom element is equal to so if i wanted to get a class or an id right i'm not sure what it is can i use document.getelementbyid not get element by id right this is only going to grab an id it's not going to get a class how about by class name right this could work too but that's only going to be class so what i want to do is grab query selector document.we're right document.queryselector if you don't know it's just going to grab the first instance of the class or id right what do i mean let's say we have four boxes right and they're all classes called box it's gonna grab the first box if you have four ids it's gonna grab the four id luckily right we only have one of these one of these one of these so it's always gonna pick the right one so query selector and how do i make it so it's dynamic right i want to grab the trending one so i could just write you know trending here and it would only grab trending right it's static but to make it dynamic right we have access to dom underscore element and where does dom element come from it comes from this argument here and that's what we're passing in okay cool next thing all right we're going to loop through movies object so remember the part on the javascript course about objects there's a way to loop through them and you can use something called the four of loop right so to use a four of loop you say four just like we do with a for loop right but to use four of you're just gonna say four let movie of the object name so what is the object name here right it's going to be called movies right but let's think about this what am i looping through if i just say movies if i'm looking through movies i'm looping through this whole object right but where in this object does the movies live it lives in the results right so i want to be looping through the array right of objects so how can i if this is if movies is an object how do i get the results from that object aha right you guys got it results so let movie of movies dot results okay so from here we can console.log right uh movie let's start let's stop there just to make sense of it all right and instead of console logging the data in line 55 i don't want to print it i want to call show movies right and for now we're going to say url right that's what we need to pass here url actually not url we should pass data because that's the object right the data is the movies the dom element right we can keep that the same and the path type we keep that the same cool so to get this up and running right show movies is gonna get called when i call fetch movies so what we should do is call fetch movies let's call fetch movies again test it out see if i have it pasted right nice i still have the api right then we're going to say the dom element is the original and the original is like this all right original movies yep okay so original movie just copy that that's the class name comma and it should be dot original movie since it's a class and in the comma we want poster path poster underscore path all right so let's hit refresh on this and you see this console log where is this console coming from it's coming from this in line 70. so we're consolidating what a movie is so what is a movie then what does this tell you right it tells me that these are all the objects inside of the movies array all right if our console log up top here console.log movies.results right let's hit refresh on this at the top here see this array of 20. that is movies.results we're we're looping through movies.results so movie is each individual object so this is the first one which is stranger things this was all of us are dead lucifer squid game first kill right it's exactly what it sounds like every movie in movie results okay so when i say movie i'm talking about each movie cool so what do we want to do with this loop then all right what do we want to do with each movie well with each movie right i want to create an image element right there should be an image element if you remember the finished app right let's uh bring it back again and keep bringing it back i should just keep it let's go here open here and let's look oop let's look at create netflix each of these is an image tag with the data of that movie right so what we need to do is for every movie and movie result let's create an image element right so we can actually create that by making a variable so we can say i've been saying var let's just say let to keep it consistent let and let so let's say let image element right and set this equal to document dot create element all right this is how you create an element using the dom img this is making an image tag right so this is this comment right here within loop create image element all right let's get these also in here set attribute set source i can actually copy all these awesome all right so now we need to set an attribute right so the attribute of this is going to be image element right that's the variable holding the element and we're gonna make an image tag for every single movie all right image element dot set attribute right is data dash id and then you're going to comma movie right what's movie movie is the object all right and how do i get the id right right here id so how do i get an id of the movie object you say movie.id i'm saying attribute as data id okay cool so now when you see set source here that is the actual image itself right this is creating the image tag this is giving it an attribute of the id this is putting the picture in the element make sense cool so we can do an image element dot source right that's how you change it it's equal to and then we have to have the link so the api link for this is universal right it's going to be something like this boom image element.source is equal to this image path right where am i getting this from well if you look that is the url of the image and over here it just needs the path to add on to it right so we put this after original then you get the backdrop but if you put oops if you put this poster path in front of the url you get the poster that's how this works right but now what is this what is this uh dollar sign template movie bracket path type well this is going to get you it's a dynamic way to go into the movie object and path type remember it's dynamic it could be backdrop or poster if this says if this were to say something like um back drop path then it's going to get only the backdrops it's static if i said poster path it's only going to get the posters but if i say path type path type then it's going to get whatever i passed in so now it's dynamic cool oh i copied it over there we go now i can go back like so perfect so the next thing we need to do is uh we actually don't need to add these an event listener i'm gonna take that out but we can add this append the image element to the dom element selected right what does that mean right what it means is let's say i want to add original movies or that's what this data is it should go underneath netflix originals right so how do i put those image tags right that's the step we fetched the data we got each individual movie we created an image tag we put the picture in there where do we put them that's what the step is where do we put those images right and where we put them is going to depend on what we put as the dom element so if you look under the original movies this is what we need we need to put it in this div right so how do we put stuff in this div well we're going to use the append method right so let's come down below right here and we can say movies element right dot append child right so child right is whatever's inside the div right so basically add image element to the movie element right so now we're combining it together so l element oh element there you go so now we appended the child to the dom element selected yep so we're selecting the dom with dom element and it's movies l and when we say movies l add an image element to that movies right so what is that happening visually basically add stranger things to that div add this movie to that div add lucifer to that div it's going to do this one by one because of the loop for every movie in movie result create an image tag set the attribute put the source in and add it to the div and then again create the image tag create the source add it to the div until all 20 is done makes sense and that's guess what that's it that's show movies so if i were to let's hit refresh on this guy see what happens hey look at that exactly how i said it it appended a movie element onto netflix original so the first part is done right that's sick right but now it's gonna go away because i'm gonna erase fetch movies right because this is a static way of doing that like the point of this exercise is to show you dynamic api calls right so i erased it and now if i refresh we lost the progress but you guys know how it works now right so with that said right show movies is done fetch movies is done now let's make the dynamic calls right notice how i have the api already for you what you need to do is just say let url right let url equal to this right and then we call fetch movies remember the thing that we just erased right now we can add it back in but this is forget originals so d you could type in this whole string here but it would look very long right you could just type in url why that's because we have url right here all right holding this long string that's another way another trick for you guys if you have a really long api call and you don't want to you know fill up your function calls with that long string you can just store it in a shorter variable all right making use of variables here and then put the same exact parameters dot original underscore underscore movies comma poster oops the poster path awesome so this is get originals and if i were to hit refresh on here it works again right it works again because why why is this working even though i didn't call get originals well if you go at the top remember that windows unload it's already calling it right so we are one third of the way there the rest is simple so call movies let's figure out that so we can just call fetch movies here we can take this comment that i made for you guys and do let url equal to this right and pretty much do the same thing i can say url and this time right it's different we want to say hashtag trending why are we saying hashtag trending it's hashtag because this is an id you got it so trending and we want the backdrop right the wide one backdrop okay i love coding because once you know the individual piece it starts to get a lot simpler because it's the same pattern over and over again okay so now that that's done if i hit refresh here hey trending is available awesome okay top rated same deal let's hit let url equal boom call fetch movies right we can say url here comma the next thing is going to be top rated and is that a class or an id it is an id top rated all right so this isn't too bad right guys if i do back drop underscore path hit run right at refresh let's frickin go and with that said guys this is your netflix app where you can go big and small look at that awesome so look at that you made netflix you've got it working your boss is happy right feel free to take this project and do whatever you want with it right you can make your own netflix you can make disney plus right but this is how it works you guys learn how to make apis and they're dynamic so congratulations this is it for the project give yourself a round of applause and this has been awesome wow that was a lot i mean that was over 10 hours of content if you got to hear start to finish first of all i love you my adsense loves you thank you so much and i think your skills javascript skills went way higher now you're still not a pro but this is way more than you might have ever done okay and you definitely have increased your skill set so give yourself a huge pat on the back i'm really proud of you for getting to here i hope this was exciting riveting fun engaging insightful interesting and more than anything else just curiosity inducing i hope that you want to endeavor on this journey and on this path to like learn more javascript and just improve your coding skills i had a lot of fun making this for you our team had clever programmer me and lance david everybody had so much fun putting this course together for you i hope you enjoyed it but let this be just a start in your journey there's so much more for you to do i can't wait to see what types of projects you build because that's what you need to do now okay it's all about building projects with this and taking this to a whole another level so if you enjoyed this smash that like button subscribe to the channel because this is the channel where you will become the best developer on planet earth and look out for more content okay so thanks so much for watching and as always this is qazi and i'll see you in the next video
