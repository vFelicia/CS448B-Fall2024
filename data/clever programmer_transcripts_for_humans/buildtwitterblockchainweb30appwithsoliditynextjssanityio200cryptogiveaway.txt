With timestamps:

00:00 - in this video you will build the Twitter
00:02 - blockchain web 3 app with nextjs what's
00:05 - special about this one is we're
00:06 - following the Twitter's functionality
00:08 - where you can put your own nft and mint
00:10 - it and set it as your profile image so
00:13 - since Twitter decided that you can
00:14 - officially add nfts as your images and
00:17 - Link them to your profile we decided to
00:19 - show you how to build your own Twitter
00:20 - blockchain web3 app where you can do the
00:22 - same you'll build the front end with
00:24 - nextjs you'll style it with Tailwind CSS
00:27 - after you'll learn how to create your
00:29 - own smart cont contracts with solidity
00:31 - we'll then use open Zeppelin to ensure
00:33 - that your smart contract is compliant
00:35 - with the ERC 721 standard you'll use the
00:38 - smart contract that you created in order
00:41 - to Mint and deploy your own nfts I'll
00:43 - show you how to use a service called
00:45 - pinata as your interplanetary file
00:48 - system also known as ipfs to store your
00:51 - jpegs onto the blockchain you'll use
00:53 - hard hat to compile and deploy your
00:56 - smart contract we'll use the context API
00:59 - to manage our state inside of react I'll
01:01 - show you how to use the Alchemy API to
01:04 - use as your RPC URL with the Rinke test
01:07 - Network we'll then add authentication to
01:10 - your Twitter nft app using metamask we
01:12 - will use sanity IO as our backend
01:15 - database to store all of the tweets and
01:18 - the associated users with them the smart
01:20 - contract that you deploy with solidity
01:22 - I'll show you how to verify it on ether
01:25 - scan and I'll even show you how to use
01:27 - remix IDE to actually play with the
01:29 - smart contract you'll learn how to use
01:31 - Gro and sanity's API to retrieve your
01:34 - data you'll learn how to use the Rinke
01:36 - test Network which is built on the
01:37 - etherium blockchain will then deploy
01:39 - this app using versell and host your
01:42 - Twitter nft web 3.0 blockchain app on
01:45 - the internet now before we continue make
01:47 - sure you smash that like button and if
01:49 - you do I'm going to show you my brand
01:51 - new kittens playing with some feathers
01:54 - so go ahead Smash It smash it ah there
01:56 - it is here are some beautiful kittens
01:58 - playing with feathers one is name Cobra
02:00 - and the other one is Rinke are you
02:02 - excited I'm excited let's go all right
02:04 - let's go ahead and demo the app right
02:07 - now so you log in connect your wallet
02:10 - it'll show you pick whichever wallet you
02:11 - want and now you're inside of the app so
02:14 - at the top you can see that we're
02:15 - authenticated with metamask you can
02:18 - actually sign back out also when you go
02:20 - to your sanity database you can see that
02:22 - in the database your profile image is
02:25 - there and you can even change your
02:26 - profile image from the database it will
02:28 - tell you if it's an F image or not you
02:31 - can see all the other tweets that you
02:32 - have in there so boom I just uploaded a
02:35 - photo here let's go back and boom you
02:37 - can see my photo is actually right there
02:40 - and now once I hit tweet the tweet that
02:42 - I've done now actually shows up also
02:44 - what I can do is I can go mint an image
02:46 - so that image that I have let's go ahead
02:48 - and mint it so I'm going to go and
02:50 - select it we're going to give this image
02:52 - a title all right there we go the
02:54 - minting has begun all right wait for it
02:56 - wait for it and this is happening with
02:58 - solidity and smart contract track so you
03:00 - are making your own nft right here let's
03:03 - hit confirm after that popped up boom it
03:05 - says Min is successful and there you go
03:07 - that is your own minted nft image if you
03:10 - go to openc and the test net you can
03:12 - verify that it's actually a minted
03:15 - profile image that you just created yo
03:17 - freaking how cool is that guys if you're
03:19 - excited about that smash the like button
03:21 - and you can see the contract address you
03:23 - can see the token standard is ERC 721
03:26 - okay so you can verify that it's
03:28 - actually real and in our sanity database
03:30 - it shows us that tweet and when you go
03:32 - to pinata which is going to be the thing
03:34 - that you use for ipfs management um your
03:37 - images you're that you're putting on the
03:39 - blockchain you're going to be managed
03:40 - through pinata and you can see that it
03:42 - actually gives you back this data
03:44 - verifiable that you're using ipfs to
03:46 - actually store this image let's go ahead
03:49 - and make another tweet right here we're
03:50 - going to say # new profile pick let's
03:53 - hit tweet boom that was tweeted right
03:54 - away I go back into rafik Kazi and you
03:57 - can see I have a new tweet that says new
04:00 - profile pick right there and then when I
04:02 - go inside of tweets I can see my tweet
04:04 - new profile pick and it's connected to
04:06 - Rafa Kazi as the author so hopefully you
04:08 - enjoyed the demo if you are excited I'm
04:11 - excited let's go ahead and start
04:12 - building this up all right I hope you're
04:14 - excited to build this app right before
04:16 - we start coding the Twitter nft
04:18 - blockchain app we're going to do one
04:19 - last thing last week I did a $100 crypto
04:23 - giveaway in eth and our winner was
04:26 - Brenda so congratulations Brenda on
04:28 - winning $100 in eth this week I'm also
04:31 - going to give you a challenge and the
04:33 - winner is going to get $200 in eth
04:36 - here's how this is going to work drop in
04:37 - the YouTube comments below right now why
04:40 - do you want to become a blockchain
04:42 - developer drop your number one reason
04:44 - for it I'm going to pick the most
04:46 - thoughtful comments and one of you is
04:47 - going to get $200 and I'm going to send
04:49 - it over to you an e make sure you drop
04:51 - why do you want to become a blockchain
04:52 - developer followed by your wallet
04:54 - address okay and I'm going to send you
04:56 - real $200 e in return best of luck with
05:00 - that said let's jump right into app and
05:02 - let's start coding it
05:07 - up what's up all right so build this app
05:10 - we're going to do it in three steps
05:11 - number one we are going to build the
05:14 - front end number two we're going to
05:16 - build our smart contract using solidity
05:19 - and then deploy it to the blockchain
05:20 - number three we're going to go ahead and
05:22 - build the back and using sanity with
05:25 - that said let's get started so I'm going
05:27 - to go ahead into my GitHub folder here
05:29 - here and we're going to go ahead and do
05:32 - npx create next app just like that and
05:35 - because I want Tailwind I'm going to do
05:37 - dashy I'm going to say with Tailwind CSS
05:40 - and then just whatever you want to call
05:42 - it so in this case I'm going to say
05:44 - Twitter clone blockchain and let's hit
05:46 - enter all right the next thing you want
05:47 - to do is you want to go to
05:50 - sanity.io clever programmer here's the
05:52 - URL and this has all the instructions
05:54 - for you so if you haven't installed
05:56 - sanity yet make sure to do npm install
05:59 - Das G sanity CLI it's very important so
06:03 - let's go ahead and do that if you
06:04 - haven't done that yet make sure to go
06:06 - and paste that right here in your
06:07 - command line since I have it installed
06:09 - already I'm not going to hit enter but
06:11 - you should hit enter once you have
06:13 - installed that let's go inside of our
06:14 - studio next command you need is this one
06:17 - that says sanity init d-CON clever
06:20 - programmer it's very important that you
06:21 - actually write that because you will get
06:23 - a ton of free stuff 200,000 API requests
06:26 - 1 million API CDN basically just use
06:28 - this command make your life a lot easier
06:30 - let's go here paste that in and hit
06:32 - enter now once you do that it should say
06:34 - something along the lines of coupon
06:35 - clever programmer validated so you
06:38 - should be good to go on that end for the
06:40 - project what we want to name it is we'll
06:41 - say Twitter blockchain app so it'll
06:44 - create that project for us we will hit
06:46 - enter on the default uh configuration
06:48 - and then it says where do you want the
06:49 - output we want it where it's suggesting
06:51 - currently so that's perfect so just hit
06:53 - enter and then what type of schema do
06:55 - you want let's just pick a clean schema
06:57 - with no predefined configurations and
06:59 - once that is done and set up then we're
07:02 - ready to start working on our front end
07:03 - cuz remember that's the first thing that
07:05 - we're going to build and then we're
07:06 - going to move on to other things all
07:07 - right there we go success so now sanity
07:10 - is installed our studio is set up so if
07:12 - you go to Studio here on the left hand
07:14 - side you should be able to see all of
07:16 - these things installed right there we're
07:17 - going to come back to our smart contract
07:19 - later for now we're going to get into
07:21 - our client and we'll start building our
07:23 - app up with that said let's start
07:25 - working all right now let's start
07:26 - working on our homepage let's go to C
07:29 - let's go to pages and this index page
07:32 - let's go here now this is the page
07:33 - that's showing up right up here right so
07:35 - for example if we go to where it says
07:37 - get started by editing or nextjs right
07:39 - over there if I change that to something
07:41 - else you'll notice that that Fifi just
07:43 - popped up right there right so we want
07:45 - to remove kind of everything that's
07:47 - inside of here so let's go ahead and do
07:49 - that and I can just replace this with
07:51 - div and inside of this div I'm going to
07:53 - have a couple of things so let's go
07:54 - ahead and do H2S and I'm going to
07:57 - basically say this is going to be my
07:58 - sidebar component I'm going to turn
08:00 - these into components afterwards this is
08:02 - going to be my feed component and then
08:04 - this next one will actually be my
08:06 - widgets component these are the three
08:08 - components uh that I'm going to work on
08:10 - and this will have a certain styling as
08:12 - well but we'll work on that styling
08:14 - afterwards for now we'll just start off
08:16 - with this file being completely empty
08:18 - let's create some stylings for this so
08:20 - I'm going to go all the way at the top
08:22 - here and I'm just going to say con style
08:25 - and we're going to create an object I'm
08:26 - going to create a wrapper and this
08:28 - wrapper I'll basically say Flex justify
08:31 - Center give it the height of the screen
08:33 - the width of the screen and then what I
08:36 - want to do is say select none background
08:39 - color we're going to give it a specific
08:40 - background color in this case so I'm
08:42 - going to say kind of a dark color there
08:45 - and then text we're going to have white
08:46 - that's inside of here so that is my
08:48 - wrapper and then outside of my wrapper
08:50 - I'm going to need to have something in
08:52 - my content as well so let's go ahead and
08:54 - create that content so I'm going to say
08:56 - in my content we're going to have the
08:58 - following so my content is is going to
08:59 - have a Max width of, 1400 pixels width
09:02 - will be 2/3 flex and then we'll justify
09:05 - between why am I making it like this
09:07 - well you'll see in a second but
09:09 - essentially if you look at the real
09:10 - Twitter everything is in the middle just
09:11 - like this and then we specify space
09:13 - between so that's effectively what we're
09:15 - going to be doing with our Twitter setup
09:17 - all right so now what we're going to do
09:18 - is we're going to go ahead and add the
09:20 - wrapper around it so as soon as the
09:22 - wrapper gets added you see the whole
09:23 - theme kind of take place and then all
09:25 - we're going to do is add the content
09:28 - styling so once we do that you can see
09:29 - it's broken up into these it's Center
09:32 - and what's nice is that it has that
09:34 - justify between in between each of these
09:36 - right and it's equally split up no
09:38 - matter what size screen I make it right
09:40 - so this is exactly what we want cuz
09:42 - that's how we want our feet to be that
09:44 - was easy to do right with Tailwind CSS
09:46 - and this we we got to that part really
09:48 - really quickly so from here let's keep
09:51 - going and we're going to start building
09:52 - our sidebar component now let's go ahead
09:54 - and make a new component so I'm going to
09:57 - go ahead inside of my client create a
09:59 - new folder called components inside of
10:01 - this we're going to create a component
10:03 - and it'll be called sidebar actually you
10:06 - know what we don't want to run into any
10:07 - errors Let's uh name it a JS file let's
10:10 - just do all of our files let's just call
10:12 - them JS and then we'll go from there and
10:15 - then if you run into any errors I'll
10:16 - just show you how to fix them so there's
10:17 - an error happening here we'll remove
10:19 - this line import type app props just
10:22 - remove that and remove this colon and
10:24 - where it says app props remove that okay
10:26 - beautiful errors are gone and now we
10:28 - have our sidebar component just like
10:30 - this one of the things we're going to
10:31 - need for our sidebar component are icons
10:34 - so you can see we have this icon all
10:36 - these icons right here so let's just go
10:38 - ahead and make sure we install our icons
10:40 - all right so I'm going to open up go
10:41 - back let's go inside of our client I'm
10:44 - going to just say yarn add react D icons
10:47 - just like that and uh once these are
10:49 - installed you'll be good to go for all
10:51 - of your icons that you want to use one
10:53 - more thing we want to do is let's go to
10:55 - our index and instead of doing this H2
10:57 - what I'm going to do now is is we're
10:59 - just going to do our sidebar component
11:02 - and close this off and all the way at
11:04 - the top let's go ahead and import it so
11:06 - we're going to say import sidebar from
11:08 - components slidebar just like that now
11:12 - we should get an error that's perfect
11:14 - this is where we want to actually start
11:15 - working on our component sidebar now all
11:17 - right so let's start working on this
11:19 - sidebar component now so I'm going to
11:21 - make sure that I'm exporting default
11:23 - sidebar let's create a function called
11:25 - sidebar as well and I'm going to leave
11:27 - it blank for now because I want to
11:29 - actually
11:29 - style this as well in just a second but
11:31 - there's some important Imports that I
11:33 - need to get so I'm going to need to get
11:35 - my horizontal icon and VSC Twitter icon
11:38 - so what are these icons these are like
11:40 - this type of Icon right there the next
11:42 - thing I'm actually going to do is we're
11:44 - just going to quickly kind of style it
11:46 - because remember styling we want to move
11:47 - through it faster so we can get to the
11:49 - really interesting blockchain Parts as
11:51 - well so for styling we're going to have
11:53 - a wrapper and why is it Flex call you
11:56 - you might ask well it's because so this
11:58 - can be in a column like like this that's
12:00 - why the flex call then we're going to
12:01 - have a Twitter icon container so we need
12:03 - a container to contain these icons
12:06 - that's going to have a text large 3XL so
12:09 - then the icon actually looks big and a
12:10 - margin of four so there's a like this
12:12 - can have a nice little margin we're
12:14 - going to need a tweet button so this is
12:16 - the styling for it I'll scroll here and
12:19 - you can pause if you want to copy this
12:21 - but essentially what this does is this
12:23 - is going to be this going to get us this
12:25 - button right there we're going to have a
12:26 - nav container with a flex of one so that
12:29 - na container takes up the whole space
12:31 - we're going to have a profile button and
12:33 - for everything when you hover over it's
12:34 - going to have this special effect so
12:36 - that I'll show you how to add that as
12:37 - well let's keep going for now for the
12:39 - sidebar we're going to have a profile
12:41 - left so that's basically the stuff down
12:44 - here okay that's that stuff down there
12:46 - so that's where that shows up we're
12:47 - going to have a profile image this is
12:49 - going to be rounded so in the actual
12:51 - Twitter app you see how this is rounded
12:53 - at the bottom right there that's
12:55 - effectively what we're trying to achieve
12:57 - with this height 12 width 12 12 rounded
12:59 - full profile right this is so it takes
13:02 - up a bunch of space as much space as it
13:04 - needs and then details will have a flex
13:07 - of one and name will have text large
13:10 - handle will make this special color
13:12 - right there that's this like grayish
13:14 - color at the bottom that you see and
13:16 - we'll have a more container so that's
13:18 - this guy right there so this is the
13:20 - styling that we're going to be needing
13:21 - for this now for the Side Bar the other
13:24 - things we actually need we're going to
13:25 - create a wrapper inside of this we're
13:27 - going to have our Twitter icon container
13:29 - and we're just going to put our vssc
13:31 - Twitter inside there so let's go ahead
13:33 - and refresh and see what we have here so
13:35 - you can see just our VSC Twitter is
13:37 - showing up perfect then we're going to
13:39 - have our nav container and we're going
13:40 - to put home explore we'll put
13:42 - notifications messages bookmarks lists
13:45 - profile more and of course we're going
13:48 - to put our our mint button our tweet
13:50 - button right underneath it so right now
13:52 - it's taking up a lot of space but
13:53 - remember it's cuz it's Flex one and once
13:56 - we have something in the feed that's
13:57 - going to push the mint button button
13:59 - back to over here so let's keep on going
14:01 - then we're going to add our profile
14:02 - button and inside of here we're going to
14:04 - add our profile left and then in our
14:06 - profile right we're going to add the
14:08 - following the details so name clever Cy
14:10 - for example which is showing up right
14:12 - here at the bottom and our handle just
14:14 - like that and then we're going to have a
14:15 - more container and that's going to be
14:17 - this container right there that little
14:19 - dot dot dot styling next up what I'm
14:21 - going to do is I'm going to create a
14:22 - sidebar option component and what that's
14:24 - going to do is it's going to allow us to
14:26 - when we hover over it it's going to
14:27 - highlight it it's going to be able to
14:29 - show all of these icons next to them and
14:32 - uh it will essentially do what we're
14:34 - looking for and then when you click
14:36 - notice how it changes right messages
14:37 - bookmarks notifications all of this
14:39 - changes as well so let's go ahead and
14:41 - create that component all right let's go
14:43 - ahead create a new file we're going to
14:45 - call it sidebar option. JS so let's
14:49 - start working on our sidebar component
14:52 - so let's create our function sidebar
14:54 - option sidebar option it's going to take
14:56 - in a couple of things it's going to take
14:57 - in text the icon whether it's active or
15:00 - not currently it's going to take a hook
15:02 - that allows us to change which one is
15:04 - selected and then we're going to need
15:05 - redirect so we can redirect to different
15:08 - pages based on if you click profile or
15:10 - you know something else or home let's
15:12 - export the sidebar option as well and
15:15 - then let's go ahead and style this so
15:16 - we're going to add a wrapper we're going
15:18 - to have a minimum width for it we're
15:20 - going to do a flex on that enable Flex
15:23 - box make sure it's item Center we're
15:25 - going to give it a specific rounding and
15:27 - U let's give it a little bit of P on
15:29 - every side of four cursor pointer so
15:31 - when you hover over it it looks like a
15:33 - mouse all right we're going to give it a
15:34 - hover so when you hover over it it
15:36 - becomes slight gray and then we're going
15:38 - to add in a transition it's going to
15:39 - take 200 milliseconds and it's going to
15:42 - be an ease in and ease out effect
15:44 - basically what that will feel like is
15:46 - when you hover over it should have this
15:48 - little nice effect right so that's that
15:51 - then let's have our icon container
15:53 - that's going to take care of our icons
15:55 - right we're going to have our text
15:56 - General so that's going to be our font
15:58 - uh font medium so what this text looks
16:00 - like here we're going to have our text
16:02 - active so for example if this is active
16:04 - you can see Explorer changes and becomes
16:06 - a little bit Bolder when I click
16:08 - notifications it becomes Bolder so the
16:10 - icon changes and the text changes here
16:12 - as well so that's actually what's
16:13 - happening now let's work on our sidebar
16:15 - option component and we're going to
16:17 - create a div so this is just one div
16:19 - right here we're going to create a
16:20 - wrapper and then we need a method for on
16:23 - click so on the click what we're going
16:25 - to do is we're going to set the selected
16:27 - text to whichever one you selected let's
16:29 - create another div and this is going to
16:31 - be icon container so this is going to be
16:33 - this part right here and we're just
16:34 - going to put the icon inside there and
16:36 - then we're going to have another div
16:38 - here this is going to choose different
16:40 - styling it's going to choose either text
16:42 - active styling or it's going to choose
16:44 - text General styling and that's just
16:46 - based on whether the selected text is
16:48 - active or not and uh then all we're
16:50 - going to put in there is whatever the
16:52 - text is so this text right here for
16:54 - example we plug in right there all right
16:57 - so our sidebar option comp component
16:59 - this is our sub component this is
17:01 - somewhat good to go now all we got to do
17:03 - is actually go to our sidebar and use it
17:06 - so what we're going to do is everywhere
17:08 - that we use just this regular div we're
17:10 - going to start replacing that with our
17:12 - sidebar component so let's replace this
17:14 - div delete this here and I'm going to
17:16 - say sidebar option and let's close this
17:19 - now sidebar option we just you just got
17:21 - to make sure you're exporting it and we
17:23 - are so it's like why isn't it importing
17:24 - it here no idea let's just go ahead and
17:27 - manually add that in so we're going to
17:28 - say import sidebar option from we're
17:31 - going to say components oh actually it's
17:34 - right next to us right so we can
17:35 - actually just say sidebar option just
17:37 - like that and that should be good to go
17:39 - okay now let's go to our app and let's
17:40 - see what is happening refresh and we're
17:42 - having an error let's comment this out
17:45 - let's see if we still have an error Boom
17:46 - the error goes away and let's bring this
17:48 - back and the error comes back so let's
17:49 - go ahead and solve what this error is
17:51 - about the reason why we're getting this
17:53 - error is because we're not passing in
17:55 - any methods to this right so if I go
17:57 - back into my sidebar option I'm not
17:59 - passing in text I'm not passing in icon
18:01 - or is active I need to actually start
18:03 - passing those through on top of that I
18:05 - need to actually keep track of my state
18:08 - so for example this state over here when
18:10 - I click to keep track of that state
18:12 - right so how I do this is I need to
18:14 - actually have selected and set selected
18:17 - I need to keep track of that state now
18:19 - we're going to remove this from a
18:20 - typescript version and we're just going
18:22 - to make it very basic and for now I'm
18:23 - just going to like hardcode in home but
18:26 - what we actually want to do is we want
18:28 - to take in an initial selected icon and
18:32 - uh for now we'll just default that to
18:34 - home and you can put that right there
18:36 - that's going to be our default it's just
18:37 - going to be home that's what you pass
18:39 - into sidebar let's take a look it says
18:41 - use state is not defined no problem
18:44 - we're going to go ahead and grab UST
18:46 - state so I'm going to say import UST
18:47 - state from react so now UST state is
18:50 - good to go now it's back to complaining
18:52 - about this component not having what it
18:54 - needs so let's start giving this
18:55 - component what it needs all right so
18:57 - let's go ahead and start working on the
18:59 - sidebar option so we're going to give it
19:01 - icon and in icon I'm going to ask it the
19:03 - question hey is a selected one home if
19:06 - it is then show me the Twitter icon or
19:08 - if it's not show me the Twitter icon so
19:10 - right now I'm just kind of hardcoding
19:12 - the Twitter icon in there we're going to
19:13 - use different icons in just a second
19:15 - next up I'm going to say hey make the
19:16 - text home so you can already see that
19:18 - that text is popping up as home next up
19:20 - I'm going to say hey is active is going
19:22 - to be the following it's going to be a
19:23 - Boolean because we know we need to
19:25 - return a true or false at the end of the
19:27 - day right and for selected what we're
19:28 - going to say is check if it's home and
19:30 - if it is home it's going to just simply
19:32 - this whole thing is going to return true
19:34 - or false so we're just going to hit save
19:36 - on this we're going to need to add
19:37 - routing to it as well but we're going to
19:39 - do that later all right now we're going
19:40 - to need access to a bunch of icons so
19:43 - let's go ahead and get those because we
19:45 - need access to our hashtag or Bell or
19:48 - mail but not just the mail right we need
19:50 - the active mail and the regular mail we
19:52 - need the active Bell and the regular
19:54 - Bell we need active hashtag and the
19:56 - regular hashtag so this is two icons
19:58 - this is two icons this is two icons
20:00 - right so it's if we have 1 2 3 4 5 6 7 8
20:03 - here we need to get a total of 16 icons
20:06 - let's go ahead and get those right so I
20:07 - need my I'm going to do this you can
20:09 - actually see it my home line home fill
20:12 - and list fill I need my byash from react
20:14 - icons by I need my bell I will need my
20:17 - out regular mail and my mail with
20:19 - outline okay I'm going to need these
20:21 - ones over here need CG more as well so
20:24 - these are all of the icons you're going
20:25 - to need for this now instead of where it
20:27 - says vssc Twitter I actually need to
20:29 - replace this with r iome 7 fill and we
20:33 - need to replace this one with Rome 7
20:35 - line so let's go back go ahead and
20:37 - refresh see what this error is about
20:39 - duplicate binding so let's see where we
20:41 - have a duplicate oh yeah so we don't
20:43 - need F find more horizontal here I'm
20:45 - going to remove that so then we can just
20:47 - have Bell perfect so now the error is
20:48 - gone and you can see when the home is
20:50 - selected this is it's going to be using
20:52 - the fill one and when the home is not
20:54 - selected it's going to be using
20:55 - something else so for example if I
20:56 - change the initial state from home to
20:58 - let's say house let's refresh now that's
21:01 - not the initial State anymore so you can
21:02 - see it's using the different one so
21:04 - let's bring that back now let's work on
21:06 - our explore option sidebar option so
21:08 - let's go ahead for the icon ask the
21:10 - question is the active one currently
21:12 - explore if it is then show me the fa
21:15 - hashtag otherwise show me the buy
21:16 - hashtag text for that one should be
21:18 - explore we're going to see if it's
21:20 - active so for example this should return
21:23 - true or false if this is the selected
21:25 - one currently and then send over our
21:27 - selected hook as well and and boom we're
21:29 - good to go and now I'm going to remove
21:31 - this Explorer from here we're going to
21:33 - do the same thing for notifications
21:35 - let's also add one in for our messages
21:37 - for bookmarks lists we'll do one for
21:40 - profile as well the only difference
21:42 - between the profile one is that we have
21:44 - a redirect to a slash profile and we
21:47 - want one for more and now let's go ahead
21:49 - and take a look at our app says BS
21:50 - bookmark is not defined so let's go
21:52 - ahead and just add it in let's go here
21:54 - boom we just added in our BS bookmark
21:56 - bookmark fill BS person BS person fill
21:59 - those are all the ones that we actually
22:00 - needed okay let's refresh and TDA all of
22:04 - them are here exactly how we want them
22:06 - if you're wondering why it's looking
22:07 - like there's too much Gap here it's just
22:09 - cuz I'm zoomed in a lot so if I zoom out
22:12 - it actually just goes back to being
22:13 - normal perfect and now watch this when I
22:15 - hover over boom when I click these boom
22:17 - it it selects them look at that look at
22:19 - that look at that look at that so nice
22:20 - so nice and easy so we got this error
22:22 - earlier for this icon CG more one
22:25 - sidebar option so let's just pass it a
22:27 - set select equals set selected let's
22:31 - just pass it that function and now it
22:33 - doesn't complain anymore okay perfect
22:35 - that error is gone so now our sidebar
22:37 - component is looking amazing and it
22:40 - works look at that look at how nice that
22:42 - is now you can take that component to
22:44 - the bank now that we're done with the
22:46 - sidebar go ahead and smash that like
22:48 - button turn it white or turn it blue cuz
22:50 - look at how freaking amazing that looks
22:53 - all right so you should be proud of
22:54 - yourself if you built it or proud of
22:55 - yourself if you just watched me build it
22:57 - cuz both are cool but that said we're
22:59 - going to move on and start on our post
23:02 - function which is going to be this guy
23:05 - right here so get excited and I'll see
23:07 - you there all right let's go ahead and
23:09 - work on the feed component a feed
23:11 - component is going to have all of these
23:14 - inside of there it's going to be the
23:16 - parent for all of them so I'm going to
23:18 - go in components we're going to create a
23:20 - folder and we'll call it home and inside
23:23 - of home we'll create a new file and I'm
23:26 - going to call this feed. J yes and now
23:29 - let's start actually working on this
23:31 - let's just go ahead to our index and add
23:32 - it there so remember we had this H2
23:34 - right there right for feed boom we're
23:36 - going to go ahead and uh remove that H2
23:39 - and we're simply going to say feed just
23:41 - like this and we're going to import it
23:43 - from the top as well so we're going to
23:44 - say import feed from and we're going to
23:47 - go into components and then we're going
23:49 - to go into home and then we're going to
23:50 - say feed just like that now your app
23:53 - will crash but this is exactly where we
23:55 - want to be so let's go inside of our
23:56 - feed component now and let's start
23:59 - working on it we're going to export feed
24:01 - Let's uh create a function feed and
24:03 - we're going to return something we'll
24:05 - just leave it blank for now okay next up
24:07 - let's import our BS Stars icon cuz we're
24:10 - going to need that and then let's work
24:11 - on our styling we're going to need a
24:13 - wrapper we're going to need to style our
24:15 - header and make sure it's sticky and at
24:16 - the top and we're going to need to style
24:18 - our header title so it looks bake and
24:20 - bold now let's start working on our feed
24:22 - component here so we're going to have a
24:24 - div and we're going to use the uh style
24:27 - wrapper so basically this one right over
24:29 - here next up we're going to need style
24:31 - header and then inside of that we're
24:33 - going to need our header title and just
24:35 - put in home and then put in our BS star
24:37 - now let's take a look at what we've got
24:39 - let's go here refresh and you can see
24:41 - our home is showing up which is exactly
24:43 - what we're looking for boom our home
24:45 - shows up right there it's taking up all
24:47 - this space perfectly and that star icon
24:49 - is showing up and uh let's go ahead and
24:51 - remove these cuz that's not needed and
24:54 - that should be perfect all right let's
24:56 - go ahead and make our tweet box
24:59 - component now so inside of home we're
25:00 - going to do new file we're going to say
25:02 - tweetbox DJs just like this all right
25:05 - and before we start working on our tweet
25:07 - box let's go ahead to our feed and uh
25:10 - we're just going to add in our tweet box
25:12 - and I want to add that in right
25:14 - underneath this div right here and I
25:16 - will simply say tweet box just like this
25:20 - and for importing it going to say import
25:22 - tweet box from and uh it's right next to
25:25 - us so we'll just say tweet box just like
25:27 - that okay now our app should break that
25:29 - is totally fine and now we'll start
25:31 - working on tweet box now let's work on
25:33 - our tweet box component let's get to
25:36 - work so first thing that we're actually
25:38 - going to go ahead and do is we're going
25:40 - to go and create a new component inside
25:42 - of our home folder called tweet box. JS
25:45 - then hit ra Ace and hit Tab and it will
25:48 - autocomplete this let's go back to feed.
25:51 - JS and in feed we want to add our tweet
25:53 - box why because we want it to show up on
25:56 - our home screen all right so it will the
25:58 - Tweet box is not defined that's the
26:00 - error you should get now make sure you
26:02 - import tweet box right at the top okay
26:05 - so let's go ahead and do it once we're
26:07 - done let's go back to tweet box let's
26:09 - just paste The Styling in this will be
26:11 - our styling for everything okay so you
26:13 - can go ahead and take a look at the
26:15 - styling that you have all right so now
26:17 - that we're done with the styling cuz we
26:18 - need wrapper tweet box left tweet box
26:21 - right profile image so on and so forth
26:23 - let's go work on our tweet box component
26:25 - so let's create a wrapper first now
26:28 - inside of this wrapper we're using the
26:30 - wrapper styling here for that okay and
26:33 - that wrapper is going to show up all the
26:34 - way at the top it's going to wrap our
26:36 - entire tweet box let's add in our tweet
26:39 - box left styling because what is going
26:41 - to be on the left hand side of the Tweet
26:43 - box right that's going to be our image
26:44 - for example so let's add in our image
26:46 - tag and we'll use our profile image so I
26:49 - just went grabbed an image of myself
26:50 - popped it in right there and we're going
26:52 - to use the profile image class for this
26:54 - now that we're done with the profile
26:56 - image on the Tweet box on left hand side
26:58 - side let's go ahead and work on the
27:00 - right hand side now we're going to
27:02 - create a form this form is going to have
27:05 - a text area and the text area is going
27:07 - to contain an input field style so you
27:09 - can see already how that's showing up
27:10 - we're going to say what's happening as a
27:12 - placeholder now let's import use state
27:15 - so right underneath the Tweet box we
27:16 - need to actually keep track of the tweet
27:19 - message and so let's go tweet message
27:21 - and set tweet message and then let's go
27:23 - ahead and add the value of the tweet
27:25 - message and let's go for the on change
27:27 - and let's space basically say hey on
27:29 - change set the Tweet to be whatever the
27:31 - user typed in so for example we're going
27:33 - to console log this and you can see that
27:35 - as I'm writing smash that like button if
27:37 - you haven't already and sub to the
27:39 - channel you can see it just being listed
27:41 - out down below right that's the exact
27:43 - thing that we're after here next up
27:46 - let's create a form lower container and
27:48 - inside of it put our icons container and
27:50 - then we're going to basically create a
27:52 - button for tweet and let's actually
27:53 - style that button and we're going to say
27:55 - type submit last name for it is going to
27:57 - be submit General so if the tweet
27:59 - message exists then make the button
28:01 - bright blue if you have nothing written
28:03 - in there make it dark blue right so for
28:05 - example you can see what's happening
28:06 - here right now nothing is written so
28:08 - nothing is shown as soon as I start
28:10 - typing that blue button becomes
28:11 - activated right that's perfect that's
28:14 - exactly what we're looking for here next
28:16 - up let's work on our post Tweet function
28:19 - and how this will work is on click when
28:22 - you do post Tweet it's going to actually
28:24 - post the Tweet it's going to call the
28:25 - post Tweet function so watch what
28:27 - happens type type type I'm going to hit
28:28 - tweet boom it just called the post Tweet
28:30 - function and however one thing that
28:32 - happened is it refresh the page we don't
28:34 - want the page to refresh so let's go
28:36 - ahead and do event.prevent default this
28:38 - will stop the page from refreshing when
28:40 - we hit Tweet now hello has been printed
28:43 - out now let's go to the top and we're
28:45 - going to basically add in a bunch of our
28:48 - icons here so for example our BS card
28:50 - image our R file GIF line or iomd
28:54 - calendar and all we need to do now is go
28:57 - ahead and add the icons that we just got
28:59 - let's go to line 48 here and I'm going
29:02 - to add my BS card image inside of my
29:04 - icons container and then we're going to
29:06 - add all of our other icons as well so
29:08 - let's go ahead and do that now boom
29:10 - let's add in all of our icons and let's
29:12 - give them our style. icon styling that
29:15 - we created at the top and there you have
29:16 - it the Tweet box is looking absolutely
29:20 - phenomenal if you got to this part
29:21 - you're absolutely crushing it let's work
29:23 - on the next thing now all right now
29:25 - let's work on the functionality to add
29:27 - your ire feed there meaning all of the
29:30 - tweets that you have made should show up
29:31 - somewhere right and listing them all out
29:34 - let's go ahead and do that the first
29:35 - thing we're going to do is let's go
29:37 - ahead and create tweets tweets is going
29:39 - to be an array of objects and it's going
29:41 - to contain the display name Cy the
29:43 - username will be your wallet address the
29:45 - Avatar will be you know just link your
29:48 - photo text in this case going to be good
29:49 - morning GM and his profile image nft
29:52 - false because by default we're just
29:54 - going to start off with a image that's
29:56 - not an nft we're going to just hard code
29:58 - put this timestamp in this is just so
30:00 - you know we have something in there this
30:01 - is how sanity stores timestamp so that's
30:03 - why we're storing it in that particular
30:05 - format by the way and then we're going
30:07 - to go ahead and just add a couple of
30:09 - more tweets to that so let's go ahead
30:11 - and copy that and paste it a few times
30:13 - so that way just populates it shows us
30:15 - that we have a few tweets now I've just
30:17 - collapsed the box so you can visually
30:19 - see everything and now let's go on line
30:21 - 57 and we're going to map through all of
30:24 - these tweets that we have made so let's
30:26 - Loop through them and we're going to
30:28 - start showing those tweets the next
30:29 - thing I want to do actually is inside of
30:31 - our components I want to make a
30:33 - component called post. JS okay so let's
30:35 - do rafc and do it boom now let's come
30:38 - back and let's put post inside of our
30:41 - feed that way We're looping through and
30:44 - each post is going to be its own
30:46 - component essentially so that's why we
30:48 - need to work on that let's go ahead and
30:49 - import post from the top and inside of
30:52 - my post I need to give it give it a
30:54 - couple of things I'm going to give it a
30:55 - key of index display name is going to be
30:57 - the tweet display name the username is
30:59 - going to be the Tweet username the
31:01 - Avatar the text the Boolean of is it a
31:04 - profile image or not a Tim stamp as well
31:07 - and now let's go ahead inside a post and
31:09 - make sure that we go ahead and
31:10 - destructure display name username text
31:12 - avatar timestamp is profile nft and
31:15 - after we're done restructuring that
31:17 - let's go ahead and add some styling to
31:18 - this so we're going to go ahead and copy
31:21 - um and add a whole bunch of styling all
31:23 - at once because we just want to move
31:24 - through the styling kind of quick so we
31:26 - can get to the blockchain part faster
31:28 - okay and there you go you can write down
31:30 - that sty styling now let's go on line 23
31:32 - and we will go ahead and create a div
31:35 - for rapper then we're going to have
31:37 - another div and inside of that we're
31:38 - going to put our image let's just go
31:40 - ahead and say if it's a nft image then
31:43 - it should have a styling like a hexagon
31:46 - styling otherwise it should just have a
31:48 - regular profile image styling all right
31:51 - because on Twitter things look like the
31:53 - ACT if you have an actual nft image it
31:55 - has a little hexagonal shape so that's
31:57 - all we're doing there all right now
31:59 - let's go ahead and make a new folder
32:01 - this folder is going to be called lib
32:03 - and inside of lib we're going to create
32:05 - our hex styles.css and we're basically
32:07 - going to paste all of this styling for
32:09 - our hexagon and uh we'll try to full
32:12 - screen it for you so you can uh grab it
32:14 - and what we'll also do is we'll link you
32:17 - the stylesheet so you have access to
32:19 - this as well H and if you need to kind
32:21 - of copy the style sheet you can and
32:22 - remember the source code is always down
32:24 - below always put the repo Link in the
32:27 - description of the YouTube video you can
32:28 - always just go ahead grab all of the
32:30 - styling that we've put together for you
32:32 - and uh grab the styling from hex Styles
32:34 - and use it for yourself all right now
32:36 - let's go to our
32:37 - app.js kind of at the root level and
32:40 - what we're going to do is we're going to
32:41 - add our we're going to add our lib from
32:44 - our lib we're going to add our Hax
32:47 - styles. CSS that we just added all right
32:49 - so if I just hardcode true there you can
32:52 - see that everything has this hexagon
32:55 - styling so we're using that small hex
32:57 - Style so this is basically showing it's
32:59 - an nft image and if it's not a true nft
33:01 - image it will just show it as a circle
33:04 - okay so only the real authentic nft
33:06 - images will show up as hexagons next up
33:09 - we're going to go ahead and create our
33:11 - Post Main and inside of our post main
33:14 - we're going to add in a div and inside
33:16 - of that we're going to create a span
33:18 - which is going to be header details okay
33:20 - and this is going to display the name
33:21 - and let's give it a styling of name so
33:24 - it makes it bold and then if uh the
33:26 - image is an NF T then we're basically
33:29 - going to do the following we're going to
33:30 - go ahead and import an icon which is
33:33 - fill Pat check fill which is essentially
33:35 - just a check mark and we're going to get
33:37 - that from react icons and we're going to
33:39 - basically say hey if this image isn't
33:41 - nft then what I want you to do is put a
33:44 - check mark next to the name so we're
33:46 - just going to say that's how we're
33:48 - basically going to say somebody's
33:49 - verified we're going to add in the
33:50 - styling of verified and so if we
33:52 - hardcode it look at that boom and now we
33:55 - have the verified badge all right and
33:57 - now next up what we're going to work on
33:59 - is let's go ahead and add our handle and
34:02 - time ago all right and we're going to
34:04 - say username and then we're going to put
34:05 - that little Dot and uh then what we're
34:08 - going to do is let's add time ago okay
34:10 - this is a library so let's do yarn add
34:13 - time ago at the bottom time ago. JS so
34:15 - it's going to install that and then at
34:16 - the top let's go ahead and import this
34:18 - okay so we're going to say import format
34:20 - from time ago. JS this is so that when
34:23 - it writes out time it looks super nice
34:26 - so let's go here and let's add in our
34:28 - time ago and we're going to say format
34:30 - it to new date timestamp and then let's
34:32 - do do get time at the end of it so now
34:34 - it's saying one year ago it will write
34:36 - it it will basically take whatever that
34:38 - time is right so if you read that boom
34:41 - that time is 2021 right 2021 2020 was
34:45 - it's saying a year ago if I say 2021 and
34:47 - change that date it's going to change
34:49 - what that time ago is saying so let's
34:51 - refresh the app and you can see that at
34:54 - the right hand side it says 9 hours ago
34:57 - right look at that nine hours ago boom
34:59 - and it's basically taking it from that
35:00 - ugly syntax of the date and time stamp
35:04 - and it's making it so beautiful and
35:06 - human readable right that's the point of
35:08 - it that's what you want so let's go
35:09 - ahead and change a couple of dates
35:11 - around so now we have 3 months ago 2
35:13 - months ago and one year ago so on and so
35:15 - forth that's what we want so that's what
35:17 - you should have in your post so far
35:19 - let's go and add a couple of more things
35:22 - a few more things that we actually want
35:23 - to do now is our address if you look at
35:26 - it it looks very long we don't want that
35:28 - we want to make our address a lot
35:30 - smaller so now what we're going to do
35:32 - for our address is let's go ahead and
35:34 - username we're going to make it we're
35:35 - going to slice it so we're going to make
35:37 - it a lot smaller okay and that's going
35:39 - to allow us to slice it we're going to
35:41 - say get us the four strings first four
35:43 - strings then put dot dot dot and then
35:45 - get us the rest of them all right so
35:47 - we're basically going to say hey get me
35:49 - from 0 to 4 and then we're going to say
35:51 - tweet. username do slice and we're going
35:54 - to go ahead and say -4 at the end Okay
35:57 - so that's what it's going to do -4
35:58 - basically means get me from the
36:00 - remaining four numbers so in other words
36:03 - you could have also done a 36 and that
36:05 - should have been also fine or you could
36:07 - do a ne4 ne4 just wrap wraps around and
36:10 - goes it starts counting backwards so it
36:12 - goes D f43 and that's your -4 all right
36:15 - let's keep going if you look at the
36:17 - component right now if you look at how
36:19 - post is looking it's looking good but
36:21 - it's not quite there yet right so let's
36:24 - go ahead and add a couple of more things
36:25 - cuz you also need to be able to show the
36:27 - s so let's work on that now both of
36:29 - these are in Span tag so let's go and do
36:32 - them correctly here let's move that up
36:35 - so they're all in one span tag and then
36:38 - we're going to go and create a new div
36:40 - and then we'll add text in there so now
36:42 - it says good morning we're going to
36:43 - style it like a tweet so that styling
36:46 - all it's doing right now is it's taking
36:48 - our tweet yeah and it's adding some
36:50 - margin at the top and the bottom giving
36:52 - some spacing around it so now this is
36:54 - the post is looking like a real post
36:57 - actually the post component so that's a
36:58 - great sign next up let's add a footer
37:01 - let's give it a styling of footer let's
37:02 - create a div and inside of that what I'm
37:04 - going to use is I'm going to use a
37:06 - comment icon boom and let's import that
37:09 - at the top and let's get that from react
37:11 - icon slfa so we got our icon going there
37:14 - and uh after that let's make sure we put
37:16 - it in a footer styling wrap that again
37:19 - in footer icon and then give it a hover
37:21 - because on Twitter when you hover it
37:23 - should turn like blue or green or
37:25 - something along those lines so we're
37:26 - going to add a hover effect on it and
37:28 - we're going to say make it a certain
37:30 - color when you hover over it and also
37:32 - color the background as well so now
37:33 - watch what happens when I hover look at
37:35 - that nice little blue effect that
37:37 - actually happens right that looks
37:38 - gorgeous let's make the background now
37:41 - hover over it there we go we got that
37:43 - light blue action going on and now let's
37:45 - start adding the other icons and
37:47 - repeating the same process again and
37:49 - again so we just added the comments now
37:51 - let's add the retweet give it some
37:52 - colors let's add the AI outline heart
37:55 - give it some colors let's add the FI
37:57 - share give it its own colors and we
37:59 - should be good to go there let's make
38:01 - sure that at the top we import all of
38:03 - these icons so let's go ahead and do
38:05 - that now yep so we got all the icons and
38:08 - now T watch this right when I hover over
38:10 - it it looks great fantastic awesome so
38:13 - great job building this component let's
38:15 - start working on the next component all
38:17 - right now let's work on the widget
38:19 - component this is going to be what goes
38:21 - on the right hand side this will make
38:24 - the app look super realistic and also
38:26 - this is a place where Twitter's will
38:28 - sometimes show ads things of that nature
38:30 - so let's get to work on building this
38:32 - widgets uh component here's what we're
38:33 - going to do we're going to go ahead
38:35 - inside of our components we're going to
38:36 - create one called widgets. JS all right
38:38 - inside of it let's go rafc so we
38:41 - autocomplete our widgets component let's
38:42 - go to our index.js and let's make sure
38:45 - that we're using widgets and let's go
38:47 - ahead at the top make sure you're
38:49 - importing your widgets component as well
38:51 - so let's go and import it perfect now
38:53 - that's done let's go back to our widgets
38:55 - component start working on this add in
38:57 - our our styling so there's a ton of
38:59 - styling we just added it in right there
39:01 - now that we added in all of our stylings
39:03 - let's go ahead and Li and make our
39:05 - folder called Static this is where we're
39:07 - going to post our static data let's go
39:09 - ahead and get our static data in here so
39:11 - boom let's add that in perfect okay all
39:14 - right again all of the static data and
39:16 - everything remember the GitHub repo is
39:18 - there so you can always get this data
39:21 - from there and post it into your own
39:22 - static folder okay so remember Link in
39:25 - the description check it out go to our
39:26 - lib go to our static pull this data
39:28 - paste it you should have the same file
39:30 - as us so now that we got the static data
39:32 - let's go back to our widget component
39:34 - let's import news who to follow from lib
39:36 - SL static and the second thing we want
39:39 - is BU search as well all right so now
39:41 - let's add a wrapper okay inside of this
39:44 - wrapper what we're going to do is we're
39:45 - going to add the search bar and then
39:47 - inside of here let's add our byy search
39:49 - icon we're going to give it a class name
39:51 - of search icon and then let's add an
39:53 - input with a placeholder of search
39:55 - Twitter so now boom there it goes okay
39:57 - you can see it right away and let's give
39:59 - the input a class name of input box okay
40:03 - so now it looks clean you can see search
40:05 - Twitter in there you can see that icon
40:07 - in there that's perfect and then let's
40:09 - go ahead and add a style section and
40:11 - we're going to say what's happening in
40:13 - there and we're going to title so what's
40:15 - happening you can see it and then for
40:17 - the news we're going to go ahead and map
40:19 - through our news that's why we're
40:20 - building the static component right so
40:22 - let's map through the news we're going
40:23 - to give it an index and then for class
40:25 - name I'm going to say style item okay
40:27 - we're going to create another div with
40:28 - news item left it's what's on the left
40:31 - hand side and we're just going to pop in
40:32 - the item category and we're going to pop
40:34 - in the item title let's add in the class
40:36 - names for them news item category and
40:38 - news item title boom there you go so now
40:41 - you can see that the news is looking
40:43 - pretty good the only thing it's missing
40:45 - is on the right hand side it's missing
40:47 - an image so let's go ahe and work on
40:49 - that let's create a div inside of that
40:50 - we're going to do news item right for
40:52 - styling we're going to add in an image
40:54 - and we're going to say item. image let's
40:56 - add in in news item image styling so now
40:59 - the image looks really clean perfect and
41:02 - then let's add in a show more section
41:04 - all the way at the bottom let's go show
41:05 - more let's style it like show more so it
41:07 - has a link to it and then we're going to
41:09 - go ahead and do style section inside of
41:11 - that style section so we're now going to
41:13 - basically create another section we're
41:16 - going to add a title in there of who to
41:17 - follow and then we're going to go
41:19 - through our who to follow array and
41:21 - basically show all the people that we
41:23 - need to follow so for the styling let's
41:25 - go ahead and create a div with items
41:27 - style and then another div and inside of
41:29 - that I'm going to create my image inside
41:30 - of that we'll create a few more divs
41:32 - here we're going to have a follow Avatar
41:34 - container and we're going to show our
41:35 - Avatar so now our avatars are looking
41:38 - good showing up and then we're going to
41:39 - show the item. name and item. handle in
41:42 - this case it's user.name user. handle
41:44 - but item is fine let's make sure we use
41:46 - the styling of name and then we're going
41:48 - to use the styling of handle so it's
41:50 - starting to look prettier and then for
41:51 - our image let's go ahead and uh do the
41:54 - styling of follow Avatar let's create
41:56 - another div on line 71 here and let's
41:58 - add in our follow button oh whoops let's
42:00 - do style that follow avatar on line 64
42:03 - so now the styling looks way better
42:05 - right like that looks juicy guys and
42:08 - it's already starting to look super pro
42:10 - so great job if you're following along
42:12 - thus far on line 67 let's add in another
42:14 - div for profile details all right there
42:17 - you have it you have created your own
42:20 - widgets uh you've created the search bar
42:22 - on the top right for search Twitter you
42:24 - have created the what's happening
42:26 - section and the who to follow section
42:28 - both of those on the right hand side are
42:30 - completely built out great job let's go
42:32 - ahead and start moving on to the next
42:35 - piece of the puzzle what's up guys how's
42:37 - it going so a little bit of a switch
42:38 - here I'm at a hotel in San Francisco but
42:41 - no worries let's go and keep on working
42:43 - on our app so let's start by working on
42:45 - our profile page let's go ahead and get
42:47 - started coding okay so in order to work
42:49 - on our profile page here's what we're
42:51 - going to do in Pages I'm going to add a
42:53 - new page and it's going to be called
42:54 - profile. JS let's hit rafc so we autoc
42:57 - complete and add in all our profile
43:00 - stuff let's go ahead and add our styling
43:02 - now for the profile page and after that
43:05 - let's add our wrapper okay now let's go
43:08 - back to our sidebar and in sidebar let's
43:11 - import link and the reason for this is
43:13 - we want to be able to go back and forth
43:14 - between pages so in nextjs using link
43:17 - allows you to quickly and easily without
43:19 - refreshing your page or even using
43:20 - routing you can switch from page to page
43:22 - which is really nice still in sidebar
43:25 - what we're going to do is the following
43:27 - now we're going to go to sidebar option
43:29 - and in sidebar option let's add our use
43:32 - router and then let's add in our router
43:35 - on line 11 and what we're going to do in
43:37 - our on click is when you what we want to
43:40 - happen right is if you click profile or
43:42 - something along those lines we need you
43:44 - to be able to go to that page and so
43:47 - when you click the selected text let's
43:49 - do router. push to the redirect okay and
43:53 - we're going to be getting the redirect
43:54 - from our sidebar okay and we're
43:57 - deconstructing it so we have access to
43:59 - our our redirect so basically if the
44:01 - redirect exists then just do the
44:03 - redirect okay that way if we click
44:05 - profile notice how it just takes you to
44:07 - the profile page that's what we want
44:09 - there okay now let's go back to our
44:11 - profile component we're going to add in
44:12 - a div inside of our wrapper and we're
44:15 - going to go ahead and style it give it
44:18 - our content styling and then let's
44:20 - import our sidebar and we're going to
44:22 - also import our widgets once we do that
44:25 - let's just show our sidebar and and then
44:27 - inside of our sidebar let's or actually
44:30 - outside of our sidebar what we're going
44:32 - to do is add in our main content and
44:34 - that's where our profile header and our
44:37 - profile tweets are going to go okay so
44:39 - let's make inside of components you know
44:42 - how we have a folder called home let's
44:43 - make a new folder called profile because
44:46 - home represents all the components you
44:48 - have on the homepage and then profile
44:50 - represents all the components that you
44:52 - have on the profile page we're going to
44:54 - call it profile header our first
44:56 - component let's go RFC so we
44:58 - autocomplete the component then let's
45:00 - also add in our next component which is
45:02 - going to be profil tweets. JS let's also
45:05 - autocomplete that so that's great and
45:07 - now going back to our profile let's just
45:09 - add in our profile header and profile
45:11 - and let's make sure we import them from
45:13 - the top once we're done with that inside
45:15 - of our profile header we're going to go
45:17 - ahead and add in The Styling for profile
45:20 - header so that way all the styling is
45:22 - there and available for us to use and
45:25 - feel free to pause the screen at anytime
45:27 - if you want to get access to it or
45:28 - remember all the styling will always be
45:30 - available for you in the source code
45:32 - inside of our profile header let's add
45:34 - in our wrapper and inside of our wrapper
45:36 - let's add in our header and in there
45:39 - we're going to add another div and then
45:40 - within that we're going to add in our
45:43 - icon for the left Arrow okay that div
45:46 - that we added let's give it the styling
45:47 - of back button okay and then we'll also
45:50 - add an on click to it which is basically
45:52 - going to say if I click it take me back
45:53 - to the homepage all right so that is
45:56 - super super nice and then let's go okay
45:58 - it says we don't know what router is no
46:00 - worries let's go ahead and lowercase our
46:03 - R and add in our router all right now
46:05 - let's go ahead and we'll add another div
46:08 - online 29 and we're going to say class
46:12 - name will be style. details okay inside
46:14 - of that we're going to have our user for
46:17 - we can just hardcode names for now so
46:19 - we'll just say Rafiki we'll say four
46:21 - tweets right here okay and let's give
46:23 - our name style. primary and then style
46:26 - doc AR for the tweets so now it looks
46:29 - kind of like a real tweet let's add
46:30 - another div and inside of there we're
46:32 - going to add an image for the background
46:34 - so let's I basically pasted you know an
46:37 - image that is 1,500 by 500 so if you
46:40 - Googled images of 1500 by 5 you can just
46:43 - pull them and put them on here that'll
46:45 - be the banner okay and then let's go
46:47 - ahead and add in a photo container
46:50 - wrapping around that image so it fits
46:52 - kind of nicely all right let's go ahead
46:54 - and now make our profile image container
46:57 - and within that we will add in our
46:59 - profile image actually let's go up at
47:02 - the top and we're going to remove that
47:04 - what we're going to do is on line 24
47:07 - let's go and add in is profile image nft
47:09 - and we'll set it equal to false for now
47:11 - why I was doing this is we're going to
47:13 - have some Dynamic styling and The
47:15 - Styling for this div on line 46 is going
47:18 - to be based on if it's an nft then do
47:20 - the hex styling otherwise do the default
47:23 - profile image container styling so now
47:25 - we're going to add in our image let's go
47:26 - go to one of our static images that we
47:29 - have in our feed. JS let's copy that
47:31 - from there and let's go ahead and add
47:33 - that in okay awesome we're adding that
47:35 - to our profile header okay we're going
47:37 - to give it a class name is profile image
47:40 - and and look at that how nicely it fits
47:42 - in right with the background and nice
47:44 - Circle pops up at the top and we're
47:46 - going to say if the profile image is an
47:49 - nft then do nft styling otherwise do
47:53 - regular profile image style so watch
47:55 - what happens when I make the is profile
47:56 - file image nft true as soon as I do that
47:59 - look at that my image becomes a hexagon
48:01 - okay all right let's go ahead and add
48:03 - some details now so let's create another
48:06 - div and we'll create it style. details
48:08 - we'll have another div within that okay
48:11 - and we're going to do style. primary and
48:13 - then we're going to do style. secondary
48:15 - okay all right let's go and make our
48:17 - current account and for now what we're
48:20 - going to do for our current account is
48:21 - copy it over from one of our hardcoded
48:25 - accounts and then let's put that there
48:27 - so let's just make sure our current
48:28 - account is something like 0x8 CD blah
48:31 - blah blah you can put whatever you want
48:33 - there if you have some static data you
48:34 - can lump that in there and in our style.
48:36 - secondary on line 64 we're going to add
48:40 - in jsx or curly braces and then within
48:43 - that we're going to say hey if the
48:44 - current account is there okay so
48:46 - basically we're checking if the current
48:48 - account exists or not okay so if the
48:50 - current account exists then all I want
48:54 - you to do is show me the current account
48:56 - and show me the first eight strings and
48:58 - then put dot dot dot and then show me
49:00 - from the 37th string and so forth okay
49:03 - you could also do like4 neg5 or
49:05 - something so there you go you can see
49:07 - what that's doing at the top right right
49:09 - underneath my name where it says Rafiki
49:11 - cuz this is conditional rendering cuz if
49:13 - the user doesn't have an account name
49:14 - then don't show that line 70 let's go
49:16 - ahead and add a new div we're going to
49:19 - make it style. naav and within that what
49:21 - I want to do is say for active nav we're
49:25 - going to put Tweets in there okay okay
49:26 - and then we're going to say tweet and
49:28 - replies media likes kind of just like
49:30 - how we have on on Twitter when you go to
49:33 - a profile page so all of those things
49:34 - are there perfect now let's go to our
49:38 - profile tweets and our profile tweets
49:40 - will add in some styling so we added in
49:42 - some styling for our rapper for our
49:44 - header so we can make it sticky for
49:45 - header title so the text can be large
49:47 - and from our feed let's just copy all
49:49 - the tweets let's go to our profile
49:51 - tweets and just add in those hardcoded
49:53 - tweets that we added earlier okay and
49:56 - then what we're going to do is on line
49:58 - 47 let's add in our wrapper okay and
50:01 - then we're going to Loop through those
50:02 - tweets so we're just going to Loop
50:04 - through the array of tweets and for each
50:06 - tweet for now let's just a post
50:09 - component and at the top let's import
50:11 - post from post okay so as you can see
50:14 - it's like starting to show the post
50:15 - component right even though it's missing
50:17 - a bunch of props so you can't see the
50:19 - image there you know and you can't see
50:22 - what the Tweet is and you can't see like
50:24 - when it was sent but you're able to see
50:26 - something the post component that we had
50:27 - made earlier is now being used here this
50:30 - is something we love about react it
50:31 - makes our life so much easier inside of
50:34 - our post let's add in our key and give
50:36 - it a index as a key for the display name
50:40 - we're just going to say RAF Kazi so
50:41 - let's just give it all the props right
50:43 - username we're going to basically say
50:45 - tweet. username and then we're going to
50:47 - slice it again all right and for tweet
50:51 - for text we're going to say it's
50:52 - whatever the text is inside of that
50:54 - tweet let's give it an avatar let's give
50:56 - it a Boolean for is profile image and is
50:59 - it false or is it true and let's give it
51:01 - a timestamp okay so once we're done with
51:04 - that our post is now showing up saying
51:06 - it was done 10 hours ago and whatnot so
51:08 - there you have it amazing job if you've
51:11 - completed that and now your profile page
51:15 - is pretty much complete so nice work
51:17 - let's keep it going all right time to
51:20 - create and deploy your smart contract so
51:23 - let's just go right into it now let's go
51:25 - inside of your smart contract folder so
51:28 - from your command line switch to your
51:30 - folder smart contract and in your smart
51:32 - contract folder what I want you to type
51:34 - in is npx hard hat as soon as you do
51:38 - that it will install and create all
51:40 - these files for you and then what I want
51:42 - you to do is once that's done go inside
51:44 - of your scripts folder inside of your
51:46 - smart contracts you're going to have
51:48 - something called scripts so what I want
51:49 - you to do in there is rename the script
51:51 - that says sample script to deploy tojs
51:54 - and in there what we're going to do is
51:56 - we're going to remove a bunch of the
51:58 - code that's there what we're going to be
52:00 - doing is we're going to go inside of our
52:02 - hard hat. config file and for from that
52:04 - file pretty much remove everything
52:06 - except for line 17 through 19 and line
52:09 - one okay so remove almost everything in
52:11 - the middle we're going to do it just
52:13 - like this and for our module. exports
52:15 - let's just stick to solidity
52:17 - 0.8.2 I mean you should be good with
52:19 - even 0.8.4 but just for this app do it
52:22 - that this way let's create a key called
52:24 - networks it's going to have an object in
52:26 - inside of it called Rinke which is going
52:28 - to have object inside of that for URL
52:30 - and accounts for accounts what we're
52:32 - going to do is just export our private
52:34 - key here and we're going to go ahead and
52:36 - grab that private key and paste it in
52:39 - and then let's go to for URL what we
52:41 - need to do is let's go ahead to Alchemy
52:43 - open up your dashboard and sign up or
52:45 - create you know open up your dashboard
52:47 - in there and uh what we're going to do
52:48 - is create a new app in there that app is
52:52 - going to be called Twitter clone select
52:53 - the environment to development and then
52:55 - click inside of that app and you're
52:56 - going to just cop where it says view key
52:58 - you're going to click that and grab your
53:01 - link that you actually need once you
53:03 - grab that link paste it in your hard had
53:05 - config what we're going to do after that
53:07 - is we're going to create a new contract
53:08 - so go inside of your under your smart
53:10 - contracts you're going to see contract
53:12 - in there we have uh greer. Sol we're
53:15 - going to change that and so is an
53:17 - extension for all solidity files and
53:18 - we're going to change that with mint
53:20 - profile image. so now we're going to
53:23 - change up remove every line of code that
53:26 - was in the file we're going to add in a
53:28 - spdx license so add in your spdx license
53:32 - identifier we're going to use MIT it's
53:34 - an open source one I believe and then
53:35 - we're going to say on line three pragma
53:37 - solidity
53:39 - 0.8.2 and then we're going to add in
53:41 - some of our contracts from open Zeppelin
53:44 - so let's get our ERC 721 our ownable and
53:48 - our counters ERC 721 is so we could make
53:51 - an nft that's compliant with the erc721
53:54 - standard open Zeppelin allows you to
53:57 - very securely and easily deploy all of
53:59 - these if you had to write this code
54:00 - yourself it would be a lot of work in a
54:02 - nightmare so we're very thankful that
54:04 - open zeppin allows us to do this right
54:06 - counters is going to be something really
54:07 - nice and what that allows you to do is
54:09 - essentially keep a counter you know that
54:11 - you can increment for every nft that you
54:13 - have made so we're going to create our
54:15 - contract profile image nft it's an ER
54:18 - 721 and it is ownable so we're going to
54:20 - add those in we're going to say using
54:22 - counters for counters. counter okay and
54:25 - then we're going to say using string for
54:26 - un 256 so the nice thing about line 11
54:29 - is it allows you to go back and forth
54:31 - between a uint and a string now on what
54:33 - we're going to do is we're going to say
54:35 - hey set token IDs to whatever that
54:39 - counter object is okay so that way token
54:41 - IDs literally imagine it being just a
54:43 - number like it's going to be either zero
54:45 - or one or two or three or four and we're
54:47 - just giving it a data type of counters
54:49 - that counter now in line 15 we're
54:51 - creating a mapping and I I know that in
54:53 - solidity all this stuff looks so
54:55 - intimidating but it's just an object and
54:57 - the mapping so it's just an object and
54:59 - the keys that it's going to have are
55:01 - going to be a number and then the value
55:03 - it's going to have is going to be a
55:05 - string so just imagine like zero colon
55:07 - hello okay or one colon hi so that's
55:11 - just an example so we're defining our
55:12 - data structure here and uh it's going to
55:14 - that object is going to be called undor
55:17 - token Uris and then what we want to do
55:19 - is let's go ahead and create a struct
55:21 - for a render token and the struct is
55:23 - going to be it's going to have ID which
55:25 - is going to be an integer it's it's
55:26 - going to have a URI which is going to be
55:27 - a string and it's going to have a space
55:30 - which is going to be also a string now
55:32 - let's go ahead and create our
55:33 - Constructor Constructor is something
55:35 - that happens as soon as the app runs
55:38 - okay this the first very first thing
55:40 - that happens as soon as your contract is
55:41 - deployed so so what we're going to say
55:43 - is as soon as it runs uh give me a you
55:45 - know these are the following things that
55:47 - are going to happen and this Constructor
55:48 - is going to be called you know it's
55:49 - going to be a ER 721 uh Constructor and
55:53 - then we're going to say profile image
55:55 - nfts is going to be the name of it and
55:58 - then the symbol of this is going to be
56:00 - pin p n short for profile image nfts now
56:03 - we're going to set a function it's going
56:04 - to be called set token URI we have
56:07 - usually these underlines in the front
56:08 - that you see that are kind of like what
56:10 - is this annoying underline there the
56:11 - point of that underline is just to I let
56:13 - you know that hey this is an internal
56:15 - function nobody from the outside needs
56:16 - to use it and this function is going to
56:19 - take in an ID token ID and it's going to
56:21 - take in token URI okay so token ID is
56:24 - going to be an integer and token URI is
56:27 - going to be a string now this is an
56:28 - internal function so let's just say
56:30 - internal so that way nobody will have
56:32 - access to it from the outside and then
56:33 - what we're going to says all this
56:34 - function allows you to do is if you give
56:37 - it a certain token ID it's going to
56:40 - basically add that into the object okay
56:42 - so it's going to basically add in a new
56:44 - key value pair inside of the mapping
56:46 - that you created called token uis so if
56:48 - we give it a for set token URI if we
56:51 - said uh we call the set token URI
56:53 - function and we give it a token ID of
56:55 - zero and the token URI of hello.com then
56:58 - it will just run the function and it'll
57:00 - go into token URI mapping and add in
57:03 - that key value pair that's that's
57:05 - essentially all that's happening there
57:06 - on line 29 let's create a token URI
57:10 - function it's going to take in a token
57:11 - ID and we're going to say it's going to
57:12 - have a public View and we're going to do
57:14 - a virtual override so a virtual override
57:17 - is so if you have an internal function
57:19 - inside of solid to override it you have
57:21 - to say virtual override returns and it's
57:24 - going to return some type of ring so
57:26 - first thing we want to do is we want to
57:28 - require that it exists so say that I'm
57:31 - running this function token URI and then
57:33 - it just returns to me the given URI
57:36 - right or given token so I go hey get me
57:38 - back my zeroth nft the very first nft
57:42 - that I ever created or get me back my
57:43 - 10th nft and if I call this function and
57:45 - I give it 10 it's going to look and see
57:47 - if it exists and if it exists it's going
57:49 - to return it and if it doesn't exist
57:51 - it's going to say URI does not exist
57:53 - these smart contracts what's really
57:55 - weird and cool is they keep their own
57:57 - memory so they're kind of like built-in
57:59 - database that's the cool thing about it
58:00 - it's like a built-in database cuz it's
58:02 - on the blockchain so every nft that was
58:04 - created from this smart contract that
58:06 - you're creating that'll be on the
58:07 - blockchain and it'll be able to go and
58:09 - reference historically if anything has
58:11 - been there which is so super freaking
58:13 - cool and awesome looks like you don't
58:14 - need to use Firebase to store that
58:16 - information and it's not even in local
58:17 - storage it's just permanently there on a
58:19 - database which is the blockchain so you
58:21 - get a database for free how nice is that
58:23 - it's just slow really slow all right
58:25 - next up on line 31 we're going to
58:28 - basically uh create another variable
58:30 - called R URI and it's going to be a
58:32 - string whenever you do string you got to
58:33 - just write that word memory string
58:35 - memory and our URI is going to be the
58:39 - the actual URI okay like literally it's
58:41 - going to be the actual URI so given the
58:43 - token ID so it's just going to look
58:44 - through the mappings and token uis given
58:46 - the ID of like let's say five it will
58:48 - pick that and set that to ouru that's
58:51 - all that's happening there and then
58:52 - we're just going to return it okay so
58:54 - this is a very easy peasy uh function it
58:57 - literally just looks through the object
58:59 - returns something based on the ID next
59:01 - function is also going to be a really
59:02 - nice and easy peasy one we want to get
59:04 - all tokens one because I want to be able
59:06 - to get all my God darn tokens all right
59:08 - where are all my tokens at homie give me
59:10 - them give me all them tokens so we go
59:13 - and get all of them that's that function
59:15 - I'm going to write some code but it's
59:16 - essentially all it's going to be doing
59:18 - is looping through and getting me all of
59:20 - my tokens that exist okay inside of my
59:23 - mapping I don't believe you even need a
59:24 - dependency for this okay and public view
59:27 - returns and it's going to return a
59:28 - struct of U it's going to return an
59:30 - array of render tokens so render token
59:33 - up at the top this is where gets a
59:35 - little weird but let me walk you through
59:37 - this so from line 17 through 21 you have
59:40 - this struck called render token that
59:42 - defines the schema of your object so in
59:45 - JavaScript it would be defining the
59:47 - schema of your object meaning this
59:49 - object has three keys these keys are ID
59:52 - U and space so it's defining that render
59:54 - tokens will have these three keys the
59:56 - rendered token cannot have a fourth key
59:58 - called ugly face or poopy head or your
60:01 - mom no it can't have that right it's
60:05 - just going to be those three things ID
60:07 - URI space that is it does that make
60:09 - sense just defining the object now on
60:12 - line 35 we're saying you're going to be
60:14 - returning an array of those objects if
60:17 - you ain't returning an array of those
60:18 - objects you and I got a problem because
60:21 - this is not dynamically typed like
60:23 - JavaScript it's more statically typed so
60:26 - when you writing these more statically
60:28 - typed programming languages you have to
60:29 - define the data types and you have to
60:31 - Define what it will return and if it
60:33 - doesn't return that the app will break
60:34 - and not compile and return errors so
60:37 - it's more annoying but it is um less
60:40 - likely to lead to errors and everything
60:42 - on the blockchain on ethereum trust me
60:45 - you don't want it leading to errors when
60:47 - you have to deploy a function on mainnet
60:49 - it costs you two freaking Grand you
60:51 - don't want to leave that to an error cuz
60:52 - you're just going to lose that money or
60:53 - you're going to get hacked so safety
60:56 - first when it comes to All Things crypto
60:58 - all right that was a great lesson for
61:00 - anybody that's in uh College
61:01 - fraternities safety first so on line 36
61:05 - we're going to say hey latest ID okay
61:08 - give it a type of an uint array okay
61:11 - that's what the latest ID is going to be
61:13 - and I'm going to say that um get me the
61:16 - current token ID okay so actually it
61:18 - doesn't need to be an array at all
61:19 - because you're just returning one thing
61:21 - so that's all latest ID so when I do
61:23 - token id. current let's just talk about
61:26 - what that does okay I have a lot of fun
61:27 - breaking this down if you're annoyed by
61:29 - me slowing down on the blockchain part I
61:31 - don't care it's my video so smash the
61:32 - like button if you dislike it it won't
61:34 - even show that won't achieve anything
61:35 - but yeah let's talk about what this is
61:38 - doing right so token IDs is that
61:40 - remember this that counter object that
61:42 - we made so that counter object has
61:43 - really interesting method it has a
61:45 - method like called Curr that method
61:47 - knows at any given time let's say you've
61:49 - deployed people have minted six nfts or
61:52 - 20 nfts or 40 nfts from your smart
61:55 - contract that you just created anytime
61:57 - you doore toen id. current you know
61:59 - what's going to happen you get the
62:00 - current number so you can see oh we're
62:02 - on the 41st nft right now or 40 seconds
62:05 - and this is so beautiful because it's
62:07 - just keeping track of all of it like a
62:09 - database without needing a database
62:11 - that's so cool and it's foolproof like
62:13 - your database could have a bug but this
62:15 - is on the blockchain it's verifiable
62:17 - it's like there so it won't have a bug
62:19 - it just and it's a buil in so it's just
62:21 - going to be like completely accurate
62:23 - right I'm I'm getting excited as I'm
62:25 - making this with you I hope you don't
62:26 - mind all right now in line 37 we are
62:28 - going to basically say I'm going to
62:30 - define a new variable called res okay
62:32 - new variable called res now re is going
62:35 - to be of type is res is going to be an
62:38 - object no I'm shooting then I just need
62:40 - to be quiet all right so res now what is
62:42 - res res is going to be a type render
62:46 - token remember that struck that we
62:47 - actually made earlier okay render token
62:50 - that's what it's going to be but why am
62:51 - I putting the weird brackets in front of
62:54 - it like that why is it open close
62:55 - brackets right there what that means is
62:58 - Rez is going to be an array of objects
63:02 - okay an array of objects array of
63:04 - objects what does that sound like that
63:05 - sounds like anything you ever have an
63:07 - API call and return to you you always
63:10 - get an array of objects with this array
63:12 - of objects that you're going to get
63:13 - you're going to do something with it
63:15 - okay so that's the important thing about
63:16 - rest just remember that and then so when
63:18 - whenever we return res you know it's
63:20 - going to be an array of objects in this
63:21 - case you already know there it's going
63:23 - to be an array of all the token URI
63:25 - objects you've created AKA every nft
63:28 - that you have minted it's just going to
63:30 - show you the whole thing it's going to
63:31 - show you the IDE of that token the URI
63:33 - of each of them and just going to show
63:34 - them all right that's the cool part
63:36 - about this now and then we're going to
63:37 - say render token latest ID now this part
63:41 - is super confusing right what the heck
63:43 - am I looking at there what is this new
63:45 - render token bracket latest ID that is
63:48 - describing the size of the render token
63:51 - array okay that's saying that the render
63:53 - token array will never be of a different
63:56 - size than that so say that our latest ID
64:00 - the we have nine nfts minted well this
64:03 - is going to be of size this is going to
64:04 - make sure the render token is of size N9
64:07 - or size 10 or how yeah size nine right
64:09 - and it's so it's going to return this so
64:10 - that way it doesn't it's memory
64:12 - efficient and you're not making an array
64:14 - that's of a much larger size than this
64:15 - it's kind of annoying to Define how many
64:18 - what's the size of your array but it is
64:20 - what it is and it ain't what it ain't
64:21 - next up what we're going to do is we're
64:23 - going to write a for Loop and we're
64:24 - going to right one of these ugly for
64:27 - Loops where you have an i and you
64:29 - iterate over it and you increment it
64:31 - we're going to do the following in this
64:33 - we're going to say if the token exists
64:35 - so I'm sorry I went over that exist
64:37 - thing I didn't really explain it that
64:38 - well on line 30 and now we're doing it
64:40 - on Line 39 I was like yo how does exist
64:44 - look through all of the tokens that I
64:46 - have made and I'm literally calling
64:48 - exist on you know let's say a number one
64:51 - how does it know what it's looking that
64:52 - up against what is it looking in I was
64:55 - imagining this exist function to have
64:57 - two arguments one being here's the token
64:59 - ID to look for two being here's the
65:02 - mapping to look inside of or here's an
65:04 - array of objects to look inside of like
65:06 - here's where to look so I was like it's
65:08 - only asking for what to look for but not
65:10 - where to look that is weird right that
65:13 - is so freaking weird that's that's like
65:15 - somebody not knowing where your house is
65:17 - you're like hey get me my underwear
65:18 - first of all they're like why am I
65:20 - getting your underwear that's weird and
65:22 - second where do I even look what's cool
65:24 - about exists is is it's a builtin
65:27 - function that comes inside of solidity
65:30 - so it automatically knows everything
65:32 - that you have you know sort of created
65:35 - every piece of contract that you had
65:36 - created with this beforehand and so when
65:38 - you give it the token ID it internally
65:40 - knows how to look at everything that was
65:43 - minted or created from this contract
65:45 - prior and look through it pretty cool
65:47 - right that's how that that's why that
65:49 - works you should know it's a built-in
65:50 - because we never defined underscore
65:53 - exists so on Line 39 we go if if the
65:56 - freaking thing exists what we're going
65:57 - to be doing here before I even start
65:58 - writing any code is we're going to be
66:00 - looping through and we're going to
66:01 - basically say if the freaking contract
66:04 - exists and just add it to this res array
66:06 - and then return it at the end that's all
66:08 - we're doing so now ain't nothing to it
66:10 - but to do it all right so let's create
66:12 - our URI which is going to be a string
66:14 - and we're going to say how we're going
66:16 - to get our URI is we're going to call
66:18 - our token URI function pass it the token
66:21 - ID or the index index and token ID in
66:24 - this case are the same because remember
66:25 - we're always incrementing using our
66:27 - counters. counter every time you mint an
66:29 - NFD it'll be zero then it'll be one then
66:31 - it'll be two then it'll be three so this
66:33 - index is going to map to that one to one
66:35 - and then we're going to basically say
66:36 - hey get me the token URI with the ID of
66:39 - zero then in the next loop we're going
66:40 - to say hey get me the token R URI of
66:43 - index one and it's just going to keep
66:45 - setting that to our variable called URI
66:47 - now this is where it gets really weird
66:49 - and also really cool so on line 41
66:51 - you're calling this so you're basically
66:54 - calling this function render token and
66:57 - let me at a high level describe what
66:59 - line 41 does okay and I think then let
67:01 - me explain cuz this is so weird and it's
67:03 - so bizarre and it blew my mind when I
67:05 - was looking at it for so long like what
67:07 - the heck is going on I had to actually
67:08 - like consult a blockchain expert and
67:11 - take some time from him and speak with
67:13 - him and be like yo what is this line 41
67:15 - this is like blowing my mind when I was
67:17 - working on this like why does this work
67:19 - and can you can you explain to me and
67:21 - basically what what's happening here is
67:23 - crazy okay what line 41 does is
67:25 - essentially just a pending to the array
67:27 - line 41 is a pending a you know the the
67:31 - mapping that we created earlier okay a
67:33 - item inside of our token URI okay an
67:36 - object it's just a pending an object
67:38 - inside of our token URI or or our res
67:40 - okay it's just appending an object
67:42 - inside of our res that's all it's doing
67:44 - so meaning it's appending an object like
67:46 - with the ID of zero value of your ID of
67:50 - zero right URI of let's say hello.com
67:53 - and it's appending that that's what that
67:55 - does every single time now how is it
67:57 - working so there's multiple ways to
67:59 - append to an array so you could do
68:01 - something like res. push in JavaScript
68:03 - but in solidity you don't have a method
68:05 - called push another way you add things
68:07 - to JavaScript arrays is like that
68:09 - destructuring syntax right except here
68:12 - you don't do either of those ways which
68:13 - are the normal ways to do it you
68:15 - basically say hey in the zeroth index of
68:17 - this array add in the following thing at
68:19 - the first index of this array add in the
68:21 - following thing at the second index of
68:23 - this array add in the following thing so
68:24 - you could actually add to arrays by
68:27 - assigning values to specific positions
68:29 - inside of an array kind of like how you
68:31 - can assign values inside of an object
68:34 - key value pairs inside of objects you
68:36 - could do it just like that inside of an
68:38 - array the key of an array at any given
68:41 - time is its index so you can just take
68:43 - that key assign it a particular value so
68:46 - that's how that's what we're doing on
68:47 - line 41 now you might be wondering what
68:50 - is this render token function I thought
68:52 - we just created from line 17 to 21
68:54 - render token was just a strug defining a
68:56 - data type but in solidity you know
68:58 - unlike typescript cuz typescript you'll
69:00 - create an interface I don't know if
69:02 - you're familiar with typescript if
69:03 - you're not so okay when you define them
69:04 - it doesn't turn those interfaces or
69:06 - types into like functions or methods or
69:09 - classes but here it does so render token
69:11 - is essentially a function now and if you
69:14 - just pass it three values what it's
69:16 - going to do is it's going to return to
69:17 - you an object that object is
69:20 - automatically going to have the keys ID
69:22 - URI in space so for example for a render
69:25 - function where I have I as the first
69:27 - argument that's going to map to the ID
69:29 - where I have URI and I'm passing in some
69:32 - string as you can see on line 40
69:34 - actually created a URI string so that
69:36 - URI is going to map to line 19's URI
69:40 - okay and that SPAC is don't even ask me
69:42 - what that spaces is that is going to map
69:45 - to what's there on line 20 so those are
69:48 - you know hey I'm just learning all the
69:50 - stuff with you okay I'm coming here to
69:51 - share with you what I know there all
69:53 - right so on line 41 that's kind of
69:56 - what's happening but if somebody's an
69:57 - expert you know why that's there tell me
69:59 - that'd be great okay so I hope that that
70:01 - you know at least the part about render
70:03 - token being a function and then when you
70:05 - give it the um arguments of IU in the
70:08 - spaces they will return to you an object
70:10 - with the keys being ID you or I in space
70:12 - and the values being what you passed it
70:15 - okay so you're you you just call the
70:16 - function you passed the values done it's
70:18 - kind of nice once you get used to it I
70:20 - feel like it's kind of a really nice way
70:22 - of working with objects but still a
70:24 - little wonky if you're not used to it
70:25 - lastly what we're going to do is we're
70:27 - just going to return that res so that
70:29 - res is basically just an array of all of
70:32 - our tokens the last function we're going
70:33 - to make on line 48 is going to be our
70:37 - minting function and inside of this mint
70:40 - function we're going to have a bunch of
70:42 - different things so we're going to have
70:43 - an recipients and then we're going to
70:46 - have our URI recipients is going to be
70:49 - you know all the addresses if you gave
70:51 - it multiple addresses it will mint to
70:53 - those multiple addresses or if you gave
70:55 - it one wallet address it will mint to
70:57 - one wallet address address is also a
70:59 - data type it is not a string or anything
71:02 - so if you literally give it a0x blah
71:04 - blah blah blah blah solidity will see it
71:07 - as a data type which is cool URI is
71:09 - going to be a string and we're just
71:10 - going to say public returns and it's
71:12 - going to return some type of uh integer
71:15 - on line 49 I'm going to create a new ID
71:17 - which is going to be an integer and
71:19 - we're just going to say it's token ID's
71:21 - current so it's whichever token ID we're
71:23 - at so if we're at the we have done 10
71:25 - mints and now this is the 10th Mint or
71:28 - the 11th mint that's what new ID is
71:30 - going to be we're going to use that to
71:32 - assign a new ID to a a token that we're
71:35 - about to Mint and the mint function is a
71:37 - builtin function it comes builtin so not
71:41 - the function that we're describing on
71:43 - line 48 but the one on line 50 that says
71:46 - underscore mint that is a built-in
71:50 - function that comes with solidity we're
71:51 - going to give it our recipients and
71:53 - we're going to give it our new ID and
71:56 - then on line 51 we're going to call our
71:59 - set token URI so basically this will go
72:02 - you know inside of our object uh the
72:05 - mapping for token Uris find that the ID
72:07 - the token ID that we're giving it find
72:09 - wherever that exists so we basically
72:11 - goey go to the third token and change
72:13 - its URI to the following so it can do
72:14 - that and set token URI is really just
72:17 - adding a new uh Ur adding a new object
72:20 - and then on line 52 what we're going to
72:22 - say is take my token IDs thing that I
72:24 - have the the the counter right because
72:27 - it's not an integer and it's a counters
72:29 - that counter specific object that we're
72:32 - using it has a method called do
72:33 - increment so we can increment it after
72:36 - it's minted a new nft and then what
72:38 - we're going to do is simply just say
72:39 - return the new ID all right now let's go
72:42 - ahead and just finish up our smart
72:43 - contract we are almost done with it now
72:46 - that our solidity contract is pretty
72:48 - much done what we're going to do is
72:50 - let's come jump into our
72:55 - is go ahead and where it says greeter
72:57 - we're going to replace that with profile
73:00 - image Mentor Factory and then what we're
73:03 - going to do is we're going to okay and
73:06 - then for the ethers dog getfactory make
73:08 - sure to say profile image nfts then on
73:10 - line five we're going to create a new
73:11 - conent we're going to say profile image
73:13 - contract and we're going to await the
73:16 - deploy okay so we're going to get it
73:17 - from the contract Factory profile image
73:19 - nfts and then we're going to go ahead
73:21 - and deploy it and then we're going to
73:23 - await the deployed contract once it's
73:26 - deployed we're basically going to say
73:28 - profile image Mentor whatever deployed
73:31 - to blah blah blah contract deployed to
73:34 - the actual address of the profile image
73:36 - contract address that address is going
73:38 - to be really important so that console
73:39 - log is actually going to be a pretty
73:41 - vital thing so make sure you leave that
73:42 - and then at the end we're just going to
73:44 - write this async function that's just
73:46 - going to do a try catch and it's going
73:47 - to await Main and otherwise going to
73:49 - catch an error and exit Okay so we're
73:51 - going to do process exit one if there is
73:53 - an error and now let's go ahead and
73:56 - compile this so let's go npx hard hat
73:58 - compile so this will compile our smart
74:01 - contract that we just made and then once
74:02 - we're done compiling what we need to do
74:05 - is the script that we made we need to
74:07 - run that script all right so we're going
74:08 - to say npx hard hat run script / deoy
74:12 - Network Rinke cuz we wanted to deploy to
74:14 - Rinke Network and once that runs
74:16 - successfully it's going to say profile
74:18 - image minor contract deployed to blah
74:19 - blah blah and look at that just like
74:22 - that we have a successfully deployed
74:25 - contract address congratulations if you
74:27 - got to this part or you're watching this
74:29 - and you know you thought this was cool
74:30 - we did this go ahead smash that like
74:33 - button show me some love and uh go ahead
74:36 - and also copy that contract address
74:38 - you're going to need that for later
74:39 - let's go inside of our lib in our client
74:42 - okay go to our client go to lib and
74:44 - we're going to create constants and in
74:45 - that constants we're going to create
74:47 - contract address so paste the contract
74:49 - address you got this this is going to be
74:51 - very important like I said now what I
74:52 - want you to do is go back to your smart
74:55 - smart contracts go to your artifacts
74:57 - inside of your artifacts you'll see
74:58 - contracts go in there and you're going
75:00 - to see uh profile image nfts Json copy
75:04 - that and paste that inside of your lib
75:06 - under your clients okay this is also
75:08 - going to be pretty important then in
75:09 - your constant import that into your file
75:12 - so do import contract artifact from
75:15 - profile image. Json okay and then what
75:17 - you're going to do is you're going to
75:19 - say contract ABI and get the contract
75:22 - artifa artifact Abi Abi is just the
75:24 - interface of the contract that that
75:26 - shows you how to use it okay so now you
75:27 - have the contract address and contract
75:29 - ABI with now with that there now the
75:33 - point of this is the contract that you
75:35 - created inside of solidity now you'll be
75:36 - able to play with it inside of your
75:38 - react app so your client side will now
75:42 - start to have access to all of this how
75:44 - freaking cool is that all right if
75:46 - you're excited I'm excited and so that's
75:48 - it I hope you enjoyed making that
75:50 - contract now we're going to work on
75:52 - adding in metamask authentication so
75:54 - let's get to work now let's work on
75:57 - adding authentication with metamask to
75:59 - our app so let's go ahead and do that
76:01 - now all right here we go okay so in
76:04 - order to start this we're going to start
76:06 - off by creating our context cuz what
76:07 - we're going to do is we're going to have
76:08 - this one Global thing that's going to
76:10 - keep track of a ton of state and it's
76:12 - going to keep track of because
76:13 - authentication we want to keep track of
76:15 - that wherever you are on the app right
76:16 - cuz if you're unauthenticated we want to
76:18 - kick you out at any given time so it
76:20 - makes sense to keep track of it at kind
76:22 - of like say a global so that's that's
76:25 - what we're doing here okay so let's go
76:26 - ahead inside of create a folder called
76:29 - context inside of in in client and then
76:31 - in context let's create a file called
76:34 - Twitter context. JS this will be this
76:36 - will keep track of our context let's
76:38 - import create context in use effect and
76:40 - use state from react and then what we're
76:42 - going to do is let's export Twitter cont
76:44 - as create context and then let's export
76:47 - Twitter provider now Twitter provider is
76:49 - going to take children and then we're
76:50 - going to return Twitter context provider
76:53 - with its children in between now now
76:55 - currently the value is empty but
76:57 - whatever value you put in there that's
76:58 - the value you're going to have access to
77:00 - globally okay so let's just set that up
77:02 - on line six we're going to go ahead and
77:04 - create a function called check if wallet
77:06 - is connected this is going to be
77:07 - asynchronous function and this function
77:08 - is just going to check is your wallet
77:09 - connected or not so if window if there's
77:12 - nothing on the window. ethereum meaning
77:14 - ethereum does not exist just return okay
77:16 - so that means maybe they don't have
77:17 - metamask installed or whatnot just
77:19 - return don't do anything and then we're
77:21 - going to have a try catch block if you
77:23 - get an error just return it and now
77:25 - we're going to get back an address array
77:27 - okay I'm writing that so you can just
77:28 - very clearly see that it's going to be
77:30 - an array of addresses and we're going to
77:31 - get that from ethereum and we're going
77:33 - to request that and the method is going
77:35 - to be eore accounts what this method
77:37 - will do is when you run this it's going
77:40 - to open up metamask and that metam mask
77:42 - is going to basically ask you to choose
77:43 - which account you want to connect with
77:44 - and then you'll be able to connect with
77:46 - whatever account you want all right and
77:48 - we're going to basically say if the
77:49 - address array length is greater than
77:51 - zero meaning you picked a wallet or
77:54 - multiple wallets then basically say hey
77:56 - connect you're connected otherwise
77:58 - you're not connected okay that's all
78:00 - that's happening there then we're going
78:01 - to go ahead on line six and keep track
78:03 - of our app status so that's just like
78:05 - are we logged in are we loged not logged
78:07 - in what's the status of the app that
78:09 - state we're going to track it on line
78:11 - six and then we're going to track our
78:13 - current account so do we have a current
78:15 - account that's logged in right now or do
78:17 - we not so if we don't then just leave
78:19 - that as empty string let's create a use
78:21 - effect hook and in here we're going to
78:22 - check if the wallet is connected
78:24 - basically every time the app runs okay
78:26 - so no dependencies for this and then
78:28 - what we're going to do on line 21 is if
78:30 - we're connected then just simply say app
78:32 - status set the app status to Connected
78:34 - done Simple app status by default let's
78:37 - just set it to loading and then we're
78:39 - also going to set the current account to
78:41 - whatever in the address array whatever
78:43 - the zeroth element is so it's whatever
78:44 - the first one that they pick that's the
78:47 - one we're going to get connected with
78:48 - okay otherwise we're just going to say
78:50 - not connected and change the app status
78:52 - to not connected as well cool now we're
78:54 - going to create another function called
78:55 - connect to wallet this is going to
78:57 - initiate U metamask wallet connection
78:59 - this this is going to be the start of it
79:01 - and what connect to wallet is going to
79:02 - do is if you don't have metamask or
79:04 - whatever if ethereum is not found in
79:06 - your window and window by the way if
79:07 - you're confused where am I getting
79:09 - window from that's what happened with me
79:10 - window is This Global it's a global
79:13 - variable that you get access to from
79:15 - chrome Safari or web browser and you can
79:17 - pull a lot of attributes about the
79:19 - window like the window size or if you
79:21 - have ethereum or metamask or anything
79:23 - injected or installed you can get access
79:25 - to other things too so it's a global
79:27 - variable with a ton of stuff in it all
79:28 - right and then if it doesn't exist we're
79:30 - just basically going to say hey no
79:32 - metamask installed okay and we're going
79:34 - to do the same thing at the top on line
79:35 - 17 if window doesn't exist just return
79:37 - uh return and set the app status to no
79:40 - metamask and then we're going to have a
79:41 - try catch block if there is an error
79:43 - then we're going to set the app status
79:45 - to an error and we're going to do that
79:46 - on line 29 and on line 41 okay and then
79:49 - we're going to say in the try while
79:51 - we're trying to connect set the app
79:52 - status to loading and then what we're
79:54 - going to do is we're going to say
79:55 - address array so we're going to do that
79:56 - again we're just going to await the
79:58 - request and method is going to be
79:59 - request account and once we get an
80:01 - account back we're just going to check
80:03 - hey if somebody picked an account
80:05 - meaning the length of array was more
80:07 - than zero then just set the current
80:09 - account to whatever the user picked okay
80:11 - let's go ahead and import used router CU
80:12 - we want to be able to route back and
80:14 - forth so from next router okay let's go
80:16 - ahead and on line 10 let's add router is
80:19 - equal to use router and then on line 50
80:22 - what we're going to do is we're just
80:23 - going to say router. push add the
80:25 - homepage and then set app status not
80:28 - connected okay so if the user does not
80:30 - connect to anything we're just going to
80:31 - send you to the homepage and we're
80:32 - basically going to change the app status
80:34 - to not connect why this is useful is
80:36 - later what we're going to do with all
80:38 - these statuses that we're keeping track
80:39 - of is we're just going to basically go
80:42 - we're going to render out different
80:43 - components AKA render out different app
80:45 - apps right so if you logged in we're
80:47 - going to give you like the real Twitter
80:48 - if you didn't log in we're going to give
80:49 - you some crappy page that's going to say
80:51 - error on it okay that's what it allows
80:52 - us to do okay and then another thing we
80:54 - want want to do is we want to add the
80:56 - router. push as well to our not
80:58 - connected okay and then in our context
81:01 - in our Twitter context provider we want
81:03 - to say app status and we also want to
81:06 - keep track of our current account so
81:08 - this way now that we've added it to
81:10 - value that means we'll have access to
81:12 - all of this globally okay cool the
81:14 - perfect so in terms of our Twitter
81:16 - context we're done now let's continue
81:18 - moving on and finish up adding this
81:21 - authentication and make the entire
81:23 - overall work FL work okay so let's go
81:25 - ahead and do that now all right now
81:27 - let's start working and finish out our
81:30 - entire authentication flow so let's go
81:32 - ahead and do that now all right so so in
81:35 - our Twitter contact let's make sure that
81:37 - in value we export we're we're getting
81:39 - app status current account and let's
81:42 - even get our function connect to wallet
81:44 - that we actually created so let's get
81:46 - that as well cuz that function will
81:47 - basically make sure that the app is
81:49 - connected okay now let's go to our
81:51 - index.js let's import use context from
81:54 - react and import Twitter context from uh
81:57 - cont do do/ context context okay let's
82:01 - add in a bit more styling so we'll add
82:03 - in The Styling for login container and
82:05 - wallet connect button and login content
82:07 - cuz that's what we need in order for the
82:09 - styling to work so let's add that in and
82:11 - then on line 16 we're going to go ahead
82:13 - and destructure our app status and
82:15 - connect to wallet from use context
82:17 - Twitter context okay so that way we get
82:19 - access to those values that we had
82:21 - provided all right and now on line 18
82:24 - let's let's go ahead and do let's go
82:25 - ahead and create say app equals and it's
82:29 - going to be a function and it's going to
82:30 - take status by default the status will
82:33 - just be app status so we're pulling from
82:35 - line 16 and we're going to make it for a
82:37 - couple of cases so this will this this
82:40 - function that we're making is really
82:41 - going to render different components
82:44 - based on the state of okay the status of
82:46 - the app so if you're logged in it's
82:48 - going to render the proper Twitter app
82:50 - if you're not logged in it's going to
82:51 - render something else if you don't have
82:53 - metamask it's going to render something
82:55 - else so there's going to be three to
82:56 - four different cases and scenarios that
82:58 - we're going to need to keep track of so
83:00 - we're just going to use the switch case
83:02 - so for switch we're going to give the
83:03 - status and then we're going to have
83:04 - multiple different case Okay so let's
83:06 - leave that for now let's just say
83:08 - default we'll leave the case value and
83:10 - the default and the break let's leave
83:12 - that there and now on line 29 we're
83:14 - going to work on what our user logged in
83:17 - component will look like right so if the
83:19 - user is logged in then give me the
83:21 - following component where I have my
83:23 - sidebar feed and widgets okay just like
83:25 - regular then on line you know all the
83:28 - way at the end let's go ahead and change
83:30 - our app looks so on Line 39 what we're
83:32 - going to do is remove that code that we
83:34 - had and inside of our wrapper we're now
83:36 - just going to we're going to put the jsx
83:39 - and we're going to call our app function
83:41 - and then we're just going to give it the
83:42 - app status so what that will do we'll
83:44 - just render out the app okay so now
83:47 - basically our logic will write in
83:48 - functions so what about the no user
83:50 - found so that component will essentially
83:52 - be a div and inside of of that we're
83:54 - going to have an image okay so let's go
83:56 - ahead all the way at the top on line six
83:58 - we'll import image from next image so we
84:00 - can actually use that okay and we'll
84:03 - create another dat and inside of there
84:04 - we're going to create a metamask
84:05 - download URL and then it'll just simply
84:08 - say install and download metamask online
84:11 - 38 we'll style it with a login container
84:14 - and for our image we're going to give it
84:15 - a height of 200 and a width of two okay
84:18 - and in our assets you can actually see
84:21 - that we have that folder we have that
84:22 - image metam mask.png and error.png so
84:25 - for all of these assets if you need to
84:27 - install them or download them in the
84:29 - description below you'll be able to get
84:31 - access to all the assets and remember
84:33 - the source code is always available so
84:35 - you can download and get the assets that
84:37 - you need all right on line seven in my
84:39 - index.js let's ask import metamask logo
84:43 - from our assets metamask and then we're
84:45 - also going to get our error image from
84:47 - assets error on line 41 we're going to
84:50 - say source as metamask logo okay and
84:53 - we're going to rename our fun function
84:54 - from no user found to no metamask found
84:57 - okay then we're going to create another
84:59 - component and this one will actually be
85:01 - no user found okay we're going to have a
85:03 - login container div inside of that we'll
85:05 - put our metamask logo image we'll put
85:08 - our wallet connect button in here and on
85:10 - click we are going to basically connect
85:13 - to wallet okay so this is where our
85:15 - functionality is going to take place
85:16 - it's going to say connect wallet on it
85:18 - and we're also going to say connect to
85:19 - wallet right there okay as Tech and then
85:21 - last but not least we're going to have a
85:23 - error component and this will give us a
85:25 - login container and an image and then in
85:28 - here we're going to have an error image
85:29 - height of 250 width of 250 we're going
85:31 - to create a login content inside and
85:34 - basically it's going to say an error
85:35 - occurred please try again or use another
85:37 - browser okay and then we're going to
85:39 - have our loading component and that's
85:41 - going to have a login container and
85:44 - within that it's going to have login
85:46 - content and just going to say loading
85:47 - dot dot dot just like that then we're
85:49 - going to go to our switch cases and add
85:51 - in all of our states so we'll have a
85:53 - state for connected not connected no
85:55 - metamask error and what our default
85:58 - state would be and all of our components
85:59 - will be now to make our authentication
86:02 - actually work let's go to our undor
86:03 - app.js cuz that's kind of the root of
86:05 - your entire app inside of nextjs go
86:08 - there we're going to import Twitter
86:10 - Provider from Context Twitter context
86:14 - okay and then we're going to wrap our
86:15 - entire app in Twitter provider and once
86:18 - you do that on the right hand side you
86:20 - can see our app is working and the Wolf
86:22 - the metamask logo is showing up that
86:24 - means we now have access to our Twitter
86:26 - context you know all the context that we
86:28 - were making okay and now let's go ahead
86:31 - there's something off with the styling
86:32 - so on line 57 let's go ahead and make
86:35 - that let's give that the styling of
86:37 - login content and as soon as we do that
86:39 - you can see that much much much better
86:41 - okay if we go to Safari or another
86:45 - browser where we don't have metamask
86:46 - installed you can see it says You must
86:48 - install a metamask a virtual ethereum
86:50 - wallet in your browser let's go ahead
86:52 - and fix the styling there too and we'll
86:53 - say the sty stying will be login content
86:55 - styling okay and now when we click
86:57 - connect wallet Watch What Happens boom
87:00 - metamask just popped up right that's
87:02 - nice okay and now let's see what happens
87:05 - if we cancel so that's the error state
87:07 - so if I cancel now it says boom an error
87:09 - occurred please try again or use another
87:12 - browser so it's clearly telling us what
87:14 - the error is what we need to do to fix
87:16 - it okay so that's nice we got a bunch of
87:19 - error handling okay let's hit next and
87:22 - connect here okay so now it's it's in a
87:24 - loading State okay and all we needed to
87:27 - do in our connect to wallet what we
87:29 - didn't do is we just needed to set the
87:31 - app status to connected so we forgot to
87:33 - do that so in our Twitter context on
87:35 - line 50 right underneath where we say if
87:38 - address the length is greater than zero
87:40 - there all we need to do is set the app
87:42 - status to connect it as soon as we do
87:43 - that boom the status changes and the app
87:47 - Comes live okay so that's where you
87:49 - should be at now if you check your
87:50 - ethereum wallet it should look it should
87:53 - look like it's connected it should it's
87:54 - say connected with the green circle at
87:56 - the top so now here's what the workflow
87:58 - looks like look at that the
87:59 - authentication workflow is looking
88:01 - beautiful it's working exactly as
88:04 - expected I hope that was valuable for
88:06 - you and I hope that you enjoyed it okay
88:09 - next up what we're going to be doing is
88:11 - we're going to start setting up our
88:13 - backend so if you're excited let's go
88:15 - ahead and start doing that right away
88:17 - all right let's work on adding our
88:20 - sanity database backend to this app
88:22 - let's go ahead and do that that now so
88:25 - I'm going to go over to our sanity
88:27 - Studio inside of the studio there is a
88:30 - folder called schemas and there we have
88:32 - schema so let's go inside of our schema
88:34 - okay and we're going to delete a couple
88:35 - of lines we're going to clean this up
88:37 - and now what we're going to do is y
88:40 - let's clean this up and let's go ahead
88:41 - and now make some schema files inside of
88:44 - our schema schemas folder so we're going
88:45 - to create users schema. JS and then
88:48 - we're going to create tweet schema. JS
88:51 - okay and now let's import user and then
88:54 - all we're going to do in each of these
88:55 - files is Type in const user schema and
88:58 - then the other one we're going to export
88:59 - const tweet schema okay which is going
89:02 - to be an array and then this is going to
89:04 - be also an empty array now let's go back
89:06 - to our schema file and we're going to
89:07 - import both of these schemas just like
89:09 - so okay and in our line nine we're
89:13 - actually going to concatenate them so
89:15 - we're going to put our user schema there
89:17 - and we're going to put our tweet schema
89:19 - there cool so now that they're
89:20 - concatenated let's work on our actual
89:22 - schemas Okay so so our tweet schema is
89:25 - going to be an object and this is going
89:27 - to be just one giant object all right so
89:29 - it's going to be called tweets and title
89:31 - is going to be tweets and type is going
89:33 - to be document and then it's going to
89:35 - just have a bunch of fields okay so to
89:37 - visually understand this is just you're
89:39 - creating the dock of tweets right you're
89:42 - going to be creating your your Insanity
89:44 - you're going to be creating that and
89:45 - then each field is going to have its own
89:47 - field type so when you click inside of a
89:50 - particular tweet it's going to have its
89:52 - own you know what are all the Fe FS
89:54 - there so that's what we need to make
89:56 - okay so let's work on our Fields so a
89:58 - tweet should contain of course you know
90:01 - what the Tweet is so that's going to be
90:03 - of type string who the author is that's
90:06 - going to be a reference cuz we're going
90:07 - to have a users's collection and in
90:10 - there we're going to reference this okay
90:12 - let's go ahead and add in a timestamp as
90:15 - well okay so we're going to have another
90:17 - field called timestamp so so far we have
90:19 - three Fields tweet Tim stamp and in our
90:21 - user schema we're going to have users
90:24 - and then the users are going to have a
90:25 - fields and these are going to be an
90:26 - array of objects here so we're going to
90:28 - have name we're going to have wallet
90:29 - address we're going to have profile
90:31 - image is profile image nft so that's
90:33 - going to be a Boolean and then we're
90:34 - going to have a cover cover image which
90:36 - is going to be a string and then we're
90:38 - going to have tweets which is going to
90:39 - be an array but that's going to be of
90:41 - type reference cuz it's going to be
90:43 - referencing the tweets okay awesome so
90:45 - that's it when it comes to the schema
90:47 - now the schema should already be working
90:49 - and we're going to go to our context
90:52 - Twitter context and now we're going to
90:54 - add the functionality to save a user and
90:57 - create a user inside of our database so
90:59 - once user logs in we need to create them
91:01 - inside of our database so we're going to
91:03 - do create user account this is going to
91:04 - be async function so it's going to
91:06 - create an account in sanity if the user
91:08 - does not already have one so that's
91:10 - going to be the cool part about it it's
91:12 - going to take in a couple of arguments
91:13 - like user wallet address which is going
91:15 - to be a type string okay and by default
91:17 - we're actually going to take the wallet
91:20 - the current account as our wallet
91:22 - address it's whichever users logged in
91:24 - it's going to use their wallet and if
91:25 - the if we don't have a metamask then we
91:27 - simply are going to return you know and
91:30 - set the app status to no metam mask okay
91:32 - and then let's try throw a try catch
91:35 - block here so if there is an error we're
91:37 - going to reroute you to the homepage and
91:40 - we're going to change the app status to
91:41 - not connected or error in this case all
91:43 - right now in the tri block we're going
91:45 - to say user Doc and so what we want to
91:47 - do is we want to First create our user
91:49 - Doc and then we want to upload user doc
91:51 - to sanity database this needs sanity
91:54 - client to be configured so let's go
91:55 - ahead and work and add our sanity client
91:57 - so inside of my client folder I'm going
92:01 - to do yarn ad at sanity client so this
92:03 - is an important let's make sure we
92:05 - install that once that is installed
92:07 - inside of our lib we're going to create
92:08 - a folder called client.js and in there
92:11 - let's import sanity client okay and then
92:13 - we're going to set the sanity client to
92:15 - we're going to give it a project ID okay
92:17 - and if you're looking at this next
92:19 - public sanity project ID thing you're
92:21 - like what the heck is that we're going
92:23 - to create you know the proc we're going
92:24 - to create an end local okay so then we
92:27 - can actually store all our end variables
92:29 - there safely so let's create a variable
92:31 - called next public sanity project ID and
92:34 - keep this under client at the global
92:36 - level but so we're going to create uh
92:37 - we're going to keep track of our sanity
92:40 - project ID we're going to keep track of
92:41 - our sanity token so let's go to sanity
92:44 - and grab our token so we're going to
92:46 - basically say a Twitter clone YouTube
92:48 - and for the we're going to add in cores
92:50 - Origins so we can use this app so let's
92:53 - do also so when we deploy it to versel
92:55 - we want to make sure that once it's
92:57 - deployed it what we want to make sure is
92:59 - like once it's deployed to versel it
93:00 - doesn't have a chors error so let's go
93:02 - ahead and take care of that right now so
93:03 - let's add a wild card for our versel
93:05 - deployment and let's hit add credentials
93:08 - okay and we basically added Local Host
93:10 - as well so now we can run this on Local
93:12 - Host let's copy our token that we just
93:14 - created okay by using ad API token and
93:17 - let's go ahead and add those tokens in
93:19 - so now that they're in let's add in our
93:20 - data set to be production API version to
93:23 - be V1 token will be our sanity token and
93:26 - CDN is going to be false going back to
93:28 - our T context let's import our client
93:31 - from lib client and then let's go to our
93:33 - function that we were working on for
93:34 - create user account and in there we're
93:37 - basically going to say hey for user doc
93:39 - the type is users ID is going to be the
93:42 - wallet address so each user's ID is
93:45 - going to be their wallet address okay
93:46 - name is just going to be unnamed and by
93:49 - default the profile image nft is going
93:51 - to be false okay and then profile image
93:53 - I'm just going to grab some image and
93:54 - put it in there you can grab whatever
93:56 - image you want put it in there okay for
93:58 - the wallet address I'm just going to use
94:00 - the user wallet address and then we're
94:01 - going to await the and we're basically
94:04 - going to go to sanity and we're going to
94:05 - say hey create this user if this user
94:08 - doesn't exist pass the user Doc and
94:10 - we're good so what's cool about sanity
94:12 - is it'll automatically look up the user
94:14 - and if that user is there then it won't
94:16 - actually create a new user so that's
94:18 - fantastic that's exactly what you want
94:20 - make sure your app status says it's it's
94:22 - connected right after it does does that
94:24 - okay and we're going to go to where
94:26 - check if wallet is connected on and on
94:28 - line 29 right underneath where we have
94:30 - Set current account we want to also
94:32 - right at that point create a user
94:35 - account as and this is going to use our
94:37 - sanity function to create a user account
94:38 - in our database okay and in our connect
94:40 - to wallet we want to also add this
94:42 - create user account same thing right
94:44 - underneath where we connect to it okay
94:46 - now we're getting an error so let's go
94:48 - ahead restart and restart our server and
94:51 - do yarn Dev okay and let's also hit
94:54 - sanity start so you can kind of see what
94:56 - our back end look and let's go to Local
94:57 - Host 3333 connect and now in users you
95:00 - can actually see that we have a user
95:02 - unnamed and if you go there it's showing
95:04 - the wallet address that I have and it's
95:06 - showing the profile image that we've
95:07 - hardcoded below so it's looks like it's
95:10 - working now if I change that to Rafiki
95:12 - cool and now I can even change that to
95:14 - Rafiki or do whatever I want with it so
95:17 - you can see that our front end is now
95:19 - able to actually speak to our back end
95:21 - and our user actually did get stored in
95:24 - the database so this is absolutely
95:26 - fantastic you just learned how to use
95:27 - sanity add a user with the database and
95:30 - you learned how to store inside of your
95:32 - sanity database okay so great job on
95:35 - that this is fantastic next up next up
95:38 - we are going to add the functionality to
95:41 - post a tweet and then store that inside
95:43 - of our database so it's going to be
95:44 - exciting let's go ahead and work on that
95:46 - all right let's work on creating and
95:49 - let's work on making tweets save inside
95:53 - of our Sandy database okay and get
95:55 - created there so let's work on this so
95:58 - in my tweet box component I'm going to
96:00 - import client from lib client so I can
96:03 - have access to my client okay cuz
96:05 - remember I need to post it to my S
96:08 - database so that's why I need my client
96:09 - okay now on line 28 I'm just going to
96:12 - say if the tweet message does not exist
96:14 - return so we're going to work on the
96:15 - post Tweet component function because we
96:17 - don't want it to just console log right
96:19 - we need it to save to the database and
96:22 - if tweet message exists well then what I
96:23 - want to do is I want to set the Tweet ID
96:26 - and that tweet ID is going to be based
96:27 - on the date okay and so from the top
96:30 - we're going to import use context and
96:32 - we're going to import Twitter context as
96:34 - well cuz we're going to need access to
96:35 - all of it and we're going to basically
96:37 - say hey destructure the current account
96:40 - from use from Twitter cont so basically
96:42 - get us a current account from Twitter
96:44 - context okay then I'm going to go to my
96:46 - Twitter context actually let's just stay
96:48 - in our tweet box okay and in tweet ID
96:51 - we're basically going to say current
96:53 - account account so each tweet ID is
96:55 - going to be whatever the current account
96:57 - is followed by the date that will make
97:00 - the Tweet ID pretty unique right cuz
97:02 - it's your wallet address plus timestamp
97:04 - so you're going to get something pretty
97:05 - unique as a date and then we're going to
97:08 - go and do tweet doc okay and for our
97:10 - tweet doc we're going to now create this
97:12 - doc that we can put inside of our sanity
97:14 - so we're going to go type is tweets ID
97:17 - is tweet ID tweet is going to be the
97:19 - following it's going to be a tweet
97:20 - message and then Tim stamp is going to
97:22 - be whatever the time stamp is right now
97:24 - data is right now in ISO so we're going
97:26 - to do ISO string okay then author the
97:29 - key for author is going to be the Tweet
97:31 - ID and the type is going to be reference
97:33 - and we're going to say ref is current
97:34 - account okay once we're done with that
97:36 - we're just going to say hey create this
97:38 - if it does not exists so only create
97:40 - this tweet if it does not exist if it
97:42 - exists meaning if this tweet ID exists
97:44 - which is so rare then don't create this
97:46 - okay then don't create this put this in
97:48 - the database and then what we're going
97:49 - to say is we're going to go and go to
97:52 - the current account and add this tweet
97:53 - to it okay so we're going to say insert
97:55 - this and append this tweet to that all
97:57 - right that's all that code is doing
97:58 - there and then we're going to commit
97:59 - that and set the tweet message to blank
98:01 - make sure to make your function async
98:03 - here now let's go ahead and add our
98:05 - tweet just like have you smashed the
98:07 - like button yet have you smash the like
98:10 - button yet go click it Go click it right
98:12 - now I'll love you even more than I love
98:14 - you right now okay go ahead and do all
98:15 - right so I hit the Tweet let's go to my
98:18 - sanity and look at that the Tweet is
98:20 - there at the bottom right you can see it
98:23 - yo how easy it is it to add your tweet
98:26 - that is so beautiful okay so if you
98:27 - haven't smashed the like button yet go
98:29 - ahead and subscribe to the channel too
98:30 - while you're at it okay and now if you
98:32 - go to tweets it is a two-way
98:34 - relationship right in users it has the
98:36 - tweets appended when you go inside of
98:38 - tweets you see that the you know have
98:40 - you smash the like button the author of
98:42 - that tweet is rafik Kazi which is inside
98:44 - of our users okay okay beautiful so we
98:47 - are with that said we are done adding
98:50 - the Tweet functionality to our app let's
98:53 - go go ahead and add a couple more
98:55 - functions and make them work with our
98:56 - back end and then we should be good to
98:58 - go let's finish off our sanity functions
99:01 - and let's go and work on them now I'm
99:03 - going to go to my Twitter context and in
99:06 - there let's go ahead and on line 89
99:08 - we'll fetch all of our tweets so we're
99:10 - going to query it and the query is going
99:12 - to be this big query that you see right
99:14 - here and what this query is going to be
99:15 - doing is basically going to be saying
99:18 - hey go to tweets get me the author
99:21 - whereas and then for the author get me
99:23 - their name their wallet address their
99:25 - profile image and it's profile image nft
99:27 - get me their tweets get me their
99:29 - timestamp and then I want you to order
99:31 - it with time stamp descending meaning
99:32 - the most recent ones showed those to me
99:34 - first so that's what our query is saying
99:36 - here and then we're going to basically
99:38 - go SED response okay and we're going to
99:41 - go and fetch that specific query okay
99:43 - and then we're going to set these tweets
99:45 - so let's make sure that we're keeping
99:47 - track of the state so on line 10 we're
99:48 - going to add in our state called tweets
99:50 - and we're going to have set tweets there
99:52 - okay and it's going to be an empty array
99:54 - in the start and our set tweets okay
99:56 - what we're going to do is we're going to
99:57 - do sanity response and we're going to
99:59 - Loop through so4 each and each item that
100:02 - I get we're going to go new item and the
100:04 - new item is going to be an object and
100:06 - it's going to be a tweet so we're going
100:08 - to get the item tweet we're going to get
100:10 - the Tim stamp we're going to get all the
100:13 - info about the author the wallet address
100:16 - all of the detail that we get back from
100:18 - you know when we fetch all of our tweet
100:20 - okay so in this case another way to
100:21 - think about item is item is another word
100:24 - for saying tweet but I just didn't want
100:25 - to say tweet cuz it would make it really
100:26 - confusing but it's really tweet. tweet
100:28 - we're getting tweet. timestamp we're
100:30 - getting tweets author name we're getting
100:33 - tweets you know if it's a nft image or
100:35 - not let's get the profile image as well
100:37 - so now that we're done with all of the
100:38 - author let's go ahead and set tweets to
100:41 - whatever they previously were okay let's
100:43 - go out of all of that and basically set
100:45 - the tweets to be whatever they
100:47 - previously were to what they are now and
100:50 - then we're going to say hey let's get
100:52 - the current user details so user account
100:55 - by default it's going to be current
100:56 - account and we're just going to say hey
100:58 - if the app status is not connected all
101:00 - right so basically now what we want to
101:01 - do is we want to get the current users
101:03 - details why so we can actually show them
101:05 - on the screen so we're basically going
101:07 - to say if the app stat if app is not
101:09 - connected just stop and return and then
101:11 - for the query we're just going to say
101:12 - hey if it's you know if if it's a user
101:15 - and the ID is of the current user's
101:18 - account that's the user I want you to
101:20 - get me and of that user what I want you
101:22 - to do is is get me their tweets okay and
101:25 - how I want you to get their tweets is
101:26 - tweets is going to be an array that
101:28 - you're going to return to me array of
101:29 - items you're going to return to me and I
101:31 - want you to only give me timestamp and
101:33 - tweet I don't need more information than
101:35 - that and then order it with timestamp
101:36 - descending meaning the most recent ones
101:39 - first okay that's that's all that's all
101:42 - that means great also get me the name
101:44 - get me the profile image get me whether
101:47 - it's a profile image nft or not give me
101:49 - the cover image and get me the wallet
101:51 - address okay then we're going to get the
101:53 - sanity response so sanity is going to go
101:55 - to the database fetch that query that
101:58 - you just asked it okay and then we're
101:59 - going to set the current user details so
102:01 - we don't have that state so let's create
102:04 - that state variable called current user
102:05 - and set the current user to be we'll
102:07 - just do object empty object for now and
102:10 - so we're going to set the current user
102:11 - to be it's going to we're basically
102:13 - going to get the tweets from that that
102:15 - the query that we return and we're going
102:16 - to get the name we're going to get the
102:18 - profile image so we're just getting that
102:19 - users and then we're going to set those
102:22 - current users details okay so this
102:24 - function will do two things it's
102:26 - essentially getting and setting the user
102:28 - details all right and then basically
102:30 - we're going to pass and fetch Tweets
102:32 - we're going to do tweets cuz we need
102:34 - access to that globally throughout the
102:35 - app and we're going to need access to
102:37 - the current user throughout the app okay
102:39 - so those are all very important things
102:40 - why do we need access to this throughout
102:41 - the apps well I need access to all the
102:44 - you know the fetch tweets function
102:46 - because I want to be able to get all of
102:48 - the tweets about this user regardless of
102:51 - wherever we're at right so if I'm in
102:53 - profile page I still need access to all
102:54 - the tweets if I'm in homepage I still
102:56 - need access to this user's tweets all
102:58 - right so with that said we are done with
103:01 - getting access to all the tweets and
103:02 - everything of that nature next up what
103:05 - we're going to be working on is now
103:07 - we're going to be adding Dynamic data
103:09 - throughout the app so this is going to
103:11 - take some time and then right after that
103:13 - we're going to move on to the blockchain
103:15 - and the ipfs part so I hope you're
103:17 - excited and I hope you enjoyed this with
103:19 - that said I'm going to see you in just a
103:21 - second all right so now we're going to
103:22 - add a bunch of dynamic data and and to
103:25 - our app so let's go ahead and do that
103:27 - now so I'm going to go to my sidebar
103:29 - component in my sidebar let's let's
103:31 - import router okay so we want to be able
103:34 - to route through the app and on line 90
103:36 - let's go ahead and add an onclick for
103:39 - our more okay so we're basically just
103:41 - going to push the path name and here
103:44 - what we're going to do is we're just
103:45 - going to say hey go and we're going to
103:47 - add a query parameter called mint and
103:50 - we're going to put the current account
103:51 - address inside of there okay that's what
103:54 - we're doing right now so whenever you
103:55 - click that path boom you'll head there
103:57 - let's go ahead let's also import context
103:59 - at the top so we're going to say import
104:01 - use context from react and also import
104:03 - our Twitter context that we created and
104:06 - so now we're going to destructure the
104:07 - current account and the current user
104:09 - from our context that we created and
104:11 - where we hardcoded clever Cy let's go
104:14 - ahead and replace that with the actual
104:16 - current user.name let's refresh okay so
104:19 - we're getting an error let's go ahead
104:20 - and fix just basically change the path
104:22 - to our context and remove the multiple
104:25 - Dots here now it says Twitter context is
104:27 - not defined okay and so instead of have
104:29 - four dots just have two dots right so
104:32 - period period context Twitter context
104:34 - and now we should be good to go all
104:35 - right next up inside of our Twitter
104:37 - context we're going to add our use
104:39 - effect hook and inside of that use
104:41 - effect hook we're basically going to
104:43 - make the dependency third and let's
104:45 - actually change that dependency so we're
104:47 - going to make that dependency actually
104:49 - current account and we're going to say
104:51 - if not current account account so if the
104:53 - current account doesn't exist and the
104:56 - app status is connected then just simply
104:59 - return and stop the app okay and let's
105:01 - make our dependen current account and
105:02 - app stat and we'll replace that with the
105:04 - or because in either case if the account
105:07 - doesn't exist or the app status is not
105:09 - connected then I just need you to like
105:11 - not run this hook this use effect hook
105:14 - okay so now we're getting an error on
105:15 - our tweet side so where we're saying it
105:18 - let's replace that with itm that was a
105:20 - typo so now it should work everywhere
105:22 - and it should be good and now on line 96
105:25 - and sidebar where it says current for it
105:27 - had hardcoded account wallet address
105:29 - let's go ahead and add our current
105:31 - account slice that bad boy and then once
105:33 - we do we should be good on line 93 let's
105:36 - go ahead and add our profile image for
105:38 - the current user okay and we're
105:40 - basically going to say hey if the
105:41 - current user has uh nft if it's an
105:44 - actual nft then show that okay otherwise
105:48 - show a regular profile image and now
105:51 - boom all the way at the bottom right in
105:53 - our sidebar you can actually see that
105:55 - our component is showing now where we're
105:58 - destructuring the current account let's
105:59 - also get the current user and the tweets
106:02 - cuz I think that's going to be important
106:04 - okay we might not need access to tweets
106:06 - so actually let's get rid of and where
106:08 - we have hardcoded that image on line 68
106:11 - we're going to replace that with the
106:13 - current users profile image and uh for
106:16 - on line 70 where we're doing our styling
106:18 - of the profile image what we actually
106:19 - want to do there is replace that with
106:21 - Dynamic styling So based on whether the
106:24 - user it's an nft image or not if it's an
106:26 - nft image then make it a hexagon
106:28 - otherwise make it a regular profile now
106:30 - let's go ahead into our feed. JS we're
106:32 - going to copy all the tweets and inside
106:34 - of our or actually just hide all the
106:36 - tweets and inside of our feed let's use
106:39 - context and let's also use Twitter
106:40 - context and let's destructure the tweets
106:43 - from our Twitter context and now for on
106:46 - line 66 we're going to basically say hey
106:48 - the tweets author wallet address so now
106:50 - we're pulling dynamically from our
106:52 - database
106:53 - okay and for Avatar we're going to pull
106:54 - from the tweet and for our display name
106:56 - we're going to pull from the actual
106:58 - tweet that we're getting from sanity for
106:59 - our text we're going to pull from the
107:01 - Tweet okay and line 62 tweets is now not
107:04 - pulling from the hardcoded data anymore
107:06 - cuz we've commented it out as you can
107:08 - see from line 13 to 50 we're now tweets
107:10 - is now getting pulled directly from the
107:13 - sanity database okay that's what's
107:15 - actually happening there and you know
107:16 - have you smash the like button yet
107:18 - that's the tweet all right let's go to
107:19 - our profile header and now let's go
107:22 - ahead and add use context there from
107:24 - react and we will also add Twitter
107:26 - context from Twitter context okay and in
107:29 - our profile header let's go ahead and
107:32 - destructure current account and current
107:34 - user from Twitter context so then we
107:36 - have access to them in our profile
107:37 - header okay and boom look at that it's
107:40 - looking our profile page is looking
107:42 - pretty solid let's hard instead of
107:44 - hardcoding that Banner image that we
107:46 - have on line 40 let's uh pull it from
107:49 - sanity so let's just say current user.
107:52 - cover photo actually if you look it says
107:54 - cover image not cover photo for name
107:57 - we're going to go ahead and say current
107:58 - username and on line 35 we're going to
108:01 - say current user tweets okay so again
108:04 - we're pulling all of this dynamically
108:06 - now should be pulling that from the
108:07 - sanity database okay and for the tweets
108:10 - that's now going to be you know the word
108:13 - is going to be written based on if it's
108:15 - just one tweet it'll just say tweet and
108:17 - if there are multiple tweets it's going
108:18 - to say tweets okay now another place on
108:21 - line 67 where we have rafii let's
108:23 - replace that with current user.name so
108:25 - now it's going to pull dynamically as
108:27 - well from there so that should be much
108:29 - better and in our profile Tweets we're
108:32 - going to import use context and Twitter
108:34 - context okay we're going to destructure
108:36 - current account current user and then
108:38 - get our Twitter context there and we're
108:40 - going to do the same thing and we're
108:42 - going to get the current users tweet so
108:44 - that's the difference on the profile
108:45 - page whoever is logged in right now so
108:47 - if I'm logged in right now I needed to
108:48 - pull my tweets okay so let's go ahead
108:51 - and slice our username let's Okay and
108:54 - we're just going to add a question mark
108:55 - for the tweets so this a line in profile
108:58 - header line 37 is breaking so we're just
108:59 - going to say hit tweets if they exist
109:01 - we'll ask on line 36 as well we'll just
109:03 - ask if it exists make it optional
109:05 - chaining so we don't have an error there
109:07 - line 54 will do the same thing tweets
109:09 - question so we're going to do current
109:10 - user. tweets question mark okay now this
109:12 - display name let's make it the Tweet
109:15 - author name so we're pulling or current
109:17 - user.name so we're pulling it
109:18 - dynamically we'll pull the tweet and for
109:20 - the Avatar we'll also get the current
109:22 - user Us's profile image so that should
109:24 - be good for display name what we're
109:26 - going to do is U display name is going
109:29 - to our wallet address in this case so if
109:32 - the person is unnamed then put their
109:34 - wallet address otherwise put their name
109:37 - okay so that's the way that we're going
109:39 - to do that and so this is kind of a nice
109:41 - functionality you know depending on
109:43 - whatever username is like if you prefer
109:45 - to have a name then sure show the name
109:46 - otherwise just show the wallet address
109:48 - okay it's that's kind of how it even
109:50 - works on open so we're going to say
109:51 - current user.name if it's named show the
109:53 - current user's wallet address otherwise
109:55 - show the current user's name so that
109:57 - looks super clean okay and then we're
109:59 - going to splice it as well so now there
110:01 - you go now you can see that rafic Kazi
110:03 - showing up the wallet address for rafic
110:05 - Kazi is showing up okay that looks
110:07 - fantastic and now I can switch between
110:09 - back and forth between the profile page
110:11 - and also all the way at the bottom you
110:12 - can see the rafic Kazi showing up with
110:14 - the wallet address okay awesome so
110:16 - hopefully you enjoyed that we added a
110:18 - ton of dynamic data to this this was fun
110:21 - now we're about to get started on our
110:23 - blockchain part so I hope you're excited
110:26 - let's get straight into it all right
110:28 - guys now what we're going to do is we
110:29 - are going to build a model where you can
110:32 - actually click upload your image and
110:35 - then mint your own
110:36 - nft with the deployed contract that you
110:39 - deployed so it's going to be exciting
110:41 - let's get to it all right first things
110:43 - first let's go ahead and inside of
110:45 - components we're going to create a
110:46 - folder called minting Model inside of
110:48 - there we're going to create a file
110:50 - called profile image minor .js now let's
110:53 - hit rafc so we hit autocomplete on
110:57 - profile image Mentor make sure you have
110:59 - the react es6 or es7 Snippets so you can
111:02 - do this type of stuff that I'm doing
111:03 - right here otherwise you'll have to
111:05 - manually type that in and that's not fun
111:07 - let's go ahead inside of our client and
111:09 - now we're going to install the react
111:11 - model Library so let's do yarn add react
111:15 - modal okay perfect so now that that's
111:18 - installed let's go ahead and import that
111:20 - into our sidebar so we're going to to
111:22 - import model from react model and then
111:24 - let's go at the top and import use
111:26 - router okay cuz we're going to need
111:28 - access to that as well and let's uh on
111:31 - line 40 we're going to say router is
111:32 - equal to use router and then on line 20
111:34 - we're going to go modal and inside of
111:36 - our modal we're going to add our profile
111:39 - image minor component that we just
111:40 - created okay now if that freaks out
111:43 - Simply go ahead and import profile image
111:45 - minor from minting modal profile image
111:48 - minor okay so we get access to that
111:51 - great and then inside of our mod we want
111:53 - to say that um whether it's open or not
111:55 - is going to be based on the Boolean of
111:58 - whether in the URL you have a parameter
112:01 - called Mint or not meaning when you
112:03 - click the mint it should open up once
112:05 - you unclick it you know and the URL is
112:08 - clear then it goes away okay all right
112:10 - and then on the request close all right
112:12 - on the request close basically just take
112:14 - us back to the homepage so we're just
112:16 - going to say DOD back and then for style
112:18 - we're just going to pop in custom style
112:20 - okay now in order to get these custom
112:21 - style we we actually need to go ahead
112:23 - and build that out so inside of our
112:26 - constants we're just going to create
112:27 - custom Styles so we can just leave them
112:29 - there and then use them whenever we want
112:31 - so here are custom Styles we got a top
112:34 - we got a left we right bottom are going
112:36 - to be Auto transform is going to be
112:38 - translate 50/50% and basically what this
112:41 - code is going to do is give you a modal
112:43 - in the middle and kind of give you a
112:45 - dark overlay in the background that's
112:47 - all we're doing here and now all we have
112:49 - to do is import our custom style from
112:51 - lip constants so we got that and now
112:53 - let's uh click mint actually on click is
112:57 - not defined so in our sidebar in line 97
112:59 - what we're going to do is we're going to
113:00 - add it so we're going to say on click
113:02 - router. push and give it the path name
113:04 - with mint and current account so now
113:06 - when I click it my modal pops up it's
113:08 - not the best model but it's clearly
113:10 - there you can see the background kind of
113:12 - being being grayed out so that's the
113:15 - color that we're adding as an overlay
113:17 - and our modal while it doesn't look
113:19 - pretty it is indeed showing up all right
113:21 - now in our profile image Mentor that we
113:24 - created we need to basically create the
113:25 - component that we stick inside of the
113:28 - model that's what we need to work on now
113:30 - okay so in a profile image Mentor we're
113:32 - going to create our status okay it's
113:34 - going to we're going to set the state to
113:36 - initial and for modal children like
113:38 - what's going to go inside of it we're
113:40 - going to say that it's going to take the
113:41 - modal status by default it's going to be
113:43 - the status okay and uh we're going to
113:45 - have different cases so one case is
113:47 - going to be initial and on line 16 let's
113:49 - go ahead and render out this model based
113:52 - on on the status so this is just a start
113:55 - of the modal we def definitely started
113:58 - making progress on it but let's continue
114:02 - going ahead and making progress and then
114:04 - we're going to finish it out all right
114:05 - so now in our modal children that we
114:08 - were working on we have our initial
114:10 - State we'll have our loading State our
114:12 - finish State and our default State now
114:14 - we're going to leave these blank and now
114:17 - we're going to go build out these
114:18 - components because modal children is
114:19 - going to basically reference you know
114:22 - one of these different components for
114:24 - the model so let's go ahead and build
114:27 - them out now all right so what I'm going
114:29 - to do is uh let's start off by building
114:32 - out initial state so for initial State
114:34 - what we're going to do is first we're
114:36 - going to import GI Earth America from
114:38 - react icons cuz we're going to need that
114:41 - we're going to need that you know icon
114:43 - then let's go ahead and add all of our
114:45 - styling for our initial state so our
114:48 - wrapper input Fields container file
114:51 - input Uh custom input all of this is
114:53 - going to be needed now inside of the
114:55 - initial State it's going to take in a
114:57 - bunch of props so let's do profile image
115:00 - set profile image name I'm going to need
115:02 - set name description set description
115:05 - mint so it's going to basically
115:06 - destructure these all right and then
115:09 - we'll console log profile image when we
115:11 - get it now let's go ahead and build out
115:13 - what we're going to return so let's
115:15 - create a wrapper you know div class name
115:17 - wrapper then inside of that we're going
115:19 - to create another one with input Fields
115:20 - container then we'll have um another one
115:22 - with the input container inside of that
115:24 - we'll create a label and make sure to
115:26 - give it image upload for HTML 4 and for
115:29 - class name we're going to do it based on
115:30 - hey if profile image exists then you
115:33 - know choose the file selected style
115:35 - otherwise choose the custom input style
115:37 - and just just means if there's already
115:38 - an image that you've uploaded
115:39 - successfully make that like button green
115:41 - all right then we're going to have an
115:43 - input and then in that input it's going
115:45 - to be type file ID of image upload it's
115:47 - going to accept like a JPEG or a PNG and
115:50 - the class name for this is going to be
115:52 - file input for the placeholder we'll say
115:54 - image URL and on on change we're just
115:56 - going to say hey set the profile image
115:58 - to you know whatever file the user
116:01 - picked cool and it's going to say select
116:03 - file so that's that's it there next up
116:05 - uh we're going to have a div with an
116:06 - input container it's going to have an
116:08 - input of you know type text class name
116:10 - is going to be input placeholder is
116:12 - going to say title of image and then
116:14 - whatever the value is and on change
116:16 - we're just going to set name to be
116:18 - whatever you type in so this is going to
116:19 - be the name of the image in this case
116:21 - and then we're going to have an input
116:22 - container another one and then in this
116:24 - input we're going to you know have text
116:26 - class name input class holder in this
116:29 - Cas placeholders is going to be
116:30 - description value is going to be
116:31 - description and then on change well
116:33 - whatever you added let's go ahead and
116:35 - set that as the value so we're going to
116:38 - go ahead and set that as the value so
116:40 - we're done with the description we're
116:41 - going to create another div this one is
116:43 - going to be of it's going to have lower
116:45 - this is for lower inside of that let's
116:47 - create a div with visibility and then
116:49 - we're going to put our GI Earth America
116:51 - icon and for span tag we're going to do
116:54 - visibility class name visibility text
116:56 - and basically go everyone can see this
116:59 - then we're going to have another div in
117:00 - that I want to have a class name and uh
117:03 - basically I say if the name exists and
117:05 - description exists and profile image
117:06 - exists so if all three of those fields
117:08 - exist then give me the styling of mint
117:11 - button otherwise give me an inactive
117:13 - mint button styling Also let's add an on
117:15 - click to this and basically that on
117:17 - click is hey if name description profile
117:20 - image Fields exist and the user clicks
117:22 - it then run the mint function okay so
117:26 - we're going to go ahead Define what that
117:27 - function is as well and then let's go
117:30 - mint beautiful let's close out all of
117:32 - our divs and boom we're good with our
117:34 - initial State function now let's go back
117:37 - to our minting modal and let's just add
117:40 - in our loading State and our finish
117:42 - State cuz those are two other ones that
117:43 - we need so for loading State let's
117:45 - import grid loader from react Spinners
117:47 - cuz I want to have a spinner so let's go
117:50 - and then let's import CSS from emotion
117:53 - react now we're going to need to install
117:55 - these libraries so let's go ahead and do
117:57 - yarn add react D Spinners cuz that's we
118:00 - need that and then let's go ahead and do
118:02 - yarn ad at emotion SL react okay now
118:05 - once both of those are installed great
118:08 - let's go ahead and add the styling so in
118:09 - style we're going to add a wrapper and
118:11 - then we're going to add title let's do a
118:13 - CSS override here with display block
118:15 - margin Z Auto border color white and
118:18 - then we're going to create our component
118:20 - loading State and let's go ahead and
118:21 - make sure sure export loading State as
118:23 - well and our loading State component is
118:25 - just going to return a div wrapper
118:28 - inside of it we're going to have a title
118:31 - and it's going to say minting in
118:32 - progress and then we're just going to
118:33 - put our grid loader with the color of
118:35 - white loading is going to be we're going
118:37 - to set that to True CSS we're going to
118:39 - give it the CSS override let's give it
118:41 - size 30 and that should be our loading
118:44 - state so that is complete uh as our
118:46 - definition of the loading State now the
118:48 - last thing we want to set is our finish
118:49 - state so let's go ahead and work on that
118:51 - let's import use context and use effect
118:53 - from react let's import our Twitter
118:55 - context from our context Twitter let's
118:57 - import our image from next image we'll
118:59 - get our check mark from assets and if
119:02 - you need assets remember link is in the
119:04 - description you guys can get it from
119:05 - there and we're going to have used
119:07 - router from next router now for style
119:10 - let's uh add in our styling beautiful
119:13 - and we're now going to create a
119:14 - component called finish State let's also
119:16 - export default finish State and we're
119:19 - going to go ahead and line 14 add our
119:22 - router so we're going to say router
119:24 - equals use router and then we're going
119:26 - to go ahead and um uh destructure our
119:28 - get current user details from our use
119:31 - context our Twitter context let's run a
119:33 - use effect hook and call our get current
119:37 - details uh function or yeah get current
119:40 - user details okay and then what we're
119:42 - going to do is let's return so in our
119:45 - return we're going to do uh give me a
119:47 - div with style wrapper okay inside of
119:49 - that we'll have another uh title it's
119:52 - it's going to say mint things successful
119:53 - and then we're going to have uh image
119:55 - that's going to be a check mark with 100
119:57 - height 100 that's going to show that
119:59 - this is good and then we're going to add
120:00 - an on click that when you click it it
120:02 - takes you to the homepage and then we're
120:04 - going to close this off perfect so we're
120:06 - good with our finished State we're good
120:09 - with our loading State and we're good
120:11 - with our initial State at this point um
120:14 - that's perfect and now we're just going
120:16 - to go ahead and start working on um
120:18 - adding these in okay we're going to
120:21 - start working on adding these in so
120:23 - inside of our profile image Mentor let's
120:26 - go ahead and add a couple of things so
120:28 - let's import our initial state from
120:30 - initial State let's import our loading
120:32 - state from loading State and let's
120:34 - import our finished State because we
120:36 - need those three components that we just
120:37 - made and then inside of our profile
120:39 - image Mentor there are a couple of other
120:41 - things that we need to keep track of in
120:43 - terms of state so let's keep track of
120:45 - profile image okay let's make the status
120:48 - to be finished uh on line 12 will keep
120:52 - track of name and set name and we'll do
120:56 - and then on line 13 we're going to do
120:57 - description set description and then
120:59 - we're going to add in our you know we
121:01 - already have our router so that's good
121:03 - and then we're going to on line 16 get
121:05 - our set app status we're going to pull
121:07 - that from Twitter context let's create
121:10 - our mint function we'll leave that kind
121:12 - of empty right now so just Define mint
121:14 - and leave it as an empty function that
121:16 - just kind of returns an object empty
121:18 - object and then in our modal children
121:22 - you know for our initial State let's
121:24 - just call our initial State component
121:27 - that we imported and then let's give it
121:29 - all of the things that it needs so let's
121:31 - give it profile image let's give it set
121:33 - profile image name set name description
121:35 - set description mint cuz it'll need that
121:38 - on line 3 uh6 for our loading State
121:42 - let's go ahead and uh render our loading
121:44 - State component for finished let's
121:46 - render our finished State component as
121:48 - well so with that said a lot of our toal
121:52 - functionality is now completed and uh
121:55 - let's Now work on the rest of this and
121:58 - get the whole thing done okay beautiful
122:00 - let's go ahead and now finish our
122:02 - minting feature and then we're going to
122:04 - get this ready this app ready to be
122:07 - deployed and shipped cool so let's go
122:10 - ahead and do that now so we're going to
122:12 - finish our mint function it's going to
122:13 - be an async function and we're going to
122:15 - say hey if the name doesn't exist or the
122:17 - description doesn't exist or the profile
122:18 - image doesn't exist return don't even go
122:21 - forur further um what we're going to say
122:24 - is we're going to say set status to
122:26 - loading okay let's do pinata metadata is
122:29 - equal
122:30 - to and we're going to set the name to be
122:34 - and let's do a template literal and
122:35 - we're going to say name Dash description
122:38 - of it okay now pinata is a awesome
122:41 - service so let's go ahead and set that
122:43 - up okay so let's go to pinata app. pat.
122:47 - Cloud make an account there if you don't
122:49 - have one already we're going to use this
122:50 - to store our ipfs image images okay so
122:53 - once you log in you go inside of it
122:55 - we're going to hit new key and hit admin
122:58 - and key name YouTube whatever you want
122:59 - to call it we'll just call it YouTube uh
123:02 - I just got my API key and API secret so
123:04 - let's go to our end local add our pinata
123:06 - API key add our pinata API secret boom
123:09 - boom boom add it there perfect let's go
123:12 - back let's uh do ipfs image hash and
123:15 - we're going to await this let's also
123:17 - create a pinata file inside of our lib
123:20 - we'll call it pat. Js
123:22 - and we're just going to create our
123:24 - constants of key and secret okay and
123:26 - we're going to pull them from our local
123:28 - environment so let's get our pinata API
123:31 - key pinata API secret and we'll import
123:34 - axios from axio as well and we will
123:37 - export our we'll we'll create a function
123:41 - okay it's going to be a async function
123:42 - it's going to take in some Json we're
123:44 - going to do um for URL let's use our pin
123:47 - Json to ipfs URL okay and then we're
123:52 - going to say return axus post give it
123:54 - the URL give it the Json and then we're
123:57 - going to say for the object we're going
123:59 - to give it headers pinata API key pinata
124:02 - secret API key okay so it's going to be
124:05 - we're going to give it that we're going
124:06 - to say once you return uh what we want
124:08 - to do with the response is uh we're
124:11 - going to get the response and ipfs hash
124:13 - okay and then if there is an error let's
124:15 - cash that error and let's print that
124:17 - error out and all the way at the end
124:19 - we're going to say export cons pin file
124:21 - to ipf fs and this going to be a
124:22 - function that's going to async function
124:24 - is going to take in a file and pinata
124:26 - metadata we're going to put our URL of
124:29 - pinata URL there at the bottom okay and
124:33 - then on line 27 let's go ahead and
124:35 - Define our data we're going to say new
124:37 - form data and we're going to say data.
124:39 - aen file and then we're going to give it
124:42 - the file and then we're going to say
124:43 - data. aen pinata metadata and we're
124:45 - going to do Json stringify pinata
124:48 - metadata okay so it's going to turn the
124:49 - entire Json into like a big giant string
124:52 - and then we're simply going to return
124:53 - this as an axio post and we're going to
124:56 - give it the URL we're going to give it
124:58 - the data then we're going to give it an
125:00 - object and for Max body length we're
125:02 - going to say infinity so as long as you
125:04 - want the body to be right and for
125:06 - headers we're going to say content type
125:07 - it's going to be a
125:08 - multi-art uh form data and then we'll
125:11 - Define a boundary and we're going to say
125:13 - just do a dataor boundary again let's
125:16 - give it a pinata API key and let's give
125:19 - it a pinata secret API key
125:22 - okay and then after and then we're going
125:24 - to do a do then on this as well and
125:26 - we're going to do a very similar where
125:27 - we're going to say hey response get me
125:29 - the ipfs hash and if there's an error
125:31 - get me the error now let's go back to
125:33 - our profile image mentor and we're going
125:35 - to import pjon to ipfs and pin file to
125:39 - ipfs from our lib pinata and then let's
125:42 - go to our line 27 in our profile image
125:44 - mentor and we're going to say ipfs image
125:46 - hash is equal to and we're going to pull
125:50 - our we're going to call our function pin
125:52 - file to ipfs we're going to give it the
125:54 - profile image and pinata metadata okay
125:57 - and this is going to return to us the
125:59 - ipfs image hash and so then we can use
126:02 - that in however we want now let's go
126:04 - ahead and click mint all right we're
126:06 - going to upload so the modal just popped
126:09 - up that's great let's select the file
126:10 - that we want to upload on there and uh
126:13 - we're going to say 46% of you are not
126:16 - subscribed fix that please subscribe and
126:19 - then we're going to click mint so now
126:21 - the mint process has begun okay and we
126:24 - can see at the bottom the network
126:25 - request says 200 it's okay we're sending
126:28 - the post request and we're getting back
126:30 - a response actually for ipfs hash and
126:34 - it's telling us what the ipfs response
126:36 - is and boom look at that we just
126:39 - uploaded a newly freshly minted image
126:43 - onto or to store our image on pinata and
126:47 - now it's actually being managed there
126:49 - okay and we there are hashes there as
126:52 - well this is the image we put up on
126:54 - pinata with the lock down you will have
126:56 - some time to rest I am a software
126:59 - engineer no time to rest for you fools
127:01 - grind baby all right so let's go ahead
127:05 - now and um on line nine in profile image
127:09 - Mentor what we're going to do is we're
127:10 - going to import our client from lib
127:12 - client so now this is our sanity portion
127:15 - and we're going to say client. Pat okay
127:18 - so and current account now let's
127:19 - destructure the current account as as
127:21 - well from our Twitter context so I'm
127:23 - just going to get that on line 18 let's
127:26 - go back to line 30 and we're going to
127:28 - say client. Pat current account and then
127:31 - do set profile image and we're going to
127:33 - set this ipfs image hash as the profile
127:36 - image okay and then we're going to do do
127:38 - set on that and uh we're going to say
127:40 - it's profile image nft is true okay so
127:43 - we're going to set that to true and then
127:45 - we're going to go ahead and commit that
127:47 - all right and then we're going to do
127:49 - image metadata and for image metadata
127:52 - it's going to be just an object with a
127:53 - name description and an image and for
127:56 - image we're going to say ipfs colon SL
127:59 - slash and we're just going to put in the
128:01 - ipfs image hash in there so we're going
128:04 - to have we're going to get the ipfs Json
128:07 - hash and how we're going to do that is
128:10 - we're going to do pin Json to ipfs we're
128:12 - going to call that function and we're
128:13 - going to give it the image metadata and
128:15 - then we're going to give it the pinata
128:17 - metadata okay so the keep in mind the
128:20 - image metadata actually contains that
128:23 - you know what we have on Line 39 where
128:25 - you have the ipfs with the image hash so
128:28 - that's going to be an important part of
128:29 - this and then let's create our contract
128:32 - and we're going to say get ethereum
128:34 - contract and all all the way at the top
128:36 - we're going to Define get ethereum
128:37 - contract and we're going to say async
128:39 - and we'll leave that function as an
128:41 - empty one for now and then we're going
128:43 - to Define let metamask all the way at
128:45 - the top and we're going to say if the
128:47 - window is not defined then metamask is
128:51 - just the window. ethereum and so in our
128:55 - ethereum contract now in line 18 we're
128:57 - going to say if metamask does not exist
128:59 - and return otherwise what I want you to
129:01 - do is uh set the provider and let's also
129:04 - get ethers too so on line 10 let's
129:06 - import ethers from ethers JS okay and
129:09 - let's make sure we do yarn add ethers so
129:11 - we can actually have that so let's go do
129:13 - that install it perfect now that we have
129:16 - that let's go ahead and do on line 20
129:19 - let's go provider is equal to new ethers
129:21 - dopr providers. web3 provider metamask
129:25 - then we'll get our signer and then we're
129:27 - going to create our transaction contract
129:29 - okay then we're going to import our
129:31 - contract address and our contract ABI
129:33 - from lip constants and we're going to
129:35 - pop that contract address inside of our
129:38 - transaction contract now let's go back
129:40 - to line 63 where we had created our
129:42 - contract so we're going to say await get
129:44 - ethereum contract then we're going to uh
129:46 - create transaction parameters it's going
129:48 - to be an object we're going to give it a
129:50 - two for contract address from current
129:52 - account and for data we're going to say
129:53 - hey await the contract mint and we're
129:56 - going to call our mint method and we're
129:58 - going to give it the current account and
130:00 - the ipfs uh ipfs Json hash okay so
130:03 - that's going to be our data then we're
130:05 - going to Simply await metamask request
130:08 - and we're going to pop open in send
130:09 - transaction and our params are going to
130:11 - be transaction parameters okay and then
130:13 - we're going to basically do set status
130:15 - to finished beautiful so let's go ahead
130:17 - get an avatar image let's download it
130:21 - and let's upload it and okay we got an
130:24 - error so not a problem let's figure out
130:26 - exactly where getting that error
130:28 - remember inside of your transaction
130:30 - contract let's do contract address
130:32 - contract API and signer so make sure you
130:34 - have that let's go and try it okay so
130:37 - let's go ahead and do let's import this
130:40 - so now let's try uploading the image and
130:42 - see if that works so let's try let's
130:44 - click let's upload it let's hit mint
130:48 - minting in progress whoa the metamask
130:51 - opened up and it says minting successful
130:54 - yo what the heck so we just got our
130:58 - minting function to work it is it did it
131:02 - successfully okay and uh let's just
131:05 - confirm really that it worked okay so
131:07 - let's go on open C let's type in my
131:10 - contract address and see if it popped up
131:12 - look at that that crappy Avatar that we
131:15 - just made is showing up on open C so if
131:19 - you think that is fantastic and you like
131:21 - that make sure you smash that like
131:24 - button okay make sure you smash that
131:25 - like button and uh subscribe to the
131:28 - channel while you're at it okay cuz this
131:29 - was huge so you just minted your first
131:32 - um nft most likely okay all right let's
131:35 - go back to our Twitter context and now
131:37 - what we're going to do is we're going to
131:39 - say hey get profile image get profile
131:41 - image URL we're going to create this
131:43 - function okay it's going to be async
131:44 - it's going to take an image URI and it's
131:46 - going to take in Boolean is nft and
131:48 - we're going to say if is nft then uh
131:50 - simply we're going to say hey if is nft
131:53 - else return image URI so if it is then
131:57 - simply return the pinata Gateway with
131:59 - damage URI cool and then the sanity
132:02 - response for each that we're working on
132:04 - let's go ahead and start filling that
132:06 - out as well so right above where it says
132:09 - cons new item we're going to add in our
132:11 - profile image URL we're going to say
132:12 - await get profile image URL and we're
132:15 - going to give it our item author profile
132:17 - image and the is profile image nft and
132:21 - for our profile image on line 132 we're
132:24 - simply going to just say profile image
132:26 - URL now let's on line 156 let's define
132:29 - profile image URL we're going to await
132:32 - our get profile image URL from sanity
132:35 - okay and uh we're going to extract it
132:38 - from the sanity response and we're going
132:39 - to extract the is profile image nft from
132:42 - sanity response as well and then on line
132:46 - 164 as well we're going to basically say
132:50 - we're going to change that sanity
132:52 - response zero if profile image URL to
132:55 - just profile image we're going to change
132:56 - it to profile image URL okay that's it
132:59 - all right and for where we said tweet
133:01 - dois profile image nft we're going to
133:03 - say tweet. author. is profile image nft
133:07 - and boom right when it detects that that
133:10 - image is indeed an nft notice it turns
133:13 - it into that like hexagon right so this
133:16 - is now working correctly so now if I go
133:18 - to my profile you can see that it's an
133:20 - nft
133:21 - and it is indeed working and now let's
133:24 - go into our profile tweets let's fix
133:26 - that so we're going to say tweet or
133:28 - we're going to say current account
133:30 - current account.is profile image nft
133:32 - okay so let's fix that and now let's
133:34 - just check out our app we can click home
133:37 - we can click explore we can go
133:39 - everywhere let's try to add in a tweet
133:42 - so let's grab this image all right let's
133:45 - put this in where I'm drinking some
133:47 - coffee let's see if we can mint it so
133:50 - I'm going to say mint select file drag
133:52 - and drop let's put that image right
133:54 - there we'll give it a title so coffee
133:56 - and the description is going to be new
133:58 - profile pick HUD this minting process
134:02 - has begun so let's see if that works
134:04 - holy crap metamask has just popped up
134:07 - let's confirm boom it worked right we
134:10 - saw the green check mark it said minting
134:12 - is successful and my profile images
134:15 - updated and take a look at it it has a
134:18 - hexagon so you know that that is a nft
134:22 - Image new profile pick Let's tweet this
134:25 - let's go ahead and tweet that oh man
134:27 - that is beautiful everything is working
134:30 - just as expected so we're very happy and
134:32 - now the last part of the puzzle we're
134:34 - just going to deploy this and let's hope
134:35 - that it works when we deploy this okay
134:37 - fingers crossed deploy yes set up and
134:40 - deploy perfect I'm going to choose
134:42 - clever programmer you can choose
134:43 - whatever you want link to existing
134:45 - project we're going to say no okay
134:47 - what's your Project's name and for our
134:49 - project name we're going to say Twitter
134:51 - clone YouTube okay where is your code
134:54 - located just right here just hit enter
134:57 - default options are pretty much the best
134:59 - do you want to override the settings
135:00 - nope okay do you want to all right it's
135:03 - deploying fingers crossed oh it didn't
135:06 - work okay no worries no worries that's
135:09 - super simple we're going to find a way
135:11 - to make that work oh let's actually
135:13 - update the environment variables as well
135:15 - let's go inside of verell let's go
135:17 - inside of clever programmer okay and I'm
135:21 - going to go into my Twitter clone
135:22 - YouTube that I'm working on settings
135:24 - let's go in environment variables and
135:25 - let's start grabbing our environment
135:27 - variables that we've had so here's our
135:29 - environment variable uh for pinata API
135:32 - secret let's go and add that in okay
135:35 - let's add the key as well the key value
135:38 - pairs okay and let's do the same thing
135:40 - for pinata API key let's add that in
135:42 - beautiful we're done with that let's add
135:44 - in our sanity token let's add in the
135:46 - token for it and let's add in sanity
135:48 - project and we'll add in the value for
135:50 - that as well perfect let's hit add so
135:52 - all our environment variables are now
135:54 - added now let's hit versel and boom
135:57 - would you look at that it was actually
135:59 - successfully deployed okay and we can
136:02 - even preview it so let's check it out
136:04 - and see if it works we're going to the
136:06 - deployed link so let's so you can see it
136:08 - says Twitter clone YouTube at the top
136:11 - right we can see that all right so let's
136:13 - click type it in let's go to it okay
136:16 - metam mask is up let's hit connect
136:17 - wallet so our mask wallet popped up
136:19 - let's hit connect our wallet it just
136:21 - connected okay boom We are on Twitter
136:24 - deployed online to verell with nextjs
136:28 - with metamask authentication using
136:31 - pinata blockchain I mean the stack on
136:34 - this thing is crazy sanity for our
136:36 - database the back in is absolutely
136:37 - amazing I mean if you put this project
136:39 - on your portfolio it it it will make you
136:41 - stand out so much this is so sick and I
136:44 - mean this Twitter is like the best
136:45 - Twitter out there right you even have
136:47 - the ads on the side wow awesome so
136:50 - hopefully you thought that was cool so
136:53 - there you have it we've now deployed
136:55 - this app and it is freaking online so I
136:58 - hope that you enjoyed that okay so
137:00 - that's it the app is deployed we use the
137:02 - best stack to make this happen you use
137:04 - nextjs for the front end Tailwind you uh
137:08 - you ended up learning about pinata hard
137:11 - hat solidity contracts how to create
137:13 - your own smart contract deploy it using
137:15 - the blockchain how to make it interact
137:18 - with your front end how to use matam
137:20 - mask and add authentication how to
137:22 - deploy this to versel and your app is
137:25 - working and you can actually mint this
137:27 - online you can mint your nfts you can
137:30 - tweet your sanity database is working I
137:32 - mean this was a phenomenal project wow
137:36 - what a wonderful ride I really hope that
137:38 - you enjoyed this if you did please smash
137:40 - that like button so this video can go
137:43 - out and help more and more
137:45 - developers I'm just so excited and um
137:48 - you know for the prize that we're giving
137:50 - away $200 in eth to one of you based on
137:53 - a thoughtful comment on why you want to
137:56 - become a blockchain developer and put in
137:59 - your wallet address at the end of it and
138:01 - I'm going to be picking the most
138:03 - thoughtful answers um and kind of at
138:06 - random as well out of everybody and
138:08 - we're going to decide a winner in one
138:10 - week okay that's it that's what we had
138:12 - for you hopefully you had a ton of fun
138:15 - and it was a wonderful process for you
138:18 - okay this was Cy from clever program.com
138:21 - I love your beautiful face and I'll see
138:23 - you in the next video and wait 1 second
138:27 - if you haven't checked out Unis swap yet
138:29 - and you buil Twitter with us you should
138:31 - go ahead and check out Unis swap it is
138:34 - freaking cool so I'm just going to leave
138:35 - that up here go ahead click that watch
138:38 - that and I'll see you inside there click
138:40 - it Go click it Go click it

Cleaned transcript:

in this video you will build the Twitter blockchain web 3 app with nextjs what's special about this one is we're following the Twitter's functionality where you can put your own nft and mint it and set it as your profile image so since Twitter decided that you can officially add nfts as your images and Link them to your profile we decided to show you how to build your own Twitter blockchain web3 app where you can do the same you'll build the front end with nextjs you'll style it with Tailwind CSS after you'll learn how to create your own smart cont contracts with solidity we'll then use open Zeppelin to ensure that your smart contract is compliant with the ERC 721 standard you'll use the smart contract that you created in order to Mint and deploy your own nfts I'll show you how to use a service called pinata as your interplanetary file system also known as ipfs to store your jpegs onto the blockchain you'll use hard hat to compile and deploy your smart contract we'll use the context API to manage our state inside of react I'll show you how to use the Alchemy API to use as your RPC URL with the Rinke test Network we'll then add authentication to your Twitter nft app using metamask we will use sanity IO as our backend database to store all of the tweets and the associated users with them the smart contract that you deploy with solidity I'll show you how to verify it on ether scan and I'll even show you how to use remix IDE to actually play with the smart contract you'll learn how to use Gro and sanity's API to retrieve your data you'll learn how to use the Rinke test Network which is built on the etherium blockchain will then deploy this app using versell and host your Twitter nft web 3.0 blockchain app on the internet now before we continue make sure you smash that like button and if you do I'm going to show you my brand new kittens playing with some feathers so go ahead Smash It smash it ah there it is here are some beautiful kittens playing with feathers one is name Cobra and the other one is Rinke are you excited I'm excited let's go all right let's go ahead and demo the app right now so you log in connect your wallet it'll show you pick whichever wallet you want and now you're inside of the app so at the top you can see that we're authenticated with metamask you can actually sign back out also when you go to your sanity database you can see that in the database your profile image is there and you can even change your profile image from the database it will tell you if it's an F image or not you can see all the other tweets that you have in there so boom I just uploaded a photo here let's go back and boom you can see my photo is actually right there and now once I hit tweet the tweet that I've done now actually shows up also what I can do is I can go mint an image so that image that I have let's go ahead and mint it so I'm going to go and select it we're going to give this image a title all right there we go the minting has begun all right wait for it wait for it and this is happening with solidity and smart contract track so you are making your own nft right here let's hit confirm after that popped up boom it says Min is successful and there you go that is your own minted nft image if you go to openc and the test net you can verify that it's actually a minted profile image that you just created yo freaking how cool is that guys if you're excited about that smash the like button and you can see the contract address you can see the token standard is ERC 721 okay so you can verify that it's actually real and in our sanity database it shows us that tweet and when you go to pinata which is going to be the thing that you use for ipfs management um your images you're that you're putting on the blockchain you're going to be managed through pinata and you can see that it actually gives you back this data verifiable that you're using ipfs to actually store this image let's go ahead and make another tweet right here we're going to say # new profile pick let's hit tweet boom that was tweeted right away I go back into rafik Kazi and you can see I have a new tweet that says new profile pick right there and then when I go inside of tweets I can see my tweet new profile pick and it's connected to Rafa Kazi as the author so hopefully you enjoyed the demo if you are excited I'm excited let's go ahead and start building this up all right I hope you're excited to build this app right before we start coding the Twitter nft blockchain app we're going to do one last thing last week I did a $100 crypto giveaway in eth and our winner was Brenda so congratulations Brenda on winning $100 in eth this week I'm also going to give you a challenge and the winner is going to get $200 in eth here's how this is going to work drop in the YouTube comments below right now why do you want to become a blockchain developer drop your number one reason for it I'm going to pick the most thoughtful comments and one of you is going to get $200 and I'm going to send it over to you an e make sure you drop why do you want to become a blockchain developer followed by your wallet address okay and I'm going to send you real $200 e in return best of luck with that said let's jump right into app and let's start coding it up what's up all right so build this app we're going to do it in three steps number one we are going to build the front end number two we're going to build our smart contract using solidity and then deploy it to the blockchain number three we're going to go ahead and build the back and using sanity with that said let's get started so I'm going to go ahead into my GitHub folder here here and we're going to go ahead and do npx create next app just like that and because I want Tailwind I'm going to do dashy I'm going to say with Tailwind CSS and then just whatever you want to call it so in this case I'm going to say Twitter clone blockchain and let's hit enter all right the next thing you want to do is you want to go to sanity.io clever programmer here's the URL and this has all the instructions for you so if you haven't installed sanity yet make sure to do npm install Das G sanity CLI it's very important so let's go ahead and do that if you haven't done that yet make sure to go and paste that right here in your command line since I have it installed already I'm not going to hit enter but you should hit enter once you have installed that let's go inside of our studio next command you need is this one that says sanity init dCON clever programmer it's very important that you actually write that because you will get a ton of free stuff 200,000 API requests 1 million API CDN basically just use this command make your life a lot easier let's go here paste that in and hit enter now once you do that it should say something along the lines of coupon clever programmer validated so you should be good to go on that end for the project what we want to name it is we'll say Twitter blockchain app so it'll create that project for us we will hit enter on the default uh configuration and then it says where do you want the output we want it where it's suggesting currently so that's perfect so just hit enter and then what type of schema do you want let's just pick a clean schema with no predefined configurations and once that is done and set up then we're ready to start working on our front end cuz remember that's the first thing that we're going to build and then we're going to move on to other things all right there we go success so now sanity is installed our studio is set up so if you go to Studio here on the left hand side you should be able to see all of these things installed right there we're going to come back to our smart contract later for now we're going to get into our client and we'll start building our app up with that said let's start working all right now let's start working on our homepage let's go to C let's go to pages and this index page let's go here now this is the page that's showing up right up here right so for example if we go to where it says get started by editing or nextjs right over there if I change that to something else you'll notice that that Fifi just popped up right there right so we want to remove kind of everything that's inside of here so let's go ahead and do that and I can just replace this with div and inside of this div I'm going to have a couple of things so let's go ahead and do H2S and I'm going to basically say this is going to be my sidebar component I'm going to turn these into components afterwards this is going to be my feed component and then this next one will actually be my widgets component these are the three components uh that I'm going to work on and this will have a certain styling as well but we'll work on that styling afterwards for now we'll just start off with this file being completely empty let's create some stylings for this so I'm going to go all the way at the top here and I'm just going to say con style and we're going to create an object I'm going to create a wrapper and this wrapper I'll basically say Flex justify Center give it the height of the screen the width of the screen and then what I want to do is say select none background color we're going to give it a specific background color in this case so I'm going to say kind of a dark color there and then text we're going to have white that's inside of here so that is my wrapper and then outside of my wrapper I'm going to need to have something in my content as well so let's go ahead and create that content so I'm going to say in my content we're going to have the following so my content is is going to have a Max width of, 1400 pixels width will be 2/3 flex and then we'll justify between why am I making it like this well you'll see in a second but essentially if you look at the real Twitter everything is in the middle just like this and then we specify space between so that's effectively what we're going to be doing with our Twitter setup all right so now what we're going to do is we're going to go ahead and add the wrapper around it so as soon as the wrapper gets added you see the whole theme kind of take place and then all we're going to do is add the content styling so once we do that you can see it's broken up into these it's Center and what's nice is that it has that justify between in between each of these right and it's equally split up no matter what size screen I make it right so this is exactly what we want cuz that's how we want our feet to be that was easy to do right with Tailwind CSS and this we we got to that part really really quickly so from here let's keep going and we're going to start building our sidebar component now let's go ahead and make a new component so I'm going to go ahead inside of my client create a new folder called components inside of this we're going to create a component and it'll be called sidebar actually you know what we don't want to run into any errors Let's uh name it a JS file let's just do all of our files let's just call them JS and then we'll go from there and then if you run into any errors I'll just show you how to fix them so there's an error happening here we'll remove this line import type app props just remove that and remove this colon and where it says app props remove that okay beautiful errors are gone and now we have our sidebar component just like this one of the things we're going to need for our sidebar component are icons so you can see we have this icon all these icons right here so let's just go ahead and make sure we install our icons all right so I'm going to open up go back let's go inside of our client I'm going to just say yarn add react D icons just like that and uh once these are installed you'll be good to go for all of your icons that you want to use one more thing we want to do is let's go to our index and instead of doing this H2 what I'm going to do now is is we're just going to do our sidebar component and close this off and all the way at the top let's go ahead and import it so we're going to say import sidebar from components slidebar just like that now we should get an error that's perfect this is where we want to actually start working on our component sidebar now all right so let's start working on this sidebar component now so I'm going to make sure that I'm exporting default sidebar let's create a function called sidebar as well and I'm going to leave it blank for now because I want to actually style this as well in just a second but there's some important Imports that I need to get so I'm going to need to get my horizontal icon and VSC Twitter icon so what are these icons these are like this type of Icon right there the next thing I'm actually going to do is we're just going to quickly kind of style it because remember styling we want to move through it faster so we can get to the really interesting blockchain Parts as well so for styling we're going to have a wrapper and why is it Flex call you you might ask well it's because so this can be in a column like like this that's why the flex call then we're going to have a Twitter icon container so we need a container to contain these icons that's going to have a text large 3XL so then the icon actually looks big and a margin of four so there's a like this can have a nice little margin we're going to need a tweet button so this is the styling for it I'll scroll here and you can pause if you want to copy this but essentially what this does is this is going to be this going to get us this button right there we're going to have a nav container with a flex of one so that na container takes up the whole space we're going to have a profile button and for everything when you hover over it's going to have this special effect so that I'll show you how to add that as well let's keep going for now for the sidebar we're going to have a profile left so that's basically the stuff down here okay that's that stuff down there so that's where that shows up we're going to have a profile image this is going to be rounded so in the actual Twitter app you see how this is rounded at the bottom right there that's effectively what we're trying to achieve with this height 12 width 12 12 rounded full profile right this is so it takes up a bunch of space as much space as it needs and then details will have a flex of one and name will have text large handle will make this special color right there that's this like grayish color at the bottom that you see and we'll have a more container so that's this guy right there so this is the styling that we're going to be needing for this now for the Side Bar the other things we actually need we're going to create a wrapper inside of this we're going to have our Twitter icon container and we're just going to put our vssc Twitter inside there so let's go ahead and refresh and see what we have here so you can see just our VSC Twitter is showing up perfect then we're going to have our nav container and we're going to put home explore we'll put notifications messages bookmarks lists profile more and of course we're going to put our our mint button our tweet button right underneath it so right now it's taking up a lot of space but remember it's cuz it's Flex one and once we have something in the feed that's going to push the mint button button back to over here so let's keep on going then we're going to add our profile button and inside of here we're going to add our profile left and then in our profile right we're going to add the following the details so name clever Cy for example which is showing up right here at the bottom and our handle just like that and then we're going to have a more container and that's going to be this container right there that little dot dot dot styling next up what I'm going to do is I'm going to create a sidebar option component and what that's going to do is it's going to allow us to when we hover over it it's going to highlight it it's going to be able to show all of these icons next to them and uh it will essentially do what we're looking for and then when you click notice how it changes right messages bookmarks notifications all of this changes as well so let's go ahead and create that component all right let's go ahead create a new file we're going to call it sidebar option. JS so let's start working on our sidebar component so let's create our function sidebar option sidebar option it's going to take in a couple of things it's going to take in text the icon whether it's active or not currently it's going to take a hook that allows us to change which one is selected and then we're going to need redirect so we can redirect to different pages based on if you click profile or you know something else or home let's export the sidebar option as well and then let's go ahead and style this so we're going to add a wrapper we're going to have a minimum width for it we're going to do a flex on that enable Flex box make sure it's item Center we're going to give it a specific rounding and U let's give it a little bit of P on every side of four cursor pointer so when you hover over it it looks like a mouse all right we're going to give it a hover so when you hover over it it becomes slight gray and then we're going to add in a transition it's going to take 200 milliseconds and it's going to be an ease in and ease out effect basically what that will feel like is when you hover over it should have this little nice effect right so that's that then let's have our icon container that's going to take care of our icons right we're going to have our text General so that's going to be our font uh font medium so what this text looks like here we're going to have our text active so for example if this is active you can see Explorer changes and becomes a little bit Bolder when I click notifications it becomes Bolder so the icon changes and the text changes here as well so that's actually what's happening now let's work on our sidebar option component and we're going to create a div so this is just one div right here we're going to create a wrapper and then we need a method for on click so on the click what we're going to do is we're going to set the selected text to whichever one you selected let's create another div and this is going to be icon container so this is going to be this part right here and we're just going to put the icon inside there and then we're going to have another div here this is going to choose different styling it's going to choose either text active styling or it's going to choose text General styling and that's just based on whether the selected text is active or not and uh then all we're going to put in there is whatever the text is so this text right here for example we plug in right there all right so our sidebar option comp component this is our sub component this is somewhat good to go now all we got to do is actually go to our sidebar and use it so what we're going to do is everywhere that we use just this regular div we're going to start replacing that with our sidebar component so let's replace this div delete this here and I'm going to say sidebar option and let's close this now sidebar option we just you just got to make sure you're exporting it and we are so it's like why isn't it importing it here no idea let's just go ahead and manually add that in so we're going to say import sidebar option from we're going to say components oh actually it's right next to us right so we can actually just say sidebar option just like that and that should be good to go okay now let's go to our app and let's see what is happening refresh and we're having an error let's comment this out let's see if we still have an error Boom the error goes away and let's bring this back and the error comes back so let's go ahead and solve what this error is about the reason why we're getting this error is because we're not passing in any methods to this right so if I go back into my sidebar option I'm not passing in text I'm not passing in icon or is active I need to actually start passing those through on top of that I need to actually keep track of my state so for example this state over here when I click to keep track of that state right so how I do this is I need to actually have selected and set selected I need to keep track of that state now we're going to remove this from a typescript version and we're just going to make it very basic and for now I'm just going to like hardcode in home but what we actually want to do is we want to take in an initial selected icon and uh for now we'll just default that to home and you can put that right there that's going to be our default it's just going to be home that's what you pass into sidebar let's take a look it says use state is not defined no problem we're going to go ahead and grab UST state so I'm going to say import UST state from react so now UST state is good to go now it's back to complaining about this component not having what it needs so let's start giving this component what it needs all right so let's go ahead and start working on the sidebar option so we're going to give it icon and in icon I'm going to ask it the question hey is a selected one home if it is then show me the Twitter icon or if it's not show me the Twitter icon so right now I'm just kind of hardcoding the Twitter icon in there we're going to use different icons in just a second next up I'm going to say hey make the text home so you can already see that that text is popping up as home next up I'm going to say hey is active is going to be the following it's going to be a Boolean because we know we need to return a true or false at the end of the day right and for selected what we're going to say is check if it's home and if it is home it's going to just simply this whole thing is going to return true or false so we're just going to hit save on this we're going to need to add routing to it as well but we're going to do that later all right now we're going to need access to a bunch of icons so let's go ahead and get those because we need access to our hashtag or Bell or mail but not just the mail right we need the active mail and the regular mail we need the active Bell and the regular Bell we need active hashtag and the regular hashtag so this is two icons this is two icons this is two icons right so it's if we have 1 2 3 4 5 6 7 8 here we need to get a total of 16 icons let's go ahead and get those right so I need my I'm going to do this you can actually see it my home line home fill and list fill I need my byash from react icons by I need my bell I will need my out regular mail and my mail with outline okay I'm going to need these ones over here need CG more as well so these are all of the icons you're going to need for this now instead of where it says vssc Twitter I actually need to replace this with r iome 7 fill and we need to replace this one with Rome 7 line so let's go back go ahead and refresh see what this error is about duplicate binding so let's see where we have a duplicate oh yeah so we don't need F find more horizontal here I'm going to remove that so then we can just have Bell perfect so now the error is gone and you can see when the home is selected this is it's going to be using the fill one and when the home is not selected it's going to be using something else so for example if I change the initial state from home to let's say house let's refresh now that's not the initial State anymore so you can see it's using the different one so let's bring that back now let's work on our explore option sidebar option so let's go ahead for the icon ask the question is the active one currently explore if it is then show me the fa hashtag otherwise show me the buy hashtag text for that one should be explore we're going to see if it's active so for example this should return true or false if this is the selected one currently and then send over our selected hook as well and and boom we're good to go and now I'm going to remove this Explorer from here we're going to do the same thing for notifications let's also add one in for our messages for bookmarks lists we'll do one for profile as well the only difference between the profile one is that we have a redirect to a slash profile and we want one for more and now let's go ahead and take a look at our app says BS bookmark is not defined so let's go ahead and just add it in let's go here boom we just added in our BS bookmark bookmark fill BS person BS person fill those are all the ones that we actually needed okay let's refresh and TDA all of them are here exactly how we want them if you're wondering why it's looking like there's too much Gap here it's just cuz I'm zoomed in a lot so if I zoom out it actually just goes back to being normal perfect and now watch this when I hover over boom when I click these boom it it selects them look at that look at that look at that look at that so nice so nice and easy so we got this error earlier for this icon CG more one sidebar option so let's just pass it a set select equals set selected let's just pass it that function and now it doesn't complain anymore okay perfect that error is gone so now our sidebar component is looking amazing and it works look at that look at how nice that is now you can take that component to the bank now that we're done with the sidebar go ahead and smash that like button turn it white or turn it blue cuz look at how freaking amazing that looks all right so you should be proud of yourself if you built it or proud of yourself if you just watched me build it cuz both are cool but that said we're going to move on and start on our post function which is going to be this guy right here so get excited and I'll see you there all right let's go ahead and work on the feed component a feed component is going to have all of these inside of there it's going to be the parent for all of them so I'm going to go in components we're going to create a folder and we'll call it home and inside of home we'll create a new file and I'm going to call this feed. J yes and now let's start actually working on this let's just go ahead to our index and add it there so remember we had this H2 right there right for feed boom we're going to go ahead and uh remove that H2 and we're simply going to say feed just like this and we're going to import it from the top as well so we're going to say import feed from and we're going to go into components and then we're going to go into home and then we're going to say feed just like that now your app will crash but this is exactly where we want to be so let's go inside of our feed component now and let's start working on it we're going to export feed Let's uh create a function feed and we're going to return something we'll just leave it blank for now okay next up let's import our BS Stars icon cuz we're going to need that and then let's work on our styling we're going to need a wrapper we're going to need to style our header and make sure it's sticky and at the top and we're going to need to style our header title so it looks bake and bold now let's start working on our feed component here so we're going to have a div and we're going to use the uh style wrapper so basically this one right over here next up we're going to need style header and then inside of that we're going to need our header title and just put in home and then put in our BS star now let's take a look at what we've got let's go here refresh and you can see our home is showing up which is exactly what we're looking for boom our home shows up right there it's taking up all this space perfectly and that star icon is showing up and uh let's go ahead and remove these cuz that's not needed and that should be perfect all right let's go ahead and make our tweet box component now so inside of home we're going to do new file we're going to say tweetbox DJs just like this all right and before we start working on our tweet box let's go ahead to our feed and uh we're just going to add in our tweet box and I want to add that in right underneath this div right here and I will simply say tweet box just like this and for importing it going to say import tweet box from and uh it's right next to us so we'll just say tweet box just like that okay now our app should break that is totally fine and now we'll start working on tweet box now let's work on our tweet box component let's get to work so first thing that we're actually going to go ahead and do is we're going to go and create a new component inside of our home folder called tweet box. JS then hit ra Ace and hit Tab and it will autocomplete this let's go back to feed. JS and in feed we want to add our tweet box why because we want it to show up on our home screen all right so it will the Tweet box is not defined that's the error you should get now make sure you import tweet box right at the top okay so let's go ahead and do it once we're done let's go back to tweet box let's just paste The Styling in this will be our styling for everything okay so you can go ahead and take a look at the styling that you have all right so now that we're done with the styling cuz we need wrapper tweet box left tweet box right profile image so on and so forth let's go work on our tweet box component so let's create a wrapper first now inside of this wrapper we're using the wrapper styling here for that okay and that wrapper is going to show up all the way at the top it's going to wrap our entire tweet box let's add in our tweet box left styling because what is going to be on the left hand side of the Tweet box right that's going to be our image for example so let's add in our image tag and we'll use our profile image so I just went grabbed an image of myself popped it in right there and we're going to use the profile image class for this now that we're done with the profile image on the Tweet box on left hand side side let's go ahead and work on the right hand side now we're going to create a form this form is going to have a text area and the text area is going to contain an input field style so you can see already how that's showing up we're going to say what's happening as a placeholder now let's import use state so right underneath the Tweet box we need to actually keep track of the tweet message and so let's go tweet message and set tweet message and then let's go ahead and add the value of the tweet message and let's go for the on change and let's space basically say hey on change set the Tweet to be whatever the user typed in so for example we're going to console log this and you can see that as I'm writing smash that like button if you haven't already and sub to the channel you can see it just being listed out down below right that's the exact thing that we're after here next up let's create a form lower container and inside of it put our icons container and then we're going to basically create a button for tweet and let's actually style that button and we're going to say type submit last name for it is going to be submit General so if the tweet message exists then make the button bright blue if you have nothing written in there make it dark blue right so for example you can see what's happening here right now nothing is written so nothing is shown as soon as I start typing that blue button becomes activated right that's perfect that's exactly what we're looking for here next up let's work on our post Tweet function and how this will work is on click when you do post Tweet it's going to actually post the Tweet it's going to call the post Tweet function so watch what happens type type type I'm going to hit tweet boom it just called the post Tweet function and however one thing that happened is it refresh the page we don't want the page to refresh so let's go ahead and do event.prevent default this will stop the page from refreshing when we hit Tweet now hello has been printed out now let's go to the top and we're going to basically add in a bunch of our icons here so for example our BS card image our R file GIF line or iomd calendar and all we need to do now is go ahead and add the icons that we just got let's go to line 48 here and I'm going to add my BS card image inside of my icons container and then we're going to add all of our other icons as well so let's go ahead and do that now boom let's add in all of our icons and let's give them our style. icon styling that we created at the top and there you have it the Tweet box is looking absolutely phenomenal if you got to this part you're absolutely crushing it let's work on the next thing now all right now let's work on the functionality to add your ire feed there meaning all of the tweets that you have made should show up somewhere right and listing them all out let's go ahead and do that the first thing we're going to do is let's go ahead and create tweets tweets is going to be an array of objects and it's going to contain the display name Cy the username will be your wallet address the Avatar will be you know just link your photo text in this case going to be good morning GM and his profile image nft false because by default we're just going to start off with a image that's not an nft we're going to just hard code put this timestamp in this is just so you know we have something in there this is how sanity stores timestamp so that's why we're storing it in that particular format by the way and then we're going to go ahead and just add a couple of more tweets to that so let's go ahead and copy that and paste it a few times so that way just populates it shows us that we have a few tweets now I've just collapsed the box so you can visually see everything and now let's go on line 57 and we're going to map through all of these tweets that we have made so let's Loop through them and we're going to start showing those tweets the next thing I want to do actually is inside of our components I want to make a component called post. JS okay so let's do rafc and do it boom now let's come back and let's put post inside of our feed that way We're looping through and each post is going to be its own component essentially so that's why we need to work on that let's go ahead and import post from the top and inside of my post I need to give it give it a couple of things I'm going to give it a key of index display name is going to be the tweet display name the username is going to be the Tweet username the Avatar the text the Boolean of is it a profile image or not a Tim stamp as well and now let's go ahead inside a post and make sure that we go ahead and destructure display name username text avatar timestamp is profile nft and after we're done restructuring that let's go ahead and add some styling to this so we're going to go ahead and copy um and add a whole bunch of styling all at once because we just want to move through the styling kind of quick so we can get to the blockchain part faster okay and there you go you can write down that sty styling now let's go on line 23 and we will go ahead and create a div for rapper then we're going to have another div and inside of that we're going to put our image let's just go ahead and say if it's a nft image then it should have a styling like a hexagon styling otherwise it should just have a regular profile image styling all right because on Twitter things look like the ACT if you have an actual nft image it has a little hexagonal shape so that's all we're doing there all right now let's go ahead and make a new folder this folder is going to be called lib and inside of lib we're going to create our hex styles.css and we're basically going to paste all of this styling for our hexagon and uh we'll try to full screen it for you so you can uh grab it and what we'll also do is we'll link you the stylesheet so you have access to this as well H and if you need to kind of copy the style sheet you can and remember the source code is always down below always put the repo Link in the description of the YouTube video you can always just go ahead grab all of the styling that we've put together for you and uh grab the styling from hex Styles and use it for yourself all right now let's go to our app.js kind of at the root level and what we're going to do is we're going to add our we're going to add our lib from our lib we're going to add our Hax styles. CSS that we just added all right so if I just hardcode true there you can see that everything has this hexagon styling so we're using that small hex Style so this is basically showing it's an nft image and if it's not a true nft image it will just show it as a circle okay so only the real authentic nft images will show up as hexagons next up we're going to go ahead and create our Post Main and inside of our post main we're going to add in a div and inside of that we're going to create a span which is going to be header details okay and this is going to display the name and let's give it a styling of name so it makes it bold and then if uh the image is an NF T then we're basically going to do the following we're going to go ahead and import an icon which is fill Pat check fill which is essentially just a check mark and we're going to get that from react icons and we're going to basically say hey if this image isn't nft then what I want you to do is put a check mark next to the name so we're just going to say that's how we're basically going to say somebody's verified we're going to add in the styling of verified and so if we hardcode it look at that boom and now we have the verified badge all right and now next up what we're going to work on is let's go ahead and add our handle and time ago all right and we're going to say username and then we're going to put that little Dot and uh then what we're going to do is let's add time ago okay this is a library so let's do yarn add time ago at the bottom time ago. JS so it's going to install that and then at the top let's go ahead and import this okay so we're going to say import format from time ago. JS this is so that when it writes out time it looks super nice so let's go here and let's add in our time ago and we're going to say format it to new date timestamp and then let's do do get time at the end of it so now it's saying one year ago it will write it it will basically take whatever that time is right so if you read that boom that time is 2021 right 2021 2020 was it's saying a year ago if I say 2021 and change that date it's going to change what that time ago is saying so let's refresh the app and you can see that at the right hand side it says 9 hours ago right look at that nine hours ago boom and it's basically taking it from that ugly syntax of the date and time stamp and it's making it so beautiful and human readable right that's the point of it that's what you want so let's go ahead and change a couple of dates around so now we have 3 months ago 2 months ago and one year ago so on and so forth that's what we want so that's what you should have in your post so far let's go and add a couple of more things a few more things that we actually want to do now is our address if you look at it it looks very long we don't want that we want to make our address a lot smaller so now what we're going to do for our address is let's go ahead and username we're going to make it we're going to slice it so we're going to make it a lot smaller okay and that's going to allow us to slice it we're going to say get us the four strings first four strings then put dot dot dot and then get us the rest of them all right so we're basically going to say hey get me from 0 to 4 and then we're going to say tweet. username do slice and we're going to go ahead and say 4 at the end Okay so that's what it's going to do 4 basically means get me from the remaining four numbers so in other words you could have also done a 36 and that should have been also fine or you could do a ne4 ne4 just wrap wraps around and goes it starts counting backwards so it goes D f43 and that's your 4 all right let's keep going if you look at the component right now if you look at how post is looking it's looking good but it's not quite there yet right so let's go ahead and add a couple of more things cuz you also need to be able to show the s so let's work on that now both of these are in Span tag so let's go and do them correctly here let's move that up so they're all in one span tag and then we're going to go and create a new div and then we'll add text in there so now it says good morning we're going to style it like a tweet so that styling all it's doing right now is it's taking our tweet yeah and it's adding some margin at the top and the bottom giving some spacing around it so now this is the post is looking like a real post actually the post component so that's a great sign next up let's add a footer let's give it a styling of footer let's create a div and inside of that what I'm going to use is I'm going to use a comment icon boom and let's import that at the top and let's get that from react icon slfa so we got our icon going there and uh after that let's make sure we put it in a footer styling wrap that again in footer icon and then give it a hover because on Twitter when you hover it should turn like blue or green or something along those lines so we're going to add a hover effect on it and we're going to say make it a certain color when you hover over it and also color the background as well so now watch what happens when I hover look at that nice little blue effect that actually happens right that looks gorgeous let's make the background now hover over it there we go we got that light blue action going on and now let's start adding the other icons and repeating the same process again and again so we just added the comments now let's add the retweet give it some colors let's add the AI outline heart give it some colors let's add the FI share give it its own colors and we should be good to go there let's make sure that at the top we import all of these icons so let's go ahead and do that now yep so we got all the icons and now T watch this right when I hover over it it looks great fantastic awesome so great job building this component let's start working on the next component all right now let's work on the widget component this is going to be what goes on the right hand side this will make the app look super realistic and also this is a place where Twitter's will sometimes show ads things of that nature so let's get to work on building this widgets uh component here's what we're going to do we're going to go ahead inside of our components we're going to create one called widgets. JS all right inside of it let's go rafc so we autocomplete our widgets component let's go to our index.js and let's make sure that we're using widgets and let's go ahead at the top make sure you're importing your widgets component as well so let's go and import it perfect now that's done let's go back to our widgets component start working on this add in our our styling so there's a ton of styling we just added it in right there now that we added in all of our stylings let's go ahead and Li and make our folder called Static this is where we're going to post our static data let's go ahead and get our static data in here so boom let's add that in perfect okay all right again all of the static data and everything remember the GitHub repo is there so you can always get this data from there and post it into your own static folder okay so remember Link in the description check it out go to our lib go to our static pull this data paste it you should have the same file as us so now that we got the static data let's go back to our widget component let's import news who to follow from lib SL static and the second thing we want is BU search as well all right so now let's add a wrapper okay inside of this wrapper what we're going to do is we're going to add the search bar and then inside of here let's add our byy search icon we're going to give it a class name of search icon and then let's add an input with a placeholder of search Twitter so now boom there it goes okay you can see it right away and let's give the input a class name of input box okay so now it looks clean you can see search Twitter in there you can see that icon in there that's perfect and then let's go ahead and add a style section and we're going to say what's happening in there and we're going to title so what's happening you can see it and then for the news we're going to go ahead and map through our news that's why we're building the static component right so let's map through the news we're going to give it an index and then for class name I'm going to say style item okay we're going to create another div with news item left it's what's on the left hand side and we're just going to pop in the item category and we're going to pop in the item title let's add in the class names for them news item category and news item title boom there you go so now you can see that the news is looking pretty good the only thing it's missing is on the right hand side it's missing an image so let's go ahe and work on that let's create a div inside of that we're going to do news item right for styling we're going to add in an image and we're going to say item. image let's add in in news item image styling so now the image looks really clean perfect and then let's add in a show more section all the way at the bottom let's go show more let's style it like show more so it has a link to it and then we're going to go ahead and do style section inside of that style section so we're now going to basically create another section we're going to add a title in there of who to follow and then we're going to go through our who to follow array and basically show all the people that we need to follow so for the styling let's go ahead and create a div with items style and then another div and inside of that I'm going to create my image inside of that we'll create a few more divs here we're going to have a follow Avatar container and we're going to show our Avatar so now our avatars are looking good showing up and then we're going to show the item. name and item. handle in this case it's user.name user. handle but item is fine let's make sure we use the styling of name and then we're going to use the styling of handle so it's starting to look prettier and then for our image let's go ahead and uh do the styling of follow Avatar let's create another div on line 71 here and let's add in our follow button oh whoops let's do style that follow avatar on line 64 so now the styling looks way better right like that looks juicy guys and it's already starting to look super pro so great job if you're following along thus far on line 67 let's add in another div for profile details all right there you have it you have created your own widgets uh you've created the search bar on the top right for search Twitter you have created the what's happening section and the who to follow section both of those on the right hand side are completely built out great job let's go ahead and start moving on to the next piece of the puzzle what's up guys how's it going so a little bit of a switch here I'm at a hotel in San Francisco but no worries let's go and keep on working on our app so let's start by working on our profile page let's go ahead and get started coding okay so in order to work on our profile page here's what we're going to do in Pages I'm going to add a new page and it's going to be called profile. JS let's hit rafc so we autoc complete and add in all our profile stuff let's go ahead and add our styling now for the profile page and after that let's add our wrapper okay now let's go back to our sidebar and in sidebar let's import link and the reason for this is we want to be able to go back and forth between pages so in nextjs using link allows you to quickly and easily without refreshing your page or even using routing you can switch from page to page which is really nice still in sidebar what we're going to do is the following now we're going to go to sidebar option and in sidebar option let's add our use router and then let's add in our router on line 11 and what we're going to do in our on click is when you what we want to happen right is if you click profile or something along those lines we need you to be able to go to that page and so when you click the selected text let's do router. push to the redirect okay and we're going to be getting the redirect from our sidebar okay and we're deconstructing it so we have access to our our redirect so basically if the redirect exists then just do the redirect okay that way if we click profile notice how it just takes you to the profile page that's what we want there okay now let's go back to our profile component we're going to add in a div inside of our wrapper and we're going to go ahead and style it give it our content styling and then let's import our sidebar and we're going to also import our widgets once we do that let's just show our sidebar and and then inside of our sidebar let's or actually outside of our sidebar what we're going to do is add in our main content and that's where our profile header and our profile tweets are going to go okay so let's make inside of components you know how we have a folder called home let's make a new folder called profile because home represents all the components you have on the homepage and then profile represents all the components that you have on the profile page we're going to call it profile header our first component let's go RFC so we autocomplete the component then let's also add in our next component which is going to be profil tweets. JS let's also autocomplete that so that's great and now going back to our profile let's just add in our profile header and profile and let's make sure we import them from the top once we're done with that inside of our profile header we're going to go ahead and add in The Styling for profile header so that way all the styling is there and available for us to use and feel free to pause the screen at anytime if you want to get access to it or remember all the styling will always be available for you in the source code inside of our profile header let's add in our wrapper and inside of our wrapper let's add in our header and in there we're going to add another div and then within that we're going to add in our icon for the left Arrow okay that div that we added let's give it the styling of back button okay and then we'll also add an on click to it which is basically going to say if I click it take me back to the homepage all right so that is super super nice and then let's go okay it says we don't know what router is no worries let's go ahead and lowercase our R and add in our router all right now let's go ahead and we'll add another div online 29 and we're going to say class name will be style. details okay inside of that we're going to have our user for we can just hardcode names for now so we'll just say Rafiki we'll say four tweets right here okay and let's give our name style. primary and then style doc AR for the tweets so now it looks kind of like a real tweet let's add another div and inside of there we're going to add an image for the background so let's I basically pasted you know an image that is 1,500 by 500 so if you Googled images of 1500 by 5 you can just pull them and put them on here that'll be the banner okay and then let's go ahead and add in a photo container wrapping around that image so it fits kind of nicely all right let's go ahead and now make our profile image container and within that we will add in our profile image actually let's go up at the top and we're going to remove that what we're going to do is on line 24 let's go and add in is profile image nft and we'll set it equal to false for now why I was doing this is we're going to have some Dynamic styling and The Styling for this div on line 46 is going to be based on if it's an nft then do the hex styling otherwise do the default profile image container styling so now we're going to add in our image let's go go to one of our static images that we have in our feed. JS let's copy that from there and let's go ahead and add that in okay awesome we're adding that to our profile header okay we're going to give it a class name is profile image and and look at that how nicely it fits in right with the background and nice Circle pops up at the top and we're going to say if the profile image is an nft then do nft styling otherwise do regular profile image style so watch what happens when I make the is profile file image nft true as soon as I do that look at that my image becomes a hexagon okay all right let's go ahead and add some details now so let's create another div and we'll create it style. details we'll have another div within that okay and we're going to do style. primary and then we're going to do style. secondary okay all right let's go and make our current account and for now what we're going to do for our current account is copy it over from one of our hardcoded accounts and then let's put that there so let's just make sure our current account is something like 0x8 CD blah blah blah you can put whatever you want there if you have some static data you can lump that in there and in our style. secondary on line 64 we're going to add in jsx or curly braces and then within that we're going to say hey if the current account is there okay so basically we're checking if the current account exists or not okay so if the current account exists then all I want you to do is show me the current account and show me the first eight strings and then put dot dot dot and then show me from the 37th string and so forth okay you could also do like4 neg5 or something so there you go you can see what that's doing at the top right right underneath my name where it says Rafiki cuz this is conditional rendering cuz if the user doesn't have an account name then don't show that line 70 let's go ahead and add a new div we're going to make it style. naav and within that what I want to do is say for active nav we're going to put Tweets in there okay okay and then we're going to say tweet and replies media likes kind of just like how we have on on Twitter when you go to a profile page so all of those things are there perfect now let's go to our profile tweets and our profile tweets will add in some styling so we added in some styling for our rapper for our header so we can make it sticky for header title so the text can be large and from our feed let's just copy all the tweets let's go to our profile tweets and just add in those hardcoded tweets that we added earlier okay and then what we're going to do is on line 47 let's add in our wrapper okay and then we're going to Loop through those tweets so we're just going to Loop through the array of tweets and for each tweet for now let's just a post component and at the top let's import post from post okay so as you can see it's like starting to show the post component right even though it's missing a bunch of props so you can't see the image there you know and you can't see what the Tweet is and you can't see like when it was sent but you're able to see something the post component that we had made earlier is now being used here this is something we love about react it makes our life so much easier inside of our post let's add in our key and give it a index as a key for the display name we're just going to say RAF Kazi so let's just give it all the props right username we're going to basically say tweet. username and then we're going to slice it again all right and for tweet for text we're going to say it's whatever the text is inside of that tweet let's give it an avatar let's give it a Boolean for is profile image and is it false or is it true and let's give it a timestamp okay so once we're done with that our post is now showing up saying it was done 10 hours ago and whatnot so there you have it amazing job if you've completed that and now your profile page is pretty much complete so nice work let's keep it going all right time to create and deploy your smart contract so let's just go right into it now let's go inside of your smart contract folder so from your command line switch to your folder smart contract and in your smart contract folder what I want you to type in is npx hard hat as soon as you do that it will install and create all these files for you and then what I want you to do is once that's done go inside of your scripts folder inside of your smart contracts you're going to have something called scripts so what I want you to do in there is rename the script that says sample script to deploy tojs and in there what we're going to do is we're going to remove a bunch of the code that's there what we're going to be doing is we're going to go inside of our hard hat. config file and for from that file pretty much remove everything except for line 17 through 19 and line one okay so remove almost everything in the middle we're going to do it just like this and for our module. exports let's just stick to solidity 0.8.2 I mean you should be good with even 0.8.4 but just for this app do it that this way let's create a key called networks it's going to have an object in inside of it called Rinke which is going to have object inside of that for URL and accounts for accounts what we're going to do is just export our private key here and we're going to go ahead and grab that private key and paste it in and then let's go to for URL what we need to do is let's go ahead to Alchemy open up your dashboard and sign up or create you know open up your dashboard in there and uh what we're going to do is create a new app in there that app is going to be called Twitter clone select the environment to development and then click inside of that app and you're going to just cop where it says view key you're going to click that and grab your link that you actually need once you grab that link paste it in your hard had config what we're going to do after that is we're going to create a new contract so go inside of your under your smart contracts you're going to see contract in there we have uh greer. Sol we're going to change that and so is an extension for all solidity files and we're going to change that with mint profile image. so now we're going to change up remove every line of code that was in the file we're going to add in a spdx license so add in your spdx license identifier we're going to use MIT it's an open source one I believe and then we're going to say on line three pragma solidity 0.8.2 and then we're going to add in some of our contracts from open Zeppelin so let's get our ERC 721 our ownable and our counters ERC 721 is so we could make an nft that's compliant with the erc721 standard open Zeppelin allows you to very securely and easily deploy all of these if you had to write this code yourself it would be a lot of work in a nightmare so we're very thankful that open zeppin allows us to do this right counters is going to be something really nice and what that allows you to do is essentially keep a counter you know that you can increment for every nft that you have made so we're going to create our contract profile image nft it's an ER 721 and it is ownable so we're going to add those in we're going to say using counters for counters. counter okay and then we're going to say using string for un 256 so the nice thing about line 11 is it allows you to go back and forth between a uint and a string now on what we're going to do is we're going to say hey set token IDs to whatever that counter object is okay so that way token IDs literally imagine it being just a number like it's going to be either zero or one or two or three or four and we're just giving it a data type of counters that counter now in line 15 we're creating a mapping and I I know that in solidity all this stuff looks so intimidating but it's just an object and the mapping so it's just an object and the keys that it's going to have are going to be a number and then the value it's going to have is going to be a string so just imagine like zero colon hello okay or one colon hi so that's just an example so we're defining our data structure here and uh it's going to that object is going to be called undor token Uris and then what we want to do is let's go ahead and create a struct for a render token and the struct is going to be it's going to have ID which is going to be an integer it's it's going to have a URI which is going to be a string and it's going to have a space which is going to be also a string now let's go ahead and create our Constructor Constructor is something that happens as soon as the app runs okay this the first very first thing that happens as soon as your contract is deployed so so what we're going to say is as soon as it runs uh give me a you know these are the following things that are going to happen and this Constructor is going to be called you know it's going to be a ER 721 uh Constructor and then we're going to say profile image nfts is going to be the name of it and then the symbol of this is going to be pin p n short for profile image nfts now we're going to set a function it's going to be called set token URI we have usually these underlines in the front that you see that are kind of like what is this annoying underline there the point of that underline is just to I let you know that hey this is an internal function nobody from the outside needs to use it and this function is going to take in an ID token ID and it's going to take in token URI okay so token ID is going to be an integer and token URI is going to be a string now this is an internal function so let's just say internal so that way nobody will have access to it from the outside and then what we're going to says all this function allows you to do is if you give it a certain token ID it's going to basically add that into the object okay so it's going to basically add in a new key value pair inside of the mapping that you created called token uis so if we give it a for set token URI if we said uh we call the set token URI function and we give it a token ID of zero and the token URI of hello.com then it will just run the function and it'll go into token URI mapping and add in that key value pair that's that's essentially all that's happening there on line 29 let's create a token URI function it's going to take in a token ID and we're going to say it's going to have a public View and we're going to do a virtual override so a virtual override is so if you have an internal function inside of solid to override it you have to say virtual override returns and it's going to return some type of ring so first thing we want to do is we want to require that it exists so say that I'm running this function token URI and then it just returns to me the given URI right or given token so I go hey get me back my zeroth nft the very first nft that I ever created or get me back my 10th nft and if I call this function and I give it 10 it's going to look and see if it exists and if it exists it's going to return it and if it doesn't exist it's going to say URI does not exist these smart contracts what's really weird and cool is they keep their own memory so they're kind of like builtin database that's the cool thing about it it's like a builtin database cuz it's on the blockchain so every nft that was created from this smart contract that you're creating that'll be on the blockchain and it'll be able to go and reference historically if anything has been there which is so super freaking cool and awesome looks like you don't need to use Firebase to store that information and it's not even in local storage it's just permanently there on a database which is the blockchain so you get a database for free how nice is that it's just slow really slow all right next up on line 31 we're going to basically uh create another variable called R URI and it's going to be a string whenever you do string you got to just write that word memory string memory and our URI is going to be the the actual URI okay like literally it's going to be the actual URI so given the token ID so it's just going to look through the mappings and token uis given the ID of like let's say five it will pick that and set that to ouru that's all that's happening there and then we're just going to return it okay so this is a very easy peasy uh function it literally just looks through the object returns something based on the ID next function is also going to be a really nice and easy peasy one we want to get all tokens one because I want to be able to get all my God darn tokens all right where are all my tokens at homie give me them give me all them tokens so we go and get all of them that's that function I'm going to write some code but it's essentially all it's going to be doing is looping through and getting me all of my tokens that exist okay inside of my mapping I don't believe you even need a dependency for this okay and public view returns and it's going to return a struct of U it's going to return an array of render tokens so render token up at the top this is where gets a little weird but let me walk you through this so from line 17 through 21 you have this struck called render token that defines the schema of your object so in JavaScript it would be defining the schema of your object meaning this object has three keys these keys are ID U and space so it's defining that render tokens will have these three keys the rendered token cannot have a fourth key called ugly face or poopy head or your mom no it can't have that right it's just going to be those three things ID URI space that is it does that make sense just defining the object now on line 35 we're saying you're going to be returning an array of those objects if you ain't returning an array of those objects you and I got a problem because this is not dynamically typed like JavaScript it's more statically typed so when you writing these more statically typed programming languages you have to define the data types and you have to Define what it will return and if it doesn't return that the app will break and not compile and return errors so it's more annoying but it is um less likely to lead to errors and everything on the blockchain on ethereum trust me you don't want it leading to errors when you have to deploy a function on mainnet it costs you two freaking Grand you don't want to leave that to an error cuz you're just going to lose that money or you're going to get hacked so safety first when it comes to All Things crypto all right that was a great lesson for anybody that's in uh College fraternities safety first so on line 36 we're going to say hey latest ID okay give it a type of an uint array okay that's what the latest ID is going to be and I'm going to say that um get me the current token ID okay so actually it doesn't need to be an array at all because you're just returning one thing so that's all latest ID so when I do token id. current let's just talk about what that does okay I have a lot of fun breaking this down if you're annoyed by me slowing down on the blockchain part I don't care it's my video so smash the like button if you dislike it it won't even show that won't achieve anything but yeah let's talk about what this is doing right so token IDs is that remember this that counter object that we made so that counter object has really interesting method it has a method like called Curr that method knows at any given time let's say you've deployed people have minted six nfts or 20 nfts or 40 nfts from your smart contract that you just created anytime you doore toen id. current you know what's going to happen you get the current number so you can see oh we're on the 41st nft right now or 40 seconds and this is so beautiful because it's just keeping track of all of it like a database without needing a database that's so cool and it's foolproof like your database could have a bug but this is on the blockchain it's verifiable it's like there so it won't have a bug it just and it's a buil in so it's just going to be like completely accurate right I'm I'm getting excited as I'm making this with you I hope you don't mind all right now in line 37 we are going to basically say I'm going to define a new variable called res okay new variable called res now re is going to be of type is res is going to be an object no I'm shooting then I just need to be quiet all right so res now what is res res is going to be a type render token remember that struck that we actually made earlier okay render token that's what it's going to be but why am I putting the weird brackets in front of it like that why is it open close brackets right there what that means is Rez is going to be an array of objects okay an array of objects array of objects what does that sound like that sounds like anything you ever have an API call and return to you you always get an array of objects with this array of objects that you're going to get you're going to do something with it okay so that's the important thing about rest just remember that and then so when whenever we return res you know it's going to be an array of objects in this case you already know there it's going to be an array of all the token URI objects you've created AKA every nft that you have minted it's just going to show you the whole thing it's going to show you the IDE of that token the URI of each of them and just going to show them all right that's the cool part about this now and then we're going to say render token latest ID now this part is super confusing right what the heck am I looking at there what is this new render token bracket latest ID that is describing the size of the render token array okay that's saying that the render token array will never be of a different size than that so say that our latest ID the we have nine nfts minted well this is going to be of size this is going to make sure the render token is of size N9 or size 10 or how yeah size nine right and it's so it's going to return this so that way it doesn't it's memory efficient and you're not making an array that's of a much larger size than this it's kind of annoying to Define how many what's the size of your array but it is what it is and it ain't what it ain't next up what we're going to do is we're going to write a for Loop and we're going to right one of these ugly for Loops where you have an i and you iterate over it and you increment it we're going to do the following in this we're going to say if the token exists so I'm sorry I went over that exist thing I didn't really explain it that well on line 30 and now we're doing it on Line 39 I was like yo how does exist look through all of the tokens that I have made and I'm literally calling exist on you know let's say a number one how does it know what it's looking that up against what is it looking in I was imagining this exist function to have two arguments one being here's the token ID to look for two being here's the mapping to look inside of or here's an array of objects to look inside of like here's where to look so I was like it's only asking for what to look for but not where to look that is weird right that is so freaking weird that's that's like somebody not knowing where your house is you're like hey get me my underwear first of all they're like why am I getting your underwear that's weird and second where do I even look what's cool about exists is is it's a builtin function that comes inside of solidity so it automatically knows everything that you have you know sort of created every piece of contract that you had created with this beforehand and so when you give it the token ID it internally knows how to look at everything that was minted or created from this contract prior and look through it pretty cool right that's how that that's why that works you should know it's a builtin because we never defined underscore exists so on Line 39 we go if if the freaking thing exists what we're going to be doing here before I even start writing any code is we're going to be looping through and we're going to basically say if the freaking contract exists and just add it to this res array and then return it at the end that's all we're doing so now ain't nothing to it but to do it all right so let's create our URI which is going to be a string and we're going to say how we're going to get our URI is we're going to call our token URI function pass it the token ID or the index index and token ID in this case are the same because remember we're always incrementing using our counters. counter every time you mint an NFD it'll be zero then it'll be one then it'll be two then it'll be three so this index is going to map to that one to one and then we're going to basically say hey get me the token URI with the ID of zero then in the next loop we're going to say hey get me the token R URI of index one and it's just going to keep setting that to our variable called URI now this is where it gets really weird and also really cool so on line 41 you're calling this so you're basically calling this function render token and let me at a high level describe what line 41 does okay and I think then let me explain cuz this is so weird and it's so bizarre and it blew my mind when I was looking at it for so long like what the heck is going on I had to actually like consult a blockchain expert and take some time from him and speak with him and be like yo what is this line 41 this is like blowing my mind when I was working on this like why does this work and can you can you explain to me and basically what what's happening here is crazy okay what line 41 does is essentially just a pending to the array line 41 is a pending a you know the the mapping that we created earlier okay a item inside of our token URI okay an object it's just a pending an object inside of our token URI or or our res okay it's just appending an object inside of our res that's all it's doing so meaning it's appending an object like with the ID of zero value of your ID of zero right URI of let's say hello.com and it's appending that that's what that does every single time now how is it working so there's multiple ways to append to an array so you could do something like res. push in JavaScript but in solidity you don't have a method called push another way you add things to JavaScript arrays is like that destructuring syntax right except here you don't do either of those ways which are the normal ways to do it you basically say hey in the zeroth index of this array add in the following thing at the first index of this array add in the following thing at the second index of this array add in the following thing so you could actually add to arrays by assigning values to specific positions inside of an array kind of like how you can assign values inside of an object key value pairs inside of objects you could do it just like that inside of an array the key of an array at any given time is its index so you can just take that key assign it a particular value so that's how that's what we're doing on line 41 now you might be wondering what is this render token function I thought we just created from line 17 to 21 render token was just a strug defining a data type but in solidity you know unlike typescript cuz typescript you'll create an interface I don't know if you're familiar with typescript if you're not so okay when you define them it doesn't turn those interfaces or types into like functions or methods or classes but here it does so render token is essentially a function now and if you just pass it three values what it's going to do is it's going to return to you an object that object is automatically going to have the keys ID URI in space so for example for a render function where I have I as the first argument that's going to map to the ID where I have URI and I'm passing in some string as you can see on line 40 actually created a URI string so that URI is going to map to line 19's URI okay and that SPAC is don't even ask me what that spaces is that is going to map to what's there on line 20 so those are you know hey I'm just learning all the stuff with you okay I'm coming here to share with you what I know there all right so on line 41 that's kind of what's happening but if somebody's an expert you know why that's there tell me that'd be great okay so I hope that that you know at least the part about render token being a function and then when you give it the um arguments of IU in the spaces they will return to you an object with the keys being ID you or I in space and the values being what you passed it okay so you're you you just call the function you passed the values done it's kind of nice once you get used to it I feel like it's kind of a really nice way of working with objects but still a little wonky if you're not used to it lastly what we're going to do is we're just going to return that res so that res is basically just an array of all of our tokens the last function we're going to make on line 48 is going to be our minting function and inside of this mint function we're going to have a bunch of different things so we're going to have an recipients and then we're going to have our URI recipients is going to be you know all the addresses if you gave it multiple addresses it will mint to those multiple addresses or if you gave it one wallet address it will mint to one wallet address address is also a data type it is not a string or anything so if you literally give it a0x blah blah blah blah blah solidity will see it as a data type which is cool URI is going to be a string and we're just going to say public returns and it's going to return some type of uh integer on line 49 I'm going to create a new ID which is going to be an integer and we're just going to say it's token ID's current so it's whichever token ID we're at so if we're at the we have done 10 mints and now this is the 10th Mint or the 11th mint that's what new ID is going to be we're going to use that to assign a new ID to a a token that we're about to Mint and the mint function is a builtin function it comes builtin so not the function that we're describing on line 48 but the one on line 50 that says underscore mint that is a builtin function that comes with solidity we're going to give it our recipients and we're going to give it our new ID and then on line 51 we're going to call our set token URI so basically this will go you know inside of our object uh the mapping for token Uris find that the ID the token ID that we're giving it find wherever that exists so we basically goey go to the third token and change its URI to the following so it can do that and set token URI is really just adding a new uh Ur adding a new object and then on line 52 what we're going to say is take my token IDs thing that I have the the the counter right because it's not an integer and it's a counters that counter specific object that we're using it has a method called do increment so we can increment it after it's minted a new nft and then what we're going to do is simply just say return the new ID all right now let's go ahead and just finish up our smart contract we are almost done with it now that our solidity contract is pretty much done what we're going to do is let's come jump into our is go ahead and where it says greeter we're going to replace that with profile image Mentor Factory and then what we're going to do is we're going to okay and then for the ethers dog getfactory make sure to say profile image nfts then on line five we're going to create a new conent we're going to say profile image contract and we're going to await the deploy okay so we're going to get it from the contract Factory profile image nfts and then we're going to go ahead and deploy it and then we're going to await the deployed contract once it's deployed we're basically going to say profile image Mentor whatever deployed to blah blah blah contract deployed to the actual address of the profile image contract address that address is going to be really important so that console log is actually going to be a pretty vital thing so make sure you leave that and then at the end we're just going to write this async function that's just going to do a try catch and it's going to await Main and otherwise going to catch an error and exit Okay so we're going to do process exit one if there is an error and now let's go ahead and compile this so let's go npx hard hat compile so this will compile our smart contract that we just made and then once we're done compiling what we need to do is the script that we made we need to run that script all right so we're going to say npx hard hat run script / deoy Network Rinke cuz we wanted to deploy to Rinke Network and once that runs successfully it's going to say profile image minor contract deployed to blah blah blah and look at that just like that we have a successfully deployed contract address congratulations if you got to this part or you're watching this and you know you thought this was cool we did this go ahead smash that like button show me some love and uh go ahead and also copy that contract address you're going to need that for later let's go inside of our lib in our client okay go to our client go to lib and we're going to create constants and in that constants we're going to create contract address so paste the contract address you got this this is going to be very important like I said now what I want you to do is go back to your smart smart contracts go to your artifacts inside of your artifacts you'll see contracts go in there and you're going to see uh profile image nfts Json copy that and paste that inside of your lib under your clients okay this is also going to be pretty important then in your constant import that into your file so do import contract artifact from profile image. Json okay and then what you're going to do is you're going to say contract ABI and get the contract artifa artifact Abi Abi is just the interface of the contract that that shows you how to use it okay so now you have the contract address and contract ABI with now with that there now the point of this is the contract that you created inside of solidity now you'll be able to play with it inside of your react app so your client side will now start to have access to all of this how freaking cool is that all right if you're excited I'm excited and so that's it I hope you enjoyed making that contract now we're going to work on adding in metamask authentication so let's get to work now let's work on adding authentication with metamask to our app so let's go ahead and do that now all right here we go okay so in order to start this we're going to start off by creating our context cuz what we're going to do is we're going to have this one Global thing that's going to keep track of a ton of state and it's going to keep track of because authentication we want to keep track of that wherever you are on the app right cuz if you're unauthenticated we want to kick you out at any given time so it makes sense to keep track of it at kind of like say a global so that's that's what we're doing here okay so let's go ahead inside of create a folder called context inside of in in client and then in context let's create a file called Twitter context. JS this will be this will keep track of our context let's import create context in use effect and use state from react and then what we're going to do is let's export Twitter cont as create context and then let's export Twitter provider now Twitter provider is going to take children and then we're going to return Twitter context provider with its children in between now now currently the value is empty but whatever value you put in there that's the value you're going to have access to globally okay so let's just set that up on line six we're going to go ahead and create a function called check if wallet is connected this is going to be asynchronous function and this function is just going to check is your wallet connected or not so if window if there's nothing on the window. ethereum meaning ethereum does not exist just return okay so that means maybe they don't have metamask installed or whatnot just return don't do anything and then we're going to have a try catch block if you get an error just return it and now we're going to get back an address array okay I'm writing that so you can just very clearly see that it's going to be an array of addresses and we're going to get that from ethereum and we're going to request that and the method is going to be eore accounts what this method will do is when you run this it's going to open up metamask and that metam mask is going to basically ask you to choose which account you want to connect with and then you'll be able to connect with whatever account you want all right and we're going to basically say if the address array length is greater than zero meaning you picked a wallet or multiple wallets then basically say hey connect you're connected otherwise you're not connected okay that's all that's happening there then we're going to go ahead on line six and keep track of our app status so that's just like are we logged in are we loged not logged in what's the status of the app that state we're going to track it on line six and then we're going to track our current account so do we have a current account that's logged in right now or do we not so if we don't then just leave that as empty string let's create a use effect hook and in here we're going to check if the wallet is connected basically every time the app runs okay so no dependencies for this and then what we're going to do on line 21 is if we're connected then just simply say app status set the app status to Connected done Simple app status by default let's just set it to loading and then we're also going to set the current account to whatever in the address array whatever the zeroth element is so it's whatever the first one that they pick that's the one we're going to get connected with okay otherwise we're just going to say not connected and change the app status to not connected as well cool now we're going to create another function called connect to wallet this is going to initiate U metamask wallet connection this this is going to be the start of it and what connect to wallet is going to do is if you don't have metamask or whatever if ethereum is not found in your window and window by the way if you're confused where am I getting window from that's what happened with me window is This Global it's a global variable that you get access to from chrome Safari or web browser and you can pull a lot of attributes about the window like the window size or if you have ethereum or metamask or anything injected or installed you can get access to other things too so it's a global variable with a ton of stuff in it all right and then if it doesn't exist we're just basically going to say hey no metamask installed okay and we're going to do the same thing at the top on line 17 if window doesn't exist just return uh return and set the app status to no metamask and then we're going to have a try catch block if there is an error then we're going to set the app status to an error and we're going to do that on line 29 and on line 41 okay and then we're going to say in the try while we're trying to connect set the app status to loading and then what we're going to do is we're going to say address array so we're going to do that again we're just going to await the request and method is going to be request account and once we get an account back we're just going to check hey if somebody picked an account meaning the length of array was more than zero then just set the current account to whatever the user picked okay let's go ahead and import used router CU we want to be able to route back and forth so from next router okay let's go ahead and on line 10 let's add router is equal to use router and then on line 50 what we're going to do is we're just going to say router. push add the homepage and then set app status not connected okay so if the user does not connect to anything we're just going to send you to the homepage and we're basically going to change the app status to not connect why this is useful is later what we're going to do with all these statuses that we're keeping track of is we're just going to basically go we're going to render out different components AKA render out different app apps right so if you logged in we're going to give you like the real Twitter if you didn't log in we're going to give you some crappy page that's going to say error on it okay that's what it allows us to do okay and then another thing we want want to do is we want to add the router. push as well to our not connected okay and then in our context in our Twitter context provider we want to say app status and we also want to keep track of our current account so this way now that we've added it to value that means we'll have access to all of this globally okay cool the perfect so in terms of our Twitter context we're done now let's continue moving on and finish up adding this authentication and make the entire overall work FL work okay so let's go ahead and do that now all right now let's start working and finish out our entire authentication flow so let's go ahead and do that now all right so so in our Twitter contact let's make sure that in value we export we're we're getting app status current account and let's even get our function connect to wallet that we actually created so let's get that as well cuz that function will basically make sure that the app is connected okay now let's go to our index.js let's import use context from react and import Twitter context from uh cont do do/ context context okay let's add in a bit more styling so we'll add in The Styling for login container and wallet connect button and login content cuz that's what we need in order for the styling to work so let's add that in and then on line 16 we're going to go ahead and destructure our app status and connect to wallet from use context Twitter context okay so that way we get access to those values that we had provided all right and now on line 18 let's let's go ahead and do let's go ahead and create say app equals and it's going to be a function and it's going to take status by default the status will just be app status so we're pulling from line 16 and we're going to make it for a couple of cases so this will this this function that we're making is really going to render different components based on the state of okay the status of the app so if you're logged in it's going to render the proper Twitter app if you're not logged in it's going to render something else if you don't have metamask it's going to render something else so there's going to be three to four different cases and scenarios that we're going to need to keep track of so we're just going to use the switch case so for switch we're going to give the status and then we're going to have multiple different case Okay so let's leave that for now let's just say default we'll leave the case value and the default and the break let's leave that there and now on line 29 we're going to work on what our user logged in component will look like right so if the user is logged in then give me the following component where I have my sidebar feed and widgets okay just like regular then on line you know all the way at the end let's go ahead and change our app looks so on Line 39 what we're going to do is remove that code that we had and inside of our wrapper we're now just going to we're going to put the jsx and we're going to call our app function and then we're just going to give it the app status so what that will do we'll just render out the app okay so now basically our logic will write in functions so what about the no user found so that component will essentially be a div and inside of of that we're going to have an image okay so let's go ahead all the way at the top on line six we'll import image from next image so we can actually use that okay and we'll create another dat and inside of there we're going to create a metamask download URL and then it'll just simply say install and download metamask online 38 we'll style it with a login container and for our image we're going to give it a height of 200 and a width of two okay and in our assets you can actually see that we have that folder we have that image metam mask.png and error.png so for all of these assets if you need to install them or download them in the description below you'll be able to get access to all the assets and remember the source code is always available so you can download and get the assets that you need all right on line seven in my index.js let's ask import metamask logo from our assets metamask and then we're also going to get our error image from assets error on line 41 we're going to say source as metamask logo okay and we're going to rename our fun function from no user found to no metamask found okay then we're going to create another component and this one will actually be no user found okay we're going to have a login container div inside of that we'll put our metamask logo image we'll put our wallet connect button in here and on click we are going to basically connect to wallet okay so this is where our functionality is going to take place it's going to say connect wallet on it and we're also going to say connect to wallet right there okay as Tech and then last but not least we're going to have a error component and this will give us a login container and an image and then in here we're going to have an error image height of 250 width of 250 we're going to create a login content inside and basically it's going to say an error occurred please try again or use another browser okay and then we're going to have our loading component and that's going to have a login container and within that it's going to have login content and just going to say loading dot dot dot just like that then we're going to go to our switch cases and add in all of our states so we'll have a state for connected not connected no metamask error and what our default state would be and all of our components will be now to make our authentication actually work let's go to our undor app.js cuz that's kind of the root of your entire app inside of nextjs go there we're going to import Twitter Provider from Context Twitter context okay and then we're going to wrap our entire app in Twitter provider and once you do that on the right hand side you can see our app is working and the Wolf the metamask logo is showing up that means we now have access to our Twitter context you know all the context that we were making okay and now let's go ahead there's something off with the styling so on line 57 let's go ahead and make that let's give that the styling of login content and as soon as we do that you can see that much much much better okay if we go to Safari or another browser where we don't have metamask installed you can see it says You must install a metamask a virtual ethereum wallet in your browser let's go ahead and fix the styling there too and we'll say the sty stying will be login content styling okay and now when we click connect wallet Watch What Happens boom metamask just popped up right that's nice okay and now let's see what happens if we cancel so that's the error state so if I cancel now it says boom an error occurred please try again or use another browser so it's clearly telling us what the error is what we need to do to fix it okay so that's nice we got a bunch of error handling okay let's hit next and connect here okay so now it's it's in a loading State okay and all we needed to do in our connect to wallet what we didn't do is we just needed to set the app status to connected so we forgot to do that so in our Twitter context on line 50 right underneath where we say if address the length is greater than zero there all we need to do is set the app status to connect it as soon as we do that boom the status changes and the app Comes live okay so that's where you should be at now if you check your ethereum wallet it should look it should look like it's connected it should it's say connected with the green circle at the top so now here's what the workflow looks like look at that the authentication workflow is looking beautiful it's working exactly as expected I hope that was valuable for you and I hope that you enjoyed it okay next up what we're going to be doing is we're going to start setting up our backend so if you're excited let's go ahead and start doing that right away all right let's work on adding our sanity database backend to this app let's go ahead and do that that now so I'm going to go over to our sanity Studio inside of the studio there is a folder called schemas and there we have schema so let's go inside of our schema okay and we're going to delete a couple of lines we're going to clean this up and now what we're going to do is y let's clean this up and let's go ahead and now make some schema files inside of our schema schemas folder so we're going to create users schema. JS and then we're going to create tweet schema. JS okay and now let's import user and then all we're going to do in each of these files is Type in const user schema and then the other one we're going to export const tweet schema okay which is going to be an array and then this is going to be also an empty array now let's go back to our schema file and we're going to import both of these schemas just like so okay and in our line nine we're actually going to concatenate them so we're going to put our user schema there and we're going to put our tweet schema there cool so now that they're concatenated let's work on our actual schemas Okay so so our tweet schema is going to be an object and this is going to be just one giant object all right so it's going to be called tweets and title is going to be tweets and type is going to be document and then it's going to just have a bunch of fields okay so to visually understand this is just you're creating the dock of tweets right you're going to be creating your your Insanity you're going to be creating that and then each field is going to have its own field type so when you click inside of a particular tweet it's going to have its own you know what are all the Fe FS there so that's what we need to make okay so let's work on our Fields so a tweet should contain of course you know what the Tweet is so that's going to be of type string who the author is that's going to be a reference cuz we're going to have a users's collection and in there we're going to reference this okay let's go ahead and add in a timestamp as well okay so we're going to have another field called timestamp so so far we have three Fields tweet Tim stamp and in our user schema we're going to have users and then the users are going to have a fields and these are going to be an array of objects here so we're going to have name we're going to have wallet address we're going to have profile image is profile image nft so that's going to be a Boolean and then we're going to have a cover cover image which is going to be a string and then we're going to have tweets which is going to be an array but that's going to be of type reference cuz it's going to be referencing the tweets okay awesome so that's it when it comes to the schema now the schema should already be working and we're going to go to our context Twitter context and now we're going to add the functionality to save a user and create a user inside of our database so once user logs in we need to create them inside of our database so we're going to do create user account this is going to be async function so it's going to create an account in sanity if the user does not already have one so that's going to be the cool part about it it's going to take in a couple of arguments like user wallet address which is going to be a type string okay and by default we're actually going to take the wallet the current account as our wallet address it's whichever users logged in it's going to use their wallet and if the if we don't have a metamask then we simply are going to return you know and set the app status to no metam mask okay and then let's try throw a try catch block here so if there is an error we're going to reroute you to the homepage and we're going to change the app status to not connected or error in this case all right now in the tri block we're going to say user Doc and so what we want to do is we want to First create our user Doc and then we want to upload user doc to sanity database this needs sanity client to be configured so let's go ahead and work and add our sanity client so inside of my client folder I'm going to do yarn ad at sanity client so this is an important let's make sure we install that once that is installed inside of our lib we're going to create a folder called client.js and in there let's import sanity client okay and then we're going to set the sanity client to we're going to give it a project ID okay and if you're looking at this next public sanity project ID thing you're like what the heck is that we're going to create you know the proc we're going to create an end local okay so then we can actually store all our end variables there safely so let's create a variable called next public sanity project ID and keep this under client at the global level but so we're going to create uh we're going to keep track of our sanity project ID we're going to keep track of our sanity token so let's go to sanity and grab our token so we're going to basically say a Twitter clone YouTube and for the we're going to add in cores Origins so we can use this app so let's do also so when we deploy it to versel we want to make sure that once it's deployed it what we want to make sure is like once it's deployed to versel it doesn't have a chors error so let's go ahead and take care of that right now so let's add a wild card for our versel deployment and let's hit add credentials okay and we basically added Local Host as well so now we can run this on Local Host let's copy our token that we just created okay by using ad API token and let's go ahead and add those tokens in so now that they're in let's add in our data set to be production API version to be V1 token will be our sanity token and CDN is going to be false going back to our T context let's import our client from lib client and then let's go to our function that we were working on for create user account and in there we're basically going to say hey for user doc the type is users ID is going to be the wallet address so each user's ID is going to be their wallet address okay name is just going to be unnamed and by default the profile image nft is going to be false okay and then profile image I'm just going to grab some image and put it in there you can grab whatever image you want put it in there okay for the wallet address I'm just going to use the user wallet address and then we're going to await the and we're basically going to go to sanity and we're going to say hey create this user if this user doesn't exist pass the user Doc and we're good so what's cool about sanity is it'll automatically look up the user and if that user is there then it won't actually create a new user so that's fantastic that's exactly what you want make sure your app status says it's it's connected right after it does does that okay and we're going to go to where check if wallet is connected on and on line 29 right underneath where we have Set current account we want to also right at that point create a user account as and this is going to use our sanity function to create a user account in our database okay and in our connect to wallet we want to also add this create user account same thing right underneath where we connect to it okay now we're getting an error so let's go ahead restart and restart our server and do yarn Dev okay and let's also hit sanity start so you can kind of see what our back end look and let's go to Local Host 3333 connect and now in users you can actually see that we have a user unnamed and if you go there it's showing the wallet address that I have and it's showing the profile image that we've hardcoded below so it's looks like it's working now if I change that to Rafiki cool and now I can even change that to Rafiki or do whatever I want with it so you can see that our front end is now able to actually speak to our back end and our user actually did get stored in the database so this is absolutely fantastic you just learned how to use sanity add a user with the database and you learned how to store inside of your sanity database okay so great job on that this is fantastic next up next up we are going to add the functionality to post a tweet and then store that inside of our database so it's going to be exciting let's go ahead and work on that all right let's work on creating and let's work on making tweets save inside of our Sandy database okay and get created there so let's work on this so in my tweet box component I'm going to import client from lib client so I can have access to my client okay cuz remember I need to post it to my S database so that's why I need my client okay now on line 28 I'm just going to say if the tweet message does not exist return so we're going to work on the post Tweet component function because we don't want it to just console log right we need it to save to the database and if tweet message exists well then what I want to do is I want to set the Tweet ID and that tweet ID is going to be based on the date okay and so from the top we're going to import use context and we're going to import Twitter context as well cuz we're going to need access to all of it and we're going to basically say hey destructure the current account from use from Twitter cont so basically get us a current account from Twitter context okay then I'm going to go to my Twitter context actually let's just stay in our tweet box okay and in tweet ID we're basically going to say current account account so each tweet ID is going to be whatever the current account is followed by the date that will make the Tweet ID pretty unique right cuz it's your wallet address plus timestamp so you're going to get something pretty unique as a date and then we're going to go and do tweet doc okay and for our tweet doc we're going to now create this doc that we can put inside of our sanity so we're going to go type is tweets ID is tweet ID tweet is going to be the following it's going to be a tweet message and then Tim stamp is going to be whatever the time stamp is right now data is right now in ISO so we're going to do ISO string okay then author the key for author is going to be the Tweet ID and the type is going to be reference and we're going to say ref is current account okay once we're done with that we're just going to say hey create this if it does not exists so only create this tweet if it does not exist if it exists meaning if this tweet ID exists which is so rare then don't create this okay then don't create this put this in the database and then what we're going to say is we're going to go and go to the current account and add this tweet to it okay so we're going to say insert this and append this tweet to that all right that's all that code is doing there and then we're going to commit that and set the tweet message to blank make sure to make your function async here now let's go ahead and add our tweet just like have you smashed the like button yet have you smash the like button yet go click it Go click it right now I'll love you even more than I love you right now okay go ahead and do all right so I hit the Tweet let's go to my sanity and look at that the Tweet is there at the bottom right you can see it yo how easy it is it to add your tweet that is so beautiful okay so if you haven't smashed the like button yet go ahead and subscribe to the channel too while you're at it okay and now if you go to tweets it is a twoway relationship right in users it has the tweets appended when you go inside of tweets you see that the you know have you smash the like button the author of that tweet is rafik Kazi which is inside of our users okay okay beautiful so we are with that said we are done adding the Tweet functionality to our app let's go go ahead and add a couple more functions and make them work with our back end and then we should be good to go let's finish off our sanity functions and let's go and work on them now I'm going to go to my Twitter context and in there let's go ahead and on line 89 we'll fetch all of our tweets so we're going to query it and the query is going to be this big query that you see right here and what this query is going to be doing is basically going to be saying hey go to tweets get me the author whereas and then for the author get me their name their wallet address their profile image and it's profile image nft get me their tweets get me their timestamp and then I want you to order it with time stamp descending meaning the most recent ones showed those to me first so that's what our query is saying here and then we're going to basically go SED response okay and we're going to go and fetch that specific query okay and then we're going to set these tweets so let's make sure that we're keeping track of the state so on line 10 we're going to add in our state called tweets and we're going to have set tweets there okay and it's going to be an empty array in the start and our set tweets okay what we're going to do is we're going to do sanity response and we're going to Loop through so4 each and each item that I get we're going to go new item and the new item is going to be an object and it's going to be a tweet so we're going to get the item tweet we're going to get the Tim stamp we're going to get all the info about the author the wallet address all of the detail that we get back from you know when we fetch all of our tweet okay so in this case another way to think about item is item is another word for saying tweet but I just didn't want to say tweet cuz it would make it really confusing but it's really tweet. tweet we're getting tweet. timestamp we're getting tweets author name we're getting tweets you know if it's a nft image or not let's get the profile image as well so now that we're done with all of the author let's go ahead and set tweets to whatever they previously were okay let's go out of all of that and basically set the tweets to be whatever they previously were to what they are now and then we're going to say hey let's get the current user details so user account by default it's going to be current account and we're just going to say hey if the app status is not connected all right so basically now what we want to do is we want to get the current users details why so we can actually show them on the screen so we're basically going to say if the app stat if app is not connected just stop and return and then for the query we're just going to say hey if it's you know if if it's a user and the ID is of the current user's account that's the user I want you to get me and of that user what I want you to do is is get me their tweets okay and how I want you to get their tweets is tweets is going to be an array that you're going to return to me array of items you're going to return to me and I want you to only give me timestamp and tweet I don't need more information than that and then order it with timestamp descending meaning the most recent ones first okay that's that's all that's all that means great also get me the name get me the profile image get me whether it's a profile image nft or not give me the cover image and get me the wallet address okay then we're going to get the sanity response so sanity is going to go to the database fetch that query that you just asked it okay and then we're going to set the current user details so we don't have that state so let's create that state variable called current user and set the current user to be we'll just do object empty object for now and so we're going to set the current user to be it's going to we're basically going to get the tweets from that that the query that we return and we're going to get the name we're going to get the profile image so we're just getting that users and then we're going to set those current users details okay so this function will do two things it's essentially getting and setting the user details all right and then basically we're going to pass and fetch Tweets we're going to do tweets cuz we need access to that globally throughout the app and we're going to need access to the current user throughout the app okay so those are all very important things why do we need access to this throughout the apps well I need access to all the you know the fetch tweets function because I want to be able to get all of the tweets about this user regardless of wherever we're at right so if I'm in profile page I still need access to all the tweets if I'm in homepage I still need access to this user's tweets all right so with that said we are done with getting access to all the tweets and everything of that nature next up what we're going to be working on is now we're going to be adding Dynamic data throughout the app so this is going to take some time and then right after that we're going to move on to the blockchain and the ipfs part so I hope you're excited and I hope you enjoyed this with that said I'm going to see you in just a second all right so now we're going to add a bunch of dynamic data and and to our app so let's go ahead and do that now so I'm going to go to my sidebar component in my sidebar let's let's import router okay so we want to be able to route through the app and on line 90 let's go ahead and add an onclick for our more okay so we're basically just going to push the path name and here what we're going to do is we're just going to say hey go and we're going to add a query parameter called mint and we're going to put the current account address inside of there okay that's what we're doing right now so whenever you click that path boom you'll head there let's go ahead let's also import context at the top so we're going to say import use context from react and also import our Twitter context that we created and so now we're going to destructure the current account and the current user from our context that we created and where we hardcoded clever Cy let's go ahead and replace that with the actual current user.name let's refresh okay so we're getting an error let's go ahead and fix just basically change the path to our context and remove the multiple Dots here now it says Twitter context is not defined okay and so instead of have four dots just have two dots right so period period context Twitter context and now we should be good to go all right next up inside of our Twitter context we're going to add our use effect hook and inside of that use effect hook we're basically going to make the dependency third and let's actually change that dependency so we're going to make that dependency actually current account and we're going to say if not current account account so if the current account doesn't exist and the app status is connected then just simply return and stop the app okay and let's make our dependen current account and app stat and we'll replace that with the or because in either case if the account doesn't exist or the app status is not connected then I just need you to like not run this hook this use effect hook okay so now we're getting an error on our tweet side so where we're saying it let's replace that with itm that was a typo so now it should work everywhere and it should be good and now on line 96 and sidebar where it says current for it had hardcoded account wallet address let's go ahead and add our current account slice that bad boy and then once we do we should be good on line 93 let's go ahead and add our profile image for the current user okay and we're basically going to say hey if the current user has uh nft if it's an actual nft then show that okay otherwise show a regular profile image and now boom all the way at the bottom right in our sidebar you can actually see that our component is showing now where we're destructuring the current account let's also get the current user and the tweets cuz I think that's going to be important okay we might not need access to tweets so actually let's get rid of and where we have hardcoded that image on line 68 we're going to replace that with the current users profile image and uh for on line 70 where we're doing our styling of the profile image what we actually want to do there is replace that with Dynamic styling So based on whether the user it's an nft image or not if it's an nft image then make it a hexagon otherwise make it a regular profile now let's go ahead into our feed. JS we're going to copy all the tweets and inside of our or actually just hide all the tweets and inside of our feed let's use context and let's also use Twitter context and let's destructure the tweets from our Twitter context and now for on line 66 we're going to basically say hey the tweets author wallet address so now we're pulling dynamically from our database okay and for Avatar we're going to pull from the tweet and for our display name we're going to pull from the actual tweet that we're getting from sanity for our text we're going to pull from the Tweet okay and line 62 tweets is now not pulling from the hardcoded data anymore cuz we've commented it out as you can see from line 13 to 50 we're now tweets is now getting pulled directly from the sanity database okay that's what's actually happening there and you know have you smash the like button yet that's the tweet all right let's go to our profile header and now let's go ahead and add use context there from react and we will also add Twitter context from Twitter context okay and in our profile header let's go ahead and destructure current account and current user from Twitter context so then we have access to them in our profile header okay and boom look at that it's looking our profile page is looking pretty solid let's hard instead of hardcoding that Banner image that we have on line 40 let's uh pull it from sanity so let's just say current user. cover photo actually if you look it says cover image not cover photo for name we're going to go ahead and say current username and on line 35 we're going to say current user tweets okay so again we're pulling all of this dynamically now should be pulling that from the sanity database okay and for the tweets that's now going to be you know the word is going to be written based on if it's just one tweet it'll just say tweet and if there are multiple tweets it's going to say tweets okay now another place on line 67 where we have rafii let's replace that with current user.name so now it's going to pull dynamically as well from there so that should be much better and in our profile Tweets we're going to import use context and Twitter context okay we're going to destructure current account current user and then get our Twitter context there and we're going to do the same thing and we're going to get the current users tweet so that's the difference on the profile page whoever is logged in right now so if I'm logged in right now I needed to pull my tweets okay so let's go ahead and slice our username let's Okay and we're just going to add a question mark for the tweets so this a line in profile header line 37 is breaking so we're just going to say hit tweets if they exist we'll ask on line 36 as well we'll just ask if it exists make it optional chaining so we don't have an error there line 54 will do the same thing tweets question so we're going to do current user. tweets question mark okay now this display name let's make it the Tweet author name so we're pulling or current user.name so we're pulling it dynamically we'll pull the tweet and for the Avatar we'll also get the current user Us's profile image so that should be good for display name what we're going to do is U display name is going to our wallet address in this case so if the person is unnamed then put their wallet address otherwise put their name okay so that's the way that we're going to do that and so this is kind of a nice functionality you know depending on whatever username is like if you prefer to have a name then sure show the name otherwise just show the wallet address okay it's that's kind of how it even works on open so we're going to say current user.name if it's named show the current user's wallet address otherwise show the current user's name so that looks super clean okay and then we're going to splice it as well so now there you go now you can see that rafic Kazi showing up the wallet address for rafic Kazi is showing up okay that looks fantastic and now I can switch between back and forth between the profile page and also all the way at the bottom you can see the rafic Kazi showing up with the wallet address okay awesome so hopefully you enjoyed that we added a ton of dynamic data to this this was fun now we're about to get started on our blockchain part so I hope you're excited let's get straight into it all right guys now what we're going to do is we are going to build a model where you can actually click upload your image and then mint your own nft with the deployed contract that you deployed so it's going to be exciting let's get to it all right first things first let's go ahead and inside of components we're going to create a folder called minting Model inside of there we're going to create a file called profile image minor .js now let's hit rafc so we hit autocomplete on profile image Mentor make sure you have the react es6 or es7 Snippets so you can do this type of stuff that I'm doing right here otherwise you'll have to manually type that in and that's not fun let's go ahead inside of our client and now we're going to install the react model Library so let's do yarn add react modal okay perfect so now that that's installed let's go ahead and import that into our sidebar so we're going to to import model from react model and then let's go at the top and import use router okay cuz we're going to need access to that as well and let's uh on line 40 we're going to say router is equal to use router and then on line 20 we're going to go modal and inside of our modal we're going to add our profile image minor component that we just created okay now if that freaks out Simply go ahead and import profile image minor from minting modal profile image minor okay so we get access to that great and then inside of our mod we want to say that um whether it's open or not is going to be based on the Boolean of whether in the URL you have a parameter called Mint or not meaning when you click the mint it should open up once you unclick it you know and the URL is clear then it goes away okay all right and then on the request close all right on the request close basically just take us back to the homepage so we're just going to say DOD back and then for style we're just going to pop in custom style okay now in order to get these custom style we we actually need to go ahead and build that out so inside of our constants we're just going to create custom Styles so we can just leave them there and then use them whenever we want so here are custom Styles we got a top we got a left we right bottom are going to be Auto transform is going to be translate 50/50% and basically what this code is going to do is give you a modal in the middle and kind of give you a dark overlay in the background that's all we're doing here and now all we have to do is import our custom style from lip constants so we got that and now let's uh click mint actually on click is not defined so in our sidebar in line 97 what we're going to do is we're going to add it so we're going to say on click router. push and give it the path name with mint and current account so now when I click it my modal pops up it's not the best model but it's clearly there you can see the background kind of being being grayed out so that's the color that we're adding as an overlay and our modal while it doesn't look pretty it is indeed showing up all right now in our profile image Mentor that we created we need to basically create the component that we stick inside of the model that's what we need to work on now okay so in a profile image Mentor we're going to create our status okay it's going to we're going to set the state to initial and for modal children like what's going to go inside of it we're going to say that it's going to take the modal status by default it's going to be the status okay and uh we're going to have different cases so one case is going to be initial and on line 16 let's go ahead and render out this model based on on the status so this is just a start of the modal we def definitely started making progress on it but let's continue going ahead and making progress and then we're going to finish it out all right so now in our modal children that we were working on we have our initial State we'll have our loading State our finish State and our default State now we're going to leave these blank and now we're going to go build out these components because modal children is going to basically reference you know one of these different components for the model so let's go ahead and build them out now all right so what I'm going to do is uh let's start off by building out initial state so for initial State what we're going to do is first we're going to import GI Earth America from react icons cuz we're going to need that we're going to need that you know icon then let's go ahead and add all of our styling for our initial state so our wrapper input Fields container file input Uh custom input all of this is going to be needed now inside of the initial State it's going to take in a bunch of props so let's do profile image set profile image name I'm going to need set name description set description mint so it's going to basically destructure these all right and then we'll console log profile image when we get it now let's go ahead and build out what we're going to return so let's create a wrapper you know div class name wrapper then inside of that we're going to create another one with input Fields container then we'll have um another one with the input container inside of that we'll create a label and make sure to give it image upload for HTML 4 and for class name we're going to do it based on hey if profile image exists then you know choose the file selected style otherwise choose the custom input style and just just means if there's already an image that you've uploaded successfully make that like button green all right then we're going to have an input and then in that input it's going to be type file ID of image upload it's going to accept like a JPEG or a PNG and the class name for this is going to be file input for the placeholder we'll say image URL and on on change we're just going to say hey set the profile image to you know whatever file the user picked cool and it's going to say select file so that's that's it there next up uh we're going to have a div with an input container it's going to have an input of you know type text class name is going to be input placeholder is going to say title of image and then whatever the value is and on change we're just going to set name to be whatever you type in so this is going to be the name of the image in this case and then we're going to have an input container another one and then in this input we're going to you know have text class name input class holder in this Cas placeholders is going to be description value is going to be description and then on change well whatever you added let's go ahead and set that as the value so we're going to go ahead and set that as the value so we're done with the description we're going to create another div this one is going to be of it's going to have lower this is for lower inside of that let's create a div with visibility and then we're going to put our GI Earth America icon and for span tag we're going to do visibility class name visibility text and basically go everyone can see this then we're going to have another div in that I want to have a class name and uh basically I say if the name exists and description exists and profile image exists so if all three of those fields exist then give me the styling of mint button otherwise give me an inactive mint button styling Also let's add an on click to this and basically that on click is hey if name description profile image Fields exist and the user clicks it then run the mint function okay so we're going to go ahead Define what that function is as well and then let's go mint beautiful let's close out all of our divs and boom we're good with our initial State function now let's go back to our minting modal and let's just add in our loading State and our finish State cuz those are two other ones that we need so for loading State let's import grid loader from react Spinners cuz I want to have a spinner so let's go and then let's import CSS from emotion react now we're going to need to install these libraries so let's go ahead and do yarn add react D Spinners cuz that's we need that and then let's go ahead and do yarn ad at emotion SL react okay now once both of those are installed great let's go ahead and add the styling so in style we're going to add a wrapper and then we're going to add title let's do a CSS override here with display block margin Z Auto border color white and then we're going to create our component loading State and let's go ahead and make sure sure export loading State as well and our loading State component is just going to return a div wrapper inside of it we're going to have a title and it's going to say minting in progress and then we're just going to put our grid loader with the color of white loading is going to be we're going to set that to True CSS we're going to give it the CSS override let's give it size 30 and that should be our loading state so that is complete uh as our definition of the loading State now the last thing we want to set is our finish state so let's go ahead and work on that let's import use context and use effect from react let's import our Twitter context from our context Twitter let's import our image from next image we'll get our check mark from assets and if you need assets remember link is in the description you guys can get it from there and we're going to have used router from next router now for style let's uh add in our styling beautiful and we're now going to create a component called finish State let's also export default finish State and we're going to go ahead and line 14 add our router so we're going to say router equals use router and then we're going to go ahead and um uh destructure our get current user details from our use context our Twitter context let's run a use effect hook and call our get current details uh function or yeah get current user details okay and then what we're going to do is let's return so in our return we're going to do uh give me a div with style wrapper okay inside of that we'll have another uh title it's it's going to say mint things successful and then we're going to have uh image that's going to be a check mark with 100 height 100 that's going to show that this is good and then we're going to add an on click that when you click it it takes you to the homepage and then we're going to close this off perfect so we're good with our finished State we're good with our loading State and we're good with our initial State at this point um that's perfect and now we're just going to go ahead and start working on um adding these in okay we're going to start working on adding these in so inside of our profile image Mentor let's go ahead and add a couple of things so let's import our initial state from initial State let's import our loading state from loading State and let's import our finished State because we need those three components that we just made and then inside of our profile image Mentor there are a couple of other things that we need to keep track of in terms of state so let's keep track of profile image okay let's make the status to be finished uh on line 12 will keep track of name and set name and we'll do and then on line 13 we're going to do description set description and then we're going to add in our you know we already have our router so that's good and then we're going to on line 16 get our set app status we're going to pull that from Twitter context let's create our mint function we'll leave that kind of empty right now so just Define mint and leave it as an empty function that just kind of returns an object empty object and then in our modal children you know for our initial State let's just call our initial State component that we imported and then let's give it all of the things that it needs so let's give it profile image let's give it set profile image name set name description set description mint cuz it'll need that on line 3 uh6 for our loading State let's go ahead and uh render our loading State component for finished let's render our finished State component as well so with that said a lot of our toal functionality is now completed and uh let's Now work on the rest of this and get the whole thing done okay beautiful let's go ahead and now finish our minting feature and then we're going to get this ready this app ready to be deployed and shipped cool so let's go ahead and do that now so we're going to finish our mint function it's going to be an async function and we're going to say hey if the name doesn't exist or the description doesn't exist or the profile image doesn't exist return don't even go forur further um what we're going to say is we're going to say set status to loading okay let's do pinata metadata is equal to and we're going to set the name to be and let's do a template literal and we're going to say name Dash description of it okay now pinata is a awesome service so let's go ahead and set that up okay so let's go to pinata app. pat. Cloud make an account there if you don't have one already we're going to use this to store our ipfs image images okay so once you log in you go inside of it we're going to hit new key and hit admin and key name YouTube whatever you want to call it we'll just call it YouTube uh I just got my API key and API secret so let's go to our end local add our pinata API key add our pinata API secret boom boom boom add it there perfect let's go back let's uh do ipfs image hash and we're going to await this let's also create a pinata file inside of our lib we'll call it pat. Js and we're just going to create our constants of key and secret okay and we're going to pull them from our local environment so let's get our pinata API key pinata API secret and we'll import axios from axio as well and we will export our we'll we'll create a function okay it's going to be a async function it's going to take in some Json we're going to do um for URL let's use our pin Json to ipfs URL okay and then we're going to say return axus post give it the URL give it the Json and then we're going to say for the object we're going to give it headers pinata API key pinata secret API key okay so it's going to be we're going to give it that we're going to say once you return uh what we want to do with the response is uh we're going to get the response and ipfs hash okay and then if there is an error let's cash that error and let's print that error out and all the way at the end we're going to say export cons pin file to ipf fs and this going to be a function that's going to async function is going to take in a file and pinata metadata we're going to put our URL of pinata URL there at the bottom okay and then on line 27 let's go ahead and Define our data we're going to say new form data and we're going to say data. aen file and then we're going to give it the file and then we're going to say data. aen pinata metadata and we're going to do Json stringify pinata metadata okay so it's going to turn the entire Json into like a big giant string and then we're simply going to return this as an axio post and we're going to give it the URL we're going to give it the data then we're going to give it an object and for Max body length we're going to say infinity so as long as you want the body to be right and for headers we're going to say content type it's going to be a multiart uh form data and then we'll Define a boundary and we're going to say just do a dataor boundary again let's give it a pinata API key and let's give it a pinata secret API key okay and then after and then we're going to do a do then on this as well and we're going to do a very similar where we're going to say hey response get me the ipfs hash and if there's an error get me the error now let's go back to our profile image mentor and we're going to import pjon to ipfs and pin file to ipfs from our lib pinata and then let's go to our line 27 in our profile image mentor and we're going to say ipfs image hash is equal to and we're going to pull our we're going to call our function pin file to ipfs we're going to give it the profile image and pinata metadata okay and this is going to return to us the ipfs image hash and so then we can use that in however we want now let's go ahead and click mint all right we're going to upload so the modal just popped up that's great let's select the file that we want to upload on there and uh we're going to say 46% of you are not subscribed fix that please subscribe and then we're going to click mint so now the mint process has begun okay and we can see at the bottom the network request says 200 it's okay we're sending the post request and we're getting back a response actually for ipfs hash and it's telling us what the ipfs response is and boom look at that we just uploaded a newly freshly minted image onto or to store our image on pinata and now it's actually being managed there okay and we there are hashes there as well this is the image we put up on pinata with the lock down you will have some time to rest I am a software engineer no time to rest for you fools grind baby all right so let's go ahead now and um on line nine in profile image Mentor what we're going to do is we're going to import our client from lib client so now this is our sanity portion and we're going to say client. Pat okay so and current account now let's destructure the current account as as well from our Twitter context so I'm just going to get that on line 18 let's go back to line 30 and we're going to say client. Pat current account and then do set profile image and we're going to set this ipfs image hash as the profile image okay and then we're going to do do set on that and uh we're going to say it's profile image nft is true okay so we're going to set that to true and then we're going to go ahead and commit that all right and then we're going to do image metadata and for image metadata it's going to be just an object with a name description and an image and for image we're going to say ipfs colon SL slash and we're just going to put in the ipfs image hash in there so we're going to have we're going to get the ipfs Json hash and how we're going to do that is we're going to do pin Json to ipfs we're going to call that function and we're going to give it the image metadata and then we're going to give it the pinata metadata okay so the keep in mind the image metadata actually contains that you know what we have on Line 39 where you have the ipfs with the image hash so that's going to be an important part of this and then let's create our contract and we're going to say get ethereum contract and all all the way at the top we're going to Define get ethereum contract and we're going to say async and we'll leave that function as an empty one for now and then we're going to Define let metamask all the way at the top and we're going to say if the window is not defined then metamask is just the window. ethereum and so in our ethereum contract now in line 18 we're going to say if metamask does not exist and return otherwise what I want you to do is uh set the provider and let's also get ethers too so on line 10 let's import ethers from ethers JS okay and let's make sure we do yarn add ethers so we can actually have that so let's go do that install it perfect now that we have that let's go ahead and do on line 20 let's go provider is equal to new ethers dopr providers. web3 provider metamask then we'll get our signer and then we're going to create our transaction contract okay then we're going to import our contract address and our contract ABI from lip constants and we're going to pop that contract address inside of our transaction contract now let's go back to line 63 where we had created our contract so we're going to say await get ethereum contract then we're going to uh create transaction parameters it's going to be an object we're going to give it a two for contract address from current account and for data we're going to say hey await the contract mint and we're going to call our mint method and we're going to give it the current account and the ipfs uh ipfs Json hash okay so that's going to be our data then we're going to Simply await metamask request and we're going to pop open in send transaction and our params are going to be transaction parameters okay and then we're going to basically do set status to finished beautiful so let's go ahead get an avatar image let's download it and let's upload it and okay we got an error so not a problem let's figure out exactly where getting that error remember inside of your transaction contract let's do contract address contract API and signer so make sure you have that let's go and try it okay so let's go ahead and do let's import this so now let's try uploading the image and see if that works so let's try let's click let's upload it let's hit mint minting in progress whoa the metamask opened up and it says minting successful yo what the heck so we just got our minting function to work it is it did it successfully okay and uh let's just confirm really that it worked okay so let's go on open C let's type in my contract address and see if it popped up look at that that crappy Avatar that we just made is showing up on open C so if you think that is fantastic and you like that make sure you smash that like button okay make sure you smash that like button and uh subscribe to the channel while you're at it okay cuz this was huge so you just minted your first um nft most likely okay all right let's go back to our Twitter context and now what we're going to do is we're going to say hey get profile image get profile image URL we're going to create this function okay it's going to be async it's going to take an image URI and it's going to take in Boolean is nft and we're going to say if is nft then uh simply we're going to say hey if is nft else return image URI so if it is then simply return the pinata Gateway with damage URI cool and then the sanity response for each that we're working on let's go ahead and start filling that out as well so right above where it says cons new item we're going to add in our profile image URL we're going to say await get profile image URL and we're going to give it our item author profile image and the is profile image nft and for our profile image on line 132 we're simply going to just say profile image URL now let's on line 156 let's define profile image URL we're going to await our get profile image URL from sanity okay and uh we're going to extract it from the sanity response and we're going to extract the is profile image nft from sanity response as well and then on line 164 as well we're going to basically say we're going to change that sanity response zero if profile image URL to just profile image we're going to change it to profile image URL okay that's it all right and for where we said tweet dois profile image nft we're going to say tweet. author. is profile image nft and boom right when it detects that that image is indeed an nft notice it turns it into that like hexagon right so this is now working correctly so now if I go to my profile you can see that it's an nft and it is indeed working and now let's go into our profile tweets let's fix that so we're going to say tweet or we're going to say current account current account.is profile image nft okay so let's fix that and now let's just check out our app we can click home we can click explore we can go everywhere let's try to add in a tweet so let's grab this image all right let's put this in where I'm drinking some coffee let's see if we can mint it so I'm going to say mint select file drag and drop let's put that image right there we'll give it a title so coffee and the description is going to be new profile pick HUD this minting process has begun so let's see if that works holy crap metamask has just popped up let's confirm boom it worked right we saw the green check mark it said minting is successful and my profile images updated and take a look at it it has a hexagon so you know that that is a nft Image new profile pick Let's tweet this let's go ahead and tweet that oh man that is beautiful everything is working just as expected so we're very happy and now the last part of the puzzle we're just going to deploy this and let's hope that it works when we deploy this okay fingers crossed deploy yes set up and deploy perfect I'm going to choose clever programmer you can choose whatever you want link to existing project we're going to say no okay what's your Project's name and for our project name we're going to say Twitter clone YouTube okay where is your code located just right here just hit enter default options are pretty much the best do you want to override the settings nope okay do you want to all right it's deploying fingers crossed oh it didn't work okay no worries no worries that's super simple we're going to find a way to make that work oh let's actually update the environment variables as well let's go inside of verell let's go inside of clever programmer okay and I'm going to go into my Twitter clone YouTube that I'm working on settings let's go in environment variables and let's start grabbing our environment variables that we've had so here's our environment variable uh for pinata API secret let's go and add that in okay let's add the key as well the key value pairs okay and let's do the same thing for pinata API key let's add that in beautiful we're done with that let's add in our sanity token let's add in the token for it and let's add in sanity project and we'll add in the value for that as well perfect let's hit add so all our environment variables are now added now let's hit versel and boom would you look at that it was actually successfully deployed okay and we can even preview it so let's check it out and see if it works we're going to the deployed link so let's so you can see it says Twitter clone YouTube at the top right we can see that all right so let's click type it in let's go to it okay metam mask is up let's hit connect wallet so our mask wallet popped up let's hit connect our wallet it just connected okay boom We are on Twitter deployed online to verell with nextjs with metamask authentication using pinata blockchain I mean the stack on this thing is crazy sanity for our database the back in is absolutely amazing I mean if you put this project on your portfolio it it it will make you stand out so much this is so sick and I mean this Twitter is like the best Twitter out there right you even have the ads on the side wow awesome so hopefully you thought that was cool so there you have it we've now deployed this app and it is freaking online so I hope that you enjoyed that okay so that's it the app is deployed we use the best stack to make this happen you use nextjs for the front end Tailwind you uh you ended up learning about pinata hard hat solidity contracts how to create your own smart contract deploy it using the blockchain how to make it interact with your front end how to use matam mask and add authentication how to deploy this to versel and your app is working and you can actually mint this online you can mint your nfts you can tweet your sanity database is working I mean this was a phenomenal project wow what a wonderful ride I really hope that you enjoyed this if you did please smash that like button so this video can go out and help more and more developers I'm just so excited and um you know for the prize that we're giving away $200 in eth to one of you based on a thoughtful comment on why you want to become a blockchain developer and put in your wallet address at the end of it and I'm going to be picking the most thoughtful answers um and kind of at random as well out of everybody and we're going to decide a winner in one week okay that's it that's what we had for you hopefully you had a ton of fun and it was a wonderful process for you okay this was Cy from clever program.com I love your beautiful face and I'll see you in the next video and wait 1 second if you haven't checked out Unis swap yet and you buil Twitter with us you should go ahead and check out Unis swap it is freaking cool so I'm just going to leave that up here go ahead click that watch that and I'll see you inside there click it Go click it Go click it
