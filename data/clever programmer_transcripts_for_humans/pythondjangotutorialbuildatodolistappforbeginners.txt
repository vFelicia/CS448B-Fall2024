With timestamps:

00:00 - how's it going everybody hope you guys
00:01 - are doing amazing my name is Ari and I
00:04 - am a full-stack developer who's been
00:06 - working with Django for quite a while
00:08 - now and today I am here to teach you how
00:12 - to build a jingle to do and if you're
00:15 - interested in learning how to become a
00:18 - freelance developer we have a three part
00:21 - master class for free but you can sign
00:24 - up using the link in the description
00:26 - below you'll sign up we'll send you the
00:28 - videos and you'll be able to learn a lot
00:31 - and take your coding journey to the next
00:34 - level we learned today we will learn how
00:36 - to create a jingle to-do app that
00:38 - contains the back in the front end and
00:40 - the database all working together we
00:43 - will also learn how to use bootstrap and
00:44 - its basic structure to create beautiful
00:47 - looking applications and we will then we
00:50 - will learn how to create a jingle model
00:51 - a jingle view where all your program
00:54 - logic will live and then finally we will
00:57 - learn how to use the jingle RAM to
00:59 - manipulate the database and I think
01:01 - overall you will learn how to take an
01:05 - idea that's in your mind they'll bite it
01:07 - up into pieces and put it into reality
01:09 - because that is a very important part
01:12 - now the best way to learn this tutorial
01:14 - is to code along with me that is very
01:17 - important you guys now if you run into
01:19 - any problems I linked the code below and
01:22 - you can just kind of use it to compare
01:24 - the contrast and see where you were
01:26 - wrong now if you are really stuck you
01:30 - can either comment on youtube or you can
01:32 - direct message me on instagram and Nas
01:35 - dumansky and i'll be happy to answer any
01:37 - of your questions
01:38 - now that let's get started guys alright
01:42 - so before starting any new project I
01:44 - like to write out a very simple
01:47 - requirements document like this okay so
01:49 - let's take a look at first things first
01:51 - is the goal what are we trying to
01:54 - achieve with this app right so we want
01:57 - to allow users or customers to keep
01:59 - track of things they would need to do on
02:02 - a daily basis so that's the goal the
02:05 - user story is what can users do on the
02:08 - application functionality-wise
02:10 - the first thing they can do
02:12 - a user can view his or her list of to-do
02:15 - items so that's number one number two is
02:18 - a user can create a new to-do item it's
02:22 - number two and a third one is a user can
02:24 - delete a current to-do item and so these
02:27 - three personalities will tell us what we
02:30 - have to write in terms of code-wise
02:32 - right and so after that I like to do a
02:35 - simple flow diagram because I'm more of
02:38 - a visual person and this helps me a lot
02:40 - trust me so as you can see we started
02:44 - with a stick-figure
02:45 - which is a user it's a very nicely drawn
02:47 - stick figure a user will load the web
02:51 - page what's gonna happen next we're
02:53 - going to get to do items of cause I'm
02:55 - guessing we will have them stored
02:57 - somewhere in the database and then we
02:59 - will show to-do items somewhere in a
03:02 - template page so that covers our first
03:05 - user story the second user story is
03:08 - again we start with a stick figure and
03:10 - what they can do is they can input in
03:13 - your to-do item because we'll probably
03:15 - have an input box they will click Submit
03:17 - we will add that item to a database and
03:20 - we will reload and we used to pursue
03:23 - when you reload you see that kind of
03:24 - traces back to the beginning through
03:27 - here but we will get to do items and
03:28 - show the items and so that covers those
03:32 - two user stories
03:33 - now my challenge to you is to create a
03:36 - third flow diagram for the third user
03:39 - story because you will see just how
03:42 - useful this is now with this out of the
03:45 - way let's go ahead and get into the
03:48 - coding I'll see you guys there let's
03:50 - take a look at what we're actually going
03:52 - to make now here's the application
03:54 - obviously it's cold let's do app and
03:57 - it's pretty simple as a customer or as a
04:01 - user let's say I let's say I want to add
04:03 - a few to-do items that I want to do for
04:06 - the day so I want to read it my Python
04:09 - what a one-book which is very important
04:12 - obviously
04:13 - right I need to go for a run right and
04:20 - then I'm gonna take the jingle toriel
04:24 - take the jingle tutorial to tour
04:29 - tutorial perfect and as I do these
04:33 - things right I just simply click delete
04:35 - delete delete and that's it and I'm done
04:38 - and as you can see that's pretty much
04:40 - the whole app it's very simple but very
04:42 - functional and looks good as well but
04:46 - the important thing to understand here
04:47 - is the core concepts behind building
04:49 - application like this right because now
04:51 - you get to learn things like back in and
04:54 - how the back interacts with the front
04:56 - end and how now the back interacts with
04:59 - a database all those things are very
05:01 - important for not just building
05:03 - applications like these but building
05:04 - much bigger applications like Instagram
05:07 - Facebook Twitter or anything like that
05:09 - so what that being said lets us take a
05:11 - look at how we build this because I'm
05:13 - really excited for part one of building
05:15 - this application let's go to install and
05:18 - actually go to rappelled dot it this is
05:20 - basically an environment that's going to
05:22 - allow us to easily put this app without
05:25 - having to install anything or anything
05:27 - going on along the lines of that so just
05:30 - go and wrap at it and click sign up and
05:32 - once you've clicked sign up you should
05:34 - see a dashboard kind of like this and
05:37 - you should actually have zero obviously
05:40 - applications but I have my to-do app
05:41 - because I already built it so just click
05:43 - plus near Apple that's the first thing
05:45 - select Django let's name it to do that
05:48 - to do a simple career Apple so what it's
05:53 - going to do now is obviously it's going
05:55 - to install the Django environment it's
05:58 - gonna install the server it's going to
06:00 - install all the necessary files for
06:02 - making any things very simple for us
06:05 - click start it's creating my gracious I
06:10 - will talk about these things a little
06:11 - later there you go hello Rapala or hello
06:18 - world alright let's take a look at
06:19 - creating a model now what's a model a
06:22 - model in Django is something that
06:24 - represents a database table
06:26 - that's how Django
06:27 - translate said okay so I'm going to copy
06:29 - a few lines of code here right here I'll
06:32 - copy these lines of code just for times
06:35 - sake okay I want to paste it here so
06:38 - what do we have here okay we've got a
06:40 - class called to do that represents a
06:43 - database table we also have something
06:46 - called at a date and text and these are
06:49 - attributes of a database table right so
06:52 - we have an add a date that's a date/time
06:54 - field and we have a text that's a char
06:56 - field obviously we have those at a date
06:59 - is simply when did we add it to do item
07:01 - and the text field is there because
07:03 - obviously we need to save the text or
07:06 - the to-do item that makes sense
07:08 - and what's Jane going to do is Jenko is
07:10 - actually going to translate these these
07:13 - models and these attributes to database
07:16 - sequel injections in searches and update
07:19 - and so forth so go ahead and click
07:21 - restart just to see what I'm talking
07:22 - about you can see that what's going on
07:25 - is it's creating a model to do
07:27 - interesting right okay okay
07:31 - so with that actually go ahead and click
07:34 - restart again
07:35 - just trust me do it click restart and
07:41 - what's going to happen is you have this
07:45 - migration file right and this is what
07:47 - gingka uses to keep track of the
07:50 - database right it says here create a
07:52 - model with an ID that's an auto field
07:54 - that's a primary key right with an added
07:57 - date as a datum field and text of the
07:59 - chart field and that's pretty much it
08:00 - right now else it gets a lot more
08:02 - complicated on this but I just want to
08:04 - show you because it's very interesting
08:05 - to me that's very important to
08:07 - understand how these things happen on
08:08 - the backend as well okay now we're gonna
08:11 - make this application just a little bit
08:14 - more stylish we're gonna use something
08:16 - called bootstrap which is just like if
08:19 - framework that allows you to make
08:21 - beautiful sites in a much faster pace
08:23 - okay so go ahead and go to bootstrap
08:25 - just type in bootstrap into Google or go
08:28 - to get bootstrap comm you will present
08:31 - it with this beautiful site go to that
08:34 - they come with documentation and we need
08:36 - to install the following okay we need to
08:39 - install the CSS
08:41 - and we test all the GS so go ahead and
08:42 - copy CSS first okay all right now the
08:47 - question is where do we and add these
08:49 - all right so we have the base HTML and
08:52 - we have an index that HTML in a base
08:54 - HTML this is where you have your base
08:57 - structure of the site and now I said
08:59 - that's where you would add it okay so go
09:01 - ahead and just add that to here and
09:04 - let's go ahead and copy the jas files
09:07 - the JavaScript files to here as well
09:11 - once you've done that just click restart
09:16 - and and voila
09:22 - you got a little more stylish hello
09:25 - ripple dot it next we want to create a
09:29 - base layout for an application that does
09:32 - not include any of the logic so far so
09:35 - our goal is to basically create HTML
09:38 - like this without any of the fancy logic
09:41 - just yet okay so let's go to it and do
09:43 - that so what do we need first okay with
09:46 - first we need to create this navigation
09:48 - bar the way we're gonna do that is go to
09:51 - bootstrap and that's let's actually type
09:52 - it in this is literally the process to I
09:55 - do with anything that I do with mousse
09:57 - chaps just type in nav ok and we see we
10:01 - have a navigation bar looks just like
10:03 - this but we're not looking for that
10:05 - we're looking we're looking we're
10:08 - looking no no no no no no no navbar
10:12 - there we go that's the one
10:14 - now bar and we really need a simple nav
10:18 - bar that is of black color let's see
10:23 - let's see so kind of like this you can
10:25 - see right there we have a nav bar okay
10:27 - so we can just copy that in here and the
10:31 - reason we're putting it into the body
10:33 - section the base that hTML is because
10:35 - that's where the whole application
10:38 - inherits the whole HTML right so the
10:40 - legation is something that's gonna stand
10:42 - throughout the whole app okay and that's
10:45 - or we're putting in here so well why you
10:48 - so much
10:50 - like yes but I don't want to copy all
10:53 - this so just copy this part I guess copy
10:56 - that and voila
10:59 - alright refresh so be I mean we have
11:03 - just a black bar nothing fancy
11:06 - now we need the actual wording to do app
11:11 - ok and if you look a little bit more
11:14 - down we can see that in order to get
11:16 - that wording there's something cool a
11:18 - nav bar brand ok so just copy that right
11:25 - there refresh and voila
11:29 - obviously now this is actually call it
11:32 - to-do app to-do app refresh that and
11:37 - that's it right so you've got navigation
11:40 - bar
11:41 - just like you have it in the application
11:44 - that I showed you pretty simple the way
11:47 - we just got that now I'm going to look
11:50 - at how to add all the other parts of the
11:52 - HTML into the application ok the first
11:56 - thing obviously what we need to add here
11:59 - no here we to add like things like at
12:02 - the add item the input box the form and
12:04 - always see the list of to-do items right
12:07 - so let's try this at first we're gonna
12:13 - be working with the NSA HTML because
12:15 - that's the thing that contained s HTML
12:17 - page that contains the container
12:19 - underneath the navigation bar alright so
12:24 - preface ok the way bootstrap works is
12:27 - divided into rows and columns think of
12:30 - it as you just have a lot of rows and
12:31 - within rows you can have a max of 12
12:35 - columns all right so we're gonna do
12:38 - create a row that will contain this know
12:41 - yes contain the add item and this form
12:44 - alright so that's the first part let's
12:47 - do that so div class equals row right
12:52 - I'm going to close that out
12:55 - cool and then the second one is gonna be
12:58 - div whoops no not this one yeah div
13:01 - class class equals column column column
13:15 - wait no I just need to I don't know why
13:20 - I'm doing this again anyways great so
13:24 - now if we refresh this out in obviously
13:26 - nothing is going to happen but at this
13:28 - point now we know we need to add this
13:32 - add item h1 tag or no h2 attack in this
13:36 - case we're going to H - H - add item h2
13:43 - all right all right it's there but you
13:47 - can see there's no padding right it's
13:49 - just all the way up to the box one thing
13:52 - you forgot to do is to add a container
13:55 - with bootstrap everything kind of has a
13:58 - parent container a big container that
14:01 - contains the whole plication so when we
14:04 - go to base HTML you can see underneath
14:06 - the navigation bar we have all the blog
14:08 - content this is the blog content that is
14:11 - inherited from here right you see this
14:14 - extends to HTML so what we are going to
14:18 - do is we're gonna add a container a
14:20 - class container class equals a container
14:24 - and then we're gonna obviously close
14:27 - this out I like to add my spacing I'm
14:32 - very particular about that great now we
14:35 - have a container okay we've got that
14:39 - part now let's go ahead and add the info
14:41 - box and I'm gonna show you how I go
14:43 - about finding or just adding an info box
14:46 - from bootstrap so go back to bootstrap
14:48 - alright
14:49 - type in forms right perfect
14:53 - and we're just gonna simply scroll and
14:55 - see what we can add that's similar
14:58 - that's similar okay so I'm gonna scroll
15:01 - now I know at this point I do know where
15:02 - I want to go because I've done this
15:04 - previously but if we just keep going
15:07 - keep going for example we don't
15:08 - anything too complicated I'm just kind
15:10 - of browsing that's good I kind of want
15:14 - to add this as well yeah that looks good
15:17 - that looks good but I think I'm gonna
15:21 - just do like an inline form here so
15:23 - first things first we want to add an
15:26 - input box like this and that's
15:28 - represented by this fancy mommy not
15:32 - fancy just this this line of code I
15:34 - guess I don't know I said fancy anyway
15:38 - so it we're gonna copy that and then put
15:40 - type stack copy that and paste it okay
15:42 - so we have type text' class form control
15:45 - margin bottom to margin right - all
15:50 - right so we don't need the ID there's no
15:53 - need for it for the placeholder we're
15:56 - just gonna do type here and the
15:58 - placeholder is what's gonna be seen
16:00 - inside the input box right next me to
16:03 - add a button actually not refresh this
16:05 - first right there perfect
16:07 - we've got herself an input type next add
16:10 - a button we're gonna just gonna do
16:13 - there's a button right there there's
16:15 - some really cool button submit button
16:18 - copy that paste it here
16:21 - voila you got a button now we want to do
16:24 - is you want to add a list of items right
16:26 - so go ahead and let's look for a list of
16:29 - items list group or something like a
16:32 - list group perfect there you go now you
16:36 - have a list group we know it's going to
16:39 - look like this let's just add it we
16:42 - don't want to however however we don't
16:44 - want to just add it at the bottom of
16:45 - this section I want to create a separate
16:48 - row forward because I had a separate
16:50 - distinction and so I that's how I like
16:52 - to divide things up so I'm gonna do
16:54 - class class equals row right
16:59 - I remember in Bush room you can have as
17:01 - many rows as you want the only the only
17:04 - restriction is you can have only 12
17:06 - columns div class equals column
17:11 - who Dave no why do I keep do this
17:17 - alright perfect and we now need to you
17:25 - literally just copy this for the sake of
17:28 - seeing how it looks like we're gonna
17:31 - we're gonna format this a little bit
17:33 - nicely okay you can just select it and
17:36 - just click for well or not or just do it
17:39 - by yourself right
17:43 - refresh it there you go now it has the
17:47 - active on but we don't need that just
17:49 - from we can remove the active portion
17:50 - perfect you can see that's we have now a
17:55 - list of items just what we want to do
17:58 - which is what we want so I just took a
18:00 - second to see how we can move the submit
18:01 - button to the top so it's in line with
18:03 - this input input type right and one
18:07 - thing I missed is that if you want to
18:08 - have a inline form you just have to
18:12 - create a form container with a form
18:14 - online class okay and we're gonna do
18:16 - that so create a form class equals form
18:22 - in line and then in here form just like
18:29 - that well need to close this out
18:30 - obviously
18:32 - [Music]
18:35 - hmm I really don't like how this just
18:40 - for a minute okay and if you refresh
18:43 - it's completely gone that's where did it
18:48 - go why did I just disappear oh there it
18:54 - is this is so funny
18:57 - anyways yeah so now you got the form now
19:01 - I do want to add something to the top so
19:03 - with the what you do with my for example
19:04 - I'm gonna add some penny here right
19:06 - there so I'm gonna do something called a
19:08 - margin top four so we're doing MT - 4
19:13 - which stands for margin top 4 all right
19:17 - so we added some penny over there and
19:18 - we're also gonna add some up heading to
19:20 - this row as well margin top - 4 perfect
19:24 - all right so it's some good that's a
19:26 - little better formatting now I know what
19:29 - you're saying you're saying Nazari why
19:32 - are we learning all this HTML where is
19:34 - the jingle stuff okay so hold on it's
19:37 - coming now now we're going to get into
19:39 - the Jingu stuff what do you want to do
19:41 - first initially what we want to do is we
19:43 - want to be able to add an item through
19:45 - this input box correct so let's see how
19:48 - we do that now what happens is when you
19:51 - add an item we need somewhere to catch
19:53 - that data and save it and database
19:55 - correct so let's take a look at this use
19:59 - the py file here we have this function
20:02 - called definition home right and this
20:04 - definition home actually really nicely
20:06 - definition - it's a function it renders
20:09 - the in XHTML so probably makes sense
20:12 - that some were in here we probably do
20:14 - create a function to capture the data
20:16 - from this form correct so let's do it
20:19 - we're going to create a function called
20:20 - add to do right we're gonna have the
20:24 - same parameter request and we're going
20:28 - to print this request for now all right
20:32 - perfect
20:33 - now you're saying okay well how does
20:35 - jingle know to call this function what
20:38 - we're gonna find out so go to your Elza
20:40 - py file and you can see it this year as
20:42 - a py file has has all the URLs that
20:46 - contribute to a
20:47 - certain view we said we have this called
20:50 - views and you see this views that home
20:52 - that's being cold that calls this so we
20:56 - simply need to call views that add to do
20:59 - to trigger the function let's do that so
21:03 - we are going to trick the URL I know if
21:09 - I type correctly all right
21:11 - no not know what I said
21:14 - we're going to now URL but this time
21:18 - we're gonna say URL add to do right what
21:23 - to do and that triggers a function
21:26 - called views dot add to do so create
21:32 - that comma great so we have your else in
21:34 - place right we have the logic we all
21:37 - have the logic a but we have the
21:38 - function in place now we need to
21:40 - actually we now we need now we need to
21:42 - have this form call that URL so a form
21:47 - has something called an action action
21:51 - and that action is this URL right we
21:56 - need to tell it to go to this URL so go
21:59 - here I shouldn't have to do and the
22:01 - method we're gonna pass in the data
22:04 - through a post method there's a get
22:08 - there's a post is actually a multiple
22:10 - one but post means we're posting
22:12 - something think of it like that
22:14 - okay we also need to change no this is
22:20 - fine type submit that's fine and that's
22:22 - pretty much let's see what happens okay
22:25 - it's broken
22:26 - great they include your and does not
22:29 - appear to have any patterns in it no
22:34 - well it does you have URL
22:44 - oh oh I know why because it probably got
22:49 - stuck so if we just simply restart
22:54 - restart restart restart restart restart
22:58 - restart yes please start alright there
23:02 - you can now it's working let's type this
23:04 - in the room yeah it's broken
23:12 - is there something coolest CSRF token
23:15 - well what do we know now we know that
23:18 - it's hitting this URL because when we
23:19 - hit this URL it broke which is great now
23:25 - we just solve this issue right Deena
23:27 - breath is just a way for us to protect
23:30 - the form to make sure that there's no
23:32 - spam form submissions that's why that's
23:36 - what jingle has for to protect its form
23:38 - okay for the purpose of this video we're
23:40 - going to unprotect it I guess you can
23:43 - say because I've tried it with trying to
23:46 - protect the CSRF in here in Rapada in
23:50 - for some reason I've always have not
23:52 - been able to and I think it's due to a
23:54 - virtual machine issue but in order to
23:58 - for us to be able to go through and not
24:01 - have it be cos or F protected I guess
24:04 - here's all we need to do so we've got to
24:06 - use up UI file and so I'm gonna search
24:10 - in CSRF exempt CSRF exam there we go
24:20 - there are this so we're gonna copy this
24:25 - paste in here and now we do CSRF exempt
24:34 - exempt and that gives us an exemption
24:38 - that way if we go ahead and simply just
24:40 - type in here anything submit what didn't
24:44 - return a race race all right yeah in
24:46 - this case we are going to redirect back
24:50 - to the home page okay we can literally
24:53 - just simply do like this for now return
24:56 - and render the same home page that's it
25:01 - and if we refresh that okay buh-bah but
25:06 - you see now with nothing is saved but
25:09 - all we have done is we look here we have
25:11 - printed this request right we now have
25:13 - this request great now I want to print a
25:17 - little that one take a little bit deeper
25:18 - this request okay if I go documentation
25:21 - of Django and I tap and request
25:23 - I request object but inevitably deleted
25:29 - to do HP request object here is what the
25:32 - request object contains it contains
25:34 - things like cookies method right in this
25:37 - case however what we want to look at is
25:40 - this post right so this post is
25:43 - dictionary like object containing all
25:45 - gears should be HTTP POST parameters so
25:48 - if we print that out request dot post
25:53 - right and if we refresh this let's type
25:59 - this in refresh it actually type to send
26:02 - submit you see that's a Nampa dictionary
26:05 - now why is an expedition there you might
26:07 - be saying well okay let's take a look at
26:10 - it in order for it to post something
26:14 - every input has has to have a name write
26:18 - a value to have a value you have to him
26:21 - a name have a name attribute so in this
26:24 - case the name answer will be content
26:26 - okay let's refresh this again type in
26:32 - python 101 book
26:37 - right click Submit and voila you got
26:41 - yourself a dictionary that with the
26:45 - content from the input provided by a
26:48 - user right now we can see and with I
26:51 - mean obviously with this we can actually
26:53 - use it and create a to-do item and a
26:57 - database great great great great great
27:00 - that's awesome so let's go back to the
27:01 - views that py file we now know how this
27:04 - request a post works all right
27:07 - know what we do what do we do now
27:10 - we to capture two things we need to
27:12 - capture the add a date and we need to
27:14 - capture the content right so let's do it
27:18 - in order for us to capture that at a
27:20 - date what we're going to use is we're
27:22 - actually going to simply create a add a
27:24 - day to look like the current date
27:25 - there's something called a time zone the
27:28 - Gengo has and so we're gonna import from
27:30 - Django die utils import time zone
27:36 - alright time zone and what we're gonna
27:41 - do is we're going to create add a date
27:45 - date equals time zone dot dot now and
27:51 - that is simply a time zone object of the
27:54 - current literally just the current time
27:56 - that we are creating this alright so
27:59 - that's great now we need to grab the
28:01 - content of the actual this request that
28:05 - post so let's go ahead and do that again
28:08 - we can say content equals request dot
28:12 - post and inside here will say request up
28:16 - post content and that will give us the
28:20 - content of of what we typed in here ok
28:24 - let's now let's try this out so we're
28:26 - gonna print the date
28:29 - okay this is literally the way I'm
28:31 - teaching you guys is there Lea how I how
28:35 - I develop ok I I print things out I test
28:39 - things out because the last thing you
28:40 - want to do is you want to write a bunch
28:41 - of functions and
28:44 - and then you realize that you did it all
28:45 - wrong right because you didn't test it
28:47 - and so as I go along I test things and
28:50 - that's what you should do - honestly I'm
28:52 - not the only one who do who does this
28:54 - trust me print content we don't need to
28:57 - print this anymore right
28:58 - so refresh it okay
29:03 - Oh 101 book click Submit let's see what
29:12 - happened here
29:12 - oh well my right so if we I'm gonna
29:17 - highlight this okay
29:18 - this was our request okay here is what
29:22 - got printed this is the date another
29:24 - date it's a time zone day 2000 1908 15
29:28 - and this is the content one-on-one book
29:30 - perfect perfect and then we obviously
29:35 - refreshed okay great great great
29:40 - now with this data in here we've
29:44 - captured this data we need to say to say
29:46 - that somehow
29:46 - so what jingle has is jingle has those
29:50 - memory those class to-do items that
29:52 - we're going to use we're going to import
29:55 - from Jenga models from I think it's
30:00 - mainly models from Maine so you see this
30:02 - mean that models import to do we are
30:08 - importing literally this class okay
30:12 - import this class and so let's go ahead
30:15 - and actually create a model right right
30:21 - so jingle create object right in this
30:26 - case crate out of it we're gonna create
30:29 - a model instance and there should be
30:35 - create function all right yes we have
30:39 - that but I want to do is there we go if
30:42 - you look at here what jingle gives us is
30:44 - gives us this you know every class has
30:47 - an instance called object and there's a
30:50 - lot of functions that that class has and
30:52 - one of those is a crate function and
30:55 - that literally creates a creates a date
30:58 - bass actual entry right so if we use
31:03 - this it says my mod F is a crate and for
31:06 - us it's going to be to do right to do to
31:10 - do the objects that create now what are
31:15 - we importing into here okay we up we
31:18 - need put in put a few things if you look
31:20 - at our models we have the add a date if
31:23 - you have a text okay go back to use the
31:27 - add a date equals
31:32 - actually I'm going to change this this
31:34 - date this is current I'm going to
31:39 - changes the current date okay at a date
31:43 - equals current date then the text test
31:49 - another attribute equals content perfect
31:55 - text equals content to the opposite
31:57 - create at a date equals current date
31:59 - text equals content with this when we
32:03 - run this function and we click Submit
32:04 - now it should create a database object
32:08 - or a database entry let's try this
32:11 - Python 101 look submit good why can't
32:24 - you eat you I can figure than good okay
32:28 - let me start this that's why we start
32:31 - this in this happens you just restarted
32:35 - perfect perfect alright so let's try
32:38 - this again
32:40 - 101 book just for manager object has no
32:45 - attribute doc sorry creek obviously I
32:49 - can't spell create perfect so let's try
32:54 - this again
32:56 - 101 book submit great now you're
33:01 - probably like well hold on I didn't see
33:03 - anything how am I supposed to know there
33:04 - has been created
33:05 - well uno momento por favor okay
33:10 - here's what we'll do this is created
33:13 - object and we're going to print quite
33:21 - quite it created we're going to print
33:25 - this created object okay create object
33:28 - to print and we're going to print an
33:30 - another thing I'm going to print create
33:32 - an object that ID because if we know it
33:35 - has an ID that means it's a database
33:37 - instance or not I'm sorry a database
33:40 - entry so oh let's try this again at item
33:48 - 101 book submit there we go to do object
33:57 - to the idea of it is to that means it's
34:00 - created if we want to actually there's
34:02 - another way you can do this is we can
34:05 - also print so list of list of let's say
34:10 - length of - dues of traduz I'm doing
34:17 - this as literally I'm trying to get you
34:19 - to understand how this all-around works
34:21 - it's an object relation relationship
34:23 - object object relations relation manager
34:26 - okay so just a good way to for you to
34:30 - understand how these things work so
34:31 - there's a to do object dot all that
34:38 - count that will get you them the count
34:41 - of all to-do items in a database and if
34:45 - we know how the object if we know it's
34:47 - increasing in order for we know it's
34:49 - greater than zero that means it's being
34:51 - inserted so it's the objects that all
34:52 - that count I'm gonna print that boom
34:56 - length of - dues voila it's doing a lot
35:06 - of its fancy stuff it's always there you
35:11 - go perfect so now go ahead and number
35:16 - two just to try it out so here's what we
35:20 - got this is the object three right
35:23 - because we already had one
35:23 - we had to this is 31 and the length of
35:26 - the whole table I guess I can say is 3
35:29 - that means this is working right all
35:32 - right so now that we have confirmed it's
35:34 - working let's erase this and the second
35:38 - part is actually going to be listing
35:40 - this now we need to list the actual
35:42 - to-do items to list the to-do items so
35:44 - we have to do a couple of things first
35:47 - is we need to grab the islands phone
35:49 - database and then second is we need to
35:51 - transfer those to-do items to the HTML
35:54 - page and the loop through them okay so
35:57 - let's see how we do that we have this
35:59 - function called home and this function
36:01 - home is what brings us the home page
36:04 - right now through here is where we'll be
36:06 - able to actually take to-do items and
36:09 - transfer them to the front end page so
36:12 - let's let's do that okay we're gonna
36:15 - going to grab to-do items from the
36:20 - database and again we're going to use
36:22 - the same type of functionality as we did
36:25 - when we added a to-do item right or to
36:27 - list a to-do item right so here we have
36:29 - to do objects that all right and that
36:33 - will grab us all the to-do items in the
36:35 - database the second thing we're going to
36:38 - do is we're going to order the to-do
36:40 - items by the add a date so there's a
36:42 - function call order by and this takes in
36:48 - the parameter that you want to order by
36:51 - so the attribute that you can order by
36:53 - like which actually want to order by
36:54 - text you know ordered by the date and so
36:57 - that's what we specify at a date okay
37:02 - all right and within this we need to now
37:07 - transfer these items this this list to
37:10 - the next HTML and so this render
37:13 - function right here has a third
37:15 - parameter to transfer data okay so we
37:18 - will speaking specify an object here and
37:20 - we can tell okay so to do items right
37:24 - and the object to transfer is to do
37:28 - items right so it's gonna take the items
37:31 - that's from here and it's gonna be
37:33 - inside this object okay
37:37 - so we've transferred that great now
37:39 - let's see how we can use it okay we have
37:42 - an XHTML and you can see that we have
37:45 - just a bunch of fake data now we need to
37:48 - replace this fake data with actual
37:50 - looping of the items so jingle has a
37:53 - template language that allows you to use
37:56 - a lot of gingka functionalities within a
38:00 - template in this case we're gonna use a
38:03 - functionality called for so the way you
38:07 - do it is you have a bracket syntax and
38:10 - you do for to-do item I don't in to-do
38:16 - items and again this name right here is
38:20 - the name that we specified in here so
38:22 - just keep that in mind if you change
38:24 - this you will have to change this name
38:27 - okay after we're done for in order to
38:30 - close this area for loop we have to do
38:32 - and four and four okay and inside here
38:38 - we're gonna lose that this is where we
38:41 - will display the list items so we have
38:44 - this list item and obviously to replace
38:47 - this text here okay great replaces text
38:52 - not what do we replace it with we have
38:54 - to use this to-do item right this is
38:57 - it's going to loop through each do item
38:58 - and so this is gonna be an individual
39:01 - to-do item there's a syntax where in
39:04 - order to use the object you use a double
39:07 - bracket syntax and then you do to do
39:09 - item to do item dot the attribute you
39:15 - want to use so in this case want to use
39:16 - a text right because that's what we have
39:18 - in the Mazda py so we have text okay so
39:22 - we have that and let's see if that
39:24 - actually brings us something let's
39:26 - remove this okay
39:30 - remove this did it use it to do restart
39:33 - just to restart let's see what happens I
39:38 - hope it doesn't break I really hope it
39:41 - doesn't break I don't see why it won't
39:44 - break
39:45 - alright so this is this is just a random
39:49 - text that we had in
39:51 - side inside the database okay with that
39:54 - in mind we are now looping through to do
39:57 - items right so let's test and see if we
40:00 - add a to-do item if that will actually
40:02 - display anything if we go ahead test to
40:07 - submit nope nothing's working
40:11 - now why is it not working let's look at
40:14 - look the views up you I file you see how
40:16 - when we when we added to-do item that
40:19 - that takes us this to this function and
40:21 - this function renders again in the next
40:26 - HTML but doesn't pass in the do items so
40:29 - what do we do instead of rendering we
40:32 - can actually direct the page to a to a
40:36 - home page so some there's something
40:39 - called HTTP response redirect so if we
40:41 - go to Google response redirect method no
40:48 - I don't want Microsoft jingo but I think
40:51 - oh there you go let's type in we don't
40:57 - need this just with their response
41:01 - redirect clash spears funds redirect and
41:04 - the way you get you grab that from Genco
41:08 - HTTP right this is ticklish EEP that's a
41:12 - real clever form and then we can
41:13 - redirect it to a certain a certain URL
41:15 - which in this case will be the home URL
41:17 - so let's do that for also from its let's
41:21 - imported first so from Django da HTTP
41:27 - import HTTP response redirect I hope
41:33 - that I spot that correctly no they're
41:35 - not copy this spelling sometimes you
41:39 - guys I swear HTTP response redirect so
41:44 - that shouldn't break
41:45 - I hope let's use this function HT
41:48 - Pyrrhus must be direct we're going to
41:51 - use this function I'm going to redirect
41:53 - it to the home page and if you redirect
41:55 - the home page it is now going to use
41:58 - this function after you add it to do
42:03 - right
42:04 - let's try this again all this is our
42:05 - test too by the way right so we
42:07 - submitted it okay let's try it again
42:09 - test three submit test 3 test 4 submit
42:16 - voila it is working you guys that is
42:19 - awesome
42:20 - now one thing I don't like our is as we
42:23 - are adding these test 1 test 2 test 3
42:26 - test you see how they're going or going
42:27 - over to the bottom we want to reverse
42:30 - that right because obviously we want to
42:32 - have the newest item to display first so
42:36 - no do that we simply have to put a minus
42:39 - that's it that's literally it because
42:42 - this takes us from the newest date to
42:45 - the oldest date if we did it like this
42:47 - without the - it's gonna take us from
42:49 - the oldest date to the newest date
42:53 - that's all where this - comes in now
42:55 - let's try this again let's refresh well
42:59 - we need to refresh the actual database
43:01 - or the actual server do that there we go
43:06 - you test for test retest through that's
43:08 - - and then it about 80 SDG perfect and
43:14 - now you pretty much have the list of do
43:18 - items and we're getting really close to
43:20 - the end now the only thing left now the
43:22 - only thing left is to you have a dilly
43:25 - functionality in this as well so let's
43:27 - get to this next all right so the final
43:31 - step we need to take is to be able to
43:33 - delete a certain item which as we saw
43:36 - before was to have a delete button here
43:37 - ok first things first we're gonna do is
43:40 - to actually insert our add a delete
43:42 - button to the right side of every to-do
43:45 - item so let's go ahead to the index.html
43:47 - and we'll do that here okay we have the
43:51 - text here okay this is the to-do item
43:55 - within here however we're going to add a
43:57 - button would you a button that's pretty
43:59 - much the same as here so we can copy
44:02 - this button just like that and we'll
44:06 - paste in this button right here right
44:10 - there perfect now that was not going to
44:15 - work the way you want it first things
44:16 - first is you see how there's a get a bar
44:18 - margin here at the bottom will remove
44:20 - the margin some MB - - is just margin
44:23 - bottom so we're gonna remove that that's
44:24 - one if we refresh it okay so that kind
44:28 - of remove some of the space there but
44:30 - now we need to do easily to float this
44:32 - button to the right side so if we create
44:35 - a class or div div around this okay
44:39 - close this div oops okay so that's the
44:44 - button and we're actually going to where
44:48 - the class is equal to there is a float
44:52 - right bootstrap class you can do this in
44:55 - CSS as well but if you type in float for
44:57 - example and you do float right okay
45:02 - float right right there now it floats
45:07 - right one other thing I want to do is
45:09 - I'm going to Center this text but we're
45:11 - gonna worry about this a little bit
45:12 - later and I also want to change the
45:15 - button to be button small there's a
45:18 - there's a class in blue shell which is
45:20 - button - small which just makes it a
45:22 - small button see there you go we've got
45:26 - a button now literally that that's
45:27 - pretty much it one other thing is one
45:30 - main thing actually is now we have to
45:33 - have this button do something right and
45:36 - obviously it's also going to be delete
45:39 - that's the text for it all right and one
45:45 - other thing we want to do is instead of
45:47 - having it be a primary button so if we
45:50 - go back to buttons just really quickly
45:52 - you see this danger we're gonna use like
45:54 - a danger one because you know we don't
45:56 - want people to delete an accident you
45:58 - want it to be kind of like a warning I
46:00 - guess you can say no a danger so we're
46:02 - gonna make it a button - danger instead
46:04 - of a bun - primary danger right there
46:09 - perfect awesome awesome awesome awesome
46:11 - last thing okay we need to create a form
46:14 - because we want this button to do
46:16 - something just like it we have here
46:18 - where you have a form action we need to
46:20 - have the same thing for every single
46:22 - button that displays there so create a
46:25 - form okay just for now just as simple
46:30 - form just like that we're going to
46:33 - inside this form we need an action item
46:36 - all right so where is this what does
46:38 - this go to trigger or where is this
46:40 - going to lead or when the button is
46:43 - clicked or is it going to lead we're
46:45 - gonna name a URL just called delete to
46:49 - do and we need to pass something because
46:53 - when you delete a certain item obviously
46:55 - we don't want to delete all of the items
46:57 - so I'd be wonderly a specific one and so
47:00 - as a result we need to pass the ID of
47:03 - every or of an individual item to know
47:06 - which one to delete on the back end
47:08 - right
47:08 - so if we just simply use and we specify
47:13 - okay
47:13 - delete to do and the idea to do is to do
47:17 - item dot ID right and remember that's
47:21 - the unique ID of every single item and a
47:24 - slash and now we know that that's what's
47:26 - going to do action is obviously post
47:29 - just how we had it before perfect and
47:33 - refresh now obviously if you do this
47:36 - it's it's not going to get you any work
47:38 - if you actually need to create the URL
47:40 - and the view for it so let's do that so
47:42 - just refresh it for now perfect we have
47:45 - a delete to do that looks good that
47:47 - looks good now let's go to the URLs file
47:49 - we have this add to do now we need to do
47:52 - the same thing for delete to do all
47:55 - right so delete to do but with this we
48:01 - need to capture one more thing and that
48:04 - thing is the integer or the primary ID
48:07 - of a specific item so what you in in
48:10 - Django which you can specify you can
48:12 - slowly specify a parameter a type
48:15 - parameter and name it so to do ID like
48:19 - this slash and so Django will will
48:23 - actually map this and know that okay so
48:26 - that it should be to do ID here and I'm
48:29 - going to pass this now to a views dot py
48:33 - file no well obviously don't want to
48:36 - pass this to add to do now you want to
48:38 - pass it to delete to do which we haven't
48:40 - created yet but we're going to right now
48:42 - so let's try
48:45 - so let's go to views up your wife I'll
48:47 - and we can create a same function delete
48:52 - No delete to do right I get requests but
48:58 - one other thing is the to do ID because
49:01 - that's the second parameter it's going
49:02 - to be passed in through here it to do ID
49:06 - so we're gonna pass the center here
49:09 - right one other thing I want to mention
49:12 - is just for the sake is we're gonna do
49:14 - this yourself exempt as well for this
49:16 - one because this is a form and just
49:19 - let's take with the video we're gonna
49:20 - put that in and we're going to print it
49:24 - to do ID which ID are we removing and
49:28 - then we can go ahead and return the same
49:31 - HTTP plans to redirect to the home page
49:35 - okay let's try this now refresh this or
49:43 - should it not refresh restart this again
49:46 - if you get that error just restarted and
49:48 - you should be fine perfect let's try
49:51 - this again
49:52 - alright when we click delete nothing
49:56 - happens
49:57 - this error is because of the URLs the
50:01 - URL function right here is actually
50:03 - deprecated one so this one came
50:05 - initially with with kind of the Django
50:08 - setup but it's actually deprecated if we
50:10 - look at the y'all dispatcher you'll see
50:13 - that Django now but the latest version
50:15 - uses path and so if we go had an import
50:19 - for merging URL stop half right and
50:22 - you're gonna run these these problems
50:23 - sometimes so that's okay that's a
50:25 - learning learning opportunity so with a
50:27 - path I can actually just specify a like
50:30 - this path delete to do reusability to do
50:34 - and now this should work so if we take
50:37 - tight take it like this perfect you see
50:40 - that was completely okay and you can
50:42 - probably even do the same thing here so
50:45 - path like that there you go path like
50:50 - that and you can leave this alone for
50:52 - now alright we've got that working it
50:55 - when we click delete
50:56 - this is the ID the ID is for and that's
50:59 - what so if we do it again right there
51:02 - you can see that it printed out four
51:06 - which is the ID of that to-do item now
51:08 - what do we do with that to-do item once
51:10 - we have that ID we actually need to
51:12 - delete it and we get we're going back
51:14 - now to the Django or M object relational
51:17 - mapping well the way you delete an item
51:20 - within Django is you do to do the
51:23 - objects that get ID equals to do ID dot
51:31 - delete and literally that's it let's
51:34 - test it let's see how this works guys
51:37 - let's restart it because obviously we
51:39 - have we got some error right here all
51:43 - right now let's go ahead delete delete
51:47 - delete
51:48 - and it's delete and you can see it is
51:52 - working guys so let's let's do a test
51:54 - run fully with this let's go ahead and I
51:57 - get B said read Python 101 book go for
52:04 - know for for for go for Iran perfect
52:10 - let's make some lunch make some lunch
52:14 - perfect and that's what you guys got now
52:19 - you have a to-do item and to-do app with
52:23 - complete submit functionality with
52:25 - complete delete functionality and you
52:28 - have the proper the proper logic behind
52:31 - it and that is awesome you guys have
52:34 - done it if you guys follow along
52:36 - that is amazing I want to congrats to
52:37 - you alright that is it for the tutorial
52:40 - guys I really hope you enjoyed it and
52:42 - that you took away something from it
52:44 - that is the most important part if you
52:47 - have any questions whatsoever or any
52:49 - problems feel free to comment down below
52:51 - or you can message me on my Instagram
52:54 - and Nas dumansky and if you did copy the
52:58 - app I want to see it share with me
52:59 - seriously I'm not kidding
53:01 - other than that
53:02 - I hope you guys have an amazing day and
53:05 - I'll see you later
53:07 - if you're interested in learning how to
53:11 - become a freelance developer we have a
53:14 - three part master class for free that
53:17 - you can sign up using the link in the
53:19 - description below you'll sign up we'll
53:21 - send you the videos and you'll be able
53:25 - to learn a lot and take your coding
53:26 - journey to the next level
53:28 - [Music]
53:45 - [Music]

Cleaned transcript:

how's it going everybody hope you guys are doing amazing my name is Ari and I am a fullstack developer who's been working with Django for quite a while now and today I am here to teach you how to build a jingle to do and if you're interested in learning how to become a freelance developer we have a three part master class for free but you can sign up using the link in the description below you'll sign up we'll send you the videos and you'll be able to learn a lot and take your coding journey to the next level we learned today we will learn how to create a jingle todo app that contains the back in the front end and the database all working together we will also learn how to use bootstrap and its basic structure to create beautiful looking applications and we will then we will learn how to create a jingle model a jingle view where all your program logic will live and then finally we will learn how to use the jingle RAM to manipulate the database and I think overall you will learn how to take an idea that's in your mind they'll bite it up into pieces and put it into reality because that is a very important part now the best way to learn this tutorial is to code along with me that is very important you guys now if you run into any problems I linked the code below and you can just kind of use it to compare the contrast and see where you were wrong now if you are really stuck you can either comment on youtube or you can direct message me on instagram and Nas dumansky and i'll be happy to answer any of your questions now that let's get started guys alright so before starting any new project I like to write out a very simple requirements document like this okay so let's take a look at first things first is the goal what are we trying to achieve with this app right so we want to allow users or customers to keep track of things they would need to do on a daily basis so that's the goal the user story is what can users do on the application functionalitywise the first thing they can do a user can view his or her list of todo items so that's number one number two is a user can create a new todo item it's number two and a third one is a user can delete a current todo item and so these three personalities will tell us what we have to write in terms of codewise right and so after that I like to do a simple flow diagram because I'm more of a visual person and this helps me a lot trust me so as you can see we started with a stickfigure which is a user it's a very nicely drawn stick figure a user will load the web page what's gonna happen next we're going to get to do items of cause I'm guessing we will have them stored somewhere in the database and then we will show todo items somewhere in a template page so that covers our first user story the second user story is again we start with a stick figure and what they can do is they can input in your todo item because we'll probably have an input box they will click Submit we will add that item to a database and we will reload and we used to pursue when you reload you see that kind of traces back to the beginning through here but we will get to do items and show the items and so that covers those two user stories now my challenge to you is to create a third flow diagram for the third user story because you will see just how useful this is now with this out of the way let's go ahead and get into the coding I'll see you guys there let's take a look at what we're actually going to make now here's the application obviously it's cold let's do app and it's pretty simple as a customer or as a user let's say I let's say I want to add a few todo items that I want to do for the day so I want to read it my Python what a onebook which is very important obviously right I need to go for a run right and then I'm gonna take the jingle toriel take the jingle tutorial to tour tutorial perfect and as I do these things right I just simply click delete delete delete and that's it and I'm done and as you can see that's pretty much the whole app it's very simple but very functional and looks good as well but the important thing to understand here is the core concepts behind building application like this right because now you get to learn things like back in and how the back interacts with the front end and how now the back interacts with a database all those things are very important for not just building applications like these but building much bigger applications like Instagram Facebook Twitter or anything like that so what that being said lets us take a look at how we build this because I'm really excited for part one of building this application let's go to install and actually go to rappelled dot it this is basically an environment that's going to allow us to easily put this app without having to install anything or anything going on along the lines of that so just go and wrap at it and click sign up and once you've clicked sign up you should see a dashboard kind of like this and you should actually have zero obviously applications but I have my todo app because I already built it so just click plus near Apple that's the first thing select Django let's name it to do that to do a simple career Apple so what it's going to do now is obviously it's going to install the Django environment it's gonna install the server it's going to install all the necessary files for making any things very simple for us click start it's creating my gracious I will talk about these things a little later there you go hello Rapala or hello world alright let's take a look at creating a model now what's a model a model in Django is something that represents a database table that's how Django translate said okay so I'm going to copy a few lines of code here right here I'll copy these lines of code just for times sake okay I want to paste it here so what do we have here okay we've got a class called to do that represents a database table we also have something called at a date and text and these are attributes of a database table right so we have an add a date that's a date/time field and we have a text that's a char field obviously we have those at a date is simply when did we add it to do item and the text field is there because obviously we need to save the text or the todo item that makes sense and what's Jane going to do is Jenko is actually going to translate these these models and these attributes to database sequel injections in searches and update and so forth so go ahead and click restart just to see what I'm talking about you can see that what's going on is it's creating a model to do interesting right okay okay so with that actually go ahead and click restart again just trust me do it click restart and what's going to happen is you have this migration file right and this is what gingka uses to keep track of the database right it says here create a model with an ID that's an auto field that's a primary key right with an added date as a datum field and text of the chart field and that's pretty much it right now else it gets a lot more complicated on this but I just want to show you because it's very interesting to me that's very important to understand how these things happen on the backend as well okay now we're gonna make this application just a little bit more stylish we're gonna use something called bootstrap which is just like if framework that allows you to make beautiful sites in a much faster pace okay so go ahead and go to bootstrap just type in bootstrap into Google or go to get bootstrap comm you will present it with this beautiful site go to that they come with documentation and we need to install the following okay we need to install the CSS and we test all the GS so go ahead and copy CSS first okay all right now the question is where do we and add these all right so we have the base HTML and we have an index that HTML in a base HTML this is where you have your base structure of the site and now I said that's where you would add it okay so go ahead and just add that to here and let's go ahead and copy the jas files the JavaScript files to here as well once you've done that just click restart and and voila you got a little more stylish hello ripple dot it next we want to create a base layout for an application that does not include any of the logic so far so our goal is to basically create HTML like this without any of the fancy logic just yet okay so let's go to it and do that so what do we need first okay with first we need to create this navigation bar the way we're gonna do that is go to bootstrap and that's let's actually type it in this is literally the process to I do with anything that I do with mousse chaps just type in nav ok and we see we have a navigation bar looks just like this but we're not looking for that we're looking we're looking we're looking no no no no no no no navbar there we go that's the one now bar and we really need a simple nav bar that is of black color let's see let's see so kind of like this you can see right there we have a nav bar okay so we can just copy that in here and the reason we're putting it into the body section the base that hTML is because that's where the whole application inherits the whole HTML right so the legation is something that's gonna stand throughout the whole app okay and that's or we're putting in here so well why you so much like yes but I don't want to copy all this so just copy this part I guess copy that and voila alright refresh so be I mean we have just a black bar nothing fancy now we need the actual wording to do app ok and if you look a little bit more down we can see that in order to get that wording there's something cool a nav bar brand ok so just copy that right there refresh and voila obviously now this is actually call it todo app todo app refresh that and that's it right so you've got navigation bar just like you have it in the application that I showed you pretty simple the way we just got that now I'm going to look at how to add all the other parts of the HTML into the application ok the first thing obviously what we need to add here no here we to add like things like at the add item the input box the form and always see the list of todo items right so let's try this at first we're gonna be working with the NSA HTML because that's the thing that contained s HTML page that contains the container underneath the navigation bar alright so preface ok the way bootstrap works is divided into rows and columns think of it as you just have a lot of rows and within rows you can have a max of 12 columns all right so we're gonna do create a row that will contain this know yes contain the add item and this form alright so that's the first part let's do that so div class equals row right I'm going to close that out cool and then the second one is gonna be div whoops no not this one yeah div class class equals column column column wait no I just need to I don't know why I'm doing this again anyways great so now if we refresh this out in obviously nothing is going to happen but at this point now we know we need to add this add item h1 tag or no h2 attack in this case we're going to H H add item h2 all right all right it's there but you can see there's no padding right it's just all the way up to the box one thing you forgot to do is to add a container with bootstrap everything kind of has a parent container a big container that contains the whole plication so when we go to base HTML you can see underneath the navigation bar we have all the blog content this is the blog content that is inherited from here right you see this extends to HTML so what we are going to do is we're gonna add a container a class container class equals a container and then we're gonna obviously close this out I like to add my spacing I'm very particular about that great now we have a container okay we've got that part now let's go ahead and add the info box and I'm gonna show you how I go about finding or just adding an info box from bootstrap so go back to bootstrap alright type in forms right perfect and we're just gonna simply scroll and see what we can add that's similar that's similar okay so I'm gonna scroll now I know at this point I do know where I want to go because I've done this previously but if we just keep going keep going for example we don't anything too complicated I'm just kind of browsing that's good I kind of want to add this as well yeah that looks good that looks good but I think I'm gonna just do like an inline form here so first things first we want to add an input box like this and that's represented by this fancy mommy not fancy just this this line of code I guess I don't know I said fancy anyway so it we're gonna copy that and then put type stack copy that and paste it okay so we have type text' class form control margin bottom to margin right all right so we don't need the ID there's no need for it for the placeholder we're just gonna do type here and the placeholder is what's gonna be seen inside the input box right next me to add a button actually not refresh this first right there perfect we've got herself an input type next add a button we're gonna just gonna do there's a button right there there's some really cool button submit button copy that paste it here voila you got a button now we want to do is you want to add a list of items right so go ahead and let's look for a list of items list group or something like a list group perfect there you go now you have a list group we know it's going to look like this let's just add it we don't want to however however we don't want to just add it at the bottom of this section I want to create a separate row forward because I had a separate distinction and so I that's how I like to divide things up so I'm gonna do class class equals row right I remember in Bush room you can have as many rows as you want the only the only restriction is you can have only 12 columns div class equals column who Dave no why do I keep do this alright perfect and we now need to you literally just copy this for the sake of seeing how it looks like we're gonna we're gonna format this a little bit nicely okay you can just select it and just click for well or not or just do it by yourself right refresh it there you go now it has the active on but we don't need that just from we can remove the active portion perfect you can see that's we have now a list of items just what we want to do which is what we want so I just took a second to see how we can move the submit button to the top so it's in line with this input input type right and one thing I missed is that if you want to have a inline form you just have to create a form container with a form online class okay and we're gonna do that so create a form class equals form in line and then in here form just like that well need to close this out obviously hmm I really don't like how this just for a minute okay and if you refresh it's completely gone that's where did it go why did I just disappear oh there it is this is so funny anyways yeah so now you got the form now I do want to add something to the top so with the what you do with my for example I'm gonna add some penny here right there so I'm gonna do something called a margin top four so we're doing MT 4 which stands for margin top 4 all right so we added some penny over there and we're also gonna add some up heading to this row as well margin top 4 perfect all right so it's some good that's a little better formatting now I know what you're saying you're saying Nazari why are we learning all this HTML where is the jingle stuff okay so hold on it's coming now now we're going to get into the Jingu stuff what do you want to do first initially what we want to do is we want to be able to add an item through this input box correct so let's see how we do that now what happens is when you add an item we need somewhere to catch that data and save it and database correct so let's take a look at this use the py file here we have this function called definition home right and this definition home actually really nicely definition it's a function it renders the in XHTML so probably makes sense that some were in here we probably do create a function to capture the data from this form correct so let's do it we're going to create a function called add to do right we're gonna have the same parameter request and we're going to print this request for now all right perfect now you're saying okay well how does jingle know to call this function what we're gonna find out so go to your Elza py file and you can see it this year as a py file has has all the URLs that contribute to a certain view we said we have this called views and you see this views that home that's being cold that calls this so we simply need to call views that add to do to trigger the function let's do that so we are going to trick the URL I know if I type correctly all right no not know what I said we're going to now URL but this time we're gonna say URL add to do right what to do and that triggers a function called views dot add to do so create that comma great so we have your else in place right we have the logic we all have the logic a but we have the function in place now we need to actually we now we need now we need to have this form call that URL so a form has something called an action action and that action is this URL right we need to tell it to go to this URL so go here I shouldn't have to do and the method we're gonna pass in the data through a post method there's a get there's a post is actually a multiple one but post means we're posting something think of it like that okay we also need to change no this is fine type submit that's fine and that's pretty much let's see what happens okay it's broken great they include your and does not appear to have any patterns in it no well it does you have URL oh oh I know why because it probably got stuck so if we just simply restart restart restart restart restart restart restart yes please start alright there you can now it's working let's type this in the room yeah it's broken is there something coolest CSRF token well what do we know now we know that it's hitting this URL because when we hit this URL it broke which is great now we just solve this issue right Deena breath is just a way for us to protect the form to make sure that there's no spam form submissions that's why that's what jingle has for to protect its form okay for the purpose of this video we're going to unprotect it I guess you can say because I've tried it with trying to protect the CSRF in here in Rapada in for some reason I've always have not been able to and I think it's due to a virtual machine issue but in order to for us to be able to go through and not have it be cos or F protected I guess here's all we need to do so we've got to use up UI file and so I'm gonna search in CSRF exempt CSRF exam there we go there are this so we're gonna copy this paste in here and now we do CSRF exempt exempt and that gives us an exemption that way if we go ahead and simply just type in here anything submit what didn't return a race race all right yeah in this case we are going to redirect back to the home page okay we can literally just simply do like this for now return and render the same home page that's it and if we refresh that okay buhbah but you see now with nothing is saved but all we have done is we look here we have printed this request right we now have this request great now I want to print a little that one take a little bit deeper this request okay if I go documentation of Django and I tap and request I request object but inevitably deleted to do HP request object here is what the request object contains it contains things like cookies method right in this case however what we want to look at is this post right so this post is dictionary like object containing all gears should be HTTP POST parameters so if we print that out request dot post right and if we refresh this let's type this in refresh it actually type to send submit you see that's a Nampa dictionary now why is an expedition there you might be saying well okay let's take a look at it in order for it to post something every input has has to have a name write a value to have a value you have to him a name have a name attribute so in this case the name answer will be content okay let's refresh this again type in python 101 book right click Submit and voila you got yourself a dictionary that with the content from the input provided by a user right now we can see and with I mean obviously with this we can actually use it and create a todo item and a database great great great great great that's awesome so let's go back to the views that py file we now know how this request a post works all right know what we do what do we do now we to capture two things we need to capture the add a date and we need to capture the content right so let's do it in order for us to capture that at a date what we're going to use is we're actually going to simply create a add a day to look like the current date there's something called a time zone the Gengo has and so we're gonna import from Django die utils import time zone alright time zone and what we're gonna do is we're going to create add a date date equals time zone dot dot now and that is simply a time zone object of the current literally just the current time that we are creating this alright so that's great now we need to grab the content of the actual this request that post so let's go ahead and do that again we can say content equals request dot post and inside here will say request up post content and that will give us the content of of what we typed in here ok let's now let's try this out so we're gonna print the date okay this is literally the way I'm teaching you guys is there Lea how I how I develop ok I I print things out I test things out because the last thing you want to do is you want to write a bunch of functions and and then you realize that you did it all wrong right because you didn't test it and so as I go along I test things and that's what you should do honestly I'm not the only one who do who does this trust me print content we don't need to print this anymore right so refresh it okay Oh 101 book click Submit let's see what happened here oh well my right so if we I'm gonna highlight this okay this was our request okay here is what got printed this is the date another date it's a time zone day 2000 1908 15 and this is the content oneonone book perfect perfect and then we obviously refreshed okay great great great now with this data in here we've captured this data we need to say to say that somehow so what jingle has is jingle has those memory those class todo items that we're going to use we're going to import from Jenga models from I think it's mainly models from Maine so you see this mean that models import to do we are importing literally this class okay import this class and so let's go ahead and actually create a model right right so jingle create object right in this case crate out of it we're gonna create a model instance and there should be create function all right yes we have that but I want to do is there we go if you look at here what jingle gives us is gives us this you know every class has an instance called object and there's a lot of functions that that class has and one of those is a crate function and that literally creates a creates a date bass actual entry right so if we use this it says my mod F is a crate and for us it's going to be to do right to do to do the objects that create now what are we importing into here okay we up we need put in put a few things if you look at our models we have the add a date if you have a text okay go back to use the add a date equals actually I'm going to change this this date this is current I'm going to changes the current date okay at a date equals current date then the text test another attribute equals content perfect text equals content to the opposite create at a date equals current date text equals content with this when we run this function and we click Submit now it should create a database object or a database entry let's try this Python 101 look submit good why can't you eat you I can figure than good okay let me start this that's why we start this in this happens you just restarted perfect perfect alright so let's try this again 101 book just for manager object has no attribute doc sorry creek obviously I can't spell create perfect so let's try this again 101 book submit great now you're probably like well hold on I didn't see anything how am I supposed to know there has been created well uno momento por favor okay here's what we'll do this is created object and we're going to print quite quite it created we're going to print this created object okay create object to print and we're going to print an another thing I'm going to print create an object that ID because if we know it has an ID that means it's a database instance or not I'm sorry a database entry so oh let's try this again at item 101 book submit there we go to do object to the idea of it is to that means it's created if we want to actually there's another way you can do this is we can also print so list of list of let's say length of dues of traduz I'm doing this as literally I'm trying to get you to understand how this allaround works it's an object relation relationship object object relations relation manager okay so just a good way to for you to understand how these things work so there's a to do object dot all that count that will get you them the count of all todo items in a database and if we know how the object if we know it's increasing in order for we know it's greater than zero that means it's being inserted so it's the objects that all that count I'm gonna print that boom length of dues voila it's doing a lot of its fancy stuff it's always there you go perfect so now go ahead and number two just to try it out so here's what we got this is the object three right because we already had one we had to this is 31 and the length of the whole table I guess I can say is 3 that means this is working right all right so now that we have confirmed it's working let's erase this and the second part is actually going to be listing this now we need to list the actual todo items to list the todo items so we have to do a couple of things first is we need to grab the islands phone database and then second is we need to transfer those todo items to the HTML page and the loop through them okay so let's see how we do that we have this function called home and this function home is what brings us the home page right now through here is where we'll be able to actually take todo items and transfer them to the front end page so let's let's do that okay we're gonna going to grab todo items from the database and again we're going to use the same type of functionality as we did when we added a todo item right or to list a todo item right so here we have to do objects that all right and that will grab us all the todo items in the database the second thing we're going to do is we're going to order the todo items by the add a date so there's a function call order by and this takes in the parameter that you want to order by so the attribute that you can order by like which actually want to order by text you know ordered by the date and so that's what we specify at a date okay all right and within this we need to now transfer these items this this list to the next HTML and so this render function right here has a third parameter to transfer data okay so we will speaking specify an object here and we can tell okay so to do items right and the object to transfer is to do items right so it's gonna take the items that's from here and it's gonna be inside this object okay so we've transferred that great now let's see how we can use it okay we have an XHTML and you can see that we have just a bunch of fake data now we need to replace this fake data with actual looping of the items so jingle has a template language that allows you to use a lot of gingka functionalities within a template in this case we're gonna use a functionality called for so the way you do it is you have a bracket syntax and you do for todo item I don't in todo items and again this name right here is the name that we specified in here so just keep that in mind if you change this you will have to change this name okay after we're done for in order to close this area for loop we have to do and four and four okay and inside here we're gonna lose that this is where we will display the list items so we have this list item and obviously to replace this text here okay great replaces text not what do we replace it with we have to use this todo item right this is it's going to loop through each do item and so this is gonna be an individual todo item there's a syntax where in order to use the object you use a double bracket syntax and then you do to do item to do item dot the attribute you want to use so in this case want to use a text right because that's what we have in the Mazda py so we have text okay so we have that and let's see if that actually brings us something let's remove this okay remove this did it use it to do restart just to restart let's see what happens I hope it doesn't break I really hope it doesn't break I don't see why it won't break alright so this is this is just a random text that we had in side inside the database okay with that in mind we are now looping through to do items right so let's test and see if we add a todo item if that will actually display anything if we go ahead test to submit nope nothing's working now why is it not working let's look at look the views up you I file you see how when we when we added todo item that that takes us this to this function and this function renders again in the next HTML but doesn't pass in the do items so what do we do instead of rendering we can actually direct the page to a to a home page so some there's something called HTTP response redirect so if we go to Google response redirect method no I don't want Microsoft jingo but I think oh there you go let's type in we don't need this just with their response redirect clash spears funds redirect and the way you get you grab that from Genco HTTP right this is ticklish EEP that's a real clever form and then we can redirect it to a certain a certain URL which in this case will be the home URL so let's do that for also from its let's imported first so from Django da HTTP import HTTP response redirect I hope that I spot that correctly no they're not copy this spelling sometimes you guys I swear HTTP response redirect so that shouldn't break I hope let's use this function HT Pyrrhus must be direct we're going to use this function I'm going to redirect it to the home page and if you redirect the home page it is now going to use this function after you add it to do right let's try this again all this is our test too by the way right so we submitted it okay let's try it again test three submit test 3 test 4 submit voila it is working you guys that is awesome now one thing I don't like our is as we are adding these test 1 test 2 test 3 test you see how they're going or going over to the bottom we want to reverse that right because obviously we want to have the newest item to display first so no do that we simply have to put a minus that's it that's literally it because this takes us from the newest date to the oldest date if we did it like this without the it's gonna take us from the oldest date to the newest date that's all where this comes in now let's try this again let's refresh well we need to refresh the actual database or the actual server do that there we go you test for test retest through that's and then it about 80 SDG perfect and now you pretty much have the list of do items and we're getting really close to the end now the only thing left now the only thing left is to you have a dilly functionality in this as well so let's get to this next all right so the final step we need to take is to be able to delete a certain item which as we saw before was to have a delete button here ok first things first we're gonna do is to actually insert our add a delete button to the right side of every todo item so let's go ahead to the index.html and we'll do that here okay we have the text here okay this is the todo item within here however we're going to add a button would you a button that's pretty much the same as here so we can copy this button just like that and we'll paste in this button right here right there perfect now that was not going to work the way you want it first things first is you see how there's a get a bar margin here at the bottom will remove the margin some MB is just margin bottom so we're gonna remove that that's one if we refresh it okay so that kind of remove some of the space there but now we need to do easily to float this button to the right side so if we create a class or div div around this okay close this div oops okay so that's the button and we're actually going to where the class is equal to there is a float right bootstrap class you can do this in CSS as well but if you type in float for example and you do float right okay float right right there now it floats right one other thing I want to do is I'm going to Center this text but we're gonna worry about this a little bit later and I also want to change the button to be button small there's a there's a class in blue shell which is button small which just makes it a small button see there you go we've got a button now literally that that's pretty much it one other thing is one main thing actually is now we have to have this button do something right and obviously it's also going to be delete that's the text for it all right and one other thing we want to do is instead of having it be a primary button so if we go back to buttons just really quickly you see this danger we're gonna use like a danger one because you know we don't want people to delete an accident you want it to be kind of like a warning I guess you can say no a danger so we're gonna make it a button danger instead of a bun primary danger right there perfect awesome awesome awesome awesome last thing okay we need to create a form because we want this button to do something just like it we have here where you have a form action we need to have the same thing for every single button that displays there so create a form okay just for now just as simple form just like that we're going to inside this form we need an action item all right so where is this what does this go to trigger or where is this going to lead or when the button is clicked or is it going to lead we're gonna name a URL just called delete to do and we need to pass something because when you delete a certain item obviously we don't want to delete all of the items so I'd be wonderly a specific one and so as a result we need to pass the ID of every or of an individual item to know which one to delete on the back end right so if we just simply use and we specify okay delete to do and the idea to do is to do item dot ID right and remember that's the unique ID of every single item and a slash and now we know that that's what's going to do action is obviously post just how we had it before perfect and refresh now obviously if you do this it's it's not going to get you any work if you actually need to create the URL and the view for it so let's do that so just refresh it for now perfect we have a delete to do that looks good that looks good now let's go to the URLs file we have this add to do now we need to do the same thing for delete to do all right so delete to do but with this we need to capture one more thing and that thing is the integer or the primary ID of a specific item so what you in in Django which you can specify you can slowly specify a parameter a type parameter and name it so to do ID like this slash and so Django will will actually map this and know that okay so that it should be to do ID here and I'm going to pass this now to a views dot py file no well obviously don't want to pass this to add to do now you want to pass it to delete to do which we haven't created yet but we're going to right now so let's try so let's go to views up your wife I'll and we can create a same function delete No delete to do right I get requests but one other thing is the to do ID because that's the second parameter it's going to be passed in through here it to do ID so we're gonna pass the center here right one other thing I want to mention is just for the sake is we're gonna do this yourself exempt as well for this one because this is a form and just let's take with the video we're gonna put that in and we're going to print it to do ID which ID are we removing and then we can go ahead and return the same HTTP plans to redirect to the home page okay let's try this now refresh this or should it not refresh restart this again if you get that error just restarted and you should be fine perfect let's try this again alright when we click delete nothing happens this error is because of the URLs the URL function right here is actually deprecated one so this one came initially with with kind of the Django setup but it's actually deprecated if we look at the y'all dispatcher you'll see that Django now but the latest version uses path and so if we go had an import for merging URL stop half right and you're gonna run these these problems sometimes so that's okay that's a learning learning opportunity so with a path I can actually just specify a like this path delete to do reusability to do and now this should work so if we take tight take it like this perfect you see that was completely okay and you can probably even do the same thing here so path like that there you go path like that and you can leave this alone for now alright we've got that working it when we click delete this is the ID the ID is for and that's what so if we do it again right there you can see that it printed out four which is the ID of that todo item now what do we do with that todo item once we have that ID we actually need to delete it and we get we're going back now to the Django or M object relational mapping well the way you delete an item within Django is you do to do the objects that get ID equals to do ID dot delete and literally that's it let's test it let's see how this works guys let's restart it because obviously we have we got some error right here all right now let's go ahead delete delete delete and it's delete and you can see it is working guys so let's let's do a test run fully with this let's go ahead and I get B said read Python 101 book go for know for for for go for Iran perfect let's make some lunch make some lunch perfect and that's what you guys got now you have a todo item and todo app with complete submit functionality with complete delete functionality and you have the proper the proper logic behind it and that is awesome you guys have done it if you guys follow along that is amazing I want to congrats to you alright that is it for the tutorial guys I really hope you enjoyed it and that you took away something from it that is the most important part if you have any questions whatsoever or any problems feel free to comment down below or you can message me on my Instagram and Nas dumansky and if you did copy the app I want to see it share with me seriously I'm not kidding other than that I hope you guys have an amazing day and I'll see you later if you're interested in learning how to become a freelance developer we have a three part master class for free that you can sign up using the link in the description below you'll sign up we'll send you the videos and you'll be able to learn a lot and take your coding journey to the next level
