With timestamps:

00:00 - in this video you'll build amazon web
00:02 - 3.0 dap with next js you'll be using
00:05 - hard hat to create the smart contract
00:07 - and deploy it using morales speedy nodes
00:10 - you'll use open zeppelin to ensure that
00:12 - the custom coins are in line with the
00:15 - erc20 standard you'll use morales to
00:17 - actually interact with the smart
00:19 - contract because morales makes it
00:21 - incredibly easy to interact with smart
00:23 - contracts we'll be using morales's built
00:25 - in nosql database to manage our users
00:29 - that we authenticate and create on this
00:31 - app and at the end we're going to be
00:33 - deploying this app to the internet using
00:37 - netlify because netlify actually gives
00:39 - you one of the smoothest and best
00:41 - experiences for deploying your app and
00:43 - it's one of the most popular with that
00:44 - said i hope you're excited for this
00:46 - build smash the like button so this
00:48 - video goes out everywhere now i'm gonna
00:51 - send it over to lance who's gonna be
00:52 - your instructor for this build so he can
00:54 - demo the app and actually get you to
00:56 - start building it with that said let's
00:58 - go right before we get started and start
01:01 - coding i just want to let you know that
01:02 - we're doing a collab with buildspace
01:04 - which is one of the best website
01:06 - education platforms in the world and you
01:09 - guys are going to be getting an nft that
01:11 - proves you completed this project and
01:13 - it's going to be in collab with bill
01:14 - space and clever programmer and it's
01:16 - going to look sick build space also has
01:18 - an incredible community of web 3
01:20 - developers who you can learn together
01:21 - with in their discord and they're very
01:23 - active last but not least build space is
01:25 - also helping new web3 developers like
01:28 - yourself get matched up with top tier
01:31 - companies like adidas or alchemy for
01:34 - premium high contracts and i'm talking
01:36 - about 10 to 20 000 a month contracts and
01:39 - their vision is amazing i even met their
01:41 - ceo farza and he's just an incredible
01:43 - amazing human being so i'm really
01:44 - excited about this collab and the best
01:46 - part for you guys it's completely free
01:48 - all you have to do is just go down below
01:50 - click the link in the description it's
01:51 - going to take you to a landing page pop
01:53 - in in your name and email and it's going
01:54 - to ask you to connect your wallet and
01:56 - once you connect your wallet you're good
01:57 - to go and then when you do this build
01:59 - and you complete it that wallet will be
02:00 - able to verify you did it you'll get
02:02 - your own nft and you'll get the entire
02:03 - community and everything that goes with
02:05 - it okay so again it's completely free go
02:07 - ahead sign up for that right now and
02:08 - with that said let's just jump right
02:10 - into the video take a look at this
02:11 - project this is a reimagine amazon if it
02:14 - was on the web 3 space so instead of
02:17 - selling normal products what we're
02:18 - selling is digital assets so let's take
02:20 - a look around this looks amazing imagine
02:23 - looking at all of these guys and owning
02:25 - any of these and if you notice something
02:26 - here it says 2ac what that says is that
02:30 - in this amazon we have our own currency
02:32 - or unique tokens which is all part of
02:35 - this build so this is the demo here
02:36 - you're gonna see this nice connect
02:38 - wallet button the moto pops up with all
02:40 - the options click meta mask and you can
02:42 - see that we're authenticating with
02:43 - morales so let's click sign and bam
02:45 - there we are and this actually shows how
02:47 - much each i have and guess how much code
02:48 - that took literally one line of code
02:50 - that's the login and authentication
02:52 - let's see if we can actually buy stuff
02:53 - if i click this this beautiful model
02:56 - comes out and we can tell our computer
02:58 - how much amazon coins we want so if i go
03:00 - ahead and hit confirm and there we go
03:01 - look at that we got 20 amazon points as
03:04 - you can see here and i'll take a look at
03:05 - that in a second but look there's a
03:06 - little thing called transaction receipt
03:08 - that i set up here's proof that we're
03:10 - actually sending east to the contract
03:12 - through etherscan and you can track it
03:14 - right here there it is thank you we can
03:16 - access out and now i have 20 amazon
03:18 - coins to pay with let's say i want to
03:19 - nokia i'm going to click the metamask
03:20 - notification again so that i can
03:22 - purchase it let's hit confirm on that
03:23 - boy and let's see confirm and look at
03:25 - that recent transaction right which
03:27 - shows me all the recent transactions
03:29 - that i as a user have it's going to be
03:31 - different for everybody else
03:31 - transactions confirmed and now we
03:34 - purchase it i know i purchased it
03:35 - there's this little transaction history
03:36 - here if i click on it look at that i
03:38 - bought the nokia and then we have the
03:41 - ether scan link for that as well to
03:42 - prove this is the receipt of us buying
03:45 - it this is actually amazon this is one
03:47 - of my favorite projects so far so if you
03:49 - are excited about this let's go ahead
03:51 - and get to the build what is up guys
03:53 - welcome back to another video lance here
03:56 - again and yes we have the face cam so
03:58 - without further ado let's get started on
04:00 - the amazon clone so all you have to do
04:02 - is hop over to your terminal and let's
04:03 - create that project folder so to create
04:05 - that project folder all you have to
04:06 - write is mk and then the project folder
04:09 - name so i'm going to call this one
04:10 - amazon clone blockchain okay once you
04:13 - make that folder we have to cd into it
04:15 - and the idea here is we're going to be
04:17 - making this app using next.js so in
04:20 - order to make our starter nextjs project
04:22 - you just have to write npx create next
04:25 - app at latest and then the important
04:27 - part here is the space dot if you add
04:29 - the space dot it'll take all the starter
04:31 - and xjs files and put it in this folder
04:34 - otherwise it'll make a new folder and
04:36 - put the stuff in that so you don't want
04:37 - to fold it within a folder you get the
04:39 - idea i'm gonna hit enter awesome we have
04:41 - the next.js folder and you can see it
04:43 - that folder right here so let me go into
04:45 - that folder real quick desktop projects
04:48 - builds amazon clone blockchain okay as
04:50 - you can see we have all the starter
04:51 - nexjs files the pages the styles the
04:54 - node modules awesome and since we're
04:56 - here i'm just gonna make another folder
04:58 - called smart contract if you've watched
05:00 - our previous videos you know that we're
05:02 - gonna be setting up hard hat in here and
05:03 - this is where we're gonna write some
05:04 - solidity so if you're interested in
05:06 - learning how to make your first solidity
05:07 - smart contract stay tuned later in the
05:09 - video when i show you guys how to do
05:11 - just that okay since we're here open up
05:14 - your browser and let's get tailwind
05:16 - installed so luckily there is this nice
05:19 - documentation on how to get tailwind
05:21 - with next.js this is all you have to do
05:23 - and since we already have the project
05:24 - open we can open the terminal in here
05:26 - okay once that's done all you have to do
05:28 - is follow what i'm doing and if you get
05:30 - lost follow this documentation so to
05:32 - install tailwind you want to type in npm
05:35 - or yarn if you're using yarn i'll be
05:36 - using yarn so i'm going to say yarn add
05:38 - dash d tailwind css post css and auto
05:42 - prefixer and notice how there's three
05:44 - things we're installing three different
05:46 - packages right tell when css post css
05:48 - and auto prefixer okay once that's done
05:51 - we need to initialize tailwind by
05:52 - writing npx tailwind css init dash p so
05:57 - i just copied that from documentation
05:58 - and pasted it in my terminal notice how
06:00 - it says it created a tailwind css config
06:03 - file and a postcss.com right what we
06:05 - care about is the tailwind dot config
06:08 - right and you just want to add
06:09 - everything in this content so see how
06:11 - it's highlighted so what i'm going to do
06:12 - is just grab everything inside that
06:14 - array don't make sure you don't miss
06:15 - anything don't put anything extra right
06:17 - you paste it and it should look exactly
06:20 - like the documentation cool that looks
06:22 - like it's good to go and the last thing
06:24 - we're going to need is the tailwind
06:26 - directives in our global.css
06:29 - okay so to add that go to your
06:31 - global.css and we can actually erase all
06:34 - of these default boilerplate code and
06:36 - add in those directives all right cool
06:39 - go ahead and hit save and since we're
06:41 - here as well we can also add this to the
06:43 - global css that i have in mind which is
06:45 - just importing this google font ubuntu
06:48 - and using it and making this the
06:49 - background color that's it that's all
06:51 - i'm doing here i'm gonna press save and
06:53 - we should be good to go and once that's
06:55 - done your tailwind is all set up we can
06:57 - run our project by writing in yarn dev
06:59 - okay and it usually starts it in
07:01 - localhost 3000 compiled successfully
07:03 - which means it'll load and there it is
07:05 - if you see a screen like this is the
07:07 - starter next.js app let's go ahead and
07:10 - set up a couple other things let's go
07:12 - ahead and set up a couple other things
07:14 - all right a big proponent of this app is
07:16 - actually using morales so to get started
07:18 - with morales hop over to this link with
07:21 - me and set up a couple things if you
07:23 - guys ever heard of firebase at all you
07:24 - can think of it as the firebase of
07:26 - crypto what do i mean it's essentially
07:28 - the leading web development platforms
07:30 - that helps gives us developers tools to
07:32 - make adapts really fast and really
07:34 - easily a lot of the setup just requires
07:36 - one line so to get started with morales
07:38 - so i can show you guys cool things that
07:40 - you can do hop over to this link right
07:42 - here it's t dot morales dot io slash
07:45 - clever and i'll lead you to this
07:46 - beautiful page right here go ahead and
07:48 - sign up so we can create our server i
07:51 - already have an account with them so
07:52 - let's log in okay once you make an
07:54 - account you should see a screen like
07:56 - this i'm gonna go ahead and make my
07:57 - window a little bigger there we go so if
07:59 - you see something like this is the
08:01 - morales servers page what we need to do
08:03 - is we need to create a server because if
08:05 - we were gonna do this without morales we
08:07 - have to create our own rpc node and we
08:09 - have to set up all the infrastructure
08:11 - around it which can lead to a bunch of
08:13 - headaches a bunch of reinventing the
08:15 - wheel with morales it's going to make
08:17 - this process a lot simpler because
08:18 - there's a lot of pre-made functions and
08:21 - they query a lot of the information that
08:23 - you have for you and we're going to make
08:24 - good use of that in our database so
08:26 - before i get too excited and talk about
08:28 - that let's just make a server yep so
08:30 - here you're gonna decide what kind of
08:31 - server you need we're gonna be working
08:33 - on the test net for the instance i'm
08:35 - gonna call it amazon clone blockchain
08:37 - for the region i'm gonna click what
08:38 - makes sense for me which is new york and
08:40 - you're going to notice something cool
08:41 - here there's a bunch of different chains
08:44 - that morales can communicate with right
08:47 - one cool thing about rouse is that it's
08:48 - actually cross chain i know that i'm
08:50 - going to be working on the rink to be
08:51 - test net so i'll click that and add the
08:53 - instance let's go so you can see our
08:56 - server is now up if i click view details
08:58 - all right these this is the server
09:00 - details is going to be relevant because
09:01 - we're going to need the server url the
09:03 - app id and the master key okay other
09:06 - than that we have there's a couple cool
09:08 - things that come with morales you're
09:09 - allowed to use cloud functions you can
09:12 - have this dashboard which i'll be
09:13 - showing you guys later on so stay tuned
09:15 - all right you can see our database
09:17 - already started with all the users that
09:18 - are connected every time i log in this
09:21 - is gonna populate and it's gonna store
09:22 - their wallet address and all their
09:24 - transactions which is super cool because
09:27 - we can then query that in our app and
09:29 - use it okay and on top of that morales
09:31 - comes with a bunch of different plugins
09:34 - that we might be using later on in our
09:36 - future builds there's a pinata ipfs
09:38 - plug-in that makes it easier to interact
09:40 - with pinata another one that's really
09:42 - interesting is that there's a one-inch
09:43 - morales plug-in that helps integrate
09:45 - defy or dex aggregators of one inch to
09:48 - any project just super cool the fiat
09:51 - which enables a quick real dollars to
09:53 - crypto swap through morales so that's
09:55 - insane be on the lookout for future
09:57 - videos where we use that now that we
09:58 - have our server that's it for morales
10:00 - the next thing that we're gonna set up
10:02 - is we're actually going to be able to
10:04 - deploy our app to netfly and make it
10:06 - live so that others can so that you guys
10:08 - can share it with your friends family
10:10 - and put it on your portfolio so to do
10:11 - that we'll be using netlify and if you
10:13 - haven't already let's go make an account
10:15 - together okay making this bigger again
10:17 - i'm gonna go ahead and sign up for
10:18 - netflix once you guys make an account
10:20 - with netlify it's actually really easy
10:22 - to get your project up and live all you
10:25 - have to do is click add a new site and
10:27 - import an existing project from there
10:30 - all you have to do is just connect your
10:31 - github off-camera i already made a
10:33 - github project containing the starter
10:35 - files go ahead and make your repo so
10:37 - that you can do the same thing i'm doing
10:38 - so here we go we have the amazon clone
10:40 - blockchain repo that i have and it's
10:41 - just the initial starter files nothing
10:43 - too crazy up on a github repository so
10:46 - going back to here connect your github
10:49 - it's authorized look for your repo there
10:51 - you go we got the amazon blockchain and
10:53 - then put in make sure this says yarn run
10:55 - build and let's deploy our site cool and
10:58 - as you can see our site is going to be
11:00 - deployed and then we can click this link
11:02 - that pops up and we should see something
11:04 - similar to what our project currently
11:06 - looks like which is just the starter
11:07 - next js app but the cool thing is every
11:09 - time you push to your github the site
11:12 - gets redeployed and it has the latest
11:14 - updates so we'll check back on this link
11:16 - and i'll show you guys how to rename it
11:18 - okay making this smaller again and with
11:19 - that said a lot of the setup is done
11:21 - let's get the coding okay now that we
11:23 - set up netlify and morales we need to
11:24 - install a couple different dependencies
11:27 - for our app so coming to the terminal
11:28 - i'm going to install using yarn add
11:31 - morales and we also want react dash
11:34 - morales throughout this app we're going
11:36 - to be using a couple different
11:37 - dependencies i want to install install
11:39 - most of the ones i think i need okay and
11:41 - if you look at your package json you can
11:42 - see all the dependencies we added
11:44 - morales and react dash morales a couple
11:46 - of things off the top of my head that
11:47 - we'll need is if you do a yarn add let's
11:50 - get react icons react spinners and react
11:55 - dash simple
11:57 - hook modal i know that's a long one
11:59 - right so we got react icons react
12:01 - spinners react simple hook mode the next
12:04 - batch that we're going to install is
12:06 - yarn add we'll need at web we'll need at
12:11 - wallet connect slash web three dash
12:15 - provider space to get the second
12:17 - dependency which is at web three auth
12:20 - slash okay and since we're here we could
12:22 - also do ethers okay i think i suppose i
12:24 - think i spelled all of them hit enter
12:25 - come on you can do it okay it's finally
12:27 - done all these packages so looks like
12:29 - it's finally done as you can see we have
12:31 - web3 auth and the wallet connect and
12:33 - ethers only a couple more guys i'm gonna
12:36 - be adding the magic sdk we'll also be
12:39 - using moments in here since we're going
12:40 - to be working with some time and
12:43 - important for this next section would be
12:45 - the web 3 ui once you have all three of
12:47 - those installed that's going to be all
12:49 - the packages we need for this project
12:51 - for now all right as you can see these
12:53 - are all the packages that we need to
12:55 - install you might add some more later
12:57 - but i think this is a good start so all
12:58 - i want you guys to do next is head over
13:00 - to your pages folder and click index.js
13:03 - this is the reason why we see this page
13:07 - is because of this index file what i
13:09 - want to do is make this my own so i'll
13:11 - delete everything in here so let's
13:13 - highlight line 66 and go all the way up
13:16 - line eight i also want to delete all
13:18 - three of these things and if you guys
13:20 - aren't familiar with tailwind it's
13:21 - essentially a css framework that makes
13:24 - it a lot easier and quicker to write out
13:26 - our styles so as you can see the class
13:28 - names have a
13:30 - styles.container alright we can inherit
13:32 - these properties by making a styles
13:35 - object in each component and defining
13:37 - each key with the styles that we want so
13:40 - if i say container here this div is
13:42 - going to keep the styling of whatever
13:44 - container is and i can tell you it's
13:46 - pretty simple there's a css cheat sheet
13:49 - out here to tell you a translation of
13:51 - what everything means for example h full
13:53 - is going to mean like the full height
13:55 - and width of the page essential okay
13:57 - then we can give it a flex property and
13:59 - you can set the background color like so
14:02 - cool and now this should inherit all
14:04 - that styling if i hit save oh that's
14:06 - right we also have to run our project
14:08 - under your dev okay and then we can
14:09 - reload it okay there we go and if you
14:11 - see a blank page don't be worried that's
14:12 - that's exactly what our index looks like
14:14 - what i want to do here is fill this
14:15 - index page with the components that we
14:17 - want so what i like to do is set them up
14:20 - so i know what's next i do a sidebar
14:22 - right here and we also want the main
14:25 - component which is going to hold
14:27 - everything if you guys saw the demo
14:28 - we're going to be making a redesigned
14:30 - amazon for the web 3.0 space with a
14:33 - bunch of cool digital assets that you
14:35 - could buy so the sidebar is going to be
14:37 - that nice sidebar that you guys saw with
14:39 - our login functionality and all the tabs
14:43 - all the sidebar items okay and since
14:46 - these components don't exist yet i'm
14:48 - gonna go ahead and comment them out and
14:49 - i'll comment them back in as needed so
14:52 - as you can see i already got started
14:53 - while i was waiting for those packages i
14:55 - made a components folder and i made a
14:57 - sidebar.js so i'm gonna go ahead and
14:59 - click into it you're gonna notice it's
15:00 - empty there's a cool code snippets that
15:02 - you can do like r-a-f-c-e with the
15:05 - extension i'm gonna click that and it
15:07 - sets up the component hitting save we
15:09 - can go back to the index and now we can
15:11 - actually import that component so let me
15:13 - show you a fast way to do it you can
15:15 - uncomment out the sidebar start to type
15:17 - it out and you should see this nice
15:18 - little auto import click on it and there
15:21 - you go that's all you have to write to
15:22 - import a component don't forget to close
15:24 - it and if i hit save now there she is
15:26 - our sidebar is loaded on to our index.js
15:29 - sounds good so in this next section
15:31 - let's code up the sidebar all right so
15:33 - now that we have the sidebar set up i
15:35 - want to take this moment to talk about
15:36 - how to do certain things for your dap
15:38 - for example if i want a login button or
15:42 - in other words a connect wallet button
15:44 - we can actually do that using morales so
15:46 - to get started remember how i said you
15:48 - need to view details and get all this
15:50 - information we're going to use it today
15:52 - so one of the first things i'll have you
15:53 - do is let's create a new file at the
15:55 - root and this will be our dot env file
15:58 - this will hold all our environment
15:59 - variables in here all right so once you
16:01 - make your dot env file we're going to
16:03 - create a couple variables the first one
16:04 - is going to be next morales server and i
16:07 - have to do now is to set equals that url
16:11 - next i'm going to grab the app id and
16:12 - set up this variable which is next
16:14 - public morales app id paste boom cool so
16:17 - we have the environment variables head
16:19 - over to your pages folder and then your
16:21 - underscore app okay in this underscore
16:24 - app this contains our actual next.js
16:26 - application and what i want you to do is
16:28 - let's get the morales provider from
16:33 - react-morales cool we essentially just
16:35 - want to wrap our whole next.js app with
16:38 - that provider so what i'm going to do is
16:40 - format it like so at the top here i'm
16:42 - going to put in the morales provider and
16:44 - let's insert our app in between the two
16:47 - cool the next thing we want is in the
16:49 - opening tag of the morales provider
16:50 - let's set up the server url which you
16:53 - guessed it will be the environment
16:55 - variable process
16:57 - dot next public morales underscore
17:00 - server then it's the app id setting that
17:02 - equal to the app id okay hit save id
17:06 - server cool it has the same name and
17:08 - usually you just want to reset your
17:09 - terminal okay it says loaded env we're
17:11 - good to go all right let me just refresh
17:13 - this see if we get any errors okay it's
17:15 - compiling okay it's done compiling and
17:17 - look we got the sidebar still no errors
17:19 - that's a good sign next thing you want
17:20 - to do is hop over to the sidebar and at
17:22 - the top here let's import the connect
17:25 - button from web3 ui cool and then inside
17:29 - this div let's actually get that
17:31 - component and say connect button let's
17:33 - hit save hey look at that we have a
17:35 - connect wallet button and i didn't have
17:36 - to do any styling the best part is it
17:39 - has already some functionality to it if
17:41 - i click connect wallet this little moda
17:44 - will pop up with you with all the
17:45 - different wallets you can sign up with
17:47 - i'm using metamask so i'm gonna click
17:48 - meta mask and then it'll ask me to sign
17:51 - off to morales that they can use and
17:54 - query my information okay so there's the
17:56 - message this is signing for
17:57 - authentication sign and it's connected
18:00 - cool so that's how we can set up a login
18:02 - button right off the bat with morales
18:04 - next thing we have to do is on our end
18:07 - we have to set up what it would look
18:08 - like when the user logs in and use some
18:10 - morales hooks to check if that user is
18:12 - authenticated sounds good so let's build
18:14 - out the rest of the sidebar and i'll
18:15 - include more functionality for login as
18:18 - i go cool additionally another cool
18:20 - thing about what we just did is if you
18:22 - look at the dashboard for your app go
18:24 - under user you're gonna notice that
18:26 - there's two users now because every time
18:28 - you connect your wallet to your dap
18:30 - morales will take note of it and add it
18:32 - to the database what we need to set up
18:34 - is getting the etherdress and i'll show
18:36 - you guys how to update that with a
18:38 - username as well later on so keep that
18:40 - in mind let's move on okay cool so now
18:42 - that you have an idea about the connect
18:43 - button what i'll do next is set up all
18:45 - the different divs for the sidebar right
18:48 - so temporarily removing this connect
18:49 - button but for the most outer div i want
18:51 - to give that a class name if you're
18:53 - unfamiliar with tailwind is a css
18:56 - framework that makes building and
18:57 - styling your divs a lot faster it's kind
19:01 - of similar to how bootstrap works if you
19:03 - are familiar with that so for the class
19:05 - name we're going to give this styles dot
19:07 - oops not stylesheet styles dot container
19:09 - and there we go styles.container in
19:11 - there the next day we're gonna make is
19:13 - the div with the class name of profile
19:16 - styles.profile okay and in this we're
19:19 - gonna have something called is
19:20 - authenticated which we'll get from
19:22 - morales if it exists we want to load a
19:25 - certain html element so if it is
19:28 - authenticated we're going to load
19:29 - styles.profile
19:31 - pic container and we need a closing div
19:33 - for this so it's going to be this one in
19:35 - this we're going to use the images from
19:37 - next.js so i'm going to need to import
19:39 - that all right so the one that says next
19:40 - image so it's self-closing and all next
19:43 - thing i'm going to do is pass in some
19:44 - properties we're going to add a source
19:45 - but i'm going to do that a little bit
19:46 - later for now i'm just going to add an
19:47 - alt of profile which i actually don't
19:50 - need to do the action can do this alt of
19:52 - profile class name will be styles
19:56 - profile pic and the height will be a
19:58 - hundred sorry and this should be curly
20:00 - brackets the width should be 100 as well
20:03 - cool and we don't have is authenticated
20:05 - that doesn't exist so let's say it is
20:07 - authenticated for now so we don't get
20:09 - any errors hard-coded to be false cool
20:12 - and of course we see this error because
20:13 - i didn't make my styles object just yet
20:15 - and actually i want to put this in a
20:17 - fragment so let's leave that there okay
20:19 - and after that closing div we'll have if
20:21 - there's no username because by default
20:23 - when you log in you won't have a
20:25 - username but you'll have the option to
20:27 - fill in the input field which will then
20:29 - update that user database okay the next
20:32 - thing is we want to set up is we want to
20:33 - check if there's a username so if
20:35 - there's no username i want to have the
20:37 - input field out there so i'll make
20:38 - another fragment and i'm going to say
20:40 - div this one's going to have a class
20:41 - name
20:42 - styles.username and like i said i want
20:44 - the input field to show up so that we
20:47 - can add a username to that account and
20:49 - input is actually a self-closing tag
20:51 - cool let's have type equals text
20:54 - placeholder is equal to user name i
20:57 - thought the class name of this input
20:59 - will be user name input and the value is
21:02 - going to be nickname but we don't have
21:04 - that set up yet so i'm going to do one
21:05 - of these yeah it's going to go under the
21:07 - column nickname but we don't have that
21:09 - so i'm going to comment down i'm going
21:10 - to do an on change i want to set the
21:13 - nickname all right nick the target value
21:16 - cool and again this doesn't exist either
21:18 - set nickname it's a state that i'll have
21:20 - to set up later but as you can see this
21:22 - gives me an idea of how i want my
21:24 - project to look okay and at the end of
21:26 - that div you want a button and inside
21:28 - that button it's gonna have the class
21:30 - name of styles dot set of handle set
21:34 - username okay and we actually don't have
21:37 - that function either but it gives me an
21:39 - idea of what to expect okay we haven't
21:41 - finished closing off our divs which is
21:42 - why we see that and for the button we
21:43 - want it to say sit okay here we'll have
21:46 - the closing the closing fragment of this
21:49 - second one so we'll have this closing
21:51 - fragment right here and remember what
21:52 - we're doing here is if there's no
21:54 - username show me the input but if there
21:56 - is
21:57 - show me the username after that closing
21:59 - one all we have to do is set up the rest
22:02 - of the conditional rendering which is
22:03 - just going to be something like this
22:05 - which should just be div closing div and
22:08 - this inner one will give it a class name
22:10 - of styles dot welcome and here we can
22:13 - say welcome the username that we put for
22:16 - now i'll just put uh lens but we're
22:18 - gonna change this to make it dynamic
22:19 - okay cool once that's done i'm gonna
22:21 - make that closing fragment here cool and
22:23 - i think what i need to do is clean this
22:24 - up a bit so i'm gonna take a moment and
22:26 - do that and just show you the changes
22:27 - okay cool i hit save and it says styles
22:30 - is not defined that's because i haven't
22:32 - defined any of my styles yet which is
22:33 - okay so i think for fun let's just get
22:35 - that out of the way right now i'm gonna
22:37 - go at the top here and say const styles
22:40 - equals object and as i showed previously
22:43 - if you want to style the container you'd
22:44 - have to write the key and the value of
22:47 - it would be the css so again this will
22:50 - be h full the width i'm actually going
22:52 - to set to 300 pixels for the sidebar
22:55 - give it a flex property and i want to
22:57 - make sure it's columns background color
23:00 - of this and we'll say static cool so you
23:04 - get the idea i want to add the rest of
23:05 - the styling feel free to pause the video
23:06 - to take a look okay once that's done you
23:08 - should see something like this
23:10 - represents the little container that
23:12 - will put the connect button cool like i
23:15 - was saying this is what you should see
23:17 - if we were to we also have that username
23:19 - property down below if there's no if
23:21 - we're authenticated we might not have a
23:23 - username so temporarily let's make a
23:25 - hard-coded one and let's say our
23:27 - username is equal to
23:29 - all right and while we're here we can
23:30 - actually change this hardcoded lens to
23:33 - whatever the username variable is cool
23:35 - so we want to check if our conditional
23:36 - rendering works is if this changes to
23:38 - true this styling and then it checks if
23:41 - there's a username and if there is it'll
23:42 - say welcome lance if not it'll have an
23:44 - input field saying to set your username
23:47 - okay remember how i said we're going to
23:48 - go back to images i want to be using
23:50 - dice bear for the images which is just
23:52 - going to generate a random avatar based
23:55 - on what we pass in as the user name let
23:57 - me use something a library called dice
23:59 - bear which will generate a random photo
24:01 - based on your username and i already
24:02 - have it pre-copied which is just this
24:05 - all right it's going to take in whatever
24:06 - username dot svg that gets generated
24:08 - next we have to do is set up our
24:11 - next.config.js which i pasted it in and
24:13 - this is what we need we need an images
24:15 - key with an object and a domains key
24:17 - with an array so take a moment pause the
24:20 - video grab all of these because we're
24:21 - going to be using them sounds good cool
24:23 - so if i hit save we should be allowed to
24:25 - use images from dicepare i'm gonna go
24:27 - back into here moment of truth let's
24:29 - check if our conditional rendering works
24:31 - i hit save let's go welcome lance all
24:34 - right we can see that if i am
24:35 - authenticated i'm going to load the
24:37 - image if i have a username it's going to
24:40 - say welcome lens okay and if i were to
24:43 - change my user name let's say my
24:45 - username is kazi said save that's the
24:47 - kazi's randomly generated svg based on
24:49 - his name cool so what if i didn't have a
24:51 - username we might see an error here if
24:53 - it's save yeah it's because username
24:55 - input is not defined oh that's actually
24:57 - because this has to be styles.username
24:59 - input hit save there we go that's more
25:01 - like it and if you're wondering about
25:02 - this styling that's because we don't
25:05 - have any css for it for those classes
25:07 - the css would look something like this
25:09 - transparent border justify content
25:11 - center item center and the text is white
25:13 - and the username will have these
25:15 - properties as well okay there you go it
25:16 - looks a little bit nicer if you're
25:18 - wondering why it looks like that it's
25:19 - because we need to set nickname css
25:21 - still too if you see the button right
25:23 - here we need this one okay so i'm just
25:24 - going to add that in real quick there we
25:26 - go that's a lot better cool and these
25:28 - don't work just yet because we need to
25:30 - set up those functions to set the
25:33 - nickname so for now i can show you what
25:35 - it would look like if i were to insert a
25:36 - username save welcome lance cool okay
25:39 - coming down below here on line 60 for me
25:42 - i want to add another dip in this div
25:44 - i'm gonna call it class name styles dot
25:48 - connect button alright so when you're
25:50 - writing this make sure it's still inside
25:52 - the styles.profile the button should
25:54 - still be in here and remember that
25:55 - connect button we set up last time you
25:57 - want to insert that in here there we go
25:59 - it's looking amazing cool from there
26:01 - let's set up the rest of the menu items
26:04 - so to set that up we just need to make
26:05 - another div here i'm going to give it a
26:07 - class name of menu cool so after you
26:09 - make that div i don't know if you knew
26:11 - but if when you're working with the next
26:13 - js app you can actually do some routing
26:15 - to different pages within here instead
26:17 - of getting a react router so what we can
26:19 - do is import link from next slash link
26:23 - and from there come down below and let's
26:27 - add that link here with the href of c
26:30 - forward slash the reason why i want to
26:32 - give this an href before slash is
26:34 - because i'm gonna put the amazon logo in
26:37 - here and when you click the amazon logo
26:38 - you could actually go back to the home
26:40 - page so i want to do class name and
26:42 - we're going to use this div a lot styles
26:44 - that menu item and in here it's going to
26:47 - take another image component from next
26:50 - js should be self-closing source is
26:52 - going to equal logo which we don't have
26:54 - yet but i'll show you guys what i'm
26:56 - going to do for that the height is going
26:57 - to be 30 and the width is going to also
27:00 - equal 30 class name it's going to be
27:03 - styles dot amazon logo cool you don't
27:06 - have to hit save because it's not going
27:07 - to work because logo doesn't exist so
27:09 - let's make logo exist right now so what
27:11 - i did is i actually gathered a couple of
27:13 - assets put it in a folder and now i'm
27:15 - ready to paste it feel free to get your
27:18 - own assets for whatever you want to use
27:20 - for your app and i don't want it to go
27:22 - to pages actually i want this assets
27:24 - folder to go to the root so i'm going to
27:26 - click outside paste that's more like it
27:28 - cool so now i have an assets folder and
27:30 - if you look into it we have the amazon
27:31 - logo which any of you guys could pull
27:33 - and i have some pngs of some digital
27:36 - assets i'd like to sell this could be
27:38 - completely customizable you can make
27:40 - this store whatever you want so this is
27:43 - what i have set up so make sure you make
27:44 - an assets folder and put all your png
27:47 - files inside there cool once that's done
27:49 - i'm gonna go ahead and get the logos all
27:51 - right we need an amazon logo and amazon
27:53 - logo full so now this logo exists okay
27:56 - and you can see it right there we didn't
27:58 - make the menu item or the amazon logo
28:00 - styling yet so it looks really plain but
28:02 - bear with me it's on the way so in
28:04 - between 75 and 76 for me i'm going to
28:06 - write my amazon and i want a little line
28:10 - break here so i'm going to say break
28:12 - board and closing okay my amazon board
28:15 - nice closing link awesome let's make the
28:18 - next menu item which will look something
28:20 - similar like div class name styles menu
28:24 - and remember how we downloaded react
28:25 - icons earlier let's actually use one of
28:27 - them this one i'll use is called the far
28:29 - box and underneath that i'll put
28:31 - collections and if you use fall box you
28:33 - have to import it so to use file box i'm
28:36 - just going to put import file box from
28:38 - there hit save there it is little
28:40 - package symbol that means collections
28:42 - same kind of process for the rest of the
28:44 - menu items so let's work on that i'm
28:46 - going to make a div class name styles so
28:49 - you get the idea now all right so for
28:50 - this one it's actually called bs fill
28:54 - bookmark fill okay and it's going to
28:56 - have the text of saved i'm going to hit
28:58 - save of course it doesn't exist so it's
29:00 - going to give us an error let's make it
29:02 - exist by importing it import react icon
29:05 - bs and that's what it should look like
29:07 - okay and just to quickly speed this up i
29:09 - want to make another div except this
29:11 - time it's not going to be bookmark it's
29:13 - actually just going to be person fill
29:16 - and put back that closing cool let's go
29:18 - ahead and import it now so go to the top
29:21 - and import it cool and we're almost done
29:23 - we actually have one more link here to
29:25 - our second page which is going to be our
29:28 - transactions history that's right we're
29:29 - going to be able to purchase our digital
29:32 - assets and you're going to see like that
29:34 - recent order that you see with regular
29:36 - amazon and this is that link to that
29:38 - page so it's going to be href of slash
29:41 - history and again we don't have that set
29:43 - up just yet we'll still have to make
29:45 - that page late so within there you
29:47 - guessed it we're going to have a div
29:48 - class name menu item okay and this one
29:51 - will have a react icon of a i outline
29:55 - history okay hey i outline history and
29:58 - the text it'll have is transaction
30:00 - history because that's the page we want
30:01 - to leave it all right again doesn't
30:03 - exist let's get it oh that's right we
30:05 - have to close this div that's more like
30:07 - it okay there we go awesome and after
30:09 - that after the closing div of the minute
30:12 - the next thing we want to make is the
30:14 - div for the company name so class name
30:17 - dot company name and this right here
30:21 - will have that image logo full so we got
30:24 - a nice amazon logo at the bottom of our
30:26 - sidebar it is amazon and i can give this
30:29 - a height equal to 100 and the width
30:33 - equal to okay there she is awesome okay
30:35 - let's get the rest of the styling which
30:37 - is just gonna be the menu item and the
30:41 - amazon logo i believe okay it's looking
30:43 - pretty good uh the logo is a little bit
30:44 - off i think it's because what's the
30:46 - class name of this company name yeah we
30:48 - need the company name css which i have
30:51 - over here on the side boom all right so
30:54 - take a moment this is the css i hit save
30:58 - there you go everything's lined up in
30:59 - beautiful awesome and well that's
31:01 - actually just the sidebar cool in this
31:03 - section i'm going to be setting up the
31:04 - context folder if you didn't know in
31:06 - this app we're going to be using the
31:07 - context api so i can create all my
31:10 - variables and functions there and call
31:12 - it anywhere within my app by making them
31:14 - global let me show you what i mean by
31:16 - creating the folder so i'm going to make
31:17 - a new folder make sure it's at the root
31:20 - of the folder i'll call it context and
31:21 - inside that contacts folder let's call
31:23 - it amazoncontext.js
31:26 - awesome like i said this context folder
31:29 - is going to set up the use context hook
31:31 - from react and we're going to create a
31:33 - context so we can put all our variables
31:35 - and functions in like a global store
31:37 - that we can call anywhere in our app so
31:39 - let's get started first thing you're
31:40 - going to do is at the top import all the
31:43 - hooks that you're going to use so for me
31:45 - i know in this context file i want to be
31:47 - able to create context next thing i want
31:50 - to do is get the use state hook as well
31:52 - as the use effect hook since we're here
31:54 - i'm just going to import it from react
31:56 - so got it cool so after that we're going
31:58 - to also import use morales and later on
32:02 - we'll import something else but for now
32:04 - this is fine and you can guess where
32:05 - we're getting this from it's react dash
32:07 - morales nice cool that should be good
32:09 - for now the next thing you want to do is
32:10 - export const amazon context and then you
32:13 - want to set it equal to create context
32:16 - later on we're going to be utilizing use
32:17 - context hook and passing in amazon
32:20 - contact inside that hook okay next thing
32:22 - i want to do is set up the provider i'm
32:24 - going to export const amazon provider
32:27 - and it's going to set equal to an arrow
32:29 - function and inside the parameters here
32:31 - it's going to take a de-structured
32:33 - children awesome and we can also set up
32:34 - the return while we're here it's to
32:36 - return something like this and what
32:38 - we're returning is the amazon oops
32:41 - context dot provider okay and in between
32:44 - that it's going to take children and let
32:45 - me just format it nicely now here's the
32:47 - important part go into the opening tag
32:49 - of the provider and make some space like
32:51 - this and what you want to do is add a
32:54 - value right what you want to do here is
32:56 - anything that you put in these curly
32:58 - brackets is what's going to be global so
33:01 - before we can pass anything inside this
33:03 - value prop we need to create a couple
33:05 - things okay so now that you put value
33:07 - anything that you put in value that we
33:09 - create in this context is going to be
33:11 - passed so that it can be global and this
33:13 - shouldn't be uh amazon space provider it
33:15 - should just be one word there you go so
33:16 - with that the context is set up the only
33:19 - thing you have to do now is go in your
33:21 - app.js and wrap the amazon provider
33:25 - around this main component all right
33:28 - same thing we did with morris provider
33:29 - so that we can use morales within our
33:30 - app we want to wrap the amazon provider
33:33 - so let's import that import amazon
33:35 - provider from the context so it'll be
33:38 - dot forward slash i can see the context
33:40 - slash amazon contacts cool and i wanna
33:43 - wrap this within here so i'm gonna say
33:46 - amazon provider close it off and wrap
33:49 - our main component within that there you
33:51 - go and once you do that guys we're able
33:54 - to use contacts within our app all right
33:56 - guys now that we've set up our context
33:58 - let's go ahead and start filling it out
34:00 - so that we can set up everything that
34:01 - we're going to need for this sidebar so
34:04 - before i continue i want to just quickly
34:06 - read what the sidebar component has so i
34:08 - added a couple of things it might look a
34:10 - little different from earlier but this
34:11 - is the same gist right so there's
34:13 - something called is authenticated that
34:15 - we're going to make in context which is
34:17 - what we're going to get from morales
34:18 - it's a cool is authenticated it's
34:19 - something we can get from morales which
34:21 - basically just checks if a user is
34:23 - connected to your application so for
34:25 - example if i didn't have a username or
34:28 - on morales we'll call it nickname there
34:30 - should be this input field that comes up
34:32 - right that's because of our conditional
34:34 - rendering if is authenticated is true
34:36 - we'll see this screen but if user if
34:38 - there is no username then it's going to
34:40 - show this input field where i can set my
34:43 - nickname that's what we're going to set
34:44 - up with our contacts today and just to
34:45 - show you if you do have a nickname we
34:48 - can pull that nickname from morales and
34:50 - you can see welcome your username right
34:52 - alternatively if you don't have a
34:53 - username and also and if is
34:55 - authenticated is false this is what we
34:58 - should see okay so this is how it is
35:00 - hardcoded we want to make it a little
35:01 - bit more dynamic okay cool now that you
35:03 - got that i just want to explain how the
35:05 - connect wallet works so we're using web3
35:07 - ui kit which is super cool it sets up
35:09 - the login functionality for us so if i
35:11 - were to click meta mask and click next
35:14 - and connect we'll see that morels
35:16 - authentication is set up hit sign and
35:18 - nothing's going to change because i
35:20 - didn't make it so that these variables
35:21 - change the conditional rendering isn't
35:23 - moving but on morales side if i go into
35:25 - users and i make this a little bigger
35:27 - there's nothing yet that's the default
35:28 - thing but if i hit refresh there it is a
35:30 - user is logged into the morales database
35:32 - how cool is that by just using one
35:35 - connect button component from web3 ui
35:37 - kit you already have a login
35:38 - functionality so that's super cool next
35:40 - step would be to make it so when i do
35:42 - connect my wallet my front end matches
35:45 - to show that i am logged in because even
35:48 - though i logged in as a user it's still
35:50 - not there so let's get that set up let's
35:51 - see let's bring my meta mask back in
35:53 - cool so just for for the sake of time
35:56 - sorry to make this less confusing i'm
35:57 - going to disconnect my account and also
35:59 - refresh so now i can be sure i'm not
36:01 - logged in another thing i'll do is let's
36:03 - delete the user that's stored on morales
36:05 - database because i'm going to log back
36:07 - in again notice how it has a username
36:09 - etherdress created.passwords i'm i'm
36:11 - gonna hit this what is going on okay
36:13 - cool so i'm gonna just make it full
36:14 - screen hit edit and then you can delete
36:16 - a row all right that's essentially
36:17 - deleting off our database so there's no
36:19 - record of it but don't worry i'm gonna
36:21 - log back in soon cool so we can hop back
36:23 - to our local host what we're gonna need
36:24 - to do first in our amazon provider is
36:26 - make use of our use state hook and keep
36:28 - track of a couple of things the first
36:31 - thing i'm gonna make is something called
36:32 - const username right this should look
36:34 - familiar because if you remember in our
36:36 - sidebar this controls what my username
36:39 - is we saw it as lance it's going to be
36:40 - equal to the you state and it's going to
36:42 - initialize it as empty string cool next
36:44 - i'm going to have something called
36:46 - nickname as a state and this it looks a
36:48 - little confusing but it's going to
36:50 - control what i have in my input field
36:52 - let me show you all right so again if
36:54 - i'm logged in right set nic is going to
36:57 - control what is in this field and it's
36:59 - going to run on change and i have that
37:01 - set up over here i haven't completed
37:02 - that for now because what i'm going to
37:04 - do is take that state on the input field
37:07 - and then set that as my username so it
37:10 - makes sense so let's go and set it up
37:12 - okay use state and by default the input
37:14 - field should be blank so i'm keeping
37:16 - that in mind by making it blank all
37:18 - right okay another thing we need to do
37:19 - is take a look at this used morales hook
37:22 - from react morales there's a couple
37:23 - things that we need to grab from it so
37:25 - i'm gonna set a lot of it up now so i'm
37:27 - gonna say const and i'm gonna say cons
37:29 - authenticate is authenticated enable web
37:32 - morales and user and is web3 enabled i
37:36 - might not use all of these so i'm going
37:38 - to just grab all of them just in case
37:40 - but for sure what we're going to use is
37:41 - authenticated for this part right here
37:43 - okay cool so we're getting all of these
37:45 - from the used morales and destructuring
37:48 - it what i want to do next is set up a
37:49 - use effect that whenever i do connect my
37:52 - wallet i want to be retrieving the
37:54 - username or in other words the nickname
37:56 - from my database okay so i'm gonna show
37:58 - you guys how to do that just clean this
37:59 - up real quick cool all right set up a
38:01 - use effect now okay and use effect takes
38:03 - two parameters which is just an arrow
38:05 - function as well as a dependency module
38:07 - because use effect is gonna run at three
38:09 - different points in a component's life
38:10 - cycle when the component is mounted when
38:12 - the component is updating and when the
38:14 - component will unmount so with the
38:16 - dependency module you can control when
38:19 - you want your side effect to run so if i
38:21 - leave it blank here it's only going to
38:22 - run when the component first loads if i
38:25 - put a dependency module such as username
38:27 - which i actually will later this use
38:29 - effect will also run when the username
38:31 - changes so think about how you want your
38:33 - code to work and that's how you can
38:34 - structure your use effect okay another
38:36 - thing i'm going to do is add an async
38:38 - function here and with this async
38:39 - function i'm going to set it up like so
38:41 - wrap this around and then i'm going to
38:43 - put these parentheses so it's like a
38:44 - self-calling function that's
38:46 - asynchronous and what you want to put
38:48 - here is a condition right is
38:50 - authenticated we're getting is
38:51 - authenticated from use morales it
38:53 - basically just checks if the user is
38:55 - connected or authenticated and if it's
38:57 - true that means i'm logged in so if i'm
38:59 - logged in i'm going to make a variable
39:01 - called cons current use equals await
39:04 - user question mark dot get nickname so
39:07 - this is how we are able to get the
39:10 - nickname from our morales database and
39:12 - this question mark it's just simply put
39:14 - on a high level it's just making sure if
39:16 - there is a nickname let's get it okay
39:18 - and if there isn't we won't need it cool
39:20 - okay from there we're gonna use one of
39:22 - our states and set our username to be
39:25 - the current username so if this is
39:27 - confusing to you at all if we look at
39:29 - our code here what it's doing is when i
39:30 - log in it's going to get a nickname and
39:33 - once it gets the nickname from morales
39:36 - it's going to show up here so what would
39:37 - that look like that's the equivalent of
39:39 - me putting this as my username so that's
39:41 - what we did see this is us retrieving
39:43 - the nickname that's there if the user
39:46 - doesn't have a nickname yet this is what
39:47 - you'll see make sense cool i hope the
39:49 - visual helps you guys because it
39:51 - definitely helps me so that's that we're
39:53 - going to come back here and use an else
39:55 - for getting the user's balance of their
39:57 - amazon tokens but for now i'm only
39:59 - worried about this so for this right
40:01 - here i'm going to use is authenticated
40:04 - user and username so if any of these
40:07 - variables change this use effect will
40:09 - run run this get right here okay so
40:10 - that's the use effect that we're gonna
40:11 - that's the use effect we're gonna need
40:13 - what we wanna do next is create a
40:14 - function where if i were to type in for
40:17 - example kevin inside this input field
40:20 - here i wanna be able to click set
40:22 - nickname and it will set my username on
40:24 - morales to be that because not
40:26 - everyone's gonna start off with the
40:27 - nickname so to get started on that we
40:29 - should create a function here i'm gonna
40:30 - create a function and i'm gonna call it
40:31 - const handle set username okay and in
40:34 - cons handle set username if there is a
40:36 - user then i want something to run all
40:38 - right if there's no user we can just
40:40 - console.log hey there is no user to set
40:43 - a nick right so not console.user no user
40:45 - so no user to set nickname but if there
40:47 - is a user i'm going to have another
40:49 - check here is that if that user has a
40:51 - nickname or in other words if nickname
40:52 - here is filled out like if i have lance
40:54 - in there what i want to do is do a user
40:57 - dot set what i want to do is user which
41:00 - is referencing the user in morales dot
41:02 - set parentheses nickname to be nickname
41:05 - okay what this does is if i press set
41:08 - nickname it's going to check if there's
41:10 - a user connected to our app it's going
41:12 - to check if there's something in the
41:14 - input field and in this line it's going
41:16 - to add a column in my morales database
41:19 - called nickname store lance as the
41:22 - nickname so that when we get it later
41:24 - lance will show up cool so after that
41:26 - what we want to do is user.save because
41:28 - we want to update our database from
41:30 - there we can just set nickname to empty
41:33 - string so this will clear our input
41:34 - field when we're done okay cool and the
41:37 - else statement for this one is going to
41:39 - be an edge case for if there's nothing
41:42 - in the input field you should just see a
41:43 - console that says can't set empty
41:46 - nickname okay so that's the handle set
41:49 - username function all right so that
41:51 - looks good to me what i want to do next
41:53 - is take a bunch of these things take a
41:55 - like everything we just made and put it
41:57 - in because remember earlier i told you
41:59 - whatever you pass in this value here is
42:01 - going to be global throughout our whole
42:03 - app so if you guys know anything about
42:05 - props we can prevent prop drilling this
42:07 - way so what i'm going to do is pass in
42:09 - is authenticated we're going to need a
42:10 - nickname we're also going to need set
42:12 - nickname and we're going to need
42:14 - username and while we're here let's also
42:15 - get set username cool so we're passing a
42:18 - lot of things into our value but that's
42:20 - not going to make our app work right
42:22 - because to use our context we need to go
42:24 - back into the sidebar and let's import i
42:27 - already took it for you we want to
42:28 - import use context from react and let's
42:31 - also import amazon context from dot dot
42:34 - slash contact slash amazon contacts so
42:36 - i'll give you a moment to do that done
42:38 - cool so let's use that hook so to get
42:40 - started using that hook i'm going to
42:41 - come down here and we can say okay so
42:43 - get started using context the first
42:45 - thing we're going to do is destructure
42:47 - our context so what that means is write
42:49 - something like this cons curly bracket
42:51 - equals use context now you want to put
42:53 - in the parentheses what context would
42:55 - you like to use if you remember at the
42:57 - top i was talking about how i imported
42:59 - the amazon contacts we set up so i'm
43:01 - going to pass that in here cool now the
43:02 - question is from your amazon contacts
43:05 - what do you want to take and the
43:07 - structure out of it so let's see what's
43:08 - available it's all of these i want to
43:10 - take all of these so what you can do is
43:12 - quite literally write them all out so
43:14 - just to make the format look nicer i'm
43:16 - going to say i want is authenticated i
43:17 - also want nickname set nickname username
43:21 - and now that i'm thinking about it we
43:22 - should also be passing in our function
43:24 - the one that we created handle set user
43:26 - name so i don't think i need to set user
43:28 - name here because that should be in our
43:29 - use effect what i do need is the handle
43:32 - set user cool so that's the last thing
43:33 - we're missing let's take handle set cool
43:36 - so that's everything we need and notice
43:37 - these little squigglies that's because i
43:39 - have these variables they already exist
43:41 - but i don't need to use them anymore
43:43 - what i can do now is take this out let's
43:45 - use our context oops and now you can see
43:47 - i'm only seeing the connect wall button
43:49 - because if i were to console.log is
43:50 - authenticated it's false right now i
43:52 - haven't logged in and that makes sense
43:54 - for our app so a couple things i'm going
43:56 - to do now is here i have it hard-coded
43:58 - to lance it should be username so let's
44:00 - see if this will break it let's do a
44:02 - template literal user awesome so didn't
44:05 - break it yet we're going to make use of
44:06 - that username the reason it's not
44:08 - breaking and saying username is not
44:09 - defined or it doesn't have a value is
44:11 - because of our conditional rendering so
44:13 - if there is no username then we'll see
44:15 - the connect wallet button and that's how
44:16 - this is working right now so what i want
44:18 - to do is comment back in this on change
44:21 - so all this means is when there is no
44:23 - username or in other words no nickname
44:25 - you should see that input field and
44:27 - every time i type in that input field it
44:29 - gets updated next thing i want to do is
44:31 - comment out this one which is the on
44:32 - click which runs the handle set username
44:35 - that i set up right here okay now it
44:37 - might just be the spelling handle set
44:39 - username okay and let me just double
44:41 - check that's how i had it yep there we
44:42 - go cool so everything should be good now
44:45 - let's take a look and let's try it out
44:47 - don't forget to add these parentheses i
44:49 - did a couple tests all right what you
44:50 - can do now is let's refresh and this
44:53 - should work now after adding the
44:54 - parentheses i'm going to hit connect
44:56 - wallet meta mask and i'll just make this
44:58 - a little bit bigger there we go metamask
45:00 - should see a little pop-up here there it
45:02 - is connect with account two hey there we
45:05 - go look at that so the button handles
45:07 - the login functionality the use effect
45:09 - is gonna help us with our rendering so
45:11 - now we have this because now is
45:13 - authenticated is true right is that the
45:15 - thing that is true but there's no
45:16 - username so how do we add a username
45:18 - we're going to make use of our handle
45:20 - set username function so what i'm going
45:21 - to do is let's type in name for me lance
45:23 - and i'm going to hit set nickname right
45:25 - and if we look over to our users we
45:27 - should see three total one is initially
45:30 - created when you first start out but the
45:32 - first one one at the top is the one that
45:34 - i just created just now okay so if you
45:36 - look at username i mean nothing's name
45:38 - if we look nickname there it is there's
45:40 - lance and when i was testing earlier
45:42 - there was loans okay so there we have it
45:44 - awesome so now if i hit refresh it's
45:46 - going to run that use effect to get the
45:48 - username hey there we go welcome lance
45:51 - and with that that's all the contacts
45:53 - that we need for the sidebar okay so
45:55 - let's move on to the products part of
45:57 - our build all right cool so like i said
45:59 - we're going to be working on the assets
46:02 - part of the amazon clone so if you
46:04 - remember the demo you looked there was
46:05 - some beautiful moving digital assets
46:07 - that we could buy so we have to set that
46:09 - up using morales database so what i'm
46:12 - going to do is let's make this full
46:13 - screen and let's head over to our
46:15 - morales dashboard but if you didn't know
46:17 - the morales database is built on top of
46:20 - mongodb so what we're going to need to
46:22 - do in order to pull our assets from the
46:25 - database is actually to set it up so
46:27 - this part is setting up your assets on
46:29 - the morale data space cool so to get
46:31 - started on setting it up hit this plus
46:33 - icon right here and as you can see you
46:34 - can create a new class which creates a
46:36 - new collection of objects what you want
46:38 - to do is select the class that you need
46:40 - and there's some predefined ones over
46:41 - here like user role product session but
46:44 - we can create custom ones which is cool
46:46 - so i'm going to call this one assets all
46:48 - right what i want to do is create the
46:49 - class so now we have our assets over
46:51 - here what we need to do next is add the
46:53 - fields for asset object so we're going
46:56 - to do is add a new column and here you
46:57 - can store the type of data that we want
46:59 - so as you can see it's by default it's
47:01 - string but you could also store booleans
47:03 - numbers date geo point file a pointer
47:06 - relational make a relational database
47:08 - and much more so a bunch of cool things
47:10 - you can do for the most part we're gonna
47:11 - be keeping it simple by making all these
47:14 - strings so the first key of our object
47:16 - would be name and as you can see it
47:18 - instantly adds the name column into our
47:21 - assets all right cool so you don't have
47:23 - to just keep clicking add a column if
47:24 - you think about the next key it's price
47:26 - and you can click add column and
47:28 - continue if you know you're going to
47:29 - make more so we made price now let's
47:32 - also make src which holds the image of
47:35 - our asset and that's going to be the
47:36 - last one okay one second okay and then
47:38 - from here let's add the actual assets
47:41 - itself so what we're going to do is
47:43 - actually create a new row and in this
47:45 - row you're going to see a lot of these
47:46 - are automated what you want to do is
47:48 - start defining the name price and source
47:50 - right so don't worry you can this is
47:52 - where you can add your own unique assets
47:54 - so if you don't like ours and you want
47:55 - to have some cooler things that you want
47:56 - to show like your own nfts that you've
47:58 - made this is where you put that in you
48:00 - put the name pricing source here for me
48:02 - i have a json file that you guys will
48:04 - have access to that you can include for
48:06 - your project so if i scroll down below i
48:09 - have a products.json and you can see a
48:11 - lot of it here so i'm going to be
48:13 - referencing this from time to time so
48:15 - the first thing i have here is something
48:16 - called bricktopian and let's see if i
48:18 - can see this cool so now you guys can
48:20 - see it better what i'm going to do is
48:22 - just copy the name of it bricktopian and
48:25 - i'll also format it like this and i'll
48:28 - show you like that so the first part of
48:29 - this is named bricktopian you can double
48:31 - click the field here and double click to
48:33 - make sure you see this little line and
48:35 - you can just paste the name that's it
48:36 - bricktopia's name i remember the price
48:38 - it's actually two and what i don't
48:40 - remember is actually the source file so
48:43 - click copy everything in the source you
48:45 - don't need the quotes and you can put
48:46 - that in the source field okay cool we're
48:49 - gonna do that for every single asset i'm
48:50 - gonna be moving a little bit fast now
48:51 - and remember if you wanna use ours use
48:53 - the json and if you wanna use your own
48:55 - feel free to fill it in there we go we
48:56 - have about eight you can add as much as
48:58 - you want i just wanna make sure our app
49:00 - is full with amazing things so there you
49:02 - go that's the products next thing i'm
49:04 - going to do is let's set up the front
49:06 - end of our app now all right so now that
49:08 - we finished setting up the assets on our
49:10 - morales database i need a cool way to
49:12 - show them because if you look our app is
49:14 - looking pretty bland right there should
49:15 - be a main component here that shows all
49:18 - our pretty assets that we just added so
49:20 - i'm going to make this smaller again and
49:21 - let's focus on the code so if you
49:23 - remember i'm going to go to my index and
49:26 - we also have this main component right
49:28 - here so let's set that up i'm gonna hit
49:29 - ctrl b and let's add another component
49:32 - here i'm gonna say main dot js cool and
49:36 - if you guys have the extension you can
49:37 - do an rafce it will set up your
49:40 - component for you and we should be good
49:42 - to go next thing we can do is flip back
49:45 - to our index and let's bring in our main
49:48 - and all you need to do to set up your
49:49 - main component is to write it like so
49:51 - and then be sure to import it into your
49:54 - app someone say main from components
49:56 - slash main so i'll hit save it's a weird
49:58 - error there there we go so see our main
50:00 - component is there it's gonna look a
50:02 - little funny because we don't have the
50:03 - header just and the features just yet so
50:06 - let's hop over to main and start
50:07 - building it up what i usually like to do
50:09 - is build out all the jsx first so i'm
50:11 - gonna format it and another thing i like
50:13 - to do is set up any import statements we
50:15 - might need so thinking ahead i'm just
50:17 - gonna use a use context because i'm
50:19 - gonna bring in context here later and
50:20 - also use effect sorry not use effect i'm
50:23 - gonna bring in use context and that
50:25 - should be it for now okay if i want to
50:27 - utilize use context we should also be
50:29 - getting our amazon contacts while we're
50:31 - here it's not going to come into play
50:32 - yet i'm just going to be making the
50:34 - front end first cool so this is our
50:35 - first outer div i'm going to do i'm
50:37 - going to give it a class name of styles
50:39 - dot oops styles dot container and within
50:43 - the main there's actually three
50:45 - components in here so i was mentioning
50:47 - earlier i'm gonna make a header
50:48 - component right i'm gonna make a
50:51 - featured component and as well as a
50:53 - cards component the cards component is
50:56 - going to represent where all our digital
50:58 - assets of the store are going to be so
51:00 - i'm going to comment out the ones i'm
51:02 - not going to build yet i want to focus
51:04 - more on the cards cool if you save this
51:06 - you're going to get error because we
51:07 - haven't defined our styles object and
51:09 - set up our tailwind so what i'll do is
51:12 - set that up now and i'm just gonna do a
51:13 - cons style equals an object and the
51:16 - first one i'm gonna do is container and
51:19 - it's gonna be h full width full give it
51:21 - a flex property and then you're going to
51:23 - want it to be in columns and you're
51:25 - going to say mt is 50 pixels and pr
51:28 - brackets 50 pixels as well you know i'll
51:31 - see here so you can see it a little bit
51:32 - better let's zoom in a bit cool how's
51:34 - that guys yeah i know it's a lot better
51:35 - overflow overflow dash hidden and that's
51:38 - it for container all right we only have
51:39 - container here but thinking ahead i'm
51:41 - gonna have a bunch more stylings so i'm
51:43 - gonna set that up now there's something
51:44 - that's called recent title and for
51:46 - recent title i'll have text
51:48 - to excel font bold oops it doesn't need
51:51 - these commas there we go fun fold text
51:53 - center mb 20 pixels text center empty 40
51:58 - pixels and that's going to be it for a
52:00 - recent title there's also going to be a
52:02 - cool recent transactions list so all the
52:05 - digital assets that we set up for our
52:06 - database you're going to be able to buy
52:08 - them with amazon coins and the amazon
52:10 - coins is something that we're going to
52:11 - make that you can use for your site so
52:12 - i'm going to make a recent transactions
52:14 - list that shows my recent transactions
52:16 - so well i'm getting too excited we're
52:18 - not making that yet i'm just going to do
52:19 - the styling for in the future so
52:21 - transaction card is next let's add that
52:23 - comma back in here and as for styling it
52:25 - has a flex property and we can do a
52:27 - justify between here all right mb 20
52:29 - pixel i'm gonna be p
52:31 - 30 pixels let's give it a background of
52:34 - tag 4 2 6 6
52:38 - 7 e make the text white rounded
52:41 - excel shaft excel font bold give it a
52:44 - nice gap of 20 pixels and again if i'm
52:47 - over moving too fast for you guys feel
52:48 - free to pause the video so you can not
52:50 - miss any of the stylings cool so again
52:53 - the only thing that we really have is
52:54 - the container and again we're seeing
52:56 - card is not defined let's go ahead and
52:57 - make that component cards with an s.js
53:00 - then you're going to do an r a f c e hit
53:02 - that card is set up you can go now go
53:04 - into back to main and let's import card
53:07 - import cards there we go so we got main
53:10 - and we also have cards okay so let's
53:12 - move on to the cards component one
53:13 - moment switching to cards all right so
53:16 - like i said the cards component is going
53:18 - to contain all of our assets right so
53:21 - what i want to do here import anything
53:23 - we might need which is going to be use
53:27 - state use context and that should be
53:29 - good for now and we can import amazon
53:32 - contacts because we're going to be using
53:34 - that later i'm just setting it up for
53:36 - now okay time to work on the rjsx for
53:38 - cards which isn't too many just like our
53:40 - main i'm going to give this div a class
53:41 - name class name called styles that
53:44 - container that style sheet thank you
53:46 - container all right from there we're
53:46 - going to make another div class name
53:48 - this one will be called title right
53:50 - we're going to have a new release here
53:52 - new release at least that's how you
53:54 - spell it cool let's make another div and
53:56 - here we'll have a cards div so it'll be
53:59 - styles dot cards so we're gonna do div
54:01 - class name styles dot cards and then
54:03 - within here this is actually where i
54:05 - wanna map through another component for
54:07 - each asset so what do i mean we're going
54:09 - to be getting the assets into here from
54:12 - our contacts and i'm going to map
54:13 - through each asset and for every asset
54:15 - i'm going to make a card component right
54:18 - this is actually the individual card
54:20 - that each asset is held in we're going
54:22 - to get squigglies because we need to
54:24 - make a cards component so i'll just do
54:26 - card no s dot j s r a f c e save hit
54:30 - enter save cool and now that we have
54:32 - this here i'm going to go ahead and
54:34 - import it import card from yep if you
54:36 - save we'll get the styles error it's not
54:39 - defined and let's go ahead and write our
54:41 - tailwind css so i'm going to set up the
54:43 - styles and again for the cards there's
54:44 - not much css as well it's just container
54:46 - going to b h full width full flex column
54:52 - ml-20 pixels oh i actually got to put
54:54 - that in
54:55 - t 50 pixels as well and again i'm going
54:58 - to alt z so you guys can see it better
54:59 - yep awesome so i'm going to title and
55:01 - i'm going to go like this let's make
55:03 - that text excel font folder mb dash 20
55:08 - pixels mt dash 30 pixels ml
55:12 - 30 pixels there you go cool so that's
55:13 - the title css then we want to get the
55:15 - card css oh and if you see that the
55:17 - comma here then we're going to have give
55:19 - it a flex property you want to do an
55:20 - item center and then a flex wrap and
55:23 - let's give it a gap of 80 pixels let's
55:26 - go okay hit save now we don't see any
55:28 - more errors shouldn't see much styling
55:30 - here because it just should say new
55:32 - releases and looks really small let's go
55:34 - ahead and check that out okay so yeah
55:36 - that's the cards component you won't see
55:38 - new release it's going to look funny but
55:40 - that's because we haven't set up our
55:42 - header yet i have some spacing for that
55:45 - so don't worry that's totally normal all
55:47 - right i want to show you guys the cards
55:48 - first get the cool features done first
55:50 - so there's the cards again for the card
55:53 - here what we need to do is a key oops
55:55 - what we need to do here is a key equals
55:57 - item dot oops item that id let's do an
56:01 - item equals item attributes all right
56:04 - and again we don't have any of those
56:05 - things so if i were to do something like
56:08 - so you're going to see an error called
56:09 - item not defined that's because we're
56:10 - not pulling any actual assets so
56:12 - temporarily let's make a couple
56:14 - variables i want to make an item here i
56:17 - want to make a variable called cons item
56:19 - make it an object and let's just give it
56:21 - an id of zero and there's going to be an
56:24 - attributes here and i believe attributes
56:26 - will also be an object with the name so
56:29 - i'm going to make like i said i'm making
56:31 - the item variable and i'm going to make
56:33 - some static data and i'm going to make
56:34 - an attributes key because when i pull
56:37 - the assets from morales we get it
56:39 - through the attributes i'm just going to
56:41 - hard code it like this for now and the
56:43 - name it could be anything it could be i
56:45 - don't know right then price let's make
56:48 - it two and for src let's just pull a
56:51 - random src from our json let's do
56:54 - products.json and i think there actually
56:56 - was a dojo one let's see you can get
56:58 - whatever you want on this yep that's the
57:00 - one i'm gonna hit so you can see it and
57:01 - you don't have to follow this step
57:03 - necessarily i just want to give you guys
57:04 - a good idea of what it might look like
57:07 - one card would might look like before
57:09 - pulling it cool so there you go there is
57:11 - the item now we don't get item is not
57:12 - defined i have a static one so let's
57:15 - head over to our card.js now okay moving
57:18 - over to car.js if you remember the way
57:20 - i'm passing down item that attributes is
57:23 - with the key so let's deconstruct that
57:25 - destructure that and just say item here
57:27 - so i don't have to say item.attribute
57:28 - it's just going to be known as item and
57:30 - for oops and for the card let's do the
57:34 - jsx now so this is the fun part going
57:36 - down below to div i'm going to have a
57:39 - class name of styles.cardcontainer.card
57:42 - container okay cool and then within that
57:44 - div we're gonna have another one which
57:46 - will have a class name of card so we'll
57:48 - say styles.cart okay cool here we'll
57:51 - contain an image and i've hit save by
57:53 - accident that's why we get an error but
57:55 - here we're gonna have an image so that
57:56 - tells me we need to import next image so
57:58 - i'm gonna say import image from next
58:00 - image it shouldn't be that like that
58:02 - should be more like this and while we're
58:04 - here let's set up any other imports
58:06 - which i know i want to have a used
58:08 - context here and if i have a used
58:10 - context here i also want amazon contacts
58:12 - here as well the only other thing is i
58:14 - want to import fa coins from react icons
58:18 - and you can do slash fa there you go
58:20 - that should be it for the imports cool
58:21 - so like i was saying inside the card
58:23 - let's include an image self closing and
58:26 - the src is going to be item dot sk class
58:29 - name for the class name i can actually
58:31 - give it some inline styling which is
58:33 - going to be object cover object center
58:36 - oh if squiggly lines that's because it
58:38 - needs an alt prop sorry about that i'm
58:39 - going to do a width it's going to be 190
58:41 - height 250. make it like a rectangular
58:44 - kind of shape it's going to be oops all
58:46 - is going to be product all right cool
58:48 - and we're almost done here but the next
58:50 - thing i want after we get the image set
58:52 - up is make another div within here and
58:54 - that is going to have another one with
58:56 - the class name of card title this is
58:58 - going to hold the title of our card so
59:00 - styles.card title okay and then here we
59:03 - can have item dot name okay and the next
59:05 - div right next to it we're gonna have
59:07 - another div called class name equals
59:10 - styles.price okay and here in our
59:12 - container for the card we're gonna have
59:14 - item.price in amazon coins and amazon
59:17 - coins just a real quick recap is just a
59:19 - token that we're going to create just
59:20 - for our app so we're also going to show
59:22 - you guys how to do that later on so far
59:24 - coins equals styles dot coins cool and
59:27 - that should be it let's see what am i
59:29 - missing oh do you have to make this up
59:31 - closing there you go awesome and to get
59:33 - rid of that annoying area let's make our
59:35 - style so i'm gonna say cons styles
59:37 - equals object okay cool there's a couple
59:40 - more like there's a bit more of css and
59:42 - this one so this is the card container
59:44 - and in that card container we're going
59:45 - to do a flex give it a flex property of
59:47 - flex column and then in the card itself
59:50 - there's a couple of things that we need
59:51 - to write it's going to be it's going to
59:53 - be h dash bracket 250 pixels with 190
59:58 - pixels rounded
60:00 - 3xl flex let's give it a cursor dash
60:04 - pointer transition dash all and i don't
60:07 - know i'll do alt z for you okay can you
60:09 - guys see now awesome give it a duration
60:11 - of 300 hover that scale dash 105 hover
60:15 - scale dash 105 hover shadow
60:19 - excel overflow hidden and give it a
60:22 - border
60:23 - black shadow
60:25 - excel order four border equals hashtag
60:31 - fb9701 i believe yes okay cool comma and
60:35 - that's all it is for card now it should
60:37 - be smooth sailing from here so i'm gonna
60:38 - do a card title and let's make that text
60:41 - large okay we can also make give it a
60:43 - font bold give it a flex property and we
60:45 - can do a text center with full flex 1
60:49 - justify
60:51 - center empty dash packet 10 pixels and
60:54 - again if we're going too fast feel free
60:56 - to pause the video so you don't miss a
60:57 - thing so do price text dash md font dash
61:01 - bold flex justify dash center coins it's
61:05 - going to be that ml-10 oops ml 10 pixel
61:09 - and there we go let's hit save hey look
61:11 - at that alright so if i were to bring
61:13 - this up nice so that's what our card is
61:15 - going to look like isn't this cool so
61:16 - can you imagine if you remember the demo
61:18 - all the assets that you made it's going
61:20 - to look super sick so i'm super excited
61:22 - about that there you go that is the
61:24 - front end let me show you guys how to
61:25 - actually pull the assets from morales so
61:27 - now that we have our amazing doge here
61:30 - i'm going to go back to my amazon con
61:31 - and let me show you guys how to query
61:33 - our morales database so one of the first
61:35 - things i'll do is let's set up the state
61:37 - to keep track of it so i'm going to say
61:39 - cons assets comma set assets okay and
61:43 - this is where we're going to store the
61:44 - data that we get from our db so you want
61:47 - to initialize this with an empty array
61:49 - and then from there remember how we
61:50 - deconstructed use morale's query it's a
61:53 - hook that we can use to make querying
61:55 - the db a lot easier which is super cool
61:58 - from morales so what we're going to do
61:59 - is set it up which is going to be
62:00 - similar like this should be something
62:03 - like this so const use morals
62:04 - parentheses and then within the
62:06 - parentheses here you have to put quotes
62:09 - and then the name of the class so what
62:12 - if you remember i called mine assets
62:14 - with a lowercase it's going to be case
62:16 - sensitive to what you wrote so if i were
62:17 - to do underscore user i would get the
62:20 - users class so there you go i'm getting
62:22 - the assets from my database let's
62:24 - destructure a couple things it's going
62:26 - to be data it's going to be data it's
62:28 - going to be assets data and then let's
62:30 - get an error here if there is an error
62:32 - we can do assets data error there's also
62:35 - a loading state that we can take
62:37 - advantage of if you want to so i'm going
62:39 - to say user data is loading cool so we
62:42 - get those three things from our morales
62:44 - query and then from down below we need
62:46 - to make a function to
62:48 - set our asset state and can you see
62:50 - where i'm going this once we set our
62:52 - asset state we need to go use utilize
62:54 - our contacts api and get a bunch of
62:57 - dynamic cards second down below in line
62:59 - 49 i'm going to make a function called
63:01 - get assets equals arrow cool and like i
63:05 - said all this is going to do is set the
63:07 - state so i'm going to do a try catch
63:09 - block here and that means you also have
63:10 - to make this asynchronous man in the
63:12 - catch all it is is pretty standard it's
63:14 - just catch error and you can just do a
63:16 - console.log
63:18 - error okay then from here i want to do
63:19 - an await enable web3 and then down below
63:23 - i'll also have a set assets and then you
63:26 - want to pass in assets data and if you
63:28 - forgot what assets data is it's exactly
63:31 - what we're querying users query is doing
63:32 - a lot of the heavy lifting here all
63:34 - right cool so we did the get assets
63:36 - functions we did a weight enable web3 i
63:38 - put a contour log here to see if it's
63:39 - running i feel like we don't need that
63:41 - anymore so this is our assets function
63:43 - and as you can see we're waiting to
63:45 - enable web3 and if it's enabled then we
63:48 - can set our asset state okay so now you
63:51 - have that function what we need to do
63:52 - next is let's make a use effect that
63:55 - calls that function so i'm going to say
63:57 - use effect and it takes two parameters
63:59 - the side effect you want to perform as
64:01 - well as the dependency module which
64:03 - controls when you want to perform the
64:04 - side effect and what i want to do in
64:06 - here is another asynchronous function
64:09 - you can make call itself like that and
64:10 - then from there what i want to do is if
64:13 - is web3 enabled if it is enabled then
64:16 - what i want to do is await get assets
64:19 - okay cool so we might come back to this
64:22 - one later but for now what i want to do
64:24 - is the dependency which is going to be
64:27 - get assets and is web enabled okay and
64:30 - now that we set up our contacts what i
64:32 - want to do next is update our provider
64:35 - with the variables and functions we want
64:37 - to use and that's just going to be
64:38 - assets okay i'm going to hit save and
64:40 - then from there we can head over to
64:42 - cards because this is where we're going
64:44 - to call our contacts this is where we're
64:45 - going to call assets from our with our
64:47 - contacts so we already have the hook set
64:49 - up here all we need to do is come down
64:51 - below and set it up so if i do const
64:53 - object equals use context pass in the
64:56 - context you would like to use we only
64:58 - have one and what you want to take from
65:00 - it so i'm destructuring assets from our
65:02 - contacts and if i have this assets here
65:05 - we're not going to need the static card
65:07 - anymore as well as our static items we
65:10 - have our database so before i have a lot
65:13 - of fun with our database i'm just going
65:14 - to console log assets here so let's hit
65:16 - save cool we lose our little doggy but
65:18 - he'll come back don't worry so let's
65:20 - make this a little bit bigger and let me
65:21 - inspect element hit console and let's go
65:23 - we have an array of 18 and that is
65:25 - exactly what we need so in index zero we
65:28 - have all of this stuff what we need is
65:30 - inside attributes so that's why we set
65:32 - it up the way we did so cool so we're
65:34 - getting our data what we need to do next
65:36 - is actually map through it so there's 18
65:39 - things we can do is asset.map
65:42 - okay and for every single asset or item
65:45 - we're going to make a card component
65:47 - just like we did before so card pass in
65:50 - the key as item dot id and pass in the
65:53 - attribute the item as item attribute
65:57 - attributes i believe i hit save okay
65:59 - let's map through it and let's see if
66:01 - it's in our console and if we look it
66:03 - says 18 so that's good so it's all there
66:06 - we're not seeing each card maybe because
66:09 - we should return let's go ahead and add
66:10 - a return statement cannot read
66:12 - properties of source okay that's fine oh
66:15 - i thought i had seo accent deleted it
66:17 - hit save and now let's find out what's
66:19 - up cool so now i'm returning but now it
66:21 - says array zero let's try refreshing
66:24 - okay so now let's get it now it's not
66:25 - querying at all let me go back to my
66:27 - context and let's look at the dependency
66:29 - modules let's put in assets data and
66:32 - assets data is loading maybe that would
66:34 - help cannot parse
66:36 - source okay so if you see this error
66:38 - that's must be something on our database
66:41 - what i could do is full screen this and
66:42 - let's take a look oh i see it yep and
66:44 - here this is wrong this should just be
66:47 - no quotes just that take out the ending
66:49 - code there we go all right yeah so that
66:51 - should be fine now and we're back to
66:52 - here now should be able to parse it hey
66:55 - okay they're slowly loading in we got
66:57 - the robocat we got skull we got rtfk
67:00 - punk got product okay so there we go
67:02 - we're getting the assets now all we have
67:05 - to do is make sure that it's all loading
67:07 - in properly so if you look at rtfk
67:10 - t-punk we can go double check that with
67:12 - our asset and double check if the link
67:14 - is broken i want to just copy this okay
67:16 - it's rtfktpunk
67:19 - nokia that's there this is it this is
67:22 - our beautiful assets that makes me happy
67:24 - to see but look at that this is our
67:25 - digital marketplace so doesn't this look
67:28 - amazing what we need to do now is let's
67:30 - add a header the features and let's make
67:33 - it so that we can actually buy these
67:35 - tokens so i'm gonna work on that next
67:37 - part but let's get excited our app is
67:39 - getting jacked alright guys in this
67:41 - section we're going to be setting up the
67:43 - smart contract this is the part you've
67:45 - been waiting for this is the blockchain
67:47 - solidity part but before i do when i'm
67:49 - looking at this app it looks amazing but
67:51 - i think i want to make it so that the
67:54 - borders match the theme of the amazon
67:56 - colors so what we can do is let me just
67:58 - quickly do this and click on this my vs
68:00 - code cool and to make it a lot better
68:03 - what i'm going to do is head over to my
68:05 - cards.js
68:06 - and instead of border black should be
68:09 - yellow color and i think the reason why
68:10 - is because this should not be equals
68:12 - this should be a dash so go ahead and
68:14 - fix this in your css so it can match the
68:16 - amazon colors a lot better so now i can
68:18 - take a look boom so now it's looking
68:20 - more like an amazon item right look at
68:22 - that awesome so without further ado
68:25 - let's head into the smart contract
68:26 - section all right so since this is
68:28 - purely the smart contract section we're
68:30 - not going to be needing to look at the
68:31 - website we're going to just focus on our
68:33 - vs code so one of the first things we
68:35 - need to do is let's go ahead and create
68:37 - a new folder and make sure it's not in
68:38 - public make sure it's at the root and
68:40 - i'm going to call it smart contract okay
68:42 - so now we have a smart contract folder
68:44 - everything here is where everything in
68:46 - the smart contract folder is where all
68:48 - of the relevant files we need to compile
68:51 - and deploy our smart contract so let me
68:53 - clear this out awesome and let me open
68:55 - my terminal as well and we can kill our
68:57 - web app for now what you want to do is
68:59 - cd into the smart contract folder and
69:01 - we're going to be installing something
69:02 - called hard hat hardhat is an
69:04 - environment that helps you test deploy
69:06 - and compile the smart contracts that you
69:08 - create so to get started we can do an
69:11 - npx hard hat alright so write npx
69:13 - hardhat in your terminal and make sure
69:14 - you're in the smart contract folder and
69:16 - enter and it should set up all the
69:18 - boilerplate code that we're going to
69:20 - need to do that okay now that's done
69:22 - what you want to do is create a basic
69:23 - sample project go ahead and hit enter
69:25 - again and you can go ahead and get
69:27 - ignore and for this you can say so look
69:29 - at that so now that the project folder
69:31 - is created you can see that there's a
69:32 - contracts folder a scripts folder a test
69:34 - folder and all of these other things so
69:36 - if you look at your package.json you
69:38 - should have a couple of things if you're
69:40 - not on their website they provide all
69:42 - the packages that you need to install
69:43 - but i actually have it saved right here
69:45 - and i'm just going to paste that command
69:46 - they stole me right so i should be able
69:48 - to use it awesome so after you do npx
69:50 - hard hat and set up our environment
69:53 - you're gonna let's take a look at our
69:54 - package json and you're gonna notice
69:56 - that sometimes there's a couple of
69:58 - things missing luckily hard hat provides
70:00 - you with all the modules that you need
70:02 - in case it doesn't show up so it's all
70:04 - of this feel free to take a look or look
70:06 - it up the documentation but you'll see
70:08 - it in a second when i install all right
70:10 - so i'm gonna do an npm install and
70:11 - install all these packages okay so
70:13 - double checked one of the packages wrong
70:14 - but now we should be good to go and
70:16 - let's install all these packages all
70:17 - right cool so all the packages are
70:18 - installed our hard hat is set up our
70:21 - environment is set up and only thing we
70:23 - need to do now is let's install open
70:25 - zeppelin okay so i'm gonna do another
70:27 - npm install here and do at open slash
70:30 - contracts okay so if you didn't know as
70:33 - i'm installing this open zeppelin is a
70:35 - library of ethereum contracts that
70:37 - follow a certain standard so instead of
70:39 - writing up all the contracts yourself
70:41 - and making sure that your contract fits
70:44 - the erc20 standard what you can do
70:46 - instead is import the open zeppelin
70:48 - library and just build on top of it if
70:50 - you're familiar with classes at all
70:51 - think if you had a class called ferrari
70:54 - extends car we have a ferrari class
70:56 - that's built building on top of the
70:58 - already established car class same thing
71:00 - here we're building off the standard and
71:02 - making our tokens in top of it sounds
71:05 - good so there you go so now you can see
71:06 - opens up an insider dependencies which
71:09 - means we're good to go and let's start
71:11 - writing our smart contract alright guys
71:13 - in this section i'm going to be showing
71:14 - you guys what you need to do to write
71:16 - your first smart contract as you can see
71:19 - if you look and click on greeter.sol
71:22 - you're going to notice that this is an
71:25 - example template smart contract given to
71:27 - us by hard hat and if you didn't know
71:30 - we're coding on the ethereum blockchain
71:32 - and one of the main programming
71:34 - languages there is solidity so we use
71:36 - solidity to create something called a
71:38 - smart contract if you don't know and
71:39 - you're new to with the web 3.0 space a
71:41 - smart contract you can think of it like
71:43 - a vending machine so with a vending
71:45 - machine if you want let's say a soda
71:47 - you're gonna click the soda button
71:49 - you're gonna put in your money you're
71:50 - gonna click the soda button and what you
71:52 - get back is the soda itself right
71:54 - instantly so for a smart contract you
71:56 - can set up some conditions that you want
71:58 - to happen for us we want to create
72:00 - amazon tokens in exchange for people's
72:03 - ethereum we want to use amazon tokens as
72:06 - our actual currency for our app so if
72:08 - you didn't want to if you wanted to make
72:09 - your own token this is going to be a
72:11 - good tutorial to follow so one thing we
72:13 - can do is we can actually delete the
72:15 - greeter.soul file right delete the
72:16 - greater.soul file and what i'm going to
72:18 - do is make this a little bit bigger as
72:19 - you can see and one thing that you're
72:21 - going to need is an extension if you go
72:24 - in here and type in solidity you're
72:25 - going to find something by juan blanco
72:28 - go ahead and install that this is a vs
72:30 - code extension so that it provides the
72:32 - ethereum solidity language support for
72:34 - vs code okay so install it add it to
72:36 - extensions and now we can go back to our
72:38 - code and in the smart contract folder
72:41 - under contracts that's now empty let's
72:43 - make a new file and let's call it
72:44 - amazoncoin.sol
72:47 - cool so here we go we have
72:48 - amazoncoin.sol okay and what we want to
72:50 - do next is for opens open zeppelin helps
72:53 - us build out our smart contracts because
72:56 - this smart contract is going to be erc20
72:58 - standard all that means is a smart
73:00 - contract made for token okay with that
73:02 - in mind if you're looking at this and
73:03 - you're like lance i don't know what to
73:05 - start writing the cool thing is open
73:07 - zeppelin has documentations and this
73:09 - contract wizard that can help you set up
73:11 - the base of your contract okay so i
73:13 - actually have it set up so i'm just
73:15 - gonna paste it in here and now let's
73:17 - switch their screen sizes around and
73:18 - there we go so head over to this website
73:21 - on the top docs dot open zeppelin.com
73:23 - contracts slash point x slash wizard
73:26 - right you get pointed to the screen and
73:28 - it shows you the default contract so one
73:30 - cool thing about solidity while we're
73:32 - here and then you're gonna can import
73:34 - anything that you might need is first
73:36 - you have to specify the version and here
73:38 - is where the contract is it's kind of
73:39 - like a class right so if you look you
73:42 - can select which standard you want so if
73:44 - you can click erc 721 or the one we're
73:47 - going to need is erc20 okay now
73:50 - analyzing this code if you're familiar
73:52 - with classes at all my token right you
73:54 - can think of my token as our class and
73:56 - it extends the erc20 standard so we're
73:58 - building on top of it cool so like i
74:00 - said we can use this to build the base
74:02 - of our app and the name of our contract
74:04 - we can just be amazon coin and the
74:06 - symbol for our token will just be ac so
74:08 - notice how you type in the parameters
74:10 - and it builds out the base of the
74:12 - contract for you so another thing we can
74:13 - do is click any features that you want
74:16 - your contract to have so here are a
74:17 - couple of different ones the one i know
74:19 - for sure that i need is the mintable one
74:21 - okay so make it mintable it adds this
74:24 - function mint which can allow us to mint
74:27 - the tokens that we want so what i'm
74:29 - going to do is copy that over and place
74:31 - it in our smart contract so it's just a
74:32 - super helpful tool to get you started
74:34 - especially for my beginners out there so
74:36 - what i'm going to do is make this small
74:37 - again okay cool so let's paste that and
74:39 - one thing you're going to notice is
74:40 - public only owner we don't want that to
74:42 - be only owner we actually wanted this to
74:44 - be payable so add that trade there and
74:47 - you're gonna see address to we're
74:48 - actually not sending these mint tokens
74:51 - to a specific address we're gonna just
74:54 - erase that parameter and we just need
74:55 - un256 amount okay awesome and you know
74:58 - what i'm actually just going to full
74:59 - screen this okay cool now you can see it
75:01 - a lot better next thing we need to do is
75:03 - add a require here require and for this
75:06 - require we're going to use it as a check
75:07 - to see that the amount that is needed to
75:09 - send is equal to the amount that of
75:12 - tokens that we want to get so we can
75:14 - write that and express it like
75:15 - message.value equals amount times 0.000
75:22 - ether comma invalid amount of ether so
75:26 - don't get scared by this line all it's
75:28 - saying is that if the amount that we
75:30 - need to send is equal to the amount of
75:32 - tokens that we want which is just a
75:33 - parameter passing in so for example if i
75:35 - want three amazon tokens we have to
75:38 - convert it to by this ether amount to
75:41 - match the message that value and if that
75:43 - is true we can go ahead and mint those
75:44 - tokens cool and then if you see a comma
75:46 - invalid amount of ether is if there's
75:48 - any sort of error it's going to run that
75:50 - string and show us that cool and here is
75:52 - the actual minting of the tokens and
75:55 - here and to replace two you can say
75:57 - message.sender right so give the tokens
76:00 - to us and the amount is still going to
76:02 - be the amount and the last thing we're
76:03 - going to do is receive external payable
76:07 - because like i said we're not sending
76:08 - these tokens or our ether to anybody
76:10 - else we're sending it straight to the
76:12 - smart contract which is cool we're
76:13 - putting in our money in the vending
76:14 - machine and the vending machine is
76:16 - giving us back tokens okay so we're
76:18 - gonna do a fallback external payable and
76:21 - cool there we go if you look another
76:23 - important thing to note about solidity
76:25 - it's very strict about the semicolon so
76:27 - if you get any sort of errors squiggly
76:28 - lines double check that but with that's
76:30 - it for the smart contract that wasn't so
76:32 - bad but there you go all right so now
76:34 - that we deployed our contract the next
76:35 - thing we're gonna do is come back to our
76:37 - actual app and let's start setting up
76:39 - our header so that we can put really
76:41 - cool functionality to it one thing
76:42 - you're gonna need is in your package
76:44 - json make sure you have react simple
76:47 - hook modal installed okay once you do we
76:50 - can just go over to our pages go to
76:52 - underscore app and from here what you
76:54 - want to do is import that modal so i'm
76:56 - going to say import modal provider from
76:59 - react simple hook mode okay and one
77:03 - thing that we're going to need to do is
77:04 - put this model as one of the most inner
77:06 - ones so i'm going to say motor provider
77:08 - close it off and we can close off and
77:11 - wrap it around our app there we go so
77:13 - that's set up the next thing you want to
77:14 - do is we can hop over to let's check out
77:17 - index all right and then i actually want
77:19 - to go to main so what we want to do next
77:21 - is let's go over to main and remember
77:23 - our header component we're going to go
77:24 - and make that so we're going to do is go
77:27 - to components and say new file and say
77:29 - header.js cool the drill rafc e then we
77:33 - can import it import header from header
77:37 - and comment this bad boy and it's stuck
77:39 - with featured so what i'll do is do this
77:40 - and then comment featured out cool so
77:42 - now we have a header so move back to
77:45 - header okay cool so the header is gonna
77:47 - have the functionality of where we can
77:50 - buy amazon coins in exchange for our
77:52 - ethereum so to set it up i'm gonna do a
77:54 - lot of the import statements first and i
77:56 - know i'm gonna use contacts later
77:58 - because that's the one where when you're
77:59 - going to need to talk to the smart
78:00 - contract for oops so we're going to do
78:02 - import react comma use contacts okay
78:05 - cool and there's also an amazon logo
78:07 - here that comes from my assets say
78:09 - import logo from forward slash asset
78:12 - slash amazon underscore logo underscore
78:16 - full dot png and i should have that let
78:18 - me just double check yep it's there cool
78:20 - okay you can also import image from next
78:23 - image and i don't know why it's doing
78:25 - this particular one but it should just
78:27 - be like that and the next thing we can
78:29 - do is import any of the icons i want to
78:32 - use so i'm going to do import cg menu
78:36 - grid o from react icons slash cg okay
78:40 - another one i'm just gonna clean this up
78:41 - another icon we want is i o m d
78:45 - search i believe and that's the same
78:47 - place except io cool import fa coins
78:51 - from the icon
78:53 - awesome and now that i'm thinking about
78:54 - we should also import our amazon
78:57 - contacts there you go awesome like i
78:59 - said we're going to be using a modal
79:01 - here that we installed with our packages
79:03 - so let's deconstruct it destructure it
79:05 - right here and say modal provider comma
79:08 - modal use modal and modal transition i
79:11 - don't think we're going to use all of
79:12 - these but i'm just going to have them
79:14 - just in case and the last thing is from
79:17 - react simple hook modal there's also
79:19 - some styling that i want to import from
79:20 - there so if i say import react simple
79:23 - hook modal slash dst styles dot css we
79:27 - should be good to go and but that's
79:29 - going to be it for now what we want to
79:31 - do next is let's go ahead and set up our
79:33 - jsx all right so the first thing we're
79:35 - gonna do is for our div let's give it
79:37 - the class name of
79:40 - styles.container not stylesheet okay
79:42 - let's have another div with the class
79:43 - name with the class name styles.logo
79:46 - because this is where the logo is gonna
79:48 - go right we can insert an image here and
79:50 - let's just set it up okay is source is
79:52 - equal to logo alt amazon oops alt amazon
79:56 - height is 100 with is also equal to 100
80:00 - and we can also give this an image a
80:01 - class name oops of object cover right
80:04 - that's the css we want to apply to it
80:06 - with tailwind and from there in the next
80:09 - line we can do another div this one will
80:11 - have a class name style dot search
80:14 - little search bar with an input we can
80:16 - actually make input of closing all right
80:18 - this is where the type is going to equal
80:20 - text placeholder search
80:22 - your assets
80:25 - styles dot search input cool so after
80:28 - those inputs in the next line within
80:30 - that div we can put the icon for the
80:34 - search and you can make the font size
80:36 - equal to 20. all right after that we can
80:37 - make another div this one's going to be
80:39 - called
80:40 - menu so we'll say style that menu styles
80:42 - that menu and within that menu there's
80:44 - going to be menu items so if i do div
80:46 - with the class name dot menu item what
80:49 - you can do next is copy it two times
80:51 - okay but then this first one is gonna be
80:53 - new releases and the second one is gonna
80:56 - be featured okay still inside the menu
80:59 - i'm going to have some conditional
81:01 - rendering which is basically going to
81:03 - check if there's a balance and again
81:05 - this balance thing doesn't exist so keep
81:07 - that in mind and it doesn't exist yet if
81:08 - balance exists what i want to happen is
81:10 - a div and within that very div it'll
81:13 - have the class name styles dot balance
81:16 - and styles dot menu item okay and it's
81:20 - gonna have an on click to open our modal
81:23 - okay all right so now it's our first
81:24 - like modal function so what we can do to
81:27 - actually get it working is say const
81:30 - object equals use modal and this is
81:32 - where we can get that open modal from so
81:33 - i'm going to destructure it from there
81:35 - you also want is modal open and close
81:38 - modal okay awesome and then in between
81:40 - that div finally we can put our balance
81:42 - in there just to show off how much about
81:44 - how much coins that we do have okay and
81:45 - we're still in the menu item we want far
81:48 - coins with the class name of
81:50 - styles.coins
81:52 - and here we can actually start using the
81:54 - modal itself so you say modal you want
81:56 - to say is open is equal to his modal
81:59 - open i'm going to say transition equal
82:01 - to modal transition dot scale and all
82:05 - capital and within that model we also
82:07 - are going to have a component so here
82:10 - i'm going to comment it out for now but
82:11 - there's going to be a buy modal
82:13 - component that's going to take in it's
82:15 - going to pass in a prop so let me set it
82:17 - up by modal and this doesn't exist just
82:20 - yet but i will soon so close is going to
82:22 - be closed model and there's going to be
82:24 - a buy tokens equals buy tokens buy
82:27 - tokens is going to be a function that
82:29 - we're going to call that's going to let
82:30 - us convert our ethereum to the amazon
82:33 - coins that we set up by talking to our
82:35 - smart contract cool so there it is okay
82:37 - after that closing div what you want to
82:39 - do now is have the closing parenthesis
82:41 - here call in and have another open run
82:44 - right here okay cool so in the very next
82:46 - line we can set up another div this one
82:48 - has a class name as well that is going
82:50 - to be just the styles styles dot balance
82:55 - comma styles
82:58 - dot menu item cool and i just realized
83:02 - this should probably be in parentheses
83:03 - there we go awesome it's going to zoom
83:05 - out a bit because i can't really see it
83:06 - enough let me do an altc as well okay
83:08 - cool so this is also going to have an on
83:11 - click that doesn't exist yet as well
83:13 - this has an on click that has open model
83:15 - actually i'm open modal and then one in
83:17 - here we can say zero ace because if they
83:20 - don't have a balance it's you can assume
83:21 - that they don't have any coins so you
83:23 - can say zero ac fall coins styles dot
83:26 - coins close it off have another modal
83:28 - here do it is open is modal open
83:32 - transition can modal transition dot
83:35 - scale just like before and there's
83:38 - actually a different types of
83:39 - transitions you can have for these
83:40 - models it doesn't have to be scale so
83:42 - feel free to look it up if you want to
83:43 - use something else and again there's
83:45 - going to be another bimodal here so i'm
83:46 - just copy it now let me get the closing
83:48 - div for this and see my missing okay so
83:51 - that should be it there is one more
83:54 - thing though should be a cg menu grid
83:56 - font size of 30 class name of styles
84:00 - menu item again and there we go see
84:03 - what's missing should be it it's
84:04 - literally this last div oh i see the
84:06 - issue now there you go nice okay so my
84:08 - header is good all i need to do now is
84:10 - start the css and to start the css from
84:13 - new con styles equals object and let's
84:16 - get started so there's a couple things
84:17 - with the styles on this one let's do
84:19 - another container and that container is
84:21 - just going to contain a height of 60
84:24 - pixels with dash full flex let's do an
84:28 - item center here let's do all c as well
84:30 - item center here gap of five and px-16
84:34 - comma here and then that's the container
84:36 - the next thing you want to do is let's
84:37 - style that logo and for logo we want
84:39 - flex items dash center you want an ml
84:43 - bracket 20 pixels you want cursor
84:46 - pointer flex dash one you want to search
84:49 - here the search is going to be p minus
84:51 - 25 px mr-30px
84:55 - and w for 400px okay we can do a height
84:59 - here of 40 pixels and in that search bar
85:01 - we want the background to be white
85:03 - rounded dash full shadow can be dash lg
85:07 - and we want the flex property here flex
85:10 - items center border dash black so that's
85:14 - the search let's also work on the search
85:16 - input and for the search input we're
85:18 - going to make the background transparent
85:20 - we're going to have the focus on the
85:22 - outline dash none and the border none
85:26 - flex dash one items dash center flex
85:29 - cool next we have menu and for the menu
85:31 - we can have flex as items dash center
85:33 - text dash md dash bold cursor dash
85:37 - pointer lastly we'll have the coins
85:39 - which is just going to be ml-10
85:43 - px and don't forget to put a bracket
85:44 - around that actually there we go let's
85:46 - go awesome so there we go this is the
85:49 - header.js and let's just see if it's
85:50 - running by opening up our terminal let's
85:53 - do netlify dev and let's give it a
85:55 - second to open up it's going to refresh
85:56 - this says not found which is interesting
85:58 - then go to 888. what does it say not
86:00 - found okay it says not found that's
86:02 - probably because it's still loading oh i
86:03 - see yeah because we're still in the
86:04 - smart contract folder i forgot the cd
86:06 - out of it make sure you are over here in
86:08 - the main folder and now you can do
86:10 - netlife there we go i'll hit refresh now
86:13 - oh i see i've accidentally put the hook
86:15 - outside it should actually be inside let
86:17 - me take this back out and go in here
86:20 - okay so now i can give it a nice refresh
86:22 - see oh no typo here there should be an s
86:25 - and
86:26 - balance out like i said we have some
86:27 - conditional rendering with something
86:29 - called balance which holds our amazon
86:31 - tokens or coins that doesn't exist yet
86:34 - so i'm gonna make a cons balance here
86:36 - and set that equal to let's say 99 or a
86:38 - string 99 rather okay and it looks
86:40 - really ugly that's because it's pretty
86:42 - squished in but there we go okay awesome
86:45 - if you look at it it's not quite there
86:47 - yet so let me just check on that css let
86:49 - me see am i missing anything oh of
86:51 - course i need the menu item yeah so this
86:53 - actually is the menu item and we should
86:55 - actually have menu and menu is just
86:57 - going to be flex oops flex items dash
87:01 - center and i need to give this a gap
87:04 - that's why it's a little smushed in and
87:05 - then come so now let's take a look that
87:07 - looks way cleaner now there's this like
87:10 - this new release thing and we can fix
87:12 - that up that's from earlier other than
87:13 - that that header looks pretty clean here
87:16 - is our input field awesome all right now
87:18 - let's go ahead over to our context to
87:20 - add some functionality for our header so
87:22 - here we go what i need to do now is hop
87:24 - over to your files and what we need to
87:27 - do is create another folder so next step
87:30 - create a folder call it lib and inside
87:33 - this lib folder is going to be something
87:35 - called our constants.js this will make
87:37 - sense in a moment and also inside your
87:39 - lib folder is if you go to your smart
87:41 - contract and you go to artifact and go
87:43 - under contracts you're going to see
87:44 - something called
87:45 - amazoncoin.json and make sure it's not
87:48 - amazoncoin.dpg you want just the dot
87:50 - json so it's going to be whatever name
87:51 - and go ahead and copy it and put it in
87:54 - your lib folder along with your
87:55 - constants.js cool so what you want to do
87:58 - from there now that you copied it over
87:59 - you can say import amazon coin from dot
88:02 - forward slash amazoncoin.json so i'm
88:05 - importing this.json so that later i can
88:08 - get extract the api from it which we'll
88:10 - need later so next line export const
88:13 - amazon coin address is going to equal a
88:17 - string that's gonna have your smart
88:20 - contracts address save mine over here
88:22 - remember i told you guys to save it and
88:23 - i'm gonna paste it in there and there
88:25 - you go there's your amazon coin address
88:27 - and lastly we want to export const
88:30 - amazon abi and set that equal to amazon
88:34 - coin dot abi okay so we got the api from
88:38 - our amazon coin.json and storing in a
88:40 - variable and then exporting it with that
88:42 - our constants and our lib folder should
88:44 - be good to go we should just go into our
88:46 - amazon context and let's update it with
88:48 - the functionality for buying tokens
88:51 - so cool so since this is mostly just
88:53 - functionality i'm not going to see
88:54 - anything on the front end yet let's make
88:56 - this full screen putting down our
88:57 - terminal do something like this and
88:59 - there you go so let's import all those
89:01 - things that we exported so let's say
89:03 - amazon api and amazon okay yep and just
89:07 - double check it does exist amazon coin
89:09 - address cool and not only that we're
89:11 - gonna need to import ethers from ethers
89:14 - and if you're not sure double check in
89:16 - your package.json that you have ethers
89:18 - and we should have earlier in the video
89:20 - there it is okay cool so we have all of
89:22 - that next thing we can do is set up a
89:24 - couple states and what i want to add
89:26 - right now is something called the
89:27 - current account which is going to hurt
89:29 - hold the current accounts address so
89:33 - this will be set current count equals
89:36 - use state then it can be empty string at
89:38 - first awesome next thing i want to do is
89:40 - sconce token amount so token amount is
89:42 - going to control keep track of how many
89:44 - tokens that i want to request for my app
89:47 - set token set that equal to use state
89:50 - next one i want to set up is something
89:52 - called amount due i'm going to do set
89:54 - amounts due can you go use state okay
89:57 - another variable that i want to set up
89:58 - is the ether scan link right ether scan
90:02 - link it's going to do exactly what it
90:04 - says which is going to keep track of the
90:06 - ether scan link so that you can click it
90:08 - and prove that your transaction was real
90:10 - clear scan okay oops little typo here
90:12 - there we go next let's add another one
90:14 - this one is called is loading loading is
90:17 - going to keep track and help us out with
90:18 - the modal because if loading is true
90:21 - then i should see like this loading
90:22 - animation which will make more sense
90:24 - later oops louding there we go loading
90:26 - equals use state and actually this
90:28 - should be initialized to false and last
90:30 - but not least but also the most
90:32 - important one we should also keep track
90:34 - of our balance and by balance how much
90:37 - amazon coins do we currently have which
90:39 - will also be an empty string so that was
90:41 - a lot of different states we're going to
90:42 - be putting them into the provider much
90:44 - later but what i want to do next is set
90:46 - up the functions that we're going to
90:47 - need okay so coming down to the bottom
90:49 - at the top here i'm going to make
90:51 - another function and let's call it get
90:52 - balance and it's going to be
90:54 - asynchronous and if something's a
90:55 - synchronous usually it has a try catch
90:57 - which will have an error which always
91:00 - usually console logs that error nice
91:02 - okay so with that said let's work on the
91:04 - try block so we can do is if user is not
91:07 - authenticated or there is no current
91:10 - count which is the new state we set up
91:12 - we're just going to return right and
91:14 - another and so that's the edge case but
91:16 - if there is a current account and they
91:19 - are authenticated then we want to do
91:21 - cons options
91:22 - options equals object because we're
91:24 - going to pass options in in just a
91:26 - little bit but the way we want to set up
91:27 - this object is something like this we
91:29 - say the contract address right and then
91:32 - we pass in the amazon coin address i'm
91:35 - letting my code know that this is the
91:37 - contract that i want to talk to and i'm
91:39 - going to say function name what function
91:42 - do i want to run from that smart
91:44 - contract and it's going to be called
91:46 - balance of you didn't see us make a
91:48 - balance of on the smart contract but if
91:50 - you remember open zeppelin has the erc20
91:52 - library that has a balance of function
91:55 - built in it was inherited when we made
91:57 - our account so we're going to make use
91:58 - of it and calculate what our balance is
92:01 - so we're going to make use of it there
92:02 - next we need the abi which is going to
92:04 - be the amazon api that we imported and
92:07 - for the params the params of that
92:09 - function is just account so we haven't
92:11 - actually set anything up we just set up
92:13 - our options in order to do that we're
92:15 - going to do is web 3 enabled and within
92:18 - that we're going to do constant response
92:20 - equals morales dot execute function
92:24 - option so we're going to use morales to
92:26 - run the function and pass in options so
92:30 - essentially we're talking to this
92:31 - address we're running this function
92:33 - we're using this api and we're passing
92:34 - account as the parameter okay cool so
92:36 - then what we want to do next is set the
92:38 - balance and what we're going to get back
92:40 - from the response is actually a
92:42 - hexadecimal but what we can do to fix
92:45 - that is just response dot 2 string okay
92:48 - cool so that's the get bounce function
92:50 - alright so that's the get balance
92:51 - function and now for another function
92:54 - that's going to be called by tokens
92:56 - that's right it does exactly what it
92:58 - sounds like this is the actual function
92:59 - itself that's going to let us convert
93:02 - our ethereum to tokens all right so if
93:05 - the user is not authenticated then what
93:08 - we want to happen is an await
93:10 - authenticate right basically if the user
93:12 - is not logged in it's going to prompt
93:14 - the user to authenticate okay cool so
93:16 - now that that is set up we can actually
93:18 - do the function now so we can set up a
93:21 - variable called amount and we can get
93:23 - ethers dot big number dot from token
93:27 - amount what we want to do next is decide
93:29 - how much ethers one amazon coin costs so
93:33 - what we can do is go over to our browser
93:36 - again so we can make this full screen
93:38 - and what i can do is i have a website
93:40 - ready for you guys that can convert our
93:42 - ethereum to whey and how i decided to
93:44 - convert my amazon coins is going to be
93:46 - 0.0001
93:48 - and that's how much way it's gonna be
93:50 - when you convert it that's important
93:52 - because smart contracts takes ethers in
93:54 - way so we're gonna do quotes here put in
93:57 - that long string and then we can
93:59 - calculate the price by making a variable
94:01 - oops called cog price equals amount that
94:04 - mole price okay and it should be eight
94:06 - thirds awesome so that looks good to me
94:08 - and if you didn't know buy tokens is
94:09 - going to be pretty similar to the get
94:12 - balance where we're going to set up an
94:13 - options again then i'm going to say what
94:15 - address contract i want to use which
94:17 - should be pretty obvious at this point
94:19 - amazon coin address and the function
94:20 - name try to guess it before i type it's
94:22 - going to be mint exactly good job joe i
94:25 - don't know if joe's were watching but if
94:26 - there was a joe watching i hope you got
94:28 - scared so abi is going to be amazon api
94:31 - then we're going to do message value and
94:33 - it's going to be calc price okay and
94:35 - then for the params so remember our
94:37 - require function that we made on the
94:39 - smart contract this is what message
94:41 - value is so params is going to be just
94:44 - amount and we're just going to pass it
94:46 - like and then we got amount from tokyo
94:47 - okay cool so that's the options but
94:49 - we're not done yet like i said this is
94:51 - just setting up the options let's
94:52 - actually set up our transaction by
94:54 - storing it in a variable and that's
94:56 - going to be equal to weight dot morales
94:58 - dot execute function exactly so we pass
95:01 - in options again to run everything i
95:04 - said in our options okay then i'm going
95:06 - to make another variable called wrist
95:07 - all right and it's going to hit a weight
95:09 - transaction dot weight okay and then i
95:12 - put four here and when you get four here
95:14 - it's going to wait for four blocks to be
95:16 - verified before finishing the
95:18 - transaction and that's just to ensure
95:20 - that it's more valid right because the
95:23 - way block chains work there can be
95:24 - multiple blocks that are discovered but
95:26 - the longest chain is considered the
95:29 - truth or the real one you want to ensure
95:31 - that by putting a fork here you don't
95:33 - have to but it's just optional so i'm
95:34 - going to do set is loading to false and
95:37 - if you notice it's false here and
95:39 - initialize that's false that's because
95:41 - later on when i move it with my context
95:43 - api we're going to be setting loading to
95:45 - true elsewhere okay i also just want to
95:47 - console.log the receipt just so i can
95:50 - see it get printed when it's done then
95:52 - lastly we can do a set ether scan link
95:55 - which is going to be quotes https
95:59 - colon forward slash forward slash ring
96:01 - to be dot ether scan i'm doing this
96:04 - because i can see in my console a link
96:06 - that i can click on to take me to the
96:08 - actual eso scan address without me
96:10 - typing it in which will be pretty handy
96:12 - later on so again here's the template
96:13 - literal we can put receipt dot
96:15 - transaction receipt dot transaction hash
96:19 - and you can just put a comment cool
96:20 - awesome so we got our two functions
96:22 - ready all we need to do now is hop over
96:24 - to our use effect and update these
96:26 - effect that i want to update is this one
96:28 - so i want to say const account equals
96:31 - await user question mark dot get should
96:34 - be eth address i believe this will get
96:37 - the account the user's etherdress and we
96:40 - want to do our set username sorry in our
96:42 - site username our setcurrent account
96:44 - actually and set it to this current
96:47 - account etherdress cool so now we can
96:50 - put current account in there as well
96:52 - okay cool very nice okay so that use
96:54 - effect is done let's make use of our get
96:56 - balance and get balance is actually
96:58 - gonna go at the top here so we're gonna
96:59 - say get balance awesome that's it for
97:02 - the use effect we haven't used buy
97:03 - tokens yet because that's something that
97:06 - should be set up on the modal so coming
97:08 - down below to the value let's add a
97:10 - couple more things we can bring the
97:13 - knockout balance but we can bring the
97:14 - balance and make that global we can also
97:17 - set token amount and the token amount we
97:20 - can talk about amount due and set amount
97:22 - due he also needs to pass in his loading
97:24 - for set is loading so that we can make
97:26 - it true later on i'll also do set ether
97:29 - scan link not sure if we're gonna need
97:31 - that but we'll just put it in for now so
97:32 - also etherscan link and while we're here
97:34 - we can also do current account awesome
97:36 - so that looks pretty good that's all the
97:38 - states that i need to pass for now and
97:40 - if i forget i'll come back but that's it
97:41 - guys that's the amazon contacts updated
97:43 - now so let's apply the functionality by
97:46 - building the bimodal component cool all
97:48 - right guys so after you pass all of
97:50 - these things into value it's going to
97:52 - make all of these variables and
97:53 - functions global like i mentioned
97:55 - previously what we need to do next is if
97:57 - you remember if i go to our header and
98:00 - you look down below we have this bimodal
98:04 - component that doesn't exist yet so
98:05 - let's go ahead and make it and now that
98:07 - i'm realizing it we don't actually need
98:08 - to pass that down as a prop so i'm going
98:09 - to take out by tokens equals by tokens
98:12 - so let's create that component i'm going
98:14 - to go open this up hit new file and
98:16 - let's call it by dot js okay and in
98:19 - bimodal dot js let's go ahead and set up
98:22 - our component and then as usual set up
98:26 - all our imports that we'll need so
98:27 - thinking i'm gonna use context use
98:29 - context and then we're gonna do use
98:31 - effect okay and then from there i have a
98:33 - couple of i have a react icon that i
98:35 - would like import which is just gonna be
98:37 - ios close from react dash icons slash
98:42 - the io awesome and also since i imported
98:45 - use context let's get our contacts so
98:48 - there's our amazon one and we can also
98:51 - import something from react spinner so
98:53 - again if you go to your package.json you
98:56 - look for react spinners make sure you
98:57 - have it there's mine so what i can do
98:59 - now is import hash loader from react
99:02 - spinners okay and then we can import
99:04 - link right from next link okay awesome
99:07 - and i know in bimodal i'm gonna get a
99:09 - close property so we haven't commented
99:13 - out yet so it's not actually passing
99:14 - that prop in yet but we're setting it up
99:16 - for success in the future we can set up
99:18 - the variables that we need from context
99:19 - already so i'll say object equals use
99:22 - context and you pass in amazon in there
99:25 - and in between the curly brackets i want
99:27 - amount due set amount due token amount
99:31 - set token is loading set is loading oops
99:36 - ether scan link and set ether scan that
99:40 - was pretty much everything that i just
99:42 - imported into the context which is why
99:43 - we set it up earlier okay another thing
99:45 - i can do while i'm here is make a
99:47 - function called const
99:49 - calculate price we already did calculate
99:52 - price in our contacts file but this
99:54 - calculate price is a function to display
99:56 - the price that we get back on the front
99:58 - end side so it's going to be const price
100:01 - is equal to parse float token amount and
100:04 - you can do times zero point 0.0001
100:09 - and that's supposed to represent how
100:10 - many ethers is converted from how much
100:13 - tokens we want okay then we do price
100:15 - equals price dot to fixed four and we
100:18 - can set the amount due here and put
100:20 - price awesome we had use effect here so
100:23 - let's actually call it so i'll say const
100:25 - not const i'll say use effect this one's
100:27 - gonna be pretty simple the side effect
100:30 - that i want to run is just to run a
100:31 - calculated price every time the bimodal
100:34 - component is loaded and we don't want
100:36 - this to run every single time we just
100:37 - want it when the token amount changes so
100:39 - put that in the dependency module and
100:40 - you're good to go beautiful next we can
100:43 - set up our jsx so first div i'm going to
100:46 - give it a class name of styles.container
100:49 - oops styles dot container okay and next
100:51 - we're gonna do is loading all right so
100:53 - we're gonna do some conditional
100:54 - rendering here and if is loading is true
100:57 - then we should put in our hash loader so
100:59 - i'll set up a div here with the class
101:01 - name something like the loader container
101:04 - and within those two divs we can put the
101:07 - hash loader and you can set the size to
101:09 - whatever you want i'm thinking 80. and
101:12 - again if you don't want to use the hash
101:13 - loader you don't like the animation that
101:14 - i'm using you can import a different
101:16 - kind of react spinner if you take a look
101:17 - at this library so i'm filling the hash
101:19 - loader today so let's use that so let's
101:22 - close off that parentheses because if is
101:24 - loading is false which means nothing is
101:27 - loading everything's a-okay we're going
101:29 - to have another fragment here and we
101:31 - should load
101:32 - and then if is loading as false we
101:34 - should load the actual modal itself
101:35 - let's do a div with the class name
101:37 - styles.close
101:39 - x
101:40 - okay and within that div let's take our
101:43 - icon self closing and it's gonna have an
101:45 - on click of close so when i click this
101:48 - button it should close and this close is
101:50 - coming from something i passed down to
101:52 - bimodal from header not only do you want
101:54 - it to close by the way you also want to
101:55 - make sure that the states are all
101:57 - cleared out so i'm going to do that by
101:58 - saying set amount do is empty set token
102:01 - amount empty and set ether ether scan
102:05 - link to empty there you go so we cleared
102:07 - it out on close and still inside this
102:10 - icon we can set the font size of it to
102:12 - be 50 and the class name it's not
102:15 - actually going to give it a name we're
102:16 - just going to give it some styling of
102:17 - cursor
102:19 - pointer so that when i hover over that x
102:21 - you can see that's nice okay cool so
102:23 - let's set up another div here and then
102:24 - we'll do class name styles dot title and
102:28 - in styles that title we can just say buy
102:30 - more amazon coins because we want to
102:31 - promote the use of our tokens at this
102:33 - store here so buy more amazon coins here
102:36 - i think that's a pretty good message and
102:37 - then from there we can do class name
102:40 - equal styles dot content and then in
102:43 - that content we can say select how many
102:46 - tokens would you like to buy just
102:48 - instructing the user on how to use the
102:50 - menu how to use the model so next we
102:52 - have another div which is just gonna
102:54 - contain our input field so i'm going to
102:55 - say div class styles that input okay
102:58 - here let's insert that input within here
103:00 - set up its attributes which is going to
103:02 - be type text placeholder to indicate
103:05 - that you should put an amount here of
103:06 - how many coins do you want now we can
103:08 - give this a actual class name
103:11 - styles.inputbox okay there's also going
103:13 - to be an on change in this input field
103:15 - because every single time i type
103:16 - something we should be updating the set
103:19 - token amount state so it's not ether
103:22 - scan link it's going to do something
103:23 - like this set token amount to be
103:26 - e.target.value so that's how you grab
103:28 - the input field if you were in case you
103:29 - were wondering and every single time i
103:31 - type something updates the state with
103:32 - whatever is in my input that's all that
103:34 - is so if you do value equals token
103:36 - amount that looks pretty good and we're
103:38 - still not done yet we want to make
103:39 - another div here actually and to do the
103:41 - class name styles.price
103:43 - which will show how much is due based on
103:46 - the amount so that's why i want to say
103:48 - total due curly brackets and empty and
103:50 - you can put token amount and token
103:53 - amount i'm setting up a ternary so if
103:55 - token amount exists and the token amount
103:57 - is greater than zero what i want to
103:59 - happen is what i want to see is amount
104:02 - due plus eth right so you can see how
104:05 - much eath and if there is no token
104:08 - amount it should just say zero make
104:10 - sense cool so that's the div last but
104:12 - not least is just the button that's
104:14 - gonna run the function that we want so
104:16 - i'm gonna format it and add the
104:18 - attributes that we need which we can
104:20 - start off with its name so i'm going to
104:22 - name him by button okay so then there's
104:25 - also this disabled attribute if there is
104:28 - no token amount or let me space out or
104:31 - the token amount is less than zero then
104:34 - they shouldn't be able to click the
104:36 - button so that's why i set that
104:37 - condition on the disabled prop so then
104:39 - on click we can put is loading to true
104:42 - right because when i press this button
104:43 - it's going to take some time for us to
104:45 - call the contract so what i want to do
104:47 - is set up our hash loader by setting is
104:49 - loading to true from there i want to buy
104:51 - tokens and let me just double check if
104:53 - i'm getting ah yeah we should also be
104:55 - getting that at the top here by tokens
104:57 - and in our amazon contacts we should
105:00 - also be passing that by tokens cool so
105:03 - now we're all good going back to bimodal
105:05 - be sure to get it from amazon contacts
105:08 - and so you can use it here the button
105:10 - the text we want for that button is just
105:12 - going to be should be easy for people to
105:14 - understand cool so another cool thing
105:16 - that i want is that if there's an ether
105:18 - scan link i want it to actually show up
105:20 - in the front end too so what we can do
105:23 - here is set up more conditional
105:24 - rendering so it's going to look
105:26 - something like div with the class name
105:28 - styles styles.success because if it's
105:31 - successful we would see this etherscan
105:33 - link so we'll say transaction
105:35 - successful check out oops check out your
105:40 - receipt or your transaction below so
105:43 - that's going to be super cool to see
105:44 - later when i get my coins i'll see a
105:46 - nice receipt below then we can also add
105:48 - another link here this one's going to
105:49 - have the href of the ether scan link so
105:52 - i'll put href and put literal ether
105:55 - scan but this is still inside that same
105:58 - link i want to give that person a little
106:00 - name styles.etherscan
106:03 - cool so within that link there's going
106:05 - to be an a tag with the class name also
106:08 - styles dot etherscan target equal
106:11 - underscore blank close that off and the
106:14 - link will say transaction receipt cool
106:16 - then after that link we can close off
106:19 - that conditional rendering and which
106:21 - will also finish this one off and let's
106:23 - see so link that close and looks like
106:27 - there's extra parentheses here and that
106:29 - should fix it yeah so that should be the
106:30 - closing parenthesis for that and the
106:32 - closing parenthesis for this it can be
106:34 - down there cool so no errors looks good
106:36 - to me and that's the bimodal component
106:38 - all right cool so that's the bimodal
106:40 - component let's get into the next part
106:41 - and let's see if it actually works all
106:43 - right guys cool so like i said that's
106:44 - the bimodal one thing i almost forgot to
106:47 - do was let's add our styles object in
106:49 - here so i'll say con styles equal object
106:52 - and let's start writing it out so for
106:54 - container it's just going to be height
106:56 - full width full and we'll do a flex
106:58 - property here with flex column that's it
107:00 - for the container okay so next we're
107:02 - going to close the close active which is
107:03 - going to be with full h50 pixels flex
107:07 - ops flex property here and then you're
107:10 - going to do items center justify and mb
107:14 - dash 20 pixels cool so let's close x
107:17 - let's style the title div which will
107:19 - just have a text dash 3 xl let's give it
107:22 - a bold font so by doing font bold give
107:25 - it a flex property flex give it a nice
107:27 - flex one items dash center then empty 20
107:31 - pixels okay then we're going to do a
107:32 - justify dash center with an mb dash
107:36 - bracket 40 pixels awesome you still with
107:39 - me okay for content what i'm going to do
107:41 - is flex w dash full and be 30 pixels and
107:46 - that should actually be in brackets nice
107:49 - okay after that we can do a text excel
107:52 - and a justify dash center and that's
107:55 - kant net it should be content good catch
107:58 - good catch for those of you watching
108:00 - thank you for selling me so input we're
108:02 - gonna have w dash full and we're gonna
108:05 - do h dash full with flex items dash
108:08 - center just
108:09 - center okay next let's add a background
108:12 - color of hashtag f7 f6 and f2 i believe
108:17 - and we can do like a focus with the
108:19 - outline not very nice let's do the input
108:23 - box now which we'll have with full
108:25 - height full give it a flex property and
108:27 - then we can style it with items center
108:30 - justify
108:32 - center nice background of hashtag f7 f6
108:38 - f2 i think it looks pretty good then we
108:40 - can do oh okay i think i mixed up this
108:41 - this is yeah this is the input box
108:44 - styling so let me just finish that out
108:45 - real quick so this is input box that's
108:48 - the one that makes more sense this
108:49 - should have the focus outline dash none
108:52 - the input though should just have a
108:54 - width of 50
108:57 - percent the height of 50 pixels pg dash
109:02 - hashtag f7 f6 f2 that's the background
109:07 - it should have and it should also be
109:08 - rounded lg and
109:10 - we can do ap dash 10 pixels then it
109:13 - should have a flex mx dash auto there
109:15 - you go that's the style for input this
109:17 - is the input box that looks pretty good
109:20 - now we can do price and price is going
109:22 - to be w full h full don't forget to put
109:24 - colon and we also want a flex here with
109:27 - items dash center and justify oops not
109:31 - item center it's just justify center
109:32 - actually justify center then item center
109:35 - then empty bracket 20 pixels give it a
109:38 - nice bold font like this and then do
109:41 - text dash three x l you got that cool
109:44 - let's do a buy button and in this buy
109:46 - button it has a width of 20
109:50 - and a height of 50 pixels and let's give
109:54 - it a background
109:55 - zero zero zero empty dash bracket 40
109:58 - pixels rounded dash lg p dash bracket 10
110:02 - px we have flex mx dash auto text is
110:06 - white yeah there's actually a lot on
110:08 - this by button one justify center and
110:12 - items center and cursor pointer that was
110:15 - a doozy but let's do an alt c so you can
110:17 - see all of it all right can you guys see
110:18 - that cool love to hear it there we go so
110:21 - container let's do the loader container
110:23 - we'll do a w dash full a h dash 500 px
110:29 - have a nice flex items dash center and a
110:32 - justify dash center there's a lot of css
110:35 - that goes into this one so let's keep it
110:37 - going with the loader okay and actually
110:40 - there should be a loader one might have
110:41 - spelled it wrong okay cool so there's
110:43 - none of that next one will be etherscan
110:45 - then etherscan is going to have css of w
110:49 - h dash flex items dash center justify
110:53 - dash center text
110:55 - green dash 500 text
110:57 - to
110:58 - excel empty
111:00 - 20 pixels a nice font that is bold and a
111:05 - cursed dash pointer as well nice okay so
111:08 - let's make that little success div it's
111:10 - the last one for now guys it's going to
111:11 - be w h full let's finish it out flex
111:14 - items center justify dash center text
111:19 - excel empty
111:20 - 20 pixels i keep forgetting the bracket
111:23 - 20 pixels and let's do a font
111:26 - bolder okay let's hit save and there we
111:28 - go that should be the css of the by
111:32 - modal so now it's time to actually check
111:34 - if this works i hit save i'm going to
111:36 - open up into my app hit refresh for good
111:38 - time sake and if i click this guy
111:41 - nothing happens okay so i'm gonna head
111:43 - into let's go into the header real quick
111:45 - oh yeah we also need to import the
111:47 - bimodal duh so let's go ahead and do
111:49 - that real quick import by modal from
111:53 - bimodal which now means i can bring this
111:55 - in and bring this in okay awesome so can
111:58 - i click this now so i'm hovering over it
112:00 - and i can't click it but the weird thing
112:02 - is that it should have a cursor pointer
112:06 - to it go back to my code real quick
112:07 - let's add a margin bottom of 50 pixels
112:11 - let's see so i'm adding margin bottom 50
112:13 - pixels to my header i want to do this
112:15 - temporarily because once we add the
112:17 - features feature component the styling
112:19 - of it will look a lot better but for now
112:21 - i'm going to put this mb
112:23 - 50 pixels so there we go and oh there we
112:26 - go nice okay so we can actually have our
112:28 - cursor pointer i think it's because of
112:29 - the overlap what i'll do is click on
112:31 - this hey let's go that's our modal our
112:34 - model is working beautifully now before
112:36 - i actually test the functionality of my
112:39 - tokens what i probably should do is
112:41 - let's update the header okay well how i
112:42 - want to update the header is to actually
112:45 - use context so i'll do that right here
112:47 - const equals use context and then pass
112:51 - it in and then what i want to get from
112:52 - amazon context shouldn't be that much it
112:55 - should just be balance and get balance
112:57 - function cool and then is am i using get
112:59 - balance here actually no i'm not so i
113:01 - think it's just balance i need then
113:03 - because that should be covered by the
113:04 - use effect so i'm gonna hit save and if
113:07 - you remember the reason why i see 99
113:09 - over here is because of the hard-coded
113:11 - balance
113:12 - if i'm gonna get it from my context we
113:15 - don't need the hard-coded balance
113:17 - anymore okay so if i save there we go
113:20 - it's gonna be zero ac but when i buy
113:22 - tokens it's going to update with how
113:24 - many tokens i have so let me do that
113:27 - cool so now like i said it's zero ac but
113:30 - when i actually buy amazon coins it's
113:32 - gonna update one quick thing though if
113:34 - you look at your meta mask you should
113:36 - check if you have zero if you have any
113:38 - ethereum because that's what you're
113:39 - gonna use to get amazon coins and i'm
113:41 - not using real ethereum that i bought
113:43 - make sure you're on the rinkbeat testnet
113:45 - okay so in this section i'm gonna be
113:47 - showing you guys how to get ethereum on
113:50 - the testnet so what you're gonna do is
113:52 - open a new tab put in this link
113:54 - faucets.chain.link slash rinkeby and
113:57 - here you can put in your wallet address
113:59 - so one cool way to do it is by
114:00 - connecting your wallet so i'm gonna go
114:02 - here and that should ask me to connect
114:05 - my wallet actually okay so this is on
114:08 - faucets.chain.link
114:10 - shrinkaby this is where we're going to
114:12 - be getting some test ethereum for us to
114:14 - play with as a developer we can connect
114:16 - our wallet i'm using metamath and make
114:18 - sure you're in the account that you want
114:20 - to have eth4 which i'm connected with
114:22 - account too so let's use that okay so
114:23 - now it's there i don't need test link i
114:26 - just need 0.1 eth there you go waiting
114:29 - for confirmation so anytime you're
114:31 - developing on the test net this is how
114:33 - you can get your test ethereum you're
114:35 - going to do this a couple of times in
114:36 - the faucet so i'm going to do the same
114:38 - thing so i'm just going to send request
114:40 - initiating waiting for confirmation and
114:42 - it usually takes a while because the
114:44 - rinkaby network is just a little slow
114:46 - okay close let me just double check how
114:48 - much ether i have now there you go see
114:49 - you can see a point to eat i'm gonna do
114:51 - this until i have about let's say seven
114:54 - so i'm just gonna cycle this through
114:55 - okay keep it going okay i'm gonna close
114:57 - to five yet four you know what let's
114:59 - just do one more to get to five and that
115:00 - should be good for now okay request
115:03 - complete so i did this a couple times
115:05 - now let's look i have point five
115:06 - ethereum now i can start playing anytime
115:09 - you need eth go ahead to this website
115:11 - now i'm gonna go back to my app oh yeah
115:13 - there was a change let me just refresh
115:15 - this awesome and again it should say
115:17 - zero amazon coins because i didn't buy
115:20 - tokens it so let's give it a try now so
115:21 - i'm gonna click this how many tokens
115:23 - would i like i'm gonna get let's get 10
115:25 - tokens right and the cost of these ten
115:28 - tokens is going to be point zero zero
115:30 - ten each so we have plenty so let's go
115:31 - ahead and hip and there it is loader
115:33 - container is not defined that is awesome
115:36 - yeah usually this doesn't work the first
115:38 - try why don't you guys tell me any
115:39 - sooner loader container is in the
115:43 - bimodal.js then and the loader container
115:46 - here order container it's going to be
115:48 - style
115:49 - dot loader container yep we're good to
115:51 - go let me hit save okay that's a new one
115:54 - error occurred in bimodal just go back
115:56 - to localhost okay let's try this again
115:58 - so just in case i'm gonna log out
116:00 - connect my wallet again sign i'm in cool
116:03 - click the modal and let's try let's get
116:05 - 10 coins let's buy okay cool cannot
116:08 - estimate gas transaction may fail let's
116:10 - see okay so i saw the loading screen
116:13 - which is a good thing but then we ran
116:14 - into this so i don't know if you guys
116:16 - saw but we got that weird error all i
116:18 - did so far was redeploy my smart
116:21 - contract and when i deployed my smart
116:23 - contract i got a new address and i'm
116:25 - using this now and when you get a new
116:26 - smart contract address make sure to
116:28 - recopy your amazoncoin.json and now it
116:31 - should work but i did want to fix up a
116:33 - couple of things i was looking over the
116:35 - code and there actually should be a
116:36 - forward slash here in one line 117 for
116:39 - me so i'm going to save that another
116:41 - thing i wanted to do is i wanted to make
116:43 - sure my balance is working so what i'm
116:46 - gonna do is put get balance here and if
116:49 - i put it there i should move it up to
116:50 - the top so i'm gonna get my balance oops
116:53 - copy that cut it let me grab it again
116:55 - cut it save and i'll just put a top
116:57 - above the use effect hit save there we
116:59 - go so now let's see if this works so
117:02 - moment of truth what i'm going to do is
117:03 - refresh this one more time make sure
117:05 - everything is running cool so if i click
117:07 - this
117:08 - bimodal works if let's say i'll get 10
117:11 - hey
117:12 - let's go awesome so yeah the debugging
117:14 - that took me a while but that's all part
117:16 - of being developer if you see a meta
117:18 - mask notification that's a good sign so
117:20 - if you look we are sending this many eth
117:23 - to it and it should meant us the right
117:25 - amount of token so let's confirm okay
117:28 - and sometimes this takes a while to load
117:30 - mainly because again we're communicating
117:32 - with the blockchain and it's not as fast
117:34 - just yet but in the future hopefully
117:36 - this gets a lot faster so now we wait
117:37 - let's go so if you look you can see
117:40 - transactions successful check out your
117:42 - receipt for your transaction below so
117:43 - i'm going to click on that so there you
117:45 - go proof that program is talking to the
117:48 - smart contract as you can see right here
117:50 - that's the address and you can see from
117:53 - me awesome so if we go back to our app
117:55 - now i hit x there it is that's our
117:57 - actual balance it's there and recorded
117:59 - this is awesome i'm super glad about it
118:02 - thank god so now we can move on to the
118:04 - next part all right so now that we
118:05 - finally can exchange our ether for coins
118:09 - let's go ahead and make it so that we
118:11 - can buy our beautiful assets that we
118:13 - have here don't you want to buy this
118:15 - doodles or this infinidoge that would be
118:17 - sick so let's go ahead and do that by
118:20 - going into our context file once again
118:22 - one thing that we're going to need to do
118:24 - is we need to query for the users when
118:27 - we're going to buy assets because
118:29 - eventually when i buy an asset i want to
118:31 - save it and attach it to that user
118:33 - because if you log in you should see all
118:34 - the assets you bought if my friend kevin
118:36 - logs in he should see all the assets
118:38 - that he bought cool so let's get set up
118:40 - remember before when we're querying for
118:42 - assets we're gonna do something similar
118:43 - so i'm gonna do const equals use morales
118:46 - query right these hooks are super
118:48 - powerful so let's make use of them so
118:50 - i'm going to say underscore user because
118:51 - that's the class name and inside this
118:54 - object here where we do structuring it
118:56 - we can call the data user data we're
118:58 - going to use that later on later also we
119:00 - can get error from here while we're at
119:02 - it user data error and then we can also
119:05 - do is loading cool so we're going to be
119:07 - using this in the use effect as well but
119:09 - we're not going to worry about that now
119:10 - so i'm going to save this and now come
119:12 - down below and we can just put it right
119:15 - here it doesn't matter all right so like
119:16 - i said this function it's not by tokens
119:19 - it's const by assets so that we can buy
119:22 - our digital assets on our marketplace so
119:24 - i'm going to do by asset equals
119:26 - asynchronous and if it's asynchronous we
119:29 - usually do a try catch here and i like
119:31 - to set up the catch because it's super
119:32 - easy so i'm just going to do console.log
119:35 - error cool so that's the by asset from
119:38 - here this is the fun part if the user is
119:41 - not authenticated or if is authenticated
119:43 - is false just return because they
119:44 - shouldn't be able to buy anything that
119:46 - they see here and then from here we're
119:48 - going to set up our options again so
119:50 - const options equals type and you can
119:53 - put here erc20 and then we can do amount
119:57 - as price and if you're wondering where
119:59 - price is coming from it's going to be a
120:00 - parameter that we're going to pass in on
120:02 - our card component as well as the asset
120:05 - itself so go ahead and pass price in and
120:07 - then for receiver just type it out like
120:09 - that and do an amazon coin address we're
120:12 - going to pull our smart contract to
120:14 - guest for the receiver and the contract
120:16 - address is going to be amazon coin okay
120:18 - so we're essentially giving the amazon
120:21 - coins that we have and sending it to the
120:23 - smart contract to purchase our asset so
120:26 - if that makes sense to you let's get to
120:28 - the next part let's do let transaction
120:30 - again and set that equal to an await
120:32 - morales.transfer
120:34 - we're going to transfer our coins in
120:35 - there and pass in the options from there
120:38 - let's do another const receipt equals
120:40 - await transaction dot wait and we can
120:43 - also do if receipt right if we get back
120:46 - a receipt we're going to do a const res
120:49 - equals user data and remember user data
120:51 - is what we queried bracket zero so when
120:54 - you do bracket zero that's gonna be the
120:55 - one that's currently logged in and i'm
120:58 - gonna do a dot add because when i do
120:59 - that add i'm gonna add a trade to this
121:02 - or remember like how we added a nickname
121:04 - to that user we can add another column
121:06 - by doing owned assets so now we're
121:08 - starting to store the assets that we buy
121:11 - to our user okay so i'm gonna do a comma
121:13 - curly brackets because the next thing we
121:15 - want to do is dot dot so which is gonna
121:17 - store all the information of that asset
121:19 - we're gonna put purchase date so we can
121:21 - know when we bought it which would be
121:22 - really nice and we can just do a date
121:24 - dot now and then oops and then in the
121:26 - next line we're gonna have an ether
121:29 - scan link so that when we look at the
121:32 - object of the user see the transaction
121:36 - receipt which is pretty cool so i'm
121:37 - going to do https colon forward slash
121:40 - rinkaby dot ether scan dot io slash tx
121:45 - and don't forget the forward slash like
121:46 - i did last time and i'm gonna do the
121:48 - template literal here just pass in the
121:50 - receipt that transaction hash cool all
121:53 - right we're not done just yet but after
121:55 - the if state we wanna do an await
121:57 - res.save because remember when we added
121:59 - a nickname we did a user.save so this
122:02 - time we're gonna save us adding the own
122:04 - asset to morales and then from there we
122:06 - want to do a dot then because after we
122:09 - save it right we got to let the indicate
122:10 - the user that they bought it so we can
122:12 - just do this alert feel free to upgrade
122:15 - to something else maybe you guys can
122:17 - make a pop-up which would be cool pretty
122:18 - cool but i'm just going to do an alert
122:20 - for now so i'm going to successfully
122:22 - purchased this asset let's go all right
122:25 - cool so now that we have that we can hit
122:27 - save and if we have the buy asset
122:29 - function let's go ahead and bring it
122:31 - down to our provider so we can make it
122:32 - global all right let's type in by asset
122:35 - so if you guys can take a guess where
122:36 - are we going to call this by asset
122:38 - function that's right exactly in our
122:40 - card js so we need to be pulling from
122:43 - our contact so let's make use of this
122:44 - hook right here so coming down below in
122:46 - line 15 for me i'm gonna do a const
122:49 - curly bracket equals use context all
122:52 - right so put parentheses here pass in
122:55 - amazon and just add what you need which
122:58 - is literally just the buy asset function
123:01 - and again make sure it's the same
123:03 - spelling by asset okay now i got to do
123:05 - is add an on click and i want to
123:07 - actually do this in the container so
123:09 - what i'm going to do is make some rune
123:12 - in the opening tag we can actually
123:14 - format it like so and then we can do an
123:17 - on click equals something like this and
123:20 - do a buy asset and it takes two
123:22 - parameters which is the item's price and
123:25 - just the information about the item and
123:27 - passing it in as asset okay so let's hit
123:30 - save okay and now if we go back to our
123:33 - app i'm going to hit refresh and we have
123:35 - 10 coins to play with so let's go ahead
123:37 - and buy something let's go ahead and get
123:39 - taste the rainbow oh look at that so if
123:41 - we click on the asset we have the
123:44 - metamask notification asking us to sign
123:46 - if we want to transfer our amazon coins
123:48 - for that okay so let's go ahead and hit
123:50 - confirm okay now we just got to wait for
123:52 - the transaction to process let's see did
123:54 - it take my money okay send a token oops
123:56 - and that's the accident clicked on it
123:58 - again and let's just double check on our
124:00 - morales database on user and this is the
124:03 - one for lance see oh should i hit
124:06 - refresh yeah so i didn't see my alert
124:08 - which tells me that something didn't
124:10 - quite go so i'm going to go back into my
124:12 - amazon context and it looks like most of
124:15 - it's going through so let's just console
124:18 - log here waiting for because if all
124:21 - that's good we should have saw that or
124:22 - looked so i'm just going to do another
124:24 - console log here success and we should
124:26 - probably spell it let's go saving that
124:28 - and now let's go back to here so let's
124:30 - click robocat and let's see if we can
124:31 - buy robocat now okay so this is a good
124:34 - sign we're getting the signature request
124:35 - we can hit confirm so it looks like it
124:37 - went through because i can see that i
124:40 - had 10 and now i have six which means i
124:42 - bought two things so that tells me that
124:44 - the amazon app is working let's freaking
124:47 - go guys so with that this is super cool
124:49 - and all but we're almost done with the
124:51 - app so if you're still watching this
124:53 - please leave a comment down below let's
124:54 - leave a comment let's this time if you
124:56 - say something like doodles in the
124:58 - comments i know that you've made it this
125:00 - far and you're able to get this working
125:01 - oops and i click doodles so it makes me
125:03 - want to buy it cool so if you say
125:04 - doodles down below i know you're still
125:05 - watching and you're crushing it so far
125:07 - so let's go into the next part because
125:09 - we can take this a step further by
125:11 - having a transaction history page
125:13 - imagine that you buy all these assets
125:15 - and you can see if you click this page
125:17 - the list of things that you bought so
125:19 - that would be super cool so let's set
125:20 - that up in the next part so i just
125:22 - quickly cleaned up my vs code and put
125:25 - our nice app on the side again what i
125:27 - want to do is create the features
125:30 - component right if you remember features
125:32 - component if you go look for it in the
125:35 - header i believe nope not the header
125:37 - actually it is the
125:39 - main ah there we go so in main.js
125:41 - there's this featured component that we
125:42 - haven't made yet let's go ahead and
125:45 - finally do one of the last components so
125:47 - i'm going to do featured.js
125:49 - there we go i'm just going to do that
125:50 - real quick there you go featured so the
125:53 - featured the idea with featured in this
125:55 - amazon build is that there's these
125:56 - really cool assets above underneath new
125:58 - release and that should fix our problem
126:01 - with the header so if you remember i had
126:03 - this temporarily with the mb the margin
126:06 - bottom with 15 pixels so we might not
126:08 - need that anymore so i'm gonna hit save
126:10 - and it's overlapping a bit but once we
126:11 - add this featured component should look
126:13 - a lot better so what i'm going to do is
126:15 - back in main we can comment this bad boy
126:17 - out so let's go ahead and import it
126:20 - using this auto import and close it off
126:22 - cool so now we have featured in there as
126:24 - you can see it just doesn't have any
126:26 - styling so let's set up the jsx and to
126:28 - set up the jsx let's go to line five
126:30 - recording okay line five for me and i'm
126:32 - setting it up like this and for the most
126:34 - outer div the convention is the same
126:37 - it's just gonna be styles dots oops
126:39 - styles dot container okay and then
126:41 - within that we're gonna have another div
126:44 - that's just gonna be the title so this
126:46 - one is styles dot title okay within
126:48 - there we can write top assets and
126:51 - underneath top assets we'll have a
126:53 - couple cards here so if i do styles dot
126:56 - cards we're gonna have about four and
126:58 - they're gonna be really cool because i'm
127:00 - gonna actually get these videos that are
127:02 - gonna be constantly playing so to get it
127:04 - set up in the cards div we're gonna do a
127:07 - div we're gonna have a class name equals
127:11 - styles dot card one like i said there's
127:13 - gonna be about four of these so the
127:15 - styling for them is gonna be pretty much
127:17 - so inside this div card one type in
127:20 - another one and for the name of this one
127:21 - i'm thinking let's call it styles.card
127:24 - cross nice okay and then in the cards
127:26 - cross i have it already i've already
127:28 - prepared it's gonna be this nice video
127:30 - tag and i didn't mean to press save
127:32 - that's why we're getting an error
127:33 - because there's no style object yet but
127:34 - what you should see html has this tag
127:37 - called video which just lets us play
127:40 - okay and if you look in the video tag i
127:42 - have something called autoplay loop
127:45 - muted and controls equals this with this
127:48 - class name object cover and this source
127:51 - folder here if i do an altc so you can
127:52 - see it better is going to link us to one
127:54 - of the mp4s that i have prepared so
127:57 - there you go now like i said the styling
127:59 - for these are going to be pretty similar
128:00 - but so i'm just going to copy this about
128:02 - three more times okay now what you got
128:05 - to keep an eye on is for the class names
128:07 - they're all slightly different this is
128:09 - card two card three and card four just
128:12 - keep it different and the videos are
128:14 - actually different as well so just added
128:17 - all the source files that we need and
128:18 - that is the last video right here there
128:21 - as you can see they're all slightly
128:22 - different and again you don't have to
128:24 - put these actual videos i encourage you
128:26 - guys to actually make this your own
128:28 - right you can use this project as a
128:30 - template to make your own nft
128:32 - marketplace and have your own tokens for
128:34 - you to build so highly encourage that
128:36 - and keep that in mind what i want to do
128:38 - next is let's set up that styles object
128:41 - so i'm going to do con styles equals and
128:43 - there's a lot of styling on this but
128:44 - once you get the pattern you can reuse
128:46 - it over and over again so not
128:47 - constrainer we want to do container now
128:49 - continue container and for the value
128:52 - we're just going to give it h
128:53 - 400 pixels that's the height we can do
128:56 - it with and give it a flex property of p
128:58 - dash bracket 20 pixels do a flex dash
129:02 - column so after the container what i'm
129:04 - going to do next is get the title div
129:06 - and the title div is going to have text
129:09 - dash to excel font folder from there we
129:12 - can add a margin bottom of 20 pixels
129:15 - margin top of bracket 30 pixels and
129:18 - margin bottom of 24 and an ml of dash 40
129:22 - pixels so that's going to be it for the
129:24 - title add a comma here and then we can
129:26 - start working on the cards div which is
129:28 - going to be an age full a with full flex
129:32 - gap of 100 pixels and let's put that
129:36 - bracket in there so that's the gap let's
129:38 - add a justify between mb-30
129:41 - pixels and an ml of 30 pixels as well
129:46 - nice okay so that's the cards then we
129:48 - want to do and style each card it's and
129:51 - to style each card itself
129:53 - and when i'm styling each card it's
129:54 - actually going to have the same styling
129:56 - so what we can do is do an h dash
130:00 - 130 pixels with a width of let's see 400
130:05 - pixels then we can add p dash 20 rounded
130:09 - dash 3xl and a background oops bg dash
130:13 - gradient of one one okay from there
130:16 - we're going to add a from bracket
130:18 - hashtag zero d one four one c all right
130:22 - that looks good and now we have another
130:24 - two hashtag four two six 6
130:28 - 7 e and we're going to do a relative
130:30 - cursor dash pointer so there's relative
130:33 - and then there's cursor pointer and then
130:34 - we want to transition
130:36 - all and duration from that to be 300
130:41 - and we can do a hover
130:42 - scale
130:44 - 105. okay i know this is a big one so if
130:47 - we do that let's add a hover shadow as
130:51 - well as a scale right to be one not to
130:53 - be one to be dash excel let's make it a
130:56 - border two and a border color of fb oops
131:00 - of hashtag fb97
131:03 - and oh that's card one but guess what
131:06 - card two three and four is about the
131:08 - same so i'm just gonna insert it like
131:09 - this and i can change it all right but
131:11 - if i'm setting it up this way because if
131:12 - you did want to give them all different
131:14 - stylings you could so if i hit save hope
131:16 - we got a style in card cross and that
131:19 - reminds me you actually have to make the
131:20 - card cross styling okay and i have to
131:22 - make the card cross styling but i'll
131:24 - tell you now it's not as bad as the last
131:26 - one so this one is just going to be h
131:29 - dash bracket 180 pixels the width can be
131:32 - 1
131:34 - 25 pixels rounded dash 3xl and just do
131:38 - an absolute here with the bottom dash
131:40 - bracket 20 pixels transition dash all
131:44 - with the duration of dash 300. still
131:47 - with me do a hover colon scale and make
131:50 - it 105 and give it a flex property and
131:52 - then overflow hidden there we go so
131:55 - that's it that's the styling for the
131:56 - feature.js if i hit save now we have
131:58 - another style thing for a card cross oh
132:01 - i did fix that let's go ahead and
132:03 - refresh oh i see because it's there's a
132:05 - multiple card crosses that makes sense
132:06 - so i'm going to fix out all of the card
132:08 - crosses that's the one i copied yep so
132:11 - double check your your divs and i don't
132:13 - think there's any more card crosses that
132:15 - need an s so i'm just going to hit
132:16 - refresh oh look at that nice okay so
132:20 - it's almost there you can see the videos
132:21 - are loaded i just need to add a nice
132:23 - card color you can see the videos now
132:25 - and it looks sick but the background
132:27 - should be there so i'm looking to see
132:29 - any typos ah okay yeah i always confuse
132:32 - this it should be an l instead of a one
132:35 - it looks so i'm gonna take out all the
132:36 - ones and put in an l and i believe i
132:39 - have this as a dollar sign it should be
132:41 - a hashtag for each of them so if i hit
132:43 - save now let's go full screen let's go
132:46 - look at this isn't this beautiful we
132:48 - have our own marketplace with these
132:50 - amazing videos on the top so like i said
132:53 - earlier we're gonna take this one step
132:55 - further we have one more page we're
132:56 - gonna do the transaction history and
132:58 - then we'll be done so let's put it 100
133:01 - into this last part and i'll see you
133:02 - guys there
133:06 - and then we have another one for two
133:09 - real quick there's only like little
133:11 - things we need to add on top besides the
133:13 - transaction page so one thing i want to
133:15 - improve is going into our morales db
133:19 - again i want to create a column and this
133:21 - will actually be the owned asset so it
133:23 - didn't show up before but we can make it
133:25 - show up by doing something like this by
133:28 - just adding a new column and it's a
133:30 - string and we'll call it owned assets
133:33 - okay i'm just going to add a column cool
133:35 - so now if you remember our by tokens in
133:38 - our context so let's do by oops that's
133:40 - not what i want do by asset and then we
133:43 - had this owned asset here let's just
133:45 - make that column and i think yeah let's
133:47 - add an s there too so i'm going to add
133:48 - an s to this owned assets so hit that
133:51 - and another thing that i'm realizing too
133:53 - this should actually be inside of the if
133:56 - statement that's probably why we didn't
133:58 - see it earlier so i'm going to put it
133:59 - down below here because now res is
134:01 - defined cool all right we hit save and
134:04 - now i want to add another state since
134:06 - we're already in the context and then if
134:08 - we do recent transactions we also do
134:10 - want to set recent transactions all
134:13 - right okay from there just set it equal
134:15 - to the use date and the initial state
134:17 - can be an empty array okay so after you
134:20 - set up the state for recent transactions
134:22 - come down below to the rest of our
134:23 - functions and we're going to make one
134:25 - called listen to updates one cool thing
134:28 - about morales they actually have
134:29 - websockets that you can connect to and
134:31 - subscribe so that anytime there is a
134:33 - change there it will automatically
134:34 - update so we're gonna take advantage of
134:36 - that and do a cons listen to updates
134:39 - function it's going to equal an
134:40 - asynchronous function and you guys know
134:42 - if we brought it like this we're going
134:44 - to have a let query variable and in that
134:48 - query we can say new morales dot query
134:51 - and in here i'm going to put eth
134:53 - transactions okay let's set up the
134:55 - websocket by making a variable called
134:57 - subscription and set that equal to our
134:59 - query dot subscribe awesome okay and
135:03 - then to turn it on we'll say
135:04 - subscription on and put parentheses and
135:07 - in quotes put update because every time
135:09 - there is an update i want to pass in the
135:11 - object and do a console.log new
135:14 - transaction so that i can see
135:16 - console.log the object that we get back
135:19 - and then we want to set the recent
135:20 - transaction to that object and like you
135:24 - remember the initial state it was an
135:25 - array so let's also make that object an
135:28 - array as well cool so after we do that
135:31 - let's scroll all the way to the bottom
135:33 - and let's add recent transactions to
135:36 - that list and if you remember in maine
135:38 - we had this style that we never really
135:40 - used so what now we can finally set that
135:42 - up so what we need to do first is
135:44 - utilize our contacts so coming down here
135:47 - i'm going to say and also this is
135:49 - bothering me this used to be which needs
135:50 - to be down here and let's utilize our
135:53 - context by saying recent transactions
135:56 - okay equals use context pass in the
135:58 - amazon contacts all right from there
136:01 - underneath cards let's set some
136:02 - conditional rendering and get the rest
136:04 - of this jsx done so recent
136:06 - transactions.length if it's greater than
136:08 - zero then if recent transactions.length
136:11 - is greater than zero and and add this
136:13 - and symbol here we're going to add an h1
136:16 - okay so this h1 is going to have a class
136:18 - name of that styles dot recent
136:21 - transaction or recent title sorry and
136:23 - then from in the in between we can put
136:26 - recent transactions or transaction cool
136:29 - then we're gonna add another curly
136:30 - bracket here for recent transactions
136:33 - again so if it exists we want to do a
136:35 - recent transaction dot map transaction
136:39 - here and we also want to pass an index
136:41 - so that we can use it as the key and i
136:43 - actually need to format this properly
136:45 - there we go all right and i make the
136:46 - arrow function because for each
136:48 - transaction i want to return this set of
136:52 - jsx so i'm going to do a div let's do a
136:54 - closing date for it and then within that
136:56 - div do a key equals index because if we
136:59 - put an index from the map it's all it's
137:01 - going to do is count from zero onwards
137:03 - so for every transaction it's going to
137:05 - go zero this div has a key of one this
137:07 - div has a key of two cool so then from
137:09 - there we can do a class name equals
137:11 - styles dot recent transaction list
137:15 - that's the last one that we needed now
137:18 - for this part the inner div that we have
137:20 - here it's gonna be the class name of
137:23 - styles dot transaction card okay see i
137:27 - think i spelled this wrong transaction
137:30 - card there we go no more squiggly and
137:32 - within that div we have a couple of p
137:33 - tags that i would like to write we're
137:35 - gonna have the transaction dot
137:37 - attributes and we get the from address
137:39 - here so we can see who it's from and
137:42 - then we have another one for two with
137:45 - same thing except instead of the from
137:47 - address we're gonna get the two address
137:49 - there's gonna be one more p tag here
137:51 - that one's gonna have a hash okay and
137:53 - then underneath that hash will have an a
137:55 - tag and for the attributes of the a tag
137:57 - we'll have which is underscore blink the
137:59 - real equals no
138:01 - opener
138:03 - no
138:03 - refer and then we have an href here
138:06 - which is the actual link itself which is
138:09 - going to be https
138:11 - colon forward slash forward slash
138:13 - rinkeby dot ether scan actually dot io
138:15 - slash tx slash same thing as before
138:18 - except instead in this template literal
138:20 - we're going to have a transaction again
138:22 - here transaction dot attributes and get
138:25 - that hash which will lead to the ether
138:27 - scan link okay and in between we'll have
138:30 - the nice transaction hash again so do
138:33 - transaction.attributes.hash
138:37 - once more but this time i'm going to
138:38 - format it with a slice and just do 0 to
138:41 - 10. then over here line 41 for me i'm
138:44 - going to have another p tag it's going
138:45 - to say gas
138:46 - transaction dot attribute dot gas okay
138:50 - i'll hit save now let's take a look at
138:52 - my app any issues on this cool and i
138:55 - just want to make sure console log
138:57 - recent transactions because it shouldn't
138:59 - be anything right now but let's make a
139:00 - purchase and see if all the updates we
139:03 - added are in there so again zero that
139:05 - makes sense man i'm actually really
139:06 - admiring the project we made today super
139:08 - proud of all the work that went into it
139:10 - yeah so let's test this out so i want to
139:11 - hit refresh one more time and now let's
139:14 - see if it all works out so i want a
139:17 - skull okay we got the metamask
139:19 - notification loading in this one's for
139:21 - the skull confirm oh look at that
139:23 - confirmed transaction six transactions
139:26 - confirmed okay that's not it should be
139:29 - in user let's see anything update here
139:31 - my coins didn't go down let's just give
139:33 - it a second maybe what i do want to see
139:35 - is the recent transaction so i did some
139:37 - testing it looks like recent
139:38 - transactions isn't showing up also i got
139:41 - an error that it was expecting an array
139:43 - so that tells me if we go into our
139:45 - morass database that this was originally
139:48 - searching for a string so i'm just going
139:50 - to delete a column let's just do remove
139:52 - and what i want to show you is how to
139:54 - fix it is by adding a new column and we
139:56 - put this as string before but this
139:58 - actually should be an array not a
140:00 - pointer so now it's an array so then we
140:02 - can make it owned assets so let's add
140:04 - that as a column so instead of expecting
140:06 - a string he'll expect that and the next
140:08 - thing i want to fix is when i was
140:10 - looking at my context one thing was
140:13 - interesting we never actually called
140:16 - listen to updates is something that
140:17 - should happen in our use effect so i'm
140:19 - going to come up to this use effect
140:21 - right here and underneath get balance
140:23 - i'm going to do an await listen to
140:25 - updates so now when i call it this
140:28 - should work so let's do this and yeah my
140:30 - last transaction went through but it
140:32 - didn't get stored so i got scammed i
140:34 - lost money on my own marketplace but now
140:37 - to prevent that issue on your code we
140:39 - fixed it up so this should work now so
140:41 - let's go ahead and try it so let's get
140:42 - this brick okay so let's go confirm and
140:45 - what we can do next is inspect and again
140:47 - these transactions usually take some
140:49 - time oh finally we can finally see that
140:51 - alert you successfully purchased this
140:53 - asset okay we got running yep and that's
140:56 - our receipt we saw the array see if
140:58 - recent transactions is here okay so no
141:00 - recent transactions yet but let's check
141:03 - our database again for owned assets we
141:06 - finally saw the alert message which
141:07 - that's a good sign hey look at that so
141:09 - underneath this account for lance i
141:11 - actually was able to buy a skull so now
141:14 - we can store any of the users purchases
141:16 - which is a good sign my next goal is to
141:18 - get this recent transactions working it
141:20 - looks like we didn't get our recent
141:24 - transaction yet and i'm still seeing
141:26 - this enable web3 error so i think let me
141:29 - think i think i might have an idea of
141:30 - how it works so let's go back to our
141:32 - amazon context and just like we did with
141:35 - get balance maybe we should add a listen
141:38 - to updates here okay and i'm gonna hit
141:40 - save try to put listen to updates at the
141:42 - top above these effects so that it can
141:44 - run so let's go up to here i see we have
141:46 - got balance i'm also going to put this
141:48 - above that i'm gonna hit save all right
141:50 - cool so we only have two tokens left i'm
141:52 - gonna go ahead and get a couple more i
141:54 - should still have some ease some eath
141:56 - i'm gonna go buy okay hit confirm there
141:59 - we go it's finally loaded oops open up
142:01 - the console and we there we go now we're
142:03 - rich we can go get more tokens so let's
142:06 - see one thing i want to do actually is
142:09 - let's look at listen to updates again oh
142:12 - wait no that's at the top now and let's
142:14 - do console log just to know it's running
142:16 - all right just to know it's listening so
142:18 - let me show this i already have a
142:20 - console log for running still listening
142:22 - because that's more accurate let me do a
142:23 - refresh here okay so it looks like we
142:25 - got 12 coins now that we are rich let's
142:28 - get another nft or digital asset let's
142:30 - get the nokia this time and hopefully we
142:32 - can see our recent transaction so
142:34 - clicked on the nokia let metamask do its
142:36 - thing finally loaded so now let's go and
142:39 - hit confirm let's claim my beautiful
142:41 - nokia and let's see if i can see it so
142:43 - there you go okay transaction confirmed
142:46 - there's my alert that's a good sign hit
142:48 - okay and now i hit x alright so after we
142:52 - hit save what i want to do next is i'm
142:55 - realizing that if we double check the
142:57 - owned assets in the morales db what we
142:59 - want to do is delete that because it
143:01 - shouldn't be a string it should actually
143:04 - be a column so let's go ahead and delete
143:07 - a column and select owned assets okay so
143:10 - i'm going to remove column and then i'm
143:12 - going to add a new column and remember i
143:14 - put this as a string by default let's
143:16 - make it an array owned assets and that's
143:18 - probably why we don't see any of our
143:19 - assets that we buy being saved to the
143:21 - user because it should be an array so i
143:23 - want to add a column owned assets there
143:25 - we go and again if you name it owned
143:27 - assets you got to double check in the
143:30 - card or in the amazon context where we
143:32 - make the buy assets function and see so
143:34 - let's see by assets and if i put in the
143:38 - between takes i put an s here just to
143:40 - make sure that it matches with the
143:41 - column so we should be good to go so
143:44 - once that's done i'm going gonna head
143:45 - back to
143:46 - featured to main and now all that's left
143:49 - is to just try and see if everything
143:51 - works fingers crossed so let's give it a
143:53 - try all right so when i head over to my
143:54 - page and also i'm just gonna zoom out
143:57 - because when i know when the css comes
143:59 - my laptop's pretty small oops got that
144:01 - part out so i'm going to give this a try
144:03 - where we can see the recent transaction
144:05 - so i'm going to hit refresh cool so i'm
144:07 - logged in i have four coins let's go
144:09 - ahead and buy a skull this whole time we
144:12 - were buying assets and nothing was
144:13 - getting saved but now that we updated
144:15 - that we should see it in our db and we
144:18 - should see a nice recent transaction at
144:20 - the bottom i'm gonna go ahead and click
144:22 - this hey we got the metamask
144:23 - notification to sign in that's always a
144:25 - good sign i'm just gonna let it load for
144:27 - a bit and remember this is just to
144:29 - transfer tokens right we're taking how
144:32 - many amazon coins we have and sending it
144:34 - to the smart contract then taking a
144:36 - record of the asset that we bought so
144:38 - i'm going to hit find spec element let's
144:40 - take a look at any console logs i'm
144:42 - running oh okay so if you see that parse
144:44 - object that is coming from the recent
144:47 - transactions websocket to morales failed
144:51 - oops okay there we go my internet went
144:53 - out a bit but you successfully purchased
144:54 - this asset they stole my money but in
144:57 - return i get my beautiful digital asset
145:00 - let's see if i can prove it by
145:02 - refreshing hey look at that so i'm
145:04 - logged in as lance and if you look in
145:05 - the owned assets i have the skull in
145:07 - there so that's awesome guys we have
145:10 - that working but the thing that i really
145:12 - care about is at the below let's see if
145:14 - it's there hey we got recent
145:16 - transactions so this is becoming more
145:18 - and more like a marketplace i want to
145:20 - encourage you guys to take this code and
145:22 - make it your own because you don't have
145:24 - to make amazon and follow along you can
145:26 - make your own unique marketplace put in
145:28 - your own assets set up your own smart
145:31 - contract with your unique tokens or
145:32 - coins and deploy it and put that in your
145:35 - portfolio because that is killer so with
145:37 - that said this is all pretty cool but
145:40 - what if we take it one more step further
145:42 - what if i click this transaction history
145:44 - and you could see all the assets that
145:46 - user bought so i think that would be
145:48 - pretty cool so let's work on that all
145:50 - right guys one thing before we get
145:51 - started in the next part i'm working on
145:53 - a laptop so the screen is a little small
145:54 - so if you notice that your recent
145:56 - transactions just go up
145:58 - one and zoom out a little bit and there
146:00 - you go nice and clean so if you're
146:02 - working on a bigger screen it might just
146:03 - look a little bit different but other
146:05 - than that this is the amazon page so
146:08 - next thing i want to do is let's finally
146:10 - finish the amazon context there's only
146:12 - one more function i believe that we need
146:14 - to add so let's go ahead and do that so
146:16 - to finish our amazon context i'm going
146:18 - to make another state here and let's
146:20 - clean this up a bit there we go you guys
146:21 - can see that cool oops that's too zoomed
146:23 - in for me so at the top here i'm gonna
146:25 - say const bracket owned items and then
146:29 - we're gonna do a set own items okay you
146:31 - can set that to a use state and we'll
146:33 - initialize it with an empty array and
146:35 - like i said we have one more function to
146:37 - do and that last function is going to be
146:39 - get owned assets so i'm going to find
146:42 - everything down here and i can just
146:44 - squeeze it in at line 182 for me so on
146:46 - line 182 i'm going to write get owned
146:49 - assets and make sure it's asynchronous
146:51 - just like everything else make an arrow
146:53 - function and let's add that try catch
146:54 - and for the catch it's just going to be
146:56 - error and then console.log error okay so
146:58 - console.log here cool now what's
147:01 - important is in this try block to get
147:03 - the owned assets i'm going to make use
147:06 - of the user data that we queried so if i
147:08 - do an if user data oops i'm just
147:10 - ensuring that we are querying the user
147:13 - and once it is there i'm gonna go check
147:16 - if we are logged in by doing bracket
147:17 - zero because bracket zero contains the
147:20 - currently logged in account so if i do
147:23 - that condition inside the if statement i
147:25 - can make use of the set owned items and
147:28 - the cool thing about states is you can
147:30 - have access to the previous items by
147:32 - saying prep items and this can be named
147:34 - everything you don't have to say pro
147:35 - items this could be called previous this
147:37 - could be called whatever you want so i'm
147:39 - going to do previous items and an arrow
147:41 - function here and what you can do is do
147:43 - a dot dot dot using the spread operator
147:45 - to get the previous items and then comma
147:48 - user data bracket zero dot attributes
147:52 - dot owned assets all right remember make
147:55 - sure it has the s because that should
147:56 - match up the column on our database
147:58 - let's see what's going on declaration
148:00 - expected oh i don't want this doesn't
148:02 - need to be here this actually should be
148:04 - the array because on items is an array
148:06 - okay take this out there we go so
148:08 - basically what's happening here is if i
148:10 - didn't use the spread opera here to
148:12 - deconstruct the prep items then i'm just
148:15 - replacing my owned items with the latest
148:17 - one you don't want to do that you want
148:18 - to add it on top of it so that's why
148:20 - we're setting up this way other than
148:22 - that's the function so can you guys
148:23 - guess where i'm going to use this
148:24 - function exactly that's going to be in
148:26 - the use effect so wherever in the user
148:28 - effect where we're getting the assets we
148:31 - should also be getting on items so at
148:34 - the top here i'm going to say get owned
148:36 - assets and make sure you add in the
148:37 - weight before it cool i'm gonna hit save
148:39 - and once that's done let's add it to our
148:41 - provider to make it global and then we
148:43 - can access it for our final component so
148:46 - i'm gonna add owned items make sure you
148:48 - add a comma here do is just add get on
148:50 - items and we actually don't need the
148:51 - function here because it's already being
148:52 - used in the use effect so i'm gonna hit
148:54 - save and guys guess what we finished the
148:57 - amazon context all right all right guys
148:59 - like i said let's make a awesome
149:01 - transaction history page and to do that
149:04 - we're gonna have to go and create the
149:06 - page file so i'm going to go open up
149:09 - pages and within here i'm just going to
149:11 - say new file and then we can say
149:14 - history.js awesome so we have history.js
149:18 - we can set it up similar to a component
149:20 - like so and let's make this a little bit
149:21 - bigger cool so what i want to do next is
149:23 - let's import anything we're going to
149:25 - need for this page which is just going
149:27 - to be our use context because remember
149:29 - earlier we set up owned items we're
149:31 - going to be using it here pretty soon we
149:33 - got use contacts let's import the
149:35 - sidebar because if you're thinking about
149:36 - it the history page should still contain
149:38 - the sidebar so i'm going to do a sidebar
149:40 - from
149:42 - dot dots forward slash components slash
149:45 - sidebar okay import the header as well
149:48 - because that also should still be there
149:50 - components slash oops two m's header hey
149:53 - okay so from here oops don't want to add
149:56 - a comma there actually and then we can
149:57 - also get our contacts some say amazon
150:00 - contacts boom that's all the imports i
150:02 - believe besides a component that we're
150:04 - going to create later on so let's go
150:06 - ahead and use our contacts i'm going to
150:09 - say object equals use context pass in
150:12 - amazon and all we're pulling for history
150:14 - page is owned items cool all right from
150:18 - here i'm gonna go set up the jsx now
150:20 - it's pretty minimal compared to what we
150:22 - were doing earlier guys clean it up and
150:23 - just do a classname equals
150:26 - styles.container all right so the cool
150:28 - part is we can just implement the
150:30 - sidebar here already and then in that
150:32 - next div we're going to make a main div
150:34 - so i'll say div class name styles dot
150:38 - main in that main we're also going to
150:40 - have the component and in the very next
150:42 - line let's add up a table container and
150:46 - similar to how we have the cards on the
150:48 - main component i want to make
150:50 - essentially a container that has all the
150:53 - recent transactions so to set that up i
150:55 - want to make a div called table
150:56 - container that was that table container
150:59 - which in turn is going to have the owned
151:01 - items all right so we're going to do
151:03 - that means we're going to do a little
151:04 - conditional rendering so if owned items
151:06 - exist if that user has owned items tied
151:09 - to their account we can do a div class
151:11 - name and say
151:13 - dot page title oops top page and don't
151:16 - forget to close it guys so i'm gonna
151:17 - close it like this keep it in the same
151:19 - line and if there is own items this page
151:22 - will list out some text that says
151:24 - purchase history cool so now we're gonna
151:26 - set up the other condition where if i
151:29 - put a div here let's see opening so if
151:31 - owned items doesn't exist then we can
151:34 - have a text field that says no purchase
151:36 - history okay and this is actually going
151:38 - to have the same title page title close
151:41 - the div and exactly what i said earlier
151:43 - no purchase history so let's see let's
151:46 - take out that extra parentheses there
151:47 - and if i do control b now you guys can
151:49 - see it a lot better so this is what we
151:50 - have we have the container div the
151:52 - sidebar the main the table container and
151:54 - our titles cool one thing i'll do next
151:57 - is underneath here let's make a div for
152:00 - the actual transactions that we had so
152:02 - it's going to be classname
152:04 - styles.transactions
152:07 - and i'm going to have owned items all
152:09 - right this is exactly where we're going
152:10 - to map through each item and for every
152:12 - item i want to create a transaction
152:15 - component it's going to be similar to
152:16 - like the card component you could look
152:18 - at it like that so i'm passing in two
152:20 - parameters item and index because if you
152:23 - guys didn't know in the map function
152:25 - there's a second parameter that you can
152:26 - name i usually name index where it goes
152:29 - from zero to one so if i create a new
152:31 - component that will have a key of zero
152:32 - if i create another component that will
152:33 - have a key of one so that's why we use
152:35 - it here because whenever you're
152:36 - rendering props with react they should
152:38 - have a unique key so i'm not going to
152:40 - forget the return statement this time
152:42 - and let's do return and this component
152:43 - doesn't exist but it's going to be
152:45 - transaction okay cool so i'm not going
152:47 - to hit save because if i do i'm going to
152:49 - get a whole bunch of errors my computer
152:50 - is going to be mad but let's make them
152:52 - happy by making the styles object so at
152:56 - the top here let's set it up so i'm
152:57 - going to write const styles equals that
153:00 - object and we'll say container and let's
153:02 - give the height make it full we can also
153:05 - make the width full as well give it a
153:06 - flex property and this is the background
153:09 - color that i want to use it's pretty
153:10 - much the same it's going to be hashtag
153:12 - fff okay and that's it for the container
153:14 - and then for the main what we could do
153:16 - is give it a width full as well and also
153:18 - full height with flex the flex property
153:20 - you want to add to this is flex column
153:22 - with
153:23 - mt-50 pixels all right and then from
153:26 - there we can do the table container
153:27 - which is going to have the full width
153:30 - full height flex it's also flex column
153:33 - and let's give it a p of 100 pixels and
153:36 - just a nice justify dash center all
153:39 - right then we can do page title which is
153:41 - simply just going to have text l font
153:44 - dash bold text dash left empty bracket
153:48 - 50 pixel and let's also add a margin
153:50 - bottom of 30 pixels cool last one is
153:53 - just going to be the transactions div
153:55 - which will have a flex and give it a gap
153:57 - of 50 pixels we can do flex dash row
154:01 - flex dash wrap and add a comma here cool
154:04 - what i'm going to do next is comment out
154:07 - line 32 for now because we know that
154:09 - transaction component doesn't exist and
154:10 - let's build out that transaction
154:12 - component next this is going to be our
154:14 - final component guys are you excited
154:16 - let's get started so i'm gonna hit save
154:18 - and there we go all right guys so now
154:19 - that we made the history page there's
154:21 - only one more component left and if you
154:23 - look down here it's the transaction so
154:26 - i'm gonna go into components make a new
154:28 - file and let's call it transaction.js
154:32 - cool so now i can do control b and now i
154:34 - can see a little bit more clearly so
154:36 - let's go ahead and import anything we
154:38 - might need but first i'm going to set up
154:40 - the component and the only thing that
154:42 - we're going to need here for in terms of
154:44 - hooks is just use context just like
154:46 - usual awesome so we got use context
154:48 - let's also import link and it's still
154:50 - doing this thing right here so i'm going
154:52 - to fix it up so we got link and we also
154:54 - need image from next all right so we
154:56 - grab the image from next and link next
154:59 - up we're going to be using moment to
155:01 - format the dates so it can look really
155:03 - pretty once it's on there so import
155:05 - moment from moment we installed a lot of
155:07 - packages earlier double check your
155:09 - package.json if you have it next let's
155:11 - get our context so i'm saying import
155:13 - amazon context and there we go so for
155:17 - the history.js i'm going to step back in
155:19 - here for a second the things i want to
155:21 - pass in are a key and we'll make use of
155:24 - that index parameter i set up and we're
155:26 - gonna pass an item as as a prop so for
155:28 - passing that as a prop we can go ahead
155:30 - in our transaction component and
155:33 - destructure that here so i'm gonna say
155:35 - item and i'm gonna console that later to
155:37 - show you guys what we need to do for
155:38 - that but for now let's see i'll save
155:41 - this and let's also save this okay it's
155:45 - going to refresh real quick all right we
155:46 - also have to import transactions import
155:49 - transaction from the component there we
155:51 - go and we're not going to see any
155:53 - transaction components because there
155:55 - isn't any owned items just yet so it
155:57 - looks like our transactions aren't
155:59 - showing up so let's try to make it so
156:02 - more consistent so to make it more
156:03 - consistent what i want to do is do an
156:05 - owned items and all right because if it
156:08 - exists then we should be mapping through
156:10 - it and then in our amazon context let's
156:12 - see let's go to our function and i'm
156:15 - contacting here and sometimes it doesn't
156:17 - show up it says it's undefined because i
156:19 - think it's because we're trying to set
156:20 - the state before it even exists so just
156:22 - to make sure what i want to do is use
156:24 - your data bracket zero dot attribute dot
156:27 - owned assets here because we only want
156:29 - to set the state if that exists so if i
156:32 - save that here okay there we go now this
156:34 - should be a little bit more consistent
156:36 - and one more thing i need to do is just
156:38 - temporarily i'm consoling the item but
156:41 - i'm going to map through it because item
156:43 - if you saw the console log is just an
156:44 - array that contains the owned asset so
156:46 - we actually have to map through so i'll
156:48 - make empty fragment here because there's
156:49 - no real parent div and let's just do an
156:52 - item dot map and for every asset also
156:56 - let's make use of the index and let's
156:58 - see for every asset let's just return an
157:01 - h1 and this all this h1 is going to have
157:03 - is just the asset name just to see if
157:06 - it's there so asset name is what it
157:08 - should be so i'm going to hit save let's
157:10 - make this guy a little bigger rather
157:11 - even full screen it so we can see a lot
157:13 - better and now if i hit transaction
157:15 - history there it is there's the skull so
157:17 - we can finally see it over there i want
157:19 - to make sure we can see all of it so
157:21 - let's add a robocat to the list and then
157:24 - if i buy this it should be updating our
157:26 - transaction it's taking a lot of load
157:28 - awesome i hit confirm and i can also
157:30 - check this on my morales db i'll hit
157:32 - refresh on that and oh yeah because i
157:34 - didn't get the transaction complete
157:35 - there you go and you also got the
157:36 - notification on the dashboard which is
157:38 - pretty cool you saw that guys it's
157:39 - updated so let's refresh and we got the
157:41 - alert here now it's purchased and now
157:43 - i'm broke i don't have any more amazon
157:45 - but we'll get more in a bit so let's see
157:47 - if i hit refresh now we go to owned
157:49 - asset i should have skull and robocat
157:52 - let's go so we have two things there and
157:54 - now what we should see in transaction
157:56 - history is skull and robocat let's see
158:00 - updates hit refresh and sometimes it
158:02 - takes a second to load but now i'm not
158:03 - seeing the release there it is there's
158:05 - skull and robocat so let's finish out
158:08 - the transaction now all right guys so
158:10 - after a bit of testing one thing i
158:12 - realized is we should move this promise
158:14 - around where instead of get owned assets
158:17 - we call first we're gonna do await get
158:19 - owned assets after this okay so let's
158:21 - save that cool and as you can see we can
158:24 - still see our skull and robodog let's go
158:26 - ahead and finish out the front end so
158:28 - i'm going to go back to transaction.js
158:30 - and we should also be using our context
158:33 - so what i'm going to do is come to the
158:34 - top here we don't need this console.log
158:36 - anymore so instead we can do const and
158:38 - let me make this bigger for you guys
158:40 - cool we can do const username from use
158:44 - contacts and pass in amazon all right
158:45 - we're doing this because later on i want
158:47 - to be able to have that transaction
158:49 - history just like you see in the real
158:51 - amazon of all the assets we bought so
158:53 - there we go we've started it off right
158:56 - over here but the next thing instead of
158:57 - just this h1 we should get the rest of
159:00 - the jsx in so we're going to do div
159:02 - alright this one will have our class
159:03 - name of container and let's also put in
159:06 - the key in here for index make use of
159:08 - that and from there let's do another div
159:11 - inside of that and this one will be
159:13 - styles.top styles.top then we're going
159:16 - to do a class name and the div inside
159:17 - this doesn't need a class name it's just
159:19 - going to have some css of flex oops it's
159:22 - actually quotes that's why flex w full
159:25 - gap dash 80 pixels and then within that
159:29 - we'll have another one with styles dot
159:32 - top header text okay and again this is
159:35 - where we can start designing that
159:36 - transaction history like it is on
159:38 - regular amazon we're gonna do order
159:40 - placed and just insert a nice line break
159:42 - here and uh one thing that i forgot to
159:44 - mention it like we're using moment here
159:45 - to format the dates in a really nice way
159:47 - and we actually have the date built into
159:49 - the assets itself we just have to format
159:51 - it so i'm going to do moment asset dot
159:54 - purchase date and then you can do dot
159:56 - format and this is how i want it we can
159:58 - do quotes here oops quotes here and we
160:00 - can do m for the month the o and this
160:04 - for the year nice okay cool i'm really
160:06 - liking that so let's put this over here
160:08 - and in the next line it's gonna be a
160:10 - sibling of that div it's gonna be class
160:12 - name styles dot top header text all
160:16 - right it's gonna be the same one as
160:17 - earlier right except this time the title
160:19 - for this will be total and vr you guys
160:21 - should start to notice a pattern of how
160:22 - i'm forming this and this one is just
160:24 - going to have the asset price like how
160:26 - much did i buy that asset for i'd love
160:28 - to show that in the history as well so
160:30 - we'll do ac because we're using amazon
160:32 - coins and we're going gonna do something
160:33 - similar again div class name styles dot
160:36 - top header text again here we'll have
160:38 - ship two right because on amazon you can
160:41 - see who it was sent to and we should put
160:43 - the user here which is why we imported
160:45 - it with our contacts so you can put
160:47 - username oh yeah if i save we'll see an
160:48 - error because there is no styles yet
160:50 - okay so let me be closing dave closing
160:52 - div and now the main thing is going to
160:54 - be the content of it so the container
160:57 - will actually also be called content so
160:59 - styles dot content okay and within there
161:02 - we'll have another div for the date so
161:05 - styles dot date and we can say bot on we
161:09 - also want to see when it was bought we
161:11 - can format it with moment and asset dot
161:14 - purchase date and let's give it a
161:16 - different kind of format still with the
161:18 - four m's but just no year that's the
161:21 - only difference between the last one
161:22 - okay so let's be closing div then we
161:24 - should show the item that we got which
161:27 - would be really cool and to show the
161:29 - item that we got let's make a container
161:31 - for it and i'll do styles.item here
161:33 - we'll make use of that image i imported
161:35 - let's make itself close awesome and then
161:37 - we can do a class name give it a styling
161:40 - of object
161:42 - cover the src is actually stored on here
161:44 - as well already so we can just say asset
161:46 - asset.src the alt will just be the item
161:50 - and the height we can give it the same
161:53 - as the cart height the same as the width
161:55 - which will also be a hundred okay cool
161:57 - so after the image i want to have the
162:00 - name of the item to describe it so we'll
162:02 - have another div here that's just gonna
162:04 - have the name of name container so
162:06 - styles that name container okay then
162:09 - we'll do class name styles dot item name
162:12 - here we'll have asset dot name all right
162:15 - in the next line we have a couple more
162:16 - divs to make which is this one's gonna
162:18 - be another div and this one doesn't have
162:20 - a name but it has some css already in it
162:23 - so it's gonna be flex row items center
162:25 - justify dash center and a gap dash four
162:29 - guys got that cool okay and what i want
162:32 - here is a buy again feature which amazon
162:34 - has so we'll have styles dot by again
162:38 - button and then we'll just have buy it
162:40 - again all right okay and then we'll have
162:42 - a link that has href we'll do a template
162:45 - literal here to put asset that ether
162:47 - scan links so that's what we're linking
162:49 - here for the a tag then we'll do a
162:51 - target equal to oops not curly brackets
162:55 - there target underscore blank then we'll
162:57 - hit the rel equals no opener oh no
163:00 - opener and inside would just be another
163:03 - div with the class name styles dot ether
163:06 - scan button not link button so that we
163:08 - can see the transaction history of it
163:10 - okay cool so that's a tag link div div
163:13 - div div awesome and now let's get rid of
163:16 - this error by actually putting our
163:18 - styles object okay it's one of the last
163:19 - few styles we're going to have okay it's
163:21 - going to be one of the last few styles
163:22 - we're going to have so i can say cons
163:23 - styles equals container w minus bracket
163:27 - 40 percent flex column we'll give it a
163:30 - nice border with this d60
163:35 - 79 right let me do alt c before it gets
163:38 - too long then we can do a border dash 2
163:41 - rounded
163:42 - lg and a shadow large and thank you guys
163:45 - i see you guys telling me that it's
163:47 - container i hear you don't worry
163:49 - container and we'll do top so for top
163:51 - we'll do a flex with full let's give it
163:54 - a height of 80 pixels and for the
163:56 - background it can be this color right
163:59 - here f1 f and the p can be 20 pixels all
164:03 - right so for pr guys let's also make
164:05 - this 80 pixel and just add a gap and
164:07 - that's going to be it for top all right
164:09 - we still have top header text to do top
164:11 - header text all it's going to have is a
164:13 - text large text left flex property and
164:17 - items dash center so that's it for top
164:20 - header text after top header text let's
164:22 - do content right then in content let's
164:24 - have a flex dash column h dash bracket
164:28 - 400 pixels and we'll have a gap dash 20
164:31 - pixels and we'll have a p of c bracket
164:35 - content 20 pixels cool and the last
164:38 - thing we'll add for this one is going to
164:39 - be flex one and so that's content then
164:41 - we have date for date will be just text
164:43 - and let's make it oh we can also make
164:45 - the font the bold here then we can do
164:47 - item and that one can have a flex
164:49 - property of flex row give it a gap of 20
164:52 - pixels and make sure the width is full
164:55 - and that will be your item div next i
164:57 - want to look at name container which
164:59 - will just be flex column then we can
165:01 - justify and don't forget to put the
165:04 - backticks around okay cool so let me
165:05 - finish this word off justify end for
165:08 - name container all right then we have
165:09 - the item name which will be text mg font
165:14 - bold make it rounded full then we can do
165:17 - ap dash 10 pixels here 10 pixels okay
165:20 - next we have a header of 40 pixels and
165:24 - let's see for width i think we should do
165:26 - 20 pixels and cursor dash pointer so i
165:29 - can hover over it and see the pointer
165:31 - okay so for text i have this color which
165:34 - is just going to be three a two eight
165:38 - zero two okay for the item name and what
165:40 - i want to add next is a text
165:43 - center mb dash bracket 5 pixels and
165:47 - empty
165:48 - 10 pixels all right then we have the buy
165:51 - again button and let's style that as
165:53 - well so for the buy again button so
165:55 - that's by again button oops i mixed up
165:57 - the item name with the buy again button
165:59 - so to see text font bold rounded full
166:02 - p10 h
166:04 - okay i see so we want to do is cut this
166:06 - part up and we can just do a flex
166:09 - dash 10 pixels yeah it looks really
166:10 - funny so there we go that's it for item
166:12 - name then button again is gonna have
166:14 - that really long one but we're missing
166:16 - some stuff at the beginning which should
166:17 - just be a background color so if that's
166:19 - bg bracket hashtag fd71 and then close
166:23 - it off with this bracket here so that's
166:24 - the background we also need a font bold
166:26 - for that yeah so this one is text mg
166:28 - from bold flex ml bracket 10 pixels and
166:31 - this is the buy gun button here so take
166:33 - a moment to get that done then we can do
166:35 - the ether scan button this one i know is
166:37 - just going to be font dash bold rounded
166:41 - h-40 pixels w dash bracket 150 pixels
166:46 - and we have cursor dash pointer text can
166:50 - be this color of bracket hashtag
166:55 - 3a2802 okay i think we should do a text
166:58 - center here and border border
167:01 - then we got border dash bracket
167:03 - fd713
167:06 - two more things well three more things
167:08 - we need flex justify center and we can
167:10 - do and items dash center whew that was a
167:13 - lot of styling but there we go that
167:15 - should be the transactions components
167:17 - front end if i hit save hopefully i
167:18 - don't get any more errors oh okay
167:20 - awesome so it looks pretty crazy but if
167:22 - i zoom out let's go look how clean that
167:25 - is guys so this looks exactly like the
167:27 - text from amazon and we can fix it up by
167:29 - adding something right here i know how
167:31 - to make this even better what if we did
167:33 - a text header and the text and let's
167:36 - give it a different styling so if i do
167:38 - top top header and text let's see if i
167:41 - can fix it up by doing a text large
167:44 - flicks items dash center flex row p
167:49 - 30 pixels and put the comma oops see if
167:51 - that helps so i think i figured out the
167:53 - issue guys what we're gonna need to do
167:54 - is head over back here for text end this
167:57 - should just be text top header text i
168:00 - realize i'm not really using it and that
168:01 - the real issue is that there's a little
168:03 - typo here so if i do adpx hit save and
168:06 - let's freaking go that's the purchase
168:09 - history that i'm trying to see so that's
168:11 - gonna be it for the component i think we
168:12 - can top it off by just running through
168:14 - and let's buy one more asset and get
168:16 - coins to just wrap this whole thing up
168:18 - so let's buy some coins we can get about
168:21 - five i'll hit buy okay meta mask is
168:23 - loading it's gonna take a couple seconds
168:25 - okay there it is there's ours we need
168:27 - our signatures so we can mint is the
168:28 - tokens that we want i'll hit confirm
168:30 - here's our nice hash loading screen and
168:32 - again you can always change this if you
168:33 - want with your react spinners now we
168:35 - just have to wait for the transaction
168:37 - confirmation there it is you can see
168:39 - that it's confirmed there's our
168:41 - transaction receipt if i click it it
168:42 - goes to ether scan like how cool is that
168:45 - and then if i x this out our coins is
168:47 - updated and you can look in your morales
168:50 - db to check if it actually went through
168:52 - so now we should have three items what
168:54 - that tells me is if i go to my
168:55 - transaction history page i should see
168:57 - three items so i'm gonna give a quick
168:59 - refresh to my morales db see if it
169:01 - updated this usually takes a couple
169:03 - minutes like i mentioned before let's
169:05 - see tokens oh waiting okay go to user
169:08 - and if i double check this see if it's
169:11 - loaded in we got skull we got our robo
169:14 - cat and
169:15 - is it so far ah there it is updated oh
169:18 - that's right we just got coins we need
169:19 - to actually buy something so now i'm
169:20 - gonna ask you guys what do you want to
169:22 - buy i'm thinking we can do this adidas
169:25 - metaverse one right and as you can see
169:27 - our recent transactions working still
169:28 - too which is a good sign so now i'm
169:30 - actually gonna purchase a digital asset
169:32 - that i created let this load let's hit
169:34 - confirm on there and now we just wait
169:36 - for the blockchain to verify and let us
169:38 - know that we have the assets done okay
169:40 - so after i hit confirm we should be
169:41 - seeing an alert pretty soon okay there's
169:43 - google chrome letting us know we got it
169:45 - hey you successfully purchased this
169:47 - asset that's what we were waiting for
169:48 - and now we should see that was the
169:50 - recent transaction cool now we can check
169:52 - amara's db and if i refresh this let's
169:55 - find out if it got added to my own
169:57 - assets robocat and adidas metaverse
170:00 - awesome so now i own three of those
170:02 - things and now let's head over to
170:04 - transaction history and it's going to
170:05 - take a second to load here as well and
170:07 - we also lost the correct amount of
170:08 - amazon coins and there it is nice so we
170:12 - can actually purchase histories this is
170:14 - awesome and that has been the bill guys
170:16 - i hope you guys enjoyed all we need to
170:18 - do now is deploy this to netapp and make
170:20 - this live so now that we have our site
170:22 - let's update our cli by doing netlify
170:24 - deploy and if you guys are sure it's all
170:26 - good we can do a netlify deploy
170:29 - prod okay and once that's done we just
170:31 - wait for it to load so i'm coming over
170:33 - to netlify and if you remember what we
170:34 - did when we set it up earlier we set it
170:36 - up so that if you do the netlify cli
170:38 - tool you can just do a git push and it
170:40 - will automatically update your site the
170:42 - only difference that i did is i renamed
170:44 - it to amazon clone blockchain and now i
170:47 - just have to wait for this to finish and
170:48 - we should be good to go all right so as
170:50 - we're building the cool thing about this
170:52 - is in the deploy logs you can actually
170:53 - catch a bunch of errors using the cli
170:55 - tools so if you look i have an error
170:57 - because of the used context in my
170:59 - history page so that tells me i just
171:01 - have to go to history and make sure that
171:03 - it's inside our function so let's fix
171:06 - our history it wants us to make this
171:08 - capital so i'll say const history and
171:10 - then here we'll say cons history as well
171:13 - and anytime you're importing that it
171:15 - should be that as well and i think we
171:17 - can do the same for the name so i'll say
171:19 - history okay so once you make those
171:21 - changes we can upload again so i'm just
171:24 - going to update the github add dot git
171:26 - status just to make sure and then we can
171:28 - just commit it all right fixed history
171:31 - page all right so when we push netlify
171:33 - will take it over and start to attempt
171:35 - to redeploy okay we got building all
171:37 - right so no errors so far now it's
171:40 - building the function so that's a good
171:41 - sign we're almost done with the
171:42 - deployment so build script success
171:45 - doesn't look like there's any issues and
171:46 - we can make use of net nfi's deploy
171:49 - preview so i'm gonna click preview and
171:51 - don't worry about this if it looks funny
171:53 - if i click connect wallet then click
171:55 - meta mask and try to log in there we go
171:57 - morales authentication signature request
171:59 - let's go ahead and hit sign and if it
172:01 - works that's a good sign hey when i log
172:03 - in there's my assets there's my account
172:06 - and the styling is fixed and with that
172:08 - said our site is now live isn't that
172:10 - insane so all you got to do is take this
172:12 - very link and you can send it to your
172:13 - friends and show them and have them log
172:16 - in and they can now connect their
172:18 - accounts and also buy any of the assets
172:19 - that you guys make so how cool is that
172:21 - i'm so excited for this build i hope you
172:23 - guys enjoyed the video and i'll see you
172:25 - guys in the next one what's up guys
172:27 - lance absolutely crushed that build if
172:29 - you enjoyed it make sure you smash that
172:32 - like button he's exhausted i can see him
172:34 - over here and he's a broken man he's a
172:36 - shell of a man that he once used to be
172:38 - so if not for me for him break that like
172:41 - button turn it white turn it blue do
172:43 - whatever you need to do with that said
172:45 - the last and most important thing is go
172:47 - and sign up with buildspace because this
172:49 - build amazon that you just did if you
172:52 - connect your wallet there you're going
172:54 - to be able to verify that you've done
172:55 - this and they're going to give you an
172:57 - nft that goes along with it build space
172:59 - is also an incredible community a web 3
173:02 - builders for building the future and you
173:04 - don't want to miss out and they're also
173:06 - amazing job opportunity and all of it is
173:08 - completely free so make sure you go
173:10 - ahead sign up for it
173:12 - that was a lot of fun that was long but
173:14 - you finished it and you finished it
173:16 - strong so much love to you this is qazi
173:19 - that was lance i love your beautiful
173:21 - face we love your beautiful face as
173:22 - always we'll see you in the next video

Cleaned transcript:

in this video you'll build amazon web 3.0 dap with next js you'll be using hard hat to create the smart contract and deploy it using morales speedy nodes you'll use open zeppelin to ensure that the custom coins are in line with the erc20 standard you'll use morales to actually interact with the smart contract because morales makes it incredibly easy to interact with smart contracts we'll be using morales's built in nosql database to manage our users that we authenticate and create on this app and at the end we're going to be deploying this app to the internet using netlify because netlify actually gives you one of the smoothest and best experiences for deploying your app and it's one of the most popular with that said i hope you're excited for this build smash the like button so this video goes out everywhere now i'm gonna send it over to lance who's gonna be your instructor for this build so he can demo the app and actually get you to start building it with that said let's go right before we get started and start coding i just want to let you know that we're doing a collab with buildspace which is one of the best website education platforms in the world and you guys are going to be getting an nft that proves you completed this project and it's going to be in collab with bill space and clever programmer and it's going to look sick build space also has an incredible community of web 3 developers who you can learn together with in their discord and they're very active last but not least build space is also helping new web3 developers like yourself get matched up with top tier companies like adidas or alchemy for premium high contracts and i'm talking about 10 to 20 000 a month contracts and their vision is amazing i even met their ceo farza and he's just an incredible amazing human being so i'm really excited about this collab and the best part for you guys it's completely free all you have to do is just go down below click the link in the description it's going to take you to a landing page pop in in your name and email and it's going to ask you to connect your wallet and once you connect your wallet you're good to go and then when you do this build and you complete it that wallet will be able to verify you did it you'll get your own nft and you'll get the entire community and everything that goes with it okay so again it's completely free go ahead sign up for that right now and with that said let's just jump right into the video take a look at this project this is a reimagine amazon if it was on the web 3 space so instead of selling normal products what we're selling is digital assets so let's take a look around this looks amazing imagine looking at all of these guys and owning any of these and if you notice something here it says 2ac what that says is that in this amazon we have our own currency or unique tokens which is all part of this build so this is the demo here you're gonna see this nice connect wallet button the moto pops up with all the options click meta mask and you can see that we're authenticating with morales so let's click sign and bam there we are and this actually shows how much each i have and guess how much code that took literally one line of code that's the login and authentication let's see if we can actually buy stuff if i click this this beautiful model comes out and we can tell our computer how much amazon coins we want so if i go ahead and hit confirm and there we go look at that we got 20 amazon points as you can see here and i'll take a look at that in a second but look there's a little thing called transaction receipt that i set up here's proof that we're actually sending east to the contract through etherscan and you can track it right here there it is thank you we can access out and now i have 20 amazon coins to pay with let's say i want to nokia i'm going to click the metamask notification again so that i can purchase it let's hit confirm on that boy and let's see confirm and look at that recent transaction right which shows me all the recent transactions that i as a user have it's going to be different for everybody else transactions confirmed and now we purchase it i know i purchased it there's this little transaction history here if i click on it look at that i bought the nokia and then we have the ether scan link for that as well to prove this is the receipt of us buying it this is actually amazon this is one of my favorite projects so far so if you are excited about this let's go ahead and get to the build what is up guys welcome back to another video lance here again and yes we have the face cam so without further ado let's get started on the amazon clone so all you have to do is hop over to your terminal and let's create that project folder so to create that project folder all you have to write is mk and then the project folder name so i'm going to call this one amazon clone blockchain okay once you make that folder we have to cd into it and the idea here is we're going to be making this app using next.js so in order to make our starter nextjs project you just have to write npx create next app at latest and then the important part here is the space dot if you add the space dot it'll take all the starter and xjs files and put it in this folder otherwise it'll make a new folder and put the stuff in that so you don't want to fold it within a folder you get the idea i'm gonna hit enter awesome we have the next.js folder and you can see it that folder right here so let me go into that folder real quick desktop projects builds amazon clone blockchain okay as you can see we have all the starter nexjs files the pages the styles the node modules awesome and since we're here i'm just gonna make another folder called smart contract if you've watched our previous videos you know that we're gonna be setting up hard hat in here and this is where we're gonna write some solidity so if you're interested in learning how to make your first solidity smart contract stay tuned later in the video when i show you guys how to do just that okay since we're here open up your browser and let's get tailwind installed so luckily there is this nice documentation on how to get tailwind with next.js this is all you have to do and since we already have the project open we can open the terminal in here okay once that's done all you have to do is follow what i'm doing and if you get lost follow this documentation so to install tailwind you want to type in npm or yarn if you're using yarn i'll be using yarn so i'm going to say yarn add dash d tailwind css post css and auto prefixer and notice how there's three things we're installing three different packages right tell when css post css and auto prefixer okay once that's done we need to initialize tailwind by writing npx tailwind css init dash p so i just copied that from documentation and pasted it in my terminal notice how it says it created a tailwind css config file and a postcss.com right what we care about is the tailwind dot config right and you just want to add everything in this content so see how it's highlighted so what i'm going to do is just grab everything inside that array don't make sure you don't miss anything don't put anything extra right you paste it and it should look exactly like the documentation cool that looks like it's good to go and the last thing we're going to need is the tailwind directives in our global.css okay so to add that go to your global.css and we can actually erase all of these default boilerplate code and add in those directives all right cool go ahead and hit save and since we're here as well we can also add this to the global css that i have in mind which is just importing this google font ubuntu and using it and making this the background color that's it that's all i'm doing here i'm gonna press save and we should be good to go and once that's done your tailwind is all set up we can run our project by writing in yarn dev okay and it usually starts it in localhost 3000 compiled successfully which means it'll load and there it is if you see a screen like this is the starter next.js app let's go ahead and set up a couple other things let's go ahead and set up a couple other things all right a big proponent of this app is actually using morales so to get started with morales hop over to this link with me and set up a couple things if you guys ever heard of firebase at all you can think of it as the firebase of crypto what do i mean it's essentially the leading web development platforms that helps gives us developers tools to make adapts really fast and really easily a lot of the setup just requires one line so to get started with morales so i can show you guys cool things that you can do hop over to this link right here it's t dot morales dot io slash clever and i'll lead you to this beautiful page right here go ahead and sign up so we can create our server i already have an account with them so let's log in okay once you make an account you should see a screen like this i'm gonna go ahead and make my window a little bigger there we go so if you see something like this is the morales servers page what we need to do is we need to create a server because if we were gonna do this without morales we have to create our own rpc node and we have to set up all the infrastructure around it which can lead to a bunch of headaches a bunch of reinventing the wheel with morales it's going to make this process a lot simpler because there's a lot of premade functions and they query a lot of the information that you have for you and we're going to make good use of that in our database so before i get too excited and talk about that let's just make a server yep so here you're gonna decide what kind of server you need we're gonna be working on the test net for the instance i'm gonna call it amazon clone blockchain for the region i'm gonna click what makes sense for me which is new york and you're going to notice something cool here there's a bunch of different chains that morales can communicate with right one cool thing about rouse is that it's actually cross chain i know that i'm going to be working on the rink to be test net so i'll click that and add the instance let's go so you can see our server is now up if i click view details all right these this is the server details is going to be relevant because we're going to need the server url the app id and the master key okay other than that we have there's a couple cool things that come with morales you're allowed to use cloud functions you can have this dashboard which i'll be showing you guys later on so stay tuned all right you can see our database already started with all the users that are connected every time i log in this is gonna populate and it's gonna store their wallet address and all their transactions which is super cool because we can then query that in our app and use it okay and on top of that morales comes with a bunch of different plugins that we might be using later on in our future builds there's a pinata ipfs plugin that makes it easier to interact with pinata another one that's really interesting is that there's a oneinch morales plugin that helps integrate defy or dex aggregators of one inch to any project just super cool the fiat which enables a quick real dollars to crypto swap through morales so that's insane be on the lookout for future videos where we use that now that we have our server that's it for morales the next thing that we're gonna set up is we're actually going to be able to deploy our app to netfly and make it live so that others can so that you guys can share it with your friends family and put it on your portfolio so to do that we'll be using netlify and if you haven't already let's go make an account together okay making this bigger again i'm gonna go ahead and sign up for netflix once you guys make an account with netlify it's actually really easy to get your project up and live all you have to do is click add a new site and import an existing project from there all you have to do is just connect your github offcamera i already made a github project containing the starter files go ahead and make your repo so that you can do the same thing i'm doing so here we go we have the amazon clone blockchain repo that i have and it's just the initial starter files nothing too crazy up on a github repository so going back to here connect your github it's authorized look for your repo there you go we got the amazon blockchain and then put in make sure this says yarn run build and let's deploy our site cool and as you can see our site is going to be deployed and then we can click this link that pops up and we should see something similar to what our project currently looks like which is just the starter next js app but the cool thing is every time you push to your github the site gets redeployed and it has the latest updates so we'll check back on this link and i'll show you guys how to rename it okay making this smaller again and with that said a lot of the setup is done let's get the coding okay now that we set up netlify and morales we need to install a couple different dependencies for our app so coming to the terminal i'm going to install using yarn add morales and we also want react dash morales throughout this app we're going to be using a couple different dependencies i want to install install most of the ones i think i need okay and if you look at your package json you can see all the dependencies we added morales and react dash morales a couple of things off the top of my head that we'll need is if you do a yarn add let's get react icons react spinners and react dash simple hook modal i know that's a long one right so we got react icons react spinners react simple hook mode the next batch that we're going to install is yarn add we'll need at web we'll need at wallet connect slash web three dash provider space to get the second dependency which is at web three auth slash okay and since we're here we could also do ethers okay i think i suppose i think i spelled all of them hit enter come on you can do it okay it's finally done all these packages so looks like it's finally done as you can see we have web3 auth and the wallet connect and ethers only a couple more guys i'm gonna be adding the magic sdk we'll also be using moments in here since we're going to be working with some time and important for this next section would be the web 3 ui once you have all three of those installed that's going to be all the packages we need for this project for now all right as you can see these are all the packages that we need to install you might add some more later but i think this is a good start so all i want you guys to do next is head over to your pages folder and click index.js this is the reason why we see this page is because of this index file what i want to do is make this my own so i'll delete everything in here so let's highlight line 66 and go all the way up line eight i also want to delete all three of these things and if you guys aren't familiar with tailwind it's essentially a css framework that makes it a lot easier and quicker to write out our styles so as you can see the class names have a styles.container alright we can inherit these properties by making a styles object in each component and defining each key with the styles that we want so if i say container here this div is going to keep the styling of whatever container is and i can tell you it's pretty simple there's a css cheat sheet out here to tell you a translation of what everything means for example h full is going to mean like the full height and width of the page essential okay then we can give it a flex property and you can set the background color like so cool and now this should inherit all that styling if i hit save oh that's right we also have to run our project under your dev okay and then we can reload it okay there we go and if you see a blank page don't be worried that's that's exactly what our index looks like what i want to do here is fill this index page with the components that we want so what i like to do is set them up so i know what's next i do a sidebar right here and we also want the main component which is going to hold everything if you guys saw the demo we're going to be making a redesigned amazon for the web 3.0 space with a bunch of cool digital assets that you could buy so the sidebar is going to be that nice sidebar that you guys saw with our login functionality and all the tabs all the sidebar items okay and since these components don't exist yet i'm gonna go ahead and comment them out and i'll comment them back in as needed so as you can see i already got started while i was waiting for those packages i made a components folder and i made a sidebar.js so i'm gonna go ahead and click into it you're gonna notice it's empty there's a cool code snippets that you can do like rafce with the extension i'm gonna click that and it sets up the component hitting save we can go back to the index and now we can actually import that component so let me show you a fast way to do it you can uncomment out the sidebar start to type it out and you should see this nice little auto import click on it and there you go that's all you have to write to import a component don't forget to close it and if i hit save now there she is our sidebar is loaded on to our index.js sounds good so in this next section let's code up the sidebar all right so now that we have the sidebar set up i want to take this moment to talk about how to do certain things for your dap for example if i want a login button or in other words a connect wallet button we can actually do that using morales so to get started remember how i said you need to view details and get all this information we're going to use it today so one of the first things i'll have you do is let's create a new file at the root and this will be our dot env file this will hold all our environment variables in here all right so once you make your dot env file we're going to create a couple variables the first one is going to be next morales server and i have to do now is to set equals that url next i'm going to grab the app id and set up this variable which is next public morales app id paste boom cool so we have the environment variables head over to your pages folder and then your underscore app okay in this underscore app this contains our actual next.js application and what i want you to do is let's get the morales provider from reactmorales cool we essentially just want to wrap our whole next.js app with that provider so what i'm going to do is format it like so at the top here i'm going to put in the morales provider and let's insert our app in between the two cool the next thing we want is in the opening tag of the morales provider let's set up the server url which you guessed it will be the environment variable process dot next public morales underscore server then it's the app id setting that equal to the app id okay hit save id server cool it has the same name and usually you just want to reset your terminal okay it says loaded env we're good to go all right let me just refresh this see if we get any errors okay it's compiling okay it's done compiling and look we got the sidebar still no errors that's a good sign next thing you want to do is hop over to the sidebar and at the top here let's import the connect button from web3 ui cool and then inside this div let's actually get that component and say connect button let's hit save hey look at that we have a connect wallet button and i didn't have to do any styling the best part is it has already some functionality to it if i click connect wallet this little moda will pop up with you with all the different wallets you can sign up with i'm using metamask so i'm gonna click meta mask and then it'll ask me to sign off to morales that they can use and query my information okay so there's the message this is signing for authentication sign and it's connected cool so that's how we can set up a login button right off the bat with morales next thing we have to do is on our end we have to set up what it would look like when the user logs in and use some morales hooks to check if that user is authenticated sounds good so let's build out the rest of the sidebar and i'll include more functionality for login as i go cool additionally another cool thing about what we just did is if you look at the dashboard for your app go under user you're gonna notice that there's two users now because every time you connect your wallet to your dap morales will take note of it and add it to the database what we need to set up is getting the etherdress and i'll show you guys how to update that with a username as well later on so keep that in mind let's move on okay cool so now that you have an idea about the connect button what i'll do next is set up all the different divs for the sidebar right so temporarily removing this connect button but for the most outer div i want to give that a class name if you're unfamiliar with tailwind is a css framework that makes building and styling your divs a lot faster it's kind of similar to how bootstrap works if you are familiar with that so for the class name we're going to give this styles dot oops not stylesheet styles dot container and there we go styles.container in there the next day we're gonna make is the div with the class name of profile styles.profile okay and in this we're gonna have something called is authenticated which we'll get from morales if it exists we want to load a certain html element so if it is authenticated we're going to load styles.profile pic container and we need a closing div for this so it's going to be this one in this we're going to use the images from next.js so i'm going to need to import that all right so the one that says next image so it's selfclosing and all next thing i'm going to do is pass in some properties we're going to add a source but i'm going to do that a little bit later for now i'm just going to add an alt of profile which i actually don't need to do the action can do this alt of profile class name will be styles profile pic and the height will be a hundred sorry and this should be curly brackets the width should be 100 as well cool and we don't have is authenticated that doesn't exist so let's say it is authenticated for now so we don't get any errors hardcoded to be false cool and of course we see this error because i didn't make my styles object just yet and actually i want to put this in a fragment so let's leave that there okay and after that closing div we'll have if there's no username because by default when you log in you won't have a username but you'll have the option to fill in the input field which will then update that user database okay the next thing is we want to set up is we want to check if there's a username so if there's no username i want to have the input field out there so i'll make another fragment and i'm going to say div this one's going to have a class name styles.username and like i said i want the input field to show up so that we can add a username to that account and input is actually a selfclosing tag cool let's have type equals text placeholder is equal to user name i thought the class name of this input will be user name input and the value is going to be nickname but we don't have that set up yet so i'm going to do one of these yeah it's going to go under the column nickname but we don't have that so i'm going to comment down i'm going to do an on change i want to set the nickname all right nick the target value cool and again this doesn't exist either set nickname it's a state that i'll have to set up later but as you can see this gives me an idea of how i want my project to look okay and at the end of that div you want a button and inside that button it's gonna have the class name of styles dot set of handle set username okay and we actually don't have that function either but it gives me an idea of what to expect okay we haven't finished closing off our divs which is why we see that and for the button we want it to say sit okay here we'll have the closing the closing fragment of this second one so we'll have this closing fragment right here and remember what we're doing here is if there's no username show me the input but if there is show me the username after that closing one all we have to do is set up the rest of the conditional rendering which is just going to be something like this which should just be div closing div and this inner one will give it a class name of styles dot welcome and here we can say welcome the username that we put for now i'll just put uh lens but we're gonna change this to make it dynamic okay cool once that's done i'm gonna make that closing fragment here cool and i think what i need to do is clean this up a bit so i'm gonna take a moment and do that and just show you the changes okay cool i hit save and it says styles is not defined that's because i haven't defined any of my styles yet which is okay so i think for fun let's just get that out of the way right now i'm gonna go at the top here and say const styles equals object and as i showed previously if you want to style the container you'd have to write the key and the value of it would be the css so again this will be h full the width i'm actually going to set to 300 pixels for the sidebar give it a flex property and i want to make sure it's columns background color of this and we'll say static cool so you get the idea i want to add the rest of the styling feel free to pause the video to take a look okay once that's done you should see something like this represents the little container that will put the connect button cool like i was saying this is what you should see if we were to we also have that username property down below if there's no if we're authenticated we might not have a username so temporarily let's make a hardcoded one and let's say our username is equal to all right and while we're here we can actually change this hardcoded lens to whatever the username variable is cool so we want to check if our conditional rendering works is if this changes to true this styling and then it checks if there's a username and if there is it'll say welcome lance if not it'll have an input field saying to set your username okay remember how i said we're going to go back to images i want to be using dice bear for the images which is just going to generate a random avatar based on what we pass in as the user name let me use something a library called dice bear which will generate a random photo based on your username and i already have it precopied which is just this all right it's going to take in whatever username dot svg that gets generated next we have to do is set up our next.config.js which i pasted it in and this is what we need we need an images key with an object and a domains key with an array so take a moment pause the video grab all of these because we're going to be using them sounds good cool so if i hit save we should be allowed to use images from dicepare i'm gonna go back into here moment of truth let's check if our conditional rendering works i hit save let's go welcome lance all right we can see that if i am authenticated i'm going to load the image if i have a username it's going to say welcome lens okay and if i were to change my user name let's say my username is kazi said save that's the kazi's randomly generated svg based on his name cool so what if i didn't have a username we might see an error here if it's save yeah it's because username input is not defined oh that's actually because this has to be styles.username input hit save there we go that's more like it and if you're wondering about this styling that's because we don't have any css for it for those classes the css would look something like this transparent border justify content center item center and the text is white and the username will have these properties as well okay there you go it looks a little bit nicer if you're wondering why it looks like that it's because we need to set nickname css still too if you see the button right here we need this one okay so i'm just going to add that in real quick there we go that's a lot better cool and these don't work just yet because we need to set up those functions to set the nickname so for now i can show you what it would look like if i were to insert a username save welcome lance cool okay coming down below here on line 60 for me i want to add another dip in this div i'm gonna call it class name styles dot connect button alright so when you're writing this make sure it's still inside the styles.profile the button should still be in here and remember that connect button we set up last time you want to insert that in here there we go it's looking amazing cool from there let's set up the rest of the menu items so to set that up we just need to make another div here i'm going to give it a class name of menu cool so after you make that div i don't know if you knew but if when you're working with the next js app you can actually do some routing to different pages within here instead of getting a react router so what we can do is import link from next slash link and from there come down below and let's add that link here with the href of c forward slash the reason why i want to give this an href before slash is because i'm gonna put the amazon logo in here and when you click the amazon logo you could actually go back to the home page so i want to do class name and we're going to use this div a lot styles that menu item and in here it's going to take another image component from next js should be selfclosing source is going to equal logo which we don't have yet but i'll show you guys what i'm going to do for that the height is going to be 30 and the width is going to also equal 30 class name it's going to be styles dot amazon logo cool you don't have to hit save because it's not going to work because logo doesn't exist so let's make logo exist right now so what i did is i actually gathered a couple of assets put it in a folder and now i'm ready to paste it feel free to get your own assets for whatever you want to use for your app and i don't want it to go to pages actually i want this assets folder to go to the root so i'm going to click outside paste that's more like it cool so now i have an assets folder and if you look into it we have the amazon logo which any of you guys could pull and i have some pngs of some digital assets i'd like to sell this could be completely customizable you can make this store whatever you want so this is what i have set up so make sure you make an assets folder and put all your png files inside there cool once that's done i'm gonna go ahead and get the logos all right we need an amazon logo and amazon logo full so now this logo exists okay and you can see it right there we didn't make the menu item or the amazon logo styling yet so it looks really plain but bear with me it's on the way so in between 75 and 76 for me i'm going to write my amazon and i want a little line break here so i'm going to say break board and closing okay my amazon board nice closing link awesome let's make the next menu item which will look something similar like div class name styles menu and remember how we downloaded react icons earlier let's actually use one of them this one i'll use is called the far box and underneath that i'll put collections and if you use fall box you have to import it so to use file box i'm just going to put import file box from there hit save there it is little package symbol that means collections same kind of process for the rest of the menu items so let's work on that i'm going to make a div class name styles so you get the idea now all right so for this one it's actually called bs fill bookmark fill okay and it's going to have the text of saved i'm going to hit save of course it doesn't exist so it's going to give us an error let's make it exist by importing it import react icon bs and that's what it should look like okay and just to quickly speed this up i want to make another div except this time it's not going to be bookmark it's actually just going to be person fill and put back that closing cool let's go ahead and import it now so go to the top and import it cool and we're almost done we actually have one more link here to our second page which is going to be our transactions history that's right we're going to be able to purchase our digital assets and you're going to see like that recent order that you see with regular amazon and this is that link to that page so it's going to be href of slash history and again we don't have that set up just yet we'll still have to make that page late so within there you guessed it we're going to have a div class name menu item okay and this one will have a react icon of a i outline history okay hey i outline history and the text it'll have is transaction history because that's the page we want to leave it all right again doesn't exist let's get it oh that's right we have to close this div that's more like it okay there we go awesome and after that after the closing div of the minute the next thing we want to make is the div for the company name so class name dot company name and this right here will have that image logo full so we got a nice amazon logo at the bottom of our sidebar it is amazon and i can give this a height equal to 100 and the width equal to okay there she is awesome okay let's get the rest of the styling which is just gonna be the menu item and the amazon logo i believe okay it's looking pretty good uh the logo is a little bit off i think it's because what's the class name of this company name yeah we need the company name css which i have over here on the side boom all right so take a moment this is the css i hit save there you go everything's lined up in beautiful awesome and well that's actually just the sidebar cool in this section i'm going to be setting up the context folder if you didn't know in this app we're going to be using the context api so i can create all my variables and functions there and call it anywhere within my app by making them global let me show you what i mean by creating the folder so i'm going to make a new folder make sure it's at the root of the folder i'll call it context and inside that contacts folder let's call it amazoncontext.js awesome like i said this context folder is going to set up the use context hook from react and we're going to create a context so we can put all our variables and functions in like a global store that we can call anywhere in our app so let's get started first thing you're going to do is at the top import all the hooks that you're going to use so for me i know in this context file i want to be able to create context next thing i want to do is get the use state hook as well as the use effect hook since we're here i'm just going to import it from react so got it cool so after that we're going to also import use morales and later on we'll import something else but for now this is fine and you can guess where we're getting this from it's react dash morales nice cool that should be good for now the next thing you want to do is export const amazon context and then you want to set it equal to create context later on we're going to be utilizing use context hook and passing in amazon contact inside that hook okay next thing i want to do is set up the provider i'm going to export const amazon provider and it's going to set equal to an arrow function and inside the parameters here it's going to take a destructured children awesome and we can also set up the return while we're here it's to return something like this and what we're returning is the amazon oops context dot provider okay and in between that it's going to take children and let me just format it nicely now here's the important part go into the opening tag of the provider and make some space like this and what you want to do is add a value right what you want to do here is anything that you put in these curly brackets is what's going to be global so before we can pass anything inside this value prop we need to create a couple things okay so now that you put value anything that you put in value that we create in this context is going to be passed so that it can be global and this shouldn't be uh amazon space provider it should just be one word there you go so with that the context is set up the only thing you have to do now is go in your app.js and wrap the amazon provider around this main component all right same thing we did with morris provider so that we can use morales within our app we want to wrap the amazon provider so let's import that import amazon provider from the context so it'll be dot forward slash i can see the context slash amazon contacts cool and i wanna wrap this within here so i'm gonna say amazon provider close it off and wrap our main component within that there you go and once you do that guys we're able to use contacts within our app all right guys now that we've set up our context let's go ahead and start filling it out so that we can set up everything that we're going to need for this sidebar so before i continue i want to just quickly read what the sidebar component has so i added a couple of things it might look a little different from earlier but this is the same gist right so there's something called is authenticated that we're going to make in context which is what we're going to get from morales it's a cool is authenticated it's something we can get from morales which basically just checks if a user is connected to your application so for example if i didn't have a username or on morales we'll call it nickname there should be this input field that comes up right that's because of our conditional rendering if is authenticated is true we'll see this screen but if user if there is no username then it's going to show this input field where i can set my nickname that's what we're going to set up with our contacts today and just to show you if you do have a nickname we can pull that nickname from morales and you can see welcome your username right alternatively if you don't have a username and also and if is authenticated is false this is what we should see okay so this is how it is hardcoded we want to make it a little bit more dynamic okay cool now that you got that i just want to explain how the connect wallet works so we're using web3 ui kit which is super cool it sets up the login functionality for us so if i were to click meta mask and click next and connect we'll see that morels authentication is set up hit sign and nothing's going to change because i didn't make it so that these variables change the conditional rendering isn't moving but on morales side if i go into users and i make this a little bigger there's nothing yet that's the default thing but if i hit refresh there it is a user is logged into the morales database how cool is that by just using one connect button component from web3 ui kit you already have a login functionality so that's super cool next step would be to make it so when i do connect my wallet my front end matches to show that i am logged in because even though i logged in as a user it's still not there so let's get that set up let's see let's bring my meta mask back in cool so just for for the sake of time sorry to make this less confusing i'm going to disconnect my account and also refresh so now i can be sure i'm not logged in another thing i'll do is let's delete the user that's stored on morales database because i'm going to log back in again notice how it has a username etherdress created.passwords i'm i'm gonna hit this what is going on okay cool so i'm gonna just make it full screen hit edit and then you can delete a row all right that's essentially deleting off our database so there's no record of it but don't worry i'm gonna log back in soon cool so we can hop back to our local host what we're gonna need to do first in our amazon provider is make use of our use state hook and keep track of a couple of things the first thing i'm gonna make is something called const username right this should look familiar because if you remember in our sidebar this controls what my username is we saw it as lance it's going to be equal to the you state and it's going to initialize it as empty string cool next i'm going to have something called nickname as a state and this it looks a little confusing but it's going to control what i have in my input field let me show you all right so again if i'm logged in right set nic is going to control what is in this field and it's going to run on change and i have that set up over here i haven't completed that for now because what i'm going to do is take that state on the input field and then set that as my username so it makes sense so let's go and set it up okay use state and by default the input field should be blank so i'm keeping that in mind by making it blank all right okay another thing we need to do is take a look at this used morales hook from react morales there's a couple things that we need to grab from it so i'm gonna set a lot of it up now so i'm gonna say const and i'm gonna say cons authenticate is authenticated enable web morales and user and is web3 enabled i might not use all of these so i'm going to just grab all of them just in case but for sure what we're going to use is authenticated for this part right here okay cool so we're getting all of these from the used morales and destructuring it what i want to do next is set up a use effect that whenever i do connect my wallet i want to be retrieving the username or in other words the nickname from my database okay so i'm gonna show you guys how to do that just clean this up real quick cool all right set up a use effect now okay and use effect takes two parameters which is just an arrow function as well as a dependency module because use effect is gonna run at three different points in a component's life cycle when the component is mounted when the component is updating and when the component will unmount so with the dependency module you can control when you want your side effect to run so if i leave it blank here it's only going to run when the component first loads if i put a dependency module such as username which i actually will later this use effect will also run when the username changes so think about how you want your code to work and that's how you can structure your use effect okay another thing i'm going to do is add an async function here and with this async function i'm going to set it up like so wrap this around and then i'm going to put these parentheses so it's like a selfcalling function that's asynchronous and what you want to put here is a condition right is authenticated we're getting is authenticated from use morales it basically just checks if the user is connected or authenticated and if it's true that means i'm logged in so if i'm logged in i'm going to make a variable called cons current use equals await user question mark dot get nickname so this is how we are able to get the nickname from our morales database and this question mark it's just simply put on a high level it's just making sure if there is a nickname let's get it okay and if there isn't we won't need it cool okay from there we're gonna use one of our states and set our username to be the current username so if this is confusing to you at all if we look at our code here what it's doing is when i log in it's going to get a nickname and once it gets the nickname from morales it's going to show up here so what would that look like that's the equivalent of me putting this as my username so that's what we did see this is us retrieving the nickname that's there if the user doesn't have a nickname yet this is what you'll see make sense cool i hope the visual helps you guys because it definitely helps me so that's that we're going to come back here and use an else for getting the user's balance of their amazon tokens but for now i'm only worried about this so for this right here i'm going to use is authenticated user and username so if any of these variables change this use effect will run run this get right here okay so that's the use effect that we're gonna that's the use effect we're gonna need what we wanna do next is create a function where if i were to type in for example kevin inside this input field here i wanna be able to click set nickname and it will set my username on morales to be that because not everyone's gonna start off with the nickname so to get started on that we should create a function here i'm gonna create a function and i'm gonna call it const handle set username okay and in cons handle set username if there is a user then i want something to run all right if there's no user we can just console.log hey there is no user to set a nick right so not console.user no user so no user to set nickname but if there is a user i'm going to have another check here is that if that user has a nickname or in other words if nickname here is filled out like if i have lance in there what i want to do is do a user dot set what i want to do is user which is referencing the user in morales dot set parentheses nickname to be nickname okay what this does is if i press set nickname it's going to check if there's a user connected to our app it's going to check if there's something in the input field and in this line it's going to add a column in my morales database called nickname store lance as the nickname so that when we get it later lance will show up cool so after that what we want to do is user.save because we want to update our database from there we can just set nickname to empty string so this will clear our input field when we're done okay cool and the else statement for this one is going to be an edge case for if there's nothing in the input field you should just see a console that says can't set empty nickname okay so that's the handle set username function all right so that looks good to me what i want to do next is take a bunch of these things take a like everything we just made and put it in because remember earlier i told you whatever you pass in this value here is going to be global throughout our whole app so if you guys know anything about props we can prevent prop drilling this way so what i'm going to do is pass in is authenticated we're going to need a nickname we're also going to need set nickname and we're going to need username and while we're here let's also get set username cool so we're passing a lot of things into our value but that's not going to make our app work right because to use our context we need to go back into the sidebar and let's import i already took it for you we want to import use context from react and let's also import amazon context from dot dot slash contact slash amazon contacts so i'll give you a moment to do that done cool so let's use that hook so to get started using that hook i'm going to come down here and we can say okay so get started using context the first thing we're going to do is destructure our context so what that means is write something like this cons curly bracket equals use context now you want to put in the parentheses what context would you like to use if you remember at the top i was talking about how i imported the amazon contacts we set up so i'm going to pass that in here cool now the question is from your amazon contacts what do you want to take and the structure out of it so let's see what's available it's all of these i want to take all of these so what you can do is quite literally write them all out so just to make the format look nicer i'm going to say i want is authenticated i also want nickname set nickname username and now that i'm thinking about it we should also be passing in our function the one that we created handle set user name so i don't think i need to set user name here because that should be in our use effect what i do need is the handle set user cool so that's the last thing we're missing let's take handle set cool so that's everything we need and notice these little squigglies that's because i have these variables they already exist but i don't need to use them anymore what i can do now is take this out let's use our context oops and now you can see i'm only seeing the connect wall button because if i were to console.log is authenticated it's false right now i haven't logged in and that makes sense for our app so a couple things i'm going to do now is here i have it hardcoded to lance it should be username so let's see if this will break it let's do a template literal user awesome so didn't break it yet we're going to make use of that username the reason it's not breaking and saying username is not defined or it doesn't have a value is because of our conditional rendering so if there is no username then we'll see the connect wallet button and that's how this is working right now so what i want to do is comment back in this on change so all this means is when there is no username or in other words no nickname you should see that input field and every time i type in that input field it gets updated next thing i want to do is comment out this one which is the on click which runs the handle set username that i set up right here okay now it might just be the spelling handle set username okay and let me just double check that's how i had it yep there we go cool so everything should be good now let's take a look and let's try it out don't forget to add these parentheses i did a couple tests all right what you can do now is let's refresh and this should work now after adding the parentheses i'm going to hit connect wallet meta mask and i'll just make this a little bit bigger there we go metamask should see a little popup here there it is connect with account two hey there we go look at that so the button handles the login functionality the use effect is gonna help us with our rendering so now we have this because now is authenticated is true right is that the thing that is true but there's no username so how do we add a username we're going to make use of our handle set username function so what i'm going to do is let's type in name for me lance and i'm going to hit set nickname right and if we look over to our users we should see three total one is initially created when you first start out but the first one one at the top is the one that i just created just now okay so if you look at username i mean nothing's name if we look nickname there it is there's lance and when i was testing earlier there was loans okay so there we have it awesome so now if i hit refresh it's going to run that use effect to get the username hey there we go welcome lance and with that that's all the contacts that we need for the sidebar okay so let's move on to the products part of our build all right cool so like i said we're going to be working on the assets part of the amazon clone so if you remember the demo you looked there was some beautiful moving digital assets that we could buy so we have to set that up using morales database so what i'm going to do is let's make this full screen and let's head over to our morales dashboard but if you didn't know the morales database is built on top of mongodb so what we're going to need to do in order to pull our assets from the database is actually to set it up so this part is setting up your assets on the morale data space cool so to get started on setting it up hit this plus icon right here and as you can see you can create a new class which creates a new collection of objects what you want to do is select the class that you need and there's some predefined ones over here like user role product session but we can create custom ones which is cool so i'm going to call this one assets all right what i want to do is create the class so now we have our assets over here what we need to do next is add the fields for asset object so we're going to do is add a new column and here you can store the type of data that we want so as you can see it's by default it's string but you could also store booleans numbers date geo point file a pointer relational make a relational database and much more so a bunch of cool things you can do for the most part we're gonna be keeping it simple by making all these strings so the first key of our object would be name and as you can see it instantly adds the name column into our assets all right cool so you don't have to just keep clicking add a column if you think about the next key it's price and you can click add column and continue if you know you're going to make more so we made price now let's also make src which holds the image of our asset and that's going to be the last one okay one second okay and then from here let's add the actual assets itself so what we're going to do is actually create a new row and in this row you're going to see a lot of these are automated what you want to do is start defining the name price and source right so don't worry you can this is where you can add your own unique assets so if you don't like ours and you want to have some cooler things that you want to show like your own nfts that you've made this is where you put that in you put the name pricing source here for me i have a json file that you guys will have access to that you can include for your project so if i scroll down below i have a products.json and you can see a lot of it here so i'm going to be referencing this from time to time so the first thing i have here is something called bricktopian and let's see if i can see this cool so now you guys can see it better what i'm going to do is just copy the name of it bricktopian and i'll also format it like this and i'll show you like that so the first part of this is named bricktopian you can double click the field here and double click to make sure you see this little line and you can just paste the name that's it bricktopia's name i remember the price it's actually two and what i don't remember is actually the source file so click copy everything in the source you don't need the quotes and you can put that in the source field okay cool we're gonna do that for every single asset i'm gonna be moving a little bit fast now and remember if you wanna use ours use the json and if you wanna use your own feel free to fill it in there we go we have about eight you can add as much as you want i just wanna make sure our app is full with amazing things so there you go that's the products next thing i'm going to do is let's set up the front end of our app now all right so now that we finished setting up the assets on our morales database i need a cool way to show them because if you look our app is looking pretty bland right there should be a main component here that shows all our pretty assets that we just added so i'm going to make this smaller again and let's focus on the code so if you remember i'm going to go to my index and we also have this main component right here so let's set that up i'm gonna hit ctrl b and let's add another component here i'm gonna say main dot js cool and if you guys have the extension you can do an rafce it will set up your component for you and we should be good to go next thing we can do is flip back to our index and let's bring in our main and all you need to do to set up your main component is to write it like so and then be sure to import it into your app someone say main from components slash main so i'll hit save it's a weird error there there we go so see our main component is there it's gonna look a little funny because we don't have the header just and the features just yet so let's hop over to main and start building it up what i usually like to do is build out all the jsx first so i'm gonna format it and another thing i like to do is set up any import statements we might need so thinking ahead i'm just gonna use a use context because i'm gonna bring in context here later and also use effect sorry not use effect i'm gonna bring in use context and that should be it for now okay if i want to utilize use context we should also be getting our amazon contacts while we're here it's not going to come into play yet i'm just going to be making the front end first cool so this is our first outer div i'm going to do i'm going to give it a class name of styles dot oops styles dot container and within the main there's actually three components in here so i was mentioning earlier i'm gonna make a header component right i'm gonna make a featured component and as well as a cards component the cards component is going to represent where all our digital assets of the store are going to be so i'm going to comment out the ones i'm not going to build yet i want to focus more on the cards cool if you save this you're going to get error because we haven't defined our styles object and set up our tailwind so what i'll do is set that up now and i'm just gonna do a cons style equals an object and the first one i'm gonna do is container and it's gonna be h full width full give it a flex property and then you're going to want it to be in columns and you're going to say mt is 50 pixels and pr brackets 50 pixels as well you know i'll see here so you can see it a little bit better let's zoom in a bit cool how's that guys yeah i know it's a lot better overflow overflow dash hidden and that's it for container all right we only have container here but thinking ahead i'm gonna have a bunch more stylings so i'm gonna set that up now there's something that's called recent title and for recent title i'll have text to excel font bold oops it doesn't need these commas there we go fun fold text center mb 20 pixels text center empty 40 pixels and that's going to be it for a recent title there's also going to be a cool recent transactions list so all the digital assets that we set up for our database you're going to be able to buy them with amazon coins and the amazon coins is something that we're going to make that you can use for your site so i'm going to make a recent transactions list that shows my recent transactions so well i'm getting too excited we're not making that yet i'm just going to do the styling for in the future so transaction card is next let's add that comma back in here and as for styling it has a flex property and we can do a justify between here all right mb 20 pixel i'm gonna be p 30 pixels let's give it a background of tag 4 2 6 6 7 e make the text white rounded excel shaft excel font bold give it a nice gap of 20 pixels and again if i'm over moving too fast for you guys feel free to pause the video so you can not miss any of the stylings cool so again the only thing that we really have is the container and again we're seeing card is not defined let's go ahead and make that component cards with an s.js then you're going to do an r a f c e hit that card is set up you can go now go into back to main and let's import card import cards there we go so we got main and we also have cards okay so let's move on to the cards component one moment switching to cards all right so like i said the cards component is going to contain all of our assets right so what i want to do here import anything we might need which is going to be use state use context and that should be good for now and we can import amazon contacts because we're going to be using that later i'm just setting it up for now okay time to work on the rjsx for cards which isn't too many just like our main i'm going to give this div a class name class name called styles that container that style sheet thank you container all right from there we're going to make another div class name this one will be called title right we're going to have a new release here new release at least that's how you spell it cool let's make another div and here we'll have a cards div so it'll be styles dot cards so we're gonna do div class name styles dot cards and then within here this is actually where i wanna map through another component for each asset so what do i mean we're going to be getting the assets into here from our contacts and i'm going to map through each asset and for every asset i'm going to make a card component right this is actually the individual card that each asset is held in we're going to get squigglies because we need to make a cards component so i'll just do card no s dot j s r a f c e save hit enter save cool and now that we have this here i'm going to go ahead and import it import card from yep if you save we'll get the styles error it's not defined and let's go ahead and write our tailwind css so i'm going to set up the styles and again for the cards there's not much css as well it's just container going to b h full width full flex column ml20 pixels oh i actually got to put that in t 50 pixels as well and again i'm going to alt z so you guys can see it better yep awesome so i'm going to title and i'm going to go like this let's make that text excel font folder mb dash 20 pixels mt dash 30 pixels ml 30 pixels there you go cool so that's the title css then we want to get the card css oh and if you see that the comma here then we're going to have give it a flex property you want to do an item center and then a flex wrap and let's give it a gap of 80 pixels let's go okay hit save now we don't see any more errors shouldn't see much styling here because it just should say new releases and looks really small let's go ahead and check that out okay so yeah that's the cards component you won't see new release it's going to look funny but that's because we haven't set up our header yet i have some spacing for that so don't worry that's totally normal all right i want to show you guys the cards first get the cool features done first so there's the cards again for the card here what we need to do is a key oops what we need to do here is a key equals item dot oops item that id let's do an item equals item attributes all right and again we don't have any of those things so if i were to do something like so you're going to see an error called item not defined that's because we're not pulling any actual assets so temporarily let's make a couple variables i want to make an item here i want to make a variable called cons item make it an object and let's just give it an id of zero and there's going to be an attributes here and i believe attributes will also be an object with the name so i'm going to make like i said i'm making the item variable and i'm going to make some static data and i'm going to make an attributes key because when i pull the assets from morales we get it through the attributes i'm just going to hard code it like this for now and the name it could be anything it could be i don't know right then price let's make it two and for src let's just pull a random src from our json let's do products.json and i think there actually was a dojo one let's see you can get whatever you want on this yep that's the one i'm gonna hit so you can see it and you don't have to follow this step necessarily i just want to give you guys a good idea of what it might look like one card would might look like before pulling it cool so there you go there is the item now we don't get item is not defined i have a static one so let's head over to our card.js now okay moving over to car.js if you remember the way i'm passing down item that attributes is with the key so let's deconstruct that destructure that and just say item here so i don't have to say item.attribute it's just going to be known as item and for oops and for the card let's do the jsx now so this is the fun part going down below to div i'm going to have a class name of styles.cardcontainer.card container okay cool and then within that div we're gonna have another one which will have a class name of card so we'll say styles.cart okay cool here we'll contain an image and i've hit save by accident that's why we get an error but here we're gonna have an image so that tells me we need to import next image so i'm gonna say import image from next image it shouldn't be that like that should be more like this and while we're here let's set up any other imports which i know i want to have a used context here and if i have a used context here i also want amazon contacts here as well the only other thing is i want to import fa coins from react icons and you can do slash fa there you go that should be it for the imports cool so like i was saying inside the card let's include an image self closing and the src is going to be item dot sk class name for the class name i can actually give it some inline styling which is going to be object cover object center oh if squiggly lines that's because it needs an alt prop sorry about that i'm going to do a width it's going to be 190 height 250. make it like a rectangular kind of shape it's going to be oops all is going to be product all right cool and we're almost done here but the next thing i want after we get the image set up is make another div within here and that is going to have another one with the class name of card title this is going to hold the title of our card so styles.card title okay and then here we can have item dot name okay and the next div right next to it we're gonna have another div called class name equals styles.price okay and here in our container for the card we're gonna have item.price in amazon coins and amazon coins just a real quick recap is just a token that we're going to create just for our app so we're also going to show you guys how to do that later on so far coins equals styles dot coins cool and that should be it let's see what am i missing oh do you have to make this up closing there you go awesome and to get rid of that annoying area let's make our style so i'm gonna say cons styles equals object okay cool there's a couple more like there's a bit more of css and this one so this is the card container and in that card container we're going to do a flex give it a flex property of flex column and then in the card itself there's a couple of things that we need to write it's going to be it's going to be h dash bracket 250 pixels with 190 pixels rounded 3xl flex let's give it a cursor dash pointer transition dash all and i don't know i'll do alt z for you okay can you guys see now awesome give it a duration of 300 hover that scale dash 105 hover scale dash 105 hover shadow excel overflow hidden and give it a border black shadow excel order four border equals hashtag fb9701 i believe yes okay cool comma and that's all it is for card now it should be smooth sailing from here so i'm gonna do a card title and let's make that text large okay we can also make give it a font bold give it a flex property and we can do a text center with full flex 1 justify center empty dash packet 10 pixels and again if we're going too fast feel free to pause the video so you don't miss a thing so do price text dash md font dash bold flex justify dash center coins it's going to be that ml10 oops ml 10 pixel and there we go let's hit save hey look at that alright so if i were to bring this up nice so that's what our card is going to look like isn't this cool so can you imagine if you remember the demo all the assets that you made it's going to look super sick so i'm super excited about that there you go that is the front end let me show you guys how to actually pull the assets from morales so now that we have our amazing doge here i'm going to go back to my amazon con and let me show you guys how to query our morales database so one of the first things i'll do is let's set up the state to keep track of it so i'm going to say cons assets comma set assets okay and this is where we're going to store the data that we get from our db so you want to initialize this with an empty array and then from there remember how we deconstructed use morale's query it's a hook that we can use to make querying the db a lot easier which is super cool from morales so what we're going to do is set it up which is going to be similar like this should be something like this so const use morals parentheses and then within the parentheses here you have to put quotes and then the name of the class so what if you remember i called mine assets with a lowercase it's going to be case sensitive to what you wrote so if i were to do underscore user i would get the users class so there you go i'm getting the assets from my database let's destructure a couple things it's going to be data it's going to be data it's going to be assets data and then let's get an error here if there is an error we can do assets data error there's also a loading state that we can take advantage of if you want to so i'm going to say user data is loading cool so we get those three things from our morales query and then from down below we need to make a function to set our asset state and can you see where i'm going this once we set our asset state we need to go use utilize our contacts api and get a bunch of dynamic cards second down below in line 49 i'm going to make a function called get assets equals arrow cool and like i said all this is going to do is set the state so i'm going to do a try catch block here and that means you also have to make this asynchronous man in the catch all it is is pretty standard it's just catch error and you can just do a console.log error okay then from here i want to do an await enable web3 and then down below i'll also have a set assets and then you want to pass in assets data and if you forgot what assets data is it's exactly what we're querying users query is doing a lot of the heavy lifting here all right cool so we did the get assets functions we did a weight enable web3 i put a contour log here to see if it's running i feel like we don't need that anymore so this is our assets function and as you can see we're waiting to enable web3 and if it's enabled then we can set our asset state okay so now you have that function what we need to do next is let's make a use effect that calls that function so i'm going to say use effect and it takes two parameters the side effect you want to perform as well as the dependency module which controls when you want to perform the side effect and what i want to do in here is another asynchronous function you can make call itself like that and then from there what i want to do is if is web3 enabled if it is enabled then what i want to do is await get assets okay cool so we might come back to this one later but for now what i want to do is the dependency which is going to be get assets and is web enabled okay and now that we set up our contacts what i want to do next is update our provider with the variables and functions we want to use and that's just going to be assets okay i'm going to hit save and then from there we can head over to cards because this is where we're going to call our contacts this is where we're going to call assets from our with our contacts so we already have the hook set up here all we need to do is come down below and set it up so if i do const object equals use context pass in the context you would like to use we only have one and what you want to take from it so i'm destructuring assets from our contacts and if i have this assets here we're not going to need the static card anymore as well as our static items we have our database so before i have a lot of fun with our database i'm just going to console log assets here so let's hit save cool we lose our little doggy but he'll come back don't worry so let's make this a little bit bigger and let me inspect element hit console and let's go we have an array of 18 and that is exactly what we need so in index zero we have all of this stuff what we need is inside attributes so that's why we set it up the way we did so cool so we're getting our data what we need to do next is actually map through it so there's 18 things we can do is asset.map okay and for every single asset or item we're going to make a card component just like we did before so card pass in the key as item dot id and pass in the attribute the item as item attribute attributes i believe i hit save okay let's map through it and let's see if it's in our console and if we look it says 18 so that's good so it's all there we're not seeing each card maybe because we should return let's go ahead and add a return statement cannot read properties of source okay that's fine oh i thought i had seo accent deleted it hit save and now let's find out what's up cool so now i'm returning but now it says array zero let's try refreshing okay so now let's get it now it's not querying at all let me go back to my context and let's look at the dependency modules let's put in assets data and assets data is loading maybe that would help cannot parse source okay so if you see this error that's must be something on our database what i could do is full screen this and let's take a look oh i see it yep and here this is wrong this should just be no quotes just that take out the ending code there we go all right yeah so that should be fine now and we're back to here now should be able to parse it hey okay they're slowly loading in we got the robocat we got skull we got rtfk punk got product okay so there we go we're getting the assets now all we have to do is make sure that it's all loading in properly so if you look at rtfk tpunk we can go double check that with our asset and double check if the link is broken i want to just copy this okay it's rtfktpunk nokia that's there this is it this is our beautiful assets that makes me happy to see but look at that this is our digital marketplace so doesn't this look amazing what we need to do now is let's add a header the features and let's make it so that we can actually buy these tokens so i'm gonna work on that next part but let's get excited our app is getting jacked alright guys in this section we're going to be setting up the smart contract this is the part you've been waiting for this is the blockchain solidity part but before i do when i'm looking at this app it looks amazing but i think i want to make it so that the borders match the theme of the amazon colors so what we can do is let me just quickly do this and click on this my vs code cool and to make it a lot better what i'm going to do is head over to my cards.js and instead of border black should be yellow color and i think the reason why is because this should not be equals this should be a dash so go ahead and fix this in your css so it can match the amazon colors a lot better so now i can take a look boom so now it's looking more like an amazon item right look at that awesome so without further ado let's head into the smart contract section all right so since this is purely the smart contract section we're not going to be needing to look at the website we're going to just focus on our vs code so one of the first things we need to do is let's go ahead and create a new folder and make sure it's not in public make sure it's at the root and i'm going to call it smart contract okay so now we have a smart contract folder everything here is where everything in the smart contract folder is where all of the relevant files we need to compile and deploy our smart contract so let me clear this out awesome and let me open my terminal as well and we can kill our web app for now what you want to do is cd into the smart contract folder and we're going to be installing something called hard hat hardhat is an environment that helps you test deploy and compile the smart contracts that you create so to get started we can do an npx hard hat alright so write npx hardhat in your terminal and make sure you're in the smart contract folder and enter and it should set up all the boilerplate code that we're going to need to do that okay now that's done what you want to do is create a basic sample project go ahead and hit enter again and you can go ahead and get ignore and for this you can say so look at that so now that the project folder is created you can see that there's a contracts folder a scripts folder a test folder and all of these other things so if you look at your package.json you should have a couple of things if you're not on their website they provide all the packages that you need to install but i actually have it saved right here and i'm just going to paste that command they stole me right so i should be able to use it awesome so after you do npx hard hat and set up our environment you're gonna let's take a look at our package json and you're gonna notice that sometimes there's a couple of things missing luckily hard hat provides you with all the modules that you need in case it doesn't show up so it's all of this feel free to take a look or look it up the documentation but you'll see it in a second when i install all right so i'm gonna do an npm install and install all these packages okay so double checked one of the packages wrong but now we should be good to go and let's install all these packages all right cool so all the packages are installed our hard hat is set up our environment is set up and only thing we need to do now is let's install open zeppelin okay so i'm gonna do another npm install here and do at open slash contracts okay so if you didn't know as i'm installing this open zeppelin is a library of ethereum contracts that follow a certain standard so instead of writing up all the contracts yourself and making sure that your contract fits the erc20 standard what you can do instead is import the open zeppelin library and just build on top of it if you're familiar with classes at all think if you had a class called ferrari extends car we have a ferrari class that's built building on top of the already established car class same thing here we're building off the standard and making our tokens in top of it sounds good so there you go so now you can see opens up an insider dependencies which means we're good to go and let's start writing our smart contract alright guys in this section i'm going to be showing you guys what you need to do to write your first smart contract as you can see if you look and click on greeter.sol you're going to notice that this is an example template smart contract given to us by hard hat and if you didn't know we're coding on the ethereum blockchain and one of the main programming languages there is solidity so we use solidity to create something called a smart contract if you don't know and you're new to with the web 3.0 space a smart contract you can think of it like a vending machine so with a vending machine if you want let's say a soda you're gonna click the soda button you're gonna put in your money you're gonna click the soda button and what you get back is the soda itself right instantly so for a smart contract you can set up some conditions that you want to happen for us we want to create amazon tokens in exchange for people's ethereum we want to use amazon tokens as our actual currency for our app so if you didn't want to if you wanted to make your own token this is going to be a good tutorial to follow so one thing we can do is we can actually delete the greeter.soul file right delete the greater.soul file and what i'm going to do is make this a little bit bigger as you can see and one thing that you're going to need is an extension if you go in here and type in solidity you're going to find something by juan blanco go ahead and install that this is a vs code extension so that it provides the ethereum solidity language support for vs code okay so install it add it to extensions and now we can go back to our code and in the smart contract folder under contracts that's now empty let's make a new file and let's call it amazoncoin.sol cool so here we go we have amazoncoin.sol okay and what we want to do next is for opens open zeppelin helps us build out our smart contracts because this smart contract is going to be erc20 standard all that means is a smart contract made for token okay with that in mind if you're looking at this and you're like lance i don't know what to start writing the cool thing is open zeppelin has documentations and this contract wizard that can help you set up the base of your contract okay so i actually have it set up so i'm just gonna paste it in here and now let's switch their screen sizes around and there we go so head over to this website on the top docs dot open zeppelin.com contracts slash point x slash wizard right you get pointed to the screen and it shows you the default contract so one cool thing about solidity while we're here and then you're gonna can import anything that you might need is first you have to specify the version and here is where the contract is it's kind of like a class right so if you look you can select which standard you want so if you can click erc 721 or the one we're going to need is erc20 okay now analyzing this code if you're familiar with classes at all my token right you can think of my token as our class and it extends the erc20 standard so we're building on top of it cool so like i said we can use this to build the base of our app and the name of our contract we can just be amazon coin and the symbol for our token will just be ac so notice how you type in the parameters and it builds out the base of the contract for you so another thing we can do is click any features that you want your contract to have so here are a couple of different ones the one i know for sure that i need is the mintable one okay so make it mintable it adds this function mint which can allow us to mint the tokens that we want so what i'm going to do is copy that over and place it in our smart contract so it's just a super helpful tool to get you started especially for my beginners out there so what i'm going to do is make this small again okay cool so let's paste that and one thing you're going to notice is public only owner we don't want that to be only owner we actually wanted this to be payable so add that trade there and you're gonna see address to we're actually not sending these mint tokens to a specific address we're gonna just erase that parameter and we just need un256 amount okay awesome and you know what i'm actually just going to full screen this okay cool now you can see it a lot better next thing we need to do is add a require here require and for this require we're going to use it as a check to see that the amount that is needed to send is equal to the amount that of tokens that we want to get so we can write that and express it like message.value equals amount times 0.000 ether comma invalid amount of ether so don't get scared by this line all it's saying is that if the amount that we need to send is equal to the amount of tokens that we want which is just a parameter passing in so for example if i want three amazon tokens we have to convert it to by this ether amount to match the message that value and if that is true we can go ahead and mint those tokens cool and then if you see a comma invalid amount of ether is if there's any sort of error it's going to run that string and show us that cool and here is the actual minting of the tokens and here and to replace two you can say message.sender right so give the tokens to us and the amount is still going to be the amount and the last thing we're going to do is receive external payable because like i said we're not sending these tokens or our ether to anybody else we're sending it straight to the smart contract which is cool we're putting in our money in the vending machine and the vending machine is giving us back tokens okay so we're gonna do a fallback external payable and cool there we go if you look another important thing to note about solidity it's very strict about the semicolon so if you get any sort of errors squiggly lines double check that but with that's it for the smart contract that wasn't so bad but there you go all right so now that we deployed our contract the next thing we're gonna do is come back to our actual app and let's start setting up our header so that we can put really cool functionality to it one thing you're gonna need is in your package json make sure you have react simple hook modal installed okay once you do we can just go over to our pages go to underscore app and from here what you want to do is import that modal so i'm going to say import modal provider from react simple hook mode okay and one thing that we're going to need to do is put this model as one of the most inner ones so i'm going to say motor provider close it off and we can close off and wrap it around our app there we go so that's set up the next thing you want to do is we can hop over to let's check out index all right and then i actually want to go to main so what we want to do next is let's go over to main and remember our header component we're going to go and make that so we're going to do is go to components and say new file and say header.js cool the drill rafc e then we can import it import header from header and comment this bad boy and it's stuck with featured so what i'll do is do this and then comment featured out cool so now we have a header so move back to header okay cool so the header is gonna have the functionality of where we can buy amazon coins in exchange for our ethereum so to set it up i'm gonna do a lot of the import statements first and i know i'm gonna use contacts later because that's the one where when you're going to need to talk to the smart contract for oops so we're going to do import react comma use contacts okay cool and there's also an amazon logo here that comes from my assets say import logo from forward slash asset slash amazon underscore logo underscore full dot png and i should have that let me just double check yep it's there cool okay you can also import image from next image and i don't know why it's doing this particular one but it should just be like that and the next thing we can do is import any of the icons i want to use so i'm going to do import cg menu grid o from react icons slash cg okay another one i'm just gonna clean this up another icon we want is i o m d search i believe and that's the same place except io cool import fa coins from the icon awesome and now that i'm thinking about we should also import our amazon contacts there you go awesome like i said we're going to be using a modal here that we installed with our packages so let's deconstruct it destructure it right here and say modal provider comma modal use modal and modal transition i don't think we're going to use all of these but i'm just going to have them just in case and the last thing is from react simple hook modal there's also some styling that i want to import from there so if i say import react simple hook modal slash dst styles dot css we should be good to go and but that's going to be it for now what we want to do next is let's go ahead and set up our jsx all right so the first thing we're gonna do is for our div let's give it the class name of styles.container not stylesheet okay let's have another div with the class name with the class name styles.logo because this is where the logo is gonna go right we can insert an image here and let's just set it up okay is source is equal to logo alt amazon oops alt amazon height is 100 with is also equal to 100 and we can also give this an image a class name oops of object cover right that's the css we want to apply to it with tailwind and from there in the next line we can do another div this one will have a class name style dot search little search bar with an input we can actually make input of closing all right this is where the type is going to equal text placeholder search your assets styles dot search input cool so after those inputs in the next line within that div we can put the icon for the search and you can make the font size equal to 20. all right after that we can make another div this one's going to be called menu so we'll say style that menu styles that menu and within that menu there's going to be menu items so if i do div with the class name dot menu item what you can do next is copy it two times okay but then this first one is gonna be new releases and the second one is gonna be featured okay still inside the menu i'm going to have some conditional rendering which is basically going to check if there's a balance and again this balance thing doesn't exist so keep that in mind and it doesn't exist yet if balance exists what i want to happen is a div and within that very div it'll have the class name styles dot balance and styles dot menu item okay and it's gonna have an on click to open our modal okay all right so now it's our first like modal function so what we can do to actually get it working is say const object equals use modal and this is where we can get that open modal from so i'm going to destructure it from there you also want is modal open and close modal okay awesome and then in between that div finally we can put our balance in there just to show off how much about how much coins that we do have okay and we're still in the menu item we want far coins with the class name of styles.coins and here we can actually start using the modal itself so you say modal you want to say is open is equal to his modal open i'm going to say transition equal to modal transition dot scale and all capital and within that model we also are going to have a component so here i'm going to comment it out for now but there's going to be a buy modal component that's going to take in it's going to pass in a prop so let me set it up by modal and this doesn't exist just yet but i will soon so close is going to be closed model and there's going to be a buy tokens equals buy tokens buy tokens is going to be a function that we're going to call that's going to let us convert our ethereum to the amazon coins that we set up by talking to our smart contract cool so there it is okay after that closing div what you want to do now is have the closing parenthesis here call in and have another open run right here okay cool so in the very next line we can set up another div this one has a class name as well that is going to be just the styles styles dot balance comma styles dot menu item cool and i just realized this should probably be in parentheses there we go awesome it's going to zoom out a bit because i can't really see it enough let me do an altc as well okay cool so this is also going to have an on click that doesn't exist yet as well this has an on click that has open model actually i'm open modal and then one in here we can say zero ace because if they don't have a balance it's you can assume that they don't have any coins so you can say zero ac fall coins styles dot coins close it off have another modal here do it is open is modal open transition can modal transition dot scale just like before and there's actually a different types of transitions you can have for these models it doesn't have to be scale so feel free to look it up if you want to use something else and again there's going to be another bimodal here so i'm just copy it now let me get the closing div for this and see my missing okay so that should be it there is one more thing though should be a cg menu grid font size of 30 class name of styles menu item again and there we go see what's missing should be it it's literally this last div oh i see the issue now there you go nice okay so my header is good all i need to do now is start the css and to start the css from new con styles equals object and let's get started so there's a couple things with the styles on this one let's do another container and that container is just going to contain a height of 60 pixels with dash full flex let's do an item center here let's do all c as well item center here gap of five and px16 comma here and then that's the container the next thing you want to do is let's style that logo and for logo we want flex items dash center you want an ml bracket 20 pixels you want cursor pointer flex dash one you want to search here the search is going to be p minus 25 px mr30px and w for 400px okay we can do a height here of 40 pixels and in that search bar we want the background to be white rounded dash full shadow can be dash lg and we want the flex property here flex items center border dash black so that's the search let's also work on the search input and for the search input we're going to make the background transparent we're going to have the focus on the outline dash none and the border none flex dash one items dash center flex cool next we have menu and for the menu we can have flex as items dash center text dash md dash bold cursor dash pointer lastly we'll have the coins which is just going to be ml10 px and don't forget to put a bracket around that actually there we go let's go awesome so there we go this is the header.js and let's just see if it's running by opening up our terminal let's do netlify dev and let's give it a second to open up it's going to refresh this says not found which is interesting then go to 888. what does it say not found okay it says not found that's probably because it's still loading oh i see yeah because we're still in the smart contract folder i forgot the cd out of it make sure you are over here in the main folder and now you can do netlife there we go i'll hit refresh now oh i see i've accidentally put the hook outside it should actually be inside let me take this back out and go in here okay so now i can give it a nice refresh see oh no typo here there should be an s and balance out like i said we have some conditional rendering with something called balance which holds our amazon tokens or coins that doesn't exist yet so i'm gonna make a cons balance here and set that equal to let's say 99 or a string 99 rather okay and it looks really ugly that's because it's pretty squished in but there we go okay awesome if you look at it it's not quite there yet so let me just check on that css let me see am i missing anything oh of course i need the menu item yeah so this actually is the menu item and we should actually have menu and menu is just going to be flex oops flex items dash center and i need to give this a gap that's why it's a little smushed in and then come so now let's take a look that looks way cleaner now there's this like this new release thing and we can fix that up that's from earlier other than that that header looks pretty clean here is our input field awesome all right now let's go ahead over to our context to add some functionality for our header so here we go what i need to do now is hop over to your files and what we need to do is create another folder so next step create a folder call it lib and inside this lib folder is going to be something called our constants.js this will make sense in a moment and also inside your lib folder is if you go to your smart contract and you go to artifact and go under contracts you're going to see something called amazoncoin.json and make sure it's not amazoncoin.dpg you want just the dot json so it's going to be whatever name and go ahead and copy it and put it in your lib folder along with your constants.js cool so what you want to do from there now that you copied it over you can say import amazon coin from dot forward slash amazoncoin.json so i'm importing this.json so that later i can get extract the api from it which we'll need later so next line export const amazon coin address is going to equal a string that's gonna have your smart contracts address save mine over here remember i told you guys to save it and i'm gonna paste it in there and there you go there's your amazon coin address and lastly we want to export const amazon abi and set that equal to amazon coin dot abi okay so we got the api from our amazon coin.json and storing in a variable and then exporting it with that our constants and our lib folder should be good to go we should just go into our amazon context and let's update it with the functionality for buying tokens so cool so since this is mostly just functionality i'm not going to see anything on the front end yet let's make this full screen putting down our terminal do something like this and there you go so let's import all those things that we exported so let's say amazon api and amazon okay yep and just double check it does exist amazon coin address cool and not only that we're gonna need to import ethers from ethers and if you're not sure double check in your package.json that you have ethers and we should have earlier in the video there it is okay cool so we have all of that next thing we can do is set up a couple states and what i want to add right now is something called the current account which is going to hurt hold the current accounts address so this will be set current count equals use state then it can be empty string at first awesome next thing i want to do is sconce token amount so token amount is going to control keep track of how many tokens that i want to request for my app set token set that equal to use state next one i want to set up is something called amount due i'm going to do set amounts due can you go use state okay another variable that i want to set up is the ether scan link right ether scan link it's going to do exactly what it says which is going to keep track of the ether scan link so that you can click it and prove that your transaction was real clear scan okay oops little typo here there we go next let's add another one this one is called is loading loading is going to keep track and help us out with the modal because if loading is true then i should see like this loading animation which will make more sense later oops louding there we go loading equals use state and actually this should be initialized to false and last but not least but also the most important one we should also keep track of our balance and by balance how much amazon coins do we currently have which will also be an empty string so that was a lot of different states we're going to be putting them into the provider much later but what i want to do next is set up the functions that we're going to need okay so coming down to the bottom at the top here i'm going to make another function and let's call it get balance and it's going to be asynchronous and if something's a synchronous usually it has a try catch which will have an error which always usually console logs that error nice okay so with that said let's work on the try block so we can do is if user is not authenticated or there is no current count which is the new state we set up we're just going to return right and another and so that's the edge case but if there is a current account and they are authenticated then we want to do cons options options equals object because we're going to pass options in in just a little bit but the way we want to set up this object is something like this we say the contract address right and then we pass in the amazon coin address i'm letting my code know that this is the contract that i want to talk to and i'm going to say function name what function do i want to run from that smart contract and it's going to be called balance of you didn't see us make a balance of on the smart contract but if you remember open zeppelin has the erc20 library that has a balance of function built in it was inherited when we made our account so we're going to make use of it and calculate what our balance is so we're going to make use of it there next we need the abi which is going to be the amazon api that we imported and for the params the params of that function is just account so we haven't actually set anything up we just set up our options in order to do that we're going to do is web 3 enabled and within that we're going to do constant response equals morales dot execute function option so we're going to use morales to run the function and pass in options so essentially we're talking to this address we're running this function we're using this api and we're passing account as the parameter okay cool so then what we want to do next is set the balance and what we're going to get back from the response is actually a hexadecimal but what we can do to fix that is just response dot 2 string okay cool so that's the get bounce function alright so that's the get balance function and now for another function that's going to be called by tokens that's right it does exactly what it sounds like this is the actual function itself that's going to let us convert our ethereum to tokens all right so if the user is not authenticated then what we want to happen is an await authenticate right basically if the user is not logged in it's going to prompt the user to authenticate okay cool so now that that is set up we can actually do the function now so we can set up a variable called amount and we can get ethers dot big number dot from token amount what we want to do next is decide how much ethers one amazon coin costs so what we can do is go over to our browser again so we can make this full screen and what i can do is i have a website ready for you guys that can convert our ethereum to whey and how i decided to convert my amazon coins is going to be 0.0001 and that's how much way it's gonna be when you convert it that's important because smart contracts takes ethers in way so we're gonna do quotes here put in that long string and then we can calculate the price by making a variable oops called cog price equals amount that mole price okay and it should be eight thirds awesome so that looks good to me and if you didn't know buy tokens is going to be pretty similar to the get balance where we're going to set up an options again then i'm going to say what address contract i want to use which should be pretty obvious at this point amazon coin address and the function name try to guess it before i type it's going to be mint exactly good job joe i don't know if joe's were watching but if there was a joe watching i hope you got scared so abi is going to be amazon api then we're going to do message value and it's going to be calc price okay and then for the params so remember our require function that we made on the smart contract this is what message value is so params is going to be just amount and we're just going to pass it like and then we got amount from tokyo okay cool so that's the options but we're not done yet like i said this is just setting up the options let's actually set up our transaction by storing it in a variable and that's going to be equal to weight dot morales dot execute function exactly so we pass in options again to run everything i said in our options okay then i'm going to make another variable called wrist all right and it's going to hit a weight transaction dot weight okay and then i put four here and when you get four here it's going to wait for four blocks to be verified before finishing the transaction and that's just to ensure that it's more valid right because the way block chains work there can be multiple blocks that are discovered but the longest chain is considered the truth or the real one you want to ensure that by putting a fork here you don't have to but it's just optional so i'm going to do set is loading to false and if you notice it's false here and initialize that's false that's because later on when i move it with my context api we're going to be setting loading to true elsewhere okay i also just want to console.log the receipt just so i can see it get printed when it's done then lastly we can do a set ether scan link which is going to be quotes https colon forward slash forward slash ring to be dot ether scan i'm doing this because i can see in my console a link that i can click on to take me to the actual eso scan address without me typing it in which will be pretty handy later on so again here's the template literal we can put receipt dot transaction receipt dot transaction hash and you can just put a comment cool awesome so we got our two functions ready all we need to do now is hop over to our use effect and update these effect that i want to update is this one so i want to say const account equals await user question mark dot get should be eth address i believe this will get the account the user's etherdress and we want to do our set username sorry in our site username our setcurrent account actually and set it to this current account etherdress cool so now we can put current account in there as well okay cool very nice okay so that use effect is done let's make use of our get balance and get balance is actually gonna go at the top here so we're gonna say get balance awesome that's it for the use effect we haven't used buy tokens yet because that's something that should be set up on the modal so coming down below to the value let's add a couple more things we can bring the knockout balance but we can bring the balance and make that global we can also set token amount and the token amount we can talk about amount due and set amount due he also needs to pass in his loading for set is loading so that we can make it true later on i'll also do set ether scan link not sure if we're gonna need that but we'll just put it in for now so also etherscan link and while we're here we can also do current account awesome so that looks pretty good that's all the states that i need to pass for now and if i forget i'll come back but that's it guys that's the amazon contacts updated now so let's apply the functionality by building the bimodal component cool all right guys so after you pass all of these things into value it's going to make all of these variables and functions global like i mentioned previously what we need to do next is if you remember if i go to our header and you look down below we have this bimodal component that doesn't exist yet so let's go ahead and make it and now that i'm realizing it we don't actually need to pass that down as a prop so i'm going to take out by tokens equals by tokens so let's create that component i'm going to go open this up hit new file and let's call it by dot js okay and in bimodal dot js let's go ahead and set up our component and then as usual set up all our imports that we'll need so thinking i'm gonna use context use context and then we're gonna do use effect okay and then from there i have a couple of i have a react icon that i would like import which is just gonna be ios close from react dash icons slash the io awesome and also since i imported use context let's get our contacts so there's our amazon one and we can also import something from react spinner so again if you go to your package.json you look for react spinners make sure you have it there's mine so what i can do now is import hash loader from react spinners okay and then we can import link right from next link okay awesome and i know in bimodal i'm gonna get a close property so we haven't commented out yet so it's not actually passing that prop in yet but we're setting it up for success in the future we can set up the variables that we need from context already so i'll say object equals use context and you pass in amazon in there and in between the curly brackets i want amount due set amount due token amount set token is loading set is loading oops ether scan link and set ether scan that was pretty much everything that i just imported into the context which is why we set it up earlier okay another thing i can do while i'm here is make a function called const calculate price we already did calculate price in our contacts file but this calculate price is a function to display the price that we get back on the front end side so it's going to be const price is equal to parse float token amount and you can do times zero point 0.0001 and that's supposed to represent how many ethers is converted from how much tokens we want okay then we do price equals price dot to fixed four and we can set the amount due here and put price awesome we had use effect here so let's actually call it so i'll say const not const i'll say use effect this one's gonna be pretty simple the side effect that i want to run is just to run a calculated price every time the bimodal component is loaded and we don't want this to run every single time we just want it when the token amount changes so put that in the dependency module and you're good to go beautiful next we can set up our jsx so first div i'm going to give it a class name of styles.container oops styles dot container okay and next we're gonna do is loading all right so we're gonna do some conditional rendering here and if is loading is true then we should put in our hash loader so i'll set up a div here with the class name something like the loader container and within those two divs we can put the hash loader and you can set the size to whatever you want i'm thinking 80. and again if you don't want to use the hash loader you don't like the animation that i'm using you can import a different kind of react spinner if you take a look at this library so i'm filling the hash loader today so let's use that so let's close off that parentheses because if is loading is false which means nothing is loading everything's aokay we're going to have another fragment here and we should load and then if is loading as false we should load the actual modal itself let's do a div with the class name styles.close x okay and within that div let's take our icon self closing and it's gonna have an on click of close so when i click this button it should close and this close is coming from something i passed down to bimodal from header not only do you want it to close by the way you also want to make sure that the states are all cleared out so i'm going to do that by saying set amount do is empty set token amount empty and set ether ether scan link to empty there you go so we cleared it out on close and still inside this icon we can set the font size of it to be 50 and the class name it's not actually going to give it a name we're just going to give it some styling of cursor pointer so that when i hover over that x you can see that's nice okay cool so let's set up another div here and then we'll do class name styles dot title and in styles that title we can just say buy more amazon coins because we want to promote the use of our tokens at this store here so buy more amazon coins here i think that's a pretty good message and then from there we can do class name equal styles dot content and then in that content we can say select how many tokens would you like to buy just instructing the user on how to use the menu how to use the model so next we have another div which is just gonna contain our input field so i'm going to say div class styles that input okay here let's insert that input within here set up its attributes which is going to be type text placeholder to indicate that you should put an amount here of how many coins do you want now we can give this a actual class name styles.inputbox okay there's also going to be an on change in this input field because every single time i type something we should be updating the set token amount state so it's not ether scan link it's going to do something like this set token amount to be e.target.value so that's how you grab the input field if you were in case you were wondering and every single time i type something updates the state with whatever is in my input that's all that is so if you do value equals token amount that looks pretty good and we're still not done yet we want to make another div here actually and to do the class name styles.price which will show how much is due based on the amount so that's why i want to say total due curly brackets and empty and you can put token amount and token amount i'm setting up a ternary so if token amount exists and the token amount is greater than zero what i want to happen is what i want to see is amount due plus eth right so you can see how much eath and if there is no token amount it should just say zero make sense cool so that's the div last but not least is just the button that's gonna run the function that we want so i'm gonna format it and add the attributes that we need which we can start off with its name so i'm going to name him by button okay so then there's also this disabled attribute if there is no token amount or let me space out or the token amount is less than zero then they shouldn't be able to click the button so that's why i set that condition on the disabled prop so then on click we can put is loading to true right because when i press this button it's going to take some time for us to call the contract so what i want to do is set up our hash loader by setting is loading to true from there i want to buy tokens and let me just double check if i'm getting ah yeah we should also be getting that at the top here by tokens and in our amazon contacts we should also be passing that by tokens cool so now we're all good going back to bimodal be sure to get it from amazon contacts and so you can use it here the button the text we want for that button is just going to be should be easy for people to understand cool so another cool thing that i want is that if there's an ether scan link i want it to actually show up in the front end too so what we can do here is set up more conditional rendering so it's going to look something like div with the class name styles styles.success because if it's successful we would see this etherscan link so we'll say transaction successful check out oops check out your receipt or your transaction below so that's going to be super cool to see later when i get my coins i'll see a nice receipt below then we can also add another link here this one's going to have the href of the ether scan link so i'll put href and put literal ether scan but this is still inside that same link i want to give that person a little name styles.etherscan cool so within that link there's going to be an a tag with the class name also styles dot etherscan target equal underscore blank close that off and the link will say transaction receipt cool then after that link we can close off that conditional rendering and which will also finish this one off and let's see so link that close and looks like there's extra parentheses here and that should fix it yeah so that should be the closing parenthesis for that and the closing parenthesis for this it can be down there cool so no errors looks good to me and that's the bimodal component all right cool so that's the bimodal component let's get into the next part and let's see if it actually works all right guys cool so like i said that's the bimodal one thing i almost forgot to do was let's add our styles object in here so i'll say con styles equal object and let's start writing it out so for container it's just going to be height full width full and we'll do a flex property here with flex column that's it for the container okay so next we're going to close the close active which is going to be with full h50 pixels flex ops flex property here and then you're going to do items center justify and mb dash 20 pixels cool so let's close x let's style the title div which will just have a text dash 3 xl let's give it a bold font so by doing font bold give it a flex property flex give it a nice flex one items dash center then empty 20 pixels okay then we're going to do a justify dash center with an mb dash bracket 40 pixels awesome you still with me okay for content what i'm going to do is flex w dash full and be 30 pixels and that should actually be in brackets nice okay after that we can do a text excel and a justify dash center and that's kant net it should be content good catch good catch for those of you watching thank you for selling me so input we're gonna have w dash full and we're gonna do h dash full with flex items dash center just center okay next let's add a background color of hashtag f7 f6 and f2 i believe and we can do like a focus with the outline not very nice let's do the input box now which we'll have with full height full give it a flex property and then we can style it with items center justify center nice background of hashtag f7 f6 f2 i think it looks pretty good then we can do oh okay i think i mixed up this this is yeah this is the input box styling so let me just finish that out real quick so this is input box that's the one that makes more sense this should have the focus outline dash none the input though should just have a width of 50 percent the height of 50 pixels pg dash hashtag f7 f6 f2 that's the background it should have and it should also be rounded lg and we can do ap dash 10 pixels then it should have a flex mx dash auto there you go that's the style for input this is the input box that looks pretty good now we can do price and price is going to be w full h full don't forget to put colon and we also want a flex here with items dash center and justify oops not item center it's just justify center actually justify center then item center then empty bracket 20 pixels give it a nice bold font like this and then do text dash three x l you got that cool let's do a buy button and in this buy button it has a width of 20 and a height of 50 pixels and let's give it a background zero zero zero empty dash bracket 40 pixels rounded dash lg p dash bracket 10 px we have flex mx dash auto text is white yeah there's actually a lot on this by button one justify center and items center and cursor pointer that was a doozy but let's do an alt c so you can see all of it all right can you guys see that cool love to hear it there we go so container let's do the loader container we'll do a w dash full a h dash 500 px have a nice flex items dash center and a justify dash center there's a lot of css that goes into this one so let's keep it going with the loader okay and actually there should be a loader one might have spelled it wrong okay cool so there's none of that next one will be etherscan then etherscan is going to have css of w h dash flex items dash center justify dash center text green dash 500 text to excel empty 20 pixels a nice font that is bold and a cursed dash pointer as well nice okay so let's make that little success div it's the last one for now guys it's going to be w h full let's finish it out flex items center justify dash center text excel empty 20 pixels i keep forgetting the bracket 20 pixels and let's do a font bolder okay let's hit save and there we go that should be the css of the by modal so now it's time to actually check if this works i hit save i'm going to open up into my app hit refresh for good time sake and if i click this guy nothing happens okay so i'm gonna head into let's go into the header real quick oh yeah we also need to import the bimodal duh so let's go ahead and do that real quick import by modal from bimodal which now means i can bring this in and bring this in okay awesome so can i click this now so i'm hovering over it and i can't click it but the weird thing is that it should have a cursor pointer to it go back to my code real quick let's add a margin bottom of 50 pixels let's see so i'm adding margin bottom 50 pixels to my header i want to do this temporarily because once we add the features feature component the styling of it will look a lot better but for now i'm going to put this mb 50 pixels so there we go and oh there we go nice okay so we can actually have our cursor pointer i think it's because of the overlap what i'll do is click on this hey let's go that's our modal our model is working beautifully now before i actually test the functionality of my tokens what i probably should do is let's update the header okay well how i want to update the header is to actually use context so i'll do that right here const equals use context and then pass it in and then what i want to get from amazon context shouldn't be that much it should just be balance and get balance function cool and then is am i using get balance here actually no i'm not so i think it's just balance i need then because that should be covered by the use effect so i'm gonna hit save and if you remember the reason why i see 99 over here is because of the hardcoded balance if i'm gonna get it from my context we don't need the hardcoded balance anymore okay so if i save there we go it's gonna be zero ac but when i buy tokens it's going to update with how many tokens i have so let me do that cool so now like i said it's zero ac but when i actually buy amazon coins it's gonna update one quick thing though if you look at your meta mask you should check if you have zero if you have any ethereum because that's what you're gonna use to get amazon coins and i'm not using real ethereum that i bought make sure you're on the rinkbeat testnet okay so in this section i'm gonna be showing you guys how to get ethereum on the testnet so what you're gonna do is open a new tab put in this link faucets.chain.link slash rinkeby and here you can put in your wallet address so one cool way to do it is by connecting your wallet so i'm gonna go here and that should ask me to connect my wallet actually okay so this is on faucets.chain.link shrinkaby this is where we're going to be getting some test ethereum for us to play with as a developer we can connect our wallet i'm using metamath and make sure you're in the account that you want to have eth4 which i'm connected with account too so let's use that okay so now it's there i don't need test link i just need 0.1 eth there you go waiting for confirmation so anytime you're developing on the test net this is how you can get your test ethereum you're going to do this a couple of times in the faucet so i'm going to do the same thing so i'm just going to send request initiating waiting for confirmation and it usually takes a while because the rinkaby network is just a little slow okay close let me just double check how much ether i have now there you go see you can see a point to eat i'm gonna do this until i have about let's say seven so i'm just gonna cycle this through okay keep it going okay i'm gonna close to five yet four you know what let's just do one more to get to five and that should be good for now okay request complete so i did this a couple times now let's look i have point five ethereum now i can start playing anytime you need eth go ahead to this website now i'm gonna go back to my app oh yeah there was a change let me just refresh this awesome and again it should say zero amazon coins because i didn't buy tokens it so let's give it a try now so i'm gonna click this how many tokens would i like i'm gonna get let's get 10 tokens right and the cost of these ten tokens is going to be point zero zero ten each so we have plenty so let's go ahead and hip and there it is loader container is not defined that is awesome yeah usually this doesn't work the first try why don't you guys tell me any sooner loader container is in the bimodal.js then and the loader container here order container it's going to be style dot loader container yep we're good to go let me hit save okay that's a new one error occurred in bimodal just go back to localhost okay let's try this again so just in case i'm gonna log out connect my wallet again sign i'm in cool click the modal and let's try let's get 10 coins let's buy okay cool cannot estimate gas transaction may fail let's see okay so i saw the loading screen which is a good thing but then we ran into this so i don't know if you guys saw but we got that weird error all i did so far was redeploy my smart contract and when i deployed my smart contract i got a new address and i'm using this now and when you get a new smart contract address make sure to recopy your amazoncoin.json and now it should work but i did want to fix up a couple of things i was looking over the code and there actually should be a forward slash here in one line 117 for me so i'm going to save that another thing i wanted to do is i wanted to make sure my balance is working so what i'm gonna do is put get balance here and if i put it there i should move it up to the top so i'm gonna get my balance oops copy that cut it let me grab it again cut it save and i'll just put a top above the use effect hit save there we go so now let's see if this works so moment of truth what i'm going to do is refresh this one more time make sure everything is running cool so if i click this bimodal works if let's say i'll get 10 hey let's go awesome so yeah the debugging that took me a while but that's all part of being developer if you see a meta mask notification that's a good sign so if you look we are sending this many eth to it and it should meant us the right amount of token so let's confirm okay and sometimes this takes a while to load mainly because again we're communicating with the blockchain and it's not as fast just yet but in the future hopefully this gets a lot faster so now we wait let's go so if you look you can see transactions successful check out your receipt for your transaction below so i'm going to click on that so there you go proof that program is talking to the smart contract as you can see right here that's the address and you can see from me awesome so if we go back to our app now i hit x there it is that's our actual balance it's there and recorded this is awesome i'm super glad about it thank god so now we can move on to the next part all right so now that we finally can exchange our ether for coins let's go ahead and make it so that we can buy our beautiful assets that we have here don't you want to buy this doodles or this infinidoge that would be sick so let's go ahead and do that by going into our context file once again one thing that we're going to need to do is we need to query for the users when we're going to buy assets because eventually when i buy an asset i want to save it and attach it to that user because if you log in you should see all the assets you bought if my friend kevin logs in he should see all the assets that he bought cool so let's get set up remember before when we're querying for assets we're gonna do something similar so i'm gonna do const equals use morales query right these hooks are super powerful so let's make use of them so i'm going to say underscore user because that's the class name and inside this object here where we do structuring it we can call the data user data we're going to use that later on later also we can get error from here while we're at it user data error and then we can also do is loading cool so we're going to be using this in the use effect as well but we're not going to worry about that now so i'm going to save this and now come down below and we can just put it right here it doesn't matter all right so like i said this function it's not by tokens it's const by assets so that we can buy our digital assets on our marketplace so i'm going to do by asset equals asynchronous and if it's asynchronous we usually do a try catch here and i like to set up the catch because it's super easy so i'm just going to do console.log error cool so that's the by asset from here this is the fun part if the user is not authenticated or if is authenticated is false just return because they shouldn't be able to buy anything that they see here and then from here we're going to set up our options again so const options equals type and you can put here erc20 and then we can do amount as price and if you're wondering where price is coming from it's going to be a parameter that we're going to pass in on our card component as well as the asset itself so go ahead and pass price in and then for receiver just type it out like that and do an amazon coin address we're going to pull our smart contract to guest for the receiver and the contract address is going to be amazon coin okay so we're essentially giving the amazon coins that we have and sending it to the smart contract to purchase our asset so if that makes sense to you let's get to the next part let's do let transaction again and set that equal to an await morales.transfer we're going to transfer our coins in there and pass in the options from there let's do another const receipt equals await transaction dot wait and we can also do if receipt right if we get back a receipt we're going to do a const res equals user data and remember user data is what we queried bracket zero so when you do bracket zero that's gonna be the one that's currently logged in and i'm gonna do a dot add because when i do that add i'm gonna add a trade to this or remember like how we added a nickname to that user we can add another column by doing owned assets so now we're starting to store the assets that we buy to our user okay so i'm gonna do a comma curly brackets because the next thing we want to do is dot dot so which is gonna store all the information of that asset we're gonna put purchase date so we can know when we bought it which would be really nice and we can just do a date dot now and then oops and then in the next line we're gonna have an ether scan link so that when we look at the object of the user see the transaction receipt which is pretty cool so i'm going to do https colon forward slash rinkaby dot ether scan dot io slash tx and don't forget the forward slash like i did last time and i'm gonna do the template literal here just pass in the receipt that transaction hash cool all right we're not done just yet but after the if state we wanna do an await res.save because remember when we added a nickname we did a user.save so this time we're gonna save us adding the own asset to morales and then from there we want to do a dot then because after we save it right we got to let the indicate the user that they bought it so we can just do this alert feel free to upgrade to something else maybe you guys can make a popup which would be cool pretty cool but i'm just going to do an alert for now so i'm going to successfully purchased this asset let's go all right cool so now that we have that we can hit save and if we have the buy asset function let's go ahead and bring it down to our provider so we can make it global all right let's type in by asset so if you guys can take a guess where are we going to call this by asset function that's right exactly in our card js so we need to be pulling from our contact so let's make use of this hook right here so coming down below in line 15 for me i'm gonna do a const curly bracket equals use context all right so put parentheses here pass in amazon and just add what you need which is literally just the buy asset function and again make sure it's the same spelling by asset okay now i got to do is add an on click and i want to actually do this in the container so what i'm going to do is make some rune in the opening tag we can actually format it like so and then we can do an on click equals something like this and do a buy asset and it takes two parameters which is the item's price and just the information about the item and passing it in as asset okay so let's hit save okay and now if we go back to our app i'm going to hit refresh and we have 10 coins to play with so let's go ahead and buy something let's go ahead and get taste the rainbow oh look at that so if we click on the asset we have the metamask notification asking us to sign if we want to transfer our amazon coins for that okay so let's go ahead and hit confirm okay now we just got to wait for the transaction to process let's see did it take my money okay send a token oops and that's the accident clicked on it again and let's just double check on our morales database on user and this is the one for lance see oh should i hit refresh yeah so i didn't see my alert which tells me that something didn't quite go so i'm going to go back into my amazon context and it looks like most of it's going through so let's just console log here waiting for because if all that's good we should have saw that or looked so i'm just going to do another console log here success and we should probably spell it let's go saving that and now let's go back to here so let's click robocat and let's see if we can buy robocat now okay so this is a good sign we're getting the signature request we can hit confirm so it looks like it went through because i can see that i had 10 and now i have six which means i bought two things so that tells me that the amazon app is working let's freaking go guys so with that this is super cool and all but we're almost done with the app so if you're still watching this please leave a comment down below let's leave a comment let's this time if you say something like doodles in the comments i know that you've made it this far and you're able to get this working oops and i click doodles so it makes me want to buy it cool so if you say doodles down below i know you're still watching and you're crushing it so far so let's go into the next part because we can take this a step further by having a transaction history page imagine that you buy all these assets and you can see if you click this page the list of things that you bought so that would be super cool so let's set that up in the next part so i just quickly cleaned up my vs code and put our nice app on the side again what i want to do is create the features component right if you remember features component if you go look for it in the header i believe nope not the header actually it is the main ah there we go so in main.js there's this featured component that we haven't made yet let's go ahead and finally do one of the last components so i'm going to do featured.js there we go i'm just going to do that real quick there you go featured so the featured the idea with featured in this amazon build is that there's these really cool assets above underneath new release and that should fix our problem with the header so if you remember i had this temporarily with the mb the margin bottom with 15 pixels so we might not need that anymore so i'm gonna hit save and it's overlapping a bit but once we add this featured component should look a lot better so what i'm going to do is back in main we can comment this bad boy out so let's go ahead and import it using this auto import and close it off cool so now we have featured in there as you can see it just doesn't have any styling so let's set up the jsx and to set up the jsx let's go to line five recording okay line five for me and i'm setting it up like this and for the most outer div the convention is the same it's just gonna be styles dots oops styles dot container okay and then within that we're gonna have another div that's just gonna be the title so this one is styles dot title okay within there we can write top assets and underneath top assets we'll have a couple cards here so if i do styles dot cards we're gonna have about four and they're gonna be really cool because i'm gonna actually get these videos that are gonna be constantly playing so to get it set up in the cards div we're gonna do a div we're gonna have a class name equals styles dot card one like i said there's gonna be about four of these so the styling for them is gonna be pretty much so inside this div card one type in another one and for the name of this one i'm thinking let's call it styles.card cross nice okay and then in the cards cross i have it already i've already prepared it's gonna be this nice video tag and i didn't mean to press save that's why we're getting an error because there's no style object yet but what you should see html has this tag called video which just lets us play okay and if you look in the video tag i have something called autoplay loop muted and controls equals this with this class name object cover and this source folder here if i do an altc so you can see it better is going to link us to one of the mp4s that i have prepared so there you go now like i said the styling for these are going to be pretty similar but so i'm just going to copy this about three more times okay now what you got to keep an eye on is for the class names they're all slightly different this is card two card three and card four just keep it different and the videos are actually different as well so just added all the source files that we need and that is the last video right here there as you can see they're all slightly different and again you don't have to put these actual videos i encourage you guys to actually make this your own right you can use this project as a template to make your own nft marketplace and have your own tokens for you to build so highly encourage that and keep that in mind what i want to do next is let's set up that styles object so i'm going to do con styles equals and there's a lot of styling on this but once you get the pattern you can reuse it over and over again so not constrainer we want to do container now continue container and for the value we're just going to give it h 400 pixels that's the height we can do it with and give it a flex property of p dash bracket 20 pixels do a flex dash column so after the container what i'm going to do next is get the title div and the title div is going to have text dash to excel font folder from there we can add a margin bottom of 20 pixels margin top of bracket 30 pixels and margin bottom of 24 and an ml of dash 40 pixels so that's going to be it for the title add a comma here and then we can start working on the cards div which is going to be an age full a with full flex gap of 100 pixels and let's put that bracket in there so that's the gap let's add a justify between mb30 pixels and an ml of 30 pixels as well nice okay so that's the cards then we want to do and style each card it's and to style each card itself and when i'm styling each card it's actually going to have the same styling so what we can do is do an h dash 130 pixels with a width of let's see 400 pixels then we can add p dash 20 rounded dash 3xl and a background oops bg dash gradient of one one okay from there we're going to add a from bracket hashtag zero d one four one c all right that looks good and now we have another two hashtag four two six 6 7 e and we're going to do a relative cursor dash pointer so there's relative and then there's cursor pointer and then we want to transition all and duration from that to be 300 and we can do a hover scale 105. okay i know this is a big one so if we do that let's add a hover shadow as well as a scale right to be one not to be one to be dash excel let's make it a border two and a border color of fb oops of hashtag fb97 and oh that's card one but guess what card two three and four is about the same so i'm just gonna insert it like this and i can change it all right but if i'm setting it up this way because if you did want to give them all different stylings you could so if i hit save hope we got a style in card cross and that reminds me you actually have to make the card cross styling okay and i have to make the card cross styling but i'll tell you now it's not as bad as the last one so this one is just going to be h dash bracket 180 pixels the width can be 1 25 pixels rounded dash 3xl and just do an absolute here with the bottom dash bracket 20 pixels transition dash all with the duration of dash 300. still with me do a hover colon scale and make it 105 and give it a flex property and then overflow hidden there we go so that's it that's the styling for the feature.js if i hit save now we have another style thing for a card cross oh i did fix that let's go ahead and refresh oh i see because it's there's a multiple card crosses that makes sense so i'm going to fix out all of the card crosses that's the one i copied yep so double check your your divs and i don't think there's any more card crosses that need an s so i'm just going to hit refresh oh look at that nice okay so it's almost there you can see the videos are loaded i just need to add a nice card color you can see the videos now and it looks sick but the background should be there so i'm looking to see any typos ah okay yeah i always confuse this it should be an l instead of a one it looks so i'm gonna take out all the ones and put in an l and i believe i have this as a dollar sign it should be a hashtag for each of them so if i hit save now let's go full screen let's go look at this isn't this beautiful we have our own marketplace with these amazing videos on the top so like i said earlier we're gonna take this one step further we have one more page we're gonna do the transaction history and then we'll be done so let's put it 100 into this last part and i'll see you guys there and then we have another one for two real quick there's only like little things we need to add on top besides the transaction page so one thing i want to improve is going into our morales db again i want to create a column and this will actually be the owned asset so it didn't show up before but we can make it show up by doing something like this by just adding a new column and it's a string and we'll call it owned assets okay i'm just going to add a column cool so now if you remember our by tokens in our context so let's do by oops that's not what i want do by asset and then we had this owned asset here let's just make that column and i think yeah let's add an s there too so i'm going to add an s to this owned assets so hit that and another thing that i'm realizing too this should actually be inside of the if statement that's probably why we didn't see it earlier so i'm going to put it down below here because now res is defined cool all right we hit save and now i want to add another state since we're already in the context and then if we do recent transactions we also do want to set recent transactions all right okay from there just set it equal to the use date and the initial state can be an empty array okay so after you set up the state for recent transactions come down below to the rest of our functions and we're going to make one called listen to updates one cool thing about morales they actually have websockets that you can connect to and subscribe so that anytime there is a change there it will automatically update so we're gonna take advantage of that and do a cons listen to updates function it's going to equal an asynchronous function and you guys know if we brought it like this we're going to have a let query variable and in that query we can say new morales dot query and in here i'm going to put eth transactions okay let's set up the websocket by making a variable called subscription and set that equal to our query dot subscribe awesome okay and then to turn it on we'll say subscription on and put parentheses and in quotes put update because every time there is an update i want to pass in the object and do a console.log new transaction so that i can see console.log the object that we get back and then we want to set the recent transaction to that object and like you remember the initial state it was an array so let's also make that object an array as well cool so after we do that let's scroll all the way to the bottom and let's add recent transactions to that list and if you remember in maine we had this style that we never really used so what now we can finally set that up so what we need to do first is utilize our contacts so coming down here i'm going to say and also this is bothering me this used to be which needs to be down here and let's utilize our context by saying recent transactions okay equals use context pass in the amazon contacts all right from there underneath cards let's set some conditional rendering and get the rest of this jsx done so recent transactions.length if it's greater than zero then if recent transactions.length is greater than zero and and add this and symbol here we're going to add an h1 okay so this h1 is going to have a class name of that styles dot recent transaction or recent title sorry and then from in the in between we can put recent transactions or transaction cool then we're gonna add another curly bracket here for recent transactions again so if it exists we want to do a recent transaction dot map transaction here and we also want to pass an index so that we can use it as the key and i actually need to format this properly there we go all right and i make the arrow function because for each transaction i want to return this set of jsx so i'm going to do a div let's do a closing date for it and then within that div do a key equals index because if we put an index from the map it's all it's going to do is count from zero onwards so for every transaction it's going to go zero this div has a key of one this div has a key of two cool so then from there we can do a class name equals styles dot recent transaction list that's the last one that we needed now for this part the inner div that we have here it's gonna be the class name of styles dot transaction card okay see i think i spelled this wrong transaction card there we go no more squiggly and within that div we have a couple of p tags that i would like to write we're gonna have the transaction dot attributes and we get the from address here so we can see who it's from and then we have another one for two with same thing except instead of the from address we're gonna get the two address there's gonna be one more p tag here that one's gonna have a hash okay and then underneath that hash will have an a tag and for the attributes of the a tag we'll have which is underscore blink the real equals no opener no refer and then we have an href here which is the actual link itself which is going to be https colon forward slash forward slash rinkeby dot ether scan actually dot io slash tx slash same thing as before except instead in this template literal we're going to have a transaction again here transaction dot attributes and get that hash which will lead to the ether scan link okay and in between we'll have the nice transaction hash again so do transaction.attributes.hash once more but this time i'm going to format it with a slice and just do 0 to 10. then over here line 41 for me i'm going to have another p tag it's going to say gas transaction dot attribute dot gas okay i'll hit save now let's take a look at my app any issues on this cool and i just want to make sure console log recent transactions because it shouldn't be anything right now but let's make a purchase and see if all the updates we added are in there so again zero that makes sense man i'm actually really admiring the project we made today super proud of all the work that went into it yeah so let's test this out so i want to hit refresh one more time and now let's see if it all works out so i want a skull okay we got the metamask notification loading in this one's for the skull confirm oh look at that confirmed transaction six transactions confirmed okay that's not it should be in user let's see anything update here my coins didn't go down let's just give it a second maybe what i do want to see is the recent transaction so i did some testing it looks like recent transactions isn't showing up also i got an error that it was expecting an array so that tells me if we go into our morass database that this was originally searching for a string so i'm just going to delete a column let's just do remove and what i want to show you is how to fix it is by adding a new column and we put this as string before but this actually should be an array not a pointer so now it's an array so then we can make it owned assets so let's add that as a column so instead of expecting a string he'll expect that and the next thing i want to fix is when i was looking at my context one thing was interesting we never actually called listen to updates is something that should happen in our use effect so i'm going to come up to this use effect right here and underneath get balance i'm going to do an await listen to updates so now when i call it this should work so let's do this and yeah my last transaction went through but it didn't get stored so i got scammed i lost money on my own marketplace but now to prevent that issue on your code we fixed it up so this should work now so let's go ahead and try it so let's get this brick okay so let's go confirm and what we can do next is inspect and again these transactions usually take some time oh finally we can finally see that alert you successfully purchased this asset okay we got running yep and that's our receipt we saw the array see if recent transactions is here okay so no recent transactions yet but let's check our database again for owned assets we finally saw the alert message which that's a good sign hey look at that so underneath this account for lance i actually was able to buy a skull so now we can store any of the users purchases which is a good sign my next goal is to get this recent transactions working it looks like we didn't get our recent transaction yet and i'm still seeing this enable web3 error so i think let me think i think i might have an idea of how it works so let's go back to our amazon context and just like we did with get balance maybe we should add a listen to updates here okay and i'm gonna hit save try to put listen to updates at the top above these effects so that it can run so let's go up to here i see we have got balance i'm also going to put this above that i'm gonna hit save all right cool so we only have two tokens left i'm gonna go ahead and get a couple more i should still have some ease some eath i'm gonna go buy okay hit confirm there we go it's finally loaded oops open up the console and we there we go now we're rich we can go get more tokens so let's see one thing i want to do actually is let's look at listen to updates again oh wait no that's at the top now and let's do console log just to know it's running all right just to know it's listening so let me show this i already have a console log for running still listening because that's more accurate let me do a refresh here okay so it looks like we got 12 coins now that we are rich let's get another nft or digital asset let's get the nokia this time and hopefully we can see our recent transaction so clicked on the nokia let metamask do its thing finally loaded so now let's go and hit confirm let's claim my beautiful nokia and let's see if i can see it so there you go okay transaction confirmed there's my alert that's a good sign hit okay and now i hit x alright so after we hit save what i want to do next is i'm realizing that if we double check the owned assets in the morales db what we want to do is delete that because it shouldn't be a string it should actually be a column so let's go ahead and delete a column and select owned assets okay so i'm going to remove column and then i'm going to add a new column and remember i put this as a string by default let's make it an array owned assets and that's probably why we don't see any of our assets that we buy being saved to the user because it should be an array so i want to add a column owned assets there we go and again if you name it owned assets you got to double check in the card or in the amazon context where we make the buy assets function and see so let's see by assets and if i put in the between takes i put an s here just to make sure that it matches with the column so we should be good to go so once that's done i'm going gonna head back to featured to main and now all that's left is to just try and see if everything works fingers crossed so let's give it a try all right so when i head over to my page and also i'm just gonna zoom out because when i know when the css comes my laptop's pretty small oops got that part out so i'm going to give this a try where we can see the recent transaction so i'm going to hit refresh cool so i'm logged in i have four coins let's go ahead and buy a skull this whole time we were buying assets and nothing was getting saved but now that we updated that we should see it in our db and we should see a nice recent transaction at the bottom i'm gonna go ahead and click this hey we got the metamask notification to sign in that's always a good sign i'm just gonna let it load for a bit and remember this is just to transfer tokens right we're taking how many amazon coins we have and sending it to the smart contract then taking a record of the asset that we bought so i'm going to hit find spec element let's take a look at any console logs i'm running oh okay so if you see that parse object that is coming from the recent transactions websocket to morales failed oops okay there we go my internet went out a bit but you successfully purchased this asset they stole my money but in return i get my beautiful digital asset let's see if i can prove it by refreshing hey look at that so i'm logged in as lance and if you look in the owned assets i have the skull in there so that's awesome guys we have that working but the thing that i really care about is at the below let's see if it's there hey we got recent transactions so this is becoming more and more like a marketplace i want to encourage you guys to take this code and make it your own because you don't have to make amazon and follow along you can make your own unique marketplace put in your own assets set up your own smart contract with your unique tokens or coins and deploy it and put that in your portfolio because that is killer so with that said this is all pretty cool but what if we take it one more step further what if i click this transaction history and you could see all the assets that user bought so i think that would be pretty cool so let's work on that all right guys one thing before we get started in the next part i'm working on a laptop so the screen is a little small so if you notice that your recent transactions just go up one and zoom out a little bit and there you go nice and clean so if you're working on a bigger screen it might just look a little bit different but other than that this is the amazon page so next thing i want to do is let's finally finish the amazon context there's only one more function i believe that we need to add so let's go ahead and do that so to finish our amazon context i'm going to make another state here and let's clean this up a bit there we go you guys can see that cool oops that's too zoomed in for me so at the top here i'm gonna say const bracket owned items and then we're gonna do a set own items okay you can set that to a use state and we'll initialize it with an empty array and like i said we have one more function to do and that last function is going to be get owned assets so i'm going to find everything down here and i can just squeeze it in at line 182 for me so on line 182 i'm going to write get owned assets and make sure it's asynchronous just like everything else make an arrow function and let's add that try catch and for the catch it's just going to be error and then console.log error okay so console.log here cool now what's important is in this try block to get the owned assets i'm going to make use of the user data that we queried so if i do an if user data oops i'm just ensuring that we are querying the user and once it is there i'm gonna go check if we are logged in by doing bracket zero because bracket zero contains the currently logged in account so if i do that condition inside the if statement i can make use of the set owned items and the cool thing about states is you can have access to the previous items by saying prep items and this can be named everything you don't have to say pro items this could be called previous this could be called whatever you want so i'm going to do previous items and an arrow function here and what you can do is do a dot dot dot using the spread operator to get the previous items and then comma user data bracket zero dot attributes dot owned assets all right remember make sure it has the s because that should match up the column on our database let's see what's going on declaration expected oh i don't want this doesn't need to be here this actually should be the array because on items is an array okay take this out there we go so basically what's happening here is if i didn't use the spread opera here to deconstruct the prep items then i'm just replacing my owned items with the latest one you don't want to do that you want to add it on top of it so that's why we're setting up this way other than that's the function so can you guys guess where i'm going to use this function exactly that's going to be in the use effect so wherever in the user effect where we're getting the assets we should also be getting on items so at the top here i'm going to say get owned assets and make sure you add in the weight before it cool i'm gonna hit save and once that's done let's add it to our provider to make it global and then we can access it for our final component so i'm gonna add owned items make sure you add a comma here do is just add get on items and we actually don't need the function here because it's already being used in the use effect so i'm gonna hit save and guys guess what we finished the amazon context all right all right guys like i said let's make a awesome transaction history page and to do that we're gonna have to go and create the page file so i'm going to go open up pages and within here i'm just going to say new file and then we can say history.js awesome so we have history.js we can set it up similar to a component like so and let's make this a little bit bigger cool so what i want to do next is let's import anything we're going to need for this page which is just going to be our use context because remember earlier we set up owned items we're going to be using it here pretty soon we got use contacts let's import the sidebar because if you're thinking about it the history page should still contain the sidebar so i'm going to do a sidebar from dot dots forward slash components slash sidebar okay import the header as well because that also should still be there components slash oops two m's header hey okay so from here oops don't want to add a comma there actually and then we can also get our contacts some say amazon contacts boom that's all the imports i believe besides a component that we're going to create later on so let's go ahead and use our contacts i'm going to say object equals use context pass in amazon and all we're pulling for history page is owned items cool all right from here i'm gonna go set up the jsx now it's pretty minimal compared to what we were doing earlier guys clean it up and just do a classname equals styles.container all right so the cool part is we can just implement the sidebar here already and then in that next div we're going to make a main div so i'll say div class name styles dot main in that main we're also going to have the component and in the very next line let's add up a table container and similar to how we have the cards on the main component i want to make essentially a container that has all the recent transactions so to set that up i want to make a div called table container that was that table container which in turn is going to have the owned items all right so we're going to do that means we're going to do a little conditional rendering so if owned items exist if that user has owned items tied to their account we can do a div class name and say dot page title oops top page and don't forget to close it guys so i'm gonna close it like this keep it in the same line and if there is own items this page will list out some text that says purchase history cool so now we're gonna set up the other condition where if i put a div here let's see opening so if owned items doesn't exist then we can have a text field that says no purchase history okay and this is actually going to have the same title page title close the div and exactly what i said earlier no purchase history so let's see let's take out that extra parentheses there and if i do control b now you guys can see it a lot better so this is what we have we have the container div the sidebar the main the table container and our titles cool one thing i'll do next is underneath here let's make a div for the actual transactions that we had so it's going to be classname styles.transactions and i'm going to have owned items all right this is exactly where we're going to map through each item and for every item i want to create a transaction component it's going to be similar to like the card component you could look at it like that so i'm passing in two parameters item and index because if you guys didn't know in the map function there's a second parameter that you can name i usually name index where it goes from zero to one so if i create a new component that will have a key of zero if i create another component that will have a key of one so that's why we use it here because whenever you're rendering props with react they should have a unique key so i'm not going to forget the return statement this time and let's do return and this component doesn't exist but it's going to be transaction okay cool so i'm not going to hit save because if i do i'm going to get a whole bunch of errors my computer is going to be mad but let's make them happy by making the styles object so at the top here let's set it up so i'm going to write const styles equals that object and we'll say container and let's give the height make it full we can also make the width full as well give it a flex property and this is the background color that i want to use it's pretty much the same it's going to be hashtag fff okay and that's it for the container and then for the main what we could do is give it a width full as well and also full height with flex the flex property you want to add to this is flex column with mt50 pixels all right and then from there we can do the table container which is going to have the full width full height flex it's also flex column and let's give it a p of 100 pixels and just a nice justify dash center all right then we can do page title which is simply just going to have text l font dash bold text dash left empty bracket 50 pixel and let's also add a margin bottom of 30 pixels cool last one is just going to be the transactions div which will have a flex and give it a gap of 50 pixels we can do flex dash row flex dash wrap and add a comma here cool what i'm going to do next is comment out line 32 for now because we know that transaction component doesn't exist and let's build out that transaction component next this is going to be our final component guys are you excited let's get started so i'm gonna hit save and there we go all right guys so now that we made the history page there's only one more component left and if you look down here it's the transaction so i'm gonna go into components make a new file and let's call it transaction.js cool so now i can do control b and now i can see a little bit more clearly so let's go ahead and import anything we might need but first i'm going to set up the component and the only thing that we're going to need here for in terms of hooks is just use context just like usual awesome so we got use context let's also import link and it's still doing this thing right here so i'm going to fix it up so we got link and we also need image from next all right so we grab the image from next and link next up we're going to be using moment to format the dates so it can look really pretty once it's on there so import moment from moment we installed a lot of packages earlier double check your package.json if you have it next let's get our context so i'm saying import amazon context and there we go so for the history.js i'm going to step back in here for a second the things i want to pass in are a key and we'll make use of that index parameter i set up and we're gonna pass an item as as a prop so for passing that as a prop we can go ahead in our transaction component and destructure that here so i'm gonna say item and i'm gonna console that later to show you guys what we need to do for that but for now let's see i'll save this and let's also save this okay it's going to refresh real quick all right we also have to import transactions import transaction from the component there we go and we're not going to see any transaction components because there isn't any owned items just yet so it looks like our transactions aren't showing up so let's try to make it so more consistent so to make it more consistent what i want to do is do an owned items and all right because if it exists then we should be mapping through it and then in our amazon context let's see let's go to our function and i'm contacting here and sometimes it doesn't show up it says it's undefined because i think it's because we're trying to set the state before it even exists so just to make sure what i want to do is use your data bracket zero dot attribute dot owned assets here because we only want to set the state if that exists so if i save that here okay there we go now this should be a little bit more consistent and one more thing i need to do is just temporarily i'm consoling the item but i'm going to map through it because item if you saw the console log is just an array that contains the owned asset so we actually have to map through so i'll make empty fragment here because there's no real parent div and let's just do an item dot map and for every asset also let's make use of the index and let's see for every asset let's just return an h1 and this all this h1 is going to have is just the asset name just to see if it's there so asset name is what it should be so i'm going to hit save let's make this guy a little bigger rather even full screen it so we can see a lot better and now if i hit transaction history there it is there's the skull so we can finally see it over there i want to make sure we can see all of it so let's add a robocat to the list and then if i buy this it should be updating our transaction it's taking a lot of load awesome i hit confirm and i can also check this on my morales db i'll hit refresh on that and oh yeah because i didn't get the transaction complete there you go and you also got the notification on the dashboard which is pretty cool you saw that guys it's updated so let's refresh and we got the alert here now it's purchased and now i'm broke i don't have any more amazon but we'll get more in a bit so let's see if i hit refresh now we go to owned asset i should have skull and robocat let's go so we have two things there and now what we should see in transaction history is skull and robocat let's see updates hit refresh and sometimes it takes a second to load but now i'm not seeing the release there it is there's skull and robocat so let's finish out the transaction now all right guys so after a bit of testing one thing i realized is we should move this promise around where instead of get owned assets we call first we're gonna do await get owned assets after this okay so let's save that cool and as you can see we can still see our skull and robodog let's go ahead and finish out the front end so i'm going to go back to transaction.js and we should also be using our context so what i'm going to do is come to the top here we don't need this console.log anymore so instead we can do const and let me make this bigger for you guys cool we can do const username from use contacts and pass in amazon all right we're doing this because later on i want to be able to have that transaction history just like you see in the real amazon of all the assets we bought so there we go we've started it off right over here but the next thing instead of just this h1 we should get the rest of the jsx in so we're going to do div alright this one will have our class name of container and let's also put in the key in here for index make use of that and from there let's do another div inside of that and this one will be styles.top styles.top then we're going to do a class name and the div inside this doesn't need a class name it's just going to have some css of flex oops it's actually quotes that's why flex w full gap dash 80 pixels and then within that we'll have another one with styles dot top header text okay and again this is where we can start designing that transaction history like it is on regular amazon we're gonna do order placed and just insert a nice line break here and uh one thing that i forgot to mention it like we're using moment here to format the dates in a really nice way and we actually have the date built into the assets itself we just have to format it so i'm going to do moment asset dot purchase date and then you can do dot format and this is how i want it we can do quotes here oops quotes here and we can do m for the month the o and this for the year nice okay cool i'm really liking that so let's put this over here and in the next line it's gonna be a sibling of that div it's gonna be class name styles dot top header text all right it's gonna be the same one as earlier right except this time the title for this will be total and vr you guys should start to notice a pattern of how i'm forming this and this one is just going to have the asset price like how much did i buy that asset for i'd love to show that in the history as well so we'll do ac because we're using amazon coins and we're going gonna do something similar again div class name styles dot top header text again here we'll have ship two right because on amazon you can see who it was sent to and we should put the user here which is why we imported it with our contacts so you can put username oh yeah if i save we'll see an error because there is no styles yet okay so let me be closing dave closing div and now the main thing is going to be the content of it so the container will actually also be called content so styles dot content okay and within there we'll have another div for the date so styles dot date and we can say bot on we also want to see when it was bought we can format it with moment and asset dot purchase date and let's give it a different kind of format still with the four m's but just no year that's the only difference between the last one okay so let's be closing div then we should show the item that we got which would be really cool and to show the item that we got let's make a container for it and i'll do styles.item here we'll make use of that image i imported let's make itself close awesome and then we can do a class name give it a styling of object cover the src is actually stored on here as well already so we can just say asset asset.src the alt will just be the item and the height we can give it the same as the cart height the same as the width which will also be a hundred okay cool so after the image i want to have the name of the item to describe it so we'll have another div here that's just gonna have the name of name container so styles that name container okay then we'll do class name styles dot item name here we'll have asset dot name all right in the next line we have a couple more divs to make which is this one's gonna be another div and this one doesn't have a name but it has some css already in it so it's gonna be flex row items center justify dash center and a gap dash four guys got that cool okay and what i want here is a buy again feature which amazon has so we'll have styles dot by again button and then we'll just have buy it again all right okay and then we'll have a link that has href we'll do a template literal here to put asset that ether scan links so that's what we're linking here for the a tag then we'll do a target equal to oops not curly brackets there target underscore blank then we'll hit the rel equals no opener oh no opener and inside would just be another div with the class name styles dot ether scan button not link button so that we can see the transaction history of it okay cool so that's a tag link div div div div awesome and now let's get rid of this error by actually putting our styles object okay it's one of the last few styles we're going to have okay it's going to be one of the last few styles we're going to have so i can say cons styles equals container w minus bracket 40 percent flex column we'll give it a nice border with this d60 79 right let me do alt c before it gets too long then we can do a border dash 2 rounded lg and a shadow large and thank you guys i see you guys telling me that it's container i hear you don't worry container and we'll do top so for top we'll do a flex with full let's give it a height of 80 pixels and for the background it can be this color right here f1 f and the p can be 20 pixels all right so for pr guys let's also make this 80 pixel and just add a gap and that's going to be it for top all right we still have top header text to do top header text all it's going to have is a text large text left flex property and items dash center so that's it for top header text after top header text let's do content right then in content let's have a flex dash column h dash bracket 400 pixels and we'll have a gap dash 20 pixels and we'll have a p of c bracket content 20 pixels cool and the last thing we'll add for this one is going to be flex one and so that's content then we have date for date will be just text and let's make it oh we can also make the font the bold here then we can do item and that one can have a flex property of flex row give it a gap of 20 pixels and make sure the width is full and that will be your item div next i want to look at name container which will just be flex column then we can justify and don't forget to put the backticks around okay cool so let me finish this word off justify end for name container all right then we have the item name which will be text mg font bold make it rounded full then we can do ap dash 10 pixels here 10 pixels okay next we have a header of 40 pixels and let's see for width i think we should do 20 pixels and cursor dash pointer so i can hover over it and see the pointer okay so for text i have this color which is just going to be three a two eight zero two okay for the item name and what i want to add next is a text center mb dash bracket 5 pixels and empty 10 pixels all right then we have the buy again button and let's style that as well so for the buy again button so that's by again button oops i mixed up the item name with the buy again button so to see text font bold rounded full p10 h okay i see so we want to do is cut this part up and we can just do a flex dash 10 pixels yeah it looks really funny so there we go that's it for item name then button again is gonna have that really long one but we're missing some stuff at the beginning which should just be a background color so if that's bg bracket hashtag fd71 and then close it off with this bracket here so that's the background we also need a font bold for that yeah so this one is text mg from bold flex ml bracket 10 pixels and this is the buy gun button here so take a moment to get that done then we can do the ether scan button this one i know is just going to be font dash bold rounded h40 pixels w dash bracket 150 pixels and we have cursor dash pointer text can be this color of bracket hashtag 3a2802 okay i think we should do a text center here and border border then we got border dash bracket fd713 two more things well three more things we need flex justify center and we can do and items dash center whew that was a lot of styling but there we go that should be the transactions components front end if i hit save hopefully i don't get any more errors oh okay awesome so it looks pretty crazy but if i zoom out let's go look how clean that is guys so this looks exactly like the text from amazon and we can fix it up by adding something right here i know how to make this even better what if we did a text header and the text and let's give it a different styling so if i do top top header and text let's see if i can fix it up by doing a text large flicks items dash center flex row p 30 pixels and put the comma oops see if that helps so i think i figured out the issue guys what we're gonna need to do is head over back here for text end this should just be text top header text i realize i'm not really using it and that the real issue is that there's a little typo here so if i do adpx hit save and let's freaking go that's the purchase history that i'm trying to see so that's gonna be it for the component i think we can top it off by just running through and let's buy one more asset and get coins to just wrap this whole thing up so let's buy some coins we can get about five i'll hit buy okay meta mask is loading it's gonna take a couple seconds okay there it is there's ours we need our signatures so we can mint is the tokens that we want i'll hit confirm here's our nice hash loading screen and again you can always change this if you want with your react spinners now we just have to wait for the transaction confirmation there it is you can see that it's confirmed there's our transaction receipt if i click it it goes to ether scan like how cool is that and then if i x this out our coins is updated and you can look in your morales db to check if it actually went through so now we should have three items what that tells me is if i go to my transaction history page i should see three items so i'm gonna give a quick refresh to my morales db see if it updated this usually takes a couple minutes like i mentioned before let's see tokens oh waiting okay go to user and if i double check this see if it's loaded in we got skull we got our robo cat and is it so far ah there it is updated oh that's right we just got coins we need to actually buy something so now i'm gonna ask you guys what do you want to buy i'm thinking we can do this adidas metaverse one right and as you can see our recent transactions working still too which is a good sign so now i'm actually gonna purchase a digital asset that i created let this load let's hit confirm on there and now we just wait for the blockchain to verify and let us know that we have the assets done okay so after i hit confirm we should be seeing an alert pretty soon okay there's google chrome letting us know we got it hey you successfully purchased this asset that's what we were waiting for and now we should see that was the recent transaction cool now we can check amara's db and if i refresh this let's find out if it got added to my own assets robocat and adidas metaverse awesome so now i own three of those things and now let's head over to transaction history and it's going to take a second to load here as well and we also lost the correct amount of amazon coins and there it is nice so we can actually purchase histories this is awesome and that has been the bill guys i hope you guys enjoyed all we need to do now is deploy this to netapp and make this live so now that we have our site let's update our cli by doing netlify deploy and if you guys are sure it's all good we can do a netlify deploy prod okay and once that's done we just wait for it to load so i'm coming over to netlify and if you remember what we did when we set it up earlier we set it up so that if you do the netlify cli tool you can just do a git push and it will automatically update your site the only difference that i did is i renamed it to amazon clone blockchain and now i just have to wait for this to finish and we should be good to go all right so as we're building the cool thing about this is in the deploy logs you can actually catch a bunch of errors using the cli tools so if you look i have an error because of the used context in my history page so that tells me i just have to go to history and make sure that it's inside our function so let's fix our history it wants us to make this capital so i'll say const history and then here we'll say cons history as well and anytime you're importing that it should be that as well and i think we can do the same for the name so i'll say history okay so once you make those changes we can upload again so i'm just going to update the github add dot git status just to make sure and then we can just commit it all right fixed history page all right so when we push netlify will take it over and start to attempt to redeploy okay we got building all right so no errors so far now it's building the function so that's a good sign we're almost done with the deployment so build script success doesn't look like there's any issues and we can make use of net nfi's deploy preview so i'm gonna click preview and don't worry about this if it looks funny if i click connect wallet then click meta mask and try to log in there we go morales authentication signature request let's go ahead and hit sign and if it works that's a good sign hey when i log in there's my assets there's my account and the styling is fixed and with that said our site is now live isn't that insane so all you got to do is take this very link and you can send it to your friends and show them and have them log in and they can now connect their accounts and also buy any of the assets that you guys make so how cool is that i'm so excited for this build i hope you guys enjoyed the video and i'll see you guys in the next one what's up guys lance absolutely crushed that build if you enjoyed it make sure you smash that like button he's exhausted i can see him over here and he's a broken man he's a shell of a man that he once used to be so if not for me for him break that like button turn it white turn it blue do whatever you need to do with that said the last and most important thing is go and sign up with buildspace because this build amazon that you just did if you connect your wallet there you're going to be able to verify that you've done this and they're going to give you an nft that goes along with it build space is also an incredible community a web 3 builders for building the future and you don't want to miss out and they're also amazing job opportunity and all of it is completely free so make sure you go ahead sign up for it that was a lot of fun that was long but you finished it and you finished it strong so much love to you this is qazi that was lance i love your beautiful face we love your beautiful face as always we'll see you in the next video
