With timestamps:

00:00 - what's the place developers go to when
00:02 - they have a problem and they need other
00:03 - people to sympathize you thought stack
00:05 - overflow think again we go to reddit
00:07 - that's a place where we go and console
00:10 - with others learn about life and a lot
00:12 - of us use reddit on a regular basis now
00:14 - in this video we're going to be building
00:17 - reddit by ourselves with our own bare
00:20 - hands and building it from scratch this
00:22 - reddit is going to be probably the best
00:24 - reddit that exists on the internet first
00:26 - of all the front end is absolutely
00:28 - immaculate it's beautiful and you also
00:29 - have a lot of functionality for example
00:31 - you can log in with google
00:32 - authentication inside of this reddit
00:34 - you'll be able to create a new post
00:36 - you'll be able to see all the posts that
00:38 - are already there you'll be able to
00:40 - comment on a post you'll be able to
00:42 - upvote or down vote a post all right and
00:45 - all of this we're also going to be using
00:48 - a really nice tech stack so the tech
00:50 - stack for this build is going to be
00:52 - next.js we're going to be using tailwind
00:54 - css for styling and we're going to be
00:56 - actually using super bass for the back
00:59 - end this was something that was actually
01:01 - really interesting to me this tech stack
01:02 - especially like using super bass for the
01:04 - back end that's something i wanted to do
01:06 - for a while and in this video we'll get
01:07 - to do that and build it now if you're
01:09 - ready to start coding this bad boy up
01:12 - make sure to smash that like button so
01:14 - this video just goes out to as many
01:15 - people as possible by the way if you
01:17 - don't know me i'm rafa qazi the ceo and
01:19 - founder of clever programmer i've been
01:21 - coding for nearly a decade and i've
01:23 - helped millions of people learn how to
01:24 - code with that said let's jump right
01:27 - into it all right let's go ahead and
01:29 - demo this app now so i'm gonna go ahead
01:31 - and hit sign in with google
01:34 - i'm gonna choose my email
01:36 - and once i'm in
01:38 - look at this how beautiful this is i
01:41 - have my header
01:43 - when i hover over all of these icons in
01:45 - my header
01:46 - they look absolutely gorgeous i can go
01:49 - into the search and type
01:51 - and then when i scroll down here
01:54 - i have all of my posts
01:57 - and i can go into any of them or if i
01:59 - want i can actually create a new post as
02:01 - well so let's say we're going to dispose
02:02 - this is a new post you know our free
02:04 - javascript course so let's go into this
02:05 - post right here and you can see we even
02:08 - have a thread comments so i could
02:10 - actually say this is
02:12 - awesome
02:13 - okay let's hit comment you get a nice
02:16 - little loading screen and now this is
02:17 - awesome is there so this is actually
02:19 - being stored in our back end and then
02:21 - showing up on our front end and it's
02:23 - super fast as you can see
02:25 - so now let's go ahead
02:27 - and go back to the home page or you can
02:29 - just hit the reddit logo that will bring
02:30 - you back
02:31 - and here i'm gonna go ahead and let's
02:33 - say i really like a post right one of
02:36 - these posts right here how to build a
02:37 - reddit clone with nexus i can go ahead
02:39 - and upvote it
02:41 - and uh you saw that it upvoted it and
02:44 - let's say replit is cool let's upvote it
02:46 - or maybe best dev community let's down
02:48 - vote and boom look at that
02:51 - and there's something really freaking
02:53 - cool that's happening that i really want
02:54 - to show you
02:56 - and we're using something called swr
02:58 - hooks in react and they are so powerful
03:02 - than just the regular way you fetch data
03:05 - and i'll show you them if you've never
03:06 - experienced them before but what's
03:07 - amazing is like we're pulling all of
03:09 - this from supabase and we're not using
03:12 - its real-time functionality so think
03:14 - about it how come when i hit
03:16 - up
03:17 - after a second or two it automatically
03:19 - turns it to a three how's that happening
03:21 - it's like almost doing it
03:23 - real time however it's a postgres
03:25 - database on superbase and we're almost
03:29 - getting this real-time experience of
03:30 - when i down vote or upvote things change
03:33 - things change dynamically
03:35 - so there's some magic that we're doing
03:37 - on client side
03:38 - that i'm really excited for you to see
03:40 - and how we're doing like revalidation
03:42 - and caching and it's all happening with
03:45 - one line of code so it's nothing
03:47 - actually complicated either and
03:50 - just so you can have a roadmap for this
03:51 - build and how we're gonna go through
03:53 - this is
03:54 - the header
03:56 - and banner
03:57 - this stuff we make so much at clever
04:00 - programmer and if you ever watch any of
04:02 - my videos that we're not going to be
04:04 - making the header together the banner or
04:08 - this guy or this guy we're going to be
04:10 - doing the interesting parts together in
04:12 - this build so
04:13 - i'm going to be just giving you giving
04:15 - away the header i'm going to be giving
04:16 - you the about you know component the
04:19 - banner component i'll just be giving
04:21 - away all of these components to you
04:23 - and then we're going to actually start
04:25 - from the more interesting parts of
04:26 - getting this set up and then getting the
04:28 - database to start working and then being
04:30 - able to add comments and liking posts
04:32 - and disliking posts and authenticating
04:34 - and all of that good stuff okay so we're
04:36 - going to start from there now if you
04:38 - want to actually follow along
04:41 - and you want access to the code and to
04:42 - build on top of it you're going to need
04:44 - to fork this reple
04:46 - and it's going to be at the link
04:47 - join.replay.com
04:50 - cp
04:51 - dash reddit okay so make sure you click
04:55 - that once you go to that link it'll
04:57 - bring you to this page essentially which
05:00 - is going to be a reddit starter
05:03 - right here okay so i'm going to be
05:04 - sending you to the reddit starter
05:07 - why because the registrar will have the
05:09 - header component the banner component
05:11 - the about js component
05:14 - yeah it'll essentially have all of the
05:16 - components that you need
05:18 - and all of the styling
05:20 - it'll have nexjs template already ready
05:23 - to go it'll also have tailwind
05:25 - temp ready to go
05:27 - and it'll have typescript enabled even
05:29 - though we won't really be using
05:30 - typescript but like all of that will
05:32 - come out of the box and be ready to go
05:34 - if we just fork this and build on top of
05:36 - this that's what's really nice about
05:38 - repple and replit because it allows you
05:40 - to do that
05:41 - now if you want to do this why i say
05:43 - fork this in all caps is make sure you
05:45 - fork it
05:47 - otherwise you won't be able to run your
05:48 - own code or make your own changes so
05:50 - just make sure you go ahead and say fork
05:52 - rupple
05:53 - and once you fork it
05:55 - you can actually then get started
05:58 - coating on it now that you fork this i
06:01 - am going to simply walk you through what
06:03 - you're basically looking at here here's
06:05 - what i want you to do on the right hand
06:07 - side choose shell
06:10 - and all i want you to do right now is
06:12 - just do yarn dev
06:13 - so
06:14 - this is going to be really cool because
06:16 - a bunch of the app is already up and
06:18 - running and then hit that button right
06:20 - there so it opens your app up in a whole
06:22 - new tab so i'm going to hit that
06:24 - and let's wait for this to render and
06:27 - reload
06:28 - there we go
06:30 - so this should already be up and running
06:33 - for you just like i said
06:34 - we've already given you the header
06:37 - we have given you the banner
06:39 - we've given you the banners like this
06:41 - whole thing we're giving you this about
06:43 - component
06:45 - and then this create a new post
06:46 - component
06:47 - okay so if we go to our app right now
06:51 - and basically what i'm going to do is
06:52 - i'm just going to close this for now
06:55 - and i just opened up a new chrome tab
06:58 - here like literally a new chrome window
07:01 - so i could just put that here so i could
07:02 - see my app
07:04 - the entire time i'm working on it okay
07:07 - and let's just take a look at what
07:09 - you've been provided with already okay
07:11 - so on the left hand side
07:13 - i have
07:14 - components and in components
07:17 - you're given a couple of components so
07:20 - for example you're given a header
07:21 - component
07:23 - and that's that guy right there
07:25 - okay you're given a feed component
07:28 - which essentially will show
07:31 - this gives you the ability to actually
07:33 - create a new post
07:35 - and
07:36 - when
07:37 - we
07:38 - retrieve the post from our database in
07:41 - the feed is where all of the other posts
07:43 - will also show up okay so that's what's
07:45 - this one is called the feed
07:47 - the community component page that you
07:50 - have this has a couple of components
07:51 - like the about component so
07:54 - the about component is this guy right
07:57 - over here on the right hand side
07:59 - right with the join button at the bottom
08:02 - and then of course in the community is
08:03 - also the banner which is that guy right
08:05 - there okay so now just to play around
08:08 - with these and just to get comfortable
08:10 - in this new project i'm going to show
08:12 - you
08:13 - where you can go and change things so in
08:15 - pages just go into index.tsx and by the
08:18 - way don't let tsx freak you out it's
08:21 - this app is typescript enabled however
08:24 - you can literally just write regular
08:26 - javascript code and it works totally
08:28 - fine so
08:29 - we're
08:30 - not really going to be using it like a
08:32 - typescript file we're essentially just
08:33 - going to be using javascript code in
08:35 - here okay but i'll explain why we chose
08:38 - a typescript template as well so give me
08:40 - one second
08:41 - but
08:42 - if you're in here you have header
08:45 - just go ahead and comment it out okay or
08:47 - just delete it and watch what happens if
08:49 - i delete header just so you can get a
08:51 - feel for the app
08:52 - look at that that is gone completely
08:56 - okay now bring it back
08:59 - and it's placed there beautifully okay
09:01 - when you hover it highlights all of that
09:03 - functionality
09:04 - if you're like hey what's the banner
09:05 - exactly we'll just comment it out or
09:08 - delete it and watch what happens the
09:10 - whole banner is gone
09:11 - okay
09:12 - if you're like hey what's this create
09:14 - post component
09:16 - i imagine you you might have a feeling
09:18 - that it's this just go ahead and test it
09:20 - out delete this and watch what happens
09:22 - and when i delete it it's gone
09:25 - all right so
09:26 - those are the components if i remove
09:28 - about component and i go full screen
09:30 - you'll see this about component
09:32 - will vanish
09:34 - okay let's hit command z and bring that
09:36 - back or control z for on windows to undo
09:39 - and there we go our about component is
09:41 - back
09:42 - so that's a little bit about
09:45 - how the app is structured right now
09:47 - we've given you some of the front end
09:48 - that way we can get to the more
09:50 - interesting parts of the code
09:52 - and i just want to familiarize you with
09:53 - everything you have so you have the down
09:55 - vote icon the upvote icon so that's
09:57 - going to be in the comment why it's in
09:59 - the comment
10:00 - is because
10:01 - it's being used in a lot of different
10:03 - pages and places so you'll use upvote
10:06 - and download pretty much throughout the
10:07 - entire app whereas the banner
10:09 - is really only used on the front page
10:12 - whoops
10:14 - okay didn't mean to move community we
10:15 - just moved community back in these are
10:17 - really the
10:19 - four folders but really they're like
10:20 - think of it like three or four
10:22 - components that we've given you so
10:24 - that's already there in assets you have
10:27 - some icons and some loading animations
10:29 - so those are also handed over to you and
10:32 - let me see the other things that you
10:34 - have to know about are just a few other
10:37 - things so for example in styles for
10:39 - tailwind css we've given you this we've
10:42 - made all of the text white for you
10:44 - already because every place you're going
10:46 - to type we need you to type white text
10:49 - so boom like that that's white text
10:51 - so that's already white
10:54 - we have set up tailwind tailwind is
10:57 - already installed as well so if you
10:59 - actually look inside of your
11:00 - package.json
11:02 - it already has all the tailwind stuff
11:04 - you need like tailwind css post css and
11:07 - the auto prefixer
11:09 - okay
11:10 - so let's go back so tailwind is
11:12 - installed we have the tailwind config
11:14 - file for you ready to go the post css
11:16 - file ready to go and then typescript is
11:19 - enabled right so this is the ts config
11:22 - and typescript is ready to go so if you
11:24 - wanted to code it up in typescript you
11:26 - can if you don't want to that's totally
11:29 - okay again like i told you
11:31 - we're not really using a lot of the
11:33 - typescript functionality which is
11:35 - typecasting or type checking and all of
11:37 - that
11:38 - but here's where it could be helpful
11:41 - so let's go to index.tsx
11:43 - so in index.tsx page right if you can
11:46 - change it to essentially index.js and
11:48 - your code should
11:50 - pretty much still run
11:51 - fine
11:52 - but the cool thing about typescript that
11:54 - i really like so here's just one
11:56 - typescript thing that you have to know
11:58 - you might be wondering
11:59 - hey what's this home component like why
12:01 - is it
12:02 - why am i why i have to write this this
12:04 - is weird
12:05 - this is the same thing as writing this
12:08 - but in typescript we're just saying that
12:10 - the type of this component is this is a
12:12 - next page and so we can actually import
12:15 - that and say that here so if somebody
12:18 - looks at it who's never really written
12:20 - typescript next code or whatever
12:23 - they could look at it and go oh the type
12:25 - of home is not a regular function home
12:27 - is a next page
12:30 - component like this is something special
12:32 - so they would know right away
12:34 - so it makes your life easier
12:35 - so yeah
12:36 - you can just leave that here you don't
12:38 - really need to remove that okay
12:41 - and then the other benefit of typescript
12:43 - is when you have errors and you're
12:44 - defining something that doesn't really
12:46 - exist
12:47 - it will catch it for you ahead of time
12:50 - what that basically means is
12:53 - you won't have to really worry about
12:55 - running your code and then waiting for
12:58 - the command line to crash and then you
13:00 - finding out what the error is typescript
13:02 - oftentimes will
13:05 - test everything for you already and tell
13:07 - you the errors before runtime that way
13:11 - you can catch the errors a lot faster
13:13 - and then debug them a lot faster so
13:15 - that's another thing that i really like
13:17 - about typescript so that's why we've
13:18 - enabled it in this project okay
13:21 - so that's the overall project those are
13:23 - all the things that you need to know
13:25 - before we continue
13:27 - okay and by this point
13:29 - you should have this much of reddit up
13:32 - and running already which is pretty
13:33 - exciting right because you have a bunch
13:34 - of stuff functioning already next up
13:37 - what we're going to be working on is
13:39 - building out our post component and
13:41 - building out a feed component that can
13:43 - show all of our posts so i'm excited to
13:45 - work with you on that alright so the
13:47 - component now we're gonna work on is our
13:49 - post component and let me tell you what
13:51 - posts will actually look like so this is
13:53 - the final version of the app okay let's
13:56 - actually open it up right here and i'll
13:58 - close it from this
14:00 - okay so this is currently what the post
14:03 - component looks like okay this one right
14:06 - here this is going to be our post js
14:08 - component oops let's make a little error
14:10 - and we'll say post js and this component
14:14 - has a couple of different parts like for
14:16 - example we have our votes
14:19 - we have the info part about the author
14:21 - and everything okay and then we have our
14:25 - actions right here actions right actions
14:28 - this is going to be the info and then
14:30 - this part is like vote
14:32 - so those are going to be kind those are
14:34 - going to be like the sub components so
14:36 - think of these each like a
14:38 - component actions as a component votes
14:41 - as a sub component okay so those are
14:44 - gonna be the sub components of like post
14:47 - now we're gonna make these ones though
14:50 - the ones i'm gonna make myself a little
14:51 - bit smaller so i don't get in the way of
14:53 - anything all right so we're gonna
14:55 - basically
14:56 - make the post component without info
14:59 - actions and vote first so we're gonna
15:00 - not have this first and then
15:03 - we're gonna go ahead and add the sub
15:05 - components
15:06 - and it's gonna look just like this it's
15:09 - gonna look super nice okay so let's get
15:11 - started on that so
15:13 - first things first what i need to do is
15:15 - in my common i need to have
15:19 - a new file and this file over here is
15:21 - going to be called post dot js okay and
15:25 - i'll put myself bottom for now all right
15:28 - so post.js now inside of this file
15:32 - we're gonna start making this post
15:34 - component so let's go ahead and go const
15:37 - post and for now we'll just say a return
15:41 - an h1 that says post
15:43 - export default post
15:45 - and then we need this to show up so the
15:48 - question is where do we have it show up
15:50 - now what we want to do is inside of our
15:52 - feed we want to create a new file this
15:54 - will be index.js
15:57 - and this will be the feed
15:59 - file okay you'll be able to import it by
16:01 - just saying you know slash feed so this
16:03 - is going to be the main file basically
16:05 - and how you should read this
16:07 - so for example like if you're in header
16:09 - right and you're like in header and
16:10 - you're like yeah i see these four
16:11 - components what the hell's going on the
16:13 - way i read this is i go
16:16 - this is actually the header component
16:18 - this is the main header imagine this
16:20 - says header.js this is the actual header
16:22 - component and then these are actually
16:24 - the sub components
16:26 - that are required to finish building
16:29 - this
16:30 - header okay that's really what's
16:31 - happening and i promise you if you go in
16:33 - index you'll see that all of those are
16:35 - being somehow or another used all right
16:38 - so inside of feed this is the actual
16:40 - feed component this is the main
16:41 - component this is a sub-component of
16:44 - feed and you could probably tell that
16:45 - already right because this is just one
16:47 - part of the feed but another part of the
16:49 - feed is going to be all the other posts
16:52 - that are going to be underneath this for
16:54 - example if i go to the final working
16:56 - version of the app and let's hit refresh
16:58 - boom these this is the feed right all of
17:02 - these other posts okay so inside of my
17:05 - index of my feed i need to just make
17:08 - sure that create post and everything is
17:10 - showing up and i want to make sure that
17:12 - my post is
17:13 - showing up the post component i just
17:15 - made so the post component is inside of
17:18 - common why is it inside of comment
17:20 - because there's going to be multiple
17:22 - pages where that post component is shown
17:24 - for example if i go to the final version
17:26 - of the app the post component is showing
17:28 - up here but when i
17:30 - click and go completely inside the post
17:33 - component is also showing up over here
17:36 - so that's why it's we call it uh we put
17:38 - it in common so let's go ahead and
17:41 - import our post component from
17:45 - common post and then the next thing
17:47 - we're going to do is going to be the
17:48 - feed component and we're just going to
17:50 - go ahead and say return post okay so now
17:54 - feed should show essentially one post
17:56 - and now we want to make sure that the
17:58 - feed is showing up on our home page so
18:00 - let's go to pages let's go to
18:03 - indexes.tsx or main main and
18:06 - right underneath create post i want feed
18:09 - to show up it's going to error out
18:10 - obviously because we haven't imported it
18:12 - yet so we're going to say import
18:15 - feed from and we're going to say
18:17 - components
18:18 - slash
18:19 - feed that is it you don't have to say
18:23 - you don't have to even say
18:25 - slash index.js
18:27 - okay that's the cool part about naming
18:29 - it like this we're just getting feed
18:31 - from this right here okay so it reads
18:34 - reads really nicely too let's refresh
18:37 - okay maybe we forgot to export this is a
18:39 - really helpful error message that is
18:41 - showing up here and it says it's
18:43 - possible that you might have mixed up
18:46 - default and named imports or you likely
18:48 - forgot to export your component and
18:50 - that's actually what happened so that's
18:51 - very nice error message so let's go back
18:53 - to our
18:54 - feed
18:55 - index.js and let's go ahead and say
18:57 - export default feed let's refresh and
19:01 - see it now and there we go our post
19:04 - component is showing up now we just got
19:06 - to go ahead and knock it out so i'm
19:08 - going to command click into the post
19:10 - component and if it's ever being buggy
19:12 - or anything you can just kill this
19:15 - right over here
19:16 - and uh you can also actually
19:19 - in here right if you're if it ever dies
19:21 - or crashes you could kill it in the
19:23 - shell and then just like npm dev it
19:26 - again or yarndevit again and it'll start
19:29 - okay cool so now let's go inside of our
19:32 - post component inside of common right we
19:35 - have our post component and we'll
19:37 - actually start building out our post
19:39 - component now so my post component needs
19:41 - a couple of things first of all we need
19:44 - to wrap it in a parent div so then we
19:47 - can actually add multiple now for h1
19:50 - really h1 is gonna be my where my title
19:53 - for the post is gonna go so let's go
19:54 - ahead and you know how to build that
19:58 - let's grab that title let's go back and
20:00 - i'm gonna boom how to build a reddit
20:02 - clone with next.js okay so that's gonna
20:05 - be the title part so we're good there
20:08 - let me make this a little bit bigger and
20:10 - i'll make this a little bit smaller
20:12 - great so we're good with this first
20:15 - title okay so this is gonna be our title
20:17 - and
20:18 - i'll let's give it a class name
20:20 - afterwards okay so title then like the
20:23 - next thing we're going to have is our
20:24 - content so this is where our content is
20:26 - going to go so this is
20:28 - let's see if we have some content here
20:29 - we do this pa i'm going to copy this
20:32 - content and i'm going to paste it there
20:34 - we go that's our content and then
20:37 - we need yeah i mean that's pretty much
20:39 - in terms of like what it will be without
20:42 - any of our other components sub
20:44 - components like the info component i was
20:46 - talking about earlier the action
20:47 - component actions component of the vote
20:49 - component this is pretty much all it's
20:52 - really going to be like now to design it
20:54 - we need to make it look better right so
20:56 - what we need to do is we need to
20:57 - actually add a wrapper around this
20:59 - entire thing okay and we need to
21:01 - actually create a styling for post so
21:02 - let's go ahead and create a styling for
21:04 - post so let's turn it into a div and
21:06 - we'll say div
21:08 - right here okay and the class name we'll
21:10 - give it will be
21:12 - style.post okay and now what we'll have
21:15 - to do is we'll have to actually create
21:17 - that style so we're going to say con
21:19 - style okay and then in here i'm going to
21:22 - create a style for post and so the
21:25 - styling we're going to have for this is
21:26 - going to we're going to make it flex
21:28 - enabled in column will give it a little
21:30 - space and a cursor pointer when you
21:33 - hover over it all right so if i full
21:35 - screen this now starting to look a lot
21:37 - more like an actual post
21:39 - okay now the next thing we need to do is
21:41 - i need to actually add this in a wrapper
21:44 - so i'm going to go ahead and say
21:46 - style.wrapper and let's end this div
21:49 - right here okay and basically what i'm
21:52 - going to do and by the way if it ever is
21:54 - slowing down on you or crashing on you
21:56 - or whatever just wait
21:58 - all right or if you're ever about to
22:00 - refresh and this thing pops up that says
22:03 - changes
22:04 - uh you made may not be saved in that
22:06 - case either wait for that or just
22:08 - command a command c
22:09 - ctrl a ctrl c if you're on windows copy
22:12 - everything that you have in this file
22:13 - then refresh now if you lose any data or
22:16 - anything goes missing you can just
22:18 - command a command v over that
22:20 - meaning like you could just select
22:22 - everything and paste whatever you had
22:23 - copied earlier that way you don't like
22:25 - lose anything so just keep copying once
22:27 - in a while it's a good idea that way you
22:29 - have everything saved okay so i'm gonna
22:31 - go here
22:32 - and i just need to add a wrapper now and
22:35 - create the styling for it so let's go
22:36 - ahead and create the styling for my
22:38 - wrapper and we're going to make it flex
22:40 - enabled we're going to add a little
22:42 - spacing horizontally we're going to make
22:44 - it rounded okay so let's take a look
22:46 - what it looks like right now we're not
22:48 - able to really see it too much let's
22:50 - give a background color okay and we're
22:52 - going to give a background color
22:54 - of like that grayish color so let's go
22:57 - ahead and do that be
22:58 - okay there we go so now we have the
23:00 - little grayish color in the back
23:03 - the next thing i'm gonna do here is
23:05 - we're gonna add a padding to this okay
23:07 - so the padding makes it look a little
23:09 - bit better and then outside of the
23:12 - padding what i want to do is give it a
23:14 - border and then we're going to give it a
23:16 - specific border color and it's going to
23:19 - be three four three five three six
23:21 - for the border color okay so now that's
23:23 - done okay this is how our posts should
23:26 - look like so that part is done now we
23:28 - need to style the title so our title
23:31 - should be highlighted and look different
23:33 - than it is right now so we need to
23:35 - create styling for our title i want to
23:36 - say style dot or sorry class name
23:40 - and we're going to say style.title
23:42 - or you can say post title okay and then
23:45 - we're going to go here i'm going to say
23:46 - post title and for post title what i
23:49 - want to do is go hey give me make sure
23:52 - the text is large so you should see the
23:54 - text become a lot bigger now i want to
23:56 - go font medium and then
23:59 - for the text color
24:01 - i want it to be the specific color over
24:03 - here
24:04 - it says dad love that okay so now our
24:07 - text is there it's popping out a little
24:10 - bit it's a little bit bigger okay and
24:12 - for post content we're gonna give it
24:14 - pretty similar styling to this so i'm
24:16 - gonna say post content for text dom and
24:19 - it says small
24:20 - font will go light
24:22 - and then for color
24:24 - we're going to actually give it the same
24:26 - color
24:27 - except here's what we're going to do i'm
24:29 - going to say
24:30 - slash 80 on this now let's go ahead and
24:34 - add that for post content so we're going
24:35 - to say class name style
24:39 - top post
24:40 - content we'll add that style style oh
24:44 - yeah just kill that bracket because i
24:46 - added a bracket there by mistake and
24:48 - there we go okay so now posts are
24:52 - looking very good but they don't look
24:54 - like posts completely right now the
24:56 - reason for that is because you don't
24:58 - have the vote buttons right
25:00 - you don't have the action buttons at the
25:02 - bottom that show how many comments there
25:03 - are and you don't have this info this
25:05 - was posted by david blah blah so now
25:10 - we're gonna go ahead and make the sub
25:12 - components that are required for this
25:14 - now we're going to go ahead and make the
25:16 - post sub components action info and vote
25:20 - let's start off with vote so i'm going
25:22 - to go ahead inside of my feed folder and
25:25 - inside of the feed we're going to create
25:27 - a new file and it's going to be called
25:29 - vote.js now obviously since this is
25:32 - going to be that i'm going to say vote
25:34 - const and we're going to say return
25:37 - and i'll make an empty let's just make a
25:39 - div here because we know we're going to
25:41 - need a div at some point and then i'm
25:44 - going to go here and just say vote
25:47 - and say export
25:50 - default
25:51 - vote
25:52 - go back to index here import it in here
25:54 - so i'm going to say import
25:56 - vote from
25:58 - vote
25:59 - and then
26:00 - just wrap it in an empty
26:02 - div for now
26:04 - okay and actually maybe instead of feed
26:07 - we should actually give vote to post not
26:10 - feed be just fine for now so let's go
26:13 - inside of our post component inside of
26:15 - common and let's give this guy a vote so
26:18 - let's go import
26:20 - vote from and we'll go out we'll go into
26:24 - feed and we'll go and grab vote
26:27 - import vote from
26:29 - feed
26:30 - vote perfect and then we'll see we'll
26:33 - have vote show up right above the post
26:36 - so let's go right here and i'll go ahead
26:39 - and say vote just leave it like this for
26:42 - now okay so this is what you should be
26:44 - seeing on your screen you should have
26:46 - the word vote pop up
26:48 - let me leave the code like that here for
26:51 - now zoom out just a little bit so it
26:53 - looks more normal perfect now let's go
26:56 - back to vote inside of feed and let's
26:58 - remove this h1 we're gonna replace this
27:02 - with a button instead
27:04 - and in this button we're actually going
27:05 - to put an upvote icon so i'm going to
27:08 - say not that but up vote
27:11 - icon all right so that means we have to
27:14 - import upvote icon
27:16 - from common upvote icon.js so i'm going
27:20 - to say from it will backup we'll go
27:23 - inside of comment and we'll say upvote
27:26 - icon just like that okay so now we have
27:28 - access to it okay and now it's saying
27:31 - hey inside of somewhere you likely
27:34 - forgot to hit export it was possible in
27:37 - our upvote
27:39 - ah okay so it's a name component so see
27:43 - the error also says you might have mixed
27:44 - up defaulted named imports so this is a
27:47 - named import and not a default import
27:50 - what basically means is you have to just
27:52 - put these squigglies around it you're
27:54 - destructuring it from it there we go and
27:57 - now you can actually see the upvote icon
28:01 - is showing up right over here now all we
28:03 - need is another button that just has a
28:06 - down vote icon so i'm going to go copy
28:08 - this
28:09 - let's paste it and let's replace this
28:12 - with down
28:14 - right that's down vote icon let's copy
28:16 - this line here let's paste it and let's
28:20 - change this word as well
28:22 - to
28:22 - down okay and uh let's rename this to
28:27 - downvote icon as well
28:29 - and there you have it we now have upvote
28:31 - icon and we have a downvote icon now the
28:35 - next thing we need is if we go to the
28:37 - final version of the app
28:40 - you can see that each vote that you see
28:43 - here has a number in between the buttons
28:47 - so in between the buttons i need to have
28:49 - my number so i'm going to say i'm going
28:51 - to create a p tag here this p tag will
28:54 - be the number of votes so
28:56 - for now we'll just say 10 minus five
28:59 - let's just write some javascript here
29:00 - and we'll say 10 minus five votes okay
29:03 - uh and this why i'm writing this here
29:06 - and leaving it like this is um because
29:09 - in future this will be upvotes minus
29:12 - down votes and you'll have that number
29:14 - now the five is looking a little bit
29:16 - crooked doesn't look right so we're
29:18 - gonna go ahead and create a styling for
29:22 - for this so let's go ahead and say con
29:25 - style and this style is going to be
29:27 - called votes just like this and for this
29:30 - styling what i'm going to say is
29:33 - hey give me padding from the top so
29:36 - let's see that beautiful
29:38 - make the text extra small
29:40 - okay and uh let's add the styling so we
29:42 - can actually see it as it's happening
29:44 - real time so i'm going to say class name
29:47 - styles dot style dot votes so you can
29:51 - see the text just turned like super
29:53 - small
29:54 - let's make the font bold and the text
29:57 - white great now the next styling we're
29:59 - going to need is a wrapper because right
30:01 - now these things aren't like aligned the
30:03 - right way and they should be in a flex
30:06 - box in a flex column because they're
30:08 - going up and down like this right that's
30:11 - where you need a column and uh they
30:13 - should also everything should also be in
30:15 - the center so we're going to create a
30:17 - wrapper we're going to wrap create a
30:19 - wrapper here so i'm going to say class
30:21 - name style.wrapper
30:24 - and for the wrapper i'm going to make it
30:26 - flex column and let's go item center and
30:29 - there you have it
30:30 - now the 5 shows up right in the middle
30:33 - exactly like how we want it to show up
30:35 - okay and we can even make it like a add
30:39 - a little bit more dummy data and we
30:40 - could say up votes
30:42 - equals 10 cons down votes
30:45 - equals five and uh we could just say up
30:48 - upvotes minus
30:50 - down down votes okay and there you go
30:54 - so posts can have negative votes as well
30:56 - so that's why we're not doing a negative
30:58 - check it's totally fine to have negative
30:59 - votes so there you go so now our vote
31:03 - sub component is completely done now
31:05 - we're gonna work on our next sub
31:07 - component which is gonna be the action
31:09 - sub component so let's go ahead and do
31:12 - that so first step is gonna be what you
31:14 - tell me okay let's do this together so
31:16 - what's the first step going to be if i
31:19 - have this feed over here yes inside of
31:22 - this folder i need to create a new file
31:24 - right and that file is going to be
31:26 - called actions.js
31:29 - what's the first thing i'm going to do
31:30 - here you know i want you to start
31:31 - getting some practice mentally as you do
31:33 - this with me the first thing we're gonna
31:34 - do here well we're gonna write the
31:36 - component so i'm gonna say const actions
31:39 - and then we'll just return something so
31:41 - we'll make a div
31:43 - we'll just add an h1 in there that says
31:46 - actions and then we'll hit
31:48 - export default actions now the next
31:51 - thing we need to do is make sure it
31:53 - shows up inside of our index.js
31:56 - okay aka our feed compo or sorry in our
31:59 - post component actually we need to make
32:01 - sure it's showing up in our post
32:02 - component so let's go to our post
32:04 - component in common i'll just open up a
32:06 - new tab here and we need to just import
32:08 - it so i'll copy this paste change this
32:11 - to actions and change this to actions so
32:15 - now we're importing it and now where
32:17 - will actions go is is my question to you
32:20 - will actions go at the top in the middle
32:23 - at the bottom right actions just so
32:25 - you're you're clear actions are these
32:27 - guys right over here the comments all of
32:30 - that so where will they go
32:32 - exactly they're going to go at the
32:33 - bottom so if they're going to go at the
32:34 - bottom then pretty much all the way at
32:36 - the bottom right here is where we need
32:39 - to add
32:40 - our actions as a self-closing tag okay
32:43 - and our actions are actually showing up
32:46 - so that is wonderful let's go back to
32:48 - our actions and
32:50 - finish out building this okay first
32:53 - let's take a look at actions and just
32:54 - see
32:55 - and
32:56 - we can understand right so we have these
32:58 - three things right here now first things
33:01 - i see is to me this is a flex this is
33:04 - not a flex column right this is a
33:06 - straight up flex
33:08 - row so i see that we have flexbox
33:11 - enabled the next thing i see is i'm sure
33:14 - we're gonna need to work with the text
33:15 - color so we're probably gonna have to do
33:17 - something with the text color at some
33:19 - point and that's the next thing i notice
33:21 - the other thing i notice is the font
33:24 - size is kind of either regular or small
33:26 - so that's another thing we have three
33:28 - icons here so there's probably going to
33:30 - be some importing icon action happening
33:33 - okay and uh you know the left icon is
33:36 - called the annotation icon
33:38 - then we have the gift icon and then we
33:40 - have that share looking icon so those
33:43 - are going to be the three icons that
33:44 - we're going to be using here and so i
33:46 - feel like we should have a
33:48 - pretty good grasp of what's happening
33:51 - now this is usually pulling data
33:54 - dynamically but for now ours will just
33:56 - be pulling data
33:57 - in a dummy way okay so let's go back now
34:01 - that we have the lay of the land and
34:03 - what we're doing i'm going to start off
34:05 - with importing the icons first just
34:07 - because i know that that's something
34:09 - we're going to have to do
34:10 - so let's start off with that all right
34:12 - so let's go over here and i'm going to
34:14 - import all these icons we're going to
34:16 - say import annotation
34:18 - icon close this tab right here icon gift
34:23 - icon and share icon and we will get this
34:26 - from hero icons
34:29 - react dash outline now if we don't have
34:32 - hero icons
34:34 - installed here's what i want you to do
34:36 - just copy from here from the at sign to
34:40 - the word react where it ends copy it
34:42 - let's go to our
34:44 - shell
34:45 - and simply let's do yarn add and we'll
34:48 - paste that at hero icons slash react and
34:52 - that should install those icons so that
34:54 - we have access to them okay now let's
34:57 - continue working on our app while that's
35:00 - installing so the next thing i have to
35:02 - do is actually just get those icons to
35:05 - show up all right so let's
35:07 - put an
35:08 - annotation icon right here so i'll say
35:10 - annotation
35:11 - icon okay uh the next icon that i need
35:15 - to show is gift icon and then the next
35:17 - icon that i need to show is share icon
35:21 - all right let's see where our install is
35:22 - at our installing install is almost
35:25 - completed it's 281 out of 283 it's like
35:28 - more than 99.9 completed okay and uh now
35:33 - if we go back to our app yay look at
35:36 - that our icons are showing up
35:38 - let's go baby now the our icons are
35:41 - showing up and that's great but what's
35:43 - the problem here the problem that we're
35:45 - actually having here is these icons are
35:49 - massive
35:50 - so we need to actually make sure that
35:52 - these icons are short small so we can
35:54 - see them which is why we'll need styling
35:57 - so let's style the icons i'm going to
35:59 - give this icon a style
36:03 - of icon and we'll just do the same thing
36:06 - for all the other ones and then let's
36:08 - create the styling so we'll say con
36:10 - style and i'll say icon and the icon
36:15 - styling i want is height is four and
36:17 - width is four so just hey chill them out
36:19 - make them small so they're not massive
36:21 - there we go so our icons are now added
36:23 - perfect very good now remember i said we
36:26 - need them to be in some kind of flex
36:28 - well we need a icon container that can
36:31 - do that so
36:33 - let's create another div here and this
36:36 - div will serve as
36:38 - so we'll call this div and we'll say
36:40 - class name is style dot icon container
36:45 - okay and i'll just tab these bad boys
36:48 - right here and we'll say div class
36:52 - sorry we'll just end this okay so now
36:55 - icon container has three icons and we're
36:58 - just going to style our icon container
37:01 - with obviously a flex so flex and alone
37:04 - should help it a lot now we want to make
37:06 - sure everything is nicely and center
37:09 - aligned and it looks normal very good we
37:11 - want to give everything some breathing
37:14 - room on the x-axis so let's give it a
37:15 - little bit of spacing in between and
37:18 - remember what we said
37:20 - text color is going gonna be a thing
37:21 - right so let's give it a text
37:23 - color of
37:25 - eight one eight three eight four so it's
37:27 - gonna be like this grayish darkish color
37:30 - okay what we're gonna do is put actually
37:33 - every single icon in an icon container
37:36 - instead of the whole thing in an icon
37:38 - container so let's go ahead and do that
37:41 - put this in an icon container okay let's
37:44 - put
37:45 - that guy in an icon container and this
37:48 - guy in a nikon container and then let's
37:50 - just go ahead and close out these divs
37:53 - boom okay so now all of them are an icon
37:56 - container okay and now what we want to
37:58 - do is what this will allow us to do is
38:01 - now i can actually add
38:03 - text over here okay and in the span tag
38:06 - i can just put say hey 19
38:09 - comments okay so now you'll see it'll
38:12 - say 19 comments let's add a span tag
38:14 - here for all of them so the next one
38:17 - will say just word awards
38:20 - words and then this one at the end here
38:23 - will simply say
38:25 - shares
38:26 - or share there we go all right and now
38:29 - we're going to add a wrapper around
38:31 - everything and that will be flex enabled
38:33 - as well so let's go ahead and do that so
38:36 - i'm going to give it a class name style
38:40 - dot wrapper and up here i'm going to say
38:43 - wrapper let's make it flex enabled so
38:45 - that alone will solve a lot of problems
38:48 - we'll center everything so now things
38:50 - are looking really good as you can see
38:53 - right boom and uh after item center i'm
38:56 - going to say space x
38:58 - sorry spacex four so let's give a quite
39:02 - a bit of space in between each single
39:04 - item and then we're gonna give a padding
39:07 - of two perfect and now for all of these
39:10 - span text that we have let's make them
39:13 - like really small text okay so we can
39:16 - actually just go ahead and say class
39:18 - name and for these we can just inline
39:20 - style this so i can say text s that's
39:23 - just saying hey make the text extra
39:25 - small right and then i can just grab
39:27 - that
39:29 - we can do that here as well and do that
39:32 - here as well so now all of those texts
39:34 - will just be extra small and there we
39:36 - have it awesome now if i look at this
39:39 - our
39:40 - component is looking beautiful right
39:43 - there's only really just one part left
39:46 - let's take a look at like look at that
39:47 - that is looking gorgeous that component
39:49 - right there there's only one part left
39:51 - which is the author part if i go to our
39:55 - app right here you can see it says
39:56 - posted by david riccosi all right so
39:59 - that info
40:00 - is the part that we're now going to
40:02 - actually create and finish so i'm going
40:05 - to create a new component it's going to
40:07 - be called info.js and if we try to
40:09 - understand info.js and i look at this
40:12 - here i have a few things right posted by
40:14 - who the date so when we're creating the
40:18 - raw dummy data for this that should
40:20 - honestly be pretty simple and then of
40:22 - course we have the author here with the
40:24 - logo of the author so let's just go here
40:27 - and let's fully try to understand this
40:28 - so here's the component info
40:31 - here are the elements we have so that
40:33 - way we don't get surprised we need a
40:35 - image okay this is going to be the logo
40:37 - so we know we're gonna be using an image
40:39 - component in here then we have
40:42 - text that's maybe bold maybe i think
40:45 - it's bold okay or maybe just really
40:47 - white text and then we have
40:50 - just more
40:51 - text that says the name of the person
40:53 - who posted it and then we have a
40:56 - date but from a front-end perspective
40:58 - right now with no data like it's just
41:00 - this is just text and this is just text
41:03 - too so this part over here is should be
41:06 - really straightforward to work on so
41:09 - let's go ahead and do that i'm going to
41:10 - say const info also return
41:14 - will create a div
41:16 - and inside of this div i'm going to go
41:18 - ahead and just say h1 hello or info
41:22 - rather and we'll say export default info
41:26 - now info should go kind of at the top so
41:28 - if i go to our post component we're
41:30 - gonna put info a little bit higher than
41:32 - where we put actions in our case we'll
41:35 - put it right above this h1 here so i'm
41:37 - going to say
41:38 - info close it and then let's import it
41:42 - here so let's go info let's go info and
41:46 - let's go back to our app
41:48 - and there we go info is now showing up
41:51 - now inside of info
41:53 - smaller
41:55 - okay now let's go inside of info so i'm
41:58 - going to close this
42:00 - and info is open as a tab here let's
42:03 - just bring in the logo right away so i'm
42:06 - gonna use a image tag okay and let's
42:09 - make it self closing source is gonna be
42:13 - the source that i'm actually gonna paste
42:15 - you can actually just pause
42:17 - the screen and try to copy it or just
42:19 - post a different logo you don't need to
42:20 - post my you know you don't need to post
42:22 - clever programmer logo and then all we
42:24 - need to do is we just need to style this
42:27 - so
42:28 - that will actually make it smaller so
42:30 - let's go ahead and create a styling for
42:32 - this now i'll say con style
42:35 - and then we'll say
42:36 - styling for our
42:38 - profile
42:40 - pic and we'll just make height 4
42:43 - h4 and width 4 and then we're going to
42:45 - make it rounded full so it's going to be
42:47 - a rounded photo and let's give it the
42:50 - class name as well so let's go class
42:51 - name and i'll say
42:54 - style.profile pic okay and now it should
42:56 - become tiny and already look at like our
43:00 - post component is looking so beautiful
43:02 - already so that's exciting now the next
43:04 - thing we need after this let's go to our
43:07 - main app and let's see what
43:09 - uh what what do we need after is the
43:12 - name the author name so we just say r
43:14 - slash whatever the author name is so
43:17 - let's go ahead and do that so i got my
43:18 - image part done that's very good now i'm
43:21 - gonna get outside of my image part okay
43:24 - and the next thing i need is the author
43:26 - name so i'm going to say div
43:28 - and inside of this div
43:30 - we'll put our author name so actually i
43:33 - can probably just put that on one line
43:35 - and we can say r
43:36 - clever programmer in this case okay
43:38 - there we go we got our slash clever
43:41 - programmer what's the next thing that we
43:42 - need well the next thing that we need is
43:46 - the date the title and then the date
43:49 - okay so i'm gonna have a div that's just
43:52 - gonna have that dot in so if you wanna
43:54 - do this dot i believe it's option eight
43:57 - on
43:58 - mac and then on windows i'm not sure how
43:59 - to do the dots just copy the dot from
44:01 - somewhere or google it and then copy it
44:04 - from there and then we're gonna have a
44:07 - another and then but basically all i
44:09 - want to basically say here is i'm going
44:11 - to have a span tag and i'm going to say
44:13 - posted bot rafikaze okay or clever
44:16 - programmer or whatever say posted by
44:18 - clever programmer now let's just wrap
44:20 - this whole thing in a flex like we can
44:23 - see it the right way going in a row
44:25 - rather than how it is right now so
44:28 - yeah so let's go ahead and put a wrapper
44:30 - around it so let's go and say
44:33 - class name
44:34 - style.wrapper and i'll go here
44:37 - and for the wrapper what i want is
44:40 - something simple i wanna of course just
44:43 - make it flex enabled for now there we go
44:46 - and uh let's center align everything
44:48 - okay let's give some proper spacing
44:50 - between everything and make the text
44:52 - size extra small there okay and there we
44:56 - go all right and then let's go ahead and
44:58 - give it a grayish color so i'm gonna go
45:01 - ahead here and say eight one eight three
45:03 - eight four okay now one bug you might
45:06 - have noticed already is why how come i
45:09 - changed the color of this to gray but no
45:11 - it didn't change actually what's
45:13 - happening is if we go to our tailwind or
45:16 - global style file which is our
45:18 - tillman.css that has where it says hey
45:21 - make the color white for
45:23 - all text so
45:25 - we should just go ahead and remove that
45:26 - and once you remove it you're going to
45:28 - notice that this is going to turn gray
45:29 - which actually it should because this is
45:31 - like too bright white this stuff will
45:34 - turn gray and then this stuff will turn
45:35 - grey like i was supposed to the vote
45:37 - icons will also turn gray so let's get
45:40 - rid of this here let's hit save and
45:42 - there you go now things are how they're
45:44 - supposed to be and how they're supposed
45:46 - to look okay so everything just chilled
45:48 - out a little bit because i feel like it
45:50 - was too strong white and that didn't
45:53 - look good as a design so i'm glad that
45:55 - we've solved that problem so let's go
45:57 - back to info we've added our wrapper and
46:00 - we got our posted by author now the the
46:03 - only thing left is the date so we'll
46:05 - make another span tag because we need
46:07 - everything to be in the same line and
46:09 - this will just be a dot okay we'll put
46:11 - that
46:12 - and then the thing that we need after
46:13 - that is the date
46:15 - okay so we're gonna create another span
46:17 - tag and this will just be june 15 or
46:22 - yeah june 15th something like that three
46:24 - letters of the month
46:26 - and then the day and there you go so
46:28 - let's go back to ours yep like july 13th
46:31 - june 15th uh and it was my birthday
46:34 - yesterday july 14th actually let's just
46:36 - put that as the date there we go july
46:39 - 14. all right
46:41 - so now the post component is looking
46:43 - very very good we just have to make sure
46:46 - that we have some styling here handled
46:49 - and let's just create certain containers
46:51 - so we make sure that the styling doesn't
46:53 - get out of whack so
46:55 - for this image let's make a container
46:58 - okay so we're going to go ahead and say
47:00 - let's put it wrap it up in a div
47:03 - and i'll say class name it'll be style
47:05 - up profile pick container okay and then
47:09 - i'll simply say profile pic container
47:12 - all right and we will say here make it
47:15 - flex item center and then we'll give it
47:17 - some space between so there's some
47:19 - breathing room okay that should be that
47:22 - profile pick container great that
47:24 - matches so now our image is in a nice
47:27 - little container so that part is done
47:29 - and we're good with that the next thing
47:31 - that we need to make sure that we're
47:33 - good on is for the clever programmer
47:35 - that needs to be white that needs to
47:38 - have a certain styling so let's put a
47:40 - class name and we'll just say style.tag
47:43 - okay and then we'll create that so we'll
47:45 - say tag tag will be hey it's going to be
47:47 - a cursor pointer when you hover over it
47:49 - text is going to be extra small font is
47:53 - going to be semi-bold okay and then
47:55 - we're going to give it a specific text
47:57 - color so we're going to say okay and
47:59 - then we're going to also give it is a
48:01 - certain underline on hover so hover
48:03 - underline so now when you hover over it
48:06 - it has an underline just like how reddit
48:07 - has it so that just makes it pop
48:10 - and look really nice and then the last
48:12 - styling we're going to need is posted by
48:15 - and this one is going to be fairly
48:16 - simple we'll just flex everything center
48:18 - align it and then give a little bit of
48:20 - spacing in between everything so let's
48:23 - go to
48:24 - this part we're just going to wrap this
48:26 - part in a div and let's go ahead and
48:29 - wrap it
48:30 - boom right there and we'll say class
48:32 - name
48:33 - style.posted bye okay perfect and now it
48:37 - looks beautiful i mean like yeah this is
48:40 - this is gorgeous this is gorgeous this
48:42 - is very very nice and like it's
48:44 - completely mobile friendly as well look
48:46 - at how everything just resizes the about
48:49 - component shows up or it vanishes
48:51 - depending on the size so this is
48:53 - beautiful i mean it's fully mobile
48:54 - responsive okay great so with that said
48:58 - now our post component has all of the
49:00 - sub components and they're already made
49:03 - the vote component subcomponent action
49:05 - sub component infosub component and
49:08 - post at this point from a frontend
49:11 - perspective is completely done i'm
49:13 - excited let's move on now we're going to
49:16 - work on the feed component which is
49:18 - essentially already made there's not
49:20 - really not much to do so let's go inside
49:23 - of our feed folder and in here let's go
49:26 - to index.js
49:28 - all feed is gonna do is it's gonna loop
49:31 - through and just show multiple posts
49:34 - okay so right now we don't really have
49:37 - that many posts but we'll actually just
49:40 - create a dummy variable here called
49:42 - posts
49:43 - and i'm just really not even going to
49:44 - put much in it okay post would obviously
49:47 - look like an object with an id
49:50 - i guess let's just put it here so you
49:51 - could visualize what post will look like
49:53 - once we start storing it in the database
49:56 - post will have an id posts will have
49:59 - what else will post have posts will have
50:02 - a title build reddit or something post
50:04 - will have an author it's a quasi okay
50:07 - and then i'm just gonna go ahead and
50:10 - repeat that a few times okay let's go
50:12 - zero one zero two
50:14 - that build
50:16 - medium
50:17 - build facebook okay and maybe the author
50:19 - for this one is david okay so this is
50:21 - gonna look like now post is gonna have
50:23 - more information in there but that's
50:24 - roughly what it's going to look like so
50:26 - what we can do here is we can replicate
50:28 - that and let's just loop through so i'm
50:30 - going to say post.map and let's go
50:34 - like this
50:35 - right there
50:37 - and i'll open parentheses here and open
50:40 - close
50:41 - boom okay and then for now let's just
50:44 - pop that in so since there are three
50:45 - posts it should create this post
50:47 - component about three times and let's
50:49 - see if it does that so refresh see if
50:52 - we're still running into an error
50:54 - okay we're still running into an error
50:56 - so what's the problem here let's wrap it
50:58 - inside of a parent so let's put a div
51:02 - here and here okay and let's make it
51:05 - pretty and let's give this a try and
51:08 - there we go now we can actually see that
51:10 - because we have three posts in here
51:12 - three posts are showing up right boom
51:15 - one two three okay so now what we can
51:18 - actually do here is we can give this
51:21 - entire post we can destructure this
51:24 - entire post right inside of post so what
51:27 - does that mean that basically means that
51:29 - we're going to have a post where each
51:31 - thing is going to have an id we're going
51:33 - to destructure when we pass it with the
51:36 - the title and the author so everything
51:38 - is going to be destructured and then
51:40 - we'll have access to all of that later
51:42 - okay and we'll be actually destructuring
51:44 - is each post okay so that's what i meant
51:47 - to do each post is what we'll be
51:48 - destructuring because here we're mapping
51:50 - through posts so let's get access to a
51:53 - post
51:54 - okay and so what will happen is when
51:57 - we're passing the post component that
51:59 - specific post will basically have that
52:01 - specific post id that specific post
52:04 - title specific post author so writing
52:07 - this here is the same thing as
52:08 - essentially doing title is post.title
52:12 - author
52:14 - is
52:15 - post.author okay so you could write all
52:18 - of that
52:19 - or you could just write this and this
52:21 - just destructures the entire post so
52:23 - it's a really clean way of doing it now
52:25 - i can go inside of my post component and
52:27 - i can actually destructure the id i
52:29 - could destructure the title and the
52:32 - author for example
52:33 - and now
52:35 - here i can replace this with title
52:39 - and let's say i can replace we'll do the
52:42 - author parts actually where's author
52:44 - part author will be an info so our info
52:47 - will actually need access to the author
52:50 - okay so author and then we can go inside
52:53 - of info i can go down here where it says
52:55 - posted by clever programmer instead i
52:57 - can actually say posted by author so now
53:00 - if we save this let's see if we have any
53:03 - errors
53:04 - posted by author so we need to
53:07 - destructure author here and there we go
53:10 - now you can actually see the the posts
53:12 - are showing up like you could see the
53:13 - titles right build reddit build medium
53:16 - build facebook let's go inside of common
53:19 - and i'm just going to open up posts in a
53:21 - new tab so we can see posts very clearly
53:24 - so there we have it
53:26 - we are passing it all this information
53:28 - it's showing all of that information and
53:31 - i think this looks pretty good right now
53:33 - let's go and check where we have the
53:36 - post showing up so i'll open up index
53:38 - here as well let's open up the index and
53:40 - in my index i have all my posts now
53:42 - later these posts will come from a
53:44 - database okay so i'm just going to leave
53:46 - a comment here these will come from a
53:49 - database okay for we're just hard coding
53:52 - it right now passing it to our post
53:54 - component and then our post component
53:56 - has access to all of these properties
53:58 - and then it's showing all of these
53:59 - properties okay so obviously
54:02 - we don't have all the properties in here
54:04 - right now but content will be one of the
54:05 - properties too and that's something that
54:08 - we might as well actually just go ahead
54:09 - and actually write it right now so we
54:11 - can actually set content let's i'm sorry
54:13 - let's leave it for now just because it's
54:15 - going to be a lot of like manual work
54:17 - and
54:18 - let's just do all of this when we
54:20 - actually get the data from a database i
54:21 - think that'll be better that's better
54:23 - let's do that way so there you go
54:24 - there's your feed component and now it's
54:27 - working only problem is styling wise so
54:30 - if you look at this there's some room to
54:32 - there's some breathing room right here
54:33 - right when we look at ours look at the
54:36 - difference there's breathing room here
54:37 - there's no breathing room there's no
54:39 - breathing room here in ours in the final
54:41 - version there is some breathing room
54:44 - right here okay so it's gonna be some
54:46 - simple styling that we'll do so let's
54:48 - just take this div and let's add it in a
54:52 - class name and we'll say style.wrapper
54:55 - and then let's go ahead and create
54:57 - styles here so con style
54:59 - will create a wrapper style and the
55:01 - wrapper style will just say hey put a
55:04 - space in the y margins and the y axis
55:07 - and then we're just going to make the
55:09 - cursor pointer when you hover over any
55:11 - of these things and we'll wrap and we
55:14 - don't actually even need to use this
55:15 - honestly we don't even need to use this
55:17 - because posts should already have those
55:19 - things all right so now when i hover
55:21 - over it looks like that
55:23 - and there's spacing in between each so
55:25 - it looks a lot more breathable and then
55:28 - for post let's give it the id as well so
55:31 - i'll just do comma id
55:33 - and we'll just do key is id okay so with
55:37 - that said our feed component let's just
55:40 - full screen and let's like really soak
55:42 - it in and look at that that looks nice
55:44 - let's make it a little bit bigger
55:46 - yeah that's looking stunning so our post
55:49 - component and our feed component are now
55:52 - complete front end wise and now
55:55 - we'll get to the really exciting part
55:57 - and add a database and start adding the
56:00 - back end and a lot of functionality to
56:02 - the app so i'm excited let's do it
56:04 - together
56:04 - now we're going to go ahead and set up
56:07 - supabase
56:08 - and pull the post from there and you'll
56:10 - see how easy it is to actually do that
56:14 - so let's open up a new tab and let's go
56:16 - to
56:17 - supabase.com and hit enter okay now i am
56:21 - here
56:22 - very simple so you can just sign in or
56:25 - start your project so if you've never
56:26 - stored your project or you never created
56:28 - anything just click start
56:30 - i there's not really much to talk about
56:32 - it it's
56:33 - a firebase alternative but you have
56:35 - postgres and everything so pretty easy
56:38 - let's hit start your project i've
56:40 - already created an account so just
56:42 - brings me right here you can
56:45 - you know you obviously will have to
56:47 - create an account from scratch all right
56:48 - so
56:49 - let's go ahead and i'm going to make a
56:52 - new project here and you could choose
56:55 - whatever pricing plan you want i just
56:57 - want it to be free so the project name
57:00 - i'm gonna choose here is going to be
57:02 - let's just say reddit with next all
57:05 - right next chess
57:07 - now just put in a password you won't
57:09 - really need to use it later but this
57:10 - will be for your postgres database so we
57:13 - can generate a password okay or we can
57:16 - just
57:17 - write one whatever we want to do in this
57:19 - case i'm just going to generate i don't
57:21 - really care what it is you could copy it
57:23 - and save it if you need to but i know
57:24 - i'm not gonna really use it in this one
57:26 - later so it's fine just hit create new
57:28 - project and we're done
57:30 - with all of this okay all right now in
57:33 - the next step what we need access to are
57:35 - a couple of config things we're gonna
57:39 - need access to one our project api key
57:43 - and to
57:45 - our url right here project url right
57:48 - here okay these are very important i'm
57:50 - just gonna go ahead and copy because i
57:52 - have a clipboard so i can store multiple
57:54 - things but you can just hit copy here
57:57 - now that i've copied them here's what
57:59 - we're going to do we're going to go
58:00 - ahead and create a new folder
58:03 - at the global level so just click
58:05 - the get ignore it literally anything
58:07 - else click folders and this will be
58:10 - called services and inside of my
58:12 - services folder we're gonna go ahead and
58:15 - do
58:15 - supa
58:16 - base
58:18 - client.js okay and then we're gonna go
58:21 - ahead and say import
58:23 - create client from
58:26 - supabase
58:27 - supabase dash js okay now we're
58:31 - importing something that we've never
58:33 - really seen before so usually what does
58:36 - that mean what that basically means
58:38 - usually when i see something like that
58:40 - is i have to actually install that
58:42 - library so let's go ahead to supabase
58:45 - and look at their installing
58:47 - instructions how to install superbase
58:49 - it's very simple we have a yarn command
58:51 - here that we're we're just going to use
58:53 - okay i can copy it like that yarn add
58:56 - super bass dash js so let's go ahead and
59:00 - open this guy go to our shell and we're
59:03 - just going to go ahead and paste this
59:05 - command and now it's going to install
59:07 - superbase so we're all good there and
59:10 - let's set up the config here so i'm
59:12 - going to say supabase url is going to be
59:15 - process.n
59:17 - next public
59:19 - superbase url and if you're wondering
59:22 - hey where the hell are these variables
59:23 - coming from don't worry we're going to
59:24 - set up our own end file and then
59:28 - we'll store our keys there okay and then
59:30 - we'll do con super bass
59:32 - anonymous key
59:34 - next public
59:36 - super bass
59:38 - and on key
59:40 - face and these aren't like really
59:42 - private keys right because that's why
59:44 - we're saying publix we're making it very
59:46 - obvious that these are actually like
59:47 - public keys just know that these are
59:49 - going to be publicly exposed to
59:51 - whoever's on the client side create
59:54 - client and we're going to go ahead and
59:56 - say pass create crown line the superbase
59:58 - url and we'll pass it to superbase
60:01 - anonymous key great
60:04 - uh not irl not in real life but a url
60:08 - okay just make sure you spell everything
60:09 - correctly so we have we're done setting
60:12 - up the config file but well all we have
60:14 - to do now is just in our end just make
60:16 - sure we have these variables so at the
60:19 - global level we'll create our end
60:21 - file okay so right here
60:24 - just simply click get ignore or any of
60:26 - these other ones hit add a file and
60:29 - we're going to call it dot n dot local
60:32 - okay this file usually in git ignore is
60:35 - ignored so let's look for a dot and yep
60:37 - so dot m.local is ignored great and
60:41 - inside of our end file we're gonna go
60:43 - ahead and say next public
60:45 - super base
60:47 - url okay and then just paste that url so
60:51 - i'm gonna paste this and then we're
60:53 - gonna do next
60:54 - public super
60:56 - base
60:57 - anonymous key and then just paste your
61:00 - anonymous key okay so we're done
61:03 - pasting those and what this basically
61:05 - means is now our services supabase
61:08 - client actually has access to those keys
61:11 - okay now that we've set up this
61:14 - relationship let's go and add some dummy
61:17 - data to our database so let's go ahead
61:19 - and click this table editor and you can
61:22 - see i'm in that project they should
61:25 - really improve their url names like what
61:26 - is that so weird all right let's go to
61:29 - here and um we'll create a new table so
61:32 - just click that i'll zoom in a lot so
61:34 - you can see everything and uh this new
61:36 - table we're gonna create we'll just call
61:38 - it feed okay and the feed will have so
61:42 - in feed we'll have created at and this
61:44 - will just timestamp to now so whenever
61:46 - you add a new post to it it will by
61:49 - default
61:50 - value will just be that same second that
61:53 - you made the post so that makes sense so
61:55 - we'll leave that essentially as is we'll
61:57 - add a new column and this will be the
61:59 - author okay and the author will be of
62:02 - type text so i'm just gonna type in text
62:04 - until i find it great default value will
62:07 - be null
62:08 - then we'll have title title will also be
62:11 - a text
62:12 - then we'll have content which will also
62:15 - be a text boom and then we'll have
62:18 - upvote which will be an
62:21 - int 8
62:22 - okay so that just means it's going to be
62:24 - a integer and then we'll have a down
62:27 - vote and that's also going to be an
62:29 - integer beautiful so when it comes to
62:31 - feed that's really all we're gonna have
62:34 - so let's hit save okay adding seven
62:36 - columns to the feed and we should be up
62:38 - and running now let's go ahead and add a
62:41 - post in here simply okay so i'm gonna
62:43 - hit insert row and for the post let's
62:46 - say the author is rafae kazi for title
62:49 - i'm going to say it's going to be like
62:51 - how to build reddit with next.js
62:55 - and superbase
62:57 - rocket emoji and then content will be
63:00 - this tutorial will show you step by step
63:05 - on how to
63:06 - become a
63:07 - developer and build an app okay it will
63:10 - have eight upvotes and three down votes
63:14 - and let's hit save so this is one post
63:16 - now it's created and what's nice about
63:19 - this is we'll be able to
63:21 - uh create a new uh we'll be able to
63:24 - retrieve this post you know from this
63:27 - table that we've created so that's what
63:28 - we're going to be working on and that
63:30 - will finish our setting up of the supa
63:33 - base now the next thing i want to do is
63:35 - i want to go into authentication and
63:37 - also just set up the authentication
63:39 - because we're going to need it for later
63:41 - but we can just go ahead and set up the
63:43 - auth some of this auth now so just go
63:46 - ahead to authentication all the way down
63:48 - to google
63:49 - and we're going to click it and just do
63:52 - google enabled now the last thing but
63:54 - one of the most important things we need
63:56 - is
63:57 - we need a we need to go here we need to
64:00 - add a redirect url so let's go to the
64:03 - top of the app and where it says user
64:06 - sessions site urls we need to go ahead
64:08 - and add our replit url right here for
64:12 - our app so we're gonna go and grab this
64:15 - okay whatever your
64:16 - url is called mine is called this you
64:18 - could change yours you could go here and
64:20 - like change the name of this because
64:21 - you've already forked this
64:23 - so you could call this let's say you
64:26 - know whatever you want you could change
64:27 - the name of this and then just make sure
64:29 - you put that same one okay so let's say
64:32 - reddit
64:33 - clone reddit
64:34 - build
64:36 - uh for youtube okay so i'll hit enter
64:40 - and once i do that my url of the replit
64:43 - changes okay and then
64:45 - this url will also change so we'll yeah
64:48 - it's saying uh working so simply go
64:51 - ahead and
64:53 - okay now it's changed here as well
64:55 - and in my console
64:57 - maybe it's working maybe it's not let's
64:59 - hit run again let's see if it works it
65:01 - should be able to change it and run
65:03 - everything correctly so the replay is
65:05 - waking up you got to just sometimes give
65:06 - it some time and then once it's loaded
65:08 - you'll be good to go and there we go so
65:11 - sometimes it can take some time just be
65:13 - patient wait because it is deploying it
65:15 - to a whole new it's like doing a whole
65:17 - new build a whole new url it has to
65:19 - deploy it online so just give it a
65:21 - second and then it'll be up and running
65:23 - so right now it is up and running and
65:25 - we're good so this is the url that i'm
65:27 - going to take
65:28 - and i'll head over to
65:31 - supabase here
65:33 - i don't need that tab okay open it up
65:35 - and instead of this site url right here
65:38 - for user sessions we'll just paste this
65:40 - redirect url okay let's hit save okay
65:43 - great in terms of the setup
65:46 - we are essentially done with the super
65:49 - bass setup now all we have to do is
65:51 - actually retrieve a post from super bass
65:54 - and then actually show it inside of our
65:56 - feed so let's make sure that we finish
65:59 - doing that okay because that to me
66:01 - that's really finishing the setup
66:02 - because then you know everything is
66:04 - plugged in connected working how it's
66:06 - supposed to be working okay so let's go
66:09 - ahead into our pages
66:12 - okay let's go alright so now what we
66:14 - want to do is in our pages we need to
66:15 - actually create our own back end real
66:17 - quick so instead of api i'm just gonna
66:19 - go ahead and create a new one we'll call
66:21 - it get posts
66:22 - dot js and we don't need this hello ts
66:25 - so we can just go ahead and remove this
66:28 - okay so inside of get posts uh this is
66:31 - gonna be our back end or we're gonna
66:34 - retrieve basically do our cure queries
66:37 - to the database uh and retrieve the data
66:40 - from here okay and then from the front
66:42 - end we'll call this
66:43 - endpoint and get the data that we need
66:46 - all right so we're going to go ahead and
66:47 - say import we need access to supa base
66:50 - and we'll say
66:52 - from
66:53 - services
66:54 - supabase
66:56 - client okay and then we're going to go
66:58 - ahead and say export default it's going
67:00 - to be an async function okay we're going
67:03 - to take in a request and a response even
67:06 - though we're really not going to do
67:07 - anything with the request in this one
67:09 - and then we want to do is we want to
67:11 - destructure the response that we get
67:13 - from superbase i will await superbase
67:17 - okay and
67:18 - and this is a really nice part because
67:20 - this is like sql right from
67:22 - feed so we're gonna get the data from
67:24 - that table feed that we created so if i
67:27 - go in here and we're going to tables
67:29 - right this is the table
67:31 - feed from feed and we'll say
67:35 - dot select and we can select something
67:37 - specific like a specific column but in
67:40 - this case we'll say give us all of the
67:41 - columns and then we'll order it by id
67:45 - which in this case will be kind of
67:47 - ordered and we can just do ascending
67:49 - false
67:50 - this will also show us the most recent
67:52 - post first and then the last thing we
67:54 - want to do here is let's just go ahead
67:57 - and say status
67:59 - is 200 and then
68:01 - we will
68:02 - sorry whoops status of 200 and then
68:06 - we're gonna call the json method on that
68:08 - okay and we'll just return the data so
68:12 - we'll grab that data and we'll return
68:14 - that data
68:15 - okay so
68:17 - in other words just think about it like
68:18 - this when this query happens it goes to
68:21 - the table
68:22 - gets that entire feed table
68:24 - and then just sends it back and then we
68:26 - have access to it inside of our
68:27 - javascript code okay all right now from
68:30 - the front end we need to go ahead and
68:32 - retrieve this as well
68:34 - so let's go to our index which is going
68:36 - to be our index.ttsx
68:40 - so let's go to
68:42 - pages let's go to our index okay and
68:45 - here we'll get access to our posts
68:47 - now we're going to use something called
68:49 - the swr hook i love this and just to
68:53 - show you a little bit about it swr hooks
68:55 - are phenomenal you should be using them
68:58 - all the time so wherever you use you
69:00 - know use effect and then you do an api
69:02 - request just replace that with swr
69:05 - and uh lee robb from versailles also
69:08 - told me about this and there you know
69:11 - recell created next and so he's telling
69:13 - me he use this all the time so what i
69:15 - love about this is
69:17 - this works with ssr okay server side
69:20 - rendering it works with typescript and
69:22 - it's real time so it fetches the data in
69:25 - real time and it can actually keep
69:26 - refreshing that specific component for
69:29 - you over and over again so if we're
69:31 - pulling data from a database remember
69:34 - that's not gonna if it's not firebase or
69:36 - if it's not a real-time database it's
69:37 - not gonna render in real time but using
69:39 - swr we can actually keep refreshing that
69:42 - specific component and
69:45 - so that way if it gets new data or gets
69:47 - changed it will refresh and just update
69:49 - with the new change without needing to
69:51 - refresh the entire page so that's
69:53 - beautiful it basically will mimic a
69:56 - real-time functionality and also what i
69:58 - like about it is that you don't need to
70:02 - when you start using swr you don't need
70:05 - to write all those like use effects and
70:07 - then keep track of state variables and
70:10 - create your fetch requests and do all of
70:12 - that stuff it can kind of just do that
70:14 - all in one go okay so that's why we're
70:17 - going to be using this
70:18 - and
70:19 - we're going to go ahead and install this
70:21 - first obviously so let's click get
70:23 - started and it just says yarn add swr
70:26 - and that's how we install it so let's go
70:28 - ahead and install this now so i'm gonna
70:30 - go in here
70:32 - and let's
70:34 - open up this and i'm gonna end my kill
70:36 - my server here and we're just gonna do
70:38 - yarn add swr and once that installs i'm
70:41 - gonna yarn dev again and then i'm going
70:43 - to start running my server so my app
70:45 - starts running
70:47 - but in the meantime while that's
70:48 - installing let's go ahead and say import
70:52 - use swr because that's the hook that
70:54 - we're getting from swr and then inside
70:57 - of our home component what i want to do
71:00 - is set a state variable called my posts
71:04 - set my posts okay and um for these
71:07 - posts we need to import use date if we
71:10 - didn't yet so let's go ahead and do that
71:12 - import use
71:15 - state
71:18 - from react
71:19 - let's see if the install happened
71:20 - already no it's still installing so
71:23 - let's let that just keep running all
71:24 - right and then the next thing that i
71:26 - want to do is my s i want to write my
71:28 - swr hook so i'm going to say const let's
71:31 - destructure the data and the error from
71:33 - it and we'll use our swr hook we'll hit
71:37 - our endpoint
71:38 - get posts so we are going to hit
71:41 - essentially
71:42 - this endpoint right here and what's nice
71:44 - about next is that this right here guys
71:47 - is our back end and it's a server-less
71:50 - function so it's a server-less backend
71:52 - which is absolutely beautiful
71:54 - and we didn't even need to necessarily
71:56 - create a full back end and a full front
71:58 - end it just all comes together once you
72:00 - do serverless so i really enjoy the
72:02 - experience you get from with serverless
72:04 - functions
72:05 - so this will hit our back end point and
72:08 - then we need to give it a fetcher and
72:10 - then we need to just track you know
72:11 - whether it's loading or not because if
72:13 - it is loading then we need to show a
72:15 - loader otherwise we don't need to show a
72:17 - loader oh actually no i'm sorry ignore
72:21 - completely what i just said ignore that
72:23 - okay so swr is gonna need this and the
72:26 - fetcher needs to tell it how you want it
72:28 - to fetch stuff so the fetcher is gonna
72:30 - be simple we'll just write our own
72:31 - fetcher here
72:33 - and it's this fetcher right here and
72:35 - it's just a wrapper on the native fetch
72:38 - so you can literally copy this and we
72:40 - can paste this fetcher
72:42 - okay that's it that's our fetcher we
72:44 - don't really need to even understand
72:45 - what the heck it's doing but what it's
72:47 - doing is it's we're gonna hit this end
72:49 - point and then we're just gonna retrieve
72:51 - its result as a json okay and then that
72:54 - result is just gonna be named data and
72:56 - then we can console.log
72:59 - data obviously after we retrieve it all
73:02 - right so now let's go ahead and run our
73:04 - app and see what happens so i'm going to
73:06 - do yarn dev okay let's make it a little
73:08 - bit bigger here let's open up our app
73:11 - okay and i just console logged that data
73:14 - and uh let's see what happens so let's
73:16 - go ahead and inspect element
73:18 - and we will go and go to console okay
73:22 - and wow this is too huge so i'll make
73:25 - this a little bit smaller okay so we're
73:27 - now right now not console logging
73:29 - anything so let's try putting a emoji
73:33 - here so maybe i can see that emoji let's
73:36 - refresh our home page and see if we see
73:39 - any emojis or anything like that yes we
73:41 - actually do and look at that
73:44 - we got back our data look at that wow
73:48 - and we're getting back our post this
73:50 - tutorial will be we'll show you step by
73:52 - step blah blah it actually shows you
73:55 - the author content created at down vote
73:58 - shows you everything right and we're
74:00 - getting that data back and because we're
74:02 - using swr it actually
74:05 - does caching for us and it does
74:07 - validation for us and it really will
74:10 - also revalidate everything so that is a
74:12 - beautiful experience because
74:14 - if i run this
74:15 - boom everything just happens so fast and
74:18 - instantly and then the more i run this
74:19 - the faster it is because just retrieving
74:21 - that same cached post okay now i'm going
74:24 - to tell it how when to refresh so i can
74:26 - actually give it a object here and say
74:29 - hey the refresh interval interval for
74:32 - this is going to be like 200
74:33 - milliseconds so every 200 milliseconds
74:36 - just go ahead and refresh for me
74:39 - okay and what we want to do is we want
74:41 - to have a use effect hook okay let's
74:43 - write use effect and i'll just make the
74:47 - dependency a dummy dependent data will
74:50 - be our dependency so that's an important
74:52 - thing that we need to remember okay and
74:55 - let's open and close that cool and make
74:58 - sure to import
74:59 - use effect as well okay import it great
75:03 - and inside of this use effect what we'll
75:05 - say is hey if we don't have data
75:09 - then just return because other like it's
75:11 - a guard clauses don't do anything if
75:12 - there's no data otherwise i want you to
75:15 - set my posts
75:17 - data.data okay so set my post to
75:19 - whatever they were and that'll be set up
75:23 - and now my posts we have access to them
75:26 - i can pass my posts to feed for example
75:29 - we can go here and say posts is equal to
75:32 - my posts okay and now we can go inside
75:35 - of feed so i'm gonna command click it
75:38 - or just go manually and you can go
75:41 - components you can go feed and you can
75:43 - go index okay and now i'll destructure
75:48 - posts from here okay and we don't need
75:51 - these posts anymore the dummy data that
75:54 - we had we don't need that anymore so now
75:56 - pulse will know already what to do we're
75:57 - already retrieving the data from our
75:59 - back end we're passing it to our front
76:01 - end now and let's see if our post
76:03 - already knows what to do with it yes it
76:06 - does that was such a smooth transition
76:10 - baby look at that we got five
76:12 - votes
76:13 - and how is that happening remember how
76:15 - we did up votes minus down votes so it's
76:18 - already doing the subtraction for us too
76:20 - because we had eight upvotes and three
76:22 - down votes so
76:23 - that's already happening and we're
76:25 - getting back five now let's go ahead and
76:27 - change
76:28 - up votes to let's say 20 upvotes okay so
76:31 - i just changed it in the database
76:33 - directly and let's go ahead and refresh
76:37 - our page okay so let's actually first of
76:39 - all go into our index again so i'll get
76:42 - out of post here
76:43 - let's go to our pages and let's go to
76:46 - our index.tsx
76:48 - okay perfect and now let's go ahead and
76:50 - refresh and see if it can retrieve that
76:53 - data oh so we probably actually did not
76:56 - make our uploads and down votes dynamic
76:58 - right now i think we had it hard coded
77:00 - to be something dummy i remember that
77:02 - you probably remember that too so let's
77:04 - actually go ahead and fix that i believe
77:07 - where was that in votes i believe let's
77:10 - go feed
77:12 - vote
77:13 - up votes minus downvotes and we're
77:15 - getting dummy data right here right so
77:17 - we want to destructure upvotes and we
77:20 - want to destructure down votes
77:22 - and remove these two guys
77:25 - and then where are we calling vote i
77:27 - think we're calling it in post and we're
77:30 - calling vote right here so we need to
77:32 - actually give it
77:33 - up votes
77:35 - and then we need to give it
77:37 - down votes down votes and then we need
77:40 - to destructure that
77:42 - how do votes get to here
77:45 - post post post should have access to
77:48 - upvotes and down votes actually yeah
77:51 - okay it's saying nan interesting feed
77:55 - index we're getting posts we're passing
77:58 - the post straight up we're then going
78:01 - into our post right here
78:03 - let's just console log this here and see
78:06 - what the heck is happening so console
78:07 - log up i will do it as an object and
78:10 - i'll just say up votes and let's refresh
78:14 - let's see what it says so it says
78:16 - upvotes is undefined interesting
78:20 - okay so we know that
78:22 - whatever we're getting for upvotes is
78:25 - actually not defined ah the error is
78:28 - actually a user error so it's actually
78:30 - my mistake okay so
78:31 - the error is this
78:33 - we need to go to our superbase and
78:36 - we called it upvote here singular but
78:40 - it's actually up votes so we need to go
78:43 - ahead and hit edit on this
78:45 - and change
78:46 - that name to upvotes and this to down
78:49 - votes
78:50 - okay and hit save all right now let's go
78:53 - back and look at that it already updated
78:57 - and we didn't even refresh how freaking
78:59 - cool is that okay let's try making
79:03 - down votes zero now so it should just
79:05 - straight up say 20 so i made them zero
79:09 - and look at that it's 20 again you saw
79:11 - that right i did not do a refresh and
79:14 - this isn't even like some real time
79:16 - uh subscription or any any of that this
79:19 - is just because i'm using
79:21 - swr
79:23 - right so actually let me let me make it
79:25 - so it's side by side so you can see it
79:27 - because this is pretty cool it's
79:29 - exciting so
79:30 - let's go ahead put this bad boy side by
79:33 - side and we will change the down vote so
79:36 - let's say 20 so it should go down to
79:37 - zero
79:38 - oh
79:39 - look at that
79:41 - that was slick and now let's go ahead
79:45 - and do down vote zero let's do up votes
79:48 - 2000
79:54 - slick
79:56 - that is so slick and how quickly it
79:58 - happens and everything that is
80:00 - absolutely beautiful
80:02 - wow
80:03 - that is awesome honestly this was
80:05 - actually one of my first times
80:07 - personally using swr because like we
80:09 - never used that hook but like lee did
80:12 - tell me to use it and i didn't really
80:14 - think much of it i'm like oh just a more
80:15 - convenient way to write your own hook
80:17 - and write your own fetch but no it's
80:19 - just a million times better and now i
80:21 - understand why everybody and their
80:23 - mother uses swr and it's one of the most
80:26 - downloaded packages so that's just an
80:29 - awesome experience and i'm just really
80:31 - happy that we got to see that together
80:33 - so there you go now we're actually
80:35 - retrieving the data and we're able to
80:38 - show it so with that said we're fully
80:41 - done
80:42 - setting up supabase we've verified that
80:45 - we've set it up we're able to pull posts
80:47 - we're able to get posts and we're able
80:49 - to show them and now we're gonna
80:51 - actually go ahead and start implementing
80:54 - that all of that data and adding it to
80:56 - our front end all right so just to make
80:59 - post look a little bit fuller kind of
81:01 - like uh
81:02 - you know making you get a food plate and
81:04 - you want to make it look nicer right
81:07 - let's do that here so i want to add a
81:09 - few more posts because i have one post
81:11 - right here that's great but let's just
81:12 - add a few more posts how are we going to
81:14 - do that let's just add it straight to
81:15 - our database or our super base let's
81:18 - just go here
81:19 - and um i will copy some of this text
81:22 - and then we'll hit insert another row
81:25 - okay and we will say david riccosi title
81:29 - is build medium with typescript
81:33 - uh content is gonna be
81:35 - that's up votes gonna be
81:38 - 653
81:40 - down votes are gonna be 225.
81:43 - let's hit
81:44 - save
81:45 - and look at that man that is
81:49 - cool
81:50 - wow that is awesome that just happened
81:52 - without refreshing and this is not a
81:55 - real-time database which is why it's so
81:56 - cool like swr is king swr is detected
82:00 - data changed and then it just refreshed
82:02 - everything on the fly and that's
82:05 - component specific that's using it and
82:06 - showing it right here so now we got two
82:09 - posts right here
82:10 - so if you add more posts it'll show more
82:12 - posts so we're good on that okay now
82:16 - next up what we're gonna actually work
82:17 - on is going to be the ability to create
82:19 - a new post meaning that if i go to this
82:23 - version of my app i can actually go
82:25 - ahead and hit create a post
82:28 - and i can write a new post i wonder how
82:30 - you are doing today
82:32 - i am doing
82:34 - wonderful
82:35 - by kevin
82:37 - o'leary okay cool mr wonderful right
82:39 - there so
82:41 - we added that and that's how we add new
82:44 - posts so there you go okay i should be
82:46 - able to go to this page so this is the
82:48 - page we're gonna create we're not gonna
82:50 - create the functionality right now okay
82:52 - so right now when you hit post really
82:53 - nothing is going to happen but we should
82:55 - be able to go to this new page now what
82:56 - here are a few things i notice right
82:58 - away so a few things i notice is my url
83:01 - route has changed and it says slash new
83:04 - so when that happens i'm already
83:06 - thinking that i'm actually going to be
83:08 - creating a new page inside of pages in
83:11 - react in my next app and that new page
83:15 - that i'm going to create is going to be
83:16 - called new and then in that that will
83:19 - allow me to actually come to this page
83:21 - right over here so what that looks like
83:24 - is in my pages
83:26 - i'm simply going to hit
83:28 - add file and i'm just going to do new.js
83:31 - so this is going to allow me to create
83:33 - essentially a new post okay that's what
83:36 - it is and we're going to say const
83:38 - new return
83:40 - let's just go div here slash div
83:44 - and i'll just put h1 that says new post
83:47 - export
83:48 - default
83:49 - new so we're just gonna have this be our
83:53 - page and it's gonna be pretty simple so
83:55 - that's all we're gonna render we should
83:57 - be able to go here by clicking the
84:00 - create a post button so i'm going to go
84:02 - into my components and inside of our
84:05 - components
84:06 - we have this create post button inside
84:08 - of our feed
84:09 - so we have next link here which is
84:11 - useful
84:12 - and when i go to create post you'll
84:15 - notice that we already have that added
84:17 - for you where it routes to slash
84:19 - new so when you route to slash new what
84:22 - next is gonna do
84:24 - is it's going to bring you to this page
84:26 - okay so basically this component right
84:29 - here
84:30 - let's go here this component right over
84:33 - here already has that functionality
84:36 - where when i click it it'll add slash
84:38 - new to my route so let's go ahead and
84:41 - click okay and let's see what's
84:42 - happening nothing is happening yet
84:45 - let's refresh and try again oh sorry i
84:48 - was clicking the wrong wrong wrong wrong
84:51 - wrong one that's not that's not what i
84:52 - meant to click this right here when we
84:54 - click this it will route us to slash new
84:57 - so let's click it and boom there we go
85:00 - we're on the new post page right boom
85:02 - right there the routing is already done
85:05 - which is really nice and react you don't
85:06 - have to
85:07 - worry too much about routers and routing
85:10 - and on this page we'll have a couple of
85:12 - things on our post page so one thing i
85:15 - definitely want to have here if i go
85:17 - look at this and click create post my
85:20 - header actually remains there my header
85:22 - never goes away and my about is actually
85:24 - there as well so those are a few
85:26 - components i'm definitely going to need
85:27 - to import so i'm going to say import
85:29 - header from we'll do components slash
85:35 - and i'll say header and i'll also do
85:38 - import about from
85:40 - component slash community ship out okay
85:44 - and so we're gonna
85:46 - show header
85:47 - okay let's go
85:49 - header like this and then we'll also
85:51 - have about like that so we'll definitely
85:54 - have these so let's see if it shows up
85:56 - in our app so it says it can't resolve
85:59 - header
86:00 - and it's having trouble resolving about
86:03 - uh so about is actually with the capital
86:06 - a so let's do it like that okay now i
86:10 - believe we should be good there we go
86:13 - let's make this full screen right here
86:15 - and we can see our about component is
86:17 - showing up and we can see our header is
86:19 - showing up too so both of our components
86:21 - are showing up now let's add a wrapper
86:24 - around it and style it so i'm going to
86:26 - just go ahead and say class name also
86:28 - flex
86:29 - min height of the
86:32 - green
86:33 - and then we'll put it in flex column
86:36 - give it a background of black and then
86:39 - give it a text of d7 dc okay great so my
86:44 - styling for the header part is done or
86:48 - sorry for the entire like as a wrapper
86:50 - is done and now we're gonna go ahead and
86:52 - style
86:53 - our wrapper as well or about as well
86:56 - sorry so let's go ahead and wrap it here
86:59 - and i'm gonna go ahead and say class
87:01 - name we'll say hidden okay
87:04 - so now it's only going to show up
87:07 - when it's one-third of the screen and
87:09 - otherwise it's gonna stay hidden all
87:11 - right so
87:12 - up until two-thirds of the screen
87:14 - essentially it's not gonna show up so
87:15 - that's that's kind of what we want
87:17 - because if we're in this mode we don't
87:18 - want about showing up and taking up the
87:20 - whole screen okay so that right there
87:22 - just adds that little mobile
87:24 - responsiveness touch which is really
87:26 - nice okay and then we need to actually
87:28 - work on a new component it's going to be
87:29 - called post form and this will allow us
87:33 - to
87:34 - add a post or create a post so let's go
87:37 - ahead and add that component in now so
87:40 - we're i'm just going to go ahead and do
87:41 - my import statement already i'm going to
87:43 - say import post form from opponents
87:47 - slash new slash post form okay that
87:51 - already tells me what type of route i
87:53 - need to create here so let's make this a
87:55 - little bit bigger okay so i need to
87:58 - go inside of my components create a new
88:01 - folder it'll be called new
88:03 - and inside of that folder i will create
88:06 - a new file it'll be called post form all
88:08 - right and for now what i'll do is i'll
88:11 - just say const post form
88:14 - turn
88:15 - and we'll just make it div this div will
88:19 - have an h1 in there that says post form
88:23 - and we'll go here and we'll just say
88:25 - export default post form okay and then
88:29 - let's go
88:30 - back
88:31 - to our pages and new.js
88:34 - and then here we'll have that post form
88:36 - show up now the question is where do we
88:39 - have that post form show up let's just
88:41 - pop that here for now and let's just see
88:43 - what happens i'm gonna put post form
88:45 - right there for now let's go to our app
88:49 - and let's refresh and see if post form
88:51 - is actually showing up anywhere so post
88:53 - form currently is not really showing up
88:56 - anywhere let's see
88:58 - i'll go to post form okay interesting
89:02 - there we go so it was hiding behind the
89:04 - header okay now it's showing up you can
89:06 - see post form is showing up right i just
89:08 - have to paste it a couple of times and
89:10 - so yeah so basically this component is
89:12 - showing up it's connected
89:14 - and now we can actually start working on
89:16 - our post form component and so for our
89:18 - post form component let's just do
89:21 - obviously this will be a form in here so
89:24 - but we'll start this here with saying
89:26 - create a post
89:27 - create a post okay and then since it's a
89:30 - form we're probably going to have like
89:31 - two input fields this is going to be
89:33 - input field this is probably going to be
89:34 - a text area because this is a big text
89:37 - and i can also change its sizing
89:40 - i imagine there's going to be some a
89:42 - wrapper that's going to have a border
89:43 - radius and a gray color so i can already
89:45 - kind of imagine a bunch of things let's
89:47 - make our input fields so i'm going to
89:49 - say input and then make it self-closing
89:52 - and then for this input i'm going to say
89:55 - class name is going to be style dot
89:58 - input we'll create the styling for it
90:00 - soon enough
90:02 - and then type is going to be
90:03 - [Music]
90:04 - text placeholder
90:07 - okay so let's go back
90:09 - and let's create
90:11 - style objects we're gonna say style and
90:14 - we will just leave it empty for now okay
90:16 - uh
90:17 - just gonna paste this a couple of times
90:19 - so we can see this so now you can see
90:21 - input is showing up now let's make our
90:23 - text area okay and that'll also be
90:25 - self-closing so i'll say text area and
90:30 - for class name we'll also do style as
90:32 - input and the name of this will be
90:35 - content the id of this will be content
90:39 - for column we'll make it 30 columns and
90:41 - for rows
90:42 - it's calls plural and for rows we'll
90:45 - make it 10
90:47 - and then we'll add a placeholder that
90:49 - says text
90:51 - required like that there we go so we got
90:54 - an input and we got a text area
90:57 - so so far so good now obviously
91:00 - this looks horrendous so what we need to
91:03 - do is we need to actually add a wrapper
91:05 - around everything
91:07 - so we'll say class name
91:09 - style.wrapper all right so let's create
91:11 - the styling for that so i'm going to say
91:13 - wrapper and we'll say flex
91:16 - flex column space y6 okay so now we have
91:21 - some spacing in between on the y-axis
91:23 - some spacing in between these two we
91:25 - made a flex column so that looks better
91:27 - okay so that yeah it looks significantly
91:30 - better now let's go ahead and get rid of
91:32 - all of these h1s and let's see if this
91:34 - still shows up postal shows up yeah kind
91:37 - of still shows up here let's go back
91:39 - inside of new.js and make it so we can
91:42 - actually see post form because right now
91:44 - it just keeps getting hidden and that's
91:46 - kind of annoying so let's go div
91:48 - wrap it around this
91:50 - and i'm going to say class name and
91:53 - we're going to make the width full
91:54 - okay then we're just going to do that
91:57 - okay so this will take on a large screen
91:59 - it'll take two thirds of the screen okay
92:01 - otherwise it's gonna be like width full
92:03 - that's what we're saying here okay so
92:05 - see two thirds if i get rid of this
92:08 - then it'll just keep taking the full
92:10 - screen and that's not what we want okay
92:12 - we want it to be like two-thirds right
92:13 - here okay and then we want to wrap this
92:16 - inside of a main so we want to wrap
92:18 - everything inside of a main so i'm gonna
92:20 - make main let's finish wrapping it up
92:23 - until here and i will grab this and
92:26 - indent that in there and so for main i'm
92:28 - going to say class name we'll go mx auto
92:31 - okay margin top 16 so now we're going to
92:34 - give it margin top
92:36 - that allows you to actually see the damn
92:38 - thing right otherwise it's so hard to
92:40 - freaking see
92:41 - where it is okay and mx auto just gives
92:45 - it margin horizontal margin in the
92:47 - center so then it can actually center it
92:49 - okay and then we'll go flex
92:52 - on this we'll go with full and then
92:54 - we'll say max width is going to be 5 xl
92:57 - i'll flex 1 to it i'll give it a space
93:01 - and of 6 in between each on the x-axis
93:04 - we'll give a padding of
93:06 - 5 and then a padding of six horizontal
93:09 - okay that's main so there you go look at
93:11 - that that is absolutely gorgeous now
93:14 - everything is showing up in its right
93:16 - place where it's supposed to show up
93:17 - okay now what we have to do is inside of
93:19 - our post form we have to style our input
93:22 - so let's create the styling for that so
93:24 - i'm going to say input and for the
93:26 - styling of input we're going to say
93:29 - give me a background color first of all
93:31 - so let's start with that 1a
93:35 - b okay so already looks way way way
93:38 - better but i don't like when i click it
93:40 - it shows those things so we'll fix we'll
93:42 - fix all of that
93:44 - okay we'll give it a border as well
93:47 - and we'll give it a border
93:49 - of a specific color so i'm going to set
93:51 - 3 4 3 5 3 6 here so now the borders will
93:55 - just look a little bit tad bit cleaner
93:58 - we'll give it a padding on the x-axis of
94:01 - 4. there we go so now it doesn't really
94:04 - look like i'm writing super close to the
94:06 - edge we'll give a padding on the y-axis
94:08 - of two so it doesn't look like we're
94:10 - writing super close to the top so it
94:13 - looks way nicer now and then we'll add
94:15 - some
94:16 - text we'll text left it we'll tack make
94:19 - the text small we'll make the text white
94:22 - and we'll just say hey
94:23 - outline should be none when we focus on
94:26 - it okay there you go so now focus on
94:29 - this
94:29 - no outline and when i write it's white
94:32 - okay so input is looking really good now
94:36 - now what we have left besides the input
94:38 - is uh are really just a couple of things
94:42 - i mean we have most of the styling here
94:44 - done
94:44 - we just need to make sure that we also
94:46 - style the title so when we're writing in
94:49 - there that looks like an actual title
94:52 - and not like a measly little text so
94:55 - for our title input where we're gonna
94:58 - actually add the style
95:01 - is right here where we're actually
95:04 - doing the title oh we got rid of the
95:06 - title so let's go here and actually
95:08 - create our own title whoops my bad
95:11 - class name okay we'll do style.title and
95:14 - then we'll write create a post
95:18 - just like that okay now let's take a
95:20 - look boom create a post is here so we'll
95:22 - style that bad boy alright so for the
95:24 - styling of this i'm gonna say title and
95:28 - we'll do border we'll give it a border
95:30 - at the bottom we'll give it a border of
95:32 - a specific color
95:34 - and then i'll give a padding on the bot
95:36 - a padding bottom of three will make the
95:39 - text
95:40 - very very large okay and then i want to
95:43 - make the font medium there we go so now
95:47 - create a post
95:48 - looks very clean okay so we're good on
95:50 - that
95:51 - and then
95:52 - all we want now is we want to add a post
95:55 - button as well so right underneath all
95:57 - of this
95:58 - we'll go ahead and create a button that
96:00 - button will say post and we'll say class
96:04 - name for this is going to be style
96:06 - post button okay so the button is right
96:08 - there i can click it won't be doing
96:10 - anything won't be doing much right now
96:12 - and then we need to style that button so
96:14 - let's go here and i'll say post button
96:17 - okay and then for the styling of this
96:20 - button
96:21 - we want to give it a background color so
96:23 - background gray 200 okay so now we we
96:26 - see that there's something there behind
96:28 - it we'll give it a padding of four
96:31 - padding at the top of 1.5 we'll make the
96:34 - text of this extra small we'll make the
96:37 - font semi bold we'll give a specific
96:40 - text color
96:42 - one a one b
96:44 - and we'll make it rounded
96:46 - full
96:47 - there we go so now boom look at that
96:50 - it's nice right it just says post and we
96:53 - can create our post okay and now what we
96:55 - need is we need a post button container
96:58 - actually
96:59 - and so let's go right here let's wrap
97:01 - this up in a div say div
97:04 - close the div right here this is going
97:06 - to be class name is going to be
97:08 - style.post
97:10 - button container post button container
97:14 - like that and let's go ahead and style
97:16 - this bad boy we're going to give it a
97:18 - flex justify it everything to the end
97:21 - and then give it a padding top of two so
97:25 - now it looks much nicer but if we look
97:27 - at the final version see in the final
97:29 - version we actually have a padding
97:31 - around the whole a background around the
97:33 - whole thing a wrapper which we don't
97:35 - hear
97:35 - so let's go ahead and add that styling
97:38 - to this now so basically we need to go
97:40 - and wrap our entire input okay so
97:44 - essentially it's our form like think of
97:46 - this input here and that text there and
97:49 - that button as a form and so we're gonna
97:52 - wrap that entire thing in there
97:55 - that's interesting all right so let's go
97:58 - here and i'm gonna say div
98:00 - take it all the way down to the button
98:03 - and post it okay and then the styling
98:05 - that we're going to give it is we're
98:06 - just going to say class name of this is
98:08 - going to be flex i'm going to make a
98:10 - flex column space we're going to go y2
98:13 - on this
98:14 - rounded and then we're gonna give it a
98:16 - background color
98:17 - this background color right here and
98:20 - then we're gonna give it a padding of
98:22 - four
98:22 - okay so now
98:24 - you can see the whole thing is nice and
98:27 - together and the post button shows up
98:30 - right there right so now that they're
98:32 - looking a lot more similar
98:34 - now the front end for our create a new
98:37 - post
98:38 - is completed because i can write here
98:40 - and i can hit post but the part that's
98:43 - not completed is the ability to actually
98:46 - write to the database meaning when i
98:48 - actually make a post here it should get
98:50 - stored right over here so that's the
98:53 - functionality we're gonna work on and
98:55 - finish right now all right now inside of
98:57 - our post form we're going to create a
98:59 - new function that's going to allow us to
99:00 - write to the database and store stuff so
99:03 - we're going to say const create post
99:05 - that's going to be async and we're going
99:07 - to take in an event as an argument and
99:09 - we're just going to prevent default on
99:11 - that okay so that's just so saying
99:14 - that's we're just basically saying hey
99:16 - don't refresh the page okay that's it
99:20 - all right now what we're gonna do is
99:22 - we are gonna this is gonna be really
99:24 - simple honestly we're going to go ahead
99:26 - and await super bass okay and um we're
99:29 - going to go into the from feed
99:31 - and
99:32 - and into the feed okay and into the feed
99:35 - table
99:36 - we're just going to insert
99:38 - an object okay
99:40 - and that's gonna be
99:41 - author
99:42 - let's do it like this
99:44 - author we're only just gonna insert one
99:46 - object okay we could probably insert
99:48 - multiple but she's gonna do one author
99:50 - is gonna be let's say
99:52 - lever
99:54 - programmer comma title is going to be
99:57 - writing to this from my front end
100:02 - meaning i'm not you know literally
100:04 - writing from the database i'm writing
100:05 - this from the front end okay and then
100:07 - the content
100:09 - will be did this work i believe it
100:12 - worked okay put a comma here and a comma
100:15 - here great and that's essentially it's
100:19 - that's that easy to actually write to
100:20 - the database but
100:22 - lastly what we're going to do is we're
100:23 - going to wrap it in a track catch block
100:26 - so
100:27 - here's what we're going to do okay so
100:29 - we'll we'll wrap this whole bad boy in a
100:32 - try catch block put that
100:34 - here okay boom like that okay so we're
100:37 - going to try this and then if it doesn't
100:39 - work we're going to catch the error
100:41 - and then we'll simply just console.log
100:44 - console
100:45 - error the error so it just pops up like
100:49 - an error okay and then we're gonna say
100:51 - finally
100:52 - okay we're gonna router.push you to the
100:56 - home page so once the post actually
100:58 - succeeds we'll just take you back to the
101:00 - new homepage because you don't need to
101:02 - be on the new page anymore okay so for
101:04 - that we're gonna need some routing so
101:06 - let's just bring in
101:08 - import
101:09 - use router
101:11 - from next slash router all right and
101:14 - then what we wanna do is get access to
101:17 - that router so we're going to say router
101:19 - use router okay so there we go so now to
101:22 - that router we're just going to push
101:24 - okay and then we're also going to just
101:26 - keep track of a loading state and that's
101:28 - going to be helpful later when we
101:30 - actually add a loader for now it's just
101:33 - going to help us have
101:34 - a state variable okay so boom i'm just
101:37 - going to say loading and
101:40 - we're going to say set loading okay i'm
101:42 - going to say use state is false you can
101:44 - you can even call it is loading
101:46 - everywhere s is loading set
101:49 - is loading okay so we can actually just
101:51 - go ahead and set is loading to be
101:55 - false here because well
101:57 - it's done being loaded and it's done and
102:00 - then here we can set is loading to be
102:02 - true because the loading has just begun
102:05 - here and then once you're done finally
102:07 - boom done okay so that is
102:11 - great okay even if we have an error
102:13 - right we want to do a finally and then
102:15 - just go back and say loading is done so
102:18 - this
102:19 - should help us write to the database now
102:22 - there's just a few things we have to
102:23 - take care of here in our post form we do
102:26 - need to actually track what the user is
102:29 - typing and where they're typing it so
102:30 - let's first of all import use date and
102:33 - things like that since we need access to
102:35 - them so let's go use state
102:37 - from react so the user is going to be
102:39 - typing data here we need to keep track
102:41 - of this state this state and the state
102:44 - of the button being pressed okay or just
102:46 - a button being pressed having an on
102:48 - click method okay so let's go ahead and
102:50 - go title set title
102:52 - and initial stay is going to be empty
102:55 - and the next state we need to keep track
102:56 - of is the content so it's a content set
102:59 - content and i'm going to make use state
103:02 - is going to be empty for this okay so i
103:04 - have loading title content and router
103:07 - those are
103:09 - these three are the main states that i
103:11 - need to keep track of now we need to
103:13 - keep track of it here as well so for
103:15 - this input i'm going to say the value of
103:18 - this is title
103:19 - and then on change i need to grab the
103:23 - event and i need to say set title to
103:26 - whatever is being written in there
103:28 - okay just like that we're gonna do on
103:31 - change and then we're gonna do a similar
103:33 - thing for text area okay so just copy
103:36 - paste that except for value we're gonna
103:39 - say content right and then for the rest
103:42 - of this we're gonna say set content to
103:45 - be whatever the user is typing in at
103:46 - that time okay so
103:48 - that means we're good and we're tracking
103:50 - that and then we just need to add a on
103:53 - click method onto the button so let's go
103:55 - ahead and do that now so we're going to
103:58 - say
103:59 - on click and we're going to give it this
104:01 - method create
104:03 - function that we created create post so
104:05 - on click run this
104:07 - okay so let's see if we're actually able
104:10 - to write to our database we have to
104:12 - probably import supabase as well because
104:14 - we don't have access to it here so i'm
104:16 - going to say import supabase from and
104:19 - we're gonna say services slash supabase
104:23 - clients okay great
104:25 - and now let's go ahead and
104:28 - write something and let's see if it pops
104:30 - up here so i'm gonna say test
104:32 - one and let's hit post let's see if
104:35 - anything happens something happened
104:38 - okay
104:39 - let's refresh and see did a new post get
104:42 - added that would be really cool if it
104:44 - did maybe it didn't oh
104:47 - it worked that was so nice and easy look
104:51 - at that and it says clever programmer
104:54 - writing the writing to this from my
104:56 - front end okay that was
104:59 - incredibly easy to do right writing this
105:01 - from a front end boom boom oh our post
105:04 - actually needs to read the content so
105:06 - it's not reading the content so let's
105:07 - make sure let's just see what's
105:08 - happening with our post component
105:09 - because that's not correct so i'm going
105:11 - to go into
105:13 - our post component feed slash index.js
105:17 - yeah now let's go inside of our post
105:20 - component so let's go
105:22 - to common let's go to post
105:24 - and inside of here
105:27 - ah yeah so this is going to be content
105:31 - content okay because i had it hard coded
105:35 - to something else
105:36 - okay let's destructure content as well
105:40 - because we're past that down and that
105:42 - should work there we go nice look at
105:46 - that did this work can't believe it
105:48 - worked right into this from my front end
105:50 - this tutorial will show you step by step
105:52 - on how to become a developer
105:54 - perfect
105:55 - okay this is really really solid so
105:57 - let's try adding a new post let's go
105:59 - here new post wow
106:02 - this is incredible
106:05 - like this let's hit post and let's see
106:08 - if it happened let's refresh
106:10 - oh it did not happen maybe we hard-coded
106:13 - some stuff so let's see what seems like
106:15 - we did something a little bit funny ah
106:18 - yes we've hard-coded data so for example
106:20 - author title and content we've
106:22 - hard-coded it so we need to not
106:24 - hard-code it okay so author will leave
106:26 - hard-coded because we'll be able to once
106:29 - we add authentication we will to keep
106:30 - track of the logged in user but title we
106:33 - can actually certainly change so title
106:36 - is going to be
106:37 - this because it's going to be the title
106:39 - so i can actually just go ahead
106:41 - and replace that with title and then put
106:43 - a comma so just so you know something
106:46 - saying title is the same thing as saying
106:47 - title comma title
106:49 - title colon title so you just say title
106:51 - here and then for content you can just
106:53 - do the same trick all right so there you
106:56 - go and now let's make a new post let's
106:59 - go ahead test two let's write it boom
107:02 - there you go look at how fast this is
107:04 - right fast fast boom post boom and it
107:08 - all feels like it's happening real time
107:11 - even though we're not doing real time
107:13 - this is so exciting so there you go now
107:16 - everything is working everything is
107:17 - working dynamically the only thing
107:19 - that's not necessarily dynamic is
107:22 - the author and we'll get to that by
107:25 - adding authentication next right before
107:28 - we do that let's just actually add a
107:31 - loader so we can see a nice little
107:33 - loading screen as our post is getting
107:35 - added so let's create loading and where
107:37 - we're going to create it is we can
107:39 - actually just create it inside of
107:41 - components so let's go to components and
107:43 - hit a new file and we will just say
107:46 - loading.js so it's going to be a
107:48 - component and inside of loading.js we'll
107:52 - try to go through this one kind of fast
107:54 - so we'll import
107:55 - loading animation okay from and we have
107:58 - this it's inside of assets so if you
108:01 - fork this then you should have access to
108:03 - loading animation as well okay so we're
108:05 - going to say loading animation from oops
108:08 - we'll go into assets and we'll say
108:10 - loading animation just like that
108:13 - and then we'll say const cons let's go
108:15 - loading first all right and i'll say
108:18 - return we'll create a div and it's going
108:21 - to be our wrapper so i'll say class name
108:23 - name is going to be style.wrapper and
108:26 - then we'll plug in our loading animation
108:30 - and we'll say style is and then
108:33 - we're given an h2 i will say class name
108:36 - is style.loading text we'll say loading
108:41 - dot dot dot okay and then we'll just
108:44 - wrap up the styling for this so for the
108:46 - wrapper
108:47 - we need it to be
108:49 - fixed inside of zero z index of 50
108:52 - because we wanted to take over the whole
108:54 - screen because what we wanted to look
108:56 - like is if i was to make a new post here
108:59 - it takes over the whole screen right and
109:01 - it has a background gray overlay and
109:03 - then you saw that it has the loading
109:05 - screen pop up and it and it dominates
109:08 - the rest of the screen right so that's
109:09 - why z
109:10 - 50 here is important
109:12 - and then we're gonna say take the entire
109:14 - height of the screen the entire width of
109:16 - the screen flex column item center it
109:20 - will justify center we'll give a gap of
109:23 - six
109:24 - uh overflow hidden and then background
109:26 - black but not completely black so we'll
109:29 - give a slash 80 right here perfect so
109:33 - that's our wrapper loading icon will be
109:36 - margin right of 2 height of 20 width of
109:38 - 20. we'll animate a spin in there add
109:42 - fill white
109:43 - and then let's do text gray
109:45 - 600 for this
109:47 - and then we'll do loading text and for
109:50 - this i'm going to say text center we'll
109:52 - make the text large
109:54 - let's make the font semi bold and then
109:56 - we'll make the text also white okay so
109:59 - that's our loading that's really it
110:01 - let's go back to our post form let's
110:03 - make sure we're exporting this let's
110:05 - export default loading okay now let's go
110:08 - to post form so i'll go to
110:12 - new post form let's import that so let's
110:16 - go ahead and say import
110:18 - loading from and i believe it's loading
110:22 - close by to us right it's just one
110:24 - folder behind let's just double check
110:26 - i'm in new yeah i get that one folder
110:28 - and then i have access to loading okay
110:30 - great so
110:31 - we have access to loading here and now
110:34 - we want to show the loader
110:36 - pretty much all over the screen so let's
110:38 - go here and the loader is gonna be right
110:40 - over here and we're gonna basically say
110:43 - if the state is loading in that case
110:46 - show loading okay so show the loader or
110:49 - loading okay and you can do is loading
110:52 - so if this loading is true then show
110:54 - loading otherwise don't show loading
110:56 - okay so we'll just do is loading is
110:58 - false show loading so that way when i
111:00 - click into create a post it should be
111:01 - showing loading the whole time there we
111:03 - go so it's working right and now i'll
111:05 - change the state true okay and now stop
111:08 - let's make a new post and see the
111:11 - loading came up so beautiful the loader
111:13 - is locked and loaded and it's
111:15 - no pun intended and it's working
111:17 - perfectly as expected now let's go on to
111:20 - the next step and add authentication so
111:22 - now we're going to go ahead and create
111:24 - this login page right over here so if i
111:28 - log out of this and i go here this is a
111:31 - page that will bring me to so this is
111:33 - the page that we're trying to make now
111:37 - okay that right there so let's get to
111:40 - work all right so first things first
111:42 - this is going to be a component rather
111:45 - than a page
111:47 - and we'll just add it to our components
111:50 - without putting it in any subfolders
111:52 - let's just add it here right next to
111:54 - loading so click components click a new
111:56 - file and then we're going to go ahead
111:58 - and say
111:59 - login.js okay now since the component we
112:02 - know the drill okay return let's do div
112:06 - let's say that div returns and h1
112:09 - log in and we'll say const export or
112:13 - sorry export
112:14 - default log in all right so when we
112:18 - think about our home page let's take a
112:20 - look at this
112:21 - if i if i look at this i need just this
112:24 - image right here and probably this image
112:27 - right here so it's probably only two
112:28 - images that i really need
112:30 - okay and you can copy the link from mine
112:33 - or you could just find them on your own
112:34 - and paste them here so there's two
112:36 - images other things i noticed is
112:38 - everything is center aligned right
112:40 - everything is in the center
112:41 - vertically horizontally so i know i'll
112:44 - need to center everything this is a
112:46 - button i can also see that it has
112:48 - rounded corners so i know there's
112:50 - something border radius action happening
112:52 - i also know there's a border happening
112:54 - and i know it's a white color border
112:56 - it's a border white this most likely is
112:59 - a button okay so there's a couple of
113:01 - things that i'm noticing already off the
113:03 - bat which is going to make my job of
113:05 - doing the front end work a little bit
113:07 - easier now we need to just make sure
113:09 - that we can actually render this
113:11 - component so let's go back to our index
113:14 - so we're gonna go
113:16 - to index.tsx
113:19 - and let's just make sure that we're
113:20 - rendering this and how we're gonna
113:21 - rendering how we're gonna render this is
113:23 - inside of this wrapper okay we're gonna
113:26 - say we're gonna check if the current
113:28 - user is logged in and if they are then
113:31 - we're gonna show them all of this and if
113:34 - they aren't then we're gonna show them
113:37 - something else we're gonna show them the
113:38 - login page it's like hey are you gonna
113:40 - see the login page or are you gonna see
113:42 - the home page which page are you gonna
113:44 - see so let's add that right here okay so
113:47 - is user logged in if
113:51 - so in this case
113:53 - this is a ternary operator so let's put
113:55 - a question mark here because user logged
113:57 - in question mark if they're logged in
114:00 - then what we want to do
114:02 - is
114:03 - show them let's just say the home page
114:06 - otherwise we want to show them let's
114:08 - just say the login page okay so that's
114:11 - effectively what we're doing okay so i'm
114:14 - gonna put parentheses around here and
114:17 - we're gonna take all of this code right
114:19 - here
114:20 - and
114:20 - i'm just gonna go ahead and cut it
114:23 - and we're just gonna paste it right here
114:25 - because that's the definition of home
114:26 - essentially and then for this login
114:34 - boom okay we can just put that right
114:36 - there so we can see there's a very clear
114:38 - divide this or that okay let's see is
114:42 - there anything crashing yet
114:44 - not crashing yet so that's a good sign
114:46 - let's go hello okay let's refresh okay
114:49 - let's just double check that everything
114:51 - hasn't crashed so it looks like it has
114:53 - so let's just go yarndev and let's
114:55 - restart our server and then just wait a
114:57 - couple of seconds until this is ready to
114:59 - go let's just actually um have an empty
115:02 - fragment right here
115:04 - okay and uh empty fragments for now it's
115:07 - just that empty fragments instead of
115:09 - that hello okay so let's make sure that
115:11 - that
115:13 - probably works better and then we'll
115:15 - also need probably some kind of fragment
115:18 - action here so there is a div if there's
115:21 - a current you ah actually let's do it
115:23 - this way let's grab this wrapper and
115:25 - let's put that wrapper here and let's
115:28 - end that div
115:30 - here instead let's grab this div and
115:32 - let's end that
115:34 - um
115:35 - okay
115:36 - so everything is in the wrapper and push
115:38 - this here okay so there we go and then
115:40 - this entire thing will wrap this in an
115:43 - empty gsx fragment so there we go mtgs6
115:47 - fragment wrap this entire thing up in a
115:51 - div so show this
115:53 - right or
115:55 - show this
115:56 - these are the two things that we're
115:57 - gonna show okay so now it should be
115:59 - working let's refresh and there we go
116:02 - okay so right now we're basically saying
116:05 - hey is the user logged in the true the
116:07 - value of this is true so since that's
116:09 - true it's going to show the home page
116:11 - but if we say the user is not logged in
116:13 - so i'll just put a boolean false here
116:15 - i'll just say not logged in then it'll
116:17 - show this
116:19 - okay so that's working now i need to
116:21 - just replace this guy here with just a
116:24 - login component so i'm going to go ahead
116:26 - and say
116:27 - login like that okay and then we'll
116:29 - import login so i'll say import
116:32 - login from
116:34 - import login from and we'll say
116:36 - components and we'll say login there we
116:39 - go so now our login component is
116:41 - connected and is showing up okay now if
116:44 - you want to make this nicer what you
116:45 - could do is you could just create a sub
116:47 - component i love to actually do this and
116:49 - you could create this here you can just
116:51 - say const
116:52 - home page
116:57 - okay and you say return and you could
116:59 - pop that in there so now you have this
117:01 - component called home page and so what
117:03 - you could do is you could just replace
117:05 - all of this with home page and now it's
117:08 - a component and so like look at that it
117:10 - already looks so much cleaner as code if
117:12 - i get rid of it it will bring you to the
117:15 - home page oh now it says my post is not
117:18 - defined so
117:19 - let's see my posts
117:22 - okay home page we will give it
117:25 - my posts is equal to my posts
117:28 - and um
117:29 - it will destructure my posts okay so now
117:32 - it has access to my posts perfect and
117:36 - we can so look at that already it's
117:38 - clean and we can just make it even
117:39 - cleaner by it's up here
117:41 - right and if you think about it if i
117:43 - don't have the wrap on and i just go
117:45 - full screen mode for a second you don't
117:47 - need these parentheses anymore either
117:49 - okay we can bring this on the same line
117:52 - you don't need these parentheses anymore
117:54 - okay
117:55 - look at that isn't this way easier to
117:58 - read than what we were reading earlier
118:00 - right so if the user is
118:02 - is user logged in if they are
118:04 - then show them the home page otherwise
118:06 - show them the login page so this is like
118:08 - way cleaner to read so that's why i like
118:10 - to do it like this it's a really nice
118:13 - way and you know in my opinion honestly
118:15 - it's like this is great okay so we're
118:17 - good
118:17 - on this side now we just have to make
118:19 - sure everything's actually showing up
118:21 - the way we expect it to so we're having
118:23 - some kind of error here
118:24 - oh let's refresh
118:26 - they're still there
118:27 - let's see
118:29 - save okay so i don't know how this
118:31 - happened but i removed the equal sign in
118:34 - my post so there you go my post is equal
118:36 - to my post so that was causing a syntax
118:39 - error and causing it to break so let's
118:41 - go ahead and refresh now and it should
118:43 - be fixed okay so we're just going to
118:44 - give it some time to compile
118:46 - and boom there we go we're back in
118:48 - business baby okay so now this is a nice
118:51 - little one liner
118:52 - and then we just wrap it in a gsx
118:54 - fragment obviously so this is good okay
118:57 - homepage and login now for our login the
119:01 - logic is we created a different
119:03 - component for login obviously so let's
119:05 - go back
119:06 - to that component it's in slash login
119:08 - okay and then in our login remember we
119:12 - wanted to have that image so let's go
119:14 - ahead and go let's first of all put the
119:17 - code in the state so we could see this
119:19 - the whole time so let's go ahead and say
119:21 - that the user is not logged in so let's
119:23 - just go
119:24 - hard coded
119:25 - now the login page should be showing up
119:27 - the entire time as we're editing it and
119:29 - working on it okay and now this is going
119:32 - to be an image okay
119:34 - and this image is going to have a class
119:37 - name and we'll give it a height so it's
119:39 - not like too
119:41 - massive and then for source i'm going to
119:43 - copy paste this but you can definitely
119:47 - you know either copy what i've written
119:49 - or just copy a different reddit image
119:52 - and pop it in so we'll have this okay
119:55 - and that's it as far as the image is
119:57 - concerned so we got that image and then
119:59 - we're going to need another image which
120:01 - is going to be our
120:03 - google image right so let's go ahead and
120:06 - grab that so we're going to source
120:09 - and i'll copy and paste this here and
120:11 - once again
120:12 - you can feel free to
120:14 - find a google image or just write this
120:16 - one so i have two images and now i have
120:18 - them both here great now i need to
120:20 - control the size of this so i need to do
120:22 - class name and we'll give it a height of
120:24 - 6 and a width of six that'll make it
120:27 - instantly smaller and now what i need to
120:30 - do is i wanna
120:31 - center align everything so let's go
120:33 - ahead and say class name
120:36 - style.wrapper and let's go at the top
120:38 - and we'll say style
120:40 - and wrapper and then for wrapper the
120:43 - styling that i want to do here mainly is
120:45 - flex give me a min height of this entire
120:48 - screen give me flex column give me items
120:51 - in the center and then also justify it
120:53 - in the center too
120:55 - and then give it some spacing on the y
120:58 - okay so there we go let's go const style
121:02 - keep saying style is not defined but it
121:04 - is now there we go okay so now it's in
121:06 - the center now the google
121:08 - one remember is going to be a button so
121:11 - let's wrap this in a button okay
121:14 - and this button is going to have a
121:16 - styling so we're going to say class name
121:18 - for this going to be
121:20 - style.login button let's go ahead and
121:23 - create that styling here so i'm going to
121:25 - say login
121:27 - button and for the login button we're
121:29 - going to create some simple styling so
121:31 - we're going to say go ahead and let's
121:34 - actually add the text in too so you
121:36 - could see everything happening all at
121:37 - once so inside of this button right
121:40 - underneath this image we're gonna have a
121:42 - span tag okay we'll give it a class name
121:45 - of style.loginbuttontext
121:48 - and it'll say sign
121:50 - in with google like this
121:53 - so now let's create a styling for the
121:55 - login button so we'll say group okay and
121:58 - then we're going to go ahead and say
121:59 - flex
122:01 - item center sp
122:03 - center
122:04 - we'll give it some horizontal space
122:08 - okay we'll give it a
122:11 - border gray of 300 and it borders you
122:15 - could see it a padding of four and it
122:17 - should hover white when i hover over it
122:21 - there we go boom
122:26 - great so now when i hover over it it
122:27 - hovers white
122:29 - okay so the login button is good now
122:31 - let's create styling for login button
122:33 - text
122:34 - and i'm going to make font bold and i'm
122:36 - going to say hover
122:38 - and we'll say text black
122:41 - there we go look at that that's super
122:43 - clean so right when we hover the text on
122:45 - that becomes black and the text on the
122:47 - other one becomes white and with using
122:50 - tailwind what's really nice is we don't
122:52 - even necessarily have to mess around
122:53 - with using a react here because before
122:56 - if you remember if you ever built the
122:58 - ubereats clone with me or something like
123:00 - that we would have to do react to keep
123:02 - track of the state of the color of each
123:05 - text and then
123:06 - flip it this is just way nicer of a of a
123:10 - way of doing it so just to show you what
123:13 - this group thing is kind of nice so if i
123:15 - actually get rid of this group over here
123:17 - and get this get rid of this group over
123:19 - here
123:20 - now when i hover over when i hover over
123:22 - the button container the whole thing is
123:26 - white right and only when i hover over
123:28 - the text it becomes black
123:30 - but
123:31 - when we group them together like this
123:34 - we have button text and button login
123:36 - button when we group them together like
123:38 - this now when i actually hover over
123:41 - both of them at the same time
123:42 - automatically alternate color so that's
123:45 - the with the group okay so all of our
123:48 - styling for this page is done if i look
123:51 - at this page this is exactly what i want
123:53 - it to be now all we have to do is make
123:56 - sure that our sign in with google
123:59 - actually works all right so let's go
124:02 - ahead and import superbase so we have
124:04 - access to that so we're going to import
124:06 - a couple of things we're going to import
124:08 - supabase
124:09 - from
124:10 - services slash supa base client we're
124:14 - also going to get loading but that is
124:18 - for now we'll get it we'll yeah we can
124:20 - just get it now that's fine because
124:21 - we're already we've already built it
124:24 - we're going to go ahead and import use
124:26 - date because we need to keep track of
124:28 - certain states all right all right so as
124:30 - we continue working on this
124:32 - authentication just make sure that you
124:34 - have done this part earlier when i
124:35 - showed it to you going authentication
124:37 - settings and uh just make sure that
124:40 - scroll down to google that you have
124:41 - google enabled okay this is going to be
124:43 - a really important part
124:45 - that you have to have right because if
124:47 - you don't have google enabled you will
124:49 - not be able to do the login with google
124:52 - okay so go to google hit enable and then
124:54 - hit save
124:56 - okay
124:57 - okay so
124:59 - now it should bring you to this page
125:01 - over here right and we don't have a
125:02 - client id and we don't have a client
125:04 - secret so we're going to set that up
125:05 - together first just click google enabled
125:08 - and now we're going to create a client
125:09 - id and a client secret the way to do
125:11 - that is we're going to go to console
125:13 - cloud google
125:14 - okay go ahead and click and then you can
125:17 - just change
125:18 - to your whatever email okay and uh then
125:22 - what you're going to go ahead and do is
125:24 - you can create a new project okay if you
125:26 - don't have one so let's just say you
125:27 - create a new project and you can call it
125:30 - supermass super pass
125:32 - base okay
125:34 - um reddits
125:37 - and then you can go inside of that
125:38 - project once it's done being made so i'm
125:41 - going to click here it's taking a second
125:43 - so it'll get made soon and then once
125:45 - it's done just go inside of it cool and
125:49 - now that we're inside of it let's go
125:50 - credentials
125:52 - and here we'll create credentials and
125:54 - we're gonna do we're gonna choose oauth
125:57 - client id so let's choose that the first
125:59 - thing it's gonna ask us to do is create
126:01 - a consent screen so we'll hit external
126:03 - we'll hit create and then here app name
126:07 - reddit
126:09 - supabase
126:10 - we'll pop in the email
126:12 - we will pop in my email right here
126:15 - developer email hit save and continue so
126:18 - that's it for the consent screen we're
126:19 - done and now let's go
126:21 - on the left hand side and choose
126:23 - credentials again okay so now we can
126:25 - actually create credentials because we
126:27 - are done creating our consent screen so
126:30 - hit create credentials try oauth client
126:32 - id again application type choose web
126:34 - application we'll say reddit superbase
126:38 - and
126:38 - authorized redirect uris here's what
126:41 - we're going to need to do go inside of
126:44 - your super base
126:46 - okay go inside of
126:49 - settings
126:51 - all right let's go to settings and then
126:53 - inside of settings go to api
126:55 - copy this url right here the project url
126:59 - go back
127:00 - and paste that but you're going to need
127:02 - to add something here so if you look at
127:04 - superbase's instructions for how to set
127:06 - this up what they want you to do is add
127:09 - this to that url it says auth v1
127:13 - callback and that slash let's copy let's
127:15 - go back here
127:17 - and let's paste it so you should have
127:19 - that url plus it should say odd slash v1
127:23 - slash callback okay let's go ahead and
127:25 - create this and now it's going to give
127:27 - you a client id and your client secret
127:29 - so copy this
127:31 - go back to superbase and paste the
127:33 - client id
127:34 - copy this client secret go back to super
127:37 - base and paste this
127:41 - let's paste it so our client secret is
127:43 - here our client id is here
127:45 - and now we have that redirect url it's
127:48 - fully made okay ready to go let's go
127:50 - ahead and hit save great so now we
127:54 - successfully have google authentication
127:57 - enabled and now we can finish up writing
128:00 - the rest of the code for this okay so
128:02 - let's go here i'm going to say const
128:04 - sign in with google we'll say async okay
128:09 - and then we're gonna say
128:11 - hit try this
128:13 - and so for try we're gonna grab the
128:16 - error and the user destructure the error
128:18 - in the user where we honestly don't even
128:21 - really need to worry about error right
128:22 - now let's just destructure the user
128:25 - from
128:26 - supabase
128:28 - dot auth dot sign in
128:34 - okay and then the provider
128:36 - is going to be google
128:38 - and then once this happens let's just
128:41 - console log
128:46 - user
128:48 - okay and let's connect this to
128:51 - that button so i'm just gonna add a on
128:54 - click property for this button we'll say
128:55 - on click and we'll just say
128:58 - run sign in with google when we do it
129:00 - let's just make sure we don't have any
129:01 - errors here so
129:03 - okay try
129:05 - maybe you have to have catch error
129:08 - and we can just say
129:10 - console.error error
129:15 - okay there we go
129:16 - now i'm gonna click
129:18 - sign in with google let's see if
129:19 - anything happens
129:21 - boom it actually does take me here let's
129:23 - go kazuya cleverprogrammer.com
129:26 - nice that was clean let's hit console
129:30 - and let's see if anything got back to us
129:32 - in the meantime okay so we're gonna
129:35 - we'll make it um let's add some confetti
129:38 - here maybe so we can see it okay so
129:41 - let's try it again let's hit sign in
129:43 - with google so right now we got null
129:45 - that's fine okay did the confetti happen
129:48 - now no confetti interesting so maybe
129:52 - let's see all right so now we're gonna
129:54 - just try to get access to this user over
129:57 - here okay it's a little bit tricky to
129:59 - get access to the user okay so like we
130:01 - actually don't even need this we could
130:02 - just do this await superbase and log in
130:06 - okay and delete that because that's not
130:08 - actually even gonna give you anything
130:10 - okay so that's really it when it comes
130:12 - to logging in and then if you want to
130:14 - find out whether you logged in or not
130:16 - what you want to do is we want to use a
130:19 - use effect hook here and for now let's
130:22 - just say that this use effect hook fires
130:24 - off every time the page refreshes and
130:26 - we'll just say cons will destructure the
130:29 - user and we'll say superbase
130:32 - superbase.auth.session
130:36 - and
130:37 - that's the user and if that's not the
130:39 - case or just make the user null okay so
130:42 - let's do that
130:43 - um
130:44 - yeah and then let's just console.log and
130:47 - we'll say
130:48 - user okay so let's go ahead and refresh
130:52 - this page
130:53 - and then we're gonna once it reloads
130:55 - we're gonna go ahead and click sign use
130:57 - effect is not defined obviously so let's
130:59 - go ahead and import that
131:01 - all right
131:02 - now it's gonna say use effect it's not
131:04 - gonna say use effect is defined but
131:06 - there we go so currently there is a user
131:08 - as you can see actually do i even need
131:10 - to
131:11 - i don't need to do that i could actually
131:12 - just pop in user here and we should be
131:15 - no no i like the way that i had it i
131:17 - like the way that i had it okay cool now
131:19 - sign in it's because i had already
131:21 - signed in i paused the video signed in
131:23 - but let's sign in okay for you it
131:24 - wouldn't say there's a user let's do
131:26 - kazu cleverprogrammer.com
131:28 - and now i go here and the user right now
131:30 - is null okay but watch what happens when
131:33 - i actually hit refresh so refresh on
131:35 - this page and watch what happens okay
131:37 - boom this piece of code fired off after
131:39 - the refresh it saw that there was an
131:42 - active session and now you do have an
131:44 - active user right over here okay i don't
131:47 - need this object anymore let's go ahead
131:50 - and hit refresh again
131:52 - and this is our user right this is the
131:54 - user this is all of their data and we
131:57 - have access to the email the set the
132:00 - session id this is this user is
132:02 - authenticated we have a confirmation for
132:05 - when the email was confirmed so this is
132:07 - a good and their last sign-in was
132:09 - detected on july 15th which is today a
132:12 - day after my birthday and so there you
132:14 - have it you have
132:16 - authentication essentially working but
132:18 - what we want to do is authentic this
132:20 - authentication is we don't want to like
132:22 - sign in and sign out here we want to do
132:26 - this kind of at a global level
132:28 - in context
132:29 - and then pass that context around
132:31 - everywhere okay so i'm going to go ahead
132:33 - and
132:35 - just cut this get rid of that and we're
132:37 - going to go and
132:39 - create our context file so let's go
132:43 - here i'm going to create a new folder
132:47 - it's going to be called context okay ah
132:50 - don't put it in don't put it there let's
132:52 - get it out okay so it should be at the
132:54 - global level you should have context
132:55 - inside of context we'll have a new file
132:58 - and we'll call it reddit
133:00 - context.js okay and then in this context
133:03 - file i'm going to paste that because
133:05 - i'll probably i'll need access to that
133:07 - piece of code at some point
133:09 - and
133:10 - we want to do
133:12 - okay
133:14 - export
133:16 - const reddit
133:18 - contacts okay and we're gonna say create
133:21 - context here we'll need to import let's
133:24 - do a
133:25 - lowercase here we're gonna import it
133:27 - we're gonna say import create context
133:30 - use state use effect because we're going
133:32 - to need access to all of those as well
133:35 - from react okay and now we're going to
133:38 - create a function called
133:40 - reddit providers i'm going to say export
133:41 - const reddit provider
133:44 - okay and it's going to have children so
133:47 - children is going to be we're going to
133:48 - wrap our entire app inside of here
133:54 - children and then we can pop that use
133:56 - effect in there actually
134:02 - so there we go
134:06 - and then a couple of other things we can
134:07 - do here as well so let's go const
134:10 - current user set
134:13 - current
134:14 - user let's say and we'll say use state
134:18 - null okay and then here once the user
134:21 - actually exists i'm going to say set
134:23 - current user to be the active user okay
134:27 - and we'll import superbase here as well
134:30 - so i'm gonna say supabase
134:32 - from
134:33 - [Music]
134:35 - and let's go services
134:37 - slash
134:39 - clients
134:43 - okay
134:45 - and here i want to do
134:47 - [Music]
134:51 - superbase.auth.and we're going to add a
134:52 - listener as well here odd stage change
134:56 - so meaning if you log in or you log out
134:58 - or it's a different user that logs in
135:00 - you wanna track that right away so this
135:02 - is gonna be a actual listener and listen
135:05 - for the event and the auth session and
135:08 - then when that changes we're going to
135:10 - set the current user to whoever is the
135:12 - current user of the auth session so
135:15 - there we have an active listener this
135:17 - will pretty much fire off in real time
135:19 - so this is a good use effect hook to
135:20 - wrap the entire app in so now the entire
135:23 - app will essentially be listening to who
135:25 - the user is okay and now we want to give
135:28 - access to the entire app for this user
135:31 - so i'm going to say return
135:32 - and then instead of this return we're
135:33 - going to say reddit context
135:34 - context.provider
135:39 - okay write a contextual provider
135:42 - and
135:44 - i'm going to go like this pass in
135:46 - children here
135:49 - and here i'm going to say value
135:53 - and we're going to send off the current
135:56 - user
135:59 - okay so this should send off the current
136:01 - user
136:02 - to our entire app all right now so if
136:05 - you're on this page we're going to wrap
136:06 - the entire app in the authentication
136:09 - and we want to do here in order to
136:11 - actually make that happen
136:13 - is we just gotta import
136:16 - reddit
136:17 - provider from
136:19 - contact slash reddit
136:21 - context
136:22 - so once this is imported now we begin
136:25 - the wrapping of the entire app so take
136:27 - this component
136:28 - pop this bad boy right here reddit
136:30 - provider okay
136:32 - and then wrap up that
136:35 - inside of this
136:37 - reddit provider right here
136:38 - now it's going to be like hey it needs a
136:40 - closing tag no problem or sorry let's
136:42 - actually put parentheses here because we
136:44 - need to wrap this up in parentheses
136:48 - okay
136:49 - great and then we can just add a little
136:51 - bit of seo so our tab and everything
136:53 - looks clean because right now it just
136:55 - says
136:56 - reddit dash bill dash blah blah that
136:59 - does not look that clean
137:01 - so let's go ahead and fix that
137:03 - what's this error saying didn't we build
137:05 - context
137:07 - am i misspelling anything reddit
137:09 - context.js
137:12 - did i forget to export i have exports
137:14 - here
137:16 - export cons reddit context okay let's go
137:19 - back
137:21 - to pages app tsx from context
137:26 - let's hit refresh let's actually hit
137:28 - yarn dev because my app might have
137:31 - crashed yep it did
137:33 - so let's hit yarn dev
137:35 - and then let's sit here and refresh
137:37 - we'll give it a second for it to wake up
137:39 - once it's awake we should be we should
137:42 - be good to go that that should be enough
137:44 - for this okay while this is loading
137:47 - okay do we still have an error actually
137:50 - reddit provider give it a component
137:52 - pages boom boom i thought it looks
137:55 - pretty good to me
137:56 - uh the error is happening inside of the
137:58 - context ah okay okay okay okay got it
138:01 - got it god i just wasn't reading the
138:02 - error
138:03 - it's being silly
138:05 - so in my context i'm gonna open a new
138:07 - tab here in context i'm
138:11 - doing something silly so i need to be
138:12 - doing
138:13 - reddit contact dot provider i believe
138:18 - so it's the same tag that opens it and
138:19 - then the same tag that closes it i think
138:21 - that's the problem
138:23 - and then our entire app we're giving it
138:25 - access to the current user
138:27 - or the logged in user or whatever
138:30 - okay
138:31 - ah set current is not defined okay so
138:34 - that is happening in context let's go
138:36 - back
138:37 - and it's set current user not set
138:40 - current so let's go set current user
138:43 - just like that
138:44 - okay let's refresh
138:46 - all right so now
138:49 - we're good
138:50 - okay so now it's doing the thing that
138:53 - it's supposed to be doing in context our
138:55 - app is wrapped in that
138:58 - let's say
138:59 - we'll say user and then we'll say hi
139:04 - so this will tell us that we're coming
139:05 - from the context file
139:07 - let's go ahead to console and we can see
139:11 - if i sign in let's sign in with google
139:13 - boom let's choose this
139:15 - and then our context file right now is
139:18 - null obviously but let's refresh and
139:20 - you'll see that it'll have a user on it
139:22 - boom we have a user okay and when i look
139:25 - at this user i have all that all of that
139:27 - users data
139:29 - right here
139:30 - and so you can see that now the user is
139:32 - actually being passed around and con our
139:35 - entire app has access to context now
139:37 - because the entire app is essentially
139:39 - wrapped in context so that's why the
139:41 - whole app has access to it okay
139:44 - so
139:45 - this is really nice we have this now we
139:47 - need to make
139:49 - conditional rendering happen so that
139:51 - when the user is actually logged in
139:54 - it immediately
139:55 - brings them to the home page rather than
139:58 - the log in page see what i'm saying
140:00 - so let's go to our index dot tsx
140:05 - so pages
140:07 - index.tsx i'll just open a new tab here
140:10 - and in here what i would like to do
140:14 - okay this is a typescript error message
140:17 - which is just it has an implicit type
140:20 - any you could do this and the error
140:21 - would go away but the app will still
140:24 - work this is just a warning okay so this
140:26 - will still work i can just leave that
140:28 - that's fine if they have any types you
140:29 - can give the menu or you can just leave
140:31 - them as this
140:32 - now here we're gonna get our user from
140:35 - our from our context that we've just
140:38 - created okay so let's go ahead and
140:41 - import our contacts so i'm gonna say
140:42 - import a reddit
140:45 - context
140:47 - and we're going to say
140:49 - context slash
140:51 - reddit
140:52 - context
140:54 - and now what i want to do is
140:56 - i want to actually get access to our
140:59 - current user
141:00 - okay and we'll get it from context
141:04 - reddit
141:06 - context just like that okay use context
141:09 - okay so let's get the use context hook
141:11 - as well from react so we'll say use
141:15 - context we can get that from react i
141:17 - believe
141:18 - yep got that hook perfect so
141:22 - now we're using the contacts we're
141:23 - getting the current user from the
141:25 - context and now
141:27 - we can just set the conditional
141:29 - rendering right here and i can actually
141:31 - just say
141:32 - i can remove all of this and i can say
141:35 - is current user
141:37 - if the current user is logged in you see
141:39 - how it brought me to this page right
141:41 - over here
141:42 - but say i was not logged in so i'll do
141:44 - no i'm not current user is not logged in
141:47 - it will bring me to this page right over
141:50 - here so this is now working perfectly
141:53 - right hey you're logged in cool send
141:56 - them to the home page hey you're not
141:58 - logged in send them to the login page
142:01 - now
142:02 - i mean this is smooth as butter okay so
142:06 - we have access a user overall we're
142:08 - passing them around we're very happy
142:10 - with this
142:11 - okay now this fetcher here we can
142:13 - actually put this in context as well and
142:16 - then get it from context i'll actually
142:19 - just get it from context already
142:21 - and then grab this
142:23 - let's go to our context create this
142:27 - and pass it because we'll need access to
142:28 - it actually in a few different places so
142:30 - i'll just go ahead and do
142:33 - fetcher
142:34 - just like that okay so current user
142:37 - fetcher
142:39 - and we're destructuring the fetcher
142:43 - here
142:43 - and then we're just using that fetcher
142:45 - okay so everything should be working as
142:47 - expected if i go in if i click or
142:49 - refresh or whatever everything should be
142:51 - fine
142:52 - okay
142:53 - all right great
142:54 - it's detecting i'm logged in so it's
142:56 - bringing me to the right page that's
142:57 - great as well
142:59 - just leave it like this
143:01 - now really the last thing i want to do
143:02 - here is save and update the user so
143:06 - what do i mean by that
143:07 - if i go to my
143:09 - database and we go into table
143:12 - you'll see we don't have a table called
143:14 - users and we have no users in here but
143:16 - there's a user that's logged in so we
143:18 - want to actually build a database of
143:20 - everybody that's logging in so what we
143:21 - want to do here is
143:23 - i want to
143:25 - create a function
143:28 - that does that for me so we'll call it
143:30 - save and update user okay and what this
143:34 - function will do is we'll update
143:36 - or insert a new user okay so it's going
143:40 - to be a very simple function
143:42 - and this is very cool part about
143:45 - superbase that i really love
143:47 - where you can actually add in a new user
143:50 - in a really cool way and i'll show you
143:52 - that method so first we're just going to
143:54 - add a guard clause and hey if there's no
143:56 - current user
143:58 - just return like just end the end it
144:00 - okay don't even do anything else just
144:02 - end the app and the function and don't
144:04 - run this function all right otherwise
144:06 - what we're gonna do is
144:07 - we're gonna
144:08 - go into superbase and we're gonna go
144:10 - into the users table okay and we're
144:12 - gonna up cert
144:14 - and this
144:15 - means update or insert so it's beautiful
144:19 - because if you have an existing user
144:21 - that just logged in
144:22 - it's not gonna bug you and crash but if
144:25 - that user doesn't exist in your database
144:27 - it's going to create that user and add
144:30 - that user to your database it's not
144:32 - going to create a whole new user it's
144:34 - going to simply go to that user and
144:36 - update that particular user's profile
144:38 - picture
144:39 - i love that about this right that makes
144:41 - it so much nicer and cleaner okay so
144:44 - upset is a function it'll take in an
144:46 - object of what you're trying to create
144:47 - so we're trying to create here is a
144:49 - current user we're gonna get their
144:52 - metadata and grab their meta data.email
144:57 - okay we'll grab their
144:59 - name
145:00 - okay and then oh sorry let's go ahead
145:03 - and do
145:05 - full underscore name and then we'll grab
145:08 - their profile image
145:10 - and let's go all the way to the end and
145:12 - we're going to say avatar url and look
145:15 - at typescript being super helpful right
145:17 - it's saying hey it cannot find name
145:19 - superbase so we already know we didn't
145:21 - import it we don't have to sit here and
145:23 - wait for a crash to happen so i'll say
145:24 - import
145:26 - supa base from
145:28 - what is it services supabase
145:31 - clients i believe okay slash services
145:36 - let's see here
145:37 - yep
145:38 - slash services slash superbase client
145:40 - perfect we got that
145:42 - okay
145:44 - so that's what this does save and update
145:46 - user and now we just want to actually
145:48 - call it we're gonna have a use effect
145:51 - hook here
145:52 - and another use effect hook and we're
145:54 - simply going to basically save and
145:57 - update user okay and then basically run
146:00 - whenever the current user changes
146:03 - okay
146:04 - so let's hit refresh and let's see if
146:06 - there's anything happening here and if
146:09 - there isn't then we can simply go ahead
146:12 - and create a new user or even log out
146:15 - and try to create a new user
146:16 - let's put a console log statement here
146:18 - that tells us whether this line is
146:20 - running or not console.log save user
146:23 - okay so let's
146:25 - refresh here and see what's happening
146:28 - refresh
146:29 - okay so the save user looks like it ran
146:33 - okay let's see if anything happened here
146:35 - if this ever happens where it goes
146:37 - loop-de-doop d in in circles like that
146:39 - just end the server and just start it
146:42 - again but end it here and also stop it
146:44 - here
146:45 - and at both places and then just go
146:47 - ahead and do yarn dev again
146:49 - and you should be good
146:51 - okay now let's wait for it to load
146:54 - hope it loads perfectly save user fired
146:58 - let's see if anything happens i'll
147:00 - refresh here
147:01 - we'll refresh
147:03 - all tables as well
147:05 - still nothing so the problem we're
147:07 - actually facing here is since it's from
147:09 - right it's trying to pull an existing
147:11 - table so it's not actually going to
147:13 - create the table for us so we're going
147:16 - to need to actually create a table so
147:18 - we'll create a users table and it'll
147:20 - have email and name and profile image so
147:23 - i imagine this could be text this could
147:25 - be text
147:26 - and this could be text as well because
147:28 - it's a url
147:29 - all right so we'll hit create new table
147:31 - i'm going to call it users
147:34 - and then we're going to say created
147:37 - we could have a created now on this i
147:39 - guess that's fine that shouldn't hurt
147:42 - and then here we're gonna say
147:44 - name and this is going to be text
147:47 - and then we're gonna go ahead and add
147:49 - another column and then we will say
147:52 - profile image
147:54 - okay and this will also be text
147:57 - with a capital i by the way and then we
147:59 - will add
148:01 - we can actually yeah that's fine that's
148:02 - fine profile image is fine and then
148:04 - we'll say email okay and this will
148:07 - also be text okay great
148:10 - now go ahead and save
148:12 - let's try to run this now so i'm going
148:14 - to refresh here and let's see if it
148:16 - fires off and it registers a new user so
148:19 - let's refresh
148:21 - save user did fire off let's say let's
148:23 - refresh our whole page let's see if it
148:26 - works
148:27 - boom there we go we just got a new user
148:30 - and now watch this
148:31 - what we can also do
148:33 - is we can
148:35 - have it fix on a specific conflict okay
148:38 - let's give upsert another object here so
148:41 - let's give it a second argument and this
148:42 - argument is going to be based on how
148:44 - it's going to resolve the conflict and
148:47 - we'll say on conflict
148:49 - email
148:50 - okay so
148:51 - when it's time to resolve the conflict
148:53 - resolve it on email
148:55 - so there's two arguments that we've
148:57 - given it one is this
148:59 - okay
149:00 - second one is that
149:01 - got it
149:02 - so now it's gonna
149:04 - once it sees the email that's what's
149:06 - gonna use to resolve the conflict
149:08 - and let's give it a try so let's try
149:11 - changing the name to
149:14 - mahatma
149:15 - gandhi hit save hit refresh here let's
149:18 - go to super bass let's refresh
149:21 - and since it has caused a clever program
149:23 - or email it should only update the user
149:25 - okay so let's refresh here
149:28 - and let's see if it has updated the user
149:30 - or not so the reason why we have two of
149:32 - these here right now is because we
149:34 - didn't add on conflict right away so
149:36 - that's why we have it but if we go and
149:38 - right click and we delete this row right
149:40 - now and now if you refresh or you
149:42 - refresh
149:43 - your app as well so it fires off the
149:45 - save user function it's not going to
149:48 - duplicate just make sure your save user
149:50 - fired off and it did and you can see it
149:52 - didn't duplicate the user if i refresh
149:54 - you still won't see any kind of
149:56 - duplication hopefully there we go
149:58 - perfect
149:59 - okay now why mahatma gandhi isn't
150:01 - getting updated in here is because i
150:04 - have this function to only fire off when
150:06 - the current user changes and the current
150:07 - user isn't changing because the current
150:09 - user is still me and it's been me the
150:12 - entire freaking time so let's remove
150:14 - that for just a second and let's say
150:16 - there's no dependency and it should fire
150:18 - off every single time we refresh the
150:20 - page so let's go ahead and save this
150:23 - let's go ahead and refresh this let's go
150:25 - back to our superbase let's hit this
150:27 - nice little refresh here so we don't
150:30 - have to refresh the whole page let's
150:32 - refresh
150:33 - and refresh again let's go into email
150:36 - and what we need to do is we need to
150:37 - actually enable
150:40 - is unique because once you do that
150:42 - upsert actually starts working so let's
150:45 - go and enable because we want to make
150:46 - sure that the values are unique if
150:49 - they're not it wouldn't make sense let's
150:51 - go ahead and save it alright so let's go
150:52 - ahead and save this and let's restart
150:55 - and we should have a user with gandhi
150:58 - gmail.com inside of our supa base with
151:01 - this name
151:03 - and there you go the first user is
151:05 - rafikaze which is perfectly fine this is
151:07 - exactly expected because i logged in and
151:10 - then i changed it to mahatma gandhi and
151:12 - i can see gandhi at gmail.com let's try
151:15 - to keep the email the same so we're
151:18 - gonna go ahead and do
151:20 - this whole thing right here and we're
151:22 - just gonna say dot email
151:24 - and let's see if it can update my name
151:26 - so i'm giving it my exact email address
151:30 - and let's see if it knows how to update
151:33 - there we go so upsert work right boom
151:37 - it's updating my name over here um based
151:39 - on
151:40 - just matching the email so that was
151:43 - super cool or it updated it right here
151:45 - cause you cleverprogrammer.com
151:47 - so upstart is working perfectly normally
151:49 - that was a check
151:51 - okay now let's go ahead and just do this
151:53 - and let's change that to full underscore
151:56 - name
151:57 - okay
151:58 - and
151:59 - now it should be good if i go ahead and
152:01 - refresh here it should update mahatma
152:03 - gandhi from whatever it is right now
152:05 - to the current user which is rafikaze
152:08 - and that
152:09 - perfectly over here rafikaze smooth like
152:12 - butter and there you have it we can now
152:15 - add users
152:17 - when they log in we can update add and
152:20 - update a user inside of our database
152:22 - based on logging in so
152:24 - our authentication and our user tracking
152:28 - is working perfectly
152:30 - now we need to start moving on to being
152:33 - able to add
152:35 - comments but first we need to work on
152:37 - being able to show the post detail page
152:40 - so for example when i go to this app
152:43 - right here and if i click into a certain
152:46 - post i can go inside of a post right so
152:49 - this is a detailed view of a post so
152:52 - that's what we're going to build
152:54 - so now let's go ahead work on making
152:56 - that post detail page so what i'm going
152:58 - to do is go ahead inside of my pages
153:02 - we will go inside of i will create a new
153:06 - folder here and this will be called
153:09 - let's create a folder this will be
153:10 - called post so this will be a page for a
153:13 - post okay and then we're going to create
153:15 - a new file here okay and this file we're
153:19 - just going to call it id okay dot js
153:23 - just like that because that id is going
153:25 - to be pretty much dynamic every single
153:28 - time we come to this page okay
153:30 - so
153:31 - this page is going to be a fairly simple
153:33 - page let's go ahead and just create the
153:36 - front end for this so we're going to say
153:37 - post
153:38 - view
153:39 - and we'll say return and in my return
153:42 - i'm
153:43 - let's just return a div for now and in
153:46 - this div we will add a h1 that just says
153:49 - post view okay or post detail or
153:52 - whatever let's go ahead and say export
153:54 - default post view and um yeah there
153:59 - that's it so now let's see if we can
154:01 - actually route to this page okay so
154:04 - we're gonna we're gonna try that so
154:05 - let's see if i can
154:07 - go to this url here and add a slash
154:12 - post
154:13 - slash
154:14 - one okay and let's see if it actually
154:16 - routes us to it boom there you go we're
154:18 - getting post detail so the routing is
154:21 - working excellently so now we can
154:24 - actually start styling it and showing
154:26 - everything here so first of all we're
154:28 - gonna have the post actually show up
154:30 - so we're gonna import the post component
154:32 - so import
154:33 - post from and we'll import the post from
154:37 - i believe common so let's go back to
154:40 - components let's go to common and let's
154:43 - go post so the first thing obviously it
154:46 - should show is the post so there we go
154:48 - so now it's showing us the post now how
154:51 - which post is it going to show we need
154:53 - to actually give it the selected post
154:56 - let's destructure this and give it the
154:58 - selected post now where selected posts
155:00 - coming from so the selected post can
155:03 - actually come from the reddit context
155:07 - okay so we can actually add that in
155:09 - there so let's go to context okay and
155:13 - then in context we're gonna go ahead and
155:15 - say selected posts set selected posts
155:19 - just like this
155:21 - and we're gonna set it to null and the
155:23 - start because there's gonna be no
155:25 - selected posts in the store obviously
155:26 - okay and current user yep this is fine
155:29 - so now
155:31 - how are we going to that what the
155:33 - selected post is
155:35 - first we're just gonna pass that
155:37 - information around so we're gonna
155:40 - pass this through our app selected post
155:44 - and this hook for set selected post
155:47 - now let's go ahead to our post component
155:50 - so let's go components comment post and
155:54 - inside of this component we're now going
155:56 - to get access to some of the posts okay
155:58 - so we're going to go ahead import a few
155:59 - things that we'll need access to i'm
156:01 - going to import
156:03 - use context from react
156:06 - let's import reddit
156:08 - context oh wow it actually can pull it
156:12 - up that's cool okay import reddit
156:14 - contacts from right there
156:16 - and then let's do reddit spider import
156:20 - reddit spider let's see if it does it
156:23 - boom
156:24 - it does okay so we're gonna actually we
156:26 - don't need we don't need the provider we
156:28 - just need the context so entire app is
156:31 - already wrapped in the provider so we
156:32 - don't need we don't need access to that
156:34 - and then we just need to get the use
156:36 - router so we're going to say from next
156:39 - slash router okay
156:42 - great
156:43 - so we have access to all of this stuff
156:45 - well now what now what we're going to do
156:47 - is
156:48 - let's get access to the router we're
156:50 - going to say use router and then we're
156:53 - going to grab our selected post so we're
156:54 - going to say const selected
156:57 - set
156:58 - selected post we're going to grab that
157:00 - hook so we can actually set which post
157:03 - is the selected one okay don't need to
157:05 - see the upvotes anymore set selected
157:08 - post okay and now we're going to create
157:10 - a little function it's going to do this
157:11 - for us so i'm going to say navigate to
157:13 - post and we'll call our hook set
157:16 - selected post and it will destructure
157:18 - the id title content author
157:22 - created ads upvote down vote okay and
157:26 - then it'll push
157:28 - us to
157:30 - post slash the id okay wherever whatever
157:34 - the id of that specific post is okay and
157:37 - then when we want to call this is we
157:38 - just want to call this on click so if we
157:40 - go down
157:41 - we have so this is a specific post right
157:44 - so since it's a specific post we already
157:46 - have access to that id we already have
157:49 - access to that title we already have
157:50 - access to that author so we already have
157:53 - access to all the information about that
157:56 - selected post okay we can even like just
157:59 - destructure the selected posts if we
158:01 - wanted to okay or destructure this but
158:04 - we don't have a name for it so that's
158:06 - why we're manually writing it here so it
158:08 - says selected post and then we're just
158:10 - gonna have an on click here so what we
158:13 - want to wrap the on click to
158:15 - is right above the author okay we can
158:18 - add we this positive
158:21 - this is what we're gonna add the on
158:22 - click to so we can say on click and then
158:26 - just navigate to post okay so let's give
158:29 - this a try and let's see if this works
158:32 - so we're having an error which sets a
158:34 - selected post so we're having this error
158:37 - in the id page right so now we we will
158:40 - need context here obviously because
158:42 - that's where it is so let's go ahead and
158:44 - get
158:44 - import use context
158:47 - from react and then here we're going to
158:50 - say we're going to go ahead and say
158:53 - const set selected post is
158:58 - from use context
159:00 - reddit context okay we got to get the
159:03 - redis reddit context as well so we're
159:06 - going to have go ahead and import it so
159:07 - i'm going to say import
159:09 - reddit context from context
159:13 - reddit context okay so now we have
159:16 - access to set selected post and now
159:18 - it'll actually be able to pull it up in
159:20 - here so let's go ahead and refresh this
159:23 - see if you have any problems set
159:24 - selected oh sorry selected post is what
159:27 - we want to do selected post so we're
159:30 - pulling that out and we're setting that
159:32 - over here okay
159:34 - so let's go back to our home page and
159:36 - now let's pick up post build medium with
159:39 - typescript so let's give that a try i'll
159:41 - click into it and now it says created at
159:45 - is not defined and the error is
159:47 - happening in
159:49 - postpost.js
159:50 - so let's go to post and it says create
159:53 - it add is not defined simple we just
159:55 - have to destructure it here because we
159:57 - already have access to it from the
159:58 - database okay so let's go build medium
160:02 - with typescript now it says upvote is
160:03 - not defined so it's because of votes and
160:06 - down votes will plural pluralize it
160:09 - let's click now
160:10 - there we go now we can actually navigate
160:14 - to this new page and you see it's even
160:16 - pulling that specific post id so if i go
160:18 - here to another post see it says post
160:21 - three pull another post you can see it
160:23 - says post one right so
160:26 - we can see that it's
160:28 - working exactly how we want it to we are
160:31 - now able to navigate to that post pass
160:33 - that data through
160:35 - the route router and then the router
160:37 - pushes us and takes us to that page with
160:40 - that specific post okay so let's go
160:43 - ahead to our id page and let's keep
160:47 - working on it let's go ahead create a
160:49 - little bit of styling here okay so let's
160:52 - go to this page let's get a little bit
160:54 - of styling so it's not just touching the
160:56 - top so much so let's go ahead and import
161:00 - header okay so we're gonna say import
161:02 - header from and we'll get the header
161:06 - from our components
161:08 - slash header so now at the top we can
161:11 - actually just put our header so let's go
161:13 - right here and i'll say header great our
161:16 - header is showing up now at the top
161:19 - that's perfect okay so we now want to
161:23 - also create a wrapper around this entire
161:26 - thing so inside of this div i'm going to
161:28 - say class name i will do style.wrapper
161:31 - okay and it's gonna error out because it
161:33 - doesn't know what style is so let's
161:35 - create a style and this is going to be
161:38 - the wrapper okay we're gonna make it
161:40 - background
161:41 - black give it a text white just so it
161:44 - has just so it has like some breathing
161:46 - room okay and then the post we're
161:48 - actually gonna put the post inside of a
161:50 - container wrapper so let's put a
161:53 - container first let's go to div and
161:55 - we'll go class name and we'll say style
161:58 - dot container and we'll add this post
162:01 - inside of here i'll format it a little
162:03 - bit okay so let's go ahead and create
162:06 - styling for our container so we'll do mx
162:09 - auto
162:10 - flex give it a full width
162:12 - let's go like this flex 1 and then give
162:15 - it some spacing and then we'll give it
162:17 - padding on the y-axis so
162:20 - of 5 ram about and then padding of 6 on
162:24 - the x-axis okay there we go
162:27 - so that looks better and now we're going
162:29 - to have a container wrapper underneath
162:32 - this i'm going to say div say class name
162:35 - style container wrapper let's wrap this
162:39 - bad boy in there
162:40 - okay and let's create the styling for
162:42 - this now container wrapper and this is
162:45 - gonna be just full width space and then
162:47 - we're gonna say large what's happening
162:49 - here okay now it's looking great okay so
162:53 - now our post is coming through we're
162:55 - getting all that post data and we're
162:58 - able to show it so let's go back home
163:00 - let's go ahead and click this and there
163:02 - we go we can actually see everything
163:05 - passing through okay through the url
163:07 - parameters so this is the
163:09 - selected post essentially that's what's
163:12 - happening here okay now in the post view
163:14 - we wanna do a couple of more things so
163:15 - we're gonna go ahead and add a router
163:19 - say router
163:20 - use router obviously so let's import
163:23 - router if we don't have it import
163:25 - use router right from next slash router
163:29 - so there we go and now we're going to
163:31 - create a use effect hook and this use
163:33 - effect hook is going to say hey if the
163:35 - selected post is i want you to just push
163:39 - me back to the home page because if
163:41 - there's no nothing then push me back to
163:43 - the home page don't keep me on that page
163:45 - because otherwise they're going to show
163:46 - me like a post with an n or something
163:48 - like that and that just looks ugly we
163:50 - don't want that okay use effect great
163:53 - let's go here
163:54 - okay so yeah whenever it's a whenever
163:57 - it's like and or is broken it just takes
164:00 - us back to the home page so for error
164:03 - purposes it makes our apps
164:05 - makes our app just like a little bit
164:06 - cleaner so we got the styling for our
164:08 - post done and now inside of the content
164:11 - wrapper we want to have posts
164:13 - we also want to have i'm going to just
164:15 - create a comment here we also want to
164:18 - have save comment okay so it's gonna be
164:21 - or like basically new comment okay so
164:24 - we'll just call it save comment okay
164:25 - this will give you the ability to add
164:27 - new comment so that component will need
164:30 - and then this another component we'll
164:32 - need will be called comments and this
164:34 - will just show all of the existing
164:36 - comments
164:38 - we're going to need both of these
164:39 - components right here so first let's go
164:42 - ahead and create the ability to read
164:46 - comments and let's go ahead and do that
164:48 - now now let's add the ability to
164:50 - retrieve
164:51 - comments
164:53 - so we'll create a new folder inside of
164:54 - components
164:56 - and this folder will be called
164:59 - comments comment section
165:01 - and then inside of this folder i'm gonna
165:04 - create
165:05 - comments
165:06 - as a component
165:08 - okay so that's thing number one let's do
165:10 - const comment comments
165:13 - and we'll say return and we'll say
165:17 - div
165:18 - and then just like the usual we will
165:20 - actually put a h1 here
165:22 - i'll say comments
165:24 - let's export this as default
165:27 - comments and then the next thing we want
165:28 - to do is we want to create an api back
165:31 - end like back end api request endpoint
165:33 - for this okay so inside of pages
165:35 - go to api
165:37 - okay and then inside of api what you
165:40 - want to do is create a new file and say
165:43 - get
165:44 - comments dot js
165:46 - okay
165:47 - so what we'll do here is it'll look very
165:50 - similar to
165:52 - our get posts
165:54 - we'll just have a few different changes
165:56 - okay so let's import super bass first
165:59 - i'm going to say soup
166:01 - from
166:02 - and we'll say services
166:04 - super base client
166:07 - and then we'll export
166:08 - default async we don't even need to like
166:11 - this function
166:12 - and then
166:13 - here's what we'll do we'll try the
166:15 - following and we'll catch the error
166:18 - and we'll just
166:19 - if there's an error it's a server-side
166:21 - error so we'll return error code 500
166:25 - and then we'll just send the error
166:26 - saying hey error fetching comments okay
166:29 - and this is an object
166:31 - all right so we've error handled and now
166:34 - we'll say hey
166:35 - get me the query okay we can console
166:38 - logger just so you could see it
166:40 - and then we're gonna get the data
166:43 - and we'll await superbase.com.from
166:48 - comments okay we need to create this
166:50 - table so let's just do that now before
166:52 - we forget
166:54 - let's go ahead into
166:56 - let's say new table okay so i just
166:58 - clicked right there new table
167:00 - and then let's go ahead and say comments
167:03 - and comments will have a couple of
167:05 - columns here so we'll have created at
167:07 - obviously we'll have author
167:10 - author is just going to be text in this
167:12 - case
167:13 - we will have we will have
167:16 - text so like what you want to actually
167:17 - write that'll obviously be text
167:20 - then we will have
167:22 - post id
167:24 - okay and then we'll just leave that to
167:26 - be integer eight
167:28 - and then we'll have user email
167:31 - okay and this will also be type text
167:34 - okay great so let's go ahead and hit
167:37 - save here
167:40 - save
167:41 - awesome
167:42 - so now we have comments saved let's just
167:45 - add a comment so we'll say author is
167:48 - rafikaze
167:49 - wow this post is absolutely
167:52 - unbelievable okay and we'll say that
167:55 - this is for post id 2. so we'll say this
167:58 - is for the build medium with typescript
168:00 - post and if i actually look at the url
168:03 - if i full screen this you could see that
168:04 - id is two there so i'm gonna attach it
168:07 - to this one manually so i'll say post id
168:10 - two and user email i'll just write this
168:13 - manually as well later obviously we will
168:16 - code it up so it's all dynamic and
168:18 - all that good stuff so we've added a
168:20 - comment
168:21 - okay
168:22 - and then let's go and
168:25 - select all comments
168:28 - we will inner interjoin the comments
168:30 - with users
168:32 - so it will interjoin it on probably
168:34 - email or whatever actually we'll here
168:37 - here's what we will enter join it on
168:39 - we'll interjoin this
168:41 - on
168:42 - post id okay and we'll give it the post
168:45 - id
168:46 - from
168:48 - our query parameters so from our front
168:50 - end we'll hit our back and we'll hit
168:52 - this end point
168:54 - at
168:55 - api slash get comments we'll hit this
168:57 - endpoint and then we'll actually pass it
168:59 - in the require parameters
169:01 - what that posts id is from here
169:04 - so we'll pass it down into
169:07 - requests
169:08 - and then we'll grab it from our request
169:11 - and we'll just say hey enter join these
169:13 - and match it on post id
169:15 - okay and then so this will grab all the
169:18 - comments
169:19 - and then we'll just say res status
169:21 - 200
169:23 - and we'll send
169:25 - okay beautiful
169:27 - so our endpoint is now done now let's go
169:30 - ahead and retrieve these comments
169:33 - so now let's go inside of our comments
169:35 - function so let's go here into
169:38 - components comment section comments
169:41 - and we're gonna retrieve it
169:44 - here
169:45 - we're gonna use swr here as well so
169:47 - let's go ahead and import it so we're
169:49 - gonna say use
169:51 - swr
169:52 - from swr
169:54 - okay we're gonna also import a few
169:57 - things like use of state
170:00 - and use effect from react and then
170:03 - inside the comments what i want to do is
170:06 - i want to
170:08 - basically follow their state so i'm
170:10 - going to track their state here with
170:12 - this
170:13 - and it'll be an empty array at the start
170:15 - okay
170:16 - and let's also get our fetcher
170:19 - from our contacts so we'll say this
170:22 - reddit
170:23 - context
170:25 - and let's go ahead and import
170:27 - reddit
170:28 - contacts okay from
170:32 - let's see where it's at reddit contacts
170:35 - from context
170:37 - reddit context there we go so we're
170:40 - getting our fetcher
170:41 - and now we can actually just do this so
170:44 - data
170:46 - and we'll say use swr
170:48 - and we'll hit our api endpoint so we'll
170:50 - say api slash get comments
170:54 - question mark post id
170:57 - give it the actual post id let's make it
171:00 - template literal so give a little back
171:02 - tick here
171:03 - and then we will
171:05 - use swr let's hit enter here
171:09 - let's give a comma
171:10 - let's give it a fetcher and then let's
171:12 - give it a refresh interval of 200.
171:16 - okay so what this will basically do
171:19 - is we'll pull
171:20 - the all of our comments
171:23 - through this
171:24 - and then now we wanna
171:26 - call our use effect hook
171:28 - and inside of our use effect hook we're
171:30 - gonna say hey if there's no data
171:33 - just return because there's literally
171:35 - nothing to do
171:37 - otherwise set comments to whatever is
171:39 - inside of data and run this only when
171:41 - the data changes because you don't need
171:44 - to keep running it again and again so if
171:46 - a new comment gets added to the database
171:48 - then run it if
171:50 - a comment gets edited then run it
171:52 - otherwise don't run it
171:53 - okay and now we should have actually
171:56 - access to all of our comments and should
171:59 - be able to show the comments at this
172:01 - point okay let's just double check
172:03 - everything comments will also need
172:05 - access to post id
172:07 - that's an important part
172:09 - that's how we're giving this post id
172:12 - right over here right there it's coming
172:14 - from here and then we can just loop
172:17 - through the comments or do whatever we
172:18 - want or show the comments so let's go
172:20 - ahead and console log and we'll say
172:23 - comments okay and let's see if anything
172:27 - shows up here so let's look inside a
172:29 - console
172:30 - okay and let's hit refresh and see if
172:33 - anything shows up in the console at all
172:35 - let's put a little emoji here i'll say
172:38 - cookie let's refresh
172:41 - let's go ahead let's make sure that the
172:43 - comment section is actually like
172:45 - available and showing up because that's
172:49 - one thing that we might not have done so
172:51 - we have this commons component now we
172:53 - have to just make sure that we're
172:54 - actually running this so let's go to our
172:58 - id
172:59 - so let's go
173:00 - to pages let's go to
173:03 - post pages and let's go to id
173:06 - okay
173:07 - and there we go this is our comments
173:09 - component right here we can just
173:12 - now call it
173:13 - okay and then what we want to do is
173:16 - import it import comments from component
173:20 - slash okay and another dot dot
173:23 - components slash comment section and
173:26 - then we're going to say comments
173:28 - the capital c
173:30 - and then we want to pass our comments
173:33 - the post id so let's go ahead
173:36 - and give it the post id and we'll say
173:38 - selected
173:40 - post dot id
173:41 - okay that should do the trick
173:43 - so now let's click into this
173:46 - boom use context is not defined but we
173:48 - didn't get any errors before that so
173:50 - let's go back into comments
173:52 - and let's import use context so we're
173:55 - gonna say import
173:57 - use contacts from react actually we can
173:59 - just do it right there
174:01 - let's get rid of this here let's hit
174:03 - save and refresh
174:05 - okay let's go back to our home page
174:08 - all right let's click build medium with
174:10 - typescript
174:11 - and there we go
174:14 - okay we are getting
174:16 - we're getting something something is
174:18 - happening now at least comments is now
174:20 - showing up here so that's a good start
174:23 - and we should soon be getting
174:27 - our actual comments as well
174:30 - and then we should be able to show them
174:32 - too eventually all right to debug this
174:35 - issue let's just go to get dash comments
174:37 - here and let's
174:39 - also console log data
174:42 - and we're only going to see this inside
174:45 - of our console right here so keep an eye
174:46 - out on your shell
174:48 - okay and let's go home page
174:51 - and then let's click build medium with
174:53 - typescript right because this is the one
174:55 - that has id of two and you can actually
174:58 - see that we're getting back null so on
175:01 - our back end we're actually getting back
175:03 - now so the problem is happening
175:05 - somewhere on the server side and we have
175:08 - to debug we're going wrong somewhere
175:10 - right here because we're getting the
175:12 - post id 2 and that's correct but we're
175:15 - going some wrong somewhere all right so
175:17 - if we try to actually debug this one
175:19 - step at a time like what this error is
175:21 - let's comment out this eq line and let's
175:23 - also comment out this let's not let's
175:25 - let's oh let's not do any inner joins
175:27 - and let's just select from the comments
175:28 - and let's see if we're getting back data
175:30 - from the comments
175:31 - and it actually looks like we are so we
175:33 - are getting back comments is the inner
175:36 - join and this eq is not working let me
175:38 - remove this here we don't need to parse
175:40 - in the reason why this is happening is
175:42 - that we need to actually create a
175:43 - relationship between these databases so
175:46 - go ahead go to comments go to user email
175:49 - hit edit column
175:51 - and then once you're inside of here hit
175:53 - add foreign key relation
175:55 - and then what we can actually do is
175:59 - let's add this to
176:01 - user's email
176:03 - one second
176:04 - yep so let's create that relationship
176:06 - between
176:07 - the user email to the actual users that
176:10 - are that is in authentication their
176:12 - authenticated users and their email okay
176:15 - let's hit save and that's the
176:17 - relationship we want to have there
176:20 - boom now once that relationship is
176:22 - created if you come back
176:24 - like magic it's already working
176:27 - super beautiful so we're getting back
176:28 - the actual comments that are for this
176:30 - specific post because we just had to
176:33 - create that relationship between them
176:34 - now that we're good with that
176:36 - let's see i can actually see if i show
176:39 - you this cookie over here i'm like
176:41 - printing that comment it's actually
176:43 - getting printed out just fine so let's
176:45 - go back to post id
176:48 - okay
176:49 - and when we call comments here
176:51 - seems like the comments are showing up
176:53 - in the console log but what we want to
176:55 - do is we obviously want comments to
176:57 - actually show up on the screen right so
177:00 - let's go ahead and style comments now in
177:03 - a way where we can actually see it on
177:05 - the screen so i'm going to go com
177:07 - components comment section let's go to
177:08 - comments
177:10 - and let's continue
177:12 - styling it now how do we actually show
177:15 - it on the screen let's essentially build
177:18 - a comment component that's going to
177:21 - allow us to see it on the
177:23 - screen let's just build it raw just
177:26 - pop it in here
177:28 - and then go from there so
177:30 - if i look at the final app
177:33 - and we go inside of a post here
177:36 - you can see that i have some kind of
177:39 - wrapper
177:40 - right inside of that i have information
177:42 - about the author i have an image
177:45 - i have the date
177:46 - i have these up and down votes and i
177:48 - have these actions right there
177:51 - and then this thing right over here
177:54 - this thing here almost imagine like this
177:56 - is a component this is like one comment
177:59 - okay and then that one comment just
178:01 - keeps repeating over and over again for
178:04 - however many comments there are and then
178:06 - outside of that entire thing we just
178:08 - have a wrapper okay
178:10 - so
178:11 - let's go ahead and create our loop
178:13 - already so i'm gonna say
178:16 - if there are comments then make this
178:18 - otherwise don't make this right so let's
178:20 - go ahead and do comments
178:22 - and i'll say comments comma id
178:25 - and i'll do this and we'll open this bad
178:28 - boy up actually we'll have to close it
178:30 - too so boom right there okay and then we
178:33 - write whatever code we want inside of
178:35 - here so
178:36 - let's start off with an image
178:39 - and let's import next image if we don't
178:42 - have it yet to import image from next
178:43 - image
178:45 - and then we're gonna give it
178:48 - comment.user's profile
178:50 - image so we have access to that comment
178:52 - so let's grab that comment users because
178:56 - we have that reverse
178:57 - relationship now and grab that user's
178:59 - profile image
179:01 - and then class name will do
179:02 - style.profile image
179:04 - and then layout will be
179:06 - [Music]
179:07 - fill
179:08 - okay just like that
179:10 - okay great
179:12 - we do need this
179:14 - okay so we're closing this paren here
179:17 - what's the error
179:18 - all right let's close the image tag here
179:20 - so we're gonna go boom now the image tag
179:23 - is closed
179:24 - now there should be no more errors let's
179:26 - hit refresh
179:28 - and let's see if any image shows up here
179:31 - okay and just in case if our
179:34 - entire thing crashed you can always kill
179:36 - it and come back and
179:37 - yarn dev it as well and that should get
179:39 - it back up and running all right now
179:41 - we're getting a new error it says style
179:43 - is not defined not a problem just go
179:44 - ahead
179:45 - here let's go ahead con style
179:48 - okay and now that style is defined that
179:50 - error should go away swiftly and then
179:53 - we're going to create styling for this
179:54 - in a second so let's take a look at this
179:56 - page that doesn't look like the right
179:59 - page okay let's go back
180:01 - to our home page
180:02 - and then go to build medium with
180:05 - typescript i'm gonna click into it
180:07 - now we're getting an error that this
180:09 - image right here is not configured
180:12 - in our next.js so let's go ahead and do
180:14 - that so let's go into next config
180:17 - and right here
180:19 - simply add that in
180:21 - and hit save and that error should go
180:24 - away so whenever you update the config
180:26 - you'll have to kill the file
180:28 - and then you'll have to yarndev again
180:30 - okay so that's something you always have
180:32 - to do
180:33 - whenever you update next config that's
180:35 - the only way it's going to show changes
180:38 - sometimes you have to do that when
180:39 - you're updating
180:40 - and environment variables as well okay
180:43 - so let's go back to the home page and
180:45 - then once we go back to the home page
180:48 - then we're gonna go ahead to build
180:49 - medium with typescript let's click it
180:51 - and there you go
180:53 - now it's showing the data and it's
180:54 - showing the image granted that image is
180:57 - a little bit bigger
180:59 - than what we're going for
181:01 - so let's go ahead to our comments
181:05 - and we see that the image is filled now
181:07 - let's style the image so let's go ahead
181:09 - and go profile
181:11 - image
181:12 - and the styling that we're going to have
181:14 - for a profile image is just going to be
181:16 - object
181:18 - contain
181:19 - okay and the main thing we want to do
181:21 - around this image is we want to add
181:24 - wrapper for all of this so we're going
181:26 - to add a wrapper right around this
181:29 - and i'm going to say class name it's
181:31 - going to be style.profile
181:34 - image
181:36 - container
181:37 - okay and we'll wrap this in
181:40 - that way
181:41 - and then let's go ahead and style
181:42 - profile image container so let's go back
181:44 - up boom and the profile image container
181:47 - the styling we're going to have here is
181:49 - height small height we're going to give
181:51 - it a small specific width
181:53 - we're going to make the overflow hidden
181:55 - rounded is going to be full and we're
181:58 - going to make it relative i just had to
181:59 - restart my server and we have our
182:02 - comment
182:03 - and our image showing up okay the
182:06 - styling is showing up it's a small
182:08 - little circle so that's great now
182:10 - i want to actually create a post info
182:13 - container
182:14 - so we're going to create a div
182:16 - and this div is actually going to wrap
182:18 - up this entire bad boy right over here
182:22 - let's go and boom like that
182:26 - okay we're going to give it a class name
182:28 - [Music]
182:29 - style.postinfo
182:31 - container and then let's go ahead and
182:33 - just style this so we'll add it here
182:37 - and then post info container is going to
182:39 - be
182:41 - flex we're going to give a gap
182:43 - and we'll do a point for rem on this
182:47 - so we got our info container now inside
182:50 - of our info container we want to add
182:52 - everything else like the author author
182:54 - name all of that stuff so let's go get
182:56 - outside of this div and we're going to
182:58 - add a span tag
183:00 - span tag and in this we're going to go
183:03 - comment dot author and then we'll put a
183:06 - dot here
183:07 - like that okay boom we got
183:09 - comment.author rafikaze
183:11 - we got a little dot we'll do another
183:14 - span tag and then this one is going to
183:16 - be for the date so we're going to
183:17 - dynamically pull dates instead of
183:19 - hard-coded dates so we're going to use
183:21 - time ago
183:23 - and we'll need to import time ago so
183:25 - we're gonna go ahead and say
183:27 - import
183:28 - time ago from javascript
183:31 - time ago okay and it's time ago with a
183:33 - capital a
183:35 - and we'll need to install this
183:37 - because it doesn't know what this is
183:39 - right now javascript time ago
183:41 - so
183:42 - in order to install this
183:45 - let's just do javascript let's go to
183:47 - packages on the left hand side and just
183:49 - do javascript time ago
183:51 - and let's see if it comes up yes it does
183:53 - so let's install it
183:55 - and then that error should go away soon
183:57 - okay now that error went away
184:00 - let's go back a page
184:02 - let's go to the home page of the app and
184:05 - then let's go ahead to build medium with
184:06 - typescript okay now it says time ago is
184:09 - not defined
184:10 - so we're gonna do
184:12 - we're gonna do the following we're gonna
184:14 - say const time ago add default
184:18 - locale
184:19 - okay and we're gonna make it en and
184:22 - let's also import this i'll say import
184:25 - en from javascript
184:28 - time ago
184:29 - slash locale slash en
184:32 - okay
184:33 - so i've set the default locale to en and
184:36 - then we'll say
184:37 - time ago
184:39 - new time ago
184:42 - and we'll give it in us
184:44 - okay
184:45 - all right no locale data has been
184:47 - registered for any of the locales so if
184:51 - again if you're having errors just go
184:53 - ahead you can restart your
184:56 - rapple you should be good now it's
184:58 - saying hey these can't be objects
185:00 - they're not valid so let's just say
185:02 - let's just say hi here and let's see if
185:05 - that works
185:06 - okay
185:07 - and let's go back to our home page
185:11 - and then let's click it
185:13 - there we go our high's showing up very
185:15 - good now what we want to do here is
185:18 - instead of hi obviously i want to show
185:20 - the time so we're going to go ahead and
185:21 - say time ago.format
185:23 - and we'll say new date comment dot
185:26 - created at
185:28 - and let's give that a try let's go back
185:31 - to
185:32 - make sure you click home page first go
185:34 - to home page first
185:36 - and then click build medium with
185:38 - typescript okay now it says invalid
185:41 - number
185:42 - all right so we want to do is we want to
185:43 - pass in
185:44 - [Music]
185:45 - now and i'll give it a twitter like
185:47 - styling for the time
185:49 - okay and then let's go back to
185:53 - home page
185:55 - and then click build medium with
185:58 - whatever
185:59 - now it's saying a different error it's
186:01 - saying invalid time value so we said
186:05 - format new dates
186:08 - common.created at
186:10 - and we said twitter
186:12 - now invalid
186:14 - time value
186:16 - all right so in order to not get just
186:18 - stuck on this what we're going to do is
186:20 - let's just comment this out for a second
186:23 - so we're going to go ahead and i'm just
186:24 - going to comment this out so let's go
186:27 - like this
186:28 - and then let's go here let's end the
186:30 - comments and we'll set that so let's
186:32 - comment this out for now and let's just
186:34 - keep making progress
186:36 - okay so let's go
186:39 - to build medium with typescript okay we
186:41 - see rafikaze i'm just gonna say june
186:43 - 15th for now
186:45 - that should show up right there okay
186:47 - great
186:48 - so we have that
186:49 - now the next thing we want to do is
186:52 - we're done with the span tag this this
186:55 - is also in a span tag so we're out of
186:58 - that
186:59 - okay so we could go span
187:01 - wrap the june 15th and span remove the
187:04 - span from here
187:06 - we're essentially just commenting out
187:07 - that time ago thing
187:09 - okay but keeping everything in nice in a
187:11 - nice little span tag okay
187:14 - okay
187:15 - and next up what i want to do
187:18 - is i'm going to create a new div here
187:22 - okay let's see we're closing all the
187:23 - span text all right let's just stay
187:25 - inside of this div because otherwise
187:27 - we're going to have an error
187:29 - so
187:30 - let's create a div here and this is
187:31 - going to be comment text so it's
187:34 - whatever the text of that comment is so
187:36 - you can see wow
187:38 - this post is
187:39 - absolutely unbelievable so that's
187:41 - showing up now that's very good
187:43 - let's create another div here and we'll
187:46 - give it a class name of style.icons
187:49 - okay we'll give let's go in here and
187:51 - we'll say span
187:53 - and i'll say class name style that icon
187:56 - okay and then we'll give it an upvote
187:58 - icon here we'll go up vote icon okay and
188:02 - we'll have to obviously import this so
188:04 - let's go ahead and import our upload
188:07 - icon and download icon so let's just get
188:09 - them both boom
188:11 - get access to upload icon and down vote
188:13 - icon
188:14 - okay and now
188:16 - let's if that ever happens where it says
188:18 - hey i don't know the ideas just go back
188:19 - to the home page and then click back in
188:22 - you should be there
188:23 - okay so we got the vote icon
188:26 - now let's get our down vote icon to show
188:29 - up as well so we'll do span here i will
188:32 - say zero we will do another span tag
188:36 - here
188:37 - and then we'll say
188:39 - oh this is class
188:41 - name style dot icon okay and then inside
188:44 - of this span tag i'm gonna say down
188:47 - votes
188:48 - icon just like that
188:50 - so now that should show up as well
188:52 - okay
188:53 - so boom we're done with the with that
188:56 - part of the downvote icon okay let's
188:58 - create another span
189:00 - here span tag
189:03 - and then inside of the span tag we will
189:06 - have a class name
189:08 - we'll say style.reply
189:10 - okay and then in here i'm going to have
189:12 - a chat alt icon
189:15 - and i'll give it a small height so it's
189:18 - not too big and a small width
189:20 - okay and then we'll end this and then
189:22 - we're going to go ahead and add another
189:24 - span here and we're going to say reply
189:27 - and for chat alt icon we need to
189:30 - obviously import that so import
189:33 - from
189:35 - and i think this one comes from hero
189:38 - icons if i'm not mistaken
189:40 - but let's just double check yep it does
189:42 - hero icon slash react slash
189:46 - outline
189:48 - okay so now
189:49 - okay again get this error no worries go
189:52 - back to the home page
189:54 - and then click build medium with
189:55 - typescript and there you go okay now all
189:58 - of this is showing up
190:00 - now what we have to do soon is styling
190:02 - but for now let's just keep going let's
190:04 - finish this part up
190:06 - okay let's create a few more span tags
190:09 - here and we're gonna say class name is
190:12 - style.icon and this one is going to be
190:14 - give
190:15 - the next one is going to be share the
190:18 - next one after that is going to be save
190:21 - and then we'll have
190:23 - follow okay so that and now let's create
190:26 - styling for icon because we're seeing
190:29 - that in too many places and we haven't
190:32 - styled it yet so let's go ahead and
190:33 - style it and all we're gonna do here is
190:36 - really just give it a color of a little
190:39 - darker gray so let's do that for this
190:42 - and then
190:44 - so that should style it and then we're
190:45 - going to also style icons we'll say flex
190:49 - gap
190:50 - of 0.4 ram
190:52 - there we go so that's looking better
190:55 - now we want to obviously wrap the entire
190:58 - thing as well pretty soon
191:00 - and make sure that's that's all good so
191:02 - we have our post info container
191:05 - and then we want to wrap the entire
191:06 - thing inside of a commons container so
191:08 - we're going to go ahead and go to div
191:10 - say class name and i'll say
191:12 - style.comment
191:14 - container
191:15 - all right and we'll take this whole
191:18 - thing for the common container
191:20 - and just go ahead and wrap it okay
191:24 - now let's go ahead and style our comment
191:26 - container
191:28 - so let's go here
191:30 - comment container
191:32 - and for the comment container we're
191:34 - gonna go ahead and add a little margin
191:36 - at the top like
191:37 - on the y-axis we'll give it one rem
191:40 - we'll give it flex and flex column and a
191:42 - gap of one rem here as well
191:45 - okay and now that sign if you ever see
191:48 - that sign that usually means the rebel
191:49 - is dead
191:51 - so
191:52 - let's just simply kill it and let's go
191:54 - yarn dev again
191:56 - okay and then we will wait
191:59 - for it to come back to life
192:01 - then we should be good okay let's just
192:03 - hit
192:04 - let's just go to the home page
192:07 - this
192:08 - okay great
192:09 - so
192:10 - i have all of these things here
192:13 - common container
192:14 - the styling is not showing up
192:17 - right now which basically means that
192:19 - it's most likely that the rebel replit
192:21 - is down i'm gonna give it a background
192:24 - of black or white rather
192:27 - and nope it's not showing up so that
192:29 - just means the replit is down so we got
192:31 - to get the replit back up all right so
192:33 - when the replit sometimes goes down make
192:35 - sure you hit stop right here as well
192:38 - okay go ahead and hit stop because now
192:40 - it's creating these different ports and
192:42 - whenever it does that just means
192:44 - something bad's about to happen okay so
192:47 - kill it here
192:48 - hit stop here and if none of that is
192:50 - happening just hit refresh as well so
192:52 - it's just a clean slate you're
192:55 - restarting it from scratch
192:57 - and now it says connected at the bottom
192:59 - which was a good sign
193:00 - okay
193:01 - and i copy every time before i refresh i
193:04 - copy my files that way
193:06 - if something happened i can just
193:09 - select everything and paste
193:11 - everything directly from my clipboard
193:14 - all right so the post info container
193:16 - actually ends right underneath right
193:18 - underneath the span tag right here with
193:20 - the date okay so let's go ahead and
193:23 - end that real quick so we're going to go
193:25 - ahead and just cut one of these divs
193:27 - because we don't those don't need to be
193:28 - there and we're gonna paste it right
193:30 - here because that's where it belongs
193:33 - okay and now boom look at that the whole
193:35 - thing is just looking already way better
193:37 - okay now all the styling everything is
193:39 - making sense now all we need to do is
193:42 - add this entire thing inside of
193:45 - a wrapper okay and we don't need this h1
193:49 - here anymore okay
193:50 - let's go ahead and add this inside of a
193:52 - wrapper so i'm going to say div okay and
193:54 - end the div outside of that for loop so
193:57 - let's end that right there actually it
193:59 - was already ended wait now i'm just
194:01 - being silly hold on sorry this is the
194:03 - div that's gonna be the wrapper and this
194:05 - div can just pretty much be empty so it
194:07 - doesn't even need to be called the div
194:08 - just
194:09 - go ahead and make it empty here
194:11 - okay this div is the more important one
194:14 - and this one is going to be called class
194:16 - name
194:17 - style.wrapper
194:18 - and then we're going to go ahead and
194:20 - style this so go ahead and say wrapper
194:23 - okay and the styling for the wrapper is
194:25 - gonna be
194:27 - we're gonna give it a background
194:29 - and then a padding of four
194:32 - okay there we go so now the comment is
194:35 - showing up beautifully okay and so if we
194:38 - have multiple comments they're all going
194:40 - to show up
194:41 - just like this
194:43 - okay if we look at our final version of
194:45 - our app the final version of our app
194:47 - looks very similar
194:48 - besides that this is gray here and this
194:52 - isn't and then reply is also incorrect
194:54 - so let's see what's happening here we
194:56 - probably need to just style a couple of
194:58 - more things so we styled icon icons and
195:01 - now we'll need to style reply because we
195:03 - didn't style that yet so let's go reply
195:07 - and we'll say flex item center gap of
195:12 - 0.2 rem
195:14 - text and we'll say
195:16 - 818384
195:18 - a little gray color
195:20 - and there we go now reply and everything
195:23 - is looking great
195:25 - that's awesome
195:26 - okay now our comments are looking really
195:28 - nice
195:30 - okay is there any styling left for it
195:32 - that we have to do we have profile image
195:35 - we have profile image container profile
195:38 - info post info container icon icons
195:41 - profile image wrapper reply so styling
195:45 - wise we're all good here
195:47 - and now if we have multiple comments
195:50 - this should show up very nicely so let's
195:52 - insert a new row let's go ahead and say
195:54 - author is
195:56 - david riccosi
195:58 - we will say
196:00 - this is my fight song
196:03 - let's put a glove here
196:05 - and then post id will be two so it'll be
196:07 - associated with the medium with
196:09 - typescript post and the user email will
196:11 - be david cleverprogrammer.com
196:14 - we will hit save
196:15 - and there's an error ah because we
196:18 - probably don't have david inside of our
196:20 - database so let's go here to our tables
196:24 - and let's go look at our users who do we
196:26 - have we have gandhi at gmail.com so
196:29 - let's go ahead and copy that email
196:32 - and let's we can actually even view data
196:34 - which is really cool so let's go ahead
196:35 - and paste this let's hit save
196:38 - okay that worked beautiful and look at
196:41 - this it's showing up this is my fight
196:43 - song
196:44 - that is great that looks really freaking
196:47 - cool too and it's pulling the data from
196:49 - our database and we figured out the
196:52 - error with the time ago saying the error
196:54 - that was happening actually is it's
196:56 - created there's no such field as created
196:58 - at like this there is a field created
197:01 - underscore at and now what we can do is
197:05 - i can go ahead and un comment this bad
197:08 - boy right here
197:10 - and it should work okay boom there we go
197:13 - so now it's twitter style so it's like
197:15 - this comment was posted one minute ago
197:17 - this comment was posted 58 minutes ago
197:19 - so that looks very nice
197:21 - so now that problem is completely solved
197:24 - as well
197:25 - and there you go
197:26 - the now we have the ability to get the
197:29 - comments of any given post
197:31 - beautiful
197:33 - now pretty much one of the last things
197:35 - that we're gonna add is the ability to
197:37 - actually add a new comment let's go
197:40 - ahead and do that
197:41 - all right so now the last thing we're
197:43 - gonna work on is the ability to save a
197:46 - comment aka write a comment so this
197:48 - component right over here okay so you
197:51 - could call it new comment you could call
197:52 - it write comment save comment whatever
197:54 - you want okay so this is what we're
197:56 - going to be making right here so when
197:58 - i'm thinking that i'm immediately
198:00 - thinking we're going to be creating a
198:01 - new component so let's go inside of our
198:03 - components here and let's go inside a
198:05 - comment section let's create a new thing
198:07 - new file
198:08 - and we'll call it
198:10 - save comment dot js
198:13 - okay and now inside of save comments
198:16 - obviously we're going to do save comment
198:19 - okay and we're going to destructure post
198:21 - id here
198:23 - and let's go ahead and do div
198:26 - div
198:27 - let's go ahead and do h1 save comment
198:30 - and let's go ahead and export default
198:32 - save comments okay so now we have this
198:36 - let's make sure that save comment is
198:39 - actually showing up where it needs to so
198:41 - save comment shows up in our id page
198:43 - okay so basically let's go ahead to our
198:46 - pages
198:47 - and let's go ahead to our post pages and
198:50 - let's go ahead into our id page i'm
198:52 - going to open a new tab right here
198:54 - and let's import
198:57 - save comment from and we're going to say
199:01 - components slash comment section slash
199:05 - save
199:06 - comment
199:07 - and then we just got to render the save
199:09 - comment component out right over here
199:12 - like we added that little note for
199:13 - ourselves earlier and raise is going to
199:15 - go ahead and say save
199:17 - comment and let's render that out
199:19 - and hopefully we should see something
199:21 - along the lines of save comment okay and
199:25 - this should show up on the post detail
199:27 - page
199:28 - so let's see do we see it save
199:31 - comment anywhere
199:32 - no we don't okay let's go back to the
199:35 - home page let's click back into this
199:38 - okay
199:39 - so
199:40 - i don't see
199:42 - save
199:43 - comment anywhere
199:44 - so let's go check why that's happening
199:46 - so let's go to save comment i clearly
199:49 - have an h1 that says ah because i'm not
199:53 - actually returning this as a component
199:56 - so it's not returning it that's the
199:58 - problem
199:59 - so there we go now save comment is
200:02 - showing up
200:03 - okay
200:04 - so let's go back to
200:07 - id
200:08 - okay
200:09 - or sorry let's go back to save comment
200:11 - now and let's actually
200:13 - make this a pretty component
200:16 - all right so
200:18 - i'm going to remove all of this here
200:20 - okay
200:21 - so we're going to have a div
200:24 - and the div is going to have a very
200:26 - simple styling here so we'll say class
200:28 - name
200:28 - and text small so it's just going to
200:30 - have small text i'll say comment as
200:33 - and we'll put an empty space here
200:35 - okay comment as
200:37 - and then we'll have a span tag
200:41 - and we'll make it we'll make this gray
200:44 - or some color here 4
200:46 - 2 9 6 ca
200:49 - and we're going to say if the current
200:52 - user
200:53 - get get the current users full name here
200:57 - okay and this is just optional chaining
200:59 - so our app doesn't crash just in case we
201:01 - don't have access to our current user
201:03 - remember whenever this error happens go
201:05 - back to the home page
201:07 - and then simply go ahead go down and
201:10 - click the user
201:11 - okay
201:12 - so not a big deal if that happens okay
201:14 - so go ahead home page and then go from
201:17 - there okay so now we're getting this
201:19 - error that says current user is not
201:21 - defined so that's not a problem we just
201:23 - have to get access to the current user
201:26 - okay so
201:27 - how we're going to get access to current
201:28 - user is we can actually get it from our
201:30 - contacts so let's go ahead here we're
201:32 - going to say const and we'll just get
201:35 - access to our current user we don't need
201:36 - is loading okay so let's go ahead and
201:39 - import this guy as well so our current
201:41 - user we need to import
201:44 - context right so let's go ahead and
201:46 - import context we have access to it we
201:48 - need to import use state and use context
201:50 - from react so let's get those because we
201:53 - need to get this use context here right
201:56 - now we'll have access to current user
201:57 - that's not a problem let's simply go
201:59 - back again to our home page then i'll go
202:02 - back to that specific post and click it
202:05 - and we should be able to see our current
202:07 - user so let's go ahead refresh okay
202:09 - there we go so now we can actually see
202:12 - our current user full name right so
202:15 - we're able to actually get access to
202:16 - that thanks to medium context
202:18 - now let's go ahead we're going to need
202:20 - to keep track of a certain state which
202:22 - is going to be our input state so let's
202:23 - go right there
202:25 - and in order to keep track of it
202:27 - obviously we're going to need to go
202:28 - inside of our text we need to have a
202:31 - text area for this so we can actually
202:34 - show the text so let's create our text
202:36 - area so let's go down inside of our
202:40 - inside of our text small
202:42 - and then we're going to create a wrapper
202:44 - first actually let's go ahead and create
202:46 - a wrapper for this entire div
202:48 - and yeah let's wrap it in that
202:51 - okay let's go ahead and style that
202:54 - and i'll say class name
202:56 - and we'll say style.wrapper okay and
202:59 - then we'll create style con style is
203:02 - equal to and then for wrapper this is
203:04 - the styling that we're going to do here
203:06 - i just want to speed it up a little bit
203:08 - guys honestly because it's
203:10 - quite a long tutorial right so i want to
203:12 - just fly through the styling because
203:13 - there's nothing new at this point but we
203:15 - just need to cut the finishing touches
203:17 - so we can get this app rock solid okay
203:19 - now let's go ahead and style this
203:21 - wrapper so we have this style so you can
203:23 - see it says comment as rafikaze and it
203:25 - looks really clean and then we're gonna
203:27 - need the text area box inside of here as
203:29 - well so i'm going to take that text area
203:31 - box and i'll explain this code to you as
203:34 - well but i'm just going to speed up a
203:36 - little bit so
203:37 - boom let's put text area right there
203:40 - this is just following what we're typing
203:42 - in the text input so that's it this is
203:44 - giving it a style we're setting the
203:46 - columns and rows to a certain size and
203:48 - then we're just saying hey placeholder
203:49 - what are your thoughts this can be a
203:51 - self-closing component so we can just
203:52 - put that slash right over here
203:54 - and there you go okay we have this guy
203:57 - text is white so we can't see this so
204:00 - obviously we need to style this so let's
204:01 - go ahead style input
204:03 - and the input styling actually is going
204:05 - to be the following so i'm going to go
204:07 - here we're going to go there paste okay
204:10 - so input styling is going to be rounded
204:12 - we're going to have borders around it so
204:14 - you could see those like borders right
204:16 - there's obviously border radius action
204:19 - going on as well that's why we have
204:20 - rounded right there we have a color for
204:22 - the borders it's just like a not a white
204:25 - border but like a grayish we have a
204:27 - background color for the border as well
204:29 - so that's why you see this in a grayish
204:31 - background gray dark black whatever and
204:34 - then we have padding padding left and
204:36 - then we have small text white now when
204:39 - we write in here we can see everything
204:40 - so now it looks a lot nicer so that's
204:44 - what we have for the text area that's
204:46 - happening okay and then what we need to
204:48 - actually do is just go ahead and create
204:52 - a comment button that when you click it
204:55 - actually saves the comment so i can
204:57 - actually go ahead and just do save
204:59 - comments let's make sure we're importing
205:02 - save comment as well so we have access
205:04 - to it
205:05 - so let's go at the top
205:07 - and oh no actually we're in the safe
205:08 - common file so obviously we have access
205:11 - to it
205:12 - right so on click
205:14 - so save comment guys is going to be a
205:16 - database function that we're going to
205:18 - have here
205:20 - okay and so let's go ahead and create
205:21 - that and i'll just walk you through what
205:23 - it does here so again nothing new so
205:25 - that's why i'm just going through this
205:27 - faster
205:28 - so we don't need to care about loading
205:30 - nobody cares okay you could have loading
205:33 - here but you honestly don't really need
205:35 - to okay
205:36 - and what this does is
205:39 - it will go into the comments database it
205:42 - will insert the comment based on the
205:44 - author the text the post id and the user
205:46 - email
205:48 - and then we'll set the input to empty
205:51 - once we're done
205:52 - so that's what this function does
205:54 - and then we run this function when you
205:56 - actually click the comment button so
205:59 - let's go back to our home page here
206:03 - and then let's go to
206:06 - build medium with typescript we could
206:07 - see all the comments related to it we
206:10 - can see the comment button let's go
206:11 - ahead and style this because it looks
206:13 - not doesn't look very pleasant right now
206:16 - so let's go ahead and style comment
206:18 - button give it a rounded full certain
206:20 - gray color font is bold right so there
206:23 - we go now comment looks better and let's
206:25 - just say
206:26 - yo does this work okay let's go hit
206:29 - comments and then let's see if something
206:31 - happened so i'm going to go ahead and
206:33 - try to refresh this page
206:35 - and fingers crossed
206:37 - let's see if it works if it doesn't then
206:40 - all good we'll see if we can make it
206:42 - work okay so let's go
206:43 - back to our home
206:45 - and then once we're on our homepage
206:47 - let's click build medium with typescript
206:50 - okay so that did not actually work and
206:53 - add our comment
206:54 - so let's let's see what went wrong here
206:57 - okay so
206:59 - save comments input set inputs
207:03 - okay we have our current user
207:05 - let's go there so on click
207:08 - we're gonna run the save comment
207:10 - function that's interesting let's go
207:12 - take a look at our database let's see if
207:14 - there's any comments added okay no
207:16 - comments were added interestingly enough
207:19 - so i have let's just walk through the
207:20 - logic of this i have my post id
207:23 - from the route
207:25 - i pass my post id in to my comments
207:29 - i have a table called comments so that's
207:32 - good
207:33 - i'm inserting the author name the author
207:36 - full name the text is the input that i'm
207:39 - typing in
207:41 - here so what's actually happening let's
207:43 - just go ahead and inspect
207:45 - and see if it's giving us
207:48 - see if we're getting any errors here so
207:51 - let's go ahead and write test by comment
207:54 - it looks like we're getting some errors
207:56 - ah it's a super bass is not defined so i
207:58 - haven't i need to actually import super
208:00 - bass
208:01 - okay so there we go super bass
208:03 - let's try it now okay let's go ahead and
208:06 - say
208:07 - does this work
208:09 - and let's go ahead and comment
208:11 - that looked a lot more like it actually
208:14 - let's refresh
208:15 - yes
208:17 - the comment came in does this work
208:20 - okay
208:21 - let's go ahead to the home page again
208:23 - let's come back to this and let's now
208:25 - add test and let's go comment okay and
208:28 - then
208:29 - let's go in our super base let's refresh
208:31 - and see if test came through all right
208:33 - so apparently post id is blank
208:36 - so it doesn't yet know what the post id
208:39 - actually is
208:40 - so
208:41 - let's see why that is happening and why
208:44 - it doesn't know about the post id
208:46 - so i will console log here and we'll
208:49 - console.log post
208:51 - id okay
208:53 - and then let's go to the home page let's
208:55 - go here and let's see if post id it says
208:58 - it's undefined interesting so where we
209:01 - need to probably pass at the post id so
209:04 - let's go here and we'll say post id
209:07 - selected post dot id so let's just make
209:10 - sure we're passing save comment that
209:12 - from our
209:13 - id dot js
209:16 - okay let's go ahead and say now the post
209:18 - id is two very good let's say test let's
209:20 - add the comment
209:22 - actually let's say cookie eater
209:24 - and let's add the comment
209:26 - nice look at that you guys if i go back
209:30 - to my database and refresh this you'll
209:33 - see that i have cookie eater post id is
209:35 - actually two
209:37 - and it's showing up how beautiful is
209:40 - that so we can go to another post here
209:43 - i can say
209:44 - hi
209:45 - let's hit comment
209:47 - and look at that it's showing up
209:50 - wow
209:51 - let's hit it
209:52 - there we go
209:54 - guys this was absolutely phenomenal if
209:58 - you've made it this far you're an
210:00 - absolute champ i just want to say that i
210:03 - appreciate you and your beautiful face
210:05 - so much make sure to smash that like
210:07 - button so this video goes out to
210:08 - everybody and i'll leave it to you as a
210:11 - challenge to see if you could add the
210:13 - upvote and down vote functionality and
210:16 - yeah see if you can actually make that
210:18 - work okay that's gonna be a challenge
210:20 - for you
210:21 - and that'll let you take your game up to
210:24 - the next level but all of the concepts
210:26 - have been explained everything and how
210:28 - it works has been already explained so i
210:30 - will turn that over to you with that
210:32 - said i love your beautiful face thank
210:35 - you so much for watching and following
210:37 - along as always i love your beautiful
210:40 - face this is qazi and i'll see you
210:43 - in the next video

Cleaned transcript:

what's the place developers go to when they have a problem and they need other people to sympathize you thought stack overflow think again we go to reddit that's a place where we go and console with others learn about life and a lot of us use reddit on a regular basis now in this video we're going to be building reddit by ourselves with our own bare hands and building it from scratch this reddit is going to be probably the best reddit that exists on the internet first of all the front end is absolutely immaculate it's beautiful and you also have a lot of functionality for example you can log in with google authentication inside of this reddit you'll be able to create a new post you'll be able to see all the posts that are already there you'll be able to comment on a post you'll be able to upvote or down vote a post all right and all of this we're also going to be using a really nice tech stack so the tech stack for this build is going to be next.js we're going to be using tailwind css for styling and we're going to be actually using super bass for the back end this was something that was actually really interesting to me this tech stack especially like using super bass for the back end that's something i wanted to do for a while and in this video we'll get to do that and build it now if you're ready to start coding this bad boy up make sure to smash that like button so this video just goes out to as many people as possible by the way if you don't know me i'm rafa qazi the ceo and founder of clever programmer i've been coding for nearly a decade and i've helped millions of people learn how to code with that said let's jump right into it all right let's go ahead and demo this app now so i'm gonna go ahead and hit sign in with google i'm gonna choose my email and once i'm in look at this how beautiful this is i have my header when i hover over all of these icons in my header they look absolutely gorgeous i can go into the search and type and then when i scroll down here i have all of my posts and i can go into any of them or if i want i can actually create a new post as well so let's say we're going to dispose this is a new post you know our free javascript course so let's go into this post right here and you can see we even have a thread comments so i could actually say this is awesome okay let's hit comment you get a nice little loading screen and now this is awesome is there so this is actually being stored in our back end and then showing up on our front end and it's super fast as you can see so now let's go ahead and go back to the home page or you can just hit the reddit logo that will bring you back and here i'm gonna go ahead and let's say i really like a post right one of these posts right here how to build a reddit clone with nexus i can go ahead and upvote it and uh you saw that it upvoted it and let's say replit is cool let's upvote it or maybe best dev community let's down vote and boom look at that and there's something really freaking cool that's happening that i really want to show you and we're using something called swr hooks in react and they are so powerful than just the regular way you fetch data and i'll show you them if you've never experienced them before but what's amazing is like we're pulling all of this from supabase and we're not using its realtime functionality so think about it how come when i hit up after a second or two it automatically turns it to a three how's that happening it's like almost doing it real time however it's a postgres database on superbase and we're almost getting this realtime experience of when i down vote or upvote things change things change dynamically so there's some magic that we're doing on client side that i'm really excited for you to see and how we're doing like revalidation and caching and it's all happening with one line of code so it's nothing actually complicated either and just so you can have a roadmap for this build and how we're gonna go through this is the header and banner this stuff we make so much at clever programmer and if you ever watch any of my videos that we're not going to be making the header together the banner or this guy or this guy we're going to be doing the interesting parts together in this build so i'm going to be just giving you giving away the header i'm going to be giving you the about you know component the banner component i'll just be giving away all of these components to you and then we're going to actually start from the more interesting parts of getting this set up and then getting the database to start working and then being able to add comments and liking posts and disliking posts and authenticating and all of that good stuff okay so we're going to start from there now if you want to actually follow along and you want access to the code and to build on top of it you're going to need to fork this reple and it's going to be at the link join.replay.com cp dash reddit okay so make sure you click that once you go to that link it'll bring you to this page essentially which is going to be a reddit starter right here okay so i'm going to be sending you to the reddit starter why because the registrar will have the header component the banner component the about js component yeah it'll essentially have all of the components that you need and all of the styling it'll have nexjs template already ready to go it'll also have tailwind temp ready to go and it'll have typescript enabled even though we won't really be using typescript but like all of that will come out of the box and be ready to go if we just fork this and build on top of this that's what's really nice about repple and replit because it allows you to do that now if you want to do this why i say fork this in all caps is make sure you fork it otherwise you won't be able to run your own code or make your own changes so just make sure you go ahead and say fork rupple and once you fork it you can actually then get started coating on it now that you fork this i am going to simply walk you through what you're basically looking at here here's what i want you to do on the right hand side choose shell and all i want you to do right now is just do yarn dev so this is going to be really cool because a bunch of the app is already up and running and then hit that button right there so it opens your app up in a whole new tab so i'm going to hit that and let's wait for this to render and reload there we go so this should already be up and running for you just like i said we've already given you the header we have given you the banner we've given you the banners like this whole thing we're giving you this about component and then this create a new post component okay so if we go to our app right now and basically what i'm going to do is i'm just going to close this for now and i just opened up a new chrome tab here like literally a new chrome window so i could just put that here so i could see my app the entire time i'm working on it okay and let's just take a look at what you've been provided with already okay so on the left hand side i have components and in components you're given a couple of components so for example you're given a header component and that's that guy right there okay you're given a feed component which essentially will show this gives you the ability to actually create a new post and when we retrieve the post from our database in the feed is where all of the other posts will also show up okay so that's what's this one is called the feed the community component page that you have this has a couple of components like the about component so the about component is this guy right over here on the right hand side right with the join button at the bottom and then of course in the community is also the banner which is that guy right there okay so now just to play around with these and just to get comfortable in this new project i'm going to show you where you can go and change things so in pages just go into index.tsx and by the way don't let tsx freak you out it's this app is typescript enabled however you can literally just write regular javascript code and it works totally fine so we're not really going to be using it like a typescript file we're essentially just going to be using javascript code in here okay but i'll explain why we chose a typescript template as well so give me one second but if you're in here you have header just go ahead and comment it out okay or just delete it and watch what happens if i delete header just so you can get a feel for the app look at that that is gone completely okay now bring it back and it's placed there beautifully okay when you hover it highlights all of that functionality if you're like hey what's the banner exactly we'll just comment it out or delete it and watch what happens the whole banner is gone okay if you're like hey what's this create post component i imagine you you might have a feeling that it's this just go ahead and test it out delete this and watch what happens and when i delete it it's gone all right so those are the components if i remove about component and i go full screen you'll see this about component will vanish okay let's hit command z and bring that back or control z for on windows to undo and there we go our about component is back so that's a little bit about how the app is structured right now we've given you some of the front end that way we can get to the more interesting parts of the code and i just want to familiarize you with everything you have so you have the down vote icon the upvote icon so that's going to be in the comment why it's in the comment is because it's being used in a lot of different pages and places so you'll use upvote and download pretty much throughout the entire app whereas the banner is really only used on the front page whoops okay didn't mean to move community we just moved community back in these are really the four folders but really they're like think of it like three or four components that we've given you so that's already there in assets you have some icons and some loading animations so those are also handed over to you and let me see the other things that you have to know about are just a few other things so for example in styles for tailwind css we've given you this we've made all of the text white for you already because every place you're going to type we need you to type white text so boom like that that's white text so that's already white we have set up tailwind tailwind is already installed as well so if you actually look inside of your package.json it already has all the tailwind stuff you need like tailwind css post css and the auto prefixer okay so let's go back so tailwind is installed we have the tailwind config file for you ready to go the post css file ready to go and then typescript is enabled right so this is the ts config and typescript is ready to go so if you wanted to code it up in typescript you can if you don't want to that's totally okay again like i told you we're not really using a lot of the typescript functionality which is typecasting or type checking and all of that but here's where it could be helpful so let's go to index.tsx so in index.tsx page right if you can change it to essentially index.js and your code should pretty much still run fine but the cool thing about typescript that i really like so here's just one typescript thing that you have to know you might be wondering hey what's this home component like why is it why am i why i have to write this this is weird this is the same thing as writing this but in typescript we're just saying that the type of this component is this is a next page and so we can actually import that and say that here so if somebody looks at it who's never really written typescript next code or whatever they could look at it and go oh the type of home is not a regular function home is a next page component like this is something special so they would know right away so it makes your life easier so yeah you can just leave that here you don't really need to remove that okay and then the other benefit of typescript is when you have errors and you're defining something that doesn't really exist it will catch it for you ahead of time what that basically means is you won't have to really worry about running your code and then waiting for the command line to crash and then you finding out what the error is typescript oftentimes will test everything for you already and tell you the errors before runtime that way you can catch the errors a lot faster and then debug them a lot faster so that's another thing that i really like about typescript so that's why we've enabled it in this project okay so that's the overall project those are all the things that you need to know before we continue okay and by this point you should have this much of reddit up and running already which is pretty exciting right because you have a bunch of stuff functioning already next up what we're going to be working on is building out our post component and building out a feed component that can show all of our posts so i'm excited to work with you on that alright so the component now we're gonna work on is our post component and let me tell you what posts will actually look like so this is the final version of the app okay let's actually open it up right here and i'll close it from this okay so this is currently what the post component looks like okay this one right here this is going to be our post js component oops let's make a little error and we'll say post js and this component has a couple of different parts like for example we have our votes we have the info part about the author and everything okay and then we have our actions right here actions right actions this is going to be the info and then this part is like vote so those are going to be kind those are going to be like the sub components so think of these each like a component actions as a component votes as a sub component okay so those are gonna be the sub components of like post now we're gonna make these ones though the ones i'm gonna make myself a little bit smaller so i don't get in the way of anything all right so we're gonna basically make the post component without info actions and vote first so we're gonna not have this first and then we're gonna go ahead and add the sub components and it's gonna look just like this it's gonna look super nice okay so let's get started on that so first things first what i need to do is in my common i need to have a new file and this file over here is going to be called post dot js okay and i'll put myself bottom for now all right so post.js now inside of this file we're gonna start making this post component so let's go ahead and go const post and for now we'll just say a return an h1 that says post export default post and then we need this to show up so the question is where do we have it show up now what we want to do is inside of our feed we want to create a new file this will be index.js and this will be the feed file okay you'll be able to import it by just saying you know slash feed so this is going to be the main file basically and how you should read this so for example like if you're in header right and you're like in header and you're like yeah i see these four components what the hell's going on the way i read this is i go this is actually the header component this is the main header imagine this says header.js this is the actual header component and then these are actually the sub components that are required to finish building this header okay that's really what's happening and i promise you if you go in index you'll see that all of those are being somehow or another used all right so inside of feed this is the actual feed component this is the main component this is a subcomponent of feed and you could probably tell that already right because this is just one part of the feed but another part of the feed is going to be all the other posts that are going to be underneath this for example if i go to the final working version of the app and let's hit refresh boom these this is the feed right all of these other posts okay so inside of my index of my feed i need to just make sure that create post and everything is showing up and i want to make sure that my post is showing up the post component i just made so the post component is inside of common why is it inside of comment because there's going to be multiple pages where that post component is shown for example if i go to the final version of the app the post component is showing up here but when i click and go completely inside the post component is also showing up over here so that's why it's we call it uh we put it in common so let's go ahead and import our post component from common post and then the next thing we're going to do is going to be the feed component and we're just going to go ahead and say return post okay so now feed should show essentially one post and now we want to make sure that the feed is showing up on our home page so let's go to pages let's go to indexes.tsx or main main and right underneath create post i want feed to show up it's going to error out obviously because we haven't imported it yet so we're going to say import feed from and we're going to say components slash feed that is it you don't have to say you don't have to even say slash index.js okay that's the cool part about naming it like this we're just getting feed from this right here okay so it reads reads really nicely too let's refresh okay maybe we forgot to export this is a really helpful error message that is showing up here and it says it's possible that you might have mixed up default and named imports or you likely forgot to export your component and that's actually what happened so that's very nice error message so let's go back to our feed index.js and let's go ahead and say export default feed let's refresh and see it now and there we go our post component is showing up now we just got to go ahead and knock it out so i'm going to command click into the post component and if it's ever being buggy or anything you can just kill this right over here and uh you can also actually in here right if you're if it ever dies or crashes you could kill it in the shell and then just like npm dev it again or yarndevit again and it'll start okay cool so now let's go inside of our post component inside of common right we have our post component and we'll actually start building out our post component now so my post component needs a couple of things first of all we need to wrap it in a parent div so then we can actually add multiple now for h1 really h1 is gonna be my where my title for the post is gonna go so let's go ahead and you know how to build that let's grab that title let's go back and i'm gonna boom how to build a reddit clone with next.js okay so that's gonna be the title part so we're good there let me make this a little bit bigger and i'll make this a little bit smaller great so we're good with this first title okay so this is gonna be our title and i'll let's give it a class name afterwards okay so title then like the next thing we're going to have is our content so this is where our content is going to go so this is let's see if we have some content here we do this pa i'm going to copy this content and i'm going to paste it there we go that's our content and then we need yeah i mean that's pretty much in terms of like what it will be without any of our other components sub components like the info component i was talking about earlier the action component actions component of the vote component this is pretty much all it's really going to be like now to design it we need to make it look better right so what we need to do is we need to actually add a wrapper around this entire thing okay and we need to actually create a styling for post so let's go ahead and create a styling for post so let's turn it into a div and we'll say div right here okay and the class name we'll give it will be style.post okay and now what we'll have to do is we'll have to actually create that style so we're going to say con style okay and then in here i'm going to create a style for post and so the styling we're going to have for this is going to we're going to make it flex enabled in column will give it a little space and a cursor pointer when you hover over it all right so if i full screen this now starting to look a lot more like an actual post okay now the next thing we need to do is i need to actually add this in a wrapper so i'm going to go ahead and say style.wrapper and let's end this div right here okay and basically what i'm going to do and by the way if it ever is slowing down on you or crashing on you or whatever just wait all right or if you're ever about to refresh and this thing pops up that says changes uh you made may not be saved in that case either wait for that or just command a command c ctrl a ctrl c if you're on windows copy everything that you have in this file then refresh now if you lose any data or anything goes missing you can just command a command v over that meaning like you could just select everything and paste whatever you had copied earlier that way you don't like lose anything so just keep copying once in a while it's a good idea that way you have everything saved okay so i'm gonna go here and i just need to add a wrapper now and create the styling for it so let's go ahead and create the styling for my wrapper and we're going to make it flex enabled we're going to add a little spacing horizontally we're going to make it rounded okay so let's take a look what it looks like right now we're not able to really see it too much let's give a background color okay and we're going to give a background color of like that grayish color so let's go ahead and do that be okay there we go so now we have the little grayish color in the back the next thing i'm gonna do here is we're gonna add a padding to this okay so the padding makes it look a little bit better and then outside of the padding what i want to do is give it a border and then we're going to give it a specific border color and it's going to be three four three five three six for the border color okay so now that's done okay this is how our posts should look like so that part is done now we need to style the title so our title should be highlighted and look different than it is right now so we need to create styling for our title i want to say style dot or sorry class name and we're going to say style.title or you can say post title okay and then we're going to go here i'm going to say post title and for post title what i want to do is go hey give me make sure the text is large so you should see the text become a lot bigger now i want to go font medium and then for the text color i want it to be the specific color over here it says dad love that okay so now our text is there it's popping out a little bit it's a little bit bigger okay and for post content we're gonna give it pretty similar styling to this so i'm gonna say post content for text dom and it says small font will go light and then for color we're going to actually give it the same color except here's what we're going to do i'm going to say slash 80 on this now let's go ahead and add that for post content so we're going to say class name style top post content we'll add that style style oh yeah just kill that bracket because i added a bracket there by mistake and there we go okay so now posts are looking very good but they don't look like posts completely right now the reason for that is because you don't have the vote buttons right you don't have the action buttons at the bottom that show how many comments there are and you don't have this info this was posted by david blah blah so now we're gonna go ahead and make the sub components that are required for this now we're going to go ahead and make the post sub components action info and vote let's start off with vote so i'm going to go ahead inside of my feed folder and inside of the feed we're going to create a new file and it's going to be called vote.js now obviously since this is going to be that i'm going to say vote const and we're going to say return and i'll make an empty let's just make a div here because we know we're going to need a div at some point and then i'm going to go here and just say vote and say export default vote go back to index here import it in here so i'm going to say import vote from vote and then just wrap it in an empty div for now okay and actually maybe instead of feed we should actually give vote to post not feed be just fine for now so let's go inside of our post component inside of common and let's give this guy a vote so let's go import vote from and we'll go out we'll go into feed and we'll go and grab vote import vote from feed vote perfect and then we'll see we'll have vote show up right above the post so let's go right here and i'll go ahead and say vote just leave it like this for now okay so this is what you should be seeing on your screen you should have the word vote pop up let me leave the code like that here for now zoom out just a little bit so it looks more normal perfect now let's go back to vote inside of feed and let's remove this h1 we're gonna replace this with a button instead and in this button we're actually going to put an upvote icon so i'm going to say not that but up vote icon all right so that means we have to import upvote icon from common upvote icon.js so i'm going to say from it will backup we'll go inside of comment and we'll say upvote icon just like that okay so now we have access to it okay and now it's saying hey inside of somewhere you likely forgot to hit export it was possible in our upvote ah okay so it's a name component so see the error also says you might have mixed up defaulted named imports so this is a named import and not a default import what basically means is you have to just put these squigglies around it you're destructuring it from it there we go and now you can actually see the upvote icon is showing up right over here now all we need is another button that just has a down vote icon so i'm going to go copy this let's paste it and let's replace this with down right that's down vote icon let's copy this line here let's paste it and let's change this word as well to down okay and uh let's rename this to downvote icon as well and there you have it we now have upvote icon and we have a downvote icon now the next thing we need is if we go to the final version of the app you can see that each vote that you see here has a number in between the buttons so in between the buttons i need to have my number so i'm going to say i'm going to create a p tag here this p tag will be the number of votes so for now we'll just say 10 minus five let's just write some javascript here and we'll say 10 minus five votes okay uh and this why i'm writing this here and leaving it like this is um because in future this will be upvotes minus down votes and you'll have that number now the five is looking a little bit crooked doesn't look right so we're gonna go ahead and create a styling for for this so let's go ahead and say con style and this style is going to be called votes just like this and for this styling what i'm going to say is hey give me padding from the top so let's see that beautiful make the text extra small okay and uh let's add the styling so we can actually see it as it's happening real time so i'm going to say class name styles dot style dot votes so you can see the text just turned like super small let's make the font bold and the text white great now the next styling we're going to need is a wrapper because right now these things aren't like aligned the right way and they should be in a flex box in a flex column because they're going up and down like this right that's where you need a column and uh they should also everything should also be in the center so we're going to create a wrapper we're going to wrap create a wrapper here so i'm going to say class name style.wrapper and for the wrapper i'm going to make it flex column and let's go item center and there you have it now the 5 shows up right in the middle exactly like how we want it to show up okay and we can even make it like a add a little bit more dummy data and we could say up votes equals 10 cons down votes equals five and uh we could just say up upvotes minus down down votes okay and there you go so posts can have negative votes as well so that's why we're not doing a negative check it's totally fine to have negative votes so there you go so now our vote sub component is completely done now we're gonna work on our next sub component which is gonna be the action sub component so let's go ahead and do that so first step is gonna be what you tell me okay let's do this together so what's the first step going to be if i have this feed over here yes inside of this folder i need to create a new file right and that file is going to be called actions.js what's the first thing i'm going to do here you know i want you to start getting some practice mentally as you do this with me the first thing we're gonna do here well we're gonna write the component so i'm gonna say const actions and then we'll just return something so we'll make a div we'll just add an h1 in there that says actions and then we'll hit export default actions now the next thing we need to do is make sure it shows up inside of our index.js okay aka our feed compo or sorry in our post component actually we need to make sure it's showing up in our post component so let's go to our post component in common i'll just open up a new tab here and we need to just import it so i'll copy this paste change this to actions and change this to actions so now we're importing it and now where will actions go is is my question to you will actions go at the top in the middle at the bottom right actions just so you're you're clear actions are these guys right over here the comments all of that so where will they go exactly they're going to go at the bottom so if they're going to go at the bottom then pretty much all the way at the bottom right here is where we need to add our actions as a selfclosing tag okay and our actions are actually showing up so that is wonderful let's go back to our actions and finish out building this okay first let's take a look at actions and just see and we can understand right so we have these three things right here now first things i see is to me this is a flex this is not a flex column right this is a straight up flex row so i see that we have flexbox enabled the next thing i see is i'm sure we're gonna need to work with the text color so we're probably gonna have to do something with the text color at some point and that's the next thing i notice the other thing i notice is the font size is kind of either regular or small so that's another thing we have three icons here so there's probably going to be some importing icon action happening okay and uh you know the left icon is called the annotation icon then we have the gift icon and then we have that share looking icon so those are going to be the three icons that we're going to be using here and so i feel like we should have a pretty good grasp of what's happening now this is usually pulling data dynamically but for now ours will just be pulling data in a dummy way okay so let's go back now that we have the lay of the land and what we're doing i'm going to start off with importing the icons first just because i know that that's something we're going to have to do so let's start off with that all right so let's go over here and i'm going to import all these icons we're going to say import annotation icon close this tab right here icon gift icon and share icon and we will get this from hero icons react dash outline now if we don't have hero icons installed here's what i want you to do just copy from here from the at sign to the word react where it ends copy it let's go to our shell and simply let's do yarn add and we'll paste that at hero icons slash react and that should install those icons so that we have access to them okay now let's continue working on our app while that's installing so the next thing i have to do is actually just get those icons to show up all right so let's put an annotation icon right here so i'll say annotation icon okay uh the next icon that i need to show is gift icon and then the next icon that i need to show is share icon all right let's see where our install is at our installing install is almost completed it's 281 out of 283 it's like more than 99.9 completed okay and uh now if we go back to our app yay look at that our icons are showing up let's go baby now the our icons are showing up and that's great but what's the problem here the problem that we're actually having here is these icons are massive so we need to actually make sure that these icons are short small so we can see them which is why we'll need styling so let's style the icons i'm going to give this icon a style of icon and we'll just do the same thing for all the other ones and then let's create the styling so we'll say con style and i'll say icon and the icon styling i want is height is four and width is four so just hey chill them out make them small so they're not massive there we go so our icons are now added perfect very good now remember i said we need them to be in some kind of flex well we need a icon container that can do that so let's create another div here and this div will serve as so we'll call this div and we'll say class name is style dot icon container okay and i'll just tab these bad boys right here and we'll say div class sorry we'll just end this okay so now icon container has three icons and we're just going to style our icon container with obviously a flex so flex and alone should help it a lot now we want to make sure everything is nicely and center aligned and it looks normal very good we want to give everything some breathing room on the xaxis so let's give it a little bit of spacing in between and remember what we said text color is going gonna be a thing right so let's give it a text color of eight one eight three eight four so it's gonna be like this grayish darkish color okay what we're gonna do is put actually every single icon in an icon container instead of the whole thing in an icon container so let's go ahead and do that put this in an icon container okay let's put that guy in an icon container and this guy in a nikon container and then let's just go ahead and close out these divs boom okay so now all of them are an icon container okay and now what we want to do is what this will allow us to do is now i can actually add text over here okay and in the span tag i can just put say hey 19 comments okay so now you'll see it'll say 19 comments let's add a span tag here for all of them so the next one will say just word awards words and then this one at the end here will simply say shares or share there we go all right and now we're going to add a wrapper around everything and that will be flex enabled as well so let's go ahead and do that so i'm going to give it a class name style dot wrapper and up here i'm going to say wrapper let's make it flex enabled so that alone will solve a lot of problems we'll center everything so now things are looking really good as you can see right boom and uh after item center i'm going to say space x sorry spacex four so let's give a quite a bit of space in between each single item and then we're gonna give a padding of two perfect and now for all of these span text that we have let's make them like really small text okay so we can actually just go ahead and say class name and for these we can just inline style this so i can say text s that's just saying hey make the text extra small right and then i can just grab that we can do that here as well and do that here as well so now all of those texts will just be extra small and there we have it awesome now if i look at this our component is looking beautiful right there's only really just one part left let's take a look at like look at that that is looking gorgeous that component right there there's only one part left which is the author part if i go to our app right here you can see it says posted by david riccosi all right so that info is the part that we're now going to actually create and finish so i'm going to create a new component it's going to be called info.js and if we try to understand info.js and i look at this here i have a few things right posted by who the date so when we're creating the raw dummy data for this that should honestly be pretty simple and then of course we have the author here with the logo of the author so let's just go here and let's fully try to understand this so here's the component info here are the elements we have so that way we don't get surprised we need a image okay this is going to be the logo so we know we're gonna be using an image component in here then we have text that's maybe bold maybe i think it's bold okay or maybe just really white text and then we have just more text that says the name of the person who posted it and then we have a date but from a frontend perspective right now with no data like it's just this is just text and this is just text too so this part over here is should be really straightforward to work on so let's go ahead and do that i'm going to say const info also return will create a div and inside of this div i'm going to go ahead and just say h1 hello or info rather and we'll say export default info now info should go kind of at the top so if i go to our post component we're gonna put info a little bit higher than where we put actions in our case we'll put it right above this h1 here so i'm going to say info close it and then let's import it here so let's go info let's go info and let's go back to our app and there we go info is now showing up now inside of info smaller okay now let's go inside of info so i'm going to close this and info is open as a tab here let's just bring in the logo right away so i'm gonna use a image tag okay and let's make it self closing source is gonna be the source that i'm actually gonna paste you can actually just pause the screen and try to copy it or just post a different logo you don't need to post my you know you don't need to post clever programmer logo and then all we need to do is we just need to style this so that will actually make it smaller so let's go ahead and create a styling for this now i'll say con style and then we'll say styling for our profile pic and we'll just make height 4 h4 and width 4 and then we're going to make it rounded full so it's going to be a rounded photo and let's give it the class name as well so let's go class name and i'll say style.profile pic okay and now it should become tiny and already look at like our post component is looking so beautiful already so that's exciting now the next thing we need after this let's go to our main app and let's see what uh what what do we need after is the name the author name so we just say r slash whatever the author name is so let's go ahead and do that so i got my image part done that's very good now i'm gonna get outside of my image part okay and the next thing i need is the author name so i'm going to say div and inside of this div we'll put our author name so actually i can probably just put that on one line and we can say r clever programmer in this case okay there we go we got our slash clever programmer what's the next thing that we need well the next thing that we need is the date the title and then the date okay so i'm gonna have a div that's just gonna have that dot in so if you wanna do this dot i believe it's option eight on mac and then on windows i'm not sure how to do the dots just copy the dot from somewhere or google it and then copy it from there and then we're gonna have a another and then but basically all i want to basically say here is i'm going to have a span tag and i'm going to say posted bot rafikaze okay or clever programmer or whatever say posted by clever programmer now let's just wrap this whole thing in a flex like we can see it the right way going in a row rather than how it is right now so yeah so let's go ahead and put a wrapper around it so let's go and say class name style.wrapper and i'll go here and for the wrapper what i want is something simple i wanna of course just make it flex enabled for now there we go and uh let's center align everything okay let's give some proper spacing between everything and make the text size extra small there okay and there we go all right and then let's go ahead and give it a grayish color so i'm gonna go ahead here and say eight one eight three eight four okay now one bug you might have noticed already is why how come i changed the color of this to gray but no it didn't change actually what's happening is if we go to our tailwind or global style file which is our tillman.css that has where it says hey make the color white for all text so we should just go ahead and remove that and once you remove it you're going to notice that this is going to turn gray which actually it should because this is like too bright white this stuff will turn gray and then this stuff will turn grey like i was supposed to the vote icons will also turn gray so let's get rid of this here let's hit save and there you go now things are how they're supposed to be and how they're supposed to look okay so everything just chilled out a little bit because i feel like it was too strong white and that didn't look good as a design so i'm glad that we've solved that problem so let's go back to info we've added our wrapper and we got our posted by author now the the only thing left is the date so we'll make another span tag because we need everything to be in the same line and this will just be a dot okay we'll put that and then the thing that we need after that is the date okay so we're gonna create another span tag and this will just be june 15 or yeah june 15th something like that three letters of the month and then the day and there you go so let's go back to ours yep like july 13th june 15th uh and it was my birthday yesterday july 14th actually let's just put that as the date there we go july 14. all right so now the post component is looking very very good we just have to make sure that we have some styling here handled and let's just create certain containers so we make sure that the styling doesn't get out of whack so for this image let's make a container okay so we're going to go ahead and say let's put it wrap it up in a div and i'll say class name it'll be style up profile pick container okay and then i'll simply say profile pic container all right and we will say here make it flex item center and then we'll give it some space between so there's some breathing room okay that should be that profile pick container great that matches so now our image is in a nice little container so that part is done and we're good with that the next thing that we need to make sure that we're good on is for the clever programmer that needs to be white that needs to have a certain styling so let's put a class name and we'll just say style.tag okay and then we'll create that so we'll say tag tag will be hey it's going to be a cursor pointer when you hover over it text is going to be extra small font is going to be semibold okay and then we're going to give it a specific text color so we're going to say okay and then we're going to also give it is a certain underline on hover so hover underline so now when you hover over it it has an underline just like how reddit has it so that just makes it pop and look really nice and then the last styling we're going to need is posted by and this one is going to be fairly simple we'll just flex everything center align it and then give a little bit of spacing in between everything so let's go to this part we're just going to wrap this part in a div and let's go ahead and wrap it boom right there and we'll say class name style.posted bye okay perfect and now it looks beautiful i mean like yeah this is this is gorgeous this is gorgeous this is very very nice and like it's completely mobile friendly as well look at how everything just resizes the about component shows up or it vanishes depending on the size so this is beautiful i mean it's fully mobile responsive okay great so with that said now our post component has all of the sub components and they're already made the vote component subcomponent action sub component infosub component and post at this point from a frontend perspective is completely done i'm excited let's move on now we're going to work on the feed component which is essentially already made there's not really not much to do so let's go inside of our feed folder and in here let's go to index.js all feed is gonna do is it's gonna loop through and just show multiple posts okay so right now we don't really have that many posts but we'll actually just create a dummy variable here called posts and i'm just really not even going to put much in it okay post would obviously look like an object with an id i guess let's just put it here so you could visualize what post will look like once we start storing it in the database post will have an id posts will have what else will post have posts will have a title build reddit or something post will have an author it's a quasi okay and then i'm just gonna go ahead and repeat that a few times okay let's go zero one zero two that build medium build facebook okay and maybe the author for this one is david okay so this is gonna look like now post is gonna have more information in there but that's roughly what it's going to look like so what we can do here is we can replicate that and let's just loop through so i'm going to say post.map and let's go like this right there and i'll open parentheses here and open close boom okay and then for now let's just pop that in so since there are three posts it should create this post component about three times and let's see if it does that so refresh see if we're still running into an error okay we're still running into an error so what's the problem here let's wrap it inside of a parent so let's put a div here and here okay and let's make it pretty and let's give this a try and there we go now we can actually see that because we have three posts in here three posts are showing up right boom one two three okay so now what we can actually do here is we can give this entire post we can destructure this entire post right inside of post so what does that mean that basically means that we're going to have a post where each thing is going to have an id we're going to destructure when we pass it with the the title and the author so everything is going to be destructured and then we'll have access to all of that later okay and we'll be actually destructuring is each post okay so that's what i meant to do each post is what we'll be destructuring because here we're mapping through posts so let's get access to a post okay and so what will happen is when we're passing the post component that specific post will basically have that specific post id that specific post title specific post author so writing this here is the same thing as essentially doing title is post.title author is post.author okay so you could write all of that or you could just write this and this just destructures the entire post so it's a really clean way of doing it now i can go inside of my post component and i can actually destructure the id i could destructure the title and the author for example and now here i can replace this with title and let's say i can replace we'll do the author parts actually where's author part author will be an info so our info will actually need access to the author okay so author and then we can go inside of info i can go down here where it says posted by clever programmer instead i can actually say posted by author so now if we save this let's see if we have any errors posted by author so we need to destructure author here and there we go now you can actually see the the posts are showing up like you could see the titles right build reddit build medium build facebook let's go inside of common and i'm just going to open up posts in a new tab so we can see posts very clearly so there we have it we are passing it all this information it's showing all of that information and i think this looks pretty good right now let's go and check where we have the post showing up so i'll open up index here as well let's open up the index and in my index i have all my posts now later these posts will come from a database okay so i'm just going to leave a comment here these will come from a database okay for we're just hard coding it right now passing it to our post component and then our post component has access to all of these properties and then it's showing all of these properties okay so obviously we don't have all the properties in here right now but content will be one of the properties too and that's something that we might as well actually just go ahead and actually write it right now so we can actually set content let's i'm sorry let's leave it for now just because it's going to be a lot of like manual work and let's just do all of this when we actually get the data from a database i think that'll be better that's better let's do that way so there you go there's your feed component and now it's working only problem is styling wise so if you look at this there's some room to there's some breathing room right here right when we look at ours look at the difference there's breathing room here there's no breathing room there's no breathing room here in ours in the final version there is some breathing room right here okay so it's gonna be some simple styling that we'll do so let's just take this div and let's add it in a class name and we'll say style.wrapper and then let's go ahead and create styles here so con style will create a wrapper style and the wrapper style will just say hey put a space in the y margins and the y axis and then we're just going to make the cursor pointer when you hover over any of these things and we'll wrap and we don't actually even need to use this honestly we don't even need to use this because posts should already have those things all right so now when i hover over it looks like that and there's spacing in between each so it looks a lot more breathable and then for post let's give it the id as well so i'll just do comma id and we'll just do key is id okay so with that said our feed component let's just full screen and let's like really soak it in and look at that that looks nice let's make it a little bit bigger yeah that's looking stunning so our post component and our feed component are now complete front end wise and now we'll get to the really exciting part and add a database and start adding the back end and a lot of functionality to the app so i'm excited let's do it together now we're going to go ahead and set up supabase and pull the post from there and you'll see how easy it is to actually do that so let's open up a new tab and let's go to supabase.com and hit enter okay now i am here very simple so you can just sign in or start your project so if you've never stored your project or you never created anything just click start i there's not really much to talk about it it's a firebase alternative but you have postgres and everything so pretty easy let's hit start your project i've already created an account so just brings me right here you can you know you obviously will have to create an account from scratch all right so let's go ahead and i'm going to make a new project here and you could choose whatever pricing plan you want i just want it to be free so the project name i'm gonna choose here is going to be let's just say reddit with next all right next chess now just put in a password you won't really need to use it later but this will be for your postgres database so we can generate a password okay or we can just write one whatever we want to do in this case i'm just going to generate i don't really care what it is you could copy it and save it if you need to but i know i'm not gonna really use it in this one later so it's fine just hit create new project and we're done with all of this okay all right now in the next step what we need access to are a couple of config things we're gonna need access to one our project api key and to our url right here project url right here okay these are very important i'm just gonna go ahead and copy because i have a clipboard so i can store multiple things but you can just hit copy here now that i've copied them here's what we're going to do we're going to go ahead and create a new folder at the global level so just click the get ignore it literally anything else click folders and this will be called services and inside of my services folder we're gonna go ahead and do supa base client.js okay and then we're gonna go ahead and say import create client from supabase supabase dash js okay now we're importing something that we've never really seen before so usually what does that mean what that basically means usually when i see something like that is i have to actually install that library so let's go ahead to supabase and look at their installing instructions how to install superbase it's very simple we have a yarn command here that we're we're just going to use okay i can copy it like that yarn add super bass dash js so let's go ahead and open this guy go to our shell and we're just going to go ahead and paste this command and now it's going to install superbase so we're all good there and let's set up the config here so i'm going to say supabase url is going to be process.n next public superbase url and if you're wondering hey where the hell are these variables coming from don't worry we're going to set up our own end file and then we'll store our keys there okay and then we'll do con super bass anonymous key next public super bass and on key face and these aren't like really private keys right because that's why we're saying publix we're making it very obvious that these are actually like public keys just know that these are going to be publicly exposed to whoever's on the client side create client and we're going to go ahead and say pass create crown line the superbase url and we'll pass it to superbase anonymous key great uh not irl not in real life but a url okay just make sure you spell everything correctly so we have we're done setting up the config file but well all we have to do now is just in our end just make sure we have these variables so at the global level we'll create our end file okay so right here just simply click get ignore or any of these other ones hit add a file and we're going to call it dot n dot local okay this file usually in git ignore is ignored so let's look for a dot and yep so dot m.local is ignored great and inside of our end file we're gonna go ahead and say next public super base url okay and then just paste that url so i'm gonna paste this and then we're gonna do next public super base anonymous key and then just paste your anonymous key okay so we're done pasting those and what this basically means is now our services supabase client actually has access to those keys okay now that we've set up this relationship let's go and add some dummy data to our database so let's go ahead and click this table editor and you can see i'm in that project they should really improve their url names like what is that so weird all right let's go to here and um we'll create a new table so just click that i'll zoom in a lot so you can see everything and uh this new table we're gonna create we'll just call it feed okay and the feed will have so in feed we'll have created at and this will just timestamp to now so whenever you add a new post to it it will by default value will just be that same second that you made the post so that makes sense so we'll leave that essentially as is we'll add a new column and this will be the author okay and the author will be of type text so i'm just gonna type in text until i find it great default value will be null then we'll have title title will also be a text then we'll have content which will also be a text boom and then we'll have upvote which will be an int 8 okay so that just means it's going to be a integer and then we'll have a down vote and that's also going to be an integer beautiful so when it comes to feed that's really all we're gonna have so let's hit save okay adding seven columns to the feed and we should be up and running now let's go ahead and add a post in here simply okay so i'm gonna hit insert row and for the post let's say the author is rafae kazi for title i'm going to say it's going to be like how to build reddit with next.js and superbase rocket emoji and then content will be this tutorial will show you step by step on how to become a developer and build an app okay it will have eight upvotes and three down votes and let's hit save so this is one post now it's created and what's nice about this is we'll be able to uh create a new uh we'll be able to retrieve this post you know from this table that we've created so that's what we're going to be working on and that will finish our setting up of the supa base now the next thing i want to do is i want to go into authentication and also just set up the authentication because we're going to need it for later but we can just go ahead and set up the auth some of this auth now so just go ahead to authentication all the way down to google and we're going to click it and just do google enabled now the last thing but one of the most important things we need is we need a we need to go here we need to add a redirect url so let's go to the top of the app and where it says user sessions site urls we need to go ahead and add our replit url right here for our app so we're gonna go and grab this okay whatever your url is called mine is called this you could change yours you could go here and like change the name of this because you've already forked this so you could call this let's say you know whatever you want you could change the name of this and then just make sure you put that same one okay so let's say reddit clone reddit build uh for youtube okay so i'll hit enter and once i do that my url of the replit changes okay and then this url will also change so we'll yeah it's saying uh working so simply go ahead and okay now it's changed here as well and in my console maybe it's working maybe it's not let's hit run again let's see if it works it should be able to change it and run everything correctly so the replay is waking up you got to just sometimes give it some time and then once it's loaded you'll be good to go and there we go so sometimes it can take some time just be patient wait because it is deploying it to a whole new it's like doing a whole new build a whole new url it has to deploy it online so just give it a second and then it'll be up and running so right now it is up and running and we're good so this is the url that i'm going to take and i'll head over to supabase here i don't need that tab okay open it up and instead of this site url right here for user sessions we'll just paste this redirect url okay let's hit save okay great in terms of the setup we are essentially done with the super bass setup now all we have to do is actually retrieve a post from super bass and then actually show it inside of our feed so let's make sure that we finish doing that okay because that to me that's really finishing the setup because then you know everything is plugged in connected working how it's supposed to be working okay so let's go ahead into our pages okay let's go alright so now what we want to do is in our pages we need to actually create our own back end real quick so instead of api i'm just gonna go ahead and create a new one we'll call it get posts dot js and we don't need this hello ts so we can just go ahead and remove this okay so inside of get posts uh this is gonna be our back end or we're gonna retrieve basically do our cure queries to the database uh and retrieve the data from here okay and then from the front end we'll call this endpoint and get the data that we need all right so we're going to go ahead and say import we need access to supa base and we'll say from services supabase client okay and then we're going to go ahead and say export default it's going to be an async function okay we're going to take in a request and a response even though we're really not going to do anything with the request in this one and then we want to do is we want to destructure the response that we get from superbase i will await superbase okay and and this is a really nice part because this is like sql right from feed so we're gonna get the data from that table feed that we created so if i go in here and we're going to tables right this is the table feed from feed and we'll say dot select and we can select something specific like a specific column but in this case we'll say give us all of the columns and then we'll order it by id which in this case will be kind of ordered and we can just do ascending false this will also show us the most recent post first and then the last thing we want to do here is let's just go ahead and say status is 200 and then we will sorry whoops status of 200 and then we're gonna call the json method on that okay and we'll just return the data so we'll grab that data and we'll return that data okay so in other words just think about it like this when this query happens it goes to the table gets that entire feed table and then just sends it back and then we have access to it inside of our javascript code okay all right now from the front end we need to go ahead and retrieve this as well so let's go to our index which is going to be our index.ttsx so let's go to pages let's go to our index okay and here we'll get access to our posts now we're going to use something called the swr hook i love this and just to show you a little bit about it swr hooks are phenomenal you should be using them all the time so wherever you use you know use effect and then you do an api request just replace that with swr and uh lee robb from versailles also told me about this and there you know recell created next and so he's telling me he use this all the time so what i love about this is this works with ssr okay server side rendering it works with typescript and it's real time so it fetches the data in real time and it can actually keep refreshing that specific component for you over and over again so if we're pulling data from a database remember that's not gonna if it's not firebase or if it's not a realtime database it's not gonna render in real time but using swr we can actually keep refreshing that specific component and so that way if it gets new data or gets changed it will refresh and just update with the new change without needing to refresh the entire page so that's beautiful it basically will mimic a realtime functionality and also what i like about it is that you don't need to when you start using swr you don't need to write all those like use effects and then keep track of state variables and create your fetch requests and do all of that stuff it can kind of just do that all in one go okay so that's why we're going to be using this and we're going to go ahead and install this first obviously so let's click get started and it just says yarn add swr and that's how we install it so let's go ahead and install this now so i'm gonna go in here and let's open up this and i'm gonna end my kill my server here and we're just gonna do yarn add swr and once that installs i'm gonna yarn dev again and then i'm going to start running my server so my app starts running but in the meantime while that's installing let's go ahead and say import use swr because that's the hook that we're getting from swr and then inside of our home component what i want to do is set a state variable called my posts set my posts okay and um for these posts we need to import use date if we didn't yet so let's go ahead and do that import use state from react let's see if the install happened already no it's still installing so let's let that just keep running all right and then the next thing that i want to do is my s i want to write my swr hook so i'm going to say const let's destructure the data and the error from it and we'll use our swr hook we'll hit our endpoint get posts so we are going to hit essentially this endpoint right here and what's nice about next is that this right here guys is our back end and it's a serverless function so it's a serverless backend which is absolutely beautiful and we didn't even need to necessarily create a full back end and a full front end it just all comes together once you do serverless so i really enjoy the experience you get from with serverless functions so this will hit our back end point and then we need to give it a fetcher and then we need to just track you know whether it's loading or not because if it is loading then we need to show a loader otherwise we don't need to show a loader oh actually no i'm sorry ignore completely what i just said ignore that okay so swr is gonna need this and the fetcher needs to tell it how you want it to fetch stuff so the fetcher is gonna be simple we'll just write our own fetcher here and it's this fetcher right here and it's just a wrapper on the native fetch so you can literally copy this and we can paste this fetcher okay that's it that's our fetcher we don't really need to even understand what the heck it's doing but what it's doing is it's we're gonna hit this end point and then we're just gonna retrieve its result as a json okay and then that result is just gonna be named data and then we can console.log data obviously after we retrieve it all right so now let's go ahead and run our app and see what happens so i'm going to do yarn dev okay let's make it a little bit bigger here let's open up our app okay and i just console logged that data and uh let's see what happens so let's go ahead and inspect element and we will go and go to console okay and wow this is too huge so i'll make this a little bit smaller okay so we're now right now not console logging anything so let's try putting a emoji here so maybe i can see that emoji let's refresh our home page and see if we see any emojis or anything like that yes we actually do and look at that we got back our data look at that wow and we're getting back our post this tutorial will be we'll show you step by step blah blah it actually shows you the author content created at down vote shows you everything right and we're getting that data back and because we're using swr it actually does caching for us and it does validation for us and it really will also revalidate everything so that is a beautiful experience because if i run this boom everything just happens so fast and instantly and then the more i run this the faster it is because just retrieving that same cached post okay now i'm going to tell it how when to refresh so i can actually give it a object here and say hey the refresh interval interval for this is going to be like 200 milliseconds so every 200 milliseconds just go ahead and refresh for me okay and what we want to do is we want to have a use effect hook okay let's write use effect and i'll just make the dependency a dummy dependent data will be our dependency so that's an important thing that we need to remember okay and let's open and close that cool and make sure to import use effect as well okay import it great and inside of this use effect what we'll say is hey if we don't have data then just return because other like it's a guard clauses don't do anything if there's no data otherwise i want you to set my posts data.data okay so set my post to whatever they were and that'll be set up and now my posts we have access to them i can pass my posts to feed for example we can go here and say posts is equal to my posts okay and now we can go inside of feed so i'm gonna command click it or just go manually and you can go components you can go feed and you can go index okay and now i'll destructure posts from here okay and we don't need these posts anymore the dummy data that we had we don't need that anymore so now pulse will know already what to do we're already retrieving the data from our back end we're passing it to our front end now and let's see if our post already knows what to do with it yes it does that was such a smooth transition baby look at that we got five votes and how is that happening remember how we did up votes minus down votes so it's already doing the subtraction for us too because we had eight upvotes and three down votes so that's already happening and we're getting back five now let's go ahead and change up votes to let's say 20 upvotes okay so i just changed it in the database directly and let's go ahead and refresh our page okay so let's actually first of all go into our index again so i'll get out of post here let's go to our pages and let's go to our index.tsx okay perfect and now let's go ahead and refresh and see if it can retrieve that data oh so we probably actually did not make our uploads and down votes dynamic right now i think we had it hard coded to be something dummy i remember that you probably remember that too so let's actually go ahead and fix that i believe where was that in votes i believe let's go feed vote up votes minus downvotes and we're getting dummy data right here right so we want to destructure upvotes and we want to destructure down votes and remove these two guys and then where are we calling vote i think we're calling it in post and we're calling vote right here so we need to actually give it up votes and then we need to give it down votes down votes and then we need to destructure that how do votes get to here post post post should have access to upvotes and down votes actually yeah okay it's saying nan interesting feed index we're getting posts we're passing the post straight up we're then going into our post right here let's just console log this here and see what the heck is happening so console log up i will do it as an object and i'll just say up votes and let's refresh let's see what it says so it says upvotes is undefined interesting okay so we know that whatever we're getting for upvotes is actually not defined ah the error is actually a user error so it's actually my mistake okay so the error is this we need to go to our superbase and we called it upvote here singular but it's actually up votes so we need to go ahead and hit edit on this and change that name to upvotes and this to down votes okay and hit save all right now let's go back and look at that it already updated and we didn't even refresh how freaking cool is that okay let's try making down votes zero now so it should just straight up say 20 so i made them zero and look at that it's 20 again you saw that right i did not do a refresh and this isn't even like some real time uh subscription or any any of that this is just because i'm using swr right so actually let me let me make it so it's side by side so you can see it because this is pretty cool it's exciting so let's go ahead put this bad boy side by side and we will change the down vote so let's say 20 so it should go down to zero oh look at that that was slick and now let's go ahead and do down vote zero let's do up votes 2000 slick that is so slick and how quickly it happens and everything that is absolutely beautiful wow that is awesome honestly this was actually one of my first times personally using swr because like we never used that hook but like lee did tell me to use it and i didn't really think much of it i'm like oh just a more convenient way to write your own hook and write your own fetch but no it's just a million times better and now i understand why everybody and their mother uses swr and it's one of the most downloaded packages so that's just an awesome experience and i'm just really happy that we got to see that together so there you go now we're actually retrieving the data and we're able to show it so with that said we're fully done setting up supabase we've verified that we've set it up we're able to pull posts we're able to get posts and we're able to show them and now we're gonna actually go ahead and start implementing that all of that data and adding it to our front end all right so just to make post look a little bit fuller kind of like uh you know making you get a food plate and you want to make it look nicer right let's do that here so i want to add a few more posts because i have one post right here that's great but let's just add a few more posts how are we going to do that let's just add it straight to our database or our super base let's just go here and um i will copy some of this text and then we'll hit insert another row okay and we will say david riccosi title is build medium with typescript uh content is gonna be that's up votes gonna be 653 down votes are gonna be 225. let's hit save and look at that man that is cool wow that is awesome that just happened without refreshing and this is not a realtime database which is why it's so cool like swr is king swr is detected data changed and then it just refreshed everything on the fly and that's component specific that's using it and showing it right here so now we got two posts right here so if you add more posts it'll show more posts so we're good on that okay now next up what we're gonna actually work on is going to be the ability to create a new post meaning that if i go to this version of my app i can actually go ahead and hit create a post and i can write a new post i wonder how you are doing today i am doing wonderful by kevin o'leary okay cool mr wonderful right there so we added that and that's how we add new posts so there you go okay i should be able to go to this page so this is the page we're gonna create we're not gonna create the functionality right now okay so right now when you hit post really nothing is going to happen but we should be able to go to this new page now what here are a few things i notice right away so a few things i notice is my url route has changed and it says slash new so when that happens i'm already thinking that i'm actually going to be creating a new page inside of pages in react in my next app and that new page that i'm going to create is going to be called new and then in that that will allow me to actually come to this page right over here so what that looks like is in my pages i'm simply going to hit add file and i'm just going to do new.js so this is going to allow me to create essentially a new post okay that's what it is and we're going to say const new return let's just go div here slash div and i'll just put h1 that says new post export default new so we're just gonna have this be our page and it's gonna be pretty simple so that's all we're gonna render we should be able to go here by clicking the create a post button so i'm going to go into my components and inside of our components we have this create post button inside of our feed so we have next link here which is useful and when i go to create post you'll notice that we already have that added for you where it routes to slash new so when you route to slash new what next is gonna do is it's going to bring you to this page okay so basically this component right here let's go here this component right over here already has that functionality where when i click it it'll add slash new to my route so let's go ahead and click okay and let's see what's happening nothing is happening yet let's refresh and try again oh sorry i was clicking the wrong wrong wrong wrong wrong one that's not that's not what i meant to click this right here when we click this it will route us to slash new so let's click it and boom there we go we're on the new post page right boom right there the routing is already done which is really nice and react you don't have to worry too much about routers and routing and on this page we'll have a couple of things on our post page so one thing i definitely want to have here if i go look at this and click create post my header actually remains there my header never goes away and my about is actually there as well so those are a few components i'm definitely going to need to import so i'm going to say import header from we'll do components slash and i'll say header and i'll also do import about from component slash community ship out okay and so we're gonna show header okay let's go header like this and then we'll also have about like that so we'll definitely have these so let's see if it shows up in our app so it says it can't resolve header and it's having trouble resolving about uh so about is actually with the capital a so let's do it like that okay now i believe we should be good there we go let's make this full screen right here and we can see our about component is showing up and we can see our header is showing up too so both of our components are showing up now let's add a wrapper around it and style it so i'm going to just go ahead and say class name also flex min height of the green and then we'll put it in flex column give it a background of black and then give it a text of d7 dc okay great so my styling for the header part is done or sorry for the entire like as a wrapper is done and now we're gonna go ahead and style our wrapper as well or about as well sorry so let's go ahead and wrap it here and i'm gonna go ahead and say class name we'll say hidden okay so now it's only going to show up when it's onethird of the screen and otherwise it's gonna stay hidden all right so up until twothirds of the screen essentially it's not gonna show up so that's that's kind of what we want because if we're in this mode we don't want about showing up and taking up the whole screen okay so that right there just adds that little mobile responsiveness touch which is really nice okay and then we need to actually work on a new component it's going to be called post form and this will allow us to add a post or create a post so let's go ahead and add that component in now so we're i'm just going to go ahead and do my import statement already i'm going to say import post form from opponents slash new slash post form okay that already tells me what type of route i need to create here so let's make this a little bit bigger okay so i need to go inside of my components create a new folder it'll be called new and inside of that folder i will create a new file it'll be called post form all right and for now what i'll do is i'll just say const post form turn and we'll just make it div this div will have an h1 in there that says post form and we'll go here and we'll just say export default post form okay and then let's go back to our pages and new.js and then here we'll have that post form show up now the question is where do we have that post form show up let's just pop that here for now and let's just see what happens i'm gonna put post form right there for now let's go to our app and let's refresh and see if post form is actually showing up anywhere so post form currently is not really showing up anywhere let's see i'll go to post form okay interesting there we go so it was hiding behind the header okay now it's showing up you can see post form is showing up right i just have to paste it a couple of times and so yeah so basically this component is showing up it's connected and now we can actually start working on our post form component and so for our post form component let's just do obviously this will be a form in here so but we'll start this here with saying create a post create a post okay and then since it's a form we're probably going to have like two input fields this is going to be input field this is probably going to be a text area because this is a big text and i can also change its sizing i imagine there's going to be some a wrapper that's going to have a border radius and a gray color so i can already kind of imagine a bunch of things let's make our input fields so i'm going to say input and then make it selfclosing and then for this input i'm going to say class name is going to be style dot input we'll create the styling for it soon enough and then type is going to be text placeholder okay so let's go back and let's create style objects we're gonna say style and we will just leave it empty for now okay uh just gonna paste this a couple of times so we can see this so now you can see input is showing up now let's make our text area okay and that'll also be selfclosing so i'll say text area and for class name we'll also do style as input and the name of this will be content the id of this will be content for column we'll make it 30 columns and for rows it's calls plural and for rows we'll make it 10 and then we'll add a placeholder that says text required like that there we go so we got an input and we got a text area so so far so good now obviously this looks horrendous so what we need to do is we need to actually add a wrapper around everything so we'll say class name style.wrapper all right so let's create the styling for that so i'm going to say wrapper and we'll say flex flex column space y6 okay so now we have some spacing in between on the yaxis some spacing in between these two we made a flex column so that looks better okay so that yeah it looks significantly better now let's go ahead and get rid of all of these h1s and let's see if this still shows up postal shows up yeah kind of still shows up here let's go back inside of new.js and make it so we can actually see post form because right now it just keeps getting hidden and that's kind of annoying so let's go div wrap it around this and i'm going to say class name and we're going to make the width full okay then we're just going to do that okay so this will take on a large screen it'll take two thirds of the screen okay otherwise it's gonna be like width full that's what we're saying here okay so see two thirds if i get rid of this then it'll just keep taking the full screen and that's not what we want okay we want it to be like twothirds right here okay and then we want to wrap this inside of a main so we want to wrap everything inside of a main so i'm gonna make main let's finish wrapping it up until here and i will grab this and indent that in there and so for main i'm going to say class name we'll go mx auto okay margin top 16 so now we're going to give it margin top that allows you to actually see the damn thing right otherwise it's so hard to freaking see where it is okay and mx auto just gives it margin horizontal margin in the center so then it can actually center it okay and then we'll go flex on this we'll go with full and then we'll say max width is going to be 5 xl i'll flex 1 to it i'll give it a space and of 6 in between each on the xaxis we'll give a padding of 5 and then a padding of six horizontal okay that's main so there you go look at that that is absolutely gorgeous now everything is showing up in its right place where it's supposed to show up okay now what we have to do is inside of our post form we have to style our input so let's create the styling for that so i'm going to say input and for the styling of input we're going to say give me a background color first of all so let's start with that 1a b okay so already looks way way way better but i don't like when i click it it shows those things so we'll fix we'll fix all of that okay we'll give it a border as well and we'll give it a border of a specific color so i'm going to set 3 4 3 5 3 6 here so now the borders will just look a little bit tad bit cleaner we'll give it a padding on the xaxis of 4. there we go so now it doesn't really look like i'm writing super close to the edge we'll give a padding on the yaxis of two so it doesn't look like we're writing super close to the top so it looks way nicer now and then we'll add some text we'll text left it we'll tack make the text small we'll make the text white and we'll just say hey outline should be none when we focus on it okay there you go so now focus on this no outline and when i write it's white okay so input is looking really good now now what we have left besides the input is uh are really just a couple of things i mean we have most of the styling here done we just need to make sure that we also style the title so when we're writing in there that looks like an actual title and not like a measly little text so for our title input where we're gonna actually add the style is right here where we're actually doing the title oh we got rid of the title so let's go here and actually create our own title whoops my bad class name okay we'll do style.title and then we'll write create a post just like that okay now let's take a look boom create a post is here so we'll style that bad boy alright so for the styling of this i'm gonna say title and we'll do border we'll give it a border at the bottom we'll give it a border of a specific color and then i'll give a padding on the bot a padding bottom of three will make the text very very large okay and then i want to make the font medium there we go so now create a post looks very clean okay so we're good on that and then all we want now is we want to add a post button as well so right underneath all of this we'll go ahead and create a button that button will say post and we'll say class name for this is going to be style post button okay so the button is right there i can click it won't be doing anything won't be doing much right now and then we need to style that button so let's go here and i'll say post button okay and then for the styling of this button we want to give it a background color so background gray 200 okay so now we we see that there's something there behind it we'll give it a padding of four padding at the top of 1.5 we'll make the text of this extra small we'll make the font semi bold we'll give a specific text color one a one b and we'll make it rounded full there we go so now boom look at that it's nice right it just says post and we can create our post okay and now what we need is we need a post button container actually and so let's go right here let's wrap this up in a div say div close the div right here this is going to be class name is going to be style.post button container post button container like that and let's go ahead and style this bad boy we're going to give it a flex justify it everything to the end and then give it a padding top of two so now it looks much nicer but if we look at the final version see in the final version we actually have a padding around the whole a background around the whole thing a wrapper which we don't hear so let's go ahead and add that styling to this now so basically we need to go and wrap our entire input okay so essentially it's our form like think of this input here and that text there and that button as a form and so we're gonna wrap that entire thing in there that's interesting all right so let's go here and i'm gonna say div take it all the way down to the button and post it okay and then the styling that we're going to give it is we're just going to say class name of this is going to be flex i'm going to make a flex column space we're going to go y2 on this rounded and then we're gonna give it a background color this background color right here and then we're gonna give it a padding of four okay so now you can see the whole thing is nice and together and the post button shows up right there right so now that they're looking a lot more similar now the front end for our create a new post is completed because i can write here and i can hit post but the part that's not completed is the ability to actually write to the database meaning when i actually make a post here it should get stored right over here so that's the functionality we're gonna work on and finish right now all right now inside of our post form we're going to create a new function that's going to allow us to write to the database and store stuff so we're going to say const create post that's going to be async and we're going to take in an event as an argument and we're just going to prevent default on that okay so that's just so saying that's we're just basically saying hey don't refresh the page okay that's it all right now what we're gonna do is we are gonna this is gonna be really simple honestly we're going to go ahead and await super bass okay and um we're going to go into the from feed and and into the feed okay and into the feed table we're just going to insert an object okay and that's gonna be author let's do it like this author we're only just gonna insert one object okay we could probably insert multiple but she's gonna do one author is gonna be let's say lever programmer comma title is going to be writing to this from my front end meaning i'm not you know literally writing from the database i'm writing this from the front end okay and then the content will be did this work i believe it worked okay put a comma here and a comma here great and that's essentially it's that's that easy to actually write to the database but lastly what we're going to do is we're going to wrap it in a track catch block so here's what we're going to do okay so we'll we'll wrap this whole bad boy in a try catch block put that here okay boom like that okay so we're going to try this and then if it doesn't work we're going to catch the error and then we'll simply just console.log console error the error so it just pops up like an error okay and then we're gonna say finally okay we're gonna router.push you to the home page so once the post actually succeeds we'll just take you back to the new homepage because you don't need to be on the new page anymore okay so for that we're gonna need some routing so let's just bring in import use router from next slash router all right and then what we wanna do is get access to that router so we're going to say router use router okay so there we go so now to that router we're just going to push okay and then we're also going to just keep track of a loading state and that's going to be helpful later when we actually add a loader for now it's just going to help us have a state variable okay so boom i'm just going to say loading and we're going to say set loading okay i'm going to say use state is false you can you can even call it is loading everywhere s is loading set is loading okay so we can actually just go ahead and set is loading to be false here because well it's done being loaded and it's done and then here we can set is loading to be true because the loading has just begun here and then once you're done finally boom done okay so that is great okay even if we have an error right we want to do a finally and then just go back and say loading is done so this should help us write to the database now there's just a few things we have to take care of here in our post form we do need to actually track what the user is typing and where they're typing it so let's first of all import use date and things like that since we need access to them so let's go use state from react so the user is going to be typing data here we need to keep track of this state this state and the state of the button being pressed okay or just a button being pressed having an on click method okay so let's go ahead and go title set title and initial stay is going to be empty and the next state we need to keep track of is the content so it's a content set content and i'm going to make use state is going to be empty for this okay so i have loading title content and router those are these three are the main states that i need to keep track of now we need to keep track of it here as well so for this input i'm going to say the value of this is title and then on change i need to grab the event and i need to say set title to whatever is being written in there okay just like that we're gonna do on change and then we're gonna do a similar thing for text area okay so just copy paste that except for value we're gonna say content right and then for the rest of this we're gonna say set content to be whatever the user is typing in at that time okay so that means we're good and we're tracking that and then we just need to add a on click method onto the button so let's go ahead and do that now so we're going to say on click and we're going to give it this method create function that we created create post so on click run this okay so let's see if we're actually able to write to our database we have to probably import supabase as well because we don't have access to it here so i'm going to say import supabase from and we're gonna say services slash supabase clients okay great and now let's go ahead and write something and let's see if it pops up here so i'm gonna say test one and let's hit post let's see if anything happens something happened okay let's refresh and see did a new post get added that would be really cool if it did maybe it didn't oh it worked that was so nice and easy look at that and it says clever programmer writing the writing to this from my front end okay that was incredibly easy to do right writing this from a front end boom boom oh our post actually needs to read the content so it's not reading the content so let's make sure let's just see what's happening with our post component because that's not correct so i'm going to go into our post component feed slash index.js yeah now let's go inside of our post component so let's go to common let's go to post and inside of here ah yeah so this is going to be content content okay because i had it hard coded to something else okay let's destructure content as well because we're past that down and that should work there we go nice look at that did this work can't believe it worked right into this from my front end this tutorial will show you step by step on how to become a developer perfect okay this is really really solid so let's try adding a new post let's go here new post wow this is incredible like this let's hit post and let's see if it happened let's refresh oh it did not happen maybe we hardcoded some stuff so let's see what seems like we did something a little bit funny ah yes we've hardcoded data so for example author title and content we've hardcoded it so we need to not hardcode it okay so author will leave hardcoded because we'll be able to once we add authentication we will to keep track of the logged in user but title we can actually certainly change so title is going to be this because it's going to be the title so i can actually just go ahead and replace that with title and then put a comma so just so you know something saying title is the same thing as saying title comma title title colon title so you just say title here and then for content you can just do the same trick all right so there you go and now let's make a new post let's go ahead test two let's write it boom there you go look at how fast this is right fast fast boom post boom and it all feels like it's happening real time even though we're not doing real time this is so exciting so there you go now everything is working everything is working dynamically the only thing that's not necessarily dynamic is the author and we'll get to that by adding authentication next right before we do that let's just actually add a loader so we can see a nice little loading screen as our post is getting added so let's create loading and where we're going to create it is we can actually just create it inside of components so let's go to components and hit a new file and we will just say loading.js so it's going to be a component and inside of loading.js we'll try to go through this one kind of fast so we'll import loading animation okay from and we have this it's inside of assets so if you fork this then you should have access to loading animation as well okay so we're going to say loading animation from oops we'll go into assets and we'll say loading animation just like that and then we'll say const cons let's go loading first all right and i'll say return we'll create a div and it's going to be our wrapper so i'll say class name name is going to be style.wrapper and then we'll plug in our loading animation and we'll say style is and then we're given an h2 i will say class name is style.loading text we'll say loading dot dot dot okay and then we'll just wrap up the styling for this so for the wrapper we need it to be fixed inside of zero z index of 50 because we wanted to take over the whole screen because what we wanted to look like is if i was to make a new post here it takes over the whole screen right and it has a background gray overlay and then you saw that it has the loading screen pop up and it and it dominates the rest of the screen right so that's why z 50 here is important and then we're gonna say take the entire height of the screen the entire width of the screen flex column item center it will justify center we'll give a gap of six uh overflow hidden and then background black but not completely black so we'll give a slash 80 right here perfect so that's our wrapper loading icon will be margin right of 2 height of 20 width of 20. we'll animate a spin in there add fill white and then let's do text gray 600 for this and then we'll do loading text and for this i'm going to say text center we'll make the text large let's make the font semi bold and then we'll make the text also white okay so that's our loading that's really it let's go back to our post form let's make sure we're exporting this let's export default loading okay now let's go to post form so i'll go to new post form let's import that so let's go ahead and say import loading from and i believe it's loading close by to us right it's just one folder behind let's just double check i'm in new yeah i get that one folder and then i have access to loading okay great so we have access to loading here and now we want to show the loader pretty much all over the screen so let's go here and the loader is gonna be right over here and we're gonna basically say if the state is loading in that case show loading okay so show the loader or loading okay and you can do is loading so if this loading is true then show loading otherwise don't show loading okay so we'll just do is loading is false show loading so that way when i click into create a post it should be showing loading the whole time there we go so it's working right and now i'll change the state true okay and now stop let's make a new post and see the loading came up so beautiful the loader is locked and loaded and it's no pun intended and it's working perfectly as expected now let's go on to the next step and add authentication so now we're going to go ahead and create this login page right over here so if i log out of this and i go here this is a page that will bring me to so this is the page that we're trying to make now okay that right there so let's get to work all right so first things first this is going to be a component rather than a page and we'll just add it to our components without putting it in any subfolders let's just add it here right next to loading so click components click a new file and then we're going to go ahead and say login.js okay now since the component we know the drill okay return let's do div let's say that div returns and h1 log in and we'll say const export or sorry export default log in all right so when we think about our home page let's take a look at this if i if i look at this i need just this image right here and probably this image right here so it's probably only two images that i really need okay and you can copy the link from mine or you could just find them on your own and paste them here so there's two images other things i noticed is everything is center aligned right everything is in the center vertically horizontally so i know i'll need to center everything this is a button i can also see that it has rounded corners so i know there's something border radius action happening i also know there's a border happening and i know it's a white color border it's a border white this most likely is a button okay so there's a couple of things that i'm noticing already off the bat which is going to make my job of doing the front end work a little bit easier now we need to just make sure that we can actually render this component so let's go back to our index so we're gonna go to index.tsx and let's just make sure that we're rendering this and how we're gonna rendering how we're gonna render this is inside of this wrapper okay we're gonna say we're gonna check if the current user is logged in and if they are then we're gonna show them all of this and if they aren't then we're gonna show them something else we're gonna show them the login page it's like hey are you gonna see the login page or are you gonna see the home page which page are you gonna see so let's add that right here okay so is user logged in if so in this case this is a ternary operator so let's put a question mark here because user logged in question mark if they're logged in then what we want to do is show them let's just say the home page otherwise we want to show them let's just say the login page okay so that's effectively what we're doing okay so i'm gonna put parentheses around here and we're gonna take all of this code right here and i'm just gonna go ahead and cut it and we're just gonna paste it right here because that's the definition of home essentially and then for this login boom okay we can just put that right there so we can see there's a very clear divide this or that okay let's see is there anything crashing yet not crashing yet so that's a good sign let's go hello okay let's refresh okay let's just double check that everything hasn't crashed so it looks like it has so let's just go yarndev and let's restart our server and then just wait a couple of seconds until this is ready to go let's just actually um have an empty fragment right here okay and uh empty fragments for now it's just that empty fragments instead of that hello okay so let's make sure that that probably works better and then we'll also need probably some kind of fragment action here so there is a div if there's a current you ah actually let's do it this way let's grab this wrapper and let's put that wrapper here and let's end that div here instead let's grab this div and let's end that um okay so everything is in the wrapper and push this here okay so there we go and then this entire thing will wrap this in an empty gsx fragment so there we go mtgs6 fragment wrap this entire thing up in a div so show this right or show this these are the two things that we're gonna show okay so now it should be working let's refresh and there we go okay so right now we're basically saying hey is the user logged in the true the value of this is true so since that's true it's going to show the home page but if we say the user is not logged in so i'll just put a boolean false here i'll just say not logged in then it'll show this okay so that's working now i need to just replace this guy here with just a login component so i'm going to go ahead and say login like that okay and then we'll import login so i'll say import login from import login from and we'll say components and we'll say login there we go so now our login component is connected and is showing up okay now if you want to make this nicer what you could do is you could just create a sub component i love to actually do this and you could create this here you can just say const home page okay and you say return and you could pop that in there so now you have this component called home page and so what you could do is you could just replace all of this with home page and now it's a component and so like look at that it already looks so much cleaner as code if i get rid of it it will bring you to the home page oh now it says my post is not defined so let's see my posts okay home page we will give it my posts is equal to my posts and um it will destructure my posts okay so now it has access to my posts perfect and we can so look at that already it's clean and we can just make it even cleaner by it's up here right and if you think about it if i don't have the wrap on and i just go full screen mode for a second you don't need these parentheses anymore either okay we can bring this on the same line you don't need these parentheses anymore okay look at that isn't this way easier to read than what we were reading earlier right so if the user is is user logged in if they are then show them the home page otherwise show them the login page so this is like way cleaner to read so that's why i like to do it like this it's a really nice way and you know in my opinion honestly it's like this is great okay so we're good on this side now we just have to make sure everything's actually showing up the way we expect it to so we're having some kind of error here oh let's refresh they're still there let's see save okay so i don't know how this happened but i removed the equal sign in my post so there you go my post is equal to my post so that was causing a syntax error and causing it to break so let's go ahead and refresh now and it should be fixed okay so we're just going to give it some time to compile and boom there we go we're back in business baby okay so now this is a nice little one liner and then we just wrap it in a gsx fragment obviously so this is good okay homepage and login now for our login the logic is we created a different component for login obviously so let's go back to that component it's in slash login okay and then in our login remember we wanted to have that image so let's go ahead and go let's first of all put the code in the state so we could see this the whole time so let's go ahead and say that the user is not logged in so let's just go hard coded now the login page should be showing up the entire time as we're editing it and working on it okay and now this is going to be an image okay and this image is going to have a class name and we'll give it a height so it's not like too massive and then for source i'm going to copy paste this but you can definitely you know either copy what i've written or just copy a different reddit image and pop it in so we'll have this okay and that's it as far as the image is concerned so we got that image and then we're going to need another image which is going to be our google image right so let's go ahead and grab that so we're going to source and i'll copy and paste this here and once again you can feel free to find a google image or just write this one so i have two images and now i have them both here great now i need to control the size of this so i need to do class name and we'll give it a height of 6 and a width of six that'll make it instantly smaller and now what i need to do is i wanna center align everything so let's go ahead and say class name style.wrapper and let's go at the top and we'll say style and wrapper and then for wrapper the styling that i want to do here mainly is flex give me a min height of this entire screen give me flex column give me items in the center and then also justify it in the center too and then give it some spacing on the y okay so there we go let's go const style keep saying style is not defined but it is now there we go okay so now it's in the center now the google one remember is going to be a button so let's wrap this in a button okay and this button is going to have a styling so we're going to say class name for this going to be style.login button let's go ahead and create that styling here so i'm going to say login button and for the login button we're going to create some simple styling so we're going to say go ahead and let's actually add the text in too so you could see everything happening all at once so inside of this button right underneath this image we're gonna have a span tag okay we'll give it a class name of style.loginbuttontext and it'll say sign in with google like this so now let's create a styling for the login button so we'll say group okay and then we're going to go ahead and say flex item center sp center we'll give it some horizontal space okay we'll give it a border gray of 300 and it borders you could see it a padding of four and it should hover white when i hover over it there we go boom great so now when i hover over it it hovers white okay so the login button is good now let's create styling for login button text and i'm going to make font bold and i'm going to say hover and we'll say text black there we go look at that that's super clean so right when we hover the text on that becomes black and the text on the other one becomes white and with using tailwind what's really nice is we don't even necessarily have to mess around with using a react here because before if you remember if you ever built the ubereats clone with me or something like that we would have to do react to keep track of the state of the color of each text and then flip it this is just way nicer of a of a way of doing it so just to show you what this group thing is kind of nice so if i actually get rid of this group over here and get this get rid of this group over here now when i hover over when i hover over the button container the whole thing is white right and only when i hover over the text it becomes black but when we group them together like this we have button text and button login button when we group them together like this now when i actually hover over both of them at the same time automatically alternate color so that's the with the group okay so all of our styling for this page is done if i look at this page this is exactly what i want it to be now all we have to do is make sure that our sign in with google actually works all right so let's go ahead and import superbase so we have access to that so we're going to import a couple of things we're going to import supabase from services slash supa base client we're also going to get loading but that is for now we'll get it we'll yeah we can just get it now that's fine because we're already we've already built it we're going to go ahead and import use date because we need to keep track of certain states all right all right so as we continue working on this authentication just make sure that you have done this part earlier when i showed it to you going authentication settings and uh just make sure that scroll down to google that you have google enabled okay this is going to be a really important part that you have to have right because if you don't have google enabled you will not be able to do the login with google okay so go to google hit enable and then hit save okay okay so now it should bring you to this page over here right and we don't have a client id and we don't have a client secret so we're going to set that up together first just click google enabled and now we're going to create a client id and a client secret the way to do that is we're going to go to console cloud google okay go ahead and click and then you can just change to your whatever email okay and uh then what you're going to go ahead and do is you can create a new project okay if you don't have one so let's just say you create a new project and you can call it supermass super pass base okay um reddits and then you can go inside of that project once it's done being made so i'm going to click here it's taking a second so it'll get made soon and then once it's done just go inside of it cool and now that we're inside of it let's go credentials and here we'll create credentials and we're gonna do we're gonna choose oauth client id so let's choose that the first thing it's gonna ask us to do is create a consent screen so we'll hit external we'll hit create and then here app name reddit supabase we'll pop in the email we will pop in my email right here developer email hit save and continue so that's it for the consent screen we're done and now let's go on the left hand side and choose credentials again okay so now we can actually create credentials because we are done creating our consent screen so hit create credentials try oauth client id again application type choose web application we'll say reddit superbase and authorized redirect uris here's what we're going to need to do go inside of your super base okay go inside of settings all right let's go to settings and then inside of settings go to api copy this url right here the project url go back and paste that but you're going to need to add something here so if you look at superbase's instructions for how to set this up what they want you to do is add this to that url it says auth v1 callback and that slash let's copy let's go back here and let's paste it so you should have that url plus it should say odd slash v1 slash callback okay let's go ahead and create this and now it's going to give you a client id and your client secret so copy this go back to superbase and paste the client id copy this client secret go back to super base and paste this let's paste it so our client secret is here our client id is here and now we have that redirect url it's fully made okay ready to go let's go ahead and hit save great so now we successfully have google authentication enabled and now we can finish up writing the rest of the code for this okay so let's go here i'm going to say const sign in with google we'll say async okay and then we're gonna say hit try this and so for try we're gonna grab the error and the user destructure the error in the user where we honestly don't even really need to worry about error right now let's just destructure the user from supabase dot auth dot sign in okay and then the provider is going to be google and then once this happens let's just console log user okay and let's connect this to that button so i'm just gonna add a on click property for this button we'll say on click and we'll just say run sign in with google when we do it let's just make sure we don't have any errors here so okay try maybe you have to have catch error and we can just say console.error error okay there we go now i'm gonna click sign in with google let's see if anything happens boom it actually does take me here let's go kazuya cleverprogrammer.com nice that was clean let's hit console and let's see if anything got back to us in the meantime okay so we're gonna we'll make it um let's add some confetti here maybe so we can see it okay so let's try it again let's hit sign in with google so right now we got null that's fine okay did the confetti happen now no confetti interesting so maybe let's see all right so now we're gonna just try to get access to this user over here okay it's a little bit tricky to get access to the user okay so like we actually don't even need this we could just do this await superbase and log in okay and delete that because that's not actually even gonna give you anything okay so that's really it when it comes to logging in and then if you want to find out whether you logged in or not what you want to do is we want to use a use effect hook here and for now let's just say that this use effect hook fires off every time the page refreshes and we'll just say cons will destructure the user and we'll say superbase superbase.auth.session and that's the user and if that's not the case or just make the user null okay so let's do that um yeah and then let's just console.log and we'll say user okay so let's go ahead and refresh this page and then we're gonna once it reloads we're gonna go ahead and click sign use effect is not defined obviously so let's go ahead and import that all right now it's gonna say use effect it's not gonna say use effect is defined but there we go so currently there is a user as you can see actually do i even need to i don't need to do that i could actually just pop in user here and we should be no no i like the way that i had it i like the way that i had it okay cool now sign in it's because i had already signed in i paused the video signed in but let's sign in okay for you it wouldn't say there's a user let's do kazu cleverprogrammer.com and now i go here and the user right now is null okay but watch what happens when i actually hit refresh so refresh on this page and watch what happens okay boom this piece of code fired off after the refresh it saw that there was an active session and now you do have an active user right over here okay i don't need this object anymore let's go ahead and hit refresh again and this is our user right this is the user this is all of their data and we have access to the email the set the session id this is this user is authenticated we have a confirmation for when the email was confirmed so this is a good and their last signin was detected on july 15th which is today a day after my birthday and so there you have it you have authentication essentially working but what we want to do is authentic this authentication is we don't want to like sign in and sign out here we want to do this kind of at a global level in context and then pass that context around everywhere okay so i'm going to go ahead and just cut this get rid of that and we're going to go and create our context file so let's go here i'm going to create a new folder it's going to be called context okay ah don't put it in don't put it there let's get it out okay so it should be at the global level you should have context inside of context we'll have a new file and we'll call it reddit context.js okay and then in this context file i'm going to paste that because i'll probably i'll need access to that piece of code at some point and we want to do okay export const reddit contacts okay and we're gonna say create context here we'll need to import let's do a lowercase here we're gonna import it we're gonna say import create context use state use effect because we're going to need access to all of those as well from react okay and now we're going to create a function called reddit providers i'm going to say export const reddit provider okay and it's going to have children so children is going to be we're going to wrap our entire app inside of here children and then we can pop that use effect in there actually so there we go and then a couple of other things we can do here as well so let's go const current user set current user let's say and we'll say use state null okay and then here once the user actually exists i'm going to say set current user to be the active user okay and we'll import superbase here as well so i'm gonna say supabase from and let's go services slash clients okay and here i want to do superbase.auth.and we're going to add a listener as well here odd stage change so meaning if you log in or you log out or it's a different user that logs in you wanna track that right away so this is gonna be a actual listener and listen for the event and the auth session and then when that changes we're going to set the current user to whoever is the current user of the auth session so there we have an active listener this will pretty much fire off in real time so this is a good use effect hook to wrap the entire app in so now the entire app will essentially be listening to who the user is okay and now we want to give access to the entire app for this user so i'm going to say return and then instead of this return we're going to say reddit context context.provider okay write a contextual provider and i'm going to go like this pass in children here and here i'm going to say value and we're going to send off the current user okay so this should send off the current user to our entire app all right now so if you're on this page we're going to wrap the entire app in the authentication and we want to do here in order to actually make that happen is we just gotta import reddit provider from contact slash reddit context so once this is imported now we begin the wrapping of the entire app so take this component pop this bad boy right here reddit provider okay and then wrap up that inside of this reddit provider right here now it's going to be like hey it needs a closing tag no problem or sorry let's actually put parentheses here because we need to wrap this up in parentheses okay great and then we can just add a little bit of seo so our tab and everything looks clean because right now it just says reddit dash bill dash blah blah that does not look that clean so let's go ahead and fix that what's this error saying didn't we build context am i misspelling anything reddit context.js did i forget to export i have exports here export cons reddit context okay let's go back to pages app tsx from context let's hit refresh let's actually hit yarn dev because my app might have crashed yep it did so let's hit yarn dev and then let's sit here and refresh we'll give it a second for it to wake up once it's awake we should be we should be good to go that that should be enough for this okay while this is loading okay do we still have an error actually reddit provider give it a component pages boom boom i thought it looks pretty good to me uh the error is happening inside of the context ah okay okay okay okay got it got it god i just wasn't reading the error it's being silly so in my context i'm gonna open a new tab here in context i'm doing something silly so i need to be doing reddit contact dot provider i believe so it's the same tag that opens it and then the same tag that closes it i think that's the problem and then our entire app we're giving it access to the current user or the logged in user or whatever okay ah set current is not defined okay so that is happening in context let's go back and it's set current user not set current so let's go set current user just like that okay let's refresh all right so now we're good okay so now it's doing the thing that it's supposed to be doing in context our app is wrapped in that let's say we'll say user and then we'll say hi so this will tell us that we're coming from the context file let's go ahead to console and we can see if i sign in let's sign in with google boom let's choose this and then our context file right now is null obviously but let's refresh and you'll see that it'll have a user on it boom we have a user okay and when i look at this user i have all that all of that users data right here and so you can see that now the user is actually being passed around and con our entire app has access to context now because the entire app is essentially wrapped in context so that's why the whole app has access to it okay so this is really nice we have this now we need to make conditional rendering happen so that when the user is actually logged in it immediately brings them to the home page rather than the log in page see what i'm saying so let's go to our index dot tsx so pages index.tsx i'll just open a new tab here and in here what i would like to do okay this is a typescript error message which is just it has an implicit type any you could do this and the error would go away but the app will still work this is just a warning okay so this will still work i can just leave that that's fine if they have any types you can give the menu or you can just leave them as this now here we're gonna get our user from our from our context that we've just created okay so let's go ahead and import our contacts so i'm gonna say import a reddit context and we're going to say context slash reddit context and now what i want to do is i want to actually get access to our current user okay and we'll get it from context reddit context just like that okay use context okay so let's get the use context hook as well from react so we'll say use context we can get that from react i believe yep got that hook perfect so now we're using the contacts we're getting the current user from the context and now we can just set the conditional rendering right here and i can actually just say i can remove all of this and i can say is current user if the current user is logged in you see how it brought me to this page right over here but say i was not logged in so i'll do no i'm not current user is not logged in it will bring me to this page right over here so this is now working perfectly right hey you're logged in cool send them to the home page hey you're not logged in send them to the login page now i mean this is smooth as butter okay so we have access a user overall we're passing them around we're very happy with this okay now this fetcher here we can actually put this in context as well and then get it from context i'll actually just get it from context already and then grab this let's go to our context create this and pass it because we'll need access to it actually in a few different places so i'll just go ahead and do fetcher just like that okay so current user fetcher and we're destructuring the fetcher here and then we're just using that fetcher okay so everything should be working as expected if i go in if i click or refresh or whatever everything should be fine okay all right great it's detecting i'm logged in so it's bringing me to the right page that's great as well just leave it like this now really the last thing i want to do here is save and update the user so what do i mean by that if i go to my database and we go into table you'll see we don't have a table called users and we have no users in here but there's a user that's logged in so we want to actually build a database of everybody that's logging in so what we want to do here is i want to create a function that does that for me so we'll call it save and update user okay and what this function will do is we'll update or insert a new user okay so it's going to be a very simple function and this is very cool part about superbase that i really love where you can actually add in a new user in a really cool way and i'll show you that method so first we're just going to add a guard clause and hey if there's no current user just return like just end the end it okay don't even do anything else just end the app and the function and don't run this function all right otherwise what we're gonna do is we're gonna go into superbase and we're gonna go into the users table okay and we're gonna up cert and this means update or insert so it's beautiful because if you have an existing user that just logged in it's not gonna bug you and crash but if that user doesn't exist in your database it's going to create that user and add that user to your database it's not going to create a whole new user it's going to simply go to that user and update that particular user's profile picture i love that about this right that makes it so much nicer and cleaner okay so upset is a function it'll take in an object of what you're trying to create so we're trying to create here is a current user we're gonna get their metadata and grab their meta data.email okay we'll grab their name okay and then oh sorry let's go ahead and do full underscore name and then we'll grab their profile image and let's go all the way to the end and we're going to say avatar url and look at typescript being super helpful right it's saying hey it cannot find name superbase so we already know we didn't import it we don't have to sit here and wait for a crash to happen so i'll say import supa base from what is it services supabase clients i believe okay slash services let's see here yep slash services slash superbase client perfect we got that okay so that's what this does save and update user and now we just want to actually call it we're gonna have a use effect hook here and another use effect hook and we're simply going to basically save and update user okay and then basically run whenever the current user changes okay so let's hit refresh and let's see if there's anything happening here and if there isn't then we can simply go ahead and create a new user or even log out and try to create a new user let's put a console log statement here that tells us whether this line is running or not console.log save user okay so let's refresh here and see what's happening refresh okay so the save user looks like it ran okay let's see if anything happened here if this ever happens where it goes loopdedoop d in in circles like that just end the server and just start it again but end it here and also stop it here and at both places and then just go ahead and do yarn dev again and you should be good okay now let's wait for it to load hope it loads perfectly save user fired let's see if anything happens i'll refresh here we'll refresh all tables as well still nothing so the problem we're actually facing here is since it's from right it's trying to pull an existing table so it's not actually going to create the table for us so we're going to need to actually create a table so we'll create a users table and it'll have email and name and profile image so i imagine this could be text this could be text and this could be text as well because it's a url all right so we'll hit create new table i'm going to call it users and then we're going to say created we could have a created now on this i guess that's fine that shouldn't hurt and then here we're gonna say name and this is going to be text and then we're gonna go ahead and add another column and then we will say profile image okay and this will also be text with a capital i by the way and then we will add we can actually yeah that's fine that's fine profile image is fine and then we'll say email okay and this will also be text okay great now go ahead and save let's try to run this now so i'm going to refresh here and let's see if it fires off and it registers a new user so let's refresh save user did fire off let's say let's refresh our whole page let's see if it works boom there we go we just got a new user and now watch this what we can also do is we can have it fix on a specific conflict okay let's give upsert another object here so let's give it a second argument and this argument is going to be based on how it's going to resolve the conflict and we'll say on conflict email okay so when it's time to resolve the conflict resolve it on email so there's two arguments that we've given it one is this okay second one is that got it so now it's gonna once it sees the email that's what's gonna use to resolve the conflict and let's give it a try so let's try changing the name to mahatma gandhi hit save hit refresh here let's go to super bass let's refresh and since it has caused a clever program or email it should only update the user okay so let's refresh here and let's see if it has updated the user or not so the reason why we have two of these here right now is because we didn't add on conflict right away so that's why we have it but if we go and right click and we delete this row right now and now if you refresh or you refresh your app as well so it fires off the save user function it's not going to duplicate just make sure your save user fired off and it did and you can see it didn't duplicate the user if i refresh you still won't see any kind of duplication hopefully there we go perfect okay now why mahatma gandhi isn't getting updated in here is because i have this function to only fire off when the current user changes and the current user isn't changing because the current user is still me and it's been me the entire freaking time so let's remove that for just a second and let's say there's no dependency and it should fire off every single time we refresh the page so let's go ahead and save this let's go ahead and refresh this let's go back to our superbase let's hit this nice little refresh here so we don't have to refresh the whole page let's refresh and refresh again let's go into email and what we need to do is we need to actually enable is unique because once you do that upsert actually starts working so let's go and enable because we want to make sure that the values are unique if they're not it wouldn't make sense let's go ahead and save it alright so let's go ahead and save this and let's restart and we should have a user with gandhi gmail.com inside of our supa base with this name and there you go the first user is rafikaze which is perfectly fine this is exactly expected because i logged in and then i changed it to mahatma gandhi and i can see gandhi at gmail.com let's try to keep the email the same so we're gonna go ahead and do this whole thing right here and we're just gonna say dot email and let's see if it can update my name so i'm giving it my exact email address and let's see if it knows how to update there we go so upsert work right boom it's updating my name over here um based on just matching the email so that was super cool or it updated it right here cause you cleverprogrammer.com so upstart is working perfectly normally that was a check okay now let's go ahead and just do this and let's change that to full underscore name okay and now it should be good if i go ahead and refresh here it should update mahatma gandhi from whatever it is right now to the current user which is rafikaze and that perfectly over here rafikaze smooth like butter and there you have it we can now add users when they log in we can update add and update a user inside of our database based on logging in so our authentication and our user tracking is working perfectly now we need to start moving on to being able to add comments but first we need to work on being able to show the post detail page so for example when i go to this app right here and if i click into a certain post i can go inside of a post right so this is a detailed view of a post so that's what we're going to build so now let's go ahead work on making that post detail page so what i'm going to do is go ahead inside of my pages we will go inside of i will create a new folder here and this will be called let's create a folder this will be called post so this will be a page for a post okay and then we're going to create a new file here okay and this file we're just going to call it id okay dot js just like that because that id is going to be pretty much dynamic every single time we come to this page okay so this page is going to be a fairly simple page let's go ahead and just create the front end for this so we're going to say post view and we'll say return and in my return i'm let's just return a div for now and in this div we will add a h1 that just says post view okay or post detail or whatever let's go ahead and say export default post view and um yeah there that's it so now let's see if we can actually route to this page okay so we're gonna we're gonna try that so let's see if i can go to this url here and add a slash post slash one okay and let's see if it actually routes us to it boom there you go we're getting post detail so the routing is working excellently so now we can actually start styling it and showing everything here so first of all we're gonna have the post actually show up so we're gonna import the post component so import post from and we'll import the post from i believe common so let's go back to components let's go to common and let's go post so the first thing obviously it should show is the post so there we go so now it's showing us the post now how which post is it going to show we need to actually give it the selected post let's destructure this and give it the selected post now where selected posts coming from so the selected post can actually come from the reddit context okay so we can actually add that in there so let's go to context okay and then in context we're gonna go ahead and say selected posts set selected posts just like this and we're gonna set it to null and the start because there's gonna be no selected posts in the store obviously okay and current user yep this is fine so now how are we going to that what the selected post is first we're just gonna pass that information around so we're gonna pass this through our app selected post and this hook for set selected post now let's go ahead to our post component so let's go components comment post and inside of this component we're now going to get access to some of the posts okay so we're going to go ahead import a few things that we'll need access to i'm going to import use context from react let's import reddit context oh wow it actually can pull it up that's cool okay import reddit contacts from right there and then let's do reddit spider import reddit spider let's see if it does it boom it does okay so we're gonna actually we don't need we don't need the provider we just need the context so entire app is already wrapped in the provider so we don't need we don't need access to that and then we just need to get the use router so we're going to say from next slash router okay great so we have access to all of this stuff well now what now what we're going to do is let's get access to the router we're going to say use router and then we're going to grab our selected post so we're going to say const selected set selected post we're going to grab that hook so we can actually set which post is the selected one okay don't need to see the upvotes anymore set selected post okay and now we're going to create a little function it's going to do this for us so i'm going to say navigate to post and we'll call our hook set selected post and it will destructure the id title content author created ads upvote down vote okay and then it'll push us to post slash the id okay wherever whatever the id of that specific post is okay and then when we want to call this is we just want to call this on click so if we go down we have so this is a specific post right so since it's a specific post we already have access to that id we already have access to that title we already have access to that author so we already have access to all the information about that selected post okay we can even like just destructure the selected posts if we wanted to okay or destructure this but we don't have a name for it so that's why we're manually writing it here so it says selected post and then we're just gonna have an on click here so what we want to wrap the on click to is right above the author okay we can add we this positive this is what we're gonna add the on click to so we can say on click and then just navigate to post okay so let's give this a try and let's see if this works so we're having an error which sets a selected post so we're having this error in the id page right so now we we will need context here obviously because that's where it is so let's go ahead and get import use context from react and then here we're going to say we're going to go ahead and say const set selected post is from use context reddit context okay we got to get the redis reddit context as well so we're going to have go ahead and import it so i'm going to say import reddit context from context reddit context okay so now we have access to set selected post and now it'll actually be able to pull it up in here so let's go ahead and refresh this see if you have any problems set selected oh sorry selected post is what we want to do selected post so we're pulling that out and we're setting that over here okay so let's go back to our home page and now let's pick up post build medium with typescript so let's give that a try i'll click into it and now it says created at is not defined and the error is happening in postpost.js so let's go to post and it says create it add is not defined simple we just have to destructure it here because we already have access to it from the database okay so let's go build medium with typescript now it says upvote is not defined so it's because of votes and down votes will plural pluralize it let's click now there we go now we can actually navigate to this new page and you see it's even pulling that specific post id so if i go here to another post see it says post three pull another post you can see it says post one right so we can see that it's working exactly how we want it to we are now able to navigate to that post pass that data through the route router and then the router pushes us and takes us to that page with that specific post okay so let's go ahead to our id page and let's keep working on it let's go ahead create a little bit of styling here okay so let's go to this page let's get a little bit of styling so it's not just touching the top so much so let's go ahead and import header okay so we're gonna say import header from and we'll get the header from our components slash header so now at the top we can actually just put our header so let's go right here and i'll say header great our header is showing up now at the top that's perfect okay so we now want to also create a wrapper around this entire thing so inside of this div i'm going to say class name i will do style.wrapper okay and it's gonna error out because it doesn't know what style is so let's create a style and this is going to be the wrapper okay we're gonna make it background black give it a text white just so it has just so it has like some breathing room okay and then the post we're actually gonna put the post inside of a container wrapper so let's put a container first let's go to div and we'll go class name and we'll say style dot container and we'll add this post inside of here i'll format it a little bit okay so let's go ahead and create styling for our container so we'll do mx auto flex give it a full width let's go like this flex 1 and then give it some spacing and then we'll give it padding on the yaxis so of 5 ram about and then padding of 6 on the xaxis okay there we go so that looks better and now we're going to have a container wrapper underneath this i'm going to say div say class name style container wrapper let's wrap this bad boy in there okay and let's create the styling for this now container wrapper and this is gonna be just full width space and then we're gonna say large what's happening here okay now it's looking great okay so now our post is coming through we're getting all that post data and we're able to show it so let's go back home let's go ahead and click this and there we go we can actually see everything passing through okay through the url parameters so this is the selected post essentially that's what's happening here okay now in the post view we wanna do a couple of more things so we're gonna go ahead and add a router say router use router obviously so let's import router if we don't have it import use router right from next slash router so there we go and now we're going to create a use effect hook and this use effect hook is going to say hey if the selected post is i want you to just push me back to the home page because if there's no nothing then push me back to the home page don't keep me on that page because otherwise they're going to show me like a post with an n or something like that and that just looks ugly we don't want that okay use effect great let's go here okay so yeah whenever it's a whenever it's like and or is broken it just takes us back to the home page so for error purposes it makes our apps makes our app just like a little bit cleaner so we got the styling for our post done and now inside of the content wrapper we want to have posts we also want to have i'm going to just create a comment here we also want to have save comment okay so it's gonna be or like basically new comment okay so we'll just call it save comment okay this will give you the ability to add new comment so that component will need and then this another component we'll need will be called comments and this will just show all of the existing comments we're going to need both of these components right here so first let's go ahead and create the ability to read comments and let's go ahead and do that now now let's add the ability to retrieve comments so we'll create a new folder inside of components and this folder will be called comments comment section and then inside of this folder i'm gonna create comments as a component okay so that's thing number one let's do const comment comments and we'll say return and we'll say div and then just like the usual we will actually put a h1 here i'll say comments let's export this as default comments and then the next thing we want to do is we want to create an api back end like back end api request endpoint for this okay so inside of pages go to api okay and then inside of api what you want to do is create a new file and say get comments dot js okay so what we'll do here is it'll look very similar to our get posts we'll just have a few different changes okay so let's import super bass first i'm going to say soup from and we'll say services super base client and then we'll export default async we don't even need to like this function and then here's what we'll do we'll try the following and we'll catch the error and we'll just if there's an error it's a serverside error so we'll return error code 500 and then we'll just send the error saying hey error fetching comments okay and this is an object all right so we've error handled and now we'll say hey get me the query okay we can console logger just so you could see it and then we're gonna get the data and we'll await superbase.com.from comments okay we need to create this table so let's just do that now before we forget let's go ahead into let's say new table okay so i just clicked right there new table and then let's go ahead and say comments and comments will have a couple of columns here so we'll have created at obviously we'll have author author is just going to be text in this case we will have we will have text so like what you want to actually write that'll obviously be text then we will have post id okay and then we'll just leave that to be integer eight and then we'll have user email okay and this will also be type text okay great so let's go ahead and hit save here save awesome so now we have comments saved let's just add a comment so we'll say author is rafikaze wow this post is absolutely unbelievable okay and we'll say that this is for post id 2. so we'll say this is for the build medium with typescript post and if i actually look at the url if i full screen this you could see that id is two there so i'm gonna attach it to this one manually so i'll say post id two and user email i'll just write this manually as well later obviously we will code it up so it's all dynamic and all that good stuff so we've added a comment okay and then let's go and select all comments we will inner interjoin the comments with users so it will interjoin it on probably email or whatever actually we'll here here's what we will enter join it on we'll interjoin this on post id okay and we'll give it the post id from our query parameters so from our front end we'll hit our back and we'll hit this end point at api slash get comments we'll hit this endpoint and then we'll actually pass it in the require parameters what that posts id is from here so we'll pass it down into requests and then we'll grab it from our request and we'll just say hey enter join these and match it on post id okay and then so this will grab all the comments and then we'll just say res status 200 and we'll send okay beautiful so our endpoint is now done now let's go ahead and retrieve these comments so now let's go inside of our comments function so let's go here into components comment section comments and we're gonna retrieve it here we're gonna use swr here as well so let's go ahead and import it so we're gonna say use swr from swr okay we're gonna also import a few things like use of state and use effect from react and then inside the comments what i want to do is i want to basically follow their state so i'm going to track their state here with this and it'll be an empty array at the start okay and let's also get our fetcher from our contacts so we'll say this reddit context and let's go ahead and import reddit contacts okay from let's see where it's at reddit contacts from context reddit context there we go so we're getting our fetcher and now we can actually just do this so data and we'll say use swr and we'll hit our api endpoint so we'll say api slash get comments question mark post id give it the actual post id let's make it template literal so give a little back tick here and then we will use swr let's hit enter here let's give a comma let's give it a fetcher and then let's give it a refresh interval of 200. okay so what this will basically do is we'll pull the all of our comments through this and then now we wanna call our use effect hook and inside of our use effect hook we're gonna say hey if there's no data just return because there's literally nothing to do otherwise set comments to whatever is inside of data and run this only when the data changes because you don't need to keep running it again and again so if a new comment gets added to the database then run it if a comment gets edited then run it otherwise don't run it okay and now we should have actually access to all of our comments and should be able to show the comments at this point okay let's just double check everything comments will also need access to post id that's an important part that's how we're giving this post id right over here right there it's coming from here and then we can just loop through the comments or do whatever we want or show the comments so let's go ahead and console log and we'll say comments okay and let's see if anything shows up here so let's look inside a console okay and let's hit refresh and see if anything shows up in the console at all let's put a little emoji here i'll say cookie let's refresh let's go ahead let's make sure that the comment section is actually like available and showing up because that's one thing that we might not have done so we have this commons component now we have to just make sure that we're actually running this so let's go to our id so let's go to pages let's go to post pages and let's go to id okay and there we go this is our comments component right here we can just now call it okay and then what we want to do is import it import comments from component slash okay and another dot dot components slash comment section and then we're going to say comments the capital c and then we want to pass our comments the post id so let's go ahead and give it the post id and we'll say selected post dot id okay that should do the trick so now let's click into this boom use context is not defined but we didn't get any errors before that so let's go back into comments and let's import use context so we're gonna say import use contacts from react actually we can just do it right there let's get rid of this here let's hit save and refresh okay let's go back to our home page all right let's click build medium with typescript and there we go okay we are getting we're getting something something is happening now at least comments is now showing up here so that's a good start and we should soon be getting our actual comments as well and then we should be able to show them too eventually all right to debug this issue let's just go to get dash comments here and let's also console log data and we're only going to see this inside of our console right here so keep an eye out on your shell okay and let's go home page and then let's click build medium with typescript right because this is the one that has id of two and you can actually see that we're getting back null so on our back end we're actually getting back now so the problem is happening somewhere on the server side and we have to debug we're going wrong somewhere right here because we're getting the post id 2 and that's correct but we're going some wrong somewhere all right so if we try to actually debug this one step at a time like what this error is let's comment out this eq line and let's also comment out this let's not let's let's oh let's not do any inner joins and let's just select from the comments and let's see if we're getting back data from the comments and it actually looks like we are so we are getting back comments is the inner join and this eq is not working let me remove this here we don't need to parse in the reason why this is happening is that we need to actually create a relationship between these databases so go ahead go to comments go to user email hit edit column and then once you're inside of here hit add foreign key relation and then what we can actually do is let's add this to user's email one second yep so let's create that relationship between the user email to the actual users that are that is in authentication their authenticated users and their email okay let's hit save and that's the relationship we want to have there boom now once that relationship is created if you come back like magic it's already working super beautiful so we're getting back the actual comments that are for this specific post because we just had to create that relationship between them now that we're good with that let's see i can actually see if i show you this cookie over here i'm like printing that comment it's actually getting printed out just fine so let's go back to post id okay and when we call comments here seems like the comments are showing up in the console log but what we want to do is we obviously want comments to actually show up on the screen right so let's go ahead and style comments now in a way where we can actually see it on the screen so i'm going to go com components comment section let's go to comments and let's continue styling it now how do we actually show it on the screen let's essentially build a comment component that's going to allow us to see it on the screen let's just build it raw just pop it in here and then go from there so if i look at the final app and we go inside of a post here you can see that i have some kind of wrapper right inside of that i have information about the author i have an image i have the date i have these up and down votes and i have these actions right there and then this thing right over here this thing here almost imagine like this is a component this is like one comment okay and then that one comment just keeps repeating over and over again for however many comments there are and then outside of that entire thing we just have a wrapper okay so let's go ahead and create our loop already so i'm gonna say if there are comments then make this otherwise don't make this right so let's go ahead and do comments and i'll say comments comma id and i'll do this and we'll open this bad boy up actually we'll have to close it too so boom right there okay and then we write whatever code we want inside of here so let's start off with an image and let's import next image if we don't have it yet to import image from next image and then we're gonna give it comment.user's profile image so we have access to that comment so let's grab that comment users because we have that reverse relationship now and grab that user's profile image and then class name will do style.profile image and then layout will be fill okay just like that okay great we do need this okay so we're closing this paren here what's the error all right let's close the image tag here so we're gonna go boom now the image tag is closed now there should be no more errors let's hit refresh and let's see if any image shows up here okay and just in case if our entire thing crashed you can always kill it and come back and yarn dev it as well and that should get it back up and running all right now we're getting a new error it says style is not defined not a problem just go ahead here let's go ahead con style okay and now that style is defined that error should go away swiftly and then we're going to create styling for this in a second so let's take a look at this page that doesn't look like the right page okay let's go back to our home page and then go to build medium with typescript i'm gonna click into it now we're getting an error that this image right here is not configured in our next.js so let's go ahead and do that so let's go into next config and right here simply add that in and hit save and that error should go away so whenever you update the config you'll have to kill the file and then you'll have to yarndev again okay so that's something you always have to do whenever you update next config that's the only way it's going to show changes sometimes you have to do that when you're updating and environment variables as well okay so let's go back to the home page and then once we go back to the home page then we're gonna go ahead to build medium with typescript let's click it and there you go now it's showing the data and it's showing the image granted that image is a little bit bigger than what we're going for so let's go ahead to our comments and we see that the image is filled now let's style the image so let's go ahead and go profile image and the styling that we're going to have for a profile image is just going to be object contain okay and the main thing we want to do around this image is we want to add wrapper for all of this so we're going to add a wrapper right around this and i'm going to say class name it's going to be style.profile image container okay and we'll wrap this in that way and then let's go ahead and style profile image container so let's go back up boom and the profile image container the styling we're going to have here is height small height we're going to give it a small specific width we're going to make the overflow hidden rounded is going to be full and we're going to make it relative i just had to restart my server and we have our comment and our image showing up okay the styling is showing up it's a small little circle so that's great now i want to actually create a post info container so we're going to create a div and this div is actually going to wrap up this entire bad boy right over here let's go and boom like that okay we're going to give it a class name style.postinfo container and then let's go ahead and just style this so we'll add it here and then post info container is going to be flex we're going to give a gap and we'll do a point for rem on this so we got our info container now inside of our info container we want to add everything else like the author author name all of that stuff so let's go get outside of this div and we're going to add a span tag span tag and in this we're going to go comment dot author and then we'll put a dot here like that okay boom we got comment.author rafikaze we got a little dot we'll do another span tag and then this one is going to be for the date so we're going to dynamically pull dates instead of hardcoded dates so we're going to use time ago and we'll need to import time ago so we're gonna go ahead and say import time ago from javascript time ago okay and it's time ago with a capital a and we'll need to install this because it doesn't know what this is right now javascript time ago so in order to install this let's just do javascript let's go to packages on the left hand side and just do javascript time ago and let's see if it comes up yes it does so let's install it and then that error should go away soon okay now that error went away let's go back a page let's go to the home page of the app and then let's go ahead to build medium with typescript okay now it says time ago is not defined so we're gonna do we're gonna do the following we're gonna say const time ago add default locale okay and we're gonna make it en and let's also import this i'll say import en from javascript time ago slash locale slash en okay so i've set the default locale to en and then we'll say time ago new time ago and we'll give it in us okay all right no locale data has been registered for any of the locales so if again if you're having errors just go ahead you can restart your rapple you should be good now it's saying hey these can't be objects they're not valid so let's just say let's just say hi here and let's see if that works okay and let's go back to our home page and then let's click it there we go our high's showing up very good now what we want to do here is instead of hi obviously i want to show the time so we're going to go ahead and say time ago.format and we'll say new date comment dot created at and let's give that a try let's go back to make sure you click home page first go to home page first and then click build medium with typescript okay now it says invalid number all right so we want to do is we want to pass in now and i'll give it a twitter like styling for the time okay and then let's go back to home page and then click build medium with whatever now it's saying a different error it's saying invalid time value so we said format new dates common.created at and we said twitter now invalid time value all right so in order to not get just stuck on this what we're going to do is let's just comment this out for a second so we're going to go ahead and i'm just going to comment this out so let's go like this and then let's go here let's end the comments and we'll set that so let's comment this out for now and let's just keep making progress okay so let's go to build medium with typescript okay we see rafikaze i'm just gonna say june 15th for now that should show up right there okay great so we have that now the next thing we want to do is we're done with the span tag this this is also in a span tag so we're out of that okay so we could go span wrap the june 15th and span remove the span from here we're essentially just commenting out that time ago thing okay but keeping everything in nice in a nice little span tag okay okay and next up what i want to do is i'm going to create a new div here okay let's see we're closing all the span text all right let's just stay inside of this div because otherwise we're going to have an error so let's create a div here and this is going to be comment text so it's whatever the text of that comment is so you can see wow this post is absolutely unbelievable so that's showing up now that's very good let's create another div here and we'll give it a class name of style.icons okay we'll give let's go in here and we'll say span and i'll say class name style that icon okay and then we'll give it an upvote icon here we'll go up vote icon okay and we'll have to obviously import this so let's go ahead and import our upload icon and download icon so let's just get them both boom get access to upload icon and down vote icon okay and now let's if that ever happens where it says hey i don't know the ideas just go back to the home page and then click back in you should be there okay so we got the vote icon now let's get our down vote icon to show up as well so we'll do span here i will say zero we will do another span tag here and then we'll say oh this is class name style dot icon okay and then inside of this span tag i'm gonna say down votes icon just like that so now that should show up as well okay so boom we're done with the with that part of the downvote icon okay let's create another span here span tag and then inside of the span tag we will have a class name we'll say style.reply okay and then in here i'm going to have a chat alt icon and i'll give it a small height so it's not too big and a small width okay and then we'll end this and then we're going to go ahead and add another span here and we're going to say reply and for chat alt icon we need to obviously import that so import from and i think this one comes from hero icons if i'm not mistaken but let's just double check yep it does hero icon slash react slash outline okay so now okay again get this error no worries go back to the home page and then click build medium with typescript and there you go okay now all of this is showing up now what we have to do soon is styling but for now let's just keep going let's finish this part up okay let's create a few more span tags here and we're gonna say class name is style.icon and this one is going to be give the next one is going to be share the next one after that is going to be save and then we'll have follow okay so that and now let's create styling for icon because we're seeing that in too many places and we haven't styled it yet so let's go ahead and style it and all we're gonna do here is really just give it a color of a little darker gray so let's do that for this and then so that should style it and then we're going to also style icons we'll say flex gap of 0.4 ram there we go so that's looking better now we want to obviously wrap the entire thing as well pretty soon and make sure that's that's all good so we have our post info container and then we want to wrap the entire thing inside of a commons container so we're going to go ahead and go to div say class name and i'll say style.comment container all right and we'll take this whole thing for the common container and just go ahead and wrap it okay now let's go ahead and style our comment container so let's go here comment container and for the comment container we're gonna go ahead and add a little margin at the top like on the yaxis we'll give it one rem we'll give it flex and flex column and a gap of one rem here as well okay and now that sign if you ever see that sign that usually means the rebel is dead so let's just simply kill it and let's go yarn dev again okay and then we will wait for it to come back to life then we should be good okay let's just hit let's just go to the home page this okay great so i have all of these things here common container the styling is not showing up right now which basically means that it's most likely that the rebel replit is down i'm gonna give it a background of black or white rather and nope it's not showing up so that just means the replit is down so we got to get the replit back up all right so when the replit sometimes goes down make sure you hit stop right here as well okay go ahead and hit stop because now it's creating these different ports and whenever it does that just means something bad's about to happen okay so kill it here hit stop here and if none of that is happening just hit refresh as well so it's just a clean slate you're restarting it from scratch and now it says connected at the bottom which was a good sign okay and i copy every time before i refresh i copy my files that way if something happened i can just select everything and paste everything directly from my clipboard all right so the post info container actually ends right underneath right underneath the span tag right here with the date okay so let's go ahead and end that real quick so we're going to go ahead and just cut one of these divs because we don't those don't need to be there and we're gonna paste it right here because that's where it belongs okay and now boom look at that the whole thing is just looking already way better okay now all the styling everything is making sense now all we need to do is add this entire thing inside of a wrapper okay and we don't need this h1 here anymore okay let's go ahead and add this inside of a wrapper so i'm going to say div okay and end the div outside of that for loop so let's end that right there actually it was already ended wait now i'm just being silly hold on sorry this is the div that's gonna be the wrapper and this div can just pretty much be empty so it doesn't even need to be called the div just go ahead and make it empty here okay this div is the more important one and this one is going to be called class name style.wrapper and then we're going to go ahead and style this so go ahead and say wrapper okay and the styling for the wrapper is gonna be we're gonna give it a background and then a padding of four okay there we go so now the comment is showing up beautifully okay and so if we have multiple comments they're all going to show up just like this okay if we look at our final version of our app the final version of our app looks very similar besides that this is gray here and this isn't and then reply is also incorrect so let's see what's happening here we probably need to just style a couple of more things so we styled icon icons and now we'll need to style reply because we didn't style that yet so let's go reply and we'll say flex item center gap of 0.2 rem text and we'll say 818384 a little gray color and there we go now reply and everything is looking great that's awesome okay now our comments are looking really nice okay is there any styling left for it that we have to do we have profile image we have profile image container profile info post info container icon icons profile image wrapper reply so styling wise we're all good here and now if we have multiple comments this should show up very nicely so let's insert a new row let's go ahead and say author is david riccosi we will say this is my fight song let's put a glove here and then post id will be two so it'll be associated with the medium with typescript post and the user email will be david cleverprogrammer.com we will hit save and there's an error ah because we probably don't have david inside of our database so let's go here to our tables and let's go look at our users who do we have we have gandhi at gmail.com so let's go ahead and copy that email and let's we can actually even view data which is really cool so let's go ahead and paste this let's hit save okay that worked beautiful and look at this it's showing up this is my fight song that is great that looks really freaking cool too and it's pulling the data from our database and we figured out the error with the time ago saying the error that was happening actually is it's created there's no such field as created at like this there is a field created underscore at and now what we can do is i can go ahead and un comment this bad boy right here and it should work okay boom there we go so now it's twitter style so it's like this comment was posted one minute ago this comment was posted 58 minutes ago so that looks very nice so now that problem is completely solved as well and there you go the now we have the ability to get the comments of any given post beautiful now pretty much one of the last things that we're gonna add is the ability to actually add a new comment let's go ahead and do that all right so now the last thing we're gonna work on is the ability to save a comment aka write a comment so this component right over here okay so you could call it new comment you could call it write comment save comment whatever you want okay so this is what we're going to be making right here so when i'm thinking that i'm immediately thinking we're going to be creating a new component so let's go inside of our components here and let's go inside a comment section let's create a new thing new file and we'll call it save comment dot js okay and now inside of save comments obviously we're going to do save comment okay and we're going to destructure post id here and let's go ahead and do div div let's go ahead and do h1 save comment and let's go ahead and export default save comments okay so now we have this let's make sure that save comment is actually showing up where it needs to so save comment shows up in our id page okay so basically let's go ahead to our pages and let's go ahead to our post pages and let's go ahead into our id page i'm going to open a new tab right here and let's import save comment from and we're going to say components slash comment section slash save comment and then we just got to render the save comment component out right over here like we added that little note for ourselves earlier and raise is going to go ahead and say save comment and let's render that out and hopefully we should see something along the lines of save comment okay and this should show up on the post detail page so let's see do we see it save comment anywhere no we don't okay let's go back to the home page let's click back into this okay so i don't see save comment anywhere so let's go check why that's happening so let's go to save comment i clearly have an h1 that says ah because i'm not actually returning this as a component so it's not returning it that's the problem so there we go now save comment is showing up okay so let's go back to id okay or sorry let's go back to save comment now and let's actually make this a pretty component all right so i'm going to remove all of this here okay so we're going to have a div and the div is going to have a very simple styling here so we'll say class name and text small so it's just going to have small text i'll say comment as and we'll put an empty space here okay comment as and then we'll have a span tag and we'll make it we'll make this gray or some color here 4 2 9 6 ca and we're going to say if the current user get get the current users full name here okay and this is just optional chaining so our app doesn't crash just in case we don't have access to our current user remember whenever this error happens go back to the home page and then simply go ahead go down and click the user okay so not a big deal if that happens okay so go ahead home page and then go from there okay so now we're getting this error that says current user is not defined so that's not a problem we just have to get access to the current user okay so how we're going to get access to current user is we can actually get it from our contacts so let's go ahead here we're going to say const and we'll just get access to our current user we don't need is loading okay so let's go ahead and import this guy as well so our current user we need to import context right so let's go ahead and import context we have access to it we need to import use state and use context from react so let's get those because we need to get this use context here right now we'll have access to current user that's not a problem let's simply go back again to our home page then i'll go back to that specific post and click it and we should be able to see our current user so let's go ahead refresh okay there we go so now we can actually see our current user full name right so we're able to actually get access to that thanks to medium context now let's go ahead we're going to need to keep track of a certain state which is going to be our input state so let's go right there and in order to keep track of it obviously we're going to need to go inside of our text we need to have a text area for this so we can actually show the text so let's create our text area so let's go down inside of our inside of our text small and then we're going to create a wrapper first actually let's go ahead and create a wrapper for this entire div and yeah let's wrap it in that okay let's go ahead and style that and i'll say class name and we'll say style.wrapper okay and then we'll create style con style is equal to and then for wrapper this is the styling that we're going to do here i just want to speed it up a little bit guys honestly because it's quite a long tutorial right so i want to just fly through the styling because there's nothing new at this point but we just need to cut the finishing touches so we can get this app rock solid okay now let's go ahead and style this wrapper so we have this style so you can see it says comment as rafikaze and it looks really clean and then we're gonna need the text area box inside of here as well so i'm going to take that text area box and i'll explain this code to you as well but i'm just going to speed up a little bit so boom let's put text area right there this is just following what we're typing in the text input so that's it this is giving it a style we're setting the columns and rows to a certain size and then we're just saying hey placeholder what are your thoughts this can be a selfclosing component so we can just put that slash right over here and there you go okay we have this guy text is white so we can't see this so obviously we need to style this so let's go ahead style input and the input styling actually is going to be the following so i'm going to go here we're going to go there paste okay so input styling is going to be rounded we're going to have borders around it so you could see those like borders right there's obviously border radius action going on as well that's why we have rounded right there we have a color for the borders it's just like a not a white border but like a grayish we have a background color for the border as well so that's why you see this in a grayish background gray dark black whatever and then we have padding padding left and then we have small text white now when we write in here we can see everything so now it looks a lot nicer so that's what we have for the text area that's happening okay and then what we need to actually do is just go ahead and create a comment button that when you click it actually saves the comment so i can actually go ahead and just do save comments let's make sure we're importing save comment as well so we have access to it so let's go at the top and oh no actually we're in the safe common file so obviously we have access to it right so on click so save comment guys is going to be a database function that we're going to have here okay and so let's go ahead and create that and i'll just walk you through what it does here so again nothing new so that's why i'm just going through this faster so we don't need to care about loading nobody cares okay you could have loading here but you honestly don't really need to okay and what this does is it will go into the comments database it will insert the comment based on the author the text the post id and the user email and then we'll set the input to empty once we're done so that's what this function does and then we run this function when you actually click the comment button so let's go back to our home page here and then let's go to build medium with typescript we could see all the comments related to it we can see the comment button let's go ahead and style this because it looks not doesn't look very pleasant right now so let's go ahead and style comment button give it a rounded full certain gray color font is bold right so there we go now comment looks better and let's just say yo does this work okay let's go hit comments and then let's see if something happened so i'm going to go ahead and try to refresh this page and fingers crossed let's see if it works if it doesn't then all good we'll see if we can make it work okay so let's go back to our home and then once we're on our homepage let's click build medium with typescript okay so that did not actually work and add our comment so let's let's see what went wrong here okay so save comments input set inputs okay we have our current user let's go there so on click we're gonna run the save comment function that's interesting let's go take a look at our database let's see if there's any comments added okay no comments were added interestingly enough so i have let's just walk through the logic of this i have my post id from the route i pass my post id in to my comments i have a table called comments so that's good i'm inserting the author name the author full name the text is the input that i'm typing in here so what's actually happening let's just go ahead and inspect and see if it's giving us see if we're getting any errors here so let's go ahead and write test by comment it looks like we're getting some errors ah it's a super bass is not defined so i haven't i need to actually import super bass okay so there we go super bass let's try it now okay let's go ahead and say does this work and let's go ahead and comment that looked a lot more like it actually let's refresh yes the comment came in does this work okay let's go ahead to the home page again let's come back to this and let's now add test and let's go comment okay and then let's go in our super base let's refresh and see if test came through all right so apparently post id is blank so it doesn't yet know what the post id actually is so let's see why that is happening and why it doesn't know about the post id so i will console log here and we'll console.log post id okay and then let's go to the home page let's go here and let's see if post id it says it's undefined interesting so where we need to probably pass at the post id so let's go here and we'll say post id selected post dot id so let's just make sure we're passing save comment that from our id dot js okay let's go ahead and say now the post id is two very good let's say test let's add the comment actually let's say cookie eater and let's add the comment nice look at that you guys if i go back to my database and refresh this you'll see that i have cookie eater post id is actually two and it's showing up how beautiful is that so we can go to another post here i can say hi let's hit comment and look at that it's showing up wow let's hit it there we go guys this was absolutely phenomenal if you've made it this far you're an absolute champ i just want to say that i appreciate you and your beautiful face so much make sure to smash that like button so this video goes out to everybody and i'll leave it to you as a challenge to see if you could add the upvote and down vote functionality and yeah see if you can actually make that work okay that's gonna be a challenge for you and that'll let you take your game up to the next level but all of the concepts have been explained everything and how it works has been already explained so i will turn that over to you with that said i love your beautiful face thank you so much for watching and following along as always i love your beautiful face this is qazi and i'll see you in the next video
