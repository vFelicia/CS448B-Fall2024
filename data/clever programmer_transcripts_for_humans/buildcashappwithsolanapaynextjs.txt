With timestamps:

00:00 - in this video we are making cash app web
00:02 - 3.0 dap with nexjs I'll be showing you
00:05 - how to make your cash app clone work
00:06 - with something called Solana pick if you
00:08 - don't know what solanape is it's a
00:10 - digital payment platform built on the
00:12 - Solana blockchain that you can use to
00:14 - make it so that your front-end app can
00:15 - now send money and Solana to other users
00:18 - and you can feel free to customize this
00:20 - web app and make it your own and add it
00:22 - to your portfolio so without further Ado
00:24 - let's get started alright so here we
00:27 - have the app and as you can see there's
00:29 - a couple transactions on here this one
00:31 - is for NBA tickets as you know two
00:33 - Solana is pretty expensive so maybe
00:35 - that's how much it costs right another
00:37 - transaction series you just sent you
00:39 - Seoul through the Phantom map right we
00:41 - have functionality where we can load a
00:43 - QR code and I can literally scan this
00:45 - with my phone and I can pay through my
00:47 - phone so if you want to set up what's
00:49 - called a point of sale system I'll show
00:50 - you guys how to do that later in the
00:52 - video so stay tuned the main feature
00:54 - though is that you can you know
00:55 - disconnect or connect your wallet you
00:57 - can see all the transactions which are
00:59 - all being being stored in local storage
01:01 - all right so we're going to hit new and
01:03 - then as you can see there is a test here
01:06 - that we could do and we can even put
01:08 - this for like dinner for example right
01:11 - for and you can change your one sold to
01:13 - two syllable we'll do one soul and if I
01:15 - hit pay send one cell hit approve
01:19 - all right and as you can see thinner is
01:22 - there as well and if we look at my
01:25 - Solana wallet I had a 15 Soul now I have
01:28 - 14 and in my other wallet that I sent
01:31 - this to 4A should be five instead of
01:33 - four and if you look it's five so that's
01:36 - pretty simple very simple app for you
01:37 - guys today let's get started all right
01:39 - so you might be asking Lance how do I
01:41 - get started working on this project well
01:42 - we have something super awesome for you
01:44 - guys if you open your terminal so you
01:46 - could do this multiple ways well one way
01:49 - is to open up vs code press Ctrl J and
01:52 - make sure that the path here is the
01:53 - folder that you want so you have to do
01:55 - CD and then your folder name right so
01:58 - whatever your folder name is replace
01:59 - that right here right so this is where I
02:01 - want to put it it's in my projects
02:03 - folder and all you guys have to write is
02:05 - something called npx collaborate
02:07 - programmer okay so this is the latest
02:09 - version currently at the recording of
02:11 - this video but you can always make sure
02:12 - it's the latest if you do npx cloud and
02:14 - programmer at least and if you hit enter
02:17 - go ahead and put your email address
02:19 - which is for me with this and your name
02:22 - and once you do that you'll get access
02:24 - to all of our portfolio projects that
02:27 - you can add to your own portfolio and be
02:29 - sure to customize them and make them
02:30 - your own build something else with them
02:32 - so you don't have to mix on a cash app
02:34 - you can make your own website where
02:36 - users can send different transactions or
02:38 - even set up a store with Solana pay as
02:41 - your point of sale system so I'm going
02:43 - to click install on a cash app
02:45 - enter
02:47 - right and it's going to run some scripts
02:48 - and I'll come back into the video Once
02:50 - that's done and we can get started on
02:52 - fixing and starting the app alright so
02:55 - let's get started so at this point you
02:57 - should have used our CLI tool to get the
02:59 - startup files that you need you can make
03:01 - sure by checking if you are in the CLI
03:04 - starter branch and all you need to do is
03:06 - start is press yarn Dev like I mentioned
03:09 - earlier you don't need to download any
03:10 - packages because if you use our CLI tool
03:12 - it's done for you so what we want to do
03:14 - now is open up your browser and let's
03:17 - head to localhost and start that project
03:19 - because you're going to notice it's
03:21 - going to be a little bit different so
03:22 - let's take a look so you can notice that
03:24 - if you look at the transactions
03:27 - that is static transactions I didn't
03:29 - make those they're just default there
03:30 - we're also not logged in as you can see
03:33 - right here and we can't connect our
03:35 - wallet anyways as well as there's no pay
03:38 - functionality it doesn't work so our job
03:40 - is to show you how to get this app
03:42 - working while teaching you guys about
03:44 - Solana pay
03:47 - so the very first thing that I like to
03:49 - do is start with our wallet connection
03:52 - so as you can see I'm clicking but
03:54 - connect while doesn't work and our
03:56 - wallet of choice today is Phantom wallet
03:58 - of course so log into your Phantom
04:01 - wallet if you already have one if you
04:03 - don't we're going to show you guys how
04:05 - to get Phantom on so skip ahead a little
04:07 - bit in the video if you already have
04:09 - Phantom so what we need to do is head
04:11 - over to Google and you can go on Google
04:13 - Chrome and write Phantom wallet
04:16 - extension
04:17 - okay and once you do you can click this
04:19 - first link here and it's going to say
04:21 - Phantom and just click add to Chrome
04:23 - once you do that you should see the
04:25 - little extension right here on the top
04:26 - right corner click it and create a new
04:30 - wallet you're going to get a set of
04:32 - phrases save that phrase don't share it
04:34 - anybody
04:36 - um also don't show anybody your private
04:37 - Keys as well or else they'll have access
04:39 - to your money right another thing that
04:41 - you're going to need to do is click on
04:43 - your profile and make sure you're on the
04:45 - right setting so click developer
04:47 - settings and change the network to
04:49 - devnet right there's going to be three
04:51 - networks here mainnet test net and
04:53 - devnet we are going to be using the
04:55 - devnet so it's not real Solana so we can
04:57 - play around as much as we like
04:59 - awesome cool so once you have some
05:03 - Solana in your wallet I have two we can
05:06 - go ahead and start our wallet connection
05:11 - all right so by this point you should
05:13 - have the Phantom wallet extension all
05:15 - ready to go and the first thing that
05:17 - we're going to do is set up the connect
05:19 - wallet functionality right so quick
05:22 - question do you know where this button
05:24 - is in my app if you don't know
05:27 - you're gonna have to stick with me and
05:28 - if you do feel free to move on ahead
05:31 - alright so where in my front end folder
05:34 - does that wallet connect button live
05:37 - right you're gonna have to understand
05:38 - how the app works because you never you
05:41 - didn't make this app you don't know how
05:42 - it works so let me show you guys how it
05:43 - works so let's hit go to the browser
05:46 - again and let's head over to zipboard
05:48 - and let's draw out the parent child
05:51 - relationship of my app right so what do
05:52 - I mean by that if you look over here and
05:55 - let me make this box let's say that this
05:58 - represents my entire app yeah
06:01 - so every app component in react has a
06:05 - child what do I mean by that well this
06:07 - app is going to have an index component
06:10 - child all right so index.js how do I
06:13 - know well let's take a look at my vs
06:16 - code so let's go to Pages let's go to
06:18 - app and you can see right there's a head
06:21 - and there's a component in line 15 right
06:25 - here do you guys see that right here
06:26 - component awesome so what is this
06:29 - component if I were to click into it
06:32 - you'd notice that this component is
06:34 - actually the index
06:36 - all right so all this is the index let
06:37 - me zoom in for you guys so you can see
06:39 - that a lot better so let's take this go
06:40 - down press Ctrl B
06:42 - boom all right how's that so this should
06:45 - be a lot more clear now so this is the
06:47 - index right so if I were to do like a
06:50 - side by side let's put this in here and
06:52 - let's put this right here right and
06:55 - let's bring this back
06:57 - so going back to cash up right this is
06:59 - my app so far don't mind that everything
07:01 - is all smushed up but take a look at
07:02 - this guys
07:05 - right if I were to take out this
07:09 - component right here nav menu look what
07:12 - happens I'll calmed it out see
07:15 - and boom we lost all of the items right
07:18 - here right and new this new button went
07:20 - all the way to the top okay what if I
07:23 - took out this transaction list
07:27 - boom no transaction list right this
07:30 - works because inside the index.js are
07:33 - more components right so let's
07:35 - illustrate that now so what did I
07:37 - comment.nav menu so that means oops not
07:40 - that that means here
07:42 - the index.js has a child
07:45 - of
07:46 - the nav menu nav menu right
07:50 - also has a child of
07:53 - transactions right trends
07:59 - all right this is important because if
08:01 - you've never worked in react before or
08:03 - if you've never seen this project before
08:04 - how are you going to find anything or
08:07 - understand anything that I ask you right
08:09 - so if you know this you're in great
08:11 - shape but if you don't keep up with me
08:13 - right so we got nav menu here right
08:15 - there's also transaction QR model and
08:17 - profile so let's add those as well so
08:20 - let's do more arrows
08:21 - do this rectangle another rectangle here
08:24 - and we'll do
08:26 - profile
08:28 - and we'll do
08:30 - the say QR model QR
08:34 - or modal
08:36 - right
08:37 - and these have arrows to point that this
08:40 - is the child of index what else do we
08:42 - got we have action and new transaction
08:44 - model and search bar right let's just
08:46 - not worry about those for now but these
08:47 - are the main ones all right so let's
08:50 - make this full screen again
08:52 - okay
08:54 - cool so
08:57 - this is the profile right here
09:00 - right this is the nav menu
09:03 - this is the transactions okay so if I
09:07 - were to ask you which of these
09:10 - like the profile the nav menu or the
09:12 - transactions which of these components
09:13 - is going to have the connect wallet
09:15 - button
09:16 - and if you said
09:18 - the nav menu
09:20 - you'd be correct so let's take a look at
09:21 - the nav menus let me undo all that
09:24 - go back to RBS code
09:27 - and we can make this full screen as well
09:29 - oops still in the draw tool
09:32 - boom so nav menu you said right so if we
09:34 - look at the nav menu and this is
09:36 - probably giving us an errors don't worry
09:37 - about that for now
09:39 - go to
09:41 - components we'll go to
09:44 - uh
09:47 - yep and then we go to nav menu
09:50 - I mean take a look what's inside we see
09:51 - nav menu here man menu item and we also
09:55 - see button here like what could this
09:57 - button be so if I comment this out
10:00 - hit save
10:02 - let's take a look
10:05 - damn okay so look we lost the connect
10:07 - wall button which only tells me that
10:09 - this is our button all right so we need
10:13 - to add the Phantom connect wallet button
10:15 - right so to do that we're going to have
10:17 - to get the connection first let's set up
10:19 - the connection so to set up the
10:21 - connection the first thing that you're
10:22 - going to have to do is head over to your
10:24 - app.js
10:28 - and once you're here you do know now
10:30 - that this is representing our index.js
10:32 - what we need to do is wrap our index.js
10:35 - with the wallet connection so let's go
10:38 - ahead and set that up so the way I like
10:40 - to set it up is go to
10:42 - walletconnectionprovider.js and that's
10:44 - going to be in the context folder
10:46 - and to set up that connection we're
10:48 - gonna need to import a couple of things
10:49 - let me just zoom in a bit can you see
10:51 - that
10:52 - and we can say import
10:54 - connection provider and a wallet
10:56 - provider so we do connection provider
10:58 - and you're going to see the suggestion
11:00 - here it's going to come from one of our
11:02 - packages Solana wallet adapter react all
11:05 - right so get connection provider and the
11:07 - next thing that we want to get is going
11:09 - to be wallet
11:10 - provider yeah there's actually multiple
11:12 - different ways to set this up right
11:14 - you've seen me do it a couple times by
11:16 - now
11:16 - um this is another way so we can also
11:18 - import the wallet
11:21 - modal provider right and this is coming
11:25 - from Solana wallet adapter react UI
11:29 - right this provider is specifically when
11:31 - I click the connect wall button you're
11:33 - going to see the selection of wallets
11:35 - Solano actually provides you that modal
11:37 - so you don't have to make it from
11:38 - scratch so I'm gonna make sure to import
11:40 - that
11:41 - and once you import that model let's
11:43 - import the wallet that we're going to
11:45 - use and like I mentioned we are using
11:48 - Phantom right so what you want to import
11:50 - specifically is Phantom wallet adapter
11:54 - all right you can get this from
11:56 - I believe it's at Solana wall adapter
12:00 - wallet so this thing right here
12:03 - hit save and once you do that uh the
12:06 - only thing we'll need next is a react
12:07 - hook called use memo
12:12 - okay and then that's just gonna come
12:14 - from react itself cool so after that
12:17 - that's all the Imports that we need
12:19 - let's go ahead and set up the provider
12:20 - so we can do that by saying const wallet
12:24 - connection
12:26 - provider is equal to
12:30 - and error function like so
12:33 - okay and then when once you're inside
12:35 - here you can say const endpoint
12:38 - equal to use memo and inside the use
12:42 - memo hook you're going to make an
12:44 - anonymous function like so and you're
12:46 - just going to say something like this
12:48 - it's going to be https
12:52 - colon slash slash API Dot
12:57 - devnet.solana.com and then you're going
13:00 - to put a comma here and put an empty
13:02 - array all right so what is an endpoint
13:03 - an endpoint is what we're using it's an
13:06 - RPC node that's going to help us connect
13:08 - directly to the blockchain so this is
13:11 - helping us connect directly to the
13:13 - devnet of Solana and we're saving it
13:15 - using our use memo hook right so that's
13:18 - our endpoint we should also set up our
13:20 - wallets here so by wallets I mean what
13:23 - wallets are we going to use to connect
13:24 - to our app and we're going to use use
13:27 - memo again
13:31 - uh the only difference with this though
13:32 - is we're going to put this in an array
13:34 - and I say new
13:37 - Phantom wallet adapter right a new
13:39 - instance of phantom wallet if you guys
13:41 - have any other wallets you want to use
13:43 - you would basically add them to this
13:45 - array like so
13:47 - okay
13:49 - after that we're gonna return here
13:52 - and this is going to return a couple
13:53 - different things so it's going to return
13:55 - our connection provider
13:58 - so we set it up like that it's going to
14:00 - have our wallet provider inside of that
14:04 - okay and then within that we have our
14:07 - wallet oops wallet modal provider okay
14:12 - and inside that wallet motor provider
14:15 - it's going to take in children right and
14:18 - this is not going to make sense because
14:19 - we have to go up here and also pass in
14:22 - children
14:24 - let's go up here and also pass in
14:26 - children so once that's done make sure
14:29 - you actually export this so export
14:32 - default wallet connection provider and
14:34 - the reason we're gonna do that is
14:35 - because we're going to import it in our
14:38 - app.js
14:39 - so what we want to do now is to do
14:42 - control b or command B and head over to
14:45 - our app.js
14:46 - and we're already importing Dynamic but
14:48 - we're going to use this to get our
14:50 - wallet connection provider so we say
14:52 - wallet connection provider
14:54 - and we're going to say equals dynamic
14:58 - and we're going to import it by doing
15:00 - something like this
15:02 - say import
15:04 - comma here quotes dot dot forward slash
15:07 - uh context and then wallet connection
15:11 - provider right and then from there comma
15:16 - exclamation point next match my curly
15:18 - braces is what I mean and say SSR to
15:21 - false okay and then a comma and after
15:24 - that hit save and what we want to do
15:28 - is make sure that our component here is
15:31 - wrapped with that wallet connection so
15:33 - we can say while the connection provider
15:36 - and copy this or cut it and just move it
15:39 - up
15:40 - to here
15:42 - save
15:43 - and I'm just going to erase this to make
15:44 - space and boom that's it we set up the
15:47 - connection right now that the wallet is
15:49 - connected our our endpoint is in there
15:52 - there is one more thing that we're
15:55 - missing I think
15:56 - I got to go back to the wall connection
15:58 - provider and we need to provide the
16:00 - endpoint and the wallet so this that's
16:02 - why this is grayed out so head back to
16:04 - your wallet connection provider and go
16:05 - inside your connection provider
16:08 - and we're going to pass in a prop and
16:10 - the prop is going to be called endpoint
16:12 - right because it's going to inspect an
16:14 - end point
16:15 - and we just pass in our variable like so
16:18 - and for the wallet provider itself it's
16:21 - going to expect some wallets
16:23 - pass in that variable that matches as
16:26 - well and another thing I like to add is
16:27 - something called auto connect so if
16:29 - you're already logged into your Phantom
16:31 - wallet and you load the page you will
16:34 - already connect that wallet that is
16:36 - logged in
16:38 - so
16:39 - cool so it's really cool that it does
16:41 - that for you but when you look back at
16:43 - the app you're not going to notice any
16:45 - significant change because we didn't
16:47 - even set up this button so let's go
16:48 - ahead and do that
16:49 - so going back to what component guys
16:51 - three two one what did you say if you
16:55 - said nav menu you are correct so I'm
16:58 - going to press command B and notice line
17:01 - three we're importing the wallet multi
17:03 - button so let's go ahead and do that so
17:06 - I'm going to erase this and I'm going to
17:07 - say wallet multi button like so hit save
17:11 - and Bam there it is so if our connection
17:15 - is correct I can click select wallet
17:17 - there's our wallet modal click Phantom
17:20 - and boom didn't connect there you go
17:22 - connect
17:24 - you can even disconnect
17:25 - and click that and boom
17:28 - cool
17:31 - so cool it's connected now and if you
17:33 - notice it kind of stands out and usually
17:35 - I kind of leave it like this but today
17:38 - let's just style it so that it matches
17:41 - the rest of our
17:43 - um nav menu
17:44 - so let's go ahead and go back to here if
17:47 - you guys want to know how to style it go
17:49 - to nav menu and what we could do is this
17:52 - we cannot make this self-closing we can
17:54 - make this like this
17:56 - and we can give this a class name and
17:58 - I'll just call it Phantom button and in
18:02 - there we can also put a start icon okay
18:05 - so if you give this a start icon we can
18:08 - use our
18:12 - user icon Circle right so that is that
18:15 - symbol with the person inside of it that
18:18 - you saw earlier we're going to use that
18:19 - right here we can say
18:21 - user Circle icon right and give this a
18:24 - style right so the styling is
18:25 - technically all here
18:27 - and you can say that the height is let's
18:30 - say 24 and the width is also 24 and the
18:36 - color I have it for you guys the color
18:38 - is going to be quote
18:41 - um
18:41 - hashtag or number sign one five e c 3 C
18:47 - like so
18:49 - after that
18:50 - uh go outside these two curly brackets
18:54 - and then we can put the self closing tab
18:57 - right here all right but we're not done
18:58 - yet we can also add a little span here
19:02 - and we wanted to say connect wallet
19:04 - right so we can say connect wallet
19:10 - net wallet and we also want to style
19:12 - that so we'll say class name
19:14 - text is small
19:18 - um the font can be like semi bold send
19:21 - me Bold and the text
19:23 - is going to be that same color we had
19:26 - here so let's get that
19:29 - and place it like so can't forget the
19:31 - hashtag
19:33 - cool so let's hit save
19:36 - and let's see what we got
19:38 - cool the spacing is terrible so
19:40 - something's going on here
19:45 - Phantom wallet
19:49 - text should be connected uh let me see
19:52 - class name font semi bold
19:56 - um it should be somewhere oh I see this
19:58 - shouldn't be an equal sign it should be
20:00 - Dash hey there you go cool it's like
20:03 - those little errors that always get you
20:04 - but that should just be a dash and it
20:06 - should just say connect well yeah I was
20:07 - playing around with this
20:09 - put connect
20:11 - [Music]
20:13 - save Okay cool so now we can disconnect
20:17 - and connect but now you'll notice that
20:19 - when I disconnect my wallet it's hard to
20:21 - tell if we're actually connected or not
20:22 - all right let's connect connect all
20:25 - right that's because we need to make
20:28 - some conditional rendering that if we're
20:30 - connected it just should say our wallet
20:32 - address for example so we could do that
20:34 - by importing it right here
20:37 - you'll notice two things that I'm
20:38 - already importing as a prop connected
20:40 - and public key so where is this coming
20:43 - from if you go back to your index.js go
20:46 - back to nav menu I'm already importing
20:48 - something called connected right but
20:51 - connected is coming from use wallet what
20:54 - that let's use while it lands well I'm
20:55 - glad you asked use wallet is coming from
20:57 - Solana wallet adapter react and
21:00 - basically if we're connected this should
21:02 - be true so that's console log
21:05 - right here and say uh connected comma
21:10 - are we connected so if you see this in
21:12 - our console if it says true where can
21:14 - our wallet is successfully connected if
21:17 - it says false we shouldn't be so let's
21:18 - go here inspect element console
21:22 - false are we connected
21:25 - true we are connected right so
21:27 - disconnect
21:30 - connected there we go
21:32 - so notice how when it says true we are
21:34 - connected when it's false we are not
21:36 - connected all right it's hard to tell
21:38 - because the text isn't changing so what
21:40 - that's why we want to set a condition so
21:42 - if connected is true
21:44 - show me my wallet address if connected
21:47 - is false show me connect wallet
21:51 - alright so we're back at the index page
21:52 - and now that you know how that works we
21:54 - can head over to the nav menu now and
21:57 - once you're in nav menu you can see that
22:00 - we are passing down connected as a prop
22:03 - and if you go to your button
22:07 - like so we can set up some conditional
22:09 - rendering so how do you set up that we
22:12 - can do that by putting curly brackets
22:13 - like so and set up a ternary operator so
22:17 - how do we do that you say connected
22:19 - right question mark
22:22 - you guys know what if statements are you
22:25 - can kind of read it like so so if
22:28 - connected is true
22:30 - all right what do you want to happen
22:34 - if it's true we want to see the public
22:37 - key
22:38 - right uh else else is like this colon
22:42 - right here else
22:44 - right we should see
22:46 - the quotes connect
22:48 - wallet okay so save that
22:53 - okay so connect wallet let's go over
22:55 - here look at that it says public key
22:57 - right why does it say public key because
22:59 - we're freaking connected though so if we
23:01 - go to disconnect it says connect wallet
23:03 - connect public key right
23:06 - now the problem is public key doesn't
23:09 - really show what my wallet address is so
23:11 - how do you know what your wallet address
23:12 - is click on your Phantom icon click on
23:15 - this wallet right here and you can see
23:17 - this top one eight t k z right right
23:21 - here eight tkz that is my public key or
23:25 - as known as my wallet address so
23:29 - how can I display my wallet address well
23:32 - go back to your code go back to index
23:35 - and if you remember
23:37 - if you look at this right here this used
23:39 - wallet hook it also comes with public
23:42 - key if I were to console log that
23:45 - console.log public key
23:48 - this is my key save go back to your app
23:53 - inspect element again
23:56 - you can see that that public key is your
23:59 - public key and do you know why you don't
24:01 - see the 80 that's because it's not a
24:04 - format that we can really read so if you
24:06 - do dot to string like so
24:10 - you're going to see the ATK this is my
24:13 - key all right so we're using public key
24:16 - from use wallet right
24:18 - and that is what we can use to render
24:22 - our key dynamically so how do we make
24:24 - use of this public key pass it down to
24:27 - the component that we want nav menu
24:29 - I sign up prop you can say my key is
24:33 - equal to a public key
24:36 - okay hit save there go to nav menu and
24:40 - we can get uh my key
24:43 - cool and from here
24:47 - instead of saying public key
24:50 - we can do something like this
24:54 - actually no we don't know how to do that
24:55 - we can probably say my key right here my
24:57 - key hit save
25:00 - and
25:01 - ah okay yeah yeah because it has to be a
25:03 - string that to string
25:08 - okay and now look at our new problem
25:10 - there's our key but it's way too long
25:13 - right that's why we need to what we call
25:15 - truncated so let's go ahead and truncate
25:18 - our public key
25:20 - so luckily I made a function that does
25:23 - that for you so if I click this this is
25:26 - a function it's going to take that long
25:28 - string and return a little dot dot dot
25:32 - in between it so it's not insanely long
25:34 - like that look at this all right that's
25:35 - how long your public key really is to
25:38 - truncate it we're going to make use of
25:40 - this function so go back to nav menu to
25:42 - import this function I'm just going to
25:45 - the path getting that function in the
25:47 - stream.js
25:49 - and now let's call truncate so where is
25:51 - it it's right here we can say truncate
25:54 - parentheses and wrap that key in there
25:57 - and Save
25:58 - and look at that more digestible a lot
26:01 - more easy to read it's going to be 8tkz
26:04 - dot dot dot all right
26:06 - so I literally took you step by step how
26:08 - to make this Dynamic disconnect connect
26:11 - wallet boom
26:13 - so that's looking good uh one thing that
26:16 - I want is I want this profile picture
26:18 - right
26:19 - to give me a unique profile picture as
26:22 - well as show my key because this one one
26:24 - one that's not me this is me right so
26:26 - how can I go from this to this right
26:31 - is the same way
26:33 - that we used public keyboard alright so
26:35 - we know let's see let's see what we know
26:37 - all right
26:38 - come with me child we go here we say we
26:41 - know that public key
26:43 - is equal equal to my wallet address
26:46 - right what else do we know
26:49 - [Music]
26:50 - where does this live in my app right
26:54 - where does this 111 exist in
26:57 - it's going to exist in my profile
26:59 - component right so we need to go to go
27:03 - to profile
27:06 - okay those are the two things that we're
27:08 - going to need
27:09 - let's go ahead and think about that so
27:12 - go in your index
27:13 - go let's take a look at our components
27:15 - and we're going to see profile dot Js
27:19 - all right it's a child of index
27:22 - and you can see here that I'm truncating
27:25 - a user address right so whenever you're
27:28 - opening up a new app that's that you
27:30 - didn't make from scratch right
27:32 - be sure to be able to answer all the
27:35 - questions like what is truncate what is
27:38 - user address right if you don't know
27:39 - what user address is we can console
27:41 - login console.log
27:43 - user address
27:44 - what is this save back to the app
27:49 - spec element console
27:52 - all right one one one one what is this
27:54 - so that's what user address is next
27:56 - question guys where does it come from
27:58 - where does user address come from
28:00 - well we know now that we can pass down
28:02 - what we call props so that means we're
28:04 - passing user address as a prop but who
28:08 - was the parent of profile
28:11 - all right I'll give you guys three
28:12 - seconds three two one who is the parent
28:16 - of profile if you look here this is the
28:18 - child the parent is index so go to index
28:22 - find profile and we see that we're
28:25 - passing it down which means it comes
28:27 - from here
28:28 - so let's find where user just is from
28:30 - user address is a state and we set it as
28:34 - one one one one right and if you look at
28:37 - here line 23 we're setting the avatar
28:42 - based on that address right so there's a
28:45 - lot of different things moving here
28:46 - let's break it down right so one the
28:49 - user just comes from this state right
28:51 - here okay
28:52 - but how do we make it so
28:55 - that profile
28:58 - right has the right user address
29:00 - hmm well one thing I could do is instead
29:03 - of passing user address we could pass
29:07 - public key let's see what happens if I
29:08 - do that change user address here to
29:10 - public key hit save
29:12 - let's go back to our app
29:15 - there you go why is it like that because
29:17 - public key
29:19 - is a BN right remember it's not in a
29:21 - format that we can read so if we go to
29:22 - user address
29:24 - we need to do a DOT two string kind of
29:27 - deal
29:29 - okay
29:30 - and also we got to do it here as well
29:31 - not two straight
29:33 - save save
29:34 - and you can't read properties of two
29:37 - strings okay
29:41 - all right so maybe we can pass down to a
29:43 - string beforehand so let's do public
29:45 - key.2 string like this
29:50 - yeah
29:51 - oh I see because it doesn't it doesn't
29:53 - know what public key is
29:55 - all right so when you first load the app
29:57 - we're not connected which means we don't
29:59 - have a public key so if I put a question
30:01 - mark here
30:03 - thanks
30:05 - truncate
30:09 - where are we calling trumpet
30:12 - that might be in the nav menu
30:24 - let's go back a bit
30:28 - let's put this back to user address
30:31 - we might have skipped some steps here
30:36 - all right cool all right let's go back
30:38 - let's go back
30:40 - it doesn't know what public key is just
30:42 - yet because it wasn't connected
30:45 - so what we need to do
30:47 - is set the state of the public key okay
30:52 - so we're gonna do this a different way
30:55 - I think we should set up our hook
30:58 - all right so we're getting the truncate
31:01 - error because it doesn't read public key
31:03 - right away it's trying to
31:06 - truncate a BN or like the
31:09 - the format that it can't really read
31:11 - just yet so what we want to do is let's
31:13 - make it easy for our app to read it and
31:16 - let's start working on our hook so under
31:18 - this hooks folder right here we're just
31:20 - going to say a new file and we're going
31:22 - to call it cash app dot Js
31:25 - awesome so this is a custom hook that
31:28 - we're making to set up all the functions
31:31 - such as the transaction payment creating
31:34 - the transaction and any state variables
31:36 - that we're going to use so
31:38 - the first thing you want to do is set up
31:39 - the hook is import a couple different
31:42 - things
31:44 - so let's do all the Imports right away
31:45 - so I'm going to make your life easy by
31:47 - saying import you state
31:51 - and use effect all this is coming from
31:55 - react
31:57 - from there we also want to get the
32:00 - Avatar URL so if we go back to index we
32:04 - have another function here called get
32:06 - Avatar URL and it's going to generate a
32:09 - random Avatar based on the key which
32:12 - we're passing in all right
32:14 - so we're also going to import that as
32:16 - well
32:17 - import get Avatar URL
32:21 - and you should have this function
32:22 - already built in with the starter files
32:24 - and let's import all the wallet stuff in
32:28 - here actually so we can say import
32:30 - wallet
32:33 - uh adapt Network
32:36 - adapter
32:38 - Network
32:40 - okay and this is going to come from
32:45 - uh at Solana wallet adapter
32:49 - it's not here slash
32:51 - wallet
32:53 - adapter base we want the base one
32:57 - okay
32:58 - cool save that
33:00 - wallet adapter Network called adapter
33:02 - Network okay import uh use connection
33:07 - from the Solana wall adapter and also
33:11 - use a wallet so we can get the public
33:12 - key and the connection as well
33:15 - next we want to import a couple things
33:17 - from Solana web3 so what we want to
33:20 - import is cluster API URL
33:25 - connection
33:27 - key pair
33:29 - you also want to get lamp ports
33:32 - personal don't worry if this doesn't
33:34 - make sense yet we're going to use all
33:36 - these Imports and I'm going to show you
33:38 - what they mean and how we're going to
33:40 - use them we can also get public key
33:42 - Capital One
33:44 - [Music]
33:49 - program
33:50 - one word
33:52 - and transaction cool and this is from
33:57 - Solano web3 like I said
33:59 - which is this right here
34:01 - and we also want to import big number
34:04 - from
34:06 - big number
34:08 - .js which we have in our packages cool
34:12 - so that's saved uh let's go set up our
34:14 - react hook so we can say export const
34:17 - use cash app that's what our name of our
34:20 - Hook is
34:21 - and if you didn't know this is how you
34:22 - can make your own custom one
34:25 - and let's see at the bottom here we can
34:30 - return anything we want so return
34:33 - object and whatever we put in this curly
34:36 - bracket is what we can pull outside to
34:40 - our app right so let's say
34:42 - um
34:43 - we're gonna use the wallet here so if
34:45 - we're going to use use wallet here we
34:47 - can say
34:49 - const connected
34:54 - and
34:55 - public key
34:57 - probably not that one the lowercase one
35:01 - is equal to use wallet
35:05 - right
35:06 - we can pass connected here
35:09 - and public key
35:11 - and we can go to index
35:14 - and we can actually erase this in line
35:16 - 16 right if I save this it's going to
35:18 - break right because public key is not
35:20 - defined and also we don't see the
35:21 - connected thing anymore
35:23 - but if we go down below here and import
35:28 - uh cache app use cash app import
35:31 - use
35:32 - cash app like so from Hook slash cache
35:36 - up and just say const
35:38 - uh connected and public key right here
35:42 - is equal to use Kesha
35:44 - it's fixed right all we did was set it
35:47 - up in our hook and then export it and
35:51 - import it here all right why do we do
35:53 - this because now instead of passing
35:56 - stuff down like I was doing earlier here
35:58 - it's easier to import it wherever we
36:00 - want all right so you can imagine it
36:01 - like so right so this is where our Hook
36:04 - is use
36:06 - Tasha
36:09 - and before I was setting up a public key
36:12 - right here right and if I wanted to use
36:14 - it in the profile I would have to pass
36:16 - it down as a prop
36:18 - right instead I can set a public key
36:21 - here and pass it down anywhere I want
36:24 - just like so and I'll have to pass it
36:26 - down at all
36:27 - okay so that's why we're doing that and
36:29 - when we set up the function it's going
36:31 - to make a lot more sense make our code a
36:32 - lot a lot cleaner
36:34 - so we are setting up connected and
36:37 - public key here let's also set up our
36:41 - Avatar there as well so we can X this
36:44 - out
36:45 - so I just cut that uh use effect and
36:48 - that's actually put it in our cash app
36:50 - hook
36:51 - right here
36:53 - cool so now that that's there we can do
36:56 - stuff like this if we're connected
37:00 - right
37:01 - then we want to set this Avatar all
37:05 - right but now there's going to be an
37:06 - error it's going to say something like
37:07 - set Avatar is undefined so let's go back
37:11 - here yep except Avatar is not defined do
37:13 - you guys know why that is I'm gonna give
37:15 - you three two one pause the video and
37:17 - see if you could fix it
37:19 - all right cool so if you want to know
37:20 - the answer to that let's get back to our
37:22 - index that's because our set Avatar
37:25 - state was defined in index so take that
37:28 - out of there and put it into
37:32 - your cash app hook save and now Avatar
37:36 - is not defined right
37:38 - and look where it's not defined in is it
37:40 - undefined in our cash up hook or is it
37:43 - undefined index and to find an index so
37:46 - how can we make it defined all right two
37:48 - things we have to do is one
37:51 - bring Avatar back out
37:53 - and said Avatar
37:55 - just in case and go to index and also go
37:58 - to line 21
38:01 - and bring out have it
38:03 - have it all right now it says user
38:05 - address is not defined right in cash app
38:08 - because it has no idea what the hell
38:10 - this is we could do it instead
38:13 - is put in public key look at this let's
38:15 - put in public key instead which is our
38:17 - wallet
38:19 - hey that's our custom avatar based on
38:22 - our public key which is a t so there it
38:25 - is
38:26 - okay but now we want to set up this guy
38:29 - right
38:30 - the one I was talking about earlier
38:32 - these
38:33 - okay so how do we go about that well now
38:36 - that it's in our hook
38:38 - right
38:41 - let's also set up user address right
38:43 - because that number is coming from user
38:46 - address so we can take this guy
38:48 - it's a matter of fact we could take this
38:50 - guy
38:52 - save bring him to the cash app hook and
38:57 - put user address here and it might as
39:00 - well put set user address here too
39:04 - let's go back to our index and let's get
39:07 - user address
39:10 - so now we're going back
39:12 - okay
39:14 - cool
39:15 - so I still thinks our user address is
39:17 - one one one and that makes sense because
39:19 - we set it here let's also change the
39:22 - user address so what I'm going to do is
39:23 - actually erase this one here because I
39:25 - don't think we'll need it I don't think
39:26 - we'll need set Avatar either so just put
39:29 - Avatar and user just here for now
39:32 - and for the use effect here if we're
39:34 - connected
39:35 - set the Avatar to my avatar and set the
39:41 - user address
39:42 - to
39:44 - public key and don't forget to dot two
39:47 - strings so that we can read it
39:51 - and also this one as well dot two string
39:53 - and this might actually change our
39:54 - profile picture too by the way
39:56 - hit save
39:58 - and Bam look at that
40:00 - awesome so now we have a dynamic user
40:04 - profile
40:05 - component right what do I mean by
40:07 - Dynamic well if I disconnect this real
40:11 - quick
40:12 - and also
40:14 - change my wallet to wallet number two
40:16 - now you can see it's 4A something
40:18 - if I were to connect my wallet now
40:21 - look at that
40:23 - it's a different user so now anybody can
40:25 - log in and anybody can get their own
40:28 - user so I'm gonna switch to wall one
40:29 - look at that wallet one still has the
40:32 - same profile picture as well there you
40:35 - go
40:36 - and another thing that I forgot to
40:38 - mention the reason why we're not getting
40:39 - any truncate string error right is
40:42 - because
40:43 - when I set my user address with the
40:46 - public key
40:48 - right it's only going to do that if
40:49 - we're connected right so if we're
40:51 - connected public key does exist and we
40:54 - can truncate it otherwise it's like try
40:57 - to truncate a public key that doesn't
40:59 - exist just yet all right that's why I
41:01 - kept getting that error if we do it this
41:03 - way we can ensure it's only going to run
41:05 - when connected and we also want to do
41:08 - this
41:10 - pad connected here so that this will
41:12 - only run once and if connection changes
41:16 - otherwise it's going to keep running if
41:17 - we keep updating so make sure you do
41:20 - that and now let's add the next step so
41:23 - if you're here let's make it so that
41:25 - when we press pay
41:27 - we can actually send some salon right
41:29 - that's the main reason you're here how
41:31 - do we use Solana pay
41:33 - and before we move on I just wanted to
41:35 - give credit to pointer.gg they give an
41:38 - amazing tutorial on how to use Solana
41:41 - pay it is in typescript though so what
41:44 - I'm doing with this video is showing you
41:46 - guys how to use it in JavaScript which
41:49 - is not through it that much different
41:50 - another difference is that we're going
41:52 - to be setting up the transaction on the
41:54 - front end instead of an API route which
41:57 - is more secure so again when you're
42:00 - making this to production on the on the
42:03 - mainnet make sure you turn this and
42:05 - convert it to an API route okay cool
42:08 - with that said going back to the app we
42:11 - want to set up Solana pay inside of our
42:13 - cash app hook so go into your use cash
42:16 - app we imported a lot of the things
42:17 - you're going to be needing already but
42:19 - the first thing that we have to do is uh
42:22 - import a couple things or I mean pull a
42:25 - lot of things from the hooks so one
42:27 - thing that I wanted to pull is const
42:30 - connected
42:31 - oops const connection actually and this
42:35 - one's going to come from use connection
42:39 - all right so that's what we imported
42:40 - earlier right here
42:42 - um another thing that we should set up
42:43 - is any of our states so there's going to
42:46 - be something called a mount so let's do
42:47 - const
42:49 - amount
42:50 - and set amount okay set that equal to
42:55 - use State and usually the amount we can
42:59 - put at zero
43:01 - okay uh coming down to line 13 we have
43:05 - connected we have public key we also
43:07 - want to be able to send a transaction
43:09 - right so usually when we make a
43:12 - transaction Phantom will pop up here and
43:15 - ask us to sign and approve that
43:18 - transaction okay so we're going to send
43:21 - transaction like so
43:22 - cool so let's see is there anything else
43:25 - that we're going to need
43:26 - um another thing that we're going to
43:28 - need is
43:31 - I think that's it I think what's left is
43:33 - we should make that function so I'm
43:35 - going to make that function next
43:39 - so coming down under this use effect
43:41 - let's create uh create a transaction
43:47 - right that's what we want to do
43:49 - to send to our wallet and
43:54 - we can sign him from there okay so first
43:59 - you want to create the transaction that
44:01 - our wallet sends us and to create it we
44:05 - need to make a function so we can make
44:07 - this asynchronous and say async make
44:10 - transaction
44:14 - uh whoops async
44:17 - well actually we can do it like this
44:19 - const
44:21 - make transaction equals async right
44:24 - [Music]
44:26 - function
44:28 - and it's going to take in a couple
44:29 - different things
44:31 - okay it's going to take a few parameters
44:34 - it's going to be from wallet
44:37 - to wallet uh the amount and something
44:41 - that we'll call the reference okay so
44:44 - I'm gonna take in those things
44:46 - and we need to establish the network
44:49 - that we're using so we can say const
44:51 - network is equal to the wallet adapter
44:55 - Network and then you can say dot Dev
44:59 - Okay cool so we're taking this while
45:02 - adapter Network we're saying we're using
45:04 - the devnet right and then we can say
45:06 - cont endpoint
45:08 - here you can use your own RPC endpoint
45:11 - whether that is alchemy quick node
45:13 - inferior but again we're using uh the
45:17 - cluster API URL which is the devnet
45:21 - right the default endpoint that they
45:23 - provide us and we can also set up a
45:25 - connection you can say const connection
45:27 - is equal to new connection and this is
45:30 - capital connection coming from here
45:34 - and set this equal to that end so we're
45:37 - setting up our connection plugging in
45:39 - our endpoint which we're saying that
45:42 - we're using the devnet
45:44 - okay so this goes into this which goes
45:46 - into this okay
45:47 - uh next
45:49 - we want to
45:51 - make a note we can say this is get a
45:53 - resent block hash to include in the
45:57 - transaction
45:59 - okay so how do we do that well we can
46:02 - say const
46:05 - block hash
46:07 - is equal to oh wait
46:11 - connection dot get
46:13 - latest block hash
46:17 - and put finalized all right so we're
46:19 - going to get the last uh block hash
46:21 - that's in transaction
46:23 - and it's going to look for anything that
46:24 - says it's done or finalized okay
46:28 - next let's set up our actual transaction
46:30 - object that we want to send so we say
46:32 - const transaction is equal to how do we
46:35 - make the object
46:37 - new transaction right where is this
46:39 - transaction coming from it's coming from
46:42 - Solana web3 as you can see right here
46:46 - side of that you want to put an object
46:48 - here and basically pass in any
46:51 - properties of this transaction that we
46:53 - want
46:55 - located that's fine we can say recent
46:58 - block hash
47:00 - the block hash right the previous one
47:02 - that we got and we can say the fee payer
47:06 - right why do we care about the fee pair
47:09 - every time you make a transaction there
47:10 - is a small fee that you're going to pay
47:12 - you can think of it like taxes and the
47:14 - one who should pay is the person who uh
47:17 - the buyer or the one sending money right
47:20 - or signing so you can say from wallet
47:23 - Okay so
47:26 - the buyer
47:28 - pays the transaction fee
47:34 - so that's our transaction object and
47:36 - then from here
47:37 - now we can create the instruction right
47:40 - the actual ascending Solana part of this
47:44 - so to create the instruction or the
47:47 - actual payment of Solana transfer we can
47:49 - say const transfer
47:54 - instruction
47:56 - is equal to system
47:59 - program
48:00 - dot transfer okay so this is going to
48:04 - handle the transfer of funds so make it
48:07 - sure you put transfer here parentheses
48:09 - uh curly brackets and then say from
48:13 - public keys right
48:14 - and you're going to figure out where are
48:16 - you sending Solana from and that's going
48:19 - to be this parameter right here from one
48:21 - right so the
48:23 - Solana is going to be coming from me
48:26 - right and the idea is that we send it to
48:30 - whatever user that we put in so another
48:33 - thing here we're gonna put in this lamp
48:34 - ports you don't know what Lan ports are
48:36 - so there is Solana which is Seoul and
48:40 - you can break it down into smaller units
48:42 - called Lamp ports all right uh the best
48:44 - way to think of it is think of dollars
48:45 - and then you can break dollars down to
48:47 - cents all right so lamp ports is your
48:50 - Cent
48:51 - all right so here I set up this Lan
48:53 - ports key here and say the amount right
48:55 - the amount that we pass in so this could
48:57 - be one Solana or two Solana or you want
48:59 - to take that amount
49:00 - and you want to convert it to Seoul
49:03 - right so you can do that by saying
49:04 - multiplied
49:06 - by oops bye
49:09 - parentheses
49:10 - Glam ports per Soul right that's that
49:13 - import from here
49:15 - and you what you want to do with it is
49:17 - dot to number
49:20 - so to format it
49:22 - like so that's your number and then from
49:25 - there we can say to Pub Key
49:27 - like who you're sending it to put to
49:30 - wallet there
49:32 - okay cool
49:34 - all right so two Pub keys to wallet
49:36 - right so remember the type of this
49:38 - should be a public key a PK and this
49:40 - should also be a public key all right so
49:43 - that's the transfer instruction we can
49:45 - make a little comment there so we
49:46 - remember we can say uh create the
49:49 - instruction
49:51 - to send
49:53 - soul from buyer to
49:57 - person
49:59 - from
50:00 - owner to
50:02 - recipient
50:05 - okay
50:07 - cool and now
50:10 - we want to set up the transfer
50:13 - instruction
50:16 - right dot Keys dot push
50:20 - this is for the reference
50:28 - this is basically so that when we query
50:32 - for the reference the transaction is
50:35 - returned okay so what we want to do here
50:37 - to set that up is Pub Key is the
50:39 - reference which is also expecting a type
50:41 - of public key uh is the signer false and
50:45 - is writable should be false as well okay
50:51 - cool and now for the final step
50:53 - transaction dot add and then we put the
50:56 - instruction there
50:59 - okay so go here
51:01 - I'm going to add
51:03 - the instruction to the the transaction
51:07 - and then we just return the transaction
51:10 - okay there is another step to this this
51:12 - is just creating or making the
51:14 - transaction we also have to just you
51:16 - know run the transaction or do the
51:18 - payment
51:19 - okay uh this is actually the function
51:23 - create the function to run the
51:28 - transaction
51:30 - this will be
51:34 - added to be on to the bottom all right
51:38 - so this is the actual
51:40 - function that when you click
51:43 - new and then click pay this function is
51:46 - going to run when we write here and it's
51:48 - going to call the it's going to make a
51:50 - transaction and then process it okay so
51:54 - what we want to do here is similar thing
51:56 - we say const do Trends section we call
52:00 - it that is equal to async function
52:04 - and then inside here
52:07 - we want to pass in this object here and
52:11 - say the amount the receiver
52:14 - and the transaction
52:17 - per
52:20 - right like this is the description like
52:22 - why did you send this transaction it's
52:25 - basically like the payment for cash app
52:26 - project or the or what you put as the
52:29 - reason you're paying this person
52:30 - okay
52:31 - and you can even doesn't even have to be
52:33 - a cash app I want you guys to play with
52:35 - this functionality and make your own
52:36 - store right that's what the pointer.gg
52:38 - is setting up a cookie shop maybe you
52:41 - can play with that set up your own store
52:42 - and let's say you have your own uh I
52:45 - don't know your own shop your own eShop
52:47 - you can accept Solana payments using
52:50 - Solana pay all right so set it up to fit
52:54 - your need all right so we're doing do
52:55 - transaction you can say const
52:58 - from wallet is equal to public key
53:03 - right so from wallet is equal to the
53:06 - public key why is it equal to public key
53:08 - because that's my address who's ever
53:09 - logged in is the from line right next I
53:12 - want to say const to wallet all right so
53:15 - notice how we're setting up the
53:16 - parameters for make transaction like
53:18 - we're defining these things right
53:21 - two wallet is equal to new public key
53:26 - Receiver right because when I pass in
53:28 - like if I visualize this right if I go
53:31 - new and I put in a public key here it's
53:35 - not going to be in the PK format it's
53:37 - going to be in a string so you want to
53:38 - turn that string into a public key so to
53:42 - do that take that string and put it past
53:44 - it in new public key like so
53:46 - you with me okay good I'm glad you
53:49 - answered so now you can say const uh be
53:51 - an amount all right because this amount
53:54 - right here is just a number which is
53:55 - like one five two it's not a big number
53:58 - right but when you go to the make
54:00 - transaction
54:02 - that amount has to be a BN because it's
54:04 - going to be multiplied like so otherwise
54:06 - it's going to say uh you can't multiply
54:08 - by it all right so turn that into a b n
54:10 - by saying new big number
54:16 - uh is amount right and the reason why we
54:18 - didn't do it beforehand is because we're
54:20 - going to use this amount for the
54:21 - transaction details okay so coming down
54:24 - below here let's set up the reference is
54:27 - equal to key pair dot generate and our
54:32 - ref this will generate a random public
54:34 - key
54:36 - for our reference and then we can say
54:38 - const transaction is equal to a weight
54:42 - make transaction so notice how we're
54:44 - calling that function here so we can say
54:47 - oops
54:48 - so we can say make transaction
54:51 - now we can pass in all these variables
54:54 - we can say from wallet we can say to
54:57 - wallet and we can say BN amount right as
55:00 - the amount
55:02 - and reference is reference
55:04 - okay so make sure you take all these and
55:07 - pass it here and then I'll handle all
55:09 - that when it creates it cool
55:12 - uh now let's set up the transaction hash
55:15 - this is optional but I like to make sure
55:17 - that it's confirmed so we can send
55:19 - transaction
55:21 - right
55:22 - transaction and connection right and
55:26 - then we can console log it to get the
55:28 - transaction hash and then you can even
55:30 - look at Soul scan or Soul Explorer to
55:32 - see it from here we need to create eight
55:37 - actually do we need to do this we'll
55:39 - save this uploaded but we do need to
55:41 - create uh the transaction
55:43 - history of
55:45 - and I'll say that for later
55:48 - next thing we have to do is pass it
55:51 - along so let's just test our code right
55:52 - now so we're going to do the the
55:55 - um
55:56 - do transaction
55:59 - Okay cool so we have do transaction
56:01 - which calls
56:04 - make transactions so you don't have to
56:06 - pass down both we can just put do
56:09 - transaction here and go to where we need
56:11 - it so where did I say we need that do
56:13 - transaction we need it in the
56:17 - transaction component so let's go to
56:20 - transaction go to transaction
56:23 - list new transaction to go to new
56:26 - transaction model and if you look
56:28 - there's a button here it says pay and on
56:30 - click it's going to run pay
56:32 - what we can do here is get our cash app
56:35 - hook so we say import use cash app
56:40 - and we need to
56:42 - structure it and get the two transaction
56:47 - equals use cache
56:52 - here pass into transaction
56:58 - and since we're here we need to make an
57:01 - object and then pass in all of these
57:03 - states here the amount the receiver the
57:06 - transaction purpose right
57:09 - so we can do
57:14 - hmm
57:15 - we should also import these states in
57:18 - the use cash app actually so that's what
57:20 - I'm going to do is actually
57:23 - take these out so go ahead and line six
57:26 - through eight cut them go to your use
57:28 - cash app
57:29 - and let's bring them down here right so
57:31 - we already have set amount all right
57:33 - there
57:34 - so bring them out in there bring
57:36 - receiver bring transaction purpose right
57:38 - and let's make sure you take them here
57:41 - so uh Mount uh set amount we have
57:45 - receiver set oops set receiver we have
57:50 - transaction purpose set transaction
57:52 - purpose and save save save we're gonna
57:55 - get that error
57:57 - but we'll get we'll fix it if we bring
58:01 - it out here so we can do
58:02 - amount
58:04 - set amount we can do
58:06 - receiver set
58:09 - receiver you can do oh
58:13 - yeah set receiver exists you can do uh
58:17 - transaction
58:18 - purpose set transaction
58:22 - purpose
58:24 - there you go so now I hit save we're
58:26 - back to get
58:27 - are back together all right so that said
58:32 - now you can pass all those values in
58:34 - amount uh receiver and transaction
58:38 - purpose right so now all we did was just
58:40 - move the states to the cut use cash app
58:42 - we are then taking the change States and
58:46 - running do transaction and let's do it
58:48 - in a weight because I want to make sure
58:50 - that this happens first and then we can
58:53 - clear the state so
58:55 - let's see if this works so the way we
58:57 - can test this is first log into Phantom
59:01 - and take note of how much Solano we have
59:03 - so we only have two Solana in this
59:05 - wallet if I go to wallet number two
59:07 - he has four Solana so
59:09 - I'm going to give one Solana to wallet
59:13 - number two so this should end up with
59:14 - five this should end up with just one so
59:17 - let's go ahead and do that let's go
59:19 - ahead like new
59:21 - change this to one and who are we
59:23 - sending this to we're sending it to well
59:26 - number two so hit copy right here after
59:27 - you make a new wallet hit copy
59:30 - and what's the reason for this well I'm
59:33 - going to say four cookies I'm thinking
59:36 - about cookies right now let's do cookie
59:39 - boom all right let's see if this works
59:41 - let's pay
59:44 - and yes okay so usually if you see this
59:47 - this is our transaction that we created
59:48 - right and it says minus one Soul right
59:51 - if it says it can't calculate the price
59:53 - uh usually there's gonna be something
59:55 - wrong so make sure it gives you the
59:56 - right amount one sole hit approve
60:00 - clears it and it should close this so we
60:03 - need to fix that but let's see if it
60:06 - confirmed let me suspect element
60:10 - cool so we got the transaction hash
60:12 - right here
60:14 - um let's see how much longer we have we
60:16 - have
60:17 - One Soul okay well number two five Souls
60:20 - so it worked let's freaking go so we did
60:23 - notice a couple of things there when we
60:25 - did that
60:26 - uh one the model didn't close right so
60:29 - that means we need to
60:32 - set model open does this exist
60:37 - yes so set
60:39 - model open to false
60:43 - so set that to false and let me just
60:45 - make sure
60:46 - set model open is this okay cool
60:50 - all right so
60:52 - now when we run it it should close but
60:54 - next thing we need to do is it's not
60:56 - saved in our history this is still
60:58 - static transactions how can we make it
61:00 - Dynamic well I'll tell you the answer
61:03 - all right so how do we want to store
61:06 - transactions well we're going to be
61:08 - using something called local storage
61:10 - right we're not using a database we're
61:12 - using our in browsers storage and
61:16 - storing each transaction object in an
61:19 - array of all that and pulling them all
61:21 - right so let's figure out how to set
61:24 - that up the first thing I'm probably
61:26 - going to do is head over to your cash
61:28 - app hook
61:30 - and go ahead and set up the local
61:33 - storage hook that we can use
61:35 - so I'm going to go in between our use
61:37 - effect and our use connection and we can
61:39 - say const use local storage and this is
61:45 - going to take in the storage key that
61:47 - we're going to need
61:49 - and the fall
61:52 - back state right and you can set that
61:56 - equal to something like this okay so
62:00 - again this is our custom use local
62:01 - storage hook and what we could do is say
62:04 - const value
62:07 - and set value is equal to use state
62:12 - okay and if you do Json dot parse right
62:16 - we want to turn this local storage item
62:21 - to a Json so we do that by saying local
62:24 - storage that get item all right so we
62:27 - can get an item from our local storage
62:28 - we want to get an item based on the
62:31 - storage key okay
62:35 - cool so we're getting an item based on
62:37 - the storage key uh then we're going to
62:39 - parse that into a value
62:42 - uh let's see
62:45 - it's fine and we can do a question mark
62:48 - question mark fall back state right so
62:51 - if there isn't anything there we can set
62:55 - it back to a fallback State and we're
62:58 - going to error because this needs to be
63:00 - an equal sign right here
63:02 - and then in that same function we can do
63:05 - a use effect actually and in that use
63:08 - effect
63:09 - you can actually set the item here so we
63:11 - can do something like this and say local
63:14 - storage that set item based on the
63:18 - storage key
63:19 - [Music]
63:21 - Json Dot stringify
63:24 - and placing the value
63:26 - and
63:28 - semicolon here and then we can put the
63:31 - value and storage key like so put the
63:34 - dependency module put value and set
63:36 - value
63:39 - done yet because we need to use use
63:42 - local storage so we could do that by
63:44 - by setting up down here actually I can
63:49 - do it right under here you can say const
63:52 - ant array for transactions right there's
63:55 - gonna be our new transactions and set
63:57 - trend
63:58 - sections is equal to the use local
64:03 - storage
64:05 - right
64:07 - and then for here you can put the key is
64:09 - transactions
64:11 - and the fallback state will be an empty
64:14 - array now the key for this guys is to
64:17 - make sure you're passing down uh
64:19 - transactions here all right there's
64:21 - already a lot of things that we're
64:22 - passing down uh if you want to format it
64:24 - you can even format it like so
64:27 - dupe
64:28 - dude dude
64:31 - this will be faster actually if I do
64:33 - this way
64:34 - set amounts receiver set receiver
64:36 - transaction purpose
64:39 - boom
64:40 - and then you can add
64:42 - transactions and set Trend sections
64:47 - cool so save that and when you go to
64:50 - your index let's get those transactions
64:54 - as well so Trend sections
64:56 - and uh set transactions I don't think we
65:00 - need to set transactions here though but
65:02 - let's actually just erase that uh you're
65:04 - gonna see an error because there's two
65:06 - transactions
65:07 - right
65:09 - and we want to comment this one out
65:14 - and undefined is on iterable
65:17 - okay that's fine
65:20 - see
65:27 - so the error must be in cash app
65:30 - um looking in here const value Json
65:34 - parse that's fine
65:37 - it should be iterable if we return it so
65:39 - let's make sure we turn that array with
65:40 - value and set
65:42 - value save
65:44 - hey there we go so we see no
65:46 - transactions because there is none right
65:48 - how can I prove it to you well if you go
65:51 - to your index let's actually console log
65:56 - transactions here
65:59 - oh we should probably say here it is
66:02 - save
66:09 - yep array zero right if you're getting
66:11 - error at this point you can just say
66:13 - something like local storage
66:17 - dot clear parentheses and hit enter Make
66:20 - sure you do that because if you're
66:22 - getting any errors it's because it's
66:23 - trying to read something in local
66:24 - storage that doesn't fit the format so I
66:28 - had that error before so make sure you
66:29 - clear it so you should see nothing here
66:31 - okay and uh again nothing in the error
66:34 - for the word transactions make sure you
66:37 - comment this one out because this is
66:38 - static
66:39 - cool so we got that there
66:42 - it's already being passed in line 37 for
66:45 - me so that's why it'll automatically
66:48 - render it if there is something there
66:49 - what we need to do next is in our cash
66:52 - app
66:55 - go back to that function do transaction
66:57 - and let's create the transaction history
67:00 - object all right this is actually pretty
67:03 - easy uh we just have to make an object
67:05 - essentially
67:07 - all you have to do is just write
67:09 - constant new ID right because every
67:12 - transaction is going to be a new ID and
67:15 - the new ID will be based on the length
67:17 - of trans
67:19 - actions.length right
67:21 - plus one dot two strings string so
67:25 - it's going to be length of 0 at the
67:27 - beginning plus one the ID is going to be
67:29 - one
67:30 - next time we do this ID is one plus one
67:33 - it's gonna be two all right so from here
67:36 - we can say const new
67:40 - all right so I was saying const new ID
67:42 - is going to be the transactions.length
67:45 - plus one dot two string and now we can
67:48 - create the transaction object so we can
67:50 - do that by saying const new transaction
67:55 - and set that equal to the object
67:59 - so the idea is we create this new object
68:01 - and once we
68:02 - fill in all the parameters or keys for
68:04 - the object add it to that local storage
68:07 - array that we set up so what we need to
68:09 - do is set the key which is ID is going
68:13 - to be new ID all right we set that up
68:15 - earlier then we can do from and that
68:18 - just says like who is this uh
68:20 - transaction from and to store the
68:23 - information we need we need the name
68:25 - which will be public key right because
68:27 - remember public key is whoever is logged
68:29 - in so that's me or you all right next is
68:32 - the handle all right which is usually
68:35 - the dollar sign plus the username but we
68:38 - can just put that as public key now for
68:41 - the Avatar we should have the access to
68:44 - the Avatar because it's we put it up
68:46 - here
68:47 - right so it doesn't know what Avatar is
68:49 - so we can just say habitat
68:52 - and after you add the Avatar uh there's
68:54 - just this fun uh verified attribute you
68:57 - could say it's true are you verified by
68:59 - cash shop uh you could add this it's
69:01 - optional right but I'm just gonna put
69:04 - that there since I set it up and then we
69:06 - can say two
69:07 - right which is also going to equate to
69:10 - an object and this is for the receiver
69:12 - right so uh do we have access to
69:15 - receiver we do all right because
69:17 - remember when you make the transaction
69:20 - you're putting the receiver and we could
69:23 - pass that along here
69:25 - and for the handle
69:27 - all right I like to put this as blank
69:30 - because again it's the dollar sign plus
69:31 - the receiver you can just set it as that
69:33 - uh for the Avatar so by default it's not
69:37 - going to know what the Avatar is but if
69:40 - we call the get Avatar function here we
69:43 - can just give it an avatar all right so
69:45 - if we go back to the app
69:48 - well actually you can't see because
69:49 - there's no transactions but if you
69:50 - remember back here there was
69:54 - um like a profile picture we're going to
69:55 - be able to set that through what we're
69:57 - doing now
69:59 - okay so that said go back to the app
70:03 - and we can put the receiver and let me
70:06 - ask you guys this question what type is
70:09 - this receiver like by type I mean is it
70:11 - a number is it a string right is it a
70:14 - Boolean all right let me give you guys
70:16 - three seconds three two one if you said
70:19 - public key you'd be correct right and
70:21 - the code can't really read like this can
70:24 - get an avatar but it would be better if
70:26 - you turn that to a string first all
70:28 - right so it's an order operations here
70:30 - so this will happen first turn this into
70:31 - a string and then get the Avatar based
70:34 - on the string that this returns does
70:36 - that make sense cool so after that we
70:39 - can do verified and just for fun let's
70:42 - make this false
70:44 - so we got the two
70:45 - the from some other metadata that we
70:48 - need is going to be description all
70:51 - right so description is going to be
70:54 - description
70:57 - all right cool description
70:59 - put a comma here there we go description
71:02 - is going to be the transaction purpose
71:04 - right when you click on the transaction
71:06 - itself you're going to see this Details
71:09 - page that I showed in the demo all right
71:11 - so to get the right format for it we
71:14 - have to set up this object so
71:15 - description is transaction purposes
71:17 - transaction date
71:20 - is new date which is going to be the
71:22 - date today's date
71:24 - status
71:25 - of course it has to say completed
71:30 - um the amount can be the amount right
71:33 - and make sure it's not BN amount because
71:34 - it's going to be a number that it's not
71:37 - going to like
71:38 - uh source is going to be this
71:42 - and for identifier that can also be
71:45 - blank
71:48 - cool again these are like optional
71:50 - properties that if you want to see these
71:52 - details you can add them I'm just going
71:54 - to make it a dash for now
71:56 - cool so we made the object but are we
71:58 - done guys
71:59 - no as you can see this is grayed out
72:01 - which means it's not being used so how
72:03 - the hell are we gonna use this well we
72:06 - can do that by set new
72:10 - transactions right so we need to set up
72:13 - that state here but do we have that
72:15 - state actually
72:16 - we have
72:19 - we do not have a state so let's set that
72:21 - up
72:21 - so you want to get that modal open state
72:24 - so if we go to index I believe let's go
72:26 - to index
72:30 - yes the new transaction model is what I
72:33 - think we need
72:36 - this one's set to false we can actually
72:38 - take this out save
72:41 - and bring this to the cachet
72:46 - the reason why I'm bringing it here
72:48 - is because after we met make the object
72:50 - we should close it
72:53 - so to close it we just say set new
72:56 - transaction modal open to false all
72:59 - right so close the model and the most
73:01 - important part that we're actually here
73:03 - for is the set transactions right this
73:05 - is the coming from the use local storage
73:07 - hook so you do that and it's going to be
73:10 - an array
73:12 - and the new transaction
73:15 - all right so this is the object we just
73:17 - created up here
73:18 - but what you want to do right this is
73:19 - the key thing here is press comma oops
73:22 - comma dot dot dot transactions right
73:26 - this is a neat way using the spread
73:28 - operator to get all the array items in
73:32 - transactions and it's going to add this
73:34 - new one right here all right so it's
73:36 - quite a clever way using the spread
73:38 - operator
73:39 - awesome so save that there and uh are we
73:43 - oh yeah we already passed down our do
73:46 - transactions and this return and now it
73:49 - should run so let's test it out I'm
73:51 - going to go back to our app uh yes so
73:54 - this is gonna be undefined because we
73:56 - moved it so let's go here and let's
74:00 - bring it back up set new transaction
74:02 - model open
74:05 - okay
74:07 - uh huh oh yeah we need the state itself
74:10 - so that's new
74:13 - transaction model open
74:15 - save
74:17 - and are we bringing it out
74:20 - yep we gotta do that here set new
74:23 - transaction model open and new
74:26 - right here all right now we should be
74:29 - good to go
74:33 - ah
74:34 - transition is used but it's missing a
74:36 - true or false prop okay
74:39 - that means it's not reading the state of
74:42 - true or false which means
74:45 - oh I think I see what I did wrong guys
74:47 - yeah so I added stuff to this use state
74:49 - that shouldn't be there let's
74:51 - take this out oops not the whole thing
74:55 - these two
74:57 - and paste that in here because where
74:59 - these should come from use cash app as
75:02 - you can see so it said save and now
75:06 - all right are we good
75:09 - all right
75:10 - oh that's not what I meant to do
75:14 - oh yeah we should connect our wallet
75:15 - that's the issue here
75:16 - all right cool so no errors all right
75:19 - everything's all and nice
75:22 - D and D I'm just checking okay cool
75:26 - all right so now let's see if it works
75:28 - I'm going to do new and let's take a
75:30 - phantom wallet check
75:33 - all right we are down to how many Solana
75:36 - we are down to our last Solana all right
75:38 - so let's go ahead and pick new we're
75:40 - going to donate One Soul we are going to
75:43 - send this to wallet number two
75:46 - I'm gonna pay him off copy
75:49 - and we're gonna say
75:51 - for cookies all right I think that's
75:53 - what we did last time
75:55 - and let's do that
75:58 - and so now this should save in our
75:59 - transactions component right here
76:01 - because we're saving to local storage
76:02 - let's hit pay
76:08 - it's okay remember what I said this is a
76:09 - good sign if you actually can sign it
76:11 - hit approve
76:14 - oh
76:20 - uncut and promise
76:23 - true
76:26 - hmm
76:28 - oh there it is okay let's do a quick
76:30 - refresh it saved it to local storage
76:33 - amazing
76:35 - look at that so it's pretty much done
76:37 - there is a bonus feature uh if you look
76:40 - at the pointer.gg or if you just think
76:42 - about cash app in general when you click
76:44 - on your profile picture you get this
76:45 - nice QR code where you can use your
76:48 - phone to send money right you can do
76:51 - that with cash app if you just scan the
76:52 - QR code right and there's this
76:54 - functionality here that says load QR
76:56 - code but but it doesn't do anything so
76:58 - let me show you guys how to set up your
77:01 - very own QR code it's pretty simple
77:04 - all right so you want to add a QR code
77:06 - to your app right and the QR code it
77:10 - should be dynamic and what I mean by
77:11 - Dynamic is based on your public key it
77:15 - should make a QR code that automatically
77:17 - goes to this specific address right so
77:19 - let's think about how this works if I
77:21 - click my profile picture right here
77:24 - all right just to illustrate here it
77:26 - should load up this modal right so how
77:28 - the hell do we find that all right so
77:31 - oops I'm still in my draw tool
77:34 - so how can we go about finding this well
77:36 - if I go to my vs code that's probably
77:40 - going to be in my profile right so
77:43 - notice how it says set mode open set
77:46 - transaction QR model right that's where
77:48 - we need to go so you want press Ctrl or
77:50 - command and click profile and it should
77:52 - take you to that component quick little
77:54 - hack
77:55 - now once you're here let's take a look
77:57 - we're in profile
78:00 - and in on profile open it's going to set
78:03 - the model open to True right which means
78:07 - if you go to your components go to your
78:10 - transaction folder here and click on
78:12 - transaction QR modal so this is where we
78:15 - want to be loading everything
78:18 - the first thing that I'm thinking about
78:19 - is that we should create a state that
78:21 - says if the QR code is there or not
78:23 - right so basically a flag so what I'm
78:26 - thinking is go back to your index and
78:27 - you could put this in your cash out book
78:29 - but for simplicity's sake let's put it
78:31 - in our index
78:32 - and all you have to do is write const
78:35 - oops make the state const q r
78:39 - QR code
78:41 - and put set QR code right
78:45 - and it's kind of misleading but the name
78:47 - basically is going to be either true or
78:49 - false right
78:50 - and the key is when you pass it along to
78:53 - the transaction QR model
78:57 - okay
79:01 - so when I go over here you can say QR
79:03 - code
79:04 - is equal to
79:07 - or rather set QR code so let me fix that
79:10 - set QR code is equal to set
79:14 - QR code and these don't have to be the
79:17 - same name but I'm going to make it the
79:19 - same name so it's not confusing so this
79:21 - prop's name is taking this function okay
79:25 - so then we can go back here we can
79:27 - import set QR code
79:33 - at this one
79:35 - that we actually want
79:37 - this one transaction QR modal then we
79:40 - pass that in there
79:42 - all right and we want to set the state
79:43 - to true to re-render the component with
79:46 - the generated QR code so what's the
79:48 - process uh
79:50 - we need to generate the QR code
79:56 - based on public key right remember
79:59 - public key in this sense is our key the
80:01 - user log that's logged in then right set
80:05 - the state to true to rerun the component
80:07 - with the generated QR code right because
80:08 - this this isn't going to update on a Mac
80:11 - that's why I have a button that's going
80:13 - to re-render it or that's the idea here
80:15 - okay so all we have to do for this
80:18 - is pretty much just say set QR code it's
80:21 - true
80:22 - and once you've done that the question
80:24 - is now
80:25 - how the hell do we generate a QR code
80:29 - um if you get lost at any point there is
80:31 - documentation on this done by pointer.gg
80:35 - so shout outs to them
80:37 - um if you go to I believe
80:40 - Solana Bay salompe point of sale page
80:45 - scroll down to about here we want to
80:48 - generate this kind of QR code that we
80:50 - can use our phone to scan and then send
80:52 - money directly right so
80:55 - uh the code is similar to this but
80:58 - remember this is in typescript I'm going
81:00 - to be doing this modified version in
81:02 - JavaScript
81:04 - so again quick reminder this is done
81:06 - through the front end you can generate
81:08 - transactions through an API route that's
81:10 - way more secure because remember the
81:11 - client can modify data and you don't
81:13 - want that when you're dealing with your
81:15 - real money so
81:17 - that's my little disclaimer but back to
81:19 - the video
81:21 - let's start doing this so the way thing
81:24 - I want to do first is let's set up a use
81:26 - effect right because we want something
81:28 - to run
81:30 - at a certain time
81:32 - okay that's kind of why we think about
81:33 - use effect dude this is going to do
81:36 - something oops
81:37 - do something
81:39 - when the component first loads when it
81:42 - renders or when it gets removed or you
81:44 - can control this with use effect
81:46 - so what do we want to do in this use
81:48 - effect
81:49 - well the idea is to generate
81:52 - QR code
81:53 - okay so let's generate a QR code a
81:57 - couple we're gonna need a couple
81:57 - variables first is const recipient
82:01 - is equal to
82:03 - blank right so who is receiving
82:06 - uh this amount right so let's think
82:09 - about this if I go back to my app
82:12 - this QR code who does it belong to who's
82:15 - going to receive money from me scanning
82:17 - this
82:18 - it should be this user who's logged in
82:21 - right so if that's the case
82:24 - that's the case then the new
82:26 - public key right where am I getting this
82:28 - it's from this the new public key
82:32 - from the user address
82:34 - all right so user address is my public
82:36 - key as a string but now we're turning it
82:39 - back into a public key here
82:41 - right so next is the amount all right
82:44 - Okay so
82:48 - one thing about the amount sorry about
82:50 - that one thing about the amount so the
82:52 - amount has to be a big number
82:56 - so
82:57 - you can make it Dynamic by maybe going
83:00 - back to here and setting up like how
83:02 - much do you want to pay kind of like how
83:04 - this is so you can copy this
83:06 - functionality and apply it here I'll
83:09 - show you guys how to do a static version
83:10 - right every time you scan this QR code
83:12 - you're going to send them one Soul all
83:14 - right and they'll tell you that's not
83:15 - going to surprise you but the const
83:17 - amount is going to be a static amount
83:19 - for now
83:21 - it's gonna be one Soul every time I send
83:24 - money
83:25 - right so do that we need to make it a
83:27 - big number so you can say new big number
83:30 - and you should have big number imported
83:32 - already
83:34 - big number
83:35 - is string one right so if you ever want
83:38 - to change this you want to make the
83:39 - default five right you want to get rich
83:41 - say 10 all right or make it Dynamic
83:43 - later on
83:45 - go ahead and do that
83:46 - next is the reference so we're going to
83:49 - set the reference equal to key pair dot
83:53 - generate
83:54 - Dot Public key right so generate a
83:57 - random key pair as a public key
84:00 - to label as reference then it's the
84:02 - label right so when you run this
84:05 - transaction you'll see a little like
84:06 - notification that says uh
84:10 - why you're sending money right so you
84:13 - can say
84:14 - this is two evil cookies Incorporated
84:16 - that's the example they used right so
84:18 - let's just do that we'll say evil
84:20 - cookies Incorporated
84:24 - and for the message right you can send
84:27 - who's ever clicking on the QR code a
84:30 - nice message right so we can say thanks
84:32 - for your soul
84:36 - let's put cookies because that's been on
84:38 - my mind boom
84:41 - so these are the variables that we're
84:43 - going to pass in to generate that QR
84:45 - code right so one of the first things we
84:47 - need to do is say const URL params is
84:50 - equal to
84:52 - recipient
84:55 - um amount
84:56 - reference
84:58 - label
85:00 - message
85:01 - okay
85:03 - of course that's the url url params that
85:06 - we need to generate the QR code
85:09 - um there's a way to make it so that it
85:11 - doesn't even have to be Seoul you can
85:12 - even use usdc so the guide on pointer.gg
85:15 - also tells you how you can use usdc it's
85:18 - probably going to be usdc address right
85:20 - here
85:21 - so pass that in somewhere here
85:24 - but again we're just using soul for this
85:25 - build so that's the URL params
85:30 - and then from there we're going to say
85:31 - const URL is equal to encode URL
85:36 - parentheses URL params okay
85:41 - and encode URL is coming from Solana pay
85:46 - right so this is the module that's going
85:48 - to help us generate the QR codes we
85:51 - don't have to do everything from scratch
85:52 - or yourself right we're going to utilize
85:55 - all of these functions here
85:58 - here okay so we're going to code our URL
86:00 - params and from here we're going to say
86:02 - cons QR is equal to create QR all right
86:08 - so we're using that create QR function
86:10 - we're going to pass in the URL which we
86:12 - just made we're going to pass in 488
86:16 - comma trans parents right so this is
86:19 - kind of like how do you want the QR to
86:21 - look all right so you can change this
86:23 - for the size and we're gonna make it
86:25 - transparent
86:27 - okay now uh the next part is setting up
86:30 - the ref
86:33 - one thing I'm realizing we're going to
86:35 - need to set up our use ref hook for this
86:39 - all right so if you don't know what use
86:40 - ref Hook is you can think of it like a
86:43 - special function that helps us remember
86:46 - things right let's say we have a box for
86:49 - example and I wanted to remember what I
86:53 - put in this box right use rough hook
86:54 - lets us look into that box so then store
86:56 - things in it and lets us pull things out
86:58 - for it later all right so if that made
87:00 - sense to you what we're going to do next
87:02 - is set up that hook so it should be
87:04 - already imported uh right here
87:07 - and to use it all we have to do
87:10 - is come up to the top here and say
87:14 - const QR ref is equal to use ref all
87:19 - right
87:20 - at this moment we're not technically
87:22 - doing anything yet
87:23 - use rep is going to give us back an
87:25 - object
87:26 - right we need to reference something now
87:29 - so what are we referencing
87:31 - if you look at this div over here
87:34 - every HTML element has a built-in
87:37 - property called ref so it looks like
87:39 - every element has a class name that you
87:41 - could utilize right some have it on
87:43 - click that you can utilize right we can
87:45 - use a ref here and say equal to
87:48 - q r right so this div
87:52 - specific div that's inside the modal is
87:55 - going to host the QR code essential all
87:57 - right think of it like that
87:59 - so this is our box and we're going to
88:02 - store our QR code reference in here does
88:05 - that make sense cool so let's see cons
88:08 - QR ref is equal to use ref okay and the
88:12 - next thing we should probably do is
88:13 - import use connection I think I'm using
88:16 - it right here
88:18 - and we can say const destructure
88:21 - connection
88:23 - connection
88:26 - equals use connection
88:29 - oops like so okay it's going to come
88:31 - into play later
88:33 - uh what do we want to do next
88:38 - Okay cool so let's come back to our
88:40 - function right here Line 39 for me
88:43 - I want to do is
88:45 - if all right we're gonna check that box
88:46 - now qrf
88:48 - dot current all right if there's
88:50 - something in here all right then q r
88:55 - ref dot current dot HTML all right we're
89:00 - directly targeting the HTML of our
89:02 - reference
89:04 - right
89:05 - uh and it should be inner HTML actually
89:07 - inner HTML that makes more sense
89:10 - it's equal to quotes
89:12 - right
89:15 - and we can append something to that QR
89:17 - so QR
89:19 - dot append
89:22 - the QR oops QR ref dot current so
89:26 - essentially putting appending the QR
89:29 - code to our box so that it's going to
89:31 - live in here that's the idea
89:33 - okay
89:35 - could not find create QR
89:39 - oh capital r boom so now it exists so
89:43 - let's hit save any errors on this guy
89:44 - nope still good
89:46 - what happens if I click this
89:49 - black screen okay so we're closer right
89:51 - it shouldn't be uh it shouldn't look
89:53 - like that
89:57 - just want to check something
90:00 - yeah it shouldn't be a black screen
90:01 - which means our parameters might be a
90:03 - little off but this is a good step
90:07 - okay
90:09 - okay just doing some troubleshooting it
90:11 - shouldn't be a black screen
90:15 - you saw that
90:17 - let's look at how it's generating create
90:19 - QR URL size
90:22 - trans
90:24 - apparent guys so if we do transparent
90:31 - it's a load
90:32 - oh I saw it perfect Okay cool so I saw
90:35 - it it worked that's why spelling matters
90:38 - in your app so just try that one more
90:40 - time for safety
90:41 - ah there we go we should see an actual
90:44 - QR code so we're good to go so make sure
90:46 - you spell transparent correctly
90:49 - and now
90:51 - we need to wait for the transaction
90:53 - right wait for the user to send the
90:57 - transaction right so this part isn't
91:01 - um
91:02 - gonna be done on the app itself this is
91:04 - going to be done on your phone or the
91:06 - mobile app that scanned the QR code so
91:08 - we need to be listening for that so
91:10 - constantly making an interval that
91:12 - listens for the user right again not the
91:15 - most ideal way but uh here's a hack we
91:18 - could do const interval is equal to set
91:21 - in triple interval
91:24 - async
91:27 - and inside is async we can call into log
91:30 - and this is optional just to show you
91:31 - waiting for transaction confirmation
91:35 - it's going to appear a couple times
91:37 - right but what we want to wait for and
91:40 - constantly try
91:41 - is seeing if there is a transaction so
91:44 - let's set up a try catch here
91:47 - and if you don't know catch is going to
91:48 - have e and you can have like console.log
91:52 - error
91:57 - okay
91:59 - and we can have more detailed uh catches
92:02 - and I'll show you guys how to do that in
92:03 - just a second
92:05 - and the first thing you want to do is
92:07 - check if there's any transactions for
92:09 - the reference right so to do that we can
92:11 - say
92:12 - try const signature info is equal to 08
92:17 - fine reference
92:21 - connection right so we're passing in
92:24 - the use connection here
92:26 - and we're also using the find reference
92:29 - function
92:31 - right and it's going to take uh the
92:34 - reference itself it's going to see if
92:35 - there's anything with that reference and
92:38 - put an object here and put finality
92:41 - confirmed and that should be a string
92:47 - finality confirmed and I think I spelled
92:49 - that right
92:50 - cool
92:51 - after that this is the part where it's
92:54 - validating
92:55 - so you can even put a consular validated
92:58 - right again optional so to validate the
93:02 - transfer you have to say await validate
93:04 - transfer right that's kind of obvious uh
93:06 - where am I getting this from it's this
93:08 - function right here
93:10 - okay validate transfer
93:13 - and we can pass in everything we passed
93:15 - in before which is the connection that
93:17 - we're using
93:19 - um the signature info dot signature
93:23 - right so this is the actual us saying
93:27 - yeah I confirmed the transaction but now
93:28 - on the front end app on mobile
93:31 - okay
93:32 - and it's gonna take in an object as well
93:36 - so make sure you put a comma here put an
93:38 - object out and say the recipient
93:41 - right the amount
93:44 - and the reference
93:46 - pass in these two things and they all
93:48 - should exist at the top here in our URL
93:50 - params right I'm actually not in our
93:52 - Europe Rams and the variable that we
93:53 - made up here so the recipient the amount
93:56 - and the reference like who is it going
93:57 - to
93:58 - what's the amount and what's the
94:00 - reference
94:01 - okay and from here another comma object
94:04 - commitment
94:08 - confirmed
94:09 - right so this is more validation
94:13 - and parentheses and yeah cool at this
94:16 - point right
94:18 - at this point
94:20 - the transaction is confirmed
94:25 - let's add the transaction
94:29 - to our local storage right because I
94:31 - want to see
94:33 - this local storage
94:35 - um item
94:36 - inside our list of transactions right
94:38 - otherwise we can't really tell unless
94:41 - we're in Mobile
94:42 - so to do that and again if you are
94:44 - curious like how can I make this a live
94:46 - app that's not local storage you would
94:48 - replace the local storage code with
94:51 - writing to a database you can use sanity
94:54 - you can use Firebase right that can
94:56 - store your transactions for you and then
94:58 - pull it okay so feel free to replace
95:00 - that or leave a comment down below if
95:02 - you want to see a full scale like uh
95:04 - shop using Solana pay so let me know if
95:07 - you are interested in that and I can go
95:08 - and put a more in-depth tutorial cool
95:11 - anyways let's set that up so the cool
95:13 - part about you know storing this into
95:15 - local storage is it's exactly the same
95:18 - as this
95:19 - right so if we scroll all the way here
95:23 - this is the exact same
95:26 - so let's copy that let's bring that to
95:29 - transaction QR model and paste it
95:32 - right so what's the difference here
95:34 - um it doesn't know what transactions is
95:37 - so we have to bring that into our app
95:40 - so how do we make it understand what
95:42 - transactions is well luckily we
95:47 - can use cash app right so I can say
95:49 - import
95:51 - use cash app
95:53 - Excel like this and then just bring it
95:56 - in here as you can see
95:57 - const
95:59 - transactions
96:01 - set transactions
96:04 - is equal to use cash app bam so now it
96:07 - should know what it is let's scroll down
96:08 - and modify the code some more
96:11 - all right so it knows what transaction
96:13 - is it doesn't know what public key is
96:15 - right so how can we fix that
96:19 - so one option is to you know get public
96:21 - key from newscast app but there is
96:25 - something we could use right
96:27 - we can use
96:29 - recipient right recipient is already
96:32 - what we need it's already the public key
96:34 - right so it's us recipient is another
96:37 - way of saying user address
96:39 - okay cool
96:42 - but now the Avatar it doesn't know what
96:44 - Avatar is and again solution bring it
96:47 - from use cash app or right we can use
96:50 - the get Avatar URL which is not it here
96:53 - so we can say import git Avatar URL
96:57 - right
96:59 - and we're going to call that function
97:01 - right here
97:03 - get Avatar URL and pass in recipient dot
97:08 - to string all right
97:10 - okay cool and now what about two right
97:15 - this is kind of confusing uh this is who
97:16 - we're sending money to but when you're
97:19 - reading the transactions you're going to
97:20 - see money going to yourself it might be
97:23 - confusing so feel free to switch the
97:25 - recipient with the receiver uh if it
97:28 - makes more sense to you but what I like
97:30 - to do is I'll make this the reference
97:32 - right which is also public key so it's
97:34 - going to show a different person
97:37 - right because the reference is
97:39 - referencing the transaction it makes
97:41 - sense
97:41 - so from here we can say
97:43 - um
97:45 - the reference
97:48 - to string and that's the Avatar
97:50 - generates right completely unique one
97:52 - and not verified cool now the
97:55 - transaction purpose right this one is
97:58 - can become fully customizable but for me
98:01 - to understand how it works I'll say
98:03 - the user
98:05 - sent you Seoul through Phantom app
98:10 - okay
98:12 - cool
98:13 - and now
98:16 - status completed new date Source
98:18 - identifier awesome
98:20 - uh what else
98:23 - this new new set new transaction model
98:26 - open that doesn't exist here either so
98:28 - we're going to use is model open and set
98:31 - model open instead all right so we could
98:34 - do
98:35 - is change this set model open hit save
98:41 - and guess what that should be it
98:45 - all right so as I was saying we want to
98:46 - set model open instead of the set
98:49 - transaction uh set new transaction to
98:52 - false right because this is coming from
98:54 - the parent right here this is the actual
98:57 - QR modal right so on second thought
99:00 - maybe you want to close this after we
99:04 - make sure that the transaction goes
99:05 - through
99:06 - and before you hit save like I just did
99:08 - you want to make sure that you clear the
99:12 - interval as well so let's clear the
99:13 - interval
99:14 - and pass an interval and then you're
99:16 - going to say
99:18 - 500 here and don't forget to return
99:22 - the clear integral
99:26 - otherwise you're gonna get a post error
99:27 - that I might get
99:29 - in just a second
99:31 - and the next thing you want to do is
99:34 - let's set up the catch right so I'm just
99:36 - going to temporarily stop my server
99:37 - because I don't want the interval to run
99:39 - over and over again in case you guys
99:40 - saved
99:41 - so stop the server let's set up a bunch
99:44 - of the catches all right so there's a
99:46 - couple different errors that selling a
99:48 - pay can find for you it's the find
99:50 - reference error and the validate
99:51 - transfer so it's going to help us
99:53 - identify what went wrong so if you just
99:55 - say if
99:57 - e oops e instance of
100:01 - find the reference error then we know
100:03 - that there's no transaction found so we
100:06 - can say no transaction found yet ignore
100:12 - this you can ignore this basically
100:15 - uh the next instance that can happen is
100:17 - if
100:18 - e instance of
100:21 - valid date transfer error
100:24 - you can say the transaction is basically
100:27 - just invalid transaction is invalid so
100:30 - console.error
100:34 - oops for whatever reason the transaction
100:38 - invalid
100:43 - and you can also return after that as
100:46 - well
100:47 - um the next thing we could do is just
100:49 - console.error uh unknown error so this
100:54 - is this is really bad if you see unknown
100:56 - error
100:57 - okay so this is gonna help us debug in
100:59 - case anything goes wrong so I'm going to
101:01 - yarn Dev again
101:03 - and we might have some errors on here so
101:06 - let's just refresh this give it a minute
101:08 - to fix itself
101:12 - okay and while we do that let's go check
101:14 - on our salon
101:16 - Okay so
101:17 - click on Phantom we are working with
101:20 - zero Solana we're basically broke we
101:22 - have point one
101:24 - um we want to do is take it from our
101:26 - mobile app which should have some soul
101:27 - already and let's check our console to
101:30 - see if it's spamming ourselves
101:32 - nope all right this is normal we should
101:34 - see this it stops and then it starts
101:35 - listening waiting for the transaction
101:37 - again okay so let's go ahead open our QR
101:41 - code cool and I'm going to start
101:43 - recording on my phone
101:45 - so make sure you download the Phantom
101:48 - Wallet app on your app store and give
101:50 - yourself some test Solana and you can
101:53 - see from my screen here I have exactly
101:57 - 1.991 sold all right so you want to send
102:00 - that to this wallet so we can go ahead
102:02 - and click on the top right so we're
102:05 - going to do is open up Phantom and check
102:07 - how much cilant we have we are broke we
102:10 - have zero Solana left what we want to do
102:13 - is open up your phone download the
102:15 - Phantom Wallet app from your app store
102:18 - get yourself some Solana and I'm gonna
102:20 - start recording on my phone as well
102:24 - cool so once you're on your phone what
102:27 - you could do is click on your profile
102:29 - picture load QR code oops sorry Let me
102:32 - refresh this real quick
102:35 - load QR code and then on the top right
102:38 - on your phone it's going to open up your
102:40 - camera and scan it so I can see our
102:43 - label is there thanks for your soul
102:45 - um the message which is customizable go
102:48 - ahead and hit send and make sure it says
102:50 - one sold so send
102:55 - you can inspect elements while we do
102:57 - that
102:58 - and we got some unknown error oh boy
103:01 - set transactions is not a function
103:04 - okay so it looks like it went through
103:06 - but we the set transactions is not a
103:10 - function
103:11 - and I think I know why so this is why we
103:13 - test things
103:14 - so I'm going to stop that
103:16 - I'm recording on my phone let's go to
103:18 - our cash app
103:20 - hook
103:22 - and yes that's why set Tran transactions
103:26 - should be here
103:28 - and if we go up here
103:29 - should be
103:33 - set transactions
103:36 - set
103:38 - wow I couldn't believe I spelled it
103:39 - wrong all this time so it said
103:40 - transactions and I think in our QR
103:46 - yeah every single time I wrote
103:48 - transaction it was without the end so
103:49 - that's going to be a problem
103:51 - so we should probably go back to
103:54 - the on pay of the use cash app
104:00 - and go back to here and add that n in
104:02 - there
104:05 - awesome
104:07 - okay
104:09 - so now we can try this again I might
104:11 - need to refund myself because now I have
104:12 - no money in my Solana so let's go ahead
104:15 - and do that okay so I successfully
104:17 - refunded my Solana I went back in the
104:19 - code I fixed the set transactions it
104:21 - should exist now so let's give it a nice
104:23 - refresh
104:24 - let's try this again
104:26 - so looking at my Phantom Extinction how
104:29 - many Salon do I have I should have zero
104:31 - like I said we're broke right so what we
104:34 - want to do next go on your phone and
104:36 - start recording on this
104:39 - okay and again you should have the
104:42 - Phantom app installed from the App Store
104:44 - I have exactly 1.9 soul that I could
104:47 - send myself so let's go ahead and open
104:50 - this guy up load the QR code for
104:52 - ourselves hit console and you can see
104:55 - that's waiting for transactions all
104:57 - right six seven eight cool now on the
105:00 - top right of your phone click on that
105:02 - square scan the QR code and Bam you
105:05 - should see a summary of everything we
105:07 - wrote thanks for your soul cookie emoji
105:09 - and hit send
105:11 - and cross our fingers look at that it
105:15 - said scent and my front and app updated
105:17 - confirmed proceed with evil deeds and
105:20 - now
105:22 - that's it we did it we sent our cash app
105:25 - from our phone to our wallet all right
105:29 - so now if I look at Phantom we should
105:30 - see one Soul here
105:35 - hey we're not bankrupt anymore we have
105:37 - one soul and after a while you can see
105:40 - in our local storage it updated users
105:43 - sent you Soul through Phantom app there
105:45 - we go so we successfully did something
105:47 - through mobile with our front app which
105:49 - is super cool so again drop a like if
105:51 - you liked the video if you want to see
105:53 - more comment down below this is the cash
105:55 - app build peace

Cleaned transcript:

in this video we are making cash app web 3.0 dap with nexjs I'll be showing you how to make your cash app clone work with something called Solana pick if you don't know what solanape is it's a digital payment platform built on the Solana blockchain that you can use to make it so that your frontend app can now send money and Solana to other users and you can feel free to customize this web app and make it your own and add it to your portfolio so without further Ado let's get started alright so here we have the app and as you can see there's a couple transactions on here this one is for NBA tickets as you know two Solana is pretty expensive so maybe that's how much it costs right another transaction series you just sent you Seoul through the Phantom map right we have functionality where we can load a QR code and I can literally scan this with my phone and I can pay through my phone so if you want to set up what's called a point of sale system I'll show you guys how to do that later in the video so stay tuned the main feature though is that you can you know disconnect or connect your wallet you can see all the transactions which are all being being stored in local storage all right so we're going to hit new and then as you can see there is a test here that we could do and we can even put this for like dinner for example right for and you can change your one sold to two syllable we'll do one soul and if I hit pay send one cell hit approve all right and as you can see thinner is there as well and if we look at my Solana wallet I had a 15 Soul now I have 14 and in my other wallet that I sent this to 4A should be five instead of four and if you look it's five so that's pretty simple very simple app for you guys today let's get started all right so you might be asking Lance how do I get started working on this project well we have something super awesome for you guys if you open your terminal so you could do this multiple ways well one way is to open up vs code press Ctrl J and make sure that the path here is the folder that you want so you have to do CD and then your folder name right so whatever your folder name is replace that right here right so this is where I want to put it it's in my projects folder and all you guys have to write is something called npx collaborate programmer okay so this is the latest version currently at the recording of this video but you can always make sure it's the latest if you do npx cloud and programmer at least and if you hit enter go ahead and put your email address which is for me with this and your name and once you do that you'll get access to all of our portfolio projects that you can add to your own portfolio and be sure to customize them and make them your own build something else with them so you don't have to mix on a cash app you can make your own website where users can send different transactions or even set up a store with Solana pay as your point of sale system so I'm going to click install on a cash app enter right and it's going to run some scripts and I'll come back into the video Once that's done and we can get started on fixing and starting the app alright so let's get started so at this point you should have used our CLI tool to get the startup files that you need you can make sure by checking if you are in the CLI starter branch and all you need to do is start is press yarn Dev like I mentioned earlier you don't need to download any packages because if you use our CLI tool it's done for you so what we want to do now is open up your browser and let's head to localhost and start that project because you're going to notice it's going to be a little bit different so let's take a look so you can notice that if you look at the transactions that is static transactions I didn't make those they're just default there we're also not logged in as you can see right here and we can't connect our wallet anyways as well as there's no pay functionality it doesn't work so our job is to show you how to get this app working while teaching you guys about Solana pay so the very first thing that I like to do is start with our wallet connection so as you can see I'm clicking but connect while doesn't work and our wallet of choice today is Phantom wallet of course so log into your Phantom wallet if you already have one if you don't we're going to show you guys how to get Phantom on so skip ahead a little bit in the video if you already have Phantom so what we need to do is head over to Google and you can go on Google Chrome and write Phantom wallet extension okay and once you do you can click this first link here and it's going to say Phantom and just click add to Chrome once you do that you should see the little extension right here on the top right corner click it and create a new wallet you're going to get a set of phrases save that phrase don't share it anybody um also don't show anybody your private Keys as well or else they'll have access to your money right another thing that you're going to need to do is click on your profile and make sure you're on the right setting so click developer settings and change the network to devnet right there's going to be three networks here mainnet test net and devnet we are going to be using the devnet so it's not real Solana so we can play around as much as we like awesome cool so once you have some Solana in your wallet I have two we can go ahead and start our wallet connection all right so by this point you should have the Phantom wallet extension all ready to go and the first thing that we're going to do is set up the connect wallet functionality right so quick question do you know where this button is in my app if you don't know you're gonna have to stick with me and if you do feel free to move on ahead alright so where in my front end folder does that wallet connect button live right you're gonna have to understand how the app works because you never you didn't make this app you don't know how it works so let me show you guys how it works so let's hit go to the browser again and let's head over to zipboard and let's draw out the parent child relationship of my app right so what do I mean by that if you look over here and let me make this box let's say that this represents my entire app yeah so every app component in react has a child what do I mean by that well this app is going to have an index component child all right so index.js how do I know well let's take a look at my vs code so let's go to Pages let's go to app and you can see right there's a head and there's a component in line 15 right here do you guys see that right here component awesome so what is this component if I were to click into it you'd notice that this component is actually the index all right so all this is the index let me zoom in for you guys so you can see that a lot better so let's take this go down press Ctrl B boom all right how's that so this should be a lot more clear now so this is the index right so if I were to do like a side by side let's put this in here and let's put this right here right and let's bring this back so going back to cash up right this is my app so far don't mind that everything is all smushed up but take a look at this guys right if I were to take out this component right here nav menu look what happens I'll calmed it out see and boom we lost all of the items right here right and new this new button went all the way to the top okay what if I took out this transaction list boom no transaction list right this works because inside the index.js are more components right so let's illustrate that now so what did I comment.nav menu so that means oops not that that means here the index.js has a child of the nav menu nav menu right also has a child of transactions right trends all right this is important because if you've never worked in react before or if you've never seen this project before how are you going to find anything or understand anything that I ask you right so if you know this you're in great shape but if you don't keep up with me right so we got nav menu here right there's also transaction QR model and profile so let's add those as well so let's do more arrows do this rectangle another rectangle here and we'll do profile and we'll do the say QR model QR or modal right and these have arrows to point that this is the child of index what else do we got we have action and new transaction model and search bar right let's just not worry about those for now but these are the main ones all right so let's make this full screen again okay cool so this is the profile right here right this is the nav menu this is the transactions okay so if I were to ask you which of these like the profile the nav menu or the transactions which of these components is going to have the connect wallet button and if you said the nav menu you'd be correct so let's take a look at the nav menus let me undo all that go back to RBS code and we can make this full screen as well oops still in the draw tool boom so nav menu you said right so if we look at the nav menu and this is probably giving us an errors don't worry about that for now go to components we'll go to uh yep and then we go to nav menu I mean take a look what's inside we see nav menu here man menu item and we also see button here like what could this button be so if I comment this out hit save let's take a look damn okay so look we lost the connect wall button which only tells me that this is our button all right so we need to add the Phantom connect wallet button right so to do that we're going to have to get the connection first let's set up the connection so to set up the connection the first thing that you're going to have to do is head over to your app.js and once you're here you do know now that this is representing our index.js what we need to do is wrap our index.js with the wallet connection so let's go ahead and set that up so the way I like to set it up is go to walletconnectionprovider.js and that's going to be in the context folder and to set up that connection we're gonna need to import a couple of things let me just zoom in a bit can you see that and we can say import connection provider and a wallet provider so we do connection provider and you're going to see the suggestion here it's going to come from one of our packages Solana wallet adapter react all right so get connection provider and the next thing that we want to get is going to be wallet provider yeah there's actually multiple different ways to set this up right you've seen me do it a couple times by now um this is another way so we can also import the wallet modal provider right and this is coming from Solana wallet adapter react UI right this provider is specifically when I click the connect wall button you're going to see the selection of wallets Solano actually provides you that modal so you don't have to make it from scratch so I'm gonna make sure to import that and once you import that model let's import the wallet that we're going to use and like I mentioned we are using Phantom right so what you want to import specifically is Phantom wallet adapter all right you can get this from I believe it's at Solana wall adapter wallet so this thing right here hit save and once you do that uh the only thing we'll need next is a react hook called use memo okay and then that's just gonna come from react itself cool so after that that's all the Imports that we need let's go ahead and set up the provider so we can do that by saying const wallet connection provider is equal to and error function like so okay and then when once you're inside here you can say const endpoint equal to use memo and inside the use memo hook you're going to make an anonymous function like so and you're just going to say something like this it's going to be https colon slash slash API Dot devnet.solana.com and then you're going to put a comma here and put an empty array all right so what is an endpoint an endpoint is what we're using it's an RPC node that's going to help us connect directly to the blockchain so this is helping us connect directly to the devnet of Solana and we're saving it using our use memo hook right so that's our endpoint we should also set up our wallets here so by wallets I mean what wallets are we going to use to connect to our app and we're going to use use memo again uh the only difference with this though is we're going to put this in an array and I say new Phantom wallet adapter right a new instance of phantom wallet if you guys have any other wallets you want to use you would basically add them to this array like so okay after that we're gonna return here and this is going to return a couple different things so it's going to return our connection provider so we set it up like that it's going to have our wallet provider inside of that okay and then within that we have our wallet oops wallet modal provider okay and inside that wallet motor provider it's going to take in children right and this is not going to make sense because we have to go up here and also pass in children let's go up here and also pass in children so once that's done make sure you actually export this so export default wallet connection provider and the reason we're gonna do that is because we're going to import it in our app.js so what we want to do now is to do control b or command B and head over to our app.js and we're already importing Dynamic but we're going to use this to get our wallet connection provider so we say wallet connection provider and we're going to say equals dynamic and we're going to import it by doing something like this say import comma here quotes dot dot forward slash uh context and then wallet connection provider right and then from there comma exclamation point next match my curly braces is what I mean and say SSR to false okay and then a comma and after that hit save and what we want to do is make sure that our component here is wrapped with that wallet connection so we can say while the connection provider and copy this or cut it and just move it up to here save and I'm just going to erase this to make space and boom that's it we set up the connection right now that the wallet is connected our our endpoint is in there there is one more thing that we're missing I think I got to go back to the wall connection provider and we need to provide the endpoint and the wallet so this that's why this is grayed out so head back to your wallet connection provider and go inside your connection provider and we're going to pass in a prop and the prop is going to be called endpoint right because it's going to inspect an end point and we just pass in our variable like so and for the wallet provider itself it's going to expect some wallets pass in that variable that matches as well and another thing I like to add is something called auto connect so if you're already logged into your Phantom wallet and you load the page you will already connect that wallet that is logged in so cool so it's really cool that it does that for you but when you look back at the app you're not going to notice any significant change because we didn't even set up this button so let's go ahead and do that so going back to what component guys three two one what did you say if you said nav menu you are correct so I'm going to press command B and notice line three we're importing the wallet multi button so let's go ahead and do that so I'm going to erase this and I'm going to say wallet multi button like so hit save and Bam there it is so if our connection is correct I can click select wallet there's our wallet modal click Phantom and boom didn't connect there you go connect you can even disconnect and click that and boom cool so cool it's connected now and if you notice it kind of stands out and usually I kind of leave it like this but today let's just style it so that it matches the rest of our um nav menu so let's go ahead and go back to here if you guys want to know how to style it go to nav menu and what we could do is this we cannot make this selfclosing we can make this like this and we can give this a class name and I'll just call it Phantom button and in there we can also put a start icon okay so if you give this a start icon we can use our user icon Circle right so that is that symbol with the person inside of it that you saw earlier we're going to use that right here we can say user Circle icon right and give this a style right so the styling is technically all here and you can say that the height is let's say 24 and the width is also 24 and the color I have it for you guys the color is going to be quote um hashtag or number sign one five e c 3 C like so after that uh go outside these two curly brackets and then we can put the self closing tab right here all right but we're not done yet we can also add a little span here and we wanted to say connect wallet right so we can say connect wallet net wallet and we also want to style that so we'll say class name text is small um the font can be like semi bold send me Bold and the text is going to be that same color we had here so let's get that and place it like so can't forget the hashtag cool so let's hit save and let's see what we got cool the spacing is terrible so something's going on here Phantom wallet text should be connected uh let me see class name font semi bold um it should be somewhere oh I see this shouldn't be an equal sign it should be Dash hey there you go cool it's like those little errors that always get you but that should just be a dash and it should just say connect well yeah I was playing around with this put connect save Okay cool so now we can disconnect and connect but now you'll notice that when I disconnect my wallet it's hard to tell if we're actually connected or not all right let's connect connect all right that's because we need to make some conditional rendering that if we're connected it just should say our wallet address for example so we could do that by importing it right here you'll notice two things that I'm already importing as a prop connected and public key so where is this coming from if you go back to your index.js go back to nav menu I'm already importing something called connected right but connected is coming from use wallet what that let's use while it lands well I'm glad you asked use wallet is coming from Solana wallet adapter react and basically if we're connected this should be true so that's console log right here and say uh connected comma are we connected so if you see this in our console if it says true where can our wallet is successfully connected if it says false we shouldn't be so let's go here inspect element console false are we connected true we are connected right so disconnect connected there we go so notice how when it says true we are connected when it's false we are not connected all right it's hard to tell because the text isn't changing so what that's why we want to set a condition so if connected is true show me my wallet address if connected is false show me connect wallet alright so we're back at the index page and now that you know how that works we can head over to the nav menu now and once you're in nav menu you can see that we are passing down connected as a prop and if you go to your button like so we can set up some conditional rendering so how do you set up that we can do that by putting curly brackets like so and set up a ternary operator so how do we do that you say connected right question mark you guys know what if statements are you can kind of read it like so so if connected is true all right what do you want to happen if it's true we want to see the public key right uh else else is like this colon right here else right we should see the quotes connect wallet okay so save that okay so connect wallet let's go over here look at that it says public key right why does it say public key because we're freaking connected though so if we go to disconnect it says connect wallet connect public key right now the problem is public key doesn't really show what my wallet address is so how do you know what your wallet address is click on your Phantom icon click on this wallet right here and you can see this top one eight t k z right right here eight tkz that is my public key or as known as my wallet address so how can I display my wallet address well go back to your code go back to index and if you remember if you look at this right here this used wallet hook it also comes with public key if I were to console log that console.log public key this is my key save go back to your app inspect element again you can see that that public key is your public key and do you know why you don't see the 80 that's because it's not a format that we can really read so if you do dot to string like so you're going to see the ATK this is my key all right so we're using public key from use wallet right and that is what we can use to render our key dynamically so how do we make use of this public key pass it down to the component that we want nav menu I sign up prop you can say my key is equal to a public key okay hit save there go to nav menu and we can get uh my key cool and from here instead of saying public key we can do something like this actually no we don't know how to do that we can probably say my key right here my key hit save and ah okay yeah yeah because it has to be a string that to string okay and now look at our new problem there's our key but it's way too long right that's why we need to what we call truncated so let's go ahead and truncate our public key so luckily I made a function that does that for you so if I click this this is a function it's going to take that long string and return a little dot dot dot in between it so it's not insanely long like that look at this all right that's how long your public key really is to truncate it we're going to make use of this function so go back to nav menu to import this function I'm just going to the path getting that function in the stream.js and now let's call truncate so where is it it's right here we can say truncate parentheses and wrap that key in there and Save and look at that more digestible a lot more easy to read it's going to be 8tkz dot dot dot all right so I literally took you step by step how to make this Dynamic disconnect connect wallet boom so that's looking good uh one thing that I want is I want this profile picture right to give me a unique profile picture as well as show my key because this one one one that's not me this is me right so how can I go from this to this right is the same way that we used public keyboard alright so we know let's see let's see what we know all right come with me child we go here we say we know that public key is equal equal to my wallet address right what else do we know where does this live in my app right where does this 111 exist in it's going to exist in my profile component right so we need to go to go to profile okay those are the two things that we're going to need let's go ahead and think about that so go in your index go let's take a look at our components and we're going to see profile dot Js all right it's a child of index and you can see here that I'm truncating a user address right so whenever you're opening up a new app that's that you didn't make from scratch right be sure to be able to answer all the questions like what is truncate what is user address right if you don't know what user address is we can console login console.log user address what is this save back to the app spec element console all right one one one one what is this so that's what user address is next question guys where does it come from where does user address come from well we know now that we can pass down what we call props so that means we're passing user address as a prop but who was the parent of profile all right I'll give you guys three seconds three two one who is the parent of profile if you look here this is the child the parent is index so go to index find profile and we see that we're passing it down which means it comes from here so let's find where user just is from user address is a state and we set it as one one one one right and if you look at here line 23 we're setting the avatar based on that address right so there's a lot of different things moving here let's break it down right so one the user just comes from this state right here okay but how do we make it so that profile right has the right user address hmm well one thing I could do is instead of passing user address we could pass public key let's see what happens if I do that change user address here to public key hit save let's go back to our app there you go why is it like that because public key is a BN right remember it's not in a format that we can read so if we go to user address we need to do a DOT two string kind of deal okay and also we got to do it here as well not two straight save save and you can't read properties of two strings okay all right so maybe we can pass down to a string beforehand so let's do public key.2 string like this yeah oh I see because it doesn't it doesn't know what public key is all right so when you first load the app we're not connected which means we don't have a public key so if I put a question mark here thanks truncate where are we calling trumpet that might be in the nav menu let's go back a bit let's put this back to user address we might have skipped some steps here all right cool all right let's go back let's go back it doesn't know what public key is just yet because it wasn't connected so what we need to do is set the state of the public key okay so we're gonna do this a different way I think we should set up our hook all right so we're getting the truncate error because it doesn't read public key right away it's trying to truncate a BN or like the the format that it can't really read just yet so what we want to do is let's make it easy for our app to read it and let's start working on our hook so under this hooks folder right here we're just going to say a new file and we're going to call it cash app dot Js awesome so this is a custom hook that we're making to set up all the functions such as the transaction payment creating the transaction and any state variables that we're going to use so the first thing you want to do is set up the hook is import a couple different things so let's do all the Imports right away so I'm going to make your life easy by saying import you state and use effect all this is coming from react from there we also want to get the Avatar URL so if we go back to index we have another function here called get Avatar URL and it's going to generate a random Avatar based on the key which we're passing in all right so we're also going to import that as well import get Avatar URL and you should have this function already built in with the starter files and let's import all the wallet stuff in here actually so we can say import wallet uh adapt Network adapter Network okay and this is going to come from uh at Solana wallet adapter it's not here slash wallet adapter base we want the base one okay cool save that wallet adapter Network called adapter Network okay import uh use connection from the Solana wall adapter and also use a wallet so we can get the public key and the connection as well next we want to import a couple things from Solana web3 so what we want to import is cluster API URL connection key pair you also want to get lamp ports personal don't worry if this doesn't make sense yet we're going to use all these Imports and I'm going to show you what they mean and how we're going to use them we can also get public key Capital One program one word and transaction cool and this is from Solano web3 like I said which is this right here and we also want to import big number from big number .js which we have in our packages cool so that's saved uh let's go set up our react hook so we can say export const use cash app that's what our name of our Hook is and if you didn't know this is how you can make your own custom one and let's see at the bottom here we can return anything we want so return object and whatever we put in this curly bracket is what we can pull outside to our app right so let's say um we're gonna use the wallet here so if we're going to use use wallet here we can say const connected and public key probably not that one the lowercase one is equal to use wallet right we can pass connected here and public key and we can go to index and we can actually erase this in line 16 right if I save this it's going to break right because public key is not defined and also we don't see the connected thing anymore but if we go down below here and import uh cache app use cash app import use cash app like so from Hook slash cache up and just say const uh connected and public key right here is equal to use Kesha it's fixed right all we did was set it up in our hook and then export it and import it here all right why do we do this because now instead of passing stuff down like I was doing earlier here it's easier to import it wherever we want all right so you can imagine it like so right so this is where our Hook is use Tasha and before I was setting up a public key right here right and if I wanted to use it in the profile I would have to pass it down as a prop right instead I can set a public key here and pass it down anywhere I want just like so and I'll have to pass it down at all okay so that's why we're doing that and when we set up the function it's going to make a lot more sense make our code a lot a lot cleaner so we are setting up connected and public key here let's also set up our Avatar there as well so we can X this out so I just cut that uh use effect and that's actually put it in our cash app hook right here cool so now that that's there we can do stuff like this if we're connected right then we want to set this Avatar all right but now there's going to be an error it's going to say something like set Avatar is undefined so let's go back here yep except Avatar is not defined do you guys know why that is I'm gonna give you three two one pause the video and see if you could fix it all right cool so if you want to know the answer to that let's get back to our index that's because our set Avatar state was defined in index so take that out of there and put it into your cash app hook save and now Avatar is not defined right and look where it's not defined in is it undefined in our cash up hook or is it undefined index and to find an index so how can we make it defined all right two things we have to do is one bring Avatar back out and said Avatar just in case and go to index and also go to line 21 and bring out have it have it all right now it says user address is not defined right in cash app because it has no idea what the hell this is we could do it instead is put in public key look at this let's put in public key instead which is our wallet hey that's our custom avatar based on our public key which is a t so there it is okay but now we want to set up this guy right the one I was talking about earlier these okay so how do we go about that well now that it's in our hook right let's also set up user address right because that number is coming from user address so we can take this guy it's a matter of fact we could take this guy save bring him to the cash app hook and put user address here and it might as well put set user address here too let's go back to our index and let's get user address so now we're going back okay cool so I still thinks our user address is one one one and that makes sense because we set it here let's also change the user address so what I'm going to do is actually erase this one here because I don't think we'll need it I don't think we'll need set Avatar either so just put Avatar and user just here for now and for the use effect here if we're connected set the Avatar to my avatar and set the user address to public key and don't forget to dot two strings so that we can read it and also this one as well dot two string and this might actually change our profile picture too by the way hit save and Bam look at that awesome so now we have a dynamic user profile component right what do I mean by Dynamic well if I disconnect this real quick and also change my wallet to wallet number two now you can see it's 4A something if I were to connect my wallet now look at that it's a different user so now anybody can log in and anybody can get their own user so I'm gonna switch to wall one look at that wallet one still has the same profile picture as well there you go and another thing that I forgot to mention the reason why we're not getting any truncate string error right is because when I set my user address with the public key right it's only going to do that if we're connected right so if we're connected public key does exist and we can truncate it otherwise it's like try to truncate a public key that doesn't exist just yet all right that's why I kept getting that error if we do it this way we can ensure it's only going to run when connected and we also want to do this pad connected here so that this will only run once and if connection changes otherwise it's going to keep running if we keep updating so make sure you do that and now let's add the next step so if you're here let's make it so that when we press pay we can actually send some salon right that's the main reason you're here how do we use Solana pay and before we move on I just wanted to give credit to pointer.gg they give an amazing tutorial on how to use Solana pay it is in typescript though so what I'm doing with this video is showing you guys how to use it in JavaScript which is not through it that much different another difference is that we're going to be setting up the transaction on the front end instead of an API route which is more secure so again when you're making this to production on the on the mainnet make sure you turn this and convert it to an API route okay cool with that said going back to the app we want to set up Solana pay inside of our cash app hook so go into your use cash app we imported a lot of the things you're going to be needing already but the first thing that we have to do is uh import a couple things or I mean pull a lot of things from the hooks so one thing that I wanted to pull is const connected oops const connection actually and this one's going to come from use connection all right so that's what we imported earlier right here um another thing that we should set up is any of our states so there's going to be something called a mount so let's do const amount and set amount okay set that equal to use State and usually the amount we can put at zero okay uh coming down to line 13 we have connected we have public key we also want to be able to send a transaction right so usually when we make a transaction Phantom will pop up here and ask us to sign and approve that transaction okay so we're going to send transaction like so cool so let's see is there anything else that we're going to need um another thing that we're going to need is I think that's it I think what's left is we should make that function so I'm going to make that function next so coming down under this use effect let's create uh create a transaction right that's what we want to do to send to our wallet and we can sign him from there okay so first you want to create the transaction that our wallet sends us and to create it we need to make a function so we can make this asynchronous and say async make transaction uh whoops async well actually we can do it like this const make transaction equals async right function and it's going to take in a couple different things okay it's going to take a few parameters it's going to be from wallet to wallet uh the amount and something that we'll call the reference okay so I'm gonna take in those things and we need to establish the network that we're using so we can say const network is equal to the wallet adapter Network and then you can say dot Dev Okay cool so we're taking this while adapter Network we're saying we're using the devnet right and then we can say cont endpoint here you can use your own RPC endpoint whether that is alchemy quick node inferior but again we're using uh the cluster API URL which is the devnet right the default endpoint that they provide us and we can also set up a connection you can say const connection is equal to new connection and this is capital connection coming from here and set this equal to that end so we're setting up our connection plugging in our endpoint which we're saying that we're using the devnet okay so this goes into this which goes into this okay uh next we want to make a note we can say this is get a resent block hash to include in the transaction okay so how do we do that well we can say const block hash is equal to oh wait connection dot get latest block hash and put finalized all right so we're going to get the last uh block hash that's in transaction and it's going to look for anything that says it's done or finalized okay next let's set up our actual transaction object that we want to send so we say const transaction is equal to how do we make the object new transaction right where is this transaction coming from it's coming from Solana web3 as you can see right here side of that you want to put an object here and basically pass in any properties of this transaction that we want located that's fine we can say recent block hash the block hash right the previous one that we got and we can say the fee payer right why do we care about the fee pair every time you make a transaction there is a small fee that you're going to pay you can think of it like taxes and the one who should pay is the person who uh the buyer or the one sending money right or signing so you can say from wallet Okay so the buyer pays the transaction fee so that's our transaction object and then from here now we can create the instruction right the actual ascending Solana part of this so to create the instruction or the actual payment of Solana transfer we can say const transfer instruction is equal to system program dot transfer okay so this is going to handle the transfer of funds so make it sure you put transfer here parentheses uh curly brackets and then say from public keys right and you're going to figure out where are you sending Solana from and that's going to be this parameter right here from one right so the Solana is going to be coming from me right and the idea is that we send it to whatever user that we put in so another thing here we're gonna put in this lamp ports you don't know what Lan ports are so there is Solana which is Seoul and you can break it down into smaller units called Lamp ports all right uh the best way to think of it is think of dollars and then you can break dollars down to cents all right so lamp ports is your Cent all right so here I set up this Lan ports key here and say the amount right the amount that we pass in so this could be one Solana or two Solana or you want to take that amount and you want to convert it to Seoul right so you can do that by saying multiplied by oops bye parentheses Glam ports per Soul right that's that import from here and you what you want to do with it is dot to number so to format it like so that's your number and then from there we can say to Pub Key like who you're sending it to put to wallet there okay cool all right so two Pub keys to wallet right so remember the type of this should be a public key a PK and this should also be a public key all right so that's the transfer instruction we can make a little comment there so we remember we can say uh create the instruction to send soul from buyer to person from owner to recipient okay cool and now we want to set up the transfer instruction right dot Keys dot push this is for the reference this is basically so that when we query for the reference the transaction is returned okay so what we want to do here to set that up is Pub Key is the reference which is also expecting a type of public key uh is the signer false and is writable should be false as well okay cool and now for the final step transaction dot add and then we put the instruction there okay so go here I'm going to add the instruction to the the transaction and then we just return the transaction okay there is another step to this this is just creating or making the transaction we also have to just you know run the transaction or do the payment okay uh this is actually the function create the function to run the transaction this will be added to be on to the bottom all right so this is the actual function that when you click new and then click pay this function is going to run when we write here and it's going to call the it's going to make a transaction and then process it okay so what we want to do here is similar thing we say const do Trends section we call it that is equal to async function and then inside here we want to pass in this object here and say the amount the receiver and the transaction per right like this is the description like why did you send this transaction it's basically like the payment for cash app project or the or what you put as the reason you're paying this person okay and you can even doesn't even have to be a cash app I want you guys to play with this functionality and make your own store right that's what the pointer.gg is setting up a cookie shop maybe you can play with that set up your own store and let's say you have your own uh I don't know your own shop your own eShop you can accept Solana payments using Solana pay all right so set it up to fit your need all right so we're doing do transaction you can say const from wallet is equal to public key right so from wallet is equal to the public key why is it equal to public key because that's my address who's ever logged in is the from line right next I want to say const to wallet all right so notice how we're setting up the parameters for make transaction like we're defining these things right two wallet is equal to new public key Receiver right because when I pass in like if I visualize this right if I go new and I put in a public key here it's not going to be in the PK format it's going to be in a string so you want to turn that string into a public key so to do that take that string and put it past it in new public key like so you with me okay good I'm glad you answered so now you can say const uh be an amount all right because this amount right here is just a number which is like one five two it's not a big number right but when you go to the make transaction that amount has to be a BN because it's going to be multiplied like so otherwise it's going to say uh you can't multiply by it all right so turn that into a b n by saying new big number uh is amount right and the reason why we didn't do it beforehand is because we're going to use this amount for the transaction details okay so coming down below here let's set up the reference is equal to key pair dot generate and our ref this will generate a random public key for our reference and then we can say const transaction is equal to a weight make transaction so notice how we're calling that function here so we can say oops so we can say make transaction now we can pass in all these variables we can say from wallet we can say to wallet and we can say BN amount right as the amount and reference is reference okay so make sure you take all these and pass it here and then I'll handle all that when it creates it cool uh now let's set up the transaction hash this is optional but I like to make sure that it's confirmed so we can send transaction right transaction and connection right and then we can console log it to get the transaction hash and then you can even look at Soul scan or Soul Explorer to see it from here we need to create eight actually do we need to do this we'll save this uploaded but we do need to create uh the transaction history of and I'll say that for later next thing we have to do is pass it along so let's just test our code right now so we're going to do the the um do transaction Okay cool so we have do transaction which calls make transactions so you don't have to pass down both we can just put do transaction here and go to where we need it so where did I say we need that do transaction we need it in the transaction component so let's go to transaction go to transaction list new transaction to go to new transaction model and if you look there's a button here it says pay and on click it's going to run pay what we can do here is get our cash app hook so we say import use cash app and we need to structure it and get the two transaction equals use cache here pass into transaction and since we're here we need to make an object and then pass in all of these states here the amount the receiver the transaction purpose right so we can do hmm we should also import these states in the use cash app actually so that's what I'm going to do is actually take these out so go ahead and line six through eight cut them go to your use cash app and let's bring them down here right so we already have set amount all right there so bring them out in there bring receiver bring transaction purpose right and let's make sure you take them here so uh Mount uh set amount we have receiver set oops set receiver we have transaction purpose set transaction purpose and save save save we're gonna get that error but we'll get we'll fix it if we bring it out here so we can do amount set amount we can do receiver set receiver you can do oh yeah set receiver exists you can do uh transaction purpose set transaction purpose there you go so now I hit save we're back to get are back together all right so that said now you can pass all those values in amount uh receiver and transaction purpose right so now all we did was just move the states to the cut use cash app we are then taking the change States and running do transaction and let's do it in a weight because I want to make sure that this happens first and then we can clear the state so let's see if this works so the way we can test this is first log into Phantom and take note of how much Solano we have so we only have two Solana in this wallet if I go to wallet number two he has four Solana so I'm going to give one Solana to wallet number two so this should end up with five this should end up with just one so let's go ahead and do that let's go ahead like new change this to one and who are we sending this to we're sending it to well number two so hit copy right here after you make a new wallet hit copy and what's the reason for this well I'm going to say four cookies I'm thinking about cookies right now let's do cookie boom all right let's see if this works let's pay and yes okay so usually if you see this this is our transaction that we created right and it says minus one Soul right if it says it can't calculate the price uh usually there's gonna be something wrong so make sure it gives you the right amount one sole hit approve clears it and it should close this so we need to fix that but let's see if it confirmed let me suspect element cool so we got the transaction hash right here um let's see how much longer we have we have One Soul okay well number two five Souls so it worked let's freaking go so we did notice a couple of things there when we did that uh one the model didn't close right so that means we need to set model open does this exist yes so set model open to false so set that to false and let me just make sure set model open is this okay cool all right so now when we run it it should close but next thing we need to do is it's not saved in our history this is still static transactions how can we make it Dynamic well I'll tell you the answer all right so how do we want to store transactions well we're going to be using something called local storage right we're not using a database we're using our in browsers storage and storing each transaction object in an array of all that and pulling them all right so let's figure out how to set that up the first thing I'm probably going to do is head over to your cash app hook and go ahead and set up the local storage hook that we can use so I'm going to go in between our use effect and our use connection and we can say const use local storage and this is going to take in the storage key that we're going to need and the fall back state right and you can set that equal to something like this okay so again this is our custom use local storage hook and what we could do is say const value and set value is equal to use state okay and if you do Json dot parse right we want to turn this local storage item to a Json so we do that by saying local storage that get item all right so we can get an item from our local storage we want to get an item based on the storage key okay cool so we're getting an item based on the storage key uh then we're going to parse that into a value uh let's see it's fine and we can do a question mark question mark fall back state right so if there isn't anything there we can set it back to a fallback State and we're going to error because this needs to be an equal sign right here and then in that same function we can do a use effect actually and in that use effect you can actually set the item here so we can do something like this and say local storage that set item based on the storage key Json Dot stringify and placing the value and semicolon here and then we can put the value and storage key like so put the dependency module put value and set value done yet because we need to use use local storage so we could do that by by setting up down here actually I can do it right under here you can say const ant array for transactions right there's gonna be our new transactions and set trend sections is equal to the use local storage right and then for here you can put the key is transactions and the fallback state will be an empty array now the key for this guys is to make sure you're passing down uh transactions here all right there's already a lot of things that we're passing down uh if you want to format it you can even format it like so dupe dude dude this will be faster actually if I do this way set amounts receiver set receiver transaction purpose boom and then you can add transactions and set Trend sections cool so save that and when you go to your index let's get those transactions as well so Trend sections and uh set transactions I don't think we need to set transactions here though but let's actually just erase that uh you're gonna see an error because there's two transactions right and we want to comment this one out and undefined is on iterable okay that's fine see so the error must be in cash app um looking in here const value Json parse that's fine it should be iterable if we return it so let's make sure we turn that array with value and set value save hey there we go so we see no transactions because there is none right how can I prove it to you well if you go to your index let's actually console log transactions here oh we should probably say here it is save yep array zero right if you're getting error at this point you can just say something like local storage dot clear parentheses and hit enter Make sure you do that because if you're getting any errors it's because it's trying to read something in local storage that doesn't fit the format so I had that error before so make sure you clear it so you should see nothing here okay and uh again nothing in the error for the word transactions make sure you comment this one out because this is static cool so we got that there it's already being passed in line 37 for me so that's why it'll automatically render it if there is something there what we need to do next is in our cash app go back to that function do transaction and let's create the transaction history object all right this is actually pretty easy uh we just have to make an object essentially all you have to do is just write constant new ID right because every transaction is going to be a new ID and the new ID will be based on the length of trans actions.length right plus one dot two strings string so it's going to be length of 0 at the beginning plus one the ID is going to be one next time we do this ID is one plus one it's gonna be two all right so from here we can say const new all right so I was saying const new ID is going to be the transactions.length plus one dot two string and now we can create the transaction object so we can do that by saying const new transaction and set that equal to the object so the idea is we create this new object and once we fill in all the parameters or keys for the object add it to that local storage array that we set up so what we need to do is set the key which is ID is going to be new ID all right we set that up earlier then we can do from and that just says like who is this uh transaction from and to store the information we need we need the name which will be public key right because remember public key is whoever is logged in so that's me or you all right next is the handle all right which is usually the dollar sign plus the username but we can just put that as public key now for the Avatar we should have the access to the Avatar because it's we put it up here right so it doesn't know what Avatar is so we can just say habitat and after you add the Avatar uh there's just this fun uh verified attribute you could say it's true are you verified by cash shop uh you could add this it's optional right but I'm just gonna put that there since I set it up and then we can say two right which is also going to equate to an object and this is for the receiver right so uh do we have access to receiver we do all right because remember when you make the transaction you're putting the receiver and we could pass that along here and for the handle all right I like to put this as blank because again it's the dollar sign plus the receiver you can just set it as that uh for the Avatar so by default it's not going to know what the Avatar is but if we call the get Avatar function here we can just give it an avatar all right so if we go back to the app well actually you can't see because there's no transactions but if you remember back here there was um like a profile picture we're going to be able to set that through what we're doing now okay so that said go back to the app and we can put the receiver and let me ask you guys this question what type is this receiver like by type I mean is it a number is it a string right is it a Boolean all right let me give you guys three seconds three two one if you said public key you'd be correct right and the code can't really read like this can get an avatar but it would be better if you turn that to a string first all right so it's an order operations here so this will happen first turn this into a string and then get the Avatar based on the string that this returns does that make sense cool so after that we can do verified and just for fun let's make this false so we got the two the from some other metadata that we need is going to be description all right so description is going to be description all right cool description put a comma here there we go description is going to be the transaction purpose right when you click on the transaction itself you're going to see this Details page that I showed in the demo all right so to get the right format for it we have to set up this object so description is transaction purposes transaction date is new date which is going to be the date today's date status of course it has to say completed um the amount can be the amount right and make sure it's not BN amount because it's going to be a number that it's not going to like uh source is going to be this and for identifier that can also be blank cool again these are like optional properties that if you want to see these details you can add them I'm just going to make it a dash for now cool so we made the object but are we done guys no as you can see this is grayed out which means it's not being used so how the hell are we gonna use this well we can do that by set new transactions right so we need to set up that state here but do we have that state actually we have we do not have a state so let's set that up so you want to get that modal open state so if we go to index I believe let's go to index yes the new transaction model is what I think we need this one's set to false we can actually take this out save and bring this to the cachet the reason why I'm bringing it here is because after we met make the object we should close it so to close it we just say set new transaction modal open to false all right so close the model and the most important part that we're actually here for is the set transactions right this is the coming from the use local storage hook so you do that and it's going to be an array and the new transaction all right so this is the object we just created up here but what you want to do right this is the key thing here is press comma oops comma dot dot dot transactions right this is a neat way using the spread operator to get all the array items in transactions and it's going to add this new one right here all right so it's quite a clever way using the spread operator awesome so save that there and uh are we oh yeah we already passed down our do transactions and this return and now it should run so let's test it out I'm going to go back to our app uh yes so this is gonna be undefined because we moved it so let's go here and let's bring it back up set new transaction model open okay uh huh oh yeah we need the state itself so that's new transaction model open save and are we bringing it out yep we gotta do that here set new transaction model open and new right here all right now we should be good to go ah transition is used but it's missing a true or false prop okay that means it's not reading the state of true or false which means oh I think I see what I did wrong guys yeah so I added stuff to this use state that shouldn't be there let's take this out oops not the whole thing these two and paste that in here because where these should come from use cash app as you can see so it said save and now all right are we good all right oh that's not what I meant to do oh yeah we should connect our wallet that's the issue here all right cool so no errors all right everything's all and nice D and D I'm just checking okay cool all right so now let's see if it works I'm going to do new and let's take a phantom wallet check all right we are down to how many Solana we are down to our last Solana all right so let's go ahead and pick new we're going to donate One Soul we are going to send this to wallet number two I'm gonna pay him off copy and we're gonna say for cookies all right I think that's what we did last time and let's do that and so now this should save in our transactions component right here because we're saving to local storage let's hit pay it's okay remember what I said this is a good sign if you actually can sign it hit approve oh uncut and promise true hmm oh there it is okay let's do a quick refresh it saved it to local storage amazing look at that so it's pretty much done there is a bonus feature uh if you look at the pointer.gg or if you just think about cash app in general when you click on your profile picture you get this nice QR code where you can use your phone to send money right you can do that with cash app if you just scan the QR code right and there's this functionality here that says load QR code but but it doesn't do anything so let me show you guys how to set up your very own QR code it's pretty simple all right so you want to add a QR code to your app right and the QR code it should be dynamic and what I mean by Dynamic is based on your public key it should make a QR code that automatically goes to this specific address right so let's think about how this works if I click my profile picture right here all right just to illustrate here it should load up this modal right so how the hell do we find that all right so oops I'm still in my draw tool so how can we go about finding this well if I go to my vs code that's probably going to be in my profile right so notice how it says set mode open set transaction QR model right that's where we need to go so you want press Ctrl or command and click profile and it should take you to that component quick little hack now once you're here let's take a look we're in profile and in on profile open it's going to set the model open to True right which means if you go to your components go to your transaction folder here and click on transaction QR modal so this is where we want to be loading everything the first thing that I'm thinking about is that we should create a state that says if the QR code is there or not right so basically a flag so what I'm thinking is go back to your index and you could put this in your cash out book but for simplicity's sake let's put it in our index and all you have to do is write const oops make the state const q r QR code and put set QR code right and it's kind of misleading but the name basically is going to be either true or false right and the key is when you pass it along to the transaction QR model okay so when I go over here you can say QR code is equal to or rather set QR code so let me fix that set QR code is equal to set QR code and these don't have to be the same name but I'm going to make it the same name so it's not confusing so this prop's name is taking this function okay so then we can go back here we can import set QR code at this one that we actually want this one transaction QR modal then we pass that in there all right and we want to set the state to true to rerender the component with the generated QR code so what's the process uh we need to generate the QR code based on public key right remember public key in this sense is our key the user log that's logged in then right set the state to true to rerun the component with the generated QR code right because this this isn't going to update on a Mac that's why I have a button that's going to rerender it or that's the idea here okay so all we have to do for this is pretty much just say set QR code it's true and once you've done that the question is now how the hell do we generate a QR code um if you get lost at any point there is documentation on this done by pointer.gg so shout outs to them um if you go to I believe Solana Bay salompe point of sale page scroll down to about here we want to generate this kind of QR code that we can use our phone to scan and then send money directly right so uh the code is similar to this but remember this is in typescript I'm going to be doing this modified version in JavaScript so again quick reminder this is done through the front end you can generate transactions through an API route that's way more secure because remember the client can modify data and you don't want that when you're dealing with your real money so that's my little disclaimer but back to the video let's start doing this so the way thing I want to do first is let's set up a use effect right because we want something to run at a certain time okay that's kind of why we think about use effect dude this is going to do something oops do something when the component first loads when it renders or when it gets removed or you can control this with use effect so what do we want to do in this use effect well the idea is to generate QR code okay so let's generate a QR code a couple we're gonna need a couple variables first is const recipient is equal to blank right so who is receiving uh this amount right so let's think about this if I go back to my app this QR code who does it belong to who's going to receive money from me scanning this it should be this user who's logged in right so if that's the case that's the case then the new public key right where am I getting this it's from this the new public key from the user address all right so user address is my public key as a string but now we're turning it back into a public key here right so next is the amount all right Okay so one thing about the amount sorry about that one thing about the amount so the amount has to be a big number so you can make it Dynamic by maybe going back to here and setting up like how much do you want to pay kind of like how this is so you can copy this functionality and apply it here I'll show you guys how to do a static version right every time you scan this QR code you're going to send them one Soul all right and they'll tell you that's not going to surprise you but the const amount is going to be a static amount for now it's gonna be one Soul every time I send money right so do that we need to make it a big number so you can say new big number and you should have big number imported already big number is string one right so if you ever want to change this you want to make the default five right you want to get rich say 10 all right or make it Dynamic later on go ahead and do that next is the reference so we're going to set the reference equal to key pair dot generate Dot Public key right so generate a random key pair as a public key to label as reference then it's the label right so when you run this transaction you'll see a little like notification that says uh why you're sending money right so you can say this is two evil cookies Incorporated that's the example they used right so let's just do that we'll say evil cookies Incorporated and for the message right you can send who's ever clicking on the QR code a nice message right so we can say thanks for your soul let's put cookies because that's been on my mind boom so these are the variables that we're going to pass in to generate that QR code right so one of the first things we need to do is say const URL params is equal to recipient um amount reference label message okay of course that's the url url params that we need to generate the QR code um there's a way to make it so that it doesn't even have to be Seoul you can even use usdc so the guide on pointer.gg also tells you how you can use usdc it's probably going to be usdc address right here so pass that in somewhere here but again we're just using soul for this build so that's the URL params and then from there we're going to say const URL is equal to encode URL parentheses URL params okay and encode URL is coming from Solana pay right so this is the module that's going to help us generate the QR codes we don't have to do everything from scratch or yourself right we're going to utilize all of these functions here here okay so we're going to code our URL params and from here we're going to say cons QR is equal to create QR all right so we're using that create QR function we're going to pass in the URL which we just made we're going to pass in 488 comma trans parents right so this is kind of like how do you want the QR to look all right so you can change this for the size and we're gonna make it transparent okay now uh the next part is setting up the ref one thing I'm realizing we're going to need to set up our use ref hook for this all right so if you don't know what use ref Hook is you can think of it like a special function that helps us remember things right let's say we have a box for example and I wanted to remember what I put in this box right use rough hook lets us look into that box so then store things in it and lets us pull things out for it later all right so if that made sense to you what we're going to do next is set up that hook so it should be already imported uh right here and to use it all we have to do is come up to the top here and say const QR ref is equal to use ref all right at this moment we're not technically doing anything yet use rep is going to give us back an object right we need to reference something now so what are we referencing if you look at this div over here every HTML element has a builtin property called ref so it looks like every element has a class name that you could utilize right some have it on click that you can utilize right we can use a ref here and say equal to q r right so this div specific div that's inside the modal is going to host the QR code essential all right think of it like that so this is our box and we're going to store our QR code reference in here does that make sense cool so let's see cons QR ref is equal to use ref okay and the next thing we should probably do is import use connection I think I'm using it right here and we can say const destructure connection connection equals use connection oops like so okay it's going to come into play later uh what do we want to do next Okay cool so let's come back to our function right here Line 39 for me I want to do is if all right we're gonna check that box now qrf dot current all right if there's something in here all right then q r ref dot current dot HTML all right we're directly targeting the HTML of our reference right uh and it should be inner HTML actually inner HTML that makes more sense it's equal to quotes right and we can append something to that QR so QR dot append the QR oops QR ref dot current so essentially putting appending the QR code to our box so that it's going to live in here that's the idea okay could not find create QR oh capital r boom so now it exists so let's hit save any errors on this guy nope still good what happens if I click this black screen okay so we're closer right it shouldn't be uh it shouldn't look like that just want to check something yeah it shouldn't be a black screen which means our parameters might be a little off but this is a good step okay okay just doing some troubleshooting it shouldn't be a black screen you saw that let's look at how it's generating create QR URL size trans apparent guys so if we do transparent it's a load oh I saw it perfect Okay cool so I saw it it worked that's why spelling matters in your app so just try that one more time for safety ah there we go we should see an actual QR code so we're good to go so make sure you spell transparent correctly and now we need to wait for the transaction right wait for the user to send the transaction right so this part isn't um gonna be done on the app itself this is going to be done on your phone or the mobile app that scanned the QR code so we need to be listening for that so constantly making an interval that listens for the user right again not the most ideal way but uh here's a hack we could do const interval is equal to set in triple interval async and inside is async we can call into log and this is optional just to show you waiting for transaction confirmation it's going to appear a couple times right but what we want to wait for and constantly try is seeing if there is a transaction so let's set up a try catch here and if you don't know catch is going to have e and you can have like console.log error okay and we can have more detailed uh catches and I'll show you guys how to do that in just a second and the first thing you want to do is check if there's any transactions for the reference right so to do that we can say try const signature info is equal to 08 fine reference connection right so we're passing in the use connection here and we're also using the find reference function right and it's going to take uh the reference itself it's going to see if there's anything with that reference and put an object here and put finality confirmed and that should be a string finality confirmed and I think I spelled that right cool after that this is the part where it's validating so you can even put a consular validated right again optional so to validate the transfer you have to say await validate transfer right that's kind of obvious uh where am I getting this from it's this function right here okay validate transfer and we can pass in everything we passed in before which is the connection that we're using um the signature info dot signature right so this is the actual us saying yeah I confirmed the transaction but now on the front end app on mobile okay and it's gonna take in an object as well so make sure you put a comma here put an object out and say the recipient right the amount and the reference pass in these two things and they all should exist at the top here in our URL params right I'm actually not in our Europe Rams and the variable that we made up here so the recipient the amount and the reference like who is it going to what's the amount and what's the reference okay and from here another comma object commitment confirmed right so this is more validation and parentheses and yeah cool at this point right at this point the transaction is confirmed let's add the transaction to our local storage right because I want to see this local storage um item inside our list of transactions right otherwise we can't really tell unless we're in Mobile so to do that and again if you are curious like how can I make this a live app that's not local storage you would replace the local storage code with writing to a database you can use sanity you can use Firebase right that can store your transactions for you and then pull it okay so feel free to replace that or leave a comment down below if you want to see a full scale like uh shop using Solana pay so let me know if you are interested in that and I can go and put a more indepth tutorial cool anyways let's set that up so the cool part about you know storing this into local storage is it's exactly the same as this right so if we scroll all the way here this is the exact same so let's copy that let's bring that to transaction QR model and paste it right so what's the difference here um it doesn't know what transactions is so we have to bring that into our app so how do we make it understand what transactions is well luckily we can use cash app right so I can say import use cash app Excel like this and then just bring it in here as you can see const transactions set transactions is equal to use cash app bam so now it should know what it is let's scroll down and modify the code some more all right so it knows what transaction is it doesn't know what public key is right so how can we fix that so one option is to you know get public key from newscast app but there is something we could use right we can use recipient right recipient is already what we need it's already the public key right so it's us recipient is another way of saying user address okay cool but now the Avatar it doesn't know what Avatar is and again solution bring it from use cash app or right we can use the get Avatar URL which is not it here so we can say import git Avatar URL right and we're going to call that function right here get Avatar URL and pass in recipient dot to string all right okay cool and now what about two right this is kind of confusing uh this is who we're sending money to but when you're reading the transactions you're going to see money going to yourself it might be confusing so feel free to switch the recipient with the receiver uh if it makes more sense to you but what I like to do is I'll make this the reference right which is also public key so it's going to show a different person right because the reference is referencing the transaction it makes sense so from here we can say um the reference to string and that's the Avatar generates right completely unique one and not verified cool now the transaction purpose right this one is can become fully customizable but for me to understand how it works I'll say the user sent you Seoul through Phantom app okay cool and now status completed new date Source identifier awesome uh what else this new new set new transaction model open that doesn't exist here either so we're going to use is model open and set model open instead all right so we could do is change this set model open hit save and guess what that should be it all right so as I was saying we want to set model open instead of the set transaction uh set new transaction to false right because this is coming from the parent right here this is the actual QR modal right so on second thought maybe you want to close this after we make sure that the transaction goes through and before you hit save like I just did you want to make sure that you clear the interval as well so let's clear the interval and pass an interval and then you're going to say 500 here and don't forget to return the clear integral otherwise you're gonna get a post error that I might get in just a second and the next thing you want to do is let's set up the catch right so I'm just going to temporarily stop my server because I don't want the interval to run over and over again in case you guys saved so stop the server let's set up a bunch of the catches all right so there's a couple different errors that selling a pay can find for you it's the find reference error and the validate transfer so it's going to help us identify what went wrong so if you just say if e oops e instance of find the reference error then we know that there's no transaction found so we can say no transaction found yet ignore this you can ignore this basically uh the next instance that can happen is if e instance of valid date transfer error you can say the transaction is basically just invalid transaction is invalid so console.error oops for whatever reason the transaction invalid and you can also return after that as well um the next thing we could do is just console.error uh unknown error so this is this is really bad if you see unknown error okay so this is gonna help us debug in case anything goes wrong so I'm going to yarn Dev again and we might have some errors on here so let's just refresh this give it a minute to fix itself okay and while we do that let's go check on our salon Okay so click on Phantom we are working with zero Solana we're basically broke we have point one um we want to do is take it from our mobile app which should have some soul already and let's check our console to see if it's spamming ourselves nope all right this is normal we should see this it stops and then it starts listening waiting for the transaction again okay so let's go ahead open our QR code cool and I'm going to start recording on my phone so make sure you download the Phantom Wallet app on your app store and give yourself some test Solana and you can see from my screen here I have exactly 1.991 sold all right so you want to send that to this wallet so we can go ahead and click on the top right so we're going to do is open up Phantom and check how much cilant we have we are broke we have zero Solana left what we want to do is open up your phone download the Phantom Wallet app from your app store get yourself some Solana and I'm gonna start recording on my phone as well cool so once you're on your phone what you could do is click on your profile picture load QR code oops sorry Let me refresh this real quick load QR code and then on the top right on your phone it's going to open up your camera and scan it so I can see our label is there thanks for your soul um the message which is customizable go ahead and hit send and make sure it says one sold so send you can inspect elements while we do that and we got some unknown error oh boy set transactions is not a function okay so it looks like it went through but we the set transactions is not a function and I think I know why so this is why we test things so I'm going to stop that I'm recording on my phone let's go to our cash app hook and yes that's why set Tran transactions should be here and if we go up here should be set transactions set wow I couldn't believe I spelled it wrong all this time so it said transactions and I think in our QR yeah every single time I wrote transaction it was without the end so that's going to be a problem so we should probably go back to the on pay of the use cash app and go back to here and add that n in there awesome okay so now we can try this again I might need to refund myself because now I have no money in my Solana so let's go ahead and do that okay so I successfully refunded my Solana I went back in the code I fixed the set transactions it should exist now so let's give it a nice refresh let's try this again so looking at my Phantom Extinction how many Salon do I have I should have zero like I said we're broke right so what we want to do next go on your phone and start recording on this okay and again you should have the Phantom app installed from the App Store I have exactly 1.9 soul that I could send myself so let's go ahead and open this guy up load the QR code for ourselves hit console and you can see that's waiting for transactions all right six seven eight cool now on the top right of your phone click on that square scan the QR code and Bam you should see a summary of everything we wrote thanks for your soul cookie emoji and hit send and cross our fingers look at that it said scent and my front and app updated confirmed proceed with evil deeds and now that's it we did it we sent our cash app from our phone to our wallet all right so now if I look at Phantom we should see one Soul here hey we're not bankrupt anymore we have one soul and after a while you can see in our local storage it updated users sent you Soul through Phantom app there we go so we successfully did something through mobile with our front app which is super cool so again drop a like if you liked the video if you want to see more comment down below this is the cash app build peace
