With timestamps:

00:00 - what is up guys this is nas and today we
00:02 - will be learning react.js from the
00:04 - beginnings from the fundamentals all
00:05 - right now before we get started i want
00:07 - to say
00:07 - go ahead and help us out and with the
00:10 - youtube algorithm smash that
00:11 - like like button as many times as you
00:13 - possibly can right and
00:14 - it does not hurt anybody it only makes
00:16 - us happier and it makes you happy
00:18 - because you get to smash
00:19 - that like button okay subscribe of
00:21 - course for more videos like this
00:23 - because of course we work hard to put
00:24 - this out for you but other than that
00:27 - let's go ahead and get this party
00:29 - started
00:30 - react js 101 let's get straight into it
00:33 - so
00:34 - what are we going to learn today we're
00:35 - going to learn a few different things
00:37 - part one what is react js okay talking
00:40 - about how
00:41 - it doesn't work what is it made of and
00:44 - how do we use it
00:45 - we're going to talk about how we use
00:47 - react.js
00:48 - to build fast applic applications with
00:51 - components which is probably the most
00:53 - important part of react.js
00:55 - which is components you'll learn here in
00:57 - a second okay we'll talk about
00:58 - why react.js why it's become such a
01:01 - popular framework
01:02 - library right and why you should learn
01:05 - it of course
01:06 - we will talk about how to build html
01:08 - using something called jsx
01:10 - which is very particular to react gs
01:13 - also we'll talk about how to save data
01:15 - so one of the most important things of
01:17 - course
01:17 - is saving data in your application using
01:19 - something called state
01:21 - again a new topic you might know and we
01:23 - will
01:24 - even build your first
01:27 - yes your first react js project let's
01:30 - get into it real quickly all right so
01:33 - let's go
01:34 - let's get started so what is react.js
01:36 - that
01:37 - is the question pretty simple answer it
01:40 - is a
01:40 - javascript library for building user
01:43 - interfaces using declarative code
01:45 - now what i mean by declarative code
01:47 - let's take a look at what i what i'm
01:49 - talking about here
01:50 - check this out so declarative code
01:52 - declarative code is pretty simple where
01:54 - for example
01:55 - where each line right here each line of
01:57 - code
01:58 - declares what each element of the app
02:02 - is right so what i mean by that for
02:04 - example you can see here there's a
02:06 - header component
02:07 - a card items and card total what this
02:09 - says is that this
02:10 - this header declares what the element is
02:14 - about
02:14 - so this means of course it's a header
02:16 - right if i say card items that means
02:19 - it's card items right if the component
02:21 - name is card total for example
02:23 - right to me it makes sense that's the
02:25 - card total which is probably going to be
02:27 - something around here if i'm going to
02:29 - look at the header that's probably going
02:31 - to be
02:31 - the header component here and this is
02:34 - what it means to have declarative
02:36 - code and react.js is about declaring
02:38 - declarative code to create
02:40 - you beautiful user interfaces just like
02:43 - this as you can see all right all right
02:45 - moving on
02:46 - so okay benefits of learning right gs
02:49 - really simple
02:50 - low learning curve reusable components
02:53 - and performance learn this library
02:56 - should not be that hard
02:57 - of course it takes some time but if you
02:59 - put in the work that's all that matters
03:01 - right
03:01 - usable components of course because
03:03 - right this is what allows us to build
03:04 - humongous applications
03:06 - like facebook for example right let's go
03:08 - like i'm going
03:09 - with useful components which is probably
03:11 - the one the most important parts of
03:13 - reactor yes right it describes what does
03:15 - it do
03:16 - it describes a section of the ui
03:19 - and how it should appear and function
03:22 - it's honestly just as simple as that
03:24 - right so for example we'll talk more a
03:26 - little about components later on
03:28 - but a one reasonable component for
03:30 - example let's say
03:32 - this you see how this right here is like
03:35 - the similar compo
03:36 - similar html as this it just has
03:38 - different data
03:39 - well this my friend is a reusable
03:42 - component
03:43 - you can see here in our case the
03:44 - component here will be like for example
03:46 - header right a card items component
03:49 - right here and a card total component
03:51 - right here
03:51 - and we'll learn just how to build them
03:53 - so who uses
03:55 - react.js well facebook for one uses of
03:57 - course they just fully rebuilt the whole
03:59 - application using
04:00 - react.js all right also tesla
04:03 - the whole tesla application which is
04:05 - really cool this whole test application
04:07 - on your mobile device is fully built
04:09 - with something called react native all
04:11 - right
04:11 - netflix even door whole app is using
04:14 - using back gs
04:15 - and there's so many more apps that are
04:16 - currently being built with
04:18 - react right for yes we have number one
04:20 - in terms of popularity
04:21 - you can see google trends react is very
04:24 - much going up
04:25 - right here angular is right here
04:28 - and the view is kind of there as well
04:30 - but react has very much superseded a lot
04:32 - of different frameworks
04:34 - right in terms of work and so many so
04:36 - many more things
04:37 - beautiful all right moving on stack over
04:40 - story right here right here shows
04:42 - us that react is the second framework
04:44 - the most popular framework
04:45 - out there for developers jquery is right
04:47 - here but you know
04:48 - average jquery has been there for a long
04:50 - time awesome moving on
04:51 - let's go ahead currently with react.js
04:53 - guys there's 54
04:55 - 000 jobs on just indeed right here check
04:58 - this out
04:59 - 54. you can see right here in the
05:00 - screenshot it actually says 54
05:02 - 000 jobs which is insane and it's going
05:05 - to keep increasing as this framework
05:07 - gets more popular
05:08 - all right so how do you build fast
05:10 - application using components again this
05:12 - is the pillar the foundation of
05:15 - how react was made right that's a good
05:17 - question
05:18 - so with components what are components
05:20 - well as we talked about really briefly
05:22 - they're reusable ui elements
05:24 - just kind of how you have a header
05:25 - element or some kind of a section on a
05:27 - piece of
05:28 - you know uh some kind of a section on
05:29 - your website that's a reusable element
05:31 - okay
05:31 - right just kind of like this right this
05:33 - an element could be a usable element
05:35 - okay
05:36 - so just basically all it is is it's
05:38 - javascript functions that accept
05:40 - inputs what do i mean by that give me
05:42 - one second i'll explain that
05:43 - right describes how section of the ui
05:45 - should appear and
05:47 - function is how it describes how a
05:49 - section of the ui
05:51 - should appear and function what do i
05:52 - mean by that let's take a look at it
05:55 - well if you think for example let's say
05:57 - we have
05:59 - this awesome right amazon card this is
06:02 - an amazon card
06:03 - page okay amazon cart page right if you
06:06 - think about this
06:07 - what do you see could be a component
06:09 - right kind of think of a component is
06:11 - like
06:11 - a section of a website well if you think
06:13 - about this
06:14 - this could potentially be a section of a
06:16 - website this right here
06:18 - right right this right here could be
06:20 - potentially a section of a website right
06:22 - here
06:24 - even this could potentially be a section
06:25 - of a website right here or even this for
06:27 - example right
06:28 - or this any block that you see can be a
06:32 - component so if we for example keep
06:34 - going right
06:35 - look at this well first we have the
06:36 - header okay
06:38 - then we might have for example the card
06:39 - items that could be a component itself
06:41 - and then that could be the card total
06:44 - and every single section here
06:46 - in every single section here every
06:47 - single component here is almost thick of
06:49 - it as
06:50 - it's they have it it has its own brain
06:52 - and has its own
06:54 - state right has its own brain its own
06:56 - state and has its own
06:58 - view that's the interesting part about
07:00 - it it has its own view
07:02 - right so that's when we said this is why
07:05 - right
07:05 - it's individual individual
07:10 - ui elements right
07:14 - individual ui elements that's what
07:16 - react.js is used for
07:18 - so for example another component you can
07:19 - use is for example a card item component
07:21 - right here
07:22 - right which can be used you can see here
07:25 - i have this one card item
07:27 - but then i'm using multiple places so
07:29 - that's the really cool part about react
07:31 - is
07:32 - you can simply just have one component
07:34 - and they can be reused in multiple
07:35 - places now in our case let's take a look
07:37 - at how it's actually
07:38 - being coded up so if we have this amazon
07:42 - card right here okay
07:44 - well let's think about this we could
07:46 - have for example
07:47 - a header a card items and a card total
07:50 - right and this maps to what well this
07:52 - maps to a few different things right
07:53 - it maps to header maps to of course this
07:55 - header component
07:57 - card items maps to what to this
07:59 - component
08:00 - and the card total maps to this
08:02 - component right
08:03 - and they're simply there it's only html
08:05 - blocks okay
08:07 - now what might happen is you have you
08:08 - can have components within components so
08:10 - for example this card items component
08:12 - right
08:13 - which is this one right here right it
08:15 - might have for example
08:16 - individual card item component which is
08:21 - this one right here right now of course
08:23 - here don't
08:24 - don't worry about all this stuff this is
08:26 - very confusing it's a loop
08:27 - it's looping through an array and all
08:30 - that's going on
08:30 - is basically it's showing the different
08:32 - components so these components
08:34 - in terms of html are the same it's just
08:36 - that we are passing in different data
08:38 - for example this image right here
08:40 - is different and the title here is
08:41 - different as well right that's what
08:43 - that's what's being different with that
08:44 - now let's do a test run here so check
08:46 - this out let's draw the components for a
08:48 - facebook
08:49 - web app okay so let's take a look at
08:50 - this if we have here
08:53 - okay a facebook web app what could be a
08:54 - component well if we know
08:56 - well one thing we know for example is
08:58 - that this could be a component the
09:00 - header could be in component this is the
09:01 - current facebook web app
09:03 - this could be a component right here
09:05 - right it's again anything you see
09:06 - as a block this could be a component
09:08 - right here as well
09:10 - right what else could be a component
09:12 - well this could be a component
09:14 - right right this could also be a
09:16 - component
09:18 - this could be a component this could be
09:20 - a component
09:21 - right this could and this could be
09:23 - component everything you see that's like
09:25 - a block
09:26 - can basically be it's a component and
09:28 - that's what we said
09:29 - react.js is all about basically what
09:34 - ui
09:36 - elements right
09:41 - right that's what react.js is about all
09:43 - right let's go ahead and move on really
09:45 - quickly
09:46 - what else do we have well so let's go
09:48 - ahead and actually build your
09:49 - first component check check this out all
09:51 - right
09:53 - here's our first component we have well
09:55 - it's pretty simple
09:56 - it's basically we have our components a
09:58 - function
09:59 - right and it's important some react
10:01 - right here and we have
10:03 - a div class name app and we are simply
10:06 - saying an h1
10:06 - with a hello there it's as simple as
10:09 - that
10:09 - so if we go ahead and take a look at
10:11 - this right what's going to happen
10:13 - here is our react.js application in
10:15 - stack but which is something i highly
10:16 - recommend you check it out stackput's a
10:18 - very easy way for us to create
10:19 - a react just application it's very
10:21 - simple right this is an
10:23 - this is the whole component right here
10:25 - it's called the app component
10:26 - and whatever i change in here let's say
10:28 - for example hello there
10:30 - nazari my name right that's going to
10:32 - directly translate to what we see on the
10:34 - right hand side
10:35 - right it's as simple as that now how
10:37 - does this work well you can see that
10:38 - react what happens is
10:40 - it reacts to something called the
10:42 - react.reactdom.render what that does is
10:45 - we have this render function right and
10:48 - their vendor function takes in the app
10:49 - component which comes in from here right
10:52 - we're importing app
10:53 - from app which is of course right here
10:56 - okay
10:57 - and where we're putting that app html
10:59 - while we're putting that where
11:01 - we are putting that inside the document
11:02 - that given by the
11:04 - root where is it coming from check this
11:06 - out
11:07 - if i go to public in this html look at
11:10 - this
11:11 - div id root so it actually looks at the
11:14 - html and says hey
11:15 - where do i put my html well the my whole
11:18 - rec component well
11:19 - i will put it inside dave id with and so
11:22 - every single
11:23 - html every single react app will have an
11:25 - id root
11:27 - in there just so you know cool so that
11:29 - that is basically our first app
11:31 - application let's go ahead and move on
11:33 - now to build our applications what
11:35 - you've seen is something really
11:36 - interesting right you've seen html
11:38 - but guess what it's actually not html
11:42 - it's actually something called jsx
11:45 - okay jsx so we use jsx to create
11:50 - components it's as simple as that right
11:53 - with that you can see what is jsx well
11:56 - it is basically just javascript xml
11:58 - that's the word for it and you might be
11:59 - confused away here for a second right
12:01 - but it allows us to write html in
12:04 - react.js
12:05 - this right here is jsx it's as simple as
12:08 - that
12:08 - right and it makes it easier for us to
12:10 - write html
12:12 - in react.js because at the end of the
12:14 - day
12:15 - all of this is being written in
12:18 - javascript in a js file not in a html
12:21 - file
12:22 - but in a dot js file
12:25 - right that is the big difference and so
12:27 - we have to use something called jsx
12:28 - to allow us to write that that's why we
12:31 - have here class name
12:32 - and not class is equal to something
12:36 - right that's the big difference so let's
12:37 - take a look what is jsx and then why do
12:40 - we
12:40 - need to use it well check this out right
12:42 - jsx is very
12:44 - very helpful it allows us number one to
12:46 - use javascript calculations
12:48 - that's part one but you can also use
12:49 - variables right
12:51 - and you can also use for example like
12:52 - loops so as an example here
12:55 - we have let's say we have an element see
12:58 - this is an element
12:59 - well this right here my friend is jsx
13:02 - okay this h1 even though it looks like
13:04 - html it's actually jsx
13:06 - and here i can fully do see do
13:09 - expressions called expressions
13:13 - expressions that's the really cool part
13:15 - about 10 plus 10 will actually be
13:17 - will give me 20. right so only in the
13:19 - output this will be 20.
13:20 - now another thing is variable so for
13:22 - example here you know how we have
13:23 - constant element is equal to h1 my name
13:25 - is first name check this out this first
13:28 - name right
13:28 - is actually going to be put in here so
13:31 - if my first name is equal to nas
13:33 - okay it will show nas here
13:36 - right that's the really cool part all
13:39 - right okay let's go ahead and move on
13:41 - next up if we take a look at our for
13:44 - example
13:45 - this specific portion what do we have
13:47 - well we have for example a loop you can
13:49 - see here we can actually loop over a
13:50 - list of elements
13:52 - in directly in jsx and actually return
13:55 - some value so allows us to very easily
13:58 - display you know list elements or values
14:02 - in our application all right so why jsx
14:05 - well look at this
14:06 - right without jsx pretty simple it looks
14:09 - pretty hideous right
14:10 - we have to use something called const e
14:12 - c create element
14:13 - we have to do this and it just becomes
14:15 - very messy
14:17 - with jsx on the other hand look at this
14:19 - it's so beautiful
14:20 - it just feels like it's normal html
14:23 - button
14:24 - right button right and so forth on click
14:28 - this happens and so forth and you can
14:30 - put your text in here
14:31 - right that's a really cool part about it
14:33 - awesome
14:34 - moving on so now you might be thinking
14:36 - okay so we have the html but
14:38 - how do you style this right in
14:42 - jsx in react.js telling you it's pretty
14:44 - simple
14:45 - you can either do inline styling or css
14:47 - using an external css style sheet
14:49 - and there's another one called styled
14:54 - components so you should you can take a
14:56 - look at that as well
14:58 - components right here components
15:01 - all right cool so in inline styling it's
15:05 - pretty simple so for
15:06 - as an example here i can directly in my
15:09 - html specify the color here right
15:12 - specify the color
15:13 - and or for example i can create another
15:15 - javascript object
15:17 - for the style and i can just simply
15:18 - apply it to my element
15:20 - right and we can actually do this in our
15:22 - application so we take a look at our
15:24 - app right here in our app.js
15:27 - hello there let's add a style to this
15:29 - one we'll go ahead for this h1 we'll say
15:32 - for this h1 we'll say style
15:36 - is equal to
15:40 - give a for example uh color
15:44 - red boom you see now this whole html
15:48 - has the color red it's as simple as that
15:50 - right or we can also do for example
15:53 - const stop my style
15:56 - my style is equal to right and here i
15:59 - can specify
16:01 - color red
16:04 - right so i can make it into a variable
16:05 - and then i will put i will go ahead and
16:08 - give it my own right here my home
16:11 - my own my style as a parameter look at
16:14 - that it's so cool and now it's still the
16:16 - style of
16:17 - red right how cool is that is i just
16:19 - simply created a variable
16:20 - i put that variable into a style and now
16:23 - it's fully applied
16:24 - like what all right move on on
16:28 - another aspect you can do for example is
16:30 - you can put it into an external css
16:31 - style sheet so here for example i can do
16:33 - create an app.css or an app.js and i can
16:36 - actually import
16:38 - app.css right after css will be imported
16:41 - right here and this will allow me to
16:43 - fully use my all my
16:44 - css files in react.js beautiful all
16:47 - right
16:48 - now there's a question you might be
16:50 - asking yourself okay well nas how do i
16:52 - pass in data
16:53 - for example in react.js well we pass a
16:55 - data something using something called
16:56 - props right props it's basically like
17:00 - parameters
17:01 - for functions right it's basically
17:03 - parameters for our components
17:05 - so if we think of them for example let's
17:06 - go ahead and take a look at this
17:08 - right what are props well uh props are
17:12 - it's a pretty pretty simple thing well
17:13 - it's arguments right here passed into
17:16 - react components
17:18 - think of them as functions you know when
17:19 - you have a function right
17:22 - and you pass in you know let's say some
17:24 - name prop
17:25 - well that's this is a prop except you
17:29 - can pass that
17:29 - into an actual component for example
17:31 - here we have an element
17:33 - car right this is a component and we're
17:36 - passing in a prod
17:37 - prop called brand and we're passing the
17:38 - value called forward
17:40 - and so when we go ahead and have a a
17:43 - a component here we can actually use
17:46 - props the brand to get us
17:49 - this forward value it's as simple as
17:52 - that
17:53 - right and the the past and components
17:56 - via html attributes and these right here
17:57 - are called html attributes
18:01 - all right next big question is how do we
18:04 - go ahead and
18:04 - save data using react gs or react
18:09 - hooks right we've passed in data right
18:11 - between
18:12 - one component to another component but
18:14 - how do we have
18:15 - some kind of a data storage device i
18:17 - would say storage device right that will
18:19 - allow us to fully
18:20 - you know save some data as we go ahead
18:23 - for example log into our application
18:25 - as you for example go to your profile
18:28 - page and you know how it says
18:29 - how says hey your name is nazar your
18:32 - name is joe or whatever it might be
18:33 - right how does that data appear in every
18:36 - ids application well
18:37 - also this is something called using
18:39 - react hooks and react hooks
18:42 - in our case is where functions that let
18:46 - you
18:46 - hook into react state and lifecycle
18:48 - features
18:50 - hold on i know you're probably very
18:52 - confused right now but
18:53 - that is okay all right don't pay
18:56 - attention so much to this one
18:57 - i want you to pay attention much more to
19:00 - this one right here
19:01 - okay right it's used to expand
19:03 - effectiveness functionality of your app
19:05 - so
19:05 - what we can do is we can actually store
19:08 - data
19:08 - of our component right so for example
19:12 - you see how here this is a component
19:13 - called example many states
19:15 - this component contains the data of age
19:17 - fruit and
19:18 - to dose well we can actually store
19:22 - this data using something called use
19:24 - state and we can say hey
19:25 - our age is currently 42 our fruit is
19:27 - currently banana
19:28 - and our to-do is currently text learn
19:32 - hooks right and these right here are
19:34 - simply functions
19:36 - that will be used to to change this data
19:40 - right these are functions that we use to
19:42 - change this data
19:43 - okay cool so in that case what is state
19:47 - right we just talked about stage for a
19:49 - second right
19:49 - well state basically just represents
19:52 - parts of an app that can change
19:54 - right that can change and if you think
19:56 - about what are parts of an app that can
19:57 - change well if you look at for example
19:59 - on an application okay let's say this is
20:02 - facebook
20:03 - right in a news feed right let's say you
20:04 - have the news feed here
20:06 - right then you see here right let's say
20:08 - this is a picture
20:09 - well one thing you can change is for
20:10 - example the number of likes so let's say
20:12 - there's 20 number of likes
20:14 - right the number 20 can change for sure
20:17 - and so what we'll do is we will actually
20:18 - save this number 20 in something called
20:20 - a state
20:22 - right in a state we'll use for example
20:24 - we'll do we'll do for example
20:25 - use we'll do for example use
20:29 - state and we'll say 20 right
20:32 - 20 and whenever somebody let's say a you
20:35 - go ahead and
20:36 - click on this the number like
20:39 - the like button we will go ahead and do
20:42 - for example let's say
20:43 - set um set likes
20:47 - and we will implement it to 21 for
20:49 - example right it's as simple as that
20:52 - right and each component in our case
20:54 - each component
20:55 - can have its own state think of it as
20:58 - that
20:58 - is its own database right and the state
21:01 - changes components
21:02 - re-renders so this is why when you go
21:04 - ahead and click on something
21:06 - right when a user right here clicks on
21:08 - this element
21:09 - right this number changes how does it
21:12 - know that happens
21:13 - well pretty simple because it goes ahead
21:16 - and checks basically as the state
21:18 - changes
21:19 - okay i need to now re-render the
21:21 - application or and show a new view
21:23 - to the user so becomes it goes from 20
21:26 - to 21 right that's just one example
21:30 - all right let's go ahead and move on all
21:32 - right
21:33 - what do we have how react.js tracks
21:35 - changes now that is a question kind of
21:37 - how we talked about
21:38 - right in react.js as we go ahead
21:42 - and we build an application let's talk
21:45 - about this
21:45 - okay let's think about this here for a
21:47 - second okay i'm going to go ahead and
21:50 - put this for you let's go ahead and
21:52 - build this out for you
21:54 - okay we have here right
21:58 - again like i said we have the news feed
22:00 - right
22:01 - we had the likes right here okay
22:05 - and promote remember what we had what
22:08 - we had we had 20 20
22:12 - and you clicked on the like button
22:15 - right you click the like button well
22:17 - what will happen
22:18 - in react.js is react.js will go ahead
22:21 - and again the state let's say this is
22:23 - our state
22:25 - right state
22:28 - and our state has currently the value of
22:30 - for example the likes let's say
22:33 - in here we have likes
22:37 - likes right oh that's all that's all it
22:39 - is likes
22:40 - okay and we have we have likes which is
22:42 - account and we have a function called
22:44 - set likes which react gives us
22:48 - right set likes to go ahead and modify
22:50 - the likes
22:52 - when you click on this just how we
22:53 - talked about just recently when you
22:54 - click on this right
22:56 - we do set likes to uh 21
23:00 - right to 21 to increment account okay
23:02 - what's going to happen
23:04 - is react gia has something called
23:06 - virtual dom
23:08 - i know this is a horrible drawing of the
23:09 - virtual dom but it's a virtual dom
23:11 - right virtual
23:15 - virtual dom right
23:18 - and a virtual dom is simply just
23:20 - basically a clone
23:23 - clone of the current application
23:28 - it's simply just a clone whenever the
23:30 - state changes
23:32 - this state right here changes maybe
23:34 - that's a like maybe that's a user maybe
23:35 - you did something else on the web page
23:37 - it is going to go ahead and actually
23:39 - change it first on the virtual dom
23:42 - and if it sees that it made some kind of
23:44 - a difference let's say on the
23:46 - the news feed okay then the react.js
23:49 - will know okay
23:50 - so the the number changed in terms of a
23:53 - view
23:53 - then that means i need to go to just
23:55 - this number right here and change it
23:57 - because otherwise without this
24:00 - virtual dom then every time you change
24:02 - this state
24:04 - it will render the whole application and
24:06 - that is not good
24:08 - that means it's going to render all
24:09 - these different components and that
24:10 - makes applications slow
24:12 - and just not easy to use at all so this
24:15 - is why react became so smart and they're
24:17 - used to call virtual dom
24:18 - to make sure to track those changes and
24:20 - to modify your view
24:22 - as you're going to click for example on
24:23 - facebook click the like button or you
24:25 - click the like button on instagram
24:27 - so in that case that's all pretty much
24:29 - what you learn is react
24:31 - gs now let's go ahead and take a look
24:33 - really quickly on how
24:34 - now now let's go ahead and take a look
24:35 - really really quickly how to build a
24:37 - small application for example with count
24:39 - so we did state
24:40 - let's go ahead and as we learned to
24:42 - state right which is to
24:44 - to go ahead and save uh data around
24:47 - your component let's create a state
24:50 - called
24:51 - count count right here
24:55 - and a set count function right which
24:57 - will be returning okay we we usually
24:59 - call use state
25:01 - use state and let's say the count is
25:03 - currently zero right
25:04 - we're going to import here something
25:06 - called use state
25:09 - use state
25:12 - right again we're using a database of
25:14 - react.js and what's going to happen
25:16 - is here we will go ahead and actually
25:18 - output the current count right so
25:20 - the current count my count is
25:24 - currently count zero okay
25:28 - then what we'll go ahead and do is we
25:29 - will actually create a button
25:31 - let's create a button that will
25:34 - increment the account so i will go ahead
25:35 - and do
25:36 - button again this is using jsx right
25:40 - i'll create a button and even though
25:43 - this looks like html it's still not
25:44 - right it's still not fully html
25:47 - okay uh add count
25:50 - okay you can see right here and what's
25:52 - going to happen is on click of this
25:56 - on click of this button i will go ahead
25:58 - and simply simply do
26:04 - set set count
26:09 - and i will say count plus equal to
26:13 - one plus one
26:16 - so what we'll go we will do is this set
26:18 - count is a function that gets returned
26:20 - from this ust functionality
26:22 - okay and i will do set count count plus
26:24 - one and now if i go ahead and click on
26:26 - this
26:26 - look at that one two three four five
26:29 - six seven eight nine and ten and however
26:32 - many of the times i go we see
26:33 - it refreshes the page so basically as i
26:36 - said
26:38 - let me kind of remove this right as i go
26:41 - ahead
26:42 - right as i go ahead and click this
26:44 - button click this button
26:46 - right right as i click this button this
26:49 - will
26:49 - change the count to count plus 1 so if
26:51 - it was 10 it'll be 11
26:53 - and because this now changes to 11 it
26:56 - will re-render
26:57 - this whole element right and so that's
27:00 - why this becomes for example 20 in our
27:02 - case
27:02 - when i say render it almost like almost
27:04 - like a refresh but it will refresh only
27:06 - this element specific element right here
27:08 - so that my friends is pretty much
27:10 - react.js it's a very
27:12 - very powerful framework a very powerful
27:14 - library that you absolutely need to
27:16 - learn
27:16 - because the job market out there is
27:18 - pretty intense
27:20 - for this specific library and if you're
27:22 - interested in learning more about
27:23 - react.js and
27:24 - building more applications just like
27:26 - this i highly recommend
27:28 - our best course on the planet profile
27:31 - javascript that will go ahead and teach
27:32 - you
27:33 - applications like this it will teach you
27:34 - how to build applications like for
27:36 - example a google maps project like for
27:38 - example a twitter clone project
27:40 - it will teach you react.js the basics of
27:42 - react.js
27:43 - it will teach you how to go ahead and
27:45 - actually become a foster developer right
27:48 - so if you're interested in that specific
27:50 - situation if you're interested in
27:51 - becoming a developer
27:52 - go ahead and click the link below join
27:54 - profile javascript and we'll see you in
27:56 - there
27:56 - smash that like button subscribe for
27:58 - more videos like this and we will see
28:00 - you
28:00 - in the next video adios
28:27 - you

Cleaned transcript:

what is up guys this is nas and today we will be learning react.js from the beginnings from the fundamentals all right now before we get started i want to say go ahead and help us out and with the youtube algorithm smash that like like button as many times as you possibly can right and it does not hurt anybody it only makes us happier and it makes you happy because you get to smash that like button okay subscribe of course for more videos like this because of course we work hard to put this out for you but other than that let's go ahead and get this party started react js 101 let's get straight into it so what are we going to learn today we're going to learn a few different things part one what is react js okay talking about how it doesn't work what is it made of and how do we use it we're going to talk about how we use react.js to build fast applic applications with components which is probably the most important part of react.js which is components you'll learn here in a second okay we'll talk about why react.js why it's become such a popular framework library right and why you should learn it of course we will talk about how to build html using something called jsx which is very particular to react gs also we'll talk about how to save data so one of the most important things of course is saving data in your application using something called state again a new topic you might know and we will even build your first yes your first react js project let's get into it real quickly all right so let's go let's get started so what is react.js that is the question pretty simple answer it is a javascript library for building user interfaces using declarative code now what i mean by declarative code let's take a look at what i what i'm talking about here check this out so declarative code declarative code is pretty simple where for example where each line right here each line of code declares what each element of the app is right so what i mean by that for example you can see here there's a header component a card items and card total what this says is that this this header declares what the element is about so this means of course it's a header right if i say card items that means it's card items right if the component name is card total for example right to me it makes sense that's the card total which is probably going to be something around here if i'm going to look at the header that's probably going to be the header component here and this is what it means to have declarative code and react.js is about declaring declarative code to create you beautiful user interfaces just like this as you can see all right all right moving on so okay benefits of learning right gs really simple low learning curve reusable components and performance learn this library should not be that hard of course it takes some time but if you put in the work that's all that matters right usable components of course because right this is what allows us to build humongous applications like facebook for example right let's go like i'm going with useful components which is probably the one the most important parts of reactor yes right it describes what does it do it describes a section of the ui and how it should appear and function it's honestly just as simple as that right so for example we'll talk more a little about components later on but a one reasonable component for example let's say this you see how this right here is like the similar compo similar html as this it just has different data well this my friend is a reusable component you can see here in our case the component here will be like for example header right a card items component right here and a card total component right here and we'll learn just how to build them so who uses react.js well facebook for one uses of course they just fully rebuilt the whole application using react.js all right also tesla the whole tesla application which is really cool this whole test application on your mobile device is fully built with something called react native all right netflix even door whole app is using using back gs and there's so many more apps that are currently being built with react right for yes we have number one in terms of popularity you can see google trends react is very much going up right here angular is right here and the view is kind of there as well but react has very much superseded a lot of different frameworks right in terms of work and so many so many more things beautiful all right moving on stack over story right here right here shows us that react is the second framework the most popular framework out there for developers jquery is right here but you know average jquery has been there for a long time awesome moving on let's go ahead currently with react.js guys there's 54 000 jobs on just indeed right here check this out 54. you can see right here in the screenshot it actually says 54 000 jobs which is insane and it's going to keep increasing as this framework gets more popular all right so how do you build fast application using components again this is the pillar the foundation of how react was made right that's a good question so with components what are components well as we talked about really briefly they're reusable ui elements just kind of how you have a header element or some kind of a section on a piece of you know uh some kind of a section on your website that's a reusable element okay right just kind of like this right this an element could be a usable element okay so just basically all it is is it's javascript functions that accept inputs what do i mean by that give me one second i'll explain that right describes how section of the ui should appear and function is how it describes how a section of the ui should appear and function what do i mean by that let's take a look at it well if you think for example let's say we have this awesome right amazon card this is an amazon card page okay amazon cart page right if you think about this what do you see could be a component right kind of think of a component is like a section of a website well if you think about this this could potentially be a section of a website this right here right right this right here could be potentially a section of a website right here even this could potentially be a section of a website right here or even this for example right or this any block that you see can be a component so if we for example keep going right look at this well first we have the header okay then we might have for example the card items that could be a component itself and then that could be the card total and every single section here in every single section here every single component here is almost thick of it as it's they have it it has its own brain and has its own state right has its own brain its own state and has its own view that's the interesting part about it it has its own view right so that's when we said this is why right it's individual individual ui elements right individual ui elements that's what react.js is used for so for example another component you can use is for example a card item component right here right which can be used you can see here i have this one card item but then i'm using multiple places so that's the really cool part about react is you can simply just have one component and they can be reused in multiple places now in our case let's take a look at how it's actually being coded up so if we have this amazon card right here okay well let's think about this we could have for example a header a card items and a card total right and this maps to what well this maps to a few different things right it maps to header maps to of course this header component card items maps to what to this component and the card total maps to this component right and they're simply there it's only html blocks okay now what might happen is you have you can have components within components so for example this card items component right which is this one right here right it might have for example individual card item component which is this one right here right now of course here don't don't worry about all this stuff this is very confusing it's a loop it's looping through an array and all that's going on is basically it's showing the different components so these components in terms of html are the same it's just that we are passing in different data for example this image right here is different and the title here is different as well right that's what that's what's being different with that now let's do a test run here so check this out let's draw the components for a facebook web app okay so let's take a look at this if we have here okay a facebook web app what could be a component well if we know well one thing we know for example is that this could be a component the header could be in component this is the current facebook web app this could be a component right here right it's again anything you see as a block this could be a component right here as well right what else could be a component well this could be a component right right this could also be a component this could be a component this could be a component right this could and this could be component everything you see that's like a block can basically be it's a component and that's what we said react.js is all about basically what ui elements right right that's what react.js is about all right let's go ahead and move on really quickly what else do we have well so let's go ahead and actually build your first component check check this out all right here's our first component we have well it's pretty simple it's basically we have our components a function right and it's important some react right here and we have a div class name app and we are simply saying an h1 with a hello there it's as simple as that so if we go ahead and take a look at this right what's going to happen here is our react.js application in stack but which is something i highly recommend you check it out stackput's a very easy way for us to create a react just application it's very simple right this is an this is the whole component right here it's called the app component and whatever i change in here let's say for example hello there nazari my name right that's going to directly translate to what we see on the right hand side right it's as simple as that now how does this work well you can see that react what happens is it reacts to something called the react.reactdom.render what that does is we have this render function right and their vendor function takes in the app component which comes in from here right we're importing app from app which is of course right here okay and where we're putting that app html while we're putting that where we are putting that inside the document that given by the root where is it coming from check this out if i go to public in this html look at this div id root so it actually looks at the html and says hey where do i put my html well the my whole rec component well i will put it inside dave id with and so every single html every single react app will have an id root in there just so you know cool so that that is basically our first app application let's go ahead and move on now to build our applications what you've seen is something really interesting right you've seen html but guess what it's actually not html it's actually something called jsx okay jsx so we use jsx to create components it's as simple as that right with that you can see what is jsx well it is basically just javascript xml that's the word for it and you might be confused away here for a second right but it allows us to write html in react.js this right here is jsx it's as simple as that right and it makes it easier for us to write html in react.js because at the end of the day all of this is being written in javascript in a js file not in a html file but in a dot js file right that is the big difference and so we have to use something called jsx to allow us to write that that's why we have here class name and not class is equal to something right that's the big difference so let's take a look what is jsx and then why do we need to use it well check this out right jsx is very very helpful it allows us number one to use javascript calculations that's part one but you can also use variables right and you can also use for example like loops so as an example here we have let's say we have an element see this is an element well this right here my friend is jsx okay this h1 even though it looks like html it's actually jsx and here i can fully do see do expressions called expressions expressions that's the really cool part about 10 plus 10 will actually be will give me 20. right so only in the output this will be 20. now another thing is variable so for example here you know how we have constant element is equal to h1 my name is first name check this out this first name right is actually going to be put in here so if my first name is equal to nas okay it will show nas here right that's the really cool part all right okay let's go ahead and move on next up if we take a look at our for example this specific portion what do we have well we have for example a loop you can see here we can actually loop over a list of elements in directly in jsx and actually return some value so allows us to very easily display you know list elements or values in our application all right so why jsx well look at this right without jsx pretty simple it looks pretty hideous right we have to use something called const e c create element we have to do this and it just becomes very messy with jsx on the other hand look at this it's so beautiful it just feels like it's normal html button right button right and so forth on click this happens and so forth and you can put your text in here right that's a really cool part about it awesome moving on so now you might be thinking okay so we have the html but how do you style this right in jsx in react.js telling you it's pretty simple you can either do inline styling or css using an external css style sheet and there's another one called styled components so you should you can take a look at that as well components right here components all right cool so in inline styling it's pretty simple so for as an example here i can directly in my html specify the color here right specify the color and or for example i can create another javascript object for the style and i can just simply apply it to my element right and we can actually do this in our application so we take a look at our app right here in our app.js hello there let's add a style to this one we'll go ahead for this h1 we'll say for this h1 we'll say style is equal to give a for example uh color red boom you see now this whole html has the color red it's as simple as that right or we can also do for example const stop my style my style is equal to right and here i can specify color red right so i can make it into a variable and then i will put i will go ahead and give it my own right here my home my own my style as a parameter look at that it's so cool and now it's still the style of red right how cool is that is i just simply created a variable i put that variable into a style and now it's fully applied like what all right move on on another aspect you can do for example is you can put it into an external css style sheet so here for example i can do create an app.css or an app.js and i can actually import app.css right after css will be imported right here and this will allow me to fully use my all my css files in react.js beautiful all right now there's a question you might be asking yourself okay well nas how do i pass in data for example in react.js well we pass a data something using something called props right props it's basically like parameters for functions right it's basically parameters for our components so if we think of them for example let's go ahead and take a look at this right what are props well uh props are it's a pretty pretty simple thing well it's arguments right here passed into react components think of them as functions you know when you have a function right and you pass in you know let's say some name prop well that's this is a prop except you can pass that into an actual component for example here we have an element car right this is a component and we're passing in a prod prop called brand and we're passing the value called forward and so when we go ahead and have a a a component here we can actually use props the brand to get us this forward value it's as simple as that right and the the past and components via html attributes and these right here are called html attributes all right next big question is how do we go ahead and save data using react gs or react hooks right we've passed in data right between one component to another component but how do we have some kind of a data storage device i would say storage device right that will allow us to fully you know save some data as we go ahead for example log into our application as you for example go to your profile page and you know how it says how says hey your name is nazar your name is joe or whatever it might be right how does that data appear in every ids application well also this is something called using react hooks and react hooks in our case is where functions that let you hook into react state and lifecycle features hold on i know you're probably very confused right now but that is okay all right don't pay attention so much to this one i want you to pay attention much more to this one right here okay right it's used to expand effectiveness functionality of your app so what we can do is we can actually store data of our component right so for example you see how here this is a component called example many states this component contains the data of age fruit and to dose well we can actually store this data using something called use state and we can say hey our age is currently 42 our fruit is currently banana and our todo is currently text learn hooks right and these right here are simply functions that will be used to to change this data right these are functions that we use to change this data okay cool so in that case what is state right we just talked about stage for a second right well state basically just represents parts of an app that can change right that can change and if you think about what are parts of an app that can change well if you look at for example on an application okay let's say this is facebook right in a news feed right let's say you have the news feed here right then you see here right let's say this is a picture well one thing you can change is for example the number of likes so let's say there's 20 number of likes right the number 20 can change for sure and so what we'll do is we will actually save this number 20 in something called a state right in a state we'll use for example we'll do we'll do for example use we'll do for example use state and we'll say 20 right 20 and whenever somebody let's say a you go ahead and click on this the number like the like button we will go ahead and do for example let's say set um set likes and we will implement it to 21 for example right it's as simple as that right and each component in our case each component can have its own state think of it as that is its own database right and the state changes components rerenders so this is why when you go ahead and click on something right when a user right here clicks on this element right this number changes how does it know that happens well pretty simple because it goes ahead and checks basically as the state changes okay i need to now rerender the application or and show a new view to the user so becomes it goes from 20 to 21 right that's just one example all right let's go ahead and move on all right what do we have how react.js tracks changes now that is a question kind of how we talked about right in react.js as we go ahead and we build an application let's talk about this okay let's think about this here for a second okay i'm going to go ahead and put this for you let's go ahead and build this out for you okay we have here right again like i said we have the news feed right we had the likes right here okay and promote remember what we had what we had we had 20 20 and you clicked on the like button right you click the like button well what will happen in react.js is react.js will go ahead and again the state let's say this is our state right state and our state has currently the value of for example the likes let's say in here we have likes likes right oh that's all that's all it is likes okay and we have we have likes which is account and we have a function called set likes which react gives us right set likes to go ahead and modify the likes when you click on this just how we talked about just recently when you click on this right we do set likes to uh 21 right to 21 to increment account okay what's going to happen is react gia has something called virtual dom i know this is a horrible drawing of the virtual dom but it's a virtual dom right virtual virtual dom right and a virtual dom is simply just basically a clone clone of the current application it's simply just a clone whenever the state changes this state right here changes maybe that's a like maybe that's a user maybe you did something else on the web page it is going to go ahead and actually change it first on the virtual dom and if it sees that it made some kind of a difference let's say on the the news feed okay then the react.js will know okay so the the number changed in terms of a view then that means i need to go to just this number right here and change it because otherwise without this virtual dom then every time you change this state it will render the whole application and that is not good that means it's going to render all these different components and that makes applications slow and just not easy to use at all so this is why react became so smart and they're used to call virtual dom to make sure to track those changes and to modify your view as you're going to click for example on facebook click the like button or you click the like button on instagram so in that case that's all pretty much what you learn is react gs now let's go ahead and take a look really quickly on how now now let's go ahead and take a look really really quickly how to build a small application for example with count so we did state let's go ahead and as we learned to state right which is to to go ahead and save uh data around your component let's create a state called count count right here and a set count function right which will be returning okay we we usually call use state use state and let's say the count is currently zero right we're going to import here something called use state use state right again we're using a database of react.js and what's going to happen is here we will go ahead and actually output the current count right so the current count my count is currently count zero okay then what we'll go ahead and do is we will actually create a button let's create a button that will increment the account so i will go ahead and do button again this is using jsx right i'll create a button and even though this looks like html it's still not right it's still not fully html okay uh add count okay you can see right here and what's going to happen is on click of this on click of this button i will go ahead and simply simply do set set count and i will say count plus equal to one plus one so what we'll go we will do is this set count is a function that gets returned from this ust functionality okay and i will do set count count plus one and now if i go ahead and click on this look at that one two three four five six seven eight nine and ten and however many of the times i go we see it refreshes the page so basically as i said let me kind of remove this right as i go ahead right as i go ahead and click this button click this button right right as i click this button this will change the count to count plus 1 so if it was 10 it'll be 11 and because this now changes to 11 it will rerender this whole element right and so that's why this becomes for example 20 in our case when i say render it almost like almost like a refresh but it will refresh only this element specific element right here so that my friends is pretty much react.js it's a very very powerful framework a very powerful library that you absolutely need to learn because the job market out there is pretty intense for this specific library and if you're interested in learning more about react.js and building more applications just like this i highly recommend our best course on the planet profile javascript that will go ahead and teach you applications like this it will teach you how to build applications like for example a google maps project like for example a twitter clone project it will teach you react.js the basics of react.js it will teach you how to go ahead and actually become a foster developer right so if you're interested in that specific situation if you're interested in becoming a developer go ahead and click the link below join profile javascript and we'll see you in there smash that like button subscribe for more videos like this and we will see you in the next video adios you
