With timestamps:

00:00 - - Hey what's up guys.
00:02 - Aaron here from clever programmer again.
00:04 - So today I just want to go
over this cool little module
00:07 - I found called calendar in Python.
00:09 - It's pretty nifty.
00:10 - I actually haven't seen it
before but I stumbled across it.
00:12 - I just want to share
it with you guys today.
00:14 - This might be a shorter video.
00:15 - I just thought it was really cool.
00:17 - What could it achieve.
00:18 - So yeah let's jump right into it.
00:20 - (upbeat music)
00:26 - First let's go to my
rebels. Helping our rebel.
00:28 - I see as usual.
00:30 - Creating new rebel. I guess
the button is up here now.
00:33 - It used to be a little red
plus sign on the bottom right
00:35 - but they seem to have changed that.
00:39 - Good on the python.
00:41 - Is this Python 2.0?
00:43 - Have I been using Python
2.7 all this time?
00:45 - Where's Python 3?
00:47 - Hold up you guys.
00:49 - Python. Here we go.
00:51 - All right.
00:53 - Unacceptable, unacceptable.
00:56 - Let's just call this calendar module.
00:59 - So this should be Python 3.
01:01 - If it specifies Python 2.7, then yeah.
01:03 - If it doesn't say, then is Python 2.7.
01:05 - But if it says just Python,
then it's safe to assume
01:07 - that it's Python 3 because
that is the standard nowadays
01:10 - so make sure you click on Python.
01:11 - Not Python 2.7 like a
dumbo. Like I did, okay?
01:15 - Let's continue on. Create
this rebel in Python 3.
01:18 - And now we can get started.
01:21 - So this little module that
I found is called calendar.
01:24 - Literally just calendar.
01:27 - A-R-A-R-A-R. Got it.
01:32 - I can never spell that word right
01:33 - but that's how you import it, okay?
01:36 - Import calendar. And with this,
01:37 - you can do a lot of cool
little function calls.
01:39 - I actually think this ties
into a couple of other modules
01:42 - later on that I will explain.
01:43 - But for now let's just
go through this module
01:46 - and then I'll mention
those at the end again
01:48 - then maybe you can guys
01:49 - can go do your homework and
tie some things into it.
01:52 - Play around a little bit. Learn that way.
01:54 - That's the best way to
learn after you watch these
01:56 - highly entertaining videos to
a very small subset of people.
01:59 - So let's just start with
calling some functions.
02:04 - So this is a bunch of
little cool functions.
02:06 - So let's start here.
02:08 - Let's go calendar dot week.
02:14 - Calendar dot week header. OK.
02:18 - He's going to call this function with two.
02:23 - All right.
02:24 - So what this will do is it
gives us the headers of a week.
02:27 - So a week is just like you have
a Monday, Tuesday, Wednesday
02:31 - all the way through Sunday, right?
02:32 - Python starts the week on a Monday.
02:34 - So we're just going to assume
02:34 - that a week starts on
Monday here. Okay guys?
02:37 - So when I run this what should
pop out are the week headers
02:42 - after calendar is downloaded.
02:46 - As you can get all this stuff here is just
02:48 - I should know what this
is. Just ignore it.
02:51 - Whatever. But down here
is the output, okay?
02:52 - This is what we wanted.
The week header's here
02:54 - been printed out nicely for a week.
02:56 - Monday, Tuesday, Wednesday, Thursday,
02:57 - Friday, Saturday, Sunday.
02:59 - These two here that I put
in signified the length
03:01 - of these headers.
03:02 - So actually if I put a three
in here then we hit run,
03:05 - then suddenly...
03:06 - What is going on here? Available.
03:11 - OK. This seems to be working just fine.
03:12 - Just ignore all this stuff.
03:14 - Sometimes computers complain a lot.
03:16 - Like somebody who bickers a lot.
03:21 - But yeah.
03:23 - So you see down here how
now each of the week headers
03:25 - actually is of length three
instead of length two.
03:27 - If you put length one, does that work?
03:30 - Apparently so yeah. You just
have the capital letters here.
03:32 - But I'm going to use three
03:34 - because I like it being more descriptive.
03:36 - It's just more appealing to me.
03:38 - So that's the first little function
03:41 - that you can do with Python.
03:43 - I was gonna add a new line there or 90.
03:48 - New line. Bam.
03:50 - Kaboom OK.
03:57 - The next one is calendar
dot first weekday.
04:02 - So this one's kind of useless
04:03 - but I'm just gonna throw it
in there because why not.
04:07 - All this is going to
do is going to tell us
04:09 - what the first week day is.
04:10 - So Monday is zero.
04:11 - Tuesday is one. Wednesday's two.
04:13 - This is three, four, five, six.
04:15 - So the first weekday is Monday.
04:17 - So this is just gonna print out to zero.
04:20 - This could actually be useful
later on I realized now
04:22 - because there's some other functions
04:23 - where you need the numbers of the day
04:26 - instead of the actual string
to do different things.
04:29 - So this might actually be useful for that
04:30 - and then you can just add numbers.
04:32 - So if you know first weekday's Monday,
04:34 - then you can just add one,
two, three, four or five to it
04:36 - to get the other days.
04:37 - Let's just print this out
04:38 - see what happens. As you
can see zero prints out
04:41 - because Monday is the first weekday.
04:44 - Monday has the index of zero.
04:45 - So nice. Easy there.
04:47 - What's wrong? Wrong editor, of course.
04:51 - Set another new line.
Empty print statement.
04:55 - We'll just have an empty line there
04:56 - so you can have some nice spacing here
04:58 - so it's not all clumped together.
05:00 - But yeah. Let's continue on.
05:02 - So now things get really really cool.
05:05 - It almost seems like
you're a magician here.
05:06 - Like typing in magic.
05:10 - So the next function that
I want to go over is month.
05:13 - So all you do is you literally
just call calendar dot month.
05:18 - OK. Calendar dot month.
05:20 - That's it. All you have
to do is put in a year.
05:24 - So let's put in this year: 2019.
05:26 - And the month. So it is...
05:30 - Yes, I'm counting with my fingers.
05:31 - But it's March. The third month.
05:33 - So it's put three here.
05:35 - So it's March right? Yes it's March.
05:39 - If we print this out,
05:41 - this will actually print
out the current month.
05:43 - So let's see how this looks
05:47 - Bam, would you look at that.
05:48 - Says March 2019.
05:49 - You have the Monday,
Tuesday, Wednesday, Thursday,
05:52 - Friday, Saturday and then
you have all the days here
05:54 - of the month. Pretty cool right.
05:56 - It just spits this out in
a nicely formatted string
06:00 - for you automatically. OK.
06:02 - I believe there's actually
some other variables.
06:07 - Let me find it for you real quick.
06:08 - Print calendar. We're actually...
06:13 - I'll leave that up to you
guys to be an exercise.
06:15 - You can actually find the
python documentation on month.
06:18 - And actually go in and try to
find out how, what variable.
06:21 - There's another parameter
here you can add here
06:23 - because if you notice
all these weekday headers
06:25 - are only two letters
long but I wanted them
06:27 - to be three letters long.
06:29 - You could actually go in
there find the correct one
06:31 - it might be like M or something or C.
06:33 - Like you would put something like that in
06:36 - but go practice finding
it in the documentation.
06:40 - From there you can figure
out how to read documentation
06:42 - which is a very very useful skill
06:44 - because there's no way you're
going to memorize everything
06:46 - in any language or any framework.
06:47 - You're always looking at
documentation and googling stuff
06:50 - and figure out.
06:51 - You're gonna be constantly
forgetting, constantly learning
06:53 - but getting good at knowing
how to figure stuff out.
06:54 - That's the skill you want to develop.
06:55 - So go look in the documentation.
Find out how to fix that.
06:57 - Fix it for me, okay?
06:59 - Yeah. Don't make me do
everything all right?
07:02 - Because it's probably
just not a good idea.
07:07 - So that's there, figure out how to make
07:09 - all of these three letters
long instead of two.
07:11 - So that's the month function.
07:13 - Now, another cool thing we can do
07:16 - is actually get this month in matrix form.
07:20 - So let's see what that would look like.
07:21 - Calendar. The function I believe is...
07:26 - Month calendar. OK.
07:28 - Just like that. And then you just stick in
07:32 - the same parameters.
07:34 - So yeah the only change
here is you literally
07:36 - just change the function.
07:37 - Call it a month calendar
rather than just month.
07:39 - But that should be it there.
07:40 - Let's run this see what happens.
07:42 - And as you can see down here
this major's printed out.
07:48 - So this might not mean anything to you
07:51 - but if you look closely
this is actually a matrix,
07:53 - a two dimensional array I believe
07:56 - of this exact number array here.
07:59 - So these four zeros is
these four empty spots here.
08:02 - This Monday, Tuesday, Wednesday,
Thursday at the beginning,
08:04 - it doesn't have anything in it.
08:05 - And then this one, two,
three continues here.
08:07 - And then the second list in
the one dimentional array
08:09 - is actually this.
08:10 - And then the third one is actually this.
08:13 - See how that works.
08:14 - So you can actually instead
of just getting the string
08:17 - like how would you get all
the data out of the string.
08:19 - You can actually just get it
automatically in an array.
08:21 - Nice and clean like that.
08:22 - Just by calling this
function month calendar
08:24 - instead of month.
08:25 - Very useful if you're actually
to be doing calculations
08:27 - on dates stuff which is something
you're plugging off to do
08:30 - if you ever want to schedule something
08:31 - like schedule your computer
to run this thing on
08:33 - like schedule your computer
to run this python script
08:37 - to automate this thing,
to launch this program,
08:38 - to do this thing, to hack the system,
08:40 - to text your friend, to do something.
08:42 - You know I mean you can do
whatever the heck you want
08:45 - but you're going to have
to know calendars and times
08:49 - and what not to schedule
those tasks on your computer.
08:51 - And so that's where I
think something like this
08:53 - would be very useful and
come in handy like that.
08:55 - So that's why I'm touching on this now.
08:56 - Kind of ties into a new
product we have coming out
08:56 - called "How to automate
stuff with Python".
09:00 - More on that in the other video
09:02 - but that is that for the month
09:04 - and the month calendar functions.
09:06 - Now let's go on, okay?
09:08 - Another cool one is what
if I just want to print out
09:10 - the entire freaking year?
09:13 - Ta-da! You can do that too.
09:16 - Well, assuming you get these words...
09:20 - I wish there was a better auto
complete on this editor here
09:23 - because I can't type
correctly a lot of the time.
09:26 - But anyways.
09:28 - It's not going to be a year
as I thought it would be
09:30 - but apparently if you look
up on the documentation
09:32 - which will tell you what it actually is,
09:35 - you're actually just gonna
call calendar dot calendar.
09:37 - OK. Just like that.
09:38 - And then we don't need the month
09:40 - because we're like trying
to get the entire year
09:42 - not just a month.
09:44 - So you just put in just
the year just like that.
09:46 - And then when I hit run, you
will see magic happen, okay?
09:51 - Click run.
09:52 - Kaboom. Look at that.
09:54 - The entire freaking years
printed out super prettily.
09:57 - You got the year at the top. 2019
09:59 - You got January. You got February.
10:00 - You got the entire month headers.
10:02 - The week headers here.
10:03 - Monday through Sunday. You
got all the days of the year.
10:05 - All of 365 or 364.
10:08 - If it's a leap year, I
don't know how that works
10:11 - but hey I think that's the
day that I fell off the bike
10:17 - in front of my crush. Yeah.
10:19 - February 27th. anyways.
10:21 - What else? What else was I saying?
10:25 - Off track here.
10:27 - Print. Yeah printing out the whole year.
10:29 - So this is very very handy.
10:30 - Now you might be wondering,
10:31 - "Okay if we had it we could
put out the entire month,
10:33 - we could get the matrix
for the for the month,
10:37 - then can we get the matrix
for the entire year?"
10:40 - No. I thought the same thing.
10:44 - I was like, "OK cool so you can
get like a really really big
10:47 - like three dimensional
array of all of this crap."
10:49 - But apparently you can't for some reason.
10:53 - No I don't know what that was.
Some weird prop popped up.
10:57 - Just ignore that. Somebody was hacking me.
10:59 - I think I said Rafi so I
think cause he's trying
11:02 - to take over this tutorial from
a remote location over there
11:06 - but anyways you can't actually do that
11:11 - but what you could do is you could iterate
11:12 - through every month
11:13 - and then get the model
multi-dimensional array yourself
11:15 - and then construct something like this
11:18 - for an entire year on your own.
11:20 - That's another little exercise you can do.
11:22 - So why not go and try it.
I haven't tried it yet
11:23 - but I'm sure if I put five,
ten, 15 hours into it,
11:26 - I can figure it out. (chuckles)
11:28 - But I'm sure you guys can do
it in five, ten, 15 minutes.
11:31 - If you look up the calendar.
11:34 - That month calendar one
that gives you the array.
11:37 - And then just try to
iterate, make a for loop,
11:38 - And iterate over every month.
11:40 - That would be cool little exercise.
11:42 - OK. Moving on.
11:44 - What else do we have here?
11:46 - You can also get...
11:47 - There's a cool function
here called day of the week
11:51 - but the function actually called...
11:53 - No that's the variable name I gave it
11:55 - because that makes more sense
11:56 - So day of the week. OK.
11:58 - That's what I want my variable to called.
11:59 - Remember, self documenting
code turns the ladies
12:03 - and gents on. All hot and bothered.
12:06 - You know if they're
into that kind of stuff.
12:09 - But this function is
just going to be called
12:14 - calendar dot weekday.
12:18 - And then you just chuck in the year,
12:21 - and then you chuck in the month,
12:22 - and then you also chuck
in the day of the month.
12:24 - So today is the eighth.
12:29 - Today's eighth, right?
12:30 - Eighth. Okay.
12:32 - You pop that in there so
month, year, month and day
12:36 - and what we're going to get here
12:38 - is remember how I set up here
12:39 - when we have the first weekday
here, Monday became zero?
12:42 - What is gonna print out
is actually an integer
12:44 - that corresponds to the current
whatever weekday this is.
12:46 - So today is actually a
Friday so that's gonna be
12:49 - Monday is zero.
12:50 - So again counting on
my fingers. (chuckles)
12:52 - Laugh at me if you like. (sniffs)
12:56 - Monday. So Tuesday will be
one. Wednesday. Thursday.
12:59 - It will be four. Should be integer four
13:01 - that prints out from here. Okay?
13:02 - Let's hit run.
13:03 - And...
13:05 - I did not print it.
13:07 - I make this mistake all the time.
13:08 - Apparently I never learn. (grunts)
13:10 - Now let's run it.
13:12 - And boom. Four right there.
13:16 - Exactly what I thought.
Four actually means Friday.
13:19 - So we can actually put any years.
13:20 - Let's put in freaking year
3000. See what happens.
13:25 - Is this still going to be a
four? It's gonna be a five.
13:28 - So apparently in year 3000, March 8th,
13:32 - it's going to be a Saturday.
13:34 - I mean we're all not gonna be there.
13:35 - We're probably in Mars, Pluto and stuff.
13:37 - Thank you Elon Musk. (chuckles)
13:38 - You're awesome.
13:39 - But yeah that's how that function works.
13:44 - What else.
13:46 - Again probably a useful function
13:47 - for when you actually have a date
13:49 - and then you want to know
the weekday to schedule it
13:52 - like, "Oh I want to schedule
every Friday" or something
13:54 - or every Wednesday, you
could use just to filter out
13:56 - the integer somehow and
figure out the dates,
13:58 - you'd have to problem
solve and think about it.
14:01 - I don't even know what problem
I'm trying to solve with it
14:02 - but if you're trying to
schedule things on a calendar,
14:04 - this seems like it would
definitely be useful.
14:06 - I'm sure it is because
it's in the library.
14:08 - And most things in library are useful.
14:11 - Not everything but I mean most things.
14:14 - But moving on there's a few more.
14:15 - So there's also a function
that will tell you
14:17 - if a year is a leap year
which is pretty cool.
14:20 - So let's go calendar dot is leap
14:24 - and then what is this year? 2019.
14:27 - I don't think it's a leap year.
14:28 - So we get... Oh I caught myself, you guys.
14:32 - I need to print this, "is_leap."
14:35 - I didn't screw up. I'm
learning just like you guys.
14:37 - Learning just like you guys.
14:39 - So apparently 2019 is not a leap year
14:41 - because it comes out
false but I think 2020 is.
14:44 - So let's run that.
14:46 - Hey what do you know. Yeah.
14:47 - So every four years, there's a leap year.
14:52 - If you guys didn't know that.
14:53 - Which just means there's
one less day in February
14:55 - for some weird cosmic reason.
14:56 - Like the astral gods got pissed
off and decided to troll us
15:00 - or something. I don't know.
15:01 - But I mean every four
years, there's a leap here.
15:04 - So this can tell you,
15:07 - if a certain year is a leap year
15:09 - which is important for calculating days
15:11 - because those will add up.
15:12 - Every four years, you're off by a day.
15:14 - You don't want to be off by a day, okay?
15:17 - You don't even want to be off by a second.
15:18 - When you're coding,
15:19 - you want to be very
precise with everything.
15:21 - So it's very important to be very clear
15:23 - about what you're trying to do
15:26 - and get done
15:28 - and then get it done 100 percent clean
15:30 - because even 99 percent,
there's a little room for error,
15:32 - and then it'll break up.
It'll break sometimes.
15:34 - You don't want that.
You're trying to always go
15:35 - for a hundred percent as best you can.
15:37 - It's not always possible but
that's at least the idea.
15:40 - OK guys. So yeah a little trick here.
15:43 - Everybody knows, well, I know
that 2000 was a leap year.
15:46 - So you can kind of
calculate every four years
15:49 - 2008 2004 2008 everything up there.
15:52 - If it's a factor of four then you know
15:55 - that it's a leap year from
year 2000. Cool stuff.
16:00 - Now moving on I think there
is only one more function
16:05 - that I saw that was cool
to actually play with
16:07 - everything else is kind of nitty gritty.
16:10 - They might be useful in weird cases
16:13 - if you're actually
trying to problem solve.
16:14 - But now I didn't feel like
showing it on a video on YouTube.
16:18 - You know like I'll dig it up
if I'm actually doing a project
16:21 - and it's useful to me
but it's just boring.
16:23 - Like it would just bore you
guys more than I am right now.
16:26 - So the last one is how many leap days.
16:32 - So this is exactly what
I was talking about
16:34 - how you don't want to be off
by one day every four years
16:36 - if you're trying to calculate
over a long period of time
16:38 - whatever you're trying to do
especially if you're doing...
16:41 - Actually I had an internship
16:42 - where there was a guy who did a lot of
16:44 - He was an astronomer. He
went to some big school.
16:48 - I forget. This was years ago
but he was doing astronomy.
16:53 - Did a lot of coding for
big astrological things.
16:58 - I don't know. Big cosmic thing.
16:59 - Whatever the word is. I'm
not an astronomer. Sue me.
17:02 - But basically when he's doing
calculations on that scale
17:05 - like years in millenniums or millenniums
17:07 - those leap years really really add up.
17:10 - So you actually need to
know how those little tiny
17:13 - little things change to
be that precise again.
17:16 - Because when you're on that scale
17:17 - even one day will screw
you up. So very important.
17:20 - But this little function
here is how many leap days.
17:23 - And then all that it does pretty much is
17:27 - it tells you how many leap
days are in a range of years.
17:30 - So let's say...
17:35 - Let's collapse this a
little bit so we can see.
17:37 - So from year 2000 to year 2001.
17:43 - This might be exclusive or inclusive.
17:45 - I'm not exactly sure we'll test it out.
17:46 - That's usually the best
way to figure it out.
17:49 - It's one of the other. Just try both
17:51 - and then you know the answer.
17:52 - Like it's almost fashion
in googling sometimes
17:54 - just like "Oh try it."
17:55 - Try something else, then you know.
17:57 - So year 2000 was a leap year.
17:59 - Remember that little 2000 trick I use.
18:02 - 2000 was a leap year.
2001 is not a leap year.
18:05 - Because it only happens every four years.
18:07 - So they should print out as one, okay?
18:09 - When I print this...
18:10 - Hey guys I'm learning. I
didn't forget it again.
18:12 - How many leap days. Let's
print this very last one out.
18:16 - Click run.
18:18 - And it says one.
18:19 - So cool it picked up that
year 2000 is a leap year.
18:23 - 2001 is not. So in this
range from 2000 to 2001,
18:26 - there was only one leap
day that was skipped...
18:28 - or added. (chuckles)
18:31 - I don't know if they add
a day or subtract a day.
18:33 - I think it's add a day. It doesn't matter.
18:37 - It's irrelevant but you get the point.
18:41 - Let's see if this is
inclusive or exclusive.
18:42 - So the way I would test
something like this
18:44 - is actually put in a year
that I know is a leap year.
18:46 - So 2004. So I actually
know in my head that 2000
18:49 - and 2004 are both leap years.
18:51 - So there are two leap years in this range
18:54 - but that's only assuming
if this is inclusive.
18:56 - It might ignore this year
and actually only go 2000
18:59 - up to 2003.
19:01 - So now when we run this
if we get one or two
19:03 - it's going to actually
answer our question of
19:04 - if this function is inclusive or exclusive
19:08 - on the the second
parameter here. This 2004.
19:12 - So we hit run.
19:14 - And it's 1.
19:14 - So it turns out that it is exclusive.
19:16 - So actually it ignores 2004.
So if you want to include 2004,
19:19 - You'd actually have to put 2005.
19:22 - Just like that or any bigger one.
19:24 - So now I should print
out, too, right guys?
19:26 - Right?
19:27 - Right?
19:30 - All right. (chuckles)
19:32 - So hey look, two. Right?
19:33 - We're all right. We're
all right. All right.
19:36 - All the time. Always right. Right. right.
19:38 - Then if you wanted to put
in maybe like up to 2020.
19:42 - Remember, exclusive so it's
not gonna include that.
19:46 - Hit run. Then we'll probably
get four or five or something.
19:48 - Yeah. That sounds about right.
19:49 - And year 3000 should be about 250.
19:52 - Because there's a thousand in there.
19:54 - 243. Close enough.
19:56 - Interesting. Actually maybe
there isn't a leap year
19:59 - every four years. Maybe
every now and then it skips
20:02 - because it should have been closer to 250.
20:03 - It's 243 though. That's interesting.
20:06 - Maybe every now then,
there's actually a leap year
20:09 - every five years.
20:11 - Google it from you guys.
Post in the comments.
20:13 - That's a cool little
fun fact for you guys.
20:15 - Well yeah that's pretty much
it for the calendar module.
20:18 - I found this morning I
just wanna make a quick
20:21 - or long video on it.
20:22 - Long video (chuckles) but yeah.
20:25 - It'd be very useful for
scheduling things or whatnot.
20:27 - There's also a module called DateTime.
20:29 - Time which I have used before.
20:31 - Import date time.
20:34 - And import time.
20:36 - These libraries.
20:37 - So what these are is you can actually
20:39 - I think this gives you a date and a time
20:42 - so you might actually be
using this a lot more in our
20:44 - "How to automate stuff in
Python" course coming out
20:47 - in a month or two.
20:48 - Date time. But calendar
would also be useful
20:52 - for making it more legible, Ib believe.
20:53 - There's probably some
way you can leverage it.
20:55 - And I'll find a way to leverage it.
20:56 - If I don't then I've failed
20:58 - and I'll go jump off a curb
or something. (chuckles)
21:02 - But yeah.
21:03 - So date time and time are
also things you can look into.
21:05 - And there's actually some
functions in calendar
21:07 - that actually interact with
these other two modules
21:10 - that make them interoperable.
That's a term in programming
21:15 - where you can have two
different frameworks
21:17 - and two different programming languages
21:18 - that are interoperable.
21:19 - You can actually embed Java
code in Python programs
21:22 - and embed Python codes in Java programs
21:24 - which is pretty cool so you
could actually say that Python
21:27 - and Java are interoperable.
They have full interoperability.
21:31 - I use a lot of big words
because they're normal to me
21:34 - but I'm just gonna say them
and when I catch myself
21:36 - then I'll explain them so you guys know
21:38 - what the heck I'm talking about, okay?
21:40 - Because it's just jargon
that we use in this community
21:41 - because we want to feel smart
when none of us are raw human.
21:45 - We're all done by default.
21:47 - So never feel bad about that, okay?
21:49 - But yeah. So check out
those other two modules.
21:51 - That's pretty much it.
21:52 - I was gonna mention we do
have a new course coming out
21:54 - called "How to automate
stuff with Python."
21:56 - I probably said that three times already
21:57 - but it's a really cool course
about how to automate things
22:00 - on your computer using Python.
So you can make Python work
22:02 - while you sleep. It's doing
stuff for you while you sleep.
22:05 - You could have it send e-mails
for you ten days from now
22:06 - or every Monday send an email
to these sets of people.
22:09 - You could be like, "OK I
want to fire this person
22:12 - 27 days from now.
22:13 - His name is Aaron. And I'm
gonna go and call his accountant
22:16 - and I'm going to fire him 27 days exactly
22:18 - because I don't have to deal with it
22:19 - so I'm gonna go on a trip for 27 days,
22:20 - schedule it, and then boom
he's gonna get the e-mail.
22:22 - He's just gonna be gone. Great.
22:24 - It's perfect. So stuff like that.
22:26 - You could make little
personal (chuckles) schedules
22:31 - to do whatever you want.
22:33 - But that's the kind of the things
22:34 - we're gonna be working about
22:36 - and all of this stuff with python.
22:37 - And that's pretty much
it for this video, guys.
22:39 - Please stay tuned. I will
see you guys next time.
22:42 - I love your faces.
22:45 - And I will (laughs)
22:47 - Yeah I'll see you guys
next time. That's it.
22:50 - Thanks for watching. Good bye.
22:53 - Get the hell out of here, Qazi.
22:55 - - [Qazi] You're fired!
22:57 - - (laughs) Leave that in.
22:59 - Bye guys.
22:59 - (upbeat music)

Cleaned transcript:

Hey what's up guys. Aaron here from clever programmer again. So today I just want to go over this cool little module I found called calendar in Python. It's pretty nifty. I actually haven't seen it before but I stumbled across it. I just want to share it with you guys today. This might be a shorter video. I just thought it was really cool. What could it achieve. So yeah let's jump right into it. (upbeat music) First let's go to my rebels. Helping our rebel. I see as usual. Creating new rebel. I guess the button is up here now. It used to be a little red plus sign on the bottom right but they seem to have changed that. Good on the python. Is this Python 2.0? Have I been using Python 2.7 all this time? Where's Python 3? Hold up you guys. Python. Here we go. All right. Unacceptable, unacceptable. Let's just call this calendar module. So this should be Python 3. If it specifies Python 2.7, then yeah. If it doesn't say, then is Python 2.7. But if it says just Python, then it's safe to assume that it's Python 3 because that is the standard nowadays so make sure you click on Python. Not Python 2.7 like a dumbo. Like I did, okay? Let's continue on. Create this rebel in Python 3. And now we can get started. So this little module that I found is called calendar. Literally just calendar. ARARAR. Got it. I can never spell that word right but that's how you import it, okay? Import calendar. And with this, you can do a lot of cool little function calls. I actually think this ties into a couple of other modules later on that I will explain. But for now let's just go through this module and then I'll mention those at the end again then maybe you can guys can go do your homework and tie some things into it. Play around a little bit. Learn that way. That's the best way to learn after you watch these highly entertaining videos to a very small subset of people. So let's just start with calling some functions. So this is a bunch of little cool functions. So let's start here. Let's go calendar dot week. Calendar dot week header. OK. He's going to call this function with two. All right. So what this will do is it gives us the headers of a week. So a week is just like you have a Monday, Tuesday, Wednesday all the way through Sunday, right? Python starts the week on a Monday. So we're just going to assume that a week starts on Monday here. Okay guys? So when I run this what should pop out are the week headers after calendar is downloaded. As you can get all this stuff here is just I should know what this is. Just ignore it. Whatever. But down here is the output, okay? This is what we wanted. The week header's here been printed out nicely for a week. Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday. These two here that I put in signified the length of these headers. So actually if I put a three in here then we hit run, then suddenly... What is going on here? Available. OK. This seems to be working just fine. Just ignore all this stuff. Sometimes computers complain a lot. Like somebody who bickers a lot. But yeah. So you see down here how now each of the week headers actually is of length three instead of length two. If you put length one, does that work? Apparently so yeah. You just have the capital letters here. But I'm going to use three because I like it being more descriptive. It's just more appealing to me. So that's the first little function that you can do with Python. I was gonna add a new line there or 90. New line. Bam. Kaboom OK. The next one is calendar dot first weekday. So this one's kind of useless but I'm just gonna throw it in there because why not. All this is going to do is going to tell us what the first week day is. So Monday is zero. Tuesday is one. Wednesday's two. This is three, four, five, six. So the first weekday is Monday. So this is just gonna print out to zero. This could actually be useful later on I realized now because there's some other functions where you need the numbers of the day instead of the actual string to do different things. So this might actually be useful for that and then you can just add numbers. So if you know first weekday's Monday, then you can just add one, two, three, four or five to it to get the other days. Let's just print this out see what happens. As you can see zero prints out because Monday is the first weekday. Monday has the index of zero. So nice. Easy there. What's wrong? Wrong editor, of course. Set another new line. Empty print statement. We'll just have an empty line there so you can have some nice spacing here so it's not all clumped together. But yeah. Let's continue on. So now things get really really cool. It almost seems like you're a magician here. Like typing in magic. So the next function that I want to go over is month. So all you do is you literally just call calendar dot month. OK. Calendar dot month. That's it. All you have to do is put in a year. So let's put in this year 2019. And the month. So it is... Yes, I'm counting with my fingers. But it's March. The third month. So it's put three here. So it's March right? Yes it's March. If we print this out, this will actually print out the current month. So let's see how this looks Bam, would you look at that. Says March 2019. You have the Monday, Tuesday, Wednesday, Thursday, Friday, Saturday and then you have all the days here of the month. Pretty cool right. It just spits this out in a nicely formatted string for you automatically. OK. I believe there's actually some other variables. Let me find it for you real quick. Print calendar. We're actually... I'll leave that up to you guys to be an exercise. You can actually find the python documentation on month. And actually go in and try to find out how, what variable. There's another parameter here you can add here because if you notice all these weekday headers are only two letters long but I wanted them to be three letters long. You could actually go in there find the correct one it might be like M or something or C. Like you would put something like that in but go practice finding it in the documentation. From there you can figure out how to read documentation which is a very very useful skill because there's no way you're going to memorize everything in any language or any framework. You're always looking at documentation and googling stuff and figure out. You're gonna be constantly forgetting, constantly learning but getting good at knowing how to figure stuff out. That's the skill you want to develop. So go look in the documentation. Find out how to fix that. Fix it for me, okay? Yeah. Don't make me do everything all right? Because it's probably just not a good idea. So that's there, figure out how to make all of these three letters long instead of two. So that's the month function. Now, another cool thing we can do is actually get this month in matrix form. So let's see what that would look like. Calendar. The function I believe is... Month calendar. OK. Just like that. And then you just stick in the same parameters. So yeah the only change here is you literally just change the function. Call it a month calendar rather than just month. But that should be it there. Let's run this see what happens. And as you can see down here this major's printed out. So this might not mean anything to you but if you look closely this is actually a matrix, a two dimensional array I believe of this exact number array here. So these four zeros is these four empty spots here. This Monday, Tuesday, Wednesday, Thursday at the beginning, it doesn't have anything in it. And then this one, two, three continues here. And then the second list in the one dimentional array is actually this. And then the third one is actually this. See how that works. So you can actually instead of just getting the string like how would you get all the data out of the string. You can actually just get it automatically in an array. Nice and clean like that. Just by calling this function month calendar instead of month. Very useful if you're actually to be doing calculations on dates stuff which is something you're plugging off to do if you ever want to schedule something like schedule your computer to run this thing on like schedule your computer to run this python script to automate this thing, to launch this program, to do this thing, to hack the system, to text your friend, to do something. You know I mean you can do whatever the heck you want but you're going to have to know calendars and times and what not to schedule those tasks on your computer. And so that's where I think something like this would be very useful and come in handy like that. So that's why I'm touching on this now. Kind of ties into a new product we have coming out called "How to automate stuff with Python". More on that in the other video but that is that for the month and the month calendar functions. Now let's go on, okay? Another cool one is what if I just want to print out the entire freaking year? Tada! You can do that too. Well, assuming you get these words... I wish there was a better auto complete on this editor here because I can't type correctly a lot of the time. But anyways. It's not going to be a year as I thought it would be but apparently if you look up on the documentation which will tell you what it actually is, you're actually just gonna call calendar dot calendar. OK. Just like that. And then we don't need the month because we're like trying to get the entire year not just a month. So you just put in just the year just like that. And then when I hit run, you will see magic happen, okay? Click run. Kaboom. Look at that. The entire freaking years printed out super prettily. You got the year at the top. 2019 You got January. You got February. You got the entire month headers. The week headers here. Monday through Sunday. You got all the days of the year. All of 365 or 364. If it's a leap year, I don't know how that works but hey I think that's the day that I fell off the bike in front of my crush. Yeah. February 27th. anyways. What else? What else was I saying? Off track here. Print. Yeah printing out the whole year. So this is very very handy. Now you might be wondering, "Okay if we had it we could put out the entire month, we could get the matrix for the for the month, then can we get the matrix for the entire year?" No. I thought the same thing. I was like, "OK cool so you can get like a really really big like three dimensional array of all of this crap." But apparently you can't for some reason. No I don't know what that was. Some weird prop popped up. Just ignore that. Somebody was hacking me. I think I said Rafi so I think cause he's trying to take over this tutorial from a remote location over there but anyways you can't actually do that but what you could do is you could iterate through every month and then get the model multidimensional array yourself and then construct something like this for an entire year on your own. That's another little exercise you can do. So why not go and try it. I haven't tried it yet but I'm sure if I put five, ten, 15 hours into it, I can figure it out. (chuckles) But I'm sure you guys can do it in five, ten, 15 minutes. If you look up the calendar. That month calendar one that gives you the array. And then just try to iterate, make a for loop, And iterate over every month. That would be cool little exercise. OK. Moving on. What else do we have here? You can also get... There's a cool function here called day of the week but the function actually called... No that's the variable name I gave it because that makes more sense So day of the week. OK. That's what I want my variable to called. Remember, self documenting code turns the ladies and gents on. All hot and bothered. You know if they're into that kind of stuff. But this function is just going to be called calendar dot weekday. And then you just chuck in the year, and then you chuck in the month, and then you also chuck in the day of the month. So today is the eighth. Today's eighth, right? Eighth. Okay. You pop that in there so month, year, month and day and what we're going to get here is remember how I set up here when we have the first weekday here, Monday became zero? What is gonna print out is actually an integer that corresponds to the current whatever weekday this is. So today is actually a Friday so that's gonna be Monday is zero. So again counting on my fingers. (chuckles) Laugh at me if you like. (sniffs) Monday. So Tuesday will be one. Wednesday. Thursday. It will be four. Should be integer four that prints out from here. Okay? Let's hit run. And... I did not print it. I make this mistake all the time. Apparently I never learn. (grunts) Now let's run it. And boom. Four right there. Exactly what I thought. Four actually means Friday. So we can actually put any years. Let's put in freaking year 3000. See what happens. Is this still going to be a four? It's gonna be a five. So apparently in year 3000, March 8th, it's going to be a Saturday. I mean we're all not gonna be there. We're probably in Mars, Pluto and stuff. Thank you Elon Musk. (chuckles) You're awesome. But yeah that's how that function works. What else. Again probably a useful function for when you actually have a date and then you want to know the weekday to schedule it like, "Oh I want to schedule every Friday" or something or every Wednesday, you could use just to filter out the integer somehow and figure out the dates, you'd have to problem solve and think about it. I don't even know what problem I'm trying to solve with it but if you're trying to schedule things on a calendar, this seems like it would definitely be useful. I'm sure it is because it's in the library. And most things in library are useful. Not everything but I mean most things. But moving on there's a few more. So there's also a function that will tell you if a year is a leap year which is pretty cool. So let's go calendar dot is leap and then what is this year? 2019. I don't think it's a leap year. So we get... Oh I caught myself, you guys. I need to print this, "is_leap." I didn't screw up. I'm learning just like you guys. Learning just like you guys. So apparently 2019 is not a leap year because it comes out false but I think 2020 is. So let's run that. Hey what do you know. Yeah. So every four years, there's a leap year. If you guys didn't know that. Which just means there's one less day in February for some weird cosmic reason. Like the astral gods got pissed off and decided to troll us or something. I don't know. But I mean every four years, there's a leap here. So this can tell you, if a certain year is a leap year which is important for calculating days because those will add up. Every four years, you're off by a day. You don't want to be off by a day, okay? You don't even want to be off by a second. When you're coding, you want to be very precise with everything. So it's very important to be very clear about what you're trying to do and get done and then get it done 100 percent clean because even 99 percent, there's a little room for error, and then it'll break up. It'll break sometimes. You don't want that. You're trying to always go for a hundred percent as best you can. It's not always possible but that's at least the idea. OK guys. So yeah a little trick here. Everybody knows, well, I know that 2000 was a leap year. So you can kind of calculate every four years 2008 2004 2008 everything up there. If it's a factor of four then you know that it's a leap year from year 2000. Cool stuff. Now moving on I think there is only one more function that I saw that was cool to actually play with everything else is kind of nitty gritty. They might be useful in weird cases if you're actually trying to problem solve. But now I didn't feel like showing it on a video on YouTube. You know like I'll dig it up if I'm actually doing a project and it's useful to me but it's just boring. Like it would just bore you guys more than I am right now. So the last one is how many leap days. So this is exactly what I was talking about how you don't want to be off by one day every four years if you're trying to calculate over a long period of time whatever you're trying to do especially if you're doing... Actually I had an internship where there was a guy who did a lot of He was an astronomer. He went to some big school. I forget. This was years ago but he was doing astronomy. Did a lot of coding for big astrological things. I don't know. Big cosmic thing. Whatever the word is. I'm not an astronomer. Sue me. But basically when he's doing calculations on that scale like years in millenniums or millenniums those leap years really really add up. So you actually need to know how those little tiny little things change to be that precise again. Because when you're on that scale even one day will screw you up. So very important. But this little function here is how many leap days. And then all that it does pretty much is it tells you how many leap days are in a range of years. So let's say... Let's collapse this a little bit so we can see. So from year 2000 to year 2001. This might be exclusive or inclusive. I'm not exactly sure we'll test it out. That's usually the best way to figure it out. It's one of the other. Just try both and then you know the answer. Like it's almost fashion in googling sometimes just like "Oh try it." Try something else, then you know. So year 2000 was a leap year. Remember that little 2000 trick I use. 2000 was a leap year. 2001 is not a leap year. Because it only happens every four years. So they should print out as one, okay? When I print this... Hey guys I'm learning. I didn't forget it again. How many leap days. Let's print this very last one out. Click run. And it says one. So cool it picked up that year 2000 is a leap year. 2001 is not. So in this range from 2000 to 2001, there was only one leap day that was skipped... or added. (chuckles) I don't know if they add a day or subtract a day. I think it's add a day. It doesn't matter. It's irrelevant but you get the point. Let's see if this is inclusive or exclusive. So the way I would test something like this is actually put in a year that I know is a leap year. So 2004. So I actually know in my head that 2000 and 2004 are both leap years. So there are two leap years in this range but that's only assuming if this is inclusive. It might ignore this year and actually only go 2000 up to 2003. So now when we run this if we get one or two it's going to actually answer our question of if this function is inclusive or exclusive on the the second parameter here. This 2004. So we hit run. And it's 1. So it turns out that it is exclusive. So actually it ignores 2004. So if you want to include 2004, You'd actually have to put 2005. Just like that or any bigger one. So now I should print out, too, right guys? Right? Right? All right. (chuckles) So hey look, two. Right? We're all right. We're all right. All right. All the time. Always right. Right. right. Then if you wanted to put in maybe like up to 2020. Remember, exclusive so it's not gonna include that. Hit run. Then we'll probably get four or five or something. Yeah. That sounds about right. And year 3000 should be about 250. Because there's a thousand in there. 243. Close enough. Interesting. Actually maybe there isn't a leap year every four years. Maybe every now and then it skips because it should have been closer to 250. It's 243 though. That's interesting. Maybe every now then, there's actually a leap year every five years. Google it from you guys. Post in the comments. That's a cool little fun fact for you guys. Well yeah that's pretty much it for the calendar module. I found this morning I just wanna make a quick or long video on it. Long video (chuckles) but yeah. It'd be very useful for scheduling things or whatnot. There's also a module called DateTime. Time which I have used before. Import date time. And import time. These libraries. So what these are is you can actually I think this gives you a date and a time so you might actually be using this a lot more in our "How to automate stuff in Python" course coming out in a month or two. Date time. But calendar would also be useful for making it more legible, Ib believe. There's probably some way you can leverage it. And I'll find a way to leverage it. If I don't then I've failed and I'll go jump off a curb or something. (chuckles) But yeah. So date time and time are also things you can look into. And there's actually some functions in calendar that actually interact with these other two modules that make them interoperable. That's a term in programming where you can have two different frameworks and two different programming languages that are interoperable. You can actually embed Java code in Python programs and embed Python codes in Java programs which is pretty cool so you could actually say that Python and Java are interoperable. They have full interoperability. I use a lot of big words because they're normal to me but I'm just gonna say them and when I catch myself then I'll explain them so you guys know what the heck I'm talking about, okay? Because it's just jargon that we use in this community because we want to feel smart when none of us are raw human. We're all done by default. So never feel bad about that, okay? But yeah. So check out those other two modules. That's pretty much it. I was gonna mention we do have a new course coming out called "How to automate stuff with Python." I probably said that three times already but it's a really cool course about how to automate things on your computer using Python. So you can make Python work while you sleep. It's doing stuff for you while you sleep. You could have it send emails for you ten days from now or every Monday send an email to these sets of people. You could be like, "OK I want to fire this person 27 days from now. His name is Aaron. And I'm gonna go and call his accountant and I'm going to fire him 27 days exactly because I don't have to deal with it so I'm gonna go on a trip for 27 days, schedule it, and then boom he's gonna get the email. He's just gonna be gone. Great. It's perfect. So stuff like that. You could make little personal (chuckles) schedules to do whatever you want. But that's the kind of the things we're gonna be working about and all of this stuff with python. And that's pretty much it for this video, guys. Please stay tuned. I will see you guys next time. I love your faces. And I will (laughs) Yeah I'll see you guys next time. That's it. Thanks for watching. Good bye. Get the hell out of here, Qazi. [Qazi] You're fired! (laughs) Leave that in. Bye guys. (upbeat music)
