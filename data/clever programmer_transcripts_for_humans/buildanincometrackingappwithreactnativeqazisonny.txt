With timestamps:

00:00 - is up guys how's it going this is qazi
00:03 - from clever programmer
00:05 - and it's your boy papa react how's it
00:08 - going guys part two
00:10 - of react native yeah so it's gonna be
00:12 - exciting
00:14 - i hope you guys are excited last time we
00:17 - left
00:17 - off right about here if you guys
00:21 - remember
00:22 - and we were working on this app and we
00:25 - wanted to make a
00:26 - income tracker for developers all right
00:29 - and
00:30 - this is where we left off we got a nice
00:32 - little pretty graph going
00:34 - we were working on adding the ability to
00:36 - add your income and then it
00:38 - should plop it up onto the graph and
00:41 - that's what we couldn't finish
00:42 - in the last video so that's where we're
00:44 - continuing from
00:45 - exactly we're going to be adding that
00:47 - functionality to groups it so like as we
00:49 - add that income
00:50 - it's going to group it by the day and
00:52 - that's going to be a little cool
00:54 - problem that we're going to solve live
00:55 - in front of you guys
00:57 - um so that'll bring a lot of value to
00:59 - you guys um
01:00 - yeah we can see people starting to flood
01:02 - in nice mexico in the house
01:04 - hey let's go 85 viewers in the house
01:08 - let's go
01:08 - what's up guys so um i hope you guys are
01:12 - excited
01:13 - guys if you want this video to go out to
01:15 - more people and if
01:16 - you want to become a react js developer
01:19 - and make a lot of money then go ahead
01:22 - and smash that like button smash that
01:26 - like
01:26 - button guys and get this video out as
01:28 - many people share with your friends
01:30 - all that stuff we we're just starting
01:32 - this new react native series
01:34 - so it's gonna be a lot of fun so if you
01:36 - guys have been excited for that
01:38 - let us know either in the comments and
01:39 - if you haven't already like cards you
01:41 - said
01:41 - smash that thumbs up easiest way for us
01:43 - to know that you actually like the stuff
01:44 - we put out
01:46 - that's right oh that's all
01:52 - that's one way to freaking start it off
01:54 - strong
01:55 - jesus all right so
01:58 - my hold on i don't know what's going on
02:01 - but let's try this
02:02 - that should work boom wow we just got an
02:06 - amazing donation by gabriel graves
02:10 - thank you so much dude he goes let's
02:13 - start this strong
02:14 - let's go 20 donation he's becoming our
02:18 - new frank
02:19 - he is dude he's becoming literally the
02:21 - new frank
02:22 - and hopefully he'll be he'll be landing
02:24 - a huge client soon
02:25 - oh yeah that's the path
02:29 - and he says you made my day that's what
02:31 - we're talking about dude we love that
02:33 - kind of energy
02:34 - uh qazi go ahead and share the uh vs
02:36 - live share with me and then we can
02:38 - up on the same coding sesh all right
02:40 - brother you got it
02:42 - i'm gonna go ahead and do that right
02:43 - about now guys
02:45 - i'm excited about this one and uh sunny
02:47 - i'm actually excited about this one
02:49 - because
02:50 - i want to be able to track my income
02:55 - yeah and it'll be it'll be fun dude like
02:57 - like it's one thing using an app that
02:59 - helps you out and gets you more
03:01 - like you know productive and [ __ ] like
03:02 - that but like actually having built the
03:05 - app
03:05 - and like imagine we're using the app and
03:07 - we realized that oh
03:08 - it might be cool that if we have this or
03:10 - if we have this
03:11 - then going ahead and adding it and
03:13 - playing with it that would be safe
03:15 - yes yeah i'm excited about that bro
03:20 - nice i'm inside now welcome guys
03:23 - calvin comes in and goes geez gabriel
03:26 - always putting his foot on her necks
03:28 - hahaha
03:29 - love it and then he goes gets the people
03:31 - going rotation in the house
03:35 - what's up guys oh nice we've got west
03:38 - africa as well
03:39 - nice what's up lelenky yeah
03:44 - amazing awesome
03:47 - all right all right all right right now
03:50 - we were using expo to get everything
03:52 - running last time
03:54 - yeah uh xp is dope it's the first time i
03:56 - was using expo as well
03:58 - and xbox gave us some pretty cool cool
04:00 - features last time because we were able
04:02 - to
04:03 - actually share a qr code with you guys
04:05 - and you guys were able to actually pull
04:06 - it up on your phone
04:08 - and you guys know yeah you can do that
04:10 - right now by the way guys so i'm gonna
04:11 - go and tunnel
04:12 - and make it big and i'm going to hide my
04:14 - screen for a few seconds so now you're
04:17 - going to get a few seconds
04:18 - right about now and if you just take
04:22 - your
04:22 - phone iphone camera and point it to it
04:26 - it's because you on local autumnal i'm
04:29 - on tunnel
04:30 - oh it's gonna pop this app open for you
04:33 - and then you should be able to see all
04:36 - the development
04:37 - we are doing live in real time and
04:42 - that'll be super super cool
04:44 - that's it that's all i had to say
04:47 - there we go downloading it loading
04:49 - javascript bundle
04:51 - yeah guys go ahead and do that because
04:52 - it's awesome and if you don't have the
04:54 - app literally go ahead and just point
04:56 - iphone users just point your camera at
04:58 - android you can you've got the scanner
05:00 - and if you don't have the app that you
05:02 - need to run this you can pretty much it
05:04 - will prompt you to download it but it
05:06 - might take a little while to get started
05:07 - and spin up but once it does it's pretty
05:09 - sick
05:10 - it's pretty cool going ahead and as we
05:12 - code you can see it
05:13 - some people saying it's a bit slow yeah
05:15 - it is a little bit slow but imagine
05:17 - once it loads up you pretty much get
05:18 - that connection with us which is which
05:19 - is pretty cool
05:21 - yep it is super cool
05:25 - uh go ahead and share the the servers as
05:28 - well
05:29 - so then we can i remember the ports it
05:32 - was um
05:33 - if you've got the terminal open if you
05:35 - hit w
05:37 - oh man
05:40 - this is why i told these guys to move
05:43 - imac pro and they
05:45 - did not so it's like crashing now
05:48 - oh [ __ ] yeah it's like maybe in that
05:53 - it's
05:53 - maybe in that case dude don't have the
05:55 - tunnel have the lan
05:57 - no i mean like it's not the app it's
05:59 - more
06:01 - the live stream yeah so for example
06:04 - like it's not even bringing my picture
06:06 - and picture back up
06:07 - on the screen so that's a bit of a
06:10 - problem but
06:12 - we'll just keep going i mean my screen
06:14 - is working so that's a good sign
06:15 - and then i'll bring our picture and
06:18 - picture back up
06:19 - later okay so
06:22 - uh in that case you can you can still
06:24 - get to
06:25 - the extensions right is in the vs live
06:27 - share panel yeah
06:30 - um and if you got the terminal running
06:33 - uh the other terminal can you get to
06:34 - that
06:35 - yeah i have i have two terminals open
06:37 - and i have them both running and i'm
06:39 - gonna
06:40 - give you read and write access to them
06:43 - okay
06:44 - yep i can see the node one okay yeah
06:47 - here we go so you've got building
06:49 - javascript bundle
06:52 - attempting to open the project in a web
06:53 - browser so it should
06:56 - on your computer actually go ahead and
06:57 - pop up okay so local
06:59 - yep uh so sharepoint19006 with me
07:14 - cool
07:16 - okay so somebody says see handcast after
07:18 - using expo can we build it for ios like
07:20 - a native yeah
07:21 - so pretty much expo the only the benefit
07:23 - of expo is one you get to go ahead and
07:25 - prototype it on your own phone on a few
07:27 - other things
07:28 - and you get to share it with like like
07:30 - imagine you built it sent
07:32 - a client like a like a link or like a qr
07:35 - code and said hey like why don't you try
07:37 - it out
07:38 - like they can go ahead and try it out
07:39 - but the the only benefit to using expo
07:41 - is it's gonna be faster like it's gonna
07:43 - be a lot faster and right now
07:44 - um i actually have the phone up on my on
07:47 - my device which is
07:48 - awesome so i can actually see it on my
07:51 - screen
07:51 - over on my side which is which is crazy
07:54 - oh [ __ ]
07:55 - um i mean for some reason mine is not
07:57 - working
08:00 - it's not coming on your your screen
08:03 - no on my phone oh now it's there cool
08:08 - there we go oh now we're up as well
08:09 - we're back on the screen so
08:11 - you guys can see i've got the app
08:13 - actually up and running on mine
08:14 - uh sava says the tunnel is working as
08:17 - well awesome
08:18 - um nice rishi seeks this kanji i figured
08:22 - out how to get rid of the decimals
08:24 - uh go for it it goes decimal places no
08:27 - okay
08:28 - let's go ahead and we can try that thank
08:30 - you for that dude
08:31 - that's awesome yeah let's go ahead and
08:33 - try that so let's go down to
08:35 - decimal places and pop in no
08:40 - okay let's see if that works so i hit
08:43 - save on that
08:45 - and then it says compiling oh [ __ ] nice
08:48 - it worked
08:50 - yeah nice
08:54 - that's awesome rishi wait hold on where
08:56 - did you put it one second let me see
08:58 - i'm focusing too much on the stream now
09:00 - i'm going to just focus on the code a
09:01 - little bit
09:03 - so this one 65 965 ah okay
09:07 - cool oh that is nice that is really
09:09 - clean
09:11 - yeah i mean i would never wouldn't have
09:12 - thought no [ __ ] i wanted to just make it
09:15 - zero i know right
09:18 - yeah i think we tried zero right and
09:21 - they
09:21 - tried zero they kind of messed up it
09:23 - doesn't work yeah
09:26 - okay so that's gonna be um
09:29 - so that looks clean now and guys what we
09:31 - were on last time right is
09:32 - is you can on this app is pretty cool
09:34 - like if you guys are going on your phone
09:36 - right now what you can do is or if you
09:37 - haven't we can run through it on the
09:38 - side
09:39 - basically you enter a description so
09:41 - imagine we typed in like uh
09:43 - let's just say freelance job or
09:45 - something freelancing job and then you
09:47 - put in the
09:47 - amount of holiday that they don't see
09:50 - what you're putting so i'll
09:51 - i'll put it in yeah
09:55 - holy [ __ ] bro look at that [ __ ] every
09:57 - single type i
09:58 - every single second i write yeah
10:01 - it's a good use effect huh
10:04 - react hook this example of uh yeah
10:07 - exactly
10:08 - this is where it's generating a new
10:09 - random because it's re-rendering every
10:11 - time
10:12 - yeah which means that we've got the data
10:14 - ran math.random that's
10:16 - why it's going [ __ ] crazy every time
10:18 - we type in
10:19 - yeah so notice guys i just added in a
10:23 - job freelancing job
10:26 - for 200. and 4.99 plus 200
10:30 - is 6.99 so this total up
10:33 - income gets updated but this chart needs
10:36 - to update
10:38 - uh so the way we need to make this react
10:40 - hook
10:41 - is that i imagine this chart needs to
10:43 - update only
10:44 - after a submission happens right
10:50 - uh so we actually want to do it so
10:53 - the data set here so if you follow me
10:56 - oh i see i see okay so it should just
10:58 - follow whatever this data set is
11:01 - yeah so this data set is basically let's
11:03 - actually start building out so this data
11:05 - set is an object with a key data and
11:07 - that's just an array of the data points
11:09 - right
11:09 - yeah now every one of these data points
11:12 - goes in line with
11:14 - like you see where it's on monday
11:15 - tuesday wednesday thursday friday
11:17 - right um so we
11:20 - if we have five data points we should be
11:22 - having five
11:24 - things here so right now we've got four
11:26 - which is why the the dots aren't in line
11:28 - with the
11:29 - axi the x axis so what we want to do now
11:32 - is actually go ahead and have a piece of
11:35 - state
11:36 - which is going to represent our data
11:37 - right so let's go ahead and make a piece
11:39 - of state so i say quants
11:40 - and guys we're solving this as well as
11:44 - as you guys are seeing it so it's the
11:45 - first time we're doing it as well
11:47 - there's going to be a core experience
11:48 - for you guys to see so set data
11:51 - and this basically can you write down
11:53 - what the problem is like in just in
11:55 - comments like right here
11:57 - um yeah oops those are python comments
12:01 - all right uh put come on come on both
12:03 - yeah yeah yeah
12:05 - more and what what you want to do is
12:08 - okay so right now the problem that we're
12:09 - trying
12:10 - to solve right is we want
12:14 - um yeah so we want to
12:17 - we want to have all of the data right
12:20 - so so the first problem is we want to
12:22 - have this in a variable
12:24 - right so so we want to end a piece of
12:26 - state so so even this math.random we
12:28 - don't want it here
12:29 - i just want it in a piece of state up
12:31 - here so that's the first point
12:33 - and the reason why is because once it's
12:35 - in a piece of state we can control it we
12:36 - can manipulate it we can change it we
12:38 - can do stuff with it
12:39 - if it's just here hard-coded we can't do
12:41 - anything with it
12:42 - right so that's the first problem so
12:45 - this data set needs to be in a piece of
12:47 - state so what i'm going to do is i'm
12:48 - going to copy that
12:50 - go up here and i'm just going to pop it
12:51 - in here so the default value
12:54 - is going to be an object with data
12:55 - inside of it right
12:57 - data set needs to be in a state uh
12:59 - variable there we go
13:00 - and then what we're going to do is we're
13:02 - going to go ahead and replace
13:04 - the one that we're using here so the
13:06 - data set okay so this is actually an
13:07 - array
13:08 - of an object okay but yeah it's array of
13:11 - an object
13:12 - right so in this case
13:15 - what we need is this needs to be an
13:18 - array
13:19 - of an object so we need to match that so
13:22 - an array of an object
13:25 - so sunny and then we can do it okay okay
13:27 - okay go ahead so i'm like just trying to
13:29 - yeah so basically
13:31 - it is the problem of
13:34 - if i log my amount of money that i made
13:37 - today
13:38 - and i keep logging it it just needs to
13:41 - keep
13:42 - being put in that data set right
13:45 - like every time i hit add gig and i add
13:48 - the thing
13:48 - it should add it to that data set yes
13:51 - exactly got it and then it needs to add
13:54 - it
13:55 - it needs to add it with my
13:58 - dollar amount along with the descript um
14:02 - the description along with the date
14:06 - yes so the way it works is kind of weird
14:08 - right like the way they
14:10 - the way that their sort of api works so
14:11 - like it takes a data set and you can
14:13 - have several data sets we're only going
14:15 - to use one right so in our case we've
14:17 - got this
14:18 - this array of data sets but hold on just
14:20 - one second so for example if i put in
14:22 - a 300 amount for that day
14:25 - where do i put how are we planning to
14:28 - store the
14:29 - date next to it because in python for
14:31 - example what i would do is i would have
14:32 - a
14:32 - array of tuples and i would have 300
14:35 - along with like whatever the date is
14:38 - right 10
14:39 - um october 27 2020 and it would be like
14:42 - that
14:43 - and then i would have yeah you see what
14:45 - i'm saying so that's how i would store
14:46 - the data sets
14:47 - the number along with the date of when
14:50 - it was submitted
14:51 - so in this case what it looks like is we
14:54 - need to generate some kind of data
14:56 - data structure which is like this oh
14:58 - [ __ ] um
15:00 - some kind of data structure which looks
15:01 - like this so like imagine i'm just going
15:03 - to comment it here
15:04 - yeah just imagine writing comments go
15:06 - ahead because imagine like if you have
15:09 - four so these are going to be each day
15:11 - for example imagine this is today
15:13 - all right so monday is today tuesday
15:15 - tomorrow and i'm sorry
15:17 - imagine thursday was today wednesday was
15:19 - yesterday tuesday was the day before
15:21 - that and monday was the day before that
15:22 - right yeah
15:23 - now this is going to be the value for
15:25 - this day
15:26 - this is going to be the value for this
15:28 - day this is going to be the value
15:30 - today and this is going to be the value
15:32 - for this day wait wait wait okay okay so
15:34 - what we so hold on so what um
15:39 - i understand can you see the graph let's
15:41 - save it and then what we can do is we
15:43 - can show it in a
15:44 - really clear way so i get what you're
15:46 - saying this
15:47 - this represents this is attached to that
15:50 - right there
15:51 - the the zeroth point on this and the
15:53 - first point
15:54 - so they're like basically mapped by like
15:56 - position of the indices
15:59 - yeah that's what it looks like right now
16:01 - okay
16:02 - but how well when i type in my number
16:06 - here like
16:07 - let's say i made 200 will it no because
16:09 - it's just gonna add it as a fifth point
16:12 - on
16:12 - in this array no yeah so what we need to
16:15 - do
16:16 - is we need to do a user effect so
16:18 - imagine this
16:19 - this data structure we're gonna have
16:20 - like an array right as in like an object
16:22 - sorry
16:23 - or an array i mean we'll figure out what
16:25 - we need but we need like an array
16:26 - of objects and then that object would be
16:28 - like the date so you would have one kind
16:30 - of date
16:31 - and then you'd have a number so imagine
16:32 - for that date you made two thousand
16:34 - dollars right
16:35 - that's what that's what that's what i'm
16:36 - saying that's what we're looking for an
16:38 - array of objects that that's that's
16:40 - it if we have that data set we're good
16:42 - that's all we need
16:43 - yes perfect exactly and what we're gonna
16:45 - do is we're gonna we're gonna have this
16:47 - uh variable being manipulated and
16:50 - changed in a use effect
16:52 - which every single time i understand uh
16:55 - data gets added to
16:56 - data set it groups again yeah yeah i
16:58 - just wanted to understand the logic of
17:01 - the problem
17:02 - like regardless of the complexity of
17:05 - react
17:06 - involved in it but i understand what
17:07 - you're saying now with the whole thing
17:09 - with like okay so
17:11 - this is going to be our data structure
17:13 - but then we're going to use the
17:15 - react way of doing it and add that to
17:18 - this
17:18 - so then every time we actually hit
17:19 - submit it adds it in a nice way
17:23 - exactly exactly that okay
17:27 - so we have this array here
17:31 - and this will be the data set
17:34 - um but it's kind of um
17:38 - so this even our labels needs to be like
17:40 - it needs to kind of be
17:41 - it needs to be thought out quite
17:42 - cleverly how we're going to do this yes
17:44 - um so what we we could do is we could
17:47 - have two
17:50 - we could have two two pieces of state
17:53 - one for the labels one for the data sets
17:56 - um i would prefer to have like one which
17:59 - had everything inside of it
18:00 - so we could have like a date uh this is
18:02 - going to be an array yeah one is an
18:04 - array of data
18:06 - i think one piece of state that's an
18:08 - array of
18:09 - objects so then it can hold the date
18:13 - and the amount
18:16 - because no because what we need is this
18:18 - is going to give us this right
18:20 - but you see here it accepts an array of
18:22 - the data points so how do we can
18:24 - translate this to the array of data
18:25 - points and where do we store that
18:26 - can we can just we can just write a
18:29 - function that can
18:30 - turn this into this type of thing right
18:34 - right after yeah we could do that yeah
18:37 - so we could do that so it could be a
18:38 - function which which takes this object
18:41 - and returns back the data points
18:43 - and then this one right yeah yeah like
18:46 - for example
18:48 - um it'll be like get the key for this
18:50 - yeah i'll be getting the keys for
18:52 - these i mean
18:55 - that's the [ __ ] tricky point because
18:57 - then what it would need to do is like
18:59 - the label will say mon and then another
19:01 - time mon
19:02 - and then another month right no but
19:05 - that's where the use effect will come in
19:08 - and it will have
19:09 - um a grouping so every time it changes
19:13 - um it would group right so that i saw
19:18 - that
19:21 - holy [ __ ] bro
19:26 - oh man
19:28 - [Music]
19:28 - [Applause]
19:32 - if marabon was here
19:40 - oh man all right so
19:43 - somebody says use memo will be cleaner
19:45 - yeah so dude once we get it done right
19:47 - what we can do is we can memoize it
19:50 - which means memo means like if it's an
19:52 - expensive calculation
19:53 - right you can memo it like you can use
19:54 - it called a memo and it basically cleans
19:56 - up the
19:57 - operation so it's a lot quicker every
19:58 - time it runs um
20:00 - it sounds like you're saying
20:01 - memorization incorrectly memoization
20:09 - no you're saying it i'm saying that when
20:12 - you
20:12 - say that word to normal people it sounds
20:15 - like you're trying to say memorization
20:17 - but you're saying it incorrectly oh yeah
20:19 - but the word is actually
20:21 - memo isaac memoization
20:24 - i'm white yeah oh thank you so much
20:26 - stephen he says congrats and your nieces
20:28 - appreciate it okay so the data
20:32 - here would be this and then okay so
20:35 - let's just kind of like map out because
20:36 - it is kind of a positive it's a bit of a
20:38 - tricky
20:39 - situation so we've got this so now we're
20:41 - going to do is we're going to have an
20:41 - array so firstly it's going to be an
20:43 - array
20:44 - uh and then we're going to have our data
20:46 - points so let's just
20:47 - structure as we expect it so we're gonna
20:50 - have my david's data point so the first
20:51 - one would be something like
20:52 - new date let's just stay up with this
20:55 - new day
20:56 - um and then this one would be um
21:00 - wait where is it oh you know so we got
21:02 - this
21:05 - oh yeah that's a key sorry um the date
21:08 - oh okay now we got another issue
21:12 - wait is the key can't write it um you
21:16 - could do it like that oh that's how the
21:18 - dynamic jesus is really yeah
21:21 - yeah it's pretty weird right and then
21:24 - you can have something like um
21:26 - 2000 yeah yeah yeah okay that's cool
21:28 - that makes sense yeah so you could do
21:30 - something
21:31 - and then the second one would be
21:32 - essentially the same thing but it'll be
21:34 - so what
21:34 - what does this become does it by default
21:37 - become the date of today
21:38 - new date yeah but that would be today's
21:41 - date yeah
21:43 - right so that's going to be today's date
21:45 - um and then this one would be
21:47 - uh let's just try and get yesterday's
21:49 - date in an easy way so
21:51 - a new day minus one for yesterday i'm
21:54 - just googling it quickly
21:56 - uh i mean let's just just hard code oh
21:58 - we probably
21:59 - we don't want a hard code because we
22:00 - want the data object
22:02 - yeah i just want to kind of get like a
22:04 - very quick sort of yeah
22:06 - i like i'm sure the more tangible mvp
22:09 - we can put together then it's easier to
22:11 - solve the problem
22:12 - like the less abstract we can make it
22:15 - the
22:15 - easier it is to actually solve the
22:16 - problem
22:18 - exactly just because you just kind of
22:20 - kind of get to a point where you can see
22:21 - your data structures and things like
22:23 - that
22:23 - yeah that's what i always try to just
22:25 - desperately get to as fast as possible i
22:27 - want to see my data points
22:29 - and let's not forget us okay it's not
22:32 - this kick
22:32 - so logo hold on one second
22:36 - what the dude you
22:39 - just put like a fire emoji or a pistol
22:42 - emoji or a right or something
22:46 - there you go uh save it make sure you
22:49 - save it
22:51 - oh yeah that's spam the save there we go
22:57 - so
23:00 - mine's being slow as hell um you are
23:02 - you're sharing
23:04 - uh yeah you are sharing it so i can load
23:05 - it up so yeah i can see it
23:07 - it's just um really small
23:10 - so i'm gonna make it easier for people
23:13 - to see
23:14 - console let me go ahead
23:18 - it's a bit smaller as well okay
23:21 - so so what we can see is we open the
23:24 - console
23:25 - we've got the array so it says debug and
23:28 - it's got the array inside of it and it's
23:29 - got today's date
23:30 - one time and everything yeah one it's
23:34 - actually got some weird
23:36 - word what one where do you uh
23:40 - so you see that that that weird string
23:42 - right yeah right here yeah that's
23:44 - that's actually yeah so it's got the
23:46 - date and then on top of it it's got some
23:48 - other weird one right that's it
23:49 - so so why is it unix right okay so is
23:52 - this
23:53 - a hold on one second
23:56 - this array has two items right why does
23:58 - it say length one
24:01 - because length one means oh shh
24:05 - this is because of this this is my this
24:07 - is uh
24:08 - maybe here we have an object because you
24:10 - have to get rid of them you have
24:12 - two items in the array
24:15 - wait hold on this is not an this is not
24:17 - an array of
24:18 - objects it's just one what do you is it
24:22 - this is an object we wanted an array
24:24 - right we wanted an array of objects
24:27 - so yeah we want a of objects yeah that's
24:30 - it
24:30 - exactly why close your parentheses bro
24:34 - this is the [ __ ] cutest [ __ ] i've
24:37 - ever done
24:38 - live
24:41 - holy [ __ ]
24:46 - dude that's like bro ship on another
24:49 - level like i'm closing your parentheses
24:51 - now
24:52 - yeah this is deeper level of
24:54 - understanding than any
24:55 - relationship i know right it says okay
24:58 - so
24:59 - new date minus one gave us a unix
25:02 - value which we don't want we want just a
25:05 - clean yesterday value
25:06 - so
25:07 - [Music]
25:11 - how do we get that how do we get
25:19 - we just want something simple um
25:27 - there's a few ways you can do it but i
25:28 - don't really want to use moment
25:30 - okay you know what let's there's
25:31 - actually a spring moment in because
25:32 - we're going to need moment anyway
25:33 - subtraction hey man i heard us
25:36 - deprecated
25:39 - yeah somebody says guys somebody
25:47 - hold on hold on maybe it is bro hold on
25:49 - one second deprecation
25:51 - warning wait that was in 2017. [ __ ] that
25:54 - maybe yeah and i don't care bro it's too
25:57 - late
25:58 - paul says it is i haven't had a moment
26:02 - being deprecated deprecated
26:04 - i don't bro i just don't believe anybody
26:06 - until it doesn't work for us anymore
26:08 - like just try it and if it works for us
26:10 - then it's not that right
26:12 - apparently
26:15 - let's see but it's heavily used okay
26:18 - so yeah i thought
26:22 - moment.js thank you for your service go
26:24 - down
26:25 - um okay but it still can be used right
26:29 - yeah okay cool because like spectacle is
26:31 - deprecated but i use it every single day
26:35 - yeah exactly and it's like it's great
26:38 - so i'm going to go into the terminal and
26:40 - i'm just going to put in
26:41 - npm install moment dash dash save so
26:44 - if you come on j on the time in ps code
26:47 - um
26:50 - all right what type of stuff are you
26:51 - trying to tell me to do so open up vs
26:54 - there we go the [ __ ] are you doing bro
26:56 - save what is that you don't do that
26:57 - anymore no no i copied and pasted it
27:00 - from a deprecated
27:06 - a good way to start things
27:09 - oh man because the good thing the moment
27:13 - is you could just do like a moment
27:15 - subtract one day yeah and it will give
27:17 - you the exact
27:19 - yeah dude i write such clean
27:22 - code like when i actually get time to
27:25 - turn some
27:25 - i remember i was writing these like you
27:28 - know that text that
27:29 - we get sent for the automated text
27:31 - testing and
27:32 - stuff or the income numbers and stuff
27:34 - like that
27:36 - yeah i wrote like the most beautiful
27:39 - moment
27:39 - piece of code that would sum up the
27:42 - stripe
27:42 - numbers and then turn it into like one
27:45 - date from like
27:46 - stripes garbage unix numbers it was so
27:49 - satisfying when it turned to like one
27:51 - line of just
27:53 - beautiful code and then we got butler
27:55 - and we ended up like not using
27:56 - at all any of what i did but whatever
28:02 - i mean it was that story was really good
28:04 - until it went
28:05 - really bad
28:10 - boys moment today um oh god okay
28:13 - so somebody actually gave he goes let d
28:15 - equals new date
28:16 - set date get date minus one yeah i saw
28:18 - that dude um
28:19 - [Music]
28:21 - dude we we don't care just whatever
28:24 - [ __ ] works works i'm not religious to
28:27 - [ __ ] deprecation and none if
28:30 - this works and it's easy then i'm going
28:32 - to just do it
28:34 - yeah exactly which one how do you do
28:36 - moment i think that's just
28:37 - you just thought and that should
28:38 - generate a um
28:40 - moment get today get a moment.now or
28:44 - something right is that how it is
28:46 - or no about that yeah so it's just
28:48 - moment yeah okay
28:49 - so that's today and then to get uh
28:51 - yesterday we do moment
28:53 - dot uh distribution and then just do
28:55 - minus subtract and then um
28:58 - one day one and then days exactly
29:02 - and let's go here
29:05 - yes and then save
29:12 - we should get the correct stuff now
29:14 - should we
29:15 - have to refresh or what uh yeah i'm good
29:18 - yeah so so 29th and 28th
29:22 - so oh because you're in my terminal
29:27 - i mean i've got the locals that's what i
29:29 - mean that's what i mean you're in my
29:30 - local host that looks clean
29:31 - i like it nice okay that's dope so now
29:35 - we've got
29:36 - we're kind of got like a mapped data
29:38 - structure right yeah um
29:40 - oh what we should do dude is actually
29:43 - let's get
29:43 - working with dummy data first build
29:45 - those functions that
29:46 - plug in the data from this and then we
29:48 - can go ahead and build from that
29:50 - that is the only way i do things
29:53 - i i like to my brain is a little dummy
29:56 - sometimes so i like to start with dummy
29:58 - data first
30:00 - oh yeah let's do that so then this one
30:02 - and then what we'll do is we'll say like
30:04 - my rule is never ever absolutely
30:08 - no case use your thinking until you
30:11 - absolutely absolutely have to there's no
30:13 - other way around it then i will
30:15 - think yeah and it's true if you just
30:18 - take a step back kind of mask it out
30:21 - first
30:22 - it will make it a lot easier guys
30:24 - because like even now that we just
30:25 - drafted it out like this
30:27 - as opposed to kind of like if you just
30:29 - constantly kind of code
30:31 - the solution like raw it's kind of so
30:34 - suddenly says packages have yet
30:35 - don't worry about that now guys like you
30:37 - can optimize things when it gets
30:39 - do not care because i can have yeah like
30:43 - if there's a day where i'm just really
30:44 - bored i can sit and optimize it that's
30:46 - not a problem at all like you can easily
30:47 - turn it into
30:48 - vanilla javascript code afterwards
30:51 - yeah also bro i was watching did you see
30:54 - um
30:55 - firebase summit is live right now oh
30:58 - integration with strike
31:00 - oh [ __ ] stripe yeah so now you can do
31:04 - uh dude description payments hold time
31:06 - hold on why don't we
31:08 - watch their video and react to it like
31:12 - and and record oh
31:15 - let's do that let's do that you know
31:17 - what i mean and then like
31:18 - we just react to that video and like
31:20 - watch it
31:22 - let's do it i'm down you know let's do
31:24 - it because because i was uh
31:25 - i watched day one and that was dope and
31:28 - then what are you doing watching this
31:29 - [ __ ] without me bro this is my
31:31 - do you i went to go send it to you and i
31:34 - literally i don't know what the [ __ ]
31:35 - something took my my shelf and i was
31:37 - like oh [ __ ] that you know i just really
31:39 - e3 like e3 the gaming convention yeah
31:43 - dude it's like my fix i used to
31:45 - religiously watch e3
31:48 - every year and i would watch like all
31:50 - the conference on like apple and stuff
31:52 - like that
31:53 - now we could watch firebase freaking
31:56 - conference you know that would be sick
31:58 - yeah it is man because i was watching it
32:00 - and i was like oh man i was like damn
32:02 - and then they had some stripes off and i
32:04 - was like oh [ __ ] there's fixing a
32:06 - huge problem and they made it so easy
32:09 - now to do
32:10 - subscription stuff and uh like
32:13 - dude with like five lines of code there
32:15 - was full subscription handling
32:17 - and i was like wow yeah it's insane
32:21 - bro even invoices
32:24 - everything sent from stripe wait hold on
32:27 - so basically
32:28 - everything we did now can be done with
32:31 - just a few lines of code or something is
32:33 - that what you're telling me
32:36 - no i think it's more of a case of no not
32:39 - from
32:39 - not from that perspective okay okay okay
32:41 - i see it cuz that was pretty checked
32:43 - you know i'm still using i'm still using
32:45 - our app like it is
32:47 - actually useful yeah daniel was showing
32:51 - me as well
32:51 - danielle uses it i use it and when i
32:53 - don't use it it's extremely painful the
32:55 - entire
32:56 - process without it is extremely painful
32:58 - i need to update
32:59 - uh the the name list as well yeah yeah
33:03 - yeah the nameless or like make it in a
33:05 - way where we can add a name
33:06 - because i am constantly making my name
33:09 - frankie yeah yeah i was thinking that
33:12 - i'm like [ __ ] i'm not giving i'm not
33:14 - giving my sales to michael
33:17 - we also have to do um a tray
33:21 - right uh yeah because
33:24 - yeah yeah we have to update trey because
33:26 - for pwj i think it's uh
33:28 - giving us some funky information yeah
33:32 - okay um so now the data structure should
33:37 - be said
33:37 - so we've got everything in there
33:43 - yeah honestly and and a man i just love
33:46 - and dude i watched the firebase thing
33:48 - right as i was watching and i was like
33:49 - okay
33:50 - this video must be popping right now
33:52 - yeah it had
33:53 - 22 likes and i was like how the
33:56 - [ __ ] does nobody know about this stuff
33:59 - like
33:59 - and how the hell how the hell are they
34:02 - not reaching out to us
34:05 - i know i'm i was wondering i was like we
34:07 - literally are like your biggest users
34:09 - and then they were like
34:10 - um yeah we should we should reach out to
34:12 - them
34:13 - yeah i don't think like is it firebase
34:16 - summit
34:17 - guys let us know in the comments are you
34:18 - watching it right now the firebase
34:19 - summer have you guys seen that
34:21 - because they have some awesome stuff to
34:23 - drop in you know
34:24 - let's see what's going on under 287
34:27 - subscribers
34:28 - damn um
34:31 - we're crushing them
34:34 - dude we're crushing firebase that's
34:37 - pretty sad
34:38 - right we should be sponsored by firebase
34:41 - that would be dope that'd be like
34:43 - the i would easily say like hell yeah
34:45 - i'll chat them up for hours
34:49 - yeah that would be that would be really
34:52 - really dope
34:54 - yeah man
34:59 - all right okay i'm going to just leave
35:01 - this here and i'm going to come back to
35:03 - it
35:04 - yeah probably never
35:07 - we're going to create two helper
35:08 - functions right
35:10 - one is going to get all of the dates as
35:12 - in from our
35:13 - all of these keys have to damage
35:15 - thumbnails no wonder they're not getting
35:17 - any views
35:18 - i know yeah and their titles
35:24 - they could use some help we'll help them
35:26 - out
35:28 - um so what we can do now
35:32 - is we can actually go ahead and do this
35:34 - so we can say const
35:35 - get let's call it get dates right yes
35:39 - and it's going to be an arrow function
35:41 - and what we're going to do is we're
35:42 - going to say data
35:44 - i mean this could actually be a
35:45 - one-liner i think oh you got some music
35:47 - to play bro
35:48 - there's some music yeah let's do it man
35:50 - let's do this look this one
35:52 - [Applause]
35:54 - this one yeah all right so this one's
35:58 - pretty sick so if we do cons get dates
36:00 - and then turn it a little bit low
36:02 - because it's too loud
36:04 - hey
36:07 - nice oh sick paul oscar says it'll be
36:10 - awesome to introduce typescript in some
36:12 - series it's become quite industry style
36:14 - and it's [ __ ] awesome yeah
36:15 - dude i agree i love typescript as well
36:18 - and
36:18 - we've never touched on it on the channel
36:20 - and they say it's really good for anyone
36:22 - who's come from a strongly typed
36:23 - language so java c-sharp those kind of
36:26 - things
36:27 - yeah um you're fans of it
36:31 - um okay so get dates what we're gonna do
36:32 - is we're gonna say return data
36:34 - dot and you can actually do this now
36:36 - because data is an object
36:37 - right voice it's an array oh
36:41 - okay so what we need to do is we need to
36:43 - say data
36:45 - well technically dude hold on what are
36:48 - you trying to do just one second
36:50 - i want to be on the same page with you
36:52 - so okay you're
36:53 - when you say get dates what does what
36:55 - should it look like can you just show me
36:56 - the raw naked
36:58 - [ __ ] that it should look like yeah so
37:00 - our end result
37:01 - should be an array that we're returning
37:04 - like this and it should have date one
37:05 - day two
37:06 - day three day four okay cool
37:09 - like this right that's what we want and
37:10 - this is our current data structure
37:12 - right so we have an array of objects
37:14 - okay so so
37:16 - so you're saying that get dates should
37:18 - uh
37:19 - get should get all of these dates
37:22 - here so like for example it should
37:26 - catch this date and put it in there and
37:29 - then take that date and put it in the
37:30 - next one
37:32 - yep so what we can do is we can use a
37:34 - map for that so we can actually go ahead
37:36 - and say
37:36 - something like uh const dates
37:40 - equals data dot map
37:43 - and then for every single uh
37:46 - data point oh no we choose which we call
37:48 - these like like
37:50 - a tuple but what should we call it like
37:51 - um um
37:53 - call what i'm sorry so every time you
37:55 - map through it what what do we refer to
37:57 - as like a data point or something like a
37:59 - data set
38:00 - or um yeah i from the python world just
38:03 - call it a tuple
38:04 - like but it's actually a tuple this is
38:07 - an
38:08 - object or a pair yeah
38:11 - we can say data don't map we'll just
38:14 - call it a pair
38:15 - yeah so if every pair we want to get the
38:18 - um key so we're going to say pair
38:22 - dot key i think you can do that because
38:24 - we've got an object no no
38:25 - we're going to say object so
38:28 - map and get the object dot key i think
38:32 - we do it as i said no it's not that
38:35 - um hold on one second is it
38:39 - we're going to get this back which is um
38:43 - we all we want is the key of the object
38:47 - yeah so
38:50 - oh yeah we just want the key that's
38:52 - right what's uh
38:54 - but there's a there's a really nice way
38:56 - of doing this there's a really nice
38:57 - we're doing because we have an
38:59 - array here but there's so people people
39:02 - saying date stop set
39:03 - dates forget they no don't do it that
39:06 - way
39:12 - um
39:17 - yeah oh is it called hold on
39:27 - okay let's just do let's try so when you
39:29 - map through
39:30 - an array objects i think you can do
39:33 - object.keys right
39:36 - yes oh that's yeah i think that's it
39:37 - i'll put it on keys
39:39 - and then we can do uh and then that
39:42 - should give us a
39:43 - uh the key button that would be the
39:45 - first one just do
39:46 - object uh object.keys yeah because
39:49 - there's only
39:51 - one key in that object and we'll get the
39:54 - date
39:55 - and then that will map through every
39:57 - single one and bubble up into an array
39:59 - uh what is the zeroth [ __ ] what what is
40:02 - the need for this
40:02 - index because it it's going to give us
40:06 - an array back
40:07 - but i think it's only gone
40:10 - use that element wait hold on i don't
40:12 - understand yes
40:13 - it would only be that element but the
40:15 - return type for object.keys is an array
40:18 - we can try it we can try we can go ahead
40:20 - and console.log this so we can say
40:22 - console.log
40:22 - getdates oh object.keys
40:26 - yeah it gives you see what i'm saying
40:27 - it's gonna oh i see i i got it i got it
40:30 - i got it
40:30 - i got it okay cool cool cool got it you
40:32 - just want the because you don't want the
40:34 - i understand
40:34 - i understand because yeah even though
40:36 - even only going to be one
40:38 - you're going to have it as yeah so
40:39 - basically if it's something like
40:41 - 10 27 like october 27 uh
40:44 - 2020 instead what you actually want
40:48 - is just 10 27 2020 and i
40:52 - obviously it's a date time object i
40:54 - understand so you want that instead
40:56 - yeah cool got it exactly um oh paul said
40:59 - a good one he goes uh
41:01 - you can also use the whole data set as a
41:03 - dictionary where keys are dates and then
41:05 - just use
41:06 - object or keys oh [ __ ] let's try this
41:08 - i've never i haven't done that in a
41:09 - while so
41:10 - let's see that how to create a
41:11 - dictionary with key value pairs
41:13 - um do you want to just do a simple
41:16 - version that works first and then you do
41:18 - it
41:18 - or do you think it's worth simplifying
41:20 - it right now
41:22 - yeah we'll do it this way first we'll do
41:23 - it this way first you're right otherwise
41:25 - i'm getting carried away so you should
41:26 - they
41:27 - get dates let's call that and see what
41:28 - we get so we'll say debug two
41:30 - let's just call this one the dates what
41:33 - are you expecting to get right now
41:36 - expecting to just get this right now
41:38 - right like actual dates
41:39 - yeah we should get the dates in that
41:41 - form cool
41:42 - okay save refreshio react native
41:49 - my favorite there we go nice
41:53 - hey let's go bro
41:56 - one time bro hashtag one take
42:01 - one take that's it now i just i do want
42:04 - to explore that
42:05 - that the dictionary what's he done the
42:07 - short right hand
42:08 - oh okay so dictionaries this she's just
42:10 - going to be an object
42:12 - as such so no objective johan
42:15 - um okay you could do it that way
42:19 - but no i i know i
42:22 - yeah wait wait wait hold on what are you
42:25 - doing bro let's just go to the next step
42:26 - we got the race this one's
42:28 - good what we can do is we can actually
42:30 - really make this quite sweet you can
42:31 - actually go ahead and say if you only
42:33 - have one line of code
42:34 - don't worry but nobody isn't it will
42:36 - keep everything
42:37 - really slick like you just do this you
42:39 - just do all right
42:41 - that's it okay okay cool sick
42:45 - so now this gets us what we want right
42:48 - yeah and that will give you a direct
42:49 - return
42:50 - when it maps through and gets us that so
42:52 - now we know how to do it really nicely
42:54 - for the key all we need to do is the
42:56 - same thing for the
42:58 - um the values now so we can actually go
43:00 - ahead and say get
43:01 - uh so if the first one was a date we can
43:04 - say get amounts
43:05 - maybe yeah if you didn't have this
43:07 - indices by zero then
43:09 - what we would actually get back but this
43:12 - would actually
43:13 - this thing would end up returning an
43:15 - array of arrays
43:17 - yes because we're getting a raise yeah
43:20 - yeah cool this is where i saw like guys
43:23 - this is where data types and all that
43:25 - sort of like the way of thinking comes
43:27 - into play because like
43:28 - if you did like what cause you said then
43:30 - you didn't have the zero
43:31 - you'd be kind of like mine you couldn't
43:33 - easily get quite mind [ __ ] in the
43:35 - beginning
43:36 - because you'd be like oh my god what
43:37 - where am i doing an array inside of an
43:39 - array and it kind of like gets confusing
43:41 - so just understanding the fundamentals
43:42 - makes it all a lot easier
43:44 - so you can say object dot value object
43:47 - or entries no entries is both
43:49 - we can say object or values and that
43:52 - should give us the
43:53 - amount so now i'm going to do zebra log
43:55 - that's
43:56 - easy easy money
44:05 - object mean i think it's values i'm sure
44:09 - it's values yeah yeah yeah
44:11 - [Music]
44:12 - there we go
44:15 - that's that's pretty okay
44:20 - so now we the data structure
44:23 - um what we can do is mj can i i got a
44:26 - question
44:26 - for you i got a question for you
44:32 - if um a lot if all these dates were
44:35 - subtract by two days subtract by two
44:37 - days subtract by two if they were
44:39 - all the same yep
44:43 - no remember we need the intermediate
44:45 - step afterwards which would do the
44:47 - grouping
44:48 - right got it yep yep yep yep i
44:50 - understand though yeah
44:51 - that would be another step before i
44:52 - should do that okay this is really good
44:55 - man because this is actually even i was
44:56 - thinking i was like i'm not sure how
44:58 - we're gonna break it down the best way
44:59 - but this is
45:00 - awesome like yeah we're solving it piece
45:01 - by piece and then reversing it and doing
45:03 - other stuff so
45:04 - we've done this now what we're going to
45:06 - do is we're going to swap in
45:08 - our data set values with that new stuff
45:10 - right so instead of this
45:12 - we're going to use get amounts over here
45:16 - oh snap son it's about to work already
45:20 - i'm [ __ ] hyped i know right this one
45:23 - will be get
45:24 - what does this get done get dates
45:27 - get dates yeah that's what aaron's life
45:30 - is about right now
45:31 - let's go save and let's [ __ ] go bro
45:35 - and now we should have a nice looking my
45:38 - life is about get a mouse let's
45:40 - go all right
45:44 - see oh dope there we go nice man
45:48 - refresh your screen hold on hold on i
45:50 - don't see anything yet
45:51 - don't get excited so the x-axis is a
45:54 - little bit [ __ ] but
45:55 - we'll fix it holy [ __ ] i don't see [ __ ]
46:00 - my screen is just white so go ahead and
46:04 - try to damn son it works
46:09 - yeah 5500k in one day
46:14 - bro what are we talking here hold on
46:17 - fine that's
46:17 - five million five hundred thousand
46:19 - dollars in one day
46:21 - that is a good sunday
46:25 - the k the k pot needs the uh that's
46:28 - where we need to
46:29 - so this k where we have the y axis um on
46:32 - line 79
46:34 - that is going to be an issue because you
46:37 - if you're you're going to have k
46:38 - attached to a use effect or whatever
46:40 - is our intermediate step it has to
46:42 - account for that otherwise we're
46:44 - displaying [ __ ]
46:44 - and otherwise we're displaying it in the
46:48 - wrong way
46:49 - that's it guys you got abdullah says
46:52 - this is nice we appreciate your time
46:53 - ninji thanks guys
46:54 - turn that music up bro that music is
46:56 - [ __ ] getting me lit
46:58 - it's good right it's lit bro um for some
47:02 - reason on my phone it hasn't updated yet
47:04 - the app but it's working on the web i
47:07 - can see it on the web
47:09 - yeah dope okay so we've done that
47:12 - that's fantastic now so now hold on
47:15 - before we continue
47:17 - um now what we need to do is when you
47:20 - say
47:20 - intermediary step when you say okay so
47:24 - i i want to get it to like crystal
47:26 - clarity before we move forward because
47:28 - otherwise
47:29 - then like i'm just going off of what
47:31 - you're saying i also want to just
47:33 - understand
47:34 - so when we're doing the group buy
47:37 - right yeah is that happening
47:42 - that are we gonna have that happen
47:44 - afterwards
47:45 - like after these functions are done
47:48 - calling
47:49 - or is the grouping actually happened uh
47:52 - gonna happen like right as
47:55 - these are coming in like is that an
47:57 - intermediary step
48:00 - so there's a really nice way to handle
48:03 - this gracefully right
48:05 - um and the way we do it is and you said
48:08 - can you show me like a literal example
48:10 - of like in a comment
48:12 - what it will look like once the group
48:14 - buy is done
48:15 - what will that actually do yeah so
48:18 - imagine we had like
48:20 - a day here which was the same day this
48:22 - day was the same day we had another day
48:23 - which was
48:24 - literally the same day here what it's
48:26 - going to do is it will turn
48:28 - this data set into the following right
48:30 - so we'll have this data set
48:33 - well it won't look like this it will
48:34 - look like something like this
48:36 - it will have so imagine this is the data
48:39 - here
48:41 - so we have this it will have rather than
48:44 - having it like this we have the date
48:47 - repeated three times
48:48 - it would accumulate this so you would
48:50 - now have whether this is
48:51 - three thousand so you'd have five fifty
48:53 - nine fifty so you'd have
48:55 - nine five and then you would basically
48:57 - go ahead and have this
48:59 - so now this this date would accumulate
49:02 - up to it will bubble up to this amount
49:04 - okay um feeler says this channel has
49:08 - become a netflix without me noticing i
49:09 - spend my time watching videos there
49:11 - awesome
49:11 - i love that all right so that's going to
49:13 - be awesome for that and then this one
49:14 - where we've got the same day it's gonna
49:15 - find these keys and it's gonna say okay
49:17 - like we have the same key here
49:19 - so let's just add up on this value so
49:21 - it's gonna be 11k
49:22 - right so this one's actually gonna be 11
49:25 - 000 and then it will bubble up and now
49:26 - we have this
49:27 - so you see like what happened there
49:28 - basically bubbled down
49:31 - from this to this
49:34 - right uh okay okay okay i understand
49:37 - cool
49:38 - that's really good to just see it
49:39 - tangibly my brain has to do
49:41 - no um
49:44 - translating in like no processing power
49:47 - is now being used by my brain
49:48 - i can just see it yeah and to be honest
49:50 - it really is um
49:52 - it's really uh nice to actually have
49:55 - that now as
49:56 - a comment so that when we were building
49:57 - it it's very visible like okay
49:59 - because as much as it may seem that
50:01 - you'll remember that when you kind of
50:03 - get into a brains like when you're
50:04 - thinking about stuff and all that
50:06 - you can very quickly kind of go like oh
50:07 - and then things get overlapped and
50:09 - before you know it you just can't even
50:10 - make sense of anything
50:11 - yes i hate that i i actually love doing
50:14 - the
50:16 - the work up front of because like i
50:18 - never trust me i never
50:19 - want to actually write this out because
50:21 - i'm like oh it's just faster if i just
50:23 - spend this time [ __ ]
50:24 - coding but once this is done which is
50:27 - also why i like doing test driven
50:29 - development too because once this is
50:31 - done
50:32 - it's so much easier to code and explain
50:36 - and honestly another reason why i like
50:37 - it is for the people that are watching
50:39 - it's so much easier when it's done this
50:41 - way because otherwise the thinking is
50:43 - happening only either in your head or my
50:45 - head
50:46 - exactly and guys it really does make a
50:48 - difference because like as much as
50:50 - like like as he said like when you go
50:51 - and hack away at the code trust me like
50:53 - even in the beginning of this i was kind
50:55 - of confused just like oh how are we
50:56 - actually going to break down the problem
50:58 - and
50:58 - but then like after we literally broke
51:00 - it down to these two lines now
51:02 - everything kind of makes sense and like
51:03 - even doing this comment it starts to
51:05 - make a lot more sense as the next step
51:07 - yeah so
51:08 - if you ever feel like oh i don't know
51:10 - what's next do i have no idea what i'm
51:12 - doing next
51:13 - it's completely a fine place to be just
51:15 - like break it down and trust me the next
51:17 - step will naturally appear is you just
51:19 - do that right i love what fella said
51:21 - he's like this channel's become my
51:23 - netflix without even me
51:24 - noticing i spend all the time watching
51:27 - your video they're awesome
51:29 - and then another comment i really love
51:31 - is abdullah
51:33 - nick holy amar says the real-time
51:37 - thinking thoughts really add
51:40 - quality compared to an actual
51:42 - pre-planned tutorial
51:44 - yeah i actually raised that's actually
51:47 - really true right sunny because as we're
51:50 - going through it
51:51 - and working through this problem i think
51:52 - it's actually a lot better than you
51:54 - having it pre-planned and solutioned out
51:56 - because now
51:57 - people can see the thinking process
51:59 - behind it and in an interview this is
52:01 - actually the type of thinking you have
52:02 - to do live
52:04 - exactly and yeah 100 i couldn't agree
52:06 - more like uh
52:07 - that is probably the most value like if
52:10 - i was learning out and in the beginning
52:11 - of my journey
52:12 - all i'd want to see is other people who
52:15 - are experienced
52:16 - show that they're human and actually see
52:18 - that oh okay i'm not crazy i'm not dumb
52:20 - like they also get stuck how do they get
52:23 - over problems watching them get over
52:24 - problems
52:25 - i think it's really really nice way of
52:27 - doing it and seeing that right
52:29 - um devon gray says even though my coding
52:31 - i didn't get used it was good to use my
52:32 - thinking ability too
52:33 - i finally found some time for the es6
52:36 - data structures i had never
52:37 - really found uses for in the wild yeah
52:39 - honestly devon gray like
52:42 - uh honestly dude like you're right again
52:45 - and
52:45 - and the suggestions that you gave that
52:47 - everyone who gave a suggestion it
52:48 - doesn't mean your suggestion is bad
52:50 - like it could be literally a much better
52:51 - solution than what we've implemented or
52:53 - it could be more efficient it could be
52:54 - more everything
52:55 - it's just the way of thinking now that
52:58 - we have the
52:59 - the flow that kind of goes in place you
53:02 - can optimize and you can be like okay
53:03 - now we're using a data a map here
53:06 - you can now replace that that part with
53:08 - your sort of solution
53:10 - and you'd still have the same flow just
53:12 - be more efficient right so you could go
53:13 - ahead and do things like that
53:15 - um but let's go ahead and tackle this
53:17 - problem kazi so
53:18 - the group by sounds easy but we're gonna
53:20 - have to find like a really nice sort of
53:22 - solution which which does that
53:24 - okay um and an efficient way and i've
53:27 - done similar things before but
53:29 - we're gonna have to account for a few
53:31 - weird things right we're gonna have to
53:33 - account for
53:34 - uh the timestamps are technically gonna
53:36 - be different because
53:37 - because so what we should do so no not
53:39 - understand so what we should do
53:41 - is not have the time because that's
53:43 - irrelevant we should have
53:45 - just so it's up to the days so we should
53:48 - group it by days because right now it's
53:49 - going to be trying to group it by
53:51 - like the actual unix value which is
53:53 - never
53:54 - ever going to be the same yes
53:57 - exactly exactly that so it's going to be
54:00 - grouping it by the unix value and that's
54:02 - never going to be the same
54:03 - so we need to erase the time we just
54:06 - want to keep the date
54:07 - and we don't even care about the time
54:09 - zone and all that stuff because right
54:10 - now it says
54:11 - time though we just want the date itself
54:13 - so uh
54:14 - we can go ahead and do that so is that
54:16 - will that be done with
54:18 - format ll no format won't actually
54:21 - change
54:22 - the but it actually changed the
54:25 - type you can change it to
54:29 - uh form you can do format format is as a
54:32 - form if we just wanted to if you do
54:34 - focus
54:35 - on the format yeah the date
54:39 - so let's go ahead and just test that now
54:41 - so we say moment moment.format
54:44 - ll hey
54:50 - let's go i said the music actually helps
54:52 - you like kind of focus a bit you know
54:54 - like dude i'm loving the music
54:57 - and then we say music oh i'm moving the
55:00 - form
55:01 - let me do this this this this puppet
55:04 - there for a sec
55:05 - and then what we'll do is inspect it and
55:07 - have a look
55:08 - and see if we're getting the expected
55:09 - result so
55:11 - i'm refreshing it and now we can see
55:13 - that
55:14 - it didn't uh oh no so hold on hold on oh
55:18 - no yep it did boom looks freaking
55:21 - beautiful bro
55:22 - nice there we go okay so now now it
55:25 - doesn't matter
55:26 - what the time is but that you're gonna
55:28 - get the same dates
55:29 - okay so that's gonna help us out um
55:33 - so that's going to be cool what we might
55:35 - want to do cause is actually format it
55:38 - quite early so that we can show on the
55:41 - graph
55:42 - on the graph so right now if you see the
55:43 - graph it says october 29th october 28th
55:46 - but it's quite big on the graph i don't
55:48 - want it to say october
55:49 - we just want that short view you know
55:51 - like the short dates
55:52 - there's a very hideous group buy
55:56 - that works but i want to
55:59 - it's like using reduce and i kind of
56:02 - want to just avoid it because
56:04 - i don't know i was going to say that the
56:06 - ideal one would end up using a reduce
56:08 - like yeah yeah i mean it looks very
56:11 - mathy but yeah we can do it we can do it
56:13 - this looks like
56:14 - it should work but let's just drop me
56:16 - the hideous
56:17 - into that in the code so if you just
56:19 - copy and paste it in the code i can just
56:20 - grab it from the card i dropped it in
56:22 - slack but i'll drop it in the code as
56:24 - well
56:27 - hey there we go hey you turned that up a
56:29 - little bit bro
56:30 - i'm liking that one my bad i'm like
56:32 - [ __ ] turn it down
56:35 - all right so this one is saying group by
56:38 - okay so
56:39 - yeah so i've used a similar one to this
56:41 - before and it's really i mean to be
56:43 - honest i i
56:44 - i got my head around it ages ago and i
56:46 - was kind of like okay i lost this
56:48 - i i don't really care to get my head
56:50 - around it i just
56:52 - want to what it's good yeah yeah what i
56:54 - would do when i'm coding this is i would
56:55 - just
56:56 - copy paste this and then i would just
56:57 - try to match where
56:59 - stay consistent with where it says
57:01 - result that item
57:03 - because i just imagine once let's do it
57:05 - let's do a
57:06 - it's called group by you should try this
57:09 - one by the way because like this one
57:10 - looks more legible to me
57:12 - like i just sent it to you in slack but
57:14 - that one looks
57:16 - more legible
57:19 - you mean the one with the the spread and
57:22 - things like that
57:22 - no the one that i just sent right now in
57:25 - slack to you
57:27 - yeah so it's got like a spread operator
57:29 - and stuff like that i don't see
57:31 - um oh i see the spread operator okay
57:33 - yeah
57:34 - just like a spread result and things
57:36 - like that it's got result item the other
57:38 - one had
57:39 - a reduce with one level
57:42 - this one had a reduce with it's like
57:45 - taking an array
57:47 - and then indexing it by a thing and then
57:50 - indexing that
57:52 - i don't know i think the first one i
57:54 - mean because the first one we can
57:55 - rewrite it with arrow functions would be
57:57 - and it'll look really clean
57:58 - okay it won't be so confusing all right
58:00 - go with it just looks hideous
58:04 - oh you can say it takes xs and a key
58:07 - group by which is excess and the key
58:10 - length
58:11 - the length is one two three so
58:15 - right what are you doing are you writing
58:17 - somewhere oh yeah you're writing
58:19 - i'm looking at that code example that we
58:21 - have we found so it says
58:24 - i don't get why what the key they're
58:26 - taking is checking the
58:29 - the length all right give me a and
58:32 - they're using like it seems like there's
58:33 - a higher order function being used or
58:35 - something
58:36 - i i don't know bro it's it's [ __ ]
58:39 - giving me
58:41 - anxiety looking at it i mean it
58:44 - apparently it's pretty
58:48 - um the other one is i am stokies
58:53 - the other one looks like something i
58:54 - would write the first one looks like i
58:56 - would write if i got
58:58 - eight years of like math phds and then
59:00 - [ __ ]
59:01 - was writing my thesis oh somebody said
59:04 - elegant but painfully slow on library it
59:06 - doesn't matter
59:07 - because the other one was an efficient
59:12 - i would rather have it be legible so the
59:14 - other people i work with can understand
59:17 - yeah i mean they're both kind of
59:19 - confusing though like
59:20 - i racked my brains and still failed to
59:23 - understand and how in the world does
59:24 - this
59:25 - work starting from now i can't sleep
59:27 - because of that
59:29 - right i don't care all right bro just
59:31 - pick one
59:32 - i would i personally i would go with
59:35 - this but if you want to go the other one
59:36 - go with the other one
59:37 - uh but i'll be right back shortly okay
59:40 - let's
59:40 - let's try this one so are you following
59:42 - me up
59:44 - i should be following you just give me
59:46 - one second i'm gonna
59:48 - come back okay so guys you might not be
59:52 - able to see
59:52 - a little bit of what's happening but
59:54 - i'll talk it through so you guys keep in
59:56 - in the loop of what i'm doing so right
59:58 - now
59:59 - we've got uh see han kyo says that is
60:01 - real pair programming
60:02 - yeah 100 percent um and demingo says
60:05 - your manager would never approve for the
60:06 - easier one trust me when i say the truth
60:08 - is
60:08 - that when it comes to efficiency um the
60:11 - senior devs are going to be quite good
60:13 - sometimes with understanding how it
60:14 - works so they'll really dive in
60:16 - but some like sometimes truth is like
60:19 - it really depends like you might it
60:22 - doesn't really get
60:24 - it doesn't really really get like that
60:26 - like they don't really check or they're
60:28 - not going to really dive in
60:29 - as i like that but this is just dive
60:31 - into it so we got
60:33 - i'm going to refactor this right so i'm
60:34 - going to copy the snippet they had so
60:36 - it's variable group by
60:37 - okay so this is nasty i'm going to
60:39 - change this up so firstly never use var
60:41 - anymore
60:42 - it's old um we don't want that so const
60:45 - group by we don't need this function
60:46 - keyword we're gonna make it an arrow
60:48 - yes six style and then here we don't
60:51 - need this we can make that an arrow
60:53 - so boom then we've got the return now
60:56 - the return here we can actually get rid
60:57 - of because it's it's implicit
60:59 - so what we can say is we can get rid of
61:02 - the return
61:03 - get rid of these curly braces and get
61:06 - rid of this one
61:07 - and now we've got a simpler line of code
61:09 - here so i'm going to quickly format this
61:11 - so i'm going to say format document
61:14 - does it work no my format is not working
61:16 - okay anyway so we're going to say xs dot
61:18 - reduce
61:19 - it's going to return this and then this
61:21 - one will return
61:23 - v at the end of it so v
61:26 - is rv sorry so rv is this one
61:30 - this has to be this because it's two
61:32 - lines of code so
61:33 - now um we're gonna say
61:38 - xs.org what is xs why is it calling it
61:41 - access
61:42 - um xs data no group by
61:45 - xs okay so this i mean i don't like that
61:47 - i think let's just call it the array so
61:49 - you pass in an
61:50 - array and the key that you're trying to
61:52 - group by
61:53 - in this case so this is what they had on
61:55 - the on their site okay so i'm just going
61:56 - to copy and paste it down here so you
61:58 - can see it
61:58 - this is an example of what they had so
62:00 - boom so you can see like this is an
62:02 - example
62:03 - of the code snippet that they had
62:05 - underneath when they were calling it
62:07 - so you guys can see oh [ __ ]
62:10 - okay all right so you guys can see now
62:13 - oh my god damn it what am i doing close
62:17 - this up
62:18 - yeah and i've opened some annoying stuff
62:21 - okay so now you can see if i go ahead
62:24 - and comment this forward
62:26 - like that now
62:29 - you see oh i appreciate that joseph says
62:31 - seriously you guys deserve youtube what
62:33 - i appreciate that man
62:35 - um we're just having fun with this stuff
62:37 - so console.log group by
62:39 - okay so what i'm going to do is i'm just
62:41 - going to try it let's go ahead and see
62:42 - what
62:42 - outputs right because that's the best
62:44 - way you can do this stuff honestly like
62:46 - okay here what they're doing is they're
62:47 - passing an array as the first argument
62:49 - so that gets passed in here
62:50 - and then they're saying past in the
62:52 - length right and then
62:54 - what's happening is it's getting i mean
62:56 - i guess it's grouping
62:58 - based on this they don't actually show
63:00 - what the original thing is oh they
63:02 - do show what the original thing is then
63:04 - let me see if i can get that for you
63:05 - guys
63:06 - so length is
63:10 - now one that they gave was phase one
63:12 - step two okay
63:14 - they don't even use that example but
63:17 - let's go ahead and say
63:21 - [Music]
63:23 - this r1 we don't have length
63:26 - so if we don't have length
63:30 - then it would be
63:38 - go ahead and pause also
63:42 - three one two
63:44 - [Music]
63:53 - event is the key they want to group yeah
63:55 - i know so
63:56 - that's why i understand the length is
63:58 - the key they want to group it by an
63:59 - example but in our example
64:00 - our keys dynamic so you see now we're in
64:04 - a bit of a pickle
64:05 - because our key is going to be dynamic
64:09 - based on what you're looping through
64:10 - inside the array
64:13 - so now we have an issue because we don't
64:16 - ah damn it because now our key is not
64:19 - going to be
64:22 - okay so fuzzy this isn't the correct
64:25 - this isn't the correct grouping function
64:27 - we need oh [ __ ]
64:29 - reason being is because this will take
64:31 - an array and then imagine the key was
64:33 - like
64:34 - uh the key was length
64:37 - um because our key is dynamic you see
64:40 - this
64:41 - the key is dynamic but they're one it
64:44 - would be
64:44 - length and then they're grouping but no
64:46 - wait no that's not correct is it
64:48 - does it mean or is it correct
64:52 - because in their example they don't do
64:53 - it like that
64:59 - [ __ ] okay users by color that's pretty
65:01 - much what we need
65:02 - we just need the equivalent of that
65:04 - array so let's
65:06 - actually see this
65:11 - we can use okay to iterate over every
65:13 - item
65:14 - got it
65:17 - if it doesn't reach my group
65:21 - by unique keys
65:25 - holy [ __ ] this looks awfully readable
65:28 - bro
65:30 - oh yeah this actually i've
65:33 - i i sent some good hope on this one
65:37 - hey
65:38 - [Music]
65:41 - what's good
65:44 - like you guys deserve a youtuber this
65:46 - had deja vu of this exact moment
65:49 - wow really literally i had the screens
65:52 - open everything you wearing the same top
65:54 - as well holy crap
65:58 - um make sure you have a deja vu about a
66:01 - eight figure day so we can quickly
66:03 - [ __ ] take that
66:04 - exactly pretend acc
66:08 - color grouping okay so
66:11 - we're okay so greases by color value
66:13 - grouping
66:15 - dude this looks really really promising
66:18 - i swear
66:19 - because we're group they're grouping by
66:21 - color we're just grouping by
66:23 - day so wherever it says color
66:26 - it's just date first composing color
66:28 - right so users by
66:30 - color uh-huh and we're doing it by date
66:35 - which is not what i mean it's like
66:39 - sounds like it's the [ __ ] this works bro
66:42 - i'm telling you
66:44 - but the key is color
66:49 - our key is see the way we've got a weird
66:52 - situation because our key
66:54 - is unique every time oh bro we should
66:58 - see this no no we did it
67:00 - in a dumb way honestly we should have a
67:02 - key
67:03 - we should have two keys
67:07 - i just think we did it in a funny way i
67:08 - think we should change our data
67:09 - structure
67:11 - yeah so so here we should maybe have it
67:12 - as date why the [ __ ] did i not think
67:14 - about that that sounds very like
67:16 - obvious now that i look at it i'm like
67:17 - that looks like a horrible data
67:19 - structure
67:20 - yeah so it should be like this it should
67:21 - be something like date
67:23 - and then it should have uh date as
67:26 - uh and then we should say and no need
67:28 - for that uh bracket at the
67:30 - here right like i need for that yeah
67:34 - uh-huh
67:38 - and this one would be this looks way
67:42 - cleaner bro i just feel like i took a
67:45 - shower after like
67:46 - weeks i know
67:52 - damn bro look at you being [ __ ]
67:54 - efficient i'm just
67:56 - that was dope man
67:57 - [Laughter]
68:01 - dude this peer programming is [ __ ] oh
68:04 - man
68:07 - that was sick that's clean
68:11 - oh thick all right so now we've got um
68:16 - so now we need to firstly modify our get
68:18 - dates and get them out
68:19 - so let's quickly fix that before because
68:22 - that's gonna be
68:22 - so much easier now the code is going to
68:24 - be so much readable instead of this
68:26 - object that keys obfuscated
68:28 - garbage now we just say data and we say
68:30 - pair dot date
68:31 - oh my god that's so much better holy
68:36 - [ __ ] see guys this is a pure example of
68:38 - where like you come
68:39 - come up with breakthroughs and now the
68:40 - next time this comes up
68:42 - we probably will realize
68:45 - that's clean that's clean nice
68:51 - so now we can check our code and that
68:53 - should be clean as squeaky clean as well
68:55 - dude i'm enjoying myself
68:57 - on this live stream bro dude that was
69:00 - that was
69:00 - genius play man that's [ __ ] clean now
69:03 - yeah
69:04 - all right it works it does yep
69:08 - oh [ __ ] in one try yeah one try
69:12 - and the data structure's good now it's a
69:14 - good data structure
69:16 - yeah we had some crazy [ __ ] why did we
69:18 - do that [ __ ]
69:21 - and i'm in keys okay so now our group
69:23 - buy will work oh
69:24 - this looks so clean now we can do group
69:27 - by
69:28 - guys that's an example as well if you
69:30 - see some code on stack overflow like or
69:32 - something that works
69:33 - it can but it doesn't go by your data
69:36 - structure you can't fit in
69:37 - it's a quick sometimes it's a clear
69:39 - indicator of like maybe your code is
69:40 - wrong right
69:42 - um one second
69:49 - okay so now we've got the group by
69:54 - and here what we're gonna do is
70:00 - we're gonna go ahead and say
70:03 - how is sienna who's sienna oh that's my
70:06 - niece
70:07 - the one that was one [ __ ] that is so
70:08 - cute that's a
70:10 - beautiful name that's a beautiful name
70:13 - yeah she's
70:14 - sienna and then we've got my other
70:16 - sister's uh giving briefs
70:17 - i've given birth soon as well so yeah
70:19 - thank you shiva as well appreciate the
70:21 - comments on that
70:22 - damn
70:25 - you got a baby congrats on you gotta be
70:29 - spreading misinformation some people
70:31 - were messaging on instagram i was like
70:33 - it's not my baby i mean i'm cool
70:35 - walks in
70:36 - [Music]
70:38 - i'm like wait what
70:42 - um okay so do you want to use this piece
70:45 - of code bro because this piece of code
70:47 - looks very
70:48 - very simple unless there's some reason
70:50 - to not
70:51 - use this color code because i've
70:54 - actually used something similar to this
70:56 - before the
70:57 - the ugly group buy one
71:00 - it is a good one because it's got a
71:02 - reduce in it like uh it's just
71:03 - it looks ugly um
71:06 - oh david johnson in the house i
71:08 - appreciate that dude and i got your
71:09 - message by the way i'm gonna
71:11 - i'll get back to you um a second man
71:15 - look forward to that
71:16 - and there's a group by so now what i'm
71:18 - gonna do is i'm gonna go ahead and do
71:19 - console.log and i'm gonna say the
71:23 - grouped values are
71:27 - and then here i'll say hey for the dog
71:30 - nice your group bye
71:35 - and then i'm going to go ahead and say
71:36 - i'm going to pass in the data
71:38 - what do you mean my break was quite
71:39 - rewarding what does that mean
71:43 - aussie's break was quite rewarding i
71:47 - i don't know yeah sick
71:50 - all right what are you working on so now
71:53 - i'm just going to logging it so now look
71:55 - how clean this is dude group by
71:57 - data and based on the date key oh is it
72:00 - working
72:01 - i mean i'm hoping so okay um
72:05 - okay so now i'm gonna go ahead and we're
72:07 - gonna check it so
72:09 - you should see the group values are
72:11 - something
72:13 - let's go ahead and check it so
72:14 - [Music]
72:19 - oh okay okay
72:22 - that's what i'm talking about that's all
72:25 - right that's clean
72:27 - holy [ __ ] that's cool oh [ __ ]
72:30 - son that's dope man all the october 27th
72:35 - one or
72:36 - oh that's satisfying
72:39 - very very satisfying right now what we
72:42 - need to do is we need to modify it a
72:44 - little bit
72:45 - so that it it changes oh david says you
72:48 - stepped out for a bit and came back with
72:50 - some clear head to fix the bug yeah
72:52 - there we go
72:53 - yeah i've been doing a lot of that
72:55 - lately i just walk away from things and
72:56 - then i come back and i'm like all right
72:58 - let's go
73:00 - sometimes you just need like a little a
73:02 - little bit of time timeline oh man
73:03 - firebase just uploaded another video
73:09 - okay so
73:20 - okay so now we're gonna go ahead and do
73:25 - uh just cuz just discovered you guys
73:26 - hello from spring spain what's up craig
73:29 - yo yo yo
73:33 - so now we've got the three dates uh oh
73:37 - sorry we got the
73:38 - array with the date and the amount
73:41 - the amounts in so now what we need to do
73:43 - is we actually need to like um
73:46 - we need to transform group by
73:49 - what is returned by from group by into
73:52 - um into so so it has the same keys
73:57 - can you do you want to write like a
73:59 - comment like a literal
74:01 - yeah what it would look like like a
74:03 - literal example
74:05 - exactly so let's go ahead and do that so
74:06 - i'm going to go ahead and just copy
74:08 - this out and i will show you guys
74:11 - hopefully what we can i can see right
74:12 - now so i don't know if this will
74:14 - look decent on the screen but you guys
74:16 - can see now this is my
74:18 - this was what was console logged on on
74:21 - chrome so now we pretty much have
74:22 - like an array and just [ __ ] that bit we
74:25 - don't need that
74:27 - okay so now imagine this is our array
74:28 - right so we've got an array
74:30 - and it's got the keys are october 27th
74:33 - october 28th
74:34 - and october 29th and then each one has a
74:36 - value so this one has two
74:38 - inside of it so it had this and add some
74:40 - stuff inside and the second one i
74:41 - expanded so we can see that just as an
74:43 - example so you've got the array of three
74:45 - so what we want is we need to transform
74:48 - this
74:49 - into something like this so that way
74:52 - like
74:52 - imagine this array of three right i
74:55 - don't want this
74:56 - i just won because the dates are the
74:57 - same we know that right so
74:59 - we just want two add three at four is
75:01 - nine right
75:02 - hold on hold on what what so now
75:05 - what we want is because the key
75:07 - basically we got the grouping
75:08 - functionality correct it grouped all the
75:10 - ones with 28th of october right oh you
75:12 - want that amount
75:12 - summed up yeah we just want to sum so we
75:16 - won't let you want to replace this
75:18 - okay okay so yeah that's what i was
75:20 - going to say you just want the
75:22 - value to actually not be an array you
75:24 - want the value to just be the sum
75:26 - of amount just one number yeah
75:29 - exactly
75:32 - yeah so somebody goes check if oh
75:35 - somebody actually gave a
75:44 - making that even more obfuscated than it
75:46 - is but okay
75:47 - yeah they say push in and then we're
75:50 - gonna say an rv plus
75:52 - equal value amount so plus equal value
75:55 - amount
76:00 - i think we should do it as a separate
76:02 - function i think we should do it as a
76:03 - separate function dude like that
76:05 - that piece of code is already a
76:06 - bottleneck
76:08 - i don't wanna yeah so so because what
76:11 - you can do then is it's very clear then
76:12 - that you've got functional pieces of
76:14 - code you one you'll know where things
76:16 - break if you change them
76:17 - and two you can always refactor and get
76:20 - the code
76:20 - so damn clean at the end of it but the
76:23 - your first primary focus should be to
76:25 - get that
76:25 - they're standing in polarity right yeah
76:29 - exactly so um
76:32 - oh nice austin brian kabanda says uh it
76:35 - type of program is the best thing that
76:37 - happened to youtube here from the
76:38 - philippines let's go
76:40 - let's go love that
76:44 - right so the group values are okay so
76:46 - now we've got that down so now what we
76:48 - want to do is get this
76:49 - functional bit done so it'd be 9 500 and
76:52 - then these will also be
76:53 - numbers as well so whatever this is like
76:55 - 2 000 this one would be like something
76:56 - like 4 000.
76:58 - so that's the goal right we're going to
76:59 - get from this to this
77:01 - all right so what we're going to do is
77:02 - we're going to pass this as an argument
77:05 - and we want the function to return this
77:07 - okay that's what we're going to kind of
77:09 - treat it as um and then i think dude
77:12 - this is
77:12 - awesome man we're actually going through
77:14 - some serious problem solving right now
77:16 - yep like it's sick yeah so this i think
77:19 - this is really useful for everyone so
77:21 - group by this is a great problem to go
77:24 - through because there's so
77:25 - much data structure crap happening here
77:27 - it's insane
77:29 - exactly exactly and then once we get it
77:32 - down it'll you'll see guys
77:34 - how you go through this messy process
77:36 - and then the end result is so damn clean
77:38 - and then you'll debunk that myth of oh
77:41 - that's it's not written the first time
77:42 - like that right like
77:44 - so it will be help you out so now we're
77:46 - gonna say it's const and we're gonna
77:47 - call this one
77:48 - uh transform or data or transform data
77:52 - as in
77:53 - um let's just say transform day and it
77:56 - takes
77:57 - an array so it will take the group as
77:59 - we're going to call it it takes the
78:00 - group data
78:01 - so we'll take the group data and
78:05 - we're going to assume the group data is
78:07 - in this structure and then we're going
78:09 - to say
78:11 - the grouped data is and by the way guys
78:14 - this is an
78:15 - object right object dot entries
78:18 - and this will give you a
78:21 - array of
78:25 - key and value pairs so object
78:28 - entries let's just double check object
78:30 - or entries i think it gives you
78:32 - a key value pairs back object
78:36 - entries yeah it gives you key value
78:38 - players i'm showing it on my screen
78:41 - oh sick yeah so it gives you key value
78:42 - pairs back so what we should have is
78:46 - object.entries.map
78:49 - and then what we want to do is map
78:51 - through every single entry
78:53 - and all four each sorry you mean you
78:55 - could do it for each oh you could do
78:56 - four
78:57 - each so hold on what are you doing
79:00 - you're you're getting
79:02 - um so now what i want to do is i want to
79:04 - loop through each of these what will
79:06 - this give you
79:06 - can like this will give you what
79:10 - so this should give you october 27 2020
79:15 - and then it give you um uh
79:19 - as as that as the key and then the value
79:22 - would be the array of
79:23 - this array here so like this one here
79:26 - okay so let me actually i'm just going
79:27 - to copy paste that
79:29 - yeah and
79:32 - and this is well so here's the thing is
79:35 - this uh considered a string what is this
79:37 - considered
79:39 - when it gives you the key dude maybe we
79:42 - should
79:43 - log it here and do object entries over
79:45 - this
79:46 - yeah yeah because we don't know what
79:48 - that object type is
79:50 - yeah is it because we don't know yeah
79:52 - exactly
79:58 - then
80:02 - group values i don't think it's saved
80:04 - yet oh no it hasn't saved on your side
80:12 - [Music]
80:14 - okay so okay so it gives
80:18 - how do i turn off all these errors again
80:20 - these yellow and red errors there's some
80:22 - kind of thing you can do right
80:24 - you can click on custom get rid of
80:26 - errors
80:27 - where's custom uh okay so you make it a
80:29 - bit bigger
80:31 - i'll click that little x you see a
80:33 - little x with 106.
80:35 - uh-huh i clicked it um
80:39 - um oh that little drop down arrow so go
80:42 - back
80:43 - that's a little carrot you see the
80:44 - little carrot down with carrot yep
80:47 - and then no that's no um make it a bit
80:50 - wider your screen so maybe just go full
80:52 - screen for a sec
80:54 - um and then you should see default
80:57 - levels there
80:58 - like default levels get rid of error
81:02 - and warnings
81:10 - um so now what we're going to do
81:15 - is i realized that
81:19 - i looked at the live stream and i was
81:21 - like this dude for a second i was like
81:23 - i was like downhill sharika you know
81:26 - when he
81:26 - he's on the court oh
81:30 - i realized my camera was way different
81:31 - oh you mean the seer
81:34 - yeah yeah oh yeah yeah yeah
81:37 - it's all the young students they have
81:39 - they have a tendency to go really low on
81:40 - camera yeah they're just like
81:43 - sleeping so now the new data structure
81:46 - is going to be
81:47 - an array okay so it's an array it gives
81:50 - you back
81:51 - where the first element of that array is
81:53 - the key
81:54 - the second element of that array is the
81:57 - uh is the array of data structure okay
82:01 - so so cause if you click into the group
82:03 - values r and that will make sense to
82:05 - everyone
82:07 - yeah so you should see that one and you
82:09 - see the first element of that array
82:11 - so in the position zero is the key
82:15 - yep and then position value one is that
82:18 - one yeah so what we can do now
82:20 - is we could that's cool that's actually
82:24 - pretty usable um you can just go into
82:27 - the value and then
82:29 - sum up all the you can go
82:32 - into this right and then sum up
82:36 - all the amounts yeah but i'm just
82:38 - thinking do we
82:39 - create a new array and then like go
82:41 - through and push the key
82:43 - with the consolidated value as a key
82:45 - value parent to a new array
82:47 - and then we kind of go through it all
82:49 - like that or do we
82:50 - transform the existing one you know what
82:53 - i mean i think
82:54 - i think honestly you should write a
82:56 - function
82:57 - that like yeah transform the existing um
83:02 - because it goes against the immutability
83:04 - scope okay that's fine so just make a
83:06 - make a new one or whatever like it's not
83:08 - gonna be that big of a deal the
83:10 - main thing is we just need array one to
83:13 - just sum up to one number so we just
83:15 - need a function that can go into
83:17 - an array of objects and sum up the
83:20 - values okay so it's a transformed array
83:24 - equals this right obviously you did get
83:26 - it right dude but you got the
83:28 - the positioning one last time so but
83:31 - it's an array of
83:32 - arrays yeah so um okay so
83:36 - then it'll be the same [ __ ] yeah okay
83:39 - so now what we're gonna do is we're
83:41 - gonna say grouped
83:43 - data so grouped
83:46 - data got four each we'll go through
83:49 - every single one
83:50 - and then we're gonna see say for every
83:52 - single um
83:55 - what did we do last time we said for
83:56 - every single
83:59 - you just say for every single row or no
84:01 - for every single date
84:03 - [Music]
84:07 - what did we call it we didn't say tuple
84:08 - did we we said
84:14 - entry no i mean
84:17 - what what did we say last time i think i
84:19 - can't remember um
84:21 - pair for the what are you what are you
84:23 - talking about bro
84:25 - uh oh so demon grades oh you can create
84:27 - a third value called total in the array
84:28 - that could equal
84:30 - a reduced array value so we could do
84:32 - that yeah that's pretty cool too oh yeah
84:34 - yeah
84:34 - right yeah that's what i was saying dude
84:37 - yes i
84:38 - didn't there's a group there for each
84:40 - pair yeah sorry that's good
84:41 - yeah we want to basically go ahead and
84:43 - say
84:44 - um let's sum up the peridot amount yeah
84:47 - so we're going to say pair
84:50 - one which is which refers to the array
84:53 - of the data points or the array of
84:55 - amounts
84:56 - oh i see yeah and then we say
85:00 - map so how do we bubble up though
85:03 - hold on what are you so so if you expand
85:07 - the
85:08 - segment yes look at uh so
85:12 - but oh [ __ ] but you can't index but it's
85:14 - a key so you have to index it with the
85:16 - word amount
85:19 - yeah so go into one with two values so
85:21 - not not one with uh so go into
85:23 - a different one which has more than one
85:24 - value so that one yeah
85:27 - so so what we're doing is we're saying
85:29 - pair one gets us this
85:31 - what gets us what you said gets us this
85:34 - so it gets us the array of three so pair
85:36 - one would return an array of three
85:38 - at this point oh so you're okay so
85:41 - you're now
85:42 - calling something else pair you're like
85:44 - deciding to call
85:46 - this a pair yeah
85:49 - why don't you just why don't you call
85:51 - that entry because that's
85:52 - confusing from our earlier verbiage of
85:54 - like pair date and paramount to just
85:56 - call it an entry that makes it very
85:57 - clear what it is
85:59 - okay so there's a group there for each
86:00 - entry so entry one
86:02 - which is entry one is yeah the thing
86:05 - that holds all the amounts
86:07 - yeah so it would be no but if we thought
86:09 - it was the amount so if you click it
86:10 - it's actually an object yeah i
86:13 - understand that it's an
86:14 - object that has um it's a ray of keys
86:17 - right
86:19 - array of objects yes there's an array of
86:22 - objects that holds all the rounds
86:24 - of date and amount so now we need to go
86:26 - and say error
86:27 - dot map right we can say const
86:31 - total equals entry.map and we can say
86:35 - for every single uh now we need another
86:37 - word so we can save
86:38 - every single entry one
86:42 - amount or okay every single tube will
86:45 - get the two points so now you can say
86:47 - pair if you want because it's now it's
86:49 - back to date and amount
86:50 - so that is how we called a pair
86:53 - oh yeah yeah true true okay now it makes
86:55 - sense yeah so now we can say pair okay
86:57 - so it comes entry pair amount okay so
87:00 - now we say paramount and that should get
87:01 - us the total
87:03 - and then what we want to do is we want
87:04 - to say our transformed array
87:07 - should have transformed oops transformed
87:11 - array we're going to say dot push and
87:13 - we're going to push
87:15 - entry 0 for the key
87:18 - and we're going to actually push this in
87:20 - as a um
87:23 - if we push in as an object or yes as an
87:26 - object
87:27 - right so we'll say date as entry zero
87:29 - and then the amount
87:31 - would be the total like that
87:41 - and this should are you not are you not
87:43 - just appending it to
87:45 - this existing array as a third value
87:48 - no no so where i'm actually solving
87:50 - something as a v1
87:51 - create an empty array and then we're
87:53 - pushing the values in as we
87:55 - figure them out okay cool let's check it
87:57 - out
87:58 - now now guys i know that there could be
88:01 - like efficiency things and stuff but
88:02 - we'll touch that after so
88:04 - um and then what we're going to do is
88:06 - we're going to say transform data we're
88:08 - going to call that as another console
88:09 - log so we're going to say
88:11 - down here we're going to say console.log
88:14 - the
88:14 - total grouped values group values
88:20 - and i'm going to say alien this is just
88:22 - random sure i'm gonna say transform data
88:25 - and i'm gonna pass in the group by data
88:27 - so grouped by
88:29 - this okay
88:32 - we're going to save it
88:36 - oh [ __ ] dude we done object got entries
88:39 - we were assuming that was object.entries
88:42 - which means that now we need to do
88:43 - object.entries to our
88:46 - group data
88:50 - like this
88:56 - here because that's not a function okay
88:58 - so now it should be correct it should be
89:00 - what
89:00 - total group values let's see it's
89:02 - looking clean so far amount two thousand
89:05 - amount twenty five hundred three thirty
89:06 - five hundred forty five hundred
89:09 - okay so it's kind of but it's not
89:12 - it's not perfect so right now it's just
89:16 - pushing
89:17 - it's mapping and it's pushing them in
89:20 - but we want them to
89:21 - actually add up so oh so now we need to
89:23 - reduce
89:24 - rather than a map right yeah so this is
89:27 - what we need to reduce as opposed to a
89:28 - map
89:29 - yeah reduce will sum it up right so here
89:31 - we need to reduce
89:33 - yeah so let me just double check the
89:35 - syntax for reduce because i always
89:36 - forget this [ __ ]
89:37 - reduce js um this
89:40 - is cool man yeah so now now okay now
89:42 - we've got that
89:43 - so now for the reduce we just go ahead
89:46 - and say
89:48 - hold on let me try this too because i
89:50 - want to pick up
89:53 - so reduce gives you a total and
89:56 - every item right so in this case if we
90:00 - did a reduce
90:01 - you get a total like an accumulator and
90:04 - and you get the pair
90:05 - total yeah yeah exactly that's what i
90:06 - was thinking and then
90:08 - you're gonna do uh uh
90:14 - then you say total plus or equal to the
90:17 - paramount so it will basically
90:18 - accumulate the value
90:21 - are you sure about that because i'm
90:22 - looking at something
90:24 - slightly different than that so
90:27 - you're looking at uh reduce a b
90:30 - and then they're doing oh they're doing
90:32 - some they're doing some weird [ __ ]
90:34 - one's like that's that's some nested
90:36 - object thing
90:38 - they're doing x must be that's different
90:40 - man that's like a
90:41 - an object way of doing it because
90:42 - there's something reducing an array of
90:44 - objects
90:45 - okay cool is this you have some kind of
90:47 - total and then what you do is you
90:48 - initialize the total as the second
90:50 - argument so you say the total starts at
90:51 - zero
90:52 - and then the pair is the individual
90:54 - that's a very that's a very cleanly
90:56 - written thing because yeah this is our
90:58 - accumulator
90:59 - this is what we're summing up uh
91:01 - increment the accumulator
91:03 - by the thing that we're summing up
91:06 - uh yeah wait hold on somebody said you
91:09 - don't need the equal
91:11 - devin gray so go use it okay
91:15 - then do it i mean we can try it without
91:17 - the equal but i would i always
91:19 - okay let's just try it if if it works
91:21 - then it works if it doesn't just put the
91:23 - equal
91:27 - [Music]
91:29 - uh you need to save it on your side i
91:31 - did just did
91:33 - hey hey let's go
91:40 - [Music]
91:42 - oh dude that's sick
91:46 - okay so that's pretty cool
91:49 - and now wait hold on the accumulator is
91:52 - zero by default so you also don't
91:55 - probably need that
91:57 - yeah somebody said that yesterday so i
91:59 - didn't actually i
92:00 - actually had no idea that i always used
92:01 - to play reason why i always put in is
92:03 - because it's kind of a good
92:05 - muscle memory so that way even when
92:06 - you're doing a raisin stuff
92:08 - ah [ __ ] it it did something weird
92:11 - dude it just turned it all
92:12 - i don't know what yeah so you see like
92:15 - because now it
92:16 - it thought it doesn't know remember
92:18 - javascript's weakly typed
92:19 - so it's going to try and guess the date
92:21 - about types
92:23 - she gets that wrong whereas if you put a
92:25 - zero it knows that it's a number and it
92:27 - knows that plus
92:28 - two that number is it is gonna be a
92:30 - number so christie says it's not zero by
92:32 - default it uses the first
92:34 - item as the accumulator if you don't
92:36 - pass one in
92:38 - oh okay
92:41 - justin uh for all of you interested in
92:45 - all the stuff
92:46 - probably read the book the weird parts
92:48 - of javascript
92:50 - yeah okay so that's
92:54 - sick so that's really good now that's
92:56 - really simple i mean we're pretty much
92:57 - done dude now we just got to plot it
92:59 - now we do an even cooler thing right now
93:02 - what we do is
93:03 - we can plot this but then what we do is
93:05 - we connect it to our form
93:07 - and we apply the transform on
93:10 - and as in we apply the transform as
93:13 - inside of a use effect and that way it
93:14 - would always transform the data
93:16 - every time something's added yep right
93:20 - that's jack so let's get rid of this
93:23 - comment now because we're good
93:24 - um the console logs we can keep for a
93:26 - bit and now what we can double check
93:28 - is everything seems to be working still
93:31 - uh as it is
93:32 - um but now what we should see is
93:36 - we want to apply the um
93:37 - [Music]
93:39 - okay so now we want to do uh
93:43 - so currently get dates and get amounts
93:45 - currently just runs off of data right
93:47 - but instead what we can do is we can
93:48 - actually make it take a data object
93:51 - instead
93:51 - or we can yeah let's make it let's make
93:53 - it actually a smarter
93:55 - function so it takes a data and then and
93:58 - then what we can do is
93:59 - we can pass in whatever our data is um
94:03 - or in this case we should call it data
94:05 - set because our our variable is called
94:07 - there
94:08 - um and then what we can say is rather
94:11 - than
94:12 - this we can go ahead and do
94:15 - okay dude to make it simple yeah i'll
94:17 - show you a trick now so
94:21 - um
94:27 - trying to think what's the nicest way of
94:29 - doing this
94:30 - because you see you don't want this ugly
94:32 - code everywhere you don't want this
94:33 - transform data
94:35 - complexity somewhere you want to kind of
94:37 - wrap it in a user effect
94:39 - so what we can do is the data gets
94:41 - pulled from here right
94:42 - there so what we can now say is this
94:45 - create a use effect
94:48 - whereby the dependency is data
94:51 - so every time data changes this code
94:53 - runs yeah
94:55 - and then we can say is every time data
94:59 - some information comes into data
95:02 - we want to go ahead and do we can
95:04 - actually have another piece of
95:06 - state called transform data which you
95:07 - get set to
95:11 - so we could have the raw data and then
95:13 - we can have the transform data
95:19 - we'll see yeah my brain hurts
95:24 - let's just try this way so let's say
95:26 - every time data changes what we want to
95:28 - do
95:29 - is set the data to the transformed data
95:33 - so but that's going to cause an infinite
95:36 - loop okay yeah so what would
95:37 - because then the date will change which
95:39 - will cause it to re-trigger which will
95:40 - cause the change
95:41 - so instead now what we're going to do is
95:42 - we're going to say const transform data
95:47 - and then we're going to say set
95:49 - transform there
95:52 - hold on here we'll say one second so
95:55 - we're
95:56 - using we're making transform data
95:59 - a piece of state yeah
96:02 - so so you enter a value every time
96:06 - every time i push a value like every
96:09 - time i add a gig
96:10 - transform data will do its thing
96:14 - uh yeah and then it will it will get
96:15 - transformed here
96:17 - by this so we'll say set transform data
96:21 - got it it needs to happen every single
96:22 - time okay that makes a ton of sense
96:25 - yeah uh set transform day at this
96:29 - um that's clean that's really clean
96:33 - yeah and now what we can say is those
96:36 - helper functions i'm stepping on
96:38 - a protein shake right now
96:41 - that reminds me do i need to have mine
96:43 - uh transformed
96:45 - jacked i'm almost at my water goals my
96:48 - protein goals are almost met today
96:53 - yeah go go grab water
96:57 - what's up if you don't have water go
96:59 - grab water
97:01 - oh i got water i've got water
97:05 - okay so now what we're gonna do is
97:09 - we're gonna go to
97:11 - [Music]
97:13 - and we're gonna say
97:18 - oh logan says well you guys are
97:20 - streaming late let's go
97:22 - nice so set transform there now our
97:24 - helper function should pull from
97:26 - that new one and that means that the
97:30 - helper function is the one that's
97:31 - connected
97:32 - to the actual thing so if we save it now
97:35 - everything should be good and it should
97:36 - mean that what we see on our
97:38 - on a graph should be the correct value
97:42 - that's what i'm talking about dude
97:46 - dude this is awesome is uh well let me
97:49 - finish eating first
97:53 - let me go ahead and spam a day and we
97:55 - should see that value
97:56 - spike that's what i was gonna say it
97:58 - should actually change it i'm psyched as
98:00 - [ __ ]
98:01 - i'm gonna add like a bunch of days to
98:03 - this thing so
98:05 - we should see the middle date go crazy
98:12 - nice that is sick man
98:16 - wait it worked yeah um
98:20 - oh because you kept adding it to the
98:22 - same yeah so it accumulates they said on
98:24 - that day you made thirty one
98:26 - thousand thirty one and a half thousand
98:29 - i mean we need to get rid of k because k
98:31 - right now bro look i just added multiple
98:33 - different days and look it added a point
98:36 - for all of them
98:38 - oh you added different days oh nice yeah
98:41 - hell yeah bro that looks great
98:44 - yeah and dude and every time now you
98:47 - have any sort of um
98:49 - anytime you have the the the um
98:53 - wait is it sorting by day right now
98:56 - oh okay so it's not showing my day
98:58 - that's a good shout out
98:59 - yeah so solo says sort by date that's a
99:02 - very good
99:03 - suggestion actually um
99:06 - okay that's a very good oh yeah because
99:07 - it's october 23rd and october 27th
99:10 - is all the way in the end and 29th is
99:11 - the first one
99:13 - yeah dude this is pretty damn cool man
99:18 - because now we've got a really slick
99:19 - piece of code
99:20 - and guys think of it this way now
99:21 - because we've got this transform data
99:23 - and normal data this is
99:24 - really cool and this is also something
99:27 - people have to do
99:28 - quite often when it comes to charting
99:31 - and a lot of the data types look
99:32 - extremely similar to this
99:34 - and a lot of people are trying to make
99:35 - apps with a chart
99:37 - yep exactly and you will run into this
99:40 - and i have ran into this before
99:42 - and my code wasn't this elegant so now
99:44 - this is actually pretty nice this
99:46 - solution
99:46 - but um but before it was kind of messy
99:49 - but you have to do some like you know
99:51 - interesting data type stuff
99:52 - and also this is one of the best
99:55 - exercises you could possibly do
99:57 - for learning data types because you're
99:59 - going to run into scenarios where
100:00 - you've got an array inside of another
100:02 - array and you've got some other crazy
100:04 - stuff happening and
100:05 - and this is a really good way of
100:06 - mastering that you got to get dirty
100:09 - before you get clean
100:11 - exactly like the end result you'll be
100:13 - like
100:14 - wow that code is clean but the the the
100:16 - code to get there would have been a bit
100:18 - messy
100:19 - you know um okay so
100:23 - settle and use effects are clean dude
100:28 - it's so clean all right now how do i
100:30 - okay so before we connect it to a form
100:32 - we just need to sort the dates
100:35 - yeah so we need to sort the dates and
100:36 - then we need to connect the form and
100:38 - then hook into firebase is easy so quick
100:40 - question
100:42 - hold on one second the thing that's
100:46 - being plotted
100:48 - where's our data being stored so right
100:51 - now we have hot data so
100:52 - we will map our input stuff to the hot
100:55 - data
100:56 - so okay i got a question so if it's an
100:58 - array of um
101:00 - objects we can just sort this array by
101:03 - um
101:05 - by by date right
101:08 - like each each of the items in this
101:10 - array we can sort it with this
101:13 - so remember for efficiency you don't
101:15 - want to sort this entire data instead if
101:17 - we
101:17 - if we sort the transform dataset there's
101:20 - much less
101:21 - to go through uh-huh because they would
101:24 - l they would be grouped
101:25 - so you'd only have that date come up
101:27 - once i agree okay
101:29 - that makes sense makes sense so here
101:32 - when we do the set transform data
101:34 - we're going to need an intermediate step
101:35 - which sorts before that or we can kind
101:37 - of do it inside of transform data so
101:38 - that's a good chat
101:39 - here maybe um so we actually group the
101:42 - data here
101:43 - and then we need to do some kind of uh
101:46 - group by
101:47 - moment already on it bro
101:50 - let's go sorted array
101:54 - uh dot sort
101:57 - oh they have a saw um
102:01 - sort by date moment for
102:04 - sorter we can use low dash interesting
102:08 - so this looks like a pretty clean
102:11 - um solution you're taking an array
102:17 - um okay
102:23 - yo this is
102:28 - what do you think about this what i'm
102:29 - highlighting is this going to be useful
102:30 - or no
102:31 - using low dash so i think we can do it
102:34 - without low dash
102:35 - okay but one case we can do it with low
102:37 - dash um
102:39 - because now javascript has a sort
102:42 - moment yeah if takes the usual moment
102:45 - input
102:46 - uh okay let's let's try
102:50 - i've got i've got an approach here which
102:52 - is pretty sick
102:55 - and this i've sent you a slack
102:59 - this also would work i imagine the uh
103:02 - unix thing yeah yeah so i'm on the same
103:04 - the same article as you so
103:05 - figured so so but you see that the one
103:08 - underneath there
103:09 - uses moment so rather than because we
103:11 - don't want the unix
103:13 - we want to actually use um uh
103:16 - we're just using um the
103:19 - what's it called but ours is a bit
103:21 - different dude because we need
103:23 - we've got a key involved so the one
103:26 - underneath it the diff
103:27 - i think maybe that one's better
103:32 - because remember if we use unix it's
103:34 - going to take milliseconds into account
103:36 - but i mean we lost the milliseconds
103:37 - earlier anyway so i guess okay
103:39 - so then the diff would work the diff
103:42 - should work yeah so
103:43 - here we should be able to say uh
103:45 - consorted array let's just say sort of
103:48 - equals array. and then our data
103:49 - structure is
103:55 - okay our data structure is like date and
103:57 - amount okay so when we say array dot so
103:59 - our array is transformed array so we say
104:01 - transformed array dot sort
104:04 - a and b and then uh if you guys don't
104:06 - know what a sort
104:08 - a and b or something like or comparison
104:10 - is i'll definitely check them out but
104:11 - what it does is it takes like
104:12 - the first value and the second value in
104:14 - the array
104:16 - and then you can do some kind of
104:17 - comparison and then it will do and then
104:19 - it would the winner would get the first
104:20 - place
104:21 - second will get a second then you'll go
104:22 - to the second and third and it will
104:24 - basically go through the entire range
104:26 - and sort the array out like it's very
104:28 - clever does it
104:29 - yeah in this case we've got a
104:32 - we're gonna say a dot eight so instead
104:35 - we're gonna do a
104:36 - date maybe like this [ __ ] is that
104:40 - oh i see because we've got we've
104:43 - actually got um
104:44 - that makes sense and then we we could
104:47 - return the sorted array instead of the
104:50 - transformer dude i love how this
104:51 - is such a mind [ __ ] if you're a beginner
104:53 - you would be doing like a
104:54 - dot date dot diff and to know that if
104:58 - you did
104:58 - dot date dot diff it would try to
105:00 - evaluate the date.diff
105:02 - first before it like doing this is like
105:05 - hilarious
105:06 - it would man it really would oh okay
105:09 - remember we changed it to a string when
105:11 - we done transform
105:12 - right i was thinking that well we did
105:15 - format sorry when we did the format so
105:17 - now we need to change it back to
105:18 - moment.js to do the diff
105:20 - right so dot moment here or something
105:23 - dot moment
105:24 - like that dot diff then
105:28 - i think so can you do how do you undo it
105:30 - no i think you would do moment
105:32 - like moments i'm taking the date which
105:34 - is a string calling moment on it
105:36 - or is it the other way is it does you
105:38 - call the moment function i think people
105:40 - i think you call moment like that
105:41 - maybe uh you're you're right you're
105:44 - you're right you're right you're right
105:47 - maybe
105:47 - and then this one we can try it for this
105:49 - moment
105:52 - dude my copy pasting skills are [ __ ]
105:55 - helping me out from high school
105:57 - when i used to plagiarize my way through
106:00 - finishing papers i show you man
106:07 - okay wait one sec maybe for the record i
106:10 - never actually played your eyes just
106:12 - saying dude it [ __ ] worked
106:15 - it worked let's go
106:20 - i love that like we're doing such a
106:22 - complicated thing and there's such
106:25 - little thinking involved it's kind of
106:26 - ridiculous
106:28 - i know man sick wow
106:31 - that is phenomenal yeah
106:35 - and what we need to do
106:38 - for this to be written out in a pretty
106:40 - way
106:42 - is um what are you thinking using the
106:44 - moment library to
106:46 - to languageify the dates
106:49 - what is it called englishify so in
106:52 - transform data now we can
106:54 - actually do it very nicely yeah it's
106:55 - super easy now dude this is sick though
106:57 - this is so sick it is sick it is clean
107:01 - man so now entry zero
107:03 - is actually the key that we're trying to
107:05 - fix now so we can basically go ahead and
107:07 - do moment.format on this
107:10 - and we can change that to wherever we
107:11 - want regardless of what it comes in as
107:13 - so the end result could be moment.format
107:15 - and then here
107:17 - the format just find a nice format dude
107:19 - so
107:20 - uh a format that we like so i guess like
107:24 - you would want something very
107:26 - light like like
107:30 - yeah you know just just literally the
107:32 - numbers like is in like
107:33 - three four twenty something
107:37 - what you would want is it to say october
107:41 - somewhere and then just 22 23 24 like
107:43 - that
107:47 - like maybe oh that that's gonna be maybe
107:49 - yeah no no no but
107:50 - we there's probably something in the
107:53 - graphs
107:54 - in the graph options where you could
107:55 - just
107:57 - yeah for that we could do like a x-axis
108:00 - label or like a
108:02 - yeah i know you mean like a uh like a
108:04 - x-axis label i'm sure there's a way to
108:07 - just do x-axis label you just write
108:08 - october there
108:10 - and then for the days it should just be
108:12 - the dates
108:16 - yeah so where's our get dates
108:19 - oh wait hold on wait no but
108:22 - right now we're trying to do this let's
108:26 - get the format done first and then we'll
108:27 - move on to that a bit okay
108:29 - go ahead so moment format a
108:32 - simple date
108:33 - [Music]
108:35 - we literally just won the simple uh what
108:38 - is the simple one this
108:45 - date formats so oh yeah l
108:48 - is l is what we're looking for i think
108:52 - yeah just l so moment of format l
108:58 - that should do it
109:02 - really i'll give you just a number i'll
109:05 - give you a number there you go
109:07 - it's an american sort of positioning
109:08 - because you've got the the month first
109:10 - then you oh no
109:11 - but i just want 22. i don't even want
109:16 - you know what i mean i don't want the
109:17 - whole thing i just want 22 and then 23
109:20 - and 24 not
109:20 - 10 20 to 20 20.
109:24 - oh you can do that you can do it so you
109:26 - could say as in like you want
109:28 - 22 and then so if you only want the day
109:31 - i think it's just d i think yeah try it
109:35 - i think it's it's where are you doing it
109:38 - and
109:38 - get dates or get transformed okay got it
109:41 - i think it's
109:42 - dd double d's i like it let's do it
109:47 - i think that that's actually pretty cool
109:50 - too
109:51 - oh [ __ ] thursday wednesday oh [ __ ] yeah
109:54 - but still now
110:00 - that's gonna get insanely big that's the
110:02 - problem i kind of
110:04 - like it like this but i i'm just saying
110:07 - just a number like 22
110:09 - 23 24 25.
110:12 - somebody said dd ods
110:18 - you guys know what i'm talking about
110:19 - dunkin donuts let's go
110:21 - oh [ __ ] okay but now it's now it's
110:24 - messed up because
110:25 - i thought it already broke oh my
110:27 - goodness
110:29 - um now the sorted array i mean you could
110:31 - sort afterwards very easily now you
110:33 - could just do
110:34 - if a date if
110:38 - a i mean okay the the question is is
110:40 - that
110:44 - are we gonna eventually have this only
110:46 - by month by month
110:48 - i guess you would right otherwise it
110:50 - would just get insanely big
110:53 - yeah yeah yeah yeah just just month by
110:56 - month we'll be able to add a drop down
110:58 - menu at the top or something where you
111:00 - can
111:00 - some kind of swipeable you know like
111:02 - swipe through the months or something
111:04 - yeah swipe through the month something
111:06 - like that exactly and like we would just
111:07 - have it so
111:08 - it will say october right here on the
111:11 - x-axis
111:12 - yeah so now we don't need moment passing
111:15 - here because it's going to be just a
111:16 - number comparison
111:18 - is this number bigger than that number i
111:20 - said
111:22 - and that should do that for us
111:26 - so now we should have the sorted graph
111:30 - i hope no okay no no because we're doing
111:32 - diff sorry we don't need that now we can
111:34 - say a def
111:34 - minus b def and that should work
111:38 - i hope i think i should do it should
111:41 - check which one's bigger
111:45 - let's go ahead and check yeah it works
111:48 - nice
111:49 - sick okay um
111:55 - no
112:01 - hold on let me actually see how like
112:05 - butler does it
112:08 - [Music]
112:13 - i think that would be cool dude if you
112:15 - had like a month view
112:21 - so how putler does it is like
112:26 - they don't even have it daily it's like
112:28 - every few days so they just have like
112:31 - october 1st and then october 10th and
112:34 - october 19th and october 28th
112:37 - on the x-axis but i don't care about
112:39 - that we don't need that
112:41 - yeah because ours would only be the the
112:44 - problem that we have right now
112:46 - is that ours would be like spread like
112:47 - they would be spread out so you could
112:49 - have something on that 28th of october
112:51 - your next job might be two weeks that
112:53 - you make some income or a week later
112:55 - and you've crossed over the month um
112:58 - what if we had a
112:59 - bar chart that had a line going through
113:01 - it is there a bar chart with the line
113:03 - going through it
113:06 - let's keep because now the data
113:08 - structure is set for the line
113:09 - no i mean like i mean is there one that
113:12 - like literally just puts a bar here and
113:14 - everything else is the same
113:15 - because i'm looking at butler and they
113:17 - have this exact line one that we got
113:20 - but like it just also has a bar right
113:22 - here
113:23 - so then you can actually see oh this is
113:25 - the day that the income was
113:29 - um we can i mean i think so maybe
113:33 - like it's very clear though like because
113:36 - it's literally like an increase you know
113:39 - it
113:42 - [Music]
113:46 - and i i guess i really like my bars
113:50 - like okay let me just show you
113:53 - in slack so you can take a look at what
113:56 - i'm talking about
114:12 - all right okay
114:16 - okay so all right this is all i'm
114:19 - talking about i actually decided to just
114:21 - put it up here
114:24 - oh i see okay so that's like really cool
114:29 - but that's like uh that's a trend that's
114:32 - not um
114:33 - that's you see the actual the number is
114:36 - actually
114:37 - the data is the the bar and the trend is
114:40 - the line okay so we would have to pretty
114:42 - much change a lot of things right for it
114:44 - yeah we'd have to do a bar and then have
114:48 - some
114:48 - see if it's got trend line functionality
114:50 - or something all right no it's fine
114:51 - [Music]
114:53 - um but the y-axis no the x-axis stuff
114:57 - would be interesting now
114:58 - to see um also we need to get rid of
115:00 - this k do we want it in k
115:02 - or do we not in this case i say no
115:04 - because i like k
115:07 - because what if like you've only made
115:09 - like some people in most cases you only
115:11 - made like 200 the time or
115:13 - it could be three grand okay remove it
115:15 - that's fine
115:16 - unless your the income that you're
115:18 - making is always 10 grand 15 grand 14
115:20 - grand
115:21 - yeah no that's fine you can just remove
115:22 - it i think here we see
115:24 - is it no maybe you just remove the
115:29 - y-axis surface
115:31 - yeah just add a x-axis
115:34 - label where the [ __ ] is it though
115:36 - because it says y-axis has a label but i
115:38 - don't see the label or the label
115:42 - uh y-x is the label oh it's a dollar
115:45 - yeah yeah but but then that's wait hold
115:47 - on that's everywhere though
115:50 - oh you you mean like um a legend
115:54 - hold on hold on one second yes i did
115:56 - mean a legend give me one second hold on
115:57 - i'm gonna unfollow you let's go
116:00 - here and i'm gonna try i'm gonna try
116:03 - something and let's see
116:06 - if that looks too ugly or not so i'm
116:08 - just gonna add a
116:10 - x-axis label
116:14 - and um i'm gonna make that
116:20 - that one's in the chat what's
116:23 - up i'm just gonna make it oct
116:27 - let's see what that looks like
116:30 - all right next uh in front of every
116:33 - number
116:34 - what the [ __ ]
116:38 - yeah you've done that to the so
116:41 - how why is a dollar putting it
116:45 - in front instead of ahead of it you know
116:47 - what i mean like
116:48 - the dollar is doing the right thing but
116:51 - oct is doing some
116:52 - funky funky crap but dude i that's not
116:57 - i don't think that's a good approach
116:58 - because this is a hard value that will
117:00 - be here
117:00 - i understand i understand i'm i this
117:03 - would be whatever the value
117:05 - the date picker or whatever we pick from
117:08 - but yeah okay what what do you want to
117:11 - do for this
117:12 - because i think i think we should just
117:14 - have the date
117:15 - itself rather than dd okay
117:20 - so maybe having format like
117:23 - it looks ugly bro like it looks really
117:25 - ugly
117:27 - you mean when we had it like like the
117:29 - whole thing right 10
117:31 - 20 20 20 10 slash 20 i don't think we
117:34 - need the 20 20 but i think
117:35 - something like 10 10 22.
117:39 - yeah okay it's a clean middle ground
117:41 - okay let's see that
117:43 - yeah so something like which would be
117:45 - okay i could try that try that one
117:47 - ed forward slash mmm
117:51 - you can do that and then we need to do
117:52 - this moment
117:54 - oh [ __ ] was this moment. and then we say
117:57 - dot death
117:59 - uh moment
118:07 - uh i think that's good
118:10 - because now we're doing compression on
118:14 - we got we've got a syntax error oh [ __ ]
118:16 - x axis is legal
118:28 - wait what's going on something's broken
118:33 - um it says 59.
118:36 - oh
118:43 - [Music]
118:46 - um
118:50 - there we go you just weren't closing the
118:52 - parentheses dude i'm here to close your
118:54 - parentheses bro
118:57 - marabon is there to complete your
118:58 - sentences i'm there to close your
119:00 - parentheses
119:02 - that's it boom that's good man
119:06 - that looks pretty good that looks no no
119:09 - okay i mean you
119:10 - we have to flip it because this is uk
119:12 - version of it
119:13 - which it's giving me a cause
119:16 - this is the mm dd yeah
119:20 - it's still oh [ __ ] okay so we've got a
119:24 - problem it formatted it but the diff
119:26 - isn't working no it's working bro it's
119:29 - it's fine it's perfect you're freaking
119:30 - out for no reason
119:32 - oh now it is on the other way it wasn't
119:34 - working no [ __ ] yeah yeah yeah
119:37 - okay not bad not bad that actually looks
119:40 - pretty clean
119:41 - i'll take that uh also what about when i
119:44 - hover over it can it give me like a
119:46 - little
119:46 - thing huh uh yeah
119:50 - so tool tip i think is what you're like
119:53 - some kind of tooltips thing right
119:54 - yes yes yes yes
119:58 - if we can get access to the element we
120:00 - could do whatever we want with it okay
120:01 - before
120:02 - before we do tool tip why don't we
120:04 - attach the form so then when we actually
120:06 - submit the form it adds a new date on
120:08 - the calendar
120:08 - or on the line chart yeah let's do it so
120:13 - that'll be sick we see it in dynamic as
120:14 - well okay so
120:16 - in that case now we this is our our data
120:19 - structure that we expect
120:20 - you know so now what we can do
120:23 - is we can have it so because when you
120:26 - when you submit it's just going to be
120:27 - moment
120:28 - format lo so
120:31 - what we do is we say we go to
120:34 - add gig and we say description is
120:37 - description amount is mount
120:39 - and description
120:43 - description okay oh the gigs oh yeah
120:46 - oops
120:52 - um
120:54 - [Music]
120:56 - now we can say
120:57 - [Music]
120:59 - here we set the gigs but we actually
121:02 - want to set the data
121:06 - okay so let's leave the gigs there from
121:08 - for now we don't care about this one
121:10 - instead let's just say set data set data
121:15 - to be whatever the data currently is
121:18 - so spread the data plus
121:22 - the date which is moment dot format
121:26 - and we're going to keep our format log
121:27 - because we did everything based on that
121:31 - and then we'll say
121:36 - this needs to be an object no we need to
121:39 - say format
121:40 - keep web is in the data and then have a
121:42 - object
121:44 - here which is date and there was a
121:48 - amount okay so amount is amount
121:55 - okay thing and set description
121:59 - okay that should
122:03 - actually if that works now then it
122:05 - should actually be doing it
122:08 - oh looks like something worked okay so
122:12 - now freelance and then they say enter a
122:15 - money made say like a huge amount so
122:18 - 20 000 ad gig oh
122:21 - snap okay it did it
122:25 - have a try
122:28 - oh whoa whoa
122:39 - you see this it did 2 000 so why is it
122:42 - added
122:43 - you added a string of 2 million
122:46 - for me added a string of 2 million 600
122:48 - so oh because yeah it added as a string
122:51 - wait hold on what the [ __ ] yeah because
122:54 - yeah so oh but then what was the
122:58 - so we can we can debug it we can say the
123:00 - amount it just keeps adding it to as a
123:02 - string to the
123:03 - current like values it doesn't actually
123:06 - increment
123:07 - there's something [ __ ] up going on
123:09 - with the y-axis
123:11 - that's right that's right it's it's just
123:13 - literally adding it as a string to the
123:15 - final one
123:18 - so now it should be good so if we say
123:21 - freelance because
123:22 - yes you'll be careful with that
123:25 - um
123:30 - like that yeah okay there we go there we
123:33 - go that's why
123:34 - yeah that was a good catch yeah
123:41 - that's sick man dude do like five grand
123:43 - and you'll see a spike
123:45 - all right or 15 grand
123:48 - 15 grand sorry i mean no no let's just
123:51 - test
123:51 - five grand today and we will do uh
123:54 - coding boom
123:58 - right there on the 29th look at that
124:00 - that's it it's coming out
124:03 - that's sick nice
124:07 - and dude now we have a data structure
124:11 - we have um the way we expect
124:15 - that to be pushed in everything we have
124:16 - the app flow working
124:18 - it's super easy at this point to
124:21 - actually go ahead and connect that to
124:22 - firebase get everything dynamically
124:24 - shifting on there and keep it on there
124:26 - oh [ __ ] then we can actually
124:30 - like use this app on our phone or any
124:33 - device actually at that point probably
124:36 - because if it's hosted on firebase then
124:38 - i can just log in
124:40 - so what we what we could do as a sort of
124:43 - as uh
124:44 - the next natural sort of step for this
124:46 - is having
124:47 - user authentication yeah which would put
124:51 - you to this page
124:53 - right yeah and then if you're if you're
124:56 - authenticated you'll come if not you go
124:57 - to a login page
124:59 - and then what we can say is and then
125:01 - your data set would be
125:03 - pulled from firebase based on your user
125:05 - id and then that way
125:07 - when you're in your account you would
125:08 - only see your stats when i'm in my
125:10 - account i'll see my stats
125:12 - that's perfect that's perfect that's
125:14 - exactly what we want
125:19 - so like but do you think by the next
125:22 - um stream we do we'll actually start
125:26 - being able to use it on our phone like
125:28 - we'll actually be able to go and start
125:29 - logging my income
125:32 - and be able to see i think itself i
125:34 - think once we get the authentication
125:36 - done
125:37 - yeah i think yeah so authentication is
125:39 - going to require two things we're going
125:40 - to need
125:41 - navigation inside of our app uh-huh so
125:45 - you think you think you think so so you
125:48 - don't think we will be able to get
125:49 - that up and running in our next live
125:52 - stream but the
125:53 - stream after that so for example we're
125:55 - going monday thursday
125:57 - um yeah i think i think well track
126:02 - how's your next week looking like are
126:03 - you uh
126:05 - booked up next week or can we go live
126:06 - maybe more time so then we can make
126:08 - faster progress on it monday thursday
126:12 - 100
126:13 - no tuesday's coaching call
126:16 - got it yeah
126:20 - uh potentially wednesday we can go live
126:23 - again as well
126:24 - okay but we've got a challenge now
126:28 - of authentication in typical react apps
126:31 - pretty easy
126:32 - we just go ahead and we do it um
126:35 - trying to get my phone basis error while
126:37 - being property d of a view mention okay
126:39 - dude just um just say ignore on it or
126:42 - something like do that like
126:44 - just um swipe it down or something
126:47 - and it just goes away and you can
126:48 - actually just use it
126:54 - like i'm able to now use it on my phone
126:58 - oh [ __ ] nice we got a five pound
127:00 - donation a five euro donation thanks for
127:02 - being my practical teachers i'm still
127:03 - new to programming
127:04 - and you guys make it so much fun oh [ __ ]
127:08 - thank you goodbye
127:12 - thank you bro appreciate it dude i
127:15 - really appreciate that
127:17 - so um so this
127:21 - next so firstly is clean up this stuff
127:24 - so few things happening that are funny
127:28 - one of them is that i think it's like
127:30 - yeah not
127:31 - not behaving the right way on a on a
127:34 - phone
127:37 - okay maybe it is um
127:40 - no it's also it's like it's not sorted
127:43 - and then it's also doing some funny
127:45 - things for example let me um
127:48 - so remember this tunnel it may not be
127:51 - the latest um
127:53 - no it's the latest because it's when i
127:55 - type in stuff it actually
127:58 - pops it up so it's connected to the form
128:00 - but like look at how it's uh
128:02 - not sorted
128:05 - it's possible it could be not the latest
128:07 - i'll try
128:08 - again let me try again sorry
128:12 - so my one right now is not the latest
128:14 - because i refreshed and then i click
128:16 - tunnel again
128:17 - and then i scanned it and then
128:35 - mine's downloading
128:42 - oh yeah it just keeps doing some
128:45 - funky stuff so if i say abc
128:49 - and then okay so it's not so that's one
128:52 - and then one two
128:52 - okay ah
128:57 - i think i know why actually
129:00 - this is why it's deprecated um
129:04 - moment.js is deprecated because
129:07 - the dates on format aren't supported in
129:10 - every
129:11 - browser oh [ __ ]
129:16 - i read it somewhere before and which
129:18 - means that in this case
129:20 - moment.js is support but the diff isn't
129:22 - working
129:24 - huh so the actual the actual values are
129:26 - working dude if i write testing
129:28 - and if i do like 20 or 20 000 yeah that
129:31 - works but it's all
129:32 - like sort the sorting is off and stuff
129:34 - like that
129:35 - so the sawing is off so so we need to
129:38 - fix the sorting
129:38 - um
129:42 - month month later okay so
129:50 - but beyond that anything else i think
129:52 - that the the key
129:53 - the keyboard not disappearing is another
129:54 - bug that's like a sort of
129:56 - we can fix that afterwards um
129:59 - very minor issue that one um
130:10 - i mean dude what i'm excited about is
130:12 - authentication firebase i can even use
130:14 - it from my computer
130:16 - yeah or i can just go on my phone and go
130:18 - on google
130:20 - and just go to whatever.com and log
130:23 - my daily income i just care about being
130:25 - able to log my daily income
130:27 - that would be sick right now this app is
130:29 - essentially just a react up it's not
130:31 - really a full-on react
130:33 - i mean it is react native because this
130:34 - graph is only react native
130:36 - um i'll take that back it's reactive
130:40 - yeah
130:41 - um yeah
130:44 - you can deploy this app too uh web
130:47 - though no
130:49 - okay dope so you want to let's make
130:51 - progress on it on
130:52 - on upcoming monday yeah let's go for
130:56 - so next goes for the next stream are
130:58 - react navigation
131:00 - yep um so we have some kind of
131:03 - navigation aspect
131:04 - and what we should do is we should
131:05 - commit this to a a repo that's between
131:07 - you and i
131:08 - uh-huh and then that way we can sort of
131:10 - like push the code have some kind of
131:12 - source control over it
131:13 - let's do it you have access to my
131:15 - terminal
131:17 - uh let me create a
131:20 - github i don't think i've got
131:24 - your organization's epa you should you
131:27 - should have access to my organization
131:29 - okay yeah
131:30 - yeah i'll make it private for now um
131:32 - nope
131:33 - so oh if you make it however public
131:37 - um you can make it
131:40 - public right like is there anything
131:42 - private about this i mean they're not
131:44 - going to be able to
131:44 - er they'll be a pull request if anything
131:47 - so
131:48 - yeah that's okay make it public so we'll
131:50 - call this um
131:52 - unless the only thing we code in here
131:53 - are like passwords from our most secure
131:56 - website and it's just like
131:58 - a set of strings like one array of uh
132:01 - array that's just called sonny's
132:02 - passwords just
132:04 - all your passwords in here like [ __ ]
132:08 - that slip so we have
132:12 - income tracking app um yes let's do that
132:16 - income tracking now
132:20 - okay i just want to check something get
132:22 - status
132:24 - what's that laptop yes package
132:32 - there's a lot of files here that aren't
132:34 - going to get committed with me
132:37 - [Music]
132:41 - creating the expo app okay so that was
132:43 - part of it okay
132:45 - let's check in um okay so
132:48 - income tracking app yeah repo repo name
132:51 - yeah income dash tracking okay
132:56 - [Music]
132:59 - in public great repo
133:06 - yeah and then if you just open up the
133:08 - tumblr they can see what i'm doing
133:11 - um a
133:13 - [Music]
133:15 - glogging remote add that [ __ ]
133:19 - to do js
133:25 - there we go and then i'm going to say
133:26 - get
133:28 - add or get stairs
133:32 - okay
133:36 - save first i will just say
133:42 - um freelance developer income tracker or
133:45 - something
133:49 - let's say i did graph
133:58 - nice
134:02 - just push that bad boy oh
134:06 - origin master bruh just do good push
134:13 - and let me check let me check let me
134:15 - check
134:16 - uh refresh hey there we go yeah it's
134:19 - there
134:21 - yeah all right let's uh follow this link
134:24 - open here it is y'all
134:28 - if you want here's the url doing a quick
134:32 - url reveal
134:33 - now i'm gonna hide it boom
134:36 - if you guys want to use this you can go
134:39 - ahead
134:40 - and use it wait hold on there's nothing
134:41 - in here
134:43 - uh refresh oh wait a second i just have
134:47 - yeah refresh
134:48 - no no it's not refresh it's i just have
134:49 - to expand it if i don't expand it
134:53 - oh it says view code yeah yeah
134:57 - so
135:00 - nice this is awesome we got the whole
135:03 - thing
135:05 - here you guys can go to app.js to see
135:08 - all the code
135:09 - that we wrote everything is here for
135:13 - your use
135:14 - and enjoyment yeah and we left the
135:16 - console logs all that stuff in it's
135:18 - it's non-refactored like code so it's
135:21 - pretty much like at the point we left it
135:22 - so
135:23 - you guys can play with it that's it
135:27 - oh [ __ ] we forgot to promote the webinar
135:30 - oh whatever it's all good there's gonna
135:31 - be a webinar coming up this sunday
135:33 - if you're on our email list or whatever
135:35 - you'll be able to get access to it
135:37 - yeah make sure you guys are there
135:39 - because it's going to be a value drop
135:40 - and we're going to talk about how you
135:42 - can pretty much
135:43 - push all of your react capabilities in
135:46 - 90 days guys that webinar is gonna be
135:51 - sick
135:52 - super jam-packed with value we're gonna
135:54 - be giving it all
135:55 - um our all it is going to be exclusive
135:58 - and not
135:58 - on youtube it'll also be in a way where
136:02 - you can jump on and communicate with us
136:05 - so if you want that then make sure you
136:07 - show up on sunday the only way you'll
136:11 - get a reminder is if you're on our email
136:12 - list if you're not on our email let's
136:14 - just go to cleverprogrammer.com
136:16 - pop in your email somewhere and you'll
136:18 - be good to go
136:19 - yeah exactly right now the link in the
136:22 - description is for the
136:23 - course so we actually will update that
136:25 - for next time
136:26 - and we'll have it yeah yeah and of
136:28 - course if you guys want
136:30 - to just jump into our course which is
136:33 - the best course on the planet when it
136:35 - comes to
136:37 - development then go ahead and
136:40 - feel free to do that this course will
136:42 - teach you
136:43 - everything that we're talking about here
136:44 - and much much much more it's called
136:46 - profit with javascript
136:48 - and the number one goal of this course
136:52 - is to help you make
136:54 - a killing with javascript exactly
136:57 - and guys all the things we talked about
136:59 - today like those data structures
137:01 - all those like kind of you know those
137:02 - kind of problem solving things that you
137:04 - get stuck in
137:05 - and you might be watching it thinking uh
137:07 - how the hell am i ever going to get to
137:09 - that point
137:10 - and we pretty much put our heart and
137:11 - soul into making that very easy for you
137:14 - to get to a point where you can solve
137:15 - problems like that and take it a step
137:18 - further and make some money with it so
137:20 - link in the description if you want to
137:21 - check out that's right
137:23 - so take advantage of that you guys the
137:25 - link is in the description
137:27 - students have gotten some insane insane
137:29 - results
137:30 - from what they have learned so take
137:33 - full full advantage of it other than
137:36 - that guys
137:37 - uh that's it for me this is qazi
137:41 - and this is your boy papa react this was
137:44 - a
137:44 - dope cool man this is a lot of fun this
137:46 - was sick
137:47 - all right i hope you guys enjoyed it we
137:49 - made some solid progress and on
137:51 - the next one on monday for this app that
137:54 - we're building we're going to continue
137:55 - the process and the goal is
137:56 - to build an app where all developers
137:58 - from the world can actually use it to
138:00 - track
138:00 - their income and to attract their
138:02 - freelancing income more importantly
138:05 - exactly yeah make sure you guys
138:07 - subscribe if you're not already
138:08 - subscribed hit the bell icon so you
138:10 - don't miss those videos coming up
138:11 - and yeah smash the thumbs up button if
138:13 - you enjoyed this yep and we'll have a
138:15 - dashboard
138:16 - so sunny few things we need to add to it
138:18 - is the ability to add a picture proof
138:21 - at one point yeah yeah right so we'll
138:24 - add the ability to add picture proof
138:26 - the whole point of this is going to be
138:27 - like everybody will everybody will be
138:29 - able to log their income
138:31 - at clever programmer we will be able to
138:34 - proofread and verify
138:35 - about your income and we will have a
138:38 - central dashboard view where we'll be
138:40 - able to see how much
138:41 - income everybody a clever programmer has
138:43 - made
138:44 - exactly yeah exactly we're gonna go
138:46 - ahead and have it
138:47 - so you can log in you can have your own
138:49 - account we'll support a bunch of
138:50 - different login
138:52 - logins and we'll show you how to build
138:54 - all that which would be cool
138:55 - and yeah like it's going to be proven
138:58 - income and then
138:59 - the amazing thing is we're going to have
139:01 - all of that income sort of like
139:02 - all those stats and things like that so
139:03 - we're going to actually we can pretty
139:05 - much go ahead and do something crazy
139:06 - with that have some kind of leaderboard
139:08 - you know some kind of stuff going on
139:09 - um that would be awesome to see as well
139:11 - but yeah you guys are gonna see all of
139:13 - that being built up which is pretty cool
139:15 - that's gonna be sick and uh me
139:18 - maribon and sunny we're all gonna go to
139:22 - cheesecake factory
139:24 - in l.a she always talks about cheesecake
139:28 - she's like oh we need to go cheesecake
139:30 - hatchery i've never been
139:32 - everything that's gonna be sick all
139:33 - right love you guys
139:35 - uh sunday at 12 p.m or 11 a.m when is
139:38 - the webinar should we go 11 a.m or 1 uh
139:40 - 12 p.m
139:42 - want to go 11 a.m uh other webinars yeah
139:45 - let's do it
139:46 - cool 11 a.m pacific sunday that's where
139:48 - we're going to be doing it how to become
139:50 - a react js developer in under 90 days
139:52 - it's going to blow your mind make sure
139:54 - you show up with that said i love your
139:55 - beautiful face this is qazi
139:58 - this is your boy sunny papa react and we
140:00 - will see you guys
140:02 - in uh hopefully

Cleaned transcript:

is up guys how's it going this is qazi from clever programmer and it's your boy papa react how's it going guys part two of react native yeah so it's gonna be exciting i hope you guys are excited last time we left off right about here if you guys remember and we were working on this app and we wanted to make a income tracker for developers all right and this is where we left off we got a nice little pretty graph going we were working on adding the ability to add your income and then it should plop it up onto the graph and that's what we couldn't finish in the last video so that's where we're continuing from exactly we're going to be adding that functionality to groups it so like as we add that income it's going to group it by the day and that's going to be a little cool problem that we're going to solve live in front of you guys um so that'll bring a lot of value to you guys um yeah we can see people starting to flood in nice mexico in the house hey let's go 85 viewers in the house let's go what's up guys so um i hope you guys are excited guys if you want this video to go out to more people and if you want to become a react js developer and make a lot of money then go ahead and smash that like button smash that like button guys and get this video out as many people share with your friends all that stuff we we're just starting this new react native series so it's gonna be a lot of fun so if you guys have been excited for that let us know either in the comments and if you haven't already like cards you said smash that thumbs up easiest way for us to know that you actually like the stuff we put out that's right oh that's all that's one way to freaking start it off strong jesus all right so my hold on i don't know what's going on but let's try this that should work boom wow we just got an amazing donation by gabriel graves thank you so much dude he goes let's start this strong let's go 20 donation he's becoming our new frank he is dude he's becoming literally the new frank and hopefully he'll be he'll be landing a huge client soon oh yeah that's the path and he says you made my day that's what we're talking about dude we love that kind of energy uh qazi go ahead and share the uh vs live share with me and then we can up on the same coding sesh all right brother you got it i'm gonna go ahead and do that right about now guys i'm excited about this one and uh sunny i'm actually excited about this one because i want to be able to track my income yeah and it'll be it'll be fun dude like like it's one thing using an app that helps you out and gets you more like you know productive and [ __ ] like that but like actually having built the app and like imagine we're using the app and we realized that oh it might be cool that if we have this or if we have this then going ahead and adding it and playing with it that would be safe yes yeah i'm excited about that bro nice i'm inside now welcome guys calvin comes in and goes geez gabriel always putting his foot on her necks hahaha love it and then he goes gets the people going rotation in the house what's up guys oh nice we've got west africa as well nice what's up lelenky yeah amazing awesome all right all right all right right now we were using expo to get everything running last time yeah uh xp is dope it's the first time i was using expo as well and xbox gave us some pretty cool cool features last time because we were able to actually share a qr code with you guys and you guys were able to actually pull it up on your phone and you guys know yeah you can do that right now by the way guys so i'm gonna go and tunnel and make it big and i'm going to hide my screen for a few seconds so now you're going to get a few seconds right about now and if you just take your phone iphone camera and point it to it it's because you on local autumnal i'm on tunnel oh it's gonna pop this app open for you and then you should be able to see all the development we are doing live in real time and that'll be super super cool that's it that's all i had to say there we go downloading it loading javascript bundle yeah guys go ahead and do that because it's awesome and if you don't have the app literally go ahead and just point iphone users just point your camera at android you can you've got the scanner and if you don't have the app that you need to run this you can pretty much it will prompt you to download it but it might take a little while to get started and spin up but once it does it's pretty sick it's pretty cool going ahead and as we code you can see it some people saying it's a bit slow yeah it is a little bit slow but imagine once it loads up you pretty much get that connection with us which is which is pretty cool yep it is super cool uh go ahead and share the the servers as well so then we can i remember the ports it was um if you've got the terminal open if you hit w oh man this is why i told these guys to move imac pro and they did not so it's like crashing now oh [ __ ] yeah it's like maybe in that it's maybe in that case dude don't have the tunnel have the lan no i mean like it's not the app it's more the live stream yeah so for example like it's not even bringing my picture and picture back up on the screen so that's a bit of a problem but we'll just keep going i mean my screen is working so that's a good sign and then i'll bring our picture and picture back up later okay so uh in that case you can you can still get to the extensions right is in the vs live share panel yeah um and if you got the terminal running uh the other terminal can you get to that yeah i have i have two terminals open and i have them both running and i'm gonna give you read and write access to them okay yep i can see the node one okay yeah here we go so you've got building javascript bundle attempting to open the project in a web browser so it should on your computer actually go ahead and pop up okay so local yep uh so sharepoint19006 with me cool okay so somebody says see handcast after using expo can we build it for ios like a native yeah so pretty much expo the only the benefit of expo is one you get to go ahead and prototype it on your own phone on a few other things and you get to share it with like like imagine you built it sent a client like a like a link or like a qr code and said hey like why don't you try it out like they can go ahead and try it out but the the only benefit to using expo is it's gonna be faster like it's gonna be a lot faster and right now um i actually have the phone up on my on my device which is awesome so i can actually see it on my screen over on my side which is which is crazy oh [ __ ] um i mean for some reason mine is not working it's not coming on your your screen no on my phone oh now it's there cool there we go oh now we're up as well we're back on the screen so you guys can see i've got the app actually up and running on mine uh sava says the tunnel is working as well awesome um nice rishi seeks this kanji i figured out how to get rid of the decimals uh go for it it goes decimal places no okay let's go ahead and we can try that thank you for that dude that's awesome yeah let's go ahead and try that so let's go down to decimal places and pop in no okay let's see if that works so i hit save on that and then it says compiling oh [ __ ] nice it worked yeah nice that's awesome rishi wait hold on where did you put it one second let me see i'm focusing too much on the stream now i'm going to just focus on the code a little bit so this one 65 965 ah okay cool oh that is nice that is really clean yeah i mean i would never wouldn't have thought no [ __ ] i wanted to just make it zero i know right yeah i think we tried zero right and they tried zero they kind of messed up it doesn't work yeah okay so that's gonna be um so that looks clean now and guys what we were on last time right is is you can on this app is pretty cool like if you guys are going on your phone right now what you can do is or if you haven't we can run through it on the side basically you enter a description so imagine we typed in like uh let's just say freelance job or something freelancing job and then you put in the amount of holiday that they don't see what you're putting so i'll i'll put it in yeah holy [ __ ] bro look at that [ __ ] every single type i every single second i write yeah it's a good use effect huh react hook this example of uh yeah exactly this is where it's generating a new random because it's rerendering every time yeah which means that we've got the data ran math.random that's why it's going [ __ ] crazy every time we type in yeah so notice guys i just added in a job freelancing job for 200. and 4.99 plus 200 is 6.99 so this total up income gets updated but this chart needs to update uh so the way we need to make this react hook is that i imagine this chart needs to update only after a submission happens right uh so we actually want to do it so the data set here so if you follow me oh i see i see okay so it should just follow whatever this data set is yeah so this data set is basically let's actually start building out so this data set is an object with a key data and that's just an array of the data points right yeah now every one of these data points goes in line with like you see where it's on monday tuesday wednesday thursday friday right um so we if we have five data points we should be having five things here so right now we've got four which is why the the dots aren't in line with the axi the x axis so what we want to do now is actually go ahead and have a piece of state which is going to represent our data right so let's go ahead and make a piece of state so i say quants and guys we're solving this as well as as you guys are seeing it so it's the first time we're doing it as well there's going to be a core experience for you guys to see so set data and this basically can you write down what the problem is like in just in comments like right here um yeah oops those are python comments all right uh put come on come on both yeah yeah yeah more and what what you want to do is okay so right now the problem that we're trying to solve right is we want um yeah so we want to we want to have all of the data right so so the first problem is we want to have this in a variable right so so we want to end a piece of state so so even this math.random we don't want it here i just want it in a piece of state up here so that's the first point and the reason why is because once it's in a piece of state we can control it we can manipulate it we can change it we can do stuff with it if it's just here hardcoded we can't do anything with it right so that's the first problem so this data set needs to be in a piece of state so what i'm going to do is i'm going to copy that go up here and i'm just going to pop it in here so the default value is going to be an object with data inside of it right data set needs to be in a state uh variable there we go and then what we're going to do is we're going to go ahead and replace the one that we're using here so the data set okay so this is actually an array of an object okay but yeah it's array of an object right so in this case what we need is this needs to be an array of an object so we need to match that so an array of an object so sunny and then we can do it okay okay okay go ahead so i'm like just trying to yeah so basically it is the problem of if i log my amount of money that i made today and i keep logging it it just needs to keep being put in that data set right like every time i hit add gig and i add the thing it should add it to that data set yes exactly got it and then it needs to add it it needs to add it with my dollar amount along with the descript um the description along with the date yes so the way it works is kind of weird right like the way they the way that their sort of api works so like it takes a data set and you can have several data sets we're only going to use one right so in our case we've got this this array of data sets but hold on just one second so for example if i put in a 300 amount for that day where do i put how are we planning to store the date next to it because in python for example what i would do is i would have a array of tuples and i would have 300 along with like whatever the date is right 10 um october 27 2020 and it would be like that and then i would have yeah you see what i'm saying so that's how i would store the data sets the number along with the date of when it was submitted so in this case what it looks like is we need to generate some kind of data data structure which is like this oh [ __ ] um some kind of data structure which looks like this so like imagine i'm just going to comment it here yeah just imagine writing comments go ahead because imagine like if you have four so these are going to be each day for example imagine this is today all right so monday is today tuesday tomorrow and i'm sorry imagine thursday was today wednesday was yesterday tuesday was the day before that and monday was the day before that right yeah now this is going to be the value for this day this is going to be the value for this day this is going to be the value today and this is going to be the value for this day wait wait wait okay okay so what we so hold on so what um i understand can you see the graph let's save it and then what we can do is we can show it in a really clear way so i get what you're saying this this represents this is attached to that right there the the zeroth point on this and the first point so they're like basically mapped by like position of the indices yeah that's what it looks like right now okay but how well when i type in my number here like let's say i made 200 will it no because it's just gonna add it as a fifth point on in this array no yeah so what we need to do is we need to do a user effect so imagine this this data structure we're gonna have like an array right as in like an object sorry or an array i mean we'll figure out what we need but we need like an array of objects and then that object would be like the date so you would have one kind of date and then you'd have a number so imagine for that date you made two thousand dollars right that's what that's what that's what i'm saying that's what we're looking for an array of objects that that's that's it if we have that data set we're good that's all we need yes perfect exactly and what we're gonna do is we're gonna we're gonna have this uh variable being manipulated and changed in a use effect which every single time i understand uh data gets added to data set it groups again yeah yeah i just wanted to understand the logic of the problem like regardless of the complexity of react involved in it but i understand what you're saying now with the whole thing with like okay so this is going to be our data structure but then we're going to use the react way of doing it and add that to this so then every time we actually hit submit it adds it in a nice way exactly exactly that okay so we have this array here and this will be the data set um but it's kind of um so this even our labels needs to be like it needs to kind of be it needs to be thought out quite cleverly how we're going to do this yes um so what we we could do is we could have two we could have two two pieces of state one for the labels one for the data sets um i would prefer to have like one which had everything inside of it so we could have like a date uh this is going to be an array yeah one is an array of data i think one piece of state that's an array of objects so then it can hold the date and the amount because no because what we need is this is going to give us this right but you see here it accepts an array of the data points so how do we can translate this to the array of data points and where do we store that can we can just we can just write a function that can turn this into this type of thing right right after yeah we could do that yeah so we could do that so it could be a function which which takes this object and returns back the data points and then this one right yeah yeah like for example um it'll be like get the key for this yeah i'll be getting the keys for these i mean that's the [ __ ] tricky point because then what it would need to do is like the label will say mon and then another time mon and then another month right no but that's where the use effect will come in and it will have um a grouping so every time it changes um it would group right so that i saw that holy [ __ ] bro oh man if marabon was here oh man all right so somebody says use memo will be cleaner yeah so dude once we get it done right what we can do is we can memoize it which means memo means like if it's an expensive calculation right you can memo it like you can use it called a memo and it basically cleans up the operation so it's a lot quicker every time it runs um it sounds like you're saying memorization incorrectly memoization no you're saying it i'm saying that when you say that word to normal people it sounds like you're trying to say memorization but you're saying it incorrectly oh yeah but the word is actually memo isaac memoization i'm white yeah oh thank you so much stephen he says congrats and your nieces appreciate it okay so the data here would be this and then okay so let's just kind of like map out because it is kind of a positive it's a bit of a tricky situation so we've got this so now we're going to do is we're going to have an array so firstly it's going to be an array uh and then we're going to have our data points so let's just structure as we expect it so we're gonna have my david's data point so the first one would be something like new date let's just stay up with this new day um and then this one would be um wait where is it oh you know so we got this oh yeah that's a key sorry um the date oh okay now we got another issue wait is the key can't write it um you could do it like that oh that's how the dynamic jesus is really yeah yeah it's pretty weird right and then you can have something like um 2000 yeah yeah yeah okay that's cool that makes sense yeah so you could do something and then the second one would be essentially the same thing but it'll be so what what does this become does it by default become the date of today new date yeah but that would be today's date yeah right so that's going to be today's date um and then this one would be uh let's just try and get yesterday's date in an easy way so a new day minus one for yesterday i'm just googling it quickly uh i mean let's just just hard code oh we probably we don't want a hard code because we want the data object yeah i just want to kind of get like a very quick sort of yeah i like i'm sure the more tangible mvp we can put together then it's easier to solve the problem like the less abstract we can make it the easier it is to actually solve the problem exactly just because you just kind of kind of get to a point where you can see your data structures and things like that yeah that's what i always try to just desperately get to as fast as possible i want to see my data points and let's not forget us okay it's not this kick so logo hold on one second what the dude you just put like a fire emoji or a pistol emoji or a right or something there you go uh save it make sure you save it oh yeah that's spam the save there we go so mine's being slow as hell um you are you're sharing uh yeah you are sharing it so i can load it up so yeah i can see it it's just um really small so i'm gonna make it easier for people to see console let me go ahead it's a bit smaller as well okay so so what we can see is we open the console we've got the array so it says debug and it's got the array inside of it and it's got today's date one time and everything yeah one it's actually got some weird word what one where do you uh so you see that that that weird string right yeah right here yeah that's that's actually yeah so it's got the date and then on top of it it's got some other weird one right that's it so so why is it unix right okay so is this a hold on one second this array has two items right why does it say length one because length one means oh shh this is because of this this is my this is uh maybe here we have an object because you have to get rid of them you have two items in the array wait hold on this is not an this is not an array of objects it's just one what do you is it this is an object we wanted an array right we wanted an array of objects so yeah we want a of objects yeah that's it exactly why close your parentheses bro this is the [ __ ] cutest [ __ ] i've ever done live holy [ __ ] dude that's like bro ship on another level like i'm closing your parentheses now yeah this is deeper level of understanding than any relationship i know right it says okay so new date minus one gave us a unix value which we don't want we want just a clean yesterday value so how do we get that how do we get we just want something simple um there's a few ways you can do it but i don't really want to use moment okay you know what let's there's actually a spring moment in because we're going to need moment anyway subtraction hey man i heard us deprecated yeah somebody says guys somebody hold on hold on maybe it is bro hold on one second deprecation warning wait that was in 2017. [ __ ] that maybe yeah and i don't care bro it's too late paul says it is i haven't had a moment being deprecated deprecated i don't bro i just don't believe anybody until it doesn't work for us anymore like just try it and if it works for us then it's not that right apparently let's see but it's heavily used okay so yeah i thought moment.js thank you for your service go down um okay but it still can be used right yeah okay cool because like spectacle is deprecated but i use it every single day yeah exactly and it's like it's great so i'm going to go into the terminal and i'm just going to put in npm install moment dash dash save so if you come on j on the time in ps code um all right what type of stuff are you trying to tell me to do so open up vs there we go the [ __ ] are you doing bro save what is that you don't do that anymore no no i copied and pasted it from a deprecated a good way to start things oh man because the good thing the moment is you could just do like a moment subtract one day yeah and it will give you the exact yeah dude i write such clean code like when i actually get time to turn some i remember i was writing these like you know that text that we get sent for the automated text testing and stuff or the income numbers and stuff like that yeah i wrote like the most beautiful moment piece of code that would sum up the stripe numbers and then turn it into like one date from like stripes garbage unix numbers it was so satisfying when it turned to like one line of just beautiful code and then we got butler and we ended up like not using at all any of what i did but whatever i mean it was that story was really good until it went really bad boys moment today um oh god okay so somebody actually gave he goes let d equals new date set date get date minus one yeah i saw that dude um dude we we don't care just whatever [ __ ] works works i'm not religious to [ __ ] deprecation and none if this works and it's easy then i'm going to just do it yeah exactly which one how do you do moment i think that's just you just thought and that should generate a um moment get today get a moment.now or something right is that how it is or no about that yeah so it's just moment yeah okay so that's today and then to get uh yesterday we do moment dot uh distribution and then just do minus subtract and then um one day one and then days exactly and let's go here yes and then save we should get the correct stuff now should we have to refresh or what uh yeah i'm good yeah so so 29th and 28th so oh because you're in my terminal i mean i've got the locals that's what i mean that's what i mean you're in my local host that looks clean i like it nice okay that's dope so now we've got we're kind of got like a mapped data structure right yeah um oh what we should do dude is actually let's get working with dummy data first build those functions that plug in the data from this and then we can go ahead and build from that that is the only way i do things i i like to my brain is a little dummy sometimes so i like to start with dummy data first oh yeah let's do that so then this one and then what we'll do is we'll say like my rule is never ever absolutely no case use your thinking until you absolutely absolutely have to there's no other way around it then i will think yeah and it's true if you just take a step back kind of mask it out first it will make it a lot easier guys because like even now that we just drafted it out like this as opposed to kind of like if you just constantly kind of code the solution like raw it's kind of so suddenly says packages have yet don't worry about that now guys like you can optimize things when it gets do not care because i can have yeah like if there's a day where i'm just really bored i can sit and optimize it that's not a problem at all like you can easily turn it into vanilla javascript code afterwards yeah also bro i was watching did you see um firebase summit is live right now oh integration with strike oh [ __ ] stripe yeah so now you can do uh dude description payments hold time hold on why don't we watch their video and react to it like and and record oh let's do that let's do that you know what i mean and then like we just react to that video and like watch it let's do it i'm down you know let's do it because because i was uh i watched day one and that was dope and then what are you doing watching this [ __ ] without me bro this is my do you i went to go send it to you and i literally i don't know what the [ __ ] something took my my shelf and i was like oh [ __ ] that you know i just really e3 like e3 the gaming convention yeah dude it's like my fix i used to religiously watch e3 every year and i would watch like all the conference on like apple and stuff like that now we could watch firebase freaking conference you know that would be sick yeah it is man because i was watching it and i was like oh man i was like damn and then they had some stripes off and i was like oh [ __ ] there's fixing a huge problem and they made it so easy now to do subscription stuff and uh like dude with like five lines of code there was full subscription handling and i was like wow yeah it's insane bro even invoices everything sent from stripe wait hold on so basically everything we did now can be done with just a few lines of code or something is that what you're telling me no i think it's more of a case of no not from not from that perspective okay okay okay i see it cuz that was pretty checked you know i'm still using i'm still using our app like it is actually useful yeah daniel was showing me as well danielle uses it i use it and when i don't use it it's extremely painful the entire process without it is extremely painful i need to update uh the the name list as well yeah yeah yeah the nameless or like make it in a way where we can add a name because i am constantly making my name frankie yeah yeah i was thinking that i'm like [ __ ] i'm not giving i'm not giving my sales to michael we also have to do um a tray right uh yeah because yeah yeah we have to update trey because for pwj i think it's uh giving us some funky information yeah okay um so now the data structure should be said so we've got everything in there yeah honestly and and a man i just love and dude i watched the firebase thing right as i was watching and i was like okay this video must be popping right now yeah it had 22 likes and i was like how the [ __ ] does nobody know about this stuff like and how the hell how the hell are they not reaching out to us i know i'm i was wondering i was like we literally are like your biggest users and then they were like um yeah we should we should reach out to them yeah i don't think like is it firebase summit guys let us know in the comments are you watching it right now the firebase summer have you guys seen that because they have some awesome stuff to drop in you know let's see what's going on under 287 subscribers damn um we're crushing them dude we're crushing firebase that's pretty sad right we should be sponsored by firebase that would be dope that'd be like the i would easily say like hell yeah i'll chat them up for hours yeah that would be that would be really really dope yeah man all right okay i'm going to just leave this here and i'm going to come back to it yeah probably never we're going to create two helper functions right one is going to get all of the dates as in from our all of these keys have to damage thumbnails no wonder they're not getting any views i know yeah and their titles they could use some help we'll help them out um so what we can do now is we can actually go ahead and do this so we can say const get let's call it get dates right yes and it's going to be an arrow function and what we're going to do is we're going to say data i mean this could actually be a oneliner i think oh you got some music to play bro there's some music yeah let's do it man let's do this look this one this one yeah all right so this one's pretty sick so if we do cons get dates and then turn it a little bit low because it's too loud hey nice oh sick paul oscar says it'll be awesome to introduce typescript in some series it's become quite industry style and it's [ __ ] awesome yeah dude i agree i love typescript as well and we've never touched on it on the channel and they say it's really good for anyone who's come from a strongly typed language so java csharp those kind of things yeah um you're fans of it um okay so get dates what we're gonna do is we're gonna say return data dot and you can actually do this now because data is an object right voice it's an array oh okay so what we need to do is we need to say data well technically dude hold on what are you trying to do just one second i want to be on the same page with you so okay you're when you say get dates what does what should it look like can you just show me the raw naked [ __ ] that it should look like yeah so our end result should be an array that we're returning like this and it should have date one day two day three day four okay cool like this right that's what we want and this is our current data structure right so we have an array of objects okay so so so you're saying that get dates should uh get should get all of these dates here so like for example it should catch this date and put it in there and then take that date and put it in the next one yep so what we can do is we can use a map for that so we can actually go ahead and say something like uh const dates equals data dot map and then for every single uh data point oh no we choose which we call these like like a tuple but what should we call it like um um call what i'm sorry so every time you map through it what what do we refer to as like a data point or something like a data set or um yeah i from the python world just call it a tuple like but it's actually a tuple this is an object or a pair yeah we can say data don't map we'll just call it a pair yeah so if every pair we want to get the um key so we're going to say pair dot key i think you can do that because we've got an object no no we're going to say object so map and get the object dot key i think we do it as i said no it's not that um hold on one second is it we're going to get this back which is um we all we want is the key of the object yeah so oh yeah we just want the key that's right what's uh but there's a there's a really nice way of doing this there's a really nice we're doing because we have an array here but there's so people people saying date stop set dates forget they no don't do it that way um yeah oh is it called hold on okay let's just do let's try so when you map through an array objects i think you can do object.keys right yes oh that's yeah i think that's it i'll put it on keys and then we can do uh and then that should give us a uh the key button that would be the first one just do object uh object.keys yeah because there's only one key in that object and we'll get the date and then that will map through every single one and bubble up into an array uh what is the zeroth [ __ ] what what is the need for this index because it it's going to give us an array back but i think it's only gone use that element wait hold on i don't understand yes it would only be that element but the return type for object.keys is an array we can try it we can try we can go ahead and console.log this so we can say console.log getdates oh object.keys yeah it gives you see what i'm saying it's gonna oh i see i i got it i got it i got it i got it okay cool cool cool got it you just want the because you don't want the i understand i understand because yeah even though even only going to be one you're going to have it as yeah so basically if it's something like 10 27 like october 27 uh 2020 instead what you actually want is just 10 27 2020 and i obviously it's a date time object i understand so you want that instead yeah cool got it exactly um oh paul said a good one he goes uh you can also use the whole data set as a dictionary where keys are dates and then just use object or keys oh [ __ ] let's try this i've never i haven't done that in a while so let's see that how to create a dictionary with key value pairs um do you want to just do a simple version that works first and then you do it or do you think it's worth simplifying it right now yeah we'll do it this way first we'll do it this way first you're right otherwise i'm getting carried away so you should they get dates let's call that and see what we get so we'll say debug two let's just call this one the dates what are you expecting to get right now expecting to just get this right now right like actual dates yeah we should get the dates in that form cool okay save refreshio react native my favorite there we go nice hey let's go bro one time bro hashtag one take one take that's it now i just i do want to explore that that the dictionary what's he done the short right hand oh okay so dictionaries this she's just going to be an object as such so no objective johan um okay you could do it that way but no i i know i yeah wait wait wait hold on what are you doing bro let's just go to the next step we got the race this one's good what we can do is we can actually really make this quite sweet you can actually go ahead and say if you only have one line of code don't worry but nobody isn't it will keep everything really slick like you just do this you just do all right that's it okay okay cool sick so now this gets us what we want right yeah and that will give you a direct return when it maps through and gets us that so now we know how to do it really nicely for the key all we need to do is the same thing for the um the values now so we can actually go ahead and say get uh so if the first one was a date we can say get amounts maybe yeah if you didn't have this indices by zero then what we would actually get back but this would actually this thing would end up returning an array of arrays yes because we're getting a raise yeah yeah cool this is where i saw like guys this is where data types and all that sort of like the way of thinking comes into play because like if you did like what cause you said then you didn't have the zero you'd be kind of like mine you couldn't easily get quite mind [ __ ] in the beginning because you'd be like oh my god what where am i doing an array inside of an array and it kind of like gets confusing so just understanding the fundamentals makes it all a lot easier so you can say object dot value object or entries no entries is both we can say object or values and that should give us the amount so now i'm going to do zebra log that's easy easy money object mean i think it's values i'm sure it's values yeah yeah yeah there we go that's that's pretty okay so now we the data structure um what we can do is mj can i i got a question for you i got a question for you if um a lot if all these dates were subtract by two days subtract by two days subtract by two if they were all the same yep no remember we need the intermediate step afterwards which would do the grouping right got it yep yep yep yep i understand though yeah that would be another step before i should do that okay this is really good man because this is actually even i was thinking i was like i'm not sure how we're gonna break it down the best way but this is awesome like yeah we're solving it piece by piece and then reversing it and doing other stuff so we've done this now what we're going to do is we're going to swap in our data set values with that new stuff right so instead of this we're going to use get amounts over here oh snap son it's about to work already i'm [ __ ] hyped i know right this one will be get what does this get done get dates get dates yeah that's what aaron's life is about right now let's go save and let's [ __ ] go bro and now we should have a nice looking my life is about get a mouse let's go all right see oh dope there we go nice man refresh your screen hold on hold on i don't see anything yet don't get excited so the xaxis is a little bit [ __ ] but we'll fix it holy [ __ ] i don't see [ __ ] my screen is just white so go ahead and try to damn son it works yeah 5500k in one day bro what are we talking here hold on fine that's five million five hundred thousand dollars in one day that is a good sunday the k the k pot needs the uh that's where we need to so this k where we have the y axis um on line 79 that is going to be an issue because you if you're you're going to have k attached to a use effect or whatever is our intermediate step it has to account for that otherwise we're displaying [ __ ] and otherwise we're displaying it in the wrong way that's it guys you got abdullah says this is nice we appreciate your time ninji thanks guys turn that music up bro that music is [ __ ] getting me lit it's good right it's lit bro um for some reason on my phone it hasn't updated yet the app but it's working on the web i can see it on the web yeah dope okay so we've done that that's fantastic now so now hold on before we continue um now what we need to do is when you say intermediary step when you say okay so i i want to get it to like crystal clarity before we move forward because otherwise then like i'm just going off of what you're saying i also want to just understand so when we're doing the group buy right yeah is that happening that are we gonna have that happen afterwards like after these functions are done calling or is the grouping actually happened uh gonna happen like right as these are coming in like is that an intermediary step so there's a really nice way to handle this gracefully right um and the way we do it is and you said can you show me like a literal example of like in a comment what it will look like once the group buy is done what will that actually do yeah so imagine we had like a day here which was the same day this day was the same day we had another day which was literally the same day here what it's going to do is it will turn this data set into the following right so we'll have this data set well it won't look like this it will look like something like this it will have so imagine this is the data here so we have this it will have rather than having it like this we have the date repeated three times it would accumulate this so you would now have whether this is three thousand so you'd have five fifty nine fifty so you'd have nine five and then you would basically go ahead and have this so now this this date would accumulate up to it will bubble up to this amount okay um feeler says this channel has become a netflix without me noticing i spend my time watching videos there awesome i love that all right so that's going to be awesome for that and then this one where we've got the same day it's gonna find these keys and it's gonna say okay like we have the same key here so let's just add up on this value so it's gonna be 11k right so this one's actually gonna be 11 000 and then it will bubble up and now we have this so you see like what happened there basically bubbled down from this to this right uh okay okay okay i understand cool that's really good to just see it tangibly my brain has to do no um translating in like no processing power is now being used by my brain i can just see it yeah and to be honest it really is um it's really uh nice to actually have that now as a comment so that when we were building it it's very visible like okay because as much as it may seem that you'll remember that when you kind of get into a brains like when you're thinking about stuff and all that you can very quickly kind of go like oh and then things get overlapped and before you know it you just can't even make sense of anything yes i hate that i i actually love doing the the work up front of because like i never trust me i never want to actually write this out because i'm like oh it's just faster if i just spend this time [ __ ] coding but once this is done which is also why i like doing test driven development too because once this is done it's so much easier to code and explain and honestly another reason why i like it is for the people that are watching it's so much easier when it's done this way because otherwise the thinking is happening only either in your head or my head exactly and guys it really does make a difference because like as much as like like as he said like when you go and hack away at the code trust me like even in the beginning of this i was kind of confused just like oh how are we actually going to break down the problem and but then like after we literally broke it down to these two lines now everything kind of makes sense and like even doing this comment it starts to make a lot more sense as the next step yeah so if you ever feel like oh i don't know what's next do i have no idea what i'm doing next it's completely a fine place to be just like break it down and trust me the next step will naturally appear is you just do that right i love what fella said he's like this channel's become my netflix without even me noticing i spend all the time watching your video they're awesome and then another comment i really love is abdullah nick holy amar says the realtime thinking thoughts really add quality compared to an actual preplanned tutorial yeah i actually raised that's actually really true right sunny because as we're going through it and working through this problem i think it's actually a lot better than you having it preplanned and solutioned out because now people can see the thinking process behind it and in an interview this is actually the type of thinking you have to do live exactly and yeah 100 i couldn't agree more like uh that is probably the most value like if i was learning out and in the beginning of my journey all i'd want to see is other people who are experienced show that they're human and actually see that oh okay i'm not crazy i'm not dumb like they also get stuck how do they get over problems watching them get over problems i think it's really really nice way of doing it and seeing that right um devon gray says even though my coding i didn't get used it was good to use my thinking ability too i finally found some time for the es6 data structures i had never really found uses for in the wild yeah honestly devon gray like uh honestly dude like you're right again and and the suggestions that you gave that everyone who gave a suggestion it doesn't mean your suggestion is bad like it could be literally a much better solution than what we've implemented or it could be more efficient it could be more everything it's just the way of thinking now that we have the the flow that kind of goes in place you can optimize and you can be like okay now we're using a data a map here you can now replace that that part with your sort of solution and you'd still have the same flow just be more efficient right so you could go ahead and do things like that um but let's go ahead and tackle this problem kazi so the group by sounds easy but we're gonna have to find like a really nice sort of solution which which does that okay um and an efficient way and i've done similar things before but we're gonna have to account for a few weird things right we're gonna have to account for uh the timestamps are technically gonna be different because because so what we should do so no not understand so what we should do is not have the time because that's irrelevant we should have just so it's up to the days so we should group it by days because right now it's going to be trying to group it by like the actual unix value which is never ever going to be the same yes exactly exactly that so it's going to be grouping it by the unix value and that's never going to be the same so we need to erase the time we just want to keep the date and we don't even care about the time zone and all that stuff because right now it says time though we just want the date itself so uh we can go ahead and do that so is that will that be done with format ll no format won't actually change the but it actually changed the type you can change it to uh form you can do format format is as a form if we just wanted to if you do focus on the format yeah the date so let's go ahead and just test that now so we say moment moment.format ll hey let's go i said the music actually helps you like kind of focus a bit you know like dude i'm loving the music and then we say music oh i'm moving the form let me do this this this this puppet there for a sec and then what we'll do is inspect it and have a look and see if we're getting the expected result so i'm refreshing it and now we can see that it didn't uh oh no so hold on hold on oh no yep it did boom looks freaking beautiful bro nice there we go okay so now now it doesn't matter what the time is but that you're gonna get the same dates okay so that's gonna help us out um so that's going to be cool what we might want to do cause is actually format it quite early so that we can show on the graph on the graph so right now if you see the graph it says october 29th october 28th but it's quite big on the graph i don't want it to say october we just want that short view you know like the short dates there's a very hideous group buy that works but i want to it's like using reduce and i kind of want to just avoid it because i don't know i was going to say that the ideal one would end up using a reduce like yeah yeah i mean it looks very mathy but yeah we can do it we can do it this looks like it should work but let's just drop me the hideous into that in the code so if you just copy and paste it in the code i can just grab it from the card i dropped it in slack but i'll drop it in the code as well hey there we go hey you turned that up a little bit bro i'm liking that one my bad i'm like [ __ ] turn it down all right so this one is saying group by okay so yeah so i've used a similar one to this before and it's really i mean to be honest i i i got my head around it ages ago and i was kind of like okay i lost this i i don't really care to get my head around it i just want to what it's good yeah yeah what i would do when i'm coding this is i would just copy paste this and then i would just try to match where stay consistent with where it says result that item because i just imagine once let's do it let's do a it's called group by you should try this one by the way because like this one looks more legible to me like i just sent it to you in slack but that one looks more legible you mean the one with the the spread and things like that no the one that i just sent right now in slack to you yeah so it's got like a spread operator and stuff like that i don't see um oh i see the spread operator okay yeah just like a spread result and things like that it's got result item the other one had a reduce with one level this one had a reduce with it's like taking an array and then indexing it by a thing and then indexing that i don't know i think the first one i mean because the first one we can rewrite it with arrow functions would be and it'll look really clean okay it won't be so confusing all right go with it just looks hideous oh you can say it takes xs and a key group by which is excess and the key length the length is one two three so right what are you doing are you writing somewhere oh yeah you're writing i'm looking at that code example that we have we found so it says i don't get why what the key they're taking is checking the the length all right give me a and they're using like it seems like there's a higher order function being used or something i i don't know bro it's it's [ __ ] giving me anxiety looking at it i mean it apparently it's pretty um the other one is i am stokies the other one looks like something i would write the first one looks like i would write if i got eight years of like math phds and then [ __ ] was writing my thesis oh somebody said elegant but painfully slow on library it doesn't matter because the other one was an efficient i would rather have it be legible so the other people i work with can understand yeah i mean they're both kind of confusing though like i racked my brains and still failed to understand and how in the world does this work starting from now i can't sleep because of that right i don't care all right bro just pick one i would i personally i would go with this but if you want to go the other one go with the other one uh but i'll be right back shortly okay let's let's try this one so are you following me up i should be following you just give me one second i'm gonna come back okay so guys you might not be able to see a little bit of what's happening but i'll talk it through so you guys keep in in the loop of what i'm doing so right now we've got uh see han kyo says that is real pair programming yeah 100 percent um and demingo says your manager would never approve for the easier one trust me when i say the truth is that when it comes to efficiency um the senior devs are going to be quite good sometimes with understanding how it works so they'll really dive in but some like sometimes truth is like it really depends like you might it doesn't really get it doesn't really really get like that like they don't really check or they're not going to really dive in as i like that but this is just dive into it so we got i'm going to refactor this right so i'm going to copy the snippet they had so it's variable group by okay so this is nasty i'm going to change this up so firstly never use var anymore it's old um we don't want that so const group by we don't need this function keyword we're gonna make it an arrow yes six style and then here we don't need this we can make that an arrow so boom then we've got the return now the return here we can actually get rid of because it's it's implicit so what we can say is we can get rid of the return get rid of these curly braces and get rid of this one and now we've got a simpler line of code here so i'm going to quickly format this so i'm going to say format document does it work no my format is not working okay anyway so we're going to say xs dot reduce it's going to return this and then this one will return v at the end of it so v is rv sorry so rv is this one this has to be this because it's two lines of code so now um we're gonna say xs.org what is xs why is it calling it access um xs data no group by xs okay so this i mean i don't like that i think let's just call it the array so you pass in an array and the key that you're trying to group by in this case so this is what they had on the on their site okay so i'm just going to copy and paste it down here so you can see it this is an example of what they had so boom so you can see like this is an example of the code snippet that they had underneath when they were calling it so you guys can see oh [ __ ] okay all right so you guys can see now oh my god damn it what am i doing close this up yeah and i've opened some annoying stuff okay so now you can see if i go ahead and comment this forward like that now you see oh i appreciate that joseph says seriously you guys deserve youtube what i appreciate that man um we're just having fun with this stuff so console.log group by okay so what i'm going to do is i'm just going to try it let's go ahead and see what outputs right because that's the best way you can do this stuff honestly like okay here what they're doing is they're passing an array as the first argument so that gets passed in here and then they're saying past in the length right and then what's happening is it's getting i mean i guess it's grouping based on this they don't actually show what the original thing is oh they do show what the original thing is then let me see if i can get that for you guys so length is now one that they gave was phase one step two okay they don't even use that example but let's go ahead and say this r1 we don't have length so if we don't have length then it would be go ahead and pause also three one two event is the key they want to group yeah i know so that's why i understand the length is the key they want to group it by an example but in our example our keys dynamic so you see now we're in a bit of a pickle because our key is going to be dynamic based on what you're looping through inside the array so now we have an issue because we don't ah damn it because now our key is not going to be okay so fuzzy this isn't the correct this isn't the correct grouping function we need oh [ __ ] reason being is because this will take an array and then imagine the key was like uh the key was length um because our key is dynamic you see this the key is dynamic but they're one it would be length and then they're grouping but no wait no that's not correct is it does it mean or is it correct because in their example they don't do it like that [ __ ] okay users by color that's pretty much what we need we just need the equivalent of that array so let's actually see this we can use okay to iterate over every item got it if it doesn't reach my group by unique keys holy [ __ ] this looks awfully readable bro oh yeah this actually i've i i sent some good hope on this one hey what's good like you guys deserve a youtuber this had deja vu of this exact moment wow really literally i had the screens open everything you wearing the same top as well holy crap um make sure you have a deja vu about a eight figure day so we can quickly [ __ ] take that exactly pretend acc color grouping okay so we're okay so greases by color value grouping dude this looks really really promising i swear because we're group they're grouping by color we're just grouping by day so wherever it says color it's just date first composing color right so users by color uhhuh and we're doing it by date which is not what i mean it's like sounds like it's the [ __ ] this works bro i'm telling you but the key is color our key is see the way we've got a weird situation because our key is unique every time oh bro we should see this no no we did it in a dumb way honestly we should have a key we should have two keys i just think we did it in a funny way i think we should change our data structure yeah so so here we should maybe have it as date why the [ __ ] did i not think about that that sounds very like obvious now that i look at it i'm like that looks like a horrible data structure yeah so it should be like this it should be something like date and then it should have uh date as uh and then we should say and no need for that uh bracket at the here right like i need for that yeah uhhuh and this one would be this looks way cleaner bro i just feel like i took a shower after like weeks i know damn bro look at you being [ __ ] efficient i'm just that was dope man [Laughter] dude this peer programming is [ __ ] oh man that was sick that's clean oh thick all right so now we've got um so now we need to firstly modify our get dates and get them out so let's quickly fix that before because that's gonna be so much easier now the code is going to be so much readable instead of this object that keys obfuscated garbage now we just say data and we say pair dot date oh my god that's so much better holy [ __ ] see guys this is a pure example of where like you come come up with breakthroughs and now the next time this comes up we probably will realize that's clean that's clean nice so now we can check our code and that should be clean as squeaky clean as well dude i'm enjoying myself on this live stream bro dude that was that was genius play man that's [ __ ] clean now yeah all right it works it does yep oh [ __ ] in one try yeah one try and the data structure's good now it's a good data structure yeah we had some crazy [ __ ] why did we do that [ __ ] and i'm in keys okay so now our group buy will work oh this looks so clean now we can do group by guys that's an example as well if you see some code on stack overflow like or something that works it can but it doesn't go by your data structure you can't fit in it's a quick sometimes it's a clear indicator of like maybe your code is wrong right um one second okay so now we've got the group by and here what we're gonna do is we're gonna go ahead and say how is sienna who's sienna oh that's my niece the one that was one [ __ ] that is so cute that's a beautiful name that's a beautiful name yeah she's sienna and then we've got my other sister's uh giving briefs i've given birth soon as well so yeah thank you shiva as well appreciate the comments on that damn you got a baby congrats on you gotta be spreading misinformation some people were messaging on instagram i was like it's not my baby i mean i'm cool walks in i'm like wait what um okay so do you want to use this piece of code bro because this piece of code looks very very simple unless there's some reason to not use this color code because i've actually used something similar to this before the the ugly group buy one it is a good one because it's got a reduce in it like uh it's just it looks ugly um oh david johnson in the house i appreciate that dude and i got your message by the way i'm gonna i'll get back to you um a second man look forward to that and there's a group by so now what i'm gonna do is i'm gonna go ahead and do console.log and i'm gonna say the grouped values are and then here i'll say hey for the dog nice your group bye and then i'm going to go ahead and say i'm going to pass in the data what do you mean my break was quite rewarding what does that mean aussie's break was quite rewarding i i don't know yeah sick all right what are you working on so now i'm just going to logging it so now look how clean this is dude group by data and based on the date key oh is it working i mean i'm hoping so okay um okay so now i'm gonna go ahead and we're gonna check it so you should see the group values are something let's go ahead and check it so oh okay okay that's what i'm talking about that's all right that's clean holy [ __ ] that's cool oh [ __ ] son that's dope man all the october 27th one or oh that's satisfying very very satisfying right now what we need to do is we need to modify it a little bit so that it it changes oh david says you stepped out for a bit and came back with some clear head to fix the bug yeah there we go yeah i've been doing a lot of that lately i just walk away from things and then i come back and i'm like all right let's go sometimes you just need like a little a little bit of time timeline oh man firebase just uploaded another video okay so okay so now we're gonna go ahead and do uh just cuz just discovered you guys hello from spring spain what's up craig yo yo yo so now we've got the three dates uh oh sorry we got the array with the date and the amount the amounts in so now what we need to do is we actually need to like um we need to transform group by what is returned by from group by into um into so so it has the same keys can you do you want to write like a comment like a literal yeah what it would look like like a literal example exactly so let's go ahead and do that so i'm going to go ahead and just copy this out and i will show you guys hopefully what we can i can see right now so i don't know if this will look decent on the screen but you guys can see now this is my this was what was console logged on on chrome so now we pretty much have like an array and just [ __ ] that bit we don't need that okay so now imagine this is our array right so we've got an array and it's got the keys are october 27th october 28th and october 29th and then each one has a value so this one has two inside of it so it had this and add some stuff inside and the second one i expanded so we can see that just as an example so you've got the array of three so what we want is we need to transform this into something like this so that way like imagine this array of three right i don't want this i just won because the dates are the same we know that right so we just want two add three at four is nine right hold on hold on what what so now what we want is because the key basically we got the grouping functionality correct it grouped all the ones with 28th of october right oh you want that amount summed up yeah we just want to sum so we won't let you want to replace this okay okay so yeah that's what i was going to say you just want the value to actually not be an array you want the value to just be the sum of amount just one number yeah exactly yeah so somebody goes check if oh somebody actually gave a making that even more obfuscated than it is but okay yeah they say push in and then we're gonna say an rv plus equal value amount so plus equal value amount i think we should do it as a separate function i think we should do it as a separate function dude like that that piece of code is already a bottleneck i don't wanna yeah so so because what you can do then is it's very clear then that you've got functional pieces of code you one you'll know where things break if you change them and two you can always refactor and get the code so damn clean at the end of it but the your first primary focus should be to get that they're standing in polarity right yeah exactly so um oh nice austin brian kabanda says uh it type of program is the best thing that happened to youtube here from the philippines let's go let's go love that right so the group values are okay so now we've got that down so now what we want to do is get this functional bit done so it'd be 9 500 and then these will also be numbers as well so whatever this is like 2 000 this one would be like something like 4 000. so that's the goal right we're going to get from this to this all right so what we're going to do is we're going to pass this as an argument and we want the function to return this okay that's what we're going to kind of treat it as um and then i think dude this is awesome man we're actually going through some serious problem solving right now yep like it's sick yeah so this i think this is really useful for everyone so group by this is a great problem to go through because there's so much data structure crap happening here it's insane exactly exactly and then once we get it down it'll you'll see guys how you go through this messy process and then the end result is so damn clean and then you'll debunk that myth of oh that's it's not written the first time like that right like so it will be help you out so now we're gonna say it's const and we're gonna call this one uh transform or data or transform data as in um let's just say transform day and it takes an array so it will take the group as we're going to call it it takes the group data so we'll take the group data and we're going to assume the group data is in this structure and then we're going to say the grouped data is and by the way guys this is an object right object dot entries and this will give you a array of key and value pairs so object entries let's just double check object or entries i think it gives you a key value pairs back object entries yeah it gives you key value players i'm showing it on my screen oh sick yeah so it gives you key value pairs back so what we should have is object.entries.map and then what we want to do is map through every single entry and all four each sorry you mean you could do it for each oh you could do four each so hold on what are you doing you're you're getting um so now what i want to do is i want to loop through each of these what will this give you can like this will give you what so this should give you october 27 2020 and then it give you um uh as as that as the key and then the value would be the array of this array here so like this one here okay so let me actually i'm just going to copy paste that yeah and and this is well so here's the thing is this uh considered a string what is this considered when it gives you the key dude maybe we should log it here and do object entries over this yeah yeah because we don't know what that object type is yeah is it because we don't know yeah exactly then group values i don't think it's saved yet oh no it hasn't saved on your side okay so okay so it gives how do i turn off all these errors again these yellow and red errors there's some kind of thing you can do right you can click on custom get rid of errors where's custom uh okay so you make it a bit bigger i'll click that little x you see a little x with 106. uhhuh i clicked it um um oh that little drop down arrow so go back that's a little carrot you see the little carrot down with carrot yep and then no that's no um make it a bit wider your screen so maybe just go full screen for a sec um and then you should see default levels there like default levels get rid of error and warnings um so now what we're going to do is i realized that i looked at the live stream and i was like this dude for a second i was like i was like downhill sharika you know when he he's on the court oh i realized my camera was way different oh you mean the seer yeah yeah oh yeah yeah yeah it's all the young students they have they have a tendency to go really low on camera yeah they're just like sleeping so now the new data structure is going to be an array okay so it's an array it gives you back where the first element of that array is the key the second element of that array is the uh is the array of data structure okay so so cause if you click into the group values r and that will make sense to everyone yeah so you should see that one and you see the first element of that array so in the position zero is the key yep and then position value one is that one yeah so what we can do now is we could that's cool that's actually pretty usable um you can just go into the value and then sum up all the you can go into this right and then sum up all the amounts yeah but i'm just thinking do we create a new array and then like go through and push the key with the consolidated value as a key value parent to a new array and then we kind of go through it all like that or do we transform the existing one you know what i mean i think i think honestly you should write a function that like yeah transform the existing um because it goes against the immutability scope okay that's fine so just make a make a new one or whatever like it's not gonna be that big of a deal the main thing is we just need array one to just sum up to one number so we just need a function that can go into an array of objects and sum up the values okay so it's a transformed array equals this right obviously you did get it right dude but you got the the positioning one last time so but it's an array of arrays yeah so um okay so then it'll be the same [ __ ] yeah okay so now what we're gonna do is we're gonna say grouped data so grouped data got four each we'll go through every single one and then we're gonna see say for every single um what did we do last time we said for every single you just say for every single row or no for every single date what did we call it we didn't say tuple did we we said entry no i mean what what did we say last time i think i can't remember um pair for the what are you what are you talking about bro uh oh so demon grades oh you can create a third value called total in the array that could equal a reduced array value so we could do that yeah that's pretty cool too oh yeah yeah right yeah that's what i was saying dude yes i didn't there's a group there for each pair yeah sorry that's good yeah we want to basically go ahead and say um let's sum up the peridot amount yeah so we're going to say pair one which is which refers to the array of the data points or the array of amounts oh i see yeah and then we say map so how do we bubble up though hold on what are you so so if you expand the segment yes look at uh so but oh [ __ ] but you can't index but it's a key so you have to index it with the word amount yeah so go into one with two values so not not one with uh so go into a different one which has more than one value so that one yeah so so what we're doing is we're saying pair one gets us this what gets us what you said gets us this so it gets us the array of three so pair one would return an array of three at this point oh so you're okay so you're now calling something else pair you're like deciding to call this a pair yeah why don't you just why don't you call that entry because that's confusing from our earlier verbiage of like pair date and paramount to just call it an entry that makes it very clear what it is okay so there's a group there for each entry so entry one which is entry one is yeah the thing that holds all the amounts yeah so it would be no but if we thought it was the amount so if you click it it's actually an object yeah i understand that it's an object that has um it's a ray of keys right array of objects yes there's an array of objects that holds all the rounds of date and amount so now we need to go and say error dot map right we can say const total equals entry.map and we can say for every single uh now we need another word so we can save every single entry one amount or okay every single tube will get the two points so now you can say pair if you want because it's now it's back to date and amount so that is how we called a pair oh yeah yeah true true okay now it makes sense yeah so now we can say pair okay so it comes entry pair amount okay so now we say paramount and that should get us the total and then what we want to do is we want to say our transformed array should have transformed oops transformed array we're going to say dot push and we're going to push entry 0 for the key and we're going to actually push this in as a um if we push in as an object or yes as an object right so we'll say date as entry zero and then the amount would be the total like that and this should are you not are you not just appending it to this existing array as a third value no no so where i'm actually solving something as a v1 create an empty array and then we're pushing the values in as we figure them out okay cool let's check it out now now guys i know that there could be like efficiency things and stuff but we'll touch that after so um and then what we're going to do is we're going to say transform data we're going to call that as another console log so we're going to say down here we're going to say console.log the total grouped values group values and i'm going to say alien this is just random sure i'm gonna say transform data and i'm gonna pass in the group by data so grouped by this okay we're going to save it oh [ __ ] dude we done object got entries we were assuming that was object.entries which means that now we need to do object.entries to our group data like this here because that's not a function okay so now it should be correct it should be what total group values let's see it's looking clean so far amount two thousand amount twenty five hundred three thirty five hundred forty five hundred okay so it's kind of but it's not it's not perfect so right now it's just pushing it's mapping and it's pushing them in but we want them to actually add up so oh so now we need to reduce rather than a map right yeah so this is what we need to reduce as opposed to a map yeah reduce will sum it up right so here we need to reduce yeah so let me just double check the syntax for reduce because i always forget this [ __ ] reduce js um this is cool man yeah so now now okay now we've got that so now for the reduce we just go ahead and say hold on let me try this too because i want to pick up so reduce gives you a total and every item right so in this case if we did a reduce you get a total like an accumulator and and you get the pair total yeah yeah exactly that's what i was thinking and then you're gonna do uh uh then you say total plus or equal to the paramount so it will basically accumulate the value are you sure about that because i'm looking at something slightly different than that so you're looking at uh reduce a b and then they're doing oh they're doing some they're doing some weird [ __ ] one's like that's that's some nested object thing they're doing x must be that's different man that's like a an object way of doing it because there's something reducing an array of objects okay cool is this you have some kind of total and then what you do is you initialize the total as the second argument so you say the total starts at zero and then the pair is the individual that's a very that's a very cleanly written thing because yeah this is our accumulator this is what we're summing up uh increment the accumulator by the thing that we're summing up uh yeah wait hold on somebody said you don't need the equal devin gray so go use it okay then do it i mean we can try it without the equal but i would i always okay let's just try it if if it works then it works if it doesn't just put the equal uh you need to save it on your side i did just did hey hey let's go oh dude that's sick okay so that's pretty cool and now wait hold on the accumulator is zero by default so you also don't probably need that yeah somebody said that yesterday so i didn't actually i actually had no idea that i always used to play reason why i always put in is because it's kind of a good muscle memory so that way even when you're doing a raisin stuff ah [ __ ] it it did something weird dude it just turned it all i don't know what yeah so you see like because now it it thought it doesn't know remember javascript's weakly typed so it's going to try and guess the date about types she gets that wrong whereas if you put a zero it knows that it's a number and it knows that plus two that number is it is gonna be a number so christie says it's not zero by default it uses the first item as the accumulator if you don't pass one in oh okay justin uh for all of you interested in all the stuff probably read the book the weird parts of javascript yeah okay so that's sick so that's really good now that's really simple i mean we're pretty much done dude now we just got to plot it now we do an even cooler thing right now what we do is we can plot this but then what we do is we connect it to our form and we apply the transform on and as in we apply the transform as inside of a use effect and that way it would always transform the data every time something's added yep right that's jack so let's get rid of this comment now because we're good um the console logs we can keep for a bit and now what we can double check is everything seems to be working still uh as it is um but now what we should see is we want to apply the um okay so now we want to do uh so currently get dates and get amounts currently just runs off of data right but instead what we can do is we can actually make it take a data object instead or we can yeah let's make it let's make it actually a smarter function so it takes a data and then and then what we can do is we can pass in whatever our data is um or in this case we should call it data set because our our variable is called there um and then what we can say is rather than this we can go ahead and do okay dude to make it simple yeah i'll show you a trick now so um trying to think what's the nicest way of doing this because you see you don't want this ugly code everywhere you don't want this transform data complexity somewhere you want to kind of wrap it in a user effect so what we can do is the data gets pulled from here right there so what we can now say is this create a use effect whereby the dependency is data so every time data changes this code runs yeah and then we can say is every time data some information comes into data we want to go ahead and do we can actually have another piece of state called transform data which you get set to so we could have the raw data and then we can have the transform data we'll see yeah my brain hurts let's just try this way so let's say every time data changes what we want to do is set the data to the transformed data so but that's going to cause an infinite loop okay yeah so what would because then the date will change which will cause it to retrigger which will cause the change so instead now what we're going to do is we're going to say const transform data and then we're going to say set transform there hold on here we'll say one second so we're using we're making transform data a piece of state yeah so so you enter a value every time every time i push a value like every time i add a gig transform data will do its thing uh yeah and then it will it will get transformed here by this so we'll say set transform data got it it needs to happen every single time okay that makes a ton of sense yeah uh set transform day at this um that's clean that's really clean yeah and now what we can say is those helper functions i'm stepping on a protein shake right now that reminds me do i need to have mine uh transformed jacked i'm almost at my water goals my protein goals are almost met today yeah go go grab water what's up if you don't have water go grab water oh i got water i've got water okay so now what we're gonna do is we're gonna go to and we're gonna say oh logan says well you guys are streaming late let's go nice so set transform there now our helper function should pull from that new one and that means that the helper function is the one that's connected to the actual thing so if we save it now everything should be good and it should mean that what we see on our on a graph should be the correct value that's what i'm talking about dude dude this is awesome is uh well let me finish eating first let me go ahead and spam a day and we should see that value spike that's what i was gonna say it should actually change it i'm psyched as [ __ ] i'm gonna add like a bunch of days to this thing so we should see the middle date go crazy nice that is sick man wait it worked yeah um oh because you kept adding it to the same yeah so it accumulates they said on that day you made thirty one thousand thirty one and a half thousand i mean we need to get rid of k because k right now bro look i just added multiple different days and look it added a point for all of them oh you added different days oh nice yeah hell yeah bro that looks great yeah and dude and every time now you have any sort of um anytime you have the the the um wait is it sorting by day right now oh okay so it's not showing my day that's a good shout out yeah so solo says sort by date that's a very good suggestion actually um okay that's a very good oh yeah because it's october 23rd and october 27th is all the way in the end and 29th is the first one yeah dude this is pretty damn cool man because now we've got a really slick piece of code and guys think of it this way now because we've got this transform data and normal data this is really cool and this is also something people have to do quite often when it comes to charting and a lot of the data types look extremely similar to this and a lot of people are trying to make apps with a chart yep exactly and you will run into this and i have ran into this before and my code wasn't this elegant so now this is actually pretty nice this solution but um but before it was kind of messy but you have to do some like you know interesting data type stuff and also this is one of the best exercises you could possibly do for learning data types because you're going to run into scenarios where you've got an array inside of another array and you've got some other crazy stuff happening and and this is a really good way of mastering that you got to get dirty before you get clean exactly like the end result you'll be like wow that code is clean but the the the code to get there would have been a bit messy you know um okay so settle and use effects are clean dude it's so clean all right now how do i okay so before we connect it to a form we just need to sort the dates yeah so we need to sort the dates and then we need to connect the form and then hook into firebase is easy so quick question hold on one second the thing that's being plotted where's our data being stored so right now we have hot data so we will map our input stuff to the hot data so okay i got a question so if it's an array of um objects we can just sort this array by um by by date right like each each of the items in this array we can sort it with this so remember for efficiency you don't want to sort this entire data instead if we if we sort the transform dataset there's much less to go through uhhuh because they would l they would be grouped so you'd only have that date come up once i agree okay that makes sense makes sense so here when we do the set transform data we're going to need an intermediate step which sorts before that or we can kind of do it inside of transform data so that's a good chat here maybe um so we actually group the data here and then we need to do some kind of uh group by moment already on it bro let's go sorted array uh dot sort oh they have a saw um sort by date moment for sorter we can use low dash interesting so this looks like a pretty clean um solution you're taking an array um okay yo this is what do you think about this what i'm highlighting is this going to be useful or no using low dash so i think we can do it without low dash okay but one case we can do it with low dash um because now javascript has a sort moment yeah if takes the usual moment input uh okay let's let's try i've got i've got an approach here which is pretty sick and this i've sent you a slack this also would work i imagine the uh unix thing yeah yeah so i'm on the same the same article as you so figured so so but you see that the one underneath there uses moment so rather than because we don't want the unix we want to actually use um uh we're just using um the what's it called but ours is a bit different dude because we need we've got a key involved so the one underneath it the diff i think maybe that one's better because remember if we use unix it's going to take milliseconds into account but i mean we lost the milliseconds earlier anyway so i guess okay so then the diff would work the diff should work yeah so here we should be able to say uh consorted array let's just say sort of equals array. and then our data structure is okay our data structure is like date and amount okay so when we say array dot so our array is transformed array so we say transformed array dot sort a and b and then uh if you guys don't know what a sort a and b or something like or comparison is i'll definitely check them out but what it does is it takes like the first value and the second value in the array and then you can do some kind of comparison and then it will do and then it would the winner would get the first place second will get a second then you'll go to the second and third and it will basically go through the entire range and sort the array out like it's very clever does it yeah in this case we've got a we're gonna say a dot eight so instead we're gonna do a date maybe like this [ __ ] is that oh i see because we've got we've actually got um that makes sense and then we we could return the sorted array instead of the transformer dude i love how this is such a mind [ __ ] if you're a beginner you would be doing like a dot date dot diff and to know that if you did dot date dot diff it would try to evaluate the date.diff first before it like doing this is like hilarious it would man it really would oh okay remember we changed it to a string when we done transform right i was thinking that well we did format sorry when we did the format so now we need to change it back to moment.js to do the diff right so dot moment here or something dot moment like that dot diff then i think so can you do how do you undo it no i think you would do moment like moments i'm taking the date which is a string calling moment on it or is it the other way is it does you call the moment function i think people i think you call moment like that maybe uh you're you're right you're you're right you're right you're right maybe and then this one we can try it for this moment dude my copy pasting skills are [ __ ] helping me out from high school when i used to plagiarize my way through finishing papers i show you man okay wait one sec maybe for the record i never actually played your eyes just saying dude it [ __ ] worked it worked let's go i love that like we're doing such a complicated thing and there's such little thinking involved it's kind of ridiculous i know man sick wow that is phenomenal yeah and what we need to do for this to be written out in a pretty way is um what are you thinking using the moment library to to languageify the dates what is it called englishify so in transform data now we can actually do it very nicely yeah it's super easy now dude this is sick though this is so sick it is sick it is clean man so now entry zero is actually the key that we're trying to fix now so we can basically go ahead and do moment.format on this and we can change that to wherever we want regardless of what it comes in as so the end result could be moment.format and then here the format just find a nice format dude so uh a format that we like so i guess like you would want something very light like like yeah you know just just literally the numbers like is in like three four twenty something what you would want is it to say october somewhere and then just 22 23 24 like that like maybe oh that that's gonna be maybe yeah no no no but we there's probably something in the graphs in the graph options where you could just yeah for that we could do like a xaxis label or like a yeah i know you mean like a uh like a xaxis label i'm sure there's a way to just do xaxis label you just write october there and then for the days it should just be the dates yeah so where's our get dates oh wait hold on wait no but right now we're trying to do this let's get the format done first and then we'll move on to that a bit okay go ahead so moment format a simple date we literally just won the simple uh what is the simple one this date formats so oh yeah l is l is what we're looking for i think yeah just l so moment of format l that should do it really i'll give you just a number i'll give you a number there you go it's an american sort of positioning because you've got the the month first then you oh no but i just want 22. i don't even want you know what i mean i don't want the whole thing i just want 22 and then 23 and 24 not 10 20 to 20 20. oh you can do that you can do it so you could say as in like you want 22 and then so if you only want the day i think it's just d i think yeah try it i think it's it's where are you doing it and get dates or get transformed okay got it i think it's dd double d's i like it let's do it i think that that's actually pretty cool too oh [ __ ] thursday wednesday oh [ __ ] yeah but still now that's gonna get insanely big that's the problem i kind of like it like this but i i'm just saying just a number like 22 23 24 25. somebody said dd ods you guys know what i'm talking about dunkin donuts let's go oh [ __ ] okay but now it's now it's messed up because i thought it already broke oh my goodness um now the sorted array i mean you could sort afterwards very easily now you could just do if a date if a i mean okay the the question is is that are we gonna eventually have this only by month by month i guess you would right otherwise it would just get insanely big yeah yeah yeah yeah just just month by month we'll be able to add a drop down menu at the top or something where you can some kind of swipeable you know like swipe through the months or something yeah swipe through the month something like that exactly and like we would just have it so it will say october right here on the xaxis yeah so now we don't need moment passing here because it's going to be just a number comparison is this number bigger than that number i said and that should do that for us so now we should have the sorted graph i hope no okay no no because we're doing diff sorry we don't need that now we can say a def minus b def and that should work i hope i think i should do it should check which one's bigger let's go ahead and check yeah it works nice sick okay um no hold on let me actually see how like butler does it i think that would be cool dude if you had like a month view so how putler does it is like they don't even have it daily it's like every few days so they just have like october 1st and then october 10th and october 19th and october 28th on the xaxis but i don't care about that we don't need that yeah because ours would only be the the problem that we have right now is that ours would be like spread like they would be spread out so you could have something on that 28th of october your next job might be two weeks that you make some income or a week later and you've crossed over the month um what if we had a bar chart that had a line going through it is there a bar chart with the line going through it let's keep because now the data structure is set for the line no i mean like i mean is there one that like literally just puts a bar here and everything else is the same because i'm looking at butler and they have this exact line one that we got but like it just also has a bar right here so then you can actually see oh this is the day that the income was um we can i mean i think so maybe like it's very clear though like because it's literally like an increase you know it and i i guess i really like my bars like okay let me just show you in slack so you can take a look at what i'm talking about all right okay okay so all right this is all i'm talking about i actually decided to just put it up here oh i see okay so that's like really cool but that's like uh that's a trend that's not um that's you see the actual the number is actually the data is the the bar and the trend is the line okay so we would have to pretty much change a lot of things right for it yeah we'd have to do a bar and then have some see if it's got trend line functionality or something all right no it's fine um but the yaxis no the xaxis stuff would be interesting now to see um also we need to get rid of this k do we want it in k or do we not in this case i say no because i like k because what if like you've only made like some people in most cases you only made like 200 the time or it could be three grand okay remove it that's fine unless your the income that you're making is always 10 grand 15 grand 14 grand yeah no that's fine you can just remove it i think here we see is it no maybe you just remove the yaxis surface yeah just add a xaxis label where the [ __ ] is it though because it says yaxis has a label but i don't see the label or the label uh yx is the label oh it's a dollar yeah yeah but but then that's wait hold on that's everywhere though oh you you mean like um a legend hold on hold on one second yes i did mean a legend give me one second hold on i'm gonna unfollow you let's go here and i'm gonna try i'm gonna try something and let's see if that looks too ugly or not so i'm just gonna add a xaxis label and um i'm gonna make that that one's in the chat what's up i'm just gonna make it oct let's see what that looks like all right next uh in front of every number what the [ __ ] yeah you've done that to the so how why is a dollar putting it in front instead of ahead of it you know what i mean like the dollar is doing the right thing but oct is doing some funky funky crap but dude i that's not i don't think that's a good approach because this is a hard value that will be here i understand i understand i'm i this would be whatever the value the date picker or whatever we pick from but yeah okay what what do you want to do for this because i think i think we should just have the date itself rather than dd okay so maybe having format like it looks ugly bro like it looks really ugly you mean when we had it like like the whole thing right 10 20 20 20 10 slash 20 i don't think we need the 20 20 but i think something like 10 10 22. yeah okay it's a clean middle ground okay let's see that yeah so something like which would be okay i could try that try that one ed forward slash mmm you can do that and then we need to do this moment oh [ __ ] was this moment. and then we say dot death uh moment uh i think that's good because now we're doing compression on we got we've got a syntax error oh [ __ ] x axis is legal wait what's going on something's broken um it says 59. oh um there we go you just weren't closing the parentheses dude i'm here to close your parentheses bro marabon is there to complete your sentences i'm there to close your parentheses that's it boom that's good man that looks pretty good that looks no no okay i mean you we have to flip it because this is uk version of it which it's giving me a cause this is the mm dd yeah it's still oh [ __ ] okay so we've got a problem it formatted it but the diff isn't working no it's working bro it's it's fine it's perfect you're freaking out for no reason oh now it is on the other way it wasn't working no [ __ ] yeah yeah yeah okay not bad not bad that actually looks pretty clean i'll take that uh also what about when i hover over it can it give me like a little thing huh uh yeah so tool tip i think is what you're like some kind of tooltips thing right yes yes yes yes if we can get access to the element we could do whatever we want with it okay before before we do tool tip why don't we attach the form so then when we actually submit the form it adds a new date on the calendar or on the line chart yeah let's do it so that'll be sick we see it in dynamic as well okay so in that case now we this is our our data structure that we expect you know so now what we can do is we can have it so because when you when you submit it's just going to be moment format lo so what we do is we say we go to add gig and we say description is description amount is mount and description description okay oh the gigs oh yeah oops um now we can say here we set the gigs but we actually want to set the data okay so let's leave the gigs there from for now we don't care about this one instead let's just say set data set data to be whatever the data currently is so spread the data plus the date which is moment dot format and we're going to keep our format log because we did everything based on that and then we'll say this needs to be an object no we need to say format keep web is in the data and then have a object here which is date and there was a amount okay so amount is amount okay thing and set description okay that should actually if that works now then it should actually be doing it oh looks like something worked okay so now freelance and then they say enter a money made say like a huge amount so 20 000 ad gig oh snap okay it did it have a try oh whoa whoa you see this it did 2 000 so why is it added you added a string of 2 million for me added a string of 2 million 600 so oh because yeah it added as a string wait hold on what the [ __ ] yeah because yeah so oh but then what was the so we can we can debug it we can say the amount it just keeps adding it to as a string to the current like values it doesn't actually increment there's something [ __ ] up going on with the yaxis that's right that's right it's it's just literally adding it as a string to the final one so now it should be good so if we say freelance because yes you'll be careful with that um like that yeah okay there we go there we go that's why yeah that was a good catch yeah that's sick man dude do like five grand and you'll see a spike all right or 15 grand 15 grand sorry i mean no no let's just test five grand today and we will do uh coding boom right there on the 29th look at that that's it it's coming out that's sick nice and dude now we have a data structure we have um the way we expect that to be pushed in everything we have the app flow working it's super easy at this point to actually go ahead and connect that to firebase get everything dynamically shifting on there and keep it on there oh [ __ ] then we can actually like use this app on our phone or any device actually at that point probably because if it's hosted on firebase then i can just log in so what we what we could do as a sort of as uh the next natural sort of step for this is having user authentication yeah which would put you to this page right yeah and then if you're if you're authenticated you'll come if not you go to a login page and then what we can say is and then your data set would be pulled from firebase based on your user id and then that way when you're in your account you would only see your stats when i'm in my account i'll see my stats that's perfect that's perfect that's exactly what we want so like but do you think by the next um stream we do we'll actually start being able to use it on our phone like we'll actually be able to go and start logging my income and be able to see i think itself i think once we get the authentication done yeah i think yeah so authentication is going to require two things we're going to need navigation inside of our app uhhuh so you think you think you think so so you don't think we will be able to get that up and running in our next live stream but the stream after that so for example we're going monday thursday um yeah i think i think well track how's your next week looking like are you uh booked up next week or can we go live maybe more time so then we can make faster progress on it monday thursday 100 no tuesday's coaching call got it yeah uh potentially wednesday we can go live again as well okay but we've got a challenge now of authentication in typical react apps pretty easy we just go ahead and we do it um trying to get my phone basis error while being property d of a view mention okay dude just um just say ignore on it or something like do that like just um swipe it down or something and it just goes away and you can actually just use it like i'm able to now use it on my phone oh [ __ ] nice we got a five pound donation a five euro donation thanks for being my practical teachers i'm still new to programming and you guys make it so much fun oh [ __ ] thank you goodbye thank you bro appreciate it dude i really appreciate that so um so this next so firstly is clean up this stuff so few things happening that are funny one of them is that i think it's like yeah not not behaving the right way on a on a phone okay maybe it is um no it's also it's like it's not sorted and then it's also doing some funny things for example let me um so remember this tunnel it may not be the latest um no it's the latest because it's when i type in stuff it actually pops it up so it's connected to the form but like look at how it's uh not sorted it's possible it could be not the latest i'll try again let me try again sorry so my one right now is not the latest because i refreshed and then i click tunnel again and then i scanned it and then mine's downloading oh yeah it just keeps doing some funky stuff so if i say abc and then okay so it's not so that's one and then one two okay ah i think i know why actually this is why it's deprecated um moment.js is deprecated because the dates on format aren't supported in every browser oh [ __ ] i read it somewhere before and which means that in this case moment.js is support but the diff isn't working huh so the actual the actual values are working dude if i write testing and if i do like 20 or 20 000 yeah that works but it's all like sort the sorting is off and stuff like that so the sawing is off so so we need to fix the sorting um month month later okay so but beyond that anything else i think that the the key the keyboard not disappearing is another bug that's like a sort of we can fix that afterwards um very minor issue that one um i mean dude what i'm excited about is authentication firebase i can even use it from my computer yeah or i can just go on my phone and go on google and just go to whatever.com and log my daily income i just care about being able to log my daily income that would be sick right now this app is essentially just a react up it's not really a fullon react i mean it is react native because this graph is only react native um i'll take that back it's reactive yeah um yeah you can deploy this app too uh web though no okay dope so you want to let's make progress on it on on upcoming monday yeah let's go for so next goes for the next stream are react navigation yep um so we have some kind of navigation aspect and what we should do is we should commit this to a a repo that's between you and i uhhuh and then that way we can sort of like push the code have some kind of source control over it let's do it you have access to my terminal uh let me create a github i don't think i've got your organization's epa you should you should have access to my organization okay yeah yeah i'll make it private for now um nope so oh if you make it however public um you can make it public right like is there anything private about this i mean they're not going to be able to er they'll be a pull request if anything so yeah that's okay make it public so we'll call this um unless the only thing we code in here are like passwords from our most secure website and it's just like a set of strings like one array of uh array that's just called sonny's passwords just all your passwords in here like [ __ ] that slip so we have income tracking app um yes let's do that income tracking now okay i just want to check something get status what's that laptop yes package there's a lot of files here that aren't going to get committed with me creating the expo app okay so that was part of it okay let's check in um okay so income tracking app yeah repo repo name yeah income dash tracking okay in public great repo yeah and then if you just open up the tumblr they can see what i'm doing um a glogging remote add that [ __ ] to do js there we go and then i'm going to say get add or get stairs okay save first i will just say um freelance developer income tracker or something let's say i did graph nice just push that bad boy oh origin master bruh just do good push and let me check let me check let me check uh refresh hey there we go yeah it's there yeah all right let's uh follow this link open here it is y'all if you want here's the url doing a quick url reveal now i'm gonna hide it boom if you guys want to use this you can go ahead and use it wait hold on there's nothing in here uh refresh oh wait a second i just have yeah refresh no no it's not refresh it's i just have to expand it if i don't expand it oh it says view code yeah yeah so nice this is awesome we got the whole thing here you guys can go to app.js to see all the code that we wrote everything is here for your use and enjoyment yeah and we left the console logs all that stuff in it's it's nonrefactored like code so it's pretty much like at the point we left it so you guys can play with it that's it oh [ __ ] we forgot to promote the webinar oh whatever it's all good there's gonna be a webinar coming up this sunday if you're on our email list or whatever you'll be able to get access to it yeah make sure you guys are there because it's going to be a value drop and we're going to talk about how you can pretty much push all of your react capabilities in 90 days guys that webinar is gonna be sick super jampacked with value we're gonna be giving it all um our all it is going to be exclusive and not on youtube it'll also be in a way where you can jump on and communicate with us so if you want that then make sure you show up on sunday the only way you'll get a reminder is if you're on our email list if you're not on our email let's just go to cleverprogrammer.com pop in your email somewhere and you'll be good to go yeah exactly right now the link in the description is for the course so we actually will update that for next time and we'll have it yeah yeah and of course if you guys want to just jump into our course which is the best course on the planet when it comes to development then go ahead and feel free to do that this course will teach you everything that we're talking about here and much much much more it's called profit with javascript and the number one goal of this course is to help you make a killing with javascript exactly and guys all the things we talked about today like those data structures all those like kind of you know those kind of problem solving things that you get stuck in and you might be watching it thinking uh how the hell am i ever going to get to that point and we pretty much put our heart and soul into making that very easy for you to get to a point where you can solve problems like that and take it a step further and make some money with it so link in the description if you want to check out that's right so take advantage of that you guys the link is in the description students have gotten some insane insane results from what they have learned so take full full advantage of it other than that guys uh that's it for me this is qazi and this is your boy papa react this was a dope cool man this is a lot of fun this was sick all right i hope you guys enjoyed it we made some solid progress and on the next one on monday for this app that we're building we're going to continue the process and the goal is to build an app where all developers from the world can actually use it to track their income and to attract their freelancing income more importantly exactly yeah make sure you guys subscribe if you're not already subscribed hit the bell icon so you don't miss those videos coming up and yeah smash the thumbs up button if you enjoyed this yep and we'll have a dashboard so sunny few things we need to add to it is the ability to add a picture proof at one point yeah yeah right so we'll add the ability to add picture proof the whole point of this is going to be like everybody will everybody will be able to log their income at clever programmer we will be able to proofread and verify about your income and we will have a central dashboard view where we'll be able to see how much income everybody a clever programmer has made exactly yeah exactly we're gonna go ahead and have it so you can log in you can have your own account we'll support a bunch of different login logins and we'll show you how to build all that which would be cool and yeah like it's going to be proven income and then the amazing thing is we're going to have all of that income sort of like all those stats and things like that so we're going to actually we can pretty much go ahead and do something crazy with that have some kind of leaderboard you know some kind of stuff going on um that would be awesome to see as well but yeah you guys are gonna see all of that being built up which is pretty cool that's gonna be sick and uh me maribon and sunny we're all gonna go to cheesecake factory in l.a she always talks about cheesecake she's like oh we need to go cheesecake hatchery i've never been everything that's gonna be sick all right love you guys uh sunday at 12 p.m or 11 a.m when is the webinar should we go 11 a.m or 1 uh 12 p.m want to go 11 a.m uh other webinars yeah let's do it cool 11 a.m pacific sunday that's where we're going to be doing it how to become a react js developer in under 90 days it's going to blow your mind make sure you show up with that said i love your beautiful face this is qazi this is your boy sunny papa react and we will see you guys in uh hopefully
