With timestamps:

00:00 - in this video you're going to be
00:01 - building WhatsApp web 3.0 dap using
00:04 - next.js we're going to be using third
00:05 - map to deploy our custom made solidity
00:07 - contract that will keep track of all the
00:09 - messages that you and all the other
00:11 - users are going to send and receive with
00:13 - this app and once we are done with the
00:14 - app we're going to use digitalocean to
00:16 - deploy it to the Internet so with that
00:18 - said let's just jump straight into the
00:20 - build all right let's go ahead and get
00:22 - started building the WhatsApp clone so
00:24 - as always just go into your favorite
00:26 - folder wherever you like to build our
00:29 - stuff
00:30 - and then just run our clever programmer
00:33 - CLI so let's see programmer and there
00:37 - you go just pop in your email
00:39 - and your name
00:41 - and now you can type in WhatsApp and it
00:43 - will narrow it down it will immediately
00:45 - pop open two websites for you so one of
00:47 - them is third web and we're going to get
00:50 - there in just a little bit you can go
00:52 - ahead and connect your meta mask right
00:54 - here so that's helpful if you do that
00:55 - immediately and the other one is
00:58 - digitalocean who are giving you 200 if
01:02 - you use the link to sign up and so let's
01:05 - go ahead and just go ahead and set it up
01:07 - so I prefer to use Google sign in all
01:11 - the time everywhere all around the
01:13 - internet so once you hit that Google
01:15 - sign up connect one of your payment
01:17 - methods you will be charged with a
01:18 - little bit of my money but it will be
01:20 - reverted immediately so don't worry
01:22 - about that I prefer to use a card so I'm
01:25 - just going to do that it'll all be
01:27 - blurred out but you can probably figure
01:29 - it out card number expiration CBC name
01:32 - and your billing address and as you can
01:36 - see it already says my card is a death
01:39 - added successfully so that's pretty cool
01:41 - and um you can immediately get started
01:45 - hosting stuff I'm just gonna go and hit
01:47 - explore over there and that will set up
01:50 - my first project so I actually don't
01:53 - even need to worry about it you can
01:54 - customize it look around feel it out
01:57 - after the video you want to get the
01:59 - retention high and if you just go into
02:02 - Apps that'll be the best to prepare
02:05 - everything for the rest of the build and
02:08 - once you're already here in the meantime
02:10 - our CLI tool just finished everything it
02:13 - also says opening vs code which actually
02:15 - got done in my other screen let's go
02:18 - ahead and pull that over and there we go
02:21 - that is pretty much everything we're
02:23 - going to need for now so you want to
02:25 - double check the node modules that are
02:27 - installed and if they are what you can
02:30 - do is CD into your next app and then go
02:33 - ahead and hit yarn depth that will spin
02:37 - up your next step and basically you're
02:39 - good to go at this point let's see what
02:42 - we got so it opened up on localhost 3001
02:45 - whatever reason I have something running
02:47 - on local 3000 and here's your app that
02:51 - is basically it and probably my metamask
02:53 - is already connected something we're
02:55 - going to disconnect and so yeah this is
02:57 - what you will see and then you have
02:59 - already metamask connection enabled so
03:02 - let's go ahead and now set up our
03:04 - contract let's deploy it and let's keep
03:06 - going all right now with all that done
03:09 - let's go ahead and come back here
03:11 - and what I'm going to do is I'm just
03:14 - gonna try type here truffle create
03:17 - contract and I'm gonna call it what's
03:20 - app just like that and what that's going
03:23 - to do is it will generate a WhatsApp
03:25 - solidity file right here let me actually
03:28 - make it nice and big for you that's what
03:30 - she said so once you're there first of
03:33 - all what we want to do is make sure that
03:35 - our solidity version is 0.8.17 that's
03:39 - what we're going to be using and you
03:41 - want to also make sure that in your
03:43 - truffle config if you scroll down it
03:45 - actually should be coming with the CLI
03:47 - but yeah you definitely want to make
03:49 - sure that this is 0 8 17 as well
03:52 - so
03:53 - now that we're here let's go ahead and
03:55 - actually build this contract out we are
03:58 - not going to need the Constructor but
04:00 - what we're going to need is we're going
04:01 - to have a struct which is going to be a
04:04 - message struct and we're going to Define
04:06 - what the message is going to be made up
04:10 - of so we're going to have a user who
04:11 - sends the message we're going to have a
04:13 - string which is going to be the message
04:15 - text itself the uint which is going to
04:18 - be the timestamp and um that's basically
04:21 - it now we're going to create an array of
04:24 - these messages
04:25 - we're then going to create a number that
04:28 - will that will just keep track of how
04:30 - many messages have already been sent and
04:33 - we're gonna go ahead create a mapping
04:35 - that is going to map
04:37 - a map when the person message the last
04:42 - time
04:43 - so that's going to be a public mapping
04:45 - and we're going to call it last message
04:47 - that's going to be helpful later on I'll
04:50 - explain it when we get there so we're
04:51 - going to need an event which will you
04:54 - can just name it new message and it will
04:57 - take an address which will be indexed
04:59 - from
05:01 - which will be which will be the from and
05:03 - then we're going to have a u and it's
05:05 - going to be the timestamp of that
05:07 - specific message and the string which
05:10 - will be the message itself with just two
05:14 - s's like that
05:16 - and I don't think
05:18 - okay something is up here let's let's
05:20 - try this out again all right there we go
05:22 - and let's put out the semicolon at the
05:26 - end of the line now we're gonna have two
05:28 - functions one of them is going to be
05:30 - send message and it's going to be public
05:33 - function and the other one is going to
05:35 - be get all messages like that it's going
05:39 - to be another public one and we're also
05:42 - going to have actually a light we're
05:43 - gonna have three functions in here so
05:46 - that's going to be get total messages
05:49 - count
05:50 - so it's going to be like that again a
05:53 - public One open close
05:55 - you're good to go Bob is your uncle
05:59 - now these are going to be the easier
06:01 - ones so I think we should just go ahead
06:03 - and get started with these so it's going
06:05 - to return total messages now something
06:09 - you need to do in solidity is actually
06:11 - Define what type of data will be
06:14 - returned so let's actually do that right
06:16 - now
06:17 - and let's fix the indentation and all
06:19 - that stuff and let's do this for the
06:22 - other one and this is going to return
06:25 - this is going to be a public View and
06:27 - it's going to return a whoa message
06:32 - array just like that from the memory
06:35 - just like that and it's gonna be in
06:38 - third person like that and we're going
06:41 - to return messages
06:43 - but so far it's pretty easy these are
06:45 - the easy ones now this one isn't going
06:48 - to be hard either I'm just going to
06:49 - start at the very end uh what we want to
06:52 - do is emit a new message event where
06:56 - we're going to send or we're going to
06:58 - pass in the message sender who's going
07:01 - to be the from person we're going to
07:03 - pass in block.timestamp time stamp just
07:07 - like that we're going to pass in another
07:09 - score message now you might be wondering
07:11 - what that is but that is something that
07:12 - we need to pass into this function from
07:15 - the front end so let's go ahead and
07:16 - Define all those things so that's
07:18 - actually going to be one thing it's
07:20 - going to be a string so that that's that
07:23 - and that's where it's going to come from
07:24 - now again I keep forgetting these uh
07:27 - semicolons it will keep coming up
07:30 - because like I will keep forget them so
07:32 - that's something you shouldn't forget
07:33 - but I certainly do forget all the time
07:36 - not now obviously all right talk about
07:38 - it all right so now what we're going to
07:40 - do
07:41 - is we're going to say this is where
07:43 - we're going to set a time limit or like
07:46 - a there has to be this is where we're
07:48 - going to set a constraint that five
07:51 - seconds have to be have to pass between
07:53 - two messages sent from the same person
07:55 - so like nobody's gonna go and have some
07:58 - adrenaline rush and just like blast
08:00 - messages to the group because that's
08:02 - unhealthy so what we're going to do is
08:04 - say last message and then passive
08:07 - message that's sender so that's the
08:08 - person that is actually executing the
08:11 - function and we're going to say plus
08:13 - five seconds must be less than clock Dot
08:17 - timestamp and oops settings came up and
08:22 - we're just going to go ahead and say a
08:24 - little nice error message we're going to
08:27 - say wait five seconds
08:29 - before sending another message just like
08:33 - that so that should pretty much be good
08:36 - to go now you can increase it's
08:38 - decreases as you want to and also
08:40 - solidity is like super op because you
08:42 - can type in five seconds like that
08:44 - that's crazy and it like understands it
08:46 - actually it's not just like my mistake
08:48 - there so what we're gonna say is moving
08:51 - on is last message
08:55 - sender or we have to update it so that's
08:57 - going to be block timestamp and then
09:00 - we're going to increase the number of
09:02 - total messages like incremented like
09:04 - that and then what we're going to do is
09:06 - just like in regular JavaScript we're
09:09 - going to push a new message into our
09:13 - array up here so what what do we need we
09:16 - need the address we need the text and we
09:18 - need the timestamp so we're going to say
09:20 - message dot sender like that message and
09:24 - block dot timestamp just like that
09:28 - now it says push not found or visible so
09:32 - what we need to do is actually format
09:34 - this in a format that this will actually
09:38 - like it so that should be good yeah so
09:41 - that's pretty much our contract now
09:44 - let's go ahead and build it just so
09:45 - we're on the same side and you can use
09:48 - multiple things I just like to use this
09:50 - stuff right there I have truffle enabled
09:52 - and it says compiling everything is up
09:55 - to date nothing to compile here that
09:57 - sounds interesting so just for safety
10:00 - just run truffle compile because truffle
10:03 - build is not used anymore so let's see
10:05 - what happens next
10:07 - okay we're good that's basically it now
10:10 - let's go ahead and deploy this contract
10:12 - all right nice to see you here let's
10:15 - continue deploying this guy a few things
10:17 - I want to show you because that third
10:20 - rope is cool but what I want you to do
10:22 - is like whatever website your CLI pulled
10:25 - up just go there and hit that Turtle
10:26 - icon because that's going to take you to
10:28 - your dashboard now you want to make sure
10:31 - that you're on the girly Network because
10:33 - right now that's pretty much the only
10:35 - test Network I know about that's not
10:38 - like completely toast like rinkaby is
10:41 - done for all these builds are like out
10:44 - the window and as you can see I already
10:46 - build it once yeah and then here
10:49 - actually you can click that and then
10:52 - just go there and it's like literally
10:54 - this too easy
10:56 - guys third lab stop making things too
11:00 - easy all right we're just gonna stick
11:02 - with this one little command that's
11:04 - going to like take care of everything so
11:07 - you just want to put it in here actually
11:08 - I'm not there you want to go out to or
11:11 - once after a YouTube app right here and
11:13 - paste it there and I'll sit back and
11:16 - relax
11:17 - enjoy the views now once it is done you
11:19 - will see this and it probably opens up
11:22 - in your uh browser but Chrome is not my
11:25 - favorite browser so it's not the default
11:27 - one but this is the one that I use for
11:29 - all kinds of development stuff so that's
11:32 - the link that you're going to get or not
11:34 - this one but something like that you get
11:36 - the point just put it in here it will be
11:38 - opened up you can select the chain it's
11:40 - obviously girly that's the only one that
11:43 - like exists at this point I think
11:45 - anyways now what you want to do is hit
11:48 - this deploy thing so let's go ahead and
11:50 - do that there will be two transactions
11:52 - so the first one is like this guy right
11:54 - here wait for the confirm hit that
11:57 - this will take a little time so let's
11:59 - wait for it and then another one will
12:01 - show up and there it is there's the
12:03 - other one so if you keep your meta mask
12:05 - open it's not going to pop up again
12:07 - because it's already open so you can
12:09 - just click that scroll down and confirm
12:12 - and once all of it goes through this is
12:14 - what you will see
12:16 - now this is a super cool interface where
12:19 - you can uh mess with your Contour so I'm
12:21 - just gonna make things a little big here
12:24 - so you can see it better like it just
12:26 - executes everything for you and you can
12:28 - keep refreshing it and you can double
12:30 - check that stuff that you are receiving
12:33 - on your end inside your app is the same
12:36 - as what you will actually get back so
12:38 - this is a cool tool that you can use to
12:41 - double check that your app is working
12:42 - perfectly and you can even send message
12:44 - here so yeah
12:46 - that being said let's go ahead and
12:48 - connect this to our front end all right
12:51 - come back to the red lit studio now what
12:54 - you want to do is go to your code
12:55 - section and this is where all the magic
12:57 - is at all right anyways let's go into
13:00 - your context and that's where all the
13:03 - magic is going to happen so we're gonna
13:06 - go ahead and get started we're gonna go
13:08 - ahead and get started by setting up a
13:10 - couple of States over here so as you can
13:13 - see we already have use account and all
13:16 - that kind of stuff imported so let's
13:18 - just extract the user address over here
13:21 - and let's just say that's going to be
13:24 - equal to whoa not that use account like
13:28 - that and let's go ahead and now have a
13:32 - message is just set messages just like
13:35 - that and another one is in user
13:41 - a press like that and those are perfect
13:45 - initial values now
13:47 - these are going to be our uh these are
13:50 - going to be our states so let's export
13:52 - them straight away so we're going to
13:54 - have messages and we're gonna have user
13:57 - address
13:58 - and if we go into your chat index file
14:02 - we already imported the context for you
14:05 - so what you can do is say what you can
14:08 - do is say messages
14:10 - oops messages
14:13 - equals use app context that way you can
14:16 - remove that dummy data and basically
14:19 - this file is ready to go and the app is
14:21 - going to be
14:23 - perfectly Dynamic the moment you start
14:26 - using it and the moment you start
14:28 - fetching stuff now the one thing though
14:31 - that I messed up is this address has to
14:33 - be like that you don't have to
14:35 - destructure it all right with that let's
14:38 - go ahead and set up all the contract
14:41 - connections so if you have another the
14:44 - CLI tool has already done all this for
14:46 - you but you might as well want to run it
14:48 - once again I don't know it's there if
14:50 - you want to and you can disregard all
14:53 - the import statements for now because
14:55 - once again the CLI tool took care of
14:57 - that so what you want to do
15:00 - is copy this line of code and just paste
15:04 - it like right here and what I like to do
15:07 - is just command X that guy out and then
15:10 - just say process Dot oops
15:14 - process.environment dot
15:17 - contract address like that and now what
15:22 - I will do is go ahead and create a dot
15:25 - dot
15:26 - env.local file and what that will allow
15:29 - me to do is I will be able to change the
15:32 - contract address super easily if later
15:34 - on I decide to update the contract so
15:36 - that's just a nice little touch and what
15:39 - you can also do is whenever we're going
15:41 - to deploy this whole application to
15:42 - digitalocean where you can have a local
15:45 - developer version on a test net and if
15:48 - you were to deploy it to the main net
15:50 - that can go to onto your digitalocean so
15:53 - that will connect to the I will connect
15:55 - to the mainnet that's so there's that
15:59 - will be our contract connection again if
16:01 - you've watched any of our previous
16:03 - builds where we custom built out
16:05 - everything this is like outrageously
16:07 - easy compared to that anyways
16:09 - so what we're going to do now is we're
16:11 - going to set up all the functions that
16:13 - that will read the messages and then the
16:16 - one that is going to send the messages
16:18 - so we're going to have two functions to
16:20 - do one get messages and that will be an
16:24 - async function and we're also going to
16:27 - have a send
16:29 - message that is once again going to be
16:33 - an async function and actually that will
16:36 - have an input like that
16:39 - so let's go ahead and get started with
16:41 - get messages
16:42 - now the only thing that never goes away
16:45 - is the try catch when when working with
16:48 - anything blockchain related so that
16:50 - keeps on being a thing now in your try
16:54 - catch
16:55 - now to make everything work we will set
16:58 - two more things up out here and that'll
17:00 - be your functions connections to the
17:02 - contract and once again
17:04 - ridiculously easy so copy that line
17:08 - under reading data and that guy over
17:11 - here so that guy and then
17:15 - paste it right there now we're gonna
17:18 - rename a few things over here just
17:20 - because uh just for an easier
17:22 - readability so it's going to be message
17:24 - messages date like that and we're gonna
17:28 - and we're also gonna rename his loading
17:31 - to messages
17:32 - loading there's going to be multiple
17:34 - loadings in here and I just don't want
17:36 - it to get confused and then for writing
17:39 - data we also want to copy that that bad
17:42 - boy
17:43 - and then just put it right underneath
17:46 - now we're going to rename muted async to
17:49 - message and is loading to
17:53 - set message send message loading so what
17:56 - this is what this does in a nutshell is
17:59 - this sets up the contract instance and
18:01 - these two will establish all the
18:04 - function connections so your app is
18:06 - going to pre-fetch everything and it
18:08 - will have everything ready to go and all
18:11 - of them is going to be ready and
18:12 - connected to third web so whenever you
18:14 - invoke it it's going to be much faster
18:16 - than how you would normally do it that's
18:19 - once again third it was too convenient
18:22 - at this point dang now what we'll do is
18:26 - inside of get get messages trial
18:29 - statement we'll make sure that if the
18:31 - messages are loading we not we don't try
18:34 - to like
18:35 - fetch the messages again because that
18:37 - just doesn't make sense
18:38 - I forgot the S there
18:40 - and whenever whenever all the messages
18:43 - are actually loaded
18:45 - we're gonna need to format them a little
18:47 - bit so we're going to have formatted
18:49 - messages and it will be messages data
18:53 - dot map
18:55 - so once again what's happening is
18:57 - everything is being fetched like
18:59 - straight away you don't have a choice it
19:01 - just happens and then here all you do is
19:04 - just format them so we grab each
19:07 - individual message and we'll return an
19:10 - address
19:12 - so it's going to be more easier to read
19:15 - and instead of that we're going to say
19:18 - is message dot user
19:21 - and then we're going to have the message
19:23 - itself it's going to message the message
19:26 - and we're going to have a time stamp
19:29 - that we're going to use moment js4 so
19:31 - we're going to say moment the Unix
19:36 - open close paren and now we're going to
19:38 - parse int we're going to generate a
19:41 - number out of a few things it's going to
19:44 - be mess
19:46 - message.timestamp like that and we're
19:50 - going to convert that to a string real
19:52 - quick
19:53 - and we'll format this to an hour minute
19:57 - oops hour minute Am Pm format so that's
20:02 - all it does and then the entire thing is
20:04 - going to be a Unix timestamp so we're
20:07 - going to be able to work with it later
20:09 - on in the app
20:10 - and then let's just update the state so
20:13 - send messages and formatted messages so
20:18 - that in theory should already fetch
20:21 - everything we have so let's connect
20:22 - let's connect our meta mask and you
20:26 - don't see anything so that's perfect
20:27 - that means there's nothing there like no
20:30 - messages in there all right now to be
20:32 - able to send messages
20:34 - we're gonna go in the send message
20:36 - function
20:37 - and we're going to have another try
20:39 - catch thing here
20:41 - so we'll catch air
20:42 - and open close brand once again
20:46 - so console log error like that
20:49 - and all we're going to do is we already
20:51 - destructured we're already got all the
20:54 - all the function connections so we're
20:56 - gonna use this function the message
20:58 - function and we're going to just say
21:00 - await
21:01 - message pass in message
21:04 - and you gotta make sure that it's going
21:06 - to be an array and so that is pretty
21:09 - much it now we'll need to export this
21:12 - bad boy so paste that there
21:15 - and now if you go in
21:17 - and now if you go into your chat input
21:19 - file
21:20 - we'll need to wait
21:23 - we'll need to go ahead and actually
21:24 - destructure this from the context so we
21:28 - got that there and then right here in
21:31 - the handle handle send message function
21:33 - you will be able to go ahead and say oh
21:37 - wait and send message and input now
21:41 - before we before before you send
21:43 - anything here what I want to do is just
21:46 - make sure that the input has to have
21:48 - some sort of value so if it's empty we
21:50 - don't want this function to run at all
21:52 - and basically that is it so let's go
21:55 - ahead and check this guy out let's see
21:57 - what do we got and so I'm just going to
21:59 - say yo
22:00 - this build is awesome
22:04 - and just in case there are any kind of
22:06 - Errors I just want to have my console
22:07 - open so we can debug everything quick
22:10 - and let's hit return on that it says
22:13 - message is not a function okay
22:16 - so maybe there is some sort of conflict
22:18 - between this message and that message so
22:21 - maybe let's rename this to a message
22:24 - text
22:25 - and paste that there let's see if that
22:28 - fixed our issue or not
22:30 - um just for like safety measures I'm
22:32 - just going to restart our app now
22:35 - I also want to make sure that whenever I
22:38 - load my app before anything I want to
22:41 - run a use effect
22:43 - that will basically fetch all the
22:45 - messages so it will run get messages
22:48 - and it will also update my users set
22:52 - user address and I just want to say
22:55 - address in there so that's perfect and I
22:58 - also want this to run every single time
23:00 - my wallet is actually changed
23:03 - so let's see what we got there's some
23:05 - sort of crazy thing going on there so
23:07 - that's not cool let's see what can we do
23:10 - about that
23:11 - also there is a there was a typo to burn
23:15 - this something is wrong with this use
23:17 - effect because it keeps firing things
23:19 - off for no reason
23:21 - okay yeah so if I comment that out it
23:24 - stops so apparently you actually do need
23:27 - to destructure account
23:30 - and that'll stop that random constant
23:32 - rendering so let's actually put those
23:34 - back around there
23:36 - and I also renamed them to account
23:38 - instead of address just because it's
23:40 - more descriptive
23:42 - so that should in theory now work so
23:45 - let's see what do we got so let's just
23:48 - type in something yo this is cool
23:51 - exclamation point all right it says
23:53 - contract must be defined what do we go
23:56 - what is the issue with contract though
23:59 - let's just say console log contract
24:02 - and
24:04 - I also have a hunch that this process
24:07 - environment situation is going to cause
24:09 - a lot of trouble so let's call console
24:12 - log that guy out too just for fun okay
24:16 - so the reason that's not being rendered
24:19 - out because the browser itself doesn't
24:21 - have access to contract address so what
24:23 - you want to do is just say next
24:26 - underscore public and that is going to
24:30 - be your new name so go into your EnV
24:33 - file and that's going to be your new
24:36 - name so once we're good there
24:38 - we can actually remove this and I'm
24:40 - pretty sure it's going to work after I
24:43 - restart this whole process
24:45 - and
24:47 - let's refresh
24:48 - all right this is dope oops I left a
24:52 - catalog on
24:53 - and there you go there is your meta mask
24:55 - popping up so that should be working now
24:59 - so let's confirm it let's see what do we
25:00 - got and how is it gonna work and now it
25:03 - says it's pending
25:05 - let's give it some more juice and there
25:07 - you go the message is sent now you will
25:11 - need to re reload this you will need to
25:13 - reload in this instance and for some
25:14 - reason okay it was just a little delayed
25:17 - but there you have it that is your app
25:19 - you can now go ahead and send messages
25:22 - using this interface and there you go
25:24 - just to prove it out this is
25:27 - yo how's it going have you subscribed
25:32 - yet and if you haven't what are you
25:34 - doing
25:35 - just go subscribe while I send this nice
25:38 - little message over here
25:39 - let's go ahead hit confirm on that bad
25:41 - boy as well
25:43 - let's wait for it a little bit
25:44 - and let's refresh let's see what do we
25:46 - got
25:47 - bam there you go now just before we wrap
25:51 - this up this is the time we go ahead and
25:54 - upload this and deploy this using
25:56 - digitalocean so let's do that
25:59 - all right let's set up everything for
26:02 - digitalocean there's a few key things
26:05 - that you need to set up before you can
26:07 - even get started so first of all you
26:10 - need to make sure that you have this
26:12 - line in here
26:13 - Pro it comes with the CLI tool but in
26:16 - the future you want to copy this over
26:18 - once this is done
26:21 - because digitalocean has a different way
26:23 - of processing images you have to go into
26:25 - your next config file and make sure that
26:29 - unoptimized is set to true I cannot
26:32 - emphasize this enough without that your
26:35 - entire deployment is going to fail and
26:37 - there's your 200 running out for no
26:39 - reason
26:40 - all right so those are the two
26:42 - preparations that we need to do now the
26:45 - other thing you can you need to do is
26:47 - we'll need to put this entire project
26:50 - onto a GitHub repo so what I'm going to
26:52 - do is just say rmrf because and Dot get
26:56 - and what that will essentially do is
26:58 - basically remove the current version
27:00 - management
27:02 - that we have going on right now that
27:04 - comes with the CLI tool now what I'm
27:07 - going to do now is go into my GitHub
27:10 - quick sign in right there
27:13 - fingerprint security key
27:16 - fingerprint that bad boy again
27:18 - and there's my GitHub nice little shout
27:21 - out go go ahead follow me because if you
27:24 - don't what are you doing
27:25 - all right I'm just gonna give it a repo
27:29 - name and it will be what's up
27:31 - live
27:33 - because we built this live together
27:36 - it's gonna be a public one because I
27:38 - don't care
27:39 - and now what I'm gonna do is just follow
27:42 - all this stuff so I'm going to say get
27:45 - in it in here oops get in it like that
27:49 - that initializes a new a new version
27:51 - control over there and then I'm going to
27:54 - say git remote at origin and then just
27:56 - copy whatever link you got there paste
27:59 - that guy right there so that technically
28:01 - connected the two two repositories
28:04 - together now what you want to do is say
28:06 - git add period not slash period like
28:11 - that
28:12 - that'll stage all the changes that are
28:14 - happening here which is a bunch and now
28:17 - what you want to do is say get commit
28:20 - Dash M and you can just type in whatever
28:23 - you want but I'm just gonna say little
28:26 - nice check mark and app is done
28:29 - exclamation point
28:31 - I messed something up there
28:33 - good commute there you go
28:35 - I don't know what happened there that
28:37 - seems pretty much the same oh you cannot
28:40 - do exclamation point apparently you
28:42 - should see a bunch of files like that
28:44 - and that means that you did good stuff
28:47 - there and it should go it should say
28:49 - zero out here and all that stuff now
28:51 - once it is done just say git push has no
28:55 - Upstream yada yada okay that's fine
28:58 - I'm gonna just go ahead and copy that it
29:01 - probably works
29:02 - bam there you go now if it went through
29:05 - well that it should technically show up
29:08 - on your GitHub and there it is my app is
29:11 - done right here perfect so once that is
29:15 - ready to go now I want you to go into
29:17 - your digital ocean platform
29:20 - in here you will need to go to apps as
29:23 - we did earlier
29:25 - and then you can just go ahead hit
29:27 - create or create app just right there in
29:30 - the middle and then you will need to
29:32 - enable GitHub access right here I can't
29:34 - seem to draw a circle around it there
29:37 - you go so manage access go right there
29:40 - and select the appropriate account you
29:42 - got
29:42 - hit our repository that doesn't really
29:44 - matter
29:45 - now we'll load a little bit and then you
29:48 - can go ahead and select which repository
29:51 - you will enable or which repository are
29:55 - we talking about and in this case it is
29:57 - WhatsApp live so I'm just gonna say
29:59 - WhatsApp Dash live right there
30:02 - and select that repo now
30:05 - if you remember there's a few folders
30:07 - here but the one that we want to deploy
30:10 - is inside of next app so that guy right
30:13 - there so you want to type in next Dash
30:17 - app right here make sure you have Auto
30:20 - deploy checked off
30:22 - and then you want to go with the main
30:24 - branch because that's the only one now
30:26 - hit next and then here in environment
30:29 - variables we'll go ahead and set the
30:31 - globals up
30:33 - so go ahead hit edit and go back into
30:35 - your EnV file copy the name of it put
30:39 - that there as key and then copy this
30:41 - value which is just your contract
30:44 - address paste hit save and if it says
30:47 - one environment variable you're good to
30:49 - go now hit next was a little too close
30:52 - hit next again review yada yada
30:55 - it will say that it will cost you twenty
30:57 - four dollars per month however forget
31:01 - you have 200 dollars
31:03 - so spend it now go ahead create resource
31:06 - and it will take a little bit of time to
31:09 - deploy it
31:10 - so if if you can see something like this
31:13 - like some random name that was given has
31:15 - been created and you're good and then
31:17 - now you can go into your build logs and
31:21 - watch it go live real time
31:25 - and there you go there's your app go
31:28 - ahead and now up here it will show up
31:31 - right there
31:32 - and if you click it
31:34 - I should bring it to Chrome or whatever
31:35 - it supports metamask let's go ahead and
31:39 - now connect connect
31:41 - and you're pretty much good to go so
31:43 - thank you so much for watching with that
31:45 - said see you in the next one

Cleaned transcript:

in this video you're going to be building WhatsApp web 3.0 dap using next.js we're going to be using third map to deploy our custom made solidity contract that will keep track of all the messages that you and all the other users are going to send and receive with this app and once we are done with the app we're going to use digitalocean to deploy it to the Internet so with that said let's just jump straight into the build all right let's go ahead and get started building the WhatsApp clone so as always just go into your favorite folder wherever you like to build our stuff and then just run our clever programmer CLI so let's see programmer and there you go just pop in your email and your name and now you can type in WhatsApp and it will narrow it down it will immediately pop open two websites for you so one of them is third web and we're going to get there in just a little bit you can go ahead and connect your meta mask right here so that's helpful if you do that immediately and the other one is digitalocean who are giving you 200 if you use the link to sign up and so let's go ahead and just go ahead and set it up so I prefer to use Google sign in all the time everywhere all around the internet so once you hit that Google sign up connect one of your payment methods you will be charged with a little bit of my money but it will be reverted immediately so don't worry about that I prefer to use a card so I'm just going to do that it'll all be blurred out but you can probably figure it out card number expiration CBC name and your billing address and as you can see it already says my card is a death added successfully so that's pretty cool and um you can immediately get started hosting stuff I'm just gonna go and hit explore over there and that will set up my first project so I actually don't even need to worry about it you can customize it look around feel it out after the video you want to get the retention high and if you just go into Apps that'll be the best to prepare everything for the rest of the build and once you're already here in the meantime our CLI tool just finished everything it also says opening vs code which actually got done in my other screen let's go ahead and pull that over and there we go that is pretty much everything we're going to need for now so you want to double check the node modules that are installed and if they are what you can do is CD into your next app and then go ahead and hit yarn depth that will spin up your next step and basically you're good to go at this point let's see what we got so it opened up on localhost 3001 whatever reason I have something running on local 3000 and here's your app that is basically it and probably my metamask is already connected something we're going to disconnect and so yeah this is what you will see and then you have already metamask connection enabled so let's go ahead and now set up our contract let's deploy it and let's keep going all right now with all that done let's go ahead and come back here and what I'm going to do is I'm just gonna try type here truffle create contract and I'm gonna call it what's app just like that and what that's going to do is it will generate a WhatsApp solidity file right here let me actually make it nice and big for you that's what she said so once you're there first of all what we want to do is make sure that our solidity version is 0.8.17 that's what we're going to be using and you want to also make sure that in your truffle config if you scroll down it actually should be coming with the CLI but yeah you definitely want to make sure that this is 0 8 17 as well so now that we're here let's go ahead and actually build this contract out we are not going to need the Constructor but what we're going to need is we're going to have a struct which is going to be a message struct and we're going to Define what the message is going to be made up of so we're going to have a user who sends the message we're going to have a string which is going to be the message text itself the uint which is going to be the timestamp and um that's basically it now we're going to create an array of these messages we're then going to create a number that will that will just keep track of how many messages have already been sent and we're gonna go ahead create a mapping that is going to map a map when the person message the last time so that's going to be a public mapping and we're going to call it last message that's going to be helpful later on I'll explain it when we get there so we're going to need an event which will you can just name it new message and it will take an address which will be indexed from which will be which will be the from and then we're going to have a u and it's going to be the timestamp of that specific message and the string which will be the message itself with just two s's like that and I don't think okay something is up here let's let's try this out again all right there we go and let's put out the semicolon at the end of the line now we're gonna have two functions one of them is going to be send message and it's going to be public function and the other one is going to be get all messages like that it's going to be another public one and we're also going to have actually a light we're gonna have three functions in here so that's going to be get total messages count so it's going to be like that again a public One open close you're good to go Bob is your uncle now these are going to be the easier ones so I think we should just go ahead and get started with these so it's going to return total messages now something you need to do in solidity is actually Define what type of data will be returned so let's actually do that right now and let's fix the indentation and all that stuff and let's do this for the other one and this is going to return this is going to be a public View and it's going to return a whoa message array just like that from the memory just like that and it's gonna be in third person like that and we're going to return messages but so far it's pretty easy these are the easy ones now this one isn't going to be hard either I'm just going to start at the very end uh what we want to do is emit a new message event where we're going to send or we're going to pass in the message sender who's going to be the from person we're going to pass in block.timestamp time stamp just like that we're going to pass in another score message now you might be wondering what that is but that is something that we need to pass into this function from the front end so let's go ahead and Define all those things so that's actually going to be one thing it's going to be a string so that that's that and that's where it's going to come from now again I keep forgetting these uh semicolons it will keep coming up because like I will keep forget them so that's something you shouldn't forget but I certainly do forget all the time not now obviously all right talk about it all right so now what we're going to do is we're going to say this is where we're going to set a time limit or like a there has to be this is where we're going to set a constraint that five seconds have to be have to pass between two messages sent from the same person so like nobody's gonna go and have some adrenaline rush and just like blast messages to the group because that's unhealthy so what we're going to do is say last message and then passive message that's sender so that's the person that is actually executing the function and we're going to say plus five seconds must be less than clock Dot timestamp and oops settings came up and we're just going to go ahead and say a little nice error message we're going to say wait five seconds before sending another message just like that so that should pretty much be good to go now you can increase it's decreases as you want to and also solidity is like super op because you can type in five seconds like that that's crazy and it like understands it actually it's not just like my mistake there so what we're gonna say is moving on is last message sender or we have to update it so that's going to be block timestamp and then we're going to increase the number of total messages like incremented like that and then what we're going to do is just like in regular JavaScript we're going to push a new message into our array up here so what what do we need we need the address we need the text and we need the timestamp so we're going to say message dot sender like that message and block dot timestamp just like that now it says push not found or visible so what we need to do is actually format this in a format that this will actually like it so that should be good yeah so that's pretty much our contract now let's go ahead and build it just so we're on the same side and you can use multiple things I just like to use this stuff right there I have truffle enabled and it says compiling everything is up to date nothing to compile here that sounds interesting so just for safety just run truffle compile because truffle build is not used anymore so let's see what happens next okay we're good that's basically it now let's go ahead and deploy this contract all right nice to see you here let's continue deploying this guy a few things I want to show you because that third rope is cool but what I want you to do is like whatever website your CLI pulled up just go there and hit that Turtle icon because that's going to take you to your dashboard now you want to make sure that you're on the girly Network because right now that's pretty much the only test Network I know about that's not like completely toast like rinkaby is done for all these builds are like out the window and as you can see I already build it once yeah and then here actually you can click that and then just go there and it's like literally this too easy guys third lab stop making things too easy all right we're just gonna stick with this one little command that's going to like take care of everything so you just want to put it in here actually I'm not there you want to go out to or once after a YouTube app right here and paste it there and I'll sit back and relax enjoy the views now once it is done you will see this and it probably opens up in your uh browser but Chrome is not my favorite browser so it's not the default one but this is the one that I use for all kinds of development stuff so that's the link that you're going to get or not this one but something like that you get the point just put it in here it will be opened up you can select the chain it's obviously girly that's the only one that like exists at this point I think anyways now what you want to do is hit this deploy thing so let's go ahead and do that there will be two transactions so the first one is like this guy right here wait for the confirm hit that this will take a little time so let's wait for it and then another one will show up and there it is there's the other one so if you keep your meta mask open it's not going to pop up again because it's already open so you can just click that scroll down and confirm and once all of it goes through this is what you will see now this is a super cool interface where you can uh mess with your Contour so I'm just gonna make things a little big here so you can see it better like it just executes everything for you and you can keep refreshing it and you can double check that stuff that you are receiving on your end inside your app is the same as what you will actually get back so this is a cool tool that you can use to double check that your app is working perfectly and you can even send message here so yeah that being said let's go ahead and connect this to our front end all right come back to the red lit studio now what you want to do is go to your code section and this is where all the magic is at all right anyways let's go into your context and that's where all the magic is going to happen so we're gonna go ahead and get started we're gonna go ahead and get started by setting up a couple of States over here so as you can see we already have use account and all that kind of stuff imported so let's just extract the user address over here and let's just say that's going to be equal to whoa not that use account like that and let's go ahead and now have a message is just set messages just like that and another one is in user a press like that and those are perfect initial values now these are going to be our uh these are going to be our states so let's export them straight away so we're going to have messages and we're gonna have user address and if we go into your chat index file we already imported the context for you so what you can do is say what you can do is say messages oops messages equals use app context that way you can remove that dummy data and basically this file is ready to go and the app is going to be perfectly Dynamic the moment you start using it and the moment you start fetching stuff now the one thing though that I messed up is this address has to be like that you don't have to destructure it all right with that let's go ahead and set up all the contract connections so if you have another the CLI tool has already done all this for you but you might as well want to run it once again I don't know it's there if you want to and you can disregard all the import statements for now because once again the CLI tool took care of that so what you want to do is copy this line of code and just paste it like right here and what I like to do is just command X that guy out and then just say process Dot oops process.environment dot contract address like that and now what I will do is go ahead and create a dot dot env.local file and what that will allow me to do is I will be able to change the contract address super easily if later on I decide to update the contract so that's just a nice little touch and what you can also do is whenever we're going to deploy this whole application to digitalocean where you can have a local developer version on a test net and if you were to deploy it to the main net that can go to onto your digitalocean so that will connect to the I will connect to the mainnet that's so there's that will be our contract connection again if you've watched any of our previous builds where we custom built out everything this is like outrageously easy compared to that anyways so what we're going to do now is we're going to set up all the functions that that will read the messages and then the one that is going to send the messages so we're going to have two functions to do one get messages and that will be an async function and we're also going to have a send message that is once again going to be an async function and actually that will have an input like that so let's go ahead and get started with get messages now the only thing that never goes away is the try catch when when working with anything blockchain related so that keeps on being a thing now in your try catch now to make everything work we will set two more things up out here and that'll be your functions connections to the contract and once again ridiculously easy so copy that line under reading data and that guy over here so that guy and then paste it right there now we're gonna rename a few things over here just because uh just for an easier readability so it's going to be message messages date like that and we're gonna and we're also gonna rename his loading to messages loading there's going to be multiple loadings in here and I just don't want it to get confused and then for writing data we also want to copy that that bad boy and then just put it right underneath now we're going to rename muted async to message and is loading to set message send message loading so what this is what this does in a nutshell is this sets up the contract instance and these two will establish all the function connections so your app is going to prefetch everything and it will have everything ready to go and all of them is going to be ready and connected to third web so whenever you invoke it it's going to be much faster than how you would normally do it that's once again third it was too convenient at this point dang now what we'll do is inside of get get messages trial statement we'll make sure that if the messages are loading we not we don't try to like fetch the messages again because that just doesn't make sense I forgot the S there and whenever whenever all the messages are actually loaded we're gonna need to format them a little bit so we're going to have formatted messages and it will be messages data dot map so once again what's happening is everything is being fetched like straight away you don't have a choice it just happens and then here all you do is just format them so we grab each individual message and we'll return an address so it's going to be more easier to read and instead of that we're going to say is message dot user and then we're going to have the message itself it's going to message the message and we're going to have a time stamp that we're going to use moment js4 so we're going to say moment the Unix open close paren and now we're going to parse int we're going to generate a number out of a few things it's going to be mess message.timestamp like that and we're going to convert that to a string real quick and we'll format this to an hour minute oops hour minute Am Pm format so that's all it does and then the entire thing is going to be a Unix timestamp so we're going to be able to work with it later on in the app and then let's just update the state so send messages and formatted messages so that in theory should already fetch everything we have so let's connect let's connect our meta mask and you don't see anything so that's perfect that means there's nothing there like no messages in there all right now to be able to send messages we're gonna go in the send message function and we're going to have another try catch thing here so we'll catch air and open close brand once again so console log error like that and all we're going to do is we already destructured we're already got all the all the function connections so we're gonna use this function the message function and we're going to just say await message pass in message and you gotta make sure that it's going to be an array and so that is pretty much it now we'll need to export this bad boy so paste that there and now if you go in and now if you go into your chat input file we'll need to wait we'll need to go ahead and actually destructure this from the context so we got that there and then right here in the handle handle send message function you will be able to go ahead and say oh wait and send message and input now before we before before you send anything here what I want to do is just make sure that the input has to have some sort of value so if it's empty we don't want this function to run at all and basically that is it so let's go ahead and check this guy out let's see what do we got and so I'm just going to say yo this build is awesome and just in case there are any kind of Errors I just want to have my console open so we can debug everything quick and let's hit return on that it says message is not a function okay so maybe there is some sort of conflict between this message and that message so maybe let's rename this to a message text and paste that there let's see if that fixed our issue or not um just for like safety measures I'm just going to restart our app now I also want to make sure that whenever I load my app before anything I want to run a use effect that will basically fetch all the messages so it will run get messages and it will also update my users set user address and I just want to say address in there so that's perfect and I also want this to run every single time my wallet is actually changed so let's see what we got there's some sort of crazy thing going on there so that's not cool let's see what can we do about that also there is a there was a typo to burn this something is wrong with this use effect because it keeps firing things off for no reason okay yeah so if I comment that out it stops so apparently you actually do need to destructure account and that'll stop that random constant rendering so let's actually put those back around there and I also renamed them to account instead of address just because it's more descriptive so that should in theory now work so let's see what do we got so let's just type in something yo this is cool exclamation point all right it says contract must be defined what do we go what is the issue with contract though let's just say console log contract and I also have a hunch that this process environment situation is going to cause a lot of trouble so let's call console log that guy out too just for fun okay so the reason that's not being rendered out because the browser itself doesn't have access to contract address so what you want to do is just say next underscore public and that is going to be your new name so go into your EnV file and that's going to be your new name so once we're good there we can actually remove this and I'm pretty sure it's going to work after I restart this whole process and let's refresh all right this is dope oops I left a catalog on and there you go there is your meta mask popping up so that should be working now so let's confirm it let's see what do we got and how is it gonna work and now it says it's pending let's give it some more juice and there you go the message is sent now you will need to re reload this you will need to reload in this instance and for some reason okay it was just a little delayed but there you have it that is your app you can now go ahead and send messages using this interface and there you go just to prove it out this is yo how's it going have you subscribed yet and if you haven't what are you doing just go subscribe while I send this nice little message over here let's go ahead hit confirm on that bad boy as well let's wait for it a little bit and let's refresh let's see what do we got bam there you go now just before we wrap this up this is the time we go ahead and upload this and deploy this using digitalocean so let's do that all right let's set up everything for digitalocean there's a few key things that you need to set up before you can even get started so first of all you need to make sure that you have this line in here Pro it comes with the CLI tool but in the future you want to copy this over once this is done because digitalocean has a different way of processing images you have to go into your next config file and make sure that unoptimized is set to true I cannot emphasize this enough without that your entire deployment is going to fail and there's your 200 running out for no reason all right so those are the two preparations that we need to do now the other thing you can you need to do is we'll need to put this entire project onto a GitHub repo so what I'm going to do is just say rmrf because and Dot get and what that will essentially do is basically remove the current version management that we have going on right now that comes with the CLI tool now what I'm going to do now is go into my GitHub quick sign in right there fingerprint security key fingerprint that bad boy again and there's my GitHub nice little shout out go go ahead follow me because if you don't what are you doing all right I'm just gonna give it a repo name and it will be what's up live because we built this live together it's gonna be a public one because I don't care and now what I'm gonna do is just follow all this stuff so I'm going to say get in it in here oops get in it like that that initializes a new a new version control over there and then I'm going to say git remote at origin and then just copy whatever link you got there paste that guy right there so that technically connected the two two repositories together now what you want to do is say git add period not slash period like that that'll stage all the changes that are happening here which is a bunch and now what you want to do is say get commit Dash M and you can just type in whatever you want but I'm just gonna say little nice check mark and app is done exclamation point I messed something up there good commute there you go I don't know what happened there that seems pretty much the same oh you cannot do exclamation point apparently you should see a bunch of files like that and that means that you did good stuff there and it should go it should say zero out here and all that stuff now once it is done just say git push has no Upstream yada yada okay that's fine I'm gonna just go ahead and copy that it probably works bam there you go now if it went through well that it should technically show up on your GitHub and there it is my app is done right here perfect so once that is ready to go now I want you to go into your digital ocean platform in here you will need to go to apps as we did earlier and then you can just go ahead hit create or create app just right there in the middle and then you will need to enable GitHub access right here I can't seem to draw a circle around it there you go so manage access go right there and select the appropriate account you got hit our repository that doesn't really matter now we'll load a little bit and then you can go ahead and select which repository you will enable or which repository are we talking about and in this case it is WhatsApp live so I'm just gonna say WhatsApp Dash live right there and select that repo now if you remember there's a few folders here but the one that we want to deploy is inside of next app so that guy right there so you want to type in next Dash app right here make sure you have Auto deploy checked off and then you want to go with the main branch because that's the only one now hit next and then here in environment variables we'll go ahead and set the globals up so go ahead hit edit and go back into your EnV file copy the name of it put that there as key and then copy this value which is just your contract address paste hit save and if it says one environment variable you're good to go now hit next was a little too close hit next again review yada yada it will say that it will cost you twenty four dollars per month however forget you have 200 dollars so spend it now go ahead create resource and it will take a little bit of time to deploy it so if if you can see something like this like some random name that was given has been created and you're good and then now you can go into your build logs and watch it go live real time and there you go there's your app go ahead and now up here it will show up right there and if you click it I should bring it to Chrome or whatever it supports metamask let's go ahead and now connect connect and you're pretty much good to go so thank you so much for watching with that said see you in the next one
