With timestamps:

00:00 - do you want to master solidity do you
00:01 - want to finally understand it and wrap
00:03 - your brain around it well guess what we
00:05 - are going to build a to-do list app
00:08 - together in my opinion this is one of
00:10 - the best ways to learn how solidity
00:13 - works how smart contracts work is this
00:16 - app the scope is small it's a simple app
00:19 - yet it's very powerful and effective and
00:21 - it'll get you to understand how a lot of
00:24 - functionality and solidity works how can
00:26 - we use solidity along with truffle to
00:28 - make your smart contracts how do we add
00:31 - a task and delete a task and show all of
00:34 - the tasks how do we add a task so that
00:37 - it actually adds it on to the blockchain
00:41 - and when you get all the tasks your
00:43 - front end will go to your back end or
00:46 - your blockchain and get all the tasks
00:48 - from there this app will also have full
00:51 - on authentication built into it which
00:53 - essentially means that you'll be able to
00:55 - use metamask or any type of ethereum
00:58 - wallet and log in and log out and this
01:01 - app will only show you your tasks so any
01:05 - other users can't see your tasks and
01:08 - cannot delete your tasks so i think it's
01:11 - a very powerful app i hope that you're
01:12 - excited to use it and with that said
01:15 - let's um smash that like button so this
01:18 - video goes out to as many people as
01:19 - possible and in just a second we're
01:21 - gonna go ahead and demo this app also
01:24 - just real quick want to give a huge
01:26 - shout out to code with kavit who made
01:28 - the video to do app with react and
01:31 - solidity so huge shout out to that a lot
01:33 - of the inspiration comes from that i
01:35 - referenced the code from there okay but
01:38 - i just added in next.js
01:40 - a lot of our front-end completely custom
01:42 - front-end and we wanted to add in our
01:44 - own explanations so you could learn
01:45 - solidity step by step but if you want to
01:47 - check out also his video go check it out
01:49 - he's absolutely awesome with that said
01:51 - let's get back into the video
01:53 - now let's go ahead and demo the app so
01:55 - the first thing i'm going to do is i'm
01:57 - going to connect my wallet
01:59 - and you can see metamasks popped up over
02:01 - here on the right hand side i will
02:03 - select an account select whichever one
02:05 - you want
02:06 - and i will connect and boom look at that
02:10 - our app is up and running and it's like
02:12 - hey what's up kevin or causey or
02:15 - whatever your name is right we'll go
02:16 - there
02:17 - and now i can add tasks walk my dog at 1
02:21 - pm which is actually something i have to
02:24 - do
02:25 - and then hit this plus sign right here
02:27 - and watch this we're actually adding it
02:29 - to our blockchain so now metamask pops
02:32 - up to ask for authentication if we want
02:34 - to do this i will hit confirm
02:37 - and it has been added on to the
02:40 - blockchain
02:41 - and it is a actual task that is created
02:44 - let's go ahead and create another task
02:46 - i'm going to go ahead and eat my food at
02:49 - 5 pm
02:50 - okay
02:51 - let's go ahead and hit plus on here and
02:54 - now just watch what happens okay let's
02:56 - hit confirm
02:57 - there we go it has been confirmed the
03:00 - front end is looking pretty nice but the
03:02 - main point of this app is not the front
03:04 - end it's that you could actually using
03:06 - solidity add
03:08 - tasks and things to the blockchain and
03:10 - it will really clarify and make you
03:13 - understand a lot of things of how
03:15 - solidity works and how smart contracts
03:18 - really work
03:19 - now if i hit delete on here this icon
03:22 - right there
03:23 - you'll see it'll actually delete that so
03:25 - i'll hit delete
03:27 - and then let's wait a little bit and
03:28 - let's refresh and let's see if it's been
03:30 - removed okay boom i hit delete and now
03:34 - it actually asks me to make sure that
03:37 - it's confirmed and now once i confirm it
03:40 - okay
03:41 - you got to give it some time before it
03:43 - will actually just completely get rid of
03:45 - it because we are
03:47 - removing it we have to let the blo our
03:49 - back end on the blockchain side know
03:51 - that we're actually going to be getting
03:52 - rid of it and now it's basically gone
03:55 - and this is happening on the blockchain
03:57 - side so i'll show you how we're doing
03:59 - this on the blockchain side so you can
04:00 - understand
04:01 - and since it's a blockchain you're not
04:03 - technically completely deleting it but
04:05 - we're filtering it out on the block end
04:07 - and so you'll get to learn how to do
04:09 - that so
04:10 - this is the app
04:12 - i think it's really cool i think you can
04:13 - have a lot of fun building this with me
04:15 - with that said
04:17 - let's just start building this bad boy
04:18 - up now
04:19 - all right now make sure to click the
04:21 - link in the description below this is
04:23 - completely free
04:24 - and this is a template that i created
04:26 - for you solidity with the to-do list and
04:28 - it's going to have nextgs and tailwind
04:30 - css and all the front-end code
04:32 - essentially just ready because i would
04:34 - just give it away i would want you to
04:37 - simply focus on the web3 and the
04:39 - blockchain part so this rebel for you
04:42 - will have all of that code already there
04:45 - and then you can only work on the
04:47 - solidity part okay so
04:49 - make sure to go here and if you want to
04:51 - use this make sure to hit fork rebel
04:53 - because that's the only way you'll be
04:55 - able to code in here and use this
04:57 - template okay and the link will be below
05:00 - and it'll be join.replay.com
05:04 - slash cp dash solidity dash to do so you
05:08 - could type that in or just click the
05:09 - link in the description all right with
05:11 - that said i'm going to go ahead and fork
05:13 - this rupple
05:15 - and once i fork this
05:17 - it should bring you to a page like this
05:19 - and all this means now is you can
05:22 - actually code here and so the benefits
05:25 - of this rebel that i've sent you to
05:28 - is in this one you will have
05:31 - next.js already installed
05:33 - all right you'll have tailwind
05:36 - css already installed and configured
05:39 - all the front-end code
05:41 - is already completed so you won't really
05:43 - have to do any of the front-end code
05:46 - okay
05:46 - majority of the front-end code is
05:48 - complete okay let's not say all because
05:49 - there is still
05:51 - you're going to still need the right
05:52 - front end code that needs to interface
05:54 - with the back end okay
05:56 - so that's done
05:58 - truffle has been installed so truffle is
06:01 - i'll show you how to install it but i
06:02 - installed it already for you because it
06:04 - takes a really long time to install so
06:06 - i'm like hey i'd rather just have that
06:09 - process speed up okay this is done this
06:11 - is done
06:12 - most of this is done and then this is
06:15 - done okay so that's the real benefit of
06:18 - this rebel that you're actually looking
06:20 - at all right so let's get started with
06:23 - that said what i'm gonna do now is i'm
06:25 - gonna walk you through majority of the
06:27 - code okay
06:29 - what's there so far and what you should
06:31 - find in here okay so you should find a
06:33 - client folder
06:35 - and that should have all of your
06:36 - front-end code okay so i'm going to walk
06:38 - you through that a little bit and then
06:40 - i'm going to walk you through some other
06:41 - stuff but first just make sure in your
06:43 - package manager all i want you to do is
06:45 - install truffle so you can type in
06:47 - truffle and normally what would happen
06:49 - is you'd have a plus sign here to
06:51 - install it you don't right now like a
06:53 - plus sign like this you don't right now
06:55 - because already installed
06:57 - okay so that's already done
07:00 - so let's go here the next thing i want
07:01 - to show you is in your client front end
07:04 - in your package json you're going to
07:06 - need
07:07 - access to some libraries like react
07:09 - icons or next or some tailwind stuff
07:13 - that's already there for you okay so you
07:16 - don't have to install it you could yarn
07:19 - it but you don't even need to do that
07:20 - because like the node modules are
07:21 - already there as well so
07:24 - you should be good to go on that end so
07:26 - react icons you already have it then
07:28 - auto prefix for post css until when css
07:31 - because these are all the things you
07:32 - need for css
07:33 - this the tailwind files you need for
07:37 - so yeah your tailwind is ready to go
07:39 - cool so that was one thing i had to
07:41 - explain to you
07:42 - now let's walk through the actual app so
07:46 - let's first take a look at it so you
07:47 - should be able to cd right now into your
07:50 - app into client
07:52 - and then just do yarn dev and that
07:55 - should start running your app so let's
07:58 - take a look
07:59 - you can also open it in a new tab if you
08:01 - want to just
08:02 - fully see it it takes a second to just
08:05 - be a little bit patient and there you go
08:07 - your app is
08:08 - up and running okay you can zoom out if
08:11 - you want i'm going to zoom in because
08:13 - i'm on a big screen so i want you to see
08:14 - this
08:15 - and right now writing on your app will
08:18 - not work because that's the back end
08:20 - part and you haven't added any back end
08:22 - code so really nothing is going to
08:23 - happen okay it's just gonna refresh and
08:26 - that's it yeah right now there's no
08:28 - front end so whatever you do nothing is
08:30 - really gonna happen but you have the nav
08:32 - bar right here you have the entire to-do
08:34 - list app
08:36 - you have this to do thing and then you
08:37 - have this plus button right over here so
08:39 - that's
08:40 - mainly the front end right now
08:42 - so let's go back
08:44 - and what i want to show you is these are
08:47 - all the components that
08:49 - i've already created for you okay so
08:52 - the connect wallet button nav bar
08:55 - all of those are there okay so navbar
08:58 - task to-do list
09:00 - so
09:01 - those are already
09:03 - there for you okay connect wallet button
09:06 - and wrong network message now
09:08 - some of this stuff you're probably like
09:10 - okay
09:11 - how do i see the wrong network message
09:13 - or connect wallet button because i don't
09:14 - see them right now so here's how you can
09:16 - see them so let's go into our index
09:18 - this is the main file where everything
09:21 - is happening
09:22 - these are all the nodes for the app but
09:24 - i'm going to just walk you through them
09:25 - together so we won't need them so i'm
09:28 - going to get rid of them okay
09:30 - and let me just walk you through the
09:33 - entire code base okay so let's put that
09:36 - here and let's just walk through the
09:37 - entire code base now all right so we're
09:40 - importing some of the components that we
09:42 - had made but here's what i want you to
09:44 - actually see
09:45 - all right the main part of the logic so
09:47 - these are functions that are just going
09:48 - to be empty all right these are
09:50 - functions you're going to have to
09:53 - complete these are
09:54 - the back end functions so connecting the
09:57 - wallet being able to get all the tasks
09:59 - from the back end being able to add a
10:01 - task to the back end and being able to
10:04 - delete a task from the back end so this
10:07 - is all backend related okay all three of
10:09 - these functions so when i say backend in
10:11 - this case it's the blockchain part
10:14 - this connect wallet function is going to
10:16 - just simply be connecting wallet to
10:18 - metamask to any type of ethereum erc20
10:21 - wallet whatever
10:23 - all right
10:24 - so those are the ones that we're gonna
10:25 - work on
10:26 - and this is the other main part that i
10:29 - have already handed over to you so this
10:32 - over here this div there's not much to
10:34 - really worried about here but this is
10:36 - really styling it if i get rid of all of
10:39 - the styling here it's just going to look
10:42 - like out of whack right so that's just a
10:44 - wrapper that's all that's doing so i'm
10:46 - going to bring that back and they'll
10:47 - just contain the app put it in the
10:49 - middle add a color in the background
10:51 - centralize things
10:52 - so that's what that's doing okay so now
10:54 - you can even pretty much
10:56 - not really worry too much about
10:59 - this piece of code this piece of code
11:01 - the main piece of code that i want you
11:03 - to focus on now and worry about is this
11:06 - guy right over here
11:08 - okay and that's really the main logic of
11:10 - the app so far which is hey check if the
11:13 - user is logged in
11:14 - and if they're not logged in show them
11:16 - the connect wallet button okay so here i
11:19 - can make a user
11:21 - be let's just fake a not logged in user
11:24 - and what that would look like how we can
11:26 - do that is just remove that boolean that
11:28 - exclamation mark let's remove that
11:30 - exclamation mark so it just says is user
11:32 - not logged in so now
11:34 - it is true that the user is not logged
11:36 - in okay and if that's the case then show
11:39 - the connect wallet button so that's why
11:41 - it's showing that button right there and
11:44 - now we the other situation we have is
11:47 - hey is this the correct network okay so
11:50 - basically if the user
11:52 - if we go back to the other situation
11:54 - okay which is the user is this basically
11:57 - says the user is currently logged in
11:59 - okay because there's a double negation
12:01 - here negation here so it just means the
12:02 - user is logged in so the user is logged
12:04 - in
12:05 - we bypass this component we don't do
12:07 - this
12:08 - we do the else statement okay so this is
12:12 - our else statement so if the user is
12:14 - logged in then we want you to ask one
12:16 - more question is this the correct
12:18 - network if we're on the correct network
12:21 - which in this case is going to be the
12:22 - rankinby test network
12:24 - then show the to-do list so then show
12:26 - this
12:27 - but if we're not on the correct network
12:29 - so i can
12:31 - mimic that as well by just adding
12:32 - exclamation mark here and saying we're
12:34 - on the wrong network so if we're on the
12:37 - wrong network
12:38 - then it's going to not render the to-do
12:41 - list but render the wrong network
12:44 - message component and this is a pretty
12:47 - simple component there's not much going
12:49 - on here it just says please connect to
12:50 - the ring could be test net and reload
12:52 - the page so this means you tried to
12:54 - connect to
12:55 - some other
12:56 - network like raspin or something else
13:00 - so
13:01 - that's what's happening there right if
13:03 - the user is
13:05 - not logged in
13:06 - and this is not the correct network
13:09 - then show the wrong network message okay
13:12 - so those are the three components
13:14 - and you can toggle them really easily by
13:16 - just removing if i remove both of these
13:19 - right then it means the user is not
13:20 - logged in and they'll show us the
13:22 - connect wallet button if the user is
13:24 - logged in
13:25 - then it'll show us and it's the correct
13:28 - network then it'll show us to-do lists
13:29 - and the to-do list pops up so just play
13:31 - around with that so you can just
13:32 - understand the logic that's happening
13:34 - here okay because that's the really kind
13:36 - of important part
13:38 - and then of course we're going to make
13:40 - this more dynamic because right now this
13:42 - is just hard coded here but we're going
13:44 - to actually get access to the user using
13:47 - their ethereum wallet so you're going to
13:48 - need to complete the connect wallet
13:50 - function for that okay
13:52 - and then you'll be able to actually keep
13:54 - track of the logged in user
13:56 - and then where it says is this the
13:58 - correct network
13:59 - same thing it's you're just going to
14:01 - pull that information from connect
14:02 - wallet
14:03 - and your connect wall will be able to
14:05 - tell you
14:06 - if this is on ring could be the user
14:09 - logged in or the user logged in
14:10 - somewhere else okay so the connect
14:12 - wallet function
14:13 - will take care of both of these states
14:16 - that you need to be really tracking okay
14:18 - these are also going to be states right
14:20 - or so we're going to be using a little
14:22 - bit of react for that
14:24 - so for now what we're going to do is
14:26 - we're going to go ahead and tackle
14:28 - really the most difficult part first
14:30 - which is we're going to be
14:32 - going ahead and making our smart
14:35 - contract first because really majority
14:37 - of this code like especially all these
14:39 - parts right here they're really going to
14:41 - depend on what your back end is like aka
14:44 - what your smart contract is like because
14:47 - here you it's like imagine writing code
14:49 - without knowing what your api is going
14:51 - to look like everything you're going to
14:52 - write is going to be wrong so we're
14:54 - going to make our back end first and the
14:56 - api or whatever first
14:58 - and then from the front end we'll simply
15:00 - just interface with it
15:02 - okay so i hope that
15:04 - gives you a lot more clarity
15:06 - of what we're doing
15:07 - and now we're gonna go ahead and do that
15:11 - okay so let's go and create a back end
15:14 - now so this is our front end okay this
15:16 - is our client front end we're going to
15:18 - create a new folder okay at the global
15:21 - level i'm going to hit folder
15:23 - and make sure it's not inside of client
15:25 - make sure it's outside of client
15:27 - and this folder we're going to just call
15:29 - it our back end or the blockchain part
15:31 - okay
15:32 - and we're going to go ahead into our
15:34 - command line and we're just going to cd
15:36 - into that so hit ctrl c to end hit cd
15:40 - dot dot so you can actually get out of
15:42 - it and now we're gonna go
15:44 - cd
15:45 - back end okay
15:47 - and now if you're in your back end now
15:49 - we're gonna go ahead and say truffle
15:51 - init
15:52 - okay so just type in truffle in it all
15:54 - right so once you do truffle init
15:57 - if you look in your back end you already
15:58 - you have files now so you have truffle
16:00 - config you have a test file in
16:03 - migrations contracts
16:04 - another reason why i'm doing this on
16:07 - replit is you don't have to worry about
16:10 - this installation nightmare that often
16:12 - happens while you're coding along on a
16:14 - mac or a linux or a windows and
16:17 - you can't get a solidity thing to
16:19 - install or a truffle thing to install or
16:21 - next install so everything is already
16:23 - installed in there for you okay so just
16:25 - make sure that you've forked the correct
16:27 - template and again it's in the
16:29 - description if you missed out on that
16:30 - earlier
16:31 - all right so i've done truffle in it now
16:34 - my like template project is ready to go
16:38 - now we're gonna basically go ahead and
16:40 - create a smart contract so this line
16:42 - over here that says
16:44 - truffle
16:46 - create contract your contract name we're
16:49 - gonna go ahead and
16:50 - use that command to create our new
16:52 - contract okay and that's gonna create a
16:55 - scaffold of a contract so just like bare
16:57 - bones contracts i'm gonna go ahead and
16:58 - say truffle
16:59 - create contract and then we're gonna go
17:02 - your and sorry not your but we're gonna
17:04 - say task contract okay because we're
17:07 - gonna make a contract for our tasks so
17:10 - essentially we're getting a back end for
17:11 - our tasks
17:12 - all right let's do that okay so this
17:15 - contract will allow you to
17:17 - create a task and add a task and show
17:20 - tasks and filter tasks it's going to be
17:21 - all task related now if i look inside of
17:24 - my contracts
17:26 - i will see task contract dot sol okay
17:30 - so let's go inside of here
17:32 - and now it's going to be the really
17:34 - meaty fun part because we're actually
17:36 - just going to be writing a lot of
17:39 - our
17:39 - logic here for our code okay so this is
17:42 - going to be all of our backend logic so
17:44 - it's going to be actually a really
17:45 - important part
17:46 - great let's walk through everything step
17:48 - by step because especially if you're new
17:50 - to solidity i just want to make sure
17:52 - that you understand every possible thing
17:54 - okay so i'm going to zoom in so
17:56 - everything is super nice and clear
17:58 - all right first thing right here this is
18:00 - oftentimes you will see it in solidity
18:02 - just add in some kind of license okay so
18:04 - just you can copy paste this exact one
18:07 - right should be there already now the
18:10 - solidity version that we want is a
18:12 - specific version in this case and i want
18:15 - 0.8.15 okay this is a version that i
18:18 - want
18:18 - every single line of solidity that you
18:20 - end you have to end it with a semicolon
18:22 - if you don't you will get an error or
18:25 - your app will break okay so that's
18:26 - important and
18:28 - here whenever you're actually writing a
18:30 - solidity file you pretty much always
18:32 - have to do contract task contracts so
18:35 - imagine like this is function or a
18:37 - component past contract but it's
18:39 - literally just a contract and then this
18:42 - constructor we don't need it so we can
18:44 - actually get rid of that constructor
18:46 - okay
18:47 - in here we're gonna have two events so
18:49 - i'm gonna have an add task event
18:52 - and it's going to take in a so let me
18:55 - write it like regular javascript first
18:57 - so it's going to take in a recipient
19:00 - and it's going to take in a task id okay
19:04 - so this is how you might write something
19:06 - in javascript or you're like okay i'm
19:07 - creating a function or whatever and this
19:10 - function takes called it's called at
19:12 - task and it takes in two parameters
19:14 - recipient and task id except in solidity
19:17 - you have to say those their types so
19:19 - recipient will be a type address
19:22 - okay so those wallet addresses
19:25 - like
19:26 - whatever the wallet address is like
19:28 - those are specific types and solidity
19:30 - and you refer to them as address and
19:32 - then task id is going to be an an
19:34 - unsigned integer okay so we will say ooh
19:37 - ins you int and then we're also going to
19:39 - need an event for delete task okay and
19:42 - delete task is going to ask for a task
19:44 - id and it's going to ask for
19:46 - hey if it's deleted or not the task is
19:48 - deleted or not okay and
19:51 - task id is gonna be a uint okay
19:54 - and then this is going to be can you
19:56 - guess if something is a true or false
19:58 - what data type is that if you guess bool
20:00 - good job okay so that's gonna be a
20:02 - boolean all right
20:04 - now
20:05 - we're going to create
20:07 - a data type that's going to represent
20:09 - the following structure so
20:11 - let's go into our index file and i just
20:13 - want to kind of show this to you
20:15 - in index
20:17 - our tasks will have the following
20:19 - structure so this is an array of tasks
20:22 - but this is an object or in in solidity
20:26 - you might call this a map or a struct
20:29 - this is this right over here okay is an
20:32 - object here right javascript this is
20:34 - what one task will look like it'll have
20:36 - an id
20:38 - text
20:39 - and whether it's deleted or not okay so
20:42 - that's what one task looks like so if i
20:44 - go ahead and i go back to my task
20:47 - contract you could do command p for what
20:49 - i did and then just type in task
20:50 - contract okay so we're gonna now create
20:53 - a structure that mimics
20:56 - what we saw so i'm gonna go ahead and do
20:58 - struct
20:59 - and task
21:01 - and this structure is just going to say
21:03 - hey it's going to take these are the
21:06 - keys okay so we're going to have an id
21:09 - we're going to have task text
21:11 - and we're going to have is deleted okay
21:14 - and the last thing you want to tell the
21:15 - struct is what are the data types of
21:18 - each of these
21:19 - so for id my data type is a uint for
21:23 - tasks text is going to be type string
21:25 - and for is deleted it's going to be a
21:27 - boolean okay
21:29 - so
21:30 - in solidity if you want to create let's
21:33 - say something with an object right if
21:35 - you want to create a task
21:36 - like if i go back to this task right
21:39 - here if i want to create a task like
21:41 - this so let's copy this and let's come
21:44 - back into our task contract and let's
21:46 - paste it if i want to create a task like
21:48 - that
21:49 - i can use a struct to create that exact
21:51 - task so i can go task
21:53 - and then let's say i pass it a 1
21:56 - i pass it clean and let's say i pass it
22:00 - false
22:01 - sorry zero
22:03 - it's going to create that exact task so
22:05 - this is gonna return and turn into an
22:08 - object okay so it's almost like you're
22:10 - calling a function or whatever okay it's
22:12 - a constructor it's a task
22:14 - and then it'll spit back out that okay
22:17 - so that's how that's why you need
22:19 - structs and
22:21 - when you use a struct you will get back
22:23 - what we call an object in javascript
22:26 - okay this is just to give you a little
22:28 - reference okay so i'll
22:29 - leave that reference up here
22:32 - and this is a task okay this is what a
22:35 - task will look like
22:36 - okay great so we have our task struct
22:40 - and now what we want to do is we want to
22:42 - have an array
22:44 - that is filled with tasks
22:47 - so
22:47 - when you're creating that you're going
22:49 - to basically say hey i want to create an
22:51 - error so let's just do it this way okay
22:53 - so i want to create an array called
22:55 - tasks in javascript you would just do
22:58 - this
22:58 - but here this is not javascript right so
23:01 - i want an array called tasks
23:04 - now what i want it to be is
23:06 - i want it to be of
23:09 - i want it to be an array
23:10 - okay
23:11 - and it's gonna have it's gonna be an
23:14 - array and it's going to be filled with
23:18 - these objects
23:19 - okay so if you try to put integers into
23:22 - this array tasks so for example let's
23:24 - just say you try to do tasks dot push so
23:27 - let's say you have this variable tasks
23:29 - available to you now okay and let's say
23:31 - tasks is an array now if you try to do
23:35 - task stop push and put a 1 it's going to
23:38 - go
23:39 - it's going to give you an error because
23:40 - it's going to say hey
23:42 - that's not the type that you told me the
23:43 - type that you told me is going to
23:46 - this is the type this is what it should
23:48 - look like
23:49 - but now if you actually put
23:51 - let's say something that looks like this
23:52 - in here
23:53 - if you try to push this it's going to
23:55 - accept it it's going to go yes
23:57 - this exact thing okay this is an integer
24:01 - this is a
24:02 - string for task as a boolean yes i will
24:06 - accept it and it will add it okay so
24:08 - you're creating these strict types so
24:10 - it's like typescript if you've ever used
24:12 - it and then we're just gonna say this is
24:14 - private meaning that anybody outside of
24:17 - this function
24:18 - should not have access to it okay
24:21 - and then we're going to create a mapping
24:23 - which is going to be helpful for task to
24:25 - owner so we'll say mapping and i'll say
24:28 - you ins 256
24:31 - address
24:33 - task to owner
24:35 - so
24:36 - i know this is probably like what the
24:38 - heck is this
24:39 - all this part means so this part right
24:41 - over here just a variable okay we're
24:43 - just saying
24:44 - hey crea initialize a variable called
24:46 - tasks to owner
24:47 - and the type that it's going to have is
24:49 - this
24:50 - and all this means that anytime you
24:52 - create
24:53 - task to owner
24:54 - you're going to have an object that
24:55 - looks like the following
24:57 - the key
24:58 - this represents this part right here
25:01 - represents a key right over here
25:04 - represents an address
25:07 - okay
25:08 - obviously and an address might look like
25:11 - those wallet addresses might look like
25:13 - that okay
25:14 - so here let's just say that this is the
25:17 - wallet address of qazi which is me
25:20 - okay and then we go
25:22 - boom all right
25:24 - task to owner and then
25:26 - boom we will have another task like this
25:29 - oh not in the same thing but let's just
25:31 - say we have another task
25:33 - and this is task one
25:35 - and this is david okay so how this will
25:38 - work
25:39 - is imagine this you have two tables okay
25:43 - and on the left hand side we have a
25:44 - table called
25:46 - tasks and then a right hand side we have
25:48 - a table called owners
25:50 - okay
25:51 - and just say walk to dog might be a task
25:55 - and then here on the right hand side for
25:57 - owners
25:58 - you have all the owners like qazi
26:00 - whatever
26:01 - but the way that we're storing it is in
26:03 - the following way so we're giving this
26:05 - task an id of zero
26:08 - so we're gonna set the task id
26:10 - here is
26:12 - zero walk the dog
26:14 - and inside of owners we're gonna say the
26:16 - id of zero belongs to let's say kazi
26:20 - and almost like in sql this will allow
26:22 - us to do an inner join and match all
26:24 - these tasks so this way the app will
26:26 - have proper authentication and it'll
26:28 - show me only my
26:30 - tasks not somebody else's for example if
26:32 - for one we had
26:34 - clean dishes
26:36 - but that was like david created that
26:38 - then this would basically say
26:41 - hey this was created by david okay
26:44 - so then when qazi logs in qazi will only
26:47 - see walk the dog and when david walks in
26:49 - he will only see
26:51 - clean the dishes okay
26:53 - so the id
26:55 - inside of the task and
26:58 - this id this key over here
27:02 - these are the two pieces of the puzzle
27:04 - that allow us to do an inner join
27:07 - and find
27:08 - the who the tasks belongs to so this is
27:12 - a structure this is what mapping blah
27:14 - blah blah whatever is okay this is what
27:16 - it'll look like so i'll get rid of that
27:17 - for now okay cool now next up we're
27:21 - going to create a function
27:23 - and this function we'll call it add task
27:26 - all right let's keep on rocking and
27:28 - rolling here so our add task function
27:30 - that we're going to make is going to
27:32 - take in a task text and it's going to
27:35 - take in is deleted okay
27:38 - so
27:38 - here's what i want you to imagine right
27:40 - now
27:41 - this function that we're actually
27:42 - creating here right now we can actually
27:44 - call this function
27:46 - from our front end okay so imagine that
27:48 - we're going to be calling this from our
27:49 - front end at some point
27:51 - and how we're going to be calling this
27:52 - from front end at some point is going to
27:54 - look like this from our front end we're
27:56 - going to
27:56 - do task contract
27:59 - dot
27:59 - add task function and then from our
28:03 - react slash
28:05 - next.js code
28:07 - we're going to pass in a text like
28:10 - walk the dog
28:11 - and then we're going to pass in
28:14 - is deleted as false or true so we're
28:16 - going to let's say pass in like this is
28:17 - not currently deleted this is so deleted
28:20 - is deleted as false
28:21 - so this is
28:23 - add task function or method or whatever
28:25 - you want to call it that we are creating
28:28 - that we can interact with eventually
28:30 - from our front end not right this second
28:32 - okay so that's what we're writing just
28:34 - keep that in mind all right
28:36 - now since this is solidity we have to
28:38 - tell it what types these are so task
28:40 - text
28:41 - this is this string and when you do
28:43 - string you sometimes have to write
28:45 - memory there so
28:46 - we'll just write that and then this one
28:49 - is a bool
28:50 - okay so that's what that is
28:53 - all right so we're done with that part
28:55 - now
28:56 - what we want to do is we want to
28:58 - basically say that this function is
29:00 - external so we have access to it from
29:02 - outside of this too
29:04 - and external basically means that this
29:06 - function
29:07 - isn't really doing isn't really
29:10 - returning anything in this case okay
29:12 - so
29:13 - we're gonna go ahead and say
29:15 - we're gonna create task id
29:17 - and what will task id be so think about
29:19 - it like this okay say you have an array
29:21 - of tasks so you have an array of tasks
29:24 - and that array looks like this
29:26 - like this
29:28 - filled with these tasks okay so we got
29:30 - task one
29:32 - we got task two
29:34 - task three
29:35 - what we wanna do is we wanna generate
29:37 - task ids here
29:39 - right and we want to generate preferably
29:42 - a unique task id most of the times and
29:46 - we also want to just make it simple like
29:48 - the first one should be zero the next
29:49 - one should be one the next one should be
29:51 - two so on and so forth it's easy what we
29:53 - could do is say that this array is
29:56 - called tasks what we could do is we
29:58 - could just say when we're creating this
30:00 - task
30:01 - we could just for the id
30:03 - we could just say hey grab the tasks and
30:06 - grab its dot length
30:08 - so if i get this task's length well i
30:10 - get zero
30:12 - well when i get
30:14 - this task's length the second time i get
30:16 - one when i get the tasks length the
30:19 - third time what do i get
30:21 - hopefully you guessed it okay
30:22 - you get a 2 right
30:24 - simple we're just going to say it's
30:26 - going to be tasks.length
30:28 - okay and we're pulling the tasks from
30:30 - there
30:30 - make sure to put a semicolon so it
30:33 - doesn't error out
30:34 - next up what we're gonna do
30:36 - is whatever task the user passed in we
30:39 - need to append that to our tasks
30:42 - array ray that's made up of these task
30:44 - objects okay so i'm gonna say tasks dot
30:48 - push and now we're going to create that
30:52 - object
30:53 - so i'm going to say task constructor
30:55 - then give it the task id
30:58 - that we just created right there
31:00 - we're going to give it the task text and
31:02 - then the is deleted
31:04 - task text
31:06 - and is deleted
31:07 - so this will push it on
31:09 - and basically what this is doing is this
31:12 - right here
31:13 - will basically get simplified
31:15 - to that
31:17 - right there okay one task is going to
31:19 - create one object one map
31:22 - all right next up we need to
31:24 - set up that database of tasks to owners
31:27 - to create that relationship so i'm going
31:29 - to say task
31:31 - to owner
31:32 - okay and i'm going to give it a task id
31:35 - for task to owner so remember this
31:37 - variable that we made tasks to owner
31:39 - and so
31:40 - it's going to take a u int
31:42 - right and the uint in this case
31:45 - will be zero for this task for the next
31:48 - tax is going to be one for the next task
31:51 - is going to be two and this over here
31:53 - needs to be whoever the user is okay so
31:57 - user
31:58 - is gonna go right there okay the logged
32:01 - in user
32:02 - in this case we're just gonna say
32:03 - message.sender this is a special thing
32:06 - in solidity msg message and then if you
32:09 - do dot sender it'll get the wallet
32:11 - address of whoever was currently logged
32:13 - in let's put a semicolon here let's put
32:16 - a semicolon
32:18 - here okay and then we can even emit this
32:20 - so we can submit
32:22 - add task
32:23 - and i can say message sender and then
32:25 - give it a task id remember we created
32:28 - this event at task
32:30 - and now we can admit it but we just need
32:32 - to give it an address for the recipient
32:34 - so this is the recipient
32:36 - and then this is the task id
32:38 - right giving it that task id perfect so
32:42 - in terms of the add task function our
32:44 - add task function at this point is
32:46 - complete i'm going to remove these tasks
32:48 - at the bottom or i can leave it and just
32:50 - comment it out
32:52 - all right
32:52 - the next function that we need to add is
32:56 - our
32:57 - get tasks function okay or get my tasks
33:01 - function so let's go ahead and do that
33:03 - so i'm going to say function
33:05 - we'll say get my tasks
33:08 - and we're going to say external view
33:10 - returns and we can even say what this
33:13 - will return and this will return a task
33:16 - like object
33:18 - okay
33:19 - and now let's open this function up and
33:21 - start writing
33:22 - okay so we're going to create a variable
33:24 - called temporary okay and so temporary
33:27 - is just going to be an array and what we
33:29 - want to do is we want to keep pushing
33:32 - new tasks to it
33:34 - that are of that owner
33:36 - okay
33:37 - so temporary will filter for the owner
33:40 - and for non-deleted tasks okay so get my
33:43 - tasks we want to do is we want to
33:46 - get tasks
33:47 - that
33:48 - let's say
33:50 - that have
33:51 - that are mine and not yet deleted okay
33:55 - so temporary okay and it's gonna give a
33:58 - new task like object we'll instantiate
34:01 - it like this okay and this array that we
34:04 - want so temporary is going to be an
34:06 - array and this array that we want so in
34:08 - solidity you could give a
34:10 - size of the array so if i said array of
34:13 - let's just say 2 or whatever or 2 right
34:15 - here then what will happen is i will get
34:18 - an array of size
34:20 - 2 and no bigger like it can't go bigger
34:23 - than size 2. it has a fixed amount of
34:24 - slots and so what i'm going to just say
34:26 - here is tasks.length
34:28 - why because i want this array
34:31 - to be
34:33 - obviously no longer than there are tasks
34:35 - that wouldn't make sense
34:36 - and this temporary here
34:39 - it's going to be
34:41 - this
34:42 - it's going to be an array of these
34:45 - these tasks
34:46 - okay and we're just gonna say memory
34:48 - perfect okay and let's put a semicolon
34:51 - there let's put a semicolon here if you
34:54 - miss any semicolons it will break so
34:56 - just keep making sure to put semicolons
34:57 - everywhere
34:58 - all right now we're gonna set up a
35:00 - counter that i'm going to set to 0
35:03 - and then we're going to write
35:05 - loop through this and so i'm going to
35:06 - say
35:08 - for u int i equals 0
35:11 - while
35:12 - i tasks dot length okay i plus why are
35:15 - we doing this we're gonna loop through
35:17 - all of our tasks
35:18 - and then we're just gonna keep adding
35:20 - them to temporary and we're gonna do a
35:23 - check here so i'm gonna say if task to
35:25 - owner
35:26 - of that specific task
35:29 - is equal to the messages sender meaning
35:32 - if this is my task so let's say that
35:36 - there is a task owner that has a key of
35:40 - zero right and so if we
35:42 - look at that and we go and get the key
35:44 - of zero and we go okay the task is
35:46 - whatever
35:47 - if
35:48 - this is going to turn it into its value
35:50 - is going to be an address and if that
35:53 - address of that task
35:55 - matches the address of who's logged in
35:58 - then that means this is these are my
36:00 - tasks okay
36:02 - and we're gonna add in one more check
36:04 - and we're going to say hey check if
36:07 - tasks is deleted
36:10 - is false so making sure giving me tasks
36:13 - that are not yet deleted let me zoom out
36:15 - just a little bit
36:16 - so give me tasks that are not deleted
36:19 - okay
36:20 - so if this is the case what i want you
36:22 - to do
36:23 - is
36:24 - set that task in that specific position
36:27 - this is just a way of writing a push
36:29 - okay this is just another way of writing
36:30 - a push i want you to get used to it
36:32 - because in solidity this is like pretty
36:34 - common people do it like this or you're
36:37 - just really basically saying in the
36:39 - zeroth position place this in the first
36:42 - position of that temporary array place
36:45 - this so if you imagine
36:47 - temporary is an array of size two so
36:50 - let's just say it's empty empty right
36:52 - now what this is saying is hey go to
36:54 - position zero so this is position zero
36:57 - and then set that to that specific task
37:00 - so tasks text hello
37:02 - is deleted
37:04 - false whatever so add that task there
37:07 - and then go again loop again and then if
37:09 - you find my task again that's also not
37:12 - deleted at that here okay so that's
37:14 - what's
37:15 - temporary is
37:17 - and then we just increment the counter
37:19 - by one so we will do counter plus okay
37:22 - so let's get out of this
37:24 - and then all we're gonna do is we're
37:27 - just going to spit it out in something
37:29 - called result
37:30 - and result is going to be the length of
37:32 - the counter
37:34 - not the length of the entire array so
37:36 - result is just going to be so if my
37:39 - tasks were 2
37:41 - and the total tasks were maybe 10 then
37:44 - this result is only going to be of size
37:46 - 2.
37:47 - and we'll loop through this so i will
37:49 - say i is equal to zero
37:51 - i is less than counter i plus
37:55 - and then i'm just going to say for
37:56 - result of i just set it to be of
37:59 - whatever is in temporary of i
38:01 - okay and then
38:03 - at the end we're simply just gonna go
38:05 - ahead and return
38:07 - result okay so
38:09 - that's my function
38:11 - here's my loop then i do my loop again
38:13 - and then i return my result okay so
38:16 - that's what's happening there just make
38:17 - sure to put semicolons in all the right
38:19 - places don't miss any semicolons i'm
38:22 - gonna call this on my colon
38:23 - okay great
38:24 - so we're good with
38:26 - get my tasks okay the next one that
38:29 - we're gonna work on is add task where
38:32 - does the whole tract end so let's see
38:34 - contract ends right there
38:37 - okay cool let's go here
38:39 - and we're going to go ahead and say
38:40 - function
38:41 - and it's going to be a new function
38:42 - we're going to make and this function is
38:45 - only going to be for deleting tasks
38:47 - because we already have a way to add the
38:49 - task we already have a way to get our
38:51 - tasks now all we need to do is be able
38:54 - to delete tasks
38:56 - okay so i'm going to go ahead and say
38:58 - task id is delete task wants a task id
39:02 - it also wants is deleted
39:04 - or not okay so we can just say bool
39:07 - and just make it external great
39:10 - now i'm going to say if the task to
39:13 - owner
39:14 - so it's basically if it's
39:16 - if i am authenticated to be viewing this
39:19 - or doing stuff with it
39:21 - so this is my task
39:23 - that was given
39:25 - then what i want you to do is
39:27 - get that task id and set its
39:30 - is deleted
39:32 - to be
39:33 - is deleted whatever it was passed in
39:35 - which you honestly don't even have to be
39:38 - past this it should just be set to false
39:39 - but like you could do it like this as
39:41 - well that's fine
39:43 - you can set it to true i'm sorry true so
39:45 - just okay it's deleted as true
39:47 - and then we just emit the events okay
39:50 - this is not completely necessary but you
39:52 - could do this
39:53 - now basically just so you can visualize
39:55 - what's happening is from the front end
39:58 - how we're going to call any of these
40:00 - functions from the front end
40:02 - we want to be able to just do
40:05 - task contract that delete task
40:08 - and then we give it a task so we give it
40:10 - like an id so we give it zero i'm just
40:12 - mapping this to that
40:15 - and then we give it this so we just go
40:17 - true so that just means hey i am
40:20 - confirming that i want to delete this
40:22 - specific task and i'm saying zero comma
40:25 - true
40:26 - and then it will confirm and then delete
40:28 - that task okay but realistically all
40:31 - we're doing is we're not
40:33 - really deleting tasks all we're doing is
40:35 - setting its deleted value to true
40:38 - and then in our get my tasks
40:41 - we're just filtering for it we're just
40:44 - really there's just a filter okay and
40:46 - that filter all it does is
40:48 - it just doesn't show you
40:50 - anything that has the deleted value set
40:53 - to true okay so
40:55 - filter is filtering is happening here
40:58 - specifically
40:59 - okay make sure it's not deleted is what
41:01 - that line is saying
41:03 - and then here we're just marking so
41:05 - think of it like we're just labeling it
41:08 - as deleted and then we're just filtering
41:10 - it because on the blockchain you can't
41:12 - really delete anything all right cool
41:14 - and then now we can get rid of this so
41:16 - with that said
41:17 - our smart contract part that we wanted
41:20 - to write our smart contract is done all
41:22 - right so if you've gone here really good
41:25 - job
41:26 - awesome job
41:27 - and now we're gonna go ahead and move
41:28 - forward
41:29 - okay now we're almost ready to interact
41:32 - with it from the front end
41:35 - we're very close but not completely
41:37 - there yet
41:39 - so what we have to do is get it ready to
41:41 - be interacted with from the front end so
41:44 - we'll need
41:45 - really two things we'll need a contract
41:48 - address
41:49 - a deployed contract address we need to
41:52 - deploy this okay so that means almost
41:54 - imagine like deploying it to the web and
41:56 - then you can access it from your front
41:58 - end okay or you're deploying it
42:00 - then the second thing we need is access
42:02 - to a which
42:03 - if i want to make your life really
42:05 - simple it's literally just an ape that
42:08 - will allow you to use all these methods
42:10 - okay so we need this
42:12 - and we need abi okay now luckily for us
42:17 - gets created pretty easily in the back
42:19 - end okay i'll show you where that gets
42:22 - created once we
42:23 - go ahead and create it
42:25 - for now the most important thing is we
42:27 - need to get a deployed contract address
42:30 - all right now here are the steps that
42:31 - we're going to take so in our back end
42:33 - let's go ahead to
42:35 - our migrations and in here we're just
42:37 - going to rename this to task contract
42:40 - everywhere so task contract that should
42:43 - be task contract and that should be task
42:45 - contract
42:46 - once we're done with that we're just
42:48 - going to download this entire project so
42:51 - everything from ruppel okay we're going
42:53 - to download it as zip on our local
42:55 - computer because for this part we need
42:58 - two terminals and in rupple replica
43:00 - currently you can't have two terminals
43:02 - open at once
43:03 - and so i'm just gonna go ahead and
43:05 - download it and then we can use it
43:06 - locally if you have ever if you ever
43:08 - have problems with downloading just
43:10 - simply refresh your rupple
43:13 - and then just go ahead and try
43:16 - downloading again and then it should be
43:18 - fine all right so now we have the zip
43:21 - file let's go ahead and open this up
43:23 - this zip file once it's opened up in
43:25 - your command line i want you to go ahead
43:28 - and cd into it so let's go to our
43:30 - downloads and we're gonna find where
43:32 - that is so solidity template two or
43:35 - whatever okay so i'm gonna go ahead and
43:37 - do template let's see if it's cd
43:41 - solidity
43:42 - template 2 perfect so now i'm
43:45 - inside of this okay
43:48 - folder
43:49 - and now once you're here
43:52 - first things we want to do is this we
43:54 - want to go ahead and
43:56 - install
43:57 - truffle if you don't have it on your
43:58 - local computer just do yarn global
44:02 - add truffle okay or ndx global or npm
44:06 - global at install truffle whatever okay
44:09 - so you're gonna need that okay you need
44:11 - to add it globally you can't if you do
44:13 - it locally it still won't work so make
44:14 - sure you install it globally and then
44:16 - it'll work okay so now we installed
44:19 - truffle globally
44:21 - now what you want to do is cd into the
44:23 - backend folder
44:25 - and you want to do truffle dashboard
44:28 - and this is super cool it'll actually
44:30 - open up a truffle dashboard and you want
44:33 - to deploy it with your own specific
44:35 - wallet address so it allows you to do
44:37 - that so you can actually click meta mask
44:39 - here
44:40 - all right and then it says hey confirm
44:42 - that you're on rankinb network and
44:45 - yeah i believe that we are so let's
44:46 - connect it okay so now it says there's a
44:49 - green
44:50 - sign here that says connected
44:53 - zoom in there perfect
44:55 - okay so now that it's connected
44:57 - i can get out and i can just hit confirm
45:00 - okay great so now this is good now let's
45:03 - open up our command line we'll leave
45:04 - this dashboard running and just open up
45:07 - a new tab okay so open up a new tab so
45:10 - this one is running or open up a new
45:12 - terminal whatever you want to do is
45:13 - whatever is easier for you okay now we
45:16 - cd into that same place
45:18 - solidity your cd into back end
45:21 - and what we want to do now
45:23 - is go ahead and do truffle
45:26 - migrate dash network
45:28 - dashboard okay
45:30 - so this will compile all our contracts
45:32 - so there's an error you forgot to put
45:35 - semicolon
45:36 - so i'm gonna go ahead inside of our
45:38 - contracts and i'll also make sure to put
45:40 - a semicolon here and here okay but more
45:43 - importantly we need to actually fix that
45:45 - on our local file so let's go ahead into
45:48 - our task contract dot sol and let's see
45:51 - if i can open it with code runner
45:54 - because it's just quick you could do it
45:55 - with vs code whichever one it doesn't
45:57 - really matter
45:59 - okay and
46:00 - i'll go right there
46:02 - wherever i'm doing the emits and put a
46:05 - put a semicolon here and a semicolon
46:08 - here and just save it
46:10 - okay i'm gonna get out
46:12 - okay let's open up our terminal again
46:14 - and let's try it one more time now it's
46:16 - deploying it look at that already
46:19 - popping up over here that is pretty
46:21 - freaking cool huh waiting for
46:22 - transaction signature please check your
46:25 - wallet for a transaction approval
46:27 - message okay so we're gonna go ahead and
46:29 - now hit process
46:31 - so let's hit process boom our wallet
46:33 - just opened up go ahead and hit confirm
46:36 - okay and now it's just deploying it to
46:39 - the internet okay
46:41 - or the blockchain rather and boom there
46:44 - you go it's been deployed now the very
46:47 - important thing that we need here is the
46:48 - contract address so double click copy
46:51 - that because that's what you're gonna
46:52 - need okay everything else you don't
46:54 - really need right now
46:56 - let's go back to our replit
46:58 - and let's open up our shell
47:01 - feels like a ritual
47:03 - feels like a crazy ritual
47:05 - cd into back end
47:07 - okay
47:08 - all right now that i'm inside of repple
47:10 - and i'm in back-end i'm just gonna go
47:12 - ahead and do truffle compile
47:15 - so now once i compile it's going to make
47:18 - my api
47:19 - for me so let's go ahead and see that
47:22 - build contracts boom
47:24 - we have our task contract right here
47:28 - and task contract.json that's our abi
47:32 - aka our api and what we're going to need
47:34 - to
47:35 - what allows us to be able to talk to
47:38 - this from our front end
47:40 - okay so with that said data successfully
47:43 - compiled we're done
47:45 - with that
47:46 - now let's go ahead inside of our client
47:49 - folder so let's go here
47:51 - and we're going to go ahead and create a
47:53 - new file and this file we're going to
47:55 - call it config.js
47:58 - so just pretend like i didn't have this
48:00 - file okay so we're going to create a new
48:02 - one didn't mean to have that file okay
48:04 - we shouldn't have that file okay so
48:06 - let's just pretend you never saw that
48:08 - all right
48:09 - and go into clients and you're gonna
48:11 - make it because you're not gonna come
48:13 - with the config file okay
48:15 - so let's go ahead and by the time you're
48:17 - seeing this tutorial dutch problem
48:19 - should already be fixed and you
48:20 - shouldn't even have a config file so
48:21 - it's great
48:22 - all right now in the config file what i
48:25 - need to do
48:26 - is i need access to that specific
48:29 - contract address that i had copied
48:31 - earlier if you don't have it copied
48:33 - earlier just go ahead double click here
48:36 - copy it now
48:38 - okay
48:39 - and
48:39 - there you go that's the address so just
48:41 - to export const con
48:44 - task contract address
48:47 - equals that
48:49 - okay
48:49 - and this is going to be pretty important
48:52 - so make sure you leave that in your
48:54 - config file okay because this is the
48:56 - contract address we're gonna need to be
48:58 - able to speak to it from the front end
49:00 - so almost imagine like this is your
49:01 - access token
49:03 - okay you can need access to your access
49:05 - token
49:06 - now let's go ahead into our index.js and
49:09 - now we're ready to actually start
49:10 - writing up all of our code so we're
49:12 - going to go ahead and import task abi
49:15 - and we can just say from
49:18 - and we want to get to our task abi is
49:21 - coming from our back end
49:23 - task
49:24 - contract.json
49:26 - right here so we just need to import
49:27 - this file
49:29 - taskcontract.json so we gotta go into
49:32 - back and and then inside of backend
49:35 - where do we need to go into we need to
49:36 - go into build
49:38 - and then inside of that when you do into
49:39 - contracts and then go
49:42 - taskcontract.json okay if you copy
49:44 - linked that should that's actually a
49:46 - different link that's not the path so
49:49 - ignore i said that
49:50 - cool
49:51 - all right there you have it so now we're
49:53 - importing that address okay that's one
49:56 - thing that we need access to the other
49:58 - thing we're going to need access to is a
49:59 - contract address so let's go ahead and
50:01 - do import task contract address from
50:05 - and this is much closer to us it's just
50:08 - in our
50:10 - config.js you can hit that over there to
50:14 - just purify your code all right now that
50:16 - we have
50:17 - our task api and we have our task
50:20 - contract address
50:22 - now we're really ready to actually
50:25 - finish writing all this code because
50:28 - those are really some of the main things
50:30 - that we needed access to all right first
50:32 - thing we're going to do is implement our
50:34 - connect wallet function okay because
50:36 - that's going to be
50:38 - kind of the sim one of the simplest
50:40 - simpler ones and one of the most
50:42 - important and the first thing that
50:43 - happens
50:44 - so for that we're going to need
50:46 - ethers
50:48 - okay
50:48 - and ethers is something that you'll have
50:52 - to install if you don't have it already
50:55 - so we could just
50:56 - go and check
50:58 - if we have it
50:59 - all right let's get to work on
51:00 - connecting our wallet so the first thing
51:03 - i'm going to do is i'm going to pop it
51:05 - into a try catch block
51:08 - we'll add the catch as well okay and the
51:11 - catch is going to be just simple it's
51:13 - going to be hey
51:14 - there's an error just say
51:16 - air
51:17 - okay
51:18 - cool
51:19 - and then in the try we're gonna
51:21 - basically write all of our logic so i'm
51:23 - gonna say hey
51:25 - grab ethereum from window so whenever
51:28 - meta mask actually like latches on so to
51:31 - speak on your app so whenever you like
51:35 - log in with meta mask or whatever
51:37 - the window like the chrome window or the
51:39 - safari window or whatever
51:41 - you actually have access to a variable
51:44 - called ethereum okay so you could
51:47 - actually destructure that it becomes a
51:48 - property of window you could destructure
51:51 - that out of window okay
51:53 - so we're gonna grab access to ethereum
51:55 - and then we're gonna say
51:57 - if
51:57 - ethereum does not exist so it's like
52:00 - value is null or whatever then we're
52:02 - just gonna say metamask
52:05 - not detected
52:07 - okay
52:07 - and then we're just gonna end the whole
52:09 - thing just hit return it's kind of like
52:11 - a guard clause okay just make sure
52:12 - that's there okay
52:14 - all right we're gonna check the chain id
52:16 - and we're gonna get it from ethereum
52:19 - our request
52:21 - and the method that we're looking for
52:23 - here is going to be eth chain id okay
52:28 - that'll get us
52:30 - the whatever chain somebody logged on
52:32 - with that specific chain id
52:35 - okay
52:36 - and then we can just say hey this person
52:38 - connected to chain
52:40 - and then we can just write a chain id
52:44 - okay great so let's go ahead and set a
52:48 - rinkeby chain id and ringkiby chain id
52:50 - is 0x4 okay that will make sure that the
52:53 - user is on rank to be indeed rinkybee is
52:55 - a test network and it's also what mine
52:58 - what i named my cat after
53:00 - and then we're basically gonna say hey
53:02 - whatever the chain id that the user
53:05 - selected if that's not the same as the
53:06 - ringkiby chain id
53:08 - and in that case
53:10 - you're not
53:11 - you're not connected to the rank of b
53:15 - test net right and then we want to now
53:18 - start getting some state variables into
53:20 - play so let's go ahead and create a
53:22 - couple of state variables we'll just
53:23 - start off with
53:24 - const correct network
53:27 - we'll have set
53:29 - correct
53:30 - network okay and this we could set it as
53:33 - false in the start
53:35 - the network that's selected is fault
53:38 - like not the right one but then when
53:40 - it's set up correctly we're just going
53:42 - to go ahead and call this and say
53:45 - true because it's going to be the
53:46 - correct one and then we're just going to
53:49 - end this function because
53:51 - we got the wallet and we got the change
53:53 - so there's nothing to do anymore just
53:55 - end everything
53:56 - if that's not the case
53:58 - then basically we're gonna
54:01 - hold on let's see oh i'm sorry this
54:03 - should be false because
54:05 - you're not connected to the ring could
54:07 - be test network and then this one should
54:09 - be
54:10 - true okay that means yes we are
54:12 - connected correctly so there we go true
54:15 - okay once that's done let's get our
54:18 - accounts now okay so the account is
54:21 - this if i open up my meta mask yeah i
54:24 - guess i could open up my metamask here
54:25 - as well count three
54:28 - right so that's an account
54:29 - out of many other accounts
54:32 - so you can see i have multiple other
54:34 - accounts right one two three whatever
54:37 - so we're going to say accounts and we're
54:38 - going to
54:39 - await
54:40 - and do an ethereum dot request
54:43 - okay and we'll say method on this one is
54:46 - going to be
54:47 - let me hide this you can see clearly
54:49 - method is going to be
54:50 - request accounts
54:52 - all right once you do that it'll
54:55 - request the accounts and it'll open up
54:57 - that modal where it like hovers over and
54:59 - by modal i mean this thing right when
55:02 - meth metamask actually pops open so
55:04 - that's what that will do and then we
55:06 - want to do is we want to say
55:08 - found account
55:10 - and show
55:11 - the zeroth account or whatever the
55:13 - account that the user pretty much
55:14 - selected okay
55:16 - and once the account is set then we need
55:18 - to actually keep track of the account as
55:20 - well so let's go ahead and add a few
55:22 - more
55:23 - state variables so here i'm going to
55:26 - have
55:27 - is user logged in or not because we need
55:30 - to know that so we're going to say set
55:32 - is user logged in
55:35 - initial state is going to be false
55:37 - obviously
55:38 - let's also go ahead and import use date
55:41 - because we're going to need access to
55:42 - that so let's just do use date
55:44 - hit enter and
55:46 - it imported it okay all right it says
55:49 - user logged in
55:50 - perfect and then the next one i'm going
55:52 - to need access to
55:54 - is
55:55 - current account okay so we can actually
55:57 - say current
55:59 - account set
56:01 - current count
56:03 - and make the current account empty
56:05 - and so we can say
56:08 - the user is logged in at this point so i
56:11 - can say this is true
56:13 - and at this point
56:15 - current account we have access to that
56:17 - as well so we can actually say set
56:19 - current account and we can actually give
56:21 - it accounts of zero okay so both of
56:23 - those things
56:25 - are now done and at this point we're
56:27 - done with the connect wallet function
56:29 - okay now all we want to do is we want to
56:32 - connect the connect wallet function to
56:34 - our component connect wallet button
56:36 - so
56:37 - let's pass this function down because
56:39 - we're going to need access to it in this
56:41 - component so i'm going to say
56:43 - connect wallet
56:45 - give it connect
56:46 - wallet or function
56:48 - okay so we're giving it this function
56:50 - now let's go to connect wallet button
56:52 - and we can destructure that
56:54 - connect wallet and then we can add an
56:57 - onclick method
56:59 - so you see i even have these nice little
57:01 - notes here for you
57:03 - so you could just go on click
57:05 - and just say connect wallet so basically
57:08 - just run that function when i click it
57:11 - now
57:12 - let's see if we've done it correctly
57:14 - because if we've done it correctly
57:16 - it should be working
57:18 - perfectly okay so let's go ahead and say
57:21 - the user is currently not logged in so
57:24 - let's remove that and let's see what
57:26 - happens i'll hit refresh on here okay
57:29 - let's go ahead and open our reply make
57:31 - sure you do yarn cd into clients and
57:34 - then do yarn dev
57:35 - that should pop it open okay we should
57:38 - have a button coming up here anytime now
57:41 - all right we have this button right
57:42 - there
57:43 - let's go ahead and click that and boom
57:46 - look at that that popped open that is
57:49 - very nice
57:50 - let's make sure that we're looking at
57:52 - our console log as well okay connect it
57:54 - to cheon i misspelled it but whatever
57:56 - you get the point chain
57:58 - let's hit so this console log worked
58:01 - okay let's hit next let's hit connect
58:04 - and boom found account shrinkaby
58:07 - right that is
58:08 - awesome
58:09 - let's go back
58:11 - let's disconnect our account so we can
58:13 - go ahead click that fox go ahead and hit
58:16 - disconnect account
58:18 - you could change your chain as well so
58:20 - you could change from rinkaby test
58:21 - network so make sure you have wrinkly
58:23 - test network right so if you don't have
58:25 - rinky test network you're gonna go ahead
58:28 - and click you're gonna click here you're
58:29 - gonna click show and hide test networks
58:32 - and you're gonna turn on
58:34 - test networks and once you do that
58:37 - these test networks should show up
58:40 - otherwise you can go inside of your
58:41 - settings go in advanced
58:43 - and you could scroll down and you could
58:46 - see where it says show test networks and
58:48 - you could turn it on that way as well
58:50 - okay
58:50 - now let's say you do rawspin or whatever
58:53 - connect wallet and it says hey you're
58:55 - not connected to the ringtobe test right
58:58 - so that error comes up right away and
59:00 - catches it so it seems like
59:02 - we are ensuring that the user
59:05 - is indeed connecting with rinkeby test
59:08 - network
59:08 - and then it pops it up and then it
59:10 - allows you to connect we can hit connect
59:12 - and boom there we go and then it pulls
59:14 - the account that you connected with
59:16 - specifically so far it's working
59:18 - beautifully
59:20 - all right next up since we're done with
59:22 - our connect wallet function and it works
59:24 - perfectly
59:25 - next up we need to work on get all tasks
59:29 - so we should be able to get all of our
59:31 - tasks or rather let's actually first add
59:33 - the ability to add a task okay so let's
59:36 - look at this code right here note right
59:38 - here it says add tasks from front end
59:41 - onto blockchain so we all we need to do
59:44 - is we need to just complete this
59:46 - function now okay add task
59:48 - how is that task going to work first of
59:50 - all we're going to go ahead and prevent
59:52 - default
59:53 - because it's going to be a form we're
59:55 - going to fire off on and this will avoid
59:57 - a refresh okay so this is
60:00 - avoid
60:01 - refresh that's all
60:04 - all right
60:05 - and then
60:06 - and then what we want to do
60:08 - is we want to do
60:10 - we want to create a task okay and this
60:12 - task is going to be the text is going to
60:14 - be whatever the user inputs so this is
60:17 - going to be a state variable that we're
60:18 - going to keep track of
60:20 - and this will be false because whenever
60:22 - you create a task initially
60:24 - the it is deleted will be false so let's
60:27 - go back up
60:28 - let's keep track of input as well so
60:30 - we're going to say input set input
60:33 - and use state
60:35 - use state and it's going to be empty
60:37 - okay
60:38 - all right
60:39 - so there we go
60:40 - and then what we're going to do is we're
60:42 - going to try we're going to have a try
60:44 - catch block here
60:46 - okay and the catch is just going to be
60:48 - simple the catch is just going to catch
60:50 - the error
60:52 - and then it's going to just console log
60:54 - the error okay
60:56 - all right so now for our tab for our try
60:59 - block rather
61:00 - we need to pull some of this code is
61:03 - going to be repetitive some of it you've
61:04 - already written we're going to get
61:05 - access to ethereum
61:07 - and then what we're going to say
61:09 - if ethereum so if it exists and your log
61:12 - ethereum is there
61:14 - then what i want to do
61:15 - is i'm going to grab the provider so
61:17 - we're going to do ethers dot providers
61:21 - dot web 3 provider and give it ethereum
61:25 - okay
61:26 - so in other words we're gonna give it
61:28 - like it's really meta mask even though
61:30 - it says ethereum here this is like
61:32 - actually metamask okay so that's really
61:35 - what's happening here so this is really
61:37 - meta mask and we're passing it the
61:39 - metamask provider okay hopefully that
61:41 - clarifies it for you and then what we're
61:44 - going to say is going to say hey grab
61:45 - the signer aka the person who just
61:48 - signed it
61:49 - and then we're going to call the co our
61:52 - task contract okay now we're ready
61:54 - and we're going to do
61:56 - new leaders contract and so
61:59 - we need to create this contract we're
62:01 - going to get our specific contract so
62:04 - for our specific contract it's going to
62:06 - need access to our
62:08 - contract address
62:10 - is going to need access to our abi okay
62:14 - and then we're also going to need access
62:17 - to
62:18 - our signer
62:20 - so
62:21 - now this will allow us to get access to
62:24 - task contract and all of its methods
62:26 - like add task
62:28 - delete tasks
62:30 - get my tasks everything that we created
62:32 - in our smart contracts if i go to
62:35 - our sol file or task contract file
62:38 - this will have access to all of these
62:40 - now
62:41 - okay
62:42 - so let's go back to our index
62:44 - and now that we have access to all of
62:46 - this since this is the add task
62:49 - function
62:50 - which method do you think we'll need to
62:52 - call after we get
62:54 - access to all of this
62:55 - simple after this we need to actually
62:57 - call our task contract dot add
63:01 - task and we need to
63:03 - grab our task text
63:06 - give it that and we need to give it is
63:08 - deleted okay so here for example is our
63:11 - task
63:12 - this will be the input that the user
63:14 - gives and this by default will be false
63:17 - okay great
63:19 - task
63:20 - and we can then do you know since this
63:22 - is going to be a promise we can then
63:25 - just get the response you don't really
63:27 - need to do much with the response
63:29 - and now we'll just set task
63:32 - set tasks rather and so make sure we we
63:35 - want to create a a state variable that
63:37 - keeps track of these tasks as well so
63:40 - we're going to say tasks set tasks
63:43 - okay and i'm going to say use date
63:45 - and
63:46 - in the start it's just going to be an
63:48 - empty array and so we're going to say
63:49 - set tasks and now we're really just
63:52 - going to say whatever tasks was
63:53 - previously
63:55 - plus that new task we just end added so
63:57 - this is really just appending to our
63:59 - task array okay that's really what it's
64:02 - doing
64:03 - and then we can say console log
64:05 - completed task or
64:08 - added
64:09 - task
64:10 - okay perfect and then what we want to do
64:13 - is we want to add a
64:15 - oops
64:16 - i want to add a dot catch
64:18 - and we want to say it
64:20 - error and then just console log the
64:23 - error okay
64:24 - perfect so we have this if and then to
64:28 - this if we want to write an else and we
64:30 - just want to say
64:32 - console log ethereum object does not
64:36 - exist okay so just in case we like don't
64:38 - get that ethereum
64:40 - object
64:41 - cool
64:42 - so now we can actually add a task and
64:46 - all we need to do is we need to connect
64:48 - it to our front end
64:50 - all right so what does that mean what
64:52 - that means is let's go ahead and let's
64:55 - put it in a state of that the user is
64:58 - logged in
64:59 - so i'm going to go ahead and hard code
65:02 - that
65:02 - oh sorry actually we don't even need
65:04 - that anymore we could actually put the
65:05 - actual dynamic state and we can just say
65:07 - is user
65:09 - logged in
65:10 - and if the user is
65:13 - not logged in then they'll show at this
65:14 - button
65:15 - and then if the user is logged in then
65:17 - it'll take us to the next thing okay so
65:19 - let's go ahead hit connect wallet let's
65:22 - go ahead and without this let's refresh
65:25 - okay great
65:27 - and let's see are we actually connected
65:29 - or are we not connected okay cool we are
65:31 - connected let's change this
65:33 - user logged in save it let's go back
65:37 - boom
65:38 - now let's see what happens once we
65:39 - connect so i'll go ahead hit connect
65:41 - wallet let's choose connect and boom it
65:44 - brings me in
65:45 - okay so this is the final version and we
65:48 - can leave it like this okay so this is
65:50 - already working dynamically if i
65:52 - disconnect
65:53 - it should take me back to the home page
65:56 - let's go here let's try disconnecting
65:58 - okay let's refresh
66:00 - boom it brought me back to the home page
66:02 - now let's try it one more time try
66:04 - connecting
66:05 - and it brought me back to the to-do list
66:08 - app page okay so our
66:09 - is user logged in like that one is
66:12 - working correctly now for this add task
66:16 - this function needs to fire off when we
66:18 - add a task but when i do this and i hit
66:21 - plus
66:22 - but the thing is that this plus sign
66:24 - doesn't have a on click functionality so
66:27 - we need to keep track of
66:29 - whatever the user is typing in here plus
66:33 - we need to actually when the user clicks
66:35 - this we need to add an on click
66:36 - functionality and we need our add task
66:39 - function to actually fire off when the
66:41 - user actually clicks that and right
66:43 - before we do that let's just go ahead
66:46 - and make this dynamic as well so i'm
66:48 - going to say correct network question
66:50 - mark that's it
66:52 - okay so this part is now fully dynamic
66:54 - and it's working okay so now going back
66:57 - to our add task
66:58 - right our to-do list let's go into our
67:01 - to-do list component our to-do list
67:04 - component has
67:05 - a form
67:06 - and then it has this plus button so we
67:09 - have these little notes here right that
67:11 - says hey take the input from here
67:14 - because this is the actual input and the
67:16 - form part
67:17 - and then it says hey add an on click
67:20 - right here to that circle
67:22 - okay
67:22 - so that's that circle right there
67:25 - so we're gonna add both of them so the
67:28 - first thing we need to do is we actually
67:30 - need to
67:31 - update the input from the user okay so
67:33 - we're gonna
67:35 - go back to our index
67:37 - and we need to actually pass the set
67:40 - input hook set input that way we can
67:44 - actually update the input based on
67:46 - whatever the user finds right to set
67:48 - input so that's one thing we also need
67:50 - to give it the add task function so
67:53 - let's go ahead and go add task okay so
67:56 - now we've given it both
67:57 - let's go back into to-do list and let's
68:00 - de-structure set input
68:03 - and list the structure add task
68:06 - now let's go down
68:09 - and one more actually thing we need to
68:11 - give it to is input because to-do list
68:13 - is gonna need access to whatever the
68:15 - input is at any given time
68:17 - so let's go ahead and send it
68:19 - input
68:20 - as well okay let's go back to our to-do
68:23 - list
68:24 - all right now right here i'm going to
68:26 - say value is
68:27 - input
68:28 - and then
68:30 - we need to on change so we're going to
68:32 - say on change
68:34 - okay
68:35 - set input
68:36 - to be the target value okay so whatever
68:39 - we're typing in so this is like a pretty
68:41 - common react thing if you're fuzzy on
68:44 - this like you could watch my other react
68:45 - videos and next videos
68:47 - i go more into detail on this type of
68:49 - stuff
68:50 - and boom so that should take care of
68:53 - whatever i'm typing in okay and then
68:56 - the plus button we need to add the add
68:59 - task function to it so we need to go on
69:01 - click
69:02 - add task okay
69:05 - so that's about it
69:08 - okay that's about it
69:09 - so let's go ahead
69:11 - and let's go
69:13 - write the word
69:14 - eat a cookie let's hit the plus button
69:17 - and let's see if anything happens boom
69:19 - look at that
69:20 - it popped open and it's asking for a
69:23 - confirmation and it's gonna charge me
69:25 - something i'm gonna hit confirm
69:27 - and you can see in the console log it
69:29 - says added a task that is so cool so we
69:32 - were able to actually add a task eat a
69:35 - cookie eat a brownie okay that's the
69:37 - second task let's click plus sign and
69:40 - it's working
69:41 - let's go here and let's hit confirm
69:44 - boom you can see that it says added task
69:47 - was ran twice
69:49 - so we eat a cookie eat a brownie eating
69:52 - lots of food here now you might be
69:53 - wondering hey how come all tasks are not
69:55 - showing up that's because we didn't
69:57 - actually finish writing that method so
70:00 - once we finished writing that method it
70:02 - will actually work
70:04 - okay
70:04 - and now if you're wondering hey why does
70:06 - it log us back out we need to actually
70:08 - just write a use effect hook okay so
70:11 - we're going to go ahead and say use
70:13 - effect
70:14 - let's import it and what we need to say
70:17 - in our use effect hook is simple
70:20 - we just need to run our connect wallet
70:24 - right when our app runs
70:26 - so now if i refresh plugged in
70:28 - automatically okay very nice
70:31 - all right
70:33 - great so far
70:35 - app is looking very good it's doing what
70:36 - we needed to do but now what we need to
70:39 - do is we need to be able to retrieve all
70:41 - of those tasks and then show them onto
70:43 - the screen
70:45 - all right now let's go ahead and get all
70:47 - of our tasks
70:49 - okay so this is like really one of the
70:51 - key methods that we're gonna create
70:53 - because
70:54 - it's going to get obviously all of our
70:57 - tasks so some of the code is going to be
70:59 - repetitive and for that we can just copy
71:02 - this so let's actually first write our
71:04 - try
71:05 - block in our get tasks
71:07 - let's go here i'm going to say try
71:09 - and then catch and whatever error we get
71:13 - we're just gonna console.log
71:15 - that error okay
71:17 - and now in this try catch block some of
71:19 - the code is gonna be simple for getting
71:21 - up to the task contract so i'm gonna
71:23 - copy this and paste it okay
71:27 - so this gets us the task contract
71:29 - address
71:31 - why is it complaining
71:32 - there we go
71:34 - okay cool and now we need to actually
71:36 - get all of the tasks so we need to go
71:38 - ahead and say
71:39 - let
71:40 - all tasks and i'm going to say await
71:43 - task contract dot get my tasks
71:47 - and then we can just say set tasks to
71:50 - all tasks just like that
71:52 - all right
71:53 - else
71:54 - cerium object does not exist okay boom
71:58 - there we go
72:00 - so that
72:01 - right there
72:03 - should actually just get all of our
72:04 - tasks we're getting all of our tasks
72:06 - we're setting all of our tasks so now
72:08 - all we actually need to do is in our
72:10 - to-do list
72:11 - well our to-do list need ask act needs
72:14 - access to our tasks and then
72:17 - we need to destructure it here tasks
72:21 - and i have these notes here that says
72:23 - hey just loop through all the tasks
72:26 - using the task component
72:27 - so we're going to go ahead and just do
72:29 - that now so in our to-do list
72:32 - let's go right there and i'm going to
72:33 - say
72:35 - map
72:36 - and for each item
72:38 - i want you to do the following okay
72:41 - you're going to
72:42 - call the task component
72:45 - all right it's going to be self closing
72:47 - and then the properties we're going to
72:48 - give it is for key it's going to be just
72:51 - item.id
72:52 - task text is going to be item.task
72:56 - text
72:57 - and on click
72:59 - we're going to give it an on click but
73:00 - for now let's leave it okay so on click
73:02 - delete task that's what we're gonna do
73:05 - so i'm just gonna leave that commented
73:07 - out cool now it's okay task could not
73:09 - find this component so we need to
73:11 - actually just import this
73:13 - component and then we should be good
73:16 - so
73:17 - we have created this task component
73:19 - right over here okay so we just need to
73:21 - import that so import task from
73:25 - task
73:26 - all right and that should get access to
73:29 - it and then we just render out the task
73:30 - component and now let's take a look so
73:33 - let's go back to our app let's hit
73:35 - refresh and let's see
73:37 - if it gets if it's able to pull any of
73:39 - the tasks that we've created thus far
73:42 - ah i discovered it okay so we have to
73:44 - actually call
73:46 - get my task we're never called it so how
73:49 - will it know so we need to get all tasks
73:52 - like pretty much right when our app
73:53 - loads and then it's gonna get all the
73:55 - tasks and then it's gonna do the thing
73:56 - okay there we go
73:58 - that was the problem that was happening
73:59 - because you can even see it says hey get
74:01 - all tasks is declared but it's actually
74:03 - never ever used so let's bring that bad
74:06 - boy back let's go here let's refresh
74:09 - and let's see fingers crossed hopefully
74:11 - our tasks should show up all right so
74:14 - we're making some progress so it's not
74:17 - writing out what those tasks are okay so
74:20 - something is happening with the task
74:21 - text
74:22 - let's just take a look task text
74:27 - is the input of the user
74:29 - yep
74:30 - also at the end what we need to do of
74:33 - this add task that we actually forgot to
74:35 - do at the end was we need to make sure
74:38 - that once you hit submit you just reset
74:40 - it to empty like this okay once you're
74:43 - done writing the task
74:45 - just set it to empty okay let's try eat
74:48 - a cookie let's try now
74:50 - and let's hit this
74:52 - okay let's hit confirm and let's see if
74:55 - we have better luck this time
74:57 - we do not have better luck this time all
74:58 - right let's to debug this problem let's
75:00 - just add a console log here and say hey
75:03 - just console log all tasks and now when
75:05 - you go back actually and if you refresh
75:07 - watch what's gonna happen keep an eye on
75:09 - the console log
75:11 - and look at that
75:13 - okay so i'm gonna make it a little bit
75:15 - bigger
75:16 - so you can see that's what he said
75:19 - and here you can see that i have all my
75:21 - tasks showing up okay
75:24 - eat a cookie eat a brownie eat more eat
75:26 - a cookie so lots of cookie eating tasks
75:29 - were there
75:30 - and then we have task text
75:33 - you could see there so
75:35 - our tasks are
75:37 - working correctly
75:39 - they're just not
75:40 - showing up the way that we want them to
75:42 - so we'll fix that now
75:44 - so basically what this tells me is that
75:47 - it's just not being rendered out on the
75:49 - front end so for example if we follow
75:51 - the logic down we're passing tasks to-do
75:54 - list so let's go inside of to-do list i
75:56 - command-click it we're destructuring
75:58 - tasks
75:59 - and then we're looping through tasks so
76:02 - the culprit might be this task component
76:04 - let's command-click into this
76:06 - and if we look here
76:08 - this is the component that should
76:10 - actually be showing the task because
76:13 - this here is the task component right
76:16 - there like this specifically so why is
76:18 - it not showing the task i don't see task
76:20 - text anywhere even though we're passing
76:22 - a task test it's not really doing
76:25 - anything with it so we need to actually
76:27 - destructure
76:29 - and go task text
76:31 - and then we need to actually show that
76:32 - task text right here task text okay so
76:36 - once we do that let's go back
76:39 - and look at that
76:41 - here we go let's say
76:43 - drive a ferrari that's a task
76:46 - let's add it in so so good thing was it
76:49 - was a front end problem it was in a back
76:50 - end problem our back end was working
76:52 - perfectly and boom drive a ferrari now
76:55 - we need the last thing we need is to
76:56 - make these delete buttons work so let's
77:00 - go ahead and add the delete
77:02 - functionality okay now let's add the
77:04 - delete task functionality so for delete
77:06 - task functionality it's not this one is
77:10 - not going to be super complicated this
77:12 - one is actually going to be fairly like
77:13 - straightforward what we need to do is
77:16 - there's going to be some bits of
77:17 - repetitive code like for example our try
77:20 - catch block so try
77:22 - and then we're going to say catch
77:24 - error and then just say console.log
77:26 - error okay and then we actually need to
77:29 - get access to our task contract address
77:32 - so we're just going to repeat this piece
77:33 - of code
77:34 - right here
77:36 - all right so this just runs and the
77:37 - whole point of this is to get us access
77:39 - to our task contract address
77:41 - let's close out this if statement right
77:45 - here
77:46 - and else will just be console log
77:49 - therium
77:50 - does not exist or whatever
77:53 - okay
77:54 - and now within this if statement is
77:56 - where all the magic is going to happen
77:58 - and we're going to go ahead and
78:00 - delete the task so we can just say await
78:03 - task contract delete task
78:07 - and when you delete a task we're going
78:08 - to give it a key okay that key is
78:11 - actually going to be
78:12 - passed in already okay that key is
78:15 - basically going to be like this so for
78:16 - example if you delete this task right
78:18 - over here this task already probably has
78:20 - the key of 5 because we gave it that key
78:23 - if i go to our to-do list we gave it
78:26 - that key right over here the item.id
78:29 - and the id is incrementally loops from
78:31 - zero one two three four five six so on
78:34 - and let's go back into our index
78:37 - so that key is already there so we're
78:39 - going to give it that key so it's like
78:40 - giving it a delete the eat the cookie
78:43 - task aka delete the task with the id of
78:45 - zero and set its deleted value to true
78:50 - okay so now it's deleted value is set to
78:52 - true so we're going to do this okay
78:54 - and then what we want to do is we're
78:56 - going to say let
78:57 - all tasks okay and you could store this
79:00 - so you could say
79:01 - const cons delete task
79:04 - transaction and you could console.log
79:07 - and say
79:09 - successfully deleted and then pass in
79:12 - that transaction
79:13 - and let's put a little
79:15 - tada emoji in there
79:17 - and then we're just going to go ahead
79:19 - and await
79:21 - task contract and get all of our tasks
79:23 - again get my tasks okay and then set all
79:27 - of these tasks so now we're gonna set
79:29 - all of the new tasks because now it's
79:32 - gonna send it to our back end so we're
79:34 - just labeling a task as quote unquote
79:37 - so we label a task as hey this is marked
79:40 - as deleted
79:42 - then we send it to our back and filters
79:44 - it once it filters it okay so once we're
79:47 - done it filters it we on our front end
79:51 - retrieve all of the tasks again from our
79:53 - back end or blockchain part and then we
79:56 - just set those as the new tasks and then
79:59 - we're done
80:00 - okay so this is the delete task
80:02 - functionality and delete task
80:04 - functionality is now completed
80:07 - now who needs access to delete task our
80:09 - to-do list
80:11 - is going to need access to
80:13 - delete tasks
80:15 - and the reason for that is
80:17 - our component task is gonna need access
80:19 - to it okay so it's like a little bit of
80:21 - prop drilling but not
80:23 - too crazy okay so let's go ahead and do
80:26 - delete
80:27 - task
80:28 - okay and then let's go to our task
80:30 - components
80:31 - and we're gonna go ahead and say
80:34 - on click
80:36 - right on click we are going to
80:39 - delete task and give it the item dot id
80:42 - that's it okay
80:44 - and that should really delete it so
80:46 - let's go ahead and drive a ferrari let's
80:49 - go ahead and delete this task
80:51 - okay let's go ahead and refresh
80:53 - save a few times and delete
80:56 - okay nothing is happening right now so
80:58 - what's the problem delete task okay
81:01 - we're destructuring delete task let's go
81:04 - into index
81:06 - we're passing delete task is being
81:08 - passed
81:09 - so all of that is good actually i don't
81:11 - think we need to add this here we need
81:14 - to actually give
81:15 - this on click
81:17 - all right so we're going to need to give
81:18 - this on click to delete tasks so we're
81:21 - going to go ahead and say
81:22 - we're going to pass this function delete
81:24 - task
81:26 - and we're going to pass that down so i
81:27 - don't think we need to actually add that
81:29 - here
81:30 - okay
81:30 - so let's go to our delete our task
81:33 - component now okay
81:35 - let's go to our task component inside of
81:36 - our task component let's go ahead and
81:39 - delete tasks let's destructure delete
81:41 - task okay and then here we're going to
81:43 - add an on click so on the garbage can is
81:46 - where the on click takes place and we're
81:48 - going to go ahead and say delete task
81:50 - okay on click that's what should happen
81:52 - now let's give it a try i think this is
81:54 - to me is looking right now let's go
81:56 - ahead click
81:57 - drive a ferrari try to delete it so
81:59 - refresh
82:00 - we get an error to show us what there is
82:03 - to
82:04 - oh yeah we need to give it the specific
82:06 - item id so let's go ahead and do
82:10 - actually what we could do is we could do
82:11 - it this the other way
82:14 - let's go back to our to-do list
82:18 - and here we're actually going to give it
82:19 - an on click
82:21 - and the on click here is going to be
82:23 - delete
82:25 - task and that specific item dot id and
82:28 - it was going to task let's go ahead and
82:31 - destructure on click and then we're
82:34 - going to give it the on click
82:37 - okay so that way we have access to item
82:38 - id and we don't have to like destructure
82:41 - and pass down the item id okay cool
82:44 - so let's go and try it now remove drive
82:47 - a ferrari and there we go now it's
82:51 - popping up beautiful let's go ahead and
82:53 - hit confirm on that
82:55 - so that transaction it says successfully
82:57 - deleted okay now if i go ahead and
83:00 - refresh my app
83:02 - okay let's see
83:04 - sometimes it takes a second so let's
83:06 - give it some time
83:07 - and there you go okay so yeah while it
83:10 - says successfully deleted and you get
83:12 - the transaction id on the blockchain it
83:14 - still needs to verify it that takes some
83:17 - time so once it's fully verified
83:20 - it can now then it deletes it so now
83:22 - when i refresh and i go here you see the
83:25 - ferrari one is actually gone so now if i
83:27 - create a new task
83:29 - let's go ahead and hit the plus sign so
83:32 - when i hit confirm this will add the
83:34 - task okay boom where we got a new task
83:37 - and now i can actually hit
83:39 - let's go ahead and refresh
83:42 - and where's my new task go
83:44 - okay now it's actually there so even
83:47 - creating tasks takes a second okay so
83:48 - that's why you have to wait a little bit
83:50 - and now i can actually remove it okay so
83:53 - successfully removed i have the hash the
83:55 - removal
83:56 - but it's going to still verifying on the
83:59 - back end right the blockchain side so
84:02 - see now the new task has been deleted
84:05 - and it is not there
84:06 - guys this is amazing if you've gone this
84:10 - so far huge props to you alright so i
84:14 - really hope you guys enjoyed building
84:16 - that to-do list app and you got to learn
84:18 - a ton of solidity con concepts how smart
84:21 - contracts work how you actually
84:23 - interface your front end with the
84:25 - blockchain component it's mind-blowing
84:27 - stuff
84:28 - and we had authentication in there so if
84:30 - i actually log out and i log in as a
84:33 - different user you won't see these tasks
84:36 - there and you won't be able to delete
84:38 - these tasks and you won't be able to
84:39 - interface with them so we have all of
84:41 - that and then some and it was so quick
84:43 - and so nice and we didn't even use a
84:46 - database which is mind-blowing and cool
84:49 - i hope you enjoyed it huge credit and
84:51 - shout out to code with kavit you should
84:53 - check out also his video huge shout out
84:56 - to him so for a lot of the ideas in this
84:59 - video and some of the code for the code
85:01 - for the smart contract and a lot of the
85:03 - inspiration okay so that was really
85:05 - awesome and so thank you code with kavit
85:08 - the huge shout out to you and again guys
85:10 - as always i love your beautiful face
85:12 - thank you so much for watching and i'll
85:14 - see you
85:16 - in the next
85:17 - video

Cleaned transcript:

do you want to master solidity do you want to finally understand it and wrap your brain around it well guess what we are going to build a todo list app together in my opinion this is one of the best ways to learn how solidity works how smart contracts work is this app the scope is small it's a simple app yet it's very powerful and effective and it'll get you to understand how a lot of functionality and solidity works how can we use solidity along with truffle to make your smart contracts how do we add a task and delete a task and show all of the tasks how do we add a task so that it actually adds it on to the blockchain and when you get all the tasks your front end will go to your back end or your blockchain and get all the tasks from there this app will also have full on authentication built into it which essentially means that you'll be able to use metamask or any type of ethereum wallet and log in and log out and this app will only show you your tasks so any other users can't see your tasks and cannot delete your tasks so i think it's a very powerful app i hope that you're excited to use it and with that said let's um smash that like button so this video goes out to as many people as possible and in just a second we're gonna go ahead and demo this app also just real quick want to give a huge shout out to code with kavit who made the video to do app with react and solidity so huge shout out to that a lot of the inspiration comes from that i referenced the code from there okay but i just added in next.js a lot of our frontend completely custom frontend and we wanted to add in our own explanations so you could learn solidity step by step but if you want to check out also his video go check it out he's absolutely awesome with that said let's get back into the video now let's go ahead and demo the app so the first thing i'm going to do is i'm going to connect my wallet and you can see metamasks popped up over here on the right hand side i will select an account select whichever one you want and i will connect and boom look at that our app is up and running and it's like hey what's up kevin or causey or whatever your name is right we'll go there and now i can add tasks walk my dog at 1 pm which is actually something i have to do and then hit this plus sign right here and watch this we're actually adding it to our blockchain so now metamask pops up to ask for authentication if we want to do this i will hit confirm and it has been added on to the blockchain and it is a actual task that is created let's go ahead and create another task i'm going to go ahead and eat my food at 5 pm okay let's go ahead and hit plus on here and now just watch what happens okay let's hit confirm there we go it has been confirmed the front end is looking pretty nice but the main point of this app is not the front end it's that you could actually using solidity add tasks and things to the blockchain and it will really clarify and make you understand a lot of things of how solidity works and how smart contracts really work now if i hit delete on here this icon right there you'll see it'll actually delete that so i'll hit delete and then let's wait a little bit and let's refresh and let's see if it's been removed okay boom i hit delete and now it actually asks me to make sure that it's confirmed and now once i confirm it okay you got to give it some time before it will actually just completely get rid of it because we are removing it we have to let the blo our back end on the blockchain side know that we're actually going to be getting rid of it and now it's basically gone and this is happening on the blockchain side so i'll show you how we're doing this on the blockchain side so you can understand and since it's a blockchain you're not technically completely deleting it but we're filtering it out on the block end and so you'll get to learn how to do that so this is the app i think it's really cool i think you can have a lot of fun building this with me with that said let's just start building this bad boy up now all right now make sure to click the link in the description below this is completely free and this is a template that i created for you solidity with the todo list and it's going to have nextgs and tailwind css and all the frontend code essentially just ready because i would just give it away i would want you to simply focus on the web3 and the blockchain part so this rebel for you will have all of that code already there and then you can only work on the solidity part okay so make sure to go here and if you want to use this make sure to hit fork rebel because that's the only way you'll be able to code in here and use this template okay and the link will be below and it'll be join.replay.com slash cp dash solidity dash to do so you could type that in or just click the link in the description all right with that said i'm going to go ahead and fork this rupple and once i fork this it should bring you to a page like this and all this means now is you can actually code here and so the benefits of this rebel that i've sent you to is in this one you will have next.js already installed all right you'll have tailwind css already installed and configured all the frontend code is already completed so you won't really have to do any of the frontend code okay majority of the frontend code is complete okay let's not say all because there is still you're going to still need the right front end code that needs to interface with the back end okay so that's done truffle has been installed so truffle is i'll show you how to install it but i installed it already for you because it takes a really long time to install so i'm like hey i'd rather just have that process speed up okay this is done this is done most of this is done and then this is done okay so that's the real benefit of this rebel that you're actually looking at all right so let's get started with that said what i'm gonna do now is i'm gonna walk you through majority of the code okay what's there so far and what you should find in here okay so you should find a client folder and that should have all of your frontend code okay so i'm going to walk you through that a little bit and then i'm going to walk you through some other stuff but first just make sure in your package manager all i want you to do is install truffle so you can type in truffle and normally what would happen is you'd have a plus sign here to install it you don't right now like a plus sign like this you don't right now because already installed okay so that's already done so let's go here the next thing i want to show you is in your client front end in your package json you're going to need access to some libraries like react icons or next or some tailwind stuff that's already there for you okay so you don't have to install it you could yarn it but you don't even need to do that because like the node modules are already there as well so you should be good to go on that end so react icons you already have it then auto prefix for post css until when css because these are all the things you need for css this the tailwind files you need for so yeah your tailwind is ready to go cool so that was one thing i had to explain to you now let's walk through the actual app so let's first take a look at it so you should be able to cd right now into your app into client and then just do yarn dev and that should start running your app so let's take a look you can also open it in a new tab if you want to just fully see it it takes a second to just be a little bit patient and there you go your app is up and running okay you can zoom out if you want i'm going to zoom in because i'm on a big screen so i want you to see this and right now writing on your app will not work because that's the back end part and you haven't added any back end code so really nothing is going to happen okay it's just gonna refresh and that's it yeah right now there's no front end so whatever you do nothing is really gonna happen but you have the nav bar right here you have the entire todo list app you have this to do thing and then you have this plus button right over here so that's mainly the front end right now so let's go back and what i want to show you is these are all the components that i've already created for you okay so the connect wallet button nav bar all of those are there okay so navbar task todo list so those are already there for you okay connect wallet button and wrong network message now some of this stuff you're probably like okay how do i see the wrong network message or connect wallet button because i don't see them right now so here's how you can see them so let's go into our index this is the main file where everything is happening these are all the nodes for the app but i'm going to just walk you through them together so we won't need them so i'm going to get rid of them okay and let me just walk you through the entire code base okay so let's put that here and let's just walk through the entire code base now all right so we're importing some of the components that we had made but here's what i want you to actually see all right the main part of the logic so these are functions that are just going to be empty all right these are functions you're going to have to complete these are the back end functions so connecting the wallet being able to get all the tasks from the back end being able to add a task to the back end and being able to delete a task from the back end so this is all backend related okay all three of these functions so when i say backend in this case it's the blockchain part this connect wallet function is going to just simply be connecting wallet to metamask to any type of ethereum erc20 wallet whatever all right so those are the ones that we're gonna work on and this is the other main part that i have already handed over to you so this over here this div there's not much to really worried about here but this is really styling it if i get rid of all of the styling here it's just going to look like out of whack right so that's just a wrapper that's all that's doing so i'm going to bring that back and they'll just contain the app put it in the middle add a color in the background centralize things so that's what that's doing okay so now you can even pretty much not really worry too much about this piece of code this piece of code the main piece of code that i want you to focus on now and worry about is this guy right over here okay and that's really the main logic of the app so far which is hey check if the user is logged in and if they're not logged in show them the connect wallet button okay so here i can make a user be let's just fake a not logged in user and what that would look like how we can do that is just remove that boolean that exclamation mark let's remove that exclamation mark so it just says is user not logged in so now it is true that the user is not logged in okay and if that's the case then show the connect wallet button so that's why it's showing that button right there and now we the other situation we have is hey is this the correct network okay so basically if the user if we go back to the other situation okay which is the user is this basically says the user is currently logged in okay because there's a double negation here negation here so it just means the user is logged in so the user is logged in we bypass this component we don't do this we do the else statement okay so this is our else statement so if the user is logged in then we want you to ask one more question is this the correct network if we're on the correct network which in this case is going to be the rankinby test network then show the todo list so then show this but if we're not on the correct network so i can mimic that as well by just adding exclamation mark here and saying we're on the wrong network so if we're on the wrong network then it's going to not render the todo list but render the wrong network message component and this is a pretty simple component there's not much going on here it just says please connect to the ring could be test net and reload the page so this means you tried to connect to some other network like raspin or something else so that's what's happening there right if the user is not logged in and this is not the correct network then show the wrong network message okay so those are the three components and you can toggle them really easily by just removing if i remove both of these right then it means the user is not logged in and they'll show us the connect wallet button if the user is logged in then it'll show us and it's the correct network then it'll show us todo lists and the todo list pops up so just play around with that so you can just understand the logic that's happening here okay because that's the really kind of important part and then of course we're going to make this more dynamic because right now this is just hard coded here but we're going to actually get access to the user using their ethereum wallet so you're going to need to complete the connect wallet function for that okay and then you'll be able to actually keep track of the logged in user and then where it says is this the correct network same thing it's you're just going to pull that information from connect wallet and your connect wall will be able to tell you if this is on ring could be the user logged in or the user logged in somewhere else okay so the connect wallet function will take care of both of these states that you need to be really tracking okay these are also going to be states right or so we're going to be using a little bit of react for that so for now what we're going to do is we're going to go ahead and tackle really the most difficult part first which is we're going to be going ahead and making our smart contract first because really majority of this code like especially all these parts right here they're really going to depend on what your back end is like aka what your smart contract is like because here you it's like imagine writing code without knowing what your api is going to look like everything you're going to write is going to be wrong so we're going to make our back end first and the api or whatever first and then from the front end we'll simply just interface with it okay so i hope that gives you a lot more clarity of what we're doing and now we're gonna go ahead and do that okay so let's go and create a back end now so this is our front end okay this is our client front end we're going to create a new folder okay at the global level i'm going to hit folder and make sure it's not inside of client make sure it's outside of client and this folder we're going to just call it our back end or the blockchain part okay and we're going to go ahead into our command line and we're just going to cd into that so hit ctrl c to end hit cd dot dot so you can actually get out of it and now we're gonna go cd back end okay and now if you're in your back end now we're gonna go ahead and say truffle init okay so just type in truffle in it all right so once you do truffle init if you look in your back end you already you have files now so you have truffle config you have a test file in migrations contracts another reason why i'm doing this on replit is you don't have to worry about this installation nightmare that often happens while you're coding along on a mac or a linux or a windows and you can't get a solidity thing to install or a truffle thing to install or next install so everything is already installed in there for you okay so just make sure that you've forked the correct template and again it's in the description if you missed out on that earlier all right so i've done truffle in it now my like template project is ready to go now we're gonna basically go ahead and create a smart contract so this line over here that says truffle create contract your contract name we're gonna go ahead and use that command to create our new contract okay and that's gonna create a scaffold of a contract so just like bare bones contracts i'm gonna go ahead and say truffle create contract and then we're gonna go your and sorry not your but we're gonna say task contract okay because we're gonna make a contract for our tasks so essentially we're getting a back end for our tasks all right let's do that okay so this contract will allow you to create a task and add a task and show tasks and filter tasks it's going to be all task related now if i look inside of my contracts i will see task contract dot sol okay so let's go inside of here and now it's going to be the really meaty fun part because we're actually just going to be writing a lot of our logic here for our code okay so this is going to be all of our backend logic so it's going to be actually a really important part great let's walk through everything step by step because especially if you're new to solidity i just want to make sure that you understand every possible thing okay so i'm going to zoom in so everything is super nice and clear all right first thing right here this is oftentimes you will see it in solidity just add in some kind of license okay so just you can copy paste this exact one right should be there already now the solidity version that we want is a specific version in this case and i want 0.8.15 okay this is a version that i want every single line of solidity that you end you have to end it with a semicolon if you don't you will get an error or your app will break okay so that's important and here whenever you're actually writing a solidity file you pretty much always have to do contract task contracts so imagine like this is function or a component past contract but it's literally just a contract and then this constructor we don't need it so we can actually get rid of that constructor okay in here we're gonna have two events so i'm gonna have an add task event and it's going to take in a so let me write it like regular javascript first so it's going to take in a recipient and it's going to take in a task id okay so this is how you might write something in javascript or you're like okay i'm creating a function or whatever and this function takes called it's called at task and it takes in two parameters recipient and task id except in solidity you have to say those their types so recipient will be a type address okay so those wallet addresses like whatever the wallet address is like those are specific types and solidity and you refer to them as address and then task id is going to be an an unsigned integer okay so we will say ooh ins you int and then we're also going to need an event for delete task okay and delete task is going to ask for a task id and it's going to ask for hey if it's deleted or not the task is deleted or not okay and task id is gonna be a uint okay and then this is going to be can you guess if something is a true or false what data type is that if you guess bool good job okay so that's gonna be a boolean all right now we're going to create a data type that's going to represent the following structure so let's go into our index file and i just want to kind of show this to you in index our tasks will have the following structure so this is an array of tasks but this is an object or in in solidity you might call this a map or a struct this is this right over here okay is an object here right javascript this is what one task will look like it'll have an id text and whether it's deleted or not okay so that's what one task looks like so if i go ahead and i go back to my task contract you could do command p for what i did and then just type in task contract okay so we're gonna now create a structure that mimics what we saw so i'm gonna go ahead and do struct and task and this structure is just going to say hey it's going to take these are the keys okay so we're going to have an id we're going to have task text and we're going to have is deleted okay and the last thing you want to tell the struct is what are the data types of each of these so for id my data type is a uint for tasks text is going to be type string and for is deleted it's going to be a boolean okay so in solidity if you want to create let's say something with an object right if you want to create a task like if i go back to this task right here if i want to create a task like this so let's copy this and let's come back into our task contract and let's paste it if i want to create a task like that i can use a struct to create that exact task so i can go task and then let's say i pass it a 1 i pass it clean and let's say i pass it false sorry zero it's going to create that exact task so this is gonna return and turn into an object okay so it's almost like you're calling a function or whatever okay it's a constructor it's a task and then it'll spit back out that okay so that's how that's why you need structs and when you use a struct you will get back what we call an object in javascript okay this is just to give you a little reference okay so i'll leave that reference up here and this is a task okay this is what a task will look like okay great so we have our task struct and now what we want to do is we want to have an array that is filled with tasks so when you're creating that you're going to basically say hey i want to create an error so let's just do it this way okay so i want to create an array called tasks in javascript you would just do this but here this is not javascript right so i want an array called tasks now what i want it to be is i want it to be of i want it to be an array okay and it's gonna have it's gonna be an array and it's going to be filled with these objects okay so if you try to put integers into this array tasks so for example let's just say you try to do tasks dot push so let's say you have this variable tasks available to you now okay and let's say tasks is an array now if you try to do task stop push and put a 1 it's going to go it's going to give you an error because it's going to say hey that's not the type that you told me the type that you told me is going to this is the type this is what it should look like but now if you actually put let's say something that looks like this in here if you try to push this it's going to accept it it's going to go yes this exact thing okay this is an integer this is a string for task as a boolean yes i will accept it and it will add it okay so you're creating these strict types so it's like typescript if you've ever used it and then we're just gonna say this is private meaning that anybody outside of this function should not have access to it okay and then we're going to create a mapping which is going to be helpful for task to owner so we'll say mapping and i'll say you ins 256 address task to owner so i know this is probably like what the heck is this all this part means so this part right over here just a variable okay we're just saying hey crea initialize a variable called tasks to owner and the type that it's going to have is this and all this means that anytime you create task to owner you're going to have an object that looks like the following the key this represents this part right here represents a key right over here represents an address okay obviously and an address might look like those wallet addresses might look like that okay so here let's just say that this is the wallet address of qazi which is me okay and then we go boom all right task to owner and then boom we will have another task like this oh not in the same thing but let's just say we have another task and this is task one and this is david okay so how this will work is imagine this you have two tables okay and on the left hand side we have a table called tasks and then a right hand side we have a table called owners okay and just say walk to dog might be a task and then here on the right hand side for owners you have all the owners like qazi whatever but the way that we're storing it is in the following way so we're giving this task an id of zero so we're gonna set the task id here is zero walk the dog and inside of owners we're gonna say the id of zero belongs to let's say kazi and almost like in sql this will allow us to do an inner join and match all these tasks so this way the app will have proper authentication and it'll show me only my tasks not somebody else's for example if for one we had clean dishes but that was like david created that then this would basically say hey this was created by david okay so then when qazi logs in qazi will only see walk the dog and when david walks in he will only see clean the dishes okay so the id inside of the task and this id this key over here these are the two pieces of the puzzle that allow us to do an inner join and find the who the tasks belongs to so this is a structure this is what mapping blah blah blah whatever is okay this is what it'll look like so i'll get rid of that for now okay cool now next up we're going to create a function and this function we'll call it add task all right let's keep on rocking and rolling here so our add task function that we're going to make is going to take in a task text and it's going to take in is deleted okay so here's what i want you to imagine right now this function that we're actually creating here right now we can actually call this function from our front end okay so imagine that we're going to be calling this from our front end at some point and how we're going to be calling this from front end at some point is going to look like this from our front end we're going to do task contract dot add task function and then from our react slash next.js code we're going to pass in a text like walk the dog and then we're going to pass in is deleted as false or true so we're going to let's say pass in like this is not currently deleted this is so deleted is deleted as false so this is add task function or method or whatever you want to call it that we are creating that we can interact with eventually from our front end not right this second okay so that's what we're writing just keep that in mind all right now since this is solidity we have to tell it what types these are so task text this is this string and when you do string you sometimes have to write memory there so we'll just write that and then this one is a bool okay so that's what that is all right so we're done with that part now what we want to do is we want to basically say that this function is external so we have access to it from outside of this too and external basically means that this function isn't really doing isn't really returning anything in this case okay so we're gonna go ahead and say we're gonna create task id and what will task id be so think about it like this okay say you have an array of tasks so you have an array of tasks and that array looks like this like this filled with these tasks okay so we got task one we got task two task three what we wanna do is we wanna generate task ids here right and we want to generate preferably a unique task id most of the times and we also want to just make it simple like the first one should be zero the next one should be one the next one should be two so on and so forth it's easy what we could do is say that this array is called tasks what we could do is we could just say when we're creating this task we could just for the id we could just say hey grab the tasks and grab its dot length so if i get this task's length well i get zero well when i get this task's length the second time i get one when i get the tasks length the third time what do i get hopefully you guessed it okay you get a 2 right simple we're just going to say it's going to be tasks.length okay and we're pulling the tasks from there make sure to put a semicolon so it doesn't error out next up what we're gonna do is whatever task the user passed in we need to append that to our tasks array ray that's made up of these task objects okay so i'm gonna say tasks dot push and now we're going to create that object so i'm going to say task constructor then give it the task id that we just created right there we're going to give it the task text and then the is deleted task text and is deleted so this will push it on and basically what this is doing is this right here will basically get simplified to that right there okay one task is going to create one object one map all right next up we need to set up that database of tasks to owners to create that relationship so i'm going to say task to owner okay and i'm going to give it a task id for task to owner so remember this variable that we made tasks to owner and so it's going to take a u int right and the uint in this case will be zero for this task for the next tax is going to be one for the next task is going to be two and this over here needs to be whoever the user is okay so user is gonna go right there okay the logged in user in this case we're just gonna say message.sender this is a special thing in solidity msg message and then if you do dot sender it'll get the wallet address of whoever was currently logged in let's put a semicolon here let's put a semicolon here okay and then we can even emit this so we can submit add task and i can say message sender and then give it a task id remember we created this event at task and now we can admit it but we just need to give it an address for the recipient so this is the recipient and then this is the task id right giving it that task id perfect so in terms of the add task function our add task function at this point is complete i'm going to remove these tasks at the bottom or i can leave it and just comment it out all right the next function that we need to add is our get tasks function okay or get my tasks function so let's go ahead and do that so i'm going to say function we'll say get my tasks and we're going to say external view returns and we can even say what this will return and this will return a task like object okay and now let's open this function up and start writing okay so we're going to create a variable called temporary okay and so temporary is just going to be an array and what we want to do is we want to keep pushing new tasks to it that are of that owner okay so temporary will filter for the owner and for nondeleted tasks okay so get my tasks we want to do is we want to get tasks that let's say that have that are mine and not yet deleted okay so temporary okay and it's gonna give a new task like object we'll instantiate it like this okay and this array that we want so temporary is going to be an array and this array that we want so in solidity you could give a size of the array so if i said array of let's just say 2 or whatever or 2 right here then what will happen is i will get an array of size 2 and no bigger like it can't go bigger than size 2. it has a fixed amount of slots and so what i'm going to just say here is tasks.length why because i want this array to be obviously no longer than there are tasks that wouldn't make sense and this temporary here it's going to be this it's going to be an array of these these tasks okay and we're just gonna say memory perfect okay and let's put a semicolon there let's put a semicolon here if you miss any semicolons it will break so just keep making sure to put semicolons everywhere all right now we're gonna set up a counter that i'm going to set to 0 and then we're going to write loop through this and so i'm going to say for u int i equals 0 while i tasks dot length okay i plus why are we doing this we're gonna loop through all of our tasks and then we're just gonna keep adding them to temporary and we're gonna do a check here so i'm gonna say if task to owner of that specific task is equal to the messages sender meaning if this is my task so let's say that there is a task owner that has a key of zero right and so if we look at that and we go and get the key of zero and we go okay the task is whatever if this is going to turn it into its value is going to be an address and if that address of that task matches the address of who's logged in then that means this is these are my tasks okay and we're gonna add in one more check and we're going to say hey check if tasks is deleted is false so making sure giving me tasks that are not yet deleted let me zoom out just a little bit so give me tasks that are not deleted okay so if this is the case what i want you to do is set that task in that specific position this is just a way of writing a push okay this is just another way of writing a push i want you to get used to it because in solidity this is like pretty common people do it like this or you're just really basically saying in the zeroth position place this in the first position of that temporary array place this so if you imagine temporary is an array of size two so let's just say it's empty empty right now what this is saying is hey go to position zero so this is position zero and then set that to that specific task so tasks text hello is deleted false whatever so add that task there and then go again loop again and then if you find my task again that's also not deleted at that here okay so that's what's temporary is and then we just increment the counter by one so we will do counter plus okay so let's get out of this and then all we're gonna do is we're just going to spit it out in something called result and result is going to be the length of the counter not the length of the entire array so result is just going to be so if my tasks were 2 and the total tasks were maybe 10 then this result is only going to be of size 2. and we'll loop through this so i will say i is equal to zero i is less than counter i plus and then i'm just going to say for result of i just set it to be of whatever is in temporary of i okay and then at the end we're simply just gonna go ahead and return result okay so that's my function here's my loop then i do my loop again and then i return my result okay so that's what's happening there just make sure to put semicolons in all the right places don't miss any semicolons i'm gonna call this on my colon okay great so we're good with get my tasks okay the next one that we're gonna work on is add task where does the whole tract end so let's see contract ends right there okay cool let's go here and we're going to go ahead and say function and it's going to be a new function we're going to make and this function is only going to be for deleting tasks because we already have a way to add the task we already have a way to get our tasks now all we need to do is be able to delete tasks okay so i'm going to go ahead and say task id is delete task wants a task id it also wants is deleted or not okay so we can just say bool and just make it external great now i'm going to say if the task to owner so it's basically if it's if i am authenticated to be viewing this or doing stuff with it so this is my task that was given then what i want you to do is get that task id and set its is deleted to be is deleted whatever it was passed in which you honestly don't even have to be past this it should just be set to false but like you could do it like this as well that's fine you can set it to true i'm sorry true so just okay it's deleted as true and then we just emit the events okay this is not completely necessary but you could do this now basically just so you can visualize what's happening is from the front end how we're going to call any of these functions from the front end we want to be able to just do task contract that delete task and then we give it a task so we give it like an id so we give it zero i'm just mapping this to that and then we give it this so we just go true so that just means hey i am confirming that i want to delete this specific task and i'm saying zero comma true and then it will confirm and then delete that task okay but realistically all we're doing is we're not really deleting tasks all we're doing is setting its deleted value to true and then in our get my tasks we're just filtering for it we're just really there's just a filter okay and that filter all it does is it just doesn't show you anything that has the deleted value set to true okay so filter is filtering is happening here specifically okay make sure it's not deleted is what that line is saying and then here we're just marking so think of it like we're just labeling it as deleted and then we're just filtering it because on the blockchain you can't really delete anything all right cool and then now we can get rid of this so with that said our smart contract part that we wanted to write our smart contract is done all right so if you've gone here really good job awesome job and now we're gonna go ahead and move forward okay now we're almost ready to interact with it from the front end we're very close but not completely there yet so what we have to do is get it ready to be interacted with from the front end so we'll need really two things we'll need a contract address a deployed contract address we need to deploy this okay so that means almost imagine like deploying it to the web and then you can access it from your front end okay or you're deploying it then the second thing we need is access to a which if i want to make your life really simple it's literally just an ape that will allow you to use all these methods okay so we need this and we need abi okay now luckily for us gets created pretty easily in the back end okay i'll show you where that gets created once we go ahead and create it for now the most important thing is we need to get a deployed contract address all right now here are the steps that we're going to take so in our back end let's go ahead to our migrations and in here we're just going to rename this to task contract everywhere so task contract that should be task contract and that should be task contract once we're done with that we're just going to download this entire project so everything from ruppel okay we're going to download it as zip on our local computer because for this part we need two terminals and in rupple replica currently you can't have two terminals open at once and so i'm just gonna go ahead and download it and then we can use it locally if you have ever if you ever have problems with downloading just simply refresh your rupple and then just go ahead and try downloading again and then it should be fine all right so now we have the zip file let's go ahead and open this up this zip file once it's opened up in your command line i want you to go ahead and cd into it so let's go to our downloads and we're gonna find where that is so solidity template two or whatever okay so i'm gonna go ahead and do template let's see if it's cd solidity template 2 perfect so now i'm inside of this okay folder and now once you're here first things we want to do is this we want to go ahead and install truffle if you don't have it on your local computer just do yarn global add truffle okay or ndx global or npm global at install truffle whatever okay so you're gonna need that okay you need to add it globally you can't if you do it locally it still won't work so make sure you install it globally and then it'll work okay so now we installed truffle globally now what you want to do is cd into the backend folder and you want to do truffle dashboard and this is super cool it'll actually open up a truffle dashboard and you want to deploy it with your own specific wallet address so it allows you to do that so you can actually click meta mask here all right and then it says hey confirm that you're on rankinb network and yeah i believe that we are so let's connect it okay so now it says there's a green sign here that says connected zoom in there perfect okay so now that it's connected i can get out and i can just hit confirm okay great so now this is good now let's open up our command line we'll leave this dashboard running and just open up a new tab okay so open up a new tab so this one is running or open up a new terminal whatever you want to do is whatever is easier for you okay now we cd into that same place solidity your cd into back end and what we want to do now is go ahead and do truffle migrate dash network dashboard okay so this will compile all our contracts so there's an error you forgot to put semicolon so i'm gonna go ahead inside of our contracts and i'll also make sure to put a semicolon here and here okay but more importantly we need to actually fix that on our local file so let's go ahead into our task contract dot sol and let's see if i can open it with code runner because it's just quick you could do it with vs code whichever one it doesn't really matter okay and i'll go right there wherever i'm doing the emits and put a put a semicolon here and a semicolon here and just save it okay i'm gonna get out okay let's open up our terminal again and let's try it one more time now it's deploying it look at that already popping up over here that is pretty freaking cool huh waiting for transaction signature please check your wallet for a transaction approval message okay so we're gonna go ahead and now hit process so let's hit process boom our wallet just opened up go ahead and hit confirm okay and now it's just deploying it to the internet okay or the blockchain rather and boom there you go it's been deployed now the very important thing that we need here is the contract address so double click copy that because that's what you're gonna need okay everything else you don't really need right now let's go back to our replit and let's open up our shell feels like a ritual feels like a crazy ritual cd into back end okay all right now that i'm inside of repple and i'm in backend i'm just gonna go ahead and do truffle compile so now once i compile it's going to make my api for me so let's go ahead and see that build contracts boom we have our task contract right here and task contract.json that's our abi aka our api and what we're going to need to what allows us to be able to talk to this from our front end okay so with that said data successfully compiled we're done with that now let's go ahead inside of our client folder so let's go here and we're going to go ahead and create a new file and this file we're going to call it config.js so just pretend like i didn't have this file okay so we're going to create a new one didn't mean to have that file okay we shouldn't have that file okay so let's just pretend you never saw that all right and go into clients and you're gonna make it because you're not gonna come with the config file okay so let's go ahead and by the time you're seeing this tutorial dutch problem should already be fixed and you shouldn't even have a config file so it's great all right now in the config file what i need to do is i need access to that specific contract address that i had copied earlier if you don't have it copied earlier just go ahead double click here copy it now okay and there you go that's the address so just to export const con task contract address equals that okay and this is going to be pretty important so make sure you leave that in your config file okay because this is the contract address we're gonna need to be able to speak to it from the front end so almost imagine like this is your access token okay you can need access to your access token now let's go ahead into our index.js and now we're ready to actually start writing up all of our code so we're going to go ahead and import task abi and we can just say from and we want to get to our task abi is coming from our back end task contract.json right here so we just need to import this file taskcontract.json so we gotta go into back and and then inside of backend where do we need to go into we need to go into build and then inside of that when you do into contracts and then go taskcontract.json okay if you copy linked that should that's actually a different link that's not the path so ignore i said that cool all right there you have it so now we're importing that address okay that's one thing that we need access to the other thing we're going to need access to is a contract address so let's go ahead and do import task contract address from and this is much closer to us it's just in our config.js you can hit that over there to just purify your code all right now that we have our task api and we have our task contract address now we're really ready to actually finish writing all this code because those are really some of the main things that we needed access to all right first thing we're going to do is implement our connect wallet function okay because that's going to be kind of the sim one of the simplest simpler ones and one of the most important and the first thing that happens so for that we're going to need ethers okay and ethers is something that you'll have to install if you don't have it already so we could just go and check if we have it all right let's get to work on connecting our wallet so the first thing i'm going to do is i'm going to pop it into a try catch block we'll add the catch as well okay and the catch is going to be just simple it's going to be hey there's an error just say air okay cool and then in the try we're gonna basically write all of our logic so i'm gonna say hey grab ethereum from window so whenever meta mask actually like latches on so to speak on your app so whenever you like log in with meta mask or whatever the window like the chrome window or the safari window or whatever you actually have access to a variable called ethereum okay so you could actually destructure that it becomes a property of window you could destructure that out of window okay so we're gonna grab access to ethereum and then we're gonna say if ethereum does not exist so it's like value is null or whatever then we're just gonna say metamask not detected okay and then we're just gonna end the whole thing just hit return it's kind of like a guard clause okay just make sure that's there okay all right we're gonna check the chain id and we're gonna get it from ethereum our request and the method that we're looking for here is going to be eth chain id okay that'll get us the whatever chain somebody logged on with that specific chain id okay and then we can just say hey this person connected to chain and then we can just write a chain id okay great so let's go ahead and set a rinkeby chain id and ringkiby chain id is 0x4 okay that will make sure that the user is on rank to be indeed rinkybee is a test network and it's also what mine what i named my cat after and then we're basically gonna say hey whatever the chain id that the user selected if that's not the same as the ringkiby chain id and in that case you're not you're not connected to the rank of b test net right and then we want to now start getting some state variables into play so let's go ahead and create a couple of state variables we'll just start off with const correct network we'll have set correct network okay and this we could set it as false in the start the network that's selected is fault like not the right one but then when it's set up correctly we're just going to go ahead and call this and say true because it's going to be the correct one and then we're just going to end this function because we got the wallet and we got the change so there's nothing to do anymore just end everything if that's not the case then basically we're gonna hold on let's see oh i'm sorry this should be false because you're not connected to the ring could be test network and then this one should be true okay that means yes we are connected correctly so there we go true okay once that's done let's get our accounts now okay so the account is this if i open up my meta mask yeah i guess i could open up my metamask here as well count three right so that's an account out of many other accounts so you can see i have multiple other accounts right one two three whatever so we're going to say accounts and we're going to await and do an ethereum dot request okay and we'll say method on this one is going to be let me hide this you can see clearly method is going to be request accounts all right once you do that it'll request the accounts and it'll open up that modal where it like hovers over and by modal i mean this thing right when meth metamask actually pops open so that's what that will do and then we want to do is we want to say found account and show the zeroth account or whatever the account that the user pretty much selected okay and once the account is set then we need to actually keep track of the account as well so let's go ahead and add a few more state variables so here i'm going to have is user logged in or not because we need to know that so we're going to say set is user logged in initial state is going to be false obviously let's also go ahead and import use date because we're going to need access to that so let's just do use date hit enter and it imported it okay all right it says user logged in perfect and then the next one i'm going to need access to is current account okay so we can actually say current account set current count and make the current account empty and so we can say the user is logged in at this point so i can say this is true and at this point current account we have access to that as well so we can actually say set current account and we can actually give it accounts of zero okay so both of those things are now done and at this point we're done with the connect wallet function okay now all we want to do is we want to connect the connect wallet function to our component connect wallet button so let's pass this function down because we're going to need access to it in this component so i'm going to say connect wallet give it connect wallet or function okay so we're giving it this function now let's go to connect wallet button and we can destructure that connect wallet and then we can add an onclick method so you see i even have these nice little notes here for you so you could just go on click and just say connect wallet so basically just run that function when i click it now let's see if we've done it correctly because if we've done it correctly it should be working perfectly okay so let's go ahead and say the user is currently not logged in so let's remove that and let's see what happens i'll hit refresh on here okay let's go ahead and open our reply make sure you do yarn cd into clients and then do yarn dev that should pop it open okay we should have a button coming up here anytime now all right we have this button right there let's go ahead and click that and boom look at that that popped open that is very nice let's make sure that we're looking at our console log as well okay connect it to cheon i misspelled it but whatever you get the point chain let's hit so this console log worked okay let's hit next let's hit connect and boom found account shrinkaby right that is awesome let's go back let's disconnect our account so we can go ahead click that fox go ahead and hit disconnect account you could change your chain as well so you could change from rinkaby test network so make sure you have wrinkly test network right so if you don't have rinky test network you're gonna go ahead and click you're gonna click here you're gonna click show and hide test networks and you're gonna turn on test networks and once you do that these test networks should show up otherwise you can go inside of your settings go in advanced and you could scroll down and you could see where it says show test networks and you could turn it on that way as well okay now let's say you do rawspin or whatever connect wallet and it says hey you're not connected to the ringtobe test right so that error comes up right away and catches it so it seems like we are ensuring that the user is indeed connecting with rinkeby test network and then it pops it up and then it allows you to connect we can hit connect and boom there we go and then it pulls the account that you connected with specifically so far it's working beautifully all right next up since we're done with our connect wallet function and it works perfectly next up we need to work on get all tasks so we should be able to get all of our tasks or rather let's actually first add the ability to add a task okay so let's look at this code right here note right here it says add tasks from front end onto blockchain so we all we need to do is we need to just complete this function now okay add task how is that task going to work first of all we're going to go ahead and prevent default because it's going to be a form we're going to fire off on and this will avoid a refresh okay so this is avoid refresh that's all all right and then and then what we want to do is we want to do we want to create a task okay and this task is going to be the text is going to be whatever the user inputs so this is going to be a state variable that we're going to keep track of and this will be false because whenever you create a task initially the it is deleted will be false so let's go back up let's keep track of input as well so we're going to say input set input and use state use state and it's going to be empty okay all right so there we go and then what we're going to do is we're going to try we're going to have a try catch block here okay and the catch is just going to be simple the catch is just going to catch the error and then it's going to just console log the error okay all right so now for our tab for our try block rather we need to pull some of this code is going to be repetitive some of it you've already written we're going to get access to ethereum and then what we're going to say if ethereum so if it exists and your log ethereum is there then what i want to do is i'm going to grab the provider so we're going to do ethers dot providers dot web 3 provider and give it ethereum okay so in other words we're gonna give it like it's really meta mask even though it says ethereum here this is like actually metamask okay so that's really what's happening here so this is really meta mask and we're passing it the metamask provider okay hopefully that clarifies it for you and then what we're going to say is going to say hey grab the signer aka the person who just signed it and then we're going to call the co our task contract okay now we're ready and we're going to do new leaders contract and so we need to create this contract we're going to get our specific contract so for our specific contract it's going to need access to our contract address is going to need access to our abi okay and then we're also going to need access to our signer so now this will allow us to get access to task contract and all of its methods like add task delete tasks get my tasks everything that we created in our smart contracts if i go to our sol file or task contract file this will have access to all of these now okay so let's go back to our index and now that we have access to all of this since this is the add task function which method do you think we'll need to call after we get access to all of this simple after this we need to actually call our task contract dot add task and we need to grab our task text give it that and we need to give it is deleted okay so here for example is our task this will be the input that the user gives and this by default will be false okay great task and we can then do you know since this is going to be a promise we can then just get the response you don't really need to do much with the response and now we'll just set task set tasks rather and so make sure we we want to create a a state variable that keeps track of these tasks as well so we're going to say tasks set tasks okay and i'm going to say use date and in the start it's just going to be an empty array and so we're going to say set tasks and now we're really just going to say whatever tasks was previously plus that new task we just end added so this is really just appending to our task array okay that's really what it's doing and then we can say console log completed task or added task okay perfect and then what we want to do is we want to add a oops i want to add a dot catch and we want to say it error and then just console log the error okay perfect so we have this if and then to this if we want to write an else and we just want to say console log ethereum object does not exist okay so just in case we like don't get that ethereum object cool so now we can actually add a task and all we need to do is we need to connect it to our front end all right so what does that mean what that means is let's go ahead and let's put it in a state of that the user is logged in so i'm going to go ahead and hard code that oh sorry actually we don't even need that anymore we could actually put the actual dynamic state and we can just say is user logged in and if the user is not logged in then they'll show at this button and then if the user is logged in then it'll take us to the next thing okay so let's go ahead hit connect wallet let's go ahead and without this let's refresh okay great and let's see are we actually connected or are we not connected okay cool we are connected let's change this user logged in save it let's go back boom now let's see what happens once we connect so i'll go ahead hit connect wallet let's choose connect and boom it brings me in okay so this is the final version and we can leave it like this okay so this is already working dynamically if i disconnect it should take me back to the home page let's go here let's try disconnecting okay let's refresh boom it brought me back to the home page now let's try it one more time try connecting and it brought me back to the todo list app page okay so our is user logged in like that one is working correctly now for this add task this function needs to fire off when we add a task but when i do this and i hit plus but the thing is that this plus sign doesn't have a on click functionality so we need to keep track of whatever the user is typing in here plus we need to actually when the user clicks this we need to add an on click functionality and we need our add task function to actually fire off when the user actually clicks that and right before we do that let's just go ahead and make this dynamic as well so i'm going to say correct network question mark that's it okay so this part is now fully dynamic and it's working okay so now going back to our add task right our todo list let's go into our todo list component our todo list component has a form and then it has this plus button so we have these little notes here right that says hey take the input from here because this is the actual input and the form part and then it says hey add an on click right here to that circle okay so that's that circle right there so we're gonna add both of them so the first thing we need to do is we actually need to update the input from the user okay so we're gonna go back to our index and we need to actually pass the set input hook set input that way we can actually update the input based on whatever the user finds right to set input so that's one thing we also need to give it the add task function so let's go ahead and go add task okay so now we've given it both let's go back into todo list and let's destructure set input and list the structure add task now let's go down and one more actually thing we need to give it to is input because todo list is gonna need access to whatever the input is at any given time so let's go ahead and send it input as well okay let's go back to our todo list all right now right here i'm going to say value is input and then we need to on change so we're going to say on change okay set input to be the target value okay so whatever we're typing in so this is like a pretty common react thing if you're fuzzy on this like you could watch my other react videos and next videos i go more into detail on this type of stuff and boom so that should take care of whatever i'm typing in okay and then the plus button we need to add the add task function to it so we need to go on click add task okay so that's about it okay that's about it so let's go ahead and let's go write the word eat a cookie let's hit the plus button and let's see if anything happens boom look at that it popped open and it's asking for a confirmation and it's gonna charge me something i'm gonna hit confirm and you can see in the console log it says added a task that is so cool so we were able to actually add a task eat a cookie eat a brownie okay that's the second task let's click plus sign and it's working let's go here and let's hit confirm boom you can see that it says added task was ran twice so we eat a cookie eat a brownie eating lots of food here now you might be wondering hey how come all tasks are not showing up that's because we didn't actually finish writing that method so once we finished writing that method it will actually work okay and now if you're wondering hey why does it log us back out we need to actually just write a use effect hook okay so we're going to go ahead and say use effect let's import it and what we need to say in our use effect hook is simple we just need to run our connect wallet right when our app runs so now if i refresh plugged in automatically okay very nice all right great so far app is looking very good it's doing what we needed to do but now what we need to do is we need to be able to retrieve all of those tasks and then show them onto the screen all right now let's go ahead and get all of our tasks okay so this is like really one of the key methods that we're gonna create because it's going to get obviously all of our tasks so some of the code is going to be repetitive and for that we can just copy this so let's actually first write our try block in our get tasks let's go here i'm going to say try and then catch and whatever error we get we're just gonna console.log that error okay and now in this try catch block some of the code is gonna be simple for getting up to the task contract so i'm gonna copy this and paste it okay so this gets us the task contract address why is it complaining there we go okay cool and now we need to actually get all of the tasks so we need to go ahead and say let all tasks and i'm going to say await task contract dot get my tasks and then we can just say set tasks to all tasks just like that all right else cerium object does not exist okay boom there we go so that right there should actually just get all of our tasks we're getting all of our tasks we're setting all of our tasks so now all we actually need to do is in our todo list well our todo list need ask act needs access to our tasks and then we need to destructure it here tasks and i have these notes here that says hey just loop through all the tasks using the task component so we're going to go ahead and just do that now so in our todo list let's go right there and i'm going to say map and for each item i want you to do the following okay you're going to call the task component all right it's going to be self closing and then the properties we're going to give it is for key it's going to be just item.id task text is going to be item.task text and on click we're going to give it an on click but for now let's leave it okay so on click delete task that's what we're gonna do so i'm just gonna leave that commented out cool now it's okay task could not find this component so we need to actually just import this component and then we should be good so we have created this task component right over here okay so we just need to import that so import task from task all right and that should get access to it and then we just render out the task component and now let's take a look so let's go back to our app let's hit refresh and let's see if it gets if it's able to pull any of the tasks that we've created thus far ah i discovered it okay so we have to actually call get my task we're never called it so how will it know so we need to get all tasks like pretty much right when our app loads and then it's gonna get all the tasks and then it's gonna do the thing okay there we go that was the problem that was happening because you can even see it says hey get all tasks is declared but it's actually never ever used so let's bring that bad boy back let's go here let's refresh and let's see fingers crossed hopefully our tasks should show up all right so we're making some progress so it's not writing out what those tasks are okay so something is happening with the task text let's just take a look task text is the input of the user yep also at the end what we need to do of this add task that we actually forgot to do at the end was we need to make sure that once you hit submit you just reset it to empty like this okay once you're done writing the task just set it to empty okay let's try eat a cookie let's try now and let's hit this okay let's hit confirm and let's see if we have better luck this time we do not have better luck this time all right let's to debug this problem let's just add a console log here and say hey just console log all tasks and now when you go back actually and if you refresh watch what's gonna happen keep an eye on the console log and look at that okay so i'm gonna make it a little bit bigger so you can see that's what he said and here you can see that i have all my tasks showing up okay eat a cookie eat a brownie eat more eat a cookie so lots of cookie eating tasks were there and then we have task text you could see there so our tasks are working correctly they're just not showing up the way that we want them to so we'll fix that now so basically what this tells me is that it's just not being rendered out on the front end so for example if we follow the logic down we're passing tasks todo list so let's go inside of todo list i commandclick it we're destructuring tasks and then we're looping through tasks so the culprit might be this task component let's commandclick into this and if we look here this is the component that should actually be showing the task because this here is the task component right there like this specifically so why is it not showing the task i don't see task text anywhere even though we're passing a task test it's not really doing anything with it so we need to actually destructure and go task text and then we need to actually show that task text right here task text okay so once we do that let's go back and look at that here we go let's say drive a ferrari that's a task let's add it in so so good thing was it was a front end problem it was in a back end problem our back end was working perfectly and boom drive a ferrari now we need the last thing we need is to make these delete buttons work so let's go ahead and add the delete functionality okay now let's add the delete task functionality so for delete task functionality it's not this one is not going to be super complicated this one is actually going to be fairly like straightforward what we need to do is there's going to be some bits of repetitive code like for example our try catch block so try and then we're going to say catch error and then just say console.log error okay and then we actually need to get access to our task contract address so we're just going to repeat this piece of code right here all right so this just runs and the whole point of this is to get us access to our task contract address let's close out this if statement right here and else will just be console log therium does not exist or whatever okay and now within this if statement is where all the magic is going to happen and we're going to go ahead and delete the task so we can just say await task contract delete task and when you delete a task we're going to give it a key okay that key is actually going to be passed in already okay that key is basically going to be like this so for example if you delete this task right over here this task already probably has the key of 5 because we gave it that key if i go to our todo list we gave it that key right over here the item.id and the id is incrementally loops from zero one two three four five six so on and let's go back into our index so that key is already there so we're going to give it that key so it's like giving it a delete the eat the cookie task aka delete the task with the id of zero and set its deleted value to true okay so now it's deleted value is set to true so we're going to do this okay and then what we want to do is we're going to say let all tasks okay and you could store this so you could say const cons delete task transaction and you could console.log and say successfully deleted and then pass in that transaction and let's put a little tada emoji in there and then we're just going to go ahead and await task contract and get all of our tasks again get my tasks okay and then set all of these tasks so now we're gonna set all of the new tasks because now it's gonna send it to our back end so we're just labeling a task as quote unquote so we label a task as hey this is marked as deleted then we send it to our back and filters it once it filters it okay so once we're done it filters it we on our front end retrieve all of the tasks again from our back end or blockchain part and then we just set those as the new tasks and then we're done okay so this is the delete task functionality and delete task functionality is now completed now who needs access to delete task our todo list is going to need access to delete tasks and the reason for that is our component task is gonna need access to it okay so it's like a little bit of prop drilling but not too crazy okay so let's go ahead and do delete task okay and then let's go to our task components and we're gonna go ahead and say on click right on click we are going to delete task and give it the item dot id that's it okay and that should really delete it so let's go ahead and drive a ferrari let's go ahead and delete this task okay let's go ahead and refresh save a few times and delete okay nothing is happening right now so what's the problem delete task okay we're destructuring delete task let's go into index we're passing delete task is being passed so all of that is good actually i don't think we need to add this here we need to actually give this on click all right so we're going to need to give this on click to delete tasks so we're going to go ahead and say we're going to pass this function delete task and we're going to pass that down so i don't think we need to actually add that here okay so let's go to our delete our task component now okay let's go to our task component inside of our task component let's go ahead and delete tasks let's destructure delete task okay and then here we're going to add an on click so on the garbage can is where the on click takes place and we're going to go ahead and say delete task okay on click that's what should happen now let's give it a try i think this is to me is looking right now let's go ahead click drive a ferrari try to delete it so refresh we get an error to show us what there is to oh yeah we need to give it the specific item id so let's go ahead and do actually what we could do is we could do it this the other way let's go back to our todo list and here we're actually going to give it an on click and the on click here is going to be delete task and that specific item dot id and it was going to task let's go ahead and destructure on click and then we're going to give it the on click okay so that way we have access to item id and we don't have to like destructure and pass down the item id okay cool so let's go and try it now remove drive a ferrari and there we go now it's popping up beautiful let's go ahead and hit confirm on that so that transaction it says successfully deleted okay now if i go ahead and refresh my app okay let's see sometimes it takes a second so let's give it some time and there you go okay so yeah while it says successfully deleted and you get the transaction id on the blockchain it still needs to verify it that takes some time so once it's fully verified it can now then it deletes it so now when i refresh and i go here you see the ferrari one is actually gone so now if i create a new task let's go ahead and hit the plus sign so when i hit confirm this will add the task okay boom where we got a new task and now i can actually hit let's go ahead and refresh and where's my new task go okay now it's actually there so even creating tasks takes a second okay so that's why you have to wait a little bit and now i can actually remove it okay so successfully removed i have the hash the removal but it's going to still verifying on the back end right the blockchain side so see now the new task has been deleted and it is not there guys this is amazing if you've gone this so far huge props to you alright so i really hope you guys enjoyed building that todo list app and you got to learn a ton of solidity con concepts how smart contracts work how you actually interface your front end with the blockchain component it's mindblowing stuff and we had authentication in there so if i actually log out and i log in as a different user you won't see these tasks there and you won't be able to delete these tasks and you won't be able to interface with them so we have all of that and then some and it was so quick and so nice and we didn't even use a database which is mindblowing and cool i hope you enjoyed it huge credit and shout out to code with kavit you should check out also his video huge shout out to him so for a lot of the ideas in this video and some of the code for the code for the smart contract and a lot of the inspiration okay so that was really awesome and so thank you code with kavit the huge shout out to you and again guys as always i love your beautiful face thank you so much for watching and i'll see you in the next video
