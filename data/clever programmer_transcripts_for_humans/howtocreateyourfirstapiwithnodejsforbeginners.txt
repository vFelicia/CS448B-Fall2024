With timestamps:

00:00 - here with me today actually it's not
00:02 - just someone
00:03 - it is it is a something that i like to
00:06 - call
00:07 - the pwg community everybody
00:11 - say hi what is up hope you guys are
00:13 - doing amazing
00:14 - everybody say hi
00:22 - guys guys i am so pumped this is the
00:24 - amazing community as you can see right
00:26 - here you know prophet joshua community
00:28 - and again the link for this community is
00:30 - down below in the description if that's
00:32 - something you're interested in right
00:33 - but today together with you know with
00:36 - at this point 62 people we are going to
00:38 - be learning how to build a node.js api
00:41 - and so guys guys i'm going to go ahead
00:44 - and share my screen
00:45 - and let's go ahead and get started are
00:47 - you guys ready are you ready
00:49 - i want you to still raise your hand if
00:51 - you're ready raise your hand if you're
00:52 - ready yeah
00:53 - there we go there we go i love it
00:56 - i love it okay okay i see
01:01 - comments coming in from youtube that's
01:02 - it guys i just i want to know you are
01:04 - live right now just so you know
01:06 - all right so sweet share this share all
01:09 - right
01:10 - so we're gonna get started here
01:13 - right now so today one goal
01:17 - is to create i know just bi we currently
01:19 - have we currently are working on what
01:21 - we have a i'm going to open up my file
01:24 - open recent and i'm going to open up my
01:26 - netflix clone so make sure you guys have
01:28 - your necklace going on here
01:29 - i'm going to put that here right there
01:32 - i'm going to make this a little
01:33 - less it's a little bit too large
01:38 - let's
01:43 - all right guys
02:27 - hello hello hello hope you guys can hear
02:29 - me hopefully you guys can hear me right
02:30 - there
02:31 - can you hear me say talk guys can you
02:32 - talk
02:35 - oh i can't hear you
02:39 - hold on
02:45 - hold on
02:51 - talk hello
02:54 - there what happened what happened
03:00 - really wasn't that bad
03:05 - wow wow
03:08 - my bad guys not my bad
03:12 - i don't know what happened my bad my bad
03:14 - guys my bad guys
03:16 - i'm i'm trying i'm trying
03:21 - all right from the top okay
03:24 - from the top i'm gonna take this slower
03:25 - slow okay
03:28 - so like i said you know the goal is
03:30 - pretty simple for today
03:32 - uh go ahead and go ahead and download
03:34 - this videogenetics clone
03:35 - go ahead and code this up so i will have
03:38 - the link right here
03:39 - uh so copy this i'm going to put it in
03:41 - the chat here in a second
03:43 - i'm sure you guys have in the chat
03:44 - correct let me see
03:47 - in the chat and the chat in the chat
03:48 - there we go beautiful put that in the
03:50 - chat awesome
03:51 - sweet sweet sweet sweet sweet that is
03:53 - all good i thought
03:55 - somebody said i thought i was laptop
03:57 - making my noise
03:58 - yeah it's weird i don't know i have to
04:00 - get that road caster that i think that
04:01 - will fix actually a lot of problems for
04:03 - us
04:04 - so if you have your if you have your
04:07 - what's it called
04:08 - p division fx cone raise your hand up
04:10 - here up high yes
04:12 - yes you got it beautiful beautiful
04:15 - all right and so what we want to do at
04:18 - this point is we have literally one goal
04:20 - which is we need to we want to create
04:21 - our first node.js api
04:23 - for today and because
04:26 - we are going to doing one thing and one
04:28 - thing only which is
04:30 - if i go ahead and say do we're going to
04:32 - create a login
04:34 - so we want to create a login
04:38 - login for for netflix cone right here
04:42 - right there and let me actually go ahead
04:44 - and
04:46 - and i will go ahead and i will post the
04:48 - latest that we have from
04:50 - the last time so we'll say add
04:53 - what was the last call november what
04:57 - november november 5th right
05:01 - number fifth yeah
05:05 - save that get push
05:09 - origin master
05:13 - there you go okay all is good there
05:17 - beautiful beautiful all right
05:20 - guy youtube youtube how you guys doing
05:22 - great great to see you all
05:24 - great to see you all all right so i went
05:26 - ahead and i
05:27 - uploaded so it should have the latest
05:29 - stuff on here as well so go ahead and
05:30 - download that from
05:32 - for yourself as well so cool cool cool
05:34 - cool beans
05:35 - all right next up so to download
05:39 - let's talk a little bit about how this
05:41 - whole thing
05:42 - works how do we create a node.js api how
05:44 - do we create a log authentication
05:46 - and i want to use for example i'm going
05:48 - to use
05:49 - uh something called draw y'all to kind
05:50 - of show it to you guys so you know
05:52 - as well so let me see let me see let me
05:54 - see
05:58 - see remind me later here there we go
06:02 - create new diagram create your diagram
06:05 - i'm going to create this diagram right
06:06 - here
06:06 - so you guys can see exactly exactly how
06:09 - we're going to
06:10 - talk about this so let me ask zoom yes
06:13 - this is zoom guys this is what the
06:14 - amazing prophet joseph community as you
06:16 - can see
06:17 - look at this beautiful community
06:19 - everybody is
06:20 - learning everybody is out here to kill
06:22 - it and
06:23 - start for development is that right
06:25 - isn't that right guys isn't that why
06:27 - we're here
06:28 - so all right can you guys hear me by the
06:31 - way right
06:32 - say hi okay cool cool
06:35 - cool yeah so
06:38 - authentication so we have our netflix
06:40 - going correct yes or no
06:42 - we have our netflix clone all right let
06:45 - me go ahead and actually take a picture
06:46 - of it and i'll take a picture if i go
06:47 - ahead and go into
06:48 - html if i open this up
06:51 - open my live server
06:55 - okay it should be here
07:00 - there we go there you go somebody said
07:03 - joe and peter
07:03 - johnson yes yes exactly
07:07 - so this is our netflix clone that we
07:09 - have built in html all right so let's go
07:11 - ahead i'm going to take a picture of it
07:12 - here for a second so we can
07:14 - use this command 4
07:21 - that's it right there okay
07:24 - and then i'm going to go ahead and put
07:26 - that
07:28 - on here actual size
07:32 - damage too big okay resize it fine
07:40 - hold on what is this guys i don't wanna
07:42 - that was interesting jennifer
07:45 - that's very interesting
07:49 - where did my screenshot go
07:59 - one second
08:02 - oh in the meantime guys i want you to
08:03 - open up draw yo okay if you have a draw
08:05 - you open i will
08:06 - let me know i mean i want you guys to
08:09 - open up draw your because i don't want
08:10 - to be the only one who's uh who's doing
08:12 - this stuff
08:15 - there we go beautiful so we have our
08:18 - netflix clone it's right here
08:19 - okay it's our netflix clone and so now
08:22 - the goal
08:23 - is what the goal is pretty simple we
08:24 - want to log in right
08:26 - so we want to create a login page for
08:29 - our netflix clone
08:30 - right here our login page this is going
08:33 - to be
08:34 - our login page okay login
08:37 - right there let's increase the size here
08:40 - to about 18
08:41 - no it's increasing even more
08:44 - right there sweet beautiful
08:50 - okay so and our login page is going to
08:52 - be pretty simple guys how does it what
08:54 - is the login
08:54 - page usually have you tell me
08:58 - what is usually what does the login page
08:59 - have tell me guys tell me
09:04 - username and password right so we have
09:06 - username and password so i'm going to
09:07 - put in an input here for using my
09:09 - password
09:10 - right here just like this
09:14 - okay and then i'm going to do alt oh no
09:17 - i'll do command command
09:19 - command hold that's gonna be password
09:20 - right so we'll have
09:22 - username this is going to be user oh
09:26 - we'll say email
09:26 - how does email sound does email sound
09:28 - good
09:30 - right yes or no beautiful i'm gonna do
09:32 - command shift
09:33 - bring it down password right
09:38 - and then with that we're going to go
09:40 - ahead and create what
09:41 - so oh [ __ ] what is this like this hold
09:43 - on
09:45 - there we go beautiful
09:48 - nice nice nice nice all right a lot of
09:52 - i love how people on youtube are also
09:54 - answering username email password
09:56 - confirm password
09:58 - somebody said let's include passport gs
10:00 - okay okay okay
10:01 - so beautiful now with that then what
10:03 - else do we have after this
10:06 - those do we have a button
10:11 - yeah so let's do a button so we'll do a
10:13 - button it's a submit button correct
10:18 - so would you like a submit button let's
10:20 - see and button like this
10:22 - there we go can i change the text in
10:23 - here yeah i can't submit
10:26 - or we'll say login how about that does
10:27 - that sound good
10:30 - login nice so now now this is a very
10:34 - simple
10:34 - simple version of uh this is a very
10:36 - simple version of a log and obviously
10:38 - you know we can make it fancier guys
10:39 - okay
10:40 - and actually maybe you can make it
10:41 - fancier and what happens after this
10:43 - after this what happens is
10:44 - that obviously logs you in to here right
10:48 - but before but before all this happens
10:52 - we need to talk about what happens in
10:53 - the middle like
10:54 - what actually happens in the middle here
10:56 - let me go ahead and put that here
10:58 - because there's a lot that's gonna
10:59 - happen here in a second
11:02 - there's a lot that's going to happen
11:03 - somebody said this is figma now this is
11:05 - draw yo guys
11:06 - this is draw yo not figma draw yours is
11:09 - free
11:09 - very nice free version which is this one
11:11 - that's what i like
11:12 - before now i want you to list out guys
11:15 - what happens here in the middle
11:17 - somebody tell me what happens between
11:19 - the login page
11:20 - and what happened and when we actually
11:22 - get onto
11:24 - when we actually get onto the netflix
11:26 - page what happens something tell me
11:30 - so man so let's think about this here
11:31 - for a second for a second let's talk
11:33 - about this let's say we have a node.js
11:35 - this is a node.js am
11:37 - api okay this is a node node
11:40 - js api all right this is another gs api
11:46 - okay all right what
11:49 - is going to happen i want you to give me
11:51 - the flow go
11:53 - somebody tell me
11:57 - what do you guys think
12:04 - okay so let's think about okay great
12:06 - good good good good
12:07 - so what's going to happen here so inside
12:09 - this node.js
12:10 - api uh i'm going to do it like this
12:13 - actually
12:14 - inside this node.js api
12:17 - i'm going to remove this part right here
12:19 - because i don't want that actually that
12:20 - part
12:23 - trying to make it so it's easier to
12:25 - follow let me see how can i do it like
12:27 - this
12:27 - yeah i'm gonna do like that there we go
12:29 - and i'll put the text on here for
12:30 - node.js api ah this is
12:33 - i don't know is it me or do i i just
12:35 - love sometimes
12:36 - drawing drawing diagrams more than even
12:39 - coding
12:40 - is it just me raise your hand if you're
12:41 - like me
12:45 - yeah i just love sometimes just drawing
12:47 - diagrams so like i know what's actually
12:48 - going to happen you know what i mean
12:50 - there's something about that okay text
12:55 - yeah yeah yeah exactly all right so not
12:57 - just api
12:58 - now so before we even what do we
13:00 - actually go what do we actually
13:02 - take to the node.jspi what do we go to
13:05 - the nitrous api like
13:06 - what do we send when the user hits
13:09 - clicks login what happens
13:17 - okay okay so we sent the email password
13:20 - so let's go ahead and do that
13:22 - and guys go ahead
13:30 - yes but where do we check the if the
13:31 - email is valid before we do that hold on
13:34 - guys who's very loud who has a loud
13:35 - background hold on
13:36 - hold on somebody has a very loud black
13:38 - wish i don't like this
13:44 - somebody has a very loud background
13:46 - which i'm not a big fan of
13:50 - okay i'm going to mute you all for a
13:51 - second here okay guys i'm going to new
13:53 - york actually
13:54 - someone can somebody help me with the
13:55 - meeting portions
13:57 - uh brandon brennan you just raise your
14:00 - hand go ahead brandon how about i'm
14:01 - gonna make you the co-host
14:02 - there you go so brandon just mute
14:04 - everybody okay
14:10 - mute everybody you got it
14:17 - yeah go to participants yeah i make you
14:21 - look
14:21 - awesome i mean you go you should see it
14:25 - and then mute all here i'll do me all
14:29 - here
14:31 - oh maker host
14:34 - now you're the co-host there you go
14:36 - brendan now you're the co-host there you
14:37 - go
14:38 - my bad i thought i made you the co-host
14:41 - okay beautiful
14:43 - so guys and then go ahead and meet
14:45 - yourselves now at this point
14:48 - so with this point on we're going to
14:50 - send something and i'm going to send it
14:52 - i'm going to send something like this
14:54 - so this is another js api and i'm going
14:55 - to send data from here so i will go
14:58 - ahead
14:58 - and i will go here and to here
15:02 - we're going to send some data what is
15:04 - the data you guys said email and
15:05 - password correct so we'll send out
15:07 - email data email and then it's going to
15:10 - and it's going to look a little bit like
15:11 - this we'll say
15:13 - probably email
15:17 - right here boom boom boom
15:21 - right there so it's going to be an
15:23 - object somehow somehow like an object
15:24 - this is how we'll send data
15:26 - we'll say email and that's going to say
15:29 - uh just an example
15:30 - might be something something at a
15:32 - gmail.com right
15:34 - boom right and then password
15:37 - yes or no give me a yes or no
15:41 - yes or no great password and the
15:43 - password is gonna be let's say one two
15:44 - three
15:45 - whatever the password is whatever the
15:46 - person puts in okay great
15:49 - so this is the data we're going to send
15:51 - to to this
15:52 - it's request and this is going to be a
15:56 - api api request this is what we'll call
15:59 - an api request
16:02 - okay and i'm going to talk a little bit
16:04 - about what an api actually is here in a
16:05 - second
16:06 - but okay think of an api just this layer
16:10 - where
16:10 - all the stuff in the background happens
16:12 - okay where all the stuff in the
16:14 - background happens
16:15 - so when we send this data to our api our
16:18 - server
16:19 - what do we do first here i'm going to
16:21 - put this on here and i'm going to make
16:22 - this stuff is going to be
16:24 - blue so what happens first when we
16:27 - receive that data
16:31 - what happens first huh
16:36 - convert it to what
16:42 - okay that's fine convert to json but i
16:44 - want to go a little more high level
16:48 - authentication okay i want to go a
16:49 - little bit more now no less
16:51 - high level
16:57 - okay great but what what what do we do
17:00 - with this data we're given this data
17:02 - guys what do we do with that data
17:08 - say say again steven say again steven
17:14 - i don't know about that because
17:19 - so no no no you guys are going way too
17:21 - intricate forget
17:22 - hashing forget all that stuff guys this
17:24 - is the issue
17:25 - a lot of times you guys think you need
17:27 - to think a little bit simpler
17:28 - right when we send this data to the
17:31 - node.js api
17:34 - we're like okay we're going to ch
17:37 - our goal is not very simple check
17:41 - if if the password using it
17:44 - check if the email password
17:47 - exists is valid
17:50 - yes or no yeah thank you oh my god
17:55 - check if you're like hashing json
18:01 - hold on you got to think about the
18:04 - simplest thing first so check if email
18:06 - and password is valid
18:10 - it's as simple as that
18:15 - okay and now let's think about this okay
18:19 - now if it's valid this is a i call this
18:22 - as um this is a decision tree right here
18:24 - whenever we use like a marker like this
18:25 - guy this
18:26 - it's called it's called decision tree
18:27 - just so you know it's like a decision
18:30 - so for example here i'll say
18:33 - valid yes or no so if it is
18:37 - valid if it is valid
18:41 - what do we do if it's valid
18:48 - okay great but what do we send back to
18:50 - the to
18:51 - our front-end page what do we send back
18:57 - yeah so we tell so yeah so we go ahead
18:59 - and tell so i'm going to do this here if
19:02 - it's valid
19:04 - it's going to go to our i'm trying to
19:07 - figure out how to properly you know
19:09 - close this it's literally going to go
19:11 - ahead
19:12 - and go to this page yes yes so this is
19:16 - yes valid it's going to say hey
19:19 - success and then what it's going to do
19:21 - if i'm going to copy this portion
19:25 - and this is again this is a very high
19:26 - level there's there's a lot of stuff
19:27 - that's going to happen underneath
19:28 - underneath you know
19:30 - but at the end of the day we're going to
19:31 - say that
19:35 - this is remove this this is valid
19:39 - would you would you agree with me on
19:41 - this one
19:43 - okay great so it's valid so all is good
19:45 - so it's gonna make it green
19:46 - okay now what do we do
19:50 - what do we do if it's not valid though
19:59 - [Music]
20:03 - okay yeah so on the login page and the
20:05 - login page what do we say
20:08 - what do we say in the login page
20:11 - yeah so we'll say something for example
20:13 - we'll say like so if it's not valid
20:15 - we'll say no
20:16 - and instead we will say i'm going to ah
20:19 - there we go i'm gonna put here this here
20:21 - and we'll say not valid so
20:25 - and we'll talk about how that actually
20:26 - works on you know on the technical side
20:29 - of things
20:29 - but i'm not val and we'll say um
20:32 - incorrect username pass all right
20:35 - or try again right
20:39 - incorrect username name such
20:42 - password
20:46 - does that make sense
20:51 - does this make sense you see
20:54 - we go to here here chuck the email
20:56 - password is valid
20:57 - if it's valid if it's valid then boom we
21:00 - go to the
21:01 - uh do the action netflix store if it's
21:02 - not valid then we go boom
21:04 - we go back to the login page and we say
21:05 - hey you know what you gotta enter the
21:07 - correct using my password all right
21:11 - okay sweet now now
21:15 - let me let me can i try something here
21:16 - for a second
21:21 - talk no you guys still hear me by the
21:24 - way is that everything still yes
21:27 - oh there we go now they can hear you too
21:29 - some seems like it's all good now they
21:30 - can actually hang out too as well
21:33 - all right sweet so we got that portion
21:35 - that's all good
21:36 - that's so good now all i need at this
21:39 - point
21:41 - is what i want to talk a little bit
21:43 - about raise your hand here
21:47 - if you know what is a api
21:52 - raise your hand
21:57 - okay so you know what an api is
22:01 - okay raise your hand you don't know what
22:02 - an api is
22:05 - okay okay so we have a few people who
22:07 - don't know what api is okay that's
22:08 - that's that's that's completely fine
22:14 - okay can you see me now guys there's no
22:16 - lag right there's no lag
22:19 - yeah there's no lag it's all good now
22:21 - yeah yeah no lag okay beautiful
22:23 - so okay great so what is an api
22:26 - because somebody explained to me what is
22:28 - an api
22:31 - and i go go ashwin
22:34 - yeah so ap is an application programming
22:37 - interface
22:38 - so it is a set of rules which allows
22:40 - like
22:41 - programs to talk with each other like a
22:44 - developer will create a program
22:46 - on the server and it allows the client
22:48 - to talk to it it's like a communication
22:50 - medium
22:52 - okay okay so an api is like just an
22:55 - option said it's an application
22:56 - programming interface
22:57 - is it god they always have some
23:00 - weird-ass
23:03 - naming for it's like can you explain
23:05 - this in layman's terms
23:08 - stands for application application
23:10 - programming interface account that
23:12 - applies everywhere oh no
23:14 - application is out there intermediate
23:16 - between uh oh there we go
23:18 - programs to talk to each other there we
23:19 - go this is much better okay
23:22 - the acronym it's called application
23:24 - program interface which is a software
23:26 - intermediary intermediate what is
23:27 - intermediate guys uh what is
23:29 - intermediary
23:32 - it's like a middle right it's like a
23:33 - middle it's a middle right
23:36 - jesse you're saying i'm trying to
23:37 - explain yeah can i try to explain see if
23:39 - i can understand you go let's go jesse
23:41 - let's go jesse come on
23:42 - you got this come on i think i think the
23:45 - api
23:45 - is um simply face it's an errand boy
23:49 - and you tell the errand boy what kind of
23:51 - data you want
23:52 - okay in order to get from that errand
23:55 - boy what you want
23:56 - you need to speak his language okay and
23:58 - then the
23:59 - errand boy or the api will fetch the
24:01 - data that you're asking
24:03 - okay request exactly i think that's
24:05 - perfect that's perfect it is somewhere
24:07 - where you
24:08 - go in and you get the data from correct
24:11 - what is aaron can you explain what is
24:13 - aaron boy like a
24:14 - messenger boy like uh i have to say oh
24:18 - it's a messenger or it's like a
24:19 - messenger boy yeah it's fanboy
24:21 - messenger waiter yeah oh really okay i
24:24 - have
24:24 - never heard that that word before for
24:26 - some reason
24:28 - sorry i'm i'm also not in english native
24:30 - speakers
24:33 - yeah what's the word like a waiter yeah
24:36 - yeah i get it i guess
24:37 - it's like the winner it is the waiter
24:39 - biscuit it is um
24:41 - almost i almost want to think about it
24:43 - it's like almost like um
24:44 - it's like if you have a kitchen like
24:46 - when you go to a restaurant right when
24:48 - you go to the restaurant
24:49 - right it's like let's say you're at a
24:51 - restaurant so let me go ahead i'm gonna
24:52 - create this white board here for a
24:53 - second
24:54 - i'm gonna say what no so the restaurant
24:56 - would be a database
24:58 - for example and the waiter would be the
25:01 - api
25:02 - and then the request would be your order
25:06 - you ordered uh-huh go ahead you talk to
25:09 - the waiter and then a waiter will go to
25:11 - the kitchen
25:12 - database to fetch your drink okay and in
25:14 - order to do that you need to know
25:16 - you know what language to talk to to the
25:19 - api because or the waiter because
25:21 - some apis they expect an object or a
25:25 - certain url
25:26 - for you to pick you know to get some
25:28 - data or sometimes
25:30 - yeah yeah that's so if we have if we
25:32 - have for example a restaurant
25:34 - okay if you have a restaurant and let's
25:37 - say
25:37 - a restaurant this is a restaurant and
25:40 - let's say
25:40 - here you guys can hear me right here
25:43 - this is the kitchen
25:45 - this is the kitchen right here kitchen
25:50 - this is the kitchen and you have the
25:53 - tables right so right here i'm gonna
25:54 - draw a few tables so one
25:56 - table table number two table number
25:58 - three but
25:59 - horrible tables but you get my point are
26:02 - they six feet apart
26:07 - they're they're they are feet apart
26:13 - so here right here right there uh
26:17 - right here and here these are the tables
26:19 - okay
26:21 - that's tables and and now
26:24 - let's say uh how can i draw a person
26:26 - like a waiter
26:29 - i don't know uh stick figure
26:34 - oh wait circle i got
26:42 - there you go this is going to be the
26:43 - waiter waiter okay this is going to be
26:45 - the waiter
26:48 - this is the waiter right here so that's
26:49 - the waiter
26:51 - now so if you want to think about
26:54 - okay what do you think
26:58 - if if okay the kitchen is where
27:02 - all the magic happens correct that is
27:04 - where the food this is where we get the
27:06 - food
27:07 - that is where we what's it called that
27:10 - is where so
27:10 - if you think about it so let's think
27:12 - about this okay
27:14 - so what do we what do in the kitchen
27:15 - what happens food is prepared right
27:19 - yeah what else happens in the kitchen
27:20 - yeah
27:22 - they take a order what to make okay
27:26 - they take the order the order is taken
27:28 - so the order order is taken
27:30 - okay okay what else
27:34 - crap they dispatched the order this
27:37 - patch would
27:38 - give a dispatch what does the dispatch
27:39 - mean um they take
27:41 - whatever the person ordered and
27:45 - it goes from the kitchen to the table to
27:46 - the actual table or actual person so
27:48 - they actually make the order
27:50 - yeah okay i like that bell right there
27:53 - so cook the order
27:54 - cook the order correct you're like
27:56 - dispatch the order it's like hey wait
27:58 - can you uh has my order been dispatched
28:01 - yet
28:03 - we're just going to slap me in the face
28:06 - i've never heard that before
28:08 - nice to meet you my drink is async you
28:10 - serve them
28:12 - i love it okay sweet
28:16 - okay so we cooked the order what else
28:19 - happens
28:20 - and then you call the waiter to bring
28:22 - the food out to the table
28:23 - okay so you call the waiter call the
28:25 - waiter
28:27 - the waiter okay okay and then also
28:30 - in the kitchen that's where we have all
28:32 - the ingredients right all the
28:33 - ingredients right that's where the all
28:34 - the
28:35 - that's where the ingredients are right
28:36 - so ingredients
28:39 - yes or no the good restaurants yeah that
28:41 - they don't run out
28:45 - yeah i think there's also a moment of uh
28:48 - validation
28:49 - you know when you order something and
28:50 - sometimes they come back right and they
28:52 - say oh
28:52 - today we don't have it anymore okay so
28:55 - like basically
28:56 - uh checking to make sure to stay
28:58 - checking to make sure if we have any
28:59 - more right
29:00 - yeah yeah why they would
29:04 - if we have something what is available
29:07 - if thank you if thank you make sure if
29:10 - food is available
29:14 - yeah like the same thing what happens
29:16 - when you're if the email
29:18 - exists in your database yes yes yes so
29:21 - yeah
29:23 - so based on this based on what you said
29:26 - how can we relate this to an api if
29:29 - if let's take let's think about like
29:31 - this this the
29:33 - tables that is the front end the tables
29:36 - right the table that is
29:37 - where the user is here the user is here
29:40 - correct so here we have one user saying
29:42 - you have another user sitting right
29:43 - that's the user right
29:45 - these are users so let's call this jesse
29:50 - right here so jesse is here sitting in
29:52 - this table and then near jesse
29:54 - we have i know i'll say devin
29:57 - devin okay and they're just sitting
30:00 - right now okay and they ordering some
30:01 - food
30:02 - okay so when you look at how we
30:05 - correlate
30:07 - correlate you know an api to a front end
30:09 - what will be the front end
30:11 - the user what is the user interacting
30:13 - with so currently
30:15 - the user is interacting with the front
30:16 - end so what is the user interacting with
30:18 - tell me food
30:22 - menu the menu yes
30:25 - the menu
30:28 - so the menu look at that we'll call it
30:31 - the menu
30:33 - the user interacting with the menu okay
30:36 - great
30:36 - so the menu or the let's say the user
30:39 - interacting with the whole kitchen just
30:40 - in general which is the front end right
30:42 - that's the user sees right they see the
30:43 - menu they see the front end they see
30:45 - other people yes or no yes
30:47 - so that what if we call that the front
30:50 - end what if we call the menu
30:52 - the table what the user interacts with
30:55 - you know
30:55 - with hands what if we call that
30:58 - the front end oh user interface
31:02 - user interface that's what the person
31:04 - sees
31:05 - nobody sees the kitchen yes or no
31:08 - yeah yeah but what do they see
31:13 - the tables the website the menu right
31:16 - that my friends that my friends is going
31:19 - to be so if i go ahead and click on this
31:22 - so if i have to click on this so if i'm
31:24 - going to create a line
31:26 - right a line so this is the line i will
31:29 - call this
31:31 - the front end right the ui
31:34 - here i'll call this a little bit here so
31:35 - it's this is the ui
31:38 - right so this whole line represents the
31:39 - ui
31:41 - give me a yes or no yes
31:45 - that is the ui and this the you this is
31:49 - the
31:50 - and the the jesse and devon they are the
31:51 - users now
31:53 - okay let's think about this here
31:56 - would you okay so here okay great so now
31:59 - so we got the ui
32:01 - now we have the knowledges api that is
32:03 - where we get the data let's say
32:05 - we want to check if the username and
32:07 - password is valid
32:08 - okay how do we check if the user
32:11 - password exists
32:12 - remember in the kitchen we said checking
32:14 - to make sure food is available
32:17 - do you see the correlation here
32:21 - no we check before we check through the
32:24 - menu
32:26 - i don't know about that the menu the
32:29 - menu can be old
32:30 - let's say let's say the menu the menu
32:32 - can be old
32:36 - the menu can be you know two weeks old
32:38 - all of a sudden for example for today
32:40 - something changed where that menu
32:41 - something doesn't exist on the menu
32:43 - you're not gonna you you're not going to
32:45 - create a new menu every single day yes
32:46 - or no
32:47 - i think we need to ask to the waiter
32:49 - wait or no
32:50 - available or not the winner knows robin
32:52 - that's correct the waiter knows
32:54 - yes the reader knows but what is how
32:56 - does the raider know
32:58 - asking the chef how does the waiter know
33:03 - who do they ask they ask the chef they
33:06 - ask the chef
33:07 - where is the chef in the kitchen
33:13 - so then what is the kitchen
33:16 - the database the database and
33:20 - backend backend the end
33:24 - hold on
33:28 - you guys can hear the dj air horn right
33:30 - you can't can't hear it yeah we should
33:31 - play the accessories
33:32 - damn it only the people on youtube here
33:36 - dammit
33:39 - [Music]
33:43 - i'm never looking at a restaurant the
33:45 - same way again there you go
33:49 - that's a nerd then you say
33:52 - hey uh waiter can you please fetch me uh
33:55 - talk to the
33:55 - fetchers
33:57 - [Music]
34:00 - i've never bring it to the front end
34:04 - please
34:07 - i'm making an http call uh to get the
34:10 - specific request exactly we know exactly
34:13 - exactly so if we think about it jess are
34:16 - you still here by the way
34:18 - okay great so you can see how the back
34:21 - end is the kitchen you see that here
34:23 - yeah that my friend and what does the
34:26 - bucket contain
34:27 - the back contains the api it also
34:30 - contains the database don't ace not
34:34 - database
34:35 - no database no damn it come on
34:39 - did a nas
34:43 - so that contains the database
34:49 - right
34:53 - okay great so we figured that part out
34:56 - now
34:56 - the big question is what is
35:00 - the waiter
35:05 - what is the vader waiter api is the api
35:08 - right
35:09 - no we just said the back end is the api
35:12 - we just said the kitchen is the api
35:14 - waiter is a request call like yeah
35:17 - yes there we go
35:21 - the waiter is the api request
35:25 - call yes
35:28 - so if you think about the waiter right
35:30 - right the waiter
35:32 - goes from where the winner goes from
35:34 - here right the waiter goes from the
35:36 - table the front end and they can the
35:39 - main communicator between the
35:41 - user and the kitchen is who
35:46 - the waiter the waiter exactly and so
35:50 - and on the logic side of the actual
35:53 - on how things work out in uh you know
35:56 - and you know in front
35:57 - and back and stuff right we have the api
35:59 - request which
36:01 - talks to the kitchen or talks to the
36:03 - data the api and then you know responds
36:05 - back with something yes or no
36:08 - yes yes so if we look at this this my
36:11 - friends is going to be
36:13 - a what an api request
36:19 - this is amazing
36:22 - [Music]
36:22 - [Laughter]
36:24 - ryan does that make sense totally
36:27 - so simple right
36:31 - right the only missing part in this like
36:36 - this is not
36:37 - relevant but just like hosting of
36:39 - service
36:41 - yeah the hosts in your servers yeah and
36:42 - we'll talk about that a little bit later
36:44 - hosting the actual this whole service
36:45 - yes
36:46 - but but the ui the backend the waiter
36:49 - they all take a big part this is
36:52 - literally this is literally called
36:54 - you know now you got your full stack
36:57 - this my friends
36:58 - is full stack this my friends is full
37:01 - stack development
37:03 - if you know both the ui and you know
37:06 - both the kitchen
37:10 - you're a full-stack developer so if you
37:13 - know how the kitchen works
37:15 - and you know how to create a really
37:16 - beautiful menu
37:18 - you're a full stock developer does that
37:19 - make sense
37:23 - okay so any questions before we move on
37:27 - on
37:28 - what is an api request what is an api
37:31 - and how it all works together if you
37:33 - have a question say
37:34 - or or you know
37:37 - or so where would the business logic sit
37:41 - the business logic well you tell me
37:47 - where do you need to sit between between
37:49 - the tables and the back end
37:51 - why do you think that's the business
37:52 - logic
37:57 - if the if the back end has the api in
38:00 - the kitchen
38:01 - where's the thing about this is the
38:03 - business logic in a restaurant
38:05 - where is all the preparing all the
38:07 - community
38:08 - all that's happening where is it
38:09 - happening tell me
38:14 - business logic happens in api like
38:16 - kitchen
38:17 - fit hold on one second fits what do you
38:19 - think um
38:23 - i think it will sit it too sick to sit
38:26 - at the back end but
38:27 - before it gets to the api
38:31 - well yeah yeah but but in general where
38:34 - does it sit
38:35 - right in the kitchen when a chef makes
38:37 - the food where does the chef make the
38:38 - food right that's the logic is that
38:40 - right
38:42 - right what is logic logic is what logic
38:46 - is equal to what making of the food yes
38:49 - or no
38:53 - yes yes logic is making up the food the
38:56 - chef knows how to prefer the food
38:58 - they get the right ingredients they're
39:00 - like okay this ingredient is good this
39:01 - is bad right if you just if you give
39:03 - adjustment the right amount of salt
39:05 - then you you know you get this if you
39:06 - give it if you give it just the right
39:08 - amount of pepper then you get this
39:10 - that's the logic the recipe
39:14 - yes that's the raj yes the recipe that
39:17 - is a lot the logic is the making of the
39:19 - actual food
39:20 - it's the chef he's doing his thing you
39:22 - know he's like
39:23 - [Music]
39:24 - so good you know
39:38 - yes hold on that's that's good that's a
39:40 - good question too so now
39:42 - before we do go to that does it does it
39:44 - make sense the fact that logic is the
39:45 - making of the food
39:48 - yes okay does that make sense the logic
39:51 - now is where fits
39:52 - i want you to answer this question
39:53 - where's the logic now
39:57 - yes it's in the kitchen
40:04 - right it's in the kitchen
40:09 - all right then but then doris doris
40:12 - asked
40:12 - dora uh do i say doris doris how did i
40:15 - say that doris yeah yeah doris
40:18 - doris okay so then doris asked okay
40:21 - and said where is the ipad response well
40:24 - think let's think about like this
40:26 - the food is prepared everything is all
40:28 - good we got the food
40:30 - what do you guys want let's say what
40:32 - should we create guys what do you want
40:33 - the kids to create
40:34 - lasagna what do you guys like pasta
40:38 - pasta lasagna i would say lasagna let's
40:40 - make some lasagna how about that that
40:41 - sounds really delicious right now
40:42 - especially because i haven't eaten right
40:43 - now that sounds really good so
40:48 - so let's say lasagna okay so okay the
40:51 - lasagna
40:52 - is made in the kitchen now who delivered
40:54 - the lasagna
40:55 - back to the table to the to jesse and
40:58 - devon
41:00 - wait the waiter so about based on that
41:03 - doris what do you think is also the api
41:05 - response
41:07 - the writer the waiter
41:11 - they are both right
41:14 - yeah they are both and then what happens
41:17 - and then what happens is pretty simple
41:19 - guys then
41:20 - what you got is you got jessie right
41:23 - shoot hold on one second
41:25 - right here you got jesse and they are
41:28 - both
41:29 - really happy
41:35 - i'm not the best drawer guys okay this
41:38 - is why you draw yo
41:40 - yeah that's a frog
41:48 - oh my god all right so they are both
41:51 - happy because they just got their
41:52 - lasagna
41:54 - that's some great delicious lasagna
41:55 - let's need to air horn
41:57 - [Music]
42:00 - i wish you guys can hear it but
42:02 - unfortunately you guys can't so
42:06 - so that my friends is that my friends
42:09 - is how the whole api works and that was
42:12 - an api
42:12 - the api is this so the so
42:16 - the api is that back-end you see that it
42:18 - is that back-end
42:20 - the request and the response it is that
42:22 - that little wait middle thing between
42:24 - the
42:24 - ui and the back end okay and you can
42:26 - call
42:27 - an application program interface how you
42:29 - know it's funny it's so crazy like
42:32 - this hold on let me go ahead and i'm
42:34 - gonna screenshot this for a second this
42:35 - is really cool guys
42:37 - i'm gonna screenshot this for a second
42:39 - here there we go
42:40 - there's no screenshot like this
42:46 - screenshot like this everybody can you
42:48 - raise your hand say hi on the screenshot
42:53 - thank you all right nice
42:56 - so at this point any questions before i
43:00 - move on
43:02 - uh and as i have one question go ahead
43:06 - so technically in a server and database
43:10 - where is the business logic happens is
43:13 - it in the server side or is it in the
43:15 - database
43:16 - what do you think oh i think it's in
43:20 - database
43:22 - why do you think that
43:27 - what's it okay let's think about this
43:29 - okay here's here's what one should think
43:30 - about
43:32 - so we talked about logic and then so we
43:34 - have
43:35 - you're talking about the logic right
43:36 - like logic is a happening database or is
43:38 - it happening
43:39 - in uh so it's repeat the question one
43:41 - more time
43:43 - yes the business logic okay api call
43:46 - okay
43:47 - uh the validation happens in the
43:49 - databases indeed
43:51 - the validation
43:55 - yeah i mean the apa okay so you're
43:59 - saying if the logic happens in the
44:00 - database or the logic happens
44:02 - in the backend api correct and or the
44:05 - logic happens
44:06 - in the back end correct in this server
44:08 - yeah yeah
44:09 - in the server so okay so great so i want
44:13 - you to think about this here so i'm
44:14 - going to connect this so
44:15 - think of this it's part of the back end
44:18 - we'll give me this part the back end
44:20 - and this will just be i'm going to call
44:21 - this right here the database
44:25 - but it's part of the back end just so
44:26 - keep that in mind okay it's just that's
44:28 - why i may have made it where it's like
44:29 - inside almost right
44:31 - so okay the database what is it if you
44:33 - think about what is the database on the
44:35 - kitchen side
44:37 - what is the database
44:40 - the ingredients
44:46 - okay and so what happens the chef what
44:49 - takes the
44:50 - ingredients and then the chef does what
44:53 - the logic makes the food okay
44:56 - so so tell me what is the database
45:00 - versus where so tell me now so now based
45:02 - on that
45:03 - is that right yeah yeah where do you
45:06 - think
45:06 - is the logic is on the server which is
45:08 - the back end
45:09 - or is it on the database or
45:12 - server is it in the server
45:16 - the database should not have any
45:19 - logic period no logic
45:23 - the database is merely there for one
45:25 - reason it is for the ingredients
45:27 - it is there simply just to get the data
45:29 - it contains the data it contains the
45:31 - ingredients
45:32 - that what it's the it's made for
45:36 - great makes sense the logic of checking
45:40 - if it exists
45:41 - or the actual like you know what do we
45:43 - do with the data that
45:44 - is up to us that is up to the api to
45:47 - decide
45:48 - all right make sense
45:52 - beautiful okay sweet sweet sweet awesome
45:54 - so
45:55 - at that case guys any other questions
45:57 - before we move on yes
46:01 - god what's up jenna yes yes in that case
46:05 - you see because she has only one waiter
46:07 - and
46:07 - she's only helping with a store but you
46:09 - have one table
46:11 - but you have to table right she's
46:13 - waiting for the order we
46:15 - uh be done she have to take another
46:19 - order that made me like
46:20 - okay the waiter is the ap i know is
46:24 - waiting
46:25 - for request response you know but it's
46:29 - not only one table several multiple
46:32 - tables that's right
46:33 - multiple tables so multiple users
46:35 - multiple
46:36 - so so let's say you have multiple users
46:38 - on you have to you have multiple users
46:39 - on your website right on your website
46:41 - right a lot of you know you got gianna
46:43 - you got brian you got bishez you guys
46:45 - all wanted this
46:45 - big amazing restaurant we'll call it the
46:48 - restaurant of pwj
46:49 - okay get on to all this amazing
46:53 - restaurant
46:54 - okay so in order for us to be able to to
46:57 - to cover all of you guys you know what
47:00 - happens
47:01 - what happens we use an uh
47:05 - asking from
47:08 - what happens
47:12 - you just have multiple waiters you just
47:13 - have multiple waiters that's
47:15 - it you have just as many you literally
47:17 - have just as many leaders as you have
47:19 - users
47:20 - that's it okay i know that's a lot
47:24 - i know it's a lot but we're talking you
47:26 - know in programming terms right
47:29 - and programming terms that's pretty
47:30 - that's pretty fine so you just basically
47:32 - have
47:32 - multiple you said you have multiple
47:34 - leaders
47:36 - leaders right so quickly
47:40 - yes talking about waiters right so in
47:43 - programming terms right so you only need
47:45 - one
47:47 - waiter the the api bridge yeah the
47:49 - bridge is the request
47:52 - right okay go ahead okay no say one more
47:54 - time say one more time no that was
47:57 - yeah so so basically i'm thinking of
47:59 - realistic terms so you need
48:01 - multiple waiters to actually get the
48:02 - order right that's a realistic term but
48:05 - in programming language you only have
48:07 - one bridge of api requests yes
48:09 - yes yes yes yes and that bridge is
48:11 - simply the network connection right the
48:13 - bridge is a network the api requests
48:14 - connection right it is a connection that
48:16 - that that's the bridge
48:18 - it's the request and the response okay
48:20 - and so however however many users you
48:22 - have
48:22 - so if there's if there's 100 users
48:24 - there's going to be a hundred api
48:25 - requests
48:26 - there's a thousand users there's gonna
48:27 - be a thousand api requests make sense
48:31 - okay perfect okay other than that any
48:34 - more questions
48:35 - go ahead yeah and what's about the
48:39 - async request
48:43 - exactly so yeah and the chicken
48:46 - and the kitchen sorry yeah yeah so ac
48:49 - async requests
48:50 - what is it so i mean okay so
48:53 - async happens on the back end stuff okay
48:56 - async
48:57 - but what is async it's asynchronous
48:59 - right it happens in parallel right yes
49:01 - or no
49:03 - async async equals equals
49:07 - shaft equals parallel
49:11 - because right so that means we can cover
49:14 - multiple users at the same time that
49:15 - means
49:16 - that means what that means we can have
49:17 - multiple chefs right
49:20 - covering users at the same time yes or
49:21 - no
49:23 - or at least they don't have to wait
49:26 - until
49:26 - one order is ready to serve somebody
49:28 - else exactly
49:30 - so we need for that we need to need
49:31 - simply multiple chefs that's it
49:35 - right you can have a lot of chefs and
49:37 - the back end
49:38 - has a lot of chefs the backing is so
49:39 - strong that the bag can literally can
49:42 - can have a hundred users at the same
49:44 - time in parallel just where you could
49:45 - just ch
49:49 - now at the same time very nice
49:53 - yeah yeah thank you you got it go ahead
50:00 - just a little confused here like uh like
50:03 - if i am like a single
50:04 - single user and uh like if i'm hitting
50:07 - the back end
50:08 - i cannot have like more than one request
50:10 - to the server
50:11 - at the same time
50:15 - can you i'm not sure that's an ass kick
50:24 - what do you guys think hold on hold on
50:25 - hold on one second one second what do
50:27 - you guys think about that
50:31 - yes we didn't get the question
50:35 - can you have let me put this down on
50:37 - here
50:38 - i'm gonna put this down right here so
50:41 - what will be the case of having multiple
50:43 - requests
50:45 - because you could order an appetizer an
50:46 - entree and dessert
50:52 - oh
50:56 - so can you can you that's a good
50:59 - question
50:59 - so can you can you
51:04 - have multiple
51:10 - requests
51:14 - oh come on at the same time
51:21 - set parameters in your request
51:24 - no no you can't yes of course you can of
51:26 - course you can
51:27 - but yeah but but can you tell me like
51:31 - what's the need of like multiple
51:35 - requests every single time
51:36 - so think about it like this so the
51:38 - answer to this is
51:40 - yes yes you can have multiple requests
51:43 - at the same time
51:44 - go ahead go ahead
51:47 - um um can you hear me yeah i can hear
51:50 - you
51:51 - okay uh um this is it
51:55 - i i work with amazon okay
51:58 - uh not um i.t i don't work in the itv4
52:01 - okay
52:02 - office okay i i work in the
52:05 - warehouse okay where
52:07 - [Music]
52:09 - goods that are bought from the website
52:12 - uh maybe once somebody buys something
52:14 - from the website
52:16 - we have scanners we have about thousands
52:18 - of uh
52:19 - um i mean uh associates who are holding
52:22 - scanners
52:23 - let me so once the request comes it
52:26 - comes in
52:27 - multiple forms with different people
52:29 - holding their scammers
52:31 - you understand you buy buy somebody buy
52:33 - somebody's also buy
52:34 - yeah all those things are routed onto
52:36 - the amazon database
52:38 - yes whereby there are physical
52:41 - databases situations in the warehouse
52:45 - yes form of shelves yes where we have um
52:48 - the items being stocked into the shelves
52:52 - yes once the request comes i look at the
52:55 - item that i've been bought
52:56 - with my scanner then i look at the um
53:01 - i mean um the shelf that uh
53:04 - the item is located in with a number
53:07 - then i now go and then use my
53:09 - scan the item yeah to show that so so
53:12 - and so bought this
53:13 - and then i remove it and then process it
53:15 - yes at the same time somebody to use to
53:17 - buy in some way so we have thousands of
53:19 - requests coming to the api at the same
53:21 - time yeah
53:22 - and it is directed towards the same one
53:25 - single database we have
53:26 - yeah and we we have one centralized
53:29 - database
53:30 - for amazon yes only that we have one i
53:32 - mean
53:33 - multiple warehouses voted around the
53:36 - world
53:37 - so if you are buying from uk you buy
53:41 - it with your website then if we have um
53:44 - that attending the uk warehouse
53:47 - then people can get it for you if it is
53:49 - not there they give you time
53:51 - during the process of uh buying the item
53:53 - and probably
53:54 - they give you like a day or two or three
53:56 - yeah you can get it from in
53:58 - a nearest warehouse and then process it
54:00 - to you so it is just possible multiple
54:02 - requests are done at the same time
54:05 - to the api and then it is a process at
54:08 - the back end
54:09 - which is done um our uh i will not
54:13 - ask in chronology i mean at the same
54:15 - time
54:16 - with no glitches whatsoever because i
54:19 - mean at the back end we have all
54:20 - uh the items stopped uh virtually and
54:24 - then physically we get it done
54:25 - at the same time yes i think yeah so it
54:28 - is possible if
54:30 - there are no glitches about that perfect
54:32 - uh wha
54:33 - perfect what is your name because it
54:34 - says it says 915505
54:37 - is your name
54:40 - my name is uh muhammad muhammad
54:43 - prophet muhammad that is great that's a
54:45 - great ever
54:46 - that's a great way to explain it you can
54:49 - have just how we explained it right yeah
54:51 - there's one such a database but you have
54:53 - requests coming in
54:54 - every single time thousands requests
54:57 - thousands of requests at the same time
54:58 - right you just have a lot of people
54:59 - doing the same thing
55:02 - all the stuff right it's the same no
55:05 - freeze nothing
55:06 - database works real time exactly in real
55:09 - time
55:09 - exactly so you have the database
55:12 - up and running you have your scanners
55:14 - that are the physical or
55:16 - it is connected to the database so once
55:18 - you you ping from the website
55:21 - it comes straight on to your um to your
55:23 - scanner then you now look at where
55:25 - um the item is stopped then you pick it
55:29 - scan it
55:29 - to show that you have removed that item
55:32 - from the record of the database exactly
55:34 - um so they now process it so uh as we
55:37 - all know
55:39 - one item or one one
55:42 - being is located with certain number is
55:45 - like it's an array
55:46 - of objects stocked in it so once you
55:48 - take one out of it
55:50 - then the length also reduces um against
55:54 - the number
55:54 - that was recorded into the beam
55:57 - so for now this is the explanation i i
56:00 - can give on
56:00 - i think this is great nice job thank you
56:02 - thank you muhammad i appreciate it
56:04 - thank you appreciate it though it's
56:06 - great this is awesome
56:08 - right have a database yes go ahead anish
56:12 - just wanted to extend on this question
56:13 - because like i i got like he's talking
56:15 - about the various instances happening on
56:17 - the server like
56:18 - from different places like with
56:20 - different instances
56:22 - what my thing my question is like me
56:25 - being a single user
56:26 - right like if i am landing on a single
56:29 - page right i can have
56:30 - like on that page i can have like maybe
56:33 - two calls to
56:34 - two different databases fetching two
56:36 - different uh kind of objects right
56:38 - is it i have to first finish the first
56:41 - and then come to the second
56:44 - yeah i think i think um what it is is
56:47 - that it's not just one database
56:49 - talking from a system systems side of
56:52 - things
56:53 - you have multiple databases but it will
56:55 - be coming through
56:56 - and there's what we call load balancer
56:59 - and load balancer will find out which
57:01 - database is used less and you just send
57:04 - a request there
57:05 - basically that's why so so that's a good
57:07 - explanation but i think i think in
57:09 - like in in what you're trying to say
57:12 - anish is like
57:14 - what you're trying to say is like if
57:15 - you're trying to make a request you know
57:16 - one time they try to make a request at
57:18 - the same time
57:18 - so here's the thing when when i make a
57:21 - request for example
57:22 - right imagine two users right at the
57:24 - same time the one on the website correct
57:26 - took you to the same time exactly the
57:28 - same time let's say they click the
57:29 - submit button at the same time
57:30 - right they click somebody at the same
57:32 - time right
57:34 - what can we do right what's going to
57:35 - happen what's going to happen things so
57:40 - like it will be
57:41 - cute cued up what i mean they're going
57:43 - to give a queued up
57:44 - and like it will happen uh
57:47 - like like they form stacks
57:50 - of operations and then it happens one
57:52 - after the other place sure true happens
57:54 - one after the other but at the same time
57:56 - yes they can technically it's gonna hit
57:58 - the request it's gonna hit the request
57:59 - at the same time
58:00 - and it's actually going to process that
58:02 - request almost in parallel in parallel
58:04 - pretty much
58:07 - it's gonna process it in parallel what
58:09 - you need to think about don't think
58:10 - about it so hard don't think about it so
58:12 - much where you know
58:13 - tell me what what is the issue that you
58:14 - faced you said you faced some kind of an
58:16 - issue yes or no
58:18 - yeah so like my my thought process is
58:21 - going in a way that
58:22 - for example i'm using this netflix page
58:24 - and for example
58:26 - i'm having my net originals and trending
58:29 - now and top rated
58:30 - uh information from say
58:33 - one database and you know that logic is
58:35 - implemented in a different way
58:37 - while the other uh john address
58:41 - that i'm actually trying to get
58:45 - on the same page is from a separate
58:47 - database or maybe even from the same
58:48 - database but with a different logic all
58:50 - together so i'm going to have two
58:51 - different end points
58:52 - okay right so when i'm
58:55 - so when i'm hitting this page am i
58:57 - having like
58:58 - like can i have like two requests at the
59:01 - same time or
59:02 - is it like i have to first finish the
59:03 - first request and then finish the
59:05 - because i have two requests at the same
59:06 - time
59:07 - you can make two guests at the same time
59:09 - yeah yes
59:10 - weekend yes the chrome and it's actually
59:14 - limited
59:15 - by your browser guys it's not limited by
59:17 - the database or the backend logic
59:20 - it's actually by the browser check this
59:23 - out
59:23 - it'd be free if you guys don't have any
59:24 - questions actually because i can remove
59:26 - this actually here for a second
59:27 - look at this limit limit of
59:31 - a number of requests of of parallel
59:33 - request
59:35 - requests in chrome
59:45 - so look how many uh
59:48 - max player hd connections in the browser
59:54 - look at that check this out so chrome
59:57 - actually you can in parallel
59:59 - get get basically six six connections
60:02 - may have six connections at the same
60:03 - time okay
60:05 - the other let's say let's say you have
60:07 - you you make six requests
60:08 - right you make stickers and it's trying
60:10 - to get at the same time what's gonna
60:11 - happen is it's going to
60:12 - let and then let's say now you make a
60:14 - seventh request
60:15 - okay seventh request it's just simply
60:17 - gonna go in the queue and it's gonna
60:19 - wait
60:20 - and then on the on the chrome it's
60:22 - simply gonna wait for the others to
60:23 - finish and then it's gonna go in the
60:24 - seventh request does that make
60:27 - and sense and then it's going to hit the
60:28 - api
60:30 - so the same so this is actually limited
60:32 - by your
60:33 - browser not so much the node.js api is
60:36 - limited by your browser how many
60:37 - connections
60:38 - or how many requests can you make at the
60:40 - same time in chrome you can make
60:42 - six then the seventh have to wait for
60:44 - something to finish to actually afford
60:45 - it to go
60:48 - got it
60:52 - got it does that make sense because you
60:53 - feel like you're still a bit confused oh
60:55 - no no i'm
60:56 - like i'm sure no you got it we can and
61:00 - like
61:00 - all of them will be like we have to
61:01 - define it as a sync yes
61:04 - well no yeah you you don't yet you don't
61:07 - have to define it as
61:08 - async you simply make the request and
61:09 - that is it
61:11 - okay so it's all happening parallelly
61:13 - irrespective of me
61:15 - yes you simply make it right that was a
61:17 - question that was like bothering me for
61:19 - quite quite yeah
61:20 - yeah you simply make the request if i if
61:22 - i you know if i for example
61:24 - i mean look at the same time at the same
61:26 - time when you call a function let's say
61:27 - you call a function
61:29 - here let's think of it like this uh am i
61:31 - can i erase this guys is this all good
61:33 - this this uh drawing ahead yeah i can
61:36 - erase uh
61:36 - actually one more question on this nice
61:38 - okay go ahead uh
61:40 - like where exactly like uh
61:44 - like remote procedure calls like rpc or
61:47 - grpc falls in here
61:49 - and can we expect any class any sessions
61:51 - on those
61:52 - on what almost specifically uh grpc
61:56 - and rpc like remote procedure calls and
62:01 - what is jrtc grpc
62:04 - like remote procedure calls
62:09 - g for not j it's g
62:17 - um i'm not sure what this is
62:19 - specifically
62:22 - i'll have to look into this for us to
62:23 - actually for a look for me to actually
62:24 - fully teach you guys what this is
62:26 - grpc i've never had procedural system
62:29 - initially
62:30 - developed google protocol yeah so i
62:33 - think this gets more into a little more
62:34 - advanced stuff uh maybe that's something
62:36 - interesting that we could definitely
62:36 - look into
62:37 - but for now for most people i just kind
62:39 - of want to focus kind of on the
62:41 - fundamentals okay
62:44 - okay okay perfect so yeah
62:47 - so if that's if that's all yeah
62:50 - yeah um i'm sorry i'm confused after
62:54 - uh hearing from anes and then she has
62:56 - made me confused
62:58 - um about the api request yeah when you
63:02 - said that
63:02 - that there is six uh for chrome there is
63:05 - a sixth limitation okay
63:07 - yes so now i am i don't understand
63:09 - really uh what do you mean by this like
63:11 - okay when i am a simple example like i'm
63:14 - when i'm
63:15 - when i'm requesting okay for like i'm i
63:18 - have opened this amazon website on
63:20 - netflix and i'm sending the request
63:23 - so in amazon i'm i'm sending wanted to
63:25 - ask for the next click i'm sending
63:27 - another request
63:28 - and before the yeah
63:31 - it's per site it's per site it's
63:32 - actually it's per site so it's not
63:34 - if you're different sites it's different
63:36 - so it's per site
63:38 - okay so in amazon i can make six
63:40 - requests yes and then on netflix you
63:42 - make six requests at the same time then
63:43 - same thing and
63:44 - you want and then and so forth but don't
63:47 - think of the please
63:48 - guys guys don't think exactly but don't
63:51 - yes you can you can make it yeah
63:53 - it's depending on the depending on what
63:54 - i say but don't don't think about i
63:56 - didn't
63:56 - learn this until like you know literally
63:58 - a year ago about the whole six request
64:00 - thing because that doesn't really matter
64:02 - guys
64:02 - all you need to understand is you can
64:04 - make multiple requests at the same time
64:05 - that is all you need to understand okay
64:07 - and even for example
64:08 - when you have a function if you think
64:10 - about it right in javascript right when
64:11 - you call functions how to call functions
64:13 - call right
64:14 - what happens in javascript if i remember
64:16 - go ahead and remove this you have
64:17 - one function oh should you have one
64:19 - function right here
64:20 - this gets called and another function
64:22 - you can really get oh shoot right here
64:24 - right here right another one it gets
64:26 - cold and i'm gonna get so it's called
64:28 - so it's it's almost like this one fires
64:29 - and this one fires and this one fires so
64:31 - sometimes it's really hard to make them
64:33 - parallel
64:33 - right they're just really quickly
64:35 - happening at the same time almost at the
64:36 - same time right
64:38 - but technically they're being fired
64:39 - almost like you know
64:42 - simultaneously but you know there is
64:44 - still some time
64:45 - time go ahead
64:50 - um i was thinking um what an issue is
64:54 - asking
64:54 - yes um with the power request
64:58 - yes it does happen and then once um
65:02 - the request is going it comes in the
65:05 - form of
65:06 - data block with uh
65:09 - encapsulated with some kind of um um ids
65:13 - you understand yeah so and we remember
65:16 - what uh we call like
65:18 - fifo first in first day first yes maybe
65:21 - yes so maybe if they are all directed
65:24 - towards a particular shelf then probably
65:28 - all the data block that is going into
65:31 - the shelf
65:32 - is somehow giving an id and then this
65:35 - one
65:36 - the request was sent from let's say uh
65:38 - my per
65:39 - my time here um maybe 10 45.
65:43 - this one maybe 10 46 or this one 10 40
65:46 - uh 47.
65:47 - so it follows that order you understand
65:50 - though it was done within the shortest
65:52 - yeah
65:52 - right true truth is directed towards a
65:55 - particular place maybe the same place
65:58 - you get it so once it is done that we
66:01 - i mean the back end also consider that
66:03 - factor yes
66:04 - what time did the request i mean what
66:08 - time did you do that
66:09 - what time did the second one come yeah
66:11 - yeah yeah
66:12 - so then they now encapsulate everything
66:14 - with an id
66:16 - so this is my id this one comes in first
66:18 - before this one and then it also follows
66:20 - yeah
66:20 - so that there will not be conflict with
66:23 - that
66:24 - beautiful so this this is called
66:25 - encapsulation so for example this is
66:27 - called
66:28 - and this is more of advanced topic guys
66:30 - don't want to i don't want to like
66:32 - confuse you
66:32 - more but there comes a point where you
66:35 - have when you're trying to access
66:36 - database at the same time right because
66:38 - data changes all the time right
66:39 - you have to make sure that the database
66:41 - basically like if one is trying to
66:43 - remove the data
66:44 - you know another one is trying to for
66:45 - example you know you know let's say that
66:47 - you're trying to put you know data at
66:49 - the same time or you're trying to
66:50 - you know request the same amount of um
66:53 - what's it called um
66:54 - make changes to the same amount of data
66:56 - right what happens first right
66:58 - we'll talk about that later on let's say
67:00 - for example i want to change you know
67:02 - i want to change uh what's it called
67:04 - let's say i want to change in a database
67:06 - i want to change
67:06 - brian's name right so and let's say i
67:09 - want to change brian's name to be
67:11 - to be nas and then and then uh
67:15 - ashesh wants to change brian's name to
67:17 - be to be
67:18 - cool i don't know whatever right who
67:20 - gets to change it first
67:22 - right so i don't want to confuse you
67:24 - guys at that point but that's a great
67:25 - point you you prada muhammad
67:27 - there is a thing where we do on the
67:29 - database side
67:30 - to prevent that stuff from happening
67:32 - because like who knows like if you
67:34 - if i if i want to change brian's name
67:36 - and then i just want to change brian's
67:38 - name
67:38 - on the database who goes first right
67:42 - who goes first but i don't want you guys
67:45 - to think about that
67:46 - because that that will only confuse you
67:47 - even more for a second here we'll talk
67:49 - about a little bit later on and i can
67:51 - actually show you an example
67:53 - okay show you an example so you guys can
67:54 - see it for yourself okay
67:57 - yeah give me a thumbs up yes nathan
68:02 - all you're saying is the acid it's the
68:05 - acid
68:08 - acid
68:11 - hold on it's a property of databases
68:13 - transactions which is intended to
68:15 - guarantee yeah
68:16 - that the data validity you know when
68:17 - there are errors yeah yeah
68:19 - yeah yeah yeah yeah yeah acid acid does
68:22 - this commonly known as a potential
68:23 - lasting psychological drug
68:25 - [Laughter]
68:28 - not this acid guys don't do this one
68:31 - don't do this
68:33 - put acid and database yeah yeah yeah
68:35 - yeah yeah i know what you're talking
68:36 - about
68:36 - i know you're talking about yeah okay
68:38 - but atomicity
68:40 - yeah consistency isolation and drop yes
68:43 - we'll talk about we'll talk about that
68:44 - in the next one how about that okay
68:46 - we'll talk about this in the next one
68:47 - the next coaching call okay
68:48 - beautiful all right all right cool so
68:50 - we've got this portion
68:53 - raise your hand if you have a broader
68:54 - understanding of what
68:56 - a api is and how it all correlates
68:58 - together raise your hand up high and say
69:01 - yes i do yes i do
69:04 - yes yes i do yes i do there we go
69:07 - beautiful
69:08 - that's awesome that makes me happy okay
69:10 - cool so now guys
69:11 - at this point i really want to quickly i
69:13 - want us to actually create a really
69:14 - small api
69:15 - a node.js api and we're going to do this
69:18 - here in a second because
69:18 - next the next live code when we get
69:20 - together uh we're gonna actually create
69:22 - something that's different so
69:23 - let's go ahead and do that to create
69:24 - note just api uh actually here
69:27 - the portion we're going to create is
69:29 - which portion it is
69:32 - this portion right right there's no
69:34 - there's no jsbi
69:35 - the one that actually checks the email
69:37 - password is val and so forth
69:38 - yes or no yes give me a thumbs up
69:42 - yes okay good all right
69:45 - so let's get to it so the first thing i
69:46 - want you guys to do is go ahead and go
69:48 - to node.js
69:49 - and you could as you're doing go ahead
69:50 - and know gs and do kind of with me
69:53 - right there go to node.js and then
69:55 - download this right here so node.js
69:57 - ian i'm going to go ahead and cop shoot
69:59 - i'm going to copy this and if you guys
70:01 - have not just installed that's that's
70:02 - actually really good
70:03 - i'm gonna put in the chat here
70:06 - somebody's like yes i do in the chat i
70:07 - like it
70:09 - there you go i'm gonna put that in a
70:10 - chat here and then what you want to do
70:13 - based on that go ahead and download it
70:15 - for
70:16 - mac os or for whatever it is right there
70:21 - right there and then i want to go ahead
70:24 - and
70:28 - no gs i'm gonna go to node.js node.js
70:32 - starter api
70:36 - yeah and i'm just going to go ahead
70:40 - no no no no no that's not all i want
70:47 - [Music]
70:55 - okay so with what okay so when you
70:57 - download a node.js go ahead and install
70:59 - this right but
71:00 - obviously i'm not going to wait for you
71:01 - guys to install it initially i'm just
71:02 - going to show you what happens when you
71:04 - do
71:04 - when you do have an install and
71:05 - everything is all good so what i will
71:07 - create
71:08 - is i will create a new folder let's go
71:09 - to netflix clone i'm going to create a
71:11 - new folder
71:12 - and i'm going to call the file i'm going
71:13 - to go my projects where's my project
71:16 - um my project and then i'm going to go
71:19 - to
71:20 - netflix is this the one i think is this
71:23 - one
71:24 - yeah it's a netflix clone right here
71:27 - but i'm going to create a new folder
71:28 - called the netflix netflix
71:30 - api that's what i'll call i'll call
71:32 - netflix api okay
71:34 - netflix api and then i will go ahead and
71:37 - open this one
71:38 - file open
71:41 - file open
71:45 - file open and then we will open up that
71:47 - specific project so i'm going to say a
71:49 - netflix api right there open this one up
71:51 - beautiful
71:52 - and so it's just going to be a plain and
71:55 - simple
71:56 - oh my god why is my computer lagging
71:58 - dang
71:59 - [Music]
72:01 - okay netflix api inside this one the
72:04 - first thing we need to create
72:05 - actually is let's go ahead and and now
72:08 - inside to actually start up your project
72:11 - all you see is simply to do is right
72:12 - click
72:13 - and then open terminal in new tab so new
72:15 - new terminal at
72:16 - folder or just open your terminal
72:20 - and then what you can put is you can do
72:21 - put something like npm start so let me
72:23 - go ahead and just make sure that i'm all
72:24 - good
72:25 - and is i think it's npm start anybody
72:27 - remember
72:29 - npm install no i think it's npm start
72:33 - npm npm right that's the one thank you
72:36 - yeah npm init so i'm going to make this
72:39 - larger for you guys
72:40 - and pm in it so what mpm init is really
72:43 - it's going to ask you okay
72:45 - um you know what is your project so in
72:47 - our case it's going to be netflix
72:48 - underscore api that's fine i'm going to
72:49 - hit enter version 1.0 hit enter
72:52 - description this is the api
72:56 - for our netflix cone
73:03 - boom entry point index.js that's fine
73:06 - test command we don't need this right
73:07 - here get repository uh
73:09 - don't need that keywords don't need that
73:12 - author
73:13 - i want to say pwj for now profile
73:16 - javascript
73:22 - javascript
73:26 - license that's fine it's okay yes
73:30 - enter boom that's okay so new minor
73:33 - version of
73:33 - npm okay great so that's fine so now if
73:36 - you look at
73:36 - our netflix api do you what do you you
73:39 - see something something was created a
73:40 - file was
73:41 - created and this file is called
73:44 - package.json
73:47 - it's called package.json
73:50 - this my friends what is package.json you
73:53 - tell me
73:58 - it's a list of all the dependents hold
74:01 - on pedro you were talking go ahead pedro
74:03 - uh it's a list of the dependencies and
74:05 - uh that we need to
74:07 - to run our projects it's listed
74:09 - dependencies it's literally the
74:10 - description it's kind of like this
74:11 - description of what your project is
74:14 - it's a description of what your project
74:16 - is that's literally it it will contain
74:17 - dependencies
74:18 - a lot of different other things now with
74:21 - that said
74:22 - let's go ahead and create our api and
74:24 - we'll to create api we're going to use
74:25 - something called express.js
74:28 - so it's expressjs works hand-in-hand
74:30 - with our node.js api so expressjs
74:33 - right there you can see right there
74:35 - expressjs
74:36 - is a minimal and flexible node.js web
74:39 - application framework that provides a
74:41 - robust set of features for web and
74:42 - mobile applications
74:44 - see right there okay so it's a create
74:47 - it's a way to create a robust api
74:49 - quickly and easily all right makes sense
74:52 - and it's pretty exciting you know this
74:53 - is how we literally
74:54 - this is the get started you can see we
74:56 - have mp minute we did that
74:58 - and now what we need to do is we need to
74:59 - do npm install express
75:01 - okay so it's going to go to here i'm
75:04 - going to open this up in new terminal
75:05 - folder
75:07 - open and terminal that's fine
75:12 - don't need this right there so we'll do
75:15 - mpm install express tester save
75:17 - so npm install express desktop safe hit
75:22 - enter
75:24 - great so we went installed okay now
75:27 - really
75:27 - really quickly i want to talk about a
75:28 - few different things what happened here
75:30 - what happened here guys
75:32 - what do we have inside now if you look
75:34 - at package.json
75:36 - you see the dependencies what happened
75:37 - dependencies check this out
75:39 - somebody tell me it's
75:42 - alex press yes so you can see express
75:45 - now is part of dependencies that means
75:49 - that whenever
75:50 - someone else goes ahead and wants to
75:51 - install this project
75:53 - all they need is they simply need this
75:54 - package.json file
75:56 - and they will install their dependencies
75:58 - and where do the dependencies are
76:00 - installed
76:01 - sorry oh [ __ ] what's happening why did
76:02 - my headphones
76:08 - you need some coke i need some what
76:12 - hold your bread
76:20 - all right so drink some water i i'm
76:22 - drinking some water i actually water i
76:23 - have tea look at this
76:24 - guys have you seen look at his tea guys
76:34 - this is amberly's tea this is emily's
76:35 - cup so i just stole it from her
76:37 - um so so let's go ahead so we have
76:42 - no so if you look at this check this out
76:48 - all our stuff is actually saved aware
76:54 - it's inside of modules the null modules
76:56 - contains express
76:58 - right here you see this if you look at
76:59 - express it's right here this is the your
77:00 - express
77:01 - remove this this is the express right
77:04 - here boom right there that's your
77:05 - express
77:07 - there okay so this is where all of our
77:10 - independences will install okay great so
77:12 - now
77:12 - let's go and install and do let's go
77:14 - ahead and format if you look at here
77:16 - so we got that next hello world okay and
77:18 - here's what they tell us how to do
77:21 - to run to run it locally this is going
77:23 - to be
77:24 - the index.js file right here check this
77:27 - out
77:28 - so it's to create this
77:31 - all we need to do is we need to create
77:33 - an index.js file
77:35 - so let's try this i'm going to right
77:36 - click and you click new file and i'll
77:38 - say index.js
77:39 - this is the this is the the entrance
77:42 - of your api so if you think about it you
77:44 - see this main
77:45 - that's where that's where the main
77:47 - entrance of your api is and this will be
77:48 - in the
77:49 - js file and now for this the express.js
77:52 - you know starter pack starter file if we
77:55 - go ahead and copy this i'm going to
77:56 - command c i'm going to copy this
77:58 - specific portion
78:00 - okay and i'm going to paste it into here
78:02 - boom right there
78:04 - so what are we doing here what are we
78:06 - doing here
78:07 - in this instajs file and again this is
78:08 - javascript guys as you can see
78:10 - node.js is javascript right what we are
78:13 - doing here is we are
78:14 - actually i'll have someone explain it
78:16 - for me
78:18 - what do you think uh i want to pick on
78:20 - someone let's say
78:23 - i want to pick one stephen what do you
78:27 - think
78:31 - so what are you doing here you tell me
78:36 - the ironic thing is i was actually
78:37 - working before the call on the burn tech
78:40 - talk low oh beautiful there you go
78:41 - we're actually so you know your stuff
78:45 - oh kind of yeah still grasping it but
78:47 - okay but tell me what's happening here
78:51 - so basically the first one we're
78:52 - requiring uh we're calling the express
78:56 - the currently expressed yeah no
78:59 - what's happening here um it's calling
79:02 - the express
79:05 - um a little help
79:10 - we set the api request
79:13 - we're importing express because express
79:16 - right now is inside the null modules
79:18 - we need to import all the code that
79:21 - express has
79:22 - and import that into our application so
79:24 - we can use it yes or no
79:27 - great now here what do we do what's up
79:30 - gianna you say something
79:31 - yes yes let me ask you because every
79:34 - time that going to create
79:35 - one application for example on this one
79:38 - we are in the api server
79:40 - but i don't know if i have to
79:44 - insta how you say install mp
79:47 - express just for the application locally
79:50 - you know
79:50 - just an application or globally because
79:53 - i say okay everybody install
79:55 - expressing in node i already have
79:58 - installed globally
80:00 - do i have to do that every time that i
80:02 - have you have to do it every time for an
80:03 - application for that for one application
80:05 - yes you do
80:06 - for yes yes yes because
80:09 - what happens guys what happens when you
80:11 - do require you know what happens require
80:14 - here's what
80:14 - require does require will literally
80:16 - import the
80:17 - the data from where
80:21 - the node modules right there
80:24 - it's going to look for in here and if
80:27 - the node modules are not here if there's
80:28 - if
80:29 - your nodes in modules are installed
80:31 - globally
80:32 - they're not here you need to be you need
80:35 - to have that as part of the project
80:37 - on top of that it's very important
80:38 - because when other people install
80:40 - when other people want to go and install
80:42 - your project on their computer
80:44 - they need to have all the known modules
80:45 - in there and so you need to install it
80:47 - just for that specific
80:48 - project okay make sense jenna
80:52 - good question thank you okay go ahead
80:54 - brian yeah
80:57 - really basic question i guess go ahead
80:59 - what's on what's up
81:01 - what's on express so here so express
81:04 - so i guess i could explain it better so
81:06 - node.js you understand node.js is an api
81:09 - it's
81:09 - what we're using going to use for an api
81:10 - does that make sense give me a thumbs up
81:13 - okay now express express is think of it
81:16 - as like um
81:18 - so if we have so if you think about this
81:19 - if javascript is no gs
81:22 - express is react gs
81:28 - express the framework as a framework
81:32 - see right there it's a web framework for
81:35 - node.js
81:36 - react.js is built on top of what
81:42 - javascript exactly express
81:45 - is built on top of node.js it's like
81:47 - it's got that cool functionality right
81:49 - it's got the other cool functionality
81:50 - that like
81:51 - allows us to create apis right
81:54 - node.js node.js is the basic right it is
81:56 - the foundation
81:57 - that foundation thing right but but
82:00 - but express is what just makes it so
82:03 - much easier for us just like react.js
82:04 - makes so many things easier for us right
82:08 - right the whole binding thing how do you
82:10 - bind the data within the front end and
82:12 - all that stuff right it's right to this
82:13 - it makes it so much easier the logic all
82:15 - that stuff
82:15 - it's just so much easier that's it
82:19 - but under the hood it's using node.js
82:23 - does that make sense now yep beautiful
82:26 - sweet
82:27 - okay so great so we got that so now
82:30 - we're here and inside here now
82:31 - we are going to initialize initialize
82:35 - initialize express okay
82:39 - here what are we doing what are we doing
82:43 - here guys
82:45 - setting the port guys we still have 232
82:48 - people watching holy moly that's pretty
82:50 - good i'm cool 232 people watching and
82:53 - on this video okay dang guys by the way
82:57 - guys how how do people join an amazing
82:59 - community like this guys let me ask you
83:01 - this question how do people join like
83:02 - amazing community like this
83:04 - how do they join how do they join you
83:07 - guys tell me
83:08 - wj join pwj where's the link guys
83:12 - where's the link
83:14 - down below down below should they join
83:17 - yes or no
83:19 - 100 yes 100 there we
83:22 - go 100 guys you got the results right
83:25 - here yeah you guys
83:26 - you got you guys 100 have 160 people
83:28 - right now that are saying you guys
83:30 - should join if you're not joining
83:31 - if you're not in pwg what are you still
83:33 - doing i don't know just you know
83:35 - this is this this world is too
83:39 - too uh you know to uh
83:43 - yeah exactly all right cool guys so here
83:46 - what are we setting here
83:48 - what the port setting the port
83:52 - turn the port create okay okay what is
83:55 - this now
83:57 - this might be a little difficult for you
83:58 - guys to understand fully what is this
83:59 - api
84:00 - using
84:14 - right so it's using the get method what
84:16 - is the get method okay
84:18 - what does this slash mean so look you
84:21 - see how we're using the app we're using
84:23 - so we're using so right now we're using
84:25 - express right because it says app.git
84:27 - right
84:28 - because right now if you go to here
84:30 - getting started
84:31 - let me see getting started next hello
84:33 - world let me see a next
84:35 - express generator blah blah blah no
84:37 - that's not what i want uh
84:40 - let me go ahead and open some new tab
84:42 - let's express.js i'm going to say
84:46 - app.get app.dap duplication
84:50 - nope app.get right here app.get returns
84:53 - the value of the name app setting
84:55 - name is one string
85:03 - trying to find an easier way for you
85:04 - guys to understand this right there so
85:06 - you see app i get right here
85:07 - so what is this what does this
85:10 - get do it's a get request correct this
85:13 - is handling the get request
85:15 - what does a slash mean
85:21 - what's up that's the end point that's
85:24 - the end point so what this is the
85:25 - homepage input
85:27 - right the endpoint right this is where
85:29 - the logic is going to be
85:31 - logic for the get request
85:35 - now i will talk about this in a second
85:37 - but there's actually something called a
85:38 - pulse request
85:39 - there is a patch request and so forth a
85:42 - get request
85:43 - really simply means when you do that git
85:44 - what does that mean
85:46 - what does that mean return something you
85:48 - return data that means i'm trying
85:50 - that means i'm trying trying to get data
85:55 - okay i'm trying to get data this is
85:58 - where the waiter is simply getting kind
86:00 - of data from
86:01 - simply getting some data right from you
86:03 - know from the chef or something like
86:04 - that right
86:05 - simply getting data okay so for example
86:08 - let's say
86:08 - this let's say for example as a user i
86:10 - asked the waiter hey uh
86:12 - do you guys have what is your curve for
86:14 - example let's say i went to the waiter
86:15 - and i said hey what is your current soup
86:17 - of the day the winner went to the chef
86:19 - and asked the chef what is the soup of
86:21 - the day
86:21 - and then they return it back to the user
86:23 - does that make sense
86:25 - that's like a get request get it
86:29 - okay cool so awesome so that is a get
86:32 - request
86:32 - so let's go ahead and on the request
86:35 - what do we say that we send what
86:38 - hello world to the request okay great
86:41 - and then here what happens here
86:46 - listening on the portion listening on
86:47 - the port so this me this is where we
86:49 - start the application this is where
86:52 - we start our app or this is called
86:56 - listening to our application or
86:59 - listening to the port
87:00 - into the port this is when for example
87:03 - this is almost like when you say when
87:04 - the kitchen is open so the kitchen now
87:06 - is open
87:07 - the kitchen can be closed or the kitchen
87:09 - is open this is saying here
87:11 - open up the kitchen
87:14 - that's what this is saying make sense
87:18 - okay cool so now now we need to start
87:21 - start up the restaurant we need to start
87:23 - it up okay
87:24 - so let's go ahead and start it up to
87:25 - start everything up we go to here and
87:27 - you can see
87:27 - first create a directory name my app
87:29 - change it to run so we did npm in it
87:31 - although
87:32 - everything is good there uh we'll create
87:34 - app.js but instead of did we did
87:36 - index.js sort of app.js
87:38 - and now run the app with the following
87:39 - command nodeapp.js
87:41 - in our case it's going to be node
87:42 - index.js
87:45 - so i'll do that node index
87:48 - dot js
87:52 - look at that now we have example app
87:54 - listening at
87:55 - this so i can literally now copy this
87:58 - look at this we're listening on this
87:59 - specific open let me say this
88:01 - we're listening at this specific app
88:05 - and if i go to it check this out guys if
88:08 - i go to this
88:10 - hello world look at that
88:14 - hello world we have officially
88:17 - created our first ap on
88:21 - aprion api endpoint
88:26 - we officially our first api endpoint
88:30 - and that my friend is the start of
88:31 - something something new oh thank you
88:36 - that is our something new okay because
88:39 - after this now
88:40 - for example let's say you want to return
88:41 - data you can actually now return this
88:43 - look at this you can now do like
88:46 - you can now do for example like you know
88:48 - things like
88:49 - valid
88:53 - valid so things like this right so like
88:55 - if i save this
88:56 - refresh this oh shoot i need to
89:00 - when i by the way right now you wouldn't
89:02 - need to do this but when you go ahead
89:03 - and change anything on
89:05 - insta inside instajs you have to restart
89:07 - your app so you have to do command c
89:09 - or a control c and then you do local
89:12 - then you do note and it's a gs again
89:15 - right there that will choose nordman
89:18 - yeah
89:18 - well yeah and then we'll do normal here
89:20 - in a second so see this returns data
89:21 - right here
89:23 - this returns data to the api to the
89:25 - front end now we're looking here one
89:27 - thing i want to want you guys to install
89:28 - and i want you to install nodemon so
89:30 - nodemon
89:34 - nodemon what noma will do is just it's
89:37 - very
89:38 - simple you can actually install it
89:39 - globally
89:41 - right there but you know you can still
89:43 - install it
89:45 - actually no let's install it like this
89:46 - for now what normal will do
89:48 - is it will listen for your file changes
89:50 - and it will restart your server
89:52 - that's all it does literally that's all
89:54 - it does so let's go ahead and do npm
89:55 - install
89:56 - save dav node month that's going to quit
89:59 - out of here we'll say nodemon
90:18 - like when i was working on your blog
90:20 - project i had to put pseudo so that
90:22 - some computers i get yeah some some
90:24 - people you have to do studio that's
90:24 - correct some people have to do suit if
90:26 - you get an
90:26 - error then you might have to do a pseudo
90:28 - sudo npm install save that
90:30 - save down nodemon okay and then what
90:32 - happens if you go to package.json
90:34 - that means that no mon is now inside the
90:36 - dev dependencies
90:38 - and i will talk about what is different
90:39 - between dev dependencies and
90:40 - dependencies later on
90:41 - but for now i just want to focus on
90:43 - installing nodemod and actually having
90:44 - you guys use it
90:45 - okay so we installed nodemon okay and
90:48 - now all we do
90:49 - all we simply do is is you simply know
90:53 - you use nodemon now we'll do for example
90:55 - now node mode so you can do nodemon
91:00 - beautiful so what's going to happen
91:04 - is what's going to happen is if i make a
91:06 - change here let's say i do
91:08 - for example now i change it back to
91:11 - hello world
91:13 - i want you guys to pay attention to
91:16 - this okay pay attention to here
91:20 - when i make a change we'll say hello
91:22 - world
91:24 - and i do command s for save look at that
91:26 - you see
91:27 - see what happened it restarted this it
91:30 - restarted
91:31 - restarted due to changes started no
91:33 - index.js so it restarted biscuit the
91:35 - server
91:36 - so it applied new changes makes sense
91:38 - and that means now if i go back to here
91:40 - if i go to my localhost if i refresh
91:42 - this we now hello world
91:44 - and that's it guys we've created our
91:46 - first api and i think i'm going to
91:48 - finish it at that
91:48 - that's going to be our goal for the day
91:50 - we got our api started and then tomorrow
91:52 - tomorrow not tomorrow but next coaching
91:54 - call exactly thank you romney yeah
91:56 - guys everybody give yourself a round of
91:58 - applause that's awesome
92:00 - um and then the next cochico will
92:02 - actually go deeper into actually
92:03 - creating the you know the username and
92:04 - password api
92:07 - how cool is this guys
92:10 - hey now yes ramy that's awesome
92:13 - the w as a as a baby
92:22 - you're talking about this oh my god
92:25 - hello
92:26 - hello world
92:31 - hello hello so guys what i want you to
92:33 - do really quickly is for your homework
92:35 - um i'm not going to
92:36 - i'm not sure if i can create a little
92:37 - video right now because i have e-cam
92:39 - running i have zoom running at the same
92:40 - time
92:41 - i feel like i'll just kill my computer
92:42 - if i'll create also record a video right
92:44 - now but
92:46 - i mean i mean we can try i mean we can
92:48 - try it won't hurt
92:50 - can we i don't know
92:54 - i feel like i'm just gonna die
92:58 - none well at least he will die for a
93:01 - good cause
93:02 - oh god hold on uh hey hi nasa so i
93:06 - request you to
93:07 - share some interview questions and no
93:09 - jails hold on one second one second one
93:11 - second who that was that you
93:14 - who it is it's who yeah
93:18 - where are you hold on one second let me
93:19 - see and be fine let me find you no
93:21 - no guys loom is not gonna work guys it's
93:22 - too much for my computer to handle right
93:24 - now
93:25 - no it's too much too much all right so
93:28 - uh
93:28 - go ahead what's your question uh so
93:32 - uh if you could provide some interview
93:34 - questions and node.js that really
93:36 - adds you mean like oh interview
93:38 - questions
93:40 - yes for an interview like any resources
93:43 - or resources for node.js
93:48 - i mean to prepare for the interviews
93:50 - like regular interviews for the entry
93:51 - level
93:52 - okay i mean so for node.js most of the
93:54 - time you're actually not go people are
93:55 - not going to interview on node.js
93:57 - like most companies will not uh you know
93:59 - interview you the best way guys that i
94:01 - would say for you to prepare for an
94:02 - interview
94:03 - is actually going to be the one thing
94:05 - they will ask an interview is like what
94:07 - is an api
94:08 - how does an api work that is the
94:10 - foundation
94:11 - and underneath that they will ask those
94:13 - couple questions
94:14 - but they are not going to ask questions
94:17 - go ahead hold on one second run me one
94:18 - second i'm talking hold on
94:19 - but they are not going to ask questions
94:21 - you know around like what node.js is and
94:23 - so forth
94:25 - okay okay it has to do with that
94:27 - question
94:29 - what's up well i was quite frustrated
94:31 - from from module 8
94:33 - i didn't know what is this fs require a
94:36 - face
94:36 - there is a nice tutorial um given by
94:40 - mosh
94:40 - uh-huh one hour about no node.js
94:44 - gives you the basics of objects
94:46 - beautiful so if you listen to this
94:48 - you know you know more or less the basic
94:51 - things you ask for
94:52 - beautiful uh actually the thing is i'm
94:55 - i'm
94:55 - pretty i mean i'm developing
94:57 - applications but i'm not able to explain
95:00 - the concepts when it comes to the
95:01 - interview so that is what my issue i
95:03 - completed so many models in
95:05 - uh bwj and other other projects in
95:08 - online like youtube or udemy but i'm not
95:11 - able to you know
95:13 - explain them like how uh explaining the
95:16 - interviews you know that is what my
95:17 - issue so i have been asking this
95:18 - question like where can i prepare and
95:20 - how can i prepare for the interviews
95:22 - yeah with some good explanations well so
95:24 - for example
95:25 - the api the api explanation we did today
95:28 - did that help you
95:30 - okay so i mean it is not about only the
95:32 - node.js thing but yeah i'm
95:34 - i'm i mean i have issues with react and
95:38 - javascript also so i'm not able to
95:39 - explain the concepts to them in a clear
95:42 - way
95:43 - um like when i start explaining to them
95:45 - so i'm going
95:46 - you know totally out of the box so i
95:48 - mean i'm not able to answer the question
95:50 - clearly so that is what my
95:52 - issue yeah i mean i mean so
95:55 - almost like two months back so i almost
95:58 - completed a couple of projects and i
95:59 - created my own portfolio beautiful
96:01 - um but under the the link to the
96:05 - to the youtube tutorial for you
96:08 - okay yeah so take a look at that but i
96:11 - think what she's asking
96:12 - is like so so guys
96:16 - one second so hell hold on hold on one
96:18 - second so
96:19 - so you know you you might not guys so
96:22 - you might not actually you know um
96:24 - you know it might be hard initially to
96:26 - kind of to
96:27 - to fully explain all the topics for you
96:30 - to fully spend the topics without
96:32 - what i would recommend is you really
96:34 - have to try out for example let's say
96:35 - you create a project
96:37 - you really need to let's say you created
96:38 - a project let's say you created a
96:40 - twitter clone project right or let's say
96:42 - google maps store locator
96:44 - for you what i recommend is you need to
96:47 - start
96:47 - try to create a project by yourself now
96:50 - by yourself fully without even looking
96:52 - at without even looking at um at the
96:55 - what's it called
96:56 - at the tutorial you created it one time
96:59 - i actually recommend you to create it on
97:00 - the second time again once again
97:03 - without looking at the tutorial
97:07 - okay okay here's why because then you
97:09 - will figure out how to properly
97:11 - then you'll understand how to properly
97:14 - how to properly um
97:15 - you know uh what a node.js is you know
97:17 - why are we creating another request and
97:19 - so forth
97:20 - that is gonna be a great way to explain
97:21 - it another great way to explain it is
97:24 - you know what
97:26 - become a success coach you know why
97:33 - do you know why no because as a success
97:36 - coach you will teach
97:37 - people and when you teach
97:40 - something then you really have to learn
97:43 - it
97:45 - then you really by teaching you actually
97:47 - learning
97:49 - does that make sense yes so for example
97:52 - if for example here's what i want you to
97:54 - do uh hold on where are you do you have
97:56 - a do you have a
97:57 - video of yourself do you have a video
97:58 - right now open
98:01 - no guys okay guys make sure please turn
98:03 - turn on your cameras i want to see those
98:04 - beautiful faces i don't want to see the
98:05 - black boxes turn them on there we go
98:07 - there we go beautiful thank you
98:08 - tonio there we go why are you guys
98:10 - always hiding i understand like why you
98:12 - guys are so afraid
98:14 - like nobody's out here to you know to
98:15 - get you you know we're all here
98:17 - well there we go thank you max turned it
98:19 - on and nathan turn it on
98:20 - at harvard turn it on thank you so what
98:24 - i would recommend for you
98:25 - is i want you to create a video actually
98:27 - explaining what node.js
98:28 - is that is going to be the best way for
98:30 - you to learn
98:33 - okay okay i watched the cr no i know
98:36 - i know i'm saying it's crazy i know it's
98:38 - crazy
98:40 - but hold on i know it's crazy but
98:43 - hold on where are you i'm trying to find
98:44 - you talk
98:48 - sweet no no talk again
98:52 - oh sweet oh look at there we go now i
98:54 - see i'm gonna highlight you hold on
98:55 - there you go i must follow you for
98:56 - everyone now everybody sees you there
98:58 - you go
99:00 - now everybody sees you so so and we're
99:02 - going to keep you accountable
99:03 - i want you literally after this call
99:07 - i want you to create you know loom you
99:09 - know you know
99:10 - loom works right loom yeah yeah
99:13 - i want to create loom video explaining
99:16 - to people
99:17 - what node.js is and like explain to
99:20 - people
99:21 - about what node.js is and how to
99:24 - actually create your first node.js
99:26 - application and explaining all the
99:29 - different parts just how we explained
99:30 - here for example
99:31 - i want you for example to create this
99:33 - application like this for example
99:34 - let's say you create an application like
99:36 - this right and then in the video you say
99:37 - okay guys
99:38 - so this is to to import the express this
99:40 - right here is we're initializing express
99:42 - this package.json is for us to where we
99:45 - dependencies exist right and so forth
99:48 - create that video you it will
99:51 - force you to learn and understand it
99:54 - fully
99:57 - got it so yeah i have this pair of you
100:00 - know showing my face in front of camera
100:01 - so if
100:02 - at the interval asking questions so i
100:04 - mean i will be comfortable
100:06 - answering the questions on the phone but
100:08 - if i if i face the face of his video
100:10 - then i
100:11 - then then here's what you want then you
100:13 - know what and loom make sure i want to
100:14 - see
100:14 - i want to see your face i want to see
100:16 - your face i want to see your beautiful
100:17 - face
100:18 - on the video okay okay okay
100:21 - do you promise do you promise you'll do
100:23 - this yeah sure definitely
100:24 - yes yeah because yeah i i really wanted
100:27 - to learn
100:28 - you know i really wanted to express what
100:31 - i
100:31 - know so i know so please do it guys can
100:35 - we keep her accountable guys
100:36 - you guys looks you guys will well
100:39 - we'll we'll get a video from sway is
100:43 - that right
100:43 - from sway sweet sweet sweet
100:47 - sweet how long and how much time by
100:49 - tomorrow
100:51 - yeah by tomorrow
100:55 - okay okay i love it i love it
100:58 - so i want you to do that literally guys
101:00 - you know that is the best we're going to
101:01 - learn
101:02 - if you really want explanation how it
101:04 - works yes i'm here to give you the
101:06 - knowledge and just
101:07 - just kind of how just how we broke down
101:09 - api stuff this was great
101:10 - but you're it's really going to sink in
101:12 - if you're going to try and actually
101:14 - teach it to someone
101:15 - so this is a challenge for everybody
101:18 - what's up how can someone become a
101:21 - scientist uh
101:22 - contact david or kosi markowski rokowski
101:26 - on slack okay
101:30 - but one more question yeah go ahead so
101:32 - hell
101:33 - thank you as i created as i created the
101:37 - netflix api so
101:40 - at the source control i got like 2 000
101:43 - files ready to be uploaded i don't know
101:45 - somewhere
101:47 - every time i do this i give these files
101:49 - how can i
101:51 - what to do not to well let me create a
101:53 - netflix api what do you mean by that
101:58 - oh the merge stack api you the mark for
102:00 - netflix or what
102:03 - no i just created the folder netflix api
102:06 - and then i
102:07 - opened it on my vs code as i opened it
102:10 - so i see like
102:12 - 2k files wait netflix api is open source
102:17 - where did you get this data no it was
102:19 - just a folder i made
102:21 - oh oh you oh so
102:24 - oh because you didn't open up inside vs
102:26 - code make sure you open up the actual
102:28 - folder something happened i don't know
102:29 - why just make sure you open up the
102:30 - folder
102:31 - so inside i followed exactly as you did
102:33 - really
102:34 - right click open the terminal and just
102:36 - uh did the same thing
102:39 - file so did you create new folder it's
102:41 - just like
102:43 - try it again try it again do do file um
102:46 - create a new folder inside a project
102:49 - clean your folder called netflix api
102:51 - make sure there's nothing inside here
102:52 - make sure it's empty
102:54 - right and then do inside here do
102:57 - services
102:58 - a new terminal folder and then do npm in
103:00 - it
103:02 - okay okay try it again there's no reason
103:04 - why i should be try it again okay and
103:05 - then
103:06 - and if it if you if the problem persists
103:08 - contact me on slack ok
103:14 - what's up if you go to back your vs code
103:17 - yes
103:21 - um on the right side under the search
103:24 - bar
103:27 - um here the search bar search
103:31 - the search bar no no to the left then
103:33 - here
103:35 - yeah under this one do you see this
103:37 - under
103:38 - under search under search here this
103:41 - this this icon yeah now i see like it's
103:44 - a 2k
103:45 - files hold on so do initials repository
103:49 - yeah yeah
103:53 - well do you know why do you know why
103:57 - no because it's trying because look it's
103:59 - trying to get all the
104:00 - node modules look at that all the node
104:02 - modules no modules have 2k files
104:05 - we don't need no modules so and i'll
104:07 - talk about this a little bit a little
104:08 - bit later on
104:08 - so it's a great thing to point out so
104:10 - what i'll do is for those of you who
104:12 - want to use git
104:12 - for this do create a file called git
104:14 - ignore
104:19 - dot get ignored create a file called dot
104:21 - get ignored and inside here i want you
104:22 - to put down node modules
104:27 - and save it boom now we're back to phone
104:30 - you find
104:31 - why do you have a screen huh how do they
104:34 - get this
104:34 - get ignored create a new file so i want
104:37 - you to right click so guys guys guys
104:39 - guys
104:39 - so creating your file so so let's go
104:41 - ahead and go back to our files
104:43 - new file create new file right here new
104:45 - file
104:46 - and i want you to call it dot git ignore
104:49 - like this just like so
104:51 - just like this and call the new file dot
104:53 - git ignore
104:55 - let me know when you give me a thumbs up
104:56 - when you're done with that
105:01 - dog get ignored
105:07 - yep thumbs up ray i gotta see you got it
105:09 - so hell you got it
105:11 - jesse got it beautiful okay and inside
105:13 - this duck ignore i want you to cr
105:15 - to inside inside this file and literally
105:18 - type out
105:18 - node underscore modules
105:22 - type that out and then save it yeah i i
105:25 - did it
105:26 - now from thousand two thousand it came
105:28 - to 1000 files
105:30 - no it should be four
105:35 - in that case it's importing something
105:37 - else i'm not sure what it's
105:39 - did you initialize your repository
105:44 - yes i did that yeah um
105:49 - oh you can communicate about it later on
105:52 - yeah
105:52 - i will say talk to me and slack about it
105:54 - okay but guys
105:56 - just so you know what git ignore does
105:58 - well who can explain what git ignore
105:59 - does
106:02 - uh it ignores the functions the go ahead
106:06 - yeah so basically get ignored what that
106:09 - does is
106:10 - you can just put any you can put like
106:13 - any files you want to hide
106:15 - into that file and then whenever you
106:17 - publish to github
106:19 - it will hide those files from github so
106:21 - it doesn't overload your github because
106:23 - if you put no modules
106:25 - in your github that will destroy it yeah
106:28 - and
106:28 - there won't be any more space to put
106:30 - anything but basically it will ignore
106:32 - basically get what git tracks your files
106:35 - yes or no
106:36 - get track search files yes give me a
106:38 - thumbs up yes
106:40 - yeah okay when you do dagger ignore
106:42 - you're saying hey i don't want you to
106:43 - track no modules
106:45 - so it does do not track the modules that
106:49 - means
106:50 - it is not included so you see how it's
106:52 - gray you see how it became gray
106:54 - that means it's not cool that means when
106:56 - we when we push to github that means no
106:57 - modules will not be included
107:00 - when you push to github does that make
107:01 - sense
107:03 - thumbs up beautiful thank you so much
107:05 - thank you you got it
107:06 - okay awesome guys at that point that's
107:08 - pretty much it guys for homework what i
107:09 - want you guys to do
107:11 - what i want you to do is pretty simple
107:13 - is i want you to get to this point i
107:14 - want you to have an api that says hello
107:16 - world
107:16 - that is the goal okay once you have an
107:19 - api that it says hello world
107:21 - just because i know you guys a lot some
107:23 - of you have followed some of you did not
107:24 - follow
107:25 - if you followed you already finished the
107:26 - homework that's perfect if you do not
107:28 - follow
107:29 - follow and then get it done all right
107:33 - okay yep beautiful all right in that
107:36 - case guys
107:37 - all i will say what's up can you go to
107:40 - the
107:40 - experience yes
107:45 - yes please just i want to take a
107:46 - screenshot okay
107:51 - uh thank you so much here take a switch
107:53 - right here
107:55 - got it beautiful
107:58 - nice sweet all right guys at this point
108:00 - let's go ahead and maybe
108:02 - maybe do some musica we're gonna have
108:04 - some music
108:05 - and before we have some music guys
108:08 - here's what i'll say to the youtube
108:09 - audience guys
108:11 - you can see we have such an amazing
108:12 - community you can see the amount of
108:14 - stuff that we're learning we're going
108:15 - deep down
108:16 - in understanding on everything that is
108:18 - there on software development
108:19 - today we talked about apis next time
108:21 - we'll talk about a few different things
108:23 - the last time we talked about promises
108:25 - and we literally dig dig deep down into
108:27 - that understanding
108:28 - so if you're interested in learning that
108:30 - the uh
108:32 - you know the deep down things on cyber
108:34 - development if you're interested in
108:35 - being part of amazing
108:36 - community that's growing where people
108:39 - are getting results for example like
108:42 - just landed
108:42 - his for his his client as well we have
108:45 - so many people who are lending clients
108:46 - jan got our job so many people are
108:49 - lending people clients it is insane
108:51 - so if you're interested and join amazing
108:52 - community like this who's that
108:54 - supportive
108:55 - hold on i want you to go ahead
108:59 - and everybody say with me join p.w.j
109:04 - say it with me right now join pewdiepie
109:06 - [Music]
109:09 - there we go there we go all right
109:13 - all right at this point guys let's put
109:15 - on some music um i'm trying to figure
109:16 - out
109:17 - what music i should put on but i'll put
109:20 - on what i always know that just
109:22 - works very well
109:26 - no not this one nope video recording
109:28 - nope
109:31 - caution go flavors
109:35 - see this one
109:39 - hold on
109:49 - if this one
109:55 - [Music]
110:07 - all right let's get some dancing guys
110:09 - let's go hey
110:12 - wait can you guys hear the song
110:15 - do you guys hear music no
110:17 - [Music]
110:19 - you guys don't hear the music
110:26 - oh man hold on my bad i was dancing by
110:29 - myself i guess
110:33 - hold on hold on guys let's see
110:38 - [Music]
110:44 - i don't understand
110:47 - am i sharing computer sound why is this
110:51 - now working the way
110:55 - i got it
111:00 - no okay
111:05 - how oh come on
111:13 - hello okay all right
111:17 - what about
111:32 - now
111:40 - [Laughter]
111:44 - thank you thank you sorry about it
111:50 - [Music]
111:59 - [Music]
112:00 - nothing
112:02 - [Music]
112:07 - my bad guys i'm sorry hold on
112:11 - [Music]
112:14 - okay
112:17 - i'm trying to figure out how to so make
112:19 - sure i want to make sure that you guys
112:20 - here too that's why
112:22 - hold on what do i do
112:27 - [Music]
112:40 - i like it okay i like it
112:44 - let's think about
113:00 - you always gonna have something weird
113:01 - that happens you know what i mean
113:03 - always
113:08 - can you guys hear it now we head for the
113:11 - sky it's
113:12 - all all right damn it
113:15 - [ __ ] damn it now
113:19 - you should just sing for us oh wait for
113:22 - the sky
113:23 - okay no no i got no singing voice guys
113:28 - i got no singing boys trust me
113:30 - [Music]
113:33 - yeah system audio that's fine that's so
113:36 - good it's just it's trying to share
113:37 - systematic and it's just not
113:38 - not doesn't want it the way it should be
113:41 - so here's what i'll do
113:43 - i will stop sharing i will stop sharing
113:48 - right now i got you guys i got you i
113:49 - know how to do this i know
113:51 - i got you i'm gonna stop sharing i want
113:53 - you i'm going to mute myself here first
113:56 - because i don't want to bull your
114:02 - is everything okay still you guys hear
114:06 - me
114:07 - yeah yeah he can hear you okay so that's
114:09 - good
114:10 - that's good that's fine
114:16 - you hear it or no no
114:19 - that's fine so here's what i'll do now
114:21 - check this out i'll do this
114:24 - edx okay they can't hear you but they'll
114:27 - be able to be able to
114:29 - hear this and then you will be able to
114:31 - hear this as well
114:33 - so check this out advanced
114:37 - and tell me if if it doesn't blow your
114:39 - ears okay
114:41 - let me know if it doesn't blow your ears
114:44 - is everything okay
114:46 - everything okay yes everything's still
114:48 - okay okay you hear me
114:57 - you guys hear it yes
115:04 - let's go really good yeah
115:09 - all right i'm gonna start from the
115:12 - beginning let's start from the beginning
115:14 - so unfortunately youtube you can
115:16 - actually hear this i'm sorry
115:18 - but you know what if you want to have
115:21 - this kind of a party
115:23 - you gotta kinda just join pwj
115:27 - all right so
115:33 - hey let's go
115:37 - [Music]
115:41 - all right i want everybody's hands to be
115:43 - up you guys ready
115:46 - hey let's go
115:50 - [Music]
115:53 - all right easily
115:55 - [Music]
115:58 - to this out make it louder
116:02 - right louder is it good now
116:09 - let's go
116:16 - hands up let's go
116:20 - all right
116:23 - brian i will spotlight you for a second
116:25 - here let's go brian
116:28 - go brian hey go go
116:31 - go go
116:35 - there you go
116:38 - i love it man all right next up we got
116:41 - don't need to next
116:42 - [Music]
116:47 - there we go next up we got so help
116:51 - we got some help go some help go so i'll
116:54 - go
116:54 - so i'll go go you're on
116:57 - [Music]
117:05 - nice next up you got melissa go melissa
117:10 - go go go hey
117:13 - nice next up we have
117:17 - brandon brendan let's go
117:20 - brendan go go hey
117:24 - all right next up i'm gonna do luca
117:27 - luca chill it down for us and chill it
117:29 - down for us
117:32 - hey there we go and nice
117:35 - nice nice and so now guys that is
117:38 - awesome
117:39 - all i can say is at this point at this
117:42 - point all i can say is
117:44 - thank you so much thank you so much for
117:47 - what you guys think about this one great
117:51 - all right all right guys i'm sure you
117:53 - guys learned a lot
117:55 - all right any questions before we head
117:58 - off are we all good
117:59 - you guys all pumped you know homework
118:03 - yes yes i love it i love it all right
118:06 - guys
118:07 - that is all i gotta say is hope you guys
118:09 - have an amazing day and i will see you
118:11 - in the next video but hold on don't go
118:13 - yet because i'm gonna end the live call
118:14 - right now
118:15 - and to you the youtube audience youtube
118:18 - audience if you want to join this
118:19 - amazing community
118:20 - the link is down in the description it
118:22 - is by far
118:23 - the best community out there that is it
118:26 - you give a thumbs up if you agree with
118:28 - me actually raise your hand two hands if
118:29 - you agree with me with this one yeah
118:31 - let's go all right in that case have
118:34 - yourself a great day and i will see you
118:35 - later and i'm gonna finish
118:37 - the

Cleaned transcript:

here with me today actually it's not just someone it is it is a something that i like to call the pwg community everybody say hi what is up hope you guys are doing amazing everybody say hi guys guys i am so pumped this is the amazing community as you can see right here you know prophet joshua community and again the link for this community is down below in the description if that's something you're interested in right but today together with you know with at this point 62 people we are going to be learning how to build a node.js api and so guys guys i'm going to go ahead and share my screen and let's go ahead and get started are you guys ready are you ready i want you to still raise your hand if you're ready raise your hand if you're ready yeah there we go there we go i love it i love it okay okay i see comments coming in from youtube that's it guys i just i want to know you are live right now just so you know all right so sweet share this share all right so we're gonna get started here right now so today one goal is to create i know just bi we currently have we currently are working on what we have a i'm going to open up my file open recent and i'm going to open up my netflix clone so make sure you guys have your necklace going on here i'm going to put that here right there i'm going to make this a little less it's a little bit too large let's all right guys hello hello hello hope you guys can hear me hopefully you guys can hear me right there can you hear me say talk guys can you talk oh i can't hear you hold on hold on talk hello there what happened what happened really wasn't that bad wow wow my bad guys not my bad i don't know what happened my bad my bad guys my bad guys i'm i'm trying i'm trying all right from the top okay from the top i'm gonna take this slower slow okay so like i said you know the goal is pretty simple for today uh go ahead and go ahead and download this videogenetics clone go ahead and code this up so i will have the link right here uh so copy this i'm going to put it in the chat here in a second i'm sure you guys have in the chat correct let me see in the chat and the chat in the chat there we go beautiful put that in the chat awesome sweet sweet sweet sweet sweet that is all good i thought somebody said i thought i was laptop making my noise yeah it's weird i don't know i have to get that road caster that i think that will fix actually a lot of problems for us so if you have your if you have your what's it called p division fx cone raise your hand up here up high yes yes you got it beautiful beautiful all right and so what we want to do at this point is we have literally one goal which is we need to we want to create our first node.js api for today and because we are going to doing one thing and one thing only which is if i go ahead and say do we're going to create a login so we want to create a login login for for netflix cone right here right there and let me actually go ahead and and i will go ahead and i will post the latest that we have from the last time so we'll say add what was the last call november what november november 5th right number fifth yeah save that get push origin master there you go okay all is good there beautiful beautiful all right guy youtube youtube how you guys doing great great to see you all great to see you all all right so i went ahead and i uploaded so it should have the latest stuff on here as well so go ahead and download that from for yourself as well so cool cool cool cool beans all right next up so to download let's talk a little bit about how this whole thing works how do we create a node.js api how do we create a log authentication and i want to use for example i'm going to use uh something called draw y'all to kind of show it to you guys so you know as well so let me see let me see let me see see remind me later here there we go create new diagram create your diagram i'm going to create this diagram right here so you guys can see exactly exactly how we're going to talk about this so let me ask zoom yes this is zoom guys this is what the amazing prophet joseph community as you can see look at this beautiful community everybody is learning everybody is out here to kill it and start for development is that right isn't that right guys isn't that why we're here so all right can you guys hear me by the way right say hi okay cool cool cool yeah so authentication so we have our netflix going correct yes or no we have our netflix clone all right let me go ahead and actually take a picture of it and i'll take a picture if i go ahead and go into html if i open this up open my live server okay it should be here there we go there you go somebody said joe and peter johnson yes yes exactly so this is our netflix clone that we have built in html all right so let's go ahead i'm going to take a picture of it here for a second so we can use this command 4 that's it right there okay and then i'm going to go ahead and put that on here actual size damage too big okay resize it fine hold on what is this guys i don't wanna that was interesting jennifer that's very interesting where did my screenshot go one second oh in the meantime guys i want you to open up draw yo okay if you have a draw you open i will let me know i mean i want you guys to open up draw your because i don't want to be the only one who's uh who's doing this stuff there we go beautiful so we have our netflix clone it's right here okay it's our netflix clone and so now the goal is what the goal is pretty simple we want to log in right so we want to create a login page for our netflix clone right here our login page this is going to be our login page okay login right there let's increase the size here to about 18 no it's increasing even more right there sweet beautiful okay so and our login page is going to be pretty simple guys how does it what is the login page usually have you tell me what is usually what does the login page have tell me guys tell me username and password right so we have username and password so i'm going to put in an input here for using my password right here just like this okay and then i'm going to do alt oh no i'll do command command command hold that's gonna be password right so we'll have username this is going to be user oh we'll say email how does email sound does email sound good right yes or no beautiful i'm gonna do command shift bring it down password right and then with that we're going to go ahead and create what so oh [ __ ] what is this like this hold on there we go beautiful nice nice nice nice all right a lot of i love how people on youtube are also answering username email password confirm password somebody said let's include passport gs okay okay okay so beautiful now with that then what else do we have after this those do we have a button yeah so let's do a button so we'll do a button it's a submit button correct so would you like a submit button let's see and button like this there we go can i change the text in here yeah i can't submit or we'll say login how about that does that sound good login nice so now now this is a very simple simple version of uh this is a very simple version of a log and obviously you know we can make it fancier guys okay and actually maybe you can make it fancier and what happens after this after this what happens is that obviously logs you in to here right but before but before all this happens we need to talk about what happens in the middle like what actually happens in the middle here let me go ahead and put that here because there's a lot that's gonna happen here in a second there's a lot that's going to happen somebody said this is figma now this is draw yo guys this is draw yo not figma draw yours is free very nice free version which is this one that's what i like before now i want you to list out guys what happens here in the middle somebody tell me what happens between the login page and what happened and when we actually get onto when we actually get onto the netflix page what happens something tell me so man so let's think about this here for a second for a second let's talk about this let's say we have a node.js this is a node.js am api okay this is a node node js api all right this is another gs api okay all right what is going to happen i want you to give me the flow go somebody tell me what do you guys think okay so let's think about okay great good good good good so what's going to happen here so inside this node.js api uh i'm going to do it like this actually inside this node.js api i'm going to remove this part right here because i don't want that actually that part trying to make it so it's easier to follow let me see how can i do it like this yeah i'm gonna do like that there we go and i'll put the text on here for node.js api ah this is i don't know is it me or do i i just love sometimes drawing drawing diagrams more than even coding is it just me raise your hand if you're like me yeah i just love sometimes just drawing diagrams so like i know what's actually going to happen you know what i mean there's something about that okay text yeah yeah yeah exactly all right so not just api now so before we even what do we actually go what do we actually take to the node.jspi what do we go to the nitrous api like what do we send when the user hits clicks login what happens okay okay so we sent the email password so let's go ahead and do that and guys go ahead yes but where do we check the if the email is valid before we do that hold on guys who's very loud who has a loud background hold on hold on somebody has a very loud black wish i don't like this somebody has a very loud background which i'm not a big fan of okay i'm going to mute you all for a second here okay guys i'm going to new york actually someone can somebody help me with the meeting portions uh brandon brennan you just raise your hand go ahead brandon how about i'm gonna make you the cohost there you go so brandon just mute everybody okay mute everybody you got it yeah go to participants yeah i make you look awesome i mean you go you should see it and then mute all here i'll do me all here oh maker host now you're the cohost there you go brendan now you're the cohost there you go my bad i thought i made you the cohost okay beautiful so guys and then go ahead and meet yourselves now at this point so with this point on we're going to send something and i'm going to send it i'm going to send something like this so this is another js api and i'm going to send data from here so i will go ahead and i will go here and to here we're going to send some data what is the data you guys said email and password correct so we'll send out email data email and then it's going to and it's going to look a little bit like this we'll say probably email right here boom boom boom right there so it's going to be an object somehow somehow like an object this is how we'll send data we'll say email and that's going to say uh just an example might be something something at a gmail.com right boom right and then password yes or no give me a yes or no yes or no great password and the password is gonna be let's say one two three whatever the password is whatever the person puts in okay great so this is the data we're going to send to to this it's request and this is going to be a api api request this is what we'll call an api request okay and i'm going to talk a little bit about what an api actually is here in a second but okay think of an api just this layer where all the stuff in the background happens okay where all the stuff in the background happens so when we send this data to our api our server what do we do first here i'm going to put this on here and i'm going to make this stuff is going to be blue so what happens first when we receive that data what happens first huh convert it to what okay that's fine convert to json but i want to go a little more high level authentication okay i want to go a little bit more now no less high level okay great but what what what do we do with this data we're given this data guys what do we do with that data say say again steven say again steven i don't know about that because so no no no you guys are going way too intricate forget hashing forget all that stuff guys this is the issue a lot of times you guys think you need to think a little bit simpler right when we send this data to the node.js api we're like okay we're going to ch our goal is not very simple check if if the password using it check if the email password exists is valid yes or no yeah thank you oh my god check if you're like hashing json hold on you got to think about the simplest thing first so check if email and password is valid it's as simple as that okay and now let's think about this okay now if it's valid this is a i call this as um this is a decision tree right here whenever we use like a marker like this guy this it's called it's called decision tree just so you know it's like a decision so for example here i'll say valid yes or no so if it is valid if it is valid what do we do if it's valid okay great but what do we send back to the to our frontend page what do we send back yeah so we tell so yeah so we go ahead and tell so i'm going to do this here if it's valid it's going to go to our i'm trying to figure out how to properly you know close this it's literally going to go ahead and go to this page yes yes so this is yes valid it's going to say hey success and then what it's going to do if i'm going to copy this portion and this is again this is a very high level there's there's a lot of stuff that's going to happen underneath underneath you know but at the end of the day we're going to say that this is remove this this is valid would you would you agree with me on this one okay great so it's valid so all is good so it's gonna make it green okay now what do we do what do we do if it's not valid though okay yeah so on the login page and the login page what do we say what do we say in the login page yeah so we'll say something for example we'll say like so if it's not valid we'll say no and instead we will say i'm going to ah there we go i'm gonna put here this here and we'll say not valid so and we'll talk about how that actually works on you know on the technical side of things but i'm not val and we'll say um incorrect username pass all right or try again right incorrect username name such password does that make sense does this make sense you see we go to here here chuck the email password is valid if it's valid if it's valid then boom we go to the uh do the action netflix store if it's not valid then we go boom we go back to the login page and we say hey you know what you gotta enter the correct using my password all right okay sweet now now let me let me can i try something here for a second talk no you guys still hear me by the way is that everything still yes oh there we go now they can hear you too some seems like it's all good now they can actually hang out too as well all right sweet so we got that portion that's all good that's so good now all i need at this point is what i want to talk a little bit about raise your hand here if you know what is a api raise your hand okay so you know what an api is okay raise your hand you don't know what an api is okay okay so we have a few people who don't know what api is okay that's that's that's that's completely fine okay can you see me now guys there's no lag right there's no lag yeah there's no lag it's all good now yeah yeah no lag okay beautiful so okay great so what is an api because somebody explained to me what is an api and i go go ashwin yeah so ap is an application programming interface so it is a set of rules which allows like programs to talk with each other like a developer will create a program on the server and it allows the client to talk to it it's like a communication medium okay okay so an api is like just an option said it's an application programming interface is it god they always have some weirdass naming for it's like can you explain this in layman's terms stands for application application programming interface account that applies everywhere oh no application is out there intermediate between uh oh there we go programs to talk to each other there we go this is much better okay the acronym it's called application program interface which is a software intermediary intermediate what is intermediate guys uh what is intermediary it's like a middle right it's like a middle it's a middle right jesse you're saying i'm trying to explain yeah can i try to explain see if i can understand you go let's go jesse let's go jesse come on you got this come on i think i think the api is um simply face it's an errand boy and you tell the errand boy what kind of data you want okay in order to get from that errand boy what you want you need to speak his language okay and then the errand boy or the api will fetch the data that you're asking okay request exactly i think that's perfect that's perfect it is somewhere where you go in and you get the data from correct what is aaron can you explain what is aaron boy like a messenger boy like uh i have to say oh it's a messenger or it's like a messenger boy yeah it's fanboy messenger waiter yeah oh really okay i have never heard that that word before for some reason sorry i'm i'm also not in english native speakers yeah what's the word like a waiter yeah yeah i get it i guess it's like the winner it is the waiter biscuit it is um almost i almost want to think about it it's like almost like um it's like if you have a kitchen like when you go to a restaurant right when you go to the restaurant right it's like let's say you're at a restaurant so let me go ahead i'm gonna create this white board here for a second i'm gonna say what no so the restaurant would be a database for example and the waiter would be the api and then the request would be your order you ordered uhhuh go ahead you talk to the waiter and then a waiter will go to the kitchen database to fetch your drink okay and in order to do that you need to know you know what language to talk to to the api because or the waiter because some apis they expect an object or a certain url for you to pick you know to get some data or sometimes yeah yeah that's so if we have if we have for example a restaurant okay if you have a restaurant and let's say a restaurant this is a restaurant and let's say here you guys can hear me right here this is the kitchen this is the kitchen right here kitchen this is the kitchen and you have the tables right so right here i'm gonna draw a few tables so one table table number two table number three but horrible tables but you get my point are they six feet apart they're they're they are feet apart so here right here right there uh right here and here these are the tables okay that's tables and and now let's say uh how can i draw a person like a waiter i don't know uh stick figure oh wait circle i got there you go this is going to be the waiter waiter okay this is going to be the waiter this is the waiter right here so that's the waiter now so if you want to think about okay what do you think if if okay the kitchen is where all the magic happens correct that is where the food this is where we get the food that is where we what's it called that is where so if you think about it so let's think about this okay so what do we what do in the kitchen what happens food is prepared right yeah what else happens in the kitchen yeah they take a order what to make okay they take the order the order is taken so the order order is taken okay okay what else crap they dispatched the order this patch would give a dispatch what does the dispatch mean um they take whatever the person ordered and it goes from the kitchen to the table to the actual table or actual person so they actually make the order yeah okay i like that bell right there so cook the order cook the order correct you're like dispatch the order it's like hey wait can you uh has my order been dispatched yet we're just going to slap me in the face i've never heard that before nice to meet you my drink is async you serve them i love it okay sweet okay so we cooked the order what else happens and then you call the waiter to bring the food out to the table okay so you call the waiter call the waiter the waiter okay okay and then also in the kitchen that's where we have all the ingredients right all the ingredients right that's where the all the that's where the ingredients are right so ingredients yes or no the good restaurants yeah that they don't run out yeah i think there's also a moment of uh validation you know when you order something and sometimes they come back right and they say oh today we don't have it anymore okay so like basically uh checking to make sure to stay checking to make sure if we have any more right yeah yeah why they would if we have something what is available if thank you if thank you make sure if food is available yeah like the same thing what happens when you're if the email exists in your database yes yes yes so yeah so based on this based on what you said how can we relate this to an api if if let's take let's think about like this this the tables that is the front end the tables right the table that is where the user is here the user is here correct so here we have one user saying you have another user sitting right that's the user right these are users so let's call this jesse right here so jesse is here sitting in this table and then near jesse we have i know i'll say devin devin okay and they're just sitting right now okay and they ordering some food okay so when you look at how we correlate correlate you know an api to a front end what will be the front end the user what is the user interacting with so currently the user is interacting with the front end so what is the user interacting with tell me food menu the menu yes the menu so the menu look at that we'll call it the menu the user interacting with the menu okay great so the menu or the let's say the user interacting with the whole kitchen just in general which is the front end right that's the user sees right they see the menu they see the front end they see other people yes or no yes so that what if we call that the front end what if we call the menu the table what the user interacts with you know with hands what if we call that the front end oh user interface user interface that's what the person sees nobody sees the kitchen yes or no yeah yeah but what do they see the tables the website the menu right that my friends that my friends is going to be so if i go ahead and click on this so if i have to click on this so if i'm going to create a line right a line so this is the line i will call this the front end right the ui here i'll call this a little bit here so it's this is the ui right so this whole line represents the ui give me a yes or no yes that is the ui and this the you this is the and the the jesse and devon they are the users now okay let's think about this here would you okay so here okay great so now so we got the ui now we have the knowledges api that is where we get the data let's say we want to check if the username and password is valid okay how do we check if the user password exists remember in the kitchen we said checking to make sure food is available do you see the correlation here no we check before we check through the menu i don't know about that the menu the menu can be old let's say let's say the menu the menu can be old the menu can be you know two weeks old all of a sudden for example for today something changed where that menu something doesn't exist on the menu you're not gonna you you're not going to create a new menu every single day yes or no i think we need to ask to the waiter wait or no available or not the winner knows robin that's correct the waiter knows yes the reader knows but what is how does the raider know asking the chef how does the waiter know who do they ask they ask the chef they ask the chef where is the chef in the kitchen so then what is the kitchen the database the database and backend backend the end hold on you guys can hear the dj air horn right you can't can't hear it yeah we should play the accessories damn it only the people on youtube here dammit i'm never looking at a restaurant the same way again there you go that's a nerd then you say hey uh waiter can you please fetch me uh talk to the fetchers i've never bring it to the front end please i'm making an http call uh to get the specific request exactly we know exactly exactly so if we think about it jess are you still here by the way okay great so you can see how the back end is the kitchen you see that here yeah that my friend and what does the bucket contain the back contains the api it also contains the database don't ace not database no database no damn it come on did a nas so that contains the database right okay great so we figured that part out now the big question is what is the waiter what is the vader waiter api is the api right no we just said the back end is the api we just said the kitchen is the api waiter is a request call like yeah yes there we go the waiter is the api request call yes so if you think about the waiter right right the waiter goes from where the winner goes from here right the waiter goes from the table the front end and they can the main communicator between the user and the kitchen is who the waiter the waiter exactly and so and on the logic side of the actual on how things work out in uh you know and you know in front and back and stuff right we have the api request which talks to the kitchen or talks to the data the api and then you know responds back with something yes or no yes yes so if we look at this this my friends is going to be a what an api request this is amazing [Laughter] ryan does that make sense totally so simple right right the only missing part in this like this is not relevant but just like hosting of service yeah the hosts in your servers yeah and we'll talk about that a little bit later hosting the actual this whole service yes but but the ui the backend the waiter they all take a big part this is literally this is literally called you know now you got your full stack this my friends is full stack this my friends is full stack development if you know both the ui and you know both the kitchen you're a fullstack developer so if you know how the kitchen works and you know how to create a really beautiful menu you're a full stock developer does that make sense okay so any questions before we move on on what is an api request what is an api and how it all works together if you have a question say or or you know or so where would the business logic sit the business logic well you tell me where do you need to sit between between the tables and the back end why do you think that's the business logic if the if the back end has the api in the kitchen where's the thing about this is the business logic in a restaurant where is all the preparing all the community all that's happening where is it happening tell me business logic happens in api like kitchen fit hold on one second fits what do you think um i think it will sit it too sick to sit at the back end but before it gets to the api well yeah yeah but but in general where does it sit right in the kitchen when a chef makes the food where does the chef make the food right that's the logic is that right right what is logic logic is what logic is equal to what making of the food yes or no yes yes logic is making up the food the chef knows how to prefer the food they get the right ingredients they're like okay this ingredient is good this is bad right if you just if you give adjustment the right amount of salt then you you know you get this if you give it if you give it just the right amount of pepper then you get this that's the logic the recipe yes that's the raj yes the recipe that is a lot the logic is the making of the actual food it's the chef he's doing his thing you know he's like so good you know yes hold on that's that's good that's a good question too so now before we do go to that does it does it make sense the fact that logic is the making of the food yes okay does that make sense the logic now is where fits i want you to answer this question where's the logic now yes it's in the kitchen right it's in the kitchen all right then but then doris doris asked dora uh do i say doris doris how did i say that doris yeah yeah doris doris okay so then doris asked okay and said where is the ipad response well think let's think about like this the food is prepared everything is all good we got the food what do you guys want let's say what should we create guys what do you want the kids to create lasagna what do you guys like pasta pasta lasagna i would say lasagna let's make some lasagna how about that that sounds really delicious right now especially because i haven't eaten right now that sounds really good so so let's say lasagna okay so okay the lasagna is made in the kitchen now who delivered the lasagna back to the table to the to jesse and devon wait the waiter so about based on that doris what do you think is also the api response the writer the waiter they are both right yeah they are both and then what happens and then what happens is pretty simple guys then what you got is you got jessie right shoot hold on one second right here you got jesse and they are both really happy i'm not the best drawer guys okay this is why you draw yo yeah that's a frog oh my god all right so they are both happy because they just got their lasagna that's some great delicious lasagna let's need to air horn i wish you guys can hear it but unfortunately you guys can't so so that my friends is that my friends is how the whole api works and that was an api the api is this so the so the api is that backend you see that it is that backend the request and the response it is that that little wait middle thing between the ui and the back end okay and you can call an application program interface how you know it's funny it's so crazy like this hold on let me go ahead and i'm gonna screenshot this for a second this is really cool guys i'm gonna screenshot this for a second here there we go there's no screenshot like this screenshot like this everybody can you raise your hand say hi on the screenshot thank you all right nice so at this point any questions before i move on uh and as i have one question go ahead so technically in a server and database where is the business logic happens is it in the server side or is it in the database what do you think oh i think it's in database why do you think that what's it okay let's think about this okay here's here's what one should think about so we talked about logic and then so we have you're talking about the logic right like logic is a happening database or is it happening in uh so it's repeat the question one more time yes the business logic okay api call okay uh the validation happens in the databases indeed the validation yeah i mean the apa okay so you're saying if the logic happens in the database or the logic happens in the backend api correct and or the logic happens in the back end correct in this server yeah yeah in the server so okay so great so i want you to think about this here so i'm going to connect this so think of this it's part of the back end we'll give me this part the back end and this will just be i'm going to call this right here the database but it's part of the back end just so keep that in mind okay it's just that's why i may have made it where it's like inside almost right so okay the database what is it if you think about what is the database on the kitchen side what is the database the ingredients okay and so what happens the chef what takes the ingredients and then the chef does what the logic makes the food okay so so tell me what is the database versus where so tell me now so now based on that is that right yeah yeah where do you think is the logic is on the server which is the back end or is it on the database or server is it in the server the database should not have any logic period no logic the database is merely there for one reason it is for the ingredients it is there simply just to get the data it contains the data it contains the ingredients that what it's the it's made for great makes sense the logic of checking if it exists or the actual like you know what do we do with the data that is up to us that is up to the api to decide all right make sense beautiful okay sweet sweet sweet awesome so at that case guys any other questions before we move on yes god what's up jenna yes yes in that case you see because she has only one waiter and she's only helping with a store but you have one table but you have to table right she's waiting for the order we uh be done she have to take another order that made me like okay the waiter is the ap i know is waiting for request response you know but it's not only one table several multiple tables that's right multiple tables so multiple users multiple so so let's say you have multiple users on you have to you have multiple users on your website right on your website right a lot of you know you got gianna you got brian you got bishez you guys all wanted this big amazing restaurant we'll call it the restaurant of pwj okay get on to all this amazing restaurant okay so in order for us to be able to to to cover all of you guys you know what happens what happens we use an uh asking from what happens you just have multiple waiters you just have multiple waiters that's it you have just as many you literally have just as many leaders as you have users that's it okay i know that's a lot i know it's a lot but we're talking you know in programming terms right and programming terms that's pretty that's pretty fine so you just basically have multiple you said you have multiple leaders leaders right so quickly yes talking about waiters right so in programming terms right so you only need one waiter the the api bridge yeah the bridge is the request right okay go ahead okay no say one more time say one more time no that was yeah so so basically i'm thinking of realistic terms so you need multiple waiters to actually get the order right that's a realistic term but in programming language you only have one bridge of api requests yes yes yes yes yes and that bridge is simply the network connection right the bridge is a network the api requests connection right it is a connection that that that's the bridge it's the request and the response okay and so however however many users you have so if there's if there's 100 users there's going to be a hundred api requests there's a thousand users there's gonna be a thousand api requests make sense okay perfect okay other than that any more questions go ahead yeah and what's about the async request exactly so yeah and the chicken and the kitchen sorry yeah yeah so ac async requests what is it so i mean okay so async happens on the back end stuff okay async but what is async it's asynchronous right it happens in parallel right yes or no async async equals equals shaft equals parallel because right so that means we can cover multiple users at the same time that means that means what that means we can have multiple chefs right covering users at the same time yes or no or at least they don't have to wait until one order is ready to serve somebody else exactly so we need for that we need to need simply multiple chefs that's it right you can have a lot of chefs and the back end has a lot of chefs the backing is so strong that the bag can literally can can have a hundred users at the same time in parallel just where you could just ch now at the same time very nice yeah yeah thank you you got it go ahead just a little confused here like uh like if i am like a single single user and uh like if i'm hitting the back end i cannot have like more than one request to the server at the same time can you i'm not sure that's an ass kick what do you guys think hold on hold on hold on one second one second what do you guys think about that yes we didn't get the question can you have let me put this down on here i'm gonna put this down right here so what will be the case of having multiple requests because you could order an appetizer an entree and dessert oh so can you can you that's a good question so can you can you have multiple requests oh come on at the same time set parameters in your request no no you can't yes of course you can of course you can but yeah but but can you tell me like what's the need of like multiple requests every single time so think about it like this so the answer to this is yes yes you can have multiple requests at the same time go ahead go ahead um um can you hear me yeah i can hear you okay uh um this is it i i work with amazon okay uh not um i.t i don't work in the itv4 okay office okay i i work in the warehouse okay where goods that are bought from the website uh maybe once somebody buys something from the website we have scanners we have about thousands of uh um i mean uh associates who are holding scanners let me so once the request comes it comes in multiple forms with different people holding their scammers you understand you buy buy somebody buy somebody's also buy yeah all those things are routed onto the amazon database yes whereby there are physical databases situations in the warehouse yes form of shelves yes where we have um the items being stocked into the shelves yes once the request comes i look at the item that i've been bought with my scanner then i look at the um i mean um the shelf that uh the item is located in with a number then i now go and then use my scan the item yeah to show that so so and so bought this and then i remove it and then process it yes at the same time somebody to use to buy in some way so we have thousands of requests coming to the api at the same time yeah and it is directed towards the same one single database we have yeah and we we have one centralized database for amazon yes only that we have one i mean multiple warehouses voted around the world so if you are buying from uk you buy it with your website then if we have um that attending the uk warehouse then people can get it for you if it is not there they give you time during the process of uh buying the item and probably they give you like a day or two or three yeah you can get it from in a nearest warehouse and then process it to you so it is just possible multiple requests are done at the same time to the api and then it is a process at the back end which is done um our uh i will not ask in chronology i mean at the same time with no glitches whatsoever because i mean at the back end we have all uh the items stopped uh virtually and then physically we get it done at the same time yes i think yeah so it is possible if there are no glitches about that perfect uh wha perfect what is your name because it says it says 915505 is your name my name is uh muhammad muhammad prophet muhammad that is great that's a great ever that's a great way to explain it you can have just how we explained it right yeah there's one such a database but you have requests coming in every single time thousands requests thousands of requests at the same time right you just have a lot of people doing the same thing all the stuff right it's the same no freeze nothing database works real time exactly in real time exactly so you have the database up and running you have your scanners that are the physical or it is connected to the database so once you you ping from the website it comes straight on to your um to your scanner then you now look at where um the item is stopped then you pick it scan it to show that you have removed that item from the record of the database exactly um so they now process it so uh as we all know one item or one one being is located with certain number is like it's an array of objects stocked in it so once you take one out of it then the length also reduces um against the number that was recorded into the beam so for now this is the explanation i i can give on i think this is great nice job thank you thank you muhammad i appreciate it thank you appreciate it though it's great this is awesome right have a database yes go ahead anish just wanted to extend on this question because like i i got like he's talking about the various instances happening on the server like from different places like with different instances what my thing my question is like me being a single user right like if i am landing on a single page right i can have like on that page i can have like maybe two calls to two different databases fetching two different uh kind of objects right is it i have to first finish the first and then come to the second yeah i think i think um what it is is that it's not just one database talking from a system systems side of things you have multiple databases but it will be coming through and there's what we call load balancer and load balancer will find out which database is used less and you just send a request there basically that's why so so that's a good explanation but i think i think in like in in what you're trying to say anish is like what you're trying to say is like if you're trying to make a request you know one time they try to make a request at the same time so here's the thing when when i make a request for example right imagine two users right at the same time the one on the website correct took you to the same time exactly the same time let's say they click the submit button at the same time right they click somebody at the same time right what can we do right what's going to happen what's going to happen things so like it will be cute cued up what i mean they're going to give a queued up and like it will happen uh like like they form stacks of operations and then it happens one after the other place sure true happens one after the other but at the same time yes they can technically it's gonna hit the request it's gonna hit the request at the same time and it's actually going to process that request almost in parallel in parallel pretty much it's gonna process it in parallel what you need to think about don't think about it so hard don't think about it so much where you know tell me what what is the issue that you faced you said you faced some kind of an issue yes or no yeah so like my my thought process is going in a way that for example i'm using this netflix page and for example i'm having my net originals and trending now and top rated uh information from say one database and you know that logic is implemented in a different way while the other uh john address that i'm actually trying to get on the same page is from a separate database or maybe even from the same database but with a different logic all together so i'm going to have two different end points okay right so when i'm so when i'm hitting this page am i having like like can i have like two requests at the same time or is it like i have to first finish the first request and then finish the because i have two requests at the same time you can make two guests at the same time yeah yes weekend yes the chrome and it's actually limited by your browser guys it's not limited by the database or the backend logic it's actually by the browser check this out it'd be free if you guys don't have any questions actually because i can remove this actually here for a second look at this limit limit of a number of requests of of parallel request requests in chrome so look how many uh max player hd connections in the browser look at that check this out so chrome actually you can in parallel get get basically six six connections may have six connections at the same time okay the other let's say let's say you have you you make six requests right you make stickers and it's trying to get at the same time what's gonna happen is it's going to let and then let's say now you make a seventh request okay seventh request it's just simply gonna go in the queue and it's gonna wait and then on the on the chrome it's simply gonna wait for the others to finish and then it's gonna go in the seventh request does that make and sense and then it's going to hit the api so the same so this is actually limited by your browser not so much the node.js api is limited by your browser how many connections or how many requests can you make at the same time in chrome you can make six then the seventh have to wait for something to finish to actually afford it to go got it got it does that make sense because you feel like you're still a bit confused oh no no i'm like i'm sure no you got it we can and like all of them will be like we have to define it as a sync yes well no yeah you you don't yet you don't have to define it as async you simply make the request and that is it okay so it's all happening parallelly irrespective of me yes you simply make it right that was a question that was like bothering me for quite quite yeah yeah you simply make the request if i if i you know if i for example i mean look at the same time at the same time when you call a function let's say you call a function here let's think of it like this uh am i can i erase this guys is this all good this this uh drawing ahead yeah i can erase uh actually one more question on this nice okay go ahead uh like where exactly like uh like remote procedure calls like rpc or grpc falls in here and can we expect any class any sessions on those on what almost specifically uh grpc and rpc like remote procedure calls and what is jrtc grpc like remote procedure calls g for not j it's g um i'm not sure what this is specifically i'll have to look into this for us to actually for a look for me to actually fully teach you guys what this is grpc i've never had procedural system initially developed google protocol yeah so i think this gets more into a little more advanced stuff uh maybe that's something interesting that we could definitely look into but for now for most people i just kind of want to focus kind of on the fundamentals okay okay okay perfect so yeah so if that's if that's all yeah yeah um i'm sorry i'm confused after uh hearing from anes and then she has made me confused um about the api request yeah when you said that that there is six uh for chrome there is a sixth limitation okay yes so now i am i don't understand really uh what do you mean by this like okay when i am a simple example like i'm when i'm when i'm requesting okay for like i'm i have opened this amazon website on netflix and i'm sending the request so in amazon i'm i'm sending wanted to ask for the next click i'm sending another request and before the yeah it's per site it's per site it's actually it's per site so it's not if you're different sites it's different so it's per site okay so in amazon i can make six requests yes and then on netflix you make six requests at the same time then same thing and you want and then and so forth but don't think of the please guys guys don't think exactly but don't yes you can you can make it yeah it's depending on the depending on what i say but don't don't think about i didn't learn this until like you know literally a year ago about the whole six request thing because that doesn't really matter guys all you need to understand is you can make multiple requests at the same time that is all you need to understand okay and even for example when you have a function if you think about it right in javascript right when you call functions how to call functions call right what happens in javascript if i remember go ahead and remove this you have one function oh should you have one function right here this gets called and another function you can really get oh shoot right here right here right another one it gets cold and i'm gonna get so it's called so it's it's almost like this one fires and this one fires and this one fires so sometimes it's really hard to make them parallel right they're just really quickly happening at the same time almost at the same time right but technically they're being fired almost like you know simultaneously but you know there is still some time time go ahead um i was thinking um what an issue is asking yes um with the power request yes it does happen and then once um the request is going it comes in the form of data block with uh encapsulated with some kind of um um ids you understand yeah so and we remember what uh we call like fifo first in first day first yes maybe yes so maybe if they are all directed towards a particular shelf then probably all the data block that is going into the shelf is somehow giving an id and then this one the request was sent from let's say uh my per my time here um maybe 10 45. this one maybe 10 46 or this one 10 40 uh 47. so it follows that order you understand though it was done within the shortest yeah right true truth is directed towards a particular place maybe the same place you get it so once it is done that we i mean the back end also consider that factor yes what time did the request i mean what time did you do that what time did the second one come yeah yeah yeah so then they now encapsulate everything with an id so this is my id this one comes in first before this one and then it also follows yeah so that there will not be conflict with that beautiful so this this is called encapsulation so for example this is called and this is more of advanced topic guys don't want to i don't want to like confuse you more but there comes a point where you have when you're trying to access database at the same time right because data changes all the time right you have to make sure that the database basically like if one is trying to remove the data you know another one is trying to for example you know you know let's say that you're trying to put you know data at the same time or you're trying to you know request the same amount of um what's it called um make changes to the same amount of data right what happens first right we'll talk about that later on let's say for example i want to change you know i want to change uh what's it called let's say i want to change in a database i want to change brian's name right so and let's say i want to change brian's name to be to be nas and then and then uh ashesh wants to change brian's name to be to be cool i don't know whatever right who gets to change it first right so i don't want to confuse you guys at that point but that's a great point you you prada muhammad there is a thing where we do on the database side to prevent that stuff from happening because like who knows like if you if i if i want to change brian's name and then i just want to change brian's name on the database who goes first right who goes first but i don't want you guys to think about that because that that will only confuse you even more for a second here we'll talk about a little bit later on and i can actually show you an example okay show you an example so you guys can see it for yourself okay yeah give me a thumbs up yes nathan all you're saying is the acid it's the acid acid hold on it's a property of databases transactions which is intended to guarantee yeah that the data validity you know when there are errors yeah yeah yeah yeah yeah yeah yeah acid acid does this commonly known as a potential lasting psychological drug [Laughter] not this acid guys don't do this one don't do this put acid and database yeah yeah yeah yeah yeah i know what you're talking about i know you're talking about yeah okay but atomicity yeah consistency isolation and drop yes we'll talk about we'll talk about that in the next one how about that okay we'll talk about this in the next one the next coaching call okay beautiful all right all right cool so we've got this portion raise your hand if you have a broader understanding of what a api is and how it all correlates together raise your hand up high and say yes i do yes i do yes yes i do yes i do there we go beautiful that's awesome that makes me happy okay cool so now guys at this point i really want to quickly i want us to actually create a really small api a node.js api and we're going to do this here in a second because next the next live code when we get together uh we're gonna actually create something that's different so let's go ahead and do that to create note just api uh actually here the portion we're going to create is which portion it is this portion right right there's no there's no jsbi the one that actually checks the email password is val and so forth yes or no yes give me a thumbs up yes okay good all right so let's get to it so the first thing i want you guys to do is go ahead and go to node.js and you could as you're doing go ahead and know gs and do kind of with me right there go to node.js and then download this right here so node.js ian i'm going to go ahead and cop shoot i'm going to copy this and if you guys have not just installed that's that's actually really good i'm gonna put in the chat here somebody's like yes i do in the chat i like it there you go i'm gonna put that in a chat here and then what you want to do based on that go ahead and download it for mac os or for whatever it is right there right there and then i want to go ahead and no gs i'm gonna go to node.js node.js starter api yeah and i'm just going to go ahead no no no no no that's not all i want okay so with what okay so when you download a node.js go ahead and install this right but obviously i'm not going to wait for you guys to install it initially i'm just going to show you what happens when you do when you do have an install and everything is all good so what i will create is i will create a new folder let's go to netflix clone i'm going to create a new folder and i'm going to call the file i'm going to go my projects where's my project um my project and then i'm going to go to netflix is this the one i think is this one yeah it's a netflix clone right here but i'm going to create a new folder called the netflix netflix api that's what i'll call i'll call netflix api okay netflix api and then i will go ahead and open this one file open file open file open and then we will open up that specific project so i'm going to say a netflix api right there open this one up beautiful and so it's just going to be a plain and simple oh my god why is my computer lagging dang okay netflix api inside this one the first thing we need to create actually is let's go ahead and and now inside to actually start up your project all you see is simply to do is right click and then open terminal in new tab so new new terminal at folder or just open your terminal and then what you can put is you can do put something like npm start so let me go ahead and just make sure that i'm all good and is i think it's npm start anybody remember npm install no i think it's npm start npm npm right that's the one thank you yeah npm init so i'm going to make this larger for you guys and pm in it so what mpm init is really it's going to ask you okay um you know what is your project so in our case it's going to be netflix underscore api that's fine i'm going to hit enter version 1.0 hit enter description this is the api for our netflix cone boom entry point index.js that's fine test command we don't need this right here get repository uh don't need that keywords don't need that author i want to say pwj for now profile javascript javascript license that's fine it's okay yes enter boom that's okay so new minor version of npm okay great so that's fine so now if you look at our netflix api do you what do you you see something something was created a file was created and this file is called package.json it's called package.json this my friends what is package.json you tell me it's a list of all the dependents hold on pedro you were talking go ahead pedro uh it's a list of the dependencies and uh that we need to to run our projects it's listed dependencies it's literally the description it's kind of like this description of what your project is it's a description of what your project is that's literally it it will contain dependencies a lot of different other things now with that said let's go ahead and create our api and we'll to create api we're going to use something called express.js so it's expressjs works handinhand with our node.js api so expressjs right there you can see right there expressjs is a minimal and flexible node.js web application framework that provides a robust set of features for web and mobile applications see right there okay so it's a create it's a way to create a robust api quickly and easily all right makes sense and it's pretty exciting you know this is how we literally this is the get started you can see we have mp minute we did that and now what we need to do is we need to do npm install express okay so it's going to go to here i'm going to open this up in new terminal folder open and terminal that's fine don't need this right there so we'll do mpm install express tester save so npm install express desktop safe hit enter great so we went installed okay now really really quickly i want to talk about a few different things what happened here what happened here guys what do we have inside now if you look at package.json you see the dependencies what happened dependencies check this out somebody tell me it's alex press yes so you can see express now is part of dependencies that means that whenever someone else goes ahead and wants to install this project all they need is they simply need this package.json file and they will install their dependencies and where do the dependencies are installed sorry oh [ __ ] what's happening why did my headphones you need some coke i need some what hold your bread all right so drink some water i i'm drinking some water i actually water i have tea look at this guys have you seen look at his tea guys this is amberly's tea this is emily's cup so i just stole it from her um so so let's go ahead so we have no so if you look at this check this out all our stuff is actually saved aware it's inside of modules the null modules contains express right here you see this if you look at express it's right here this is the your express remove this this is the express right here boom right there that's your express there okay so this is where all of our independences will install okay great so now let's go and install and do let's go ahead and format if you look at here so we got that next hello world okay and here's what they tell us how to do to run to run it locally this is going to be the index.js file right here check this out so it's to create this all we need to do is we need to create an index.js file so let's try this i'm going to right click and you click new file and i'll say index.js this is the this is the the entrance of your api so if you think about it you see this main that's where that's where the main entrance of your api is and this will be in the js file and now for this the express.js you know starter pack starter file if we go ahead and copy this i'm going to command c i'm going to copy this specific portion okay and i'm going to paste it into here boom right there so what are we doing here what are we doing here in this instajs file and again this is javascript guys as you can see node.js is javascript right what we are doing here is we are actually i'll have someone explain it for me what do you think uh i want to pick on someone let's say i want to pick one stephen what do you think so what are you doing here you tell me the ironic thing is i was actually working before the call on the burn tech talk low oh beautiful there you go we're actually so you know your stuff oh kind of yeah still grasping it but okay but tell me what's happening here so basically the first one we're requiring uh we're calling the express the currently expressed yeah no what's happening here um it's calling the express um a little help we set the api request we're importing express because express right now is inside the null modules we need to import all the code that express has and import that into our application so we can use it yes or no great now here what do we do what's up gianna you say something yes yes let me ask you because every time that going to create one application for example on this one we are in the api server but i don't know if i have to insta how you say install mp express just for the application locally you know just an application or globally because i say okay everybody install expressing in node i already have installed globally do i have to do that every time that i have you have to do it every time for an application for that for one application yes you do for yes yes yes because what happens guys what happens when you do require you know what happens require here's what require does require will literally import the the data from where the node modules right there it's going to look for in here and if the node modules are not here if there's if your nodes in modules are installed globally they're not here you need to be you need to have that as part of the project on top of that it's very important because when other people install when other people want to go and install your project on their computer they need to have all the known modules in there and so you need to install it just for that specific project okay make sense jenna good question thank you okay go ahead brian yeah really basic question i guess go ahead what's on what's up what's on express so here so express so i guess i could explain it better so node.js you understand node.js is an api it's what we're using going to use for an api does that make sense give me a thumbs up okay now express express is think of it as like um so if we have so if you think about this if javascript is no gs express is react gs express the framework as a framework see right there it's a web framework for node.js react.js is built on top of what javascript exactly express is built on top of node.js it's like it's got that cool functionality right it's got the other cool functionality that like allows us to create apis right node.js node.js is the basic right it is the foundation that foundation thing right but but but express is what just makes it so much easier for us just like react.js makes so many things easier for us right right the whole binding thing how do you bind the data within the front end and all that stuff right it's right to this it makes it so much easier the logic all that stuff it's just so much easier that's it but under the hood it's using node.js does that make sense now yep beautiful sweet okay so great so we got that so now we're here and inside here now we are going to initialize initialize initialize express okay here what are we doing what are we doing here guys setting the port guys we still have 232 people watching holy moly that's pretty good i'm cool 232 people watching and on this video okay dang guys by the way guys how how do people join an amazing community like this guys let me ask you this question how do people join like amazing community like this how do they join how do they join you guys tell me wj join pwj where's the link guys where's the link down below down below should they join yes or no 100 yes 100 there we go 100 guys you got the results right here yeah you guys you got you guys 100 have 160 people right now that are saying you guys should join if you're not joining if you're not in pwg what are you still doing i don't know just you know this is this this world is too too uh you know to uh yeah exactly all right cool guys so here what are we setting here what the port setting the port turn the port create okay okay what is this now this might be a little difficult for you guys to understand fully what is this api using right so it's using the get method what is the get method okay what does this slash mean so look you see how we're using the app we're using so we're using so right now we're using express right because it says app.git right because right now if you go to here getting started let me see getting started next hello world let me see a next express generator blah blah blah no that's not what i want uh let me go ahead and open some new tab let's express.js i'm going to say app.get app.dap duplication nope app.get right here app.get returns the value of the name app setting name is one string trying to find an easier way for you guys to understand this right there so you see app i get right here so what is this what does this get do it's a get request correct this is handling the get request what does a slash mean what's up that's the end point that's the end point so what this is the homepage input right the endpoint right this is where the logic is going to be logic for the get request now i will talk about this in a second but there's actually something called a pulse request there is a patch request and so forth a get request really simply means when you do that git what does that mean what does that mean return something you return data that means i'm trying that means i'm trying trying to get data okay i'm trying to get data this is where the waiter is simply getting kind of data from simply getting some data right from you know from the chef or something like that right simply getting data okay so for example let's say this let's say for example as a user i asked the waiter hey uh do you guys have what is your curve for example let's say i went to the waiter and i said hey what is your current soup of the day the winner went to the chef and asked the chef what is the soup of the day and then they return it back to the user does that make sense that's like a get request get it okay cool so awesome so that is a get request so let's go ahead and on the request what do we say that we send what hello world to the request okay great and then here what happens here listening on the portion listening on the port so this me this is where we start the application this is where we start our app or this is called listening to our application or listening to the port into the port this is when for example this is almost like when you say when the kitchen is open so the kitchen now is open the kitchen can be closed or the kitchen is open this is saying here open up the kitchen that's what this is saying make sense okay cool so now now we need to start start up the restaurant we need to start it up okay so let's go ahead and start it up to start everything up we go to here and you can see first create a directory name my app change it to run so we did npm in it although everything is good there uh we'll create app.js but instead of did we did index.js sort of app.js and now run the app with the following command nodeapp.js in our case it's going to be node index.js so i'll do that node index dot js look at that now we have example app listening at this so i can literally now copy this look at this we're listening on this specific open let me say this we're listening at this specific app and if i go to it check this out guys if i go to this hello world look at that hello world we have officially created our first ap on aprion api endpoint we officially our first api endpoint and that my friend is the start of something something new oh thank you that is our something new okay because after this now for example let's say you want to return data you can actually now return this look at this you can now do like you can now do for example like you know things like valid valid so things like this right so like if i save this refresh this oh shoot i need to when i by the way right now you wouldn't need to do this but when you go ahead and change anything on insta inside instajs you have to restart your app so you have to do command c or a control c and then you do local then you do note and it's a gs again right there that will choose nordman yeah well yeah and then we'll do normal here in a second so see this returns data right here this returns data to the api to the front end now we're looking here one thing i want to want you guys to install and i want you to install nodemon so nodemon nodemon what noma will do is just it's very simple you can actually install it globally right there but you know you can still install it actually no let's install it like this for now what normal will do is it will listen for your file changes and it will restart your server that's all it does literally that's all it does so let's go ahead and do npm install save dav node month that's going to quit out of here we'll say nodemon like when i was working on your blog project i had to put pseudo so that some computers i get yeah some some people you have to do studio that's correct some people have to do suit if you get an error then you might have to do a pseudo sudo npm install save that save down nodemon okay and then what happens if you go to package.json that means that no mon is now inside the dev dependencies and i will talk about what is different between dev dependencies and dependencies later on but for now i just want to focus on installing nodemod and actually having you guys use it okay so we installed nodemon okay and now all we do all we simply do is is you simply know you use nodemon now we'll do for example now node mode so you can do nodemon beautiful so what's going to happen is what's going to happen is if i make a change here let's say i do for example now i change it back to hello world i want you guys to pay attention to this okay pay attention to here when i make a change we'll say hello world and i do command s for save look at that you see see what happened it restarted this it restarted restarted due to changes started no index.js so it restarted biscuit the server so it applied new changes makes sense and that means now if i go back to here if i go to my localhost if i refresh this we now hello world and that's it guys we've created our first api and i think i'm going to finish it at that that's going to be our goal for the day we got our api started and then tomorrow tomorrow not tomorrow but next coaching call exactly thank you romney yeah guys everybody give yourself a round of applause that's awesome um and then the next cochico will actually go deeper into actually creating the you know the username and password api how cool is this guys hey now yes ramy that's awesome the w as a as a baby you're talking about this oh my god hello hello world hello hello so guys what i want you to do really quickly is for your homework um i'm not going to i'm not sure if i can create a little video right now because i have ecam running i have zoom running at the same time i feel like i'll just kill my computer if i'll create also record a video right now but i mean i mean we can try i mean we can try it won't hurt can we i don't know i feel like i'm just gonna die none well at least he will die for a good cause oh god hold on uh hey hi nasa so i request you to share some interview questions and no jails hold on one second one second one second who that was that you who it is it's who yeah where are you hold on one second let me see and be fine let me find you no no guys loom is not gonna work guys it's too much for my computer to handle right now no it's too much too much all right so uh go ahead what's your question uh so uh if you could provide some interview questions and node.js that really adds you mean like oh interview questions yes for an interview like any resources or resources for node.js i mean to prepare for the interviews like regular interviews for the entry level okay i mean so for node.js most of the time you're actually not go people are not going to interview on node.js like most companies will not uh you know interview you the best way guys that i would say for you to prepare for an interview is actually going to be the one thing they will ask an interview is like what is an api how does an api work that is the foundation and underneath that they will ask those couple questions but they are not going to ask questions go ahead hold on one second run me one second i'm talking hold on but they are not going to ask questions you know around like what node.js is and so forth okay okay it has to do with that question what's up well i was quite frustrated from from module 8 i didn't know what is this fs require a face there is a nice tutorial um given by mosh uhhuh one hour about no node.js gives you the basics of objects beautiful so if you listen to this you know you know more or less the basic things you ask for beautiful uh actually the thing is i'm i'm pretty i mean i'm developing applications but i'm not able to explain the concepts when it comes to the interview so that is what my issue i completed so many models in uh bwj and other other projects in online like youtube or udemy but i'm not able to you know explain them like how uh explaining the interviews you know that is what my issue so i have been asking this question like where can i prepare and how can i prepare for the interviews yeah with some good explanations well so for example the api the api explanation we did today did that help you okay so i mean it is not about only the node.js thing but yeah i'm i'm i mean i have issues with react and javascript also so i'm not able to explain the concepts to them in a clear way um like when i start explaining to them so i'm going you know totally out of the box so i mean i'm not able to answer the question clearly so that is what my issue yeah i mean i mean so almost like two months back so i almost completed a couple of projects and i created my own portfolio beautiful um but under the the link to the to the youtube tutorial for you okay yeah so take a look at that but i think what she's asking is like so so guys one second so hell hold on hold on one second so so you know you you might not guys so you might not actually you know um you know it might be hard initially to kind of to to fully explain all the topics for you to fully spend the topics without what i would recommend is you really have to try out for example let's say you create a project you really need to let's say you created a project let's say you created a twitter clone project right or let's say google maps store locator for you what i recommend is you need to start try to create a project by yourself now by yourself fully without even looking at without even looking at um at the what's it called at the tutorial you created it one time i actually recommend you to create it on the second time again once again without looking at the tutorial okay okay here's why because then you will figure out how to properly then you'll understand how to properly how to properly um you know uh what a node.js is you know why are we creating another request and so forth that is gonna be a great way to explain it another great way to explain it is you know what become a success coach you know why do you know why no because as a success coach you will teach people and when you teach something then you really have to learn it then you really by teaching you actually learning does that make sense yes so for example if for example here's what i want you to do uh hold on where are you do you have a do you have a video of yourself do you have a video right now open no guys okay guys make sure please turn turn on your cameras i want to see those beautiful faces i don't want to see the black boxes turn them on there we go there we go beautiful thank you tonio there we go why are you guys always hiding i understand like why you guys are so afraid like nobody's out here to you know to get you you know we're all here well there we go thank you max turned it on and nathan turn it on at harvard turn it on thank you so what i would recommend for you is i want you to create a video actually explaining what node.js is that is going to be the best way for you to learn okay okay i watched the cr no i know i know i'm saying it's crazy i know it's crazy but hold on i know it's crazy but hold on where are you i'm trying to find you talk sweet no no talk again oh sweet oh look at there we go now i see i'm gonna highlight you hold on there you go i must follow you for everyone now everybody sees you there you go now everybody sees you so so and we're going to keep you accountable i want you literally after this call i want you to create you know loom you know you know loom works right loom yeah yeah i want to create loom video explaining to people what node.js is and like explain to people about what node.js is and how to actually create your first node.js application and explaining all the different parts just how we explained here for example i want you for example to create this application like this for example let's say you create an application like this right and then in the video you say okay guys so this is to to import the express this right here is we're initializing express this package.json is for us to where we dependencies exist right and so forth create that video you it will force you to learn and understand it fully got it so yeah i have this pair of you know showing my face in front of camera so if at the interval asking questions so i mean i will be comfortable answering the questions on the phone but if i if i face the face of his video then i then then here's what you want then you know what and loom make sure i want to see i want to see your face i want to see your face i want to see your beautiful face on the video okay okay okay do you promise do you promise you'll do this yeah sure definitely yes yeah because yeah i i really wanted to learn you know i really wanted to express what i know so i know so please do it guys can we keep her accountable guys you guys looks you guys will well we'll we'll get a video from sway is that right from sway sweet sweet sweet sweet how long and how much time by tomorrow yeah by tomorrow okay okay i love it i love it so i want you to do that literally guys you know that is the best we're going to learn if you really want explanation how it works yes i'm here to give you the knowledge and just just kind of how just how we broke down api stuff this was great but you're it's really going to sink in if you're going to try and actually teach it to someone so this is a challenge for everybody what's up how can someone become a scientist uh contact david or kosi markowski rokowski on slack okay but one more question yeah go ahead so hell thank you as i created as i created the netflix api so at the source control i got like 2 000 files ready to be uploaded i don't know somewhere every time i do this i give these files how can i what to do not to well let me create a netflix api what do you mean by that oh the merge stack api you the mark for netflix or what no i just created the folder netflix api and then i opened it on my vs code as i opened it so i see like 2k files wait netflix api is open source where did you get this data no it was just a folder i made oh oh you oh so oh because you didn't open up inside vs code make sure you open up the actual folder something happened i don't know why just make sure you open up the folder so inside i followed exactly as you did really right click open the terminal and just uh did the same thing file so did you create new folder it's just like try it again try it again do do file um create a new folder inside a project clean your folder called netflix api make sure there's nothing inside here make sure it's empty right and then do inside here do services a new terminal folder and then do npm in it okay okay try it again there's no reason why i should be try it again okay and then and if it if you if the problem persists contact me on slack ok what's up if you go to back your vs code yes um on the right side under the search bar um here the search bar search the search bar no no to the left then here yeah under this one do you see this under under search under search here this this this icon yeah now i see like it's a 2k files hold on so do initials repository yeah yeah well do you know why do you know why no because it's trying because look it's trying to get all the node modules look at that all the node modules no modules have 2k files we don't need no modules so and i'll talk about this a little bit a little bit later on so it's a great thing to point out so what i'll do is for those of you who want to use git for this do create a file called git ignore dot get ignored create a file called dot get ignored and inside here i want you to put down node modules and save it boom now we're back to phone you find why do you have a screen huh how do they get this get ignored create a new file so i want you to right click so guys guys guys guys so creating your file so so let's go ahead and go back to our files new file create new file right here new file and i want you to call it dot git ignore like this just like so just like this and call the new file dot git ignore let me know when you give me a thumbs up when you're done with that dog get ignored yep thumbs up ray i gotta see you got it so hell you got it jesse got it beautiful okay and inside this duck ignore i want you to cr to inside inside this file and literally type out node underscore modules type that out and then save it yeah i i did it now from thousand two thousand it came to 1000 files no it should be four in that case it's importing something else i'm not sure what it's did you initialize your repository yes i did that yeah um oh you can communicate about it later on yeah i will say talk to me and slack about it okay but guys just so you know what git ignore does well who can explain what git ignore does uh it ignores the functions the go ahead yeah so basically get ignored what that does is you can just put any you can put like any files you want to hide into that file and then whenever you publish to github it will hide those files from github so it doesn't overload your github because if you put no modules in your github that will destroy it yeah and there won't be any more space to put anything but basically it will ignore basically get what git tracks your files yes or no get track search files yes give me a thumbs up yes yeah okay when you do dagger ignore you're saying hey i don't want you to track no modules so it does do not track the modules that means it is not included so you see how it's gray you see how it became gray that means it's not cool that means when we when we push to github that means no modules will not be included when you push to github does that make sense thumbs up beautiful thank you so much thank you you got it okay awesome guys at that point that's pretty much it guys for homework what i want you guys to do what i want you to do is pretty simple is i want you to get to this point i want you to have an api that says hello world that is the goal okay once you have an api that it says hello world just because i know you guys a lot some of you have followed some of you did not follow if you followed you already finished the homework that's perfect if you do not follow follow and then get it done all right okay yep beautiful all right in that case guys all i will say what's up can you go to the experience yes yes please just i want to take a screenshot okay uh thank you so much here take a switch right here got it beautiful nice sweet all right guys at this point let's go ahead and maybe maybe do some musica we're gonna have some music and before we have some music guys here's what i'll say to the youtube audience guys you can see we have such an amazing community you can see the amount of stuff that we're learning we're going deep down in understanding on everything that is there on software development today we talked about apis next time we'll talk about a few different things the last time we talked about promises and we literally dig dig deep down into that understanding so if you're interested in learning that the uh you know the deep down things on cyber development if you're interested in being part of amazing community that's growing where people are getting results for example like just landed his for his his client as well we have so many people who are lending clients jan got our job so many people are lending people clients it is insane so if you're interested and join amazing community like this who's that supportive hold on i want you to go ahead and everybody say with me join p.w.j say it with me right now join pewdiepie there we go there we go all right all right at this point guys let's put on some music um i'm trying to figure out what music i should put on but i'll put on what i always know that just works very well no not this one nope video recording nope caution go flavors see this one hold on if this one all right let's get some dancing guys let's go hey wait can you guys hear the song do you guys hear music no you guys don't hear the music oh man hold on my bad i was dancing by myself i guess hold on hold on guys let's see i don't understand am i sharing computer sound why is this now working the way i got it no okay how oh come on hello okay all right what about now [Laughter] thank you thank you sorry about it nothing my bad guys i'm sorry hold on okay i'm trying to figure out how to so make sure i want to make sure that you guys here too that's why hold on what do i do i like it okay i like it let's think about you always gonna have something weird that happens you know what i mean always can you guys hear it now we head for the sky it's all all right damn it [ __ ] damn it now you should just sing for us oh wait for the sky okay no no i got no singing voice guys i got no singing boys trust me yeah system audio that's fine that's so good it's just it's trying to share systematic and it's just not not doesn't want it the way it should be so here's what i'll do i will stop sharing i will stop sharing right now i got you guys i got you i know how to do this i know i got you i'm gonna stop sharing i want you i'm going to mute myself here first because i don't want to bull your is everything okay still you guys hear me yeah yeah he can hear you okay so that's good that's good that's fine you hear it or no no that's fine so here's what i'll do now check this out i'll do this edx okay they can't hear you but they'll be able to be able to hear this and then you will be able to hear this as well so check this out advanced and tell me if if it doesn't blow your ears okay let me know if it doesn't blow your ears is everything okay everything okay yes everything's still okay okay you hear me you guys hear it yes let's go really good yeah all right i'm gonna start from the beginning let's start from the beginning so unfortunately youtube you can actually hear this i'm sorry but you know what if you want to have this kind of a party you gotta kinda just join pwj all right so hey let's go all right i want everybody's hands to be up you guys ready hey let's go all right easily to this out make it louder right louder is it good now let's go hands up let's go all right brian i will spotlight you for a second here let's go brian go brian hey go go go go there you go i love it man all right next up we got don't need to next there we go next up we got so help we got some help go some help go so i'll go so i'll go go you're on nice next up you got melissa go melissa go go go hey nice next up we have brandon brendan let's go brendan go go hey all right next up i'm gonna do luca luca chill it down for us and chill it down for us hey there we go and nice nice nice and so now guys that is awesome all i can say is at this point at this point all i can say is thank you so much thank you so much for what you guys think about this one great all right all right guys i'm sure you guys learned a lot all right any questions before we head off are we all good you guys all pumped you know homework yes yes i love it i love it all right guys that is all i gotta say is hope you guys have an amazing day and i will see you in the next video but hold on don't go yet because i'm gonna end the live call right now and to you the youtube audience youtube audience if you want to join this amazing community the link is down in the description it is by far the best community out there that is it you give a thumbs up if you agree with me actually raise your hand two hands if you agree with me with this one yeah let's go all right in that case have yourself a great day and i will see you later and i'm gonna finish the
